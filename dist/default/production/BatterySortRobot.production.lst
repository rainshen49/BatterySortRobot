

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Apr 03 15:19:04 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1
    67                           	psect	text55,global,reloc=2,class=CODE,delta=1
    68                           	psect	text56,global,reloc=2,class=CODE,delta=1
    69                           	psect	text57,global,reloc=2,class=CODE,delta=1
    70                           	psect	text58,global,reloc=2,class=CODE,delta=1
    71                           	psect	text59,global,reloc=2,class=CODE,delta=1
    72                           	psect	text60,global,reloc=2,class=CODE,delta=1
    73                           	psect	text61,global,reloc=2,class=CODE,delta=1
    74                           	psect	text62,global,reloc=2,class=CODE,delta=1
    75                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    76                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    77                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    78  0000                     
    79                           ; Version 1.41
    80                           ; Generated 25/01/2017 GMT
    81                           ; 
    82                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution.
    96                           ; 
    97                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    98                           ;        software without specific prior written permission.
    99                           ; 
   100                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   101                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   102                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   103                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   104                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   105                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   106                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   107                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   108                           ; 
   109                           ; 
   110                           ; Code-generator required, PIC18F4620 Definitions
   111                           ; 
   112                           ; SFR Addresses
   113  0000                     
   114                           	psect	mediumconst
   115  00FDDA                     __pmediumconst:
   116                           	opt stack 0
   117  00FDDA  00                 	db	0
   118  00FDDB                     _dpowers:
   119                           	opt stack 0
   120  00FDDB  0001               	dw	1
   121  00FDDD  000A               	dw	10
   122  00FDDF  0064               	dw	100
   123  00FDE1  03E8               	dw	1000
   124  00FDE3  2710               	dw	10000
   125  00FDE5                     __end_of_dpowers:
   126                           	opt stack 0
   127  00FDE5                     _hexpowers:
   128                           	opt stack 0
   129  00FDE5  0001               	dw	1
   130  00FDE7  0010               	dw	16
   131  00FDE9  0100               	dw	256
   132  00FDEB  1000               	dw	4096
   133  00FDED                     __end_of_hexpowers:
   134                           	opt stack 0
   135  0000                     _PIR2bits	set	4001
   136  0000                     _EECON2	set	4007
   137  0000                     _EEDATA	set	4008
   138  0000                     _EECON1bits	set	4006
   139  0000                     _EEADR	set	4009
   140  0000                     _EEADRH	set	4010
   141  0000                     _SSPBUF	set	4041
   142  0000                     _SSPADD	set	4040
   143  0000                     _SSPCON2	set	4037
   144  0000                     _SSPCON1	set	4038
   145  0000                     _SSPSTAT	set	4039
   146  0000                     _ADRESL	set	4035
   147  0000                     _ADRESH	set	4036
   148  0000                     _ADCON0bits	set	4034
   149  0000                     _LATDbits	set	3980
   150  0000                     _PORTBbits	set	3969
   151  0000                     _PORTB	set	3969
   152  0000                     _INTCONbits	set	4082
   153  0000                     _CVRCON	set	4021
   154  0000                     _ADCON1	set	4033
   155  0000                     _ADCON0	set	4034
   156  0000                     _LATE	set	3981
   157  0000                     _LATD	set	3980
   158  0000                     _LATC	set	3979
   159  0000                     _LATB	set	3978
   160  0000                     _LATA	set	3977
   161  0000                     _TRISE	set	3990
   162  0000                     _TRISD	set	3989
   163  0000                     _TRISC	set	3988
   164  0000                     _TRISB	set	3987
   165  0000                     _TRISA	set	3986
   166  0000                     _ACKEN	set	32300
   167  0000                     _ACKDT	set	32301
   168  0000                     _RCEN	set	32299
   169  0000                     _PEN	set	32298
   170  0000                     _SEN	set	32296
   171  0000                     _TRISC4	set	31908
   172  0000                     _TRISC3	set	31907
   173  0000                     _ADON	set	32272
   174  0000                     _INT1IE	set	32643
   175  0000                     _INT1IF	set	32640
   176  0000                     _INT2IF	set	32641
   177  0000                     _INT2IE	set	32644
   178  0000                     _LATC6	set	31838
   179  0000                     _INTEDG2	set	32652
   180  0000                     _ADFM	set	32263
   181  0000                     _LATC2	set	31834
   182  0000                     _LATC1	set	31833
   183  0000                     _LATC0	set	31832
   184  00FDED                     STR_16:
   185                           
   186                           ; BSR set to: 0
   187  00FDED  53                 	db	83	;'S'
   188  00FDEE  6F                 	db	111	;'o'
   189  00FDEF  72                 	db	114	;'r'
   190  00FDF0  74                 	db	116	;'t'
   191  00FDF1  69                 	db	105	;'i'
   192  00FDF2  6E                 	db	110	;'n'
   193  00FDF3  67                 	db	103	;'g'
   194  00FDF4  20                 	db	32
   195  00FDF5  43                 	db	67	;'C'
   196  00FDF6  6F                 	db	111	;'o'
   197  00FDF7  6D                 	db	109	;'m'
   198  00FDF8  70                 	db	112	;'p'
   199  00FDF9  6C                 	db	108	;'l'
   200  00FDFA  65                 	db	101	;'e'
   201  00FDFB  74                 	db	116	;'t'
   202  00FDFC  65                 	db	101	;'e'
   203  00FDFD  20                 	db	32
   204  00FDFE  20                 	db	32
   205  00FDFF  20                 	db	32
   206  00FE00  20                 	db	32
   207  00FE01  20                 	db	32
   208  00FE02  20                 	db	32
   209  00FE03  20                 	db	32
   210  00FE04  20                 	db	32
   211  00FE05  20                 	db	32
   212  00FE06  20                 	db	32
   213  00FE07  00                 	db	0
   214  00FE08                     STR_20:
   215                           
   216                           ; BSR set to: 0
   217  00FE08  50                 	db	80	;'P'
   218  00FE09  72                 	db	114	;'r'
   219  00FE0A  65                 	db	101	;'e'
   220  00FE0B  73                 	db	115	;'s'
   221  00FE0C  73                 	db	115	;'s'
   222  00FE0D  20                 	db	32
   223  00FE0E  61                 	db	97	;'a'
   224  00FE0F  20                 	db	32
   225  00FE10  6E                 	db	110	;'n'
   226  00FE11  75                 	db	117	;'u'
   227  00FE12  6D                 	db	109	;'m'
   228  00FE13  62                 	db	98	;'b'
   229  00FE14  65                 	db	101	;'e'
   230  00FE15  72                 	db	114	;'r'
   231  00FE16  20                 	db	32
   232  00FE17  20                 	db	32
   233  00FE18  20                 	db	32
   234  00FE19  20                 	db	32
   235  00FE1A  20                 	db	32
   236  00FE1B  20                 	db	32
   237  00FE1C  20                 	db	32
   238  00FE1D  20                 	db	32
   239  00FE1E  20                 	db	32
   240  00FE1F  20                 	db	32
   241  00FE20  00                 	db	0
   242  00FE21                     STR_17:
   243                           
   244                           ; BSR set to: 0
   245  00FE21  20                 	db	32
   246  00FE22  20                 	db	32
   247  00FE23  20                 	db	32
   248  00FE24  20                 	db	32
   249  00FE25  25                 	db	37
   250  00FE26  30                 	db	48	;'0'
   251  00FE27  32                 	db	50	;'2'
   252  00FE28  78                 	db	120	;'x'
   253  00FE29  2F                 	db	47
   254  00FE2A  25                 	db	37
   255  00FE2B  30                 	db	48	;'0'
   256  00FE2C  32                 	db	50	;'2'
   257  00FE2D  78                 	db	120	;'x'
   258  00FE2E  2F                 	db	47
   259  00FE2F  25                 	db	37
   260  00FE30  30                 	db	48	;'0'
   261  00FE31  32                 	db	50	;'2'
   262  00FE32  78                 	db	120	;'x'
   263  00FE33  20                 	db	32
   264  00FE34  20                 	db	32
   265  00FE35  20                 	db	32
   266  00FE36  20                 	db	32
   267  00FE37  20                 	db	32
   268  00FE38  20                 	db	32
   269  00FE39  00                 	db	0
   270  00FE3A                     STR_18:
   271                           
   272                           ; BSR set to: 0
   273  00FE3A  20                 	db	32
   274  00FE3B  20                 	db	32
   275  00FE3C  20                 	db	32
   276  00FE3D  20                 	db	32
   277  00FE3E  25                 	db	37
   278  00FE3F  30                 	db	48	;'0'
   279  00FE40  32                 	db	50	;'2'
   280  00FE41  78                 	db	120	;'x'
   281  00FE42  3A                 	db	58	;':'
   282  00FE43  25                 	db	37
   283  00FE44  30                 	db	48	;'0'
   284  00FE45  32                 	db	50	;'2'
   285  00FE46  78                 	db	120	;'x'
   286  00FE47  3A                 	db	58	;':'
   287  00FE48  25                 	db	37
   288  00FE49  30                 	db	48	;'0'
   289  00FE4A  32                 	db	50	;'2'
   290  00FE4B  78                 	db	120	;'x'
   291  00FE4C  20                 	db	32
   292  00FE4D  20                 	db	32
   293  00FE4E  20                 	db	32
   294  00FE4F  20                 	db	32
   295  00FE50  20                 	db	32
   296  00FE51  20                 	db	32
   297  00FE52  00                 	db	0
   298  00FE53                     STR_22:
   299                           
   300                           ; BSR set to: 0
   301  00FE53  54                 	db	84	;'T'
   302  00FE54  69                 	db	105	;'i'
   303  00FE55  6D                 	db	109	;'m'
   304  00FE56  65                 	db	101	;'e'
   305  00FE57  20                 	db	32
   306  00FE58  45                 	db	69	;'E'
   307  00FE59  6C                 	db	108	;'l'
   308  00FE5A  61                 	db	97	;'a'
   309  00FE5B  70                 	db	112	;'p'
   310  00FE5C  73                 	db	115	;'s'
   311  00FE5D  65                 	db	101	;'e'
   312  00FE5E  64                 	db	100	;'d'
   313  00FE5F  3A                 	db	58	;':'
   314  00FE60  20                 	db	32
   315  00FE61  20                 	db	32
   316  00FE62  20                 	db	32
   317  00FE63  20                 	db	32
   318  00FE64  20                 	db	32
   319  00FE65  20                 	db	32
   320  00FE66  20                 	db	32
   321  00FE67  20                 	db	32
   322  00FE68  20                 	db	32
   323  00FE69  20                 	db	32
   324  00FE6A  00                 	db	0
   325  00FE6B                     STR_24:
   326                           
   327                           ; BSR set to: 0
   328  00FE6B  54                 	db	84	;'T'
   329  00FE6C  6F                 	db	111	;'o'
   330  00FE6D  74                 	db	116	;'t'
   331  00FE6E  61                 	db	97	;'a'
   332  00FE6F  6C                 	db	108	;'l'
   333  00FE70  20                 	db	32
   334  00FE71  53                 	db	83	;'S'
   335  00FE72  6F                 	db	111	;'o'
   336  00FE73  72                 	db	114	;'r'
   337  00FE74  74                 	db	116	;'t'
   338  00FE75  65                 	db	101	;'e'
   339  00FE76  64                 	db	100	;'d'
   340  00FE77  3A                 	db	58	;':'
   341  00FE78  20                 	db	32
   342  00FE79  20                 	db	32
   343  00FE7A  20                 	db	32
   344  00FE7B  20                 	db	32
   345  00FE7C  20                 	db	32
   346  00FE7D  20                 	db	32
   347  00FE7E  20                 	db	32
   348  00FE7F  20                 	db	32
   349  00FE80  20                 	db	32
   350  00FE81  20                 	db	32
   351  00FE82  00                 	db	0
   352  00FE83                     STR_21:
   353                           
   354                           ; BSR set to: 0
   355  00FE83  46                 	db	70	;'F'
   356  00FE84  6F                 	db	111	;'o'
   357  00FE85  72                 	db	114	;'r'
   358  00FE86  20                 	db	32
   359  00FE87  6D                 	db	109	;'m'
   360  00FE88  6F                 	db	111	;'o'
   361  00FE89  72                 	db	114	;'r'
   362  00FE8A  65                 	db	101	;'e'
   363  00FE8B  20                 	db	32
   364  00FE8C  69                 	db	105	;'i'
   365  00FE8D  6E                 	db	110	;'n'
   366  00FE8E  66                 	db	102	;'f'
   367  00FE8F  6F                 	db	111	;'o'
   368  00FE90  20                 	db	32
   369  00FE91  20                 	db	32
   370  00FE92  20                 	db	32
   371  00FE93  20                 	db	32
   372  00FE94  20                 	db	32
   373  00FE95  20                 	db	32
   374  00FE96  20                 	db	32
   375  00FE97  20                 	db	32
   376  00FE98  20                 	db	32
   377  00FE99  20                 	db	32
   378  00FE9A  00                 	db	0
   379  00FE9B                     STR_2:
   380                           
   381                           ; BSR set to: 0
   382  00FE9B  53                 	db	83	;'S'
   383  00FE9C  69                 	db	105	;'i'
   384  00FE9D  6D                 	db	109	;'m'
   385  00FE9E  75                 	db	117	;'u'
   386  00FE9F  6C                 	db	108	;'l'
   387  00FEA0  61                 	db	97	;'a'
   388  00FEA1  74                 	db	116	;'t'
   389  00FEA2  69                 	db	105	;'i'
   390  00FEA3  6E                 	db	110	;'n'
   391  00FEA4  67                 	db	103	;'g'
   392  00FEA5  2E                 	db	46
   393  00FEA6  2E                 	db	46
   394  00FEA7  2E                 	db	46
   395  00FEA8  20                 	db	32
   396  00FEA9  20                 	db	32
   397  00FEAA  20                 	db	32
   398  00FEAB  20                 	db	32
   399  00FEAC  20                 	db	32
   400  00FEAD  20                 	db	32
   401  00FEAE  20                 	db	32
   402  00FEAF  20                 	db	32
   403  00FEB0  20                 	db	32
   404  00FEB1  20                 	db	32
   405  00FEB2  00                 	db	0
   406  00FEB3                     STR_25:
   407                           
   408                           ; BSR set to: 0
   409  00FEB3  25                 	db	37
   410  00FEB4  75                 	db	117	;'u'
   411  00FEB5  20                 	db	32
   412  00FEB6  62                 	db	98	;'b'
   413  00FEB7  61                 	db	97	;'a'
   414  00FEB8  74                 	db	116	;'t'
   415  00FEB9  74                 	db	116	;'t'
   416  00FEBA  65                 	db	101	;'e'
   417  00FEBB  72                 	db	114	;'r'
   418  00FEBC  69                 	db	105	;'i'
   419  00FEBD  65                 	db	101	;'e'
   420  00FEBE  73                 	db	115	;'s'
   421  00FEBF  20                 	db	32
   422  00FEC0  20                 	db	32
   423  00FEC1  20                 	db	32
   424  00FEC2  20                 	db	32
   425  00FEC3  20                 	db	32
   426  00FEC4  20                 	db	32
   427  00FEC5  20                 	db	32
   428  00FEC6  20                 	db	32
   429  00FEC7  20                 	db	32
   430  00FEC8  20                 	db	32
   431  00FEC9  00                 	db	0
   432  00FECA                     STR_41:
   433                           
   434                           ; BSR set to: 0
   435  00FECA  50                 	db	80	;'P'
   436  00FECB  65                 	db	101	;'e'
   437  00FECC  72                 	db	114	;'r'
   438  00FECD  6D                 	db	109	;'m'
   439  00FECE  61                 	db	97	;'a'
   440  00FECF  6E                 	db	110	;'n'
   441  00FED0  65                 	db	101	;'e'
   442  00FED1  6E                 	db	110	;'n'
   443  00FED2  74                 	db	116	;'t'
   444  00FED3  20                 	db	32
   445  00FED4  6C                 	db	108	;'l'
   446  00FED5  6F                 	db	111	;'o'
   447  00FED6  67                 	db	103	;'g'
   448  00FED7  3A                 	db	58	;':'
   449  00FED8  20                 	db	32
   450  00FED9  20                 	db	32
   451  00FEDA  20                 	db	32
   452  00FEDB  20                 	db	32
   453  00FEDC  20                 	db	32
   454  00FEDD  20                 	db	32
   455  00FEDE  20                 	db	32
   456  00FEDF  00                 	db	0
   457  00FEE0                     STR_32:
   458                           
   459                           ; BSR set to: 0
   460  00FEE0  55                 	db	85	;'U'
   461  00FEE1  6E                 	db	110	;'n'
   462  00FEE2  63                 	db	99	;'c'
   463  00FEE3  68                 	db	104	;'h'
   464  00FEE4  61                 	db	97	;'a'
   465  00FEE5  72                 	db	114	;'r'
   466  00FEE6  67                 	db	103	;'g'
   467  00FEE7  65                 	db	101	;'e'
   468  00FEE8  64                 	db	100	;'d'
   469  00FEE9  3A                 	db	58	;':'
   470  00FEEA  20                 	db	32
   471  00FEEB  20                 	db	32
   472  00FEEC  20                 	db	32
   473  00FEED  20                 	db	32
   474  00FEEE  20                 	db	32
   475  00FEEF  20                 	db	32
   476  00FEF0  20                 	db	32
   477  00FEF1  20                 	db	32
   478  00FEF2  20                 	db	32
   479  00FEF3  20                 	db	32
   480  00FEF4  00                 	db	0
   481  00FEF5                     STR_26:
   482                           
   483                           ; BSR set to: 0
   484  00FEF5  41                 	db	65	;'A'
   485  00FEF6  41                 	db	65	;'A'
   486  00FEF7  20                 	db	32
   487  00FEF8  53                 	db	83	;'S'
   488  00FEF9  6F                 	db	111	;'o'
   489  00FEFA  72                 	db	114	;'r'
   490  00FEFB  74                 	db	116	;'t'
   491  00FEFC  65                 	db	101	;'e'
   492  00FEFD  64                 	db	100	;'d'
   493  00FEFE  3A                 	db	58	;':'
   494  00FEFF  20                 	db	32
   495  00FF00  20                 	db	32
   496  00FF01  20                 	db	32
   497  00FF02  20                 	db	32
   498  00FF03  20                 	db	32
   499  00FF04  20                 	db	32
   500  00FF05  20                 	db	32
   501  00FF06  20                 	db	32
   502  00FF07  20                 	db	32
   503  00FF08  20                 	db	32
   504  00FF09  00                 	db	0
   505  00FF0A                     STR_30:
   506                           
   507                           ; BSR set to: 0
   508  00FF0A  39                 	db	57	;'9'
   509  00FF0B  56                 	db	86	;'V'
   510  00FF0C  20                 	db	32
   511  00FF0D  53                 	db	83	;'S'
   512  00FF0E  6F                 	db	111	;'o'
   513  00FF0F  72                 	db	114	;'r'
   514  00FF10  74                 	db	116	;'t'
   515  00FF11  65                 	db	101	;'e'
   516  00FF12  64                 	db	100	;'d'
   517  00FF13  3A                 	db	58	;':'
   518  00FF14  20                 	db	32
   519  00FF15  20                 	db	32
   520  00FF16  20                 	db	32
   521  00FF17  20                 	db	32
   522  00FF18  20                 	db	32
   523  00FF19  20                 	db	32
   524  00FF1A  20                 	db	32
   525  00FF1B  20                 	db	32
   526  00FF1C  20                 	db	32
   527  00FF1D  20                 	db	32
   528  00FF1E  00                 	db	0
   529  00FF1F                     STR_23:
   530                           
   531                           ; BSR set to: 0
   532  00FF1F  25                 	db	37
   533  00FF20  75                 	db	117	;'u'
   534  00FF21  20                 	db	32
   535  00FF22  73                 	db	115	;'s'
   536  00FF23  65                 	db	101	;'e'
   537  00FF24  63                 	db	99	;'c'
   538  00FF25  6F                 	db	111	;'o'
   539  00FF26  6E                 	db	110	;'n'
   540  00FF27  64                 	db	100	;'d'
   541  00FF28  73                 	db	115	;'s'
   542  00FF29  20                 	db	32
   543  00FF2A  20                 	db	32
   544  00FF2B  20                 	db	32
   545  00FF2C  20                 	db	32
   546  00FF2D  20                 	db	32
   547  00FF2E  20                 	db	32
   548  00FF2F  20                 	db	32
   549  00FF30  20                 	db	32
   550  00FF31  20                 	db	32
   551  00FF32  20                 	db	32
   552  00FF33  00                 	db	0
   553  00FF34                     STR_34:
   554                           
   555                           ; BSR set to: 0
   556  00FF34  45                 	db	69	;'E'
   557  00FF35  6D                 	db	109	;'m'
   558  00FF36  65                 	db	101	;'e'
   559  00FF37  72                 	db	114	;'r'
   560  00FF38  67                 	db	103	;'g'
   561  00FF39  65                 	db	101	;'e'
   562  00FF3A  6E                 	db	110	;'n'
   563  00FF3B  63                 	db	99	;'c'
   564  00FF3C  79                 	db	121	;'y'
   565  00FF3D  20                 	db	32
   566  00FF3E  20                 	db	32
   567  00FF3F  20                 	db	32
   568  00FF40  20                 	db	32
   569  00FF41  20                 	db	32
   570  00FF42  20                 	db	32
   571  00FF43  20                 	db	32
   572  00FF44  20                 	db	32
   573  00FF45  20                 	db	32
   574  00FF46  20                 	db	32
   575  00FF47  00                 	db	0
   576  00FF48                     STR_28:
   577                           
   578                           ; BSR set to: 0
   579  00FF48  43                 	db	67	;'C'
   580  00FF49  20                 	db	32
   581  00FF4A  53                 	db	83	;'S'
   582  00FF4B  6F                 	db	111	;'o'
   583  00FF4C  72                 	db	114	;'r'
   584  00FF4D  74                 	db	116	;'t'
   585  00FF4E  65                 	db	101	;'e'
   586  00FF4F  64                 	db	100	;'d'
   587  00FF50  3A                 	db	58	;':'
   588  00FF51  20                 	db	32
   589  00FF52  20                 	db	32
   590  00FF53  20                 	db	32
   591  00FF54  20                 	db	32
   592  00FF55  20                 	db	32
   593  00FF56  20                 	db	32
   594  00FF57  20                 	db	32
   595  00FF58  20                 	db	32
   596  00FF59  20                 	db	32
   597  00FF5A  20                 	db	32
   598  00FF5B  00                 	db	0
   599  00FF5C                     STR_19:
   600                           
   601                           ; BSR set to: 0
   602  00FF5C  57                 	db	87	;'W'
   603  00FF5D  65                 	db	101	;'e'
   604  00FF5E  6C                 	db	108	;'l'
   605  00FF5F  63                 	db	99	;'c'
   606  00FF60  6F                 	db	111	;'o'
   607  00FF61  6D                 	db	109	;'m'
   608  00FF62  65                 	db	101	;'e'
   609  00FF63  21                 	db	33
   610  00FF64  20                 	db	32
   611  00FF65  20                 	db	32
   612  00FF66  20                 	db	32
   613  00FF67  20                 	db	32
   614  00FF68  20                 	db	32
   615  00FF69  20                 	db	32
   616  00FF6A  20                 	db	32
   617  00FF6B  20                 	db	32
   618  00FF6C  20                 	db	32
   619  00FF6D  20                 	db	32
   620  00FF6E  00                 	db	0
   621  00FF6F                     STR_42:
   622                           
   623                           ; BSR set to: 0
   624  00FF6F  57                 	db	87	;'W'
   625  00FF70  68                 	db	104	;'h'
   626  00FF71  69                 	db	105	;'i'
   627  00FF72  63                 	db	99	;'c'
   628  00FF73  68                 	db	104	;'h'
   629  00FF74  20                 	db	32
   630  00FF75  72                 	db	114	;'r'
   631  00FF76  75                 	db	117	;'u'
   632  00FF77  6E                 	db	110	;'n'
   633  00FF78  3F                 	db	63	;'?'
   634  00FF79  20                 	db	32
   635  00FF7A  20                 	db	32
   636  00FF7B  20                 	db	32
   637  00FF7C  20                 	db	32
   638  00FF7D  20                 	db	32
   639  00FF7E  20                 	db	32
   640  00FF7F  20                 	db	32
   641  00FF80  00                 	db	0
   642  00FF81                     STR_35:
   643                           
   644                           ; BSR set to: 0
   645  00FF81  53                 	db	83	;'S'
   646  00FF82  74                 	db	116	;'t'
   647  00FF83  6F                 	db	111	;'o'
   648  00FF84  70                 	db	112	;'p'
   649  00FF85  70                 	db	112	;'p'
   650  00FF86  65                 	db	101	;'e'
   651  00FF87  64                 	db	100	;'d'
   652  00FF88  20                 	db	32
   653  00FF89  20                 	db	32
   654  00FF8A  20                 	db	32
   655  00FF8B  20                 	db	32
   656  00FF8C  20                 	db	32
   657  00FF8D  20                 	db	32
   658  00FF8E  20                 	db	32
   659  00FF8F  20                 	db	32
   660  00FF90  20                 	db	32
   661  00FF91  20                 	db	32
   662  00FF92  00                 	db	0
   663  00FF93                     STR_45:
   664                           
   665                           ; BSR set to: 0
   666  00FF93  30                 	db	48	;'0'
   667  00FF94  31                 	db	49	;'1'
   668  00FF95  32                 	db	50	;'2'
   669  00FF96  33                 	db	51	;'3'
   670  00FF97  34                 	db	52	;'4'
   671  00FF98  35                 	db	53	;'5'
   672  00FF99  36                 	db	54	;'6'
   673  00FF9A  37                 	db	55	;'7'
   674  00FF9B  38                 	db	56	;'8'
   675  00FF9C  39                 	db	57	;'9'
   676  00FF9D  61                 	db	97	;'a'
   677  00FF9E  62                 	db	98	;'b'
   678  00FF9F  63                 	db	99	;'c'
   679  00FFA0  64                 	db	100	;'d'
   680  00FFA1  65                 	db	101	;'e'
   681  00FFA2  66                 	db	102	;'f'
   682  00FFA3  00                 	db	0
   683  00FFA4                     STR_43:
   684                           
   685                           ; BSR set to: 0
   686  00FFA4  73                 	db	115	;'s'
   687  00FFA5  68                 	db	104	;'h'
   688  00FFA6  6F                 	db	111	;'o'
   689  00FFA7  77                 	db	119	;'w'
   690  00FFA8  69                 	db	105	;'i'
   691  00FFA9  6E                 	db	110	;'n'
   692  00FFAA  67                 	db	103	;'g'
   693  00FFAB  20                 	db	32
   694  00FFAC  25                 	db	37
   695  00FFAD  75                 	db	117	;'u'
   696  00FFAE  20                 	db	32
   697  00FFAF  20                 	db	32
   698  00FFB0  20                 	db	32
   699  00FFB1  20                 	db	32
   700  00FFB2  20                 	db	32
   701  00FFB3  20                 	db	32
   702  00FFB4  00                 	db	0
   703  00FFB5                     STR_44:
   704                           
   705                           ; BSR set to: 0
   706  00FFB5  72                 	db	114	;'r'
   707  00FFB6  75                 	db	117	;'u'
   708  00FFB7  6E                 	db	110	;'n'
   709  00FFB8  73                 	db	115	;'s'
   710  00FFB9  20                 	db	32
   711  00FFBA  62                 	db	98	;'b'
   712  00FFBB  65                 	db	101	;'e'
   713  00FFBC  66                 	db	102	;'f'
   714  00FFBD  6F                 	db	111	;'o'
   715  00FFBE  72                 	db	114	;'r'
   716  00FFBF  65                 	db	101	;'e'
   717  00FFC0  20                 	db	32
   718  00FFC1  20                 	db	32
   719  00FFC2  20                 	db	32
   720  00FFC3  20                 	db	32
   721  00FFC4  20                 	db	32
   722  00FFC5  00                 	db	0
   723  00FFC6                     STR_27:
   724                           
   725                           ; BSR set to: 0
   726  00FFC6  25                 	db	37
   727  00FFC7  75                 	db	117	;'u'
   728  00FFC8  20                 	db	32
   729  00FFC9  20                 	db	32
   730  00FFCA  20                 	db	32
   731  00FFCB  20                 	db	32
   732  00FFCC  20                 	db	32
   733  00FFCD  20                 	db	32
   734  00FFCE  20                 	db	32
   735  00FFCF  20                 	db	32
   736  00FFD0  20                 	db	32
   737  00FFD1  20                 	db	32
   738  00FFD2  20                 	db	32
   739  00FFD3  20                 	db	32
   740  00FFD4  20                 	db	32
   741  00FFD5  00                 	db	0
   742  00FFD6                     
   743                           ; BSR set to: 0
   744  00FFD6  4D                 	db	77	;'M'
   745  00FFD7  61                 	db	97	;'a'
   746  00FFD8  69                 	db	105	;'i'
   747  00FFD9  6E                 	db	110	;'n'
   748  00FFDA  6C                 	db	108	;'l'
   749  00FFDB  6F                 	db	111	;'o'
   750  00FFDC  6F                 	db	111	;'o'
   751  00FFDD  70                 	db	112	;'p'
   752  00FFDE  00                 	db	0
   753  00FFDF                     STR_37:
   754                           
   755                           ; BSR set to: 0
   756  00FFDF  20                 	db	32
   757  00FFE0  25                 	db	37
   758  00FFE1  64                 	db	100	;'d'
   759  00FFE2  20                 	db	32
   760  00FFE3  00                 	db	0
   761  00FFE4                     STR_12:
   762                           
   763                           ; BSR set to: 0
   764  00FFE4  20                 	db	32
   765  00FFE5  41                 	db	65	;'A'
   766  00FFE6  41                 	db	65	;'A'
   767  00FFE7  3A                 	db	58	;':'
   768  00FFE8  00                 	db	0
   769  00FFE9                     STR_36:
   770                           
   771                           ; BSR set to: 0
   772  00FFE9  2D                 	db	45
   773  00FFEA  31                 	db	49	;'1'
   774  00FFEB  20                 	db	32
   775  00FFEC  00                 	db	0
   776  00FFED                     STR_8:
   777                           
   778                           ; BSR set to: 0
   779  00FFED  20                 	db	32
   780  00FFEE  43                 	db	67	;'C'
   781  00FFEF  3A                 	db	58	;':'
   782  00FFF0  00                 	db	0
   783  00FFF1                     STR_4:
   784                           
   785                           ; BSR set to: 0
   786  00FFF1  39                 	db	57	;'9'
   787  00FFF2  56                 	db	86	;'V'
   788  00FFF3  3A                 	db	58	;':'
   789  00FFF4  00                 	db	0
   790  00FFF5                     STR_6:
   791                           
   792                           ; BSR set to: 0
   793  00FFF5  20                 	db	32
   794  00FFF6  2B                 	db	43
   795  00FFF7  00                 	db	0
   796  00FFF8                     STR_5:
   797                           
   798                           ; BSR set to: 0
   799  00FFF8  20                 	db	32
   800  00FFF9  2D                 	db	45
   801  00FFFA  00                 	db	0
   802  00FFFB                     STR_7:
   803                           
   804                           ; BSR set to: 0
   805  00FFFB  20                 	db	32
   806  00FFFC  30                 	db	48	;'0'
   807  00FFFD  00                 	db	0
   808  0000                     
   809                           ; #config settings
   810  00FFFE  00                 	db	0	; dummy byte at the end
   811  0000                     
   812                           	psect	cinit
   813  0021FC                     __pcinit:
   814                           	opt stack 0
   815  0021FC                     start_initialization:
   816                           	opt stack 0
   817  0021FC                     __initialization:
   818                           	opt stack 0
   819                           
   820                           ; Clear objects allocated to BANK0 (27 bytes)
   821  0021FC  EE00  F0AA         	lfsr	0,__pbssBANK0
   822  002200  0E1B               	movlw	27
   823  002202                     clear_0:
   824  002202  6AEE               	clrf	postinc0,c
   825  002204  06E8               	decf	wreg,f,c
   826  002206  E1FD               	bnz	clear_0
   827                           
   828                           ; Clear objects allocated to COMRAM (17 bytes)
   829  002208  EE00  F06D         	lfsr	0,__pbssCOMRAM
   830  00220C  0E11               	movlw	17
   831  00220E                     clear_1:
   832  00220E  6AEE               	clrf	postinc0,c
   833  002210  06E8               	decf	wreg,f,c
   834  002212  E1FD               	bnz	clear_1
   835  002214                     end_of_initialization:
   836                           	opt stack 0
   837  002214                     __end_of__initialization:
   838                           	opt stack 0
   839  002214  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   840  002216  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   841  002218  0E00               	movlw	low (__Lmediumconst shr (0+16))
   842  00221A  6EF8               	movwf	tblptru,c
   843  00221C  0100               	movlb	0
   844  00221E  EFC7  F00F         	goto	_main	;jump to C main() function
   845                           tblptru	equ	0xFF8
   846                           postinc0	equ	0xFEE
   847                           wreg	equ	0xFE8
   848                           
   849                           	psect	bssCOMRAM
   850  00006D                     __pbssCOMRAM:
   851                           	opt stack 0
   852  00006D                     simulate@F3097:
   853                           	opt stack 0
   854  00006D                     	ds	4
   855  000071                     simulate@F3095:
   856                           	opt stack 0
   857  000071                     	ds	4
   858  000075                     _mode:
   859                           	opt stack 0
   860  000075                     	ds	2
   861  000077                     _time:
   862                           	opt stack 0
   863  000077                     	ds	7
   864                           tblptru	equ	0xFF8
   865                           postinc0	equ	0xFEE
   866                           wreg	equ	0xFE8
   867                           
   868                           	psect	bssBANK0
   869  0000AA                     __pbssBANK0:
   870                           	opt stack 0
   871  0000AA                     intrpt@F3118:
   872                           	opt stack 0
   873  0000AA                     	ds	6
   874  0000B0                     simulate@F3109:
   875                           	opt stack 0
   876  0000B0                     	ds	6
   877  0000B6                     simulate@F3107:
   878                           	opt stack 0
   879  0000B6                     	ds	6
   880  0000BC                     PermLog@F3082:
   881                           	opt stack 0
   882  0000BC                     	ds	4
   883  0000C0                     simulate@F3099:
   884                           	opt stack 0
   885  0000C0                     	ds	4
   886  0000C4                     _Latest:
   887                           	opt stack 0
   888  0000C4                     	ds	1
   889                           tblptru	equ	0xFF8
   890                           postinc0	equ	0xFEE
   891                           wreg	equ	0xFE8
   892                           
   893                           	psect	cstackBANK0
   894  000080                     __pcstackBANK0:
   895                           	opt stack 0
   896  000080                     ??_isdigit:
   897  000080                     ??_I2C_Master_Wait:
   898  000080                     ?___wmul:
   899                           	opt stack 0
   900  000080                     ?___lwdiv:
   901                           	opt stack 0
   902  000080                     ?___lldiv:
   903                           	opt stack 0
   904  000080                     lcdNibble@temp:
   905                           	opt stack 0
   906  000080                     ReadEE@address:
   907                           	opt stack 0
   908  000080                     ___wmul@multiplier:
   909                           	opt stack 0
   910  000080                     ___lwdiv@dividend:
   911                           	opt stack 0
   912  000080                     ___lldiv@dividend:
   913                           	opt stack 0
   914                           
   915                           ; 4 bytes @ 0x0
   916  000080                     	ds	1
   917  000081                     lcdNibble@data:
   918                           	opt stack 0
   919  000081                     I2C_Master_Read@a:
   920                           	opt stack 0
   921  000081                     _isdigit$1055:
   922                           	opt stack 0
   923  000081                     I2C_Master_Write@d:
   924                           	opt stack 0
   925                           
   926                           ; 2 bytes @ 0x1
   927  000081                     	ds	1
   928  000082                     lcdInst@data:
   929                           	opt stack 0
   930  000082                     putch@data:
   931                           	opt stack 0
   932  000082                     I2C_Master_Read@temp:
   933                           	opt stack 0
   934  000082                     isdigit@c:
   935                           	opt stack 0
   936  000082                     ___wmul@multiplicand:
   937                           	opt stack 0
   938  000082                     ___lwdiv@divisor:
   939                           	opt stack 0
   940                           
   941                           ; 2 bytes @ 0x2
   942  000082                     	ds	1
   943  000083                     ??_initLCD:
   944  000083                     getTime@time:
   945                           	opt stack 0
   946                           
   947                           ; 2 bytes @ 0x3
   948  000083                     	ds	1
   949  000084                     ___wmul@product:
   950                           	opt stack 0
   951  000084                     ___lwdiv@quotient:
   952                           	opt stack 0
   953  000084                     ___lldiv@divisor:
   954                           	opt stack 0
   955                           
   956                           ; 4 bytes @ 0x4
   957  000084                     	ds	1
   958  000085                     getTime@i:
   959                           	opt stack 0
   960                           
   961                           ; 1 bytes @ 0x5
   962  000085                     	ds	1
   963  000086                     ___lwdiv@counter:
   964                           	opt stack 0
   965                           
   966                           ; 1 bytes @ 0x6
   967  000086                     	ds	1
   968  000087                     ?___lwmod:
   969                           	opt stack 0
   970  000087                     ___lwmod@dividend:
   971                           	opt stack 0
   972                           
   973                           ; 2 bytes @ 0x7
   974  000087                     	ds	1
   975  000088                     ___lldiv@quotient:
   976                           	opt stack 0
   977                           
   978                           ; 4 bytes @ 0x8
   979  000088                     	ds	1
   980  000089                     ___lwmod@divisor:
   981                           	opt stack 0
   982                           
   983                           ; 2 bytes @ 0x9
   984  000089                     	ds	2
   985  00008B                     ___lwmod@counter:
   986                           	opt stack 0
   987                           
   988                           ; 1 bytes @ 0xB
   989  00008B                     	ds	1
   990  00008C                     ?_printf:
   991                           	opt stack 0
   992  00008C                     ___lldiv@counter:
   993                           	opt stack 0
   994  00008C                     printf@f:
   995                           	opt stack 0
   996                           
   997                           ; 2 bytes @ 0xC
   998  00008C                     	ds	1
   999  00008D                     I2C_Master_Init@c:
  1000                           	opt stack 0
  1001                           
  1002                           ; 4 bytes @ 0xD
  1003  00008D                     	ds	4
  1004  000091                     ??_I2C_Master_Init:
  1005                           
  1006                           ; 1 bytes @ 0x11
  1007  000091                     	ds	3
  1008  000094                     ??_printf:
  1009                           
  1010                           ; 1 bytes @ 0x14
  1011  000094                     	ds	1
  1012  000095                     
  1013                           ; 1 bytes @ 0x15
  1014  000095                     	ds	3
  1015  000098                     printf@cp:
  1016                           	opt stack 0
  1017                           
  1018                           ; 2 bytes @ 0x18
  1019  000098                     	ds	2
  1020  00009A                     printf@idx:
  1021                           	opt stack 0
  1022                           
  1023                           ; 1 bytes @ 0x1A
  1024  00009A                     	ds	1
  1025  00009B                     printf@ap:
  1026                           	opt stack 0
  1027                           
  1028                           ; 2 bytes @ 0x1B
  1029  00009B                     	ds	2
  1030  00009D                     printf@len:
  1031                           	opt stack 0
  1032                           
  1033                           ; 2 bytes @ 0x1D
  1034  00009D                     	ds	2
  1035  00009F                     printf@prec:
  1036                           	opt stack 0
  1037                           
  1038                           ; 1 bytes @ 0x1F
  1039  00009F                     	ds	1
  1040  0000A0                     printf@val:
  1041                           	opt stack 0
  1042                           
  1043                           ; 2 bytes @ 0x20
  1044  0000A0                     	ds	2
  1045  0000A2                     printf@flag:
  1046                           	opt stack 0
  1047                           
  1048                           ; 1 bytes @ 0x22
  1049  0000A2                     	ds	1
  1050  0000A3                     printf@width:
  1051                           	opt stack 0
  1052                           
  1053                           ; 2 bytes @ 0x23
  1054  0000A3                     	ds	2
  1055  0000A5                     printf@c:
  1056                           	opt stack 0
  1057                           
  1058                           ; 1 bytes @ 0x25
  1059  0000A5                     	ds	1
  1060  0000A6                     ??_showRTC:
  1061                           
  1062                           ; 1 bytes @ 0x26
  1063  0000A6                     	ds	2
  1064  0000A8                     ??_main:
  1065                           
  1066                           ; 1 bytes @ 0x28
  1067  0000A8                     	ds	2
  1068                           tblptru	equ	0xFF8
  1069                           postinc0	equ	0xFEE
  1070                           wreg	equ	0xFE8
  1071                           
  1072                           	psect	cstackCOMRAM
  1073  000001                     __pcstackCOMRAM:
  1074                           	opt stack 0
  1075  000001                     ??i2_I2C_Master_Wait:
  1076  000001                     ??i2_isdigit:
  1077  000001                     ?_captureKeypad:
  1078                           	opt stack 0
  1079  000001                     ?_AD:
  1080                           	opt stack 0
  1081  000001                     ?___awdiv:
  1082                           	opt stack 0
  1083  000001                     ?i2___wmul:
  1084                           	opt stack 0
  1085  000001                     ?i2___lwdiv:
  1086                           	opt stack 0
  1087  000001                     ?___ftpack:
  1088                           	opt stack 0
  1089  000001                     back@runs:
  1090                           	opt stack 0
  1091  000001                     i2lcdNibble@temp:
  1092                           	opt stack 0
  1093  000001                     WriteEE@address:
  1094                           	opt stack 0
  1095  000001                     ___awdiv@dividend:
  1096                           	opt stack 0
  1097  000001                     i2ReadEE@address:
  1098                           	opt stack 0
  1099  000001                     i2___wmul@multiplier:
  1100                           	opt stack 0
  1101  000001                     i2___lwdiv@dividend:
  1102                           	opt stack 0
  1103  000001                     ___ftpack@arg:
  1104                           	opt stack 0
  1105                           
  1106                           ; 3 bytes @ 0x0
  1107  000001                     	ds	1
  1108  000002                     back@result:
  1109                           	opt stack 0
  1110  000002                     i2lcdNibble@data:
  1111                           	opt stack 0
  1112  000002                     i2I2C_Master_Read@a:
  1113                           	opt stack 0
  1114  000002                     i2_isdigit$1055:
  1115                           	opt stack 0
  1116  000002                     i2I2C_Master_Write@d:
  1117                           	opt stack 0
  1118                           
  1119                           ; 2 bytes @ 0x1
  1120  000002                     	ds	1
  1121  000003                     ??_AD:
  1122  000003                     captureKeypad@keypress:
  1123                           	opt stack 0
  1124  000003                     WriteEE@data:
  1125                           	opt stack 0
  1126  000003                     i2lcdInst@data:
  1127                           	opt stack 0
  1128  000003                     i2putch@data:
  1129                           	opt stack 0
  1130  000003                     i2I2C_Master_Read@temp:
  1131                           	opt stack 0
  1132  000003                     i2isdigit@c:
  1133                           	opt stack 0
  1134  000003                     ReadRun@sorted:
  1135                           	opt stack 0
  1136  000003                     ___awdiv@divisor:
  1137                           	opt stack 0
  1138  000003                     i2___wmul@multiplicand:
  1139                           	opt stack 0
  1140  000003                     i2___lwdiv@divisor:
  1141                           	opt stack 0
  1142                           
  1143                           ; 2 bytes @ 0x2
  1144  000003                     	ds	1
  1145  000004                     ___ftpack@exp:
  1146                           	opt stack 0
  1147  000004                     i2getTime@time:
  1148                           	opt stack 0
  1149                           
  1150                           ; 2 bytes @ 0x3
  1151  000004                     	ds	1
  1152  000005                     AD@channel:
  1153                           	opt stack 0
  1154  000005                     ___awdiv@counter:
  1155                           	opt stack 0
  1156  000005                     ___ftpack@sign:
  1157                           	opt stack 0
  1158  000005                     ReadRun@time:
  1159                           	opt stack 0
  1160  000005                     i2___wmul@product:
  1161                           	opt stack 0
  1162  000005                     i2___lwdiv@quotient:
  1163                           	opt stack 0
  1164                           
  1165                           ; 2 bytes @ 0x4
  1166  000005                     	ds	1
  1167  000006                     ??___ftpack:
  1168  000006                     ___awdiv@sign:
  1169                           	opt stack 0
  1170  000006                     i2getTime@i:
  1171                           	opt stack 0
  1172                           
  1173                           ; 1 bytes @ 0x5
  1174  000006                     	ds	1
  1175  000007                     ??_ReadRun:
  1176  000007                     ?_HexDecToDec2:
  1177                           	opt stack 0
  1178  000007                     i2___lwdiv@counter:
  1179                           	opt stack 0
  1180  000007                     HexDecToDec2@hex:
  1181                           	opt stack 0
  1182  000007                     WriteRun@sorted:
  1183                           	opt stack 0
  1184  000007                     ___awdiv@quotient:
  1185                           	opt stack 0
  1186                           
  1187                           ; 2 bytes @ 0x6
  1188  000007                     	ds	1
  1189  000008                     ?i2___lwmod:
  1190                           	opt stack 0
  1191  000008                     i2___lwmod@dividend:
  1192                           	opt stack 0
  1193                           
  1194                           ; 2 bytes @ 0x7
  1195  000008                     	ds	1
  1196  000009                     ??_HexDecToDec2:
  1197  000009                     ?___awtoft:
  1198                           	opt stack 0
  1199  000009                     PWMC@widthus:
  1200                           	opt stack 0
  1201  000009                     WriteRun@time:
  1202                           	opt stack 0
  1203  000009                     ___awtoft@c:
  1204                           	opt stack 0
  1205                           
  1206                           ; 2 bytes @ 0x8
  1207  000009                     	ds	1
  1208  00000A                     i2___lwmod@divisor:
  1209                           	opt stack 0
  1210                           
  1211                           ; 2 bytes @ 0x9
  1212  00000A                     	ds	1
  1213  00000B                     ??_WriteRun:
  1214  00000B                     ReadRun@backruns:
  1215                           	opt stack 0
  1216  00000B                     PWMC@cycles:
  1217                           	opt stack 0
  1218                           
  1219                           ; 2 bytes @ 0xA
  1220  00000B                     	ds	1
  1221  00000C                     ___awtoft@sign:
  1222                           	opt stack 0
  1223  00000C                     i2___lwmod@counter:
  1224                           	opt stack 0
  1225  00000C                     HexDecToDec2@tenth:
  1226                           	opt stack 0
  1227  00000C                     ReadRun@add:
  1228                           	opt stack 0
  1229                           
  1230                           ; 2 bytes @ 0xB
  1231  00000C                     	ds	1
  1232  00000D                     ?i2_printf:
  1233                           	opt stack 0
  1234  00000D                     ?___ftmul:
  1235                           	opt stack 0
  1236  00000D                     PWMC@port:
  1237                           	opt stack 0
  1238  00000D                     WriteRun@add:
  1239                           	opt stack 0
  1240  00000D                     i2printf@f:
  1241                           	opt stack 0
  1242  00000D                     ___ftmul@f1:
  1243                           	opt stack 0
  1244                           
  1245                           ; 3 bytes @ 0xC
  1246  00000D                     	ds	1
  1247  00000E                     HexDecToDec2@digit:
  1248                           	opt stack 0
  1249                           
  1250                           ; 2 bytes @ 0xD
  1251  00000E                     	ds	1
  1252  00000F                     ??_PWMC:
  1253                           
  1254                           ; 1 bytes @ 0xE
  1255  00000F                     	ds	1
  1256  000010                     ___ftmul@f2:
  1257                           	opt stack 0
  1258                           
  1259                           ; 3 bytes @ 0xF
  1260  000010                     	ds	1
  1261  000011                     ??i2_printf:
  1262  000011                     _PWMC$1394:
  1263                           	opt stack 0
  1264                           
  1265                           ; 1 bytes @ 0x10
  1266  000011                     	ds	1
  1267  000012                     _PWMC$1395:
  1268                           	opt stack 0
  1269                           
  1270                           ; 1 bytes @ 0x11
  1271  000012                     	ds	1
  1272  000013                     ??___ftmul:
  1273  000013                     _PWMC$1396:
  1274                           	opt stack 0
  1275                           
  1276                           ; 1 bytes @ 0x12
  1277  000013                     	ds	1
  1278  000014                     PWMC@countdown:
  1279                           	opt stack 0
  1280                           
  1281                           ; 2 bytes @ 0x13
  1282  000014                     	ds	1
  1283  000015                     i2printf@cp:
  1284                           	opt stack 0
  1285                           
  1286                           ; 2 bytes @ 0x14
  1287  000015                     	ds	1
  1288  000016                     ___ftmul@exp:
  1289                           	opt stack 0
  1290  000016                     CW90@port:
  1291                           	opt stack 0
  1292  000016                     CCW90@port:
  1293                           	opt stack 0
  1294  000016                     shake@port:
  1295                           	opt stack 0
  1296                           
  1297                           ; 2 bytes @ 0x15
  1298  000016                     	ds	1
  1299  000017                     i2printf@idx:
  1300                           	opt stack 0
  1301  000017                     ___ftmul@f3_as_product:
  1302                           	opt stack 0
  1303                           
  1304                           ; 3 bytes @ 0x16
  1305  000017                     	ds	1
  1306  000018                     ??_CCW90:
  1307  000018                     ??_CW90:
  1308  000018                     ??_shake:
  1309  000018                     i2printf@ap:
  1310                           	opt stack 0
  1311                           
  1312                           ; 2 bytes @ 0x17
  1313  000018                     	ds	2
  1314  00001A                     ___ftmul@cntr:
  1315                           	opt stack 0
  1316  00001A                     i2printf@len:
  1317                           	opt stack 0
  1318                           
  1319                           ; 2 bytes @ 0x19
  1320  00001A                     	ds	1
  1321  00001B                     ___ftmul@sign:
  1322                           	opt stack 0
  1323                           
  1324                           ; 1 bytes @ 0x1A
  1325  00001B                     	ds	1
  1326  00001C                     i2printf@prec:
  1327                           	opt stack 0
  1328  00001C                     ___ftge@ff1:
  1329                           	opt stack 0
  1330                           
  1331                           ; 3 bytes @ 0x1B
  1332  00001C                     	ds	1
  1333  00001D                     i2printf@val:
  1334                           	opt stack 0
  1335                           
  1336                           ; 2 bytes @ 0x1C
  1337  00001D                     	ds	2
  1338  00001F                     i2printf@flag:
  1339                           	opt stack 0
  1340  00001F                     ___ftge@ff2:
  1341                           	opt stack 0
  1342                           
  1343                           ; 3 bytes @ 0x1E
  1344  00001F                     	ds	1
  1345  000020                     i2printf@width:
  1346                           	opt stack 0
  1347                           
  1348                           ; 2 bytes @ 0x1F
  1349  000020                     	ds	2
  1350  000022                     ??___ftge:
  1351  000022                     i2printf@c:
  1352                           	opt stack 0
  1353                           
  1354                           ; 1 bytes @ 0x21
  1355  000022                     	ds	1
  1356  000023                     showInfo@time:
  1357                           	opt stack 0
  1358  000023                     _stopMoving$557:
  1359                           	opt stack 0
  1360  000023                     printV@charged:
  1361                           	opt stack 0
  1362                           
  1363                           ; 2 bytes @ 0x22
  1364  000023                     	ds	2
  1365  000025                     ?_checkV:
  1366                           	opt stack 0
  1367  000025                     stopMoving@em:
  1368                           	opt stack 0
  1369  000025                     showInfo@sorted:
  1370                           	opt stack 0
  1371  000025                     checkV@threshhold:
  1372                           	opt stack 0
  1373                           
  1374                           ; 2 bytes @ 0x24
  1375  000025                     	ds	2
  1376  000027                     ??_showInfo:
  1377  000027                     checkV@channel:
  1378                           	opt stack 0
  1379                           
  1380                           ; 1 bytes @ 0x26
  1381  000027                     	ds	1
  1382  000028                     checkV@voltage:
  1383                           	opt stack 0
  1384                           
  1385                           ; 2 bytes @ 0x27
  1386  000028                     	ds	2
  1387  00002A                     ?_check9:
  1388                           	opt stack 0
  1389  00002A                     ?_checkC:
  1390                           	opt stack 0
  1391  00002A                     ?_checkAA:
  1392                           	opt stack 0
  1393  00002A                     checkAA@sorted:
  1394                           	opt stack 0
  1395  00002A                     checkC@sorted:
  1396                           	opt stack 0
  1397  00002A                     check9@sorted:
  1398                           	opt stack 0
  1399                           
  1400                           ; 2 bytes @ 0x29
  1401  00002A                     	ds	2
  1402  00002C                     ??_check9:
  1403  00002C                     ??_checkC:
  1404  00002C                     ??_checkAA:
  1405  00002C                     showInfo@type:
  1406                           	opt stack 0
  1407                           
  1408                           ; 2 bytes @ 0x2B
  1409  00002C                     	ds	2
  1410  00002E                     showInfo@stop:
  1411                           	opt stack 0
  1412  00002E                     checkAA@V:
  1413                           	opt stack 0
  1414  00002E                     checkC@V:
  1415                           	opt stack 0
  1416  00002E                     check9@V:
  1417                           	opt stack 0
  1418                           
  1419                           ; 2 bytes @ 0x2D
  1420  00002E                     	ds	2
  1421  000030                     ??_PermLog:
  1422  000030                     ??_simulate:
  1423                           
  1424                           ; 1 bytes @ 0x2F
  1425  000030                     	ds	2
  1426  000032                     simulate@portShake:
  1427                           	opt stack 0
  1428  000032                     _simulate$1492:
  1429                           	opt stack 0
  1430  000032                     PermLog@sorted:
  1431                           	opt stack 0
  1432                           
  1433                           ; 4 bytes @ 0x31
  1434  000032                     	ds	2
  1435  000034                     simulate@DCmoving:
  1436                           	opt stack 0
  1437                           
  1438                           ; 1 bytes @ 0x33
  1439  000034                     	ds	1
  1440  000035                     simulate@now:
  1441                           	opt stack 0
  1442                           
  1443                           ; 4 bytes @ 0x34
  1444  000035                     	ds	1
  1445  000036                     PermLog@goback:
  1446                           	opt stack 0
  1447                           
  1448                           ; 1 bytes @ 0x35
  1449  000036                     	ds	1
  1450  000037                     PermLog@time:
  1451                           	opt stack 0
  1452                           
  1453                           ; 2 bytes @ 0x36
  1454  000037                     	ds	2
  1455  000039                     PermLog@backruns:
  1456                           	opt stack 0
  1457  000039                     simulate@start:
  1458                           	opt stack 0
  1459                           
  1460                           ; 4 bytes @ 0x38
  1461  000039                     	ds	4
  1462  00003D                     simulate@AA:
  1463                           	opt stack 0
  1464                           
  1465                           ; 2 bytes @ 0x3C
  1466  00003D                     	ds	2
  1467  00003F                     simulate@C:
  1468                           	opt stack 0
  1469                           
  1470                           ; 2 bytes @ 0x3E
  1471  00003F                     	ds	2
  1472  000041                     simulate@V9:
  1473                           	opt stack 0
  1474                           
  1475                           ; 2 bytes @ 0x40
  1476  000041                     	ds	2
  1477  000043                     simulate@countDC:
  1478                           	opt stack 0
  1479                           
  1480                           ; 1 bytes @ 0x42
  1481  000043                     	ds	1
  1482  000044                     simulate@portCW:
  1483                           	opt stack 0
  1484                           
  1485                           ; 6 bytes @ 0x43
  1486  000044                     	ds	6
  1487  00004A                     simulate@portCCW:
  1488                           	opt stack 0
  1489                           
  1490                           ; 6 bytes @ 0x49
  1491  00004A                     	ds	6
  1492  000050                     simulate@period:
  1493                           	opt stack 0
  1494                           
  1495                           ; 2 bytes @ 0x4F
  1496  000050                     	ds	2
  1497  000052                     simulate@sorted:
  1498                           	opt stack 0
  1499                           
  1500                           ; 4 bytes @ 0x51
  1501  000052                     	ds	4
  1502  000056                     ??_intrpt:
  1503                           
  1504                           ; 1 bytes @ 0x55
  1505  000056                     	ds	16
  1506  000066                     intrpt@port:
  1507                           	opt stack 0
  1508                           
  1509                           ; 6 bytes @ 0x65
  1510  000066                     	ds	6
  1511  00006C                     intrpt@keypress:
  1512                           	opt stack 0
  1513                           
  1514                           ; 1 bytes @ 0x6B
  1515  00006C                     	ds	1
  1516                           tblptru	equ	0xFF8
  1517                           postinc0	equ	0xFEE
  1518                           wreg	equ	0xFE8
  1519                           
  1520 ;;
  1521 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1522 ;;
  1523 ;; *************** function _main *****************
  1524 ;; Defined at:
  1525 ;;		line 276 in file "main.c"
  1526 ;; Parameters:    Size  Location     Type
  1527 ;;		None
  1528 ;; Auto vars:     Size  Location     Type
  1529 ;;		None
  1530 ;; Return value:  Size  Location     Type
  1531 ;;                  2  171[None  ] int 
  1532 ;; Registers used:
  1533 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1534 ;; Tracked objects:
  1535 ;;		On entry : 0/0
  1536 ;;		On exit  : 0/0
  1537 ;;		Unchanged: 0/0
  1538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1541 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1542 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1543 ;;Total ram usage:        2 bytes
  1544 ;; Hardware stack levels required when called:   11
  1545 ;; This function calls:
  1546 ;;		_initialize
  1547 ;;		_lcdInst
  1548 ;;		_printf
  1549 ;;		_showRTC
  1550 ;; This function is called by:
  1551 ;;		Startup code after reset
  1552 ;; This function uses a non-reentrant model
  1553 ;;
  1554                           
  1555                           	psect	text0
  1556  001F8E                     __ptext0:
  1557                           	opt stack 0
  1558  001F8E                     _main:
  1559                           	opt stack 20
  1560                           
  1561                           ;main.c: 277: initialize();
  1562                           
  1563                           ; BSR set to: 0
  1564                           ;incstack = 0
  1565  001F8E  EC46  F00F         	call	_initialize	;wreg free
  1566                           
  1567                           ;main.c: 279: lcdInst(0b10000000);
  1568  001F92  0E80               	movlw	128
  1569  001F94  ECB9  F011         	call	_lcdInst
  1570                           
  1571                           ;main.c: 280: printf("Welcome!          ");
  1572  001F98  0E5C               	movlw	low STR_19
  1573  001F9A  0100               	movlb	0	; () banked
  1574  001F9C  6F8C               	movwf	printf@f& (0+255),b
  1575  001F9E  0EFF               	movlw	high STR_19
  1576  001FA0  0100               	movlb	0	; () banked
  1577  001FA2  6F8D               	movwf	(printf@f+1)& (0+255),b
  1578  001FA4  EC09  F000         	call	_printf	;wreg free
  1579                           
  1580                           ;main.c: 282: _delay((unsigned long)((500)*(8000000/4000.0)));
  1581  001FA8  0E06               	movlw	6
  1582  001FAA  0100               	movlb	0	; () banked
  1583  001FAC  6FA9               	movwf	(??_main+1)& (0+255),b
  1584  001FAE  0E13               	movlw	19
  1585  001FB0  0100               	movlb	0	; () banked
  1586  001FB2  6FA8               	movwf	??_main& (0+255),b
  1587  001FB4  0EAD               	movlw	173
  1588  001FB6                     u3437:
  1589  001FB6  2EE8               	decfsz	wreg,f,c
  1590  001FB8  D7FE               	bra	u3437
  1591  001FBA  2FA8               	decfsz	??_main& (0+255),f,b
  1592  001FBC  D7FC               	bra	u3437
  1593  001FBE  2FA9               	decfsz	(??_main+1)& (0+255),f,b
  1594  001FC0  D7FA               	bra	u3437
  1595  001FC2  D000               	nop2	
  1596                           
  1597                           ;main.c: 285: INT1IE = 1;
  1598  001FC4  86F0               	bsf	intcon3,3,c	;volatile
  1599                           
  1600                           ;main.c: 286: INT1IF = 0;
  1601  001FC6  90F0               	bcf	intcon3,0,c	;volatile
  1602                           
  1603                           ;main.c: 287: INT2IE = 0;
  1604  001FC8  98F0               	bcf	intcon3,4,c	;volatile
  1605                           
  1606                           ;main.c: 288: (INTCONbits.GIE = 1);
  1607  001FCA  8EF2               	bsf	intcon,7,c	;volatile
  1608                           
  1609                           ;main.c: 289: mode = 0;
  1610  001FCC  0E00               	movlw	0
  1611  001FCE  6E76               	movwf	_mode+1,c
  1612  001FD0  0E00               	movlw	0
  1613  001FD2  6E75               	movwf	_mode,c
  1614  001FD4                     l4248:
  1615  001FD4  EC51  F00C         	call	_showRTC	;wreg free
  1616  001FD8  D7FD               	goto	l4248
  1617  001FDA  00FF               	reset		;# 
  1618  001FDC                     __end_of_main:
  1619                           	opt stack 0
  1620                           tblptru	equ	0xFF8
  1621                           intcon	equ	0xFF2
  1622                           intcon3	equ	0xFF0
  1623                           postinc0	equ	0xFEE
  1624                           wreg	equ	0xFE8
  1625                           
  1626 ;; *************** function _showRTC *****************
  1627 ;; Defined at:
  1628 ;;		line 182 in file "main.c"
  1629 ;; Parameters:    Size  Location     Type
  1630 ;;		None
  1631 ;; Auto vars:     Size  Location     Type
  1632 ;;		None
  1633 ;; Return value:  Size  Location     Type
  1634 ;;                  1    wreg      void 
  1635 ;; Registers used:
  1636 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1637 ;; Tracked objects:
  1638 ;;		On entry : 0/0
  1639 ;;		On exit  : 0/0
  1640 ;;		Unchanged: 0/0
  1641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1644 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1645 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1646 ;;Total ram usage:        2 bytes
  1647 ;; Hardware stack levels used:    1
  1648 ;; Hardware stack levels required when called:   10
  1649 ;; This function calls:
  1650 ;;		_getTime
  1651 ;;		_lcdInst
  1652 ;;		_printf
  1653 ;; This function is called by:
  1654 ;;		_main
  1655 ;; This function uses a non-reentrant model
  1656 ;;
  1657                           
  1658                           	psect	text1
  1659  0018A2                     __ptext1:
  1660                           	opt stack 0
  1661  0018A2                     _showRTC:
  1662                           	opt stack 20
  1663                           
  1664                           ;main.c: 183: getTime(time);
  1665                           
  1666                           ;incstack = 0
  1667  0018A2  0E77               	movlw	low _time
  1668  0018A4  0100               	movlb	0	; () banked
  1669  0018A6  6F83               	movwf	getTime@time& (0+255),b
  1670  0018A8  0E00               	movlw	high _time
  1671  0018AA  0100               	movlb	0	; () banked
  1672  0018AC  6F84               	movwf	(getTime@time+1)& (0+255),b
  1673  0018AE  EC96  F00C         	call	_getTime	;wreg free
  1674                           
  1675                           ;main.c: 184: lcdInst(0b10000000);
  1676  0018B2  0E80               	movlw	128
  1677  0018B4  ECB9  F011         	call	_lcdInst
  1678                           
  1679                           ;main.c: 185: printf("    %02x/%02x/%02x      ", time[6], time[5], time[4]);
  1680  0018B8  0E21               	movlw	low STR_17
  1681  0018BA  0100               	movlb	0	; () banked
  1682  0018BC  6F8C               	movwf	printf@f& (0+255),b
  1683  0018BE  0EFE               	movlw	high STR_17
  1684  0018C0  0100               	movlb	0	; () banked
  1685  0018C2  6F8D               	movwf	(printf@f+1)& (0+255),b
  1686  0018C4  C07D  F08E         	movff	_time+6,?_printf+2
  1687  0018C8  0100               	movlb	0	; () banked
  1688  0018CA  6B8F               	clrf	(?_printf+3)& (0+255),b
  1689  0018CC  C07C  F090         	movff	_time+5,?_printf+4
  1690  0018D0  0100               	movlb	0	; () banked
  1691  0018D2  6B91               	clrf	(?_printf+5)& (0+255),b
  1692  0018D4  C07B  F092         	movff	_time+4,?_printf+6
  1693  0018D8  0100               	movlb	0	; () banked
  1694  0018DA  6B93               	clrf	(?_printf+7)& (0+255),b
  1695  0018DC  EC09  F000         	call	_printf	;wreg free
  1696                           
  1697                           ;main.c: 186: lcdInst(0b11000000);
  1698  0018E0  0EC0               	movlw	192
  1699  0018E2  ECB9  F011         	call	_lcdInst
  1700                           
  1701                           ;main.c: 187: printf("    %02x:%02x:%02x      ", time[2], time[1], time[0]);
  1702  0018E6  0E3A               	movlw	low STR_18
  1703  0018E8  0100               	movlb	0	; () banked
  1704  0018EA  6F8C               	movwf	printf@f& (0+255),b
  1705  0018EC  0EFE               	movlw	high STR_18
  1706  0018EE  0100               	movlb	0	; () banked
  1707  0018F0  6F8D               	movwf	(printf@f+1)& (0+255),b
  1708  0018F2  C079  F08E         	movff	_time+2,?_printf+2
  1709  0018F6  0100               	movlb	0	; () banked
  1710  0018F8  6B8F               	clrf	(?_printf+3)& (0+255),b
  1711  0018FA  C078  F090         	movff	_time+1,?_printf+4
  1712  0018FE  0100               	movlb	0	; () banked
  1713  001900  6B91               	clrf	(?_printf+5)& (0+255),b
  1714  001902  C077  F092         	movff	_time,?_printf+6
  1715  001906  0100               	movlb	0	; () banked
  1716  001908  6B93               	clrf	(?_printf+7)& (0+255),b
  1717  00190A  EC09  F000         	call	_printf	;wreg free
  1718                           
  1719                           ;main.c: 188: _delay((unsigned long)((250)*(8000000/4000.0)));
  1720  00190E  0E03               	movlw	3
  1721  001910  0100               	movlb	0	; () banked
  1722  001912  6FA7               	movwf	(??_showRTC+1)& (0+255),b
  1723  001914  0E8A               	movlw	138
  1724  001916  0100               	movlb	0	; () banked
  1725  001918  6FA6               	movwf	??_showRTC& (0+255),b
  1726  00191A  0E55               	movlw	85
  1727  00191C                     u3447:
  1728  00191C  2EE8               	decfsz	wreg,f,c
  1729  00191E  D7FE               	bra	u3447
  1730  001920  2FA6               	decfsz	??_showRTC& (0+255),f,b
  1731  001922  D7FC               	bra	u3447
  1732  001924  2FA7               	decfsz	(??_showRTC+1)& (0+255),f,b
  1733  001926  D7FA               	bra	u3447
  1734  001928  D000               	nop2	
  1735  00192A  0012               	return		;funcret
  1736  00192C                     __end_of_showRTC:
  1737                           	opt stack 0
  1738                           tblptru	equ	0xFF8
  1739                           intcon	equ	0xFF2
  1740                           intcon3	equ	0xFF0
  1741                           postinc0	equ	0xFEE
  1742                           wreg	equ	0xFE8
  1743                           
  1744 ;; *************** function _printf *****************
  1745 ;; Defined at:
  1746 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  1747 ;; Parameters:    Size  Location     Type
  1748 ;;  f               2   12[BANK0 ] PTR const unsigned char 
  1749 ;;		 -> STR_44(17), STR_43(17), STR_42(18), STR_41(22), 
  1750 ;;		 -> STR_40(4), STR_39(3), STR_38(4), STR_37(5), 
  1751 ;;		 -> STR_36(4), STR_35(18), STR_34(20), STR_33(16), 
  1752 ;;		 -> STR_32(21), STR_31(16), STR_30(21), STR_29(16), 
  1753 ;;		 -> STR_28(20), STR_27(16), STR_26(21), STR_25(23), 
  1754 ;;		 -> STR_24(24), STR_23(21), STR_22(24), STR_21(24), 
  1755 ;;		 -> STR_20(25), STR_19(19), STR_18(25), STR_17(25), 
  1756 ;;		 -> STR_16(27), STR_15(3), STR_14(3), STR_13(3), 
  1757 ;;		 -> STR_12(5), STR_11(3), STR_10(3), STR_9(3), 
  1758 ;;		 -> STR_8(4), STR_7(3), STR_6(3), STR_5(3), 
  1759 ;;		 -> STR_4(4), STR_3(5), STR_2(24), STR_1(9), 
  1760 ;; Auto vars:     Size  Location     Type
  1761 ;;  idx             1   26[BANK0 ] unsigned char 
  1762 ;;  tmpval          4    0        struct .
  1763 ;;  width           2   35[BANK0 ] int 
  1764 ;;  val             2   32[BANK0 ] unsigned int 
  1765 ;;  len             2   29[BANK0 ] unsigned int 
  1766 ;;  ap              2   27[BANK0 ] PTR void [1]
  1767 ;;		 -> ?i2_printf(2), ?_printf(2), 
  1768 ;;  cp              2   24[BANK0 ] PTR const unsigned char 
  1769 ;;		 -> printf@c(1), 
  1770 ;;  c               1   37[BANK0 ] char 
  1771 ;;  flag            1   34[BANK0 ] unsigned char 
  1772 ;;  prec            1   31[BANK0 ] char 
  1773 ;; Return value:  Size  Location     Type
  1774 ;;                  2   12[BANK0 ] int 
  1775 ;; Registers used:
  1776 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1777 ;; Tracked objects:
  1778 ;;		On entry : 0/0
  1779 ;;		On exit  : 0/0
  1780 ;;		Unchanged: 0/0
  1781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1782 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1783 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1784 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1785 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1786 ;;Total ram usage:       26 bytes
  1787 ;; Hardware stack levels used:    1
  1788 ;; Hardware stack levels required when called:    9
  1789 ;; This function calls:
  1790 ;;		___lwdiv
  1791 ;;		___lwmod
  1792 ;;		___wmul
  1793 ;;		_isdigit
  1794 ;;		_putch
  1795 ;; This function is called by:
  1796 ;;		_showRTC
  1797 ;;		_main
  1798 ;;		_mainloop
  1799 ;; This function uses a non-reentrant model
  1800 ;;
  1801                           
  1802                           	psect	text2
  1803  000012                     __ptext2:
  1804                           	opt stack 0
  1805  000012                     _printf:
  1806                           	opt stack 20
  1807                           
  1808                           ;doprnt.c: 466: va_list ap;
  1809                           ;doprnt.c: 499: signed char c;
  1810                           ;doprnt.c: 501: int width;
  1811                           ;doprnt.c: 506: signed char prec;
  1812                           ;doprnt.c: 508: unsigned char flag;
  1813                           ;doprnt.c: 523: union {
  1814                           ;doprnt.c: 524: unsigned long vd;
  1815                           ;doprnt.c: 525: double integ;
  1816                           ;doprnt.c: 526: } tmpval;
  1817                           ;doprnt.c: 528: unsigned int val;
  1818                           ;doprnt.c: 529: unsigned len;
  1819                           ;doprnt.c: 530: const char * cp;
  1820                           ;doprnt.c: 533: *ap = __va_start();
  1821                           
  1822                           ;incstack = 0
  1823  000012  0E8E               	movlw	low (?_printf+2)
  1824  000014  0100               	movlb	0	; () banked
  1825  000016  6F9B               	movwf	printf@ap& (0+255),b
  1826  000018  0E00               	movlw	high (?_printf+2)
  1827  00001A  0100               	movlb	0	; () banked
  1828  00001C  6F9C               	movwf	(printf@ap+1)& (0+255),b
  1829                           
  1830                           ;doprnt.c: 536: while(c = *f++) {
  1831  00001E  D21F               	goto	l3672
  1832  000020                     l3522:
  1833                           
  1834                           ; BSR set to: 0
  1835                           ;doprnt.c: 538: if(c != '%')
  1836  000020  0E25               	movlw	37
  1837  000022  0100               	movlb	0	; () banked
  1838  000024  19A5               	xorwf	printf@c& (0+255),w,b
  1839  000026  B4D8               	btfsc	status,2,c
  1840  000028  D005               	goto	l3526
  1841                           
  1842                           ; BSR set to: 0
  1843                           ;doprnt.c: 540: {
  1844                           ;doprnt.c: 541: (putch(c) );
  1845  00002A  0100               	movlb	0	; () banked
  1846  00002C  51A5               	movf	printf@c& (0+255),w,b
  1847  00002E  ECB1  F011         	call	_putch
  1848                           
  1849                           ;doprnt.c: 542: continue;
  1850  000032  D215               	goto	l3672
  1851  000034                     l3526:
  1852                           
  1853                           ;doprnt.c: 543: }
  1854                           ;doprnt.c: 546: width = 0;
  1855  000034  0E00               	movlw	0
  1856  000036  0100               	movlb	0	; () banked
  1857  000038  6FA4               	movwf	(printf@width+1)& (0+255),b
  1858  00003A  0E00               	movlw	0
  1859  00003C  6FA3               	movwf	printf@width& (0+255),b
  1860                           
  1861                           ;doprnt.c: 548: flag = 0;
  1862  00003E  0E00               	movlw	0
  1863  000040  0100               	movlb	0	; () banked
  1864  000042  6FA2               	movwf	printf@flag& (0+255),b
  1865                           
  1866                           ; BSR set to: 0
  1867                           ;doprnt.c: 551: switch(*f) {
  1868                           
  1869                           ;doprnt.c: 550: for(;;) {
  1870  000044  D005               	goto	l3532
  1871  000046                     l3528:
  1872                           
  1873                           ;doprnt.c: 580: flag |= 0x04;
  1874  000046  0100               	movlb	0	; () banked
  1875  000048  85A2               	bsf	printf@flag& (0+255),2,b
  1876                           
  1877                           ;doprnt.c: 581: f++;
  1878  00004A  0100               	movlb	0	; () banked
  1879  00004C  4B8C               	infsnz	printf@f& (0+255),f,b
  1880  00004E  2B8D               	incf	(printf@f+1)& (0+255),f,b
  1881  000050                     l3532:
  1882  000050  C08C  FFF6         	movff	printf@f,tblptrl
  1883  000054  C08D  FFF7         	movff	printf@f+1,tblptrh
  1884  000058                     	if	0	;tblptru may be non-zero
  1885  000058                     	endif
  1886  000058                     	if	0	;tblptru may be non-zero
  1887  000058                     	endif
  1888  000058  0008               	tblrd		*
  1889  00005A  50F5               	movf	tablat,w,c
  1890                           
  1891                           ; Switch size 1, requested type "space"
  1892                           ; Number of cases is 1, Range of values is 48 to 48
  1893                           ; switch strategies available:
  1894                           ; Name         Instructions Cycles
  1895                           ; simple_byte            4     3 (average)
  1896                           ;	Chosen strategy is simple_byte
  1897  00005C  0A30               	xorlw	48	; case 48
  1898  00005E  B4D8               	btfsc	status,2,c
  1899  000060  D7F2               	goto	l3528
  1900                           
  1901                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1902                           
  1903                           ;doprnt.c: 586: }
  1904                           
  1905                           ;doprnt.c: 585: break;
  1906  000062  C08C  FFF6         	movff	printf@f,tblptrl
  1907  000066  C08D  FFF7         	movff	printf@f+1,tblptrh
  1908  00006A                     	if	0	;tblptru may be non-zero
  1909  00006A                     	endif
  1910  00006A                     	if	0	;tblptru may be non-zero
  1911  00006A                     	endif
  1912  00006A  0008               	tblrd		*
  1913  00006C  50F5               	movf	tablat,w,c
  1914  00006E  ECC0  F010         	call	_isdigit
  1915  000072  A0D8               	btfss	status,0,c
  1916  000074  D092               	goto	l3572
  1917                           
  1918                           ;doprnt.c: 598: width = 0;
  1919  000076  0E00               	movlw	0
  1920  000078  0100               	movlb	0	; () banked
  1921  00007A  6FA4               	movwf	(printf@width+1)& (0+255),b
  1922  00007C  0E00               	movlw	0
  1923  00007E  6FA3               	movwf	printf@width& (0+255),b
  1924  000080                     l3538:
  1925                           
  1926                           ;doprnt.c: 600: width *= 10;
  1927  000080  C0A3  F080         	movff	printf@width,___wmul@multiplier
  1928  000084  C0A4  F081         	movff	printf@width+1,___wmul@multiplier+1
  1929  000088  0E00               	movlw	0
  1930  00008A  0100               	movlb	0	; () banked
  1931  00008C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1932  00008E  0E0A               	movlw	10
  1933  000090  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1934  000092  EC8E  F010         	call	___wmul	;wreg free
  1935  000096  C080  F0A3         	movff	?___wmul,printf@width
  1936  00009A  C081  F0A4         	movff	?___wmul+1,printf@width+1
  1937                           
  1938                           ;doprnt.c: 601: width += *f++ - '0';
  1939  00009E  0ED0               	movlw	208
  1940  0000A0  0100               	movlb	0	; () banked
  1941  0000A2  6F94               	movwf	??_printf& (0+255),b
  1942  0000A4  0EFF               	movlw	255
  1943  0000A6  0100               	movlb	0	; () banked
  1944  0000A8  6F95               	movwf	(??_printf+1)& (0+255),b
  1945  0000AA  C08C  FFF6         	movff	printf@f,tblptrl
  1946  0000AE  C08D  FFF7         	movff	printf@f+1,tblptrh
  1947  0000B2                     	if	0	;tblptru may be non-zero
  1948  0000B2                     	endif
  1949  0000B2                     	if	0	;tblptru may be non-zero
  1950  0000B2                     	endif
  1951  0000B2  0008               	tblrd		*
  1952  0000B4  50F5               	movf	tablat,w,c
  1953  0000B6  0100               	movlb	0	; () banked
  1954  0000B8  6F96               	movwf	(??_printf+2)& (0+255),b
  1955  0000BA  6B97               	clrf	(??_printf+3)& (0+255),b
  1956  0000BC  0100               	movlb	0	; () banked
  1957  0000BE  5194               	movf	??_printf& (0+255),w,b
  1958  0000C0  0100               	movlb	0	; () banked
  1959  0000C2  2796               	addwf	(??_printf+2)& (0+255),f,b
  1960  0000C4  0100               	movlb	0	; () banked
  1961  0000C6  5195               	movf	(??_printf+1)& (0+255),w,b
  1962  0000C8  0100               	movlb	0	; () banked
  1963  0000CA  2397               	addwfc	(??_printf+3)& (0+255),f,b
  1964  0000CC  0100               	movlb	0	; () banked
  1965  0000CE  5196               	movf	(??_printf+2)& (0+255),w,b
  1966  0000D0  0100               	movlb	0	; () banked
  1967  0000D2  27A3               	addwf	printf@width& (0+255),f,b
  1968  0000D4  0100               	movlb	0	; () banked
  1969  0000D6  5197               	movf	(??_printf+3)& (0+255),w,b
  1970  0000D8  0100               	movlb	0	; () banked
  1971  0000DA  23A4               	addwfc	(printf@width+1)& (0+255),f,b
  1972                           
  1973                           ; BSR set to: 0
  1974  0000DC  0100               	movlb	0	; () banked
  1975  0000DE  4B8C               	infsnz	printf@f& (0+255),f,b
  1976  0000E0  2B8D               	incf	(printf@f+1)& (0+255),f,b
  1977                           
  1978                           ; BSR set to: 0
  1979                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1980  0000E2  C08C  FFF6         	movff	printf@f,tblptrl
  1981  0000E6  C08D  FFF7         	movff	printf@f+1,tblptrh
  1982  0000EA                     	if	0	;tblptru may be non-zero
  1983  0000EA                     	endif
  1984  0000EA                     	if	0	;tblptru may be non-zero
  1985  0000EA                     	endif
  1986  0000EA  0008               	tblrd		*
  1987  0000EC  50F5               	movf	tablat,w,c
  1988  0000EE  ECC0  F010         	call	_isdigit
  1989  0000F2  A0D8               	btfss	status,0,c
  1990  0000F4  D052               	goto	l3572
  1991  0000F6  D7C4               	goto	l3538
  1992  0000F8                     l3546:
  1993                           
  1994                           ;doprnt.c: 721: flag |= 0x80;
  1995  0000F8  0100               	movlb	0	; () banked
  1996  0000FA  8FA2               	bsf	printf@flag& (0+255),7,b
  1997                           
  1998                           ;doprnt.c: 723: break;
  1999  0000FC  D06A               	goto	l3574
  2000  0000FE                     l3548:
  2001                           
  2002                           ; BSR set to: 0
  2003                           ;doprnt.c: 757: if(width > len)
  2004  0000FE  0100               	movlb	0	; () banked
  2005  000100  51A3               	movf	printf@width& (0+255),w,b
  2006  000102  0100               	movlb	0	; () banked
  2007  000104  5D9D               	subwf	printf@len& (0+255),w,b
  2008  000106  0100               	movlb	0	; () banked
  2009  000108  51A4               	movf	(printf@width+1)& (0+255),w,b
  2010  00010A  0100               	movlb	0	; () banked
  2011  00010C  599E               	subwfb	(printf@len+1)& (0+255),w,b
  2012  00010E  B0D8               	btfsc	status,0,c
  2013  000110  D009               	goto	l3552
  2014                           
  2015                           ; BSR set to: 0
  2016                           ;doprnt.c: 758: width -= len;
  2017  000112  0100               	movlb	0	; () banked
  2018  000114  519D               	movf	printf@len& (0+255),w,b
  2019  000116  0100               	movlb	0	; () banked
  2020  000118  5FA3               	subwf	printf@width& (0+255),f,b
  2021  00011A  0100               	movlb	0	; () banked
  2022  00011C  519E               	movf	(printf@len+1)& (0+255),w,b
  2023  00011E  0100               	movlb	0	; () banked
  2024  000120  5BA4               	subwfb	(printf@width+1)& (0+255),f,b
  2025  000122  D009               	goto	l3556
  2026  000124                     l3552:
  2027                           
  2028                           ; BSR set to: 0
  2029                           ;doprnt.c: 759: else
  2030                           ;doprnt.c: 760: width = 0;
  2031  000124  0E00               	movlw	0
  2032  000126  0100               	movlb	0	; () banked
  2033  000128  6FA4               	movwf	(printf@width+1)& (0+255),b
  2034  00012A  0E00               	movlw	0
  2035  00012C  6FA3               	movwf	printf@width& (0+255),b
  2036                           
  2037                           ; BSR set to: 0
  2038                           ;doprnt.c: 764: while(width--)
  2039  00012E  D003               	goto	l3556
  2040  000130                     l3554:
  2041                           
  2042                           ; BSR set to: 0
  2043                           ;doprnt.c: 765: (putch(' ') );
  2044  000130  0E20               	movlw	32
  2045  000132  ECB1  F011         	call	_putch
  2046  000136                     l3556:
  2047  000136  0100               	movlb	0	; () banked
  2048  000138  07A3               	decf	printf@width& (0+255),f,b
  2049  00013A  A0D8               	btfss	status,0,c
  2050  00013C  07A4               	decf	(printf@width+1)& (0+255),f,b
  2051  00013E  0100               	movlb	0	; () banked
  2052  000140  29A3               	incf	printf@width& (0+255),w,b
  2053  000142  E1F6               	bnz	l3554
  2054  000144  0100               	movlb	0	; () banked
  2055  000146  29A4               	incf	(printf@width+1)& (0+255),w,b
  2056  000148  B4D8               	btfsc	status,2,c
  2057  00014A  D00B               	goto	l3562
  2058  00014C  D7F1               	goto	l3554
  2059  00014E                     l3558:
  2060                           
  2061                           ; BSR set to: 0
  2062                           ;doprnt.c: 768: (putch(*cp++) );
  2063  00014E  C098  FFD9         	movff	printf@cp,fsr2l
  2064  000152  C099  FFDA         	movff	printf@cp+1,fsr2h
  2065  000156  50DF               	movf	indf2,w,c
  2066  000158  ECB1  F011         	call	_putch
  2067  00015C  0100               	movlb	0	; () banked
  2068  00015E  4B98               	infsnz	printf@cp& (0+255),f,b
  2069  000160  2B99               	incf	(printf@cp+1)& (0+255),f,b
  2070  000162                     l3562:
  2071                           
  2072                           ; BSR set to: 0
  2073  000162  0100               	movlb	0	; () banked
  2074  000164  079D               	decf	printf@len& (0+255),f,b
  2075  000166  A0D8               	btfss	status,0,c
  2076  000168  079E               	decf	(printf@len+1)& (0+255),f,b
  2077  00016A  0100               	movlb	0	; () banked
  2078  00016C  299D               	incf	printf@len& (0+255),w,b
  2079  00016E  E1EF               	bnz	l3558
  2080  000170  0100               	movlb	0	; () banked
  2081  000172  299E               	incf	(printf@len+1)& (0+255),w,b
  2082  000174  B4D8               	btfsc	status,2,c
  2083  000176  D173               	goto	l3672
  2084  000178  D7EA               	goto	l3558
  2085  00017A                     l3564:
  2086                           
  2087                           ; BSR set to: 0
  2088                           ;doprnt.c: 805: cp = (char *)&c;
  2089  00017A  0EA5               	movlw	low printf@c
  2090  00017C  0100               	movlb	0	; () banked
  2091  00017E  6F98               	movwf	printf@cp& (0+255),b
  2092  000180  0E00               	movlw	high printf@c
  2093  000182  0100               	movlb	0	; () banked
  2094  000184  6F99               	movwf	(printf@cp+1)& (0+255),b
  2095                           
  2096                           ; BSR set to: 0
  2097                           ;doprnt.c: 806: len = 1;
  2098  000186  0E00               	movlw	0
  2099  000188  0100               	movlb	0	; () banked
  2100  00018A  6F9E               	movwf	(printf@len+1)& (0+255),b
  2101  00018C  0E01               	movlw	1
  2102  00018E  6F9D               	movwf	printf@len& (0+255),b
  2103                           
  2104                           ;doprnt.c: 807: goto dostring;
  2105  000190  D7B6               	goto	l3548
  2106  000192                     l3568:
  2107                           
  2108                           ; BSR set to: 0
  2109                           ;doprnt.c: 818: flag |= 0xC0;
  2110  000192  0EC0               	movlw	192
  2111  000194  0100               	movlb	0	; () banked
  2112  000196  13A2               	iorwf	printf@flag& (0+255),f,b
  2113                           
  2114                           ; BSR set to: 0
  2115                           ;doprnt.c: 822: }
  2116                           
  2117                           ;doprnt.c: 819: break;
  2118  000198  D01C               	goto	l3574
  2119  00019A                     l3572:
  2120  00019A  C08C  FFF6         	movff	printf@f,tblptrl
  2121  00019E  C08D  FFF7         	movff	printf@f+1,tblptrh
  2122  0001A2  0100               	movlb	0	; () banked
  2123  0001A4  4B8C               	infsnz	printf@f& (0+255),f,b
  2124  0001A6  2B8D               	incf	(printf@f+1)& (0+255),f,b
  2125  0001A8                     	if	0	;tblptru may be non-zero
  2126  0001A8                     	endif
  2127  0001A8                     	if	0	;tblptru may be non-zero
  2128  0001A8                     	endif
  2129  0001A8  0008               	tblrd		*
  2130  0001AA  CFF5 F0A5          	movff	tablat,printf@c
  2131  0001AE  0100               	movlb	0	; () banked
  2132  0001B0  51A5               	movf	printf@c& (0+255),w,b
  2133                           
  2134                           ; Switch size 1, requested type "space"
  2135                           ; Number of cases is 5, Range of values is 0 to 120
  2136                           ; switch strategies available:
  2137                           ; Name         Instructions Cycles
  2138                           ; simple_byte           16     9 (average)
  2139                           ;	Chosen strategy is simple_byte
  2140  0001B2  0A00               	xorlw	0	; case 0
  2141  0001B4  B4D8               	btfsc	status,2,c
  2142  0001B6  0012               	return	
  2143  0001B8  0A64               	xorlw	100	; case 100
  2144  0001BA  B4D8               	btfsc	status,2,c
  2145  0001BC  D00A               	goto	l3574
  2146  0001BE  0A0D               	xorlw	13	; case 105
  2147  0001C0  B4D8               	btfsc	status,2,c
  2148  0001C2  D007               	goto	l3574
  2149  0001C4  0A1C               	xorlw	28	; case 117
  2150  0001C6  B4D8               	btfsc	status,2,c
  2151  0001C8  D7E4               	goto	l3568
  2152  0001CA  0A0D               	xorlw	13	; case 120
  2153  0001CC  B4D8               	btfsc	status,2,c
  2154  0001CE  D794               	goto	l3546
  2155  0001D0  D7D4               	goto	l3564
  2156  0001D2                     l3574:
  2157                           
  2158                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  2159  0001D2  C0A2  F094         	movff	printf@flag,??_printf
  2160  0001D6  0EC0               	movlw	192
  2161  0001D8  0100               	movlb	0	; () banked
  2162  0001DA  1794               	andwf	??_printf& (0+255),f,b
  2163  0001DC  A4D8               	btfss	status,2,c
  2164  0001DE  D019               	goto	l3586
  2165                           
  2166                           ; BSR set to: 0
  2167                           ;doprnt.c: 1253: {
  2168                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2169  0001E0  C09B  FFD9         	movff	printf@ap,fsr2l
  2170  0001E4  C09C  FFDA         	movff	printf@ap+1,fsr2h
  2171  0001E8  CFDE F0A0          	movff	postinc2,printf@val
  2172  0001EC  CFDD F0A1          	movff	postdec2,printf@val+1
  2173                           
  2174                           ; BSR set to: 0
  2175  0001F0  0E02               	movlw	2
  2176  0001F2  0100               	movlb	0	; () banked
  2177  0001F4  279B               	addwf	printf@ap& (0+255),f,b
  2178  0001F6  0E00               	movlw	0
  2179  0001F8  239C               	addwfc	(printf@ap+1)& (0+255),f,b
  2180                           
  2181                           ; BSR set to: 0
  2182                           ;doprnt.c: 1261: if((int)val < 0) {
  2183  0001FA  0100               	movlb	0	; () banked
  2184  0001FC  AFA1               	btfss	(printf@val+1)& (0+255),7,b
  2185  0001FE  D053               	goto	l3620
  2186                           
  2187                           ; BSR set to: 0
  2188                           ;doprnt.c: 1262: flag |= 0x03;
  2189  000200  0E03               	movlw	3
  2190  000202  0100               	movlb	0	; () banked
  2191  000204  13A2               	iorwf	printf@flag& (0+255),f,b
  2192                           
  2193                           ; BSR set to: 0
  2194                           ;doprnt.c: 1263: val = -val;
  2195  000206  0100               	movlb	0	; () banked
  2196  000208  6DA0               	negf	printf@val& (0+255),b
  2197  00020A  1FA1               	comf	(printf@val+1)& (0+255),f,b
  2198  00020C  B0D8               	btfsc	status,0,c
  2199  00020E  2BA1               	incf	(printf@val+1)& (0+255),f,b
  2200                           
  2201                           ; BSR set to: 0
  2202                           ;doprnt.c: 1264: }
  2203                           ;doprnt.c: 1266: }
  2204  000210  D04A               	goto	l3620
  2205  000212                     l3586:
  2206                           
  2207                           ; BSR set to: 0
  2208                           ;doprnt.c: 1268: else
  2209                           ;doprnt.c: 1273: {
  2210                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2211  000212  C09B  FFD9         	movff	printf@ap,fsr2l
  2212  000216  C09C  FFDA         	movff	printf@ap+1,fsr2h
  2213  00021A  CFDE F0A0          	movff	postinc2,printf@val
  2214  00021E  CFDD F0A1          	movff	postdec2,printf@val+1
  2215                           
  2216                           ; BSR set to: 0
  2217  000222  0E02               	movlw	2
  2218  000224  0100               	movlb	0	; () banked
  2219  000226  279B               	addwf	printf@ap& (0+255),f,b
  2220  000228  0E00               	movlw	0
  2221  00022A  239C               	addwfc	(printf@ap+1)& (0+255),f,b
  2222                           
  2223                           ; BSR set to: 0
  2224                           ;doprnt.c: 1287: }
  2225                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  2226  00022C  D03C               	goto	l3620
  2227  00022E                     l3590:
  2228                           
  2229                           ; BSR set to: 0
  2230                           ;doprnt.c: 1302: case 0xC0:
  2231                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2232  00022E  0E01               	movlw	1
  2233  000230  0100               	movlb	0	; () banked
  2234  000232  6FA5               	movwf	printf@c& (0+255),b
  2235  000234                     l3592:
  2236                           
  2237                           ; BSR set to: 0
  2238  000234  0E05               	movlw	5
  2239  000236  0100               	movlb	0	; () banked
  2240  000238  19A5               	xorwf	printf@c& (0+255),w,b
  2241  00023A  B4D8               	btfsc	status,2,c
  2242  00023C  D040               	goto	l3622
  2243                           
  2244                           ; BSR set to: 0
  2245                           ;doprnt.c: 1306: if(val < dpowers[c])
  2246                           
  2247                           ; BSR set to: 0
  2248                           
  2249                           ; BSR set to: 0
  2250  00023E  0100               	movlb	0	; () banked
  2251  000240  51A5               	movf	printf@c& (0+255),w,b
  2252  000242  0D02               	mullw	2
  2253  000244  0EDB               	movlw	low _dpowers
  2254  000246  24F3               	addwf	prodl,w,c
  2255  000248  6EF6               	movwf	tblptrl,c
  2256  00024A  0EFD               	movlw	high _dpowers
  2257  00024C  20F4               	addwfc	prodh,w,c
  2258  00024E  6EF7               	movwf	tblptrh,c
  2259  000250                     	if	0	;There are less than 3 active tblptr bytes
  2260  000250                     	endif
  2261  000250  0009               	tblrd		*+
  2262  000252  50F5               	movf	tablat,w,c
  2263  000254  0100               	movlb	0	; () banked
  2264  000256  5DA0               	subwf	printf@val& (0+255),w,b
  2265  000258  0009               	tblrd		*+
  2266  00025A  50F5               	movf	tablat,w,c
  2267  00025C  0100               	movlb	0	; () banked
  2268  00025E  59A1               	subwfb	(printf@val+1)& (0+255),w,b
  2269  000260  A0D8               	btfss	status,0,c
  2270  000262  D02D               	goto	l3622
  2271                           
  2272                           ; BSR set to: 0
  2273                           
  2274                           ; BSR set to: 0
  2275                           
  2276                           ; BSR set to: 0
  2277                           ;doprnt.c: 1307: break;
  2278  000264  0100               	movlb	0	; () banked
  2279  000266  2BA5               	incf	printf@c& (0+255),f,b
  2280  000268  D7E5               	goto	l3592
  2281  00026A                     l3604:
  2282                           
  2283                           ; BSR set to: 0
  2284                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2285  00026A  0E01               	movlw	1
  2286  00026C  0100               	movlb	0	; () banked
  2287  00026E  6FA5               	movwf	printf@c& (0+255),b
  2288  000270                     l3606:
  2289                           
  2290                           ; BSR set to: 0
  2291  000270  0E04               	movlw	4
  2292  000272  0100               	movlb	0	; () banked
  2293  000274  19A5               	xorwf	printf@c& (0+255),w,b
  2294  000276  B4D8               	btfsc	status,2,c
  2295  000278  D022               	goto	l3622
  2296                           
  2297                           ; BSR set to: 0
  2298                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2299                           
  2300                           ; BSR set to: 0
  2301                           
  2302                           ; BSR set to: 0
  2303  00027A  0100               	movlb	0	; () banked
  2304  00027C  51A5               	movf	printf@c& (0+255),w,b
  2305  00027E  0D02               	mullw	2
  2306  000280  0EE5               	movlw	low _hexpowers
  2307  000282  24F3               	addwf	prodl,w,c
  2308  000284  6EF6               	movwf	tblptrl,c
  2309  000286  0EFD               	movlw	high _hexpowers
  2310  000288  20F4               	addwfc	prodh,w,c
  2311  00028A  6EF7               	movwf	tblptrh,c
  2312  00028C                     	if	0	;There are less than 3 active tblptr bytes
  2313  00028C                     	endif
  2314  00028C  0009               	tblrd		*+
  2315  00028E  50F5               	movf	tablat,w,c
  2316  000290  0100               	movlb	0	; () banked
  2317  000292  5DA0               	subwf	printf@val& (0+255),w,b
  2318  000294  0009               	tblrd		*+
  2319  000296  50F5               	movf	tablat,w,c
  2320  000298  0100               	movlb	0	; () banked
  2321  00029A  59A1               	subwfb	(printf@val+1)& (0+255),w,b
  2322  00029C  A0D8               	btfss	status,0,c
  2323  00029E  D00F               	goto	l3622
  2324                           
  2325                           ; BSR set to: 0
  2326                           
  2327                           ; BSR set to: 0
  2328                           
  2329                           ; BSR set to: 0
  2330                           ;doprnt.c: 1318: break;
  2331  0002A0  0100               	movlb	0	; () banked
  2332  0002A2  2BA5               	incf	printf@c& (0+255),f,b
  2333  0002A4  D7E5               	goto	l3606
  2334  0002A6                     l3620:
  2335                           
  2336                           ; BSR set to: 0
  2337  0002A6  0100               	movlb	0	; () banked
  2338  0002A8  51A2               	movf	printf@flag& (0+255),w,b
  2339  0002AA  0BC0               	andlw	192
  2340                           
  2341                           ; Switch size 1, requested type "space"
  2342                           ; Number of cases is 3, Range of values is 0 to 192
  2343                           ; switch strategies available:
  2344                           ; Name         Instructions Cycles
  2345                           ; simple_byte           10     6 (average)
  2346                           ;	Chosen strategy is simple_byte
  2347  0002AC  0A00               	xorlw	0	; case 0
  2348  0002AE  B4D8               	btfsc	status,2,c
  2349  0002B0  D7BE               	goto	l3590
  2350  0002B2  0A80               	xorlw	128	; case 128
  2351  0002B4  B4D8               	btfsc	status,2,c
  2352  0002B6  D7D9               	goto	l3604
  2353  0002B8  0A40               	xorlw	64	; case 192
  2354  0002BA  B4D8               	btfsc	status,2,c
  2355  0002BC  D7B8               	goto	l3590
  2356  0002BE                     l3622:
  2357                           
  2358                           ; BSR set to: 0
  2359                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2360  0002BE  0100               	movlb	0	; () banked
  2361  0002C0  51A3               	movf	printf@width& (0+255),w,b
  2362  0002C2  0100               	movlb	0	; () banked
  2363  0002C4  11A4               	iorwf	(printf@width+1)& (0+255),w,b
  2364  0002C6  B4D8               	btfsc	status,2,c
  2365  0002C8  D00B               	goto	l3628
  2366                           
  2367                           ; BSR set to: 0
  2368  0002CA  C0A2  F094         	movff	printf@flag,??_printf
  2369  0002CE  0E03               	movlw	3
  2370  0002D0  0100               	movlb	0	; () banked
  2371  0002D2  1794               	andwf	??_printf& (0+255),f,b
  2372  0002D4  B4D8               	btfsc	status,2,c
  2373  0002D6  D004               	goto	l3628
  2374                           
  2375                           ; BSR set to: 0
  2376                           ;doprnt.c: 1346: width--;
  2377  0002D8  0100               	movlb	0	; () banked
  2378  0002DA  07A3               	decf	printf@width& (0+255),f,b
  2379  0002DC  A0D8               	btfss	status,0,c
  2380  0002DE  07A4               	decf	(printf@width+1)& (0+255),f,b
  2381  0002E0                     l3628:
  2382                           
  2383                           ; BSR set to: 0
  2384                           ;doprnt.c: 1381: if(width > c)
  2385  0002E0  0E80               	movlw	128
  2386  0002E2  0100               	movlb	0	; () banked
  2387  0002E4  BFA5               	btfsc	printf@c& (0+255),7,b
  2388  0002E6  0E7F               	movlw	127
  2389  0002E8  0100               	movlb	0	; () banked
  2390  0002EA  6F94               	movwf	??_printf& (0+255),b
  2391  0002EC  0100               	movlb	0	; () banked
  2392  0002EE  51A3               	movf	printf@width& (0+255),w,b
  2393  0002F0  0100               	movlb	0	; () banked
  2394  0002F2  5DA5               	subwf	printf@c& (0+255),w,b
  2395  0002F4  0100               	movlb	0	; () banked
  2396  0002F6  51A4               	movf	(printf@width+1)& (0+255),w,b
  2397  0002F8  0A80               	xorlw	128
  2398  0002FA  0100               	movlb	0	; () banked
  2399  0002FC  5994               	subwfb	??_printf& (0+255),w,b
  2400  0002FE  B0D8               	btfsc	status,0,c
  2401  000300  D00B               	goto	l3632
  2402                           
  2403                           ; BSR set to: 0
  2404                           ;doprnt.c: 1382: width -= c;
  2405  000302  0100               	movlb	0	; () banked
  2406  000304  51A5               	movf	printf@c& (0+255),w,b
  2407  000306  0100               	movlb	0	; () banked
  2408  000308  5FA3               	subwf	printf@width& (0+255),f,b
  2409  00030A  0E00               	movlw	0
  2410  00030C  0100               	movlb	0	; () banked
  2411  00030E  BFA5               	btfsc	printf@c& (0+255),7,b
  2412  000310  0EFF               	movlw	255
  2413  000312  0100               	movlb	0	; () banked
  2414  000314  5BA4               	subwfb	(printf@width+1)& (0+255),f,b
  2415  000316  D005               	goto	l3634
  2416  000318                     l3632:
  2417                           
  2418                           ; BSR set to: 0
  2419                           ;doprnt.c: 1383: else
  2420                           ;doprnt.c: 1384: width = 0;
  2421  000318  0E00               	movlw	0
  2422  00031A  0100               	movlb	0	; () banked
  2423  00031C  6FA4               	movwf	(printf@width+1)& (0+255),b
  2424  00031E  0E00               	movlw	0
  2425  000320  6FA3               	movwf	printf@width& (0+255),b
  2426  000322                     l3634:
  2427                           
  2428                           ; BSR set to: 0
  2429                           ;doprnt.c: 1387: if(flag & 0x04) {
  2430  000322  0100               	movlb	0	; () banked
  2431  000324  A5A2               	btfss	printf@flag& (0+255),2,b
  2432  000326  D018               	goto	l3646
  2433                           
  2434                           ; BSR set to: 0
  2435                           ;doprnt.c: 1392: if(flag & 0x03)
  2436  000328  C0A2  F094         	movff	printf@flag,??_printf
  2437  00032C  0E03               	movlw	3
  2438  00032E  0100               	movlb	0	; () banked
  2439  000330  1794               	andwf	??_printf& (0+255),f,b
  2440  000332  B4D8               	btfsc	status,2,c
  2441  000334  D003               	goto	l3640
  2442                           
  2443                           ; BSR set to: 0
  2444                           ;doprnt.c: 1393: (putch('-') );
  2445  000336  0E2D               	movlw	45
  2446  000338  ECB1  F011         	call	_putch
  2447  00033C                     l3640:
  2448                           
  2449                           ;doprnt.c: 1415: if(width)
  2450  00033C  0100               	movlb	0	; () banked
  2451  00033E  51A3               	movf	printf@width& (0+255),w,b
  2452  000340  0100               	movlb	0	; () banked
  2453  000342  11A4               	iorwf	(printf@width+1)& (0+255),w,b
  2454  000344  B4D8               	btfsc	status,2,c
  2455  000346  D025               	goto	l3656
  2456                           
  2457                           ; BSR set to: 0
  2458                           ;doprnt.c: 1417: (putch('0') );
  2459                           
  2460                           ; BSR set to: 0
  2461                           
  2462                           ;doprnt.c: 1416: do
  2463  000348  0E30               	movlw	48
  2464  00034A  ECB1  F011         	call	_putch
  2465                           
  2466                           ;doprnt.c: 1418: while(--width);
  2467  00034E  0100               	movlb	0	; () banked
  2468  000350  07A3               	decf	printf@width& (0+255),f,b
  2469  000352  A0D8               	btfss	status,0,c
  2470  000354  07A4               	decf	(printf@width+1)& (0+255),f,b
  2471  000356  D7F2               	goto	l3640
  2472  000358                     l3646:
  2473                           
  2474                           ; BSR set to: 0
  2475                           ;doprnt.c: 1422: {
  2476                           ;doprnt.c: 1424: if(width
  2477                           ;doprnt.c: 1428: )
  2478  000358  0100               	movlb	0	; () banked
  2479  00035A  51A3               	movf	printf@width& (0+255),w,b
  2480  00035C  0100               	movlb	0	; () banked
  2481  00035E  11A4               	iorwf	(printf@width+1)& (0+255),w,b
  2482  000360  B4D8               	btfsc	status,2,c
  2483  000362  D00D               	goto	l3652
  2484  000364                     l3648:
  2485                           
  2486                           ; BSR set to: 0
  2487                           ;doprnt.c: 1430: (putch(' ') );
  2488  000364  0E20               	movlw	32
  2489  000366  ECB1  F011         	call	_putch
  2490                           
  2491                           ;doprnt.c: 1431: while(--width);
  2492  00036A  0100               	movlb	0	; () banked
  2493  00036C  07A3               	decf	printf@width& (0+255),f,b
  2494  00036E  A0D8               	btfss	status,0,c
  2495  000370  07A4               	decf	(printf@width+1)& (0+255),f,b
  2496  000372  0100               	movlb	0	; () banked
  2497  000374  51A3               	movf	printf@width& (0+255),w,b
  2498  000376  0100               	movlb	0	; () banked
  2499  000378  11A4               	iorwf	(printf@width+1)& (0+255),w,b
  2500  00037A  A4D8               	btfss	status,2,c
  2501  00037C  D7F3               	goto	l3648
  2502  00037E                     l3652:
  2503                           
  2504                           ; BSR set to: 0
  2505                           ;doprnt.c: 1438: if(flag & 0x03)
  2506  00037E  C0A2  F094         	movff	printf@flag,??_printf
  2507  000382  0E03               	movlw	3
  2508  000384  0100               	movlb	0	; () banked
  2509  000386  1794               	andwf	??_printf& (0+255),f,b
  2510  000388  B4D8               	btfsc	status,2,c
  2511  00038A  D003               	goto	l3656
  2512                           
  2513                           ; BSR set to: 0
  2514                           ;doprnt.c: 1439: (putch('-') );
  2515  00038C  0E2D               	movlw	45
  2516  00038E  ECB1  F011         	call	_putch
  2517  000392                     l3656:
  2518                           
  2519                           ;doprnt.c: 1469: }
  2520                           ;doprnt.c: 1472: prec = c;
  2521  000392  C0A5  F09F         	movff	printf@c,printf@prec
  2522                           
  2523                           ;doprnt.c: 1474: while(prec--) {
  2524  000396  D05D               	goto	l3670
  2525  000398                     l3658:
  2526                           
  2527                           ;doprnt.c: 1486: case 0xC0:
  2528                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2529  000398  0100               	movlb	0	; () banked
  2530  00039A  519F               	movf	printf@prec& (0+255),w,b
  2531  00039C  0D02               	mullw	2
  2532  00039E  0EDB               	movlw	low _dpowers
  2533  0003A0  24F3               	addwf	prodl,w,c
  2534  0003A2  6EF6               	movwf	tblptrl,c
  2535  0003A4  0EFD               	movlw	high _dpowers
  2536  0003A6  20F4               	addwfc	prodh,w,c
  2537  0003A8  6EF7               	movwf	tblptrh,c
  2538  0003AA                     	if	0	;There are less than 3 active tblptr bytes
  2539  0003AA                     	endif
  2540  0003AA  0009               	tblrd		*+
  2541  0003AC  CFF5 F082          	movff	tablat,___lwdiv@divisor
  2542  0003B0  000A               	tblrd		*-
  2543  0003B2  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  2544  0003B6  C0A0  F080         	movff	printf@val,___lwdiv@dividend
  2545  0003BA  C0A1  F081         	movff	printf@val+1,___lwdiv@dividend+1
  2546  0003BE  EC1D  F00D         	call	___lwdiv	;wreg free
  2547  0003C2  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  2548  0003C6  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  2549  0003CA  0E00               	movlw	0
  2550  0003CC  0100               	movlb	0	; () banked
  2551  0003CE  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  2552  0003D0  0E0A               	movlw	10
  2553  0003D2  6F89               	movwf	___lwmod@divisor& (0+255),b
  2554  0003D4  ECE5  F00E         	call	___lwmod	;wreg free
  2555  0003D8  0100               	movlb	0	; () banked
  2556  0003DA  5187               	movf	?___lwmod& (0+255),w,b
  2557  0003DC  0F30               	addlw	48
  2558  0003DE  0100               	movlb	0	; () banked
  2559  0003E0  6FA5               	movwf	printf@c& (0+255),b
  2560                           
  2561                           ;doprnt.c: 1491: break;
  2562  0003E2  D033               	goto	l3668
  2563  0003E4                     l3660:
  2564                           
  2565                           ; BSR set to: 0
  2566                           ;doprnt.c: 1499: {
  2567                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2568  0003E4  C0A0  F080         	movff	printf@val,___lwdiv@dividend
  2569  0003E8  C0A1  F081         	movff	printf@val+1,___lwdiv@dividend+1
  2570  0003EC  0100               	movlb	0	; () banked
  2571  0003EE  519F               	movf	printf@prec& (0+255),w,b
  2572  0003F0  0D02               	mullw	2
  2573  0003F2  0EE5               	movlw	low _hexpowers
  2574  0003F4  24F3               	addwf	prodl,w,c
  2575  0003F6  6EF6               	movwf	tblptrl,c
  2576  0003F8  0EFD               	movlw	high _hexpowers
  2577  0003FA  20F4               	addwfc	prodh,w,c
  2578  0003FC  6EF7               	movwf	tblptrh,c
  2579  0003FE                     	if	0	;There are less than 3 active tblptr bytes
  2580  0003FE                     	endif
  2581  0003FE  0009               	tblrd		*+
  2582  000400  CFF5 F082          	movff	tablat,___lwdiv@divisor
  2583  000404  000A               	tblrd		*-
  2584  000406  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  2585  00040A  EC1D  F00D         	call	___lwdiv	;wreg free
  2586  00040E  0100               	movlb	0	; () banked
  2587  000410  5180               	movf	?___lwdiv& (0+255),w,b
  2588  000412  0B0F               	andlw	15
  2589  000414  0100               	movlb	0	; () banked
  2590  000416  6F9A               	movwf	printf@idx& (0+255),b
  2591                           
  2592                           ; BSR set to: 0
  2593                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2594  000418  0100               	movlb	0	; () banked
  2595  00041A  519A               	movf	printf@idx& (0+255),w,b
  2596  00041C  0D01               	mullw	1
  2597  00041E  0E93               	movlw	low STR_45
  2598  000420  24F3               	addwf	prodl,w,c
  2599  000422  6EF6               	movwf	tblptrl,c
  2600  000424  0EFF               	movlw	high STR_45
  2601  000426  20F4               	addwfc	prodh,w,c
  2602  000428  6EF7               	movwf	tblptrh,c
  2603  00042A                     	if	0	;There are less than 3 active tblptr bytes
  2604  00042A                     	endif
  2605  00042A  0008               	tblrd		*
  2606  00042C  CFF5 F0A5          	movff	tablat,printf@c
  2607                           
  2608                           ; BSR set to: 0
  2609                           ;doprnt.c: 1523: }
  2610                           
  2611                           ;doprnt.c: 1508: }
  2612                           ;doprnt.c: 1510: break;
  2613  000430  D00C               	goto	l3668
  2614  000432                     l3666:
  2615  000432  0100               	movlb	0	; () banked
  2616  000434  51A2               	movf	printf@flag& (0+255),w,b
  2617  000436  0BC0               	andlw	192
  2618                           
  2619                           ; Switch size 1, requested type "space"
  2620                           ; Number of cases is 3, Range of values is 0 to 192
  2621                           ; switch strategies available:
  2622                           ; Name         Instructions Cycles
  2623                           ; simple_byte           10     6 (average)
  2624                           ;	Chosen strategy is simple_byte
  2625  000438  0A00               	xorlw	0	; case 0
  2626  00043A  B4D8               	btfsc	status,2,c
  2627  00043C  D7AD               	goto	l3658
  2628  00043E  0A80               	xorlw	128	; case 128
  2629  000440  B4D8               	btfsc	status,2,c
  2630  000442  D7D0               	goto	l3660
  2631  000444  0A40               	xorlw	64	; case 192
  2632  000446  B4D8               	btfsc	status,2,c
  2633  000448  D7A7               	goto	l3658
  2634  00044A                     l3668:
  2635                           
  2636                           ; BSR set to: 0
  2637                           ;doprnt.c: 1524: (putch(c) );
  2638  00044A  0100               	movlb	0	; () banked
  2639  00044C  51A5               	movf	printf@c& (0+255),w,b
  2640  00044E  ECB1  F011         	call	_putch
  2641  000452                     l3670:
  2642  000452  0100               	movlb	0	; () banked
  2643  000454  079F               	decf	printf@prec& (0+255),f,b
  2644  000456  0100               	movlb	0	; () banked
  2645  000458  299F               	incf	printf@prec& (0+255),w,b
  2646  00045A  A4D8               	btfss	status,2,c
  2647  00045C  D7EA               	goto	l3666
  2648  00045E                     l3672:
  2649  00045E  C08C  FFF6         	movff	printf@f,tblptrl
  2650  000462  C08D  FFF7         	movff	printf@f+1,tblptrh
  2651  000466  0100               	movlb	0	; () banked
  2652  000468  4B8C               	infsnz	printf@f& (0+255),f,b
  2653  00046A  2B8D               	incf	(printf@f+1)& (0+255),f,b
  2654  00046C                     	if	0	;tblptru may be non-zero
  2655  00046C                     	endif
  2656  00046C                     	if	0	;tblptru may be non-zero
  2657  00046C                     	endif
  2658  00046C  0008               	tblrd		*
  2659  00046E  CFF5 F0A5          	movff	tablat,printf@c
  2660  000472  0100               	movlb	0	; () banked
  2661  000474  51A5               	movf	printf@c& (0+255),w,b
  2662  000476  B4D8               	btfsc	status,2,c
  2663  000478  0012               	return	
  2664  00047A  D5D2               	goto	l3522
  2665  00047C                     __end_of_printf:
  2666                           	opt stack 0
  2667                           tblptru	equ	0xFF8
  2668                           tblptrh	equ	0xFF7
  2669                           tblptrl	equ	0xFF6
  2670                           tablat	equ	0xFF5
  2671                           prodh	equ	0xFF4
  2672                           prodl	equ	0xFF3
  2673                           intcon	equ	0xFF2
  2674                           intcon3	equ	0xFF0
  2675                           postinc0	equ	0xFEE
  2676                           wreg	equ	0xFE8
  2677                           indf2	equ	0xFDF
  2678                           postinc2	equ	0xFDE
  2679                           postdec2	equ	0xFDD
  2680                           fsr2h	equ	0xFDA
  2681                           fsr2l	equ	0xFD9
  2682                           status	equ	0xFD8
  2683                           
  2684 ;; *************** function _putch *****************
  2685 ;; Defined at:
  2686 ;;		line 25 in file "lcd.c"
  2687 ;; Parameters:    Size  Location     Type
  2688 ;;  data            1    wreg     unsigned char 
  2689 ;; Auto vars:     Size  Location     Type
  2690 ;;  data            1    2[BANK0 ] unsigned char 
  2691 ;; Return value:  Size  Location     Type
  2692 ;;                  1    wreg      void 
  2693 ;; Registers used:
  2694 ;;		wreg, status,2, status,0, cstack
  2695 ;; Tracked objects:
  2696 ;;		On entry : 0/0
  2697 ;;		On exit  : 0/0
  2698 ;;		Unchanged: 0/0
  2699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2701 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2703 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2704 ;;Total ram usage:        1 bytes
  2705 ;; Hardware stack levels used:    1
  2706 ;; Hardware stack levels required when called:    8
  2707 ;; This function calls:
  2708 ;;		_lcdNibble
  2709 ;; This function is called by:
  2710 ;;		_printf
  2711 ;; This function uses a non-reentrant model
  2712 ;;
  2713                           
  2714                           	psect	text3
  2715  002362                     __ptext3:
  2716                           	opt stack 0
  2717  002362                     _putch:
  2718                           	opt stack 20
  2719                           
  2720                           ;incstack = 0
  2721                           ;putch@data stored from wreg
  2722  002362  0100               	movlb	0	; () banked
  2723  002364  6F82               	movwf	putch@data& (0+255),b
  2724                           
  2725                           ;lcd.c: 26: LATDbits.LATD2 = 1;
  2726  002366  848C               	bsf	3980,2,c	;volatile
  2727                           
  2728                           ;lcd.c: 27: lcdNibble(data);
  2729  002368  0100               	movlb	0	; () banked
  2730  00236A  5182               	movf	putch@data& (0+255),w,b
  2731  00236C  ECB1  F00E         	call	_lcdNibble
  2732  002370  0012               	return		;funcret
  2733  002372                     __end_of_putch:
  2734                           	opt stack 0
  2735                           tblptru	equ	0xFF8
  2736                           tblptrh	equ	0xFF7
  2737                           tblptrl	equ	0xFF6
  2738                           tablat	equ	0xFF5
  2739                           prodh	equ	0xFF4
  2740                           prodl	equ	0xFF3
  2741                           intcon	equ	0xFF2
  2742                           intcon3	equ	0xFF0
  2743                           postinc0	equ	0xFEE
  2744                           wreg	equ	0xFE8
  2745                           indf2	equ	0xFDF
  2746                           postinc2	equ	0xFDE
  2747                           postdec2	equ	0xFDD
  2748                           fsr2h	equ	0xFDA
  2749                           fsr2l	equ	0xFD9
  2750                           status	equ	0xFD8
  2751                           
  2752 ;; *************** function _isdigit *****************
  2753 ;; Defined at:
  2754 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  2755 ;; Parameters:    Size  Location     Type
  2756 ;;  c               1    wreg     unsigned char 
  2757 ;; Auto vars:     Size  Location     Type
  2758 ;;  c               1    2[BANK0 ] unsigned char 
  2759 ;; Return value:  Size  Location     Type
  2760 ;;		None               void
  2761 ;; Registers used:
  2762 ;;		wreg, status,2, status,0
  2763 ;; Tracked objects:
  2764 ;;		On entry : 0/0
  2765 ;;		On exit  : 0/0
  2766 ;;		Unchanged: 0/0
  2767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2769 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2770 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2771 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2772 ;;Total ram usage:        3 bytes
  2773 ;; Hardware stack levels used:    1
  2774 ;; Hardware stack levels required when called:    7
  2775 ;; This function calls:
  2776 ;;		Nothing
  2777 ;; This function is called by:
  2778 ;;		_printf
  2779 ;; This function uses a non-reentrant model
  2780 ;;
  2781                           
  2782                           	psect	text4
  2783  002180                     __ptext4:
  2784                           	opt stack 0
  2785  002180                     _isdigit:
  2786                           	opt stack 21
  2787                           
  2788                           ;incstack = 0
  2789                           ;isdigit@c stored from wreg
  2790  002180  0100               	movlb	0	; () banked
  2791  002182  6F82               	movwf	isdigit@c& (0+255),b
  2792  002184  0E00               	movlw	0
  2793  002186  0100               	movlb	0	; () banked
  2794  002188  6F81               	movwf	_isdigit$1055& (0+255),b
  2795                           
  2796                           ; BSR set to: 0
  2797  00218A  0E3A               	movlw	58
  2798  00218C  0100               	movlb	0	; () banked
  2799  00218E  6182               	cpfslt	isdigit@c& (0+255),b
  2800  002190  D007               	goto	l3378
  2801                           
  2802                           ; BSR set to: 0
  2803  002192  0E2F               	movlw	47
  2804  002194  0100               	movlb	0	; () banked
  2805  002196  6582               	cpfsgt	isdigit@c& (0+255),b
  2806  002198  D003               	goto	l3378
  2807                           
  2808                           ; BSR set to: 0
  2809  00219A  0E01               	movlw	1
  2810  00219C  0100               	movlb	0	; () banked
  2811  00219E  6F81               	movwf	_isdigit$1055& (0+255),b
  2812  0021A0                     l3378:
  2813                           
  2814                           ; BSR set to: 0
  2815  0021A0  C081  F080         	movff	_isdigit$1055,??_isdigit
  2816  0021A4  0100               	movlb	0	; () banked
  2817  0021A6  3180               	rrcf	??_isdigit& (0+255),w,b
  2818  0021A8  0012               	return	
  2819  0021AA                     __end_of_isdigit:
  2820                           	opt stack 0
  2821                           tblptru	equ	0xFF8
  2822                           tblptrh	equ	0xFF7
  2823                           tblptrl	equ	0xFF6
  2824                           tablat	equ	0xFF5
  2825                           prodh	equ	0xFF4
  2826                           prodl	equ	0xFF3
  2827                           intcon	equ	0xFF2
  2828                           intcon3	equ	0xFF0
  2829                           postinc0	equ	0xFEE
  2830                           wreg	equ	0xFE8
  2831                           indf2	equ	0xFDF
  2832                           postinc2	equ	0xFDE
  2833                           postdec2	equ	0xFDD
  2834                           fsr2h	equ	0xFDA
  2835                           fsr2l	equ	0xFD9
  2836                           status	equ	0xFD8
  2837                           
  2838 ;; *************** function ___wmul *****************
  2839 ;; Defined at:
  2840 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  2841 ;; Parameters:    Size  Location     Type
  2842 ;;  multiplier      2    0[BANK0 ] unsigned int 
  2843 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  2844 ;; Auto vars:     Size  Location     Type
  2845 ;;  product         2    4[BANK0 ] unsigned int 
  2846 ;; Return value:  Size  Location     Type
  2847 ;;                  2    0[BANK0 ] unsigned int 
  2848 ;; Registers used:
  2849 ;;		wreg, status,2, status,0, prodl, prodh
  2850 ;; Tracked objects:
  2851 ;;		On entry : 0/0
  2852 ;;		On exit  : 0/0
  2853 ;;		Unchanged: 0/0
  2854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2855 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2856 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2858 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2859 ;;Total ram usage:        6 bytes
  2860 ;; Hardware stack levels used:    1
  2861 ;; Hardware stack levels required when called:    7
  2862 ;; This function calls:
  2863 ;;		Nothing
  2864 ;; This function is called by:
  2865 ;;		_printf
  2866 ;; This function uses a non-reentrant model
  2867 ;;
  2868                           
  2869                           	psect	text5
  2870  00211C                     __ptext5:
  2871                           	opt stack 0
  2872  00211C                     ___wmul:
  2873                           	opt stack 21
  2874                           
  2875                           ; BSR set to: 0
  2876                           ;incstack = 0
  2877  00211C  0100               	movlb	0	; () banked
  2878  00211E  5180               	movf	___wmul@multiplier& (0+255),w,b
  2879  002120  0100               	movlb	0	; () banked
  2880  002122  0382               	mulwf	___wmul@multiplicand& (0+255),b
  2881  002124  CFF3 F084          	movff	prodl,___wmul@product
  2882  002128  CFF4 F085          	movff	prodh,___wmul@product+1
  2883  00212C  0100               	movlb	0	; () banked
  2884  00212E  5180               	movf	___wmul@multiplier& (0+255),w,b
  2885  002130  0100               	movlb	0	; () banked
  2886  002132  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  2887  002134  50F3               	movf	prodl,w,c
  2888  002136  0100               	movlb	0	; () banked
  2889  002138  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  2890  00213A  0100               	movlb	0	; () banked
  2891  00213C  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  2892  00213E  0100               	movlb	0	; () banked
  2893  002140  0382               	mulwf	___wmul@multiplicand& (0+255),b
  2894  002142  50F3               	movf	prodl,w,c
  2895  002144  0100               	movlb	0	; () banked
  2896  002146  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  2897                           
  2898                           ; BSR set to: 0
  2899  002148  C084  F080         	movff	___wmul@product,?___wmul
  2900  00214C  C085  F081         	movff	___wmul@product+1,?___wmul+1
  2901  002150  0012               	return	
  2902  002152                     __end_of___wmul:
  2903                           	opt stack 0
  2904                           tblptru	equ	0xFF8
  2905                           tblptrh	equ	0xFF7
  2906                           tblptrl	equ	0xFF6
  2907                           tablat	equ	0xFF5
  2908                           prodh	equ	0xFF4
  2909                           prodl	equ	0xFF3
  2910                           intcon	equ	0xFF2
  2911                           intcon3	equ	0xFF0
  2912                           postinc0	equ	0xFEE
  2913                           wreg	equ	0xFE8
  2914                           indf2	equ	0xFDF
  2915                           postinc2	equ	0xFDE
  2916                           postdec2	equ	0xFDD
  2917                           fsr2h	equ	0xFDA
  2918                           fsr2l	equ	0xFD9
  2919                           status	equ	0xFD8
  2920                           
  2921 ;; *************** function ___lwmod *****************
  2922 ;; Defined at:
  2923 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  2924 ;; Parameters:    Size  Location     Type
  2925 ;;  dividend        2    7[BANK0 ] unsigned int 
  2926 ;;  divisor         2    9[BANK0 ] unsigned int 
  2927 ;; Auto vars:     Size  Location     Type
  2928 ;;  counter         1   11[BANK0 ] unsigned char 
  2929 ;; Return value:  Size  Location     Type
  2930 ;;                  2    7[BANK0 ] unsigned int 
  2931 ;; Registers used:
  2932 ;;		wreg, status,2, status,0
  2933 ;; Tracked objects:
  2934 ;;		On entry : 0/0
  2935 ;;		On exit  : 0/0
  2936 ;;		Unchanged: 0/0
  2937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2938 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2939 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2941 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2942 ;;Total ram usage:        5 bytes
  2943 ;; Hardware stack levels used:    1
  2944 ;; Hardware stack levels required when called:    7
  2945 ;; This function calls:
  2946 ;;		Nothing
  2947 ;; This function is called by:
  2948 ;;		_printf
  2949 ;; This function uses a non-reentrant model
  2950 ;;
  2951                           
  2952                           	psect	text6
  2953  001DCA                     __ptext6:
  2954                           	opt stack 0
  2955  001DCA                     ___lwmod:
  2956                           	opt stack 21
  2957                           
  2958                           ; BSR set to: 0
  2959                           ;incstack = 0
  2960  001DCA  0100               	movlb	0	; () banked
  2961  001DCC  5189               	movf	___lwmod@divisor& (0+255),w,b
  2962  001DCE  0100               	movlb	0	; () banked
  2963  001DD0  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  2964  001DD2  B4D8               	btfsc	status,2,c
  2965  001DD4  D026               	goto	l953
  2966                           
  2967                           ; BSR set to: 0
  2968  001DD6  0E01               	movlw	1
  2969  001DD8  0100               	movlb	0	; () banked
  2970  001DDA  6F8B               	movwf	___lwmod@counter& (0+255),b
  2971  001DDC  D006               	goto	l3438
  2972  001DDE                     l3436:
  2973                           
  2974                           ; BSR set to: 0
  2975  001DDE  0100               	movlb	0	; () banked
  2976  001DE0  90D8               	bcf	status,0,c
  2977  001DE2  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  2978  001DE4  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  2979  001DE6  0100               	movlb	0	; () banked
  2980  001DE8  2B8B               	incf	___lwmod@counter& (0+255),f,b
  2981  001DEA                     l3438:
  2982                           
  2983                           ; BSR set to: 0
  2984  001DEA  0100               	movlb	0	; () banked
  2985  001DEC  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  2986  001DEE  D7F7               	goto	l3436
  2987  001DF0                     l3440:
  2988                           
  2989                           ; BSR set to: 0
  2990  001DF0  0100               	movlb	0	; () banked
  2991  001DF2  5189               	movf	___lwmod@divisor& (0+255),w,b
  2992  001DF4  0100               	movlb	0	; () banked
  2993  001DF6  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  2994  001DF8  0100               	movlb	0	; () banked
  2995  001DFA  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  2996  001DFC  0100               	movlb	0	; () banked
  2997  001DFE  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  2998  001E00  A0D8               	btfss	status,0,c
  2999  001E02  D008               	goto	l3444
  3000                           
  3001                           ; BSR set to: 0
  3002  001E04  0100               	movlb	0	; () banked
  3003  001E06  5189               	movf	___lwmod@divisor& (0+255),w,b
  3004  001E08  0100               	movlb	0	; () banked
  3005  001E0A  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  3006  001E0C  0100               	movlb	0	; () banked
  3007  001E0E  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3008  001E10  0100               	movlb	0	; () banked
  3009  001E12  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  3010  001E14                     l3444:
  3011                           
  3012                           ; BSR set to: 0
  3013  001E14  0100               	movlb	0	; () banked
  3014  001E16  90D8               	bcf	status,0,c
  3015  001E18  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  3016  001E1A  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  3017                           
  3018                           ; BSR set to: 0
  3019  001E1C  0100               	movlb	0	; () banked
  3020  001E1E  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  3021  001E20  D7E7               	goto	l3440
  3022  001E22                     l953:
  3023                           
  3024                           ; BSR set to: 0
  3025  001E22  C087  F087         	movff	___lwmod@dividend,?___lwmod
  3026  001E26  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  3027                           
  3028                           ; BSR set to: 0
  3029  001E2A  0012               	return		;funcret
  3030  001E2C                     __end_of___lwmod:
  3031                           	opt stack 0
  3032                           tblptru	equ	0xFF8
  3033                           tblptrh	equ	0xFF7
  3034                           tblptrl	equ	0xFF6
  3035                           tablat	equ	0xFF5
  3036                           prodh	equ	0xFF4
  3037                           prodl	equ	0xFF3
  3038                           intcon	equ	0xFF2
  3039                           intcon3	equ	0xFF0
  3040                           postinc0	equ	0xFEE
  3041                           wreg	equ	0xFE8
  3042                           indf2	equ	0xFDF
  3043                           postinc2	equ	0xFDE
  3044                           postdec2	equ	0xFDD
  3045                           fsr2h	equ	0xFDA
  3046                           fsr2l	equ	0xFD9
  3047                           status	equ	0xFD8
  3048                           
  3049 ;; *************** function ___lwdiv *****************
  3050 ;; Defined at:
  3051 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  3052 ;; Parameters:    Size  Location     Type
  3053 ;;  dividend        2    0[BANK0 ] unsigned int 
  3054 ;;  divisor         2    2[BANK0 ] unsigned int 
  3055 ;; Auto vars:     Size  Location     Type
  3056 ;;  quotient        2    4[BANK0 ] unsigned int 
  3057 ;;  counter         1    6[BANK0 ] unsigned char 
  3058 ;; Return value:  Size  Location     Type
  3059 ;;                  2    0[BANK0 ] unsigned int 
  3060 ;; Registers used:
  3061 ;;		wreg, status,2, status,0
  3062 ;; Tracked objects:
  3063 ;;		On entry : 0/0
  3064 ;;		On exit  : 0/0
  3065 ;;		Unchanged: 0/0
  3066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3067 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3068 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3070 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3071 ;;Total ram usage:        7 bytes
  3072 ;; Hardware stack levels used:    1
  3073 ;; Hardware stack levels required when called:    7
  3074 ;; This function calls:
  3075 ;;		Nothing
  3076 ;; This function is called by:
  3077 ;;		_printf
  3078 ;; This function uses a non-reentrant model
  3079 ;;
  3080                           
  3081                           	psect	text7
  3082  001A3A                     __ptext7:
  3083                           	opt stack 0
  3084  001A3A                     ___lwdiv:
  3085                           	opt stack 21
  3086                           
  3087                           ; BSR set to: 0
  3088                           ;incstack = 0
  3089  001A3A  0E00               	movlw	0
  3090  001A3C  0100               	movlb	0	; () banked
  3091  001A3E  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
  3092  001A40  0E00               	movlw	0
  3093  001A42  6F84               	movwf	___lwdiv@quotient& (0+255),b
  3094                           
  3095                           ; BSR set to: 0
  3096  001A44  0100               	movlb	0	; () banked
  3097  001A46  5182               	movf	___lwdiv@divisor& (0+255),w,b
  3098  001A48  0100               	movlb	0	; () banked
  3099  001A4A  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  3100  001A4C  B4D8               	btfsc	status,2,c
  3101  001A4E  D02C               	goto	l943
  3102                           
  3103                           ; BSR set to: 0
  3104  001A50  0E01               	movlw	1
  3105  001A52  0100               	movlb	0	; () banked
  3106  001A54  6F86               	movwf	___lwdiv@counter& (0+255),b
  3107  001A56  D006               	goto	l3418
  3108  001A58                     l3416:
  3109                           
  3110                           ; BSR set to: 0
  3111  001A58  0100               	movlb	0	; () banked
  3112  001A5A  90D8               	bcf	status,0,c
  3113  001A5C  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  3114  001A5E  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  3115  001A60  0100               	movlb	0	; () banked
  3116  001A62  2B86               	incf	___lwdiv@counter& (0+255),f,b
  3117  001A64                     l3418:
  3118                           
  3119                           ; BSR set to: 0
  3120  001A64  0100               	movlb	0	; () banked
  3121  001A66  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  3122  001A68  D7F7               	goto	l3416
  3123  001A6A                     l3420:
  3124                           
  3125                           ; BSR set to: 0
  3126  001A6A  0100               	movlb	0	; () banked
  3127  001A6C  90D8               	bcf	status,0,c
  3128  001A6E  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
  3129  001A70  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  3130                           
  3131                           ; BSR set to: 0
  3132  001A72  0100               	movlb	0	; () banked
  3133  001A74  5182               	movf	___lwdiv@divisor& (0+255),w,b
  3134  001A76  0100               	movlb	0	; () banked
  3135  001A78  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  3136  001A7A  0100               	movlb	0	; () banked
  3137  001A7C  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3138  001A7E  0100               	movlb	0	; () banked
  3139  001A80  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  3140  001A82  A0D8               	btfss	status,0,c
  3141  001A84  D00A               	goto	l3428
  3142                           
  3143                           ; BSR set to: 0
  3144  001A86  0100               	movlb	0	; () banked
  3145  001A88  5182               	movf	___lwdiv@divisor& (0+255),w,b
  3146  001A8A  0100               	movlb	0	; () banked
  3147  001A8C  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  3148  001A8E  0100               	movlb	0	; () banked
  3149  001A90  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3150  001A92  0100               	movlb	0	; () banked
  3151  001A94  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  3152                           
  3153                           ; BSR set to: 0
  3154  001A96  0100               	movlb	0	; () banked
  3155  001A98  8184               	bsf	___lwdiv@quotient& (0+255),0,b
  3156  001A9A                     l3428:
  3157                           
  3158                           ; BSR set to: 0
  3159  001A9A  0100               	movlb	0	; () banked
  3160  001A9C  90D8               	bcf	status,0,c
  3161  001A9E  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  3162  001AA0  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  3163                           
  3164                           ; BSR set to: 0
  3165  001AA2  0100               	movlb	0	; () banked
  3166  001AA4  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
  3167  001AA6  D7E1               	goto	l3420
  3168  001AA8                     l943:
  3169                           
  3170                           ; BSR set to: 0
  3171  001AA8  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
  3172  001AAC  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3173                           
  3174                           ; BSR set to: 0
  3175  001AB0  0012               	return		;funcret
  3176  001AB2                     __end_of___lwdiv:
  3177                           	opt stack 0
  3178                           tblptru	equ	0xFF8
  3179                           tblptrh	equ	0xFF7
  3180                           tblptrl	equ	0xFF6
  3181                           tablat	equ	0xFF5
  3182                           prodh	equ	0xFF4
  3183                           prodl	equ	0xFF3
  3184                           intcon	equ	0xFF2
  3185                           intcon3	equ	0xFF0
  3186                           postinc0	equ	0xFEE
  3187                           wreg	equ	0xFE8
  3188                           indf2	equ	0xFDF
  3189                           postinc2	equ	0xFDE
  3190                           postdec2	equ	0xFDD
  3191                           fsr2h	equ	0xFDA
  3192                           fsr2l	equ	0xFD9
  3193                           status	equ	0xFD8
  3194                           
  3195 ;; *************** function _getTime *****************
  3196 ;; Defined at:
  3197 ;;		line 76 in file "modules.c"
  3198 ;; Parameters:    Size  Location     Type
  3199 ;;  time            2    3[BANK0 ] PTR unsigned char 
  3200 ;;		 -> time(7), 
  3201 ;; Auto vars:     Size  Location     Type
  3202 ;;  i               1    5[BANK0 ] unsigned char 
  3203 ;; Return value:  Size  Location     Type
  3204 ;;                  1    wreg      void 
  3205 ;; Registers used:
  3206 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3207 ;; Tracked objects:
  3208 ;;		On entry : 0/0
  3209 ;;		On exit  : 0/0
  3210 ;;		Unchanged: 0/0
  3211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3212 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3213 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3215 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3216 ;;Total ram usage:        3 bytes
  3217 ;; Hardware stack levels used:    1
  3218 ;; Hardware stack levels required when called:    9
  3219 ;; This function calls:
  3220 ;;		_I2C_Master_Read
  3221 ;;		_I2C_Master_Start
  3222 ;;		_I2C_Master_Stop
  3223 ;;		_I2C_Master_Write
  3224 ;; This function is called by:
  3225 ;;		_showRTC
  3226 ;; This function uses a non-reentrant model
  3227 ;;
  3228                           
  3229                           	psect	text8
  3230  00192C                     __ptext8:
  3231                           	opt stack 0
  3232  00192C                     _getTime:
  3233                           	opt stack 20
  3234                           
  3235                           ;modules.c: 77: (INTCONbits.GIE = 0);
  3236                           
  3237                           ; BSR set to: 0
  3238                           ;incstack = 0
  3239  00192C  9EF2               	bcf	intcon,7,c	;volatile
  3240                           
  3241                           ;modules.c: 81: I2C_Master_Start();
  3242  00192E  ECDB  F011         	call	_I2C_Master_Start	;wreg free
  3243                           
  3244                           ;modules.c: 82: I2C_Master_Write(0b11010000);
  3245  001932  0E00               	movlw	0
  3246  001934  0100               	movlb	0	; () banked
  3247  001936  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3248  001938  0ED0               	movlw	208
  3249  00193A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3250  00193C  ECCD  F011         	call	_I2C_Master_Write	;wreg free
  3251                           
  3252                           ;modules.c: 83: I2C_Master_Write(0x00);
  3253  001940  0E00               	movlw	0
  3254  001942  0100               	movlb	0	; () banked
  3255  001944  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3256  001946  0E00               	movlw	0
  3257  001948  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3258  00194A  ECCD  F011         	call	_I2C_Master_Write	;wreg free
  3259                           
  3260                           ;modules.c: 84: I2C_Master_Stop();
  3261  00194E  ECD7  F011         	call	_I2C_Master_Stop	;wreg free
  3262                           
  3263                           ;modules.c: 87: I2C_Master_Start();
  3264  001952  ECDB  F011         	call	_I2C_Master_Start	;wreg free
  3265                           
  3266                           ;modules.c: 88: I2C_Master_Write(0b11010001);
  3267  001956  0E00               	movlw	0
  3268  001958  0100               	movlb	0	; () banked
  3269  00195A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3270  00195C  0ED1               	movlw	209
  3271  00195E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3272  001960  ECCD  F011         	call	_I2C_Master_Write	;wreg free
  3273                           
  3274                           ;modules.c: 89: for (unsigned char i = 0; i < 0x06; i++) {
  3275  001964  0E00               	movlw	0
  3276  001966  0100               	movlb	0	; () banked
  3277  001968  6F85               	movwf	getTime@i& (0+255),b
  3278  00196A                     l3750:
  3279                           
  3280                           ; BSR set to: 0
  3281  00196A  0E05               	movlw	5
  3282  00196C  0100               	movlb	0	; () banked
  3283  00196E  6585               	cpfsgt	getTime@i& (0+255),b
  3284  001970  D001               	goto	l3754
  3285  001972  D012               	goto	l3760
  3286  001974                     l3754:
  3287                           
  3288                           ; BSR set to: 0
  3289                           ;modules.c: 90: time[i] = I2C_Master_Read(1);
  3290  001974  0100               	movlb	0	; () banked
  3291  001976  5185               	movf	getTime@i& (0+255),w,b
  3292  001978  0D01               	mullw	1
  3293  00197A  50F3               	movf	prodl,w,c
  3294  00197C  0100               	movlb	0	; () banked
  3295  00197E  2583               	addwf	getTime@time& (0+255),w,b
  3296  001980  6ED9               	movwf	fsr2l,c
  3297  001982  50F4               	movf	prodh,w,c
  3298  001984  0100               	movlb	0	; () banked
  3299  001986  2184               	addwfc	(getTime@time+1)& (0+255),w,b
  3300  001988  6EDA               	movwf	fsr2h,c
  3301  00198A  0E01               	movlw	1
  3302  00198C  ECA9  F010         	call	_I2C_Master_Read
  3303  001990  6EDF               	movwf	indf2,c
  3304  001992  0100               	movlb	0	; () banked
  3305  001994  2B85               	incf	getTime@i& (0+255),f,b
  3306  001996  D7E9               	goto	l3750
  3307  001998                     l3760:
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;modules.c: 91: }
  3311                           ;modules.c: 92: time[6] = I2C_Master_Read(0);
  3312  001998  0100               	movlb	0	; () banked
  3313  00199A  EE20 F006          	lfsr	2,6
  3314  00199E  5183               	movf	getTime@time& (0+255),w,b
  3315  0019A0  26D9               	addwf	fsr2l,f,c
  3316  0019A2  5184               	movf	(getTime@time+1)& (0+255),w,b
  3317  0019A4  22DA               	addwfc	fsr2h,f,c
  3318  0019A6  0E00               	movlw	0
  3319  0019A8  ECA9  F010         	call	_I2C_Master_Read
  3320  0019AC  6EDF               	movwf	indf2,c
  3321                           
  3322                           ;modules.c: 93: I2C_Master_Stop();
  3323  0019AE  ECD7  F011         	call	_I2C_Master_Stop	;wreg free
  3324                           
  3325                           ;modules.c: 94: (INTCONbits.GIE = 1);
  3326  0019B2  8EF2               	bsf	intcon,7,c	;volatile
  3327  0019B4  0012               	return		;funcret
  3328  0019B6                     __end_of_getTime:
  3329                           	opt stack 0
  3330                           tblptru	equ	0xFF8
  3331                           tblptrh	equ	0xFF7
  3332                           tblptrl	equ	0xFF6
  3333                           tablat	equ	0xFF5
  3334                           prodh	equ	0xFF4
  3335                           prodl	equ	0xFF3
  3336                           intcon	equ	0xFF2
  3337                           intcon3	equ	0xFF0
  3338                           postinc0	equ	0xFEE
  3339                           wreg	equ	0xFE8
  3340                           indf2	equ	0xFDF
  3341                           postinc2	equ	0xFDE
  3342                           postdec2	equ	0xFDD
  3343                           fsr2h	equ	0xFDA
  3344                           fsr2l	equ	0xFD9
  3345                           status	equ	0xFD8
  3346                           
  3347 ;; *************** function _I2C_Master_Write *****************
  3348 ;; Defined at:
  3349 ;;		line 42 in file "I2C.c"
  3350 ;; Parameters:    Size  Location     Type
  3351 ;;  d               2    1[BANK0 ] unsigned int 
  3352 ;; Auto vars:     Size  Location     Type
  3353 ;;		None
  3354 ;; Return value:  Size  Location     Type
  3355 ;;                  1    wreg      void 
  3356 ;; Registers used:
  3357 ;;		wreg, status,2, status,0, cstack
  3358 ;; Tracked objects:
  3359 ;;		On entry : 0/0
  3360 ;;		On exit  : 0/0
  3361 ;;		Unchanged: 0/0
  3362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3363 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3366 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3367 ;;Total ram usage:        2 bytes
  3368 ;; Hardware stack levels used:    1
  3369 ;; Hardware stack levels required when called:    8
  3370 ;; This function calls:
  3371 ;;		_I2C_Master_Wait
  3372 ;; This function is called by:
  3373 ;;		_getTime
  3374 ;; This function uses a non-reentrant model
  3375 ;;
  3376                           
  3377                           	psect	text9
  3378  00239A                     __ptext9:
  3379                           	opt stack 0
  3380  00239A                     _I2C_Master_Write:
  3381                           	opt stack 20
  3382                           
  3383                           ;I2C.c: 43: I2C_Master_Wait();
  3384                           
  3385                           ;incstack = 0
  3386  00239A  EC9E  F011         	call	_I2C_Master_Wait	;wreg free
  3387                           
  3388                           ;I2C.c: 44: SSPBUF = d;
  3389  00239E  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  3390  0023A2  0012               	return		;funcret
  3391  0023A4                     __end_of_I2C_Master_Write:
  3392                           	opt stack 0
  3393                           tblptru	equ	0xFF8
  3394                           tblptrh	equ	0xFF7
  3395                           tblptrl	equ	0xFF6
  3396                           tablat	equ	0xFF5
  3397                           prodh	equ	0xFF4
  3398                           prodl	equ	0xFF3
  3399                           intcon	equ	0xFF2
  3400                           intcon3	equ	0xFF0
  3401                           postinc0	equ	0xFEE
  3402                           wreg	equ	0xFE8
  3403                           indf2	equ	0xFDF
  3404                           postinc2	equ	0xFDE
  3405                           postdec2	equ	0xFDD
  3406                           fsr2h	equ	0xFDA
  3407                           fsr2l	equ	0xFD9
  3408                           status	equ	0xFD8
  3409                           
  3410 ;; *************** function _I2C_Master_Stop *****************
  3411 ;; Defined at:
  3412 ;;		line 37 in file "I2C.c"
  3413 ;; Parameters:    Size  Location     Type
  3414 ;;		None
  3415 ;; Auto vars:     Size  Location     Type
  3416 ;;		None
  3417 ;; Return value:  Size  Location     Type
  3418 ;;                  1    wreg      void 
  3419 ;; Registers used:
  3420 ;;		wreg, status,2, status,0, cstack
  3421 ;; Tracked objects:
  3422 ;;		On entry : 0/0
  3423 ;;		On exit  : 0/0
  3424 ;;		Unchanged: 0/0
  3425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3430 ;;Total ram usage:        0 bytes
  3431 ;; Hardware stack levels used:    1
  3432 ;; Hardware stack levels required when called:    8
  3433 ;; This function calls:
  3434 ;;		_I2C_Master_Wait
  3435 ;; This function is called by:
  3436 ;;		_getTime
  3437 ;; This function uses a non-reentrant model
  3438 ;;
  3439                           
  3440                           	psect	text10
  3441  0023AE                     __ptext10:
  3442                           	opt stack 0
  3443  0023AE                     _I2C_Master_Stop:
  3444                           	opt stack 20
  3445                           
  3446                           ;I2C.c: 38: I2C_Master_Wait();
  3447                           
  3448                           ;incstack = 0
  3449  0023AE  EC9E  F011         	call	_I2C_Master_Wait	;wreg free
  3450                           
  3451                           ;I2C.c: 39: PEN = 1;
  3452  0023B2  84C5               	bsf	4037,2,c	;volatile
  3453  0023B4  0012               	return		;funcret
  3454  0023B6                     __end_of_I2C_Master_Stop:
  3455                           	opt stack 0
  3456                           tblptru	equ	0xFF8
  3457                           tblptrh	equ	0xFF7
  3458                           tblptrl	equ	0xFF6
  3459                           tablat	equ	0xFF5
  3460                           prodh	equ	0xFF4
  3461                           prodl	equ	0xFF3
  3462                           intcon	equ	0xFF2
  3463                           intcon3	equ	0xFF0
  3464                           postinc0	equ	0xFEE
  3465                           wreg	equ	0xFE8
  3466                           indf2	equ	0xFDF
  3467                           postinc2	equ	0xFDE
  3468                           postdec2	equ	0xFDD
  3469                           fsr2h	equ	0xFDA
  3470                           fsr2l	equ	0xFD9
  3471                           status	equ	0xFD8
  3472                           
  3473 ;; *************** function _I2C_Master_Start *****************
  3474 ;; Defined at:
  3475 ;;		line 27 in file "I2C.c"
  3476 ;; Parameters:    Size  Location     Type
  3477 ;;		None
  3478 ;; Auto vars:     Size  Location     Type
  3479 ;;		None
  3480 ;; Return value:  Size  Location     Type
  3481 ;;                  1    wreg      void 
  3482 ;; Registers used:
  3483 ;;		wreg, status,2, status,0, cstack
  3484 ;; Tracked objects:
  3485 ;;		On entry : 0/0
  3486 ;;		On exit  : 0/0
  3487 ;;		Unchanged: 0/0
  3488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3492 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3493 ;;Total ram usage:        0 bytes
  3494 ;; Hardware stack levels used:    1
  3495 ;; Hardware stack levels required when called:    8
  3496 ;; This function calls:
  3497 ;;		_I2C_Master_Wait
  3498 ;; This function is called by:
  3499 ;;		_getTime
  3500 ;; This function uses a non-reentrant model
  3501 ;;
  3502                           
  3503                           	psect	text11
  3504  0023B6                     __ptext11:
  3505                           	opt stack 0
  3506  0023B6                     _I2C_Master_Start:
  3507                           	opt stack 20
  3508                           
  3509                           ;I2C.c: 28: I2C_Master_Wait();
  3510                           
  3511                           ;incstack = 0
  3512  0023B6  EC9E  F011         	call	_I2C_Master_Wait	;wreg free
  3513                           
  3514                           ;I2C.c: 29: SEN = 1;
  3515  0023BA  80C5               	bsf	4037,0,c	;volatile
  3516  0023BC  0012               	return		;funcret
  3517  0023BE                     __end_of_I2C_Master_Start:
  3518                           	opt stack 0
  3519                           tblptru	equ	0xFF8
  3520                           tblptrh	equ	0xFF7
  3521                           tblptrl	equ	0xFF6
  3522                           tablat	equ	0xFF5
  3523                           prodh	equ	0xFF4
  3524                           prodl	equ	0xFF3
  3525                           intcon	equ	0xFF2
  3526                           intcon3	equ	0xFF0
  3527                           postinc0	equ	0xFEE
  3528                           wreg	equ	0xFE8
  3529                           indf2	equ	0xFDF
  3530                           postinc2	equ	0xFDE
  3531                           postdec2	equ	0xFDD
  3532                           fsr2h	equ	0xFDA
  3533                           fsr2l	equ	0xFD9
  3534                           status	equ	0xFD8
  3535                           
  3536 ;; *************** function _I2C_Master_Read *****************
  3537 ;; Defined at:
  3538 ;;		line 47 in file "I2C.c"
  3539 ;; Parameters:    Size  Location     Type
  3540 ;;  a               1    wreg     unsigned char 
  3541 ;; Auto vars:     Size  Location     Type
  3542 ;;  a               1    1[BANK0 ] unsigned char 
  3543 ;;  temp            1    2[BANK0 ] unsigned char 
  3544 ;; Return value:  Size  Location     Type
  3545 ;;                  1    wreg      unsigned char 
  3546 ;; Registers used:
  3547 ;;		wreg, status,2, status,0, cstack
  3548 ;; Tracked objects:
  3549 ;;		On entry : 0/0
  3550 ;;		On exit  : 0/0
  3551 ;;		Unchanged: 0/0
  3552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3554 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3556 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3557 ;;Total ram usage:        2 bytes
  3558 ;; Hardware stack levels used:    1
  3559 ;; Hardware stack levels required when called:    8
  3560 ;; This function calls:
  3561 ;;		_I2C_Master_Wait
  3562 ;; This function is called by:
  3563 ;;		_getTime
  3564 ;; This function uses a non-reentrant model
  3565 ;;
  3566                           
  3567                           	psect	text12
  3568  002152                     __ptext12:
  3569                           	opt stack 0
  3570  002152                     _I2C_Master_Read:
  3571                           	opt stack 20
  3572                           
  3573                           ;incstack = 0
  3574                           ;I2C_Master_Read@a stored from wreg
  3575  002152  0100               	movlb	0	; () banked
  3576  002154  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  3577                           
  3578                           ;I2C.c: 48: unsigned char temp;
  3579                           ;I2C.c: 49: I2C_Master_Wait();
  3580  002156  EC9E  F011         	call	_I2C_Master_Wait	;wreg free
  3581                           
  3582                           ;I2C.c: 50: RCEN = 1;
  3583  00215A  86C5               	bsf	4037,3,c	;volatile
  3584                           
  3585                           ;I2C.c: 51: I2C_Master_Wait();
  3586  00215C  EC9E  F011         	call	_I2C_Master_Wait	;wreg free
  3587                           
  3588                           ;I2C.c: 52: temp = SSPBUF;
  3589  002160  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  3590                           
  3591                           ;I2C.c: 53: I2C_Master_Wait();
  3592  002164  EC9E  F011         	call	_I2C_Master_Wait	;wreg free
  3593                           
  3594                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
  3595  002168  0100               	movlb	0	; () banked
  3596  00216A  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  3597  00216C  0100               	movlb	0	; () banked
  3598  00216E  A4D8               	btfss	status,2,c
  3599  002170  D002               	goto	u2500
  3600  002172  8AC5               	bsf	4037,5,c	;volatile
  3601  002174  D001               	goto	l3306
  3602  002176                     u2500:
  3603  002176  9AC5               	bcf	4037,5,c	;volatile
  3604  002178                     l3306:
  3605                           
  3606                           ;I2C.c: 55: ACKEN = 1;
  3607  002178  88C5               	bsf	4037,4,c	;volatile
  3608                           
  3609                           ;I2C.c: 56: return temp;
  3610  00217A  0100               	movlb	0	; () banked
  3611  00217C  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  3612  00217E  0012               	return	
  3613  002180                     __end_of_I2C_Master_Read:
  3614                           	opt stack 0
  3615                           tblptru	equ	0xFF8
  3616                           tblptrh	equ	0xFF7
  3617                           tblptrl	equ	0xFF6
  3618                           tablat	equ	0xFF5
  3619                           prodh	equ	0xFF4
  3620                           prodl	equ	0xFF3
  3621                           intcon	equ	0xFF2
  3622                           intcon3	equ	0xFF0
  3623                           postinc0	equ	0xFEE
  3624                           wreg	equ	0xFE8
  3625                           indf2	equ	0xFDF
  3626                           postinc2	equ	0xFDE
  3627                           postdec2	equ	0xFDD
  3628                           fsr2h	equ	0xFDA
  3629                           fsr2l	equ	0xFD9
  3630                           status	equ	0xFD8
  3631                           
  3632 ;; *************** function _I2C_Master_Wait *****************
  3633 ;; Defined at:
  3634 ;;		line 23 in file "I2C.c"
  3635 ;; Parameters:    Size  Location     Type
  3636 ;;		None
  3637 ;; Auto vars:     Size  Location     Type
  3638 ;;		None
  3639 ;; Return value:  Size  Location     Type
  3640 ;;                  1    wreg      void 
  3641 ;; Registers used:
  3642 ;;		wreg, status,2, status,0
  3643 ;; Tracked objects:
  3644 ;;		On entry : 0/0
  3645 ;;		On exit  : 0/0
  3646 ;;		Unchanged: 0/0
  3647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3649 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3650 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3651 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3652 ;;Total ram usage:        1 bytes
  3653 ;; Hardware stack levels used:    1
  3654 ;; Hardware stack levels required when called:    7
  3655 ;; This function calls:
  3656 ;;		Nothing
  3657 ;; This function is called by:
  3658 ;;		_I2C_Master_Start
  3659 ;;		_I2C_Master_Stop
  3660 ;;		_I2C_Master_Write
  3661 ;;		_I2C_Master_Read
  3662 ;; This function uses a non-reentrant model
  3663 ;;
  3664                           
  3665                           	psect	text13
  3666  00233C                     __ptext13:
  3667                           	opt stack 0
  3668  00233C                     _I2C_Master_Wait:
  3669                           	opt stack 20
  3670  00233C                     l374:
  3671  00233C  B4C7               	btfsc	4039,2,c	;volatile
  3672  00233E  D7FE               	goto	l374
  3673  002340  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  3674  002344  0E1F               	movlw	31
  3675  002346  0100               	movlb	0	; () banked
  3676  002348  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  3677  00234A  B4D8               	btfsc	status,2,c
  3678  00234C  0012               	return	
  3679  00234E  D7F6               	goto	l374
  3680  002350                     __end_of_I2C_Master_Wait:
  3681                           	opt stack 0
  3682                           tblptru	equ	0xFF8
  3683                           tblptrh	equ	0xFF7
  3684                           tblptrl	equ	0xFF6
  3685                           tablat	equ	0xFF5
  3686                           prodh	equ	0xFF4
  3687                           prodl	equ	0xFF3
  3688                           intcon	equ	0xFF2
  3689                           intcon3	equ	0xFF0
  3690                           postinc0	equ	0xFEE
  3691                           wreg	equ	0xFE8
  3692                           indf2	equ	0xFDF
  3693                           postinc2	equ	0xFDE
  3694                           postdec2	equ	0xFDD
  3695                           fsr2h	equ	0xFDA
  3696                           fsr2l	equ	0xFD9
  3697                           status	equ	0xFD8
  3698                           
  3699 ;; *************** function _initialize *****************
  3700 ;; Defined at:
  3701 ;;		line 23 in file "main.c"
  3702 ;; Parameters:    Size  Location     Type
  3703 ;;		None
  3704 ;; Auto vars:     Size  Location     Type
  3705 ;;		None
  3706 ;; Return value:  Size  Location     Type
  3707 ;;                  1    wreg      void 
  3708 ;; Registers used:
  3709 ;;		wreg, status,2, status,0, cstack
  3710 ;; Tracked objects:
  3711 ;;		On entry : 0/0
  3712 ;;		On exit  : 0/0
  3713 ;;		Unchanged: 0/0
  3714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3716 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3718 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3719 ;;Total ram usage:        0 bytes
  3720 ;; Hardware stack levels used:    1
  3721 ;; Hardware stack levels required when called:   10
  3722 ;; This function calls:
  3723 ;;		_I2C_Master_Init
  3724 ;;		_initLCD
  3725 ;;		_initLatest
  3726 ;;		_lcdInst
  3727 ;; This function is called by:
  3728 ;;		_main
  3729 ;; This function uses a non-reentrant model
  3730 ;;
  3731                           
  3732                           	psect	text14
  3733  001E8C                     __ptext14:
  3734                           	opt stack 0
  3735  001E8C                     _initialize:
  3736                           	opt stack 20
  3737                           
  3738                           ;main.c: 24: TRISA = 0xFF;
  3739                           
  3740                           ; BSR set to: 0
  3741                           ;incstack = 0
  3742  001E8C  6892               	setf	3986,c	;volatile
  3743                           
  3744                           ;main.c: 25: TRISB = 0xFF;
  3745  001E8E  6893               	setf	3987,c	;volatile
  3746                           
  3747                           ;main.c: 26: TRISC = 0x00;
  3748  001E90  0E00               	movlw	0
  3749  001E92  6E94               	movwf	3988,c	;volatile
  3750                           
  3751                           ;main.c: 27: TRISD = 0x00;
  3752  001E94  0E00               	movlw	0
  3753  001E96  6E95               	movwf	3989,c	;volatile
  3754                           
  3755                           ;main.c: 28: TRISE = 0x0F;
  3756  001E98  0E0F               	movlw	15
  3757  001E9A  6E96               	movwf	3990,c	;volatile
  3758                           
  3759                           ;main.c: 30: initLCD();
  3760  001E9C  EC12  F010         	call	_initLCD	;wreg free
  3761                           
  3762                           ;main.c: 32: LATA = 0x00;
  3763  001EA0  0E00               	movlw	0
  3764  001EA2  6E89               	movwf	3977,c	;volatile
  3765                           
  3766                           ;main.c: 33: LATB = 0x00;
  3767  001EA4  0E00               	movlw	0
  3768  001EA6  6E8A               	movwf	3978,c	;volatile
  3769                           
  3770                           ;main.c: 34: LATC = 0x00;
  3771  001EA8  0E00               	movlw	0
  3772  001EAA  6E8B               	movwf	3979,c	;volatile
  3773                           
  3774                           ;main.c: 35: LATD = 0x00;
  3775  001EAC  0E00               	movlw	0
  3776  001EAE  6E8C               	movwf	3980,c	;volatile
  3777                           
  3778                           ;main.c: 36: LATE = 0x00;
  3779  001EB0  0E00               	movlw	0
  3780  001EB2  6E8D               	movwf	3981,c	;volatile
  3781                           
  3782                           ;main.c: 38: ADCON0 = 0x00;
  3783  001EB4  0E00               	movlw	0
  3784  001EB6  6EC2               	movwf	4034,c	;volatile
  3785                           
  3786                           ;main.c: 39: ADCON1 = 0x09;
  3787  001EB8  0E09               	movlw	9
  3788  001EBA  6EC1               	movwf	4033,c	;volatile
  3789                           
  3790                           ;main.c: 40: CVRCON = 0x00;
  3791  001EBC  0E00               	movlw	0
  3792  001EBE  6EB5               	movwf	4021,c	;volatile
  3793                           
  3794                           ;main.c: 41: ADFM = 1;
  3795  001EC0  8EC0               	bsf	4032,7,c	;volatile
  3796                           
  3797                           ;main.c: 43: lcdInst(0x01);;
  3798  001EC2  0E01               	movlw	1
  3799  001EC4  ECB9  F011         	call	_lcdInst
  3800                           
  3801                           ;main.c: 45: I2C_Master_Init(10000);
  3802  001EC8  0E10               	movlw	16
  3803  001ECA  0100               	movlb	0	; () banked
  3804  001ECC  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3805  001ECE  0E27               	movlw	39
  3806  001ED0  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3807  001ED2  0E00               	movlw	0
  3808  001ED4  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3809  001ED6  0E00               	movlw	0
  3810  001ED8  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3811  001EDA  EC16  F00F         	call	_I2C_Master_Init	;wreg free
  3812                           
  3813                           ;main.c: 48: initLatest();
  3814  001EDE  EC4A  F011         	call	_initLatest	;wreg free
  3815                           
  3816                           ;main.c: 49: INTEDG2 = 0;
  3817  001EE2  98F1               	bcf	intcon2,4,c	;volatile
  3818  001EE4  0012               	return		;funcret
  3819  001EE6                     __end_of_initialize:
  3820                           	opt stack 0
  3821                           tblptru	equ	0xFF8
  3822                           tblptrh	equ	0xFF7
  3823                           tblptrl	equ	0xFF6
  3824                           tablat	equ	0xFF5
  3825                           prodh	equ	0xFF4
  3826                           prodl	equ	0xFF3
  3827                           intcon	equ	0xFF2
  3828                           intcon2	equ	0xFF1
  3829                           intcon3	equ	0xFF0
  3830                           postinc0	equ	0xFEE
  3831                           wreg	equ	0xFE8
  3832                           indf2	equ	0xFDF
  3833                           postinc2	equ	0xFDE
  3834                           postdec2	equ	0xFDD
  3835                           fsr2h	equ	0xFDA
  3836                           fsr2l	equ	0xFD9
  3837                           status	equ	0xFD8
  3838                           
  3839 ;; *************** function _initLatest *****************
  3840 ;; Defined at:
  3841 ;;		line 9 in file "eeprom.c"
  3842 ;; Parameters:    Size  Location     Type
  3843 ;;		None
  3844 ;; Auto vars:     Size  Location     Type
  3845 ;;		None
  3846 ;; Return value:  Size  Location     Type
  3847 ;;                  1    wreg      void 
  3848 ;; Registers used:
  3849 ;;		wreg, status,2, status,0, cstack
  3850 ;; Tracked objects:
  3851 ;;		On entry : 0/0
  3852 ;;		On exit  : 0/0
  3853 ;;		Unchanged: 0/0
  3854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3858 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3859 ;;Total ram usage:        0 bytes
  3860 ;; Hardware stack levels used:    1
  3861 ;; Hardware stack levels required when called:    8
  3862 ;; This function calls:
  3863 ;;		_ReadEE
  3864 ;; This function is called by:
  3865 ;;		_initialize
  3866 ;; This function uses a non-reentrant model
  3867 ;;
  3868                           
  3869                           	psect	text15
  3870  002294                     __ptext15:
  3871                           	opt stack 0
  3872  002294                     _initLatest:
  3873                           	opt stack 21
  3874                           
  3875                           ;eeprom.c: 10: Latest = ReadEE(160);
  3876                           
  3877                           ;incstack = 0
  3878  002294  0E00               	movlw	0
  3879  002296  0100               	movlb	0	; () banked
  3880  002298  6F81               	movwf	(ReadEE@address+1)& (0+255),b
  3881  00229A  0EA0               	movlw	160
  3882  00229C  6F80               	movwf	ReadEE@address& (0+255),b
  3883  00229E  EC87  F011         	call	_ReadEE	;wreg free
  3884  0022A2  0100               	movlb	0	; () banked
  3885  0022A4  6FC4               	movwf	_Latest& (0+255),b
  3886                           
  3887                           ; BSR set to: 0
  3888                           ;eeprom.c: 11: if (Latest > 3) {
  3889  0022A6  0E03               	movlw	3
  3890  0022A8  0100               	movlb	0	; () banked
  3891  0022AA  65C4               	cpfsgt	_Latest& (0+255),b
  3892  0022AC  0012               	return	
  3893                           
  3894                           ; BSR set to: 0
  3895                           ;eeprom.c: 12: Latest = 0;
  3896  0022AE  0E00               	movlw	0
  3897  0022B0  0100               	movlb	0	; () banked
  3898  0022B2  6FC4               	movwf	_Latest& (0+255),b
  3899  0022B4  0012               	return	
  3900  0022B6                     __end_of_initLatest:
  3901                           	opt stack 0
  3902                           tblptru	equ	0xFF8
  3903                           tblptrh	equ	0xFF7
  3904                           tblptrl	equ	0xFF6
  3905                           tablat	equ	0xFF5
  3906                           prodh	equ	0xFF4
  3907                           prodl	equ	0xFF3
  3908                           intcon	equ	0xFF2
  3909                           intcon2	equ	0xFF1
  3910                           intcon3	equ	0xFF0
  3911                           postinc0	equ	0xFEE
  3912                           wreg	equ	0xFE8
  3913                           indf2	equ	0xFDF
  3914                           postinc2	equ	0xFDE
  3915                           postdec2	equ	0xFDD
  3916                           fsr2h	equ	0xFDA
  3917                           fsr2l	equ	0xFD9
  3918                           status	equ	0xFD8
  3919                           
  3920 ;; *************** function _ReadEE *****************
  3921 ;; Defined at:
  3922 ;;		line 16 in file "eeprom.c"
  3923 ;; Parameters:    Size  Location     Type
  3924 ;;  address         2    0[BANK0 ] unsigned int 
  3925 ;; Auto vars:     Size  Location     Type
  3926 ;;		None
  3927 ;; Return value:  Size  Location     Type
  3928 ;;                  1    wreg      unsigned char 
  3929 ;; Registers used:
  3930 ;;		wreg, status,2
  3931 ;; Tracked objects:
  3932 ;;		On entry : 0/0
  3933 ;;		On exit  : 0/0
  3934 ;;		Unchanged: 0/0
  3935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3936 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3939 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3940 ;;Total ram usage:        2 bytes
  3941 ;; Hardware stack levels used:    1
  3942 ;; Hardware stack levels required when called:    7
  3943 ;; This function calls:
  3944 ;;		Nothing
  3945 ;; This function is called by:
  3946 ;;		_initLatest
  3947 ;; This function uses a non-reentrant model
  3948 ;;
  3949                           
  3950                           	psect	text16
  3951  00230E                     __ptext16:
  3952                           	opt stack 0
  3953  00230E                     _ReadEE:
  3954                           	opt stack 21
  3955                           
  3956                           ;eeprom.c: 19: EEADRH = (unsigned char) (address >> 8);
  3957                           
  3958                           ; BSR set to: 0
  3959                           ;incstack = 0
  3960  00230E  0100               	movlb	0	; () banked
  3961  002310  5181               	movf	(ReadEE@address+1)& (0+255),w,b
  3962  002312  6EAA               	movwf	4010,c	;volatile
  3963                           
  3964                           ; BSR set to: 0
  3965                           ;eeprom.c: 20: EEADR = (unsigned char) address;
  3966  002314  C080  FFA9         	movff	ReadEE@address,4009	;volatile
  3967                           
  3968                           ; BSR set to: 0
  3969                           ;eeprom.c: 22: EECON1bits.EEPGD = 0;
  3970  002318  9EA6               	bcf	4006,7,c	;volatile
  3971                           
  3972                           ; BSR set to: 0
  3973                           ;eeprom.c: 23: EECON1bits.CFGS = 0;
  3974  00231A  9CA6               	bcf	4006,6,c	;volatile
  3975                           
  3976                           ; BSR set to: 0
  3977                           ;eeprom.c: 24: EECON1bits.RD = 1;
  3978  00231C  80A6               	bsf	4006,0,c	;volatile
  3979  00231E                     l422:
  3980  00231E  B0A6               	btfsc	4006,0,c	;volatile
  3981  002320  D7FE               	goto	l422
  3982                           
  3983                           ;eeprom.c: 30: return EEDATA;
  3984  002322  50A8               	movf	4008,w,c	;volatile
  3985  002324  0012               	return	
  3986  002326                     __end_of_ReadEE:
  3987                           	opt stack 0
  3988                           tblptru	equ	0xFF8
  3989                           tblptrh	equ	0xFF7
  3990                           tblptrl	equ	0xFF6
  3991                           tablat	equ	0xFF5
  3992                           prodh	equ	0xFF4
  3993                           prodl	equ	0xFF3
  3994                           intcon	equ	0xFF2
  3995                           intcon2	equ	0xFF1
  3996                           intcon3	equ	0xFF0
  3997                           postinc0	equ	0xFEE
  3998                           wreg	equ	0xFE8
  3999                           indf2	equ	0xFDF
  4000                           postinc2	equ	0xFDE
  4001                           postdec2	equ	0xFDD
  4002                           fsr2h	equ	0xFDA
  4003                           fsr2l	equ	0xFD9
  4004                           status	equ	0xFD8
  4005                           
  4006 ;; *************** function _initLCD *****************
  4007 ;; Defined at:
  4008 ;;		line 9 in file "lcd.c"
  4009 ;; Parameters:    Size  Location     Type
  4010 ;;		None
  4011 ;; Auto vars:     Size  Location     Type
  4012 ;;		None
  4013 ;; Return value:  Size  Location     Type
  4014 ;;                  1    wreg      void 
  4015 ;; Registers used:
  4016 ;;		wreg, status,2, status,0, cstack
  4017 ;; Tracked objects:
  4018 ;;		On entry : 0/0
  4019 ;;		On exit  : 0/0
  4020 ;;		Unchanged: 0/0
  4021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4024 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4025 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4026 ;;Total ram usage:        1 bytes
  4027 ;; Hardware stack levels used:    1
  4028 ;; Hardware stack levels required when called:    9
  4029 ;; This function calls:
  4030 ;;		_lcdInst
  4031 ;; This function is called by:
  4032 ;;		_initialize
  4033 ;; This function uses a non-reentrant model
  4034 ;;
  4035                           
  4036                           	psect	text17
  4037  002024                     __ptext17:
  4038                           	opt stack 0
  4039  002024                     _initLCD:
  4040                           	opt stack 20
  4041                           
  4042                           ;lcd.c: 10: _delay((unsigned long)((15)*(8000000/4000.0)));
  4043                           
  4044                           ;incstack = 0
  4045  002024  0E27               	movlw	39
  4046  002026  0100               	movlb	0	; () banked
  4047  002028  6F83               	movwf	??_initLCD& (0+255),b
  4048  00202A  0EF5               	movlw	245
  4049  00202C                     u3457:
  4050  00202C  2EE8               	decfsz	wreg,f,c
  4051  00202E  D7FE               	bra	u3457
  4052  002030  2F83               	decfsz	??_initLCD& (0+255),f,b
  4053  002032  D7FC               	bra	u3457
  4054                           
  4055                           ;lcd.c: 11: lcdInst(0b00110011);
  4056  002034  0E33               	movlw	51
  4057  002036  ECB9  F011         	call	_lcdInst
  4058                           
  4059                           ;lcd.c: 12: lcdInst(0b00110010);
  4060  00203A  0E32               	movlw	50
  4061  00203C  ECB9  F011         	call	_lcdInst
  4062                           
  4063                           ;lcd.c: 13: lcdInst(0b00101000);
  4064  002040  0E28               	movlw	40
  4065  002042  ECB9  F011         	call	_lcdInst
  4066                           
  4067                           ;lcd.c: 14: lcdInst(0b00001111);
  4068  002046  0E0F               	movlw	15
  4069  002048  ECB9  F011         	call	_lcdInst
  4070                           
  4071                           ;lcd.c: 15: lcdInst(0b00000110);
  4072  00204C  0E06               	movlw	6
  4073  00204E  ECB9  F011         	call	_lcdInst
  4074                           
  4075                           ;lcd.c: 16: lcdInst(0b00000001);
  4076  002052  0E01               	movlw	1
  4077  002054  ECB9  F011         	call	_lcdInst
  4078                           
  4079                           ;lcd.c: 17: _delay((unsigned long)((15)*(8000000/4000.0)));
  4080  002058  0E27               	movlw	39
  4081  00205A  0100               	movlb	0	; () banked
  4082  00205C  6F83               	movwf	??_initLCD& (0+255),b
  4083  00205E  0EF5               	movlw	245
  4084  002060                     u3467:
  4085  002060  2EE8               	decfsz	wreg,f,c
  4086  002062  D7FE               	bra	u3467
  4087  002064  2F83               	decfsz	??_initLCD& (0+255),f,b
  4088  002066  D7FC               	bra	u3467
  4089  002068  0012               	return		;funcret
  4090  00206A                     __end_of_initLCD:
  4091                           	opt stack 0
  4092                           tblptru	equ	0xFF8
  4093                           tblptrh	equ	0xFF7
  4094                           tblptrl	equ	0xFF6
  4095                           tablat	equ	0xFF5
  4096                           prodh	equ	0xFF4
  4097                           prodl	equ	0xFF3
  4098                           intcon	equ	0xFF2
  4099                           intcon2	equ	0xFF1
  4100                           intcon3	equ	0xFF0
  4101                           postinc0	equ	0xFEE
  4102                           wreg	equ	0xFE8
  4103                           indf2	equ	0xFDF
  4104                           postinc2	equ	0xFDE
  4105                           postdec2	equ	0xFDD
  4106                           fsr2h	equ	0xFDA
  4107                           fsr2l	equ	0xFD9
  4108                           status	equ	0xFD8
  4109                           
  4110 ;; *************** function _lcdInst *****************
  4111 ;; Defined at:
  4112 ;;		line 20 in file "lcd.c"
  4113 ;; Parameters:    Size  Location     Type
  4114 ;;  data            1    wreg     unsigned char 
  4115 ;; Auto vars:     Size  Location     Type
  4116 ;;  data            1    2[BANK0 ] unsigned char 
  4117 ;; Return value:  Size  Location     Type
  4118 ;;                  1    wreg      void 
  4119 ;; Registers used:
  4120 ;;		wreg, status,2, status,0, cstack
  4121 ;; Tracked objects:
  4122 ;;		On entry : 0/0
  4123 ;;		On exit  : 0/0
  4124 ;;		Unchanged: 0/0
  4125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4127 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4129 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4130 ;;Total ram usage:        1 bytes
  4131 ;; Hardware stack levels used:    1
  4132 ;; Hardware stack levels required when called:    8
  4133 ;; This function calls:
  4134 ;;		_lcdNibble
  4135 ;; This function is called by:
  4136 ;;		_initialize
  4137 ;;		_showRTC
  4138 ;;		_main
  4139 ;;		_initLCD
  4140 ;;		_mainloop
  4141 ;; This function uses a non-reentrant model
  4142 ;;
  4143                           
  4144                           	psect	text18
  4145  002372                     __ptext18:
  4146                           	opt stack 0
  4147  002372                     _lcdInst:
  4148                           	opt stack 21
  4149                           
  4150                           ;incstack = 0
  4151                           ;lcdInst@data stored from wreg
  4152  002372  0100               	movlb	0	; () banked
  4153  002374  6F82               	movwf	lcdInst@data& (0+255),b
  4154                           
  4155                           ;lcd.c: 21: LATDbits.LATD2 = 0;
  4156  002376  948C               	bcf	3980,2,c	;volatile
  4157                           
  4158                           ;lcd.c: 22: lcdNibble(data);
  4159  002378  0100               	movlb	0	; () banked
  4160  00237A  5182               	movf	lcdInst@data& (0+255),w,b
  4161  00237C  ECB1  F00E         	call	_lcdNibble
  4162  002380  0012               	return		;funcret
  4163  002382                     __end_of_lcdInst:
  4164                           	opt stack 0
  4165                           tblptru	equ	0xFF8
  4166                           tblptrh	equ	0xFF7
  4167                           tblptrl	equ	0xFF6
  4168                           tablat	equ	0xFF5
  4169                           prodh	equ	0xFF4
  4170                           prodl	equ	0xFF3
  4171                           intcon	equ	0xFF2
  4172                           intcon2	equ	0xFF1
  4173                           intcon3	equ	0xFF0
  4174                           postinc0	equ	0xFEE
  4175                           wreg	equ	0xFE8
  4176                           indf2	equ	0xFDF
  4177                           postinc2	equ	0xFDE
  4178                           postdec2	equ	0xFDD
  4179                           fsr2h	equ	0xFDA
  4180                           fsr2l	equ	0xFD9
  4181                           status	equ	0xFD8
  4182                           
  4183 ;; *************** function _lcdNibble *****************
  4184 ;; Defined at:
  4185 ;;		line 30 in file "lcd.c"
  4186 ;; Parameters:    Size  Location     Type
  4187 ;;  data            1    wreg     unsigned char 
  4188 ;; Auto vars:     Size  Location     Type
  4189 ;;  data            1    1[BANK0 ] unsigned char 
  4190 ;;  temp            1    0[BANK0 ] unsigned char 
  4191 ;; Return value:  Size  Location     Type
  4192 ;;                  1    wreg      void 
  4193 ;; Registers used:
  4194 ;;		wreg, status,2, status,0
  4195 ;; Tracked objects:
  4196 ;;		On entry : 0/0
  4197 ;;		On exit  : 0/0
  4198 ;;		Unchanged: 0/0
  4199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4201 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4203 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4204 ;;Total ram usage:        2 bytes
  4205 ;; Hardware stack levels used:    1
  4206 ;; Hardware stack levels required when called:    7
  4207 ;; This function calls:
  4208 ;;		Nothing
  4209 ;; This function is called by:
  4210 ;;		_lcdInst
  4211 ;;		_putch
  4212 ;; This function uses a non-reentrant model
  4213 ;;
  4214                           
  4215                           	psect	text19
  4216  001D62                     __ptext19:
  4217                           	opt stack 0
  4218  001D62                     _lcdNibble:
  4219                           	opt stack 20
  4220                           
  4221                           ;incstack = 0
  4222                           ;lcdNibble@data stored from wreg
  4223  001D62  0100               	movlb	0	; () banked
  4224  001D64  6F81               	movwf	lcdNibble@data& (0+255),b
  4225                           
  4226                           ;lcd.c: 32: char temp = data & 0xF0;
  4227  001D66  0100               	movlb	0	; () banked
  4228  001D68  5181               	movf	lcdNibble@data& (0+255),w,b
  4229  001D6A  0BF0               	andlw	240
  4230  001D6C  0100               	movlb	0	; () banked
  4231  001D6E  6F80               	movwf	lcdNibble@temp& (0+255),b
  4232                           
  4233                           ;lcd.c: 33: LATD = LATD & 0x0F;
  4234  001D70  508C               	movf	3980,w,c	;volatile
  4235  001D72  0B0F               	andlw	15
  4236  001D74  6E8C               	movwf	3980,c	;volatile
  4237                           
  4238                           ;lcd.c: 34: LATD = temp | LATD;
  4239  001D76  0100               	movlb	0	; () banked
  4240  001D78  5180               	movf	lcdNibble@temp& (0+255),w,b
  4241  001D7A  108C               	iorwf	3980,w,c	;volatile
  4242  001D7C  6E8C               	movwf	3980,c	;volatile
  4243                           
  4244                           ; BSR set to: 0
  4245                           ;lcd.c: 36: LATDbits.LATD3 = 0;
  4246  001D7E  968C               	bcf	3980,3,c	;volatile
  4247                           
  4248                           ; BSR set to: 0
  4249                           ;lcd.c: 37: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4250  001D80  0E10               	movlw	16
  4251  001D82                     u3477:
  4252  001D82  2EE8               	decfsz	wreg,f,c
  4253  001D84  D7FE               	bra	u3477
  4254  001D86  D000               	nop2	
  4255                           
  4256                           ;lcd.c: 38: LATDbits.LATD3 = 1;
  4257  001D88  868C               	bsf	3980,3,c	;volatile
  4258                           
  4259                           ;lcd.c: 39: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4260  001D8A  0E10               	movlw	16
  4261  001D8C                     u3487:
  4262  001D8C  2EE8               	decfsz	wreg,f,c
  4263  001D8E  D7FE               	bra	u3487
  4264  001D90  D000               	nop2	
  4265                           
  4266                           ;lcd.c: 41: data = data << 4;
  4267  001D92  0100               	movlb	0	; () banked
  4268  001D94  3981               	swapf	lcdNibble@data& (0+255),w,b
  4269  001D96  0BF0               	andlw	240
  4270  001D98  0100               	movlb	0	; () banked
  4271  001D9A  6F81               	movwf	lcdNibble@data& (0+255),b
  4272                           
  4273                           ;lcd.c: 43: temp = data & 0xF0;
  4274  001D9C  0100               	movlb	0	; () banked
  4275  001D9E  5181               	movf	lcdNibble@data& (0+255),w,b
  4276  001DA0  0BF0               	andlw	240
  4277  001DA2  0100               	movlb	0	; () banked
  4278  001DA4  6F80               	movwf	lcdNibble@temp& (0+255),b
  4279                           
  4280                           ;lcd.c: 44: LATD = LATD & 0x0F;
  4281  001DA6  508C               	movf	3980,w,c	;volatile
  4282  001DA8  0B0F               	andlw	15
  4283  001DAA  6E8C               	movwf	3980,c	;volatile
  4284                           
  4285                           ;lcd.c: 45: LATD = temp | LATD;
  4286  001DAC  0100               	movlb	0	; () banked
  4287  001DAE  5180               	movf	lcdNibble@temp& (0+255),w,b
  4288  001DB0  108C               	iorwf	3980,w,c	;volatile
  4289  001DB2  6E8C               	movwf	3980,c	;volatile
  4290                           
  4291                           ; BSR set to: 0
  4292                           ;lcd.c: 47: LATDbits.LATD3 = 0;
  4293  001DB4  968C               	bcf	3980,3,c	;volatile
  4294                           
  4295                           ; BSR set to: 0
  4296                           ;lcd.c: 48: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4297  001DB6  0E10               	movlw	16
  4298  001DB8                     u3497:
  4299  001DB8  2EE8               	decfsz	wreg,f,c
  4300  001DBA  D7FE               	bra	u3497
  4301  001DBC  D000               	nop2	
  4302                           
  4303                           ;lcd.c: 49: LATDbits.LATD3 = 1;
  4304  001DBE  868C               	bsf	3980,3,c	;volatile
  4305                           
  4306                           ;lcd.c: 50: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4307  001DC0  0E10               	movlw	16
  4308  001DC2                     u3507:
  4309  001DC2  2EE8               	decfsz	wreg,f,c
  4310  001DC4  D7FE               	bra	u3507
  4311  001DC6  D000               	nop2	
  4312  001DC8  0012               	return		;funcret
  4313  001DCA                     __end_of_lcdNibble:
  4314                           	opt stack 0
  4315                           tblptru	equ	0xFF8
  4316                           tblptrh	equ	0xFF7
  4317                           tblptrl	equ	0xFF6
  4318                           tablat	equ	0xFF5
  4319                           prodh	equ	0xFF4
  4320                           prodl	equ	0xFF3
  4321                           intcon	equ	0xFF2
  4322                           intcon2	equ	0xFF1
  4323                           intcon3	equ	0xFF0
  4324                           postinc0	equ	0xFEE
  4325                           wreg	equ	0xFE8
  4326                           indf2	equ	0xFDF
  4327                           postinc2	equ	0xFDE
  4328                           postdec2	equ	0xFDD
  4329                           fsr2h	equ	0xFDA
  4330                           fsr2l	equ	0xFD9
  4331                           status	equ	0xFD8
  4332                           
  4333 ;; *************** function _I2C_Master_Init *****************
  4334 ;; Defined at:
  4335 ;;		line 13 in file "I2C.c"
  4336 ;; Parameters:    Size  Location     Type
  4337 ;;  c               4   13[BANK0 ] const unsigned long 
  4338 ;; Auto vars:     Size  Location     Type
  4339 ;;		None
  4340 ;; Return value:  Size  Location     Type
  4341 ;;                  1    wreg      void 
  4342 ;; Registers used:
  4343 ;;		wreg, status,2, status,0, cstack
  4344 ;; Tracked objects:
  4345 ;;		On entry : 0/0
  4346 ;;		On exit  : 0/0
  4347 ;;		Unchanged: 0/0
  4348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4349 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4351 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4352 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4353 ;;Total ram usage:        8 bytes
  4354 ;; Hardware stack levels used:    1
  4355 ;; Hardware stack levels required when called:    8
  4356 ;; This function calls:
  4357 ;;		___lldiv
  4358 ;; This function is called by:
  4359 ;;		_initialize
  4360 ;; This function uses a non-reentrant model
  4361 ;;
  4362                           
  4363                           	psect	text20
  4364  001E2C                     __ptext20:
  4365                           	opt stack 0
  4366  001E2C                     _I2C_Master_Init:
  4367                           	opt stack 21
  4368                           
  4369                           ;I2C.c: 15: SSPSTAT = 0b00000000;
  4370                           
  4371                           ;incstack = 0
  4372  001E2C  0E00               	movlw	0
  4373  001E2E  6EC7               	movwf	4039,c	;volatile
  4374                           
  4375                           ;I2C.c: 16: SSPCON1 = 0b00101000;
  4376  001E30  0E28               	movlw	40
  4377  001E32  6EC6               	movwf	4038,c	;volatile
  4378                           
  4379                           ;I2C.c: 17: SSPCON2 = 0b00000000;
  4380  001E34  0E00               	movlw	0
  4381  001E36  6EC5               	movwf	4037,c	;volatile
  4382                           
  4383                           ;I2C.c: 18: SSPADD = (8000000 / (4 * c)) - 1;
  4384  001E38  0E00               	movlw	0
  4385  001E3A  0100               	movlb	0	; () banked
  4386  001E3C  6F80               	movwf	___lldiv@dividend& (0+255),b
  4387  001E3E  0E12               	movlw	18
  4388  001E40  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  4389  001E42  0E7A               	movlw	122
  4390  001E44  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  4391  001E46  0E00               	movlw	0
  4392  001E48  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  4393  001E4A  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  4394  001E4E  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  4395  001E52  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  4396  001E56  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  4397  001E5A  0E02               	movlw	2
  4398  001E5C                     u2725:
  4399  001E5C  90D8               	bcf	status,0,c
  4400  001E5E  0100               	movlb	0	; () banked
  4401  001E60  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  4402  001E62  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  4403  001E64  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  4404  001E66  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  4405  001E68  2EE8               	decfsz	wreg,f,c
  4406  001E6A  D7F8               	goto	u2725
  4407  001E6C  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  4408  001E70  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  4409  001E74  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  4410  001E78  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  4411  001E7C  EC0D  F00B         	call	___lldiv	;wreg free
  4412  001E80  0100               	movlb	0	; () banked
  4413  001E82  0580               	decf	?___lldiv& (0+255),w,b
  4414  001E84  6EC8               	movwf	4040,c	;volatile
  4415                           
  4416                           ; BSR set to: 0
  4417                           ;I2C.c: 19: TRISC3 = 1;
  4418  001E86  8694               	bsf	3988,3,c	;volatile
  4419                           
  4420                           ; BSR set to: 0
  4421                           ;I2C.c: 20: TRISC4 = 1;
  4422  001E88  8894               	bsf	3988,4,c	;volatile
  4423                           
  4424                           ; BSR set to: 0
  4425  001E8A  0012               	return		;funcret
  4426  001E8C                     __end_of_I2C_Master_Init:
  4427                           	opt stack 0
  4428                           tblptru	equ	0xFF8
  4429                           tblptrh	equ	0xFF7
  4430                           tblptrl	equ	0xFF6
  4431                           tablat	equ	0xFF5
  4432                           prodh	equ	0xFF4
  4433                           prodl	equ	0xFF3
  4434                           intcon	equ	0xFF2
  4435                           intcon2	equ	0xFF1
  4436                           intcon3	equ	0xFF0
  4437                           postinc0	equ	0xFEE
  4438                           wreg	equ	0xFE8
  4439                           indf2	equ	0xFDF
  4440                           postinc2	equ	0xFDE
  4441                           postdec2	equ	0xFDD
  4442                           fsr2h	equ	0xFDA
  4443                           fsr2l	equ	0xFD9
  4444                           status	equ	0xFD8
  4445                           
  4446 ;; *************** function ___lldiv *****************
  4447 ;; Defined at:
  4448 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  4449 ;; Parameters:    Size  Location     Type
  4450 ;;  dividend        4    0[BANK0 ] unsigned long 
  4451 ;;  divisor         4    4[BANK0 ] unsigned long 
  4452 ;; Auto vars:     Size  Location     Type
  4453 ;;  quotient        4    8[BANK0 ] unsigned long 
  4454 ;;  counter         1   12[BANK0 ] unsigned char 
  4455 ;; Return value:  Size  Location     Type
  4456 ;;                  4    0[BANK0 ] unsigned long 
  4457 ;; Registers used:
  4458 ;;		wreg, status,2, status,0
  4459 ;; Tracked objects:
  4460 ;;		On entry : 0/0
  4461 ;;		On exit  : 0/0
  4462 ;;		Unchanged: 0/0
  4463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4464 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4465 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4467 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4468 ;;Total ram usage:       13 bytes
  4469 ;; Hardware stack levels used:    1
  4470 ;; Hardware stack levels required when called:    7
  4471 ;; This function calls:
  4472 ;;		Nothing
  4473 ;; This function is called by:
  4474 ;;		_I2C_Master_Init
  4475 ;; This function uses a non-reentrant model
  4476 ;;
  4477                           
  4478                           	psect	text21
  4479  00161A                     __ptext21:
  4480                           	opt stack 0
  4481  00161A                     ___lldiv:
  4482                           	opt stack 21
  4483                           
  4484                           ; BSR set to: 0
  4485                           ;incstack = 0
  4486  00161A  0E00               	movlw	0
  4487  00161C  0100               	movlb	0	; () banked
  4488  00161E  6F88               	movwf	___lldiv@quotient& (0+255),b
  4489  001620  0E00               	movlw	0
  4490  001622  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  4491  001624  0E00               	movlw	0
  4492  001626  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  4493  001628  0E00               	movlw	0
  4494  00162A  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  4495                           
  4496                           ; BSR set to: 0
  4497  00162C  0100               	movlb	0	; () banked
  4498  00162E  5184               	movf	___lldiv@divisor& (0+255),w,b
  4499  001630  0100               	movlb	0	; () banked
  4500  001632  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  4501  001634  0100               	movlb	0	; () banked
  4502  001636  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  4503  001638  0100               	movlb	0	; () banked
  4504  00163A  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  4505  00163C  B4D8               	btfsc	status,2,c
  4506  00163E  D042               	goto	l890
  4507                           
  4508                           ; BSR set to: 0
  4509  001640  0E01               	movlw	1
  4510  001642  0100               	movlb	0	; () banked
  4511  001644  6F8C               	movwf	___lldiv@counter& (0+255),b
  4512  001646  D008               	goto	l3396
  4513  001648                     l3394:
  4514                           
  4515                           ; BSR set to: 0
  4516  001648  0100               	movlb	0	; () banked
  4517  00164A  90D8               	bcf	status,0,c
  4518  00164C  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  4519  00164E  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  4520  001650  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  4521  001652  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  4522  001654  0100               	movlb	0	; () banked
  4523  001656  2B8C               	incf	___lldiv@counter& (0+255),f,b
  4524  001658                     l3396:
  4525                           
  4526                           ; BSR set to: 0
  4527  001658  0100               	movlb	0	; () banked
  4528  00165A  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  4529  00165C  D7F5               	goto	l3394
  4530  00165E                     l3398:
  4531                           
  4532                           ; BSR set to: 0
  4533  00165E  0100               	movlb	0	; () banked
  4534  001660  90D8               	bcf	status,0,c
  4535  001662  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  4536  001664  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  4537  001666  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  4538  001668  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  4539                           
  4540                           ; BSR set to: 0
  4541  00166A  0100               	movlb	0	; () banked
  4542  00166C  5184               	movf	___lldiv@divisor& (0+255),w,b
  4543  00166E  0100               	movlb	0	; () banked
  4544  001670  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  4545  001672  0100               	movlb	0	; () banked
  4546  001674  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4547  001676  0100               	movlb	0	; () banked
  4548  001678  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  4549  00167A  0100               	movlb	0	; () banked
  4550  00167C  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4551  00167E  0100               	movlb	0	; () banked
  4552  001680  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  4553  001682  0100               	movlb	0	; () banked
  4554  001684  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4555  001686  0100               	movlb	0	; () banked
  4556  001688  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  4557  00168A  A0D8               	btfss	status,0,c
  4558  00168C  D012               	goto	l3406
  4559                           
  4560                           ; BSR set to: 0
  4561  00168E  0100               	movlb	0	; () banked
  4562  001690  5184               	movf	___lldiv@divisor& (0+255),w,b
  4563  001692  0100               	movlb	0	; () banked
  4564  001694  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  4565  001696  0100               	movlb	0	; () banked
  4566  001698  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4567  00169A  0100               	movlb	0	; () banked
  4568  00169C  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  4569  00169E  0100               	movlb	0	; () banked
  4570  0016A0  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4571  0016A2  0100               	movlb	0	; () banked
  4572  0016A4  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  4573  0016A6  0100               	movlb	0	; () banked
  4574  0016A8  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4575  0016AA  0100               	movlb	0	; () banked
  4576  0016AC  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  4577                           
  4578                           ; BSR set to: 0
  4579  0016AE  0100               	movlb	0	; () banked
  4580  0016B0  8188               	bsf	___lldiv@quotient& (0+255),0,b
  4581  0016B2                     l3406:
  4582                           
  4583                           ; BSR set to: 0
  4584  0016B2  0100               	movlb	0	; () banked
  4585  0016B4  90D8               	bcf	status,0,c
  4586  0016B6  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  4587  0016B8  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  4588  0016BA  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  4589  0016BC  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  4590                           
  4591                           ; BSR set to: 0
  4592  0016BE  0100               	movlb	0	; () banked
  4593  0016C0  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  4594  0016C2  D7CD               	goto	l3398
  4595  0016C4                     l890:
  4596                           
  4597                           ; BSR set to: 0
  4598  0016C4  C088  F080         	movff	___lldiv@quotient,?___lldiv
  4599  0016C8  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  4600  0016CC  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  4601  0016D0  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  4602                           
  4603                           ; BSR set to: 0
  4604  0016D4  0012               	return		;funcret
  4605  0016D6                     __end_of___lldiv:
  4606                           	opt stack 0
  4607                           tblptru	equ	0xFF8
  4608                           tblptrh	equ	0xFF7
  4609                           tblptrl	equ	0xFF6
  4610                           tablat	equ	0xFF5
  4611                           prodh	equ	0xFF4
  4612                           prodl	equ	0xFF3
  4613                           intcon	equ	0xFF2
  4614                           intcon2	equ	0xFF1
  4615                           intcon3	equ	0xFF0
  4616                           postinc0	equ	0xFEE
  4617                           wreg	equ	0xFE8
  4618                           indf2	equ	0xFDF
  4619                           postinc2	equ	0xFDE
  4620                           postdec2	equ	0xFDD
  4621                           fsr2h	equ	0xFDA
  4622                           fsr2l	equ	0xFD9
  4623                           status	equ	0xFD8
  4624                           
  4625 ;; *************** function _intrpt *****************
  4626 ;; Defined at:
  4627 ;;		line 191 in file "main.c"
  4628 ;; Parameters:    Size  Location     Type
  4629 ;;		None
  4630 ;; Auto vars:     Size  Location     Type
  4631 ;;  port            6  101[COMRAM] int [3]
  4632 ;;  keypress        1  107[COMRAM] unsigned char 
  4633 ;; Return value:  Size  Location     Type
  4634 ;;                  1    wreg      void 
  4635 ;; Registers used:
  4636 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4637 ;; Tracked objects:
  4638 ;;		On entry : 0/0
  4639 ;;		On exit  : 0/0
  4640 ;;		Unchanged: 0/0
  4641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4643 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4644 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4645 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4646 ;;Total ram usage:       23 bytes
  4647 ;; Hardware stack levels used:    1
  4648 ;; Hardware stack levels required when called:    6
  4649 ;; This function calls:
  4650 ;;		_PWMC
  4651 ;;		_PermLog
  4652 ;;		_simulate
  4653 ;;		_stopMoving
  4654 ;;		i2_lcdInst
  4655 ;; This function is called by:
  4656 ;;		Interrupt level 2
  4657 ;; This function uses a non-reentrant model
  4658 ;;
  4659                           
  4660                           	psect	intcode
  4661  000008                     __pintcode:
  4662                           	opt stack 0
  4663  000008                     _intrpt:
  4664                           	opt stack 20
  4665                           
  4666                           ; BSR set to: 0
  4667                           ;incstack = 0
  4668  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4669  00000A  EDFC  F006         	call	int_func,f	;refresh shadow registers
  4670                           tblptru	equ	0xFF8
  4671                           tblptrh	equ	0xFF7
  4672                           tblptrl	equ	0xFF6
  4673                           tablat	equ	0xFF5
  4674                           prodh	equ	0xFF4
  4675                           prodl	equ	0xFF3
  4676                           intcon	equ	0xFF2
  4677                           intcon2	equ	0xFF1
  4678                           intcon3	equ	0xFF0
  4679                           postinc0	equ	0xFEE
  4680                           wreg	equ	0xFE8
  4681                           indf2	equ	0xFDF
  4682                           postinc2	equ	0xFDE
  4683                           postdec2	equ	0xFDD
  4684                           fsr2h	equ	0xFDA
  4685                           fsr2l	equ	0xFD9
  4686                           status	equ	0xFD8
  4687                           
  4688                           	psect	intcode_body
  4689  000DF8                     __pintcode_body:
  4690                           	opt stack 20
  4691  000DF8                     int_func:
  4692                           	opt stack 20
  4693  000DF8  0006               	pop		; remove dummy address from shadow register refresh
  4694  000DFA  CFFA F058          	movff	pclath,??_intrpt+2
  4695  000DFE  CFFB F059          	movff	pclatu,??_intrpt+3
  4696  000E02  CFE9 F05A          	movff	fsr0l,??_intrpt+4
  4697  000E06  CFEA F05B          	movff	fsr0h,??_intrpt+5
  4698  000E0A  CFE1 F05C          	movff	fsr1l,??_intrpt+6
  4699  000E0E  CFE2 F05D          	movff	fsr1h,??_intrpt+7
  4700  000E12  CFD9 F05E          	movff	fsr2l,??_intrpt+8
  4701  000E16  CFDA F05F          	movff	fsr2h,??_intrpt+9
  4702  000E1A  CFF3 F060          	movff	prodl,??_intrpt+10
  4703  000E1E  CFF4 F061          	movff	prodh,??_intrpt+11
  4704  000E22  CFF6 F062          	movff	tblptrl,??_intrpt+12
  4705  000E26  CFF7 F063          	movff	tblptrh,??_intrpt+13
  4706  000E2A  CFF8 F064          	movff	tblptru,??_intrpt+14
  4707  000E2E  CFF5 F065          	movff	tablat,??_intrpt+15
  4708                           
  4709                           ;main.c: 192: (INTCONbits.GIE = 0);
  4710  000E32  9EF2               	bcf	intcon,7,c	;volatile
  4711                           
  4712                           ;main.c: 193: if (INT1IF) {
  4713  000E34  A0F0               	btfss	intcon3,0,c	;volatile
  4714  000E36  D096               	goto	i2l140
  4715                           
  4716                           ;main.c: 194: int port[] = {0, 0, 0};
  4717  000E38  EE20  F0AA         	lfsr	2,intrpt@F3118
  4718  000E3C  EE10  F066         	lfsr	1,intrpt@port
  4719  000E40  0E05               	movlw	5
  4720  000E42                     i2u336_41:
  4721  000E42  CFDB FFE3          	movff	plusw2,plusw1
  4722  000E46  06E8               	decf	wreg,f,c
  4723  000E48  E2FC               	bc	i2u336_41
  4724                           
  4725                           ;main.c: 195: unsigned char keypress = (PORTB & 0xF0) >> 4;
  4726  000E4A  3881               	swapf	3969,w,c	;volatile
  4727  000E4C  0B0F               	andlw	15
  4728  000E4E  0B0F               	andlw	15
  4729  000E50  6E6C               	movwf	intrpt@keypress,c
  4730                           
  4731                           ;main.c: 196: INT1IF = 0;
  4732  000E52  90F0               	bcf	intcon3,0,c	;volatile
  4733  000E54                     i2l143:
  4734  000E54  A281               	btfss	3969,1,c	;volatile
  4735  000E56  D077               	goto	i2l4212
  4736  000E58  D7FD               	goto	i2l143
  4737  000E5A                     i2l4172:
  4738                           
  4739                           ;main.c: 203: port[2] = 1;
  4740  000E5A  0E00               	movlw	0
  4741  000E5C  6E6B               	movwf	intrpt@port+5,c
  4742  000E5E  0E01               	movlw	1
  4743  000E60  6E6A               	movwf	intrpt@port+4,c
  4744                           
  4745                           ;main.c: 204: PWMC(400, 6, port);
  4746  000E62  0E01               	movlw	1
  4747  000E64  6E0A               	movwf	PWMC@widthus+1,c
  4748  000E66  0E90               	movlw	144
  4749  000E68  6E09               	movwf	PWMC@widthus,c
  4750  000E6A  0E00               	movlw	0
  4751  000E6C  6E0C               	movwf	PWMC@cycles+1,c
  4752  000E6E  0E06               	movlw	6
  4753  000E70  6E0B               	movwf	PWMC@cycles,c
  4754  000E72  0E66               	movlw	low intrpt@port
  4755  000E74  6E0D               	movwf	PWMC@port,c
  4756  000E76  0E00               	movlw	high intrpt@port
  4757  000E78  6E0E               	movwf	PWMC@port+1,c
  4758  000E7A  EC28  F00A         	call	_PWMC	;wreg free
  4759                           
  4760                           ;main.c: 205: break;
  4761  000E7E  D072               	goto	i2l140
  4762  000E80                     i2l4176:
  4763                           
  4764                           ;main.c: 208: port[1] = 1;
  4765  000E80  0E00               	movlw	0
  4766  000E82  6E69               	movwf	intrpt@port+3,c
  4767  000E84  0E01               	movlw	1
  4768  000E86  6E68               	movwf	intrpt@port+2,c
  4769                           
  4770                           ;main.c: 209: PWMC(400, 6, port);
  4771  000E88  0E01               	movlw	1
  4772  000E8A  6E0A               	movwf	PWMC@widthus+1,c
  4773  000E8C  0E90               	movlw	144
  4774  000E8E  6E09               	movwf	PWMC@widthus,c
  4775  000E90  0E00               	movlw	0
  4776  000E92  6E0C               	movwf	PWMC@cycles+1,c
  4777  000E94  0E06               	movlw	6
  4778  000E96  6E0B               	movwf	PWMC@cycles,c
  4779  000E98  0E66               	movlw	low intrpt@port
  4780  000E9A  6E0D               	movwf	PWMC@port,c
  4781  000E9C  0E00               	movlw	high intrpt@port
  4782  000E9E  6E0E               	movwf	PWMC@port+1,c
  4783  000EA0  EC28  F00A         	call	_PWMC	;wreg free
  4784                           
  4785                           ;main.c: 210: break;
  4786  000EA4  D05F               	goto	i2l140
  4787  000EA6                     i2l152:
  4788                           
  4789                           ;main.c: 212: LATC6 = ~LATC6;
  4790  000EA6  BC8B               	btfsc	3979,6,c	;volatile
  4791  000EA8  D002               	goto	i2u338_40
  4792  000EAA  8C8B               	bsf	3979,6,c	;volatile
  4793  000EAC  D05B               	goto	i2l140
  4794  000EAE                     i2u338_40:
  4795  000EAE  9C8B               	bcf	3979,6,c	;volatile
  4796                           
  4797                           ;main.c: 213: break;
  4798  000EB0  D059               	goto	i2l140
  4799  000EB2                     i2l4180:
  4800                           
  4801                           ;main.c: 216: port[0] = 1;
  4802  000EB2  0E00               	movlw	0
  4803  000EB4  6E67               	movwf	intrpt@port+1,c
  4804  000EB6  0E01               	movlw	1
  4805  000EB8  6E66               	movwf	intrpt@port,c
  4806                           
  4807                           ;main.c: 217: lcdInst(0b11000000);
  4808  000EBA  0EC0               	movlw	192
  4809  000EBC  ECC7  F011         	call	i2_lcdInst
  4810                           
  4811                           ;main.c: 218: PWMC(400, 6, port);
  4812  000EC0  0E01               	movlw	1
  4813  000EC2  6E0A               	movwf	PWMC@widthus+1,c
  4814  000EC4  0E90               	movlw	144
  4815  000EC6  6E09               	movwf	PWMC@widthus,c
  4816  000EC8  0E00               	movlw	0
  4817  000ECA  6E0C               	movwf	PWMC@cycles+1,c
  4818  000ECC  0E06               	movlw	6
  4819  000ECE  6E0B               	movwf	PWMC@cycles,c
  4820  000ED0  0E66               	movlw	low intrpt@port
  4821  000ED2  6E0D               	movwf	PWMC@port,c
  4822  000ED4  0E00               	movlw	high intrpt@port
  4823  000ED6  6E0E               	movwf	PWMC@port+1,c
  4824  000ED8  EC28  F00A         	call	_PWMC	;wreg free
  4825                           
  4826                           ;main.c: 219: break;
  4827  000EDC  D043               	goto	i2l140
  4828  000EDE                     i2l4186:
  4829                           
  4830                           ;main.c: 223: mode = 2;
  4831  000EDE  0E00               	movlw	0
  4832  000EE0  6E76               	movwf	_mode+1,c
  4833  000EE2  0E02               	movlw	2
  4834  000EE4  6E75               	movwf	_mode,c
  4835                           
  4836                           ;main.c: 224: PermLog();
  4837  000EE6  ECA1  F00A         	call	_PermLog	;wreg free
  4838                           
  4839                           ;main.c: 225: mode = 0;
  4840  000EEA  0E00               	movlw	0
  4841  000EEC  6E76               	movwf	_mode+1,c
  4842  000EEE  0E00               	movlw	0
  4843  000EF0  6E75               	movwf	_mode,c
  4844                           
  4845                           ;main.c: 226: break;
  4846  000EF2  D038               	goto	i2l140
  4847  000EF4                     i2l4192:
  4848                           
  4849                           ;main.c: 228: mode = 1;
  4850  000EF4  0E00               	movlw	0
  4851  000EF6  6E76               	movwf	_mode+1,c
  4852  000EF8  0E01               	movlw	1
  4853  000EFA  6E75               	movwf	_mode,c
  4854                           
  4855                           ;main.c: 229: (INTCONbits.GIE = 1);
  4856  000EFC  8EF2               	bsf	intcon,7,c	;volatile
  4857                           
  4858                           ;main.c: 230: simulate();
  4859  000EFE  EC3E  F002         	call	_simulate	;wreg free
  4860                           
  4861                           ;main.c: 231: (INTCONbits.GIE = 0);
  4862  000F02  9EF2               	bcf	intcon,7,c	;volatile
  4863                           
  4864                           ;main.c: 233: }
  4865                           
  4866                           ;main.c: 232: break;
  4867  000F04  D02F               	goto	i2l140
  4868  000F06                     i2l4202:
  4869  000F06  506C               	movf	intrpt@keypress,w,c
  4870                           
  4871                           ; Switch size 1, requested type "space"
  4872                           ; Number of cases is 7, Range of values is 3 to 15
  4873                           ; switch strategies available:
  4874                           ; Name         Instructions Cycles
  4875                           ; simple_byte           22    12 (average)
  4876                           ;	Chosen strategy is simple_byte
  4877  000F08  0A03               	xorlw	3	; case 3
  4878  000F0A  B4D8               	btfsc	status,2,c
  4879  000F0C  D7A6               	goto	i2l4172
  4880  000F0E  0A04               	xorlw	4	; case 7
  4881  000F10  B4D8               	btfsc	status,2,c
  4882  000F12  D7B6               	goto	i2l4176
  4883  000F14  0A0F               	xorlw	15	; case 8
  4884  000F16  B4D8               	btfsc	status,2,c
  4885  000F18  D7C6               	goto	i2l152
  4886  000F1A  0A03               	xorlw	3	; case 11
  4887  000F1C  B4D8               	btfsc	status,2,c
  4888  000F1E  D7C9               	goto	i2l4180
  4889  000F20  0A07               	xorlw	7	; case 12
  4890  000F22  B4D8               	btfsc	status,2,c
  4891  000F24  D03A               	goto	i2l155
  4892  000F26  0A02               	xorlw	2	; case 14
  4893  000F28  B4D8               	btfsc	status,2,c
  4894  000F2A  D7D9               	goto	i2l4186
  4895  000F2C  0A01               	xorlw	1	; case 15
  4896  000F2E  B4D8               	btfsc	status,2,c
  4897  000F30  D7E1               	goto	i2l4192
  4898                           
  4899                           ;main.c: 234: break;
  4900  000F32  D018               	goto	i2l140
  4901  000F34                     i2l4204:
  4902                           
  4903                           ;main.c: 236: if (keypress == 13) {
  4904  000F34  0E0D               	movlw	13
  4905  000F36  186C               	xorwf	intrpt@keypress,w,c
  4906  000F38  A4D8               	btfss	status,2,c
  4907  000F3A  D014               	goto	i2l140
  4908                           
  4909                           ;main.c: 237: mode = 2;
  4910  000F3C  0E00               	movlw	0
  4911  000F3E  6E76               	movwf	_mode+1,c
  4912  000F40  0E02               	movlw	2
  4913  000F42  6E75               	movwf	_mode,c
  4914                           
  4915                           ;main.c: 238: return;
  4916  000F44  D02A               	goto	i2l155
  4917  000F46                     i2l4212:
  4918  000F46  C075  F056         	movff	_mode,??_intrpt
  4919  000F4A  C076  F057         	movff	_mode+1,??_intrpt+1
  4920                           
  4921                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4922                           ; Switch size 1, requested type "space"
  4923                           ; Number of cases is 1, Range of values is 0 to 0
  4924                           ; switch strategies available:
  4925                           ; Name         Instructions Cycles
  4926                           ; simple_byte            4     3 (average)
  4927                           ;	Chosen strategy is simple_byte
  4928  000F4E  5057               	movf	??_intrpt+1,w,c
  4929  000F50  0A00               	xorlw	0	; case 0
  4930  000F52  A4D8               	btfss	status,2,c
  4931  000F54  D007               	goto	i2l140
  4932                           
  4933                           ; Switch size 1, requested type "space"
  4934                           ; Number of cases is 2, Range of values is 0 to 1
  4935                           ; switch strategies available:
  4936                           ; Name         Instructions Cycles
  4937                           ; simple_byte            7     4 (average)
  4938                           ;	Chosen strategy is simple_byte
  4939  000F56  5056               	movf	??_intrpt,w,c
  4940  000F58  0A00               	xorlw	0	; case 0
  4941  000F5A  B4D8               	btfsc	status,2,c
  4942  000F5C  D7D4               	goto	i2l4202
  4943  000F5E  0A01               	xorlw	1	; case 1
  4944  000F60  B4D8               	btfsc	status,2,c
  4945  000F62  D7E8               	goto	i2l4204
  4946  000F64                     i2l140:
  4947                           
  4948                           ;main.c: 243: }
  4949                           ;main.c: 244: if (INT2IF) {
  4950  000F64  A2F0               	btfss	intcon3,1,c	;volatile
  4951  000F66  D018               	goto	i2l162
  4952                           
  4953                           ;main.c: 245: INT2IF = 0;
  4954  000F68  92F0               	bcf	intcon3,1,c	;volatile
  4955                           
  4956                           ;main.c: 246: switch (mode) {
  4957  000F6A  D008               	goto	i2l4222
  4958  000F6C                     i2l4216:
  4959                           
  4960                           ;main.c: 248: mode = 3;
  4961  000F6C  0E00               	movlw	0
  4962  000F6E  6E76               	movwf	_mode+1,c
  4963  000F70  0E03               	movlw	3
  4964  000F72  6E75               	movwf	_mode,c
  4965                           
  4966                           ;main.c: 249: stopMoving(1);
  4967  000F74  0E01               	movlw	1
  4968  000F76  EC56  F010         	call	_stopMoving
  4969                           
  4970                           ;main.c: 253: }
  4971                           
  4972                           ;main.c: 252: break;
  4973                           
  4974                           ;main.c: 251: default:
  4975                           
  4976                           ;main.c: 250: break;
  4977  000F7A  D00C               	goto	i2l167
  4978  000F7C                     i2l4222:
  4979  000F7C  C075  F056         	movff	_mode,??_intrpt
  4980  000F80  C076  F057         	movff	_mode+1,??_intrpt+1
  4981                           
  4982                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4983                           ; Switch size 1, requested type "space"
  4984                           ; Number of cases is 1, Range of values is 0 to 0
  4985                           ; switch strategies available:
  4986                           ; Name         Instructions Cycles
  4987                           ; simple_byte            4     3 (average)
  4988                           ;	Chosen strategy is simple_byte
  4989  000F84  5057               	movf	??_intrpt+1,w,c
  4990  000F86  0A00               	xorlw	0	; case 0
  4991  000F88  A4D8               	btfss	status,2,c
  4992  000F8A  D004               	goto	i2l167
  4993                           
  4994                           ; Switch size 1, requested type "space"
  4995                           ; Number of cases is 1, Range of values is 1 to 1
  4996                           ; switch strategies available:
  4997                           ; Name         Instructions Cycles
  4998                           ; simple_byte            4     3 (average)
  4999                           ;	Chosen strategy is simple_byte
  5000  000F8C  5056               	movf	??_intrpt,w,c
  5001  000F8E  0A01               	xorlw	1	; case 1
  5002  000F90  B4D8               	btfsc	status,2,c
  5003  000F92  D7EC               	goto	i2l4216
  5004  000F94                     i2l167:
  5005  000F94  A481               	btfss	3969,2,c	;volatile
  5006  000F96  D7FE               	goto	i2l167
  5007  000F98                     i2l162:
  5008                           
  5009                           ;main.c: 255: }
  5010                           ;main.c: 256: (INTCONbits.GIE = 1);
  5011  000F98  8EF2               	bsf	intcon,7,c	;volatile
  5012  000F9A                     i2l155:
  5013  000F9A  C065  FFF5         	movff	??_intrpt+15,tablat
  5014  000F9E  C064  FFF8         	movff	??_intrpt+14,tblptru
  5015  000FA2  C063  FFF7         	movff	??_intrpt+13,tblptrh
  5016  000FA6  C062  FFF6         	movff	??_intrpt+12,tblptrl
  5017  000FAA  C061  FFF4         	movff	??_intrpt+11,prodh
  5018  000FAE  C060  FFF3         	movff	??_intrpt+10,prodl
  5019  000FB2  C05F  FFDA         	movff	??_intrpt+9,fsr2h
  5020  000FB6  C05E  FFD9         	movff	??_intrpt+8,fsr2l
  5021  000FBA  C05D  FFE2         	movff	??_intrpt+7,fsr1h
  5022  000FBE  C05C  FFE1         	movff	??_intrpt+6,fsr1l
  5023  000FC2  C05B  FFEA         	movff	??_intrpt+5,fsr0h
  5024  000FC6  C05A  FFE9         	movff	??_intrpt+4,fsr0l
  5025  000FCA  C059  FFFB         	movff	??_intrpt+3,pclatu
  5026  000FCE  C058  FFFA         	movff	??_intrpt+2,pclath
  5027  000FD2  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5028  000FD4  0011               	retfie		f
  5029  000FD6                     __end_of_intrpt:
  5030                           	opt stack 0
  5031                           pclatu	equ	0xFFB
  5032                           pclath	equ	0xFFA
  5033                           tblptru	equ	0xFF8
  5034                           tblptrh	equ	0xFF7
  5035                           tblptrl	equ	0xFF6
  5036                           tablat	equ	0xFF5
  5037                           prodh	equ	0xFF4
  5038                           prodl	equ	0xFF3
  5039                           intcon	equ	0xFF2
  5040                           intcon2	equ	0xFF1
  5041                           intcon3	equ	0xFF0
  5042                           postinc0	equ	0xFEE
  5043                           fsr0h	equ	0xFEA
  5044                           fsr0l	equ	0xFE9
  5045                           wreg	equ	0xFE8
  5046                           plusw1	equ	0xFE3
  5047                           fsr1h	equ	0xFE2
  5048                           fsr1l	equ	0xFE1
  5049                           indf2	equ	0xFDF
  5050                           postinc2	equ	0xFDE
  5051                           postdec2	equ	0xFDD
  5052                           plusw2	equ	0xFDB
  5053                           fsr2h	equ	0xFDA
  5054                           fsr2l	equ	0xFD9
  5055                           status	equ	0xFD8
  5056                           
  5057 ;; *************** function _simulate *****************
  5058 ;; Defined at:
  5059 ;;		line 57 in file "main.c"
  5060 ;; Parameters:    Size  Location     Type
  5061 ;;		None
  5062 ;; Auto vars:     Size  Location     Type
  5063 ;;  portCCW         6   73[COMRAM] int [3]
  5064 ;;  portCW          6   67[COMRAM] int [3]
  5065 ;;  DCmoving        1   51[COMRAM] unsigned char 
  5066 ;;  portShake       0   49[COMRAM] int [0]
  5067 ;;  sorted          4   81[COMRAM] unsigned char [4]
  5068 ;;  start           4   56[COMRAM] unsigned int [2]
  5069 ;;  now             4   52[COMRAM] unsigned int [2]
  5070 ;;  period          2   79[COMRAM] unsigned int 
  5071 ;;  V9              2   64[COMRAM] int 
  5072 ;;  C               2   62[COMRAM] int 
  5073 ;;  AA              2   60[COMRAM] int 
  5074 ;;  countDC         1   66[COMRAM] unsigned char 
  5075 ;; Return value:  Size  Location     Type
  5076 ;;                  1    wreg      void 
  5077 ;; Registers used:
  5078 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5079 ;; Tracked objects:
  5080 ;;		On entry : 0/0
  5081 ;;		On exit  : 0/0
  5082 ;;		Unchanged: 0/0
  5083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5085 ;;      Locals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5086 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5087 ;;      Totals:        38       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5088 ;;Total ram usage:       38 bytes
  5089 ;; Hardware stack levels used:    1
  5090 ;; Hardware stack levels required when called:    5
  5091 ;; This function calls:
  5092 ;;		_CCW90
  5093 ;;		_CW90
  5094 ;;		_HexDecToDec2
  5095 ;;		_WriteRun
  5096 ;;		_captureKeypad
  5097 ;;		_check9
  5098 ;;		_checkAA
  5099 ;;		_checkC
  5100 ;;		_shake
  5101 ;;		_showInfo
  5102 ;;		_stopMoving
  5103 ;;		i2___wmul
  5104 ;;		i2_getTime
  5105 ;;		i2_lcdInst
  5106 ;;		i2_printf
  5107 ;; This function is called by:
  5108 ;;		_intrpt
  5109 ;; This function uses a non-reentrant model
  5110 ;;
  5111                           
  5112                           	psect	text23
  5113  00047C                     __ptext23:
  5114                           	opt stack 0
  5115  00047C                     _simulate:
  5116                           	opt stack 20
  5117                           
  5118                           ;main.c: 58: unsigned int now[] = {0, 0}, start[] = {0, 0};
  5119                           
  5120                           ;incstack = 0
  5121  00047C  C071  F035         	movff	simulate@F3095,simulate@now
  5122  000480  C072  F036         	movff	simulate@F3095+1,simulate@now+1
  5123  000484  C073  F037         	movff	simulate@F3095+2,simulate@now+2
  5124  000488  C074  F038         	movff	simulate@F3095+3,simulate@now+3
  5125  00048C  C06D  F039         	movff	simulate@F3097,simulate@start
  5126  000490  C06E  F03A         	movff	simulate@F3097+1,simulate@start+1
  5127  000494  C06F  F03B         	movff	simulate@F3097+2,simulate@start+2
  5128  000498  C070  F03C         	movff	simulate@F3097+3,simulate@start+3
  5129                           
  5130                           ;main.c: 59: unsigned char sorted[] = {0, 0, 0, 0};
  5131  00049C  C0C0  F052         	movff	simulate@F3099,simulate@sorted
  5132  0004A0  C0C1  F053         	movff	simulate@F3099+1,simulate@sorted+1
  5133  0004A4  C0C2  F054         	movff	simulate@F3099+2,simulate@sorted+2
  5134  0004A8  C0C3  F055         	movff	simulate@F3099+3,simulate@sorted+3
  5135                           
  5136                           ;main.c: 60: unsigned int period = 0;
  5137  0004AC  0E00               	movlw	0
  5138  0004AE  6E51               	movwf	simulate@period+1,c
  5139  0004B0  0E00               	movlw	0
  5140  0004B2  6E50               	movwf	simulate@period,c
  5141                           
  5142                           ;main.c: 61: int AA, C, V9;
  5143                           ;main.c: 62: unsigned char countDC = 0;
  5144  0004B4  0E00               	movlw	0
  5145  0004B6  6E43               	movwf	simulate@countDC,c
  5146                           
  5147                           ;main.c: 63: lcdInst(0b10000000);
  5148  0004B8  0E80               	movlw	128
  5149  0004BA  ECC7  F011         	call	i2_lcdInst
  5150                           
  5151                           ;main.c: 64: printf("Simulating...          ");
  5152  0004BE  0E9B               	movlw	low STR_2
  5153  0004C0  6E0D               	movwf	i2printf@f,c
  5154  0004C2  0EFE               	movlw	high STR_2
  5155  0004C4  6E0E               	movwf	i2printf@f+1,c
  5156  0004C6  EC1B  F004         	call	i2_printf	;wreg free
  5157                           
  5158                           ;main.c: 65: start[0] = time[0];
  5159  0004CA  C077  F039         	movff	_time,simulate@start
  5160  0004CE  6A3A               	clrf	simulate@start+1,c
  5161                           
  5162                           ;main.c: 66: start[1] = time[1];
  5163  0004D0  C078  F03B         	movff	_time+1,simulate@start+2
  5164  0004D4  6A3C               	clrf	simulate@start+3,c
  5165                           
  5166                           ;main.c: 67: LATC6 = 1;
  5167  0004D6  8C8B               	bsf	3979,6,c	;volatile
  5168                           
  5169                           ;main.c: 68: INT2IE = 1;
  5170  0004D8  88F0               	bsf	intcon3,4,c	;volatile
  5171                           
  5172                           ;main.c: 69: INT2IF = 0;
  5173  0004DA  92F0               	bcf	intcon3,1,c	;volatile
  5174                           
  5175                           ;main.c: 70: while (mode == 1) {
  5176  0004DC  D176               	goto	i2l4094
  5177  0004DE                     i2l3972:
  5178                           
  5179                           ;main.c: 71: if (countDC++ > 50) {
  5180  0004DE  2A43               	incf	simulate@countDC,f,c
  5181  0004E0  0443               	decf	simulate@countDC,w,c
  5182  0004E2  6E30               	movwf	??_simulate& (0+255),c
  5183  0004E4  0E32               	movlw	50
  5184  0004E6  6430               	cpfsgt	??_simulate,c
  5185  0004E8  D003               	goto	i2l113
  5186                           
  5187                           ;main.c: 72: LATC6 = 0;
  5188  0004EA  9C8B               	bcf	3979,6,c	;volatile
  5189                           
  5190                           ;main.c: 73: countDC = 0;
  5191  0004EC  0E00               	movlw	0
  5192  0004EE  6E43               	movwf	simulate@countDC,c
  5193  0004F0                     i2l113:
  5194                           
  5195                           ;main.c: 74: }
  5196                           ;main.c: 75: unsigned char DCmoving = LATC6;
  5197  0004F0  0E00               	movlw	0
  5198  0004F2  BC8B               	btfsc	3979,6,c	;volatile
  5199  0004F4  0E01               	movlw	1
  5200  0004F6  6E34               	movwf	simulate@DCmoving,c
  5201                           
  5202                           ;main.c: 76: lcdInst(0b10000000);
  5203  0004F8  0E80               	movlw	128
  5204  0004FA  ECC7  F011         	call	i2_lcdInst
  5205                           
  5206                           ;main.c: 77: LATC6 = 0;
  5207  0004FE  9C8B               	bcf	3979,6,c	;volatile
  5208                           
  5209                           ;main.c: 78: V9 = check9(sorted);
  5210  000500  0E52               	movlw	low simulate@sorted
  5211  000502  6E2A               	movwf	check9@sorted,c
  5212  000504  0E00               	movlw	high simulate@sorted
  5213  000506  6E2B               	movwf	check9@sorted+1,c
  5214  000508  ECCF  F00D         	call	_check9	;wreg free
  5215  00050C  C02A  F041         	movff	?_check9,simulate@V9
  5216  000510  C02B  F042         	movff	?_check9+1,simulate@V9+1
  5217                           
  5218                           ;main.c: 79: C = checkC(sorted);
  5219  000514  0E52               	movlw	low simulate@sorted
  5220  000516  6E2A               	movwf	checkC@sorted,c
  5221  000518  0E00               	movlw	high simulate@sorted
  5222  00051A  6E2B               	movwf	checkC@sorted+1,c
  5223  00051C  EC94  F00D         	call	_checkC	;wreg free
  5224  000520  C02A  F03F         	movff	?_checkC,simulate@C
  5225  000524  C02B  F040         	movff	?_checkC+1,simulate@C+1
  5226                           
  5227                           ;main.c: 80: AA = checkAA(sorted);
  5228  000528  0E52               	movlw	low simulate@sorted
  5229  00052A  6E2A               	movwf	checkAA@sorted,c
  5230  00052C  0E00               	movlw	high simulate@sorted
  5231  00052E  6E2B               	movwf	checkAA@sorted+1,c
  5232  000530  EC0A  F00E         	call	_checkAA	;wreg free
  5233  000534  C02A  F03D         	movff	?_checkAA,simulate@AA
  5234  000538  C02B  F03E         	movff	?_checkAA+1,simulate@AA+1
  5235                           
  5236                           ;main.c: 81: printf("    ");
  5237  00053C  0ED1               	movlw	low (STR_27+11)
  5238  00053E  6E0D               	movwf	i2printf@f,c
  5239  000540  0EFF               	movlw	high (STR_27+11)
  5240  000542  6E0E               	movwf	i2printf@f+1,c
  5241  000544  EC1B  F004         	call	i2_printf	;wreg free
  5242                           
  5243                           ;main.c: 83: int portCW[] = {0, 0, 0};
  5244  000548  EE20  F0B6         	lfsr	2,simulate@F3107
  5245  00054C  EE10  F044         	lfsr	1,simulate@portCW
  5246  000550  0E05               	movlw	5
  5247  000552                     i2u313_41:
  5248  000552  CFDB FFE3          	movff	plusw2,plusw1
  5249  000556  06E8               	decf	wreg,f,c
  5250  000558  E2FC               	bc	i2u313_41
  5251                           
  5252                           ;main.c: 84: int portCCW[] = {0, 0, 0};
  5253  00055A  EE20  F0B0         	lfsr	2,simulate@F3109
  5254  00055E  EE10  F04A         	lfsr	1,simulate@portCCW
  5255  000562  0E05               	movlw	5
  5256  000564                     i2u314_41:
  5257  000564  CFDB FFE3          	movff	plusw2,plusw1
  5258  000568  06E8               	decf	wreg,f,c
  5259  00056A  E2FC               	bc	i2u314_41
  5260                           
  5261                           ;main.c: 87: lcdInst(0b11000000);
  5262  00056C  0EC0               	movlw	192
  5263  00056E  ECC7  F011         	call	i2_lcdInst
  5264                           
  5265                           ;main.c: 88: printf("9V:");
  5266  000572  0EF1               	movlw	low STR_4
  5267  000574  6E0D               	movwf	i2printf@f,c
  5268  000576  0EFF               	movlw	high STR_4
  5269  000578  6E0E               	movwf	i2printf@f+1,c
  5270  00057A  EC1B  F004         	call	i2_printf	;wreg free
  5271                           
  5272                           ;main.c: 89: if (!V9) {
  5273  00057E  5041               	movf	simulate@V9,w,c
  5274  000580  1042               	iorwf	simulate@V9+1,w,c
  5275  000582  A4D8               	btfss	status,2,c
  5276  000584  D00D               	goto	i2l4006
  5277                           
  5278                           ;main.c: 90: portCCW[0] = 1;
  5279  000586  0E00               	movlw	0
  5280  000588  6E4B               	movwf	simulate@portCCW+1,c
  5281  00058A  0E01               	movlw	1
  5282  00058C  6E4A               	movwf	simulate@portCCW,c
  5283                           
  5284                           ;main.c: 91: printf(" -");
  5285  00058E  0EF8               	movlw	low STR_5
  5286  000590  6E0D               	movwf	i2printf@f,c
  5287  000592  0EFF               	movlw	high STR_5
  5288  000594  6E0E               	movwf	i2printf@f+1,c
  5289  000596  EC1B  F004         	call	i2_printf	;wreg free
  5290                           
  5291                           ;main.c: 93: captureKeypad();
  5292  00059A  EC6A  F011         	call	_captureKeypad	;wreg free
  5293                           
  5294                           ;main.c: 95: } else if (V9 == 1) {
  5295  00059E  D017               	goto	i2l119
  5296  0005A0                     i2l4006:
  5297  0005A0  0441               	decf	simulate@V9,w,c
  5298  0005A2  1042               	iorwf	simulate@V9+1,w,c
  5299  0005A4  A4D8               	btfss	status,2,c
  5300  0005A6  D00D               	goto	i2l4014
  5301                           
  5302                           ;main.c: 96: portCW[0] = 1;
  5303  0005A8  0E00               	movlw	0
  5304  0005AA  6E45               	movwf	simulate@portCW+1,c
  5305  0005AC  0E01               	movlw	1
  5306  0005AE  6E44               	movwf	simulate@portCW,c
  5307                           
  5308                           ;main.c: 97: printf(" +");
  5309  0005B0  0EF5               	movlw	low STR_6
  5310  0005B2  6E0D               	movwf	i2printf@f,c
  5311  0005B4  0EFF               	movlw	high STR_6
  5312  0005B6  6E0E               	movwf	i2printf@f+1,c
  5313  0005B8  EC1B  F004         	call	i2_printf	;wreg free
  5314                           
  5315                           ;main.c: 99: captureKeypad();
  5316  0005BC  EC6A  F011         	call	_captureKeypad	;wreg free
  5317                           
  5318                           ;main.c: 101: } else {
  5319  0005C0  D006               	goto	i2l119
  5320  0005C2                     i2l4014:
  5321                           
  5322                           ;main.c: 102: printf(" 0");
  5323  0005C2  0EFB               	movlw	low STR_7
  5324  0005C4  6E0D               	movwf	i2printf@f,c
  5325  0005C6  0EFF               	movlw	high STR_7
  5326  0005C8  6E0E               	movwf	i2printf@f+1,c
  5327  0005CA  EC1B  F004         	call	i2_printf	;wreg free
  5328  0005CE                     i2l119:
  5329                           
  5330                           ;main.c: 103: }
  5331                           ;main.c: 105: printf(" C:");
  5332  0005CE  0EED               	movlw	low STR_8
  5333  0005D0  6E0D               	movwf	i2printf@f,c
  5334  0005D2  0EFF               	movlw	high STR_8
  5335  0005D4  6E0E               	movwf	i2printf@f+1,c
  5336  0005D6  EC1B  F004         	call	i2_printf	;wreg free
  5337                           
  5338                           ;main.c: 107: if (!C) {
  5339  0005DA  503F               	movf	simulate@C,w,c
  5340  0005DC  1040               	iorwf	simulate@C+1,w,c
  5341  0005DE  A4D8               	btfss	status,2,c
  5342  0005E0  D00D               	goto	i2l4024
  5343                           
  5344                           ;main.c: 108: portCCW[1] = 1;
  5345  0005E2  0E00               	movlw	0
  5346  0005E4  6E4D               	movwf	simulate@portCCW+3,c
  5347  0005E6  0E01               	movlw	1
  5348  0005E8  6E4C               	movwf	simulate@portCCW+2,c
  5349                           
  5350                           ;main.c: 109: printf(" -");
  5351  0005EA  0EF8               	movlw	low STR_5
  5352  0005EC  6E0D               	movwf	i2printf@f,c
  5353  0005EE  0EFF               	movlw	high STR_5
  5354  0005F0  6E0E               	movwf	i2printf@f+1,c
  5355  0005F2  EC1B  F004         	call	i2_printf	;wreg free
  5356                           
  5357                           ;main.c: 111: captureKeypad();
  5358  0005F6  EC6A  F011         	call	_captureKeypad	;wreg free
  5359                           
  5360                           ;main.c: 113: } else if (C == 1) {
  5361  0005FA  D017               	goto	i2l123
  5362  0005FC                     i2l4024:
  5363  0005FC  043F               	decf	simulate@C,w,c
  5364  0005FE  1040               	iorwf	simulate@C+1,w,c
  5365  000600  A4D8               	btfss	status,2,c
  5366  000602  D00D               	goto	i2l4032
  5367                           
  5368                           ;main.c: 114: portCW[1] = 1;
  5369  000604  0E00               	movlw	0
  5370  000606  6E47               	movwf	simulate@portCW+3,c
  5371  000608  0E01               	movlw	1
  5372  00060A  6E46               	movwf	simulate@portCW+2,c
  5373                           
  5374                           ;main.c: 115: printf(" +");
  5375  00060C  0EF5               	movlw	low STR_6
  5376  00060E  6E0D               	movwf	i2printf@f,c
  5377  000610  0EFF               	movlw	high STR_6
  5378  000612  6E0E               	movwf	i2printf@f+1,c
  5379  000614  EC1B  F004         	call	i2_printf	;wreg free
  5380                           
  5381                           ;main.c: 117: captureKeypad();
  5382  000618  EC6A  F011         	call	_captureKeypad	;wreg free
  5383                           
  5384                           ;main.c: 119: } else {
  5385  00061C  D006               	goto	i2l123
  5386  00061E                     i2l4032:
  5387                           
  5388                           ;main.c: 120: printf(" 0");
  5389  00061E  0EFB               	movlw	low STR_7
  5390  000620  6E0D               	movwf	i2printf@f,c
  5391  000622  0EFF               	movlw	high STR_7
  5392  000624  6E0E               	movwf	i2printf@f+1,c
  5393  000626  EC1B  F004         	call	i2_printf	;wreg free
  5394  00062A                     i2l123:
  5395                           
  5396                           ;main.c: 121: }
  5397                           ;main.c: 123: printf(" AA:");
  5398  00062A  0EE4               	movlw	low STR_12
  5399  00062C  6E0D               	movwf	i2printf@f,c
  5400  00062E  0EFF               	movlw	high STR_12
  5401  000630  6E0E               	movwf	i2printf@f+1,c
  5402  000632  EC1B  F004         	call	i2_printf	;wreg free
  5403                           
  5404                           ;main.c: 125: if (!AA) {
  5405  000636  503D               	movf	simulate@AA,w,c
  5406  000638  103E               	iorwf	simulate@AA+1,w,c
  5407  00063A  A4D8               	btfss	status,2,c
  5408  00063C  D00D               	goto	i2l4042
  5409                           
  5410                           ;main.c: 126: portCCW[2] = 1;
  5411  00063E  0E00               	movlw	0
  5412  000640  6E4F               	movwf	simulate@portCCW+5,c
  5413  000642  0E01               	movlw	1
  5414  000644  6E4E               	movwf	simulate@portCCW+4,c
  5415                           
  5416                           ;main.c: 127: printf(" -");
  5417  000646  0EF8               	movlw	low STR_5
  5418  000648  6E0D               	movwf	i2printf@f,c
  5419  00064A  0EFF               	movlw	high STR_5
  5420  00064C  6E0E               	movwf	i2printf@f+1,c
  5421  00064E  EC1B  F004         	call	i2_printf	;wreg free
  5422                           
  5423                           ;main.c: 129: captureKeypad();
  5424  000652  EC6A  F011         	call	_captureKeypad	;wreg free
  5425                           
  5426                           ;main.c: 131: } else if (AA == 1) {
  5427  000656  D017               	goto	i2l4052
  5428  000658                     i2l4042:
  5429  000658  043D               	decf	simulate@AA,w,c
  5430  00065A  103E               	iorwf	simulate@AA+1,w,c
  5431  00065C  A4D8               	btfss	status,2,c
  5432  00065E  D00D               	goto	i2l4050
  5433                           
  5434                           ;main.c: 132: portCW[2] = 1;
  5435  000660  0E00               	movlw	0
  5436  000662  6E49               	movwf	simulate@portCW+5,c
  5437  000664  0E01               	movlw	1
  5438  000666  6E48               	movwf	simulate@portCW+4,c
  5439                           
  5440                           ;main.c: 133: printf(" +");
  5441  000668  0EF5               	movlw	low STR_6
  5442  00066A  6E0D               	movwf	i2printf@f,c
  5443  00066C  0EFF               	movlw	high STR_6
  5444  00066E  6E0E               	movwf	i2printf@f+1,c
  5445  000670  EC1B  F004         	call	i2_printf	;wreg free
  5446                           
  5447                           ;main.c: 135: captureKeypad();
  5448  000674  EC6A  F011         	call	_captureKeypad	;wreg free
  5449                           
  5450                           ;main.c: 137: } else {
  5451  000678  D006               	goto	i2l4052
  5452  00067A                     i2l4050:
  5453                           
  5454                           ;main.c: 138: printf(" 0");
  5455  00067A  0EFB               	movlw	low STR_7
  5456  00067C  6E0D               	movwf	i2printf@f,c
  5457  00067E  0EFF               	movlw	high STR_7
  5458  000680  6E0E               	movwf	i2printf@f+1,c
  5459  000682  EC1B  F004         	call	i2_printf	;wreg free
  5460  000686                     i2l4052:
  5461                           
  5462                           ;main.c: 139: }
  5463                           ;main.c: 141: CCW90(portCCW);
  5464  000686  0E4A               	movlw	low simulate@portCCW
  5465  000688  6E16               	movwf	CCW90@port,c
  5466  00068A  0E00               	movlw	high simulate@portCCW
  5467  00068C  6E17               	movwf	CCW90@port+1,c
  5468  00068E  EC7A  F00E         	call	_CCW90	;wreg free
  5469                           
  5470                           ;main.c: 142: CW90(portCW);
  5471  000692  0E44               	movlw	low simulate@portCW
  5472  000694  6E16               	movwf	CW90@port,c
  5473  000696  0E00               	movlw	high simulate@portCW
  5474  000698  6E17               	movwf	CW90@port+1,c
  5475  00069A  EC43  F00E         	call	_CW90	;wreg free
  5476                           
  5477                           ;main.c: 143: LATC6 = DCmoving;
  5478  00069E  A034               	btfss	simulate@DCmoving,0,c
  5479  0006A0  D002               	goto	i2u321_40
  5480  0006A2  8C8B               	bsf	3979,6,c	;volatile
  5481  0006A4  D001               	goto	i2l4058
  5482  0006A6                     i2u321_40:
  5483  0006A6  9C8B               	bcf	3979,6,c	;volatile
  5484  0006A8                     i2l4058:
  5485                           
  5486                           ;main.c: 144: int portShake[];
  5487                           ;main.c: 145: portShake[0] = portCCW[0] == portCW[0];
  5488  0006A8  5044               	movf	simulate@portCW,w,c
  5489  0006AA  184A               	xorwf	simulate@portCCW,w,c
  5490  0006AC  E106               	bnz	i2u323_40
  5491  0006AE  5045               	movf	simulate@portCW+1,w,c
  5492  0006B0  184B               	xorwf	simulate@portCCW+1,w,c
  5493  0006B2  A4D8               	btfss	status,2,c
  5494  0006B4  D002               	goto	i2u323_40
  5495  0006B6  0E01               	movlw	1
  5496  0006B8  D001               	goto	i2u324_40
  5497  0006BA                     i2u323_40:
  5498  0006BA  0E00               	movlw	0
  5499  0006BC                     i2u324_40:
  5500  0006BC  6E30               	movwf	??_simulate& (0+255),c
  5501  0006BE  6A31               	clrf	(??_simulate+1)& (0+255),c
  5502  0006C0  C030  F032         	movff	??_simulate,simulate@portShake
  5503  0006C4  C031  F033         	movff	??_simulate+1,simulate@portShake+1
  5504                           
  5505                           ;main.c: 146: portShake[1] = portCCW[1] == portCW[1];
  5506  0006C8  5046               	movf	simulate@portCW+2,w,c
  5507  0006CA  184C               	xorwf	simulate@portCCW+2,w,c
  5508  0006CC  E106               	bnz	i2u325_40
  5509  0006CE  5047               	movf	simulate@portCW+3,w,c
  5510  0006D0  184D               	xorwf	simulate@portCCW+3,w,c
  5511  0006D2  A4D8               	btfss	status,2,c
  5512  0006D4  D002               	goto	i2u325_40
  5513  0006D6  0E01               	movlw	1
  5514  0006D8  D001               	goto	i2u326_40
  5515  0006DA                     i2u325_40:
  5516  0006DA  0E00               	movlw	0
  5517  0006DC                     i2u326_40:
  5518  0006DC  6E30               	movwf	??_simulate& (0+255),c
  5519  0006DE  6A31               	clrf	(??_simulate+1)& (0+255),c
  5520  0006E0  C030  F034         	movff	??_simulate,simulate@portShake+2
  5521  0006E4  C031  F035         	movff	??_simulate+1,simulate@portShake+3
  5522                           
  5523                           ;main.c: 147: portShake[2] = portCCW[2] == portCW[2];
  5524  0006E8  5048               	movf	simulate@portCW+4,w,c
  5525  0006EA  184E               	xorwf	simulate@portCCW+4,w,c
  5526  0006EC  E106               	bnz	i2u327_40
  5527  0006EE  5049               	movf	simulate@portCW+5,w,c
  5528  0006F0  184F               	xorwf	simulate@portCCW+5,w,c
  5529  0006F2  A4D8               	btfss	status,2,c
  5530  0006F4  D002               	goto	i2u327_40
  5531  0006F6  0E01               	movlw	1
  5532  0006F8  D001               	goto	i2u328_40
  5533  0006FA                     i2u327_40:
  5534  0006FA  0E00               	movlw	0
  5535  0006FC                     i2u328_40:
  5536  0006FC  6E30               	movwf	??_simulate& (0+255),c
  5537  0006FE  6A31               	clrf	(??_simulate+1)& (0+255),c
  5538  000700  C030  F036         	movff	??_simulate,simulate@portShake+4
  5539  000704  C031  F037         	movff	??_simulate+1,simulate@portShake+5
  5540                           
  5541                           ;main.c: 148: shake(portShake);
  5542  000708  0E32               	movlw	low simulate@portShake
  5543  00070A  6E16               	movwf	shake@port,c
  5544  00070C  0E00               	movlw	high simulate@portShake
  5545  00070E  6E17               	movwf	shake@port+1,c
  5546  000710  ECAF  F009         	call	_shake	;wreg free
  5547                           
  5548                           ;main.c: 149: LATC0 = 0;
  5549  000714  908B               	bcf	3979,0,c	;volatile
  5550                           
  5551                           ;main.c: 150: LATC1 = 0;
  5552  000716  928B               	bcf	3979,1,c	;volatile
  5553                           
  5554                           ;main.c: 151: LATC2 = 0;
  5555  000718  948B               	bcf	3979,2,c	;volatile
  5556                           
  5557                           ;main.c: 156: }
  5558                           ;main.c: 157: getTime(time);
  5559  00071A  0E77               	movlw	low _time
  5560  00071C  6E04               	movwf	i2getTime@time,c
  5561  00071E  0E00               	movlw	high _time
  5562  000720  6E05               	movwf	i2getTime@time+1,c
  5563  000722  EC59  F00D         	call	i2_getTime	;wreg free
  5564                           
  5565                           ;main.c: 158: now[0] = time[0];
  5566  000726  C077  F035         	movff	_time,simulate@now
  5567  00072A  6A36               	clrf	simulate@now+1,c
  5568                           
  5569                           ;main.c: 159: now[1] = time[1];
  5570  00072C  C078  F037         	movff	_time+1,simulate@now+2
  5571  000730  6A38               	clrf	simulate@now+3,c
  5572                           
  5573                           ;main.c: 160: lcdInst(0b10000000);
  5574  000732  0E80               	movlw	128
  5575  000734  ECC7  F011         	call	i2_lcdInst
  5576                           
  5577                           ;main.c: 162: period = (HexDecToDec2(now[1]) - HexDecToDec2(start[1]))*60 + HexDecToDec2
      +                          (now[0]) - HexDecToDec2(start[0]);
  5578  000738  C037  F007         	movff	simulate@now+2,HexDecToDec2@hex
  5579  00073C  C038  F008         	movff	simulate@now+3,HexDecToDec2@hex+1
  5580  000740  ECEE  F00F         	call	_HexDecToDec2	;wreg free
  5581  000744  C007  F030         	movff	?_HexDecToDec2,??_simulate
  5582  000748  C008  F031         	movff	?_HexDecToDec2+1,??_simulate+1
  5583  00074C  C03B  F007         	movff	simulate@start+2,HexDecToDec2@hex
  5584  000750  C03C  F008         	movff	simulate@start+3,HexDecToDec2@hex+1
  5585  000754  ECEE  F00F         	call	_HexDecToDec2	;wreg free
  5586  000758  1E07               	comf	?_HexDecToDec2,f,c
  5587  00075A  1E08               	comf	?_HexDecToDec2+1,f,c
  5588  00075C  4A07               	infsnz	?_HexDecToDec2,f,c
  5589  00075E  2A08               	incf	?_HexDecToDec2+1,f,c
  5590  000760  5007               	movf	?_HexDecToDec2,w,c
  5591  000762  2430               	addwf	??_simulate,w,c
  5592  000764  6E32               	movwf	_simulate$1492,c
  5593  000766  5008               	movf	?_HexDecToDec2+1,w,c
  5594  000768  2031               	addwfc	??_simulate+1,w,c
  5595  00076A  6E33               	movwf	_simulate$1492+1,c
  5596                           
  5597                           ;main.c: 162: period = (HexDecToDec2(now[1]) - HexDecToDec2(start[1]))*60 + HexDecToDec2
      +                          (now[0]) - HexDecToDec2(start[0]);
  5598  00076C  C032  F001         	movff	_simulate$1492,i2___wmul@multiplier
  5599  000770  C033  F002         	movff	_simulate$1492+1,i2___wmul@multiplier+1
  5600  000774  0E00               	movlw	0
  5601  000776  6E04               	movwf	i2___wmul@multiplicand+1,c
  5602  000778  0E3C               	movlw	60
  5603  00077A  6E03               	movwf	i2___wmul@multiplicand,c
  5604  00077C  EC37  F011         	call	i2___wmul	;wreg free
  5605  000780  C001  F030         	movff	?i2___wmul,??_simulate
  5606  000784  C002  F031         	movff	?i2___wmul+1,??_simulate+1
  5607  000788  C035  F007         	movff	simulate@now,HexDecToDec2@hex
  5608  00078C  C036  F008         	movff	simulate@now+1,HexDecToDec2@hex+1
  5609  000790  ECEE  F00F         	call	_HexDecToDec2	;wreg free
  5610  000794  5007               	movf	?_HexDecToDec2,w,c
  5611  000796  2630               	addwf	??_simulate,f,c
  5612  000798  5008               	movf	?_HexDecToDec2+1,w,c
  5613  00079A  2231               	addwfc	??_simulate+1,f,c
  5614  00079C  C039  F007         	movff	simulate@start,HexDecToDec2@hex
  5615  0007A0  C03A  F008         	movff	simulate@start+1,HexDecToDec2@hex+1
  5616  0007A4  ECEE  F00F         	call	_HexDecToDec2	;wreg free
  5617  0007A8  1E07               	comf	?_HexDecToDec2,f,c
  5618  0007AA  1E08               	comf	?_HexDecToDec2+1,f,c
  5619  0007AC  4A07               	infsnz	?_HexDecToDec2,f,c
  5620  0007AE  2A08               	incf	?_HexDecToDec2+1,f,c
  5621  0007B0  5007               	movf	?_HexDecToDec2,w,c
  5622  0007B2  2430               	addwf	??_simulate,w,c
  5623  0007B4  6E50               	movwf	simulate@period,c
  5624  0007B6  5008               	movf	?_HexDecToDec2+1,w,c
  5625  0007B8  2031               	addwfc	??_simulate+1,w,c
  5626  0007BA  6E51               	movwf	simulate@period+1,c
  5627                           
  5628                           ;main.c: 163: lcdInst(0b11000000);
  5629  0007BC  0EC0               	movlw	192
  5630  0007BE  ECC7  F011         	call	i2_lcdInst
  5631                           
  5632                           ;main.c: 167: }
  5633                           ;main.c: 168: if (countDC == 25) {
  5634  0007C2  0E19               	movlw	25
  5635  0007C4  1843               	xorwf	simulate@countDC,w,c
  5636  0007C6  B4D8               	btfsc	status,2,c
  5637                           
  5638                           ;main.c: 169: LATC6 = 1;
  5639  0007C8  8C8B               	bsf	3979,6,c	;volatile
  5640  0007CA                     i2l4094:
  5641  0007CA  0475               	decf	_mode,w,c
  5642  0007CC  1076               	iorwf	_mode+1,w,c
  5643  0007CE  B4D8               	btfsc	status,2,c
  5644  0007D0  D686               	goto	i2l3972
  5645                           
  5646                           ;main.c: 170: }
  5647                           ;main.c: 171: }
  5648                           ;main.c: 172: INT2IE = 0;
  5649  0007D2  98F0               	bcf	intcon3,4,c	;volatile
  5650                           
  5651                           ;main.c: 173: stopMoving(0);
  5652  0007D4  0E00               	movlw	0
  5653  0007D6  EC56  F010         	call	_stopMoving
  5654                           
  5655                           ;main.c: 174: lcdInst(0b11000000);
  5656  0007DA  0EC0               	movlw	192
  5657  0007DC  ECC7  F011         	call	i2_lcdInst
  5658                           
  5659                           ;main.c: 175: printf("Sorting Complete          ");
  5660  0007E0  0EED               	movlw	low STR_16
  5661  0007E2  6E0D               	movwf	i2printf@f,c
  5662  0007E4  0EFD               	movlw	high STR_16
  5663  0007E6  6E0E               	movwf	i2printf@f+1,c
  5664  0007E8  EC1B  F004         	call	i2_printf	;wreg free
  5665                           
  5666                           ;main.c: 176: WriteRun(sorted, period);
  5667  0007EC  0E52               	movlw	low simulate@sorted
  5668  0007EE  6E07               	movwf	WriteRun@sorted,c
  5669  0007F0  0E00               	movlw	high simulate@sorted
  5670  0007F2  6E08               	movwf	WriteRun@sorted+1,c
  5671  0007F4  C050  F009         	movff	simulate@period,WriteRun@time
  5672  0007F8  C051  F00A         	movff	simulate@period+1,WriteRun@time+1
  5673  0007FC  ECEB  F007         	call	_WriteRun	;wreg free
  5674                           
  5675                           ;main.c: 177: _delay((unsigned long)((700)*(8000000/4000.0)));
  5676  000800  0E08               	movlw	8
  5677  000802  6E31               	movwf	(??_simulate+1)& (0+255),c
  5678  000804  0E1B               	movlw	27
  5679  000806  6E30               	movwf	??_simulate& (0+255),c
  5680  000808  0E27               	movlw	39
  5681  00080A                     i2u351_47:
  5682  00080A  2EE8               	decfsz	wreg,f,c
  5683  00080C  D7FE               	bra	i2u351_47
  5684  00080E  2E30               	decfsz	??_simulate& (0+255),f,c
  5685  000810  D7FC               	bra	i2u351_47
  5686  000812  2E31               	decfsz	(??_simulate+1)& (0+255),f,c
  5687  000814  D7FA               	bra	i2u351_47
  5688  000816  F000               	nop	
  5689                           
  5690                           ;main.c: 178: showInfo(period, sorted);
  5691  000818  C050  F023         	movff	simulate@period,showInfo@time
  5692  00081C  C051  F024         	movff	simulate@period+1,showInfo@time+1
  5693  000820  0E52               	movlw	low simulate@sorted
  5694  000822  6E25               	movwf	showInfo@sorted,c
  5695  000824  0E00               	movlw	high simulate@sorted
  5696  000826  6E26               	movwf	showInfo@sorted+1,c
  5697  000828  ECE8  F005         	call	_showInfo	;wreg free
  5698                           
  5699                           ;main.c: 179: mode = 0;
  5700  00082C  0E00               	movlw	0
  5701  00082E  6E76               	movwf	_mode+1,c
  5702  000830  0E00               	movlw	0
  5703  000832  6E75               	movwf	_mode,c
  5704  000834  0012               	return		;funcret
  5705  000836                     __end_of_simulate:
  5706                           	opt stack 0
  5707                           pclatu	equ	0xFFB
  5708                           pclath	equ	0xFFA
  5709                           tblptru	equ	0xFF8
  5710                           tblptrh	equ	0xFF7
  5711                           tblptrl	equ	0xFF6
  5712                           tablat	equ	0xFF5
  5713                           prodh	equ	0xFF4
  5714                           prodl	equ	0xFF3
  5715                           intcon	equ	0xFF2
  5716                           intcon2	equ	0xFF1
  5717                           intcon3	equ	0xFF0
  5718                           postinc0	equ	0xFEE
  5719                           fsr0h	equ	0xFEA
  5720                           fsr0l	equ	0xFE9
  5721                           wreg	equ	0xFE8
  5722                           plusw1	equ	0xFE3
  5723                           fsr1h	equ	0xFE2
  5724                           fsr1l	equ	0xFE1
  5725                           indf2	equ	0xFDF
  5726                           postinc2	equ	0xFDE
  5727                           postdec2	equ	0xFDD
  5728                           plusw2	equ	0xFDB
  5729                           fsr2h	equ	0xFDA
  5730                           fsr2l	equ	0xFD9
  5731                           status	equ	0xFD8
  5732                           
  5733 ;; *************** function i2_getTime *****************
  5734 ;; Defined at:
  5735 ;;		line 76 in file "modules.c"
  5736 ;; Parameters:    Size  Location     Type
  5737 ;;  time            2    3[COMRAM] PTR unsigned char 
  5738 ;;		 -> time(7), 
  5739 ;; Auto vars:     Size  Location     Type
  5740 ;;  getTime         1    5[COMRAM] unsigned char 
  5741 ;; Return value:  Size  Location     Type
  5742 ;;                  1    wreg      void 
  5743 ;; Registers used:
  5744 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5745 ;; Tracked objects:
  5746 ;;		On entry : 0/0
  5747 ;;		On exit  : 0/0
  5748 ;;		Unchanged: 0/0
  5749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5750 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5751 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5753 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5754 ;;Total ram usage:        3 bytes
  5755 ;; Hardware stack levels used:    1
  5756 ;; Hardware stack levels required when called:    2
  5757 ;; This function calls:
  5758 ;;		i2_I2C_Master_Read
  5759 ;;		i2_I2C_Master_Start
  5760 ;;		i2_I2C_Master_Stop
  5761 ;;		i2_I2C_Master_Write
  5762 ;; This function is called by:
  5763 ;;		_simulate
  5764 ;; This function uses a non-reentrant model
  5765 ;;
  5766                           
  5767                           	psect	text24
  5768  001AB2                     __ptext24:
  5769                           	opt stack 0
  5770  001AB2                     i2_getTime:
  5771                           	opt stack 22
  5772                           
  5773                           ;modules.c: 77: (INTCONbits.GIE = 0);
  5774                           
  5775                           ;incstack = 0
  5776  001AB2  9EF2               	bcf	intcon,7,c	;volatile
  5777                           
  5778                           ;modules.c: 81: I2C_Master_Start();
  5779  001AB4  ECE3  F011         	call	i2_I2C_Master_Start	;wreg free
  5780                           
  5781                           ;modules.c: 82: I2C_Master_Write(0b11010000);
  5782  001AB8  0E00               	movlw	0
  5783  001ABA  6E03               	movwf	i2I2C_Master_Write@d+1,c
  5784  001ABC  0ED0               	movlw	208
  5785  001ABE  6E02               	movwf	i2I2C_Master_Write@d,c
  5786  001AC0  ECD2  F011         	call	i2_I2C_Master_Write	;wreg free
  5787                           
  5788                           ;modules.c: 83: I2C_Master_Write(0x00);
  5789  001AC4  0E00               	movlw	0
  5790  001AC6  6E03               	movwf	i2I2C_Master_Write@d+1,c
  5791  001AC8  0E00               	movlw	0
  5792  001ACA  6E02               	movwf	i2I2C_Master_Write@d,c
  5793  001ACC  ECD2  F011         	call	i2_I2C_Master_Write	;wreg free
  5794                           
  5795                           ;modules.c: 84: I2C_Master_Stop();
  5796  001AD0  ECDF  F011         	call	i2_I2C_Master_Stop	;wreg free
  5797                           
  5798                           ;modules.c: 87: I2C_Master_Start();
  5799  001AD4  ECE3  F011         	call	i2_I2C_Master_Start	;wreg free
  5800                           
  5801                           ;modules.c: 88: I2C_Master_Write(0b11010001);
  5802  001AD8  0E00               	movlw	0
  5803  001ADA  6E03               	movwf	i2I2C_Master_Write@d+1,c
  5804  001ADC  0ED1               	movlw	209
  5805  001ADE  6E02               	movwf	i2I2C_Master_Write@d,c
  5806  001AE0  ECD2  F011         	call	i2_I2C_Master_Write	;wreg free
  5807                           
  5808                           ;modules.c: 89: for (unsigned char i = 0; i < 0x06; i++) {
  5809  001AE4  0E00               	movlw	0
  5810  001AE6  6E06               	movwf	i2getTime@i,c
  5811  001AE8                     i2l3906:
  5812  001AE8  0E05               	movlw	5
  5813  001AEA  6406               	cpfsgt	i2getTime@i,c
  5814  001AEC  D001               	goto	i2l3910
  5815  001AEE  D00E               	goto	i2l3916
  5816  001AF0                     i2l3910:
  5817                           
  5818                           ;modules.c: 90: time[i] = I2C_Master_Read(1);
  5819  001AF0  5006               	movf	i2getTime@i,w,c
  5820  001AF2  0D01               	mullw	1
  5821  001AF4  50F3               	movf	prodl,w,c
  5822  001AF6  2404               	addwf	i2getTime@time,w,c
  5823  001AF8  6ED9               	movwf	fsr2l,c
  5824  001AFA  50F4               	movf	prodh,w,c
  5825  001AFC  2005               	addwfc	i2getTime@time+1,w,c
  5826  001AFE  6EDA               	movwf	fsr2h,c
  5827  001B00  0E01               	movlw	1
  5828  001B02  EC11  F011         	call	i2_I2C_Master_Read
  5829  001B06  6EDF               	movwf	indf2,c
  5830  001B08  2A06               	incf	i2getTime@i,f,c
  5831  001B0A  D7EE               	goto	i2l3906
  5832  001B0C                     i2l3916:
  5833                           
  5834                           ;modules.c: 91: }
  5835                           ;modules.c: 92: time[6] = I2C_Master_Read(0);
  5836  001B0C  EE20 F006          	lfsr	2,6
  5837  001B10  5004               	movf	i2getTime@time,w,c
  5838  001B12  26D9               	addwf	fsr2l,f,c
  5839  001B14  5005               	movf	i2getTime@time+1,w,c
  5840  001B16  22DA               	addwfc	fsr2h,f,c
  5841  001B18  0E00               	movlw	0
  5842  001B1A  EC11  F011         	call	i2_I2C_Master_Read
  5843  001B1E  6EDF               	movwf	indf2,c
  5844                           
  5845                           ;modules.c: 93: I2C_Master_Stop();
  5846  001B20  ECDF  F011         	call	i2_I2C_Master_Stop	;wreg free
  5847                           
  5848                           ;modules.c: 94: (INTCONbits.GIE = 1);
  5849  001B24  8EF2               	bsf	intcon,7,c	;volatile
  5850  001B26  0012               	return		;funcret
  5851  001B28                     __end_ofi2_getTime:
  5852                           	opt stack 0
  5853                           pclatu	equ	0xFFB
  5854                           pclath	equ	0xFFA
  5855                           tblptru	equ	0xFF8
  5856                           tblptrh	equ	0xFF7
  5857                           tblptrl	equ	0xFF6
  5858                           tablat	equ	0xFF5
  5859                           prodh	equ	0xFF4
  5860                           prodl	equ	0xFF3
  5861                           intcon	equ	0xFF2
  5862                           intcon2	equ	0xFF1
  5863                           intcon3	equ	0xFF0
  5864                           postinc0	equ	0xFEE
  5865                           fsr0h	equ	0xFEA
  5866                           fsr0l	equ	0xFE9
  5867                           wreg	equ	0xFE8
  5868                           plusw1	equ	0xFE3
  5869                           fsr1h	equ	0xFE2
  5870                           fsr1l	equ	0xFE1
  5871                           indf2	equ	0xFDF
  5872                           postinc2	equ	0xFDE
  5873                           postdec2	equ	0xFDD
  5874                           plusw2	equ	0xFDB
  5875                           fsr2h	equ	0xFDA
  5876                           fsr2l	equ	0xFD9
  5877                           status	equ	0xFD8
  5878                           
  5879 ;; *************** function i2_I2C_Master_Write *****************
  5880 ;; Defined at:
  5881 ;;		line 42 in file "I2C.c"
  5882 ;; Parameters:    Size  Location     Type
  5883 ;;  d               2    1[COMRAM] unsigned int 
  5884 ;; Auto vars:     Size  Location     Type
  5885 ;;		None
  5886 ;; Return value:  Size  Location     Type
  5887 ;;                  1    wreg      void 
  5888 ;; Registers used:
  5889 ;;		wreg, status,2, status,0, cstack
  5890 ;; Tracked objects:
  5891 ;;		On entry : 0/0
  5892 ;;		On exit  : 0/0
  5893 ;;		Unchanged: 0/0
  5894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5895 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5898 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5899 ;;Total ram usage:        2 bytes
  5900 ;; Hardware stack levels used:    1
  5901 ;; Hardware stack levels required when called:    1
  5902 ;; This function calls:
  5903 ;;		i2_I2C_Master_Wait
  5904 ;; This function is called by:
  5905 ;;		i2_getTime
  5906 ;; This function uses a non-reentrant model
  5907 ;;
  5908                           
  5909                           	psect	text25
  5910  0023A4                     __ptext25:
  5911                           	opt stack 0
  5912  0023A4                     i2_I2C_Master_Write:
  5913                           	opt stack 22
  5914                           
  5915                           ;I2C.c: 43: I2C_Master_Wait();
  5916                           
  5917                           ;incstack = 0
  5918  0023A4  ECA8  F011         	call	i2_I2C_Master_Wait	;wreg free
  5919                           
  5920                           ;I2C.c: 44: SSPBUF = d;
  5921  0023A8  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
  5922  0023AC  0012               	return		;funcret
  5923  0023AE                     __end_ofi2_I2C_Master_Write:
  5924                           	opt stack 0
  5925                           pclatu	equ	0xFFB
  5926                           pclath	equ	0xFFA
  5927                           tblptru	equ	0xFF8
  5928                           tblptrh	equ	0xFF7
  5929                           tblptrl	equ	0xFF6
  5930                           tablat	equ	0xFF5
  5931                           prodh	equ	0xFF4
  5932                           prodl	equ	0xFF3
  5933                           intcon	equ	0xFF2
  5934                           intcon2	equ	0xFF1
  5935                           intcon3	equ	0xFF0
  5936                           postinc0	equ	0xFEE
  5937                           fsr0h	equ	0xFEA
  5938                           fsr0l	equ	0xFE9
  5939                           wreg	equ	0xFE8
  5940                           plusw1	equ	0xFE3
  5941                           fsr1h	equ	0xFE2
  5942                           fsr1l	equ	0xFE1
  5943                           indf2	equ	0xFDF
  5944                           postinc2	equ	0xFDE
  5945                           postdec2	equ	0xFDD
  5946                           plusw2	equ	0xFDB
  5947                           fsr2h	equ	0xFDA
  5948                           fsr2l	equ	0xFD9
  5949                           status	equ	0xFD8
  5950                           
  5951 ;; *************** function i2_I2C_Master_Stop *****************
  5952 ;; Defined at:
  5953 ;;		line 37 in file "I2C.c"
  5954 ;; Parameters:    Size  Location     Type
  5955 ;;		None
  5956 ;; Auto vars:     Size  Location     Type
  5957 ;;		None
  5958 ;; Return value:  Size  Location     Type
  5959 ;;                  1    wreg      void 
  5960 ;; Registers used:
  5961 ;;		wreg, status,2, status,0, cstack
  5962 ;; Tracked objects:
  5963 ;;		On entry : 0/0
  5964 ;;		On exit  : 0/0
  5965 ;;		Unchanged: 0/0
  5966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5969 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5970 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5971 ;;Total ram usage:        0 bytes
  5972 ;; Hardware stack levels used:    1
  5973 ;; Hardware stack levels required when called:    1
  5974 ;; This function calls:
  5975 ;;		i2_I2C_Master_Wait
  5976 ;; This function is called by:
  5977 ;;		i2_getTime
  5978 ;; This function uses a non-reentrant model
  5979 ;;
  5980                           
  5981                           	psect	text26
  5982  0023BE                     __ptext26:
  5983                           	opt stack 0
  5984  0023BE                     i2_I2C_Master_Stop:
  5985                           	opt stack 22
  5986                           
  5987                           ;I2C.c: 38: I2C_Master_Wait();
  5988                           
  5989                           ;incstack = 0
  5990  0023BE  ECA8  F011         	call	i2_I2C_Master_Wait	;wreg free
  5991                           
  5992                           ;I2C.c: 39: PEN = 1;
  5993  0023C2  84C5               	bsf	4037,2,c	;volatile
  5994  0023C4  0012               	return		;funcret
  5995  0023C6                     __end_ofi2_I2C_Master_Stop:
  5996                           	opt stack 0
  5997                           pclatu	equ	0xFFB
  5998                           pclath	equ	0xFFA
  5999                           tblptru	equ	0xFF8
  6000                           tblptrh	equ	0xFF7
  6001                           tblptrl	equ	0xFF6
  6002                           tablat	equ	0xFF5
  6003                           prodh	equ	0xFF4
  6004                           prodl	equ	0xFF3
  6005                           intcon	equ	0xFF2
  6006                           intcon2	equ	0xFF1
  6007                           intcon3	equ	0xFF0
  6008                           postinc0	equ	0xFEE
  6009                           fsr0h	equ	0xFEA
  6010                           fsr0l	equ	0xFE9
  6011                           wreg	equ	0xFE8
  6012                           plusw1	equ	0xFE3
  6013                           fsr1h	equ	0xFE2
  6014                           fsr1l	equ	0xFE1
  6015                           indf2	equ	0xFDF
  6016                           postinc2	equ	0xFDE
  6017                           postdec2	equ	0xFDD
  6018                           plusw2	equ	0xFDB
  6019                           fsr2h	equ	0xFDA
  6020                           fsr2l	equ	0xFD9
  6021                           status	equ	0xFD8
  6022                           
  6023 ;; *************** function i2_I2C_Master_Start *****************
  6024 ;; Defined at:
  6025 ;;		line 27 in file "I2C.c"
  6026 ;; Parameters:    Size  Location     Type
  6027 ;;		None
  6028 ;; Auto vars:     Size  Location     Type
  6029 ;;		None
  6030 ;; Return value:  Size  Location     Type
  6031 ;;                  1    wreg      void 
  6032 ;; Registers used:
  6033 ;;		wreg, status,2, status,0, cstack
  6034 ;; Tracked objects:
  6035 ;;		On entry : 0/0
  6036 ;;		On exit  : 0/0
  6037 ;;		Unchanged: 0/0
  6038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6042 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6043 ;;Total ram usage:        0 bytes
  6044 ;; Hardware stack levels used:    1
  6045 ;; Hardware stack levels required when called:    1
  6046 ;; This function calls:
  6047 ;;		i2_I2C_Master_Wait
  6048 ;; This function is called by:
  6049 ;;		i2_getTime
  6050 ;; This function uses a non-reentrant model
  6051 ;;
  6052                           
  6053                           	psect	text27
  6054  0023C6                     __ptext27:
  6055                           	opt stack 0
  6056  0023C6                     i2_I2C_Master_Start:
  6057                           	opt stack 22
  6058                           
  6059                           ;I2C.c: 28: I2C_Master_Wait();
  6060                           
  6061                           ;incstack = 0
  6062  0023C6  ECA8  F011         	call	i2_I2C_Master_Wait	;wreg free
  6063                           
  6064                           ;I2C.c: 29: SEN = 1;
  6065  0023CA  80C5               	bsf	4037,0,c	;volatile
  6066  0023CC  0012               	return		;funcret
  6067  0023CE                     __end_ofi2_I2C_Master_Start:
  6068                           	opt stack 0
  6069                           pclatu	equ	0xFFB
  6070                           pclath	equ	0xFFA
  6071                           tblptru	equ	0xFF8
  6072                           tblptrh	equ	0xFF7
  6073                           tblptrl	equ	0xFF6
  6074                           tablat	equ	0xFF5
  6075                           prodh	equ	0xFF4
  6076                           prodl	equ	0xFF3
  6077                           intcon	equ	0xFF2
  6078                           intcon2	equ	0xFF1
  6079                           intcon3	equ	0xFF0
  6080                           postinc0	equ	0xFEE
  6081                           fsr0h	equ	0xFEA
  6082                           fsr0l	equ	0xFE9
  6083                           wreg	equ	0xFE8
  6084                           plusw1	equ	0xFE3
  6085                           fsr1h	equ	0xFE2
  6086                           fsr1l	equ	0xFE1
  6087                           indf2	equ	0xFDF
  6088                           postinc2	equ	0xFDE
  6089                           postdec2	equ	0xFDD
  6090                           plusw2	equ	0xFDB
  6091                           fsr2h	equ	0xFDA
  6092                           fsr2l	equ	0xFD9
  6093                           status	equ	0xFD8
  6094                           
  6095 ;; *************** function i2_I2C_Master_Read *****************
  6096 ;; Defined at:
  6097 ;;		line 47 in file "I2C.c"
  6098 ;; Parameters:    Size  Location     Type
  6099 ;;  a               1    wreg     unsigned char 
  6100 ;; Auto vars:     Size  Location     Type
  6101 ;;  a               1    1[COMRAM] unsigned char 
  6102 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
  6103 ;; Return value:  Size  Location     Type
  6104 ;;                  1    wreg      unsigned char 
  6105 ;; Registers used:
  6106 ;;		wreg, status,2, status,0, cstack
  6107 ;; Tracked objects:
  6108 ;;		On entry : 0/0
  6109 ;;		On exit  : 0/0
  6110 ;;		Unchanged: 0/0
  6111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6113 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6115 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6116 ;;Total ram usage:        2 bytes
  6117 ;; Hardware stack levels used:    1
  6118 ;; Hardware stack levels required when called:    1
  6119 ;; This function calls:
  6120 ;;		i2_I2C_Master_Wait
  6121 ;; This function is called by:
  6122 ;;		i2_getTime
  6123 ;; This function uses a non-reentrant model
  6124 ;;
  6125                           
  6126                           	psect	text28
  6127  002222                     __ptext28:
  6128                           	opt stack 0
  6129  002222                     i2_I2C_Master_Read:
  6130                           	opt stack 22
  6131                           
  6132                           ;incstack = 0
  6133                           ;i2I2C_Master_Read@a stored from wreg
  6134  002222  6E02               	movwf	i2I2C_Master_Read@a,c
  6135                           
  6136                           ;I2C.c: 48: unsigned char temp;
  6137                           ;I2C.c: 49: I2C_Master_Wait();
  6138  002224  ECA8  F011         	call	i2_I2C_Master_Wait	;wreg free
  6139                           
  6140                           ;I2C.c: 50: RCEN = 1;
  6141  002228  86C5               	bsf	4037,3,c	;volatile
  6142                           
  6143                           ;I2C.c: 51: I2C_Master_Wait();
  6144  00222A  ECA8  F011         	call	i2_I2C_Master_Wait	;wreg free
  6145                           
  6146                           ;I2C.c: 52: temp = SSPBUF;
  6147  00222E  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
  6148                           
  6149                           ;I2C.c: 53: I2C_Master_Wait();
  6150  002232  ECA8  F011         	call	i2_I2C_Master_Wait	;wreg free
  6151                           
  6152                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
  6153  002236  5002               	movf	i2I2C_Master_Read@a,w,c
  6154  002238  A4D8               	btfss	status,2,c
  6155  00223A  D002               	goto	i2u269_40
  6156  00223C  8AC5               	bsf	4037,5,c	;volatile
  6157  00223E  D001               	goto	i2l3472
  6158  002240                     i2u269_40:
  6159  002240  9AC5               	bcf	4037,5,c	;volatile
  6160  002242                     i2l3472:
  6161                           
  6162                           ;I2C.c: 55: ACKEN = 1;
  6163  002242  88C5               	bsf	4037,4,c	;volatile
  6164                           
  6165                           ;I2C.c: 56: return temp;
  6166  002244  5003               	movf	i2I2C_Master_Read@temp,w,c
  6167  002246  0012               	return	
  6168  002248                     __end_ofi2_I2C_Master_Read:
  6169                           	opt stack 0
  6170                           pclatu	equ	0xFFB
  6171                           pclath	equ	0xFFA
  6172                           tblptru	equ	0xFF8
  6173                           tblptrh	equ	0xFF7
  6174                           tblptrl	equ	0xFF6
  6175                           tablat	equ	0xFF5
  6176                           prodh	equ	0xFF4
  6177                           prodl	equ	0xFF3
  6178                           intcon	equ	0xFF2
  6179                           intcon2	equ	0xFF1
  6180                           intcon3	equ	0xFF0
  6181                           postinc0	equ	0xFEE
  6182                           fsr0h	equ	0xFEA
  6183                           fsr0l	equ	0xFE9
  6184                           wreg	equ	0xFE8
  6185                           plusw1	equ	0xFE3
  6186                           fsr1h	equ	0xFE2
  6187                           fsr1l	equ	0xFE1
  6188                           indf2	equ	0xFDF
  6189                           postinc2	equ	0xFDE
  6190                           postdec2	equ	0xFDD
  6191                           plusw2	equ	0xFDB
  6192                           fsr2h	equ	0xFDA
  6193                           fsr2l	equ	0xFD9
  6194                           status	equ	0xFD8
  6195                           
  6196 ;; *************** function i2_I2C_Master_Wait *****************
  6197 ;; Defined at:
  6198 ;;		line 23 in file "I2C.c"
  6199 ;; Parameters:    Size  Location     Type
  6200 ;;		None
  6201 ;; Auto vars:     Size  Location     Type
  6202 ;;		None
  6203 ;; Return value:  Size  Location     Type
  6204 ;;                  1    wreg      void 
  6205 ;; Registers used:
  6206 ;;		wreg, status,2, status,0
  6207 ;; Tracked objects:
  6208 ;;		On entry : 0/0
  6209 ;;		On exit  : 0/0
  6210 ;;		Unchanged: 0/0
  6211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6214 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6215 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6216 ;;Total ram usage:        1 bytes
  6217 ;; Hardware stack levels used:    1
  6218 ;; This function calls:
  6219 ;;		Nothing
  6220 ;; This function is called by:
  6221 ;;		i2_I2C_Master_Start
  6222 ;;		i2_I2C_Master_Stop
  6223 ;;		i2_I2C_Master_Write
  6224 ;;		i2_I2C_Master_Read
  6225 ;; This function uses a non-reentrant model
  6226 ;;
  6227                           
  6228                           	psect	text29
  6229  002350                     __ptext29:
  6230                           	opt stack 0
  6231  002350                     i2_I2C_Master_Wait:
  6232                           	opt stack 22
  6233  002350                     i2l374:
  6234  002350  B4C7               	btfsc	4039,2,c	;volatile
  6235  002352  D7FE               	goto	i2l374
  6236  002354  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
  6237  002358  0E1F               	movlw	31
  6238  00235A  1601               	andwf	??i2_I2C_Master_Wait,f,c
  6239  00235C  B4D8               	btfsc	status,2,c
  6240  00235E  0012               	return	
  6241  002360  D7F7               	goto	i2l374
  6242  002362                     __end_ofi2_I2C_Master_Wait:
  6243                           	opt stack 0
  6244                           pclatu	equ	0xFFB
  6245                           pclath	equ	0xFFA
  6246                           tblptru	equ	0xFF8
  6247                           tblptrh	equ	0xFF7
  6248                           tblptrl	equ	0xFF6
  6249                           tablat	equ	0xFF5
  6250                           prodh	equ	0xFF4
  6251                           prodl	equ	0xFF3
  6252                           intcon	equ	0xFF2
  6253                           intcon2	equ	0xFF1
  6254                           intcon3	equ	0xFF0
  6255                           postinc0	equ	0xFEE
  6256                           fsr0h	equ	0xFEA
  6257                           fsr0l	equ	0xFE9
  6258                           wreg	equ	0xFE8
  6259                           plusw1	equ	0xFE3
  6260                           fsr1h	equ	0xFE2
  6261                           fsr1l	equ	0xFE1
  6262                           indf2	equ	0xFDF
  6263                           postinc2	equ	0xFDE
  6264                           postdec2	equ	0xFDD
  6265                           plusw2	equ	0xFDB
  6266                           fsr2h	equ	0xFDA
  6267                           fsr2l	equ	0xFD9
  6268                           status	equ	0xFD8
  6269                           
  6270 ;; *************** function _stopMoving *****************
  6271 ;; Defined at:
  6272 ;;		line 42 in file "motors.c"
  6273 ;; Parameters:    Size  Location     Type
  6274 ;;  em              1    wreg     unsigned char 
  6275 ;; Auto vars:     Size  Location     Type
  6276 ;;  em              1   36[COMRAM] unsigned char 
  6277 ;; Return value:  Size  Location     Type
  6278 ;;                  1    wreg      void 
  6279 ;; Registers used:
  6280 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6281 ;; Tracked objects:
  6282 ;;		On entry : 0/0
  6283 ;;		On exit  : 0/0
  6284 ;;		Unchanged: 0/0
  6285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6287 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6289 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6290 ;;Total ram usage:        3 bytes
  6291 ;; Hardware stack levels used:    1
  6292 ;; Hardware stack levels required when called:    3
  6293 ;; This function calls:
  6294 ;;		i2_lcdInst
  6295 ;;		i2_printf
  6296 ;; This function is called by:
  6297 ;;		_simulate
  6298 ;;		_intrpt
  6299 ;; This function uses a non-reentrant model
  6300 ;;
  6301                           
  6302                           	psect	text30
  6303  0020AC                     __ptext30:
  6304                           	opt stack 0
  6305  0020AC                     _stopMoving:
  6306                           	opt stack 22
  6307                           
  6308                           ;incstack = 0
  6309                           ;stopMoving@em stored from wreg
  6310  0020AC  6E25               	movwf	stopMoving@em,c
  6311                           
  6312                           ;motors.c: 43: (INTCONbits.GIE = 0);
  6313  0020AE  9EF2               	bcf	intcon,7,c	;volatile
  6314                           
  6315                           ;motors.c: 44: LATC = 0;
  6316  0020B0  0E00               	movlw	0
  6317  0020B2  6E8B               	movwf	3979,c	;volatile
  6318                           
  6319                           ;motors.c: 45: lcdInst(0b10000000);
  6320  0020B4  0E80               	movlw	128
  6321  0020B6  ECC7  F011         	call	i2_lcdInst
  6322                           
  6323                           ;motors.c: 46: printf(em ? "Emergency          " : "Stopped          ");
  6324  0020BA  5025               	movf	stopMoving@em,w,c
  6325  0020BC  A4D8               	btfss	status,2,c
  6326  0020BE  D004               	goto	i2l3782
  6327  0020C0  0E81               	movlw	low STR_35
  6328  0020C2  6E23               	movwf	_stopMoving$557,c
  6329  0020C4  0EFF               	movlw	high STR_35
  6330  0020C6  D003               	goto	L1
  6331  0020C8                     i2l3782:
  6332  0020C8  0E34               	movlw	low STR_34
  6333  0020CA  6E23               	movwf	_stopMoving$557,c
  6334  0020CC  0EFF               	movlw	high STR_34
  6335  0020CE                     L1:
  6336  0020CE  6E24               	movwf	_stopMoving$557+1,c
  6337  0020D0  C023  F00D         	movff	_stopMoving$557,i2printf@f
  6338  0020D4  C024  F00E         	movff	_stopMoving$557+1,i2printf@f+1
  6339  0020D8  EC1B  F004         	call	i2_printf	;wreg free
  6340                           
  6341                           ;motors.c: 47: if (em)
  6342  0020DC  5025               	movf	stopMoving@em,w,c
  6343  0020DE  B4D8               	btfsc	status,2,c
  6344  0020E0  0012               	return	
  6345  0020E2                     i2l292:
  6346  0020E2  D7FF               	goto	i2l292
  6347  0020E4                     __end_of_stopMoving:
  6348                           	opt stack 0
  6349                           pclatu	equ	0xFFB
  6350                           pclath	equ	0xFFA
  6351                           tblptru	equ	0xFF8
  6352                           tblptrh	equ	0xFF7
  6353                           tblptrl	equ	0xFF6
  6354                           tablat	equ	0xFF5
  6355                           prodh	equ	0xFF4
  6356                           prodl	equ	0xFF3
  6357                           intcon	equ	0xFF2
  6358                           intcon2	equ	0xFF1
  6359                           intcon3	equ	0xFF0
  6360                           postinc0	equ	0xFEE
  6361                           fsr0h	equ	0xFEA
  6362                           fsr0l	equ	0xFE9
  6363                           wreg	equ	0xFE8
  6364                           plusw1	equ	0xFE3
  6365                           fsr1h	equ	0xFE2
  6366                           fsr1l	equ	0xFE1
  6367                           indf2	equ	0xFDF
  6368                           postinc2	equ	0xFDE
  6369                           postdec2	equ	0xFDD
  6370                           plusw2	equ	0xFDB
  6371                           fsr2h	equ	0xFDA
  6372                           fsr2l	equ	0xFD9
  6373                           status	equ	0xFD8
  6374                           
  6375 ;; *************** function _shake *****************
  6376 ;; Defined at:
  6377 ;;		line 31 in file "motors.c"
  6378 ;; Parameters:    Size  Location     Type
  6379 ;;  port            2   21[COMRAM] PTR int 
  6380 ;;		 -> simulate@portShake(0), 
  6381 ;; Auto vars:     Size  Location     Type
  6382 ;;		None
  6383 ;; Return value:  Size  Location     Type
  6384 ;;                  1    wreg      void 
  6385 ;; Registers used:
  6386 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6387 ;; Tracked objects:
  6388 ;;		On entry : 0/0
  6389 ;;		On exit  : 0/0
  6390 ;;		Unchanged: 0/0
  6391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6392 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6394 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6395 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6396 ;;Total ram usage:        8 bytes
  6397 ;; Hardware stack levels used:    1
  6398 ;; Hardware stack levels required when called:    2
  6399 ;; This function calls:
  6400 ;;		_PWMC
  6401 ;; This function is called by:
  6402 ;;		_simulate
  6403 ;; This function uses a non-reentrant model
  6404 ;;
  6405                           
  6406                           	psect	text31
  6407  00135E                     __ptext31:
  6408                           	opt stack 0
  6409  00135E                     _shake:
  6410                           	opt stack 22
  6411                           
  6412                           ;motors.c: 32: if (port[0] + port[1] + port[2] == 0)return;
  6413                           
  6414                           ;incstack = 0
  6415  00135E  EE20 F004          	lfsr	2,4
  6416  001362  5016               	movf	shake@port,w,c
  6417  001364  26D9               	addwf	fsr2l,f,c
  6418  001366  5017               	movf	shake@port+1,w,c
  6419  001368  22DA               	addwfc	fsr2h,f,c
  6420  00136A  CFDE F018          	movff	postinc2,??_shake
  6421  00136E  CFDD F019          	movff	postdec2,??_shake+1
  6422  001372  EE20 F002          	lfsr	2,2
  6423  001376  5016               	movf	shake@port,w,c
  6424  001378  26D9               	addwf	fsr2l,f,c
  6425  00137A  5017               	movf	shake@port+1,w,c
  6426  00137C  22DA               	addwfc	fsr2h,f,c
  6427  00137E  CFDE F01A          	movff	postinc2,??_shake+2
  6428  001382  CFDD F01B          	movff	postdec2,??_shake+3
  6429  001386  C016  FFD9         	movff	shake@port,fsr2l
  6430  00138A  C017  FFDA         	movff	shake@port+1,fsr2h
  6431  00138E  CFDE F01C          	movff	postinc2,??_shake+4
  6432  001392  CFDD F01D          	movff	postdec2,??_shake+5
  6433  001396  501A               	movf	??_shake+2,w,c
  6434  001398  261C               	addwf	??_shake+4,f,c
  6435  00139A  501B               	movf	??_shake+3,w,c
  6436  00139C  221D               	addwfc	??_shake+5,f,c
  6437  00139E  5018               	movf	??_shake,w,c
  6438  0013A0  261C               	addwf	??_shake+4,f,c
  6439  0013A2  5019               	movf	??_shake+1,w,c
  6440  0013A4  221D               	addwfc	??_shake+5,f,c
  6441  0013A6  501C               	movf	??_shake+4,w,c
  6442  0013A8  101D               	iorwf	??_shake+5,w,c
  6443  0013AA  B4D8               	btfsc	status,2,c
  6444  0013AC  0012               	return	
  6445                           
  6446                           ;motors.c: 33: PWMC(450, 160, port);
  6447  0013AE  0E01               	movlw	1
  6448  0013B0  6E0A               	movwf	PWMC@widthus+1,c
  6449  0013B2  0EC2               	movlw	194
  6450  0013B4  6E09               	movwf	PWMC@widthus,c
  6451  0013B6  0E00               	movlw	0
  6452  0013B8  6E0C               	movwf	PWMC@cycles+1,c
  6453  0013BA  0EA0               	movlw	160
  6454  0013BC  6E0B               	movwf	PWMC@cycles,c
  6455  0013BE  C016  F00D         	movff	shake@port,PWMC@port
  6456  0013C2  C017  F00E         	movff	shake@port+1,PWMC@port+1
  6457  0013C6  EC28  F00A         	call	_PWMC	;wreg free
  6458                           
  6459                           ;motors.c: 34: PWMC(5000, 2, port);
  6460  0013CA  0E13               	movlw	19
  6461  0013CC  6E0A               	movwf	PWMC@widthus+1,c
  6462  0013CE  0E88               	movlw	136
  6463  0013D0  6E09               	movwf	PWMC@widthus,c
  6464  0013D2  0E00               	movlw	0
  6465  0013D4  6E0C               	movwf	PWMC@cycles+1,c
  6466  0013D6  0E02               	movlw	2
  6467  0013D8  6E0B               	movwf	PWMC@cycles,c
  6468  0013DA  C016  F00D         	movff	shake@port,PWMC@port
  6469  0013DE  C017  F00E         	movff	shake@port+1,PWMC@port+1
  6470  0013E2  EC28  F00A         	call	_PWMC	;wreg free
  6471                           
  6472                           ;motors.c: 35: _delay((unsigned long)((400)*(8000000/4000.0)));
  6473  0013E6  0E05               	movlw	5
  6474  0013E8  6E19               	movwf	(??_shake+1)& (0+255),c
  6475  0013EA  0E0F               	movlw	15
  6476  0013EC  6E18               	movwf	??_shake& (0+255),c
  6477  0013EE  0EF1               	movlw	241
  6478  0013F0                     i2u352_47:
  6479  0013F0  2EE8               	decfsz	wreg,f,c
  6480  0013F2  D7FE               	bra	i2u352_47
  6481  0013F4  2E18               	decfsz	??_shake& (0+255),f,c
  6482  0013F6  D7FC               	bra	i2u352_47
  6483  0013F8  2E19               	decfsz	(??_shake+1)& (0+255),f,c
  6484  0013FA  D7FA               	bra	i2u352_47
  6485  0013FC  F000               	nop	
  6486                           
  6487                           ;motors.c: 36: PWMC(5000, 20, port);
  6488  0013FE  0E13               	movlw	19
  6489  001400  6E0A               	movwf	PWMC@widthus+1,c
  6490  001402  0E88               	movlw	136
  6491  001404  6E09               	movwf	PWMC@widthus,c
  6492  001406  0E00               	movlw	0
  6493  001408  6E0C               	movwf	PWMC@cycles+1,c
  6494  00140A  0E14               	movlw	20
  6495  00140C  6E0B               	movwf	PWMC@cycles,c
  6496  00140E  C016  F00D         	movff	shake@port,PWMC@port
  6497  001412  C017  F00E         	movff	shake@port+1,PWMC@port+1
  6498  001416  EC28  F00A         	call	_PWMC	;wreg free
  6499                           
  6500                           ;motors.c: 37: PWMC(450, 2, port);
  6501  00141A  0E01               	movlw	1
  6502  00141C  6E0A               	movwf	PWMC@widthus+1,c
  6503  00141E  0EC2               	movlw	194
  6504  001420  6E09               	movwf	PWMC@widthus,c
  6505  001422  0E00               	movlw	0
  6506  001424  6E0C               	movwf	PWMC@cycles+1,c
  6507  001426  0E02               	movlw	2
  6508  001428  6E0B               	movwf	PWMC@cycles,c
  6509  00142A  C016  F00D         	movff	shake@port,PWMC@port
  6510  00142E  C017  F00E         	movff	shake@port+1,PWMC@port+1
  6511  001432  EC28  F00A         	call	_PWMC	;wreg free
  6512                           
  6513                           ;motors.c: 38: _delay((unsigned long)((390)*(8000000/4000.0)));
  6514  001436  0E04               	movlw	4
  6515  001438  6E19               	movwf	(??_shake+1)& (0+255),c
  6516  00143A  0EF5               	movlw	245
  6517  00143C  6E18               	movwf	??_shake& (0+255),c
  6518  00143E  0EF8               	movlw	248
  6519  001440                     i2u353_47:
  6520  001440  2EE8               	decfsz	wreg,f,c
  6521  001442  D7FE               	bra	i2u353_47
  6522  001444  2E18               	decfsz	??_shake& (0+255),f,c
  6523  001446  D7FC               	bra	i2u353_47
  6524  001448  2E19               	decfsz	(??_shake+1)& (0+255),f,c
  6525  00144A  D7FA               	bra	i2u353_47
  6526  00144C  D000               	nop2	
  6527  00144E  0012               	return		;funcret
  6528  001450                     __end_of_shake:
  6529                           	opt stack 0
  6530                           pclatu	equ	0xFFB
  6531                           pclath	equ	0xFFA
  6532                           tblptru	equ	0xFF8
  6533                           tblptrh	equ	0xFF7
  6534                           tblptrl	equ	0xFF6
  6535                           tablat	equ	0xFF5
  6536                           prodh	equ	0xFF4
  6537                           prodl	equ	0xFF3
  6538                           intcon	equ	0xFF2
  6539                           intcon2	equ	0xFF1
  6540                           intcon3	equ	0xFF0
  6541                           postinc0	equ	0xFEE
  6542                           fsr0h	equ	0xFEA
  6543                           fsr0l	equ	0xFE9
  6544                           wreg	equ	0xFE8
  6545                           plusw1	equ	0xFE3
  6546                           fsr1h	equ	0xFE2
  6547                           fsr1l	equ	0xFE1
  6548                           indf2	equ	0xFDF
  6549                           postinc2	equ	0xFDE
  6550                           postdec2	equ	0xFDD
  6551                           plusw2	equ	0xFDB
  6552                           fsr2h	equ	0xFDA
  6553                           fsr2l	equ	0xFD9
  6554                           status	equ	0xFD8
  6555                           
  6556 ;; *************** function _checkC *****************
  6557 ;; Defined at:
  6558 ;;		line 46 in file "sensors.c"
  6559 ;; Parameters:    Size  Location     Type
  6560 ;;  sorted          2   41[COMRAM] PTR unsigned char 
  6561 ;;		 -> simulate@sorted(4), 
  6562 ;; Auto vars:     Size  Location     Type
  6563 ;;  V               2   45[COMRAM] int 
  6564 ;; Return value:  Size  Location     Type
  6565 ;;                  2   41[COMRAM] int 
  6566 ;; Registers used:
  6567 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6568 ;; Tracked objects:
  6569 ;;		On entry : 0/0
  6570 ;;		On exit  : 0/0
  6571 ;;		Unchanged: 0/0
  6572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6573 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6574 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6575 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6576 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6577 ;;Total ram usage:        6 bytes
  6578 ;; Hardware stack levels used:    1
  6579 ;; Hardware stack levels required when called:    4
  6580 ;; This function calls:
  6581 ;;		_checkV
  6582 ;;		_printV
  6583 ;;		i2_printf
  6584 ;; This function is called by:
  6585 ;;		_simulate
  6586 ;; This function uses a non-reentrant model
  6587 ;;
  6588                           
  6589                           	psect	text32
  6590  001B28                     __ptext32:
  6591                           	opt stack 0
  6592  001B28                     _checkC:
  6593                           	opt stack 20
  6594                           
  6595                           ;sensors.c: 49: printf("C:");
  6596                           
  6597                           ;incstack = 0
  6598  001B28  0EEE               	movlw	low (STR_8+1)
  6599  001B2A  6E0D               	movwf	i2printf@f,c
  6600  001B2C  0EFF               	movlw	high (STR_8+1)
  6601  001B2E  6E0E               	movwf	i2printf@f+1,c
  6602  001B30  EC1B  F004         	call	i2_printf	;wreg free
  6603                           
  6604                           ;sensors.c: 50: int V = checkV(0, 1.5 / 5 * 1023);
  6605  001B34  0E01               	movlw	1
  6606  001B36  6E26               	movwf	checkV@threshhold+1,c
  6607  001B38  0E32               	movlw	50
  6608  001B3A  6E25               	movwf	checkV@threshhold,c
  6609  001B3C  0E00               	movlw	0
  6610  001B3E  EC0A  F00C         	call	_checkV
  6611  001B42  C025  F02E         	movff	?_checkV,checkC@V
  6612  001B46  C026  F02F         	movff	?_checkV+1,checkC@V+1
  6613                           
  6614                           ;sensors.c: 51: printV(V);
  6615  001B4A  C02E  F023         	movff	checkC@V,printV@charged
  6616  001B4E  C02F  F024         	movff	checkC@V+1,printV@charged+1
  6617  001B52  ECEA  F010         	call	_printV	;wreg free
  6618                           
  6619                           ;sensors.c: 52: switch (V) {
  6620  001B56  D00F               	goto	i2l3696
  6621  001B58                     i2l3694:
  6622                           
  6623                           ;sensors.c: 54: sorted[1]++;
  6624  001B58  EE20 F001          	lfsr	2,1
  6625  001B5C  502A               	movf	checkC@sorted,w,c
  6626  001B5E  26D9               	addwf	fsr2l,f,c
  6627  001B60  502B               	movf	checkC@sorted+1,w,c
  6628  001B62  22DA               	addwfc	fsr2h,f,c
  6629  001B64  2ADF               	incf	indf2,f,c
  6630  001B66                     i2l335:
  6631                           
  6632                           ;sensors.c: 56: sorted[3]++;
  6633  001B66  EE20 F003          	lfsr	2,3
  6634  001B6A  502A               	movf	checkC@sorted,w,c
  6635  001B6C  26D9               	addwf	fsr2l,f,c
  6636  001B6E  502B               	movf	checkC@sorted+1,w,c
  6637  001B70  22DA               	addwfc	fsr2h,f,c
  6638  001B72  2ADF               	incf	indf2,f,c
  6639                           
  6640                           ;sensors.c: 57: }
  6641  001B74  D00F               	goto	i2l336
  6642  001B76                     i2l3696:
  6643  001B76  C02E  F02C         	movff	checkC@V,??_checkC
  6644  001B7A  C02F  F02D         	movff	checkC@V+1,??_checkC+1
  6645                           
  6646                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6647                           ; Switch size 1, requested type "space"
  6648                           ; Number of cases is 1, Range of values is 0 to 0
  6649                           ; switch strategies available:
  6650                           ; Name         Instructions Cycles
  6651                           ; simple_byte            4     3 (average)
  6652                           ;	Chosen strategy is simple_byte
  6653  001B7E  502D               	movf	??_checkC+1,w,c
  6654  001B80  0A00               	xorlw	0	; case 0
  6655  001B82  A4D8               	btfss	status,2,c
  6656  001B84  D007               	goto	i2l336
  6657                           
  6658                           ; Switch size 1, requested type "space"
  6659                           ; Number of cases is 2, Range of values is 0 to 1
  6660                           ; switch strategies available:
  6661                           ; Name         Instructions Cycles
  6662                           ; simple_byte            7     4 (average)
  6663                           ;	Chosen strategy is simple_byte
  6664  001B86  502C               	movf	??_checkC,w,c
  6665  001B88  0A00               	xorlw	0	; case 0
  6666  001B8A  B4D8               	btfsc	status,2,c
  6667  001B8C  D7EC               	goto	i2l335
  6668  001B8E  0A01               	xorlw	1	; case 1
  6669  001B90  B4D8               	btfsc	status,2,c
  6670  001B92  D7E2               	goto	i2l3694
  6671  001B94                     i2l336:
  6672                           
  6673                           ;sensors.c: 58: return V;
  6674  001B94  C02E  F02A         	movff	checkC@V,?_checkC
  6675  001B98  C02F  F02B         	movff	checkC@V+1,?_checkC+1
  6676  001B9C  0012               	return		;funcret
  6677  001B9E                     __end_of_checkC:
  6678                           	opt stack 0
  6679                           pclatu	equ	0xFFB
  6680                           pclath	equ	0xFFA
  6681                           tblptru	equ	0xFF8
  6682                           tblptrh	equ	0xFF7
  6683                           tblptrl	equ	0xFF6
  6684                           tablat	equ	0xFF5
  6685                           prodh	equ	0xFF4
  6686                           prodl	equ	0xFF3
  6687                           intcon	equ	0xFF2
  6688                           intcon2	equ	0xFF1
  6689                           intcon3	equ	0xFF0
  6690                           postinc0	equ	0xFEE
  6691                           fsr0h	equ	0xFEA
  6692                           fsr0l	equ	0xFE9
  6693                           wreg	equ	0xFE8
  6694                           plusw1	equ	0xFE3
  6695                           fsr1h	equ	0xFE2
  6696                           fsr1l	equ	0xFE1
  6697                           indf2	equ	0xFDF
  6698                           postinc2	equ	0xFDE
  6699                           postdec2	equ	0xFDD
  6700                           plusw2	equ	0xFDB
  6701                           fsr2h	equ	0xFDA
  6702                           fsr2l	equ	0xFD9
  6703                           status	equ	0xFD8
  6704                           
  6705 ;; *************** function _checkAA *****************
  6706 ;; Defined at:
  6707 ;;		line 32 in file "sensors.c"
  6708 ;; Parameters:    Size  Location     Type
  6709 ;;  sorted          2   41[COMRAM] PTR unsigned char 
  6710 ;;		 -> simulate@sorted(4), 
  6711 ;; Auto vars:     Size  Location     Type
  6712 ;;  V               2   45[COMRAM] int 
  6713 ;; Return value:  Size  Location     Type
  6714 ;;                  2   41[COMRAM] int 
  6715 ;; Registers used:
  6716 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6717 ;; Tracked objects:
  6718 ;;		On entry : 0/0
  6719 ;;		On exit  : 0/0
  6720 ;;		Unchanged: 0/0
  6721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6722 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6723 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6724 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6725 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6726 ;;Total ram usage:        6 bytes
  6727 ;; Hardware stack levels used:    1
  6728 ;; Hardware stack levels required when called:    4
  6729 ;; This function calls:
  6730 ;;		_checkV
  6731 ;;		_printV
  6732 ;;		i2_printf
  6733 ;; This function is called by:
  6734 ;;		_simulate
  6735 ;; This function uses a non-reentrant model
  6736 ;;
  6737                           
  6738                           	psect	text33
  6739  001C14                     __ptext33:
  6740                           	opt stack 0
  6741  001C14                     _checkAA:
  6742                           	opt stack 20
  6743                           
  6744                           ;sensors.c: 33: printf("AA:");
  6745                           
  6746                           ;incstack = 0
  6747  001C14  0EE5               	movlw	low (STR_12+1)
  6748  001C16  6E0D               	movwf	i2printf@f,c
  6749  001C18  0EFF               	movlw	high (STR_12+1)
  6750  001C1A  6E0E               	movwf	i2printf@f+1,c
  6751  001C1C  EC1B  F004         	call	i2_printf	;wreg free
  6752                           
  6753                           ;sensors.c: 35: int V = checkV(2, 1.5 / 5 * 1023);
  6754  001C20  0E01               	movlw	1
  6755  001C22  6E26               	movwf	checkV@threshhold+1,c
  6756  001C24  0E32               	movlw	50
  6757  001C26  6E25               	movwf	checkV@threshhold,c
  6758  001C28  0E02               	movlw	2
  6759  001C2A  EC0A  F00C         	call	_checkV
  6760  001C2E  C025  F02E         	movff	?_checkV,checkAA@V
  6761  001C32  C026  F02F         	movff	?_checkV+1,checkAA@V+1
  6762                           
  6763                           ;sensors.c: 36: printV(V);
  6764  001C36  C02E  F023         	movff	checkAA@V,printV@charged
  6765  001C3A  C02F  F024         	movff	checkAA@V+1,printV@charged+1
  6766  001C3E  ECEA  F010         	call	_printV	;wreg free
  6767                           
  6768                           ;sensors.c: 37: switch (V) {
  6769  001C42  D00D               	goto	i2l3712
  6770  001C44                     i2l3708:
  6771                           
  6772                           ;sensors.c: 39: sorted[0]++;
  6773  001C44  C02A  FFD9         	movff	checkAA@sorted,fsr2l
  6774  001C48  C02B  FFDA         	movff	checkAA@sorted+1,fsr2h
  6775  001C4C  2ADF               	incf	indf2,f,c
  6776  001C4E                     i2l3710:
  6777                           
  6778                           ;sensors.c: 41: sorted[3]++;
  6779  001C4E  EE20 F003          	lfsr	2,3
  6780  001C52  502A               	movf	checkAA@sorted,w,c
  6781  001C54  26D9               	addwf	fsr2l,f,c
  6782  001C56  502B               	movf	checkAA@sorted+1,w,c
  6783  001C58  22DA               	addwfc	fsr2h,f,c
  6784  001C5A  2ADF               	incf	indf2,f,c
  6785                           
  6786                           ;sensors.c: 42: }
  6787  001C5C  D00F               	goto	i2l329
  6788  001C5E                     i2l3712:
  6789  001C5E  C02E  F02C         	movff	checkAA@V,??_checkAA
  6790  001C62  C02F  F02D         	movff	checkAA@V+1,??_checkAA+1
  6791                           
  6792                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6793                           ; Switch size 1, requested type "space"
  6794                           ; Number of cases is 1, Range of values is 0 to 0
  6795                           ; switch strategies available:
  6796                           ; Name         Instructions Cycles
  6797                           ; simple_byte            4     3 (average)
  6798                           ;	Chosen strategy is simple_byte
  6799  001C66  502D               	movf	??_checkAA+1,w,c
  6800  001C68  0A00               	xorlw	0	; case 0
  6801  001C6A  A4D8               	btfss	status,2,c
  6802  001C6C  D007               	goto	i2l329
  6803                           
  6804                           ; Switch size 1, requested type "space"
  6805                           ; Number of cases is 2, Range of values is 0 to 1
  6806                           ; switch strategies available:
  6807                           ; Name         Instructions Cycles
  6808                           ; simple_byte            7     4 (average)
  6809                           ;	Chosen strategy is simple_byte
  6810  001C6E  502C               	movf	??_checkAA,w,c
  6811  001C70  0A00               	xorlw	0	; case 0
  6812  001C72  B4D8               	btfsc	status,2,c
  6813  001C74  D7EC               	goto	i2l3710
  6814  001C76  0A01               	xorlw	1	; case 1
  6815  001C78  B4D8               	btfsc	status,2,c
  6816  001C7A  D7E4               	goto	i2l3708
  6817  001C7C                     i2l329:
  6818                           
  6819                           ;sensors.c: 43: return V;
  6820  001C7C  C02E  F02A         	movff	checkAA@V,?_checkAA
  6821  001C80  C02F  F02B         	movff	checkAA@V+1,?_checkAA+1
  6822  001C84  0012               	return		;funcret
  6823  001C86                     __end_of_checkAA:
  6824                           	opt stack 0
  6825                           pclatu	equ	0xFFB
  6826                           pclath	equ	0xFFA
  6827                           tblptru	equ	0xFF8
  6828                           tblptrh	equ	0xFF7
  6829                           tblptrl	equ	0xFF6
  6830                           tablat	equ	0xFF5
  6831                           prodh	equ	0xFF4
  6832                           prodl	equ	0xFF3
  6833                           intcon	equ	0xFF2
  6834                           intcon2	equ	0xFF1
  6835                           intcon3	equ	0xFF0
  6836                           postinc0	equ	0xFEE
  6837                           fsr0h	equ	0xFEA
  6838                           fsr0l	equ	0xFE9
  6839                           wreg	equ	0xFE8
  6840                           plusw1	equ	0xFE3
  6841                           fsr1h	equ	0xFE2
  6842                           fsr1l	equ	0xFE1
  6843                           indf2	equ	0xFDF
  6844                           postinc2	equ	0xFDE
  6845                           postdec2	equ	0xFDD
  6846                           plusw2	equ	0xFDB
  6847                           fsr2h	equ	0xFDA
  6848                           fsr2l	equ	0xFD9
  6849                           status	equ	0xFD8
  6850                           
  6851 ;; *************** function _check9 *****************
  6852 ;; Defined at:
  6853 ;;		line 61 in file "sensors.c"
  6854 ;; Parameters:    Size  Location     Type
  6855 ;;  sorted          2   41[COMRAM] PTR unsigned char 
  6856 ;;		 -> simulate@sorted(4), 
  6857 ;; Auto vars:     Size  Location     Type
  6858 ;;  V               2   45[COMRAM] int 
  6859 ;; Return value:  Size  Location     Type
  6860 ;;                  2   41[COMRAM] int 
  6861 ;; Registers used:
  6862 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6863 ;; Tracked objects:
  6864 ;;		On entry : 0/0
  6865 ;;		On exit  : 0/0
  6866 ;;		Unchanged: 0/0
  6867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6868 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6869 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6870 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6871 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6872 ;;Total ram usage:        6 bytes
  6873 ;; Hardware stack levels used:    1
  6874 ;; Hardware stack levels required when called:    4
  6875 ;; This function calls:
  6876 ;;		_checkV
  6877 ;;		_printV
  6878 ;;		i2_printf
  6879 ;; This function is called by:
  6880 ;;		_simulate
  6881 ;; This function uses a non-reentrant model
  6882 ;;
  6883                           
  6884                           	psect	text34
  6885  001B9E                     __ptext34:
  6886                           	opt stack 0
  6887  001B9E                     _check9:
  6888                           	opt stack 20
  6889                           
  6890                           ;sensors.c: 64: printf("9V:");
  6891                           
  6892                           ;incstack = 0
  6893  001B9E  0EF1               	movlw	low STR_4
  6894  001BA0  6E0D               	movwf	i2printf@f,c
  6895  001BA2  0EFF               	movlw	high STR_4
  6896  001BA4  6E0E               	movwf	i2printf@f+1,c
  6897  001BA6  EC1B  F004         	call	i2_printf	;wreg free
  6898                           
  6899                           ;sensors.c: 65: int V = checkV(5, 3.65 / 5 * 1023);
  6900  001BAA  0E02               	movlw	2
  6901  001BAC  6E26               	movwf	checkV@threshhold+1,c
  6902  001BAE  0EEA               	movlw	234
  6903  001BB0  6E25               	movwf	checkV@threshhold,c
  6904  001BB2  0E05               	movlw	5
  6905  001BB4  EC0A  F00C         	call	_checkV
  6906  001BB8  C025  F02E         	movff	?_checkV,check9@V
  6907  001BBC  C026  F02F         	movff	?_checkV+1,check9@V+1
  6908                           
  6909                           ;sensors.c: 66: printV(V);
  6910  001BC0  C02E  F023         	movff	check9@V,printV@charged
  6911  001BC4  C02F  F024         	movff	check9@V+1,printV@charged+1
  6912  001BC8  ECEA  F010         	call	_printV	;wreg free
  6913                           
  6914                           ;sensors.c: 67: switch (V) {
  6915  001BCC  D00F               	goto	i2l3682
  6916  001BCE                     i2l3680:
  6917                           
  6918                           ;sensors.c: 69: sorted[2]++;
  6919  001BCE  EE20 F002          	lfsr	2,2
  6920  001BD2  502A               	movf	check9@sorted,w,c
  6921  001BD4  26D9               	addwf	fsr2l,f,c
  6922  001BD6  502B               	movf	check9@sorted+1,w,c
  6923  001BD8  22DA               	addwfc	fsr2h,f,c
  6924  001BDA  2ADF               	incf	indf2,f,c
  6925  001BDC                     i2l342:
  6926                           
  6927                           ;sensors.c: 71: sorted[3]++;
  6928  001BDC  EE20 F003          	lfsr	2,3
  6929  001BE0  502A               	movf	check9@sorted,w,c
  6930  001BE2  26D9               	addwf	fsr2l,f,c
  6931  001BE4  502B               	movf	check9@sorted+1,w,c
  6932  001BE6  22DA               	addwfc	fsr2h,f,c
  6933  001BE8  2ADF               	incf	indf2,f,c
  6934                           
  6935                           ;sensors.c: 72: }
  6936  001BEA  D00F               	goto	i2l343
  6937  001BEC                     i2l3682:
  6938  001BEC  C02E  F02C         	movff	check9@V,??_check9
  6939  001BF0  C02F  F02D         	movff	check9@V+1,??_check9+1
  6940                           
  6941                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6942                           ; Switch size 1, requested type "space"
  6943                           ; Number of cases is 1, Range of values is 0 to 0
  6944                           ; switch strategies available:
  6945                           ; Name         Instructions Cycles
  6946                           ; simple_byte            4     3 (average)
  6947                           ;	Chosen strategy is simple_byte
  6948  001BF4  502D               	movf	??_check9+1,w,c
  6949  001BF6  0A00               	xorlw	0	; case 0
  6950  001BF8  A4D8               	btfss	status,2,c
  6951  001BFA  D007               	goto	i2l343
  6952                           
  6953                           ; Switch size 1, requested type "space"
  6954                           ; Number of cases is 2, Range of values is 0 to 1
  6955                           ; switch strategies available:
  6956                           ; Name         Instructions Cycles
  6957                           ; simple_byte            7     4 (average)
  6958                           ;	Chosen strategy is simple_byte
  6959  001BFC  502C               	movf	??_check9,w,c
  6960  001BFE  0A00               	xorlw	0	; case 0
  6961  001C00  B4D8               	btfsc	status,2,c
  6962  001C02  D7EC               	goto	i2l342
  6963  001C04  0A01               	xorlw	1	; case 1
  6964  001C06  B4D8               	btfsc	status,2,c
  6965  001C08  D7E2               	goto	i2l3680
  6966  001C0A                     i2l343:
  6967                           
  6968                           ;sensors.c: 73: return V;
  6969  001C0A  C02E  F02A         	movff	check9@V,?_check9
  6970  001C0E  C02F  F02B         	movff	check9@V+1,?_check9+1
  6971  001C12  0012               	return		;funcret
  6972  001C14                     __end_of_check9:
  6973                           	opt stack 0
  6974                           pclatu	equ	0xFFB
  6975                           pclath	equ	0xFFA
  6976                           tblptru	equ	0xFF8
  6977                           tblptrh	equ	0xFF7
  6978                           tblptrl	equ	0xFF6
  6979                           tablat	equ	0xFF5
  6980                           prodh	equ	0xFF4
  6981                           prodl	equ	0xFF3
  6982                           intcon	equ	0xFF2
  6983                           intcon2	equ	0xFF1
  6984                           intcon3	equ	0xFF0
  6985                           postinc0	equ	0xFEE
  6986                           fsr0h	equ	0xFEA
  6987                           fsr0l	equ	0xFE9
  6988                           wreg	equ	0xFE8
  6989                           plusw1	equ	0xFE3
  6990                           fsr1h	equ	0xFE2
  6991                           fsr1l	equ	0xFE1
  6992                           indf2	equ	0xFDF
  6993                           postinc2	equ	0xFDE
  6994                           postdec2	equ	0xFDD
  6995                           plusw2	equ	0xFDB
  6996                           fsr2h	equ	0xFDA
  6997                           fsr2l	equ	0xFD9
  6998                           status	equ	0xFD8
  6999                           
  7000 ;; *************** function _printV *****************
  7001 ;; Defined at:
  7002 ;;		line 21 in file "sensors.c"
  7003 ;; Parameters:    Size  Location     Type
  7004 ;;  charged         2   34[COMRAM] int 
  7005 ;; Auto vars:     Size  Location     Type
  7006 ;;		None
  7007 ;; Return value:  Size  Location     Type
  7008 ;;                  1    wreg      void 
  7009 ;; Registers used:
  7010 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7011 ;; Tracked objects:
  7012 ;;		On entry : 0/0
  7013 ;;		On exit  : 0/0
  7014 ;;		Unchanged: 0/0
  7015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7016 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7019 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7020 ;;Total ram usage:        2 bytes
  7021 ;; Hardware stack levels used:    1
  7022 ;; Hardware stack levels required when called:    3
  7023 ;; This function calls:
  7024 ;;		i2_printf
  7025 ;; This function is called by:
  7026 ;;		_checkAA
  7027 ;;		_checkC
  7028 ;;		_check9
  7029 ;; This function uses a non-reentrant model
  7030 ;;
  7031                           
  7032                           	psect	text35
  7033  0021D4                     __ptext35:
  7034                           	opt stack 0
  7035  0021D4                     _printV:
  7036                           	opt stack 20
  7037                           
  7038                           ;sensors.c: 24: if (charged < 0) {
  7039                           
  7040                           ;incstack = 0
  7041  0021D4  AE24               	btfss	printV@charged+1,7,c
  7042  0021D6  D007               	goto	i2l3332
  7043                           
  7044                           ;sensors.c: 25: printf("-1 ");
  7045  0021D8  0EE9               	movlw	low STR_36
  7046  0021DA  6E0D               	movwf	i2printf@f,c
  7047  0021DC  0EFF               	movlw	high STR_36
  7048  0021DE  6E0E               	movwf	i2printf@f+1,c
  7049  0021E0  EC1B  F004         	call	i2_printf	;wreg free
  7050                           
  7051                           ;sensors.c: 26: } else {
  7052  0021E4  0012               	return	
  7053  0021E6                     i2l3332:
  7054                           
  7055                           ;sensors.c: 27: printf(" %d ", charged);
  7056  0021E6  0EDF               	movlw	low STR_37
  7057  0021E8  6E0D               	movwf	i2printf@f,c
  7058  0021EA  0EFF               	movlw	high STR_37
  7059  0021EC  6E0E               	movwf	i2printf@f+1,c
  7060  0021EE  C023  F00F         	movff	printV@charged,?i2_printf+2
  7061  0021F2  C024  F010         	movff	printV@charged+1,?i2_printf+3
  7062  0021F6  EC1B  F004         	call	i2_printf	;wreg free
  7063  0021FA  0012               	return	
  7064  0021FC                     __end_of_printV:
  7065                           	opt stack 0
  7066                           pclatu	equ	0xFFB
  7067                           pclath	equ	0xFFA
  7068                           tblptru	equ	0xFF8
  7069                           tblptrh	equ	0xFF7
  7070                           tblptrl	equ	0xFF6
  7071                           tablat	equ	0xFF5
  7072                           prodh	equ	0xFF4
  7073                           prodl	equ	0xFF3
  7074                           intcon	equ	0xFF2
  7075                           intcon2	equ	0xFF1
  7076                           intcon3	equ	0xFF0
  7077                           postinc0	equ	0xFEE
  7078                           fsr0h	equ	0xFEA
  7079                           fsr0l	equ	0xFE9
  7080                           wreg	equ	0xFE8
  7081                           plusw1	equ	0xFE3
  7082                           fsr1h	equ	0xFE2
  7083                           fsr1l	equ	0xFE1
  7084                           indf2	equ	0xFDF
  7085                           postinc2	equ	0xFDE
  7086                           postdec2	equ	0xFDD
  7087                           plusw2	equ	0xFDB
  7088                           fsr2h	equ	0xFDA
  7089                           fsr2l	equ	0xFD9
  7090                           status	equ	0xFD8
  7091                           
  7092 ;; *************** function _checkV *****************
  7093 ;; Defined at:
  7094 ;;		line 13 in file "sensors.c"
  7095 ;; Parameters:    Size  Location     Type
  7096 ;;  channel         1    wreg     unsigned char 
  7097 ;;  threshhold      2   36[COMRAM] int 
  7098 ;; Auto vars:     Size  Location     Type
  7099 ;;  channel         1   38[COMRAM] unsigned char 
  7100 ;;  voltage         2   39[COMRAM] int 
  7101 ;; Return value:  Size  Location     Type
  7102 ;;                  2   36[COMRAM] int 
  7103 ;; Registers used:
  7104 ;;		wreg, status,2, status,0, cstack
  7105 ;; Tracked objects:
  7106 ;;		On entry : 0/0
  7107 ;;		On exit  : 0/0
  7108 ;;		Unchanged: 0/0
  7109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7110 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7111 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7113 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7114 ;;Total ram usage:        5 bytes
  7115 ;; Hardware stack levels used:    1
  7116 ;; Hardware stack levels required when called:    2
  7117 ;; This function calls:
  7118 ;;		_AD
  7119 ;;		___awtoft
  7120 ;;		___ftge
  7121 ;;		___ftmul
  7122 ;; This function is called by:
  7123 ;;		_checkAA
  7124 ;;		_checkC
  7125 ;;		_check9
  7126 ;; This function uses a non-reentrant model
  7127 ;;
  7128                           
  7129                           	psect	text36
  7130  001814                     __ptext36:
  7131                           	opt stack 0
  7132  001814                     _checkV:
  7133                           	opt stack 21
  7134                           
  7135                           ;incstack = 0
  7136                           ;checkV@channel stored from wreg
  7137  001814  6E27               	movwf	checkV@channel,c
  7138                           
  7139                           ;sensors.c: 15: int voltage = AD(channel);
  7140  001816  5027               	movf	checkV@channel,w,c
  7141  001818  ECD5  F010         	call	_AD
  7142  00181C  C001  F028         	movff	?_AD,checkV@voltage
  7143  001820  C002  F029         	movff	?_AD+1,checkV@voltage+1
  7144                           
  7145                           ;sensors.c: 16: if (voltage < 50) return -1;
  7146  001824  BE29               	btfsc	checkV@voltage+1,7,c
  7147  001826  D006               	goto	i2l3316
  7148  001828  5029               	movf	checkV@voltage+1,w,c
  7149  00182A  E107               	bnz	i2l3318
  7150  00182C  0E32               	movlw	50
  7151  00182E  5C28               	subwf	checkV@voltage,w,c
  7152  001830  B0D8               	btfsc	status,0,c
  7153  001832  D003               	goto	i2l3318
  7154  001834                     i2l3316:
  7155  001834  6825               	setf	?_checkV,c
  7156  001836  6826               	setf	?_checkV+1,c
  7157  001838  0012               	return	
  7158  00183A                     i2l3318:
  7159                           
  7160                           ;sensors.c: 17: if (voltage > 0.85 * threshhold) return 1;
  7161  00183A  0E9A               	movlw	154
  7162  00183C  6E10               	movwf	___ftmul@f2,c
  7163  00183E  0E59               	movlw	89
  7164  001840  6E11               	movwf	___ftmul@f2+1,c
  7165  001842  0E3F               	movlw	63
  7166  001844  6E12               	movwf	___ftmul@f2+2,c
  7167  001846  C025  F009         	movff	checkV@threshhold,___awtoft@c
  7168  00184A  C026  F00A         	movff	checkV@threshhold+1,___awtoft@c+1
  7169  00184E  EC72  F010         	call	___awtoft	;wreg free
  7170  001852  C009  F00D         	movff	?___awtoft,___ftmul@f1
  7171  001856  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  7172  00185A  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  7173  00185E  EC35  F009         	call	___ftmul	;wreg free
  7174  001862  C00D  F01C         	movff	?___ftmul,___ftge@ff1
  7175  001866  C00E  F01D         	movff	?___ftmul+1,___ftge@ff1+1
  7176  00186A  C00F  F01E         	movff	?___ftmul+2,___ftge@ff1+2
  7177  00186E  C028  F009         	movff	checkV@voltage,___awtoft@c
  7178  001872  C029  F00A         	movff	checkV@voltage+1,___awtoft@c+1
  7179  001876  EC72  F010         	call	___awtoft	;wreg free
  7180  00187A  C009  F01F         	movff	?___awtoft,___ftge@ff2
  7181  00187E  C00A  F020         	movff	?___awtoft+1,___ftge@ff2+1
  7182  001882  C00B  F021         	movff	?___awtoft+2,___ftge@ff2+2
  7183  001886  ECC2  F00B         	call	___ftge	;wreg free
  7184  00188A  B0D8               	btfsc	status,0,c
  7185  00188C  D005               	goto	i2l3324
  7186  00188E  0E00               	movlw	0
  7187  001890  6E26               	movwf	?_checkV+1,c
  7188  001892  0E01               	movlw	1
  7189  001894  6E25               	movwf	?_checkV,c
  7190  001896  0012               	return	
  7191  001898                     i2l3324:
  7192                           
  7193                           ;sensors.c: 18: return 0;
  7194  001898  0E00               	movlw	0
  7195  00189A  6E26               	movwf	?_checkV+1,c
  7196  00189C  0E00               	movlw	0
  7197  00189E  6E25               	movwf	?_checkV,c
  7198  0018A0  0012               	return	
  7199  0018A2                     __end_of_checkV:
  7200                           	opt stack 0
  7201                           pclatu	equ	0xFFB
  7202                           pclath	equ	0xFFA
  7203                           tblptru	equ	0xFF8
  7204                           tblptrh	equ	0xFF7
  7205                           tblptrl	equ	0xFF6
  7206                           tablat	equ	0xFF5
  7207                           prodh	equ	0xFF4
  7208                           prodl	equ	0xFF3
  7209                           intcon	equ	0xFF2
  7210                           intcon2	equ	0xFF1
  7211                           intcon3	equ	0xFF0
  7212                           postinc0	equ	0xFEE
  7213                           fsr0h	equ	0xFEA
  7214                           fsr0l	equ	0xFE9
  7215                           wreg	equ	0xFE8
  7216                           plusw1	equ	0xFE3
  7217                           fsr1h	equ	0xFE2
  7218                           fsr1l	equ	0xFE1
  7219                           indf2	equ	0xFDF
  7220                           postinc2	equ	0xFDE
  7221                           postdec2	equ	0xFDD
  7222                           plusw2	equ	0xFDB
  7223                           fsr2h	equ	0xFDA
  7224                           fsr2l	equ	0xFD9
  7225                           status	equ	0xFD8
  7226                           
  7227 ;; *************** function ___ftmul *****************
  7228 ;; Defined at:
  7229 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  7230 ;; Parameters:    Size  Location     Type
  7231 ;;  f1              3   12[COMRAM] float 
  7232 ;;  f2              3   15[COMRAM] float 
  7233 ;; Auto vars:     Size  Location     Type
  7234 ;;  f3_as_produc    3   22[COMRAM] unsigned um
  7235 ;;  sign            1   26[COMRAM] unsigned char 
  7236 ;;  cntr            1   25[COMRAM] unsigned char 
  7237 ;;  exp             1   21[COMRAM] unsigned char 
  7238 ;; Return value:  Size  Location     Type
  7239 ;;                  3   12[COMRAM] float 
  7240 ;; Registers used:
  7241 ;;		wreg, status,2, status,0, cstack
  7242 ;; Tracked objects:
  7243 ;;		On entry : 0/0
  7244 ;;		On exit  : 0/0
  7245 ;;		Unchanged: 0/0
  7246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7247 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7248 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7249 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7250 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7251 ;;Total ram usage:       15 bytes
  7252 ;; Hardware stack levels used:    1
  7253 ;; Hardware stack levels required when called:    1
  7254 ;; This function calls:
  7255 ;;		___ftpack
  7256 ;; This function is called by:
  7257 ;;		_checkV
  7258 ;; This function uses a non-reentrant model
  7259 ;;
  7260                           
  7261                           	psect	text37
  7262  00126A                     __ptext37:
  7263                           	opt stack 0
  7264  00126A                     ___ftmul:
  7265                           	opt stack 21
  7266                           
  7267                           ;incstack = 0
  7268  00126A  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
  7269  00126E  6A14               	clrf	(??___ftmul+1)& (0+255),c
  7270  001270  6A15               	clrf	(??___ftmul+2)& (0+255),c
  7271  001272  340E               	rlcf	___ftmul@f1+1,w,c
  7272  001274  3613               	rlcf	??___ftmul& (0+255),f,c
  7273  001276  E301               	bnc	u191_41
  7274  001278  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  7275  00127A                     u191_41:
  7276  00127A  5013               	movf	??___ftmul,w,c
  7277  00127C  6E16               	movwf	___ftmul@exp,c
  7278  00127E  5016               	movf	___ftmul@exp,w,c
  7279  001280  A4D8               	btfss	status,2,c
  7280  001282  D007               	goto	i2l2952
  7281  001284  0E00               	movlw	0
  7282  001286  6E0D               	movwf	?___ftmul,c
  7283  001288  0E00               	movlw	0
  7284  00128A  6E0E               	movwf	?___ftmul+1,c
  7285  00128C  0E00               	movlw	0
  7286  00128E  6E0F               	movwf	?___ftmul+2,c
  7287  001290  0012               	return	
  7288  001292                     i2l2952:
  7289  001292  C012  F013         	movff	___ftmul@f2+2,??___ftmul
  7290  001296  6A14               	clrf	(??___ftmul+1)& (0+255),c
  7291  001298  6A15               	clrf	(??___ftmul+2)& (0+255),c
  7292  00129A  3411               	rlcf	___ftmul@f2+1,w,c
  7293  00129C  3613               	rlcf	??___ftmul& (0+255),f,c
  7294  00129E  E301               	bnc	u193_41
  7295  0012A0  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  7296  0012A2                     u193_41:
  7297  0012A2  5013               	movf	??___ftmul,w,c
  7298  0012A4  6E1B               	movwf	___ftmul@sign,c
  7299  0012A6  501B               	movf	___ftmul@sign,w,c
  7300  0012A8  A4D8               	btfss	status,2,c
  7301  0012AA  D007               	goto	i2l2958
  7302  0012AC  0E00               	movlw	0
  7303  0012AE  6E0D               	movwf	?___ftmul,c
  7304  0012B0  0E00               	movlw	0
  7305  0012B2  6E0E               	movwf	?___ftmul+1,c
  7306  0012B4  0E00               	movlw	0
  7307  0012B6  6E0F               	movwf	?___ftmul+2,c
  7308  0012B8  0012               	return	
  7309  0012BA                     i2l2958:
  7310  0012BA  501B               	movf	___ftmul@sign,w,c
  7311  0012BC  0F7B               	addlw	123
  7312  0012BE  2616               	addwf	___ftmul@exp,f,c
  7313  0012C0  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
  7314  0012C4  5012               	movf	___ftmul@f2+2,w,c
  7315  0012C6  1A1B               	xorwf	___ftmul@sign,f,c
  7316  0012C8  0E80               	movlw	128
  7317  0012CA  161B               	andwf	___ftmul@sign,f,c
  7318  0012CC  8E0E               	bsf	___ftmul@f1+1,7,c
  7319  0012CE  8E11               	bsf	___ftmul@f2+1,7,c
  7320  0012D0  0EFF               	movlw	255
  7321  0012D2  1610               	andwf	___ftmul@f2,f,c
  7322  0012D4  0EFF               	movlw	255
  7323  0012D6  1611               	andwf	___ftmul@f2+1,f,c
  7324  0012D8  0E00               	movlw	0
  7325  0012DA  1612               	andwf	___ftmul@f2+2,f,c
  7326  0012DC  0E00               	movlw	0
  7327  0012DE  6E17               	movwf	___ftmul@f3_as_product,c
  7328  0012E0  0E00               	movlw	0
  7329  0012E2  6E18               	movwf	___ftmul@f3_as_product+1,c
  7330  0012E4  0E00               	movlw	0
  7331  0012E6  6E19               	movwf	___ftmul@f3_as_product+2,c
  7332  0012E8  0E07               	movlw	7
  7333  0012EA  6E1A               	movwf	___ftmul@cntr,c
  7334  0012EC                     i2l2972:
  7335  0012EC  A00D               	btfss	___ftmul@f1,0,c
  7336  0012EE  D006               	goto	i2l2976
  7337  0012F0  5010               	movf	___ftmul@f2,w,c
  7338  0012F2  2617               	addwf	___ftmul@f3_as_product,f,c
  7339  0012F4  5011               	movf	___ftmul@f2+1,w,c
  7340  0012F6  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  7341  0012F8  5012               	movf	___ftmul@f2+2,w,c
  7342  0012FA  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  7343  0012FC                     i2l2976:
  7344  0012FC  90D8               	bcf	status,0,c
  7345  0012FE  320F               	rrcf	___ftmul@f1+2,f,c
  7346  001300  320E               	rrcf	___ftmul@f1+1,f,c
  7347  001302  320D               	rrcf	___ftmul@f1,f,c
  7348  001304  90D8               	bcf	status,0,c
  7349  001306  3610               	rlcf	___ftmul@f2,f,c
  7350  001308  3611               	rlcf	___ftmul@f2+1,f,c
  7351  00130A  3612               	rlcf	___ftmul@f2+2,f,c
  7352  00130C  2E1A               	decfsz	___ftmul@cntr,f,c
  7353  00130E  D7EE               	goto	i2l2972
  7354  001310  0E09               	movlw	9
  7355  001312  6E1A               	movwf	___ftmul@cntr,c
  7356  001314                     i2l2982:
  7357  001314  A00D               	btfss	___ftmul@f1,0,c
  7358  001316  D006               	goto	i2l2986
  7359  001318  5010               	movf	___ftmul@f2,w,c
  7360  00131A  2617               	addwf	___ftmul@f3_as_product,f,c
  7361  00131C  5011               	movf	___ftmul@f2+1,w,c
  7362  00131E  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  7363  001320  5012               	movf	___ftmul@f2+2,w,c
  7364  001322  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  7365  001324                     i2l2986:
  7366  001324  90D8               	bcf	status,0,c
  7367  001326  320F               	rrcf	___ftmul@f1+2,f,c
  7368  001328  320E               	rrcf	___ftmul@f1+1,f,c
  7369  00132A  320D               	rrcf	___ftmul@f1,f,c
  7370  00132C  90D8               	bcf	status,0,c
  7371  00132E  3219               	rrcf	___ftmul@f3_as_product+2,f,c
  7372  001330  3218               	rrcf	___ftmul@f3_as_product+1,f,c
  7373  001332  3217               	rrcf	___ftmul@f3_as_product,f,c
  7374  001334  2E1A               	decfsz	___ftmul@cntr,f,c
  7375  001336  D7EE               	goto	i2l2982
  7376  001338  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  7377  00133C  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  7378  001340  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  7379  001344  C016  F004         	movff	___ftmul@exp,___ftpack@exp
  7380  001348  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
  7381  00134C  EC6B  F00B         	call	___ftpack	;wreg free
  7382  001350  C001  F00D         	movff	?___ftpack,?___ftmul
  7383  001354  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
  7384  001358  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
  7385  00135C  0012               	return	
  7386  00135E                     __end_of___ftmul:
  7387                           	opt stack 0
  7388                           pclatu	equ	0xFFB
  7389                           pclath	equ	0xFFA
  7390                           tblptru	equ	0xFF8
  7391                           tblptrh	equ	0xFF7
  7392                           tblptrl	equ	0xFF6
  7393                           tablat	equ	0xFF5
  7394                           prodh	equ	0xFF4
  7395                           prodl	equ	0xFF3
  7396                           intcon	equ	0xFF2
  7397                           intcon2	equ	0xFF1
  7398                           intcon3	equ	0xFF0
  7399                           postinc0	equ	0xFEE
  7400                           fsr0h	equ	0xFEA
  7401                           fsr0l	equ	0xFE9
  7402                           wreg	equ	0xFE8
  7403                           plusw1	equ	0xFE3
  7404                           fsr1h	equ	0xFE2
  7405                           fsr1l	equ	0xFE1
  7406                           indf2	equ	0xFDF
  7407                           postinc2	equ	0xFDE
  7408                           postdec2	equ	0xFDD
  7409                           plusw2	equ	0xFDB
  7410                           fsr2h	equ	0xFDA
  7411                           fsr2l	equ	0xFD9
  7412                           status	equ	0xFD8
  7413                           
  7414 ;; *************** function ___ftge *****************
  7415 ;; Defined at:
  7416 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
  7417 ;; Parameters:    Size  Location     Type
  7418 ;;  ff1             3   27[COMRAM] float 
  7419 ;;  ff2             3   30[COMRAM] float 
  7420 ;; Auto vars:     Size  Location     Type
  7421 ;;		None
  7422 ;; Return value:  Size  Location     Type
  7423 ;;		None               void
  7424 ;; Registers used:
  7425 ;;		wreg, status,2, status,0
  7426 ;; Tracked objects:
  7427 ;;		On entry : 0/0
  7428 ;;		On exit  : 0/0
  7429 ;;		Unchanged: 0/0
  7430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7431 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7433 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7434 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7435 ;;Total ram usage:        9 bytes
  7436 ;; Hardware stack levels used:    1
  7437 ;; This function calls:
  7438 ;;		Nothing
  7439 ;; This function is called by:
  7440 ;;		_checkV
  7441 ;; This function uses a non-reentrant model
  7442 ;;
  7443                           
  7444                           	psect	text38
  7445  001784                     __ptext38:
  7446                           	opt stack 0
  7447  001784                     ___ftge:
  7448                           	opt stack 22
  7449                           
  7450                           ;incstack = 0
  7451  001784  AE1E               	btfss	___ftge@ff1+2,7,c
  7452  001786  D016               	goto	i2l3054
  7453  001788  C01C  F022         	movff	___ftge@ff1,??___ftge
  7454  00178C  C01D  F023         	movff	___ftge@ff1+1,??___ftge+1
  7455  001790  C01E  F024         	movff	___ftge@ff1+2,??___ftge+2
  7456  001794  1E22               	comf	??___ftge,f,c
  7457  001796  1E23               	comf	??___ftge+1,f,c
  7458  001798  1E24               	comf	??___ftge+2,f,c
  7459  00179A  2A22               	incf	??___ftge,f,c
  7460  00179C  0E00               	movlw	0
  7461  00179E  2223               	addwfc	??___ftge+1,f,c
  7462  0017A0  2224               	addwfc	??___ftge+2,f,c
  7463  0017A2  0E00               	movlw	0
  7464  0017A4  2422               	addwf	??___ftge,w,c
  7465  0017A6  6E1C               	movwf	___ftge@ff1,c
  7466  0017A8  0E00               	movlw	0
  7467  0017AA  2023               	addwfc	??___ftge+1,w,c
  7468  0017AC  6E1D               	movwf	___ftge@ff1+1,c
  7469  0017AE  0E80               	movlw	128
  7470  0017B0  2024               	addwfc	??___ftge+2,w,c
  7471  0017B2  6E1E               	movwf	___ftge@ff1+2,c
  7472  0017B4                     i2l3054:
  7473  0017B4  AE21               	btfss	___ftge@ff2+2,7,c
  7474  0017B6  D016               	goto	i2l3058
  7475  0017B8  C01F  F022         	movff	___ftge@ff2,??___ftge
  7476  0017BC  C020  F023         	movff	___ftge@ff2+1,??___ftge+1
  7477  0017C0  C021  F024         	movff	___ftge@ff2+2,??___ftge+2
  7478  0017C4  1E22               	comf	??___ftge,f,c
  7479  0017C6  1E23               	comf	??___ftge+1,f,c
  7480  0017C8  1E24               	comf	??___ftge+2,f,c
  7481  0017CA  2A22               	incf	??___ftge,f,c
  7482  0017CC  0E00               	movlw	0
  7483  0017CE  2223               	addwfc	??___ftge+1,f,c
  7484  0017D0  2224               	addwfc	??___ftge+2,f,c
  7485  0017D2  0E00               	movlw	0
  7486  0017D4  2422               	addwf	??___ftge,w,c
  7487  0017D6  6E1F               	movwf	___ftge@ff2,c
  7488  0017D8  0E00               	movlw	0
  7489  0017DA  2023               	addwfc	??___ftge+1,w,c
  7490  0017DC  6E20               	movwf	___ftge@ff2+1,c
  7491  0017DE  0E80               	movlw	128
  7492  0017E0  2024               	addwfc	??___ftge+2,w,c
  7493  0017E2  6E21               	movwf	___ftge@ff2+2,c
  7494  0017E4                     i2l3058:
  7495  0017E4  0E00               	movlw	0
  7496  0017E6  1A1C               	xorwf	___ftge@ff1,f,c
  7497  0017E8  0E00               	movlw	0
  7498  0017EA  1A1D               	xorwf	___ftge@ff1+1,f,c
  7499  0017EC  0E80               	movlw	128
  7500  0017EE  1A1E               	xorwf	___ftge@ff1+2,f,c
  7501  0017F0  0E00               	movlw	0
  7502  0017F2  1A1F               	xorwf	___ftge@ff2,f,c
  7503  0017F4  0E00               	movlw	0
  7504  0017F6  1A20               	xorwf	___ftge@ff2+1,f,c
  7505  0017F8  0E80               	movlw	128
  7506  0017FA  1A21               	xorwf	___ftge@ff2+2,f,c
  7507  0017FC  501F               	movf	___ftge@ff2,w,c
  7508  0017FE  5C1C               	subwf	___ftge@ff1,w,c
  7509  001800  5020               	movf	___ftge@ff2+1,w,c
  7510  001802  581D               	subwfb	___ftge@ff1+1,w,c
  7511  001804  5021               	movf	___ftge@ff2+2,w,c
  7512  001806  581E               	subwfb	___ftge@ff1+2,w,c
  7513  001808  B0D8               	btfsc	status,0,c
  7514  00180A  D002               	goto	i2l3064
  7515  00180C  90D8               	bcf	status,0,c
  7516  00180E  0012               	return	
  7517  001810                     i2l3064:
  7518  001810  80D8               	bsf	status,0,c
  7519  001812  0012               	return	
  7520  001814                     __end_of___ftge:
  7521                           	opt stack 0
  7522                           pclatu	equ	0xFFB
  7523                           pclath	equ	0xFFA
  7524                           tblptru	equ	0xFF8
  7525                           tblptrh	equ	0xFF7
  7526                           tblptrl	equ	0xFF6
  7527                           tablat	equ	0xFF5
  7528                           prodh	equ	0xFF4
  7529                           prodl	equ	0xFF3
  7530                           intcon	equ	0xFF2
  7531                           intcon2	equ	0xFF1
  7532                           intcon3	equ	0xFF0
  7533                           postinc0	equ	0xFEE
  7534                           fsr0h	equ	0xFEA
  7535                           fsr0l	equ	0xFE9
  7536                           wreg	equ	0xFE8
  7537                           plusw1	equ	0xFE3
  7538                           fsr1h	equ	0xFE2
  7539                           fsr1l	equ	0xFE1
  7540                           indf2	equ	0xFDF
  7541                           postinc2	equ	0xFDE
  7542                           postdec2	equ	0xFDD
  7543                           plusw2	equ	0xFDB
  7544                           fsr2h	equ	0xFDA
  7545                           fsr2l	equ	0xFD9
  7546                           status	equ	0xFD8
  7547                           
  7548 ;; *************** function ___awtoft *****************
  7549 ;; Defined at:
  7550 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awtoft.c"
  7551 ;; Parameters:    Size  Location     Type
  7552 ;;  c               2    8[COMRAM] int 
  7553 ;; Auto vars:     Size  Location     Type
  7554 ;;  sign            1   11[COMRAM] unsigned char 
  7555 ;; Return value:  Size  Location     Type
  7556 ;;                  3    8[COMRAM] float 
  7557 ;; Registers used:
  7558 ;;		wreg, status,2, status,0, cstack
  7559 ;; Tracked objects:
  7560 ;;		On entry : 0/0
  7561 ;;		On exit  : 0/0
  7562 ;;		Unchanged: 0/0
  7563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7564 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7565 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7567 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7568 ;;Total ram usage:        4 bytes
  7569 ;; Hardware stack levels used:    1
  7570 ;; Hardware stack levels required when called:    1
  7571 ;; This function calls:
  7572 ;;		___ftpack
  7573 ;; This function is called by:
  7574 ;;		_checkV
  7575 ;; This function uses a non-reentrant model
  7576 ;;
  7577                           
  7578                           	psect	text39
  7579  0020E4                     __ptext39:
  7580                           	opt stack 0
  7581  0020E4                     ___awtoft:
  7582                           	opt stack 21
  7583                           
  7584                           ;incstack = 0
  7585  0020E4  0E00               	movlw	0
  7586  0020E6  6E0C               	movwf	___awtoft@sign,c
  7587  0020E8  AE0A               	btfss	___awtoft@c+1,7,c
  7588  0020EA  D006               	goto	i2l3046
  7589  0020EC  6C09               	negf	___awtoft@c,c
  7590  0020EE  1E0A               	comf	___awtoft@c+1,f,c
  7591  0020F0  B0D8               	btfsc	status,0,c
  7592  0020F2  2A0A               	incf	___awtoft@c+1,f,c
  7593  0020F4  0E01               	movlw	1
  7594  0020F6  6E0C               	movwf	___awtoft@sign,c
  7595  0020F8                     i2l3046:
  7596  0020F8  C009  F001         	movff	___awtoft@c,___ftpack@arg
  7597  0020FC  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  7598  002100  6A03               	clrf	___ftpack@arg+2,c
  7599  002102  0E8E               	movlw	142
  7600  002104  6E04               	movwf	___ftpack@exp,c
  7601  002106  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  7602  00210A  EC6B  F00B         	call	___ftpack	;wreg free
  7603  00210E  C001  F009         	movff	?___ftpack,?___awtoft
  7604  002112  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  7605  002116  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  7606  00211A  0012               	return	
  7607  00211C                     __end_of___awtoft:
  7608                           	opt stack 0
  7609                           pclatu	equ	0xFFB
  7610                           pclath	equ	0xFFA
  7611                           tblptru	equ	0xFF8
  7612                           tblptrh	equ	0xFF7
  7613                           tblptrl	equ	0xFF6
  7614                           tablat	equ	0xFF5
  7615                           prodh	equ	0xFF4
  7616                           prodl	equ	0xFF3
  7617                           intcon	equ	0xFF2
  7618                           intcon2	equ	0xFF1
  7619                           intcon3	equ	0xFF0
  7620                           postinc0	equ	0xFEE
  7621                           fsr0h	equ	0xFEA
  7622                           fsr0l	equ	0xFE9
  7623                           wreg	equ	0xFE8
  7624                           plusw1	equ	0xFE3
  7625                           fsr1h	equ	0xFE2
  7626                           fsr1l	equ	0xFE1
  7627                           indf2	equ	0xFDF
  7628                           postinc2	equ	0xFDE
  7629                           postdec2	equ	0xFDD
  7630                           plusw2	equ	0xFDB
  7631                           fsr2h	equ	0xFDA
  7632                           fsr2l	equ	0xFD9
  7633                           status	equ	0xFD8
  7634                           
  7635 ;; *************** function ___ftpack *****************
  7636 ;; Defined at:
  7637 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  7638 ;; Parameters:    Size  Location     Type
  7639 ;;  arg             3    0[COMRAM] unsigned um
  7640 ;;  exp             1    3[COMRAM] unsigned char 
  7641 ;;  sign            1    4[COMRAM] unsigned char 
  7642 ;; Auto vars:     Size  Location     Type
  7643 ;;		None
  7644 ;; Return value:  Size  Location     Type
  7645 ;;                  3    0[COMRAM] float 
  7646 ;; Registers used:
  7647 ;;		wreg, status,2, status,0
  7648 ;; Tracked objects:
  7649 ;;		On entry : 0/0
  7650 ;;		On exit  : 0/0
  7651 ;;		Unchanged: 0/0
  7652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7653 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7655 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7656 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7657 ;;Total ram usage:        8 bytes
  7658 ;; Hardware stack levels used:    1
  7659 ;; This function calls:
  7660 ;;		Nothing
  7661 ;; This function is called by:
  7662 ;;		___awtoft
  7663 ;;		___ftmul
  7664 ;; This function uses a non-reentrant model
  7665 ;;
  7666                           
  7667                           	psect	text40
  7668  0016D6                     __ptext40:
  7669                           	opt stack 0
  7670  0016D6                     ___ftpack:
  7671                           	opt stack 21
  7672                           
  7673                           ;incstack = 0
  7674  0016D6  5004               	movf	___ftpack@exp,w,c
  7675  0016D8  B4D8               	btfsc	status,2,c
  7676  0016DA  D005               	goto	i2l2822
  7677  0016DC  5001               	movf	___ftpack@arg,w,c
  7678  0016DE  1002               	iorwf	___ftpack@arg+1,w,c
  7679  0016E0  1003               	iorwf	___ftpack@arg+2,w,c
  7680  0016E2  A4D8               	btfss	status,2,c
  7681  0016E4  D00C               	goto	i2l2828
  7682  0016E6                     i2l2822:
  7683  0016E6  0E00               	movlw	0
  7684  0016E8  6E01               	movwf	?___ftpack,c
  7685  0016EA  0E00               	movlw	0
  7686  0016EC  6E02               	movwf	?___ftpack+1,c
  7687  0016EE  0E00               	movlw	0
  7688  0016F0  6E03               	movwf	?___ftpack+2,c
  7689  0016F2  0012               	return	
  7690  0016F4                     i2l2826:
  7691  0016F4  2A04               	incf	___ftpack@exp,f,c
  7692  0016F6  90D8               	bcf	status,0,c
  7693  0016F8  3203               	rrcf	___ftpack@arg+2,f,c
  7694  0016FA  3202               	rrcf	___ftpack@arg+1,f,c
  7695  0016FC  3201               	rrcf	___ftpack@arg,f,c
  7696  0016FE                     i2l2828:
  7697  0016FE  0E00               	movlw	0
  7698  001700  1401               	andwf	___ftpack@arg,w,c
  7699  001702  6E06               	movwf	??___ftpack& (0+255),c
  7700  001704  0E00               	movlw	0
  7701  001706  1402               	andwf	___ftpack@arg+1,w,c
  7702  001708  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7703  00170A  0EFE               	movlw	254
  7704  00170C  1403               	andwf	___ftpack@arg+2,w,c
  7705  00170E  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7706  001710  5006               	movf	??___ftpack,w,c
  7707  001712  1007               	iorwf	??___ftpack+1,w,c
  7708  001714  1008               	iorwf	??___ftpack+2,w,c
  7709  001716  B4D8               	btfsc	status,2,c
  7710  001718  D00C               	goto	i2l2834
  7711  00171A  D7EC               	goto	i2l2826
  7712  00171C                     i2l2830:
  7713  00171C  2A04               	incf	___ftpack@exp,f,c
  7714  00171E  0E01               	movlw	1
  7715  001720  2601               	addwf	___ftpack@arg,f,c
  7716  001722  0E00               	movlw	0
  7717  001724  2202               	addwfc	___ftpack@arg+1,f,c
  7718  001726  0E00               	movlw	0
  7719  001728  2203               	addwfc	___ftpack@arg+2,f,c
  7720  00172A  90D8               	bcf	status,0,c
  7721  00172C  3203               	rrcf	___ftpack@arg+2,f,c
  7722  00172E  3202               	rrcf	___ftpack@arg+1,f,c
  7723  001730  3201               	rrcf	___ftpack@arg,f,c
  7724  001732                     i2l2834:
  7725  001732  0E00               	movlw	0
  7726  001734  1401               	andwf	___ftpack@arg,w,c
  7727  001736  6E06               	movwf	??___ftpack& (0+255),c
  7728  001738  0E00               	movlw	0
  7729  00173A  1402               	andwf	___ftpack@arg+1,w,c
  7730  00173C  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7731  00173E  0EFF               	movlw	255
  7732  001740  1403               	andwf	___ftpack@arg+2,w,c
  7733  001742  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7734  001744  5006               	movf	??___ftpack,w,c
  7735  001746  1007               	iorwf	??___ftpack+1,w,c
  7736  001748  1008               	iorwf	??___ftpack+2,w,c
  7737  00174A  B4D8               	btfsc	status,2,c
  7738  00174C  D006               	goto	i2l2838
  7739  00174E  D7E6               	goto	i2l2830
  7740  001750                     i2l2836:
  7741  001750  0604               	decf	___ftpack@exp,f,c
  7742  001752  90D8               	bcf	status,0,c
  7743  001754  3601               	rlcf	___ftpack@arg,f,c
  7744  001756  3602               	rlcf	___ftpack@arg+1,f,c
  7745  001758  3603               	rlcf	___ftpack@arg+2,f,c
  7746  00175A                     i2l2838:
  7747  00175A  BE02               	btfsc	___ftpack@arg+1,7,c
  7748  00175C  D003               	goto	i2l760
  7749  00175E  0E02               	movlw	2
  7750  001760  6004               	cpfslt	___ftpack@exp,c
  7751  001762  D7F6               	goto	i2l2836
  7752  001764                     i2l760:
  7753  001764  A004               	btfss	___ftpack@exp,0,c
  7754  001766  9E02               	bcf	___ftpack@arg+1,7,c
  7755  001768  90D8               	bcf	status,0,c
  7756  00176A  3204               	rrcf	___ftpack@exp,f,c
  7757  00176C  5004               	movf	___ftpack@exp,w,c
  7758  00176E  1203               	iorwf	___ftpack@arg+2,f,c
  7759  001770  5005               	movf	___ftpack@sign,w,c
  7760  001772  A4D8               	btfss	status,2,c
  7761  001774  8E03               	bsf	___ftpack@arg+2,7,c
  7762  001776  C001  F001         	movff	___ftpack@arg,?___ftpack
  7763  00177A  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  7764  00177E  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  7765  001782  0012               	return	
  7766  001784                     __end_of___ftpack:
  7767                           	opt stack 0
  7768                           pclatu	equ	0xFFB
  7769                           pclath	equ	0xFFA
  7770                           tblptru	equ	0xFF8
  7771                           tblptrh	equ	0xFF7
  7772                           tblptrl	equ	0xFF6
  7773                           tablat	equ	0xFF5
  7774                           prodh	equ	0xFF4
  7775                           prodl	equ	0xFF3
  7776                           intcon	equ	0xFF2
  7777                           intcon2	equ	0xFF1
  7778                           intcon3	equ	0xFF0
  7779                           postinc0	equ	0xFEE
  7780                           fsr0h	equ	0xFEA
  7781                           fsr0l	equ	0xFE9
  7782                           wreg	equ	0xFE8
  7783                           plusw1	equ	0xFE3
  7784                           fsr1h	equ	0xFE2
  7785                           fsr1l	equ	0xFE1
  7786                           indf2	equ	0xFDF
  7787                           postinc2	equ	0xFDE
  7788                           postdec2	equ	0xFDD
  7789                           plusw2	equ	0xFDB
  7790                           fsr2h	equ	0xFDA
  7791                           fsr2l	equ	0xFD9
  7792                           status	equ	0xFD8
  7793                           
  7794 ;; *************** function _AD *****************
  7795 ;; Defined at:
  7796 ;;		line 4 in file "sensors.c"
  7797 ;; Parameters:    Size  Location     Type
  7798 ;;  channel         1    wreg     unsigned char 
  7799 ;; Auto vars:     Size  Location     Type
  7800 ;;  channel         1    4[COMRAM] unsigned char 
  7801 ;; Return value:  Size  Location     Type
  7802 ;;                  2    0[COMRAM] int 
  7803 ;; Registers used:
  7804 ;;		wreg, status,2, status,0
  7805 ;; Tracked objects:
  7806 ;;		On entry : 0/0
  7807 ;;		On exit  : 0/0
  7808 ;;		Unchanged: 0/0
  7809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7810 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7811 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7812 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7813 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7814 ;;Total ram usage:        5 bytes
  7815 ;; Hardware stack levels used:    1
  7816 ;; This function calls:
  7817 ;;		Nothing
  7818 ;; This function is called by:
  7819 ;;		_checkV
  7820 ;; This function uses a non-reentrant model
  7821 ;;
  7822                           
  7823                           	psect	text41
  7824  0021AA                     __ptext41:
  7825                           	opt stack 0
  7826  0021AA                     _AD:
  7827                           	opt stack 22
  7828                           
  7829                           ;incstack = 0
  7830                           ;AD@channel stored from wreg
  7831  0021AA  6E05               	movwf	AD@channel,c
  7832                           
  7833                           ;sensors.c: 6: ADCON0 = ((channel << 2));
  7834  0021AC  4405               	rlncf	AD@channel,w,c
  7835  0021AE  46E8               	rlncf	wreg,f,c
  7836  0021B0  0BFC               	andlw	252
  7837  0021B2  6EC2               	movwf	4034,c	;volatile
  7838                           
  7839                           ;sensors.c: 7: ADON = 1;
  7840  0021B4  80C2               	bsf	4034,0,c	;volatile
  7841                           
  7842                           ;sensors.c: 8: ADCON0bits.GO = 1;
  7843  0021B6  82C2               	bsf	4034,1,c	;volatile
  7844  0021B8                     i2l310:
  7845  0021B8  B2C2               	btfsc	4034,1,c	;volatile
  7846  0021BA  D7FE               	goto	i2l310
  7847                           
  7848                           ;sensors.c: 10: return (ADRESH << 8) | ADRESL;
  7849  0021BC  50C3               	movf	4035,w,c	;volatile
  7850  0021BE  CFC4 F003          	movff	4036,??_AD	;volatile
  7851  0021C2  6A04               	clrf	(??_AD+1)& (0+255),c
  7852  0021C4  C003  F004         	movff	??_AD,??_AD+1
  7853  0021C8  6A03               	clrf	??_AD,c
  7854  0021CA  1003               	iorwf	??_AD,w,c
  7855  0021CC  6E01               	movwf	?_AD,c
  7856  0021CE  5004               	movf	??_AD+1,w,c
  7857  0021D0  6E02               	movwf	?_AD+1,c
  7858  0021D2  0012               	return	
  7859  0021D4                     __end_of_AD:
  7860                           	opt stack 0
  7861                           pclatu	equ	0xFFB
  7862                           pclath	equ	0xFFA
  7863                           tblptru	equ	0xFF8
  7864                           tblptrh	equ	0xFF7
  7865                           tblptrl	equ	0xFF6
  7866                           tablat	equ	0xFF5
  7867                           prodh	equ	0xFF4
  7868                           prodl	equ	0xFF3
  7869                           intcon	equ	0xFF2
  7870                           intcon2	equ	0xFF1
  7871                           intcon3	equ	0xFF0
  7872                           postinc0	equ	0xFEE
  7873                           fsr0h	equ	0xFEA
  7874                           fsr0l	equ	0xFE9
  7875                           wreg	equ	0xFE8
  7876                           plusw1	equ	0xFE3
  7877                           fsr1h	equ	0xFE2
  7878                           fsr1l	equ	0xFE1
  7879                           indf2	equ	0xFDF
  7880                           postinc2	equ	0xFDE
  7881                           postdec2	equ	0xFDD
  7882                           plusw2	equ	0xFDB
  7883                           fsr2h	equ	0xFDA
  7884                           fsr2l	equ	0xFD9
  7885                           status	equ	0xFD8
  7886                           
  7887 ;; *************** function _WriteRun *****************
  7888 ;; Defined at:
  7889 ;;		line 75 in file "eeprom.c"
  7890 ;; Parameters:    Size  Location     Type
  7891 ;;  sorted          2    6[COMRAM] PTR unsigned char 
  7892 ;;		 -> simulate@sorted(4), 
  7893 ;;  time            2    8[COMRAM] unsigned int 
  7894 ;; Auto vars:     Size  Location     Type
  7895 ;;  add             2   12[COMRAM] unsigned int 
  7896 ;; Return value:  Size  Location     Type
  7897 ;;                  1    wreg      void 
  7898 ;; Registers used:
  7899 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7900 ;; Tracked objects:
  7901 ;;		On entry : 0/0
  7902 ;;		On exit  : 0/0
  7903 ;;		Unchanged: 0/0
  7904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7905 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7906 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7907 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7908 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7909 ;;Total ram usage:        8 bytes
  7910 ;; Hardware stack levels used:    1
  7911 ;; Hardware stack levels required when called:    1
  7912 ;; This function calls:
  7913 ;;		_WriteEE
  7914 ;;		i2___wmul
  7915 ;; This function is called by:
  7916 ;;		_simulate
  7917 ;; This function uses a non-reentrant model
  7918 ;;
  7919                           
  7920                           	psect	text42
  7921  000FD6                     __ptext42:
  7922                           	opt stack 0
  7923  000FD6                     _WriteRun:
  7924                           	opt stack 23
  7925                           
  7926                           ;eeprom.c: 76: unsigned int add = ++Latest;
  7927                           
  7928                           ;incstack = 0
  7929  000FD6  0100               	movlb	0	; () banked
  7930  000FD8  2BC4               	incf	_Latest& (0+255),f,b
  7931  000FDA  C0C4  F00D         	movff	_Latest,WriteRun@add
  7932  000FDE  6A0E               	clrf	WriteRun@add+1,c
  7933                           
  7934                           ; BSR set to: 0
  7935                           ;eeprom.c: 77: if (add > 3) {
  7936  000FE0  500E               	movf	WriteRun@add+1,w,c
  7937  000FE2  E104               	bnz	i2u308_40
  7938  000FE4  0E04               	movlw	4
  7939  000FE6  5C0D               	subwf	WriteRun@add,w,c
  7940  000FE8  A0D8               	btfss	status,0,c
  7941  000FEA  D006               	goto	i2l3796
  7942  000FEC                     i2u308_40:
  7943                           
  7944                           ; BSR set to: 0
  7945                           ;eeprom.c: 78: add -= 4;
  7946  000FEC  0E04               	movlw	4
  7947  000FEE  5E0D               	subwf	WriteRun@add,f,c
  7948  000FF0  0E00               	movlw	0
  7949  000FF2  5A0E               	subwfb	WriteRun@add+1,f,c
  7950                           
  7951                           ; BSR set to: 0
  7952                           ;eeprom.c: 79: Latest = add;
  7953  000FF4  C00D  F0C4         	movff	WriteRun@add,_Latest
  7954  000FF8                     i2l3796:
  7955                           
  7956                           ; BSR set to: 0
  7957                           ;eeprom.c: 80: }
  7958                           ;eeprom.c: 81: add *= 5;
  7959  000FF8  C00D  F001         	movff	WriteRun@add,i2___wmul@multiplier
  7960  000FFC  C00E  F002         	movff	WriteRun@add+1,i2___wmul@multiplier+1
  7961  001000  0E00               	movlw	0
  7962  001002  6E04               	movwf	i2___wmul@multiplicand+1,c
  7963  001004  0E05               	movlw	5
  7964  001006  6E03               	movwf	i2___wmul@multiplicand,c
  7965  001008  EC37  F011         	call	i2___wmul	;wreg free
  7966  00100C  C001  F00D         	movff	?i2___wmul,WriteRun@add
  7967  001010  C002  F00E         	movff	?i2___wmul+1,WriteRun@add+1
  7968                           
  7969                           ;eeprom.c: 82: WriteEE(add++ *8, time);
  7970  001014  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  7971  001018  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  7972  00101C  90D8               	bcf	status,0,c
  7973  00101E  360B               	rlcf	??_WriteRun,f,c
  7974  001020  360C               	rlcf	??_WriteRun+1,f,c
  7975  001022  90D8               	bcf	status,0,c
  7976  001024  360B               	rlcf	??_WriteRun,f,c
  7977  001026  360C               	rlcf	??_WriteRun+1,f,c
  7978  001028  90D8               	bcf	status,0,c
  7979  00102A  360B               	rlcf	??_WriteRun,f,c
  7980  00102C  360C               	rlcf	??_WriteRun+1,f,c
  7981  00102E  C00B  F001         	movff	??_WriteRun,WriteEE@address
  7982  001032  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  7983  001036  C009  F003         	movff	WriteRun@time,WriteEE@data
  7984  00103A  EC24  F011         	call	_WriteEE	;wreg free
  7985  00103E  4A0D               	infsnz	WriteRun@add,f,c
  7986  001040  2A0E               	incf	WriteRun@add+1,f,c
  7987                           
  7988                           ;eeprom.c: 83: WriteEE(add++ *8, sorted[0]);
  7989  001042  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  7990  001046  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  7991  00104A  90D8               	bcf	status,0,c
  7992  00104C  360B               	rlcf	??_WriteRun,f,c
  7993  00104E  360C               	rlcf	??_WriteRun+1,f,c
  7994  001050  90D8               	bcf	status,0,c
  7995  001052  360B               	rlcf	??_WriteRun,f,c
  7996  001054  360C               	rlcf	??_WriteRun+1,f,c
  7997  001056  90D8               	bcf	status,0,c
  7998  001058  360B               	rlcf	??_WriteRun,f,c
  7999  00105A  360C               	rlcf	??_WriteRun+1,f,c
  8000  00105C  C00B  F001         	movff	??_WriteRun,WriteEE@address
  8001  001060  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  8002  001064  C007  FFD9         	movff	WriteRun@sorted,fsr2l
  8003  001068  C008  FFDA         	movff	WriteRun@sorted+1,fsr2h
  8004  00106C  50DF               	movf	indf2,w,c
  8005  00106E  6E03               	movwf	WriteEE@data,c
  8006  001070  EC24  F011         	call	_WriteEE	;wreg free
  8007  001074  4A0D               	infsnz	WriteRun@add,f,c
  8008  001076  2A0E               	incf	WriteRun@add+1,f,c
  8009                           
  8010                           ;eeprom.c: 84: WriteEE(add++ *8, sorted[1]);
  8011  001078  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  8012  00107C  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  8013  001080  90D8               	bcf	status,0,c
  8014  001082  360B               	rlcf	??_WriteRun,f,c
  8015  001084  360C               	rlcf	??_WriteRun+1,f,c
  8016  001086  90D8               	bcf	status,0,c
  8017  001088  360B               	rlcf	??_WriteRun,f,c
  8018  00108A  360C               	rlcf	??_WriteRun+1,f,c
  8019  00108C  90D8               	bcf	status,0,c
  8020  00108E  360B               	rlcf	??_WriteRun,f,c
  8021  001090  360C               	rlcf	??_WriteRun+1,f,c
  8022  001092  C00B  F001         	movff	??_WriteRun,WriteEE@address
  8023  001096  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  8024  00109A  EE20 F001          	lfsr	2,1
  8025  00109E  5007               	movf	WriteRun@sorted,w,c
  8026  0010A0  26D9               	addwf	fsr2l,f,c
  8027  0010A2  5008               	movf	WriteRun@sorted+1,w,c
  8028  0010A4  22DA               	addwfc	fsr2h,f,c
  8029  0010A6  50DF               	movf	indf2,w,c
  8030  0010A8  6E03               	movwf	WriteEE@data,c
  8031  0010AA  EC24  F011         	call	_WriteEE	;wreg free
  8032  0010AE  4A0D               	infsnz	WriteRun@add,f,c
  8033  0010B0  2A0E               	incf	WriteRun@add+1,f,c
  8034                           
  8035                           ;eeprom.c: 85: WriteEE(add++ *8, sorted[2]);
  8036  0010B2  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  8037  0010B6  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  8038  0010BA  90D8               	bcf	status,0,c
  8039  0010BC  360B               	rlcf	??_WriteRun,f,c
  8040  0010BE  360C               	rlcf	??_WriteRun+1,f,c
  8041  0010C0  90D8               	bcf	status,0,c
  8042  0010C2  360B               	rlcf	??_WriteRun,f,c
  8043  0010C4  360C               	rlcf	??_WriteRun+1,f,c
  8044  0010C6  90D8               	bcf	status,0,c
  8045  0010C8  360B               	rlcf	??_WriteRun,f,c
  8046  0010CA  360C               	rlcf	??_WriteRun+1,f,c
  8047  0010CC  C00B  F001         	movff	??_WriteRun,WriteEE@address
  8048  0010D0  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  8049  0010D4  EE20 F002          	lfsr	2,2
  8050  0010D8  5007               	movf	WriteRun@sorted,w,c
  8051  0010DA  26D9               	addwf	fsr2l,f,c
  8052  0010DC  5008               	movf	WriteRun@sorted+1,w,c
  8053  0010DE  22DA               	addwfc	fsr2h,f,c
  8054  0010E0  50DF               	movf	indf2,w,c
  8055  0010E2  6E03               	movwf	WriteEE@data,c
  8056  0010E4  EC24  F011         	call	_WriteEE	;wreg free
  8057  0010E8  4A0D               	infsnz	WriteRun@add,f,c
  8058  0010EA  2A0E               	incf	WriteRun@add+1,f,c
  8059                           
  8060                           ;eeprom.c: 86: WriteEE(add++ *8, sorted[3]);
  8061  0010EC  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  8062  0010F0  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  8063  0010F4  90D8               	bcf	status,0,c
  8064  0010F6  360B               	rlcf	??_WriteRun,f,c
  8065  0010F8  360C               	rlcf	??_WriteRun+1,f,c
  8066  0010FA  90D8               	bcf	status,0,c
  8067  0010FC  360B               	rlcf	??_WriteRun,f,c
  8068  0010FE  360C               	rlcf	??_WriteRun+1,f,c
  8069  001100  90D8               	bcf	status,0,c
  8070  001102  360B               	rlcf	??_WriteRun,f,c
  8071  001104  360C               	rlcf	??_WriteRun+1,f,c
  8072  001106  C00B  F001         	movff	??_WriteRun,WriteEE@address
  8073  00110A  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  8074  00110E  EE20 F003          	lfsr	2,3
  8075  001112  5007               	movf	WriteRun@sorted,w,c
  8076  001114  26D9               	addwf	fsr2l,f,c
  8077  001116  5008               	movf	WriteRun@sorted+1,w,c
  8078  001118  22DA               	addwfc	fsr2h,f,c
  8079  00111A  50DF               	movf	indf2,w,c
  8080  00111C  6E03               	movwf	WriteEE@data,c
  8081  00111E  EC24  F011         	call	_WriteEE	;wreg free
  8082  001122  4A0D               	infsnz	WriteRun@add,f,c
  8083  001124  2A0E               	incf	WriteRun@add+1,f,c
  8084                           
  8085                           ;eeprom.c: 87: WriteEE(160, Latest);
  8086  001126  0E00               	movlw	0
  8087  001128  6E02               	movwf	WriteEE@address+1,c
  8088  00112A  0EA0               	movlw	160
  8089  00112C  6E01               	movwf	WriteEE@address,c
  8090  00112E  C0C4  F003         	movff	_Latest,WriteEE@data
  8091  001132  EC24  F011         	call	_WriteEE	;wreg free
  8092  001136  0012               	return		;funcret
  8093  001138                     __end_of_WriteRun:
  8094                           	opt stack 0
  8095                           pclatu	equ	0xFFB
  8096                           pclath	equ	0xFFA
  8097                           tblptru	equ	0xFF8
  8098                           tblptrh	equ	0xFF7
  8099                           tblptrl	equ	0xFF6
  8100                           tablat	equ	0xFF5
  8101                           prodh	equ	0xFF4
  8102                           prodl	equ	0xFF3
  8103                           intcon	equ	0xFF2
  8104                           intcon2	equ	0xFF1
  8105                           intcon3	equ	0xFF0
  8106                           postinc0	equ	0xFEE
  8107                           fsr0h	equ	0xFEA
  8108                           fsr0l	equ	0xFE9
  8109                           wreg	equ	0xFE8
  8110                           plusw1	equ	0xFE3
  8111                           fsr1h	equ	0xFE2
  8112                           fsr1l	equ	0xFE1
  8113                           indf2	equ	0xFDF
  8114                           postinc2	equ	0xFDE
  8115                           postdec2	equ	0xFDD
  8116                           plusw2	equ	0xFDB
  8117                           fsr2h	equ	0xFDA
  8118                           fsr2l	equ	0xFD9
  8119                           status	equ	0xFD8
  8120                           
  8121 ;; *************** function _WriteEE *****************
  8122 ;; Defined at:
  8123 ;;		line 34 in file "eeprom.c"
  8124 ;; Parameters:    Size  Location     Type
  8125 ;;  address         2    0[COMRAM] unsigned int 
  8126 ;;  data            1    2[COMRAM] unsigned char 
  8127 ;; Auto vars:     Size  Location     Type
  8128 ;;		None
  8129 ;; Return value:  Size  Location     Type
  8130 ;;                  1    wreg      void 
  8131 ;; Registers used:
  8132 ;;		wreg, status,2
  8133 ;; Tracked objects:
  8134 ;;		On entry : 0/0
  8135 ;;		On exit  : 0/0
  8136 ;;		Unchanged: 0/0
  8137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8138 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8141 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8142 ;;Total ram usage:        3 bytes
  8143 ;; Hardware stack levels used:    1
  8144 ;; This function calls:
  8145 ;;		Nothing
  8146 ;; This function is called by:
  8147 ;;		_WriteRun
  8148 ;; This function uses a non-reentrant model
  8149 ;;
  8150                           
  8151                           	psect	text43
  8152  002248                     __ptext43:
  8153                           	opt stack 0
  8154  002248                     _WriteEE:
  8155                           	opt stack 23
  8156                           
  8157                           ;eeprom.c: 36: EEADRH = (unsigned char) (address >> 8);
  8158                           
  8159                           ;incstack = 0
  8160  002248  5002               	movf	WriteEE@address+1,w,c
  8161  00224A  6EAA               	movwf	4010,c	;volatile
  8162                           
  8163                           ;eeprom.c: 37: EEADR = (unsigned char) address;
  8164  00224C  C001  FFA9         	movff	WriteEE@address,4009	;volatile
  8165                           
  8166                           ;eeprom.c: 39: EEDATA = data;
  8167  002250  C003  FFA8         	movff	WriteEE@data,4008	;volatile
  8168                           
  8169                           ;eeprom.c: 40: EECON1bits.EEPGD = 0;
  8170  002254  9EA6               	bcf	4006,7,c	;volatile
  8171                           
  8172                           ;eeprom.c: 41: EECON1bits.CFGS = 0;
  8173  002256  9CA6               	bcf	4006,6,c	;volatile
  8174                           
  8175                           ;eeprom.c: 42: EECON1bits.WREN = 1;
  8176  002258  84A6               	bsf	4006,2,c	;volatile
  8177                           
  8178                           ;eeprom.c: 46: EECON2 = 0x55;
  8179  00225A  0E55               	movlw	85
  8180  00225C  6EA7               	movwf	4007,c	;volatile
  8181                           
  8182                           ;eeprom.c: 47: EECON2 = 0xAA;
  8183  00225E  0EAA               	movlw	170
  8184  002260  6EA7               	movwf	4007,c	;volatile
  8185                           
  8186                           ;eeprom.c: 48: EECON1bits.WR = 1;
  8187  002262  82A6               	bsf	4006,1,c	;volatile
  8188  002264                     i2l428:
  8189  002264  A8A1               	btfss	4001,4,c	;volatile
  8190  002266  D7FE               	goto	i2l428
  8191                           
  8192                           ;eeprom.c: 53: PIR2bits.EEIF = 0;
  8193  002268  98A1               	bcf	4001,4,c	;volatile
  8194                           
  8195                           ;eeprom.c: 54: EECON1bits.WREN = 0;
  8196  00226A  94A6               	bcf	4006,2,c	;volatile
  8197  00226C  0012               	return		;funcret
  8198  00226E                     __end_of_WriteEE:
  8199                           	opt stack 0
  8200                           pclatu	equ	0xFFB
  8201                           pclath	equ	0xFFA
  8202                           tblptru	equ	0xFF8
  8203                           tblptrh	equ	0xFF7
  8204                           tblptrl	equ	0xFF6
  8205                           tablat	equ	0xFF5
  8206                           prodh	equ	0xFF4
  8207                           prodl	equ	0xFF3
  8208                           intcon	equ	0xFF2
  8209                           intcon2	equ	0xFF1
  8210                           intcon3	equ	0xFF0
  8211                           postinc0	equ	0xFEE
  8212                           fsr0h	equ	0xFEA
  8213                           fsr0l	equ	0xFE9
  8214                           wreg	equ	0xFE8
  8215                           plusw1	equ	0xFE3
  8216                           fsr1h	equ	0xFE2
  8217                           fsr1l	equ	0xFE1
  8218                           indf2	equ	0xFDF
  8219                           postinc2	equ	0xFDE
  8220                           postdec2	equ	0xFDD
  8221                           plusw2	equ	0xFDB
  8222                           fsr2h	equ	0xFDA
  8223                           fsr2l	equ	0xFD9
  8224                           status	equ	0xFD8
  8225                           
  8226 ;; *************** function _HexDecToDec2 *****************
  8227 ;; Defined at:
  8228 ;;		line 6 in file "modules.c"
  8229 ;; Parameters:    Size  Location     Type
  8230 ;;  hex             2    6[COMRAM] unsigned int 
  8231 ;; Auto vars:     Size  Location     Type
  8232 ;;  digit           2   13[COMRAM] unsigned int 
  8233 ;;  tenth           2   11[COMRAM] unsigned int 
  8234 ;; Return value:  Size  Location     Type
  8235 ;;                  2    6[COMRAM] unsigned int 
  8236 ;; Registers used:
  8237 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8238 ;; Tracked objects:
  8239 ;;		On entry : 0/0
  8240 ;;		On exit  : 0/0
  8241 ;;		Unchanged: 0/0
  8242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8243 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8244 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8245 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8246 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8247 ;;Total ram usage:        9 bytes
  8248 ;; Hardware stack levels used:    1
  8249 ;; Hardware stack levels required when called:    1
  8250 ;; This function calls:
  8251 ;;		i2___wmul
  8252 ;; This function is called by:
  8253 ;;		_simulate
  8254 ;; This function uses a non-reentrant model
  8255 ;;
  8256                           
  8257                           	psect	text44
  8258  001FDC                     __ptext44:
  8259                           	opt stack 0
  8260  001FDC                     _HexDecToDec2:
  8261                           	opt stack 23
  8262                           
  8263                           ;modules.c: 8: unsigned tenth = hex / 16;
  8264                           
  8265                           ;incstack = 0
  8266  001FDC  C007  F009         	movff	HexDecToDec2@hex,??_HexDecToDec2
  8267  001FE0  C008  F00A         	movff	HexDecToDec2@hex+1,??_HexDecToDec2+1
  8268  001FE4  0E04               	movlw	4
  8269  001FE6  6E0B               	movwf	(??_HexDecToDec2+2)& (0+255),c
  8270  001FE8                     i2u305_45:
  8271  001FE8  90D8               	bcf	status,0,c
  8272  001FEA  320A               	rrcf	??_HexDecToDec2+1,f,c
  8273  001FEC  3209               	rrcf	??_HexDecToDec2,f,c
  8274  001FEE  2E0B               	decfsz	(??_HexDecToDec2+2)& (0+255),f,c
  8275  001FF0  D7FB               	goto	i2u305_45
  8276  001FF2  C009  F00C         	movff	??_HexDecToDec2,HexDecToDec2@tenth
  8277  001FF6  C00A  F00D         	movff	??_HexDecToDec2+1,HexDecToDec2@tenth+1
  8278                           
  8279                           ;modules.c: 9: unsigned digit = hex % 16;
  8280  001FFA  0E0F               	movlw	15
  8281  001FFC  1407               	andwf	HexDecToDec2@hex,w,c
  8282  001FFE  6E0E               	movwf	HexDecToDec2@digit,c
  8283  002000  6A0F               	clrf	HexDecToDec2@digit+1,c
  8284                           
  8285                           ;modules.c: 10: return tenth * 10 + digit;
  8286  002002  C00C  F001         	movff	HexDecToDec2@tenth,i2___wmul@multiplier
  8287  002006  C00D  F002         	movff	HexDecToDec2@tenth+1,i2___wmul@multiplier+1
  8288  00200A  0E00               	movlw	0
  8289  00200C  6E04               	movwf	i2___wmul@multiplicand+1,c
  8290  00200E  0E0A               	movlw	10
  8291  002010  6E03               	movwf	i2___wmul@multiplicand,c
  8292  002012  EC37  F011         	call	i2___wmul	;wreg free
  8293  002016  500E               	movf	HexDecToDec2@digit,w,c
  8294  002018  2401               	addwf	?i2___wmul,w,c
  8295  00201A  6E07               	movwf	?_HexDecToDec2,c
  8296  00201C  500F               	movf	HexDecToDec2@digit+1,w,c
  8297  00201E  2002               	addwfc	?i2___wmul+1,w,c
  8298  002020  6E08               	movwf	?_HexDecToDec2+1,c
  8299  002022  0012               	return	
  8300  002024                     __end_of_HexDecToDec2:
  8301                           	opt stack 0
  8302                           pclatu	equ	0xFFB
  8303                           pclath	equ	0xFFA
  8304                           tblptru	equ	0xFF8
  8305                           tblptrh	equ	0xFF7
  8306                           tblptrl	equ	0xFF6
  8307                           tablat	equ	0xFF5
  8308                           prodh	equ	0xFF4
  8309                           prodl	equ	0xFF3
  8310                           intcon	equ	0xFF2
  8311                           intcon2	equ	0xFF1
  8312                           intcon3	equ	0xFF0
  8313                           postinc0	equ	0xFEE
  8314                           fsr0h	equ	0xFEA
  8315                           fsr0l	equ	0xFE9
  8316                           wreg	equ	0xFE8
  8317                           plusw1	equ	0xFE3
  8318                           fsr1h	equ	0xFE2
  8319                           fsr1l	equ	0xFE1
  8320                           indf2	equ	0xFDF
  8321                           postinc2	equ	0xFDE
  8322                           postdec2	equ	0xFDD
  8323                           plusw2	equ	0xFDB
  8324                           fsr2h	equ	0xFDA
  8325                           fsr2l	equ	0xFD9
  8326                           status	equ	0xFD8
  8327                           
  8328 ;; *************** function _CW90 *****************
  8329 ;; Defined at:
  8330 ;;		line 19 in file "motors.c"
  8331 ;; Parameters:    Size  Location     Type
  8332 ;;  port            2   21[COMRAM] PTR int 
  8333 ;;		 -> simulate@portCW(6), 
  8334 ;; Auto vars:     Size  Location     Type
  8335 ;;		None
  8336 ;; Return value:  Size  Location     Type
  8337 ;;                  1    wreg      void 
  8338 ;; Registers used:
  8339 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8340 ;; Tracked objects:
  8341 ;;		On entry : 0/0
  8342 ;;		On exit  : 0/0
  8343 ;;		Unchanged: 0/0
  8344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8345 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8346 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8347 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8348 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8349 ;;Total ram usage:        8 bytes
  8350 ;; Hardware stack levels used:    1
  8351 ;; Hardware stack levels required when called:    2
  8352 ;; This function calls:
  8353 ;;		_PWMC
  8354 ;; This function is called by:
  8355 ;;		_simulate
  8356 ;; This function uses a non-reentrant model
  8357 ;;
  8358                           
  8359                           	psect	text45
  8360  001C86                     __ptext45:
  8361                           	opt stack 0
  8362  001C86                     _CW90:
  8363                           	opt stack 22
  8364                           
  8365                           ;motors.c: 21: if (port[0] + port[1] + port[2] == 0)return;
  8366                           
  8367                           ;incstack = 0
  8368  001C86  EE20 F004          	lfsr	2,4
  8369  001C8A  5016               	movf	CW90@port,w,c
  8370  001C8C  26D9               	addwf	fsr2l,f,c
  8371  001C8E  5017               	movf	CW90@port+1,w,c
  8372  001C90  22DA               	addwfc	fsr2h,f,c
  8373  001C92  CFDE F018          	movff	postinc2,??_CW90
  8374  001C96  CFDD F019          	movff	postdec2,??_CW90+1
  8375  001C9A  EE20 F002          	lfsr	2,2
  8376  001C9E  5016               	movf	CW90@port,w,c
  8377  001CA0  26D9               	addwf	fsr2l,f,c
  8378  001CA2  5017               	movf	CW90@port+1,w,c
  8379  001CA4  22DA               	addwfc	fsr2h,f,c
  8380  001CA6  CFDE F01A          	movff	postinc2,??_CW90+2
  8381  001CAA  CFDD F01B          	movff	postdec2,??_CW90+3
  8382  001CAE  C016  FFD9         	movff	CW90@port,fsr2l
  8383  001CB2  C017  FFDA         	movff	CW90@port+1,fsr2h
  8384  001CB6  CFDE F01C          	movff	postinc2,??_CW90+4
  8385  001CBA  CFDD F01D          	movff	postdec2,??_CW90+5
  8386  001CBE  501A               	movf	??_CW90+2,w,c
  8387  001CC0  261C               	addwf	??_CW90+4,f,c
  8388  001CC2  501B               	movf	??_CW90+3,w,c
  8389  001CC4  221D               	addwfc	??_CW90+5,f,c
  8390  001CC6  5018               	movf	??_CW90,w,c
  8391  001CC8  261C               	addwf	??_CW90+4,f,c
  8392  001CCA  5019               	movf	??_CW90+1,w,c
  8393  001CCC  221D               	addwfc	??_CW90+5,f,c
  8394  001CCE  501C               	movf	??_CW90+4,w,c
  8395  001CD0  101D               	iorwf	??_CW90+5,w,c
  8396  001CD2  B4D8               	btfsc	status,2,c
  8397  001CD4  0012               	return	
  8398                           
  8399                           ;motors.c: 22: PWMC(3000, 120, port);
  8400  001CD6  0E0B               	movlw	11
  8401  001CD8  6E0A               	movwf	PWMC@widthus+1,c
  8402  001CDA  0EB8               	movlw	184
  8403  001CDC  6E09               	movwf	PWMC@widthus,c
  8404  001CDE  0E00               	movlw	0
  8405  001CE0  6E0C               	movwf	PWMC@cycles+1,c
  8406  001CE2  0E78               	movlw	120
  8407  001CE4  6E0B               	movwf	PWMC@cycles,c
  8408  001CE6  C016  F00D         	movff	CW90@port,PWMC@port
  8409  001CEA  C017  F00E         	movff	CW90@port+1,PWMC@port+1
  8410  001CEE  EC28  F00A         	call	_PWMC	;wreg free
  8411  001CF2  0012               	return		;funcret
  8412  001CF4                     __end_of_CW90:
  8413                           	opt stack 0
  8414                           pclatu	equ	0xFFB
  8415                           pclath	equ	0xFFA
  8416                           tblptru	equ	0xFF8
  8417                           tblptrh	equ	0xFF7
  8418                           tblptrl	equ	0xFF6
  8419                           tablat	equ	0xFF5
  8420                           prodh	equ	0xFF4
  8421                           prodl	equ	0xFF3
  8422                           intcon	equ	0xFF2
  8423                           intcon2	equ	0xFF1
  8424                           intcon3	equ	0xFF0
  8425                           postinc0	equ	0xFEE
  8426                           fsr0h	equ	0xFEA
  8427                           fsr0l	equ	0xFE9
  8428                           wreg	equ	0xFE8
  8429                           plusw1	equ	0xFE3
  8430                           fsr1h	equ	0xFE2
  8431                           fsr1l	equ	0xFE1
  8432                           indf2	equ	0xFDF
  8433                           postinc2	equ	0xFDE
  8434                           postdec2	equ	0xFDD
  8435                           plusw2	equ	0xFDB
  8436                           fsr2h	equ	0xFDA
  8437                           fsr2l	equ	0xFD9
  8438                           status	equ	0xFD8
  8439                           
  8440 ;; *************** function _CCW90 *****************
  8441 ;; Defined at:
  8442 ;;		line 25 in file "motors.c"
  8443 ;; Parameters:    Size  Location     Type
  8444 ;;  port            2   21[COMRAM] PTR int 
  8445 ;;		 -> simulate@portCCW(6), 
  8446 ;; Auto vars:     Size  Location     Type
  8447 ;;		None
  8448 ;; Return value:  Size  Location     Type
  8449 ;;                  1    wreg      void 
  8450 ;; Registers used:
  8451 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8452 ;; Tracked objects:
  8453 ;;		On entry : 0/0
  8454 ;;		On exit  : 0/0
  8455 ;;		Unchanged: 0/0
  8456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8457 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8459 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8460 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8461 ;;Total ram usage:        8 bytes
  8462 ;; Hardware stack levels used:    1
  8463 ;; Hardware stack levels required when called:    2
  8464 ;; This function calls:
  8465 ;;		_PWMC
  8466 ;; This function is called by:
  8467 ;;		_simulate
  8468 ;; This function uses a non-reentrant model
  8469 ;;
  8470                           
  8471                           	psect	text46
  8472  001CF4                     __ptext46:
  8473                           	opt stack 0
  8474  001CF4                     _CCW90:
  8475                           	opt stack 22
  8476                           
  8477                           ;motors.c: 27: if (port[0] + port[1] + port[2] == 0)return;
  8478                           
  8479                           ;incstack = 0
  8480  001CF4  EE20 F004          	lfsr	2,4
  8481  001CF8  5016               	movf	CCW90@port,w,c
  8482  001CFA  26D9               	addwf	fsr2l,f,c
  8483  001CFC  5017               	movf	CCW90@port+1,w,c
  8484  001CFE  22DA               	addwfc	fsr2h,f,c
  8485  001D00  CFDE F018          	movff	postinc2,??_CCW90
  8486  001D04  CFDD F019          	movff	postdec2,??_CCW90+1
  8487  001D08  EE20 F002          	lfsr	2,2
  8488  001D0C  5016               	movf	CCW90@port,w,c
  8489  001D0E  26D9               	addwf	fsr2l,f,c
  8490  001D10  5017               	movf	CCW90@port+1,w,c
  8491  001D12  22DA               	addwfc	fsr2h,f,c
  8492  001D14  CFDE F01A          	movff	postinc2,??_CCW90+2
  8493  001D18  CFDD F01B          	movff	postdec2,??_CCW90+3
  8494  001D1C  C016  FFD9         	movff	CCW90@port,fsr2l
  8495  001D20  C017  FFDA         	movff	CCW90@port+1,fsr2h
  8496  001D24  CFDE F01C          	movff	postinc2,??_CCW90+4
  8497  001D28  CFDD F01D          	movff	postdec2,??_CCW90+5
  8498  001D2C  501A               	movf	??_CCW90+2,w,c
  8499  001D2E  261C               	addwf	??_CCW90+4,f,c
  8500  001D30  501B               	movf	??_CCW90+3,w,c
  8501  001D32  221D               	addwfc	??_CCW90+5,f,c
  8502  001D34  5018               	movf	??_CCW90,w,c
  8503  001D36  261C               	addwf	??_CCW90+4,f,c
  8504  001D38  5019               	movf	??_CCW90+1,w,c
  8505  001D3A  221D               	addwfc	??_CCW90+5,f,c
  8506  001D3C  501C               	movf	??_CCW90+4,w,c
  8507  001D3E  101D               	iorwf	??_CCW90+5,w,c
  8508  001D40  B4D8               	btfsc	status,2,c
  8509  001D42  0012               	return	
  8510                           
  8511                           ;motors.c: 28: PWMC(400, 1000, port);
  8512  001D44  0E01               	movlw	1
  8513  001D46  6E0A               	movwf	PWMC@widthus+1,c
  8514  001D48  0E90               	movlw	144
  8515  001D4A  6E09               	movwf	PWMC@widthus,c
  8516  001D4C  0E03               	movlw	3
  8517  001D4E  6E0C               	movwf	PWMC@cycles+1,c
  8518  001D50  0EE8               	movlw	232
  8519  001D52  6E0B               	movwf	PWMC@cycles,c
  8520  001D54  C016  F00D         	movff	CCW90@port,PWMC@port
  8521  001D58  C017  F00E         	movff	CCW90@port+1,PWMC@port+1
  8522  001D5C  EC28  F00A         	call	_PWMC	;wreg free
  8523  001D60  0012               	return		;funcret
  8524  001D62                     __end_of_CCW90:
  8525                           	opt stack 0
  8526                           pclatu	equ	0xFFB
  8527                           pclath	equ	0xFFA
  8528                           tblptru	equ	0xFF8
  8529                           tblptrh	equ	0xFF7
  8530                           tblptrl	equ	0xFF6
  8531                           tablat	equ	0xFF5
  8532                           prodh	equ	0xFF4
  8533                           prodl	equ	0xFF3
  8534                           intcon	equ	0xFF2
  8535                           intcon2	equ	0xFF1
  8536                           intcon3	equ	0xFF0
  8537                           postinc0	equ	0xFEE
  8538                           fsr0h	equ	0xFEA
  8539                           fsr0l	equ	0xFE9
  8540                           wreg	equ	0xFE8
  8541                           plusw1	equ	0xFE3
  8542                           fsr1h	equ	0xFE2
  8543                           fsr1l	equ	0xFE1
  8544                           indf2	equ	0xFDF
  8545                           postinc2	equ	0xFDE
  8546                           postdec2	equ	0xFDD
  8547                           plusw2	equ	0xFDB
  8548                           fsr2h	equ	0xFDA
  8549                           fsr2l	equ	0xFD9
  8550                           status	equ	0xFD8
  8551                           
  8552 ;; *************** function _PWMC *****************
  8553 ;; Defined at:
  8554 ;;		line 4 in file "motors.c"
  8555 ;; Parameters:    Size  Location     Type
  8556 ;;  widthus         2    8[COMRAM] int 
  8557 ;;  cycles          2   10[COMRAM] int 
  8558 ;;  port            2   12[COMRAM] PTR int 
  8559 ;;		 -> intrpt@port(6), simulate@portShake(0), simulate@portCCW(6), simulate@portCW(6), 
  8560 ;; Auto vars:     Size  Location     Type
  8561 ;;  countdown       2   19[COMRAM] int 
  8562 ;; Return value:  Size  Location     Type
  8563 ;;                  1    wreg      void 
  8564 ;; Registers used:
  8565 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8566 ;; Tracked objects:
  8567 ;;		On entry : 0/0
  8568 ;;		On exit  : 0/0
  8569 ;;		Unchanged: 0/0
  8570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8571 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8572 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8573 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8574 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8575 ;;Total ram usage:       13 bytes
  8576 ;; Hardware stack levels used:    1
  8577 ;; Hardware stack levels required when called:    1
  8578 ;; This function calls:
  8579 ;;		___awdiv
  8580 ;; This function is called by:
  8581 ;;		_intrpt
  8582 ;;		_CW90
  8583 ;;		_CCW90
  8584 ;;		_shake
  8585 ;; This function uses a non-reentrant model
  8586 ;;
  8587                           
  8588                           	psect	text47
  8589  001450                     __ptext47:
  8590                           	opt stack 0
  8591  001450                     _PWMC:
  8592                           	opt stack 22
  8593                           
  8594                           ;motors.c: 5: widthus /= 10;
  8595                           
  8596                           ;incstack = 0
  8597  001450  C009  F001         	movff	PWMC@widthus,___awdiv@dividend
  8598  001454  C00A  F002         	movff	PWMC@widthus+1,___awdiv@dividend+1
  8599  001458  0E00               	movlw	0
  8600  00145A  6E04               	movwf	___awdiv@divisor+1,c
  8601  00145C  0E0A               	movlw	10
  8602  00145E  6E03               	movwf	___awdiv@divisor,c
  8603  001460  ECDB  F00C         	call	___awdiv	;wreg free
  8604  001464  C001  F009         	movff	?___awdiv,PWMC@widthus
  8605  001468  C002  F00A         	movff	?___awdiv+1,PWMC@widthus+1
  8606                           
  8607                           ;motors.c: 6: widthus -= 1;
  8608  00146C  0609               	decf	PWMC@widthus,f,c
  8609  00146E  A0D8               	btfss	status,0,c
  8610  001470  060A               	decf	PWMC@widthus+1,f,c
  8611                           
  8612                           ;motors.c: 7: int countdown = widthus;
  8613  001472  C009  F014         	movff	PWMC@widthus,PWMC@countdown
  8614  001476  C00A  F015         	movff	PWMC@widthus+1,PWMC@countdown+1
  8615  00147A                     i2l3240:
  8616  00147A  BE0C               	btfsc	PWMC@cycles+1,7,c
  8617  00147C  0012               	return	
  8618  00147E  500C               	movf	PWMC@cycles+1,w,c
  8619  001480  E103               	bnz	i2l268
  8620  001482  040B               	decf	PWMC@cycles,w,c
  8621  001484  A0D8               	btfss	status,0,c
  8622  001486  0012               	return	
  8623  001488                     i2l268:
  8624                           
  8625                           ;motors.c: 9: countdown = widthus;
  8626  001488  C009  F014         	movff	PWMC@widthus,PWMC@countdown
  8627  00148C  C00A  F015         	movff	PWMC@widthus+1,PWMC@countdown+1
  8628                           
  8629                           ;motors.c: 10: LATC0 = (1 ^ LATC0) & port[0];
  8630  001490  0E00               	movlw	0
  8631  001492  6E11               	movwf	_PWMC$1394,c
  8632  001494  B08B               	btfsc	3979,0,c	;volatile
  8633  001496  D00D               	goto	i2l3252
  8634  001498  C00D  FFD9         	movff	PWMC@port,fsr2l
  8635  00149C  C00E  FFDA         	movff	PWMC@port+1,fsr2h
  8636  0014A0  CFDE F00F          	movff	postinc2,??_PWMC
  8637  0014A4  CFDD F010          	movff	postdec2,??_PWMC+1
  8638  0014A8  300F               	rrcf	??_PWMC,w,c
  8639  0014AA  A0D8               	btfss	status,0,c
  8640  0014AC  D002               	goto	i2l3252
  8641  0014AE  0E01               	movlw	1
  8642  0014B0  6E11               	movwf	_PWMC$1394,c
  8643  0014B2                     i2l3252:
  8644  0014B2  B011               	btfsc	_PWMC$1394,0,c
  8645  0014B4  D002               	bra	i2u240_45
  8646  0014B6  908B               	bcf	3979,0,c	;volatile
  8647  0014B8  D001               	bra	i2u240_46
  8648  0014BA                     i2u240_45:
  8649  0014BA  808B               	bsf	3979,0,c	;volatile
  8650  0014BC                     i2u240_46:
  8651                           
  8652                           ;motors.c: 11: LATC1 = (1 ^ LATC1) & port[1];
  8653  0014BC  0E00               	movlw	0
  8654  0014BE  6E12               	movwf	_PWMC$1395,c
  8655  0014C0  B28B               	btfsc	3979,1,c	;volatile
  8656  0014C2  D00F               	goto	i2l3260
  8657  0014C4  EE20 F002          	lfsr	2,2
  8658  0014C8  500D               	movf	PWMC@port,w,c
  8659  0014CA  26D9               	addwf	fsr2l,f,c
  8660  0014CC  500E               	movf	PWMC@port+1,w,c
  8661  0014CE  22DA               	addwfc	fsr2h,f,c
  8662  0014D0  CFDE F00F          	movff	postinc2,??_PWMC
  8663  0014D4  CFDD F010          	movff	postdec2,??_PWMC+1
  8664  0014D8  300F               	rrcf	??_PWMC,w,c
  8665  0014DA  A0D8               	btfss	status,0,c
  8666  0014DC  D002               	goto	i2l3260
  8667  0014DE  0E01               	movlw	1
  8668  0014E0  6E12               	movwf	_PWMC$1395,c
  8669  0014E2                     i2l3260:
  8670  0014E2  B012               	btfsc	_PWMC$1395,0,c
  8671  0014E4  D002               	bra	i2u243_45
  8672  0014E6  928B               	bcf	3979,1,c	;volatile
  8673  0014E8  D001               	bra	i2u243_46
  8674  0014EA                     i2u243_45:
  8675  0014EA  828B               	bsf	3979,1,c	;volatile
  8676  0014EC                     i2u243_46:
  8677                           
  8678                           ;motors.c: 12: LATC2 = (1 ^ LATC2) & port[2];
  8679  0014EC  0E00               	movlw	0
  8680  0014EE  6E13               	movwf	_PWMC$1396,c
  8681  0014F0  B48B               	btfsc	3979,2,c	;volatile
  8682  0014F2  D00F               	goto	i2l3268
  8683  0014F4  EE20 F004          	lfsr	2,4
  8684  0014F8  500D               	movf	PWMC@port,w,c
  8685  0014FA  26D9               	addwf	fsr2l,f,c
  8686  0014FC  500E               	movf	PWMC@port+1,w,c
  8687  0014FE  22DA               	addwfc	fsr2h,f,c
  8688  001500  CFDE F00F          	movff	postinc2,??_PWMC
  8689  001504  CFDD F010          	movff	postdec2,??_PWMC+1
  8690  001508  300F               	rrcf	??_PWMC,w,c
  8691  00150A  A0D8               	btfss	status,0,c
  8692  00150C  D002               	goto	i2l3268
  8693  00150E  0E01               	movlw	1
  8694  001510  6E13               	movwf	_PWMC$1396,c
  8695  001512                     i2l3268:
  8696  001512  B013               	btfsc	_PWMC$1396,0,c
  8697  001514  D002               	bra	i2u246_45
  8698  001516  948B               	bcf	3979,2,c	;volatile
  8699  001518  D001               	bra	i2u246_46
  8700  00151A                     i2u246_45:
  8701  00151A  848B               	bsf	3979,2,c	;volatile
  8702  00151C                     i2u246_46:
  8703  00151C                     i2l3270:
  8704  00151C  BE15               	btfsc	PWMC@countdown+1,7,c
  8705  00151E  D00D               	goto	i2l3278
  8706  001520  5015               	movf	PWMC@countdown+1,w,c
  8707  001522  E103               	bnz	i2l3274
  8708  001524  0414               	decf	PWMC@countdown,w,c
  8709  001526  A0D8               	btfss	status,0,c
  8710  001528  D008               	goto	i2l3278
  8711  00152A                     i2l3274:
  8712                           
  8713                           ;motors.c: 14: _delay((unsigned long)((5)*(8000000/4000000.0)));
  8714  00152A  0E03               	movlw	3
  8715  00152C                     i2u354_47:
  8716  00152C  2EE8               	decfsz	wreg,f,c
  8717  00152E  D7FE               	bra	i2u354_47
  8718  001530  F000               	nop	
  8719  001532  0614               	decf	PWMC@countdown,f,c
  8720  001534  A0D8               	btfss	status,0,c
  8721  001536  0615               	decf	PWMC@countdown+1,f,c
  8722  001538  D7F1               	goto	i2l3270
  8723  00153A                     i2l3278:
  8724  00153A  060B               	decf	PWMC@cycles,f,c
  8725  00153C  A0D8               	btfss	status,0,c
  8726  00153E  060C               	decf	PWMC@cycles+1,f,c
  8727  001540  D79C               	goto	i2l3240
  8728  001542                     __end_of_PWMC:
  8729                           	opt stack 0
  8730                           pclatu	equ	0xFFB
  8731                           pclath	equ	0xFFA
  8732                           tblptru	equ	0xFF8
  8733                           tblptrh	equ	0xFF7
  8734                           tblptrl	equ	0xFF6
  8735                           tablat	equ	0xFF5
  8736                           prodh	equ	0xFF4
  8737                           prodl	equ	0xFF3
  8738                           intcon	equ	0xFF2
  8739                           intcon2	equ	0xFF1
  8740                           intcon3	equ	0xFF0
  8741                           postinc0	equ	0xFEE
  8742                           fsr0h	equ	0xFEA
  8743                           fsr0l	equ	0xFE9
  8744                           wreg	equ	0xFE8
  8745                           plusw1	equ	0xFE3
  8746                           fsr1h	equ	0xFE2
  8747                           fsr1l	equ	0xFE1
  8748                           indf2	equ	0xFDF
  8749                           postinc2	equ	0xFDE
  8750                           postdec2	equ	0xFDD
  8751                           plusw2	equ	0xFDB
  8752                           fsr2h	equ	0xFDA
  8753                           fsr2l	equ	0xFD9
  8754                           status	equ	0xFD8
  8755                           
  8756 ;; *************** function ___awdiv *****************
  8757 ;; Defined at:
  8758 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  8759 ;; Parameters:    Size  Location     Type
  8760 ;;  dividend        2    0[COMRAM] int 
  8761 ;;  divisor         2    2[COMRAM] int 
  8762 ;; Auto vars:     Size  Location     Type
  8763 ;;  quotient        2    6[COMRAM] int 
  8764 ;;  sign            1    5[COMRAM] unsigned char 
  8765 ;;  counter         1    4[COMRAM] unsigned char 
  8766 ;; Return value:  Size  Location     Type
  8767 ;;                  2    0[COMRAM] int 
  8768 ;; Registers used:
  8769 ;;		wreg, status,2, status,0
  8770 ;; Tracked objects:
  8771 ;;		On entry : 0/0
  8772 ;;		On exit  : 0/0
  8773 ;;		Unchanged: 0/0
  8774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8775 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8776 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8778 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8779 ;;Total ram usage:        8 bytes
  8780 ;; Hardware stack levels used:    1
  8781 ;; This function calls:
  8782 ;;		Nothing
  8783 ;; This function is called by:
  8784 ;;		_PWMC
  8785 ;; This function uses a non-reentrant model
  8786 ;;
  8787                           
  8788                           	psect	text48
  8789  0019B6                     __ptext48:
  8790                           	opt stack 0
  8791  0019B6                     ___awdiv:
  8792                           	opt stack 22
  8793                           
  8794                           ;incstack = 0
  8795  0019B6  0E00               	movlw	0
  8796  0019B8  6E06               	movwf	___awdiv@sign,c
  8797  0019BA  AE04               	btfss	___awdiv@divisor+1,7,c
  8798  0019BC  D006               	goto	i2l3002
  8799  0019BE  6C03               	negf	___awdiv@divisor,c
  8800  0019C0  1E04               	comf	___awdiv@divisor+1,f,c
  8801  0019C2  B0D8               	btfsc	status,0,c
  8802  0019C4  2A04               	incf	___awdiv@divisor+1,f,c
  8803  0019C6  0E01               	movlw	1
  8804  0019C8  6E06               	movwf	___awdiv@sign,c
  8805  0019CA                     i2l3002:
  8806  0019CA  AE02               	btfss	___awdiv@dividend+1,7,c
  8807  0019CC  D006               	goto	i2l3008
  8808  0019CE  6C01               	negf	___awdiv@dividend,c
  8809  0019D0  1E02               	comf	___awdiv@dividend+1,f,c
  8810  0019D2  B0D8               	btfsc	status,0,c
  8811  0019D4  2A02               	incf	___awdiv@dividend+1,f,c
  8812  0019D6  0E01               	movlw	1
  8813  0019D8  1A06               	xorwf	___awdiv@sign,f,c
  8814  0019DA                     i2l3008:
  8815  0019DA  0E00               	movlw	0
  8816  0019DC  6E08               	movwf	___awdiv@quotient+1,c
  8817  0019DE  0E00               	movlw	0
  8818  0019E0  6E07               	movwf	___awdiv@quotient,c
  8819  0019E2  5003               	movf	___awdiv@divisor,w,c
  8820  0019E4  1004               	iorwf	___awdiv@divisor+1,w,c
  8821  0019E6  B4D8               	btfsc	status,2,c
  8822  0019E8  D01C               	goto	i2l3030
  8823  0019EA  0E01               	movlw	1
  8824  0019EC  6E05               	movwf	___awdiv@counter,c
  8825  0019EE  D004               	goto	i2l3016
  8826  0019F0                     i2l3014:
  8827  0019F0  90D8               	bcf	status,0,c
  8828  0019F2  3603               	rlcf	___awdiv@divisor,f,c
  8829  0019F4  3604               	rlcf	___awdiv@divisor+1,f,c
  8830  0019F6  2A05               	incf	___awdiv@counter,f,c
  8831  0019F8                     i2l3016:
  8832  0019F8  AE04               	btfss	___awdiv@divisor+1,7,c
  8833  0019FA  D7FA               	goto	i2l3014
  8834  0019FC                     i2l3018:
  8835  0019FC  90D8               	bcf	status,0,c
  8836  0019FE  3607               	rlcf	___awdiv@quotient,f,c
  8837  001A00  3608               	rlcf	___awdiv@quotient+1,f,c
  8838  001A02  5003               	movf	___awdiv@divisor,w,c
  8839  001A04  5C01               	subwf	___awdiv@dividend,w,c
  8840  001A06  5004               	movf	___awdiv@divisor+1,w,c
  8841  001A08  5802               	subwfb	___awdiv@dividend+1,w,c
  8842  001A0A  A0D8               	btfss	status,0,c
  8843  001A0C  D005               	goto	i2l3026
  8844  001A0E  5003               	movf	___awdiv@divisor,w,c
  8845  001A10  5E01               	subwf	___awdiv@dividend,f,c
  8846  001A12  5004               	movf	___awdiv@divisor+1,w,c
  8847  001A14  5A02               	subwfb	___awdiv@dividend+1,f,c
  8848  001A16  8007               	bsf	___awdiv@quotient,0,c
  8849  001A18                     i2l3026:
  8850  001A18  90D8               	bcf	status,0,c
  8851  001A1A  3204               	rrcf	___awdiv@divisor+1,f,c
  8852  001A1C  3203               	rrcf	___awdiv@divisor,f,c
  8853  001A1E  2E05               	decfsz	___awdiv@counter,f,c
  8854  001A20  D7ED               	goto	i2l3018
  8855  001A22                     i2l3030:
  8856  001A22  5006               	movf	___awdiv@sign,w,c
  8857  001A24  B4D8               	btfsc	status,2,c
  8858  001A26  D004               	goto	i2l3034
  8859  001A28  6C07               	negf	___awdiv@quotient,c
  8860  001A2A  1E08               	comf	___awdiv@quotient+1,f,c
  8861  001A2C  B0D8               	btfsc	status,0,c
  8862  001A2E  2A08               	incf	___awdiv@quotient+1,f,c
  8863  001A30                     i2l3034:
  8864  001A30  C007  F001         	movff	___awdiv@quotient,?___awdiv
  8865  001A34  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  8866  001A38  0012               	return	
  8867  001A3A                     __end_of___awdiv:
  8868                           	opt stack 0
  8869                           pclatu	equ	0xFFB
  8870                           pclath	equ	0xFFA
  8871                           tblptru	equ	0xFF8
  8872                           tblptrh	equ	0xFF7
  8873                           tblptrl	equ	0xFF6
  8874                           tablat	equ	0xFF5
  8875                           prodh	equ	0xFF4
  8876                           prodl	equ	0xFF3
  8877                           intcon	equ	0xFF2
  8878                           intcon2	equ	0xFF1
  8879                           intcon3	equ	0xFF0
  8880                           postinc0	equ	0xFEE
  8881                           fsr0h	equ	0xFEA
  8882                           fsr0l	equ	0xFE9
  8883                           wreg	equ	0xFE8
  8884                           plusw1	equ	0xFE3
  8885                           fsr1h	equ	0xFE2
  8886                           fsr1l	equ	0xFE1
  8887                           indf2	equ	0xFDF
  8888                           postinc2	equ	0xFDE
  8889                           postdec2	equ	0xFDD
  8890                           plusw2	equ	0xFDB
  8891                           fsr2h	equ	0xFDA
  8892                           fsr2l	equ	0xFD9
  8893                           status	equ	0xFD8
  8894                           
  8895 ;; *************** function _PermLog *****************
  8896 ;; Defined at:
  8897 ;;		line 90 in file "eeprom.c"
  8898 ;; Parameters:    Size  Location     Type
  8899 ;;		None
  8900 ;; Auto vars:     Size  Location     Type
  8901 ;;  sorted          4   49[COMRAM] unsigned char [4]
  8902 ;;  time            2   54[COMRAM] unsigned int 
  8903 ;;  backruns        1   56[COMRAM] unsigned char 
  8904 ;;  goback          1   53[COMRAM] unsigned char 
  8905 ;; Return value:  Size  Location     Type
  8906 ;;                  1    wreg      void 
  8907 ;; Registers used:
  8908 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8909 ;; Tracked objects:
  8910 ;;		On entry : 0/0
  8911 ;;		On exit  : 0/0
  8912 ;;		Unchanged: 0/0
  8913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8915 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8916 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8917 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8918 ;;Total ram usage:       10 bytes
  8919 ;; Hardware stack levels used:    1
  8920 ;; Hardware stack levels required when called:    4
  8921 ;; This function calls:
  8922 ;;		_ReadRun
  8923 ;;		_captureKeypad
  8924 ;;		_showInfo
  8925 ;;		i2_lcdInst
  8926 ;;		i2_printf
  8927 ;; This function is called by:
  8928 ;;		_intrpt
  8929 ;; This function uses a non-reentrant model
  8930 ;;
  8931                           
  8932                           	psect	text49
  8933  001542                     __ptext49:
  8934                           	opt stack 0
  8935  001542                     _PermLog:
  8936                           	opt stack 21
  8937                           
  8938                           ;eeprom.c: 91: unsigned char goback = 0;
  8939                           
  8940                           ;incstack = 0
  8941  001542  0E00               	movlw	0
  8942  001544  D065               	goto	L2
  8943  001546                     i2l4124:
  8944                           
  8945                           ;eeprom.c: 93: lcdInst(0b10000000);
  8946  001546  0E80               	movlw	128
  8947  001548  ECC7  F011         	call	i2_lcdInst
  8948                           
  8949                           ;eeprom.c: 94: printf("Permanent log:       ");
  8950  00154C  0ECA               	movlw	low STR_41
  8951  00154E  6E0D               	movwf	i2printf@f,c
  8952  001550  0EFE               	movlw	high STR_41
  8953  001552  6E0E               	movwf	i2printf@f+1,c
  8954  001554  EC1B  F004         	call	i2_printf	;wreg free
  8955                           
  8956                           ;eeprom.c: 95: lcdInst(0b11000000);
  8957  001558  0EC0               	movlw	192
  8958  00155A  ECC7  F011         	call	i2_lcdInst
  8959                           
  8960                           ;eeprom.c: 96: printf("Which run?       ");
  8961  00155E  0E6F               	movlw	low STR_42
  8962  001560  6E0D               	movwf	i2printf@f,c
  8963  001562  0EFF               	movlw	high STR_42
  8964  001564  6E0E               	movwf	i2printf@f+1,c
  8965  001566  EC1B  F004         	call	i2_printf	;wreg free
  8966                           
  8967                           ;eeprom.c: 97: unsigned char backruns = captureKeypad();
  8968  00156A  EC6A  F011         	call	_captureKeypad	;wreg free
  8969  00156E  5001               	movf	?_captureKeypad,w,c
  8970  001570  6E39               	movwf	PermLog@backruns,c
  8971                           
  8972                           ;eeprom.c: 98: if (backruns == 3)backruns = 2;
  8973  001572  0E03               	movlw	3
  8974  001574  1839               	xorwf	PermLog@backruns,w,c
  8975  001576  A4D8               	btfss	status,2,c
  8976  001578  D002               	goto	i2l4136
  8977  00157A  0E02               	movlw	2
  8978  00157C  6E39               	movwf	PermLog@backruns,c
  8979  00157E                     i2l4136:
  8980                           
  8981                           ;eeprom.c: 99: if (backruns == 4)backruns = 3;
  8982  00157E  0E04               	movlw	4
  8983  001580  1839               	xorwf	PermLog@backruns,w,c
  8984  001582  A4D8               	btfss	status,2,c
  8985  001584  D002               	goto	i2l4140
  8986  001586  0E03               	movlw	3
  8987  001588  6E39               	movwf	PermLog@backruns,c
  8988  00158A                     i2l4140:
  8989                           
  8990                           ;eeprom.c: 100: if (backruns < 4) {
  8991  00158A  0E04               	movlw	4
  8992  00158C  6039               	cpfslt	PermLog@backruns,c
  8993  00158E  D03F               	goto	i2l4158
  8994                           
  8995                           ;eeprom.c: 101: unsigned int time;
  8996                           ;eeprom.c: 102: unsigned char sorted[] = {0, 0, 0, 0};
  8997  001590  C0BC  F032         	movff	PermLog@F3082,PermLog@sorted
  8998  001594  C0BD  F033         	movff	PermLog@F3082+1,PermLog@sorted+1
  8999  001598  C0BE  F034         	movff	PermLog@F3082+2,PermLog@sorted+2
  9000  00159C  C0BF  F035         	movff	PermLog@F3082+3,PermLog@sorted+3
  9001                           
  9002                           ;eeprom.c: 103: ReadRun(backruns, sorted, &time);
  9003  0015A0  0E32               	movlw	low PermLog@sorted
  9004  0015A2  6E03               	movwf	ReadRun@sorted,c
  9005  0015A4  0E00               	movlw	high PermLog@sorted
  9006  0015A6  6E04               	movwf	ReadRun@sorted+1,c
  9007  0015A8  0E37               	movlw	low PermLog@time
  9008  0015AA  6E05               	movwf	ReadRun@time,c
  9009  0015AC  0E00               	movlw	high PermLog@time
  9010  0015AE  6E06               	movwf	ReadRun@time+1,c
  9011  0015B0  5039               	movf	PermLog@backruns,w,c
  9012  0015B2  EC9C  F008         	call	_ReadRun
  9013                           
  9014                           ;eeprom.c: 104: lcdInst(0b10000000);
  9015  0015B6  0E80               	movlw	128
  9016  0015B8  ECC7  F011         	call	i2_lcdInst
  9017                           
  9018                           ;eeprom.c: 105: printf("showing %u      ", backruns);
  9019  0015BC  0EA4               	movlw	low STR_43
  9020  0015BE  6E0D               	movwf	i2printf@f,c
  9021  0015C0  0EFF               	movlw	high STR_43
  9022  0015C2  6E0E               	movwf	i2printf@f+1,c
  9023  0015C4  C039  F00F         	movff	PermLog@backruns,?i2_printf+2
  9024  0015C8  6A10               	clrf	?i2_printf+3,c
  9025  0015CA  EC1B  F004         	call	i2_printf	;wreg free
  9026                           
  9027                           ;eeprom.c: 106: lcdInst(0b11000000);
  9028  0015CE  0EC0               	movlw	192
  9029  0015D0  ECC7  F011         	call	i2_lcdInst
  9030                           
  9031                           ;eeprom.c: 107: printf("runs before     ");
  9032  0015D4  0EB5               	movlw	low STR_44
  9033  0015D6  6E0D               	movwf	i2printf@f,c
  9034  0015D8  0EFF               	movlw	high STR_44
  9035  0015DA  6E0E               	movwf	i2printf@f+1,c
  9036  0015DC  EC1B  F004         	call	i2_printf	;wreg free
  9037                           
  9038                           ;eeprom.c: 108: _delay((unsigned long)((700)*(8000000/4000.0)));
  9039  0015E0  0E08               	movlw	8
  9040  0015E2  6E31               	movwf	(??_PermLog+1)& (0+255),c
  9041  0015E4  0E1B               	movlw	27
  9042  0015E6  6E30               	movwf	??_PermLog& (0+255),c
  9043  0015E8  0E27               	movlw	39
  9044  0015EA                     i2u355_47:
  9045  0015EA  2EE8               	decfsz	wreg,f,c
  9046  0015EC  D7FE               	bra	i2u355_47
  9047  0015EE  2E30               	decfsz	??_PermLog& (0+255),f,c
  9048  0015F0  D7FC               	bra	i2u355_47
  9049  0015F2  2E31               	decfsz	(??_PermLog+1)& (0+255),f,c
  9050  0015F4  D7FA               	bra	i2u355_47
  9051  0015F6  F000               	nop	
  9052                           
  9053                           ;eeprom.c: 109: showInfo(time, sorted);
  9054  0015F8  C037  F023         	movff	PermLog@time,showInfo@time
  9055  0015FC  C038  F024         	movff	PermLog@time+1,showInfo@time+1
  9056  001600  0E32               	movlw	low PermLog@sorted
  9057  001602  6E25               	movwf	showInfo@sorted,c
  9058  001604  0E00               	movlw	high PermLog@sorted
  9059  001606  6E26               	movwf	showInfo@sorted+1,c
  9060  001608  ECE8  F005         	call	_showInfo	;wreg free
  9061                           
  9062                           ;eeprom.c: 110: } else goback = 1;
  9063  00160C  D002               	goto	i2l445
  9064  00160E                     i2l4158:
  9065  00160E  0E01               	movlw	1
  9066  001610                     L2:
  9067  001610  6E36               	movwf	PermLog@goback,c
  9068  001612                     i2l445:
  9069  001612  5036               	movf	PermLog@goback,w,c
  9070  001614  A4D8               	btfss	status,2,c
  9071  001616  0012               	return	
  9072  001618  D796               	goto	i2l4124
  9073  00161A                     __end_of_PermLog:
  9074                           	opt stack 0
  9075                           pclatu	equ	0xFFB
  9076                           pclath	equ	0xFFA
  9077                           tblptru	equ	0xFF8
  9078                           tblptrh	equ	0xFF7
  9079                           tblptrl	equ	0xFF6
  9080                           tablat	equ	0xFF5
  9081                           prodh	equ	0xFF4
  9082                           prodl	equ	0xFF3
  9083                           intcon	equ	0xFF2
  9084                           intcon2	equ	0xFF1
  9085                           intcon3	equ	0xFF0
  9086                           postinc0	equ	0xFEE
  9087                           fsr0h	equ	0xFEA
  9088                           fsr0l	equ	0xFE9
  9089                           wreg	equ	0xFE8
  9090                           plusw1	equ	0xFE3
  9091                           fsr1h	equ	0xFE2
  9092                           fsr1l	equ	0xFE1
  9093                           indf2	equ	0xFDF
  9094                           postinc2	equ	0xFDE
  9095                           postdec2	equ	0xFDD
  9096                           plusw2	equ	0xFDB
  9097                           fsr2h	equ	0xFDA
  9098                           fsr2l	equ	0xFD9
  9099                           status	equ	0xFD8
  9100                           
  9101 ;; *************** function _showInfo *****************
  9102 ;; Defined at:
  9103 ;;		line 23 in file "modules.c"
  9104 ;; Parameters:    Size  Location     Type
  9105 ;;  time            2   34[COMRAM] unsigned int 
  9106 ;;  sorted          2   36[COMRAM] PTR unsigned char 
  9107 ;;		 -> PermLog@sorted(4), simulate@sorted(4), 
  9108 ;; Auto vars:     Size  Location     Type
  9109 ;;  stop            2   45[COMRAM] int 
  9110 ;;  type            2   43[COMRAM] int 
  9111 ;; Return value:  Size  Location     Type
  9112 ;;                  1    wreg      void 
  9113 ;; Registers used:
  9114 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9115 ;; Tracked objects:
  9116 ;;		On entry : 0/0
  9117 ;;		On exit  : 0/0
  9118 ;;		Unchanged: 0/0
  9119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9120 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9121 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9122 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9123 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9124 ;;Total ram usage:       13 bytes
  9125 ;; Hardware stack levels used:    1
  9126 ;; Hardware stack levels required when called:    3
  9127 ;; This function calls:
  9128 ;;		_captureKeypad
  9129 ;;		i2_lcdInst
  9130 ;;		i2_printf
  9131 ;; This function is called by:
  9132 ;;		_simulate
  9133 ;;		_PermLog
  9134 ;; This function uses a non-reentrant model
  9135 ;;
  9136                           
  9137                           	psect	text50
  9138  000BD0                     __ptext50:
  9139                           	opt stack 0
  9140  000BD0                     _showInfo:
  9141                           	opt stack 21
  9142                           
  9143                           ;modules.c: 24: lcdInst(0b10000000);
  9144                           
  9145                           ;incstack = 0
  9146  000BD0  0E80               	movlw	128
  9147  000BD2  ECC7  F011         	call	i2_lcdInst
  9148                           
  9149                           ;modules.c: 25: printf("Press a number          ");
  9150  000BD6  0E08               	movlw	low STR_20
  9151  000BD8  6E0D               	movwf	i2printf@f,c
  9152  000BDA  0EFE               	movlw	high STR_20
  9153  000BDC  6E0E               	movwf	i2printf@f+1,c
  9154  000BDE  EC1B  F004         	call	i2_printf	;wreg free
  9155                           
  9156                           ;modules.c: 26: lcdInst(0b11000000);
  9157  000BE2  0EC0               	movlw	192
  9158  000BE4  ECC7  F011         	call	i2_lcdInst
  9159                           
  9160                           ;modules.c: 27: printf("For more info          ");
  9161  000BE8  0E83               	movlw	low STR_21
  9162  000BEA  6E0D               	movwf	i2printf@f,c
  9163  000BEC  0EFE               	movlw	high STR_21
  9164  000BEE  6E0E               	movwf	i2printf@f+1,c
  9165  000BF0  EC1B  F004         	call	i2_printf	;wreg free
  9166                           
  9167                           ;modules.c: 28: int type = 0;
  9168  000BF4  0E00               	movlw	0
  9169  000BF6  6E2D               	movwf	showInfo@type+1,c
  9170  000BF8  0E00               	movlw	0
  9171  000BFA  6E2C               	movwf	showInfo@type,c
  9172                           
  9173                           ;modules.c: 29: int stop = 0;
  9174  000BFC  0E00               	movlw	0
  9175  000BFE  6E2F               	movwf	showInfo@stop+1,c
  9176  000C00  0E00               	movlw	0
  9177  000C02  D0D7               	goto	L3
  9178  000C04                     i2l3830:
  9179                           
  9180                           ;modules.c: 31: type = captureKeypad();
  9181  000C04  EC6A  F011         	call	_captureKeypad	;wreg free
  9182  000C08  C001  F02C         	movff	?_captureKeypad,showInfo@type
  9183  000C0C  C002  F02D         	movff	?_captureKeypad+1,showInfo@type+1
  9184                           
  9185                           ;modules.c: 33: switch (type) {
  9186  000C10  D0D2               	goto	i2l3870
  9187  000C12                     i2l3832:
  9188                           
  9189                           ;modules.c: 35: lcdInst(0b10000000);
  9190  000C12  0E80               	movlw	128
  9191  000C14  ECC7  F011         	call	i2_lcdInst
  9192                           
  9193                           ;modules.c: 36: printf("Time Elapsed:          ");
  9194  000C18  0E53               	movlw	low STR_22
  9195  000C1A  6E0D               	movwf	i2printf@f,c
  9196  000C1C  0EFE               	movlw	high STR_22
  9197  000C1E  6E0E               	movwf	i2printf@f+1,c
  9198  000C20  EC1B  F004         	call	i2_printf	;wreg free
  9199                           
  9200                           ;modules.c: 37: lcdInst(0b11000000);
  9201  000C24  0EC0               	movlw	192
  9202  000C26  ECC7  F011         	call	i2_lcdInst
  9203                           
  9204                           ;modules.c: 38: printf("%u seconds          ", time);
  9205  000C2A  0E1F               	movlw	low STR_23
  9206  000C2C  6E0D               	movwf	i2printf@f,c
  9207  000C2E  0EFF               	movlw	high STR_23
  9208  000C30  6E0E               	movwf	i2printf@f+1,c
  9209  000C32  C023  F00F         	movff	showInfo@time,?i2_printf+2
  9210  000C36  C024  F010         	movff	showInfo@time+1,?i2_printf+3
  9211  000C3A  EC1B  F004         	call	i2_printf	;wreg free
  9212                           
  9213                           ;modules.c: 39: break;
  9214  000C3E  D0D7               	goto	i2l3872
  9215  000C40                     i2l3838:
  9216                           
  9217                           ;modules.c: 41: lcdInst(0b10000000);
  9218  000C40  0E80               	movlw	128
  9219  000C42  ECC7  F011         	call	i2_lcdInst
  9220                           
  9221                           ;modules.c: 42: printf("Total Sorted:          ");
  9222  000C46  0E6B               	movlw	low STR_24
  9223  000C48  6E0D               	movwf	i2printf@f,c
  9224  000C4A  0EFE               	movlw	high STR_24
  9225  000C4C  6E0E               	movwf	i2printf@f+1,c
  9226  000C4E  EC1B  F004         	call	i2_printf	;wreg free
  9227                           
  9228                           ;modules.c: 43: lcdInst(0b11000000);
  9229  000C52  0EC0               	movlw	192
  9230  000C54  ECC7  F011         	call	i2_lcdInst
  9231                           
  9232                           ;modules.c: 44: printf("%u batteries          ", sorted[0] + sorted[1] + sorted[2] + sor
      +                          ted[3]);
  9233  000C58  0EB3               	movlw	low STR_25
  9234  000C5A  6E0D               	movwf	i2printf@f,c
  9235  000C5C  0EFE               	movlw	high STR_25
  9236  000C5E  6E0E               	movwf	i2printf@f+1,c
  9237  000C60  EE20 F003          	lfsr	2,3
  9238  000C64  5025               	movf	showInfo@sorted,w,c
  9239  000C66  26D9               	addwf	fsr2l,f,c
  9240  000C68  5026               	movf	showInfo@sorted+1,w,c
  9241  000C6A  22DA               	addwfc	fsr2h,f,c
  9242  000C6C  50DF               	movf	indf2,w,c
  9243  000C6E  6E27               	movwf	??_showInfo& (0+255),c
  9244  000C70  C025  FFD9         	movff	showInfo@sorted,fsr2l
  9245  000C74  C026  FFDA         	movff	showInfo@sorted+1,fsr2h
  9246  000C78  50DF               	movf	indf2,w,c
  9247  000C7A  6E28               	movwf	(??_showInfo+1)& (0+255),c
  9248  000C7C  6A29               	clrf	(??_showInfo+2)& (0+255),c
  9249  000C7E  EE20 F001          	lfsr	2,1
  9250  000C82  5025               	movf	showInfo@sorted,w,c
  9251  000C84  26D9               	addwf	fsr2l,f,c
  9252  000C86  5026               	movf	showInfo@sorted+1,w,c
  9253  000C88  22DA               	addwfc	fsr2h,f,c
  9254  000C8A  50DF               	movf	indf2,w,c
  9255  000C8C  6E2A               	movwf	(??_showInfo+3)& (0+255),c
  9256  000C8E  502A               	movf	??_showInfo+3,w,c
  9257  000C90  2628               	addwf	??_showInfo+1,f,c
  9258  000C92  0E00               	movlw	0
  9259  000C94  2229               	addwfc	??_showInfo+2,f,c
  9260  000C96  EE20 F002          	lfsr	2,2
  9261  000C9A  5025               	movf	showInfo@sorted,w,c
  9262  000C9C  26D9               	addwf	fsr2l,f,c
  9263  000C9E  5026               	movf	showInfo@sorted+1,w,c
  9264  000CA0  22DA               	addwfc	fsr2h,f,c
  9265  000CA2  50DF               	movf	indf2,w,c
  9266  000CA4  6E2B               	movwf	(??_showInfo+4)& (0+255),c
  9267  000CA6  502B               	movf	??_showInfo+4,w,c
  9268  000CA8  2628               	addwf	??_showInfo+1,f,c
  9269  000CAA  0E00               	movlw	0
  9270  000CAC  2229               	addwfc	??_showInfo+2,f,c
  9271  000CAE  5027               	movf	??_showInfo,w,c
  9272  000CB0  2428               	addwf	??_showInfo+1,w,c
  9273  000CB2  6E0F               	movwf	?i2_printf+2,c
  9274  000CB4  0E00               	movlw	0
  9275  000CB6  2029               	addwfc	??_showInfo+2,w,c
  9276  000CB8  6E10               	movwf	?i2_printf+3,c
  9277  000CBA  EC1B  F004         	call	i2_printf	;wreg free
  9278                           
  9279                           ;modules.c: 45: break;
  9280  000CBE  D097               	goto	i2l3872
  9281  000CC0                     i2l3844:
  9282                           
  9283                           ;modules.c: 47: lcdInst(0b10000000);
  9284  000CC0  0E80               	movlw	128
  9285  000CC2  ECC7  F011         	call	i2_lcdInst
  9286                           
  9287                           ;modules.c: 48: printf("AA Sorted:          ");
  9288  000CC6  0EF5               	movlw	low STR_26
  9289  000CC8  6E0D               	movwf	i2printf@f,c
  9290  000CCA  0EFE               	movlw	high STR_26
  9291  000CCC  6E0E               	movwf	i2printf@f+1,c
  9292  000CCE  EC1B  F004         	call	i2_printf	;wreg free
  9293                           
  9294                           ;modules.c: 49: lcdInst(0b11000000);
  9295  000CD2  0EC0               	movlw	192
  9296  000CD4  ECC7  F011         	call	i2_lcdInst
  9297                           
  9298                           ;modules.c: 50: printf("%u             ", sorted[0]);
  9299  000CD8  0EC6               	movlw	low STR_27
  9300  000CDA  6E0D               	movwf	i2printf@f,c
  9301  000CDC  0EFF               	movlw	high STR_27
  9302  000CDE  6E0E               	movwf	i2printf@f+1,c
  9303  000CE0  C025  FFD9         	movff	showInfo@sorted,fsr2l
  9304  000CE4  C026  FFDA         	movff	showInfo@sorted+1,fsr2h
  9305  000CE8  50DF               	movf	indf2,w,c
  9306  000CEA  6E27               	movwf	??_showInfo& (0+255),c
  9307  000CEC  5027               	movf	??_showInfo,w,c
  9308  000CEE  6E0F               	movwf	?i2_printf+2,c
  9309  000CF0  6A10               	clrf	?i2_printf+3,c
  9310  000CF2  EC1B  F004         	call	i2_printf	;wreg free
  9311                           
  9312                           ;modules.c: 51: break;
  9313  000CF6  D07B               	goto	i2l3872
  9314  000CF8                     i2l3850:
  9315                           
  9316                           ;modules.c: 53: lcdInst(0b10000000);
  9317  000CF8  0E80               	movlw	128
  9318  000CFA  ECC7  F011         	call	i2_lcdInst
  9319                           
  9320                           ;modules.c: 54: printf("C Sorted:          ");
  9321  000CFE  0E48               	movlw	low STR_28
  9322  000D00  6E0D               	movwf	i2printf@f,c
  9323  000D02  0EFF               	movlw	high STR_28
  9324  000D04  6E0E               	movwf	i2printf@f+1,c
  9325  000D06  EC1B  F004         	call	i2_printf	;wreg free
  9326                           
  9327                           ;modules.c: 55: lcdInst(0b11000000);
  9328  000D0A  0EC0               	movlw	192
  9329  000D0C  ECC7  F011         	call	i2_lcdInst
  9330                           
  9331                           ;modules.c: 56: printf("%u             ", sorted[1]);
  9332  000D10  0EC6               	movlw	low STR_27
  9333  000D12  6E0D               	movwf	i2printf@f,c
  9334  000D14  0EFF               	movlw	high STR_27
  9335  000D16  6E0E               	movwf	i2printf@f+1,c
  9336  000D18  EE20 F001          	lfsr	2,1
  9337  000D1C  5025               	movf	showInfo@sorted,w,c
  9338  000D1E  26D9               	addwf	fsr2l,f,c
  9339  000D20  5026               	movf	showInfo@sorted+1,w,c
  9340  000D22  22DA               	addwfc	fsr2h,f,c
  9341  000D24  50DF               	movf	indf2,w,c
  9342  000D26  6E27               	movwf	??_showInfo& (0+255),c
  9343  000D28  5027               	movf	??_showInfo,w,c
  9344  000D2A  6E0F               	movwf	?i2_printf+2,c
  9345  000D2C  6A10               	clrf	?i2_printf+3,c
  9346  000D2E  EC1B  F004         	call	i2_printf	;wreg free
  9347                           
  9348                           ;modules.c: 57: break;
  9349  000D32  D05D               	goto	i2l3872
  9350  000D34                     i2l3856:
  9351                           
  9352                           ;modules.c: 59: lcdInst(0b10000000);
  9353  000D34  0E80               	movlw	128
  9354  000D36  ECC7  F011         	call	i2_lcdInst
  9355                           
  9356                           ;modules.c: 60: printf("9V Sorted:          ");
  9357  000D3A  0E0A               	movlw	low STR_30
  9358  000D3C  6E0D               	movwf	i2printf@f,c
  9359  000D3E  0EFF               	movlw	high STR_30
  9360  000D40  6E0E               	movwf	i2printf@f+1,c
  9361  000D42  EC1B  F004         	call	i2_printf	;wreg free
  9362                           
  9363                           ;modules.c: 61: lcdInst(0b11000000);
  9364  000D46  0EC0               	movlw	192
  9365  000D48  ECC7  F011         	call	i2_lcdInst
  9366                           
  9367                           ;modules.c: 62: printf("%u             ", sorted[2]);
  9368  000D4C  0EC6               	movlw	low STR_27
  9369  000D4E  6E0D               	movwf	i2printf@f,c
  9370  000D50  0EFF               	movlw	high STR_27
  9371  000D52  6E0E               	movwf	i2printf@f+1,c
  9372  000D54  EE20 F002          	lfsr	2,2
  9373  000D58  5025               	movf	showInfo@sorted,w,c
  9374  000D5A  26D9               	addwf	fsr2l,f,c
  9375  000D5C  5026               	movf	showInfo@sorted+1,w,c
  9376  000D5E  22DA               	addwfc	fsr2h,f,c
  9377  000D60  50DF               	movf	indf2,w,c
  9378  000D62  6E27               	movwf	??_showInfo& (0+255),c
  9379  000D64  5027               	movf	??_showInfo,w,c
  9380  000D66  6E0F               	movwf	?i2_printf+2,c
  9381  000D68  6A10               	clrf	?i2_printf+3,c
  9382  000D6A  EC1B  F004         	call	i2_printf	;wreg free
  9383                           
  9384                           ;modules.c: 63: break;
  9385  000D6E  D03F               	goto	i2l3872
  9386  000D70                     i2l3862:
  9387                           
  9388                           ;modules.c: 65: lcdInst(0b10000000);
  9389  000D70  0E80               	movlw	128
  9390  000D72  ECC7  F011         	call	i2_lcdInst
  9391                           
  9392                           ;modules.c: 66: printf("Uncharged:          ");
  9393  000D76  0EE0               	movlw	low STR_32
  9394  000D78  6E0D               	movwf	i2printf@f,c
  9395  000D7A  0EFE               	movlw	high STR_32
  9396  000D7C  6E0E               	movwf	i2printf@f+1,c
  9397  000D7E  EC1B  F004         	call	i2_printf	;wreg free
  9398                           
  9399                           ;modules.c: 67: lcdInst(0b11000000);
  9400  000D82  0EC0               	movlw	192
  9401  000D84  ECC7  F011         	call	i2_lcdInst
  9402                           
  9403                           ;modules.c: 68: printf("%u             ", sorted[3]);
  9404  000D88  0EC6               	movlw	low STR_27
  9405  000D8A  6E0D               	movwf	i2printf@f,c
  9406  000D8C  0EFF               	movlw	high STR_27
  9407  000D8E  6E0E               	movwf	i2printf@f+1,c
  9408  000D90  EE20 F003          	lfsr	2,3
  9409  000D94  5025               	movf	showInfo@sorted,w,c
  9410  000D96  26D9               	addwf	fsr2l,f,c
  9411  000D98  5026               	movf	showInfo@sorted+1,w,c
  9412  000D9A  22DA               	addwfc	fsr2h,f,c
  9413  000D9C  50DF               	movf	indf2,w,c
  9414  000D9E  6E27               	movwf	??_showInfo& (0+255),c
  9415  000DA0  5027               	movf	??_showInfo,w,c
  9416  000DA2  6E0F               	movwf	?i2_printf+2,c
  9417  000DA4  6A10               	clrf	?i2_printf+3,c
  9418  000DA6  EC1B  F004         	call	i2_printf	;wreg free
  9419                           
  9420                           ;modules.c: 69: break;
  9421  000DAA  D021               	goto	i2l3872
  9422  000DAC                     i2l3868:
  9423                           
  9424                           ;modules.c: 71: stop = 1;
  9425  000DAC  0E00               	movlw	0
  9426  000DAE  6E2F               	movwf	showInfo@stop+1,c
  9427  000DB0  0E01               	movlw	1
  9428  000DB2                     L3:
  9429  000DB2  6E2E               	movwf	showInfo@stop,c
  9430                           
  9431                           ;modules.c: 72: }
  9432  000DB4  D01C               	goto	i2l3872
  9433  000DB6                     i2l3870:
  9434  000DB6  C02C  F027         	movff	showInfo@type,??_showInfo
  9435  000DBA  C02D  F028         	movff	showInfo@type+1,??_showInfo+1
  9436                           
  9437                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9438                           ; Switch size 1, requested type "space"
  9439                           ; Number of cases is 1, Range of values is 0 to 0
  9440                           ; switch strategies available:
  9441                           ; Name         Instructions Cycles
  9442                           ; simple_byte            4     3 (average)
  9443                           ;	Chosen strategy is simple_byte
  9444  000DBE  5028               	movf	??_showInfo+1,w,c
  9445  000DC0  0A00               	xorlw	0	; case 0
  9446  000DC2  A4D8               	btfss	status,2,c
  9447  000DC4  D7F3               	goto	i2l3868
  9448                           
  9449                           ; Switch size 1, requested type "space"
  9450                           ; Number of cases is 6, Range of values is 0 to 6
  9451                           ; switch strategies available:
  9452                           ; Name         Instructions Cycles
  9453                           ; simple_byte           19    10 (average)
  9454                           ;	Chosen strategy is simple_byte
  9455  000DC6  5027               	movf	??_showInfo,w,c
  9456  000DC8  0A00               	xorlw	0	; case 0
  9457  000DCA  B4D8               	btfsc	status,2,c
  9458  000DCC  D722               	goto	i2l3832
  9459  000DCE  0A01               	xorlw	1	; case 1
  9460  000DD0  B4D8               	btfsc	status,2,c
  9461  000DD2  D736               	goto	i2l3838
  9462  000DD4  0A03               	xorlw	3	; case 2
  9463  000DD6  B4D8               	btfsc	status,2,c
  9464  000DD8  D773               	goto	i2l3844
  9465  000DDA  0A06               	xorlw	6	; case 4
  9466  000DDC  B4D8               	btfsc	status,2,c
  9467  000DDE  D78C               	goto	i2l3850
  9468  000DE0  0A01               	xorlw	1	; case 5
  9469  000DE2  B4D8               	btfsc	status,2,c
  9470  000DE4  D7A7               	goto	i2l3856
  9471  000DE6  0A03               	xorlw	3	; case 6
  9472  000DE8  B4D8               	btfsc	status,2,c
  9473  000DEA  D7C2               	goto	i2l3862
  9474  000DEC  D7DF               	goto	i2l3868
  9475  000DEE                     i2l3872:
  9476  000DEE  502E               	movf	showInfo@stop,w,c
  9477  000DF0  102F               	iorwf	showInfo@stop+1,w,c
  9478  000DF2  A4D8               	btfss	status,2,c
  9479  000DF4  0012               	return	
  9480  000DF6  D706               	goto	i2l3830
  9481  000DF8                     __end_of_showInfo:
  9482                           	opt stack 0
  9483                           pclatu	equ	0xFFB
  9484                           pclath	equ	0xFFA
  9485                           tblptru	equ	0xFF8
  9486                           tblptrh	equ	0xFF7
  9487                           tblptrl	equ	0xFF6
  9488                           tablat	equ	0xFF5
  9489                           prodh	equ	0xFF4
  9490                           prodl	equ	0xFF3
  9491                           intcon	equ	0xFF2
  9492                           intcon2	equ	0xFF1
  9493                           intcon3	equ	0xFF0
  9494                           postinc0	equ	0xFEE
  9495                           fsr0h	equ	0xFEA
  9496                           fsr0l	equ	0xFE9
  9497                           wreg	equ	0xFE8
  9498                           plusw1	equ	0xFE3
  9499                           fsr1h	equ	0xFE2
  9500                           fsr1l	equ	0xFE1
  9501                           indf2	equ	0xFDF
  9502                           postinc2	equ	0xFDE
  9503                           postdec2	equ	0xFDD
  9504                           plusw2	equ	0xFDB
  9505                           fsr2h	equ	0xFDA
  9506                           fsr2l	equ	0xFD9
  9507                           status	equ	0xFD8
  9508                           
  9509 ;; *************** function i2_printf *****************
  9510 ;; Defined at:
  9511 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  9512 ;; Parameters:    Size  Location     Type
  9513 ;;  f               2   12[COMRAM] PTR const unsigned char 
  9514 ;;		 -> STR_44(17), STR_43(17), STR_42(18), STR_41(22), 
  9515 ;;		 -> STR_40(4), STR_39(3), STR_38(4), STR_37(5), 
  9516 ;;		 -> STR_36(4), STR_35(18), STR_34(20), STR_33(16), 
  9517 ;;		 -> STR_32(21), STR_31(16), STR_30(21), STR_29(16), 
  9518 ;;		 -> STR_28(20), STR_27(16), STR_26(21), STR_25(23), 
  9519 ;;		 -> STR_24(24), STR_23(21), STR_22(24), STR_21(24), 
  9520 ;;		 -> STR_20(25), STR_19(19), STR_18(25), STR_17(25), 
  9521 ;;		 -> STR_16(27), STR_15(3), STR_14(3), STR_13(3), 
  9522 ;;		 -> STR_12(5), STR_11(3), STR_10(3), STR_9(3), 
  9523 ;;		 -> STR_8(4), STR_7(3), STR_6(3), STR_5(3), 
  9524 ;;		 -> STR_4(4), STR_3(5), STR_2(24), STR_1(9), 
  9525 ;; Auto vars:     Size  Location     Type
  9526 ;;  printf          4    0        struct .
  9527 ;;  printf          2   31[COMRAM] int 
  9528 ;;  printf          2   28[COMRAM] unsigned int 
  9529 ;;  printf          2   25[COMRAM] unsigned int 
  9530 ;;  printf          2   23[COMRAM] PTR void [1]
  9531 ;;		 -> ?i2_printf(2), ?_printf(2), 
  9532 ;;  printf          2   20[COMRAM] PTR const unsigned char 
  9533 ;;		 -> printf@c(1), 
  9534 ;;  printf          1   33[COMRAM] char 
  9535 ;;  printf          1   30[COMRAM] unsigned char 
  9536 ;;  printf          1   27[COMRAM] char 
  9537 ;;  printf          1   22[COMRAM] unsigned char 
  9538 ;; Return value:  Size  Location     Type
  9539 ;;                  2   12[COMRAM] int 
  9540 ;; Registers used:
  9541 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9542 ;; Tracked objects:
  9543 ;;		On entry : 0/0
  9544 ;;		On exit  : 0/0
  9545 ;;		Unchanged: 0/0
  9546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9547 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9548 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9549 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9550 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9551 ;;Total ram usage:       22 bytes
  9552 ;; Hardware stack levels used:    1
  9553 ;; Hardware stack levels required when called:    2
  9554 ;; This function calls:
  9555 ;;		i2___lwdiv
  9556 ;;		i2___lwmod
  9557 ;;		i2___wmul
  9558 ;;		i2_isdigit
  9559 ;;		i2_putch
  9560 ;; This function is called by:
  9561 ;;		_simulate
  9562 ;;		_showInfo
  9563 ;;		_stopMoving
  9564 ;;		_printV
  9565 ;;		_checkAA
  9566 ;;		_checkC
  9567 ;;		_check9
  9568 ;;		_PermLog
  9569 ;; This function uses a non-reentrant model
  9570 ;;
  9571                           
  9572                           	psect	text51
  9573  000836                     __ptext51:
  9574                           	opt stack 0
  9575  000836                     i2_printf:
  9576                           	opt stack 22
  9577                           
  9578                           ;doprnt.c: 466: va_list ap;
  9579                           ;doprnt.c: 499: signed char c;
  9580                           ;doprnt.c: 501: int width;
  9581                           ;doprnt.c: 506: signed char prec;
  9582                           ;doprnt.c: 508: unsigned char flag;
  9583                           ;doprnt.c: 523: union {
  9584                           ;doprnt.c: 524: unsigned long vd;
  9585                           ;doprnt.c: 525: double integ;
  9586                           ;doprnt.c: 526: } tmpval;
  9587                           ;doprnt.c: 528: unsigned int val;
  9588                           ;doprnt.c: 529: unsigned len;
  9589                           ;doprnt.c: 530: const char * cp;
  9590                           ;doprnt.c: 533: *ap = __va_start();
  9591                           
  9592                           ;incstack = 0
  9593  000836  0E0F               	movlw	low (?i2_printf+2)
  9594  000838  6E18               	movwf	i2printf@ap,c
  9595  00083A  0E00               	movlw	high (?i2_printf+2)
  9596  00083C  6E19               	movwf	i2printf@ap+1,c
  9597                           
  9598                           ;doprnt.c: 536: while(c = *f++) {
  9599  00083E  D1BB               	goto	i2l3224
  9600  000840                     i2l3074:
  9601                           
  9602                           ;doprnt.c: 538: if(c != '%')
  9603  000840  0E25               	movlw	37
  9604  000842  1822               	xorwf	i2printf@c,w,c
  9605  000844  B4D8               	btfsc	status,2,c
  9606  000846  D004               	goto	i2l3078
  9607                           
  9608                           ;doprnt.c: 540: {
  9609                           ;doprnt.c: 541: (putch(c) );
  9610  000848  5022               	movf	i2printf@c,w,c
  9611  00084A  ECC1  F011         	call	i2_putch
  9612                           
  9613                           ;doprnt.c: 542: continue;
  9614  00084E  D1B3               	goto	i2l3224
  9615  000850                     i2l3078:
  9616                           
  9617                           ;doprnt.c: 543: }
  9618                           ;doprnt.c: 546: width = 0;
  9619  000850  0E00               	movlw	0
  9620  000852  6E21               	movwf	i2printf@width+1,c
  9621  000854  0E00               	movlw	0
  9622  000856  6E20               	movwf	i2printf@width,c
  9623                           
  9624                           ;doprnt.c: 548: flag = 0;
  9625  000858  0E00               	movlw	0
  9626  00085A  6E1F               	movwf	i2printf@flag,c
  9627                           
  9628                           ;doprnt.c: 551: switch(*f) {
  9629                           
  9630                           ;doprnt.c: 550: for(;;) {
  9631  00085C  D003               	goto	i2l3084
  9632  00085E                     i2l3080:
  9633                           
  9634                           ;doprnt.c: 580: flag |= 0x04;
  9635  00085E  841F               	bsf	i2printf@flag,2,c
  9636                           
  9637                           ;doprnt.c: 581: f++;
  9638  000860  4A0D               	infsnz	i2printf@f,f,c
  9639  000862  2A0E               	incf	i2printf@f+1,f,c
  9640  000864                     i2l3084:
  9641  000864  C00D  FFF6         	movff	i2printf@f,tblptrl
  9642  000868  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9643  00086C                     	if	0	;tblptru may be non-zero
  9644  00086C                     	endif
  9645  00086C                     	if	0	;tblptru may be non-zero
  9646  00086C                     	endif
  9647  00086C  0008               	tblrd		*
  9648  00086E  50F5               	movf	tablat,w,c
  9649                           
  9650                           ; Switch size 1, requested type "space"
  9651                           ; Number of cases is 1, Range of values is 48 to 48
  9652                           ; switch strategies available:
  9653                           ; Name         Instructions Cycles
  9654                           ; simple_byte            4     3 (average)
  9655                           ;	Chosen strategy is simple_byte
  9656  000870  0A30               	xorlw	48	; case 48
  9657  000872  B4D8               	btfsc	status,2,c
  9658  000874  D7F4               	goto	i2l3080
  9659                           
  9660                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  9661                           
  9662                           ;doprnt.c: 586: }
  9663                           
  9664                           ;doprnt.c: 585: break;
  9665  000876  C00D  FFF6         	movff	i2printf@f,tblptrl
  9666  00087A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9667  00087E                     	if	0	;tblptru may be non-zero
  9668  00087E                     	endif
  9669  00087E                     	if	0	;tblptru may be non-zero
  9670  00087E                     	endif
  9671  00087E  0008               	tblrd		*
  9672  000880  50F5               	movf	tablat,w,c
  9673  000882  EC5B  F011         	call	i2_isdigit
  9674  000886  A0D8               	btfss	status,0,c
  9675  000888  D06F               	goto	i2l3124
  9676                           
  9677                           ;doprnt.c: 598: width = 0;
  9678  00088A  0E00               	movlw	0
  9679  00088C  6E21               	movwf	i2printf@width+1,c
  9680  00088E  0E00               	movlw	0
  9681  000890  6E20               	movwf	i2printf@width,c
  9682  000892                     i2l3090:
  9683                           
  9684                           ;doprnt.c: 600: width *= 10;
  9685  000892  C020  F001         	movff	i2printf@width,i2___wmul@multiplier
  9686  000896  C021  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  9687  00089A  0E00               	movlw	0
  9688  00089C  6E04               	movwf	i2___wmul@multiplicand+1,c
  9689  00089E  0E0A               	movlw	10
  9690  0008A0  6E03               	movwf	i2___wmul@multiplicand,c
  9691  0008A2  EC37  F011         	call	i2___wmul	;wreg free
  9692  0008A6  C001  F020         	movff	?i2___wmul,i2printf@width
  9693  0008AA  C002  F021         	movff	?i2___wmul+1,i2printf@width+1
  9694                           
  9695                           ;doprnt.c: 601: width += *f++ - '0';
  9696  0008AE  0ED0               	movlw	208
  9697  0008B0  6E11               	movwf	??i2_printf& (0+255),c
  9698  0008B2  0EFF               	movlw	255
  9699  0008B4  6E12               	movwf	(??i2_printf+1)& (0+255),c
  9700  0008B6  C00D  FFF6         	movff	i2printf@f,tblptrl
  9701  0008BA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9702  0008BE                     	if	0	;tblptru may be non-zero
  9703  0008BE                     	endif
  9704  0008BE                     	if	0	;tblptru may be non-zero
  9705  0008BE                     	endif
  9706  0008BE  0008               	tblrd		*
  9707  0008C0  50F5               	movf	tablat,w,c
  9708  0008C2  6E13               	movwf	(??i2_printf+2)& (0+255),c
  9709  0008C4  6A14               	clrf	(??i2_printf+3)& (0+255),c
  9710  0008C6  5011               	movf	??i2_printf,w,c
  9711  0008C8  2613               	addwf	??i2_printf+2,f,c
  9712  0008CA  5012               	movf	??i2_printf+1,w,c
  9713  0008CC  2214               	addwfc	??i2_printf+3,f,c
  9714  0008CE  5013               	movf	??i2_printf+2,w,c
  9715  0008D0  2620               	addwf	i2printf@width,f,c
  9716  0008D2  5014               	movf	??i2_printf+3,w,c
  9717  0008D4  2221               	addwfc	i2printf@width+1,f,c
  9718  0008D6  4A0D               	infsnz	i2printf@f,f,c
  9719  0008D8  2A0E               	incf	i2printf@f+1,f,c
  9720                           
  9721                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  9722  0008DA  C00D  FFF6         	movff	i2printf@f,tblptrl
  9723  0008DE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9724  0008E2                     	if	0	;tblptru may be non-zero
  9725  0008E2                     	endif
  9726  0008E2                     	if	0	;tblptru may be non-zero
  9727  0008E2                     	endif
  9728  0008E2  0008               	tblrd		*
  9729  0008E4  50F5               	movf	tablat,w,c
  9730  0008E6  EC5B  F011         	call	i2_isdigit
  9731  0008EA  A0D8               	btfss	status,0,c
  9732  0008EC  D03D               	goto	i2l3124
  9733  0008EE  D7D1               	goto	i2l3090
  9734  0008F0                     i2l3098:
  9735                           
  9736                           ;doprnt.c: 721: flag |= 0x80;
  9737  0008F0  8E1F               	bsf	i2printf@flag,7,c
  9738                           
  9739                           ;doprnt.c: 723: break;
  9740  0008F2  D054               	goto	i2l3126
  9741  0008F4                     i2l3100:
  9742                           
  9743                           ;doprnt.c: 757: if(width > len)
  9744  0008F4  5020               	movf	i2printf@width,w,c
  9745  0008F6  5C1A               	subwf	i2printf@len,w,c
  9746  0008F8  5021               	movf	i2printf@width+1,w,c
  9747  0008FA  581B               	subwfb	i2printf@len+1,w,c
  9748  0008FC  B0D8               	btfsc	status,0,c
  9749  0008FE  D005               	goto	i2l3104
  9750                           
  9751                           ;doprnt.c: 758: width -= len;
  9752  000900  501A               	movf	i2printf@len,w,c
  9753  000902  5E20               	subwf	i2printf@width,f,c
  9754  000904  501B               	movf	i2printf@len+1,w,c
  9755  000906  5A21               	subwfb	i2printf@width+1,f,c
  9756  000908  D008               	goto	i2l3108
  9757  00090A                     i2l3104:
  9758                           
  9759                           ;doprnt.c: 759: else
  9760                           ;doprnt.c: 760: width = 0;
  9761  00090A  0E00               	movlw	0
  9762  00090C  6E21               	movwf	i2printf@width+1,c
  9763  00090E  0E00               	movlw	0
  9764  000910  6E20               	movwf	i2printf@width,c
  9765                           
  9766                           ;doprnt.c: 764: while(width--)
  9767  000912  D003               	goto	i2l3108
  9768  000914                     i2l3106:
  9769                           
  9770                           ;doprnt.c: 765: (putch(' ') );
  9771  000914  0E20               	movlw	32
  9772  000916  ECC1  F011         	call	i2_putch
  9773  00091A                     i2l3108:
  9774  00091A  0620               	decf	i2printf@width,f,c
  9775  00091C  A0D8               	btfss	status,0,c
  9776  00091E  0621               	decf	i2printf@width+1,f,c
  9777  000920  2820               	incf	i2printf@width,w,c
  9778  000922  E1F8               	bnz	i2l3106
  9779  000924  2821               	incf	i2printf@width+1,w,c
  9780  000926  B4D8               	btfsc	status,2,c
  9781  000928  D00A               	goto	i2l3114
  9782  00092A  D7F4               	goto	i2l3106
  9783  00092C                     i2l3110:
  9784                           
  9785                           ;doprnt.c: 768: (putch(*cp++) );
  9786  00092C  C015  FFD9         	movff	i2printf@cp,fsr2l
  9787  000930  C016  FFDA         	movff	i2printf@cp+1,fsr2h
  9788  000934  50DF               	movf	indf2,w,c
  9789  000936  ECC1  F011         	call	i2_putch
  9790  00093A  4A15               	infsnz	i2printf@cp,f,c
  9791  00093C  2A16               	incf	i2printf@cp+1,f,c
  9792  00093E                     i2l3114:
  9793  00093E  061A               	decf	i2printf@len,f,c
  9794  000940  A0D8               	btfss	status,0,c
  9795  000942  061B               	decf	i2printf@len+1,f,c
  9796  000944  281A               	incf	i2printf@len,w,c
  9797  000946  E1F2               	bnz	i2l3110
  9798  000948  281B               	incf	i2printf@len+1,w,c
  9799  00094A  B4D8               	btfsc	status,2,c
  9800  00094C  D134               	goto	i2l3224
  9801  00094E  D7EE               	goto	i2l3110
  9802  000950                     i2l3116:
  9803                           
  9804                           ;doprnt.c: 805: cp = (char *)&c;
  9805  000950  0E22               	movlw	low i2printf@c
  9806  000952  6E15               	movwf	i2printf@cp,c
  9807  000954  0E00               	movlw	high i2printf@c
  9808  000956  6E16               	movwf	i2printf@cp+1,c
  9809                           
  9810                           ;doprnt.c: 806: len = 1;
  9811  000958  0E00               	movlw	0
  9812  00095A  6E1B               	movwf	i2printf@len+1,c
  9813  00095C  0E01               	movlw	1
  9814  00095E  6E1A               	movwf	i2printf@len,c
  9815                           
  9816                           ;doprnt.c: 807: goto dostring;
  9817  000960  D7C9               	goto	i2l3100
  9818  000962                     i2l3120:
  9819                           
  9820                           ;doprnt.c: 818: flag |= 0xC0;
  9821  000962  0EC0               	movlw	192
  9822  000964  121F               	iorwf	i2printf@flag,f,c
  9823                           
  9824                           ;doprnt.c: 822: }
  9825                           
  9826                           ;doprnt.c: 819: break;
  9827  000966  D01A               	goto	i2l3126
  9828  000968                     i2l3124:
  9829  000968  C00D  FFF6         	movff	i2printf@f,tblptrl
  9830  00096C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9831  000970  4A0D               	infsnz	i2printf@f,f,c
  9832  000972  2A0E               	incf	i2printf@f+1,f,c
  9833  000974                     	if	0	;tblptru may be non-zero
  9834  000974                     	endif
  9835  000974                     	if	0	;tblptru may be non-zero
  9836  000974                     	endif
  9837  000974  0008               	tblrd		*
  9838  000976  CFF5 F022          	movff	tablat,i2printf@c
  9839  00097A  5022               	movf	i2printf@c,w,c
  9840                           
  9841                           ; Switch size 1, requested type "space"
  9842                           ; Number of cases is 5, Range of values is 0 to 120
  9843                           ; switch strategies available:
  9844                           ; Name         Instructions Cycles
  9845                           ; simple_byte           16     9 (average)
  9846                           ;	Chosen strategy is simple_byte
  9847  00097C  0A00               	xorlw	0	; case 0
  9848  00097E  B4D8               	btfsc	status,2,c
  9849  000980  0012               	return	
  9850  000982  0A64               	xorlw	100	; case 100
  9851  000984  B4D8               	btfsc	status,2,c
  9852  000986  D00A               	goto	i2l3126
  9853  000988  0A0D               	xorlw	13	; case 105
  9854  00098A  B4D8               	btfsc	status,2,c
  9855  00098C  D007               	goto	i2l3126
  9856  00098E  0A1C               	xorlw	28	; case 117
  9857  000990  B4D8               	btfsc	status,2,c
  9858  000992  D7E7               	goto	i2l3120
  9859  000994  0A0D               	xorlw	13	; case 120
  9860  000996  B4D8               	btfsc	status,2,c
  9861  000998  D7AB               	goto	i2l3098
  9862  00099A  D7DA               	goto	i2l3116
  9863  00099C                     i2l3126:
  9864                           
  9865                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  9866  00099C  C01F  F011         	movff	i2printf@flag,??i2_printf
  9867  0009A0  0EC0               	movlw	192
  9868  0009A2  1611               	andwf	??i2_printf,f,c
  9869  0009A4  A4D8               	btfss	status,2,c
  9870  0009A6  D015               	goto	i2l3138
  9871                           
  9872                           ;doprnt.c: 1253: {
  9873                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  9874  0009A8  C018  FFD9         	movff	i2printf@ap,fsr2l
  9875  0009AC  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  9876  0009B0  CFDE F01D          	movff	postinc2,i2printf@val
  9877  0009B4  CFDD F01E          	movff	postdec2,i2printf@val+1
  9878  0009B8  0E02               	movlw	2
  9879  0009BA  2618               	addwf	i2printf@ap,f,c
  9880  0009BC  0E00               	movlw	0
  9881  0009BE  2219               	addwfc	i2printf@ap+1,f,c
  9882                           
  9883                           ;doprnt.c: 1261: if((int)val < 0) {
  9884  0009C0  AE1E               	btfss	i2printf@val+1,7,c
  9885  0009C2  D044               	goto	i2l3172
  9886                           
  9887                           ;doprnt.c: 1262: flag |= 0x03;
  9888  0009C4  0E03               	movlw	3
  9889  0009C6  121F               	iorwf	i2printf@flag,f,c
  9890                           
  9891                           ;doprnt.c: 1263: val = -val;
  9892  0009C8  6C1D               	negf	i2printf@val,c
  9893  0009CA  1E1E               	comf	i2printf@val+1,f,c
  9894  0009CC  B0D8               	btfsc	status,0,c
  9895  0009CE  2A1E               	incf	i2printf@val+1,f,c
  9896                           
  9897                           ;doprnt.c: 1264: }
  9898                           ;doprnt.c: 1266: }
  9899  0009D0  D03D               	goto	i2l3172
  9900  0009D2                     i2l3138:
  9901                           
  9902                           ;doprnt.c: 1268: else
  9903                           ;doprnt.c: 1273: {
  9904                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  9905  0009D2  C018  FFD9         	movff	i2printf@ap,fsr2l
  9906  0009D6  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  9907  0009DA  CFDE F01D          	movff	postinc2,i2printf@val
  9908  0009DE  CFDD F01E          	movff	postdec2,i2printf@val+1
  9909  0009E2  0E02               	movlw	2
  9910  0009E4  2618               	addwf	i2printf@ap,f,c
  9911  0009E6  0E00               	movlw	0
  9912  0009E8  2219               	addwfc	i2printf@ap+1,f,c
  9913                           
  9914                           ;doprnt.c: 1287: }
  9915                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  9916  0009EA  D030               	goto	i2l3172
  9917  0009EC                     i2l3142:
  9918                           
  9919                           ;doprnt.c: 1302: case 0xC0:
  9920                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9921  0009EC  0E01               	movlw	1
  9922  0009EE  6E22               	movwf	i2printf@c,c
  9923  0009F0                     i2l3144:
  9924  0009F0  0E05               	movlw	5
  9925  0009F2  1822               	xorwf	i2printf@c,w,c
  9926  0009F4  B4D8               	btfsc	status,2,c
  9927  0009F6  D035               	goto	i2l3174
  9928                           
  9929                           ;doprnt.c: 1306: if(val < dpowers[c])
  9930  0009F8  5022               	movf	i2printf@c,w,c
  9931  0009FA  0D02               	mullw	2
  9932  0009FC  0EDB               	movlw	low _dpowers
  9933  0009FE  24F3               	addwf	prodl,w,c
  9934  000A00  6EF6               	movwf	tblptrl,c
  9935  000A02  0EFD               	movlw	high _dpowers
  9936  000A04  20F4               	addwfc	prodh,w,c
  9937  000A06  6EF7               	movwf	tblptrh,c
  9938  000A08                     	if	0	;There are less than 3 active tblptr bytes
  9939  000A08                     	endif
  9940  000A08  0009               	tblrd		*+
  9941  000A0A  50F5               	movf	tablat,w,c
  9942  000A0C  5C1D               	subwf	i2printf@val,w,c
  9943  000A0E  0009               	tblrd		*+
  9944  000A10  50F5               	movf	tablat,w,c
  9945  000A12  581E               	subwfb	i2printf@val+1,w,c
  9946  000A14  A0D8               	btfss	status,0,c
  9947  000A16  D025               	goto	i2l3174
  9948                           
  9949                           ;doprnt.c: 1307: break;
  9950  000A18  2A22               	incf	i2printf@c,f,c
  9951  000A1A  D7EA               	goto	i2l3144
  9952  000A1C                     i2l3156:
  9953                           
  9954                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  9955  000A1C  0E01               	movlw	1
  9956  000A1E  6E22               	movwf	i2printf@c,c
  9957  000A20                     i2l3158:
  9958  000A20  0E04               	movlw	4
  9959  000A22  1822               	xorwf	i2printf@c,w,c
  9960  000A24  B4D8               	btfsc	status,2,c
  9961  000A26  D01D               	goto	i2l3174
  9962                           
  9963                           ;doprnt.c: 1317: if(val < hexpowers[c])
  9964  000A28  5022               	movf	i2printf@c,w,c
  9965  000A2A  0D02               	mullw	2
  9966  000A2C  0EE5               	movlw	low _hexpowers
  9967  000A2E  24F3               	addwf	prodl,w,c
  9968  000A30  6EF6               	movwf	tblptrl,c
  9969  000A32  0EFD               	movlw	high _hexpowers
  9970  000A34  20F4               	addwfc	prodh,w,c
  9971  000A36  6EF7               	movwf	tblptrh,c
  9972  000A38                     	if	0	;There are less than 3 active tblptr bytes
  9973  000A38                     	endif
  9974  000A38  0009               	tblrd		*+
  9975  000A3A  50F5               	movf	tablat,w,c
  9976  000A3C  5C1D               	subwf	i2printf@val,w,c
  9977  000A3E  0009               	tblrd		*+
  9978  000A40  50F5               	movf	tablat,w,c
  9979  000A42  581E               	subwfb	i2printf@val+1,w,c
  9980  000A44  A0D8               	btfss	status,0,c
  9981  000A46  D00D               	goto	i2l3174
  9982                           
  9983                           ;doprnt.c: 1318: break;
  9984  000A48  2A22               	incf	i2printf@c,f,c
  9985  000A4A  D7EA               	goto	i2l3158
  9986  000A4C                     i2l3172:
  9987  000A4C  501F               	movf	i2printf@flag,w,c
  9988  000A4E  0BC0               	andlw	192
  9989                           
  9990                           ; Switch size 1, requested type "space"
  9991                           ; Number of cases is 3, Range of values is 0 to 192
  9992                           ; switch strategies available:
  9993                           ; Name         Instructions Cycles
  9994                           ; simple_byte           10     6 (average)
  9995                           ;	Chosen strategy is simple_byte
  9996  000A50  0A00               	xorlw	0	; case 0
  9997  000A52  B4D8               	btfsc	status,2,c
  9998  000A54  D7CB               	goto	i2l3142
  9999  000A56  0A80               	xorlw	128	; case 128
 10000  000A58  B4D8               	btfsc	status,2,c
 10001  000A5A  D7E0               	goto	i2l3156
 10002  000A5C  0A40               	xorlw	64	; case 192
 10003  000A5E  B4D8               	btfsc	status,2,c
 10004  000A60  D7C5               	goto	i2l3142
 10005  000A62                     i2l3174:
 10006                           
 10007                           ;doprnt.c: 1345: if(width && flag & 0x03)
 10008  000A62  5020               	movf	i2printf@width,w,c
 10009  000A64  1021               	iorwf	i2printf@width+1,w,c
 10010  000A66  B4D8               	btfsc	status,2,c
 10011  000A68  D009               	goto	i2l3180
 10012  000A6A  C01F  F011         	movff	i2printf@flag,??i2_printf
 10013  000A6E  0E03               	movlw	3
 10014  000A70  1611               	andwf	??i2_printf,f,c
 10015  000A72  B4D8               	btfsc	status,2,c
 10016  000A74  D003               	goto	i2l3180
 10017                           
 10018                           ;doprnt.c: 1346: width--;
 10019  000A76  0620               	decf	i2printf@width,f,c
 10020  000A78  A0D8               	btfss	status,0,c
 10021  000A7A  0621               	decf	i2printf@width+1,f,c
 10022  000A7C                     i2l3180:
 10023                           
 10024                           ;doprnt.c: 1381: if(width > c)
 10025  000A7C  0E80               	movlw	128
 10026  000A7E  BE22               	btfsc	i2printf@c,7,c
 10027  000A80  0E7F               	movlw	127
 10028  000A82  6E11               	movwf	??i2_printf& (0+255),c
 10029  000A84  5020               	movf	i2printf@width,w,c
 10030  000A86  5C22               	subwf	i2printf@c,w,c
 10031  000A88  5021               	movf	i2printf@width+1,w,c
 10032  000A8A  0A80               	xorlw	128
 10033  000A8C  5811               	subwfb	??i2_printf& (0+255),w,c
 10034  000A8E  B0D8               	btfsc	status,0,c
 10035  000A90  D007               	goto	i2l3184
 10036                           
 10037                           ;doprnt.c: 1382: width -= c;
 10038  000A92  5022               	movf	i2printf@c,w,c
 10039  000A94  5E20               	subwf	i2printf@width,f,c
 10040  000A96  0E00               	movlw	0
 10041  000A98  BE22               	btfsc	i2printf@c,7,c
 10042  000A9A  0EFF               	movlw	255
 10043  000A9C  5A21               	subwfb	i2printf@width+1,f,c
 10044  000A9E  D004               	goto	i2l3186
 10045  000AA0                     i2l3184:
 10046                           
 10047                           ;doprnt.c: 1383: else
 10048                           ;doprnt.c: 1384: width = 0;
 10049  000AA0  0E00               	movlw	0
 10050  000AA2  6E21               	movwf	i2printf@width+1,c
 10051  000AA4  0E00               	movlw	0
 10052  000AA6  6E20               	movwf	i2printf@width,c
 10053  000AA8                     i2l3186:
 10054                           
 10055                           ;doprnt.c: 1387: if(flag & 0x04) {
 10056  000AA8  A41F               	btfss	i2printf@flag,2,c
 10057  000AAA  D014               	goto	i2l3198
 10058                           
 10059                           ;doprnt.c: 1392: if(flag & 0x03)
 10060  000AAC  C01F  F011         	movff	i2printf@flag,??i2_printf
 10061  000AB0  0E03               	movlw	3
 10062  000AB2  1611               	andwf	??i2_printf,f,c
 10063  000AB4  B4D8               	btfsc	status,2,c
 10064  000AB6  D003               	goto	i2l3192
 10065                           
 10066                           ;doprnt.c: 1393: (putch('-') );
 10067  000AB8  0E2D               	movlw	45
 10068  000ABA  ECC1  F011         	call	i2_putch
 10069  000ABE                     i2l3192:
 10070                           
 10071                           ;doprnt.c: 1415: if(width)
 10072  000ABE  5020               	movf	i2printf@width,w,c
 10073  000AC0  1021               	iorwf	i2printf@width+1,w,c
 10074  000AC2  B4D8               	btfsc	status,2,c
 10075  000AC4  D01E               	goto	i2l3208
 10076                           
 10077                           ;doprnt.c: 1417: (putch('0') );
 10078                           
 10079                           ;doprnt.c: 1416: do
 10080  000AC6  0E30               	movlw	48
 10081  000AC8  ECC1  F011         	call	i2_putch
 10082                           
 10083                           ;doprnt.c: 1418: while(--width);
 10084  000ACC  0620               	decf	i2printf@width,f,c
 10085  000ACE  A0D8               	btfss	status,0,c
 10086  000AD0  0621               	decf	i2printf@width+1,f,c
 10087  000AD2  D7F5               	goto	i2l3192
 10088  000AD4                     i2l3198:
 10089                           
 10090                           ;doprnt.c: 1422: {
 10091                           ;doprnt.c: 1424: if(width
 10092                           ;doprnt.c: 1428: )
 10093  000AD4  5020               	movf	i2printf@width,w,c
 10094  000AD6  1021               	iorwf	i2printf@width+1,w,c
 10095  000AD8  B4D8               	btfsc	status,2,c
 10096  000ADA  D00A               	goto	i2l3204
 10097  000ADC                     i2l3200:
 10098                           
 10099                           ;doprnt.c: 1430: (putch(' ') );
 10100  000ADC  0E20               	movlw	32
 10101  000ADE  ECC1  F011         	call	i2_putch
 10102                           
 10103                           ;doprnt.c: 1431: while(--width);
 10104  000AE2  0620               	decf	i2printf@width,f,c
 10105  000AE4  A0D8               	btfss	status,0,c
 10106  000AE6  0621               	decf	i2printf@width+1,f,c
 10107  000AE8  5020               	movf	i2printf@width,w,c
 10108  000AEA  1021               	iorwf	i2printf@width+1,w,c
 10109  000AEC  A4D8               	btfss	status,2,c
 10110  000AEE  D7F6               	goto	i2l3200
 10111  000AF0                     i2l3204:
 10112                           
 10113                           ;doprnt.c: 1438: if(flag & 0x03)
 10114  000AF0  C01F  F011         	movff	i2printf@flag,??i2_printf
 10115  000AF4  0E03               	movlw	3
 10116  000AF6  1611               	andwf	??i2_printf,f,c
 10117  000AF8  B4D8               	btfsc	status,2,c
 10118  000AFA  D003               	goto	i2l3208
 10119                           
 10120                           ;doprnt.c: 1439: (putch('-') );
 10121  000AFC  0E2D               	movlw	45
 10122  000AFE  ECC1  F011         	call	i2_putch
 10123  000B02                     i2l3208:
 10124                           
 10125                           ;doprnt.c: 1469: }
 10126                           ;doprnt.c: 1472: prec = c;
 10127  000B02  C022  F01C         	movff	i2printf@c,i2printf@prec
 10128                           
 10129                           ;doprnt.c: 1474: while(prec--) {
 10130  000B06  D053               	goto	i2l3222
 10131  000B08                     i2l3210:
 10132                           
 10133                           ;doprnt.c: 1486: case 0xC0:
 10134                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10135  000B08  501C               	movf	i2printf@prec,w,c
 10136  000B0A  0D02               	mullw	2
 10137  000B0C  0EDB               	movlw	low _dpowers
 10138  000B0E  24F3               	addwf	prodl,w,c
 10139  000B10  6EF6               	movwf	tblptrl,c
 10140  000B12  0EFD               	movlw	high _dpowers
 10141  000B14  20F4               	addwfc	prodh,w,c
 10142  000B16  6EF7               	movwf	tblptrh,c
 10143  000B18                     	if	0	;There are less than 3 active tblptr bytes
 10144  000B18                     	endif
 10145  000B18  0009               	tblrd		*+
 10146  000B1A  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 10147  000B1E  000A               	tblrd		*-
 10148  000B20  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 10149  000B24  C01D  F001         	movff	i2printf@val,i2___lwdiv@dividend
 10150  000B28  C01E  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 10151  000B2C  EC9E  F00F         	call	i2___lwdiv	;wreg free
 10152  000B30  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 10153  000B34  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 10154  000B38  0E00               	movlw	0
 10155  000B3A  6E0B               	movwf	i2___lwmod@divisor+1,c
 10156  000B3C  0E0A               	movlw	10
 10157  000B3E  6E0A               	movwf	i2___lwmod@divisor,c
 10158  000B40  EC35  F010         	call	i2___lwmod	;wreg free
 10159  000B44  5008               	movf	?i2___lwmod,w,c
 10160  000B46  0F30               	addlw	48
 10161  000B48  6E22               	movwf	i2printf@c,c
 10162                           
 10163                           ;doprnt.c: 1491: break;
 10164  000B4A  D02E               	goto	i2l3220
 10165  000B4C                     i2l3212:
 10166                           
 10167                           ;doprnt.c: 1499: {
 10168                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 10169  000B4C  C01D  F001         	movff	i2printf@val,i2___lwdiv@dividend
 10170  000B50  C01E  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 10171  000B54  501C               	movf	i2printf@prec,w,c
 10172  000B56  0D02               	mullw	2
 10173  000B58  0EE5               	movlw	low _hexpowers
 10174  000B5A  24F3               	addwf	prodl,w,c
 10175  000B5C  6EF6               	movwf	tblptrl,c
 10176  000B5E  0EFD               	movlw	high _hexpowers
 10177  000B60  20F4               	addwfc	prodh,w,c
 10178  000B62  6EF7               	movwf	tblptrh,c
 10179  000B64                     	if	0	;There are less than 3 active tblptr bytes
 10180  000B64                     	endif
 10181  000B64  0009               	tblrd		*+
 10182  000B66  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 10183  000B6A  000A               	tblrd		*-
 10184  000B6C  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 10185  000B70  EC9E  F00F         	call	i2___lwdiv	;wreg free
 10186  000B74  5001               	movf	?i2___lwdiv,w,c
 10187  000B76  0B0F               	andlw	15
 10188  000B78  6E17               	movwf	i2printf@idx,c
 10189                           
 10190                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 10191  000B7A  5017               	movf	i2printf@idx,w,c
 10192  000B7C  0D01               	mullw	1
 10193  000B7E  0E93               	movlw	low STR_45
 10194  000B80  24F3               	addwf	prodl,w,c
 10195  000B82  6EF6               	movwf	tblptrl,c
 10196  000B84  0EFF               	movlw	high STR_45
 10197  000B86  20F4               	addwfc	prodh,w,c
 10198  000B88  6EF7               	movwf	tblptrh,c
 10199  000B8A                     	if	0	;There are less than 3 active tblptr bytes
 10200  000B8A                     	endif
 10201  000B8A  0008               	tblrd		*
 10202  000B8C  CFF5 F022          	movff	tablat,i2printf@c
 10203                           
 10204                           ;doprnt.c: 1523: }
 10205                           
 10206                           ;doprnt.c: 1508: }
 10207                           ;doprnt.c: 1510: break;
 10208  000B90  D00B               	goto	i2l3220
 10209  000B92                     i2l3218:
 10210  000B92  501F               	movf	i2printf@flag,w,c
 10211  000B94  0BC0               	andlw	192
 10212                           
 10213                           ; Switch size 1, requested type "space"
 10214                           ; Number of cases is 3, Range of values is 0 to 192
 10215                           ; switch strategies available:
 10216                           ; Name         Instructions Cycles
 10217                           ; simple_byte           10     6 (average)
 10218                           ;	Chosen strategy is simple_byte
 10219  000B96  0A00               	xorlw	0	; case 0
 10220  000B98  B4D8               	btfsc	status,2,c
 10221  000B9A  D7B6               	goto	i2l3210
 10222  000B9C  0A80               	xorlw	128	; case 128
 10223  000B9E  B4D8               	btfsc	status,2,c
 10224  000BA0  D7D5               	goto	i2l3212
 10225  000BA2  0A40               	xorlw	64	; case 192
 10226  000BA4  B4D8               	btfsc	status,2,c
 10227  000BA6  D7B0               	goto	i2l3210
 10228  000BA8                     i2l3220:
 10229                           
 10230                           ;doprnt.c: 1524: (putch(c) );
 10231  000BA8  5022               	movf	i2printf@c,w,c
 10232  000BAA  ECC1  F011         	call	i2_putch
 10233  000BAE                     i2l3222:
 10234  000BAE  061C               	decf	i2printf@prec,f,c
 10235  000BB0  281C               	incf	i2printf@prec,w,c
 10236  000BB2  A4D8               	btfss	status,2,c
 10237  000BB4  D7EE               	goto	i2l3218
 10238  000BB6                     i2l3224:
 10239  000BB6  C00D  FFF6         	movff	i2printf@f,tblptrl
 10240  000BBA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 10241  000BBE  4A0D               	infsnz	i2printf@f,f,c
 10242  000BC0  2A0E               	incf	i2printf@f+1,f,c
 10243  000BC2                     	if	0	;tblptru may be non-zero
 10244  000BC2                     	endif
 10245  000BC2                     	if	0	;tblptru may be non-zero
 10246  000BC2                     	endif
 10247  000BC2  0008               	tblrd		*
 10248  000BC4  CFF5 F022          	movff	tablat,i2printf@c
 10249  000BC8  5022               	movf	i2printf@c,w,c
 10250  000BCA  B4D8               	btfsc	status,2,c
 10251  000BCC  0012               	return	
 10252  000BCE  D638               	goto	i2l3074
 10253  000BD0                     __end_ofi2_printf:
 10254                           	opt stack 0
 10255                           pclatu	equ	0xFFB
 10256                           pclath	equ	0xFFA
 10257                           tblptru	equ	0xFF8
 10258                           tblptrh	equ	0xFF7
 10259                           tblptrl	equ	0xFF6
 10260                           tablat	equ	0xFF5
 10261                           prodh	equ	0xFF4
 10262                           prodl	equ	0xFF3
 10263                           intcon	equ	0xFF2
 10264                           intcon2	equ	0xFF1
 10265                           intcon3	equ	0xFF0
 10266                           postinc0	equ	0xFEE
 10267                           fsr0h	equ	0xFEA
 10268                           fsr0l	equ	0xFE9
 10269                           wreg	equ	0xFE8
 10270                           plusw1	equ	0xFE3
 10271                           fsr1h	equ	0xFE2
 10272                           fsr1l	equ	0xFE1
 10273                           indf2	equ	0xFDF
 10274                           postinc2	equ	0xFDE
 10275                           postdec2	equ	0xFDD
 10276                           plusw2	equ	0xFDB
 10277                           fsr2h	equ	0xFDA
 10278                           fsr2l	equ	0xFD9
 10279                           status	equ	0xFD8
 10280                           
 10281 ;; *************** function i2_putch *****************
 10282 ;; Defined at:
 10283 ;;		line 25 in file "lcd.c"
 10284 ;; Parameters:    Size  Location     Type
 10285 ;;  data            1    wreg     unsigned char 
 10286 ;; Auto vars:     Size  Location     Type
 10287 ;;  data            1    2[COMRAM] unsigned char 
 10288 ;; Return value:  Size  Location     Type
 10289 ;;                  1    wreg      void 
 10290 ;; Registers used:
 10291 ;;		wreg, status,2, status,0, cstack
 10292 ;; Tracked objects:
 10293 ;;		On entry : 0/0
 10294 ;;		On exit  : 0/0
 10295 ;;		Unchanged: 0/0
 10296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10298 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10300 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10301 ;;Total ram usage:        1 bytes
 10302 ;; Hardware stack levels used:    1
 10303 ;; Hardware stack levels required when called:    1
 10304 ;; This function calls:
 10305 ;;		i2_lcdNibble
 10306 ;; This function is called by:
 10307 ;;		i2_printf
 10308 ;; This function uses a non-reentrant model
 10309 ;;
 10310                           
 10311                           	psect	text52
 10312  002382                     __ptext52:
 10313                           	opt stack 0
 10314  002382                     i2_putch:
 10315                           	opt stack 22
 10316                           
 10317                           ;incstack = 0
 10318                           ;i2putch@data stored from wreg
 10319  002382  6E03               	movwf	i2putch@data,c
 10320                           
 10321                           ;lcd.c: 26: LATDbits.LATD2 = 1;
 10322  002384  848C               	bsf	3980,2,c	;volatile
 10323                           
 10324                           ;lcd.c: 27: lcdNibble(data);
 10325  002386  5003               	movf	i2putch@data,w,c
 10326  002388  EC73  F00F         	call	i2_lcdNibble
 10327  00238C  0012               	return		;funcret
 10328  00238E                     __end_ofi2_putch:
 10329                           	opt stack 0
 10330                           pclatu	equ	0xFFB
 10331                           pclath	equ	0xFFA
 10332                           tblptru	equ	0xFF8
 10333                           tblptrh	equ	0xFF7
 10334                           tblptrl	equ	0xFF6
 10335                           tablat	equ	0xFF5
 10336                           prodh	equ	0xFF4
 10337                           prodl	equ	0xFF3
 10338                           intcon	equ	0xFF2
 10339                           intcon2	equ	0xFF1
 10340                           intcon3	equ	0xFF0
 10341                           postinc0	equ	0xFEE
 10342                           fsr0h	equ	0xFEA
 10343                           fsr0l	equ	0xFE9
 10344                           wreg	equ	0xFE8
 10345                           plusw1	equ	0xFE3
 10346                           fsr1h	equ	0xFE2
 10347                           fsr1l	equ	0xFE1
 10348                           indf2	equ	0xFDF
 10349                           postinc2	equ	0xFDE
 10350                           postdec2	equ	0xFDD
 10351                           plusw2	equ	0xFDB
 10352                           fsr2h	equ	0xFDA
 10353                           fsr2l	equ	0xFD9
 10354                           status	equ	0xFD8
 10355                           
 10356 ;; *************** function i2_isdigit *****************
 10357 ;; Defined at:
 10358 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
 10359 ;; Parameters:    Size  Location     Type
 10360 ;;  c               1    wreg     unsigned char 
 10361 ;; Auto vars:     Size  Location     Type
 10362 ;;  c               1    2[COMRAM] unsigned char 
 10363 ;; Return value:  Size  Location     Type
 10364 ;;		None               void
 10365 ;; Registers used:
 10366 ;;		wreg, status,2, status,0
 10367 ;; Tracked objects:
 10368 ;;		On entry : 0/0
 10369 ;;		On exit  : 0/0
 10370 ;;		Unchanged: 0/0
 10371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10373 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10374 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10375 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10376 ;;Total ram usage:        3 bytes
 10377 ;; Hardware stack levels used:    1
 10378 ;; This function calls:
 10379 ;;		Nothing
 10380 ;; This function is called by:
 10381 ;;		i2_printf
 10382 ;; This function uses a non-reentrant model
 10383 ;;
 10384                           
 10385                           	psect	text53
 10386  0022B6                     __ptext53:
 10387                           	opt stack 0
 10388  0022B6                     i2_isdigit:
 10389                           	opt stack 23
 10390                           
 10391                           ;incstack = 0
 10392                           ;i2isdigit@c stored from wreg
 10393  0022B6  6E03               	movwf	i2isdigit@c,c
 10394  0022B8  0E00               	movlw	0
 10395  0022BA  6E02               	movwf	i2_isdigit$1055,c
 10396  0022BC  0E3A               	movlw	58
 10397  0022BE  6003               	cpfslt	i2isdigit@c,c
 10398  0022C0  D005               	goto	i2l2872
 10399  0022C2  0E2F               	movlw	47
 10400  0022C4  6403               	cpfsgt	i2isdigit@c,c
 10401  0022C6  D002               	goto	i2l2872
 10402  0022C8  0E01               	movlw	1
 10403  0022CA  6E02               	movwf	i2_isdigit$1055,c
 10404  0022CC                     i2l2872:
 10405  0022CC  C002  F001         	movff	i2_isdigit$1055,??i2_isdigit
 10406  0022D0  3001               	rrcf	??i2_isdigit,w,c
 10407  0022D2  0012               	return	
 10408  0022D4                     __end_ofi2_isdigit:
 10409                           	opt stack 0
 10410                           pclatu	equ	0xFFB
 10411                           pclath	equ	0xFFA
 10412                           tblptru	equ	0xFF8
 10413                           tblptrh	equ	0xFF7
 10414                           tblptrl	equ	0xFF6
 10415                           tablat	equ	0xFF5
 10416                           prodh	equ	0xFF4
 10417                           prodl	equ	0xFF3
 10418                           intcon	equ	0xFF2
 10419                           intcon2	equ	0xFF1
 10420                           intcon3	equ	0xFF0
 10421                           postinc0	equ	0xFEE
 10422                           fsr0h	equ	0xFEA
 10423                           fsr0l	equ	0xFE9
 10424                           wreg	equ	0xFE8
 10425                           plusw1	equ	0xFE3
 10426                           fsr1h	equ	0xFE2
 10427                           fsr1l	equ	0xFE1
 10428                           indf2	equ	0xFDF
 10429                           postinc2	equ	0xFDE
 10430                           postdec2	equ	0xFDD
 10431                           plusw2	equ	0xFDB
 10432                           fsr2h	equ	0xFDA
 10433                           fsr2l	equ	0xFD9
 10434                           status	equ	0xFD8
 10435                           
 10436 ;; *************** function i2___wmul *****************
 10437 ;; Defined at:
 10438 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
 10439 ;; Parameters:    Size  Location     Type
 10440 ;;  multiplier      2    0[COMRAM] unsigned int 
 10441 ;;  multiplicand    2    2[COMRAM] unsigned int 
 10442 ;; Auto vars:     Size  Location     Type
 10443 ;;  __wmul          2    4[COMRAM] unsigned int 
 10444 ;; Return value:  Size  Location     Type
 10445 ;;                  2    0[COMRAM] unsigned int 
 10446 ;; Registers used:
 10447 ;;		wreg, status,2, status,0, prodl, prodh
 10448 ;; Tracked objects:
 10449 ;;		On entry : 0/0
 10450 ;;		On exit  : 0/0
 10451 ;;		Unchanged: 0/0
 10452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10453 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10454 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10456 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10457 ;;Total ram usage:        6 bytes
 10458 ;; Hardware stack levels used:    1
 10459 ;; This function calls:
 10460 ;;		Nothing
 10461 ;; This function is called by:
 10462 ;;		_simulate
 10463 ;;		_HexDecToDec2
 10464 ;;		_WriteRun
 10465 ;;		i2_printf
 10466 ;; This function uses a non-reentrant model
 10467 ;;
 10468                           
 10469                           	psect	text54
 10470  00226E                     __ptext54:
 10471                           	opt stack 0
 10472  00226E                     i2___wmul:
 10473                           	opt stack 23
 10474                           
 10475                           ;incstack = 0
 10476  00226E  5001               	movf	i2___wmul@multiplier,w,c
 10477  002270  0203               	mulwf	i2___wmul@multiplicand,c
 10478  002272  CFF3 F005          	movff	prodl,i2___wmul@product
 10479  002276  CFF4 F006          	movff	prodh,i2___wmul@product+1
 10480  00227A  5001               	movf	i2___wmul@multiplier,w,c
 10481  00227C  0204               	mulwf	i2___wmul@multiplicand+1,c
 10482  00227E  50F3               	movf	prodl,w,c
 10483  002280  2606               	addwf	i2___wmul@product+1,f,c
 10484  002282  5002               	movf	i2___wmul@multiplier+1,w,c
 10485  002284  0203               	mulwf	i2___wmul@multiplicand,c
 10486  002286  50F3               	movf	prodl,w,c
 10487  002288  2606               	addwf	i2___wmul@product+1,f,c
 10488  00228A  C005  F001         	movff	i2___wmul@product,?i2___wmul
 10489  00228E  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 10490  002292  0012               	return	
 10491  002294                     __end_ofi2___wmul:
 10492                           	opt stack 0
 10493                           pclatu	equ	0xFFB
 10494                           pclath	equ	0xFFA
 10495                           tblptru	equ	0xFF8
 10496                           tblptrh	equ	0xFF7
 10497                           tblptrl	equ	0xFF6
 10498                           tablat	equ	0xFF5
 10499                           prodh	equ	0xFF4
 10500                           prodl	equ	0xFF3
 10501                           intcon	equ	0xFF2
 10502                           intcon2	equ	0xFF1
 10503                           intcon3	equ	0xFF0
 10504                           postinc0	equ	0xFEE
 10505                           fsr0h	equ	0xFEA
 10506                           fsr0l	equ	0xFE9
 10507                           wreg	equ	0xFE8
 10508                           plusw1	equ	0xFE3
 10509                           fsr1h	equ	0xFE2
 10510                           fsr1l	equ	0xFE1
 10511                           indf2	equ	0xFDF
 10512                           postinc2	equ	0xFDE
 10513                           postdec2	equ	0xFDD
 10514                           plusw2	equ	0xFDB
 10515                           fsr2h	equ	0xFDA
 10516                           fsr2l	equ	0xFD9
 10517                           status	equ	0xFD8
 10518                           
 10519 ;; *************** function i2___lwmod *****************
 10520 ;; Defined at:
 10521 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
 10522 ;; Parameters:    Size  Location     Type
 10523 ;;  dividend        2    7[COMRAM] unsigned int 
 10524 ;;  divisor         2    9[COMRAM] unsigned int 
 10525 ;; Auto vars:     Size  Location     Type
 10526 ;;  __lwmod         1   11[COMRAM] unsigned char 
 10527 ;; Return value:  Size  Location     Type
 10528 ;;                  2    7[COMRAM] unsigned int 
 10529 ;; Registers used:
 10530 ;;		wreg, status,2, status,0
 10531 ;; Tracked objects:
 10532 ;;		On entry : 0/0
 10533 ;;		On exit  : 0/0
 10534 ;;		Unchanged: 0/0
 10535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10536 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10537 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10539 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10540 ;;Total ram usage:        5 bytes
 10541 ;; Hardware stack levels used:    1
 10542 ;; This function calls:
 10543 ;;		Nothing
 10544 ;; This function is called by:
 10545 ;;		i2_printf
 10546 ;; This function uses a non-reentrant model
 10547 ;;
 10548                           
 10549                           	psect	text55
 10550  00206A                     __ptext55:
 10551                           	opt stack 0
 10552  00206A                     i2___lwmod:
 10553                           	opt stack 23
 10554                           
 10555                           ;incstack = 0
 10556  00206A  500A               	movf	i2___lwmod@divisor,w,c
 10557  00206C  100B               	iorwf	i2___lwmod@divisor+1,w,c
 10558  00206E  B4D8               	btfsc	status,2,c
 10559  002070  D018               	goto	i2l953
 10560  002072  0E01               	movlw	1
 10561  002074  6E0C               	movwf	i2___lwmod@counter,c
 10562  002076  D004               	goto	i2l2904
 10563  002078                     i2l2902:
 10564  002078  90D8               	bcf	status,0,c
 10565  00207A  360A               	rlcf	i2___lwmod@divisor,f,c
 10566  00207C  360B               	rlcf	i2___lwmod@divisor+1,f,c
 10567  00207E  2A0C               	incf	i2___lwmod@counter,f,c
 10568  002080                     i2l2904:
 10569  002080  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 10570  002082  D7FA               	goto	i2l2902
 10571  002084                     i2l2906:
 10572  002084  500A               	movf	i2___lwmod@divisor,w,c
 10573  002086  5C08               	subwf	i2___lwmod@dividend,w,c
 10574  002088  500B               	movf	i2___lwmod@divisor+1,w,c
 10575  00208A  5809               	subwfb	i2___lwmod@dividend+1,w,c
 10576  00208C  A0D8               	btfss	status,0,c
 10577  00208E  D004               	goto	i2l2910
 10578  002090  500A               	movf	i2___lwmod@divisor,w,c
 10579  002092  5E08               	subwf	i2___lwmod@dividend,f,c
 10580  002094  500B               	movf	i2___lwmod@divisor+1,w,c
 10581  002096  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 10582  002098                     i2l2910:
 10583  002098  90D8               	bcf	status,0,c
 10584  00209A  320B               	rrcf	i2___lwmod@divisor+1,f,c
 10585  00209C  320A               	rrcf	i2___lwmod@divisor,f,c
 10586  00209E  2E0C               	decfsz	i2___lwmod@counter,f,c
 10587  0020A0  D7F1               	goto	i2l2906
 10588  0020A2                     i2l953:
 10589  0020A2  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 10590  0020A6  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 10591  0020AA  0012               	return		;funcret
 10592  0020AC                     __end_ofi2___lwmod:
 10593                           	opt stack 0
 10594                           pclatu	equ	0xFFB
 10595                           pclath	equ	0xFFA
 10596                           tblptru	equ	0xFF8
 10597                           tblptrh	equ	0xFF7
 10598                           tblptrl	equ	0xFF6
 10599                           tablat	equ	0xFF5
 10600                           prodh	equ	0xFF4
 10601                           prodl	equ	0xFF3
 10602                           intcon	equ	0xFF2
 10603                           intcon2	equ	0xFF1
 10604                           intcon3	equ	0xFF0
 10605                           postinc0	equ	0xFEE
 10606                           fsr0h	equ	0xFEA
 10607                           fsr0l	equ	0xFE9
 10608                           wreg	equ	0xFE8
 10609                           plusw1	equ	0xFE3
 10610                           fsr1h	equ	0xFE2
 10611                           fsr1l	equ	0xFE1
 10612                           indf2	equ	0xFDF
 10613                           postinc2	equ	0xFDE
 10614                           postdec2	equ	0xFDD
 10615                           plusw2	equ	0xFDB
 10616                           fsr2h	equ	0xFDA
 10617                           fsr2l	equ	0xFD9
 10618                           status	equ	0xFD8
 10619                           
 10620 ;; *************** function i2___lwdiv *****************
 10621 ;; Defined at:
 10622 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
 10623 ;; Parameters:    Size  Location     Type
 10624 ;;  dividend        2    0[COMRAM] unsigned int 
 10625 ;;  divisor         2    2[COMRAM] unsigned int 
 10626 ;; Auto vars:     Size  Location     Type
 10627 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 10628 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 10629 ;; Return value:  Size  Location     Type
 10630 ;;                  2    0[COMRAM] unsigned int 
 10631 ;; Registers used:
 10632 ;;		wreg, status,2, status,0
 10633 ;; Tracked objects:
 10634 ;;		On entry : 0/0
 10635 ;;		On exit  : 0/0
 10636 ;;		Unchanged: 0/0
 10637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10638 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10639 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10641 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10642 ;;Total ram usage:        7 bytes
 10643 ;; Hardware stack levels used:    1
 10644 ;; This function calls:
 10645 ;;		Nothing
 10646 ;; This function is called by:
 10647 ;;		i2_printf
 10648 ;; This function uses a non-reentrant model
 10649 ;;
 10650                           
 10651                           	psect	text56
 10652  001F3C                     __ptext56:
 10653                           	opt stack 0
 10654  001F3C                     i2___lwdiv:
 10655                           	opt stack 23
 10656                           
 10657                           ;incstack = 0
 10658  001F3C  0E00               	movlw	0
 10659  001F3E  6E06               	movwf	i2___lwdiv@quotient+1,c
 10660  001F40  0E00               	movlw	0
 10661  001F42  6E05               	movwf	i2___lwdiv@quotient,c
 10662  001F44  5003               	movf	i2___lwdiv@divisor,w,c
 10663  001F46  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 10664  001F48  B4D8               	btfsc	status,2,c
 10665  001F4A  D01C               	goto	i2l943
 10666  001F4C  0E01               	movlw	1
 10667  001F4E  6E07               	movwf	i2___lwdiv@counter,c
 10668  001F50  D004               	goto	i2l2884
 10669  001F52                     i2l2882:
 10670  001F52  90D8               	bcf	status,0,c
 10671  001F54  3603               	rlcf	i2___lwdiv@divisor,f,c
 10672  001F56  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 10673  001F58  2A07               	incf	i2___lwdiv@counter,f,c
 10674  001F5A                     i2l2884:
 10675  001F5A  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 10676  001F5C  D7FA               	goto	i2l2882
 10677  001F5E                     i2l2886:
 10678  001F5E  90D8               	bcf	status,0,c
 10679  001F60  3605               	rlcf	i2___lwdiv@quotient,f,c
 10680  001F62  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 10681  001F64  5003               	movf	i2___lwdiv@divisor,w,c
 10682  001F66  5C01               	subwf	i2___lwdiv@dividend,w,c
 10683  001F68  5004               	movf	i2___lwdiv@divisor+1,w,c
 10684  001F6A  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 10685  001F6C  A0D8               	btfss	status,0,c
 10686  001F6E  D005               	goto	i2l2894
 10687  001F70  5003               	movf	i2___lwdiv@divisor,w,c
 10688  001F72  5E01               	subwf	i2___lwdiv@dividend,f,c
 10689  001F74  5004               	movf	i2___lwdiv@divisor+1,w,c
 10690  001F76  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 10691  001F78  8005               	bsf	i2___lwdiv@quotient,0,c
 10692  001F7A                     i2l2894:
 10693  001F7A  90D8               	bcf	status,0,c
 10694  001F7C  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 10695  001F7E  3203               	rrcf	i2___lwdiv@divisor,f,c
 10696  001F80  2E07               	decfsz	i2___lwdiv@counter,f,c
 10697  001F82  D7ED               	goto	i2l2886
 10698  001F84                     i2l943:
 10699  001F84  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 10700  001F88  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 10701  001F8C  0012               	return		;funcret
 10702  001F8E                     __end_ofi2___lwdiv:
 10703                           	opt stack 0
 10704                           pclatu	equ	0xFFB
 10705                           pclath	equ	0xFFA
 10706                           tblptru	equ	0xFF8
 10707                           tblptrh	equ	0xFF7
 10708                           tblptrl	equ	0xFF6
 10709                           tablat	equ	0xFF5
 10710                           prodh	equ	0xFF4
 10711                           prodl	equ	0xFF3
 10712                           intcon	equ	0xFF2
 10713                           intcon2	equ	0xFF1
 10714                           intcon3	equ	0xFF0
 10715                           postinc0	equ	0xFEE
 10716                           fsr0h	equ	0xFEA
 10717                           fsr0l	equ	0xFE9
 10718                           wreg	equ	0xFE8
 10719                           plusw1	equ	0xFE3
 10720                           fsr1h	equ	0xFE2
 10721                           fsr1l	equ	0xFE1
 10722                           indf2	equ	0xFDF
 10723                           postinc2	equ	0xFDE
 10724                           postdec2	equ	0xFDD
 10725                           plusw2	equ	0xFDB
 10726                           fsr2h	equ	0xFDA
 10727                           fsr2l	equ	0xFD9
 10728                           status	equ	0xFD8
 10729                           
 10730 ;; *************** function i2_lcdInst *****************
 10731 ;; Defined at:
 10732 ;;		line 20 in file "lcd.c"
 10733 ;; Parameters:    Size  Location     Type
 10734 ;;  data            1    wreg     unsigned char 
 10735 ;; Auto vars:     Size  Location     Type
 10736 ;;  data            1    2[COMRAM] unsigned char 
 10737 ;; Return value:  Size  Location     Type
 10738 ;;                  1    wreg      void 
 10739 ;; Registers used:
 10740 ;;		wreg, status,2, status,0, cstack
 10741 ;; Tracked objects:
 10742 ;;		On entry : 0/0
 10743 ;;		On exit  : 0/0
 10744 ;;		Unchanged: 0/0
 10745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10747 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10749 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10750 ;;Total ram usage:        1 bytes
 10751 ;; Hardware stack levels used:    1
 10752 ;; Hardware stack levels required when called:    1
 10753 ;; This function calls:
 10754 ;;		i2_lcdNibble
 10755 ;; This function is called by:
 10756 ;;		_simulate
 10757 ;;		_intrpt
 10758 ;;		_showInfo
 10759 ;;		_stopMoving
 10760 ;;		_PermLog
 10761 ;; This function uses a non-reentrant model
 10762 ;;
 10763                           
 10764                           	psect	text57
 10765  00238E                     __ptext57:
 10766                           	opt stack 0
 10767  00238E                     i2_lcdInst:
 10768                           	opt stack 24
 10769                           
 10770                           ;incstack = 0
 10771                           ;i2lcdInst@data stored from wreg
 10772  00238E  6E03               	movwf	i2lcdInst@data,c
 10773                           
 10774                           ;lcd.c: 21: LATDbits.LATD2 = 0;
 10775  002390  948C               	bcf	3980,2,c	;volatile
 10776                           
 10777                           ;lcd.c: 22: lcdNibble(data);
 10778  002392  5003               	movf	i2lcdInst@data,w,c
 10779  002394  EC73  F00F         	call	i2_lcdNibble
 10780  002398  0012               	return		;funcret
 10781  00239A                     __end_ofi2_lcdInst:
 10782                           	opt stack 0
 10783                           pclatu	equ	0xFFB
 10784                           pclath	equ	0xFFA
 10785                           tblptru	equ	0xFF8
 10786                           tblptrh	equ	0xFF7
 10787                           tblptrl	equ	0xFF6
 10788                           tablat	equ	0xFF5
 10789                           prodh	equ	0xFF4
 10790                           prodl	equ	0xFF3
 10791                           intcon	equ	0xFF2
 10792                           intcon2	equ	0xFF1
 10793                           intcon3	equ	0xFF0
 10794                           postinc0	equ	0xFEE
 10795                           fsr0h	equ	0xFEA
 10796                           fsr0l	equ	0xFE9
 10797                           wreg	equ	0xFE8
 10798                           plusw1	equ	0xFE3
 10799                           fsr1h	equ	0xFE2
 10800                           fsr1l	equ	0xFE1
 10801                           indf2	equ	0xFDF
 10802                           postinc2	equ	0xFDE
 10803                           postdec2	equ	0xFDD
 10804                           plusw2	equ	0xFDB
 10805                           fsr2h	equ	0xFDA
 10806                           fsr2l	equ	0xFD9
 10807                           status	equ	0xFD8
 10808                           
 10809 ;; *************** function i2_lcdNibble *****************
 10810 ;; Defined at:
 10811 ;;		line 30 in file "lcd.c"
 10812 ;; Parameters:    Size  Location     Type
 10813 ;;  data            1    wreg     unsigned char 
 10814 ;; Auto vars:     Size  Location     Type
 10815 ;;  data            1    1[COMRAM] unsigned char 
 10816 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 10817 ;; Return value:  Size  Location     Type
 10818 ;;                  1    wreg      void 
 10819 ;; Registers used:
 10820 ;;		wreg, status,2, status,0
 10821 ;; Tracked objects:
 10822 ;;		On entry : 0/0
 10823 ;;		On exit  : 0/0
 10824 ;;		Unchanged: 0/0
 10825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10827 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10829 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10830 ;;Total ram usage:        2 bytes
 10831 ;; Hardware stack levels used:    1
 10832 ;; This function calls:
 10833 ;;		Nothing
 10834 ;; This function is called by:
 10835 ;;		i2_lcdInst
 10836 ;;		i2_putch
 10837 ;; This function uses a non-reentrant model
 10838 ;;
 10839                           
 10840                           	psect	text58
 10841  001EE6                     __ptext58:
 10842                           	opt stack 0
 10843  001EE6                     i2_lcdNibble:
 10844                           	opt stack 24
 10845                           
 10846                           ;incstack = 0
 10847                           ;i2lcdNibble@data stored from wreg
 10848  001EE6  6E02               	movwf	i2lcdNibble@data,c
 10849                           
 10850                           ;lcd.c: 32: char temp = data & 0xF0;
 10851  001EE8  5002               	movf	i2lcdNibble@data,w,c
 10852  001EEA  0BF0               	andlw	240
 10853  001EEC  6E01               	movwf	i2lcdNibble@temp,c
 10854                           
 10855                           ;lcd.c: 33: LATD = LATD & 0x0F;
 10856  001EEE  508C               	movf	3980,w,c	;volatile
 10857  001EF0  0B0F               	andlw	15
 10858  001EF2  6E8C               	movwf	3980,c	;volatile
 10859                           
 10860                           ;lcd.c: 34: LATD = temp | LATD;
 10861  001EF4  5001               	movf	i2lcdNibble@temp,w,c
 10862  001EF6  108C               	iorwf	3980,w,c	;volatile
 10863  001EF8  6E8C               	movwf	3980,c	;volatile
 10864                           
 10865                           ;lcd.c: 36: LATDbits.LATD3 = 0;
 10866  001EFA  968C               	bcf	3980,3,c	;volatile
 10867                           
 10868                           ;lcd.c: 37: _delay((unsigned long)((25)*(8000000/4000000.0)));
 10869  001EFC  0E10               	movlw	16
 10870  001EFE                     i2u356_47:
 10871  001EFE  2EE8               	decfsz	wreg,f,c
 10872  001F00  D7FE               	bra	i2u356_47
 10873  001F02  D000               	nop2	
 10874                           
 10875                           ;lcd.c: 38: LATDbits.LATD3 = 1;
 10876  001F04  868C               	bsf	3980,3,c	;volatile
 10877                           
 10878                           ;lcd.c: 39: _delay((unsigned long)((25)*(8000000/4000000.0)));
 10879  001F06  0E10               	movlw	16
 10880  001F08                     i2u357_47:
 10881  001F08  2EE8               	decfsz	wreg,f,c
 10882  001F0A  D7FE               	bra	i2u357_47
 10883  001F0C  D000               	nop2	
 10884                           
 10885                           ;lcd.c: 41: data = data << 4;
 10886  001F0E  3802               	swapf	i2lcdNibble@data,w,c
 10887  001F10  0BF0               	andlw	240
 10888  001F12  6E02               	movwf	i2lcdNibble@data,c
 10889                           
 10890                           ;lcd.c: 43: temp = data & 0xF0;
 10891  001F14  5002               	movf	i2lcdNibble@data,w,c
 10892  001F16  0BF0               	andlw	240
 10893  001F18  6E01               	movwf	i2lcdNibble@temp,c
 10894                           
 10895                           ;lcd.c: 44: LATD = LATD & 0x0F;
 10896  001F1A  508C               	movf	3980,w,c	;volatile
 10897  001F1C  0B0F               	andlw	15
 10898  001F1E  6E8C               	movwf	3980,c	;volatile
 10899                           
 10900                           ;lcd.c: 45: LATD = temp | LATD;
 10901  001F20  5001               	movf	i2lcdNibble@temp,w,c
 10902  001F22  108C               	iorwf	3980,w,c	;volatile
 10903  001F24  6E8C               	movwf	3980,c	;volatile
 10904                           
 10905                           ;lcd.c: 47: LATDbits.LATD3 = 0;
 10906  001F26  968C               	bcf	3980,3,c	;volatile
 10907                           
 10908                           ;lcd.c: 48: _delay((unsigned long)((25)*(8000000/4000000.0)));
 10909  001F28  0E10               	movlw	16
 10910  001F2A                     i2u358_47:
 10911  001F2A  2EE8               	decfsz	wreg,f,c
 10912  001F2C  D7FE               	bra	i2u358_47
 10913  001F2E  D000               	nop2	
 10914                           
 10915                           ;lcd.c: 49: LATDbits.LATD3 = 1;
 10916  001F30  868C               	bsf	3980,3,c	;volatile
 10917                           
 10918                           ;lcd.c: 50: _delay((unsigned long)((25)*(8000000/4000000.0)));
 10919  001F32  0E10               	movlw	16
 10920  001F34                     i2u359_47:
 10921  001F34  2EE8               	decfsz	wreg,f,c
 10922  001F36  D7FE               	bra	i2u359_47
 10923  001F38  D000               	nop2	
 10924  001F3A  0012               	return		;funcret
 10925  001F3C                     __end_ofi2_lcdNibble:
 10926                           	opt stack 0
 10927                           pclatu	equ	0xFFB
 10928                           pclath	equ	0xFFA
 10929                           tblptru	equ	0xFF8
 10930                           tblptrh	equ	0xFF7
 10931                           tblptrl	equ	0xFF6
 10932                           tablat	equ	0xFF5
 10933                           prodh	equ	0xFF4
 10934                           prodl	equ	0xFF3
 10935                           intcon	equ	0xFF2
 10936                           intcon2	equ	0xFF1
 10937                           intcon3	equ	0xFF0
 10938                           postinc0	equ	0xFEE
 10939                           fsr0h	equ	0xFEA
 10940                           fsr0l	equ	0xFE9
 10941                           wreg	equ	0xFE8
 10942                           plusw1	equ	0xFE3
 10943                           fsr1h	equ	0xFE2
 10944                           fsr1l	equ	0xFE1
 10945                           indf2	equ	0xFDF
 10946                           postinc2	equ	0xFDE
 10947                           postdec2	equ	0xFDD
 10948                           plusw2	equ	0xFDB
 10949                           fsr2h	equ	0xFDA
 10950                           fsr2l	equ	0xFD9
 10951                           status	equ	0xFD8
 10952                           
 10953 ;; *************** function _captureKeypad *****************
 10954 ;; Defined at:
 10955 ;;		line 13 in file "modules.c"
 10956 ;; Parameters:    Size  Location     Type
 10957 ;;		None
 10958 ;; Auto vars:     Size  Location     Type
 10959 ;;  keypress        1    2[COMRAM] unsigned char 
 10960 ;; Return value:  Size  Location     Type
 10961 ;;                  2    0[COMRAM] unsigned int 
 10962 ;; Registers used:
 10963 ;;		wreg, status,2, status,0
 10964 ;; Tracked objects:
 10965 ;;		On entry : 0/0
 10966 ;;		On exit  : 0/0
 10967 ;;		Unchanged: 0/0
 10968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10969 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10970 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10972 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10973 ;;Total ram usage:        3 bytes
 10974 ;; Hardware stack levels used:    1
 10975 ;; This function calls:
 10976 ;;		Nothing
 10977 ;; This function is called by:
 10978 ;;		_simulate
 10979 ;;		_showInfo
 10980 ;;		_PermLog
 10981 ;; This function uses a non-reentrant model
 10982 ;;
 10983                           
 10984                           	psect	text59
 10985  0022D4                     __ptext59:
 10986                           	opt stack 0
 10987  0022D4                     _captureKeypad:
 10988                           	opt stack 23
 10989                           
 10990                           ;modules.c: 14: (INTCONbits.GIE = 0);
 10991                           
 10992                           ;incstack = 0
 10993  0022D4  9EF2               	bcf	intcon,7,c	;volatile
 10994  0022D6                     i2l223:
 10995  0022D6  A281               	btfss	3969,1,c	;volatile
 10996  0022D8  D7FE               	goto	i2l223
 10997                           
 10998                           ;modules.c: 16: unsigned char keypress = (PORTB & 0xF0) >> 4;
 10999  0022DA  3881               	swapf	3969,w,c	;volatile
 11000  0022DC  0B0F               	andlw	15
 11001  0022DE  0B0F               	andlw	15
 11002  0022E0  6E03               	movwf	captureKeypad@keypress,c
 11003  0022E2                     i2l226:
 11004  0022E2  B281               	btfsc	3969,1,c	;volatile
 11005  0022E4  D7FE               	goto	i2l226
 11006                           
 11007                           ;modules.c: 18: INT1IF = 0;
 11008  0022E6  90F0               	bcf	intcon3,0,c	;volatile
 11009                           
 11010                           ;modules.c: 19: (INTCONbits.GIE = 1);
 11011  0022E8  8EF2               	bsf	intcon,7,c	;volatile
 11012                           
 11013                           ;modules.c: 20: return keypress;
 11014  0022EA  C003  F001         	movff	captureKeypad@keypress,?_captureKeypad
 11015  0022EE  6A02               	clrf	?_captureKeypad+1,c
 11016  0022F0  0012               	return		;funcret
 11017  0022F2                     __end_of_captureKeypad:
 11018                           	opt stack 0
 11019                           pclatu	equ	0xFFB
 11020                           pclath	equ	0xFFA
 11021                           tblptru	equ	0xFF8
 11022                           tblptrh	equ	0xFF7
 11023                           tblptrl	equ	0xFF6
 11024                           tablat	equ	0xFF5
 11025                           prodh	equ	0xFF4
 11026                           prodl	equ	0xFF3
 11027                           intcon	equ	0xFF2
 11028                           intcon2	equ	0xFF1
 11029                           intcon3	equ	0xFF0
 11030                           postinc0	equ	0xFEE
 11031                           fsr0h	equ	0xFEA
 11032                           fsr0l	equ	0xFE9
 11033                           wreg	equ	0xFE8
 11034                           plusw1	equ	0xFE3
 11035                           fsr1h	equ	0xFE2
 11036                           fsr1l	equ	0xFE1
 11037                           indf2	equ	0xFDF
 11038                           postinc2	equ	0xFDE
 11039                           postdec2	equ	0xFDD
 11040                           plusw2	equ	0xFDB
 11041                           fsr2h	equ	0xFDA
 11042                           fsr2l	equ	0xFD9
 11043                           status	equ	0xFD8
 11044                           
 11045 ;; *************** function _ReadRun *****************
 11046 ;; Defined at:
 11047 ;;		line 66 in file "eeprom.c"
 11048 ;; Parameters:    Size  Location     Type
 11049 ;;  backruns        1    wreg     unsigned char 
 11050 ;;  sorted          2    2[COMRAM] PTR unsigned char 
 11051 ;;		 -> PermLog@sorted(4), 
 11052 ;;  time            2    4[COMRAM] PTR unsigned int 
 11053 ;;		 -> PermLog@time(2), 
 11054 ;; Auto vars:     Size  Location     Type
 11055 ;;  backruns        1   10[COMRAM] unsigned char 
 11056 ;;  add             2   11[COMRAM] unsigned int 
 11057 ;; Return value:  Size  Location     Type
 11058 ;;                  1    wreg      void 
 11059 ;; Registers used:
 11060 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11061 ;; Tracked objects:
 11062 ;;		On entry : 0/0
 11063 ;;		On exit  : 0/0
 11064 ;;		Unchanged: 0/0
 11065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11066 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11067 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11068 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11069 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11070 ;;Total ram usage:       11 bytes
 11071 ;; Hardware stack levels used:    1
 11072 ;; Hardware stack levels required when called:    1
 11073 ;; This function calls:
 11074 ;;		_back
 11075 ;;		i2_ReadEE
 11076 ;; This function is called by:
 11077 ;;		_PermLog
 11078 ;; This function uses a non-reentrant model
 11079 ;;
 11080                           
 11081                           	psect	text60
 11082  001138                     __ptext60:
 11083                           	opt stack 0
 11084  001138                     _ReadRun:
 11085                           	opt stack 23
 11086                           
 11087                           ;incstack = 0
 11088                           ;ReadRun@backruns stored from wreg
 11089  001138  6E0B               	movwf	ReadRun@backruns,c
 11090                           
 11091                           ;eeprom.c: 67: unsigned int add = back(backruns) * 5;
 11092  00113A  500B               	movf	ReadRun@backruns,w,c
 11093  00113C  EC79  F011         	call	_back
 11094  001140  6E07               	movwf	??_ReadRun& (0+255),c
 11095  001142  5007               	movf	??_ReadRun,w,c
 11096  001144  0D05               	mullw	5
 11097  001146  CFF3 F00C          	movff	prodl,ReadRun@add
 11098  00114A  CFF4 F00D          	movff	prodh,ReadRun@add+1
 11099                           
 11100                           ;eeprom.c: 68: *time = ReadEE(add++ *8);
 11101  00114E  C00C  F007         	movff	ReadRun@add,??_ReadRun
 11102  001152  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 11103  001156  90D8               	bcf	status,0,c
 11104  001158  3607               	rlcf	??_ReadRun,f,c
 11105  00115A  3608               	rlcf	??_ReadRun+1,f,c
 11106  00115C  90D8               	bcf	status,0,c
 11107  00115E  3607               	rlcf	??_ReadRun,f,c
 11108  001160  3608               	rlcf	??_ReadRun+1,f,c
 11109  001162  90D8               	bcf	status,0,c
 11110  001164  3607               	rlcf	??_ReadRun,f,c
 11111  001166  3608               	rlcf	??_ReadRun+1,f,c
 11112  001168  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 11113  00116C  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 11114  001170  EC93  F011         	call	i2_ReadEE	;wreg free
 11115  001174  6E09               	movwf	(??_ReadRun+2)& (0+255),c
 11116  001176  6A0A               	clrf	(??_ReadRun+3)& (0+255),c
 11117  001178  C005  FFD9         	movff	ReadRun@time,fsr2l
 11118  00117C  C006  FFDA         	movff	ReadRun@time+1,fsr2h
 11119  001180  C009  FFDE         	movff	??_ReadRun+2,postinc2
 11120  001184  C00A  FFDD         	movff	??_ReadRun+3,postdec2
 11121  001188  4A0C               	infsnz	ReadRun@add,f,c
 11122  00118A  2A0D               	incf	ReadRun@add+1,f,c
 11123                           
 11124                           ;eeprom.c: 69: sorted[0] = ReadEE(add++ *8);
 11125  00118C  C00C  F007         	movff	ReadRun@add,??_ReadRun
 11126  001190  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 11127  001194  90D8               	bcf	status,0,c
 11128  001196  3607               	rlcf	??_ReadRun,f,c
 11129  001198  3608               	rlcf	??_ReadRun+1,f,c
 11130  00119A  90D8               	bcf	status,0,c
 11131  00119C  3607               	rlcf	??_ReadRun,f,c
 11132  00119E  3608               	rlcf	??_ReadRun+1,f,c
 11133  0011A0  90D8               	bcf	status,0,c
 11134  0011A2  3607               	rlcf	??_ReadRun,f,c
 11135  0011A4  3608               	rlcf	??_ReadRun+1,f,c
 11136  0011A6  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 11137  0011AA  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 11138  0011AE  EC93  F011         	call	i2_ReadEE	;wreg free
 11139  0011B2  C003  FFD9         	movff	ReadRun@sorted,fsr2l
 11140  0011B6  C004  FFDA         	movff	ReadRun@sorted+1,fsr2h
 11141  0011BA  6EDF               	movwf	indf2,c
 11142  0011BC  4A0C               	infsnz	ReadRun@add,f,c
 11143  0011BE  2A0D               	incf	ReadRun@add+1,f,c
 11144                           
 11145                           ;eeprom.c: 70: sorted[1] = ReadEE(add++ *8);
 11146  0011C0  EE20 F001          	lfsr	2,1
 11147  0011C4  5003               	movf	ReadRun@sorted,w,c
 11148  0011C6  26D9               	addwf	fsr2l,f,c
 11149  0011C8  5004               	movf	ReadRun@sorted+1,w,c
 11150  0011CA  22DA               	addwfc	fsr2h,f,c
 11151  0011CC  C00C  F007         	movff	ReadRun@add,??_ReadRun
 11152  0011D0  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 11153  0011D4  90D8               	bcf	status,0,c
 11154  0011D6  3607               	rlcf	??_ReadRun,f,c
 11155  0011D8  3608               	rlcf	??_ReadRun+1,f,c
 11156  0011DA  90D8               	bcf	status,0,c
 11157  0011DC  3607               	rlcf	??_ReadRun,f,c
 11158  0011DE  3608               	rlcf	??_ReadRun+1,f,c
 11159  0011E0  90D8               	bcf	status,0,c
 11160  0011E2  3607               	rlcf	??_ReadRun,f,c
 11161  0011E4  3608               	rlcf	??_ReadRun+1,f,c
 11162  0011E6  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 11163  0011EA  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 11164  0011EE  EC93  F011         	call	i2_ReadEE	;wreg free
 11165  0011F2  6EDF               	movwf	indf2,c
 11166  0011F4  4A0C               	infsnz	ReadRun@add,f,c
 11167  0011F6  2A0D               	incf	ReadRun@add+1,f,c
 11168                           
 11169                           ;eeprom.c: 71: sorted[2] = ReadEE(add++ *8);
 11170  0011F8  EE20 F002          	lfsr	2,2
 11171  0011FC  5003               	movf	ReadRun@sorted,w,c
 11172  0011FE  26D9               	addwf	fsr2l,f,c
 11173  001200  5004               	movf	ReadRun@sorted+1,w,c
 11174  001202  22DA               	addwfc	fsr2h,f,c
 11175  001204  C00C  F007         	movff	ReadRun@add,??_ReadRun
 11176  001208  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 11177  00120C  90D8               	bcf	status,0,c
 11178  00120E  3607               	rlcf	??_ReadRun,f,c
 11179  001210  3608               	rlcf	??_ReadRun+1,f,c
 11180  001212  90D8               	bcf	status,0,c
 11181  001214  3607               	rlcf	??_ReadRun,f,c
 11182  001216  3608               	rlcf	??_ReadRun+1,f,c
 11183  001218  90D8               	bcf	status,0,c
 11184  00121A  3607               	rlcf	??_ReadRun,f,c
 11185  00121C  3608               	rlcf	??_ReadRun+1,f,c
 11186  00121E  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 11187  001222  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 11188  001226  EC93  F011         	call	i2_ReadEE	;wreg free
 11189  00122A  6EDF               	movwf	indf2,c
 11190  00122C  4A0C               	infsnz	ReadRun@add,f,c
 11191  00122E  2A0D               	incf	ReadRun@add+1,f,c
 11192                           
 11193                           ;eeprom.c: 72: sorted[3] = ReadEE(add++ *8);
 11194  001230  EE20 F003          	lfsr	2,3
 11195  001234  5003               	movf	ReadRun@sorted,w,c
 11196  001236  26D9               	addwf	fsr2l,f,c
 11197  001238  5004               	movf	ReadRun@sorted+1,w,c
 11198  00123A  22DA               	addwfc	fsr2h,f,c
 11199  00123C  C00C  F007         	movff	ReadRun@add,??_ReadRun
 11200  001240  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 11201  001244  90D8               	bcf	status,0,c
 11202  001246  3607               	rlcf	??_ReadRun,f,c
 11203  001248  3608               	rlcf	??_ReadRun+1,f,c
 11204  00124A  90D8               	bcf	status,0,c
 11205  00124C  3607               	rlcf	??_ReadRun,f,c
 11206  00124E  3608               	rlcf	??_ReadRun+1,f,c
 11207  001250  90D8               	bcf	status,0,c
 11208  001252  3607               	rlcf	??_ReadRun,f,c
 11209  001254  3608               	rlcf	??_ReadRun+1,f,c
 11210  001256  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 11211  00125A  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 11212  00125E  EC93  F011         	call	i2_ReadEE	;wreg free
 11213  001262  6EDF               	movwf	indf2,c
 11214  001264  4A0C               	infsnz	ReadRun@add,f,c
 11215  001266  2A0D               	incf	ReadRun@add+1,f,c
 11216  001268  0012               	return		;funcret
 11217  00126A                     __end_of_ReadRun:
 11218                           	opt stack 0
 11219                           pclatu	equ	0xFFB
 11220                           pclath	equ	0xFFA
 11221                           tblptru	equ	0xFF8
 11222                           tblptrh	equ	0xFF7
 11223                           tblptrl	equ	0xFF6
 11224                           tablat	equ	0xFF5
 11225                           prodh	equ	0xFF4
 11226                           prodl	equ	0xFF3
 11227                           intcon	equ	0xFF2
 11228                           intcon2	equ	0xFF1
 11229                           intcon3	equ	0xFF0
 11230                           postinc0	equ	0xFEE
 11231                           fsr0h	equ	0xFEA
 11232                           fsr0l	equ	0xFE9
 11233                           wreg	equ	0xFE8
 11234                           plusw1	equ	0xFE3
 11235                           fsr1h	equ	0xFE2
 11236                           fsr1l	equ	0xFE1
 11237                           indf2	equ	0xFDF
 11238                           postinc2	equ	0xFDE
 11239                           postdec2	equ	0xFDD
 11240                           plusw2	equ	0xFDB
 11241                           fsr2h	equ	0xFDA
 11242                           fsr2l	equ	0xFD9
 11243                           status	equ	0xFD8
 11244                           
 11245 ;; *************** function i2_ReadEE *****************
 11246 ;; Defined at:
 11247 ;;		line 16 in file "eeprom.c"
 11248 ;; Parameters:    Size  Location     Type
 11249 ;;  address         2    0[COMRAM] unsigned int 
 11250 ;; Auto vars:     Size  Location     Type
 11251 ;;		None
 11252 ;; Return value:  Size  Location     Type
 11253 ;;                  1    wreg      unsigned char 
 11254 ;; Registers used:
 11255 ;;		wreg, status,2
 11256 ;; Tracked objects:
 11257 ;;		On entry : 0/0
 11258 ;;		On exit  : 0/0
 11259 ;;		Unchanged: 0/0
 11260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11261 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11264 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11265 ;;Total ram usage:        2 bytes
 11266 ;; Hardware stack levels used:    1
 11267 ;; This function calls:
 11268 ;;		Nothing
 11269 ;; This function is called by:
 11270 ;;		_ReadRun
 11271 ;; This function uses a non-reentrant model
 11272 ;;
 11273                           
 11274                           	psect	text61
 11275  002326                     __ptext61:
 11276                           	opt stack 0
 11277  002326                     i2_ReadEE:
 11278                           	opt stack 23
 11279                           
 11280                           ;eeprom.c: 19: EEADRH = (unsigned char) (address >> 8);
 11281                           
 11282                           ;incstack = 0
 11283  002326  5002               	movf	i2ReadEE@address+1,w,c
 11284  002328  6EAA               	movwf	4010,c	;volatile
 11285                           
 11286                           ;eeprom.c: 20: EEADR = (unsigned char) address;
 11287  00232A  C001  FFA9         	movff	i2ReadEE@address,4009	;volatile
 11288                           
 11289                           ;eeprom.c: 22: EECON1bits.EEPGD = 0;
 11290  00232E  9EA6               	bcf	4006,7,c	;volatile
 11291                           
 11292                           ;eeprom.c: 23: EECON1bits.CFGS = 0;
 11293  002330  9CA6               	bcf	4006,6,c	;volatile
 11294                           
 11295                           ;eeprom.c: 24: EECON1bits.RD = 1;
 11296  002332  80A6               	bsf	4006,0,c	;volatile
 11297  002334                     i2l422:
 11298  002334  B0A6               	btfsc	4006,0,c	;volatile
 11299  002336  D7FE               	goto	i2l422
 11300                           
 11301                           ;eeprom.c: 30: return EEDATA;
 11302  002338  50A8               	movf	4008,w,c	;volatile
 11303  00233A  0012               	return	
 11304  00233C                     __end_ofi2_ReadEE:
 11305                           	opt stack 0
 11306                           pclatu	equ	0xFFB
 11307                           pclath	equ	0xFFA
 11308                           tblptru	equ	0xFF8
 11309                           tblptrh	equ	0xFF7
 11310                           tblptrl	equ	0xFF6
 11311                           tablat	equ	0xFF5
 11312                           prodh	equ	0xFF4
 11313                           prodl	equ	0xFF3
 11314                           intcon	equ	0xFF2
 11315                           intcon2	equ	0xFF1
 11316                           intcon3	equ	0xFF0
 11317                           postinc0	equ	0xFEE
 11318                           fsr0h	equ	0xFEA
 11319                           fsr0l	equ	0xFE9
 11320                           wreg	equ	0xFE8
 11321                           plusw1	equ	0xFE3
 11322                           fsr1h	equ	0xFE2
 11323                           fsr1l	equ	0xFE1
 11324                           indf2	equ	0xFDF
 11325                           postinc2	equ	0xFDE
 11326                           postdec2	equ	0xFDD
 11327                           plusw2	equ	0xFDB
 11328                           fsr2h	equ	0xFDA
 11329                           fsr2l	equ	0xFD9
 11330                           status	equ	0xFD8
 11331                           
 11332 ;; *************** function _back *****************
 11333 ;; Defined at:
 11334 ;;		line 57 in file "eeprom.c"
 11335 ;; Parameters:    Size  Location     Type
 11336 ;;  runs            1    wreg     unsigned char 
 11337 ;; Auto vars:     Size  Location     Type
 11338 ;;  runs            1    0[COMRAM] unsigned char 
 11339 ;;  result          1    1[COMRAM] unsigned char 
 11340 ;; Return value:  Size  Location     Type
 11341 ;;                  1    wreg      unsigned char 
 11342 ;; Registers used:
 11343 ;;		wreg, status,2, status,0
 11344 ;; Tracked objects:
 11345 ;;		On entry : 0/0
 11346 ;;		On exit  : 0/0
 11347 ;;		Unchanged: 0/0
 11348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11350 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11352 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11353 ;;Total ram usage:        2 bytes
 11354 ;; Hardware stack levels used:    1
 11355 ;; This function calls:
 11356 ;;		Nothing
 11357 ;; This function is called by:
 11358 ;;		_ReadRun
 11359 ;; This function uses a non-reentrant model
 11360 ;;
 11361                           
 11362                           	psect	text62
 11363  0022F2                     __ptext62:
 11364                           	opt stack 0
 11365  0022F2                     _back:
 11366                           	opt stack 23
 11367                           
 11368                           ;incstack = 0
 11369                           ;back@runs stored from wreg
 11370  0022F2  6E01               	movwf	back@runs,c
 11371                           
 11372                           ;eeprom.c: 59: unsigned char result = Latest + 4 - runs;
 11373  0022F4  5001               	movf	back@runs,w,c
 11374  0022F6  0800               	sublw	0
 11375  0022F8  0100               	movlb	0	; () banked
 11376  0022FA  25C4               	addwf	_Latest& (0+255),w,b
 11377  0022FC  0F04               	addlw	4
 11378  0022FE  6E02               	movwf	back@result,c
 11379                           
 11380                           ;eeprom.c: 60: if (result > 4) {
 11381  002300  0E04               	movlw	4
 11382  002302  6402               	cpfsgt	back@result,c
 11383  002304  D002               	goto	i2l3366
 11384                           
 11385                           ; BSR set to: 0
 11386                           ;eeprom.c: 61: result -= 4;
 11387  002306  0E04               	movlw	4
 11388  002308  5E02               	subwf	back@result,f,c
 11389  00230A                     i2l3366:
 11390                           
 11391                           ; BSR set to: 0
 11392                           ;eeprom.c: 62: }
 11393                           ;eeprom.c: 63: return result;
 11394  00230A  5002               	movf	back@result,w,c
 11395  00230C  0012               	return	
 11396  00230E                     __end_of_back:
 11397                           	opt stack 0
 11398                           pclatu	equ	0xFFB
 11399                           pclath	equ	0xFFA
 11400                           tblptru	equ	0xFF8
 11401                           tblptrh	equ	0xFF7
 11402                           tblptrl	equ	0xFF6
 11403                           tablat	equ	0xFF5
 11404                           prodh	equ	0xFF4
 11405                           prodl	equ	0xFF3
 11406                           intcon	equ	0xFF2
 11407                           intcon2	equ	0xFF1
 11408                           intcon3	equ	0xFF0
 11409                           postinc0	equ	0xFEE
 11410                           fsr0h	equ	0xFEA
 11411                           fsr0l	equ	0xFE9
 11412                           wreg	equ	0xFE8
 11413                           plusw1	equ	0xFE3
 11414                           fsr1h	equ	0xFE2
 11415                           fsr1l	equ	0xFE1
 11416                           indf2	equ	0xFDF
 11417                           postinc2	equ	0xFDE
 11418                           postdec2	equ	0xFDD
 11419                           plusw2	equ	0xFDB
 11420                           fsr2h	equ	0xFDA
 11421                           fsr2l	equ	0xFD9
 11422                           status	equ	0xFD8
 11423                           pclatu	equ	0xFFB
 11424                           pclath	equ	0xFFA
 11425                           tblptru	equ	0xFF8
 11426                           tblptrh	equ	0xFF7
 11427                           tblptrl	equ	0xFF6
 11428                           tablat	equ	0xFF5
 11429                           prodh	equ	0xFF4
 11430                           prodl	equ	0xFF3
 11431                           intcon	equ	0xFF2
 11432                           intcon2	equ	0xFF1
 11433                           intcon3	equ	0xFF0
 11434                           postinc0	equ	0xFEE
 11435                           fsr0h	equ	0xFEA
 11436                           fsr0l	equ	0xFE9
 11437                           wreg	equ	0xFE8
 11438                           plusw1	equ	0xFE3
 11439                           fsr1h	equ	0xFE2
 11440                           fsr1l	equ	0xFE1
 11441                           indf2	equ	0xFDF
 11442                           postinc2	equ	0xFDE
 11443                           postdec2	equ	0xFDD
 11444                           plusw2	equ	0xFDB
 11445                           fsr2h	equ	0xFDA
 11446                           fsr2l	equ	0xFD9
 11447                           status	equ	0xFD8
 11448                           
 11449                           	psect	rparam
 11450  0000                     pclatu	equ	0xFFB
 11451                           pclath	equ	0xFFA
 11452                           tblptru	equ	0xFF8
 11453                           tblptrh	equ	0xFF7
 11454                           tblptrl	equ	0xFF6
 11455                           tablat	equ	0xFF5
 11456                           prodh	equ	0xFF4
 11457                           prodl	equ	0xFF3
 11458                           intcon	equ	0xFF2
 11459                           intcon2	equ	0xFF1
 11460                           intcon3	equ	0xFF0
 11461                           postinc0	equ	0xFEE
 11462                           fsr0h	equ	0xFEA
 11463                           fsr0l	equ	0xFE9
 11464                           wreg	equ	0xFE8
 11465                           plusw1	equ	0xFE3
 11466                           fsr1h	equ	0xFE2
 11467                           fsr1l	equ	0xFE1
 11468                           indf2	equ	0xFDF
 11469                           postinc2	equ	0xFDE
 11470                           postdec2	equ	0xFDD
 11471                           plusw2	equ	0xFDB
 11472                           fsr2h	equ	0xFDA
 11473                           fsr2l	equ	0xFD9
 11474                           status	equ	0xFD8
 11475                           
 11476                           	psect	temp
 11477  00007E                     btemp:
 11478                           	opt stack 0
 11479  00007E                     	ds	1
 11480  0000                     int$flags	set	btemp
 11481                           pclatu	equ	0xFFB
 11482                           pclath	equ	0xFFA
 11483                           tblptru	equ	0xFF8
 11484                           tblptrh	equ	0xFF7
 11485                           tblptrl	equ	0xFF6
 11486                           tablat	equ	0xFF5
 11487                           prodh	equ	0xFF4
 11488                           prodl	equ	0xFF3
 11489                           intcon	equ	0xFF2
 11490                           intcon2	equ	0xFF1
 11491                           intcon3	equ	0xFF0
 11492                           postinc0	equ	0xFEE
 11493                           fsr0h	equ	0xFEA
 11494                           fsr0l	equ	0xFE9
 11495                           wreg	equ	0xFE8
 11496                           plusw1	equ	0xFE3
 11497                           fsr1h	equ	0xFE2
 11498                           fsr1l	equ	0xFE1
 11499                           indf2	equ	0xFDF
 11500                           postinc2	equ	0xFDE
 11501                           postdec2	equ	0xFDD
 11502                           plusw2	equ	0xFDB
 11503                           fsr2h	equ	0xFDA
 11504                           fsr2l	equ	0xFD9
 11505                           status	equ	0xFD8


Data Sizes:
    Strings     529
    Constant    18
    Data        0
    BSS         44
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    108     125
    BANK0           128     42      69
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_44(CODE[17]), STR_43(CODE[17]), STR_42(CODE[18]), STR_41(CODE[22]), 
		 -> STR_40(CODE[4]), STR_39(CODE[3]), STR_38(CODE[4]), STR_37(CODE[5]), 
		 -> STR_36(CODE[4]), STR_35(CODE[18]), STR_34(CODE[20]), STR_33(CODE[16]), 
		 -> STR_32(CODE[21]), STR_31(CODE[16]), STR_30(CODE[21]), STR_29(CODE[16]), 
		 -> STR_28(CODE[20]), STR_27(CODE[16]), STR_26(CODE[21]), STR_25(CODE[23]), 
		 -> STR_24(CODE[24]), STR_23(CODE[21]), STR_22(CODE[24]), STR_21(CODE[24]), 
		 -> STR_20(CODE[25]), STR_19(CODE[19]), STR_18(CODE[25]), STR_17(CODE[25]), 
		 -> STR_16(CODE[27]), STR_15(CODE[3]), STR_14(CODE[3]), STR_13(CODE[3]), 
		 -> STR_12(CODE[5]), STR_11(CODE[3]), STR_10(CODE[3]), STR_9(CODE[3]), 
		 -> STR_8(CODE[4]), STR_7(CODE[3]), STR_6(CODE[3]), STR_5(CODE[3]), 
		 -> STR_4(CODE[4]), STR_3(CODE[5]), STR_2(CODE[24]), STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    WriteRun@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(COMRAM[4]), 

    ReadRun@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> PermLog@sorted(COMRAM[4]), 

    ReadRun@time	PTR unsigned int  size(2) Largest target is 2
		 -> PermLog@time(COMRAM[2]), 

    check9@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(COMRAM[4]), 

    checkC@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(COMRAM[4]), 

    checkAA@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(COMRAM[4]), 

    stopMoving$557	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_35(CODE[18]), STR_34(CODE[20]), 

    shake@port	PTR int  size(2) Largest target is 0
		 -> simulate@portShake(COMRAM[0]), 

    CCW90@port	PTR int  size(2) Largest target is 6
		 -> simulate@portCCW(COMRAM[6]), 

    CW90@port	PTR int  size(2) Largest target is 6
		 -> simulate@portCW(COMRAM[6]), 

    PWMC@port	PTR int  size(2) Largest target is 6
		 -> intrpt@port(COMRAM[6]), simulate@portShake(COMRAM[0]), simulate@portCCW(COMRAM[6]), simulate@portCW(COMRAM[6]), 

    getTime@time	PTR unsigned char  size(2) Largest target is 7
		 -> time(COMRAM[7]), 

    showInfo@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> PermLog@sorted(COMRAM[4]), simulate@sorted(COMRAM[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _intrpt in COMRAM

    _intrpt->_simulate
    _simulate->_check9
    _simulate->_checkAA
    _simulate->_checkC
    _simulate->_showInfo
    i2_getTime->i2_I2C_Master_Read
    i2_getTime->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    _stopMoving->i2_printf
    _shake->_PWMC
    _checkC->_checkV
    _checkAA->_checkV
    _check9->_checkV
    _printV->i2_printf
    _checkV->___ftge
    ___ftmul->___awtoft
    ___ftge->___ftmul
    ___awtoft->___ftpack
    _WriteRun->i2___wmul
    _HexDecToDec2->i2___wmul
    _CW90->_PWMC
    _CCW90->_PWMC
    _PWMC->___awdiv
    _PermLog->_showInfo
    _showInfo->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble
    _ReadRun->_back
    _ReadRun->i2_ReadEE

Critical Paths under _main in BANK0

    _main->_showRTC
    _showRTC->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _getTime->_I2C_Master_Read
    _getTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _initialize->_I2C_Master_Init
    _initLatest->_ReadEE
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _intrpt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _intrpt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _intrpt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _intrpt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _intrpt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _intrpt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _intrpt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _intrpt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _intrpt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _intrpt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _intrpt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _intrpt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _intrpt in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _intrpt in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _intrpt in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _intrpt in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   10331
                                             40 BANK0      2     2      0
                         _initialize
                            _lcdInst
                             _printf
                            _showRTC
 ---------------------------------------------------------------------------------
 (1) _showRTC                                              2     2      0    4930
                                             38 BANK0      2     2      0
                            _getTime
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              30    22      8    4322
                                             12 BANK0     26    18      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     517
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _getTime                                              3     1      2     473
                                              3 BANK0      3     1      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2     214
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0     944
                    _I2C_Master_Init
                            _initLCD
                         _initLatest
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _initLatest                                           0     0      0     298
                             _ReadEE
 ---------------------------------------------------------------------------------
 (3) _ReadEE                                               2     0      2     298
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _intrpt                                              23    23      0   75600
                                             85 COMRAM    23    23      0
                               _PWMC
                            _PermLog
                           _simulate
                         _stopMoving
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (6) _simulate                                            38    38      0   60755
                                             47 COMRAM    38    38      0
                              _CCW90
                               _CW90
                       _HexDecToDec2
                           _WriteRun
                      _captureKeypad
                             _check9
                            _checkAA
                             _checkC
                              _shake
                           _showInfo
                         _stopMoving
                           i2___wmul
                          i2_getTime
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) i2_getTime                                            3     1      2     283
                                              3 COMRAM     3     1      2
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Write                                   2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _stopMoving                                           3     3      0    3419
                                             34 COMRAM     3     3      0
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _shake                                                8     6      2    3233
                                             21 COMRAM     8     6      2
                               _PWMC
 ---------------------------------------------------------------------------------
 (7) _checkC                                               6     4      2   12169
                                             41 COMRAM     6     4      2
                             _checkV
                             _printV
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _checkAA                                              6     4      2   12169
                                             41 COMRAM     6     4      2
                             _checkV
                             _printV
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _check9                                               6     4      2   12169
                                             41 COMRAM     6     4      2
                             _checkV
                             _printV
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) _printV                                               2     0      2    3452
                                             34 COMRAM     2     0      2
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) _checkV                                               5     3      2    5326
                                             36 COMRAM     5     3      2
                                 _AD
                           ___awtoft
                             ___ftge
                            ___ftmul
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             15     9      6    2548
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftge                                               9     3      6     264
                                             27 COMRAM     9     3      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             4     1      3    2211
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    1992
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) _AD                                                   5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (7) _WriteRun                                             8     4      4    1621
                                              6 COMRAM     8     4      4
                            _WriteEE
                           i2___wmul
 ---------------------------------------------------------------------------------
 (8) _WriteEE                                              3     0      3     834
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (7) _HexDecToDec2                                         9     7      2     711
                                              6 COMRAM     9     7      2
                           i2___wmul
 ---------------------------------------------------------------------------------
 (7) _CW90                                                 8     6      2    3167
                                             21 COMRAM     8     6      2
                               _PWMC
 ---------------------------------------------------------------------------------
 (7) _CCW90                                                8     6      2    3167
                                             21 COMRAM     8     6      2
                               _PWMC
 ---------------------------------------------------------------------------------
 (8) _PWMC                                                40    34      6    3015
                                              8 COMRAM    13     7      6
                            ___awdiv
 ---------------------------------------------------------------------------------
 (9) ___awdiv                                              8     4      4     428
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (6) _PermLog                                             10    10      0    8112
                                             47 COMRAM    10    10      0
                            _ReadRun
                      _captureKeypad
                           _showInfo
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _showInfo                                            13     9      4    3876
                                             34 COMRAM    13     9      4
                      _captureKeypad
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) i2_printf                                            26    22      4    3216
                                             12 COMRAM    22    18      4
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (8) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (8) i2___wmul                                             6     2      4     365
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (8) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _captureKeypad                                        3     1      2      23
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (7) _ReadRun                                             11     7      4     618
                                              2 COMRAM    11     7      4
                               _back
                           i2_ReadEE
 ---------------------------------------------------------------------------------
 (8) i2_ReadEE                                             2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _back                                                 2     2      0      68
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialize
     _I2C_Master_Init
       ___lldiv
     _initLCD
       _lcdInst
         _lcdNibble
     _initLatest
       _ReadEE
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
   _showRTC
     _getTime
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble

 _intrpt (ROOT)
   _PWMC
     ___awdiv
   _PermLog
     _ReadRun
       _back
       i2_ReadEE
     _captureKeypad
     _showInfo
       _captureKeypad
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _simulate
     _CCW90
       _PWMC
         ___awdiv
     _CW90
       _PWMC
         ___awdiv
     _HexDecToDec2
       i2___wmul
     _WriteRun
       _WriteEE
       i2___wmul
     _captureKeypad
     _check9
       _checkV
         _AD
         ___awtoft
           ___ftpack
         ___ftge
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       _printV
         i2_printf
           i2___lwdiv
           i2___lwmod
             i2___lwdiv (ARG)
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _checkAA
       _checkV
         _AD
         ___awtoft
           ___ftpack
         ___ftge
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       _printV
         i2_printf
           i2___lwdiv
           i2___lwmod
             i2___lwdiv (ARG)
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _checkC
       _checkV
         _AD
         ___awtoft
           ___ftpack
         ___ftge
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       _printV
         i2_printf
           i2___lwdiv
           i2___lwmod
             i2___lwdiv (ARG)
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _shake
       _PWMC
         ___awdiv
     _showInfo
       _captureKeypad
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _stopMoving
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2___wmul
     i2_getTime
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _stopMoving
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2A      45       5       53.9%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     6C      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C2      34        0.0%
DATA                 0      0      C2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Apr 03 15:19:04 2017

         i2_I2C_Master_Start 23C6           i2_I2C_Master_Write 23A4                           _AD 21AA  
               ___awdiv@sign 0006          ___wmul@multiplicand 0082           i2___lwdiv@dividend 0001  
                __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                  __CFG_OSC$HS 000000  
                        ?_AD 0001                          l422 231E                          l374 233C  
                        l943 1AA8                          l953 1E22                          l890 16C4  
               __CFG_CPB$OFF 000000                          _PEN 007E2A                 __CFG_CPD$OFF 000000  
                        _SEN 007E28          ?i2_I2C_Master_Start 0001          ?i2_I2C_Master_Write 0002  
                        wreg 000FE8                         ??_AD 0003                 __CFG_LVP$OFF 000000  
               __CFG_WDT$OFF 000000                         l3306 2178                         l3420 1A6A  
                       l3406 16B2                         l3416 1A58                         l3440 1DF0  
                       l3418 1A64                         l3522 0020                         l3428 1A9A  
                       l3444 1E14                         l3436 1DDE                         l3604 026A  
                       l3620 02A6                         l3532 0050                         l3438 1DEA  
                       l3606 0270                         l3622 02BE                         l3526 0034  
                       l3640 033C                         l3632 0318                         l3552 0124  
                       l3528 0046                         l4248 1FD4                         l3394 1648  
                       l3378 21A0                         l3634 0322                         l3562 0162  
                       l3554 0130                         l3546 00F8                         l3538 0080  
                       l3396 1658                         l3660 03E4                         l3652 037E  
                       l3628 02E0                         l3564 017A                         l3556 0136  
                       l3548 00FE                         l3572 019A                         l3398 165E  
                       l3750 196A                         l3670 0452                         l3646 0358  
                       l3590 022E                         l3558 014E                         l3574 01D2  
                       l3760 1998                         l3648 0364                         l3656 0392  
                       l3592 0234                         l3568 0192                         l3672 045E  
                       l3754 1974                         l3658 0398                         l3666 0432  
                       l3586 0212                         l3668 044A                         _ADFM 007E07  
                       _ADON 007E10                         _CW90 1C86                         STR_1 FFD6  
                       STR_2 FE9B                         STR_3 FFD1                         STR_4 FFF1  
                       STR_5 FFF8                         STR_6 FFF5                         STR_7 FFFB  
                       STR_8 FFED                         STR_9 FFF8                         _LATA 000F89  
                       _LATB 000F8A                         _LATC 000F8B                         _LATD 000F8C  
                       _LATE 000F8D                         u2500 2176                         u3507 1DC2  
                       u2725 1E5C                         u3437 1FB6                         u3447 191C  
                       u3457 202C                         u3467 2060                         u3477 1D82  
                       u3487 1D8C                         u3497 1DB8                         _RCEN 007E2B  
                       _PWMC 1450                checkAA@sorted 002A                         _back 22F2  
                       _main 1F8E                 ___ftpack@arg 0001                         _mode 0075  
               ___ftpack@exp 0004                         _time 0077                         fsr0h 000FEA  
                       fsr1h 000FE2           i2___lwdiv@quotient 0005                         fsr2h 000FDA  
                       fsr0l 000FE9                         indf2 000FDF                         fsr1l 000FE1  
                       fsr2l 000FD9                         btemp 007E         ??i2_I2C_Master_Start 0002  
       ??i2_I2C_Master_Write 0004                         prodh 000FF4                         prodl 000FF3  
            ReadRun@backruns 000B                         start 000E                __CFG_IESO$OFF 000000  
       __end_of_HexDecToDec2 2024                   ReadRun@add 000C              __end_ofi2_putch 238E  
              __CFG_MCLRE$ON 000000                 ___ftmul@cntr 001A                 ___param_bank 000000  
               ___ftmul@sign 001B                   i2getTime@i 0006                  i2_lcdNibble 1EE6  
            __end_of_ReadRun 126A              __end_of_PermLog 161A                        ?_CW90 0016  
           ?_I2C_Master_Init 008D             ?_I2C_Master_Read 0001                        ?_PWMC 0009  
           ?_I2C_Master_Wait 0001             ?_I2C_Master_Stop 0001                        ?_back 0001  
                      ?_main 0001                        _ACKEN 007E2C                        _ACKDT 007E2D  
                      _CCW90 1CF4              __end_of___awdiv 1A3A                        _EEADR 000FA9  
                      STR_10 FFF5                        STR_11 FFFB                        STR_12 FFE4  
                      STR_20 FE08                        STR_13 FFF8                        STR_21 FE83  
                      STR_14 FFF5                        STR_30 FF0A                        STR_22 FE53  
                      STR_31 FFC6                        STR_15 FFFB                        STR_23 FF1F  
                      STR_40 FFF1                        STR_32 FEE0                        STR_24 FE6B  
                      STR_16 FDED                        STR_33 FFC6                        STR_41 FECA  
                      STR_25 FEB3                        STR_17 FE21                        STR_42 FF6F  
                      STR_34 FF34                        STR_26 FEF5                        STR_18 FE3A  
                      STR_27 FFC6                        STR_43 FFA4                        STR_35 FF81  
                      STR_19 FF5C                        STR_36 FFE9                        STR_44 FFB5  
                      STR_28 FF48                        STR_29 FFC6                        STR_37 FFDF  
                      STR_45 FF93                        STR_38 FFE5                        STR_39 FFEE  
            __end_of_WriteEE 226E              __end_of___lldiv 16D6              __end_of___ftmul 135E  
            ___awdiv@divisor 0003                        _LATC0 007C58                        _LATC1 007C59  
                      _LATC2 007C5A                        _LATC6 007C5E              __end_of___lwdiv 1AB2  
                      i2l113 04F0              __end_of___lwmod 1E2C                        i2l123 062A  
                      i2l140 0F64                        i2l310 21B8                        i2l223 22D6  
                      i2l119 05CE                        i2l143 0E54                        i2l152 0EA6  
                      i2l226 22E2                        i2l162 0F98                        i2l155 0F9A  
                      i2l422 2334                        i2l342 1BDC                        i2l343 1C0A  
                      i2l335 1B66                        i2l167 0F94                        i2l336 1B94  
                      i2l329 1C7C                        i2l268 1488                        i2l428 2264  
                      i2l292 20E2                        i2l445 1612                        i2l374 2350  
                      i2l760 1764                        i2l943 1F84                        i2l953 20A2  
            ___awdiv@counter 0005              __end_of_checkAA 1C86                        _PORTB 000F81  
                      _TRISA 000F92                        _TRISB 000F93                        _TRISC 000F94  
                      _TRISD 000F95                        _TRISE 000F96                __CFG_PWRT$OFF 000000  
              __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000                simulate@F3107 00B6  
              simulate@F3109 00B0                __CFG_WRT2$OFF 000000                simulate@F3095 0071  
              simulate@F3097 006D                simulate@F3099 00C0                __CFG_WRT3$OFF 000000  
            __end_of_lcdInst 2382               __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000  
            __end_of_getTime 19B6               __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000  
             __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000  
              __CFG_WRTD$OFF 000000              __end_of_initLCD 206A               __CFG_EBTRB$OFF 000000  
                 i2isdigit@c 0003                ___awtoft@sign 000C              __end_of_dpowers FDE5  
           __end_ofi2_ReadEE 233C              __end_of_isdigit 21AA                        _shake 135E  
              ___ftpack@sign 0005                        _putch 2362                        pclath 000FFA  
            __end_of_showRTC 192C                        tablat 000FF5             __end_ofi2___wmul 2294  
                      plusw1 000FE3                        plusw2 000FDB                        status 000FD8  
              simulate@start 0039               __CFG_PBADEN$ON 000000                i2printf@width 0020  
           __end_ofi2_printf 0BD0           __size_ofi2___lwdiv 0052                 __end_of_CW90 1CF4  
         __size_ofi2___lwmod 0042                  ReadRun@time 0005                 __end_of_PWMC 1542  
            __initialization 21FC                 __end_of_back 230E           __size_ofi2_lcdInst 000C  
               __end_of_main 1FDC           __size_ofi2_getTime 0076                   i2printf@ap 0018  
                 i2printf@cp 0015                ReadEE@address 0080                       ??_CW90 0018  
         __size_ofi2_isdigit 001E                       ??_PWMC 000F                       ??_back 0001  
                     ??_main 00A8                       ?_CCW90 0016                __activetblptr 000002  
              checkV@channel 0027            ?_I2C_Master_Start 0001            ?_I2C_Master_Write 0081  
                  CCW90@port 0016           ??_I2C_Master_Start 0081                       _ADCON0 000FC2  
                     _ADCON1 000FC1           ??_I2C_Master_Write 0083                       _ADRESH 000FC4  
                     _EEADRH 000FAA                       _ADRESL 000FC3                       _EEDATA 000FA8  
                     ?_shake 0016                       _EECON2 000FA7             ___awdiv@dividend 0001  
            i2lcdNibble@data 0002             __end_of___awtoft 211C                       ?_putch 0001  
           __end_of___ftpack 1784              i2lcdNibble@temp 0001                       _INT1IE 007F83  
                     _INT1IF 007F80             __end_of_WriteRun 1138                       _INT2IE 007F84  
                     _INT2IF 007F81                       _CVRCON 000FB5                       i2l3002 19CA  
                     i2l3100 08F4                       i2l3110 092C                       i2l3014 19F0  
                     i2l3030 1A22                       i2l3200 0ADC                       i2l3120 0962  
                     i2l3104 090A                       i2l3016 19F8                       i2l3008 19DA  
                     i2l3210 0B08                       i2l3114 093E                       i2l3106 0914  
                     i2l3034 1A30                       i2l3026 1A18                       i2l3018 19FC  
                     i2l3212 0B4C                       i2l3220 0BA8                       i2l3204 0AF0  
                     i2l3116 0950                       i2l3108 091A                       i2l3124 0968  
                     i2l3222 0BAE                       i2l3142 09EC                       i2l3126 099C  
                     i2l3046 20F8                       i2l3054 17B4                       i2l4014 05C2  
                     i2l4006 05A0                       i2l3208 0B02                       i2l3144 09F0  
                     i2l3080 085E                       i2l3224 0BB6                       i2l3240 147A  
                     i2l3064 1810                       i2l4032 061E                       i2l4024 05FC  
                     i2l3218 0B92                       i2l3138 09D2                       i2l3090 0892  
                     i2l3074 0840                       i2l3058 17E4                       i2l4050 067A  
                     i2l4042 0658                       i2l4202 0F06                       i2l3180 0A7C  
                     i2l3156 0A1C                       i2l3172 0A4C                       i2l3084 0864  
                     i2l4140 158A                       i2l4124 1546                       i2l3260 14E2  
                     i2l3252 14B2                       i2l3324 1898                       i2l3316 1834  
                     i2l3332 21E6                       i2l4052 0686                       i2l4204 0F34  
                     i2l4212 0F46                       i2l3158 0A20                       i2l3174 0A62  
                     i2l3078 0850                       i2l3270 151C                       i2l3318 183A  
                     i2l4222 0F7C                       i2l3192 0ABE                       i2l3184 0AA0  
                     i2l4136 157E                       i2l4216 0F6C                       i2l3186 0AA8  
                     i2l3098 08F0                       i2l3274 152A                       i2l4058 06A8  
                     i2l3268 1512                       i2l4180 0EB2                       i2l4172 0E5A  
                     i2l3366 230A                       i2l2910 2098                       i2l2902 2078  
                     i2l3198 0AD4                       i2l4158 160E                       i2l3278 153A  
                     i2l2830 171C                       i2l2822 16E6                       i2l3710 1C4E  
                     i2l4094 07CA                       i2l2904 2080                       i2l3712 1C5E  
                     i2l3472 2242                       i2l4192 0EF4                       i2l4176 0E80  
                     i2l2906 2084                       i2l2834 1732                       i2l2826 16F4  
                     i2l4186 0EDE                       i2l2836 1750                       i2l2828 16FE  
                     i2l3708 1C44                       i2l3830 0C04                       i2l2838 175A  
                     i2l3910 1AF0                       i2l2872 22CC                       i2l3832 0C12  
                     i2l2952 1292                       i2l3680 1BCE                       i2l2882 1F52  
                     i2l3850 0CF8                       i2l3682 1BEC                       i2l3906 1AE8  
                     i2l2884 1F5A                       i2l3844 0CC0                       i2l2972 12EC  
                     i2l3916 1B0C                       i2l2894 1F7A                       i2l2886 1F5E  
                     i2l3862 0D70                       i2l3838 0C40                       i2l3870 0DB6  
                     i2l2982 1314                       i2l2958 12BA                       i2l3694 1B58  
                     i2l3782 20C8                       i2l3856 0D34                       i2l3872 0DEE  
                     i2l2976 12FC                       i2l3696 1B76                       i2l2986 1324  
                     i2l3868 0DAC                       i2l3796 0FF8                       i2l3972 04DE  
                     u191_41 127A                       u193_41 12A2                    ??i2_putch 0003  
                     _SSPADD 000FC8                       _TRISC3 007CA3                       _TRISC4 007CA4  
                     _SSPBUF 000FC9                    AD@channel 0005                checkV@voltage 0028  
                  ??_ReadRun 0007                       _ReadEE 230E                    ??_PermLog 0030  
                     _Latest 00C4               __CFG_XINST$OFF 000000        __end_of_captureKeypad 22F2  
                     ___ftge 1784                       ___wmul 211C                       _check9 1B9E  
                     _checkC 1B28                    ??___awdiv 0005                       _checkV 1814  
             __CFG_STVREN$ON 000000                    ??_WriteEE 0004                    ??___lldiv 0088  
                  ??___ftmul 0013                    ??___lwdiv 0084                    ??___lwmod 008B  
                  ??_checkAA 002C                       clear_0 2202                       clear_1 220E  
           ___awdiv@quotient 0007                       _intrpt 0008                       _printV 21D4  
                  ??_lcdInst 0082                       _printf 0012                    ??_getTime 0085  
      ___ftmul@f3_as_product 0017                  PermLog@time 0037                    ??_initLCD 0083  
                  ??_isdigit 0080             __end_of_showInfo 0DF8            __end_ofi2___lwdiv 1F8E  
               __mediumconst FDDA            __end_ofi2___lwmod 20AC                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8             __end_of_simulate 0836  
                  ??_showRTC 00A6            __end_ofi2_lcdInst 239A            __end_ofi2_getTime 1B28  
             simulate@period 0050               simulate@portCW 0044        __size_of_HexDecToDec2 0048  
          __end_ofi2_isdigit 22D4               simulate@sorted 0052                   __accesstop 0080  
    __end_of__initialization 2214                   ___ftge@ff1 001C                   ___ftge@ff2 001F  
              __end_of_CCW90 1D62                ___rparam_used 000001                   ___awtoft@c 0009  
                 ___ftmul@f1 000D                   ___ftmul@f2 0010           i2___lwmod@dividend 0008  
             __pcstackCOMRAM 0001                __end_of_shake 1450                    ?i2_ReadEE 0001  
              __end_of_putch 2372                  i2printf@idx 0017                  i2printf@len 001A  
                i2printf@val 001D                   __end_of_AD 21D4                      ??_CCW90 0018  
                  ?i2___wmul 0001           __size_of_lcdNibble 0068                  i2putch@data 0003  
               _HexDecToDec2 1FDC            HexDecToDec2@digit 000E                    ?i2_printf 000D  
          HexDecToDec2@tenth 000C                  intrpt@F3118 00AA                      ??_shake 0018  
                    ??_putch 0082                   back@result 0002                   __pbssBANK0 00AA  
                    ?_ReadEE 0080                 stopMoving@em 0025                      ?___ftge 001C  
               WriteRun@time 0009                 ?i2_lcdNibble 0001                      ?___wmul 0080  
                    ?_check9 002A                      ?_checkC 002A                      ?_checkV 0025  
                 ??i2_ReadEE 0003                      ?_intrpt 0001                    ?___awtoft 0009  
                  ?___ftpack 0001                      ?_printV 0023                      ?_printf 008C  
                  ?_WriteRun 0007                   ??i2___wmul 0005               WriteRun@sorted 0007  
                    _INTEDG2 007F8C                   ??i2_printf 0011                      _SSPCON1 000FC6  
                    _SSPCON2 000FC5                      _SSPSTAT 000FC7                      i2_putch 2382  
             _stopMoving$557 0023  __size_ofi2_I2C_Master_Start 0008            __end_of_lcdNibble 1DCA  
                    _ReadRun 1138  __size_ofi2_I2C_Master_Write 000A                      _PermLog 1542  
                    __Hparam 0000              __size_of_ReadEE 0018                      __Lparam 0000  
                 _initLatest 2294                    ?_showInfo 0023              __size_of___ftge 0090  
                  ?_simulate 0001                      ___awdiv 19B6                      _WriteEE 2248  
                    ___lldiv 161A              __size_of___wmul 0036                      ___ftmul 126A  
            __size_of_check9 0076              __size_of_checkC 0076              __size_of_checkV 008E  
                    ___lwdiv 1A3A                      ___lwmod 1DCA                      _checkAA 1C14  
                    __pcinit 21FC                   ??___awtoft 000C                   ??___ftpack 0006  
                    __ramtop 1000                   _initialize 1E8C              __size_of_intrpt 0FCE  
                    _lcdInst 2372                   ??_WriteRun 000B                      __ptext0 1F8E  
                    __ptext1 18A2                      __ptext2 0012                      __ptext3 2362  
                    _getTime 192C                      __ptext4 2180                      __ptext5 211C  
                    __ptext6 1DCA                      __ptext7 1A3A                      __ptext8 192C  
                    __ptext9 239A              __size_of_printV 0028                 PermLog@F3082 00BC  
            __size_of_printf 046A                      check9@V 002E                      checkC@V 002E  
                    _initLCD 2024            __end_of_hexpowers FDED                      _dpowers FDDB  
                    _isdigit 2180     __size_of_I2C_Master_Init 0060     __size_of_I2C_Master_Read 002E  
                    _showRTC 18A2     __size_of_I2C_Master_Wait 0014     __size_of_I2C_Master_Stop 0008  
             __pintcode_body 0DF8         end_of_initialization 2214                __Lmediumconst FDDA  
                    int_func 0DF8          i2___wmul@multiplier 0001    __size_of_I2C_Master_Start 0008  
  __size_of_I2C_Master_Write 000A              ___lldiv@divisor 0084              ___lldiv@counter 008C  
                  _PWMC$1394 0011                    _PWMC$1395 0012                    _PWMC$1396 0013  
                 ??_showInfo 0027                      printf@c 00A5                      printf@f 008C  
           I2C_Master_Init@c 008D             I2C_Master_Read@a 0081                      postdec2 000FDD  
                 ??_simulate 0030                      postinc0 000FEE                      postinc2 000FDE  
           checkV@threshhold 0025              simulate@countDC 0043                    _PORTBbits 000F81  
                PWMC@widthus 0009              simulate@portCCW 004A            i2_I2C_Master_Read 2222  
          i2_I2C_Master_Wait 2350            i2_I2C_Master_Stop 23BE            i2___lwdiv@divisor 0003  
                  i2___lwdiv 1F3C                    i2___lwmod 206A            i2___lwdiv@counter 0007  
         ?i2_I2C_Master_Read 0001           ?i2_I2C_Master_Wait 0001           ?i2_I2C_Master_Stop 0001  
                  i2_lcdInst 238E                    i2_getTime 1AB2                  printf@width 00A3  
            PermLog@backruns 0039                   _stopMoving 20AC          ??i2_I2C_Master_Read 0002  
                  i2_isdigit 22B6          ??i2_I2C_Master_Wait 0001          ??i2_I2C_Master_Stop 0002  
              ReadRun@sorted 0003                  simulate@now 0035                 check9@sorted 002A  
                ___ftmul@exp 0016               __end_of_ReadEE 2326                  ?_initLatest 0001  
             __end_of___ftge 1814               __end_of___wmul 2152               __end_of_check9 1C14  
             __end_of_checkC 1B9E               __end_of_checkV 18A2         __size_ofi2_lcdNibble 0056  
                ?_initialize 0001                i2lcdInst@data 0003                 checkC@sorted 002A  
          __size_ofi2_ReadEE 0016               __end_of_intrpt 0FD6             i2___wmul@product 0005  
             __end_of_printV 21FC               __end_of_printf 047C                 i2printf@flag 001F  
            i2ReadEE@address 0001    __end_ofi2_I2C_Master_Read 2248    __end_ofi2_I2C_Master_Wait 2362  
               i2printf@prec 001C          start_initialization 21FC    __end_ofi2_I2C_Master_Stop 23C6  
          __size_ofi2___wmul 0026                    i2printf@c 0022                    i2printf@f 000D  
     __size_of_captureKeypad 001E        i2I2C_Master_Read@temp 0003                i2getTime@time 0004  
                 ?i2___lwdiv 0001                   ?i2___lwmod 0008            __size_ofi2_printf 039A  
          ??_I2C_Master_Init 0091            ??_I2C_Master_Read 0081            ??_I2C_Master_Wait 0080  
                 ?i2_lcdInst 0001            ??_I2C_Master_Stop 0081                   ?i2_getTime 0004  
                 ?i2_isdigit 0001                     ??_ReadEE 0082                     CW90@port 0016  
                   ??___ftge 0022                     ??___wmul 0084                     ??_check9 002C  
                   ??_checkC 002C                     ??_checkV 0027             __CFG_LPT1OSC$OFF 000000  
                   ??_intrpt 0056                     ??_printV 0025                     ??_printf 0094  
                WriteEE@data 0003            __size_of___awtoft 0038            __size_of___ftpack 00AE  
          __size_of_WriteRun 0162                  __pbssCOMRAM 006D                __pcstackBANK0 0080  
          i2___lwmod@divisor 000A            i2___lwmod@counter 000C                 _isdigit$1055 0081  
        __size_of_initLatest 0022                     ?i2_putch 0001               intrpt@keypress 006C  
        __size_of_initialize 005A                  ?_stopMoving 0001             _I2C_Master_Start 23B6  
                   ?_ReadRun 0003          i2I2C_Master_Write@d 0002             _I2C_Master_Write 239A  
                   ?_PermLog 0001             ___lwdiv@dividend 0080            __CFG_CCP2MX$PORTC 000000  
                 intrpt@port 0066                  WriteRun@add 000D                _captureKeypad 22D4  
                  __pintcode 0008                __pmediumconst FDDA                    _lcdNibble 1D62  
                   ?___awdiv 0001                     ?_WriteEE 0001                     ?___lldiv 0080  
                   ?___ftmul 000D                     ?___lwdiv 0080                     ?___lwmod 0087  
          __size_of_showInfo 0228                     ?_checkAA 002A            __size_of_simulate 03BA  
                   ?_lcdInst 0001                     ?_getTime 0083                     PWMC@port 000D  
             __size_of_CCW90 006E                     ?_initLCD 0001                     ?_isdigit 0001  
 __size_ofi2_I2C_Master_Read 0026   __size_ofi2_I2C_Master_Wait 0012   __size_ofi2_I2C_Master_Stop 0008  
                   ?_showRTC 0001                    _hexpowers FDE5             ___lwdiv@quotient 0084  
             __size_of_shake 00F2                  ??i2___lwdiv 0005                  ??i2___lwmod 000C  
             __size_of_putch 0010                  __size_of_AD 002A   __end_ofi2_I2C_Master_Start 23CE  
 __end_ofi2_I2C_Master_Write 23AE                  ??i2_lcdInst 0003                  ??i2_getTime 0006  
             ___wmul@product 0084                     _LATDbits 000F8C                  ??i2_isdigit 0001  
                   i2u240_45 14BA                     i2u240_46 14BC                     i2u321_40 06A6  
                   i2u313_41 0552                     i2u305_45 1FE8                     i2u314_41 0564  
                   i2u323_40 06BA                     i2u243_45 14EA                     i2u243_46 14EC  
                   i2u308_40 0FEC                     i2u324_40 06BC                     i2u325_40 06DA  
                   i2u326_40 06DC                     i2u246_45 151A                     i2u246_46 151C  
                   i2u327_40 06FA                     i2u351_47 080A                     i2u328_40 06FC  
                   i2u336_41 0E42                     i2u352_47 13F0                     i2u353_47 1440  
                   i2u338_40 0EAE                     i2u354_47 152C               ?_captureKeypad 0001  
                   _PIR2bits 000FA1                     i2u355_47 15EA                     i2u356_47 1EFE  
                   i2u269_40 2240                     i2u357_47 1F08                     i2u358_47 1F2A  
                   i2u359_47 1F34             __CFG_WDTPS$32768 000000                   PWMC@cycles 000B  
                 ?_lcdNibble 0001                     i2_ReadEE 2326                   _ADCON0bits 000FC2  
          ___wmul@multiplier 0080                     i2___wmul 226E                lcdNibble@data 0081  
                 printf@flag 00A2                lcdNibble@temp 0080                   printf@prec 009F  
                 simulate@AA 003D          __size_of_stopMoving 0038                   simulate@V9 0041  
                   i2_printf 0836        captureKeypad@keypress 0003          I2C_Master_Read@temp 0082  
           __size_ofi2_putch 000C                   _EECON1bits 000FA6               showInfo@sorted 0025  
                   __Hrparam 0000             __size_of_ReadRun 0132                     __Lrparam 0000  
           __size_of_PermLog 00D8                 ??_initLatest 0082           __CFG_BOREN$SBORDIS 000000  
           __size_of___awdiv 0084        i2___wmul@multiplicand 0003             __size_of_WriteEE 0026  
           __size_of___lldiv 00BC             __size_of___ftmul 00F4             __size_of___lwdiv 0078  
           __size_of___lwmod 0062                 ??_initialize 0095                     ___awtoft 20E4  
                   ___ftpack 16D6             __size_of_checkAA 0072                     _WriteRun 0FD6  
         i2I2C_Master_Read@a 0002             __size_of_lcdInst 0010             __size_of_getTime 008A  
            HexDecToDec2@hex 0007              _I2C_Master_Init 1E2C              _I2C_Master_Read 2152  
           __size_of_initLCD 0046                     back@runs 0001                ?_HexDecToDec2 0007  
            _I2C_Master_Wait 233C              _I2C_Master_Stop 23AE                    shake@port 0016  
           __size_of_isdigit 002A              ___lwdiv@divisor 0082              ___lwdiv@counter 0086  
                   __ptext10 23AE                     __ptext11 23B6                     __ptext20 1E2C  
                   __ptext12 2152                     __ptext21 161A                     __ptext13 233C  
                   __ptext30 20AC                     __ptext14 1E8C                     __ptext31 135E  
                   __ptext23 047C                     __ptext15 2294                     __ptext40 16D6  
                   __ptext32 1B28                     __ptext24 1AB2                     __ptext16 230E  
                   __ptext41 21AA                     __ptext33 1C14                     __ptext25 23A4  
                   __ptext17 2024                     __ptext50 0BD0                     __ptext42 0FD6  
                   __ptext34 1B9E                     __ptext26 23BE                     __ptext18 2372  
                   __ptext51 0836                     __ptext43 2248                     __ptext35 21D4  
                   __ptext27 23C6                     __ptext19 1D62                     __ptext60 1138  
                   __ptext52 2382                     __ptext44 1FDC                     __ptext36 1814  
                   __ptext28 2222                     __ptext61 2326                     __ptext53 22B6  
                   __ptext45 1C86                     __ptext37 126A                     __ptext29 2350  
                   __ptext62 22F2                     __ptext54 226E                     __ptext46 1CF4  
                   __ptext38 1784                     __ptext55 206A                     __ptext47 1450  
                   __ptext39 20E4                     __ptext56 1F3C                     __ptext48 19B6  
                   __ptext57 238E                     __ptext49 1542                     __ptext58 1EE6  
                   __ptext59 22D4             __size_of_showRTC 008A           __end_of_initLatest 22B6  
                   checkAA@V 002E                __size_of_CW90 006E             simulate@DCmoving 0034  
              __size_of_PWMC 00F2               i2_isdigit$1055 0002                __size_of_back 001C  
              __size_of_main 004E           __end_of_initialize 1EE6              ??_captureKeypad 0003  
                   _showInfo 0BD0                ??i2_lcdNibble 0001                  ??_lcdNibble 0080  
                   getTime@i 0085                     _simulate 047C                     int$flags 007E  
                  printf@idx 009A                    printf@len 009D                    printf@val 00A0  
                  simulate@C 003F                PermLog@goback 0036               ??_HexDecToDec2 0009  
                  putch@data 0082     __end_of_I2C_Master_Start 23BE     __end_of_I2C_Master_Write 23A4  
                 _INTCONbits 000FF2                PermLog@sorted 0032                PWMC@countdown 0014  
                   isdigit@c 0082                _simulate$1492 0032                     intlevel2 0000  
           ___lwmod@dividend 0087             ___lldiv@dividend 0080                 ??_stopMoving 0023  
                   printf@ap 009B                     printf@cp 0098      __end_of_I2C_Master_Init 1E8C  
    __end_of_I2C_Master_Read 2180      __end_of_I2C_Master_Wait 2350      __end_of_I2C_Master_Stop 23B6  
                lcdInst@data 0082                 showInfo@time 0023                 showInfo@stop 002E  
               showInfo@type 002C          __end_ofi2_lcdNibble 1F3C             ___lldiv@quotient 0088  
          I2C_Master_Write@d 0081              ___lwmod@divisor 0089              ___lwmod@counter 008B  
         __end_of_stopMoving 20E4               WriteEE@address 0001            simulate@portShake 0032  
                getTime@time 0083                printV@charged 0023  

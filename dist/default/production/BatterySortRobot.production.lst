

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Apr 10 11:38:03 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    80                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    81                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    82  0000                     
    83                           ; Version 1.41
    84                           ; Generated 25/01/2017 GMT
    85                           ; 
    86                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    87                           ; All rights reserved.
    88                           ; 
    89                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    90                           ; 
    91                           ; Redistribution and use in source and binary forms, with or without modification, are
    92                           ; permitted provided that the following conditions are met:
    93                           ; 
    94                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    95                           ;        conditions and the following disclaimer.
    96                           ; 
    97                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    98                           ;        of conditions and the following disclaimer in the documentation and/or other
    99                           ;        materials provided with the distribution.
   100                           ; 
   101                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   102                           ;        software without specific prior written permission.
   103                           ; 
   104                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   105                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   106                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   107                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   108                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   109                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   110                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   111                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   112                           ; 
   113                           ; 
   114                           ; Code-generator required, PIC18F4620 Definitions
   115                           ; 
   116                           ; SFR Addresses
   117  0000                     
   118                           	psect	idataBANK0
   119  00266A                     __pidataBANK0:
   120                           	opt stack 0
   121                           
   122                           ;initializer for mainloop@F3101
   123  00266A  0001               	dw	1
   124  00266C  0001               	dw	1
   125  00266E  0001               	dw	1
   126                           
   127                           ;initializer for mainloop@F3096
   128  002670  02                 	db	2
   129  002671  02                 	db	2
   130  002672  02                 	db	2
   131  002673  06                 	db	6
   132                           
   133                           	psect	mediumconst
   134  00FDC0                     __pmediumconst:
   135                           	opt stack 0
   136  00FDC0  00                 	db	0
   137  00FDC1                     _dpowers:
   138                           	opt stack 0
   139  00FDC1  0001               	dw	1
   140  00FDC3  000A               	dw	10
   141  00FDC5  0064               	dw	100
   142  00FDC7  03E8               	dw	1000
   143  00FDC9  2710               	dw	10000
   144  00FDCB                     __end_of_dpowers:
   145                           	opt stack 0
   146  00FDCB                     _hexpowers:
   147                           	opt stack 0
   148  00FDCB  0001               	dw	1
   149  00FDCD  0010               	dw	16
   150  00FDCF  0100               	dw	256
   151  00FDD1  1000               	dw	4096
   152  00FDD3                     __end_of_hexpowers:
   153                           	opt stack 0
   154  0000                     _PIR2bits	set	4001
   155  0000                     _EECON2	set	4007
   156  0000                     _EEDATA	set	4008
   157  0000                     _EECON1bits	set	4006
   158  0000                     _EEADR	set	4009
   159  0000                     _EEADRH	set	4010
   160  0000                     _SSPBUF	set	4041
   161  0000                     _SSPADD	set	4040
   162  0000                     _SSPCON2	set	4037
   163  0000                     _SSPCON1	set	4038
   164  0000                     _SSPSTAT	set	4039
   165  0000                     _ADRESL	set	4035
   166  0000                     _ADRESH	set	4036
   167  0000                     _ADCON0bits	set	4034
   168  0000                     _LATDbits	set	3980
   169  0000                     _PORTBbits	set	3969
   170  0000                     _PORTB	set	3969
   171  0000                     _INTCONbits	set	4082
   172  0000                     _CVRCON	set	4021
   173  0000                     _ADCON1	set	4033
   174  0000                     _ADCON0	set	4034
   175  0000                     _LATE	set	3981
   176  0000                     _LATD	set	3980
   177  0000                     _LATC	set	3979
   178  0000                     _LATB	set	3978
   179  0000                     _LATA	set	3977
   180  0000                     _TRISE	set	3990
   181  0000                     _TRISD	set	3989
   182  0000                     _TRISC	set	3988
   183  0000                     _TRISB	set	3987
   184  0000                     _TRISA	set	3986
   185  0000                     _ACKEN	set	32300
   186  0000                     _ACKDT	set	32301
   187  0000                     _RCEN	set	32299
   188  0000                     _PEN	set	32298
   189  0000                     _SEN	set	32296
   190  0000                     _TRISC4	set	31908
   191  0000                     _TRISC3	set	31907
   192  0000                     _ADON	set	32272
   193  0000                     _INT1IE	set	32643
   194  0000                     _LATC5	set	31837
   195  0000                     _LATC7	set	31839
   196  0000                     _INT1IF	set	32640
   197  0000                     _INT2IF	set	32641
   198  0000                     _INT2IE	set	32644
   199  0000                     _LATC6	set	31838
   200  0000                     _INTEDG2	set	32652
   201  0000                     _ADFM	set	32263
   202  0000                     _LATB2	set	31826
   203  0000                     _LATC2	set	31834
   204  0000                     _LATC1	set	31833
   205  0000                     _LATC0	set	31832
   206  00FDD3                     STR_2:
   207                           
   208                           ; BSR set to: 0
   209  00FDD3  53                 	db	83	;'S'
   210  00FDD4  6F                 	db	111	;'o'
   211  00FDD5  72                 	db	114	;'r'
   212  00FDD6  74                 	db	116	;'t'
   213  00FDD7  69                 	db	105	;'i'
   214  00FDD8  6E                 	db	110	;'n'
   215  00FDD9  67                 	db	103	;'g'
   216  00FDDA  20                 	db	32
   217  00FDDB  43                 	db	67	;'C'
   218  00FDDC  6F                 	db	111	;'o'
   219  00FDDD  6D                 	db	109	;'m'
   220  00FDDE  70                 	db	112	;'p'
   221  00FDDF  6C                 	db	108	;'l'
   222  00FDE0  65                 	db	101	;'e'
   223  00FDE1  74                 	db	116	;'t'
   224  00FDE2  65                 	db	101	;'e'
   225  00FDE3  20                 	db	32
   226  00FDE4  20                 	db	32
   227  00FDE5  20                 	db	32
   228  00FDE6  20                 	db	32
   229  00FDE7  20                 	db	32
   230  00FDE8  20                 	db	32
   231  00FDE9  20                 	db	32
   232  00FDEA  20                 	db	32
   233  00FDEB  20                 	db	32
   234  00FDEC  20                 	db	32
   235  00FDED  00                 	db	0
   236  00FDEE                     STR_18:
   237                           
   238                           ; BSR set to: 0
   239  00FDEE  20                 	db	32
   240  00FDEF  20                 	db	32
   241  00FDF0  20                 	db	32
   242  00FDF1  20                 	db	32
   243  00FDF2  25                 	db	37
   244  00FDF3  30                 	db	48	;'0'
   245  00FDF4  32                 	db	50	;'2'
   246  00FDF5  78                 	db	120	;'x'
   247  00FDF6  2F                 	db	47
   248  00FDF7  25                 	db	37
   249  00FDF8  30                 	db	48	;'0'
   250  00FDF9  32                 	db	50	;'2'
   251  00FDFA  78                 	db	120	;'x'
   252  00FDFB  2F                 	db	47
   253  00FDFC  25                 	db	37
   254  00FDFD  30                 	db	48	;'0'
   255  00FDFE  32                 	db	50	;'2'
   256  00FDFF  78                 	db	120	;'x'
   257  00FE00  20                 	db	32
   258  00FE01  20                 	db	32
   259  00FE02  20                 	db	32
   260  00FE03  20                 	db	32
   261  00FE04  20                 	db	32
   262  00FE05  20                 	db	32
   263  00FE06  00                 	db	0
   264  00FE07                     STR_19:
   265                           
   266                           ; BSR set to: 0
   267  00FE07  20                 	db	32
   268  00FE08  20                 	db	32
   269  00FE09  20                 	db	32
   270  00FE0A  20                 	db	32
   271  00FE0B  25                 	db	37
   272  00FE0C  30                 	db	48	;'0'
   273  00FE0D  32                 	db	50	;'2'
   274  00FE0E  78                 	db	120	;'x'
   275  00FE0F  3A                 	db	58	;':'
   276  00FE10  25                 	db	37
   277  00FE11  30                 	db	48	;'0'
   278  00FE12  32                 	db	50	;'2'
   279  00FE13  78                 	db	120	;'x'
   280  00FE14  3A                 	db	58	;':'
   281  00FE15  25                 	db	37
   282  00FE16  30                 	db	48	;'0'
   283  00FE17  32                 	db	50	;'2'
   284  00FE18  78                 	db	120	;'x'
   285  00FE19  20                 	db	32
   286  00FE1A  20                 	db	32
   287  00FE1B  20                 	db	32
   288  00FE1C  20                 	db	32
   289  00FE1D  20                 	db	32
   290  00FE1E  20                 	db	32
   291  00FE1F  00                 	db	0
   292  00FE20                     STR_24:
   293                           
   294                           ; BSR set to: 0
   295  00FE20  54                 	db	84	;'T'
   296  00FE21  69                 	db	105	;'i'
   297  00FE22  6D                 	db	109	;'m'
   298  00FE23  65                 	db	101	;'e'
   299  00FE24  20                 	db	32
   300  00FE25  45                 	db	69	;'E'
   301  00FE26  6C                 	db	108	;'l'
   302  00FE27  61                 	db	97	;'a'
   303  00FE28  70                 	db	112	;'p'
   304  00FE29  73                 	db	115	;'s'
   305  00FE2A  65                 	db	101	;'e'
   306  00FE2B  64                 	db	100	;'d'
   307  00FE2C  3A                 	db	58	;':'
   308  00FE2D  20                 	db	32
   309  00FE2E  20                 	db	32
   310  00FE2F  20                 	db	32
   311  00FE30  20                 	db	32
   312  00FE31  20                 	db	32
   313  00FE32  20                 	db	32
   314  00FE33  20                 	db	32
   315  00FE34  20                 	db	32
   316  00FE35  20                 	db	32
   317  00FE36  20                 	db	32
   318  00FE37  00                 	db	0
   319  00FE38                     STR_26:
   320                           
   321                           ; BSR set to: 0
   322  00FE38  54                 	db	84	;'T'
   323  00FE39  6F                 	db	111	;'o'
   324  00FE3A  74                 	db	116	;'t'
   325  00FE3B  61                 	db	97	;'a'
   326  00FE3C  6C                 	db	108	;'l'
   327  00FE3D  20                 	db	32
   328  00FE3E  53                 	db	83	;'S'
   329  00FE3F  6F                 	db	111	;'o'
   330  00FE40  72                 	db	114	;'r'
   331  00FE41  74                 	db	116	;'t'
   332  00FE42  65                 	db	101	;'e'
   333  00FE43  64                 	db	100	;'d'
   334  00FE44  3A                 	db	58	;':'
   335  00FE45  20                 	db	32
   336  00FE46  20                 	db	32
   337  00FE47  20                 	db	32
   338  00FE48  20                 	db	32
   339  00FE49  20                 	db	32
   340  00FE4A  20                 	db	32
   341  00FE4B  20                 	db	32
   342  00FE4C  20                 	db	32
   343  00FE4D  20                 	db	32
   344  00FE4E  20                 	db	32
   345  00FE4F  00                 	db	0
   346  00FE50                     STR_23:
   347                           
   348                           ; BSR set to: 0
   349  00FE50  46                 	db	70	;'F'
   350  00FE51  6F                 	db	111	;'o'
   351  00FE52  72                 	db	114	;'r'
   352  00FE53  20                 	db	32
   353  00FE54  6D                 	db	109	;'m'
   354  00FE55  6F                 	db	111	;'o'
   355  00FE56  72                 	db	114	;'r'
   356  00FE57  65                 	db	101	;'e'
   357  00FE58  20                 	db	32
   358  00FE59  69                 	db	105	;'i'
   359  00FE5A  6E                 	db	110	;'n'
   360  00FE5B  66                 	db	102	;'f'
   361  00FE5C  6F                 	db	111	;'o'
   362  00FE5D  20                 	db	32
   363  00FE5E  20                 	db	32
   364  00FE5F  20                 	db	32
   365  00FE60  20                 	db	32
   366  00FE61  20                 	db	32
   367  00FE62  20                 	db	32
   368  00FE63  20                 	db	32
   369  00FE64  20                 	db	32
   370  00FE65  20                 	db	32
   371  00FE66  20                 	db	32
   372  00FE67  00                 	db	0
   373  00FE68                     STR_27:
   374                           
   375                           ; BSR set to: 0
   376  00FE68  25                 	db	37
   377  00FE69  75                 	db	117	;'u'
   378  00FE6A  20                 	db	32
   379  00FE6B  62                 	db	98	;'b'
   380  00FE6C  61                 	db	97	;'a'
   381  00FE6D  74                 	db	116	;'t'
   382  00FE6E  74                 	db	116	;'t'
   383  00FE6F  65                 	db	101	;'e'
   384  00FE70  72                 	db	114	;'r'
   385  00FE71  69                 	db	105	;'i'
   386  00FE72  65                 	db	101	;'e'
   387  00FE73  73                 	db	115	;'s'
   388  00FE74  20                 	db	32
   389  00FE75  20                 	db	32
   390  00FE76  20                 	db	32
   391  00FE77  20                 	db	32
   392  00FE78  20                 	db	32
   393  00FE79  20                 	db	32
   394  00FE7A  20                 	db	32
   395  00FE7B  20                 	db	32
   396  00FE7C  20                 	db	32
   397  00FE7D  20                 	db	32
   398  00FE7E  00                 	db	0
   399  00FE7F                     STR_43:
   400                           
   401                           ; BSR set to: 0
   402  00FE7F  50                 	db	80	;'P'
   403  00FE80  65                 	db	101	;'e'
   404  00FE81  72                 	db	114	;'r'
   405  00FE82  6D                 	db	109	;'m'
   406  00FE83  61                 	db	97	;'a'
   407  00FE84  6E                 	db	110	;'n'
   408  00FE85  65                 	db	101	;'e'
   409  00FE86  6E                 	db	110	;'n'
   410  00FE87  74                 	db	116	;'t'
   411  00FE88  20                 	db	32
   412  00FE89  6C                 	db	108	;'l'
   413  00FE8A  6F                 	db	111	;'o'
   414  00FE8B  67                 	db	103	;'g'
   415  00FE8C  3A                 	db	58	;':'
   416  00FE8D  20                 	db	32
   417  00FE8E  20                 	db	32
   418  00FE8F  20                 	db	32
   419  00FE90  20                 	db	32
   420  00FE91  20                 	db	32
   421  00FE92  20                 	db	32
   422  00FE93  20                 	db	32
   423  00FE94  00                 	db	0
   424  00FE95                     STR_28:
   425                           
   426                           ; BSR set to: 0
   427  00FE95  43                 	db	67	;'C'
   428  00FE96  68                 	db	104	;'h'
   429  00FE97  61                 	db	97	;'a'
   430  00FE98  72                 	db	114	;'r'
   431  00FE99  67                 	db	103	;'g'
   432  00FE9A  65                 	db	101	;'e'
   433  00FE9B  64                 	db	100	;'d'
   434  00FE9C  20                 	db	32
   435  00FE9D  41                 	db	65	;'A'
   436  00FE9E  41                 	db	65	;'A'
   437  00FE9F  3A                 	db	58	;':'
   438  00FEA0  20                 	db	32
   439  00FEA1  20                 	db	32
   440  00FEA2  20                 	db	32
   441  00FEA3  20                 	db	32
   442  00FEA4  20                 	db	32
   443  00FEA5  20                 	db	32
   444  00FEA6  20                 	db	32
   445  00FEA7  20                 	db	32
   446  00FEA8  20                 	db	32
   447  00FEA9  20                 	db	32
   448  00FEAA  00                 	db	0
   449  00FEAB                     STR_32:
   450                           
   451                           ; BSR set to: 0
   452  00FEAB  43                 	db	67	;'C'
   453  00FEAC  68                 	db	104	;'h'
   454  00FEAD  61                 	db	97	;'a'
   455  00FEAE  72                 	db	114	;'r'
   456  00FEAF  67                 	db	103	;'g'
   457  00FEB0  65                 	db	101	;'e'
   458  00FEB1  64                 	db	100	;'d'
   459  00FEB2  20                 	db	32
   460  00FEB3  39                 	db	57	;'9'
   461  00FEB4  56                 	db	86	;'V'
   462  00FEB5  3A                 	db	58	;':'
   463  00FEB6  20                 	db	32
   464  00FEB7  20                 	db	32
   465  00FEB8  20                 	db	32
   466  00FEB9  20                 	db	32
   467  00FEBA  20                 	db	32
   468  00FEBB  20                 	db	32
   469  00FEBC  20                 	db	32
   470  00FEBD  20                 	db	32
   471  00FEBE  20                 	db	32
   472  00FEBF  20                 	db	32
   473  00FEC0  00                 	db	0
   474  00FEC1                     STR_22:
   475                           
   476                           ; BSR set to: 0
   477  00FEC1  50                 	db	80	;'P'
   478  00FEC2  72                 	db	114	;'r'
   479  00FEC3  65                 	db	101	;'e'
   480  00FEC4  73                 	db	115	;'s'
   481  00FEC5  73                 	db	115	;'s'
   482  00FEC6  20                 	db	32
   483  00FEC7  61                 	db	97	;'a'
   484  00FEC8  20                 	db	32
   485  00FEC9  6B                 	db	107	;'k'
   486  00FECA  65                 	db	101	;'e'
   487  00FECB  79                 	db	121	;'y'
   488  00FECC  20                 	db	32
   489  00FECD  20                 	db	32
   490  00FECE  20                 	db	32
   491  00FECF  20                 	db	32
   492  00FED0  20                 	db	32
   493  00FED1  20                 	db	32
   494  00FED2  20                 	db	32
   495  00FED3  20                 	db	32
   496  00FED4  20                 	db	32
   497  00FED5  20                 	db	32
   498  00FED6  00                 	db	0
   499  00FED7                     STR_30:
   500                           
   501                           ; BSR set to: 0
   502  00FED7  43                 	db	67	;'C'
   503  00FED8  68                 	db	104	;'h'
   504  00FED9  61                 	db	97	;'a'
   505  00FEDA  72                 	db	114	;'r'
   506  00FEDB  67                 	db	103	;'g'
   507  00FEDC  65                 	db	101	;'e'
   508  00FEDD  64                 	db	100	;'d'
   509  00FEDE  20                 	db	32
   510  00FEDF  43                 	db	67	;'C'
   511  00FEE0  3A                 	db	58	;':'
   512  00FEE1  20                 	db	32
   513  00FEE2  20                 	db	32
   514  00FEE3  20                 	db	32
   515  00FEE4  20                 	db	32
   516  00FEE5  20                 	db	32
   517  00FEE6  20                 	db	32
   518  00FEE7  20                 	db	32
   519  00FEE8  20                 	db	32
   520  00FEE9  20                 	db	32
   521  00FEEA  20                 	db	32
   522  00FEEB  00                 	db	0
   523  00FEEC                     STR_34:
   524                           
   525                           ; BSR set to: 0
   526  00FEEC  55                 	db	85	;'U'
   527  00FEED  6E                 	db	110	;'n'
   528  00FEEE  63                 	db	99	;'c'
   529  00FEEF  68                 	db	104	;'h'
   530  00FEF0  61                 	db	97	;'a'
   531  00FEF1  72                 	db	114	;'r'
   532  00FEF2  67                 	db	103	;'g'
   533  00FEF3  65                 	db	101	;'e'
   534  00FEF4  64                 	db	100	;'d'
   535  00FEF5  3A                 	db	58	;':'
   536  00FEF6  20                 	db	32
   537  00FEF7  20                 	db	32
   538  00FEF8  20                 	db	32
   539  00FEF9  20                 	db	32
   540  00FEFA  20                 	db	32
   541  00FEFB  20                 	db	32
   542  00FEFC  20                 	db	32
   543  00FEFD  20                 	db	32
   544  00FEFE  20                 	db	32
   545  00FEFF  20                 	db	32
   546  00FF00  00                 	db	0
   547  00FF01                     STR_25:
   548                           
   549                           ; BSR set to: 0
   550  00FF01  25                 	db	37
   551  00FF02  75                 	db	117	;'u'
   552  00FF03  20                 	db	32
   553  00FF04  73                 	db	115	;'s'
   554  00FF05  65                 	db	101	;'e'
   555  00FF06  63                 	db	99	;'c'
   556  00FF07  6F                 	db	111	;'o'
   557  00FF08  6E                 	db	110	;'n'
   558  00FF09  64                 	db	100	;'d'
   559  00FF0A  73                 	db	115	;'s'
   560  00FF0B  20                 	db	32
   561  00FF0C  20                 	db	32
   562  00FF0D  20                 	db	32
   563  00FF0E  20                 	db	32
   564  00FF0F  20                 	db	32
   565  00FF10  20                 	db	32
   566  00FF11  20                 	db	32
   567  00FF12  20                 	db	32
   568  00FF13  20                 	db	32
   569  00FF14  20                 	db	32
   570  00FF15  00                 	db	0
   571  00FF16                     STR_1:
   572                           
   573                           ; BSR set to: 0
   574  00FF16  44                 	db	68	;'D'
   575  00FF17  75                 	db	117	;'u'
   576  00FF18  6D                 	db	109	;'m'
   577  00FF19  6D                 	db	109	;'m'
   578  00FF1A  69                 	db	105	;'i'
   579  00FF1B  6E                 	db	110	;'n'
   580  00FF1C  67                 	db	103	;'g'
   581  00FF1D  2E                 	db	46
   582  00FF1E  2E                 	db	46
   583  00FF1F  2E                 	db	46
   584  00FF20  20                 	db	32
   585  00FF21  20                 	db	32
   586  00FF22  20                 	db	32
   587  00FF23  20                 	db	32
   588  00FF24  20                 	db	32
   589  00FF25  20                 	db	32
   590  00FF26  20                 	db	32
   591  00FF27  20                 	db	32
   592  00FF28  20                 	db	32
   593  00FF29  20                 	db	32
   594  00FF2A  00                 	db	0
   595  00FF2B                     STR_3:
   596                           
   597                           ; BSR set to: 0
   598  00FF2B  53                 	db	83	;'S'
   599  00FF2C  6F                 	db	111	;'o'
   600  00FF2D  72                 	db	114	;'r'
   601  00FF2E  74                 	db	116	;'t'
   602  00FF2F  69                 	db	105	;'i'
   603  00FF30  6E                 	db	110	;'n'
   604  00FF31  67                 	db	103	;'g'
   605  00FF32  2E                 	db	46
   606  00FF33  2E                 	db	46
   607  00FF34  2E                 	db	46
   608  00FF35  20                 	db	32
   609  00FF36  20                 	db	32
   610  00FF37  20                 	db	32
   611  00FF38  20                 	db	32
   612  00FF39  20                 	db	32
   613  00FF3A  20                 	db	32
   614  00FF3B  20                 	db	32
   615  00FF3C  20                 	db	32
   616  00FF3D  20                 	db	32
   617  00FF3E  20                 	db	32
   618  00FF3F  00                 	db	0
   619  00FF40                     STR_36:
   620                           
   621                           ; BSR set to: 0
   622  00FF40  45                 	db	69	;'E'
   623  00FF41  6D                 	db	109	;'m'
   624  00FF42  65                 	db	101	;'e'
   625  00FF43  72                 	db	114	;'r'
   626  00FF44  67                 	db	103	;'g'
   627  00FF45  65                 	db	101	;'e'
   628  00FF46  6E                 	db	110	;'n'
   629  00FF47  63                 	db	99	;'c'
   630  00FF48  79                 	db	121	;'y'
   631  00FF49  20                 	db	32
   632  00FF4A  20                 	db	32
   633  00FF4B  20                 	db	32
   634  00FF4C  20                 	db	32
   635  00FF4D  20                 	db	32
   636  00FF4E  20                 	db	32
   637  00FF4F  20                 	db	32
   638  00FF50  20                 	db	32
   639  00FF51  20                 	db	32
   640  00FF52  20                 	db	32
   641  00FF53  00                 	db	0
   642  00FF54                     STR_21:
   643                           
   644                           ; BSR set to: 0
   645  00FF54  57                 	db	87	;'W'
   646  00FF55  65                 	db	101	;'e'
   647  00FF56  6C                 	db	108	;'l'
   648  00FF57  63                 	db	99	;'c'
   649  00FF58  6F                 	db	111	;'o'
   650  00FF59  6D                 	db	109	;'m'
   651  00FF5A  65                 	db	101	;'e'
   652  00FF5B  21                 	db	33
   653  00FF5C  20                 	db	32
   654  00FF5D  20                 	db	32
   655  00FF5E  20                 	db	32
   656  00FF5F  20                 	db	32
   657  00FF60  20                 	db	32
   658  00FF61  20                 	db	32
   659  00FF62  20                 	db	32
   660  00FF63  20                 	db	32
   661  00FF64  20                 	db	32
   662  00FF65  20                 	db	32
   663  00FF66  00                 	db	0
   664  00FF67                     STR_44:
   665                           
   666                           ; BSR set to: 0
   667  00FF67  57                 	db	87	;'W'
   668  00FF68  68                 	db	104	;'h'
   669  00FF69  69                 	db	105	;'i'
   670  00FF6A  63                 	db	99	;'c'
   671  00FF6B  68                 	db	104	;'h'
   672  00FF6C  20                 	db	32
   673  00FF6D  72                 	db	114	;'r'
   674  00FF6E  75                 	db	117	;'u'
   675  00FF6F  6E                 	db	110	;'n'
   676  00FF70  3F                 	db	63	;'?'
   677  00FF71  20                 	db	32
   678  00FF72  20                 	db	32
   679  00FF73  20                 	db	32
   680  00FF74  20                 	db	32
   681  00FF75  20                 	db	32
   682  00FF76  20                 	db	32
   683  00FF77  20                 	db	32
   684  00FF78  00                 	db	0
   685  00FF79                     STR_37:
   686                           
   687                           ; BSR set to: 0
   688  00FF79  53                 	db	83	;'S'
   689  00FF7A  74                 	db	116	;'t'
   690  00FF7B  6F                 	db	111	;'o'
   691  00FF7C  70                 	db	112	;'p'
   692  00FF7D  70                 	db	112	;'p'
   693  00FF7E  65                 	db	101	;'e'
   694  00FF7F  64                 	db	100	;'d'
   695  00FF80  20                 	db	32
   696  00FF81  20                 	db	32
   697  00FF82  20                 	db	32
   698  00FF83  20                 	db	32
   699  00FF84  20                 	db	32
   700  00FF85  20                 	db	32
   701  00FF86  20                 	db	32
   702  00FF87  20                 	db	32
   703  00FF88  20                 	db	32
   704  00FF89  20                 	db	32
   705  00FF8A  00                 	db	0
   706  00FF8B                     
   707                           ; BSR set to: 0
   708  00FF8B  41                 	db	65	;'A'
   709  00FF8C  20                 	db	32
   710  00FF8D  25                 	db	37
   711  00FF8E  64                 	db	100	;'d'
   712  00FF8F  2C                 	db	44
   713  00FF90  43                 	db	67	;'C'
   714  00FF91  20                 	db	32
   715  00FF92  25                 	db	37
   716  00FF93  64                 	db	100	;'d'
   717  00FF94  2C                 	db	44
   718  00FF95  39                 	db	57	;'9'
   719  00FF96  20                 	db	32
   720  00FF97  25                 	db	37
   721  00FF98  64                 	db	100	;'d'
   722  00FF99  20                 	db	32
   723  00FF9A  20                 	db	32
   724  00FF9B  20                 	db	32
   725  00FF9C  00                 	db	0
   726  00FF9D                     STR_47:
   727                           
   728                           ; BSR set to: 0
   729  00FF9D  30                 	db	48	;'0'
   730  00FF9E  31                 	db	49	;'1'
   731  00FF9F  32                 	db	50	;'2'
   732  00FFA0  33                 	db	51	;'3'
   733  00FFA1  34                 	db	52	;'4'
   734  00FFA2  35                 	db	53	;'5'
   735  00FFA3  36                 	db	54	;'6'
   736  00FFA4  37                 	db	55	;'7'
   737  00FFA5  38                 	db	56	;'8'
   738  00FFA6  39                 	db	57	;'9'
   739  00FFA7  61                 	db	97	;'a'
   740  00FFA8  62                 	db	98	;'b'
   741  00FFA9  63                 	db	99	;'c'
   742  00FFAA  64                 	db	100	;'d'
   743  00FFAB  65                 	db	101	;'e'
   744  00FFAC  66                 	db	102	;'f'
   745  00FFAD  00                 	db	0
   746  00FFAE                     STR_45:
   747                           
   748                           ; BSR set to: 0
   749  00FFAE  73                 	db	115	;'s'
   750  00FFAF  68                 	db	104	;'h'
   751  00FFB0  6F                 	db	111	;'o'
   752  00FFB1  77                 	db	119	;'w'
   753  00FFB2  69                 	db	105	;'i'
   754  00FFB3  6E                 	db	110	;'n'
   755  00FFB4  67                 	db	103	;'g'
   756  00FFB5  20                 	db	32
   757  00FFB6  25                 	db	37
   758  00FFB7  75                 	db	117	;'u'
   759  00FFB8  20                 	db	32
   760  00FFB9  20                 	db	32
   761  00FFBA  20                 	db	32
   762  00FFBB  20                 	db	32
   763  00FFBC  20                 	db	32
   764  00FFBD  20                 	db	32
   765  00FFBE  00                 	db	0
   766  00FFBF                     STR_46:
   767                           
   768                           ; BSR set to: 0
   769  00FFBF  72                 	db	114	;'r'
   770  00FFC0  75                 	db	117	;'u'
   771  00FFC1  6E                 	db	110	;'n'
   772  00FFC2  73                 	db	115	;'s'
   773  00FFC3  20                 	db	32
   774  00FFC4  62                 	db	98	;'b'
   775  00FFC5  65                 	db	101	;'e'
   776  00FFC6  66                 	db	102	;'f'
   777  00FFC7  6F                 	db	111	;'o'
   778  00FFC8  72                 	db	114	;'r'
   779  00FFC9  65                 	db	101	;'e'
   780  00FFCA  20                 	db	32
   781  00FFCB  20                 	db	32
   782  00FFCC  20                 	db	32
   783  00FFCD  20                 	db	32
   784  00FFCE  20                 	db	32
   785  00FFCF  00                 	db	0
   786  00FFD0                     STR_29:
   787                           
   788                           ; BSR set to: 0
   789  00FFD0  25                 	db	37
   790  00FFD1  75                 	db	117	;'u'
   791  00FFD2  20                 	db	32
   792  00FFD3  20                 	db	32
   793  00FFD4  20                 	db	32
   794  00FFD5  20                 	db	32
   795  00FFD6  20                 	db	32
   796  00FFD7  20                 	db	32
   797  00FFD8  20                 	db	32
   798  00FFD9  20                 	db	32
   799  00FFDA  20                 	db	32
   800  00FFDB  20                 	db	32
   801  00FFDC  20                 	db	32
   802  00FFDD  20                 	db	32
   803  00FFDE  20                 	db	32
   804  00FFDF  00                 	db	0
   805  00FFE0                     STR_39:
   806                           
   807                           ; BSR set to: 0
   808  00FFE0  20                 	db	32
   809  00FFE1  25                 	db	37
   810  00FFE2  64                 	db	100	;'d'
   811  00FFE3  20                 	db	32
   812  00FFE4  00                 	db	0
   813  00FFE5                     STR_13:
   814                           
   815                           ; BSR set to: 0
   816  00FFE5  20                 	db	32
   817  00FFE6  41                 	db	65	;'A'
   818  00FFE7  41                 	db	65	;'A'
   819  00FFE8  3A                 	db	58	;':'
   820  00FFE9  00                 	db	0
   821  00FFEA                     STR_38:
   822                           
   823                           ; BSR set to: 0
   824  00FFEA  2D                 	db	45
   825  00FFEB  31                 	db	49	;'1'
   826  00FFEC  20                 	db	32
   827  00FFED  00                 	db	0
   828  00FFEE                     STR_9:
   829                           
   830                           ; BSR set to: 0
   831  00FFEE  20                 	db	32
   832  00FFEF  43                 	db	67	;'C'
   833  00FFF0  3A                 	db	58	;':'
   834  00FFF1  00                 	db	0
   835  00FFF2                     STR_5:
   836                           
   837                           ; BSR set to: 0
   838  00FFF2  39                 	db	57	;'9'
   839  00FFF3  56                 	db	86	;'V'
   840  00FFF4  3A                 	db	58	;':'
   841  00FFF5  00                 	db	0
   842  00FFF6                     STR_6:
   843                           
   844                           ; BSR set to: 0
   845  00FFF6  20                 	db	32
   846  00FFF7  2B                 	db	43
   847  00FFF8  00                 	db	0
   848  00FFF9                     STR_7:
   849                           
   850                           ; BSR set to: 0
   851  00FFF9  20                 	db	32
   852  00FFFA  2D                 	db	45
   853  00FFFB  00                 	db	0
   854  00FFFC                     STR_8:
   855                           
   856                           ; BSR set to: 0
   857  00FFFC  20                 	db	32
   858  00FFFD  30                 	db	48	;'0'
   859  00FFFE  00                 	db	0
   860  0000                     
   861                           ; #config settings
   862  00FFFF  00                 	db	0	; dummy byte at the end
   863  0000                     
   864                           	psect	cinit
   865  002294                     __pcinit:
   866                           	opt stack 0
   867  002294                     start_initialization:
   868                           	opt stack 0
   869  002294                     __initialization:
   870                           	opt stack 0
   871                           
   872                           ; Initialize objects allocated to BANK0 (10 bytes)
   873                           ; load TBLPTR registers with __pidataBANK0
   874  002294  0E6A               	movlw	low __pidataBANK0
   875  002296  6EF6               	movwf	tblptrl,c
   876  002298  0E26               	movlw	high __pidataBANK0
   877  00229A  6EF7               	movwf	tblptrh,c
   878  00229C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   879  00229E  6EF8               	movwf	tblptru,c
   880  0022A0  EE00  F0DA         	lfsr	0,__pdataBANK0
   881  0022A4  EE10 F00A          	lfsr	1,10
   882  0022A8                     copy_data0:
   883  0022A8  0009               	tblrd		*+
   884  0022AA  CFF5 FFEE          	movff	tablat,postinc0
   885  0022AE  50E5               	movf	postdec1,w,c
   886  0022B0  50E1               	movf	fsr1l,w,c
   887  0022B2  E1FA               	bnz	copy_data0
   888                           
   889                           ; Clear objects allocated to BANK0 (48 bytes)
   890  0022B4  EE00  F080         	lfsr	0,__pbssBANK0
   891  0022B8  0E30               	movlw	48
   892  0022BA                     clear_0:
   893  0022BA  6AEE               	clrf	postinc0,c
   894  0022BC  06E8               	decf	wreg,f,c
   895  0022BE  E1FD               	bnz	clear_0
   896                           
   897                           ; Clear objects allocated to COMRAM (6 bytes)
   898  0022C0  6A7C               	clrf	(__pbssCOMRAM+5)& (0+255),c
   899  0022C2  6A7B               	clrf	(__pbssCOMRAM+4)& (0+255),c
   900  0022C4  6A7A               	clrf	(__pbssCOMRAM+3)& (0+255),c
   901  0022C6  6A79               	clrf	(__pbssCOMRAM+2)& (0+255),c
   902  0022C8  6A78               	clrf	(__pbssCOMRAM+1)& (0+255),c
   903  0022CA  6A77               	clrf	__pbssCOMRAM& (0+255),c
   904  0022CC                     end_of_initialization:
   905                           	opt stack 0
   906  0022CC                     __end_of__initialization:
   907                           	opt stack 0
   908  0022CC  907D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   909  0022CE  927D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   910  0022D0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   911  0022D2  6EF8               	movwf	tblptru,c
   912  0022D4  0100               	movlb	0
   913  0022D6  EFFF  F010         	goto	_main	;jump to C main() function
   914                           tblptru	equ	0xFF8
   915                           tblptrh	equ	0xFF7
   916                           tblptrl	equ	0xFF6
   917                           tablat	equ	0xFF5
   918                           postinc0	equ	0xFEE
   919                           wreg	equ	0xFE8
   920                           postdec1	equ	0xFE5
   921                           fsr1l	equ	0xFE1
   922                           
   923                           	psect	bssCOMRAM
   924  000077                     __pbssCOMRAM:
   925                           	opt stack 0
   926  000077                     simulate@F3110:
   927                           	opt stack 0
   928  000077                     	ds	4
   929  00007B                     _mode:
   930                           	opt stack 0
   931  00007B                     	ds	2
   932                           tblptru	equ	0xFF8
   933                           tblptrh	equ	0xFF7
   934                           tblptrl	equ	0xFF6
   935                           tablat	equ	0xFF5
   936                           postinc0	equ	0xFEE
   937                           wreg	equ	0xFE8
   938                           postdec1	equ	0xFE5
   939                           fsr1l	equ	0xFE1
   940                           
   941                           	psect	bssBANK0
   942  000080                     __pbssBANK0:
   943                           	opt stack 0
   944  000080                     intrpt@F3137:
   945                           	opt stack 0
   946  000080                     	ds	6
   947  000086                     simulate@F3127:
   948                           	opt stack 0
   949  000086                     	ds	6
   950  00008C                     simulate@F3125:
   951                           	opt stack 0
   952  00008C                     	ds	6
   953  000092                     simulate@F3123:
   954                           	opt stack 0
   955  000092                     	ds	6
   956  000098                     PermLog@F3082:
   957                           	opt stack 0
   958  000098                     	ds	4
   959  00009C                     testAD@F3144:
   960                           	opt stack 0
   961  00009C                     	ds	4
   962  0000A0                     simulate@F3114:
   963                           	opt stack 0
   964  0000A0                     	ds	4
   965  0000A4                     simulate@F3112:
   966                           	opt stack 0
   967  0000A4                     	ds	4
   968  0000A8                     _Latest:
   969                           	opt stack 0
   970  0000A8                     	ds	1
   971  0000A9                     _time:
   972                           	opt stack 0
   973  0000A9                     	ds	7
   974                           tblptru	equ	0xFF8
   975                           tblptrh	equ	0xFF7
   976                           tblptrl	equ	0xFF6
   977                           tablat	equ	0xFF5
   978                           postinc0	equ	0xFEE
   979                           wreg	equ	0xFE8
   980                           postdec1	equ	0xFE5
   981                           fsr1l	equ	0xFE1
   982                           
   983                           	psect	dataBANK0
   984  0000DA                     __pdataBANK0:
   985                           	opt stack 0
   986  0000DA                     mainloop@F3101:
   987                           	opt stack 0
   988  0000DA                     	ds	6
   989  0000E0                     mainloop@F3096:
   990                           	opt stack 0
   991  0000E0                     	ds	4
   992                           tblptru	equ	0xFF8
   993                           tblptrh	equ	0xFF7
   994                           tblptrl	equ	0xFF6
   995                           tablat	equ	0xFF5
   996                           postinc0	equ	0xFEE
   997                           wreg	equ	0xFE8
   998                           postdec1	equ	0xFE5
   999                           fsr1l	equ	0xFE1
  1000                           
  1001                           	psect	cstackBANK0
  1002  0000B0                     __pcstackBANK0:
  1003                           	opt stack 0
  1004  0000B0                     ??_isdigit:
  1005  0000B0                     ??_I2C_Master_Wait:
  1006  0000B0                     ?___wmul:
  1007                           	opt stack 0
  1008  0000B0                     ?___lwdiv:
  1009                           	opt stack 0
  1010  0000B0                     ?___lldiv:
  1011                           	opt stack 0
  1012  0000B0                     lcdNibble@temp:
  1013                           	opt stack 0
  1014  0000B0                     ReadEE@address:
  1015                           	opt stack 0
  1016  0000B0                     ___wmul@multiplier:
  1017                           	opt stack 0
  1018  0000B0                     ___lwdiv@dividend:
  1019                           	opt stack 0
  1020  0000B0                     ___lldiv@dividend:
  1021                           	opt stack 0
  1022                           
  1023                           ; 4 bytes @ 0x0
  1024  0000B0                     	ds	1
  1025  0000B1                     lcdNibble@data:
  1026                           	opt stack 0
  1027  0000B1                     I2C_Master_Read@a:
  1028                           	opt stack 0
  1029  0000B1                     _isdigit$1079:
  1030                           	opt stack 0
  1031  0000B1                     I2C_Master_Write@d:
  1032                           	opt stack 0
  1033                           
  1034                           ; 2 bytes @ 0x1
  1035  0000B1                     	ds	1
  1036  0000B2                     lcdInst@data:
  1037                           	opt stack 0
  1038  0000B2                     putch@data:
  1039                           	opt stack 0
  1040  0000B2                     I2C_Master_Read@temp:
  1041                           	opt stack 0
  1042  0000B2                     isdigit@c:
  1043                           	opt stack 0
  1044  0000B2                     ___wmul@multiplicand:
  1045                           	opt stack 0
  1046  0000B2                     ___lwdiv@divisor:
  1047                           	opt stack 0
  1048                           
  1049                           ; 2 bytes @ 0x2
  1050  0000B2                     	ds	1
  1051  0000B3                     ??_initLCD:
  1052  0000B3                     getTime@time:
  1053                           	opt stack 0
  1054                           
  1055                           ; 2 bytes @ 0x3
  1056  0000B3                     	ds	1
  1057  0000B4                     ___wmul@product:
  1058                           	opt stack 0
  1059  0000B4                     ___lwdiv@quotient:
  1060                           	opt stack 0
  1061  0000B4                     ___lldiv@divisor:
  1062                           	opt stack 0
  1063                           
  1064                           ; 4 bytes @ 0x4
  1065  0000B4                     	ds	1
  1066  0000B5                     getTime@i:
  1067                           	opt stack 0
  1068                           
  1069                           ; 1 bytes @ 0x5
  1070  0000B5                     	ds	1
  1071  0000B6                     ___lwdiv@counter:
  1072                           	opt stack 0
  1073                           
  1074                           ; 1 bytes @ 0x6
  1075  0000B6                     	ds	1
  1076  0000B7                     ?___lwmod:
  1077                           	opt stack 0
  1078  0000B7                     ___lwmod@dividend:
  1079                           	opt stack 0
  1080                           
  1081                           ; 2 bytes @ 0x7
  1082  0000B7                     	ds	1
  1083  0000B8                     ___lldiv@quotient:
  1084                           	opt stack 0
  1085                           
  1086                           ; 4 bytes @ 0x8
  1087  0000B8                     	ds	1
  1088  0000B9                     ___lwmod@divisor:
  1089                           	opt stack 0
  1090                           
  1091                           ; 2 bytes @ 0x9
  1092  0000B9                     	ds	2
  1093  0000BB                     ___lwmod@counter:
  1094                           	opt stack 0
  1095                           
  1096                           ; 1 bytes @ 0xB
  1097  0000BB                     	ds	1
  1098  0000BC                     ?_printf:
  1099                           	opt stack 0
  1100  0000BC                     ___lldiv@counter:
  1101                           	opt stack 0
  1102  0000BC                     printf@f:
  1103                           	opt stack 0
  1104                           
  1105                           ; 2 bytes @ 0xC
  1106  0000BC                     	ds	1
  1107  0000BD                     I2C_Master_Init@c:
  1108                           	opt stack 0
  1109                           
  1110                           ; 4 bytes @ 0xD
  1111  0000BD                     	ds	4
  1112  0000C1                     ??_I2C_Master_Init:
  1113                           
  1114                           ; 1 bytes @ 0x11
  1115  0000C1                     	ds	3
  1116  0000C4                     ??_printf:
  1117                           
  1118                           ; 1 bytes @ 0x14
  1119  0000C4                     	ds	1
  1120  0000C5                     
  1121                           ; 1 bytes @ 0x15
  1122  0000C5                     	ds	3
  1123  0000C8                     printf@cp:
  1124                           	opt stack 0
  1125                           
  1126                           ; 2 bytes @ 0x18
  1127  0000C8                     	ds	2
  1128  0000CA                     printf@idx:
  1129                           	opt stack 0
  1130                           
  1131                           ; 1 bytes @ 0x1A
  1132  0000CA                     	ds	1
  1133  0000CB                     printf@ap:
  1134                           	opt stack 0
  1135                           
  1136                           ; 2 bytes @ 0x1B
  1137  0000CB                     	ds	2
  1138  0000CD                     printf@len:
  1139                           	opt stack 0
  1140                           
  1141                           ; 2 bytes @ 0x1D
  1142  0000CD                     	ds	2
  1143  0000CF                     printf@prec:
  1144                           	opt stack 0
  1145                           
  1146                           ; 1 bytes @ 0x1F
  1147  0000CF                     	ds	1
  1148  0000D0                     printf@val:
  1149                           	opt stack 0
  1150                           
  1151                           ; 2 bytes @ 0x20
  1152  0000D0                     	ds	2
  1153  0000D2                     printf@flag:
  1154                           	opt stack 0
  1155                           
  1156                           ; 1 bytes @ 0x22
  1157  0000D2                     	ds	1
  1158  0000D3                     printf@width:
  1159                           	opt stack 0
  1160                           
  1161                           ; 2 bytes @ 0x23
  1162  0000D3                     	ds	2
  1163  0000D5                     printf@c:
  1164                           	opt stack 0
  1165                           
  1166                           ; 1 bytes @ 0x25
  1167  0000D5                     	ds	1
  1168  0000D6                     ??_showRTC:
  1169                           
  1170                           ; 1 bytes @ 0x26
  1171  0000D6                     	ds	2
  1172  0000D8                     ??_main:
  1173                           
  1174                           ; 1 bytes @ 0x28
  1175  0000D8                     	ds	2
  1176                           tblptru	equ	0xFF8
  1177                           tblptrh	equ	0xFF7
  1178                           tblptrl	equ	0xFF6
  1179                           tablat	equ	0xFF5
  1180                           postinc0	equ	0xFEE
  1181                           wreg	equ	0xFE8
  1182                           postdec1	equ	0xFE5
  1183                           fsr1l	equ	0xFE1
  1184                           
  1185                           	psect	cstackCOMRAM
  1186  000001                     __pcstackCOMRAM:
  1187                           	opt stack 0
  1188  000001                     ??_openGate:
  1189  000001                     ??_closeGate:
  1190  000001                     ??i2_I2C_Master_Wait:
  1191  000001                     ??i2_isdigit:
  1192  000001                     ?_AD:
  1193                           	opt stack 0
  1194  000001                     ?_captureKeypad:
  1195                           	opt stack 0
  1196  000001                     ?___awdiv:
  1197                           	opt stack 0
  1198  000001                     ?i2___wmul:
  1199                           	opt stack 0
  1200  000001                     ?i2___lwdiv:
  1201                           	opt stack 0
  1202  000001                     ?___ftpack:
  1203                           	opt stack 0
  1204  000001                     back@runs:
  1205                           	opt stack 0
  1206  000001                     i2lcdNibble@temp:
  1207                           	opt stack 0
  1208  000001                     WriteEE@address:
  1209                           	opt stack 0
  1210  000001                     ___awdiv@dividend:
  1211                           	opt stack 0
  1212  000001                     i2ReadEE@address:
  1213                           	opt stack 0
  1214  000001                     i2___wmul@multiplier:
  1215                           	opt stack 0
  1216  000001                     i2___lwdiv@dividend:
  1217                           	opt stack 0
  1218  000001                     ___ftpack@arg:
  1219                           	opt stack 0
  1220                           
  1221                           ; 3 bytes @ 0x0
  1222  000001                     	ds	1
  1223  000002                     back@result:
  1224                           	opt stack 0
  1225  000002                     i2lcdNibble@data:
  1226                           	opt stack 0
  1227  000002                     i2I2C_Master_Read@a:
  1228                           	opt stack 0
  1229  000002                     i2_isdigit$1079:
  1230                           	opt stack 0
  1231  000002                     i2I2C_Master_Write@d:
  1232                           	opt stack 0
  1233                           
  1234                           ; 2 bytes @ 0x1
  1235  000002                     	ds	1
  1236  000003                     ??_AD:
  1237  000003                     captureKeypad@keypress:
  1238                           	opt stack 0
  1239  000003                     WriteEE@data:
  1240                           	opt stack 0
  1241  000003                     i2lcdInst@data:
  1242                           	opt stack 0
  1243  000003                     i2putch@data:
  1244                           	opt stack 0
  1245  000003                     i2I2C_Master_Read@temp:
  1246                           	opt stack 0
  1247  000003                     i2isdigit@c:
  1248                           	opt stack 0
  1249  000003                     ReadRun@sorted:
  1250                           	opt stack 0
  1251  000003                     ___awdiv@divisor:
  1252                           	opt stack 0
  1253  000003                     i2___wmul@multiplicand:
  1254                           	opt stack 0
  1255  000003                     i2___lwdiv@divisor:
  1256                           	opt stack 0
  1257                           
  1258                           ; 2 bytes @ 0x2
  1259  000003                     	ds	1
  1260  000004                     ___ftpack@exp:
  1261                           	opt stack 0
  1262  000004                     i2getTime@time:
  1263                           	opt stack 0
  1264                           
  1265                           ; 2 bytes @ 0x3
  1266  000004                     	ds	1
  1267  000005                     AD@channel:
  1268                           	opt stack 0
  1269  000005                     ___awdiv@counter:
  1270                           	opt stack 0
  1271  000005                     ___ftpack@sign:
  1272                           	opt stack 0
  1273  000005                     ReadRun@time:
  1274                           	opt stack 0
  1275  000005                     i2___wmul@product:
  1276                           	opt stack 0
  1277  000005                     i2___lwdiv@quotient:
  1278                           	opt stack 0
  1279                           
  1280                           ; 2 bytes @ 0x4
  1281  000005                     	ds	1
  1282  000006                     ??___ftpack:
  1283  000006                     ___awdiv@sign:
  1284                           	opt stack 0
  1285  000006                     i2getTime@i:
  1286                           	opt stack 0
  1287                           
  1288                           ; 1 bytes @ 0x5
  1289  000006                     	ds	1
  1290  000007                     ??_ReadRun:
  1291  000007                     ?_HexDecToDec2:
  1292                           	opt stack 0
  1293  000007                     i2___lwdiv@counter:
  1294                           	opt stack 0
  1295  000007                     HexDecToDec2@hex:
  1296                           	opt stack 0
  1297  000007                     WriteRun@sorted:
  1298                           	opt stack 0
  1299  000007                     ___awdiv@quotient:
  1300                           	opt stack 0
  1301                           
  1302                           ; 2 bytes @ 0x6
  1303  000007                     	ds	1
  1304  000008                     ?i2___lwmod:
  1305                           	opt stack 0
  1306  000008                     i2___lwmod@dividend:
  1307                           	opt stack 0
  1308                           
  1309                           ; 2 bytes @ 0x7
  1310  000008                     	ds	1
  1311  000009                     ??_HexDecToDec2:
  1312  000009                     ?___awtoft:
  1313                           	opt stack 0
  1314  000009                     PWMC@widthus:
  1315                           	opt stack 0
  1316  000009                     WriteRun@time:
  1317                           	opt stack 0
  1318  000009                     ___awtoft@c:
  1319                           	opt stack 0
  1320                           
  1321                           ; 2 bytes @ 0x8
  1322  000009                     	ds	1
  1323  00000A                     i2___lwmod@divisor:
  1324                           	opt stack 0
  1325                           
  1326                           ; 2 bytes @ 0x9
  1327  00000A                     	ds	1
  1328  00000B                     ??_WriteRun:
  1329  00000B                     ReadRun@backruns:
  1330                           	opt stack 0
  1331  00000B                     PWMC@cycles:
  1332                           	opt stack 0
  1333                           
  1334                           ; 2 bytes @ 0xA
  1335  00000B                     	ds	1
  1336  00000C                     ___awtoft@sign:
  1337                           	opt stack 0
  1338  00000C                     i2___lwmod@counter:
  1339                           	opt stack 0
  1340  00000C                     HexDecToDec2@tenth:
  1341                           	opt stack 0
  1342  00000C                     ReadRun@add:
  1343                           	opt stack 0
  1344                           
  1345                           ; 2 bytes @ 0xB
  1346  00000C                     	ds	1
  1347  00000D                     ?i2_printf:
  1348                           	opt stack 0
  1349  00000D                     ?___ftmul:
  1350                           	opt stack 0
  1351  00000D                     PWMC@port:
  1352                           	opt stack 0
  1353  00000D                     WriteRun@add:
  1354                           	opt stack 0
  1355  00000D                     i2printf@f:
  1356                           	opt stack 0
  1357  00000D                     ___ftmul@f1:
  1358                           	opt stack 0
  1359                           
  1360                           ; 3 bytes @ 0xC
  1361  00000D                     	ds	1
  1362  00000E                     HexDecToDec2@digit:
  1363                           	opt stack 0
  1364                           
  1365                           ; 2 bytes @ 0xD
  1366  00000E                     	ds	1
  1367  00000F                     ??_PWMC:
  1368                           
  1369                           ; 1 bytes @ 0xE
  1370  00000F                     	ds	1
  1371  000010                     ___ftmul@f2:
  1372                           	opt stack 0
  1373                           
  1374                           ; 3 bytes @ 0xF
  1375  000010                     	ds	1
  1376  000011                     ??i2_printf:
  1377  000011                     _PWMC$1423:
  1378                           	opt stack 0
  1379                           
  1380                           ; 1 bytes @ 0x10
  1381  000011                     	ds	1
  1382  000012                     _PWMC$1424:
  1383                           	opt stack 0
  1384                           
  1385                           ; 1 bytes @ 0x11
  1386  000012                     	ds	1
  1387  000013                     ??___ftmul:
  1388  000013                     _PWMC$1425:
  1389                           	opt stack 0
  1390                           
  1391                           ; 1 bytes @ 0x12
  1392  000013                     	ds	1
  1393  000014                     PWMC@countdown:
  1394                           	opt stack 0
  1395                           
  1396                           ; 2 bytes @ 0x13
  1397  000014                     	ds	1
  1398  000015                     i2printf@cp:
  1399                           	opt stack 0
  1400                           
  1401                           ; 2 bytes @ 0x14
  1402  000015                     	ds	1
  1403  000016                     ___ftmul@exp:
  1404                           	opt stack 0
  1405  000016                     CW90@port:
  1406                           	opt stack 0
  1407  000016                     CCW90@port:
  1408                           	opt stack 0
  1409                           
  1410                           ; 2 bytes @ 0x15
  1411  000016                     	ds	1
  1412  000017                     i2printf@idx:
  1413                           	opt stack 0
  1414  000017                     ___ftmul@f3_as_product:
  1415                           	opt stack 0
  1416                           
  1417                           ; 3 bytes @ 0x16
  1418  000017                     	ds	1
  1419  000018                     ??_CCW90:
  1420  000018                     ??_CW90:
  1421  000018                     i2printf@ap:
  1422                           	opt stack 0
  1423                           
  1424                           ; 2 bytes @ 0x17
  1425  000018                     	ds	2
  1426  00001A                     ___ftmul@cntr:
  1427                           	opt stack 0
  1428  00001A                     i2printf@len:
  1429                           	opt stack 0
  1430                           
  1431                           ; 2 bytes @ 0x19
  1432  00001A                     	ds	1
  1433  00001B                     ___ftmul@sign:
  1434                           	opt stack 0
  1435                           
  1436                           ; 1 bytes @ 0x1A
  1437  00001B                     	ds	1
  1438  00001C                     i2printf@prec:
  1439                           	opt stack 0
  1440  00001C                     ___ftge@ff1:
  1441                           	opt stack 0
  1442                           
  1443                           ; 3 bytes @ 0x1B
  1444  00001C                     	ds	1
  1445  00001D                     i2printf@val:
  1446                           	opt stack 0
  1447                           
  1448                           ; 2 bytes @ 0x1C
  1449  00001D                     	ds	2
  1450  00001F                     i2printf@flag:
  1451                           	opt stack 0
  1452  00001F                     ___ftge@ff2:
  1453                           	opt stack 0
  1454                           
  1455                           ; 3 bytes @ 0x1E
  1456  00001F                     	ds	1
  1457  000020                     i2printf@width:
  1458                           	opt stack 0
  1459                           
  1460                           ; 2 bytes @ 0x1F
  1461  000020                     	ds	2
  1462  000022                     ??___ftge:
  1463  000022                     i2printf@c:
  1464                           	opt stack 0
  1465                           
  1466                           ; 1 bytes @ 0x21
  1467  000022                     	ds	1
  1468  000023                     showInfo@time:
  1469                           	opt stack 0
  1470  000023                     _stopMoving$577:
  1471                           	opt stack 0
  1472  000023                     printV@charged:
  1473                           	opt stack 0
  1474                           
  1475                           ; 2 bytes @ 0x22
  1476  000023                     	ds	2
  1477  000025                     ?_checkV:
  1478                           	opt stack 0
  1479  000025                     stopMoving@em:
  1480                           	opt stack 0
  1481  000025                     showInfo@sorted:
  1482                           	opt stack 0
  1483  000025                     checkV@threshhold:
  1484                           	opt stack 0
  1485                           
  1486                           ; 2 bytes @ 0x24
  1487  000025                     	ds	2
  1488  000027                     ??_showInfo:
  1489  000027                     ??_checkV:
  1490                           
  1491                           ; 1 bytes @ 0x26
  1492  000027                     	ds	2
  1493  000029                     checkV@tmp:
  1494                           	opt stack 0
  1495                           
  1496                           ; 2 bytes @ 0x28
  1497  000029                     	ds	2
  1498  00002B                     checkV@channel:
  1499                           	opt stack 0
  1500                           
  1501                           ; 1 bytes @ 0x2A
  1502  00002B                     	ds	1
  1503  00002C                     showInfo@type:
  1504                           	opt stack 0
  1505  00002C                     checkV@voltage:
  1506                           	opt stack 0
  1507                           
  1508                           ; 2 bytes @ 0x2B
  1509  00002C                     	ds	2
  1510  00002E                     ?_check9:
  1511                           	opt stack 0
  1512  00002E                     ?_checkC:
  1513                           	opt stack 0
  1514  00002E                     ?_checkAA:
  1515                           	opt stack 0
  1516  00002E                     showInfo@stop:
  1517                           	opt stack 0
  1518  00002E                     checkAA@sorted:
  1519                           	opt stack 0
  1520  00002E                     checkC@sorted:
  1521                           	opt stack 0
  1522  00002E                     check9@sorted:
  1523                           	opt stack 0
  1524                           
  1525                           ; 2 bytes @ 0x2D
  1526  00002E                     	ds	2
  1527  000030                     ??_check9:
  1528  000030                     ??_checkC:
  1529  000030                     ??_checkAA:
  1530  000030                     ??_PermLog:
  1531  000030                     ??_mainloop:
  1532                           
  1533                           ; 1 bytes @ 0x2F
  1534  000030                     	ds	2
  1535  000032                     checkAA@V:
  1536                           	opt stack 0
  1537  000032                     checkC@V:
  1538                           	opt stack 0
  1539  000032                     check9@V:
  1540                           	opt stack 0
  1541  000032                     mainloop@sorted:
  1542                           	opt stack 0
  1543  000032                     PermLog@sorted:
  1544                           	opt stack 0
  1545                           
  1546                           ; 4 bytes @ 0x31
  1547  000032                     	ds	2
  1548  000034                     ??_simulate:
  1549                           
  1550                           ; 1 bytes @ 0x33
  1551  000034                     	ds	2
  1552  000036                     PermLog@goback:
  1553                           	opt stack 0
  1554  000036                     _simulate$1521:
  1555                           	opt stack 0
  1556  000036                     mainloop@portCW:
  1557                           	opt stack 0
  1558                           
  1559                           ; 6 bytes @ 0x35
  1560  000036                     	ds	1
  1561  000037                     PermLog@time:
  1562                           	opt stack 0
  1563                           
  1564                           ; 2 bytes @ 0x36
  1565  000037                     	ds	1
  1566  000038                     simulate@portShake:
  1567                           	opt stack 0
  1568                           
  1569                           ; 6 bytes @ 0x37
  1570  000038                     	ds	1
  1571  000039                     PermLog@backruns:
  1572                           	opt stack 0
  1573                           
  1574                           ; 2 bytes @ 0x38
  1575  000039                     	ds	3
  1576  00003C                     mainloop@period:
  1577                           	opt stack 0
  1578                           
  1579                           ; 2 bytes @ 0x3B
  1580  00003C                     	ds	2
  1581  00003E                     mainloop@i:
  1582                           	opt stack 0
  1583  00003E                     simulate@portCW:
  1584                           	opt stack 0
  1585                           
  1586                           ; 6 bytes @ 0x3D
  1587  00003E                     	ds	6
  1588  000044                     simulate@portCCW:
  1589                           	opt stack 0
  1590                           
  1591                           ; 6 bytes @ 0x43
  1592  000044                     	ds	6
  1593  00004A                     simulate@now:
  1594                           	opt stack 0
  1595                           
  1596                           ; 4 bytes @ 0x49
  1597  00004A                     	ds	4
  1598  00004E                     simulate@start:
  1599                           	opt stack 0
  1600                           
  1601                           ; 4 bytes @ 0x4D
  1602  00004E                     	ds	4
  1603  000052                     simulate@notyet:
  1604                           	opt stack 0
  1605                           
  1606                           ; 1 bytes @ 0x51
  1607  000052                     	ds	1
  1608  000053                     simulate@shakeCW:
  1609                           	opt stack 0
  1610                           
  1611                           ; 1 bytes @ 0x52
  1612  000053                     	ds	1
  1613  000054                     simulate@C:
  1614                           	opt stack 0
  1615                           
  1616                           ; 2 bytes @ 0x53
  1617  000054                     	ds	2
  1618  000056                     simulate@V9:
  1619                           	opt stack 0
  1620                           
  1621                           ; 2 bytes @ 0x55
  1622  000056                     	ds	2
  1623  000058                     simulate@period:
  1624                           	opt stack 0
  1625                           
  1626                           ; 2 bytes @ 0x57
  1627  000058                     	ds	2
  1628  00005A                     simulate@AA:
  1629                           	opt stack 0
  1630                           
  1631                           ; 2 bytes @ 0x59
  1632  00005A                     	ds	2
  1633  00005C                     simulate@sorted:
  1634                           	opt stack 0
  1635                           
  1636                           ; 4 bytes @ 0x5B
  1637  00005C                     	ds	4
  1638  000060                     ??_intrpt:
  1639                           
  1640                           ; 1 bytes @ 0x5F
  1641  000060                     	ds	16
  1642  000070                     intrpt@keypress:
  1643                           	opt stack 0
  1644                           
  1645                           ; 1 bytes @ 0x6F
  1646  000070                     	ds	1
  1647  000071                     intrpt@port:
  1648                           	opt stack 0
  1649                           
  1650                           ; 6 bytes @ 0x70
  1651  000071                     	ds	6
  1652                           tblptru	equ	0xFF8
  1653                           tblptrh	equ	0xFF7
  1654                           tblptrl	equ	0xFF6
  1655                           tablat	equ	0xFF5
  1656                           postinc0	equ	0xFEE
  1657                           wreg	equ	0xFE8
  1658                           postdec1	equ	0xFE5
  1659                           fsr1l	equ	0xFE1
  1660                           
  1661 ;;
  1662 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1663 ;;
  1664 ;; *************** function _main *****************
  1665 ;; Defined at:
  1666 ;;		line 342 in file "main.c"
  1667 ;; Parameters:    Size  Location     Type
  1668 ;;		None
  1669 ;; Auto vars:     Size  Location     Type
  1670 ;;		None
  1671 ;; Return value:  Size  Location     Type
  1672 ;;                  2  189[None  ] int 
  1673 ;; Registers used:
  1674 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1675 ;; Tracked objects:
  1676 ;;		On entry : 0/0
  1677 ;;		On exit  : 0/0
  1678 ;;		Unchanged: 0/0
  1679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1682 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1683 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1684 ;;Total ram usage:        2 bytes
  1685 ;; Hardware stack levels required when called:   11
  1686 ;; This function calls:
  1687 ;;		_initialize
  1688 ;;		_lcdInst
  1689 ;;		_printf
  1690 ;;		_showRTC
  1691 ;; This function is called by:
  1692 ;;		Startup code after reset
  1693 ;; This function uses a non-reentrant model
  1694 ;;
  1695                           
  1696                           	psect	text0
  1697  0021FE                     __ptext0:
  1698                           	opt stack 0
  1699  0021FE                     _main:
  1700                           	opt stack 20
  1701                           
  1702                           ;main.c: 343: initialize();
  1703                           
  1704                           ; BSR set to: 0
  1705                           ;incstack = 0
  1706  0021FE  EC7D  F010         	call	_initialize	;wreg free
  1707                           
  1708                           ;main.c: 345: lcdInst(0b10000000);
  1709  002202  0E80               	movlw	128
  1710  002204  EC21  F013         	call	_lcdInst
  1711                           
  1712                           ;main.c: 346: printf("Welcome!          ");
  1713  002208  0E54               	movlw	low STR_21
  1714  00220A  0100               	movlb	0	; () banked
  1715  00220C  6FBC               	movwf	printf@f& (0+255),b
  1716  00220E  0EFF               	movlw	high STR_21
  1717  002210  0100               	movlb	0	; () banked
  1718  002212  6FBD               	movwf	(printf@f+1)& (0+255),b
  1719  002214  EC09  F000         	call	_printf	;wreg free
  1720                           
  1721                           ;main.c: 348: _delay((unsigned long)((500)*(8000000/4000.0)));
  1722  002218  0E06               	movlw	6
  1723  00221A  0100               	movlb	0	; () banked
  1724  00221C  6FD9               	movwf	(??_main+1)& (0+255),b
  1725  00221E  0E13               	movlw	19
  1726  002220  0100               	movlb	0	; () banked
  1727  002222  6FD8               	movwf	??_main& (0+255),b
  1728  002224  0EAD               	movlw	173
  1729  002226                     u3437:
  1730  002226  2EE8               	decfsz	wreg,f,c
  1731  002228  D7FE               	bra	u3437
  1732  00222A  2FD8               	decfsz	??_main& (0+255),f,b
  1733  00222C  D7FC               	bra	u3437
  1734  00222E  2FD9               	decfsz	(??_main+1)& (0+255),f,b
  1735  002230  D7FA               	bra	u3437
  1736  002232  D000               	nop2	
  1737                           
  1738                           ;main.c: 351: INT1IE = 1;
  1739  002234  86F0               	bsf	intcon3,3,c	;volatile
  1740                           
  1741                           ;main.c: 352: INT1IF = 0;
  1742  002236  90F0               	bcf	intcon3,0,c	;volatile
  1743                           
  1744                           ;main.c: 353: INT2IE = 0;
  1745  002238  98F0               	bcf	intcon3,4,c	;volatile
  1746                           
  1747                           ;main.c: 354: (INTCONbits.GIE = 1);
  1748  00223A  8EF2               	bsf	intcon,7,c	;volatile
  1749                           
  1750                           ;main.c: 355: mode = 0;
  1751  00223C  0E00               	movlw	0
  1752  00223E  6E7C               	movwf	_mode+1,c
  1753  002240  0E00               	movlw	0
  1754  002242  6E7B               	movwf	_mode,c
  1755  002244                     l4493:
  1756  002244  EC6C  F00D         	call	_showRTC	;wreg free
  1757  002248  D7FD               	goto	l4493
  1758  00224A  00FF               	reset		;# 
  1759  00224C                     __end_of_main:
  1760                           	opt stack 0
  1761                           tblptru	equ	0xFF8
  1762                           tblptrh	equ	0xFF7
  1763                           tblptrl	equ	0xFF6
  1764                           tablat	equ	0xFF5
  1765                           intcon	equ	0xFF2
  1766                           intcon3	equ	0xFF0
  1767                           postinc0	equ	0xFEE
  1768                           wreg	equ	0xFE8
  1769                           postdec1	equ	0xFE5
  1770                           fsr1l	equ	0xFE1
  1771                           
  1772 ;; *************** function _showRTC *****************
  1773 ;; Defined at:
  1774 ;;		line 229 in file "main.c"
  1775 ;; Parameters:    Size  Location     Type
  1776 ;;		None
  1777 ;; Auto vars:     Size  Location     Type
  1778 ;;		None
  1779 ;; Return value:  Size  Location     Type
  1780 ;;                  1    wreg      void 
  1781 ;; Registers used:
  1782 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1783 ;; Tracked objects:
  1784 ;;		On entry : 0/0
  1785 ;;		On exit  : 0/0
  1786 ;;		Unchanged: 0/0
  1787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1790 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1791 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1792 ;;Total ram usage:        2 bytes
  1793 ;; Hardware stack levels used:    1
  1794 ;; Hardware stack levels required when called:   10
  1795 ;; This function calls:
  1796 ;;		_getTime
  1797 ;;		_lcdInst
  1798 ;;		_printf
  1799 ;; This function is called by:
  1800 ;;		_main
  1801 ;; This function uses a non-reentrant model
  1802 ;;
  1803                           
  1804                           	psect	text1
  1805  001AD8                     __ptext1:
  1806                           	opt stack 0
  1807  001AD8                     _showRTC:
  1808                           	opt stack 20
  1809                           
  1810                           ;main.c: 231: getTime(time);
  1811                           
  1812                           ;incstack = 0
  1813  001AD8  0EA9               	movlw	low _time
  1814  001ADA  0100               	movlb	0	; () banked
  1815  001ADC  6FB3               	movwf	getTime@time& (0+255),b
  1816  001ADE  0E00               	movlw	high _time
  1817  001AE0  0100               	movlb	0	; () banked
  1818  001AE2  6FB4               	movwf	(getTime@time+1)& (0+255),b
  1819  001AE4  ECB1  F00D         	call	_getTime	;wreg free
  1820                           
  1821                           ;main.c: 232: lcdInst(0b10000000);
  1822  001AE8  0E80               	movlw	128
  1823  001AEA  EC21  F013         	call	_lcdInst
  1824                           
  1825                           ;main.c: 233: printf("    %02x/%02x/%02x      ", time[6], time[5], time[4]);
  1826  001AEE  0EEE               	movlw	low STR_18
  1827  001AF0  0100               	movlb	0	; () banked
  1828  001AF2  6FBC               	movwf	printf@f& (0+255),b
  1829  001AF4  0EFD               	movlw	high STR_18
  1830  001AF6  0100               	movlb	0	; () banked
  1831  001AF8  6FBD               	movwf	(printf@f+1)& (0+255),b
  1832  001AFA  C0AF  F0BE         	movff	_time+6,?_printf+2
  1833  001AFE  0100               	movlb	0	; () banked
  1834  001B00  6BBF               	clrf	(?_printf+3)& (0+255),b
  1835  001B02  C0AE  F0C0         	movff	_time+5,?_printf+4
  1836  001B06  0100               	movlb	0	; () banked
  1837  001B08  6BC1               	clrf	(?_printf+5)& (0+255),b
  1838  001B0A  C0AD  F0C2         	movff	_time+4,?_printf+6
  1839  001B0E  0100               	movlb	0	; () banked
  1840  001B10  6BC3               	clrf	(?_printf+7)& (0+255),b
  1841  001B12  EC09  F000         	call	_printf	;wreg free
  1842                           
  1843                           ;main.c: 234: lcdInst(0b11000000);
  1844  001B16  0EC0               	movlw	192
  1845  001B18  EC21  F013         	call	_lcdInst
  1846                           
  1847                           ;main.c: 235: printf("    %02x:%02x:%02x      ", time[2], time[1], time[0]);
  1848  001B1C  0E07               	movlw	low STR_19
  1849  001B1E  0100               	movlb	0	; () banked
  1850  001B20  6FBC               	movwf	printf@f& (0+255),b
  1851  001B22  0EFE               	movlw	high STR_19
  1852  001B24  0100               	movlb	0	; () banked
  1853  001B26  6FBD               	movwf	(printf@f+1)& (0+255),b
  1854  001B28  C0AB  F0BE         	movff	_time+2,?_printf+2
  1855  001B2C  0100               	movlb	0	; () banked
  1856  001B2E  6BBF               	clrf	(?_printf+3)& (0+255),b
  1857  001B30  C0AA  F0C0         	movff	_time+1,?_printf+4
  1858  001B34  0100               	movlb	0	; () banked
  1859  001B36  6BC1               	clrf	(?_printf+5)& (0+255),b
  1860  001B38  C0A9  F0C2         	movff	_time,?_printf+6
  1861  001B3C  0100               	movlb	0	; () banked
  1862  001B3E  6BC3               	clrf	(?_printf+7)& (0+255),b
  1863  001B40  EC09  F000         	call	_printf	;wreg free
  1864                           
  1865                           ;main.c: 236: _delay((unsigned long)((250)*(8000000/4000.0)));
  1866  001B44  0E03               	movlw	3
  1867  001B46  0100               	movlb	0	; () banked
  1868  001B48  6FD7               	movwf	(??_showRTC+1)& (0+255),b
  1869  001B4A  0E8A               	movlw	138
  1870  001B4C  0100               	movlb	0	; () banked
  1871  001B4E  6FD6               	movwf	??_showRTC& (0+255),b
  1872  001B50  0E55               	movlw	85
  1873  001B52                     u3447:
  1874  001B52  2EE8               	decfsz	wreg,f,c
  1875  001B54  D7FE               	bra	u3447
  1876  001B56  2FD6               	decfsz	??_showRTC& (0+255),f,b
  1877  001B58  D7FC               	bra	u3447
  1878  001B5A  2FD7               	decfsz	(??_showRTC+1)& (0+255),f,b
  1879  001B5C  D7FA               	bra	u3447
  1880  001B5E  D000               	nop2	
  1881  001B60  0012               	return		;funcret
  1882  001B62                     __end_of_showRTC:
  1883                           	opt stack 0
  1884                           tblptru	equ	0xFF8
  1885                           tblptrh	equ	0xFF7
  1886                           tblptrl	equ	0xFF6
  1887                           tablat	equ	0xFF5
  1888                           intcon	equ	0xFF2
  1889                           intcon3	equ	0xFF0
  1890                           postinc0	equ	0xFEE
  1891                           wreg	equ	0xFE8
  1892                           postdec1	equ	0xFE5
  1893                           fsr1l	equ	0xFE1
  1894                           
  1895 ;; *************** function _printf *****************
  1896 ;; Defined at:
  1897 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  1898 ;; Parameters:    Size  Location     Type
  1899 ;;  f               2   12[BANK0 ] PTR const unsigned char 
  1900 ;;		 -> STR_46(17), STR_45(17), STR_44(18), STR_43(22), 
  1901 ;;		 -> STR_42(4), STR_41(3), STR_40(4), STR_39(5), 
  1902 ;;		 -> STR_38(4), STR_37(18), STR_36(20), STR_35(16), 
  1903 ;;		 -> STR_34(21), STR_33(16), STR_32(22), STR_31(16), 
  1904 ;;		 -> STR_30(21), STR_29(16), STR_28(22), STR_27(23), 
  1905 ;;		 -> STR_26(24), STR_25(21), STR_24(24), STR_23(24), 
  1906 ;;		 -> STR_22(22), STR_21(19), STR_20(18), STR_19(25), 
  1907 ;;		 -> STR_18(25), STR_17(27), STR_16(3), STR_15(3), 
  1908 ;;		 -> STR_14(3), STR_13(5), STR_12(3), STR_11(3), 
  1909 ;;		 -> STR_10(3), STR_9(4), STR_8(3), STR_7(3), 
  1910 ;;		 -> STR_6(3), STR_5(4), STR_4(5), STR_3(21), 
  1911 ;;		 -> STR_2(27), STR_1(21), 
  1912 ;; Auto vars:     Size  Location     Type
  1913 ;;  idx             1   26[BANK0 ] unsigned char 
  1914 ;;  tmpval          4    0        struct .
  1915 ;;  width           2   35[BANK0 ] int 
  1916 ;;  val             2   32[BANK0 ] unsigned int 
  1917 ;;  len             2   29[BANK0 ] unsigned int 
  1918 ;;  ap              2   27[BANK0 ] PTR void [1]
  1919 ;;		 -> ?i2_printf(2), ?_printf(2), 
  1920 ;;  cp              2   24[BANK0 ] PTR const unsigned char 
  1921 ;;		 -> printf@c(1), 
  1922 ;;  c               1   37[BANK0 ] char 
  1923 ;;  flag            1   34[BANK0 ] unsigned char 
  1924 ;;  prec            1   31[BANK0 ] char 
  1925 ;; Return value:  Size  Location     Type
  1926 ;;                  2   12[BANK0 ] int 
  1927 ;; Registers used:
  1928 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1929 ;; Tracked objects:
  1930 ;;		On entry : 0/0
  1931 ;;		On exit  : 0/0
  1932 ;;		Unchanged: 0/0
  1933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1934 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1935 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1936 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1937 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1938 ;;Total ram usage:       26 bytes
  1939 ;; Hardware stack levels used:    1
  1940 ;; Hardware stack levels required when called:    9
  1941 ;; This function calls:
  1942 ;;		___lwdiv
  1943 ;;		___lwmod
  1944 ;;		___wmul
  1945 ;;		_isdigit
  1946 ;;		_putch
  1947 ;; This function is called by:
  1948 ;;		_showRTC
  1949 ;;		_main
  1950 ;;		_testAD
  1951 ;; This function uses a non-reentrant model
  1952 ;;
  1953                           
  1954                           	psect	text2
  1955  000012                     __ptext2:
  1956                           	opt stack 0
  1957  000012                     _printf:
  1958                           	opt stack 20
  1959                           
  1960                           ;doprnt.c: 466: va_list ap;
  1961                           ;doprnt.c: 499: signed char c;
  1962                           ;doprnt.c: 501: int width;
  1963                           ;doprnt.c: 506: signed char prec;
  1964                           ;doprnt.c: 508: unsigned char flag;
  1965                           ;doprnt.c: 523: union {
  1966                           ;doprnt.c: 524: unsigned long vd;
  1967                           ;doprnt.c: 525: double integ;
  1968                           ;doprnt.c: 526: } tmpval;
  1969                           ;doprnt.c: 528: unsigned int val;
  1970                           ;doprnt.c: 529: unsigned len;
  1971                           ;doprnt.c: 530: const char * cp;
  1972                           ;doprnt.c: 533: *ap = __va_start();
  1973                           
  1974                           ;incstack = 0
  1975  000012  0EBE               	movlw	low (?_printf+2)
  1976  000014  0100               	movlb	0	; () banked
  1977  000016  6FCB               	movwf	printf@ap& (0+255),b
  1978  000018  0E00               	movlw	high (?_printf+2)
  1979  00001A  0100               	movlb	0	; () banked
  1980  00001C  6FCC               	movwf	(printf@ap+1)& (0+255),b
  1981                           
  1982                           ;doprnt.c: 536: while(c = *f++) {
  1983  00001E  D21F               	goto	l3827
  1984  000020                     l3677:
  1985                           
  1986                           ; BSR set to: 0
  1987                           ;doprnt.c: 538: if(c != '%')
  1988  000020  0E25               	movlw	37
  1989  000022  0100               	movlb	0	; () banked
  1990  000024  19D5               	xorwf	printf@c& (0+255),w,b
  1991  000026  B4D8               	btfsc	status,2,c
  1992  000028  D005               	goto	l3681
  1993                           
  1994                           ; BSR set to: 0
  1995                           ;doprnt.c: 540: {
  1996                           ;doprnt.c: 541: (putch(c) );
  1997  00002A  0100               	movlb	0	; () banked
  1998  00002C  51D5               	movf	printf@c& (0+255),w,b
  1999  00002E  EC19  F013         	call	_putch
  2000                           
  2001                           ;doprnt.c: 542: continue;
  2002  000032  D215               	goto	l3827
  2003  000034                     l3681:
  2004                           
  2005                           ;doprnt.c: 543: }
  2006                           ;doprnt.c: 546: width = 0;
  2007  000034  0E00               	movlw	0
  2008  000036  0100               	movlb	0	; () banked
  2009  000038  6FD4               	movwf	(printf@width+1)& (0+255),b
  2010  00003A  0E00               	movlw	0
  2011  00003C  6FD3               	movwf	printf@width& (0+255),b
  2012                           
  2013                           ;doprnt.c: 548: flag = 0;
  2014  00003E  0E00               	movlw	0
  2015  000040  0100               	movlb	0	; () banked
  2016  000042  6FD2               	movwf	printf@flag& (0+255),b
  2017                           
  2018                           ; BSR set to: 0
  2019                           ;doprnt.c: 551: switch(*f) {
  2020                           
  2021                           ;doprnt.c: 550: for(;;) {
  2022  000044  D005               	goto	l3687
  2023  000046                     l3683:
  2024                           
  2025                           ;doprnt.c: 580: flag |= 0x04;
  2026  000046  0100               	movlb	0	; () banked
  2027  000048  85D2               	bsf	printf@flag& (0+255),2,b
  2028                           
  2029                           ;doprnt.c: 581: f++;
  2030  00004A  0100               	movlb	0	; () banked
  2031  00004C  4BBC               	infsnz	printf@f& (0+255),f,b
  2032  00004E  2BBD               	incf	(printf@f+1)& (0+255),f,b
  2033  000050                     l3687:
  2034  000050  C0BC  FFF6         	movff	printf@f,tblptrl
  2035  000054  C0BD  FFF7         	movff	printf@f+1,tblptrh
  2036  000058                     	if	0	;tblptru may be non-zero
  2037  000058                     	endif
  2038  000058                     	if	0	;tblptru may be non-zero
  2039  000058                     	endif
  2040  000058  0008               	tblrd		*
  2041  00005A  50F5               	movf	tablat,w,c
  2042                           
  2043                           ; Switch size 1, requested type "space"
  2044                           ; Number of cases is 1, Range of values is 48 to 48
  2045                           ; switch strategies available:
  2046                           ; Name         Instructions Cycles
  2047                           ; simple_byte            4     3 (average)
  2048                           ;	Chosen strategy is simple_byte
  2049  00005C  0A30               	xorlw	48	; case 48
  2050  00005E  B4D8               	btfsc	status,2,c
  2051  000060  D7F2               	goto	l3683
  2052                           
  2053                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2054                           
  2055                           ;doprnt.c: 586: }
  2056                           
  2057                           ;doprnt.c: 585: break;
  2058  000062  C0BC  FFF6         	movff	printf@f,tblptrl
  2059  000066  C0BD  FFF7         	movff	printf@f+1,tblptrh
  2060  00006A                     	if	0	;tblptru may be non-zero
  2061  00006A                     	endif
  2062  00006A                     	if	0	;tblptru may be non-zero
  2063  00006A                     	endif
  2064  00006A  0008               	tblrd		*
  2065  00006C  50F5               	movf	tablat,w,c
  2066  00006E  EC1B  F012         	call	_isdigit
  2067  000072  A0D8               	btfss	status,0,c
  2068  000074  D092               	goto	l3727
  2069                           
  2070                           ;doprnt.c: 598: width = 0;
  2071  000076  0E00               	movlw	0
  2072  000078  0100               	movlb	0	; () banked
  2073  00007A  6FD4               	movwf	(printf@width+1)& (0+255),b
  2074  00007C  0E00               	movlw	0
  2075  00007E  6FD3               	movwf	printf@width& (0+255),b
  2076  000080                     l3693:
  2077                           
  2078                           ;doprnt.c: 600: width *= 10;
  2079  000080  C0D3  F0B0         	movff	printf@width,___wmul@multiplier
  2080  000084  C0D4  F0B1         	movff	printf@width+1,___wmul@multiplier+1
  2081  000088  0E00               	movlw	0
  2082  00008A  0100               	movlb	0	; () banked
  2083  00008C  6FB3               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2084  00008E  0E0A               	movlw	10
  2085  000090  6FB2               	movwf	___wmul@multiplicand& (0+255),b
  2086  000092  ECE9  F011         	call	___wmul	;wreg free
  2087  000096  C0B0  F0D3         	movff	?___wmul,printf@width
  2088  00009A  C0B1  F0D4         	movff	?___wmul+1,printf@width+1
  2089                           
  2090                           ;doprnt.c: 601: width += *f++ - '0';
  2091  00009E  0ED0               	movlw	208
  2092  0000A0  0100               	movlb	0	; () banked
  2093  0000A2  6FC4               	movwf	??_printf& (0+255),b
  2094  0000A4  0EFF               	movlw	255
  2095  0000A6  0100               	movlb	0	; () banked
  2096  0000A8  6FC5               	movwf	(??_printf+1)& (0+255),b
  2097  0000AA  C0BC  FFF6         	movff	printf@f,tblptrl
  2098  0000AE  C0BD  FFF7         	movff	printf@f+1,tblptrh
  2099  0000B2                     	if	0	;tblptru may be non-zero
  2100  0000B2                     	endif
  2101  0000B2                     	if	0	;tblptru may be non-zero
  2102  0000B2                     	endif
  2103  0000B2  0008               	tblrd		*
  2104  0000B4  50F5               	movf	tablat,w,c
  2105  0000B6  0100               	movlb	0	; () banked
  2106  0000B8  6FC6               	movwf	(??_printf+2)& (0+255),b
  2107  0000BA  6BC7               	clrf	(??_printf+3)& (0+255),b
  2108  0000BC  0100               	movlb	0	; () banked
  2109  0000BE  51C4               	movf	??_printf& (0+255),w,b
  2110  0000C0  0100               	movlb	0	; () banked
  2111  0000C2  27C6               	addwf	(??_printf+2)& (0+255),f,b
  2112  0000C4  0100               	movlb	0	; () banked
  2113  0000C6  51C5               	movf	(??_printf+1)& (0+255),w,b
  2114  0000C8  0100               	movlb	0	; () banked
  2115  0000CA  23C7               	addwfc	(??_printf+3)& (0+255),f,b
  2116  0000CC  0100               	movlb	0	; () banked
  2117  0000CE  51C6               	movf	(??_printf+2)& (0+255),w,b
  2118  0000D0  0100               	movlb	0	; () banked
  2119  0000D2  27D3               	addwf	printf@width& (0+255),f,b
  2120  0000D4  0100               	movlb	0	; () banked
  2121  0000D6  51C7               	movf	(??_printf+3)& (0+255),w,b
  2122  0000D8  0100               	movlb	0	; () banked
  2123  0000DA  23D4               	addwfc	(printf@width+1)& (0+255),f,b
  2124                           
  2125                           ; BSR set to: 0
  2126  0000DC  0100               	movlb	0	; () banked
  2127  0000DE  4BBC               	infsnz	printf@f& (0+255),f,b
  2128  0000E0  2BBD               	incf	(printf@f+1)& (0+255),f,b
  2129                           
  2130                           ; BSR set to: 0
  2131                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2132  0000E2  C0BC  FFF6         	movff	printf@f,tblptrl
  2133  0000E6  C0BD  FFF7         	movff	printf@f+1,tblptrh
  2134  0000EA                     	if	0	;tblptru may be non-zero
  2135  0000EA                     	endif
  2136  0000EA                     	if	0	;tblptru may be non-zero
  2137  0000EA                     	endif
  2138  0000EA  0008               	tblrd		*
  2139  0000EC  50F5               	movf	tablat,w,c
  2140  0000EE  EC1B  F012         	call	_isdigit
  2141  0000F2  A0D8               	btfss	status,0,c
  2142  0000F4  D052               	goto	l3727
  2143  0000F6  D7C4               	goto	l3693
  2144  0000F8                     l3701:
  2145                           
  2146                           ;doprnt.c: 721: flag |= 0x80;
  2147  0000F8  0100               	movlb	0	; () banked
  2148  0000FA  8FD2               	bsf	printf@flag& (0+255),7,b
  2149                           
  2150                           ;doprnt.c: 723: break;
  2151  0000FC  D06A               	goto	l3729
  2152  0000FE                     l3703:
  2153                           
  2154                           ; BSR set to: 0
  2155                           ;doprnt.c: 757: if(width > len)
  2156  0000FE  0100               	movlb	0	; () banked
  2157  000100  51D3               	movf	printf@width& (0+255),w,b
  2158  000102  0100               	movlb	0	; () banked
  2159  000104  5DCD               	subwf	printf@len& (0+255),w,b
  2160  000106  0100               	movlb	0	; () banked
  2161  000108  51D4               	movf	(printf@width+1)& (0+255),w,b
  2162  00010A  0100               	movlb	0	; () banked
  2163  00010C  59CE               	subwfb	(printf@len+1)& (0+255),w,b
  2164  00010E  B0D8               	btfsc	status,0,c
  2165  000110  D009               	goto	l3707
  2166                           
  2167                           ; BSR set to: 0
  2168                           ;doprnt.c: 758: width -= len;
  2169  000112  0100               	movlb	0	; () banked
  2170  000114  51CD               	movf	printf@len& (0+255),w,b
  2171  000116  0100               	movlb	0	; () banked
  2172  000118  5FD3               	subwf	printf@width& (0+255),f,b
  2173  00011A  0100               	movlb	0	; () banked
  2174  00011C  51CE               	movf	(printf@len+1)& (0+255),w,b
  2175  00011E  0100               	movlb	0	; () banked
  2176  000120  5BD4               	subwfb	(printf@width+1)& (0+255),f,b
  2177  000122  D009               	goto	l3711
  2178  000124                     l3707:
  2179                           
  2180                           ; BSR set to: 0
  2181                           ;doprnt.c: 759: else
  2182                           ;doprnt.c: 760: width = 0;
  2183  000124  0E00               	movlw	0
  2184  000126  0100               	movlb	0	; () banked
  2185  000128  6FD4               	movwf	(printf@width+1)& (0+255),b
  2186  00012A  0E00               	movlw	0
  2187  00012C  6FD3               	movwf	printf@width& (0+255),b
  2188                           
  2189                           ; BSR set to: 0
  2190                           ;doprnt.c: 764: while(width--)
  2191  00012E  D003               	goto	l3711
  2192  000130                     l3709:
  2193                           
  2194                           ; BSR set to: 0
  2195                           ;doprnt.c: 765: (putch(' ') );
  2196  000130  0E20               	movlw	32
  2197  000132  EC19  F013         	call	_putch
  2198  000136                     l3711:
  2199  000136  0100               	movlb	0	; () banked
  2200  000138  07D3               	decf	printf@width& (0+255),f,b
  2201  00013A  A0D8               	btfss	status,0,c
  2202  00013C  07D4               	decf	(printf@width+1)& (0+255),f,b
  2203  00013E  0100               	movlb	0	; () banked
  2204  000140  29D3               	incf	printf@width& (0+255),w,b
  2205  000142  E1F6               	bnz	l3709
  2206  000144  0100               	movlb	0	; () banked
  2207  000146  29D4               	incf	(printf@width+1)& (0+255),w,b
  2208  000148  B4D8               	btfsc	status,2,c
  2209  00014A  D00B               	goto	l3717
  2210  00014C  D7F1               	goto	l3709
  2211  00014E                     l3713:
  2212                           
  2213                           ; BSR set to: 0
  2214                           ;doprnt.c: 768: (putch(*cp++) );
  2215  00014E  C0C8  FFD9         	movff	printf@cp,fsr2l
  2216  000152  C0C9  FFDA         	movff	printf@cp+1,fsr2h
  2217  000156  50DF               	movf	indf2,w,c
  2218  000158  EC19  F013         	call	_putch
  2219  00015C  0100               	movlb	0	; () banked
  2220  00015E  4BC8               	infsnz	printf@cp& (0+255),f,b
  2221  000160  2BC9               	incf	(printf@cp+1)& (0+255),f,b
  2222  000162                     l3717:
  2223                           
  2224                           ; BSR set to: 0
  2225  000162  0100               	movlb	0	; () banked
  2226  000164  07CD               	decf	printf@len& (0+255),f,b
  2227  000166  A0D8               	btfss	status,0,c
  2228  000168  07CE               	decf	(printf@len+1)& (0+255),f,b
  2229  00016A  0100               	movlb	0	; () banked
  2230  00016C  29CD               	incf	printf@len& (0+255),w,b
  2231  00016E  E1EF               	bnz	l3713
  2232  000170  0100               	movlb	0	; () banked
  2233  000172  29CE               	incf	(printf@len+1)& (0+255),w,b
  2234  000174  B4D8               	btfsc	status,2,c
  2235  000176  D173               	goto	l3827
  2236  000178  D7EA               	goto	l3713
  2237  00017A                     l3719:
  2238                           
  2239                           ; BSR set to: 0
  2240                           ;doprnt.c: 805: cp = (char *)&c;
  2241  00017A  0ED5               	movlw	low printf@c
  2242  00017C  0100               	movlb	0	; () banked
  2243  00017E  6FC8               	movwf	printf@cp& (0+255),b
  2244  000180  0E00               	movlw	high printf@c
  2245  000182  0100               	movlb	0	; () banked
  2246  000184  6FC9               	movwf	(printf@cp+1)& (0+255),b
  2247                           
  2248                           ; BSR set to: 0
  2249                           ;doprnt.c: 806: len = 1;
  2250  000186  0E00               	movlw	0
  2251  000188  0100               	movlb	0	; () banked
  2252  00018A  6FCE               	movwf	(printf@len+1)& (0+255),b
  2253  00018C  0E01               	movlw	1
  2254  00018E  6FCD               	movwf	printf@len& (0+255),b
  2255                           
  2256                           ;doprnt.c: 807: goto dostring;
  2257  000190  D7B6               	goto	l3703
  2258  000192                     l3723:
  2259                           
  2260                           ; BSR set to: 0
  2261                           ;doprnt.c: 818: flag |= 0xC0;
  2262  000192  0EC0               	movlw	192
  2263  000194  0100               	movlb	0	; () banked
  2264  000196  13D2               	iorwf	printf@flag& (0+255),f,b
  2265                           
  2266                           ; BSR set to: 0
  2267                           ;doprnt.c: 822: }
  2268                           
  2269                           ;doprnt.c: 819: break;
  2270  000198  D01C               	goto	l3729
  2271  00019A                     l3727:
  2272  00019A  C0BC  FFF6         	movff	printf@f,tblptrl
  2273  00019E  C0BD  FFF7         	movff	printf@f+1,tblptrh
  2274  0001A2  0100               	movlb	0	; () banked
  2275  0001A4  4BBC               	infsnz	printf@f& (0+255),f,b
  2276  0001A6  2BBD               	incf	(printf@f+1)& (0+255),f,b
  2277  0001A8                     	if	0	;tblptru may be non-zero
  2278  0001A8                     	endif
  2279  0001A8                     	if	0	;tblptru may be non-zero
  2280  0001A8                     	endif
  2281  0001A8  0008               	tblrd		*
  2282  0001AA  CFF5 F0D5          	movff	tablat,printf@c
  2283  0001AE  0100               	movlb	0	; () banked
  2284  0001B0  51D5               	movf	printf@c& (0+255),w,b
  2285                           
  2286                           ; Switch size 1, requested type "space"
  2287                           ; Number of cases is 5, Range of values is 0 to 120
  2288                           ; switch strategies available:
  2289                           ; Name         Instructions Cycles
  2290                           ; simple_byte           16     9 (average)
  2291                           ;	Chosen strategy is simple_byte
  2292  0001B2  0A00               	xorlw	0	; case 0
  2293  0001B4  B4D8               	btfsc	status,2,c
  2294  0001B6  0012               	return	
  2295  0001B8  0A64               	xorlw	100	; case 100
  2296  0001BA  B4D8               	btfsc	status,2,c
  2297  0001BC  D00A               	goto	l3729
  2298  0001BE  0A0D               	xorlw	13	; case 105
  2299  0001C0  B4D8               	btfsc	status,2,c
  2300  0001C2  D007               	goto	l3729
  2301  0001C4  0A1C               	xorlw	28	; case 117
  2302  0001C6  B4D8               	btfsc	status,2,c
  2303  0001C8  D7E4               	goto	l3723
  2304  0001CA  0A0D               	xorlw	13	; case 120
  2305  0001CC  B4D8               	btfsc	status,2,c
  2306  0001CE  D794               	goto	l3701
  2307  0001D0  D7D4               	goto	l3719
  2308  0001D2                     l3729:
  2309                           
  2310                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  2311  0001D2  C0D2  F0C4         	movff	printf@flag,??_printf
  2312  0001D6  0EC0               	movlw	192
  2313  0001D8  0100               	movlb	0	; () banked
  2314  0001DA  17C4               	andwf	??_printf& (0+255),f,b
  2315  0001DC  A4D8               	btfss	status,2,c
  2316  0001DE  D019               	goto	l3741
  2317                           
  2318                           ; BSR set to: 0
  2319                           ;doprnt.c: 1253: {
  2320                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2321  0001E0  C0CB  FFD9         	movff	printf@ap,fsr2l
  2322  0001E4  C0CC  FFDA         	movff	printf@ap+1,fsr2h
  2323  0001E8  CFDE F0D0          	movff	postinc2,printf@val
  2324  0001EC  CFDD F0D1          	movff	postdec2,printf@val+1
  2325                           
  2326                           ; BSR set to: 0
  2327  0001F0  0E02               	movlw	2
  2328  0001F2  0100               	movlb	0	; () banked
  2329  0001F4  27CB               	addwf	printf@ap& (0+255),f,b
  2330  0001F6  0E00               	movlw	0
  2331  0001F8  23CC               	addwfc	(printf@ap+1)& (0+255),f,b
  2332                           
  2333                           ; BSR set to: 0
  2334                           ;doprnt.c: 1261: if((int)val < 0) {
  2335  0001FA  0100               	movlb	0	; () banked
  2336  0001FC  AFD1               	btfss	(printf@val+1)& (0+255),7,b
  2337  0001FE  D053               	goto	l3775
  2338                           
  2339                           ; BSR set to: 0
  2340                           ;doprnt.c: 1262: flag |= 0x03;
  2341  000200  0E03               	movlw	3
  2342  000202  0100               	movlb	0	; () banked
  2343  000204  13D2               	iorwf	printf@flag& (0+255),f,b
  2344                           
  2345                           ; BSR set to: 0
  2346                           ;doprnt.c: 1263: val = -val;
  2347  000206  0100               	movlb	0	; () banked
  2348  000208  6DD0               	negf	printf@val& (0+255),b
  2349  00020A  1FD1               	comf	(printf@val+1)& (0+255),f,b
  2350  00020C  B0D8               	btfsc	status,0,c
  2351  00020E  2BD1               	incf	(printf@val+1)& (0+255),f,b
  2352                           
  2353                           ; BSR set to: 0
  2354                           ;doprnt.c: 1264: }
  2355                           ;doprnt.c: 1266: }
  2356  000210  D04A               	goto	l3775
  2357  000212                     l3741:
  2358                           
  2359                           ; BSR set to: 0
  2360                           ;doprnt.c: 1268: else
  2361                           ;doprnt.c: 1273: {
  2362                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2363  000212  C0CB  FFD9         	movff	printf@ap,fsr2l
  2364  000216  C0CC  FFDA         	movff	printf@ap+1,fsr2h
  2365  00021A  CFDE F0D0          	movff	postinc2,printf@val
  2366  00021E  CFDD F0D1          	movff	postdec2,printf@val+1
  2367                           
  2368                           ; BSR set to: 0
  2369  000222  0E02               	movlw	2
  2370  000224  0100               	movlb	0	; () banked
  2371  000226  27CB               	addwf	printf@ap& (0+255),f,b
  2372  000228  0E00               	movlw	0
  2373  00022A  23CC               	addwfc	(printf@ap+1)& (0+255),f,b
  2374                           
  2375                           ; BSR set to: 0
  2376                           ;doprnt.c: 1287: }
  2377                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  2378  00022C  D03C               	goto	l3775
  2379  00022E                     l3745:
  2380                           
  2381                           ; BSR set to: 0
  2382                           ;doprnt.c: 1302: case 0xC0:
  2383                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2384  00022E  0E01               	movlw	1
  2385  000230  0100               	movlb	0	; () banked
  2386  000232  6FD5               	movwf	printf@c& (0+255),b
  2387  000234                     l3747:
  2388                           
  2389                           ; BSR set to: 0
  2390  000234  0E05               	movlw	5
  2391  000236  0100               	movlb	0	; () banked
  2392  000238  19D5               	xorwf	printf@c& (0+255),w,b
  2393  00023A  B4D8               	btfsc	status,2,c
  2394  00023C  D040               	goto	l3777
  2395                           
  2396                           ; BSR set to: 0
  2397                           ;doprnt.c: 1306: if(val < dpowers[c])
  2398                           
  2399                           ; BSR set to: 0
  2400                           
  2401                           ; BSR set to: 0
  2402  00023E  0100               	movlb	0	; () banked
  2403  000240  51D5               	movf	printf@c& (0+255),w,b
  2404  000242  0D02               	mullw	2
  2405  000244  0EC1               	movlw	low _dpowers
  2406  000246  24F3               	addwf	prodl,w,c
  2407  000248  6EF6               	movwf	tblptrl,c
  2408  00024A  0EFD               	movlw	high _dpowers
  2409  00024C  20F4               	addwfc	prodh,w,c
  2410  00024E  6EF7               	movwf	tblptrh,c
  2411  000250                     	if	0	;There are less than 3 active tblptr bytes
  2412  000250                     	endif
  2413  000250  0009               	tblrd		*+
  2414  000252  50F5               	movf	tablat,w,c
  2415  000254  0100               	movlb	0	; () banked
  2416  000256  5DD0               	subwf	printf@val& (0+255),w,b
  2417  000258  0009               	tblrd		*+
  2418  00025A  50F5               	movf	tablat,w,c
  2419  00025C  0100               	movlb	0	; () banked
  2420  00025E  59D1               	subwfb	(printf@val+1)& (0+255),w,b
  2421  000260  A0D8               	btfss	status,0,c
  2422  000262  D02D               	goto	l3777
  2423                           
  2424                           ; BSR set to: 0
  2425                           
  2426                           ; BSR set to: 0
  2427                           
  2428                           ; BSR set to: 0
  2429                           ;doprnt.c: 1307: break;
  2430  000264  0100               	movlb	0	; () banked
  2431  000266  2BD5               	incf	printf@c& (0+255),f,b
  2432  000268  D7E5               	goto	l3747
  2433  00026A                     l3759:
  2434                           
  2435                           ; BSR set to: 0
  2436                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2437  00026A  0E01               	movlw	1
  2438  00026C  0100               	movlb	0	; () banked
  2439  00026E  6FD5               	movwf	printf@c& (0+255),b
  2440  000270                     l3761:
  2441                           
  2442                           ; BSR set to: 0
  2443  000270  0E04               	movlw	4
  2444  000272  0100               	movlb	0	; () banked
  2445  000274  19D5               	xorwf	printf@c& (0+255),w,b
  2446  000276  B4D8               	btfsc	status,2,c
  2447  000278  D022               	goto	l3777
  2448                           
  2449                           ; BSR set to: 0
  2450                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2451                           
  2452                           ; BSR set to: 0
  2453                           
  2454                           ; BSR set to: 0
  2455  00027A  0100               	movlb	0	; () banked
  2456  00027C  51D5               	movf	printf@c& (0+255),w,b
  2457  00027E  0D02               	mullw	2
  2458  000280  0ECB               	movlw	low _hexpowers
  2459  000282  24F3               	addwf	prodl,w,c
  2460  000284  6EF6               	movwf	tblptrl,c
  2461  000286  0EFD               	movlw	high _hexpowers
  2462  000288  20F4               	addwfc	prodh,w,c
  2463  00028A  6EF7               	movwf	tblptrh,c
  2464  00028C                     	if	0	;There are less than 3 active tblptr bytes
  2465  00028C                     	endif
  2466  00028C  0009               	tblrd		*+
  2467  00028E  50F5               	movf	tablat,w,c
  2468  000290  0100               	movlb	0	; () banked
  2469  000292  5DD0               	subwf	printf@val& (0+255),w,b
  2470  000294  0009               	tblrd		*+
  2471  000296  50F5               	movf	tablat,w,c
  2472  000298  0100               	movlb	0	; () banked
  2473  00029A  59D1               	subwfb	(printf@val+1)& (0+255),w,b
  2474  00029C  A0D8               	btfss	status,0,c
  2475  00029E  D00F               	goto	l3777
  2476                           
  2477                           ; BSR set to: 0
  2478                           
  2479                           ; BSR set to: 0
  2480                           
  2481                           ; BSR set to: 0
  2482                           ;doprnt.c: 1318: break;
  2483  0002A0  0100               	movlb	0	; () banked
  2484  0002A2  2BD5               	incf	printf@c& (0+255),f,b
  2485  0002A4  D7E5               	goto	l3761
  2486  0002A6                     l3775:
  2487                           
  2488                           ; BSR set to: 0
  2489  0002A6  0100               	movlb	0	; () banked
  2490  0002A8  51D2               	movf	printf@flag& (0+255),w,b
  2491  0002AA  0BC0               	andlw	192
  2492                           
  2493                           ; Switch size 1, requested type "space"
  2494                           ; Number of cases is 3, Range of values is 0 to 192
  2495                           ; switch strategies available:
  2496                           ; Name         Instructions Cycles
  2497                           ; simple_byte           10     6 (average)
  2498                           ;	Chosen strategy is simple_byte
  2499  0002AC  0A00               	xorlw	0	; case 0
  2500  0002AE  B4D8               	btfsc	status,2,c
  2501  0002B0  D7BE               	goto	l3745
  2502  0002B2  0A80               	xorlw	128	; case 128
  2503  0002B4  B4D8               	btfsc	status,2,c
  2504  0002B6  D7D9               	goto	l3759
  2505  0002B8  0A40               	xorlw	64	; case 192
  2506  0002BA  B4D8               	btfsc	status,2,c
  2507  0002BC  D7B8               	goto	l3745
  2508  0002BE                     l3777:
  2509                           
  2510                           ; BSR set to: 0
  2511                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2512  0002BE  0100               	movlb	0	; () banked
  2513  0002C0  51D3               	movf	printf@width& (0+255),w,b
  2514  0002C2  0100               	movlb	0	; () banked
  2515  0002C4  11D4               	iorwf	(printf@width+1)& (0+255),w,b
  2516  0002C6  B4D8               	btfsc	status,2,c
  2517  0002C8  D00B               	goto	l3783
  2518                           
  2519                           ; BSR set to: 0
  2520  0002CA  C0D2  F0C4         	movff	printf@flag,??_printf
  2521  0002CE  0E03               	movlw	3
  2522  0002D0  0100               	movlb	0	; () banked
  2523  0002D2  17C4               	andwf	??_printf& (0+255),f,b
  2524  0002D4  B4D8               	btfsc	status,2,c
  2525  0002D6  D004               	goto	l3783
  2526                           
  2527                           ; BSR set to: 0
  2528                           ;doprnt.c: 1346: width--;
  2529  0002D8  0100               	movlb	0	; () banked
  2530  0002DA  07D3               	decf	printf@width& (0+255),f,b
  2531  0002DC  A0D8               	btfss	status,0,c
  2532  0002DE  07D4               	decf	(printf@width+1)& (0+255),f,b
  2533  0002E0                     l3783:
  2534                           
  2535                           ; BSR set to: 0
  2536                           ;doprnt.c: 1381: if(width > c)
  2537  0002E0  0E80               	movlw	128
  2538  0002E2  0100               	movlb	0	; () banked
  2539  0002E4  BFD5               	btfsc	printf@c& (0+255),7,b
  2540  0002E6  0E7F               	movlw	127
  2541  0002E8  0100               	movlb	0	; () banked
  2542  0002EA  6FC4               	movwf	??_printf& (0+255),b
  2543  0002EC  0100               	movlb	0	; () banked
  2544  0002EE  51D3               	movf	printf@width& (0+255),w,b
  2545  0002F0  0100               	movlb	0	; () banked
  2546  0002F2  5DD5               	subwf	printf@c& (0+255),w,b
  2547  0002F4  0100               	movlb	0	; () banked
  2548  0002F6  51D4               	movf	(printf@width+1)& (0+255),w,b
  2549  0002F8  0A80               	xorlw	128
  2550  0002FA  0100               	movlb	0	; () banked
  2551  0002FC  59C4               	subwfb	??_printf& (0+255),w,b
  2552  0002FE  B0D8               	btfsc	status,0,c
  2553  000300  D00B               	goto	l3787
  2554                           
  2555                           ; BSR set to: 0
  2556                           ;doprnt.c: 1382: width -= c;
  2557  000302  0100               	movlb	0	; () banked
  2558  000304  51D5               	movf	printf@c& (0+255),w,b
  2559  000306  0100               	movlb	0	; () banked
  2560  000308  5FD3               	subwf	printf@width& (0+255),f,b
  2561  00030A  0E00               	movlw	0
  2562  00030C  0100               	movlb	0	; () banked
  2563  00030E  BFD5               	btfsc	printf@c& (0+255),7,b
  2564  000310  0EFF               	movlw	255
  2565  000312  0100               	movlb	0	; () banked
  2566  000314  5BD4               	subwfb	(printf@width+1)& (0+255),f,b
  2567  000316  D005               	goto	l3789
  2568  000318                     l3787:
  2569                           
  2570                           ; BSR set to: 0
  2571                           ;doprnt.c: 1383: else
  2572                           ;doprnt.c: 1384: width = 0;
  2573  000318  0E00               	movlw	0
  2574  00031A  0100               	movlb	0	; () banked
  2575  00031C  6FD4               	movwf	(printf@width+1)& (0+255),b
  2576  00031E  0E00               	movlw	0
  2577  000320  6FD3               	movwf	printf@width& (0+255),b
  2578  000322                     l3789:
  2579                           
  2580                           ; BSR set to: 0
  2581                           ;doprnt.c: 1387: if(flag & 0x04) {
  2582  000322  0100               	movlb	0	; () banked
  2583  000324  A5D2               	btfss	printf@flag& (0+255),2,b
  2584  000326  D018               	goto	l3801
  2585                           
  2586                           ; BSR set to: 0
  2587                           ;doprnt.c: 1392: if(flag & 0x03)
  2588  000328  C0D2  F0C4         	movff	printf@flag,??_printf
  2589  00032C  0E03               	movlw	3
  2590  00032E  0100               	movlb	0	; () banked
  2591  000330  17C4               	andwf	??_printf& (0+255),f,b
  2592  000332  B4D8               	btfsc	status,2,c
  2593  000334  D003               	goto	l3795
  2594                           
  2595                           ; BSR set to: 0
  2596                           ;doprnt.c: 1393: (putch('-') );
  2597  000336  0E2D               	movlw	45
  2598  000338  EC19  F013         	call	_putch
  2599  00033C                     l3795:
  2600                           
  2601                           ;doprnt.c: 1415: if(width)
  2602  00033C  0100               	movlb	0	; () banked
  2603  00033E  51D3               	movf	printf@width& (0+255),w,b
  2604  000340  0100               	movlb	0	; () banked
  2605  000342  11D4               	iorwf	(printf@width+1)& (0+255),w,b
  2606  000344  B4D8               	btfsc	status,2,c
  2607  000346  D025               	goto	l3811
  2608                           
  2609                           ; BSR set to: 0
  2610                           ;doprnt.c: 1417: (putch('0') );
  2611                           
  2612                           ; BSR set to: 0
  2613                           
  2614                           ;doprnt.c: 1416: do
  2615  000348  0E30               	movlw	48
  2616  00034A  EC19  F013         	call	_putch
  2617                           
  2618                           ;doprnt.c: 1418: while(--width);
  2619  00034E  0100               	movlb	0	; () banked
  2620  000350  07D3               	decf	printf@width& (0+255),f,b
  2621  000352  A0D8               	btfss	status,0,c
  2622  000354  07D4               	decf	(printf@width+1)& (0+255),f,b
  2623  000356  D7F2               	goto	l3795
  2624  000358                     l3801:
  2625                           
  2626                           ; BSR set to: 0
  2627                           ;doprnt.c: 1422: {
  2628                           ;doprnt.c: 1424: if(width
  2629                           ;doprnt.c: 1428: )
  2630  000358  0100               	movlb	0	; () banked
  2631  00035A  51D3               	movf	printf@width& (0+255),w,b
  2632  00035C  0100               	movlb	0	; () banked
  2633  00035E  11D4               	iorwf	(printf@width+1)& (0+255),w,b
  2634  000360  B4D8               	btfsc	status,2,c
  2635  000362  D00D               	goto	l3807
  2636  000364                     l3803:
  2637                           
  2638                           ; BSR set to: 0
  2639                           ;doprnt.c: 1430: (putch(' ') );
  2640  000364  0E20               	movlw	32
  2641  000366  EC19  F013         	call	_putch
  2642                           
  2643                           ;doprnt.c: 1431: while(--width);
  2644  00036A  0100               	movlb	0	; () banked
  2645  00036C  07D3               	decf	printf@width& (0+255),f,b
  2646  00036E  A0D8               	btfss	status,0,c
  2647  000370  07D4               	decf	(printf@width+1)& (0+255),f,b
  2648  000372  0100               	movlb	0	; () banked
  2649  000374  51D3               	movf	printf@width& (0+255),w,b
  2650  000376  0100               	movlb	0	; () banked
  2651  000378  11D4               	iorwf	(printf@width+1)& (0+255),w,b
  2652  00037A  A4D8               	btfss	status,2,c
  2653  00037C  D7F3               	goto	l3803
  2654  00037E                     l3807:
  2655                           
  2656                           ; BSR set to: 0
  2657                           ;doprnt.c: 1438: if(flag & 0x03)
  2658  00037E  C0D2  F0C4         	movff	printf@flag,??_printf
  2659  000382  0E03               	movlw	3
  2660  000384  0100               	movlb	0	; () banked
  2661  000386  17C4               	andwf	??_printf& (0+255),f,b
  2662  000388  B4D8               	btfsc	status,2,c
  2663  00038A  D003               	goto	l3811
  2664                           
  2665                           ; BSR set to: 0
  2666                           ;doprnt.c: 1439: (putch('-') );
  2667  00038C  0E2D               	movlw	45
  2668  00038E  EC19  F013         	call	_putch
  2669  000392                     l3811:
  2670                           
  2671                           ;doprnt.c: 1469: }
  2672                           ;doprnt.c: 1472: prec = c;
  2673  000392  C0D5  F0CF         	movff	printf@c,printf@prec
  2674                           
  2675                           ;doprnt.c: 1474: while(prec--) {
  2676  000396  D05D               	goto	l3825
  2677  000398                     l3813:
  2678                           
  2679                           ;doprnt.c: 1486: case 0xC0:
  2680                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2681  000398  0100               	movlb	0	; () banked
  2682  00039A  51CF               	movf	printf@prec& (0+255),w,b
  2683  00039C  0D02               	mullw	2
  2684  00039E  0EC1               	movlw	low _dpowers
  2685  0003A0  24F3               	addwf	prodl,w,c
  2686  0003A2  6EF6               	movwf	tblptrl,c
  2687  0003A4  0EFD               	movlw	high _dpowers
  2688  0003A6  20F4               	addwfc	prodh,w,c
  2689  0003A8  6EF7               	movwf	tblptrh,c
  2690  0003AA                     	if	0	;There are less than 3 active tblptr bytes
  2691  0003AA                     	endif
  2692  0003AA  0009               	tblrd		*+
  2693  0003AC  CFF5 F0B2          	movff	tablat,___lwdiv@divisor
  2694  0003B0  000A               	tblrd		*-
  2695  0003B2  CFF5 F0B3          	movff	tablat,___lwdiv@divisor+1
  2696  0003B6  C0D0  F0B0         	movff	printf@val,___lwdiv@dividend
  2697  0003BA  C0D1  F0B1         	movff	printf@val+1,___lwdiv@dividend+1
  2698  0003BE  ECC2  F00E         	call	___lwdiv	;wreg free
  2699  0003C2  C0B0  F0B7         	movff	?___lwdiv,___lwmod@dividend
  2700  0003C6  C0B1  F0B8         	movff	?___lwdiv+1,___lwmod@dividend+1
  2701  0003CA  0E00               	movlw	0
  2702  0003CC  0100               	movlb	0	; () banked
  2703  0003CE  6FBA               	movwf	(___lwmod@divisor+1)& (0+255),b
  2704  0003D0  0E0A               	movlw	10
  2705  0003D2  6FB9               	movwf	___lwmod@divisor& (0+255),b
  2706  0003D4  EC1C  F010         	call	___lwmod	;wreg free
  2707  0003D8  0100               	movlb	0	; () banked
  2708  0003DA  51B7               	movf	?___lwmod& (0+255),w,b
  2709  0003DC  0F30               	addlw	48
  2710  0003DE  0100               	movlb	0	; () banked
  2711  0003E0  6FD5               	movwf	printf@c& (0+255),b
  2712                           
  2713                           ;doprnt.c: 1491: break;
  2714  0003E2  D033               	goto	l3823
  2715  0003E4                     l3815:
  2716                           
  2717                           ; BSR set to: 0
  2718                           ;doprnt.c: 1499: {
  2719                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2720  0003E4  C0D0  F0B0         	movff	printf@val,___lwdiv@dividend
  2721  0003E8  C0D1  F0B1         	movff	printf@val+1,___lwdiv@dividend+1
  2722  0003EC  0100               	movlb	0	; () banked
  2723  0003EE  51CF               	movf	printf@prec& (0+255),w,b
  2724  0003F0  0D02               	mullw	2
  2725  0003F2  0ECB               	movlw	low _hexpowers
  2726  0003F4  24F3               	addwf	prodl,w,c
  2727  0003F6  6EF6               	movwf	tblptrl,c
  2728  0003F8  0EFD               	movlw	high _hexpowers
  2729  0003FA  20F4               	addwfc	prodh,w,c
  2730  0003FC  6EF7               	movwf	tblptrh,c
  2731  0003FE                     	if	0	;There are less than 3 active tblptr bytes
  2732  0003FE                     	endif
  2733  0003FE  0009               	tblrd		*+
  2734  000400  CFF5 F0B2          	movff	tablat,___lwdiv@divisor
  2735  000404  000A               	tblrd		*-
  2736  000406  CFF5 F0B3          	movff	tablat,___lwdiv@divisor+1
  2737  00040A  ECC2  F00E         	call	___lwdiv	;wreg free
  2738  00040E  0100               	movlb	0	; () banked
  2739  000410  51B0               	movf	?___lwdiv& (0+255),w,b
  2740  000412  0B0F               	andlw	15
  2741  000414  0100               	movlb	0	; () banked
  2742  000416  6FCA               	movwf	printf@idx& (0+255),b
  2743                           
  2744                           ; BSR set to: 0
  2745                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2746  000418  0100               	movlb	0	; () banked
  2747  00041A  51CA               	movf	printf@idx& (0+255),w,b
  2748  00041C  0D01               	mullw	1
  2749  00041E  0E9D               	movlw	low STR_47
  2750  000420  24F3               	addwf	prodl,w,c
  2751  000422  6EF6               	movwf	tblptrl,c
  2752  000424  0EFF               	movlw	high STR_47
  2753  000426  20F4               	addwfc	prodh,w,c
  2754  000428  6EF7               	movwf	tblptrh,c
  2755  00042A                     	if	0	;There are less than 3 active tblptr bytes
  2756  00042A                     	endif
  2757  00042A  0008               	tblrd		*
  2758  00042C  CFF5 F0D5          	movff	tablat,printf@c
  2759                           
  2760                           ; BSR set to: 0
  2761                           ;doprnt.c: 1523: }
  2762                           
  2763                           ;doprnt.c: 1508: }
  2764                           ;doprnt.c: 1510: break;
  2765  000430  D00C               	goto	l3823
  2766  000432                     l3821:
  2767  000432  0100               	movlb	0	; () banked
  2768  000434  51D2               	movf	printf@flag& (0+255),w,b
  2769  000436  0BC0               	andlw	192
  2770                           
  2771                           ; Switch size 1, requested type "space"
  2772                           ; Number of cases is 3, Range of values is 0 to 192
  2773                           ; switch strategies available:
  2774                           ; Name         Instructions Cycles
  2775                           ; simple_byte           10     6 (average)
  2776                           ;	Chosen strategy is simple_byte
  2777  000438  0A00               	xorlw	0	; case 0
  2778  00043A  B4D8               	btfsc	status,2,c
  2779  00043C  D7AD               	goto	l3813
  2780  00043E  0A80               	xorlw	128	; case 128
  2781  000440  B4D8               	btfsc	status,2,c
  2782  000442  D7D0               	goto	l3815
  2783  000444  0A40               	xorlw	64	; case 192
  2784  000446  B4D8               	btfsc	status,2,c
  2785  000448  D7A7               	goto	l3813
  2786  00044A                     l3823:
  2787                           
  2788                           ; BSR set to: 0
  2789                           ;doprnt.c: 1524: (putch(c) );
  2790  00044A  0100               	movlb	0	; () banked
  2791  00044C  51D5               	movf	printf@c& (0+255),w,b
  2792  00044E  EC19  F013         	call	_putch
  2793  000452                     l3825:
  2794  000452  0100               	movlb	0	; () banked
  2795  000454  07CF               	decf	printf@prec& (0+255),f,b
  2796  000456  0100               	movlb	0	; () banked
  2797  000458  29CF               	incf	printf@prec& (0+255),w,b
  2798  00045A  A4D8               	btfss	status,2,c
  2799  00045C  D7EA               	goto	l3821
  2800  00045E                     l3827:
  2801  00045E  C0BC  FFF6         	movff	printf@f,tblptrl
  2802  000462  C0BD  FFF7         	movff	printf@f+1,tblptrh
  2803  000466  0100               	movlb	0	; () banked
  2804  000468  4BBC               	infsnz	printf@f& (0+255),f,b
  2805  00046A  2BBD               	incf	(printf@f+1)& (0+255),f,b
  2806  00046C                     	if	0	;tblptru may be non-zero
  2807  00046C                     	endif
  2808  00046C                     	if	0	;tblptru may be non-zero
  2809  00046C                     	endif
  2810  00046C  0008               	tblrd		*
  2811  00046E  CFF5 F0D5          	movff	tablat,printf@c
  2812  000472  0100               	movlb	0	; () banked
  2813  000474  51D5               	movf	printf@c& (0+255),w,b
  2814  000476  B4D8               	btfsc	status,2,c
  2815  000478  0012               	return	
  2816  00047A  D5D2               	goto	l3677
  2817  00047C                     __end_of_printf:
  2818                           	opt stack 0
  2819                           tblptru	equ	0xFF8
  2820                           tblptrh	equ	0xFF7
  2821                           tblptrl	equ	0xFF6
  2822                           tablat	equ	0xFF5
  2823                           prodh	equ	0xFF4
  2824                           prodl	equ	0xFF3
  2825                           intcon	equ	0xFF2
  2826                           intcon3	equ	0xFF0
  2827                           postinc0	equ	0xFEE
  2828                           wreg	equ	0xFE8
  2829                           postdec1	equ	0xFE5
  2830                           fsr1l	equ	0xFE1
  2831                           indf2	equ	0xFDF
  2832                           postinc2	equ	0xFDE
  2833                           postdec2	equ	0xFDD
  2834                           fsr2h	equ	0xFDA
  2835                           fsr2l	equ	0xFD9
  2836                           status	equ	0xFD8
  2837                           
  2838 ;; *************** function _putch *****************
  2839 ;; Defined at:
  2840 ;;		line 25 in file "lcd.c"
  2841 ;; Parameters:    Size  Location     Type
  2842 ;;  data            1    wreg     unsigned char 
  2843 ;; Auto vars:     Size  Location     Type
  2844 ;;  data            1    2[BANK0 ] unsigned char 
  2845 ;; Return value:  Size  Location     Type
  2846 ;;                  1    wreg      void 
  2847 ;; Registers used:
  2848 ;;		wreg, status,2, status,0, cstack
  2849 ;; Tracked objects:
  2850 ;;		On entry : 0/0
  2851 ;;		On exit  : 0/0
  2852 ;;		Unchanged: 0/0
  2853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2855 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2857 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2858 ;;Total ram usage:        1 bytes
  2859 ;; Hardware stack levels used:    1
  2860 ;; Hardware stack levels required when called:    8
  2861 ;; This function calls:
  2862 ;;		_lcdNibble
  2863 ;; This function is called by:
  2864 ;;		_printf
  2865 ;; This function uses a non-reentrant model
  2866 ;;
  2867                           
  2868                           	psect	text3
  2869  002632                     __ptext3:
  2870                           	opt stack 0
  2871  002632                     _putch:
  2872                           	opt stack 20
  2873                           
  2874                           ;incstack = 0
  2875                           ;putch@data stored from wreg
  2876  002632  0100               	movlb	0	; () banked
  2877  002634  6FB2               	movwf	putch@data& (0+255),b
  2878                           
  2879                           ;lcd.c: 26: LATDbits.LATD2 = 1;
  2880  002636  848C               	bsf	3980,2,c	;volatile
  2881                           
  2882                           ;lcd.c: 27: lcdNibble(data);
  2883  002638  0100               	movlb	0	; () banked
  2884  00263A  51B2               	movf	putch@data& (0+255),w,b
  2885  00263C  ECE8  F00F         	call	_lcdNibble
  2886  002640  0012               	return		;funcret
  2887  002642                     __end_of_putch:
  2888                           	opt stack 0
  2889                           tblptru	equ	0xFF8
  2890                           tblptrh	equ	0xFF7
  2891                           tblptrl	equ	0xFF6
  2892                           tablat	equ	0xFF5
  2893                           prodh	equ	0xFF4
  2894                           prodl	equ	0xFF3
  2895                           intcon	equ	0xFF2
  2896                           intcon3	equ	0xFF0
  2897                           postinc0	equ	0xFEE
  2898                           wreg	equ	0xFE8
  2899                           postdec1	equ	0xFE5
  2900                           fsr1l	equ	0xFE1
  2901                           indf2	equ	0xFDF
  2902                           postinc2	equ	0xFDE
  2903                           postdec2	equ	0xFDD
  2904                           fsr2h	equ	0xFDA
  2905                           fsr2l	equ	0xFD9
  2906                           status	equ	0xFD8
  2907                           
  2908 ;; *************** function _isdigit *****************
  2909 ;; Defined at:
  2910 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  2911 ;; Parameters:    Size  Location     Type
  2912 ;;  c               1    wreg     unsigned char 
  2913 ;; Auto vars:     Size  Location     Type
  2914 ;;  c               1    2[BANK0 ] unsigned char 
  2915 ;; Return value:  Size  Location     Type
  2916 ;;		None               void
  2917 ;; Registers used:
  2918 ;;		wreg, status,2, status,0
  2919 ;; Tracked objects:
  2920 ;;		On entry : 0/0
  2921 ;;		On exit  : 0/0
  2922 ;;		Unchanged: 0/0
  2923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2925 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2926 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2927 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2928 ;;Total ram usage:        3 bytes
  2929 ;; Hardware stack levels used:    1
  2930 ;; Hardware stack levels required when called:    7
  2931 ;; This function calls:
  2932 ;;		Nothing
  2933 ;; This function is called by:
  2934 ;;		_printf
  2935 ;; This function uses a non-reentrant model
  2936 ;;
  2937                           
  2938                           	psect	text4
  2939  002436                     __ptext4:
  2940                           	opt stack 0
  2941  002436                     _isdigit:
  2942                           	opt stack 21
  2943                           
  2944                           ;incstack = 0
  2945                           ;isdigit@c stored from wreg
  2946  002436  0100               	movlb	0	; () banked
  2947  002438  6FB2               	movwf	isdigit@c& (0+255),b
  2948  00243A  0E00               	movlw	0
  2949  00243C  0100               	movlb	0	; () banked
  2950  00243E  6FB1               	movwf	_isdigit$1079& (0+255),b
  2951                           
  2952                           ; BSR set to: 0
  2953  002440  0E3A               	movlw	58
  2954  002442  0100               	movlb	0	; () banked
  2955  002444  61B2               	cpfslt	isdigit@c& (0+255),b
  2956  002446  D007               	goto	l3533
  2957                           
  2958                           ; BSR set to: 0
  2959  002448  0E2F               	movlw	47
  2960  00244A  0100               	movlb	0	; () banked
  2961  00244C  65B2               	cpfsgt	isdigit@c& (0+255),b
  2962  00244E  D003               	goto	l3533
  2963                           
  2964                           ; BSR set to: 0
  2965  002450  0E01               	movlw	1
  2966  002452  0100               	movlb	0	; () banked
  2967  002454  6FB1               	movwf	_isdigit$1079& (0+255),b
  2968  002456                     l3533:
  2969                           
  2970                           ; BSR set to: 0
  2971  002456  C0B1  F0B0         	movff	_isdigit$1079,??_isdigit
  2972  00245A  0100               	movlb	0	; () banked
  2973  00245C  31B0               	rrcf	??_isdigit& (0+255),w,b
  2974  00245E  0012               	return	
  2975  002460                     __end_of_isdigit:
  2976                           	opt stack 0
  2977                           tblptru	equ	0xFF8
  2978                           tblptrh	equ	0xFF7
  2979                           tblptrl	equ	0xFF6
  2980                           tablat	equ	0xFF5
  2981                           prodh	equ	0xFF4
  2982                           prodl	equ	0xFF3
  2983                           intcon	equ	0xFF2
  2984                           intcon3	equ	0xFF0
  2985                           postinc0	equ	0xFEE
  2986                           wreg	equ	0xFE8
  2987                           postdec1	equ	0xFE5
  2988                           fsr1l	equ	0xFE1
  2989                           indf2	equ	0xFDF
  2990                           postinc2	equ	0xFDE
  2991                           postdec2	equ	0xFDD
  2992                           fsr2h	equ	0xFDA
  2993                           fsr2l	equ	0xFD9
  2994                           status	equ	0xFD8
  2995                           
  2996 ;; *************** function ___wmul *****************
  2997 ;; Defined at:
  2998 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  2999 ;; Parameters:    Size  Location     Type
  3000 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3001 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3002 ;; Auto vars:     Size  Location     Type
  3003 ;;  product         2    4[BANK0 ] unsigned int 
  3004 ;; Return value:  Size  Location     Type
  3005 ;;                  2    0[BANK0 ] unsigned int 
  3006 ;; Registers used:
  3007 ;;		wreg, status,2, status,0, prodl, prodh
  3008 ;; Tracked objects:
  3009 ;;		On entry : 0/0
  3010 ;;		On exit  : 0/0
  3011 ;;		Unchanged: 0/0
  3012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3013 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3014 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3016 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3017 ;;Total ram usage:        6 bytes
  3018 ;; Hardware stack levels used:    1
  3019 ;; Hardware stack levels required when called:    7
  3020 ;; This function calls:
  3021 ;;		Nothing
  3022 ;; This function is called by:
  3023 ;;		_printf
  3024 ;; This function uses a non-reentrant model
  3025 ;;
  3026                           
  3027                           	psect	text5
  3028  0023D2                     __ptext5:
  3029                           	opt stack 0
  3030  0023D2                     ___wmul:
  3031                           	opt stack 21
  3032                           
  3033                           ; BSR set to: 0
  3034                           ;incstack = 0
  3035  0023D2  0100               	movlb	0	; () banked
  3036  0023D4  51B0               	movf	___wmul@multiplier& (0+255),w,b
  3037  0023D6  0100               	movlb	0	; () banked
  3038  0023D8  03B2               	mulwf	___wmul@multiplicand& (0+255),b
  3039  0023DA  CFF3 F0B4          	movff	prodl,___wmul@product
  3040  0023DE  CFF4 F0B5          	movff	prodh,___wmul@product+1
  3041  0023E2  0100               	movlb	0	; () banked
  3042  0023E4  51B0               	movf	___wmul@multiplier& (0+255),w,b
  3043  0023E6  0100               	movlb	0	; () banked
  3044  0023E8  03B3               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  3045  0023EA  50F3               	movf	prodl,w,c
  3046  0023EC  0100               	movlb	0	; () banked
  3047  0023EE  27B5               	addwf	(___wmul@product+1)& (0+255),f,b
  3048  0023F0  0100               	movlb	0	; () banked
  3049  0023F2  51B1               	movf	(___wmul@multiplier+1)& (0+255),w,b
  3050  0023F4  0100               	movlb	0	; () banked
  3051  0023F6  03B2               	mulwf	___wmul@multiplicand& (0+255),b
  3052  0023F8  50F3               	movf	prodl,w,c
  3053  0023FA  0100               	movlb	0	; () banked
  3054  0023FC  27B5               	addwf	(___wmul@product+1)& (0+255),f,b
  3055                           
  3056                           ; BSR set to: 0
  3057  0023FE  C0B4  F0B0         	movff	___wmul@product,?___wmul
  3058  002402  C0B5  F0B1         	movff	___wmul@product+1,?___wmul+1
  3059  002406  0012               	return	
  3060  002408                     __end_of___wmul:
  3061                           	opt stack 0
  3062                           tblptru	equ	0xFF8
  3063                           tblptrh	equ	0xFF7
  3064                           tblptrl	equ	0xFF6
  3065                           tablat	equ	0xFF5
  3066                           prodh	equ	0xFF4
  3067                           prodl	equ	0xFF3
  3068                           intcon	equ	0xFF2
  3069                           intcon3	equ	0xFF0
  3070                           postinc0	equ	0xFEE
  3071                           wreg	equ	0xFE8
  3072                           postdec1	equ	0xFE5
  3073                           fsr1l	equ	0xFE1
  3074                           indf2	equ	0xFDF
  3075                           postinc2	equ	0xFDE
  3076                           postdec2	equ	0xFDD
  3077                           fsr2h	equ	0xFDA
  3078                           fsr2l	equ	0xFD9
  3079                           status	equ	0xFD8
  3080                           
  3081 ;; *************** function ___lwmod *****************
  3082 ;; Defined at:
  3083 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  3084 ;; Parameters:    Size  Location     Type
  3085 ;;  dividend        2    7[BANK0 ] unsigned int 
  3086 ;;  divisor         2    9[BANK0 ] unsigned int 
  3087 ;; Auto vars:     Size  Location     Type
  3088 ;;  counter         1   11[BANK0 ] unsigned char 
  3089 ;; Return value:  Size  Location     Type
  3090 ;;                  2    7[BANK0 ] unsigned int 
  3091 ;; Registers used:
  3092 ;;		wreg, status,2, status,0
  3093 ;; Tracked objects:
  3094 ;;		On entry : 0/0
  3095 ;;		On exit  : 0/0
  3096 ;;		Unchanged: 0/0
  3097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3098 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3099 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3101 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3102 ;;Total ram usage:        5 bytes
  3103 ;; Hardware stack levels used:    1
  3104 ;; Hardware stack levels required when called:    7
  3105 ;; This function calls:
  3106 ;;		Nothing
  3107 ;; This function is called by:
  3108 ;;		_printf
  3109 ;; This function uses a non-reentrant model
  3110 ;;
  3111                           
  3112                           	psect	text6
  3113  002038                     __ptext6:
  3114                           	opt stack 0
  3115  002038                     ___lwmod:
  3116                           	opt stack 21
  3117                           
  3118                           ; BSR set to: 0
  3119                           ;incstack = 0
  3120  002038  0100               	movlb	0	; () banked
  3121  00203A  51B9               	movf	___lwmod@divisor& (0+255),w,b
  3122  00203C  0100               	movlb	0	; () banked
  3123  00203E  11BA               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  3124  002040  B4D8               	btfsc	status,2,c
  3125  002042  D026               	goto	l984
  3126                           
  3127                           ; BSR set to: 0
  3128  002044  0E01               	movlw	1
  3129  002046  0100               	movlb	0	; () banked
  3130  002048  6FBB               	movwf	___lwmod@counter& (0+255),b
  3131  00204A  D006               	goto	l3593
  3132  00204C                     l3591:
  3133                           
  3134                           ; BSR set to: 0
  3135  00204C  0100               	movlb	0	; () banked
  3136  00204E  90D8               	bcf	status,0,c
  3137  002050  37B9               	rlcf	___lwmod@divisor& (0+255),f,b
  3138  002052  37BA               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  3139  002054  0100               	movlb	0	; () banked
  3140  002056  2BBB               	incf	___lwmod@counter& (0+255),f,b
  3141  002058                     l3593:
  3142                           
  3143                           ; BSR set to: 0
  3144  002058  0100               	movlb	0	; () banked
  3145  00205A  AFBA               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  3146  00205C  D7F7               	goto	l3591
  3147  00205E                     l3595:
  3148                           
  3149                           ; BSR set to: 0
  3150  00205E  0100               	movlb	0	; () banked
  3151  002060  51B9               	movf	___lwmod@divisor& (0+255),w,b
  3152  002062  0100               	movlb	0	; () banked
  3153  002064  5DB7               	subwf	___lwmod@dividend& (0+255),w,b
  3154  002066  0100               	movlb	0	; () banked
  3155  002068  51BA               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3156  00206A  0100               	movlb	0	; () banked
  3157  00206C  59B8               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  3158  00206E  A0D8               	btfss	status,0,c
  3159  002070  D008               	goto	l3599
  3160                           
  3161                           ; BSR set to: 0
  3162  002072  0100               	movlb	0	; () banked
  3163  002074  51B9               	movf	___lwmod@divisor& (0+255),w,b
  3164  002076  0100               	movlb	0	; () banked
  3165  002078  5FB7               	subwf	___lwmod@dividend& (0+255),f,b
  3166  00207A  0100               	movlb	0	; () banked
  3167  00207C  51BA               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3168  00207E  0100               	movlb	0	; () banked
  3169  002080  5BB8               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  3170  002082                     l3599:
  3171                           
  3172                           ; BSR set to: 0
  3173  002082  0100               	movlb	0	; () banked
  3174  002084  90D8               	bcf	status,0,c
  3175  002086  33BA               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  3176  002088  33B9               	rrcf	___lwmod@divisor& (0+255),f,b
  3177                           
  3178                           ; BSR set to: 0
  3179  00208A  0100               	movlb	0	; () banked
  3180  00208C  2FBB               	decfsz	___lwmod@counter& (0+255),f,b
  3181  00208E  D7E7               	goto	l3595
  3182  002090                     l984:
  3183                           
  3184                           ; BSR set to: 0
  3185  002090  C0B7  F0B7         	movff	___lwmod@dividend,?___lwmod
  3186  002094  C0B8  F0B8         	movff	___lwmod@dividend+1,?___lwmod+1
  3187                           
  3188                           ; BSR set to: 0
  3189  002098  0012               	return		;funcret
  3190  00209A                     __end_of___lwmod:
  3191                           	opt stack 0
  3192                           tblptru	equ	0xFF8
  3193                           tblptrh	equ	0xFF7
  3194                           tblptrl	equ	0xFF6
  3195                           tablat	equ	0xFF5
  3196                           prodh	equ	0xFF4
  3197                           prodl	equ	0xFF3
  3198                           intcon	equ	0xFF2
  3199                           intcon3	equ	0xFF0
  3200                           postinc0	equ	0xFEE
  3201                           wreg	equ	0xFE8
  3202                           postdec1	equ	0xFE5
  3203                           fsr1l	equ	0xFE1
  3204                           indf2	equ	0xFDF
  3205                           postinc2	equ	0xFDE
  3206                           postdec2	equ	0xFDD
  3207                           fsr2h	equ	0xFDA
  3208                           fsr2l	equ	0xFD9
  3209                           status	equ	0xFD8
  3210                           
  3211 ;; *************** function ___lwdiv *****************
  3212 ;; Defined at:
  3213 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  3214 ;; Parameters:    Size  Location     Type
  3215 ;;  dividend        2    0[BANK0 ] unsigned int 
  3216 ;;  divisor         2    2[BANK0 ] unsigned int 
  3217 ;; Auto vars:     Size  Location     Type
  3218 ;;  quotient        2    4[BANK0 ] unsigned int 
  3219 ;;  counter         1    6[BANK0 ] unsigned char 
  3220 ;; Return value:  Size  Location     Type
  3221 ;;                  2    0[BANK0 ] unsigned int 
  3222 ;; Registers used:
  3223 ;;		wreg, status,2, status,0
  3224 ;; Tracked objects:
  3225 ;;		On entry : 0/0
  3226 ;;		On exit  : 0/0
  3227 ;;		Unchanged: 0/0
  3228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3229 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3230 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3232 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3233 ;;Total ram usage:        7 bytes
  3234 ;; Hardware stack levels used:    1
  3235 ;; Hardware stack levels required when called:    7
  3236 ;; This function calls:
  3237 ;;		Nothing
  3238 ;; This function is called by:
  3239 ;;		_printf
  3240 ;; This function uses a non-reentrant model
  3241 ;;
  3242                           
  3243                           	psect	text7
  3244  001D84                     __ptext7:
  3245                           	opt stack 0
  3246  001D84                     ___lwdiv:
  3247                           	opt stack 21
  3248                           
  3249                           ; BSR set to: 0
  3250                           ;incstack = 0
  3251  001D84  0E00               	movlw	0
  3252  001D86  0100               	movlb	0	; () banked
  3253  001D88  6FB5               	movwf	(___lwdiv@quotient+1)& (0+255),b
  3254  001D8A  0E00               	movlw	0
  3255  001D8C  6FB4               	movwf	___lwdiv@quotient& (0+255),b
  3256                           
  3257                           ; BSR set to: 0
  3258  001D8E  0100               	movlb	0	; () banked
  3259  001D90  51B2               	movf	___lwdiv@divisor& (0+255),w,b
  3260  001D92  0100               	movlb	0	; () banked
  3261  001D94  11B3               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  3262  001D96  B4D8               	btfsc	status,2,c
  3263  001D98  D02C               	goto	l974
  3264                           
  3265                           ; BSR set to: 0
  3266  001D9A  0E01               	movlw	1
  3267  001D9C  0100               	movlb	0	; () banked
  3268  001D9E  6FB6               	movwf	___lwdiv@counter& (0+255),b
  3269  001DA0  D006               	goto	l3573
  3270  001DA2                     l3571:
  3271                           
  3272                           ; BSR set to: 0
  3273  001DA2  0100               	movlb	0	; () banked
  3274  001DA4  90D8               	bcf	status,0,c
  3275  001DA6  37B2               	rlcf	___lwdiv@divisor& (0+255),f,b
  3276  001DA8  37B3               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  3277  001DAA  0100               	movlb	0	; () banked
  3278  001DAC  2BB6               	incf	___lwdiv@counter& (0+255),f,b
  3279  001DAE                     l3573:
  3280                           
  3281                           ; BSR set to: 0
  3282  001DAE  0100               	movlb	0	; () banked
  3283  001DB0  AFB3               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  3284  001DB2  D7F7               	goto	l3571
  3285  001DB4                     l3575:
  3286                           
  3287                           ; BSR set to: 0
  3288  001DB4  0100               	movlb	0	; () banked
  3289  001DB6  90D8               	bcf	status,0,c
  3290  001DB8  37B4               	rlcf	___lwdiv@quotient& (0+255),f,b
  3291  001DBA  37B5               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  3292                           
  3293                           ; BSR set to: 0
  3294  001DBC  0100               	movlb	0	; () banked
  3295  001DBE  51B2               	movf	___lwdiv@divisor& (0+255),w,b
  3296  001DC0  0100               	movlb	0	; () banked
  3297  001DC2  5DB0               	subwf	___lwdiv@dividend& (0+255),w,b
  3298  001DC4  0100               	movlb	0	; () banked
  3299  001DC6  51B3               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3300  001DC8  0100               	movlb	0	; () banked
  3301  001DCA  59B1               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  3302  001DCC  A0D8               	btfss	status,0,c
  3303  001DCE  D00A               	goto	l3583
  3304                           
  3305                           ; BSR set to: 0
  3306  001DD0  0100               	movlb	0	; () banked
  3307  001DD2  51B2               	movf	___lwdiv@divisor& (0+255),w,b
  3308  001DD4  0100               	movlb	0	; () banked
  3309  001DD6  5FB0               	subwf	___lwdiv@dividend& (0+255),f,b
  3310  001DD8  0100               	movlb	0	; () banked
  3311  001DDA  51B3               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3312  001DDC  0100               	movlb	0	; () banked
  3313  001DDE  5BB1               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  3314                           
  3315                           ; BSR set to: 0
  3316  001DE0  0100               	movlb	0	; () banked
  3317  001DE2  81B4               	bsf	___lwdiv@quotient& (0+255),0,b
  3318  001DE4                     l3583:
  3319                           
  3320                           ; BSR set to: 0
  3321  001DE4  0100               	movlb	0	; () banked
  3322  001DE6  90D8               	bcf	status,0,c
  3323  001DE8  33B3               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  3324  001DEA  33B2               	rrcf	___lwdiv@divisor& (0+255),f,b
  3325                           
  3326                           ; BSR set to: 0
  3327  001DEC  0100               	movlb	0	; () banked
  3328  001DEE  2FB6               	decfsz	___lwdiv@counter& (0+255),f,b
  3329  001DF0  D7E1               	goto	l3575
  3330  001DF2                     l974:
  3331                           
  3332                           ; BSR set to: 0
  3333  001DF2  C0B4  F0B0         	movff	___lwdiv@quotient,?___lwdiv
  3334  001DF6  C0B5  F0B1         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3335                           
  3336                           ; BSR set to: 0
  3337  001DFA  0012               	return		;funcret
  3338  001DFC                     __end_of___lwdiv:
  3339                           	opt stack 0
  3340                           tblptru	equ	0xFF8
  3341                           tblptrh	equ	0xFF7
  3342                           tblptrl	equ	0xFF6
  3343                           tablat	equ	0xFF5
  3344                           prodh	equ	0xFF4
  3345                           prodl	equ	0xFF3
  3346                           intcon	equ	0xFF2
  3347                           intcon3	equ	0xFF0
  3348                           postinc0	equ	0xFEE
  3349                           wreg	equ	0xFE8
  3350                           postdec1	equ	0xFE5
  3351                           fsr1l	equ	0xFE1
  3352                           indf2	equ	0xFDF
  3353                           postinc2	equ	0xFDE
  3354                           postdec2	equ	0xFDD
  3355                           fsr2h	equ	0xFDA
  3356                           fsr2l	equ	0xFD9
  3357                           status	equ	0xFD8
  3358                           
  3359 ;; *************** function _getTime *****************
  3360 ;; Defined at:
  3361 ;;		line 76 in file "modules.c"
  3362 ;; Parameters:    Size  Location     Type
  3363 ;;  time            2    3[BANK0 ] PTR unsigned char 
  3364 ;;		 -> time(7), 
  3365 ;; Auto vars:     Size  Location     Type
  3366 ;;  i               1    5[BANK0 ] unsigned char 
  3367 ;; Return value:  Size  Location     Type
  3368 ;;                  1    wreg      void 
  3369 ;; Registers used:
  3370 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3371 ;; Tracked objects:
  3372 ;;		On entry : 0/0
  3373 ;;		On exit  : 0/0
  3374 ;;		Unchanged: 0/0
  3375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3376 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3377 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3379 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3380 ;;Total ram usage:        3 bytes
  3381 ;; Hardware stack levels used:    1
  3382 ;; Hardware stack levels required when called:    9
  3383 ;; This function calls:
  3384 ;;		_I2C_Master_Read
  3385 ;;		_I2C_Master_Start
  3386 ;;		_I2C_Master_Stop
  3387 ;;		_I2C_Master_Write
  3388 ;; This function is called by:
  3389 ;;		_showRTC
  3390 ;; This function uses a non-reentrant model
  3391 ;;
  3392                           
  3393                           	psect	text8
  3394  001B62                     __ptext8:
  3395                           	opt stack 0
  3396  001B62                     _getTime:
  3397                           	opt stack 20
  3398                           
  3399                           ;modules.c: 77: (INTCONbits.GIE = 0);
  3400                           
  3401                           ; BSR set to: 0
  3402                           ;incstack = 0
  3403  001B62  9EF2               	bcf	intcon,7,c	;volatile
  3404                           
  3405                           ;modules.c: 81: I2C_Master_Start();
  3406  001B64  EC48  F013         	call	_I2C_Master_Start	;wreg free
  3407                           
  3408                           ;modules.c: 82: I2C_Master_Write(0b11010000);
  3409  001B68  0E00               	movlw	0
  3410  001B6A  0100               	movlb	0	; () banked
  3411  001B6C  6FB2               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3412  001B6E  0ED0               	movlw	208
  3413  001B70  6FB1               	movwf	I2C_Master_Write@d& (0+255),b
  3414  001B72  EC3A  F013         	call	_I2C_Master_Write	;wreg free
  3415                           
  3416                           ;modules.c: 83: I2C_Master_Write(0x00);
  3417  001B76  0E00               	movlw	0
  3418  001B78  0100               	movlb	0	; () banked
  3419  001B7A  6FB2               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3420  001B7C  0E00               	movlw	0
  3421  001B7E  6FB1               	movwf	I2C_Master_Write@d& (0+255),b
  3422  001B80  EC3A  F013         	call	_I2C_Master_Write	;wreg free
  3423                           
  3424                           ;modules.c: 84: I2C_Master_Stop();
  3425  001B84  EC44  F013         	call	_I2C_Master_Stop	;wreg free
  3426                           
  3427                           ;modules.c: 87: I2C_Master_Start();
  3428  001B88  EC48  F013         	call	_I2C_Master_Start	;wreg free
  3429                           
  3430                           ;modules.c: 88: I2C_Master_Write(0b11010001);
  3431  001B8C  0E00               	movlw	0
  3432  001B8E  0100               	movlb	0	; () banked
  3433  001B90  6FB2               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3434  001B92  0ED1               	movlw	209
  3435  001B94  6FB1               	movwf	I2C_Master_Write@d& (0+255),b
  3436  001B96  EC3A  F013         	call	_I2C_Master_Write	;wreg free
  3437                           
  3438                           ;modules.c: 89: for (unsigned char i = 0; i < 0x06; i++) {
  3439  001B9A  0E00               	movlw	0
  3440  001B9C  0100               	movlb	0	; () banked
  3441  001B9E  6FB5               	movwf	getTime@i& (0+255),b
  3442  001BA0                     l4009:
  3443                           
  3444                           ; BSR set to: 0
  3445  001BA0  0E05               	movlw	5
  3446  001BA2  0100               	movlb	0	; () banked
  3447  001BA4  65B5               	cpfsgt	getTime@i& (0+255),b
  3448  001BA6  D001               	goto	l4013
  3449  001BA8  D012               	goto	l4019
  3450  001BAA                     l4013:
  3451                           
  3452                           ; BSR set to: 0
  3453                           ;modules.c: 90: time[i] = I2C_Master_Read(1);
  3454  001BAA  0100               	movlb	0	; () banked
  3455  001BAC  51B5               	movf	getTime@i& (0+255),w,b
  3456  001BAE  0D01               	mullw	1
  3457  001BB0  50F3               	movf	prodl,w,c
  3458  001BB2  0100               	movlb	0	; () banked
  3459  001BB4  25B3               	addwf	getTime@time& (0+255),w,b
  3460  001BB6  6ED9               	movwf	fsr2l,c
  3461  001BB8  50F4               	movf	prodh,w,c
  3462  001BBA  0100               	movlb	0	; () banked
  3463  001BBC  21B4               	addwfc	(getTime@time+1)& (0+255),w,b
  3464  001BBE  6EDA               	movwf	fsr2h,c
  3465  001BC0  0E01               	movlw	1
  3466  001BC2  EC04  F012         	call	_I2C_Master_Read
  3467  001BC6  6EDF               	movwf	indf2,c
  3468  001BC8  0100               	movlb	0	; () banked
  3469  001BCA  2BB5               	incf	getTime@i& (0+255),f,b
  3470  001BCC  D7E9               	goto	l4009
  3471  001BCE                     l4019:
  3472                           
  3473                           ; BSR set to: 0
  3474                           ;modules.c: 91: }
  3475                           ;modules.c: 92: time[6] = I2C_Master_Read(0);
  3476  001BCE  0100               	movlb	0	; () banked
  3477  001BD0  EE20 F006          	lfsr	2,6
  3478  001BD4  51B3               	movf	getTime@time& (0+255),w,b
  3479  001BD6  26D9               	addwf	fsr2l,f,c
  3480  001BD8  51B4               	movf	(getTime@time+1)& (0+255),w,b
  3481  001BDA  22DA               	addwfc	fsr2h,f,c
  3482  001BDC  0E00               	movlw	0
  3483  001BDE  EC04  F012         	call	_I2C_Master_Read
  3484  001BE2  6EDF               	movwf	indf2,c
  3485                           
  3486                           ;modules.c: 93: I2C_Master_Stop();
  3487  001BE4  EC44  F013         	call	_I2C_Master_Stop	;wreg free
  3488                           
  3489                           ;modules.c: 94: (INTCONbits.GIE = 1);
  3490  001BE8  8EF2               	bsf	intcon,7,c	;volatile
  3491  001BEA  0012               	return		;funcret
  3492  001BEC                     __end_of_getTime:
  3493                           	opt stack 0
  3494                           tblptru	equ	0xFF8
  3495                           tblptrh	equ	0xFF7
  3496                           tblptrl	equ	0xFF6
  3497                           tablat	equ	0xFF5
  3498                           prodh	equ	0xFF4
  3499                           prodl	equ	0xFF3
  3500                           intcon	equ	0xFF2
  3501                           intcon3	equ	0xFF0
  3502                           postinc0	equ	0xFEE
  3503                           wreg	equ	0xFE8
  3504                           postdec1	equ	0xFE5
  3505                           fsr1l	equ	0xFE1
  3506                           indf2	equ	0xFDF
  3507                           postinc2	equ	0xFDE
  3508                           postdec2	equ	0xFDD
  3509                           fsr2h	equ	0xFDA
  3510                           fsr2l	equ	0xFD9
  3511                           status	equ	0xFD8
  3512                           
  3513 ;; *************** function _I2C_Master_Write *****************
  3514 ;; Defined at:
  3515 ;;		line 42 in file "I2C.c"
  3516 ;; Parameters:    Size  Location     Type
  3517 ;;  d               2    1[BANK0 ] unsigned int 
  3518 ;; Auto vars:     Size  Location     Type
  3519 ;;		None
  3520 ;; Return value:  Size  Location     Type
  3521 ;;                  1    wreg      void 
  3522 ;; Registers used:
  3523 ;;		wreg, status,2, status,0, cstack
  3524 ;; Tracked objects:
  3525 ;;		On entry : 0/0
  3526 ;;		On exit  : 0/0
  3527 ;;		Unchanged: 0/0
  3528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3529 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3532 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3533 ;;Total ram usage:        2 bytes
  3534 ;; Hardware stack levels used:    1
  3535 ;; Hardware stack levels required when called:    8
  3536 ;; This function calls:
  3537 ;;		_I2C_Master_Wait
  3538 ;; This function is called by:
  3539 ;;		_getTime
  3540 ;; This function uses a non-reentrant model
  3541 ;;
  3542                           
  3543                           	psect	text9
  3544  002674                     __ptext9:
  3545                           	opt stack 0
  3546  002674                     _I2C_Master_Write:
  3547                           	opt stack 20
  3548                           
  3549                           ;I2C.c: 43: I2C_Master_Wait();
  3550                           
  3551                           ;incstack = 0
  3552  002674  EC06  F013         	call	_I2C_Master_Wait	;wreg free
  3553                           
  3554                           ;I2C.c: 44: SSPBUF = d;
  3555  002678  C0B1  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  3556  00267C  0012               	return		;funcret
  3557  00267E                     __end_of_I2C_Master_Write:
  3558                           	opt stack 0
  3559                           tblptru	equ	0xFF8
  3560                           tblptrh	equ	0xFF7
  3561                           tblptrl	equ	0xFF6
  3562                           tablat	equ	0xFF5
  3563                           prodh	equ	0xFF4
  3564                           prodl	equ	0xFF3
  3565                           intcon	equ	0xFF2
  3566                           intcon3	equ	0xFF0
  3567                           postinc0	equ	0xFEE
  3568                           wreg	equ	0xFE8
  3569                           postdec1	equ	0xFE5
  3570                           fsr1l	equ	0xFE1
  3571                           indf2	equ	0xFDF
  3572                           postinc2	equ	0xFDE
  3573                           postdec2	equ	0xFDD
  3574                           fsr2h	equ	0xFDA
  3575                           fsr2l	equ	0xFD9
  3576                           status	equ	0xFD8
  3577                           
  3578 ;; *************** function _I2C_Master_Stop *****************
  3579 ;; Defined at:
  3580 ;;		line 37 in file "I2C.c"
  3581 ;; Parameters:    Size  Location     Type
  3582 ;;		None
  3583 ;; Auto vars:     Size  Location     Type
  3584 ;;		None
  3585 ;; Return value:  Size  Location     Type
  3586 ;;                  1    wreg      void 
  3587 ;; Registers used:
  3588 ;;		wreg, status,2, status,0, cstack
  3589 ;; Tracked objects:
  3590 ;;		On entry : 0/0
  3591 ;;		On exit  : 0/0
  3592 ;;		Unchanged: 0/0
  3593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3597 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3598 ;;Total ram usage:        0 bytes
  3599 ;; Hardware stack levels used:    1
  3600 ;; Hardware stack levels required when called:    8
  3601 ;; This function calls:
  3602 ;;		_I2C_Master_Wait
  3603 ;; This function is called by:
  3604 ;;		_getTime
  3605 ;; This function uses a non-reentrant model
  3606 ;;
  3607                           
  3608                           	psect	text10
  3609  002688                     __ptext10:
  3610                           	opt stack 0
  3611  002688                     _I2C_Master_Stop:
  3612                           	opt stack 20
  3613                           
  3614                           ;I2C.c: 38: I2C_Master_Wait();
  3615                           
  3616                           ;incstack = 0
  3617  002688  EC06  F013         	call	_I2C_Master_Wait	;wreg free
  3618                           
  3619                           ;I2C.c: 39: PEN = 1;
  3620  00268C  84C5               	bsf	4037,2,c	;volatile
  3621  00268E  0012               	return		;funcret
  3622  002690                     __end_of_I2C_Master_Stop:
  3623                           	opt stack 0
  3624                           tblptru	equ	0xFF8
  3625                           tblptrh	equ	0xFF7
  3626                           tblptrl	equ	0xFF6
  3627                           tablat	equ	0xFF5
  3628                           prodh	equ	0xFF4
  3629                           prodl	equ	0xFF3
  3630                           intcon	equ	0xFF2
  3631                           intcon3	equ	0xFF0
  3632                           postinc0	equ	0xFEE
  3633                           wreg	equ	0xFE8
  3634                           postdec1	equ	0xFE5
  3635                           fsr1l	equ	0xFE1
  3636                           indf2	equ	0xFDF
  3637                           postinc2	equ	0xFDE
  3638                           postdec2	equ	0xFDD
  3639                           fsr2h	equ	0xFDA
  3640                           fsr2l	equ	0xFD9
  3641                           status	equ	0xFD8
  3642                           
  3643 ;; *************** function _I2C_Master_Start *****************
  3644 ;; Defined at:
  3645 ;;		line 27 in file "I2C.c"
  3646 ;; Parameters:    Size  Location     Type
  3647 ;;		None
  3648 ;; Auto vars:     Size  Location     Type
  3649 ;;		None
  3650 ;; Return value:  Size  Location     Type
  3651 ;;                  1    wreg      void 
  3652 ;; Registers used:
  3653 ;;		wreg, status,2, status,0, cstack
  3654 ;; Tracked objects:
  3655 ;;		On entry : 0/0
  3656 ;;		On exit  : 0/0
  3657 ;;		Unchanged: 0/0
  3658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3662 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3663 ;;Total ram usage:        0 bytes
  3664 ;; Hardware stack levels used:    1
  3665 ;; Hardware stack levels required when called:    8
  3666 ;; This function calls:
  3667 ;;		_I2C_Master_Wait
  3668 ;; This function is called by:
  3669 ;;		_getTime
  3670 ;; This function uses a non-reentrant model
  3671 ;;
  3672                           
  3673                           	psect	text11
  3674  002690                     __ptext11:
  3675                           	opt stack 0
  3676  002690                     _I2C_Master_Start:
  3677                           	opt stack 20
  3678                           
  3679                           ;I2C.c: 28: I2C_Master_Wait();
  3680                           
  3681                           ;incstack = 0
  3682  002690  EC06  F013         	call	_I2C_Master_Wait	;wreg free
  3683                           
  3684                           ;I2C.c: 29: SEN = 1;
  3685  002694  80C5               	bsf	4037,0,c	;volatile
  3686  002696  0012               	return		;funcret
  3687  002698                     __end_of_I2C_Master_Start:
  3688                           	opt stack 0
  3689                           tblptru	equ	0xFF8
  3690                           tblptrh	equ	0xFF7
  3691                           tblptrl	equ	0xFF6
  3692                           tablat	equ	0xFF5
  3693                           prodh	equ	0xFF4
  3694                           prodl	equ	0xFF3
  3695                           intcon	equ	0xFF2
  3696                           intcon3	equ	0xFF0
  3697                           postinc0	equ	0xFEE
  3698                           wreg	equ	0xFE8
  3699                           postdec1	equ	0xFE5
  3700                           fsr1l	equ	0xFE1
  3701                           indf2	equ	0xFDF
  3702                           postinc2	equ	0xFDE
  3703                           postdec2	equ	0xFDD
  3704                           fsr2h	equ	0xFDA
  3705                           fsr2l	equ	0xFD9
  3706                           status	equ	0xFD8
  3707                           
  3708 ;; *************** function _I2C_Master_Read *****************
  3709 ;; Defined at:
  3710 ;;		line 47 in file "I2C.c"
  3711 ;; Parameters:    Size  Location     Type
  3712 ;;  a               1    wreg     unsigned char 
  3713 ;; Auto vars:     Size  Location     Type
  3714 ;;  a               1    1[BANK0 ] unsigned char 
  3715 ;;  temp            1    2[BANK0 ] unsigned char 
  3716 ;; Return value:  Size  Location     Type
  3717 ;;                  1    wreg      unsigned char 
  3718 ;; Registers used:
  3719 ;;		wreg, status,2, status,0, cstack
  3720 ;; Tracked objects:
  3721 ;;		On entry : 0/0
  3722 ;;		On exit  : 0/0
  3723 ;;		Unchanged: 0/0
  3724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3726 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3728 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3729 ;;Total ram usage:        2 bytes
  3730 ;; Hardware stack levels used:    1
  3731 ;; Hardware stack levels required when called:    8
  3732 ;; This function calls:
  3733 ;;		_I2C_Master_Wait
  3734 ;; This function is called by:
  3735 ;;		_getTime
  3736 ;; This function uses a non-reentrant model
  3737 ;;
  3738                           
  3739                           	psect	text12
  3740  002408                     __ptext12:
  3741                           	opt stack 0
  3742  002408                     _I2C_Master_Read:
  3743                           	opt stack 20
  3744                           
  3745                           ;incstack = 0
  3746                           ;I2C_Master_Read@a stored from wreg
  3747  002408  0100               	movlb	0	; () banked
  3748  00240A  6FB1               	movwf	I2C_Master_Read@a& (0+255),b
  3749                           
  3750                           ;I2C.c: 48: unsigned char temp;
  3751                           ;I2C.c: 49: I2C_Master_Wait();
  3752  00240C  EC06  F013         	call	_I2C_Master_Wait	;wreg free
  3753                           
  3754                           ;I2C.c: 50: RCEN = 1;
  3755  002410  86C5               	bsf	4037,3,c	;volatile
  3756                           
  3757                           ;I2C.c: 51: I2C_Master_Wait();
  3758  002412  EC06  F013         	call	_I2C_Master_Wait	;wreg free
  3759                           
  3760                           ;I2C.c: 52: temp = SSPBUF;
  3761  002416  CFC9 F0B2          	movff	4041,I2C_Master_Read@temp	;volatile
  3762                           
  3763                           ;I2C.c: 53: I2C_Master_Wait();
  3764  00241A  EC06  F013         	call	_I2C_Master_Wait	;wreg free
  3765                           
  3766                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
  3767  00241E  0100               	movlb	0	; () banked
  3768  002420  51B1               	movf	I2C_Master_Read@a& (0+255),w,b
  3769  002422  0100               	movlb	0	; () banked
  3770  002424  A4D8               	btfss	status,2,c
  3771  002426  D002               	goto	u2500
  3772  002428  8AC5               	bsf	4037,5,c	;volatile
  3773  00242A  D001               	goto	l3451
  3774  00242C                     u2500:
  3775  00242C  9AC5               	bcf	4037,5,c	;volatile
  3776  00242E                     l3451:
  3777                           
  3778                           ;I2C.c: 55: ACKEN = 1;
  3779  00242E  88C5               	bsf	4037,4,c	;volatile
  3780                           
  3781                           ;I2C.c: 56: return temp;
  3782  002430  0100               	movlb	0	; () banked
  3783  002432  51B2               	movf	I2C_Master_Read@temp& (0+255),w,b
  3784  002434  0012               	return	
  3785  002436                     __end_of_I2C_Master_Read:
  3786                           	opt stack 0
  3787                           tblptru	equ	0xFF8
  3788                           tblptrh	equ	0xFF7
  3789                           tblptrl	equ	0xFF6
  3790                           tablat	equ	0xFF5
  3791                           prodh	equ	0xFF4
  3792                           prodl	equ	0xFF3
  3793                           intcon	equ	0xFF2
  3794                           intcon3	equ	0xFF0
  3795                           postinc0	equ	0xFEE
  3796                           wreg	equ	0xFE8
  3797                           postdec1	equ	0xFE5
  3798                           fsr1l	equ	0xFE1
  3799                           indf2	equ	0xFDF
  3800                           postinc2	equ	0xFDE
  3801                           postdec2	equ	0xFDD
  3802                           fsr2h	equ	0xFDA
  3803                           fsr2l	equ	0xFD9
  3804                           status	equ	0xFD8
  3805                           
  3806 ;; *************** function _I2C_Master_Wait *****************
  3807 ;; Defined at:
  3808 ;;		line 23 in file "I2C.c"
  3809 ;; Parameters:    Size  Location     Type
  3810 ;;		None
  3811 ;; Auto vars:     Size  Location     Type
  3812 ;;		None
  3813 ;; Return value:  Size  Location     Type
  3814 ;;                  1    wreg      void 
  3815 ;; Registers used:
  3816 ;;		wreg, status,2, status,0
  3817 ;; Tracked objects:
  3818 ;;		On entry : 0/0
  3819 ;;		On exit  : 0/0
  3820 ;;		Unchanged: 0/0
  3821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3824 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3825 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3826 ;;Total ram usage:        1 bytes
  3827 ;; Hardware stack levels used:    1
  3828 ;; Hardware stack levels required when called:    7
  3829 ;; This function calls:
  3830 ;;		Nothing
  3831 ;; This function is called by:
  3832 ;;		_I2C_Master_Start
  3833 ;;		_I2C_Master_Stop
  3834 ;;		_I2C_Master_Write
  3835 ;;		_I2C_Master_Read
  3836 ;; This function uses a non-reentrant model
  3837 ;;
  3838                           
  3839                           	psect	text13
  3840  00260C                     __ptext13:
  3841                           	opt stack 0
  3842  00260C                     _I2C_Master_Wait:
  3843                           	opt stack 20
  3844  00260C                     l407:
  3845  00260C  B4C7               	btfsc	4039,2,c	;volatile
  3846  00260E  D7FE               	goto	l407
  3847  002610  CFC5 F0B0          	movff	4037,??_I2C_Master_Wait	;volatile
  3848  002614  0E1F               	movlw	31
  3849  002616  0100               	movlb	0	; () banked
  3850  002618  17B0               	andwf	??_I2C_Master_Wait& (0+255),f,b
  3851  00261A  B4D8               	btfsc	status,2,c
  3852  00261C  0012               	return	
  3853  00261E  D7F6               	goto	l407
  3854  002620                     __end_of_I2C_Master_Wait:
  3855                           	opt stack 0
  3856                           tblptru	equ	0xFF8
  3857                           tblptrh	equ	0xFF7
  3858                           tblptrl	equ	0xFF6
  3859                           tablat	equ	0xFF5
  3860                           prodh	equ	0xFF4
  3861                           prodl	equ	0xFF3
  3862                           intcon	equ	0xFF2
  3863                           intcon3	equ	0xFF0
  3864                           postinc0	equ	0xFEE
  3865                           wreg	equ	0xFE8
  3866                           postdec1	equ	0xFE5
  3867                           fsr1l	equ	0xFE1
  3868                           indf2	equ	0xFDF
  3869                           postinc2	equ	0xFDE
  3870                           postdec2	equ	0xFDD
  3871                           fsr2h	equ	0xFDA
  3872                           fsr2l	equ	0xFD9
  3873                           status	equ	0xFD8
  3874                           
  3875 ;; *************** function _initialize *****************
  3876 ;; Defined at:
  3877 ;;		line 21 in file "main.c"
  3878 ;; Parameters:    Size  Location     Type
  3879 ;;		None
  3880 ;; Auto vars:     Size  Location     Type
  3881 ;;		None
  3882 ;; Return value:  Size  Location     Type
  3883 ;;                  1    wreg      void 
  3884 ;; Registers used:
  3885 ;;		wreg, status,2, status,0, cstack
  3886 ;; Tracked objects:
  3887 ;;		On entry : 0/0
  3888 ;;		On exit  : 0/0
  3889 ;;		Unchanged: 0/0
  3890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3894 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3895 ;;Total ram usage:        0 bytes
  3896 ;; Hardware stack levels used:    1
  3897 ;; Hardware stack levels required when called:   10
  3898 ;; This function calls:
  3899 ;;		_I2C_Master_Init
  3900 ;;		_initLCD
  3901 ;;		_initLatest
  3902 ;;		_lcdInst
  3903 ;; This function is called by:
  3904 ;;		_main
  3905 ;; This function uses a non-reentrant model
  3906 ;;
  3907                           
  3908                           	psect	text14
  3909  0020FA                     __ptext14:
  3910                           	opt stack 0
  3911  0020FA                     _initialize:
  3912                           	opt stack 20
  3913                           
  3914                           ;main.c: 22: TRISA = 0xFF;
  3915                           
  3916                           ; BSR set to: 0
  3917                           ;incstack = 0
  3918  0020FA  6892               	setf	3986,c	;volatile
  3919                           
  3920                           ;main.c: 23: TRISB = 0xFF;
  3921  0020FC  6893               	setf	3987,c	;volatile
  3922                           
  3923                           ;main.c: 24: TRISC = 0x00;
  3924  0020FE  0E00               	movlw	0
  3925  002100  6E94               	movwf	3988,c	;volatile
  3926                           
  3927                           ;main.c: 25: TRISD = 0x00;
  3928  002102  0E00               	movlw	0
  3929  002104  6E95               	movwf	3989,c	;volatile
  3930                           
  3931                           ;main.c: 26: TRISE = 0x0F;
  3932  002106  0E0F               	movlw	15
  3933  002108  6E96               	movwf	3990,c	;volatile
  3934                           
  3935                           ;main.c: 28: initLCD();
  3936  00210A  EC6D  F011         	call	_initLCD	;wreg free
  3937                           
  3938                           ;main.c: 30: LATA = 0x00;
  3939  00210E  0E00               	movlw	0
  3940  002110  6E89               	movwf	3977,c	;volatile
  3941                           
  3942                           ;main.c: 31: LATB = 0x00;
  3943  002112  0E00               	movlw	0
  3944  002114  6E8A               	movwf	3978,c	;volatile
  3945                           
  3946                           ;main.c: 32: LATB2 = 1;
  3947  002116  848A               	bsf	3978,2,c	;volatile
  3948                           
  3949                           ;main.c: 33: LATC = 0x00;
  3950  002118  0E00               	movlw	0
  3951  00211A  6E8B               	movwf	3979,c	;volatile
  3952                           
  3953                           ;main.c: 34: LATD = 0x00;
  3954  00211C  0E00               	movlw	0
  3955  00211E  6E8C               	movwf	3980,c	;volatile
  3956                           
  3957                           ;main.c: 35: LATE = 0x00;
  3958  002120  0E00               	movlw	0
  3959  002122  6E8D               	movwf	3981,c	;volatile
  3960                           
  3961                           ;main.c: 37: ADCON0 = 0x00;
  3962  002124  0E00               	movlw	0
  3963  002126  6EC2               	movwf	4034,c	;volatile
  3964                           
  3965                           ;main.c: 38: ADCON1 = 0x09;
  3966  002128  0E09               	movlw	9
  3967  00212A  6EC1               	movwf	4033,c	;volatile
  3968                           
  3969                           ;main.c: 39: CVRCON = 0x00;
  3970  00212C  0E00               	movlw	0
  3971  00212E  6EB5               	movwf	4021,c	;volatile
  3972                           
  3973                           ;main.c: 40: ADFM = 1;
  3974  002130  8EC0               	bsf	4032,7,c	;volatile
  3975                           
  3976                           ;main.c: 42: lcdInst(0x01);;
  3977  002132  0E01               	movlw	1
  3978  002134  EC21  F013         	call	_lcdInst
  3979                           
  3980                           ;main.c: 44: I2C_Master_Init(10000);
  3981  002138  0E10               	movlw	16
  3982  00213A  0100               	movlb	0	; () banked
  3983  00213C  6FBD               	movwf	I2C_Master_Init@c& (0+255),b
  3984  00213E  0E27               	movlw	39
  3985  002140  6FBE               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3986  002142  0E00               	movlw	0
  3987  002144  6FBF               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3988  002146  0E00               	movlw	0
  3989  002148  6FC0               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3990  00214A  EC4D  F010         	call	_I2C_Master_Init	;wreg free
  3991                           
  3992                           ;main.c: 47: initLatest();
  3993  00214E  EC92  F012         	call	_initLatest	;wreg free
  3994                           
  3995                           ;main.c: 48: INTEDG2 = 0;
  3996  002152  98F1               	bcf	intcon2,4,c	;volatile
  3997  002154  0012               	return		;funcret
  3998  002156                     __end_of_initialize:
  3999                           	opt stack 0
  4000                           tblptru	equ	0xFF8
  4001                           tblptrh	equ	0xFF7
  4002                           tblptrl	equ	0xFF6
  4003                           tablat	equ	0xFF5
  4004                           prodh	equ	0xFF4
  4005                           prodl	equ	0xFF3
  4006                           intcon	equ	0xFF2
  4007                           intcon2	equ	0xFF1
  4008                           intcon3	equ	0xFF0
  4009                           postinc0	equ	0xFEE
  4010                           wreg	equ	0xFE8
  4011                           postdec1	equ	0xFE5
  4012                           fsr1l	equ	0xFE1
  4013                           indf2	equ	0xFDF
  4014                           postinc2	equ	0xFDE
  4015                           postdec2	equ	0xFDD
  4016                           fsr2h	equ	0xFDA
  4017                           fsr2l	equ	0xFD9
  4018                           status	equ	0xFD8
  4019                           
  4020 ;; *************** function _initLatest *****************
  4021 ;; Defined at:
  4022 ;;		line 9 in file "eeprom.c"
  4023 ;; Parameters:    Size  Location     Type
  4024 ;;		None
  4025 ;; Auto vars:     Size  Location     Type
  4026 ;;		None
  4027 ;; Return value:  Size  Location     Type
  4028 ;;                  1    wreg      void 
  4029 ;; Registers used:
  4030 ;;		wreg, status,2, status,0, cstack
  4031 ;; Tracked objects:
  4032 ;;		On entry : 0/0
  4033 ;;		On exit  : 0/0
  4034 ;;		Unchanged: 0/0
  4035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4039 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4040 ;;Total ram usage:        0 bytes
  4041 ;; Hardware stack levels used:    1
  4042 ;; Hardware stack levels required when called:    8
  4043 ;; This function calls:
  4044 ;;		_ReadEE
  4045 ;; This function is called by:
  4046 ;;		_initialize
  4047 ;; This function uses a non-reentrant model
  4048 ;;
  4049                           
  4050                           	psect	text15
  4051  002524                     __ptext15:
  4052                           	opt stack 0
  4053  002524                     _initLatest:
  4054                           	opt stack 21
  4055                           
  4056                           ;eeprom.c: 10: Latest = ReadEE(160);
  4057                           
  4058                           ;incstack = 0
  4059  002524  0E00               	movlw	0
  4060  002526  0100               	movlb	0	; () banked
  4061  002528  6FB1               	movwf	(ReadEE@address+1)& (0+255),b
  4062  00252A  0EA0               	movlw	160
  4063  00252C  6FB0               	movwf	ReadEE@address& (0+255),b
  4064  00252E  ECEF  F012         	call	_ReadEE	;wreg free
  4065  002532  0100               	movlb	0	; () banked
  4066  002534  6FA8               	movwf	_Latest& (0+255),b
  4067                           
  4068                           ; BSR set to: 0
  4069                           ;eeprom.c: 11: if (Latest > 3) {
  4070  002536  0E03               	movlw	3
  4071  002538  0100               	movlb	0	; () banked
  4072  00253A  65A8               	cpfsgt	_Latest& (0+255),b
  4073  00253C  0012               	return	
  4074                           
  4075                           ; BSR set to: 0
  4076                           ;eeprom.c: 12: Latest = 0;
  4077  00253E  0E00               	movlw	0
  4078  002540  0100               	movlb	0	; () banked
  4079  002542  6FA8               	movwf	_Latest& (0+255),b
  4080  002544  0012               	return	
  4081  002546                     __end_of_initLatest:
  4082                           	opt stack 0
  4083                           tblptru	equ	0xFF8
  4084                           tblptrh	equ	0xFF7
  4085                           tblptrl	equ	0xFF6
  4086                           tablat	equ	0xFF5
  4087                           prodh	equ	0xFF4
  4088                           prodl	equ	0xFF3
  4089                           intcon	equ	0xFF2
  4090                           intcon2	equ	0xFF1
  4091                           intcon3	equ	0xFF0
  4092                           postinc0	equ	0xFEE
  4093                           wreg	equ	0xFE8
  4094                           postdec1	equ	0xFE5
  4095                           fsr1l	equ	0xFE1
  4096                           indf2	equ	0xFDF
  4097                           postinc2	equ	0xFDE
  4098                           postdec2	equ	0xFDD
  4099                           fsr2h	equ	0xFDA
  4100                           fsr2l	equ	0xFD9
  4101                           status	equ	0xFD8
  4102                           
  4103 ;; *************** function _ReadEE *****************
  4104 ;; Defined at:
  4105 ;;		line 16 in file "eeprom.c"
  4106 ;; Parameters:    Size  Location     Type
  4107 ;;  address         2    0[BANK0 ] unsigned int 
  4108 ;; Auto vars:     Size  Location     Type
  4109 ;;		None
  4110 ;; Return value:  Size  Location     Type
  4111 ;;                  1    wreg      unsigned char 
  4112 ;; Registers used:
  4113 ;;		wreg, status,2
  4114 ;; Tracked objects:
  4115 ;;		On entry : 0/0
  4116 ;;		On exit  : 0/0
  4117 ;;		Unchanged: 0/0
  4118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4119 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4122 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4123 ;;Total ram usage:        2 bytes
  4124 ;; Hardware stack levels used:    1
  4125 ;; Hardware stack levels required when called:    7
  4126 ;; This function calls:
  4127 ;;		Nothing
  4128 ;; This function is called by:
  4129 ;;		_initLatest
  4130 ;; This function uses a non-reentrant model
  4131 ;;
  4132                           
  4133                           	psect	text16
  4134  0025DE                     __ptext16:
  4135                           	opt stack 0
  4136  0025DE                     _ReadEE:
  4137                           	opt stack 21
  4138                           
  4139                           ;eeprom.c: 19: EEADRH = (unsigned char) (address >> 8);
  4140                           
  4141                           ; BSR set to: 0
  4142                           ;incstack = 0
  4143  0025DE  0100               	movlb	0	; () banked
  4144  0025E0  51B1               	movf	(ReadEE@address+1)& (0+255),w,b
  4145  0025E2  6EAA               	movwf	4010,c	;volatile
  4146                           
  4147                           ; BSR set to: 0
  4148                           ;eeprom.c: 20: EEADR = (unsigned char) address;
  4149  0025E4  C0B0  FFA9         	movff	ReadEE@address,4009	;volatile
  4150                           
  4151                           ; BSR set to: 0
  4152                           ;eeprom.c: 22: EECON1bits.EEPGD = 0;
  4153  0025E8  9EA6               	bcf	4006,7,c	;volatile
  4154                           
  4155                           ; BSR set to: 0
  4156                           ;eeprom.c: 23: EECON1bits.CFGS = 0;
  4157  0025EA  9CA6               	bcf	4006,6,c	;volatile
  4158                           
  4159                           ; BSR set to: 0
  4160                           ;eeprom.c: 24: EECON1bits.RD = 1;
  4161  0025EC  80A6               	bsf	4006,0,c	;volatile
  4162  0025EE                     l455:
  4163  0025EE  B0A6               	btfsc	4006,0,c	;volatile
  4164  0025F0  D7FE               	goto	l455
  4165                           
  4166                           ;eeprom.c: 30: return EEDATA;
  4167  0025F2  50A8               	movf	4008,w,c	;volatile
  4168  0025F4  0012               	return	
  4169  0025F6                     __end_of_ReadEE:
  4170                           	opt stack 0
  4171                           tblptru	equ	0xFF8
  4172                           tblptrh	equ	0xFF7
  4173                           tblptrl	equ	0xFF6
  4174                           tablat	equ	0xFF5
  4175                           prodh	equ	0xFF4
  4176                           prodl	equ	0xFF3
  4177                           intcon	equ	0xFF2
  4178                           intcon2	equ	0xFF1
  4179                           intcon3	equ	0xFF0
  4180                           postinc0	equ	0xFEE
  4181                           wreg	equ	0xFE8
  4182                           postdec1	equ	0xFE5
  4183                           fsr1l	equ	0xFE1
  4184                           indf2	equ	0xFDF
  4185                           postinc2	equ	0xFDE
  4186                           postdec2	equ	0xFDD
  4187                           fsr2h	equ	0xFDA
  4188                           fsr2l	equ	0xFD9
  4189                           status	equ	0xFD8
  4190                           
  4191 ;; *************** function _initLCD *****************
  4192 ;; Defined at:
  4193 ;;		line 9 in file "lcd.c"
  4194 ;; Parameters:    Size  Location     Type
  4195 ;;		None
  4196 ;; Auto vars:     Size  Location     Type
  4197 ;;		None
  4198 ;; Return value:  Size  Location     Type
  4199 ;;                  1    wreg      void 
  4200 ;; Registers used:
  4201 ;;		wreg, status,2, status,0, cstack
  4202 ;; Tracked objects:
  4203 ;;		On entry : 0/0
  4204 ;;		On exit  : 0/0
  4205 ;;		Unchanged: 0/0
  4206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4209 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4210 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4211 ;;Total ram usage:        1 bytes
  4212 ;; Hardware stack levels used:    1
  4213 ;; Hardware stack levels required when called:    9
  4214 ;; This function calls:
  4215 ;;		_lcdInst
  4216 ;; This function is called by:
  4217 ;;		_initialize
  4218 ;; This function uses a non-reentrant model
  4219 ;;
  4220                           
  4221                           	psect	text17
  4222  0022DA                     __ptext17:
  4223                           	opt stack 0
  4224  0022DA                     _initLCD:
  4225                           	opt stack 20
  4226                           
  4227                           ;lcd.c: 10: _delay((unsigned long)((15)*(8000000/4000.0)));
  4228                           
  4229                           ;incstack = 0
  4230  0022DA  0E27               	movlw	39
  4231  0022DC  0100               	movlb	0	; () banked
  4232  0022DE  6FB3               	movwf	??_initLCD& (0+255),b
  4233  0022E0  0EF5               	movlw	245
  4234  0022E2                     u3457:
  4235  0022E2  2EE8               	decfsz	wreg,f,c
  4236  0022E4  D7FE               	bra	u3457
  4237  0022E6  2FB3               	decfsz	??_initLCD& (0+255),f,b
  4238  0022E8  D7FC               	bra	u3457
  4239                           
  4240                           ;lcd.c: 11: lcdInst(0b00110011);
  4241  0022EA  0E33               	movlw	51
  4242  0022EC  EC21  F013         	call	_lcdInst
  4243                           
  4244                           ;lcd.c: 12: lcdInst(0b00110010);
  4245  0022F0  0E32               	movlw	50
  4246  0022F2  EC21  F013         	call	_lcdInst
  4247                           
  4248                           ;lcd.c: 13: lcdInst(0b00101000);
  4249  0022F6  0E28               	movlw	40
  4250  0022F8  EC21  F013         	call	_lcdInst
  4251                           
  4252                           ;lcd.c: 14: lcdInst(0b00001111);
  4253  0022FC  0E0F               	movlw	15
  4254  0022FE  EC21  F013         	call	_lcdInst
  4255                           
  4256                           ;lcd.c: 15: lcdInst(0b00000110);
  4257  002302  0E06               	movlw	6
  4258  002304  EC21  F013         	call	_lcdInst
  4259                           
  4260                           ;lcd.c: 16: lcdInst(0b00000001);
  4261  002308  0E01               	movlw	1
  4262  00230A  EC21  F013         	call	_lcdInst
  4263                           
  4264                           ;lcd.c: 17: _delay((unsigned long)((15)*(8000000/4000.0)));
  4265  00230E  0E27               	movlw	39
  4266  002310  0100               	movlb	0	; () banked
  4267  002312  6FB3               	movwf	??_initLCD& (0+255),b
  4268  002314  0EF5               	movlw	245
  4269  002316                     u3467:
  4270  002316  2EE8               	decfsz	wreg,f,c
  4271  002318  D7FE               	bra	u3467
  4272  00231A  2FB3               	decfsz	??_initLCD& (0+255),f,b
  4273  00231C  D7FC               	bra	u3467
  4274  00231E  0012               	return		;funcret
  4275  002320                     __end_of_initLCD:
  4276                           	opt stack 0
  4277                           tblptru	equ	0xFF8
  4278                           tblptrh	equ	0xFF7
  4279                           tblptrl	equ	0xFF6
  4280                           tablat	equ	0xFF5
  4281                           prodh	equ	0xFF4
  4282                           prodl	equ	0xFF3
  4283                           intcon	equ	0xFF2
  4284                           intcon2	equ	0xFF1
  4285                           intcon3	equ	0xFF0
  4286                           postinc0	equ	0xFEE
  4287                           wreg	equ	0xFE8
  4288                           postdec1	equ	0xFE5
  4289                           fsr1l	equ	0xFE1
  4290                           indf2	equ	0xFDF
  4291                           postinc2	equ	0xFDE
  4292                           postdec2	equ	0xFDD
  4293                           fsr2h	equ	0xFDA
  4294                           fsr2l	equ	0xFD9
  4295                           status	equ	0xFD8
  4296                           
  4297 ;; *************** function _lcdInst *****************
  4298 ;; Defined at:
  4299 ;;		line 20 in file "lcd.c"
  4300 ;; Parameters:    Size  Location     Type
  4301 ;;  data            1    wreg     unsigned char 
  4302 ;; Auto vars:     Size  Location     Type
  4303 ;;  data            1    2[BANK0 ] unsigned char 
  4304 ;; Return value:  Size  Location     Type
  4305 ;;                  1    wreg      void 
  4306 ;; Registers used:
  4307 ;;		wreg, status,2, status,0, cstack
  4308 ;; Tracked objects:
  4309 ;;		On entry : 0/0
  4310 ;;		On exit  : 0/0
  4311 ;;		Unchanged: 0/0
  4312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4314 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4316 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4317 ;;Total ram usage:        1 bytes
  4318 ;; Hardware stack levels used:    1
  4319 ;; Hardware stack levels required when called:    8
  4320 ;; This function calls:
  4321 ;;		_lcdNibble
  4322 ;; This function is called by:
  4323 ;;		_initialize
  4324 ;;		_showRTC
  4325 ;;		_main
  4326 ;;		_initLCD
  4327 ;;		_testAD
  4328 ;; This function uses a non-reentrant model
  4329 ;;
  4330                           
  4331                           	psect	text18
  4332  002642                     __ptext18:
  4333                           	opt stack 0
  4334  002642                     _lcdInst:
  4335                           	opt stack 21
  4336                           
  4337                           ;incstack = 0
  4338                           ;lcdInst@data stored from wreg
  4339  002642  0100               	movlb	0	; () banked
  4340  002644  6FB2               	movwf	lcdInst@data& (0+255),b
  4341                           
  4342                           ;lcd.c: 21: LATDbits.LATD2 = 0;
  4343  002646  948C               	bcf	3980,2,c	;volatile
  4344                           
  4345                           ;lcd.c: 22: lcdNibble(data);
  4346  002648  0100               	movlb	0	; () banked
  4347  00264A  51B2               	movf	lcdInst@data& (0+255),w,b
  4348  00264C  ECE8  F00F         	call	_lcdNibble
  4349  002650  0012               	return		;funcret
  4350  002652                     __end_of_lcdInst:
  4351                           	opt stack 0
  4352                           tblptru	equ	0xFF8
  4353                           tblptrh	equ	0xFF7
  4354                           tblptrl	equ	0xFF6
  4355                           tablat	equ	0xFF5
  4356                           prodh	equ	0xFF4
  4357                           prodl	equ	0xFF3
  4358                           intcon	equ	0xFF2
  4359                           intcon2	equ	0xFF1
  4360                           intcon3	equ	0xFF0
  4361                           postinc0	equ	0xFEE
  4362                           wreg	equ	0xFE8
  4363                           postdec1	equ	0xFE5
  4364                           fsr1l	equ	0xFE1
  4365                           indf2	equ	0xFDF
  4366                           postinc2	equ	0xFDE
  4367                           postdec2	equ	0xFDD
  4368                           fsr2h	equ	0xFDA
  4369                           fsr2l	equ	0xFD9
  4370                           status	equ	0xFD8
  4371                           
  4372 ;; *************** function _lcdNibble *****************
  4373 ;; Defined at:
  4374 ;;		line 30 in file "lcd.c"
  4375 ;; Parameters:    Size  Location     Type
  4376 ;;  data            1    wreg     unsigned char 
  4377 ;; Auto vars:     Size  Location     Type
  4378 ;;  data            1    1[BANK0 ] unsigned char 
  4379 ;;  temp            1    0[BANK0 ] unsigned char 
  4380 ;; Return value:  Size  Location     Type
  4381 ;;                  1    wreg      void 
  4382 ;; Registers used:
  4383 ;;		wreg, status,2, status,0
  4384 ;; Tracked objects:
  4385 ;;		On entry : 0/0
  4386 ;;		On exit  : 0/0
  4387 ;;		Unchanged: 0/0
  4388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4390 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4392 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4393 ;;Total ram usage:        2 bytes
  4394 ;; Hardware stack levels used:    1
  4395 ;; Hardware stack levels required when called:    7
  4396 ;; This function calls:
  4397 ;;		Nothing
  4398 ;; This function is called by:
  4399 ;;		_lcdInst
  4400 ;;		_putch
  4401 ;; This function uses a non-reentrant model
  4402 ;;
  4403                           
  4404                           	psect	text19
  4405  001FD0                     __ptext19:
  4406                           	opt stack 0
  4407  001FD0                     _lcdNibble:
  4408                           	opt stack 20
  4409                           
  4410                           ;incstack = 0
  4411                           ;lcdNibble@data stored from wreg
  4412  001FD0  0100               	movlb	0	; () banked
  4413  001FD2  6FB1               	movwf	lcdNibble@data& (0+255),b
  4414                           
  4415                           ;lcd.c: 32: char temp = data & 0xF0;
  4416  001FD4  0100               	movlb	0	; () banked
  4417  001FD6  51B1               	movf	lcdNibble@data& (0+255),w,b
  4418  001FD8  0BF0               	andlw	240
  4419  001FDA  0100               	movlb	0	; () banked
  4420  001FDC  6FB0               	movwf	lcdNibble@temp& (0+255),b
  4421                           
  4422                           ;lcd.c: 33: LATD = LATD & 0x0F;
  4423  001FDE  508C               	movf	3980,w,c	;volatile
  4424  001FE0  0B0F               	andlw	15
  4425  001FE2  6E8C               	movwf	3980,c	;volatile
  4426                           
  4427                           ;lcd.c: 34: LATD = temp | LATD;
  4428  001FE4  0100               	movlb	0	; () banked
  4429  001FE6  51B0               	movf	lcdNibble@temp& (0+255),w,b
  4430  001FE8  108C               	iorwf	3980,w,c	;volatile
  4431  001FEA  6E8C               	movwf	3980,c	;volatile
  4432                           
  4433                           ; BSR set to: 0
  4434                           ;lcd.c: 36: LATDbits.LATD3 = 0;
  4435  001FEC  968C               	bcf	3980,3,c	;volatile
  4436                           
  4437                           ; BSR set to: 0
  4438                           ;lcd.c: 37: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4439  001FEE  0E10               	movlw	16
  4440  001FF0                     u3477:
  4441  001FF0  2EE8               	decfsz	wreg,f,c
  4442  001FF2  D7FE               	bra	u3477
  4443  001FF4  D000               	nop2	
  4444                           
  4445                           ;lcd.c: 38: LATDbits.LATD3 = 1;
  4446  001FF6  868C               	bsf	3980,3,c	;volatile
  4447                           
  4448                           ;lcd.c: 39: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4449  001FF8  0E10               	movlw	16
  4450  001FFA                     u3487:
  4451  001FFA  2EE8               	decfsz	wreg,f,c
  4452  001FFC  D7FE               	bra	u3487
  4453  001FFE  D000               	nop2	
  4454                           
  4455                           ;lcd.c: 41: data = data << 4;
  4456  002000  0100               	movlb	0	; () banked
  4457  002002  39B1               	swapf	lcdNibble@data& (0+255),w,b
  4458  002004  0BF0               	andlw	240
  4459  002006  0100               	movlb	0	; () banked
  4460  002008  6FB1               	movwf	lcdNibble@data& (0+255),b
  4461                           
  4462                           ;lcd.c: 43: temp = data & 0xF0;
  4463  00200A  0100               	movlb	0	; () banked
  4464  00200C  51B1               	movf	lcdNibble@data& (0+255),w,b
  4465  00200E  0BF0               	andlw	240
  4466  002010  0100               	movlb	0	; () banked
  4467  002012  6FB0               	movwf	lcdNibble@temp& (0+255),b
  4468                           
  4469                           ;lcd.c: 44: LATD = LATD & 0x0F;
  4470  002014  508C               	movf	3980,w,c	;volatile
  4471  002016  0B0F               	andlw	15
  4472  002018  6E8C               	movwf	3980,c	;volatile
  4473                           
  4474                           ;lcd.c: 45: LATD = temp | LATD;
  4475  00201A  0100               	movlb	0	; () banked
  4476  00201C  51B0               	movf	lcdNibble@temp& (0+255),w,b
  4477  00201E  108C               	iorwf	3980,w,c	;volatile
  4478  002020  6E8C               	movwf	3980,c	;volatile
  4479                           
  4480                           ; BSR set to: 0
  4481                           ;lcd.c: 47: LATDbits.LATD3 = 0;
  4482  002022  968C               	bcf	3980,3,c	;volatile
  4483                           
  4484                           ; BSR set to: 0
  4485                           ;lcd.c: 48: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4486  002024  0E10               	movlw	16
  4487  002026                     u3497:
  4488  002026  2EE8               	decfsz	wreg,f,c
  4489  002028  D7FE               	bra	u3497
  4490  00202A  D000               	nop2	
  4491                           
  4492                           ;lcd.c: 49: LATDbits.LATD3 = 1;
  4493  00202C  868C               	bsf	3980,3,c	;volatile
  4494                           
  4495                           ;lcd.c: 50: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4496  00202E  0E10               	movlw	16
  4497  002030                     u3507:
  4498  002030  2EE8               	decfsz	wreg,f,c
  4499  002032  D7FE               	bra	u3507
  4500  002034  D000               	nop2	
  4501  002036  0012               	return		;funcret
  4502  002038                     __end_of_lcdNibble:
  4503                           	opt stack 0
  4504                           tblptru	equ	0xFF8
  4505                           tblptrh	equ	0xFF7
  4506                           tblptrl	equ	0xFF6
  4507                           tablat	equ	0xFF5
  4508                           prodh	equ	0xFF4
  4509                           prodl	equ	0xFF3
  4510                           intcon	equ	0xFF2
  4511                           intcon2	equ	0xFF1
  4512                           intcon3	equ	0xFF0
  4513                           postinc0	equ	0xFEE
  4514                           wreg	equ	0xFE8
  4515                           postdec1	equ	0xFE5
  4516                           fsr1l	equ	0xFE1
  4517                           indf2	equ	0xFDF
  4518                           postinc2	equ	0xFDE
  4519                           postdec2	equ	0xFDD
  4520                           fsr2h	equ	0xFDA
  4521                           fsr2l	equ	0xFD9
  4522                           status	equ	0xFD8
  4523                           
  4524 ;; *************** function _I2C_Master_Init *****************
  4525 ;; Defined at:
  4526 ;;		line 13 in file "I2C.c"
  4527 ;; Parameters:    Size  Location     Type
  4528 ;;  c               4   13[BANK0 ] const unsigned long 
  4529 ;; Auto vars:     Size  Location     Type
  4530 ;;		None
  4531 ;; Return value:  Size  Location     Type
  4532 ;;                  1    wreg      void 
  4533 ;; Registers used:
  4534 ;;		wreg, status,2, status,0, cstack
  4535 ;; Tracked objects:
  4536 ;;		On entry : 0/0
  4537 ;;		On exit  : 0/0
  4538 ;;		Unchanged: 0/0
  4539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4540 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4542 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4543 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4544 ;;Total ram usage:        8 bytes
  4545 ;; Hardware stack levels used:    1
  4546 ;; Hardware stack levels required when called:    8
  4547 ;; This function calls:
  4548 ;;		___lldiv
  4549 ;; This function is called by:
  4550 ;;		_initialize
  4551 ;; This function uses a non-reentrant model
  4552 ;;
  4553                           
  4554                           	psect	text20
  4555  00209A                     __ptext20:
  4556                           	opt stack 0
  4557  00209A                     _I2C_Master_Init:
  4558                           	opt stack 21
  4559                           
  4560                           ;I2C.c: 15: SSPSTAT = 0b00000000;
  4561                           
  4562                           ;incstack = 0
  4563  00209A  0E00               	movlw	0
  4564  00209C  6EC7               	movwf	4039,c	;volatile
  4565                           
  4566                           ;I2C.c: 16: SSPCON1 = 0b00101000;
  4567  00209E  0E28               	movlw	40
  4568  0020A0  6EC6               	movwf	4038,c	;volatile
  4569                           
  4570                           ;I2C.c: 17: SSPCON2 = 0b00000000;
  4571  0020A2  0E00               	movlw	0
  4572  0020A4  6EC5               	movwf	4037,c	;volatile
  4573                           
  4574                           ;I2C.c: 18: SSPADD = (8000000 / (4 * c)) - 1;
  4575  0020A6  0E00               	movlw	0
  4576  0020A8  0100               	movlb	0	; () banked
  4577  0020AA  6FB0               	movwf	___lldiv@dividend& (0+255),b
  4578  0020AC  0E12               	movlw	18
  4579  0020AE  6FB1               	movwf	(___lldiv@dividend+1)& (0+255),b
  4580  0020B0  0E7A               	movlw	122
  4581  0020B2  6FB2               	movwf	(___lldiv@dividend+2)& (0+255),b
  4582  0020B4  0E00               	movlw	0
  4583  0020B6  6FB3               	movwf	(___lldiv@dividend+3)& (0+255),b
  4584  0020B8  C0BD  F0C1         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  4585  0020BC  C0BE  F0C2         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  4586  0020C0  C0BF  F0C3         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  4587  0020C4  C0C0  F0C4         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  4588  0020C8  0E02               	movlw	2
  4589  0020CA                     u2735:
  4590  0020CA  90D8               	bcf	status,0,c
  4591  0020CC  0100               	movlb	0	; () banked
  4592  0020CE  37C1               	rlcf	??_I2C_Master_Init& (0+255),f,b
  4593  0020D0  37C2               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  4594  0020D2  37C3               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  4595  0020D4  37C4               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  4596  0020D6  2EE8               	decfsz	wreg,f,c
  4597  0020D8  D7F8               	goto	u2735
  4598  0020DA  C0C1  F0B4         	movff	??_I2C_Master_Init,___lldiv@divisor
  4599  0020DE  C0C2  F0B5         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  4600  0020E2  C0C3  F0B6         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  4601  0020E6  C0C4  F0B7         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  4602  0020EA  EC6F  F00C         	call	___lldiv	;wreg free
  4603  0020EE  0100               	movlb	0	; () banked
  4604  0020F0  05B0               	decf	?___lldiv& (0+255),w,b
  4605  0020F2  6EC8               	movwf	4040,c	;volatile
  4606                           
  4607                           ; BSR set to: 0
  4608                           ;I2C.c: 19: TRISC3 = 1;
  4609  0020F4  8694               	bsf	3988,3,c	;volatile
  4610                           
  4611                           ; BSR set to: 0
  4612                           ;I2C.c: 20: TRISC4 = 1;
  4613  0020F6  8894               	bsf	3988,4,c	;volatile
  4614                           
  4615                           ; BSR set to: 0
  4616  0020F8  0012               	return		;funcret
  4617  0020FA                     __end_of_I2C_Master_Init:
  4618                           	opt stack 0
  4619                           tblptru	equ	0xFF8
  4620                           tblptrh	equ	0xFF7
  4621                           tblptrl	equ	0xFF6
  4622                           tablat	equ	0xFF5
  4623                           prodh	equ	0xFF4
  4624                           prodl	equ	0xFF3
  4625                           intcon	equ	0xFF2
  4626                           intcon2	equ	0xFF1
  4627                           intcon3	equ	0xFF0
  4628                           postinc0	equ	0xFEE
  4629                           wreg	equ	0xFE8
  4630                           postdec1	equ	0xFE5
  4631                           fsr1l	equ	0xFE1
  4632                           indf2	equ	0xFDF
  4633                           postinc2	equ	0xFDE
  4634                           postdec2	equ	0xFDD
  4635                           fsr2h	equ	0xFDA
  4636                           fsr2l	equ	0xFD9
  4637                           status	equ	0xFD8
  4638                           
  4639 ;; *************** function ___lldiv *****************
  4640 ;; Defined at:
  4641 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  4642 ;; Parameters:    Size  Location     Type
  4643 ;;  dividend        4    0[BANK0 ] unsigned long 
  4644 ;;  divisor         4    4[BANK0 ] unsigned long 
  4645 ;; Auto vars:     Size  Location     Type
  4646 ;;  quotient        4    8[BANK0 ] unsigned long 
  4647 ;;  counter         1   12[BANK0 ] unsigned char 
  4648 ;; Return value:  Size  Location     Type
  4649 ;;                  4    0[BANK0 ] unsigned long 
  4650 ;; Registers used:
  4651 ;;		wreg, status,2, status,0
  4652 ;; Tracked objects:
  4653 ;;		On entry : 0/0
  4654 ;;		On exit  : 0/0
  4655 ;;		Unchanged: 0/0
  4656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4657 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4658 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4660 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4661 ;;Total ram usage:       13 bytes
  4662 ;; Hardware stack levels used:    1
  4663 ;; Hardware stack levels required when called:    7
  4664 ;; This function calls:
  4665 ;;		Nothing
  4666 ;; This function is called by:
  4667 ;;		_I2C_Master_Init
  4668 ;; This function uses a non-reentrant model
  4669 ;;
  4670                           
  4671                           	psect	text21
  4672  0018DE                     __ptext21:
  4673                           	opt stack 0
  4674  0018DE                     ___lldiv:
  4675                           	opt stack 21
  4676                           
  4677                           ; BSR set to: 0
  4678                           ;incstack = 0
  4679  0018DE  0E00               	movlw	0
  4680  0018E0  0100               	movlb	0	; () banked
  4681  0018E2  6FB8               	movwf	___lldiv@quotient& (0+255),b
  4682  0018E4  0E00               	movlw	0
  4683  0018E6  6FB9               	movwf	(___lldiv@quotient+1)& (0+255),b
  4684  0018E8  0E00               	movlw	0
  4685  0018EA  6FBA               	movwf	(___lldiv@quotient+2)& (0+255),b
  4686  0018EC  0E00               	movlw	0
  4687  0018EE  6FBB               	movwf	(___lldiv@quotient+3)& (0+255),b
  4688                           
  4689                           ; BSR set to: 0
  4690  0018F0  0100               	movlb	0	; () banked
  4691  0018F2  51B4               	movf	___lldiv@divisor& (0+255),w,b
  4692  0018F4  0100               	movlb	0	; () banked
  4693  0018F6  11B5               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  4694  0018F8  0100               	movlb	0	; () banked
  4695  0018FA  11B6               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  4696  0018FC  0100               	movlb	0	; () banked
  4697  0018FE  11B7               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  4698  001900  B4D8               	btfsc	status,2,c
  4699  001902  D042               	goto	l921
  4700                           
  4701                           ; BSR set to: 0
  4702  001904  0E01               	movlw	1
  4703  001906  0100               	movlb	0	; () banked
  4704  001908  6FBC               	movwf	___lldiv@counter& (0+255),b
  4705  00190A  D008               	goto	l3551
  4706  00190C                     l3549:
  4707                           
  4708                           ; BSR set to: 0
  4709  00190C  0100               	movlb	0	; () banked
  4710  00190E  90D8               	bcf	status,0,c
  4711  001910  37B4               	rlcf	___lldiv@divisor& (0+255),f,b
  4712  001912  37B5               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  4713  001914  37B6               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  4714  001916  37B7               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  4715  001918  0100               	movlb	0	; () banked
  4716  00191A  2BBC               	incf	___lldiv@counter& (0+255),f,b
  4717  00191C                     l3551:
  4718                           
  4719                           ; BSR set to: 0
  4720  00191C  0100               	movlb	0	; () banked
  4721  00191E  AFB7               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  4722  001920  D7F5               	goto	l3549
  4723  001922                     l3553:
  4724                           
  4725                           ; BSR set to: 0
  4726  001922  0100               	movlb	0	; () banked
  4727  001924  90D8               	bcf	status,0,c
  4728  001926  37B8               	rlcf	___lldiv@quotient& (0+255),f,b
  4729  001928  37B9               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  4730  00192A  37BA               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  4731  00192C  37BB               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  4732                           
  4733                           ; BSR set to: 0
  4734  00192E  0100               	movlb	0	; () banked
  4735  001930  51B4               	movf	___lldiv@divisor& (0+255),w,b
  4736  001932  0100               	movlb	0	; () banked
  4737  001934  5DB0               	subwf	___lldiv@dividend& (0+255),w,b
  4738  001936  0100               	movlb	0	; () banked
  4739  001938  51B5               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4740  00193A  0100               	movlb	0	; () banked
  4741  00193C  59B1               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  4742  00193E  0100               	movlb	0	; () banked
  4743  001940  51B6               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4744  001942  0100               	movlb	0	; () banked
  4745  001944  59B2               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  4746  001946  0100               	movlb	0	; () banked
  4747  001948  51B7               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4748  00194A  0100               	movlb	0	; () banked
  4749  00194C  59B3               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  4750  00194E  A0D8               	btfss	status,0,c
  4751  001950  D012               	goto	l3561
  4752                           
  4753                           ; BSR set to: 0
  4754  001952  0100               	movlb	0	; () banked
  4755  001954  51B4               	movf	___lldiv@divisor& (0+255),w,b
  4756  001956  0100               	movlb	0	; () banked
  4757  001958  5FB0               	subwf	___lldiv@dividend& (0+255),f,b
  4758  00195A  0100               	movlb	0	; () banked
  4759  00195C  51B5               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4760  00195E  0100               	movlb	0	; () banked
  4761  001960  5BB1               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  4762  001962  0100               	movlb	0	; () banked
  4763  001964  51B6               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4764  001966  0100               	movlb	0	; () banked
  4765  001968  5BB2               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  4766  00196A  0100               	movlb	0	; () banked
  4767  00196C  51B7               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4768  00196E  0100               	movlb	0	; () banked
  4769  001970  5BB3               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  4770                           
  4771                           ; BSR set to: 0
  4772  001972  0100               	movlb	0	; () banked
  4773  001974  81B8               	bsf	___lldiv@quotient& (0+255),0,b
  4774  001976                     l3561:
  4775                           
  4776                           ; BSR set to: 0
  4777  001976  0100               	movlb	0	; () banked
  4778  001978  90D8               	bcf	status,0,c
  4779  00197A  33B7               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  4780  00197C  33B6               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  4781  00197E  33B5               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  4782  001980  33B4               	rrcf	___lldiv@divisor& (0+255),f,b
  4783                           
  4784                           ; BSR set to: 0
  4785  001982  0100               	movlb	0	; () banked
  4786  001984  2FBC               	decfsz	___lldiv@counter& (0+255),f,b
  4787  001986  D7CD               	goto	l3553
  4788  001988                     l921:
  4789                           
  4790                           ; BSR set to: 0
  4791  001988  C0B8  F0B0         	movff	___lldiv@quotient,?___lldiv
  4792  00198C  C0B9  F0B1         	movff	___lldiv@quotient+1,?___lldiv+1
  4793  001990  C0BA  F0B2         	movff	___lldiv@quotient+2,?___lldiv+2
  4794  001994  C0BB  F0B3         	movff	___lldiv@quotient+3,?___lldiv+3
  4795                           
  4796                           ; BSR set to: 0
  4797  001998  0012               	return		;funcret
  4798  00199A                     __end_of___lldiv:
  4799                           	opt stack 0
  4800                           tblptru	equ	0xFF8
  4801                           tblptrh	equ	0xFF7
  4802                           tblptrl	equ	0xFF6
  4803                           tablat	equ	0xFF5
  4804                           prodh	equ	0xFF4
  4805                           prodl	equ	0xFF3
  4806                           intcon	equ	0xFF2
  4807                           intcon2	equ	0xFF1
  4808                           intcon3	equ	0xFF0
  4809                           postinc0	equ	0xFEE
  4810                           wreg	equ	0xFE8
  4811                           postdec1	equ	0xFE5
  4812                           fsr1l	equ	0xFE1
  4813                           indf2	equ	0xFDF
  4814                           postinc2	equ	0xFDE
  4815                           postdec2	equ	0xFDD
  4816                           fsr2h	equ	0xFDA
  4817                           fsr2l	equ	0xFD9
  4818                           status	equ	0xFD8
  4819                           
  4820 ;; *************** function _intrpt *****************
  4821 ;; Defined at:
  4822 ;;		line 239 in file "main.c"
  4823 ;; Parameters:    Size  Location     Type
  4824 ;;		None
  4825 ;; Auto vars:     Size  Location     Type
  4826 ;;  port            6  112[COMRAM] int [3]
  4827 ;;  keypress        1  111[COMRAM] unsigned char 
  4828 ;; Return value:  Size  Location     Type
  4829 ;;                  1    wreg      void 
  4830 ;; Registers used:
  4831 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4832 ;; Tracked objects:
  4833 ;;		On entry : 0/0
  4834 ;;		On exit  : 0/0
  4835 ;;		Unchanged: 0/0
  4836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4838 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4839 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4840 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4841 ;;Total ram usage:       23 bytes
  4842 ;; Hardware stack levels used:    1
  4843 ;; Hardware stack levels required when called:    6
  4844 ;; This function calls:
  4845 ;;		_PWMC
  4846 ;;		_PermLog
  4847 ;;		_mainloop
  4848 ;;		_simulate
  4849 ;;		_stopMoving
  4850 ;;		i2_lcdInst
  4851 ;; This function is called by:
  4852 ;;		Interrupt level 2
  4853 ;; This function uses a non-reentrant model
  4854 ;;
  4855                           
  4856                           	psect	intcode
  4857  000008                     __pintcode:
  4858                           	opt stack 0
  4859  000008                     _intrpt:
  4860                           	opt stack 20
  4861                           
  4862                           ; BSR set to: 0
  4863                           ;incstack = 0
  4864  000008  827D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4865  00000A  ED27  F006         	call	int_func,f	;refresh shadow registers
  4866                           tblptru	equ	0xFF8
  4867                           tblptrh	equ	0xFF7
  4868                           tblptrl	equ	0xFF6
  4869                           tablat	equ	0xFF5
  4870                           prodh	equ	0xFF4
  4871                           prodl	equ	0xFF3
  4872                           intcon	equ	0xFF2
  4873                           intcon2	equ	0xFF1
  4874                           intcon3	equ	0xFF0
  4875                           postinc0	equ	0xFEE
  4876                           wreg	equ	0xFE8
  4877                           postdec1	equ	0xFE5
  4878                           fsr1l	equ	0xFE1
  4879                           indf2	equ	0xFDF
  4880                           postinc2	equ	0xFDE
  4881                           postdec2	equ	0xFDD
  4882                           fsr2h	equ	0xFDA
  4883                           fsr2l	equ	0xFD9
  4884                           status	equ	0xFD8
  4885                           
  4886                           	psect	intcode_body
  4887  000C4E                     __pintcode_body:
  4888                           	opt stack 20
  4889  000C4E                     int_func:
  4890                           	opt stack 20
  4891  000C4E  0006               	pop		; remove dummy address from shadow register refresh
  4892  000C50  CFFA F062          	movff	pclath,??_intrpt+2
  4893  000C54  CFFB F063          	movff	pclatu,??_intrpt+3
  4894  000C58  CFE9 F064          	movff	fsr0l,??_intrpt+4
  4895  000C5C  CFEA F065          	movff	fsr0h,??_intrpt+5
  4896  000C60  CFE1 F066          	movff	fsr1l,??_intrpt+6
  4897  000C64  CFE2 F067          	movff	fsr1h,??_intrpt+7
  4898  000C68  CFD9 F068          	movff	fsr2l,??_intrpt+8
  4899  000C6C  CFDA F069          	movff	fsr2h,??_intrpt+9
  4900  000C70  CFF3 F06A          	movff	prodl,??_intrpt+10
  4901  000C74  CFF4 F06B          	movff	prodh,??_intrpt+11
  4902  000C78  CFF6 F06C          	movff	tblptrl,??_intrpt+12
  4903  000C7C  CFF7 F06D          	movff	tblptrh,??_intrpt+13
  4904  000C80  CFF8 F06E          	movff	tblptru,??_intrpt+14
  4905  000C84  CFF5 F06F          	movff	tablat,??_intrpt+15
  4906                           
  4907                           ;main.c: 240: (INTCONbits.GIE = 0);
  4908  000C88  9EF2               	bcf	intcon,7,c	;volatile
  4909                           
  4910                           ;main.c: 241: if (INT1IF) {
  4911  000C8A  A0F0               	btfss	intcon3,0,c	;volatile
  4912  000C8C  D0E5               	goto	i2l154
  4913                           
  4914                           ;main.c: 242: int port[] = {0, 0, 0};
  4915  000C8E  EE20  F080         	lfsr	2,intrpt@F3137
  4916  000C92  EE10  F071         	lfsr	1,intrpt@port
  4917  000C96  0E05               	movlw	5
  4918  000C98                     i2u336_41:
  4919  000C98  CFDB FFE3          	movff	plusw2,plusw1
  4920  000C9C  06E8               	decf	wreg,f,c
  4921  000C9E  E2FC               	bc	i2u336_41
  4922                           
  4923                           ;main.c: 243: unsigned char keypress = (PORTB & 0xF0) >> 4;
  4924  000CA0  3881               	swapf	3969,w,c	;volatile
  4925  000CA2  0B0F               	andlw	15
  4926  000CA4  0B0F               	andlw	15
  4927  000CA6  6E70               	movwf	intrpt@keypress,c
  4928                           
  4929                           ;main.c: 244: INT1IF = 0;
  4930  000CA8  90F0               	bcf	intcon3,0,c	;volatile
  4931  000CAA                     i2l157:
  4932  000CAA  A281               	btfss	3969,1,c	;volatile
  4933  000CAC  D0C9               	goto	i2l4443
  4934  000CAE  D7FD               	goto	i2l157
  4935  000CB0                     i2l4387:
  4936                           
  4937                           ;main.c: 251: port[2] = 1;
  4938  000CB0  0E00               	movlw	0
  4939  000CB2  6E76               	movwf	intrpt@port+5,c
  4940  000CB4  0E01               	movlw	1
  4941  000CB6  6E75               	movwf	intrpt@port+4,c
  4942                           
  4943                           ;main.c: 252: PWMC(3000, 30, port);
  4944  000CB8  0E0B               	movlw	11
  4945  000CBA  6E0A               	movwf	PWMC@widthus+1,c
  4946  000CBC  0EB8               	movlw	184
  4947  000CBE  6E09               	movwf	PWMC@widthus,c
  4948  000CC0  0E00               	movlw	0
  4949  000CC2  6E0C               	movwf	PWMC@cycles+1,c
  4950  000CC4  0E1E               	movlw	30
  4951  000CC6  6E0B               	movwf	PWMC@cycles,c
  4952  000CC8  0E71               	movlw	low intrpt@port
  4953  000CCA  6E0D               	movwf	PWMC@port,c
  4954  000CCC  0E00               	movlw	high intrpt@port
  4955  000CCE  6E0E               	movwf	PWMC@port+1,c
  4956  000CD0  EC10  F00B         	call	_PWMC	;wreg free
  4957                           
  4958                           ;main.c: 253: PWMC(400, 2, port);
  4959  000CD4  0E01               	movlw	1
  4960  000CD6  6E0A               	movwf	PWMC@widthus+1,c
  4961  000CD8  0E90               	movlw	144
  4962  000CDA  6E09               	movwf	PWMC@widthus,c
  4963  000CDC  0E00               	movlw	0
  4964  000CDE  6E0C               	movwf	PWMC@cycles+1,c
  4965  000CE0  0E02               	movlw	2
  4966  000CE2  6E0B               	movwf	PWMC@cycles,c
  4967  000CE4  0E71               	movlw	low intrpt@port
  4968  000CE6  6E0D               	movwf	PWMC@port,c
  4969  000CE8  0E00               	movlw	high intrpt@port
  4970  000CEA  6E0E               	movwf	PWMC@port+1,c
  4971  000CEC  EC10  F00B         	call	_PWMC	;wreg free
  4972                           
  4973                           ;main.c: 254: break;
  4974  000CF0  D0B3               	goto	i2l154
  4975  000CF2                     i2l4393:
  4976                           
  4977                           ;main.c: 257: port[1] = 1;
  4978  000CF2  0E00               	movlw	0
  4979  000CF4  6E74               	movwf	intrpt@port+3,c
  4980  000CF6  0E01               	movlw	1
  4981  000CF8  6E73               	movwf	intrpt@port+2,c
  4982                           
  4983                           ;main.c: 258: PWMC(3000, 30, port);
  4984  000CFA  0E0B               	movlw	11
  4985  000CFC  6E0A               	movwf	PWMC@widthus+1,c
  4986  000CFE  0EB8               	movlw	184
  4987  000D00  6E09               	movwf	PWMC@widthus,c
  4988  000D02  0E00               	movlw	0
  4989  000D04  6E0C               	movwf	PWMC@cycles+1,c
  4990  000D06  0E1E               	movlw	30
  4991  000D08  6E0B               	movwf	PWMC@cycles,c
  4992  000D0A  0E71               	movlw	low intrpt@port
  4993  000D0C  6E0D               	movwf	PWMC@port,c
  4994  000D0E  0E00               	movlw	high intrpt@port
  4995  000D10  6E0E               	movwf	PWMC@port+1,c
  4996  000D12  EC10  F00B         	call	_PWMC	;wreg free
  4997                           
  4998                           ;main.c: 259: PWMC(400, 2, port);
  4999  000D16  0E01               	movlw	1
  5000  000D18  6E0A               	movwf	PWMC@widthus+1,c
  5001  000D1A  0E90               	movlw	144
  5002  000D1C  6E09               	movwf	PWMC@widthus,c
  5003  000D1E  0E00               	movlw	0
  5004  000D20  6E0C               	movwf	PWMC@cycles+1,c
  5005  000D22  0E02               	movlw	2
  5006  000D24  6E0B               	movwf	PWMC@cycles,c
  5007  000D26  0E71               	movlw	low intrpt@port
  5008  000D28  6E0D               	movwf	PWMC@port,c
  5009  000D2A  0E00               	movlw	high intrpt@port
  5010  000D2C  6E0E               	movwf	PWMC@port+1,c
  5011  000D2E  EC10  F00B         	call	_PWMC	;wreg free
  5012                           
  5013                           ;main.c: 260: break;
  5014  000D32  D092               	goto	i2l154
  5015  000D34                     i2l166:
  5016                           
  5017                           ;main.c: 262: LATC6 = ~LATC6;
  5018  000D34  BC8B               	btfsc	3979,6,c	;volatile
  5019  000D36  D002               	goto	i2u338_40
  5020  000D38  8C8B               	bsf	3979,6,c	;volatile
  5021  000D3A  D08E               	goto	i2l154
  5022  000D3C                     i2u338_40:
  5023  000D3C  9C8B               	bcf	3979,6,c	;volatile
  5024                           
  5025                           ;main.c: 263: break;
  5026  000D3E  D08C               	goto	i2l154
  5027  000D40                     i2l167:
  5028                           
  5029                           ;main.c: 265: LATC7 = 0;
  5030  000D40  9E8B               	bcf	3979,7,c	;volatile
  5031                           
  5032                           ;main.c: 266: LATC5 = 1;
  5033  000D42  8A8B               	bsf	3979,5,c	;volatile
  5034                           
  5035                           ;main.c: 267: _delay((unsigned long)((180)*(8000000/4000.0)));
  5036  000D44  0E02               	movlw	2
  5037  000D46  6E61               	movwf	(??_intrpt+1)& (0+255),c
  5038  000D48  0ED4               	movlw	212
  5039  000D4A  6E60               	movwf	??_intrpt& (0+255),c
  5040  000D4C  0E85               	movlw	133
  5041  000D4E                     i2u351_47:
  5042  000D4E  2EE8               	decfsz	wreg,f,c
  5043  000D50  D7FE               	bra	i2u351_47
  5044  000D52  2E60               	decfsz	??_intrpt& (0+255),f,c
  5045  000D54  D7FC               	bra	i2u351_47
  5046  000D56  2E61               	decfsz	(??_intrpt+1)& (0+255),f,c
  5047  000D58  D7FA               	bra	i2u351_47
  5048  000D5A  F000               	nop	
  5049                           
  5050                           ;main.c: 268: LATC5 = 0;
  5051  000D5C  9A8B               	bcf	3979,5,c	;volatile
  5052                           
  5053                           ;main.c: 269: break;
  5054  000D5E  D07C               	goto	i2l154
  5055  000D60                     i2l168:
  5056                           
  5057                           ;main.c: 271: LATC5 = 0;
  5058  000D60  9A8B               	bcf	3979,5,c	;volatile
  5059                           
  5060                           ;main.c: 272: LATC7 = 1;
  5061  000D62  8E8B               	bsf	3979,7,c	;volatile
  5062                           
  5063                           ;main.c: 273: _delay((unsigned long)((100)*(8000000/4000.0)));
  5064  000D64  0E02               	movlw	2
  5065  000D66  6E61               	movwf	(??_intrpt+1)& (0+255),c
  5066  000D68  0E04               	movlw	4
  5067  000D6A  6E60               	movwf	??_intrpt& (0+255),c
  5068  000D6C  0EBA               	movlw	186
  5069  000D6E                     i2u352_47:
  5070  000D6E  2EE8               	decfsz	wreg,f,c
  5071  000D70  D7FE               	bra	i2u352_47
  5072  000D72  2E60               	decfsz	??_intrpt& (0+255),f,c
  5073  000D74  D7FC               	bra	i2u352_47
  5074  000D76  2E61               	decfsz	(??_intrpt+1)& (0+255),f,c
  5075  000D78  D7FA               	bra	i2u352_47
  5076  000D7A  D000               	nop2	
  5077                           
  5078                           ;main.c: 274: LATC7 = 0;
  5079  000D7C  9E8B               	bcf	3979,7,c	;volatile
  5080                           
  5081                           ;main.c: 275: break;
  5082  000D7E  D06C               	goto	i2l154
  5083  000D80                     i2l4407:
  5084                           
  5085                           ;main.c: 277: port[0] = 1;
  5086  000D80  0E00               	movlw	0
  5087  000D82  6E72               	movwf	intrpt@port+1,c
  5088  000D84  0E01               	movlw	1
  5089  000D86  6E71               	movwf	intrpt@port,c
  5090                           
  5091                           ;main.c: 278: lcdInst(0b11000000);
  5092  000D88  0EC0               	movlw	192
  5093  000D8A  EC2F  F013         	call	i2_lcdInst
  5094                           
  5095                           ;main.c: 279: PWMC(3000, 30, port);
  5096  000D8E  0E0B               	movlw	11
  5097  000D90  6E0A               	movwf	PWMC@widthus+1,c
  5098  000D92  0EB8               	movlw	184
  5099  000D94  6E09               	movwf	PWMC@widthus,c
  5100  000D96  0E00               	movlw	0
  5101  000D98  6E0C               	movwf	PWMC@cycles+1,c
  5102  000D9A  0E1E               	movlw	30
  5103  000D9C  6E0B               	movwf	PWMC@cycles,c
  5104  000D9E  0E71               	movlw	low intrpt@port
  5105  000DA0  6E0D               	movwf	PWMC@port,c
  5106  000DA2  0E00               	movlw	high intrpt@port
  5107  000DA4  6E0E               	movwf	PWMC@port+1,c
  5108  000DA6  EC10  F00B         	call	_PWMC	;wreg free
  5109                           
  5110                           ;main.c: 280: PWMC(400, 2, port);
  5111  000DAA  0E01               	movlw	1
  5112  000DAC  6E0A               	movwf	PWMC@widthus+1,c
  5113  000DAE  0E90               	movlw	144
  5114  000DB0  6E09               	movwf	PWMC@widthus,c
  5115  000DB2  0E00               	movlw	0
  5116  000DB4  6E0C               	movwf	PWMC@cycles+1,c
  5117  000DB6  0E02               	movlw	2
  5118  000DB8  6E0B               	movwf	PWMC@cycles,c
  5119  000DBA  0E71               	movlw	low intrpt@port
  5120  000DBC  6E0D               	movwf	PWMC@port,c
  5121  000DBE  0E00               	movlw	high intrpt@port
  5122  000DC0  6E0E               	movwf	PWMC@port+1,c
  5123  000DC2  EC10  F00B         	call	_PWMC	;wreg free
  5124                           
  5125                           ;main.c: 281: break;
  5126  000DC6  D048               	goto	i2l154
  5127  000DC8                     i2l4415:
  5128                           
  5129                           ;main.c: 285: mode = 2;
  5130  000DC8  0E00               	movlw	0
  5131  000DCA  6E7C               	movwf	_mode+1,c
  5132  000DCC  0E02               	movlw	2
  5133  000DCE  6E7B               	movwf	_mode,c
  5134                           
  5135                           ;main.c: 286: PermLog();
  5136  000DD0  EC01  F00C         	call	_PermLog	;wreg free
  5137                           
  5138                           ;main.c: 287: mode = 0;
  5139  000DD4  0E00               	movlw	0
  5140  000DD6  6E7C               	movwf	_mode+1,c
  5141  000DD8  0E00               	movlw	0
  5142  000DDA  6E7B               	movwf	_mode,c
  5143                           
  5144                           ;main.c: 288: break;
  5145  000DDC  D03D               	goto	i2l154
  5146  000DDE                     i2l4421:
  5147                           
  5148                           ;main.c: 290: mode = 1;
  5149  000DDE  0E00               	movlw	0
  5150  000DE0  6E7C               	movwf	_mode+1,c
  5151  000DE2  0E01               	movlw	1
  5152  000DE4  6E7B               	movwf	_mode,c
  5153                           
  5154                           ;main.c: 291: (INTCONbits.GIE = 1);
  5155  000DE6  8EF2               	bsf	intcon,7,c	;volatile
  5156                           
  5157                           ;main.c: 292: mainloop();
  5158  000DE8  EC85  F008         	call	_mainloop	;wreg free
  5159  000DEC  D007               	goto	i2l4435
  5160  000DEE                     i2l4429:
  5161                           
  5162                           ;main.c: 296: mode = 1;
  5163  000DEE  0E00               	movlw	0
  5164  000DF0  6E7C               	movwf	_mode+1,c
  5165  000DF2  0E01               	movlw	1
  5166  000DF4  6E7B               	movwf	_mode,c
  5167                           
  5168                           ;main.c: 297: (INTCONbits.GIE = 1);
  5169  000DF6  8EF2               	bsf	intcon,7,c	;volatile
  5170                           
  5171                           ;main.c: 298: simulate();
  5172  000DF8  EC3E  F002         	call	_simulate	;wreg free
  5173  000DFC                     i2l4435:
  5174                           
  5175                           ;main.c: 299: (INTCONbits.GIE = 0);
  5176  000DFC  9EF2               	bcf	intcon,7,c	;volatile
  5177                           
  5178                           ;main.c: 301: }
  5179                           
  5180                           ;main.c: 300: break;
  5181  000DFE  D02C               	goto	i2l154
  5182  000E00                     i2l4439:
  5183  000E00  5070               	movf	intrpt@keypress,w,c
  5184                           
  5185                           ; Switch size 1, requested type "space"
  5186                           ; Number of cases is 10, Range of values is 3 to 15
  5187                           ; switch strategies available:
  5188                           ; Name         Instructions Cycles
  5189                           ; simple_byte           31    16 (average)
  5190                           ;	Chosen strategy is simple_byte
  5191  000E02  0A03               	xorlw	3	; case 3
  5192  000E04  B4D8               	btfsc	status,2,c
  5193  000E06  D754               	goto	i2l4387
  5194  000E08  0A04               	xorlw	4	; case 7
  5195  000E0A  B4D8               	btfsc	status,2,c
  5196  000E0C  D772               	goto	i2l4393
  5197  000E0E  0A0F               	xorlw	15	; case 8
  5198  000E10  B4D8               	btfsc	status,2,c
  5199  000E12  D790               	goto	i2l166
  5200  000E14  0A01               	xorlw	1	; case 9
  5201  000E16  B4D8               	btfsc	status,2,c
  5202  000E18  D793               	goto	i2l167
  5203  000E1A  0A03               	xorlw	3	; case 10
  5204  000E1C  B4D8               	btfsc	status,2,c
  5205  000E1E  D7A0               	goto	i2l168
  5206  000E20  0A01               	xorlw	1	; case 11
  5207  000E22  B4D8               	btfsc	status,2,c
  5208  000E24  D7AD               	goto	i2l4407
  5209  000E26  0A07               	xorlw	7	; case 12
  5210  000E28  B4D8               	btfsc	status,2,c
  5211  000E2A  D03D               	goto	i2l171
  5212  000E2C  0A01               	xorlw	1	; case 13
  5213  000E2E  B4D8               	btfsc	status,2,c
  5214  000E30  D7D6               	goto	i2l4421
  5215  000E32  0A03               	xorlw	3	; case 14
  5216  000E34  B4D8               	btfsc	status,2,c
  5217  000E36  D7C8               	goto	i2l4415
  5218  000E38  0A01               	xorlw	1	; case 15
  5219  000E3A  B4D8               	btfsc	status,2,c
  5220  000E3C  D7D8               	goto	i2l4429
  5221                           
  5222                           ;main.c: 305: }
  5223                           
  5224                           ;main.c: 304: break;
  5225                           
  5226                           ;main.c: 303: default:
  5227                           
  5228                           ;main.c: 302: break;
  5229  000E3E  D00C               	goto	i2l154
  5230  000E40                     i2l4443:
  5231  000E40  C07B  F060         	movff	_mode,??_intrpt
  5232  000E44  C07C  F061         	movff	_mode+1,??_intrpt+1
  5233                           
  5234                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5235                           ; Switch size 1, requested type "space"
  5236                           ; Number of cases is 1, Range of values is 0 to 0
  5237                           ; switch strategies available:
  5238                           ; Name         Instructions Cycles
  5239                           ; simple_byte            4     3 (average)
  5240                           ;	Chosen strategy is simple_byte
  5241  000E48  5061               	movf	??_intrpt+1,w,c
  5242  000E4A  0A00               	xorlw	0	; case 0
  5243  000E4C  A4D8               	btfss	status,2,c
  5244  000E4E  D004               	goto	i2l154
  5245                           
  5246                           ; Switch size 1, requested type "space"
  5247                           ; Number of cases is 1, Range of values is 0 to 0
  5248                           ; switch strategies available:
  5249                           ; Name         Instructions Cycles
  5250                           ; simple_byte            4     3 (average)
  5251                           ;	Chosen strategy is simple_byte
  5252  000E50  5060               	movf	??_intrpt,w,c
  5253  000E52  0A00               	xorlw	0	; case 0
  5254  000E54  B4D8               	btfsc	status,2,c
  5255  000E56  D7D4               	goto	i2l4439
  5256  000E58                     i2l154:
  5257                           
  5258                           ;main.c: 306: }
  5259                           ;main.c: 307: if (INT2IF) {
  5260  000E58  A2F0               	btfss	intcon3,1,c	;volatile
  5261  000E5A  D024               	goto	i2l177
  5262                           
  5263                           ;main.c: 308: INT2IF = 0;
  5264  000E5C  92F0               	bcf	intcon3,1,c	;volatile
  5265                           
  5266                           ;main.c: 309: _delay((unsigned long)((100)*(8000000/4000.0)));
  5267  000E5E  0E02               	movlw	2
  5268  000E60  6E61               	movwf	(??_intrpt+1)& (0+255),c
  5269  000E62  0E04               	movlw	4
  5270  000E64  6E60               	movwf	??_intrpt& (0+255),c
  5271  000E66  0EBA               	movlw	186
  5272  000E68                     i2u353_47:
  5273  000E68  2EE8               	decfsz	wreg,f,c
  5274  000E6A  D7FE               	bra	i2u353_47
  5275  000E6C  2E60               	decfsz	??_intrpt& (0+255),f,c
  5276  000E6E  D7FC               	bra	i2u353_47
  5277  000E70  2E61               	decfsz	(??_intrpt+1)& (0+255),f,c
  5278  000E72  D7FA               	bra	i2u353_47
  5279  000E74  D000               	nop2	
  5280                           
  5281                           ;main.c: 310: if (!PORTBbits.RB2) {
  5282  000E76  A481               	btfss	3969,2,c	;volatile
  5283  000E78  D009               	goto	i2l4459
  5284  000E7A  D014               	goto	i2l177
  5285  000E7C                     i2l4453:
  5286                           
  5287                           ;main.c: 313: mode = 3;
  5288  000E7C  0E00               	movlw	0
  5289  000E7E  6E7C               	movwf	_mode+1,c
  5290  000E80  0E03               	movlw	3
  5291  000E82  6E7B               	movwf	_mode,c
  5292                           
  5293                           ;main.c: 314: stopMoving(1);
  5294  000E84  0E01               	movlw	1
  5295  000E86  ECCD  F011         	call	_stopMoving
  5296                           
  5297                           ;main.c: 318: }
  5298                           
  5299                           ;main.c: 317: break;
  5300                           
  5301                           ;main.c: 316: default:
  5302                           
  5303                           ;main.c: 315: break;
  5304  000E8A  D00C               	goto	i2l177
  5305  000E8C                     i2l4459:
  5306  000E8C  C07B  F060         	movff	_mode,??_intrpt
  5307  000E90  C07C  F061         	movff	_mode+1,??_intrpt+1
  5308                           
  5309                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5310                           ; Switch size 1, requested type "space"
  5311                           ; Number of cases is 1, Range of values is 0 to 0
  5312                           ; switch strategies available:
  5313                           ; Name         Instructions Cycles
  5314                           ; simple_byte            4     3 (average)
  5315                           ;	Chosen strategy is simple_byte
  5316  000E94  5061               	movf	??_intrpt+1,w,c
  5317  000E96  0A00               	xorlw	0	; case 0
  5318  000E98  A4D8               	btfss	status,2,c
  5319  000E9A  D004               	goto	i2l177
  5320                           
  5321                           ; Switch size 1, requested type "space"
  5322                           ; Number of cases is 1, Range of values is 1 to 1
  5323                           ; switch strategies available:
  5324                           ; Name         Instructions Cycles
  5325                           ; simple_byte            4     3 (average)
  5326                           ;	Chosen strategy is simple_byte
  5327  000E9C  5060               	movf	??_intrpt,w,c
  5328  000E9E  0A01               	xorlw	1	; case 1
  5329  000EA0  B4D8               	btfsc	status,2,c
  5330  000EA2  D7EC               	goto	i2l4453
  5331  000EA4                     i2l177:
  5332                           
  5333                           ;main.c: 319: }
  5334                           ;main.c: 320: }
  5335                           ;main.c: 321: (INTCONbits.GIE = 1);
  5336  000EA4  8EF2               	bsf	intcon,7,c	;volatile
  5337  000EA6                     i2l171:
  5338  000EA6  C06F  FFF5         	movff	??_intrpt+15,tablat
  5339  000EAA  C06E  FFF8         	movff	??_intrpt+14,tblptru
  5340  000EAE  C06D  FFF7         	movff	??_intrpt+13,tblptrh
  5341  000EB2  C06C  FFF6         	movff	??_intrpt+12,tblptrl
  5342  000EB6  C06B  FFF4         	movff	??_intrpt+11,prodh
  5343  000EBA  C06A  FFF3         	movff	??_intrpt+10,prodl
  5344  000EBE  C069  FFDA         	movff	??_intrpt+9,fsr2h
  5345  000EC2  C068  FFD9         	movff	??_intrpt+8,fsr2l
  5346  000EC6  C067  FFE2         	movff	??_intrpt+7,fsr1h
  5347  000ECA  C066  FFE1         	movff	??_intrpt+6,fsr1l
  5348  000ECE  C065  FFEA         	movff	??_intrpt+5,fsr0h
  5349  000ED2  C064  FFE9         	movff	??_intrpt+4,fsr0l
  5350  000ED6  C063  FFFB         	movff	??_intrpt+3,pclatu
  5351  000EDA  C062  FFFA         	movff	??_intrpt+2,pclath
  5352  000EDE  927D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5353  000EE0  0011               	retfie		f
  5354  000EE2                     __end_of_intrpt:
  5355                           	opt stack 0
  5356                           pclatu	equ	0xFFB
  5357                           pclath	equ	0xFFA
  5358                           tblptru	equ	0xFF8
  5359                           tblptrh	equ	0xFF7
  5360                           tblptrl	equ	0xFF6
  5361                           tablat	equ	0xFF5
  5362                           prodh	equ	0xFF4
  5363                           prodl	equ	0xFF3
  5364                           intcon	equ	0xFF2
  5365                           intcon2	equ	0xFF1
  5366                           intcon3	equ	0xFF0
  5367                           postinc0	equ	0xFEE
  5368                           fsr0h	equ	0xFEA
  5369                           fsr0l	equ	0xFE9
  5370                           wreg	equ	0xFE8
  5371                           postdec1	equ	0xFE5
  5372                           plusw1	equ	0xFE3
  5373                           fsr1h	equ	0xFE2
  5374                           fsr1l	equ	0xFE1
  5375                           indf2	equ	0xFDF
  5376                           postinc2	equ	0xFDE
  5377                           postdec2	equ	0xFDD
  5378                           plusw2	equ	0xFDB
  5379                           fsr2h	equ	0xFDA
  5380                           fsr2l	equ	0xFD9
  5381                           status	equ	0xFD8
  5382                           
  5383 ;; *************** function _simulate *****************
  5384 ;; Defined at:
  5385 ;;		line 91 in file "main.c"
  5386 ;; Parameters:    Size  Location     Type
  5387 ;;		None
  5388 ;; Auto vars:     Size  Location     Type
  5389 ;;  portCCW         6   67[COMRAM] int [3]
  5390 ;;  portCW          6   61[COMRAM] int [3]
  5391 ;;  portShake       6   55[COMRAM] int [3]
  5392 ;;  sorted          4   91[COMRAM] unsigned char [4]
  5393 ;;  start           4   77[COMRAM] unsigned int [2]
  5394 ;;  now             4   73[COMRAM] unsigned int [2]
  5395 ;;  AA              2   89[COMRAM] int 
  5396 ;;  period          2   87[COMRAM] unsigned int 
  5397 ;;  V9              2   85[COMRAM] int 
  5398 ;;  C               2   83[COMRAM] int 
  5399 ;;  shakeCW         1   82[COMRAM] unsigned char 
  5400 ;;  notyet          1   81[COMRAM] unsigned char 
  5401 ;; Return value:  Size  Location     Type
  5402 ;;                  1    wreg      void 
  5403 ;; Registers used:
  5404 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5405 ;; Tracked objects:
  5406 ;;		On entry : 0/0
  5407 ;;		On exit  : 0/0
  5408 ;;		Unchanged: 0/0
  5409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5411 ;;      Locals:        42       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5412 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5413 ;;      Totals:        44       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5414 ;;Total ram usage:       44 bytes
  5415 ;; Hardware stack levels used:    1
  5416 ;; Hardware stack levels required when called:    5
  5417 ;; This function calls:
  5418 ;;		_CCW90
  5419 ;;		_CW90
  5420 ;;		_HexDecToDec2
  5421 ;;		_PWMC
  5422 ;;		_WriteRun
  5423 ;;		_check9
  5424 ;;		_checkAA
  5425 ;;		_checkC
  5426 ;;		_closeGate
  5427 ;;		_openGate
  5428 ;;		_showInfo
  5429 ;;		_stopMoving
  5430 ;;		i2___wmul
  5431 ;;		i2_getTime
  5432 ;;		i2_lcdInst
  5433 ;;		i2_printf
  5434 ;; This function is called by:
  5435 ;;		_intrpt
  5436 ;; This function uses a non-reentrant model
  5437 ;;
  5438                           
  5439                           	psect	text23
  5440  00047C                     __ptext23:
  5441                           	opt stack 0
  5442  00047C                     _simulate:
  5443                           	opt stack 20
  5444                           
  5445                           ;main.c: 92: unsigned int now[] = {0, 0}, start[] = {0, 0};
  5446                           
  5447                           ;incstack = 0
  5448  00047C  C077  F04A         	movff	simulate@F3110,simulate@now
  5449  000480  C078  F04B         	movff	simulate@F3110+1,simulate@now+1
  5450  000484  C079  F04C         	movff	simulate@F3110+2,simulate@now+2
  5451  000488  C07A  F04D         	movff	simulate@F3110+3,simulate@now+3
  5452  00048C  C0A4  F04E         	movff	simulate@F3112,simulate@start
  5453  000490  C0A5  F04F         	movff	simulate@F3112+1,simulate@start+1
  5454  000494  C0A6  F050         	movff	simulate@F3112+2,simulate@start+2
  5455  000498  C0A7  F051         	movff	simulate@F3112+3,simulate@start+3
  5456                           
  5457                           ;main.c: 93: unsigned char sorted[] = {0, 0, 0, 0};
  5458  00049C  C0A0  F05C         	movff	simulate@F3114,simulate@sorted
  5459  0004A0  C0A1  F05D         	movff	simulate@F3114+1,simulate@sorted+1
  5460  0004A4  C0A2  F05E         	movff	simulate@F3114+2,simulate@sorted+2
  5461  0004A8  C0A3  F05F         	movff	simulate@F3114+3,simulate@sorted+3
  5462                           
  5463                           ;main.c: 94: unsigned int period = 0;
  5464  0004AC  0E00               	movlw	0
  5465  0004AE  6E59               	movwf	simulate@period+1,c
  5466  0004B0  0E00               	movlw	0
  5467  0004B2  6E58               	movwf	simulate@period,c
  5468                           
  5469                           ;main.c: 95: unsigned char shakeCW = 0;
  5470  0004B4  0E00               	movlw	0
  5471  0004B6  6E53               	movwf	simulate@shakeCW,c
  5472                           
  5473                           ;main.c: 96: int AA, C, V9;
  5474                           ;main.c: 98: lcdInst(0b10000000);
  5475  0004B8  0E80               	movlw	128
  5476  0004BA  EC2F  F013         	call	i2_lcdInst
  5477                           
  5478                           ;main.c: 99: printf("Sorting...          ");
  5479  0004BE  0E2B               	movlw	low STR_3
  5480  0004C0  6E0D               	movwf	i2printf@f,c
  5481  0004C2  0EFF               	movlw	high STR_3
  5482  0004C4  6E0E               	movwf	i2printf@f+1,c
  5483  0004C6  EC5A  F004         	call	i2_printf	;wreg free
  5484                           
  5485                           ;main.c: 100: start[0] = time[0];
  5486  0004CA  C0A9  F04E         	movff	_time,simulate@start
  5487  0004CE  6A4F               	clrf	simulate@start+1,c
  5488                           
  5489                           ;main.c: 101: start[1] = time[1];
  5490  0004D0  C0AA  F050         	movff	_time+1,simulate@start+2
  5491  0004D4  6A51               	clrf	simulate@start+3,c
  5492                           
  5493                           ;main.c: 103: LATC6 = 1;
  5494  0004D6  8C8B               	bsf	3979,6,c	;volatile
  5495                           
  5496                           ;main.c: 104: INT2IE = 1;
  5497  0004D8  88F0               	bsf	intcon3,4,c	;volatile
  5498                           
  5499                           ;main.c: 105: INT2IF = 0;
  5500  0004DA  92F0               	bcf	intcon3,1,c	;volatile
  5501                           
  5502                           ;main.c: 106: _delay((unsigned long)((20000)*(8000000/4000.0)));
  5503  0004DC  0ECB               	movlw	203
  5504  0004DE  6E35               	movwf	(??_simulate+1)& (0+255),c
  5505  0004E0  0EEC               	movlw	236
  5506  0004E2  6E34               	movwf	??_simulate& (0+255),c
  5507  0004E4  0E84               	movlw	132
  5508  0004E6                     i2u354_47:
  5509  0004E6  2EE8               	decfsz	wreg,f,c
  5510  0004E8  D7FE               	bra	i2u354_47
  5511  0004EA  2E34               	decfsz	??_simulate& (0+255),f,c
  5512  0004EC  D7FC               	bra	i2u354_47
  5513  0004EE  2E35               	decfsz	(??_simulate+1)& (0+255),f,c
  5514  0004F0  D7FA               	bra	i2u354_47
  5515  0004F2  D000               	nop2	
  5516                           
  5517                           ;main.c: 107: openGate();
  5518  0004F4  ECA3  F012         	call	_openGate	;wreg free
  5519                           
  5520                           ;main.c: 108: char notyet = 0;
  5521  0004F8  0E00               	movlw	0
  5522  0004FA  6E52               	movwf	simulate@notyet,c
  5523                           
  5524                           ;main.c: 109: while (mode == 1) {
  5525  0004FC  D1A3               	goto	i2l4317
  5526  0004FE                     i2l4199:
  5527                           
  5528                           ;main.c: 112: lcdInst(0b10000000);
  5529  0004FE  0E80               	movlw	128
  5530  000500  EC2F  F013         	call	i2_lcdInst
  5531                           
  5532                           ;main.c: 113: V9 = check9(sorted);
  5533  000504  0E5C               	movlw	low simulate@sorted
  5534  000506  6E2E               	movwf	check9@sorted,c
  5535  000508  0E00               	movlw	high simulate@sorted
  5536  00050A  6E2F               	movwf	check9@sorted+1,c
  5537  00050C  EC74  F00F         	call	_check9	;wreg free
  5538  000510  C02E  F056         	movff	?_check9,simulate@V9
  5539  000514  C02F  F057         	movff	?_check9+1,simulate@V9+1
  5540                           
  5541                           ;main.c: 114: C = checkC(sorted);
  5542  000518  0E5C               	movlw	low simulate@sorted
  5543  00051A  6E2E               	movwf	checkC@sorted,c
  5544  00051C  0E00               	movlw	high simulate@sorted
  5545  00051E  6E2F               	movwf	checkC@sorted+1,c
  5546  000520  EC39  F00F         	call	_checkC	;wreg free
  5547  000524  C02E  F054         	movff	?_checkC,simulate@C
  5548  000528  C02F  F055         	movff	?_checkC+1,simulate@C+1
  5549                           
  5550                           ;main.c: 115: AA = checkAA(sorted);
  5551  00052C  0E5C               	movlw	low simulate@sorted
  5552  00052E  6E2E               	movwf	checkAA@sorted,c
  5553  000530  0E00               	movlw	high simulate@sorted
  5554  000532  6E2F               	movwf	checkAA@sorted+1,c
  5555  000534  ECAF  F00F         	call	_checkAA	;wreg free
  5556  000538  C02E  F05A         	movff	?_checkAA,simulate@AA
  5557  00053C  C02F  F05B         	movff	?_checkAA+1,simulate@AA+1
  5558                           
  5559                           ;main.c: 116: printf("    ");
  5560  000540  0EDB               	movlw	low (STR_29+11)
  5561  000542  6E0D               	movwf	i2printf@f,c
  5562  000544  0EFF               	movlw	high (STR_29+11)
  5563  000546  6E0E               	movwf	i2printf@f+1,c
  5564  000548  EC5A  F004         	call	i2_printf	;wreg free
  5565                           
  5566                           ;main.c: 117: if (V9 != -1 || C != -1 || AA != -1) {
  5567  00054C  2856               	incf	simulate@V9,w,c
  5568  00054E  E10D               	bnz	i2l4215
  5569  000550  2857               	incf	simulate@V9+1,w,c
  5570  000552  A4D8               	btfss	status,2,c
  5571  000554  D00A               	goto	i2l4215
  5572  000556  2854               	incf	simulate@C,w,c
  5573  000558  E108               	bnz	i2l4215
  5574  00055A  2855               	incf	simulate@C+1,w,c
  5575  00055C  A4D8               	btfss	status,2,c
  5576  00055E  D005               	goto	i2l4215
  5577  000560  285A               	incf	simulate@AA,w,c
  5578  000562  E103               	bnz	i2l4215
  5579  000564  285B               	incf	simulate@AA+1,w,c
  5580  000566  B4D8               	btfsc	status,2,c
  5581  000568  D002               	goto	i2l4217
  5582  00056A                     i2l4215:
  5583                           
  5584                           ;main.c: 118: notyet = 0;
  5585  00056A  0E00               	movlw	0
  5586  00056C  6E52               	movwf	simulate@notyet,c
  5587  00056E                     i2l4217:
  5588                           
  5589                           ;main.c: 119: }
  5590                           ;main.c: 120: int portCW[] = {0, 0, 0};
  5591  00056E  EE20  F092         	lfsr	2,simulate@F3123
  5592  000572  EE10  F03E         	lfsr	1,simulate@portCW
  5593  000576  0E05               	movlw	5
  5594  000578                     i2u318_41:
  5595  000578  CFDB FFE3          	movff	plusw2,plusw1
  5596  00057C  06E8               	decf	wreg,f,c
  5597  00057E  E2FC               	bc	i2u318_41
  5598                           
  5599                           ;main.c: 121: int portCCW[] = {0, 0, 0};
  5600  000580  EE20  F08C         	lfsr	2,simulate@F3125
  5601  000584  EE10  F044         	lfsr	1,simulate@portCCW
  5602  000588  0E05               	movlw	5
  5603  00058A                     i2u319_41:
  5604  00058A  CFDB FFE3          	movff	plusw2,plusw1
  5605  00058E  06E8               	decf	wreg,f,c
  5606  000590  E2FC               	bc	i2u319_41
  5607                           
  5608                           ;main.c: 124: lcdInst(0b11000000);
  5609  000592  0EC0               	movlw	192
  5610  000594  EC2F  F013         	call	i2_lcdInst
  5611                           
  5612                           ;main.c: 125: printf("9V:");
  5613  000598  0EF2               	movlw	low STR_5
  5614  00059A  6E0D               	movwf	i2printf@f,c
  5615  00059C  0EFF               	movlw	high STR_5
  5616  00059E  6E0E               	movwf	i2printf@f+1,c
  5617  0005A0  EC5A  F004         	call	i2_printf	;wreg free
  5618                           
  5619                           ;main.c: 126: if (!V9) {
  5620  0005A4  5056               	movf	simulate@V9,w,c
  5621  0005A6  1057               	iorwf	simulate@V9+1,w,c
  5622  0005A8  A4D8               	btfss	status,2,c
  5623  0005AA  D00B               	goto	i2l4233
  5624                           
  5625                           ;main.c: 127: portCW[0] = 1;
  5626  0005AC  0E00               	movlw	0
  5627  0005AE  6E3F               	movwf	simulate@portCW+1,c
  5628  0005B0  0E01               	movlw	1
  5629  0005B2  6E3E               	movwf	simulate@portCW,c
  5630                           
  5631                           ;main.c: 128: printf(" +");
  5632  0005B4  0EF6               	movlw	low STR_6
  5633  0005B6  6E0D               	movwf	i2printf@f,c
  5634  0005B8  0EFF               	movlw	high STR_6
  5635  0005BA  6E0E               	movwf	i2printf@f+1,c
  5636  0005BC  EC5A  F004         	call	i2_printf	;wreg free
  5637  0005C0  D00E               	goto	i2l4239
  5638  0005C2                     i2l4233:
  5639  0005C2  0456               	decf	simulate@V9,w,c
  5640  0005C4  1057               	iorwf	simulate@V9+1,w,c
  5641  0005C6  A4D8               	btfss	status,2,c
  5642  0005C8  D00D               	goto	i2l4241
  5643                           
  5644                           ;main.c: 133: portCCW[0] = 1;
  5645  0005CA  0E00               	movlw	0
  5646  0005CC  6E45               	movwf	simulate@portCCW+1,c
  5647  0005CE  0E01               	movlw	1
  5648  0005D0  6E44               	movwf	simulate@portCCW,c
  5649                           
  5650                           ;main.c: 134: printf(" -");
  5651  0005D2  0EF9               	movlw	low STR_7
  5652  0005D4  6E0D               	movwf	i2printf@f,c
  5653  0005D6  0EFF               	movlw	high STR_7
  5654  0005D8  6E0E               	movwf	i2printf@f+1,c
  5655  0005DA  EC5A  F004         	call	i2_printf	;wreg free
  5656  0005DE                     i2l4239:
  5657                           
  5658                           ;main.c: 135: AA = -1;
  5659  0005DE  685A               	setf	simulate@AA,c
  5660  0005E0  685B               	setf	simulate@AA+1,c
  5661                           
  5662                           ;main.c: 138: } else {
  5663  0005E2  D006               	goto	i2l129
  5664  0005E4                     i2l4241:
  5665                           
  5666                           ;main.c: 139: printf(" 0");
  5667  0005E4  0EFC               	movlw	low STR_8
  5668  0005E6  6E0D               	movwf	i2printf@f,c
  5669  0005E8  0EFF               	movlw	high STR_8
  5670  0005EA  6E0E               	movwf	i2printf@f+1,c
  5671  0005EC  EC5A  F004         	call	i2_printf	;wreg free
  5672  0005F0                     i2l129:
  5673                           
  5674                           ;main.c: 140: }
  5675                           ;main.c: 142: printf(" C:");
  5676  0005F0  0EEE               	movlw	low STR_9
  5677  0005F2  6E0D               	movwf	i2printf@f,c
  5678  0005F4  0EFF               	movlw	high STR_9
  5679  0005F6  6E0E               	movwf	i2printf@f+1,c
  5680  0005F8  EC5A  F004         	call	i2_printf	;wreg free
  5681                           
  5682                           ;main.c: 144: if (!C) {
  5683  0005FC  5054               	movf	simulate@C,w,c
  5684  0005FE  1055               	iorwf	simulate@C+1,w,c
  5685  000600  A4D8               	btfss	status,2,c
  5686  000602  D00B               	goto	i2l4249
  5687                           
  5688                           ;main.c: 145: portCW[1] = 1;
  5689  000604  0E00               	movlw	0
  5690  000606  6E41               	movwf	simulate@portCW+3,c
  5691  000608  0E01               	movlw	1
  5692  00060A  6E40               	movwf	simulate@portCW+2,c
  5693                           
  5694                           ;main.c: 146: printf(" +");
  5695  00060C  0EF6               	movlw	low STR_6
  5696  00060E  6E0D               	movwf	i2printf@f,c
  5697  000610  0EFF               	movlw	high STR_6
  5698  000612  6E0E               	movwf	i2printf@f+1,c
  5699  000614  EC5A  F004         	call	i2_printf	;wreg free
  5700                           
  5701                           ;main.c: 150: } else if (C == 1) {
  5702  000618  D015               	goto	i2l133
  5703  00061A                     i2l4249:
  5704  00061A  0454               	decf	simulate@C,w,c
  5705  00061C  1055               	iorwf	simulate@C+1,w,c
  5706  00061E  A4D8               	btfss	status,2,c
  5707  000620  D00B               	goto	i2l4255
  5708                           
  5709                           ;main.c: 151: portCCW[1] = 1;
  5710  000622  0E00               	movlw	0
  5711  000624  6E47               	movwf	simulate@portCCW+3,c
  5712  000626  0E01               	movlw	1
  5713  000628  6E46               	movwf	simulate@portCCW+2,c
  5714                           
  5715                           ;main.c: 152: printf(" -");
  5716  00062A  0EF9               	movlw	low STR_7
  5717  00062C  6E0D               	movwf	i2printf@f,c
  5718  00062E  0EFF               	movlw	high STR_7
  5719  000630  6E0E               	movwf	i2printf@f+1,c
  5720  000632  EC5A  F004         	call	i2_printf	;wreg free
  5721                           
  5722                           ;main.c: 156: } else {
  5723  000636  D006               	goto	i2l133
  5724  000638                     i2l4255:
  5725                           
  5726                           ;main.c: 157: printf(" 0");
  5727  000638  0EFC               	movlw	low STR_8
  5728  00063A  6E0D               	movwf	i2printf@f,c
  5729  00063C  0EFF               	movlw	high STR_8
  5730  00063E  6E0E               	movwf	i2printf@f+1,c
  5731  000640  EC5A  F004         	call	i2_printf	;wreg free
  5732  000644                     i2l133:
  5733                           
  5734                           ;main.c: 158: }
  5735                           ;main.c: 160: printf(" AA:");
  5736  000644  0EE5               	movlw	low STR_13
  5737  000646  6E0D               	movwf	i2printf@f,c
  5738  000648  0EFF               	movlw	high STR_13
  5739  00064A  6E0E               	movwf	i2printf@f+1,c
  5740  00064C  EC5A  F004         	call	i2_printf	;wreg free
  5741                           
  5742                           ;main.c: 162: if (!AA) {
  5743  000650  505A               	movf	simulate@AA,w,c
  5744  000652  105B               	iorwf	simulate@AA+1,w,c
  5745  000654  A4D8               	btfss	status,2,c
  5746  000656  D00B               	goto	i2l4263
  5747                           
  5748                           ;main.c: 163: portCCW[2] = 1;
  5749  000658  0E00               	movlw	0
  5750  00065A  6E49               	movwf	simulate@portCCW+5,c
  5751  00065C  0E01               	movlw	1
  5752  00065E  6E48               	movwf	simulate@portCCW+4,c
  5753                           
  5754                           ;main.c: 164: printf(" -");
  5755  000660  0EF9               	movlw	low STR_7
  5756  000662  6E0D               	movwf	i2printf@f,c
  5757  000664  0EFF               	movlw	high STR_7
  5758  000666  6E0E               	movwf	i2printf@f+1,c
  5759  000668  EC5A  F004         	call	i2_printf	;wreg free
  5760                           
  5761                           ;main.c: 168: } else if (AA == 1) {
  5762  00066C  D015               	goto	i2l4271
  5763  00066E                     i2l4263:
  5764  00066E  045A               	decf	simulate@AA,w,c
  5765  000670  105B               	iorwf	simulate@AA+1,w,c
  5766  000672  A4D8               	btfss	status,2,c
  5767  000674  D00B               	goto	i2l4269
  5768                           
  5769                           ;main.c: 169: portCW[2] = 1;
  5770  000676  0E00               	movlw	0
  5771  000678  6E43               	movwf	simulate@portCW+5,c
  5772  00067A  0E01               	movlw	1
  5773  00067C  6E42               	movwf	simulate@portCW+4,c
  5774                           
  5775                           ;main.c: 170: printf(" +");
  5776  00067E  0EF6               	movlw	low STR_6
  5777  000680  6E0D               	movwf	i2printf@f,c
  5778  000682  0EFF               	movlw	high STR_6
  5779  000684  6E0E               	movwf	i2printf@f+1,c
  5780  000686  EC5A  F004         	call	i2_printf	;wreg free
  5781                           
  5782                           ;main.c: 174: } else {
  5783  00068A  D006               	goto	i2l4271
  5784  00068C                     i2l4269:
  5785                           
  5786                           ;main.c: 175: printf(" 0");
  5787  00068C  0EFC               	movlw	low STR_8
  5788  00068E  6E0D               	movwf	i2printf@f,c
  5789  000690  0EFF               	movlw	high STR_8
  5790  000692  6E0E               	movwf	i2printf@f+1,c
  5791  000694  EC5A  F004         	call	i2_printf	;wreg free
  5792  000698                     i2l4271:
  5793                           
  5794                           ;main.c: 176: }
  5795                           ;main.c: 180: CCW90(portCCW);
  5796  000698  0E44               	movlw	low simulate@portCCW
  5797  00069A  6E16               	movwf	CCW90@port,c
  5798  00069C  0E00               	movlw	high simulate@portCCW
  5799  00069E  6E17               	movwf	CCW90@port+1,c
  5800  0006A0  EC3B  F00E         	call	_CCW90	;wreg free
  5801                           
  5802                           ;main.c: 181: CW90(portCW);
  5803  0006A4  0E3E               	movlw	low simulate@portCW
  5804  0006A6  6E16               	movwf	CW90@port,c
  5805  0006A8  0E00               	movlw	high simulate@portCW
  5806  0006AA  6E17               	movwf	CW90@port+1,c
  5807  0006AC  ECF6  F00D         	call	_CW90	;wreg free
  5808                           
  5809                           ;main.c: 182: LATC6 = 0;
  5810  0006B0  9C8B               	bcf	3979,6,c	;volatile
  5811                           
  5812                           ;main.c: 183: int portShake[]={0,0,0};
  5813  0006B2  EE20  F086         	lfsr	2,simulate@F3127
  5814  0006B6  EE10  F038         	lfsr	1,simulate@portShake
  5815  0006BA  0E05               	movlw	5
  5816  0006BC                     i2u326_41:
  5817  0006BC  CFDB FFE3          	movff	plusw2,plusw1
  5818  0006C0  06E8               	decf	wreg,f,c
  5819  0006C2  E2FC               	bc	i2u326_41
  5820                           
  5821                           ;main.c: 187: if (shakeCW) {
  5822  0006C4  5053               	movf	simulate@shakeCW,w,c
  5823  0006C6  B4D8               	btfsc	status,2,c
  5824  0006C8  D028               	goto	i2l4285
  5825                           
  5826                           ;main.c: 188: PWMC(450, 160, portShake);
  5827  0006CA  0E01               	movlw	1
  5828  0006CC  6E0A               	movwf	PWMC@widthus+1,c
  5829  0006CE  0EC2               	movlw	194
  5830  0006D0  6E09               	movwf	PWMC@widthus,c
  5831  0006D2  0E00               	movlw	0
  5832  0006D4  6E0C               	movwf	PWMC@cycles+1,c
  5833  0006D6  0EA0               	movlw	160
  5834  0006D8  6E0B               	movwf	PWMC@cycles,c
  5835  0006DA  0E38               	movlw	low simulate@portShake
  5836  0006DC  6E0D               	movwf	PWMC@port,c
  5837  0006DE  0E00               	movlw	high simulate@portShake
  5838  0006E0  6E0E               	movwf	PWMC@port+1,c
  5839  0006E2  EC10  F00B         	call	_PWMC	;wreg free
  5840                           
  5841                           ;main.c: 189: PWMC(5000, 2, portShake);
  5842  0006E6  0E13               	movlw	19
  5843  0006E8  6E0A               	movwf	PWMC@widthus+1,c
  5844  0006EA  0E88               	movlw	136
  5845  0006EC  6E09               	movwf	PWMC@widthus,c
  5846  0006EE  0E00               	movlw	0
  5847  0006F0  6E0C               	movwf	PWMC@cycles+1,c
  5848  0006F2  0E02               	movlw	2
  5849  0006F4  6E0B               	movwf	PWMC@cycles,c
  5850  0006F6  0E38               	movlw	low simulate@portShake
  5851  0006F8  6E0D               	movwf	PWMC@port,c
  5852  0006FA  0E00               	movlw	high simulate@portShake
  5853  0006FC  6E0E               	movwf	PWMC@port+1,c
  5854  0006FE  EC10  F00B         	call	_PWMC	;wreg free
  5855                           
  5856                           ;main.c: 190: _delay((unsigned long)((100)*(8000000/4000.0)));
  5857  000702  0E02               	movlw	2
  5858  000704  6E35               	movwf	(??_simulate+1)& (0+255),c
  5859  000706  0E04               	movlw	4
  5860  000708  6E34               	movwf	??_simulate& (0+255),c
  5861  00070A  0EBA               	movlw	186
  5862  00070C                     i2u355_47:
  5863  00070C  2EE8               	decfsz	wreg,f,c
  5864  00070E  D7FE               	bra	i2u355_47
  5865  000710  2E34               	decfsz	??_simulate& (0+255),f,c
  5866  000712  D7FC               	bra	i2u355_47
  5867  000714  2E35               	decfsz	(??_simulate+1)& (0+255),f,c
  5868  000716  D7FA               	bra	i2u355_47
  5869  000718  D027               	goto	L1
  5870  00071A                     i2l4285:
  5871                           
  5872                           ;main.c: 192: PWMC(5000, 20, portShake);
  5873  00071A  0E13               	movlw	19
  5874  00071C  6E0A               	movwf	PWMC@widthus+1,c
  5875  00071E  0E88               	movlw	136
  5876  000720  6E09               	movwf	PWMC@widthus,c
  5877  000722  0E00               	movlw	0
  5878  000724  6E0C               	movwf	PWMC@cycles+1,c
  5879  000726  0E14               	movlw	20
  5880  000728  6E0B               	movwf	PWMC@cycles,c
  5881  00072A  0E38               	movlw	low simulate@portShake
  5882  00072C  6E0D               	movwf	PWMC@port,c
  5883  00072E  0E00               	movlw	high simulate@portShake
  5884  000730  6E0E               	movwf	PWMC@port+1,c
  5885  000732  EC10  F00B         	call	_PWMC	;wreg free
  5886                           
  5887                           ;main.c: 193: PWMC(450, 2, portShake);
  5888  000736  0E01               	movlw	1
  5889  000738  6E0A               	movwf	PWMC@widthus+1,c
  5890  00073A  0EC2               	movlw	194
  5891  00073C  6E09               	movwf	PWMC@widthus,c
  5892  00073E  0E00               	movlw	0
  5893  000740  6E0C               	movwf	PWMC@cycles+1,c
  5894  000742  0E02               	movlw	2
  5895  000744  6E0B               	movwf	PWMC@cycles,c
  5896  000746  0E38               	movlw	low simulate@portShake
  5897  000748  6E0D               	movwf	PWMC@port,c
  5898  00074A  0E00               	movlw	high simulate@portShake
  5899  00074C  6E0E               	movwf	PWMC@port+1,c
  5900  00074E  EC10  F00B         	call	_PWMC	;wreg free
  5901                           
  5902                           ;main.c: 194: _delay((unsigned long)((100)*(8000000/4000.0)));
  5903  000752  0E02               	movlw	2
  5904  000754  6E35               	movwf	(??_simulate+1)& (0+255),c
  5905  000756  0E04               	movlw	4
  5906  000758  6E34               	movwf	??_simulate& (0+255),c
  5907  00075A  0EBA               	movlw	186
  5908  00075C                     i2u356_47:
  5909  00075C  2EE8               	decfsz	wreg,f,c
  5910  00075E  D7FE               	bra	i2u356_47
  5911  000760  2E34               	decfsz	??_simulate& (0+255),f,c
  5912  000762  D7FC               	bra	i2u356_47
  5913  000764  2E35               	decfsz	(??_simulate+1)& (0+255),f,c
  5914  000766  D7FA               	bra	i2u356_47
  5915  000768                     L1:
  5916  000768  D000               	nop2	
  5917                           
  5918                           ;main.c: 195: }
  5919                           ;main.c: 196: shakeCW = ~shakeCW;
  5920  00076A  1E53               	comf	simulate@shakeCW,f,c
  5921                           
  5922                           ;main.c: 197: LATC6 = 1;
  5923  00076C  8C8B               	bsf	3979,6,c	;volatile
  5924                           
  5925                           ;main.c: 199: if (sorted[0] & sorted[1] & sorted[2] & sorted[3]) {
  5926  00076E  505D               	movf	simulate@sorted+1,w,c
  5927  000770  145E               	andwf	simulate@sorted+2,w,c
  5928  000772  145F               	andwf	simulate@sorted+3,w,c
  5929  000774  145C               	andwf	simulate@sorted,w,c
  5930  000776  0900               	iorlw	0
  5931  000778  B4D8               	btfsc	status,2,c
  5932  00077A  D004               	goto	i2l4297
  5933                           
  5934                           ;main.c: 200: mode = 2;
  5935  00077C  0E00               	movlw	0
  5936  00077E  6E7C               	movwf	_mode+1,c
  5937  000780  0E02               	movlw	2
  5938  000782  6E7B               	movwf	_mode,c
  5939  000784                     i2l4297:
  5940                           
  5941                           ;main.c: 201: }
  5942                           ;main.c: 202: getTime(time);
  5943  000784  0EA9               	movlw	low _time
  5944  000786  6E04               	movwf	i2getTime@time,c
  5945  000788  0E00               	movlw	high _time
  5946  00078A  6E05               	movwf	i2getTime@time+1,c
  5947  00078C  ECFE  F00E         	call	i2_getTime	;wreg free
  5948                           
  5949                           ;main.c: 203: now[0] = time[0];
  5950  000790  C0A9  F04A         	movff	_time,simulate@now
  5951  000794  6A4B               	clrf	simulate@now+1,c
  5952                           
  5953                           ;main.c: 204: now[1] = time[1];
  5954  000796  C0AA  F04C         	movff	_time+1,simulate@now+2
  5955  00079A  6A4D               	clrf	simulate@now+3,c
  5956                           
  5957                           ;main.c: 207: period = (HexDecToDec2(now[1]) - HexDecToDec2(start[1]))*60 + HexDecToDec2
      +                          (now[0]) - HexDecToDec2(start[0]);
  5958  00079C  C04C  F007         	movff	simulate@now+2,HexDecToDec2@hex
  5959  0007A0  C04D  F008         	movff	simulate@now+3,HexDecToDec2@hex+1
  5960  0007A4  EC26  F011         	call	_HexDecToDec2	;wreg free
  5961  0007A8  C007  F034         	movff	?_HexDecToDec2,??_simulate
  5962  0007AC  C008  F035         	movff	?_HexDecToDec2+1,??_simulate+1
  5963  0007B0  C050  F007         	movff	simulate@start+2,HexDecToDec2@hex
  5964  0007B4  C051  F008         	movff	simulate@start+3,HexDecToDec2@hex+1
  5965  0007B8  EC26  F011         	call	_HexDecToDec2	;wreg free
  5966  0007BC  1E07               	comf	?_HexDecToDec2,f,c
  5967  0007BE  1E08               	comf	?_HexDecToDec2+1,f,c
  5968  0007C0  4A07               	infsnz	?_HexDecToDec2,f,c
  5969  0007C2  2A08               	incf	?_HexDecToDec2+1,f,c
  5970  0007C4  5007               	movf	?_HexDecToDec2,w,c
  5971  0007C6  2434               	addwf	??_simulate,w,c
  5972  0007C8  6E36               	movwf	_simulate$1521,c
  5973  0007CA  5008               	movf	?_HexDecToDec2+1,w,c
  5974  0007CC  2035               	addwfc	??_simulate+1,w,c
  5975  0007CE  6E37               	movwf	_simulate$1521+1,c
  5976                           
  5977                           ;main.c: 207: period = (HexDecToDec2(now[1]) - HexDecToDec2(start[1]))*60 + HexDecToDec2
      +                          (now[0]) - HexDecToDec2(start[0]);
  5978  0007D0  C036  F001         	movff	_simulate$1521,i2___wmul@multiplier
  5979  0007D4  C037  F002         	movff	_simulate$1521+1,i2___wmul@multiplier+1
  5980  0007D8  0E00               	movlw	0
  5981  0007DA  6E04               	movwf	i2___wmul@multiplicand+1,c
  5982  0007DC  0E3C               	movlw	60
  5983  0007DE  6E03               	movwf	i2___wmul@multiplicand,c
  5984  0007E0  EC7F  F012         	call	i2___wmul	;wreg free
  5985  0007E4  C001  F034         	movff	?i2___wmul,??_simulate
  5986  0007E8  C002  F035         	movff	?i2___wmul+1,??_simulate+1
  5987  0007EC  C04A  F007         	movff	simulate@now,HexDecToDec2@hex
  5988  0007F0  C04B  F008         	movff	simulate@now+1,HexDecToDec2@hex+1
  5989  0007F4  EC26  F011         	call	_HexDecToDec2	;wreg free
  5990  0007F8  5007               	movf	?_HexDecToDec2,w,c
  5991  0007FA  2634               	addwf	??_simulate,f,c
  5992  0007FC  5008               	movf	?_HexDecToDec2+1,w,c
  5993  0007FE  2235               	addwfc	??_simulate+1,f,c
  5994  000800  C04E  F007         	movff	simulate@start,HexDecToDec2@hex
  5995  000804  C04F  F008         	movff	simulate@start+1,HexDecToDec2@hex+1
  5996  000808  EC26  F011         	call	_HexDecToDec2	;wreg free
  5997  00080C  1E07               	comf	?_HexDecToDec2,f,c
  5998  00080E  1E08               	comf	?_HexDecToDec2+1,f,c
  5999  000810  4A07               	infsnz	?_HexDecToDec2,f,c
  6000  000812  2A08               	incf	?_HexDecToDec2+1,f,c
  6001  000814  5007               	movf	?_HexDecToDec2,w,c
  6002  000816  2434               	addwf	??_simulate,w,c
  6003  000818  6E58               	movwf	simulate@period,c
  6004  00081A  5008               	movf	?_HexDecToDec2+1,w,c
  6005  00081C  2035               	addwfc	??_simulate+1,w,c
  6006  00081E  6E59               	movwf	simulate@period+1,c
  6007                           
  6008                           ;main.c: 210: if (period > 150) {
  6009  000820  5059               	movf	simulate@period+1,w,c
  6010  000822  E104               	bnz	i2u329_40
  6011  000824  0E97               	movlw	151
  6012  000826  5C58               	subwf	simulate@period,w,c
  6013  000828  A0D8               	btfss	status,0,c
  6014  00082A  D004               	goto	i2l4311
  6015  00082C                     i2u329_40:
  6016                           
  6017                           ;main.c: 211: mode = 2;
  6018  00082C  0E00               	movlw	0
  6019  00082E  6E7C               	movwf	_mode+1,c
  6020  000830  0E02               	movlw	2
  6021  000832  6E7B               	movwf	_mode,c
  6022  000834                     i2l4311:
  6023                           
  6024                           ;main.c: 212: }
  6025                           ;main.c: 213: notyet++;
  6026  000834  2A52               	incf	simulate@notyet,f,c
  6027                           
  6028                           ;main.c: 214: if (notyet > 200) {
  6029  000836  0EC8               	movlw	200
  6030  000838  6452               	cpfsgt	simulate@notyet,c
  6031  00083A  D004               	goto	i2l4317
  6032                           
  6033                           ;main.c: 215: mode = 2;
  6034  00083C  0E00               	movlw	0
  6035  00083E  6E7C               	movwf	_mode+1,c
  6036  000840  0E02               	movlw	2
  6037  000842  6E7B               	movwf	_mode,c
  6038  000844                     i2l4317:
  6039  000844  047B               	decf	_mode,w,c
  6040  000846  107C               	iorwf	_mode+1,w,c
  6041  000848  B4D8               	btfsc	status,2,c
  6042  00084A  D659               	goto	i2l4199
  6043                           
  6044                           ;main.c: 216: }
  6045                           ;main.c: 217: }
  6046                           ;main.c: 218: INT2IE = 0;
  6047  00084C  98F0               	bcf	intcon3,4,c	;volatile
  6048                           
  6049                           ;main.c: 219: stopMoving(0);
  6050  00084E  0E00               	movlw	0
  6051  000850  ECCD  F011         	call	_stopMoving
  6052                           
  6053                           ;main.c: 220: closeGate();
  6054  000854  ECB3  F012         	call	_closeGate	;wreg free
  6055                           
  6056                           ;main.c: 221: lcdInst(0b11000000);
  6057  000858  0EC0               	movlw	192
  6058  00085A  EC2F  F013         	call	i2_lcdInst
  6059                           
  6060                           ;main.c: 222: printf("Sorting Complete          ");
  6061  00085E  0ED3               	movlw	low STR_2
  6062  000860  6E0D               	movwf	i2printf@f,c
  6063  000862  0EFD               	movlw	high STR_2
  6064  000864  6E0E               	movwf	i2printf@f+1,c
  6065  000866  EC5A  F004         	call	i2_printf	;wreg free
  6066                           
  6067                           ;main.c: 223: WriteRun(sorted, period);
  6068  00086A  0E5C               	movlw	low simulate@sorted
  6069  00086C  6E07               	movwf	WriteRun@sorted,c
  6070  00086E  0E00               	movlw	high simulate@sorted
  6071  000870  6E08               	movwf	WriteRun@sorted+1,c
  6072  000872  C058  F009         	movff	simulate@period,WriteRun@time
  6073  000876  C059  F00A         	movff	simulate@period+1,WriteRun@time+1
  6074  00087A  EC4C  F009         	call	_WriteRun	;wreg free
  6075                           
  6076                           ;main.c: 224: _delay((unsigned long)((700)*(8000000/4000.0)));
  6077  00087E  0E08               	movlw	8
  6078  000880  6E35               	movwf	(??_simulate+1)& (0+255),c
  6079  000882  0E1B               	movlw	27
  6080  000884  6E34               	movwf	??_simulate& (0+255),c
  6081  000886  0E27               	movlw	39
  6082  000888                     i2u357_47:
  6083  000888  2EE8               	decfsz	wreg,f,c
  6084  00088A  D7FE               	bra	i2u357_47
  6085  00088C  2E34               	decfsz	??_simulate& (0+255),f,c
  6086  00088E  D7FC               	bra	i2u357_47
  6087  000890  2E35               	decfsz	(??_simulate+1)& (0+255),f,c
  6088  000892  D7FA               	bra	i2u357_47
  6089  000894  F000               	nop	
  6090                           
  6091                           ;main.c: 225: showInfo(period, sorted);
  6092  000896  C058  F023         	movff	simulate@period,showInfo@time
  6093  00089A  C059  F024         	movff	simulate@period+1,showInfo@time+1
  6094  00089E  0E5C               	movlw	low simulate@sorted
  6095  0008A0  6E25               	movwf	showInfo@sorted,c
  6096  0008A2  0E00               	movlw	high simulate@sorted
  6097  0008A4  6E26               	movwf	showInfo@sorted+1,c
  6098  0008A6  EC71  F007         	call	_showInfo	;wreg free
  6099                           
  6100                           ;main.c: 226: mode = 0;
  6101  0008AA  0E00               	movlw	0
  6102  0008AC  6E7C               	movwf	_mode+1,c
  6103  0008AE  0E00               	movlw	0
  6104  0008B0  6E7B               	movwf	_mode,c
  6105  0008B2  0012               	return		;funcret
  6106  0008B4                     __end_of_simulate:
  6107                           	opt stack 0
  6108                           pclatu	equ	0xFFB
  6109                           pclath	equ	0xFFA
  6110                           tblptru	equ	0xFF8
  6111                           tblptrh	equ	0xFF7
  6112                           tblptrl	equ	0xFF6
  6113                           tablat	equ	0xFF5
  6114                           prodh	equ	0xFF4
  6115                           prodl	equ	0xFF3
  6116                           intcon	equ	0xFF2
  6117                           intcon2	equ	0xFF1
  6118                           intcon3	equ	0xFF0
  6119                           postinc0	equ	0xFEE
  6120                           fsr0h	equ	0xFEA
  6121                           fsr0l	equ	0xFE9
  6122                           wreg	equ	0xFE8
  6123                           postdec1	equ	0xFE5
  6124                           plusw1	equ	0xFE3
  6125                           fsr1h	equ	0xFE2
  6126                           fsr1l	equ	0xFE1
  6127                           indf2	equ	0xFDF
  6128                           postinc2	equ	0xFDE
  6129                           postdec2	equ	0xFDD
  6130                           plusw2	equ	0xFDB
  6131                           fsr2h	equ	0xFDA
  6132                           fsr2l	equ	0xFD9
  6133                           status	equ	0xFD8
  6134                           
  6135 ;; *************** function i2_getTime *****************
  6136 ;; Defined at:
  6137 ;;		line 76 in file "modules.c"
  6138 ;; Parameters:    Size  Location     Type
  6139 ;;  time            2    3[COMRAM] PTR unsigned char 
  6140 ;;		 -> time(7), 
  6141 ;; Auto vars:     Size  Location     Type
  6142 ;;  getTime         1    5[COMRAM] unsigned char 
  6143 ;; Return value:  Size  Location     Type
  6144 ;;                  1    wreg      void 
  6145 ;; Registers used:
  6146 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6147 ;; Tracked objects:
  6148 ;;		On entry : 0/0
  6149 ;;		On exit  : 0/0
  6150 ;;		Unchanged: 0/0
  6151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6152 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6153 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6155 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6156 ;;Total ram usage:        3 bytes
  6157 ;; Hardware stack levels used:    1
  6158 ;; Hardware stack levels required when called:    2
  6159 ;; This function calls:
  6160 ;;		i2_I2C_Master_Read
  6161 ;;		i2_I2C_Master_Start
  6162 ;;		i2_I2C_Master_Stop
  6163 ;;		i2_I2C_Master_Write
  6164 ;; This function is called by:
  6165 ;;		_simulate
  6166 ;; This function uses a non-reentrant model
  6167 ;;
  6168                           
  6169                           	psect	text24
  6170  001DFC                     __ptext24:
  6171                           	opt stack 0
  6172  001DFC                     i2_getTime:
  6173                           	opt stack 22
  6174                           
  6175                           ;modules.c: 77: (INTCONbits.GIE = 0);
  6176                           
  6177                           ;incstack = 0
  6178  001DFC  9EF2               	bcf	intcon,7,c	;volatile
  6179                           
  6180                           ;modules.c: 81: I2C_Master_Start();
  6181  001DFE  EC50  F013         	call	i2_I2C_Master_Start	;wreg free
  6182                           
  6183                           ;modules.c: 82: I2C_Master_Write(0b11010000);
  6184  001E02  0E00               	movlw	0
  6185  001E04  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6186  001E06  0ED0               	movlw	208
  6187  001E08  6E02               	movwf	i2I2C_Master_Write@d,c
  6188  001E0A  EC3F  F013         	call	i2_I2C_Master_Write	;wreg free
  6189                           
  6190                           ;modules.c: 83: I2C_Master_Write(0x00);
  6191  001E0E  0E00               	movlw	0
  6192  001E10  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6193  001E12  0E00               	movlw	0
  6194  001E14  6E02               	movwf	i2I2C_Master_Write@d,c
  6195  001E16  EC3F  F013         	call	i2_I2C_Master_Write	;wreg free
  6196                           
  6197                           ;modules.c: 84: I2C_Master_Stop();
  6198  001E1A  EC4C  F013         	call	i2_I2C_Master_Stop	;wreg free
  6199                           
  6200                           ;modules.c: 87: I2C_Master_Start();
  6201  001E1E  EC50  F013         	call	i2_I2C_Master_Start	;wreg free
  6202                           
  6203                           ;modules.c: 88: I2C_Master_Write(0b11010001);
  6204  001E22  0E00               	movlw	0
  6205  001E24  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6206  001E26  0ED1               	movlw	209
  6207  001E28  6E02               	movwf	i2I2C_Master_Write@d,c
  6208  001E2A  EC3F  F013         	call	i2_I2C_Master_Write	;wreg free
  6209                           
  6210                           ;modules.c: 89: for (unsigned char i = 0; i < 0x06; i++) {
  6211  001E2E  0E00               	movlw	0
  6212  001E30  6E06               	movwf	i2getTime@i,c
  6213  001E32                     i2l4059:
  6214  001E32  0E05               	movlw	5
  6215  001E34  6406               	cpfsgt	i2getTime@i,c
  6216  001E36  D001               	goto	i2l4063
  6217  001E38  D00E               	goto	i2l4069
  6218  001E3A                     i2l4063:
  6219                           
  6220                           ;modules.c: 90: time[i] = I2C_Master_Read(1);
  6221  001E3A  5006               	movf	i2getTime@i,w,c
  6222  001E3C  0D01               	mullw	1
  6223  001E3E  50F3               	movf	prodl,w,c
  6224  001E40  2404               	addwf	i2getTime@time,w,c
  6225  001E42  6ED9               	movwf	fsr2l,c
  6226  001E44  50F4               	movf	prodh,w,c
  6227  001E46  2005               	addwfc	i2getTime@time+1,w,c
  6228  001E48  6EDA               	movwf	fsr2h,c
  6229  001E4A  0E01               	movlw	1
  6230  001E4C  EC59  F012         	call	i2_I2C_Master_Read
  6231  001E50  6EDF               	movwf	indf2,c
  6232  001E52  2A06               	incf	i2getTime@i,f,c
  6233  001E54  D7EE               	goto	i2l4059
  6234  001E56                     i2l4069:
  6235                           
  6236                           ;modules.c: 91: }
  6237                           ;modules.c: 92: time[6] = I2C_Master_Read(0);
  6238  001E56  EE20 F006          	lfsr	2,6
  6239  001E5A  5004               	movf	i2getTime@time,w,c
  6240  001E5C  26D9               	addwf	fsr2l,f,c
  6241  001E5E  5005               	movf	i2getTime@time+1,w,c
  6242  001E60  22DA               	addwfc	fsr2h,f,c
  6243  001E62  0E00               	movlw	0
  6244  001E64  EC59  F012         	call	i2_I2C_Master_Read
  6245  001E68  6EDF               	movwf	indf2,c
  6246                           
  6247                           ;modules.c: 93: I2C_Master_Stop();
  6248  001E6A  EC4C  F013         	call	i2_I2C_Master_Stop	;wreg free
  6249                           
  6250                           ;modules.c: 94: (INTCONbits.GIE = 1);
  6251  001E6E  8EF2               	bsf	intcon,7,c	;volatile
  6252  001E70  0012               	return		;funcret
  6253  001E72                     __end_ofi2_getTime:
  6254                           	opt stack 0
  6255                           pclatu	equ	0xFFB
  6256                           pclath	equ	0xFFA
  6257                           tblptru	equ	0xFF8
  6258                           tblptrh	equ	0xFF7
  6259                           tblptrl	equ	0xFF6
  6260                           tablat	equ	0xFF5
  6261                           prodh	equ	0xFF4
  6262                           prodl	equ	0xFF3
  6263                           intcon	equ	0xFF2
  6264                           intcon2	equ	0xFF1
  6265                           intcon3	equ	0xFF0
  6266                           postinc0	equ	0xFEE
  6267                           fsr0h	equ	0xFEA
  6268                           fsr0l	equ	0xFE9
  6269                           wreg	equ	0xFE8
  6270                           postdec1	equ	0xFE5
  6271                           plusw1	equ	0xFE3
  6272                           fsr1h	equ	0xFE2
  6273                           fsr1l	equ	0xFE1
  6274                           indf2	equ	0xFDF
  6275                           postinc2	equ	0xFDE
  6276                           postdec2	equ	0xFDD
  6277                           plusw2	equ	0xFDB
  6278                           fsr2h	equ	0xFDA
  6279                           fsr2l	equ	0xFD9
  6280                           status	equ	0xFD8
  6281                           
  6282 ;; *************** function i2_I2C_Master_Write *****************
  6283 ;; Defined at:
  6284 ;;		line 42 in file "I2C.c"
  6285 ;; Parameters:    Size  Location     Type
  6286 ;;  d               2    1[COMRAM] unsigned int 
  6287 ;; Auto vars:     Size  Location     Type
  6288 ;;		None
  6289 ;; Return value:  Size  Location     Type
  6290 ;;                  1    wreg      void 
  6291 ;; Registers used:
  6292 ;;		wreg, status,2, status,0, cstack
  6293 ;; Tracked objects:
  6294 ;;		On entry : 0/0
  6295 ;;		On exit  : 0/0
  6296 ;;		Unchanged: 0/0
  6297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6298 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6301 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6302 ;;Total ram usage:        2 bytes
  6303 ;; Hardware stack levels used:    1
  6304 ;; Hardware stack levels required when called:    1
  6305 ;; This function calls:
  6306 ;;		i2_I2C_Master_Wait
  6307 ;; This function is called by:
  6308 ;;		i2_getTime
  6309 ;; This function uses a non-reentrant model
  6310 ;;
  6311                           
  6312                           	psect	text25
  6313  00267E                     __ptext25:
  6314                           	opt stack 0
  6315  00267E                     i2_I2C_Master_Write:
  6316                           	opt stack 22
  6317                           
  6318                           ;I2C.c: 43: I2C_Master_Wait();
  6319                           
  6320                           ;incstack = 0
  6321  00267E  EC10  F013         	call	i2_I2C_Master_Wait	;wreg free
  6322                           
  6323                           ;I2C.c: 44: SSPBUF = d;
  6324  002682  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
  6325  002686  0012               	return		;funcret
  6326  002688                     __end_ofi2_I2C_Master_Write:
  6327                           	opt stack 0
  6328                           pclatu	equ	0xFFB
  6329                           pclath	equ	0xFFA
  6330                           tblptru	equ	0xFF8
  6331                           tblptrh	equ	0xFF7
  6332                           tblptrl	equ	0xFF6
  6333                           tablat	equ	0xFF5
  6334                           prodh	equ	0xFF4
  6335                           prodl	equ	0xFF3
  6336                           intcon	equ	0xFF2
  6337                           intcon2	equ	0xFF1
  6338                           intcon3	equ	0xFF0
  6339                           postinc0	equ	0xFEE
  6340                           fsr0h	equ	0xFEA
  6341                           fsr0l	equ	0xFE9
  6342                           wreg	equ	0xFE8
  6343                           postdec1	equ	0xFE5
  6344                           plusw1	equ	0xFE3
  6345                           fsr1h	equ	0xFE2
  6346                           fsr1l	equ	0xFE1
  6347                           indf2	equ	0xFDF
  6348                           postinc2	equ	0xFDE
  6349                           postdec2	equ	0xFDD
  6350                           plusw2	equ	0xFDB
  6351                           fsr2h	equ	0xFDA
  6352                           fsr2l	equ	0xFD9
  6353                           status	equ	0xFD8
  6354                           
  6355 ;; *************** function i2_I2C_Master_Stop *****************
  6356 ;; Defined at:
  6357 ;;		line 37 in file "I2C.c"
  6358 ;; Parameters:    Size  Location     Type
  6359 ;;		None
  6360 ;; Auto vars:     Size  Location     Type
  6361 ;;		None
  6362 ;; Return value:  Size  Location     Type
  6363 ;;                  1    wreg      void 
  6364 ;; Registers used:
  6365 ;;		wreg, status,2, status,0, cstack
  6366 ;; Tracked objects:
  6367 ;;		On entry : 0/0
  6368 ;;		On exit  : 0/0
  6369 ;;		Unchanged: 0/0
  6370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6374 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6375 ;;Total ram usage:        0 bytes
  6376 ;; Hardware stack levels used:    1
  6377 ;; Hardware stack levels required when called:    1
  6378 ;; This function calls:
  6379 ;;		i2_I2C_Master_Wait
  6380 ;; This function is called by:
  6381 ;;		i2_getTime
  6382 ;; This function uses a non-reentrant model
  6383 ;;
  6384                           
  6385                           	psect	text26
  6386  002698                     __ptext26:
  6387                           	opt stack 0
  6388  002698                     i2_I2C_Master_Stop:
  6389                           	opt stack 22
  6390                           
  6391                           ;I2C.c: 38: I2C_Master_Wait();
  6392                           
  6393                           ;incstack = 0
  6394  002698  EC10  F013         	call	i2_I2C_Master_Wait	;wreg free
  6395                           
  6396                           ;I2C.c: 39: PEN = 1;
  6397  00269C  84C5               	bsf	4037,2,c	;volatile
  6398  00269E  0012               	return		;funcret
  6399  0026A0                     __end_ofi2_I2C_Master_Stop:
  6400                           	opt stack 0
  6401                           pclatu	equ	0xFFB
  6402                           pclath	equ	0xFFA
  6403                           tblptru	equ	0xFF8
  6404                           tblptrh	equ	0xFF7
  6405                           tblptrl	equ	0xFF6
  6406                           tablat	equ	0xFF5
  6407                           prodh	equ	0xFF4
  6408                           prodl	equ	0xFF3
  6409                           intcon	equ	0xFF2
  6410                           intcon2	equ	0xFF1
  6411                           intcon3	equ	0xFF0
  6412                           postinc0	equ	0xFEE
  6413                           fsr0h	equ	0xFEA
  6414                           fsr0l	equ	0xFE9
  6415                           wreg	equ	0xFE8
  6416                           postdec1	equ	0xFE5
  6417                           plusw1	equ	0xFE3
  6418                           fsr1h	equ	0xFE2
  6419                           fsr1l	equ	0xFE1
  6420                           indf2	equ	0xFDF
  6421                           postinc2	equ	0xFDE
  6422                           postdec2	equ	0xFDD
  6423                           plusw2	equ	0xFDB
  6424                           fsr2h	equ	0xFDA
  6425                           fsr2l	equ	0xFD9
  6426                           status	equ	0xFD8
  6427                           
  6428 ;; *************** function i2_I2C_Master_Start *****************
  6429 ;; Defined at:
  6430 ;;		line 27 in file "I2C.c"
  6431 ;; Parameters:    Size  Location     Type
  6432 ;;		None
  6433 ;; Auto vars:     Size  Location     Type
  6434 ;;		None
  6435 ;; Return value:  Size  Location     Type
  6436 ;;                  1    wreg      void 
  6437 ;; Registers used:
  6438 ;;		wreg, status,2, status,0, cstack
  6439 ;; Tracked objects:
  6440 ;;		On entry : 0/0
  6441 ;;		On exit  : 0/0
  6442 ;;		Unchanged: 0/0
  6443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6447 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6448 ;;Total ram usage:        0 bytes
  6449 ;; Hardware stack levels used:    1
  6450 ;; Hardware stack levels required when called:    1
  6451 ;; This function calls:
  6452 ;;		i2_I2C_Master_Wait
  6453 ;; This function is called by:
  6454 ;;		i2_getTime
  6455 ;; This function uses a non-reentrant model
  6456 ;;
  6457                           
  6458                           	psect	text27
  6459  0026A0                     __ptext27:
  6460                           	opt stack 0
  6461  0026A0                     i2_I2C_Master_Start:
  6462                           	opt stack 22
  6463                           
  6464                           ;I2C.c: 28: I2C_Master_Wait();
  6465                           
  6466                           ;incstack = 0
  6467  0026A0  EC10  F013         	call	i2_I2C_Master_Wait	;wreg free
  6468                           
  6469                           ;I2C.c: 29: SEN = 1;
  6470  0026A4  80C5               	bsf	4037,0,c	;volatile
  6471  0026A6  0012               	return		;funcret
  6472  0026A8                     __end_ofi2_I2C_Master_Start:
  6473                           	opt stack 0
  6474                           pclatu	equ	0xFFB
  6475                           pclath	equ	0xFFA
  6476                           tblptru	equ	0xFF8
  6477                           tblptrh	equ	0xFF7
  6478                           tblptrl	equ	0xFF6
  6479                           tablat	equ	0xFF5
  6480                           prodh	equ	0xFF4
  6481                           prodl	equ	0xFF3
  6482                           intcon	equ	0xFF2
  6483                           intcon2	equ	0xFF1
  6484                           intcon3	equ	0xFF0
  6485                           postinc0	equ	0xFEE
  6486                           fsr0h	equ	0xFEA
  6487                           fsr0l	equ	0xFE9
  6488                           wreg	equ	0xFE8
  6489                           postdec1	equ	0xFE5
  6490                           plusw1	equ	0xFE3
  6491                           fsr1h	equ	0xFE2
  6492                           fsr1l	equ	0xFE1
  6493                           indf2	equ	0xFDF
  6494                           postinc2	equ	0xFDE
  6495                           postdec2	equ	0xFDD
  6496                           plusw2	equ	0xFDB
  6497                           fsr2h	equ	0xFDA
  6498                           fsr2l	equ	0xFD9
  6499                           status	equ	0xFD8
  6500                           
  6501 ;; *************** function i2_I2C_Master_Read *****************
  6502 ;; Defined at:
  6503 ;;		line 47 in file "I2C.c"
  6504 ;; Parameters:    Size  Location     Type
  6505 ;;  a               1    wreg     unsigned char 
  6506 ;; Auto vars:     Size  Location     Type
  6507 ;;  a               1    1[COMRAM] unsigned char 
  6508 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
  6509 ;; Return value:  Size  Location     Type
  6510 ;;                  1    wreg      unsigned char 
  6511 ;; Registers used:
  6512 ;;		wreg, status,2, status,0, cstack
  6513 ;; Tracked objects:
  6514 ;;		On entry : 0/0
  6515 ;;		On exit  : 0/0
  6516 ;;		Unchanged: 0/0
  6517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6519 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6521 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6522 ;;Total ram usage:        2 bytes
  6523 ;; Hardware stack levels used:    1
  6524 ;; Hardware stack levels required when called:    1
  6525 ;; This function calls:
  6526 ;;		i2_I2C_Master_Wait
  6527 ;; This function is called by:
  6528 ;;		i2_getTime
  6529 ;; This function uses a non-reentrant model
  6530 ;;
  6531                           
  6532                           	psect	text28
  6533  0024B2                     __ptext28:
  6534                           	opt stack 0
  6535  0024B2                     i2_I2C_Master_Read:
  6536                           	opt stack 22
  6537                           
  6538                           ;incstack = 0
  6539                           ;i2I2C_Master_Read@a stored from wreg
  6540  0024B2  6E02               	movwf	i2I2C_Master_Read@a,c
  6541                           
  6542                           ;I2C.c: 48: unsigned char temp;
  6543                           ;I2C.c: 49: I2C_Master_Wait();
  6544  0024B4  EC10  F013         	call	i2_I2C_Master_Wait	;wreg free
  6545                           
  6546                           ;I2C.c: 50: RCEN = 1;
  6547  0024B8  86C5               	bsf	4037,3,c	;volatile
  6548                           
  6549                           ;I2C.c: 51: I2C_Master_Wait();
  6550  0024BA  EC10  F013         	call	i2_I2C_Master_Wait	;wreg free
  6551                           
  6552                           ;I2C.c: 52: temp = SSPBUF;
  6553  0024BE  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
  6554                           
  6555                           ;I2C.c: 53: I2C_Master_Wait();
  6556  0024C2  EC10  F013         	call	i2_I2C_Master_Wait	;wreg free
  6557                           
  6558                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
  6559  0024C6  5002               	movf	i2I2C_Master_Read@a,w,c
  6560  0024C8  A4D8               	btfss	status,2,c
  6561  0024CA  D002               	goto	i2u270_40
  6562  0024CC  8AC5               	bsf	4037,5,c	;volatile
  6563  0024CE  D001               	goto	i2l3627
  6564  0024D0                     i2u270_40:
  6565  0024D0  9AC5               	bcf	4037,5,c	;volatile
  6566  0024D2                     i2l3627:
  6567                           
  6568                           ;I2C.c: 55: ACKEN = 1;
  6569  0024D2  88C5               	bsf	4037,4,c	;volatile
  6570                           
  6571                           ;I2C.c: 56: return temp;
  6572  0024D4  5003               	movf	i2I2C_Master_Read@temp,w,c
  6573  0024D6  0012               	return	
  6574  0024D8                     __end_ofi2_I2C_Master_Read:
  6575                           	opt stack 0
  6576                           pclatu	equ	0xFFB
  6577                           pclath	equ	0xFFA
  6578                           tblptru	equ	0xFF8
  6579                           tblptrh	equ	0xFF7
  6580                           tblptrl	equ	0xFF6
  6581                           tablat	equ	0xFF5
  6582                           prodh	equ	0xFF4
  6583                           prodl	equ	0xFF3
  6584                           intcon	equ	0xFF2
  6585                           intcon2	equ	0xFF1
  6586                           intcon3	equ	0xFF0
  6587                           postinc0	equ	0xFEE
  6588                           fsr0h	equ	0xFEA
  6589                           fsr0l	equ	0xFE9
  6590                           wreg	equ	0xFE8
  6591                           postdec1	equ	0xFE5
  6592                           plusw1	equ	0xFE3
  6593                           fsr1h	equ	0xFE2
  6594                           fsr1l	equ	0xFE1
  6595                           indf2	equ	0xFDF
  6596                           postinc2	equ	0xFDE
  6597                           postdec2	equ	0xFDD
  6598                           plusw2	equ	0xFDB
  6599                           fsr2h	equ	0xFDA
  6600                           fsr2l	equ	0xFD9
  6601                           status	equ	0xFD8
  6602                           
  6603 ;; *************** function i2_I2C_Master_Wait *****************
  6604 ;; Defined at:
  6605 ;;		line 23 in file "I2C.c"
  6606 ;; Parameters:    Size  Location     Type
  6607 ;;		None
  6608 ;; Auto vars:     Size  Location     Type
  6609 ;;		None
  6610 ;; Return value:  Size  Location     Type
  6611 ;;                  1    wreg      void 
  6612 ;; Registers used:
  6613 ;;		wreg, status,2, status,0
  6614 ;; Tracked objects:
  6615 ;;		On entry : 0/0
  6616 ;;		On exit  : 0/0
  6617 ;;		Unchanged: 0/0
  6618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6621 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6622 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6623 ;;Total ram usage:        1 bytes
  6624 ;; Hardware stack levels used:    1
  6625 ;; This function calls:
  6626 ;;		Nothing
  6627 ;; This function is called by:
  6628 ;;		i2_I2C_Master_Start
  6629 ;;		i2_I2C_Master_Stop
  6630 ;;		i2_I2C_Master_Write
  6631 ;;		i2_I2C_Master_Read
  6632 ;; This function uses a non-reentrant model
  6633 ;;
  6634                           
  6635                           	psect	text29
  6636  002620                     __ptext29:
  6637                           	opt stack 0
  6638  002620                     i2_I2C_Master_Wait:
  6639                           	opt stack 22
  6640  002620                     i2l407:
  6641  002620  B4C7               	btfsc	4039,2,c	;volatile
  6642  002622  D7FE               	goto	i2l407
  6643  002624  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
  6644  002628  0E1F               	movlw	31
  6645  00262A  1601               	andwf	??i2_I2C_Master_Wait,f,c
  6646  00262C  B4D8               	btfsc	status,2,c
  6647  00262E  0012               	return	
  6648  002630  D7F7               	goto	i2l407
  6649  002632                     __end_ofi2_I2C_Master_Wait:
  6650                           	opt stack 0
  6651                           pclatu	equ	0xFFB
  6652                           pclath	equ	0xFFA
  6653                           tblptru	equ	0xFF8
  6654                           tblptrh	equ	0xFF7
  6655                           tblptrl	equ	0xFF6
  6656                           tablat	equ	0xFF5
  6657                           prodh	equ	0xFF4
  6658                           prodl	equ	0xFF3
  6659                           intcon	equ	0xFF2
  6660                           intcon2	equ	0xFF1
  6661                           intcon3	equ	0xFF0
  6662                           postinc0	equ	0xFEE
  6663                           fsr0h	equ	0xFEA
  6664                           fsr0l	equ	0xFE9
  6665                           wreg	equ	0xFE8
  6666                           postdec1	equ	0xFE5
  6667                           plusw1	equ	0xFE3
  6668                           fsr1h	equ	0xFE2
  6669                           fsr1l	equ	0xFE1
  6670                           indf2	equ	0xFDF
  6671                           postinc2	equ	0xFDE
  6672                           postdec2	equ	0xFDD
  6673                           plusw2	equ	0xFDB
  6674                           fsr2h	equ	0xFDA
  6675                           fsr2l	equ	0xFD9
  6676                           status	equ	0xFD8
  6677                           
  6678 ;; *************** function _checkC *****************
  6679 ;; Defined at:
  6680 ;;		line 53 in file "sensors.c"
  6681 ;; Parameters:    Size  Location     Type
  6682 ;;  sorted          2   45[COMRAM] PTR unsigned char 
  6683 ;;		 -> simulate@sorted(4), 
  6684 ;; Auto vars:     Size  Location     Type
  6685 ;;  V               2   49[COMRAM] int 
  6686 ;; Return value:  Size  Location     Type
  6687 ;;                  2   45[COMRAM] int 
  6688 ;; Registers used:
  6689 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6690 ;; Tracked objects:
  6691 ;;		On entry : 0/0
  6692 ;;		On exit  : 0/0
  6693 ;;		Unchanged: 0/0
  6694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6695 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6696 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6697 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6698 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6699 ;;Total ram usage:        6 bytes
  6700 ;; Hardware stack levels used:    1
  6701 ;; Hardware stack levels required when called:    4
  6702 ;; This function calls:
  6703 ;;		_checkV
  6704 ;;		_printV
  6705 ;;		i2_printf
  6706 ;; This function is called by:
  6707 ;;		_simulate
  6708 ;; This function uses a non-reentrant model
  6709 ;;
  6710                           
  6711                           	psect	text30
  6712  001E72                     __ptext30:
  6713                           	opt stack 0
  6714  001E72                     _checkC:
  6715                           	opt stack 20
  6716                           
  6717                           ;sensors.c: 56: printf("C:");
  6718                           
  6719                           ;incstack = 0
  6720  001E72  0EEF               	movlw	low (STR_9+1)
  6721  001E74  6E0D               	movwf	i2printf@f,c
  6722  001E76  0EFF               	movlw	high (STR_9+1)
  6723  001E78  6E0E               	movwf	i2printf@f+1,c
  6724  001E7A  EC5A  F004         	call	i2_printf	;wreg free
  6725                           
  6726                           ;sensors.c: 57: int V = checkV(0, 1.5 / 5 * 1023);
  6727  001E7E  0E01               	movlw	1
  6728  001E80  6E26               	movwf	checkV@threshhold+1,c
  6729  001E82  0E32               	movlw	50
  6730  001E84  6E25               	movwf	checkV@threshhold,c
  6731  001E86  0E00               	movlw	0
  6732  001E88  EC89  F00B         	call	_checkV
  6733  001E8C  C025  F032         	movff	?_checkV,checkC@V
  6734  001E90  C026  F033         	movff	?_checkV+1,checkC@V+1
  6735                           
  6736                           ;sensors.c: 58: printV(V);
  6737  001E94  C032  F023         	movff	checkC@V,printV@charged
  6738  001E98  C033  F024         	movff	checkC@V+1,printV@charged+1
  6739  001E9C  EC45  F012         	call	_printV	;wreg free
  6740                           
  6741                           ;sensors.c: 59: switch (V) {
  6742  001EA0  D00F               	goto	i2l3981
  6743  001EA2                     i2l3979:
  6744                           
  6745                           ;sensors.c: 61: sorted[1]++;
  6746  001EA2  EE20 F001          	lfsr	2,1
  6747  001EA6  502E               	movf	checkC@sorted,w,c
  6748  001EA8  26D9               	addwf	fsr2l,f,c
  6749  001EAA  502F               	movf	checkC@sorted+1,w,c
  6750  001EAC  22DA               	addwfc	fsr2h,f,c
  6751  001EAE  2ADF               	incf	indf2,f,c
  6752  001EB0                     i2l368:
  6753                           
  6754                           ;sensors.c: 63: sorted[3]++;
  6755  001EB0  EE20 F003          	lfsr	2,3
  6756  001EB4  502E               	movf	checkC@sorted,w,c
  6757  001EB6  26D9               	addwf	fsr2l,f,c
  6758  001EB8  502F               	movf	checkC@sorted+1,w,c
  6759  001EBA  22DA               	addwfc	fsr2h,f,c
  6760  001EBC  2ADF               	incf	indf2,f,c
  6761                           
  6762                           ;sensors.c: 64: }
  6763  001EBE  D00F               	goto	i2l369
  6764  001EC0                     i2l3981:
  6765  001EC0  C032  F030         	movff	checkC@V,??_checkC
  6766  001EC4  C033  F031         	movff	checkC@V+1,??_checkC+1
  6767                           
  6768                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6769                           ; Switch size 1, requested type "space"
  6770                           ; Number of cases is 1, Range of values is 0 to 0
  6771                           ; switch strategies available:
  6772                           ; Name         Instructions Cycles
  6773                           ; simple_byte            4     3 (average)
  6774                           ;	Chosen strategy is simple_byte
  6775  001EC8  5031               	movf	??_checkC+1,w,c
  6776  001ECA  0A00               	xorlw	0	; case 0
  6777  001ECC  A4D8               	btfss	status,2,c
  6778  001ECE  D007               	goto	i2l369
  6779                           
  6780                           ; Switch size 1, requested type "space"
  6781                           ; Number of cases is 2, Range of values is 0 to 1
  6782                           ; switch strategies available:
  6783                           ; Name         Instructions Cycles
  6784                           ; simple_byte            7     4 (average)
  6785                           ;	Chosen strategy is simple_byte
  6786  001ED0  5030               	movf	??_checkC,w,c
  6787  001ED2  0A00               	xorlw	0	; case 0
  6788  001ED4  B4D8               	btfsc	status,2,c
  6789  001ED6  D7EC               	goto	i2l368
  6790  001ED8  0A01               	xorlw	1	; case 1
  6791  001EDA  B4D8               	btfsc	status,2,c
  6792  001EDC  D7E2               	goto	i2l3979
  6793  001EDE                     i2l369:
  6794                           
  6795                           ;sensors.c: 65: return V;
  6796  001EDE  C032  F02E         	movff	checkC@V,?_checkC
  6797  001EE2  C033  F02F         	movff	checkC@V+1,?_checkC+1
  6798  001EE6  0012               	return		;funcret
  6799  001EE8                     __end_of_checkC:
  6800                           	opt stack 0
  6801                           pclatu	equ	0xFFB
  6802                           pclath	equ	0xFFA
  6803                           tblptru	equ	0xFF8
  6804                           tblptrh	equ	0xFF7
  6805                           tblptrl	equ	0xFF6
  6806                           tablat	equ	0xFF5
  6807                           prodh	equ	0xFF4
  6808                           prodl	equ	0xFF3
  6809                           intcon	equ	0xFF2
  6810                           intcon2	equ	0xFF1
  6811                           intcon3	equ	0xFF0
  6812                           postinc0	equ	0xFEE
  6813                           fsr0h	equ	0xFEA
  6814                           fsr0l	equ	0xFE9
  6815                           wreg	equ	0xFE8
  6816                           postdec1	equ	0xFE5
  6817                           plusw1	equ	0xFE3
  6818                           fsr1h	equ	0xFE2
  6819                           fsr1l	equ	0xFE1
  6820                           indf2	equ	0xFDF
  6821                           postinc2	equ	0xFDE
  6822                           postdec2	equ	0xFDD
  6823                           plusw2	equ	0xFDB
  6824                           fsr2h	equ	0xFDA
  6825                           fsr2l	equ	0xFD9
  6826                           status	equ	0xFD8
  6827                           
  6828 ;; *************** function _checkAA *****************
  6829 ;; Defined at:
  6830 ;;		line 39 in file "sensors.c"
  6831 ;; Parameters:    Size  Location     Type
  6832 ;;  sorted          2   45[COMRAM] PTR unsigned char 
  6833 ;;		 -> simulate@sorted(4), 
  6834 ;; Auto vars:     Size  Location     Type
  6835 ;;  V               2   49[COMRAM] int 
  6836 ;; Return value:  Size  Location     Type
  6837 ;;                  2   45[COMRAM] int 
  6838 ;; Registers used:
  6839 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6840 ;; Tracked objects:
  6841 ;;		On entry : 0/0
  6842 ;;		On exit  : 0/0
  6843 ;;		Unchanged: 0/0
  6844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6845 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6846 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6847 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6848 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6849 ;;Total ram usage:        6 bytes
  6850 ;; Hardware stack levels used:    1
  6851 ;; Hardware stack levels required when called:    4
  6852 ;; This function calls:
  6853 ;;		_checkV
  6854 ;;		_printV
  6855 ;;		i2_printf
  6856 ;; This function is called by:
  6857 ;;		_simulate
  6858 ;; This function uses a non-reentrant model
  6859 ;;
  6860                           
  6861                           	psect	text31
  6862  001F5E                     __ptext31:
  6863                           	opt stack 0
  6864  001F5E                     _checkAA:
  6865                           	opt stack 20
  6866                           
  6867                           ;sensors.c: 40: printf("AA:");
  6868                           
  6869                           ;incstack = 0
  6870  001F5E  0EE6               	movlw	low (STR_13+1)
  6871  001F60  6E0D               	movwf	i2printf@f,c
  6872  001F62  0EFF               	movlw	high (STR_13+1)
  6873  001F64  6E0E               	movwf	i2printf@f+1,c
  6874  001F66  EC5A  F004         	call	i2_printf	;wreg free
  6875                           
  6876                           ;sensors.c: 42: int V = checkV(2, 1.5 / 5 * 1023);
  6877  001F6A  0E01               	movlw	1
  6878  001F6C  6E26               	movwf	checkV@threshhold+1,c
  6879  001F6E  0E32               	movlw	50
  6880  001F70  6E25               	movwf	checkV@threshhold,c
  6881  001F72  0E02               	movlw	2
  6882  001F74  EC89  F00B         	call	_checkV
  6883  001F78  C025  F032         	movff	?_checkV,checkAA@V
  6884  001F7C  C026  F033         	movff	?_checkV+1,checkAA@V+1
  6885                           
  6886                           ;sensors.c: 43: printV(V);
  6887  001F80  C032  F023         	movff	checkAA@V,printV@charged
  6888  001F84  C033  F024         	movff	checkAA@V+1,printV@charged+1
  6889  001F88  EC45  F012         	call	_printV	;wreg free
  6890                           
  6891                           ;sensors.c: 44: switch (V) {
  6892  001F8C  D00D               	goto	i2l3997
  6893  001F8E                     i2l3993:
  6894                           
  6895                           ;sensors.c: 46: sorted[0]++;
  6896  001F8E  C02E  FFD9         	movff	checkAA@sorted,fsr2l
  6897  001F92  C02F  FFDA         	movff	checkAA@sorted+1,fsr2h
  6898  001F96  2ADF               	incf	indf2,f,c
  6899  001F98                     i2l3995:
  6900                           
  6901                           ;sensors.c: 48: sorted[3]++;
  6902  001F98  EE20 F003          	lfsr	2,3
  6903  001F9C  502E               	movf	checkAA@sorted,w,c
  6904  001F9E  26D9               	addwf	fsr2l,f,c
  6905  001FA0  502F               	movf	checkAA@sorted+1,w,c
  6906  001FA2  22DA               	addwfc	fsr2h,f,c
  6907  001FA4  2ADF               	incf	indf2,f,c
  6908                           
  6909                           ;sensors.c: 49: }
  6910  001FA6  D00F               	goto	i2l362
  6911  001FA8                     i2l3997:
  6912  001FA8  C032  F030         	movff	checkAA@V,??_checkAA
  6913  001FAC  C033  F031         	movff	checkAA@V+1,??_checkAA+1
  6914                           
  6915                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6916                           ; Switch size 1, requested type "space"
  6917                           ; Number of cases is 1, Range of values is 0 to 0
  6918                           ; switch strategies available:
  6919                           ; Name         Instructions Cycles
  6920                           ; simple_byte            4     3 (average)
  6921                           ;	Chosen strategy is simple_byte
  6922  001FB0  5031               	movf	??_checkAA+1,w,c
  6923  001FB2  0A00               	xorlw	0	; case 0
  6924  001FB4  A4D8               	btfss	status,2,c
  6925  001FB6  D007               	goto	i2l362
  6926                           
  6927                           ; Switch size 1, requested type "space"
  6928                           ; Number of cases is 2, Range of values is 0 to 1
  6929                           ; switch strategies available:
  6930                           ; Name         Instructions Cycles
  6931                           ; simple_byte            7     4 (average)
  6932                           ;	Chosen strategy is simple_byte
  6933  001FB8  5030               	movf	??_checkAA,w,c
  6934  001FBA  0A00               	xorlw	0	; case 0
  6935  001FBC  B4D8               	btfsc	status,2,c
  6936  001FBE  D7EC               	goto	i2l3995
  6937  001FC0  0A01               	xorlw	1	; case 1
  6938  001FC2  B4D8               	btfsc	status,2,c
  6939  001FC4  D7E4               	goto	i2l3993
  6940  001FC6                     i2l362:
  6941                           
  6942                           ;sensors.c: 50: return V;
  6943  001FC6  C032  F02E         	movff	checkAA@V,?_checkAA
  6944  001FCA  C033  F02F         	movff	checkAA@V+1,?_checkAA+1
  6945  001FCE  0012               	return		;funcret
  6946  001FD0                     __end_of_checkAA:
  6947                           	opt stack 0
  6948                           pclatu	equ	0xFFB
  6949                           pclath	equ	0xFFA
  6950                           tblptru	equ	0xFF8
  6951                           tblptrh	equ	0xFF7
  6952                           tblptrl	equ	0xFF6
  6953                           tablat	equ	0xFF5
  6954                           prodh	equ	0xFF4
  6955                           prodl	equ	0xFF3
  6956                           intcon	equ	0xFF2
  6957                           intcon2	equ	0xFF1
  6958                           intcon3	equ	0xFF0
  6959                           postinc0	equ	0xFEE
  6960                           fsr0h	equ	0xFEA
  6961                           fsr0l	equ	0xFE9
  6962                           wreg	equ	0xFE8
  6963                           postdec1	equ	0xFE5
  6964                           plusw1	equ	0xFE3
  6965                           fsr1h	equ	0xFE2
  6966                           fsr1l	equ	0xFE1
  6967                           indf2	equ	0xFDF
  6968                           postinc2	equ	0xFDE
  6969                           postdec2	equ	0xFDD
  6970                           plusw2	equ	0xFDB
  6971                           fsr2h	equ	0xFDA
  6972                           fsr2l	equ	0xFD9
  6973                           status	equ	0xFD8
  6974                           
  6975 ;; *************** function _check9 *****************
  6976 ;; Defined at:
  6977 ;;		line 68 in file "sensors.c"
  6978 ;; Parameters:    Size  Location     Type
  6979 ;;  sorted          2   45[COMRAM] PTR unsigned char 
  6980 ;;		 -> simulate@sorted(4), 
  6981 ;; Auto vars:     Size  Location     Type
  6982 ;;  V               2   49[COMRAM] int 
  6983 ;; Return value:  Size  Location     Type
  6984 ;;                  2   45[COMRAM] int 
  6985 ;; Registers used:
  6986 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6987 ;; Tracked objects:
  6988 ;;		On entry : 0/0
  6989 ;;		On exit  : 0/0
  6990 ;;		Unchanged: 0/0
  6991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6992 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6993 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6994 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6995 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6996 ;;Total ram usage:        6 bytes
  6997 ;; Hardware stack levels used:    1
  6998 ;; Hardware stack levels required when called:    4
  6999 ;; This function calls:
  7000 ;;		_checkV
  7001 ;;		_printV
  7002 ;;		i2_printf
  7003 ;; This function is called by:
  7004 ;;		_simulate
  7005 ;; This function uses a non-reentrant model
  7006 ;;
  7007                           
  7008                           	psect	text32
  7009  001EE8                     __ptext32:
  7010                           	opt stack 0
  7011  001EE8                     _check9:
  7012                           	opt stack 20
  7013                           
  7014                           ;sensors.c: 71: printf("9V:");
  7015                           
  7016                           ;incstack = 0
  7017  001EE8  0EF2               	movlw	low STR_5
  7018  001EEA  6E0D               	movwf	i2printf@f,c
  7019  001EEC  0EFF               	movlw	high STR_5
  7020  001EEE  6E0E               	movwf	i2printf@f+1,c
  7021  001EF0  EC5A  F004         	call	i2_printf	;wreg free
  7022                           
  7023                           ;sensors.c: 72: int V = checkV(5, 3.65 / 5 * 1023);
  7024  001EF4  0E02               	movlw	2
  7025  001EF6  6E26               	movwf	checkV@threshhold+1,c
  7026  001EF8  0EEA               	movlw	234
  7027  001EFA  6E25               	movwf	checkV@threshhold,c
  7028  001EFC  0E05               	movlw	5
  7029  001EFE  EC89  F00B         	call	_checkV
  7030  001F02  C025  F032         	movff	?_checkV,check9@V
  7031  001F06  C026  F033         	movff	?_checkV+1,check9@V+1
  7032                           
  7033                           ;sensors.c: 73: printV(V);
  7034  001F0A  C032  F023         	movff	check9@V,printV@charged
  7035  001F0E  C033  F024         	movff	check9@V+1,printV@charged+1
  7036  001F12  EC45  F012         	call	_printV	;wreg free
  7037                           
  7038                           ;sensors.c: 74: switch (V) {
  7039  001F16  D00F               	goto	i2l3967
  7040  001F18                     i2l3965:
  7041                           
  7042                           ;sensors.c: 76: sorted[2]++;
  7043  001F18  EE20 F002          	lfsr	2,2
  7044  001F1C  502E               	movf	check9@sorted,w,c
  7045  001F1E  26D9               	addwf	fsr2l,f,c
  7046  001F20  502F               	movf	check9@sorted+1,w,c
  7047  001F22  22DA               	addwfc	fsr2h,f,c
  7048  001F24  2ADF               	incf	indf2,f,c
  7049  001F26                     i2l375:
  7050                           
  7051                           ;sensors.c: 78: sorted[3]++;
  7052  001F26  EE20 F003          	lfsr	2,3
  7053  001F2A  502E               	movf	check9@sorted,w,c
  7054  001F2C  26D9               	addwf	fsr2l,f,c
  7055  001F2E  502F               	movf	check9@sorted+1,w,c
  7056  001F30  22DA               	addwfc	fsr2h,f,c
  7057  001F32  2ADF               	incf	indf2,f,c
  7058                           
  7059                           ;sensors.c: 79: }
  7060  001F34  D00F               	goto	i2l376
  7061  001F36                     i2l3967:
  7062  001F36  C032  F030         	movff	check9@V,??_check9
  7063  001F3A  C033  F031         	movff	check9@V+1,??_check9+1
  7064                           
  7065                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7066                           ; Switch size 1, requested type "space"
  7067                           ; Number of cases is 1, Range of values is 0 to 0
  7068                           ; switch strategies available:
  7069                           ; Name         Instructions Cycles
  7070                           ; simple_byte            4     3 (average)
  7071                           ;	Chosen strategy is simple_byte
  7072  001F3E  5031               	movf	??_check9+1,w,c
  7073  001F40  0A00               	xorlw	0	; case 0
  7074  001F42  A4D8               	btfss	status,2,c
  7075  001F44  D007               	goto	i2l376
  7076                           
  7077                           ; Switch size 1, requested type "space"
  7078                           ; Number of cases is 2, Range of values is 0 to 1
  7079                           ; switch strategies available:
  7080                           ; Name         Instructions Cycles
  7081                           ; simple_byte            7     4 (average)
  7082                           ;	Chosen strategy is simple_byte
  7083  001F46  5030               	movf	??_check9,w,c
  7084  001F48  0A00               	xorlw	0	; case 0
  7085  001F4A  B4D8               	btfsc	status,2,c
  7086  001F4C  D7EC               	goto	i2l375
  7087  001F4E  0A01               	xorlw	1	; case 1
  7088  001F50  B4D8               	btfsc	status,2,c
  7089  001F52  D7E2               	goto	i2l3965
  7090  001F54                     i2l376:
  7091                           
  7092                           ;sensors.c: 80: return V;
  7093  001F54  C032  F02E         	movff	check9@V,?_check9
  7094  001F58  C033  F02F         	movff	check9@V+1,?_check9+1
  7095  001F5C  0012               	return		;funcret
  7096  001F5E                     __end_of_check9:
  7097                           	opt stack 0
  7098                           pclatu	equ	0xFFB
  7099                           pclath	equ	0xFFA
  7100                           tblptru	equ	0xFF8
  7101                           tblptrh	equ	0xFF7
  7102                           tblptrl	equ	0xFF6
  7103                           tablat	equ	0xFF5
  7104                           prodh	equ	0xFF4
  7105                           prodl	equ	0xFF3
  7106                           intcon	equ	0xFF2
  7107                           intcon2	equ	0xFF1
  7108                           intcon3	equ	0xFF0
  7109                           postinc0	equ	0xFEE
  7110                           fsr0h	equ	0xFEA
  7111                           fsr0l	equ	0xFE9
  7112                           wreg	equ	0xFE8
  7113                           postdec1	equ	0xFE5
  7114                           plusw1	equ	0xFE3
  7115                           fsr1h	equ	0xFE2
  7116                           fsr1l	equ	0xFE1
  7117                           indf2	equ	0xFDF
  7118                           postinc2	equ	0xFDE
  7119                           postdec2	equ	0xFDD
  7120                           plusw2	equ	0xFDB
  7121                           fsr2h	equ	0xFDA
  7122                           fsr2l	equ	0xFD9
  7123                           status	equ	0xFD8
  7124                           
  7125 ;; *************** function _printV *****************
  7126 ;; Defined at:
  7127 ;;		line 28 in file "sensors.c"
  7128 ;; Parameters:    Size  Location     Type
  7129 ;;  charged         2   34[COMRAM] int 
  7130 ;; Auto vars:     Size  Location     Type
  7131 ;;		None
  7132 ;; Return value:  Size  Location     Type
  7133 ;;                  1    wreg      void 
  7134 ;; Registers used:
  7135 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7136 ;; Tracked objects:
  7137 ;;		On entry : 0/0
  7138 ;;		On exit  : 0/0
  7139 ;;		Unchanged: 0/0
  7140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7141 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7144 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7145 ;;Total ram usage:        2 bytes
  7146 ;; Hardware stack levels used:    1
  7147 ;; Hardware stack levels required when called:    3
  7148 ;; This function calls:
  7149 ;;		i2_printf
  7150 ;; This function is called by:
  7151 ;;		_checkAA
  7152 ;;		_checkC
  7153 ;;		_check9
  7154 ;; This function uses a non-reentrant model
  7155 ;;
  7156                           
  7157                           	psect	text33
  7158  00248A                     __ptext33:
  7159                           	opt stack 0
  7160  00248A                     _printV:
  7161                           	opt stack 20
  7162                           
  7163                           ;sensors.c: 31: if (charged < 0) {
  7164                           
  7165                           ;incstack = 0
  7166  00248A  AE24               	btfss	printV@charged+1,7,c
  7167  00248C  D007               	goto	i2l3487
  7168                           
  7169                           ;sensors.c: 32: printf("-1 ");
  7170  00248E  0EEA               	movlw	low STR_38
  7171  002490  6E0D               	movwf	i2printf@f,c
  7172  002492  0EFF               	movlw	high STR_38
  7173  002494  6E0E               	movwf	i2printf@f+1,c
  7174  002496  EC5A  F004         	call	i2_printf	;wreg free
  7175                           
  7176                           ;sensors.c: 33: } else {
  7177  00249A  0012               	return	
  7178  00249C                     i2l3487:
  7179                           
  7180                           ;sensors.c: 34: printf(" %d ", charged);
  7181  00249C  0EE0               	movlw	low STR_39
  7182  00249E  6E0D               	movwf	i2printf@f,c
  7183  0024A0  0EFF               	movlw	high STR_39
  7184  0024A2  6E0E               	movwf	i2printf@f+1,c
  7185  0024A4  C023  F00F         	movff	printV@charged,?i2_printf+2
  7186  0024A8  C024  F010         	movff	printV@charged+1,?i2_printf+3
  7187  0024AC  EC5A  F004         	call	i2_printf	;wreg free
  7188  0024B0  0012               	return	
  7189  0024B2                     __end_of_printV:
  7190                           	opt stack 0
  7191                           pclatu	equ	0xFFB
  7192                           pclath	equ	0xFFA
  7193                           tblptru	equ	0xFF8
  7194                           tblptrh	equ	0xFF7
  7195                           tblptrl	equ	0xFF6
  7196                           tablat	equ	0xFF5
  7197                           prodh	equ	0xFF4
  7198                           prodl	equ	0xFF3
  7199                           intcon	equ	0xFF2
  7200                           intcon2	equ	0xFF1
  7201                           intcon3	equ	0xFF0
  7202                           postinc0	equ	0xFEE
  7203                           fsr0h	equ	0xFEA
  7204                           fsr0l	equ	0xFE9
  7205                           wreg	equ	0xFE8
  7206                           postdec1	equ	0xFE5
  7207                           plusw1	equ	0xFE3
  7208                           fsr1h	equ	0xFE2
  7209                           fsr1l	equ	0xFE1
  7210                           indf2	equ	0xFDF
  7211                           postinc2	equ	0xFDE
  7212                           postdec2	equ	0xFDD
  7213                           plusw2	equ	0xFDB
  7214                           fsr2h	equ	0xFDA
  7215                           fsr2l	equ	0xFD9
  7216                           status	equ	0xFD8
  7217                           
  7218 ;; *************** function _checkV *****************
  7219 ;; Defined at:
  7220 ;;		line 13 in file "sensors.c"
  7221 ;; Parameters:    Size  Location     Type
  7222 ;;  channel         1    wreg     unsigned char 
  7223 ;;  threshhold      2   36[COMRAM] int 
  7224 ;; Auto vars:     Size  Location     Type
  7225 ;;  channel         1   42[COMRAM] unsigned char 
  7226 ;;  voltage         2   43[COMRAM] int 
  7227 ;;  tmp             2   40[COMRAM] int 
  7228 ;; Return value:  Size  Location     Type
  7229 ;;                  2   36[COMRAM] int 
  7230 ;; Registers used:
  7231 ;;		wreg, status,2, status,0, cstack
  7232 ;; Tracked objects:
  7233 ;;		On entry : 0/0
  7234 ;;		On exit  : 0/0
  7235 ;;		Unchanged: 0/0
  7236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7237 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7238 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7239 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7240 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7241 ;;Total ram usage:        9 bytes
  7242 ;; Hardware stack levels used:    1
  7243 ;; Hardware stack levels required when called:    2
  7244 ;; This function calls:
  7245 ;;		_AD
  7246 ;;		___awtoft
  7247 ;;		___ftge
  7248 ;;		___ftmul
  7249 ;; This function is called by:
  7250 ;;		_checkAA
  7251 ;;		_checkC
  7252 ;;		_check9
  7253 ;; This function uses a non-reentrant model
  7254 ;;
  7255                           
  7256                           	psect	text34
  7257  001712                     __ptext34:
  7258                           	opt stack 0
  7259  001712                     _checkV:
  7260                           	opt stack 21
  7261                           
  7262                           ;incstack = 0
  7263                           ;checkV@channel stored from wreg
  7264  001712  6E2B               	movwf	checkV@channel,c
  7265                           
  7266                           ;sensors.c: 15: int voltage = AD(channel);
  7267  001714  502B               	movf	checkV@channel,w,c
  7268  001716  EC30  F012         	call	_AD
  7269  00171A  C001  F02C         	movff	?_AD,checkV@voltage
  7270  00171E  C002  F02D         	movff	?_AD+1,checkV@voltage+1
  7271                           
  7272                           ;sensors.c: 16: if (voltage < 20) return -1;
  7273  001722  BE2D               	btfsc	checkV@voltage+1,7,c
  7274  001724  D006               	goto	i2l3461
  7275  001726  502D               	movf	checkV@voltage+1,w,c
  7276  001728  E107               	bnz	i2l3463
  7277  00172A  0E14               	movlw	20
  7278  00172C  5C2C               	subwf	checkV@voltage,w,c
  7279  00172E  B0D8               	btfsc	status,0,c
  7280  001730  D003               	goto	i2l3463
  7281  001732                     i2l3461:
  7282  001732  6825               	setf	?_checkV,c
  7283  001734  6826               	setf	?_checkV+1,c
  7284  001736  0012               	return	
  7285  001738                     i2l3463:
  7286                           
  7287                           ;sensors.c: 17: _delay((unsigned long)((1)*(8000000/4000.0)));
  7288  001738  0E03               	movlw	3
  7289  00173A  6E27               	movwf	??_checkV& (0+255),c
  7290  00173C  0E98               	movlw	152
  7291  00173E                     i2u358_47:
  7292  00173E  2EE8               	decfsz	wreg,f,c
  7293  001740  D7FE               	bra	i2u358_47
  7294  001742  2E27               	decfsz	??_checkV& (0+255),f,c
  7295  001744  D7FC               	bra	i2u358_47
  7296                           
  7297                           ;sensors.c: 18: int tmp = AD(channel);
  7298  001746  502B               	movf	checkV@channel,w,c
  7299  001748  EC30  F012         	call	_AD
  7300  00174C  D00E               	goto	L2
  7301  00174E                     i2l349:
  7302                           
  7303                           ;sensors.c: 20: voltage = tmp;
  7304  00174E  C029  F02C         	movff	checkV@tmp,checkV@voltage
  7305  001752  C02A  F02D         	movff	checkV@tmp+1,checkV@voltage+1
  7306                           
  7307                           ;sensors.c: 21: _delay((unsigned long)((1)*(8000000/4000.0)));
  7308  001756  0E03               	movlw	3
  7309  001758  6E27               	movwf	??_checkV& (0+255),c
  7310  00175A  0E98               	movlw	152
  7311  00175C                     i2u359_47:
  7312  00175C  2EE8               	decfsz	wreg,f,c
  7313  00175E  D7FE               	bra	i2u359_47
  7314  001760  2E27               	decfsz	??_checkV& (0+255),f,c
  7315  001762  D7FC               	bra	i2u359_47
  7316                           
  7317                           ;sensors.c: 22: tmp = AD(channel);
  7318  001764  502B               	movf	checkV@channel,w,c
  7319  001766  EC30  F012         	call	_AD
  7320  00176A                     L2:
  7321  00176A  C001  F029         	movff	?_AD,checkV@tmp
  7322  00176E  C002  F02A         	movff	?_AD+1,checkV@tmp+1
  7323  001772  C02C  F027         	movff	checkV@voltage,??_checkV
  7324  001776  C02D  F028         	movff	checkV@voltage+1,??_checkV+1
  7325  00177A  1E27               	comf	??_checkV,f,c
  7326  00177C  1E28               	comf	??_checkV+1,f,c
  7327  00177E  4A27               	infsnz	??_checkV,f,c
  7328  001780  2A28               	incf	??_checkV+1,f,c
  7329  001782  5029               	movf	checkV@tmp,w,c
  7330  001784  2627               	addwf	??_checkV,f,c
  7331  001786  502A               	movf	checkV@tmp+1,w,c
  7332  001788  2228               	addwfc	??_checkV+1,f,c
  7333  00178A  BE28               	btfsc	??_checkV+1,7,c
  7334  00178C  D006               	goto	i2l3473
  7335  00178E  5028               	movf	??_checkV+1,w,c
  7336  001790  E1DE               	bnz	i2l349
  7337  001792  0E06               	movlw	6
  7338  001794  5C27               	subwf	??_checkV,w,c
  7339  001796  B0D8               	btfsc	status,0,c
  7340  001798  D7DA               	goto	i2l349
  7341  00179A                     i2l3473:
  7342                           
  7343                           ;sensors.c: 23: };
  7344                           ;sensors.c: 24: if (voltage > 0.85 * threshhold)return 1;
  7345  00179A  0E9A               	movlw	154
  7346  00179C  6E10               	movwf	___ftmul@f2,c
  7347  00179E  0E59               	movlw	89
  7348  0017A0  6E11               	movwf	___ftmul@f2+1,c
  7349  0017A2  0E3F               	movlw	63
  7350  0017A4  6E12               	movwf	___ftmul@f2+2,c
  7351  0017A6  C025  F009         	movff	checkV@threshhold,___awtoft@c
  7352  0017AA  C026  F00A         	movff	checkV@threshhold+1,___awtoft@c+1
  7353  0017AE  ECB1  F011         	call	___awtoft	;wreg free
  7354  0017B2  C009  F00D         	movff	?___awtoft,___ftmul@f1
  7355  0017B6  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  7356  0017BA  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  7357  0017BE  EC96  F00A         	call	___ftmul	;wreg free
  7358  0017C2  C00D  F01C         	movff	?___ftmul,___ftge@ff1
  7359  0017C6  C00E  F01D         	movff	?___ftmul+1,___ftge@ff1+1
  7360  0017CA  C00F  F01E         	movff	?___ftmul+2,___ftge@ff1+2
  7361  0017CE  C02C  F009         	movff	checkV@voltage,___awtoft@c
  7362  0017D2  C02D  F00A         	movff	checkV@voltage+1,___awtoft@c+1
  7363  0017D6  ECB1  F011         	call	___awtoft	;wreg free
  7364  0017DA  C009  F01F         	movff	?___awtoft,___ftge@ff2
  7365  0017DE  C00A  F020         	movff	?___awtoft+1,___ftge@ff2+1
  7366  0017E2  C00B  F021         	movff	?___awtoft+2,___ftge@ff2+2
  7367  0017E6  EC24  F00D         	call	___ftge	;wreg free
  7368  0017EA  B0D8               	btfsc	status,0,c
  7369  0017EC  D005               	goto	i2l3479
  7370  0017EE  0E00               	movlw	0
  7371  0017F0  6E26               	movwf	?_checkV+1,c
  7372  0017F2  0E01               	movlw	1
  7373  0017F4  6E25               	movwf	?_checkV,c
  7374  0017F6  0012               	return	
  7375  0017F8                     i2l3479:
  7376                           
  7377                           ;sensors.c: 25: return 0;
  7378  0017F8  0E00               	movlw	0
  7379  0017FA  6E26               	movwf	?_checkV+1,c
  7380  0017FC  0E00               	movlw	0
  7381  0017FE  6E25               	movwf	?_checkV,c
  7382  001800  0012               	return	
  7383  001802                     __end_of_checkV:
  7384                           	opt stack 0
  7385                           pclatu	equ	0xFFB
  7386                           pclath	equ	0xFFA
  7387                           tblptru	equ	0xFF8
  7388                           tblptrh	equ	0xFF7
  7389                           tblptrl	equ	0xFF6
  7390                           tablat	equ	0xFF5
  7391                           prodh	equ	0xFF4
  7392                           prodl	equ	0xFF3
  7393                           intcon	equ	0xFF2
  7394                           intcon2	equ	0xFF1
  7395                           intcon3	equ	0xFF0
  7396                           postinc0	equ	0xFEE
  7397                           fsr0h	equ	0xFEA
  7398                           fsr0l	equ	0xFE9
  7399                           wreg	equ	0xFE8
  7400                           postdec1	equ	0xFE5
  7401                           plusw1	equ	0xFE3
  7402                           fsr1h	equ	0xFE2
  7403                           fsr1l	equ	0xFE1
  7404                           indf2	equ	0xFDF
  7405                           postinc2	equ	0xFDE
  7406                           postdec2	equ	0xFDD
  7407                           plusw2	equ	0xFDB
  7408                           fsr2h	equ	0xFDA
  7409                           fsr2l	equ	0xFD9
  7410                           status	equ	0xFD8
  7411                           
  7412 ;; *************** function ___ftmul *****************
  7413 ;; Defined at:
  7414 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  7415 ;; Parameters:    Size  Location     Type
  7416 ;;  f1              3   12[COMRAM] float 
  7417 ;;  f2              3   15[COMRAM] float 
  7418 ;; Auto vars:     Size  Location     Type
  7419 ;;  f3_as_produc    3   22[COMRAM] unsigned um
  7420 ;;  sign            1   26[COMRAM] unsigned char 
  7421 ;;  cntr            1   25[COMRAM] unsigned char 
  7422 ;;  exp             1   21[COMRAM] unsigned char 
  7423 ;; Return value:  Size  Location     Type
  7424 ;;                  3   12[COMRAM] float 
  7425 ;; Registers used:
  7426 ;;		wreg, status,2, status,0, cstack
  7427 ;; Tracked objects:
  7428 ;;		On entry : 0/0
  7429 ;;		On exit  : 0/0
  7430 ;;		Unchanged: 0/0
  7431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7432 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7433 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7434 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7435 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7436 ;;Total ram usage:       15 bytes
  7437 ;; Hardware stack levels used:    1
  7438 ;; Hardware stack levels required when called:    1
  7439 ;; This function calls:
  7440 ;;		___ftpack
  7441 ;; This function is called by:
  7442 ;;		_checkV
  7443 ;; This function uses a non-reentrant model
  7444 ;;
  7445                           
  7446                           	psect	text35
  7447  00152C                     __ptext35:
  7448                           	opt stack 0
  7449  00152C                     ___ftmul:
  7450                           	opt stack 21
  7451                           
  7452                           ;incstack = 0
  7453  00152C  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
  7454  001530  6A14               	clrf	(??___ftmul+1)& (0+255),c
  7455  001532  6A15               	clrf	(??___ftmul+2)& (0+255),c
  7456  001534  340E               	rlcf	___ftmul@f1+1,w,c
  7457  001536  3613               	rlcf	??___ftmul& (0+255),f,c
  7458  001538  E301               	bnc	u191_41
  7459  00153A  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  7460  00153C                     u191_41:
  7461  00153C  5013               	movf	??___ftmul,w,c
  7462  00153E  6E16               	movwf	___ftmul@exp,c
  7463  001540  5016               	movf	___ftmul@exp,w,c
  7464  001542  A4D8               	btfss	status,2,c
  7465  001544  D007               	goto	i2l3097
  7466  001546  0E00               	movlw	0
  7467  001548  6E0D               	movwf	?___ftmul,c
  7468  00154A  0E00               	movlw	0
  7469  00154C  6E0E               	movwf	?___ftmul+1,c
  7470  00154E  0E00               	movlw	0
  7471  001550  6E0F               	movwf	?___ftmul+2,c
  7472  001552  0012               	return	
  7473  001554                     i2l3097:
  7474  001554  C012  F013         	movff	___ftmul@f2+2,??___ftmul
  7475  001558  6A14               	clrf	(??___ftmul+1)& (0+255),c
  7476  00155A  6A15               	clrf	(??___ftmul+2)& (0+255),c
  7477  00155C  3411               	rlcf	___ftmul@f2+1,w,c
  7478  00155E  3613               	rlcf	??___ftmul& (0+255),f,c
  7479  001560  E301               	bnc	u193_41
  7480  001562  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  7481  001564                     u193_41:
  7482  001564  5013               	movf	??___ftmul,w,c
  7483  001566  6E1B               	movwf	___ftmul@sign,c
  7484  001568  501B               	movf	___ftmul@sign,w,c
  7485  00156A  A4D8               	btfss	status,2,c
  7486  00156C  D007               	goto	i2l3103
  7487  00156E  0E00               	movlw	0
  7488  001570  6E0D               	movwf	?___ftmul,c
  7489  001572  0E00               	movlw	0
  7490  001574  6E0E               	movwf	?___ftmul+1,c
  7491  001576  0E00               	movlw	0
  7492  001578  6E0F               	movwf	?___ftmul+2,c
  7493  00157A  0012               	return	
  7494  00157C                     i2l3103:
  7495  00157C  501B               	movf	___ftmul@sign,w,c
  7496  00157E  0F7B               	addlw	123
  7497  001580  2616               	addwf	___ftmul@exp,f,c
  7498  001582  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
  7499  001586  5012               	movf	___ftmul@f2+2,w,c
  7500  001588  1A1B               	xorwf	___ftmul@sign,f,c
  7501  00158A  0E80               	movlw	128
  7502  00158C  161B               	andwf	___ftmul@sign,f,c
  7503  00158E  8E0E               	bsf	___ftmul@f1+1,7,c
  7504  001590  8E11               	bsf	___ftmul@f2+1,7,c
  7505  001592  0EFF               	movlw	255
  7506  001594  1610               	andwf	___ftmul@f2,f,c
  7507  001596  0EFF               	movlw	255
  7508  001598  1611               	andwf	___ftmul@f2+1,f,c
  7509  00159A  0E00               	movlw	0
  7510  00159C  1612               	andwf	___ftmul@f2+2,f,c
  7511  00159E  0E00               	movlw	0
  7512  0015A0  6E17               	movwf	___ftmul@f3_as_product,c
  7513  0015A2  0E00               	movlw	0
  7514  0015A4  6E18               	movwf	___ftmul@f3_as_product+1,c
  7515  0015A6  0E00               	movlw	0
  7516  0015A8  6E19               	movwf	___ftmul@f3_as_product+2,c
  7517  0015AA  0E07               	movlw	7
  7518  0015AC  6E1A               	movwf	___ftmul@cntr,c
  7519  0015AE                     i2l3117:
  7520  0015AE  A00D               	btfss	___ftmul@f1,0,c
  7521  0015B0  D006               	goto	i2l3121
  7522  0015B2  5010               	movf	___ftmul@f2,w,c
  7523  0015B4  2617               	addwf	___ftmul@f3_as_product,f,c
  7524  0015B6  5011               	movf	___ftmul@f2+1,w,c
  7525  0015B8  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  7526  0015BA  5012               	movf	___ftmul@f2+2,w,c
  7527  0015BC  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  7528  0015BE                     i2l3121:
  7529  0015BE  90D8               	bcf	status,0,c
  7530  0015C0  320F               	rrcf	___ftmul@f1+2,f,c
  7531  0015C2  320E               	rrcf	___ftmul@f1+1,f,c
  7532  0015C4  320D               	rrcf	___ftmul@f1,f,c
  7533  0015C6  90D8               	bcf	status,0,c
  7534  0015C8  3610               	rlcf	___ftmul@f2,f,c
  7535  0015CA  3611               	rlcf	___ftmul@f2+1,f,c
  7536  0015CC  3612               	rlcf	___ftmul@f2+2,f,c
  7537  0015CE  2E1A               	decfsz	___ftmul@cntr,f,c
  7538  0015D0  D7EE               	goto	i2l3117
  7539  0015D2  0E09               	movlw	9
  7540  0015D4  6E1A               	movwf	___ftmul@cntr,c
  7541  0015D6                     i2l3127:
  7542  0015D6  A00D               	btfss	___ftmul@f1,0,c
  7543  0015D8  D006               	goto	i2l3131
  7544  0015DA  5010               	movf	___ftmul@f2,w,c
  7545  0015DC  2617               	addwf	___ftmul@f3_as_product,f,c
  7546  0015DE  5011               	movf	___ftmul@f2+1,w,c
  7547  0015E0  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  7548  0015E2  5012               	movf	___ftmul@f2+2,w,c
  7549  0015E4  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  7550  0015E6                     i2l3131:
  7551  0015E6  90D8               	bcf	status,0,c
  7552  0015E8  320F               	rrcf	___ftmul@f1+2,f,c
  7553  0015EA  320E               	rrcf	___ftmul@f1+1,f,c
  7554  0015EC  320D               	rrcf	___ftmul@f1,f,c
  7555  0015EE  90D8               	bcf	status,0,c
  7556  0015F0  3219               	rrcf	___ftmul@f3_as_product+2,f,c
  7557  0015F2  3218               	rrcf	___ftmul@f3_as_product+1,f,c
  7558  0015F4  3217               	rrcf	___ftmul@f3_as_product,f,c
  7559  0015F6  2E1A               	decfsz	___ftmul@cntr,f,c
  7560  0015F8  D7EE               	goto	i2l3127
  7561  0015FA  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  7562  0015FE  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  7563  001602  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  7564  001606  C016  F004         	movff	___ftmul@exp,___ftpack@exp
  7565  00160A  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
  7566  00160E  ECCD  F00C         	call	___ftpack	;wreg free
  7567  001612  C001  F00D         	movff	?___ftpack,?___ftmul
  7568  001616  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
  7569  00161A  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
  7570  00161E  0012               	return	
  7571  001620                     __end_of___ftmul:
  7572                           	opt stack 0
  7573                           pclatu	equ	0xFFB
  7574                           pclath	equ	0xFFA
  7575                           tblptru	equ	0xFF8
  7576                           tblptrh	equ	0xFF7
  7577                           tblptrl	equ	0xFF6
  7578                           tablat	equ	0xFF5
  7579                           prodh	equ	0xFF4
  7580                           prodl	equ	0xFF3
  7581                           intcon	equ	0xFF2
  7582                           intcon2	equ	0xFF1
  7583                           intcon3	equ	0xFF0
  7584                           postinc0	equ	0xFEE
  7585                           fsr0h	equ	0xFEA
  7586                           fsr0l	equ	0xFE9
  7587                           wreg	equ	0xFE8
  7588                           postdec1	equ	0xFE5
  7589                           plusw1	equ	0xFE3
  7590                           fsr1h	equ	0xFE2
  7591                           fsr1l	equ	0xFE1
  7592                           indf2	equ	0xFDF
  7593                           postinc2	equ	0xFDE
  7594                           postdec2	equ	0xFDD
  7595                           plusw2	equ	0xFDB
  7596                           fsr2h	equ	0xFDA
  7597                           fsr2l	equ	0xFD9
  7598                           status	equ	0xFD8
  7599                           
  7600 ;; *************** function ___ftge *****************
  7601 ;; Defined at:
  7602 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
  7603 ;; Parameters:    Size  Location     Type
  7604 ;;  ff1             3   27[COMRAM] float 
  7605 ;;  ff2             3   30[COMRAM] float 
  7606 ;; Auto vars:     Size  Location     Type
  7607 ;;		None
  7608 ;; Return value:  Size  Location     Type
  7609 ;;		None               void
  7610 ;; Registers used:
  7611 ;;		wreg, status,2, status,0
  7612 ;; Tracked objects:
  7613 ;;		On entry : 0/0
  7614 ;;		On exit  : 0/0
  7615 ;;		Unchanged: 0/0
  7616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7617 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7619 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7620 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7621 ;;Total ram usage:        9 bytes
  7622 ;; Hardware stack levels used:    1
  7623 ;; This function calls:
  7624 ;;		Nothing
  7625 ;; This function is called by:
  7626 ;;		_checkV
  7627 ;; This function uses a non-reentrant model
  7628 ;;
  7629                           
  7630                           	psect	text36
  7631  001A48                     __ptext36:
  7632                           	opt stack 0
  7633  001A48                     ___ftge:
  7634                           	opt stack 22
  7635                           
  7636                           ;incstack = 0
  7637  001A48  AE1E               	btfss	___ftge@ff1+2,7,c
  7638  001A4A  D016               	goto	i2l3199
  7639  001A4C  C01C  F022         	movff	___ftge@ff1,??___ftge
  7640  001A50  C01D  F023         	movff	___ftge@ff1+1,??___ftge+1
  7641  001A54  C01E  F024         	movff	___ftge@ff1+2,??___ftge+2
  7642  001A58  1E22               	comf	??___ftge,f,c
  7643  001A5A  1E23               	comf	??___ftge+1,f,c
  7644  001A5C  1E24               	comf	??___ftge+2,f,c
  7645  001A5E  2A22               	incf	??___ftge,f,c
  7646  001A60  0E00               	movlw	0
  7647  001A62  2223               	addwfc	??___ftge+1,f,c
  7648  001A64  2224               	addwfc	??___ftge+2,f,c
  7649  001A66  0E00               	movlw	0
  7650  001A68  2422               	addwf	??___ftge,w,c
  7651  001A6A  6E1C               	movwf	___ftge@ff1,c
  7652  001A6C  0E00               	movlw	0
  7653  001A6E  2023               	addwfc	??___ftge+1,w,c
  7654  001A70  6E1D               	movwf	___ftge@ff1+1,c
  7655  001A72  0E80               	movlw	128
  7656  001A74  2024               	addwfc	??___ftge+2,w,c
  7657  001A76  6E1E               	movwf	___ftge@ff1+2,c
  7658  001A78                     i2l3199:
  7659  001A78  AE21               	btfss	___ftge@ff2+2,7,c
  7660  001A7A  D016               	goto	i2l3203
  7661  001A7C  C01F  F022         	movff	___ftge@ff2,??___ftge
  7662  001A80  C020  F023         	movff	___ftge@ff2+1,??___ftge+1
  7663  001A84  C021  F024         	movff	___ftge@ff2+2,??___ftge+2
  7664  001A88  1E22               	comf	??___ftge,f,c
  7665  001A8A  1E23               	comf	??___ftge+1,f,c
  7666  001A8C  1E24               	comf	??___ftge+2,f,c
  7667  001A8E  2A22               	incf	??___ftge,f,c
  7668  001A90  0E00               	movlw	0
  7669  001A92  2223               	addwfc	??___ftge+1,f,c
  7670  001A94  2224               	addwfc	??___ftge+2,f,c
  7671  001A96  0E00               	movlw	0
  7672  001A98  2422               	addwf	??___ftge,w,c
  7673  001A9A  6E1F               	movwf	___ftge@ff2,c
  7674  001A9C  0E00               	movlw	0
  7675  001A9E  2023               	addwfc	??___ftge+1,w,c
  7676  001AA0  6E20               	movwf	___ftge@ff2+1,c
  7677  001AA2  0E80               	movlw	128
  7678  001AA4  2024               	addwfc	??___ftge+2,w,c
  7679  001AA6  6E21               	movwf	___ftge@ff2+2,c
  7680  001AA8                     i2l3203:
  7681  001AA8  0E00               	movlw	0
  7682  001AAA  1A1C               	xorwf	___ftge@ff1,f,c
  7683  001AAC  0E00               	movlw	0
  7684  001AAE  1A1D               	xorwf	___ftge@ff1+1,f,c
  7685  001AB0  0E80               	movlw	128
  7686  001AB2  1A1E               	xorwf	___ftge@ff1+2,f,c
  7687  001AB4  0E00               	movlw	0
  7688  001AB6  1A1F               	xorwf	___ftge@ff2,f,c
  7689  001AB8  0E00               	movlw	0
  7690  001ABA  1A20               	xorwf	___ftge@ff2+1,f,c
  7691  001ABC  0E80               	movlw	128
  7692  001ABE  1A21               	xorwf	___ftge@ff2+2,f,c
  7693  001AC0  501F               	movf	___ftge@ff2,w,c
  7694  001AC2  5C1C               	subwf	___ftge@ff1,w,c
  7695  001AC4  5020               	movf	___ftge@ff2+1,w,c
  7696  001AC6  581D               	subwfb	___ftge@ff1+1,w,c
  7697  001AC8  5021               	movf	___ftge@ff2+2,w,c
  7698  001ACA  581E               	subwfb	___ftge@ff1+2,w,c
  7699  001ACC  B0D8               	btfsc	status,0,c
  7700  001ACE  D002               	goto	i2l3209
  7701  001AD0  90D8               	bcf	status,0,c
  7702  001AD2  0012               	return	
  7703  001AD4                     i2l3209:
  7704  001AD4  80D8               	bsf	status,0,c
  7705  001AD6  0012               	return	
  7706  001AD8                     __end_of___ftge:
  7707                           	opt stack 0
  7708                           pclatu	equ	0xFFB
  7709                           pclath	equ	0xFFA
  7710                           tblptru	equ	0xFF8
  7711                           tblptrh	equ	0xFF7
  7712                           tblptrl	equ	0xFF6
  7713                           tablat	equ	0xFF5
  7714                           prodh	equ	0xFF4
  7715                           prodl	equ	0xFF3
  7716                           intcon	equ	0xFF2
  7717                           intcon2	equ	0xFF1
  7718                           intcon3	equ	0xFF0
  7719                           postinc0	equ	0xFEE
  7720                           fsr0h	equ	0xFEA
  7721                           fsr0l	equ	0xFE9
  7722                           wreg	equ	0xFE8
  7723                           postdec1	equ	0xFE5
  7724                           plusw1	equ	0xFE3
  7725                           fsr1h	equ	0xFE2
  7726                           fsr1l	equ	0xFE1
  7727                           indf2	equ	0xFDF
  7728                           postinc2	equ	0xFDE
  7729                           postdec2	equ	0xFDD
  7730                           plusw2	equ	0xFDB
  7731                           fsr2h	equ	0xFDA
  7732                           fsr2l	equ	0xFD9
  7733                           status	equ	0xFD8
  7734                           
  7735 ;; *************** function ___awtoft *****************
  7736 ;; Defined at:
  7737 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awtoft.c"
  7738 ;; Parameters:    Size  Location     Type
  7739 ;;  c               2    8[COMRAM] int 
  7740 ;; Auto vars:     Size  Location     Type
  7741 ;;  sign            1   11[COMRAM] unsigned char 
  7742 ;; Return value:  Size  Location     Type
  7743 ;;                  3    8[COMRAM] float 
  7744 ;; Registers used:
  7745 ;;		wreg, status,2, status,0, cstack
  7746 ;; Tracked objects:
  7747 ;;		On entry : 0/0
  7748 ;;		On exit  : 0/0
  7749 ;;		Unchanged: 0/0
  7750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7751 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7752 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7754 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7755 ;;Total ram usage:        4 bytes
  7756 ;; Hardware stack levels used:    1
  7757 ;; Hardware stack levels required when called:    1
  7758 ;; This function calls:
  7759 ;;		___ftpack
  7760 ;; This function is called by:
  7761 ;;		_checkV
  7762 ;; This function uses a non-reentrant model
  7763 ;;
  7764                           
  7765                           	psect	text37
  7766  002362                     __ptext37:
  7767                           	opt stack 0
  7768  002362                     ___awtoft:
  7769                           	opt stack 21
  7770                           
  7771                           ;incstack = 0
  7772  002362  0E00               	movlw	0
  7773  002364  6E0C               	movwf	___awtoft@sign,c
  7774  002366  AE0A               	btfss	___awtoft@c+1,7,c
  7775  002368  D006               	goto	i2l3191
  7776  00236A  6C09               	negf	___awtoft@c,c
  7777  00236C  1E0A               	comf	___awtoft@c+1,f,c
  7778  00236E  B0D8               	btfsc	status,0,c
  7779  002370  2A0A               	incf	___awtoft@c+1,f,c
  7780  002372  0E01               	movlw	1
  7781  002374  6E0C               	movwf	___awtoft@sign,c
  7782  002376                     i2l3191:
  7783  002376  C009  F001         	movff	___awtoft@c,___ftpack@arg
  7784  00237A  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  7785  00237E  6A03               	clrf	___ftpack@arg+2,c
  7786  002380  0E8E               	movlw	142
  7787  002382  6E04               	movwf	___ftpack@exp,c
  7788  002384  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  7789  002388  ECCD  F00C         	call	___ftpack	;wreg free
  7790  00238C  C001  F009         	movff	?___ftpack,?___awtoft
  7791  002390  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  7792  002394  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  7793  002398  0012               	return	
  7794  00239A                     __end_of___awtoft:
  7795                           	opt stack 0
  7796                           pclatu	equ	0xFFB
  7797                           pclath	equ	0xFFA
  7798                           tblptru	equ	0xFF8
  7799                           tblptrh	equ	0xFF7
  7800                           tblptrl	equ	0xFF6
  7801                           tablat	equ	0xFF5
  7802                           prodh	equ	0xFF4
  7803                           prodl	equ	0xFF3
  7804                           intcon	equ	0xFF2
  7805                           intcon2	equ	0xFF1
  7806                           intcon3	equ	0xFF0
  7807                           postinc0	equ	0xFEE
  7808                           fsr0h	equ	0xFEA
  7809                           fsr0l	equ	0xFE9
  7810                           wreg	equ	0xFE8
  7811                           postdec1	equ	0xFE5
  7812                           plusw1	equ	0xFE3
  7813                           fsr1h	equ	0xFE2
  7814                           fsr1l	equ	0xFE1
  7815                           indf2	equ	0xFDF
  7816                           postinc2	equ	0xFDE
  7817                           postdec2	equ	0xFDD
  7818                           plusw2	equ	0xFDB
  7819                           fsr2h	equ	0xFDA
  7820                           fsr2l	equ	0xFD9
  7821                           status	equ	0xFD8
  7822                           
  7823 ;; *************** function ___ftpack *****************
  7824 ;; Defined at:
  7825 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  7826 ;; Parameters:    Size  Location     Type
  7827 ;;  arg             3    0[COMRAM] unsigned um
  7828 ;;  exp             1    3[COMRAM] unsigned char 
  7829 ;;  sign            1    4[COMRAM] unsigned char 
  7830 ;; Auto vars:     Size  Location     Type
  7831 ;;		None
  7832 ;; Return value:  Size  Location     Type
  7833 ;;                  3    0[COMRAM] float 
  7834 ;; Registers used:
  7835 ;;		wreg, status,2, status,0
  7836 ;; Tracked objects:
  7837 ;;		On entry : 0/0
  7838 ;;		On exit  : 0/0
  7839 ;;		Unchanged: 0/0
  7840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7841 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7843 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7844 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7845 ;;Total ram usage:        8 bytes
  7846 ;; Hardware stack levels used:    1
  7847 ;; This function calls:
  7848 ;;		Nothing
  7849 ;; This function is called by:
  7850 ;;		___awtoft
  7851 ;;		___ftmul
  7852 ;; This function uses a non-reentrant model
  7853 ;;
  7854                           
  7855                           	psect	text38
  7856  00199A                     __ptext38:
  7857                           	opt stack 0
  7858  00199A                     ___ftpack:
  7859                           	opt stack 21
  7860                           
  7861                           ;incstack = 0
  7862  00199A  5004               	movf	___ftpack@exp,w,c
  7863  00199C  B4D8               	btfsc	status,2,c
  7864  00199E  D005               	goto	i2l2967
  7865  0019A0  5001               	movf	___ftpack@arg,w,c
  7866  0019A2  1002               	iorwf	___ftpack@arg+1,w,c
  7867  0019A4  1003               	iorwf	___ftpack@arg+2,w,c
  7868  0019A6  A4D8               	btfss	status,2,c
  7869  0019A8  D00C               	goto	i2l2973
  7870  0019AA                     i2l2967:
  7871  0019AA  0E00               	movlw	0
  7872  0019AC  6E01               	movwf	?___ftpack,c
  7873  0019AE  0E00               	movlw	0
  7874  0019B0  6E02               	movwf	?___ftpack+1,c
  7875  0019B2  0E00               	movlw	0
  7876  0019B4  6E03               	movwf	?___ftpack+2,c
  7877  0019B6  0012               	return	
  7878  0019B8                     i2l2971:
  7879  0019B8  2A04               	incf	___ftpack@exp,f,c
  7880  0019BA  90D8               	bcf	status,0,c
  7881  0019BC  3203               	rrcf	___ftpack@arg+2,f,c
  7882  0019BE  3202               	rrcf	___ftpack@arg+1,f,c
  7883  0019C0  3201               	rrcf	___ftpack@arg,f,c
  7884  0019C2                     i2l2973:
  7885  0019C2  0E00               	movlw	0
  7886  0019C4  1401               	andwf	___ftpack@arg,w,c
  7887  0019C6  6E06               	movwf	??___ftpack& (0+255),c
  7888  0019C8  0E00               	movlw	0
  7889  0019CA  1402               	andwf	___ftpack@arg+1,w,c
  7890  0019CC  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7891  0019CE  0EFE               	movlw	254
  7892  0019D0  1403               	andwf	___ftpack@arg+2,w,c
  7893  0019D2  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7894  0019D4  5006               	movf	??___ftpack,w,c
  7895  0019D6  1007               	iorwf	??___ftpack+1,w,c
  7896  0019D8  1008               	iorwf	??___ftpack+2,w,c
  7897  0019DA  B4D8               	btfsc	status,2,c
  7898  0019DC  D00C               	goto	i2l2979
  7899  0019DE  D7EC               	goto	i2l2971
  7900  0019E0                     i2l2975:
  7901  0019E0  2A04               	incf	___ftpack@exp,f,c
  7902  0019E2  0E01               	movlw	1
  7903  0019E4  2601               	addwf	___ftpack@arg,f,c
  7904  0019E6  0E00               	movlw	0
  7905  0019E8  2202               	addwfc	___ftpack@arg+1,f,c
  7906  0019EA  0E00               	movlw	0
  7907  0019EC  2203               	addwfc	___ftpack@arg+2,f,c
  7908  0019EE  90D8               	bcf	status,0,c
  7909  0019F0  3203               	rrcf	___ftpack@arg+2,f,c
  7910  0019F2  3202               	rrcf	___ftpack@arg+1,f,c
  7911  0019F4  3201               	rrcf	___ftpack@arg,f,c
  7912  0019F6                     i2l2979:
  7913  0019F6  0E00               	movlw	0
  7914  0019F8  1401               	andwf	___ftpack@arg,w,c
  7915  0019FA  6E06               	movwf	??___ftpack& (0+255),c
  7916  0019FC  0E00               	movlw	0
  7917  0019FE  1402               	andwf	___ftpack@arg+1,w,c
  7918  001A00  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7919  001A02  0EFF               	movlw	255
  7920  001A04  1403               	andwf	___ftpack@arg+2,w,c
  7921  001A06  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7922  001A08  5006               	movf	??___ftpack,w,c
  7923  001A0A  1007               	iorwf	??___ftpack+1,w,c
  7924  001A0C  1008               	iorwf	??___ftpack+2,w,c
  7925  001A0E  B4D8               	btfsc	status,2,c
  7926  001A10  D006               	goto	i2l2983
  7927  001A12  D7E6               	goto	i2l2975
  7928  001A14                     i2l2981:
  7929  001A14  0604               	decf	___ftpack@exp,f,c
  7930  001A16  90D8               	bcf	status,0,c
  7931  001A18  3601               	rlcf	___ftpack@arg,f,c
  7932  001A1A  3602               	rlcf	___ftpack@arg+1,f,c
  7933  001A1C  3603               	rlcf	___ftpack@arg+2,f,c
  7934  001A1E                     i2l2983:
  7935  001A1E  BE02               	btfsc	___ftpack@arg+1,7,c
  7936  001A20  D003               	goto	i2l791
  7937  001A22  0E02               	movlw	2
  7938  001A24  6004               	cpfslt	___ftpack@exp,c
  7939  001A26  D7F6               	goto	i2l2981
  7940  001A28                     i2l791:
  7941  001A28  A004               	btfss	___ftpack@exp,0,c
  7942  001A2A  9E02               	bcf	___ftpack@arg+1,7,c
  7943  001A2C  90D8               	bcf	status,0,c
  7944  001A2E  3204               	rrcf	___ftpack@exp,f,c
  7945  001A30  5004               	movf	___ftpack@exp,w,c
  7946  001A32  1203               	iorwf	___ftpack@arg+2,f,c
  7947  001A34  5005               	movf	___ftpack@sign,w,c
  7948  001A36  A4D8               	btfss	status,2,c
  7949  001A38  8E03               	bsf	___ftpack@arg+2,7,c
  7950  001A3A  C001  F001         	movff	___ftpack@arg,?___ftpack
  7951  001A3E  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  7952  001A42  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  7953  001A46  0012               	return	
  7954  001A48                     __end_of___ftpack:
  7955                           	opt stack 0
  7956                           pclatu	equ	0xFFB
  7957                           pclath	equ	0xFFA
  7958                           tblptru	equ	0xFF8
  7959                           tblptrh	equ	0xFF7
  7960                           tblptrl	equ	0xFF6
  7961                           tablat	equ	0xFF5
  7962                           prodh	equ	0xFF4
  7963                           prodl	equ	0xFF3
  7964                           intcon	equ	0xFF2
  7965                           intcon2	equ	0xFF1
  7966                           intcon3	equ	0xFF0
  7967                           postinc0	equ	0xFEE
  7968                           fsr0h	equ	0xFEA
  7969                           fsr0l	equ	0xFE9
  7970                           wreg	equ	0xFE8
  7971                           postdec1	equ	0xFE5
  7972                           plusw1	equ	0xFE3
  7973                           fsr1h	equ	0xFE2
  7974                           fsr1l	equ	0xFE1
  7975                           indf2	equ	0xFDF
  7976                           postinc2	equ	0xFDE
  7977                           postdec2	equ	0xFDD
  7978                           plusw2	equ	0xFDB
  7979                           fsr2h	equ	0xFDA
  7980                           fsr2l	equ	0xFD9
  7981                           status	equ	0xFD8
  7982                           
  7983 ;; *************** function _AD *****************
  7984 ;; Defined at:
  7985 ;;		line 4 in file "sensors.c"
  7986 ;; Parameters:    Size  Location     Type
  7987 ;;  channel         1    wreg     unsigned char 
  7988 ;; Auto vars:     Size  Location     Type
  7989 ;;  channel         1    4[COMRAM] unsigned char 
  7990 ;; Return value:  Size  Location     Type
  7991 ;;                  2    0[COMRAM] int 
  7992 ;; Registers used:
  7993 ;;		wreg, status,2, status,0
  7994 ;; Tracked objects:
  7995 ;;		On entry : 0/0
  7996 ;;		On exit  : 0/0
  7997 ;;		Unchanged: 0/0
  7998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7999 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8000 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8001 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8002 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8003 ;;Total ram usage:        5 bytes
  8004 ;; Hardware stack levels used:    1
  8005 ;; This function calls:
  8006 ;;		Nothing
  8007 ;; This function is called by:
  8008 ;;		_checkV
  8009 ;;		_testAD
  8010 ;; This function uses a non-reentrant model
  8011 ;;
  8012                           
  8013                           	psect	text39
  8014  002460                     __ptext39:
  8015                           	opt stack 0
  8016  002460                     _AD:
  8017                           	opt stack 22
  8018                           
  8019                           ;incstack = 0
  8020                           ;AD@channel stored from wreg
  8021  002460  6E05               	movwf	AD@channel,c
  8022                           
  8023                           ;sensors.c: 6: ADCON0 = ((channel << 2));
  8024  002462  4405               	rlncf	AD@channel,w,c
  8025  002464  46E8               	rlncf	wreg,f,c
  8026  002466  0BFC               	andlw	252
  8027  002468  6EC2               	movwf	4034,c	;volatile
  8028                           
  8029                           ;sensors.c: 7: ADON = 1;
  8030  00246A  80C2               	bsf	4034,0,c	;volatile
  8031                           
  8032                           ;sensors.c: 8: ADCON0bits.GO = 1;
  8033  00246C  82C2               	bsf	4034,1,c	;volatile
  8034  00246E                     i2l340:
  8035  00246E  B2C2               	btfsc	4034,1,c	;volatile
  8036  002470  D7FE               	goto	i2l340
  8037                           
  8038                           ;sensors.c: 10: return (ADRESH << 8) | ADRESL;
  8039  002472  50C3               	movf	4035,w,c	;volatile
  8040  002474  CFC4 F003          	movff	4036,??_AD	;volatile
  8041  002478  6A04               	clrf	(??_AD+1)& (0+255),c
  8042  00247A  C003  F004         	movff	??_AD,??_AD+1
  8043  00247E  6A03               	clrf	??_AD,c
  8044  002480  1003               	iorwf	??_AD,w,c
  8045  002482  6E01               	movwf	?_AD,c
  8046  002484  5004               	movf	??_AD+1,w,c
  8047  002486  6E02               	movwf	?_AD+1,c
  8048  002488  0012               	return	
  8049  00248A                     __end_of_AD:
  8050                           	opt stack 0
  8051                           pclatu	equ	0xFFB
  8052                           pclath	equ	0xFFA
  8053                           tblptru	equ	0xFF8
  8054                           tblptrh	equ	0xFF7
  8055                           tblptrl	equ	0xFF6
  8056                           tablat	equ	0xFF5
  8057                           prodh	equ	0xFF4
  8058                           prodl	equ	0xFF3
  8059                           intcon	equ	0xFF2
  8060                           intcon2	equ	0xFF1
  8061                           intcon3	equ	0xFF0
  8062                           postinc0	equ	0xFEE
  8063                           fsr0h	equ	0xFEA
  8064                           fsr0l	equ	0xFE9
  8065                           wreg	equ	0xFE8
  8066                           postdec1	equ	0xFE5
  8067                           plusw1	equ	0xFE3
  8068                           fsr1h	equ	0xFE2
  8069                           fsr1l	equ	0xFE1
  8070                           indf2	equ	0xFDF
  8071                           postinc2	equ	0xFDE
  8072                           postdec2	equ	0xFDD
  8073                           plusw2	equ	0xFDB
  8074                           fsr2h	equ	0xFDA
  8075                           fsr2l	equ	0xFD9
  8076                           status	equ	0xFD8
  8077                           
  8078 ;; *************** function _HexDecToDec2 *****************
  8079 ;; Defined at:
  8080 ;;		line 6 in file "modules.c"
  8081 ;; Parameters:    Size  Location     Type
  8082 ;;  hex             2    6[COMRAM] unsigned int 
  8083 ;; Auto vars:     Size  Location     Type
  8084 ;;  digit           2   13[COMRAM] unsigned int 
  8085 ;;  tenth           2   11[COMRAM] unsigned int 
  8086 ;; Return value:  Size  Location     Type
  8087 ;;                  2    6[COMRAM] unsigned int 
  8088 ;; Registers used:
  8089 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8090 ;; Tracked objects:
  8091 ;;		On entry : 0/0
  8092 ;;		On exit  : 0/0
  8093 ;;		Unchanged: 0/0
  8094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8095 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8096 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8097 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8098 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8099 ;;Total ram usage:        9 bytes
  8100 ;; Hardware stack levels used:    1
  8101 ;; Hardware stack levels required when called:    1
  8102 ;; This function calls:
  8103 ;;		i2___wmul
  8104 ;; This function is called by:
  8105 ;;		_simulate
  8106 ;; This function uses a non-reentrant model
  8107 ;;
  8108                           
  8109                           	psect	text40
  8110  00224C                     __ptext40:
  8111                           	opt stack 0
  8112  00224C                     _HexDecToDec2:
  8113                           	opt stack 23
  8114                           
  8115                           ;modules.c: 8: unsigned tenth = hex / 16;
  8116                           
  8117                           ;incstack = 0
  8118  00224C  C007  F009         	movff	HexDecToDec2@hex,??_HexDecToDec2
  8119  002250  C008  F00A         	movff	HexDecToDec2@hex+1,??_HexDecToDec2+1
  8120  002254  0E04               	movlw	4
  8121  002256  6E0B               	movwf	(??_HexDecToDec2+2)& (0+255),c
  8122  002258                     i2u309_45:
  8123  002258  90D8               	bcf	status,0,c
  8124  00225A  320A               	rrcf	??_HexDecToDec2+1,f,c
  8125  00225C  3209               	rrcf	??_HexDecToDec2,f,c
  8126  00225E  2E0B               	decfsz	(??_HexDecToDec2+2)& (0+255),f,c
  8127  002260  D7FB               	goto	i2u309_45
  8128  002262  C009  F00C         	movff	??_HexDecToDec2,HexDecToDec2@tenth
  8129  002266  C00A  F00D         	movff	??_HexDecToDec2+1,HexDecToDec2@tenth+1
  8130                           
  8131                           ;modules.c: 9: unsigned digit = hex % 16;
  8132  00226A  0E0F               	movlw	15
  8133  00226C  1407               	andwf	HexDecToDec2@hex,w,c
  8134  00226E  6E0E               	movwf	HexDecToDec2@digit,c
  8135  002270  6A0F               	clrf	HexDecToDec2@digit+1,c
  8136                           
  8137                           ;modules.c: 10: return tenth * 10 + digit;
  8138  002272  C00C  F001         	movff	HexDecToDec2@tenth,i2___wmul@multiplier
  8139  002276  C00D  F002         	movff	HexDecToDec2@tenth+1,i2___wmul@multiplier+1
  8140  00227A  0E00               	movlw	0
  8141  00227C  6E04               	movwf	i2___wmul@multiplicand+1,c
  8142  00227E  0E0A               	movlw	10
  8143  002280  6E03               	movwf	i2___wmul@multiplicand,c
  8144  002282  EC7F  F012         	call	i2___wmul	;wreg free
  8145  002286  500E               	movf	HexDecToDec2@digit,w,c
  8146  002288  2401               	addwf	?i2___wmul,w,c
  8147  00228A  6E07               	movwf	?_HexDecToDec2,c
  8148  00228C  500F               	movf	HexDecToDec2@digit+1,w,c
  8149  00228E  2002               	addwfc	?i2___wmul+1,w,c
  8150  002290  6E08               	movwf	?_HexDecToDec2+1,c
  8151  002292  0012               	return	
  8152  002294                     __end_of_HexDecToDec2:
  8153                           	opt stack 0
  8154                           pclatu	equ	0xFFB
  8155                           pclath	equ	0xFFA
  8156                           tblptru	equ	0xFF8
  8157                           tblptrh	equ	0xFF7
  8158                           tblptrl	equ	0xFF6
  8159                           tablat	equ	0xFF5
  8160                           prodh	equ	0xFF4
  8161                           prodl	equ	0xFF3
  8162                           intcon	equ	0xFF2
  8163                           intcon2	equ	0xFF1
  8164                           intcon3	equ	0xFF0
  8165                           postinc0	equ	0xFEE
  8166                           fsr0h	equ	0xFEA
  8167                           fsr0l	equ	0xFE9
  8168                           wreg	equ	0xFE8
  8169                           postdec1	equ	0xFE5
  8170                           plusw1	equ	0xFE3
  8171                           fsr1h	equ	0xFE2
  8172                           fsr1l	equ	0xFE1
  8173                           indf2	equ	0xFDF
  8174                           postinc2	equ	0xFDE
  8175                           postdec2	equ	0xFDD
  8176                           plusw2	equ	0xFDB
  8177                           fsr2h	equ	0xFDA
  8178                           fsr2l	equ	0xFD9
  8179                           status	equ	0xFD8
  8180                           
  8181 ;; *************** function _mainloop *****************
  8182 ;; Defined at:
  8183 ;;		line 51 in file "main.c"
  8184 ;; Parameters:    Size  Location     Type
  8185 ;;		None
  8186 ;; Auto vars:     Size  Location     Type
  8187 ;;  i               2   61[COMRAM] int 
  8188 ;;  portCW          6   53[COMRAM] int [3]
  8189 ;;  sorted          4   49[COMRAM] unsigned char [4]
  8190 ;;  period          2   59[COMRAM] unsigned int 
  8191 ;; Return value:  Size  Location     Type
  8192 ;;                  1    wreg      void 
  8193 ;; Registers used:
  8194 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8195 ;; Tracked objects:
  8196 ;;		On entry : 0/0
  8197 ;;		On exit  : 0/0
  8198 ;;		Unchanged: 0/0
  8199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8201 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8202 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8203 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8204 ;;Total ram usage:       16 bytes
  8205 ;; Hardware stack levels used:    1
  8206 ;; Hardware stack levels required when called:    4
  8207 ;; This function calls:
  8208 ;;		_CCW90
  8209 ;;		_CW90
  8210 ;;		_WriteRun
  8211 ;;		_closeGate
  8212 ;;		_openGate
  8213 ;;		_showInfo
  8214 ;;		_stopMoving
  8215 ;;		i2_lcdInst
  8216 ;;		i2_printf
  8217 ;; This function is called by:
  8218 ;;		_intrpt
  8219 ;; This function uses a non-reentrant model
  8220 ;;
  8221                           
  8222                           	psect	text41
  8223  00110A                     __ptext41:
  8224                           	opt stack 0
  8225  00110A                     _mainloop:
  8226                           	opt stack 21
  8227                           
  8228                           ;main.c: 52: unsigned char sorted[] = {2, 2, 2, 6};
  8229                           
  8230                           ;incstack = 0
  8231  00110A  C0E0  F032         	movff	mainloop@F3096,mainloop@sorted
  8232  00110E  C0E1  F033         	movff	mainloop@F3096+1,mainloop@sorted+1
  8233  001112  C0E2  F034         	movff	mainloop@F3096+2,mainloop@sorted+2
  8234  001116  C0E3  F035         	movff	mainloop@F3096+3,mainloop@sorted+3
  8235                           
  8236                           ;main.c: 53: unsigned int period = 30;
  8237  00111A  0E00               	movlw	0
  8238  00111C  6E3D               	movwf	mainloop@period+1,c
  8239  00111E  0E1E               	movlw	30
  8240  001120  6E3C               	movwf	mainloop@period,c
  8241                           
  8242                           ;main.c: 54: lcdInst(0b10000000);
  8243  001122  0E80               	movlw	128
  8244  001124  EC2F  F013         	call	i2_lcdInst
  8245                           
  8246                           ;main.c: 55: printf("Dumming...          ");
  8247  001128  0E16               	movlw	low STR_1
  8248  00112A  6E0D               	movwf	i2printf@f,c
  8249  00112C  0EFF               	movlw	high STR_1
  8250  00112E  6E0E               	movwf	i2printf@f+1,c
  8251  001130  EC5A  F004         	call	i2_printf	;wreg free
  8252                           
  8253                           ;main.c: 57: LATC6 = 1;
  8254  001134  8C8B               	bsf	3979,6,c	;volatile
  8255                           
  8256                           ;main.c: 58: INT2IE = 1;
  8257  001136  88F0               	bsf	intcon3,4,c	;volatile
  8258                           
  8259                           ;main.c: 59: INT2IF = 0;
  8260  001138  92F0               	bcf	intcon3,1,c	;volatile
  8261                           
  8262                           ;main.c: 60: _delay((unsigned long)((20000)*(8000000/4000.0)));
  8263  00113A  0ECB               	movlw	203
  8264  00113C  6E31               	movwf	(??_mainloop+1)& (0+255),c
  8265  00113E  0EEC               	movlw	236
  8266  001140  6E30               	movwf	??_mainloop& (0+255),c
  8267  001142  0E84               	movlw	132
  8268  001144                     i2u360_47:
  8269  001144  2EE8               	decfsz	wreg,f,c
  8270  001146  D7FE               	bra	i2u360_47
  8271  001148  2E30               	decfsz	??_mainloop& (0+255),f,c
  8272  00114A  D7FC               	bra	i2u360_47
  8273  00114C  2E31               	decfsz	(??_mainloop+1)& (0+255),f,c
  8274  00114E  D7FA               	bra	i2u360_47
  8275  001150  D000               	nop2	
  8276                           
  8277                           ;main.c: 61: openGate();
  8278  001152  ECA3  F012         	call	_openGate	;wreg free
  8279                           
  8280                           ;main.c: 62: LATC6 = 0;
  8281  001156  9C8B               	bcf	3979,6,c	;volatile
  8282                           
  8283                           ;main.c: 63: _delay((unsigned long)((2000)*(8000000/4000.0)));
  8284  001158  0E15               	movlw	21
  8285  00115A  6E31               	movwf	(??_mainloop+1)& (0+255),c
  8286  00115C  0E4B               	movlw	75
  8287  00115E  6E30               	movwf	??_mainloop& (0+255),c
  8288  001160  0EBE               	movlw	190
  8289  001162                     i2u361_47:
  8290  001162  2EE8               	decfsz	wreg,f,c
  8291  001164  D7FE               	bra	i2u361_47
  8292  001166  2E30               	decfsz	??_mainloop& (0+255),f,c
  8293  001168  D7FC               	bra	i2u361_47
  8294  00116A  2E31               	decfsz	(??_mainloop+1)& (0+255),f,c
  8295  00116C  D7FA               	bra	i2u361_47
  8296  00116E  D000               	nop2	
  8297                           
  8298                           ;main.c: 64: int portCW[] = {1, 1, 1};
  8299  001170  EE20  F0DA         	lfsr	2,mainloop@F3101
  8300  001174  EE10  F036         	lfsr	1,mainloop@portCW
  8301  001178  0E05               	movlw	5
  8302  00117A                     i2u312_41:
  8303  00117A  CFDB FFE3          	movff	plusw2,plusw1
  8304  00117E  06E8               	decf	wreg,f,c
  8305  001180  E2FC               	bc	i2u312_41
  8306                           
  8307                           ;main.c: 65: CCW90(portCW);
  8308  001182  0E36               	movlw	low mainloop@portCW
  8309  001184  6E16               	movwf	CCW90@port,c
  8310  001186  0E00               	movlw	high mainloop@portCW
  8311  001188  6E17               	movwf	CCW90@port+1,c
  8312  00118A  EC3B  F00E         	call	_CCW90	;wreg free
  8313                           
  8314                           ;main.c: 67: for (int i = 0; i < 8; i++) {
  8315  00118E  0E00               	movlw	0
  8316  001190  6E3F               	movwf	mainloop@i+1,c
  8317  001192  0E00               	movlw	0
  8318  001194  6E3E               	movwf	mainloop@i,c
  8319  001196  BE3F               	btfsc	mainloop@i+1,7,c
  8320  001198  D006               	goto	i2l108
  8321  00119A  503F               	movf	mainloop@i+1,w,c
  8322  00119C  E149               	bnz	i2l109
  8323  00119E  0E08               	movlw	8
  8324  0011A0  5C3E               	subwf	mainloop@i,w,c
  8325  0011A2  B0D8               	btfsc	status,0,c
  8326  0011A4  D045               	goto	i2l109
  8327  0011A6                     i2l108:
  8328                           
  8329                           ;main.c: 68: LATC6 = 1;
  8330  0011A6  8C8B               	bsf	3979,6,c	;volatile
  8331                           
  8332                           ;main.c: 69: _delay((unsigned long)((500)*(8000000/4000.0)));
  8333  0011A8  0E06               	movlw	6
  8334  0011AA  6E31               	movwf	(??_mainloop+1)& (0+255),c
  8335  0011AC  0E13               	movlw	19
  8336  0011AE  6E30               	movwf	??_mainloop& (0+255),c
  8337  0011B0  0EAE               	movlw	174
  8338  0011B2                     i2u362_47:
  8339  0011B2  2EE8               	decfsz	wreg,f,c
  8340  0011B4  D7FE               	bra	i2u362_47
  8341  0011B6  2E30               	decfsz	??_mainloop& (0+255),f,c
  8342  0011B8  D7FC               	bra	i2u362_47
  8343  0011BA  2E31               	decfsz	(??_mainloop+1)& (0+255),f,c
  8344  0011BC  D7FA               	bra	i2u362_47
  8345                           
  8346                           ;main.c: 70: LATC6 = 0;
  8347  0011BE  9C8B               	bcf	3979,6,c	;volatile
  8348                           
  8349                           ;main.c: 71: _delay((unsigned long)((2000)*(8000000/4000.0)));
  8350  0011C0  0E15               	movlw	21
  8351  0011C2  6E31               	movwf	(??_mainloop+1)& (0+255),c
  8352  0011C4  0E4B               	movlw	75
  8353  0011C6  6E30               	movwf	??_mainloop& (0+255),c
  8354  0011C8  0EBE               	movlw	190
  8355  0011CA                     i2u363_47:
  8356  0011CA  2EE8               	decfsz	wreg,f,c
  8357  0011CC  D7FE               	bra	i2u363_47
  8358  0011CE  2E30               	decfsz	??_mainloop& (0+255),f,c
  8359  0011D0  D7FC               	bra	i2u363_47
  8360  0011D2  2E31               	decfsz	(??_mainloop+1)& (0+255),f,c
  8361  0011D4  D7FA               	bra	i2u363_47
  8362  0011D6  D000               	nop2	
  8363                           
  8364                           ;main.c: 72: CW90(portCW);
  8365  0011D8  0E36               	movlw	low mainloop@portCW
  8366  0011DA  6E16               	movwf	CW90@port,c
  8367  0011DC  0E00               	movlw	high mainloop@portCW
  8368  0011DE  6E17               	movwf	CW90@port+1,c
  8369  0011E0  ECF6  F00D         	call	_CW90	;wreg free
  8370                           
  8371                           ;main.c: 73: LATC6 = 1;
  8372  0011E4  8C8B               	bsf	3979,6,c	;volatile
  8373                           
  8374                           ;main.c: 74: _delay((unsigned long)((500)*(8000000/4000.0)));
  8375  0011E6  0E06               	movlw	6
  8376  0011E8  6E31               	movwf	(??_mainloop+1)& (0+255),c
  8377  0011EA  0E13               	movlw	19
  8378  0011EC  6E30               	movwf	??_mainloop& (0+255),c
  8379  0011EE  0EAE               	movlw	174
  8380  0011F0                     i2u364_47:
  8381  0011F0  2EE8               	decfsz	wreg,f,c
  8382  0011F2  D7FE               	bra	i2u364_47
  8383  0011F4  2E30               	decfsz	??_mainloop& (0+255),f,c
  8384  0011F6  D7FC               	bra	i2u364_47
  8385  0011F8  2E31               	decfsz	(??_mainloop+1)& (0+255),f,c
  8386  0011FA  D7FA               	bra	i2u364_47
  8387                           
  8388                           ;main.c: 75: LATC6 = 0;
  8389  0011FC  9C8B               	bcf	3979,6,c	;volatile
  8390                           
  8391                           ;main.c: 76: _delay((unsigned long)((2000)*(8000000/4000.0)));
  8392  0011FE  0E15               	movlw	21
  8393  001200  6E31               	movwf	(??_mainloop+1)& (0+255),c
  8394  001202  0E4B               	movlw	75
  8395  001204  6E30               	movwf	??_mainloop& (0+255),c
  8396  001206  0EBE               	movlw	190
  8397  001208                     i2u365_47:
  8398  001208  2EE8               	decfsz	wreg,f,c
  8399  00120A  D7FE               	bra	i2u365_47
  8400  00120C  2E30               	decfsz	??_mainloop& (0+255),f,c
  8401  00120E  D7FC               	bra	i2u365_47
  8402  001210  2E31               	decfsz	(??_mainloop+1)& (0+255),f,c
  8403  001212  D7FA               	bra	i2u365_47
  8404  001214  D000               	nop2	
  8405                           
  8406                           ;main.c: 77: CCW90(portCW);
  8407  001216  0E36               	movlw	low mainloop@portCW
  8408  001218  6E16               	movwf	CCW90@port,c
  8409  00121A  0E00               	movlw	high mainloop@portCW
  8410  00121C  6E17               	movwf	CCW90@port+1,c
  8411  00121E  EC3B  F00E         	call	_CCW90	;wreg free
  8412  001222  4A3E               	infsnz	mainloop@i,f,c
  8413  001224  2A3F               	incf	mainloop@i+1,f,c
  8414  001226  BE3F               	btfsc	mainloop@i+1,7,c
  8415  001228  D7BE               	goto	i2l108
  8416  00122A  503F               	movf	mainloop@i+1,w,c
  8417  00122C  E101               	bnz	i2u314_40
  8418  00122E  D7B7               	goto	L3
  8419  001230                     i2u314_40:
  8420  001230                     i2l109:
  8421                           
  8422                           ;main.c: 78: }
  8423                           ;main.c: 80: INT2IE = 0;
  8424  001230  98F0               	bcf	intcon3,4,c	;volatile
  8425                           
  8426                           ;main.c: 81: stopMoving(0);
  8427  001232  0E00               	movlw	0
  8428  001234  ECCD  F011         	call	_stopMoving
  8429                           
  8430                           ;main.c: 82: closeGate();
  8431  001238  ECB3  F012         	call	_closeGate	;wreg free
  8432                           
  8433                           ;main.c: 83: lcdInst(0b11000000);
  8434  00123C  0EC0               	movlw	192
  8435  00123E  EC2F  F013         	call	i2_lcdInst
  8436                           
  8437                           ;main.c: 84: printf("Sorting Complete          ");
  8438  001242  0ED3               	movlw	low STR_2
  8439  001244  6E0D               	movwf	i2printf@f,c
  8440  001246  0EFD               	movlw	high STR_2
  8441  001248  6E0E               	movwf	i2printf@f+1,c
  8442  00124A  EC5A  F004         	call	i2_printf	;wreg free
  8443                           
  8444                           ;main.c: 85: WriteRun(sorted, period);
  8445  00124E  0E32               	movlw	low mainloop@sorted
  8446  001250  6E07               	movwf	WriteRun@sorted,c
  8447  001252  0E00               	movlw	high mainloop@sorted
  8448  001254  6E08               	movwf	WriteRun@sorted+1,c
  8449  001256  C03C  F009         	movff	mainloop@period,WriteRun@time
  8450  00125A  C03D  F00A         	movff	mainloop@period+1,WriteRun@time+1
  8451  00125E  EC4C  F009         	call	_WriteRun	;wreg free
  8452                           
  8453                           ;main.c: 86: _delay((unsigned long)((700)*(8000000/4000.0)));
  8454  001262  0E08               	movlw	8
  8455  001264  6E31               	movwf	(??_mainloop+1)& (0+255),c
  8456  001266  0E1B               	movlw	27
  8457  001268  6E30               	movwf	??_mainloop& (0+255),c
  8458  00126A  0E27               	movlw	39
  8459  00126C                     i2u366_47:
  8460  00126C  2EE8               	decfsz	wreg,f,c
  8461  00126E  D7FE               	bra	i2u366_47
  8462  001270  2E30               	decfsz	??_mainloop& (0+255),f,c
  8463  001272  D7FC               	bra	i2u366_47
  8464  001274  2E31               	decfsz	(??_mainloop+1)& (0+255),f,c
  8465  001276  D7FA               	bra	i2u366_47
  8466  001278  F000               	nop	
  8467                           
  8468                           ;main.c: 87: showInfo(period, sorted);
  8469  00127A  C03C  F023         	movff	mainloop@period,showInfo@time
  8470  00127E  C03D  F024         	movff	mainloop@period+1,showInfo@time+1
  8471  001282  0E32               	movlw	low mainloop@sorted
  8472  001284  6E25               	movwf	showInfo@sorted,c
  8473  001286  0E00               	movlw	high mainloop@sorted
  8474  001288  6E26               	movwf	showInfo@sorted+1,c
  8475  00128A  EC71  F007         	call	_showInfo	;wreg free
  8476                           
  8477                           ;main.c: 88: mode = 0;
  8478  00128E  0E00               	movlw	0
  8479  001290  6E7C               	movwf	_mode+1,c
  8480  001292  0E00               	movlw	0
  8481  001294  6E7B               	movwf	_mode,c
  8482  001296  0012               	return		;funcret
  8483  001298                     __end_of_mainloop:
  8484                           	opt stack 0
  8485                           pclatu	equ	0xFFB
  8486                           pclath	equ	0xFFA
  8487                           tblptru	equ	0xFF8
  8488                           tblptrh	equ	0xFF7
  8489                           tblptrl	equ	0xFF6
  8490                           tablat	equ	0xFF5
  8491                           prodh	equ	0xFF4
  8492                           prodl	equ	0xFF3
  8493                           intcon	equ	0xFF2
  8494                           intcon2	equ	0xFF1
  8495                           intcon3	equ	0xFF0
  8496                           postinc0	equ	0xFEE
  8497                           fsr0h	equ	0xFEA
  8498                           fsr0l	equ	0xFE9
  8499                           wreg	equ	0xFE8
  8500                           postdec1	equ	0xFE5
  8501                           plusw1	equ	0xFE3
  8502                           fsr1h	equ	0xFE2
  8503                           fsr1l	equ	0xFE1
  8504                           indf2	equ	0xFDF
  8505                           postinc2	equ	0xFDE
  8506                           postdec2	equ	0xFDD
  8507                           plusw2	equ	0xFDB
  8508                           fsr2h	equ	0xFDA
  8509                           fsr2l	equ	0xFD9
  8510                           status	equ	0xFD8
  8511                           
  8512 ;; *************** function _stopMoving *****************
  8513 ;; Defined at:
  8514 ;;		line 44 in file "motors.c"
  8515 ;; Parameters:    Size  Location     Type
  8516 ;;  em              1    wreg     unsigned char 
  8517 ;; Auto vars:     Size  Location     Type
  8518 ;;  em              1   36[COMRAM] unsigned char 
  8519 ;; Return value:  Size  Location     Type
  8520 ;;                  1    wreg      void 
  8521 ;; Registers used:
  8522 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8523 ;; Tracked objects:
  8524 ;;		On entry : 0/0
  8525 ;;		On exit  : 0/0
  8526 ;;		Unchanged: 0/0
  8527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8529 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8531 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8532 ;;Total ram usage:        3 bytes
  8533 ;; Hardware stack levels used:    1
  8534 ;; Hardware stack levels required when called:    3
  8535 ;; This function calls:
  8536 ;;		i2_lcdInst
  8537 ;;		i2_printf
  8538 ;; This function is called by:
  8539 ;;		_mainloop
  8540 ;;		_simulate
  8541 ;;		_intrpt
  8542 ;; This function uses a non-reentrant model
  8543 ;;
  8544                           
  8545                           	psect	text42
  8546  00239A                     __ptext42:
  8547                           	opt stack 0
  8548  00239A                     _stopMoving:
  8549                           	opt stack 22
  8550                           
  8551                           ;incstack = 0
  8552                           ;stopMoving@em stored from wreg
  8553  00239A  6E25               	movwf	stopMoving@em,c
  8554                           
  8555                           ;motors.c: 45: (INTCONbits.GIE = 0);
  8556  00239C  9EF2               	bcf	intcon,7,c	;volatile
  8557                           
  8558                           ;motors.c: 46: LATC = 0;
  8559  00239E  0E00               	movlw	0
  8560  0023A0  6E8B               	movwf	3979,c	;volatile
  8561                           
  8562                           ;motors.c: 47: lcdInst(0b10000000);
  8563  0023A2  0E80               	movlw	128
  8564  0023A4  EC2F  F013         	call	i2_lcdInst
  8565                           
  8566                           ;motors.c: 48: printf(em ? "Emergency          " : "Stopped          ");
  8567  0023A8  5025               	movf	stopMoving@em,w,c
  8568  0023AA  A4D8               	btfss	status,2,c
  8569  0023AC  D004               	goto	i2l3857
  8570  0023AE  0E79               	movlw	low STR_37
  8571  0023B0  6E23               	movwf	_stopMoving$577,c
  8572  0023B2  0EFF               	movlw	high STR_37
  8573  0023B4  D003               	goto	L4
  8574  0023B6                     i2l3857:
  8575  0023B6  0E40               	movlw	low STR_36
  8576  0023B8  6E23               	movwf	_stopMoving$577,c
  8577  0023BA  0EFF               	movlw	high STR_36
  8578  0023BC                     L4:
  8579  0023BC  6E24               	movwf	_stopMoving$577+1,c
  8580  0023BE  C023  F00D         	movff	_stopMoving$577,i2printf@f
  8581  0023C2  C024  F00E         	movff	_stopMoving$577+1,i2printf@f+1
  8582  0023C6  EC5A  F004         	call	i2_printf	;wreg free
  8583                           
  8584                           ;motors.c: 49: if (em) while(1);
  8585  0023CA  5025               	movf	stopMoving@em,w,c
  8586  0023CC  B4D8               	btfsc	status,2,c
  8587  0023CE  0012               	return	
  8588  0023D0                     i2l314:
  8589  0023D0  D7FF               	goto	i2l314
  8590  0023D2                     __end_of_stopMoving:
  8591                           	opt stack 0
  8592                           pclatu	equ	0xFFB
  8593                           pclath	equ	0xFFA
  8594                           tblptru	equ	0xFF8
  8595                           tblptrh	equ	0xFF7
  8596                           tblptrl	equ	0xFF6
  8597                           tablat	equ	0xFF5
  8598                           prodh	equ	0xFF4
  8599                           prodl	equ	0xFF3
  8600                           intcon	equ	0xFF2
  8601                           intcon2	equ	0xFF1
  8602                           intcon3	equ	0xFF0
  8603                           postinc0	equ	0xFEE
  8604                           fsr0h	equ	0xFEA
  8605                           fsr0l	equ	0xFE9
  8606                           wreg	equ	0xFE8
  8607                           postdec1	equ	0xFE5
  8608                           plusw1	equ	0xFE3
  8609                           fsr1h	equ	0xFE2
  8610                           fsr1l	equ	0xFE1
  8611                           indf2	equ	0xFDF
  8612                           postinc2	equ	0xFDE
  8613                           postdec2	equ	0xFDD
  8614                           plusw2	equ	0xFDB
  8615                           fsr2h	equ	0xFDA
  8616                           fsr2l	equ	0xFD9
  8617                           status	equ	0xFD8
  8618                           
  8619 ;; *************** function _openGate *****************
  8620 ;; Defined at:
  8621 ;;		line 52 in file "motors.c"
  8622 ;; Parameters:    Size  Location     Type
  8623 ;;		None
  8624 ;; Auto vars:     Size  Location     Type
  8625 ;;		None
  8626 ;; Return value:  Size  Location     Type
  8627 ;;                  1    wreg      void 
  8628 ;; Registers used:
  8629 ;;		wreg
  8630 ;; Tracked objects:
  8631 ;;		On entry : 0/0
  8632 ;;		On exit  : 0/0
  8633 ;;		Unchanged: 0/0
  8634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8637 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8638 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8639 ;;Total ram usage:        2 bytes
  8640 ;; Hardware stack levels used:    1
  8641 ;; This function calls:
  8642 ;;		Nothing
  8643 ;; This function is called by:
  8644 ;;		_mainloop
  8645 ;;		_simulate
  8646 ;; This function uses a non-reentrant model
  8647 ;;
  8648                           
  8649                           	psect	text43
  8650  002546                     __ptext43:
  8651                           	opt stack 0
  8652  002546                     _openGate:
  8653                           	opt stack 24
  8654                           
  8655                           ;motors.c: 53: LATC7 = 0;
  8656                           
  8657                           ;incstack = 0
  8658  002546  9E8B               	bcf	3979,7,c	;volatile
  8659                           
  8660                           ;motors.c: 54: LATC5 = 1;
  8661  002548  8A8B               	bsf	3979,5,c	;volatile
  8662                           
  8663                           ;motors.c: 55: _delay((unsigned long)((180)*(8000000/4000.0)));
  8664  00254A  0E02               	movlw	2
  8665  00254C  6E02               	movwf	(??_openGate+1)& (0+255),c
  8666  00254E  0ED4               	movlw	212
  8667  002550  6E01               	movwf	??_openGate& (0+255),c
  8668  002552  0E85               	movlw	133
  8669  002554                     i2u367_47:
  8670  002554  2EE8               	decfsz	wreg,f,c
  8671  002556  D7FE               	bra	i2u367_47
  8672  002558  2E01               	decfsz	??_openGate& (0+255),f,c
  8673  00255A  D7FC               	bra	i2u367_47
  8674  00255C  2E02               	decfsz	(??_openGate+1)& (0+255),f,c
  8675  00255E  D7FA               	bra	i2u367_47
  8676  002560  F000               	nop	
  8677                           
  8678                           ;motors.c: 56: LATC5 = 0;
  8679  002562  9A8B               	bcf	3979,5,c	;volatile
  8680  002564  0012               	return		;funcret
  8681  002566                     __end_of_openGate:
  8682                           	opt stack 0
  8683                           pclatu	equ	0xFFB
  8684                           pclath	equ	0xFFA
  8685                           tblptru	equ	0xFF8
  8686                           tblptrh	equ	0xFF7
  8687                           tblptrl	equ	0xFF6
  8688                           tablat	equ	0xFF5
  8689                           prodh	equ	0xFF4
  8690                           prodl	equ	0xFF3
  8691                           intcon	equ	0xFF2
  8692                           intcon2	equ	0xFF1
  8693                           intcon3	equ	0xFF0
  8694                           postinc0	equ	0xFEE
  8695                           fsr0h	equ	0xFEA
  8696                           fsr0l	equ	0xFE9
  8697                           wreg	equ	0xFE8
  8698                           postdec1	equ	0xFE5
  8699                           plusw1	equ	0xFE3
  8700                           fsr1h	equ	0xFE2
  8701                           fsr1l	equ	0xFE1
  8702                           indf2	equ	0xFDF
  8703                           postinc2	equ	0xFDE
  8704                           postdec2	equ	0xFDD
  8705                           plusw2	equ	0xFDB
  8706                           fsr2h	equ	0xFDA
  8707                           fsr2l	equ	0xFD9
  8708                           status	equ	0xFD8
  8709                           
  8710 ;; *************** function _closeGate *****************
  8711 ;; Defined at:
  8712 ;;		line 59 in file "motors.c"
  8713 ;; Parameters:    Size  Location     Type
  8714 ;;		None
  8715 ;; Auto vars:     Size  Location     Type
  8716 ;;		None
  8717 ;; Return value:  Size  Location     Type
  8718 ;;                  1    wreg      void 
  8719 ;; Registers used:
  8720 ;;		wreg
  8721 ;; Tracked objects:
  8722 ;;		On entry : 0/0
  8723 ;;		On exit  : 0/0
  8724 ;;		Unchanged: 0/0
  8725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8728 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8729 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8730 ;;Total ram usage:        2 bytes
  8731 ;; Hardware stack levels used:    1
  8732 ;; This function calls:
  8733 ;;		Nothing
  8734 ;; This function is called by:
  8735 ;;		_mainloop
  8736 ;;		_simulate
  8737 ;; This function uses a non-reentrant model
  8738 ;;
  8739                           
  8740                           	psect	text44
  8741  002566                     __ptext44:
  8742                           	opt stack 0
  8743  002566                     _closeGate:
  8744                           	opt stack 24
  8745                           
  8746                           ;motors.c: 60: LATC5 = 0;
  8747                           
  8748                           ;incstack = 0
  8749  002566  9A8B               	bcf	3979,5,c	;volatile
  8750                           
  8751                           ;motors.c: 61: LATC7 = 1;
  8752  002568  8E8B               	bsf	3979,7,c	;volatile
  8753                           
  8754                           ;motors.c: 62: _delay((unsigned long)((180)*(8000000/4000.0)));
  8755  00256A  0E02               	movlw	2
  8756  00256C  6E02               	movwf	(??_closeGate+1)& (0+255),c
  8757  00256E  0ED4               	movlw	212
  8758  002570  6E01               	movwf	??_closeGate& (0+255),c
  8759  002572  0E85               	movlw	133
  8760  002574                     i2u368_47:
  8761  002574  2EE8               	decfsz	wreg,f,c
  8762  002576  D7FE               	bra	i2u368_47
  8763  002578  2E01               	decfsz	??_closeGate& (0+255),f,c
  8764  00257A  D7FC               	bra	i2u368_47
  8765  00257C  2E02               	decfsz	(??_closeGate+1)& (0+255),f,c
  8766  00257E  D7FA               	bra	i2u368_47
  8767  002580  F000               	nop	
  8768                           
  8769                           ;motors.c: 63: LATC7 = 0;
  8770  002582  9E8B               	bcf	3979,7,c	;volatile
  8771  002584  0012               	return		;funcret
  8772  002586                     __end_of_closeGate:
  8773                           	opt stack 0
  8774                           pclatu	equ	0xFFB
  8775                           pclath	equ	0xFFA
  8776                           tblptru	equ	0xFF8
  8777                           tblptrh	equ	0xFF7
  8778                           tblptrl	equ	0xFF6
  8779                           tablat	equ	0xFF5
  8780                           prodh	equ	0xFF4
  8781                           prodl	equ	0xFF3
  8782                           intcon	equ	0xFF2
  8783                           intcon2	equ	0xFF1
  8784                           intcon3	equ	0xFF0
  8785                           postinc0	equ	0xFEE
  8786                           fsr0h	equ	0xFEA
  8787                           fsr0l	equ	0xFE9
  8788                           wreg	equ	0xFE8
  8789                           postdec1	equ	0xFE5
  8790                           plusw1	equ	0xFE3
  8791                           fsr1h	equ	0xFE2
  8792                           fsr1l	equ	0xFE1
  8793                           indf2	equ	0xFDF
  8794                           postinc2	equ	0xFDE
  8795                           postdec2	equ	0xFDD
  8796                           plusw2	equ	0xFDB
  8797                           fsr2h	equ	0xFDA
  8798                           fsr2l	equ	0xFD9
  8799                           status	equ	0xFD8
  8800                           
  8801 ;; *************** function _WriteRun *****************
  8802 ;; Defined at:
  8803 ;;		line 75 in file "eeprom.c"
  8804 ;; Parameters:    Size  Location     Type
  8805 ;;  sorted          2    6[COMRAM] PTR unsigned char 
  8806 ;;		 -> simulate@sorted(4), mainloop@sorted(4), 
  8807 ;;  time            2    8[COMRAM] unsigned int 
  8808 ;; Auto vars:     Size  Location     Type
  8809 ;;  add             2   12[COMRAM] unsigned int 
  8810 ;; Return value:  Size  Location     Type
  8811 ;;                  1    wreg      void 
  8812 ;; Registers used:
  8813 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8814 ;; Tracked objects:
  8815 ;;		On entry : 0/0
  8816 ;;		On exit  : 0/0
  8817 ;;		Unchanged: 0/0
  8818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8819 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8820 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8821 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8822 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8823 ;;Total ram usage:        8 bytes
  8824 ;; Hardware stack levels used:    1
  8825 ;; Hardware stack levels required when called:    1
  8826 ;; This function calls:
  8827 ;;		_WriteEE
  8828 ;;		i2___wmul
  8829 ;; This function is called by:
  8830 ;;		_mainloop
  8831 ;;		_simulate
  8832 ;; This function uses a non-reentrant model
  8833 ;;
  8834                           
  8835                           	psect	text45
  8836  001298                     __ptext45:
  8837                           	opt stack 0
  8838  001298                     _WriteRun:
  8839                           	opt stack 23
  8840                           
  8841                           ;eeprom.c: 76: unsigned int add = ++Latest;
  8842                           
  8843                           ;incstack = 0
  8844  001298  0100               	movlb	0	; () banked
  8845  00129A  2BA8               	incf	_Latest& (0+255),f,b
  8846  00129C  C0A8  F00D         	movff	_Latest,WriteRun@add
  8847  0012A0  6A0E               	clrf	WriteRun@add+1,c
  8848                           
  8849                           ; BSR set to: 0
  8850                           ;eeprom.c: 77: if (add > 3) {
  8851  0012A2  500E               	movf	WriteRun@add+1,w,c
  8852  0012A4  E104               	bnz	i2u305_40
  8853  0012A6  0E04               	movlw	4
  8854  0012A8  5C0D               	subwf	WriteRun@add,w,c
  8855  0012AA  A0D8               	btfss	status,0,c
  8856  0012AC  D006               	goto	i2l3877
  8857  0012AE                     i2u305_40:
  8858                           
  8859                           ; BSR set to: 0
  8860                           ;eeprom.c: 78: add -= 4;
  8861  0012AE  0E04               	movlw	4
  8862  0012B0  5E0D               	subwf	WriteRun@add,f,c
  8863  0012B2  0E00               	movlw	0
  8864  0012B4  5A0E               	subwfb	WriteRun@add+1,f,c
  8865                           
  8866                           ; BSR set to: 0
  8867                           ;eeprom.c: 79: Latest = add;
  8868  0012B6  C00D  F0A8         	movff	WriteRun@add,_Latest
  8869  0012BA                     i2l3877:
  8870                           
  8871                           ; BSR set to: 0
  8872                           ;eeprom.c: 80: }
  8873                           ;eeprom.c: 81: add *= 5;
  8874  0012BA  C00D  F001         	movff	WriteRun@add,i2___wmul@multiplier
  8875  0012BE  C00E  F002         	movff	WriteRun@add+1,i2___wmul@multiplier+1
  8876  0012C2  0E00               	movlw	0
  8877  0012C4  6E04               	movwf	i2___wmul@multiplicand+1,c
  8878  0012C6  0E05               	movlw	5
  8879  0012C8  6E03               	movwf	i2___wmul@multiplicand,c
  8880  0012CA  EC7F  F012         	call	i2___wmul	;wreg free
  8881  0012CE  C001  F00D         	movff	?i2___wmul,WriteRun@add
  8882  0012D2  C002  F00E         	movff	?i2___wmul+1,WriteRun@add+1
  8883                           
  8884                           ;eeprom.c: 82: WriteEE(add++ *8, time);
  8885  0012D6  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  8886  0012DA  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  8887  0012DE  90D8               	bcf	status,0,c
  8888  0012E0  360B               	rlcf	??_WriteRun,f,c
  8889  0012E2  360C               	rlcf	??_WriteRun+1,f,c
  8890  0012E4  90D8               	bcf	status,0,c
  8891  0012E6  360B               	rlcf	??_WriteRun,f,c
  8892  0012E8  360C               	rlcf	??_WriteRun+1,f,c
  8893  0012EA  90D8               	bcf	status,0,c
  8894  0012EC  360B               	rlcf	??_WriteRun,f,c
  8895  0012EE  360C               	rlcf	??_WriteRun+1,f,c
  8896  0012F0  C00B  F001         	movff	??_WriteRun,WriteEE@address
  8897  0012F4  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  8898  0012F8  C009  F003         	movff	WriteRun@time,WriteEE@data
  8899  0012FC  EC6C  F012         	call	_WriteEE	;wreg free
  8900  001300  4A0D               	infsnz	WriteRun@add,f,c
  8901  001302  2A0E               	incf	WriteRun@add+1,f,c
  8902                           
  8903                           ;eeprom.c: 83: WriteEE(add++ *8, sorted[0]);
  8904  001304  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  8905  001308  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  8906  00130C  90D8               	bcf	status,0,c
  8907  00130E  360B               	rlcf	??_WriteRun,f,c
  8908  001310  360C               	rlcf	??_WriteRun+1,f,c
  8909  001312  90D8               	bcf	status,0,c
  8910  001314  360B               	rlcf	??_WriteRun,f,c
  8911  001316  360C               	rlcf	??_WriteRun+1,f,c
  8912  001318  90D8               	bcf	status,0,c
  8913  00131A  360B               	rlcf	??_WriteRun,f,c
  8914  00131C  360C               	rlcf	??_WriteRun+1,f,c
  8915  00131E  C00B  F001         	movff	??_WriteRun,WriteEE@address
  8916  001322  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  8917  001326  C007  FFD9         	movff	WriteRun@sorted,fsr2l
  8918  00132A  C008  FFDA         	movff	WriteRun@sorted+1,fsr2h
  8919  00132E  50DF               	movf	indf2,w,c
  8920  001330  6E03               	movwf	WriteEE@data,c
  8921  001332  EC6C  F012         	call	_WriteEE	;wreg free
  8922  001336  4A0D               	infsnz	WriteRun@add,f,c
  8923  001338  2A0E               	incf	WriteRun@add+1,f,c
  8924                           
  8925                           ;eeprom.c: 84: WriteEE(add++ *8, sorted[1]);
  8926  00133A  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  8927  00133E  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  8928  001342  90D8               	bcf	status,0,c
  8929  001344  360B               	rlcf	??_WriteRun,f,c
  8930  001346  360C               	rlcf	??_WriteRun+1,f,c
  8931  001348  90D8               	bcf	status,0,c
  8932  00134A  360B               	rlcf	??_WriteRun,f,c
  8933  00134C  360C               	rlcf	??_WriteRun+1,f,c
  8934  00134E  90D8               	bcf	status,0,c
  8935  001350  360B               	rlcf	??_WriteRun,f,c
  8936  001352  360C               	rlcf	??_WriteRun+1,f,c
  8937  001354  C00B  F001         	movff	??_WriteRun,WriteEE@address
  8938  001358  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  8939  00135C  EE20 F001          	lfsr	2,1
  8940  001360  5007               	movf	WriteRun@sorted,w,c
  8941  001362  26D9               	addwf	fsr2l,f,c
  8942  001364  5008               	movf	WriteRun@sorted+1,w,c
  8943  001366  22DA               	addwfc	fsr2h,f,c
  8944  001368  50DF               	movf	indf2,w,c
  8945  00136A  6E03               	movwf	WriteEE@data,c
  8946  00136C  EC6C  F012         	call	_WriteEE	;wreg free
  8947  001370  4A0D               	infsnz	WriteRun@add,f,c
  8948  001372  2A0E               	incf	WriteRun@add+1,f,c
  8949                           
  8950                           ;eeprom.c: 85: WriteEE(add++ *8, sorted[2]);
  8951  001374  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  8952  001378  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  8953  00137C  90D8               	bcf	status,0,c
  8954  00137E  360B               	rlcf	??_WriteRun,f,c
  8955  001380  360C               	rlcf	??_WriteRun+1,f,c
  8956  001382  90D8               	bcf	status,0,c
  8957  001384  360B               	rlcf	??_WriteRun,f,c
  8958  001386  360C               	rlcf	??_WriteRun+1,f,c
  8959  001388  90D8               	bcf	status,0,c
  8960  00138A  360B               	rlcf	??_WriteRun,f,c
  8961  00138C  360C               	rlcf	??_WriteRun+1,f,c
  8962  00138E  C00B  F001         	movff	??_WriteRun,WriteEE@address
  8963  001392  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  8964  001396  EE20 F002          	lfsr	2,2
  8965  00139A  5007               	movf	WriteRun@sorted,w,c
  8966  00139C  26D9               	addwf	fsr2l,f,c
  8967  00139E  5008               	movf	WriteRun@sorted+1,w,c
  8968  0013A0  22DA               	addwfc	fsr2h,f,c
  8969  0013A2  50DF               	movf	indf2,w,c
  8970  0013A4  6E03               	movwf	WriteEE@data,c
  8971  0013A6  EC6C  F012         	call	_WriteEE	;wreg free
  8972  0013AA  4A0D               	infsnz	WriteRun@add,f,c
  8973  0013AC  2A0E               	incf	WriteRun@add+1,f,c
  8974                           
  8975                           ;eeprom.c: 86: WriteEE(add++ *8, sorted[3]);
  8976  0013AE  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  8977  0013B2  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  8978  0013B6  90D8               	bcf	status,0,c
  8979  0013B8  360B               	rlcf	??_WriteRun,f,c
  8980  0013BA  360C               	rlcf	??_WriteRun+1,f,c
  8981  0013BC  90D8               	bcf	status,0,c
  8982  0013BE  360B               	rlcf	??_WriteRun,f,c
  8983  0013C0  360C               	rlcf	??_WriteRun+1,f,c
  8984  0013C2  90D8               	bcf	status,0,c
  8985  0013C4  360B               	rlcf	??_WriteRun,f,c
  8986  0013C6  360C               	rlcf	??_WriteRun+1,f,c
  8987  0013C8  C00B  F001         	movff	??_WriteRun,WriteEE@address
  8988  0013CC  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  8989  0013D0  EE20 F003          	lfsr	2,3
  8990  0013D4  5007               	movf	WriteRun@sorted,w,c
  8991  0013D6  26D9               	addwf	fsr2l,f,c
  8992  0013D8  5008               	movf	WriteRun@sorted+1,w,c
  8993  0013DA  22DA               	addwfc	fsr2h,f,c
  8994  0013DC  50DF               	movf	indf2,w,c
  8995  0013DE  6E03               	movwf	WriteEE@data,c
  8996  0013E0  EC6C  F012         	call	_WriteEE	;wreg free
  8997  0013E4  4A0D               	infsnz	WriteRun@add,f,c
  8998  0013E6  2A0E               	incf	WriteRun@add+1,f,c
  8999                           
  9000                           ;eeprom.c: 87: WriteEE(160, Latest);
  9001  0013E8  0E00               	movlw	0
  9002  0013EA  6E02               	movwf	WriteEE@address+1,c
  9003  0013EC  0EA0               	movlw	160
  9004  0013EE  6E01               	movwf	WriteEE@address,c
  9005  0013F0  C0A8  F003         	movff	_Latest,WriteEE@data
  9006  0013F4  EC6C  F012         	call	_WriteEE	;wreg free
  9007  0013F8  0012               	return		;funcret
  9008  0013FA                     __end_of_WriteRun:
  9009                           	opt stack 0
  9010                           pclatu	equ	0xFFB
  9011                           pclath	equ	0xFFA
  9012                           tblptru	equ	0xFF8
  9013                           tblptrh	equ	0xFF7
  9014                           tblptrl	equ	0xFF6
  9015                           tablat	equ	0xFF5
  9016                           prodh	equ	0xFF4
  9017                           prodl	equ	0xFF3
  9018                           intcon	equ	0xFF2
  9019                           intcon2	equ	0xFF1
  9020                           intcon3	equ	0xFF0
  9021                           postinc0	equ	0xFEE
  9022                           fsr0h	equ	0xFEA
  9023                           fsr0l	equ	0xFE9
  9024                           wreg	equ	0xFE8
  9025                           postdec1	equ	0xFE5
  9026                           plusw1	equ	0xFE3
  9027                           fsr1h	equ	0xFE2
  9028                           fsr1l	equ	0xFE1
  9029                           indf2	equ	0xFDF
  9030                           postinc2	equ	0xFDE
  9031                           postdec2	equ	0xFDD
  9032                           plusw2	equ	0xFDB
  9033                           fsr2h	equ	0xFDA
  9034                           fsr2l	equ	0xFD9
  9035                           status	equ	0xFD8
  9036                           
  9037 ;; *************** function _WriteEE *****************
  9038 ;; Defined at:
  9039 ;;		line 34 in file "eeprom.c"
  9040 ;; Parameters:    Size  Location     Type
  9041 ;;  address         2    0[COMRAM] unsigned int 
  9042 ;;  data            1    2[COMRAM] unsigned char 
  9043 ;; Auto vars:     Size  Location     Type
  9044 ;;		None
  9045 ;; Return value:  Size  Location     Type
  9046 ;;                  1    wreg      void 
  9047 ;; Registers used:
  9048 ;;		wreg, status,2
  9049 ;; Tracked objects:
  9050 ;;		On entry : 0/0
  9051 ;;		On exit  : 0/0
  9052 ;;		Unchanged: 0/0
  9053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9054 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9057 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9058 ;;Total ram usage:        3 bytes
  9059 ;; Hardware stack levels used:    1
  9060 ;; This function calls:
  9061 ;;		Nothing
  9062 ;; This function is called by:
  9063 ;;		_WriteRun
  9064 ;; This function uses a non-reentrant model
  9065 ;;
  9066                           
  9067                           	psect	text46
  9068  0024D8                     __ptext46:
  9069                           	opt stack 0
  9070  0024D8                     _WriteEE:
  9071                           	opt stack 23
  9072                           
  9073                           ;eeprom.c: 36: EEADRH = (unsigned char) (address >> 8);
  9074                           
  9075                           ;incstack = 0
  9076  0024D8  5002               	movf	WriteEE@address+1,w,c
  9077  0024DA  6EAA               	movwf	4010,c	;volatile
  9078                           
  9079                           ;eeprom.c: 37: EEADR = (unsigned char) address;
  9080  0024DC  C001  FFA9         	movff	WriteEE@address,4009	;volatile
  9081                           
  9082                           ;eeprom.c: 39: EEDATA = data;
  9083  0024E0  C003  FFA8         	movff	WriteEE@data,4008	;volatile
  9084                           
  9085                           ;eeprom.c: 40: EECON1bits.EEPGD = 0;
  9086  0024E4  9EA6               	bcf	4006,7,c	;volatile
  9087                           
  9088                           ;eeprom.c: 41: EECON1bits.CFGS = 0;
  9089  0024E6  9CA6               	bcf	4006,6,c	;volatile
  9090                           
  9091                           ;eeprom.c: 42: EECON1bits.WREN = 1;
  9092  0024E8  84A6               	bsf	4006,2,c	;volatile
  9093                           
  9094                           ;eeprom.c: 46: EECON2 = 0x55;
  9095  0024EA  0E55               	movlw	85
  9096  0024EC  6EA7               	movwf	4007,c	;volatile
  9097                           
  9098                           ;eeprom.c: 47: EECON2 = 0xAA;
  9099  0024EE  0EAA               	movlw	170
  9100  0024F0  6EA7               	movwf	4007,c	;volatile
  9101                           
  9102                           ;eeprom.c: 48: EECON1bits.WR = 1;
  9103  0024F2  82A6               	bsf	4006,1,c	;volatile
  9104  0024F4                     i2l461:
  9105  0024F4  A8A1               	btfss	4001,4,c	;volatile
  9106  0024F6  D7FE               	goto	i2l461
  9107                           
  9108                           ;eeprom.c: 53: PIR2bits.EEIF = 0;
  9109  0024F8  98A1               	bcf	4001,4,c	;volatile
  9110                           
  9111                           ;eeprom.c: 54: EECON1bits.WREN = 0;
  9112  0024FA  94A6               	bcf	4006,2,c	;volatile
  9113  0024FC  0012               	return		;funcret
  9114  0024FE                     __end_of_WriteEE:
  9115                           	opt stack 0
  9116                           pclatu	equ	0xFFB
  9117                           pclath	equ	0xFFA
  9118                           tblptru	equ	0xFF8
  9119                           tblptrh	equ	0xFF7
  9120                           tblptrl	equ	0xFF6
  9121                           tablat	equ	0xFF5
  9122                           prodh	equ	0xFF4
  9123                           prodl	equ	0xFF3
  9124                           intcon	equ	0xFF2
  9125                           intcon2	equ	0xFF1
  9126                           intcon3	equ	0xFF0
  9127                           postinc0	equ	0xFEE
  9128                           fsr0h	equ	0xFEA
  9129                           fsr0l	equ	0xFE9
  9130                           wreg	equ	0xFE8
  9131                           postdec1	equ	0xFE5
  9132                           plusw1	equ	0xFE3
  9133                           fsr1h	equ	0xFE2
  9134                           fsr1l	equ	0xFE1
  9135                           indf2	equ	0xFDF
  9136                           postinc2	equ	0xFDE
  9137                           postdec2	equ	0xFDD
  9138                           plusw2	equ	0xFDB
  9139                           fsr2h	equ	0xFDA
  9140                           fsr2l	equ	0xFD9
  9141                           status	equ	0xFD8
  9142                           
  9143 ;; *************** function _CW90 *****************
  9144 ;; Defined at:
  9145 ;;		line 19 in file "motors.c"
  9146 ;; Parameters:    Size  Location     Type
  9147 ;;  port            2   21[COMRAM] PTR int 
  9148 ;;		 -> simulate@portCW(6), mainloop@portCW(6), 
  9149 ;; Auto vars:     Size  Location     Type
  9150 ;;		None
  9151 ;; Return value:  Size  Location     Type
  9152 ;;                  1    wreg      void 
  9153 ;; Registers used:
  9154 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9155 ;; Tracked objects:
  9156 ;;		On entry : 0/0
  9157 ;;		On exit  : 0/0
  9158 ;;		Unchanged: 0/0
  9159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9160 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9162 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9163 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9164 ;;Total ram usage:        8 bytes
  9165 ;; Hardware stack levels used:    1
  9166 ;; Hardware stack levels required when called:    2
  9167 ;; This function calls:
  9168 ;;		_PWMC
  9169 ;; This function is called by:
  9170 ;;		_mainloop
  9171 ;;		_simulate
  9172 ;; This function uses a non-reentrant model
  9173 ;;
  9174                           
  9175                           	psect	text47
  9176  001BEC                     __ptext47:
  9177                           	opt stack 0
  9178  001BEC                     _CW90:
  9179                           	opt stack 22
  9180                           
  9181                           ;motors.c: 21: if (port[0] + port[1] + port[2] == 0)return;
  9182                           
  9183                           ;incstack = 0
  9184  001BEC  EE20 F004          	lfsr	2,4
  9185  001BF0  5016               	movf	CW90@port,w,c
  9186  001BF2  26D9               	addwf	fsr2l,f,c
  9187  001BF4  5017               	movf	CW90@port+1,w,c
  9188  001BF6  22DA               	addwfc	fsr2h,f,c
  9189  001BF8  CFDE F018          	movff	postinc2,??_CW90
  9190  001BFC  CFDD F019          	movff	postdec2,??_CW90+1
  9191  001C00  EE20 F002          	lfsr	2,2
  9192  001C04  5016               	movf	CW90@port,w,c
  9193  001C06  26D9               	addwf	fsr2l,f,c
  9194  001C08  5017               	movf	CW90@port+1,w,c
  9195  001C0A  22DA               	addwfc	fsr2h,f,c
  9196  001C0C  CFDE F01A          	movff	postinc2,??_CW90+2
  9197  001C10  CFDD F01B          	movff	postdec2,??_CW90+3
  9198  001C14  C016  FFD9         	movff	CW90@port,fsr2l
  9199  001C18  C017  FFDA         	movff	CW90@port+1,fsr2h
  9200  001C1C  CFDE F01C          	movff	postinc2,??_CW90+4
  9201  001C20  CFDD F01D          	movff	postdec2,??_CW90+5
  9202  001C24  501A               	movf	??_CW90+2,w,c
  9203  001C26  261C               	addwf	??_CW90+4,f,c
  9204  001C28  501B               	movf	??_CW90+3,w,c
  9205  001C2A  221D               	addwfc	??_CW90+5,f,c
  9206  001C2C  5018               	movf	??_CW90,w,c
  9207  001C2E  261C               	addwf	??_CW90+4,f,c
  9208  001C30  5019               	movf	??_CW90+1,w,c
  9209  001C32  221D               	addwfc	??_CW90+5,f,c
  9210  001C34  501C               	movf	??_CW90+4,w,c
  9211  001C36  101D               	iorwf	??_CW90+5,w,c
  9212  001C38  B4D8               	btfsc	status,2,c
  9213  001C3A  0012               	return	
  9214                           
  9215                           ;motors.c: 22: PWMC(3000, 120, port);
  9216  001C3C  0E0B               	movlw	11
  9217  001C3E  6E0A               	movwf	PWMC@widthus+1,c
  9218  001C40  0EB8               	movlw	184
  9219  001C42  6E09               	movwf	PWMC@widthus,c
  9220  001C44  0E00               	movlw	0
  9221  001C46  6E0C               	movwf	PWMC@cycles+1,c
  9222  001C48  0E78               	movlw	120
  9223  001C4A  6E0B               	movwf	PWMC@cycles,c
  9224  001C4C  C016  F00D         	movff	CW90@port,PWMC@port
  9225  001C50  C017  F00E         	movff	CW90@port+1,PWMC@port+1
  9226  001C54  EC10  F00B         	call	_PWMC	;wreg free
  9227                           
  9228                           ;motors.c: 23: PWMC(400, 2, port);
  9229  001C58  0E01               	movlw	1
  9230  001C5A  6E0A               	movwf	PWMC@widthus+1,c
  9231  001C5C  0E90               	movlw	144
  9232  001C5E  6E09               	movwf	PWMC@widthus,c
  9233  001C60  0E00               	movlw	0
  9234  001C62  6E0C               	movwf	PWMC@cycles+1,c
  9235  001C64  0E02               	movlw	2
  9236  001C66  6E0B               	movwf	PWMC@cycles,c
  9237  001C68  C016  F00D         	movff	CW90@port,PWMC@port
  9238  001C6C  C017  F00E         	movff	CW90@port+1,PWMC@port+1
  9239  001C70  EC10  F00B         	call	_PWMC	;wreg free
  9240  001C74  0012               	return		;funcret
  9241  001C76                     __end_of_CW90:
  9242                           	opt stack 0
  9243                           pclatu	equ	0xFFB
  9244                           pclath	equ	0xFFA
  9245                           tblptru	equ	0xFF8
  9246                           tblptrh	equ	0xFF7
  9247                           tblptrl	equ	0xFF6
  9248                           tablat	equ	0xFF5
  9249                           prodh	equ	0xFF4
  9250                           prodl	equ	0xFF3
  9251                           intcon	equ	0xFF2
  9252                           intcon2	equ	0xFF1
  9253                           intcon3	equ	0xFF0
  9254                           postinc0	equ	0xFEE
  9255                           fsr0h	equ	0xFEA
  9256                           fsr0l	equ	0xFE9
  9257                           wreg	equ	0xFE8
  9258                           postdec1	equ	0xFE5
  9259                           plusw1	equ	0xFE3
  9260                           fsr1h	equ	0xFE2
  9261                           fsr1l	equ	0xFE1
  9262                           indf2	equ	0xFDF
  9263                           postinc2	equ	0xFDE
  9264                           postdec2	equ	0xFDD
  9265                           plusw2	equ	0xFDB
  9266                           fsr2h	equ	0xFDA
  9267                           fsr2l	equ	0xFD9
  9268                           status	equ	0xFD8
  9269                           
  9270 ;; *************** function _CCW90 *****************
  9271 ;; Defined at:
  9272 ;;		line 26 in file "motors.c"
  9273 ;; Parameters:    Size  Location     Type
  9274 ;;  port            2   21[COMRAM] PTR int 
  9275 ;;		 -> simulate@portCCW(6), mainloop@portCW(6), 
  9276 ;; Auto vars:     Size  Location     Type
  9277 ;;		None
  9278 ;; Return value:  Size  Location     Type
  9279 ;;                  1    wreg      void 
  9280 ;; Registers used:
  9281 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9282 ;; Tracked objects:
  9283 ;;		On entry : 0/0
  9284 ;;		On exit  : 0/0
  9285 ;;		Unchanged: 0/0
  9286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9287 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9289 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9290 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9291 ;;Total ram usage:        8 bytes
  9292 ;; Hardware stack levels used:    1
  9293 ;; Hardware stack levels required when called:    2
  9294 ;; This function calls:
  9295 ;;		_PWMC
  9296 ;; This function is called by:
  9297 ;;		_mainloop
  9298 ;;		_simulate
  9299 ;; This function uses a non-reentrant model
  9300 ;;
  9301                           
  9302                           	psect	text48
  9303  001C76                     __ptext48:
  9304                           	opt stack 0
  9305  001C76                     _CCW90:
  9306                           	opt stack 22
  9307                           
  9308                           ;motors.c: 28: if (port[0] + port[1] + port[2] == 0)return;
  9309                           
  9310                           ;incstack = 0
  9311  001C76  EE20 F004          	lfsr	2,4
  9312  001C7A  5016               	movf	CCW90@port,w,c
  9313  001C7C  26D9               	addwf	fsr2l,f,c
  9314  001C7E  5017               	movf	CCW90@port+1,w,c
  9315  001C80  22DA               	addwfc	fsr2h,f,c
  9316  001C82  CFDE F018          	movff	postinc2,??_CCW90
  9317  001C86  CFDD F019          	movff	postdec2,??_CCW90+1
  9318  001C8A  EE20 F002          	lfsr	2,2
  9319  001C8E  5016               	movf	CCW90@port,w,c
  9320  001C90  26D9               	addwf	fsr2l,f,c
  9321  001C92  5017               	movf	CCW90@port+1,w,c
  9322  001C94  22DA               	addwfc	fsr2h,f,c
  9323  001C96  CFDE F01A          	movff	postinc2,??_CCW90+2
  9324  001C9A  CFDD F01B          	movff	postdec2,??_CCW90+3
  9325  001C9E  C016  FFD9         	movff	CCW90@port,fsr2l
  9326  001CA2  C017  FFDA         	movff	CCW90@port+1,fsr2h
  9327  001CA6  CFDE F01C          	movff	postinc2,??_CCW90+4
  9328  001CAA  CFDD F01D          	movff	postdec2,??_CCW90+5
  9329  001CAE  501A               	movf	??_CCW90+2,w,c
  9330  001CB0  261C               	addwf	??_CCW90+4,f,c
  9331  001CB2  501B               	movf	??_CCW90+3,w,c
  9332  001CB4  221D               	addwfc	??_CCW90+5,f,c
  9333  001CB6  5018               	movf	??_CCW90,w,c
  9334  001CB8  261C               	addwf	??_CCW90+4,f,c
  9335  001CBA  5019               	movf	??_CCW90+1,w,c
  9336  001CBC  221D               	addwfc	??_CCW90+5,f,c
  9337  001CBE  501C               	movf	??_CCW90+4,w,c
  9338  001CC0  101D               	iorwf	??_CCW90+5,w,c
  9339  001CC2  B4D8               	btfsc	status,2,c
  9340  001CC4  0012               	return	
  9341                           
  9342                           ;motors.c: 29: PWMC(400, 1000, port);
  9343  001CC6  0E01               	movlw	1
  9344  001CC8  6E0A               	movwf	PWMC@widthus+1,c
  9345  001CCA  0E90               	movlw	144
  9346  001CCC  6E09               	movwf	PWMC@widthus,c
  9347  001CCE  0E03               	movlw	3
  9348  001CD0  6E0C               	movwf	PWMC@cycles+1,c
  9349  001CD2  0EE8               	movlw	232
  9350  001CD4  6E0B               	movwf	PWMC@cycles,c
  9351  001CD6  C016  F00D         	movff	CCW90@port,PWMC@port
  9352  001CDA  C017  F00E         	movff	CCW90@port+1,PWMC@port+1
  9353  001CDE  EC10  F00B         	call	_PWMC	;wreg free
  9354                           
  9355                           ;motors.c: 30: PWMC(3000, 2, port);
  9356  001CE2  0E0B               	movlw	11
  9357  001CE4  6E0A               	movwf	PWMC@widthus+1,c
  9358  001CE6  0EB8               	movlw	184
  9359  001CE8  6E09               	movwf	PWMC@widthus,c
  9360  001CEA  0E00               	movlw	0
  9361  001CEC  6E0C               	movwf	PWMC@cycles+1,c
  9362  001CEE  0E02               	movlw	2
  9363  001CF0  6E0B               	movwf	PWMC@cycles,c
  9364  001CF2  C016  F00D         	movff	CCW90@port,PWMC@port
  9365  001CF6  C017  F00E         	movff	CCW90@port+1,PWMC@port+1
  9366  001CFA  EC10  F00B         	call	_PWMC	;wreg free
  9367  001CFE  0012               	return		;funcret
  9368  001D00                     __end_of_CCW90:
  9369                           	opt stack 0
  9370                           pclatu	equ	0xFFB
  9371                           pclath	equ	0xFFA
  9372                           tblptru	equ	0xFF8
  9373                           tblptrh	equ	0xFF7
  9374                           tblptrl	equ	0xFF6
  9375                           tablat	equ	0xFF5
  9376                           prodh	equ	0xFF4
  9377                           prodl	equ	0xFF3
  9378                           intcon	equ	0xFF2
  9379                           intcon2	equ	0xFF1
  9380                           intcon3	equ	0xFF0
  9381                           postinc0	equ	0xFEE
  9382                           fsr0h	equ	0xFEA
  9383                           fsr0l	equ	0xFE9
  9384                           wreg	equ	0xFE8
  9385                           postdec1	equ	0xFE5
  9386                           plusw1	equ	0xFE3
  9387                           fsr1h	equ	0xFE2
  9388                           fsr1l	equ	0xFE1
  9389                           indf2	equ	0xFDF
  9390                           postinc2	equ	0xFDE
  9391                           postdec2	equ	0xFDD
  9392                           plusw2	equ	0xFDB
  9393                           fsr2h	equ	0xFDA
  9394                           fsr2l	equ	0xFD9
  9395                           status	equ	0xFD8
  9396                           
  9397 ;; *************** function _PWMC *****************
  9398 ;; Defined at:
  9399 ;;		line 4 in file "motors.c"
  9400 ;; Parameters:    Size  Location     Type
  9401 ;;  widthus         2    8[COMRAM] int 
  9402 ;;  cycles          2   10[COMRAM] int 
  9403 ;;  port            2   12[COMRAM] PTR int 
  9404 ;;		 -> intrpt@port(6), simulate@portShake(6), simulate@portCCW(6), simulate@portCW(6), 
  9405 ;;		 -> mainloop@portCW(6), 
  9406 ;; Auto vars:     Size  Location     Type
  9407 ;;  countdown       2   19[COMRAM] int 
  9408 ;; Return value:  Size  Location     Type
  9409 ;;                  1    wreg      void 
  9410 ;; Registers used:
  9411 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9412 ;; Tracked objects:
  9413 ;;		On entry : 0/0
  9414 ;;		On exit  : 0/0
  9415 ;;		Unchanged: 0/0
  9416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9417 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9418 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9419 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9420 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9421 ;;Total ram usage:       13 bytes
  9422 ;; Hardware stack levels used:    1
  9423 ;; Hardware stack levels required when called:    1
  9424 ;; This function calls:
  9425 ;;		___awdiv
  9426 ;; This function is called by:
  9427 ;;		_simulate
  9428 ;;		_intrpt
  9429 ;;		_CW90
  9430 ;;		_CCW90
  9431 ;;		_shake
  9432 ;; This function uses a non-reentrant model
  9433 ;;
  9434                           
  9435                           	psect	text49
  9436  001620                     __ptext49:
  9437                           	opt stack 0
  9438  001620                     _PWMC:
  9439                           	opt stack 23
  9440                           
  9441                           ;motors.c: 5: widthus /= 10;
  9442                           
  9443                           ;incstack = 0
  9444  001620  C009  F001         	movff	PWMC@widthus,___awdiv@dividend
  9445  001624  C00A  F002         	movff	PWMC@widthus+1,___awdiv@dividend+1
  9446  001628  0E00               	movlw	0
  9447  00162A  6E04               	movwf	___awdiv@divisor+1,c
  9448  00162C  0E0A               	movlw	10
  9449  00162E  6E03               	movwf	___awdiv@divisor,c
  9450  001630  EC80  F00E         	call	___awdiv	;wreg free
  9451  001634  C001  F009         	movff	?___awdiv,PWMC@widthus
  9452  001638  C002  F00A         	movff	?___awdiv+1,PWMC@widthus+1
  9453                           
  9454                           ;motors.c: 6: widthus -= 1;
  9455  00163C  0609               	decf	PWMC@widthus,f,c
  9456  00163E  A0D8               	btfss	status,0,c
  9457  001640  060A               	decf	PWMC@widthus+1,f,c
  9458                           
  9459                           ;motors.c: 7: int countdown = widthus;
  9460  001642  C009  F014         	movff	PWMC@widthus,PWMC@countdown
  9461  001646  C00A  F015         	movff	PWMC@widthus+1,PWMC@countdown+1
  9462  00164A                     i2l3381:
  9463  00164A  BE0C               	btfsc	PWMC@cycles+1,7,c
  9464  00164C  0012               	return	
  9465  00164E  500C               	movf	PWMC@cycles+1,w,c
  9466  001650  E103               	bnz	i2l290
  9467  001652  040B               	decf	PWMC@cycles,w,c
  9468  001654  A0D8               	btfss	status,0,c
  9469  001656  0012               	return	
  9470  001658                     i2l290:
  9471                           
  9472                           ;motors.c: 9: countdown = widthus;
  9473  001658  C009  F014         	movff	PWMC@widthus,PWMC@countdown
  9474  00165C  C00A  F015         	movff	PWMC@widthus+1,PWMC@countdown+1
  9475                           
  9476                           ;motors.c: 10: LATC0 = (1 ^ LATC0) & port[0];
  9477  001660  0E00               	movlw	0
  9478  001662  6E11               	movwf	_PWMC$1423,c
  9479  001664  B08B               	btfsc	3979,0,c	;volatile
  9480  001666  D00D               	goto	i2l3393
  9481  001668  C00D  FFD9         	movff	PWMC@port,fsr2l
  9482  00166C  C00E  FFDA         	movff	PWMC@port+1,fsr2h
  9483  001670  CFDE F00F          	movff	postinc2,??_PWMC
  9484  001674  CFDD F010          	movff	postdec2,??_PWMC+1
  9485  001678  300F               	rrcf	??_PWMC,w,c
  9486  00167A  A0D8               	btfss	status,0,c
  9487  00167C  D002               	goto	i2l3393
  9488  00167E  0E01               	movlw	1
  9489  001680  6E11               	movwf	_PWMC$1423,c
  9490  001682                     i2l3393:
  9491  001682  B011               	btfsc	_PWMC$1423,0,c
  9492  001684  D002               	bra	i2u238_45
  9493  001686  908B               	bcf	3979,0,c	;volatile
  9494  001688  D001               	bra	i2u238_46
  9495  00168A                     i2u238_45:
  9496  00168A  808B               	bsf	3979,0,c	;volatile
  9497  00168C                     i2u238_46:
  9498                           
  9499                           ;motors.c: 11: LATC1 = (1 ^ LATC1) & port[1];
  9500  00168C  0E00               	movlw	0
  9501  00168E  6E12               	movwf	_PWMC$1424,c
  9502  001690  B28B               	btfsc	3979,1,c	;volatile
  9503  001692  D00F               	goto	i2l3401
  9504  001694  EE20 F002          	lfsr	2,2
  9505  001698  500D               	movf	PWMC@port,w,c
  9506  00169A  26D9               	addwf	fsr2l,f,c
  9507  00169C  500E               	movf	PWMC@port+1,w,c
  9508  00169E  22DA               	addwfc	fsr2h,f,c
  9509  0016A0  CFDE F00F          	movff	postinc2,??_PWMC
  9510  0016A4  CFDD F010          	movff	postdec2,??_PWMC+1
  9511  0016A8  300F               	rrcf	??_PWMC,w,c
  9512  0016AA  A0D8               	btfss	status,0,c
  9513  0016AC  D002               	goto	i2l3401
  9514  0016AE  0E01               	movlw	1
  9515  0016B0  6E12               	movwf	_PWMC$1424,c
  9516  0016B2                     i2l3401:
  9517  0016B2  B012               	btfsc	_PWMC$1424,0,c
  9518  0016B4  D002               	bra	i2u241_45
  9519  0016B6  928B               	bcf	3979,1,c	;volatile
  9520  0016B8  D001               	bra	i2u241_46
  9521  0016BA                     i2u241_45:
  9522  0016BA  828B               	bsf	3979,1,c	;volatile
  9523  0016BC                     i2u241_46:
  9524                           
  9525                           ;motors.c: 12: LATC2 = (1 ^ LATC2) & port[2];
  9526  0016BC  0E00               	movlw	0
  9527  0016BE  6E13               	movwf	_PWMC$1425,c
  9528  0016C0  B48B               	btfsc	3979,2,c	;volatile
  9529  0016C2  D00F               	goto	i2l3409
  9530  0016C4  EE20 F004          	lfsr	2,4
  9531  0016C8  500D               	movf	PWMC@port,w,c
  9532  0016CA  26D9               	addwf	fsr2l,f,c
  9533  0016CC  500E               	movf	PWMC@port+1,w,c
  9534  0016CE  22DA               	addwfc	fsr2h,f,c
  9535  0016D0  CFDE F00F          	movff	postinc2,??_PWMC
  9536  0016D4  CFDD F010          	movff	postdec2,??_PWMC+1
  9537  0016D8  300F               	rrcf	??_PWMC,w,c
  9538  0016DA  A0D8               	btfss	status,0,c
  9539  0016DC  D002               	goto	i2l3409
  9540  0016DE  0E01               	movlw	1
  9541  0016E0  6E13               	movwf	_PWMC$1425,c
  9542  0016E2                     i2l3409:
  9543  0016E2  B013               	btfsc	_PWMC$1425,0,c
  9544  0016E4  D002               	bra	i2u244_45
  9545  0016E6  948B               	bcf	3979,2,c	;volatile
  9546  0016E8  D001               	bra	i2u244_46
  9547  0016EA                     i2u244_45:
  9548  0016EA  848B               	bsf	3979,2,c	;volatile
  9549  0016EC                     i2u244_46:
  9550  0016EC                     i2l3411:
  9551  0016EC  BE15               	btfsc	PWMC@countdown+1,7,c
  9552  0016EE  D00D               	goto	i2l3419
  9553  0016F0  5015               	movf	PWMC@countdown+1,w,c
  9554  0016F2  E103               	bnz	i2l3415
  9555  0016F4  0414               	decf	PWMC@countdown,w,c
  9556  0016F6  A0D8               	btfss	status,0,c
  9557  0016F8  D008               	goto	i2l3419
  9558  0016FA                     i2l3415:
  9559                           
  9560                           ;motors.c: 14: _delay((unsigned long)((5)*(8000000/4000000.0)));
  9561  0016FA  0E03               	movlw	3
  9562  0016FC                     i2u369_47:
  9563  0016FC  2EE8               	decfsz	wreg,f,c
  9564  0016FE  D7FE               	bra	i2u369_47
  9565  001700  F000               	nop	
  9566  001702  0614               	decf	PWMC@countdown,f,c
  9567  001704  A0D8               	btfss	status,0,c
  9568  001706  0615               	decf	PWMC@countdown+1,f,c
  9569  001708  D7F1               	goto	i2l3411
  9570  00170A                     i2l3419:
  9571  00170A  060B               	decf	PWMC@cycles,f,c
  9572  00170C  A0D8               	btfss	status,0,c
  9573  00170E  060C               	decf	PWMC@cycles+1,f,c
  9574  001710  D79C               	goto	i2l3381
  9575  001712                     __end_of_PWMC:
  9576                           	opt stack 0
  9577                           pclatu	equ	0xFFB
  9578                           pclath	equ	0xFFA
  9579                           tblptru	equ	0xFF8
  9580                           tblptrh	equ	0xFF7
  9581                           tblptrl	equ	0xFF6
  9582                           tablat	equ	0xFF5
  9583                           prodh	equ	0xFF4
  9584                           prodl	equ	0xFF3
  9585                           intcon	equ	0xFF2
  9586                           intcon2	equ	0xFF1
  9587                           intcon3	equ	0xFF0
  9588                           postinc0	equ	0xFEE
  9589                           fsr0h	equ	0xFEA
  9590                           fsr0l	equ	0xFE9
  9591                           wreg	equ	0xFE8
  9592                           postdec1	equ	0xFE5
  9593                           plusw1	equ	0xFE3
  9594                           fsr1h	equ	0xFE2
  9595                           fsr1l	equ	0xFE1
  9596                           indf2	equ	0xFDF
  9597                           postinc2	equ	0xFDE
  9598                           postdec2	equ	0xFDD
  9599                           plusw2	equ	0xFDB
  9600                           fsr2h	equ	0xFDA
  9601                           fsr2l	equ	0xFD9
  9602                           status	equ	0xFD8
  9603                           
  9604 ;; *************** function ___awdiv *****************
  9605 ;; Defined at:
  9606 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  9607 ;; Parameters:    Size  Location     Type
  9608 ;;  dividend        2    0[COMRAM] int 
  9609 ;;  divisor         2    2[COMRAM] int 
  9610 ;; Auto vars:     Size  Location     Type
  9611 ;;  quotient        2    6[COMRAM] int 
  9612 ;;  sign            1    5[COMRAM] unsigned char 
  9613 ;;  counter         1    4[COMRAM] unsigned char 
  9614 ;; Return value:  Size  Location     Type
  9615 ;;                  2    0[COMRAM] int 
  9616 ;; Registers used:
  9617 ;;		wreg, status,2, status,0
  9618 ;; Tracked objects:
  9619 ;;		On entry : 0/0
  9620 ;;		On exit  : 0/0
  9621 ;;		Unchanged: 0/0
  9622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9623 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9624 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9626 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9627 ;;Total ram usage:        8 bytes
  9628 ;; Hardware stack levels used:    1
  9629 ;; This function calls:
  9630 ;;		Nothing
  9631 ;; This function is called by:
  9632 ;;		_PWMC
  9633 ;; This function uses a non-reentrant model
  9634 ;;
  9635                           
  9636                           	psect	text50
  9637  001D00                     __ptext50:
  9638                           	opt stack 0
  9639  001D00                     ___awdiv:
  9640                           	opt stack 23
  9641                           
  9642                           ;incstack = 0
  9643  001D00  0E00               	movlw	0
  9644  001D02  6E06               	movwf	___awdiv@sign,c
  9645  001D04  AE04               	btfss	___awdiv@divisor+1,7,c
  9646  001D06  D006               	goto	i2l3147
  9647  001D08  6C03               	negf	___awdiv@divisor,c
  9648  001D0A  1E04               	comf	___awdiv@divisor+1,f,c
  9649  001D0C  B0D8               	btfsc	status,0,c
  9650  001D0E  2A04               	incf	___awdiv@divisor+1,f,c
  9651  001D10  0E01               	movlw	1
  9652  001D12  6E06               	movwf	___awdiv@sign,c
  9653  001D14                     i2l3147:
  9654  001D14  AE02               	btfss	___awdiv@dividend+1,7,c
  9655  001D16  D006               	goto	i2l3153
  9656  001D18  6C01               	negf	___awdiv@dividend,c
  9657  001D1A  1E02               	comf	___awdiv@dividend+1,f,c
  9658  001D1C  B0D8               	btfsc	status,0,c
  9659  001D1E  2A02               	incf	___awdiv@dividend+1,f,c
  9660  001D20  0E01               	movlw	1
  9661  001D22  1A06               	xorwf	___awdiv@sign,f,c
  9662  001D24                     i2l3153:
  9663  001D24  0E00               	movlw	0
  9664  001D26  6E08               	movwf	___awdiv@quotient+1,c
  9665  001D28  0E00               	movlw	0
  9666  001D2A  6E07               	movwf	___awdiv@quotient,c
  9667  001D2C  5003               	movf	___awdiv@divisor,w,c
  9668  001D2E  1004               	iorwf	___awdiv@divisor+1,w,c
  9669  001D30  B4D8               	btfsc	status,2,c
  9670  001D32  D01C               	goto	i2l3175
  9671  001D34  0E01               	movlw	1
  9672  001D36  6E05               	movwf	___awdiv@counter,c
  9673  001D38  D004               	goto	i2l3161
  9674  001D3A                     i2l3159:
  9675  001D3A  90D8               	bcf	status,0,c
  9676  001D3C  3603               	rlcf	___awdiv@divisor,f,c
  9677  001D3E  3604               	rlcf	___awdiv@divisor+1,f,c
  9678  001D40  2A05               	incf	___awdiv@counter,f,c
  9679  001D42                     i2l3161:
  9680  001D42  AE04               	btfss	___awdiv@divisor+1,7,c
  9681  001D44  D7FA               	goto	i2l3159
  9682  001D46                     i2l3163:
  9683  001D46  90D8               	bcf	status,0,c
  9684  001D48  3607               	rlcf	___awdiv@quotient,f,c
  9685  001D4A  3608               	rlcf	___awdiv@quotient+1,f,c
  9686  001D4C  5003               	movf	___awdiv@divisor,w,c
  9687  001D4E  5C01               	subwf	___awdiv@dividend,w,c
  9688  001D50  5004               	movf	___awdiv@divisor+1,w,c
  9689  001D52  5802               	subwfb	___awdiv@dividend+1,w,c
  9690  001D54  A0D8               	btfss	status,0,c
  9691  001D56  D005               	goto	i2l3171
  9692  001D58  5003               	movf	___awdiv@divisor,w,c
  9693  001D5A  5E01               	subwf	___awdiv@dividend,f,c
  9694  001D5C  5004               	movf	___awdiv@divisor+1,w,c
  9695  001D5E  5A02               	subwfb	___awdiv@dividend+1,f,c
  9696  001D60  8007               	bsf	___awdiv@quotient,0,c
  9697  001D62                     i2l3171:
  9698  001D62  90D8               	bcf	status,0,c
  9699  001D64  3204               	rrcf	___awdiv@divisor+1,f,c
  9700  001D66  3203               	rrcf	___awdiv@divisor,f,c
  9701  001D68  2E05               	decfsz	___awdiv@counter,f,c
  9702  001D6A  D7ED               	goto	i2l3163
  9703  001D6C                     i2l3175:
  9704  001D6C  5006               	movf	___awdiv@sign,w,c
  9705  001D6E  B4D8               	btfsc	status,2,c
  9706  001D70  D004               	goto	i2l3179
  9707  001D72  6C07               	negf	___awdiv@quotient,c
  9708  001D74  1E08               	comf	___awdiv@quotient+1,f,c
  9709  001D76  B0D8               	btfsc	status,0,c
  9710  001D78  2A08               	incf	___awdiv@quotient+1,f,c
  9711  001D7A                     i2l3179:
  9712  001D7A  C007  F001         	movff	___awdiv@quotient,?___awdiv
  9713  001D7E  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  9714  001D82  0012               	return	
  9715  001D84                     __end_of___awdiv:
  9716                           	opt stack 0
  9717                           pclatu	equ	0xFFB
  9718                           pclath	equ	0xFFA
  9719                           tblptru	equ	0xFF8
  9720                           tblptrh	equ	0xFF7
  9721                           tblptrl	equ	0xFF6
  9722                           tablat	equ	0xFF5
  9723                           prodh	equ	0xFF4
  9724                           prodl	equ	0xFF3
  9725                           intcon	equ	0xFF2
  9726                           intcon2	equ	0xFF1
  9727                           intcon3	equ	0xFF0
  9728                           postinc0	equ	0xFEE
  9729                           fsr0h	equ	0xFEA
  9730                           fsr0l	equ	0xFE9
  9731                           wreg	equ	0xFE8
  9732                           postdec1	equ	0xFE5
  9733                           plusw1	equ	0xFE3
  9734                           fsr1h	equ	0xFE2
  9735                           fsr1l	equ	0xFE1
  9736                           indf2	equ	0xFDF
  9737                           postinc2	equ	0xFDE
  9738                           postdec2	equ	0xFDD
  9739                           plusw2	equ	0xFDB
  9740                           fsr2h	equ	0xFDA
  9741                           fsr2l	equ	0xFD9
  9742                           status	equ	0xFD8
  9743                           
  9744 ;; *************** function _PermLog *****************
  9745 ;; Defined at:
  9746 ;;		line 90 in file "eeprom.c"
  9747 ;; Parameters:    Size  Location     Type
  9748 ;;		None
  9749 ;; Auto vars:     Size  Location     Type
  9750 ;;  sorted          4   49[COMRAM] unsigned char [4]
  9751 ;;  time            2   54[COMRAM] unsigned int 
  9752 ;;  backruns        2   56[COMRAM] int 
  9753 ;;  goback          1   53[COMRAM] unsigned char 
  9754 ;; Return value:  Size  Location     Type
  9755 ;;                  1    wreg      void 
  9756 ;; Registers used:
  9757 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9758 ;; Tracked objects:
  9759 ;;		On entry : 0/0
  9760 ;;		On exit  : 0/0
  9761 ;;		Unchanged: 0/0
  9762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9764 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9765 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9766 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9767 ;;Total ram usage:       11 bytes
  9768 ;; Hardware stack levels used:    1
  9769 ;; Hardware stack levels required when called:    4
  9770 ;; This function calls:
  9771 ;;		_ReadRun
  9772 ;;		_captureKeypad
  9773 ;;		_showInfo
  9774 ;;		i2_lcdInst
  9775 ;;		i2_printf
  9776 ;; This function is called by:
  9777 ;;		_intrpt
  9778 ;; This function uses a non-reentrant model
  9779 ;;
  9780                           
  9781                           	psect	text51
  9782  001802                     __ptext51:
  9783                           	opt stack 0
  9784  001802                     _PermLog:
  9785                           	opt stack 21
  9786                           
  9787                           ;eeprom.c: 91: unsigned char goback = 0;
  9788                           
  9789                           ;incstack = 0
  9790  001802  0E00               	movlw	0
  9791  001804  D067               	goto	L5
  9792  001806                     i2l4349:
  9793                           
  9794                           ;eeprom.c: 93: lcdInst(0b10000000);
  9795  001806  0E80               	movlw	128
  9796  001808  EC2F  F013         	call	i2_lcdInst
  9797                           
  9798                           ;eeprom.c: 94: printf("Permanent log:       ");
  9799  00180C  0E7F               	movlw	low STR_43
  9800  00180E  6E0D               	movwf	i2printf@f,c
  9801  001810  0EFE               	movlw	high STR_43
  9802  001812  6E0E               	movwf	i2printf@f+1,c
  9803  001814  EC5A  F004         	call	i2_printf	;wreg free
  9804                           
  9805                           ;eeprom.c: 95: lcdInst(0b11000000);
  9806  001818  0EC0               	movlw	192
  9807  00181A  EC2F  F013         	call	i2_lcdInst
  9808                           
  9809                           ;eeprom.c: 96: printf("Which run?       ");
  9810  00181E  0E67               	movlw	low STR_44
  9811  001820  6E0D               	movwf	i2printf@f,c
  9812  001822  0EFF               	movlw	high STR_44
  9813  001824  6E0E               	movwf	i2printf@f+1,c
  9814  001826  EC5A  F004         	call	i2_printf	;wreg free
  9815                           
  9816                           ;eeprom.c: 97: int backruns = captureKeypad() - 8;
  9817  00182A  ECD2  F012         	call	_captureKeypad	;wreg free
  9818  00182E  0EF8               	movlw	248
  9819  001830  2401               	addwf	?_captureKeypad,w,c
  9820  001832  6E39               	movwf	PermLog@backruns,c
  9821  001834  0EFF               	movlw	255
  9822  001836  2002               	addwfc	?_captureKeypad+1,w,c
  9823  001838  6E3A               	movwf	PermLog@backruns+1,c
  9824                           
  9825                           ;eeprom.c: 98: if (backruns>=0 && backruns < 4){
  9826  00183A  BE3A               	btfsc	PermLog@backruns+1,7,c
  9827  00183C  D04A               	goto	i2l4377
  9828  00183E  BE3A               	btfsc	PermLog@backruns+1,7,c
  9829  001840  D006               	goto	i2l4361
  9830  001842  503A               	movf	PermLog@backruns+1,w,c
  9831  001844  E146               	bnz	i2l4377
  9832  001846  0E04               	movlw	4
  9833  001848  5C39               	subwf	PermLog@backruns,w,c
  9834  00184A  B0D8               	btfsc	status,0,c
  9835  00184C  D042               	goto	i2l4377
  9836  00184E                     i2l4361:
  9837                           
  9838                           ;eeprom.c: 99: unsigned int time;
  9839                           ;eeprom.c: 100: unsigned char sorted[] = {0, 0, 0, 0};
  9840  00184E  C098  F032         	movff	PermLog@F3082,PermLog@sorted
  9841  001852  C099  F033         	movff	PermLog@F3082+1,PermLog@sorted+1
  9842  001856  C09A  F034         	movff	PermLog@F3082+2,PermLog@sorted+2
  9843  00185A  C09B  F035         	movff	PermLog@F3082+3,PermLog@sorted+3
  9844                           
  9845                           ;eeprom.c: 101: ReadRun(backruns, sorted, &time);
  9846  00185E  0E32               	movlw	low PermLog@sorted
  9847  001860  6E03               	movwf	ReadRun@sorted,c
  9848  001862  0E00               	movlw	high PermLog@sorted
  9849  001864  6E04               	movwf	ReadRun@sorted+1,c
  9850  001866  0E37               	movlw	low PermLog@time
  9851  001868  6E05               	movwf	ReadRun@time,c
  9852  00186A  0E00               	movlw	high PermLog@time
  9853  00186C  6E06               	movwf	ReadRun@time+1,c
  9854  00186E  5039               	movf	PermLog@backruns,w,c
  9855  001870  ECFD  F009         	call	_ReadRun
  9856                           
  9857                           ;eeprom.c: 102: lcdInst(0b10000000);
  9858  001874  0E80               	movlw	128
  9859  001876  EC2F  F013         	call	i2_lcdInst
  9860                           
  9861                           ;eeprom.c: 103: printf("showing %u      ", backruns+1);
  9862  00187A  0EAE               	movlw	low STR_45
  9863  00187C  6E0D               	movwf	i2printf@f,c
  9864  00187E  0EFF               	movlw	high STR_45
  9865  001880  6E0E               	movwf	i2printf@f+1,c
  9866  001882  0E01               	movlw	1
  9867  001884  2439               	addwf	PermLog@backruns,w,c
  9868  001886  6E0F               	movwf	?i2_printf+2,c
  9869  001888  0E00               	movlw	0
  9870  00188A  203A               	addwfc	PermLog@backruns+1,w,c
  9871  00188C  6E10               	movwf	?i2_printf+3,c
  9872  00188E  EC5A  F004         	call	i2_printf	;wreg free
  9873                           
  9874                           ;eeprom.c: 104: lcdInst(0b11000000);
  9875  001892  0EC0               	movlw	192
  9876  001894  EC2F  F013         	call	i2_lcdInst
  9877                           
  9878                           ;eeprom.c: 105: printf("runs before     ");
  9879  001898  0EBF               	movlw	low STR_46
  9880  00189A  6E0D               	movwf	i2printf@f,c
  9881  00189C  0EFF               	movlw	high STR_46
  9882  00189E  6E0E               	movwf	i2printf@f+1,c
  9883  0018A0  EC5A  F004         	call	i2_printf	;wreg free
  9884                           
  9885                           ;eeprom.c: 106: _delay((unsigned long)((700)*(8000000/4000.0)));
  9886  0018A4  0E08               	movlw	8
  9887  0018A6  6E31               	movwf	(??_PermLog+1)& (0+255),c
  9888  0018A8  0E1B               	movlw	27
  9889  0018AA  6E30               	movwf	??_PermLog& (0+255),c
  9890  0018AC  0E27               	movlw	39
  9891  0018AE                     i2u370_47:
  9892  0018AE  2EE8               	decfsz	wreg,f,c
  9893  0018B0  D7FE               	bra	i2u370_47
  9894  0018B2  2E30               	decfsz	??_PermLog& (0+255),f,c
  9895  0018B4  D7FC               	bra	i2u370_47
  9896  0018B6  2E31               	decfsz	(??_PermLog+1)& (0+255),f,c
  9897  0018B8  D7FA               	bra	i2u370_47
  9898  0018BA  F000               	nop	
  9899                           
  9900                           ;eeprom.c: 107: showInfo(time, sorted);
  9901  0018BC  C037  F023         	movff	PermLog@time,showInfo@time
  9902  0018C0  C038  F024         	movff	PermLog@time+1,showInfo@time+1
  9903  0018C4  0E32               	movlw	low PermLog@sorted
  9904  0018C6  6E25               	movwf	showInfo@sorted,c
  9905  0018C8  0E00               	movlw	high PermLog@sorted
  9906  0018CA  6E26               	movwf	showInfo@sorted+1,c
  9907  0018CC  EC71  F007         	call	_showInfo	;wreg free
  9908                           
  9909                           ;eeprom.c: 108: } else goback = 1;
  9910  0018D0  D002               	goto	i2l478
  9911  0018D2                     i2l4377:
  9912  0018D2  0E01               	movlw	1
  9913  0018D4                     L5:
  9914  0018D4  6E36               	movwf	PermLog@goback,c
  9915  0018D6                     i2l478:
  9916  0018D6  5036               	movf	PermLog@goback,w,c
  9917  0018D8  A4D8               	btfss	status,2,c
  9918  0018DA  0012               	return	
  9919  0018DC  D794               	goto	i2l4349
  9920  0018DE                     __end_of_PermLog:
  9921                           	opt stack 0
  9922                           pclatu	equ	0xFFB
  9923                           pclath	equ	0xFFA
  9924                           tblptru	equ	0xFF8
  9925                           tblptrh	equ	0xFF7
  9926                           tblptrl	equ	0xFF6
  9927                           tablat	equ	0xFF5
  9928                           prodh	equ	0xFF4
  9929                           prodl	equ	0xFF3
  9930                           intcon	equ	0xFF2
  9931                           intcon2	equ	0xFF1
  9932                           intcon3	equ	0xFF0
  9933                           postinc0	equ	0xFEE
  9934                           fsr0h	equ	0xFEA
  9935                           fsr0l	equ	0xFE9
  9936                           wreg	equ	0xFE8
  9937                           postdec1	equ	0xFE5
  9938                           plusw1	equ	0xFE3
  9939                           fsr1h	equ	0xFE2
  9940                           fsr1l	equ	0xFE1
  9941                           indf2	equ	0xFDF
  9942                           postinc2	equ	0xFDE
  9943                           postdec2	equ	0xFDD
  9944                           plusw2	equ	0xFDB
  9945                           fsr2h	equ	0xFDA
  9946                           fsr2l	equ	0xFD9
  9947                           status	equ	0xFD8
  9948                           
  9949 ;; *************** function _showInfo *****************
  9950 ;; Defined at:
  9951 ;;		line 23 in file "modules.c"
  9952 ;; Parameters:    Size  Location     Type
  9953 ;;  time            2   34[COMRAM] unsigned int 
  9954 ;;  sorted          2   36[COMRAM] PTR unsigned char 
  9955 ;;		 -> PermLog@sorted(4), simulate@sorted(4), mainloop@sorted(4), 
  9956 ;; Auto vars:     Size  Location     Type
  9957 ;;  stop            2   45[COMRAM] int 
  9958 ;;  type            2   43[COMRAM] int 
  9959 ;; Return value:  Size  Location     Type
  9960 ;;                  1    wreg      void 
  9961 ;; Registers used:
  9962 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9963 ;; Tracked objects:
  9964 ;;		On entry : 0/0
  9965 ;;		On exit  : 0/0
  9966 ;;		Unchanged: 0/0
  9967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9968 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9969 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9970 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9971 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9972 ;;Total ram usage:       13 bytes
  9973 ;; Hardware stack levels used:    1
  9974 ;; Hardware stack levels required when called:    3
  9975 ;; This function calls:
  9976 ;;		_captureKeypad
  9977 ;;		i2_lcdInst
  9978 ;;		i2_printf
  9979 ;; This function is called by:
  9980 ;;		_mainloop
  9981 ;;		_simulate
  9982 ;;		_PermLog
  9983 ;; This function uses a non-reentrant model
  9984 ;;
  9985                           
  9986                           	psect	text52
  9987  000EE2                     __ptext52:
  9988                           	opt stack 0
  9989  000EE2                     _showInfo:
  9990                           	opt stack 21
  9991                           
  9992                           ;modules.c: 24: lcdInst(0b10000000);
  9993                           
  9994                           ;incstack = 0
  9995  000EE2  0E80               	movlw	128
  9996  000EE4  EC2F  F013         	call	i2_lcdInst
  9997                           
  9998                           ;modules.c: 25: printf("Press a key          ");
  9999  000EE8  0EC1               	movlw	low STR_22
 10000  000EEA  6E0D               	movwf	i2printf@f,c
 10001  000EEC  0EFE               	movlw	high STR_22
 10002  000EEE  6E0E               	movwf	i2printf@f+1,c
 10003  000EF0  EC5A  F004         	call	i2_printf	;wreg free
 10004                           
 10005                           ;modules.c: 26: lcdInst(0b11000000);
 10006  000EF4  0EC0               	movlw	192
 10007  000EF6  EC2F  F013         	call	i2_lcdInst
 10008                           
 10009                           ;modules.c: 27: printf("For more info          ");
 10010  000EFA  0E50               	movlw	low STR_23
 10011  000EFC  6E0D               	movwf	i2printf@f,c
 10012  000EFE  0EFE               	movlw	high STR_23
 10013  000F00  6E0E               	movwf	i2printf@f+1,c
 10014  000F02  EC5A  F004         	call	i2_printf	;wreg free
 10015                           
 10016                           ;modules.c: 28: int type = 0;
 10017  000F06  0E00               	movlw	0
 10018  000F08  6E2D               	movwf	showInfo@type+1,c
 10019  000F0A  0E00               	movlw	0
 10020  000F0C  6E2C               	movwf	showInfo@type,c
 10021                           
 10022                           ;modules.c: 29: int stop = 0;
 10023  000F0E  0E00               	movlw	0
 10024  000F10  6E2F               	movwf	showInfo@stop+1,c
 10025  000F12  0E00               	movlw	0
 10026  000F14  D0D7               	goto	L6
 10027  000F16                     i2l3911:
 10028                           
 10029                           ;modules.c: 31: type = captureKeypad();
 10030  000F16  ECD2  F012         	call	_captureKeypad	;wreg free
 10031  000F1A  C001  F02C         	movff	?_captureKeypad,showInfo@type
 10032  000F1E  C002  F02D         	movff	?_captureKeypad+1,showInfo@type+1
 10033                           
 10034                           ;modules.c: 33: switch (type) {
 10035  000F22  D0D2               	goto	i2l3951
 10036  000F24                     i2l3913:
 10037                           
 10038                           ;modules.c: 35: lcdInst(0b10000000);
 10039  000F24  0E80               	movlw	128
 10040  000F26  EC2F  F013         	call	i2_lcdInst
 10041                           
 10042                           ;modules.c: 36: printf("Time Elapsed:          ");
 10043  000F2A  0E20               	movlw	low STR_24
 10044  000F2C  6E0D               	movwf	i2printf@f,c
 10045  000F2E  0EFE               	movlw	high STR_24
 10046  000F30  6E0E               	movwf	i2printf@f+1,c
 10047  000F32  EC5A  F004         	call	i2_printf	;wreg free
 10048                           
 10049                           ;modules.c: 37: lcdInst(0b11000000);
 10050  000F36  0EC0               	movlw	192
 10051  000F38  EC2F  F013         	call	i2_lcdInst
 10052                           
 10053                           ;modules.c: 38: printf("%u seconds          ", time);
 10054  000F3C  0E01               	movlw	low STR_25
 10055  000F3E  6E0D               	movwf	i2printf@f,c
 10056  000F40  0EFF               	movlw	high STR_25
 10057  000F42  6E0E               	movwf	i2printf@f+1,c
 10058  000F44  C023  F00F         	movff	showInfo@time,?i2_printf+2
 10059  000F48  C024  F010         	movff	showInfo@time+1,?i2_printf+3
 10060  000F4C  EC5A  F004         	call	i2_printf	;wreg free
 10061                           
 10062                           ;modules.c: 39: break;
 10063  000F50  D0D7               	goto	i2l3953
 10064  000F52                     i2l3919:
 10065                           
 10066                           ;modules.c: 41: lcdInst(0b10000000);
 10067  000F52  0E80               	movlw	128
 10068  000F54  EC2F  F013         	call	i2_lcdInst
 10069                           
 10070                           ;modules.c: 42: printf("Total Sorted:          ");
 10071  000F58  0E38               	movlw	low STR_26
 10072  000F5A  6E0D               	movwf	i2printf@f,c
 10073  000F5C  0EFE               	movlw	high STR_26
 10074  000F5E  6E0E               	movwf	i2printf@f+1,c
 10075  000F60  EC5A  F004         	call	i2_printf	;wreg free
 10076                           
 10077                           ;modules.c: 43: lcdInst(0b11000000);
 10078  000F64  0EC0               	movlw	192
 10079  000F66  EC2F  F013         	call	i2_lcdInst
 10080                           
 10081                           ;modules.c: 44: printf("%u batteries          ", sorted[0] + sorted[1] + sorted[2] + sor
      +                          ted[3]);
 10082  000F6A  0E68               	movlw	low STR_27
 10083  000F6C  6E0D               	movwf	i2printf@f,c
 10084  000F6E  0EFE               	movlw	high STR_27
 10085  000F70  6E0E               	movwf	i2printf@f+1,c
 10086  000F72  EE20 F003          	lfsr	2,3
 10087  000F76  5025               	movf	showInfo@sorted,w,c
 10088  000F78  26D9               	addwf	fsr2l,f,c
 10089  000F7A  5026               	movf	showInfo@sorted+1,w,c
 10090  000F7C  22DA               	addwfc	fsr2h,f,c
 10091  000F7E  50DF               	movf	indf2,w,c
 10092  000F80  6E27               	movwf	??_showInfo& (0+255),c
 10093  000F82  C025  FFD9         	movff	showInfo@sorted,fsr2l
 10094  000F86  C026  FFDA         	movff	showInfo@sorted+1,fsr2h
 10095  000F8A  50DF               	movf	indf2,w,c
 10096  000F8C  6E28               	movwf	(??_showInfo+1)& (0+255),c
 10097  000F8E  6A29               	clrf	(??_showInfo+2)& (0+255),c
 10098  000F90  EE20 F001          	lfsr	2,1
 10099  000F94  5025               	movf	showInfo@sorted,w,c
 10100  000F96  26D9               	addwf	fsr2l,f,c
 10101  000F98  5026               	movf	showInfo@sorted+1,w,c
 10102  000F9A  22DA               	addwfc	fsr2h,f,c
 10103  000F9C  50DF               	movf	indf2,w,c
 10104  000F9E  6E2A               	movwf	(??_showInfo+3)& (0+255),c
 10105  000FA0  502A               	movf	??_showInfo+3,w,c
 10106  000FA2  2628               	addwf	??_showInfo+1,f,c
 10107  000FA4  0E00               	movlw	0
 10108  000FA6  2229               	addwfc	??_showInfo+2,f,c
 10109  000FA8  EE20 F002          	lfsr	2,2
 10110  000FAC  5025               	movf	showInfo@sorted,w,c
 10111  000FAE  26D9               	addwf	fsr2l,f,c
 10112  000FB0  5026               	movf	showInfo@sorted+1,w,c
 10113  000FB2  22DA               	addwfc	fsr2h,f,c
 10114  000FB4  50DF               	movf	indf2,w,c
 10115  000FB6  6E2B               	movwf	(??_showInfo+4)& (0+255),c
 10116  000FB8  502B               	movf	??_showInfo+4,w,c
 10117  000FBA  2628               	addwf	??_showInfo+1,f,c
 10118  000FBC  0E00               	movlw	0
 10119  000FBE  2229               	addwfc	??_showInfo+2,f,c
 10120  000FC0  5027               	movf	??_showInfo,w,c
 10121  000FC2  2428               	addwf	??_showInfo+1,w,c
 10122  000FC4  6E0F               	movwf	?i2_printf+2,c
 10123  000FC6  0E00               	movlw	0
 10124  000FC8  2029               	addwfc	??_showInfo+2,w,c
 10125  000FCA  6E10               	movwf	?i2_printf+3,c
 10126  000FCC  EC5A  F004         	call	i2_printf	;wreg free
 10127                           
 10128                           ;modules.c: 45: break;
 10129  000FD0  D097               	goto	i2l3953
 10130  000FD2                     i2l3925:
 10131                           
 10132                           ;modules.c: 47: lcdInst(0b10000000);
 10133  000FD2  0E80               	movlw	128
 10134  000FD4  EC2F  F013         	call	i2_lcdInst
 10135                           
 10136                           ;modules.c: 48: printf("Charged AA:          ");
 10137  000FD8  0E95               	movlw	low STR_28
 10138  000FDA  6E0D               	movwf	i2printf@f,c
 10139  000FDC  0EFE               	movlw	high STR_28
 10140  000FDE  6E0E               	movwf	i2printf@f+1,c
 10141  000FE0  EC5A  F004         	call	i2_printf	;wreg free
 10142                           
 10143                           ;modules.c: 49: lcdInst(0b11000000);
 10144  000FE4  0EC0               	movlw	192
 10145  000FE6  EC2F  F013         	call	i2_lcdInst
 10146                           
 10147                           ;modules.c: 50: printf("%u             ", sorted[0]);
 10148  000FEA  0ED0               	movlw	low STR_29
 10149  000FEC  6E0D               	movwf	i2printf@f,c
 10150  000FEE  0EFF               	movlw	high STR_29
 10151  000FF0  6E0E               	movwf	i2printf@f+1,c
 10152  000FF2  C025  FFD9         	movff	showInfo@sorted,fsr2l
 10153  000FF6  C026  FFDA         	movff	showInfo@sorted+1,fsr2h
 10154  000FFA  50DF               	movf	indf2,w,c
 10155  000FFC  6E27               	movwf	??_showInfo& (0+255),c
 10156  000FFE  5027               	movf	??_showInfo,w,c
 10157  001000  6E0F               	movwf	?i2_printf+2,c
 10158  001002  6A10               	clrf	?i2_printf+3,c
 10159  001004  EC5A  F004         	call	i2_printf	;wreg free
 10160                           
 10161                           ;modules.c: 51: break;
 10162  001008  D07B               	goto	i2l3953
 10163  00100A                     i2l3931:
 10164                           
 10165                           ;modules.c: 53: lcdInst(0b10000000);
 10166  00100A  0E80               	movlw	128
 10167  00100C  EC2F  F013         	call	i2_lcdInst
 10168                           
 10169                           ;modules.c: 54: printf("Charged C:          ");
 10170  001010  0ED7               	movlw	low STR_30
 10171  001012  6E0D               	movwf	i2printf@f,c
 10172  001014  0EFE               	movlw	high STR_30
 10173  001016  6E0E               	movwf	i2printf@f+1,c
 10174  001018  EC5A  F004         	call	i2_printf	;wreg free
 10175                           
 10176                           ;modules.c: 55: lcdInst(0b11000000);
 10177  00101C  0EC0               	movlw	192
 10178  00101E  EC2F  F013         	call	i2_lcdInst
 10179                           
 10180                           ;modules.c: 56: printf("%u             ", sorted[1]);
 10181  001022  0ED0               	movlw	low STR_29
 10182  001024  6E0D               	movwf	i2printf@f,c
 10183  001026  0EFF               	movlw	high STR_29
 10184  001028  6E0E               	movwf	i2printf@f+1,c
 10185  00102A  EE20 F001          	lfsr	2,1
 10186  00102E  5025               	movf	showInfo@sorted,w,c
 10187  001030  26D9               	addwf	fsr2l,f,c
 10188  001032  5026               	movf	showInfo@sorted+1,w,c
 10189  001034  22DA               	addwfc	fsr2h,f,c
 10190  001036  50DF               	movf	indf2,w,c
 10191  001038  6E27               	movwf	??_showInfo& (0+255),c
 10192  00103A  5027               	movf	??_showInfo,w,c
 10193  00103C  6E0F               	movwf	?i2_printf+2,c
 10194  00103E  6A10               	clrf	?i2_printf+3,c
 10195  001040  EC5A  F004         	call	i2_printf	;wreg free
 10196                           
 10197                           ;modules.c: 57: break;
 10198  001044  D05D               	goto	i2l3953
 10199  001046                     i2l3937:
 10200                           
 10201                           ;modules.c: 59: lcdInst(0b10000000);
 10202  001046  0E80               	movlw	128
 10203  001048  EC2F  F013         	call	i2_lcdInst
 10204                           
 10205                           ;modules.c: 60: printf("Charged 9V:          ");
 10206  00104C  0EAB               	movlw	low STR_32
 10207  00104E  6E0D               	movwf	i2printf@f,c
 10208  001050  0EFE               	movlw	high STR_32
 10209  001052  6E0E               	movwf	i2printf@f+1,c
 10210  001054  EC5A  F004         	call	i2_printf	;wreg free
 10211                           
 10212                           ;modules.c: 61: lcdInst(0b11000000);
 10213  001058  0EC0               	movlw	192
 10214  00105A  EC2F  F013         	call	i2_lcdInst
 10215                           
 10216                           ;modules.c: 62: printf("%u             ", sorted[2]);
 10217  00105E  0ED0               	movlw	low STR_29
 10218  001060  6E0D               	movwf	i2printf@f,c
 10219  001062  0EFF               	movlw	high STR_29
 10220  001064  6E0E               	movwf	i2printf@f+1,c
 10221  001066  EE20 F002          	lfsr	2,2
 10222  00106A  5025               	movf	showInfo@sorted,w,c
 10223  00106C  26D9               	addwf	fsr2l,f,c
 10224  00106E  5026               	movf	showInfo@sorted+1,w,c
 10225  001070  22DA               	addwfc	fsr2h,f,c
 10226  001072  50DF               	movf	indf2,w,c
 10227  001074  6E27               	movwf	??_showInfo& (0+255),c
 10228  001076  5027               	movf	??_showInfo,w,c
 10229  001078  6E0F               	movwf	?i2_printf+2,c
 10230  00107A  6A10               	clrf	?i2_printf+3,c
 10231  00107C  EC5A  F004         	call	i2_printf	;wreg free
 10232                           
 10233                           ;modules.c: 63: break;
 10234  001080  D03F               	goto	i2l3953
 10235  001082                     i2l3943:
 10236                           
 10237                           ;modules.c: 65: lcdInst(0b10000000);
 10238  001082  0E80               	movlw	128
 10239  001084  EC2F  F013         	call	i2_lcdInst
 10240                           
 10241                           ;modules.c: 66: printf("Uncharged:          ");
 10242  001088  0EEC               	movlw	low STR_34
 10243  00108A  6E0D               	movwf	i2printf@f,c
 10244  00108C  0EFE               	movlw	high STR_34
 10245  00108E  6E0E               	movwf	i2printf@f+1,c
 10246  001090  EC5A  F004         	call	i2_printf	;wreg free
 10247                           
 10248                           ;modules.c: 67: lcdInst(0b11000000);
 10249  001094  0EC0               	movlw	192
 10250  001096  EC2F  F013         	call	i2_lcdInst
 10251                           
 10252                           ;modules.c: 68: printf("%u             ", sorted[3]);
 10253  00109A  0ED0               	movlw	low STR_29
 10254  00109C  6E0D               	movwf	i2printf@f,c
 10255  00109E  0EFF               	movlw	high STR_29
 10256  0010A0  6E0E               	movwf	i2printf@f+1,c
 10257  0010A2  EE20 F003          	lfsr	2,3
 10258  0010A6  5025               	movf	showInfo@sorted,w,c
 10259  0010A8  26D9               	addwf	fsr2l,f,c
 10260  0010AA  5026               	movf	showInfo@sorted+1,w,c
 10261  0010AC  22DA               	addwfc	fsr2h,f,c
 10262  0010AE  50DF               	movf	indf2,w,c
 10263  0010B0  6E27               	movwf	??_showInfo& (0+255),c
 10264  0010B2  5027               	movf	??_showInfo,w,c
 10265  0010B4  6E0F               	movwf	?i2_printf+2,c
 10266  0010B6  6A10               	clrf	?i2_printf+3,c
 10267  0010B8  EC5A  F004         	call	i2_printf	;wreg free
 10268                           
 10269                           ;modules.c: 69: break;
 10270  0010BC  D021               	goto	i2l3953
 10271  0010BE                     i2l3949:
 10272                           
 10273                           ;modules.c: 71: stop = 1;
 10274  0010BE  0E00               	movlw	0
 10275  0010C0  6E2F               	movwf	showInfo@stop+1,c
 10276  0010C2  0E01               	movlw	1
 10277  0010C4                     L6:
 10278  0010C4  6E2E               	movwf	showInfo@stop,c
 10279                           
 10280                           ;modules.c: 72: }
 10281  0010C6  D01C               	goto	i2l3953
 10282  0010C8                     i2l3951:
 10283  0010C8  C02C  F027         	movff	showInfo@type,??_showInfo
 10284  0010CC  C02D  F028         	movff	showInfo@type+1,??_showInfo+1
 10285                           
 10286                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10287                           ; Switch size 1, requested type "space"
 10288                           ; Number of cases is 1, Range of values is 0 to 0
 10289                           ; switch strategies available:
 10290                           ; Name         Instructions Cycles
 10291                           ; simple_byte            4     3 (average)
 10292                           ;	Chosen strategy is simple_byte
 10293  0010D0  5028               	movf	??_showInfo+1,w,c
 10294  0010D2  0A00               	xorlw	0	; case 0
 10295  0010D4  A4D8               	btfss	status,2,c
 10296  0010D6  D7F3               	goto	i2l3949
 10297                           
 10298                           ; Switch size 1, requested type "space"
 10299                           ; Number of cases is 6, Range of values is 0 to 6
 10300                           ; switch strategies available:
 10301                           ; Name         Instructions Cycles
 10302                           ; simple_byte           19    10 (average)
 10303                           ;	Chosen strategy is simple_byte
 10304  0010D8  5027               	movf	??_showInfo,w,c
 10305  0010DA  0A00               	xorlw	0	; case 0
 10306  0010DC  B4D8               	btfsc	status,2,c
 10307  0010DE  D722               	goto	i2l3913
 10308  0010E0  0A01               	xorlw	1	; case 1
 10309  0010E2  B4D8               	btfsc	status,2,c
 10310  0010E4  D736               	goto	i2l3919
 10311  0010E6  0A03               	xorlw	3	; case 2
 10312  0010E8  B4D8               	btfsc	status,2,c
 10313  0010EA  D773               	goto	i2l3925
 10314  0010EC  0A06               	xorlw	6	; case 4
 10315  0010EE  B4D8               	btfsc	status,2,c
 10316  0010F0  D78C               	goto	i2l3931
 10317  0010F2  0A01               	xorlw	1	; case 5
 10318  0010F4  B4D8               	btfsc	status,2,c
 10319  0010F6  D7A7               	goto	i2l3937
 10320  0010F8  0A03               	xorlw	3	; case 6
 10321  0010FA  B4D8               	btfsc	status,2,c
 10322  0010FC  D7C2               	goto	i2l3943
 10323  0010FE  D7DF               	goto	i2l3949
 10324  001100                     i2l3953:
 10325  001100  502E               	movf	showInfo@stop,w,c
 10326  001102  102F               	iorwf	showInfo@stop+1,w,c
 10327  001104  A4D8               	btfss	status,2,c
 10328  001106  0012               	return	
 10329  001108  D706               	goto	i2l3911
 10330  00110A                     __end_of_showInfo:
 10331                           	opt stack 0
 10332                           pclatu	equ	0xFFB
 10333                           pclath	equ	0xFFA
 10334                           tblptru	equ	0xFF8
 10335                           tblptrh	equ	0xFF7
 10336                           tblptrl	equ	0xFF6
 10337                           tablat	equ	0xFF5
 10338                           prodh	equ	0xFF4
 10339                           prodl	equ	0xFF3
 10340                           intcon	equ	0xFF2
 10341                           intcon2	equ	0xFF1
 10342                           intcon3	equ	0xFF0
 10343                           postinc0	equ	0xFEE
 10344                           fsr0h	equ	0xFEA
 10345                           fsr0l	equ	0xFE9
 10346                           wreg	equ	0xFE8
 10347                           postdec1	equ	0xFE5
 10348                           plusw1	equ	0xFE3
 10349                           fsr1h	equ	0xFE2
 10350                           fsr1l	equ	0xFE1
 10351                           indf2	equ	0xFDF
 10352                           postinc2	equ	0xFDE
 10353                           postdec2	equ	0xFDD
 10354                           plusw2	equ	0xFDB
 10355                           fsr2h	equ	0xFDA
 10356                           fsr2l	equ	0xFD9
 10357                           status	equ	0xFD8
 10358                           
 10359 ;; *************** function i2_printf *****************
 10360 ;; Defined at:
 10361 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
 10362 ;; Parameters:    Size  Location     Type
 10363 ;;  f               2   12[COMRAM] PTR const unsigned char 
 10364 ;;		 -> STR_46(17), STR_45(17), STR_44(18), STR_43(22), 
 10365 ;;		 -> STR_42(4), STR_41(3), STR_40(4), STR_39(5), 
 10366 ;;		 -> STR_38(4), STR_37(18), STR_36(20), STR_35(16), 
 10367 ;;		 -> STR_34(21), STR_33(16), STR_32(22), STR_31(16), 
 10368 ;;		 -> STR_30(21), STR_29(16), STR_28(22), STR_27(23), 
 10369 ;;		 -> STR_26(24), STR_25(21), STR_24(24), STR_23(24), 
 10370 ;;		 -> STR_22(22), STR_21(19), STR_20(18), STR_19(25), 
 10371 ;;		 -> STR_18(25), STR_17(27), STR_16(3), STR_15(3), 
 10372 ;;		 -> STR_14(3), STR_13(5), STR_12(3), STR_11(3), 
 10373 ;;		 -> STR_10(3), STR_9(4), STR_8(3), STR_7(3), 
 10374 ;;		 -> STR_6(3), STR_5(4), STR_4(5), STR_3(21), 
 10375 ;;		 -> STR_2(27), STR_1(21), 
 10376 ;; Auto vars:     Size  Location     Type
 10377 ;;  printf          4    0        struct .
 10378 ;;  printf          2   31[COMRAM] int 
 10379 ;;  printf          2   28[COMRAM] unsigned int 
 10380 ;;  printf          2   25[COMRAM] unsigned int 
 10381 ;;  printf          2   23[COMRAM] PTR void [1]
 10382 ;;		 -> ?i2_printf(2), ?_printf(2), 
 10383 ;;  printf          2   20[COMRAM] PTR const unsigned char 
 10384 ;;		 -> printf@c(1), 
 10385 ;;  printf          1   33[COMRAM] char 
 10386 ;;  printf          1   30[COMRAM] unsigned char 
 10387 ;;  printf          1   27[COMRAM] char 
 10388 ;;  printf          1   22[COMRAM] unsigned char 
 10389 ;; Return value:  Size  Location     Type
 10390 ;;                  2   12[COMRAM] int 
 10391 ;; Registers used:
 10392 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10393 ;; Tracked objects:
 10394 ;;		On entry : 0/0
 10395 ;;		On exit  : 0/0
 10396 ;;		Unchanged: 0/0
 10397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10398 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10399 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10400 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10401 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10402 ;;Total ram usage:       22 bytes
 10403 ;; Hardware stack levels used:    1
 10404 ;; Hardware stack levels required when called:    2
 10405 ;; This function calls:
 10406 ;;		i2___lwdiv
 10407 ;;		i2___lwmod
 10408 ;;		i2___wmul
 10409 ;;		i2_isdigit
 10410 ;;		i2_putch
 10411 ;; This function is called by:
 10412 ;;		_mainloop
 10413 ;;		_simulate
 10414 ;;		_showInfo
 10415 ;;		_stopMoving
 10416 ;;		_printV
 10417 ;;		_checkAA
 10418 ;;		_checkC
 10419 ;;		_check9
 10420 ;;		_PermLog
 10421 ;; This function uses a non-reentrant model
 10422 ;;
 10423                           
 10424                           	psect	text53
 10425  0008B4                     __ptext53:
 10426                           	opt stack 0
 10427  0008B4                     i2_printf:
 10428                           	opt stack 22
 10429                           
 10430                           ;doprnt.c: 466: va_list ap;
 10431                           ;doprnt.c: 499: signed char c;
 10432                           ;doprnt.c: 501: int width;
 10433                           ;doprnt.c: 506: signed char prec;
 10434                           ;doprnt.c: 508: unsigned char flag;
 10435                           ;doprnt.c: 523: union {
 10436                           ;doprnt.c: 524: unsigned long vd;
 10437                           ;doprnt.c: 525: double integ;
 10438                           ;doprnt.c: 526: } tmpval;
 10439                           ;doprnt.c: 528: unsigned int val;
 10440                           ;doprnt.c: 529: unsigned len;
 10441                           ;doprnt.c: 530: const char * cp;
 10442                           ;doprnt.c: 533: *ap = __va_start();
 10443                           
 10444                           ;incstack = 0
 10445  0008B4  0E0F               	movlw	low (?i2_printf+2)
 10446  0008B6  6E18               	movwf	i2printf@ap,c
 10447  0008B8  0E00               	movlw	high (?i2_printf+2)
 10448  0008BA  6E19               	movwf	i2printf@ap+1,c
 10449                           
 10450                           ;doprnt.c: 536: while(c = *f++) {
 10451  0008BC  D1BB               	goto	i2l3369
 10452  0008BE                     i2l3219:
 10453                           
 10454                           ;doprnt.c: 538: if(c != '%')
 10455  0008BE  0E25               	movlw	37
 10456  0008C0  1822               	xorwf	i2printf@c,w,c
 10457  0008C2  B4D8               	btfsc	status,2,c
 10458  0008C4  D004               	goto	i2l3223
 10459                           
 10460                           ;doprnt.c: 540: {
 10461                           ;doprnt.c: 541: (putch(c) );
 10462  0008C6  5022               	movf	i2printf@c,w,c
 10463  0008C8  EC29  F013         	call	i2_putch
 10464                           
 10465                           ;doprnt.c: 542: continue;
 10466  0008CC  D1B3               	goto	i2l3369
 10467  0008CE                     i2l3223:
 10468                           
 10469                           ;doprnt.c: 543: }
 10470                           ;doprnt.c: 546: width = 0;
 10471  0008CE  0E00               	movlw	0
 10472  0008D0  6E21               	movwf	i2printf@width+1,c
 10473  0008D2  0E00               	movlw	0
 10474  0008D4  6E20               	movwf	i2printf@width,c
 10475                           
 10476                           ;doprnt.c: 548: flag = 0;
 10477  0008D6  0E00               	movlw	0
 10478  0008D8  6E1F               	movwf	i2printf@flag,c
 10479                           
 10480                           ;doprnt.c: 551: switch(*f) {
 10481                           
 10482                           ;doprnt.c: 550: for(;;) {
 10483  0008DA  D003               	goto	i2l3229
 10484  0008DC                     i2l3225:
 10485                           
 10486                           ;doprnt.c: 580: flag |= 0x04;
 10487  0008DC  841F               	bsf	i2printf@flag,2,c
 10488                           
 10489                           ;doprnt.c: 581: f++;
 10490  0008DE  4A0D               	infsnz	i2printf@f,f,c
 10491  0008E0  2A0E               	incf	i2printf@f+1,f,c
 10492  0008E2                     i2l3229:
 10493  0008E2  C00D  FFF6         	movff	i2printf@f,tblptrl
 10494  0008E6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 10495  0008EA                     	if	0	;tblptru may be non-zero
 10496  0008EA                     	endif
 10497  0008EA                     	if	0	;tblptru may be non-zero
 10498  0008EA                     	endif
 10499  0008EA  0008               	tblrd		*
 10500  0008EC  50F5               	movf	tablat,w,c
 10501                           
 10502                           ; Switch size 1, requested type "space"
 10503                           ; Number of cases is 1, Range of values is 48 to 48
 10504                           ; switch strategies available:
 10505                           ; Name         Instructions Cycles
 10506                           ; simple_byte            4     3 (average)
 10507                           ;	Chosen strategy is simple_byte
 10508  0008EE  0A30               	xorlw	48	; case 48
 10509  0008F0  B4D8               	btfsc	status,2,c
 10510  0008F2  D7F4               	goto	i2l3225
 10511                           
 10512                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 10513                           
 10514                           ;doprnt.c: 586: }
 10515                           
 10516                           ;doprnt.c: 585: break;
 10517  0008F4  C00D  FFF6         	movff	i2printf@f,tblptrl
 10518  0008F8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 10519  0008FC                     	if	0	;tblptru may be non-zero
 10520  0008FC                     	endif
 10521  0008FC                     	if	0	;tblptru may be non-zero
 10522  0008FC                     	endif
 10523  0008FC  0008               	tblrd		*
 10524  0008FE  50F5               	movf	tablat,w,c
 10525  000900  ECC3  F012         	call	i2_isdigit
 10526  000904  A0D8               	btfss	status,0,c
 10527  000906  D06F               	goto	i2l3269
 10528                           
 10529                           ;doprnt.c: 598: width = 0;
 10530  000908  0E00               	movlw	0
 10531  00090A  6E21               	movwf	i2printf@width+1,c
 10532  00090C  0E00               	movlw	0
 10533  00090E  6E20               	movwf	i2printf@width,c
 10534  000910                     i2l3235:
 10535                           
 10536                           ;doprnt.c: 600: width *= 10;
 10537  000910  C020  F001         	movff	i2printf@width,i2___wmul@multiplier
 10538  000914  C021  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 10539  000918  0E00               	movlw	0
 10540  00091A  6E04               	movwf	i2___wmul@multiplicand+1,c
 10541  00091C  0E0A               	movlw	10
 10542  00091E  6E03               	movwf	i2___wmul@multiplicand,c
 10543  000920  EC7F  F012         	call	i2___wmul	;wreg free
 10544  000924  C001  F020         	movff	?i2___wmul,i2printf@width
 10545  000928  C002  F021         	movff	?i2___wmul+1,i2printf@width+1
 10546                           
 10547                           ;doprnt.c: 601: width += *f++ - '0';
 10548  00092C  0ED0               	movlw	208
 10549  00092E  6E11               	movwf	??i2_printf& (0+255),c
 10550  000930  0EFF               	movlw	255
 10551  000932  6E12               	movwf	(??i2_printf+1)& (0+255),c
 10552  000934  C00D  FFF6         	movff	i2printf@f,tblptrl
 10553  000938  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 10554  00093C                     	if	0	;tblptru may be non-zero
 10555  00093C                     	endif
 10556  00093C                     	if	0	;tblptru may be non-zero
 10557  00093C                     	endif
 10558  00093C  0008               	tblrd		*
 10559  00093E  50F5               	movf	tablat,w,c
 10560  000940  6E13               	movwf	(??i2_printf+2)& (0+255),c
 10561  000942  6A14               	clrf	(??i2_printf+3)& (0+255),c
 10562  000944  5011               	movf	??i2_printf,w,c
 10563  000946  2613               	addwf	??i2_printf+2,f,c
 10564  000948  5012               	movf	??i2_printf+1,w,c
 10565  00094A  2214               	addwfc	??i2_printf+3,f,c
 10566  00094C  5013               	movf	??i2_printf+2,w,c
 10567  00094E  2620               	addwf	i2printf@width,f,c
 10568  000950  5014               	movf	??i2_printf+3,w,c
 10569  000952  2221               	addwfc	i2printf@width+1,f,c
 10570  000954  4A0D               	infsnz	i2printf@f,f,c
 10571  000956  2A0E               	incf	i2printf@f+1,f,c
 10572                           
 10573                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 10574  000958  C00D  FFF6         	movff	i2printf@f,tblptrl
 10575  00095C  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 10576  000960                     	if	0	;tblptru may be non-zero
 10577  000960                     	endif
 10578  000960                     	if	0	;tblptru may be non-zero
 10579  000960                     	endif
 10580  000960  0008               	tblrd		*
 10581  000962  50F5               	movf	tablat,w,c
 10582  000964  ECC3  F012         	call	i2_isdigit
 10583  000968  A0D8               	btfss	status,0,c
 10584  00096A  D03D               	goto	i2l3269
 10585  00096C  D7D1               	goto	i2l3235
 10586  00096E                     i2l3243:
 10587                           
 10588                           ;doprnt.c: 721: flag |= 0x80;
 10589  00096E  8E1F               	bsf	i2printf@flag,7,c
 10590                           
 10591                           ;doprnt.c: 723: break;
 10592  000970  D054               	goto	i2l3271
 10593  000972                     i2l3245:
 10594                           
 10595                           ;doprnt.c: 757: if(width > len)
 10596  000972  5020               	movf	i2printf@width,w,c
 10597  000974  5C1A               	subwf	i2printf@len,w,c
 10598  000976  5021               	movf	i2printf@width+1,w,c
 10599  000978  581B               	subwfb	i2printf@len+1,w,c
 10600  00097A  B0D8               	btfsc	status,0,c
 10601  00097C  D005               	goto	i2l3249
 10602                           
 10603                           ;doprnt.c: 758: width -= len;
 10604  00097E  501A               	movf	i2printf@len,w,c
 10605  000980  5E20               	subwf	i2printf@width,f,c
 10606  000982  501B               	movf	i2printf@len+1,w,c
 10607  000984  5A21               	subwfb	i2printf@width+1,f,c
 10608  000986  D008               	goto	i2l3253
 10609  000988                     i2l3249:
 10610                           
 10611                           ;doprnt.c: 759: else
 10612                           ;doprnt.c: 760: width = 0;
 10613  000988  0E00               	movlw	0
 10614  00098A  6E21               	movwf	i2printf@width+1,c
 10615  00098C  0E00               	movlw	0
 10616  00098E  6E20               	movwf	i2printf@width,c
 10617                           
 10618                           ;doprnt.c: 764: while(width--)
 10619  000990  D003               	goto	i2l3253
 10620  000992                     i2l3251:
 10621                           
 10622                           ;doprnt.c: 765: (putch(' ') );
 10623  000992  0E20               	movlw	32
 10624  000994  EC29  F013         	call	i2_putch
 10625  000998                     i2l3253:
 10626  000998  0620               	decf	i2printf@width,f,c
 10627  00099A  A0D8               	btfss	status,0,c
 10628  00099C  0621               	decf	i2printf@width+1,f,c
 10629  00099E  2820               	incf	i2printf@width,w,c
 10630  0009A0  E1F8               	bnz	i2l3251
 10631  0009A2  2821               	incf	i2printf@width+1,w,c
 10632  0009A4  B4D8               	btfsc	status,2,c
 10633  0009A6  D00A               	goto	i2l3259
 10634  0009A8  D7F4               	goto	i2l3251
 10635  0009AA                     i2l3255:
 10636                           
 10637                           ;doprnt.c: 768: (putch(*cp++) );
 10638  0009AA  C015  FFD9         	movff	i2printf@cp,fsr2l
 10639  0009AE  C016  FFDA         	movff	i2printf@cp+1,fsr2h
 10640  0009B2  50DF               	movf	indf2,w,c
 10641  0009B4  EC29  F013         	call	i2_putch
 10642  0009B8  4A15               	infsnz	i2printf@cp,f,c
 10643  0009BA  2A16               	incf	i2printf@cp+1,f,c
 10644  0009BC                     i2l3259:
 10645  0009BC  061A               	decf	i2printf@len,f,c
 10646  0009BE  A0D8               	btfss	status,0,c
 10647  0009C0  061B               	decf	i2printf@len+1,f,c
 10648  0009C2  281A               	incf	i2printf@len,w,c
 10649  0009C4  E1F2               	bnz	i2l3255
 10650  0009C6  281B               	incf	i2printf@len+1,w,c
 10651  0009C8  B4D8               	btfsc	status,2,c
 10652  0009CA  D134               	goto	i2l3369
 10653  0009CC  D7EE               	goto	i2l3255
 10654  0009CE                     i2l3261:
 10655                           
 10656                           ;doprnt.c: 805: cp = (char *)&c;
 10657  0009CE  0E22               	movlw	low i2printf@c
 10658  0009D0  6E15               	movwf	i2printf@cp,c
 10659  0009D2  0E00               	movlw	high i2printf@c
 10660  0009D4  6E16               	movwf	i2printf@cp+1,c
 10661                           
 10662                           ;doprnt.c: 806: len = 1;
 10663  0009D6  0E00               	movlw	0
 10664  0009D8  6E1B               	movwf	i2printf@len+1,c
 10665  0009DA  0E01               	movlw	1
 10666  0009DC  6E1A               	movwf	i2printf@len,c
 10667                           
 10668                           ;doprnt.c: 807: goto dostring;
 10669  0009DE  D7C9               	goto	i2l3245
 10670  0009E0                     i2l3265:
 10671                           
 10672                           ;doprnt.c: 818: flag |= 0xC0;
 10673  0009E0  0EC0               	movlw	192
 10674  0009E2  121F               	iorwf	i2printf@flag,f,c
 10675                           
 10676                           ;doprnt.c: 822: }
 10677                           
 10678                           ;doprnt.c: 819: break;
 10679  0009E4  D01A               	goto	i2l3271
 10680  0009E6                     i2l3269:
 10681  0009E6  C00D  FFF6         	movff	i2printf@f,tblptrl
 10682  0009EA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 10683  0009EE  4A0D               	infsnz	i2printf@f,f,c
 10684  0009F0  2A0E               	incf	i2printf@f+1,f,c
 10685  0009F2                     	if	0	;tblptru may be non-zero
 10686  0009F2                     	endif
 10687  0009F2                     	if	0	;tblptru may be non-zero
 10688  0009F2                     	endif
 10689  0009F2  0008               	tblrd		*
 10690  0009F4  CFF5 F022          	movff	tablat,i2printf@c
 10691  0009F8  5022               	movf	i2printf@c,w,c
 10692                           
 10693                           ; Switch size 1, requested type "space"
 10694                           ; Number of cases is 5, Range of values is 0 to 120
 10695                           ; switch strategies available:
 10696                           ; Name         Instructions Cycles
 10697                           ; simple_byte           16     9 (average)
 10698                           ;	Chosen strategy is simple_byte
 10699  0009FA  0A00               	xorlw	0	; case 0
 10700  0009FC  B4D8               	btfsc	status,2,c
 10701  0009FE  0012               	return	
 10702  000A00  0A64               	xorlw	100	; case 100
 10703  000A02  B4D8               	btfsc	status,2,c
 10704  000A04  D00A               	goto	i2l3271
 10705  000A06  0A0D               	xorlw	13	; case 105
 10706  000A08  B4D8               	btfsc	status,2,c
 10707  000A0A  D007               	goto	i2l3271
 10708  000A0C  0A1C               	xorlw	28	; case 117
 10709  000A0E  B4D8               	btfsc	status,2,c
 10710  000A10  D7E7               	goto	i2l3265
 10711  000A12  0A0D               	xorlw	13	; case 120
 10712  000A14  B4D8               	btfsc	status,2,c
 10713  000A16  D7AB               	goto	i2l3243
 10714  000A18  D7DA               	goto	i2l3261
 10715  000A1A                     i2l3271:
 10716                           
 10717                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
 10718  000A1A  C01F  F011         	movff	i2printf@flag,??i2_printf
 10719  000A1E  0EC0               	movlw	192
 10720  000A20  1611               	andwf	??i2_printf,f,c
 10721  000A22  A4D8               	btfss	status,2,c
 10722  000A24  D015               	goto	i2l3283
 10723                           
 10724                           ;doprnt.c: 1253: {
 10725                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 10726  000A26  C018  FFD9         	movff	i2printf@ap,fsr2l
 10727  000A2A  C019  FFDA         	movff	i2printf@ap+1,fsr2h
 10728  000A2E  CFDE F01D          	movff	postinc2,i2printf@val
 10729  000A32  CFDD F01E          	movff	postdec2,i2printf@val+1
 10730  000A36  0E02               	movlw	2
 10731  000A38  2618               	addwf	i2printf@ap,f,c
 10732  000A3A  0E00               	movlw	0
 10733  000A3C  2219               	addwfc	i2printf@ap+1,f,c
 10734                           
 10735                           ;doprnt.c: 1261: if((int)val < 0) {
 10736  000A3E  AE1E               	btfss	i2printf@val+1,7,c
 10737  000A40  D044               	goto	i2l3317
 10738                           
 10739                           ;doprnt.c: 1262: flag |= 0x03;
 10740  000A42  0E03               	movlw	3
 10741  000A44  121F               	iorwf	i2printf@flag,f,c
 10742                           
 10743                           ;doprnt.c: 1263: val = -val;
 10744  000A46  6C1D               	negf	i2printf@val,c
 10745  000A48  1E1E               	comf	i2printf@val+1,f,c
 10746  000A4A  B0D8               	btfsc	status,0,c
 10747  000A4C  2A1E               	incf	i2printf@val+1,f,c
 10748                           
 10749                           ;doprnt.c: 1264: }
 10750                           ;doprnt.c: 1266: }
 10751  000A4E  D03D               	goto	i2l3317
 10752  000A50                     i2l3283:
 10753                           
 10754                           ;doprnt.c: 1268: else
 10755                           ;doprnt.c: 1273: {
 10756                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 10757  000A50  C018  FFD9         	movff	i2printf@ap,fsr2l
 10758  000A54  C019  FFDA         	movff	i2printf@ap+1,fsr2h
 10759  000A58  CFDE F01D          	movff	postinc2,i2printf@val
 10760  000A5C  CFDD F01E          	movff	postdec2,i2printf@val+1
 10761  000A60  0E02               	movlw	2
 10762  000A62  2618               	addwf	i2printf@ap,f,c
 10763  000A64  0E00               	movlw	0
 10764  000A66  2219               	addwfc	i2printf@ap+1,f,c
 10765                           
 10766                           ;doprnt.c: 1287: }
 10767                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
 10768  000A68  D030               	goto	i2l3317
 10769  000A6A                     i2l3287:
 10770                           
 10771                           ;doprnt.c: 1302: case 0xC0:
 10772                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 10773  000A6A  0E01               	movlw	1
 10774  000A6C  6E22               	movwf	i2printf@c,c
 10775  000A6E                     i2l3289:
 10776  000A6E  0E05               	movlw	5
 10777  000A70  1822               	xorwf	i2printf@c,w,c
 10778  000A72  B4D8               	btfsc	status,2,c
 10779  000A74  D035               	goto	i2l3319
 10780                           
 10781                           ;doprnt.c: 1306: if(val < dpowers[c])
 10782  000A76  5022               	movf	i2printf@c,w,c
 10783  000A78  0D02               	mullw	2
 10784  000A7A  0EC1               	movlw	low _dpowers
 10785  000A7C  24F3               	addwf	prodl,w,c
 10786  000A7E  6EF6               	movwf	tblptrl,c
 10787  000A80  0EFD               	movlw	high _dpowers
 10788  000A82  20F4               	addwfc	prodh,w,c
 10789  000A84  6EF7               	movwf	tblptrh,c
 10790  000A86                     	if	0	;There are less than 3 active tblptr bytes
 10791  000A86                     	endif
 10792  000A86  0009               	tblrd		*+
 10793  000A88  50F5               	movf	tablat,w,c
 10794  000A8A  5C1D               	subwf	i2printf@val,w,c
 10795  000A8C  0009               	tblrd		*+
 10796  000A8E  50F5               	movf	tablat,w,c
 10797  000A90  581E               	subwfb	i2printf@val+1,w,c
 10798  000A92  A0D8               	btfss	status,0,c
 10799  000A94  D025               	goto	i2l3319
 10800                           
 10801                           ;doprnt.c: 1307: break;
 10802  000A96  2A22               	incf	i2printf@c,f,c
 10803  000A98  D7EA               	goto	i2l3289
 10804  000A9A                     i2l3301:
 10805                           
 10806                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 10807  000A9A  0E01               	movlw	1
 10808  000A9C  6E22               	movwf	i2printf@c,c
 10809  000A9E                     i2l3303:
 10810  000A9E  0E04               	movlw	4
 10811  000AA0  1822               	xorwf	i2printf@c,w,c
 10812  000AA2  B4D8               	btfsc	status,2,c
 10813  000AA4  D01D               	goto	i2l3319
 10814                           
 10815                           ;doprnt.c: 1317: if(val < hexpowers[c])
 10816  000AA6  5022               	movf	i2printf@c,w,c
 10817  000AA8  0D02               	mullw	2
 10818  000AAA  0ECB               	movlw	low _hexpowers
 10819  000AAC  24F3               	addwf	prodl,w,c
 10820  000AAE  6EF6               	movwf	tblptrl,c
 10821  000AB0  0EFD               	movlw	high _hexpowers
 10822  000AB2  20F4               	addwfc	prodh,w,c
 10823  000AB4  6EF7               	movwf	tblptrh,c
 10824  000AB6                     	if	0	;There are less than 3 active tblptr bytes
 10825  000AB6                     	endif
 10826  000AB6  0009               	tblrd		*+
 10827  000AB8  50F5               	movf	tablat,w,c
 10828  000ABA  5C1D               	subwf	i2printf@val,w,c
 10829  000ABC  0009               	tblrd		*+
 10830  000ABE  50F5               	movf	tablat,w,c
 10831  000AC0  581E               	subwfb	i2printf@val+1,w,c
 10832  000AC2  A0D8               	btfss	status,0,c
 10833  000AC4  D00D               	goto	i2l3319
 10834                           
 10835                           ;doprnt.c: 1318: break;
 10836  000AC6  2A22               	incf	i2printf@c,f,c
 10837  000AC8  D7EA               	goto	i2l3303
 10838  000ACA                     i2l3317:
 10839  000ACA  501F               	movf	i2printf@flag,w,c
 10840  000ACC  0BC0               	andlw	192
 10841                           
 10842                           ; Switch size 1, requested type "space"
 10843                           ; Number of cases is 3, Range of values is 0 to 192
 10844                           ; switch strategies available:
 10845                           ; Name         Instructions Cycles
 10846                           ; simple_byte           10     6 (average)
 10847                           ;	Chosen strategy is simple_byte
 10848  000ACE  0A00               	xorlw	0	; case 0
 10849  000AD0  B4D8               	btfsc	status,2,c
 10850  000AD2  D7CB               	goto	i2l3287
 10851  000AD4  0A80               	xorlw	128	; case 128
 10852  000AD6  B4D8               	btfsc	status,2,c
 10853  000AD8  D7E0               	goto	i2l3301
 10854  000ADA  0A40               	xorlw	64	; case 192
 10855  000ADC  B4D8               	btfsc	status,2,c
 10856  000ADE  D7C5               	goto	i2l3287
 10857  000AE0                     i2l3319:
 10858                           
 10859                           ;doprnt.c: 1345: if(width && flag & 0x03)
 10860  000AE0  5020               	movf	i2printf@width,w,c
 10861  000AE2  1021               	iorwf	i2printf@width+1,w,c
 10862  000AE4  B4D8               	btfsc	status,2,c
 10863  000AE6  D009               	goto	i2l3325
 10864  000AE8  C01F  F011         	movff	i2printf@flag,??i2_printf
 10865  000AEC  0E03               	movlw	3
 10866  000AEE  1611               	andwf	??i2_printf,f,c
 10867  000AF0  B4D8               	btfsc	status,2,c
 10868  000AF2  D003               	goto	i2l3325
 10869                           
 10870                           ;doprnt.c: 1346: width--;
 10871  000AF4  0620               	decf	i2printf@width,f,c
 10872  000AF6  A0D8               	btfss	status,0,c
 10873  000AF8  0621               	decf	i2printf@width+1,f,c
 10874  000AFA                     i2l3325:
 10875                           
 10876                           ;doprnt.c: 1381: if(width > c)
 10877  000AFA  0E80               	movlw	128
 10878  000AFC  BE22               	btfsc	i2printf@c,7,c
 10879  000AFE  0E7F               	movlw	127
 10880  000B00  6E11               	movwf	??i2_printf& (0+255),c
 10881  000B02  5020               	movf	i2printf@width,w,c
 10882  000B04  5C22               	subwf	i2printf@c,w,c
 10883  000B06  5021               	movf	i2printf@width+1,w,c
 10884  000B08  0A80               	xorlw	128
 10885  000B0A  5811               	subwfb	??i2_printf& (0+255),w,c
 10886  000B0C  B0D8               	btfsc	status,0,c
 10887  000B0E  D007               	goto	i2l3329
 10888                           
 10889                           ;doprnt.c: 1382: width -= c;
 10890  000B10  5022               	movf	i2printf@c,w,c
 10891  000B12  5E20               	subwf	i2printf@width,f,c
 10892  000B14  0E00               	movlw	0
 10893  000B16  BE22               	btfsc	i2printf@c,7,c
 10894  000B18  0EFF               	movlw	255
 10895  000B1A  5A21               	subwfb	i2printf@width+1,f,c
 10896  000B1C  D004               	goto	i2l3331
 10897  000B1E                     i2l3329:
 10898                           
 10899                           ;doprnt.c: 1383: else
 10900                           ;doprnt.c: 1384: width = 0;
 10901  000B1E  0E00               	movlw	0
 10902  000B20  6E21               	movwf	i2printf@width+1,c
 10903  000B22  0E00               	movlw	0
 10904  000B24  6E20               	movwf	i2printf@width,c
 10905  000B26                     i2l3331:
 10906                           
 10907                           ;doprnt.c: 1387: if(flag & 0x04) {
 10908  000B26  A41F               	btfss	i2printf@flag,2,c
 10909  000B28  D014               	goto	i2l3343
 10910                           
 10911                           ;doprnt.c: 1392: if(flag & 0x03)
 10912  000B2A  C01F  F011         	movff	i2printf@flag,??i2_printf
 10913  000B2E  0E03               	movlw	3
 10914  000B30  1611               	andwf	??i2_printf,f,c
 10915  000B32  B4D8               	btfsc	status,2,c
 10916  000B34  D003               	goto	i2l3337
 10917                           
 10918                           ;doprnt.c: 1393: (putch('-') );
 10919  000B36  0E2D               	movlw	45
 10920  000B38  EC29  F013         	call	i2_putch
 10921  000B3C                     i2l3337:
 10922                           
 10923                           ;doprnt.c: 1415: if(width)
 10924  000B3C  5020               	movf	i2printf@width,w,c
 10925  000B3E  1021               	iorwf	i2printf@width+1,w,c
 10926  000B40  B4D8               	btfsc	status,2,c
 10927  000B42  D01E               	goto	i2l3353
 10928                           
 10929                           ;doprnt.c: 1417: (putch('0') );
 10930                           
 10931                           ;doprnt.c: 1416: do
 10932  000B44  0E30               	movlw	48
 10933  000B46  EC29  F013         	call	i2_putch
 10934                           
 10935                           ;doprnt.c: 1418: while(--width);
 10936  000B4A  0620               	decf	i2printf@width,f,c
 10937  000B4C  A0D8               	btfss	status,0,c
 10938  000B4E  0621               	decf	i2printf@width+1,f,c
 10939  000B50  D7F5               	goto	i2l3337
 10940  000B52                     i2l3343:
 10941                           
 10942                           ;doprnt.c: 1422: {
 10943                           ;doprnt.c: 1424: if(width
 10944                           ;doprnt.c: 1428: )
 10945  000B52  5020               	movf	i2printf@width,w,c
 10946  000B54  1021               	iorwf	i2printf@width+1,w,c
 10947  000B56  B4D8               	btfsc	status,2,c
 10948  000B58  D00A               	goto	i2l3349
 10949  000B5A                     i2l3345:
 10950                           
 10951                           ;doprnt.c: 1430: (putch(' ') );
 10952  000B5A  0E20               	movlw	32
 10953  000B5C  EC29  F013         	call	i2_putch
 10954                           
 10955                           ;doprnt.c: 1431: while(--width);
 10956  000B60  0620               	decf	i2printf@width,f,c
 10957  000B62  A0D8               	btfss	status,0,c
 10958  000B64  0621               	decf	i2printf@width+1,f,c
 10959  000B66  5020               	movf	i2printf@width,w,c
 10960  000B68  1021               	iorwf	i2printf@width+1,w,c
 10961  000B6A  A4D8               	btfss	status,2,c
 10962  000B6C  D7F6               	goto	i2l3345
 10963  000B6E                     i2l3349:
 10964                           
 10965                           ;doprnt.c: 1438: if(flag & 0x03)
 10966  000B6E  C01F  F011         	movff	i2printf@flag,??i2_printf
 10967  000B72  0E03               	movlw	3
 10968  000B74  1611               	andwf	??i2_printf,f,c
 10969  000B76  B4D8               	btfsc	status,2,c
 10970  000B78  D003               	goto	i2l3353
 10971                           
 10972                           ;doprnt.c: 1439: (putch('-') );
 10973  000B7A  0E2D               	movlw	45
 10974  000B7C  EC29  F013         	call	i2_putch
 10975  000B80                     i2l3353:
 10976                           
 10977                           ;doprnt.c: 1469: }
 10978                           ;doprnt.c: 1472: prec = c;
 10979  000B80  C022  F01C         	movff	i2printf@c,i2printf@prec
 10980                           
 10981                           ;doprnt.c: 1474: while(prec--) {
 10982  000B84  D053               	goto	i2l3367
 10983  000B86                     i2l3355:
 10984                           
 10985                           ;doprnt.c: 1486: case 0xC0:
 10986                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10987  000B86  501C               	movf	i2printf@prec,w,c
 10988  000B88  0D02               	mullw	2
 10989  000B8A  0EC1               	movlw	low _dpowers
 10990  000B8C  24F3               	addwf	prodl,w,c
 10991  000B8E  6EF6               	movwf	tblptrl,c
 10992  000B90  0EFD               	movlw	high _dpowers
 10993  000B92  20F4               	addwfc	prodh,w,c
 10994  000B94  6EF7               	movwf	tblptrh,c
 10995  000B96                     	if	0	;There are less than 3 active tblptr bytes
 10996  000B96                     	endif
 10997  000B96  0009               	tblrd		*+
 10998  000B98  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 10999  000B9C  000A               	tblrd		*-
 11000  000B9E  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 11001  000BA2  C01D  F001         	movff	i2printf@val,i2___lwdiv@dividend
 11002  000BA6  C01E  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 11003  000BAA  ECD6  F010         	call	i2___lwdiv	;wreg free
 11004  000BAE  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 11005  000BB2  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 11006  000BB6  0E00               	movlw	0
 11007  000BB8  6E0B               	movwf	i2___lwmod@divisor+1,c
 11008  000BBA  0E0A               	movlw	10
 11009  000BBC  6E0A               	movwf	i2___lwmod@divisor,c
 11010  000BBE  EC90  F011         	call	i2___lwmod	;wreg free
 11011  000BC2  5008               	movf	?i2___lwmod,w,c
 11012  000BC4  0F30               	addlw	48
 11013  000BC6  6E22               	movwf	i2printf@c,c
 11014                           
 11015                           ;doprnt.c: 1491: break;
 11016  000BC8  D02E               	goto	i2l3365
 11017  000BCA                     i2l3357:
 11018                           
 11019                           ;doprnt.c: 1499: {
 11020                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 11021  000BCA  C01D  F001         	movff	i2printf@val,i2___lwdiv@dividend
 11022  000BCE  C01E  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 11023  000BD2  501C               	movf	i2printf@prec,w,c
 11024  000BD4  0D02               	mullw	2
 11025  000BD6  0ECB               	movlw	low _hexpowers
 11026  000BD8  24F3               	addwf	prodl,w,c
 11027  000BDA  6EF6               	movwf	tblptrl,c
 11028  000BDC  0EFD               	movlw	high _hexpowers
 11029  000BDE  20F4               	addwfc	prodh,w,c
 11030  000BE0  6EF7               	movwf	tblptrh,c
 11031  000BE2                     	if	0	;There are less than 3 active tblptr bytes
 11032  000BE2                     	endif
 11033  000BE2  0009               	tblrd		*+
 11034  000BE4  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 11035  000BE8  000A               	tblrd		*-
 11036  000BEA  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 11037  000BEE  ECD6  F010         	call	i2___lwdiv	;wreg free
 11038  000BF2  5001               	movf	?i2___lwdiv,w,c
 11039  000BF4  0B0F               	andlw	15
 11040  000BF6  6E17               	movwf	i2printf@idx,c
 11041                           
 11042                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 11043  000BF8  5017               	movf	i2printf@idx,w,c
 11044  000BFA  0D01               	mullw	1
 11045  000BFC  0E9D               	movlw	low STR_47
 11046  000BFE  24F3               	addwf	prodl,w,c
 11047  000C00  6EF6               	movwf	tblptrl,c
 11048  000C02  0EFF               	movlw	high STR_47
 11049  000C04  20F4               	addwfc	prodh,w,c
 11050  000C06  6EF7               	movwf	tblptrh,c
 11051  000C08                     	if	0	;There are less than 3 active tblptr bytes
 11052  000C08                     	endif
 11053  000C08  0008               	tblrd		*
 11054  000C0A  CFF5 F022          	movff	tablat,i2printf@c
 11055                           
 11056                           ;doprnt.c: 1523: }
 11057                           
 11058                           ;doprnt.c: 1508: }
 11059                           ;doprnt.c: 1510: break;
 11060  000C0E  D00B               	goto	i2l3365
 11061  000C10                     i2l3363:
 11062  000C10  501F               	movf	i2printf@flag,w,c
 11063  000C12  0BC0               	andlw	192
 11064                           
 11065                           ; Switch size 1, requested type "space"
 11066                           ; Number of cases is 3, Range of values is 0 to 192
 11067                           ; switch strategies available:
 11068                           ; Name         Instructions Cycles
 11069                           ; simple_byte           10     6 (average)
 11070                           ;	Chosen strategy is simple_byte
 11071  000C14  0A00               	xorlw	0	; case 0
 11072  000C16  B4D8               	btfsc	status,2,c
 11073  000C18  D7B6               	goto	i2l3355
 11074  000C1A  0A80               	xorlw	128	; case 128
 11075  000C1C  B4D8               	btfsc	status,2,c
 11076  000C1E  D7D5               	goto	i2l3357
 11077  000C20  0A40               	xorlw	64	; case 192
 11078  000C22  B4D8               	btfsc	status,2,c
 11079  000C24  D7B0               	goto	i2l3355
 11080  000C26                     i2l3365:
 11081                           
 11082                           ;doprnt.c: 1524: (putch(c) );
 11083  000C26  5022               	movf	i2printf@c,w,c
 11084  000C28  EC29  F013         	call	i2_putch
 11085  000C2C                     i2l3367:
 11086  000C2C  061C               	decf	i2printf@prec,f,c
 11087  000C2E  281C               	incf	i2printf@prec,w,c
 11088  000C30  A4D8               	btfss	status,2,c
 11089  000C32  D7EE               	goto	i2l3363
 11090  000C34                     i2l3369:
 11091  000C34  C00D  FFF6         	movff	i2printf@f,tblptrl
 11092  000C38  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11093  000C3C  4A0D               	infsnz	i2printf@f,f,c
 11094  000C3E  2A0E               	incf	i2printf@f+1,f,c
 11095  000C40                     	if	0	;tblptru may be non-zero
 11096  000C40                     	endif
 11097  000C40                     	if	0	;tblptru may be non-zero
 11098  000C40                     	endif
 11099  000C40  0008               	tblrd		*
 11100  000C42  CFF5 F022          	movff	tablat,i2printf@c
 11101  000C46  5022               	movf	i2printf@c,w,c
 11102  000C48  B4D8               	btfsc	status,2,c
 11103  000C4A  0012               	return	
 11104  000C4C  D638               	goto	i2l3219
 11105  000C4E                     __end_ofi2_printf:
 11106                           	opt stack 0
 11107                           pclatu	equ	0xFFB
 11108                           pclath	equ	0xFFA
 11109                           tblptru	equ	0xFF8
 11110                           tblptrh	equ	0xFF7
 11111                           tblptrl	equ	0xFF6
 11112                           tablat	equ	0xFF5
 11113                           prodh	equ	0xFF4
 11114                           prodl	equ	0xFF3
 11115                           intcon	equ	0xFF2
 11116                           intcon2	equ	0xFF1
 11117                           intcon3	equ	0xFF0
 11118                           postinc0	equ	0xFEE
 11119                           fsr0h	equ	0xFEA
 11120                           fsr0l	equ	0xFE9
 11121                           wreg	equ	0xFE8
 11122                           postdec1	equ	0xFE5
 11123                           plusw1	equ	0xFE3
 11124                           fsr1h	equ	0xFE2
 11125                           fsr1l	equ	0xFE1
 11126                           indf2	equ	0xFDF
 11127                           postinc2	equ	0xFDE
 11128                           postdec2	equ	0xFDD
 11129                           plusw2	equ	0xFDB
 11130                           fsr2h	equ	0xFDA
 11131                           fsr2l	equ	0xFD9
 11132                           status	equ	0xFD8
 11133                           
 11134 ;; *************** function i2_putch *****************
 11135 ;; Defined at:
 11136 ;;		line 25 in file "lcd.c"
 11137 ;; Parameters:    Size  Location     Type
 11138 ;;  data            1    wreg     unsigned char 
 11139 ;; Auto vars:     Size  Location     Type
 11140 ;;  data            1    2[COMRAM] unsigned char 
 11141 ;; Return value:  Size  Location     Type
 11142 ;;                  1    wreg      void 
 11143 ;; Registers used:
 11144 ;;		wreg, status,2, status,0, cstack
 11145 ;; Tracked objects:
 11146 ;;		On entry : 0/0
 11147 ;;		On exit  : 0/0
 11148 ;;		Unchanged: 0/0
 11149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11151 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11153 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11154 ;;Total ram usage:        1 bytes
 11155 ;; Hardware stack levels used:    1
 11156 ;; Hardware stack levels required when called:    1
 11157 ;; This function calls:
 11158 ;;		i2_lcdNibble
 11159 ;; This function is called by:
 11160 ;;		i2_printf
 11161 ;; This function uses a non-reentrant model
 11162 ;;
 11163                           
 11164                           	psect	text54
 11165  002652                     __ptext54:
 11166                           	opt stack 0
 11167  002652                     i2_putch:
 11168                           	opt stack 22
 11169                           
 11170                           ;incstack = 0
 11171                           ;i2putch@data stored from wreg
 11172  002652  6E03               	movwf	i2putch@data,c
 11173                           
 11174                           ;lcd.c: 26: LATDbits.LATD2 = 1;
 11175  002654  848C               	bsf	3980,2,c	;volatile
 11176                           
 11177                           ;lcd.c: 27: lcdNibble(data);
 11178  002656  5003               	movf	i2putch@data,w,c
 11179  002658  ECAB  F010         	call	i2_lcdNibble
 11180  00265C  0012               	return		;funcret
 11181  00265E                     __end_ofi2_putch:
 11182                           	opt stack 0
 11183                           pclatu	equ	0xFFB
 11184                           pclath	equ	0xFFA
 11185                           tblptru	equ	0xFF8
 11186                           tblptrh	equ	0xFF7
 11187                           tblptrl	equ	0xFF6
 11188                           tablat	equ	0xFF5
 11189                           prodh	equ	0xFF4
 11190                           prodl	equ	0xFF3
 11191                           intcon	equ	0xFF2
 11192                           intcon2	equ	0xFF1
 11193                           intcon3	equ	0xFF0
 11194                           postinc0	equ	0xFEE
 11195                           fsr0h	equ	0xFEA
 11196                           fsr0l	equ	0xFE9
 11197                           wreg	equ	0xFE8
 11198                           postdec1	equ	0xFE5
 11199                           plusw1	equ	0xFE3
 11200                           fsr1h	equ	0xFE2
 11201                           fsr1l	equ	0xFE1
 11202                           indf2	equ	0xFDF
 11203                           postinc2	equ	0xFDE
 11204                           postdec2	equ	0xFDD
 11205                           plusw2	equ	0xFDB
 11206                           fsr2h	equ	0xFDA
 11207                           fsr2l	equ	0xFD9
 11208                           status	equ	0xFD8
 11209                           
 11210 ;; *************** function i2_isdigit *****************
 11211 ;; Defined at:
 11212 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
 11213 ;; Parameters:    Size  Location     Type
 11214 ;;  c               1    wreg     unsigned char 
 11215 ;; Auto vars:     Size  Location     Type
 11216 ;;  c               1    2[COMRAM] unsigned char 
 11217 ;; Return value:  Size  Location     Type
 11218 ;;		None               void
 11219 ;; Registers used:
 11220 ;;		wreg, status,2, status,0
 11221 ;; Tracked objects:
 11222 ;;		On entry : 0/0
 11223 ;;		On exit  : 0/0
 11224 ;;		Unchanged: 0/0
 11225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11227 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11228 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11229 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11230 ;;Total ram usage:        3 bytes
 11231 ;; Hardware stack levels used:    1
 11232 ;; This function calls:
 11233 ;;		Nothing
 11234 ;; This function is called by:
 11235 ;;		i2_printf
 11236 ;; This function uses a non-reentrant model
 11237 ;;
 11238                           
 11239                           	psect	text55
 11240  002586                     __ptext55:
 11241                           	opt stack 0
 11242  002586                     i2_isdigit:
 11243                           	opt stack 23
 11244                           
 11245                           ;incstack = 0
 11246                           ;i2isdigit@c stored from wreg
 11247  002586  6E03               	movwf	i2isdigit@c,c
 11248  002588  0E00               	movlw	0
 11249  00258A  6E02               	movwf	i2_isdigit$1079,c
 11250  00258C  0E3A               	movlw	58
 11251  00258E  6003               	cpfslt	i2isdigit@c,c
 11252  002590  D005               	goto	i2l3017
 11253  002592  0E2F               	movlw	47
 11254  002594  6403               	cpfsgt	i2isdigit@c,c
 11255  002596  D002               	goto	i2l3017
 11256  002598  0E01               	movlw	1
 11257  00259A  6E02               	movwf	i2_isdigit$1079,c
 11258  00259C                     i2l3017:
 11259  00259C  C002  F001         	movff	i2_isdigit$1079,??i2_isdigit
 11260  0025A0  3001               	rrcf	??i2_isdigit,w,c
 11261  0025A2  0012               	return	
 11262  0025A4                     __end_ofi2_isdigit:
 11263                           	opt stack 0
 11264                           pclatu	equ	0xFFB
 11265                           pclath	equ	0xFFA
 11266                           tblptru	equ	0xFF8
 11267                           tblptrh	equ	0xFF7
 11268                           tblptrl	equ	0xFF6
 11269                           tablat	equ	0xFF5
 11270                           prodh	equ	0xFF4
 11271                           prodl	equ	0xFF3
 11272                           intcon	equ	0xFF2
 11273                           intcon2	equ	0xFF1
 11274                           intcon3	equ	0xFF0
 11275                           postinc0	equ	0xFEE
 11276                           fsr0h	equ	0xFEA
 11277                           fsr0l	equ	0xFE9
 11278                           wreg	equ	0xFE8
 11279                           postdec1	equ	0xFE5
 11280                           plusw1	equ	0xFE3
 11281                           fsr1h	equ	0xFE2
 11282                           fsr1l	equ	0xFE1
 11283                           indf2	equ	0xFDF
 11284                           postinc2	equ	0xFDE
 11285                           postdec2	equ	0xFDD
 11286                           plusw2	equ	0xFDB
 11287                           fsr2h	equ	0xFDA
 11288                           fsr2l	equ	0xFD9
 11289                           status	equ	0xFD8
 11290                           
 11291 ;; *************** function i2___wmul *****************
 11292 ;; Defined at:
 11293 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
 11294 ;; Parameters:    Size  Location     Type
 11295 ;;  multiplier      2    0[COMRAM] unsigned int 
 11296 ;;  multiplicand    2    2[COMRAM] unsigned int 
 11297 ;; Auto vars:     Size  Location     Type
 11298 ;;  __wmul          2    4[COMRAM] unsigned int 
 11299 ;; Return value:  Size  Location     Type
 11300 ;;                  2    0[COMRAM] unsigned int 
 11301 ;; Registers used:
 11302 ;;		wreg, status,2, status,0, prodl, prodh
 11303 ;; Tracked objects:
 11304 ;;		On entry : 0/0
 11305 ;;		On exit  : 0/0
 11306 ;;		Unchanged: 0/0
 11307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11308 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11309 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11311 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11312 ;;Total ram usage:        6 bytes
 11313 ;; Hardware stack levels used:    1
 11314 ;; This function calls:
 11315 ;;		Nothing
 11316 ;; This function is called by:
 11317 ;;		_simulate
 11318 ;;		_HexDecToDec2
 11319 ;;		_WriteRun
 11320 ;;		i2_printf
 11321 ;; This function uses a non-reentrant model
 11322 ;;
 11323                           
 11324                           	psect	text56
 11325  0024FE                     __ptext56:
 11326                           	opt stack 0
 11327  0024FE                     i2___wmul:
 11328                           	opt stack 23
 11329                           
 11330                           ;incstack = 0
 11331  0024FE  5001               	movf	i2___wmul@multiplier,w,c
 11332  002500  0203               	mulwf	i2___wmul@multiplicand,c
 11333  002502  CFF3 F005          	movff	prodl,i2___wmul@product
 11334  002506  CFF4 F006          	movff	prodh,i2___wmul@product+1
 11335  00250A  5001               	movf	i2___wmul@multiplier,w,c
 11336  00250C  0204               	mulwf	i2___wmul@multiplicand+1,c
 11337  00250E  50F3               	movf	prodl,w,c
 11338  002510  2606               	addwf	i2___wmul@product+1,f,c
 11339  002512  5002               	movf	i2___wmul@multiplier+1,w,c
 11340  002514  0203               	mulwf	i2___wmul@multiplicand,c
 11341  002516  50F3               	movf	prodl,w,c
 11342  002518  2606               	addwf	i2___wmul@product+1,f,c
 11343  00251A  C005  F001         	movff	i2___wmul@product,?i2___wmul
 11344  00251E  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 11345  002522  0012               	return	
 11346  002524                     __end_ofi2___wmul:
 11347                           	opt stack 0
 11348                           pclatu	equ	0xFFB
 11349                           pclath	equ	0xFFA
 11350                           tblptru	equ	0xFF8
 11351                           tblptrh	equ	0xFF7
 11352                           tblptrl	equ	0xFF6
 11353                           tablat	equ	0xFF5
 11354                           prodh	equ	0xFF4
 11355                           prodl	equ	0xFF3
 11356                           intcon	equ	0xFF2
 11357                           intcon2	equ	0xFF1
 11358                           intcon3	equ	0xFF0
 11359                           postinc0	equ	0xFEE
 11360                           fsr0h	equ	0xFEA
 11361                           fsr0l	equ	0xFE9
 11362                           wreg	equ	0xFE8
 11363                           postdec1	equ	0xFE5
 11364                           plusw1	equ	0xFE3
 11365                           fsr1h	equ	0xFE2
 11366                           fsr1l	equ	0xFE1
 11367                           indf2	equ	0xFDF
 11368                           postinc2	equ	0xFDE
 11369                           postdec2	equ	0xFDD
 11370                           plusw2	equ	0xFDB
 11371                           fsr2h	equ	0xFDA
 11372                           fsr2l	equ	0xFD9
 11373                           status	equ	0xFD8
 11374                           
 11375 ;; *************** function i2___lwmod *****************
 11376 ;; Defined at:
 11377 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
 11378 ;; Parameters:    Size  Location     Type
 11379 ;;  dividend        2    7[COMRAM] unsigned int 
 11380 ;;  divisor         2    9[COMRAM] unsigned int 
 11381 ;; Auto vars:     Size  Location     Type
 11382 ;;  __lwmod         1   11[COMRAM] unsigned char 
 11383 ;; Return value:  Size  Location     Type
 11384 ;;                  2    7[COMRAM] unsigned int 
 11385 ;; Registers used:
 11386 ;;		wreg, status,2, status,0
 11387 ;; Tracked objects:
 11388 ;;		On entry : 0/0
 11389 ;;		On exit  : 0/0
 11390 ;;		Unchanged: 0/0
 11391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11392 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11393 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11395 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11396 ;;Total ram usage:        5 bytes
 11397 ;; Hardware stack levels used:    1
 11398 ;; This function calls:
 11399 ;;		Nothing
 11400 ;; This function is called by:
 11401 ;;		i2_printf
 11402 ;; This function uses a non-reentrant model
 11403 ;;
 11404                           
 11405                           	psect	text57
 11406  002320                     __ptext57:
 11407                           	opt stack 0
 11408  002320                     i2___lwmod:
 11409                           	opt stack 23
 11410                           
 11411                           ;incstack = 0
 11412  002320  500A               	movf	i2___lwmod@divisor,w,c
 11413  002322  100B               	iorwf	i2___lwmod@divisor+1,w,c
 11414  002324  B4D8               	btfsc	status,2,c
 11415  002326  D018               	goto	i2l984
 11416  002328  0E01               	movlw	1
 11417  00232A  6E0C               	movwf	i2___lwmod@counter,c
 11418  00232C  D004               	goto	i2l3049
 11419  00232E                     i2l3047:
 11420  00232E  90D8               	bcf	status,0,c
 11421  002330  360A               	rlcf	i2___lwmod@divisor,f,c
 11422  002332  360B               	rlcf	i2___lwmod@divisor+1,f,c
 11423  002334  2A0C               	incf	i2___lwmod@counter,f,c
 11424  002336                     i2l3049:
 11425  002336  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 11426  002338  D7FA               	goto	i2l3047
 11427  00233A                     i2l3051:
 11428  00233A  500A               	movf	i2___lwmod@divisor,w,c
 11429  00233C  5C08               	subwf	i2___lwmod@dividend,w,c
 11430  00233E  500B               	movf	i2___lwmod@divisor+1,w,c
 11431  002340  5809               	subwfb	i2___lwmod@dividend+1,w,c
 11432  002342  A0D8               	btfss	status,0,c
 11433  002344  D004               	goto	i2l3055
 11434  002346  500A               	movf	i2___lwmod@divisor,w,c
 11435  002348  5E08               	subwf	i2___lwmod@dividend,f,c
 11436  00234A  500B               	movf	i2___lwmod@divisor+1,w,c
 11437  00234C  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 11438  00234E                     i2l3055:
 11439  00234E  90D8               	bcf	status,0,c
 11440  002350  320B               	rrcf	i2___lwmod@divisor+1,f,c
 11441  002352  320A               	rrcf	i2___lwmod@divisor,f,c
 11442  002354  2E0C               	decfsz	i2___lwmod@counter,f,c
 11443  002356  D7F1               	goto	i2l3051
 11444  002358                     i2l984:
 11445  002358  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 11446  00235C  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 11447  002360  0012               	return		;funcret
 11448  002362                     __end_ofi2___lwmod:
 11449                           	opt stack 0
 11450                           pclatu	equ	0xFFB
 11451                           pclath	equ	0xFFA
 11452                           tblptru	equ	0xFF8
 11453                           tblptrh	equ	0xFF7
 11454                           tblptrl	equ	0xFF6
 11455                           tablat	equ	0xFF5
 11456                           prodh	equ	0xFF4
 11457                           prodl	equ	0xFF3
 11458                           intcon	equ	0xFF2
 11459                           intcon2	equ	0xFF1
 11460                           intcon3	equ	0xFF0
 11461                           postinc0	equ	0xFEE
 11462                           fsr0h	equ	0xFEA
 11463                           fsr0l	equ	0xFE9
 11464                           wreg	equ	0xFE8
 11465                           postdec1	equ	0xFE5
 11466                           plusw1	equ	0xFE3
 11467                           fsr1h	equ	0xFE2
 11468                           fsr1l	equ	0xFE1
 11469                           indf2	equ	0xFDF
 11470                           postinc2	equ	0xFDE
 11471                           postdec2	equ	0xFDD
 11472                           plusw2	equ	0xFDB
 11473                           fsr2h	equ	0xFDA
 11474                           fsr2l	equ	0xFD9
 11475                           status	equ	0xFD8
 11476                           
 11477 ;; *************** function i2___lwdiv *****************
 11478 ;; Defined at:
 11479 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
 11480 ;; Parameters:    Size  Location     Type
 11481 ;;  dividend        2    0[COMRAM] unsigned int 
 11482 ;;  divisor         2    2[COMRAM] unsigned int 
 11483 ;; Auto vars:     Size  Location     Type
 11484 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 11485 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 11486 ;; Return value:  Size  Location     Type
 11487 ;;                  2    0[COMRAM] unsigned int 
 11488 ;; Registers used:
 11489 ;;		wreg, status,2, status,0
 11490 ;; Tracked objects:
 11491 ;;		On entry : 0/0
 11492 ;;		On exit  : 0/0
 11493 ;;		Unchanged: 0/0
 11494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11495 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11496 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11498 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11499 ;;Total ram usage:        7 bytes
 11500 ;; Hardware stack levels used:    1
 11501 ;; This function calls:
 11502 ;;		Nothing
 11503 ;; This function is called by:
 11504 ;;		i2_printf
 11505 ;; This function uses a non-reentrant model
 11506 ;;
 11507                           
 11508                           	psect	text58
 11509  0021AC                     __ptext58:
 11510                           	opt stack 0
 11511  0021AC                     i2___lwdiv:
 11512                           	opt stack 23
 11513                           
 11514                           ;incstack = 0
 11515  0021AC  0E00               	movlw	0
 11516  0021AE  6E06               	movwf	i2___lwdiv@quotient+1,c
 11517  0021B0  0E00               	movlw	0
 11518  0021B2  6E05               	movwf	i2___lwdiv@quotient,c
 11519  0021B4  5003               	movf	i2___lwdiv@divisor,w,c
 11520  0021B6  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 11521  0021B8  B4D8               	btfsc	status,2,c
 11522  0021BA  D01C               	goto	i2l974
 11523  0021BC  0E01               	movlw	1
 11524  0021BE  6E07               	movwf	i2___lwdiv@counter,c
 11525  0021C0  D004               	goto	i2l3029
 11526  0021C2                     i2l3027:
 11527  0021C2  90D8               	bcf	status,0,c
 11528  0021C4  3603               	rlcf	i2___lwdiv@divisor,f,c
 11529  0021C6  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 11530  0021C8  2A07               	incf	i2___lwdiv@counter,f,c
 11531  0021CA                     i2l3029:
 11532  0021CA  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 11533  0021CC  D7FA               	goto	i2l3027
 11534  0021CE                     i2l3031:
 11535  0021CE  90D8               	bcf	status,0,c
 11536  0021D0  3605               	rlcf	i2___lwdiv@quotient,f,c
 11537  0021D2  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 11538  0021D4  5003               	movf	i2___lwdiv@divisor,w,c
 11539  0021D6  5C01               	subwf	i2___lwdiv@dividend,w,c
 11540  0021D8  5004               	movf	i2___lwdiv@divisor+1,w,c
 11541  0021DA  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 11542  0021DC  A0D8               	btfss	status,0,c
 11543  0021DE  D005               	goto	i2l3039
 11544  0021E0  5003               	movf	i2___lwdiv@divisor,w,c
 11545  0021E2  5E01               	subwf	i2___lwdiv@dividend,f,c
 11546  0021E4  5004               	movf	i2___lwdiv@divisor+1,w,c
 11547  0021E6  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 11548  0021E8  8005               	bsf	i2___lwdiv@quotient,0,c
 11549  0021EA                     i2l3039:
 11550  0021EA  90D8               	bcf	status,0,c
 11551  0021EC  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 11552  0021EE  3203               	rrcf	i2___lwdiv@divisor,f,c
 11553  0021F0  2E07               	decfsz	i2___lwdiv@counter,f,c
 11554  0021F2  D7ED               	goto	i2l3031
 11555  0021F4                     i2l974:
 11556  0021F4  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 11557  0021F8  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 11558  0021FC  0012               	return		;funcret
 11559  0021FE                     __end_ofi2___lwdiv:
 11560                           	opt stack 0
 11561                           pclatu	equ	0xFFB
 11562                           pclath	equ	0xFFA
 11563                           tblptru	equ	0xFF8
 11564                           tblptrh	equ	0xFF7
 11565                           tblptrl	equ	0xFF6
 11566                           tablat	equ	0xFF5
 11567                           prodh	equ	0xFF4
 11568                           prodl	equ	0xFF3
 11569                           intcon	equ	0xFF2
 11570                           intcon2	equ	0xFF1
 11571                           intcon3	equ	0xFF0
 11572                           postinc0	equ	0xFEE
 11573                           fsr0h	equ	0xFEA
 11574                           fsr0l	equ	0xFE9
 11575                           wreg	equ	0xFE8
 11576                           postdec1	equ	0xFE5
 11577                           plusw1	equ	0xFE3
 11578                           fsr1h	equ	0xFE2
 11579                           fsr1l	equ	0xFE1
 11580                           indf2	equ	0xFDF
 11581                           postinc2	equ	0xFDE
 11582                           postdec2	equ	0xFDD
 11583                           plusw2	equ	0xFDB
 11584                           fsr2h	equ	0xFDA
 11585                           fsr2l	equ	0xFD9
 11586                           status	equ	0xFD8
 11587                           
 11588 ;; *************** function i2_lcdInst *****************
 11589 ;; Defined at:
 11590 ;;		line 20 in file "lcd.c"
 11591 ;; Parameters:    Size  Location     Type
 11592 ;;  data            1    wreg     unsigned char 
 11593 ;; Auto vars:     Size  Location     Type
 11594 ;;  data            1    2[COMRAM] unsigned char 
 11595 ;; Return value:  Size  Location     Type
 11596 ;;                  1    wreg      void 
 11597 ;; Registers used:
 11598 ;;		wreg, status,2, status,0, cstack
 11599 ;; Tracked objects:
 11600 ;;		On entry : 0/0
 11601 ;;		On exit  : 0/0
 11602 ;;		Unchanged: 0/0
 11603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11605 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11607 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11608 ;;Total ram usage:        1 bytes
 11609 ;; Hardware stack levels used:    1
 11610 ;; Hardware stack levels required when called:    1
 11611 ;; This function calls:
 11612 ;;		i2_lcdNibble
 11613 ;; This function is called by:
 11614 ;;		_mainloop
 11615 ;;		_simulate
 11616 ;;		_intrpt
 11617 ;;		_showInfo
 11618 ;;		_stopMoving
 11619 ;;		_PermLog
 11620 ;; This function uses a non-reentrant model
 11621 ;;
 11622                           
 11623                           	psect	text59
 11624  00265E                     __ptext59:
 11625                           	opt stack 0
 11626  00265E                     i2_lcdInst:
 11627                           	opt stack 24
 11628                           
 11629                           ;incstack = 0
 11630                           ;i2lcdInst@data stored from wreg
 11631  00265E  6E03               	movwf	i2lcdInst@data,c
 11632                           
 11633                           ;lcd.c: 21: LATDbits.LATD2 = 0;
 11634  002660  948C               	bcf	3980,2,c	;volatile
 11635                           
 11636                           ;lcd.c: 22: lcdNibble(data);
 11637  002662  5003               	movf	i2lcdInst@data,w,c
 11638  002664  ECAB  F010         	call	i2_lcdNibble
 11639  002668  0012               	return		;funcret
 11640  00266A                     __end_ofi2_lcdInst:
 11641                           	opt stack 0
 11642                           pclatu	equ	0xFFB
 11643                           pclath	equ	0xFFA
 11644                           tblptru	equ	0xFF8
 11645                           tblptrh	equ	0xFF7
 11646                           tblptrl	equ	0xFF6
 11647                           tablat	equ	0xFF5
 11648                           prodh	equ	0xFF4
 11649                           prodl	equ	0xFF3
 11650                           intcon	equ	0xFF2
 11651                           intcon2	equ	0xFF1
 11652                           intcon3	equ	0xFF0
 11653                           postinc0	equ	0xFEE
 11654                           fsr0h	equ	0xFEA
 11655                           fsr0l	equ	0xFE9
 11656                           wreg	equ	0xFE8
 11657                           postdec1	equ	0xFE5
 11658                           plusw1	equ	0xFE3
 11659                           fsr1h	equ	0xFE2
 11660                           fsr1l	equ	0xFE1
 11661                           indf2	equ	0xFDF
 11662                           postinc2	equ	0xFDE
 11663                           postdec2	equ	0xFDD
 11664                           plusw2	equ	0xFDB
 11665                           fsr2h	equ	0xFDA
 11666                           fsr2l	equ	0xFD9
 11667                           status	equ	0xFD8
 11668                           
 11669 ;; *************** function i2_lcdNibble *****************
 11670 ;; Defined at:
 11671 ;;		line 30 in file "lcd.c"
 11672 ;; Parameters:    Size  Location     Type
 11673 ;;  data            1    wreg     unsigned char 
 11674 ;; Auto vars:     Size  Location     Type
 11675 ;;  data            1    1[COMRAM] unsigned char 
 11676 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 11677 ;; Return value:  Size  Location     Type
 11678 ;;                  1    wreg      void 
 11679 ;; Registers used:
 11680 ;;		wreg, status,2, status,0
 11681 ;; Tracked objects:
 11682 ;;		On entry : 0/0
 11683 ;;		On exit  : 0/0
 11684 ;;		Unchanged: 0/0
 11685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11687 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11689 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11690 ;;Total ram usage:        2 bytes
 11691 ;; Hardware stack levels used:    1
 11692 ;; This function calls:
 11693 ;;		Nothing
 11694 ;; This function is called by:
 11695 ;;		i2_lcdInst
 11696 ;;		i2_putch
 11697 ;; This function uses a non-reentrant model
 11698 ;;
 11699                           
 11700                           	psect	text60
 11701  002156                     __ptext60:
 11702                           	opt stack 0
 11703  002156                     i2_lcdNibble:
 11704                           	opt stack 24
 11705                           
 11706                           ;incstack = 0
 11707                           ;i2lcdNibble@data stored from wreg
 11708  002156  6E02               	movwf	i2lcdNibble@data,c
 11709                           
 11710                           ;lcd.c: 32: char temp = data & 0xF0;
 11711  002158  5002               	movf	i2lcdNibble@data,w,c
 11712  00215A  0BF0               	andlw	240
 11713  00215C  6E01               	movwf	i2lcdNibble@temp,c
 11714                           
 11715                           ;lcd.c: 33: LATD = LATD & 0x0F;
 11716  00215E  508C               	movf	3980,w,c	;volatile
 11717  002160  0B0F               	andlw	15
 11718  002162  6E8C               	movwf	3980,c	;volatile
 11719                           
 11720                           ;lcd.c: 34: LATD = temp | LATD;
 11721  002164  5001               	movf	i2lcdNibble@temp,w,c
 11722  002166  108C               	iorwf	3980,w,c	;volatile
 11723  002168  6E8C               	movwf	3980,c	;volatile
 11724                           
 11725                           ;lcd.c: 36: LATDbits.LATD3 = 0;
 11726  00216A  968C               	bcf	3980,3,c	;volatile
 11727                           
 11728                           ;lcd.c: 37: _delay((unsigned long)((25)*(8000000/4000000.0)));
 11729  00216C  0E10               	movlw	16
 11730  00216E                     i2u371_47:
 11731  00216E  2EE8               	decfsz	wreg,f,c
 11732  002170  D7FE               	bra	i2u371_47
 11733  002172  D000               	nop2	
 11734                           
 11735                           ;lcd.c: 38: LATDbits.LATD3 = 1;
 11736  002174  868C               	bsf	3980,3,c	;volatile
 11737                           
 11738                           ;lcd.c: 39: _delay((unsigned long)((25)*(8000000/4000000.0)));
 11739  002176  0E10               	movlw	16
 11740  002178                     i2u372_47:
 11741  002178  2EE8               	decfsz	wreg,f,c
 11742  00217A  D7FE               	bra	i2u372_47
 11743  00217C  D000               	nop2	
 11744                           
 11745                           ;lcd.c: 41: data = data << 4;
 11746  00217E  3802               	swapf	i2lcdNibble@data,w,c
 11747  002180  0BF0               	andlw	240
 11748  002182  6E02               	movwf	i2lcdNibble@data,c
 11749                           
 11750                           ;lcd.c: 43: temp = data & 0xF0;
 11751  002184  5002               	movf	i2lcdNibble@data,w,c
 11752  002186  0BF0               	andlw	240
 11753  002188  6E01               	movwf	i2lcdNibble@temp,c
 11754                           
 11755                           ;lcd.c: 44: LATD = LATD & 0x0F;
 11756  00218A  508C               	movf	3980,w,c	;volatile
 11757  00218C  0B0F               	andlw	15
 11758  00218E  6E8C               	movwf	3980,c	;volatile
 11759                           
 11760                           ;lcd.c: 45: LATD = temp | LATD;
 11761  002190  5001               	movf	i2lcdNibble@temp,w,c
 11762  002192  108C               	iorwf	3980,w,c	;volatile
 11763  002194  6E8C               	movwf	3980,c	;volatile
 11764                           
 11765                           ;lcd.c: 47: LATDbits.LATD3 = 0;
 11766  002196  968C               	bcf	3980,3,c	;volatile
 11767                           
 11768                           ;lcd.c: 48: _delay((unsigned long)((25)*(8000000/4000000.0)));
 11769  002198  0E10               	movlw	16
 11770  00219A                     i2u373_47:
 11771  00219A  2EE8               	decfsz	wreg,f,c
 11772  00219C  D7FE               	bra	i2u373_47
 11773  00219E  D000               	nop2	
 11774                           
 11775                           ;lcd.c: 49: LATDbits.LATD3 = 1;
 11776  0021A0  868C               	bsf	3980,3,c	;volatile
 11777                           
 11778                           ;lcd.c: 50: _delay((unsigned long)((25)*(8000000/4000000.0)));
 11779  0021A2  0E10               	movlw	16
 11780  0021A4                     i2u374_47:
 11781  0021A4  2EE8               	decfsz	wreg,f,c
 11782  0021A6  D7FE               	bra	i2u374_47
 11783  0021A8  D000               	nop2	
 11784  0021AA  0012               	return		;funcret
 11785  0021AC                     __end_ofi2_lcdNibble:
 11786                           	opt stack 0
 11787                           pclatu	equ	0xFFB
 11788                           pclath	equ	0xFFA
 11789                           tblptru	equ	0xFF8
 11790                           tblptrh	equ	0xFF7
 11791                           tblptrl	equ	0xFF6
 11792                           tablat	equ	0xFF5
 11793                           prodh	equ	0xFF4
 11794                           prodl	equ	0xFF3
 11795                           intcon	equ	0xFF2
 11796                           intcon2	equ	0xFF1
 11797                           intcon3	equ	0xFF0
 11798                           postinc0	equ	0xFEE
 11799                           fsr0h	equ	0xFEA
 11800                           fsr0l	equ	0xFE9
 11801                           wreg	equ	0xFE8
 11802                           postdec1	equ	0xFE5
 11803                           plusw1	equ	0xFE3
 11804                           fsr1h	equ	0xFE2
 11805                           fsr1l	equ	0xFE1
 11806                           indf2	equ	0xFDF
 11807                           postinc2	equ	0xFDE
 11808                           postdec2	equ	0xFDD
 11809                           plusw2	equ	0xFDB
 11810                           fsr2h	equ	0xFDA
 11811                           fsr2l	equ	0xFD9
 11812                           status	equ	0xFD8
 11813                           
 11814 ;; *************** function _captureKeypad *****************
 11815 ;; Defined at:
 11816 ;;		line 13 in file "modules.c"
 11817 ;; Parameters:    Size  Location     Type
 11818 ;;		None
 11819 ;; Auto vars:     Size  Location     Type
 11820 ;;  keypress        1    2[COMRAM] unsigned char 
 11821 ;; Return value:  Size  Location     Type
 11822 ;;                  2    0[COMRAM] unsigned int 
 11823 ;; Registers used:
 11824 ;;		wreg, status,2, status,0
 11825 ;; Tracked objects:
 11826 ;;		On entry : 0/0
 11827 ;;		On exit  : 0/0
 11828 ;;		Unchanged: 0/0
 11829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11830 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11831 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11833 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11834 ;;Total ram usage:        3 bytes
 11835 ;; Hardware stack levels used:    1
 11836 ;; This function calls:
 11837 ;;		Nothing
 11838 ;; This function is called by:
 11839 ;;		_showInfo
 11840 ;;		_PermLog
 11841 ;; This function uses a non-reentrant model
 11842 ;;
 11843                           
 11844                           	psect	text61
 11845  0025A4                     __ptext61:
 11846                           	opt stack 0
 11847  0025A4                     _captureKeypad:
 11848                           	opt stack 23
 11849                           
 11850                           ;modules.c: 14: (INTCONbits.GIE = 0);
 11851                           
 11852                           ;incstack = 0
 11853  0025A4  9EF2               	bcf	intcon,7,c	;volatile
 11854  0025A6                     i2l241:
 11855  0025A6  A281               	btfss	3969,1,c	;volatile
 11856  0025A8  D7FE               	goto	i2l241
 11857                           
 11858                           ;modules.c: 16: unsigned char keypress = (PORTB & 0xF0) >> 4;
 11859  0025AA  3881               	swapf	3969,w,c	;volatile
 11860  0025AC  0B0F               	andlw	15
 11861  0025AE  0B0F               	andlw	15
 11862  0025B0  6E03               	movwf	captureKeypad@keypress,c
 11863  0025B2                     i2l244:
 11864  0025B2  B281               	btfsc	3969,1,c	;volatile
 11865  0025B4  D7FE               	goto	i2l244
 11866                           
 11867                           ;modules.c: 18: INT1IF = 0;
 11868  0025B6  90F0               	bcf	intcon3,0,c	;volatile
 11869                           
 11870                           ;modules.c: 19: (INTCONbits.GIE = 1);
 11871  0025B8  8EF2               	bsf	intcon,7,c	;volatile
 11872                           
 11873                           ;modules.c: 20: return keypress;
 11874  0025BA  C003  F001         	movff	captureKeypad@keypress,?_captureKeypad
 11875  0025BE  6A02               	clrf	?_captureKeypad+1,c
 11876  0025C0  0012               	return		;funcret
 11877  0025C2                     __end_of_captureKeypad:
 11878                           	opt stack 0
 11879                           pclatu	equ	0xFFB
 11880                           pclath	equ	0xFFA
 11881                           tblptru	equ	0xFF8
 11882                           tblptrh	equ	0xFF7
 11883                           tblptrl	equ	0xFF6
 11884                           tablat	equ	0xFF5
 11885                           prodh	equ	0xFF4
 11886                           prodl	equ	0xFF3
 11887                           intcon	equ	0xFF2
 11888                           intcon2	equ	0xFF1
 11889                           intcon3	equ	0xFF0
 11890                           postinc0	equ	0xFEE
 11891                           fsr0h	equ	0xFEA
 11892                           fsr0l	equ	0xFE9
 11893                           wreg	equ	0xFE8
 11894                           postdec1	equ	0xFE5
 11895                           plusw1	equ	0xFE3
 11896                           fsr1h	equ	0xFE2
 11897                           fsr1l	equ	0xFE1
 11898                           indf2	equ	0xFDF
 11899                           postinc2	equ	0xFDE
 11900                           postdec2	equ	0xFDD
 11901                           plusw2	equ	0xFDB
 11902                           fsr2h	equ	0xFDA
 11903                           fsr2l	equ	0xFD9
 11904                           status	equ	0xFD8
 11905                           
 11906 ;; *************** function _ReadRun *****************
 11907 ;; Defined at:
 11908 ;;		line 66 in file "eeprom.c"
 11909 ;; Parameters:    Size  Location     Type
 11910 ;;  backruns        1    wreg     unsigned char 
 11911 ;;  sorted          2    2[COMRAM] PTR unsigned char 
 11912 ;;		 -> PermLog@sorted(4), 
 11913 ;;  time            2    4[COMRAM] PTR unsigned int 
 11914 ;;		 -> PermLog@time(2), 
 11915 ;; Auto vars:     Size  Location     Type
 11916 ;;  backruns        1   10[COMRAM] unsigned char 
 11917 ;;  add             2   11[COMRAM] unsigned int 
 11918 ;; Return value:  Size  Location     Type
 11919 ;;                  1    wreg      void 
 11920 ;; Registers used:
 11921 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11922 ;; Tracked objects:
 11923 ;;		On entry : 0/0
 11924 ;;		On exit  : 0/0
 11925 ;;		Unchanged: 0/0
 11926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11927 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11928 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11929 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11930 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11931 ;;Total ram usage:       11 bytes
 11932 ;; Hardware stack levels used:    1
 11933 ;; Hardware stack levels required when called:    1
 11934 ;; This function calls:
 11935 ;;		_back
 11936 ;;		i2_ReadEE
 11937 ;; This function is called by:
 11938 ;;		_PermLog
 11939 ;; This function uses a non-reentrant model
 11940 ;;
 11941                           
 11942                           	psect	text62
 11943  0013FA                     __ptext62:
 11944                           	opt stack 0
 11945  0013FA                     _ReadRun:
 11946                           	opt stack 23
 11947                           
 11948                           ;incstack = 0
 11949                           ;ReadRun@backruns stored from wreg
 11950  0013FA  6E0B               	movwf	ReadRun@backruns,c
 11951                           
 11952                           ;eeprom.c: 67: unsigned int add = back(backruns) * 5;
 11953  0013FC  500B               	movf	ReadRun@backruns,w,c
 11954  0013FE  ECE1  F012         	call	_back
 11955  001402  6E07               	movwf	??_ReadRun& (0+255),c
 11956  001404  5007               	movf	??_ReadRun,w,c
 11957  001406  0D05               	mullw	5
 11958  001408  CFF3 F00C          	movff	prodl,ReadRun@add
 11959  00140C  CFF4 F00D          	movff	prodh,ReadRun@add+1
 11960                           
 11961                           ;eeprom.c: 68: *time = ReadEE(add++ *8);
 11962  001410  C00C  F007         	movff	ReadRun@add,??_ReadRun
 11963  001414  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 11964  001418  90D8               	bcf	status,0,c
 11965  00141A  3607               	rlcf	??_ReadRun,f,c
 11966  00141C  3608               	rlcf	??_ReadRun+1,f,c
 11967  00141E  90D8               	bcf	status,0,c
 11968  001420  3607               	rlcf	??_ReadRun,f,c
 11969  001422  3608               	rlcf	??_ReadRun+1,f,c
 11970  001424  90D8               	bcf	status,0,c
 11971  001426  3607               	rlcf	??_ReadRun,f,c
 11972  001428  3608               	rlcf	??_ReadRun+1,f,c
 11973  00142A  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 11974  00142E  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 11975  001432  ECFB  F012         	call	i2_ReadEE	;wreg free
 11976  001436  6E09               	movwf	(??_ReadRun+2)& (0+255),c
 11977  001438  6A0A               	clrf	(??_ReadRun+3)& (0+255),c
 11978  00143A  C005  FFD9         	movff	ReadRun@time,fsr2l
 11979  00143E  C006  FFDA         	movff	ReadRun@time+1,fsr2h
 11980  001442  C009  FFDE         	movff	??_ReadRun+2,postinc2
 11981  001446  C00A  FFDD         	movff	??_ReadRun+3,postdec2
 11982  00144A  4A0C               	infsnz	ReadRun@add,f,c
 11983  00144C  2A0D               	incf	ReadRun@add+1,f,c
 11984                           
 11985                           ;eeprom.c: 69: sorted[0] = ReadEE(add++ *8);
 11986  00144E  C00C  F007         	movff	ReadRun@add,??_ReadRun
 11987  001452  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 11988  001456  90D8               	bcf	status,0,c
 11989  001458  3607               	rlcf	??_ReadRun,f,c
 11990  00145A  3608               	rlcf	??_ReadRun+1,f,c
 11991  00145C  90D8               	bcf	status,0,c
 11992  00145E  3607               	rlcf	??_ReadRun,f,c
 11993  001460  3608               	rlcf	??_ReadRun+1,f,c
 11994  001462  90D8               	bcf	status,0,c
 11995  001464  3607               	rlcf	??_ReadRun,f,c
 11996  001466  3608               	rlcf	??_ReadRun+1,f,c
 11997  001468  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 11998  00146C  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 11999  001470  ECFB  F012         	call	i2_ReadEE	;wreg free
 12000  001474  C003  FFD9         	movff	ReadRun@sorted,fsr2l
 12001  001478  C004  FFDA         	movff	ReadRun@sorted+1,fsr2h
 12002  00147C  6EDF               	movwf	indf2,c
 12003  00147E  4A0C               	infsnz	ReadRun@add,f,c
 12004  001480  2A0D               	incf	ReadRun@add+1,f,c
 12005                           
 12006                           ;eeprom.c: 70: sorted[1] = ReadEE(add++ *8);
 12007  001482  EE20 F001          	lfsr	2,1
 12008  001486  5003               	movf	ReadRun@sorted,w,c
 12009  001488  26D9               	addwf	fsr2l,f,c
 12010  00148A  5004               	movf	ReadRun@sorted+1,w,c
 12011  00148C  22DA               	addwfc	fsr2h,f,c
 12012  00148E  C00C  F007         	movff	ReadRun@add,??_ReadRun
 12013  001492  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 12014  001496  90D8               	bcf	status,0,c
 12015  001498  3607               	rlcf	??_ReadRun,f,c
 12016  00149A  3608               	rlcf	??_ReadRun+1,f,c
 12017  00149C  90D8               	bcf	status,0,c
 12018  00149E  3607               	rlcf	??_ReadRun,f,c
 12019  0014A0  3608               	rlcf	??_ReadRun+1,f,c
 12020  0014A2  90D8               	bcf	status,0,c
 12021  0014A4  3607               	rlcf	??_ReadRun,f,c
 12022  0014A6  3608               	rlcf	??_ReadRun+1,f,c
 12023  0014A8  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 12024  0014AC  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 12025  0014B0  ECFB  F012         	call	i2_ReadEE	;wreg free
 12026  0014B4  6EDF               	movwf	indf2,c
 12027  0014B6  4A0C               	infsnz	ReadRun@add,f,c
 12028  0014B8  2A0D               	incf	ReadRun@add+1,f,c
 12029                           
 12030                           ;eeprom.c: 71: sorted[2] = ReadEE(add++ *8);
 12031  0014BA  EE20 F002          	lfsr	2,2
 12032  0014BE  5003               	movf	ReadRun@sorted,w,c
 12033  0014C0  26D9               	addwf	fsr2l,f,c
 12034  0014C2  5004               	movf	ReadRun@sorted+1,w,c
 12035  0014C4  22DA               	addwfc	fsr2h,f,c
 12036  0014C6  C00C  F007         	movff	ReadRun@add,??_ReadRun
 12037  0014CA  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 12038  0014CE  90D8               	bcf	status,0,c
 12039  0014D0  3607               	rlcf	??_ReadRun,f,c
 12040  0014D2  3608               	rlcf	??_ReadRun+1,f,c
 12041  0014D4  90D8               	bcf	status,0,c
 12042  0014D6  3607               	rlcf	??_ReadRun,f,c
 12043  0014D8  3608               	rlcf	??_ReadRun+1,f,c
 12044  0014DA  90D8               	bcf	status,0,c
 12045  0014DC  3607               	rlcf	??_ReadRun,f,c
 12046  0014DE  3608               	rlcf	??_ReadRun+1,f,c
 12047  0014E0  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 12048  0014E4  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 12049  0014E8  ECFB  F012         	call	i2_ReadEE	;wreg free
 12050  0014EC  6EDF               	movwf	indf2,c
 12051  0014EE  4A0C               	infsnz	ReadRun@add,f,c
 12052  0014F0  2A0D               	incf	ReadRun@add+1,f,c
 12053                           
 12054                           ;eeprom.c: 72: sorted[3] = ReadEE(add++ *8);
 12055  0014F2  EE20 F003          	lfsr	2,3
 12056  0014F6  5003               	movf	ReadRun@sorted,w,c
 12057  0014F8  26D9               	addwf	fsr2l,f,c
 12058  0014FA  5004               	movf	ReadRun@sorted+1,w,c
 12059  0014FC  22DA               	addwfc	fsr2h,f,c
 12060  0014FE  C00C  F007         	movff	ReadRun@add,??_ReadRun
 12061  001502  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 12062  001506  90D8               	bcf	status,0,c
 12063  001508  3607               	rlcf	??_ReadRun,f,c
 12064  00150A  3608               	rlcf	??_ReadRun+1,f,c
 12065  00150C  90D8               	bcf	status,0,c
 12066  00150E  3607               	rlcf	??_ReadRun,f,c
 12067  001510  3608               	rlcf	??_ReadRun+1,f,c
 12068  001512  90D8               	bcf	status,0,c
 12069  001514  3607               	rlcf	??_ReadRun,f,c
 12070  001516  3608               	rlcf	??_ReadRun+1,f,c
 12071  001518  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 12072  00151C  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 12073  001520  ECFB  F012         	call	i2_ReadEE	;wreg free
 12074  001524  6EDF               	movwf	indf2,c
 12075  001526  4A0C               	infsnz	ReadRun@add,f,c
 12076  001528  2A0D               	incf	ReadRun@add+1,f,c
 12077  00152A  0012               	return		;funcret
 12078  00152C                     __end_of_ReadRun:
 12079                           	opt stack 0
 12080                           pclatu	equ	0xFFB
 12081                           pclath	equ	0xFFA
 12082                           tblptru	equ	0xFF8
 12083                           tblptrh	equ	0xFF7
 12084                           tblptrl	equ	0xFF6
 12085                           tablat	equ	0xFF5
 12086                           prodh	equ	0xFF4
 12087                           prodl	equ	0xFF3
 12088                           intcon	equ	0xFF2
 12089                           intcon2	equ	0xFF1
 12090                           intcon3	equ	0xFF0
 12091                           postinc0	equ	0xFEE
 12092                           fsr0h	equ	0xFEA
 12093                           fsr0l	equ	0xFE9
 12094                           wreg	equ	0xFE8
 12095                           postdec1	equ	0xFE5
 12096                           plusw1	equ	0xFE3
 12097                           fsr1h	equ	0xFE2
 12098                           fsr1l	equ	0xFE1
 12099                           indf2	equ	0xFDF
 12100                           postinc2	equ	0xFDE
 12101                           postdec2	equ	0xFDD
 12102                           plusw2	equ	0xFDB
 12103                           fsr2h	equ	0xFDA
 12104                           fsr2l	equ	0xFD9
 12105                           status	equ	0xFD8
 12106                           
 12107 ;; *************** function i2_ReadEE *****************
 12108 ;; Defined at:
 12109 ;;		line 16 in file "eeprom.c"
 12110 ;; Parameters:    Size  Location     Type
 12111 ;;  address         2    0[COMRAM] unsigned int 
 12112 ;; Auto vars:     Size  Location     Type
 12113 ;;		None
 12114 ;; Return value:  Size  Location     Type
 12115 ;;                  1    wreg      unsigned char 
 12116 ;; Registers used:
 12117 ;;		wreg, status,2
 12118 ;; Tracked objects:
 12119 ;;		On entry : 0/0
 12120 ;;		On exit  : 0/0
 12121 ;;		Unchanged: 0/0
 12122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12123 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12126 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12127 ;;Total ram usage:        2 bytes
 12128 ;; Hardware stack levels used:    1
 12129 ;; This function calls:
 12130 ;;		Nothing
 12131 ;; This function is called by:
 12132 ;;		_ReadRun
 12133 ;; This function uses a non-reentrant model
 12134 ;;
 12135                           
 12136                           	psect	text63
 12137  0025F6                     __ptext63:
 12138                           	opt stack 0
 12139  0025F6                     i2_ReadEE:
 12140                           	opt stack 23
 12141                           
 12142                           ;eeprom.c: 19: EEADRH = (unsigned char) (address >> 8);
 12143                           
 12144                           ;incstack = 0
 12145  0025F6  5002               	movf	i2ReadEE@address+1,w,c
 12146  0025F8  6EAA               	movwf	4010,c	;volatile
 12147                           
 12148                           ;eeprom.c: 20: EEADR = (unsigned char) address;
 12149  0025FA  C001  FFA9         	movff	i2ReadEE@address,4009	;volatile
 12150                           
 12151                           ;eeprom.c: 22: EECON1bits.EEPGD = 0;
 12152  0025FE  9EA6               	bcf	4006,7,c	;volatile
 12153                           
 12154                           ;eeprom.c: 23: EECON1bits.CFGS = 0;
 12155  002600  9CA6               	bcf	4006,6,c	;volatile
 12156                           
 12157                           ;eeprom.c: 24: EECON1bits.RD = 1;
 12158  002602  80A6               	bsf	4006,0,c	;volatile
 12159  002604                     i2l455:
 12160  002604  B0A6               	btfsc	4006,0,c	;volatile
 12161  002606  D7FE               	goto	i2l455
 12162                           
 12163                           ;eeprom.c: 30: return EEDATA;
 12164  002608  50A8               	movf	4008,w,c	;volatile
 12165  00260A  0012               	return	
 12166  00260C                     __end_ofi2_ReadEE:
 12167                           	opt stack 0
 12168                           pclatu	equ	0xFFB
 12169                           pclath	equ	0xFFA
 12170                           tblptru	equ	0xFF8
 12171                           tblptrh	equ	0xFF7
 12172                           tblptrl	equ	0xFF6
 12173                           tablat	equ	0xFF5
 12174                           prodh	equ	0xFF4
 12175                           prodl	equ	0xFF3
 12176                           intcon	equ	0xFF2
 12177                           intcon2	equ	0xFF1
 12178                           intcon3	equ	0xFF0
 12179                           postinc0	equ	0xFEE
 12180                           fsr0h	equ	0xFEA
 12181                           fsr0l	equ	0xFE9
 12182                           wreg	equ	0xFE8
 12183                           postdec1	equ	0xFE5
 12184                           plusw1	equ	0xFE3
 12185                           fsr1h	equ	0xFE2
 12186                           fsr1l	equ	0xFE1
 12187                           indf2	equ	0xFDF
 12188                           postinc2	equ	0xFDE
 12189                           postdec2	equ	0xFDD
 12190                           plusw2	equ	0xFDB
 12191                           fsr2h	equ	0xFDA
 12192                           fsr2l	equ	0xFD9
 12193                           status	equ	0xFD8
 12194                           
 12195 ;; *************** function _back *****************
 12196 ;; Defined at:
 12197 ;;		line 57 in file "eeprom.c"
 12198 ;; Parameters:    Size  Location     Type
 12199 ;;  runs            1    wreg     unsigned char 
 12200 ;; Auto vars:     Size  Location     Type
 12201 ;;  runs            1    0[COMRAM] unsigned char 
 12202 ;;  result          1    1[COMRAM] unsigned char 
 12203 ;; Return value:  Size  Location     Type
 12204 ;;                  1    wreg      unsigned char 
 12205 ;; Registers used:
 12206 ;;		wreg, status,2, status,0
 12207 ;; Tracked objects:
 12208 ;;		On entry : 0/0
 12209 ;;		On exit  : 0/0
 12210 ;;		Unchanged: 0/0
 12211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12213 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12215 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12216 ;;Total ram usage:        2 bytes
 12217 ;; Hardware stack levels used:    1
 12218 ;; This function calls:
 12219 ;;		Nothing
 12220 ;; This function is called by:
 12221 ;;		_ReadRun
 12222 ;; This function uses a non-reentrant model
 12223 ;;
 12224                           
 12225                           	psect	text64
 12226  0025C2                     __ptext64:
 12227                           	opt stack 0
 12228  0025C2                     _back:
 12229                           	opt stack 23
 12230                           
 12231                           ;incstack = 0
 12232                           ;back@runs stored from wreg
 12233  0025C2  6E01               	movwf	back@runs,c
 12234                           
 12235                           ;eeprom.c: 59: unsigned char result = Latest + 4 - runs;
 12236  0025C4  5001               	movf	back@runs,w,c
 12237  0025C6  0800               	sublw	0
 12238  0025C8  0100               	movlb	0	; () banked
 12239  0025CA  25A8               	addwf	_Latest& (0+255),w,b
 12240  0025CC  0F04               	addlw	4
 12241  0025CE  6E02               	movwf	back@result,c
 12242                           
 12243                           ;eeprom.c: 60: if (result > 4) {
 12244  0025D0  0E04               	movlw	4
 12245  0025D2  6402               	cpfsgt	back@result,c
 12246  0025D4  D002               	goto	i2l3521
 12247                           
 12248                           ; BSR set to: 0
 12249                           ;eeprom.c: 61: result -= 4;
 12250  0025D6  0E04               	movlw	4
 12251  0025D8  5E02               	subwf	back@result,f,c
 12252  0025DA                     i2l3521:
 12253                           
 12254                           ; BSR set to: 0
 12255                           ;eeprom.c: 62: }
 12256                           ;eeprom.c: 63: return result;
 12257  0025DA  5002               	movf	back@result,w,c
 12258  0025DC  0012               	return	
 12259  0025DE                     __end_of_back:
 12260                           	opt stack 0
 12261                           pclatu	equ	0xFFB
 12262                           pclath	equ	0xFFA
 12263                           tblptru	equ	0xFF8
 12264                           tblptrh	equ	0xFF7
 12265                           tblptrl	equ	0xFF6
 12266                           tablat	equ	0xFF5
 12267                           prodh	equ	0xFF4
 12268                           prodl	equ	0xFF3
 12269                           intcon	equ	0xFF2
 12270                           intcon2	equ	0xFF1
 12271                           intcon3	equ	0xFF0
 12272                           postinc0	equ	0xFEE
 12273                           fsr0h	equ	0xFEA
 12274                           fsr0l	equ	0xFE9
 12275                           wreg	equ	0xFE8
 12276                           postdec1	equ	0xFE5
 12277                           plusw1	equ	0xFE3
 12278                           fsr1h	equ	0xFE2
 12279                           fsr1l	equ	0xFE1
 12280                           indf2	equ	0xFDF
 12281                           postinc2	equ	0xFDE
 12282                           postdec2	equ	0xFDD
 12283                           plusw2	equ	0xFDB
 12284                           fsr2h	equ	0xFDA
 12285                           fsr2l	equ	0xFD9
 12286                           status	equ	0xFD8
 12287                           pclatu	equ	0xFFB
 12288                           pclath	equ	0xFFA
 12289                           tblptru	equ	0xFF8
 12290                           tblptrh	equ	0xFF7
 12291                           tblptrl	equ	0xFF6
 12292                           tablat	equ	0xFF5
 12293                           prodh	equ	0xFF4
 12294                           prodl	equ	0xFF3
 12295                           intcon	equ	0xFF2
 12296                           intcon2	equ	0xFF1
 12297                           intcon3	equ	0xFF0
 12298                           postinc0	equ	0xFEE
 12299                           fsr0h	equ	0xFEA
 12300                           fsr0l	equ	0xFE9
 12301                           wreg	equ	0xFE8
 12302                           postdec1	equ	0xFE5
 12303                           plusw1	equ	0xFE3
 12304                           fsr1h	equ	0xFE2
 12305                           fsr1l	equ	0xFE1
 12306                           indf2	equ	0xFDF
 12307                           postinc2	equ	0xFDE
 12308                           postdec2	equ	0xFDD
 12309                           plusw2	equ	0xFDB
 12310                           fsr2h	equ	0xFDA
 12311                           fsr2l	equ	0xFD9
 12312                           status	equ	0xFD8
 12313                           
 12314                           	psect	rparam
 12315  0000                     pclatu	equ	0xFFB
 12316                           pclath	equ	0xFFA
 12317                           tblptru	equ	0xFF8
 12318                           tblptrh	equ	0xFF7
 12319                           tblptrl	equ	0xFF6
 12320                           tablat	equ	0xFF5
 12321                           prodh	equ	0xFF4
 12322                           prodl	equ	0xFF3
 12323                           intcon	equ	0xFF2
 12324                           intcon2	equ	0xFF1
 12325                           intcon3	equ	0xFF0
 12326                           postinc0	equ	0xFEE
 12327                           fsr0h	equ	0xFEA
 12328                           fsr0l	equ	0xFE9
 12329                           wreg	equ	0xFE8
 12330                           postdec1	equ	0xFE5
 12331                           plusw1	equ	0xFE3
 12332                           fsr1h	equ	0xFE2
 12333                           fsr1l	equ	0xFE1
 12334                           indf2	equ	0xFDF
 12335                           postinc2	equ	0xFDE
 12336                           postdec2	equ	0xFDD
 12337                           plusw2	equ	0xFDB
 12338                           fsr2h	equ	0xFDA
 12339                           fsr2l	equ	0xFD9
 12340                           status	equ	0xFD8
 12341                           
 12342                           	psect	temp
 12343  00007D                     btemp:
 12344                           	opt stack 0
 12345  00007D                     	ds	1
 12346  0000                     int$flags	set	btemp
 12347                           pclatu	equ	0xFFB
 12348                           pclath	equ	0xFFA
 12349                           tblptru	equ	0xFF8
 12350                           tblptrh	equ	0xFF7
 12351                           tblptrl	equ	0xFF6
 12352                           tablat	equ	0xFF5
 12353                           prodh	equ	0xFF4
 12354                           prodl	equ	0xFF3
 12355                           intcon	equ	0xFF2
 12356                           intcon2	equ	0xFF1
 12357                           intcon3	equ	0xFF0
 12358                           postinc0	equ	0xFEE
 12359                           fsr0h	equ	0xFEA
 12360                           fsr0l	equ	0xFE9
 12361                           wreg	equ	0xFE8
 12362                           postdec1	equ	0xFE5
 12363                           plusw1	equ	0xFE3
 12364                           fsr1h	equ	0xFE2
 12365                           fsr1l	equ	0xFE1
 12366                           indf2	equ	0xFDF
 12367                           postinc2	equ	0xFDE
 12368                           postdec2	equ	0xFDD
 12369                           plusw2	equ	0xFDB
 12370                           fsr2h	equ	0xFDA
 12371                           fsr2l	equ	0xFD9
 12372                           status	equ	0xFD8


Data Sizes:
    Strings     556
    Constant    18
    Data        10
    BSS         54
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    118     124
    BANK0           128     42     100
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_46(CODE[17]), STR_45(CODE[17]), STR_44(CODE[18]), STR_43(CODE[22]), 
		 -> STR_42(CODE[4]), STR_41(CODE[3]), STR_40(CODE[4]), STR_39(CODE[5]), 
		 -> STR_38(CODE[4]), STR_37(CODE[18]), STR_36(CODE[20]), STR_35(CODE[16]), 
		 -> STR_34(CODE[21]), STR_33(CODE[16]), STR_32(CODE[22]), STR_31(CODE[16]), 
		 -> STR_30(CODE[21]), STR_29(CODE[16]), STR_28(CODE[22]), STR_27(CODE[23]), 
		 -> STR_26(CODE[24]), STR_25(CODE[21]), STR_24(CODE[24]), STR_23(CODE[24]), 
		 -> STR_22(CODE[22]), STR_21(CODE[19]), STR_20(CODE[18]), STR_19(CODE[25]), 
		 -> STR_18(CODE[25]), STR_17(CODE[27]), STR_16(CODE[3]), STR_15(CODE[3]), 
		 -> STR_14(CODE[3]), STR_13(CODE[5]), STR_12(CODE[3]), STR_11(CODE[3]), 
		 -> STR_10(CODE[3]), STR_9(CODE[4]), STR_8(CODE[3]), STR_7(CODE[3]), 
		 -> STR_6(CODE[3]), STR_5(CODE[4]), STR_4(CODE[5]), STR_3(CODE[21]), 
		 -> STR_2(CODE[27]), STR_1(CODE[21]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    WriteRun@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(COMRAM[4]), mainloop@sorted(COMRAM[4]), 

    ReadRun@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> PermLog@sorted(COMRAM[4]), 

    ReadRun@time	PTR unsigned int  size(2) Largest target is 2
		 -> PermLog@time(COMRAM[2]), 

    check9@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(COMRAM[4]), 

    checkC@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(COMRAM[4]), 

    checkAA@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(COMRAM[4]), 

    stopMoving$577	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_37(CODE[18]), STR_36(CODE[20]), 

    CCW90@port	PTR int  size(2) Largest target is 6
		 -> simulate@portCCW(COMRAM[6]), mainloop@portCW(COMRAM[6]), 

    CW90@port	PTR int  size(2) Largest target is 6
		 -> simulate@portCW(COMRAM[6]), mainloop@portCW(COMRAM[6]), 

    PWMC@port	PTR int  size(2) Largest target is 6
		 -> intrpt@port(COMRAM[6]), simulate@portShake(COMRAM[6]), simulate@portCCW(COMRAM[6]), simulate@portCW(COMRAM[6]), 
		 -> mainloop@portCW(COMRAM[6]), 

    getTime@time	PTR unsigned char  size(2) Largest target is 7
		 -> time(BANK0[7]), 

    showInfo@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> PermLog@sorted(COMRAM[4]), simulate@sorted(COMRAM[4]), mainloop@sorted(COMRAM[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _intrpt in COMRAM

    _intrpt->_simulate
    _simulate->_check9
    _simulate->_checkAA
    _simulate->_checkC
    i2_getTime->i2_I2C_Master_Read
    i2_getTime->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    _checkC->_checkV
    _checkAA->_checkV
    _check9->_checkV
    _printV->i2_printf
    _checkV->___ftge
    ___ftmul->___awtoft
    ___ftge->___ftmul
    ___awtoft->___ftpack
    _HexDecToDec2->i2___wmul
    _mainloop->_showInfo
    _stopMoving->i2_printf
    _WriteRun->i2___wmul
    _CW90->_PWMC
    _CCW90->_PWMC
    _PWMC->___awdiv
    _PermLog->_showInfo
    _showInfo->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble
    _ReadRun->_back
    _ReadRun->i2_ReadEE

Critical Paths under _main in BANK0

    _main->_showRTC
    _showRTC->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _getTime->_I2C_Master_Read
    _getTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _initialize->_I2C_Master_Init
    _initLatest->_ReadEE
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _intrpt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _intrpt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _intrpt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _intrpt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _intrpt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _intrpt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _intrpt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _intrpt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _intrpt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _intrpt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _intrpt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _intrpt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _intrpt in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _intrpt in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _intrpt in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _intrpt in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   10483
                                             40 BANK0      2     2      0
                         _initialize
                            _lcdInst
                             _printf
                            _showRTC
 ---------------------------------------------------------------------------------
 (1) _showRTC                                              2     2      0    5006
                                             38 BANK0      2     2      0
                            _getTime
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              30    22      8    4398
                                             12 BANK0     26    18      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     517
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _getTime                                              3     1      2     473
                                              3 BANK0      3     1      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2     214
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0     944
                    _I2C_Master_Init
                            _initLCD
                         _initLatest
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _initLatest                                           0     0      0     298
                             _ReadEE
 ---------------------------------------------------------------------------------
 (3) _ReadEE                                               2     0      2     298
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _intrpt                                              23    23      0  106752
                                             95 COMRAM    23    23      0
                               _PWMC
                            _PermLog
                           _mainloop
                           _simulate
                         _stopMoving
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (6) _simulate                                            44    44      0   66946
                                             51 COMRAM    44    44      0
                              _CCW90
                               _CW90
                       _HexDecToDec2
                               _PWMC
                           _WriteRun
                             _check9
                            _checkAA
                             _checkC
                          _closeGate
                           _openGate
                           _showInfo
                         _stopMoving
                           i2___wmul
                          i2_getTime
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) i2_getTime                                            3     1      2     283
                                              3 COMRAM     3     1      2
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Write                                   2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _checkC                                               6     4      2   12386
                                             45 COMRAM     6     4      2
                             _checkV
                             _printV
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _checkAA                                              6     4      2   12386
                                             45 COMRAM     6     4      2
                             _checkV
                             _printV
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _check9                                               6     4      2   12386
                                             45 COMRAM     6     4      2
                             _checkV
                             _printV
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) _printV                                               2     0      2    3504
                                             34 COMRAM     2     0      2
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) _checkV                                               9     7      2    5439
                                             36 COMRAM     9     7      2
                                 _AD
                           ___awtoft
                             ___ftge
                            ___ftmul
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             15     9      6    2548
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftge                                               9     3      6     264
                                             27 COMRAM     9     3      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             4     1      3    2211
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    1992
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) _AD                                                   5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (7) _HexDecToDec2                                         9     7      2     711
                                              6 COMRAM     9     7      2
                           i2___wmul
 ---------------------------------------------------------------------------------
 (6) _mainloop                                            16    16      0   22929
                                             47 COMRAM    16    16      0
                              _CCW90
                               _CW90
                           _WriteRun
                          _closeGate
                           _openGate
                           _showInfo
                         _stopMoving
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (6) _stopMoving                                           3     3      0    3471
                                             34 COMRAM     3     3      0
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _openGate                                             2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) _closeGate                                            2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) _WriteRun                                             8     4      4    1749
                                              6 COMRAM     8     4      4
                            _WriteEE
                           i2___wmul
 ---------------------------------------------------------------------------------
 (8) _WriteEE                                              3     0      3     834
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (7) _CW90                                                 8     6      2    4981
                                             21 COMRAM     8     6      2
                               _PWMC
 ---------------------------------------------------------------------------------
 (7) _CCW90                                                8     6      2    5045
                                             21 COMRAM     8     6      2
                               _PWMC
 ---------------------------------------------------------------------------------
 (7) _PWMC                                                40    34      6    4743
                                              8 COMRAM    13     7      6
                            ___awdiv
 ---------------------------------------------------------------------------------
 (8) ___awdiv                                              8     4      4     428
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (6) _PermLog                                             11    11      0    8320
                                             47 COMRAM    11    11      0
                            _ReadRun
                      _captureKeypad
                           _showInfo
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _showInfo                                            13     9      4    4056
                                             34 COMRAM    13     9      4
                      _captureKeypad
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) i2_printf                                            26    22      4    3268
                                             12 COMRAM    22    18      4
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (8) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (8) i2___wmul                                             6     2      4     365
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (8) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _captureKeypad                                        3     1      2      23
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (7) _ReadRun                                             11     7      4     618
                                              2 COMRAM    11     7      4
                               _back
                           i2_ReadEE
 ---------------------------------------------------------------------------------
 (8) i2_ReadEE                                             2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _back                                                 2     2      0      68
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialize
     _I2C_Master_Init
       ___lldiv
     _initLCD
       _lcdInst
         _lcdNibble
     _initLatest
       _ReadEE
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
   _showRTC
     _getTime
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble

 _intrpt (ROOT)
   _PWMC
     ___awdiv
   _PermLog
     _ReadRun
       _back
       i2_ReadEE
     _captureKeypad
     _showInfo
       _captureKeypad
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _mainloop
     _CCW90
       _PWMC
         ___awdiv
     _CW90
       _PWMC
         ___awdiv
     _WriteRun
       _WriteEE
       i2___wmul
     _closeGate
     _openGate
     _showInfo
       _captureKeypad
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _stopMoving
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _simulate
     _CCW90
       _PWMC
         ___awdiv
     _CW90
       _PWMC
         ___awdiv
     _HexDecToDec2
       i2___wmul
     _PWMC
       ___awdiv
     _WriteRun
       _WriteEE
       i2___wmul
     _check9
       _checkV
         _AD
         ___awtoft
           ___ftpack
         ___ftge
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       _printV
         i2_printf
           i2___lwdiv
           i2___lwmod
             i2___lwdiv (ARG)
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _checkAA
       _checkV
         _AD
         ___awtoft
           ___ftpack
         ___ftge
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       _printV
         i2_printf
           i2___lwdiv
           i2___lwmod
             i2___lwdiv (ARG)
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _checkC
       _checkV
         _AD
         ___awtoft
           ___ftpack
         ___ftge
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       _printV
         i2_printf
           i2___lwdiv
           i2___lwmod
             i2___lwdiv (ARG)
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _closeGate
     _openGate
     _showInfo
       _captureKeypad
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _stopMoving
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2___wmul
     i2_getTime
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _stopMoving
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   i2_lcdInst
     i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2A      64       5       78.1%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     76      7C       1       98.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      E0      34        0.0%
DATA                 0      0      E0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Apr 10 11:38:03 2017

         i2_I2C_Master_Start 26A0           i2_I2C_Master_Write 267E                           _AD 2460  
               ___awdiv@sign 0006          ___wmul@multiplicand 00B2           i2___lwdiv@dividend 0001  
                __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                  __CFG_OSC$HS 000000  
                        ?_AD 0001                          l407 260C                          l455 25EE  
                        l921 1988                          l974 1DF2                          l984 2090  
               __CFG_CPB$OFF 000000                          _PEN 007E2A                 __CFG_CPD$OFF 000000  
                        _SEN 007E28          ?i2_I2C_Master_Start 0001          ?i2_I2C_Master_Write 0002  
                        wreg 000FE8                         ??_AD 0003                 __CFG_LVP$OFF 000000  
               __CFG_WDT$OFF 000000                         l4013 1BAA                         l4009 1BA0  
                       l4019 1BCE                         l3451 242E                         l3533 2456  
                       l3701 00F8                         l3551 191C                         l3711 0136  
                       l3703 00FE                         l3561 1976                         l3553 1922  
                       l3801 0358                         l3713 014E                         l3571 1DA2  
                       l3803 0364                         l3811 0392                         l3723 0192  
                       l3707 0124                         l3549 190C                         l3573 1DAE  
                       l3813 0398                         l3821 0432                         l3741 0212  
                       l3717 0162                         l3709 0130                         l3583 1DE4  
                       l3575 1DB4                         l3591 204C                         l3815 03E4  
                       l3823 044A                         l3807 037E                         l3719 017A  
                       l3727 019A                         l3593 2058                         l3825 0452  
                       l3761 0270                         l3745 022E                         l3729 01D2  
                       l3681 0034                         l3595 205E                         l3747 0234  
                       l3683 0046                         l3827 045E                         l3693 0080  
                       l3677 0020                         l4493 2244                         l3599 2082  
                       l3783 02E0                         l3759 026A                         l3775 02A6  
                       l3687 0050                         l3777 02BE                         l3795 033C  
                       l3787 0318                         l3789 0322                         _ADFM 007E07  
                       _ADON 007E10                         _CW90 1BEC                         STR_1 FF16  
                       STR_2 FDD3                         STR_3 FF2B                         STR_4 FFDB  
                       STR_5 FFF2                         STR_6 FFF6                         STR_7 FFF9  
                       STR_8 FFFC                         STR_9 FFEE                         _LATA 000F89  
                       _LATB 000F8A                         _LATC 000F8B                         _LATD 000F8C  
                       _LATE 000F8D                         u2500 242C                         u3507 2030  
                       u3437 2226                         u2735 20CA                         u3447 1B52  
                       u3457 22E2                         u3467 2316                         u3477 1FF0  
                       u3487 1FFA                         u3497 2026                         _RCEN 007E2B  
                       _PWMC 1620                checkAA@sorted 002E                         _back 25C2  
                       _main 21FE                 ___ftpack@arg 0001                         _mode 007B  
               ___ftpack@exp 0004                         _time 00A9                         fsr0h 000FEA  
                       fsr1h 000FE2           i2___lwdiv@quotient 0005                         fsr2h 000FDA  
                       fsr0l 000FE9                         indf2 000FDF                         fsr1l 000FE1  
                       fsr2l 000FD9                         btemp 007D         ??i2_I2C_Master_Start 0002  
       ??i2_I2C_Master_Write 0004                         prodh 000FF4                         prodl 000FF3  
            ReadRun@backruns 000B                         start 000E                __CFG_IESO$OFF 000000  
       __end_of_HexDecToDec2 2294                   ReadRun@add 000C              __end_ofi2_putch 265E  
              __CFG_MCLRE$ON 000000                 ___ftmul@cntr 001A                 ___param_bank 000000  
               ___ftmul@sign 001B                   i2getTime@i 0006                  i2_lcdNibble 2156  
            __end_of_ReadRun 152C              __end_of_PermLog 18DE                        ?_CW90 0016  
           ?_I2C_Master_Init 00BD             ?_I2C_Master_Read 0001                        ?_PWMC 0009  
           ?_I2C_Master_Wait 0001             ?_I2C_Master_Stop 0001                        ?_back 0001  
                      ?_main 0001                        _ACKEN 007E2C                        _ACKDT 007E2D  
                      _CCW90 1C76              __end_of___awdiv 1D84                        _EEADR 000FA9  
                      STR_10 FFF6                        STR_11 FFF9                        STR_12 FFFC  
                      STR_20 FF8B                        STR_13 FFE5                        STR_21 FF54  
                      STR_14 FFF9                        STR_30 FED7                        STR_22 FEC1  
                      STR_31 FFD0                        STR_15 FFF6                        STR_23 FE50  
                      STR_16 FFFC                        STR_40 FFE6                        STR_32 FEAB  
                      STR_24 FE20                        STR_33 FFD0                        STR_17 FDD3  
                      STR_41 FFEF                        STR_25 FF01                        STR_42 FFF2  
                      STR_34 FEEC                        STR_26 FE38                        STR_18 FDEE  
                      STR_35 FFD0                        STR_43 FE7F                        STR_27 FE68  
                      STR_19 FE07                        STR_44 FF67                        STR_36 FF40  
                      STR_28 FE95                        STR_29 FFD0                        STR_45 FFAE  
                      STR_37 FF79                        STR_38 FFEA                        STR_46 FFBF  
                      STR_39 FFE0                        STR_47 FF9D              __end_of_WriteEE 24FE  
            __end_of___lldiv 199A              __end_of___ftmul 1620              ___awdiv@divisor 0003  
                      _LATC0 007C58                        _LATB2 007C52                        _LATC1 007C59  
                      _LATC2 007C5A                        _LATC5 007C5D                        _LATC6 007C5E  
                      _LATC7 007C5F              __end_of___lwdiv 1DFC              __end_of___lwmod 209A  
                      i2l108 11A6                        i2l109 1230                        i2l133 0644  
                      i2l241 25A6                        i2l129 05F0                        i2l314 23D0  
                      i2l154 0E58                        i2l171 0EA6                        i2l244 25B2  
                      i2l340 246E                        i2l157 0CAA                        i2l166 0D34  
                      i2l407 2620                        i2l167 0D40                        i2l168 0D60  
                      i2l177 0EA4                        i2l290 1658                        i2l362 1FC6  
                      i2l461 24F4                        i2l349 174E                        i2l455 2604  
                      i2l375 1F26                        i2l376 1F54                        i2l368 1EB0  
                      i2l369 1EDE                        i2l478 18D6                        i2l791 1A28  
            ___awdiv@counter 0005                        i2l974 21F4                        i2l984 2358  
            __end_of_checkAA 1FD0                        _PORTB 000F81                        _TRISA 000F92  
                      _TRISB 000F93                        _TRISC 000F94                        _TRISD 000F95  
                      _TRISE 000F96                __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000  
              __CFG_WRT1$OFF 000000                simulate@F3110 0077                simulate@F3112 00A4  
              simulate@F3114 00A0                simulate@F3123 0092                simulate@F3125 008C  
              simulate@F3127 0086                __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000  
            __end_of_lcdInst 2652               __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000  
            __end_of_getTime 1BEC               __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000  
             __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000  
              __CFG_WRTD$OFF 000000              __end_of_initLCD 2320               __CFG_EBTRB$OFF 000000  
                 i2isdigit@c 0003                ___awtoft@sign 000C              __end_of_dpowers FDCB  
           __end_ofi2_ReadEE 260C              __end_of_isdigit 2460                ___ftpack@sign 0005  
                      _putch 2632                        pclath 000FFA              __end_of_showRTC 1B62  
                      tablat 000FF5             __end_ofi2___wmul 2524                        plusw1 000FE3  
                      plusw2 000FDB                        status 000FD8                simulate@start 004E  
             __CFG_PBADEN$ON 000000                i2printf@width 0020             __end_ofi2_printf 0C4E  
         __size_ofi2___lwdiv 0052                 __end_of_CW90 1C76           __size_ofi2___lwmod 0042  
                ReadRun@time 0005                 __end_of_PWMC 1712              __initialization 2294  
               __end_of_back 25DE           __size_ofi2_lcdInst 000C                 __end_of_main 224C  
         __size_ofi2_getTime 0076                   i2printf@ap 0018                   i2printf@cp 0015  
              ReadEE@address 00B0                       ??_CW90 0018           __size_ofi2_isdigit 001E  
                     ??_PWMC 000F               mainloop@period 003C               mainloop@portCW 0036  
                     ??_back 0001               mainloop@sorted 0032                       ??_main 00D8  
                     ?_CCW90 0016                __activetblptr 000002                checkV@channel 002B  
          ?_I2C_Master_Start 0001            ?_I2C_Master_Write 00B1                    CCW90@port 0016  
         ??_I2C_Master_Start 00B1                       _ADCON0 000FC2                       _ADCON1 000FC1  
         ??_I2C_Master_Write 00B3                       _ADRESH 000FC4                       _EEADRH 000FAA  
                     _ADRESL 000FC3                       _EEDATA 000FA8                       _EECON2 000FA7  
           ___awdiv@dividend 0001              i2lcdNibble@data 0002             __end_of___awtoft 239A  
                     ?_putch 0001             __end_of___ftpack 1A48              i2lcdNibble@temp 0001  
                     _INT1IE 007F83                       _INT1IF 007F80             __end_of_WriteRun 13FA  
                     _INT2IE 007F84                       _INT2IF 007F81                       _CVRCON 000FB5  
                     i2l3031 21CE                       i2l3103 157C                       i2l3017 259C  
                     i2l3121 15BE                       i2l3027 21C2                       i2l3051 233A  
                     i2l3203 1AA8                       i2l3131 15E6                       i2l3029 21CA  
                     i2l3301 0A9A                       i2l3117 15AE                       i2l3039 21EA  
                     i2l3055 234E                       i2l3047 232E                       i2l3303 0A9E  
                     i2l3223 08CE                       i2l3127 15D6                       i2l3049 2336  
                     i2l3225 08DC                       i2l3161 1D42                       i2l3153 1D24  
                     i2l3401 16B2                       i2l3209 1AD4                       i2l3331 0B26  
                     i2l3251 0992                       i2l3243 096E                       i2l3235 0910  
                     i2l3219 08BE                       i2l3171 1D62                       i2l3163 1D46  
                     i2l3147 1D14                       i2l3411 16EC                       i2l3325 0AFA  
                     i2l3317 0ACA                       i2l3261 09CE                       i2l3253 0998  
                     i2l3245 0972                       i2l3229 08E2                       i2l3343 0B52  
                     i2l3319 0AE0                       i2l3255 09AA                       i2l3271 0A1A  
                     i2l3159 1D3A                       i2l3175 1D6C                       i2l3415 16FA  
                     i2l3191 2376                       i2l4063 1E3A                       i2l4311 0834  
                     i2l4215 056A                       i2l3521 25DA                       i2l3345 0B5A  
                     i2l3353 0B80                       i2l3337 0B3C                       i2l3329 0B1E  
                     i2l3265 09E0                       i2l3249 0988                       i2l3409 16E2  
                     i2l3097 1554                       i2l4241 05E4                       i2l4233 05C2  
                     i2l4217 056E                       i2l3355 0B86                       i2l3363 0C10  
                     i2l3283 0A50                       i2l3259 09BC                       i2l3179 1D7A  
                     i2l3419 170A                       i2l4059 1E32                       i2l3357 0BCA  
                     i2l3365 0C26                       i2l3349 0B6E                       i2l3269 09E6  
                     i2l3381 164A                       i2l3461 1732                       i2l4069 1E56  
                     i2l4317 0844                       i2l4421 0DDE                       i2l3367 0C2C  
                     i2l3287 0A6A                       i2l3199 1A78                       i2l3463 1738  
                     i2l4271 0698                       i2l4263 066E                       i2l4255 0638  
                     i2l4239 05DE                       i2l4415 0DC8                       i2l4407 0D80  
                     i2l3289 0A6E                       i2l3369 0C34                       i2l4361 184E  
                     i2l3393 1682                       i2l3473 179A                       i2l4249 061A  
                     i2l3627 24D2                       i2l4435 0DFC                       i2l4443 0E40  
                     i2l4349 1806                       i2l4285 071A                       i2l4269 068C  
                     i2l4453 0E7C                       i2l4429 0DEE                       i2l3911 0F16  
                     i2l3479 17F8                       i2l3487 249C                       i2l4199 04FE  
                     i2l4439 0E00                       i2l3913 0F24                       i2l4377 18D2  
                     i2l4297 0784                       i2l4393 0CF2                       i2l3931 100A  
                     i2l2971 19B8                       i2l4459 0E8C                       i2l4387 0CB0  
                     i2l3925 0FD2                       i2l2981 1A14                       i2l2973 19C2  
                     i2l3943 1082                       i2l3919 0F52                       i2l3951 10C8  
                     i2l2983 1A1E                       i2l2975 19E0                       i2l2967 19AA  
                     i2l3937 1046                       i2l3953 1100                       i2l3857 23B6  
                     i2l2979 19F6                       i2l3949 10BE                       i2l3877 12BA  
                     i2l3965 1F18                       i2l3981 1EC0                       i2l3967 1F36  
                     i2l3993 1F8E                       i2l3995 1F98                       i2l3979 1EA2  
                     i2l3997 1FA8                       u191_41 153C                       u193_41 1564  
                  ??i2_putch 0003                       _SSPADD 000FC8                       _TRISC3 007CA3  
                     _TRISC4 007CA4                       _SSPBUF 000FC9                    AD@channel 0005  
              checkV@voltage 002C                    ??_ReadRun 0007                       _ReadEE 25DE  
                  ??_PermLog 0030                       _Latest 00A8               __CFG_XINST$OFF 000000  
      __end_of_captureKeypad 25C2                       ___ftge 1A48                       ___wmul 23D2  
                     _check9 1EE8                       _checkC 1E72                    ??___awdiv 0005  
                     _checkV 1712               __CFG_STVREN$ON 000000                    ??_WriteEE 0004  
                  ??___lldiv 00B8                    ??___ftmul 0013             __end_of_mainloop 1298  
                  ??___lwdiv 00B4                    ??___lwmod 00BB                    ??_checkAA 0030  
                     clear_0 22BA             ___awdiv@quotient 0007                       _intrpt 0008  
                     _printV 248A                    ??_lcdInst 00B2                       _printf 0012  
                  ??_getTime 00B5             __end_of_openGate 2566        ___ftmul@f3_as_product 0017  
                PermLog@time 0037                    ??_initLCD 00B3                    ??_isdigit 00B0  
           __end_of_showInfo 110A            __end_ofi2___lwdiv 21FE                 __mediumconst FDC0  
          __end_ofi2___lwmod 2362                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8             __end_of_simulate 08B4                    ??_showRTC 00D6  
          __end_ofi2_lcdInst 266A            __end_ofi2_getTime 1E72               simulate@period 0058  
             simulate@portCW 003E               simulate@notyet 0052        __size_of_HexDecToDec2 0048  
          __end_ofi2_isdigit 25A4               simulate@sorted 005C                   __accesstop 0080  
    __end_of__initialization 22CC                   ___ftge@ff1 001C                   ___ftge@ff2 001F  
              __end_of_CCW90 1D00                ___rparam_used 000001                   ___awtoft@c 0009  
                 ___ftmul@f1 000D                   ___ftmul@f2 0010           i2___lwmod@dividend 0008  
             __pcstackCOMRAM 0001                 __pidataBANK0 266A                    ?i2_ReadEE 0001  
              __end_of_putch 2642                  i2printf@idx 0017                  i2printf@len 001A  
                i2printf@val 001D                   __end_of_AD 248A                      ??_CCW90 0018  
                  ?i2___wmul 0001           __size_of_lcdNibble 0068                  i2putch@data 0003  
               _HexDecToDec2 224C           __size_of_closeGate 0020            HexDecToDec2@digit 000E  
                  ?i2_printf 000D            HexDecToDec2@tenth 000C                  intrpt@F3137 0080  
                    ??_putch 00B2                   back@result 0002                   __pbssBANK0 0080  
                    ?_ReadEE 00B0                 stopMoving@em 0025                      ?___ftge 001C  
               WriteRun@time 0009                 ?i2_lcdNibble 0001                      ?___wmul 00B0  
                    ?_check9 002E                      ?_checkC 002E                      ?_checkV 0025  
                 ??i2_ReadEE 0003                      ?_intrpt 0001                    ?___awtoft 0009  
                  ?___ftpack 0001                      ?_printV 0023                      ?_printf 00BC  
                  ?_WriteRun 0007                   ??i2___wmul 0005               WriteRun@sorted 0007  
                    _INTEDG2 007F8C                   ??i2_printf 0011                      _SSPCON1 000FC6  
                    _SSPCON2 000FC5                      _SSPSTAT 000FC7                  testAD@F3144 009C  
                  ?_mainloop 0001                      i2_putch 2652               _stopMoving$577 0023  
__size_ofi2_I2C_Master_Start 0008            __end_of_lcdNibble 2038                      _ReadRun 13FA  
__size_ofi2_I2C_Master_Write 000A                    ?_openGate 0001                      _PermLog 1802  
                    __Hparam 0000              __size_of_ReadEE 0018                      __Lparam 0000  
          __end_of_closeGate 2586                   _initLatest 2524                    ?_showInfo 0023  
            __size_of___ftge 0090                    ?_simulate 0001                      ___awdiv 1D00  
                    _WriteEE 24D8                      ___lldiv 18DE              __size_of___wmul 0036  
                    ___ftmul 152C              __size_of_check9 0076              __size_of_checkC 0076  
            __size_of_checkV 00F0                      ___lwdiv 1D84                      ___lwmod 2038  
                    _checkAA 1F5E                      __pcinit 2294                   ??___awtoft 000C  
                 ??___ftpack 0006                      __ramtop 1000                   _initialize 20FA  
            __size_of_intrpt 0EDA                      _lcdInst 2642                   ??_WriteRun 000B  
                    __ptext0 21FE                      __ptext1 1AD8                      __ptext2 0012  
                    __ptext3 2632                      _getTime 1B62                      __ptext4 2436  
                    __ptext5 23D2                      __ptext6 2038                      __ptext7 1D84  
                    __ptext8 1B62                      __ptext9 2674              __size_of_printV 0028  
               PermLog@F3082 0098              __size_of_printf 046A                      check9@V 0032  
                    checkC@V 0032                      _initLCD 22DA            __end_of_hexpowers FDD3  
                    _dpowers FDC1                      _isdigit 2436     __size_of_I2C_Master_Init 0060  
   __size_of_I2C_Master_Read 002E                      _showRTC 1AD8     __size_of_I2C_Master_Wait 0014  
   __size_of_I2C_Master_Stop 0008               __pintcode_body 0C4E         end_of_initialization 22CC  
                 ??_mainloop 0030                __Lmediumconst FDC0                      int_func 0C4E  
        i2___wmul@multiplier 0001    __size_of_I2C_Master_Start 0008                   ??_openGate 0001  
  __size_of_I2C_Master_Write 000A              ___lldiv@divisor 00B4              ___lldiv@counter 00BC  
                  _PWMC$1423 0011                    _PWMC$1424 0012                    _PWMC$1425 0013  
                 ??_showInfo 0027                      printf@c 00D5                      printf@f 00BC  
           I2C_Master_Init@c 00BD             I2C_Master_Read@a 00B1                      postdec1 000FE5  
                    postdec2 000FDD                   ??_simulate 0034                      postinc0 000FEE  
                    postinc2 000FDE             checkV@threshhold 0025                    _PORTBbits 000F81  
            simulate@shakeCW 0053                  PWMC@widthus 0009              simulate@portCCW 0044  
          i2_I2C_Master_Read 24B2            i2_I2C_Master_Wait 2620            i2_I2C_Master_Stop 2698  
          i2___lwdiv@divisor 0003                    i2___lwdiv 21AC                    i2___lwmod 2320  
          i2___lwdiv@counter 0007           ?i2_I2C_Master_Read 0001           ?i2_I2C_Master_Wait 0001  
         ?i2_I2C_Master_Stop 0001                    i2_lcdInst 265E                    i2_getTime 1DFC  
                printf@width 00D3              PermLog@backruns 0039                   _stopMoving 239A  
        ??i2_I2C_Master_Read 0002                    i2_isdigit 2586          ??i2_I2C_Master_Wait 0001  
        ??i2_I2C_Master_Stop 0002                ReadRun@sorted 0003                  simulate@now 004A  
               check9@sorted 002E                  ___ftmul@exp 0016               __end_of_ReadEE 25F6  
                ?_initLatest 0001               __end_of___ftge 1AD8               __end_of___wmul 2408  
             __end_of_check9 1F5E               __end_of_checkC 1EE8               __end_of_checkV 1802  
       __size_ofi2_lcdNibble 0056                mainloop@F3101 00DA                mainloop@F3096 00E0  
                ?_initialize 0001                i2lcdInst@data 0003                 checkC@sorted 002E  
          __size_ofi2_ReadEE 0016               __end_of_intrpt 0EE2             i2___wmul@product 0005  
             __end_of_printV 24B2               __end_of_printf 047C                 i2printf@flag 001F  
            i2ReadEE@address 0001    __end_ofi2_I2C_Master_Read 24D8    __end_ofi2_I2C_Master_Wait 2632  
               i2printf@prec 001C          start_initialization 2294    __end_ofi2_I2C_Master_Stop 26A0  
          __size_ofi2___wmul 0026                    i2printf@c 0022                    i2printf@f 000D  
     __size_of_captureKeypad 001E        i2I2C_Master_Read@temp 0003                i2getTime@time 0004  
                 ?i2___lwdiv 0001                   ?i2___lwmod 0008            __size_ofi2_printf 039A  
          ??_I2C_Master_Init 00C1            ??_I2C_Master_Read 00B1            ??_I2C_Master_Wait 00B0  
                 ?i2_lcdInst 0001            ??_I2C_Master_Stop 00B1                   ?i2_getTime 0004  
                 ?i2_isdigit 0001                     ??_ReadEE 00B2                     CW90@port 0016  
                   ??___ftge 0022                     ??___wmul 00B4                     ??_check9 0030  
                   ??_checkC 0030                     ??_checkV 0027                  __pdataBANK0 00DA  
           __CFG_LPT1OSC$OFF 000000                     ??_intrpt 0060                     ??_printV 0025  
                   ??_printf 00C4                  WriteEE@data 0003            __size_of___awtoft 0038  
          __size_of___ftpack 00AE            __size_of_WriteRun 0162                  __pbssCOMRAM 0077  
              __pcstackBANK0 00B0            i2___lwmod@divisor 000A            i2___lwmod@counter 000C  
               _isdigit$1079 00B1          __size_of_initLatest 0022                     ?i2_putch 0001  
             intrpt@keypress 0070          __size_of_initialize 005C            __size_of_mainloop 018E  
                ?_stopMoving 0001             _I2C_Master_Start 2690                     ?_ReadRun 0003  
        i2I2C_Master_Write@d 0002             _I2C_Master_Write 2674                     ?_PermLog 0001  
           ___lwdiv@dividend 00B0            __CFG_CCP2MX$PORTC 000000                   intrpt@port 0071  
                WriteRun@add 000D                _captureKeypad 25A4                    __pintcode 0008  
          __size_of_openGate 0020                __pmediumconst FDC0                    _lcdNibble 1FD0  
                   ?___awdiv 0001                     ?_WriteEE 0001                     ?___lldiv 00B0  
                   ?___ftmul 000D                     ?___lwdiv 00B0                     ?___lwmod 00B7  
          __size_of_showInfo 0228                     ?_checkAA 002E                    _closeGate 2566  
          __size_of_simulate 0438                     ?_lcdInst 0001                     ?_getTime 00B3  
                   PWMC@port 000D               __size_of_CCW90 008A                     ?_initLCD 0001  
                   ?_isdigit 0001   __size_ofi2_I2C_Master_Read 0026   __size_ofi2_I2C_Master_Wait 0012  
 __size_ofi2_I2C_Master_Stop 0008                    checkV@tmp 0029                     ?_showRTC 0001  
                  _hexpowers FDCB             ___lwdiv@quotient 00B4                  ??i2___lwdiv 0005  
                ??i2___lwmod 000C               __size_of_putch 0010                  __size_of_AD 002A  
 __end_ofi2_I2C_Master_Start 26A8   __end_ofi2_I2C_Master_Write 2688                  ??i2_lcdInst 0003  
                ??i2_getTime 0006               ___wmul@product 00B4                     _LATDbits 000F8C  
                ??i2_isdigit 0001                     i2u312_41 117A                     i2u305_40 12AE  
                   i2u241_45 16BA                     i2u241_46 16BC                     i2u314_40 1230  
                   i2u244_45 16EA                     i2u244_46 16EC                     i2u309_45 2258  
                   i2u270_40 24D0                     i2u326_41 06BC                     i2u318_41 0578  
                   i2u238_45 168A                     i2u238_46 168C                     i2u319_41 058A  
                   i2u351_47 0D4E                     i2u336_41 0C98                     i2u360_47 1144  
                   i2u352_47 0D6E                     i2u329_40 082C                     i2u361_47 1162  
                   i2u353_47 0E68                     i2u338_40 0D3C                     i2u370_47 18AE  
                   i2u362_47 11B2                     i2u354_47 04E6               ?_captureKeypad 0001  
                   _PIR2bits 000FA1                     i2u371_47 216E                     i2u363_47 11CA  
                   i2u355_47 070C                     i2u372_47 2178                     i2u364_47 11F0  
                   i2u356_47 075C                     i2u373_47 219A                     i2u365_47 1208  
                   i2u357_47 0888                     i2u374_47 21A4                     i2u366_47 126C  
                   i2u358_47 173E                     i2u367_47 2554                     i2u359_47 175C  
                   i2u368_47 2574                     i2u369_47 16FC             __CFG_WDTPS$32768 000000  
                 PWMC@cycles 000B                   ?_lcdNibble 0001                     i2_ReadEE 25F6  
                 ?_closeGate 0001                   _ADCON0bits 000FC2            ___wmul@multiplier 00B0  
                   i2___wmul 24FE                lcdNibble@data 00B1                   printf@flag 00D2  
              lcdNibble@temp 00B0                   printf@prec 00CF                   simulate@AA 005A  
        __size_of_stopMoving 0038                   simulate@V9 0056                     i2_printf 08B4  
      captureKeypad@keypress 0003          I2C_Master_Read@temp 00B2                    copy_data0 22A8  
                  mainloop@i 003E             __size_ofi2_putch 000C                   _EECON1bits 000FA6  
             showInfo@sorted 0025                     __Hrparam 0000             __size_of_ReadRun 0132  
                   __Lrparam 0000             __size_of_PermLog 00DC                 ??_initLatest 00B2  
         __CFG_BOREN$SBORDIS 000000             __size_of___awdiv 0084        i2___wmul@multiplicand 0003  
           __size_of_WriteEE 0026             __size_of___lldiv 00BC             __size_of___ftmul 00F4  
           __size_of___lwdiv 0078             __size_of___lwmod 0062                 ??_initialize 00C5  
                   ___awtoft 2362                     ___ftpack 199A             __size_of_checkAA 0072  
                   _WriteRun 1298           i2I2C_Master_Read@a 0002             __size_of_lcdInst 0010  
           __size_of_getTime 008A              HexDecToDec2@hex 0007              _I2C_Master_Init 209A  
            _I2C_Master_Read 2408             __size_of_initLCD 0046                     back@runs 0001  
              ?_HexDecToDec2 0007              _I2C_Master_Wait 260C              _I2C_Master_Stop 2688  
           __size_of_isdigit 002A              ___lwdiv@divisor 00B2              ___lwdiv@counter 00B6  
                   __ptext10 2688                     __ptext11 2690                     __ptext20 209A  
                   __ptext12 2408                     __ptext21 18DE                     __ptext13 260C  
                   __ptext30 1E72                     __ptext14 20FA                     __ptext31 1F5E  
                   __ptext23 047C                     __ptext15 2524                     __ptext40 224C  
                   __ptext32 1EE8                     __ptext24 1DFC                     __ptext16 25DE  
                   __ptext41 110A                     __ptext33 248A                     __ptext25 267E  
                   __ptext17 22DA                     __ptext50 1D00                     __ptext42 239A  
                   __ptext34 1712                     __ptext26 2698                     __ptext18 2642  
                   __ptext51 1802                     __ptext43 2546                     __ptext35 152C  
                   __ptext27 26A0                     __ptext19 1FD0                     __ptext60 2156  
                   __ptext52 0EE2                     __ptext44 2566                     __ptext36 1A48  
                   __ptext28 24B2                     __ptext61 25A4                     __ptext53 08B4  
                   __ptext45 1298                     __ptext37 2362                     __ptext29 2620  
                   __ptext62 13FA                     __ptext54 2652                     __ptext46 24D8  
                   __ptext38 199A                     __ptext63 25F6                     __ptext55 2586  
                   __ptext47 1BEC                     __ptext39 2460                     __ptext64 25C2  
                   __ptext56 24FE                     __ptext48 1C76                     __ptext57 2320  
                   __ptext49 1620                     __ptext58 21AC                     __ptext59 265E  
           __size_of_showRTC 008A           __end_of_initLatest 2546                     checkAA@V 0032  
              __size_of_CW90 008A                __size_of_PWMC 00F2               i2_isdigit$1079 0002  
                   _mainloop 110A                __size_of_back 001C                __size_of_main 004E  
         __end_of_initialize 2156              ??_captureKeypad 0003                     _openGate 2546  
                   _showInfo 0EE2                ??i2_lcdNibble 0001                  ??_lcdNibble 00B0  
                   getTime@i 00B5                     _simulate 047C                     int$flags 007D  
                ??_closeGate 0001                    printf@idx 00CA                    printf@len 00CD  
                  printf@val 00D0                    simulate@C 0054                PermLog@goback 0036  
             ??_HexDecToDec2 0009                    putch@data 00B2     __end_of_I2C_Master_Start 2698  
   __end_of_I2C_Master_Write 267E                   _INTCONbits 000FF2                PermLog@sorted 0032  
              PWMC@countdown 0014                     isdigit@c 00B2                _simulate$1521 0036  
                   intlevel2 0000             ___lwmod@dividend 00B7             ___lldiv@dividend 00B0  
               ??_stopMoving 0023                     printf@ap 00CB                     printf@cp 00C8  
    __end_of_I2C_Master_Init 20FA      __end_of_I2C_Master_Read 2436      __end_of_I2C_Master_Wait 2620  
    __end_of_I2C_Master_Stop 2690                  lcdInst@data 00B2                 showInfo@time 0023  
               showInfo@stop 002E                 showInfo@type 002C          __end_ofi2_lcdNibble 21AC  
           ___lldiv@quotient 00B8            I2C_Master_Write@d 00B1              ___lwmod@divisor 00B9  
            ___lwmod@counter 00BB           __end_of_stopMoving 23D2               WriteEE@address 0001  
          simulate@portShake 0038                  getTime@time 00B3                printV@charged 0023  



Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Feb 06 15:26:17 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    26                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    27                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    28                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    29                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    30  0000                     
    31                           ; Version 1.41
    32                           ; Generated 25/01/2017 GMT
    33                           ; 
    34                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC18F4620 Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     
    66                           	psect	idataBANK0
    67  00163E                     __pidataBANK0:
    68                           	opt stack 0
    69                           
    70                           ;initializer for println@F3037
    71  00163E  20                 	db	32
    72  00163F  20                 	db	32
    73  001640  20                 	db	32
    74  001641  20                 	db	32
    75  001642  20                 	db	32
    76  001643  20                 	db	32
    77  001644  20                 	db	32
    78  001645  20                 	db	32
    79  001646  20                 	db	32
    80  001647  20                 	db	32
    81  001648  20                 	db	32
    82  001649  20                 	db	32
    83  00164A  20                 	db	32
    84  00164B  20                 	db	32
    85  00164C  20                 	db	32
    86  00164D  20                 	db	32
    87  00164E  20                 	db	32
    88  00164F  20                 	db	32
    89  001650  20                 	db	32
    90  001651  20                 	db	32
    91  001652  20                 	db	32
    92  001653  20                 	db	32
    93  001654  20                 	db	32
    94  001655  20                 	db	32
    95  001656  20                 	db	32
    96  001657  20                 	db	32
    97  001658  20                 	db	32
    98  001659  20                 	db	32
    99  00165A  20                 	db	32
   100  00165B  20                 	db	32
   101  00165C  20                 	db	32
   102  00165D  20                 	db	32
   103  00165E  20                 	db	32
   104  00165F  20                 	db	32
   105  001660  20                 	db	32
   106  001661  20                 	db	32
   107  001662  20                 	db	32
   108  001663  20                 	db	32
   109  001664  20                 	db	32
   110  001665  20                 	db	32
   111  001666  00                 	db	0
   112  0000                     _INTCONbits	set	4082
   113  0000                     _PORTB	set	3969
   114  0000                     _PORTBbits	set	3969
   115  0000                     _LATD	set	3980
   116  0000                     _LATDbits	set	3980
   117  0000                     _ADCON1	set	4033
   118  0000                     _ADCON0	set	4034
   119  0000                     _LATC	set	3979
   120  0000                     _LATB	set	3978
   121  0000                     _TRISB	set	3987
   122  0000                     _TRISD	set	3989
   123  0000                     _TRISC	set	3988
   124  0000                     _INT1IF	set	32640
   125                           
   126                           	psect	smallconst
   127  001000                     __psmallconst:
   128                           	opt stack 0
   129  001000  00                 	db	0
   130  001001                     STR_6:
   131  001001  53                 	db	83	;'S'
   132  001002  6F                 	db	111	;'o'
   133  001003  72                 	db	114	;'r'
   134  001004  74                 	db	116	;'t'
   135  001005  69                 	db	105	;'i'
   136  001006  6E                 	db	110	;'n'
   137  001007  67                 	db	103	;'g'
   138  001008  20                 	db	32
   139  001009  43                 	db	67	;'C'
   140  00100A  6F                 	db	111	;'o'
   141  00100B  6D                 	db	109	;'m'
   142  00100C  70                 	db	112	;'p'
   143  00100D  6C                 	db	108	;'l'
   144  00100E  65                 	db	101	;'e'
   145  00100F  74                 	db	116	;'t'
   146  001010  65                 	db	101	;'e'
   147  001011  00                 	db	0
   148  001012                     STR_8:
   149  001012  50                 	db	80	;'P'
   150  001013  72                 	db	114	;'r'
   151  001014  65                 	db	101	;'e'
   152  001015  73                 	db	115	;'s'
   153  001016  73                 	db	115	;'s'
   154  001017  20                 	db	32
   155  001018  61                 	db	97	;'a'
   156  001019  20                 	db	32
   157  00101A  6E                 	db	110	;'n'
   158  00101B  75                 	db	117	;'u'
   159  00101C  6D                 	db	109	;'m'
   160  00101D  62                 	db	98	;'b'
   161  00101E  65                 	db	101	;'e'
   162  00101F  72                 	db	114	;'r'
   163  001020  00                 	db	0
   164  001021                     STR_1:
   165  001021  45                 	db	69	;'E'
   166  001022  6D                 	db	109	;'m'
   167  001023  65                 	db	101	;'e'
   168  001024  72                 	db	114	;'r'
   169  001025  67                 	db	103	;'g'
   170  001026  65                 	db	101	;'e'
   171  001027  6E                 	db	110	;'n'
   172  001028  63                 	db	99	;'c'
   173  001029  79                 	db	121	;'y'
   174  00102A  21                 	db	33
   175  00102B  20                 	db	32
   176  00102C  41                 	db	65	;'A'
   177  00102D  6C                 	db	108	;'l'
   178  00102E  6C                 	db	108	;'l'
   179  00102F  00                 	db	0
   180  001030                     STR_10:
   181  001030  54                 	db	84	;'T'
   182  001031  69                 	db	105	;'i'
   183  001032  6D                 	db	109	;'m'
   184  001033  65                 	db	101	;'e'
   185  001034  20                 	db	32
   186  001035  45                 	db	69	;'E'
   187  001036  6C                 	db	108	;'l'
   188  001037  61                 	db	97	;'a'
   189  001038  70                 	db	112	;'p'
   190  001039  73                 	db	115	;'s'
   191  00103A  65                 	db	101	;'e'
   192  00103B  64                 	db	100	;'d'
   193  00103C  3A                 	db	58	;':'
   194  00103D  00                 	db	0
   195  00103E                     STR_12:
   196  00103E  54                 	db	84	;'T'
   197  00103F  6F                 	db	111	;'o'
   198  001040  74                 	db	116	;'t'
   199  001041  61                 	db	97	;'a'
   200  001042  6C                 	db	108	;'l'
   201  001043  20                 	db	32
   202  001044  53                 	db	83	;'S'
   203  001045  6F                 	db	111	;'o'
   204  001046  72                 	db	114	;'r'
   205  001047  74                 	db	116	;'t'
   206  001048  65                 	db	101	;'e'
   207  001049  64                 	db	100	;'d'
   208  00104A  3A                 	db	58	;':'
   209  00104B  00                 	db	0
   210  00104C                     STR_9:
   211  00104C  46                 	db	70	;'F'
   212  00104D  6F                 	db	111	;'o'
   213  00104E  72                 	db	114	;'r'
   214  00104F  20                 	db	32
   215  001050  6D                 	db	109	;'m'
   216  001051  6F                 	db	111	;'o'
   217  001052  72                 	db	114	;'r'
   218  001053  65                 	db	101	;'e'
   219  001054  20                 	db	32
   220  001055  69                 	db	105	;'i'
   221  001056  6E                 	db	110	;'n'
   222  001057  66                 	db	102	;'f'
   223  001058  6F                 	db	111	;'o'
   224  001059  00                 	db	0
   225  00105A                     STR_2:
   226  00105A  4D                 	db	77	;'M'
   227  00105B  6F                 	db	111	;'o'
   228  00105C  74                 	db	116	;'t'
   229  00105D  6F                 	db	111	;'o'
   230  00105E  72                 	db	114	;'r'
   231  00105F  73                 	db	115	;'s'
   232  001060  20                 	db	32
   233  001061  53                 	db	83	;'S'
   234  001062  74                 	db	116	;'t'
   235  001063  6F                 	db	111	;'o'
   236  001064  70                 	db	112	;'p'
   237  001065  00                 	db	0
   238  001066                     STR_20:
   239  001066  55                 	db	85	;'U'
   240  001067  6E                 	db	110	;'n'
   241  001068  63                 	db	99	;'c'
   242  001069  68                 	db	104	;'h'
   243  00106A  61                 	db	97	;'a'
   244  00106B  72                 	db	114	;'r'
   245  00106C  67                 	db	103	;'g'
   246  00106D  65                 	db	101	;'e'
   247  00106E  64                 	db	100	;'d'
   248  00106F  3A                 	db	58	;':'
   249  001070  00                 	db	0
   250  001071                     STR_14:
   251  001071  41                 	db	65	;'A'
   252  001072  41                 	db	65	;'A'
   253  001073  20                 	db	32
   254  001074  53                 	db	83	;'S'
   255  001075  6F                 	db	111	;'o'
   256  001076  72                 	db	114	;'r'
   257  001077  74                 	db	116	;'t'
   258  001078  65                 	db	101	;'e'
   259  001079  64                 	db	100	;'d'
   260  00107A  3A                 	db	58	;':'
   261  00107B  00                 	db	0
   262  00107C                     STR_18:
   263  00107C  39                 	db	57	;'9'
   264  00107D  56                 	db	86	;'V'
   265  00107E  20                 	db	32
   266  00107F  53                 	db	83	;'S'
   267  001080  6F                 	db	111	;'o'
   268  001081  72                 	db	114	;'r'
   269  001082  74                 	db	116	;'t'
   270  001083  65                 	db	101	;'e'
   271  001084  64                 	db	100	;'d'
   272  001085  3A                 	db	58	;':'
   273  001086  00                 	db	0
   274  001087                     STR_3:
   275  001087  53                 	db	83	;'S'
   276  001088  6F                 	db	111	;'o'
   277  001089  72                 	db	114	;'r'
   278  00108A  74                 	db	116	;'t'
   279  00108B  69                 	db	105	;'i'
   280  00108C  6E                 	db	110	;'n'
   281  00108D  67                 	db	103	;'g'
   282  00108E  2E                 	db	46
   283  00108F  2E                 	db	46
   284  001090  2E                 	db	46
   285  001091  00                 	db	0
   286  001092                     STR_4:
   287  001092  53                 	db	83	;'S'
   288  001093  74                 	db	116	;'t'
   289  001094  61                 	db	97	;'a'
   290  001095  6E                 	db	110	;'n'
   291  001096  64                 	db	100	;'d'
   292  001097  62                 	db	98	;'b'
   293  001098  79                 	db	121	;'y'
   294  001099  2E                 	db	46
   295  00109A  2E                 	db	46
   296  00109B  2E                 	db	46
   297  00109C  00                 	db	0
   298  00109D                     STR_16:
   299  00109D  43                 	db	67	;'C'
   300  00109E  20                 	db	32
   301  00109F  53                 	db	83	;'S'
   302  0010A0  6F                 	db	111	;'o'
   303  0010A1  72                 	db	114	;'r'
   304  0010A2  74                 	db	116	;'t'
   305  0010A3  65                 	db	101	;'e'
   306  0010A4  64                 	db	100	;'d'
   307  0010A5  3A                 	db	58	;':'
   308  0010A6  00                 	db	0
   309  0010A7  45                 	db	69	;'E'
   310  0010A8  6D                 	db	109	;'m'
   311  0010A9  65                 	db	101	;'e'
   312  0010AA  72                 	db	114	;'r'
   313  0010AB  67                 	db	103	;'g'
   314  0010AC  65                 	db	101	;'e'
   315  0010AD  6E                 	db	110	;'n'
   316  0010AE  63                 	db	99	;'c'
   317  0010AF  79                 	db	121	;'y'
   318  0010B0  00                 	db	0
   319  0010B1                     STR_24:
   320  0010B1  28                 	db	40
   321  0010B2  6E                 	db	110	;'n'
   322  0010B3  75                 	db	117	;'u'
   323  0010B4  6C                 	db	108	;'l'
   324  0010B5  6C                 	db	108	;'l'
   325  0010B6  29                 	db	41
   326  0010B7  00                 	db	0
   327  0010B8  52                 	db	82	;'R'
   328  0010B9  65                 	db	101	;'e'
   329  0010BA  73                 	db	115	;'s'
   330  0010BB  75                 	db	117	;'u'
   331  0010BC  6D                 	db	109	;'m'
   332  0010BD  65                 	db	101	;'e'
   333  0010BE  00                 	db	0
   334  0010BF                     STR_11:
   335  0010BF  31                 	db	49	;'1'
   336  0010C0  35                 	db	53	;'5'
   337  0010C1  2E                 	db	46
   338  0010C2  36                 	db	54	;'6'
   339  0010C3  32                 	db	50	;'2'
   340  0010C4  73                 	db	115	;'s'
   341  0010C5  00                 	db	0
   342  0010C6                     STR_13:
   343  0010C6  31                 	db	49	;'1'
   344  0010C7  35                 	db	53	;'5'
   345  0010C8  00                 	db	0
   346  0010C9                     STR_5:
   347  0010C9  25                 	db	37
   348  0010CA  73                 	db	115	;'s'
   349  0010CB  00                 	db	0
   350  0010CC                     STR_7:
   351  0010CC  20                 	db	32
   352  0010CD  00                 	db	0
   353  0010CE                     STR_21:
   354  0010CE  30                 	db	48	;'0'
   355  0010CF  00                 	db	0
   356  0000                     
   357                           ; #config settings
   358  0010D0  00                 	db	0	; dummy byte at the end
   359  0000                     
   360                           	psect	cinit
   361  001608                     __pcinit:
   362                           	opt stack 0
   363  001608                     start_initialization:
   364                           	opt stack 0
   365  001608                     __initialization:
   366                           	opt stack 0
   367                           
   368                           ; Initialize objects allocated to BANK0 (41 bytes)
   369                           ; load TBLPTR registers with __pidataBANK0
   370  001608  0E3E               	movlw	low __pidataBANK0
   371  00160A  6EF6               	movwf	tblptrl,c
   372  00160C  0E16               	movlw	high __pidataBANK0
   373  00160E  6EF7               	movwf	tblptrh,c
   374  001610  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   375  001612  6EF8               	movwf	tblptru,c
   376  001614  EE00  F080         	lfsr	0,__pdataBANK0
   377  001618  EE10 F029          	lfsr	1,41
   378  00161C                     copy_data0:
   379  00161C  0009               	tblrd		*+
   380  00161E  CFF5 FFEE          	movff	tablat,postinc0
   381  001622  50E5               	movf	postdec1,w,c
   382  001624  50E1               	movf	fsr1l,w,c
   383  001626  E1FA               	bnz	copy_data0
   384                           
   385                           ; Clear objects allocated to COMRAM (8 bytes)
   386  001628  EE00  F068         	lfsr	0,__pbssCOMRAM
   387  00162C  0E08               	movlw	8
   388  00162E                     clear_0:
   389  00162E  6AEE               	clrf	postinc0,c
   390  001630  06E8               	decf	wreg,f,c
   391  001632  E1FD               	bnz	clear_0
   392  001634                     end_of_initialization:
   393                           	opt stack 0
   394  001634                     __end_of__initialization:
   395                           	opt stack 0
   396  001634  9070               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   397  001636  9270               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   398  001638  0100               	movlb	0
   399  00163A  EFBD  F00A         	goto	_main	;jump to C main() function
   400                           tblptru	equ	0xFF8
   401                           tblptrh	equ	0xFF7
   402                           tblptrl	equ	0xFF6
   403                           tablat	equ	0xFF5
   404                           postinc0	equ	0xFEE
   405                           wreg	equ	0xFE8
   406                           postdec1	equ	0xFE5
   407                           fsr1l	equ	0xFE1
   408                           
   409                           	psect	bssCOMRAM
   410  000068                     __pbssCOMRAM:
   411                           	opt stack 0
   412  000068                     mainloop@F3171:
   413                           	opt stack 0
   414  000068                     	ds	8
   415                           tblptru	equ	0xFF8
   416                           tblptrh	equ	0xFF7
   417                           tblptrl	equ	0xFF6
   418                           tablat	equ	0xFF5
   419                           postinc0	equ	0xFEE
   420                           wreg	equ	0xFE8
   421                           postdec1	equ	0xFE5
   422                           fsr1l	equ	0xFE1
   423                           
   424                           	psect	dataBANK0
   425  000080                     __pdataBANK0:
   426                           	opt stack 0
   427  000080                     println@F3037:
   428                           	opt stack 0
   429  000080                     	ds	41
   430                           tblptru	equ	0xFF8
   431                           tblptrh	equ	0xFF7
   432                           tblptrl	equ	0xFF6
   433                           tablat	equ	0xFF5
   434                           postinc0	equ	0xFEE
   435                           wreg	equ	0xFE8
   436                           postdec1	equ	0xFE5
   437                           fsr1l	equ	0xFE1
   438                           
   439                           	psect	cstackBANK0
   440  0000A9                     __pcstackBANK0:
   441                           	opt stack 0
   442  0000A9                     
   443                           ; 2 bytes @ 0x0
   444  0000A9                     	ds	2
   445  0000AB                     
   446                           ; 3 bytes @ 0x2
   447  0000AB                     	ds	3
   448  0000AE                     main@bigNose:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x5
   452  0000AE                     	ds	2
   453  0000B0                     main@smallNose:
   454                           	opt stack 0
   455                           
   456                           ; 2 bytes @ 0x7
   457  0000B0                     	ds	2
   458                           tblptru	equ	0xFF8
   459                           tblptrh	equ	0xFF7
   460                           tblptrl	equ	0xFF6
   461                           tablat	equ	0xFF5
   462                           postinc0	equ	0xFEE
   463                           wreg	equ	0xFE8
   464                           postdec1	equ	0xFE5
   465                           fsr1l	equ	0xFE1
   466                           
   467                           	psect	cstackCOMRAM
   468  000001                     __pcstackCOMRAM:
   469                           	opt stack 0
   470  000001                     ??_keypressed:
   471                           
   472                           ; 1 bytes @ 0x0
   473  000001                     	ds	14
   474  00000F                     keypressed@keypress:
   475                           	opt stack 0
   476                           
   477                           ; 1 bytes @ 0xE
   478  00000F                     	ds	1
   479  000010                     ?_captureKeypad:
   480                           	opt stack 0
   481  000010                     ?_getTime:
   482                           	opt stack 0
   483  000010                     lcdNibble@temp:
   484                           	opt stack 0
   485                           
   486                           ; 1 bytes @ 0xF
   487  000010                     	ds	1
   488  000011                     lcdNibble@data:
   489                           	opt stack 0
   490                           
   491                           ; 1 bytes @ 0x10
   492  000011                     	ds	1
   493  000012                     lcdInst@data:
   494                           	opt stack 0
   495  000012                     putch@data:
   496                           	opt stack 0
   497  000012                     captureKeypad@keypress:
   498                           	opt stack 0
   499  000012                     getTime@time:
   500                           	opt stack 0
   501                           
   502                           ; 2 bytes @ 0x11
   503  000012                     	ds	1
   504  000013                     ??_initLCD:
   505  000013                     ?_printf:
   506                           	opt stack 0
   507  000013                     printf@f:
   508                           	opt stack 0
   509                           
   510                           ; 2 bytes @ 0x12
   511  000013                     	ds	1
   512  000014                     
   513                           ; 1 bytes @ 0x13
   514  000014                     	ds	3
   515  000017                     printf@flag:
   516                           	opt stack 0
   517                           
   518                           ; 1 bytes @ 0x16
   519  000017                     	ds	1
   520  000018                     printf@ap:
   521                           	opt stack 0
   522                           
   523                           ; 2 bytes @ 0x17
   524  000018                     	ds	2
   525  00001A                     printf@c:
   526                           	opt stack 0
   527                           
   528                           ; 1 bytes @ 0x19
   529  00001A                     	ds	1
   530  00001B                     printf@cp:
   531                           	opt stack 0
   532                           
   533                           ; 2 bytes @ 0x1A
   534  00001B                     	ds	2
   535  00001D                     println@data:
   536                           	opt stack 0
   537                           
   538                           ; 2 bytes @ 0x1C
   539  00001D                     	ds	2
   540  00001F                     ??_println:
   541                           
   542                           ; 1 bytes @ 0x1E
   543  00001F                     	ds	2
   544  000021                     println@output:
   545                           	opt stack 0
   546                           
   547                           ; 41 bytes @ 0x20
   548  000021                     	ds	41
   549  00004A                     println@i:
   550                           	opt stack 0
   551                           
   552                           ; 2 bytes @ 0x49
   553  00004A                     	ds	2
   554  00004C                     simulateSort@stop:
   555                           	opt stack 0
   556  00004C                     showInfo@type:
   557                           	opt stack 0
   558                           
   559                           ; 2 bytes @ 0x4B
   560  00004C                     	ds	2
   561  00004E                     ??_showInfo:
   562  00004E                     ??_simulateSort:
   563                           
   564                           ; 1 bytes @ 0x4D
   565  00004E                     	ds	2
   566  000050                     simulateSort@keypad:
   567                           	opt stack 0
   568                           
   569                           ; 2 bytes @ 0x4F
   570  000050                     	ds	2
   571  000052                     mainloop@bigNose:
   572                           	opt stack 0
   573                           
   574                           ; 2 bytes @ 0x51
   575  000052                     	ds	2
   576  000054                     mainloop@smallNose:
   577                           	opt stack 0
   578                           
   579                           ; 2 bytes @ 0x53
   580  000054                     	ds	2
   581  000056                     ??_mainloop:
   582                           
   583                           ; 1 bytes @ 0x55
   584  000056                     	ds	2
   585  000058                     mainloop@AA:
   586                           	opt stack 0
   587                           
   588                           ; 2 bytes @ 0x57
   589  000058                     	ds	2
   590  00005A                     mainloop@C9:
   591                           	opt stack 0
   592                           
   593                           ; 2 bytes @ 0x59
   594  00005A                     	ds	2
   595  00005C                     mainloop@sorted:
   596                           	opt stack 0
   597                           
   598                           ; 8 bytes @ 0x5B
   599  00005C                     	ds	8
   600  000064                     mainloop@startTime:
   601                           	opt stack 0
   602                           
   603                           ; 2 bytes @ 0x63
   604  000064                     	ds	2
   605  000066                     mainloop@stop:
   606                           	opt stack 0
   607                           
   608                           ; 2 bytes @ 0x65
   609  000066                     	ds	2
   610  000068                     tblptru	equ	0xFF8
   611                           tblptrh	equ	0xFF7
   612                           tblptrl	equ	0xFF6
   613                           tablat	equ	0xFF5
   614                           postinc0	equ	0xFEE
   615                           wreg	equ	0xFE8
   616                           postdec1	equ	0xFE5
   617                           fsr1l	equ	0xFE1
   618                           
   619                           ; 1 bytes @ 0x67
   620 ;;
   621 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   622 ;;
   623 ;; *************** function _main *****************
   624 ;; Defined at:
   625 ;;		line 90 in file "main.c"
   626 ;; Parameters:    Size  Location     Type
   627 ;;  argc            2    0[BANK0 ] int 
   628 ;;  argv            3    2[BANK0 ] PTR PTR unsigned char 
   629 ;; Auto vars:     Size  Location     Type
   630 ;;  smallNose       2    7[BANK0 ] int 
   631 ;;  bigNose         2    5[BANK0 ] int 
   632 ;; Return value:  Size  Location     Type
   633 ;;                  2    0[BANK0 ] int 
   634 ;; Registers used:
   635 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   636 ;; Tracked objects:
   637 ;;		On entry : 0/0
   638 ;;		On exit  : 0/0
   639 ;;		Unchanged: 0/0
   640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   641 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   642 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   644 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   645 ;;Total ram usage:        9 bytes
   646 ;; Hardware stack levels required when called:    7
   647 ;; This function calls:
   648 ;;		_captureKeypad
   649 ;;		_initialize
   650 ;;		_mainloop
   651 ;;		_println
   652 ;; This function is called by:
   653 ;;		Startup code after reset
   654 ;; This function uses a non-reentrant model
   655 ;;
   656                           
   657                           	psect	text0
   658  00157A                     __ptext0:
   659                           	opt stack 0
   660  00157A                     _main:
   661                           	opt stack 24
   662  00157A                     
   663                           ;main.c: 92: initialize();
   664  00157A  EC34  F00B         	call	_initialize	;wreg free
   665                           
   666                           ;main.c: 94: println((unsigned char *) "Standby...");
   667  00157E  0E92               	movlw	low STR_4
   668  001580  6E1D               	movwf	println@data,c
   669  001582  0E10               	movlw	high STR_4
   670  001584  6E1E               	movwf	println@data+1,c
   671  001586  EC22  F00A         	call	_println	;wreg free
   672                           
   673                           ;main.c: 96: int bigNose = 0, smallNose = 0;
   674  00158A  0E00               	movlw	0
   675  00158C  0100               	movlb	0	; () banked
   676  00158E  6FAF               	movwf	(main@bigNose+1)& (0+255),b
   677  001590  0E00               	movlw	0
   678  001592  6FAE               	movwf	main@bigNose& (0+255),b
   679                           
   680                           ; BSR set to: 0
   681  001594  0E00               	movlw	0
   682  001596  0100               	movlb	0	; () banked
   683  001598  6FB1               	movwf	(main@smallNose+1)& (0+255),b
   684  00159A  0E00               	movlw	0
   685  00159C  6FB0               	movwf	main@smallNose& (0+255),b
   686                           
   687                           ; BSR set to: 0
   688                           ;main.c: 101: if (captureKeypad() == 15)
   689  00159E  EC43  F00B         	call	_captureKeypad	;wreg free
   690  0015A2  0E0F               	movlw	15
   691  0015A4  1810               	xorwf	?_captureKeypad,w,c
   692  0015A6  1011               	iorwf	?_captureKeypad+1,w,c
   693  0015A8  A4D8               	btfss	status,2,c
   694  0015AA  D7E7               	goto	l1288
   695                           
   696                           ;main.c: 102: mainloop(&bigNose, &smallNose);
   697  0015AC  0EAE               	movlw	low main@bigNose
   698  0015AE  6E52               	movwf	mainloop@bigNose,c
   699  0015B0  0E00               	movlw	high main@bigNose
   700  0015B2  6E53               	movwf	mainloop@bigNose+1,c
   701  0015B4  0EB0               	movlw	low main@smallNose
   702  0015B6  6E54               	movwf	mainloop@smallNose,c
   703  0015B8  0E00               	movlw	high main@smallNose
   704  0015BA  6E55               	movwf	mainloop@smallNose+1,c
   705  0015BC  EC7A  F009         	call	_mainloop	;wreg free
   706  0015C0  D7DC               	goto	l1288
   707  0015C2                     __end_of_main:
   708                           	opt stack 0
   709                           tblptru	equ	0xFF8
   710                           tblptrh	equ	0xFF7
   711                           tblptrl	equ	0xFF6
   712                           tablat	equ	0xFF5
   713                           postinc0	equ	0xFEE
   714                           wreg	equ	0xFE8
   715                           postdec1	equ	0xFE5
   716                           fsr1l	equ	0xFE1
   717                           status	equ	0xFD8
   718                           
   719 ;; *************** function _mainloop *****************
   720 ;; Defined at:
   721 ;;		line 55 in file "main.c"
   722 ;; Parameters:    Size  Location     Type
   723 ;;  bigNose         2   81[COMRAM] PTR int 
   724 ;;		 -> main@bigNose(2), 
   725 ;;  smallNose       2   83[COMRAM] PTR int 
   726 ;;		 -> main@smallNose(2), 
   727 ;; Auto vars:     Size  Location     Type
   728 ;;  sorted          8   91[COMRAM] int [4]
   729 ;;  stop            2  101[COMRAM] int 
   730 ;;  startTime       2   99[COMRAM] int 
   731 ;;  C9              2   89[COMRAM] int 
   732 ;;  AA              2   87[COMRAM] int 
   733 ;; Return value:  Size  Location     Type
   734 ;;                  1    wreg      void 
   735 ;; Registers used:
   736 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   737 ;; Tracked objects:
   738 ;;		On entry : 0/0
   739 ;;		On exit  : 0/0
   740 ;;		Unchanged: 0/0
   741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   742 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   743 ;;      Locals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   744 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   745 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   746 ;;Total ram usage:       22 bytes
   747 ;; Hardware stack levels used:    1
   748 ;; Hardware stack levels required when called:    6
   749 ;; This function calls:
   750 ;;		_getTime
   751 ;;		_println
   752 ;;		_showInfo
   753 ;;		_simulateSort
   754 ;; This function is called by:
   755 ;;		_main
   756 ;; This function uses a non-reentrant model
   757 ;;
   758                           
   759                           	psect	text1
   760  0012F4                     __ptext1:
   761                           	opt stack 0
   762  0012F4                     _mainloop:
   763                           	opt stack 24
   764                           
   765                           ;main.c: 56: println("Sorting...");
   766                           
   767                           ;incstack = 0
   768  0012F4  0E87               	movlw	low STR_3
   769  0012F6  6E1D               	movwf	println@data,c
   770  0012F8  0E10               	movlw	high STR_3
   771  0012FA  6E1E               	movwf	println@data+1,c
   772  0012FC  EC22  F00A         	call	_println	;wreg free
   773                           
   774                           ;main.c: 57: int stop = 0;
   775  001300  0E00               	movlw	0
   776  001302  6E67               	movwf	mainloop@stop+1,c
   777  001304  0E00               	movlw	0
   778  001306  6E66               	movwf	mainloop@stop,c
   779                           
   780                           ;main.c: 58: int sorted[] = {0, 0, 0, 0};
   781  001308  EE20  F068         	lfsr	2,mainloop@F3171
   782  00130C  EE10  F05C         	lfsr	1,mainloop@sorted
   783  001310  0E07               	movlw	7
   784  001312                     u281:
   785  001312  CFDB FFE3          	movff	plusw2,plusw1
   786  001316  06E8               	decf	wreg,f,c
   787  001318  E2FC               	bc	u281
   788                           
   789                           ;main.c: 59: int startTime = 0;
   790  00131A  0E00               	movlw	0
   791  00131C  6E65               	movwf	mainloop@startTime+1,c
   792  00131E  0E00               	movlw	0
   793  001320  6E64               	movwf	mainloop@startTime,c
   794                           
   795                           ;main.c: 60: int AA = 0;
   796  001322  0E00               	movlw	0
   797  001324  6E59               	movwf	mainloop@AA+1,c
   798  001326  0E00               	movlw	0
   799  001328  6E58               	movwf	mainloop@AA,c
   800                           
   801                           ;main.c: 61: int C9 = 0;
   802  00132A  0E00               	movlw	0
   803  00132C  6E5B               	movwf	mainloop@C9+1,c
   804  00132E  0E00               	movlw	0
   805  001330  6E5A               	movwf	mainloop@C9,c
   806                           
   807                           ;main.c: 63: while (!stop) {
   808  001332  D03A               	goto	l1196
   809  001334                     l1184:
   810                           
   811                           ;main.c: 67: LATC = LATC | 0b011001111;
   812  001334  508B               	movf	3979,w,c	;volatile
   813  001336  09CF               	iorlw	207
   814  001338  6E8B               	movwf	3979,c	;volatile
   815                           
   816                           ;main.c: 68: simulateSort(&stop);
   817  00133A  0E66               	movlw	low mainloop@stop
   818  00133C  6E4C               	movwf	simulateSort@stop,c
   819  00133E  0E00               	movlw	high mainloop@stop
   820  001340  6E4D               	movwf	simulateSort@stop+1,c
   821  001342  EC61  F00A         	call	_simulateSort	;wreg free
   822                           
   823                           ;main.c: 76: if (sorted[0] + sorted[1] + sorted[2] + sorted[3] == 15) {
   824  001346  5060               	movf	mainloop@sorted+4,w,c
   825  001348  245E               	addwf	mainloop@sorted+2,w,c
   826  00134A  6E56               	movwf	??_mainloop& (0+255),c
   827  00134C  5061               	movf	mainloop@sorted+5,w,c
   828  00134E  205F               	addwfc	mainloop@sorted+3,w,c
   829  001350  6E57               	movwf	(??_mainloop+1)& (0+255),c
   830  001352  5062               	movf	mainloop@sorted+6,w,c
   831  001354  2656               	addwf	??_mainloop,f,c
   832  001356  5063               	movf	mainloop@sorted+7,w,c
   833  001358  2257               	addwfc	??_mainloop+1,f,c
   834  00135A  505C               	movf	mainloop@sorted,w,c
   835  00135C  2656               	addwf	??_mainloop,f,c
   836  00135E  505D               	movf	mainloop@sorted+1,w,c
   837  001360  2257               	addwfc	??_mainloop+1,f,c
   838  001362  0E0F               	movlw	15
   839  001364  1856               	xorwf	??_mainloop,w,c
   840  001366  1057               	iorwf	??_mainloop+1,w,c
   841  001368  A4D8               	btfss	status,2,c
   842  00136A  D004               	goto	l1192
   843                           
   844                           ;main.c: 77: stop = 1;
   845  00136C  0E00               	movlw	0
   846  00136E  6E67               	movwf	mainloop@stop+1,c
   847  001370  0E01               	movlw	1
   848  001372  6E66               	movwf	mainloop@stop,c
   849  001374                     l1192:
   850                           
   851                           ;main.c: 78: }
   852                           ;main.c: 79: if (getTime() - startTime >= 180) {
   853  001374  C064  F056         	movff	mainloop@startTime,??_mainloop
   854  001378  C065  F057         	movff	mainloop@startTime+1,??_mainloop+1
   855  00137C  1E56               	comf	??_mainloop,f,c
   856  00137E  1E57               	comf	??_mainloop+1,f,c
   857  001380  4A56               	infsnz	??_mainloop,f,c
   858  001382  2A57               	incf	??_mainloop+1,f,c
   859  001384  EC4F  F00B         	call	_getTime	;wreg free
   860  001388  5056               	movf	??_mainloop,w,c
   861  00138A  2610               	addwf	?_getTime,f,c
   862  00138C  5057               	movf	??_mainloop+1,w,c
   863  00138E  2211               	addwfc	?_getTime+1,f,c
   864  001390  BE11               	btfsc	?_getTime+1,7,c
   865  001392  D00A               	goto	l1196
   866  001394  5011               	movf	?_getTime+1,w,c
   867  001396  E104               	bnz	u300
   868  001398  0EB4               	movlw	180
   869  00139A  5C10               	subwf	?_getTime,w,c
   870  00139C  A0D8               	btfss	status,0,c
   871  00139E  D004               	goto	l1196
   872  0013A0                     u300:
   873                           
   874                           ;main.c: 80: stop = 1;
   875  0013A0  0E00               	movlw	0
   876  0013A2  6E67               	movwf	mainloop@stop+1,c
   877  0013A4  0E01               	movlw	1
   878  0013A6  6E66               	movwf	mainloop@stop,c
   879  0013A8                     l1196:
   880  0013A8  5066               	movf	mainloop@stop,w,c
   881  0013AA  1067               	iorwf	mainloop@stop+1,w,c
   882  0013AC  B4D8               	btfsc	status,2,c
   883  0013AE  D7C2               	goto	l1184
   884                           
   885                           ;main.c: 81: }
   886                           ;main.c: 82: }
   887                           ;main.c: 84: showInfo(-1);
   888  0013B0  0EFF               	movlw	255
   889  0013B2  6E4D               	movwf	showInfo@type+1,c
   890  0013B4  684C               	setf	showInfo@type,c
   891  0013B6  EC69  F008         	call	_showInfo	;wreg free
   892                           
   893                           ;main.c: 86: LATC = 0;
   894  0013BA  0E00               	movlw	0
   895  0013BC  6E8B               	movwf	3979,c	;volatile
   896  0013BE  0012               	return	
   897  0013C0                     __end_of_mainloop:
   898                           	opt stack 0
   899                           tblptru	equ	0xFF8
   900                           tblptrh	equ	0xFF7
   901                           tblptrl	equ	0xFF6
   902                           tablat	equ	0xFF5
   903                           postinc0	equ	0xFEE
   904                           wreg	equ	0xFE8
   905                           postdec1	equ	0xFE5
   906                           plusw1	equ	0xFE3
   907                           fsr1l	equ	0xFE1
   908                           plusw2	equ	0xFDB
   909                           status	equ	0xFD8
   910                           
   911 ;; *************** function _simulateSort *****************
   912 ;; Defined at:
   913 ;;		line 35 in file "main.c"
   914 ;; Parameters:    Size  Location     Type
   915 ;;  stop            2   75[COMRAM] PTR int 
   916 ;;		 -> mainloop@stop(2), 
   917 ;; Auto vars:     Size  Location     Type
   918 ;;  keypad          2   79[COMRAM] unsigned int 
   919 ;; Return value:  Size  Location     Type
   920 ;;                  1    wreg      void 
   921 ;; Registers used:
   922 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   923 ;; Tracked objects:
   924 ;;		On entry : 0/0
   925 ;;		On exit  : 0/0
   926 ;;		Unchanged: 0/0
   927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   928 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   929 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   930 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   931 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   932 ;;Total ram usage:        6 bytes
   933 ;; Hardware stack levels used:    1
   934 ;; Hardware stack levels required when called:    5
   935 ;; This function calls:
   936 ;;		_captureKeypad
   937 ;;		_println
   938 ;; This function is called by:
   939 ;;		_mainloop
   940 ;; This function uses a non-reentrant model
   941 ;;
   942                           
   943                           	psect	text2
   944  0014C2                     __ptext2:
   945                           	opt stack 0
   946  0014C2                     _simulateSort:
   947                           	opt stack 24
   948                           
   949                           ;main.c: 36: unsigned int keypad = captureKeypad();
   950                           
   951                           ;incstack = 0
   952  0014C2  EC43  F00B         	call	_captureKeypad	;wreg free
   953  0014C6  C010  F050         	movff	?_captureKeypad,simulateSort@keypad
   954  0014CA  C011  F051         	movff	?_captureKeypad+1,simulateSort@keypad+1
   955                           
   956                           ;main.c: 37: switch (keypad) {
   957  0014CE  D01A               	goto	l1118
   958  0014D0                     l1106:
   959                           
   960                           ;main.c: 39: println("Emergency! All");
   961  0014D0  0E21               	movlw	low STR_1
   962  0014D2  6E1D               	movwf	println@data,c
   963  0014D4  0E10               	movlw	high STR_1
   964  0014D6  6E1E               	movwf	println@data+1,c
   965  0014D8  EC22  F00A         	call	_println	;wreg free
   966                           
   967                           ;main.c: 40: LATC = 0;
   968  0014DC  0E00               	movlw	0
   969  0014DE  6E8B               	movwf	3979,c	;volatile
   970                           
   971                           ;main.c: 41: println("Motors Stop");
   972  0014E0  0E5A               	movlw	low STR_2
   973  0014E2  6E1D               	movwf	println@data,c
   974  0014E4  0E10               	movlw	high STR_2
   975  0014E6  6E1E               	movwf	println@data+1,c
   976  0014E8  EC22  F00A         	call	_println	;wreg free
   977                           
   978                           ;main.c: 42: LATC = 0;
   979  0014EC  0E00               	movlw	0
   980  0014EE  6E8B               	movwf	3979,c	;volatile
   981  0014F0                     l32:
   982  0014F0  D7FF               	goto	l32
   983  0014F2                     l1114:
   984                           
   985                           ;main.c: 48: *stop = 1;
   986  0014F2  C04C  FFD9         	movff	simulateSort@stop,fsr2l
   987  0014F6  C04D  FFDA         	movff	simulateSort@stop+1,fsr2h
   988  0014FA  0E01               	movlw	1
   989  0014FC  6EDE               	movwf	postinc2,c
   990  0014FE  0E00               	movlw	0
   991  001500  6EDD               	movwf	postdec2,c
   992                           
   993                           ;main.c: 52: }
   994                           
   995                           ;main.c: 51: break;
   996                           
   997                           ;main.c: 50: default:
   998                           
   999                           ;main.c: 49: break;
  1000  001502  0012               	return	
  1001  001504                     l1118:
  1002  001504  C050  F04E         	movff	simulateSort@keypad,??_simulateSort
  1003  001508  C051  F04F         	movff	simulateSort@keypad+1,??_simulateSort+1
  1004                           
  1005                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1006                           ; Switch size 1, requested type "space"
  1007                           ; Number of cases is 1, Range of values is 0 to 0
  1008                           ; switch strategies available:
  1009                           ; Name         Instructions Cycles
  1010                           ; simple_byte            4     3 (average)
  1011                           ;	Chosen strategy is simple_byte
  1012  00150C  504F               	movf	??_simulateSort+1,w,c
  1013  00150E  0A00               	xorlw	0	; case 0
  1014  001510  A4D8               	btfss	status,2,c
  1015  001512  0012               	return	
  1016                           
  1017                           ; Switch size 1, requested type "space"
  1018                           ; Number of cases is 2, Range of values is 11 to 15
  1019                           ; switch strategies available:
  1020                           ; Name         Instructions Cycles
  1021                           ; simple_byte            7     4 (average)
  1022                           ;	Chosen strategy is simple_byte
  1023  001514  504E               	movf	??_simulateSort,w,c
  1024  001516  0A0B               	xorlw	11	; case 11
  1025  001518  B4D8               	btfsc	status,2,c
  1026  00151A  D7EB               	goto	l1114
  1027  00151C  0A04               	xorlw	4	; case 15
  1028  00151E  A4D8               	btfss	status,2,c
  1029  001520  0012               	return	
  1030  001522  D7D6               	goto	l1106
  1031  001524                     __end_of_simulateSort:
  1032                           	opt stack 0
  1033                           tblptru	equ	0xFF8
  1034                           tblptrh	equ	0xFF7
  1035                           tblptrl	equ	0xFF6
  1036                           tablat	equ	0xFF5
  1037                           postinc0	equ	0xFEE
  1038                           wreg	equ	0xFE8
  1039                           postdec1	equ	0xFE5
  1040                           plusw1	equ	0xFE3
  1041                           fsr1l	equ	0xFE1
  1042                           postinc2	equ	0xFDE
  1043                           postdec2	equ	0xFDD
  1044                           plusw2	equ	0xFDB
  1045                           fsr2h	equ	0xFDA
  1046                           fsr2l	equ	0xFD9
  1047                           status	equ	0xFD8
  1048                           
  1049 ;; *************** function _showInfo *****************
  1050 ;; Defined at:
  1051 ;;		line 36 in file "modules.c"
  1052 ;; Parameters:    Size  Location     Type
  1053 ;;  type            2   75[COMRAM] unsigned int 
  1054 ;; Auto vars:     Size  Location     Type
  1055 ;;		None
  1056 ;; Return value:  Size  Location     Type
  1057 ;;                  1    wreg      void 
  1058 ;; Registers used:
  1059 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1060 ;; Tracked objects:
  1061 ;;		On entry : 0/0
  1062 ;;		On exit  : 0/0
  1063 ;;		Unchanged: 0/0
  1064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1065 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1067 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1068 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1069 ;;Total ram usage:        4 bytes
  1070 ;; Hardware stack levels used:    1
  1071 ;; Hardware stack levels required when called:    5
  1072 ;; This function calls:
  1073 ;;		_captureKeypad
  1074 ;;		_println
  1075 ;; This function is called by:
  1076 ;;		_mainloop
  1077 ;; This function uses a non-reentrant model
  1078 ;;
  1079                           
  1080                           	psect	text3
  1081  0010D2                     __ptext3:
  1082                           	opt stack 0
  1083  0010D2                     _showInfo:
  1084                           	opt stack 24
  1085                           
  1086                           ;modules.c: 39: switch (type) {
  1087                           
  1088                           ;incstack = 0
  1089                           ;modules.c: 38: while (1) {
  1090  0010D2  D074               	goto	l1152
  1091  0010D4                     l1130:
  1092                           
  1093                           ;modules.c: 41: println("Sorting Complete");
  1094  0010D4  0E01               	movlw	low STR_6
  1095  0010D6  6E1D               	movwf	println@data,c
  1096  0010D8  0E10               	movlw	high STR_6
  1097  0010DA  6E1E               	movwf	println@data+1,c
  1098  0010DC  EC22  F00A         	call	_println	;wreg free
  1099                           
  1100                           ;modules.c: 42: println(" ");
  1101  0010E0  0ECC               	movlw	low STR_7
  1102  0010E2  6E1D               	movwf	println@data,c
  1103  0010E4  0E10               	movlw	high STR_7
  1104  0010E6  6E1E               	movwf	println@data+1,c
  1105  0010E8  EC22  F00A         	call	_println	;wreg free
  1106                           
  1107                           ;modules.c: 43: _delay((unsigned long)((1000)*(8000000/4000.0)));
  1108  0010EC  0E0B               	movlw	11
  1109  0010EE  6E4F               	movwf	(??_showInfo+1)& (0+255),c
  1110  0010F0  0E26               	movlw	38
  1111  0010F2  6E4E               	movwf	??_showInfo& (0+255),c
  1112  0010F4  0E5E               	movlw	94
  1113  0010F6                     u357:
  1114  0010F6  2EE8               	decfsz	wreg,f,c
  1115  0010F8  D7FE               	bra	u357
  1116  0010FA  2E4E               	decfsz	??_showInfo& (0+255),f,c
  1117  0010FC  D7FC               	bra	u357
  1118  0010FE  2E4F               	decfsz	(??_showInfo+1)& (0+255),f,c
  1119  001100  D7FA               	bra	u357
  1120                           
  1121                           ;modules.c: 44: println("Press a number");
  1122  001102  0E12               	movlw	low STR_8
  1123  001104  6E1D               	movwf	println@data,c
  1124  001106  0E10               	movlw	high STR_8
  1125  001108  6E1E               	movwf	println@data+1,c
  1126  00110A  EC22  F00A         	call	_println	;wreg free
  1127                           
  1128                           ;modules.c: 45: println("For more info");
  1129  00110E  0E4C               	movlw	low STR_9
  1130  001110  6E1D               	movwf	println@data,c
  1131  001112  0E10               	movlw	high STR_9
  1132  001114  6E1E               	movwf	println@data+1,c
  1133  001116  EC22  F00A         	call	_println	;wreg free
  1134                           
  1135                           ;modules.c: 46: break;
  1136  00111A  D077               	goto	l1154
  1137  00111C                     l1138:
  1138                           
  1139                           ;modules.c: 48: println("Time Elapsed:");
  1140  00111C  0E30               	movlw	low STR_10
  1141  00111E  6E1D               	movwf	println@data,c
  1142  001120  0E10               	movlw	high STR_10
  1143  001122  6E1E               	movwf	println@data+1,c
  1144  001124  EC22  F00A         	call	_println	;wreg free
  1145                           
  1146                           ;modules.c: 49: println("15.62s");
  1147  001128  0EBF               	movlw	low STR_11
  1148  00112A  6E1D               	movwf	println@data,c
  1149  00112C  0E10               	movlw	high STR_11
  1150  00112E  6E1E               	movwf	println@data+1,c
  1151  001130  EC22  F00A         	call	_println	;wreg free
  1152                           
  1153                           ;modules.c: 50: break;
  1154  001134  D06A               	goto	l1154
  1155  001136                     l1140:
  1156                           
  1157                           ;modules.c: 52: println("Total Sorted:");
  1158  001136  0E3E               	movlw	low STR_12
  1159  001138  6E1D               	movwf	println@data,c
  1160  00113A  0E10               	movlw	high STR_12
  1161  00113C  6E1E               	movwf	println@data+1,c
  1162  00113E  EC22  F00A         	call	_println	;wreg free
  1163                           
  1164                           ;modules.c: 53: println("15");
  1165  001142  0EC6               	movlw	low STR_13
  1166  001144  6E1D               	movwf	println@data,c
  1167  001146  0E10               	movlw	high STR_13
  1168  001148  6E1E               	movwf	println@data+1,c
  1169  00114A  EC22  F00A         	call	_println	;wreg free
  1170                           
  1171                           ;modules.c: 54: break;
  1172  00114E  D05D               	goto	l1154
  1173  001150                     l1142:
  1174                           
  1175                           ;modules.c: 56: println("AA Sorted:");
  1176  001150  0E71               	movlw	low STR_14
  1177  001152  6E1D               	movwf	println@data,c
  1178  001154  0E10               	movlw	high STR_14
  1179  001156  6E1E               	movwf	println@data+1,c
  1180  001158  EC22  F00A         	call	_println	;wreg free
  1181                           
  1182                           ;modules.c: 57: println("5");
  1183  00115C  0EC7               	movlw	low (STR_13+1)
  1184  00115E  6E1D               	movwf	println@data,c
  1185  001160  0E10               	movlw	high (STR_13+1)
  1186  001162  6E1E               	movwf	println@data+1,c
  1187  001164  EC22  F00A         	call	_println	;wreg free
  1188                           
  1189                           ;modules.c: 58: break;
  1190  001168  D050               	goto	l1154
  1191  00116A                     l1144:
  1192                           
  1193                           ;modules.c: 60: println("C Sorted:");
  1194  00116A  0E9D               	movlw	low STR_16
  1195  00116C  6E1D               	movwf	println@data,c
  1196  00116E  0E10               	movlw	high STR_16
  1197  001170  6E1E               	movwf	println@data+1,c
  1198  001172  EC22  F00A         	call	_println	;wreg free
  1199                           
  1200                           ;modules.c: 61: println("5");
  1201  001176  0EC7               	movlw	low (STR_13+1)
  1202  001178  6E1D               	movwf	println@data,c
  1203  00117A  0E10               	movlw	high (STR_13+1)
  1204  00117C  6E1E               	movwf	println@data+1,c
  1205  00117E  EC22  F00A         	call	_println	;wreg free
  1206                           
  1207                           ;modules.c: 62: break;
  1208  001182  D043               	goto	l1154
  1209  001184                     l1146:
  1210                           
  1211                           ;modules.c: 64: println("9V Sorted:");
  1212  001184  0E7C               	movlw	low STR_18
  1213  001186  6E1D               	movwf	println@data,c
  1214  001188  0E10               	movlw	high STR_18
  1215  00118A  6E1E               	movwf	println@data+1,c
  1216  00118C  EC22  F00A         	call	_println	;wreg free
  1217                           
  1218                           ;modules.c: 65: println("5");
  1219  001190  0EC7               	movlw	low (STR_13+1)
  1220  001192  6E1D               	movwf	println@data,c
  1221  001194  0E10               	movlw	high (STR_13+1)
  1222  001196  6E1E               	movwf	println@data+1,c
  1223  001198  EC22  F00A         	call	_println	;wreg free
  1224                           
  1225                           ;modules.c: 66: break;
  1226  00119C  D036               	goto	l1154
  1227  00119E                     l1148:
  1228                           
  1229                           ;modules.c: 68: println("Uncharged:");
  1230  00119E  0E66               	movlw	low STR_20
  1231  0011A0  6E1D               	movwf	println@data,c
  1232  0011A2  0E10               	movlw	high STR_20
  1233  0011A4  6E1E               	movwf	println@data+1,c
  1234  0011A6  EC22  F00A         	call	_println	;wreg free
  1235                           
  1236                           ;modules.c: 69: println("0");
  1237  0011AA  0ECE               	movlw	low STR_21
  1238  0011AC  6E1D               	movwf	println@data,c
  1239  0011AE  0E10               	movlw	high STR_21
  1240  0011B0  6E1E               	movwf	println@data+1,c
  1241  0011B2  EC22  F00A         	call	_println	;wreg free
  1242                           
  1243                           ;modules.c: 70: break;
  1244  0011B6  D029               	goto	l1154
  1245  0011B8                     l129:
  1246  0011B8  00FF               	reset		;# 
  1247                           
  1248                           ;modules.c: 75: }
  1249                           
  1250                           ;modules.c: 74: break;
  1251                           
  1252                           ;modules.c: 73: default:
  1253  0011BA  D027               	goto	l1154
  1254  0011BC                     l1152:
  1255  0011BC  C04C  F04E         	movff	showInfo@type,??_showInfo
  1256  0011C0  C04D  F04F         	movff	showInfo@type+1,??_showInfo+1
  1257                           
  1258                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  1259                           ; Switch size 1, requested type "space"
  1260                           ; Number of cases is 2, Range of values is 0 to 255
  1261                           ; switch strategies available:
  1262                           ; Name         Instructions Cycles
  1263                           ; simple_byte            7     4 (average)
  1264                           ;	Chosen strategy is simple_byte
  1265  0011C4  504F               	movf	??_showInfo+1,w,c
  1266  0011C6  0A00               	xorlw	0	; case 0
  1267  0011C8  B4D8               	btfsc	status,2,c
  1268  0011CA  D004               	goto	l1362
  1269  0011CC  0AFF               	xorlw	255	; case 255
  1270  0011CE  B4D8               	btfsc	status,2,c
  1271  0011D0  D018               	goto	l1364
  1272  0011D2  D01B               	goto	l1154
  1273  0011D4                     l1362:
  1274                           
  1275                           ; Switch size 1, requested type "space"
  1276                           ; Number of cases is 7, Range of values is 0 to 15
  1277                           ; switch strategies available:
  1278                           ; Name         Instructions Cycles
  1279                           ; simple_byte           22    12 (average)
  1280                           ;	Chosen strategy is simple_byte
  1281  0011D4  504E               	movf	??_showInfo,w,c
  1282  0011D6  0A00               	xorlw	0	; case 0
  1283  0011D8  B4D8               	btfsc	status,2,c
  1284  0011DA  D7A0               	goto	l1138
  1285  0011DC  0A01               	xorlw	1	; case 1
  1286  0011DE  B4D8               	btfsc	status,2,c
  1287  0011E0  D7AA               	goto	l1140
  1288  0011E2  0A03               	xorlw	3	; case 2
  1289  0011E4  B4D8               	btfsc	status,2,c
  1290  0011E6  D7B4               	goto	l1142
  1291  0011E8  0A01               	xorlw	1	; case 3
  1292  0011EA  B4D8               	btfsc	status,2,c
  1293  0011EC  D7BE               	goto	l1144
  1294  0011EE  0A07               	xorlw	7	; case 4
  1295  0011F0  B4D8               	btfsc	status,2,c
  1296  0011F2  D7C8               	goto	l1146
  1297  0011F4  0A01               	xorlw	1	; case 5
  1298  0011F6  B4D8               	btfsc	status,2,c
  1299  0011F8  D7D2               	goto	l1148
  1300  0011FA  0A0A               	xorlw	10	; case 15
  1301  0011FC  B4D8               	btfsc	status,2,c
  1302  0011FE  D7DC               	goto	l129
  1303  001200  D004               	goto	l1154
  1304  001202                     l1364:
  1305                           
  1306                           ; Switch size 1, requested type "space"
  1307                           ; Number of cases is 1, Range of values is 255 to 255
  1308                           ; switch strategies available:
  1309                           ; Name         Instructions Cycles
  1310                           ; simple_byte            4     3 (average)
  1311                           ;	Chosen strategy is simple_byte
  1312  001202  504E               	movf	??_showInfo,w,c
  1313  001204  0AFF               	xorlw	255	; case 255
  1314  001206  B4D8               	btfsc	status,2,c
  1315  001208  D765               	goto	l1130
  1316  00120A                     l1154:
  1317                           
  1318                           ;modules.c: 76: type = captureKeypad();
  1319  00120A  EC43  F00B         	call	_captureKeypad	;wreg free
  1320  00120E  C010  F04C         	movff	?_captureKeypad,showInfo@type
  1321  001212  C011  F04D         	movff	?_captureKeypad+1,showInfo@type+1
  1322  001216  D7D2               	goto	l1152
  1323  001218                     __end_of_showInfo:
  1324                           	opt stack 0
  1325                           tblptru	equ	0xFF8
  1326                           tblptrh	equ	0xFF7
  1327                           tblptrl	equ	0xFF6
  1328                           tablat	equ	0xFF5
  1329                           postinc0	equ	0xFEE
  1330                           wreg	equ	0xFE8
  1331                           postdec1	equ	0xFE5
  1332                           plusw1	equ	0xFE3
  1333                           fsr1l	equ	0xFE1
  1334                           postinc2	equ	0xFDE
  1335                           postdec2	equ	0xFDD
  1336                           plusw2	equ	0xFDB
  1337                           fsr2h	equ	0xFDA
  1338                           fsr2l	equ	0xFD9
  1339                           status	equ	0xFD8
  1340                           
  1341 ;; *************** function _println *****************
  1342 ;; Defined at:
  1343 ;;		line 10 in file "modules.c"
  1344 ;; Parameters:    Size  Location     Type
  1345 ;;  data            2   28[COMRAM] PTR unsigned char 
  1346 ;;		 -> STR_23(7), STR_22(10), STR_21(2), STR_20(11), 
  1347 ;;		 -> STR_19(2), STR_18(11), STR_17(2), STR_16(10), 
  1348 ;;		 -> STR_15(2), STR_14(11), STR_13(3), STR_12(14), 
  1349 ;;		 -> STR_11(7), STR_10(14), STR_9(14), STR_8(15), 
  1350 ;;		 -> STR_7(2), STR_6(17), STR_4(11), STR_3(11), 
  1351 ;;		 -> STR_2(12), STR_1(15), 
  1352 ;; Auto vars:     Size  Location     Type
  1353 ;;  output         41   32[COMRAM] unsigned char [41]
  1354 ;;  i               2   73[COMRAM] int 
  1355 ;; Return value:  Size  Location     Type
  1356 ;;                  1    wreg      void 
  1357 ;; Registers used:
  1358 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1359 ;; Tracked objects:
  1360 ;;		On entry : 0/0
  1361 ;;		On exit  : 0/0
  1362 ;;		Unchanged: 0/0
  1363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1364 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1365 ;;      Locals:        43       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1366 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1367 ;;      Totals:        47       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1368 ;;Total ram usage:       47 bytes
  1369 ;; Hardware stack levels used:    1
  1370 ;; Hardware stack levels required when called:    4
  1371 ;; This function calls:
  1372 ;;		_printf
  1373 ;; This function is called by:
  1374 ;;		_simulateSort
  1375 ;;		_mainloop
  1376 ;;		_main
  1377 ;;		_showInfo
  1378 ;;		_stopMoving
  1379 ;; This function uses a non-reentrant model
  1380 ;;
  1381                           
  1382                           	psect	text4
  1383  001444                     __ptext4:
  1384                           	opt stack 0
  1385  001444                     _println:
  1386                           	opt stack 26
  1387                           
  1388                           ;modules.c: 11: int i = 0;
  1389                           
  1390                           ;incstack = 0
  1391  001444  0E00               	movlw	0
  1392  001446  6E4B               	movwf	println@i+1,c
  1393  001448  0E00               	movlw	0
  1394  00144A  6E4A               	movwf	println@i,c
  1395                           
  1396                           ;modules.c: 12: char output[] = "                                        ";
  1397  00144C  EE20  F080         	lfsr	2,println@F3037
  1398  001450  EE10  F021         	lfsr	1,println@output
  1399  001454  0E28               	movlw	40
  1400  001456                     u261:
  1401  001456  CFDB FFE3          	movff	plusw2,plusw1
  1402  00145A  06E8               	decf	wreg,f,c
  1403  00145C  E2FC               	bc	u261
  1404                           
  1405                           ;modules.c: 13: while (data[i] != '\0') {
  1406  00145E  D016               	goto	l1082
  1407  001460                     l1078:
  1408                           
  1409                           ;modules.c: 14: output[i] = data[i++];
  1410  001460  504A               	movf	println@i,w,c
  1411  001462  241D               	addwf	println@data,w,c
  1412  001464  6E1F               	movwf	??_println& (0+255),c
  1413  001466  504B               	movf	println@i+1,w,c
  1414  001468  201E               	addwfc	println@data+1,w,c
  1415  00146A  6E20               	movwf	(??_println+1)& (0+255),c
  1416  00146C  C01F  FFF6         	movff	??_println,tblptrl
  1417  001470  C020  FFF7         	movff	??_println+1,tblptrh
  1418  001474                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1419  001474  6AF8               	clrf	tblptru,c
  1420  001476                     	endif
  1421  001476                     	if	0	;tblptru may be non-zero
  1422  001476                     	endif
  1423  001476  0E21               	movlw	low println@output
  1424  001478  244A               	addwf	println@i,w,c
  1425  00147A  6ED9               	movwf	fsr2l,c
  1426  00147C  0E00               	movlw	high println@output
  1427  00147E  204B               	addwfc	println@i+1,w,c
  1428  001480  6EDA               	movwf	fsr2h,c
  1429  001482  0008               	tblrd		*
  1430  001484  CFF5 FFDF          	movff	tablat,indf2
  1431  001488  4A4A               	infsnz	println@i,f,c
  1432  00148A  2A4B               	incf	println@i+1,f,c
  1433  00148C                     l1082:
  1434  00148C  504A               	movf	println@i,w,c
  1435  00148E  241D               	addwf	println@data,w,c
  1436  001490  6E1F               	movwf	??_println& (0+255),c
  1437  001492  504B               	movf	println@i+1,w,c
  1438  001494  201E               	addwfc	println@data+1,w,c
  1439  001496  6E20               	movwf	(??_println+1)& (0+255),c
  1440  001498  C01F  FFF6         	movff	??_println,tblptrl
  1441  00149C  C020  FFF7         	movff	??_println+1,tblptrh
  1442  0014A0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1443  0014A0  6AF8               	clrf	tblptru,c
  1444  0014A2                     	endif
  1445  0014A2                     	if	0	;tblptru may be non-zero
  1446  0014A2                     	endif
  1447  0014A2  0008               	tblrd		*
  1448  0014A4  50F5               	movf	tablat,w,c
  1449  0014A6  0900               	iorlw	0
  1450  0014A8  A4D8               	btfss	status,2,c
  1451  0014AA  D7DA               	goto	l1078
  1452                           
  1453                           ;modules.c: 15: }
  1454                           ;modules.c: 16: printf("%s", output);
  1455  0014AC  0EC9               	movlw	low STR_5
  1456  0014AE  6E13               	movwf	printf@f,c
  1457  0014B0  0E10               	movlw	high STR_5
  1458  0014B2  6E14               	movwf	printf@f+1,c
  1459  0014B4  0E21               	movlw	low println@output
  1460  0014B6  6E15               	movwf	?_printf+2,c
  1461  0014B8  0E00               	movlw	high println@output
  1462  0014BA  6E16               	movwf	?_printf+3,c
  1463  0014BC  EC0C  F009         	call	_printf	;wreg free
  1464  0014C0  0012               	return		;funcret
  1465  0014C2                     __end_of_println:
  1466                           	opt stack 0
  1467                           tblptru	equ	0xFF8
  1468                           tblptrh	equ	0xFF7
  1469                           tblptrl	equ	0xFF6
  1470                           tablat	equ	0xFF5
  1471                           postinc0	equ	0xFEE
  1472                           wreg	equ	0xFE8
  1473                           postdec1	equ	0xFE5
  1474                           plusw1	equ	0xFE3
  1475                           fsr1l	equ	0xFE1
  1476                           indf2	equ	0xFDF
  1477                           postinc2	equ	0xFDE
  1478                           postdec2	equ	0xFDD
  1479                           plusw2	equ	0xFDB
  1480                           fsr2h	equ	0xFDA
  1481                           fsr2l	equ	0xFD9
  1482                           status	equ	0xFD8
  1483                           
  1484 ;; *************** function _printf *****************
  1485 ;; Defined at:
  1486 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  1487 ;; Parameters:    Size  Location     Type
  1488 ;;  f               2   18[COMRAM] PTR const unsigned char 
  1489 ;;		 -> STR_5(3), 
  1490 ;; Auto vars:     Size  Location     Type
  1491 ;;  tmpval          4    0        struct .
  1492 ;;  cp              2   26[COMRAM] PTR const unsigned char 
  1493 ;;		 -> STR_24(7), println@output(41), 
  1494 ;;  ap              2   23[COMRAM] PTR void [1]
  1495 ;;		 -> ?_printf(2), 
  1496 ;;  len             2    0        unsigned int 
  1497 ;;  val             2    0        unsigned int 
  1498 ;;  c               1   25[COMRAM] char 
  1499 ;;  flag            1   22[COMRAM] unsigned char 
  1500 ;;  prec            1    0        char 
  1501 ;; Return value:  Size  Location     Type
  1502 ;;                  2   18[COMRAM] int 
  1503 ;; Registers used:
  1504 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1505 ;; Tracked objects:
  1506 ;;		On entry : 0/0
  1507 ;;		On exit  : 0/0
  1508 ;;		Unchanged: 0/0
  1509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1510 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1511 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1513 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1514 ;;Total ram usage:       10 bytes
  1515 ;; Hardware stack levels used:    1
  1516 ;; Hardware stack levels required when called:    3
  1517 ;; This function calls:
  1518 ;;		_putch
  1519 ;; This function is called by:
  1520 ;;		_println
  1521 ;; This function uses a non-reentrant model
  1522 ;;
  1523                           
  1524                           	psect	text5
  1525  001218                     __ptext5:
  1526                           	opt stack 0
  1527  001218                     _printf:
  1528                           	opt stack 26
  1529                           
  1530                           ;doprnt.c: 466: va_list ap;
  1531                           ;doprnt.c: 499: signed char c;
  1532                           ;doprnt.c: 506: signed char prec;
  1533                           ;doprnt.c: 508: unsigned char flag;
  1534                           ;doprnt.c: 523: union {
  1535                           ;doprnt.c: 524: unsigned long vd;
  1536                           ;doprnt.c: 525: double integ;
  1537                           ;doprnt.c: 526: } tmpval;
  1538                           ;doprnt.c: 528: unsigned int val;
  1539                           ;doprnt.c: 529: unsigned len;
  1540                           ;doprnt.c: 530: const char * cp;
  1541                           ;doprnt.c: 533: *ap = __va_start();
  1542                           
  1543                           ;incstack = 0
  1544  001218  0E15               	movlw	low (?_printf+2)
  1545  00121A  6E18               	movwf	printf@ap,c
  1546  00121C  0E00               	movlw	high (?_printf+2)
  1547  00121E  6E19               	movwf	printf@ap+1,c
  1548                           
  1549                           ;doprnt.c: 536: while(c = *f++) {
  1550  001220  D05B               	goto	l1068
  1551  001222                     l1044:
  1552                           
  1553                           ;doprnt.c: 538: if(c != '%')
  1554  001222  0E25               	movlw	37
  1555  001224  181A               	xorwf	printf@c,w,c
  1556  001226  B4D8               	btfsc	status,2,c
  1557  001228  D004               	goto	l1048
  1558                           
  1559                           ;doprnt.c: 540: {
  1560                           ;doprnt.c: 541: (putch(c) );
  1561  00122A  501A               	movf	printf@c,w,c
  1562  00122C  EC58  F00B         	call	_putch
  1563                           
  1564                           ;doprnt.c: 542: continue;
  1565  001230  D053               	goto	l1068
  1566  001232                     l1048:
  1567                           
  1568                           ;doprnt.c: 543: }
  1569                           ;doprnt.c: 548: flag = 0;
  1570  001232  0E00               	movlw	0
  1571  001234  6E17               	movwf	printf@flag,c
  1572                           
  1573                           ;doprnt.c: 635: switch(c = *f++) {
  1574  001236  D03F               	goto	l1066
  1575  001238                     l1050:
  1576                           
  1577                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  1578  001238  C018  FFD9         	movff	printf@ap,fsr2l
  1579  00123C  C019  FFDA         	movff	printf@ap+1,fsr2h
  1580  001240  CFDE F01B          	movff	postinc2,printf@cp
  1581  001244  CFDD F01C          	movff	postdec2,printf@cp+1
  1582  001248  0E02               	movlw	2
  1583  00124A  2618               	addwf	printf@ap,f,c
  1584  00124C  0E00               	movlw	0
  1585  00124E  2219               	addwfc	printf@ap+1,f,c
  1586                           
  1587                           ;doprnt.c: 740: if(!cp)
  1588  001250  501B               	movf	printf@cp,w,c
  1589  001252  101C               	iorwf	printf@cp+1,w,c
  1590  001254  A4D8               	btfss	status,2,c
  1591  001256  D01A               	goto	l1062
  1592                           
  1593                           ;doprnt.c: 741: cp = "(null)";
  1594  001258  0EB1               	movlw	low STR_24
  1595  00125A  6E1B               	movwf	printf@cp,c
  1596  00125C  0E10               	movlw	high STR_24
  1597  00125E  6E1C               	movwf	printf@cp+1,c
  1598                           
  1599                           ;doprnt.c: 777: while(*cp)
  1600  001260  D015               	goto	l1062
  1601  001262                     l1058:
  1602                           
  1603                           ;doprnt.c: 778: (putch(*cp++) );
  1604  001262  C01B  FFF6         	movff	printf@cp,tblptrl
  1605  001266  C01C  FFF7         	movff	printf@cp+1,tblptrh
  1606  00126A  0E00               	movlw	low (__smallconst shr (0+16))
  1607  00126C  6EF8               	movwf	tblptru,c
  1608  00126E  0E0F               	movlw	(high __ramtop+-1)
  1609  001270  64F7               	cpfsgt	tblptrh,c
  1610  001272  D003               	bra	u207
  1611  001274  0008               	tblrd		*
  1612  001276  50F5               	movf	tablat,w,c
  1613  001278  D005               	bra	u200
  1614  00127A                     u207:
  1615  00127A  CFF6 FFE9          	movff	tblptrl,fsr0l
  1616  00127E  CFF7 FFEA          	movff	tblptrh,fsr0h
  1617  001282  50EF               	movf	indf0,w,c
  1618  001284                     u200:
  1619  001284  EC58  F00B         	call	_putch
  1620  001288  4A1B               	infsnz	printf@cp,f,c
  1621  00128A  2A1C               	incf	printf@cp+1,f,c
  1622  00128C                     l1062:
  1623  00128C  C01B  FFF6         	movff	printf@cp,tblptrl
  1624  001290  C01C  FFF7         	movff	printf@cp+1,tblptrh
  1625  001294  0E00               	movlw	low (__smallconst shr (0+16))
  1626  001296  6EF8               	movwf	tblptru,c
  1627  001298  0E0F               	movlw	(high __ramtop+-1)
  1628  00129A  64F7               	cpfsgt	tblptrh,c
  1629  00129C  D003               	bra	u217
  1630  00129E  0008               	tblrd		*
  1631  0012A0  50F5               	movf	tablat,w,c
  1632  0012A2  D005               	bra	u210
  1633  0012A4                     u217:
  1634  0012A4  CFF6 FFE9          	movff	tblptrl,fsr0l
  1635  0012A8  CFF7 FFEA          	movff	tblptrh,fsr0h
  1636  0012AC  50EF               	movf	indf0,w,c
  1637  0012AE                     u210:
  1638  0012AE  0900               	iorlw	0
  1639  0012B0  B4D8               	btfsc	status,2,c
  1640  0012B2  D012               	goto	l1068
  1641  0012B4  D7D6               	goto	l1058
  1642  0012B6                     l1066:
  1643  0012B6  C013  FFF6         	movff	printf@f,tblptrl
  1644  0012BA  C014  FFF7         	movff	printf@f+1,tblptrh
  1645  0012BE  4A13               	infsnz	printf@f,f,c
  1646  0012C0  2A14               	incf	printf@f+1,f,c
  1647  0012C2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1648  0012C2  6AF8               	clrf	tblptru,c
  1649  0012C4                     	endif
  1650  0012C4                     	if	0	;tblptru may be non-zero
  1651  0012C4                     	endif
  1652  0012C4  0008               	tblrd		*
  1653  0012C6  CFF5 F01A          	movff	tablat,printf@c
  1654  0012CA  501A               	movf	printf@c,w,c
  1655                           
  1656                           ; Switch size 1, requested type "space"
  1657                           ; Number of cases is 2, Range of values is 0 to 115
  1658                           ; switch strategies available:
  1659                           ; Name         Instructions Cycles
  1660                           ; simple_byte            7     4 (average)
  1661                           ;	Chosen strategy is simple_byte
  1662  0012CC  0A00               	xorlw	0	; case 0
  1663  0012CE  B4D8               	btfsc	status,2,c
  1664  0012D0  0012               	return	
  1665  0012D2  0A73               	xorlw	115	; case 115
  1666  0012D4  B4D8               	btfsc	status,2,c
  1667  0012D6  D7B0               	goto	l1050
  1668  0012D8                     l1068:
  1669  0012D8  C013  FFF6         	movff	printf@f,tblptrl
  1670  0012DC  C014  FFF7         	movff	printf@f+1,tblptrh
  1671  0012E0  4A13               	infsnz	printf@f,f,c
  1672  0012E2  2A14               	incf	printf@f+1,f,c
  1673  0012E4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1674  0012E4  6AF8               	clrf	tblptru,c
  1675  0012E6                     	endif
  1676  0012E6                     	if	0	;tblptru may be non-zero
  1677  0012E6                     	endif
  1678  0012E6  0008               	tblrd		*
  1679  0012E8  CFF5 F01A          	movff	tablat,printf@c
  1680  0012EC  501A               	movf	printf@c,w,c
  1681  0012EE  B4D8               	btfsc	status,2,c
  1682  0012F0  0012               	return	
  1683  0012F2  D797               	goto	l1044
  1684  0012F4                     __end_of_printf:
  1685                           	opt stack 0
  1686                           tblptru	equ	0xFF8
  1687                           tblptrh	equ	0xFF7
  1688                           tblptrl	equ	0xFF6
  1689                           tablat	equ	0xFF5
  1690                           indf0	equ	0xFEF
  1691                           postinc0	equ	0xFEE
  1692                           fsr0h	equ	0xFEA
  1693                           fsr0l	equ	0xFE9
  1694                           wreg	equ	0xFE8
  1695                           postdec1	equ	0xFE5
  1696                           plusw1	equ	0xFE3
  1697                           fsr1l	equ	0xFE1
  1698                           indf2	equ	0xFDF
  1699                           postinc2	equ	0xFDE
  1700                           postdec2	equ	0xFDD
  1701                           plusw2	equ	0xFDB
  1702                           fsr2h	equ	0xFDA
  1703                           fsr2l	equ	0xFD9
  1704                           status	equ	0xFD8
  1705                           
  1706 ;; *************** function _putch *****************
  1707 ;; Defined at:
  1708 ;;		line 31 in file "lcd.c"
  1709 ;; Parameters:    Size  Location     Type
  1710 ;;  data            1    wreg     unsigned char 
  1711 ;; Auto vars:     Size  Location     Type
  1712 ;;  data            1   17[COMRAM] unsigned char 
  1713 ;; Return value:  Size  Location     Type
  1714 ;;                  1    wreg      void 
  1715 ;; Registers used:
  1716 ;;		wreg, status,2, status,0, cstack
  1717 ;; Tracked objects:
  1718 ;;		On entry : 0/0
  1719 ;;		On exit  : 0/0
  1720 ;;		Unchanged: 0/0
  1721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1723 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1725 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1726 ;;Total ram usage:        1 bytes
  1727 ;; Hardware stack levels used:    1
  1728 ;; Hardware stack levels required when called:    2
  1729 ;; This function calls:
  1730 ;;		_lcdNibble
  1731 ;; This function is called by:
  1732 ;;		_printf
  1733 ;; This function uses a non-reentrant model
  1734 ;;
  1735                           
  1736                           	psect	text6
  1737  0016B0                     __ptext6:
  1738                           	opt stack 0
  1739  0016B0                     _putch:
  1740                           	opt stack 26
  1741                           
  1742                           ;incstack = 0
  1743                           ;putch@data stored from wreg
  1744  0016B0  6E12               	movwf	putch@data,c
  1745                           
  1746                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  1747  0016B2  848C               	bsf	3980,2,c	;volatile
  1748                           
  1749                           ;lcd.c: 33: lcdNibble(data);
  1750  0016B4  5012               	movf	putch@data,w,c
  1751  0016B6  EC92  F00A         	call	_lcdNibble
  1752  0016BA  0012               	return		;funcret
  1753  0016BC                     __end_of_putch:
  1754                           	opt stack 0
  1755                           tblptru	equ	0xFF8
  1756                           tblptrh	equ	0xFF7
  1757                           tblptrl	equ	0xFF6
  1758                           tablat	equ	0xFF5
  1759                           indf0	equ	0xFEF
  1760                           postinc0	equ	0xFEE
  1761                           fsr0h	equ	0xFEA
  1762                           fsr0l	equ	0xFE9
  1763                           wreg	equ	0xFE8
  1764                           postdec1	equ	0xFE5
  1765                           plusw1	equ	0xFE3
  1766                           fsr1l	equ	0xFE1
  1767                           indf2	equ	0xFDF
  1768                           postinc2	equ	0xFDE
  1769                           postdec2	equ	0xFDD
  1770                           plusw2	equ	0xFDB
  1771                           fsr2h	equ	0xFDA
  1772                           fsr2l	equ	0xFD9
  1773                           status	equ	0xFD8
  1774                           
  1775 ;; *************** function _captureKeypad *****************
  1776 ;; Defined at:
  1777 ;;		line 19 in file "modules.c"
  1778 ;; Parameters:    Size  Location     Type
  1779 ;;		None
  1780 ;; Auto vars:     Size  Location     Type
  1781 ;;  keypress        1   17[COMRAM] unsigned char 
  1782 ;; Return value:  Size  Location     Type
  1783 ;;                  2   15[COMRAM] int 
  1784 ;; Registers used:
  1785 ;;		wreg, status,2, status,0
  1786 ;; Tracked objects:
  1787 ;;		On entry : 0/0
  1788 ;;		On exit  : 0/0
  1789 ;;		Unchanged: 0/0
  1790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1791 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1792 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1794 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1795 ;;Total ram usage:        3 bytes
  1796 ;; Hardware stack levels used:    1
  1797 ;; Hardware stack levels required when called:    1
  1798 ;; This function calls:
  1799 ;;		Nothing
  1800 ;; This function is called by:
  1801 ;;		_simulateSort
  1802 ;;		_main
  1803 ;;		_showInfo
  1804 ;;		_stopMoving
  1805 ;; This function uses a non-reentrant model
  1806 ;;
  1807                           
  1808                           	psect	text7
  1809  001686                     __ptext7:
  1810                           	opt stack 0
  1811  001686                     _captureKeypad:
  1812                           	opt stack 27
  1813  001686                     l105:
  1814  001686  A281               	btfss	3969,1,c	;volatile
  1815  001688  D7FE               	goto	l105
  1816                           
  1817                           ;modules.c: 21: unsigned char keypress = (PORTB & 0xF0) >> 4;
  1818  00168A  3881               	swapf	3969,w,c	;volatile
  1819  00168C  0B0F               	andlw	15
  1820  00168E  0B0F               	andlw	15
  1821  001690  6E12               	movwf	captureKeypad@keypress,c
  1822  001692                     l108:
  1823  001692  B281               	btfsc	3969,1,c	;volatile
  1824  001694  D7FE               	goto	l108
  1825                           
  1826                           ;modules.c: 23: return keypress;
  1827  001696  C012  F010         	movff	captureKeypad@keypress,?_captureKeypad
  1828  00169A  6A11               	clrf	?_captureKeypad+1,c
  1829  00169C  0012               	return		;funcret
  1830  00169E                     __end_of_captureKeypad:
  1831                           	opt stack 0
  1832                           tblptru	equ	0xFF8
  1833                           tblptrh	equ	0xFF7
  1834                           tblptrl	equ	0xFF6
  1835                           tablat	equ	0xFF5
  1836                           indf0	equ	0xFEF
  1837                           postinc0	equ	0xFEE
  1838                           fsr0h	equ	0xFEA
  1839                           fsr0l	equ	0xFE9
  1840                           wreg	equ	0xFE8
  1841                           postdec1	equ	0xFE5
  1842                           plusw1	equ	0xFE3
  1843                           fsr1l	equ	0xFE1
  1844                           indf2	equ	0xFDF
  1845                           postinc2	equ	0xFDE
  1846                           postdec2	equ	0xFDD
  1847                           plusw2	equ	0xFDB
  1848                           fsr2h	equ	0xFDA
  1849                           fsr2l	equ	0xFD9
  1850                           status	equ	0xFD8
  1851                           
  1852 ;; *************** function _getTime *****************
  1853 ;; Defined at:
  1854 ;;		line 81 in file "modules.c"
  1855 ;; Parameters:    Size  Location     Type
  1856 ;;		None
  1857 ;; Auto vars:     Size  Location     Type
  1858 ;;  time            2   17[COMRAM] int 
  1859 ;; Return value:  Size  Location     Type
  1860 ;;                  2   15[COMRAM] int 
  1861 ;; Registers used:
  1862 ;;		wreg, status,2
  1863 ;; Tracked objects:
  1864 ;;		On entry : 0/0
  1865 ;;		On exit  : 0/0
  1866 ;;		Unchanged: 0/0
  1867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1868 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1869 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1871 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1872 ;;Total ram usage:        4 bytes
  1873 ;; Hardware stack levels used:    1
  1874 ;; Hardware stack levels required when called:    1
  1875 ;; This function calls:
  1876 ;;		Nothing
  1877 ;; This function is called by:
  1878 ;;		_mainloop
  1879 ;; This function uses a non-reentrant model
  1880 ;;
  1881                           
  1882                           	psect	text8
  1883  00169E                     __ptext8:
  1884                           	opt stack 0
  1885  00169E                     _getTime:
  1886                           	opt stack 28
  1887                           
  1888                           ;modules.c: 83: int time = 0;
  1889                           
  1890                           ;incstack = 0
  1891  00169E  0E00               	movlw	0
  1892  0016A0  6E13               	movwf	getTime@time+1,c
  1893  0016A2  0E00               	movlw	0
  1894  0016A4  6E12               	movwf	getTime@time,c
  1895                           
  1896                           ;modules.c: 84: return time;
  1897  0016A6  C012  F010         	movff	getTime@time,?_getTime
  1898  0016AA  C013  F011         	movff	getTime@time+1,?_getTime+1
  1899  0016AE  0012               	return	
  1900  0016B0                     __end_of_getTime:
  1901                           	opt stack 0
  1902                           tblptru	equ	0xFF8
  1903                           tblptrh	equ	0xFF7
  1904                           tblptrl	equ	0xFF6
  1905                           tablat	equ	0xFF5
  1906                           indf0	equ	0xFEF
  1907                           postinc0	equ	0xFEE
  1908                           fsr0h	equ	0xFEA
  1909                           fsr0l	equ	0xFE9
  1910                           wreg	equ	0xFE8
  1911                           postdec1	equ	0xFE5
  1912                           plusw1	equ	0xFE3
  1913                           fsr1l	equ	0xFE1
  1914                           indf2	equ	0xFDF
  1915                           postinc2	equ	0xFDE
  1916                           postdec2	equ	0xFDD
  1917                           plusw2	equ	0xFDB
  1918                           fsr2h	equ	0xFDA
  1919                           fsr2l	equ	0xFD9
  1920                           status	equ	0xFD8
  1921                           
  1922 ;; *************** function _initialize *****************
  1923 ;; Defined at:
  1924 ;;		line 24 in file "main.c"
  1925 ;; Parameters:    Size  Location     Type
  1926 ;;		None
  1927 ;; Auto vars:     Size  Location     Type
  1928 ;;		None
  1929 ;; Return value:  Size  Location     Type
  1930 ;;                  1    wreg      void 
  1931 ;; Registers used:
  1932 ;;		wreg, status,2, status,0, cstack
  1933 ;; Tracked objects:
  1934 ;;		On entry : 0/0
  1935 ;;		On exit  : 0/0
  1936 ;;		Unchanged: 0/0
  1937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1941 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1942 ;;Total ram usage:        0 bytes
  1943 ;; Hardware stack levels used:    1
  1944 ;; Hardware stack levels required when called:    4
  1945 ;; This function calls:
  1946 ;;		_initLCD
  1947 ;; This function is called by:
  1948 ;;		_main
  1949 ;; This function uses a non-reentrant model
  1950 ;;
  1951                           
  1952                           	psect	text9
  1953  001668                     __ptext9:
  1954                           	opt stack 0
  1955  001668                     _initialize:
  1956                           	opt stack 26
  1957                           
  1958                           ;main.c: 25: TRISC = 0x00;
  1959                           
  1960                           ;incstack = 0
  1961  001668  0E00               	movlw	0
  1962  00166A  6E94               	movwf	3988,c	;volatile
  1963                           
  1964                           ;main.c: 26: TRISD = 0x00;
  1965  00166C  0E00               	movlw	0
  1966  00166E  6E95               	movwf	3989,c	;volatile
  1967                           
  1968                           ;main.c: 27: TRISB = 0xFF;
  1969  001670  6893               	setf	3987,c	;volatile
  1970                           
  1971                           ;main.c: 28: LATB = 0x00;
  1972  001672  0E00               	movlw	0
  1973  001674  6E8A               	movwf	3978,c	;volatile
  1974                           
  1975                           ;main.c: 29: LATC = 0x00;
  1976  001676  0E00               	movlw	0
  1977  001678  6E8B               	movwf	3979,c	;volatile
  1978                           
  1979                           ;main.c: 30: ADCON0 = 0x00;
  1980  00167A  0E00               	movlw	0
  1981  00167C  6EC2               	movwf	4034,c	;volatile
  1982                           
  1983                           ;main.c: 31: ADCON1 = 0xFF;
  1984  00167E  68C1               	setf	4033,c	;volatile
  1985                           
  1986                           ;main.c: 32: initLCD();
  1987  001680  ECE1  F00A         	call	_initLCD	;wreg free
  1988  001684  0012               	return		;funcret
  1989  001686                     __end_of_initialize:
  1990                           	opt stack 0
  1991                           tblptru	equ	0xFF8
  1992                           tblptrh	equ	0xFF7
  1993                           tblptrl	equ	0xFF6
  1994                           tablat	equ	0xFF5
  1995                           indf0	equ	0xFEF
  1996                           postinc0	equ	0xFEE
  1997                           fsr0h	equ	0xFEA
  1998                           fsr0l	equ	0xFE9
  1999                           wreg	equ	0xFE8
  2000                           postdec1	equ	0xFE5
  2001                           plusw1	equ	0xFE3
  2002                           fsr1l	equ	0xFE1
  2003                           indf2	equ	0xFDF
  2004                           postinc2	equ	0xFDE
  2005                           postdec2	equ	0xFDD
  2006                           plusw2	equ	0xFDB
  2007                           fsr2h	equ	0xFDA
  2008                           fsr2l	equ	0xFD9
  2009                           status	equ	0xFD8
  2010                           
  2011 ;; *************** function _initLCD *****************
  2012 ;; Defined at:
  2013 ;;		line 15 in file "lcd.c"
  2014 ;; Parameters:    Size  Location     Type
  2015 ;;		None
  2016 ;; Auto vars:     Size  Location     Type
  2017 ;;		None
  2018 ;; Return value:  Size  Location     Type
  2019 ;;                  1    wreg      void 
  2020 ;; Registers used:
  2021 ;;		wreg, status,2, status,0, cstack
  2022 ;; Tracked objects:
  2023 ;;		On entry : 0/0
  2024 ;;		On exit  : 0/0
  2025 ;;		Unchanged: 0/0
  2026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2029 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2030 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2031 ;;Total ram usage:        1 bytes
  2032 ;; Hardware stack levels used:    1
  2033 ;; Hardware stack levels required when called:    3
  2034 ;; This function calls:
  2035 ;;		_lcdInst
  2036 ;; This function is called by:
  2037 ;;		_initialize
  2038 ;; This function uses a non-reentrant model
  2039 ;;
  2040                           
  2041                           	psect	text10
  2042  0015C2                     __ptext10:
  2043                           	opt stack 0
  2044  0015C2                     _initLCD:
  2045                           	opt stack 26
  2046                           
  2047                           ;lcd.c: 16: _delay((unsigned long)((15)*(8000000/4000.0)));
  2048                           
  2049                           ;incstack = 0
  2050  0015C2  0E27               	movlw	39
  2051  0015C4  6E13               	movwf	??_initLCD& (0+255),c
  2052  0015C6  0EF5               	movlw	245
  2053  0015C8                     u367:
  2054  0015C8  2EE8               	decfsz	wreg,f,c
  2055  0015CA  D7FE               	bra	u367
  2056  0015CC  2E13               	decfsz	??_initLCD& (0+255),f,c
  2057  0015CE  D7FC               	bra	u367
  2058  0015D0  F000               	nop	
  2059                           
  2060                           ;lcd.c: 17: lcdInst(0b00110011);
  2061  0015D2  0E33               	movlw	51
  2062  0015D4  EC5E  F00B         	call	_lcdInst
  2063                           
  2064                           ;lcd.c: 18: lcdInst(0b00110010);
  2065  0015D8  0E32               	movlw	50
  2066  0015DA  EC5E  F00B         	call	_lcdInst
  2067                           
  2068                           ;lcd.c: 19: lcdInst(0b00101000);
  2069  0015DE  0E28               	movlw	40
  2070  0015E0  EC5E  F00B         	call	_lcdInst
  2071                           
  2072                           ;lcd.c: 20: lcdInst(0b00001111);
  2073  0015E4  0E0F               	movlw	15
  2074  0015E6  EC5E  F00B         	call	_lcdInst
  2075                           
  2076                           ;lcd.c: 21: lcdInst(0b00000110);
  2077  0015EA  0E06               	movlw	6
  2078  0015EC  EC5E  F00B         	call	_lcdInst
  2079                           
  2080                           ;lcd.c: 22: lcdInst(0b00000001);
  2081  0015F0  0E01               	movlw	1
  2082  0015F2  EC5E  F00B         	call	_lcdInst
  2083                           
  2084                           ;lcd.c: 23: _delay((unsigned long)((15)*(8000000/4000.0)));
  2085  0015F6  0E27               	movlw	39
  2086  0015F8  6E13               	movwf	??_initLCD& (0+255),c
  2087  0015FA  0EF5               	movlw	245
  2088  0015FC                     u377:
  2089  0015FC  2EE8               	decfsz	wreg,f,c
  2090  0015FE  D7FE               	bra	u377
  2091  001600  2E13               	decfsz	??_initLCD& (0+255),f,c
  2092  001602  D7FC               	bra	u377
  2093  001604  F000               	nop	
  2094  001606  0012               	return		;funcret
  2095  001608                     __end_of_initLCD:
  2096                           	opt stack 0
  2097                           tblptru	equ	0xFF8
  2098                           tblptrh	equ	0xFF7
  2099                           tblptrl	equ	0xFF6
  2100                           tablat	equ	0xFF5
  2101                           indf0	equ	0xFEF
  2102                           postinc0	equ	0xFEE
  2103                           fsr0h	equ	0xFEA
  2104                           fsr0l	equ	0xFE9
  2105                           wreg	equ	0xFE8
  2106                           postdec1	equ	0xFE5
  2107                           plusw1	equ	0xFE3
  2108                           fsr1l	equ	0xFE1
  2109                           indf2	equ	0xFDF
  2110                           postinc2	equ	0xFDE
  2111                           postdec2	equ	0xFDD
  2112                           plusw2	equ	0xFDB
  2113                           fsr2h	equ	0xFDA
  2114                           fsr2l	equ	0xFD9
  2115                           status	equ	0xFD8
  2116                           
  2117 ;; *************** function _lcdInst *****************
  2118 ;; Defined at:
  2119 ;;		line 26 in file "lcd.c"
  2120 ;; Parameters:    Size  Location     Type
  2121 ;;  data            1    wreg     unsigned char 
  2122 ;; Auto vars:     Size  Location     Type
  2123 ;;  data            1   17[COMRAM] unsigned char 
  2124 ;; Return value:  Size  Location     Type
  2125 ;;                  1    wreg      void 
  2126 ;; Registers used:
  2127 ;;		wreg, status,2, status,0, cstack
  2128 ;; Tracked objects:
  2129 ;;		On entry : 0/0
  2130 ;;		On exit  : 0/0
  2131 ;;		Unchanged: 0/0
  2132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2134 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2136 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2137 ;;Total ram usage:        1 bytes
  2138 ;; Hardware stack levels used:    1
  2139 ;; Hardware stack levels required when called:    2
  2140 ;; This function calls:
  2141 ;;		_lcdNibble
  2142 ;; This function is called by:
  2143 ;;		_initLCD
  2144 ;; This function uses a non-reentrant model
  2145 ;;
  2146                           
  2147                           	psect	text11
  2148  0016BC                     __ptext11:
  2149                           	opt stack 0
  2150  0016BC                     _lcdInst:
  2151                           	opt stack 26
  2152                           
  2153                           ;incstack = 0
  2154                           ;lcdInst@data stored from wreg
  2155  0016BC  6E12               	movwf	lcdInst@data,c
  2156                           
  2157                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  2158  0016BE  948C               	bcf	3980,2,c	;volatile
  2159                           
  2160                           ;lcd.c: 28: lcdNibble(data);
  2161  0016C0  5012               	movf	lcdInst@data,w,c
  2162  0016C2  EC92  F00A         	call	_lcdNibble
  2163  0016C6  0012               	return		;funcret
  2164  0016C8                     __end_of_lcdInst:
  2165                           	opt stack 0
  2166                           tblptru	equ	0xFF8
  2167                           tblptrh	equ	0xFF7
  2168                           tblptrl	equ	0xFF6
  2169                           tablat	equ	0xFF5
  2170                           indf0	equ	0xFEF
  2171                           postinc0	equ	0xFEE
  2172                           fsr0h	equ	0xFEA
  2173                           fsr0l	equ	0xFE9
  2174                           wreg	equ	0xFE8
  2175                           postdec1	equ	0xFE5
  2176                           plusw1	equ	0xFE3
  2177                           fsr1l	equ	0xFE1
  2178                           indf2	equ	0xFDF
  2179                           postinc2	equ	0xFDE
  2180                           postdec2	equ	0xFDD
  2181                           plusw2	equ	0xFDB
  2182                           fsr2h	equ	0xFDA
  2183                           fsr2l	equ	0xFD9
  2184                           status	equ	0xFD8
  2185                           
  2186 ;; *************** function _lcdNibble *****************
  2187 ;; Defined at:
  2188 ;;		line 36 in file "lcd.c"
  2189 ;; Parameters:    Size  Location     Type
  2190 ;;  data            1    wreg     unsigned char 
  2191 ;; Auto vars:     Size  Location     Type
  2192 ;;  data            1   16[COMRAM] unsigned char 
  2193 ;;  temp            1   15[COMRAM] unsigned char 
  2194 ;; Return value:  Size  Location     Type
  2195 ;;                  1    wreg      void 
  2196 ;; Registers used:
  2197 ;;		wreg, status,2, status,0
  2198 ;; Tracked objects:
  2199 ;;		On entry : 0/0
  2200 ;;		On exit  : 0/0
  2201 ;;		Unchanged: 0/0
  2202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2204 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2206 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2207 ;;Total ram usage:        2 bytes
  2208 ;; Hardware stack levels used:    1
  2209 ;; Hardware stack levels required when called:    1
  2210 ;; This function calls:
  2211 ;;		Nothing
  2212 ;; This function is called by:
  2213 ;;		_lcdInst
  2214 ;;		_putch
  2215 ;; This function uses a non-reentrant model
  2216 ;;
  2217                           
  2218                           	psect	text12
  2219  001524                     __ptext12:
  2220                           	opt stack 0
  2221  001524                     _lcdNibble:
  2222                           	opt stack 26
  2223                           
  2224                           ;incstack = 0
  2225                           ;lcdNibble@data stored from wreg
  2226  001524  6E11               	movwf	lcdNibble@data,c
  2227                           
  2228                           ;lcd.c: 38: char temp = data & 0xF0;
  2229  001526  5011               	movf	lcdNibble@data,w,c
  2230  001528  0BF0               	andlw	240
  2231  00152A  6E10               	movwf	lcdNibble@temp,c
  2232                           
  2233                           ;lcd.c: 39: LATD = LATD & 0x0F;
  2234  00152C  508C               	movf	3980,w,c	;volatile
  2235  00152E  0B0F               	andlw	15
  2236  001530  6E8C               	movwf	3980,c	;volatile
  2237                           
  2238                           ;lcd.c: 40: LATD = temp | LATD;
  2239  001532  5010               	movf	lcdNibble@temp,w,c
  2240  001534  108C               	iorwf	3980,w,c	;volatile
  2241  001536  6E8C               	movwf	3980,c	;volatile
  2242                           
  2243                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  2244  001538  968C               	bcf	3980,3,c	;volatile
  2245                           
  2246                           ;lcd.c: 43: _delay((unsigned long)((25)*(8000000/4000000.0)));
  2247  00153A  0E10               	movlw	16
  2248  00153C                     u387:
  2249  00153C  2EE8               	decfsz	wreg,f,c
  2250  00153E  D7FE               	bra	u387
  2251  001540  D000               	nop2	
  2252                           
  2253                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  2254  001542  868C               	bsf	3980,3,c	;volatile
  2255                           
  2256                           ;lcd.c: 45: _delay((unsigned long)((25)*(8000000/4000000.0)));
  2257  001544  0E10               	movlw	16
  2258  001546                     u397:
  2259  001546  2EE8               	decfsz	wreg,f,c
  2260  001548  D7FE               	bra	u397
  2261  00154A  D000               	nop2	
  2262                           
  2263                           ;lcd.c: 47: data = data << 4;
  2264  00154C  3811               	swapf	lcdNibble@data,w,c
  2265  00154E  0BF0               	andlw	240
  2266  001550  6E11               	movwf	lcdNibble@data,c
  2267                           
  2268                           ;lcd.c: 49: temp = data & 0xF0;
  2269  001552  5011               	movf	lcdNibble@data,w,c
  2270  001554  0BF0               	andlw	240
  2271  001556  6E10               	movwf	lcdNibble@temp,c
  2272                           
  2273                           ;lcd.c: 50: LATD = LATD & 0x0F;
  2274  001558  508C               	movf	3980,w,c	;volatile
  2275  00155A  0B0F               	andlw	15
  2276  00155C  6E8C               	movwf	3980,c	;volatile
  2277                           
  2278                           ;lcd.c: 51: LATD = temp | LATD;
  2279  00155E  5010               	movf	lcdNibble@temp,w,c
  2280  001560  108C               	iorwf	3980,w,c	;volatile
  2281  001562  6E8C               	movwf	3980,c	;volatile
  2282                           
  2283                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  2284  001564  968C               	bcf	3980,3,c	;volatile
  2285                           
  2286                           ;lcd.c: 54: _delay((unsigned long)((25)*(8000000/4000000.0)));
  2287  001566  0E10               	movlw	16
  2288  001568                     u407:
  2289  001568  2EE8               	decfsz	wreg,f,c
  2290  00156A  D7FE               	bra	u407
  2291  00156C  D000               	nop2	
  2292                           
  2293                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  2294  00156E  868C               	bsf	3980,3,c	;volatile
  2295                           
  2296                           ;lcd.c: 56: _delay((unsigned long)((25)*(8000000/4000000.0)));
  2297  001570  0E10               	movlw	16
  2298  001572                     u417:
  2299  001572  2EE8               	decfsz	wreg,f,c
  2300  001574  D7FE               	bra	u417
  2301  001576  D000               	nop2	
  2302  001578  0012               	return		;funcret
  2303  00157A                     __end_of_lcdNibble:
  2304                           	opt stack 0
  2305                           tblptru	equ	0xFF8
  2306                           tblptrh	equ	0xFF7
  2307                           tblptrl	equ	0xFF6
  2308                           tablat	equ	0xFF5
  2309                           indf0	equ	0xFEF
  2310                           postinc0	equ	0xFEE
  2311                           fsr0h	equ	0xFEA
  2312                           fsr0l	equ	0xFE9
  2313                           wreg	equ	0xFE8
  2314                           postdec1	equ	0xFE5
  2315                           plusw1	equ	0xFE3
  2316                           fsr1l	equ	0xFE1
  2317                           indf2	equ	0xFDF
  2318                           postinc2	equ	0xFDE
  2319                           postdec2	equ	0xFDD
  2320                           plusw2	equ	0xFDB
  2321                           fsr2h	equ	0xFDA
  2322                           fsr2l	equ	0xFD9
  2323                           status	equ	0xFD8
  2324                           
  2325 ;; *************** function _keypressed *****************
  2326 ;; Defined at:
  2327 ;;		line 26 in file "modules.c"
  2328 ;; Parameters:    Size  Location     Type
  2329 ;;		None
  2330 ;; Auto vars:     Size  Location     Type
  2331 ;;  keypress        1   14[COMRAM] unsigned char 
  2332 ;; Return value:  Size  Location     Type
  2333 ;;                  1    wreg      void 
  2334 ;; Registers used:
  2335 ;;		wreg, status,2, status,0
  2336 ;; Tracked objects:
  2337 ;;		On entry : 0/0
  2338 ;;		On exit  : 0/0
  2339 ;;		Unchanged: 0/0
  2340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2342 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2343 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2344 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2345 ;;Total ram usage:       15 bytes
  2346 ;; Hardware stack levels used:    1
  2347 ;; This function calls:
  2348 ;;		Nothing
  2349 ;; This function is called by:
  2350 ;;		Interrupt level 2
  2351 ;; This function uses a non-reentrant model
  2352 ;;
  2353                           
  2354                           	psect	intcode
  2355  000008                     __pintcode:
  2356                           	opt stack 0
  2357  000008                     _keypressed:
  2358                           	opt stack 24
  2359                           
  2360                           ;incstack = 0
  2361  000008  8270               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2362  00000A  EDE0  F009         	call	int_func,f	;refresh shadow registers
  2363                           tblptru	equ	0xFF8
  2364                           tblptrh	equ	0xFF7
  2365                           tblptrl	equ	0xFF6
  2366                           tablat	equ	0xFF5
  2367                           indf0	equ	0xFEF
  2368                           postinc0	equ	0xFEE
  2369                           fsr0h	equ	0xFEA
  2370                           fsr0l	equ	0xFE9
  2371                           wreg	equ	0xFE8
  2372                           postdec1	equ	0xFE5
  2373                           plusw1	equ	0xFE3
  2374                           fsr1l	equ	0xFE1
  2375                           indf2	equ	0xFDF
  2376                           postinc2	equ	0xFDE
  2377                           postdec2	equ	0xFDD
  2378                           plusw2	equ	0xFDB
  2379                           fsr2h	equ	0xFDA
  2380                           fsr2l	equ	0xFD9
  2381                           status	equ	0xFD8
  2382                           
  2383                           	psect	intcode_body
  2384  0013C0                     __pintcode_body:
  2385                           	opt stack 24
  2386  0013C0                     int_func:
  2387                           	opt stack 24
  2388  0013C0  0006               	pop		; remove dummy address from shadow register refresh
  2389  0013C2  CFFA F001          	movff	pclath,??_keypressed
  2390  0013C6  CFFB F002          	movff	pclatu,??_keypressed+1
  2391  0013CA  CFE9 F003          	movff	fsr0l,??_keypressed+2
  2392  0013CE  CFEA F004          	movff	fsr0h,??_keypressed+3
  2393  0013D2  CFE1 F005          	movff	fsr1l,??_keypressed+4
  2394  0013D6  CFE2 F006          	movff	fsr1h,??_keypressed+5
  2395  0013DA  CFD9 F007          	movff	fsr2l,??_keypressed+6
  2396  0013DE  CFDA F008          	movff	fsr2h,??_keypressed+7
  2397  0013E2  CFF3 F009          	movff	prodl,??_keypressed+8
  2398  0013E6  CFF4 F00A          	movff	prodh,??_keypressed+9
  2399  0013EA  CFF6 F00B          	movff	tblptrl,??_keypressed+10
  2400  0013EE  CFF7 F00C          	movff	tblptrh,??_keypressed+11
  2401  0013F2  CFF8 F00D          	movff	tblptru,??_keypressed+12
  2402  0013F6  CFF5 F00E          	movff	tablat,??_keypressed+13
  2403                           
  2404                           ;modules.c: 27: if (INT1IF) {
  2405  0013FA  A0F0               	btfss	intcon3,0,c	;volatile
  2406  0013FC  D005               	goto	i2l116
  2407                           
  2408                           ;modules.c: 28: unsigned char keypress = (PORTB & 0xF0) >> 4;
  2409  0013FE  3881               	swapf	3969,w,c	;volatile
  2410  001400  0B0F               	andlw	15
  2411  001402  0B0F               	andlw	15
  2412  001404  6E0F               	movwf	keypressed@keypress,c
  2413                           
  2414                           ;modules.c: 30: if (keypress == 15) {
  2415  001406  90F0               	bcf	intcon3,0,c	;volatile
  2416  001408                     i2l116:
  2417  001408  C00E  FFF5         	movff	??_keypressed+13,tablat
  2418  00140C  C00D  FFF8         	movff	??_keypressed+12,tblptru
  2419  001410  C00C  FFF7         	movff	??_keypressed+11,tblptrh
  2420  001414  C00B  FFF6         	movff	??_keypressed+10,tblptrl
  2421  001418  C00A  FFF4         	movff	??_keypressed+9,prodh
  2422  00141C  C009  FFF3         	movff	??_keypressed+8,prodl
  2423  001420  C008  FFDA         	movff	??_keypressed+7,fsr2h
  2424  001424  C007  FFD9         	movff	??_keypressed+6,fsr2l
  2425  001428  C006  FFE2         	movff	??_keypressed+5,fsr1h
  2426  00142C  C005  FFE1         	movff	??_keypressed+4,fsr1l
  2427  001430  C004  FFEA         	movff	??_keypressed+3,fsr0h
  2428  001434  C003  FFE9         	movff	??_keypressed+2,fsr0l
  2429  001438  C002  FFFB         	movff	??_keypressed+1,pclatu
  2430  00143C  C001  FFFA         	movff	??_keypressed,pclath
  2431  001440  9270               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2432  001442  0011               	retfie		f
  2433  001444                     __end_of_keypressed:
  2434                           	opt stack 0
  2435                           pclatu	equ	0xFFB
  2436                           pclath	equ	0xFFA
  2437                           tblptru	equ	0xFF8
  2438                           tblptrh	equ	0xFF7
  2439                           tblptrl	equ	0xFF6
  2440                           tablat	equ	0xFF5
  2441                           prodh	equ	0xFF4
  2442                           prodl	equ	0xFF3
  2443                           intcon3	equ	0xFF0
  2444                           indf0	equ	0xFEF
  2445                           postinc0	equ	0xFEE
  2446                           fsr0h	equ	0xFEA
  2447                           fsr0l	equ	0xFE9
  2448                           wreg	equ	0xFE8
  2449                           postdec1	equ	0xFE5
  2450                           plusw1	equ	0xFE3
  2451                           fsr1h	equ	0xFE2
  2452                           fsr1l	equ	0xFE1
  2453                           indf2	equ	0xFDF
  2454                           postinc2	equ	0xFDE
  2455                           postdec2	equ	0xFDD
  2456                           plusw2	equ	0xFDB
  2457                           fsr2h	equ	0xFDA
  2458                           fsr2l	equ	0xFD9
  2459                           status	equ	0xFD8
  2460                           pclatu	equ	0xFFB
  2461                           pclath	equ	0xFFA
  2462                           tblptru	equ	0xFF8
  2463                           tblptrh	equ	0xFF7
  2464                           tblptrl	equ	0xFF6
  2465                           tablat	equ	0xFF5
  2466                           prodh	equ	0xFF4
  2467                           prodl	equ	0xFF3
  2468                           intcon3	equ	0xFF0
  2469                           indf0	equ	0xFEF
  2470                           postinc0	equ	0xFEE
  2471                           fsr0h	equ	0xFEA
  2472                           fsr0l	equ	0xFE9
  2473                           wreg	equ	0xFE8
  2474                           postdec1	equ	0xFE5
  2475                           plusw1	equ	0xFE3
  2476                           fsr1h	equ	0xFE2
  2477                           fsr1l	equ	0xFE1
  2478                           indf2	equ	0xFDF
  2479                           postinc2	equ	0xFDE
  2480                           postdec2	equ	0xFDD
  2481                           plusw2	equ	0xFDB
  2482                           fsr2h	equ	0xFDA
  2483                           fsr2l	equ	0xFD9
  2484                           status	equ	0xFD8
  2485                           
  2486                           	psect	rparam
  2487  0000                     pclatu	equ	0xFFB
  2488                           pclath	equ	0xFFA
  2489                           tblptru	equ	0xFF8
  2490                           tblptrh	equ	0xFF7
  2491                           tblptrl	equ	0xFF6
  2492                           tablat	equ	0xFF5
  2493                           prodh	equ	0xFF4
  2494                           prodl	equ	0xFF3
  2495                           intcon3	equ	0xFF0
  2496                           indf0	equ	0xFEF
  2497                           postinc0	equ	0xFEE
  2498                           fsr0h	equ	0xFEA
  2499                           fsr0l	equ	0xFE9
  2500                           wreg	equ	0xFE8
  2501                           postdec1	equ	0xFE5
  2502                           plusw1	equ	0xFE3
  2503                           fsr1h	equ	0xFE2
  2504                           fsr1l	equ	0xFE1
  2505                           indf2	equ	0xFDF
  2506                           postinc2	equ	0xFDE
  2507                           postdec2	equ	0xFDD
  2508                           plusw2	equ	0xFDB
  2509                           fsr2h	equ	0xFDA
  2510                           fsr2l	equ	0xFD9
  2511                           status	equ	0xFD8
  2512                           
  2513                           	psect	temp
  2514  000070                     btemp:
  2515                           	opt stack 0
  2516  000070                     	ds	1
  2517  0000                     int$flags	set	btemp
  2518                           pclatu	equ	0xFFB
  2519                           pclath	equ	0xFFA
  2520                           tblptru	equ	0xFF8
  2521                           tblptrh	equ	0xFF7
  2522                           tblptrl	equ	0xFF6
  2523                           tablat	equ	0xFF5
  2524                           prodh	equ	0xFF4
  2525                           prodl	equ	0xFF3
  2526                           intcon3	equ	0xFF0
  2527                           indf0	equ	0xFEF
  2528                           postinc0	equ	0xFEE
  2529                           fsr0h	equ	0xFEA
  2530                           fsr0l	equ	0xFE9
  2531                           wreg	equ	0xFE8
  2532                           postdec1	equ	0xFE5
  2533                           plusw1	equ	0xFE3
  2534                           fsr1h	equ	0xFE2
  2535                           fsr1l	equ	0xFE1
  2536                           indf2	equ	0xFDF
  2537                           postinc2	equ	0xFDE
  2538                           postdec2	equ	0xFDD
  2539                           plusw2	equ	0xFDB
  2540                           fsr2h	equ	0xFDA
  2541                           fsr2l	equ	0xFD9
  2542                           status	equ	0xFD8


Data Sizes:
    Strings     207
    Constant    0
    Data        41
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    103     111
    BANK0           128      9      50
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    mainloop@smallNose	PTR int  size(2) Largest target is 2
		 -> main@smallNose(BANK0[2]), 

    mainloop@bigNose	PTR int  size(2) Largest target is 2
		 -> main@bigNose(BANK0[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_5(CODE[3]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 41
		 -> STR_24(CODE[7]), println@output(COMRAM[41]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    println@data	PTR unsigned char  size(2) Largest target is 17
		 -> STR_23(CODE[7]), STR_22(CODE[10]), STR_21(CODE[2]), STR_20(CODE[11]), 
		 -> STR_19(CODE[2]), STR_18(CODE[11]), STR_17(CODE[2]), STR_16(CODE[10]), 
		 -> STR_15(CODE[2]), STR_14(CODE[11]), STR_13(CODE[3]), STR_12(CODE[14]), 
		 -> STR_11(CODE[7]), STR_10(CODE[14]), STR_9(CODE[14]), STR_8(CODE[15]), 
		 -> STR_7(CODE[2]), STR_6(CODE[17]), STR_4(CODE[11]), STR_3(CODE[11]), 
		 -> STR_2(CODE[12]), STR_1(CODE[15]), 

    simulateSort@stop	PTR int  size(2) Largest target is 2
		 -> mainloop@stop(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_mainloop
    _mainloop->_simulateSort
    _simulateSort->_println
    _showInfo->_println
    _println->_printf
    _printf->_putch
    _putch->_lcdNibble
    _initialize->_initLCD
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _keypressed in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     4      5    8617
                                              0 BANK0      9     4      5
                      _captureKeypad
                         _initialize
                           _mainloop
                            _println
 ---------------------------------------------------------------------------------
 (1) _mainloop                                            22    18      4    6439
                                             81 COMRAM    22    18      4
                            _getTime
                            _println
                           _showInfo
                       _simulateSort
 ---------------------------------------------------------------------------------
 (2) _simulateSort                                         6     4      2    2106
                                             75 COMRAM     6     4      2
                      _captureKeypad
                            _println
 ---------------------------------------------------------------------------------
 (2) _showInfo                                             4     2      2    2062
                                             75 COMRAM     4     2      2
                      _captureKeypad
                            _println
 ---------------------------------------------------------------------------------
 (1) _println                                             47    45      2    1952
                                             28 COMRAM    47    45      2
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              19    15      4     383
                                             18 COMRAM    10     6      4
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                             17 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _captureKeypad                                        3     1      2      23
                                             15 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _getTime                                              4     2      2      23
                                             15 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0     135
                            _initLCD
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     135
                                             18 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                             17 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                             15 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _keypressed                                          15    15      0      15
                                              0 COMRAM    15    15      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _captureKeypad
   _initialize
     _initLCD
       _lcdInst
         _lcdNibble
   _mainloop
     _getTime
     _println
       _printf
         _putch
           _lcdNibble
     _showInfo
       _captureKeypad
       _println
         _printf
           _putch
             _lcdNibble
     _simulateSort
       _captureKeypad
       _println
         _printf
           _putch
             _lcdNibble
   _println
     _printf
       _putch
         _lcdNibble

 _keypressed (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      9      32       5       39.1%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     67      6F       1       88.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A1      34        0.0%
DATA                 0      0      A1       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Feb 06 15:26:17 2017

                     l32 14F0              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
            __CFG_OSC$HS 000000                      l105 1686                      l108 1692  
                    l129 11B8             __CFG_CPB$OFF 000000                      u200 1284  
                    u210 12AE                      u300 13A0                      u207 127A  
                    u217 12A4                      u261 1456                      u407 1568  
                    u417 1572                      u281 1312             __CFG_CPD$OFF 000000  
                    u357 10F6                      u367 15C8                      u377 15FC  
                    u387 153C                      u397 1546                      wreg 000FE8  
            main@bigNose 00AE             __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000  
                   l1050 1238                     l1130 10D4                     l1114 14F2  
                   l1106 14D0                     l1044 1222                     l1140 1136  
                   l1062 128C                     l1142 1150                     l1118 1504  
                   l1048 1232                     l1144 116A                     l1152 11BC  
                   l1058 1262                     l1066 12B6                     l1082 148C  
                   l1146 1184                     l1138 111C                     l1154 120A  
                   l1068 12D8                     l1148 119E                     l1078 1460  
                   l1192 1374                     l1184 1334                     l1362 11D4  
                   l1364 1202                     l1196 13A8                     l1288 157A  
                   STR_1 1021                     STR_2 105A                     STR_3 1087  
                   STR_4 1092                     STR_5 10C9                     STR_6 1001  
                   STR_7 10CC                     STR_8 1012                     STR_9 104C  
                   _LATB 000F8A                     _LATC 000F8B                     _LATD 000F8C  
                   _main 157A             println@F3037 0080                     fsr0h 000FEA  
                   fsr1h 000FE2                     indf0 000FEF                     fsr2h 000FDA  
                   fsr0l 000FE9                     indf2 000FDF                     fsr1l 000FE1  
                   fsr2l 000FD9                     btemp 0070                     prodh 000FF4  
                   prodl 000FF3                     start 000E         simulateSort@stop 004C  
          __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000             ___param_bank 000000  
                  ?_main 00A9                    STR_10 1030                    STR_11 10BF  
                  STR_20 1066                    STR_12 103E                    STR_21 10CE  
                  STR_13 10C6                    STR_22 10A7                    STR_14 1071  
                  STR_15 10C7                    STR_23 10B8                    STR_24 10B1  
                  STR_16 109D                    STR_17 10C7                    STR_18 107C  
                  STR_19 10C7                    i2l116 1408                    _PORTB 000F81  
                  _TRISB 000F93                    _TRISC 000F94                    _TRISD 000F95  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000          __end_of_lcdInst 16C8  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000          __end_of_getTime 16B0  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
        __end_of_initLCD 1608           __CFG_EBTRB$OFF 000000                    _putch 16B0  
                  pclath 000FFA                    tablat 000FF5          __end_of_println 14C2  
                  plusw1 000FE3                    plusw2 000FDB                    status 000FD8  
         __CFG_PBADEN$ON 000000          __initialization 1608             __end_of_main 15C2  
         mainloop@sorted 005C                   ??_main 0068            __activetblptr 000003  
          println@output 0021                   _ADCON0 000FC2                   _ADCON1 000FC1  
                 ?_putch 0001                   _INT1IF 007F80        mainloop@smallNose 0054  
         __CFG_XINST$OFF 000000    __end_of_captureKeypad 169E           __CFG_STVREN$ON 000000  
       __end_of_mainloop 13C0                   clear_0 162E        mainloop@startTime 0064  
          main@smallNose 00B0                ??_lcdInst 0012                   _printf 1218  
              ??_getTime 0012                ??_initLCD 0013         __end_of_showInfo 1218  
           __mediumconst 0000       simulateSort@keypad 0050                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                ??_println 001F  
             __accesstop 0080  __end_of__initialization 1634            ___rparam_used 000001  
         __pcstackCOMRAM 0001             __pidataBANK0 163E          mainloop@bigNose 0052  
          __end_of_putch 16BC             mainloop@stop 0066       __size_of_lcdNibble 0056  
                ??_putch 0012                  ?_printf 0013                ?_mainloop 0052  
      __end_of_lcdNibble 157A                  __Hparam 0000                  __Lparam 0000  
              ?_showInfo 004C             __psmallconst 1000                  __pcinit 1608  
                __ramtop 1000               _initialize 1668                  _lcdInst 16BC  
                __ptext0 157A                  __ptext1 12F4                  __ptext2 14C2  
                __ptext3 10D2                  _getTime 169E                  __ptext4 1444  
                __ptext5 1218                  __ptext6 16B0                  __ptext7 1686  
                __ptext8 169E                  __ptext9 1668          __size_of_printf 00DC  
                _initLCD 15C2               _keypressed 0008                  _println 1444  
         __pintcode_body 13C0     end_of_initialization 1634               ??_mainloop 0056  
                int_func 13C0               ??_showInfo 004E                  printf@c 001A  
                printf@f 0013                  postdec1 000FE5                  postdec2 000FDD  
                postinc0 000FEE                  postinc2 000FDE                _PORTBbits 000F81  
          ?_simulateSort 004C              println@data 001D            mainloop@F3171 0068  
            ?_initialize 0001           __end_of_printf 12F4           ??_simulateSort 004E  
    start_initialization 1608              ?_keypressed 0001               mainloop@C9 005A  
             mainloop@AA 0058   __size_of_captureKeypad 0018              __pdataBANK0 0080  
       __CFG_LPT1OSC$OFF 000000                 ??_printf 0017              __pbssCOMRAM 0068  
          __pcstackBANK0 00A9      __size_of_initialize 001E        __size_of_mainloop 00CC  
      __CFG_CCP2MX$PORTC 000000            _captureKeypad 1686      __size_of_keypressed 143C  
              __pintcode 0008                _lcdNibble 1524        __size_of_showInfo 0146  
               ?_lcdInst 0001                 ?_getTime 0010                 ?_initLCD 0001  
            __smallconst 1000                 ?_println 001D           __size_of_putch 000C  
               _LATDbits 000F8C     __end_of_simulateSort 1524           ?_captureKeypad 0010  
       __CFG_WDTPS$32768 000000               ?_lcdNibble 0001            lcdNibble@data 0011  
             printf@flag 0017            lcdNibble@temp 0010    captureKeypad@keypress 0012  
              copy_data0 161C       keypressed@keypress 000F                 __Hrparam 0000  
               __Lrparam 0000       __CFG_BOREN$SBORDIS 000000             ??_initialize 0014  
       __size_of_lcdInst 000C         __size_of_getTime 0012         __size_of_initLCD 0046  
           ??_keypressed 0001                 __ptext10 15C2                 __ptext11 16BC  
               __ptext12 1524         __size_of_println 007E                 _mainloop 12F4  
          __size_of_main 0048       __end_of_initialize 1686          ??_captureKeypad 0012  
               _showInfo 10D2              ??_lcdNibble 0010       __end_of_keypressed 1444  
               int$flags 0070                 main@argc 00A9                 main@argv 00AB  
              putch@data 0012               _INTCONbits 000FF2                 intlevel2 0000  
  __size_of_simulateSort 0062                 printf@ap 0018                 printf@cp 001B  
               println@i 004A              lcdInst@data 0012             showInfo@type 004C  
           _simulateSort 14C2              getTime@time 0012  

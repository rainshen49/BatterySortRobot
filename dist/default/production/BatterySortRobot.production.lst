

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Feb 06 17:50:08 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    45                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    46  0000                     
    47                           ; Version 1.41
    48                           ; Generated 25/01/2017 GMT
    49                           ; 
    50                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC18F4620 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     
    82                           	psect	idataBANK1
    83  001F0E                     __pidataBANK1:
    84                           	opt stack 0
    85                           
    86                           ;initializer for println@F3048
    87  001F0E  20                 	db	32
    88  001F0F  20                 	db	32
    89  001F10  20                 	db	32
    90  001F11  20                 	db	32
    91  001F12  20                 	db	32
    92  001F13  20                 	db	32
    93  001F14  20                 	db	32
    94  001F15  20                 	db	32
    95  001F16  20                 	db	32
    96  001F17  20                 	db	32
    97  001F18  20                 	db	32
    98  001F19  20                 	db	32
    99  001F1A  20                 	db	32
   100  001F1B  20                 	db	32
   101  001F1C  20                 	db	32
   102  001F1D  20                 	db	32
   103  001F1E  20                 	db	32
   104  001F1F  20                 	db	32
   105  001F20  20                 	db	32
   106  001F21  20                 	db	32
   107  001F22  20                 	db	32
   108  001F23  20                 	db	32
   109  001F24  20                 	db	32
   110  001F25  20                 	db	32
   111  001F26  20                 	db	32
   112  001F27  20                 	db	32
   113  001F28  20                 	db	32
   114  001F29  20                 	db	32
   115  001F2A  20                 	db	32
   116  001F2B  20                 	db	32
   117  001F2C  20                 	db	32
   118  001F2D  20                 	db	32
   119  001F2E  20                 	db	32
   120  001F2F  20                 	db	32
   121  001F30  20                 	db	32
   122  001F31  20                 	db	32
   123  001F32  20                 	db	32
   124  001F33  20                 	db	32
   125  001F34  20                 	db	32
   126  001F35  20                 	db	32
   127  001F36  00                 	db	0
   128                           
   129                           	psect	smallconst
   130  001000                     __psmallconst:
   131                           	opt stack 0
   132  001000  00                 	db	0
   133  001001                     _dpowers:
   134                           	opt stack 0
   135  001001  0001               	dw	1
   136  001003  000A               	dw	10
   137  001005  0064               	dw	100
   138  001007  03E8               	dw	1000
   139  001009  2710               	dw	10000
   140  00100B                     __end_of_dpowers:
   141                           	opt stack 0
   142  0000                     _PORTB	set	3969
   143  0000                     _PORTBbits	set	3969
   144  0000                     _LATD	set	3980
   145  0000                     _LATDbits	set	3980
   146  0000                     _INTCONbits	set	4082
   147  0000                     _ADCON1	set	4033
   148  0000                     _ADCON0	set	4034
   149  0000                     _LATC	set	3979
   150  0000                     _LATB	set	3978
   151  0000                     _TRISB	set	3987
   152  0000                     _TRISD	set	3989
   153  0000                     _TRISC	set	3988
   154  0000                     _INT1IF	set	32640
   155  00100B                     STR_4:
   156  00100B  53                 	db	83	;'S'
   157  00100C  6F                 	db	111	;'o'
   158  00100D  72                 	db	114	;'r'
   159  00100E  74                 	db	116	;'t'
   160  00100F  69                 	db	105	;'i'
   161  001010  6E                 	db	110	;'n'
   162  001011  67                 	db	103	;'g'
   163  001012  20                 	db	32
   164  001013  43                 	db	67	;'C'
   165  001014  6F                 	db	111	;'o'
   166  001015  6D                 	db	109	;'m'
   167  001016  70                 	db	112	;'p'
   168  001017  6C                 	db	108	;'l'
   169  001018  65                 	db	101	;'e'
   170  001019  74                 	db	116	;'t'
   171  00101A  65                 	db	101	;'e'
   172  00101B  00                 	db	0
   173  00101C                     STR_6:
   174  00101C  50                 	db	80	;'P'
   175  00101D  72                 	db	114	;'r'
   176  00101E  65                 	db	101	;'e'
   177  00101F  73                 	db	115	;'s'
   178  001020  73                 	db	115	;'s'
   179  001021  20                 	db	32
   180  001022  61                 	db	97	;'a'
   181  001023  20                 	db	32
   182  001024  6E                 	db	110	;'n'
   183  001025  75                 	db	117	;'u'
   184  001026  6D                 	db	109	;'m'
   185  001027  62                 	db	98	;'b'
   186  001028  65                 	db	101	;'e'
   187  001029  72                 	db	114	;'r'
   188  00102A  00                 	db	0
   189  00102B                     STR_8:
   190  00102B  54                 	db	84	;'T'
   191  00102C  69                 	db	105	;'i'
   192  00102D  6D                 	db	109	;'m'
   193  00102E  65                 	db	101	;'e'
   194  00102F  20                 	db	32
   195  001030  45                 	db	69	;'E'
   196  001031  6C                 	db	108	;'l'
   197  001032  61                 	db	97	;'a'
   198  001033  70                 	db	112	;'p'
   199  001034  73                 	db	115	;'s'
   200  001035  65                 	db	101	;'e'
   201  001036  64                 	db	100	;'d'
   202  001037  3A                 	db	58	;':'
   203  001038  00                 	db	0
   204  001039                     STR_10:
   205  001039  54                 	db	84	;'T'
   206  00103A  6F                 	db	111	;'o'
   207  00103B  74                 	db	116	;'t'
   208  00103C  61                 	db	97	;'a'
   209  00103D  6C                 	db	108	;'l'
   210  00103E  20                 	db	32
   211  00103F  53                 	db	83	;'S'
   212  001040  6F                 	db	111	;'o'
   213  001041  72                 	db	114	;'r'
   214  001042  74                 	db	116	;'t'
   215  001043  65                 	db	101	;'e'
   216  001044  64                 	db	100	;'d'
   217  001045  3A                 	db	58	;':'
   218  001046  00                 	db	0
   219  001047                     STR_7:
   220  001047  46                 	db	70	;'F'
   221  001048  6F                 	db	111	;'o'
   222  001049  72                 	db	114	;'r'
   223  00104A  20                 	db	32
   224  00104B  6D                 	db	109	;'m'
   225  00104C  6F                 	db	111	;'o'
   226  00104D  72                 	db	114	;'r'
   227  00104E  65                 	db	101	;'e'
   228  00104F  20                 	db	32
   229  001050  69                 	db	105	;'i'
   230  001051  6E                 	db	110	;'n'
   231  001052  66                 	db	102	;'f'
   232  001053  6F                 	db	111	;'o'
   233  001054  00                 	db	0
   234  001055                     STR_11:
   235  001055  25                 	db	37
   236  001056  64                 	db	100	;'d'
   237  001057  20                 	db	32
   238  001058  62                 	db	98	;'b'
   239  001059  61                 	db	97	;'a'
   240  00105A  74                 	db	116	;'t'
   241  00105B  74                 	db	116	;'t'
   242  00105C  65                 	db	101	;'e'
   243  00105D  72                 	db	114	;'r'
   244  00105E  69                 	db	105	;'i'
   245  00105F  65                 	db	101	;'e'
   246  001060  73                 	db	115	;'s'
   247  001061  00                 	db	0
   248  001062                     STR_18:
   249  001062  55                 	db	85	;'U'
   250  001063  6E                 	db	110	;'n'
   251  001064  63                 	db	99	;'c'
   252  001065  68                 	db	104	;'h'
   253  001066  61                 	db	97	;'a'
   254  001067  72                 	db	114	;'r'
   255  001068  67                 	db	103	;'g'
   256  001069  65                 	db	101	;'e'
   257  00106A  64                 	db	100	;'d'
   258  00106B  3A                 	db	58	;':'
   259  00106C  00                 	db	0
   260  00106D                     STR_12:
   261  00106D  41                 	db	65	;'A'
   262  00106E  41                 	db	65	;'A'
   263  00106F  20                 	db	32
   264  001070  53                 	db	83	;'S'
   265  001071  6F                 	db	111	;'o'
   266  001072  72                 	db	114	;'r'
   267  001073  74                 	db	116	;'t'
   268  001074  65                 	db	101	;'e'
   269  001075  64                 	db	100	;'d'
   270  001076  3A                 	db	58	;':'
   271  001077  00                 	db	0
   272  001078                     STR_16:
   273  001078  39                 	db	57	;'9'
   274  001079  56                 	db	86	;'V'
   275  00107A  20                 	db	32
   276  00107B  53                 	db	83	;'S'
   277  00107C  6F                 	db	111	;'o'
   278  00107D  72                 	db	114	;'r'
   279  00107E  74                 	db	116	;'t'
   280  00107F  65                 	db	101	;'e'
   281  001080  64                 	db	100	;'d'
   282  001081  3A                 	db	58	;':'
   283  001082  00                 	db	0
   284  001083                     STR_9:
   285  001083  25                 	db	37
   286  001084  64                 	db	100	;'d'
   287  001085  20                 	db	32
   288  001086  73                 	db	115	;'s'
   289  001087  65                 	db	101	;'e'
   290  001088  63                 	db	99	;'c'
   291  001089  6F                 	db	111	;'o'
   292  00108A  6E                 	db	110	;'n'
   293  00108B  64                 	db	100	;'d'
   294  00108C  73                 	db	115	;'s'
   295  00108D  00                 	db	0
   296  00108E                     STR_1:
   297  00108E  53                 	db	83	;'S'
   298  00108F  6F                 	db	111	;'o'
   299  001090  72                 	db	114	;'r'
   300  001091  74                 	db	116	;'t'
   301  001092  69                 	db	105	;'i'
   302  001093  6E                 	db	110	;'n'
   303  001094  67                 	db	103	;'g'
   304  001095  2E                 	db	46
   305  001096  2E                 	db	46
   306  001097  2E                 	db	46
   307  001098  00                 	db	0
   308  001099                     STR_14:
   309  001099  43                 	db	67	;'C'
   310  00109A  20                 	db	32
   311  00109B  53                 	db	83	;'S'
   312  00109C  6F                 	db	111	;'o'
   313  00109D  72                 	db	114	;'r'
   314  00109E  74                 	db	116	;'t'
   315  00109F  65                 	db	101	;'e'
   316  0010A0  64                 	db	100	;'d'
   317  0010A1  3A                 	db	58	;':'
   318  0010A2  00                 	db	0
   319  0010A3                     STR_20:
   320  0010A3  45                 	db	69	;'E'
   321  0010A4  6D                 	db	109	;'m'
   322  0010A5  65                 	db	101	;'e'
   323  0010A6  72                 	db	114	;'r'
   324  0010A7  67                 	db	103	;'g'
   325  0010A8  65                 	db	101	;'e'
   326  0010A9  6E                 	db	110	;'n'
   327  0010AA  63                 	db	99	;'c'
   328  0010AB  79                 	db	121	;'y'
   329  0010AC  00                 	db	0
   330  0010AD                     STR_2:
   331  0010AD  57                 	db	87	;'W'
   332  0010AE  65                 	db	101	;'e'
   333  0010AF  6C                 	db	108	;'l'
   334  0010B0  63                 	db	99	;'c'
   335  0010B1  6F                 	db	111	;'o'
   336  0010B2  6D                 	db	109	;'m'
   337  0010B3  65                 	db	101	;'e'
   338  0010B4  21                 	db	33
   339  0010B5  00                 	db	0
   340  0010B6                     STR_21:
   341  0010B6  28                 	db	40
   342  0010B7  6E                 	db	110	;'n'
   343  0010B8  75                 	db	117	;'u'
   344  0010B9  6C                 	db	108	;'l'
   345  0010BA  6C                 	db	108	;'l'
   346  0010BB  29                 	db	41
   347  0010BC  00                 	db	0
   348  0010BD                     STR_13:
   349  0010BD  25                 	db	37
   350  0010BE  64                 	db	100	;'d'
   351  0010BF  00                 	db	0
   352  0010C0                     STR_3:
   353  0010C0  25                 	db	37
   354  0010C1  73                 	db	115	;'s'
   355  0010C2  00                 	db	0
   356  0010C3                     STR_5:
   357  0010C3  20                 	db	32
   358  0010C4  00                 	db	0
   359  0000                     
   360                           ; #config settings
   361  0010C5  00                 	db	0	; dummy byte at the end
   362  0000                     
   363                           	psect	cinit
   364  001ED8                     __pcinit:
   365                           	opt stack 0
   366  001ED8                     start_initialization:
   367                           	opt stack 0
   368  001ED8                     __initialization:
   369                           	opt stack 0
   370                           
   371                           ; Initialize objects allocated to BANK1 (41 bytes)
   372                           ; load TBLPTR registers with __pidataBANK1
   373  001ED8  0E0E               	movlw	low __pidataBANK1
   374  001EDA  6EF6               	movwf	tblptrl,c
   375  001EDC  0E1F               	movlw	high __pidataBANK1
   376  001EDE  6EF7               	movwf	tblptrh,c
   377  001EE0  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   378  001EE2  6EF8               	movwf	tblptru,c
   379  001EE4  EE01  F000         	lfsr	0,__pdataBANK1
   380  001EE8  EE10 F029          	lfsr	1,41
   381  001EEC                     copy_data0:
   382  001EEC  0009               	tblrd		*+
   383  001EEE  CFF5 FFEE          	movff	tablat,postinc0
   384  001EF2  50E5               	movf	postdec1,w,c
   385  001EF4  50E1               	movf	fsr1l,w,c
   386  001EF6  E1FA               	bnz	copy_data0
   387                           
   388                           ; Clear objects allocated to BANK0 (8 bytes)
   389  001EF8  EE00  F0F7         	lfsr	0,__pbssBANK0
   390  001EFC  0E08               	movlw	8
   391  001EFE                     clear_0:
   392  001EFE  6AEE               	clrf	postinc0,c
   393  001F00  06E8               	decf	wreg,f,c
   394  001F02  E1FD               	bnz	clear_0
   395  001F04                     end_of_initialization:
   396                           	opt stack 0
   397  001F04                     __end_of__initialization:
   398                           	opt stack 0
   399  001F04  9059               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   400  001F06  9259               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   401  001F08  0100               	movlb	0
   402  001F0A  EFBB  F00C         	goto	_main	;jump to C main() function
   403                           tblptru	equ	0xFF8
   404                           tblptrh	equ	0xFF7
   405                           tblptrl	equ	0xFF6
   406                           tablat	equ	0xFF5
   407                           postinc0	equ	0xFEE
   408                           wreg	equ	0xFE8
   409                           postdec1	equ	0xFE5
   410                           fsr1l	equ	0xFE1
   411                           
   412                           	psect	bssBANK0
   413  0000F7                     __pbssBANK0:
   414                           	opt stack 0
   415  0000F7                     mainloop@F3174:
   416                           	opt stack 0
   417  0000F7                     	ds	8
   418                           tblptru	equ	0xFF8
   419                           tblptrh	equ	0xFF7
   420                           tblptrl	equ	0xFF6
   421                           tablat	equ	0xFF5
   422                           postinc0	equ	0xFEE
   423                           wreg	equ	0xFE8
   424                           postdec1	equ	0xFE5
   425                           fsr1l	equ	0xFE1
   426                           
   427                           	psect	dataBANK1
   428  000100                     __pdataBANK1:
   429                           	opt stack 0
   430  000100                     println@F3048:
   431                           	opt stack 0
   432  000100                     	ds	41
   433                           tblptru	equ	0xFF8
   434                           tblptrh	equ	0xFF7
   435                           tblptrl	equ	0xFF6
   436                           tablat	equ	0xFF5
   437                           postinc0	equ	0xFEE
   438                           wreg	equ	0xFE8
   439                           postdec1	equ	0xFE5
   440                           fsr1l	equ	0xFE1
   441                           
   442                           	psect	cstackBANK0
   443  000080                     __pcstackBANK0:
   444                           	opt stack 0
   445  000080                     ?_getTime:
   446                           	opt stack 0
   447  000080                     ?_captureKeypad:
   448                           	opt stack 0
   449  000080                     ?_AD:
   450  000080                     ?___lwdiv:
   451                           	opt stack 0
   452  000080                     lcdNibble@temp:
   453                           	opt stack 0
   454  000080                     AD@pin:
   455                           	opt stack 0
   456  000080                     moveBigNose@prev:
   457                           	opt stack 0
   458  000080                     moveSmallNose@prev:
   459                           	opt stack 0
   460  000080                     ___lwdiv@dividend:
   461                           	opt stack 0
   462                           
   463                           ; 2 bytes @ 0x0
   464  000080                     	ds	1
   465  000081                     lcdNibble@data:
   466                           	opt stack 0
   467                           
   468                           ; 1 bytes @ 0x1
   469  000081                     	ds	1
   470  000082                     ?_checkAA:
   471                           	opt stack 0
   472  000082                     ?_checkC9V:
   473                           	opt stack 0
   474  000082                     lcdInst@data:
   475                           	opt stack 0
   476  000082                     putch@data:
   477                           	opt stack 0
   478  000082                     captureKeypad@keypress:
   479                           	opt stack 0
   480  000082                     getTime@time:
   481                           	opt stack 0
   482  000082                     moveBigNose@next:
   483                           	opt stack 0
   484  000082                     moveSmallNose@next:
   485                           	opt stack 0
   486  000082                     ___lwdiv@divisor:
   487                           	opt stack 0
   488                           
   489                           ; 2 bytes @ 0x2
   490  000082                     	ds	1
   491  000083                     ??_initLCD:
   492                           
   493                           ; 1 bytes @ 0x3
   494  000083                     	ds	1
   495  000084                     ??_moveSmallNose:
   496  000084                     ??_moveBigNose:
   497  000084                     checkC9V@chargedC:
   498                           	opt stack 0
   499  000084                     ___lwdiv@quotient:
   500                           	opt stack 0
   501                           
   502                           ; 2 bytes @ 0x4
   503  000084                     	ds	2
   504  000086                     ___lwdiv@counter:
   505                           	opt stack 0
   506  000086                     checkC9V@charged9:
   507                           	opt stack 0
   508                           
   509                           ; 2 bytes @ 0x6
   510  000086                     	ds	1
   511  000087                     ?___lwmod:
   512                           	opt stack 0
   513  000087                     ___lwmod@dividend:
   514                           	opt stack 0
   515                           
   516                           ; 2 bytes @ 0x7
   517  000087                     	ds	2
   518  000089                     ___lwmod@divisor:
   519                           	opt stack 0
   520                           
   521                           ; 2 bytes @ 0x9
   522  000089                     	ds	2
   523  00008B                     ___lwmod@counter:
   524                           	opt stack 0
   525                           
   526                           ; 1 bytes @ 0xB
   527  00008B                     	ds	1
   528  00008C                     ?_printf:
   529                           	opt stack 0
   530  00008C                     printf@f:
   531                           	opt stack 0
   532                           
   533                           ; 2 bytes @ 0xC
   534  00008C                     	ds	4
   535  000090                     ??_printf:
   536                           
   537                           ; 1 bytes @ 0x10
   538  000090                     	ds	1
   539  000091                     printf@flag:
   540                           	opt stack 0
   541                           
   542                           ; 1 bytes @ 0x11
   543  000091                     	ds	1
   544  000092                     printf@prec:
   545                           	opt stack 0
   546                           
   547                           ; 1 bytes @ 0x12
   548  000092                     	ds	1
   549  000093                     printf@ap:
   550                           	opt stack 0
   551                           
   552                           ; 2 bytes @ 0x13
   553  000093                     	ds	2
   554  000095                     printf@cp:
   555                           	opt stack 0
   556                           
   557                           ; 2 bytes @ 0x15
   558  000095                     	ds	2
   559  000097                     printf@val:
   560                           	opt stack 0
   561                           
   562                           ; 2 bytes @ 0x17
   563  000097                     	ds	2
   564  000099                     printf@c:
   565                           	opt stack 0
   566                           
   567                           ; 1 bytes @ 0x19
   568  000099                     	ds	1
   569  00009A                     println@data:
   570                           	opt stack 0
   571                           
   572                           ; 2 bytes @ 0x1A
   573  00009A                     	ds	2
   574  00009C                     ??_println:
   575                           
   576                           ; 1 bytes @ 0x1C
   577  00009C                     	ds	2
   578  00009E                     println@output:
   579                           	opt stack 0
   580                           
   581                           ; 41 bytes @ 0x1E
   582  00009E                     	ds	41
   583  0000C7                     println@i:
   584                           	opt stack 0
   585                           
   586                           ; 2 bytes @ 0x47
   587  0000C7                     	ds	2
   588  0000C9                     showInfo@time:
   589                           	opt stack 0
   590                           
   591                           ; 2 bytes @ 0x49
   592  0000C9                     	ds	2
   593  0000CB                     showInfo@sorted:
   594                           	opt stack 0
   595                           
   596                           ; 2 bytes @ 0x4B
   597  0000CB                     	ds	2
   598  0000CD                     ??_showInfo:
   599                           
   600                           ; 1 bytes @ 0x4D
   601  0000CD                     	ds	8
   602  0000D5                     showInfo@type:
   603                           	opt stack 0
   604                           
   605                           ; 2 bytes @ 0x55
   606  0000D5                     	ds	2
   607  0000D7                     mainloop@bigNose:
   608                           	opt stack 0
   609                           
   610                           ; 2 bytes @ 0x57
   611  0000D7                     	ds	2
   612  0000D9                     mainloop@smallNose:
   613                           	opt stack 0
   614                           
   615                           ; 2 bytes @ 0x59
   616  0000D9                     	ds	2
   617  0000DB                     ??_mainloop:
   618                           
   619                           ; 1 bytes @ 0x5B
   620  0000DB                     	ds	2
   621  0000DD                     mainloop@stop:
   622                           	opt stack 0
   623                           
   624                           ; 2 bytes @ 0x5D
   625  0000DD                     	ds	2
   626  0000DF                     _mainloop$147:
   627                           	opt stack 0
   628                           
   629                           ; 1 bytes @ 0x5F
   630  0000DF                     	ds	1
   631  0000E0                     mainloop@startTime:
   632                           	opt stack 0
   633                           
   634                           ; 2 bytes @ 0x60
   635  0000E0                     	ds	2
   636  0000E2                     mainloop@sorted:
   637                           	opt stack 0
   638                           
   639                           ; 8 bytes @ 0x62
   640  0000E2                     	ds	8
   641  0000EA                     mainloop@AA:
   642                           	opt stack 0
   643                           
   644                           ; 2 bytes @ 0x6A
   645  0000EA                     	ds	2
   646  0000EC                     mainloop@C9:
   647                           	opt stack 0
   648                           
   649                           ; 2 bytes @ 0x6C
   650  0000EC                     	ds	2
   651  0000EE                     
   652                           ; 2 bytes @ 0x6E
   653  0000EE                     	ds	2
   654  0000F0                     
   655                           ; 3 bytes @ 0x70
   656  0000F0                     	ds	3
   657  0000F3                     main@bigNose:
   658                           	opt stack 0
   659                           
   660                           ; 2 bytes @ 0x73
   661  0000F3                     	ds	2
   662  0000F5                     main@smallNose:
   663                           	opt stack 0
   664                           
   665                           ; 2 bytes @ 0x75
   666  0000F5                     	ds	2
   667                           tblptru	equ	0xFF8
   668                           tblptrh	equ	0xFF7
   669                           tblptrl	equ	0xFF6
   670                           tablat	equ	0xFF5
   671                           postinc0	equ	0xFEE
   672                           wreg	equ	0xFE8
   673                           postdec1	equ	0xFE5
   674                           fsr1l	equ	0xFE1
   675                           
   676                           	psect	cstackCOMRAM
   677  000001                     __pcstackCOMRAM:
   678                           	opt stack 0
   679  000001                     ?i2___lwdiv:
   680                           	opt stack 0
   681  000001                     i2lcdNibble@temp:
   682                           	opt stack 0
   683  000001                     i2___lwdiv@dividend:
   684                           	opt stack 0
   685                           
   686                           ; 2 bytes @ 0x0
   687  000001                     	ds	1
   688  000002                     i2lcdNibble@data:
   689                           	opt stack 0
   690                           
   691                           ; 1 bytes @ 0x1
   692  000002                     	ds	1
   693  000003                     i2putch@data:
   694                           	opt stack 0
   695  000003                     i2___lwdiv@divisor:
   696                           	opt stack 0
   697                           
   698                           ; 2 bytes @ 0x2
   699  000003                     	ds	2
   700  000005                     i2___lwdiv@quotient:
   701                           	opt stack 0
   702                           
   703                           ; 2 bytes @ 0x4
   704  000005                     	ds	2
   705  000007                     i2___lwdiv@counter:
   706                           	opt stack 0
   707                           
   708                           ; 1 bytes @ 0x6
   709  000007                     	ds	1
   710  000008                     ?i2___lwmod:
   711                           	opt stack 0
   712  000008                     i2___lwmod@dividend:
   713                           	opt stack 0
   714                           
   715                           ; 2 bytes @ 0x7
   716  000008                     	ds	2
   717  00000A                     i2___lwmod@divisor:
   718                           	opt stack 0
   719                           
   720                           ; 2 bytes @ 0x9
   721  00000A                     	ds	2
   722  00000C                     i2___lwmod@counter:
   723                           	opt stack 0
   724                           
   725                           ; 1 bytes @ 0xB
   726  00000C                     	ds	1
   727  00000D                     ?i2_printf:
   728                           	opt stack 0
   729  00000D                     i2printf@f:
   730                           	opt stack 0
   731                           
   732                           ; 2 bytes @ 0xC
   733  00000D                     	ds	4
   734  000011                     ??i2_printf:
   735                           
   736                           ; 1 bytes @ 0x10
   737  000011                     	ds	1
   738  000012                     i2printf@flag:
   739                           	opt stack 0
   740                           
   741                           ; 1 bytes @ 0x11
   742  000012                     	ds	1
   743  000013                     i2printf@prec:
   744                           	opt stack 0
   745                           
   746                           ; 1 bytes @ 0x12
   747  000013                     	ds	1
   748  000014                     i2printf@ap:
   749                           	opt stack 0
   750                           
   751                           ; 2 bytes @ 0x13
   752  000014                     	ds	2
   753  000016                     i2printf@cp:
   754                           	opt stack 0
   755                           
   756                           ; 2 bytes @ 0x15
   757  000016                     	ds	2
   758  000018                     i2printf@val:
   759                           	opt stack 0
   760                           
   761                           ; 2 bytes @ 0x17
   762  000018                     	ds	2
   763  00001A                     i2printf@c:
   764                           	opt stack 0
   765                           
   766                           ; 1 bytes @ 0x19
   767  00001A                     	ds	1
   768  00001B                     i2println@data:
   769                           	opt stack 0
   770                           
   771                           ; 2 bytes @ 0x1A
   772  00001B                     	ds	2
   773  00001D                     ??i2_println:
   774                           
   775                           ; 1 bytes @ 0x1C
   776  00001D                     	ds	2
   777  00001F                     i2println@output:
   778                           	opt stack 0
   779                           
   780                           ; 41 bytes @ 0x1E
   781  00001F                     	ds	41
   782  000048                     i2println@i:
   783                           	opt stack 0
   784                           
   785                           ; 2 bytes @ 0x47
   786  000048                     	ds	2
   787  00004A                     ??_keypressed:
   788  00004A                     
   789                           ; 1 bytes @ 0x49
   790  00004A                     	ds	14
   791  000058                     keypressed@keypress:
   792                           	opt stack 0
   793                           
   794                           ; 1 bytes @ 0x57
   795  000058                     	ds	1
   796                           tblptru	equ	0xFF8
   797                           tblptrh	equ	0xFF7
   798                           tblptrl	equ	0xFF6
   799                           tablat	equ	0xFF5
   800                           postinc0	equ	0xFEE
   801                           wreg	equ	0xFE8
   802                           postdec1	equ	0xFE5
   803                           fsr1l	equ	0xFE1
   804                           
   805 ;;
   806 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   807 ;;
   808 ;; *************** function _main *****************
   809 ;; Defined at:
   810 ;;		line 88 in file "main.c"
   811 ;; Parameters:    Size  Location     Type
   812 ;;  argc            2  110[BANK0 ] int 
   813 ;;  argv            3  112[BANK0 ] PTR PTR unsigned char 
   814 ;; Auto vars:     Size  Location     Type
   815 ;;  smallNose       2  117[BANK0 ] int 
   816 ;;  bigNose         2  115[BANK0 ] int 
   817 ;; Return value:  Size  Location     Type
   818 ;;                  2  110[BANK0 ] int 
   819 ;; Registers used:
   820 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   821 ;; Tracked objects:
   822 ;;		On entry : 0/0
   823 ;;		On exit  : 0/0
   824 ;;		Unchanged: 0/0
   825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   826 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   827 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   829 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   830 ;;Total ram usage:        9 bytes
   831 ;; Hardware stack levels required when called:   12
   832 ;; This function calls:
   833 ;;		_captureKeypad
   834 ;;		_initialize
   835 ;;		_mainloop
   836 ;;		_moveBigNose
   837 ;;		_moveSmallNose
   838 ;;		_println
   839 ;; This function is called by:
   840 ;;		Startup code after reset
   841 ;; This function uses a non-reentrant model
   842 ;;
   843                           
   844                           	psect	text0
   845  001976                     __ptext0:
   846                           	opt stack 0
   847  001976                     _main:
   848                           	opt stack 19
   849  001976                     
   850                           ;main.c: 90: initialize();
   851  001976  EC9C  F00F         	call	_initialize	;wreg free
   852                           
   853                           ;main.c: 92: println((unsigned char *) "Welcome!");
   854  00197A  0EAD               	movlw	low STR_2
   855  00197C  0100               	movlb	0	; () banked
   856  00197E  6F9A               	movwf	println@data& (0+255),b
   857  001980  0E10               	movlw	high STR_2
   858  001982  0100               	movlb	0	; () banked
   859  001984  6F9B               	movwf	(println@data+1)& (0+255),b
   860  001986  EC68  F00C         	call	_println	;wreg free
   861                           
   862                           ;main.c: 95: int bigNose = 0, smallNose = 0;
   863  00198A  0E00               	movlw	0
   864  00198C  0100               	movlb	0	; () banked
   865  00198E  6FF4               	movwf	(main@bigNose+1)& (0+255),b
   866  001990  0E00               	movlw	0
   867  001992  6FF3               	movwf	main@bigNose& (0+255),b
   868                           
   869                           ; BSR set to: 0
   870  001994  0E00               	movlw	0
   871  001996  0100               	movlb	0	; () banked
   872  001998  6FF6               	movwf	(main@smallNose+1)& (0+255),b
   873  00199A  0E00               	movlw	0
   874  00199C  6FF5               	movwf	main@smallNose& (0+255),b
   875                           
   876                           ; BSR set to: 0
   877                           ;main.c: 96: moveBigNose(&bigNose, 0);
   878  00199E  0EF3               	movlw	low main@bigNose
   879  0019A0  0100               	movlb	0	; () banked
   880  0019A2  6F80               	movwf	moveBigNose@prev& (0+255),b
   881  0019A4  0E00               	movlw	high main@bigNose
   882  0019A6  0100               	movlb	0	; () banked
   883  0019A8  6F81               	movwf	(moveBigNose@prev+1)& (0+255),b
   884  0019AA  0E00               	movlw	0
   885  0019AC  0100               	movlb	0	; () banked
   886  0019AE  6F83               	movwf	(moveBigNose@next+1)& (0+255),b
   887  0019B0  0E00               	movlw	0
   888  0019B2  6F82               	movwf	moveBigNose@next& (0+255),b
   889  0019B4  ECC2  F00D         	call	_moveBigNose	;wreg free
   890                           
   891                           ;main.c: 97: moveSmallNose(&smallNose, 0);
   892  0019B8  0EF5               	movlw	low main@smallNose
   893  0019BA  0100               	movlb	0	; () banked
   894  0019BC  6F80               	movwf	moveSmallNose@prev& (0+255),b
   895  0019BE  0E00               	movlw	high main@smallNose
   896  0019C0  0100               	movlb	0	; () banked
   897  0019C2  6F81               	movwf	(moveSmallNose@prev+1)& (0+255),b
   898  0019C4  0E00               	movlw	0
   899  0019C6  0100               	movlb	0	; () banked
   900  0019C8  6F83               	movwf	(moveSmallNose@next+1)& (0+255),b
   901  0019CA  0E00               	movlw	0
   902  0019CC  6F82               	movwf	moveSmallNose@next& (0+255),b
   903  0019CE  EC84  F00D         	call	_moveSmallNose	;wreg free
   904                           
   905                           ;main.c: 100: if (captureKeypad() == 15)
   906  0019D2  ECAB  F00F         	call	_captureKeypad	;wreg free
   907  0019D6  0E0F               	movlw	15
   908  0019D8  0100               	movlb	0	; () banked
   909  0019DA  1980               	xorwf	?_captureKeypad& (0+255),w,b
   910  0019DC  0100               	movlb	0	; () banked
   911  0019DE  1181               	iorwf	(?_captureKeypad+1)& (0+255),w,b
   912  0019E0  A4D8               	btfss	status,2,c
   913  0019E2  D7C9               	goto	l1791
   914                           
   915                           ; BSR set to: 0
   916                           ;main.c: 101: mainloop(&bigNose, &smallNose);
   917  0019E4  0EF3               	movlw	low main@bigNose
   918  0019E6  0100               	movlb	0	; () banked
   919  0019E8  6FD7               	movwf	mainloop@bigNose& (0+255),b
   920  0019EA  0E00               	movlw	high main@bigNose
   921  0019EC  0100               	movlb	0	; () banked
   922  0019EE  6FD8               	movwf	(mainloop@bigNose+1)& (0+255),b
   923  0019F0  0EF5               	movlw	low main@smallNose
   924  0019F2  0100               	movlb	0	; () banked
   925  0019F4  6FD9               	movwf	mainloop@smallNose& (0+255),b
   926  0019F6  0E00               	movlw	high main@smallNose
   927  0019F8  0100               	movlb	0	; () banked
   928  0019FA  6FDA               	movwf	(mainloop@smallNose+1)& (0+255),b
   929  0019FC  EC94  F00A         	call	_mainloop	;wreg free
   930  001A00  D7BA               	goto	l1791
   931  001A02                     __end_of_main:
   932                           	opt stack 0
   933                           tblptru	equ	0xFF8
   934                           tblptrh	equ	0xFF7
   935                           tblptrl	equ	0xFF6
   936                           tablat	equ	0xFF5
   937                           postinc0	equ	0xFEE
   938                           wreg	equ	0xFE8
   939                           postdec1	equ	0xFE5
   940                           fsr1l	equ	0xFE1
   941                           status	equ	0xFD8
   942                           
   943 ;; *************** function _mainloop *****************
   944 ;; Defined at:
   945 ;;		line 53 in file "main.c"
   946 ;; Parameters:    Size  Location     Type
   947 ;;  bigNose         2   87[BANK0 ] PTR int 
   948 ;;		 -> main@bigNose(2), 
   949 ;;  smallNose       2   89[BANK0 ] PTR int 
   950 ;;		 -> main@smallNose(2), 
   951 ;; Auto vars:     Size  Location     Type
   952 ;;  sorted          8   98[BANK0 ] int [4]
   953 ;;  C9              2  108[BANK0 ] int 
   954 ;;  AA              2  106[BANK0 ] int 
   955 ;;  startTime       2   96[BANK0 ] int 
   956 ;;  stop            2   93[BANK0 ] int 
   957 ;; Return value:  Size  Location     Type
   958 ;;                  1    wreg      void 
   959 ;; Registers used:
   960 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   961 ;; Tracked objects:
   962 ;;		On entry : 0/0
   963 ;;		On exit  : 0/0
   964 ;;		Unchanged: 0/0
   965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   966 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   967 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   968 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   969 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   970 ;;Total ram usage:       23 bytes
   971 ;; Hardware stack levels used:    1
   972 ;; Hardware stack levels required when called:   11
   973 ;; This function calls:
   974 ;;		_checkAA
   975 ;;		_checkC9V
   976 ;;		_getTime
   977 ;;		_moveBigNose
   978 ;;		_moveSmallNose
   979 ;;		_moveXMotors
   980 ;;		_println
   981 ;;		_showInfo
   982 ;;		_stopMoving
   983 ;; This function is called by:
   984 ;;		_main
   985 ;; This function uses a non-reentrant model
   986 ;;
   987                           
   988                           	psect	text1
   989  001528                     __ptext1:
   990                           	opt stack 0
   991  001528                     _mainloop:
   992                           	opt stack 19
   993                           
   994                           ;main.c: 54: println("Sorting...");
   995                           
   996                           ;incstack = 0
   997  001528  0E8E               	movlw	low STR_1
   998  00152A  0100               	movlb	0	; () banked
   999  00152C  6F9A               	movwf	println@data& (0+255),b
  1000  00152E  0E10               	movlw	high STR_1
  1001  001530  0100               	movlb	0	; () banked
  1002  001532  6F9B               	movwf	(println@data+1)& (0+255),b
  1003  001534  EC68  F00C         	call	_println	;wreg free
  1004                           
  1005                           ;main.c: 55: int stop = 0;
  1006  001538  0E00               	movlw	0
  1007  00153A  0100               	movlb	0	; () banked
  1008  00153C  6FDE               	movwf	(mainloop@stop+1)& (0+255),b
  1009  00153E  0E00               	movlw	0
  1010  001540  6FDD               	movwf	mainloop@stop& (0+255),b
  1011                           
  1012                           ; BSR set to: 0
  1013                           ;main.c: 56: int sorted[] = {0, 0, 0, 0};
  1014  001542  EE20  F0F7         	lfsr	2,mainloop@F3174
  1015  001546  EE10  F0E2         	lfsr	1,mainloop@sorted
  1016  00154A  0E07               	movlw	7
  1017  00154C                     u1111:
  1018  00154C  CFDB FFE3          	movff	plusw2,plusw1
  1019  001550  06E8               	decf	wreg,f,c
  1020  001552  E2FC               	bc	u1111
  1021                           
  1022                           ; BSR set to: 0
  1023                           ;main.c: 57: int startTime = getTime();
  1024  001554  ECCF  F00F         	call	_getTime	;wreg free
  1025  001558  C080  F0E0         	movff	?_getTime,mainloop@startTime
  1026  00155C  C081  F0E1         	movff	?_getTime+1,mainloop@startTime+1
  1027                           
  1028                           ;main.c: 58: int AA = 0;
  1029  001560  0E00               	movlw	0
  1030  001562  0100               	movlb	0	; () banked
  1031  001564  6FEB               	movwf	(mainloop@AA+1)& (0+255),b
  1032  001566  0E00               	movlw	0
  1033  001568  6FEA               	movwf	mainloop@AA& (0+255),b
  1034                           
  1035                           ; BSR set to: 0
  1036                           ;main.c: 59: int C9 = 0;
  1037  00156A  0E00               	movlw	0
  1038  00156C  0100               	movlb	0	; () banked
  1039  00156E  6FED               	movwf	(mainloop@C9+1)& (0+255),b
  1040  001570  0E00               	movlw	0
  1041  001572  6FEC               	movwf	mainloop@C9& (0+255),b
  1042                           
  1043                           ; BSR set to: 0
  1044                           ;main.c: 60: (INTCONbits.GIE = 1);
  1045  001574  8EF2               	bsf	intcon,7,c	;volatile
  1046                           
  1047                           ;main.c: 61: while (!stop) {
  1048  001576  D0A8               	goto	l1777
  1049  001578                     l1745:
  1050                           
  1051                           ; BSR set to: 0
  1052                           ;main.c: 62: moveSmallNose(smallNose, AA);
  1053  001578  C0D9  F080         	movff	mainloop@smallNose,moveSmallNose@prev
  1054  00157C  C0DA  F081         	movff	mainloop@smallNose+1,moveSmallNose@prev+1
  1055  001580  C0EA  F082         	movff	mainloop@AA,moveSmallNose@next
  1056  001584  C0EB  F083         	movff	mainloop@AA+1,moveSmallNose@next+1
  1057  001588  EC84  F00D         	call	_moveSmallNose	;wreg free
  1058                           
  1059                           ;main.c: 63: moveBigNose(bigNose, C9);
  1060  00158C  C0D7  F080         	movff	mainloop@bigNose,moveBigNose@prev
  1061  001590  C0D8  F081         	movff	mainloop@bigNose+1,moveBigNose@prev+1
  1062  001594  C0EC  F082         	movff	mainloop@C9,moveBigNose@next
  1063  001598  C0ED  F083         	movff	mainloop@C9+1,moveBigNose@next+1
  1064  00159C  ECC2  F00D         	call	_moveBigNose	;wreg free
  1065                           
  1066                           ;main.c: 64: moveXMotors();
  1067  0015A0  ECF7  F00F         	call	_moveXMotors	;wreg free
  1068                           
  1069                           ;main.c: 68: AA = checkAA();
  1070  0015A4  ECB9  F00F         	call	_checkAA	;wreg free
  1071  0015A8  C082  F0EA         	movff	?_checkAA,mainloop@AA
  1072  0015AC  C083  F0EB         	movff	?_checkAA+1,mainloop@AA+1
  1073                           
  1074                           ;main.c: 69: C9 = checkC9V();
  1075  0015B0  EC70  F00E         	call	_checkC9V	;wreg free
  1076  0015B4  C082  F0EC         	movff	?_checkC9V,mainloop@C9
  1077  0015B8  C083  F0ED         	movff	?_checkC9V+1,mainloop@C9+1
  1078                           
  1079                           ;main.c: 70: sorted[0] += AA;
  1080  0015BC  0100               	movlb	0	; () banked
  1081  0015BE  51EA               	movf	mainloop@AA& (0+255),w,b
  1082  0015C0  0100               	movlb	0	; () banked
  1083  0015C2  27E2               	addwf	mainloop@sorted& (0+255),f,b
  1084  0015C4  0100               	movlb	0	; () banked
  1085  0015C6  51EB               	movf	(mainloop@AA+1)& (0+255),w,b
  1086  0015C8  0100               	movlb	0	; () banked
  1087  0015CA  23E3               	addwfc	(mainloop@sorted+1)& (0+255),f,b
  1088                           
  1089                           ; BSR set to: 0
  1090                           ;main.c: 71: sorted[1] += C9 == 1;
  1091  0015CC  0100               	movlb	0	; () banked
  1092  0015CE  05EC               	decf	mainloop@C9& (0+255),w,b
  1093  0015D0  0100               	movlb	0	; () banked
  1094  0015D2  11ED               	iorwf	(mainloop@C9+1)& (0+255),w,b
  1095  0015D4  A4D8               	btfss	status,2,c
  1096  0015D6  D002               	goto	u1120
  1097  0015D8  0E01               	movlw	1
  1098  0015DA  D001               	goto	u1130
  1099  0015DC                     u1120:
  1100  0015DC  0E00               	movlw	0
  1101  0015DE                     u1130:
  1102  0015DE  0100               	movlb	0	; () banked
  1103  0015E0  27E4               	addwf	(mainloop@sorted+2)& (0+255),f,b
  1104  0015E2  0E00               	movlw	0
  1105  0015E4  23E5               	addwfc	(mainloop@sorted+3)& (0+255),f,b
  1106                           
  1107                           ; BSR set to: 0
  1108                           ;main.c: 72: sorted[2] += C9 == 2;
  1109  0015E6  0E02               	movlw	2
  1110  0015E8  0100               	movlb	0	; () banked
  1111  0015EA  19EC               	xorwf	mainloop@C9& (0+255),w,b
  1112  0015EC  0100               	movlb	0	; () banked
  1113  0015EE  11ED               	iorwf	(mainloop@C9+1)& (0+255),w,b
  1114  0015F0  A4D8               	btfss	status,2,c
  1115  0015F2  D002               	goto	u1140
  1116  0015F4  0E01               	movlw	1
  1117  0015F6  D001               	goto	u1150
  1118  0015F8                     u1140:
  1119  0015F8  0E00               	movlw	0
  1120  0015FA                     u1150:
  1121  0015FA  0100               	movlb	0	; () banked
  1122  0015FC  27E6               	addwf	(mainloop@sorted+4)& (0+255),f,b
  1123  0015FE  0E00               	movlw	0
  1124  001600  23E7               	addwfc	(mainloop@sorted+5)& (0+255),f,b
  1125                           
  1126                           ; BSR set to: 0
  1127                           ;main.c: 73: sorted[3] += AA == 0 && C9 == 0;
  1128  001602  0E00               	movlw	0
  1129  001604  0100               	movlb	0	; () banked
  1130  001606  6FDF               	movwf	_mainloop$147& (0+255),b
  1131                           
  1132                           ; BSR set to: 0
  1133  001608  0100               	movlb	0	; () banked
  1134  00160A  51EA               	movf	mainloop@AA& (0+255),w,b
  1135  00160C  0100               	movlb	0	; () banked
  1136  00160E  11EB               	iorwf	(mainloop@AA+1)& (0+255),w,b
  1137  001610  A4D8               	btfss	status,2,c
  1138  001612  D009               	goto	l1767
  1139                           
  1140                           ; BSR set to: 0
  1141  001614  0100               	movlb	0	; () banked
  1142  001616  51EC               	movf	mainloop@C9& (0+255),w,b
  1143  001618  0100               	movlb	0	; () banked
  1144  00161A  11ED               	iorwf	(mainloop@C9+1)& (0+255),w,b
  1145  00161C  A4D8               	btfss	status,2,c
  1146  00161E  D003               	goto	l1767
  1147                           
  1148                           ; BSR set to: 0
  1149  001620  0E01               	movlw	1
  1150  001622  0100               	movlb	0	; () banked
  1151  001624  6FDF               	movwf	_mainloop$147& (0+255),b
  1152  001626                     l1767:
  1153                           
  1154                           ; BSR set to: 0
  1155  001626  0100               	movlb	0	; () banked
  1156  001628  51DF               	movf	_mainloop$147& (0+255),w,b
  1157  00162A  0100               	movlb	0	; () banked
  1158  00162C  27E8               	addwf	(mainloop@sorted+6)& (0+255),f,b
  1159  00162E  0E00               	movlw	0
  1160  001630  23E9               	addwfc	(mainloop@sorted+7)& (0+255),f,b
  1161                           
  1162                           ; BSR set to: 0
  1163                           ;main.c: 74: if (sorted[0] + sorted[1] + sorted[2] + sorted[3] == 15) {
  1164  001632  0100               	movlb	0	; () banked
  1165  001634  51E6               	movf	(mainloop@sorted+4)& (0+255),w,b
  1166  001636  0100               	movlb	0	; () banked
  1167  001638  25E4               	addwf	(mainloop@sorted+2)& (0+255),w,b
  1168  00163A  0100               	movlb	0	; () banked
  1169  00163C  6FDB               	movwf	??_mainloop& (0+255),b
  1170  00163E  0100               	movlb	0	; () banked
  1171  001640  51E7               	movf	(mainloop@sorted+5)& (0+255),w,b
  1172  001642  0100               	movlb	0	; () banked
  1173  001644  21E5               	addwfc	(mainloop@sorted+3)& (0+255),w,b
  1174  001646  0100               	movlb	0	; () banked
  1175  001648  6FDC               	movwf	(??_mainloop+1)& (0+255),b
  1176  00164A  0100               	movlb	0	; () banked
  1177  00164C  51E8               	movf	(mainloop@sorted+6)& (0+255),w,b
  1178  00164E  0100               	movlb	0	; () banked
  1179  001650  27DB               	addwf	??_mainloop& (0+255),f,b
  1180  001652  0100               	movlb	0	; () banked
  1181  001654  51E9               	movf	(mainloop@sorted+7)& (0+255),w,b
  1182  001656  0100               	movlb	0	; () banked
  1183  001658  23DC               	addwfc	(??_mainloop+1)& (0+255),f,b
  1184  00165A  0100               	movlb	0	; () banked
  1185  00165C  51E2               	movf	mainloop@sorted& (0+255),w,b
  1186  00165E  0100               	movlb	0	; () banked
  1187  001660  27DB               	addwf	??_mainloop& (0+255),f,b
  1188  001662  0100               	movlb	0	; () banked
  1189  001664  51E3               	movf	(mainloop@sorted+1)& (0+255),w,b
  1190  001666  0100               	movlb	0	; () banked
  1191  001668  23DC               	addwfc	(??_mainloop+1)& (0+255),f,b
  1192  00166A  0E0F               	movlw	15
  1193  00166C  0100               	movlb	0	; () banked
  1194  00166E  19DB               	xorwf	??_mainloop& (0+255),w,b
  1195  001670  0100               	movlb	0	; () banked
  1196  001672  11DC               	iorwf	(??_mainloop+1)& (0+255),w,b
  1197  001674  A4D8               	btfss	status,2,c
  1198  001676  D005               	goto	l1773
  1199                           
  1200                           ; BSR set to: 0
  1201                           ;main.c: 75: stop = 1;
  1202  001678  0E00               	movlw	0
  1203  00167A  0100               	movlb	0	; () banked
  1204  00167C  6FDE               	movwf	(mainloop@stop+1)& (0+255),b
  1205  00167E  0E01               	movlw	1
  1206  001680  6FDD               	movwf	mainloop@stop& (0+255),b
  1207  001682                     l1773:
  1208                           
  1209                           ; BSR set to: 0
  1210                           ;main.c: 76: }
  1211                           ;main.c: 77: if (getTime() - startTime >= 180) {
  1212  001682  C0E0  F0DB         	movff	mainloop@startTime,??_mainloop
  1213  001686  C0E1  F0DC         	movff	mainloop@startTime+1,??_mainloop+1
  1214  00168A  0100               	movlb	0	; () banked
  1215  00168C  1FDB               	comf	??_mainloop& (0+255),f,b
  1216  00168E  1FDC               	comf	(??_mainloop+1)& (0+255),f,b
  1217  001690  4BDB               	infsnz	??_mainloop& (0+255),f,b
  1218  001692  2BDC               	incf	(??_mainloop+1)& (0+255),f,b
  1219  001694  ECCF  F00F         	call	_getTime	;wreg free
  1220  001698  0100               	movlb	0	; () banked
  1221  00169A  51DB               	movf	??_mainloop& (0+255),w,b
  1222  00169C  0100               	movlb	0	; () banked
  1223  00169E  2780               	addwf	?_getTime& (0+255),f,b
  1224  0016A0  0100               	movlb	0	; () banked
  1225  0016A2  51DC               	movf	(??_mainloop+1)& (0+255),w,b
  1226  0016A4  0100               	movlb	0	; () banked
  1227  0016A6  2381               	addwfc	(?_getTime+1)& (0+255),f,b
  1228  0016A8  0100               	movlb	0	; () banked
  1229  0016AA  BF81               	btfsc	(?_getTime+1)& (0+255),7,b
  1230  0016AC  D00D               	goto	l1777
  1231  0016AE  0100               	movlb	0	; () banked
  1232  0016B0  5181               	movf	(?_getTime+1)& (0+255),w,b
  1233  0016B2  E105               	bnz	u1190
  1234  0016B4  0EB4               	movlw	180
  1235  0016B6  0100               	movlb	0	; () banked
  1236  0016B8  5D80               	subwf	?_getTime& (0+255),w,b
  1237  0016BA  A0D8               	btfss	status,0,c
  1238  0016BC  D005               	goto	l1777
  1239  0016BE                     u1190:
  1240                           
  1241                           ; BSR set to: 0
  1242                           ;main.c: 78: stop = 1;
  1243  0016BE  0E00               	movlw	0
  1244  0016C0  0100               	movlb	0	; () banked
  1245  0016C2  6FDE               	movwf	(mainloop@stop+1)& (0+255),b
  1246  0016C4  0E01               	movlw	1
  1247  0016C6  6FDD               	movwf	mainloop@stop& (0+255),b
  1248  0016C8                     l1777:
  1249                           
  1250                           ; BSR set to: 0
  1251  0016C8  0100               	movlb	0	; () banked
  1252  0016CA  51DD               	movf	mainloop@stop& (0+255),w,b
  1253  0016CC  0100               	movlb	0	; () banked
  1254  0016CE  11DE               	iorwf	(mainloop@stop+1)& (0+255),w,b
  1255  0016D0  B4D8               	btfsc	status,2,c
  1256  0016D2  D752               	goto	l1745
  1257                           
  1258                           ; BSR set to: 0
  1259                           ;main.c: 79: }
  1260                           ;main.c: 80: }
  1261                           ;main.c: 81: (INTCONbits.GIE = 0);
  1262  0016D4  9EF2               	bcf	intcon,7,c	;volatile
  1263                           
  1264                           ; BSR set to: 0
  1265                           ;main.c: 83: showInfo(getTime() - startTime, sorted);
  1266  0016D6  C0E0  F0DB         	movff	mainloop@startTime,??_mainloop
  1267  0016DA  C0E1  F0DC         	movff	mainloop@startTime+1,??_mainloop+1
  1268  0016DE  0100               	movlb	0	; () banked
  1269  0016E0  1FDB               	comf	??_mainloop& (0+255),f,b
  1270  0016E2  1FDC               	comf	(??_mainloop+1)& (0+255),f,b
  1271  0016E4  4BDB               	infsnz	??_mainloop& (0+255),f,b
  1272  0016E6  2BDC               	incf	(??_mainloop+1)& (0+255),f,b
  1273  0016E8  ECCF  F00F         	call	_getTime	;wreg free
  1274  0016EC  0100               	movlb	0	; () banked
  1275  0016EE  51DB               	movf	??_mainloop& (0+255),w,b
  1276  0016F0  0100               	movlb	0	; () banked
  1277  0016F2  2580               	addwf	?_getTime& (0+255),w,b
  1278  0016F4  0100               	movlb	0	; () banked
  1279  0016F6  6FC9               	movwf	showInfo@time& (0+255),b
  1280  0016F8  0100               	movlb	0	; () banked
  1281  0016FA  51DC               	movf	(??_mainloop+1)& (0+255),w,b
  1282  0016FC  0100               	movlb	0	; () banked
  1283  0016FE  2181               	addwfc	(?_getTime+1)& (0+255),w,b
  1284  001700  0100               	movlb	0	; () banked
  1285  001702  6FCA               	movwf	(showInfo@time+1)& (0+255),b
  1286  001704  0EE2               	movlw	low mainloop@sorted
  1287  001706  0100               	movlb	0	; () banked
  1288  001708  6FCB               	movwf	showInfo@sorted& (0+255),b
  1289  00170A  0E00               	movlw	high mainloop@sorted
  1290  00170C  0100               	movlb	0	; () banked
  1291  00170E  6FCC               	movwf	(showInfo@sorted+1)& (0+255),b
  1292  001710  EC63  F008         	call	_showInfo	;wreg free
  1293                           
  1294                           ;main.c: 84: stopMoving();
  1295  001714  ECC5  F00F         	call	_stopMoving	;wreg free
  1296  001718  0012               	return	
  1297  00171A                     __end_of_mainloop:
  1298                           	opt stack 0
  1299                           tblptru	equ	0xFF8
  1300                           tblptrh	equ	0xFF7
  1301                           tblptrl	equ	0xFF6
  1302                           tablat	equ	0xFF5
  1303                           intcon	equ	0xFF2
  1304                           postinc0	equ	0xFEE
  1305                           wreg	equ	0xFE8
  1306                           postdec1	equ	0xFE5
  1307                           plusw1	equ	0xFE3
  1308                           fsr1l	equ	0xFE1
  1309                           plusw2	equ	0xFDB
  1310                           status	equ	0xFD8
  1311                           
  1312 ;; *************** function _stopMoving *****************
  1313 ;; Defined at:
  1314 ;;		line 117 in file "modules.c"
  1315 ;; Parameters:    Size  Location     Type
  1316 ;;		None
  1317 ;; Auto vars:     Size  Location     Type
  1318 ;;		None
  1319 ;; Return value:  Size  Location     Type
  1320 ;;                  1    wreg      void 
  1321 ;; Registers used:
  1322 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1323 ;; Tracked objects:
  1324 ;;		On entry : 0/0
  1325 ;;		On exit  : 0/0
  1326 ;;		Unchanged: 0/0
  1327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1331 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1332 ;;Total ram usage:        0 bytes
  1333 ;; Hardware stack levels used:    1
  1334 ;; Hardware stack levels required when called:   10
  1335 ;; This function calls:
  1336 ;;		_println
  1337 ;; This function is called by:
  1338 ;;		_mainloop
  1339 ;; This function uses a non-reentrant model
  1340 ;;
  1341                           
  1342                           	psect	text2
  1343  001F8A                     __ptext2:
  1344                           	opt stack 0
  1345  001F8A                     _stopMoving:
  1346                           	opt stack 19
  1347                           
  1348                           ;modules.c: 118: (INTCONbits.GIE = 0);
  1349                           
  1350                           ;incstack = 0
  1351  001F8A  9EF2               	bcf	intcon,7,c	;volatile
  1352                           
  1353                           ;modules.c: 119: println("Emergency");
  1354  001F8C  0EA3               	movlw	low STR_20
  1355  001F8E  0100               	movlb	0	; () banked
  1356  001F90  6F9A               	movwf	println@data& (0+255),b
  1357  001F92  0E10               	movlw	high STR_20
  1358  001F94  0100               	movlb	0	; () banked
  1359  001F96  6F9B               	movwf	(println@data+1)& (0+255),b
  1360  001F98  EC68  F00C         	call	_println	;wreg free
  1361  001F9C  0012               	return		;funcret
  1362  001F9E                     __end_of_stopMoving:
  1363                           	opt stack 0
  1364                           tblptru	equ	0xFF8
  1365                           tblptrh	equ	0xFF7
  1366                           tblptrl	equ	0xFF6
  1367                           tablat	equ	0xFF5
  1368                           intcon	equ	0xFF2
  1369                           postinc0	equ	0xFEE
  1370                           wreg	equ	0xFE8
  1371                           postdec1	equ	0xFE5
  1372                           plusw1	equ	0xFE3
  1373                           fsr1l	equ	0xFE1
  1374                           plusw2	equ	0xFDB
  1375                           status	equ	0xFD8
  1376                           
  1377 ;; *************** function _showInfo *****************
  1378 ;; Defined at:
  1379 ;;		line 35 in file "modules.c"
  1380 ;; Parameters:    Size  Location     Type
  1381 ;;  time            2   73[BANK0 ] unsigned int 
  1382 ;;  sorted          2   75[BANK0 ] PTR unsigned int 
  1383 ;;		 -> mainloop@sorted(8), 
  1384 ;; Auto vars:     Size  Location     Type
  1385 ;;  type            2   85[BANK0 ] int 
  1386 ;; Return value:  Size  Location     Type
  1387 ;;                  1    wreg      void 
  1388 ;; Registers used:
  1389 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1390 ;; Tracked objects:
  1391 ;;		On entry : 0/0
  1392 ;;		On exit  : 0/0
  1393 ;;		Unchanged: 0/0
  1394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1395 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1396 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1397 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1398 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1399 ;;Total ram usage:       14 bytes
  1400 ;; Hardware stack levels used:    1
  1401 ;; Hardware stack levels required when called:   10
  1402 ;; This function calls:
  1403 ;;		_printf
  1404 ;;		_println
  1405 ;; This function is called by:
  1406 ;;		_mainloop
  1407 ;; This function uses a non-reentrant model
  1408 ;;
  1409                           
  1410                           	psect	text3
  1411  0010C6                     __ptext3:
  1412                           	opt stack 0
  1413  0010C6                     _showInfo:
  1414                           	opt stack 19
  1415                           
  1416                           ;modules.c: 36: (INTCONbits.GIE = 0);
  1417                           
  1418                           ;incstack = 0
  1419  0010C6  9EF2               	bcf	intcon,7,c	;volatile
  1420                           
  1421                           ;modules.c: 37: println("Sorting Complete");
  1422  0010C8  0E0B               	movlw	low STR_4
  1423  0010CA  0100               	movlb	0	; () banked
  1424  0010CC  6F9A               	movwf	println@data& (0+255),b
  1425  0010CE  0E10               	movlw	high STR_4
  1426  0010D0  0100               	movlb	0	; () banked
  1427  0010D2  6F9B               	movwf	(println@data+1)& (0+255),b
  1428  0010D4  EC68  F00C         	call	_println	;wreg free
  1429                           
  1430                           ;modules.c: 38: println(" ");
  1431  0010D8  0EC3               	movlw	low STR_5
  1432  0010DA  0100               	movlb	0	; () banked
  1433  0010DC  6F9A               	movwf	println@data& (0+255),b
  1434  0010DE  0E10               	movlw	high STR_5
  1435  0010E0  0100               	movlb	0	; () banked
  1436  0010E2  6F9B               	movwf	(println@data+1)& (0+255),b
  1437  0010E4  EC68  F00C         	call	_println	;wreg free
  1438                           
  1439                           ;modules.c: 39: _delay((unsigned long)((1000)*(8000000/4000.0)));
  1440  0010E8  0E0B               	movlw	11
  1441  0010EA  0100               	movlb	0	; () banked
  1442  0010EC  6FCE               	movwf	(??_showInfo+1)& (0+255),b
  1443  0010EE  0E26               	movlw	38
  1444  0010F0  0100               	movlb	0	; () banked
  1445  0010F2  6FCD               	movwf	??_showInfo& (0+255),b
  1446  0010F4  0E5D               	movlw	93
  1447  0010F6                     u1257:
  1448  0010F6  2EE8               	decfsz	wreg,f,c
  1449  0010F8  D7FE               	bra	u1257
  1450  0010FA  2FCD               	decfsz	??_showInfo& (0+255),f,b
  1451  0010FC  D7FC               	bra	u1257
  1452  0010FE  2FCE               	decfsz	(??_showInfo+1)& (0+255),f,b
  1453  001100  D7FA               	bra	u1257
  1454  001102  D000               	nop2	
  1455                           
  1456                           ;modules.c: 40: println("Press a number");
  1457  001104  0E1C               	movlw	low STR_6
  1458  001106  0100               	movlb	0	; () banked
  1459  001108  6F9A               	movwf	println@data& (0+255),b
  1460  00110A  0E10               	movlw	high STR_6
  1461  00110C  0100               	movlb	0	; () banked
  1462  00110E  6F9B               	movwf	(println@data+1)& (0+255),b
  1463  001110  EC68  F00C         	call	_println	;wreg free
  1464                           
  1465                           ;modules.c: 41: println("For more info");
  1466  001114  0E47               	movlw	low STR_7
  1467  001116  0100               	movlb	0	; () banked
  1468  001118  6F9A               	movwf	println@data& (0+255),b
  1469  00111A  0E10               	movlw	high STR_7
  1470  00111C  0100               	movlb	0	; () banked
  1471  00111E  6F9B               	movwf	(println@data+1)& (0+255),b
  1472  001120  EC68  F00C         	call	_println	;wreg free
  1473                           
  1474                           ;modules.c: 42: int type = 0;
  1475  001124  0E00               	movlw	0
  1476  001126  0100               	movlb	0	; () banked
  1477  001128  6FD6               	movwf	(showInfo@type+1)& (0+255),b
  1478  00112A  0E00               	movlw	0
  1479  00112C  6FD5               	movwf	showInfo@type& (0+255),b
  1480  00112E                     l1673:
  1481                           
  1482                           ;modules.c: 44: type = captureKeypad;
  1483  00112E  0E1F               	movlw	high _captureKeypad
  1484  001130  0100               	movlb	0	; () banked
  1485  001132  6FD6               	movwf	(showInfo@type+1)& (0+255),b
  1486  001134  0E56               	movlw	low _captureKeypad
  1487  001136  6FD5               	movwf	showInfo@type& (0+255),b
  1488                           
  1489                           ;modules.c: 45: switch (type) {
  1490  001138  D0DA               	goto	l1701
  1491  00113A                     l1675:
  1492                           
  1493                           ; BSR set to: 0
  1494                           ;modules.c: 47: println("Time Elapsed:");
  1495  00113A  0E2B               	movlw	low STR_8
  1496  00113C  0100               	movlb	0	; () banked
  1497  00113E  6F9A               	movwf	println@data& (0+255),b
  1498  001140  0E10               	movlw	high STR_8
  1499  001142  0100               	movlb	0	; () banked
  1500  001144  6F9B               	movwf	(println@data+1)& (0+255),b
  1501  001146  EC68  F00C         	call	_println	;wreg free
  1502                           
  1503                           ;modules.c: 48: printf("%d seconds",time);
  1504  00114A  0E83               	movlw	low STR_9
  1505  00114C  0100               	movlb	0	; () banked
  1506  00114E  6F8C               	movwf	printf@f& (0+255),b
  1507  001150  0E10               	movlw	high STR_9
  1508  001152  0100               	movlb	0	; () banked
  1509  001154  6F8D               	movwf	(printf@f+1)& (0+255),b
  1510  001156  C0C9  F08E         	movff	showInfo@time,?_printf+2
  1511  00115A  C0CA  F08F         	movff	showInfo@time+1,?_printf+3
  1512  00115E  EC98  F009         	call	_printf	;wreg free
  1513                           
  1514                           ;modules.c: 49: break;
  1515  001162  D7E5               	goto	l1673
  1516  001164                     l1679:
  1517                           
  1518                           ;modules.c: 51: println("Total Sorted:");
  1519  001164  0E39               	movlw	low STR_10
  1520  001166  0100               	movlb	0	; () banked
  1521  001168  6F9A               	movwf	println@data& (0+255),b
  1522  00116A  0E10               	movlw	high STR_10
  1523  00116C  0100               	movlb	0	; () banked
  1524  00116E  6F9B               	movwf	(println@data+1)& (0+255),b
  1525  001170  EC68  F00C         	call	_println	;wreg free
  1526                           
  1527                           ;modules.c: 52: printf("%d batteries",sorted[0] + sorted[1] + sorted[2] + sorted[3]);
  1528  001174  0E55               	movlw	low STR_11
  1529  001176  0100               	movlb	0	; () banked
  1530  001178  6F8C               	movwf	printf@f& (0+255),b
  1531  00117A  0E10               	movlw	high STR_11
  1532  00117C  0100               	movlb	0	; () banked
  1533  00117E  6F8D               	movwf	(printf@f+1)& (0+255),b
  1534  001180  0100               	movlb	0	; () banked
  1535  001182  EE20 F006          	lfsr	2,6
  1536  001186  51CB               	movf	showInfo@sorted& (0+255),w,b
  1537  001188  26D9               	addwf	fsr2l,f,c
  1538  00118A  51CC               	movf	(showInfo@sorted+1)& (0+255),w,b
  1539  00118C  22DA               	addwfc	fsr2h,f,c
  1540  00118E  CFDE F0CD          	movff	postinc2,??_showInfo
  1541  001192  CFDD F0CE          	movff	postdec2,??_showInfo+1
  1542  001196  0100               	movlb	0	; () banked
  1543  001198  EE20 F004          	lfsr	2,4
  1544  00119C  51CB               	movf	showInfo@sorted& (0+255),w,b
  1545  00119E  26D9               	addwf	fsr2l,f,c
  1546  0011A0  51CC               	movf	(showInfo@sorted+1)& (0+255),w,b
  1547  0011A2  22DA               	addwfc	fsr2h,f,c
  1548  0011A4  CFDE F0CF          	movff	postinc2,??_showInfo+2
  1549  0011A8  CFDD F0D0          	movff	postdec2,??_showInfo+3
  1550  0011AC  0100               	movlb	0	; () banked
  1551  0011AE  EE20 F002          	lfsr	2,2
  1552  0011B2  51CB               	movf	showInfo@sorted& (0+255),w,b
  1553  0011B4  26D9               	addwf	fsr2l,f,c
  1554  0011B6  51CC               	movf	(showInfo@sorted+1)& (0+255),w,b
  1555  0011B8  22DA               	addwfc	fsr2h,f,c
  1556  0011BA  CFDE F0D1          	movff	postinc2,??_showInfo+4
  1557  0011BE  CFDD F0D2          	movff	postdec2,??_showInfo+5
  1558  0011C2  C0CB  FFD9         	movff	showInfo@sorted,fsr2l
  1559  0011C6  C0CC  FFDA         	movff	showInfo@sorted+1,fsr2h
  1560  0011CA  CFDE F0D3          	movff	postinc2,??_showInfo+6
  1561  0011CE  CFDD F0D4          	movff	postdec2,??_showInfo+7
  1562  0011D2  0100               	movlb	0	; () banked
  1563  0011D4  51D1               	movf	(??_showInfo+4)& (0+255),w,b
  1564  0011D6  0100               	movlb	0	; () banked
  1565  0011D8  27D3               	addwf	(??_showInfo+6)& (0+255),f,b
  1566  0011DA  0100               	movlb	0	; () banked
  1567  0011DC  51D2               	movf	(??_showInfo+5)& (0+255),w,b
  1568  0011DE  0100               	movlb	0	; () banked
  1569  0011E0  23D4               	addwfc	(??_showInfo+7)& (0+255),f,b
  1570  0011E2  0100               	movlb	0	; () banked
  1571  0011E4  51CF               	movf	(??_showInfo+2)& (0+255),w,b
  1572  0011E6  0100               	movlb	0	; () banked
  1573  0011E8  27D3               	addwf	(??_showInfo+6)& (0+255),f,b
  1574  0011EA  0100               	movlb	0	; () banked
  1575  0011EC  51D0               	movf	(??_showInfo+3)& (0+255),w,b
  1576  0011EE  0100               	movlb	0	; () banked
  1577  0011F0  23D4               	addwfc	(??_showInfo+7)& (0+255),f,b
  1578  0011F2  0100               	movlb	0	; () banked
  1579  0011F4  51CD               	movf	??_showInfo& (0+255),w,b
  1580  0011F6  0100               	movlb	0	; () banked
  1581  0011F8  25D3               	addwf	(??_showInfo+6)& (0+255),w,b
  1582  0011FA  0100               	movlb	0	; () banked
  1583  0011FC  6F8E               	movwf	(?_printf+2)& (0+255),b
  1584  0011FE  0100               	movlb	0	; () banked
  1585  001200  51CE               	movf	(??_showInfo+1)& (0+255),w,b
  1586  001202  0100               	movlb	0	; () banked
  1587  001204  21D4               	addwfc	(??_showInfo+7)& (0+255),w,b
  1588  001206  0100               	movlb	0	; () banked
  1589  001208  6F8F               	movwf	(?_printf+3)& (0+255),b
  1590  00120A  EC98  F009         	call	_printf	;wreg free
  1591                           
  1592                           ;modules.c: 53: break;
  1593  00120E  D78F               	goto	l1673
  1594  001210                     l1683:
  1595                           
  1596                           ;modules.c: 55: println("AA Sorted:");
  1597  001210  0E6D               	movlw	low STR_12
  1598  001212  0100               	movlb	0	; () banked
  1599  001214  6F9A               	movwf	println@data& (0+255),b
  1600  001216  0E10               	movlw	high STR_12
  1601  001218  0100               	movlb	0	; () banked
  1602  00121A  6F9B               	movwf	(println@data+1)& (0+255),b
  1603  00121C  EC68  F00C         	call	_println	;wreg free
  1604                           
  1605                           ;modules.c: 56: printf("%d",sorted[0]);
  1606  001220  0EBD               	movlw	low STR_13
  1607  001222  0100               	movlb	0	; () banked
  1608  001224  6F8C               	movwf	printf@f& (0+255),b
  1609  001226  0E10               	movlw	high STR_13
  1610  001228  0100               	movlb	0	; () banked
  1611  00122A  6F8D               	movwf	(printf@f+1)& (0+255),b
  1612  00122C  C0CB  FFD9         	movff	showInfo@sorted,fsr2l
  1613  001230  C0CC  FFDA         	movff	showInfo@sorted+1,fsr2h
  1614  001234  CFDE F08E          	movff	postinc2,?_printf+2
  1615  001238  CFDD F08F          	movff	postdec2,?_printf+3
  1616  00123C  EC98  F009         	call	_printf	;wreg free
  1617                           
  1618                           ;modules.c: 57: break;
  1619  001240  D776               	goto	l1673
  1620  001242                     l1687:
  1621                           
  1622                           ;modules.c: 59: println("C Sorted:");
  1623  001242  0E99               	movlw	low STR_14
  1624  001244  0100               	movlb	0	; () banked
  1625  001246  6F9A               	movwf	println@data& (0+255),b
  1626  001248  0E10               	movlw	high STR_14
  1627  00124A  0100               	movlb	0	; () banked
  1628  00124C  6F9B               	movwf	(println@data+1)& (0+255),b
  1629  00124E  EC68  F00C         	call	_println	;wreg free
  1630                           
  1631                           ;modules.c: 60: printf("%d",sorted[1]);
  1632  001252  0EBD               	movlw	low STR_13
  1633  001254  0100               	movlb	0	; () banked
  1634  001256  6F8C               	movwf	printf@f& (0+255),b
  1635  001258  0E10               	movlw	high STR_13
  1636  00125A  0100               	movlb	0	; () banked
  1637  00125C  6F8D               	movwf	(printf@f+1)& (0+255),b
  1638  00125E  0100               	movlb	0	; () banked
  1639  001260  EE20 F002          	lfsr	2,2
  1640  001264  51CB               	movf	showInfo@sorted& (0+255),w,b
  1641  001266  26D9               	addwf	fsr2l,f,c
  1642  001268  51CC               	movf	(showInfo@sorted+1)& (0+255),w,b
  1643  00126A  22DA               	addwfc	fsr2h,f,c
  1644  00126C  CFDE F08E          	movff	postinc2,?_printf+2
  1645  001270  CFDD F08F          	movff	postdec2,?_printf+3
  1646  001274  EC98  F009         	call	_printf	;wreg free
  1647                           
  1648                           ;modules.c: 61: break;
  1649  001278  D75A               	goto	l1673
  1650  00127A                     l1691:
  1651                           
  1652                           ;modules.c: 63: println("9V Sorted:");
  1653  00127A  0E78               	movlw	low STR_16
  1654  00127C  0100               	movlb	0	; () banked
  1655  00127E  6F9A               	movwf	println@data& (0+255),b
  1656  001280  0E10               	movlw	high STR_16
  1657  001282  0100               	movlb	0	; () banked
  1658  001284  6F9B               	movwf	(println@data+1)& (0+255),b
  1659  001286  EC68  F00C         	call	_println	;wreg free
  1660                           
  1661                           ;modules.c: 64: printf("%d",sorted[2]);
  1662  00128A  0EBD               	movlw	low STR_13
  1663  00128C  0100               	movlb	0	; () banked
  1664  00128E  6F8C               	movwf	printf@f& (0+255),b
  1665  001290  0E10               	movlw	high STR_13
  1666  001292  0100               	movlb	0	; () banked
  1667  001294  6F8D               	movwf	(printf@f+1)& (0+255),b
  1668  001296  0100               	movlb	0	; () banked
  1669  001298  EE20 F004          	lfsr	2,4
  1670  00129C  51CB               	movf	showInfo@sorted& (0+255),w,b
  1671  00129E  26D9               	addwf	fsr2l,f,c
  1672  0012A0  51CC               	movf	(showInfo@sorted+1)& (0+255),w,b
  1673  0012A2  22DA               	addwfc	fsr2h,f,c
  1674  0012A4  CFDE F08E          	movff	postinc2,?_printf+2
  1675  0012A8  CFDD F08F          	movff	postdec2,?_printf+3
  1676  0012AC  EC98  F009         	call	_printf	;wreg free
  1677                           
  1678                           ;modules.c: 65: break;
  1679  0012B0  D73E               	goto	l1673
  1680  0012B2                     l1695:
  1681                           
  1682                           ;modules.c: 67: println("Uncharged:");
  1683  0012B2  0E62               	movlw	low STR_18
  1684  0012B4  0100               	movlb	0	; () banked
  1685  0012B6  6F9A               	movwf	println@data& (0+255),b
  1686  0012B8  0E10               	movlw	high STR_18
  1687  0012BA  0100               	movlb	0	; () banked
  1688  0012BC  6F9B               	movwf	(println@data+1)& (0+255),b
  1689  0012BE  EC68  F00C         	call	_println	;wreg free
  1690                           
  1691                           ;modules.c: 68: printf("%d",sorted[3]);
  1692  0012C2  0EBD               	movlw	low STR_13
  1693  0012C4  0100               	movlb	0	; () banked
  1694  0012C6  6F8C               	movwf	printf@f& (0+255),b
  1695  0012C8  0E10               	movlw	high STR_13
  1696  0012CA  0100               	movlb	0	; () banked
  1697  0012CC  6F8D               	movwf	(printf@f+1)& (0+255),b
  1698  0012CE  0100               	movlb	0	; () banked
  1699  0012D0  EE20 F006          	lfsr	2,6
  1700  0012D4  51CB               	movf	showInfo@sorted& (0+255),w,b
  1701  0012D6  26D9               	addwf	fsr2l,f,c
  1702  0012D8  51CC               	movf	(showInfo@sorted+1)& (0+255),w,b
  1703  0012DA  22DA               	addwfc	fsr2h,f,c
  1704  0012DC  CFDE F08E          	movff	postinc2,?_printf+2
  1705  0012E0  CFDD F08F          	movff	postdec2,?_printf+3
  1706  0012E4  EC98  F009         	call	_printf	;wreg free
  1707                           
  1708                           ;modules.c: 69: break;
  1709  0012E8  D722               	goto	l1673
  1710  0012EA                     l132:
  1711                           
  1712                           ; BSR set to: 0
  1713  0012EA  00FF               	reset		;# 
  1714                           
  1715                           ;modules.c: 74: }
  1716                           
  1717                           ;modules.c: 73: break;
  1718                           
  1719                           ;modules.c: 72: default:
  1720  0012EC  D720               	goto	l1673
  1721  0012EE                     l1701:
  1722  0012EE  C0D5  F0CD         	movff	showInfo@type,??_showInfo
  1723  0012F2  C0D6  F0CE         	movff	showInfo@type+1,??_showInfo+1
  1724                           
  1725                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1726                           ; Switch size 1, requested type "space"
  1727                           ; Number of cases is 1, Range of values is 0 to 0
  1728                           ; switch strategies available:
  1729                           ; Name         Instructions Cycles
  1730                           ; simple_byte            4     3 (average)
  1731                           ;	Chosen strategy is simple_byte
  1732  0012F6  0100               	movlb	0	; () banked
  1733  0012F8  51CE               	movf	(??_showInfo+1)& (0+255),w,b
  1734  0012FA  0A00               	xorlw	0	; case 0
  1735  0012FC  A4D8               	btfss	status,2,c
  1736  0012FE  D717               	goto	l1673
  1737                           
  1738                           ; BSR set to: 0
  1739                           ; Switch size 1, requested type "space"
  1740                           ; Number of cases is 7, Range of values is 0 to 15
  1741                           ; switch strategies available:
  1742                           ; Name         Instructions Cycles
  1743                           ; simple_byte           22    12 (average)
  1744                           ;	Chosen strategy is simple_byte
  1745  001300  0100               	movlb	0	; () banked
  1746  001302  51CD               	movf	??_showInfo& (0+255),w,b
  1747  001304  0A00               	xorlw	0	; case 0
  1748  001306  B4D8               	btfsc	status,2,c
  1749  001308  D718               	goto	l1675
  1750  00130A  0A01               	xorlw	1	; case 1
  1751  00130C  B4D8               	btfsc	status,2,c
  1752  00130E  D72A               	goto	l1679
  1753  001310  0A03               	xorlw	3	; case 2
  1754  001312  B4D8               	btfsc	status,2,c
  1755  001314  D77D               	goto	l1683
  1756  001316  0A01               	xorlw	1	; case 3
  1757  001318  B4D8               	btfsc	status,2,c
  1758  00131A  D793               	goto	l1687
  1759  00131C  0A07               	xorlw	7	; case 4
  1760  00131E  B4D8               	btfsc	status,2,c
  1761  001320  D7AC               	goto	l1691
  1762  001322  0A01               	xorlw	1	; case 5
  1763  001324  B4D8               	btfsc	status,2,c
  1764  001326  D7C5               	goto	l1695
  1765  001328  0A0A               	xorlw	10	; case 15
  1766  00132A  B4D8               	btfsc	status,2,c
  1767  00132C  D7DE               	goto	l132
  1768                           
  1769                           ; BSR set to: 0
  1770                           
  1771                           ; BSR set to: 0
  1772  00132E  D6FF               	goto	l1673
  1773  001330                     __end_of_showInfo:
  1774                           	opt stack 0
  1775                           tblptru	equ	0xFF8
  1776                           tblptrh	equ	0xFF7
  1777                           tblptrl	equ	0xFF6
  1778                           tablat	equ	0xFF5
  1779                           intcon	equ	0xFF2
  1780                           postinc0	equ	0xFEE
  1781                           wreg	equ	0xFE8
  1782                           postdec1	equ	0xFE5
  1783                           plusw1	equ	0xFE3
  1784                           fsr1l	equ	0xFE1
  1785                           postinc2	equ	0xFDE
  1786                           postdec2	equ	0xFDD
  1787                           plusw2	equ	0xFDB
  1788                           fsr2h	equ	0xFDA
  1789                           fsr2l	equ	0xFD9
  1790                           status	equ	0xFD8
  1791                           
  1792 ;; *************** function _println *****************
  1793 ;; Defined at:
  1794 ;;		line 11 in file "modules.c"
  1795 ;; Parameters:    Size  Location     Type
  1796 ;;  data            2   26[BANK0 ] PTR unsigned char 
  1797 ;;		 -> STR_20(10), STR_18(11), STR_16(11), STR_14(10), 
  1798 ;;		 -> STR_12(11), STR_10(14), STR_8(14), STR_7(14), 
  1799 ;;		 -> STR_6(15), STR_5(2), STR_4(17), STR_2(9), 
  1800 ;;		 -> STR_1(11), 
  1801 ;; Auto vars:     Size  Location     Type
  1802 ;;  output         41   30[BANK0 ] unsigned char [41]
  1803 ;;  i               2   71[BANK0 ] int 
  1804 ;; Return value:  Size  Location     Type
  1805 ;;                  1    wreg      void 
  1806 ;; Registers used:
  1807 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1808 ;; Tracked objects:
  1809 ;;		On entry : 0/0
  1810 ;;		On exit  : 0/0
  1811 ;;		Unchanged: 0/0
  1812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1813 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1814 ;;      Locals:         0      43       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1815 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1816 ;;      Totals:         0      47       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1817 ;;Total ram usage:       47 bytes
  1818 ;; Hardware stack levels used:    1
  1819 ;; Hardware stack levels required when called:    9
  1820 ;; This function calls:
  1821 ;;		_printf
  1822 ;; This function is called by:
  1823 ;;		_mainloop
  1824 ;;		_main
  1825 ;;		_showInfo
  1826 ;;		_stopMoving
  1827 ;; This function uses a non-reentrant model
  1828 ;;
  1829                           
  1830                           	psect	text4
  1831  0018D0                     __ptext4:
  1832                           	opt stack 0
  1833  0018D0                     _println:
  1834                           	opt stack 21
  1835                           
  1836                           ;modules.c: 12: int i = 0;
  1837                           
  1838                           ; BSR set to: 0
  1839                           ;incstack = 0
  1840  0018D0  0E00               	movlw	0
  1841  0018D2  0100               	movlb	0	; () banked
  1842  0018D4  6FC8               	movwf	(println@i+1)& (0+255),b
  1843  0018D6  0E00               	movlw	0
  1844  0018D8  6FC7               	movwf	println@i& (0+255),b
  1845                           
  1846                           ; BSR set to: 0
  1847                           ;modules.c: 13: char output[] = "                                        ";
  1848  0018DA  EE21  F000         	lfsr	2,println@F3048
  1849  0018DE  EE10  F09E         	lfsr	1,println@output
  1850  0018E2  0E28               	movlw	40
  1851  0018E4                     u871:
  1852  0018E4  CFDB FFE3          	movff	plusw2,plusw1
  1853  0018E8  06E8               	decf	wreg,f,c
  1854  0018EA  E2FC               	bc	u871
  1855                           
  1856                           ;modules.c: 14: while (data[i] != '\0') {
  1857  0018EC  D01F               	goto	l1521
  1858  0018EE                     l1517:
  1859                           
  1860                           ; BSR set to: 0
  1861                           ;modules.c: 15: output[i] = data[i++];
  1862  0018EE  0100               	movlb	0	; () banked
  1863  0018F0  51C7               	movf	println@i& (0+255),w,b
  1864  0018F2  0100               	movlb	0	; () banked
  1865  0018F4  259A               	addwf	println@data& (0+255),w,b
  1866  0018F6  0100               	movlb	0	; () banked
  1867  0018F8  6F9C               	movwf	??_println& (0+255),b
  1868  0018FA  0100               	movlb	0	; () banked
  1869  0018FC  51C8               	movf	(println@i+1)& (0+255),w,b
  1870  0018FE  0100               	movlb	0	; () banked
  1871  001900  219B               	addwfc	(println@data+1)& (0+255),w,b
  1872  001902  0100               	movlb	0	; () banked
  1873  001904  6F9D               	movwf	(??_println+1)& (0+255),b
  1874  001906  C09C  FFF6         	movff	??_println,tblptrl
  1875  00190A  C09D  FFF7         	movff	??_println+1,tblptrh
  1876  00190E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1877  00190E  6AF8               	clrf	tblptru,c
  1878  001910                     	endif
  1879  001910                     	if	0	;tblptru may be non-zero
  1880  001910                     	endif
  1881  001910  0E9E               	movlw	low println@output
  1882  001912  0100               	movlb	0	; () banked
  1883  001914  25C7               	addwf	println@i& (0+255),w,b
  1884  001916  6ED9               	movwf	fsr2l,c
  1885  001918  0E00               	movlw	high println@output
  1886  00191A  0100               	movlb	0	; () banked
  1887  00191C  21C8               	addwfc	(println@i+1)& (0+255),w,b
  1888  00191E  6EDA               	movwf	fsr2h,c
  1889  001920  0008               	tblrd		*
  1890  001922  CFF5 FFDF          	movff	tablat,indf2
  1891                           
  1892                           ; BSR set to: 0
  1893  001926  0100               	movlb	0	; () banked
  1894  001928  4BC7               	infsnz	println@i& (0+255),f,b
  1895  00192A  2BC8               	incf	(println@i+1)& (0+255),f,b
  1896  00192C                     l1521:
  1897                           
  1898                           ; BSR set to: 0
  1899  00192C  0100               	movlb	0	; () banked
  1900  00192E  51C7               	movf	println@i& (0+255),w,b
  1901  001930  0100               	movlb	0	; () banked
  1902  001932  259A               	addwf	println@data& (0+255),w,b
  1903  001934  0100               	movlb	0	; () banked
  1904  001936  6F9C               	movwf	??_println& (0+255),b
  1905  001938  0100               	movlb	0	; () banked
  1906  00193A  51C8               	movf	(println@i+1)& (0+255),w,b
  1907  00193C  0100               	movlb	0	; () banked
  1908  00193E  219B               	addwfc	(println@data+1)& (0+255),w,b
  1909  001940  0100               	movlb	0	; () banked
  1910  001942  6F9D               	movwf	(??_println+1)& (0+255),b
  1911  001944  C09C  FFF6         	movff	??_println,tblptrl
  1912  001948  C09D  FFF7         	movff	??_println+1,tblptrh
  1913  00194C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1914  00194C  6AF8               	clrf	tblptru,c
  1915  00194E                     	endif
  1916  00194E                     	if	0	;tblptru may be non-zero
  1917  00194E                     	endif
  1918  00194E  0008               	tblrd		*
  1919  001950  50F5               	movf	tablat,w,c
  1920  001952  0900               	iorlw	0
  1921  001954  A4D8               	btfss	status,2,c
  1922  001956  D7CB               	goto	l1517
  1923                           
  1924                           ; BSR set to: 0
  1925                           ;modules.c: 16: }
  1926                           ;modules.c: 17: printf("%s", output);
  1927                           
  1928                           ; BSR set to: 0
  1929  001958  0EC0               	movlw	low STR_3
  1930  00195A  0100               	movlb	0	; () banked
  1931  00195C  6F8C               	movwf	printf@f& (0+255),b
  1932  00195E  0E10               	movlw	high STR_3
  1933  001960  0100               	movlb	0	; () banked
  1934  001962  6F8D               	movwf	(printf@f+1)& (0+255),b
  1935  001964  0E9E               	movlw	low println@output
  1936  001966  0100               	movlb	0	; () banked
  1937  001968  6F8E               	movwf	(?_printf+2)& (0+255),b
  1938  00196A  0E00               	movlw	high println@output
  1939  00196C  0100               	movlb	0	; () banked
  1940  00196E  6F8F               	movwf	(?_printf+3)& (0+255),b
  1941  001970  EC98  F009         	call	_printf	;wreg free
  1942  001974  0012               	return		;funcret
  1943  001976                     __end_of_println:
  1944                           	opt stack 0
  1945                           tblptru	equ	0xFF8
  1946                           tblptrh	equ	0xFF7
  1947                           tblptrl	equ	0xFF6
  1948                           tablat	equ	0xFF5
  1949                           intcon	equ	0xFF2
  1950                           postinc0	equ	0xFEE
  1951                           wreg	equ	0xFE8
  1952                           postdec1	equ	0xFE5
  1953                           plusw1	equ	0xFE3
  1954                           fsr1l	equ	0xFE1
  1955                           indf2	equ	0xFDF
  1956                           postinc2	equ	0xFDE
  1957                           postdec2	equ	0xFDD
  1958                           plusw2	equ	0xFDB
  1959                           fsr2h	equ	0xFDA
  1960                           fsr2l	equ	0xFD9
  1961                           status	equ	0xFD8
  1962                           
  1963 ;; *************** function _printf *****************
  1964 ;; Defined at:
  1965 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  1966 ;; Parameters:    Size  Location     Type
  1967 ;;  f               2   12[BANK0 ] PTR const unsigned char 
  1968 ;;		 -> STR_19(3), STR_17(3), STR_15(3), STR_13(3), 
  1969 ;;		 -> STR_11(13), STR_9(11), STR_3(3), 
  1970 ;; Auto vars:     Size  Location     Type
  1971 ;;  tmpval          4    0        struct .
  1972 ;;  val             2   23[BANK0 ] unsigned int 
  1973 ;;  cp              2   21[BANK0 ] PTR const unsigned char 
  1974 ;;		 -> STR_21(7), println@output(41), 
  1975 ;;  ap              2   19[BANK0 ] PTR void [1]
  1976 ;;		 -> ?i2_printf(2), ?_printf(2), 
  1977 ;;  len             2    0        unsigned int 
  1978 ;;  c               1   25[BANK0 ] char 
  1979 ;;  prec            1   18[BANK0 ] char 
  1980 ;;  flag            1   17[BANK0 ] unsigned char 
  1981 ;; Return value:  Size  Location     Type
  1982 ;;                  2   12[BANK0 ] int 
  1983 ;; Registers used:
  1984 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1985 ;; Tracked objects:
  1986 ;;		On entry : 0/0
  1987 ;;		On exit  : 0/0
  1988 ;;		Unchanged: 0/0
  1989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1990 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1991 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1992 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1993 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1994 ;;Total ram usage:       14 bytes
  1995 ;; Hardware stack levels used:    1
  1996 ;; Hardware stack levels required when called:    8
  1997 ;; This function calls:
  1998 ;;		___lwdiv
  1999 ;;		___lwmod
  2000 ;;		_putch
  2001 ;; This function is called by:
  2002 ;;		_println
  2003 ;;		_showInfo
  2004 ;; This function uses a non-reentrant model
  2005 ;;
  2006                           
  2007                           	psect	text5
  2008  001330                     __ptext5:
  2009                           	opt stack 0
  2010  001330                     _printf:
  2011                           	opt stack 21
  2012                           
  2013                           ;doprnt.c: 466: va_list ap;
  2014                           ;doprnt.c: 499: signed char c;
  2015                           ;doprnt.c: 506: signed char prec;
  2016                           ;doprnt.c: 508: unsigned char flag;
  2017                           ;doprnt.c: 523: union {
  2018                           ;doprnt.c: 524: unsigned long vd;
  2019                           ;doprnt.c: 525: double integ;
  2020                           ;doprnt.c: 526: } tmpval;
  2021                           ;doprnt.c: 528: unsigned int val;
  2022                           ;doprnt.c: 529: unsigned len;
  2023                           ;doprnt.c: 530: const char * cp;
  2024                           ;doprnt.c: 533: *ap = __va_start();
  2025                           
  2026                           ;incstack = 0
  2027  001330  0E8E               	movlw	low (?_printf+2)
  2028  001332  0100               	movlb	0	; () banked
  2029  001334  6F93               	movwf	printf@ap& (0+255),b
  2030  001336  0E00               	movlw	high (?_printf+2)
  2031  001338  0100               	movlb	0	; () banked
  2032  00133A  6F94               	movwf	(printf@ap+1)& (0+255),b
  2033                           
  2034                           ;doprnt.c: 536: while(c = *f++) {
  2035  00133C  D0E5               	goto	l1469
  2036  00133E                     l1409:
  2037                           
  2038                           ; BSR set to: 0
  2039                           ;doprnt.c: 538: if(c != '%')
  2040  00133E  0E25               	movlw	37
  2041  001340  0100               	movlb	0	; () banked
  2042  001342  1999               	xorwf	printf@c& (0+255),w,b
  2043  001344  B4D8               	btfsc	status,2,c
  2044  001346  D005               	goto	l1413
  2045                           
  2046                           ; BSR set to: 0
  2047                           ;doprnt.c: 540: {
  2048                           ;doprnt.c: 541: (putch(c) );
  2049  001348  0100               	movlb	0	; () banked
  2050  00134A  5199               	movf	printf@c& (0+255),w,b
  2051  00134C  ECD9  F00F         	call	_putch
  2052                           
  2053                           ;doprnt.c: 542: continue;
  2054  001350  D0DB               	goto	l1469
  2055  001352                     l1413:
  2056                           
  2057                           ;doprnt.c: 543: }
  2058                           ;doprnt.c: 548: flag = 0;
  2059  001352  0E00               	movlw	0
  2060  001354  0100               	movlb	0	; () banked
  2061  001356  6F91               	movwf	printf@flag& (0+255),b
  2062                           
  2063                           ;doprnt.c: 635: switch(c = *f++) {
  2064  001358  D045               	goto	l1431
  2065  00135A                     l1415:
  2066                           
  2067                           ; BSR set to: 0
  2068                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  2069  00135A  C093  FFD9         	movff	printf@ap,fsr2l
  2070  00135E  C094  FFDA         	movff	printf@ap+1,fsr2h
  2071  001362  CFDE F095          	movff	postinc2,printf@cp
  2072  001366  CFDD F096          	movff	postdec2,printf@cp+1
  2073                           
  2074                           ; BSR set to: 0
  2075  00136A  0E02               	movlw	2
  2076  00136C  0100               	movlb	0	; () banked
  2077  00136E  2793               	addwf	printf@ap& (0+255),f,b
  2078  001370  0E00               	movlw	0
  2079  001372  2394               	addwfc	(printf@ap+1)& (0+255),f,b
  2080                           
  2081                           ; BSR set to: 0
  2082                           ;doprnt.c: 740: if(!cp)
  2083  001374  0100               	movlb	0	; () banked
  2084  001376  5195               	movf	printf@cp& (0+255),w,b
  2085  001378  0100               	movlb	0	; () banked
  2086  00137A  1196               	iorwf	(printf@cp+1)& (0+255),w,b
  2087  00137C  A4D8               	btfss	status,2,c
  2088  00137E  D01D               	goto	l1427
  2089                           
  2090                           ; BSR set to: 0
  2091                           ;doprnt.c: 741: cp = "(null)";
  2092  001380  0EB6               	movlw	low STR_21
  2093  001382  0100               	movlb	0	; () banked
  2094  001384  6F95               	movwf	printf@cp& (0+255),b
  2095  001386  0E10               	movlw	high STR_21
  2096  001388  0100               	movlb	0	; () banked
  2097  00138A  6F96               	movwf	(printf@cp+1)& (0+255),b
  2098                           
  2099                           ; BSR set to: 0
  2100                           ;doprnt.c: 777: while(*cp)
  2101  00138C  D016               	goto	l1427
  2102  00138E                     l1423:
  2103                           
  2104                           ;doprnt.c: 778: (putch(*cp++) );
  2105  00138E  C095  FFF6         	movff	printf@cp,tblptrl
  2106  001392  C096  FFF7         	movff	printf@cp+1,tblptrh
  2107  001396  0E00               	movlw	low (__smallconst shr (0+16))
  2108  001398  6EF8               	movwf	tblptru,c
  2109  00139A  0E0F               	movlw	(high __ramtop+-1)
  2110  00139C  64F7               	cpfsgt	tblptrh,c
  2111  00139E  D003               	bra	u717
  2112  0013A0  0008               	tblrd		*
  2113  0013A2  50F5               	movf	tablat,w,c
  2114  0013A4  D005               	bra	u710
  2115  0013A6                     u717:
  2116  0013A6  CFF6 FFE9          	movff	tblptrl,fsr0l
  2117  0013AA  CFF7 FFEA          	movff	tblptrh,fsr0h
  2118  0013AE  50EF               	movf	indf0,w,c
  2119  0013B0                     u710:
  2120  0013B0  ECD9  F00F         	call	_putch
  2121  0013B4  0100               	movlb	0	; () banked
  2122  0013B6  4B95               	infsnz	printf@cp& (0+255),f,b
  2123  0013B8  2B96               	incf	(printf@cp+1)& (0+255),f,b
  2124  0013BA                     l1427:
  2125                           
  2126                           ; BSR set to: 0
  2127  0013BA  C095  FFF6         	movff	printf@cp,tblptrl
  2128  0013BE  C096  FFF7         	movff	printf@cp+1,tblptrh
  2129  0013C2  0E00               	movlw	low (__smallconst shr (0+16))
  2130  0013C4  6EF8               	movwf	tblptru,c
  2131  0013C6  0E0F               	movlw	(high __ramtop+-1)
  2132  0013C8  64F7               	cpfsgt	tblptrh,c
  2133  0013CA  D003               	bra	u727
  2134  0013CC  0008               	tblrd		*
  2135  0013CE  50F5               	movf	tablat,w,c
  2136  0013D0  D005               	bra	u720
  2137  0013D2                     u727:
  2138  0013D2  CFF6 FFE9          	movff	tblptrl,fsr0l
  2139  0013D6  CFF7 FFEA          	movff	tblptrh,fsr0h
  2140  0013DA  50EF               	movf	indf0,w,c
  2141  0013DC                     u720:
  2142  0013DC  0900               	iorlw	0
  2143  0013DE  B4D8               	btfsc	status,2,c
  2144  0013E0  D093               	goto	l1469
  2145  0013E2  D7D5               	goto	l1423
  2146  0013E4                     l1431:
  2147  0013E4  C08C  FFF6         	movff	printf@f,tblptrl
  2148  0013E8  C08D  FFF7         	movff	printf@f+1,tblptrh
  2149  0013EC  0100               	movlb	0	; () banked
  2150  0013EE  4B8C               	infsnz	printf@f& (0+255),f,b
  2151  0013F0  2B8D               	incf	(printf@f+1)& (0+255),f,b
  2152  0013F2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2153  0013F2  6AF8               	clrf	tblptru,c
  2154  0013F4                     	endif
  2155  0013F4                     	if	0	;tblptru may be non-zero
  2156  0013F4                     	endif
  2157  0013F4  0008               	tblrd		*
  2158  0013F6  CFF5 F099          	movff	tablat,printf@c
  2159  0013FA  0100               	movlb	0	; () banked
  2160  0013FC  5199               	movf	printf@c& (0+255),w,b
  2161                           
  2162                           ; Switch size 1, requested type "space"
  2163                           ; Number of cases is 4, Range of values is 0 to 115
  2164                           ; switch strategies available:
  2165                           ; Name         Instructions Cycles
  2166                           ; simple_byte           13     7 (average)
  2167                           ;	Chosen strategy is simple_byte
  2168  0013FE  0A00               	xorlw	0	; case 0
  2169  001400  B4D8               	btfsc	status,2,c
  2170  001402  0012               	return	
  2171  001404  0A64               	xorlw	100	; case 100
  2172  001406  B4D8               	btfsc	status,2,c
  2173  001408  D007               	goto	l1433
  2174  00140A  0A0D               	xorlw	13	; case 105
  2175  00140C  B4D8               	btfsc	status,2,c
  2176  00140E  D004               	goto	l1433
  2177  001410  0A1A               	xorlw	26	; case 115
  2178  001412  B4D8               	btfsc	status,2,c
  2179  001414  D7A2               	goto	l1415
  2180  001416  D078               	goto	l1469
  2181  001418                     l1433:
  2182                           
  2183                           ;doprnt.c: 1253: {
  2184                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2185  001418  C093  FFD9         	movff	printf@ap,fsr2l
  2186  00141C  C094  FFDA         	movff	printf@ap+1,fsr2h
  2187  001420  CFDE F097          	movff	postinc2,printf@val
  2188  001424  CFDD F098          	movff	postdec2,printf@val+1
  2189  001428  0E02               	movlw	2
  2190  00142A  0100               	movlb	0	; () banked
  2191  00142C  2793               	addwf	printf@ap& (0+255),f,b
  2192  00142E  0E00               	movlw	0
  2193  001430  2394               	addwfc	(printf@ap+1)& (0+255),f,b
  2194                           
  2195                           ; BSR set to: 0
  2196                           ;doprnt.c: 1261: if((int)val < 0) {
  2197  001432  0100               	movlb	0	; () banked
  2198  001434  AF98               	btfss	(printf@val+1)& (0+255),7,b
  2199  001436  D008               	goto	l1443
  2200                           
  2201                           ; BSR set to: 0
  2202                           ;doprnt.c: 1262: flag |= 0x03;
  2203  001438  0E03               	movlw	3
  2204  00143A  0100               	movlb	0	; () banked
  2205  00143C  1391               	iorwf	printf@flag& (0+255),f,b
  2206                           
  2207                           ; BSR set to: 0
  2208                           ;doprnt.c: 1263: val = -val;
  2209  00143E  0100               	movlb	0	; () banked
  2210  001440  6D97               	negf	printf@val& (0+255),b
  2211  001442  1F98               	comf	(printf@val+1)& (0+255),f,b
  2212  001444  B0D8               	btfsc	status,0,c
  2213  001446  2B98               	incf	(printf@val+1)& (0+255),f,b
  2214  001448                     l1443:
  2215                           
  2216                           ; BSR set to: 0
  2217                           ;doprnt.c: 1264: }
  2218                           ;doprnt.c: 1266: }
  2219                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2220  001448  0E01               	movlw	1
  2221  00144A  0100               	movlb	0	; () banked
  2222  00144C  6F99               	movwf	printf@c& (0+255),b
  2223  00144E                     l1445:
  2224                           
  2225                           ; BSR set to: 0
  2226  00144E  0E05               	movlw	5
  2227  001450  0100               	movlb	0	; () banked
  2228  001452  1999               	xorwf	printf@c& (0+255),w,b
  2229  001454  B4D8               	btfsc	status,2,c
  2230  001456  D019               	goto	l1457
  2231                           
  2232                           ; BSR set to: 0
  2233                           ;doprnt.c: 1306: if(val < dpowers[c])
  2234                           
  2235                           ; BSR set to: 0
  2236                           
  2237                           ; BSR set to: 0
  2238  001458  0100               	movlb	0	; () banked
  2239  00145A  5199               	movf	printf@c& (0+255),w,b
  2240  00145C  0D02               	mullw	2
  2241  00145E  0E01               	movlw	low _dpowers
  2242  001460  24F3               	addwf	prodl,w,c
  2243  001462  6EF6               	movwf	tblptrl,c
  2244  001464  0E10               	movlw	high _dpowers
  2245  001466  20F4               	addwfc	prodh,w,c
  2246  001468  6EF7               	movwf	tblptrh,c
  2247  00146A                     	if	1	;There are 3 active tblptr bytes
  2248  00146A  6AF8               	clrf	tblptru,c
  2249  00146C  0E00               	movlw	low (__mediumconst shr (0+16))
  2250  00146E  22F8               	addwfc	tblptru,f,c
  2251  001470                     	endif
  2252  001470  0009               	tblrd		*+
  2253  001472  50F5               	movf	tablat,w,c
  2254  001474  0100               	movlb	0	; () banked
  2255  001476  5D97               	subwf	printf@val& (0+255),w,b
  2256  001478  0009               	tblrd		*+
  2257  00147A  50F5               	movf	tablat,w,c
  2258  00147C  0100               	movlb	0	; () banked
  2259  00147E  5998               	subwfb	(printf@val+1)& (0+255),w,b
  2260  001480  A0D8               	btfss	status,0,c
  2261  001482  D003               	goto	l1457
  2262                           
  2263                           ; BSR set to: 0
  2264                           
  2265                           ; BSR set to: 0
  2266                           
  2267                           ; BSR set to: 0
  2268                           ;doprnt.c: 1307: break;
  2269  001484  0100               	movlb	0	; () banked
  2270  001486  2B99               	incf	printf@c& (0+255),f,b
  2271  001488  D7E2               	goto	l1445
  2272  00148A                     l1457:
  2273                           
  2274                           ; BSR set to: 0
  2275                           ;doprnt.c: 1422: {
  2276                           ;doprnt.c: 1438: if(flag & 0x03)
  2277  00148A  C091  F090         	movff	printf@flag,??_printf
  2278  00148E  0E03               	movlw	3
  2279  001490  0100               	movlb	0	; () banked
  2280  001492  1790               	andwf	??_printf& (0+255),f,b
  2281  001494  B4D8               	btfsc	status,2,c
  2282  001496  D003               	goto	l1461
  2283                           
  2284                           ; BSR set to: 0
  2285                           ;doprnt.c: 1439: (putch('-') );
  2286  001498  0E2D               	movlw	45
  2287  00149A  ECD9  F00F         	call	_putch
  2288  00149E                     l1461:
  2289                           
  2290                           ;doprnt.c: 1469: }
  2291                           ;doprnt.c: 1472: prec = c;
  2292  00149E  C099  F092         	movff	printf@c,printf@prec
  2293                           
  2294                           ;doprnt.c: 1474: while(prec--) {
  2295  0014A2  D02C               	goto	l1467
  2296  0014A4                     l1463:
  2297                           
  2298                           ;doprnt.c: 1478: {
  2299                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2300  0014A4  0100               	movlb	0	; () banked
  2301  0014A6  5192               	movf	printf@prec& (0+255),w,b
  2302  0014A8  0D02               	mullw	2
  2303  0014AA  0E01               	movlw	low _dpowers
  2304  0014AC  24F3               	addwf	prodl,w,c
  2305  0014AE  6EF6               	movwf	tblptrl,c
  2306  0014B0  0E10               	movlw	high _dpowers
  2307  0014B2  20F4               	addwfc	prodh,w,c
  2308  0014B4  6EF7               	movwf	tblptrh,c
  2309  0014B6                     	if	1	;There are 3 active tblptr bytes
  2310  0014B6  6AF8               	clrf	tblptru,c
  2311  0014B8  0E00               	movlw	low (__mediumconst shr (0+16))
  2312  0014BA  22F8               	addwfc	tblptru,f,c
  2313  0014BC                     	endif
  2314  0014BC  0009               	tblrd		*+
  2315  0014BE  CFF5 F082          	movff	tablat,___lwdiv@divisor
  2316  0014C2  000A               	tblrd		*-
  2317  0014C4  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  2318  0014C8  C097  F080         	movff	printf@val,___lwdiv@dividend
  2319  0014CC  C098  F081         	movff	printf@val+1,___lwdiv@dividend+1
  2320  0014D0  EC00  F00E         	call	___lwdiv	;wreg free
  2321  0014D4  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  2322  0014D8  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  2323  0014DC  0E00               	movlw	0
  2324  0014DE  0100               	movlb	0	; () banked
  2325  0014E0  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  2326  0014E2  0E0A               	movlw	10
  2327  0014E4  6F89               	movwf	___lwmod@divisor& (0+255),b
  2328  0014E6  ECA3  F00E         	call	___lwmod	;wreg free
  2329  0014EA  0100               	movlb	0	; () banked
  2330  0014EC  5187               	movf	?___lwmod& (0+255),w,b
  2331  0014EE  0F30               	addlw	48
  2332  0014F0  0100               	movlb	0	; () banked
  2333  0014F2  6F99               	movwf	printf@c& (0+255),b
  2334                           
  2335                           ; BSR set to: 0
  2336                           ;doprnt.c: 1523: }
  2337                           ;doprnt.c: 1524: (putch(c) );
  2338  0014F4  0100               	movlb	0	; () banked
  2339  0014F6  5199               	movf	printf@c& (0+255),w,b
  2340  0014F8  ECD9  F00F         	call	_putch
  2341  0014FC                     l1467:
  2342  0014FC  0100               	movlb	0	; () banked
  2343  0014FE  0792               	decf	printf@prec& (0+255),f,b
  2344  001500  0100               	movlb	0	; () banked
  2345  001502  2992               	incf	printf@prec& (0+255),w,b
  2346  001504  A4D8               	btfss	status,2,c
  2347  001506  D7CE               	goto	l1463
  2348  001508                     l1469:
  2349  001508  C08C  FFF6         	movff	printf@f,tblptrl
  2350  00150C  C08D  FFF7         	movff	printf@f+1,tblptrh
  2351  001510  0100               	movlb	0	; () banked
  2352  001512  4B8C               	infsnz	printf@f& (0+255),f,b
  2353  001514  2B8D               	incf	(printf@f+1)& (0+255),f,b
  2354  001516                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2355  001516  6AF8               	clrf	tblptru,c
  2356  001518                     	endif
  2357  001518                     	if	0	;tblptru may be non-zero
  2358  001518                     	endif
  2359  001518  0008               	tblrd		*
  2360  00151A  CFF5 F099          	movff	tablat,printf@c
  2361  00151E  0100               	movlb	0	; () banked
  2362  001520  5199               	movf	printf@c& (0+255),w,b
  2363  001522  B4D8               	btfsc	status,2,c
  2364  001524  0012               	return	
  2365  001526  D70B               	goto	l1409
  2366  001528                     __end_of_printf:
  2367                           	opt stack 0
  2368                           tblptru	equ	0xFF8
  2369                           tblptrh	equ	0xFF7
  2370                           tblptrl	equ	0xFF6
  2371                           tablat	equ	0xFF5
  2372                           prodh	equ	0xFF4
  2373                           prodl	equ	0xFF3
  2374                           intcon	equ	0xFF2
  2375                           indf0	equ	0xFEF
  2376                           postinc0	equ	0xFEE
  2377                           fsr0h	equ	0xFEA
  2378                           fsr0l	equ	0xFE9
  2379                           wreg	equ	0xFE8
  2380                           postdec1	equ	0xFE5
  2381                           plusw1	equ	0xFE3
  2382                           fsr1l	equ	0xFE1
  2383                           indf2	equ	0xFDF
  2384                           postinc2	equ	0xFDE
  2385                           postdec2	equ	0xFDD
  2386                           plusw2	equ	0xFDB
  2387                           fsr2h	equ	0xFDA
  2388                           fsr2l	equ	0xFD9
  2389                           status	equ	0xFD8
  2390                           
  2391 ;; *************** function _putch *****************
  2392 ;; Defined at:
  2393 ;;		line 31 in file "lcd.c"
  2394 ;; Parameters:    Size  Location     Type
  2395 ;;  data            1    wreg     unsigned char 
  2396 ;; Auto vars:     Size  Location     Type
  2397 ;;  data            1    2[BANK0 ] unsigned char 
  2398 ;; Return value:  Size  Location     Type
  2399 ;;                  1    wreg      void 
  2400 ;; Registers used:
  2401 ;;		wreg, status,2, status,0, cstack
  2402 ;; Tracked objects:
  2403 ;;		On entry : 0/0
  2404 ;;		On exit  : 0/0
  2405 ;;		Unchanged: 0/0
  2406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2408 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2410 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2411 ;;Total ram usage:        1 bytes
  2412 ;; Hardware stack levels used:    1
  2413 ;; Hardware stack levels required when called:    7
  2414 ;; This function calls:
  2415 ;;		_lcdNibble
  2416 ;; This function is called by:
  2417 ;;		_printf
  2418 ;; This function uses a non-reentrant model
  2419 ;;
  2420                           
  2421                           	psect	text6
  2422  001FB2                     __ptext6:
  2423                           	opt stack 0
  2424  001FB2                     _putch:
  2425                           	opt stack 21
  2426                           
  2427                           ; BSR set to: 0
  2428                           ;incstack = 0
  2429                           ;putch@data stored from wreg
  2430  001FB2  0100               	movlb	0	; () banked
  2431  001FB4  6F82               	movwf	putch@data& (0+255),b
  2432                           
  2433                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  2434  001FB6  848C               	bsf	3980,2,c	;volatile
  2435                           
  2436                           ;lcd.c: 33: lcdNibble(data);
  2437  001FB8  0100               	movlb	0	; () banked
  2438  001FBA  5182               	movf	putch@data& (0+255),w,b
  2439  001FBC  EC3C  F00E         	call	_lcdNibble
  2440  001FC0  0012               	return		;funcret
  2441  001FC2                     __end_of_putch:
  2442                           	opt stack 0
  2443                           tblptru	equ	0xFF8
  2444                           tblptrh	equ	0xFF7
  2445                           tblptrl	equ	0xFF6
  2446                           tablat	equ	0xFF5
  2447                           prodh	equ	0xFF4
  2448                           prodl	equ	0xFF3
  2449                           intcon	equ	0xFF2
  2450                           indf0	equ	0xFEF
  2451                           postinc0	equ	0xFEE
  2452                           fsr0h	equ	0xFEA
  2453                           fsr0l	equ	0xFE9
  2454                           wreg	equ	0xFE8
  2455                           postdec1	equ	0xFE5
  2456                           plusw1	equ	0xFE3
  2457                           fsr1l	equ	0xFE1
  2458                           indf2	equ	0xFDF
  2459                           postinc2	equ	0xFDE
  2460                           postdec2	equ	0xFDD
  2461                           plusw2	equ	0xFDB
  2462                           fsr2h	equ	0xFDA
  2463                           fsr2l	equ	0xFD9
  2464                           status	equ	0xFD8
  2465                           
  2466 ;; *************** function ___lwmod *****************
  2467 ;; Defined at:
  2468 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  2469 ;; Parameters:    Size  Location     Type
  2470 ;;  dividend        2    7[BANK0 ] unsigned int 
  2471 ;;  divisor         2    9[BANK0 ] unsigned int 
  2472 ;; Auto vars:     Size  Location     Type
  2473 ;;  counter         1   11[BANK0 ] unsigned char 
  2474 ;; Return value:  Size  Location     Type
  2475 ;;                  2    7[BANK0 ] unsigned int 
  2476 ;; Registers used:
  2477 ;;		wreg, status,2, status,0
  2478 ;; Tracked objects:
  2479 ;;		On entry : 0/0
  2480 ;;		On exit  : 0/0
  2481 ;;		Unchanged: 0/0
  2482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2483 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2484 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2486 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2487 ;;Total ram usage:        5 bytes
  2488 ;; Hardware stack levels used:    1
  2489 ;; Hardware stack levels required when called:    6
  2490 ;; This function calls:
  2491 ;;		Nothing
  2492 ;; This function is called by:
  2493 ;;		_printf
  2494 ;; This function uses a non-reentrant model
  2495 ;;
  2496                           
  2497                           	psect	text7
  2498  001D46                     __ptext7:
  2499                           	opt stack 0
  2500  001D46                     ___lwmod:
  2501                           	opt stack 22
  2502                           
  2503                           ;incstack = 0
  2504  001D46  0100               	movlb	0	; () banked
  2505  001D48  5189               	movf	___lwmod@divisor& (0+255),w,b
  2506  001D4A  0100               	movlb	0	; () banked
  2507  001D4C  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  2508  001D4E  B4D8               	btfsc	status,2,c
  2509  001D50  D026               	goto	l622
  2510                           
  2511                           ; BSR set to: 0
  2512  001D52  0E01               	movlw	1
  2513  001D54  0100               	movlb	0	; () banked
  2514  001D56  6F8B               	movwf	___lwmod@counter& (0+255),b
  2515  001D58  D006               	goto	l1379
  2516  001D5A                     l1377:
  2517                           
  2518                           ; BSR set to: 0
  2519  001D5A  0100               	movlb	0	; () banked
  2520  001D5C  90D8               	bcf	status,0,c
  2521  001D5E  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  2522  001D60  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  2523  001D62  0100               	movlb	0	; () banked
  2524  001D64  2B8B               	incf	___lwmod@counter& (0+255),f,b
  2525  001D66                     l1379:
  2526                           
  2527                           ; BSR set to: 0
  2528  001D66  0100               	movlb	0	; () banked
  2529  001D68  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  2530  001D6A  D7F7               	goto	l1377
  2531  001D6C                     l1381:
  2532                           
  2533                           ; BSR set to: 0
  2534  001D6C  0100               	movlb	0	; () banked
  2535  001D6E  5189               	movf	___lwmod@divisor& (0+255),w,b
  2536  001D70  0100               	movlb	0	; () banked
  2537  001D72  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  2538  001D74  0100               	movlb	0	; () banked
  2539  001D76  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  2540  001D78  0100               	movlb	0	; () banked
  2541  001D7A  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  2542  001D7C  A0D8               	btfss	status,0,c
  2543  001D7E  D008               	goto	l1385
  2544                           
  2545                           ; BSR set to: 0
  2546  001D80  0100               	movlb	0	; () banked
  2547  001D82  5189               	movf	___lwmod@divisor& (0+255),w,b
  2548  001D84  0100               	movlb	0	; () banked
  2549  001D86  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  2550  001D88  0100               	movlb	0	; () banked
  2551  001D8A  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  2552  001D8C  0100               	movlb	0	; () banked
  2553  001D8E  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  2554  001D90                     l1385:
  2555                           
  2556                           ; BSR set to: 0
  2557  001D90  0100               	movlb	0	; () banked
  2558  001D92  90D8               	bcf	status,0,c
  2559  001D94  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  2560  001D96  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  2561                           
  2562                           ; BSR set to: 0
  2563  001D98  0100               	movlb	0	; () banked
  2564  001D9A  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  2565  001D9C  D7E7               	goto	l1381
  2566  001D9E                     l622:
  2567                           
  2568                           ; BSR set to: 0
  2569  001D9E  C087  F087         	movff	___lwmod@dividend,?___lwmod
  2570  001DA2  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  2571                           
  2572                           ; BSR set to: 0
  2573  001DA6  0012               	return		;funcret
  2574  001DA8                     __end_of___lwmod:
  2575                           	opt stack 0
  2576                           tblptru	equ	0xFF8
  2577                           tblptrh	equ	0xFF7
  2578                           tblptrl	equ	0xFF6
  2579                           tablat	equ	0xFF5
  2580                           prodh	equ	0xFF4
  2581                           prodl	equ	0xFF3
  2582                           intcon	equ	0xFF2
  2583                           indf0	equ	0xFEF
  2584                           postinc0	equ	0xFEE
  2585                           fsr0h	equ	0xFEA
  2586                           fsr0l	equ	0xFE9
  2587                           wreg	equ	0xFE8
  2588                           postdec1	equ	0xFE5
  2589                           plusw1	equ	0xFE3
  2590                           fsr1l	equ	0xFE1
  2591                           indf2	equ	0xFDF
  2592                           postinc2	equ	0xFDE
  2593                           postdec2	equ	0xFDD
  2594                           plusw2	equ	0xFDB
  2595                           fsr2h	equ	0xFDA
  2596                           fsr2l	equ	0xFD9
  2597                           status	equ	0xFD8
  2598                           
  2599 ;; *************** function ___lwdiv *****************
  2600 ;; Defined at:
  2601 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  2602 ;; Parameters:    Size  Location     Type
  2603 ;;  dividend        2    0[BANK0 ] unsigned int 
  2604 ;;  divisor         2    2[BANK0 ] unsigned int 
  2605 ;; Auto vars:     Size  Location     Type
  2606 ;;  quotient        2    4[BANK0 ] unsigned int 
  2607 ;;  counter         1    6[BANK0 ] unsigned char 
  2608 ;; Return value:  Size  Location     Type
  2609 ;;                  2    0[BANK0 ] unsigned int 
  2610 ;; Registers used:
  2611 ;;		wreg, status,2, status,0
  2612 ;; Tracked objects:
  2613 ;;		On entry : 0/0
  2614 ;;		On exit  : 0/0
  2615 ;;		Unchanged: 0/0
  2616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2617 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2618 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2620 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2621 ;;Total ram usage:        7 bytes
  2622 ;; Hardware stack levels used:    1
  2623 ;; Hardware stack levels required when called:    6
  2624 ;; This function calls:
  2625 ;;		Nothing
  2626 ;; This function is called by:
  2627 ;;		_printf
  2628 ;; This function uses a non-reentrant model
  2629 ;;
  2630                           
  2631                           	psect	text8
  2632  001C00                     __ptext8:
  2633                           	opt stack 0
  2634  001C00                     ___lwdiv:
  2635                           	opt stack 22
  2636                           
  2637                           ; BSR set to: 0
  2638                           ;incstack = 0
  2639  001C00  0E00               	movlw	0
  2640  001C02  0100               	movlb	0	; () banked
  2641  001C04  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
  2642  001C06  0E00               	movlw	0
  2643  001C08  6F84               	movwf	___lwdiv@quotient& (0+255),b
  2644                           
  2645                           ; BSR set to: 0
  2646  001C0A  0100               	movlb	0	; () banked
  2647  001C0C  5182               	movf	___lwdiv@divisor& (0+255),w,b
  2648  001C0E  0100               	movlb	0	; () banked
  2649  001C10  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  2650  001C12  B4D8               	btfsc	status,2,c
  2651  001C14  D02C               	goto	l612
  2652                           
  2653                           ; BSR set to: 0
  2654  001C16  0E01               	movlw	1
  2655  001C18  0100               	movlb	0	; () banked
  2656  001C1A  6F86               	movwf	___lwdiv@counter& (0+255),b
  2657  001C1C  D006               	goto	l1359
  2658  001C1E                     l1357:
  2659                           
  2660                           ; BSR set to: 0
  2661  001C1E  0100               	movlb	0	; () banked
  2662  001C20  90D8               	bcf	status,0,c
  2663  001C22  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  2664  001C24  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  2665  001C26  0100               	movlb	0	; () banked
  2666  001C28  2B86               	incf	___lwdiv@counter& (0+255),f,b
  2667  001C2A                     l1359:
  2668                           
  2669                           ; BSR set to: 0
  2670  001C2A  0100               	movlb	0	; () banked
  2671  001C2C  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  2672  001C2E  D7F7               	goto	l1357
  2673  001C30                     l1361:
  2674                           
  2675                           ; BSR set to: 0
  2676  001C30  0100               	movlb	0	; () banked
  2677  001C32  90D8               	bcf	status,0,c
  2678  001C34  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
  2679  001C36  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  2680                           
  2681                           ; BSR set to: 0
  2682  001C38  0100               	movlb	0	; () banked
  2683  001C3A  5182               	movf	___lwdiv@divisor& (0+255),w,b
  2684  001C3C  0100               	movlb	0	; () banked
  2685  001C3E  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  2686  001C40  0100               	movlb	0	; () banked
  2687  001C42  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  2688  001C44  0100               	movlb	0	; () banked
  2689  001C46  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  2690  001C48  A0D8               	btfss	status,0,c
  2691  001C4A  D00A               	goto	l1369
  2692                           
  2693                           ; BSR set to: 0
  2694  001C4C  0100               	movlb	0	; () banked
  2695  001C4E  5182               	movf	___lwdiv@divisor& (0+255),w,b
  2696  001C50  0100               	movlb	0	; () banked
  2697  001C52  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  2698  001C54  0100               	movlb	0	; () banked
  2699  001C56  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  2700  001C58  0100               	movlb	0	; () banked
  2701  001C5A  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  2702                           
  2703                           ; BSR set to: 0
  2704  001C5C  0100               	movlb	0	; () banked
  2705  001C5E  8184               	bsf	___lwdiv@quotient& (0+255),0,b
  2706  001C60                     l1369:
  2707                           
  2708                           ; BSR set to: 0
  2709  001C60  0100               	movlb	0	; () banked
  2710  001C62  90D8               	bcf	status,0,c
  2711  001C64  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  2712  001C66  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  2713                           
  2714                           ; BSR set to: 0
  2715  001C68  0100               	movlb	0	; () banked
  2716  001C6A  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
  2717  001C6C  D7E1               	goto	l1361
  2718  001C6E                     l612:
  2719                           
  2720                           ; BSR set to: 0
  2721  001C6E  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
  2722  001C72  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2723                           
  2724                           ; BSR set to: 0
  2725  001C76  0012               	return		;funcret
  2726  001C78                     __end_of___lwdiv:
  2727                           	opt stack 0
  2728                           tblptru	equ	0xFF8
  2729                           tblptrh	equ	0xFF7
  2730                           tblptrl	equ	0xFF6
  2731                           tablat	equ	0xFF5
  2732                           prodh	equ	0xFF4
  2733                           prodl	equ	0xFF3
  2734                           intcon	equ	0xFF2
  2735                           indf0	equ	0xFEF
  2736                           postinc0	equ	0xFEE
  2737                           fsr0h	equ	0xFEA
  2738                           fsr0l	equ	0xFE9
  2739                           wreg	equ	0xFE8
  2740                           postdec1	equ	0xFE5
  2741                           plusw1	equ	0xFE3
  2742                           fsr1l	equ	0xFE1
  2743                           indf2	equ	0xFDF
  2744                           postinc2	equ	0xFDE
  2745                           postdec2	equ	0xFDD
  2746                           plusw2	equ	0xFDB
  2747                           fsr2h	equ	0xFDA
  2748                           fsr2l	equ	0xFD9
  2749                           status	equ	0xFD8
  2750                           
  2751 ;; *************** function _moveXMotors *****************
  2752 ;; Defined at:
  2753 ;;		line 85 in file "modules.c"
  2754 ;; Parameters:    Size  Location     Type
  2755 ;;		None
  2756 ;; Auto vars:     Size  Location     Type
  2757 ;;		None
  2758 ;; Return value:  Size  Location     Type
  2759 ;;                  2   28[None  ] int 
  2760 ;; Registers used:
  2761 ;;		None
  2762 ;; Tracked objects:
  2763 ;;		On entry : 0/0
  2764 ;;		On exit  : 0/0
  2765 ;;		Unchanged: 0/0
  2766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2771 ;;Total ram usage:        0 bytes
  2772 ;; Hardware stack levels used:    1
  2773 ;; Hardware stack levels required when called:    6
  2774 ;; This function calls:
  2775 ;;		Nothing
  2776 ;; This function is called by:
  2777 ;;		_mainloop
  2778 ;; This function uses a non-reentrant model
  2779 ;;
  2780                           
  2781                           	psect	text9
  2782  001FEE                     __ptext9:
  2783                           	opt stack 0
  2784  001FEE                     _moveXMotors:
  2785                           	opt stack 23
  2786                           
  2787                           ; BSR set to: 0
  2788                           ;incstack = 0
  2789  001FEE  0012               	return		;funcret
  2790  001FF0                     __end_of_moveXMotors:
  2791                           	opt stack 0
  2792                           tblptru	equ	0xFF8
  2793                           tblptrh	equ	0xFF7
  2794                           tblptrl	equ	0xFF6
  2795                           tablat	equ	0xFF5
  2796                           prodh	equ	0xFF4
  2797                           prodl	equ	0xFF3
  2798                           intcon	equ	0xFF2
  2799                           indf0	equ	0xFEF
  2800                           postinc0	equ	0xFEE
  2801                           fsr0h	equ	0xFEA
  2802                           fsr0l	equ	0xFE9
  2803                           wreg	equ	0xFE8
  2804                           postdec1	equ	0xFE5
  2805                           plusw1	equ	0xFE3
  2806                           fsr1l	equ	0xFE1
  2807                           indf2	equ	0xFDF
  2808                           postinc2	equ	0xFDE
  2809                           postdec2	equ	0xFDD
  2810                           plusw2	equ	0xFDB
  2811                           fsr2h	equ	0xFDA
  2812                           fsr2l	equ	0xFD9
  2813                           status	equ	0xFD8
  2814                           
  2815 ;; *************** function _moveSmallNose *****************
  2816 ;; Defined at:
  2817 ;;		line 103 in file "modules.c"
  2818 ;; Parameters:    Size  Location     Type
  2819 ;;  prev            2    0[BANK0 ] PTR int 
  2820 ;;		 -> main@smallNose(2), 
  2821 ;;  next            2    2[BANK0 ] int 
  2822 ;; Auto vars:     Size  Location     Type
  2823 ;;		None
  2824 ;; Return value:  Size  Location     Type
  2825 ;;                  1    wreg      void 
  2826 ;; Registers used:
  2827 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2828 ;; Tracked objects:
  2829 ;;		On entry : 0/0
  2830 ;;		On exit  : 0/0
  2831 ;;		Unchanged: 0/0
  2832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2833 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2835 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2836 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2837 ;;Total ram usage:        7 bytes
  2838 ;; Hardware stack levels used:    1
  2839 ;; Hardware stack levels required when called:    6
  2840 ;; This function calls:
  2841 ;;		Nothing
  2842 ;; This function is called by:
  2843 ;;		_mainloop
  2844 ;;		_main
  2845 ;; This function uses a non-reentrant model
  2846 ;;
  2847                           
  2848                           	psect	text10
  2849  001B08                     __ptext10:
  2850                           	opt stack 0
  2851  001B08                     _moveSmallNose:
  2852                           	opt stack 24
  2853                           
  2854                           ;modules.c: 106: if (*prev == next)return;
  2855                           
  2856                           ;incstack = 0
  2857  001B08  C080  FFD9         	movff	moveSmallNose@prev,fsr2l
  2858  001B0C  C081  FFDA         	movff	moveSmallNose@prev+1,fsr2h
  2859  001B10  0100               	movlb	0	; () banked
  2860  001B12  5182               	movf	moveSmallNose@next& (0+255),w,b
  2861  001B14  18DE               	xorwf	postinc2,w,c
  2862  001B16  E10B               	bnz	l1619
  2863  001B18  0100               	movlb	0	; () banked
  2864  001B1A  5183               	movf	(moveSmallNose@next+1)& (0+255),w,b
  2865  001B1C  18DE               	xorwf	postinc2,w,c
  2866  001B1E  B4D8               	btfsc	status,2,c
  2867  001B20  0012               	return	
  2868  001B22  D005               	goto	l1619
  2869  001B24                     l1617:
  2870                           
  2871                           ; BSR set to: 0
  2872                           ;modules.c: 109: *prev++;
  2873  001B24  0E02               	movlw	2
  2874  001B26  0100               	movlb	0	; () banked
  2875  001B28  2780               	addwf	moveSmallNose@prev& (0+255),f,b
  2876  001B2A  0E00               	movlw	0
  2877  001B2C  2381               	addwfc	(moveSmallNose@prev+1)& (0+255),f,b
  2878  001B2E                     l1619:
  2879                           
  2880                           ; BSR set to: 0
  2881  001B2E  C080  FFD9         	movff	moveSmallNose@prev,fsr2l
  2882  001B32  C081  FFDA         	movff	moveSmallNose@prev+1,fsr2h
  2883  001B36  0100               	movlb	0	; () banked
  2884  001B38  5182               	movf	moveSmallNose@next& (0+255),w,b
  2885  001B3A  5CDE               	subwf	postinc2,w,c
  2886  001B3C  50DE               	movf	postinc2,w,c
  2887  001B3E  0A80               	xorlw	128
  2888  001B40  0100               	movlb	0	; () banked
  2889  001B42  6F86               	movwf	(??_moveSmallNose+2)& (0+255),b
  2890  001B44  0100               	movlb	0	; () banked
  2891  001B46  5183               	movf	(moveSmallNose@next+1)& (0+255),w,b
  2892  001B48  0A80               	xorlw	128
  2893  001B4A  0100               	movlb	0	; () banked
  2894  001B4C  5986               	subwfb	(??_moveSmallNose+2)& (0+255),w,b
  2895  001B4E  B0D8               	btfsc	status,0,c
  2896  001B50  D006               	goto	l1623
  2897  001B52  D7E8               	goto	l1617
  2898  001B54                     l1621:
  2899                           
  2900                           ; BSR set to: 0
  2901                           ;modules.c: 113: *prev--;
  2902  001B54  0E02               	movlw	2
  2903  001B56  0100               	movlb	0	; () banked
  2904  001B58  5F80               	subwf	moveSmallNose@prev& (0+255),f,b
  2905  001B5A  0E00               	movlw	0
  2906  001B5C  5B81               	subwfb	(moveSmallNose@prev+1)& (0+255),f,b
  2907  001B5E                     l1623:
  2908                           
  2909                           ; BSR set to: 0
  2910  001B5E  C080  FFD9         	movff	moveSmallNose@prev,fsr2l
  2911  001B62  C081  FFDA         	movff	moveSmallNose@prev+1,fsr2h
  2912  001B66  50DE               	movf	postinc2,w,c
  2913  001B68  0100               	movlb	0	; () banked
  2914  001B6A  5D82               	subwf	moveSmallNose@next& (0+255),w,b
  2915  001B6C  0100               	movlb	0	; () banked
  2916  001B6E  5183               	movf	(moveSmallNose@next+1)& (0+255),w,b
  2917  001B70  0A80               	xorlw	128
  2918  001B72  0100               	movlb	0	; () banked
  2919  001B74  6F86               	movwf	(??_moveSmallNose+2)& (0+255),b
  2920  001B76  50DE               	movf	postinc2,w,c
  2921  001B78  0A80               	xorlw	128
  2922  001B7A  0100               	movlb	0	; () banked
  2923  001B7C  5986               	subwfb	(??_moveSmallNose+2)& (0+255),w,b
  2924  001B7E  B0D8               	btfsc	status,0,c
  2925  001B80  0012               	return	
  2926  001B82  D7E8               	goto	l1621
  2927  001B84                     __end_of_moveSmallNose:
  2928                           	opt stack 0
  2929                           tblptru	equ	0xFF8
  2930                           tblptrh	equ	0xFF7
  2931                           tblptrl	equ	0xFF6
  2932                           tablat	equ	0xFF5
  2933                           prodh	equ	0xFF4
  2934                           prodl	equ	0xFF3
  2935                           intcon	equ	0xFF2
  2936                           indf0	equ	0xFEF
  2937                           postinc0	equ	0xFEE
  2938                           fsr0h	equ	0xFEA
  2939                           fsr0l	equ	0xFE9
  2940                           wreg	equ	0xFE8
  2941                           postdec1	equ	0xFE5
  2942                           plusw1	equ	0xFE3
  2943                           fsr1l	equ	0xFE1
  2944                           indf2	equ	0xFDF
  2945                           postinc2	equ	0xFDE
  2946                           postdec2	equ	0xFDD
  2947                           plusw2	equ	0xFDB
  2948                           fsr2h	equ	0xFDA
  2949                           fsr2l	equ	0xFD9
  2950                           status	equ	0xFD8
  2951                           
  2952 ;; *************** function _moveBigNose *****************
  2953 ;; Defined at:
  2954 ;;		line 89 in file "modules.c"
  2955 ;; Parameters:    Size  Location     Type
  2956 ;;  prev            2    0[BANK0 ] PTR int 
  2957 ;;		 -> main@bigNose(2), 
  2958 ;;  next            2    2[BANK0 ] int 
  2959 ;; Auto vars:     Size  Location     Type
  2960 ;;		None
  2961 ;; Return value:  Size  Location     Type
  2962 ;;                  1    wreg      void 
  2963 ;; Registers used:
  2964 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2965 ;; Tracked objects:
  2966 ;;		On entry : 0/0
  2967 ;;		On exit  : 0/0
  2968 ;;		Unchanged: 0/0
  2969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2970 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2972 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2973 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2974 ;;Total ram usage:        7 bytes
  2975 ;; Hardware stack levels used:    1
  2976 ;; Hardware stack levels required when called:    6
  2977 ;; This function calls:
  2978 ;;		Nothing
  2979 ;; This function is called by:
  2980 ;;		_mainloop
  2981 ;;		_main
  2982 ;; This function uses a non-reentrant model
  2983 ;;
  2984                           
  2985                           	psect	text11
  2986  001B84                     __ptext11:
  2987                           	opt stack 0
  2988  001B84                     _moveBigNose:
  2989                           	opt stack 24
  2990                           
  2991                           ;modules.c: 92: if (*prev == next)return;
  2992                           
  2993                           ; BSR set to: 0
  2994                           ;incstack = 0
  2995  001B84  C080  FFD9         	movff	moveBigNose@prev,fsr2l
  2996  001B88  C081  FFDA         	movff	moveBigNose@prev+1,fsr2h
  2997  001B8C  0100               	movlb	0	; () banked
  2998  001B8E  5182               	movf	moveBigNose@next& (0+255),w,b
  2999  001B90  18DE               	xorwf	postinc2,w,c
  3000  001B92  E10B               	bnz	l1631
  3001  001B94  0100               	movlb	0	; () banked
  3002  001B96  5183               	movf	(moveBigNose@next+1)& (0+255),w,b
  3003  001B98  18DE               	xorwf	postinc2,w,c
  3004  001B9A  B4D8               	btfsc	status,2,c
  3005  001B9C  0012               	return	
  3006  001B9E  D005               	goto	l1631
  3007  001BA0                     l1629:
  3008                           
  3009                           ; BSR set to: 0
  3010                           ;modules.c: 95: *prev++;
  3011  001BA0  0E02               	movlw	2
  3012  001BA2  0100               	movlb	0	; () banked
  3013  001BA4  2780               	addwf	moveBigNose@prev& (0+255),f,b
  3014  001BA6  0E00               	movlw	0
  3015  001BA8  2381               	addwfc	(moveBigNose@prev+1)& (0+255),f,b
  3016  001BAA                     l1631:
  3017                           
  3018                           ; BSR set to: 0
  3019  001BAA  C080  FFD9         	movff	moveBigNose@prev,fsr2l
  3020  001BAE  C081  FFDA         	movff	moveBigNose@prev+1,fsr2h
  3021  001BB2  0100               	movlb	0	; () banked
  3022  001BB4  5182               	movf	moveBigNose@next& (0+255),w,b
  3023  001BB6  5CDE               	subwf	postinc2,w,c
  3024  001BB8  50DE               	movf	postinc2,w,c
  3025  001BBA  0A80               	xorlw	128
  3026  001BBC  0100               	movlb	0	; () banked
  3027  001BBE  6F86               	movwf	(??_moveBigNose+2)& (0+255),b
  3028  001BC0  0100               	movlb	0	; () banked
  3029  001BC2  5183               	movf	(moveBigNose@next+1)& (0+255),w,b
  3030  001BC4  0A80               	xorlw	128
  3031  001BC6  0100               	movlb	0	; () banked
  3032  001BC8  5986               	subwfb	(??_moveBigNose+2)& (0+255),w,b
  3033  001BCA  B0D8               	btfsc	status,0,c
  3034  001BCC  D006               	goto	l1635
  3035  001BCE  D7E8               	goto	l1629
  3036  001BD0                     l1633:
  3037                           
  3038                           ; BSR set to: 0
  3039                           ;modules.c: 99: *prev--;
  3040  001BD0  0E02               	movlw	2
  3041  001BD2  0100               	movlb	0	; () banked
  3042  001BD4  5F80               	subwf	moveBigNose@prev& (0+255),f,b
  3043  001BD6  0E00               	movlw	0
  3044  001BD8  5B81               	subwfb	(moveBigNose@prev+1)& (0+255),f,b
  3045  001BDA                     l1635:
  3046                           
  3047                           ; BSR set to: 0
  3048  001BDA  C080  FFD9         	movff	moveBigNose@prev,fsr2l
  3049  001BDE  C081  FFDA         	movff	moveBigNose@prev+1,fsr2h
  3050  001BE2  50DE               	movf	postinc2,w,c
  3051  001BE4  0100               	movlb	0	; () banked
  3052  001BE6  5D82               	subwf	moveBigNose@next& (0+255),w,b
  3053  001BE8  0100               	movlb	0	; () banked
  3054  001BEA  5183               	movf	(moveBigNose@next+1)& (0+255),w,b
  3055  001BEC  0A80               	xorlw	128
  3056  001BEE  0100               	movlb	0	; () banked
  3057  001BF0  6F86               	movwf	(??_moveBigNose+2)& (0+255),b
  3058  001BF2  50DE               	movf	postinc2,w,c
  3059  001BF4  0A80               	xorlw	128
  3060  001BF6  0100               	movlb	0	; () banked
  3061  001BF8  5986               	subwfb	(??_moveBigNose+2)& (0+255),w,b
  3062  001BFA  B0D8               	btfsc	status,0,c
  3063  001BFC  0012               	return	
  3064  001BFE  D7E8               	goto	l1633
  3065  001C00                     __end_of_moveBigNose:
  3066                           	opt stack 0
  3067                           tblptru	equ	0xFF8
  3068                           tblptrh	equ	0xFF7
  3069                           tblptrl	equ	0xFF6
  3070                           tablat	equ	0xFF5
  3071                           prodh	equ	0xFF4
  3072                           prodl	equ	0xFF3
  3073                           intcon	equ	0xFF2
  3074                           indf0	equ	0xFEF
  3075                           postinc0	equ	0xFEE
  3076                           fsr0h	equ	0xFEA
  3077                           fsr0l	equ	0xFE9
  3078                           wreg	equ	0xFE8
  3079                           postdec1	equ	0xFE5
  3080                           plusw1	equ	0xFE3
  3081                           fsr1l	equ	0xFE1
  3082                           indf2	equ	0xFDF
  3083                           postinc2	equ	0xFDE
  3084                           postdec2	equ	0xFDD
  3085                           plusw2	equ	0xFDB
  3086                           fsr2h	equ	0xFDA
  3087                           fsr2l	equ	0xFD9
  3088                           status	equ	0xFD8
  3089                           
  3090 ;; *************** function _getTime *****************
  3091 ;; Defined at:
  3092 ;;		line 79 in file "modules.c"
  3093 ;; Parameters:    Size  Location     Type
  3094 ;;		None
  3095 ;; Auto vars:     Size  Location     Type
  3096 ;;  time            2    2[BANK0 ] int 
  3097 ;; Return value:  Size  Location     Type
  3098 ;;                  2    0[BANK0 ] int 
  3099 ;; Registers used:
  3100 ;;		wreg, status,2
  3101 ;; Tracked objects:
  3102 ;;		On entry : 0/0
  3103 ;;		On exit  : 0/0
  3104 ;;		Unchanged: 0/0
  3105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3106 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3107 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3109 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3110 ;;Total ram usage:        4 bytes
  3111 ;; Hardware stack levels used:    1
  3112 ;; Hardware stack levels required when called:    6
  3113 ;; This function calls:
  3114 ;;		Nothing
  3115 ;; This function is called by:
  3116 ;;		_mainloop
  3117 ;; This function uses a non-reentrant model
  3118 ;;
  3119                           
  3120                           	psect	text12
  3121  001F9E                     __ptext12:
  3122                           	opt stack 0
  3123  001F9E                     _getTime:
  3124                           	opt stack 23
  3125                           
  3126                           ;modules.c: 81: int time = 0;
  3127                           
  3128                           ; BSR set to: 0
  3129                           ;incstack = 0
  3130  001F9E  0E00               	movlw	0
  3131  001FA0  0100               	movlb	0	; () banked
  3132  001FA2  6F83               	movwf	(getTime@time+1)& (0+255),b
  3133  001FA4  0E00               	movlw	0
  3134  001FA6  6F82               	movwf	getTime@time& (0+255),b
  3135                           
  3136                           ; BSR set to: 0
  3137                           ;modules.c: 82: return time;
  3138  001FA8  C082  F080         	movff	getTime@time,?_getTime
  3139  001FAC  C083  F081         	movff	getTime@time+1,?_getTime+1
  3140  001FB0  0012               	return	
  3141  001FB2                     __end_of_getTime:
  3142                           	opt stack 0
  3143                           tblptru	equ	0xFF8
  3144                           tblptrh	equ	0xFF7
  3145                           tblptrl	equ	0xFF6
  3146                           tablat	equ	0xFF5
  3147                           prodh	equ	0xFF4
  3148                           prodl	equ	0xFF3
  3149                           intcon	equ	0xFF2
  3150                           indf0	equ	0xFEF
  3151                           postinc0	equ	0xFEE
  3152                           fsr0h	equ	0xFEA
  3153                           fsr0l	equ	0xFE9
  3154                           wreg	equ	0xFE8
  3155                           postdec1	equ	0xFE5
  3156                           plusw1	equ	0xFE3
  3157                           fsr1l	equ	0xFE1
  3158                           indf2	equ	0xFDF
  3159                           postinc2	equ	0xFDE
  3160                           postdec2	equ	0xFDD
  3161                           plusw2	equ	0xFDB
  3162                           fsr2h	equ	0xFDA
  3163                           fsr2l	equ	0xFD9
  3164                           status	equ	0xFD8
  3165                           
  3166 ;; *************** function _checkC9V *****************
  3167 ;; Defined at:
  3168 ;;		line 127 in file "modules.c"
  3169 ;; Parameters:    Size  Location     Type
  3170 ;;		None
  3171 ;; Auto vars:     Size  Location     Type
  3172 ;;  charged9        2    6[BANK0 ] int 
  3173 ;;  chargedC        2    4[BANK0 ] int 
  3174 ;; Return value:  Size  Location     Type
  3175 ;;                  2    2[BANK0 ] int 
  3176 ;; Registers used:
  3177 ;;		wreg, status,2, status,0, cstack
  3178 ;; Tracked objects:
  3179 ;;		On entry : 0/0
  3180 ;;		On exit  : 0/0
  3181 ;;		Unchanged: 0/0
  3182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3183 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3184 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3186 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3187 ;;Total ram usage:        6 bytes
  3188 ;; Hardware stack levels used:    1
  3189 ;; Hardware stack levels required when called:    7
  3190 ;; This function calls:
  3191 ;;		_AD
  3192 ;; This function is called by:
  3193 ;;		_mainloop
  3194 ;; This function uses a non-reentrant model
  3195 ;;
  3196                           
  3197                           	psect	text13
  3198  001CE0                     __ptext13:
  3199                           	opt stack 0
  3200  001CE0                     _checkC9V:
  3201                           	opt stack 22
  3202                           
  3203                           ;modules.c: 128: int chargedC = AD(1);
  3204                           
  3205                           ; BSR set to: 0
  3206                           ;incstack = 0
  3207  001CE0  0E00               	movlw	0
  3208  001CE2  0100               	movlb	0	; () banked
  3209  001CE4  6F81               	movwf	(AD@pin+1)& (0+255),b
  3210  001CE6  0E01               	movlw	1
  3211  001CE8  6F80               	movwf	AD@pin& (0+255),b
  3212  001CEA  ECF8  F00F         	call	_AD	;wreg free
  3213  001CEE  C080  F084         	movff	?_AD,checkC9V@chargedC
  3214  001CF2  C081  F085         	movff	?_AD+1,checkC9V@chargedC+1
  3215                           
  3216                           ;modules.c: 129: int charged9 = AD(2);
  3217  001CF6  0E00               	movlw	0
  3218  001CF8  0100               	movlb	0	; () banked
  3219  001CFA  6F81               	movwf	(AD@pin+1)& (0+255),b
  3220  001CFC  0E02               	movlw	2
  3221  001CFE  6F80               	movwf	AD@pin& (0+255),b
  3222  001D00  ECF8  F00F         	call	_AD	;wreg free
  3223  001D04  C080  F086         	movff	?_AD,checkC9V@charged9
  3224  001D08  C081  F087         	movff	?_AD+1,checkC9V@charged9+1
  3225                           
  3226                           ;modules.c: 130: if (chargedC) {
  3227  001D0C  0100               	movlb	0	; () banked
  3228  001D0E  5184               	movf	checkC9V@chargedC& (0+255),w,b
  3229  001D10  0100               	movlb	0	; () banked
  3230  001D12  1185               	iorwf	(checkC9V@chargedC+1)& (0+255),w,b
  3231  001D14  B4D8               	btfsc	status,2,c
  3232  001D16  D006               	goto	l1651
  3233                           
  3234                           ; BSR set to: 0
  3235                           ;modules.c: 131: return 1;
  3236  001D18  0E00               	movlw	0
  3237  001D1A  0100               	movlb	0	; () banked
  3238  001D1C  6F83               	movwf	(?_checkC9V+1)& (0+255),b
  3239  001D1E  0E01               	movlw	1
  3240  001D20  6F82               	movwf	?_checkC9V& (0+255),b
  3241                           
  3242                           ; BSR set to: 0
  3243  001D22  0012               	return	
  3244  001D24                     l1651:
  3245                           
  3246                           ; BSR set to: 0
  3247  001D24  0100               	movlb	0	; () banked
  3248  001D26  5186               	movf	checkC9V@charged9& (0+255),w,b
  3249  001D28  0100               	movlb	0	; () banked
  3250  001D2A  1187               	iorwf	(checkC9V@charged9+1)& (0+255),w,b
  3251  001D2C  B4D8               	btfsc	status,2,c
  3252  001D2E  D005               	goto	l1657
  3253                           
  3254                           ; BSR set to: 0
  3255                           ;modules.c: 133: return 2;
  3256  001D30  0E00               	movlw	0
  3257  001D32  0100               	movlb	0	; () banked
  3258  001D34  6F83               	movwf	(?_checkC9V+1)& (0+255),b
  3259  001D36  0E02               	movlw	2
  3260  001D38  D7F3               	goto	L1
  3261  001D3A                     l1657:
  3262                           
  3263                           ; BSR set to: 0
  3264                           ;modules.c: 134: }
  3265                           ;modules.c: 135: return 0;
  3266  001D3A  0E00               	movlw	0
  3267  001D3C  0100               	movlb	0	; () banked
  3268  001D3E  6F83               	movwf	(?_checkC9V+1)& (0+255),b
  3269  001D40  0E00               	movlw	0
  3270  001D42  6F82               	movwf	?_checkC9V& (0+255),b
  3271  001D44  0012               	return	
  3272  001D46                     __end_of_checkC9V:
  3273                           	opt stack 0
  3274                           tblptru	equ	0xFF8
  3275                           tblptrh	equ	0xFF7
  3276                           tblptrl	equ	0xFF6
  3277                           tablat	equ	0xFF5
  3278                           prodh	equ	0xFF4
  3279                           prodl	equ	0xFF3
  3280                           intcon	equ	0xFF2
  3281                           indf0	equ	0xFEF
  3282                           postinc0	equ	0xFEE
  3283                           fsr0h	equ	0xFEA
  3284                           fsr0l	equ	0xFE9
  3285                           wreg	equ	0xFE8
  3286                           postdec1	equ	0xFE5
  3287                           plusw1	equ	0xFE3
  3288                           fsr1l	equ	0xFE1
  3289                           indf2	equ	0xFDF
  3290                           postinc2	equ	0xFDE
  3291                           postdec2	equ	0xFDD
  3292                           plusw2	equ	0xFDB
  3293                           fsr2h	equ	0xFDA
  3294                           fsr2l	equ	0xFD9
  3295                           status	equ	0xFD8
  3296                           
  3297 ;; *************** function _checkAA *****************
  3298 ;; Defined at:
  3299 ;;		line 123 in file "modules.c"
  3300 ;; Parameters:    Size  Location     Type
  3301 ;;		None
  3302 ;; Auto vars:     Size  Location     Type
  3303 ;;		None
  3304 ;; Return value:  Size  Location     Type
  3305 ;;                  2    2[BANK0 ] int 
  3306 ;; Registers used:
  3307 ;;		wreg, status,2, cstack
  3308 ;; Tracked objects:
  3309 ;;		On entry : 0/0
  3310 ;;		On exit  : 0/0
  3311 ;;		Unchanged: 0/0
  3312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3313 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3316 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3317 ;;Total ram usage:        2 bytes
  3318 ;; Hardware stack levels used:    1
  3319 ;; Hardware stack levels required when called:    7
  3320 ;; This function calls:
  3321 ;;		_AD
  3322 ;; This function is called by:
  3323 ;;		_mainloop
  3324 ;; This function uses a non-reentrant model
  3325 ;;
  3326                           
  3327                           	psect	text14
  3328  001F72                     __ptext14:
  3329                           	opt stack 0
  3330  001F72                     _checkAA:
  3331                           	opt stack 22
  3332                           
  3333                           ;modules.c: 124: return AD(0);
  3334                           
  3335                           ; BSR set to: 0
  3336                           ;incstack = 0
  3337  001F72  0E00               	movlw	0
  3338  001F74  0100               	movlb	0	; () banked
  3339  001F76  6F81               	movwf	(AD@pin+1)& (0+255),b
  3340  001F78  0E00               	movlw	0
  3341  001F7A  6F80               	movwf	AD@pin& (0+255),b
  3342  001F7C  ECF8  F00F         	call	_AD	;wreg free
  3343  001F80  C080  F082         	movff	?_AD,?_checkAA
  3344  001F84  C081  F083         	movff	?_AD+1,?_checkAA+1
  3345  001F88  0012               	return	
  3346  001F8A                     __end_of_checkAA:
  3347                           	opt stack 0
  3348                           tblptru	equ	0xFF8
  3349                           tblptrh	equ	0xFF7
  3350                           tblptrl	equ	0xFF6
  3351                           tablat	equ	0xFF5
  3352                           prodh	equ	0xFF4
  3353                           prodl	equ	0xFF3
  3354                           intcon	equ	0xFF2
  3355                           indf0	equ	0xFEF
  3356                           postinc0	equ	0xFEE
  3357                           fsr0h	equ	0xFEA
  3358                           fsr0l	equ	0xFE9
  3359                           wreg	equ	0xFE8
  3360                           postdec1	equ	0xFE5
  3361                           plusw1	equ	0xFE3
  3362                           fsr1l	equ	0xFE1
  3363                           indf2	equ	0xFDF
  3364                           postinc2	equ	0xFDE
  3365                           postdec2	equ	0xFDD
  3366                           plusw2	equ	0xFDB
  3367                           fsr2h	equ	0xFDA
  3368                           fsr2l	equ	0xFD9
  3369                           status	equ	0xFD8
  3370                           
  3371 ;; *************** function _AD *****************
  3372 ;; Defined at:
  3373 ;;		line 7 in file "modules.c"
  3374 ;; Parameters:    Size  Location     Type
  3375 ;;  pin             2    0[BANK0 ] int 
  3376 ;; Auto vars:     Size  Location     Type
  3377 ;;		None
  3378 ;; Return value:  Size  Location     Type
  3379 ;;                  2    0[BANK0 ] int 
  3380 ;; Registers used:
  3381 ;;		None
  3382 ;; Tracked objects:
  3383 ;;		On entry : 0/0
  3384 ;;		On exit  : 0/0
  3385 ;;		Unchanged: 0/0
  3386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3387 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3390 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3391 ;;Total ram usage:        2 bytes
  3392 ;; Hardware stack levels used:    1
  3393 ;; Hardware stack levels required when called:    6
  3394 ;; This function calls:
  3395 ;;		Nothing
  3396 ;; This function is called by:
  3397 ;;		_checkAA
  3398 ;;		_checkC9V
  3399 ;; This function uses a non-reentrant model
  3400 ;;
  3401                           
  3402                           	psect	text15
  3403  001FF0                     __ptext15:
  3404                           	opt stack 0
  3405  001FF0                     _AD:
  3406                           	opt stack 22
  3407                           
  3408                           ;incstack = 0
  3409  001FF0  0012               	return		;funcret
  3410  001FF2                     __end_of_AD:
  3411                           	opt stack 0
  3412                           tblptru	equ	0xFF8
  3413                           tblptrh	equ	0xFF7
  3414                           tblptrl	equ	0xFF6
  3415                           tablat	equ	0xFF5
  3416                           prodh	equ	0xFF4
  3417                           prodl	equ	0xFF3
  3418                           intcon	equ	0xFF2
  3419                           indf0	equ	0xFEF
  3420                           postinc0	equ	0xFEE
  3421                           fsr0h	equ	0xFEA
  3422                           fsr0l	equ	0xFE9
  3423                           wreg	equ	0xFE8
  3424                           postdec1	equ	0xFE5
  3425                           plusw1	equ	0xFE3
  3426                           fsr1l	equ	0xFE1
  3427                           indf2	equ	0xFDF
  3428                           postinc2	equ	0xFDE
  3429                           postdec2	equ	0xFDD
  3430                           plusw2	equ	0xFDB
  3431                           fsr2h	equ	0xFDA
  3432                           fsr2l	equ	0xFD9
  3433                           status	equ	0xFD8
  3434                           
  3435 ;; *************** function _initialize *****************
  3436 ;; Defined at:
  3437 ;;		line 18 in file "main.c"
  3438 ;; Parameters:    Size  Location     Type
  3439 ;;		None
  3440 ;; Auto vars:     Size  Location     Type
  3441 ;;		None
  3442 ;; Return value:  Size  Location     Type
  3443 ;;                  1    wreg      void 
  3444 ;; Registers used:
  3445 ;;		wreg, status,2, status,0, cstack
  3446 ;; Tracked objects:
  3447 ;;		On entry : 0/0
  3448 ;;		On exit  : 0/0
  3449 ;;		Unchanged: 0/0
  3450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3454 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3455 ;;Total ram usage:        0 bytes
  3456 ;; Hardware stack levels used:    1
  3457 ;; Hardware stack levels required when called:    9
  3458 ;; This function calls:
  3459 ;;		_initLCD
  3460 ;; This function is called by:
  3461 ;;		_main
  3462 ;; This function uses a non-reentrant model
  3463 ;;
  3464                           
  3465                           	psect	text16
  3466  001F38                     __ptext16:
  3467                           	opt stack 0
  3468  001F38                     _initialize:
  3469                           	opt stack 21
  3470                           
  3471                           ;main.c: 19: TRISC = 0x00;
  3472                           
  3473                           ;incstack = 0
  3474  001F38  0E00               	movlw	0
  3475  001F3A  6E94               	movwf	3988,c	;volatile
  3476                           
  3477                           ;main.c: 20: TRISD = 0x00;
  3478  001F3C  0E00               	movlw	0
  3479  001F3E  6E95               	movwf	3989,c	;volatile
  3480                           
  3481                           ;main.c: 21: TRISB = 0xFF;
  3482  001F40  6893               	setf	3987,c	;volatile
  3483                           
  3484                           ;main.c: 23: LATB = 0x00;
  3485  001F42  0E00               	movlw	0
  3486  001F44  6E8A               	movwf	3978,c	;volatile
  3487                           
  3488                           ;main.c: 24: LATC = 0x00;
  3489  001F46  0E00               	movlw	0
  3490  001F48  6E8B               	movwf	3979,c	;volatile
  3491                           
  3492                           ;main.c: 27: ADCON0 = 0x00;
  3493  001F4A  0E00               	movlw	0
  3494  001F4C  6EC2               	movwf	4034,c	;volatile
  3495                           
  3496                           ;main.c: 28: ADCON1 = 0xFF;
  3497  001F4E  68C1               	setf	4033,c	;volatile
  3498                           
  3499                           ;main.c: 30: initLCD();
  3500  001F50  EC28  F00F         	call	_initLCD	;wreg free
  3501  001F54  0012               	return		;funcret
  3502  001F56                     __end_of_initialize:
  3503                           	opt stack 0
  3504                           tblptru	equ	0xFF8
  3505                           tblptrh	equ	0xFF7
  3506                           tblptrl	equ	0xFF6
  3507                           tablat	equ	0xFF5
  3508                           prodh	equ	0xFF4
  3509                           prodl	equ	0xFF3
  3510                           intcon	equ	0xFF2
  3511                           indf0	equ	0xFEF
  3512                           postinc0	equ	0xFEE
  3513                           fsr0h	equ	0xFEA
  3514                           fsr0l	equ	0xFE9
  3515                           wreg	equ	0xFE8
  3516                           postdec1	equ	0xFE5
  3517                           plusw1	equ	0xFE3
  3518                           fsr1l	equ	0xFE1
  3519                           indf2	equ	0xFDF
  3520                           postinc2	equ	0xFDE
  3521                           postdec2	equ	0xFDD
  3522                           plusw2	equ	0xFDB
  3523                           fsr2h	equ	0xFDA
  3524                           fsr2l	equ	0xFD9
  3525                           status	equ	0xFD8
  3526                           
  3527 ;; *************** function _initLCD *****************
  3528 ;; Defined at:
  3529 ;;		line 15 in file "lcd.c"
  3530 ;; Parameters:    Size  Location     Type
  3531 ;;		None
  3532 ;; Auto vars:     Size  Location     Type
  3533 ;;		None
  3534 ;; Return value:  Size  Location     Type
  3535 ;;                  1    wreg      void 
  3536 ;; Registers used:
  3537 ;;		wreg, status,2, status,0, cstack
  3538 ;; Tracked objects:
  3539 ;;		On entry : 0/0
  3540 ;;		On exit  : 0/0
  3541 ;;		Unchanged: 0/0
  3542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3545 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3546 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3547 ;;Total ram usage:        1 bytes
  3548 ;; Hardware stack levels used:    1
  3549 ;; Hardware stack levels required when called:    8
  3550 ;; This function calls:
  3551 ;;		_lcdInst
  3552 ;; This function is called by:
  3553 ;;		_initialize
  3554 ;; This function uses a non-reentrant model
  3555 ;;
  3556                           
  3557                           	psect	text17
  3558  001E50                     __ptext17:
  3559                           	opt stack 0
  3560  001E50                     _initLCD:
  3561                           	opt stack 21
  3562                           
  3563                           ;lcd.c: 16: _delay((unsigned long)((15)*(8000000/4000.0)));
  3564                           
  3565                           ;incstack = 0
  3566  001E50  0E27               	movlw	39
  3567  001E52  0100               	movlb	0	; () banked
  3568  001E54  6F83               	movwf	??_initLCD& (0+255),b
  3569  001E56  0EF5               	movlw	245
  3570  001E58                     u1267:
  3571  001E58  2EE8               	decfsz	wreg,f,c
  3572  001E5A  D7FE               	bra	u1267
  3573  001E5C  2F83               	decfsz	??_initLCD& (0+255),f,b
  3574  001E5E  D7FC               	bra	u1267
  3575                           
  3576                           ;lcd.c: 17: lcdInst(0b00110011);
  3577  001E60  0E33               	movlw	51
  3578  001E62  ECE1  F00F         	call	_lcdInst
  3579                           
  3580                           ;lcd.c: 18: lcdInst(0b00110010);
  3581  001E66  0E32               	movlw	50
  3582  001E68  ECE1  F00F         	call	_lcdInst
  3583                           
  3584                           ;lcd.c: 19: lcdInst(0b00101000);
  3585  001E6C  0E28               	movlw	40
  3586  001E6E  ECE1  F00F         	call	_lcdInst
  3587                           
  3588                           ;lcd.c: 20: lcdInst(0b00001111);
  3589  001E72  0E0F               	movlw	15
  3590  001E74  ECE1  F00F         	call	_lcdInst
  3591                           
  3592                           ;lcd.c: 21: lcdInst(0b00000110);
  3593  001E78  0E06               	movlw	6
  3594  001E7A  ECE1  F00F         	call	_lcdInst
  3595                           
  3596                           ;lcd.c: 22: lcdInst(0b00000001);
  3597  001E7E  0E01               	movlw	1
  3598  001E80  ECE1  F00F         	call	_lcdInst
  3599                           
  3600                           ;lcd.c: 23: _delay((unsigned long)((15)*(8000000/4000.0)));
  3601  001E84  0E27               	movlw	39
  3602  001E86  0100               	movlb	0	; () banked
  3603  001E88  6F83               	movwf	??_initLCD& (0+255),b
  3604  001E8A  0EF5               	movlw	245
  3605  001E8C                     u1277:
  3606  001E8C  2EE8               	decfsz	wreg,f,c
  3607  001E8E  D7FE               	bra	u1277
  3608  001E90  2F83               	decfsz	??_initLCD& (0+255),f,b
  3609  001E92  D7FC               	bra	u1277
  3610  001E94  0012               	return		;funcret
  3611  001E96                     __end_of_initLCD:
  3612                           	opt stack 0
  3613                           tblptru	equ	0xFF8
  3614                           tblptrh	equ	0xFF7
  3615                           tblptrl	equ	0xFF6
  3616                           tablat	equ	0xFF5
  3617                           prodh	equ	0xFF4
  3618                           prodl	equ	0xFF3
  3619                           intcon	equ	0xFF2
  3620                           indf0	equ	0xFEF
  3621                           postinc0	equ	0xFEE
  3622                           fsr0h	equ	0xFEA
  3623                           fsr0l	equ	0xFE9
  3624                           wreg	equ	0xFE8
  3625                           postdec1	equ	0xFE5
  3626                           plusw1	equ	0xFE3
  3627                           fsr1l	equ	0xFE1
  3628                           indf2	equ	0xFDF
  3629                           postinc2	equ	0xFDE
  3630                           postdec2	equ	0xFDD
  3631                           plusw2	equ	0xFDB
  3632                           fsr2h	equ	0xFDA
  3633                           fsr2l	equ	0xFD9
  3634                           status	equ	0xFD8
  3635                           
  3636 ;; *************** function _lcdInst *****************
  3637 ;; Defined at:
  3638 ;;		line 26 in file "lcd.c"
  3639 ;; Parameters:    Size  Location     Type
  3640 ;;  data            1    wreg     unsigned char 
  3641 ;; Auto vars:     Size  Location     Type
  3642 ;;  data            1    2[BANK0 ] unsigned char 
  3643 ;; Return value:  Size  Location     Type
  3644 ;;                  1    wreg      void 
  3645 ;; Registers used:
  3646 ;;		wreg, status,2, status,0, cstack
  3647 ;; Tracked objects:
  3648 ;;		On entry : 0/0
  3649 ;;		On exit  : 0/0
  3650 ;;		Unchanged: 0/0
  3651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3653 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3655 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3656 ;;Total ram usage:        1 bytes
  3657 ;; Hardware stack levels used:    1
  3658 ;; Hardware stack levels required when called:    7
  3659 ;; This function calls:
  3660 ;;		_lcdNibble
  3661 ;; This function is called by:
  3662 ;;		_initLCD
  3663 ;; This function uses a non-reentrant model
  3664 ;;
  3665                           
  3666                           	psect	text18
  3667  001FC2                     __ptext18:
  3668                           	opt stack 0
  3669  001FC2                     _lcdInst:
  3670                           	opt stack 21
  3671                           
  3672                           ;incstack = 0
  3673                           ;lcdInst@data stored from wreg
  3674  001FC2  0100               	movlb	0	; () banked
  3675  001FC4  6F82               	movwf	lcdInst@data& (0+255),b
  3676                           
  3677                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  3678  001FC6  948C               	bcf	3980,2,c	;volatile
  3679                           
  3680                           ;lcd.c: 28: lcdNibble(data);
  3681  001FC8  0100               	movlb	0	; () banked
  3682  001FCA  5182               	movf	lcdInst@data& (0+255),w,b
  3683  001FCC  EC3C  F00E         	call	_lcdNibble
  3684  001FD0  0012               	return		;funcret
  3685  001FD2                     __end_of_lcdInst:
  3686                           	opt stack 0
  3687                           tblptru	equ	0xFF8
  3688                           tblptrh	equ	0xFF7
  3689                           tblptrl	equ	0xFF6
  3690                           tablat	equ	0xFF5
  3691                           prodh	equ	0xFF4
  3692                           prodl	equ	0xFF3
  3693                           intcon	equ	0xFF2
  3694                           indf0	equ	0xFEF
  3695                           postinc0	equ	0xFEE
  3696                           fsr0h	equ	0xFEA
  3697                           fsr0l	equ	0xFE9
  3698                           wreg	equ	0xFE8
  3699                           postdec1	equ	0xFE5
  3700                           plusw1	equ	0xFE3
  3701                           fsr1l	equ	0xFE1
  3702                           indf2	equ	0xFDF
  3703                           postinc2	equ	0xFDE
  3704                           postdec2	equ	0xFDD
  3705                           plusw2	equ	0xFDB
  3706                           fsr2h	equ	0xFDA
  3707                           fsr2l	equ	0xFD9
  3708                           status	equ	0xFD8
  3709                           
  3710 ;; *************** function _lcdNibble *****************
  3711 ;; Defined at:
  3712 ;;		line 36 in file "lcd.c"
  3713 ;; Parameters:    Size  Location     Type
  3714 ;;  data            1    wreg     unsigned char 
  3715 ;; Auto vars:     Size  Location     Type
  3716 ;;  data            1    1[BANK0 ] unsigned char 
  3717 ;;  temp            1    0[BANK0 ] unsigned char 
  3718 ;; Return value:  Size  Location     Type
  3719 ;;                  1    wreg      void 
  3720 ;; Registers used:
  3721 ;;		wreg, status,2, status,0
  3722 ;; Tracked objects:
  3723 ;;		On entry : 0/0
  3724 ;;		On exit  : 0/0
  3725 ;;		Unchanged: 0/0
  3726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3728 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3730 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3731 ;;Total ram usage:        2 bytes
  3732 ;; Hardware stack levels used:    1
  3733 ;; Hardware stack levels required when called:    6
  3734 ;; This function calls:
  3735 ;;		Nothing
  3736 ;; This function is called by:
  3737 ;;		_lcdInst
  3738 ;;		_putch
  3739 ;; This function uses a non-reentrant model
  3740 ;;
  3741                           
  3742                           	psect	text19
  3743  001C78                     __ptext19:
  3744                           	opt stack 0
  3745  001C78                     _lcdNibble:
  3746                           	opt stack 21
  3747                           
  3748                           ;incstack = 0
  3749                           ;lcdNibble@data stored from wreg
  3750  001C78  0100               	movlb	0	; () banked
  3751  001C7A  6F81               	movwf	lcdNibble@data& (0+255),b
  3752                           
  3753                           ;lcd.c: 38: char temp = data & 0xF0;
  3754  001C7C  0100               	movlb	0	; () banked
  3755  001C7E  5181               	movf	lcdNibble@data& (0+255),w,b
  3756  001C80  0BF0               	andlw	240
  3757  001C82  0100               	movlb	0	; () banked
  3758  001C84  6F80               	movwf	lcdNibble@temp& (0+255),b
  3759                           
  3760                           ;lcd.c: 39: LATD = LATD & 0x0F;
  3761  001C86  508C               	movf	3980,w,c	;volatile
  3762  001C88  0B0F               	andlw	15
  3763  001C8A  6E8C               	movwf	3980,c	;volatile
  3764                           
  3765                           ;lcd.c: 40: LATD = temp | LATD;
  3766  001C8C  0100               	movlb	0	; () banked
  3767  001C8E  5180               	movf	lcdNibble@temp& (0+255),w,b
  3768  001C90  108C               	iorwf	3980,w,c	;volatile
  3769  001C92  6E8C               	movwf	3980,c	;volatile
  3770                           
  3771                           ; BSR set to: 0
  3772                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  3773  001C94  968C               	bcf	3980,3,c	;volatile
  3774                           
  3775                           ; BSR set to: 0
  3776                           ;lcd.c: 43: _delay((unsigned long)((25)*(8000000/4000000.0)));
  3777  001C96  0E10               	movlw	16
  3778  001C98                     u1287:
  3779  001C98  2EE8               	decfsz	wreg,f,c
  3780  001C9A  D7FE               	bra	u1287
  3781  001C9C  D000               	nop2	
  3782                           
  3783                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  3784  001C9E  868C               	bsf	3980,3,c	;volatile
  3785                           
  3786                           ;lcd.c: 45: _delay((unsigned long)((25)*(8000000/4000000.0)));
  3787  001CA0  0E10               	movlw	16
  3788  001CA2                     u1297:
  3789  001CA2  2EE8               	decfsz	wreg,f,c
  3790  001CA4  D7FE               	bra	u1297
  3791  001CA6  D000               	nop2	
  3792                           
  3793                           ;lcd.c: 47: data = data << 4;
  3794  001CA8  0100               	movlb	0	; () banked
  3795  001CAA  3981               	swapf	lcdNibble@data& (0+255),w,b
  3796  001CAC  0BF0               	andlw	240
  3797  001CAE  0100               	movlb	0	; () banked
  3798  001CB0  6F81               	movwf	lcdNibble@data& (0+255),b
  3799                           
  3800                           ;lcd.c: 49: temp = data & 0xF0;
  3801  001CB2  0100               	movlb	0	; () banked
  3802  001CB4  5181               	movf	lcdNibble@data& (0+255),w,b
  3803  001CB6  0BF0               	andlw	240
  3804  001CB8  0100               	movlb	0	; () banked
  3805  001CBA  6F80               	movwf	lcdNibble@temp& (0+255),b
  3806                           
  3807                           ;lcd.c: 50: LATD = LATD & 0x0F;
  3808  001CBC  508C               	movf	3980,w,c	;volatile
  3809  001CBE  0B0F               	andlw	15
  3810  001CC0  6E8C               	movwf	3980,c	;volatile
  3811                           
  3812                           ;lcd.c: 51: LATD = temp | LATD;
  3813  001CC2  0100               	movlb	0	; () banked
  3814  001CC4  5180               	movf	lcdNibble@temp& (0+255),w,b
  3815  001CC6  108C               	iorwf	3980,w,c	;volatile
  3816  001CC8  6E8C               	movwf	3980,c	;volatile
  3817                           
  3818                           ; BSR set to: 0
  3819                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  3820  001CCA  968C               	bcf	3980,3,c	;volatile
  3821                           
  3822                           ; BSR set to: 0
  3823                           ;lcd.c: 54: _delay((unsigned long)((25)*(8000000/4000000.0)));
  3824  001CCC  0E10               	movlw	16
  3825  001CCE                     u1307:
  3826  001CCE  2EE8               	decfsz	wreg,f,c
  3827  001CD0  D7FE               	bra	u1307
  3828  001CD2  D000               	nop2	
  3829                           
  3830                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  3831  001CD4  868C               	bsf	3980,3,c	;volatile
  3832                           
  3833                           ;lcd.c: 56: _delay((unsigned long)((25)*(8000000/4000000.0)));
  3834  001CD6  0E10               	movlw	16
  3835  001CD8                     u1317:
  3836  001CD8  2EE8               	decfsz	wreg,f,c
  3837  001CDA  D7FE               	bra	u1317
  3838  001CDC  D000               	nop2	
  3839  001CDE  0012               	return		;funcret
  3840  001CE0                     __end_of_lcdNibble:
  3841                           	opt stack 0
  3842                           tblptru	equ	0xFF8
  3843                           tblptrh	equ	0xFF7
  3844                           tblptrl	equ	0xFF6
  3845                           tablat	equ	0xFF5
  3846                           prodh	equ	0xFF4
  3847                           prodl	equ	0xFF3
  3848                           intcon	equ	0xFF2
  3849                           indf0	equ	0xFEF
  3850                           postinc0	equ	0xFEE
  3851                           fsr0h	equ	0xFEA
  3852                           fsr0l	equ	0xFE9
  3853                           wreg	equ	0xFE8
  3854                           postdec1	equ	0xFE5
  3855                           plusw1	equ	0xFE3
  3856                           fsr1l	equ	0xFE1
  3857                           indf2	equ	0xFDF
  3858                           postinc2	equ	0xFDE
  3859                           postdec2	equ	0xFDD
  3860                           plusw2	equ	0xFDB
  3861                           fsr2h	equ	0xFDA
  3862                           fsr2l	equ	0xFD9
  3863                           status	equ	0xFD8
  3864                           
  3865 ;; *************** function _captureKeypad *****************
  3866 ;; Defined at:
  3867 ;;		line 20 in file "modules.c"
  3868 ;; Parameters:    Size  Location     Type
  3869 ;;		None
  3870 ;; Auto vars:     Size  Location     Type
  3871 ;;  keypress        1    2[BANK0 ] unsigned char 
  3872 ;; Return value:  Size  Location     Type
  3873 ;;                  2    0[BANK0 ] int 
  3874 ;; Registers used:
  3875 ;;		wreg, status,2, status,0
  3876 ;; Tracked objects:
  3877 ;;		On entry : 0/0
  3878 ;;		On exit  : 0/0
  3879 ;;		Unchanged: 0/0
  3880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3881 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3882 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3884 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3885 ;;Total ram usage:        3 bytes
  3886 ;; Hardware stack levels used:    1
  3887 ;; Hardware stack levels required when called:    6
  3888 ;; This function calls:
  3889 ;;		Nothing
  3890 ;; This function is called by:
  3891 ;;		_main
  3892 ;;		_showInfo
  3893 ;; This function uses a non-reentrant model
  3894 ;;
  3895                           
  3896                           	psect	text20
  3897  001F56                     __ptext20:
  3898                           	opt stack 0
  3899  001F56                     _captureKeypad:
  3900                           	opt stack 24
  3901  001F56                     l110:
  3902  001F56  A281               	btfss	3969,1,c	;volatile
  3903  001F58  D7FE               	goto	l110
  3904                           
  3905                           ;modules.c: 22: unsigned char keypress = (PORTB & 0xF0) >> 4;
  3906  001F5A  3881               	swapf	3969,w,c	;volatile
  3907  001F5C  0B0F               	andlw	15
  3908  001F5E  0B0F               	andlw	15
  3909  001F60  0100               	movlb	0	; () banked
  3910  001F62  6F82               	movwf	captureKeypad@keypress& (0+255),b
  3911  001F64                     l113:
  3912  001F64  B281               	btfsc	3969,1,c	;volatile
  3913  001F66  D7FE               	goto	l113
  3914                           
  3915                           ;modules.c: 24: return keypress;
  3916  001F68  C082  F080         	movff	captureKeypad@keypress,?_captureKeypad
  3917  001F6C  0100               	movlb	0	; () banked
  3918  001F6E  6B81               	clrf	(?_captureKeypad+1)& (0+255),b
  3919                           
  3920                           ; BSR set to: 0
  3921  001F70  0012               	return		;funcret
  3922  001F72                     __end_of_captureKeypad:
  3923                           	opt stack 0
  3924                           tblptru	equ	0xFF8
  3925                           tblptrh	equ	0xFF7
  3926                           tblptrl	equ	0xFF6
  3927                           tablat	equ	0xFF5
  3928                           prodh	equ	0xFF4
  3929                           prodl	equ	0xFF3
  3930                           intcon	equ	0xFF2
  3931                           indf0	equ	0xFEF
  3932                           postinc0	equ	0xFEE
  3933                           fsr0h	equ	0xFEA
  3934                           fsr0l	equ	0xFE9
  3935                           wreg	equ	0xFE8
  3936                           postdec1	equ	0xFE5
  3937                           plusw1	equ	0xFE3
  3938                           fsr1l	equ	0xFE1
  3939                           indf2	equ	0xFDF
  3940                           postinc2	equ	0xFDE
  3941                           postdec2	equ	0xFDD
  3942                           plusw2	equ	0xFDB
  3943                           fsr2h	equ	0xFDA
  3944                           fsr2l	equ	0xFD9
  3945                           status	equ	0xFD8
  3946                           
  3947 ;; *************** function _keypressed *****************
  3948 ;; Defined at:
  3949 ;;		line 27 in file "modules.c"
  3950 ;; Parameters:    Size  Location     Type
  3951 ;;		None
  3952 ;; Auto vars:     Size  Location     Type
  3953 ;;  keypress        1   87[COMRAM] unsigned char 
  3954 ;; Return value:  Size  Location     Type
  3955 ;;                  1    wreg      void 
  3956 ;; Registers used:
  3957 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3958 ;; Tracked objects:
  3959 ;;		On entry : 0/0
  3960 ;;		On exit  : 0/0
  3961 ;;		Unchanged: 0/0
  3962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3964 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3965 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3966 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3967 ;;Total ram usage:       15 bytes
  3968 ;; Hardware stack levels used:    1
  3969 ;; Hardware stack levels required when called:    5
  3970 ;; This function calls:
  3971 ;;		i2_stopMoving
  3972 ;; This function is called by:
  3973 ;;		Interrupt level 2
  3974 ;; This function uses a non-reentrant model
  3975 ;;
  3976                           
  3977                           	psect	intcode
  3978  000008                     __pintcode:
  3979                           	opt stack 0
  3980  000008                     _keypressed:
  3981                           	opt stack 19
  3982                           
  3983                           ; BSR set to: 0
  3984                           ;incstack = 0
  3985  000008  8259               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3986  00000A  ED01  F00D         	call	int_func,f	;refresh shadow registers
  3987                           tblptru	equ	0xFF8
  3988                           tblptrh	equ	0xFF7
  3989                           tblptrl	equ	0xFF6
  3990                           tablat	equ	0xFF5
  3991                           prodh	equ	0xFF4
  3992                           prodl	equ	0xFF3
  3993                           intcon	equ	0xFF2
  3994                           indf0	equ	0xFEF
  3995                           postinc0	equ	0xFEE
  3996                           fsr0h	equ	0xFEA
  3997                           fsr0l	equ	0xFE9
  3998                           wreg	equ	0xFE8
  3999                           postdec1	equ	0xFE5
  4000                           plusw1	equ	0xFE3
  4001                           fsr1l	equ	0xFE1
  4002                           indf2	equ	0xFDF
  4003                           postinc2	equ	0xFDE
  4004                           postdec2	equ	0xFDD
  4005                           plusw2	equ	0xFDB
  4006                           fsr2h	equ	0xFDA
  4007                           fsr2l	equ	0xFD9
  4008                           status	equ	0xFD8
  4009                           
  4010                           	psect	intcode_body
  4011  001A02                     __pintcode_body:
  4012                           	opt stack 19
  4013  001A02                     int_func:
  4014                           	opt stack 19
  4015  001A02  0006               	pop		; remove dummy address from shadow register refresh
  4016  001A04  CFFA F04A          	movff	pclath,??_keypressed
  4017  001A08  CFFB F04B          	movff	pclatu,??_keypressed+1
  4018  001A0C  CFE9 F04C          	movff	fsr0l,??_keypressed+2
  4019  001A10  CFEA F04D          	movff	fsr0h,??_keypressed+3
  4020  001A14  CFE1 F04E          	movff	fsr1l,??_keypressed+4
  4021  001A18  CFE2 F04F          	movff	fsr1h,??_keypressed+5
  4022  001A1C  CFD9 F050          	movff	fsr2l,??_keypressed+6
  4023  001A20  CFDA F051          	movff	fsr2h,??_keypressed+7
  4024  001A24  CFF3 F052          	movff	prodl,??_keypressed+8
  4025  001A28  CFF4 F053          	movff	prodh,??_keypressed+9
  4026  001A2C  CFF6 F054          	movff	tblptrl,??_keypressed+10
  4027  001A30  CFF7 F055          	movff	tblptrh,??_keypressed+11
  4028  001A34  CFF8 F056          	movff	tblptru,??_keypressed+12
  4029  001A38  CFF5 F057          	movff	tablat,??_keypressed+13
  4030                           
  4031                           ;modules.c: 28: if (INT1IF) {
  4032  001A3C  A0F0               	btfss	intcon3,0,c	;volatile
  4033  001A3E  D007               	goto	i2l120
  4034                           
  4035                           ;modules.c: 29: unsigned char keypress = (PORTB & 0xF0) >> 4;
  4036  001A40  3881               	swapf	3969,w,c	;volatile
  4037  001A42  0B0F               	andlw	15
  4038  001A44  0B0F               	andlw	15
  4039  001A46  6E58               	movwf	keypressed@keypress,c
  4040                           
  4041                           ;modules.c: 30: INT1IF = 0;
  4042  001A48  90F0               	bcf	intcon3,0,c	;volatile
  4043                           
  4044                           ;modules.c: 31: stopMoving();
  4045  001A4A  ECE9  F00F         	call	i2_stopMoving	;wreg free
  4046  001A4E                     i2l120:
  4047  001A4E  C057  FFF5         	movff	??_keypressed+13,tablat
  4048  001A52  C056  FFF8         	movff	??_keypressed+12,tblptru
  4049  001A56  C055  FFF7         	movff	??_keypressed+11,tblptrh
  4050  001A5A  C054  FFF6         	movff	??_keypressed+10,tblptrl
  4051  001A5E  C053  FFF4         	movff	??_keypressed+9,prodh
  4052  001A62  C052  FFF3         	movff	??_keypressed+8,prodl
  4053  001A66  C051  FFDA         	movff	??_keypressed+7,fsr2h
  4054  001A6A  C050  FFD9         	movff	??_keypressed+6,fsr2l
  4055  001A6E  C04F  FFE2         	movff	??_keypressed+5,fsr1h
  4056  001A72  C04E  FFE1         	movff	??_keypressed+4,fsr1l
  4057  001A76  C04D  FFEA         	movff	??_keypressed+3,fsr0h
  4058  001A7A  C04C  FFE9         	movff	??_keypressed+2,fsr0l
  4059  001A7E  C04B  FFFB         	movff	??_keypressed+1,pclatu
  4060  001A82  C04A  FFFA         	movff	??_keypressed,pclath
  4061  001A86  9259               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4062  001A88  0011               	retfie		f
  4063  001A8A                     __end_of_keypressed:
  4064                           	opt stack 0
  4065                           pclatu	equ	0xFFB
  4066                           pclath	equ	0xFFA
  4067                           tblptru	equ	0xFF8
  4068                           tblptrh	equ	0xFF7
  4069                           tblptrl	equ	0xFF6
  4070                           tablat	equ	0xFF5
  4071                           prodh	equ	0xFF4
  4072                           prodl	equ	0xFF3
  4073                           intcon	equ	0xFF2
  4074                           intcon3	equ	0xFF0
  4075                           indf0	equ	0xFEF
  4076                           postinc0	equ	0xFEE
  4077                           fsr0h	equ	0xFEA
  4078                           fsr0l	equ	0xFE9
  4079                           wreg	equ	0xFE8
  4080                           postdec1	equ	0xFE5
  4081                           plusw1	equ	0xFE3
  4082                           fsr1h	equ	0xFE2
  4083                           fsr1l	equ	0xFE1
  4084                           indf2	equ	0xFDF
  4085                           postinc2	equ	0xFDE
  4086                           postdec2	equ	0xFDD
  4087                           plusw2	equ	0xFDB
  4088                           fsr2h	equ	0xFDA
  4089                           fsr2l	equ	0xFD9
  4090                           status	equ	0xFD8
  4091                           
  4092 ;; *************** function i2_stopMoving *****************
  4093 ;; Defined at:
  4094 ;;		line 117 in file "modules.c"
  4095 ;; Parameters:    Size  Location     Type
  4096 ;;		None
  4097 ;; Auto vars:     Size  Location     Type
  4098 ;;		None
  4099 ;; Return value:  Size  Location     Type
  4100 ;;                  1    wreg      void 
  4101 ;; Registers used:
  4102 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4103 ;; Tracked objects:
  4104 ;;		On entry : 0/0
  4105 ;;		On exit  : 0/0
  4106 ;;		Unchanged: 0/0
  4107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4112 ;;Total ram usage:        0 bytes
  4113 ;; Hardware stack levels used:    1
  4114 ;; Hardware stack levels required when called:    4
  4115 ;; This function calls:
  4116 ;;		i2_println
  4117 ;; This function is called by:
  4118 ;;		_keypressed
  4119 ;; This function uses a non-reentrant model
  4120 ;;
  4121                           
  4122                           	psect	text22
  4123  001FD2                     __ptext22:
  4124                           	opt stack 0
  4125  001FD2                     i2_stopMoving:
  4126                           	opt stack 19
  4127                           
  4128                           ;modules.c: 118: (INTCONbits.GIE = 0);
  4129                           
  4130                           ;incstack = 0
  4131  001FD2  9EF2               	bcf	intcon,7,c	;volatile
  4132                           
  4133                           ;modules.c: 119: println("Emergency");
  4134  001FD4  0EA3               	movlw	low STR_20
  4135  001FD6  6E1B               	movwf	i2println@data,c
  4136  001FD8  0E10               	movlw	high STR_20
  4137  001FDA  6E1C               	movwf	i2println@data+1,c
  4138  001FDC  EC45  F00D         	call	i2_println	;wreg free
  4139  001FE0  0012               	return		;funcret
  4140  001FE2                     __end_ofi2_stopMoving:
  4141                           	opt stack 0
  4142                           pclatu	equ	0xFFB
  4143                           pclath	equ	0xFFA
  4144                           tblptru	equ	0xFF8
  4145                           tblptrh	equ	0xFF7
  4146                           tblptrl	equ	0xFF6
  4147                           tablat	equ	0xFF5
  4148                           prodh	equ	0xFF4
  4149                           prodl	equ	0xFF3
  4150                           intcon	equ	0xFF2
  4151                           intcon3	equ	0xFF0
  4152                           indf0	equ	0xFEF
  4153                           postinc0	equ	0xFEE
  4154                           fsr0h	equ	0xFEA
  4155                           fsr0l	equ	0xFE9
  4156                           wreg	equ	0xFE8
  4157                           postdec1	equ	0xFE5
  4158                           plusw1	equ	0xFE3
  4159                           fsr1h	equ	0xFE2
  4160                           fsr1l	equ	0xFE1
  4161                           indf2	equ	0xFDF
  4162                           postinc2	equ	0xFDE
  4163                           postdec2	equ	0xFDD
  4164                           plusw2	equ	0xFDB
  4165                           fsr2h	equ	0xFDA
  4166                           fsr2l	equ	0xFD9
  4167                           status	equ	0xFD8
  4168                           
  4169 ;; *************** function i2_println *****************
  4170 ;; Defined at:
  4171 ;;		line 11 in file "modules.c"
  4172 ;; Parameters:    Size  Location     Type
  4173 ;;  data            2   26[COMRAM] PTR unsigned char 
  4174 ;;		 -> STR_20(10), STR_18(11), STR_16(11), STR_14(10), 
  4175 ;;		 -> STR_12(11), STR_10(14), STR_8(14), STR_7(14), 
  4176 ;;		 -> STR_6(15), STR_5(2), STR_4(17), STR_2(9), 
  4177 ;;		 -> STR_1(11), 
  4178 ;; Auto vars:     Size  Location     Type
  4179 ;;  println        41   30[COMRAM] unsigned char [41]
  4180 ;;  println         2   71[COMRAM] int 
  4181 ;; Return value:  Size  Location     Type
  4182 ;;                  1    wreg      void 
  4183 ;; Registers used:
  4184 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4185 ;; Tracked objects:
  4186 ;;		On entry : 0/0
  4187 ;;		On exit  : 0/0
  4188 ;;		Unchanged: 0/0
  4189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4190 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4191 ;;      Locals:        43       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4192 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4193 ;;      Totals:        47       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4194 ;;Total ram usage:       47 bytes
  4195 ;; Hardware stack levels used:    1
  4196 ;; Hardware stack levels required when called:    3
  4197 ;; This function calls:
  4198 ;;		i2_printf
  4199 ;; This function is called by:
  4200 ;;		i2_stopMoving
  4201 ;; This function uses a non-reentrant model
  4202 ;;
  4203                           
  4204                           	psect	text23
  4205  001A8A                     __ptext23:
  4206                           	opt stack 0
  4207  001A8A                     i2_println:
  4208                           	opt stack 19
  4209                           
  4210                           ;modules.c: 12: int i = 0;
  4211                           
  4212                           ;incstack = 0
  4213  001A8A  0E00               	movlw	0
  4214  001A8C  6E49               	movwf	i2println@i+1,c
  4215  001A8E  0E00               	movlw	0
  4216  001A90  6E48               	movwf	i2println@i,c
  4217                           
  4218                           ;modules.c: 13: char output[] = "                                        ";
  4219  001A92  EE21  F000         	lfsr	2,println@F3048
  4220  001A96  EE10  F01F         	lfsr	1,i2println@output
  4221  001A9A  0E28               	movlw	40
  4222  001A9C                     i2u109_41:
  4223  001A9C  CFDB FFE3          	movff	plusw2,plusw1
  4224  001AA0  06E8               	decf	wreg,f,c
  4225  001AA2  E2FC               	bc	i2u109_41
  4226                           
  4227                           ;modules.c: 14: while (data[i] != '\0') {
  4228  001AA4  D016               	goto	i2l1719
  4229  001AA6                     i2l1715:
  4230                           
  4231                           ;modules.c: 15: output[i] = data[i++];
  4232  001AA6  5048               	movf	i2println@i,w,c
  4233  001AA8  241B               	addwf	i2println@data,w,c
  4234  001AAA  6E1D               	movwf	??i2_println& (0+255),c
  4235  001AAC  5049               	movf	i2println@i+1,w,c
  4236  001AAE  201C               	addwfc	i2println@data+1,w,c
  4237  001AB0  6E1E               	movwf	(??i2_println+1)& (0+255),c
  4238  001AB2  C01D  FFF6         	movff	??i2_println,tblptrl
  4239  001AB6  C01E  FFF7         	movff	??i2_println+1,tblptrh
  4240  001ABA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4241  001ABA  6AF8               	clrf	tblptru,c
  4242  001ABC                     	endif
  4243  001ABC                     	if	0	;tblptru may be non-zero
  4244  001ABC                     	endif
  4245  001ABC  0E1F               	movlw	low i2println@output
  4246  001ABE  2448               	addwf	i2println@i,w,c
  4247  001AC0  6ED9               	movwf	fsr2l,c
  4248  001AC2  0E00               	movlw	high i2println@output
  4249  001AC4  2049               	addwfc	i2println@i+1,w,c
  4250  001AC6  6EDA               	movwf	fsr2h,c
  4251  001AC8  0008               	tblrd		*
  4252  001ACA  CFF5 FFDF          	movff	tablat,indf2
  4253  001ACE  4A48               	infsnz	i2println@i,f,c
  4254  001AD0  2A49               	incf	i2println@i+1,f,c
  4255  001AD2                     i2l1719:
  4256  001AD2  5048               	movf	i2println@i,w,c
  4257  001AD4  241B               	addwf	i2println@data,w,c
  4258  001AD6  6E1D               	movwf	??i2_println& (0+255),c
  4259  001AD8  5049               	movf	i2println@i+1,w,c
  4260  001ADA  201C               	addwfc	i2println@data+1,w,c
  4261  001ADC  6E1E               	movwf	(??i2_println+1)& (0+255),c
  4262  001ADE  C01D  FFF6         	movff	??i2_println,tblptrl
  4263  001AE2  C01E  FFF7         	movff	??i2_println+1,tblptrh
  4264  001AE6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4265  001AE6  6AF8               	clrf	tblptru,c
  4266  001AE8                     	endif
  4267  001AE8                     	if	0	;tblptru may be non-zero
  4268  001AE8                     	endif
  4269  001AE8  0008               	tblrd		*
  4270  001AEA  50F5               	movf	tablat,w,c
  4271  001AEC  0900               	iorlw	0
  4272  001AEE  A4D8               	btfss	status,2,c
  4273  001AF0  D7DA               	goto	i2l1715
  4274                           
  4275                           ;modules.c: 16: }
  4276                           ;modules.c: 17: printf("%s", output);
  4277  001AF2  0EC0               	movlw	low STR_3
  4278  001AF4  6E0D               	movwf	i2printf@f,c
  4279  001AF6  0E10               	movlw	high STR_3
  4280  001AF8  6E0E               	movwf	i2printf@f+1,c
  4281  001AFA  0E1F               	movlw	low i2println@output
  4282  001AFC  6E0F               	movwf	?i2_printf+2,c
  4283  001AFE  0E00               	movlw	high i2println@output
  4284  001B00  6E10               	movwf	?i2_printf+3,c
  4285  001B02  EC8D  F00B         	call	i2_printf	;wreg free
  4286  001B06  0012               	return		;funcret
  4287  001B08                     __end_ofi2_println:
  4288                           	opt stack 0
  4289                           pclatu	equ	0xFFB
  4290                           pclath	equ	0xFFA
  4291                           tblptru	equ	0xFF8
  4292                           tblptrh	equ	0xFF7
  4293                           tblptrl	equ	0xFF6
  4294                           tablat	equ	0xFF5
  4295                           prodh	equ	0xFF4
  4296                           prodl	equ	0xFF3
  4297                           intcon	equ	0xFF2
  4298                           intcon3	equ	0xFF0
  4299                           indf0	equ	0xFEF
  4300                           postinc0	equ	0xFEE
  4301                           fsr0h	equ	0xFEA
  4302                           fsr0l	equ	0xFE9
  4303                           wreg	equ	0xFE8
  4304                           postdec1	equ	0xFE5
  4305                           plusw1	equ	0xFE3
  4306                           fsr1h	equ	0xFE2
  4307                           fsr1l	equ	0xFE1
  4308                           indf2	equ	0xFDF
  4309                           postinc2	equ	0xFDE
  4310                           postdec2	equ	0xFDD
  4311                           plusw2	equ	0xFDB
  4312                           fsr2h	equ	0xFDA
  4313                           fsr2l	equ	0xFD9
  4314                           status	equ	0xFD8
  4315                           
  4316 ;; *************** function i2_printf *****************
  4317 ;; Defined at:
  4318 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  4319 ;; Parameters:    Size  Location     Type
  4320 ;;  f               2   12[COMRAM] PTR const unsigned char 
  4321 ;;		 -> STR_19(3), STR_17(3), STR_15(3), STR_13(3), 
  4322 ;;		 -> STR_11(13), STR_9(11), STR_3(3), 
  4323 ;; Auto vars:     Size  Location     Type
  4324 ;;  printf          4    0        struct .
  4325 ;;  printf          2   23[COMRAM] unsigned int 
  4326 ;;  printf          2   21[COMRAM] PTR const unsigned char 
  4327 ;;		 -> STR_21(7), println@output(41), 
  4328 ;;  printf          2   19[COMRAM] PTR void [1]
  4329 ;;		 -> ?i2_printf(2), ?_printf(2), 
  4330 ;;  printf          2    0        unsigned int 
  4331 ;;  printf          1   25[COMRAM] char 
  4332 ;;  printf          1   18[COMRAM] char 
  4333 ;;  printf          1   17[COMRAM] unsigned char 
  4334 ;; Return value:  Size  Location     Type
  4335 ;;                  2   12[COMRAM] int 
  4336 ;; Registers used:
  4337 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4338 ;; Tracked objects:
  4339 ;;		On entry : 0/0
  4340 ;;		On exit  : 0/0
  4341 ;;		Unchanged: 0/0
  4342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4343 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4344 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4345 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4346 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4347 ;;Total ram usage:       14 bytes
  4348 ;; Hardware stack levels used:    1
  4349 ;; Hardware stack levels required when called:    2
  4350 ;; This function calls:
  4351 ;;		i2___lwdiv
  4352 ;;		i2___lwmod
  4353 ;;		i2_putch
  4354 ;; This function is called by:
  4355 ;;		i2_println
  4356 ;; This function uses a non-reentrant model
  4357 ;;
  4358                           
  4359                           	psect	text24
  4360  00171A                     __ptext24:
  4361                           	opt stack 0
  4362  00171A                     i2_printf:
  4363                           	opt stack 19
  4364                           
  4365                           ;doprnt.c: 466: va_list ap;
  4366                           ;doprnt.c: 499: signed char c;
  4367                           ;doprnt.c: 506: signed char prec;
  4368                           ;doprnt.c: 508: unsigned char flag;
  4369                           ;doprnt.c: 523: union {
  4370                           ;doprnt.c: 524: unsigned long vd;
  4371                           ;doprnt.c: 525: double integ;
  4372                           ;doprnt.c: 526: } tmpval;
  4373                           ;doprnt.c: 528: unsigned int val;
  4374                           ;doprnt.c: 529: unsigned len;
  4375                           ;doprnt.c: 530: const char * cp;
  4376                           ;doprnt.c: 533: *ap = __va_start();
  4377                           
  4378                           ;incstack = 0
  4379  00171A  0E0F               	movlw	low (?i2_printf+2)
  4380  00171C  6E14               	movwf	i2printf@ap,c
  4381  00171E  0E00               	movlw	high (?i2_printf+2)
  4382  001720  6E15               	movwf	i2printf@ap+1,c
  4383                           
  4384                           ;doprnt.c: 536: while(c = *f++) {
  4385  001722  D0C8               	goto	i2l1591
  4386  001724                     i2l1531:
  4387                           
  4388                           ;doprnt.c: 538: if(c != '%')
  4389  001724  0E25               	movlw	37
  4390  001726  181A               	xorwf	i2printf@c,w,c
  4391  001728  B4D8               	btfsc	status,2,c
  4392  00172A  D004               	goto	i2l1535
  4393                           
  4394                           ;doprnt.c: 540: {
  4395                           ;doprnt.c: 541: (putch(c) );
  4396  00172C  501A               	movf	i2printf@c,w,c
  4397  00172E  ECF1  F00F         	call	i2_putch
  4398                           
  4399                           ;doprnt.c: 542: continue;
  4400  001732  D0C0               	goto	i2l1591
  4401  001734                     i2l1535:
  4402                           
  4403                           ;doprnt.c: 543: }
  4404                           ;doprnt.c: 548: flag = 0;
  4405  001734  0E00               	movlw	0
  4406  001736  6E12               	movwf	i2printf@flag,c
  4407                           
  4408                           ;doprnt.c: 635: switch(c = *f++) {
  4409  001738  D03F               	goto	i2l1553
  4410  00173A                     i2l1537:
  4411                           
  4412                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4413  00173A  C014  FFD9         	movff	i2printf@ap,fsr2l
  4414  00173E  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  4415  001742  CFDE F016          	movff	postinc2,i2printf@cp
  4416  001746  CFDD F017          	movff	postdec2,i2printf@cp+1
  4417  00174A  0E02               	movlw	2
  4418  00174C  2614               	addwf	i2printf@ap,f,c
  4419  00174E  0E00               	movlw	0
  4420  001750  2215               	addwfc	i2printf@ap+1,f,c
  4421                           
  4422                           ;doprnt.c: 740: if(!cp)
  4423  001752  5016               	movf	i2printf@cp,w,c
  4424  001754  1017               	iorwf	i2printf@cp+1,w,c
  4425  001756  A4D8               	btfss	status,2,c
  4426  001758  D01A               	goto	i2l1549
  4427                           
  4428                           ;doprnt.c: 741: cp = "(null)";
  4429  00175A  0EB6               	movlw	low STR_21
  4430  00175C  6E16               	movwf	i2printf@cp,c
  4431  00175E  0E10               	movlw	high STR_21
  4432  001760  6E17               	movwf	i2printf@cp+1,c
  4433                           
  4434                           ;doprnt.c: 777: while(*cp)
  4435  001762  D015               	goto	i2l1549
  4436  001764                     i2l1545:
  4437                           
  4438                           ;doprnt.c: 778: (putch(*cp++) );
  4439  001764  C016  FFF6         	movff	i2printf@cp,tblptrl
  4440  001768  C017  FFF7         	movff	i2printf@cp+1,tblptrh
  4441  00176C  0E00               	movlw	low (__smallconst shr (0+16))
  4442  00176E  6EF8               	movwf	tblptru,c
  4443  001770  0E0F               	movlw	(high __ramtop+-1)
  4444  001772  64F7               	cpfsgt	tblptrh,c
  4445  001774  D003               	bra	i2u91_47
  4446  001776  0008               	tblrd		*
  4447  001778  50F5               	movf	tablat,w,c
  4448  00177A  D005               	bra	i2u91_40
  4449  00177C                     i2u91_47:
  4450  00177C  CFF6 FFE9          	movff	tblptrl,fsr0l
  4451  001780  CFF7 FFEA          	movff	tblptrh,fsr0h
  4452  001784  50EF               	movf	indf0,w,c
  4453  001786                     i2u91_40:
  4454  001786  ECF1  F00F         	call	i2_putch
  4455  00178A  4A16               	infsnz	i2printf@cp,f,c
  4456  00178C  2A17               	incf	i2printf@cp+1,f,c
  4457  00178E                     i2l1549:
  4458  00178E  C016  FFF6         	movff	i2printf@cp,tblptrl
  4459  001792  C017  FFF7         	movff	i2printf@cp+1,tblptrh
  4460  001796  0E00               	movlw	low (__smallconst shr (0+16))
  4461  001798  6EF8               	movwf	tblptru,c
  4462  00179A  0E0F               	movlw	(high __ramtop+-1)
  4463  00179C  64F7               	cpfsgt	tblptrh,c
  4464  00179E  D003               	bra	i2u92_47
  4465  0017A0  0008               	tblrd		*
  4466  0017A2  50F5               	movf	tablat,w,c
  4467  0017A4  D005               	bra	i2u92_40
  4468  0017A6                     i2u92_47:
  4469  0017A6  CFF6 FFE9          	movff	tblptrl,fsr0l
  4470  0017AA  CFF7 FFEA          	movff	tblptrh,fsr0h
  4471  0017AE  50EF               	movf	indf0,w,c
  4472  0017B0                     i2u92_40:
  4473  0017B0  0900               	iorlw	0
  4474  0017B2  B4D8               	btfsc	status,2,c
  4475  0017B4  D07F               	goto	i2l1591
  4476  0017B6  D7D6               	goto	i2l1545
  4477  0017B8                     i2l1553:
  4478  0017B8  C00D  FFF6         	movff	i2printf@f,tblptrl
  4479  0017BC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4480  0017C0  4A0D               	infsnz	i2printf@f,f,c
  4481  0017C2  2A0E               	incf	i2printf@f+1,f,c
  4482  0017C4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4483  0017C4  6AF8               	clrf	tblptru,c
  4484  0017C6                     	endif
  4485  0017C6                     	if	0	;tblptru may be non-zero
  4486  0017C6                     	endif
  4487  0017C6  0008               	tblrd		*
  4488  0017C8  CFF5 F01A          	movff	tablat,i2printf@c
  4489  0017CC  501A               	movf	i2printf@c,w,c
  4490                           
  4491                           ; Switch size 1, requested type "space"
  4492                           ; Number of cases is 4, Range of values is 0 to 115
  4493                           ; switch strategies available:
  4494                           ; Name         Instructions Cycles
  4495                           ; simple_byte           13     7 (average)
  4496                           ;	Chosen strategy is simple_byte
  4497  0017CE  0A00               	xorlw	0	; case 0
  4498  0017D0  B4D8               	btfsc	status,2,c
  4499  0017D2  0012               	return	
  4500  0017D4  0A64               	xorlw	100	; case 100
  4501  0017D6  B4D8               	btfsc	status,2,c
  4502  0017D8  D007               	goto	i2l1555
  4503  0017DA  0A0D               	xorlw	13	; case 105
  4504  0017DC  B4D8               	btfsc	status,2,c
  4505  0017DE  D004               	goto	i2l1555
  4506  0017E0  0A1A               	xorlw	26	; case 115
  4507  0017E2  B4D8               	btfsc	status,2,c
  4508  0017E4  D7AA               	goto	i2l1537
  4509  0017E6  D066               	goto	i2l1591
  4510  0017E8                     i2l1555:
  4511                           
  4512                           ;doprnt.c: 1253: {
  4513                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4514  0017E8  C014  FFD9         	movff	i2printf@ap,fsr2l
  4515  0017EC  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  4516  0017F0  CFDE F018          	movff	postinc2,i2printf@val
  4517  0017F4  CFDD F019          	movff	postdec2,i2printf@val+1
  4518  0017F8  0E02               	movlw	2
  4519  0017FA  2614               	addwf	i2printf@ap,f,c
  4520  0017FC  0E00               	movlw	0
  4521  0017FE  2215               	addwfc	i2printf@ap+1,f,c
  4522                           
  4523                           ;doprnt.c: 1261: if((int)val < 0) {
  4524  001800  AE19               	btfss	i2printf@val+1,7,c
  4525  001802  D006               	goto	i2l1565
  4526                           
  4527                           ;doprnt.c: 1262: flag |= 0x03;
  4528  001804  0E03               	movlw	3
  4529  001806  1212               	iorwf	i2printf@flag,f,c
  4530                           
  4531                           ;doprnt.c: 1263: val = -val;
  4532  001808  6C18               	negf	i2printf@val,c
  4533  00180A  1E19               	comf	i2printf@val+1,f,c
  4534  00180C  B0D8               	btfsc	status,0,c
  4535  00180E  2A19               	incf	i2printf@val+1,f,c
  4536  001810                     i2l1565:
  4537                           
  4538                           ;doprnt.c: 1264: }
  4539                           ;doprnt.c: 1266: }
  4540                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4541  001810  0E01               	movlw	1
  4542  001812  6E1A               	movwf	i2printf@c,c
  4543  001814                     i2l1567:
  4544  001814  0E05               	movlw	5
  4545  001816  181A               	xorwf	i2printf@c,w,c
  4546  001818  B4D8               	btfsc	status,2,c
  4547  00181A  D015               	goto	i2l1579
  4548                           
  4549                           ;doprnt.c: 1306: if(val < dpowers[c])
  4550  00181C  501A               	movf	i2printf@c,w,c
  4551  00181E  0D02               	mullw	2
  4552  001820  0E01               	movlw	low _dpowers
  4553  001822  24F3               	addwf	prodl,w,c
  4554  001824  6EF6               	movwf	tblptrl,c
  4555  001826  0E10               	movlw	high _dpowers
  4556  001828  20F4               	addwfc	prodh,w,c
  4557  00182A  6EF7               	movwf	tblptrh,c
  4558  00182C                     	if	1	;There are 3 active tblptr bytes
  4559  00182C  6AF8               	clrf	tblptru,c
  4560  00182E  0E00               	movlw	low (__mediumconst shr (0+16))
  4561  001830  22F8               	addwfc	tblptru,f,c
  4562  001832                     	endif
  4563  001832  0009               	tblrd		*+
  4564  001834  50F5               	movf	tablat,w,c
  4565  001836  5C18               	subwf	i2printf@val,w,c
  4566  001838  0009               	tblrd		*+
  4567  00183A  50F5               	movf	tablat,w,c
  4568  00183C  5819               	subwfb	i2printf@val+1,w,c
  4569  00183E  A0D8               	btfss	status,0,c
  4570  001840  D002               	goto	i2l1579
  4571                           
  4572                           ;doprnt.c: 1307: break;
  4573  001842  2A1A               	incf	i2printf@c,f,c
  4574  001844  D7E7               	goto	i2l1567
  4575  001846                     i2l1579:
  4576                           
  4577                           ;doprnt.c: 1422: {
  4578                           ;doprnt.c: 1438: if(flag & 0x03)
  4579  001846  C012  F011         	movff	i2printf@flag,??i2_printf
  4580  00184A  0E03               	movlw	3
  4581  00184C  1611               	andwf	??i2_printf,f,c
  4582  00184E  B4D8               	btfsc	status,2,c
  4583  001850  D003               	goto	i2l1583
  4584                           
  4585                           ;doprnt.c: 1439: (putch('-') );
  4586  001852  0E2D               	movlw	45
  4587  001854  ECF1  F00F         	call	i2_putch
  4588  001858                     i2l1583:
  4589                           
  4590                           ;doprnt.c: 1469: }
  4591                           ;doprnt.c: 1472: prec = c;
  4592  001858  C01A  F013         	movff	i2printf@c,i2printf@prec
  4593                           
  4594                           ;doprnt.c: 1474: while(prec--) {
  4595  00185C  D027               	goto	i2l1589
  4596  00185E                     i2l1585:
  4597                           
  4598                           ;doprnt.c: 1478: {
  4599                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4600  00185E  5013               	movf	i2printf@prec,w,c
  4601  001860  0D02               	mullw	2
  4602  001862  0E01               	movlw	low _dpowers
  4603  001864  24F3               	addwf	prodl,w,c
  4604  001866  6EF6               	movwf	tblptrl,c
  4605  001868  0E10               	movlw	high _dpowers
  4606  00186A  20F4               	addwfc	prodh,w,c
  4607  00186C  6EF7               	movwf	tblptrh,c
  4608  00186E                     	if	1	;There are 3 active tblptr bytes
  4609  00186E  6AF8               	clrf	tblptru,c
  4610  001870  0E00               	movlw	low (__mediumconst shr (0+16))
  4611  001872  22F8               	addwfc	tblptru,f,c
  4612  001874                     	endif
  4613  001874  0009               	tblrd		*+
  4614  001876  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  4615  00187A  000A               	tblrd		*-
  4616  00187C  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  4617  001880  C018  F001         	movff	i2printf@val,i2___lwdiv@dividend
  4618  001884  C019  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  4619  001888  ECFF  F00E         	call	i2___lwdiv	;wreg free
  4620  00188C  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  4621  001890  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  4622  001894  0E00               	movlw	0
  4623  001896  6E0B               	movwf	i2___lwmod@divisor+1,c
  4624  001898  0E0A               	movlw	10
  4625  00189A  6E0A               	movwf	i2___lwmod@divisor,c
  4626  00189C  EC4B  F00F         	call	i2___lwmod	;wreg free
  4627  0018A0  5008               	movf	?i2___lwmod,w,c
  4628  0018A2  0F30               	addlw	48
  4629  0018A4  6E1A               	movwf	i2printf@c,c
  4630                           
  4631                           ;doprnt.c: 1523: }
  4632                           ;doprnt.c: 1524: (putch(c) );
  4633  0018A6  501A               	movf	i2printf@c,w,c
  4634  0018A8  ECF1  F00F         	call	i2_putch
  4635  0018AC                     i2l1589:
  4636  0018AC  0613               	decf	i2printf@prec,f,c
  4637  0018AE  2813               	incf	i2printf@prec,w,c
  4638  0018B0  A4D8               	btfss	status,2,c
  4639  0018B2  D7D5               	goto	i2l1585
  4640  0018B4                     i2l1591:
  4641  0018B4  C00D  FFF6         	movff	i2printf@f,tblptrl
  4642  0018B8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4643  0018BC  4A0D               	infsnz	i2printf@f,f,c
  4644  0018BE  2A0E               	incf	i2printf@f+1,f,c
  4645  0018C0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4646  0018C0  6AF8               	clrf	tblptru,c
  4647  0018C2                     	endif
  4648  0018C2                     	if	0	;tblptru may be non-zero
  4649  0018C2                     	endif
  4650  0018C2  0008               	tblrd		*
  4651  0018C4  CFF5 F01A          	movff	tablat,i2printf@c
  4652  0018C8  501A               	movf	i2printf@c,w,c
  4653  0018CA  B4D8               	btfsc	status,2,c
  4654  0018CC  0012               	return	
  4655  0018CE  D72A               	goto	i2l1531
  4656  0018D0                     __end_ofi2_printf:
  4657                           	opt stack 0
  4658                           pclatu	equ	0xFFB
  4659                           pclath	equ	0xFFA
  4660                           tblptru	equ	0xFF8
  4661                           tblptrh	equ	0xFF7
  4662                           tblptrl	equ	0xFF6
  4663                           tablat	equ	0xFF5
  4664                           prodh	equ	0xFF4
  4665                           prodl	equ	0xFF3
  4666                           intcon	equ	0xFF2
  4667                           intcon3	equ	0xFF0
  4668                           indf0	equ	0xFEF
  4669                           postinc0	equ	0xFEE
  4670                           fsr0h	equ	0xFEA
  4671                           fsr0l	equ	0xFE9
  4672                           wreg	equ	0xFE8
  4673                           postdec1	equ	0xFE5
  4674                           plusw1	equ	0xFE3
  4675                           fsr1h	equ	0xFE2
  4676                           fsr1l	equ	0xFE1
  4677                           indf2	equ	0xFDF
  4678                           postinc2	equ	0xFDE
  4679                           postdec2	equ	0xFDD
  4680                           plusw2	equ	0xFDB
  4681                           fsr2h	equ	0xFDA
  4682                           fsr2l	equ	0xFD9
  4683                           status	equ	0xFD8
  4684                           
  4685 ;; *************** function i2_putch *****************
  4686 ;; Defined at:
  4687 ;;		line 31 in file "lcd.c"
  4688 ;; Parameters:    Size  Location     Type
  4689 ;;  data            1    wreg     unsigned char 
  4690 ;; Auto vars:     Size  Location     Type
  4691 ;;  data            1    2[COMRAM] unsigned char 
  4692 ;; Return value:  Size  Location     Type
  4693 ;;                  1    wreg      void 
  4694 ;; Registers used:
  4695 ;;		wreg, status,2, status,0, cstack
  4696 ;; Tracked objects:
  4697 ;;		On entry : 0/0
  4698 ;;		On exit  : 0/0
  4699 ;;		Unchanged: 0/0
  4700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4702 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4704 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4705 ;;Total ram usage:        1 bytes
  4706 ;; Hardware stack levels used:    1
  4707 ;; Hardware stack levels required when called:    1
  4708 ;; This function calls:
  4709 ;;		i2_lcdNibble
  4710 ;; This function is called by:
  4711 ;;		i2_printf
  4712 ;; This function uses a non-reentrant model
  4713 ;;
  4714                           
  4715                           	psect	text25
  4716  001FE2                     __ptext25:
  4717                           	opt stack 0
  4718  001FE2                     i2_putch:
  4719                           	opt stack 19
  4720                           
  4721                           ;incstack = 0
  4722                           ;i2putch@data stored from wreg
  4723  001FE2  6E03               	movwf	i2putch@data,c
  4724                           
  4725                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  4726  001FE4  848C               	bsf	3980,2,c	;volatile
  4727                           
  4728                           ;lcd.c: 33: lcdNibble(data);
  4729  001FE6  5003               	movf	i2putch@data,w,c
  4730  001FE8  ECD4  F00E         	call	i2_lcdNibble
  4731  001FEC  0012               	return		;funcret
  4732  001FEE                     __end_ofi2_putch:
  4733                           	opt stack 0
  4734                           pclatu	equ	0xFFB
  4735                           pclath	equ	0xFFA
  4736                           tblptru	equ	0xFF8
  4737                           tblptrh	equ	0xFF7
  4738                           tblptrl	equ	0xFF6
  4739                           tablat	equ	0xFF5
  4740                           prodh	equ	0xFF4
  4741                           prodl	equ	0xFF3
  4742                           intcon	equ	0xFF2
  4743                           intcon3	equ	0xFF0
  4744                           indf0	equ	0xFEF
  4745                           postinc0	equ	0xFEE
  4746                           fsr0h	equ	0xFEA
  4747                           fsr0l	equ	0xFE9
  4748                           wreg	equ	0xFE8
  4749                           postdec1	equ	0xFE5
  4750                           plusw1	equ	0xFE3
  4751                           fsr1h	equ	0xFE2
  4752                           fsr1l	equ	0xFE1
  4753                           indf2	equ	0xFDF
  4754                           postinc2	equ	0xFDE
  4755                           postdec2	equ	0xFDD
  4756                           plusw2	equ	0xFDB
  4757                           fsr2h	equ	0xFDA
  4758                           fsr2l	equ	0xFD9
  4759                           status	equ	0xFD8
  4760                           
  4761 ;; *************** function i2_lcdNibble *****************
  4762 ;; Defined at:
  4763 ;;		line 36 in file "lcd.c"
  4764 ;; Parameters:    Size  Location     Type
  4765 ;;  data            1    wreg     unsigned char 
  4766 ;; Auto vars:     Size  Location     Type
  4767 ;;  data            1    1[COMRAM] unsigned char 
  4768 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  4769 ;; Return value:  Size  Location     Type
  4770 ;;                  1    wreg      void 
  4771 ;; Registers used:
  4772 ;;		wreg, status,2, status,0
  4773 ;; Tracked objects:
  4774 ;;		On entry : 0/0
  4775 ;;		On exit  : 0/0
  4776 ;;		Unchanged: 0/0
  4777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4779 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4781 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4782 ;;Total ram usage:        2 bytes
  4783 ;; Hardware stack levels used:    1
  4784 ;; This function calls:
  4785 ;;		Nothing
  4786 ;; This function is called by:
  4787 ;;		i2_putch
  4788 ;; This function uses a non-reentrant model
  4789 ;;
  4790                           
  4791                           	psect	text26
  4792  001DA8                     __ptext26:
  4793                           	opt stack 0
  4794  001DA8                     i2_lcdNibble:
  4795                           	opt stack 19
  4796                           
  4797                           ;incstack = 0
  4798                           ;i2lcdNibble@data stored from wreg
  4799  001DA8  6E02               	movwf	i2lcdNibble@data,c
  4800                           
  4801                           ;lcd.c: 38: char temp = data & 0xF0;
  4802  001DAA  5002               	movf	i2lcdNibble@data,w,c
  4803  001DAC  0BF0               	andlw	240
  4804  001DAE  6E01               	movwf	i2lcdNibble@temp,c
  4805                           
  4806                           ;lcd.c: 39: LATD = LATD & 0x0F;
  4807  001DB0  508C               	movf	3980,w,c	;volatile
  4808  001DB2  0B0F               	andlw	15
  4809  001DB4  6E8C               	movwf	3980,c	;volatile
  4810                           
  4811                           ;lcd.c: 40: LATD = temp | LATD;
  4812  001DB6  5001               	movf	i2lcdNibble@temp,w,c
  4813  001DB8  108C               	iorwf	3980,w,c	;volatile
  4814  001DBA  6E8C               	movwf	3980,c	;volatile
  4815                           
  4816                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  4817  001DBC  968C               	bcf	3980,3,c	;volatile
  4818                           
  4819                           ;lcd.c: 43: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4820  001DBE  0E10               	movlw	16
  4821  001DC0                     i2u132_47:
  4822  001DC0  2EE8               	decfsz	wreg,f,c
  4823  001DC2  D7FE               	bra	i2u132_47
  4824  001DC4  D000               	nop2	
  4825                           
  4826                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  4827  001DC6  868C               	bsf	3980,3,c	;volatile
  4828                           
  4829                           ;lcd.c: 45: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4830  001DC8  0E10               	movlw	16
  4831  001DCA                     i2u133_47:
  4832  001DCA  2EE8               	decfsz	wreg,f,c
  4833  001DCC  D7FE               	bra	i2u133_47
  4834  001DCE  D000               	nop2	
  4835                           
  4836                           ;lcd.c: 47: data = data << 4;
  4837  001DD0  3802               	swapf	i2lcdNibble@data,w,c
  4838  001DD2  0BF0               	andlw	240
  4839  001DD4  6E02               	movwf	i2lcdNibble@data,c
  4840                           
  4841                           ;lcd.c: 49: temp = data & 0xF0;
  4842  001DD6  5002               	movf	i2lcdNibble@data,w,c
  4843  001DD8  0BF0               	andlw	240
  4844  001DDA  6E01               	movwf	i2lcdNibble@temp,c
  4845                           
  4846                           ;lcd.c: 50: LATD = LATD & 0x0F;
  4847  001DDC  508C               	movf	3980,w,c	;volatile
  4848  001DDE  0B0F               	andlw	15
  4849  001DE0  6E8C               	movwf	3980,c	;volatile
  4850                           
  4851                           ;lcd.c: 51: LATD = temp | LATD;
  4852  001DE2  5001               	movf	i2lcdNibble@temp,w,c
  4853  001DE4  108C               	iorwf	3980,w,c	;volatile
  4854  001DE6  6E8C               	movwf	3980,c	;volatile
  4855                           
  4856                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  4857  001DE8  968C               	bcf	3980,3,c	;volatile
  4858                           
  4859                           ;lcd.c: 54: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4860  001DEA  0E10               	movlw	16
  4861  001DEC                     i2u134_47:
  4862  001DEC  2EE8               	decfsz	wreg,f,c
  4863  001DEE  D7FE               	bra	i2u134_47
  4864  001DF0  D000               	nop2	
  4865                           
  4866                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  4867  001DF2  868C               	bsf	3980,3,c	;volatile
  4868                           
  4869                           ;lcd.c: 56: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4870  001DF4  0E10               	movlw	16
  4871  001DF6                     i2u135_47:
  4872  001DF6  2EE8               	decfsz	wreg,f,c
  4873  001DF8  D7FE               	bra	i2u135_47
  4874  001DFA  D000               	nop2	
  4875  001DFC  0012               	return		;funcret
  4876  001DFE                     __end_ofi2_lcdNibble:
  4877                           	opt stack 0
  4878                           pclatu	equ	0xFFB
  4879                           pclath	equ	0xFFA
  4880                           tblptru	equ	0xFF8
  4881                           tblptrh	equ	0xFF7
  4882                           tblptrl	equ	0xFF6
  4883                           tablat	equ	0xFF5
  4884                           prodh	equ	0xFF4
  4885                           prodl	equ	0xFF3
  4886                           intcon	equ	0xFF2
  4887                           intcon3	equ	0xFF0
  4888                           indf0	equ	0xFEF
  4889                           postinc0	equ	0xFEE
  4890                           fsr0h	equ	0xFEA
  4891                           fsr0l	equ	0xFE9
  4892                           wreg	equ	0xFE8
  4893                           postdec1	equ	0xFE5
  4894                           plusw1	equ	0xFE3
  4895                           fsr1h	equ	0xFE2
  4896                           fsr1l	equ	0xFE1
  4897                           indf2	equ	0xFDF
  4898                           postinc2	equ	0xFDE
  4899                           postdec2	equ	0xFDD
  4900                           plusw2	equ	0xFDB
  4901                           fsr2h	equ	0xFDA
  4902                           fsr2l	equ	0xFD9
  4903                           status	equ	0xFD8
  4904                           
  4905 ;; *************** function i2___lwmod *****************
  4906 ;; Defined at:
  4907 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  4908 ;; Parameters:    Size  Location     Type
  4909 ;;  dividend        2    7[COMRAM] unsigned int 
  4910 ;;  divisor         2    9[COMRAM] unsigned int 
  4911 ;; Auto vars:     Size  Location     Type
  4912 ;;  __lwmod         1   11[COMRAM] unsigned char 
  4913 ;; Return value:  Size  Location     Type
  4914 ;;                  2    7[COMRAM] unsigned int 
  4915 ;; Registers used:
  4916 ;;		wreg, status,2, status,0
  4917 ;; Tracked objects:
  4918 ;;		On entry : 0/0
  4919 ;;		On exit  : 0/0
  4920 ;;		Unchanged: 0/0
  4921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4922 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4923 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4925 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4926 ;;Total ram usage:        5 bytes
  4927 ;; Hardware stack levels used:    1
  4928 ;; This function calls:
  4929 ;;		Nothing
  4930 ;; This function is called by:
  4931 ;;		i2_printf
  4932 ;; This function uses a non-reentrant model
  4933 ;;
  4934                           
  4935                           	psect	text27
  4936  001E96                     __ptext27:
  4937                           	opt stack 0
  4938  001E96                     i2___lwmod:
  4939                           	opt stack 20
  4940                           
  4941                           ;incstack = 0
  4942  001E96  500A               	movf	i2___lwmod@divisor,w,c
  4943  001E98  100B               	iorwf	i2___lwmod@divisor+1,w,c
  4944  001E9A  B4D8               	btfsc	status,2,c
  4945  001E9C  D018               	goto	i2l622
  4946  001E9E  0E01               	movlw	1
  4947  001EA0  6E0C               	movwf	i2___lwmod@counter,c
  4948  001EA2  D004               	goto	i2l1503
  4949  001EA4                     i2l1501:
  4950  001EA4  90D8               	bcf	status,0,c
  4951  001EA6  360A               	rlcf	i2___lwmod@divisor,f,c
  4952  001EA8  360B               	rlcf	i2___lwmod@divisor+1,f,c
  4953  001EAA  2A0C               	incf	i2___lwmod@counter,f,c
  4954  001EAC                     i2l1503:
  4955  001EAC  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  4956  001EAE  D7FA               	goto	i2l1501
  4957  001EB0                     i2l1505:
  4958  001EB0  500A               	movf	i2___lwmod@divisor,w,c
  4959  001EB2  5C08               	subwf	i2___lwmod@dividend,w,c
  4960  001EB4  500B               	movf	i2___lwmod@divisor+1,w,c
  4961  001EB6  5809               	subwfb	i2___lwmod@dividend+1,w,c
  4962  001EB8  A0D8               	btfss	status,0,c
  4963  001EBA  D004               	goto	i2l1509
  4964  001EBC  500A               	movf	i2___lwmod@divisor,w,c
  4965  001EBE  5E08               	subwf	i2___lwmod@dividend,f,c
  4966  001EC0  500B               	movf	i2___lwmod@divisor+1,w,c
  4967  001EC2  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  4968  001EC4                     i2l1509:
  4969  001EC4  90D8               	bcf	status,0,c
  4970  001EC6  320B               	rrcf	i2___lwmod@divisor+1,f,c
  4971  001EC8  320A               	rrcf	i2___lwmod@divisor,f,c
  4972  001ECA  2E0C               	decfsz	i2___lwmod@counter,f,c
  4973  001ECC  D7F1               	goto	i2l1505
  4974  001ECE                     i2l622:
  4975  001ECE  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  4976  001ED2  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  4977  001ED6  0012               	return		;funcret
  4978  001ED8                     __end_ofi2___lwmod:
  4979                           	opt stack 0
  4980                           pclatu	equ	0xFFB
  4981                           pclath	equ	0xFFA
  4982                           tblptru	equ	0xFF8
  4983                           tblptrh	equ	0xFF7
  4984                           tblptrl	equ	0xFF6
  4985                           tablat	equ	0xFF5
  4986                           prodh	equ	0xFF4
  4987                           prodl	equ	0xFF3
  4988                           intcon	equ	0xFF2
  4989                           intcon3	equ	0xFF0
  4990                           indf0	equ	0xFEF
  4991                           postinc0	equ	0xFEE
  4992                           fsr0h	equ	0xFEA
  4993                           fsr0l	equ	0xFE9
  4994                           wreg	equ	0xFE8
  4995                           postdec1	equ	0xFE5
  4996                           plusw1	equ	0xFE3
  4997                           fsr1h	equ	0xFE2
  4998                           fsr1l	equ	0xFE1
  4999                           indf2	equ	0xFDF
  5000                           postinc2	equ	0xFDE
  5001                           postdec2	equ	0xFDD
  5002                           plusw2	equ	0xFDB
  5003                           fsr2h	equ	0xFDA
  5004                           fsr2l	equ	0xFD9
  5005                           status	equ	0xFD8
  5006                           
  5007 ;; *************** function i2___lwdiv *****************
  5008 ;; Defined at:
  5009 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  5010 ;; Parameters:    Size  Location     Type
  5011 ;;  dividend        2    0[COMRAM] unsigned int 
  5012 ;;  divisor         2    2[COMRAM] unsigned int 
  5013 ;; Auto vars:     Size  Location     Type
  5014 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  5015 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  5016 ;; Return value:  Size  Location     Type
  5017 ;;                  2    0[COMRAM] unsigned int 
  5018 ;; Registers used:
  5019 ;;		wreg, status,2, status,0
  5020 ;; Tracked objects:
  5021 ;;		On entry : 0/0
  5022 ;;		On exit  : 0/0
  5023 ;;		Unchanged: 0/0
  5024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5025 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5026 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5028 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5029 ;;Total ram usage:        7 bytes
  5030 ;; Hardware stack levels used:    1
  5031 ;; This function calls:
  5032 ;;		Nothing
  5033 ;; This function is called by:
  5034 ;;		i2_printf
  5035 ;; This function uses a non-reentrant model
  5036 ;;
  5037                           
  5038                           	psect	text28
  5039  001DFE                     __ptext28:
  5040                           	opt stack 0
  5041  001DFE                     i2___lwdiv:
  5042                           	opt stack 20
  5043                           
  5044                           ;incstack = 0
  5045  001DFE  0E00               	movlw	0
  5046  001E00  6E06               	movwf	i2___lwdiv@quotient+1,c
  5047  001E02  0E00               	movlw	0
  5048  001E04  6E05               	movwf	i2___lwdiv@quotient,c
  5049  001E06  5003               	movf	i2___lwdiv@divisor,w,c
  5050  001E08  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  5051  001E0A  B4D8               	btfsc	status,2,c
  5052  001E0C  D01C               	goto	i2l612
  5053  001E0E  0E01               	movlw	1
  5054  001E10  6E07               	movwf	i2___lwdiv@counter,c
  5055  001E12  D004               	goto	i2l1483
  5056  001E14                     i2l1481:
  5057  001E14  90D8               	bcf	status,0,c
  5058  001E16  3603               	rlcf	i2___lwdiv@divisor,f,c
  5059  001E18  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  5060  001E1A  2A07               	incf	i2___lwdiv@counter,f,c
  5061  001E1C                     i2l1483:
  5062  001E1C  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  5063  001E1E  D7FA               	goto	i2l1481
  5064  001E20                     i2l1485:
  5065  001E20  90D8               	bcf	status,0,c
  5066  001E22  3605               	rlcf	i2___lwdiv@quotient,f,c
  5067  001E24  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  5068  001E26  5003               	movf	i2___lwdiv@divisor,w,c
  5069  001E28  5C01               	subwf	i2___lwdiv@dividend,w,c
  5070  001E2A  5004               	movf	i2___lwdiv@divisor+1,w,c
  5071  001E2C  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  5072  001E2E  A0D8               	btfss	status,0,c
  5073  001E30  D005               	goto	i2l1493
  5074  001E32  5003               	movf	i2___lwdiv@divisor,w,c
  5075  001E34  5E01               	subwf	i2___lwdiv@dividend,f,c
  5076  001E36  5004               	movf	i2___lwdiv@divisor+1,w,c
  5077  001E38  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  5078  001E3A  8005               	bsf	i2___lwdiv@quotient,0,c
  5079  001E3C                     i2l1493:
  5080  001E3C  90D8               	bcf	status,0,c
  5081  001E3E  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  5082  001E40  3203               	rrcf	i2___lwdiv@divisor,f,c
  5083  001E42  2E07               	decfsz	i2___lwdiv@counter,f,c
  5084  001E44  D7ED               	goto	i2l1485
  5085  001E46                     i2l612:
  5086  001E46  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  5087  001E4A  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  5088  001E4E  0012               	return		;funcret
  5089  001E50                     __end_ofi2___lwdiv:
  5090                           	opt stack 0
  5091                           pclatu	equ	0xFFB
  5092                           pclath	equ	0xFFA
  5093                           tblptru	equ	0xFF8
  5094                           tblptrh	equ	0xFF7
  5095                           tblptrl	equ	0xFF6
  5096                           tablat	equ	0xFF5
  5097                           prodh	equ	0xFF4
  5098                           prodl	equ	0xFF3
  5099                           intcon	equ	0xFF2
  5100                           intcon3	equ	0xFF0
  5101                           indf0	equ	0xFEF
  5102                           postinc0	equ	0xFEE
  5103                           fsr0h	equ	0xFEA
  5104                           fsr0l	equ	0xFE9
  5105                           wreg	equ	0xFE8
  5106                           postdec1	equ	0xFE5
  5107                           plusw1	equ	0xFE3
  5108                           fsr1h	equ	0xFE2
  5109                           fsr1l	equ	0xFE1
  5110                           indf2	equ	0xFDF
  5111                           postinc2	equ	0xFDE
  5112                           postdec2	equ	0xFDD
  5113                           plusw2	equ	0xFDB
  5114                           fsr2h	equ	0xFDA
  5115                           fsr2l	equ	0xFD9
  5116                           status	equ	0xFD8
  5117                           pclatu	equ	0xFFB
  5118                           pclath	equ	0xFFA
  5119                           tblptru	equ	0xFF8
  5120                           tblptrh	equ	0xFF7
  5121                           tblptrl	equ	0xFF6
  5122                           tablat	equ	0xFF5
  5123                           prodh	equ	0xFF4
  5124                           prodl	equ	0xFF3
  5125                           intcon	equ	0xFF2
  5126                           intcon3	equ	0xFF0
  5127                           indf0	equ	0xFEF
  5128                           postinc0	equ	0xFEE
  5129                           fsr0h	equ	0xFEA
  5130                           fsr0l	equ	0xFE9
  5131                           wreg	equ	0xFE8
  5132                           postdec1	equ	0xFE5
  5133                           plusw1	equ	0xFE3
  5134                           fsr1h	equ	0xFE2
  5135                           fsr1l	equ	0xFE1
  5136                           indf2	equ	0xFDF
  5137                           postinc2	equ	0xFDE
  5138                           postdec2	equ	0xFDD
  5139                           plusw2	equ	0xFDB
  5140                           fsr2h	equ	0xFDA
  5141                           fsr2l	equ	0xFD9
  5142                           status	equ	0xFD8
  5143                           
  5144                           	psect	text29
  5145  000000                     __ptext29:
  5146                           	opt stack 0
  5147                           pclatu	equ	0xFFB
  5148                           pclath	equ	0xFFA
  5149                           tblptru	equ	0xFF8
  5150                           tblptrh	equ	0xFF7
  5151                           tblptrl	equ	0xFF6
  5152                           tablat	equ	0xFF5
  5153                           prodh	equ	0xFF4
  5154                           prodl	equ	0xFF3
  5155                           intcon	equ	0xFF2
  5156                           intcon3	equ	0xFF0
  5157                           indf0	equ	0xFEF
  5158                           postinc0	equ	0xFEE
  5159                           fsr0h	equ	0xFEA
  5160                           fsr0l	equ	0xFE9
  5161                           wreg	equ	0xFE8
  5162                           postdec1	equ	0xFE5
  5163                           plusw1	equ	0xFE3
  5164                           fsr1h	equ	0xFE2
  5165                           fsr1l	equ	0xFE1
  5166                           indf2	equ	0xFDF
  5167                           postinc2	equ	0xFDE
  5168                           postdec2	equ	0xFDD
  5169                           plusw2	equ	0xFDB
  5170                           fsr2h	equ	0xFDA
  5171                           fsr2l	equ	0xFD9
  5172                           status	equ	0xFD8
  5173                           
  5174                           	psect	rparam
  5175  0000                     pclatu	equ	0xFFB
  5176                           pclath	equ	0xFFA
  5177                           tblptru	equ	0xFF8
  5178                           tblptrh	equ	0xFF7
  5179                           tblptrl	equ	0xFF6
  5180                           tablat	equ	0xFF5
  5181                           prodh	equ	0xFF4
  5182                           prodl	equ	0xFF3
  5183                           intcon	equ	0xFF2
  5184                           intcon3	equ	0xFF0
  5185                           indf0	equ	0xFEF
  5186                           postinc0	equ	0xFEE
  5187                           fsr0h	equ	0xFEA
  5188                           fsr0l	equ	0xFE9
  5189                           wreg	equ	0xFE8
  5190                           postdec1	equ	0xFE5
  5191                           plusw1	equ	0xFE3
  5192                           fsr1h	equ	0xFE2
  5193                           fsr1l	equ	0xFE1
  5194                           indf2	equ	0xFDF
  5195                           postinc2	equ	0xFDE
  5196                           postdec2	equ	0xFDD
  5197                           plusw2	equ	0xFDB
  5198                           fsr2h	equ	0xFDA
  5199                           fsr2l	equ	0xFD9
  5200                           status	equ	0xFD8
  5201                           
  5202                           	psect	temp
  5203  000059                     btemp:
  5204                           	opt stack 0
  5205  000059                     	ds	1
  5206  0000                     int$flags	set	btemp
  5207                           pclatu	equ	0xFFB
  5208                           pclath	equ	0xFFA
  5209                           tblptru	equ	0xFF8
  5210                           tblptrh	equ	0xFF7
  5211                           tblptrl	equ	0xFF6
  5212                           tablat	equ	0xFF5
  5213                           prodh	equ	0xFF4
  5214                           prodl	equ	0xFF3
  5215                           intcon	equ	0xFF2
  5216                           intcon3	equ	0xFF0
  5217                           indf0	equ	0xFEF
  5218                           postinc0	equ	0xFEE
  5219                           fsr0h	equ	0xFEA
  5220                           fsr0l	equ	0xFE9
  5221                           wreg	equ	0xFE8
  5222                           postdec1	equ	0xFE5
  5223                           plusw1	equ	0xFE3
  5224                           fsr1h	equ	0xFE2
  5225                           fsr1l	equ	0xFE1
  5226                           indf2	equ	0xFDF
  5227                           postinc2	equ	0xFDE
  5228                           postdec2	equ	0xFDD
  5229                           plusw2	equ	0xFDB
  5230                           fsr2h	equ	0xFDA
  5231                           fsr2l	equ	0xFD9
  5232                           status	equ	0xFD8


Data Sizes:
    Strings     186
    Constant    10
    Data        41
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     88      88
    BANK0           128    119     127
    BANK1           256      0      41
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_19(CODE[3]), STR_17(CODE[3]), STR_15(CODE[3]), STR_13(CODE[3]), 
		 -> STR_11(CODE[13]), STR_9(CODE[11]), STR_3(CODE[3]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 41
		 -> STR_21(CODE[7]), println@output(BANK0[41]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    moveSmallNose@prev	PTR int  size(2) Largest target is 2
		 -> main@smallNose(BANK0[2]), 

    moveBigNose@prev	PTR int  size(2) Largest target is 2
		 -> main@bigNose(BANK0[2]), 

    showInfo@sorted	PTR unsigned int  size(2) Largest target is 8
		 -> mainloop@sorted(BANK0[8]), 

    println@data	PTR unsigned char  size(2) Largest target is 17
		 -> STR_20(CODE[10]), STR_18(CODE[11]), STR_16(CODE[11]), STR_14(CODE[10]), 
		 -> STR_12(CODE[11]), STR_10(CODE[14]), STR_8(CODE[14]), STR_7(CODE[14]), 
		 -> STR_6(CODE[15]), STR_5(CODE[2]), STR_4(CODE[17]), STR_2(CODE[9]), 
		 -> STR_1(CODE[11]), 

    mainloop@bigNose	PTR int  size(2) Largest target is 2
		 -> main@bigNose(BANK0[2]), 

    mainloop@smallNose	PTR int  size(2) Largest target is 2
		 -> main@smallNose(BANK0[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _keypressed in COMRAM

    i2_stopMoving->i2_println
    i2_println->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv

Critical Paths under _main in BANK0

    _main->_mainloop
    _mainloop->_showInfo
    _stopMoving->_println
    _showInfo->_println
    _println->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _checkC9V->_AD
    _checkAA->_AD
    _initialize->_initLCD
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     4      5   15414
                                            110 BANK0      9     4      5
                      _captureKeypad
                         _initialize
                           _mainloop
                        _moveBigNose
                      _moveSmallNose
                            _println
 ---------------------------------------------------------------------------------
 (1) _mainloop                                            23    19      4   11745
                                             87 BANK0     23    19      4
                            _checkAA
                           _checkC9V
                            _getTime
                        _moveBigNose
                      _moveSmallNose
                        _moveXMotors
                            _println
                           _showInfo
                         _stopMoving
 ---------------------------------------------------------------------------------
 (2) _stopMoving                                           0     0      0    2635
                            _println
 ---------------------------------------------------------------------------------
 (2) _showInfo                                            14    10      4    4623
                                             73 BANK0     14    10      4
                            _getTime (ARG)
                             _printf
                            _println
 ---------------------------------------------------------------------------------
 (1) _println                                             47    45      2    2635
                                             26 BANK0     47    45      2
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              20    16      4    1638
                                             12 BANK0     14    10      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     290
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _moveXMotors                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _moveSmallNose                                        7     3      4     390
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _moveBigNose                                          7     3      4     390
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _getTime                                              4     2      2      23
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _checkC9V                                             6     4      2     238
                                              2 BANK0      6     4      2
                                 _AD
 ---------------------------------------------------------------------------------
 (2) _checkAA                                              2     0      2     192
                                              2 BANK0      2     0      2
                                 _AD
 ---------------------------------------------------------------------------------
 (3) _AD                                                   2     0      2     192
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0     135
                            _initLCD
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _captureKeypad                                        3     1      2      23
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _keypressed                                          15    15      0    1248
                                             73 COMRAM    15    15      0
                       i2_stopMoving
 ---------------------------------------------------------------------------------
 (8) i2_stopMoving                                         0     0      0    1247
                          i2_println
 ---------------------------------------------------------------------------------
 (9) i2_println                                           47    45      2    1247
                                             26 COMRAM    47    45      2
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           20    16      4    1064
                                             12 COMRAM    14    10      4
                          i2___lwdiv
                          i2___lwmod
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _captureKeypad
   _initialize
     _initLCD
       _lcdInst
         _lcdNibble
   _mainloop
     _checkAA
       _AD
     _checkC9V
       _AD
     _getTime
     _moveBigNose
     _moveSmallNose
     _moveXMotors
     _println
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
     _showInfo
       _getTime (ARG)
       _printf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
       _println (ARG)
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
             _lcdNibble
     _stopMoving
       _println
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
             _lcdNibble
   _moveBigNose
   _moveSmallNose
   _println
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _lcdNibble

 _keypressed (ROOT)
   i2_stopMoving
     i2_println
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      29       7       16.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     77      7F       5       99.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     58      58       1       69.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     100      34        0.0%
DATA                 0      0     100       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Feb 06 17:50:08 2017

                     _AD 1FF0       i2___lwdiv@dividend 0001              __CFG_BORV$3 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000              __CFG_OSC$HS 000000                      ?_AD 0080  
                    l110 1F56                      l113 1F64                      l132 12EA  
                    l612 1C6E                      l622 1D9E             __CFG_CPB$OFF 000000  
           __CFG_CPD$OFF 000000                      u710 13B0                      u720 13DC  
                    u717 13A6                      u727 13D2                      u871 18E4  
                    wreg 000FE8              main@bigNose 00F3                     ??_AD 0082  
           __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000                     l1413 1352  
                   l1423 138E                     l1415 135A                     l1431 13E4  
                   l1361 1C30                     l1433 1418                     l1409 133E  
                   l1521 192C                     l1443 1448                     l1427 13BA  
                   l1621 1B54                     l1357 1C1E                     l1381 1D6C  
                   l1461 149E                     l1445 144E                     l1517 18EE  
                   l1701 12EE                     l1631 1BAA                     l1623 1B5E  
                   l1359 1C2A                     l1463 14A4                     l1633 1BD0  
                   l1617 1B24                     l1369 1C60                     l1385 1D90  
                   l1377 1D5A                     l1457 148A                     l1651 1D24  
                   l1635 1BDA                     l1619 1B2E                     l1379 1D66  
                   l1467 14FC                     l1629 1BA0                     l1469 1508  
                   l1657 1D3A                     l1673 112E                     l1745 1578  
                   l1691 127A                     l1683 1210                     l1675 113A  
                   l1773 1682                     l1695 12B2                     l1687 1242  
                   l1679 1164                     l1767 1626                     l1791 1976  
                   l1777 16C8                     STR_1 108E                     STR_2 10AD  
                   STR_3 10C0                     STR_4 100B                     STR_5 10C3  
                   STR_6 101C                     STR_7 1047                     STR_8 102B  
                   STR_9 1083                     u1111 154C                     u1120 15DC  
                   u1130 15DE                     u1140 15F8                     u1150 15FA  
                   u1307 1CCE                     u1317 1CD8                     u1190 16BE  
                   _LATB 000F8A                     _LATC 000F8B                     _LATD 000F8C  
                   u1257 10F6                     u1267 1E58                     u1277 1E8C  
                   u1287 1C98                     u1297 1CA2                     _main 1976  
           println@F3048 0100                     fsr0h 000FEA                     fsr1h 000FE2  
     i2___lwdiv@quotient 0005                     indf0 000FEF                     fsr2h 000FDA  
                   fsr0l 000FE9                     indf2 000FDF                     fsr1l 000FE1  
                   fsr2l 000FD9                     btemp 0059                     prodh 000FF4  
                   prodl 000FF3                     start 000E            __CFG_IESO$OFF 000000  
        __end_ofi2_putch 1FEE            __CFG_MCLRE$ON 000000             ___param_bank 000000  
            i2_lcdNibble 1DA8                    AD@pin 0080                    ?_main 00EE  
                  STR_10 1039                    STR_11 1055                    STR_20 10A3  
                  STR_12 106D                    STR_13 10BD                    STR_21 10B6  
                  STR_14 1099                    STR_15 10BD                    STR_16 1078  
                  STR_17 10BD                    STR_18 1062                    STR_19 10BD  
        __end_of___lwdiv 1C78                    i2l120 1A4E          __end_of___lwmod 1DA8  
                  i2l612 1E46                    i2l622 1ECE     __end_ofi2_stopMoving 1FE2  
        __end_of_checkAA 1F8A                    _PORTB 000F81                    _TRISB 000F93  
                  _TRISC 000F94                    _TRISD 000F95            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000          __end_of_lcdInst 1FD2           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000          __end_of_getTime 1FB2           __CFG_EBTR1$OFF 000000  
         __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000          __end_of_initLCD 1E96  
         __CFG_EBTRB$OFF 000000          __end_of_dpowers 100B                    _putch 1FB2  
                  pclath 000FFA                    tablat 000FF5          __end_of_println 1976  
                  plusw1 000FE3                    plusw2 000FDB                    status 000FD8  
         __CFG_PBADEN$ON 000000         __end_ofi2_printf 18D0       __size_ofi2___lwdiv 0052  
     __size_ofi2___lwmod 0042        moveSmallNose@next 0082        moveSmallNose@prev 0080  
        __initialization 1ED8             __end_of_main 1A02               i2printf@ap 0014  
             i2printf@cp 0016            i2println@data 001B               i2println@i 0048  
         mainloop@sorted 00E2                   ??_main 00F3       __size_ofi2_println 007E  
          __activetblptr 000003             ?_moveBigNose 0080            println@output 009E  
                 _ADCON0 000FC2                   _ADCON1 000FC1             ?_moveXMotors 0001  
        i2lcdNibble@data 0002                   ?_putch 0001          i2lcdNibble@temp 0001  
                 _INT1IF 007F80    __end_of_moveSmallNose 1B84                   i2l1501 1EA4  
                 i2l1503 1EAC                   i2l1505 1EB0                   i2l1531 1724  
                 i2l1509 1EC4                   i2l1535 1734                   i2l1481 1E14  
                 i2l1545 1764                   i2l1537 173A                   i2l1553 17B8  
                 i2l1483 1E1C                   i2l1555 17E8                   i2l1715 1AA6  
                 i2l1493 1E3C                   i2l1485 1E20                   i2l1565 1810  
                 i2l1549 178E                   i2l1583 1858                   i2l1567 1814  
                 i2l1591 18B4                   i2l1719 1AD2                   i2l1585 185E  
                 i2l1579 1846                   i2l1589 18AC                ??i2_putch 0003  
       __end_of_checkC9V 1D46        mainloop@smallNose 00D9           __CFG_XINST$OFF 000000  
  __end_of_captureKeypad 1F72           __CFG_STVREN$ON 000000         __end_of_mainloop 171A  
              ??___lwdiv 0084                ??___lwmod 008B                ??_checkAA 0084  
                 clear_0 1EFE        mainloop@startTime 00E0            main@smallNose 00F5  
              ??_lcdInst 0082                   _printf 1330                ??_getTime 0082  
              ??_initLCD 0083         __end_of_showInfo 1330        __end_ofi2___lwdiv 1E50  
           __mediumconst 0000        __end_ofi2___lwmod 1ED8                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                ??_println 009C  
             __accesstop 0080  __end_of__initialization 1F04         checkC9V@charged9 0086  
       checkC9V@chargedC 0084        __end_ofi2_println 1B08            ___rparam_used 000001  
     i2___lwmod@dividend 0008           __pcstackCOMRAM 0001             __pidataBANK1 1F0E  
        mainloop@bigNose 00D7    __size_ofi2_stopMoving 0010            __end_of_putch 1FC2  
            i2printf@val 0018               __end_of_AD 1FF2             mainloop@stop 00DD  
     __size_of_lcdNibble 0068              i2putch@data 0003                ?i2_printf 000D  
                ??_putch 0082               __pbssBANK0 00F7             i2_stopMoving 1FD2  
           ?i2_lcdNibble 0001                  ?_printf 008C                ?_checkC9V 0082  
   __size_of_moveBigNose 007C               ??i2_printf 0011                  i2u91_40 1786  
                i2u91_47 177C                  i2u92_40 17B0                  i2u92_47 17A6  
              ?_mainloop 00D7     __size_of_moveXMotors 0002                  i2_putch 1FE2  
      __end_of_lcdNibble 1CE0                  __Hparam 0000                  __Lparam 0000  
              ?_showInfo 00C9                  ___lwdiv 1C00                  ___lwmod 1D46  
           __psmallconst 1000                  _checkAA 1F72                  __pcinit 1ED8  
                __ramtop 1000               _initialize 1F38                  _lcdInst 1FC2  
                __ptext0 1976                  __ptext1 1528                  __ptext2 1F8A  
                __ptext3 10C6                  _getTime 1F9E                  __ptext4 18D0  
                __ptext5 1330                  __ptext6 1FB2                  __ptext7 1D46  
                __ptext8 1C00                  __ptext9 1FEE          __size_of_printf 01F8  
                _initLCD 1E50               ??_checkC9V 0084                  _dpowers 1001  
             _keypressed 0008                  _println 18D0           __pintcode_body 1A02  
   end_of_initialization 1F04               ??_mainloop 00DB                  int_func 1A02  
             ??_showInfo 00CD                  printf@c 0099                  printf@f 008C  
                postdec1 000FE5                  postdec2 000FDD                  postinc0 000FEE  
                postinc2 000FDE                _PORTBbits 000F81        i2___lwdiv@divisor 0003  
              i2___lwdiv 1DFE                i2___lwmod 1E96        i2___lwdiv@counter 0007  
             _stopMoving 1F8A                i2_println 1A8A              println@data 009A  
   __size_ofi2_lcdNibble 0056            mainloop@F3174 00F7              ?_initialize 0001  
 __size_of_moveSmallNose 007C           __end_of_printf 1528             i2printf@flag 0012  
           i2printf@prec 0013      start_initialization 1ED8              ?_keypressed 0001  
           _mainloop$147 00DF               mainloop@C9 00EC               mainloop@AA 00EA  
              i2printf@c 001A                i2printf@f 000D   __size_of_captureKeypad 001C  
             ?i2___lwdiv 0001               ?i2___lwmod 0008        __size_ofi2_printf 01B6  
        i2println@output 001F          moveBigNose@next 0082          moveBigNose@prev 0080  
             ?i2_println 001B              __pdataBANK1 0100         __CFG_LPT1OSC$OFF 000000  
               ??_printf 0090            __pcstackBANK0 0080        __size_of_checkC9V 0066  
      i2___lwmod@divisor 000A        i2___lwmod@counter 000C            _moveSmallNose 1B08  
               ?i2_putch 0001      __size_of_initialize 001E        __size_of_mainloop 01F2  
            ?_stopMoving 0001         ___lwdiv@dividend 0080        __CFG_CCP2MX$PORTC 000000  
          _captureKeypad 1F56      __size_of_keypressed 1A82                __pintcode 0008  
              _lcdNibble 1C78                 ?___lwdiv 0080                 ?___lwmod 0087  
      __size_of_showInfo 026A                 ?_checkAA 0082                 ?_lcdInst 0001  
               ?_getTime 0080            ??_moveBigNose 0084                 ?_initLCD 0001  
            __smallconst 1000                 ?_println 009A            ??_moveXMotors 0080  
       ___lwdiv@quotient 0084              ??i2___lwdiv 0005              ??i2___lwmod 000C  
         __size_of_putch 0010              __size_of_AD 0002           ?_moveSmallNose 0080  
               _LATDbits 000F8C                 i2u132_47 1DC0                 i2u109_41 1A9C  
               i2u133_47 1DCA                 i2u134_47 1DEC                 i2u135_47 1DF6  
         ?_captureKeypad 0080              ??i2_println 001D         __CFG_WDTPS$32768 000000  
             ?_lcdNibble 0001            lcdNibble@data 0081               printf@flag 0091  
          lcdNibble@temp 0080               printf@prec 0092      __size_of_stopMoving 0014  
               i2_printf 171A    captureKeypad@keypress 0082      __end_of_moveBigNose 1C00  
              copy_data0 1EEC      __end_of_moveXMotors 1FF0         __size_ofi2_putch 000C  
     keypressed@keypress 0058           showInfo@sorted 00CB                 __Hrparam 0000  
               __Lrparam 0000       __CFG_BOREN$SBORDIS 000000         __size_of___lwdiv 0078  
       __size_of___lwmod 0062             ??_initialize 0084         __size_of_checkAA 0018  
       __size_of_lcdInst 0010         __size_of_getTime 0014                 _checkC9V 1CE0  
       __size_of_initLCD 0046             ??_keypressed 004A          ___lwdiv@divisor 0082  
        ___lwdiv@counter 0086                 __ptext10 1B08                 __ptext11 1B84  
               __ptext20 1F56                 __ptext12 1F9E                 __ptext13 1CE0  
               __ptext22 1FD2                 __ptext14 1F72                 __ptext23 1A8A  
               __ptext15 1FF0                 __ptext24 171A                 __ptext16 1F38  
               __ptext25 1FE2                 __ptext17 1E50                 __ptext26 1DA8  
               __ptext18 1FC2                 __ptext27 1E96                 __ptext19 1C78  
               __ptext28 1DFE                 __ptext29 0000          ??_moveSmallNose 0084  
       __size_of_println 00A6                 _mainloop 1528            __size_of_main 008C  
     __end_of_initialize 1F56          ??_captureKeypad 0082            ?i2_stopMoving 0001  
               _showInfo 10C6            ??i2_lcdNibble 0001              ??_lcdNibble 0080  
     __end_of_keypressed 1A8A                 int$flags 0059                 main@argc 00EE  
               main@argv 00F0                printf@val 0097              _moveBigNose 1B84  
              putch@data 0082               _INTCONbits 000FF2              _moveXMotors 1FEE  
               intlevel2 0000         ___lwmod@dividend 0087           ??i2_stopMoving 004A  
           ??_stopMoving 00C9                 printf@ap 0093                 printf@cp 0095  
               println@i 00C7              lcdInst@data 0082             showInfo@time 00C9  
           showInfo@type 00D5      __end_ofi2_lcdNibble 1DFE          ___lwmod@divisor 0089  
        ___lwmod@counter 008B       __end_of_stopMoving 1F9E              getTime@time 0082  

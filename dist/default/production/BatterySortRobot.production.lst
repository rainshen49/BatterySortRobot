

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Mar 13 15:35:35 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1
    67                           	psect	text55,global,reloc=2,class=CODE,delta=1
    68                           	psect	text56,global,reloc=2,class=CODE,delta=1
    69                           	psect	text57,global,reloc=2,class=CODE,delta=1
    70                           	psect	text58,global,reloc=2,class=CODE,delta=1
    71                           	psect	text59,global,reloc=2,class=CODE,delta=1
    72                           	psect	text60,global,reloc=2,class=CODE,delta=1
    73                           	psect	text61,global,reloc=2,class=CODE,delta=1
    74                           	psect	text62,global,reloc=2,class=CODE,delta=1
    75                           	psect	text63,global,reloc=2,class=CODE,delta=1
    76                           	psect	text64,global,reloc=2,class=CODE,delta=1
    77                           	psect	text65,global,reloc=2,class=CODE,delta=1
    78                           	psect	text66,global,reloc=2,class=CODE,delta=1
    79                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    80                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    81                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    82  0000                     
    83                           ; Version 1.41
    84                           ; Generated 25/01/2017 GMT
    85                           ; 
    86                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    87                           ; All rights reserved.
    88                           ; 
    89                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    90                           ; 
    91                           ; Redistribution and use in source and binary forms, with or without modification, are
    92                           ; permitted provided that the following conditions are met:
    93                           ; 
    94                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    95                           ;        conditions and the following disclaimer.
    96                           ; 
    97                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    98                           ;        of conditions and the following disclaimer in the documentation and/or other
    99                           ;        materials provided with the distribution.
   100                           ; 
   101                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   102                           ;        software without specific prior written permission.
   103                           ; 
   104                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   105                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   106                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   107                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   108                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   109                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   110                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   111                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   112                           ; 
   113                           ; 
   114                           ; Code-generator required, PIC18F4620 Definitions
   115                           ; 
   116                           ; SFR Addresses
   117  0000                     
   118                           	psect	mediumconst
   119  00FDD4                     __pmediumconst:
   120                           	opt stack 0
   121  00FDD4  00                 	db	0
   122  00FDD5                     _dpowers:
   123                           	opt stack 0
   124  00FDD5  0001               	dw	1
   125  00FDD7  000A               	dw	10
   126  00FDD9  0064               	dw	100
   127  00FDDB  03E8               	dw	1000
   128  00FDDD  2710               	dw	10000
   129  00FDDF                     __end_of_dpowers:
   130                           	opt stack 0
   131  00FDDF                     _hexpowers:
   132                           	opt stack 0
   133  00FDDF  0001               	dw	1
   134  00FDE1  0010               	dw	16
   135  00FDE3  0100               	dw	256
   136  00FDE5  1000               	dw	4096
   137  00FDE7                     __end_of_hexpowers:
   138                           	opt stack 0
   139  0000                     _PIR2bits	set	4001
   140  0000                     _EECON2	set	4007
   141  0000                     _EEDATA	set	4008
   142  0000                     _EECON1bits	set	4006
   143  0000                     _EEADR	set	4009
   144  0000                     _EEADRH	set	4010
   145  0000                     _SSPBUF	set	4041
   146  0000                     _SSPADD	set	4040
   147  0000                     _SSPCON2	set	4037
   148  0000                     _SSPCON1	set	4038
   149  0000                     _SSPSTAT	set	4039
   150  0000                     _ADRESL	set	4035
   151  0000                     _ADRESH	set	4036
   152  0000                     _ADCON0bits	set	4034
   153  0000                     _LATDbits	set	3980
   154  0000                     _PORTBbits	set	3969
   155  0000                     _PORTB	set	3969
   156  0000                     _INTCONbits	set	4082
   157  0000                     _CVRCON	set	4021
   158  0000                     _ADCON1	set	4033
   159  0000                     _ADCON0	set	4034
   160  0000                     _LATE	set	3981
   161  0000                     _LATD	set	3980
   162  0000                     _LATC	set	3979
   163  0000                     _LATB	set	3978
   164  0000                     _LATA	set	3977
   165  0000                     _TRISE	set	3990
   166  0000                     _TRISD	set	3989
   167  0000                     _TRISC	set	3988
   168  0000                     _TRISB	set	3987
   169  0000                     _TRISA	set	3986
   170  0000                     _ACKEN	set	32300
   171  0000                     _ACKDT	set	32301
   172  0000                     _RCEN	set	32299
   173  0000                     _PEN	set	32298
   174  0000                     _SEN	set	32296
   175  0000                     _TRISC4	set	31908
   176  0000                     _TRISC3	set	31907
   177  0000                     _ADON	set	32272
   178  0000                     _INT1IE	set	32643
   179  0000                     _INT1IF	set	32640
   180  0000                     _INT2IF	set	32641
   181  0000                     _INT2IE	set	32644
   182  0000                     _LATC5	set	31837
   183  0000                     _ADFM	set	32263
   184  0000                     _LATC2	set	31834
   185  0000                     _LATC1	set	31833
   186  0000                     _LATC0	set	31832
   187  00FDE7                     STR_18:
   188                           
   189                           ; BSR set to: 0
   190  00FDE7  53                 	db	83	;'S'
   191  00FDE8  6F                 	db	111	;'o'
   192  00FDE9  72                 	db	114	;'r'
   193  00FDEA  74                 	db	116	;'t'
   194  00FDEB  69                 	db	105	;'i'
   195  00FDEC  6E                 	db	110	;'n'
   196  00FDED  67                 	db	103	;'g'
   197  00FDEE  20                 	db	32
   198  00FDEF  43                 	db	67	;'C'
   199  00FDF0  6F                 	db	111	;'o'
   200  00FDF1  6D                 	db	109	;'m'
   201  00FDF2  70                 	db	112	;'p'
   202  00FDF3  6C                 	db	108	;'l'
   203  00FDF4  65                 	db	101	;'e'
   204  00FDF5  74                 	db	116	;'t'
   205  00FDF6  65                 	db	101	;'e'
   206  00FDF7  20                 	db	32
   207  00FDF8  20                 	db	32
   208  00FDF9  20                 	db	32
   209  00FDFA  20                 	db	32
   210  00FDFB  20                 	db	32
   211  00FDFC  20                 	db	32
   212  00FDFD  20                 	db	32
   213  00FDFE  20                 	db	32
   214  00FDFF  20                 	db	32
   215  00FE00  20                 	db	32
   216  00FE01  00                 	db	0
   217  00FE02                     STR_22:
   218                           
   219                           ; BSR set to: 0
   220  00FE02  50                 	db	80	;'P'
   221  00FE03  72                 	db	114	;'r'
   222  00FE04  65                 	db	101	;'e'
   223  00FE05  73                 	db	115	;'s'
   224  00FE06  73                 	db	115	;'s'
   225  00FE07  20                 	db	32
   226  00FE08  61                 	db	97	;'a'
   227  00FE09  20                 	db	32
   228  00FE0A  6E                 	db	110	;'n'
   229  00FE0B  75                 	db	117	;'u'
   230  00FE0C  6D                 	db	109	;'m'
   231  00FE0D  62                 	db	98	;'b'
   232  00FE0E  65                 	db	101	;'e'
   233  00FE0F  72                 	db	114	;'r'
   234  00FE10  20                 	db	32
   235  00FE11  20                 	db	32
   236  00FE12  20                 	db	32
   237  00FE13  20                 	db	32
   238  00FE14  20                 	db	32
   239  00FE15  20                 	db	32
   240  00FE16  20                 	db	32
   241  00FE17  20                 	db	32
   242  00FE18  20                 	db	32
   243  00FE19  20                 	db	32
   244  00FE1A  00                 	db	0
   245  00FE1B                     STR_19:
   246                           
   247                           ; BSR set to: 0
   248  00FE1B  20                 	db	32
   249  00FE1C  20                 	db	32
   250  00FE1D  20                 	db	32
   251  00FE1E  20                 	db	32
   252  00FE1F  25                 	db	37
   253  00FE20  30                 	db	48	;'0'
   254  00FE21  32                 	db	50	;'2'
   255  00FE22  78                 	db	120	;'x'
   256  00FE23  2F                 	db	47
   257  00FE24  25                 	db	37
   258  00FE25  30                 	db	48	;'0'
   259  00FE26  32                 	db	50	;'2'
   260  00FE27  78                 	db	120	;'x'
   261  00FE28  2F                 	db	47
   262  00FE29  25                 	db	37
   263  00FE2A  30                 	db	48	;'0'
   264  00FE2B  32                 	db	50	;'2'
   265  00FE2C  78                 	db	120	;'x'
   266  00FE2D  20                 	db	32
   267  00FE2E  20                 	db	32
   268  00FE2F  20                 	db	32
   269  00FE30  20                 	db	32
   270  00FE31  20                 	db	32
   271  00FE32  20                 	db	32
   272  00FE33  00                 	db	0
   273  00FE34                     STR_20:
   274                           
   275                           ; BSR set to: 0
   276  00FE34  20                 	db	32
   277  00FE35  20                 	db	32
   278  00FE36  20                 	db	32
   279  00FE37  20                 	db	32
   280  00FE38  25                 	db	37
   281  00FE39  30                 	db	48	;'0'
   282  00FE3A  32                 	db	50	;'2'
   283  00FE3B  78                 	db	120	;'x'
   284  00FE3C  3A                 	db	58	;':'
   285  00FE3D  25                 	db	37
   286  00FE3E  30                 	db	48	;'0'
   287  00FE3F  32                 	db	50	;'2'
   288  00FE40  78                 	db	120	;'x'
   289  00FE41  3A                 	db	58	;':'
   290  00FE42  25                 	db	37
   291  00FE43  30                 	db	48	;'0'
   292  00FE44  32                 	db	50	;'2'
   293  00FE45  78                 	db	120	;'x'
   294  00FE46  20                 	db	32
   295  00FE47  20                 	db	32
   296  00FE48  20                 	db	32
   297  00FE49  20                 	db	32
   298  00FE4A  20                 	db	32
   299  00FE4B  20                 	db	32
   300  00FE4C  00                 	db	0
   301  00FE4D                     STR_16:
   302                           
   303                           ; BSR set to: 0
   304  00FE4D  25                 	db	37
   305  00FE4E  30                 	db	48	;'0'
   306  00FE4F  32                 	db	50	;'2'
   307  00FE50  78                 	db	120	;'x'
   308  00FE51  3A                 	db	58	;':'
   309  00FE52  25                 	db	37
   310  00FE53  30                 	db	48	;'0'
   311  00FE54  32                 	db	50	;'2'
   312  00FE55  78                 	db	120	;'x'
   313  00FE56  20                 	db	32
   314  00FE57  74                 	db	116	;'t'
   315  00FE58  6F                 	db	111	;'o'
   316  00FE59  20                 	db	32
   317  00FE5A  25                 	db	37
   318  00FE5B  30                 	db	48	;'0'
   319  00FE5C  32                 	db	50	;'2'
   320  00FE5D  78                 	db	120	;'x'
   321  00FE5E  3A                 	db	58	;':'
   322  00FE5F  25                 	db	37
   323  00FE60  30                 	db	48	;'0'
   324  00FE61  32                 	db	50	;'2'
   325  00FE62  78                 	db	120	;'x'
   326  00FE63  20                 	db	32
   327  00FE64  20                 	db	32
   328  00FE65  00                 	db	0
   329  00FE66                     STR_24:
   330                           
   331                           ; BSR set to: 0
   332  00FE66  54                 	db	84	;'T'
   333  00FE67  69                 	db	105	;'i'
   334  00FE68  6D                 	db	109	;'m'
   335  00FE69  65                 	db	101	;'e'
   336  00FE6A  20                 	db	32
   337  00FE6B  45                 	db	69	;'E'
   338  00FE6C  6C                 	db	108	;'l'
   339  00FE6D  61                 	db	97	;'a'
   340  00FE6E  70                 	db	112	;'p'
   341  00FE6F  73                 	db	115	;'s'
   342  00FE70  65                 	db	101	;'e'
   343  00FE71  64                 	db	100	;'d'
   344  00FE72  3A                 	db	58	;':'
   345  00FE73  20                 	db	32
   346  00FE74  20                 	db	32
   347  00FE75  20                 	db	32
   348  00FE76  20                 	db	32
   349  00FE77  20                 	db	32
   350  00FE78  20                 	db	32
   351  00FE79  20                 	db	32
   352  00FE7A  20                 	db	32
   353  00FE7B  20                 	db	32
   354  00FE7C  20                 	db	32
   355  00FE7D  00                 	db	0
   356  00FE7E                     STR_26:
   357                           
   358                           ; BSR set to: 0
   359  00FE7E  54                 	db	84	;'T'
   360  00FE7F  6F                 	db	111	;'o'
   361  00FE80  74                 	db	116	;'t'
   362  00FE81  61                 	db	97	;'a'
   363  00FE82  6C                 	db	108	;'l'
   364  00FE83  20                 	db	32
   365  00FE84  53                 	db	83	;'S'
   366  00FE85  6F                 	db	111	;'o'
   367  00FE86  72                 	db	114	;'r'
   368  00FE87  74                 	db	116	;'t'
   369  00FE88  65                 	db	101	;'e'
   370  00FE89  64                 	db	100	;'d'
   371  00FE8A  3A                 	db	58	;':'
   372  00FE8B  20                 	db	32
   373  00FE8C  20                 	db	32
   374  00FE8D  20                 	db	32
   375  00FE8E  20                 	db	32
   376  00FE8F  20                 	db	32
   377  00FE90  20                 	db	32
   378  00FE91  20                 	db	32
   379  00FE92  20                 	db	32
   380  00FE93  20                 	db	32
   381  00FE94  20                 	db	32
   382  00FE95  00                 	db	0
   383  00FE96                     STR_23:
   384                           
   385                           ; BSR set to: 0
   386  00FE96  46                 	db	70	;'F'
   387  00FE97  6F                 	db	111	;'o'
   388  00FE98  72                 	db	114	;'r'
   389  00FE99  20                 	db	32
   390  00FE9A  6D                 	db	109	;'m'
   391  00FE9B  6F                 	db	111	;'o'
   392  00FE9C  72                 	db	114	;'r'
   393  00FE9D  65                 	db	101	;'e'
   394  00FE9E  20                 	db	32
   395  00FE9F  69                 	db	105	;'i'
   396  00FEA0  6E                 	db	110	;'n'
   397  00FEA1  66                 	db	102	;'f'
   398  00FEA2  6F                 	db	111	;'o'
   399  00FEA3  20                 	db	32
   400  00FEA4  20                 	db	32
   401  00FEA5  20                 	db	32
   402  00FEA6  20                 	db	32
   403  00FEA7  20                 	db	32
   404  00FEA8  20                 	db	32
   405  00FEA9  20                 	db	32
   406  00FEAA  20                 	db	32
   407  00FEAB  20                 	db	32
   408  00FEAC  20                 	db	32
   409  00FEAD  00                 	db	0
   410  00FEAE                     STR_2:
   411                           
   412                           ; BSR set to: 0
   413  00FEAE  53                 	db	83	;'S'
   414  00FEAF  69                 	db	105	;'i'
   415  00FEB0  6D                 	db	109	;'m'
   416  00FEB1  75                 	db	117	;'u'
   417  00FEB2  6C                 	db	108	;'l'
   418  00FEB3  61                 	db	97	;'a'
   419  00FEB4  74                 	db	116	;'t'
   420  00FEB5  69                 	db	105	;'i'
   421  00FEB6  6E                 	db	110	;'n'
   422  00FEB7  67                 	db	103	;'g'
   423  00FEB8  2E                 	db	46
   424  00FEB9  2E                 	db	46
   425  00FEBA  2E                 	db	46
   426  00FEBB  20                 	db	32
   427  00FEBC  20                 	db	32
   428  00FEBD  20                 	db	32
   429  00FEBE  20                 	db	32
   430  00FEBF  20                 	db	32
   431  00FEC0  20                 	db	32
   432  00FEC1  20                 	db	32
   433  00FEC2  20                 	db	32
   434  00FEC3  20                 	db	32
   435  00FEC4  20                 	db	32
   436  00FEC5  00                 	db	0
   437  00FEC6                     STR_27:
   438                           
   439                           ; BSR set to: 0
   440  00FEC6  25                 	db	37
   441  00FEC7  75                 	db	117	;'u'
   442  00FEC8  20                 	db	32
   443  00FEC9  62                 	db	98	;'b'
   444  00FECA  61                 	db	97	;'a'
   445  00FECB  74                 	db	116	;'t'
   446  00FECC  74                 	db	116	;'t'
   447  00FECD  65                 	db	101	;'e'
   448  00FECE  72                 	db	114	;'r'
   449  00FECF  69                 	db	105	;'i'
   450  00FED0  65                 	db	101	;'e'
   451  00FED1  73                 	db	115	;'s'
   452  00FED2  20                 	db	32
   453  00FED3  20                 	db	32
   454  00FED4  20                 	db	32
   455  00FED5  20                 	db	32
   456  00FED6  20                 	db	32
   457  00FED7  20                 	db	32
   458  00FED8  20                 	db	32
   459  00FED9  20                 	db	32
   460  00FEDA  20                 	db	32
   461  00FEDB  20                 	db	32
   462  00FEDC  00                 	db	0
   463  00FEDD                     STR_34:
   464                           
   465                           ; BSR set to: 0
   466  00FEDD  55                 	db	85	;'U'
   467  00FEDE  6E                 	db	110	;'n'
   468  00FEDF  63                 	db	99	;'c'
   469  00FEE0  68                 	db	104	;'h'
   470  00FEE1  61                 	db	97	;'a'
   471  00FEE2  72                 	db	114	;'r'
   472  00FEE3  67                 	db	103	;'g'
   473  00FEE4  65                 	db	101	;'e'
   474  00FEE5  64                 	db	100	;'d'
   475  00FEE6  3A                 	db	58	;':'
   476  00FEE7  20                 	db	32
   477  00FEE8  20                 	db	32
   478  00FEE9  20                 	db	32
   479  00FEEA  20                 	db	32
   480  00FEEB  20                 	db	32
   481  00FEEC  20                 	db	32
   482  00FEED  20                 	db	32
   483  00FEEE  20                 	db	32
   484  00FEEF  20                 	db	32
   485  00FEF0  20                 	db	32
   486  00FEF1  00                 	db	0
   487  00FEF2                     STR_28:
   488                           
   489                           ; BSR set to: 0
   490  00FEF2  41                 	db	65	;'A'
   491  00FEF3  41                 	db	65	;'A'
   492  00FEF4  20                 	db	32
   493  00FEF5  53                 	db	83	;'S'
   494  00FEF6  6F                 	db	111	;'o'
   495  00FEF7  72                 	db	114	;'r'
   496  00FEF8  74                 	db	116	;'t'
   497  00FEF9  65                 	db	101	;'e'
   498  00FEFA  64                 	db	100	;'d'
   499  00FEFB  3A                 	db	58	;':'
   500  00FEFC  20                 	db	32
   501  00FEFD  20                 	db	32
   502  00FEFE  20                 	db	32
   503  00FEFF  20                 	db	32
   504  00FF00  20                 	db	32
   505  00FF01  20                 	db	32
   506  00FF02  20                 	db	32
   507  00FF03  20                 	db	32
   508  00FF04  20                 	db	32
   509  00FF05  20                 	db	32
   510  00FF06  00                 	db	0
   511  00FF07                     STR_32:
   512                           
   513                           ; BSR set to: 0
   514  00FF07  39                 	db	57	;'9'
   515  00FF08  56                 	db	86	;'V'
   516  00FF09  20                 	db	32
   517  00FF0A  53                 	db	83	;'S'
   518  00FF0B  6F                 	db	111	;'o'
   519  00FF0C  72                 	db	114	;'r'
   520  00FF0D  74                 	db	116	;'t'
   521  00FF0E  65                 	db	101	;'e'
   522  00FF0F  64                 	db	100	;'d'
   523  00FF10  3A                 	db	58	;':'
   524  00FF11  20                 	db	32
   525  00FF12  20                 	db	32
   526  00FF13  20                 	db	32
   527  00FF14  20                 	db	32
   528  00FF15  20                 	db	32
   529  00FF16  20                 	db	32
   530  00FF17  20                 	db	32
   531  00FF18  20                 	db	32
   532  00FF19  20                 	db	32
   533  00FF1A  20                 	db	32
   534  00FF1B  00                 	db	0
   535  00FF1C                     STR_25:
   536                           
   537                           ; BSR set to: 0
   538  00FF1C  25                 	db	37
   539  00FF1D  75                 	db	117	;'u'
   540  00FF1E  20                 	db	32
   541  00FF1F  73                 	db	115	;'s'
   542  00FF20  65                 	db	101	;'e'
   543  00FF21  63                 	db	99	;'c'
   544  00FF22  6F                 	db	111	;'o'
   545  00FF23  6E                 	db	110	;'n'
   546  00FF24  64                 	db	100	;'d'
   547  00FF25  73                 	db	115	;'s'
   548  00FF26  20                 	db	32
   549  00FF27  20                 	db	32
   550  00FF28  20                 	db	32
   551  00FF29  20                 	db	32
   552  00FF2A  20                 	db	32
   553  00FF2B  20                 	db	32
   554  00FF2C  20                 	db	32
   555  00FF2D  20                 	db	32
   556  00FF2E  20                 	db	32
   557  00FF2F  20                 	db	32
   558  00FF30  00                 	db	0
   559  00FF31                     STR_36:
   560                           
   561                           ; BSR set to: 0
   562  00FF31  45                 	db	69	;'E'
   563  00FF32  6D                 	db	109	;'m'
   564  00FF33  65                 	db	101	;'e'
   565  00FF34  72                 	db	114	;'r'
   566  00FF35  67                 	db	103	;'g'
   567  00FF36  65                 	db	101	;'e'
   568  00FF37  6E                 	db	110	;'n'
   569  00FF38  63                 	db	99	;'c'
   570  00FF39  79                 	db	121	;'y'
   571  00FF3A  20                 	db	32
   572  00FF3B  20                 	db	32
   573  00FF3C  20                 	db	32
   574  00FF3D  20                 	db	32
   575  00FF3E  20                 	db	32
   576  00FF3F  20                 	db	32
   577  00FF40  20                 	db	32
   578  00FF41  20                 	db	32
   579  00FF42  20                 	db	32
   580  00FF43  20                 	db	32
   581  00FF44  00                 	db	0
   582  00FF45                     STR_30:
   583                           
   584                           ; BSR set to: 0
   585  00FF45  43                 	db	67	;'C'
   586  00FF46  20                 	db	32
   587  00FF47  53                 	db	83	;'S'
   588  00FF48  6F                 	db	111	;'o'
   589  00FF49  72                 	db	114	;'r'
   590  00FF4A  74                 	db	116	;'t'
   591  00FF4B  65                 	db	101	;'e'
   592  00FF4C  64                 	db	100	;'d'
   593  00FF4D  3A                 	db	58	;':'
   594  00FF4E  20                 	db	32
   595  00FF4F  20                 	db	32
   596  00FF50  20                 	db	32
   597  00FF51  20                 	db	32
   598  00FF52  20                 	db	32
   599  00FF53  20                 	db	32
   600  00FF54  20                 	db	32
   601  00FF55  20                 	db	32
   602  00FF56  20                 	db	32
   603  00FF57  20                 	db	32
   604  00FF58  00                 	db	0
   605  00FF59                     STR_21:
   606                           
   607                           ; BSR set to: 0
   608  00FF59  57                 	db	87	;'W'
   609  00FF5A  65                 	db	101	;'e'
   610  00FF5B  6C                 	db	108	;'l'
   611  00FF5C  63                 	db	99	;'c'
   612  00FF5D  6F                 	db	111	;'o'
   613  00FF5E  6D                 	db	109	;'m'
   614  00FF5F  65                 	db	101	;'e'
   615  00FF60  21                 	db	33
   616  00FF61  20                 	db	32
   617  00FF62  20                 	db	32
   618  00FF63  20                 	db	32
   619  00FF64  20                 	db	32
   620  00FF65  20                 	db	32
   621  00FF66  20                 	db	32
   622  00FF67  20                 	db	32
   623  00FF68  20                 	db	32
   624  00FF69  20                 	db	32
   625  00FF6A  20                 	db	32
   626  00FF6B  00                 	db	0
   627  00FF6C                     STR_17:
   628                           
   629                           ; BSR set to: 0
   630  00FF6C  50                 	db	80	;'P'
   631  00FF6D  65                 	db	101	;'e'
   632  00FF6E  72                 	db	114	;'r'
   633  00FF6F  69                 	db	105	;'i'
   634  00FF70  6F                 	db	111	;'o'
   635  00FF71  64                 	db	100	;'d'
   636  00FF72  3A                 	db	58	;':'
   637  00FF73  20                 	db	32
   638  00FF74  25                 	db	37
   639  00FF75  75                 	db	117	;'u'
   640  00FF76  20                 	db	32
   641  00FF77  20                 	db	32
   642  00FF78  20                 	db	32
   643  00FF79  20                 	db	32
   644  00FF7A  20                 	db	32
   645  00FF7B  20                 	db	32
   646  00FF7C  20                 	db	32
   647  00FF7D  20                 	db	32
   648  00FF7E  00                 	db	0
   649  00FF7F                     STR_37:
   650                           
   651                           ; BSR set to: 0
   652  00FF7F  53                 	db	83	;'S'
   653  00FF80  74                 	db	116	;'t'
   654  00FF81  6F                 	db	111	;'o'
   655  00FF82  70                 	db	112	;'p'
   656  00FF83  70                 	db	112	;'p'
   657  00FF84  65                 	db	101	;'e'
   658  00FF85  64                 	db	100	;'d'
   659  00FF86  20                 	db	32
   660  00FF87  20                 	db	32
   661  00FF88  20                 	db	32
   662  00FF89  20                 	db	32
   663  00FF8A  20                 	db	32
   664  00FF8B  20                 	db	32
   665  00FF8C  20                 	db	32
   666  00FF8D  20                 	db	32
   667  00FF8E  20                 	db	32
   668  00FF8F  20                 	db	32
   669  00FF90  00                 	db	0
   670  00FF91                     STR_52:
   671                           
   672                           ; BSR set to: 0
   673  00FF91  30                 	db	48	;'0'
   674  00FF92  31                 	db	49	;'1'
   675  00FF93  32                 	db	50	;'2'
   676  00FF94  33                 	db	51	;'3'
   677  00FF95  34                 	db	52	;'4'
   678  00FF96  35                 	db	53	;'5'
   679  00FF97  36                 	db	54	;'6'
   680  00FF98  37                 	db	55	;'7'
   681  00FF99  38                 	db	56	;'8'
   682  00FF9A  39                 	db	57	;'9'
   683  00FF9B  61                 	db	97	;'a'
   684  00FF9C  62                 	db	98	;'b'
   685  00FF9D  63                 	db	99	;'c'
   686  00FF9E  64                 	db	100	;'d'
   687  00FF9F  65                 	db	101	;'e'
   688  00FFA0  66                 	db	102	;'f'
   689  00FFA1  00                 	db	0
   690  00FFA2                     STR_50:
   691                           
   692                           ; BSR set to: 0
   693  00FFA2  73                 	db	115	;'s'
   694  00FFA3  68                 	db	104	;'h'
   695  00FFA4  6F                 	db	111	;'o'
   696  00FFA5  77                 	db	119	;'w'
   697  00FFA6  69                 	db	105	;'i'
   698  00FFA7  6E                 	db	110	;'n'
   699  00FFA8  67                 	db	103	;'g'
   700  00FFA9  20                 	db	32
   701  00FFAA  25                 	db	37
   702  00FFAB  75                 	db	117	;'u'
   703  00FFAC  20                 	db	32
   704  00FFAD  20                 	db	32
   705  00FFAE  20                 	db	32
   706  00FFAF  20                 	db	32
   707  00FFB0  20                 	db	32
   708  00FFB1  20                 	db	32
   709  00FFB2  00                 	db	0
   710  00FFB3                     STR_51:
   711                           
   712                           ; BSR set to: 0
   713  00FFB3  72                 	db	114	;'r'
   714  00FFB4  75                 	db	117	;'u'
   715  00FFB5  6E                 	db	110	;'n'
   716  00FFB6  73                 	db	115	;'s'
   717  00FFB7  20                 	db	32
   718  00FFB8  62                 	db	98	;'b'
   719  00FFB9  65                 	db	101	;'e'
   720  00FFBA  66                 	db	102	;'f'
   721  00FFBB  6F                 	db	111	;'o'
   722  00FFBC  72                 	db	114	;'r'
   723  00FFBD  65                 	db	101	;'e'
   724  00FFBE  20                 	db	32
   725  00FFBF  20                 	db	32
   726  00FFC0  20                 	db	32
   727  00FFC1  20                 	db	32
   728  00FFC2  20                 	db	32
   729  00FFC3  00                 	db	0
   730  00FFC4                     STR_29:
   731                           
   732                           ; BSR set to: 0
   733  00FFC4  25                 	db	37
   734  00FFC5  75                 	db	117	;'u'
   735  00FFC6  20                 	db	32
   736  00FFC7  20                 	db	32
   737  00FFC8  20                 	db	32
   738  00FFC9  20                 	db	32
   739  00FFCA  20                 	db	32
   740  00FFCB  20                 	db	32
   741  00FFCC  20                 	db	32
   742  00FFCD  20                 	db	32
   743  00FFCE  20                 	db	32
   744  00FFCF  20                 	db	32
   745  00FFD0  20                 	db	32
   746  00FFD1  20                 	db	32
   747  00FFD2  20                 	db	32
   748  00FFD3  00                 	db	0
   749  00FFD4                     
   750                           ; BSR set to: 0
   751  00FFD4  4D                 	db	77	;'M'
   752  00FFD5  61                 	db	97	;'a'
   753  00FFD6  69                 	db	105	;'i'
   754  00FFD7  6E                 	db	110	;'n'
   755  00FFD8  6C                 	db	108	;'l'
   756  00FFD9  6F                 	db	111	;'o'
   757  00FFDA  6F                 	db	111	;'o'
   758  00FFDB  70                 	db	112	;'p'
   759  00FFDC  00                 	db	0
   760  00FFDD                     STR_12:
   761                           
   762                           ; BSR set to: 0
   763  00FFDD  20                 	db	32
   764  00FFDE  39                 	db	57	;'9'
   765  00FFDF  56                 	db	86	;'V'
   766  00FFE0  3A                 	db	58	;':'
   767  00FFE1  00                 	db	0
   768  00FFE2                     STR_40:
   769                           
   770                           ; BSR set to: 0
   771  00FFE2  20                 	db	32
   772  00FFE3  30                 	db	48	;'0'
   773  00FFE4  20                 	db	32
   774  00FFE5  00                 	db	0
   775  00FFE6                     STR_39:
   776                           
   777                           ; BSR set to: 0
   778  00FFE6  20                 	db	32
   779  00FFE7  31                 	db	49	;'1'
   780  00FFE8  20                 	db	32
   781  00FFE9  00                 	db	0
   782  00FFEA                     STR_41:
   783                           
   784                           ; BSR set to: 0
   785  00FFEA  2D                 	db	45
   786  00FFEB  31                 	db	49	;'1'
   787  00FFEC  20                 	db	32
   788  00FFED  00                 	db	0
   789  00FFEE                     STR_4:
   790                           
   791                           ; BSR set to: 0
   792  00FFEE  41                 	db	65	;'A'
   793  00FFEF  41                 	db	65	;'A'
   794  00FFF0  3A                 	db	58	;':'
   795  00FFF1  00                 	db	0
   796  00FFF2                     STR_8:
   797                           
   798                           ; BSR set to: 0
   799  00FFF2  20                 	db	32
   800  00FFF3  43                 	db	67	;'C'
   801  00FFF4  3A                 	db	58	;':'
   802  00FFF5  00                 	db	0
   803  00FFF6                     STR_6:
   804                           
   805                           ; BSR set to: 0
   806  00FFF6  20                 	db	32
   807  00FFF7  2B                 	db	43
   808  00FFF8  00                 	db	0
   809  00FFF9                     STR_5:
   810                           
   811                           ; BSR set to: 0
   812  00FFF9  20                 	db	32
   813  00FFFA  2D                 	db	45
   814  00FFFB  00                 	db	0
   815  00FFFC                     STR_7:
   816                           
   817                           ; BSR set to: 0
   818  00FFFC  20                 	db	32
   819  00FFFD  30                 	db	48	;'0'
   820  00FFFE  00                 	db	0
   821  0000                     
   822                           ; #config settings
   823  00FFFF  00                 	db	0	; dummy byte at the end
   824  0000                     
   825                           	psect	cinit
   826  001FE6                     __pcinit:
   827                           	opt stack 0
   828  001FE6                     start_initialization:
   829                           	opt stack 0
   830  001FE6                     __initialization:
   831                           	opt stack 0
   832                           
   833                           ; Clear objects allocated to BANK0 (29 bytes)
   834  001FE6  EE00  F0AA         	lfsr	0,__pbssBANK0
   835  001FEA  0E1D               	movlw	29
   836  001FEC                     clear_0:
   837  001FEC  6AEE               	clrf	postinc0,c
   838  001FEE  06E8               	decf	wreg,f,c
   839  001FF0  E1FD               	bnz	clear_0
   840                           
   841                           ; Clear objects allocated to COMRAM (9 bytes)
   842  001FF2  EE00  F074         	lfsr	0,__pbssCOMRAM
   843  001FF6  0E09               	movlw	9
   844  001FF8                     clear_1:
   845  001FF8  6AEE               	clrf	postinc0,c
   846  001FFA  06E8               	decf	wreg,f,c
   847  001FFC  E1FD               	bnz	clear_1
   848  001FFE                     end_of_initialization:
   849                           	opt stack 0
   850  001FFE                     __end_of__initialization:
   851                           	opt stack 0
   852  001FFE  907D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   853  002000  927D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   854  002002  0E00               	movlw	low (__Lmediumconst shr (0+16))
   855  002004  6EF8               	movwf	tblptru,c
   856  002006  0100               	movlb	0
   857  002008  EFD2  F00E         	goto	_main	;jump to C main() function
   858                           tblptru	equ	0xFF8
   859                           postinc0	equ	0xFEE
   860                           wreg	equ	0xFE8
   861                           
   862                           	psect	bssCOMRAM
   863  000074                     __pbssCOMRAM:
   864                           	opt stack 0
   865  000074                     _mode:
   866                           	opt stack 0
   867  000074                     	ds	2
   868  000076                     _time:
   869                           	opt stack 0
   870  000076                     	ds	7
   871                           tblptru	equ	0xFF8
   872                           postinc0	equ	0xFEE
   873                           wreg	equ	0xFE8
   874                           
   875                           	psect	bssBANK0
   876  0000AA                     __pbssBANK0:
   877                           	opt stack 0
   878  0000AA                     simulate@F3119:
   879                           	opt stack 0
   880  0000AA                     	ds	6
   881  0000B0                     simulate@F3117:
   882                           	opt stack 0
   883  0000B0                     	ds	6
   884  0000B6                     PermLog@F3084:
   885                           	opt stack 0
   886  0000B6                     	ds	4
   887  0000BA                     simulate@F3110:
   888                           	opt stack 0
   889  0000BA                     	ds	4
   890  0000BE                     simulate@F3108:
   891                           	opt stack 0
   892  0000BE                     	ds	4
   893  0000C2                     simulate@F3106:
   894                           	opt stack 0
   895  0000C2                     	ds	4
   896  0000C6                     _Latest:
   897                           	opt stack 0
   898  0000C6                     	ds	1
   899                           tblptru	equ	0xFF8
   900                           postinc0	equ	0xFEE
   901                           wreg	equ	0xFE8
   902                           
   903                           	psect	cstackBANK0
   904  000080                     __pcstackBANK0:
   905                           	opt stack 0
   906  000080                     ??_isdigit:
   907  000080                     ??_I2C_Master_Wait:
   908  000080                     ?___wmul:
   909                           	opt stack 0
   910  000080                     ?___lwdiv:
   911                           	opt stack 0
   912  000080                     ?___lldiv:
   913                           	opt stack 0
   914  000080                     lcdNibble@temp:
   915                           	opt stack 0
   916  000080                     ReadEE@address:
   917                           	opt stack 0
   918  000080                     ___wmul@multiplier:
   919                           	opt stack 0
   920  000080                     ___lwdiv@dividend:
   921                           	opt stack 0
   922  000080                     ___lldiv@dividend:
   923                           	opt stack 0
   924                           
   925                           ; 4 bytes @ 0x0
   926  000080                     	ds	1
   927  000081                     lcdNibble@data:
   928                           	opt stack 0
   929  000081                     I2C_Master_Read@a:
   930                           	opt stack 0
   931  000081                     _isdigit$1055:
   932                           	opt stack 0
   933  000081                     I2C_Master_Write@d:
   934                           	opt stack 0
   935                           
   936                           ; 2 bytes @ 0x1
   937  000081                     	ds	1
   938  000082                     lcdInst@data:
   939                           	opt stack 0
   940  000082                     putch@data:
   941                           	opt stack 0
   942  000082                     I2C_Master_Read@temp:
   943                           	opt stack 0
   944  000082                     isdigit@c:
   945                           	opt stack 0
   946  000082                     ___wmul@multiplicand:
   947                           	opt stack 0
   948  000082                     ___lwdiv@divisor:
   949                           	opt stack 0
   950                           
   951                           ; 2 bytes @ 0x2
   952  000082                     	ds	1
   953  000083                     ??_initLCD:
   954  000083                     getTime@time:
   955                           	opt stack 0
   956                           
   957                           ; 2 bytes @ 0x3
   958  000083                     	ds	1
   959  000084                     ___wmul@product:
   960                           	opt stack 0
   961  000084                     ___lwdiv@quotient:
   962                           	opt stack 0
   963  000084                     ___lldiv@divisor:
   964                           	opt stack 0
   965                           
   966                           ; 4 bytes @ 0x4
   967  000084                     	ds	1
   968  000085                     getTime@i:
   969                           	opt stack 0
   970                           
   971                           ; 1 bytes @ 0x5
   972  000085                     	ds	1
   973  000086                     ___lwdiv@counter:
   974                           	opt stack 0
   975                           
   976                           ; 1 bytes @ 0x6
   977  000086                     	ds	1
   978  000087                     ?___lwmod:
   979                           	opt stack 0
   980  000087                     ___lwmod@dividend:
   981                           	opt stack 0
   982                           
   983                           ; 2 bytes @ 0x7
   984  000087                     	ds	1
   985  000088                     ___lldiv@quotient:
   986                           	opt stack 0
   987                           
   988                           ; 4 bytes @ 0x8
   989  000088                     	ds	1
   990  000089                     ___lwmod@divisor:
   991                           	opt stack 0
   992                           
   993                           ; 2 bytes @ 0x9
   994  000089                     	ds	2
   995  00008B                     ___lwmod@counter:
   996                           	opt stack 0
   997                           
   998                           ; 1 bytes @ 0xB
   999  00008B                     	ds	1
  1000  00008C                     ?_printf:
  1001                           	opt stack 0
  1002  00008C                     ___lldiv@counter:
  1003                           	opt stack 0
  1004  00008C                     printf@f:
  1005                           	opt stack 0
  1006                           
  1007                           ; 2 bytes @ 0xC
  1008  00008C                     	ds	1
  1009  00008D                     I2C_Master_Init@c:
  1010                           	opt stack 0
  1011                           
  1012                           ; 4 bytes @ 0xD
  1013  00008D                     	ds	4
  1014  000091                     ??_I2C_Master_Init:
  1015                           
  1016                           ; 1 bytes @ 0x11
  1017  000091                     	ds	3
  1018  000094                     ??_printf:
  1019                           
  1020                           ; 1 bytes @ 0x14
  1021  000094                     	ds	1
  1022  000095                     ??_initialize:
  1023                           
  1024                           ; 1 bytes @ 0x15
  1025  000095                     	ds	3
  1026  000098                     printf@ap:
  1027                           	opt stack 0
  1028                           
  1029                           ; 2 bytes @ 0x18
  1030  000098                     	ds	2
  1031  00009A                     printf@cp:
  1032                           	opt stack 0
  1033                           
  1034                           ; 2 bytes @ 0x1A
  1035  00009A                     	ds	2
  1036  00009C                     printf@idx:
  1037                           	opt stack 0
  1038                           
  1039                           ; 1 bytes @ 0x1C
  1040  00009C                     	ds	1
  1041  00009D                     printf@len:
  1042                           	opt stack 0
  1043                           
  1044                           ; 2 bytes @ 0x1D
  1045  00009D                     	ds	2
  1046  00009F                     printf@prec:
  1047                           	opt stack 0
  1048                           
  1049                           ; 1 bytes @ 0x1F
  1050  00009F                     	ds	1
  1051  0000A0                     printf@val:
  1052                           	opt stack 0
  1053                           
  1054                           ; 2 bytes @ 0x20
  1055  0000A0                     	ds	2
  1056  0000A2                     printf@flag:
  1057                           	opt stack 0
  1058                           
  1059                           ; 1 bytes @ 0x22
  1060  0000A2                     	ds	1
  1061  0000A3                     printf@width:
  1062                           	opt stack 0
  1063                           
  1064                           ; 2 bytes @ 0x23
  1065  0000A3                     	ds	2
  1066  0000A5                     printf@c:
  1067                           	opt stack 0
  1068                           
  1069                           ; 1 bytes @ 0x25
  1070  0000A5                     	ds	1
  1071  0000A6                     ??_showRTC:
  1072                           
  1073                           ; 1 bytes @ 0x26
  1074  0000A6                     	ds	2
  1075  0000A8                     ??_main:
  1076                           
  1077                           ; 1 bytes @ 0x28
  1078  0000A8                     	ds	2
  1079                           tblptru	equ	0xFF8
  1080                           postinc0	equ	0xFEE
  1081                           wreg	equ	0xFE8
  1082                           
  1083                           	psect	cstackCOMRAM
  1084  000001                     __pcstackCOMRAM:
  1085                           	opt stack 0
  1086  000001                     ??i2_I2C_Master_Wait:
  1087  000001                     ??i2_isdigit:
  1088  000001                     ?_captureKeypad:
  1089                           	opt stack 0
  1090  000001                     ?_AD:
  1091                           	opt stack 0
  1092  000001                     ?___awdiv:
  1093                           	opt stack 0
  1094  000001                     ?i2___wmul:
  1095                           	opt stack 0
  1096  000001                     ?i2___lwdiv:
  1097                           	opt stack 0
  1098  000001                     ?___ftpack:
  1099                           	opt stack 0
  1100  000001                     back@runs:
  1101                           	opt stack 0
  1102  000001                     i2lcdNibble@temp:
  1103                           	opt stack 0
  1104  000001                     fluctuate@a:
  1105                           	opt stack 0
  1106  000001                     WriteEE@address:
  1107                           	opt stack 0
  1108  000001                     ___awdiv@dividend:
  1109                           	opt stack 0
  1110  000001                     i2ReadEE@address:
  1111                           	opt stack 0
  1112  000001                     i2___wmul@multiplier:
  1113                           	opt stack 0
  1114  000001                     i2___lwdiv@dividend:
  1115                           	opt stack 0
  1116  000001                     ___ftpack@arg:
  1117                           	opt stack 0
  1118                           
  1119                           ; 3 bytes @ 0x0
  1120  000001                     	ds	1
  1121  000002                     back@result:
  1122                           	opt stack 0
  1123  000002                     i2lcdNibble@data:
  1124                           	opt stack 0
  1125  000002                     i2I2C_Master_Read@a:
  1126                           	opt stack 0
  1127  000002                     i2_isdigit$1055:
  1128                           	opt stack 0
  1129  000002                     i2I2C_Master_Write@d:
  1130                           	opt stack 0
  1131                           
  1132                           ; 2 bytes @ 0x1
  1133  000002                     	ds	1
  1134  000003                     ??_AD:
  1135  000003                     captureKeypad@keypress:
  1136                           	opt stack 0
  1137  000003                     WriteEE@data:
  1138                           	opt stack 0
  1139  000003                     i2lcdInst@data:
  1140                           	opt stack 0
  1141  000003                     i2putch@data:
  1142                           	opt stack 0
  1143  000003                     i2I2C_Master_Read@temp:
  1144                           	opt stack 0
  1145  000003                     i2isdigit@c:
  1146                           	opt stack 0
  1147  000003                     fluctuate@b:
  1148                           	opt stack 0
  1149  000003                     ReadRun@sorted:
  1150                           	opt stack 0
  1151  000003                     ___awdiv@divisor:
  1152                           	opt stack 0
  1153  000003                     i2___wmul@multiplicand:
  1154                           	opt stack 0
  1155  000003                     i2___lwdiv@divisor:
  1156                           	opt stack 0
  1157                           
  1158                           ; 2 bytes @ 0x2
  1159  000003                     	ds	1
  1160  000004                     ___ftpack@exp:
  1161                           	opt stack 0
  1162  000004                     i2getTime@time:
  1163                           	opt stack 0
  1164                           
  1165                           ; 2 bytes @ 0x3
  1166  000004                     	ds	1
  1167  000005                     ??_fluctuate:
  1168  000005                     AD@channel:
  1169                           	opt stack 0
  1170  000005                     ___awdiv@counter:
  1171                           	opt stack 0
  1172  000005                     ___ftpack@sign:
  1173                           	opt stack 0
  1174  000005                     ReadRun@time:
  1175                           	opt stack 0
  1176  000005                     i2___wmul@product:
  1177                           	opt stack 0
  1178  000005                     i2___lwdiv@quotient:
  1179                           	opt stack 0
  1180                           
  1181                           ; 2 bytes @ 0x4
  1182  000005                     	ds	1
  1183  000006                     ??___ftpack:
  1184  000006                     ___awdiv@sign:
  1185                           	opt stack 0
  1186  000006                     i2getTime@i:
  1187                           	opt stack 0
  1188                           
  1189                           ; 1 bytes @ 0x5
  1190  000006                     	ds	1
  1191  000007                     ??_ReadRun:
  1192  000007                     ?_HexDecToDec2:
  1193                           	opt stack 0
  1194  000007                     i2___lwdiv@counter:
  1195                           	opt stack 0
  1196  000007                     HexDecToDec2@hex:
  1197                           	opt stack 0
  1198  000007                     fluctuate@i:
  1199                           	opt stack 0
  1200  000007                     WriteRun@sorted:
  1201                           	opt stack 0
  1202  000007                     ___awdiv@quotient:
  1203                           	opt stack 0
  1204                           
  1205                           ; 2 bytes @ 0x6
  1206  000007                     	ds	1
  1207  000008                     ?i2___lwmod:
  1208                           	opt stack 0
  1209  000008                     i2___lwmod@dividend:
  1210                           	opt stack 0
  1211                           
  1212                           ; 2 bytes @ 0x7
  1213  000008                     	ds	1
  1214  000009                     ??_HexDecToDec2:
  1215  000009                     ?___ftmul:
  1216                           	opt stack 0
  1217  000009                     ?___awtoft:
  1218                           	opt stack 0
  1219  000009                     PWMC@widthus:
  1220                           	opt stack 0
  1221  000009                     WriteRun@time:
  1222                           	opt stack 0
  1223  000009                     ___awtoft@c:
  1224                           	opt stack 0
  1225  000009                     ___ftmul@f1:
  1226                           	opt stack 0
  1227                           
  1228                           ; 3 bytes @ 0x8
  1229  000009                     	ds	1
  1230  00000A                     i2___lwmod@divisor:
  1231                           	opt stack 0
  1232                           
  1233                           ; 2 bytes @ 0x9
  1234  00000A                     	ds	1
  1235  00000B                     ??_WriteRun:
  1236  00000B                     ReadRun@backruns:
  1237                           	opt stack 0
  1238  00000B                     PWMC@cycles:
  1239                           	opt stack 0
  1240                           
  1241                           ; 2 bytes @ 0xA
  1242  00000B                     	ds	1
  1243  00000C                     ___awtoft@sign:
  1244                           	opt stack 0
  1245  00000C                     i2___lwmod@counter:
  1246                           	opt stack 0
  1247  00000C                     HexDecToDec2@tenth:
  1248                           	opt stack 0
  1249  00000C                     ReadRun@add:
  1250                           	opt stack 0
  1251  00000C                     ___ftmul@f2:
  1252                           	opt stack 0
  1253                           
  1254                           ; 3 bytes @ 0xB
  1255  00000C                     	ds	1
  1256  00000D                     ?i2_printf:
  1257                           	opt stack 0
  1258  00000D                     PWMC@port:
  1259                           	opt stack 0
  1260  00000D                     WriteRun@add:
  1261                           	opt stack 0
  1262  00000D                     i2printf@f:
  1263                           	opt stack 0
  1264                           
  1265                           ; 2 bytes @ 0xC
  1266  00000D                     	ds	1
  1267  00000E                     HexDecToDec2@digit:
  1268                           	opt stack 0
  1269                           
  1270                           ; 2 bytes @ 0xD
  1271  00000E                     	ds	1
  1272  00000F                     ??___ftmul:
  1273  00000F                     ??_PWMC:
  1274                           
  1275                           ; 1 bytes @ 0xE
  1276  00000F                     	ds	2
  1277  000011                     _PWMC$1398:
  1278                           	opt stack 0
  1279                           
  1280                           ; 1 bytes @ 0x10
  1281  000011                     	ds	1
  1282  000012                     ___ftmul@exp:
  1283                           	opt stack 0
  1284  000012                     _PWMC$1399:
  1285                           	opt stack 0
  1286                           
  1287                           ; 1 bytes @ 0x11
  1288  000012                     	ds	1
  1289  000013                     _PWMC$1400:
  1290                           	opt stack 0
  1291  000013                     ___ftmul@f3_as_product:
  1292                           	opt stack 0
  1293                           
  1294                           ; 3 bytes @ 0x12
  1295  000013                     	ds	1
  1296  000014                     PWMC@countdown:
  1297                           	opt stack 0
  1298                           
  1299                           ; 2 bytes @ 0x13
  1300  000014                     	ds	2
  1301  000016                     ___ftmul@cntr:
  1302                           	opt stack 0
  1303  000016                     CW90@port:
  1304                           	opt stack 0
  1305  000016                     CCW90@port:
  1306                           	opt stack 0
  1307                           
  1308                           ; 2 bytes @ 0x15
  1309  000016                     	ds	1
  1310  000017                     ??i2_printf:
  1311  000017                     ___ftmul@sign:
  1312                           	opt stack 0
  1313                           
  1314                           ; 1 bytes @ 0x16
  1315  000017                     	ds	1
  1316  000018                     ?___ftdiv:
  1317                           	opt stack 0
  1318  000018                     ___ftdiv@f1:
  1319                           	opt stack 0
  1320                           
  1321                           ; 3 bytes @ 0x17
  1322  000018                     	ds	3
  1323  00001B                     i2printf@ap:
  1324                           	opt stack 0
  1325  00001B                     ___ftdiv@f2:
  1326                           	opt stack 0
  1327                           
  1328                           ; 3 bytes @ 0x1A
  1329  00001B                     	ds	2
  1330  00001D                     i2printf@cp:
  1331                           	opt stack 0
  1332                           
  1333                           ; 2 bytes @ 0x1C
  1334  00001D                     	ds	1
  1335  00001E                     ??___ftdiv:
  1336                           
  1337                           ; 1 bytes @ 0x1D
  1338  00001E                     	ds	1
  1339  00001F                     i2printf@idx:
  1340                           	opt stack 0
  1341                           
  1342                           ; 1 bytes @ 0x1E
  1343  00001F                     	ds	1
  1344  000020                     i2printf@len:
  1345                           	opt stack 0
  1346                           
  1347                           ; 2 bytes @ 0x1F
  1348  000020                     	ds	1
  1349  000021                     ___ftdiv@cntr:
  1350                           	opt stack 0
  1351                           
  1352                           ; 1 bytes @ 0x20
  1353  000021                     	ds	1
  1354  000022                     i2printf@prec:
  1355                           	opt stack 0
  1356  000022                     ___ftdiv@f3:
  1357                           	opt stack 0
  1358                           
  1359                           ; 3 bytes @ 0x21
  1360  000022                     	ds	1
  1361  000023                     i2printf@val:
  1362                           	opt stack 0
  1363                           
  1364                           ; 2 bytes @ 0x22
  1365  000023                     	ds	2
  1366  000025                     ___ftdiv@exp:
  1367                           	opt stack 0
  1368  000025                     i2printf@flag:
  1369                           	opt stack 0
  1370                           
  1371                           ; 1 bytes @ 0x24
  1372  000025                     	ds	1
  1373  000026                     ___ftdiv@sign:
  1374                           	opt stack 0
  1375  000026                     i2printf@width:
  1376                           	opt stack 0
  1377                           
  1378                           ; 2 bytes @ 0x25
  1379  000026                     	ds	1
  1380  000027                     ___ftge@ff1:
  1381                           	opt stack 0
  1382                           
  1383                           ; 3 bytes @ 0x26
  1384  000027                     	ds	1
  1385  000028                     i2printf@c:
  1386                           	opt stack 0
  1387                           
  1388                           ; 1 bytes @ 0x27
  1389  000028                     	ds	1
  1390  000029                     showInfo@time:
  1391                           	opt stack 0
  1392  000029                     _stopMoving$552:
  1393                           	opt stack 0
  1394                           
  1395                           ; 2 bytes @ 0x28
  1396  000029                     	ds	1
  1397  00002A                     ___ftge@ff2:
  1398                           	opt stack 0
  1399                           
  1400                           ; 3 bytes @ 0x29
  1401  00002A                     	ds	1
  1402  00002B                     stopMoving@em:
  1403                           	opt stack 0
  1404  00002B                     showInfo@sorted:
  1405                           	opt stack 0
  1406                           
  1407                           ; 2 bytes @ 0x2A
  1408  00002B                     	ds	2
  1409  00002D                     ??_showInfo:
  1410  00002D                     ??___ftge:
  1411                           
  1412                           ; 1 bytes @ 0x2C
  1413  00002D                     	ds	3
  1414  000030                     ?_checkV:
  1415                           	opt stack 0
  1416  000030                     checkV@channel:
  1417                           	opt stack 0
  1418                           
  1419                           ; 2 bytes @ 0x2F
  1420  000030                     	ds	2
  1421  000032                     showInfo@type:
  1422                           	opt stack 0
  1423  000032                     checkV@max:
  1424                           	opt stack 0
  1425                           
  1426                           ; 3 bytes @ 0x31
  1427  000032                     	ds	2
  1428  000034                     showInfo@stop:
  1429                           	opt stack 0
  1430                           
  1431                           ; 2 bytes @ 0x33
  1432  000034                     	ds	1
  1433  000035                     checkV@voltage2:
  1434                           	opt stack 0
  1435                           
  1436                           ; 2 bytes @ 0x34
  1437  000035                     	ds	1
  1438  000036                     ??_PermLog:
  1439                           
  1440                           ; 1 bytes @ 0x35
  1441  000036                     	ds	1
  1442  000037                     checkV@voltage3:
  1443                           	opt stack 0
  1444                           
  1445                           ; 2 bytes @ 0x36
  1446  000037                     	ds	1
  1447  000038                     PermLog@sorted:
  1448                           	opt stack 0
  1449                           
  1450                           ; 4 bytes @ 0x37
  1451  000038                     	ds	1
  1452  000039                     checkV@voltage:
  1453                           	opt stack 0
  1454                           
  1455                           ; 2 bytes @ 0x38
  1456  000039                     	ds	2
  1457  00003B                     ?_checkAA:
  1458                           	opt stack 0
  1459  00003B                     ?_checkC:
  1460                           	opt stack 0
  1461  00003B                     ?_check9:
  1462                           	opt stack 0
  1463  00003B                     checkAA@sorted:
  1464                           	opt stack 0
  1465  00003B                     checkC@sorted:
  1466                           	opt stack 0
  1467  00003B                     check9@sorted:
  1468                           	opt stack 0
  1469                           
  1470                           ; 2 bytes @ 0x3A
  1471  00003B                     	ds	1
  1472  00003C                     PermLog@backruns:
  1473                           	opt stack 0
  1474                           
  1475                           ; 1 bytes @ 0x3B
  1476  00003C                     	ds	1
  1477  00003D                     ??_simulate:
  1478  00003D                     PermLog@time:
  1479                           	opt stack 0
  1480                           
  1481                           ; 2 bytes @ 0x3C
  1482  00003D                     	ds	2
  1483  00003F                     simulate@stop:
  1484                           	opt stack 0
  1485                           
  1486                           ; 2 bytes @ 0x3E
  1487  00003F                     	ds	2
  1488  000041                     _simulate$1504:
  1489                           	opt stack 0
  1490                           
  1491                           ; 2 bytes @ 0x40
  1492  000041                     	ds	2
  1493  000043                     simulate@portCW:
  1494                           	opt stack 0
  1495                           
  1496                           ; 6 bytes @ 0x42
  1497  000043                     	ds	6
  1498  000049                     simulate@portCCW:
  1499                           	opt stack 0
  1500                           
  1501                           ; 6 bytes @ 0x48
  1502  000049                     	ds	6
  1503  00004F                     simulate@AA:
  1504                           	opt stack 0
  1505                           
  1506                           ; 2 bytes @ 0x4E
  1507  00004F                     	ds	2
  1508  000051                     simulate@C:
  1509                           	opt stack 0
  1510                           
  1511                           ; 2 bytes @ 0x50
  1512  000051                     	ds	2
  1513  000053                     simulate@V9:
  1514                           	opt stack 0
  1515                           
  1516                           ; 2 bytes @ 0x52
  1517  000053                     	ds	2
  1518  000055                     simulate@now:
  1519                           	opt stack 0
  1520                           
  1521                           ; 4 bytes @ 0x54
  1522  000055                     	ds	4
  1523  000059                     simulate@start:
  1524                           	opt stack 0
  1525                           
  1526                           ; 4 bytes @ 0x58
  1527  000059                     	ds	4
  1528  00005D                     simulate@sorted:
  1529                           	opt stack 0
  1530                           
  1531                           ; 4 bytes @ 0x5C
  1532  00005D                     	ds	4
  1533  000061                     simulate@period:
  1534                           	opt stack 0
  1535                           
  1536                           ; 2 bytes @ 0x60
  1537  000061                     	ds	2
  1538  000063                     ??_intrpt:
  1539                           
  1540                           ; 1 bytes @ 0x62
  1541  000063                     	ds	16
  1542  000073                     intrpt@keypress:
  1543                           	opt stack 0
  1544                           
  1545                           ; 1 bytes @ 0x72
  1546  000073                     	ds	1
  1547                           tblptru	equ	0xFF8
  1548                           postinc0	equ	0xFEE
  1549                           wreg	equ	0xFE8
  1550                           
  1551 ;;
  1552 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1553 ;;
  1554 ;; *************** function _main *****************
  1555 ;; Defined at:
  1556 ;;		line 210 in file "main.c"
  1557 ;; Parameters:    Size  Location     Type
  1558 ;;		None
  1559 ;; Auto vars:     Size  Location     Type
  1560 ;;		None
  1561 ;; Return value:  Size  Location     Type
  1562 ;;                  2  154[None  ] int 
  1563 ;; Registers used:
  1564 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1565 ;; Tracked objects:
  1566 ;;		On entry : 0/0
  1567 ;;		On exit  : 0/0
  1568 ;;		Unchanged: 0/0
  1569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1572 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1573 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1574 ;;Total ram usage:        2 bytes
  1575 ;; Hardware stack levels required when called:   10
  1576 ;; This function calls:
  1577 ;;		_initialize
  1578 ;;		_line0
  1579 ;;		_printf
  1580 ;;		_showRTC
  1581 ;; This function is called by:
  1582 ;;		Startup code after reset
  1583 ;; This function uses a non-reentrant model
  1584 ;;
  1585                           
  1586                           	psect	text0
  1587  001DA4                     __ptext0:
  1588                           	opt stack 0
  1589  001DA4                     _main:
  1590                           	opt stack 21
  1591                           
  1592                           ;main.c: 211: initialize();
  1593                           
  1594                           ; BSR set to: 0
  1595                           ;incstack = 0
  1596  001DA4  ECCE  F00C         	call	_initialize	;wreg free
  1597                           
  1598                           ;main.c: 213: line0();
  1599  001DA8  ECEE  F010         	call	_line0	;wreg free
  1600                           
  1601                           ;main.c: 214: printf("Welcome!          ");
  1602  001DAC  0E59               	movlw	low STR_21
  1603  001DAE  0100               	movlb	0	; () banked
  1604  001DB0  6F8C               	movwf	printf@f& (0+255),b
  1605  001DB2  0EFF               	movlw	high STR_21
  1606  001DB4  0100               	movlb	0	; () banked
  1607  001DB6  6F8D               	movwf	(printf@f+1)& (0+255),b
  1608  001DB8  EC09  F000         	call	_printf	;wreg free
  1609                           
  1610                           ;main.c: 216: _delay((unsigned long)((500)*(8000000/4000.0)));
  1611  001DBC  0E06               	movlw	6
  1612  001DBE  0100               	movlb	0	; () banked
  1613  001DC0  6FA9               	movwf	(??_main+1)& (0+255),b
  1614  001DC2  0E13               	movlw	19
  1615  001DC4  0100               	movlb	0	; () banked
  1616  001DC6  6FA8               	movwf	??_main& (0+255),b
  1617  001DC8  0EAD               	movlw	173
  1618  001DCA                     u3057:
  1619  001DCA  2EE8               	decfsz	wreg,f,c
  1620  001DCC  D7FE               	bra	u3057
  1621  001DCE  2FA8               	decfsz	??_main& (0+255),f,b
  1622  001DD0  D7FC               	bra	u3057
  1623  001DD2  2FA9               	decfsz	(??_main+1)& (0+255),f,b
  1624  001DD4  D7FA               	bra	u3057
  1625  001DD6  D000               	nop2	
  1626                           
  1627                           ;main.c: 218: INT1IE = 1;
  1628  001DD8  86F0               	bsf	intcon3,3,c	;volatile
  1629                           
  1630                           ;main.c: 219: INT1IF = 0;
  1631  001DDA  90F0               	bcf	intcon3,0,c	;volatile
  1632                           
  1633                           ;main.c: 220: INT2IE = 0;
  1634  001DDC  98F0               	bcf	intcon3,4,c	;volatile
  1635                           
  1636                           ;main.c: 221: (INTCONbits.GIE = 1);
  1637  001DDE  8EF2               	bsf	intcon,7,c	;volatile
  1638                           
  1639                           ;main.c: 222: mode = 0;
  1640  001DE0  0E00               	movlw	0
  1641  001DE2  6E75               	movwf	_mode+1,c
  1642  001DE4  0E00               	movlw	0
  1643  001DE6  6E74               	movwf	_mode,c
  1644  001DE8                     l4266:
  1645  001DE8  EC4A  F00C         	call	_showRTC	;wreg free
  1646  001DEC  D7FD               	goto	l4266
  1647  001DEE  00FF               	reset		;# 
  1648  001DF0                     __end_of_main:
  1649                           	opt stack 0
  1650                           tblptru	equ	0xFF8
  1651                           intcon	equ	0xFF2
  1652                           intcon3	equ	0xFF0
  1653                           postinc0	equ	0xFEE
  1654                           wreg	equ	0xFE8
  1655                           
  1656 ;; *************** function _showRTC *****************
  1657 ;; Defined at:
  1658 ;;		line 150 in file "main.c"
  1659 ;; Parameters:    Size  Location     Type
  1660 ;;		None
  1661 ;; Auto vars:     Size  Location     Type
  1662 ;;		None
  1663 ;; Return value:  Size  Location     Type
  1664 ;;                  1    wreg      void 
  1665 ;; Registers used:
  1666 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1667 ;; Tracked objects:
  1668 ;;		On entry : 0/0
  1669 ;;		On exit  : 0/0
  1670 ;;		Unchanged: 0/0
  1671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1674 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1675 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1676 ;;Total ram usage:        2 bytes
  1677 ;; Hardware stack levels used:    1
  1678 ;; Hardware stack levels required when called:    9
  1679 ;; This function calls:
  1680 ;;		_getTime
  1681 ;;		_line0
  1682 ;;		_line1
  1683 ;;		_printf
  1684 ;; This function is called by:
  1685 ;;		_main
  1686 ;; This function uses a non-reentrant model
  1687 ;;
  1688                           
  1689                           	psect	text1
  1690  001894                     __ptext1:
  1691                           	opt stack 0
  1692  001894                     _showRTC:
  1693                           	opt stack 21
  1694                           
  1695                           ;main.c: 151: getTime(time);
  1696                           
  1697                           ;incstack = 0
  1698  001894  0E76               	movlw	low _time
  1699  001896  0100               	movlb	0	; () banked
  1700  001898  6F83               	movwf	getTime@time& (0+255),b
  1701  00189A  0E00               	movlw	high _time
  1702  00189C  0100               	movlb	0	; () banked
  1703  00189E  6F84               	movwf	(getTime@time+1)& (0+255),b
  1704  0018A0  EC05  F00C         	call	_getTime	;wreg free
  1705                           
  1706                           ;main.c: 152: line0();
  1707  0018A4  ECEE  F010         	call	_line0	;wreg free
  1708                           
  1709                           ;main.c: 153: printf("    %02x/%02x/%02x      ", time[6], time[5], time[4]);
  1710  0018A8  0E1B               	movlw	low STR_19
  1711  0018AA  0100               	movlb	0	; () banked
  1712  0018AC  6F8C               	movwf	printf@f& (0+255),b
  1713  0018AE  0EFE               	movlw	high STR_19
  1714  0018B0  0100               	movlb	0	; () banked
  1715  0018B2  6F8D               	movwf	(printf@f+1)& (0+255),b
  1716  0018B4  C07C  F08E         	movff	_time+6,?_printf+2
  1717  0018B8  0100               	movlb	0	; () banked
  1718  0018BA  6B8F               	clrf	(?_printf+3)& (0+255),b
  1719  0018BC  C07B  F090         	movff	_time+5,?_printf+4
  1720  0018C0  0100               	movlb	0	; () banked
  1721  0018C2  6B91               	clrf	(?_printf+5)& (0+255),b
  1722  0018C4  C07A  F092         	movff	_time+4,?_printf+6
  1723  0018C8  0100               	movlb	0	; () banked
  1724  0018CA  6B93               	clrf	(?_printf+7)& (0+255),b
  1725  0018CC  EC09  F000         	call	_printf	;wreg free
  1726                           
  1727                           ;main.c: 154: line1();
  1728  0018D0  ECEA  F010         	call	_line1	;wreg free
  1729                           
  1730                           ;main.c: 155: printf("    %02x:%02x:%02x      ", time[2], time[1], time[0]);
  1731  0018D4  0E34               	movlw	low STR_20
  1732  0018D6  0100               	movlb	0	; () banked
  1733  0018D8  6F8C               	movwf	printf@f& (0+255),b
  1734  0018DA  0EFE               	movlw	high STR_20
  1735  0018DC  0100               	movlb	0	; () banked
  1736  0018DE  6F8D               	movwf	(printf@f+1)& (0+255),b
  1737  0018E0  C078  F08E         	movff	_time+2,?_printf+2
  1738  0018E4  0100               	movlb	0	; () banked
  1739  0018E6  6B8F               	clrf	(?_printf+3)& (0+255),b
  1740  0018E8  C077  F090         	movff	_time+1,?_printf+4
  1741  0018EC  0100               	movlb	0	; () banked
  1742  0018EE  6B91               	clrf	(?_printf+5)& (0+255),b
  1743  0018F0  C076  F092         	movff	_time,?_printf+6
  1744  0018F4  0100               	movlb	0	; () banked
  1745  0018F6  6B93               	clrf	(?_printf+7)& (0+255),b
  1746  0018F8  EC09  F000         	call	_printf	;wreg free
  1747                           
  1748                           ;main.c: 156: _delay((unsigned long)((200)*(8000000/4000.0)));
  1749  0018FC  0E03               	movlw	3
  1750  0018FE  0100               	movlb	0	; () banked
  1751  001900  6FA7               	movwf	(??_showRTC+1)& (0+255),b
  1752  001902  0E08               	movlw	8
  1753  001904  0100               	movlb	0	; () banked
  1754  001906  6FA6               	movwf	??_showRTC& (0+255),b
  1755  001908  0E77               	movlw	119
  1756  00190A                     u3067:
  1757  00190A  2EE8               	decfsz	wreg,f,c
  1758  00190C  D7FE               	bra	u3067
  1759  00190E  2FA6               	decfsz	??_showRTC& (0+255),f,b
  1760  001910  D7FC               	bra	u3067
  1761  001912  2FA7               	decfsz	(??_showRTC+1)& (0+255),f,b
  1762  001914  D7FA               	bra	u3067
  1763  001916  0012               	return		;funcret
  1764  001918                     __end_of_showRTC:
  1765                           	opt stack 0
  1766                           tblptru	equ	0xFF8
  1767                           intcon	equ	0xFF2
  1768                           intcon3	equ	0xFF0
  1769                           postinc0	equ	0xFEE
  1770                           wreg	equ	0xFE8
  1771                           
  1772 ;; *************** function _printf *****************
  1773 ;; Defined at:
  1774 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  1775 ;; Parameters:    Size  Location     Type
  1776 ;;  f               2   12[BANK0 ] PTR const unsigned char 
  1777 ;;		 -> STR_51(17), STR_50(17), STR_49(4), STR_48(4), 
  1778 ;;		 -> STR_47(4), STR_46(4), STR_45(4), STR_44(4), 
  1779 ;;		 -> STR_43(4), STR_42(3), STR_41(4), STR_40(4), 
  1780 ;;		 -> STR_39(4), STR_38(4), STR_37(18), STR_36(20), 
  1781 ;;		 -> STR_35(16), STR_34(21), STR_33(16), STR_32(21), 
  1782 ;;		 -> STR_31(16), STR_30(20), STR_29(16), STR_28(21), 
  1783 ;;		 -> STR_27(23), STR_26(24), STR_25(21), STR_24(24), 
  1784 ;;		 -> STR_23(24), STR_22(25), STR_21(19), STR_20(25), 
  1785 ;;		 -> STR_19(25), STR_18(27), STR_17(19), STR_16(25), 
  1786 ;;		 -> STR_15(3), STR_14(3), STR_13(3), STR_12(5), 
  1787 ;;		 -> STR_11(3), STR_10(3), STR_9(3), STR_8(4), 
  1788 ;;		 -> STR_7(3), STR_6(3), STR_5(3), STR_4(4), 
  1789 ;;		 -> STR_3(5), STR_2(24), STR_1(9), 
  1790 ;; Auto vars:     Size  Location     Type
  1791 ;;  idx             1   28[BANK0 ] unsigned char 
  1792 ;;  tmpval          4    0        struct .
  1793 ;;  width           2   35[BANK0 ] int 
  1794 ;;  val             2   32[BANK0 ] unsigned int 
  1795 ;;  len             2   29[BANK0 ] unsigned int 
  1796 ;;  cp              2   26[BANK0 ] PTR const unsigned char 
  1797 ;;		 -> printf@c(1), 
  1798 ;;  ap              2   24[BANK0 ] PTR void [1]
  1799 ;;		 -> ?i2_printf(2), ?_printf(2), 
  1800 ;;  c               1   37[BANK0 ] char 
  1801 ;;  flag            1   34[BANK0 ] unsigned char 
  1802 ;;  prec            1   31[BANK0 ] char 
  1803 ;; Return value:  Size  Location     Type
  1804 ;;                  2   12[BANK0 ] int 
  1805 ;; Registers used:
  1806 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1807 ;; Tracked objects:
  1808 ;;		On entry : 0/0
  1809 ;;		On exit  : 0/0
  1810 ;;		Unchanged: 0/0
  1811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1812 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1813 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1814 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1815 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1816 ;;Total ram usage:       26 bytes
  1817 ;; Hardware stack levels used:    1
  1818 ;; Hardware stack levels required when called:    8
  1819 ;; This function calls:
  1820 ;;		___lwdiv
  1821 ;;		___lwmod
  1822 ;;		___wmul
  1823 ;;		_isdigit
  1824 ;;		_putch
  1825 ;; This function is called by:
  1826 ;;		_showRTC
  1827 ;;		_main
  1828 ;;		_mainloop
  1829 ;; This function uses a non-reentrant model
  1830 ;;
  1831                           
  1832                           	psect	text2
  1833  000012                     __ptext2:
  1834                           	opt stack 0
  1835  000012                     _printf:
  1836                           	opt stack 21
  1837                           
  1838                           ;doprnt.c: 466: va_list ap;
  1839                           ;doprnt.c: 499: signed char c;
  1840                           ;doprnt.c: 501: int width;
  1841                           ;doprnt.c: 506: signed char prec;
  1842                           ;doprnt.c: 508: unsigned char flag;
  1843                           ;doprnt.c: 523: union {
  1844                           ;doprnt.c: 524: unsigned long vd;
  1845                           ;doprnt.c: 525: double integ;
  1846                           ;doprnt.c: 526: } tmpval;
  1847                           ;doprnt.c: 528: unsigned int val;
  1848                           ;doprnt.c: 529: unsigned len;
  1849                           ;doprnt.c: 530: const char * cp;
  1850                           ;doprnt.c: 533: *ap = __va_start();
  1851                           
  1852                           ;incstack = 0
  1853  000012  0E8E               	movlw	low (?_printf+2)
  1854  000014  0100               	movlb	0	; () banked
  1855  000016  6F98               	movwf	printf@ap& (0+255),b
  1856  000018  0E00               	movlw	high (?_printf+2)
  1857  00001A  0100               	movlb	0	; () banked
  1858  00001C  6F99               	movwf	(printf@ap+1)& (0+255),b
  1859                           
  1860                           ;doprnt.c: 536: while(c = *f++) {
  1861  00001E  D1CE               	goto	l3722
  1862  000020                     l3600:
  1863                           
  1864                           ; BSR set to: 0
  1865                           ;doprnt.c: 538: if(c != '%')
  1866  000020  0E25               	movlw	37
  1867  000022  0100               	movlb	0	; () banked
  1868  000024  19A5               	xorwf	printf@c& (0+255),w,b
  1869  000026  B4D8               	btfsc	status,2,c
  1870  000028  D005               	goto	l3604
  1871                           
  1872                           ; BSR set to: 0
  1873                           ;doprnt.c: 540: {
  1874                           ;doprnt.c: 541: (putch(c) );
  1875  00002A  0100               	movlb	0	; () banked
  1876  00002C  51A5               	movf	printf@c& (0+255),w,b
  1877  00002E  ECC4  F010         	call	_putch
  1878                           
  1879                           ;doprnt.c: 542: continue;
  1880  000032  D1C4               	goto	l3722
  1881  000034                     l3604:
  1882                           
  1883                           ;doprnt.c: 543: }
  1884                           ;doprnt.c: 546: width = 0;
  1885  000034  0E00               	movlw	0
  1886  000036  0100               	movlb	0	; () banked
  1887  000038  6FA4               	movwf	(printf@width+1)& (0+255),b
  1888  00003A  0E00               	movlw	0
  1889  00003C  6FA3               	movwf	printf@width& (0+255),b
  1890                           
  1891                           ;doprnt.c: 548: flag = 0;
  1892  00003E  0E00               	movlw	0
  1893  000040  0100               	movlb	0	; () banked
  1894  000042  6FA2               	movwf	printf@flag& (0+255),b
  1895                           
  1896                           ; BSR set to: 0
  1897                           ;doprnt.c: 551: switch(*f) {
  1898                           
  1899                           ;doprnt.c: 550: for(;;) {
  1900  000044  D005               	goto	l3610
  1901  000046                     l3606:
  1902                           
  1903                           ;doprnt.c: 580: flag |= 0x04;
  1904  000046  0100               	movlb	0	; () banked
  1905  000048  85A2               	bsf	printf@flag& (0+255),2,b
  1906                           
  1907                           ;doprnt.c: 581: f++;
  1908  00004A  0100               	movlb	0	; () banked
  1909  00004C  4B8C               	infsnz	printf@f& (0+255),f,b
  1910  00004E  2B8D               	incf	(printf@f+1)& (0+255),f,b
  1911  000050                     l3610:
  1912  000050  C08C  FFF6         	movff	printf@f,tblptrl
  1913  000054  C08D  FFF7         	movff	printf@f+1,tblptrh
  1914  000058                     	if	0	;tblptru may be non-zero
  1915  000058                     	endif
  1916  000058                     	if	0	;tblptru may be non-zero
  1917  000058                     	endif
  1918  000058  0008               	tblrd		*
  1919  00005A  50F5               	movf	tablat,w,c
  1920                           
  1921                           ; Switch size 1, requested type "space"
  1922                           ; Number of cases is 1, Range of values is 48 to 48
  1923                           ; switch strategies available:
  1924                           ; Name         Instructions Cycles
  1925                           ; simple_byte            4     3 (average)
  1926                           ;	Chosen strategy is simple_byte
  1927  00005C  0A30               	xorlw	48	; case 48
  1928  00005E  B4D8               	btfsc	status,2,c
  1929  000060  D7F2               	goto	l3606
  1930                           
  1931                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1932                           
  1933                           ;doprnt.c: 586: }
  1934                           
  1935                           ;doprnt.c: 585: break;
  1936  000062  C08C  FFF6         	movff	printf@f,tblptrl
  1937  000066  C08D  FFF7         	movff	printf@f+1,tblptrh
  1938  00006A                     	if	0	;tblptru may be non-zero
  1939  00006A                     	endif
  1940  00006A                     	if	0	;tblptru may be non-zero
  1941  00006A                     	endif
  1942  00006A  0008               	tblrd		*
  1943  00006C  50F5               	movf	tablat,w,c
  1944  00006E  ECC9  F00F         	call	_isdigit
  1945  000072  A0D8               	btfss	status,0,c
  1946  000074  D092               	goto	l3650
  1947                           
  1948                           ;doprnt.c: 598: width = 0;
  1949  000076  0E00               	movlw	0
  1950  000078  0100               	movlb	0	; () banked
  1951  00007A  6FA4               	movwf	(printf@width+1)& (0+255),b
  1952  00007C  0E00               	movlw	0
  1953  00007E  6FA3               	movwf	printf@width& (0+255),b
  1954  000080                     l3616:
  1955                           
  1956                           ;doprnt.c: 600: width *= 10;
  1957  000080  C0A3  F080         	movff	printf@width,___wmul@multiplier
  1958  000084  C0A4  F081         	movff	printf@width+1,___wmul@multiplier+1
  1959  000088  0E00               	movlw	0
  1960  00008A  0100               	movlb	0	; () banked
  1961  00008C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  1962  00008E  0E0A               	movlw	10
  1963  000090  6F82               	movwf	___wmul@multiplicand& (0+255),b
  1964  000092  EC7C  F00F         	call	___wmul	;wreg free
  1965  000096  C080  F0A3         	movff	?___wmul,printf@width
  1966  00009A  C081  F0A4         	movff	?___wmul+1,printf@width+1
  1967                           
  1968                           ;doprnt.c: 601: width += *f++ - '0';
  1969  00009E  0ED0               	movlw	208
  1970  0000A0  0100               	movlb	0	; () banked
  1971  0000A2  6F94               	movwf	??_printf& (0+255),b
  1972  0000A4  0EFF               	movlw	255
  1973  0000A6  0100               	movlb	0	; () banked
  1974  0000A8  6F95               	movwf	(??_printf+1)& (0+255),b
  1975  0000AA  C08C  FFF6         	movff	printf@f,tblptrl
  1976  0000AE  C08D  FFF7         	movff	printf@f+1,tblptrh
  1977  0000B2                     	if	0	;tblptru may be non-zero
  1978  0000B2                     	endif
  1979  0000B2                     	if	0	;tblptru may be non-zero
  1980  0000B2                     	endif
  1981  0000B2  0008               	tblrd		*
  1982  0000B4  50F5               	movf	tablat,w,c
  1983  0000B6  0100               	movlb	0	; () banked
  1984  0000B8  6F96               	movwf	(??_printf+2)& (0+255),b
  1985  0000BA  6B97               	clrf	(??_printf+3)& (0+255),b
  1986  0000BC  0100               	movlb	0	; () banked
  1987  0000BE  5194               	movf	??_printf& (0+255),w,b
  1988  0000C0  0100               	movlb	0	; () banked
  1989  0000C2  2796               	addwf	(??_printf+2)& (0+255),f,b
  1990  0000C4  0100               	movlb	0	; () banked
  1991  0000C6  5195               	movf	(??_printf+1)& (0+255),w,b
  1992  0000C8  0100               	movlb	0	; () banked
  1993  0000CA  2397               	addwfc	(??_printf+3)& (0+255),f,b
  1994  0000CC  0100               	movlb	0	; () banked
  1995  0000CE  5196               	movf	(??_printf+2)& (0+255),w,b
  1996  0000D0  0100               	movlb	0	; () banked
  1997  0000D2  27A3               	addwf	printf@width& (0+255),f,b
  1998  0000D4  0100               	movlb	0	; () banked
  1999  0000D6  5197               	movf	(??_printf+3)& (0+255),w,b
  2000  0000D8  0100               	movlb	0	; () banked
  2001  0000DA  23A4               	addwfc	(printf@width+1)& (0+255),f,b
  2002                           
  2003                           ; BSR set to: 0
  2004  0000DC  0100               	movlb	0	; () banked
  2005  0000DE  4B8C               	infsnz	printf@f& (0+255),f,b
  2006  0000E0  2B8D               	incf	(printf@f+1)& (0+255),f,b
  2007                           
  2008                           ; BSR set to: 0
  2009                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2010  0000E2  C08C  FFF6         	movff	printf@f,tblptrl
  2011  0000E6  C08D  FFF7         	movff	printf@f+1,tblptrh
  2012  0000EA                     	if	0	;tblptru may be non-zero
  2013  0000EA                     	endif
  2014  0000EA                     	if	0	;tblptru may be non-zero
  2015  0000EA                     	endif
  2016  0000EA  0008               	tblrd		*
  2017  0000EC  50F5               	movf	tablat,w,c
  2018  0000EE  ECC9  F00F         	call	_isdigit
  2019  0000F2  A0D8               	btfss	status,0,c
  2020  0000F4  D052               	goto	l3650
  2021  0000F6  D7C4               	goto	l3616
  2022  0000F8                     l3624:
  2023                           
  2024                           ;doprnt.c: 721: flag |= 0x80;
  2025  0000F8  0100               	movlb	0	; () banked
  2026  0000FA  8FA2               	bsf	printf@flag& (0+255),7,b
  2027                           
  2028                           ;doprnt.c: 723: break;
  2029  0000FC  D064               	goto	l3652
  2030  0000FE                     l3626:
  2031                           
  2032                           ; BSR set to: 0
  2033                           ;doprnt.c: 757: if(width > len)
  2034  0000FE  0100               	movlb	0	; () banked
  2035  000100  51A3               	movf	printf@width& (0+255),w,b
  2036  000102  0100               	movlb	0	; () banked
  2037  000104  5D9D               	subwf	printf@len& (0+255),w,b
  2038  000106  0100               	movlb	0	; () banked
  2039  000108  51A4               	movf	(printf@width+1)& (0+255),w,b
  2040  00010A  0100               	movlb	0	; () banked
  2041  00010C  599E               	subwfb	(printf@len+1)& (0+255),w,b
  2042  00010E  B0D8               	btfsc	status,0,c
  2043  000110  D009               	goto	l3630
  2044                           
  2045                           ; BSR set to: 0
  2046                           ;doprnt.c: 758: width -= len;
  2047  000112  0100               	movlb	0	; () banked
  2048  000114  519D               	movf	printf@len& (0+255),w,b
  2049  000116  0100               	movlb	0	; () banked
  2050  000118  5FA3               	subwf	printf@width& (0+255),f,b
  2051  00011A  0100               	movlb	0	; () banked
  2052  00011C  519E               	movf	(printf@len+1)& (0+255),w,b
  2053  00011E  0100               	movlb	0	; () banked
  2054  000120  5BA4               	subwfb	(printf@width+1)& (0+255),f,b
  2055  000122  D009               	goto	l3634
  2056  000124                     l3630:
  2057                           
  2058                           ; BSR set to: 0
  2059                           ;doprnt.c: 759: else
  2060                           ;doprnt.c: 760: width = 0;
  2061  000124  0E00               	movlw	0
  2062  000126  0100               	movlb	0	; () banked
  2063  000128  6FA4               	movwf	(printf@width+1)& (0+255),b
  2064  00012A  0E00               	movlw	0
  2065  00012C  6FA3               	movwf	printf@width& (0+255),b
  2066                           
  2067                           ; BSR set to: 0
  2068                           ;doprnt.c: 764: while(width--)
  2069  00012E  D003               	goto	l3634
  2070  000130                     l3632:
  2071                           
  2072                           ; BSR set to: 0
  2073                           ;doprnt.c: 765: (putch(' ') );
  2074  000130  0E20               	movlw	32
  2075  000132  ECC4  F010         	call	_putch
  2076  000136                     l3634:
  2077  000136  0100               	movlb	0	; () banked
  2078  000138  07A3               	decf	printf@width& (0+255),f,b
  2079  00013A  A0D8               	btfss	status,0,c
  2080  00013C  07A4               	decf	(printf@width+1)& (0+255),f,b
  2081  00013E  0100               	movlb	0	; () banked
  2082  000140  29A3               	incf	printf@width& (0+255),w,b
  2083  000142  E1F6               	bnz	l3632
  2084  000144  0100               	movlb	0	; () banked
  2085  000146  29A4               	incf	(printf@width+1)& (0+255),w,b
  2086  000148  B4D8               	btfsc	status,2,c
  2087  00014A  D00B               	goto	l3640
  2088  00014C  D7F1               	goto	l3632
  2089  00014E                     l3636:
  2090                           
  2091                           ; BSR set to: 0
  2092                           ;doprnt.c: 768: (putch(*cp++) );
  2093  00014E  C09A  FFD9         	movff	printf@cp,fsr2l
  2094  000152  C09B  FFDA         	movff	printf@cp+1,fsr2h
  2095  000156  50DF               	movf	indf2,w,c
  2096  000158  ECC4  F010         	call	_putch
  2097  00015C  0100               	movlb	0	; () banked
  2098  00015E  4B9A               	infsnz	printf@cp& (0+255),f,b
  2099  000160  2B9B               	incf	(printf@cp+1)& (0+255),f,b
  2100  000162                     l3640:
  2101                           
  2102                           ; BSR set to: 0
  2103  000162  0100               	movlb	0	; () banked
  2104  000164  079D               	decf	printf@len& (0+255),f,b
  2105  000166  A0D8               	btfss	status,0,c
  2106  000168  079E               	decf	(printf@len+1)& (0+255),f,b
  2107  00016A  0100               	movlb	0	; () banked
  2108  00016C  299D               	incf	printf@len& (0+255),w,b
  2109  00016E  E1EF               	bnz	l3636
  2110  000170  0100               	movlb	0	; () banked
  2111  000172  299E               	incf	(printf@len+1)& (0+255),w,b
  2112  000174  B4D8               	btfsc	status,2,c
  2113  000176  D122               	goto	l3722
  2114  000178  D7EA               	goto	l3636
  2115  00017A                     l3642:
  2116                           
  2117                           ; BSR set to: 0
  2118                           ;doprnt.c: 805: cp = (char *)&c;
  2119  00017A  0EA5               	movlw	low printf@c
  2120  00017C  0100               	movlb	0	; () banked
  2121  00017E  6F9A               	movwf	printf@cp& (0+255),b
  2122  000180  0E00               	movlw	high printf@c
  2123  000182  0100               	movlb	0	; () banked
  2124  000184  6F9B               	movwf	(printf@cp+1)& (0+255),b
  2125                           
  2126                           ; BSR set to: 0
  2127                           ;doprnt.c: 806: len = 1;
  2128  000186  0E00               	movlw	0
  2129  000188  0100               	movlb	0	; () banked
  2130  00018A  6F9E               	movwf	(printf@len+1)& (0+255),b
  2131  00018C  0E01               	movlw	1
  2132  00018E  6F9D               	movwf	printf@len& (0+255),b
  2133                           
  2134                           ;doprnt.c: 807: goto dostring;
  2135  000190  D7B6               	goto	l3626
  2136  000192                     l3646:
  2137                           
  2138                           ; BSR set to: 0
  2139                           ;doprnt.c: 818: flag |= 0xC0;
  2140  000192  0EC0               	movlw	192
  2141  000194  0100               	movlb	0	; () banked
  2142  000196  13A2               	iorwf	printf@flag& (0+255),f,b
  2143                           
  2144                           ; BSR set to: 0
  2145                           ;doprnt.c: 822: }
  2146                           
  2147                           ;doprnt.c: 819: break;
  2148  000198  D016               	goto	l3652
  2149  00019A                     l3650:
  2150  00019A  C08C  FFF6         	movff	printf@f,tblptrl
  2151  00019E  C08D  FFF7         	movff	printf@f+1,tblptrh
  2152  0001A2  0100               	movlb	0	; () banked
  2153  0001A4  4B8C               	infsnz	printf@f& (0+255),f,b
  2154  0001A6  2B8D               	incf	(printf@f+1)& (0+255),f,b
  2155  0001A8                     	if	0	;tblptru may be non-zero
  2156  0001A8                     	endif
  2157  0001A8                     	if	0	;tblptru may be non-zero
  2158  0001A8                     	endif
  2159  0001A8  0008               	tblrd		*
  2160  0001AA  CFF5 F0A5          	movff	tablat,printf@c
  2161  0001AE  0100               	movlb	0	; () banked
  2162  0001B0  51A5               	movf	printf@c& (0+255),w,b
  2163                           
  2164                           ; Switch size 1, requested type "space"
  2165                           ; Number of cases is 3, Range of values is 0 to 120
  2166                           ; switch strategies available:
  2167                           ; Name         Instructions Cycles
  2168                           ; simple_byte           10     6 (average)
  2169                           ;	Chosen strategy is simple_byte
  2170  0001B2  0A00               	xorlw	0	; case 0
  2171  0001B4  B4D8               	btfsc	status,2,c
  2172  0001B6  0012               	return	
  2173  0001B8  0A75               	xorlw	117	; case 117
  2174  0001BA  B4D8               	btfsc	status,2,c
  2175  0001BC  D7EA               	goto	l3646
  2176  0001BE  0A0D               	xorlw	13	; case 120
  2177  0001C0  B4D8               	btfsc	status,2,c
  2178  0001C2  D79A               	goto	l3624
  2179  0001C4  D7DA               	goto	l3642
  2180  0001C6                     l3652:
  2181                           
  2182                           ; BSR set to: 0
  2183                           ;doprnt.c: 1273: {
  2184                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2185  0001C6  C098  FFD9         	movff	printf@ap,fsr2l
  2186  0001CA  C099  FFDA         	movff	printf@ap+1,fsr2h
  2187  0001CE  CFDE F0A0          	movff	postinc2,printf@val
  2188  0001D2  CFDD F0A1          	movff	postdec2,printf@val+1
  2189                           
  2190                           ; BSR set to: 0
  2191  0001D6  0E02               	movlw	2
  2192  0001D8  0100               	movlb	0	; () banked
  2193  0001DA  2798               	addwf	printf@ap& (0+255),f,b
  2194  0001DC  0E00               	movlw	0
  2195  0001DE  2399               	addwfc	(printf@ap+1)& (0+255),f,b
  2196                           
  2197                           ;doprnt.c: 1287: }
  2198                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  2199  0001E0  D03C               	goto	l3686
  2200  0001E2                     l3656:
  2201                           
  2202                           ; BSR set to: 0
  2203                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2204  0001E2  0E01               	movlw	1
  2205  0001E4  0100               	movlb	0	; () banked
  2206  0001E6  6FA5               	movwf	printf@c& (0+255),b
  2207  0001E8                     l3658:
  2208                           
  2209                           ; BSR set to: 0
  2210  0001E8  0E05               	movlw	5
  2211  0001EA  0100               	movlb	0	; () banked
  2212  0001EC  19A5               	xorwf	printf@c& (0+255),w,b
  2213  0001EE  B4D8               	btfsc	status,2,c
  2214  0001F0  D03D               	goto	l3688
  2215                           
  2216                           ; BSR set to: 0
  2217                           ;doprnt.c: 1306: if(val < dpowers[c])
  2218                           
  2219                           ; BSR set to: 0
  2220                           
  2221                           ; BSR set to: 0
  2222  0001F2  0100               	movlb	0	; () banked
  2223  0001F4  51A5               	movf	printf@c& (0+255),w,b
  2224  0001F6  0D02               	mullw	2
  2225  0001F8  0ED5               	movlw	low _dpowers
  2226  0001FA  24F3               	addwf	prodl,w,c
  2227  0001FC  6EF6               	movwf	tblptrl,c
  2228  0001FE  0EFD               	movlw	high _dpowers
  2229  000200  20F4               	addwfc	prodh,w,c
  2230  000202  6EF7               	movwf	tblptrh,c
  2231  000204                     	if	0	;There are less than 3 active tblptr bytes
  2232  000204                     	endif
  2233  000204  0009               	tblrd		*+
  2234  000206  50F5               	movf	tablat,w,c
  2235  000208  0100               	movlb	0	; () banked
  2236  00020A  5DA0               	subwf	printf@val& (0+255),w,b
  2237  00020C  0009               	tblrd		*+
  2238  00020E  50F5               	movf	tablat,w,c
  2239  000210  0100               	movlb	0	; () banked
  2240  000212  59A1               	subwfb	(printf@val+1)& (0+255),w,b
  2241  000214  A0D8               	btfss	status,0,c
  2242  000216  D02A               	goto	l3688
  2243                           
  2244                           ; BSR set to: 0
  2245                           
  2246                           ; BSR set to: 0
  2247                           
  2248                           ; BSR set to: 0
  2249                           ;doprnt.c: 1307: break;
  2250  000218  0100               	movlb	0	; () banked
  2251  00021A  2BA5               	incf	printf@c& (0+255),f,b
  2252  00021C  D7E5               	goto	l3658
  2253  00021E                     l3670:
  2254                           
  2255                           ; BSR set to: 0
  2256                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2257  00021E  0E01               	movlw	1
  2258  000220  0100               	movlb	0	; () banked
  2259  000222  6FA5               	movwf	printf@c& (0+255),b
  2260  000224                     l3672:
  2261                           
  2262                           ; BSR set to: 0
  2263  000224  0E04               	movlw	4
  2264  000226  0100               	movlb	0	; () banked
  2265  000228  19A5               	xorwf	printf@c& (0+255),w,b
  2266  00022A  B4D8               	btfsc	status,2,c
  2267  00022C  D01F               	goto	l3688
  2268                           
  2269                           ; BSR set to: 0
  2270                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2271                           
  2272                           ; BSR set to: 0
  2273                           
  2274                           ; BSR set to: 0
  2275  00022E  0100               	movlb	0	; () banked
  2276  000230  51A5               	movf	printf@c& (0+255),w,b
  2277  000232  0D02               	mullw	2
  2278  000234  0EDF               	movlw	low _hexpowers
  2279  000236  24F3               	addwf	prodl,w,c
  2280  000238  6EF6               	movwf	tblptrl,c
  2281  00023A  0EFD               	movlw	high _hexpowers
  2282  00023C  20F4               	addwfc	prodh,w,c
  2283  00023E  6EF7               	movwf	tblptrh,c
  2284  000240                     	if	0	;There are less than 3 active tblptr bytes
  2285  000240                     	endif
  2286  000240  0009               	tblrd		*+
  2287  000242  50F5               	movf	tablat,w,c
  2288  000244  0100               	movlb	0	; () banked
  2289  000246  5DA0               	subwf	printf@val& (0+255),w,b
  2290  000248  0009               	tblrd		*+
  2291  00024A  50F5               	movf	tablat,w,c
  2292  00024C  0100               	movlb	0	; () banked
  2293  00024E  59A1               	subwfb	(printf@val+1)& (0+255),w,b
  2294  000250  A0D8               	btfss	status,0,c
  2295  000252  D00C               	goto	l3688
  2296                           
  2297                           ; BSR set to: 0
  2298                           
  2299                           ; BSR set to: 0
  2300                           
  2301                           ; BSR set to: 0
  2302                           ;doprnt.c: 1318: break;
  2303  000254  0100               	movlb	0	; () banked
  2304  000256  2BA5               	incf	printf@c& (0+255),f,b
  2305  000258  D7E5               	goto	l3672
  2306  00025A                     l3686:
  2307                           
  2308                           ; BSR set to: 0
  2309  00025A  0100               	movlb	0	; () banked
  2310  00025C  51A2               	movf	printf@flag& (0+255),w,b
  2311  00025E  0BC0               	andlw	192
  2312                           
  2313                           ; Switch size 1, requested type "space"
  2314                           ; Number of cases is 2, Range of values is 128 to 192
  2315                           ; switch strategies available:
  2316                           ; Name         Instructions Cycles
  2317                           ; simple_byte            7     4 (average)
  2318                           ;	Chosen strategy is simple_byte
  2319  000260  0A80               	xorlw	128	; case 128
  2320  000262  B4D8               	btfsc	status,2,c
  2321  000264  D7DC               	goto	l3670
  2322  000266  0A40               	xorlw	64	; case 192
  2323  000268  B4D8               	btfsc	status,2,c
  2324  00026A  D7BB               	goto	l3656
  2325  00026C                     l3688:
  2326                           
  2327                           ; BSR set to: 0
  2328                           ;doprnt.c: 1381: if(width > c)
  2329  00026C  0E80               	movlw	128
  2330  00026E  0100               	movlb	0	; () banked
  2331  000270  BFA5               	btfsc	printf@c& (0+255),7,b
  2332  000272  0E7F               	movlw	127
  2333  000274  0100               	movlb	0	; () banked
  2334  000276  6F94               	movwf	??_printf& (0+255),b
  2335  000278  0100               	movlb	0	; () banked
  2336  00027A  51A3               	movf	printf@width& (0+255),w,b
  2337  00027C  0100               	movlb	0	; () banked
  2338  00027E  5DA5               	subwf	printf@c& (0+255),w,b
  2339  000280  0100               	movlb	0	; () banked
  2340  000282  51A4               	movf	(printf@width+1)& (0+255),w,b
  2341  000284  0A80               	xorlw	128
  2342  000286  0100               	movlb	0	; () banked
  2343  000288  5994               	subwfb	??_printf& (0+255),w,b
  2344  00028A  B0D8               	btfsc	status,0,c
  2345  00028C  D00B               	goto	l3692
  2346                           
  2347                           ; BSR set to: 0
  2348                           ;doprnt.c: 1382: width -= c;
  2349  00028E  0100               	movlb	0	; () banked
  2350  000290  51A5               	movf	printf@c& (0+255),w,b
  2351  000292  0100               	movlb	0	; () banked
  2352  000294  5FA3               	subwf	printf@width& (0+255),f,b
  2353  000296  0E00               	movlw	0
  2354  000298  0100               	movlb	0	; () banked
  2355  00029A  BFA5               	btfsc	printf@c& (0+255),7,b
  2356  00029C  0EFF               	movlw	255
  2357  00029E  0100               	movlb	0	; () banked
  2358  0002A0  5BA4               	subwfb	(printf@width+1)& (0+255),f,b
  2359  0002A2  D005               	goto	l3694
  2360  0002A4                     l3692:
  2361                           
  2362                           ; BSR set to: 0
  2363                           ;doprnt.c: 1383: else
  2364                           ;doprnt.c: 1384: width = 0;
  2365  0002A4  0E00               	movlw	0
  2366  0002A6  0100               	movlb	0	; () banked
  2367  0002A8  6FA4               	movwf	(printf@width+1)& (0+255),b
  2368  0002AA  0E00               	movlw	0
  2369  0002AC  6FA3               	movwf	printf@width& (0+255),b
  2370  0002AE                     l3694:
  2371                           
  2372                           ; BSR set to: 0
  2373                           ;doprnt.c: 1387: if(flag & 0x04) {
  2374  0002AE  0100               	movlb	0	; () banked
  2375  0002B0  A5A2               	btfss	printf@flag& (0+255),2,b
  2376  0002B2  D00E               	goto	l3702
  2377  0002B4                     
  2378                           ; BSR set to: 0
  2379                           ;doprnt.c: 1415: if(width)
  2380  0002B4  0100               	movlb	0	; () banked
  2381  0002B6  51A3               	movf	printf@width& (0+255),w,b
  2382  0002B8  0100               	movlb	0	; () banked
  2383  0002BA  11A4               	iorwf	(printf@width+1)& (0+255),w,b
  2384  0002BC  B4D8               	btfsc	status,2,c
  2385  0002BE  D01B               	goto	l505
  2386                           
  2387                           ; BSR set to: 0
  2388                           ;doprnt.c: 1417: (putch('0') );
  2389                           
  2390                           ; BSR set to: 0
  2391                           
  2392                           ;doprnt.c: 1416: do
  2393  0002C0  0E30               	movlw	48
  2394  0002C2  ECC4  F010         	call	_putch
  2395                           
  2396                           ;doprnt.c: 1418: while(--width);
  2397  0002C6  0100               	movlb	0	; () banked
  2398  0002C8  07A3               	decf	printf@width& (0+255),f,b
  2399  0002CA  A0D8               	btfss	status,0,c
  2400  0002CC  07A4               	decf	(printf@width+1)& (0+255),f,b
  2401  0002CE  D7F2               	goto	L3
  2402  0002D0                     l3702:
  2403                           
  2404                           ; BSR set to: 0
  2405                           ;doprnt.c: 1422: {
  2406                           ;doprnt.c: 1424: if(width
  2407                           ;doprnt.c: 1428: )
  2408  0002D0  0100               	movlb	0	; () banked
  2409  0002D2  51A3               	movf	printf@width& (0+255),w,b
  2410  0002D4  0100               	movlb	0	; () banked
  2411  0002D6  11A4               	iorwf	(printf@width+1)& (0+255),w,b
  2412  0002D8  B4D8               	btfsc	status,2,c
  2413  0002DA  D00D               	goto	l505
  2414  0002DC                     l3704:
  2415                           
  2416                           ; BSR set to: 0
  2417                           ;doprnt.c: 1430: (putch(' ') );
  2418  0002DC  0E20               	movlw	32
  2419  0002DE  ECC4  F010         	call	_putch
  2420                           
  2421                           ;doprnt.c: 1431: while(--width);
  2422  0002E2  0100               	movlb	0	; () banked
  2423  0002E4  07A3               	decf	printf@width& (0+255),f,b
  2424  0002E6  A0D8               	btfss	status,0,c
  2425  0002E8  07A4               	decf	(printf@width+1)& (0+255),f,b
  2426  0002EA  0100               	movlb	0	; () banked
  2427  0002EC  51A3               	movf	printf@width& (0+255),w,b
  2428  0002EE  0100               	movlb	0	; () banked
  2429  0002F0  11A4               	iorwf	(printf@width+1)& (0+255),w,b
  2430  0002F2  A4D8               	btfss	status,2,c
  2431  0002F4  D7F3               	goto	l3704
  2432  0002F6                     l505:
  2433                           
  2434                           ; BSR set to: 0
  2435                           ;doprnt.c: 1469: }
  2436                           ;doprnt.c: 1472: prec = c;
  2437  0002F6  C0A5  F09F         	movff	printf@c,printf@prec
  2438                           
  2439                           ;doprnt.c: 1474: while(prec--) {
  2440  0002FA  D05A               	goto	l3720
  2441  0002FC                     l3708:
  2442                           
  2443                           ; BSR set to: 0
  2444                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2445  0002FC  0100               	movlb	0	; () banked
  2446  0002FE  519F               	movf	printf@prec& (0+255),w,b
  2447  000300  0D02               	mullw	2
  2448  000302  0ED5               	movlw	low _dpowers
  2449  000304  24F3               	addwf	prodl,w,c
  2450  000306  6EF6               	movwf	tblptrl,c
  2451  000308  0EFD               	movlw	high _dpowers
  2452  00030A  20F4               	addwfc	prodh,w,c
  2453  00030C  6EF7               	movwf	tblptrh,c
  2454  00030E                     	if	0	;There are less than 3 active tblptr bytes
  2455  00030E                     	endif
  2456  00030E  0009               	tblrd		*+
  2457  000310  CFF5 F082          	movff	tablat,___lwdiv@divisor
  2458  000314  000A               	tblrd		*-
  2459  000316  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  2460  00031A  C0A0  F080         	movff	printf@val,___lwdiv@dividend
  2461  00031E  C0A1  F081         	movff	printf@val+1,___lwdiv@dividend+1
  2462  000322  EC4A  F00D         	call	___lwdiv	;wreg free
  2463  000326  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  2464  00032A  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  2465  00032E  0E00               	movlw	0
  2466  000330  0100               	movlb	0	; () banked
  2467  000332  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  2468  000334  0E0A               	movlw	10
  2469  000336  6F89               	movwf	___lwmod@divisor& (0+255),b
  2470  000338  ECF5  F00D         	call	___lwmod	;wreg free
  2471  00033C  0100               	movlb	0	; () banked
  2472  00033E  5187               	movf	?___lwmod& (0+255),w,b
  2473  000340  0F30               	addlw	48
  2474  000342  0100               	movlb	0	; () banked
  2475  000344  6FA5               	movwf	printf@c& (0+255),b
  2476                           
  2477                           ;doprnt.c: 1491: break;
  2478  000346  D030               	goto	l3718
  2479  000348                     l3710:
  2480                           
  2481                           ; BSR set to: 0
  2482                           ;doprnt.c: 1499: {
  2483                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2484  000348  C0A0  F080         	movff	printf@val,___lwdiv@dividend
  2485  00034C  C0A1  F081         	movff	printf@val+1,___lwdiv@dividend+1
  2486  000350  0100               	movlb	0	; () banked
  2487  000352  519F               	movf	printf@prec& (0+255),w,b
  2488  000354  0D02               	mullw	2
  2489  000356  0EDF               	movlw	low _hexpowers
  2490  000358  24F3               	addwf	prodl,w,c
  2491  00035A  6EF6               	movwf	tblptrl,c
  2492  00035C  0EFD               	movlw	high _hexpowers
  2493  00035E  20F4               	addwfc	prodh,w,c
  2494  000360  6EF7               	movwf	tblptrh,c
  2495  000362                     	if	0	;There are less than 3 active tblptr bytes
  2496  000362                     	endif
  2497  000362  0009               	tblrd		*+
  2498  000364  CFF5 F082          	movff	tablat,___lwdiv@divisor
  2499  000368  000A               	tblrd		*-
  2500  00036A  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  2501  00036E  EC4A  F00D         	call	___lwdiv	;wreg free
  2502  000372  0100               	movlb	0	; () banked
  2503  000374  5180               	movf	?___lwdiv& (0+255),w,b
  2504  000376  0B0F               	andlw	15
  2505  000378  0100               	movlb	0	; () banked
  2506  00037A  6F9C               	movwf	printf@idx& (0+255),b
  2507                           
  2508                           ; BSR set to: 0
  2509                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2510  00037C  0100               	movlb	0	; () banked
  2511  00037E  519C               	movf	printf@idx& (0+255),w,b
  2512  000380  0D01               	mullw	1
  2513  000382  0E91               	movlw	low STR_52
  2514  000384  24F3               	addwf	prodl,w,c
  2515  000386  6EF6               	movwf	tblptrl,c
  2516  000388  0EFF               	movlw	high STR_52
  2517  00038A  20F4               	addwfc	prodh,w,c
  2518  00038C  6EF7               	movwf	tblptrh,c
  2519  00038E                     	if	0	;There are less than 3 active tblptr bytes
  2520  00038E                     	endif
  2521  00038E  0008               	tblrd		*
  2522  000390  CFF5 F0A5          	movff	tablat,printf@c
  2523                           
  2524                           ; BSR set to: 0
  2525                           ;doprnt.c: 1523: }
  2526                           
  2527                           ;doprnt.c: 1508: }
  2528                           ;doprnt.c: 1510: break;
  2529  000394  D009               	goto	l3718
  2530  000396                     l3716:
  2531                           
  2532                           ; BSR set to: 0
  2533  000396  0100               	movlb	0	; () banked
  2534  000398  51A2               	movf	printf@flag& (0+255),w,b
  2535  00039A  0BC0               	andlw	192
  2536                           
  2537                           ; Switch size 1, requested type "space"
  2538                           ; Number of cases is 2, Range of values is 128 to 192
  2539                           ; switch strategies available:
  2540                           ; Name         Instructions Cycles
  2541                           ; simple_byte            7     4 (average)
  2542                           ;	Chosen strategy is simple_byte
  2543  00039C  0A80               	xorlw	128	; case 128
  2544  00039E  B4D8               	btfsc	status,2,c
  2545  0003A0  D7D3               	goto	l3710
  2546  0003A2  0A40               	xorlw	64	; case 192
  2547  0003A4  B4D8               	btfsc	status,2,c
  2548  0003A6  D7AA               	goto	l3708
  2549  0003A8                     l3718:
  2550                           
  2551                           ; BSR set to: 0
  2552                           ;doprnt.c: 1524: (putch(c) );
  2553  0003A8  0100               	movlb	0	; () banked
  2554  0003AA  51A5               	movf	printf@c& (0+255),w,b
  2555  0003AC  ECC4  F010         	call	_putch
  2556  0003B0                     l3720:
  2557  0003B0  0100               	movlb	0	; () banked
  2558  0003B2  079F               	decf	printf@prec& (0+255),f,b
  2559  0003B4  0100               	movlb	0	; () banked
  2560  0003B6  299F               	incf	printf@prec& (0+255),w,b
  2561  0003B8  A4D8               	btfss	status,2,c
  2562  0003BA  D7ED               	goto	l3716
  2563  0003BC                     l3722:
  2564  0003BC  C08C  FFF6         	movff	printf@f,tblptrl
  2565  0003C0  C08D  FFF7         	movff	printf@f+1,tblptrh
  2566  0003C4  0100               	movlb	0	; () banked
  2567  0003C6  4B8C               	infsnz	printf@f& (0+255),f,b
  2568  0003C8  2B8D               	incf	(printf@f+1)& (0+255),f,b
  2569  0003CA                     	if	0	;tblptru may be non-zero
  2570  0003CA                     	endif
  2571  0003CA                     	if	0	;tblptru may be non-zero
  2572  0003CA                     	endif
  2573  0003CA  0008               	tblrd		*
  2574  0003CC  CFF5 F0A5          	movff	tablat,printf@c
  2575  0003D0  0100               	movlb	0	; () banked
  2576  0003D2  51A5               	movf	printf@c& (0+255),w,b
  2577  0003D4  B4D8               	btfsc	status,2,c
  2578  0003D6  0012               	return	
  2579  0003D8  D623               	goto	l3600
  2580  0003DA                     __end_of_printf:
  2581                           	opt stack 0
  2582                           tblptru	equ	0xFF8
  2583                           tblptrh	equ	0xFF7
  2584                           tblptrl	equ	0xFF6
  2585                           tablat	equ	0xFF5
  2586                           prodh	equ	0xFF4
  2587                           prodl	equ	0xFF3
  2588                           intcon	equ	0xFF2
  2589                           intcon3	equ	0xFF0
  2590                           postinc0	equ	0xFEE
  2591                           wreg	equ	0xFE8
  2592                           indf2	equ	0xFDF
  2593                           postinc2	equ	0xFDE
  2594                           postdec2	equ	0xFDD
  2595                           fsr2h	equ	0xFDA
  2596                           fsr2l	equ	0xFD9
  2597                           status	equ	0xFD8
  2598                           
  2599 ;; *************** function _putch *****************
  2600 ;; Defined at:
  2601 ;;		line 25 in file "lcd.c"
  2602 ;; Parameters:    Size  Location     Type
  2603 ;;  data            1    wreg     unsigned char 
  2604 ;; Auto vars:     Size  Location     Type
  2605 ;;  data            1    2[BANK0 ] unsigned char 
  2606 ;; Return value:  Size  Location     Type
  2607 ;;                  1    wreg      void 
  2608 ;; Registers used:
  2609 ;;		wreg, status,2, status,0, cstack
  2610 ;; Tracked objects:
  2611 ;;		On entry : 0/0
  2612 ;;		On exit  : 0/0
  2613 ;;		Unchanged: 0/0
  2614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2616 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2618 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2619 ;;Total ram usage:        1 bytes
  2620 ;; Hardware stack levels used:    1
  2621 ;; Hardware stack levels required when called:    7
  2622 ;; This function calls:
  2623 ;;		_lcdNibble
  2624 ;; This function is called by:
  2625 ;;		_printf
  2626 ;; This function uses a non-reentrant model
  2627 ;;
  2628                           
  2629                           	psect	text3
  2630  002188                     __ptext3:
  2631                           	opt stack 0
  2632  002188                     _putch:
  2633                           	opt stack 21
  2634                           
  2635                           ;incstack = 0
  2636                           ;putch@data stored from wreg
  2637  002188  0100               	movlb	0	; () banked
  2638  00218A  6F82               	movwf	putch@data& (0+255),b
  2639                           
  2640                           ;lcd.c: 26: LATDbits.LATD2 = 1;
  2641  00218C  848C               	bsf	3980,2,c	;volatile
  2642                           
  2643                           ;lcd.c: 27: lcdNibble(data);
  2644  00218E  0100               	movlb	0	; () banked
  2645  002190  5182               	movf	putch@data& (0+255),w,b
  2646  002192  ECC1  F00D         	call	_lcdNibble
  2647  002196  0012               	return		;funcret
  2648  002198                     __end_of_putch:
  2649                           	opt stack 0
  2650                           tblptru	equ	0xFF8
  2651                           tblptrh	equ	0xFF7
  2652                           tblptrl	equ	0xFF6
  2653                           tablat	equ	0xFF5
  2654                           prodh	equ	0xFF4
  2655                           prodl	equ	0xFF3
  2656                           intcon	equ	0xFF2
  2657                           intcon3	equ	0xFF0
  2658                           postinc0	equ	0xFEE
  2659                           wreg	equ	0xFE8
  2660                           indf2	equ	0xFDF
  2661                           postinc2	equ	0xFDE
  2662                           postdec2	equ	0xFDD
  2663                           fsr2h	equ	0xFDA
  2664                           fsr2l	equ	0xFD9
  2665                           status	equ	0xFD8
  2666                           
  2667 ;; *************** function _isdigit *****************
  2668 ;; Defined at:
  2669 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  2670 ;; Parameters:    Size  Location     Type
  2671 ;;  c               1    wreg     unsigned char 
  2672 ;; Auto vars:     Size  Location     Type
  2673 ;;  c               1    2[BANK0 ] unsigned char 
  2674 ;; Return value:  Size  Location     Type
  2675 ;;		None               void
  2676 ;; Registers used:
  2677 ;;		wreg, status,2, status,0
  2678 ;; Tracked objects:
  2679 ;;		On entry : 0/0
  2680 ;;		On exit  : 0/0
  2681 ;;		Unchanged: 0/0
  2682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2684 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2685 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2686 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2687 ;;Total ram usage:        3 bytes
  2688 ;; Hardware stack levels used:    1
  2689 ;; Hardware stack levels required when called:    6
  2690 ;; This function calls:
  2691 ;;		Nothing
  2692 ;; This function is called by:
  2693 ;;		_printf
  2694 ;; This function uses a non-reentrant model
  2695 ;;
  2696                           
  2697                           	psect	text4
  2698  001F92                     __ptext4:
  2699                           	opt stack 0
  2700  001F92                     _isdigit:
  2701                           	opt stack 22
  2702                           
  2703                           ;incstack = 0
  2704                           ;isdigit@c stored from wreg
  2705  001F92  0100               	movlb	0	; () banked
  2706  001F94  6F82               	movwf	isdigit@c& (0+255),b
  2707  001F96  0E00               	movlw	0
  2708  001F98  0100               	movlb	0	; () banked
  2709  001F9A  6F81               	movwf	_isdigit$1055& (0+255),b
  2710                           
  2711                           ; BSR set to: 0
  2712  001F9C  0E3A               	movlw	58
  2713  001F9E  0100               	movlb	0	; () banked
  2714  001FA0  6182               	cpfslt	isdigit@c& (0+255),b
  2715  001FA2  D007               	goto	l3328
  2716                           
  2717                           ; BSR set to: 0
  2718  001FA4  0E2F               	movlw	47
  2719  001FA6  0100               	movlb	0	; () banked
  2720  001FA8  6582               	cpfsgt	isdigit@c& (0+255),b
  2721  001FAA  D003               	goto	l3328
  2722                           
  2723                           ; BSR set to: 0
  2724  001FAC  0E01               	movlw	1
  2725  001FAE  0100               	movlb	0	; () banked
  2726  001FB0  6F81               	movwf	_isdigit$1055& (0+255),b
  2727  001FB2                     l3328:
  2728                           
  2729                           ; BSR set to: 0
  2730  001FB2  C081  F080         	movff	_isdigit$1055,??_isdigit
  2731  001FB6  0100               	movlb	0	; () banked
  2732  001FB8  3180               	rrcf	??_isdigit& (0+255),w,b
  2733  001FBA  0012               	return	
  2734  001FBC                     __end_of_isdigit:
  2735                           	opt stack 0
  2736                           tblptru	equ	0xFF8
  2737                           tblptrh	equ	0xFF7
  2738                           tblptrl	equ	0xFF6
  2739                           tablat	equ	0xFF5
  2740                           prodh	equ	0xFF4
  2741                           prodl	equ	0xFF3
  2742                           intcon	equ	0xFF2
  2743                           intcon3	equ	0xFF0
  2744                           postinc0	equ	0xFEE
  2745                           wreg	equ	0xFE8
  2746                           indf2	equ	0xFDF
  2747                           postinc2	equ	0xFDE
  2748                           postdec2	equ	0xFDD
  2749                           fsr2h	equ	0xFDA
  2750                           fsr2l	equ	0xFD9
  2751                           status	equ	0xFD8
  2752                           
  2753 ;; *************** function ___wmul *****************
  2754 ;; Defined at:
  2755 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  2756 ;; Parameters:    Size  Location     Type
  2757 ;;  multiplier      2    0[BANK0 ] unsigned int 
  2758 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  2759 ;; Auto vars:     Size  Location     Type
  2760 ;;  product         2    4[BANK0 ] unsigned int 
  2761 ;; Return value:  Size  Location     Type
  2762 ;;                  2    0[BANK0 ] unsigned int 
  2763 ;; Registers used:
  2764 ;;		wreg, status,2, status,0, prodl, prodh
  2765 ;; Tracked objects:
  2766 ;;		On entry : 0/0
  2767 ;;		On exit  : 0/0
  2768 ;;		Unchanged: 0/0
  2769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2770 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2771 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2773 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2774 ;;Total ram usage:        6 bytes
  2775 ;; Hardware stack levels used:    1
  2776 ;; Hardware stack levels required when called:    6
  2777 ;; This function calls:
  2778 ;;		Nothing
  2779 ;; This function is called by:
  2780 ;;		_printf
  2781 ;; This function uses a non-reentrant model
  2782 ;;
  2783                           
  2784                           	psect	text5
  2785  001EF8                     __ptext5:
  2786                           	opt stack 0
  2787  001EF8                     ___wmul:
  2788                           	opt stack 22
  2789                           
  2790                           ; BSR set to: 0
  2791                           ;incstack = 0
  2792  001EF8  0100               	movlb	0	; () banked
  2793  001EFA  5180               	movf	___wmul@multiplier& (0+255),w,b
  2794  001EFC  0100               	movlb	0	; () banked
  2795  001EFE  0382               	mulwf	___wmul@multiplicand& (0+255),b
  2796  001F00  CFF3 F084          	movff	prodl,___wmul@product
  2797  001F04  CFF4 F085          	movff	prodh,___wmul@product+1
  2798  001F08  0100               	movlb	0	; () banked
  2799  001F0A  5180               	movf	___wmul@multiplier& (0+255),w,b
  2800  001F0C  0100               	movlb	0	; () banked
  2801  001F0E  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  2802  001F10  50F3               	movf	prodl,w,c
  2803  001F12  0100               	movlb	0	; () banked
  2804  001F14  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  2805  001F16  0100               	movlb	0	; () banked
  2806  001F18  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  2807  001F1A  0100               	movlb	0	; () banked
  2808  001F1C  0382               	mulwf	___wmul@multiplicand& (0+255),b
  2809  001F1E  50F3               	movf	prodl,w,c
  2810  001F20  0100               	movlb	0	; () banked
  2811  001F22  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  2812                           
  2813                           ; BSR set to: 0
  2814  001F24  C084  F080         	movff	___wmul@product,?___wmul
  2815  001F28  C085  F081         	movff	___wmul@product+1,?___wmul+1
  2816  001F2C  0012               	return	
  2817  001F2E                     __end_of___wmul:
  2818                           	opt stack 0
  2819                           tblptru	equ	0xFF8
  2820                           tblptrh	equ	0xFF7
  2821                           tblptrl	equ	0xFF6
  2822                           tablat	equ	0xFF5
  2823                           prodh	equ	0xFF4
  2824                           prodl	equ	0xFF3
  2825                           intcon	equ	0xFF2
  2826                           intcon3	equ	0xFF0
  2827                           postinc0	equ	0xFEE
  2828                           wreg	equ	0xFE8
  2829                           indf2	equ	0xFDF
  2830                           postinc2	equ	0xFDE
  2831                           postdec2	equ	0xFDD
  2832                           fsr2h	equ	0xFDA
  2833                           fsr2l	equ	0xFD9
  2834                           status	equ	0xFD8
  2835                           
  2836 ;; *************** function ___lwmod *****************
  2837 ;; Defined at:
  2838 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  2839 ;; Parameters:    Size  Location     Type
  2840 ;;  dividend        2    7[BANK0 ] unsigned int 
  2841 ;;  divisor         2    9[BANK0 ] unsigned int 
  2842 ;; Auto vars:     Size  Location     Type
  2843 ;;  counter         1   11[BANK0 ] unsigned char 
  2844 ;; Return value:  Size  Location     Type
  2845 ;;                  2    7[BANK0 ] unsigned int 
  2846 ;; Registers used:
  2847 ;;		wreg, status,2, status,0
  2848 ;; Tracked objects:
  2849 ;;		On entry : 0/0
  2850 ;;		On exit  : 0/0
  2851 ;;		Unchanged: 0/0
  2852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2853 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2854 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2856 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2857 ;;Total ram usage:        5 bytes
  2858 ;; Hardware stack levels used:    1
  2859 ;; Hardware stack levels required when called:    6
  2860 ;; This function calls:
  2861 ;;		Nothing
  2862 ;; This function is called by:
  2863 ;;		_printf
  2864 ;; This function uses a non-reentrant model
  2865 ;;
  2866                           
  2867                           	psect	text6
  2868  001BEA                     __ptext6:
  2869                           	opt stack 0
  2870  001BEA                     ___lwmod:
  2871                           	opt stack 22
  2872                           
  2873                           ; BSR set to: 0
  2874                           ;incstack = 0
  2875  001BEA  0100               	movlb	0	; () banked
  2876  001BEC  5189               	movf	___lwmod@divisor& (0+255),w,b
  2877  001BEE  0100               	movlb	0	; () banked
  2878  001BF0  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  2879  001BF2  B4D8               	btfsc	status,2,c
  2880  001BF4  D026               	goto	l935
  2881                           
  2882                           ; BSR set to: 0
  2883  001BF6  0E01               	movlw	1
  2884  001BF8  0100               	movlb	0	; () banked
  2885  001BFA  6F8B               	movwf	___lwmod@counter& (0+255),b
  2886  001BFC  D006               	goto	l3388
  2887  001BFE                     l3386:
  2888                           
  2889                           ; BSR set to: 0
  2890  001BFE  0100               	movlb	0	; () banked
  2891  001C00  90D8               	bcf	status,0,c
  2892  001C02  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  2893  001C04  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  2894  001C06  0100               	movlb	0	; () banked
  2895  001C08  2B8B               	incf	___lwmod@counter& (0+255),f,b
  2896  001C0A                     l3388:
  2897                           
  2898                           ; BSR set to: 0
  2899  001C0A  0100               	movlb	0	; () banked
  2900  001C0C  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  2901  001C0E  D7F7               	goto	l3386
  2902  001C10                     l3390:
  2903                           
  2904                           ; BSR set to: 0
  2905  001C10  0100               	movlb	0	; () banked
  2906  001C12  5189               	movf	___lwmod@divisor& (0+255),w,b
  2907  001C14  0100               	movlb	0	; () banked
  2908  001C16  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  2909  001C18  0100               	movlb	0	; () banked
  2910  001C1A  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  2911  001C1C  0100               	movlb	0	; () banked
  2912  001C1E  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  2913  001C20  A0D8               	btfss	status,0,c
  2914  001C22  D008               	goto	l3394
  2915                           
  2916                           ; BSR set to: 0
  2917  001C24  0100               	movlb	0	; () banked
  2918  001C26  5189               	movf	___lwmod@divisor& (0+255),w,b
  2919  001C28  0100               	movlb	0	; () banked
  2920  001C2A  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  2921  001C2C  0100               	movlb	0	; () banked
  2922  001C2E  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  2923  001C30  0100               	movlb	0	; () banked
  2924  001C32  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  2925  001C34                     l3394:
  2926                           
  2927                           ; BSR set to: 0
  2928  001C34  0100               	movlb	0	; () banked
  2929  001C36  90D8               	bcf	status,0,c
  2930  001C38  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  2931  001C3A  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  2932                           
  2933                           ; BSR set to: 0
  2934  001C3C  0100               	movlb	0	; () banked
  2935  001C3E  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  2936  001C40  D7E7               	goto	l3390
  2937  001C42                     l935:
  2938                           
  2939                           ; BSR set to: 0
  2940  001C42  C087  F087         	movff	___lwmod@dividend,?___lwmod
  2941  001C46  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  2942                           
  2943                           ; BSR set to: 0
  2944  001C4A  0012               	return		;funcret
  2945  001C4C                     __end_of___lwmod:
  2946                           	opt stack 0
  2947                           tblptru	equ	0xFF8
  2948                           tblptrh	equ	0xFF7
  2949                           tblptrl	equ	0xFF6
  2950                           tablat	equ	0xFF5
  2951                           prodh	equ	0xFF4
  2952                           prodl	equ	0xFF3
  2953                           intcon	equ	0xFF2
  2954                           intcon3	equ	0xFF0
  2955                           postinc0	equ	0xFEE
  2956                           wreg	equ	0xFE8
  2957                           indf2	equ	0xFDF
  2958                           postinc2	equ	0xFDE
  2959                           postdec2	equ	0xFDD
  2960                           fsr2h	equ	0xFDA
  2961                           fsr2l	equ	0xFD9
  2962                           status	equ	0xFD8
  2963                           
  2964 ;; *************** function ___lwdiv *****************
  2965 ;; Defined at:
  2966 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  2967 ;; Parameters:    Size  Location     Type
  2968 ;;  dividend        2    0[BANK0 ] unsigned int 
  2969 ;;  divisor         2    2[BANK0 ] unsigned int 
  2970 ;; Auto vars:     Size  Location     Type
  2971 ;;  quotient        2    4[BANK0 ] unsigned int 
  2972 ;;  counter         1    6[BANK0 ] unsigned char 
  2973 ;; Return value:  Size  Location     Type
  2974 ;;                  2    0[BANK0 ] unsigned int 
  2975 ;; Registers used:
  2976 ;;		wreg, status,2, status,0
  2977 ;; Tracked objects:
  2978 ;;		On entry : 0/0
  2979 ;;		On exit  : 0/0
  2980 ;;		Unchanged: 0/0
  2981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2982 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2983 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2985 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2986 ;;Total ram usage:        7 bytes
  2987 ;; Hardware stack levels used:    1
  2988 ;; Hardware stack levels required when called:    6
  2989 ;; This function calls:
  2990 ;;		Nothing
  2991 ;; This function is called by:
  2992 ;;		_printf
  2993 ;; This function uses a non-reentrant model
  2994 ;;
  2995                           
  2996                           	psect	text7
  2997  001A94                     __ptext7:
  2998                           	opt stack 0
  2999  001A94                     ___lwdiv:
  3000                           	opt stack 22
  3001                           
  3002                           ; BSR set to: 0
  3003                           ;incstack = 0
  3004  001A94  0E00               	movlw	0
  3005  001A96  0100               	movlb	0	; () banked
  3006  001A98  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
  3007  001A9A  0E00               	movlw	0
  3008  001A9C  6F84               	movwf	___lwdiv@quotient& (0+255),b
  3009                           
  3010                           ; BSR set to: 0
  3011  001A9E  0100               	movlb	0	; () banked
  3012  001AA0  5182               	movf	___lwdiv@divisor& (0+255),w,b
  3013  001AA2  0100               	movlb	0	; () banked
  3014  001AA4  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  3015  001AA6  B4D8               	btfsc	status,2,c
  3016  001AA8  D02C               	goto	l925
  3017                           
  3018                           ; BSR set to: 0
  3019  001AAA  0E01               	movlw	1
  3020  001AAC  0100               	movlb	0	; () banked
  3021  001AAE  6F86               	movwf	___lwdiv@counter& (0+255),b
  3022  001AB0  D006               	goto	l3368
  3023  001AB2                     l3366:
  3024                           
  3025                           ; BSR set to: 0
  3026  001AB2  0100               	movlb	0	; () banked
  3027  001AB4  90D8               	bcf	status,0,c
  3028  001AB6  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  3029  001AB8  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  3030  001ABA  0100               	movlb	0	; () banked
  3031  001ABC  2B86               	incf	___lwdiv@counter& (0+255),f,b
  3032  001ABE                     l3368:
  3033                           
  3034                           ; BSR set to: 0
  3035  001ABE  0100               	movlb	0	; () banked
  3036  001AC0  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  3037  001AC2  D7F7               	goto	l3366
  3038  001AC4                     l3370:
  3039                           
  3040                           ; BSR set to: 0
  3041  001AC4  0100               	movlb	0	; () banked
  3042  001AC6  90D8               	bcf	status,0,c
  3043  001AC8  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
  3044  001ACA  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  3045                           
  3046                           ; BSR set to: 0
  3047  001ACC  0100               	movlb	0	; () banked
  3048  001ACE  5182               	movf	___lwdiv@divisor& (0+255),w,b
  3049  001AD0  0100               	movlb	0	; () banked
  3050  001AD2  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  3051  001AD4  0100               	movlb	0	; () banked
  3052  001AD6  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3053  001AD8  0100               	movlb	0	; () banked
  3054  001ADA  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  3055  001ADC  A0D8               	btfss	status,0,c
  3056  001ADE  D00A               	goto	l3378
  3057                           
  3058                           ; BSR set to: 0
  3059  001AE0  0100               	movlb	0	; () banked
  3060  001AE2  5182               	movf	___lwdiv@divisor& (0+255),w,b
  3061  001AE4  0100               	movlb	0	; () banked
  3062  001AE6  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  3063  001AE8  0100               	movlb	0	; () banked
  3064  001AEA  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3065  001AEC  0100               	movlb	0	; () banked
  3066  001AEE  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  3067                           
  3068                           ; BSR set to: 0
  3069  001AF0  0100               	movlb	0	; () banked
  3070  001AF2  8184               	bsf	___lwdiv@quotient& (0+255),0,b
  3071  001AF4                     l3378:
  3072                           
  3073                           ; BSR set to: 0
  3074  001AF4  0100               	movlb	0	; () banked
  3075  001AF6  90D8               	bcf	status,0,c
  3076  001AF8  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  3077  001AFA  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  3078                           
  3079                           ; BSR set to: 0
  3080  001AFC  0100               	movlb	0	; () banked
  3081  001AFE  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
  3082  001B00  D7E1               	goto	l3370
  3083  001B02                     l925:
  3084                           
  3085                           ; BSR set to: 0
  3086  001B02  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
  3087  001B06  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3088                           
  3089                           ; BSR set to: 0
  3090  001B0A  0012               	return		;funcret
  3091  001B0C                     __end_of___lwdiv:
  3092                           	opt stack 0
  3093                           tblptru	equ	0xFF8
  3094                           tblptrh	equ	0xFF7
  3095                           tblptrl	equ	0xFF6
  3096                           tablat	equ	0xFF5
  3097                           prodh	equ	0xFF4
  3098                           prodl	equ	0xFF3
  3099                           intcon	equ	0xFF2
  3100                           intcon3	equ	0xFF0
  3101                           postinc0	equ	0xFEE
  3102                           wreg	equ	0xFE8
  3103                           indf2	equ	0xFDF
  3104                           postinc2	equ	0xFDE
  3105                           postdec2	equ	0xFDD
  3106                           fsr2h	equ	0xFDA
  3107                           fsr2l	equ	0xFD9
  3108                           status	equ	0xFD8
  3109                           
  3110 ;; *************** function _line1 *****************
  3111 ;; Defined at:
  3112 ;;		line 58 in file "lcd.c"
  3113 ;; Parameters:    Size  Location     Type
  3114 ;;		None
  3115 ;; Auto vars:     Size  Location     Type
  3116 ;;		None
  3117 ;; Return value:  Size  Location     Type
  3118 ;;                  1    wreg      void 
  3119 ;; Registers used:
  3120 ;;		wreg, status,2, status,0, cstack
  3121 ;; Tracked objects:
  3122 ;;		On entry : 0/0
  3123 ;;		On exit  : 0/0
  3124 ;;		Unchanged: 0/0
  3125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3129 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3130 ;;Total ram usage:        0 bytes
  3131 ;; Hardware stack levels used:    1
  3132 ;; Hardware stack levels required when called:    8
  3133 ;; This function calls:
  3134 ;;		_lcdInst
  3135 ;; This function is called by:
  3136 ;;		_showRTC
  3137 ;; This function uses a non-reentrant model
  3138 ;;
  3139                           
  3140                           	psect	text8
  3141  0021D4                     __ptext8:
  3142                           	opt stack 0
  3143  0021D4                     _line1:
  3144                           	opt stack 21
  3145                           
  3146                           ;lcd.c: 59: lcdInst(0b11000000);
  3147                           
  3148                           ; BSR set to: 0
  3149                           ;incstack = 0
  3150  0021D4  0EC0               	movlw	192
  3151  0021D6  ECCC  F010         	call	_lcdInst
  3152  0021DA  0012               	return		;funcret
  3153  0021DC                     __end_of_line1:
  3154                           	opt stack 0
  3155                           tblptru	equ	0xFF8
  3156                           tblptrh	equ	0xFF7
  3157                           tblptrl	equ	0xFF6
  3158                           tablat	equ	0xFF5
  3159                           prodh	equ	0xFF4
  3160                           prodl	equ	0xFF3
  3161                           intcon	equ	0xFF2
  3162                           intcon3	equ	0xFF0
  3163                           postinc0	equ	0xFEE
  3164                           wreg	equ	0xFE8
  3165                           indf2	equ	0xFDF
  3166                           postinc2	equ	0xFDE
  3167                           postdec2	equ	0xFDD
  3168                           fsr2h	equ	0xFDA
  3169                           fsr2l	equ	0xFD9
  3170                           status	equ	0xFD8
  3171                           
  3172 ;; *************** function _line0 *****************
  3173 ;; Defined at:
  3174 ;;		line 54 in file "lcd.c"
  3175 ;; Parameters:    Size  Location     Type
  3176 ;;		None
  3177 ;; Auto vars:     Size  Location     Type
  3178 ;;		None
  3179 ;; Return value:  Size  Location     Type
  3180 ;;                  1    wreg      void 
  3181 ;; Registers used:
  3182 ;;		wreg, status,2, status,0, cstack
  3183 ;; Tracked objects:
  3184 ;;		On entry : 0/0
  3185 ;;		On exit  : 0/0
  3186 ;;		Unchanged: 0/0
  3187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3192 ;;Total ram usage:        0 bytes
  3193 ;; Hardware stack levels used:    1
  3194 ;; Hardware stack levels required when called:    8
  3195 ;; This function calls:
  3196 ;;		_lcdInst
  3197 ;; This function is called by:
  3198 ;;		_showRTC
  3199 ;;		_main
  3200 ;;		_mainloop
  3201 ;; This function uses a non-reentrant model
  3202 ;;
  3203                           
  3204                           	psect	text9
  3205  0021DC                     __ptext9:
  3206                           	opt stack 0
  3207  0021DC                     _line0:
  3208                           	opt stack 21
  3209                           
  3210                           ;lcd.c: 55: lcdInst(0b10000000);
  3211                           
  3212                           ;incstack = 0
  3213  0021DC  0E80               	movlw	128
  3214  0021DE  ECCC  F010         	call	_lcdInst
  3215  0021E2  0012               	return		;funcret
  3216  0021E4                     __end_of_line0:
  3217                           	opt stack 0
  3218                           tblptru	equ	0xFF8
  3219                           tblptrh	equ	0xFF7
  3220                           tblptrl	equ	0xFF6
  3221                           tablat	equ	0xFF5
  3222                           prodh	equ	0xFF4
  3223                           prodl	equ	0xFF3
  3224                           intcon	equ	0xFF2
  3225                           intcon3	equ	0xFF0
  3226                           postinc0	equ	0xFEE
  3227                           wreg	equ	0xFE8
  3228                           indf2	equ	0xFDF
  3229                           postinc2	equ	0xFDE
  3230                           postdec2	equ	0xFDD
  3231                           fsr2h	equ	0xFDA
  3232                           fsr2l	equ	0xFD9
  3233                           status	equ	0xFD8
  3234                           
  3235 ;; *************** function _getTime *****************
  3236 ;; Defined at:
  3237 ;;		line 77 in file "modules.c"
  3238 ;; Parameters:    Size  Location     Type
  3239 ;;  time            2    3[BANK0 ] PTR unsigned char 
  3240 ;;		 -> time(7), 
  3241 ;; Auto vars:     Size  Location     Type
  3242 ;;  i               1    5[BANK0 ] unsigned char 
  3243 ;; Return value:  Size  Location     Type
  3244 ;;                  1    wreg      void 
  3245 ;; Registers used:
  3246 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3247 ;; Tracked objects:
  3248 ;;		On entry : 0/0
  3249 ;;		On exit  : 0/0
  3250 ;;		Unchanged: 0/0
  3251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3252 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3253 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3255 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3256 ;;Total ram usage:        3 bytes
  3257 ;; Hardware stack levels used:    1
  3258 ;; Hardware stack levels required when called:    8
  3259 ;; This function calls:
  3260 ;;		_I2C_Master_Read
  3261 ;;		_I2C_Master_Start
  3262 ;;		_I2C_Master_Stop
  3263 ;;		_I2C_Master_Write
  3264 ;; This function is called by:
  3265 ;;		_showRTC
  3266 ;; This function uses a non-reentrant model
  3267 ;;
  3268                           
  3269                           	psect	text10
  3270  00180A                     __ptext10:
  3271                           	opt stack 0
  3272  00180A                     _getTime:
  3273                           	opt stack 21
  3274                           
  3275                           ;modules.c: 78: (INTCONbits.GIE = 0);
  3276                           
  3277                           ;incstack = 0
  3278  00180A  9EF2               	bcf	intcon,7,c	;volatile
  3279                           
  3280                           ;modules.c: 82: I2C_Master_Start();
  3281  00180C  ECF6  F010         	call	_I2C_Master_Start	;wreg free
  3282                           
  3283                           ;modules.c: 83: I2C_Master_Write(0b11010000);
  3284  001810  0E00               	movlw	0
  3285  001812  0100               	movlb	0	; () banked
  3286  001814  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3287  001816  0ED0               	movlw	208
  3288  001818  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3289  00181A  ECE0  F010         	call	_I2C_Master_Write	;wreg free
  3290                           
  3291                           ;modules.c: 84: I2C_Master_Write(0x00);
  3292  00181E  0E00               	movlw	0
  3293  001820  0100               	movlb	0	; () banked
  3294  001822  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3295  001824  0E00               	movlw	0
  3296  001826  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3297  001828  ECE0  F010         	call	_I2C_Master_Write	;wreg free
  3298                           
  3299                           ;modules.c: 85: I2C_Master_Stop();
  3300  00182C  ECF2  F010         	call	_I2C_Master_Stop	;wreg free
  3301                           
  3302                           ;modules.c: 88: I2C_Master_Start();
  3303  001830  ECF6  F010         	call	_I2C_Master_Start	;wreg free
  3304                           
  3305                           ;modules.c: 89: I2C_Master_Write(0b11010001);
  3306  001834  0E00               	movlw	0
  3307  001836  0100               	movlb	0	; () banked
  3308  001838  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3309  00183A  0ED1               	movlw	209
  3310  00183C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3311  00183E  ECE0  F010         	call	_I2C_Master_Write	;wreg free
  3312                           
  3313                           ;modules.c: 90: for (unsigned char i = 0; i < 0x06; i++) {
  3314  001842  0E00               	movlw	0
  3315  001844  0100               	movlb	0	; () banked
  3316  001846  6F85               	movwf	getTime@i& (0+255),b
  3317  001848                     l3856:
  3318                           
  3319                           ; BSR set to: 0
  3320  001848  0E05               	movlw	5
  3321  00184A  0100               	movlb	0	; () banked
  3322  00184C  6585               	cpfsgt	getTime@i& (0+255),b
  3323  00184E  D001               	goto	l3860
  3324  001850  D012               	goto	l3866
  3325  001852                     l3860:
  3326                           
  3327                           ; BSR set to: 0
  3328                           ;modules.c: 91: time[i] = I2C_Master_Read(1);
  3329  001852  0100               	movlb	0	; () banked
  3330  001854  5185               	movf	getTime@i& (0+255),w,b
  3331  001856  0D01               	mullw	1
  3332  001858  50F3               	movf	prodl,w,c
  3333  00185A  0100               	movlb	0	; () banked
  3334  00185C  2583               	addwf	getTime@time& (0+255),w,b
  3335  00185E  6ED9               	movwf	fsr2l,c
  3336  001860  50F4               	movf	prodh,w,c
  3337  001862  0100               	movlb	0	; () banked
  3338  001864  2184               	addwfc	(getTime@time+1)& (0+255),w,b
  3339  001866  6EDA               	movwf	fsr2h,c
  3340  001868  0E01               	movlw	1
  3341  00186A  ECB2  F00F         	call	_I2C_Master_Read
  3342  00186E  6EDF               	movwf	indf2,c
  3343  001870  0100               	movlb	0	; () banked
  3344  001872  2B85               	incf	getTime@i& (0+255),f,b
  3345  001874  D7E9               	goto	l3856
  3346  001876                     l3866:
  3347                           
  3348                           ; BSR set to: 0
  3349                           ;modules.c: 92: }
  3350                           ;modules.c: 93: time[6] = I2C_Master_Read(0);
  3351  001876  0100               	movlb	0	; () banked
  3352  001878  EE20 F006          	lfsr	2,6
  3353  00187C  5183               	movf	getTime@time& (0+255),w,b
  3354  00187E  26D9               	addwf	fsr2l,f,c
  3355  001880  5184               	movf	(getTime@time+1)& (0+255),w,b
  3356  001882  22DA               	addwfc	fsr2h,f,c
  3357  001884  0E00               	movlw	0
  3358  001886  ECB2  F00F         	call	_I2C_Master_Read
  3359  00188A  6EDF               	movwf	indf2,c
  3360                           
  3361                           ;modules.c: 94: I2C_Master_Stop();
  3362  00188C  ECF2  F010         	call	_I2C_Master_Stop	;wreg free
  3363                           
  3364                           ;modules.c: 95: (INTCONbits.GIE = 1);
  3365  001890  8EF2               	bsf	intcon,7,c	;volatile
  3366  001892  0012               	return		;funcret
  3367  001894                     __end_of_getTime:
  3368                           	opt stack 0
  3369                           tblptru	equ	0xFF8
  3370                           tblptrh	equ	0xFF7
  3371                           tblptrl	equ	0xFF6
  3372                           tablat	equ	0xFF5
  3373                           prodh	equ	0xFF4
  3374                           prodl	equ	0xFF3
  3375                           intcon	equ	0xFF2
  3376                           intcon3	equ	0xFF0
  3377                           postinc0	equ	0xFEE
  3378                           wreg	equ	0xFE8
  3379                           indf2	equ	0xFDF
  3380                           postinc2	equ	0xFDE
  3381                           postdec2	equ	0xFDD
  3382                           fsr2h	equ	0xFDA
  3383                           fsr2l	equ	0xFD9
  3384                           status	equ	0xFD8
  3385                           
  3386 ;; *************** function _I2C_Master_Write *****************
  3387 ;; Defined at:
  3388 ;;		line 42 in file "I2C.c"
  3389 ;; Parameters:    Size  Location     Type
  3390 ;;  d               2    1[BANK0 ] unsigned int 
  3391 ;; Auto vars:     Size  Location     Type
  3392 ;;		None
  3393 ;; Return value:  Size  Location     Type
  3394 ;;                  1    wreg      void 
  3395 ;; Registers used:
  3396 ;;		wreg, status,2, status,0, cstack
  3397 ;; Tracked objects:
  3398 ;;		On entry : 0/0
  3399 ;;		On exit  : 0/0
  3400 ;;		Unchanged: 0/0
  3401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3402 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3405 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3406 ;;Total ram usage:        2 bytes
  3407 ;; Hardware stack levels used:    1
  3408 ;; Hardware stack levels required when called:    7
  3409 ;; This function calls:
  3410 ;;		_I2C_Master_Wait
  3411 ;; This function is called by:
  3412 ;;		_getTime
  3413 ;; This function uses a non-reentrant model
  3414 ;;
  3415                           
  3416                           	psect	text11
  3417  0021C0                     __ptext11:
  3418                           	opt stack 0
  3419  0021C0                     _I2C_Master_Write:
  3420                           	opt stack 21
  3421                           
  3422                           ;I2C.c: 43: I2C_Master_Wait();
  3423                           
  3424                           ;incstack = 0
  3425  0021C0  ECB1  F010         	call	_I2C_Master_Wait	;wreg free
  3426                           
  3427                           ;I2C.c: 44: SSPBUF = d;
  3428  0021C4  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  3429  0021C8  0012               	return		;funcret
  3430  0021CA                     __end_of_I2C_Master_Write:
  3431                           	opt stack 0
  3432                           tblptru	equ	0xFF8
  3433                           tblptrh	equ	0xFF7
  3434                           tblptrl	equ	0xFF6
  3435                           tablat	equ	0xFF5
  3436                           prodh	equ	0xFF4
  3437                           prodl	equ	0xFF3
  3438                           intcon	equ	0xFF2
  3439                           intcon3	equ	0xFF0
  3440                           postinc0	equ	0xFEE
  3441                           wreg	equ	0xFE8
  3442                           indf2	equ	0xFDF
  3443                           postinc2	equ	0xFDE
  3444                           postdec2	equ	0xFDD
  3445                           fsr2h	equ	0xFDA
  3446                           fsr2l	equ	0xFD9
  3447                           status	equ	0xFD8
  3448                           
  3449 ;; *************** function _I2C_Master_Stop *****************
  3450 ;; Defined at:
  3451 ;;		line 37 in file "I2C.c"
  3452 ;; Parameters:    Size  Location     Type
  3453 ;;		None
  3454 ;; Auto vars:     Size  Location     Type
  3455 ;;		None
  3456 ;; Return value:  Size  Location     Type
  3457 ;;                  1    wreg      void 
  3458 ;; Registers used:
  3459 ;;		wreg, status,2, status,0, cstack
  3460 ;; Tracked objects:
  3461 ;;		On entry : 0/0
  3462 ;;		On exit  : 0/0
  3463 ;;		Unchanged: 0/0
  3464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3468 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3469 ;;Total ram usage:        0 bytes
  3470 ;; Hardware stack levels used:    1
  3471 ;; Hardware stack levels required when called:    7
  3472 ;; This function calls:
  3473 ;;		_I2C_Master_Wait
  3474 ;; This function is called by:
  3475 ;;		_getTime
  3476 ;; This function uses a non-reentrant model
  3477 ;;
  3478                           
  3479                           	psect	text12
  3480  0021E4                     __ptext12:
  3481                           	opt stack 0
  3482  0021E4                     _I2C_Master_Stop:
  3483                           	opt stack 21
  3484                           
  3485                           ;I2C.c: 38: I2C_Master_Wait();
  3486                           
  3487                           ;incstack = 0
  3488  0021E4  ECB1  F010         	call	_I2C_Master_Wait	;wreg free
  3489                           
  3490                           ;I2C.c: 39: PEN = 1;
  3491  0021E8  84C5               	bsf	4037,2,c	;volatile
  3492  0021EA  0012               	return		;funcret
  3493  0021EC                     __end_of_I2C_Master_Stop:
  3494                           	opt stack 0
  3495                           tblptru	equ	0xFF8
  3496                           tblptrh	equ	0xFF7
  3497                           tblptrl	equ	0xFF6
  3498                           tablat	equ	0xFF5
  3499                           prodh	equ	0xFF4
  3500                           prodl	equ	0xFF3
  3501                           intcon	equ	0xFF2
  3502                           intcon3	equ	0xFF0
  3503                           postinc0	equ	0xFEE
  3504                           wreg	equ	0xFE8
  3505                           indf2	equ	0xFDF
  3506                           postinc2	equ	0xFDE
  3507                           postdec2	equ	0xFDD
  3508                           fsr2h	equ	0xFDA
  3509                           fsr2l	equ	0xFD9
  3510                           status	equ	0xFD8
  3511                           
  3512 ;; *************** function _I2C_Master_Start *****************
  3513 ;; Defined at:
  3514 ;;		line 27 in file "I2C.c"
  3515 ;; Parameters:    Size  Location     Type
  3516 ;;		None
  3517 ;; Auto vars:     Size  Location     Type
  3518 ;;		None
  3519 ;; Return value:  Size  Location     Type
  3520 ;;                  1    wreg      void 
  3521 ;; Registers used:
  3522 ;;		wreg, status,2, status,0, cstack
  3523 ;; Tracked objects:
  3524 ;;		On entry : 0/0
  3525 ;;		On exit  : 0/0
  3526 ;;		Unchanged: 0/0
  3527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3531 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3532 ;;Total ram usage:        0 bytes
  3533 ;; Hardware stack levels used:    1
  3534 ;; Hardware stack levels required when called:    7
  3535 ;; This function calls:
  3536 ;;		_I2C_Master_Wait
  3537 ;; This function is called by:
  3538 ;;		_getTime
  3539 ;; This function uses a non-reentrant model
  3540 ;;
  3541                           
  3542                           	psect	text13
  3543  0021EC                     __ptext13:
  3544                           	opt stack 0
  3545  0021EC                     _I2C_Master_Start:
  3546                           	opt stack 21
  3547                           
  3548                           ;I2C.c: 28: I2C_Master_Wait();
  3549                           
  3550                           ;incstack = 0
  3551  0021EC  ECB1  F010         	call	_I2C_Master_Wait	;wreg free
  3552                           
  3553                           ;I2C.c: 29: SEN = 1;
  3554  0021F0  80C5               	bsf	4037,0,c	;volatile
  3555  0021F2  0012               	return		;funcret
  3556  0021F4                     __end_of_I2C_Master_Start:
  3557                           	opt stack 0
  3558                           tblptru	equ	0xFF8
  3559                           tblptrh	equ	0xFF7
  3560                           tblptrl	equ	0xFF6
  3561                           tablat	equ	0xFF5
  3562                           prodh	equ	0xFF4
  3563                           prodl	equ	0xFF3
  3564                           intcon	equ	0xFF2
  3565                           intcon3	equ	0xFF0
  3566                           postinc0	equ	0xFEE
  3567                           wreg	equ	0xFE8
  3568                           indf2	equ	0xFDF
  3569                           postinc2	equ	0xFDE
  3570                           postdec2	equ	0xFDD
  3571                           fsr2h	equ	0xFDA
  3572                           fsr2l	equ	0xFD9
  3573                           status	equ	0xFD8
  3574                           
  3575 ;; *************** function _I2C_Master_Read *****************
  3576 ;; Defined at:
  3577 ;;		line 47 in file "I2C.c"
  3578 ;; Parameters:    Size  Location     Type
  3579 ;;  a               1    wreg     unsigned char 
  3580 ;; Auto vars:     Size  Location     Type
  3581 ;;  a               1    1[BANK0 ] unsigned char 
  3582 ;;  temp            1    2[BANK0 ] unsigned char 
  3583 ;; Return value:  Size  Location     Type
  3584 ;;                  1    wreg      unsigned char 
  3585 ;; Registers used:
  3586 ;;		wreg, status,2, status,0, cstack
  3587 ;; Tracked objects:
  3588 ;;		On entry : 0/0
  3589 ;;		On exit  : 0/0
  3590 ;;		Unchanged: 0/0
  3591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3592 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3593 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3595 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3596 ;;Total ram usage:        2 bytes
  3597 ;; Hardware stack levels used:    1
  3598 ;; Hardware stack levels required when called:    7
  3599 ;; This function calls:
  3600 ;;		_I2C_Master_Wait
  3601 ;; This function is called by:
  3602 ;;		_getTime
  3603 ;; This function uses a non-reentrant model
  3604 ;;
  3605                           
  3606                           	psect	text14
  3607  001F64                     __ptext14:
  3608                           	opt stack 0
  3609  001F64                     _I2C_Master_Read:
  3610                           	opt stack 21
  3611                           
  3612                           ;incstack = 0
  3613                           ;I2C_Master_Read@a stored from wreg
  3614  001F64  0100               	movlb	0	; () banked
  3615  001F66  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  3616                           
  3617                           ;I2C.c: 48: unsigned char temp;
  3618                           ;I2C.c: 49: I2C_Master_Wait();
  3619  001F68  ECB1  F010         	call	_I2C_Master_Wait	;wreg free
  3620                           
  3621                           ;I2C.c: 50: RCEN = 1;
  3622  001F6C  86C5               	bsf	4037,3,c	;volatile
  3623                           
  3624                           ;I2C.c: 51: I2C_Master_Wait();
  3625  001F6E  ECB1  F010         	call	_I2C_Master_Wait	;wreg free
  3626                           
  3627                           ;I2C.c: 52: temp = SSPBUF;
  3628  001F72  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  3629                           
  3630                           ;I2C.c: 53: I2C_Master_Wait();
  3631  001F76  ECB1  F010         	call	_I2C_Master_Wait	;wreg free
  3632                           
  3633                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
  3634  001F7A  0100               	movlb	0	; () banked
  3635  001F7C  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  3636  001F7E  0100               	movlb	0	; () banked
  3637  001F80  A4D8               	btfss	status,2,c
  3638  001F82  D002               	goto	u2000
  3639  001F84  8AC5               	bsf	4037,5,c	;volatile
  3640  001F86  D001               	goto	l3192
  3641  001F88                     u2000:
  3642  001F88  9AC5               	bcf	4037,5,c	;volatile
  3643  001F8A                     l3192:
  3644                           
  3645                           ;I2C.c: 55: ACKEN = 1;
  3646  001F8A  88C5               	bsf	4037,4,c	;volatile
  3647                           
  3648                           ;I2C.c: 56: return temp;
  3649  001F8C  0100               	movlb	0	; () banked
  3650  001F8E  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  3651  001F90  0012               	return	
  3652  001F92                     __end_of_I2C_Master_Read:
  3653                           	opt stack 0
  3654                           tblptru	equ	0xFF8
  3655                           tblptrh	equ	0xFF7
  3656                           tblptrl	equ	0xFF6
  3657                           tablat	equ	0xFF5
  3658                           prodh	equ	0xFF4
  3659                           prodl	equ	0xFF3
  3660                           intcon	equ	0xFF2
  3661                           intcon3	equ	0xFF0
  3662                           postinc0	equ	0xFEE
  3663                           wreg	equ	0xFE8
  3664                           indf2	equ	0xFDF
  3665                           postinc2	equ	0xFDE
  3666                           postdec2	equ	0xFDD
  3667                           fsr2h	equ	0xFDA
  3668                           fsr2l	equ	0xFD9
  3669                           status	equ	0xFD8
  3670                           
  3671 ;; *************** function _I2C_Master_Wait *****************
  3672 ;; Defined at:
  3673 ;;		line 23 in file "I2C.c"
  3674 ;; Parameters:    Size  Location     Type
  3675 ;;		None
  3676 ;; Auto vars:     Size  Location     Type
  3677 ;;		None
  3678 ;; Return value:  Size  Location     Type
  3679 ;;                  1    wreg      void 
  3680 ;; Registers used:
  3681 ;;		wreg, status,2, status,0
  3682 ;; Tracked objects:
  3683 ;;		On entry : 0/0
  3684 ;;		On exit  : 0/0
  3685 ;;		Unchanged: 0/0
  3686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3689 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3690 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3691 ;;Total ram usage:        1 bytes
  3692 ;; Hardware stack levels used:    1
  3693 ;; Hardware stack levels required when called:    6
  3694 ;; This function calls:
  3695 ;;		Nothing
  3696 ;; This function is called by:
  3697 ;;		_I2C_Master_Start
  3698 ;;		_I2C_Master_Stop
  3699 ;;		_I2C_Master_Write
  3700 ;;		_I2C_Master_Read
  3701 ;; This function uses a non-reentrant model
  3702 ;;
  3703                           
  3704                           	psect	text15
  3705  002162                     __ptext15:
  3706                           	opt stack 0
  3707  002162                     _I2C_Master_Wait:
  3708                           	opt stack 21
  3709  002162                     l373:
  3710  002162  B4C7               	btfsc	4039,2,c	;volatile
  3711  002164  D7FE               	goto	l373
  3712  002166  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  3713  00216A  0E1F               	movlw	31
  3714  00216C  0100               	movlb	0	; () banked
  3715  00216E  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  3716  002170  B4D8               	btfsc	status,2,c
  3717  002172  0012               	return	
  3718  002174  D7F6               	goto	l373
  3719  002176                     __end_of_I2C_Master_Wait:
  3720                           	opt stack 0
  3721                           tblptru	equ	0xFF8
  3722                           tblptrh	equ	0xFF7
  3723                           tblptrl	equ	0xFF6
  3724                           tablat	equ	0xFF5
  3725                           prodh	equ	0xFF4
  3726                           prodl	equ	0xFF3
  3727                           intcon	equ	0xFF2
  3728                           intcon3	equ	0xFF0
  3729                           postinc0	equ	0xFEE
  3730                           wreg	equ	0xFE8
  3731                           indf2	equ	0xFDF
  3732                           postinc2	equ	0xFDE
  3733                           postdec2	equ	0xFDD
  3734                           fsr2h	equ	0xFDA
  3735                           fsr2l	equ	0xFD9
  3736                           status	equ	0xFD8
  3737                           
  3738 ;; *************** function _initialize *****************
  3739 ;; Defined at:
  3740 ;;		line 18 in file "main.c"
  3741 ;; Parameters:    Size  Location     Type
  3742 ;;		None
  3743 ;; Auto vars:     Size  Location     Type
  3744 ;;		None
  3745 ;; Return value:  Size  Location     Type
  3746 ;;                  1    wreg      void 
  3747 ;; Registers used:
  3748 ;;		wreg, status,2, status,0, cstack
  3749 ;; Tracked objects:
  3750 ;;		On entry : 0/0
  3751 ;;		On exit  : 0/0
  3752 ;;		Unchanged: 0/0
  3753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3756 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3757 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3758 ;;Total ram usage:        1 bytes
  3759 ;; Hardware stack levels used:    1
  3760 ;; Hardware stack levels required when called:    9
  3761 ;; This function calls:
  3762 ;;		_I2C_Master_Init
  3763 ;;		_initLCD
  3764 ;;		_initLatest
  3765 ;;		_lcdInst
  3766 ;; This function is called by:
  3767 ;;		_main
  3768 ;; This function uses a non-reentrant model
  3769 ;;
  3770                           
  3771                           	psect	text16
  3772  00199C                     __ptext16:
  3773                           	opt stack 0
  3774  00199C                     _initialize:
  3775                           	opt stack 21
  3776                           
  3777                           ;main.c: 19: TRISA = 0xFF;
  3778                           
  3779                           ; BSR set to: 0
  3780                           ;incstack = 0
  3781  00199C  6892               	setf	3986,c	;volatile
  3782                           
  3783                           ;main.c: 20: TRISB = 0xFF;
  3784  00199E  6893               	setf	3987,c	;volatile
  3785                           
  3786                           ;main.c: 21: TRISC = 0x00;
  3787  0019A0  0E00               	movlw	0
  3788  0019A2  6E94               	movwf	3988,c	;volatile
  3789                           
  3790                           ;main.c: 22: TRISD = 0x00;
  3791  0019A4  0E00               	movlw	0
  3792  0019A6  6E95               	movwf	3989,c	;volatile
  3793                           
  3794                           ;main.c: 23: TRISE = 0x00;
  3795  0019A8  0E00               	movlw	0
  3796  0019AA  6E96               	movwf	3990,c	;volatile
  3797                           
  3798                           ;main.c: 25: LATA = 0x00;
  3799  0019AC  0E00               	movlw	0
  3800  0019AE  6E89               	movwf	3977,c	;volatile
  3801                           
  3802                           ;main.c: 26: LATB = 0x00;
  3803  0019B0  0E00               	movlw	0
  3804  0019B2  6E8A               	movwf	3978,c	;volatile
  3805                           
  3806                           ;main.c: 27: LATC = 0x00;
  3807  0019B4  0E00               	movlw	0
  3808  0019B6  6E8B               	movwf	3979,c	;volatile
  3809                           
  3810                           ;main.c: 28: LATD = 0x00;
  3811  0019B8  0E00               	movlw	0
  3812  0019BA  6E8C               	movwf	3980,c	;volatile
  3813                           
  3814                           ;main.c: 29: LATE = 0x00;
  3815  0019BC  0E00               	movlw	0
  3816  0019BE  6E8D               	movwf	3981,c	;volatile
  3817                           
  3818                           ;main.c: 31: ADCON0 = 0x00;
  3819  0019C0  0E00               	movlw	0
  3820  0019C2  6EC2               	movwf	4034,c	;volatile
  3821                           
  3822                           ;main.c: 32: ADCON1 = 0x0C;
  3823  0019C4  0E0C               	movlw	12
  3824  0019C6  6EC1               	movwf	4033,c	;volatile
  3825                           
  3826                           ;main.c: 33: CVRCON = 0x00;
  3827  0019C8  0E00               	movlw	0
  3828  0019CA  6EB5               	movwf	4021,c	;volatile
  3829                           
  3830                           ;main.c: 34: ADFM = 1;
  3831  0019CC  8EC0               	bsf	4032,7,c	;volatile
  3832                           
  3833                           ;main.c: 36: initLCD();
  3834  0019CE  EC1C  F00F         	call	_initLCD	;wreg free
  3835                           
  3836                           ;main.c: 37: lcdInst(0x01);;
  3837  0019D2  0E01               	movlw	1
  3838  0019D4  ECCC  F010         	call	_lcdInst
  3839                           
  3840                           ;main.c: 38: _delay((unsigned long)((50)*(8000000/4000.0)));
  3841  0019D8  0E82               	movlw	130
  3842  0019DA  0100               	movlb	0	; () banked
  3843  0019DC  6F95               	movwf	??_initialize& (0+255),b
  3844  0019DE  0EDD               	movlw	221
  3845  0019E0                     u3077:
  3846  0019E0  2EE8               	decfsz	wreg,f,c
  3847  0019E2  D7FE               	bra	u3077
  3848  0019E4  2F95               	decfsz	??_initialize& (0+255),f,b
  3849  0019E6  D7FC               	bra	u3077
  3850  0019E8  D000               	nop2	
  3851                           
  3852                           ;main.c: 39: I2C_Master_Init(10000);
  3853  0019EA  0E10               	movlw	16
  3854  0019EC  0100               	movlb	0	; () banked
  3855  0019EE  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3856  0019F0  0E27               	movlw	39
  3857  0019F2  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3858  0019F4  0E00               	movlw	0
  3859  0019F6  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3860  0019F8  0E00               	movlw	0
  3861  0019FA  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3862  0019FC  EC26  F00E         	call	_I2C_Master_Init	;wreg free
  3863                           
  3864                           ;main.c: 41: _delay((unsigned long)((50)*(8000000/4000.0)));
  3865  001A00  0E82               	movlw	130
  3866  001A02  0100               	movlb	0	; () banked
  3867  001A04  6F95               	movwf	??_initialize& (0+255),b
  3868  001A06  0EDD               	movlw	221
  3869  001A08                     u3087:
  3870  001A08  2EE8               	decfsz	wreg,f,c
  3871  001A0A  D7FE               	bra	u3087
  3872  001A0C  2F95               	decfsz	??_initialize& (0+255),f,b
  3873  001A0E  D7FC               	bra	u3087
  3874  001A10  D000               	nop2	
  3875                           
  3876                           ;main.c: 42: initLatest();
  3877  001A12  EC3F  F010         	call	_initLatest	;wreg free
  3878  001A16  0012               	return		;funcret
  3879  001A18                     __end_of_initialize:
  3880                           	opt stack 0
  3881                           tblptru	equ	0xFF8
  3882                           tblptrh	equ	0xFF7
  3883                           tblptrl	equ	0xFF6
  3884                           tablat	equ	0xFF5
  3885                           prodh	equ	0xFF4
  3886                           prodl	equ	0xFF3
  3887                           intcon	equ	0xFF2
  3888                           intcon3	equ	0xFF0
  3889                           postinc0	equ	0xFEE
  3890                           wreg	equ	0xFE8
  3891                           indf2	equ	0xFDF
  3892                           postinc2	equ	0xFDE
  3893                           postdec2	equ	0xFDD
  3894                           fsr2h	equ	0xFDA
  3895                           fsr2l	equ	0xFD9
  3896                           status	equ	0xFD8
  3897                           
  3898 ;; *************** function _initLatest *****************
  3899 ;; Defined at:
  3900 ;;		line 9 in file "eeprom.c"
  3901 ;; Parameters:    Size  Location     Type
  3902 ;;		None
  3903 ;; Auto vars:     Size  Location     Type
  3904 ;;		None
  3905 ;; Return value:  Size  Location     Type
  3906 ;;                  1    wreg      void 
  3907 ;; Registers used:
  3908 ;;		wreg, status,2, status,0, cstack
  3909 ;; Tracked objects:
  3910 ;;		On entry : 0/0
  3911 ;;		On exit  : 0/0
  3912 ;;		Unchanged: 0/0
  3913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3917 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3918 ;;Total ram usage:        0 bytes
  3919 ;; Hardware stack levels used:    1
  3920 ;; Hardware stack levels required when called:    7
  3921 ;; This function calls:
  3922 ;;		_ReadEE
  3923 ;; This function is called by:
  3924 ;;		_initialize
  3925 ;; This function uses a non-reentrant model
  3926 ;;
  3927                           
  3928                           	psect	text17
  3929  00207E                     __ptext17:
  3930                           	opt stack 0
  3931  00207E                     _initLatest:
  3932                           	opt stack 22
  3933                           
  3934                           ;eeprom.c: 10: Latest = ReadEE(160);
  3935                           
  3936                           ;incstack = 0
  3937  00207E  0E00               	movlw	0
  3938  002080  0100               	movlb	0	; () banked
  3939  002082  6F81               	movwf	(ReadEE@address+1)& (0+255),b
  3940  002084  0EA0               	movlw	160
  3941  002086  6F80               	movwf	ReadEE@address& (0+255),b
  3942  002088  EC9A  F010         	call	_ReadEE	;wreg free
  3943  00208C  0100               	movlb	0	; () banked
  3944  00208E  6FC6               	movwf	_Latest& (0+255),b
  3945                           
  3946                           ; BSR set to: 0
  3947                           ;eeprom.c: 11: if (Latest > 3) {
  3948  002090  0E03               	movlw	3
  3949  002092  0100               	movlb	0	; () banked
  3950  002094  65C6               	cpfsgt	_Latest& (0+255),b
  3951  002096  0012               	return	
  3952                           
  3953                           ; BSR set to: 0
  3954                           ;eeprom.c: 12: Latest = 0;
  3955  002098  0E00               	movlw	0
  3956  00209A  0100               	movlb	0	; () banked
  3957  00209C  6FC6               	movwf	_Latest& (0+255),b
  3958  00209E  0012               	return	
  3959  0020A0                     __end_of_initLatest:
  3960                           	opt stack 0
  3961                           tblptru	equ	0xFF8
  3962                           tblptrh	equ	0xFF7
  3963                           tblptrl	equ	0xFF6
  3964                           tablat	equ	0xFF5
  3965                           prodh	equ	0xFF4
  3966                           prodl	equ	0xFF3
  3967                           intcon	equ	0xFF2
  3968                           intcon3	equ	0xFF0
  3969                           postinc0	equ	0xFEE
  3970                           wreg	equ	0xFE8
  3971                           indf2	equ	0xFDF
  3972                           postinc2	equ	0xFDE
  3973                           postdec2	equ	0xFDD
  3974                           fsr2h	equ	0xFDA
  3975                           fsr2l	equ	0xFD9
  3976                           status	equ	0xFD8
  3977                           
  3978 ;; *************** function _ReadEE *****************
  3979 ;; Defined at:
  3980 ;;		line 16 in file "eeprom.c"
  3981 ;; Parameters:    Size  Location     Type
  3982 ;;  address         2    0[BANK0 ] unsigned int 
  3983 ;; Auto vars:     Size  Location     Type
  3984 ;;		None
  3985 ;; Return value:  Size  Location     Type
  3986 ;;                  1    wreg      unsigned char 
  3987 ;; Registers used:
  3988 ;;		wreg, status,2
  3989 ;; Tracked objects:
  3990 ;;		On entry : 0/0
  3991 ;;		On exit  : 0/0
  3992 ;;		Unchanged: 0/0
  3993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3994 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3997 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3998 ;;Total ram usage:        2 bytes
  3999 ;; Hardware stack levels used:    1
  4000 ;; Hardware stack levels required when called:    6
  4001 ;; This function calls:
  4002 ;;		Nothing
  4003 ;; This function is called by:
  4004 ;;		_initLatest
  4005 ;; This function uses a non-reentrant model
  4006 ;;
  4007                           
  4008                           	psect	text18
  4009  002134                     __ptext18:
  4010                           	opt stack 0
  4011  002134                     _ReadEE:
  4012                           	opt stack 22
  4013                           
  4014                           ;eeprom.c: 19: EEADRH = (unsigned char) (address >> 8);
  4015                           
  4016                           ; BSR set to: 0
  4017                           ;incstack = 0
  4018  002134  0100               	movlb	0	; () banked
  4019  002136  5181               	movf	(ReadEE@address+1)& (0+255),w,b
  4020  002138  6EAA               	movwf	4010,c	;volatile
  4021                           
  4022                           ; BSR set to: 0
  4023                           ;eeprom.c: 20: EEADR = (unsigned char) address;
  4024  00213A  C080  FFA9         	movff	ReadEE@address,4009	;volatile
  4025                           
  4026                           ; BSR set to: 0
  4027                           ;eeprom.c: 22: EECON1bits.EEPGD = 0;
  4028  00213E  9EA6               	bcf	4006,7,c	;volatile
  4029                           
  4030                           ; BSR set to: 0
  4031                           ;eeprom.c: 23: EECON1bits.CFGS = 0;
  4032  002140  9CA6               	bcf	4006,6,c	;volatile
  4033                           
  4034                           ; BSR set to: 0
  4035                           ;eeprom.c: 24: EECON1bits.RD = 1;
  4036  002142  80A6               	bsf	4006,0,c	;volatile
  4037  002144                     l421:
  4038  002144  B0A6               	btfsc	4006,0,c	;volatile
  4039  002146  D7FE               	goto	l421
  4040                           
  4041                           ;eeprom.c: 30: return EEDATA;
  4042  002148  50A8               	movf	4008,w,c	;volatile
  4043  00214A  0012               	return	
  4044  00214C                     __end_of_ReadEE:
  4045                           	opt stack 0
  4046                           tblptru	equ	0xFF8
  4047                           tblptrh	equ	0xFF7
  4048                           tblptrl	equ	0xFF6
  4049                           tablat	equ	0xFF5
  4050                           prodh	equ	0xFF4
  4051                           prodl	equ	0xFF3
  4052                           intcon	equ	0xFF2
  4053                           intcon3	equ	0xFF0
  4054                           postinc0	equ	0xFEE
  4055                           wreg	equ	0xFE8
  4056                           indf2	equ	0xFDF
  4057                           postinc2	equ	0xFDE
  4058                           postdec2	equ	0xFDD
  4059                           fsr2h	equ	0xFDA
  4060                           fsr2l	equ	0xFD9
  4061                           status	equ	0xFD8
  4062                           
  4063 ;; *************** function _initLCD *****************
  4064 ;; Defined at:
  4065 ;;		line 9 in file "lcd.c"
  4066 ;; Parameters:    Size  Location     Type
  4067 ;;		None
  4068 ;; Auto vars:     Size  Location     Type
  4069 ;;		None
  4070 ;; Return value:  Size  Location     Type
  4071 ;;                  1    wreg      void 
  4072 ;; Registers used:
  4073 ;;		wreg, status,2, status,0, cstack
  4074 ;; Tracked objects:
  4075 ;;		On entry : 0/0
  4076 ;;		On exit  : 0/0
  4077 ;;		Unchanged: 0/0
  4078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4081 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4082 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4083 ;;Total ram usage:        1 bytes
  4084 ;; Hardware stack levels used:    1
  4085 ;; Hardware stack levels required when called:    8
  4086 ;; This function calls:
  4087 ;;		_lcdInst
  4088 ;; This function is called by:
  4089 ;;		_initialize
  4090 ;; This function uses a non-reentrant model
  4091 ;;
  4092                           
  4093                           	psect	text19
  4094  001E38                     __ptext19:
  4095                           	opt stack 0
  4096  001E38                     _initLCD:
  4097                           	opt stack 21
  4098                           
  4099                           ;lcd.c: 10: _delay((unsigned long)((15)*(8000000/4000.0)));
  4100                           
  4101                           ;incstack = 0
  4102  001E38  0E27               	movlw	39
  4103  001E3A  0100               	movlb	0	; () banked
  4104  001E3C  6F83               	movwf	??_initLCD& (0+255),b
  4105  001E3E  0EF5               	movlw	245
  4106  001E40                     u3097:
  4107  001E40  2EE8               	decfsz	wreg,f,c
  4108  001E42  D7FE               	bra	u3097
  4109  001E44  2F83               	decfsz	??_initLCD& (0+255),f,b
  4110  001E46  D7FC               	bra	u3097
  4111                           
  4112                           ;lcd.c: 11: lcdInst(0b00110011);
  4113  001E48  0E33               	movlw	51
  4114  001E4A  ECCC  F010         	call	_lcdInst
  4115                           
  4116                           ;lcd.c: 12: lcdInst(0b00110010);
  4117  001E4E  0E32               	movlw	50
  4118  001E50  ECCC  F010         	call	_lcdInst
  4119                           
  4120                           ;lcd.c: 13: lcdInst(0b00101000);
  4121  001E54  0E28               	movlw	40
  4122  001E56  ECCC  F010         	call	_lcdInst
  4123                           
  4124                           ;lcd.c: 14: lcdInst(0b00001111);
  4125  001E5A  0E0F               	movlw	15
  4126  001E5C  ECCC  F010         	call	_lcdInst
  4127                           
  4128                           ;lcd.c: 15: lcdInst(0b00000110);
  4129  001E60  0E06               	movlw	6
  4130  001E62  ECCC  F010         	call	_lcdInst
  4131                           
  4132                           ;lcd.c: 16: lcdInst(0b00000001);
  4133  001E66  0E01               	movlw	1
  4134  001E68  ECCC  F010         	call	_lcdInst
  4135                           
  4136                           ;lcd.c: 17: _delay((unsigned long)((15)*(8000000/4000.0)));
  4137  001E6C  0E27               	movlw	39
  4138  001E6E  0100               	movlb	0	; () banked
  4139  001E70  6F83               	movwf	??_initLCD& (0+255),b
  4140  001E72  0EF5               	movlw	245
  4141  001E74                     u3107:
  4142  001E74  2EE8               	decfsz	wreg,f,c
  4143  001E76  D7FE               	bra	u3107
  4144  001E78  2F83               	decfsz	??_initLCD& (0+255),f,b
  4145  001E7A  D7FC               	bra	u3107
  4146  001E7C  0012               	return		;funcret
  4147  001E7E                     __end_of_initLCD:
  4148                           	opt stack 0
  4149                           tblptru	equ	0xFF8
  4150                           tblptrh	equ	0xFF7
  4151                           tblptrl	equ	0xFF6
  4152                           tablat	equ	0xFF5
  4153                           prodh	equ	0xFF4
  4154                           prodl	equ	0xFF3
  4155                           intcon	equ	0xFF2
  4156                           intcon3	equ	0xFF0
  4157                           postinc0	equ	0xFEE
  4158                           wreg	equ	0xFE8
  4159                           indf2	equ	0xFDF
  4160                           postinc2	equ	0xFDE
  4161                           postdec2	equ	0xFDD
  4162                           fsr2h	equ	0xFDA
  4163                           fsr2l	equ	0xFD9
  4164                           status	equ	0xFD8
  4165                           
  4166 ;; *************** function _lcdInst *****************
  4167 ;; Defined at:
  4168 ;;		line 20 in file "lcd.c"
  4169 ;; Parameters:    Size  Location     Type
  4170 ;;  data            1    wreg     unsigned char 
  4171 ;; Auto vars:     Size  Location     Type
  4172 ;;  data            1    2[BANK0 ] unsigned char 
  4173 ;; Return value:  Size  Location     Type
  4174 ;;                  1    wreg      void 
  4175 ;; Registers used:
  4176 ;;		wreg, status,2, status,0, cstack
  4177 ;; Tracked objects:
  4178 ;;		On entry : 0/0
  4179 ;;		On exit  : 0/0
  4180 ;;		Unchanged: 0/0
  4181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4183 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4185 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4186 ;;Total ram usage:        1 bytes
  4187 ;; Hardware stack levels used:    1
  4188 ;; Hardware stack levels required when called:    7
  4189 ;; This function calls:
  4190 ;;		_lcdNibble
  4191 ;; This function is called by:
  4192 ;;		_initialize
  4193 ;;		_initLCD
  4194 ;;		_line0
  4195 ;;		_line1
  4196 ;; This function uses a non-reentrant model
  4197 ;;
  4198                           
  4199                           	psect	text20
  4200  002198                     __ptext20:
  4201                           	opt stack 0
  4202  002198                     _lcdInst:
  4203                           	opt stack 21
  4204                           
  4205                           ;incstack = 0
  4206                           ;lcdInst@data stored from wreg
  4207  002198  0100               	movlb	0	; () banked
  4208  00219A  6F82               	movwf	lcdInst@data& (0+255),b
  4209                           
  4210                           ;lcd.c: 21: LATDbits.LATD2 = 0;
  4211  00219C  948C               	bcf	3980,2,c	;volatile
  4212                           
  4213                           ;lcd.c: 22: lcdNibble(data);
  4214  00219E  0100               	movlb	0	; () banked
  4215  0021A0  5182               	movf	lcdInst@data& (0+255),w,b
  4216  0021A2  ECC1  F00D         	call	_lcdNibble
  4217  0021A6  0012               	return		;funcret
  4218  0021A8                     __end_of_lcdInst:
  4219                           	opt stack 0
  4220                           tblptru	equ	0xFF8
  4221                           tblptrh	equ	0xFF7
  4222                           tblptrl	equ	0xFF6
  4223                           tablat	equ	0xFF5
  4224                           prodh	equ	0xFF4
  4225                           prodl	equ	0xFF3
  4226                           intcon	equ	0xFF2
  4227                           intcon3	equ	0xFF0
  4228                           postinc0	equ	0xFEE
  4229                           wreg	equ	0xFE8
  4230                           indf2	equ	0xFDF
  4231                           postinc2	equ	0xFDE
  4232                           postdec2	equ	0xFDD
  4233                           fsr2h	equ	0xFDA
  4234                           fsr2l	equ	0xFD9
  4235                           status	equ	0xFD8
  4236                           
  4237 ;; *************** function _lcdNibble *****************
  4238 ;; Defined at:
  4239 ;;		line 30 in file "lcd.c"
  4240 ;; Parameters:    Size  Location     Type
  4241 ;;  data            1    wreg     unsigned char 
  4242 ;; Auto vars:     Size  Location     Type
  4243 ;;  data            1    1[BANK0 ] unsigned char 
  4244 ;;  temp            1    0[BANK0 ] unsigned char 
  4245 ;; Return value:  Size  Location     Type
  4246 ;;                  1    wreg      void 
  4247 ;; Registers used:
  4248 ;;		wreg, status,2, status,0
  4249 ;; Tracked objects:
  4250 ;;		On entry : 0/0
  4251 ;;		On exit  : 0/0
  4252 ;;		Unchanged: 0/0
  4253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4255 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4257 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4258 ;;Total ram usage:        2 bytes
  4259 ;; Hardware stack levels used:    1
  4260 ;; Hardware stack levels required when called:    6
  4261 ;; This function calls:
  4262 ;;		Nothing
  4263 ;; This function is called by:
  4264 ;;		_lcdInst
  4265 ;;		_putch
  4266 ;; This function uses a non-reentrant model
  4267 ;;
  4268                           
  4269                           	psect	text21
  4270  001B82                     __ptext21:
  4271                           	opt stack 0
  4272  001B82                     _lcdNibble:
  4273                           	opt stack 21
  4274                           
  4275                           ;incstack = 0
  4276                           ;lcdNibble@data stored from wreg
  4277  001B82  0100               	movlb	0	; () banked
  4278  001B84  6F81               	movwf	lcdNibble@data& (0+255),b
  4279                           
  4280                           ;lcd.c: 32: char temp = data & 0xF0;
  4281  001B86  0100               	movlb	0	; () banked
  4282  001B88  5181               	movf	lcdNibble@data& (0+255),w,b
  4283  001B8A  0BF0               	andlw	240
  4284  001B8C  0100               	movlb	0	; () banked
  4285  001B8E  6F80               	movwf	lcdNibble@temp& (0+255),b
  4286                           
  4287                           ;lcd.c: 33: LATD = LATD & 0x0F;
  4288  001B90  508C               	movf	3980,w,c	;volatile
  4289  001B92  0B0F               	andlw	15
  4290  001B94  6E8C               	movwf	3980,c	;volatile
  4291                           
  4292                           ;lcd.c: 34: LATD = temp | LATD;
  4293  001B96  0100               	movlb	0	; () banked
  4294  001B98  5180               	movf	lcdNibble@temp& (0+255),w,b
  4295  001B9A  108C               	iorwf	3980,w,c	;volatile
  4296  001B9C  6E8C               	movwf	3980,c	;volatile
  4297                           
  4298                           ; BSR set to: 0
  4299                           ;lcd.c: 36: LATDbits.LATD3 = 0;
  4300  001B9E  968C               	bcf	3980,3,c	;volatile
  4301                           
  4302                           ; BSR set to: 0
  4303                           ;lcd.c: 37: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4304  001BA0  0E10               	movlw	16
  4305  001BA2                     u3117:
  4306  001BA2  2EE8               	decfsz	wreg,f,c
  4307  001BA4  D7FE               	bra	u3117
  4308  001BA6  D000               	nop2	
  4309                           
  4310                           ;lcd.c: 38: LATDbits.LATD3 = 1;
  4311  001BA8  868C               	bsf	3980,3,c	;volatile
  4312                           
  4313                           ;lcd.c: 39: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4314  001BAA  0E10               	movlw	16
  4315  001BAC                     u3127:
  4316  001BAC  2EE8               	decfsz	wreg,f,c
  4317  001BAE  D7FE               	bra	u3127
  4318  001BB0  D000               	nop2	
  4319                           
  4320                           ;lcd.c: 41: data = data << 4;
  4321  001BB2  0100               	movlb	0	; () banked
  4322  001BB4  3981               	swapf	lcdNibble@data& (0+255),w,b
  4323  001BB6  0BF0               	andlw	240
  4324  001BB8  0100               	movlb	0	; () banked
  4325  001BBA  6F81               	movwf	lcdNibble@data& (0+255),b
  4326                           
  4327                           ;lcd.c: 43: temp = data & 0xF0;
  4328  001BBC  0100               	movlb	0	; () banked
  4329  001BBE  5181               	movf	lcdNibble@data& (0+255),w,b
  4330  001BC0  0BF0               	andlw	240
  4331  001BC2  0100               	movlb	0	; () banked
  4332  001BC4  6F80               	movwf	lcdNibble@temp& (0+255),b
  4333                           
  4334                           ;lcd.c: 44: LATD = LATD & 0x0F;
  4335  001BC6  508C               	movf	3980,w,c	;volatile
  4336  001BC8  0B0F               	andlw	15
  4337  001BCA  6E8C               	movwf	3980,c	;volatile
  4338                           
  4339                           ;lcd.c: 45: LATD = temp | LATD;
  4340  001BCC  0100               	movlb	0	; () banked
  4341  001BCE  5180               	movf	lcdNibble@temp& (0+255),w,b
  4342  001BD0  108C               	iorwf	3980,w,c	;volatile
  4343  001BD2  6E8C               	movwf	3980,c	;volatile
  4344                           
  4345                           ; BSR set to: 0
  4346                           ;lcd.c: 47: LATDbits.LATD3 = 0;
  4347  001BD4  968C               	bcf	3980,3,c	;volatile
  4348                           
  4349                           ; BSR set to: 0
  4350                           ;lcd.c: 48: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4351  001BD6  0E10               	movlw	16
  4352  001BD8                     u3137:
  4353  001BD8  2EE8               	decfsz	wreg,f,c
  4354  001BDA  D7FE               	bra	u3137
  4355  001BDC  D000               	nop2	
  4356                           
  4357                           ;lcd.c: 49: LATDbits.LATD3 = 1;
  4358  001BDE  868C               	bsf	3980,3,c	;volatile
  4359                           
  4360                           ;lcd.c: 50: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4361  001BE0  0E10               	movlw	16
  4362  001BE2                     u3147:
  4363  001BE2  2EE8               	decfsz	wreg,f,c
  4364  001BE4  D7FE               	bra	u3147
  4365  001BE6  D000               	nop2	
  4366  001BE8  0012               	return		;funcret
  4367  001BEA                     __end_of_lcdNibble:
  4368                           	opt stack 0
  4369                           tblptru	equ	0xFF8
  4370                           tblptrh	equ	0xFF7
  4371                           tblptrl	equ	0xFF6
  4372                           tablat	equ	0xFF5
  4373                           prodh	equ	0xFF4
  4374                           prodl	equ	0xFF3
  4375                           intcon	equ	0xFF2
  4376                           intcon3	equ	0xFF0
  4377                           postinc0	equ	0xFEE
  4378                           wreg	equ	0xFE8
  4379                           indf2	equ	0xFDF
  4380                           postinc2	equ	0xFDE
  4381                           postdec2	equ	0xFDD
  4382                           fsr2h	equ	0xFDA
  4383                           fsr2l	equ	0xFD9
  4384                           status	equ	0xFD8
  4385                           
  4386 ;; *************** function _I2C_Master_Init *****************
  4387 ;; Defined at:
  4388 ;;		line 13 in file "I2C.c"
  4389 ;; Parameters:    Size  Location     Type
  4390 ;;  c               4   13[BANK0 ] const unsigned long 
  4391 ;; Auto vars:     Size  Location     Type
  4392 ;;		None
  4393 ;; Return value:  Size  Location     Type
  4394 ;;                  1    wreg      void 
  4395 ;; Registers used:
  4396 ;;		wreg, status,2, status,0, cstack
  4397 ;; Tracked objects:
  4398 ;;		On entry : 0/0
  4399 ;;		On exit  : 0/0
  4400 ;;		Unchanged: 0/0
  4401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4402 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4404 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4405 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4406 ;;Total ram usage:        8 bytes
  4407 ;; Hardware stack levels used:    1
  4408 ;; Hardware stack levels required when called:    7
  4409 ;; This function calls:
  4410 ;;		___lldiv
  4411 ;; This function is called by:
  4412 ;;		_initialize
  4413 ;; This function uses a non-reentrant model
  4414 ;;
  4415                           
  4416                           	psect	text22
  4417  001C4C                     __ptext22:
  4418                           	opt stack 0
  4419  001C4C                     _I2C_Master_Init:
  4420                           	opt stack 22
  4421                           
  4422                           ;I2C.c: 15: SSPSTAT = 0b00000000;
  4423                           
  4424                           ;incstack = 0
  4425  001C4C  0E00               	movlw	0
  4426  001C4E  6EC7               	movwf	4039,c	;volatile
  4427                           
  4428                           ;I2C.c: 16: SSPCON1 = 0b00101000;
  4429  001C50  0E28               	movlw	40
  4430  001C52  6EC6               	movwf	4038,c	;volatile
  4431                           
  4432                           ;I2C.c: 17: SSPCON2 = 0b00000000;
  4433  001C54  0E00               	movlw	0
  4434  001C56  6EC5               	movwf	4037,c	;volatile
  4435                           
  4436                           ;I2C.c: 18: SSPADD = (8000000 / (4 * c)) - 1;
  4437  001C58  0E00               	movlw	0
  4438  001C5A  0100               	movlb	0	; () banked
  4439  001C5C  6F80               	movwf	___lldiv@dividend& (0+255),b
  4440  001C5E  0E12               	movlw	18
  4441  001C60  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  4442  001C62  0E7A               	movlw	122
  4443  001C64  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  4444  001C66  0E00               	movlw	0
  4445  001C68  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  4446  001C6A  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  4447  001C6E  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  4448  001C72  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  4449  001C76  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  4450  001C7A  0E02               	movlw	2
  4451  001C7C                     u2605:
  4452  001C7C  90D8               	bcf	status,0,c
  4453  001C7E  0100               	movlb	0	; () banked
  4454  001C80  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  4455  001C82  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  4456  001C84  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  4457  001C86  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  4458  001C88  2EE8               	decfsz	wreg,f,c
  4459  001C8A  D7F8               	goto	u2605
  4460  001C8C  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  4461  001C90  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  4462  001C94  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  4463  001C98  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  4464  001C9C  ECFC  F009         	call	___lldiv	;wreg free
  4465  001CA0  0100               	movlb	0	; () banked
  4466  001CA2  0580               	decf	?___lldiv& (0+255),w,b
  4467  001CA4  6EC8               	movwf	4040,c	;volatile
  4468                           
  4469                           ; BSR set to: 0
  4470                           ;I2C.c: 19: TRISC3 = 1;
  4471  001CA6  8694               	bsf	3988,3,c	;volatile
  4472                           
  4473                           ; BSR set to: 0
  4474                           ;I2C.c: 20: TRISC4 = 1;
  4475  001CA8  8894               	bsf	3988,4,c	;volatile
  4476                           
  4477                           ; BSR set to: 0
  4478  001CAA  0012               	return		;funcret
  4479  001CAC                     __end_of_I2C_Master_Init:
  4480                           	opt stack 0
  4481                           tblptru	equ	0xFF8
  4482                           tblptrh	equ	0xFF7
  4483                           tblptrl	equ	0xFF6
  4484                           tablat	equ	0xFF5
  4485                           prodh	equ	0xFF4
  4486                           prodl	equ	0xFF3
  4487                           intcon	equ	0xFF2
  4488                           intcon3	equ	0xFF0
  4489                           postinc0	equ	0xFEE
  4490                           wreg	equ	0xFE8
  4491                           indf2	equ	0xFDF
  4492                           postinc2	equ	0xFDE
  4493                           postdec2	equ	0xFDD
  4494                           fsr2h	equ	0xFDA
  4495                           fsr2l	equ	0xFD9
  4496                           status	equ	0xFD8
  4497                           
  4498 ;; *************** function ___lldiv *****************
  4499 ;; Defined at:
  4500 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  4501 ;; Parameters:    Size  Location     Type
  4502 ;;  dividend        4    0[BANK0 ] unsigned long 
  4503 ;;  divisor         4    4[BANK0 ] unsigned long 
  4504 ;; Auto vars:     Size  Location     Type
  4505 ;;  quotient        4    8[BANK0 ] unsigned long 
  4506 ;;  counter         1   12[BANK0 ] unsigned char 
  4507 ;; Return value:  Size  Location     Type
  4508 ;;                  4    0[BANK0 ] unsigned long 
  4509 ;; Registers used:
  4510 ;;		wreg, status,2, status,0
  4511 ;; Tracked objects:
  4512 ;;		On entry : 0/0
  4513 ;;		On exit  : 0/0
  4514 ;;		Unchanged: 0/0
  4515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4516 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4517 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4519 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4520 ;;Total ram usage:       13 bytes
  4521 ;; Hardware stack levels used:    1
  4522 ;; Hardware stack levels required when called:    6
  4523 ;; This function calls:
  4524 ;;		Nothing
  4525 ;; This function is called by:
  4526 ;;		_I2C_Master_Init
  4527 ;; This function uses a non-reentrant model
  4528 ;;
  4529                           
  4530                           	psect	text23
  4531  0013F8                     __ptext23:
  4532                           	opt stack 0
  4533  0013F8                     ___lldiv:
  4534                           	opt stack 22
  4535                           
  4536                           ; BSR set to: 0
  4537                           ;incstack = 0
  4538  0013F8  0E00               	movlw	0
  4539  0013FA  0100               	movlb	0	; () banked
  4540  0013FC  6F88               	movwf	___lldiv@quotient& (0+255),b
  4541  0013FE  0E00               	movlw	0
  4542  001400  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  4543  001402  0E00               	movlw	0
  4544  001404  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  4545  001406  0E00               	movlw	0
  4546  001408  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  4547                           
  4548                           ; BSR set to: 0
  4549  00140A  0100               	movlb	0	; () banked
  4550  00140C  5184               	movf	___lldiv@divisor& (0+255),w,b
  4551  00140E  0100               	movlb	0	; () banked
  4552  001410  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  4553  001412  0100               	movlb	0	; () banked
  4554  001414  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  4555  001416  0100               	movlb	0	; () banked
  4556  001418  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  4557  00141A  B4D8               	btfsc	status,2,c
  4558  00141C  D042               	goto	l872
  4559                           
  4560                           ; BSR set to: 0
  4561  00141E  0E01               	movlw	1
  4562  001420  0100               	movlb	0	; () banked
  4563  001422  6F8C               	movwf	___lldiv@counter& (0+255),b
  4564  001424  D008               	goto	l3346
  4565  001426                     l3344:
  4566                           
  4567                           ; BSR set to: 0
  4568  001426  0100               	movlb	0	; () banked
  4569  001428  90D8               	bcf	status,0,c
  4570  00142A  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  4571  00142C  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  4572  00142E  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  4573  001430  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  4574  001432  0100               	movlb	0	; () banked
  4575  001434  2B8C               	incf	___lldiv@counter& (0+255),f,b
  4576  001436                     l3346:
  4577                           
  4578                           ; BSR set to: 0
  4579  001436  0100               	movlb	0	; () banked
  4580  001438  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  4581  00143A  D7F5               	goto	l3344
  4582  00143C                     l3348:
  4583                           
  4584                           ; BSR set to: 0
  4585  00143C  0100               	movlb	0	; () banked
  4586  00143E  90D8               	bcf	status,0,c
  4587  001440  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  4588  001442  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  4589  001444  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  4590  001446  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  4591                           
  4592                           ; BSR set to: 0
  4593  001448  0100               	movlb	0	; () banked
  4594  00144A  5184               	movf	___lldiv@divisor& (0+255),w,b
  4595  00144C  0100               	movlb	0	; () banked
  4596  00144E  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  4597  001450  0100               	movlb	0	; () banked
  4598  001452  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4599  001454  0100               	movlb	0	; () banked
  4600  001456  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  4601  001458  0100               	movlb	0	; () banked
  4602  00145A  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4603  00145C  0100               	movlb	0	; () banked
  4604  00145E  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  4605  001460  0100               	movlb	0	; () banked
  4606  001462  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4607  001464  0100               	movlb	0	; () banked
  4608  001466  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  4609  001468  A0D8               	btfss	status,0,c
  4610  00146A  D012               	goto	l3356
  4611                           
  4612                           ; BSR set to: 0
  4613  00146C  0100               	movlb	0	; () banked
  4614  00146E  5184               	movf	___lldiv@divisor& (0+255),w,b
  4615  001470  0100               	movlb	0	; () banked
  4616  001472  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  4617  001474  0100               	movlb	0	; () banked
  4618  001476  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4619  001478  0100               	movlb	0	; () banked
  4620  00147A  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  4621  00147C  0100               	movlb	0	; () banked
  4622  00147E  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4623  001480  0100               	movlb	0	; () banked
  4624  001482  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  4625  001484  0100               	movlb	0	; () banked
  4626  001486  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4627  001488  0100               	movlb	0	; () banked
  4628  00148A  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  4629                           
  4630                           ; BSR set to: 0
  4631  00148C  0100               	movlb	0	; () banked
  4632  00148E  8188               	bsf	___lldiv@quotient& (0+255),0,b
  4633  001490                     l3356:
  4634                           
  4635                           ; BSR set to: 0
  4636  001490  0100               	movlb	0	; () banked
  4637  001492  90D8               	bcf	status,0,c
  4638  001494  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  4639  001496  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  4640  001498  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  4641  00149A  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  4642                           
  4643                           ; BSR set to: 0
  4644  00149C  0100               	movlb	0	; () banked
  4645  00149E  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  4646  0014A0  D7CD               	goto	l3348
  4647  0014A2                     l872:
  4648                           
  4649                           ; BSR set to: 0
  4650  0014A2  C088  F080         	movff	___lldiv@quotient,?___lldiv
  4651  0014A6  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  4652  0014AA  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  4653  0014AE  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  4654                           
  4655                           ; BSR set to: 0
  4656  0014B2  0012               	return		;funcret
  4657  0014B4                     __end_of___lldiv:
  4658                           	opt stack 0
  4659                           tblptru	equ	0xFF8
  4660                           tblptrh	equ	0xFF7
  4661                           tblptrl	equ	0xFF6
  4662                           tablat	equ	0xFF5
  4663                           prodh	equ	0xFF4
  4664                           prodl	equ	0xFF3
  4665                           intcon	equ	0xFF2
  4666                           intcon3	equ	0xFF0
  4667                           postinc0	equ	0xFEE
  4668                           wreg	equ	0xFE8
  4669                           indf2	equ	0xFDF
  4670                           postinc2	equ	0xFDE
  4671                           postdec2	equ	0xFDD
  4672                           fsr2h	equ	0xFDA
  4673                           fsr2l	equ	0xFD9
  4674                           status	equ	0xFD8
  4675                           
  4676 ;; *************** function _intrpt *****************
  4677 ;; Defined at:
  4678 ;;		line 159 in file "main.c"
  4679 ;; Parameters:    Size  Location     Type
  4680 ;;		None
  4681 ;; Auto vars:     Size  Location     Type
  4682 ;;  keypress        1  114[COMRAM] unsigned char 
  4683 ;; Return value:  Size  Location     Type
  4684 ;;                  1    wreg      void 
  4685 ;; Registers used:
  4686 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4687 ;; Tracked objects:
  4688 ;;		On entry : 0/0
  4689 ;;		On exit  : 0/0
  4690 ;;		Unchanged: 0/0
  4691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4693 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4694 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4695 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4696 ;;Total ram usage:       17 bytes
  4697 ;; Hardware stack levels used:    1
  4698 ;; Hardware stack levels required when called:    5
  4699 ;; This function calls:
  4700 ;;		_PermLog
  4701 ;;		_simulate
  4702 ;;		_stopMoving
  4703 ;; This function is called by:
  4704 ;;		Interrupt level 2
  4705 ;; This function uses a non-reentrant model
  4706 ;;
  4707                           
  4708                           	psect	intcode
  4709  000008                     __pintcode:
  4710                           	opt stack 0
  4711  000008                     _intrpt:
  4712                           	opt stack 21
  4713                           
  4714                           ; BSR set to: 0
  4715                           ;incstack = 0
  4716  000008  827D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4717  00000A  ED11  F008         	call	int_func,f	;refresh shadow registers
  4718                           tblptru	equ	0xFF8
  4719                           tblptrh	equ	0xFF7
  4720                           tblptrl	equ	0xFF6
  4721                           tablat	equ	0xFF5
  4722                           prodh	equ	0xFF4
  4723                           prodl	equ	0xFF3
  4724                           intcon	equ	0xFF2
  4725                           intcon3	equ	0xFF0
  4726                           postinc0	equ	0xFEE
  4727                           wreg	equ	0xFE8
  4728                           indf2	equ	0xFDF
  4729                           postinc2	equ	0xFDE
  4730                           postdec2	equ	0xFDD
  4731                           fsr2h	equ	0xFDA
  4732                           fsr2l	equ	0xFD9
  4733                           status	equ	0xFD8
  4734                           
  4735                           	psect	intcode_body
  4736  001022                     __pintcode_body:
  4737                           	opt stack 21
  4738  001022                     int_func:
  4739                           	opt stack 21
  4740  001022  0006               	pop		; remove dummy address from shadow register refresh
  4741  001024  CFFA F065          	movff	pclath,??_intrpt+2
  4742  001028  CFFB F066          	movff	pclatu,??_intrpt+3
  4743  00102C  CFE9 F067          	movff	fsr0l,??_intrpt+4
  4744  001030  CFEA F068          	movff	fsr0h,??_intrpt+5
  4745  001034  CFE1 F069          	movff	fsr1l,??_intrpt+6
  4746  001038  CFE2 F06A          	movff	fsr1h,??_intrpt+7
  4747  00103C  CFD9 F06B          	movff	fsr2l,??_intrpt+8
  4748  001040  CFDA F06C          	movff	fsr2h,??_intrpt+9
  4749  001044  CFF3 F06D          	movff	prodl,??_intrpt+10
  4750  001048  CFF4 F06E          	movff	prodh,??_intrpt+11
  4751  00104C  CFF6 F06F          	movff	tblptrl,??_intrpt+12
  4752  001050  CFF7 F070          	movff	tblptrh,??_intrpt+13
  4753  001054  CFF8 F071          	movff	tblptru,??_intrpt+14
  4754  001058  CFF5 F072          	movff	tablat,??_intrpt+15
  4755                           
  4756                           ;main.c: 165: (INTCONbits.GIE = 0);
  4757  00105C  9EF2               	bcf	intcon,7,c	;volatile
  4758                           
  4759                           ;main.c: 166: if (INT1IF) {
  4760  00105E  A0F0               	btfss	intcon3,0,c	;volatile
  4761  001060  D02C               	goto	i2l134
  4762                           
  4763                           ;main.c: 167: unsigned char keypress = (PORTB & 0xF0) >> 4;
  4764  001062  3881               	swapf	3969,w,c	;volatile
  4765  001064  0B0F               	andlw	15
  4766  001066  0B0F               	andlw	15
  4767  001068  6E73               	movwf	intrpt@keypress,c
  4768                           
  4769                           ;main.c: 168: INT1IF = 0;
  4770  00106A  90F0               	bcf	intcon3,0,c	;volatile
  4771                           
  4772                           ;main.c: 169: switch (mode) {
  4773  00106C  D018               	goto	i2l4230
  4774  00106E                     i2l4212:
  4775                           
  4776                           ;main.c: 171: if (keypress < 4) {
  4777  00106E  0E04               	movlw	4
  4778  001070  6073               	cpfslt	intrpt@keypress,c
  4779  001072  D00C               	goto	i2l4220
  4780                           
  4781                           ;main.c: 172: mode = 2;
  4782  001074  0E00               	movlw	0
  4783  001076  6E75               	movwf	_mode+1,c
  4784  001078  0E02               	movlw	2
  4785  00107A  6E74               	movwf	_mode,c
  4786                           
  4787                           ;main.c: 173: PermLog(keypress);
  4788  00107C  5073               	movf	intrpt@keypress,w,c
  4789  00107E  EC0C  F00D         	call	_PermLog
  4790                           
  4791                           ;main.c: 174: mode = 0;
  4792  001082  0E00               	movlw	0
  4793  001084  6E75               	movwf	_mode+1,c
  4794  001086  0E00               	movlw	0
  4795  001088  6E74               	movwf	_mode,c
  4796                           
  4797                           ;main.c: 175: } else {
  4798  00108A  D015               	goto	i2l141
  4799  00108C                     i2l4220:
  4800                           
  4801                           ;main.c: 176: mode = 1;
  4802  00108C  0E00               	movlw	0
  4803  00108E  6E75               	movwf	_mode+1,c
  4804  001090  0E01               	movlw	1
  4805  001092  6E74               	movwf	_mode,c
  4806                           
  4807                           ;main.c: 177: (INTCONbits.GIE = 1);
  4808  001094  8EF2               	bsf	intcon,7,c	;volatile
  4809                           
  4810                           ;main.c: 178: simulate();
  4811  001096  ECED  F001         	call	_simulate	;wreg free
  4812                           
  4813                           ;main.c: 179: (INTCONbits.GIE = 0);
  4814  00109A  9EF2               	bcf	intcon,7,c	;volatile
  4815                           
  4816                           ;main.c: 184: }
  4817                           
  4818                           ;main.c: 183: break;
  4819                           
  4820                           ;main.c: 182: default:
  4821                           
  4822                           ;main.c: 180: }
  4823                           ;main.c: 181: break;
  4824  00109C  D00C               	goto	i2l141
  4825  00109E                     i2l4230:
  4826  00109E  C074  F063         	movff	_mode,??_intrpt
  4827  0010A2  C075  F064         	movff	_mode+1,??_intrpt+1
  4828                           
  4829                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4830                           ; Switch size 1, requested type "space"
  4831                           ; Number of cases is 1, Range of values is 0 to 0
  4832                           ; switch strategies available:
  4833                           ; Name         Instructions Cycles
  4834                           ; simple_byte            4     3 (average)
  4835                           ;	Chosen strategy is simple_byte
  4836  0010A6  5064               	movf	??_intrpt+1,w,c
  4837  0010A8  0A00               	xorlw	0	; case 0
  4838  0010AA  A4D8               	btfss	status,2,c
  4839  0010AC  D004               	goto	i2l141
  4840                           
  4841                           ; Switch size 1, requested type "space"
  4842                           ; Number of cases is 1, Range of values is 0 to 0
  4843                           ; switch strategies available:
  4844                           ; Name         Instructions Cycles
  4845                           ; simple_byte            4     3 (average)
  4846                           ;	Chosen strategy is simple_byte
  4847  0010AE  5063               	movf	??_intrpt,w,c
  4848  0010B0  0A00               	xorlw	0	; case 0
  4849  0010B2  B4D8               	btfsc	status,2,c
  4850  0010B4  D7DC               	goto	i2l4212
  4851  0010B6                     i2l141:
  4852  0010B6  B281               	btfsc	3969,1,c	;volatile
  4853  0010B8  D7FE               	goto	i2l141
  4854  0010BA                     i2l134:
  4855                           
  4856                           ;main.c: 186: }
  4857                           ;main.c: 187: if (INT2IF) {
  4858  0010BA  A2F0               	btfss	intcon3,1,c	;volatile
  4859  0010BC  D018               	goto	i2l144
  4860                           
  4861                           ;main.c: 188: INT2IF = 0;
  4862  0010BE  92F0               	bcf	intcon3,1,c	;volatile
  4863                           
  4864                           ;main.c: 189: switch (mode) {
  4865  0010C0  D008               	goto	i2l4240
  4866  0010C2                     i2l4234:
  4867                           
  4868                           ;main.c: 191: mode = 3;
  4869  0010C2  0E00               	movlw	0
  4870  0010C4  6E75               	movwf	_mode+1,c
  4871  0010C6  0E03               	movlw	3
  4872  0010C8  6E74               	movwf	_mode,c
  4873                           
  4874                           ;main.c: 192: stopMoving(1);
  4875  0010CA  0E01               	movlw	1
  4876  0010CC  EC97  F00F         	call	_stopMoving
  4877                           
  4878                           ;main.c: 196: }
  4879                           
  4880                           ;main.c: 195: break;
  4881                           
  4882                           ;main.c: 194: default:
  4883                           
  4884                           ;main.c: 193: break;
  4885  0010D0  D00C               	goto	i2l149
  4886  0010D2                     i2l4240:
  4887  0010D2  C074  F063         	movff	_mode,??_intrpt
  4888  0010D6  C075  F064         	movff	_mode+1,??_intrpt+1
  4889                           
  4890                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4891                           ; Switch size 1, requested type "space"
  4892                           ; Number of cases is 1, Range of values is 0 to 0
  4893                           ; switch strategies available:
  4894                           ; Name         Instructions Cycles
  4895                           ; simple_byte            4     3 (average)
  4896                           ;	Chosen strategy is simple_byte
  4897  0010DA  5064               	movf	??_intrpt+1,w,c
  4898  0010DC  0A00               	xorlw	0	; case 0
  4899  0010DE  A4D8               	btfss	status,2,c
  4900  0010E0  D004               	goto	i2l149
  4901                           
  4902                           ; Switch size 1, requested type "space"
  4903                           ; Number of cases is 1, Range of values is 1 to 1
  4904                           ; switch strategies available:
  4905                           ; Name         Instructions Cycles
  4906                           ; simple_byte            4     3 (average)
  4907                           ;	Chosen strategy is simple_byte
  4908  0010E2  5063               	movf	??_intrpt,w,c
  4909  0010E4  0A01               	xorlw	1	; case 1
  4910  0010E6  B4D8               	btfsc	status,2,c
  4911  0010E8  D7EC               	goto	i2l4234
  4912  0010EA                     i2l149:
  4913  0010EA  B481               	btfsc	3969,2,c	;volatile
  4914  0010EC  D7FE               	goto	i2l149
  4915  0010EE                     i2l144:
  4916                           
  4917                           ;main.c: 198: }
  4918                           ;main.c: 199: (INTCONbits.GIE = 1);
  4919  0010EE  8EF2               	bsf	intcon,7,c	;volatile
  4920  0010F0  C072  FFF5         	movff	??_intrpt+15,tablat
  4921  0010F4  C071  FFF8         	movff	??_intrpt+14,tblptru
  4922  0010F8  C070  FFF7         	movff	??_intrpt+13,tblptrh
  4923  0010FC  C06F  FFF6         	movff	??_intrpt+12,tblptrl
  4924  001100  C06E  FFF4         	movff	??_intrpt+11,prodh
  4925  001104  C06D  FFF3         	movff	??_intrpt+10,prodl
  4926  001108  C06C  FFDA         	movff	??_intrpt+9,fsr2h
  4927  00110C  C06B  FFD9         	movff	??_intrpt+8,fsr2l
  4928  001110  C06A  FFE2         	movff	??_intrpt+7,fsr1h
  4929  001114  C069  FFE1         	movff	??_intrpt+6,fsr1l
  4930  001118  C068  FFEA         	movff	??_intrpt+5,fsr0h
  4931  00111C  C067  FFE9         	movff	??_intrpt+4,fsr0l
  4932  001120  C066  FFFB         	movff	??_intrpt+3,pclatu
  4933  001124  C065  FFFA         	movff	??_intrpt+2,pclath
  4934  001128  927D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4935  00112A  0011               	retfie		f
  4936  00112C                     __end_of_intrpt:
  4937                           	opt stack 0
  4938                           pclatu	equ	0xFFB
  4939                           pclath	equ	0xFFA
  4940                           tblptru	equ	0xFF8
  4941                           tblptrh	equ	0xFF7
  4942                           tblptrl	equ	0xFF6
  4943                           tablat	equ	0xFF5
  4944                           prodh	equ	0xFF4
  4945                           prodl	equ	0xFF3
  4946                           intcon	equ	0xFF2
  4947                           intcon3	equ	0xFF0
  4948                           postinc0	equ	0xFEE
  4949                           fsr0h	equ	0xFEA
  4950                           fsr0l	equ	0xFE9
  4951                           wreg	equ	0xFE8
  4952                           fsr1h	equ	0xFE2
  4953                           fsr1l	equ	0xFE1
  4954                           indf2	equ	0xFDF
  4955                           postinc2	equ	0xFDE
  4956                           postdec2	equ	0xFDD
  4957                           fsr2h	equ	0xFDA
  4958                           fsr2l	equ	0xFD9
  4959                           status	equ	0xFD8
  4960                           
  4961 ;; *************** function _simulate *****************
  4962 ;; Defined at:
  4963 ;;		line 50 in file "main.c"
  4964 ;; Parameters:    Size  Location     Type
  4965 ;;		None
  4966 ;; Auto vars:     Size  Location     Type
  4967 ;;  portCCW         6   72[COMRAM] int [3]
  4968 ;;  portCW          6   66[COMRAM] int [3]
  4969 ;;  sorted          4   92[COMRAM] unsigned char [4]
  4970 ;;  start           4   88[COMRAM] unsigned int [2]
  4971 ;;  now             4   84[COMRAM] unsigned int [2]
  4972 ;;  period          2   96[COMRAM] unsigned int 
  4973 ;;  V9              2   82[COMRAM] int 
  4974 ;;  C               2   80[COMRAM] int 
  4975 ;;  AA              2   78[COMRAM] int 
  4976 ;;  stop            2   62[COMRAM] int 
  4977 ;; Return value:  Size  Location     Type
  4978 ;;                  1    wreg      void 
  4979 ;; Registers used:
  4980 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4981 ;; Tracked objects:
  4982 ;;		On entry : 0/0
  4983 ;;		On exit  : 0/0
  4984 ;;		Unchanged: 0/0
  4985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4987 ;;      Locals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4988 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4989 ;;      Totals:        38       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4990 ;;Total ram usage:       38 bytes
  4991 ;; Hardware stack levels used:    1
  4992 ;; Hardware stack levels required when called:    4
  4993 ;; This function calls:
  4994 ;;		_CCW90
  4995 ;;		_CW90
  4996 ;;		_HexDecToDec2
  4997 ;;		_WriteRun
  4998 ;;		_check9
  4999 ;;		_checkAA
  5000 ;;		_checkC
  5001 ;;		_showInfo
  5002 ;;		_stopMoving
  5003 ;;		i2___wmul
  5004 ;;		i2_getTime
  5005 ;;		i2_line0
  5006 ;;		i2_line1
  5007 ;;		i2_printf
  5008 ;; This function is called by:
  5009 ;;		_intrpt
  5010 ;; This function uses a non-reentrant model
  5011 ;;
  5012                           
  5013                           	psect	text25
  5014  0003DA                     __ptext25:
  5015                           	opt stack 0
  5016  0003DA                     _simulate:
  5017                           	opt stack 21
  5018                           
  5019                           ;main.c: 51: unsigned int now[] = {0, 0}, start[] = {0, 0};
  5020                           
  5021                           ;incstack = 0
  5022  0003DA  C0C2  F055         	movff	simulate@F3106,simulate@now
  5023  0003DE  C0C3  F056         	movff	simulate@F3106+1,simulate@now+1
  5024  0003E2  C0C4  F057         	movff	simulate@F3106+2,simulate@now+2
  5025  0003E6  C0C5  F058         	movff	simulate@F3106+3,simulate@now+3
  5026  0003EA  C0BE  F059         	movff	simulate@F3108,simulate@start
  5027  0003EE  C0BF  F05A         	movff	simulate@F3108+1,simulate@start+1
  5028  0003F2  C0C0  F05B         	movff	simulate@F3108+2,simulate@start+2
  5029  0003F6  C0C1  F05C         	movff	simulate@F3108+3,simulate@start+3
  5030                           
  5031                           ;main.c: 52: unsigned char sorted[] = {0, 0, 0, 0};
  5032  0003FA  C0BA  F05D         	movff	simulate@F3110,simulate@sorted
  5033  0003FE  C0BB  F05E         	movff	simulate@F3110+1,simulate@sorted+1
  5034  000402  C0BC  F05F         	movff	simulate@F3110+2,simulate@sorted+2
  5035  000406  C0BD  F060         	movff	simulate@F3110+3,simulate@sorted+3
  5036                           
  5037                           ;main.c: 53: unsigned int period = 0;
  5038  00040A  0E00               	movlw	0
  5039  00040C  6E62               	movwf	simulate@period+1,c
  5040  00040E  0E00               	movlw	0
  5041  000410  6E61               	movwf	simulate@period,c
  5042                           
  5043                           ;main.c: 54: int stop = 0;
  5044  000412  0E00               	movlw	0
  5045  000414  6E40               	movwf	simulate@stop+1,c
  5046  000416  0E00               	movlw	0
  5047  000418  6E3F               	movwf	simulate@stop,c
  5048                           
  5049                           ;main.c: 55: int AA, C, V9;
  5050                           ;main.c: 56: line0();
  5051  00041A  EC06  F011         	call	i2_line0	;wreg free
  5052                           
  5053                           ;main.c: 57: printf("Simulating...          ");
  5054  00041E  0EAE               	movlw	low STR_2
  5055  000420  6E0D               	movwf	i2printf@f,c
  5056  000422  0EFE               	movlw	high STR_2
  5057  000424  6E0E               	movwf	i2printf@f+1,c
  5058  000426  EC91  F003         	call	i2_printf	;wreg free
  5059                           
  5060                           ;main.c: 58: start[0] = time[0];
  5061  00042A  C076  F059         	movff	_time,simulate@start
  5062  00042E  6A5A               	clrf	simulate@start+1,c
  5063                           
  5064                           ;main.c: 59: start[1] = time[1];
  5065  000430  C077  F05B         	movff	_time+1,simulate@start+2
  5066  000434  6A5C               	clrf	simulate@start+3,c
  5067                           
  5068                           ;main.c: 60: LATC5 = 1;
  5069  000436  8A8B               	bsf	3979,5,c	;volatile
  5070                           
  5071                           ;main.c: 61: INT2IE = 1;
  5072  000438  88F0               	bsf	intcon3,4,c	;volatile
  5073                           
  5074                           ;main.c: 62: INT2IF = 0;
  5075  00043A  92F0               	bcf	intcon3,1,c	;volatile
  5076                           
  5077                           ;main.c: 63: while (!stop) {
  5078  00043C  D139               	goto	i2l4154
  5079  00043E                     i2l4064:
  5080                           
  5081                           ;main.c: 65: line0();
  5082  00043E  EC06  F011         	call	i2_line0	;wreg free
  5083                           
  5084                           ;main.c: 66: AA = checkAA(sorted);
  5085  000442  0E5D               	movlw	low simulate@sorted
  5086  000444  6E3B               	movwf	checkAA@sorted,c
  5087  000446  0E00               	movlw	high simulate@sorted
  5088  000448  6E3C               	movwf	checkAA@sorted+1,c
  5089  00044A  EC0E  F00B         	call	_checkAA	;wreg free
  5090  00044E  C03B  F04F         	movff	?_checkAA,simulate@AA
  5091  000452  C03C  F050         	movff	?_checkAA+1,simulate@AA+1
  5092                           
  5093                           ;main.c: 68: C = checkC(sorted);
  5094  000456  0E5D               	movlw	low simulate@sorted
  5095  000458  6E3B               	movwf	checkC@sorted,c
  5096  00045A  0E00               	movlw	high simulate@sorted
  5097  00045C  6E3C               	movwf	checkC@sorted+1,c
  5098  00045E  EC5A  F00A         	call	_checkC	;wreg free
  5099  000462  C03B  F051         	movff	?_checkC,simulate@C
  5100  000466  C03C  F052         	movff	?_checkC+1,simulate@C+1
  5101                           
  5102                           ;main.c: 70: V9 = check9(sorted);
  5103  00046A  0E5D               	movlw	low simulate@sorted
  5104  00046C  6E3B               	movwf	check9@sorted,c
  5105  00046E  0E00               	movlw	high simulate@sorted
  5106  000470  6E3C               	movwf	check9@sorted+1,c
  5107  000472  ECB4  F00A         	call	_check9	;wreg free
  5108  000476  C03B  F053         	movff	?_check9,simulate@V9
  5109  00047A  C03C  F054         	movff	?_check9+1,simulate@V9+1
  5110                           
  5111                           ;main.c: 71: printf("    ");
  5112  00047E  0ECF               	movlw	low (STR_29+11)
  5113  000480  6E0D               	movwf	i2printf@f,c
  5114  000482  0EFF               	movlw	high (STR_29+11)
  5115  000484  6E0E               	movwf	i2printf@f+1,c
  5116  000486  EC91  F003         	call	i2_printf	;wreg free
  5117                           
  5118                           ;main.c: 74: int portCW[] = {0, 0, 0};
  5119  00048A  EE20  F0B0         	lfsr	2,simulate@F3117
  5120  00048E  EE10  F043         	lfsr	1,simulate@portCW
  5121  000492  0E05               	movlw	5
  5122  000494                     i2u291_41:
  5123  000494  CFDB FFE3          	movff	plusw2,plusw1
  5124  000498  06E8               	decf	wreg,f,c
  5125  00049A  E2FC               	bc	i2u291_41
  5126                           
  5127                           ;main.c: 75: int portCCW[] = {0, 0, 0};
  5128  00049C  EE20  F0AA         	lfsr	2,simulate@F3119
  5129  0004A0  EE10  F049         	lfsr	1,simulate@portCCW
  5130  0004A4  0E05               	movlw	5
  5131  0004A6                     i2u292_41:
  5132  0004A6  CFDB FFE3          	movff	plusw2,plusw1
  5133  0004AA  06E8               	decf	wreg,f,c
  5134  0004AC  E2FC               	bc	i2u292_41
  5135                           
  5136                           ;main.c: 77: line1();
  5137  0004AE  EC02  F011         	call	i2_line1	;wreg free
  5138                           
  5139                           ;main.c: 78: printf("AA:");
  5140  0004B2  0EEE               	movlw	low STR_4
  5141  0004B4  6E0D               	movwf	i2printf@f,c
  5142  0004B6  0EFF               	movlw	high STR_4
  5143  0004B8  6E0E               	movwf	i2printf@f+1,c
  5144  0004BA  EC91  F003         	call	i2_printf	;wreg free
  5145                           
  5146                           ;main.c: 79: if (!AA) {
  5147  0004BE  504F               	movf	simulate@AA,w,c
  5148  0004C0  1050               	iorwf	simulate@AA+1,w,c
  5149  0004C2  A4D8               	btfss	status,2,c
  5150  0004C4  D00B               	goto	i2l4086
  5151                           
  5152                           ;main.c: 80: portCCW[0] = 1;
  5153  0004C6  0E00               	movlw	0
  5154  0004C8  6E4A               	movwf	simulate@portCCW+1,c
  5155  0004CA  0E01               	movlw	1
  5156  0004CC  6E49               	movwf	simulate@portCCW,c
  5157                           
  5158                           ;main.c: 81: printf(" -");
  5159  0004CE  0EF9               	movlw	low STR_5
  5160  0004D0  6E0D               	movwf	i2printf@f,c
  5161  0004D2  0EFF               	movlw	high STR_5
  5162  0004D4  6E0E               	movwf	i2printf@f+1,c
  5163  0004D6  EC91  F003         	call	i2_printf	;wreg free
  5164                           
  5165                           ;main.c: 82: } else if (AA == 1) {
  5166  0004DA  D015               	goto	i2l114
  5167  0004DC                     i2l4086:
  5168  0004DC  044F               	decf	simulate@AA,w,c
  5169  0004DE  1050               	iorwf	simulate@AA+1,w,c
  5170  0004E0  A4D8               	btfss	status,2,c
  5171  0004E2  D00B               	goto	i2l4092
  5172                           
  5173                           ;main.c: 83: portCW[0] = 1;
  5174  0004E4  0E00               	movlw	0
  5175  0004E6  6E44               	movwf	simulate@portCW+1,c
  5176  0004E8  0E01               	movlw	1
  5177  0004EA  6E43               	movwf	simulate@portCW,c
  5178                           
  5179                           ;main.c: 84: printf(" +");
  5180  0004EC  0EF6               	movlw	low STR_6
  5181  0004EE  6E0D               	movwf	i2printf@f,c
  5182  0004F0  0EFF               	movlw	high STR_6
  5183  0004F2  6E0E               	movwf	i2printf@f+1,c
  5184  0004F4  EC91  F003         	call	i2_printf	;wreg free
  5185                           
  5186                           ;main.c: 85: } else {
  5187  0004F8  D006               	goto	i2l114
  5188  0004FA                     i2l4092:
  5189                           
  5190                           ;main.c: 86: printf(" 0");
  5191  0004FA  0EFC               	movlw	low STR_7
  5192  0004FC  6E0D               	movwf	i2printf@f,c
  5193  0004FE  0EFF               	movlw	high STR_7
  5194  000500  6E0E               	movwf	i2printf@f+1,c
  5195  000502  EC91  F003         	call	i2_printf	;wreg free
  5196  000506                     i2l114:
  5197                           
  5198                           ;main.c: 87: }
  5199                           ;main.c: 89: printf(" C:");
  5200  000506  0EF2               	movlw	low STR_8
  5201  000508  6E0D               	movwf	i2printf@f,c
  5202  00050A  0EFF               	movlw	high STR_8
  5203  00050C  6E0E               	movwf	i2printf@f+1,c
  5204  00050E  EC91  F003         	call	i2_printf	;wreg free
  5205                           
  5206                           ;main.c: 91: if (!C) {
  5207  000512  5051               	movf	simulate@C,w,c
  5208  000514  1052               	iorwf	simulate@C+1,w,c
  5209  000516  A4D8               	btfss	status,2,c
  5210  000518  D00B               	goto	i2l4100
  5211                           
  5212                           ;main.c: 92: portCCW[1] = 1;
  5213  00051A  0E00               	movlw	0
  5214  00051C  6E4C               	movwf	simulate@portCCW+3,c
  5215  00051E  0E01               	movlw	1
  5216  000520  6E4B               	movwf	simulate@portCCW+2,c
  5217                           
  5218                           ;main.c: 93: printf(" -");
  5219  000522  0EF9               	movlw	low STR_5
  5220  000524  6E0D               	movwf	i2printf@f,c
  5221  000526  0EFF               	movlw	high STR_5
  5222  000528  6E0E               	movwf	i2printf@f+1,c
  5223  00052A  EC91  F003         	call	i2_printf	;wreg free
  5224                           
  5225                           ;main.c: 94: } else if (C == 1) {
  5226  00052E  D015               	goto	i2l118
  5227  000530                     i2l4100:
  5228  000530  0451               	decf	simulate@C,w,c
  5229  000532  1052               	iorwf	simulate@C+1,w,c
  5230  000534  A4D8               	btfss	status,2,c
  5231  000536  D00B               	goto	i2l4106
  5232                           
  5233                           ;main.c: 95: portCW[1] = 1;
  5234  000538  0E00               	movlw	0
  5235  00053A  6E46               	movwf	simulate@portCW+3,c
  5236  00053C  0E01               	movlw	1
  5237  00053E  6E45               	movwf	simulate@portCW+2,c
  5238                           
  5239                           ;main.c: 96: printf(" +");
  5240  000540  0EF6               	movlw	low STR_6
  5241  000542  6E0D               	movwf	i2printf@f,c
  5242  000544  0EFF               	movlw	high STR_6
  5243  000546  6E0E               	movwf	i2printf@f+1,c
  5244  000548  EC91  F003         	call	i2_printf	;wreg free
  5245                           
  5246                           ;main.c: 97: } else {
  5247  00054C  D006               	goto	i2l118
  5248  00054E                     i2l4106:
  5249                           
  5250                           ;main.c: 98: printf(" 0");
  5251  00054E  0EFC               	movlw	low STR_7
  5252  000550  6E0D               	movwf	i2printf@f,c
  5253  000552  0EFF               	movlw	high STR_7
  5254  000554  6E0E               	movwf	i2printf@f+1,c
  5255  000556  EC91  F003         	call	i2_printf	;wreg free
  5256  00055A                     i2l118:
  5257                           
  5258                           ;main.c: 99: }
  5259                           ;main.c: 101: printf(" 9V:");
  5260  00055A  0EDD               	movlw	low STR_12
  5261  00055C  6E0D               	movwf	i2printf@f,c
  5262  00055E  0EFF               	movlw	high STR_12
  5263  000560  6E0E               	movwf	i2printf@f+1,c
  5264  000562  EC91  F003         	call	i2_printf	;wreg free
  5265                           
  5266                           ;main.c: 103: if (!V9) {
  5267  000566  5053               	movf	simulate@V9,w,c
  5268  000568  1054               	iorwf	simulate@V9+1,w,c
  5269  00056A  A4D8               	btfss	status,2,c
  5270  00056C  D00B               	goto	i2l4114
  5271                           
  5272                           ;main.c: 104: portCCW[2] = 1;
  5273  00056E  0E00               	movlw	0
  5274  000570  6E4E               	movwf	simulate@portCCW+5,c
  5275  000572  0E01               	movlw	1
  5276  000574  6E4D               	movwf	simulate@portCCW+4,c
  5277                           
  5278                           ;main.c: 105: printf(" -");
  5279  000576  0EF9               	movlw	low STR_5
  5280  000578  6E0D               	movwf	i2printf@f,c
  5281  00057A  0EFF               	movlw	high STR_5
  5282  00057C  6E0E               	movwf	i2printf@f+1,c
  5283  00057E  EC91  F003         	call	i2_printf	;wreg free
  5284                           
  5285                           ;main.c: 107: } else if (V9 == 1) {
  5286  000582  D015               	goto	i2l4122
  5287  000584                     i2l4114:
  5288  000584  0453               	decf	simulate@V9,w,c
  5289  000586  1054               	iorwf	simulate@V9+1,w,c
  5290  000588  A4D8               	btfss	status,2,c
  5291  00058A  D00B               	goto	i2l4120
  5292                           
  5293                           ;main.c: 108: portCW[2] = 1;
  5294  00058C  0E00               	movlw	0
  5295  00058E  6E48               	movwf	simulate@portCW+5,c
  5296  000590  0E01               	movlw	1
  5297  000592  6E47               	movwf	simulate@portCW+4,c
  5298                           
  5299                           ;main.c: 109: printf(" +");
  5300  000594  0EF6               	movlw	low STR_6
  5301  000596  6E0D               	movwf	i2printf@f,c
  5302  000598  0EFF               	movlw	high STR_6
  5303  00059A  6E0E               	movwf	i2printf@f+1,c
  5304  00059C  EC91  F003         	call	i2_printf	;wreg free
  5305                           
  5306                           ;main.c: 110: } else {
  5307  0005A0  D006               	goto	i2l4122
  5308  0005A2                     i2l4120:
  5309                           
  5310                           ;main.c: 111: printf(" 0");
  5311  0005A2  0EFC               	movlw	low STR_7
  5312  0005A4  6E0D               	movwf	i2printf@f,c
  5313  0005A6  0EFF               	movlw	high STR_7
  5314  0005A8  6E0E               	movwf	i2printf@f+1,c
  5315  0005AA  EC91  F003         	call	i2_printf	;wreg free
  5316  0005AE                     i2l4122:
  5317                           
  5318                           ;main.c: 112: }
  5319                           ;main.c: 115: CCW90(portCCW);
  5320  0005AE  0E49               	movlw	low simulate@portCCW
  5321  0005B0  6E16               	movwf	CCW90@port,c
  5322  0005B2  0E00               	movlw	high simulate@portCCW
  5323  0005B4  6E17               	movwf	CCW90@port+1,c
  5324  0005B6  EC5F  F010         	call	_CCW90	;wreg free
  5325                           
  5326                           ;main.c: 116: CW90(portCW);
  5327  0005BA  0E43               	movlw	low simulate@portCW
  5328  0005BC  6E16               	movwf	CW90@port,c
  5329  0005BE  0E00               	movlw	high simulate@portCW
  5330  0005C0  6E17               	movwf	CW90@port+1,c
  5331  0005C2  EC50  F010         	call	_CW90	;wreg free
  5332                           
  5333                           ;main.c: 117: LATC0 = 0;
  5334  0005C6  908B               	bcf	3979,0,c	;volatile
  5335                           
  5336                           ;main.c: 118: LATC1 = 0;
  5337  0005C8  928B               	bcf	3979,1,c	;volatile
  5338                           
  5339                           ;main.c: 119: LATC2 = 0;
  5340  0005CA  948B               	bcf	3979,2,c	;volatile
  5341                           
  5342                           ;main.c: 124: }
  5343                           ;main.c: 125: getTime(time);
  5344  0005CC  0E76               	movlw	low _time
  5345  0005CE  6E04               	movwf	i2getTime@time,c
  5346  0005D0  0E00               	movlw	high _time
  5347  0005D2  6E05               	movwf	i2getTime@time+1,c
  5348  0005D4  EC86  F00D         	call	i2_getTime	;wreg free
  5349                           
  5350                           ;main.c: 126: now[0] = time[0];
  5351  0005D8  C076  F055         	movff	_time,simulate@now
  5352  0005DC  6A56               	clrf	simulate@now+1,c
  5353                           
  5354                           ;main.c: 127: now[1] = time[1];
  5355  0005DE  C077  F057         	movff	_time+1,simulate@now+2
  5356  0005E2  6A58               	clrf	simulate@now+3,c
  5357                           
  5358                           ;main.c: 128: line0();
  5359  0005E4  EC06  F011         	call	i2_line0	;wreg free
  5360                           
  5361                           ;main.c: 129: printf("%02x:%02x to %02x:%02x  ", start[1], start[0], now[1], now[0]);
  5362  0005E8  0E4D               	movlw	low STR_16
  5363  0005EA  6E0D               	movwf	i2printf@f,c
  5364  0005EC  0EFE               	movlw	high STR_16
  5365  0005EE  6E0E               	movwf	i2printf@f+1,c
  5366  0005F0  C05B  F00F         	movff	simulate@start+2,?i2_printf+2
  5367  0005F4  C05C  F010         	movff	simulate@start+3,?i2_printf+3
  5368  0005F8  C059  F011         	movff	simulate@start,?i2_printf+4
  5369  0005FC  C05A  F012         	movff	simulate@start+1,?i2_printf+5
  5370  000600  C057  F013         	movff	simulate@now+2,?i2_printf+6
  5371  000604  C058  F014         	movff	simulate@now+3,?i2_printf+7
  5372  000608  C055  F015         	movff	simulate@now,?i2_printf+8
  5373  00060C  C056  F016         	movff	simulate@now+1,?i2_printf+9
  5374  000610  EC91  F003         	call	i2_printf	;wreg free
  5375                           
  5376                           ;main.c: 130: period = (HexDecToDec2(now[1]) - HexDecToDec2(start[1]))*60 + HexDecToDec2
      +                          (now[0]) - HexDecToDec2(start[0]);
  5377  000614  C057  F007         	movff	simulate@now+2,HexDecToDec2@hex
  5378  000618  C058  F008         	movff	simulate@now+3,HexDecToDec2@hex+1
  5379  00061C  ECF8  F00E         	call	_HexDecToDec2	;wreg free
  5380  000620  C007  F03D         	movff	?_HexDecToDec2,??_simulate
  5381  000624  C008  F03E         	movff	?_HexDecToDec2+1,??_simulate+1
  5382  000628  C05B  F007         	movff	simulate@start+2,HexDecToDec2@hex
  5383  00062C  C05C  F008         	movff	simulate@start+3,HexDecToDec2@hex+1
  5384  000630  ECF8  F00E         	call	_HexDecToDec2	;wreg free
  5385  000634  1E07               	comf	?_HexDecToDec2,f,c
  5386  000636  1E08               	comf	?_HexDecToDec2+1,f,c
  5387  000638  4A07               	infsnz	?_HexDecToDec2,f,c
  5388  00063A  2A08               	incf	?_HexDecToDec2+1,f,c
  5389  00063C  5007               	movf	?_HexDecToDec2,w,c
  5390  00063E  243D               	addwf	??_simulate,w,c
  5391  000640  6E41               	movwf	_simulate$1504,c
  5392  000642  5008               	movf	?_HexDecToDec2+1,w,c
  5393  000644  203E               	addwfc	??_simulate+1,w,c
  5394  000646  6E42               	movwf	_simulate$1504+1,c
  5395                           
  5396                           ;main.c: 130: period = (HexDecToDec2(now[1]) - HexDecToDec2(start[1]))*60 + HexDecToDec2
      +                          (now[0]) - HexDecToDec2(start[0]);
  5397  000648  C041  F001         	movff	_simulate$1504,i2___wmul@multiplier
  5398  00064C  C042  F002         	movff	_simulate$1504+1,i2___wmul@multiplier+1
  5399  000650  0E00               	movlw	0
  5400  000652  6E04               	movwf	i2___wmul@multiplicand+1,c
  5401  000654  0E3C               	movlw	60
  5402  000656  6E03               	movwf	i2___wmul@multiplicand,c
  5403  000658  EC2C  F010         	call	i2___wmul	;wreg free
  5404  00065C  C001  F03D         	movff	?i2___wmul,??_simulate
  5405  000660  C002  F03E         	movff	?i2___wmul+1,??_simulate+1
  5406  000664  C055  F007         	movff	simulate@now,HexDecToDec2@hex
  5407  000668  C056  F008         	movff	simulate@now+1,HexDecToDec2@hex+1
  5408  00066C  ECF8  F00E         	call	_HexDecToDec2	;wreg free
  5409  000670  5007               	movf	?_HexDecToDec2,w,c
  5410  000672  263D               	addwf	??_simulate,f,c
  5411  000674  5008               	movf	?_HexDecToDec2+1,w,c
  5412  000676  223E               	addwfc	??_simulate+1,f,c
  5413  000678  C059  F007         	movff	simulate@start,HexDecToDec2@hex
  5414  00067C  C05A  F008         	movff	simulate@start+1,HexDecToDec2@hex+1
  5415  000680  ECF8  F00E         	call	_HexDecToDec2	;wreg free
  5416  000684  1E07               	comf	?_HexDecToDec2,f,c
  5417  000686  1E08               	comf	?_HexDecToDec2+1,f,c
  5418  000688  4A07               	infsnz	?_HexDecToDec2,f,c
  5419  00068A  2A08               	incf	?_HexDecToDec2+1,f,c
  5420  00068C  5007               	movf	?_HexDecToDec2,w,c
  5421  00068E  243D               	addwf	??_simulate,w,c
  5422  000690  6E61               	movwf	simulate@period,c
  5423  000692  5008               	movf	?_HexDecToDec2+1,w,c
  5424  000694  203E               	addwfc	??_simulate+1,w,c
  5425  000696  6E62               	movwf	simulate@period+1,c
  5426                           
  5427                           ;main.c: 131: line1();
  5428  000698  EC02  F011         	call	i2_line1	;wreg free
  5429                           
  5430                           ;main.c: 132: printf("Period: %u        ", period);
  5431  00069C  0E6C               	movlw	low STR_17
  5432  00069E  6E0D               	movwf	i2printf@f,c
  5433  0006A0  0EFF               	movlw	high STR_17
  5434  0006A2  6E0E               	movwf	i2printf@f+1,c
  5435  0006A4  C061  F00F         	movff	simulate@period,?i2_printf+2
  5436  0006A8  C062  F010         	movff	simulate@period+1,?i2_printf+3
  5437  0006AC  EC91  F003         	call	i2_printf	;wreg free
  5438  0006B0                     i2l4154:
  5439  0006B0  503F               	movf	simulate@stop,w,c
  5440  0006B2  1040               	iorwf	simulate@stop+1,w,c
  5441  0006B4  B4D8               	btfsc	status,2,c
  5442  0006B6  D6C3               	goto	i2l4064
  5443                           
  5444                           ;main.c: 135: }
  5445                           ;main.c: 137: }
  5446                           ;main.c: 139: mode = 2;
  5447  0006B8  0E00               	movlw	0
  5448  0006BA  6E75               	movwf	_mode+1,c
  5449  0006BC  0E02               	movlw	2
  5450  0006BE  6E74               	movwf	_mode,c
  5451                           
  5452                           ;main.c: 140: INT2IE = 0;
  5453  0006C0  98F0               	bcf	intcon3,4,c	;volatile
  5454                           
  5455                           ;main.c: 141: stopMoving(0);
  5456  0006C2  0E00               	movlw	0
  5457  0006C4  EC97  F00F         	call	_stopMoving
  5458                           
  5459                           ;main.c: 142: line1();
  5460  0006C8  EC02  F011         	call	i2_line1	;wreg free
  5461                           
  5462                           ;main.c: 143: printf("Sorting Complete          ");
  5463  0006CC  0EE7               	movlw	low STR_18
  5464  0006CE  6E0D               	movwf	i2printf@f,c
  5465  0006D0  0EFD               	movlw	high STR_18
  5466  0006D2  6E0E               	movwf	i2printf@f+1,c
  5467  0006D4  EC91  F003         	call	i2_printf	;wreg free
  5468                           
  5469                           ;main.c: 144: WriteRun(sorted, period);
  5470  0006D8  0E5D               	movlw	low simulate@sorted
  5471  0006DA  6E07               	movwf	WriteRun@sorted,c
  5472  0006DC  0E00               	movlw	high simulate@sorted
  5473  0006DE  6E08               	movwf	WriteRun@sorted+1,c
  5474  0006E0  C061  F009         	movff	simulate@period,WriteRun@time
  5475  0006E4  C062  F00A         	movff	simulate@period+1,WriteRun@time+1
  5476  0006E8  EC22  F006         	call	_WriteRun	;wreg free
  5477                           
  5478                           ;main.c: 145: _delay((unsigned long)((700)*(8000000/4000.0)));
  5479  0006EC  0E08               	movlw	8
  5480  0006EE  6E3E               	movwf	(??_simulate+1)& (0+255),c
  5481  0006F0  0E1B               	movlw	27
  5482  0006F2  6E3D               	movwf	??_simulate& (0+255),c
  5483  0006F4  0E27               	movlw	39
  5484  0006F6                     i2u315_47:
  5485  0006F6  2EE8               	decfsz	wreg,f,c
  5486  0006F8  D7FE               	bra	i2u315_47
  5487  0006FA  2E3D               	decfsz	??_simulate& (0+255),f,c
  5488  0006FC  D7FC               	bra	i2u315_47
  5489  0006FE  2E3E               	decfsz	(??_simulate+1)& (0+255),f,c
  5490  000700  D7FA               	bra	i2u315_47
  5491  000702  F000               	nop	
  5492                           
  5493                           ;main.c: 146: showInfo(period, sorted);
  5494  000704  C061  F029         	movff	simulate@period,showInfo@time
  5495  000708  C062  F02A         	movff	simulate@period+1,showInfo@time+1
  5496  00070C  0E5D               	movlw	low simulate@sorted
  5497  00070E  6E2B               	movwf	showInfo@sorted,c
  5498  000710  0E00               	movlw	high simulate@sorted
  5499  000712  6E2C               	movwf	showInfo@sorted+1,c
  5500  000714  EC18  F005         	call	_showInfo	;wreg free
  5501                           
  5502                           ;main.c: 147: mode = 0;
  5503  000718  0E00               	movlw	0
  5504  00071A  6E75               	movwf	_mode+1,c
  5505  00071C  0E00               	movlw	0
  5506  00071E  6E74               	movwf	_mode,c
  5507  000720  0012               	return		;funcret
  5508  000722                     __end_of_simulate:
  5509                           	opt stack 0
  5510                           pclatu	equ	0xFFB
  5511                           pclath	equ	0xFFA
  5512                           tblptru	equ	0xFF8
  5513                           tblptrh	equ	0xFF7
  5514                           tblptrl	equ	0xFF6
  5515                           tablat	equ	0xFF5
  5516                           prodh	equ	0xFF4
  5517                           prodl	equ	0xFF3
  5518                           intcon	equ	0xFF2
  5519                           intcon3	equ	0xFF0
  5520                           postinc0	equ	0xFEE
  5521                           fsr0h	equ	0xFEA
  5522                           fsr0l	equ	0xFE9
  5523                           wreg	equ	0xFE8
  5524                           plusw1	equ	0xFE3
  5525                           fsr1h	equ	0xFE2
  5526                           fsr1l	equ	0xFE1
  5527                           indf2	equ	0xFDF
  5528                           postinc2	equ	0xFDE
  5529                           postdec2	equ	0xFDD
  5530                           plusw2	equ	0xFDB
  5531                           fsr2h	equ	0xFDA
  5532                           fsr2l	equ	0xFD9
  5533                           status	equ	0xFD8
  5534                           
  5535 ;; *************** function i2_getTime *****************
  5536 ;; Defined at:
  5537 ;;		line 77 in file "modules.c"
  5538 ;; Parameters:    Size  Location     Type
  5539 ;;  time            2    3[COMRAM] PTR unsigned char 
  5540 ;;		 -> time(7), 
  5541 ;; Auto vars:     Size  Location     Type
  5542 ;;  getTime         1    5[COMRAM] unsigned char 
  5543 ;; Return value:  Size  Location     Type
  5544 ;;                  1    wreg      void 
  5545 ;; Registers used:
  5546 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5547 ;; Tracked objects:
  5548 ;;		On entry : 0/0
  5549 ;;		On exit  : 0/0
  5550 ;;		Unchanged: 0/0
  5551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5552 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5553 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5555 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5556 ;;Total ram usage:        3 bytes
  5557 ;; Hardware stack levels used:    1
  5558 ;; Hardware stack levels required when called:    2
  5559 ;; This function calls:
  5560 ;;		i2_I2C_Master_Read
  5561 ;;		i2_I2C_Master_Start
  5562 ;;		i2_I2C_Master_Stop
  5563 ;;		i2_I2C_Master_Write
  5564 ;; This function is called by:
  5565 ;;		_simulate
  5566 ;; This function uses a non-reentrant model
  5567 ;;
  5568                           
  5569                           	psect	text26
  5570  001B0C                     __ptext26:
  5571                           	opt stack 0
  5572  001B0C                     i2_getTime:
  5573                           	opt stack 22
  5574                           
  5575                           ;modules.c: 78: (INTCONbits.GIE = 0);
  5576                           
  5577                           ;incstack = 0
  5578  001B0C  9EF2               	bcf	intcon,7,c	;volatile
  5579                           
  5580                           ;modules.c: 82: I2C_Master_Start();
  5581  001B0E  ECFE  F010         	call	i2_I2C_Master_Start	;wreg free
  5582                           
  5583                           ;modules.c: 83: I2C_Master_Write(0b11010000);
  5584  001B12  0E00               	movlw	0
  5585  001B14  6E03               	movwf	i2I2C_Master_Write@d+1,c
  5586  001B16  0ED0               	movlw	208
  5587  001B18  6E02               	movwf	i2I2C_Master_Write@d,c
  5588  001B1A  ECE5  F010         	call	i2_I2C_Master_Write	;wreg free
  5589                           
  5590                           ;modules.c: 84: I2C_Master_Write(0x00);
  5591  001B1E  0E00               	movlw	0
  5592  001B20  6E03               	movwf	i2I2C_Master_Write@d+1,c
  5593  001B22  0E00               	movlw	0
  5594  001B24  6E02               	movwf	i2I2C_Master_Write@d,c
  5595  001B26  ECE5  F010         	call	i2_I2C_Master_Write	;wreg free
  5596                           
  5597                           ;modules.c: 85: I2C_Master_Stop();
  5598  001B2A  ECFA  F010         	call	i2_I2C_Master_Stop	;wreg free
  5599                           
  5600                           ;modules.c: 88: I2C_Master_Start();
  5601  001B2E  ECFE  F010         	call	i2_I2C_Master_Start	;wreg free
  5602                           
  5603                           ;modules.c: 89: I2C_Master_Write(0b11010001);
  5604  001B32  0E00               	movlw	0
  5605  001B34  6E03               	movwf	i2I2C_Master_Write@d+1,c
  5606  001B36  0ED1               	movlw	209
  5607  001B38  6E02               	movwf	i2I2C_Master_Write@d,c
  5608  001B3A  ECE5  F010         	call	i2_I2C_Master_Write	;wreg free
  5609                           
  5610                           ;modules.c: 90: for (unsigned char i = 0; i < 0x06; i++) {
  5611  001B3E  0E00               	movlw	0
  5612  001B40  6E06               	movwf	i2getTime@i,c
  5613  001B42                     i2l4012:
  5614  001B42  0E05               	movlw	5
  5615  001B44  6406               	cpfsgt	i2getTime@i,c
  5616  001B46  D001               	goto	i2l4016
  5617  001B48  D00E               	goto	i2l4022
  5618  001B4A                     i2l4016:
  5619                           
  5620                           ;modules.c: 91: time[i] = I2C_Master_Read(1);
  5621  001B4A  5006               	movf	i2getTime@i,w,c
  5622  001B4C  0D01               	mullw	1
  5623  001B4E  50F3               	movf	prodl,w,c
  5624  001B50  2404               	addwf	i2getTime@time,w,c
  5625  001B52  6ED9               	movwf	fsr2l,c
  5626  001B54  50F4               	movf	prodh,w,c
  5627  001B56  2005               	addwfc	i2getTime@time+1,w,c
  5628  001B58  6EDA               	movwf	fsr2h,c
  5629  001B5A  0E01               	movlw	1
  5630  001B5C  EC06  F010         	call	i2_I2C_Master_Read
  5631  001B60  6EDF               	movwf	indf2,c
  5632  001B62  2A06               	incf	i2getTime@i,f,c
  5633  001B64  D7EE               	goto	i2l4012
  5634  001B66                     i2l4022:
  5635                           
  5636                           ;modules.c: 92: }
  5637                           ;modules.c: 93: time[6] = I2C_Master_Read(0);
  5638  001B66  EE20 F006          	lfsr	2,6
  5639  001B6A  5004               	movf	i2getTime@time,w,c
  5640  001B6C  26D9               	addwf	fsr2l,f,c
  5641  001B6E  5005               	movf	i2getTime@time+1,w,c
  5642  001B70  22DA               	addwfc	fsr2h,f,c
  5643  001B72  0E00               	movlw	0
  5644  001B74  EC06  F010         	call	i2_I2C_Master_Read
  5645  001B78  6EDF               	movwf	indf2,c
  5646                           
  5647                           ;modules.c: 94: I2C_Master_Stop();
  5648  001B7A  ECFA  F010         	call	i2_I2C_Master_Stop	;wreg free
  5649                           
  5650                           ;modules.c: 95: (INTCONbits.GIE = 1);
  5651  001B7E  8EF2               	bsf	intcon,7,c	;volatile
  5652  001B80  0012               	return		;funcret
  5653  001B82                     __end_ofi2_getTime:
  5654                           	opt stack 0
  5655                           pclatu	equ	0xFFB
  5656                           pclath	equ	0xFFA
  5657                           tblptru	equ	0xFF8
  5658                           tblptrh	equ	0xFF7
  5659                           tblptrl	equ	0xFF6
  5660                           tablat	equ	0xFF5
  5661                           prodh	equ	0xFF4
  5662                           prodl	equ	0xFF3
  5663                           intcon	equ	0xFF2
  5664                           intcon3	equ	0xFF0
  5665                           postinc0	equ	0xFEE
  5666                           fsr0h	equ	0xFEA
  5667                           fsr0l	equ	0xFE9
  5668                           wreg	equ	0xFE8
  5669                           plusw1	equ	0xFE3
  5670                           fsr1h	equ	0xFE2
  5671                           fsr1l	equ	0xFE1
  5672                           indf2	equ	0xFDF
  5673                           postinc2	equ	0xFDE
  5674                           postdec2	equ	0xFDD
  5675                           plusw2	equ	0xFDB
  5676                           fsr2h	equ	0xFDA
  5677                           fsr2l	equ	0xFD9
  5678                           status	equ	0xFD8
  5679                           
  5680 ;; *************** function i2_I2C_Master_Write *****************
  5681 ;; Defined at:
  5682 ;;		line 42 in file "I2C.c"
  5683 ;; Parameters:    Size  Location     Type
  5684 ;;  d               2    1[COMRAM] unsigned int 
  5685 ;; Auto vars:     Size  Location     Type
  5686 ;;		None
  5687 ;; Return value:  Size  Location     Type
  5688 ;;                  1    wreg      void 
  5689 ;; Registers used:
  5690 ;;		wreg, status,2, status,0, cstack
  5691 ;; Tracked objects:
  5692 ;;		On entry : 0/0
  5693 ;;		On exit  : 0/0
  5694 ;;		Unchanged: 0/0
  5695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5696 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5699 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5700 ;;Total ram usage:        2 bytes
  5701 ;; Hardware stack levels used:    1
  5702 ;; Hardware stack levels required when called:    1
  5703 ;; This function calls:
  5704 ;;		i2_I2C_Master_Wait
  5705 ;; This function is called by:
  5706 ;;		i2_getTime
  5707 ;; This function uses a non-reentrant model
  5708 ;;
  5709                           
  5710                           	psect	text27
  5711  0021CA                     __ptext27:
  5712                           	opt stack 0
  5713  0021CA                     i2_I2C_Master_Write:
  5714                           	opt stack 22
  5715                           
  5716                           ;I2C.c: 43: I2C_Master_Wait();
  5717                           
  5718                           ;incstack = 0
  5719  0021CA  ECBB  F010         	call	i2_I2C_Master_Wait	;wreg free
  5720                           
  5721                           ;I2C.c: 44: SSPBUF = d;
  5722  0021CE  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
  5723  0021D2  0012               	return		;funcret
  5724  0021D4                     __end_ofi2_I2C_Master_Write:
  5725                           	opt stack 0
  5726                           pclatu	equ	0xFFB
  5727                           pclath	equ	0xFFA
  5728                           tblptru	equ	0xFF8
  5729                           tblptrh	equ	0xFF7
  5730                           tblptrl	equ	0xFF6
  5731                           tablat	equ	0xFF5
  5732                           prodh	equ	0xFF4
  5733                           prodl	equ	0xFF3
  5734                           intcon	equ	0xFF2
  5735                           intcon3	equ	0xFF0
  5736                           postinc0	equ	0xFEE
  5737                           fsr0h	equ	0xFEA
  5738                           fsr0l	equ	0xFE9
  5739                           wreg	equ	0xFE8
  5740                           plusw1	equ	0xFE3
  5741                           fsr1h	equ	0xFE2
  5742                           fsr1l	equ	0xFE1
  5743                           indf2	equ	0xFDF
  5744                           postinc2	equ	0xFDE
  5745                           postdec2	equ	0xFDD
  5746                           plusw2	equ	0xFDB
  5747                           fsr2h	equ	0xFDA
  5748                           fsr2l	equ	0xFD9
  5749                           status	equ	0xFD8
  5750                           
  5751 ;; *************** function i2_I2C_Master_Stop *****************
  5752 ;; Defined at:
  5753 ;;		line 37 in file "I2C.c"
  5754 ;; Parameters:    Size  Location     Type
  5755 ;;		None
  5756 ;; Auto vars:     Size  Location     Type
  5757 ;;		None
  5758 ;; Return value:  Size  Location     Type
  5759 ;;                  1    wreg      void 
  5760 ;; Registers used:
  5761 ;;		wreg, status,2, status,0, cstack
  5762 ;; Tracked objects:
  5763 ;;		On entry : 0/0
  5764 ;;		On exit  : 0/0
  5765 ;;		Unchanged: 0/0
  5766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5771 ;;Total ram usage:        0 bytes
  5772 ;; Hardware stack levels used:    1
  5773 ;; Hardware stack levels required when called:    1
  5774 ;; This function calls:
  5775 ;;		i2_I2C_Master_Wait
  5776 ;; This function is called by:
  5777 ;;		i2_getTime
  5778 ;; This function uses a non-reentrant model
  5779 ;;
  5780                           
  5781                           	psect	text28
  5782  0021F4                     __ptext28:
  5783                           	opt stack 0
  5784  0021F4                     i2_I2C_Master_Stop:
  5785                           	opt stack 22
  5786                           
  5787                           ;I2C.c: 38: I2C_Master_Wait();
  5788                           
  5789                           ;incstack = 0
  5790  0021F4  ECBB  F010         	call	i2_I2C_Master_Wait	;wreg free
  5791                           
  5792                           ;I2C.c: 39: PEN = 1;
  5793  0021F8  84C5               	bsf	4037,2,c	;volatile
  5794  0021FA  0012               	return		;funcret
  5795  0021FC                     __end_ofi2_I2C_Master_Stop:
  5796                           	opt stack 0
  5797                           pclatu	equ	0xFFB
  5798                           pclath	equ	0xFFA
  5799                           tblptru	equ	0xFF8
  5800                           tblptrh	equ	0xFF7
  5801                           tblptrl	equ	0xFF6
  5802                           tablat	equ	0xFF5
  5803                           prodh	equ	0xFF4
  5804                           prodl	equ	0xFF3
  5805                           intcon	equ	0xFF2
  5806                           intcon3	equ	0xFF0
  5807                           postinc0	equ	0xFEE
  5808                           fsr0h	equ	0xFEA
  5809                           fsr0l	equ	0xFE9
  5810                           wreg	equ	0xFE8
  5811                           plusw1	equ	0xFE3
  5812                           fsr1h	equ	0xFE2
  5813                           fsr1l	equ	0xFE1
  5814                           indf2	equ	0xFDF
  5815                           postinc2	equ	0xFDE
  5816                           postdec2	equ	0xFDD
  5817                           plusw2	equ	0xFDB
  5818                           fsr2h	equ	0xFDA
  5819                           fsr2l	equ	0xFD9
  5820                           status	equ	0xFD8
  5821                           
  5822 ;; *************** function i2_I2C_Master_Start *****************
  5823 ;; Defined at:
  5824 ;;		line 27 in file "I2C.c"
  5825 ;; Parameters:    Size  Location     Type
  5826 ;;		None
  5827 ;; Auto vars:     Size  Location     Type
  5828 ;;		None
  5829 ;; Return value:  Size  Location     Type
  5830 ;;                  1    wreg      void 
  5831 ;; Registers used:
  5832 ;;		wreg, status,2, status,0, cstack
  5833 ;; Tracked objects:
  5834 ;;		On entry : 0/0
  5835 ;;		On exit  : 0/0
  5836 ;;		Unchanged: 0/0
  5837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5841 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5842 ;;Total ram usage:        0 bytes
  5843 ;; Hardware stack levels used:    1
  5844 ;; Hardware stack levels required when called:    1
  5845 ;; This function calls:
  5846 ;;		i2_I2C_Master_Wait
  5847 ;; This function is called by:
  5848 ;;		i2_getTime
  5849 ;; This function uses a non-reentrant model
  5850 ;;
  5851                           
  5852                           	psect	text29
  5853  0021FC                     __ptext29:
  5854                           	opt stack 0
  5855  0021FC                     i2_I2C_Master_Start:
  5856                           	opt stack 22
  5857                           
  5858                           ;I2C.c: 28: I2C_Master_Wait();
  5859                           
  5860                           ;incstack = 0
  5861  0021FC  ECBB  F010         	call	i2_I2C_Master_Wait	;wreg free
  5862                           
  5863                           ;I2C.c: 29: SEN = 1;
  5864  002200  80C5               	bsf	4037,0,c	;volatile
  5865  002202  0012               	return		;funcret
  5866  002204                     __end_ofi2_I2C_Master_Start:
  5867                           	opt stack 0
  5868                           pclatu	equ	0xFFB
  5869                           pclath	equ	0xFFA
  5870                           tblptru	equ	0xFF8
  5871                           tblptrh	equ	0xFF7
  5872                           tblptrl	equ	0xFF6
  5873                           tablat	equ	0xFF5
  5874                           prodh	equ	0xFF4
  5875                           prodl	equ	0xFF3
  5876                           intcon	equ	0xFF2
  5877                           intcon3	equ	0xFF0
  5878                           postinc0	equ	0xFEE
  5879                           fsr0h	equ	0xFEA
  5880                           fsr0l	equ	0xFE9
  5881                           wreg	equ	0xFE8
  5882                           plusw1	equ	0xFE3
  5883                           fsr1h	equ	0xFE2
  5884                           fsr1l	equ	0xFE1
  5885                           indf2	equ	0xFDF
  5886                           postinc2	equ	0xFDE
  5887                           postdec2	equ	0xFDD
  5888                           plusw2	equ	0xFDB
  5889                           fsr2h	equ	0xFDA
  5890                           fsr2l	equ	0xFD9
  5891                           status	equ	0xFD8
  5892                           
  5893 ;; *************** function i2_I2C_Master_Read *****************
  5894 ;; Defined at:
  5895 ;;		line 47 in file "I2C.c"
  5896 ;; Parameters:    Size  Location     Type
  5897 ;;  a               1    wreg     unsigned char 
  5898 ;; Auto vars:     Size  Location     Type
  5899 ;;  a               1    1[COMRAM] unsigned char 
  5900 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
  5901 ;; Return value:  Size  Location     Type
  5902 ;;                  1    wreg      unsigned char 
  5903 ;; Registers used:
  5904 ;;		wreg, status,2, status,0, cstack
  5905 ;; Tracked objects:
  5906 ;;		On entry : 0/0
  5907 ;;		On exit  : 0/0
  5908 ;;		Unchanged: 0/0
  5909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5911 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5913 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5914 ;;Total ram usage:        2 bytes
  5915 ;; Hardware stack levels used:    1
  5916 ;; Hardware stack levels required when called:    1
  5917 ;; This function calls:
  5918 ;;		i2_I2C_Master_Wait
  5919 ;; This function is called by:
  5920 ;;		i2_getTime
  5921 ;; This function uses a non-reentrant model
  5922 ;;
  5923                           
  5924                           	psect	text30
  5925  00200C                     __ptext30:
  5926                           	opt stack 0
  5927  00200C                     i2_I2C_Master_Read:
  5928                           	opt stack 22
  5929                           
  5930                           ;incstack = 0
  5931                           ;i2I2C_Master_Read@a stored from wreg
  5932  00200C  6E02               	movwf	i2I2C_Master_Read@a,c
  5933                           
  5934                           ;I2C.c: 48: unsigned char temp;
  5935                           ;I2C.c: 49: I2C_Master_Wait();
  5936  00200E  ECBB  F010         	call	i2_I2C_Master_Wait	;wreg free
  5937                           
  5938                           ;I2C.c: 50: RCEN = 1;
  5939  002012  86C5               	bsf	4037,3,c	;volatile
  5940                           
  5941                           ;I2C.c: 51: I2C_Master_Wait();
  5942  002014  ECBB  F010         	call	i2_I2C_Master_Wait	;wreg free
  5943                           
  5944                           ;I2C.c: 52: temp = SSPBUF;
  5945  002018  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
  5946                           
  5947                           ;I2C.c: 53: I2C_Master_Wait();
  5948  00201C  ECBB  F010         	call	i2_I2C_Master_Wait	;wreg free
  5949                           
  5950                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
  5951  002020  5002               	movf	i2I2C_Master_Read@a,w,c
  5952  002022  A4D8               	btfss	status,2,c
  5953  002024  D002               	goto	i2u237_40
  5954  002026  8AC5               	bsf	4037,5,c	;volatile
  5955  002028  D001               	goto	i2l3422
  5956  00202A                     i2u237_40:
  5957  00202A  9AC5               	bcf	4037,5,c	;volatile
  5958  00202C                     i2l3422:
  5959                           
  5960                           ;I2C.c: 55: ACKEN = 1;
  5961  00202C  88C5               	bsf	4037,4,c	;volatile
  5962                           
  5963                           ;I2C.c: 56: return temp;
  5964  00202E  5003               	movf	i2I2C_Master_Read@temp,w,c
  5965  002030  0012               	return	
  5966  002032                     __end_ofi2_I2C_Master_Read:
  5967                           	opt stack 0
  5968                           pclatu	equ	0xFFB
  5969                           pclath	equ	0xFFA
  5970                           tblptru	equ	0xFF8
  5971                           tblptrh	equ	0xFF7
  5972                           tblptrl	equ	0xFF6
  5973                           tablat	equ	0xFF5
  5974                           prodh	equ	0xFF4
  5975                           prodl	equ	0xFF3
  5976                           intcon	equ	0xFF2
  5977                           intcon3	equ	0xFF0
  5978                           postinc0	equ	0xFEE
  5979                           fsr0h	equ	0xFEA
  5980                           fsr0l	equ	0xFE9
  5981                           wreg	equ	0xFE8
  5982                           plusw1	equ	0xFE3
  5983                           fsr1h	equ	0xFE2
  5984                           fsr1l	equ	0xFE1
  5985                           indf2	equ	0xFDF
  5986                           postinc2	equ	0xFDE
  5987                           postdec2	equ	0xFDD
  5988                           plusw2	equ	0xFDB
  5989                           fsr2h	equ	0xFDA
  5990                           fsr2l	equ	0xFD9
  5991                           status	equ	0xFD8
  5992                           
  5993 ;; *************** function i2_I2C_Master_Wait *****************
  5994 ;; Defined at:
  5995 ;;		line 23 in file "I2C.c"
  5996 ;; Parameters:    Size  Location     Type
  5997 ;;		None
  5998 ;; Auto vars:     Size  Location     Type
  5999 ;;		None
  6000 ;; Return value:  Size  Location     Type
  6001 ;;                  1    wreg      void 
  6002 ;; Registers used:
  6003 ;;		wreg, status,2, status,0
  6004 ;; Tracked objects:
  6005 ;;		On entry : 0/0
  6006 ;;		On exit  : 0/0
  6007 ;;		Unchanged: 0/0
  6008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6010 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6011 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6012 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6013 ;;Total ram usage:        1 bytes
  6014 ;; Hardware stack levels used:    1
  6015 ;; This function calls:
  6016 ;;		Nothing
  6017 ;; This function is called by:
  6018 ;;		i2_I2C_Master_Start
  6019 ;;		i2_I2C_Master_Stop
  6020 ;;		i2_I2C_Master_Write
  6021 ;;		i2_I2C_Master_Read
  6022 ;; This function uses a non-reentrant model
  6023 ;;
  6024                           
  6025                           	psect	text31
  6026  002176                     __ptext31:
  6027                           	opt stack 0
  6028  002176                     i2_I2C_Master_Wait:
  6029                           	opt stack 22
  6030  002176                     i2l373:
  6031  002176  B4C7               	btfsc	4039,2,c	;volatile
  6032  002178  D7FE               	goto	i2l373
  6033  00217A  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
  6034  00217E  0E1F               	movlw	31
  6035  002180  1601               	andwf	??i2_I2C_Master_Wait,f,c
  6036  002182  B4D8               	btfsc	status,2,c
  6037  002184  0012               	return	
  6038  002186  D7F7               	goto	i2l373
  6039  002188                     __end_ofi2_I2C_Master_Wait:
  6040                           	opt stack 0
  6041                           pclatu	equ	0xFFB
  6042                           pclath	equ	0xFFA
  6043                           tblptru	equ	0xFF8
  6044                           tblptrh	equ	0xFF7
  6045                           tblptrl	equ	0xFF6
  6046                           tablat	equ	0xFF5
  6047                           prodh	equ	0xFF4
  6048                           prodl	equ	0xFF3
  6049                           intcon	equ	0xFF2
  6050                           intcon3	equ	0xFF0
  6051                           postinc0	equ	0xFEE
  6052                           fsr0h	equ	0xFEA
  6053                           fsr0l	equ	0xFE9
  6054                           wreg	equ	0xFE8
  6055                           plusw1	equ	0xFE3
  6056                           fsr1h	equ	0xFE2
  6057                           fsr1l	equ	0xFE1
  6058                           indf2	equ	0xFDF
  6059                           postinc2	equ	0xFDE
  6060                           postdec2	equ	0xFDD
  6061                           plusw2	equ	0xFDB
  6062                           fsr2h	equ	0xFDA
  6063                           fsr2l	equ	0xFD9
  6064                           status	equ	0xFD8
  6065                           
  6066 ;; *************** function _stopMoving *****************
  6067 ;; Defined at:
  6068 ;;		line 29 in file "motors.c"
  6069 ;; Parameters:    Size  Location     Type
  6070 ;;  em              1    wreg     unsigned char 
  6071 ;; Auto vars:     Size  Location     Type
  6072 ;;  em              1   42[COMRAM] unsigned char 
  6073 ;; Return value:  Size  Location     Type
  6074 ;;                  1    wreg      void 
  6075 ;; Registers used:
  6076 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6077 ;; Tracked objects:
  6078 ;;		On entry : 0/0
  6079 ;;		On exit  : 0/0
  6080 ;;		Unchanged: 0/0
  6081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6083 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6085 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6086 ;;Total ram usage:        3 bytes
  6087 ;; Hardware stack levels used:    1
  6088 ;; Hardware stack levels required when called:    3
  6089 ;; This function calls:
  6090 ;;		i2_line0
  6091 ;;		i2_printf
  6092 ;; This function is called by:
  6093 ;;		_simulate
  6094 ;;		_intrpt
  6095 ;; This function uses a non-reentrant model
  6096 ;;
  6097                           
  6098                           	psect	text32
  6099  001F2E                     __ptext32:
  6100                           	opt stack 0
  6101  001F2E                     _stopMoving:
  6102                           	opt stack 22
  6103                           
  6104                           ;incstack = 0
  6105                           ;stopMoving@em stored from wreg
  6106  001F2E  6E2B               	movwf	stopMoving@em,c
  6107                           
  6108                           ;motors.c: 30: (INTCONbits.GIE = 0);
  6109  001F30  9EF2               	bcf	intcon,7,c	;volatile
  6110                           
  6111                           ;motors.c: 31: LATC = 0;
  6112  001F32  0E00               	movlw	0
  6113  001F34  6E8B               	movwf	3979,c	;volatile
  6114                           
  6115                           ;motors.c: 32: line0();printf(em ? "Emergency          " : "Stopped          ");
  6116  001F36  EC06  F011         	call	i2_line0	;wreg free
  6117  001F3A  502B               	movf	stopMoving@em,w,c
  6118  001F3C  A4D8               	btfss	status,2,c
  6119  001F3E  D004               	goto	i2l3888
  6120  001F40  0E7F               	movlw	low STR_37
  6121  001F42  6E29               	movwf	_stopMoving$552,c
  6122  001F44  0EFF               	movlw	high STR_37
  6123  001F46  D003               	goto	L1
  6124  001F48                     i2l3888:
  6125  001F48  0E31               	movlw	low STR_36
  6126  001F4A  6E29               	movwf	_stopMoving$552,c
  6127  001F4C  0EFF               	movlw	high STR_36
  6128  001F4E                     L1:
  6129  001F4E  6E2A               	movwf	_stopMoving$552+1,c
  6130  001F50  C029  F00D         	movff	_stopMoving$552,i2printf@f
  6131  001F54  C02A  F00E         	movff	_stopMoving$552+1,i2printf@f+1
  6132  001F58  EC91  F003         	call	i2_printf	;wreg free
  6133                           
  6134                           ;motors.c: 33: if (em)
  6135  001F5C  502B               	movf	stopMoving@em,w,c
  6136  001F5E  B4D8               	btfsc	status,2,c
  6137  001F60  0012               	return	
  6138  001F62                     i2l278:
  6139  001F62  D7FF               	goto	i2l278
  6140  001F64                     __end_of_stopMoving:
  6141                           	opt stack 0
  6142                           pclatu	equ	0xFFB
  6143                           pclath	equ	0xFFA
  6144                           tblptru	equ	0xFF8
  6145                           tblptrh	equ	0xFF7
  6146                           tblptrl	equ	0xFF6
  6147                           tablat	equ	0xFF5
  6148                           prodh	equ	0xFF4
  6149                           prodl	equ	0xFF3
  6150                           intcon	equ	0xFF2
  6151                           intcon3	equ	0xFF0
  6152                           postinc0	equ	0xFEE
  6153                           fsr0h	equ	0xFEA
  6154                           fsr0l	equ	0xFE9
  6155                           wreg	equ	0xFE8
  6156                           plusw1	equ	0xFE3
  6157                           fsr1h	equ	0xFE2
  6158                           fsr1l	equ	0xFE1
  6159                           indf2	equ	0xFDF
  6160                           postinc2	equ	0xFDE
  6161                           postdec2	equ	0xFDD
  6162                           plusw2	equ	0xFDB
  6163                           fsr2h	equ	0xFDA
  6164                           fsr2l	equ	0xFD9
  6165                           status	equ	0xFD8
  6166                           
  6167 ;; *************** function _checkC *****************
  6168 ;; Defined at:
  6169 ;;		line 62 in file "sensors.c"
  6170 ;; Parameters:    Size  Location     Type
  6171 ;;  sorted          2   58[COMRAM] PTR unsigned char 
  6172 ;;		 -> simulate@sorted(4), 
  6173 ;; Auto vars:     Size  Location     Type
  6174 ;;		None
  6175 ;; Return value:  Size  Location     Type
  6176 ;;                  2   58[COMRAM] int 
  6177 ;; Registers used:
  6178 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6179 ;; Tracked objects:
  6180 ;;		On entry : 0/0
  6181 ;;		On exit  : 0/0
  6182 ;;		Unchanged: 0/0
  6183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6184 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6187 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6188 ;;Total ram usage:        2 bytes
  6189 ;; Hardware stack levels used:    1
  6190 ;; Hardware stack levels required when called:    3
  6191 ;; This function calls:
  6192 ;;		_checkV
  6193 ;;		i2_printf
  6194 ;; This function is called by:
  6195 ;;		_simulate
  6196 ;; This function uses a non-reentrant model
  6197 ;;
  6198                           
  6199                           	psect	text33
  6200  0014B4                     __ptext33:
  6201                           	opt stack 0
  6202  0014B4                     _checkC:
  6203                           	opt stack 21
  6204                           
  6205                           ;sensors.c: 65: printf("C:");
  6206                           
  6207                           ;incstack = 0
  6208  0014B4  0EF3               	movlw	low (STR_8+1)
  6209  0014B6  6E0D               	movwf	i2printf@f,c
  6210  0014B8  0EFF               	movlw	high (STR_8+1)
  6211  0014BA  6E0E               	movwf	i2printf@f+1,c
  6212  0014BC  EC91  F003         	call	i2_printf	;wreg free
  6213                           
  6214                           ;sensors.c: 66: switch (checkV(1, 1.5)) {
  6215  0014C0  D032               	goto	i2l3794
  6216  0014C2                     i2l3766:
  6217                           
  6218                           ;sensors.c: 69: printf(" 1 ");
  6219  0014C2  0EE6               	movlw	low STR_39
  6220  0014C4  6E0D               	movwf	i2printf@f,c
  6221  0014C6  0EFF               	movlw	high STR_39
  6222  0014C8  6E0E               	movwf	i2printf@f+1,c
  6223  0014CA  EC91  F003         	call	i2_printf	;wreg free
  6224                           
  6225                           ;sensors.c: 70: sorted[1]++;
  6226  0014CE  EE20 F001          	lfsr	2,1
  6227  0014D2  503B               	movf	checkC@sorted,w,c
  6228  0014D4  26D9               	addwf	fsr2l,f,c
  6229  0014D6  503C               	movf	checkC@sorted+1,w,c
  6230  0014D8  22DA               	addwfc	fsr2h,f,c
  6231  0014DA  2ADF               	incf	indf2,f,c
  6232                           
  6233                           ;sensors.c: 71: return 1;
  6234  0014DC  0E00               	movlw	0
  6235  0014DE  6E3C               	movwf	?_checkC+1,c
  6236  0014E0  0E01               	movlw	1
  6237  0014E2  6E3B               	movwf	?_checkC,c
  6238  0014E4  0012               	return	
  6239  0014E6                     i2l3774:
  6240                           
  6241                           ;sensors.c: 74: printf(" 0 ");
  6242  0014E6  0EE2               	movlw	low STR_40
  6243  0014E8  6E0D               	movwf	i2printf@f,c
  6244  0014EA  0EFF               	movlw	high STR_40
  6245  0014EC  6E0E               	movwf	i2printf@f+1,c
  6246  0014EE  EC91  F003         	call	i2_printf	;wreg free
  6247                           
  6248                           ;sensors.c: 75: sorted[3]++;
  6249  0014F2  EE20 F003          	lfsr	2,3
  6250  0014F6  503B               	movf	checkC@sorted,w,c
  6251  0014F8  26D9               	addwf	fsr2l,f,c
  6252  0014FA  503C               	movf	checkC@sorted+1,w,c
  6253  0014FC  22DA               	addwfc	fsr2h,f,c
  6254  0014FE  2ADF               	incf	indf2,f,c
  6255                           
  6256                           ;sensors.c: 76: return 0;
  6257  001500  0E00               	movlw	0
  6258  001502  6E3C               	movwf	?_checkC+1,c
  6259  001504  0E00               	movlw	0
  6260  001506  6E3B               	movwf	?_checkC,c
  6261  001508  0012               	return	
  6262  00150A                     i2l3782:
  6263                           
  6264                           ;sensors.c: 79: printf("-1 ");
  6265  00150A  0EEA               	movlw	low STR_41
  6266  00150C  6E0D               	movwf	i2printf@f,c
  6267  00150E  0EFF               	movlw	high STR_41
  6268  001510  6E0E               	movwf	i2printf@f+1,c
  6269  001512  EC91  F003         	call	i2_printf	;wreg free
  6270                           
  6271                           ;sensors.c: 80: return -1;
  6272  001516  683B               	setf	?_checkC,c
  6273  001518  683C               	setf	?_checkC+1,c
  6274  00151A  0012               	return	
  6275  00151C                     i2l3788:
  6276                           
  6277                           ;sensors.c: 82: return 0;
  6278  00151C  0E00               	movlw	0
  6279  00151E  6E3C               	movwf	?_checkC+1,c
  6280  001520  0E00               	movlw	0
  6281  001522  6E3B               	movwf	?_checkC,c
  6282                           
  6283                           ;sensors.c: 83: }
  6284  001524  0012               	return	
  6285  001526                     i2l3794:
  6286  001526  0E00               	movlw	0
  6287  001528  6E31               	movwf	checkV@channel+1,c
  6288  00152A  0E01               	movlw	1
  6289  00152C  6E30               	movwf	checkV@channel,c
  6290  00152E  0E00               	movlw	0
  6291  001530  6E32               	movwf	checkV@max,c
  6292  001532  0EC0               	movlw	192
  6293  001534  6E33               	movwf	checkV@max+1,c
  6294  001536  0E3F               	movlw	63
  6295  001538  6E34               	movwf	checkV@max+2,c
  6296  00153A  ECD3  F006         	call	_checkV	;wreg free
  6297                           
  6298                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  6299                           ; Switch size 1, requested type "space"
  6300                           ; Number of cases is 2, Range of values is 0 to 255
  6301                           ; switch strategies available:
  6302                           ; Name         Instructions Cycles
  6303                           ; simple_byte            7     4 (average)
  6304                           ;	Chosen strategy is simple_byte
  6305  00153E  5031               	movf	?_checkV+1,w,c
  6306  001540  0A00               	xorlw	0	; case 0
  6307  001542  B4D8               	btfsc	status,2,c
  6308  001544  D004               	goto	i2l4452
  6309  001546  0AFF               	xorlw	255	; case 255
  6310  001548  B4D8               	btfsc	status,2,c
  6311  00154A  D009               	goto	i2l4454
  6312  00154C  D7E7               	goto	i2l3788
  6313  00154E                     i2l4452:
  6314                           
  6315                           ; Switch size 1, requested type "space"
  6316                           ; Number of cases is 2, Range of values is 0 to 1
  6317                           ; switch strategies available:
  6318                           ; Name         Instructions Cycles
  6319                           ; simple_byte            7     4 (average)
  6320                           ;	Chosen strategy is simple_byte
  6321  00154E  5030               	movf	?_checkV,w,c
  6322  001550  0A00               	xorlw	0	; case 0
  6323  001552  B4D8               	btfsc	status,2,c
  6324  001554  D7DA               	goto	i2l3782
  6325  001556  0A01               	xorlw	1	; case 1
  6326  001558  B4D8               	btfsc	status,2,c
  6327  00155A  D7B3               	goto	i2l3766
  6328  00155C  D7DF               	goto	i2l3788
  6329  00155E                     i2l4454:
  6330                           
  6331                           ; Switch size 1, requested type "space"
  6332                           ; Number of cases is 1, Range of values is 255 to 255
  6333                           ; switch strategies available:
  6334                           ; Name         Instructions Cycles
  6335                           ; simple_byte            4     3 (average)
  6336                           ;	Chosen strategy is simple_byte
  6337  00155E  5030               	movf	?_checkV,w,c
  6338  001560  0AFF               	xorlw	255	; case 255
  6339  001562  B4D8               	btfsc	status,2,c
  6340  001564  D7C0               	goto	i2l3774
  6341  001566  D7DA               	goto	i2l3788
  6342  001568                     __end_of_checkC:
  6343                           	opt stack 0
  6344                           pclatu	equ	0xFFB
  6345                           pclath	equ	0xFFA
  6346                           tblptru	equ	0xFF8
  6347                           tblptrh	equ	0xFF7
  6348                           tblptrl	equ	0xFF6
  6349                           tablat	equ	0xFF5
  6350                           prodh	equ	0xFF4
  6351                           prodl	equ	0xFF3
  6352                           intcon	equ	0xFF2
  6353                           intcon3	equ	0xFF0
  6354                           postinc0	equ	0xFEE
  6355                           fsr0h	equ	0xFEA
  6356                           fsr0l	equ	0xFE9
  6357                           wreg	equ	0xFE8
  6358                           plusw1	equ	0xFE3
  6359                           fsr1h	equ	0xFE2
  6360                           fsr1l	equ	0xFE1
  6361                           indf2	equ	0xFDF
  6362                           postinc2	equ	0xFDE
  6363                           postdec2	equ	0xFDD
  6364                           plusw2	equ	0xFDB
  6365                           fsr2h	equ	0xFDA
  6366                           fsr2l	equ	0xFD9
  6367                           status	equ	0xFD8
  6368                           
  6369 ;; *************** function _checkAA *****************
  6370 ;; Defined at:
  6371 ;;		line 38 in file "sensors.c"
  6372 ;; Parameters:    Size  Location     Type
  6373 ;;  sorted          2   58[COMRAM] PTR unsigned char 
  6374 ;;		 -> simulate@sorted(4), 
  6375 ;; Auto vars:     Size  Location     Type
  6376 ;;		None
  6377 ;; Return value:  Size  Location     Type
  6378 ;;                  2   58[COMRAM] int 
  6379 ;; Registers used:
  6380 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6381 ;; Tracked objects:
  6382 ;;		On entry : 0/0
  6383 ;;		On exit  : 0/0
  6384 ;;		Unchanged: 0/0
  6385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6386 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6389 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6390 ;;Total ram usage:        2 bytes
  6391 ;; Hardware stack levels used:    1
  6392 ;; Hardware stack levels required when called:    3
  6393 ;; This function calls:
  6394 ;;		_checkV
  6395 ;;		i2_printf
  6396 ;; This function is called by:
  6397 ;;		_simulate
  6398 ;; This function uses a non-reentrant model
  6399 ;;
  6400                           
  6401                           	psect	text34
  6402  00161C                     __ptext34:
  6403                           	opt stack 0
  6404  00161C                     _checkAA:
  6405                           	opt stack 21
  6406                           
  6407                           ;sensors.c: 41: printf("AA:");
  6408                           
  6409                           ;incstack = 0
  6410  00161C  0EEE               	movlw	low STR_4
  6411  00161E  6E0D               	movwf	i2printf@f,c
  6412  001620  0EFF               	movlw	high STR_4
  6413  001622  6E0E               	movwf	i2printf@f+1,c
  6414  001624  EC91  F003         	call	i2_printf	;wreg free
  6415                           
  6416                           ;sensors.c: 42: switch (checkV(0, 1.5)) {
  6417  001628  D030               	goto	i2l3754
  6418  00162A                     i2l3726:
  6419                           
  6420                           ;sensors.c: 45: printf(" 1 ");
  6421  00162A  0EE6               	movlw	low STR_39
  6422  00162C  6E0D               	movwf	i2printf@f,c
  6423  00162E  0EFF               	movlw	high STR_39
  6424  001630  6E0E               	movwf	i2printf@f+1,c
  6425  001632  EC91  F003         	call	i2_printf	;wreg free
  6426                           
  6427                           ;sensors.c: 46: sorted[0]++;
  6428  001636  C03B  FFD9         	movff	checkAA@sorted,fsr2l
  6429  00163A  C03C  FFDA         	movff	checkAA@sorted+1,fsr2h
  6430  00163E  2ADF               	incf	indf2,f,c
  6431                           
  6432                           ;sensors.c: 47: return 1;
  6433  001640  0E00               	movlw	0
  6434  001642  6E3C               	movwf	?_checkAA+1,c
  6435  001644  0E01               	movlw	1
  6436  001646  6E3B               	movwf	?_checkAA,c
  6437  001648  0012               	return	
  6438  00164A                     i2l3734:
  6439                           
  6440                           ;sensors.c: 50: printf(" 0 ");
  6441  00164A  0EE2               	movlw	low STR_40
  6442  00164C  6E0D               	movwf	i2printf@f,c
  6443  00164E  0EFF               	movlw	high STR_40
  6444  001650  6E0E               	movwf	i2printf@f+1,c
  6445  001652  EC91  F003         	call	i2_printf	;wreg free
  6446                           
  6447                           ;sensors.c: 51: sorted[3]++;
  6448  001656  EE20 F003          	lfsr	2,3
  6449  00165A  503B               	movf	checkAA@sorted,w,c
  6450  00165C  26D9               	addwf	fsr2l,f,c
  6451  00165E  503C               	movf	checkAA@sorted+1,w,c
  6452  001660  22DA               	addwfc	fsr2h,f,c
  6453  001662  2ADF               	incf	indf2,f,c
  6454                           
  6455                           ;sensors.c: 52: return 0;
  6456  001664  0E00               	movlw	0
  6457  001666  6E3C               	movwf	?_checkAA+1,c
  6458  001668  0E00               	movlw	0
  6459  00166A  6E3B               	movwf	?_checkAA,c
  6460  00166C  0012               	return	
  6461  00166E                     i2l3742:
  6462                           
  6463                           ;sensors.c: 55: printf("-1 ");
  6464  00166E  0EEA               	movlw	low STR_41
  6465  001670  6E0D               	movwf	i2printf@f,c
  6466  001672  0EFF               	movlw	high STR_41
  6467  001674  6E0E               	movwf	i2printf@f+1,c
  6468  001676  EC91  F003         	call	i2_printf	;wreg free
  6469                           
  6470                           ;sensors.c: 56: return -1;
  6471  00167A  683B               	setf	?_checkAA,c
  6472  00167C  683C               	setf	?_checkAA+1,c
  6473  00167E  0012               	return	
  6474  001680                     i2l3748:
  6475                           
  6476                           ;sensors.c: 58: return 0;
  6477  001680  0E00               	movlw	0
  6478  001682  6E3C               	movwf	?_checkAA+1,c
  6479  001684  0E00               	movlw	0
  6480  001686  6E3B               	movwf	?_checkAA,c
  6481                           
  6482                           ;sensors.c: 59: }
  6483  001688  0012               	return	
  6484  00168A                     i2l3754:
  6485  00168A  0E00               	movlw	0
  6486  00168C  6E31               	movwf	checkV@channel+1,c
  6487  00168E  0E00               	movlw	0
  6488  001690  6E30               	movwf	checkV@channel,c
  6489  001692  0E00               	movlw	0
  6490  001694  6E32               	movwf	checkV@max,c
  6491  001696  0EC0               	movlw	192
  6492  001698  6E33               	movwf	checkV@max+1,c
  6493  00169A  0E3F               	movlw	63
  6494  00169C  6E34               	movwf	checkV@max+2,c
  6495  00169E  ECD3  F006         	call	_checkV	;wreg free
  6496                           
  6497                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  6498                           ; Switch size 1, requested type "space"
  6499                           ; Number of cases is 2, Range of values is 0 to 255
  6500                           ; switch strategies available:
  6501                           ; Name         Instructions Cycles
  6502                           ; simple_byte            7     4 (average)
  6503                           ;	Chosen strategy is simple_byte
  6504  0016A2  5031               	movf	?_checkV+1,w,c
  6505  0016A4  0A00               	xorlw	0	; case 0
  6506  0016A6  B4D8               	btfsc	status,2,c
  6507  0016A8  D004               	goto	i2l4456
  6508  0016AA  0AFF               	xorlw	255	; case 255
  6509  0016AC  B4D8               	btfsc	status,2,c
  6510  0016AE  D009               	goto	i2l4458
  6511  0016B0  D7E7               	goto	i2l3748
  6512  0016B2                     i2l4456:
  6513                           
  6514                           ; Switch size 1, requested type "space"
  6515                           ; Number of cases is 2, Range of values is 0 to 1
  6516                           ; switch strategies available:
  6517                           ; Name         Instructions Cycles
  6518                           ; simple_byte            7     4 (average)
  6519                           ;	Chosen strategy is simple_byte
  6520  0016B2  5030               	movf	?_checkV,w,c
  6521  0016B4  0A00               	xorlw	0	; case 0
  6522  0016B6  B4D8               	btfsc	status,2,c
  6523  0016B8  D7DA               	goto	i2l3742
  6524  0016BA  0A01               	xorlw	1	; case 1
  6525  0016BC  B4D8               	btfsc	status,2,c
  6526  0016BE  D7B5               	goto	i2l3726
  6527  0016C0  D7DF               	goto	i2l3748
  6528  0016C2                     i2l4458:
  6529                           
  6530                           ; Switch size 1, requested type "space"
  6531                           ; Number of cases is 1, Range of values is 255 to 255
  6532                           ; switch strategies available:
  6533                           ; Name         Instructions Cycles
  6534                           ; simple_byte            4     3 (average)
  6535                           ;	Chosen strategy is simple_byte
  6536  0016C2  5030               	movf	?_checkV,w,c
  6537  0016C4  0AFF               	xorlw	255	; case 255
  6538  0016C6  B4D8               	btfsc	status,2,c
  6539  0016C8  D7C0               	goto	i2l3734
  6540  0016CA  D7DA               	goto	i2l3748
  6541  0016CC                     __end_of_checkAA:
  6542                           	opt stack 0
  6543                           pclatu	equ	0xFFB
  6544                           pclath	equ	0xFFA
  6545                           tblptru	equ	0xFF8
  6546                           tblptrh	equ	0xFF7
  6547                           tblptrl	equ	0xFF6
  6548                           tablat	equ	0xFF5
  6549                           prodh	equ	0xFF4
  6550                           prodl	equ	0xFF3
  6551                           intcon	equ	0xFF2
  6552                           intcon3	equ	0xFF0
  6553                           postinc0	equ	0xFEE
  6554                           fsr0h	equ	0xFEA
  6555                           fsr0l	equ	0xFE9
  6556                           wreg	equ	0xFE8
  6557                           plusw1	equ	0xFE3
  6558                           fsr1h	equ	0xFE2
  6559                           fsr1l	equ	0xFE1
  6560                           indf2	equ	0xFDF
  6561                           postinc2	equ	0xFDE
  6562                           postdec2	equ	0xFDD
  6563                           plusw2	equ	0xFDB
  6564                           fsr2h	equ	0xFDA
  6565                           fsr2l	equ	0xFD9
  6566                           status	equ	0xFD8
  6567                           
  6568 ;; *************** function _check9 *****************
  6569 ;; Defined at:
  6570 ;;		line 86 in file "sensors.c"
  6571 ;; Parameters:    Size  Location     Type
  6572 ;;  sorted          2   58[COMRAM] PTR unsigned char 
  6573 ;;		 -> simulate@sorted(4), 
  6574 ;; Auto vars:     Size  Location     Type
  6575 ;;		None
  6576 ;; Return value:  Size  Location     Type
  6577 ;;                  2   58[COMRAM] int 
  6578 ;; Registers used:
  6579 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6580 ;; Tracked objects:
  6581 ;;		On entry : 0/0
  6582 ;;		On exit  : 0/0
  6583 ;;		Unchanged: 0/0
  6584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6585 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6588 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6589 ;;Total ram usage:        2 bytes
  6590 ;; Hardware stack levels used:    1
  6591 ;; Hardware stack levels required when called:    3
  6592 ;; This function calls:
  6593 ;;		_checkV
  6594 ;;		i2_printf
  6595 ;; This function is called by:
  6596 ;;		_simulate
  6597 ;; This function uses a non-reentrant model
  6598 ;;
  6599                           
  6600                           	psect	text35
  6601  001568                     __ptext35:
  6602                           	opt stack 0
  6603  001568                     _check9:
  6604                           	opt stack 21
  6605                           
  6606                           ;sensors.c: 89: printf("9V:");
  6607                           
  6608                           ;incstack = 0
  6609  001568  0EDE               	movlw	low (STR_12+1)
  6610  00156A  6E0D               	movwf	i2printf@f,c
  6611  00156C  0EFF               	movlw	high (STR_12+1)
  6612  00156E  6E0E               	movwf	i2printf@f+1,c
  6613  001570  EC91  F003         	call	i2_printf	;wreg free
  6614                           
  6615                           ;sensors.c: 90: switch (checkV(2, 4)) {
  6616  001574  D032               	goto	i2l3834
  6617  001576                     i2l3806:
  6618                           
  6619                           ;sensors.c: 93: printf(" 1 ");
  6620  001576  0EE6               	movlw	low STR_39
  6621  001578  6E0D               	movwf	i2printf@f,c
  6622  00157A  0EFF               	movlw	high STR_39
  6623  00157C  6E0E               	movwf	i2printf@f+1,c
  6624  00157E  EC91  F003         	call	i2_printf	;wreg free
  6625                           
  6626                           ;sensors.c: 94: sorted[2]++;
  6627  001582  EE20 F002          	lfsr	2,2
  6628  001586  503B               	movf	check9@sorted,w,c
  6629  001588  26D9               	addwf	fsr2l,f,c
  6630  00158A  503C               	movf	check9@sorted+1,w,c
  6631  00158C  22DA               	addwfc	fsr2h,f,c
  6632  00158E  2ADF               	incf	indf2,f,c
  6633                           
  6634                           ;sensors.c: 95: return 1;
  6635  001590  0E00               	movlw	0
  6636  001592  6E3C               	movwf	?_check9+1,c
  6637  001594  0E01               	movlw	1
  6638  001596  6E3B               	movwf	?_check9,c
  6639  001598  0012               	return	
  6640  00159A                     i2l3814:
  6641                           
  6642                           ;sensors.c: 98: printf(" 0 ");
  6643  00159A  0EE2               	movlw	low STR_40
  6644  00159C  6E0D               	movwf	i2printf@f,c
  6645  00159E  0EFF               	movlw	high STR_40
  6646  0015A0  6E0E               	movwf	i2printf@f+1,c
  6647  0015A2  EC91  F003         	call	i2_printf	;wreg free
  6648                           
  6649                           ;sensors.c: 99: sorted[3]++;
  6650  0015A6  EE20 F003          	lfsr	2,3
  6651  0015AA  503B               	movf	check9@sorted,w,c
  6652  0015AC  26D9               	addwf	fsr2l,f,c
  6653  0015AE  503C               	movf	check9@sorted+1,w,c
  6654  0015B0  22DA               	addwfc	fsr2h,f,c
  6655  0015B2  2ADF               	incf	indf2,f,c
  6656                           
  6657                           ;sensors.c: 100: return 0;
  6658  0015B4  0E00               	movlw	0
  6659  0015B6  6E3C               	movwf	?_check9+1,c
  6660  0015B8  0E00               	movlw	0
  6661  0015BA  6E3B               	movwf	?_check9,c
  6662  0015BC  0012               	return	
  6663  0015BE                     i2l3822:
  6664                           
  6665                           ;sensors.c: 103: printf("-1 ");
  6666  0015BE  0EEA               	movlw	low STR_41
  6667  0015C0  6E0D               	movwf	i2printf@f,c
  6668  0015C2  0EFF               	movlw	high STR_41
  6669  0015C4  6E0E               	movwf	i2printf@f+1,c
  6670  0015C6  EC91  F003         	call	i2_printf	;wreg free
  6671                           
  6672                           ;sensors.c: 104: return -1;
  6673  0015CA  683B               	setf	?_check9,c
  6674  0015CC  683C               	setf	?_check9+1,c
  6675  0015CE  0012               	return	
  6676  0015D0                     i2l3828:
  6677                           
  6678                           ;sensors.c: 106: return 0;
  6679  0015D0  0E00               	movlw	0
  6680  0015D2  6E3C               	movwf	?_check9+1,c
  6681  0015D4  0E00               	movlw	0
  6682  0015D6  6E3B               	movwf	?_check9,c
  6683                           
  6684                           ;sensors.c: 107: }
  6685  0015D8  0012               	return	
  6686  0015DA                     i2l3834:
  6687  0015DA  0E00               	movlw	0
  6688  0015DC  6E31               	movwf	checkV@channel+1,c
  6689  0015DE  0E02               	movlw	2
  6690  0015E0  6E30               	movwf	checkV@channel,c
  6691  0015E2  0E00               	movlw	0
  6692  0015E4  6E32               	movwf	checkV@max,c
  6693  0015E6  0E80               	movlw	128
  6694  0015E8  6E33               	movwf	checkV@max+1,c
  6695  0015EA  0E40               	movlw	64
  6696  0015EC  6E34               	movwf	checkV@max+2,c
  6697  0015EE  ECD3  F006         	call	_checkV	;wreg free
  6698                           
  6699                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  6700                           ; Switch size 1, requested type "space"
  6701                           ; Number of cases is 2, Range of values is 0 to 255
  6702                           ; switch strategies available:
  6703                           ; Name         Instructions Cycles
  6704                           ; simple_byte            7     4 (average)
  6705                           ;	Chosen strategy is simple_byte
  6706  0015F2  5031               	movf	?_checkV+1,w,c
  6707  0015F4  0A00               	xorlw	0	; case 0
  6708  0015F6  B4D8               	btfsc	status,2,c
  6709  0015F8  D004               	goto	i2l4460
  6710  0015FA  0AFF               	xorlw	255	; case 255
  6711  0015FC  B4D8               	btfsc	status,2,c
  6712  0015FE  D009               	goto	i2l4462
  6713  001600  D7E7               	goto	i2l3828
  6714  001602                     i2l4460:
  6715                           
  6716                           ; Switch size 1, requested type "space"
  6717                           ; Number of cases is 2, Range of values is 0 to 1
  6718                           ; switch strategies available:
  6719                           ; Name         Instructions Cycles
  6720                           ; simple_byte            7     4 (average)
  6721                           ;	Chosen strategy is simple_byte
  6722  001602  5030               	movf	?_checkV,w,c
  6723  001604  0A00               	xorlw	0	; case 0
  6724  001606  B4D8               	btfsc	status,2,c
  6725  001608  D7DA               	goto	i2l3822
  6726  00160A  0A01               	xorlw	1	; case 1
  6727  00160C  B4D8               	btfsc	status,2,c
  6728  00160E  D7B3               	goto	i2l3806
  6729  001610  D7DF               	goto	i2l3828
  6730  001612                     i2l4462:
  6731                           
  6732                           ; Switch size 1, requested type "space"
  6733                           ; Number of cases is 1, Range of values is 255 to 255
  6734                           ; switch strategies available:
  6735                           ; Name         Instructions Cycles
  6736                           ; simple_byte            4     3 (average)
  6737                           ;	Chosen strategy is simple_byte
  6738  001612  5030               	movf	?_checkV,w,c
  6739  001614  0AFF               	xorlw	255	; case 255
  6740  001616  B4D8               	btfsc	status,2,c
  6741  001618  D7C0               	goto	i2l3814
  6742  00161A  D7DA               	goto	i2l3828
  6743  00161C                     __end_of_check9:
  6744                           	opt stack 0
  6745                           pclatu	equ	0xFFB
  6746                           pclath	equ	0xFFA
  6747                           tblptru	equ	0xFF8
  6748                           tblptrh	equ	0xFF7
  6749                           tblptrl	equ	0xFF6
  6750                           tablat	equ	0xFF5
  6751                           prodh	equ	0xFF4
  6752                           prodl	equ	0xFF3
  6753                           intcon	equ	0xFF2
  6754                           intcon3	equ	0xFF0
  6755                           postinc0	equ	0xFEE
  6756                           fsr0h	equ	0xFEA
  6757                           fsr0l	equ	0xFE9
  6758                           wreg	equ	0xFE8
  6759                           plusw1	equ	0xFE3
  6760                           fsr1h	equ	0xFE2
  6761                           fsr1l	equ	0xFE1
  6762                           indf2	equ	0xFDF
  6763                           postinc2	equ	0xFDE
  6764                           postdec2	equ	0xFDD
  6765                           plusw2	equ	0xFDB
  6766                           fsr2h	equ	0xFDA
  6767                           fsr2l	equ	0xFD9
  6768                           status	equ	0xFD8
  6769                           
  6770 ;; *************** function _checkV *****************
  6771 ;; Defined at:
  6772 ;;		line 20 in file "sensors.c"
  6773 ;; Parameters:    Size  Location     Type
  6774 ;;  channel         2   47[COMRAM] int 
  6775 ;;  max             3   49[COMRAM] float 
  6776 ;; Auto vars:     Size  Location     Type
  6777 ;;  voltage         2   56[COMRAM] int 
  6778 ;;  voltage3        2   54[COMRAM] int 
  6779 ;;  voltage2        2   52[COMRAM] int 
  6780 ;; Return value:  Size  Location     Type
  6781 ;;                  2   47[COMRAM] int 
  6782 ;; Registers used:
  6783 ;;		wreg, status,2, status,0, cstack
  6784 ;; Tracked objects:
  6785 ;;		On entry : 0/0
  6786 ;;		On exit  : 0/0
  6787 ;;		Unchanged: 0/0
  6788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6789 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6790 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6792 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6793 ;;Total ram usage:       11 bytes
  6794 ;; Hardware stack levels used:    1
  6795 ;; Hardware stack levels required when called:    2
  6796 ;; This function calls:
  6797 ;;		_AD
  6798 ;;		___awtoft
  6799 ;;		___ftdiv
  6800 ;;		___ftge
  6801 ;;		___ftmul
  6802 ;;		_fluctuate
  6803 ;; This function is called by:
  6804 ;;		_checkAA
  6805 ;;		_checkC
  6806 ;;		_check9
  6807 ;; This function uses a non-reentrant model
  6808 ;;
  6809                           
  6810                           	psect	text36
  6811  000DA6                     __ptext36:
  6812                           	opt stack 0
  6813  000DA6                     _checkV:
  6814                           	opt stack 21
  6815                           
  6816                           ;sensors.c: 24: int voltage = AD(channel);
  6817                           
  6818                           ;incstack = 0
  6819  000DA6  5030               	movf	checkV@channel,w,c
  6820  000DA8  ECDE  F00F         	call	_AD
  6821  000DAC  C001  F039         	movff	?_AD,checkV@voltage
  6822  000DB0  C002  F03A         	movff	?_AD+1,checkV@voltage+1
  6823                           
  6824                           ;sensors.c: 25: int voltage2 = AD(channel);
  6825  000DB4  5030               	movf	checkV@channel,w,c
  6826  000DB6  ECDE  F00F         	call	_AD
  6827  000DBA  C001  F035         	movff	?_AD,checkV@voltage2
  6828  000DBE  C002  F036         	movff	?_AD+1,checkV@voltage2+1
  6829                           
  6830                           ;sensors.c: 26: int voltage3 = AD(channel);
  6831  000DC2  5030               	movf	checkV@channel,w,c
  6832  000DC4  ECDE  F00F         	call	_AD
  6833  000DC8  C001  F037         	movff	?_AD,checkV@voltage3
  6834  000DCC  C002  F038         	movff	?_AD+1,checkV@voltage3+1
  6835                           
  6836                           ;sensors.c: 27: if (voltage > 800 || voltage2 > 800 || voltage3 > 800)return 0;
  6837  000DD0  BE3A               	btfsc	checkV@voltage+1,7,c
  6838  000DD2  D006               	goto	i2l3250
  6839  000DD4  0E21               	movlw	33
  6840  000DD6  5C39               	subwf	checkV@voltage,w,c
  6841  000DD8  0E03               	movlw	3
  6842  000DDA  583A               	subwfb	checkV@voltage+1,w,c
  6843  000DDC  B0D8               	btfsc	status,0,c
  6844  000DDE  D010               	goto	i2l3254
  6845  000DE0                     i2l3250:
  6846  000DE0  BE36               	btfsc	checkV@voltage2+1,7,c
  6847  000DE2  D006               	goto	i2l3252
  6848  000DE4  0E21               	movlw	33
  6849  000DE6  5C35               	subwf	checkV@voltage2,w,c
  6850  000DE8  0E03               	movlw	3
  6851  000DEA  5836               	subwfb	checkV@voltage2+1,w,c
  6852  000DEC  B0D8               	btfsc	status,0,c
  6853  000DEE  D008               	goto	i2l3254
  6854  000DF0                     i2l3252:
  6855  000DF0  BE38               	btfsc	checkV@voltage3+1,7,c
  6856  000DF2  D00B               	goto	i2l3258
  6857  000DF4  0E21               	movlw	33
  6858  000DF6  5C37               	subwf	checkV@voltage3,w,c
  6859  000DF8  0E03               	movlw	3
  6860  000DFA  5838               	subwfb	checkV@voltage3+1,w,c
  6861  000DFC  A0D8               	btfss	status,0,c
  6862  000DFE  D005               	goto	i2l3258
  6863  000E00                     i2l3254:
  6864  000E00  0E00               	movlw	0
  6865  000E02  6E31               	movwf	?_checkV+1,c
  6866  000E04  0E00               	movlw	0
  6867  000E06  6E30               	movwf	?_checkV,c
  6868  000E08  0012               	return	
  6869  000E0A                     i2l3258:
  6870                           
  6871                           ;sensors.c: 28: if (fluctuate(voltage, voltage2) || fluctuate(voltage2, voltage3) || flu
      +                          ctuate(voltage, voltage3))return 0;
  6872  000E0A  C039  F001         	movff	checkV@voltage,fluctuate@a
  6873  000E0E  C03A  F002         	movff	checkV@voltage+1,fluctuate@a+1
  6874  000E12  C035  F003         	movff	checkV@voltage2,fluctuate@b
  6875  000E16  C036  F004         	movff	checkV@voltage2+1,fluctuate@b+1
  6876  000E1A  ECAA  F00E         	call	_fluctuate	;wreg free
  6877  000E1E  0900               	iorlw	0
  6878  000E20  A4D8               	btfss	status,2,c
  6879  000E22  D01A               	goto	i2l3264
  6880  000E24  C035  F001         	movff	checkV@voltage2,fluctuate@a
  6881  000E28  C036  F002         	movff	checkV@voltage2+1,fluctuate@a+1
  6882  000E2C  C037  F003         	movff	checkV@voltage3,fluctuate@b
  6883  000E30  C038  F004         	movff	checkV@voltage3+1,fluctuate@b+1
  6884  000E34  ECAA  F00E         	call	_fluctuate	;wreg free
  6885  000E38  0900               	iorlw	0
  6886  000E3A  A4D8               	btfss	status,2,c
  6887  000E3C  D00D               	goto	i2l3264
  6888  000E3E  C039  F001         	movff	checkV@voltage,fluctuate@a
  6889  000E42  C03A  F002         	movff	checkV@voltage+1,fluctuate@a+1
  6890  000E46  C037  F003         	movff	checkV@voltage3,fluctuate@b
  6891  000E4A  C038  F004         	movff	checkV@voltage3+1,fluctuate@b+1
  6892  000E4E  ECAA  F00E         	call	_fluctuate	;wreg free
  6893  000E52  0900               	iorlw	0
  6894  000E54  B4D8               	btfsc	status,2,c
  6895  000E56  D005               	goto	i2l3268
  6896  000E58                     i2l3264:
  6897  000E58  0E00               	movlw	0
  6898  000E5A  6E31               	movwf	?_checkV+1,c
  6899  000E5C  0E00               	movlw	0
  6900  000E5E  6E30               	movwf	?_checkV,c
  6901  000E60  0012               	return	
  6902  000E62                     i2l3268:
  6903                           
  6904                           ;sensors.c: 29: if (voltage < 50) {
  6905  000E62  BE3A               	btfsc	checkV@voltage+1,7,c
  6906  000E64  D006               	goto	i2l3270
  6907  000E66  503A               	movf	checkV@voltage+1,w,c
  6908  000E68  E109               	bnz	i2l3276
  6909  000E6A  0E32               	movlw	50
  6910  000E6C  5C39               	subwf	checkV@voltage,w,c
  6911  000E6E  B0D8               	btfsc	status,0,c
  6912  000E70  D005               	goto	i2l3276
  6913  000E72                     i2l3270:
  6914                           
  6915                           ;sensors.c: 30: return 0;
  6916  000E72  0E00               	movlw	0
  6917  000E74  6E31               	movwf	?_checkV+1,c
  6918  000E76  0E00               	movlw	0
  6919  000E78  6E30               	movwf	?_checkV,c
  6920                           
  6921                           ;sensors.c: 31: } else if (voltage > 0.85 * 1023 * max / 4.1) {
  6922  000E7A  0012               	return	
  6923  000E7C                     i2l3276:
  6924  000E7C  0E33               	movlw	51
  6925  000E7E  6E1B               	movwf	___ftdiv@f2,c
  6926  000E80  0E83               	movlw	131
  6927  000E82  6E1C               	movwf	___ftdiv@f2+1,c
  6928  000E84  0E40               	movlw	64
  6929  000E86  6E1D               	movwf	___ftdiv@f2+2,c
  6930  000E88  0E63               	movlw	99
  6931  000E8A  6E0C               	movwf	___ftmul@f2,c
  6932  000E8C  0E59               	movlw	89
  6933  000E8E  6E0D               	movwf	___ftmul@f2+1,c
  6934  000E90  0E44               	movlw	68
  6935  000E92  6E0E               	movwf	___ftmul@f2+2,c
  6936  000E94  C032  F009         	movff	checkV@max,___ftmul@f1
  6937  000E98  C033  F00A         	movff	checkV@max+1,___ftmul@f1+1
  6938  000E9C  C034  F00B         	movff	checkV@max+2,___ftmul@f1+2
  6939  000EA0  EC96  F008         	call	___ftmul	;wreg free
  6940  000EA4  C009  F018         	movff	?___ftmul,___ftdiv@f1
  6941  000EA8  C00A  F019         	movff	?___ftmul+1,___ftdiv@f1+1
  6942  000EAC  C00B  F01A         	movff	?___ftmul+2,___ftdiv@f1+2
  6943  000EB0  EC89  F009         	call	___ftdiv	;wreg free
  6944  000EB4  C018  F027         	movff	?___ftdiv,___ftge@ff1
  6945  000EB8  C019  F028         	movff	?___ftdiv+1,___ftge@ff1+1
  6946  000EBC  C01A  F029         	movff	?___ftdiv+2,___ftge@ff1+2
  6947  000EC0  C039  F009         	movff	checkV@voltage,___awtoft@c
  6948  000EC4  C03A  F00A         	movff	checkV@voltage+1,___awtoft@c+1
  6949  000EC8  EC60  F00F         	call	___awtoft	;wreg free
  6950  000ECC  C009  F02A         	movff	?___awtoft,___ftge@ff2
  6951  000ED0  C00A  F02B         	movff	?___awtoft+1,___ftge@ff2+1
  6952  000ED4  C00B  F02C         	movff	?___awtoft+2,___ftge@ff2+2
  6953  000ED8  ECBD  F00B         	call	___ftge	;wreg free
  6954  000EDC  B0D8               	btfsc	status,0,c
  6955  000EDE  D005               	goto	i2l315
  6956                           
  6957                           ;sensors.c: 32: return 1;
  6958  000EE0  0E00               	movlw	0
  6959  000EE2  6E31               	movwf	?_checkV+1,c
  6960  000EE4  0E01               	movlw	1
  6961  000EE6  6E30               	movwf	?_checkV,c
  6962                           
  6963                           ;sensors.c: 33: } else {
  6964  000EE8  0012               	return	
  6965  000EEA                     i2l315:
  6966                           
  6967                           ;sensors.c: 34: return -1;
  6968  000EEA  6830               	setf	?_checkV,c
  6969  000EEC  6831               	setf	?_checkV+1,c
  6970  000EEE  0012               	return	
  6971  000EF0                     __end_of_checkV:
  6972                           	opt stack 0
  6973                           pclatu	equ	0xFFB
  6974                           pclath	equ	0xFFA
  6975                           tblptru	equ	0xFF8
  6976                           tblptrh	equ	0xFF7
  6977                           tblptrl	equ	0xFF6
  6978                           tablat	equ	0xFF5
  6979                           prodh	equ	0xFF4
  6980                           prodl	equ	0xFF3
  6981                           intcon	equ	0xFF2
  6982                           intcon3	equ	0xFF0
  6983                           postinc0	equ	0xFEE
  6984                           fsr0h	equ	0xFEA
  6985                           fsr0l	equ	0xFE9
  6986                           wreg	equ	0xFE8
  6987                           plusw1	equ	0xFE3
  6988                           fsr1h	equ	0xFE2
  6989                           fsr1l	equ	0xFE1
  6990                           indf2	equ	0xFDF
  6991                           postinc2	equ	0xFDE
  6992                           postdec2	equ	0xFDD
  6993                           plusw2	equ	0xFDB
  6994                           fsr2h	equ	0xFDA
  6995                           fsr2l	equ	0xFD9
  6996                           status	equ	0xFD8
  6997                           
  6998 ;; *************** function _fluctuate *****************
  6999 ;; Defined at:
  7000 ;;		line 13 in file "sensors.c"
  7001 ;; Parameters:    Size  Location     Type
  7002 ;;  a               2    0[COMRAM] int 
  7003 ;;  b               2    2[COMRAM] int 
  7004 ;; Auto vars:     Size  Location     Type
  7005 ;;  i               2    6[COMRAM] int 
  7006 ;; Return value:  Size  Location     Type
  7007 ;;                  1    wreg      unsigned char 
  7008 ;; Registers used:
  7009 ;;		wreg, status,2, status,0
  7010 ;; Tracked objects:
  7011 ;;		On entry : 0/0
  7012 ;;		On exit  : 0/0
  7013 ;;		Unchanged: 0/0
  7014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7015 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7016 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7017 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7018 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7019 ;;Total ram usage:        8 bytes
  7020 ;; Hardware stack levels used:    1
  7021 ;; This function calls:
  7022 ;;		Nothing
  7023 ;; This function is called by:
  7024 ;;		_checkV
  7025 ;; This function uses a non-reentrant model
  7026 ;;
  7027                           
  7028                           	psect	text37
  7029  001D54                     __ptext37:
  7030                           	opt stack 0
  7031  001D54                     _fluctuate:
  7032                           	opt stack 22
  7033                           
  7034                           ;sensors.c: 15: int i = a - b;
  7035                           
  7036                           ;incstack = 0
  7037  001D54  C003  F005         	movff	fluctuate@b,??_fluctuate
  7038  001D58  C004  F006         	movff	fluctuate@b+1,??_fluctuate+1
  7039  001D5C  1E05               	comf	??_fluctuate,f,c
  7040  001D5E  1E06               	comf	??_fluctuate+1,f,c
  7041  001D60  4A05               	infsnz	??_fluctuate,f,c
  7042  001D62  2A06               	incf	??_fluctuate+1,f,c
  7043  001D64  5001               	movf	fluctuate@a,w,c
  7044  001D66  2405               	addwf	??_fluctuate,w,c
  7045  001D68  6E07               	movwf	fluctuate@i,c
  7046  001D6A  5002               	movf	fluctuate@a+1,w,c
  7047  001D6C  2006               	addwfc	??_fluctuate+1,w,c
  7048  001D6E  6E08               	movwf	fluctuate@i+1,c
  7049                           
  7050                           ;sensors.c: 16: if (a < b)i = -i;
  7051  001D70  5003               	movf	fluctuate@b,w,c
  7052  001D72  5C01               	subwf	fluctuate@a,w,c
  7053  001D74  5002               	movf	fluctuate@a+1,w,c
  7054  001D76  0A80               	xorlw	128
  7055  001D78  6E05               	movwf	??_fluctuate& (0+255),c
  7056  001D7A  5004               	movf	fluctuate@b+1,w,c
  7057  001D7C  0A80               	xorlw	128
  7058  001D7E  5805               	subwfb	??_fluctuate& (0+255),w,c
  7059  001D80  B0D8               	btfsc	status,0,c
  7060  001D82  D004               	goto	i2l2916
  7061  001D84  6C07               	negf	fluctuate@i,c
  7062  001D86  1E08               	comf	fluctuate@i+1,f,c
  7063  001D88  B0D8               	btfsc	status,0,c
  7064  001D8A  2A08               	incf	fluctuate@i+1,f,c
  7065  001D8C                     i2l2916:
  7066                           
  7067                           ;sensors.c: 17: return i > 200;
  7068  001D8C  BE08               	btfsc	fluctuate@i+1,7,c
  7069  001D8E  D008               	goto	i2u163_40
  7070  001D90  5008               	movf	fluctuate@i+1,w,c
  7071  001D92  E104               	bnz	i2u163_41
  7072  001D94  0EC9               	movlw	201
  7073  001D96  5C07               	subwf	fluctuate@i,w,c
  7074  001D98  A0D8               	btfss	status,0,c
  7075  001D9A  D002               	goto	i2u163_40
  7076  001D9C                     i2u163_41:
  7077  001D9C  0E01               	movlw	1
  7078  001D9E  0012               	return	
  7079  001DA0                     i2u163_40:
  7080  001DA0  0E00               	movlw	0
  7081  001DA2  0012               	return	
  7082  001DA4                     __end_of_fluctuate:
  7083                           	opt stack 0
  7084                           pclatu	equ	0xFFB
  7085                           pclath	equ	0xFFA
  7086                           tblptru	equ	0xFF8
  7087                           tblptrh	equ	0xFF7
  7088                           tblptrl	equ	0xFF6
  7089                           tablat	equ	0xFF5
  7090                           prodh	equ	0xFF4
  7091                           prodl	equ	0xFF3
  7092                           intcon	equ	0xFF2
  7093                           intcon3	equ	0xFF0
  7094                           postinc0	equ	0xFEE
  7095                           fsr0h	equ	0xFEA
  7096                           fsr0l	equ	0xFE9
  7097                           wreg	equ	0xFE8
  7098                           plusw1	equ	0xFE3
  7099                           fsr1h	equ	0xFE2
  7100                           fsr1l	equ	0xFE1
  7101                           indf2	equ	0xFDF
  7102                           postinc2	equ	0xFDE
  7103                           postdec2	equ	0xFDD
  7104                           plusw2	equ	0xFDB
  7105                           fsr2h	equ	0xFDA
  7106                           fsr2l	equ	0xFD9
  7107                           status	equ	0xFD8
  7108                           
  7109 ;; *************** function ___ftmul *****************
  7110 ;; Defined at:
  7111 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  7112 ;; Parameters:    Size  Location     Type
  7113 ;;  f1              3    8[COMRAM] float 
  7114 ;;  f2              3   11[COMRAM] float 
  7115 ;; Auto vars:     Size  Location     Type
  7116 ;;  f3_as_produc    3   18[COMRAM] unsigned um
  7117 ;;  sign            1   22[COMRAM] unsigned char 
  7118 ;;  cntr            1   21[COMRAM] unsigned char 
  7119 ;;  exp             1   17[COMRAM] unsigned char 
  7120 ;; Return value:  Size  Location     Type
  7121 ;;                  3    8[COMRAM] float 
  7122 ;; Registers used:
  7123 ;;		wreg, status,2, status,0, cstack
  7124 ;; Tracked objects:
  7125 ;;		On entry : 0/0
  7126 ;;		On exit  : 0/0
  7127 ;;		Unchanged: 0/0
  7128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7129 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7130 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7131 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7132 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7133 ;;Total ram usage:       15 bytes
  7134 ;; Hardware stack levels used:    1
  7135 ;; Hardware stack levels required when called:    1
  7136 ;; This function calls:
  7137 ;;		___ftpack
  7138 ;; This function is called by:
  7139 ;;		_checkV
  7140 ;; This function uses a non-reentrant model
  7141 ;;
  7142                           
  7143                           	psect	text38
  7144  00112C                     __ptext38:
  7145                           	opt stack 0
  7146  00112C                     ___ftmul:
  7147                           	opt stack 21
  7148                           
  7149                           ;incstack = 0
  7150  00112C  C00B  F00F         	movff	___ftmul@f1+2,??___ftmul
  7151  001130  6A10               	clrf	(??___ftmul+1)& (0+255),c
  7152  001132  6A11               	clrf	(??___ftmul+2)& (0+255),c
  7153  001134  340A               	rlcf	___ftmul@f1+1,w,c
  7154  001136  360F               	rlcf	??___ftmul& (0+255),f,c
  7155  001138  E301               	bnc	u172_41
  7156  00113A  8010               	bsf	(??___ftmul+1)& (0+255),0,c
  7157  00113C                     u172_41:
  7158  00113C  500F               	movf	??___ftmul,w,c
  7159  00113E  6E12               	movwf	___ftmul@exp,c
  7160  001140  5012               	movf	___ftmul@exp,w,c
  7161  001142  A4D8               	btfss	status,2,c
  7162  001144  D007               	goto	i2l2976
  7163  001146  0E00               	movlw	0
  7164  001148  6E09               	movwf	?___ftmul,c
  7165  00114A  0E00               	movlw	0
  7166  00114C  6E0A               	movwf	?___ftmul+1,c
  7167  00114E  0E00               	movlw	0
  7168  001150  6E0B               	movwf	?___ftmul+2,c
  7169  001152  0012               	return	
  7170  001154                     i2l2976:
  7171  001154  C00E  F00F         	movff	___ftmul@f2+2,??___ftmul
  7172  001158  6A10               	clrf	(??___ftmul+1)& (0+255),c
  7173  00115A  6A11               	clrf	(??___ftmul+2)& (0+255),c
  7174  00115C  340D               	rlcf	___ftmul@f2+1,w,c
  7175  00115E  360F               	rlcf	??___ftmul& (0+255),f,c
  7176  001160  E301               	bnc	u174_41
  7177  001162  8010               	bsf	(??___ftmul+1)& (0+255),0,c
  7178  001164                     u174_41:
  7179  001164  500F               	movf	??___ftmul,w,c
  7180  001166  6E17               	movwf	___ftmul@sign,c
  7181  001168  5017               	movf	___ftmul@sign,w,c
  7182  00116A  A4D8               	btfss	status,2,c
  7183  00116C  D007               	goto	i2l2982
  7184  00116E  0E00               	movlw	0
  7185  001170  6E09               	movwf	?___ftmul,c
  7186  001172  0E00               	movlw	0
  7187  001174  6E0A               	movwf	?___ftmul+1,c
  7188  001176  0E00               	movlw	0
  7189  001178  6E0B               	movwf	?___ftmul+2,c
  7190  00117A  0012               	return	
  7191  00117C                     i2l2982:
  7192  00117C  5017               	movf	___ftmul@sign,w,c
  7193  00117E  0F7B               	addlw	123
  7194  001180  2612               	addwf	___ftmul@exp,f,c
  7195  001182  C00B  F017         	movff	___ftmul@f1+2,___ftmul@sign
  7196  001186  500E               	movf	___ftmul@f2+2,w,c
  7197  001188  1A17               	xorwf	___ftmul@sign,f,c
  7198  00118A  0E80               	movlw	128
  7199  00118C  1617               	andwf	___ftmul@sign,f,c
  7200  00118E  8E0A               	bsf	___ftmul@f1+1,7,c
  7201  001190  8E0D               	bsf	___ftmul@f2+1,7,c
  7202  001192  0EFF               	movlw	255
  7203  001194  160C               	andwf	___ftmul@f2,f,c
  7204  001196  0EFF               	movlw	255
  7205  001198  160D               	andwf	___ftmul@f2+1,f,c
  7206  00119A  0E00               	movlw	0
  7207  00119C  160E               	andwf	___ftmul@f2+2,f,c
  7208  00119E  0E00               	movlw	0
  7209  0011A0  6E13               	movwf	___ftmul@f3_as_product,c
  7210  0011A2  0E00               	movlw	0
  7211  0011A4  6E14               	movwf	___ftmul@f3_as_product+1,c
  7212  0011A6  0E00               	movlw	0
  7213  0011A8  6E15               	movwf	___ftmul@f3_as_product+2,c
  7214  0011AA  0E07               	movlw	7
  7215  0011AC  6E16               	movwf	___ftmul@cntr,c
  7216  0011AE                     i2l2996:
  7217  0011AE  A009               	btfss	___ftmul@f1,0,c
  7218  0011B0  D006               	goto	i2l3000
  7219  0011B2  500C               	movf	___ftmul@f2,w,c
  7220  0011B4  2613               	addwf	___ftmul@f3_as_product,f,c
  7221  0011B6  500D               	movf	___ftmul@f2+1,w,c
  7222  0011B8  2214               	addwfc	___ftmul@f3_as_product+1,f,c
  7223  0011BA  500E               	movf	___ftmul@f2+2,w,c
  7224  0011BC  2215               	addwfc	___ftmul@f3_as_product+2,f,c
  7225  0011BE                     i2l3000:
  7226  0011BE  90D8               	bcf	status,0,c
  7227  0011C0  320B               	rrcf	___ftmul@f1+2,f,c
  7228  0011C2  320A               	rrcf	___ftmul@f1+1,f,c
  7229  0011C4  3209               	rrcf	___ftmul@f1,f,c
  7230  0011C6  90D8               	bcf	status,0,c
  7231  0011C8  360C               	rlcf	___ftmul@f2,f,c
  7232  0011CA  360D               	rlcf	___ftmul@f2+1,f,c
  7233  0011CC  360E               	rlcf	___ftmul@f2+2,f,c
  7234  0011CE  2E16               	decfsz	___ftmul@cntr,f,c
  7235  0011D0  D7EE               	goto	i2l2996
  7236  0011D2  0E09               	movlw	9
  7237  0011D4  6E16               	movwf	___ftmul@cntr,c
  7238  0011D6                     i2l3006:
  7239  0011D6  A009               	btfss	___ftmul@f1,0,c
  7240  0011D8  D006               	goto	i2l3010
  7241  0011DA  500C               	movf	___ftmul@f2,w,c
  7242  0011DC  2613               	addwf	___ftmul@f3_as_product,f,c
  7243  0011DE  500D               	movf	___ftmul@f2+1,w,c
  7244  0011E0  2214               	addwfc	___ftmul@f3_as_product+1,f,c
  7245  0011E2  500E               	movf	___ftmul@f2+2,w,c
  7246  0011E4  2215               	addwfc	___ftmul@f3_as_product+2,f,c
  7247  0011E6                     i2l3010:
  7248  0011E6  90D8               	bcf	status,0,c
  7249  0011E8  320B               	rrcf	___ftmul@f1+2,f,c
  7250  0011EA  320A               	rrcf	___ftmul@f1+1,f,c
  7251  0011EC  3209               	rrcf	___ftmul@f1,f,c
  7252  0011EE  90D8               	bcf	status,0,c
  7253  0011F0  3215               	rrcf	___ftmul@f3_as_product+2,f,c
  7254  0011F2  3214               	rrcf	___ftmul@f3_as_product+1,f,c
  7255  0011F4  3213               	rrcf	___ftmul@f3_as_product,f,c
  7256  0011F6  2E16               	decfsz	___ftmul@cntr,f,c
  7257  0011F8  D7EE               	goto	i2l3006
  7258  0011FA  C013  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  7259  0011FE  C014  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  7260  001202  C015  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  7261  001206  C012  F004         	movff	___ftmul@exp,___ftpack@exp
  7262  00120A  C017  F005         	movff	___ftmul@sign,___ftpack@sign
  7263  00120E  EC66  F00B         	call	___ftpack	;wreg free
  7264  001212  C001  F009         	movff	?___ftpack,?___ftmul
  7265  001216  C002  F00A         	movff	?___ftpack+1,?___ftmul+1
  7266  00121A  C003  F00B         	movff	?___ftpack+2,?___ftmul+2
  7267  00121E  0012               	return	
  7268  001220                     __end_of___ftmul:
  7269                           	opt stack 0
  7270                           pclatu	equ	0xFFB
  7271                           pclath	equ	0xFFA
  7272                           tblptru	equ	0xFF8
  7273                           tblptrh	equ	0xFF7
  7274                           tblptrl	equ	0xFF6
  7275                           tablat	equ	0xFF5
  7276                           prodh	equ	0xFF4
  7277                           prodl	equ	0xFF3
  7278                           intcon	equ	0xFF2
  7279                           intcon3	equ	0xFF0
  7280                           postinc0	equ	0xFEE
  7281                           fsr0h	equ	0xFEA
  7282                           fsr0l	equ	0xFE9
  7283                           wreg	equ	0xFE8
  7284                           plusw1	equ	0xFE3
  7285                           fsr1h	equ	0xFE2
  7286                           fsr1l	equ	0xFE1
  7287                           indf2	equ	0xFDF
  7288                           postinc2	equ	0xFDE
  7289                           postdec2	equ	0xFDD
  7290                           plusw2	equ	0xFDB
  7291                           fsr2h	equ	0xFDA
  7292                           fsr2l	equ	0xFD9
  7293                           status	equ	0xFD8
  7294                           
  7295 ;; *************** function ___ftge *****************
  7296 ;; Defined at:
  7297 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
  7298 ;; Parameters:    Size  Location     Type
  7299 ;;  ff1             3   38[COMRAM] float 
  7300 ;;  ff2             3   41[COMRAM] float 
  7301 ;; Auto vars:     Size  Location     Type
  7302 ;;		None
  7303 ;; Return value:  Size  Location     Type
  7304 ;;		None               void
  7305 ;; Registers used:
  7306 ;;		wreg, status,2, status,0
  7307 ;; Tracked objects:
  7308 ;;		On entry : 0/0
  7309 ;;		On exit  : 0/0
  7310 ;;		Unchanged: 0/0
  7311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7312 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7314 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7315 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7316 ;;Total ram usage:        9 bytes
  7317 ;; Hardware stack levels used:    1
  7318 ;; This function calls:
  7319 ;;		Nothing
  7320 ;; This function is called by:
  7321 ;;		_checkV
  7322 ;; This function uses a non-reentrant model
  7323 ;;
  7324                           
  7325                           	psect	text39
  7326  00177A                     __ptext39:
  7327                           	opt stack 0
  7328  00177A                     ___ftge:
  7329                           	opt stack 22
  7330                           
  7331                           ;incstack = 0
  7332  00177A  AE29               	btfss	___ftge@ff1+2,7,c
  7333  00177C  D016               	goto	i2l3078
  7334  00177E  C027  F02D         	movff	___ftge@ff1,??___ftge
  7335  001782  C028  F02E         	movff	___ftge@ff1+1,??___ftge+1
  7336  001786  C029  F02F         	movff	___ftge@ff1+2,??___ftge+2
  7337  00178A  1E2D               	comf	??___ftge,f,c
  7338  00178C  1E2E               	comf	??___ftge+1,f,c
  7339  00178E  1E2F               	comf	??___ftge+2,f,c
  7340  001790  2A2D               	incf	??___ftge,f,c
  7341  001792  0E00               	movlw	0
  7342  001794  222E               	addwfc	??___ftge+1,f,c
  7343  001796  222F               	addwfc	??___ftge+2,f,c
  7344  001798  0E00               	movlw	0
  7345  00179A  242D               	addwf	??___ftge,w,c
  7346  00179C  6E27               	movwf	___ftge@ff1,c
  7347  00179E  0E00               	movlw	0
  7348  0017A0  202E               	addwfc	??___ftge+1,w,c
  7349  0017A2  6E28               	movwf	___ftge@ff1+1,c
  7350  0017A4  0E80               	movlw	128
  7351  0017A6  202F               	addwfc	??___ftge+2,w,c
  7352  0017A8  6E29               	movwf	___ftge@ff1+2,c
  7353  0017AA                     i2l3078:
  7354  0017AA  AE2C               	btfss	___ftge@ff2+2,7,c
  7355  0017AC  D016               	goto	i2l3082
  7356  0017AE  C02A  F02D         	movff	___ftge@ff2,??___ftge
  7357  0017B2  C02B  F02E         	movff	___ftge@ff2+1,??___ftge+1
  7358  0017B6  C02C  F02F         	movff	___ftge@ff2+2,??___ftge+2
  7359  0017BA  1E2D               	comf	??___ftge,f,c
  7360  0017BC  1E2E               	comf	??___ftge+1,f,c
  7361  0017BE  1E2F               	comf	??___ftge+2,f,c
  7362  0017C0  2A2D               	incf	??___ftge,f,c
  7363  0017C2  0E00               	movlw	0
  7364  0017C4  222E               	addwfc	??___ftge+1,f,c
  7365  0017C6  222F               	addwfc	??___ftge+2,f,c
  7366  0017C8  0E00               	movlw	0
  7367  0017CA  242D               	addwf	??___ftge,w,c
  7368  0017CC  6E2A               	movwf	___ftge@ff2,c
  7369  0017CE  0E00               	movlw	0
  7370  0017D0  202E               	addwfc	??___ftge+1,w,c
  7371  0017D2  6E2B               	movwf	___ftge@ff2+1,c
  7372  0017D4  0E80               	movlw	128
  7373  0017D6  202F               	addwfc	??___ftge+2,w,c
  7374  0017D8  6E2C               	movwf	___ftge@ff2+2,c
  7375  0017DA                     i2l3082:
  7376  0017DA  0E00               	movlw	0
  7377  0017DC  1A27               	xorwf	___ftge@ff1,f,c
  7378  0017DE  0E00               	movlw	0
  7379  0017E0  1A28               	xorwf	___ftge@ff1+1,f,c
  7380  0017E2  0E80               	movlw	128
  7381  0017E4  1A29               	xorwf	___ftge@ff1+2,f,c
  7382  0017E6  0E00               	movlw	0
  7383  0017E8  1A2A               	xorwf	___ftge@ff2,f,c
  7384  0017EA  0E00               	movlw	0
  7385  0017EC  1A2B               	xorwf	___ftge@ff2+1,f,c
  7386  0017EE  0E80               	movlw	128
  7387  0017F0  1A2C               	xorwf	___ftge@ff2+2,f,c
  7388  0017F2  502A               	movf	___ftge@ff2,w,c
  7389  0017F4  5C27               	subwf	___ftge@ff1,w,c
  7390  0017F6  502B               	movf	___ftge@ff2+1,w,c
  7391  0017F8  5828               	subwfb	___ftge@ff1+1,w,c
  7392  0017FA  502C               	movf	___ftge@ff2+2,w,c
  7393  0017FC  5829               	subwfb	___ftge@ff1+2,w,c
  7394  0017FE  B0D8               	btfsc	status,0,c
  7395  001800  D002               	goto	i2l3088
  7396  001802  90D8               	bcf	status,0,c
  7397  001804  0012               	return	
  7398  001806                     i2l3088:
  7399  001806  80D8               	bsf	status,0,c
  7400  001808  0012               	return	
  7401  00180A                     __end_of___ftge:
  7402                           	opt stack 0
  7403                           pclatu	equ	0xFFB
  7404                           pclath	equ	0xFFA
  7405                           tblptru	equ	0xFF8
  7406                           tblptrh	equ	0xFF7
  7407                           tblptrl	equ	0xFF6
  7408                           tablat	equ	0xFF5
  7409                           prodh	equ	0xFF4
  7410                           prodl	equ	0xFF3
  7411                           intcon	equ	0xFF2
  7412                           intcon3	equ	0xFF0
  7413                           postinc0	equ	0xFEE
  7414                           fsr0h	equ	0xFEA
  7415                           fsr0l	equ	0xFE9
  7416                           wreg	equ	0xFE8
  7417                           plusw1	equ	0xFE3
  7418                           fsr1h	equ	0xFE2
  7419                           fsr1l	equ	0xFE1
  7420                           indf2	equ	0xFDF
  7421                           postinc2	equ	0xFDE
  7422                           postdec2	equ	0xFDD
  7423                           plusw2	equ	0xFDB
  7424                           fsr2h	equ	0xFDA
  7425                           fsr2l	equ	0xFD9
  7426                           status	equ	0xFD8
  7427                           
  7428 ;; *************** function ___ftdiv *****************
  7429 ;; Defined at:
  7430 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdiv.c"
  7431 ;; Parameters:    Size  Location     Type
  7432 ;;  f1              3   23[COMRAM] float 
  7433 ;;  f2              3   26[COMRAM] float 
  7434 ;; Auto vars:     Size  Location     Type
  7435 ;;  f3              3   33[COMRAM] float 
  7436 ;;  sign            1   37[COMRAM] unsigned char 
  7437 ;;  exp             1   36[COMRAM] unsigned char 
  7438 ;;  cntr            1   32[COMRAM] unsigned char 
  7439 ;; Return value:  Size  Location     Type
  7440 ;;                  3   23[COMRAM] float 
  7441 ;; Registers used:
  7442 ;;		wreg, status,2, status,0, cstack
  7443 ;; Tracked objects:
  7444 ;;		On entry : 0/0
  7445 ;;		On exit  : 0/0
  7446 ;;		Unchanged: 0/0
  7447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7448 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7449 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7450 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7451 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7452 ;;Total ram usage:       15 bytes
  7453 ;; Hardware stack levels used:    1
  7454 ;; Hardware stack levels required when called:    1
  7455 ;; This function calls:
  7456 ;;		___ftpack
  7457 ;; This function is called by:
  7458 ;;		_checkV
  7459 ;; This function uses a non-reentrant model
  7460 ;;
  7461                           
  7462                           	psect	text40
  7463  001312                     __ptext40:
  7464                           	opt stack 0
  7465  001312                     ___ftdiv:
  7466                           	opt stack 21
  7467                           
  7468                           ;incstack = 0
  7469  001312  C01A  F01E         	movff	___ftdiv@f1+2,??___ftdiv
  7470  001316  6A1F               	clrf	(??___ftdiv+1)& (0+255),c
  7471  001318  6A20               	clrf	(??___ftdiv+2)& (0+255),c
  7472  00131A  3419               	rlcf	___ftdiv@f1+1,w,c
  7473  00131C  361E               	rlcf	??___ftdiv& (0+255),f,c
  7474  00131E  E301               	bnc	u167_41
  7475  001320  801F               	bsf	(??___ftdiv+1)& (0+255),0,c
  7476  001322                     u167_41:
  7477  001322  501E               	movf	??___ftdiv,w,c
  7478  001324  6E25               	movwf	___ftdiv@exp,c
  7479  001326  5025               	movf	___ftdiv@exp,w,c
  7480  001328  A4D8               	btfss	status,2,c
  7481  00132A  D007               	goto	i2l2930
  7482  00132C  0E00               	movlw	0
  7483  00132E  6E18               	movwf	?___ftdiv,c
  7484  001330  0E00               	movlw	0
  7485  001332  6E19               	movwf	?___ftdiv+1,c
  7486  001334  0E00               	movlw	0
  7487  001336  6E1A               	movwf	?___ftdiv+2,c
  7488  001338  0012               	return	
  7489  00133A                     i2l2930:
  7490  00133A  C01D  F01E         	movff	___ftdiv@f2+2,??___ftdiv
  7491  00133E  6A1F               	clrf	(??___ftdiv+1)& (0+255),c
  7492  001340  6A20               	clrf	(??___ftdiv+2)& (0+255),c
  7493  001342  341C               	rlcf	___ftdiv@f2+1,w,c
  7494  001344  361E               	rlcf	??___ftdiv& (0+255),f,c
  7495  001346  E301               	bnc	u169_41
  7496  001348  801F               	bsf	(??___ftdiv+1)& (0+255),0,c
  7497  00134A                     u169_41:
  7498  00134A  501E               	movf	??___ftdiv,w,c
  7499  00134C  6E26               	movwf	___ftdiv@sign,c
  7500  00134E  5026               	movf	___ftdiv@sign,w,c
  7501  001350  A4D8               	btfss	status,2,c
  7502  001352  D007               	goto	i2l2936
  7503  001354  0E00               	movlw	0
  7504  001356  6E18               	movwf	?___ftdiv,c
  7505  001358  0E00               	movlw	0
  7506  00135A  6E19               	movwf	?___ftdiv+1,c
  7507  00135C  0E00               	movlw	0
  7508  00135E  6E1A               	movwf	?___ftdiv+2,c
  7509  001360  0012               	return	
  7510  001362                     i2l2936:
  7511  001362  0E00               	movlw	0
  7512  001364  6E22               	movwf	___ftdiv@f3,c
  7513  001366  0E00               	movlw	0
  7514  001368  6E23               	movwf	___ftdiv@f3+1,c
  7515  00136A  0E00               	movlw	0
  7516  00136C  6E24               	movwf	___ftdiv@f3+2,c
  7517  00136E  5026               	movf	___ftdiv@sign,w,c
  7518  001370  0F89               	addlw	137
  7519  001372  5E25               	subwf	___ftdiv@exp,f,c
  7520  001374  C01A  F026         	movff	___ftdiv@f1+2,___ftdiv@sign
  7521  001378  501D               	movf	___ftdiv@f2+2,w,c
  7522  00137A  1A26               	xorwf	___ftdiv@sign,f,c
  7523  00137C  0E80               	movlw	128
  7524  00137E  1626               	andwf	___ftdiv@sign,f,c
  7525  001380  8E19               	bsf	___ftdiv@f1+1,7,c
  7526  001382  0EFF               	movlw	255
  7527  001384  1618               	andwf	___ftdiv@f1,f,c
  7528  001386  0EFF               	movlw	255
  7529  001388  1619               	andwf	___ftdiv@f1+1,f,c
  7530  00138A  0E00               	movlw	0
  7531  00138C  161A               	andwf	___ftdiv@f1+2,f,c
  7532  00138E  8E1C               	bsf	___ftdiv@f2+1,7,c
  7533  001390  0EFF               	movlw	255
  7534  001392  161B               	andwf	___ftdiv@f2,f,c
  7535  001394  0EFF               	movlw	255
  7536  001396  161C               	andwf	___ftdiv@f2+1,f,c
  7537  001398  0E00               	movlw	0
  7538  00139A  161D               	andwf	___ftdiv@f2+2,f,c
  7539  00139C  0E18               	movlw	24
  7540  00139E  6E21               	movwf	___ftdiv@cntr,c
  7541  0013A0                     i2l2956:
  7542  0013A0  90D8               	bcf	status,0,c
  7543  0013A2  3622               	rlcf	___ftdiv@f3,f,c
  7544  0013A4  3623               	rlcf	___ftdiv@f3+1,f,c
  7545  0013A6  3624               	rlcf	___ftdiv@f3+2,f,c
  7546  0013A8  501B               	movf	___ftdiv@f2,w,c
  7547  0013AA  5C18               	subwf	___ftdiv@f1,w,c
  7548  0013AC  501C               	movf	___ftdiv@f2+1,w,c
  7549  0013AE  5819               	subwfb	___ftdiv@f1+1,w,c
  7550  0013B0  501D               	movf	___ftdiv@f2+2,w,c
  7551  0013B2  581A               	subwfb	___ftdiv@f1+2,w,c
  7552  0013B4  A0D8               	btfss	status,0,c
  7553  0013B6  D007               	goto	i2l800
  7554  0013B8  501B               	movf	___ftdiv@f2,w,c
  7555  0013BA  5E18               	subwf	___ftdiv@f1,f,c
  7556  0013BC  501C               	movf	___ftdiv@f2+1,w,c
  7557  0013BE  5A19               	subwfb	___ftdiv@f1+1,f,c
  7558  0013C0  501D               	movf	___ftdiv@f2+2,w,c
  7559  0013C2  5A1A               	subwfb	___ftdiv@f1+2,f,c
  7560  0013C4  8022               	bsf	___ftdiv@f3,0,c
  7561  0013C6                     i2l800:
  7562  0013C6  90D8               	bcf	status,0,c
  7563  0013C8  3618               	rlcf	___ftdiv@f1,f,c
  7564  0013CA  3619               	rlcf	___ftdiv@f1+1,f,c
  7565  0013CC  361A               	rlcf	___ftdiv@f1+2,f,c
  7566  0013CE  2E21               	decfsz	___ftdiv@cntr,f,c
  7567  0013D0  D7E7               	goto	i2l2956
  7568  0013D2  C022  F001         	movff	___ftdiv@f3,___ftpack@arg
  7569  0013D6  C023  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  7570  0013DA  C024  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  7571  0013DE  C025  F004         	movff	___ftdiv@exp,___ftpack@exp
  7572  0013E2  C026  F005         	movff	___ftdiv@sign,___ftpack@sign
  7573  0013E6  EC66  F00B         	call	___ftpack	;wreg free
  7574  0013EA  C001  F018         	movff	?___ftpack,?___ftdiv
  7575  0013EE  C002  F019         	movff	?___ftpack+1,?___ftdiv+1
  7576  0013F2  C003  F01A         	movff	?___ftpack+2,?___ftdiv+2
  7577  0013F6  0012               	return	
  7578  0013F8                     __end_of___ftdiv:
  7579                           	opt stack 0
  7580                           pclatu	equ	0xFFB
  7581                           pclath	equ	0xFFA
  7582                           tblptru	equ	0xFF8
  7583                           tblptrh	equ	0xFF7
  7584                           tblptrl	equ	0xFF6
  7585                           tablat	equ	0xFF5
  7586                           prodh	equ	0xFF4
  7587                           prodl	equ	0xFF3
  7588                           intcon	equ	0xFF2
  7589                           intcon3	equ	0xFF0
  7590                           postinc0	equ	0xFEE
  7591                           fsr0h	equ	0xFEA
  7592                           fsr0l	equ	0xFE9
  7593                           wreg	equ	0xFE8
  7594                           plusw1	equ	0xFE3
  7595                           fsr1h	equ	0xFE2
  7596                           fsr1l	equ	0xFE1
  7597                           indf2	equ	0xFDF
  7598                           postinc2	equ	0xFDE
  7599                           postdec2	equ	0xFDD
  7600                           plusw2	equ	0xFDB
  7601                           fsr2h	equ	0xFDA
  7602                           fsr2l	equ	0xFD9
  7603                           status	equ	0xFD8
  7604                           
  7605 ;; *************** function ___awtoft *****************
  7606 ;; Defined at:
  7607 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awtoft.c"
  7608 ;; Parameters:    Size  Location     Type
  7609 ;;  c               2    8[COMRAM] int 
  7610 ;; Auto vars:     Size  Location     Type
  7611 ;;  sign            1   11[COMRAM] unsigned char 
  7612 ;; Return value:  Size  Location     Type
  7613 ;;                  3    8[COMRAM] float 
  7614 ;; Registers used:
  7615 ;;		wreg, status,2, status,0, cstack
  7616 ;; Tracked objects:
  7617 ;;		On entry : 0/0
  7618 ;;		On exit  : 0/0
  7619 ;;		Unchanged: 0/0
  7620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7621 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7622 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7624 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7625 ;;Total ram usage:        4 bytes
  7626 ;; Hardware stack levels used:    1
  7627 ;; Hardware stack levels required when called:    1
  7628 ;; This function calls:
  7629 ;;		___ftpack
  7630 ;; This function is called by:
  7631 ;;		_checkV
  7632 ;; This function uses a non-reentrant model
  7633 ;;
  7634                           
  7635                           	psect	text41
  7636  001EC0                     __ptext41:
  7637                           	opt stack 0
  7638  001EC0                     ___awtoft:
  7639                           	opt stack 21
  7640                           
  7641                           ;incstack = 0
  7642  001EC0  0E00               	movlw	0
  7643  001EC2  6E0C               	movwf	___awtoft@sign,c
  7644  001EC4  AE0A               	btfss	___awtoft@c+1,7,c
  7645  001EC6  D006               	goto	i2l3070
  7646  001EC8  6C09               	negf	___awtoft@c,c
  7647  001ECA  1E0A               	comf	___awtoft@c+1,f,c
  7648  001ECC  B0D8               	btfsc	status,0,c
  7649  001ECE  2A0A               	incf	___awtoft@c+1,f,c
  7650  001ED0  0E01               	movlw	1
  7651  001ED2  6E0C               	movwf	___awtoft@sign,c
  7652  001ED4                     i2l3070:
  7653  001ED4  C009  F001         	movff	___awtoft@c,___ftpack@arg
  7654  001ED8  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  7655  001EDC  6A03               	clrf	___ftpack@arg+2,c
  7656  001EDE  0E8E               	movlw	142
  7657  001EE0  6E04               	movwf	___ftpack@exp,c
  7658  001EE2  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  7659  001EE6  EC66  F00B         	call	___ftpack	;wreg free
  7660  001EEA  C001  F009         	movff	?___ftpack,?___awtoft
  7661  001EEE  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  7662  001EF2  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  7663  001EF6  0012               	return	
  7664  001EF8                     __end_of___awtoft:
  7665                           	opt stack 0
  7666                           pclatu	equ	0xFFB
  7667                           pclath	equ	0xFFA
  7668                           tblptru	equ	0xFF8
  7669                           tblptrh	equ	0xFF7
  7670                           tblptrl	equ	0xFF6
  7671                           tablat	equ	0xFF5
  7672                           prodh	equ	0xFF4
  7673                           prodl	equ	0xFF3
  7674                           intcon	equ	0xFF2
  7675                           intcon3	equ	0xFF0
  7676                           postinc0	equ	0xFEE
  7677                           fsr0h	equ	0xFEA
  7678                           fsr0l	equ	0xFE9
  7679                           wreg	equ	0xFE8
  7680                           plusw1	equ	0xFE3
  7681                           fsr1h	equ	0xFE2
  7682                           fsr1l	equ	0xFE1
  7683                           indf2	equ	0xFDF
  7684                           postinc2	equ	0xFDE
  7685                           postdec2	equ	0xFDD
  7686                           plusw2	equ	0xFDB
  7687                           fsr2h	equ	0xFDA
  7688                           fsr2l	equ	0xFD9
  7689                           status	equ	0xFD8
  7690                           
  7691 ;; *************** function ___ftpack *****************
  7692 ;; Defined at:
  7693 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  7694 ;; Parameters:    Size  Location     Type
  7695 ;;  arg             3    0[COMRAM] unsigned um
  7696 ;;  exp             1    3[COMRAM] unsigned char 
  7697 ;;  sign            1    4[COMRAM] unsigned char 
  7698 ;; Auto vars:     Size  Location     Type
  7699 ;;		None
  7700 ;; Return value:  Size  Location     Type
  7701 ;;                  3    0[COMRAM] float 
  7702 ;; Registers used:
  7703 ;;		wreg, status,2, status,0
  7704 ;; Tracked objects:
  7705 ;;		On entry : 0/0
  7706 ;;		On exit  : 0/0
  7707 ;;		Unchanged: 0/0
  7708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7709 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7711 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7712 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7713 ;;Total ram usage:        8 bytes
  7714 ;; Hardware stack levels used:    1
  7715 ;; This function calls:
  7716 ;;		Nothing
  7717 ;; This function is called by:
  7718 ;;		___awtoft
  7719 ;;		___ftdiv
  7720 ;;		___ftmul
  7721 ;; This function uses a non-reentrant model
  7722 ;;
  7723                           
  7724                           	psect	text42
  7725  0016CC                     __ptext42:
  7726                           	opt stack 0
  7727  0016CC                     ___ftpack:
  7728                           	opt stack 21
  7729                           
  7730                           ;incstack = 0
  7731  0016CC  5004               	movf	___ftpack@exp,w,c
  7732  0016CE  B4D8               	btfsc	status,2,c
  7733  0016D0  D005               	goto	i2l2834
  7734  0016D2  5001               	movf	___ftpack@arg,w,c
  7735  0016D4  1002               	iorwf	___ftpack@arg+1,w,c
  7736  0016D6  1003               	iorwf	___ftpack@arg+2,w,c
  7737  0016D8  A4D8               	btfss	status,2,c
  7738  0016DA  D00C               	goto	i2l2840
  7739  0016DC                     i2l2834:
  7740  0016DC  0E00               	movlw	0
  7741  0016DE  6E01               	movwf	?___ftpack,c
  7742  0016E0  0E00               	movlw	0
  7743  0016E2  6E02               	movwf	?___ftpack+1,c
  7744  0016E4  0E00               	movlw	0
  7745  0016E6  6E03               	movwf	?___ftpack+2,c
  7746  0016E8  0012               	return	
  7747  0016EA                     i2l2838:
  7748  0016EA  2A04               	incf	___ftpack@exp,f,c
  7749  0016EC  90D8               	bcf	status,0,c
  7750  0016EE  3203               	rrcf	___ftpack@arg+2,f,c
  7751  0016F0  3202               	rrcf	___ftpack@arg+1,f,c
  7752  0016F2  3201               	rrcf	___ftpack@arg,f,c
  7753  0016F4                     i2l2840:
  7754  0016F4  0E00               	movlw	0
  7755  0016F6  1401               	andwf	___ftpack@arg,w,c
  7756  0016F8  6E06               	movwf	??___ftpack& (0+255),c
  7757  0016FA  0E00               	movlw	0
  7758  0016FC  1402               	andwf	___ftpack@arg+1,w,c
  7759  0016FE  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7760  001700  0EFE               	movlw	254
  7761  001702  1403               	andwf	___ftpack@arg+2,w,c
  7762  001704  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7763  001706  5006               	movf	??___ftpack,w,c
  7764  001708  1007               	iorwf	??___ftpack+1,w,c
  7765  00170A  1008               	iorwf	??___ftpack+2,w,c
  7766  00170C  B4D8               	btfsc	status,2,c
  7767  00170E  D00C               	goto	i2l2846
  7768  001710  D7EC               	goto	i2l2838
  7769  001712                     i2l2842:
  7770  001712  2A04               	incf	___ftpack@exp,f,c
  7771  001714  0E01               	movlw	1
  7772  001716  2601               	addwf	___ftpack@arg,f,c
  7773  001718  0E00               	movlw	0
  7774  00171A  2202               	addwfc	___ftpack@arg+1,f,c
  7775  00171C  0E00               	movlw	0
  7776  00171E  2203               	addwfc	___ftpack@arg+2,f,c
  7777  001720  90D8               	bcf	status,0,c
  7778  001722  3203               	rrcf	___ftpack@arg+2,f,c
  7779  001724  3202               	rrcf	___ftpack@arg+1,f,c
  7780  001726  3201               	rrcf	___ftpack@arg,f,c
  7781  001728                     i2l2846:
  7782  001728  0E00               	movlw	0
  7783  00172A  1401               	andwf	___ftpack@arg,w,c
  7784  00172C  6E06               	movwf	??___ftpack& (0+255),c
  7785  00172E  0E00               	movlw	0
  7786  001730  1402               	andwf	___ftpack@arg+1,w,c
  7787  001732  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7788  001734  0EFF               	movlw	255
  7789  001736  1403               	andwf	___ftpack@arg+2,w,c
  7790  001738  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7791  00173A  5006               	movf	??___ftpack,w,c
  7792  00173C  1007               	iorwf	??___ftpack+1,w,c
  7793  00173E  1008               	iorwf	??___ftpack+2,w,c
  7794  001740  B4D8               	btfsc	status,2,c
  7795  001742  D006               	goto	i2l2850
  7796  001744  D7E6               	goto	i2l2842
  7797  001746                     i2l2848:
  7798  001746  0604               	decf	___ftpack@exp,f,c
  7799  001748  90D8               	bcf	status,0,c
  7800  00174A  3601               	rlcf	___ftpack@arg,f,c
  7801  00174C  3602               	rlcf	___ftpack@arg+1,f,c
  7802  00174E  3603               	rlcf	___ftpack@arg+2,f,c
  7803  001750                     i2l2850:
  7804  001750  BE02               	btfsc	___ftpack@arg+1,7,c
  7805  001752  D003               	goto	i2l742
  7806  001754  0E02               	movlw	2
  7807  001756  6004               	cpfslt	___ftpack@exp,c
  7808  001758  D7F6               	goto	i2l2848
  7809  00175A                     i2l742:
  7810  00175A  A004               	btfss	___ftpack@exp,0,c
  7811  00175C  9E02               	bcf	___ftpack@arg+1,7,c
  7812  00175E  90D8               	bcf	status,0,c
  7813  001760  3204               	rrcf	___ftpack@exp,f,c
  7814  001762  5004               	movf	___ftpack@exp,w,c
  7815  001764  1203               	iorwf	___ftpack@arg+2,f,c
  7816  001766  5005               	movf	___ftpack@sign,w,c
  7817  001768  A4D8               	btfss	status,2,c
  7818  00176A  8E03               	bsf	___ftpack@arg+2,7,c
  7819  00176C  C001  F001         	movff	___ftpack@arg,?___ftpack
  7820  001770  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  7821  001774  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  7822  001778  0012               	return	
  7823  00177A                     __end_of___ftpack:
  7824                           	opt stack 0
  7825                           pclatu	equ	0xFFB
  7826                           pclath	equ	0xFFA
  7827                           tblptru	equ	0xFF8
  7828                           tblptrh	equ	0xFF7
  7829                           tblptrl	equ	0xFF6
  7830                           tablat	equ	0xFF5
  7831                           prodh	equ	0xFF4
  7832                           prodl	equ	0xFF3
  7833                           intcon	equ	0xFF2
  7834                           intcon3	equ	0xFF0
  7835                           postinc0	equ	0xFEE
  7836                           fsr0h	equ	0xFEA
  7837                           fsr0l	equ	0xFE9
  7838                           wreg	equ	0xFE8
  7839                           plusw1	equ	0xFE3
  7840                           fsr1h	equ	0xFE2
  7841                           fsr1l	equ	0xFE1
  7842                           indf2	equ	0xFDF
  7843                           postinc2	equ	0xFDE
  7844                           postdec2	equ	0xFDD
  7845                           plusw2	equ	0xFDB
  7846                           fsr2h	equ	0xFDA
  7847                           fsr2l	equ	0xFD9
  7848                           status	equ	0xFD8
  7849                           
  7850 ;; *************** function _AD *****************
  7851 ;; Defined at:
  7852 ;;		line 4 in file "sensors.c"
  7853 ;; Parameters:    Size  Location     Type
  7854 ;;  channel         1    wreg     unsigned char 
  7855 ;; Auto vars:     Size  Location     Type
  7856 ;;  channel         1    4[COMRAM] unsigned char 
  7857 ;; Return value:  Size  Location     Type
  7858 ;;                  2    0[COMRAM] int 
  7859 ;; Registers used:
  7860 ;;		wreg, status,2, status,0
  7861 ;; Tracked objects:
  7862 ;;		On entry : 0/0
  7863 ;;		On exit  : 0/0
  7864 ;;		Unchanged: 0/0
  7865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7866 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7867 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7868 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7869 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7870 ;;Total ram usage:        5 bytes
  7871 ;; Hardware stack levels used:    1
  7872 ;; This function calls:
  7873 ;;		Nothing
  7874 ;; This function is called by:
  7875 ;;		_checkV
  7876 ;; This function uses a non-reentrant model
  7877 ;;
  7878                           
  7879                           	psect	text43
  7880  001FBC                     __ptext43:
  7881                           	opt stack 0
  7882  001FBC                     _AD:
  7883                           	opt stack 22
  7884                           
  7885                           ;incstack = 0
  7886                           ;AD@channel stored from wreg
  7887  001FBC  6E05               	movwf	AD@channel,c
  7888                           
  7889                           ;sensors.c: 6: ADCON0 = ((channel << 2));
  7890  001FBE  4405               	rlncf	AD@channel,w,c
  7891  001FC0  46E8               	rlncf	wreg,f,c
  7892  001FC2  0BFC               	andlw	252
  7893  001FC4  6EC2               	movwf	4034,c	;volatile
  7894                           
  7895                           ;sensors.c: 7: ADON = 1;
  7896  001FC6  80C2               	bsf	4034,0,c	;volatile
  7897                           
  7898                           ;sensors.c: 8: ADCON0bits.GO = 1;
  7899  001FC8  82C2               	bsf	4034,1,c	;volatile
  7900  001FCA                     i2l296:
  7901  001FCA  B2C2               	btfsc	4034,1,c	;volatile
  7902  001FCC  D7FE               	goto	i2l296
  7903                           
  7904                           ;sensors.c: 10: return (ADRESH << 8) | ADRESL;
  7905  001FCE  50C3               	movf	4035,w,c	;volatile
  7906  001FD0  CFC4 F003          	movff	4036,??_AD	;volatile
  7907  001FD4  6A04               	clrf	(??_AD+1)& (0+255),c
  7908  001FD6  C003  F004         	movff	??_AD,??_AD+1
  7909  001FDA  6A03               	clrf	??_AD,c
  7910  001FDC  1003               	iorwf	??_AD,w,c
  7911  001FDE  6E01               	movwf	?_AD,c
  7912  001FE0  5004               	movf	??_AD+1,w,c
  7913  001FE2  6E02               	movwf	?_AD+1,c
  7914  001FE4  0012               	return	
  7915  001FE6                     __end_of_AD:
  7916                           	opt stack 0
  7917                           pclatu	equ	0xFFB
  7918                           pclath	equ	0xFFA
  7919                           tblptru	equ	0xFF8
  7920                           tblptrh	equ	0xFF7
  7921                           tblptrl	equ	0xFF6
  7922                           tablat	equ	0xFF5
  7923                           prodh	equ	0xFF4
  7924                           prodl	equ	0xFF3
  7925                           intcon	equ	0xFF2
  7926                           intcon3	equ	0xFF0
  7927                           postinc0	equ	0xFEE
  7928                           fsr0h	equ	0xFEA
  7929                           fsr0l	equ	0xFE9
  7930                           wreg	equ	0xFE8
  7931                           plusw1	equ	0xFE3
  7932                           fsr1h	equ	0xFE2
  7933                           fsr1l	equ	0xFE1
  7934                           indf2	equ	0xFDF
  7935                           postinc2	equ	0xFDE
  7936                           postdec2	equ	0xFDD
  7937                           plusw2	equ	0xFDB
  7938                           fsr2h	equ	0xFDA
  7939                           fsr2l	equ	0xFD9
  7940                           status	equ	0xFD8
  7941                           
  7942 ;; *************** function _WriteRun *****************
  7943 ;; Defined at:
  7944 ;;		line 75 in file "eeprom.c"
  7945 ;; Parameters:    Size  Location     Type
  7946 ;;  sorted          2    6[COMRAM] PTR unsigned char 
  7947 ;;		 -> simulate@sorted(4), 
  7948 ;;  time            2    8[COMRAM] unsigned int 
  7949 ;; Auto vars:     Size  Location     Type
  7950 ;;  add             2   12[COMRAM] unsigned int 
  7951 ;; Return value:  Size  Location     Type
  7952 ;;                  1    wreg      void 
  7953 ;; Registers used:
  7954 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7955 ;; Tracked objects:
  7956 ;;		On entry : 0/0
  7957 ;;		On exit  : 0/0
  7958 ;;		Unchanged: 0/0
  7959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7960 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7961 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7962 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7963 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7964 ;;Total ram usage:        8 bytes
  7965 ;; Hardware stack levels used:    1
  7966 ;; Hardware stack levels required when called:    1
  7967 ;; This function calls:
  7968 ;;		_WriteEE
  7969 ;;		i2___wmul
  7970 ;; This function is called by:
  7971 ;;		_simulate
  7972 ;; This function uses a non-reentrant model
  7973 ;;
  7974                           
  7975                           	psect	text44
  7976  000C44                     __ptext44:
  7977                           	opt stack 0
  7978  000C44                     _WriteRun:
  7979                           	opt stack 23
  7980                           
  7981                           ;eeprom.c: 76: unsigned int add = ++Latest;
  7982                           
  7983                           ;incstack = 0
  7984  000C44  0100               	movlb	0	; () banked
  7985  000C46  2BC6               	incf	_Latest& (0+255),f,b
  7986  000C48  C0C6  F00D         	movff	_Latest,WriteRun@add
  7987  000C4C  6A0E               	clrf	WriteRun@add+1,c
  7988                           
  7989                           ; BSR set to: 0
  7990                           ;eeprom.c: 77: if (add > 3) {
  7991  000C4E  500E               	movf	WriteRun@add+1,w,c
  7992  000C50  E104               	bnz	i2u287_40
  7993  000C52  0E04               	movlw	4
  7994  000C54  5C0D               	subwf	WriteRun@add,w,c
  7995  000C56  A0D8               	btfss	status,0,c
  7996  000C58  D006               	goto	i2l3902
  7997  000C5A                     i2u287_40:
  7998                           
  7999                           ; BSR set to: 0
  8000                           ;eeprom.c: 78: add -= 4;
  8001  000C5A  0E04               	movlw	4
  8002  000C5C  5E0D               	subwf	WriteRun@add,f,c
  8003  000C5E  0E00               	movlw	0
  8004  000C60  5A0E               	subwfb	WriteRun@add+1,f,c
  8005                           
  8006                           ; BSR set to: 0
  8007                           ;eeprom.c: 79: Latest = add;
  8008  000C62  C00D  F0C6         	movff	WriteRun@add,_Latest
  8009  000C66                     i2l3902:
  8010                           
  8011                           ; BSR set to: 0
  8012                           ;eeprom.c: 80: }
  8013                           ;eeprom.c: 81: add *= 5;
  8014  000C66  C00D  F001         	movff	WriteRun@add,i2___wmul@multiplier
  8015  000C6A  C00E  F002         	movff	WriteRun@add+1,i2___wmul@multiplier+1
  8016  000C6E  0E00               	movlw	0
  8017  000C70  6E04               	movwf	i2___wmul@multiplicand+1,c
  8018  000C72  0E05               	movlw	5
  8019  000C74  6E03               	movwf	i2___wmul@multiplicand,c
  8020  000C76  EC2C  F010         	call	i2___wmul	;wreg free
  8021  000C7A  C001  F00D         	movff	?i2___wmul,WriteRun@add
  8022  000C7E  C002  F00E         	movff	?i2___wmul+1,WriteRun@add+1
  8023                           
  8024                           ;eeprom.c: 82: WriteEE(add++ *8, time);
  8025  000C82  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  8026  000C86  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  8027  000C8A  90D8               	bcf	status,0,c
  8028  000C8C  360B               	rlcf	??_WriteRun,f,c
  8029  000C8E  360C               	rlcf	??_WriteRun+1,f,c
  8030  000C90  90D8               	bcf	status,0,c
  8031  000C92  360B               	rlcf	??_WriteRun,f,c
  8032  000C94  360C               	rlcf	??_WriteRun+1,f,c
  8033  000C96  90D8               	bcf	status,0,c
  8034  000C98  360B               	rlcf	??_WriteRun,f,c
  8035  000C9A  360C               	rlcf	??_WriteRun+1,f,c
  8036  000C9C  C00B  F001         	movff	??_WriteRun,WriteEE@address
  8037  000CA0  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  8038  000CA4  C009  F003         	movff	WriteRun@time,WriteEE@data
  8039  000CA8  EC19  F010         	call	_WriteEE	;wreg free
  8040  000CAC  4A0D               	infsnz	WriteRun@add,f,c
  8041  000CAE  2A0E               	incf	WriteRun@add+1,f,c
  8042                           
  8043                           ;eeprom.c: 83: WriteEE(add++ *8, sorted[0]);
  8044  000CB0  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  8045  000CB4  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  8046  000CB8  90D8               	bcf	status,0,c
  8047  000CBA  360B               	rlcf	??_WriteRun,f,c
  8048  000CBC  360C               	rlcf	??_WriteRun+1,f,c
  8049  000CBE  90D8               	bcf	status,0,c
  8050  000CC0  360B               	rlcf	??_WriteRun,f,c
  8051  000CC2  360C               	rlcf	??_WriteRun+1,f,c
  8052  000CC4  90D8               	bcf	status,0,c
  8053  000CC6  360B               	rlcf	??_WriteRun,f,c
  8054  000CC8  360C               	rlcf	??_WriteRun+1,f,c
  8055  000CCA  C00B  F001         	movff	??_WriteRun,WriteEE@address
  8056  000CCE  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  8057  000CD2  C007  FFD9         	movff	WriteRun@sorted,fsr2l
  8058  000CD6  C008  FFDA         	movff	WriteRun@sorted+1,fsr2h
  8059  000CDA  50DF               	movf	indf2,w,c
  8060  000CDC  6E03               	movwf	WriteEE@data,c
  8061  000CDE  EC19  F010         	call	_WriteEE	;wreg free
  8062  000CE2  4A0D               	infsnz	WriteRun@add,f,c
  8063  000CE4  2A0E               	incf	WriteRun@add+1,f,c
  8064                           
  8065                           ;eeprom.c: 84: WriteEE(add++ *8, sorted[1]);
  8066  000CE6  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  8067  000CEA  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  8068  000CEE  90D8               	bcf	status,0,c
  8069  000CF0  360B               	rlcf	??_WriteRun,f,c
  8070  000CF2  360C               	rlcf	??_WriteRun+1,f,c
  8071  000CF4  90D8               	bcf	status,0,c
  8072  000CF6  360B               	rlcf	??_WriteRun,f,c
  8073  000CF8  360C               	rlcf	??_WriteRun+1,f,c
  8074  000CFA  90D8               	bcf	status,0,c
  8075  000CFC  360B               	rlcf	??_WriteRun,f,c
  8076  000CFE  360C               	rlcf	??_WriteRun+1,f,c
  8077  000D00  C00B  F001         	movff	??_WriteRun,WriteEE@address
  8078  000D04  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  8079  000D08  EE20 F001          	lfsr	2,1
  8080  000D0C  5007               	movf	WriteRun@sorted,w,c
  8081  000D0E  26D9               	addwf	fsr2l,f,c
  8082  000D10  5008               	movf	WriteRun@sorted+1,w,c
  8083  000D12  22DA               	addwfc	fsr2h,f,c
  8084  000D14  50DF               	movf	indf2,w,c
  8085  000D16  6E03               	movwf	WriteEE@data,c
  8086  000D18  EC19  F010         	call	_WriteEE	;wreg free
  8087  000D1C  4A0D               	infsnz	WriteRun@add,f,c
  8088  000D1E  2A0E               	incf	WriteRun@add+1,f,c
  8089                           
  8090                           ;eeprom.c: 85: WriteEE(add++ *8, sorted[2]);
  8091  000D20  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  8092  000D24  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  8093  000D28  90D8               	bcf	status,0,c
  8094  000D2A  360B               	rlcf	??_WriteRun,f,c
  8095  000D2C  360C               	rlcf	??_WriteRun+1,f,c
  8096  000D2E  90D8               	bcf	status,0,c
  8097  000D30  360B               	rlcf	??_WriteRun,f,c
  8098  000D32  360C               	rlcf	??_WriteRun+1,f,c
  8099  000D34  90D8               	bcf	status,0,c
  8100  000D36  360B               	rlcf	??_WriteRun,f,c
  8101  000D38  360C               	rlcf	??_WriteRun+1,f,c
  8102  000D3A  C00B  F001         	movff	??_WriteRun,WriteEE@address
  8103  000D3E  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  8104  000D42  EE20 F002          	lfsr	2,2
  8105  000D46  5007               	movf	WriteRun@sorted,w,c
  8106  000D48  26D9               	addwf	fsr2l,f,c
  8107  000D4A  5008               	movf	WriteRun@sorted+1,w,c
  8108  000D4C  22DA               	addwfc	fsr2h,f,c
  8109  000D4E  50DF               	movf	indf2,w,c
  8110  000D50  6E03               	movwf	WriteEE@data,c
  8111  000D52  EC19  F010         	call	_WriteEE	;wreg free
  8112  000D56  4A0D               	infsnz	WriteRun@add,f,c
  8113  000D58  2A0E               	incf	WriteRun@add+1,f,c
  8114                           
  8115                           ;eeprom.c: 86: WriteEE(add++ *8, sorted[3]);
  8116  000D5A  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  8117  000D5E  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  8118  000D62  90D8               	bcf	status,0,c
  8119  000D64  360B               	rlcf	??_WriteRun,f,c
  8120  000D66  360C               	rlcf	??_WriteRun+1,f,c
  8121  000D68  90D8               	bcf	status,0,c
  8122  000D6A  360B               	rlcf	??_WriteRun,f,c
  8123  000D6C  360C               	rlcf	??_WriteRun+1,f,c
  8124  000D6E  90D8               	bcf	status,0,c
  8125  000D70  360B               	rlcf	??_WriteRun,f,c
  8126  000D72  360C               	rlcf	??_WriteRun+1,f,c
  8127  000D74  C00B  F001         	movff	??_WriteRun,WriteEE@address
  8128  000D78  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  8129  000D7C  EE20 F003          	lfsr	2,3
  8130  000D80  5007               	movf	WriteRun@sorted,w,c
  8131  000D82  26D9               	addwf	fsr2l,f,c
  8132  000D84  5008               	movf	WriteRun@sorted+1,w,c
  8133  000D86  22DA               	addwfc	fsr2h,f,c
  8134  000D88  50DF               	movf	indf2,w,c
  8135  000D8A  6E03               	movwf	WriteEE@data,c
  8136  000D8C  EC19  F010         	call	_WriteEE	;wreg free
  8137  000D90  4A0D               	infsnz	WriteRun@add,f,c
  8138  000D92  2A0E               	incf	WriteRun@add+1,f,c
  8139                           
  8140                           ;eeprom.c: 87: WriteEE(160, Latest);
  8141  000D94  0E00               	movlw	0
  8142  000D96  6E02               	movwf	WriteEE@address+1,c
  8143  000D98  0EA0               	movlw	160
  8144  000D9A  6E01               	movwf	WriteEE@address,c
  8145  000D9C  C0C6  F003         	movff	_Latest,WriteEE@data
  8146  000DA0  EC19  F010         	call	_WriteEE	;wreg free
  8147  000DA4  0012               	return		;funcret
  8148  000DA6                     __end_of_WriteRun:
  8149                           	opt stack 0
  8150                           pclatu	equ	0xFFB
  8151                           pclath	equ	0xFFA
  8152                           tblptru	equ	0xFF8
  8153                           tblptrh	equ	0xFF7
  8154                           tblptrl	equ	0xFF6
  8155                           tablat	equ	0xFF5
  8156                           prodh	equ	0xFF4
  8157                           prodl	equ	0xFF3
  8158                           intcon	equ	0xFF2
  8159                           intcon3	equ	0xFF0
  8160                           postinc0	equ	0xFEE
  8161                           fsr0h	equ	0xFEA
  8162                           fsr0l	equ	0xFE9
  8163                           wreg	equ	0xFE8
  8164                           plusw1	equ	0xFE3
  8165                           fsr1h	equ	0xFE2
  8166                           fsr1l	equ	0xFE1
  8167                           indf2	equ	0xFDF
  8168                           postinc2	equ	0xFDE
  8169                           postdec2	equ	0xFDD
  8170                           plusw2	equ	0xFDB
  8171                           fsr2h	equ	0xFDA
  8172                           fsr2l	equ	0xFD9
  8173                           status	equ	0xFD8
  8174                           
  8175 ;; *************** function _WriteEE *****************
  8176 ;; Defined at:
  8177 ;;		line 34 in file "eeprom.c"
  8178 ;; Parameters:    Size  Location     Type
  8179 ;;  address         2    0[COMRAM] unsigned int 
  8180 ;;  data            1    2[COMRAM] unsigned char 
  8181 ;; Auto vars:     Size  Location     Type
  8182 ;;		None
  8183 ;; Return value:  Size  Location     Type
  8184 ;;                  1    wreg      void 
  8185 ;; Registers used:
  8186 ;;		wreg, status,2
  8187 ;; Tracked objects:
  8188 ;;		On entry : 0/0
  8189 ;;		On exit  : 0/0
  8190 ;;		Unchanged: 0/0
  8191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8192 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8195 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8196 ;;Total ram usage:        3 bytes
  8197 ;; Hardware stack levels used:    1
  8198 ;; This function calls:
  8199 ;;		Nothing
  8200 ;; This function is called by:
  8201 ;;		_WriteRun
  8202 ;; This function uses a non-reentrant model
  8203 ;;
  8204                           
  8205                           	psect	text45
  8206  002032                     __ptext45:
  8207                           	opt stack 0
  8208  002032                     _WriteEE:
  8209                           	opt stack 23
  8210                           
  8211                           ;eeprom.c: 36: EEADRH = (unsigned char) (address >> 8);
  8212                           
  8213                           ;incstack = 0
  8214  002032  5002               	movf	WriteEE@address+1,w,c
  8215  002034  6EAA               	movwf	4010,c	;volatile
  8216                           
  8217                           ;eeprom.c: 37: EEADR = (unsigned char) address;
  8218  002036  C001  FFA9         	movff	WriteEE@address,4009	;volatile
  8219                           
  8220                           ;eeprom.c: 39: EEDATA = data;
  8221  00203A  C003  FFA8         	movff	WriteEE@data,4008	;volatile
  8222                           
  8223                           ;eeprom.c: 40: EECON1bits.EEPGD = 0;
  8224  00203E  9EA6               	bcf	4006,7,c	;volatile
  8225                           
  8226                           ;eeprom.c: 41: EECON1bits.CFGS = 0;
  8227  002040  9CA6               	bcf	4006,6,c	;volatile
  8228                           
  8229                           ;eeprom.c: 42: EECON1bits.WREN = 1;
  8230  002042  84A6               	bsf	4006,2,c	;volatile
  8231                           
  8232                           ;eeprom.c: 46: EECON2 = 0x55;
  8233  002044  0E55               	movlw	85
  8234  002046  6EA7               	movwf	4007,c	;volatile
  8235                           
  8236                           ;eeprom.c: 47: EECON2 = 0xAA;
  8237  002048  0EAA               	movlw	170
  8238  00204A  6EA7               	movwf	4007,c	;volatile
  8239                           
  8240                           ;eeprom.c: 48: EECON1bits.WR = 1;
  8241  00204C  82A6               	bsf	4006,1,c	;volatile
  8242  00204E                     i2l427:
  8243  00204E  A8A1               	btfss	4001,4,c	;volatile
  8244  002050  D7FE               	goto	i2l427
  8245                           
  8246                           ;eeprom.c: 53: PIR2bits.EEIF = 0;
  8247  002052  98A1               	bcf	4001,4,c	;volatile
  8248                           
  8249                           ;eeprom.c: 54: EECON1bits.WREN = 0;
  8250  002054  94A6               	bcf	4006,2,c	;volatile
  8251  002056  0012               	return		;funcret
  8252  002058                     __end_of_WriteEE:
  8253                           	opt stack 0
  8254                           pclatu	equ	0xFFB
  8255                           pclath	equ	0xFFA
  8256                           tblptru	equ	0xFF8
  8257                           tblptrh	equ	0xFF7
  8258                           tblptrl	equ	0xFF6
  8259                           tablat	equ	0xFF5
  8260                           prodh	equ	0xFF4
  8261                           prodl	equ	0xFF3
  8262                           intcon	equ	0xFF2
  8263                           intcon3	equ	0xFF0
  8264                           postinc0	equ	0xFEE
  8265                           fsr0h	equ	0xFEA
  8266                           fsr0l	equ	0xFE9
  8267                           wreg	equ	0xFE8
  8268                           plusw1	equ	0xFE3
  8269                           fsr1h	equ	0xFE2
  8270                           fsr1l	equ	0xFE1
  8271                           indf2	equ	0xFDF
  8272                           postinc2	equ	0xFDE
  8273                           postdec2	equ	0xFDD
  8274                           plusw2	equ	0xFDB
  8275                           fsr2h	equ	0xFDA
  8276                           fsr2l	equ	0xFD9
  8277                           status	equ	0xFD8
  8278                           
  8279 ;; *************** function _HexDecToDec2 *****************
  8280 ;; Defined at:
  8281 ;;		line 6 in file "modules.c"
  8282 ;; Parameters:    Size  Location     Type
  8283 ;;  hex             2    6[COMRAM] unsigned int 
  8284 ;; Auto vars:     Size  Location     Type
  8285 ;;  digit           2   13[COMRAM] unsigned int 
  8286 ;;  tenth           2   11[COMRAM] unsigned int 
  8287 ;; Return value:  Size  Location     Type
  8288 ;;                  2    6[COMRAM] unsigned int 
  8289 ;; Registers used:
  8290 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8291 ;; Tracked objects:
  8292 ;;		On entry : 0/0
  8293 ;;		On exit  : 0/0
  8294 ;;		Unchanged: 0/0
  8295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8296 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8297 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8298 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8299 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8300 ;;Total ram usage:        9 bytes
  8301 ;; Hardware stack levels used:    1
  8302 ;; Hardware stack levels required when called:    1
  8303 ;; This function calls:
  8304 ;;		i2___wmul
  8305 ;; This function is called by:
  8306 ;;		_simulate
  8307 ;; This function uses a non-reentrant model
  8308 ;;
  8309                           
  8310                           	psect	text46
  8311  001DF0                     __ptext46:
  8312                           	opt stack 0
  8313  001DF0                     _HexDecToDec2:
  8314                           	opt stack 23
  8315                           
  8316                           ;modules.c: 8: unsigned tenth = hex / 16;
  8317                           
  8318                           ;incstack = 0
  8319  001DF0  C007  F009         	movff	HexDecToDec2@hex,??_HexDecToDec2
  8320  001DF4  C008  F00A         	movff	HexDecToDec2@hex+1,??_HexDecToDec2+1
  8321  001DF8  0E04               	movlw	4
  8322  001DFA  6E0B               	movwf	(??_HexDecToDec2+2)& (0+255),c
  8323  001DFC                     i2u284_45:
  8324  001DFC  90D8               	bcf	status,0,c
  8325  001DFE  320A               	rrcf	??_HexDecToDec2+1,f,c
  8326  001E00  3209               	rrcf	??_HexDecToDec2,f,c
  8327  001E02  2E0B               	decfsz	(??_HexDecToDec2+2)& (0+255),f,c
  8328  001E04  D7FB               	goto	i2u284_45
  8329  001E06  C009  F00C         	movff	??_HexDecToDec2,HexDecToDec2@tenth
  8330  001E0A  C00A  F00D         	movff	??_HexDecToDec2+1,HexDecToDec2@tenth+1
  8331                           
  8332                           ;modules.c: 9: unsigned digit = hex % 16;
  8333  001E0E  0E0F               	movlw	15
  8334  001E10  1407               	andwf	HexDecToDec2@hex,w,c
  8335  001E12  6E0E               	movwf	HexDecToDec2@digit,c
  8336  001E14  6A0F               	clrf	HexDecToDec2@digit+1,c
  8337                           
  8338                           ;modules.c: 10: return tenth * 10 + digit;
  8339  001E16  C00C  F001         	movff	HexDecToDec2@tenth,i2___wmul@multiplier
  8340  001E1A  C00D  F002         	movff	HexDecToDec2@tenth+1,i2___wmul@multiplier+1
  8341  001E1E  0E00               	movlw	0
  8342  001E20  6E04               	movwf	i2___wmul@multiplicand+1,c
  8343  001E22  0E0A               	movlw	10
  8344  001E24  6E03               	movwf	i2___wmul@multiplicand,c
  8345  001E26  EC2C  F010         	call	i2___wmul	;wreg free
  8346  001E2A  500E               	movf	HexDecToDec2@digit,w,c
  8347  001E2C  2401               	addwf	?i2___wmul,w,c
  8348  001E2E  6E07               	movwf	?_HexDecToDec2,c
  8349  001E30  500F               	movf	HexDecToDec2@digit+1,w,c
  8350  001E32  2002               	addwfc	?i2___wmul+1,w,c
  8351  001E34  6E08               	movwf	?_HexDecToDec2+1,c
  8352  001E36  0012               	return	
  8353  001E38                     __end_of_HexDecToDec2:
  8354                           	opt stack 0
  8355                           pclatu	equ	0xFFB
  8356                           pclath	equ	0xFFA
  8357                           tblptru	equ	0xFF8
  8358                           tblptrh	equ	0xFF7
  8359                           tblptrl	equ	0xFF6
  8360                           tablat	equ	0xFF5
  8361                           prodh	equ	0xFF4
  8362                           prodl	equ	0xFF3
  8363                           intcon	equ	0xFF2
  8364                           intcon3	equ	0xFF0
  8365                           postinc0	equ	0xFEE
  8366                           fsr0h	equ	0xFEA
  8367                           fsr0l	equ	0xFE9
  8368                           wreg	equ	0xFE8
  8369                           plusw1	equ	0xFE3
  8370                           fsr1h	equ	0xFE2
  8371                           fsr1l	equ	0xFE1
  8372                           indf2	equ	0xFDF
  8373                           postinc2	equ	0xFDE
  8374                           postdec2	equ	0xFDD
  8375                           plusw2	equ	0xFDB
  8376                           fsr2h	equ	0xFDA
  8377                           fsr2l	equ	0xFD9
  8378                           status	equ	0xFD8
  8379                           
  8380 ;; *************** function _CW90 *****************
  8381 ;; Defined at:
  8382 ;;		line 19 in file "motors.c"
  8383 ;; Parameters:    Size  Location     Type
  8384 ;;  port            2   21[COMRAM] PTR int 
  8385 ;;		 -> simulate@portCW(6), 
  8386 ;; Auto vars:     Size  Location     Type
  8387 ;;		None
  8388 ;; Return value:  Size  Location     Type
  8389 ;;                  1    wreg      void 
  8390 ;; Registers used:
  8391 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8392 ;; Tracked objects:
  8393 ;;		On entry : 0/0
  8394 ;;		On exit  : 0/0
  8395 ;;		Unchanged: 0/0
  8396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8397 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8400 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8401 ;;Total ram usage:        2 bytes
  8402 ;; Hardware stack levels used:    1
  8403 ;; Hardware stack levels required when called:    2
  8404 ;; This function calls:
  8405 ;;		_PWMC
  8406 ;; This function is called by:
  8407 ;;		_simulate
  8408 ;; This function uses a non-reentrant model
  8409 ;;
  8410                           
  8411                           	psect	text47
  8412  0020A0                     __ptext47:
  8413                           	opt stack 0
  8414  0020A0                     _CW90:
  8415                           	opt stack 22
  8416                           
  8417                           ;motors.c: 21: PWMC(3000, 96, port);
  8418                           
  8419                           ;incstack = 0
  8420  0020A0  0E0B               	movlw	11
  8421  0020A2  6E0A               	movwf	PWMC@widthus+1,c
  8422  0020A4  0EB8               	movlw	184
  8423  0020A6  6E09               	movwf	PWMC@widthus,c
  8424  0020A8  0E00               	movlw	0
  8425  0020AA  6E0C               	movwf	PWMC@cycles+1,c
  8426  0020AC  0E60               	movlw	96
  8427  0020AE  6E0B               	movwf	PWMC@cycles,c
  8428  0020B0  C016  F00D         	movff	CW90@port,PWMC@port
  8429  0020B4  C017  F00E         	movff	CW90@port+1,PWMC@port+1
  8430  0020B8  EC10  F009         	call	_PWMC	;wreg free
  8431  0020BC  0012               	return		;funcret
  8432  0020BE                     __end_of_CW90:
  8433                           	opt stack 0
  8434                           pclatu	equ	0xFFB
  8435                           pclath	equ	0xFFA
  8436                           tblptru	equ	0xFF8
  8437                           tblptrh	equ	0xFF7
  8438                           tblptrl	equ	0xFF6
  8439                           tablat	equ	0xFF5
  8440                           prodh	equ	0xFF4
  8441                           prodl	equ	0xFF3
  8442                           intcon	equ	0xFF2
  8443                           intcon3	equ	0xFF0
  8444                           postinc0	equ	0xFEE
  8445                           fsr0h	equ	0xFEA
  8446                           fsr0l	equ	0xFE9
  8447                           wreg	equ	0xFE8
  8448                           plusw1	equ	0xFE3
  8449                           fsr1h	equ	0xFE2
  8450                           fsr1l	equ	0xFE1
  8451                           indf2	equ	0xFDF
  8452                           postinc2	equ	0xFDE
  8453                           postdec2	equ	0xFDD
  8454                           plusw2	equ	0xFDB
  8455                           fsr2h	equ	0xFDA
  8456                           fsr2l	equ	0xFD9
  8457                           status	equ	0xFD8
  8458                           
  8459 ;; *************** function _CCW90 *****************
  8460 ;; Defined at:
  8461 ;;		line 24 in file "motors.c"
  8462 ;; Parameters:    Size  Location     Type
  8463 ;;  port            2   21[COMRAM] PTR int 
  8464 ;;		 -> simulate@portCCW(6), 
  8465 ;; Auto vars:     Size  Location     Type
  8466 ;;		None
  8467 ;; Return value:  Size  Location     Type
  8468 ;;                  1    wreg      void 
  8469 ;; Registers used:
  8470 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8471 ;; Tracked objects:
  8472 ;;		On entry : 0/0
  8473 ;;		On exit  : 0/0
  8474 ;;		Unchanged: 0/0
  8475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8476 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8479 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8480 ;;Total ram usage:        2 bytes
  8481 ;; Hardware stack levels used:    1
  8482 ;; Hardware stack levels required when called:    2
  8483 ;; This function calls:
  8484 ;;		_PWMC
  8485 ;; This function is called by:
  8486 ;;		_simulate
  8487 ;; This function uses a non-reentrant model
  8488 ;;
  8489                           
  8490                           	psect	text48
  8491  0020BE                     __ptext48:
  8492                           	opt stack 0
  8493  0020BE                     _CCW90:
  8494                           	opt stack 22
  8495                           
  8496                           ;motors.c: 26: PWMC(300, 1400, port);
  8497                           
  8498                           ;incstack = 0
  8499  0020BE  0E01               	movlw	1
  8500  0020C0  6E0A               	movwf	PWMC@widthus+1,c
  8501  0020C2  0E2C               	movlw	44
  8502  0020C4  6E09               	movwf	PWMC@widthus,c
  8503  0020C6  0E05               	movlw	5
  8504  0020C8  6E0C               	movwf	PWMC@cycles+1,c
  8505  0020CA  0E78               	movlw	120
  8506  0020CC  6E0B               	movwf	PWMC@cycles,c
  8507  0020CE  C016  F00D         	movff	CCW90@port,PWMC@port
  8508  0020D2  C017  F00E         	movff	CCW90@port+1,PWMC@port+1
  8509  0020D6  EC10  F009         	call	_PWMC	;wreg free
  8510  0020DA  0012               	return		;funcret
  8511  0020DC                     __end_of_CCW90:
  8512                           	opt stack 0
  8513                           pclatu	equ	0xFFB
  8514                           pclath	equ	0xFFA
  8515                           tblptru	equ	0xFF8
  8516                           tblptrh	equ	0xFF7
  8517                           tblptrl	equ	0xFF6
  8518                           tablat	equ	0xFF5
  8519                           prodh	equ	0xFF4
  8520                           prodl	equ	0xFF3
  8521                           intcon	equ	0xFF2
  8522                           intcon3	equ	0xFF0
  8523                           postinc0	equ	0xFEE
  8524                           fsr0h	equ	0xFEA
  8525                           fsr0l	equ	0xFE9
  8526                           wreg	equ	0xFE8
  8527                           plusw1	equ	0xFE3
  8528                           fsr1h	equ	0xFE2
  8529                           fsr1l	equ	0xFE1
  8530                           indf2	equ	0xFDF
  8531                           postinc2	equ	0xFDE
  8532                           postdec2	equ	0xFDD
  8533                           plusw2	equ	0xFDB
  8534                           fsr2h	equ	0xFDA
  8535                           fsr2l	equ	0xFD9
  8536                           status	equ	0xFD8
  8537                           
  8538 ;; *************** function _PWMC *****************
  8539 ;; Defined at:
  8540 ;;		line 4 in file "motors.c"
  8541 ;; Parameters:    Size  Location     Type
  8542 ;;  widthus         2    8[COMRAM] int 
  8543 ;;  cycles          2   10[COMRAM] int 
  8544 ;;  port            2   12[COMRAM] PTR int 
  8545 ;;		 -> simulate@portCCW(6), simulate@portCW(6), 
  8546 ;; Auto vars:     Size  Location     Type
  8547 ;;  countdown       2   19[COMRAM] int 
  8548 ;; Return value:  Size  Location     Type
  8549 ;;                  1    wreg      void 
  8550 ;; Registers used:
  8551 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8552 ;; Tracked objects:
  8553 ;;		On entry : 0/0
  8554 ;;		On exit  : 0/0
  8555 ;;		Unchanged: 0/0
  8556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8557 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8558 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8559 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8560 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8561 ;;Total ram usage:       13 bytes
  8562 ;; Hardware stack levels used:    1
  8563 ;; Hardware stack levels required when called:    1
  8564 ;; This function calls:
  8565 ;;		___awdiv
  8566 ;; This function is called by:
  8567 ;;		_CW90
  8568 ;;		_CCW90
  8569 ;; This function uses a non-reentrant model
  8570 ;;
  8571                           
  8572                           	psect	text49
  8573  001220                     __ptext49:
  8574                           	opt stack 0
  8575  001220                     _PWMC:
  8576                           	opt stack 22
  8577                           
  8578                           ;motors.c: 5: widthus /= 10;
  8579                           
  8580                           ;incstack = 0
  8581  001220  C009  F001         	movff	PWMC@widthus,___awdiv@dividend
  8582  001224  C00A  F002         	movff	PWMC@widthus+1,___awdiv@dividend+1
  8583  001228  0E00               	movlw	0
  8584  00122A  6E04               	movwf	___awdiv@divisor+1,c
  8585  00122C  0E0A               	movlw	10
  8586  00122E  6E03               	movwf	___awdiv@divisor,c
  8587  001230  EC8C  F00C         	call	___awdiv	;wreg free
  8588  001234  C001  F009         	movff	?___awdiv,PWMC@widthus
  8589  001238  C002  F00A         	movff	?___awdiv+1,PWMC@widthus+1
  8590                           
  8591                           ;motors.c: 6: widthus -= 1;
  8592  00123C  0609               	decf	PWMC@widthus,f,c
  8593  00123E  A0D8               	btfss	status,0,c
  8594  001240  060A               	decf	PWMC@widthus+1,f,c
  8595                           
  8596                           ;motors.c: 7: int countdown = widthus;
  8597  001242  C009  F014         	movff	PWMC@widthus,PWMC@countdown
  8598  001246  C00A  F015         	movff	PWMC@widthus+1,PWMC@countdown+1
  8599  00124A                     i2l3204:
  8600  00124A  BE0C               	btfsc	PWMC@cycles+1,7,c
  8601  00124C  0012               	return	
  8602  00124E  500C               	movf	PWMC@cycles+1,w,c
  8603  001250  E103               	bnz	i2l260
  8604  001252  040B               	decf	PWMC@cycles,w,c
  8605  001254  A0D8               	btfss	status,0,c
  8606  001256  0012               	return	
  8607  001258                     i2l260:
  8608                           
  8609                           ;motors.c: 9: countdown = widthus;
  8610  001258  C009  F014         	movff	PWMC@widthus,PWMC@countdown
  8611  00125C  C00A  F015         	movff	PWMC@widthus+1,PWMC@countdown+1
  8612                           
  8613                           ;motors.c: 10: LATC0 = (1 ^ LATC0) & port[0];
  8614  001260  0E00               	movlw	0
  8615  001262  6E11               	movwf	_PWMC$1398,c
  8616  001264  B08B               	btfsc	3979,0,c	;volatile
  8617  001266  D00D               	goto	i2l3216
  8618  001268  C00D  FFD9         	movff	PWMC@port,fsr2l
  8619  00126C  C00E  FFDA         	movff	PWMC@port+1,fsr2h
  8620  001270  CFDE F00F          	movff	postinc2,??_PWMC
  8621  001274  CFDD F010          	movff	postdec2,??_PWMC+1
  8622  001278  300F               	rrcf	??_PWMC,w,c
  8623  00127A  A0D8               	btfss	status,0,c
  8624  00127C  D002               	goto	i2l3216
  8625  00127E  0E01               	movlw	1
  8626  001280  6E11               	movwf	_PWMC$1398,c
  8627  001282                     i2l3216:
  8628  001282  B011               	btfsc	_PWMC$1398,0,c
  8629  001284  D002               	bra	i2u205_45
  8630  001286  908B               	bcf	3979,0,c	;volatile
  8631  001288  D001               	bra	i2u205_46
  8632  00128A                     i2u205_45:
  8633  00128A  808B               	bsf	3979,0,c	;volatile
  8634  00128C                     i2u205_46:
  8635                           
  8636                           ;motors.c: 11: LATC1 = (1 ^ LATC1) & port[1];
  8637  00128C  0E00               	movlw	0
  8638  00128E  6E12               	movwf	_PWMC$1399,c
  8639  001290  B28B               	btfsc	3979,1,c	;volatile
  8640  001292  D00F               	goto	i2l3224
  8641  001294  EE20 F002          	lfsr	2,2
  8642  001298  500D               	movf	PWMC@port,w,c
  8643  00129A  26D9               	addwf	fsr2l,f,c
  8644  00129C  500E               	movf	PWMC@port+1,w,c
  8645  00129E  22DA               	addwfc	fsr2h,f,c
  8646  0012A0  CFDE F00F          	movff	postinc2,??_PWMC
  8647  0012A4  CFDD F010          	movff	postdec2,??_PWMC+1
  8648  0012A8  300F               	rrcf	??_PWMC,w,c
  8649  0012AA  A0D8               	btfss	status,0,c
  8650  0012AC  D002               	goto	i2l3224
  8651  0012AE  0E01               	movlw	1
  8652  0012B0  6E12               	movwf	_PWMC$1399,c
  8653  0012B2                     i2l3224:
  8654  0012B2  B012               	btfsc	_PWMC$1399,0,c
  8655  0012B4  D002               	bra	i2u208_45
  8656  0012B6  928B               	bcf	3979,1,c	;volatile
  8657  0012B8  D001               	bra	i2u208_46
  8658  0012BA                     i2u208_45:
  8659  0012BA  828B               	bsf	3979,1,c	;volatile
  8660  0012BC                     i2u208_46:
  8661                           
  8662                           ;motors.c: 12: LATC2 = (1 ^ LATC2) & port[2];
  8663  0012BC  0E00               	movlw	0
  8664  0012BE  6E13               	movwf	_PWMC$1400,c
  8665  0012C0  B48B               	btfsc	3979,2,c	;volatile
  8666  0012C2  D00F               	goto	i2l3232
  8667  0012C4  EE20 F004          	lfsr	2,4
  8668  0012C8  500D               	movf	PWMC@port,w,c
  8669  0012CA  26D9               	addwf	fsr2l,f,c
  8670  0012CC  500E               	movf	PWMC@port+1,w,c
  8671  0012CE  22DA               	addwfc	fsr2h,f,c
  8672  0012D0  CFDE F00F          	movff	postinc2,??_PWMC
  8673  0012D4  CFDD F010          	movff	postdec2,??_PWMC+1
  8674  0012D8  300F               	rrcf	??_PWMC,w,c
  8675  0012DA  A0D8               	btfss	status,0,c
  8676  0012DC  D002               	goto	i2l3232
  8677  0012DE  0E01               	movlw	1
  8678  0012E0  6E13               	movwf	_PWMC$1400,c
  8679  0012E2                     i2l3232:
  8680  0012E2  B013               	btfsc	_PWMC$1400,0,c
  8681  0012E4  D002               	bra	i2u211_45
  8682  0012E6  948B               	bcf	3979,2,c	;volatile
  8683  0012E8  D001               	bra	i2u211_46
  8684  0012EA                     i2u211_45:
  8685  0012EA  848B               	bsf	3979,2,c	;volatile
  8686  0012EC                     i2u211_46:
  8687  0012EC                     i2l3234:
  8688  0012EC  BE15               	btfsc	PWMC@countdown+1,7,c
  8689  0012EE  D00D               	goto	i2l3242
  8690  0012F0  5015               	movf	PWMC@countdown+1,w,c
  8691  0012F2  E103               	bnz	i2l3238
  8692  0012F4  0414               	decf	PWMC@countdown,w,c
  8693  0012F6  A0D8               	btfss	status,0,c
  8694  0012F8  D008               	goto	i2l3242
  8695  0012FA                     i2l3238:
  8696                           
  8697                           ;motors.c: 14: _delay((unsigned long)((5)*(8000000/4000000.0)));
  8698  0012FA  0E03               	movlw	3
  8699  0012FC                     i2u316_47:
  8700  0012FC  2EE8               	decfsz	wreg,f,c
  8701  0012FE  D7FE               	bra	i2u316_47
  8702  001300  F000               	nop	
  8703  001302  0614               	decf	PWMC@countdown,f,c
  8704  001304  A0D8               	btfss	status,0,c
  8705  001306  0615               	decf	PWMC@countdown+1,f,c
  8706  001308  D7F1               	goto	i2l3234
  8707  00130A                     i2l3242:
  8708  00130A  060B               	decf	PWMC@cycles,f,c
  8709  00130C  A0D8               	btfss	status,0,c
  8710  00130E  060C               	decf	PWMC@cycles+1,f,c
  8711  001310  D79C               	goto	i2l3204
  8712  001312                     __end_of_PWMC:
  8713                           	opt stack 0
  8714                           pclatu	equ	0xFFB
  8715                           pclath	equ	0xFFA
  8716                           tblptru	equ	0xFF8
  8717                           tblptrh	equ	0xFF7
  8718                           tblptrl	equ	0xFF6
  8719                           tablat	equ	0xFF5
  8720                           prodh	equ	0xFF4
  8721                           prodl	equ	0xFF3
  8722                           intcon	equ	0xFF2
  8723                           intcon3	equ	0xFF0
  8724                           postinc0	equ	0xFEE
  8725                           fsr0h	equ	0xFEA
  8726                           fsr0l	equ	0xFE9
  8727                           wreg	equ	0xFE8
  8728                           plusw1	equ	0xFE3
  8729                           fsr1h	equ	0xFE2
  8730                           fsr1l	equ	0xFE1
  8731                           indf2	equ	0xFDF
  8732                           postinc2	equ	0xFDE
  8733                           postdec2	equ	0xFDD
  8734                           plusw2	equ	0xFDB
  8735                           fsr2h	equ	0xFDA
  8736                           fsr2l	equ	0xFD9
  8737                           status	equ	0xFD8
  8738                           
  8739 ;; *************** function ___awdiv *****************
  8740 ;; Defined at:
  8741 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  8742 ;; Parameters:    Size  Location     Type
  8743 ;;  dividend        2    0[COMRAM] int 
  8744 ;;  divisor         2    2[COMRAM] int 
  8745 ;; Auto vars:     Size  Location     Type
  8746 ;;  quotient        2    6[COMRAM] int 
  8747 ;;  sign            1    5[COMRAM] unsigned char 
  8748 ;;  counter         1    4[COMRAM] unsigned char 
  8749 ;; Return value:  Size  Location     Type
  8750 ;;                  2    0[COMRAM] int 
  8751 ;; Registers used:
  8752 ;;		wreg, status,2, status,0
  8753 ;; Tracked objects:
  8754 ;;		On entry : 0/0
  8755 ;;		On exit  : 0/0
  8756 ;;		Unchanged: 0/0
  8757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8758 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8759 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8761 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8762 ;;Total ram usage:        8 bytes
  8763 ;; Hardware stack levels used:    1
  8764 ;; This function calls:
  8765 ;;		Nothing
  8766 ;; This function is called by:
  8767 ;;		_PWMC
  8768 ;; This function uses a non-reentrant model
  8769 ;;
  8770                           
  8771                           	psect	text50
  8772  001918                     __ptext50:
  8773                           	opt stack 0
  8774  001918                     ___awdiv:
  8775                           	opt stack 22
  8776                           
  8777                           ;incstack = 0
  8778  001918  0E00               	movlw	0
  8779  00191A  6E06               	movwf	___awdiv@sign,c
  8780  00191C  AE04               	btfss	___awdiv@divisor+1,7,c
  8781  00191E  D006               	goto	i2l3026
  8782  001920  6C03               	negf	___awdiv@divisor,c
  8783  001922  1E04               	comf	___awdiv@divisor+1,f,c
  8784  001924  B0D8               	btfsc	status,0,c
  8785  001926  2A04               	incf	___awdiv@divisor+1,f,c
  8786  001928  0E01               	movlw	1
  8787  00192A  6E06               	movwf	___awdiv@sign,c
  8788  00192C                     i2l3026:
  8789  00192C  AE02               	btfss	___awdiv@dividend+1,7,c
  8790  00192E  D006               	goto	i2l3032
  8791  001930  6C01               	negf	___awdiv@dividend,c
  8792  001932  1E02               	comf	___awdiv@dividend+1,f,c
  8793  001934  B0D8               	btfsc	status,0,c
  8794  001936  2A02               	incf	___awdiv@dividend+1,f,c
  8795  001938  0E01               	movlw	1
  8796  00193A  1A06               	xorwf	___awdiv@sign,f,c
  8797  00193C                     i2l3032:
  8798  00193C  0E00               	movlw	0
  8799  00193E  6E08               	movwf	___awdiv@quotient+1,c
  8800  001940  0E00               	movlw	0
  8801  001942  6E07               	movwf	___awdiv@quotient,c
  8802  001944  5003               	movf	___awdiv@divisor,w,c
  8803  001946  1004               	iorwf	___awdiv@divisor+1,w,c
  8804  001948  B4D8               	btfsc	status,2,c
  8805  00194A  D01C               	goto	i2l3054
  8806  00194C  0E01               	movlw	1
  8807  00194E  6E05               	movwf	___awdiv@counter,c
  8808  001950  D004               	goto	i2l3040
  8809  001952                     i2l3038:
  8810  001952  90D8               	bcf	status,0,c
  8811  001954  3603               	rlcf	___awdiv@divisor,f,c
  8812  001956  3604               	rlcf	___awdiv@divisor+1,f,c
  8813  001958  2A05               	incf	___awdiv@counter,f,c
  8814  00195A                     i2l3040:
  8815  00195A  AE04               	btfss	___awdiv@divisor+1,7,c
  8816  00195C  D7FA               	goto	i2l3038
  8817  00195E                     i2l3042:
  8818  00195E  90D8               	bcf	status,0,c
  8819  001960  3607               	rlcf	___awdiv@quotient,f,c
  8820  001962  3608               	rlcf	___awdiv@quotient+1,f,c
  8821  001964  5003               	movf	___awdiv@divisor,w,c
  8822  001966  5C01               	subwf	___awdiv@dividend,w,c
  8823  001968  5004               	movf	___awdiv@divisor+1,w,c
  8824  00196A  5802               	subwfb	___awdiv@dividend+1,w,c
  8825  00196C  A0D8               	btfss	status,0,c
  8826  00196E  D005               	goto	i2l3050
  8827  001970  5003               	movf	___awdiv@divisor,w,c
  8828  001972  5E01               	subwf	___awdiv@dividend,f,c
  8829  001974  5004               	movf	___awdiv@divisor+1,w,c
  8830  001976  5A02               	subwfb	___awdiv@dividend+1,f,c
  8831  001978  8007               	bsf	___awdiv@quotient,0,c
  8832  00197A                     i2l3050:
  8833  00197A  90D8               	bcf	status,0,c
  8834  00197C  3204               	rrcf	___awdiv@divisor+1,f,c
  8835  00197E  3203               	rrcf	___awdiv@divisor,f,c
  8836  001980  2E05               	decfsz	___awdiv@counter,f,c
  8837  001982  D7ED               	goto	i2l3042
  8838  001984                     i2l3054:
  8839  001984  5006               	movf	___awdiv@sign,w,c
  8840  001986  B4D8               	btfsc	status,2,c
  8841  001988  D004               	goto	i2l3058
  8842  00198A  6C07               	negf	___awdiv@quotient,c
  8843  00198C  1E08               	comf	___awdiv@quotient+1,f,c
  8844  00198E  B0D8               	btfsc	status,0,c
  8845  001990  2A08               	incf	___awdiv@quotient+1,f,c
  8846  001992                     i2l3058:
  8847  001992  C007  F001         	movff	___awdiv@quotient,?___awdiv
  8848  001996  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  8849  00199A  0012               	return	
  8850  00199C                     __end_of___awdiv:
  8851                           	opt stack 0
  8852                           pclatu	equ	0xFFB
  8853                           pclath	equ	0xFFA
  8854                           tblptru	equ	0xFF8
  8855                           tblptrh	equ	0xFF7
  8856                           tblptrl	equ	0xFF6
  8857                           tablat	equ	0xFF5
  8858                           prodh	equ	0xFF4
  8859                           prodl	equ	0xFF3
  8860                           intcon	equ	0xFF2
  8861                           intcon3	equ	0xFF0
  8862                           postinc0	equ	0xFEE
  8863                           fsr0h	equ	0xFEA
  8864                           fsr0l	equ	0xFE9
  8865                           wreg	equ	0xFE8
  8866                           plusw1	equ	0xFE3
  8867                           fsr1h	equ	0xFE2
  8868                           fsr1l	equ	0xFE1
  8869                           indf2	equ	0xFDF
  8870                           postinc2	equ	0xFDE
  8871                           postdec2	equ	0xFDD
  8872                           plusw2	equ	0xFDB
  8873                           fsr2h	equ	0xFDA
  8874                           fsr2l	equ	0xFD9
  8875                           status	equ	0xFD8
  8876                           
  8877 ;; *************** function _PermLog *****************
  8878 ;; Defined at:
  8879 ;;		line 90 in file "eeprom.c"
  8880 ;; Parameters:    Size  Location     Type
  8881 ;;  backruns        1    wreg     unsigned char 
  8882 ;; Auto vars:     Size  Location     Type
  8883 ;;  backruns        1   59[COMRAM] unsigned char 
  8884 ;;  sorted          4   55[COMRAM] unsigned char [4]
  8885 ;;  time            2   60[COMRAM] unsigned int 
  8886 ;; Return value:  Size  Location     Type
  8887 ;;                  1    wreg      void 
  8888 ;; Registers used:
  8889 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8890 ;; Tracked objects:
  8891 ;;		On entry : 0/0
  8892 ;;		On exit  : 0/0
  8893 ;;		Unchanged: 0/0
  8894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8896 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8897 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8898 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8899 ;;Total ram usage:        9 bytes
  8900 ;; Hardware stack levels used:    1
  8901 ;; Hardware stack levels required when called:    4
  8902 ;; This function calls:
  8903 ;;		_ReadRun
  8904 ;;		_showInfo
  8905 ;;		i2_line0
  8906 ;;		i2_line1
  8907 ;;		i2_printf
  8908 ;; This function is called by:
  8909 ;;		_intrpt
  8910 ;; This function uses a non-reentrant model
  8911 ;;
  8912                           
  8913                           	psect	text51
  8914  001A18                     __ptext51:
  8915                           	opt stack 0
  8916  001A18                     _PermLog:
  8917                           	opt stack 21
  8918                           
  8919                           ;incstack = 0
  8920                           ;PermLog@backruns stored from wreg
  8921  001A18  6E3C               	movwf	PermLog@backruns,c
  8922                           
  8923                           ;eeprom.c: 91: unsigned int time;
  8924                           ;eeprom.c: 92: unsigned char sorted[] = {0, 0, 0, 0};
  8925  001A1A  C0B6  F038         	movff	PermLog@F3084,PermLog@sorted
  8926  001A1E  C0B7  F039         	movff	PermLog@F3084+1,PermLog@sorted+1
  8927  001A22  C0B8  F03A         	movff	PermLog@F3084+2,PermLog@sorted+2
  8928  001A26  C0B9  F03B         	movff	PermLog@F3084+3,PermLog@sorted+3
  8929                           
  8930                           ;eeprom.c: 93: ReadRun(backruns, sorted, &time);
  8931  001A2A  0E38               	movlw	low PermLog@sorted
  8932  001A2C  6E03               	movwf	ReadRun@sorted,c
  8933  001A2E  0E00               	movlw	high PermLog@sorted
  8934  001A30  6E04               	movwf	ReadRun@sorted+1,c
  8935  001A32  0E3D               	movlw	low PermLog@time
  8936  001A34  6E05               	movwf	ReadRun@time,c
  8937  001A36  0E00               	movlw	high PermLog@time
  8938  001A38  6E06               	movwf	ReadRun@time+1,c
  8939  001A3A  503C               	movf	PermLog@backruns,w,c
  8940  001A3C  EC78  F007         	call	_ReadRun
  8941                           
  8942                           ;eeprom.c: 94: line0();
  8943  001A40  EC06  F011         	call	i2_line0	;wreg free
  8944                           
  8945                           ;eeprom.c: 95: printf("showing %u      ", backruns);
  8946  001A44  0EA2               	movlw	low STR_50
  8947  001A46  6E0D               	movwf	i2printf@f,c
  8948  001A48  0EFF               	movlw	high STR_50
  8949  001A4A  6E0E               	movwf	i2printf@f+1,c
  8950  001A4C  C03C  F00F         	movff	PermLog@backruns,?i2_printf+2
  8951  001A50  6A10               	clrf	?i2_printf+3,c
  8952  001A52  EC91  F003         	call	i2_printf	;wreg free
  8953                           
  8954                           ;eeprom.c: 96: line1();
  8955  001A56  EC02  F011         	call	i2_line1	;wreg free
  8956                           
  8957                           ;eeprom.c: 97: printf("runs before     ");
  8958  001A5A  0EB3               	movlw	low STR_51
  8959  001A5C  6E0D               	movwf	i2printf@f,c
  8960  001A5E  0EFF               	movlw	high STR_51
  8961  001A60  6E0E               	movwf	i2printf@f+1,c
  8962  001A62  EC91  F003         	call	i2_printf	;wreg free
  8963                           
  8964                           ;eeprom.c: 98: _delay((unsigned long)((700)*(8000000/4000.0)));
  8965  001A66  0E08               	movlw	8
  8966  001A68  6E37               	movwf	(??_PermLog+1)& (0+255),c
  8967  001A6A  0E1B               	movlw	27
  8968  001A6C  6E36               	movwf	??_PermLog& (0+255),c
  8969  001A6E  0E27               	movlw	39
  8970  001A70                     i2u317_47:
  8971  001A70  2EE8               	decfsz	wreg,f,c
  8972  001A72  D7FE               	bra	i2u317_47
  8973  001A74  2E36               	decfsz	??_PermLog& (0+255),f,c
  8974  001A76  D7FC               	bra	i2u317_47
  8975  001A78  2E37               	decfsz	(??_PermLog+1)& (0+255),f,c
  8976  001A7A  D7FA               	bra	i2u317_47
  8977  001A7C  F000               	nop	
  8978                           
  8979                           ;eeprom.c: 99: showInfo(time, sorted);
  8980  001A7E  C03D  F029         	movff	PermLog@time,showInfo@time
  8981  001A82  C03E  F02A         	movff	PermLog@time+1,showInfo@time+1
  8982  001A86  0E38               	movlw	low PermLog@sorted
  8983  001A88  6E2B               	movwf	showInfo@sorted,c
  8984  001A8A  0E00               	movlw	high PermLog@sorted
  8985  001A8C  6E2C               	movwf	showInfo@sorted+1,c
  8986  001A8E  EC18  F005         	call	_showInfo	;wreg free
  8987  001A92  0012               	return		;funcret
  8988  001A94                     __end_of_PermLog:
  8989                           	opt stack 0
  8990                           pclatu	equ	0xFFB
  8991                           pclath	equ	0xFFA
  8992                           tblptru	equ	0xFF8
  8993                           tblptrh	equ	0xFF7
  8994                           tblptrl	equ	0xFF6
  8995                           tablat	equ	0xFF5
  8996                           prodh	equ	0xFF4
  8997                           prodl	equ	0xFF3
  8998                           intcon	equ	0xFF2
  8999                           intcon3	equ	0xFF0
  9000                           postinc0	equ	0xFEE
  9001                           fsr0h	equ	0xFEA
  9002                           fsr0l	equ	0xFE9
  9003                           wreg	equ	0xFE8
  9004                           plusw1	equ	0xFE3
  9005                           fsr1h	equ	0xFE2
  9006                           fsr1l	equ	0xFE1
  9007                           indf2	equ	0xFDF
  9008                           postinc2	equ	0xFDE
  9009                           postdec2	equ	0xFDD
  9010                           plusw2	equ	0xFDB
  9011                           fsr2h	equ	0xFDA
  9012                           fsr2l	equ	0xFD9
  9013                           status	equ	0xFD8
  9014                           
  9015 ;; *************** function _showInfo *****************
  9016 ;; Defined at:
  9017 ;;		line 23 in file "modules.c"
  9018 ;; Parameters:    Size  Location     Type
  9019 ;;  time            2   40[COMRAM] unsigned int 
  9020 ;;  sorted          2   42[COMRAM] PTR unsigned char 
  9021 ;;		 -> PermLog@sorted(4), simulate@sorted(4), 
  9022 ;; Auto vars:     Size  Location     Type
  9023 ;;  stop            2   51[COMRAM] int 
  9024 ;;  type            2   49[COMRAM] int 
  9025 ;; Return value:  Size  Location     Type
  9026 ;;                  1    wreg      void 
  9027 ;; Registers used:
  9028 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9029 ;; Tracked objects:
  9030 ;;		On entry : 0/0
  9031 ;;		On exit  : 0/0
  9032 ;;		Unchanged: 0/0
  9033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9034 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9035 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9036 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9037 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9038 ;;Total ram usage:       13 bytes
  9039 ;; Hardware stack levels used:    1
  9040 ;; Hardware stack levels required when called:    3
  9041 ;; This function calls:
  9042 ;;		_captureKeypad
  9043 ;;		i2_line0
  9044 ;;		i2_line1
  9045 ;;		i2_printf
  9046 ;; This function is called by:
  9047 ;;		_simulate
  9048 ;;		_PermLog
  9049 ;; This function uses a non-reentrant model
  9050 ;;
  9051                           
  9052                           	psect	text52
  9053  000A30                     __ptext52:
  9054                           	opt stack 0
  9055  000A30                     _showInfo:
  9056                           	opt stack 21
  9057                           
  9058                           ;modules.c: 24: line0();
  9059                           
  9060                           ;incstack = 0
  9061  000A30  EC06  F011         	call	i2_line0	;wreg free
  9062                           
  9063                           ;modules.c: 25: printf("Press a number          ");
  9064  000A34  0E02               	movlw	low STR_22
  9065  000A36  6E0D               	movwf	i2printf@f,c
  9066  000A38  0EFE               	movlw	high STR_22
  9067  000A3A  6E0E               	movwf	i2printf@f+1,c
  9068  000A3C  EC91  F003         	call	i2_printf	;wreg free
  9069                           
  9070                           ;modules.c: 26: line1();
  9071  000A40  EC02  F011         	call	i2_line1	;wreg free
  9072                           
  9073                           ;modules.c: 27: printf("For more info          ");
  9074  000A44  0E96               	movlw	low STR_23
  9075  000A46  6E0D               	movwf	i2printf@f,c
  9076  000A48  0EFE               	movlw	high STR_23
  9077  000A4A  6E0E               	movwf	i2printf@f+1,c
  9078  000A4C  EC91  F003         	call	i2_printf	;wreg free
  9079                           
  9080                           ;modules.c: 28: int type = 0;
  9081  000A50  0E00               	movlw	0
  9082  000A52  6E33               	movwf	showInfo@type+1,c
  9083  000A54  0E00               	movlw	0
  9084  000A56  6E32               	movwf	showInfo@type,c
  9085                           
  9086                           ;modules.c: 29: int stop = 0;
  9087  000A58  0E00               	movlw	0
  9088  000A5A  6E35               	movwf	showInfo@stop+1,c
  9089  000A5C  0E00               	movlw	0
  9090  000A5E  D0CC               	goto	L2
  9091  000A60                     i2l3936:
  9092                           
  9093                           ;modules.c: 31: type = captureKeypad();
  9094  000A60  EC7D  F010         	call	_captureKeypad	;wreg free
  9095  000A64  C001  F032         	movff	?_captureKeypad,showInfo@type
  9096  000A68  C002  F033         	movff	?_captureKeypad+1,showInfo@type+1
  9097                           
  9098                           ;modules.c: 32: switch (type) {
  9099  000A6C  D0C7               	goto	i2l3976
  9100  000A6E                     i2l3938:
  9101                           
  9102                           ;modules.c: 34: line0();
  9103  000A6E  EC06  F011         	call	i2_line0	;wreg free
  9104                           
  9105                           ;modules.c: 35: printf("Time Elapsed:          ");
  9106  000A72  0E66               	movlw	low STR_24
  9107  000A74  6E0D               	movwf	i2printf@f,c
  9108  000A76  0EFE               	movlw	high STR_24
  9109  000A78  6E0E               	movwf	i2printf@f+1,c
  9110  000A7A  EC91  F003         	call	i2_printf	;wreg free
  9111                           
  9112                           ;modules.c: 36: line1();
  9113  000A7E  EC02  F011         	call	i2_line1	;wreg free
  9114                           
  9115                           ;modules.c: 37: printf("%u seconds          ", time);
  9116  000A82  0E1C               	movlw	low STR_25
  9117  000A84  6E0D               	movwf	i2printf@f,c
  9118  000A86  0EFF               	movlw	high STR_25
  9119  000A88  6E0E               	movwf	i2printf@f+1,c
  9120  000A8A  C029  F00F         	movff	showInfo@time,?i2_printf+2
  9121  000A8E  C02A  F010         	movff	showInfo@time+1,?i2_printf+3
  9122  000A92  EC91  F003         	call	i2_printf	;wreg free
  9123                           
  9124                           ;modules.c: 38: break;
  9125  000A96  D0D1               	goto	i2l3978
  9126  000A98                     i2l3944:
  9127                           
  9128                           ;modules.c: 40: line0();
  9129  000A98  EC06  F011         	call	i2_line0	;wreg free
  9130                           
  9131                           ;modules.c: 41: printf("Total Sorted:          ");
  9132  000A9C  0E7E               	movlw	low STR_26
  9133  000A9E  6E0D               	movwf	i2printf@f,c
  9134  000AA0  0EFE               	movlw	high STR_26
  9135  000AA2  6E0E               	movwf	i2printf@f+1,c
  9136  000AA4  EC91  F003         	call	i2_printf	;wreg free
  9137                           
  9138                           ;modules.c: 42: line1();
  9139  000AA8  EC02  F011         	call	i2_line1	;wreg free
  9140                           
  9141                           ;modules.c: 43: printf("%u batteries          ", sorted[0] + sorted[1] + sorted[2] + sor
      +                          ted[3]);
  9142  000AAC  0EC6               	movlw	low STR_27
  9143  000AAE  6E0D               	movwf	i2printf@f,c
  9144  000AB0  0EFE               	movlw	high STR_27
  9145  000AB2  6E0E               	movwf	i2printf@f+1,c
  9146  000AB4  EE20 F003          	lfsr	2,3
  9147  000AB8  502B               	movf	showInfo@sorted,w,c
  9148  000ABA  26D9               	addwf	fsr2l,f,c
  9149  000ABC  502C               	movf	showInfo@sorted+1,w,c
  9150  000ABE  22DA               	addwfc	fsr2h,f,c
  9151  000AC0  50DF               	movf	indf2,w,c
  9152  000AC2  6E2D               	movwf	??_showInfo& (0+255),c
  9153  000AC4  C02B  FFD9         	movff	showInfo@sorted,fsr2l
  9154  000AC8  C02C  FFDA         	movff	showInfo@sorted+1,fsr2h
  9155  000ACC  50DF               	movf	indf2,w,c
  9156  000ACE  6E2E               	movwf	(??_showInfo+1)& (0+255),c
  9157  000AD0  6A2F               	clrf	(??_showInfo+2)& (0+255),c
  9158  000AD2  EE20 F001          	lfsr	2,1
  9159  000AD6  502B               	movf	showInfo@sorted,w,c
  9160  000AD8  26D9               	addwf	fsr2l,f,c
  9161  000ADA  502C               	movf	showInfo@sorted+1,w,c
  9162  000ADC  22DA               	addwfc	fsr2h,f,c
  9163  000ADE  50DF               	movf	indf2,w,c
  9164  000AE0  6E30               	movwf	(??_showInfo+3)& (0+255),c
  9165  000AE2  5030               	movf	??_showInfo+3,w,c
  9166  000AE4  262E               	addwf	??_showInfo+1,f,c
  9167  000AE6  0E00               	movlw	0
  9168  000AE8  222F               	addwfc	??_showInfo+2,f,c
  9169  000AEA  EE20 F002          	lfsr	2,2
  9170  000AEE  502B               	movf	showInfo@sorted,w,c
  9171  000AF0  26D9               	addwf	fsr2l,f,c
  9172  000AF2  502C               	movf	showInfo@sorted+1,w,c
  9173  000AF4  22DA               	addwfc	fsr2h,f,c
  9174  000AF6  50DF               	movf	indf2,w,c
  9175  000AF8  6E31               	movwf	(??_showInfo+4)& (0+255),c
  9176  000AFA  5031               	movf	??_showInfo+4,w,c
  9177  000AFC  262E               	addwf	??_showInfo+1,f,c
  9178  000AFE  0E00               	movlw	0
  9179  000B00  222F               	addwfc	??_showInfo+2,f,c
  9180  000B02  502D               	movf	??_showInfo,w,c
  9181  000B04  242E               	addwf	??_showInfo+1,w,c
  9182  000B06  6E0F               	movwf	?i2_printf+2,c
  9183  000B08  0E00               	movlw	0
  9184  000B0A  202F               	addwfc	??_showInfo+2,w,c
  9185  000B0C  6E10               	movwf	?i2_printf+3,c
  9186  000B0E  EC91  F003         	call	i2_printf	;wreg free
  9187                           
  9188                           ;modules.c: 44: break;
  9189  000B12  D093               	goto	i2l3978
  9190  000B14                     i2l3950:
  9191                           
  9192                           ;modules.c: 46: line0();
  9193  000B14  EC06  F011         	call	i2_line0	;wreg free
  9194                           
  9195                           ;modules.c: 47: printf("AA Sorted:          ");
  9196  000B18  0EF2               	movlw	low STR_28
  9197  000B1A  6E0D               	movwf	i2printf@f,c
  9198  000B1C  0EFE               	movlw	high STR_28
  9199  000B1E  6E0E               	movwf	i2printf@f+1,c
  9200  000B20  EC91  F003         	call	i2_printf	;wreg free
  9201                           
  9202                           ;modules.c: 48: line1();
  9203  000B24  EC02  F011         	call	i2_line1	;wreg free
  9204                           
  9205                           ;modules.c: 49: printf("%u             ", sorted[0]);
  9206  000B28  0EC4               	movlw	low STR_29
  9207  000B2A  6E0D               	movwf	i2printf@f,c
  9208  000B2C  0EFF               	movlw	high STR_29
  9209  000B2E  6E0E               	movwf	i2printf@f+1,c
  9210  000B30  C02B  FFD9         	movff	showInfo@sorted,fsr2l
  9211  000B34  C02C  FFDA         	movff	showInfo@sorted+1,fsr2h
  9212  000B38  50DF               	movf	indf2,w,c
  9213  000B3A  6E2D               	movwf	??_showInfo& (0+255),c
  9214  000B3C  502D               	movf	??_showInfo,w,c
  9215  000B3E  6E0F               	movwf	?i2_printf+2,c
  9216  000B40  6A10               	clrf	?i2_printf+3,c
  9217  000B42  EC91  F003         	call	i2_printf	;wreg free
  9218                           
  9219                           ;modules.c: 50: break;
  9220  000B46  D079               	goto	i2l3978
  9221  000B48                     i2l3956:
  9222                           
  9223                           ;modules.c: 52: line0();
  9224  000B48  EC06  F011         	call	i2_line0	;wreg free
  9225                           
  9226                           ;modules.c: 53: printf("C Sorted:          ");
  9227  000B4C  0E45               	movlw	low STR_30
  9228  000B4E  6E0D               	movwf	i2printf@f,c
  9229  000B50  0EFF               	movlw	high STR_30
  9230  000B52  6E0E               	movwf	i2printf@f+1,c
  9231  000B54  EC91  F003         	call	i2_printf	;wreg free
  9232                           
  9233                           ;modules.c: 54: line1();
  9234  000B58  EC02  F011         	call	i2_line1	;wreg free
  9235                           
  9236                           ;modules.c: 55: printf("%u             ", sorted[1]);
  9237  000B5C  0EC4               	movlw	low STR_29
  9238  000B5E  6E0D               	movwf	i2printf@f,c
  9239  000B60  0EFF               	movlw	high STR_29
  9240  000B62  6E0E               	movwf	i2printf@f+1,c
  9241  000B64  EE20 F001          	lfsr	2,1
  9242  000B68  502B               	movf	showInfo@sorted,w,c
  9243  000B6A  26D9               	addwf	fsr2l,f,c
  9244  000B6C  502C               	movf	showInfo@sorted+1,w,c
  9245  000B6E  22DA               	addwfc	fsr2h,f,c
  9246  000B70  50DF               	movf	indf2,w,c
  9247  000B72  6E2D               	movwf	??_showInfo& (0+255),c
  9248  000B74  502D               	movf	??_showInfo,w,c
  9249  000B76  6E0F               	movwf	?i2_printf+2,c
  9250  000B78  6A10               	clrf	?i2_printf+3,c
  9251  000B7A  EC91  F003         	call	i2_printf	;wreg free
  9252                           
  9253                           ;modules.c: 56: break;
  9254  000B7E  D05D               	goto	i2l3978
  9255  000B80                     i2l3962:
  9256                           
  9257                           ;modules.c: 58: line0();
  9258  000B80  EC06  F011         	call	i2_line0	;wreg free
  9259                           
  9260                           ;modules.c: 59: printf("9V Sorted:          ");
  9261  000B84  0E07               	movlw	low STR_32
  9262  000B86  6E0D               	movwf	i2printf@f,c
  9263  000B88  0EFF               	movlw	high STR_32
  9264  000B8A  6E0E               	movwf	i2printf@f+1,c
  9265  000B8C  EC91  F003         	call	i2_printf	;wreg free
  9266                           
  9267                           ;modules.c: 60: line1();
  9268  000B90  EC02  F011         	call	i2_line1	;wreg free
  9269                           
  9270                           ;modules.c: 61: printf("%u             ", sorted[2]);
  9271  000B94  0EC4               	movlw	low STR_29
  9272  000B96  6E0D               	movwf	i2printf@f,c
  9273  000B98  0EFF               	movlw	high STR_29
  9274  000B9A  6E0E               	movwf	i2printf@f+1,c
  9275  000B9C  EE20 F002          	lfsr	2,2
  9276  000BA0  502B               	movf	showInfo@sorted,w,c
  9277  000BA2  26D9               	addwf	fsr2l,f,c
  9278  000BA4  502C               	movf	showInfo@sorted+1,w,c
  9279  000BA6  22DA               	addwfc	fsr2h,f,c
  9280  000BA8  50DF               	movf	indf2,w,c
  9281  000BAA  6E2D               	movwf	??_showInfo& (0+255),c
  9282  000BAC  502D               	movf	??_showInfo,w,c
  9283  000BAE  6E0F               	movwf	?i2_printf+2,c
  9284  000BB0  6A10               	clrf	?i2_printf+3,c
  9285  000BB2  EC91  F003         	call	i2_printf	;wreg free
  9286                           
  9287                           ;modules.c: 62: break;
  9288  000BB6  D041               	goto	i2l3978
  9289  000BB8                     i2l3968:
  9290                           
  9291                           ;modules.c: 64: line0();
  9292  000BB8  EC06  F011         	call	i2_line0	;wreg free
  9293                           
  9294                           ;modules.c: 65: printf("Uncharged:          ");
  9295  000BBC  0EDD               	movlw	low STR_34
  9296  000BBE  6E0D               	movwf	i2printf@f,c
  9297  000BC0  0EFE               	movlw	high STR_34
  9298  000BC2  6E0E               	movwf	i2printf@f+1,c
  9299  000BC4  EC91  F003         	call	i2_printf	;wreg free
  9300                           
  9301                           ;modules.c: 66: line1();
  9302  000BC8  EC02  F011         	call	i2_line1	;wreg free
  9303                           
  9304                           ;modules.c: 67: printf("%u             ", sorted[3]);
  9305  000BCC  0EC4               	movlw	low STR_29
  9306  000BCE  6E0D               	movwf	i2printf@f,c
  9307  000BD0  0EFF               	movlw	high STR_29
  9308  000BD2  6E0E               	movwf	i2printf@f+1,c
  9309  000BD4  EE20 F003          	lfsr	2,3
  9310  000BD8  502B               	movf	showInfo@sorted,w,c
  9311  000BDA  26D9               	addwf	fsr2l,f,c
  9312  000BDC  502C               	movf	showInfo@sorted+1,w,c
  9313  000BDE  22DA               	addwfc	fsr2h,f,c
  9314  000BE0  50DF               	movf	indf2,w,c
  9315  000BE2  6E2D               	movwf	??_showInfo& (0+255),c
  9316  000BE4  502D               	movf	??_showInfo,w,c
  9317  000BE6  6E0F               	movwf	?i2_printf+2,c
  9318  000BE8  6A10               	clrf	?i2_printf+3,c
  9319  000BEA  EC91  F003         	call	i2_printf	;wreg free
  9320                           
  9321                           ;modules.c: 68: break;
  9322  000BEE  D025               	goto	i2l3978
  9323  000BF0                     i2l233:
  9324  000BF0  00FF               	reset		;# 
  9325  000BF2                     i2l3974:
  9326                           
  9327                           ;modules.c: 72: stop = 1;
  9328  000BF2  0E00               	movlw	0
  9329  000BF4  6E35               	movwf	showInfo@stop+1,c
  9330  000BF6  0E01               	movlw	1
  9331  000BF8                     L2:
  9332  000BF8  6E34               	movwf	showInfo@stop,c
  9333                           
  9334                           ;modules.c: 73: }
  9335  000BFA  D01F               	goto	i2l3978
  9336  000BFC                     i2l3976:
  9337  000BFC  C032  F02D         	movff	showInfo@type,??_showInfo
  9338  000C00  C033  F02E         	movff	showInfo@type+1,??_showInfo+1
  9339                           
  9340                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9341                           ; Switch size 1, requested type "space"
  9342                           ; Number of cases is 1, Range of values is 0 to 0
  9343                           ; switch strategies available:
  9344                           ; Name         Instructions Cycles
  9345                           ; simple_byte            4     3 (average)
  9346                           ;	Chosen strategy is simple_byte
  9347  000C04  502E               	movf	??_showInfo+1,w,c
  9348  000C06  0A00               	xorlw	0	; case 0
  9349  000C08  A4D8               	btfss	status,2,c
  9350  000C0A  D7F3               	goto	i2l3974
  9351                           
  9352                           ; Switch size 1, requested type "space"
  9353                           ; Number of cases is 7, Range of values is 0 to 15
  9354                           ; switch strategies available:
  9355                           ; Name         Instructions Cycles
  9356                           ; simple_byte           22    12 (average)
  9357                           ;	Chosen strategy is simple_byte
  9358  000C0C  502D               	movf	??_showInfo,w,c
  9359  000C0E  0A00               	xorlw	0	; case 0
  9360  000C10  B4D8               	btfsc	status,2,c
  9361  000C12  D72D               	goto	i2l3938
  9362  000C14  0A01               	xorlw	1	; case 1
  9363  000C16  B4D8               	btfsc	status,2,c
  9364  000C18  D73F               	goto	i2l3944
  9365  000C1A  0A03               	xorlw	3	; case 2
  9366  000C1C  B4D8               	btfsc	status,2,c
  9367  000C1E  D77A               	goto	i2l3950
  9368  000C20  0A01               	xorlw	1	; case 3
  9369  000C22  B4D8               	btfsc	status,2,c
  9370  000C24  D791               	goto	i2l3956
  9371  000C26  0A07               	xorlw	7	; case 4
  9372  000C28  B4D8               	btfsc	status,2,c
  9373  000C2A  D7AA               	goto	i2l3962
  9374  000C2C  0A01               	xorlw	1	; case 5
  9375  000C2E  B4D8               	btfsc	status,2,c
  9376  000C30  D7C3               	goto	i2l3968
  9377  000C32  0A0A               	xorlw	10	; case 15
  9378  000C34  B4D8               	btfsc	status,2,c
  9379  000C36  D7DC               	goto	i2l233
  9380  000C38  D7DC               	goto	i2l3974
  9381  000C3A                     i2l3978:
  9382  000C3A  5034               	movf	showInfo@stop,w,c
  9383  000C3C  1035               	iorwf	showInfo@stop+1,w,c
  9384  000C3E  A4D8               	btfss	status,2,c
  9385  000C40  0012               	return	
  9386  000C42  D70E               	goto	i2l3936
  9387  000C44                     __end_of_showInfo:
  9388                           	opt stack 0
  9389                           pclatu	equ	0xFFB
  9390                           pclath	equ	0xFFA
  9391                           tblptru	equ	0xFF8
  9392                           tblptrh	equ	0xFF7
  9393                           tblptrl	equ	0xFF6
  9394                           tablat	equ	0xFF5
  9395                           prodh	equ	0xFF4
  9396                           prodl	equ	0xFF3
  9397                           intcon	equ	0xFF2
  9398                           intcon3	equ	0xFF0
  9399                           postinc0	equ	0xFEE
  9400                           fsr0h	equ	0xFEA
  9401                           fsr0l	equ	0xFE9
  9402                           wreg	equ	0xFE8
  9403                           plusw1	equ	0xFE3
  9404                           fsr1h	equ	0xFE2
  9405                           fsr1l	equ	0xFE1
  9406                           indf2	equ	0xFDF
  9407                           postinc2	equ	0xFDE
  9408                           postdec2	equ	0xFDD
  9409                           plusw2	equ	0xFDB
  9410                           fsr2h	equ	0xFDA
  9411                           fsr2l	equ	0xFD9
  9412                           status	equ	0xFD8
  9413                           
  9414 ;; *************** function i2_printf *****************
  9415 ;; Defined at:
  9416 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  9417 ;; Parameters:    Size  Location     Type
  9418 ;;  f               2   12[COMRAM] PTR const unsigned char 
  9419 ;;		 -> STR_51(17), STR_50(17), STR_49(4), STR_48(4), 
  9420 ;;		 -> STR_47(4), STR_46(4), STR_45(4), STR_44(4), 
  9421 ;;		 -> STR_43(4), STR_42(3), STR_41(4), STR_40(4), 
  9422 ;;		 -> STR_39(4), STR_38(4), STR_37(18), STR_36(20), 
  9423 ;;		 -> STR_35(16), STR_34(21), STR_33(16), STR_32(21), 
  9424 ;;		 -> STR_31(16), STR_30(20), STR_29(16), STR_28(21), 
  9425 ;;		 -> STR_27(23), STR_26(24), STR_25(21), STR_24(24), 
  9426 ;;		 -> STR_23(24), STR_22(25), STR_21(19), STR_20(25), 
  9427 ;;		 -> STR_19(25), STR_18(27), STR_17(19), STR_16(25), 
  9428 ;;		 -> STR_15(3), STR_14(3), STR_13(3), STR_12(5), 
  9429 ;;		 -> STR_11(3), STR_10(3), STR_9(3), STR_8(4), 
  9430 ;;		 -> STR_7(3), STR_6(3), STR_5(3), STR_4(4), 
  9431 ;;		 -> STR_3(5), STR_2(24), STR_1(9), 
  9432 ;; Auto vars:     Size  Location     Type
  9433 ;;  printf          4    0        struct .
  9434 ;;  printf          2   37[COMRAM] int 
  9435 ;;  printf          2   34[COMRAM] unsigned int 
  9436 ;;  printf          2   31[COMRAM] unsigned int 
  9437 ;;  printf          2   28[COMRAM] PTR const unsigned char 
  9438 ;;		 -> printf@c(1), 
  9439 ;;  printf          2   26[COMRAM] PTR void [1]
  9440 ;;		 -> ?i2_printf(2), ?_printf(2), 
  9441 ;;  printf          1   39[COMRAM] char 
  9442 ;;  printf          1   36[COMRAM] unsigned char 
  9443 ;;  printf          1   33[COMRAM] char 
  9444 ;;  printf          1   30[COMRAM] unsigned char 
  9445 ;; Return value:  Size  Location     Type
  9446 ;;                  2   12[COMRAM] int 
  9447 ;; Registers used:
  9448 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9449 ;; Tracked objects:
  9450 ;;		On entry : 0/0
  9451 ;;		On exit  : 0/0
  9452 ;;		Unchanged: 0/0
  9453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9454 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9455 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9456 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9457 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9458 ;;Total ram usage:       28 bytes
  9459 ;; Hardware stack levels used:    1
  9460 ;; Hardware stack levels required when called:    2
  9461 ;; This function calls:
  9462 ;;		i2___lwdiv
  9463 ;;		i2___lwmod
  9464 ;;		i2___wmul
  9465 ;;		i2_isdigit
  9466 ;;		i2_putch
  9467 ;; This function is called by:
  9468 ;;		_simulate
  9469 ;;		_showInfo
  9470 ;;		_stopMoving
  9471 ;;		_checkAA
  9472 ;;		_checkC
  9473 ;;		_check9
  9474 ;;		_PermLog
  9475 ;; This function uses a non-reentrant model
  9476 ;;
  9477                           
  9478                           	psect	text53
  9479  000722                     __ptext53:
  9480                           	opt stack 0
  9481  000722                     i2_printf:
  9482                           	opt stack 22
  9483                           
  9484                           ;doprnt.c: 466: va_list ap;
  9485                           ;doprnt.c: 499: signed char c;
  9486                           ;doprnt.c: 501: int width;
  9487                           ;doprnt.c: 506: signed char prec;
  9488                           ;doprnt.c: 508: unsigned char flag;
  9489                           ;doprnt.c: 523: union {
  9490                           ;doprnt.c: 524: unsigned long vd;
  9491                           ;doprnt.c: 525: double integ;
  9492                           ;doprnt.c: 526: } tmpval;
  9493                           ;doprnt.c: 528: unsigned int val;
  9494                           ;doprnt.c: 529: unsigned len;
  9495                           ;doprnt.c: 530: const char * cp;
  9496                           ;doprnt.c: 533: *ap = __va_start();
  9497                           
  9498                           ;incstack = 0
  9499  000722  0E0F               	movlw	low (?i2_printf+2)
  9500  000724  6E1B               	movwf	i2printf@ap,c
  9501  000726  0E00               	movlw	high (?i2_printf+2)
  9502  000728  6E1C               	movwf	i2printf@ap+1,c
  9503                           
  9504                           ;doprnt.c: 536: while(c = *f++) {
  9505  00072A  D175               	goto	i2l3566
  9506  00072C                     i2l3444:
  9507                           
  9508                           ;doprnt.c: 538: if(c != '%')
  9509  00072C  0E25               	movlw	37
  9510  00072E  1828               	xorwf	i2printf@c,w,c
  9511  000730  B4D8               	btfsc	status,2,c
  9512  000732  D004               	goto	i2l3448
  9513                           
  9514                           ;doprnt.c: 540: {
  9515                           ;doprnt.c: 541: (putch(c) );
  9516  000734  5028               	movf	i2printf@c,w,c
  9517  000736  ECD4  F010         	call	i2_putch
  9518                           
  9519                           ;doprnt.c: 542: continue;
  9520  00073A  D16D               	goto	i2l3566
  9521  00073C                     i2l3448:
  9522                           
  9523                           ;doprnt.c: 543: }
  9524                           ;doprnt.c: 546: width = 0;
  9525  00073C  0E00               	movlw	0
  9526  00073E  6E27               	movwf	i2printf@width+1,c
  9527  000740  0E00               	movlw	0
  9528  000742  6E26               	movwf	i2printf@width,c
  9529                           
  9530                           ;doprnt.c: 548: flag = 0;
  9531  000744  0E00               	movlw	0
  9532  000746  6E25               	movwf	i2printf@flag,c
  9533                           
  9534                           ;doprnt.c: 551: switch(*f) {
  9535                           
  9536                           ;doprnt.c: 550: for(;;) {
  9537  000748  D003               	goto	i2l3454
  9538  00074A                     i2l3450:
  9539                           
  9540                           ;doprnt.c: 580: flag |= 0x04;
  9541  00074A  8425               	bsf	i2printf@flag,2,c
  9542                           
  9543                           ;doprnt.c: 581: f++;
  9544  00074C  4A0D               	infsnz	i2printf@f,f,c
  9545  00074E  2A0E               	incf	i2printf@f+1,f,c
  9546  000750                     i2l3454:
  9547  000750  C00D  FFF6         	movff	i2printf@f,tblptrl
  9548  000754  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9549  000758                     	if	0	;tblptru may be non-zero
  9550  000758                     	endif
  9551  000758                     	if	0	;tblptru may be non-zero
  9552  000758                     	endif
  9553  000758  0008               	tblrd		*
  9554  00075A  50F5               	movf	tablat,w,c
  9555                           
  9556                           ; Switch size 1, requested type "space"
  9557                           ; Number of cases is 1, Range of values is 48 to 48
  9558                           ; switch strategies available:
  9559                           ; Name         Instructions Cycles
  9560                           ; simple_byte            4     3 (average)
  9561                           ;	Chosen strategy is simple_byte
  9562  00075C  0A30               	xorlw	48	; case 48
  9563  00075E  B4D8               	btfsc	status,2,c
  9564  000760  D7F4               	goto	i2l3450
  9565                           
  9566                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  9567                           
  9568                           ;doprnt.c: 586: }
  9569                           
  9570                           ;doprnt.c: 585: break;
  9571  000762  C00D  FFF6         	movff	i2printf@f,tblptrl
  9572  000766  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9573  00076A                     	if	0	;tblptru may be non-zero
  9574  00076A                     	endif
  9575  00076A                     	if	0	;tblptru may be non-zero
  9576  00076A                     	endif
  9577  00076A  0008               	tblrd		*
  9578  00076C  50F5               	movf	tablat,w,c
  9579  00076E  EC6E  F010         	call	i2_isdigit
  9580  000772  A0D8               	btfss	status,0,c
  9581  000774  D06F               	goto	i2l3494
  9582                           
  9583                           ;doprnt.c: 598: width = 0;
  9584  000776  0E00               	movlw	0
  9585  000778  6E27               	movwf	i2printf@width+1,c
  9586  00077A  0E00               	movlw	0
  9587  00077C  6E26               	movwf	i2printf@width,c
  9588  00077E                     i2l3460:
  9589                           
  9590                           ;doprnt.c: 600: width *= 10;
  9591  00077E  C026  F001         	movff	i2printf@width,i2___wmul@multiplier
  9592  000782  C027  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  9593  000786  0E00               	movlw	0
  9594  000788  6E04               	movwf	i2___wmul@multiplicand+1,c
  9595  00078A  0E0A               	movlw	10
  9596  00078C  6E03               	movwf	i2___wmul@multiplicand,c
  9597  00078E  EC2C  F010         	call	i2___wmul	;wreg free
  9598  000792  C001  F026         	movff	?i2___wmul,i2printf@width
  9599  000796  C002  F027         	movff	?i2___wmul+1,i2printf@width+1
  9600                           
  9601                           ;doprnt.c: 601: width += *f++ - '0';
  9602  00079A  0ED0               	movlw	208
  9603  00079C  6E17               	movwf	??i2_printf& (0+255),c
  9604  00079E  0EFF               	movlw	255
  9605  0007A0  6E18               	movwf	(??i2_printf+1)& (0+255),c
  9606  0007A2  C00D  FFF6         	movff	i2printf@f,tblptrl
  9607  0007A6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9608  0007AA                     	if	0	;tblptru may be non-zero
  9609  0007AA                     	endif
  9610  0007AA                     	if	0	;tblptru may be non-zero
  9611  0007AA                     	endif
  9612  0007AA  0008               	tblrd		*
  9613  0007AC  50F5               	movf	tablat,w,c
  9614  0007AE  6E19               	movwf	(??i2_printf+2)& (0+255),c
  9615  0007B0  6A1A               	clrf	(??i2_printf+3)& (0+255),c
  9616  0007B2  5017               	movf	??i2_printf,w,c
  9617  0007B4  2619               	addwf	??i2_printf+2,f,c
  9618  0007B6  5018               	movf	??i2_printf+1,w,c
  9619  0007B8  221A               	addwfc	??i2_printf+3,f,c
  9620  0007BA  5019               	movf	??i2_printf+2,w,c
  9621  0007BC  2626               	addwf	i2printf@width,f,c
  9622  0007BE  501A               	movf	??i2_printf+3,w,c
  9623  0007C0  2227               	addwfc	i2printf@width+1,f,c
  9624  0007C2  4A0D               	infsnz	i2printf@f,f,c
  9625  0007C4  2A0E               	incf	i2printf@f+1,f,c
  9626                           
  9627                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  9628  0007C6  C00D  FFF6         	movff	i2printf@f,tblptrl
  9629  0007CA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9630  0007CE                     	if	0	;tblptru may be non-zero
  9631  0007CE                     	endif
  9632  0007CE                     	if	0	;tblptru may be non-zero
  9633  0007CE                     	endif
  9634  0007CE  0008               	tblrd		*
  9635  0007D0  50F5               	movf	tablat,w,c
  9636  0007D2  EC6E  F010         	call	i2_isdigit
  9637  0007D6  A0D8               	btfss	status,0,c
  9638  0007D8  D03D               	goto	i2l3494
  9639  0007DA  D7D1               	goto	i2l3460
  9640  0007DC                     i2l3468:
  9641                           
  9642                           ;doprnt.c: 721: flag |= 0x80;
  9643  0007DC  8E25               	bsf	i2printf@flag,7,c
  9644                           
  9645                           ;doprnt.c: 723: break;
  9646  0007DE  D04E               	goto	i2l3496
  9647  0007E0                     i2l3470:
  9648                           
  9649                           ;doprnt.c: 757: if(width > len)
  9650  0007E0  5026               	movf	i2printf@width,w,c
  9651  0007E2  5C20               	subwf	i2printf@len,w,c
  9652  0007E4  5027               	movf	i2printf@width+1,w,c
  9653  0007E6  5821               	subwfb	i2printf@len+1,w,c
  9654  0007E8  B0D8               	btfsc	status,0,c
  9655  0007EA  D005               	goto	i2l3474
  9656                           
  9657                           ;doprnt.c: 758: width -= len;
  9658  0007EC  5020               	movf	i2printf@len,w,c
  9659  0007EE  5E26               	subwf	i2printf@width,f,c
  9660  0007F0  5021               	movf	i2printf@len+1,w,c
  9661  0007F2  5A27               	subwfb	i2printf@width+1,f,c
  9662  0007F4  D008               	goto	i2l3478
  9663  0007F6                     i2l3474:
  9664                           
  9665                           ;doprnt.c: 759: else
  9666                           ;doprnt.c: 760: width = 0;
  9667  0007F6  0E00               	movlw	0
  9668  0007F8  6E27               	movwf	i2printf@width+1,c
  9669  0007FA  0E00               	movlw	0
  9670  0007FC  6E26               	movwf	i2printf@width,c
  9671                           
  9672                           ;doprnt.c: 764: while(width--)
  9673  0007FE  D003               	goto	i2l3478
  9674  000800                     i2l3476:
  9675                           
  9676                           ;doprnt.c: 765: (putch(' ') );
  9677  000800  0E20               	movlw	32
  9678  000802  ECD4  F010         	call	i2_putch
  9679  000806                     i2l3478:
  9680  000806  0626               	decf	i2printf@width,f,c
  9681  000808  A0D8               	btfss	status,0,c
  9682  00080A  0627               	decf	i2printf@width+1,f,c
  9683  00080C  2826               	incf	i2printf@width,w,c
  9684  00080E  E1F8               	bnz	i2l3476
  9685  000810  2827               	incf	i2printf@width+1,w,c
  9686  000812  B4D8               	btfsc	status,2,c
  9687  000814  D00A               	goto	i2l3484
  9688  000816  D7F4               	goto	i2l3476
  9689  000818                     i2l3480:
  9690                           
  9691                           ;doprnt.c: 768: (putch(*cp++) );
  9692  000818  C01D  FFD9         	movff	i2printf@cp,fsr2l
  9693  00081C  C01E  FFDA         	movff	i2printf@cp+1,fsr2h
  9694  000820  50DF               	movf	indf2,w,c
  9695  000822  ECD4  F010         	call	i2_putch
  9696  000826  4A1D               	infsnz	i2printf@cp,f,c
  9697  000828  2A1E               	incf	i2printf@cp+1,f,c
  9698  00082A                     i2l3484:
  9699  00082A  0620               	decf	i2printf@len,f,c
  9700  00082C  A0D8               	btfss	status,0,c
  9701  00082E  0621               	decf	i2printf@len+1,f,c
  9702  000830  2820               	incf	i2printf@len,w,c
  9703  000832  E1F2               	bnz	i2l3480
  9704  000834  2821               	incf	i2printf@len+1,w,c
  9705  000836  B4D8               	btfsc	status,2,c
  9706  000838  D0EE               	goto	i2l3566
  9707  00083A  D7EE               	goto	i2l3480
  9708  00083C                     i2l3486:
  9709                           
  9710                           ;doprnt.c: 805: cp = (char *)&c;
  9711  00083C  0E28               	movlw	low i2printf@c
  9712  00083E  6E1D               	movwf	i2printf@cp,c
  9713  000840  0E00               	movlw	high i2printf@c
  9714  000842  6E1E               	movwf	i2printf@cp+1,c
  9715                           
  9716                           ;doprnt.c: 806: len = 1;
  9717  000844  0E00               	movlw	0
  9718  000846  6E21               	movwf	i2printf@len+1,c
  9719  000848  0E01               	movlw	1
  9720  00084A  6E20               	movwf	i2printf@len,c
  9721                           
  9722                           ;doprnt.c: 807: goto dostring;
  9723  00084C  D7C9               	goto	i2l3470
  9724  00084E                     i2l3490:
  9725                           
  9726                           ;doprnt.c: 818: flag |= 0xC0;
  9727  00084E  0EC0               	movlw	192
  9728  000850  1225               	iorwf	i2printf@flag,f,c
  9729                           
  9730                           ;doprnt.c: 822: }
  9731                           
  9732                           ;doprnt.c: 819: break;
  9733  000852  D014               	goto	i2l3496
  9734  000854                     i2l3494:
  9735  000854  C00D  FFF6         	movff	i2printf@f,tblptrl
  9736  000858  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9737  00085C  4A0D               	infsnz	i2printf@f,f,c
  9738  00085E  2A0E               	incf	i2printf@f+1,f,c
  9739  000860                     	if	0	;tblptru may be non-zero
  9740  000860                     	endif
  9741  000860                     	if	0	;tblptru may be non-zero
  9742  000860                     	endif
  9743  000860  0008               	tblrd		*
  9744  000862  CFF5 F028          	movff	tablat,i2printf@c
  9745  000866  5028               	movf	i2printf@c,w,c
  9746                           
  9747                           ; Switch size 1, requested type "space"
  9748                           ; Number of cases is 3, Range of values is 0 to 120
  9749                           ; switch strategies available:
  9750                           ; Name         Instructions Cycles
  9751                           ; simple_byte           10     6 (average)
  9752                           ;	Chosen strategy is simple_byte
  9753  000868  0A00               	xorlw	0	; case 0
  9754  00086A  B4D8               	btfsc	status,2,c
  9755  00086C  0012               	return	
  9756  00086E  0A75               	xorlw	117	; case 117
  9757  000870  B4D8               	btfsc	status,2,c
  9758  000872  D7ED               	goto	i2l3490
  9759  000874  0A0D               	xorlw	13	; case 120
  9760  000876  B4D8               	btfsc	status,2,c
  9761  000878  D7B1               	goto	i2l3468
  9762  00087A  D7E0               	goto	i2l3486
  9763  00087C                     i2l3496:
  9764                           
  9765                           ;doprnt.c: 1273: {
  9766                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  9767  00087C  C01B  FFD9         	movff	i2printf@ap,fsr2l
  9768  000880  C01C  FFDA         	movff	i2printf@ap+1,fsr2h
  9769  000884  CFDE F023          	movff	postinc2,i2printf@val
  9770  000888  CFDD F024          	movff	postdec2,i2printf@val+1
  9771  00088C  0E02               	movlw	2
  9772  00088E  261B               	addwf	i2printf@ap,f,c
  9773  000890  0E00               	movlw	0
  9774  000892  221C               	addwfc	i2printf@ap+1,f,c
  9775                           
  9776                           ;doprnt.c: 1287: }
  9777                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  9778  000894  D030               	goto	i2l3530
  9779  000896                     i2l3500:
  9780                           
  9781                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9782  000896  0E01               	movlw	1
  9783  000898  6E28               	movwf	i2printf@c,c
  9784  00089A                     i2l3502:
  9785  00089A  0E05               	movlw	5
  9786  00089C  1828               	xorwf	i2printf@c,w,c
  9787  00089E  B4D8               	btfsc	status,2,c
  9788  0008A0  D032               	goto	i2l3532
  9789                           
  9790                           ;doprnt.c: 1306: if(val < dpowers[c])
  9791  0008A2  5028               	movf	i2printf@c,w,c
  9792  0008A4  0D02               	mullw	2
  9793  0008A6  0ED5               	movlw	low _dpowers
  9794  0008A8  24F3               	addwf	prodl,w,c
  9795  0008AA  6EF6               	movwf	tblptrl,c
  9796  0008AC  0EFD               	movlw	high _dpowers
  9797  0008AE  20F4               	addwfc	prodh,w,c
  9798  0008B0  6EF7               	movwf	tblptrh,c
  9799  0008B2                     	if	0	;There are less than 3 active tblptr bytes
  9800  0008B2                     	endif
  9801  0008B2  0009               	tblrd		*+
  9802  0008B4  50F5               	movf	tablat,w,c
  9803  0008B6  5C23               	subwf	i2printf@val,w,c
  9804  0008B8  0009               	tblrd		*+
  9805  0008BA  50F5               	movf	tablat,w,c
  9806  0008BC  5824               	subwfb	i2printf@val+1,w,c
  9807  0008BE  A0D8               	btfss	status,0,c
  9808  0008C0  D022               	goto	i2l3532
  9809                           
  9810                           ;doprnt.c: 1307: break;
  9811  0008C2  2A28               	incf	i2printf@c,f,c
  9812  0008C4  D7EA               	goto	i2l3502
  9813  0008C6                     i2l3514:
  9814                           
  9815                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  9816  0008C6  0E01               	movlw	1
  9817  0008C8  6E28               	movwf	i2printf@c,c
  9818  0008CA                     i2l3516:
  9819  0008CA  0E04               	movlw	4
  9820  0008CC  1828               	xorwf	i2printf@c,w,c
  9821  0008CE  B4D8               	btfsc	status,2,c
  9822  0008D0  D01A               	goto	i2l3532
  9823                           
  9824                           ;doprnt.c: 1317: if(val < hexpowers[c])
  9825  0008D2  5028               	movf	i2printf@c,w,c
  9826  0008D4  0D02               	mullw	2
  9827  0008D6  0EDF               	movlw	low _hexpowers
  9828  0008D8  24F3               	addwf	prodl,w,c
  9829  0008DA  6EF6               	movwf	tblptrl,c
  9830  0008DC  0EFD               	movlw	high _hexpowers
  9831  0008DE  20F4               	addwfc	prodh,w,c
  9832  0008E0  6EF7               	movwf	tblptrh,c
  9833  0008E2                     	if	0	;There are less than 3 active tblptr bytes
  9834  0008E2                     	endif
  9835  0008E2  0009               	tblrd		*+
  9836  0008E4  50F5               	movf	tablat,w,c
  9837  0008E6  5C23               	subwf	i2printf@val,w,c
  9838  0008E8  0009               	tblrd		*+
  9839  0008EA  50F5               	movf	tablat,w,c
  9840  0008EC  5824               	subwfb	i2printf@val+1,w,c
  9841  0008EE  A0D8               	btfss	status,0,c
  9842  0008F0  D00A               	goto	i2l3532
  9843                           
  9844                           ;doprnt.c: 1318: break;
  9845  0008F2  2A28               	incf	i2printf@c,f,c
  9846  0008F4  D7EA               	goto	i2l3516
  9847  0008F6                     i2l3530:
  9848  0008F6  5025               	movf	i2printf@flag,w,c
  9849  0008F8  0BC0               	andlw	192
  9850                           
  9851                           ; Switch size 1, requested type "space"
  9852                           ; Number of cases is 2, Range of values is 128 to 192
  9853                           ; switch strategies available:
  9854                           ; Name         Instructions Cycles
  9855                           ; simple_byte            7     4 (average)
  9856                           ;	Chosen strategy is simple_byte
  9857  0008FA  0A80               	xorlw	128	; case 128
  9858  0008FC  B4D8               	btfsc	status,2,c
  9859  0008FE  D7E3               	goto	i2l3514
  9860  000900  0A40               	xorlw	64	; case 192
  9861  000902  B4D8               	btfsc	status,2,c
  9862  000904  D7C8               	goto	i2l3500
  9863  000906                     i2l3532:
  9864                           
  9865                           ;doprnt.c: 1381: if(width > c)
  9866  000906  0E80               	movlw	128
  9867  000908  BE28               	btfsc	i2printf@c,7,c
  9868  00090A  0E7F               	movlw	127
  9869  00090C  6E17               	movwf	??i2_printf& (0+255),c
  9870  00090E  5026               	movf	i2printf@width,w,c
  9871  000910  5C28               	subwf	i2printf@c,w,c
  9872  000912  5027               	movf	i2printf@width+1,w,c
  9873  000914  0A80               	xorlw	128
  9874  000916  5817               	subwfb	??i2_printf& (0+255),w,c
  9875  000918  B0D8               	btfsc	status,0,c
  9876  00091A  D007               	goto	i2l3536
  9877                           
  9878                           ;doprnt.c: 1382: width -= c;
  9879  00091C  5028               	movf	i2printf@c,w,c
  9880  00091E  5E26               	subwf	i2printf@width,f,c
  9881  000920  0E00               	movlw	0
  9882  000922  BE28               	btfsc	i2printf@c,7,c
  9883  000924  0EFF               	movlw	255
  9884  000926  5A27               	subwfb	i2printf@width+1,f,c
  9885  000928  D004               	goto	i2l3538
  9886  00092A                     i2l3536:
  9887                           
  9888                           ;doprnt.c: 1383: else
  9889                           ;doprnt.c: 1384: width = 0;
  9890  00092A  0E00               	movlw	0
  9891  00092C  6E27               	movwf	i2printf@width+1,c
  9892  00092E  0E00               	movlw	0
  9893  000930  6E26               	movwf	i2printf@width,c
  9894  000932                     i2l3538:
  9895                           
  9896                           ;doprnt.c: 1387: if(flag & 0x04) {
  9897  000932  A425               	btfss	i2printf@flag,2,c
  9898  000934  D00B               	goto	i2l3546
  9899  000936                     
  9900                           ;doprnt.c: 1415: if(width)
  9901  000936  5026               	movf	i2printf@width,w,c
  9902  000938  1027               	iorwf	i2printf@width+1,w,c
  9903  00093A  B4D8               	btfsc	status,2,c
  9904  00093C  D015               	goto	i2l505
  9905                           
  9906                           ;doprnt.c: 1417: (putch('0') );
  9907                           
  9908                           ;doprnt.c: 1416: do
  9909  00093E  0E30               	movlw	48
  9910  000940  ECD4  F010         	call	i2_putch
  9911                           
  9912                           ;doprnt.c: 1418: while(--width);
  9913  000944  0626               	decf	i2printf@width,f,c
  9914  000946  A0D8               	btfss	status,0,c
  9915  000948  0627               	decf	i2printf@width+1,f,c
  9916  00094A  D7F5               	goto	L4
  9917  00094C                     i2l3546:
  9918                           
  9919                           ;doprnt.c: 1422: {
  9920                           ;doprnt.c: 1424: if(width
  9921                           ;doprnt.c: 1428: )
  9922  00094C  5026               	movf	i2printf@width,w,c
  9923  00094E  1027               	iorwf	i2printf@width+1,w,c
  9924  000950  B4D8               	btfsc	status,2,c
  9925  000952  D00A               	goto	i2l505
  9926  000954                     i2l3548:
  9927                           
  9928                           ;doprnt.c: 1430: (putch(' ') );
  9929  000954  0E20               	movlw	32
  9930  000956  ECD4  F010         	call	i2_putch
  9931                           
  9932                           ;doprnt.c: 1431: while(--width);
  9933  00095A  0626               	decf	i2printf@width,f,c
  9934  00095C  A0D8               	btfss	status,0,c
  9935  00095E  0627               	decf	i2printf@width+1,f,c
  9936  000960  5026               	movf	i2printf@width,w,c
  9937  000962  1027               	iorwf	i2printf@width+1,w,c
  9938  000964  A4D8               	btfss	status,2,c
  9939  000966  D7F6               	goto	i2l3548
  9940  000968                     i2l505:
  9941                           
  9942                           ;doprnt.c: 1469: }
  9943                           ;doprnt.c: 1472: prec = c;
  9944  000968  C028  F022         	movff	i2printf@c,i2printf@prec
  9945                           
  9946                           ;doprnt.c: 1474: while(prec--) {
  9947  00096C  D050               	goto	i2l3564
  9948  00096E                     i2l3552:
  9949                           
  9950                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  9951  00096E  5022               	movf	i2printf@prec,w,c
  9952  000970  0D02               	mullw	2
  9953  000972  0ED5               	movlw	low _dpowers
  9954  000974  24F3               	addwf	prodl,w,c
  9955  000976  6EF6               	movwf	tblptrl,c
  9956  000978  0EFD               	movlw	high _dpowers
  9957  00097A  20F4               	addwfc	prodh,w,c
  9958  00097C  6EF7               	movwf	tblptrh,c
  9959  00097E                     	if	0	;There are less than 3 active tblptr bytes
  9960  00097E                     	endif
  9961  00097E  0009               	tblrd		*+
  9962  000980  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  9963  000984  000A               	tblrd		*-
  9964  000986  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  9965  00098A  C023  F001         	movff	i2printf@val,i2___lwdiv@dividend
  9966  00098E  C024  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  9967  000992  EC81  F00E         	call	i2___lwdiv	;wreg free
  9968  000996  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  9969  00099A  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  9970  00099E  0E00               	movlw	0
  9971  0009A0  6E0B               	movwf	i2___lwmod@divisor+1,c
  9972  0009A2  0E0A               	movlw	10
  9973  0009A4  6E0A               	movwf	i2___lwmod@divisor,c
  9974  0009A6  EC3F  F00F         	call	i2___lwmod	;wreg free
  9975  0009AA  5008               	movf	?i2___lwmod,w,c
  9976  0009AC  0F30               	addlw	48
  9977  0009AE  6E28               	movwf	i2printf@c,c
  9978                           
  9979                           ;doprnt.c: 1491: break;
  9980  0009B0  D02B               	goto	i2l3562
  9981  0009B2                     i2l3554:
  9982                           
  9983                           ;doprnt.c: 1499: {
  9984                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  9985  0009B2  C023  F001         	movff	i2printf@val,i2___lwdiv@dividend
  9986  0009B6  C024  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  9987  0009BA  5022               	movf	i2printf@prec,w,c
  9988  0009BC  0D02               	mullw	2
  9989  0009BE  0EDF               	movlw	low _hexpowers
  9990  0009C0  24F3               	addwf	prodl,w,c
  9991  0009C2  6EF6               	movwf	tblptrl,c
  9992  0009C4  0EFD               	movlw	high _hexpowers
  9993  0009C6  20F4               	addwfc	prodh,w,c
  9994  0009C8  6EF7               	movwf	tblptrh,c
  9995  0009CA                     	if	0	;There are less than 3 active tblptr bytes
  9996  0009CA                     	endif
  9997  0009CA  0009               	tblrd		*+
  9998  0009CC  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  9999  0009D0  000A               	tblrd		*-
 10000  0009D2  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 10001  0009D6  EC81  F00E         	call	i2___lwdiv	;wreg free
 10002  0009DA  5001               	movf	?i2___lwdiv,w,c
 10003  0009DC  0B0F               	andlw	15
 10004  0009DE  6E1F               	movwf	i2printf@idx,c
 10005                           
 10006                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 10007  0009E0  501F               	movf	i2printf@idx,w,c
 10008  0009E2  0D01               	mullw	1
 10009  0009E4  0E91               	movlw	low STR_52
 10010  0009E6  24F3               	addwf	prodl,w,c
 10011  0009E8  6EF6               	movwf	tblptrl,c
 10012  0009EA  0EFF               	movlw	high STR_52
 10013  0009EC  20F4               	addwfc	prodh,w,c
 10014  0009EE  6EF7               	movwf	tblptrh,c
 10015  0009F0                     	if	0	;There are less than 3 active tblptr bytes
 10016  0009F0                     	endif
 10017  0009F0  0008               	tblrd		*
 10018  0009F2  CFF5 F028          	movff	tablat,i2printf@c
 10019                           
 10020                           ;doprnt.c: 1523: }
 10021                           
 10022                           ;doprnt.c: 1508: }
 10023                           ;doprnt.c: 1510: break;
 10024  0009F6  D008               	goto	i2l3562
 10025  0009F8                     i2l3560:
 10026  0009F8  5025               	movf	i2printf@flag,w,c
 10027  0009FA  0BC0               	andlw	192
 10028                           
 10029                           ; Switch size 1, requested type "space"
 10030                           ; Number of cases is 2, Range of values is 128 to 192
 10031                           ; switch strategies available:
 10032                           ; Name         Instructions Cycles
 10033                           ; simple_byte            7     4 (average)
 10034                           ;	Chosen strategy is simple_byte
 10035  0009FC  0A80               	xorlw	128	; case 128
 10036  0009FE  B4D8               	btfsc	status,2,c
 10037  000A00  D7D8               	goto	i2l3554
 10038  000A02  0A40               	xorlw	64	; case 192
 10039  000A04  B4D8               	btfsc	status,2,c
 10040  000A06  D7B3               	goto	i2l3552
 10041  000A08                     i2l3562:
 10042                           
 10043                           ;doprnt.c: 1524: (putch(c) );
 10044  000A08  5028               	movf	i2printf@c,w,c
 10045  000A0A  ECD4  F010         	call	i2_putch
 10046  000A0E                     i2l3564:
 10047  000A0E  0622               	decf	i2printf@prec,f,c
 10048  000A10  2822               	incf	i2printf@prec,w,c
 10049  000A12  A4D8               	btfss	status,2,c
 10050  000A14  D7F1               	goto	i2l3560
 10051  000A16                     i2l3566:
 10052  000A16  C00D  FFF6         	movff	i2printf@f,tblptrl
 10053  000A1A  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 10054  000A1E  4A0D               	infsnz	i2printf@f,f,c
 10055  000A20  2A0E               	incf	i2printf@f+1,f,c
 10056  000A22                     	if	0	;tblptru may be non-zero
 10057  000A22                     	endif
 10058  000A22                     	if	0	;tblptru may be non-zero
 10059  000A22                     	endif
 10060  000A22  0008               	tblrd		*
 10061  000A24  CFF5 F028          	movff	tablat,i2printf@c
 10062  000A28  5028               	movf	i2printf@c,w,c
 10063  000A2A  B4D8               	btfsc	status,2,c
 10064  000A2C  0012               	return	
 10065  000A2E  D67E               	goto	i2l3444
 10066  000A30                     __end_ofi2_printf:
 10067                           	opt stack 0
 10068                           pclatu	equ	0xFFB
 10069                           pclath	equ	0xFFA
 10070                           tblptru	equ	0xFF8
 10071                           tblptrh	equ	0xFF7
 10072                           tblptrl	equ	0xFF6
 10073                           tablat	equ	0xFF5
 10074                           prodh	equ	0xFF4
 10075                           prodl	equ	0xFF3
 10076                           intcon	equ	0xFF2
 10077                           intcon3	equ	0xFF0
 10078                           postinc0	equ	0xFEE
 10079                           fsr0h	equ	0xFEA
 10080                           fsr0l	equ	0xFE9
 10081                           wreg	equ	0xFE8
 10082                           plusw1	equ	0xFE3
 10083                           fsr1h	equ	0xFE2
 10084                           fsr1l	equ	0xFE1
 10085                           indf2	equ	0xFDF
 10086                           postinc2	equ	0xFDE
 10087                           postdec2	equ	0xFDD
 10088                           plusw2	equ	0xFDB
 10089                           fsr2h	equ	0xFDA
 10090                           fsr2l	equ	0xFD9
 10091                           status	equ	0xFD8
 10092                           
 10093 ;; *************** function i2_putch *****************
 10094 ;; Defined at:
 10095 ;;		line 25 in file "lcd.c"
 10096 ;; Parameters:    Size  Location     Type
 10097 ;;  data            1    wreg     unsigned char 
 10098 ;; Auto vars:     Size  Location     Type
 10099 ;;  data            1    2[COMRAM] unsigned char 
 10100 ;; Return value:  Size  Location     Type
 10101 ;;                  1    wreg      void 
 10102 ;; Registers used:
 10103 ;;		wreg, status,2, status,0, cstack
 10104 ;; Tracked objects:
 10105 ;;		On entry : 0/0
 10106 ;;		On exit  : 0/0
 10107 ;;		Unchanged: 0/0
 10108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10110 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10112 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10113 ;;Total ram usage:        1 bytes
 10114 ;; Hardware stack levels used:    1
 10115 ;; Hardware stack levels required when called:    1
 10116 ;; This function calls:
 10117 ;;		i2_lcdNibble
 10118 ;; This function is called by:
 10119 ;;		i2_printf
 10120 ;; This function uses a non-reentrant model
 10121 ;;
 10122                           
 10123                           	psect	text54
 10124  0021A8                     __ptext54:
 10125                           	opt stack 0
 10126  0021A8                     i2_putch:
 10127                           	opt stack 22
 10128                           
 10129                           ;incstack = 0
 10130                           ;i2putch@data stored from wreg
 10131  0021A8  6E03               	movwf	i2putch@data,c
 10132                           
 10133                           ;lcd.c: 26: LATDbits.LATD2 = 1;
 10134  0021AA  848C               	bsf	3980,2,c	;volatile
 10135                           
 10136                           ;lcd.c: 27: lcdNibble(data);
 10137  0021AC  5003               	movf	i2putch@data,w,c
 10138  0021AE  EC56  F00E         	call	i2_lcdNibble
 10139  0021B2  0012               	return		;funcret
 10140  0021B4                     __end_ofi2_putch:
 10141                           	opt stack 0
 10142                           pclatu	equ	0xFFB
 10143                           pclath	equ	0xFFA
 10144                           tblptru	equ	0xFF8
 10145                           tblptrh	equ	0xFF7
 10146                           tblptrl	equ	0xFF6
 10147                           tablat	equ	0xFF5
 10148                           prodh	equ	0xFF4
 10149                           prodl	equ	0xFF3
 10150                           intcon	equ	0xFF2
 10151                           intcon3	equ	0xFF0
 10152                           postinc0	equ	0xFEE
 10153                           fsr0h	equ	0xFEA
 10154                           fsr0l	equ	0xFE9
 10155                           wreg	equ	0xFE8
 10156                           plusw1	equ	0xFE3
 10157                           fsr1h	equ	0xFE2
 10158                           fsr1l	equ	0xFE1
 10159                           indf2	equ	0xFDF
 10160                           postinc2	equ	0xFDE
 10161                           postdec2	equ	0xFDD
 10162                           plusw2	equ	0xFDB
 10163                           fsr2h	equ	0xFDA
 10164                           fsr2l	equ	0xFD9
 10165                           status	equ	0xFD8
 10166                           
 10167 ;; *************** function i2_isdigit *****************
 10168 ;; Defined at:
 10169 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
 10170 ;; Parameters:    Size  Location     Type
 10171 ;;  c               1    wreg     unsigned char 
 10172 ;; Auto vars:     Size  Location     Type
 10173 ;;  c               1    2[COMRAM] unsigned char 
 10174 ;; Return value:  Size  Location     Type
 10175 ;;		None               void
 10176 ;; Registers used:
 10177 ;;		wreg, status,2, status,0
 10178 ;; Tracked objects:
 10179 ;;		On entry : 0/0
 10180 ;;		On exit  : 0/0
 10181 ;;		Unchanged: 0/0
 10182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10184 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10185 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10186 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10187 ;;Total ram usage:        3 bytes
 10188 ;; Hardware stack levels used:    1
 10189 ;; This function calls:
 10190 ;;		Nothing
 10191 ;; This function is called by:
 10192 ;;		i2_printf
 10193 ;; This function uses a non-reentrant model
 10194 ;;
 10195                           
 10196                           	psect	text55
 10197  0020DC                     __ptext55:
 10198                           	opt stack 0
 10199  0020DC                     i2_isdigit:
 10200                           	opt stack 23
 10201                           
 10202                           ;incstack = 0
 10203                           ;i2isdigit@c stored from wreg
 10204  0020DC  6E03               	movwf	i2isdigit@c,c
 10205  0020DE  0E00               	movlw	0
 10206  0020E0  6E02               	movwf	i2_isdigit$1055,c
 10207  0020E2  0E3A               	movlw	58
 10208  0020E4  6003               	cpfslt	i2isdigit@c,c
 10209  0020E6  D005               	goto	i2l3118
 10210  0020E8  0E2F               	movlw	47
 10211  0020EA  6403               	cpfsgt	i2isdigit@c,c
 10212  0020EC  D002               	goto	i2l3118
 10213  0020EE  0E01               	movlw	1
 10214  0020F0  6E02               	movwf	i2_isdigit$1055,c
 10215  0020F2                     i2l3118:
 10216  0020F2  C002  F001         	movff	i2_isdigit$1055,??i2_isdigit
 10217  0020F6  3001               	rrcf	??i2_isdigit,w,c
 10218  0020F8  0012               	return	
 10219  0020FA                     __end_ofi2_isdigit:
 10220                           	opt stack 0
 10221                           pclatu	equ	0xFFB
 10222                           pclath	equ	0xFFA
 10223                           tblptru	equ	0xFF8
 10224                           tblptrh	equ	0xFF7
 10225                           tblptrl	equ	0xFF6
 10226                           tablat	equ	0xFF5
 10227                           prodh	equ	0xFF4
 10228                           prodl	equ	0xFF3
 10229                           intcon	equ	0xFF2
 10230                           intcon3	equ	0xFF0
 10231                           postinc0	equ	0xFEE
 10232                           fsr0h	equ	0xFEA
 10233                           fsr0l	equ	0xFE9
 10234                           wreg	equ	0xFE8
 10235                           plusw1	equ	0xFE3
 10236                           fsr1h	equ	0xFE2
 10237                           fsr1l	equ	0xFE1
 10238                           indf2	equ	0xFDF
 10239                           postinc2	equ	0xFDE
 10240                           postdec2	equ	0xFDD
 10241                           plusw2	equ	0xFDB
 10242                           fsr2h	equ	0xFDA
 10243                           fsr2l	equ	0xFD9
 10244                           status	equ	0xFD8
 10245                           
 10246 ;; *************** function i2___wmul *****************
 10247 ;; Defined at:
 10248 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
 10249 ;; Parameters:    Size  Location     Type
 10250 ;;  multiplier      2    0[COMRAM] unsigned int 
 10251 ;;  multiplicand    2    2[COMRAM] unsigned int 
 10252 ;; Auto vars:     Size  Location     Type
 10253 ;;  __wmul          2    4[COMRAM] unsigned int 
 10254 ;; Return value:  Size  Location     Type
 10255 ;;                  2    0[COMRAM] unsigned int 
 10256 ;; Registers used:
 10257 ;;		wreg, status,2, status,0, prodl, prodh
 10258 ;; Tracked objects:
 10259 ;;		On entry : 0/0
 10260 ;;		On exit  : 0/0
 10261 ;;		Unchanged: 0/0
 10262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10263 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10264 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10266 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10267 ;;Total ram usage:        6 bytes
 10268 ;; Hardware stack levels used:    1
 10269 ;; This function calls:
 10270 ;;		Nothing
 10271 ;; This function is called by:
 10272 ;;		_simulate
 10273 ;;		_HexDecToDec2
 10274 ;;		_WriteRun
 10275 ;;		i2_printf
 10276 ;; This function uses a non-reentrant model
 10277 ;;
 10278                           
 10279                           	psect	text56
 10280  002058                     __ptext56:
 10281                           	opt stack 0
 10282  002058                     i2___wmul:
 10283                           	opt stack 23
 10284                           
 10285                           ;incstack = 0
 10286  002058  5001               	movf	i2___wmul@multiplier,w,c
 10287  00205A  0203               	mulwf	i2___wmul@multiplicand,c
 10288  00205C  CFF3 F005          	movff	prodl,i2___wmul@product
 10289  002060  CFF4 F006          	movff	prodh,i2___wmul@product+1
 10290  002064  5001               	movf	i2___wmul@multiplier,w,c
 10291  002066  0204               	mulwf	i2___wmul@multiplicand+1,c
 10292  002068  50F3               	movf	prodl,w,c
 10293  00206A  2606               	addwf	i2___wmul@product+1,f,c
 10294  00206C  5002               	movf	i2___wmul@multiplier+1,w,c
 10295  00206E  0203               	mulwf	i2___wmul@multiplicand,c
 10296  002070  50F3               	movf	prodl,w,c
 10297  002072  2606               	addwf	i2___wmul@product+1,f,c
 10298  002074  C005  F001         	movff	i2___wmul@product,?i2___wmul
 10299  002078  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 10300  00207C  0012               	return	
 10301  00207E                     __end_ofi2___wmul:
 10302                           	opt stack 0
 10303                           pclatu	equ	0xFFB
 10304                           pclath	equ	0xFFA
 10305                           tblptru	equ	0xFF8
 10306                           tblptrh	equ	0xFF7
 10307                           tblptrl	equ	0xFF6
 10308                           tablat	equ	0xFF5
 10309                           prodh	equ	0xFF4
 10310                           prodl	equ	0xFF3
 10311                           intcon	equ	0xFF2
 10312                           intcon3	equ	0xFF0
 10313                           postinc0	equ	0xFEE
 10314                           fsr0h	equ	0xFEA
 10315                           fsr0l	equ	0xFE9
 10316                           wreg	equ	0xFE8
 10317                           plusw1	equ	0xFE3
 10318                           fsr1h	equ	0xFE2
 10319                           fsr1l	equ	0xFE1
 10320                           indf2	equ	0xFDF
 10321                           postinc2	equ	0xFDE
 10322                           postdec2	equ	0xFDD
 10323                           plusw2	equ	0xFDB
 10324                           fsr2h	equ	0xFDA
 10325                           fsr2l	equ	0xFD9
 10326                           status	equ	0xFD8
 10327                           
 10328 ;; *************** function i2___lwmod *****************
 10329 ;; Defined at:
 10330 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
 10331 ;; Parameters:    Size  Location     Type
 10332 ;;  dividend        2    7[COMRAM] unsigned int 
 10333 ;;  divisor         2    9[COMRAM] unsigned int 
 10334 ;; Auto vars:     Size  Location     Type
 10335 ;;  __lwmod         1   11[COMRAM] unsigned char 
 10336 ;; Return value:  Size  Location     Type
 10337 ;;                  2    7[COMRAM] unsigned int 
 10338 ;; Registers used:
 10339 ;;		wreg, status,2, status,0
 10340 ;; Tracked objects:
 10341 ;;		On entry : 0/0
 10342 ;;		On exit  : 0/0
 10343 ;;		Unchanged: 0/0
 10344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10345 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10346 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10348 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10349 ;;Total ram usage:        5 bytes
 10350 ;; Hardware stack levels used:    1
 10351 ;; This function calls:
 10352 ;;		Nothing
 10353 ;; This function is called by:
 10354 ;;		i2_printf
 10355 ;; This function uses a non-reentrant model
 10356 ;;
 10357                           
 10358                           	psect	text57
 10359  001E7E                     __ptext57:
 10360                           	opt stack 0
 10361  001E7E                     i2___lwmod:
 10362                           	opt stack 23
 10363                           
 10364                           ;incstack = 0
 10365  001E7E  500A               	movf	i2___lwmod@divisor,w,c
 10366  001E80  100B               	iorwf	i2___lwmod@divisor+1,w,c
 10367  001E82  B4D8               	btfsc	status,2,c
 10368  001E84  D018               	goto	i2l935
 10369  001E86  0E01               	movlw	1
 10370  001E88  6E0C               	movwf	i2___lwmod@counter,c
 10371  001E8A  D004               	goto	i2l3150
 10372  001E8C                     i2l3148:
 10373  001E8C  90D8               	bcf	status,0,c
 10374  001E8E  360A               	rlcf	i2___lwmod@divisor,f,c
 10375  001E90  360B               	rlcf	i2___lwmod@divisor+1,f,c
 10376  001E92  2A0C               	incf	i2___lwmod@counter,f,c
 10377  001E94                     i2l3150:
 10378  001E94  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 10379  001E96  D7FA               	goto	i2l3148
 10380  001E98                     i2l3152:
 10381  001E98  500A               	movf	i2___lwmod@divisor,w,c
 10382  001E9A  5C08               	subwf	i2___lwmod@dividend,w,c
 10383  001E9C  500B               	movf	i2___lwmod@divisor+1,w,c
 10384  001E9E  5809               	subwfb	i2___lwmod@dividend+1,w,c
 10385  001EA0  A0D8               	btfss	status,0,c
 10386  001EA2  D004               	goto	i2l3156
 10387  001EA4  500A               	movf	i2___lwmod@divisor,w,c
 10388  001EA6  5E08               	subwf	i2___lwmod@dividend,f,c
 10389  001EA8  500B               	movf	i2___lwmod@divisor+1,w,c
 10390  001EAA  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 10391  001EAC                     i2l3156:
 10392  001EAC  90D8               	bcf	status,0,c
 10393  001EAE  320B               	rrcf	i2___lwmod@divisor+1,f,c
 10394  001EB0  320A               	rrcf	i2___lwmod@divisor,f,c
 10395  001EB2  2E0C               	decfsz	i2___lwmod@counter,f,c
 10396  001EB4  D7F1               	goto	i2l3152
 10397  001EB6                     i2l935:
 10398  001EB6  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 10399  001EBA  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 10400  001EBE  0012               	return		;funcret
 10401  001EC0                     __end_ofi2___lwmod:
 10402                           	opt stack 0
 10403                           pclatu	equ	0xFFB
 10404                           pclath	equ	0xFFA
 10405                           tblptru	equ	0xFF8
 10406                           tblptrh	equ	0xFF7
 10407                           tblptrl	equ	0xFF6
 10408                           tablat	equ	0xFF5
 10409                           prodh	equ	0xFF4
 10410                           prodl	equ	0xFF3
 10411                           intcon	equ	0xFF2
 10412                           intcon3	equ	0xFF0
 10413                           postinc0	equ	0xFEE
 10414                           fsr0h	equ	0xFEA
 10415                           fsr0l	equ	0xFE9
 10416                           wreg	equ	0xFE8
 10417                           plusw1	equ	0xFE3
 10418                           fsr1h	equ	0xFE2
 10419                           fsr1l	equ	0xFE1
 10420                           indf2	equ	0xFDF
 10421                           postinc2	equ	0xFDE
 10422                           postdec2	equ	0xFDD
 10423                           plusw2	equ	0xFDB
 10424                           fsr2h	equ	0xFDA
 10425                           fsr2l	equ	0xFD9
 10426                           status	equ	0xFD8
 10427                           
 10428 ;; *************** function i2___lwdiv *****************
 10429 ;; Defined at:
 10430 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
 10431 ;; Parameters:    Size  Location     Type
 10432 ;;  dividend        2    0[COMRAM] unsigned int 
 10433 ;;  divisor         2    2[COMRAM] unsigned int 
 10434 ;; Auto vars:     Size  Location     Type
 10435 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 10436 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 10437 ;; Return value:  Size  Location     Type
 10438 ;;                  2    0[COMRAM] unsigned int 
 10439 ;; Registers used:
 10440 ;;		wreg, status,2, status,0
 10441 ;; Tracked objects:
 10442 ;;		On entry : 0/0
 10443 ;;		On exit  : 0/0
 10444 ;;		Unchanged: 0/0
 10445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10446 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10447 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10449 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10450 ;;Total ram usage:        7 bytes
 10451 ;; Hardware stack levels used:    1
 10452 ;; This function calls:
 10453 ;;		Nothing
 10454 ;; This function is called by:
 10455 ;;		i2_printf
 10456 ;; This function uses a non-reentrant model
 10457 ;;
 10458                           
 10459                           	psect	text58
 10460  001D02                     __ptext58:
 10461                           	opt stack 0
 10462  001D02                     i2___lwdiv:
 10463                           	opt stack 23
 10464                           
 10465                           ;incstack = 0
 10466  001D02  0E00               	movlw	0
 10467  001D04  6E06               	movwf	i2___lwdiv@quotient+1,c
 10468  001D06  0E00               	movlw	0
 10469  001D08  6E05               	movwf	i2___lwdiv@quotient,c
 10470  001D0A  5003               	movf	i2___lwdiv@divisor,w,c
 10471  001D0C  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 10472  001D0E  B4D8               	btfsc	status,2,c
 10473  001D10  D01C               	goto	i2l925
 10474  001D12  0E01               	movlw	1
 10475  001D14  6E07               	movwf	i2___lwdiv@counter,c
 10476  001D16  D004               	goto	i2l3130
 10477  001D18                     i2l3128:
 10478  001D18  90D8               	bcf	status,0,c
 10479  001D1A  3603               	rlcf	i2___lwdiv@divisor,f,c
 10480  001D1C  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 10481  001D1E  2A07               	incf	i2___lwdiv@counter,f,c
 10482  001D20                     i2l3130:
 10483  001D20  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 10484  001D22  D7FA               	goto	i2l3128
 10485  001D24                     i2l3132:
 10486  001D24  90D8               	bcf	status,0,c
 10487  001D26  3605               	rlcf	i2___lwdiv@quotient,f,c
 10488  001D28  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 10489  001D2A  5003               	movf	i2___lwdiv@divisor,w,c
 10490  001D2C  5C01               	subwf	i2___lwdiv@dividend,w,c
 10491  001D2E  5004               	movf	i2___lwdiv@divisor+1,w,c
 10492  001D30  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 10493  001D32  A0D8               	btfss	status,0,c
 10494  001D34  D005               	goto	i2l3140
 10495  001D36  5003               	movf	i2___lwdiv@divisor,w,c
 10496  001D38  5E01               	subwf	i2___lwdiv@dividend,f,c
 10497  001D3A  5004               	movf	i2___lwdiv@divisor+1,w,c
 10498  001D3C  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 10499  001D3E  8005               	bsf	i2___lwdiv@quotient,0,c
 10500  001D40                     i2l3140:
 10501  001D40  90D8               	bcf	status,0,c
 10502  001D42  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 10503  001D44  3203               	rrcf	i2___lwdiv@divisor,f,c
 10504  001D46  2E07               	decfsz	i2___lwdiv@counter,f,c
 10505  001D48  D7ED               	goto	i2l3132
 10506  001D4A                     i2l925:
 10507  001D4A  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 10508  001D4E  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 10509  001D52  0012               	return		;funcret
 10510  001D54                     __end_ofi2___lwdiv:
 10511                           	opt stack 0
 10512                           pclatu	equ	0xFFB
 10513                           pclath	equ	0xFFA
 10514                           tblptru	equ	0xFF8
 10515                           tblptrh	equ	0xFF7
 10516                           tblptrl	equ	0xFF6
 10517                           tablat	equ	0xFF5
 10518                           prodh	equ	0xFF4
 10519                           prodl	equ	0xFF3
 10520                           intcon	equ	0xFF2
 10521                           intcon3	equ	0xFF0
 10522                           postinc0	equ	0xFEE
 10523                           fsr0h	equ	0xFEA
 10524                           fsr0l	equ	0xFE9
 10525                           wreg	equ	0xFE8
 10526                           plusw1	equ	0xFE3
 10527                           fsr1h	equ	0xFE2
 10528                           fsr1l	equ	0xFE1
 10529                           indf2	equ	0xFDF
 10530                           postinc2	equ	0xFDE
 10531                           postdec2	equ	0xFDD
 10532                           plusw2	equ	0xFDB
 10533                           fsr2h	equ	0xFDA
 10534                           fsr2l	equ	0xFD9
 10535                           status	equ	0xFD8
 10536                           
 10537 ;; *************** function i2_line1 *****************
 10538 ;; Defined at:
 10539 ;;		line 58 in file "lcd.c"
 10540 ;; Parameters:    Size  Location     Type
 10541 ;;		None
 10542 ;; Auto vars:     Size  Location     Type
 10543 ;;		None
 10544 ;; Return value:  Size  Location     Type
 10545 ;;                  1    wreg      void 
 10546 ;; Registers used:
 10547 ;;		wreg, status,2, status,0, cstack
 10548 ;; Tracked objects:
 10549 ;;		On entry : 0/0
 10550 ;;		On exit  : 0/0
 10551 ;;		Unchanged: 0/0
 10552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10556 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10557 ;;Total ram usage:        0 bytes
 10558 ;; Hardware stack levels used:    1
 10559 ;; Hardware stack levels required when called:    2
 10560 ;; This function calls:
 10561 ;;		i2_lcdInst
 10562 ;; This function is called by:
 10563 ;;		_simulate
 10564 ;;		_showInfo
 10565 ;;		_PermLog
 10566 ;; This function uses a non-reentrant model
 10567 ;;
 10568                           
 10569                           	psect	text59
 10570  002204                     __ptext59:
 10571                           	opt stack 0
 10572  002204                     i2_line1:
 10573                           	opt stack 22
 10574                           
 10575                           ;lcd.c: 59: lcdInst(0b11000000);
 10576                           
 10577                           ;incstack = 0
 10578  002204  0EC0               	movlw	192
 10579  002206  ECDA  F010         	call	i2_lcdInst
 10580  00220A  0012               	return		;funcret
 10581  00220C                     __end_ofi2_line1:
 10582                           	opt stack 0
 10583                           pclatu	equ	0xFFB
 10584                           pclath	equ	0xFFA
 10585                           tblptru	equ	0xFF8
 10586                           tblptrh	equ	0xFF7
 10587                           tblptrl	equ	0xFF6
 10588                           tablat	equ	0xFF5
 10589                           prodh	equ	0xFF4
 10590                           prodl	equ	0xFF3
 10591                           intcon	equ	0xFF2
 10592                           intcon3	equ	0xFF0
 10593                           postinc0	equ	0xFEE
 10594                           fsr0h	equ	0xFEA
 10595                           fsr0l	equ	0xFE9
 10596                           wreg	equ	0xFE8
 10597                           plusw1	equ	0xFE3
 10598                           fsr1h	equ	0xFE2
 10599                           fsr1l	equ	0xFE1
 10600                           indf2	equ	0xFDF
 10601                           postinc2	equ	0xFDE
 10602                           postdec2	equ	0xFDD
 10603                           plusw2	equ	0xFDB
 10604                           fsr2h	equ	0xFDA
 10605                           fsr2l	equ	0xFD9
 10606                           status	equ	0xFD8
 10607                           
 10608 ;; *************** function i2_line0 *****************
 10609 ;; Defined at:
 10610 ;;		line 54 in file "lcd.c"
 10611 ;; Parameters:    Size  Location     Type
 10612 ;;		None
 10613 ;; Auto vars:     Size  Location     Type
 10614 ;;		None
 10615 ;; Return value:  Size  Location     Type
 10616 ;;                  1    wreg      void 
 10617 ;; Registers used:
 10618 ;;		wreg, status,2, status,0, cstack
 10619 ;; Tracked objects:
 10620 ;;		On entry : 0/0
 10621 ;;		On exit  : 0/0
 10622 ;;		Unchanged: 0/0
 10623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10627 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10628 ;;Total ram usage:        0 bytes
 10629 ;; Hardware stack levels used:    1
 10630 ;; Hardware stack levels required when called:    2
 10631 ;; This function calls:
 10632 ;;		i2_lcdInst
 10633 ;; This function is called by:
 10634 ;;		_simulate
 10635 ;;		_showInfo
 10636 ;;		_stopMoving
 10637 ;;		_PermLog
 10638 ;; This function uses a non-reentrant model
 10639 ;;
 10640                           
 10641                           	psect	text60
 10642  00220C                     __ptext60:
 10643                           	opt stack 0
 10644  00220C                     i2_line0:
 10645                           	opt stack 22
 10646                           
 10647                           ;lcd.c: 55: lcdInst(0b10000000);
 10648                           
 10649                           ;incstack = 0
 10650  00220C  0E80               	movlw	128
 10651  00220E  ECDA  F010         	call	i2_lcdInst
 10652  002212  0012               	return		;funcret
 10653  002214                     __end_ofi2_line0:
 10654                           	opt stack 0
 10655                           pclatu	equ	0xFFB
 10656                           pclath	equ	0xFFA
 10657                           tblptru	equ	0xFF8
 10658                           tblptrh	equ	0xFF7
 10659                           tblptrl	equ	0xFF6
 10660                           tablat	equ	0xFF5
 10661                           prodh	equ	0xFF4
 10662                           prodl	equ	0xFF3
 10663                           intcon	equ	0xFF2
 10664                           intcon3	equ	0xFF0
 10665                           postinc0	equ	0xFEE
 10666                           fsr0h	equ	0xFEA
 10667                           fsr0l	equ	0xFE9
 10668                           wreg	equ	0xFE8
 10669                           plusw1	equ	0xFE3
 10670                           fsr1h	equ	0xFE2
 10671                           fsr1l	equ	0xFE1
 10672                           indf2	equ	0xFDF
 10673                           postinc2	equ	0xFDE
 10674                           postdec2	equ	0xFDD
 10675                           plusw2	equ	0xFDB
 10676                           fsr2h	equ	0xFDA
 10677                           fsr2l	equ	0xFD9
 10678                           status	equ	0xFD8
 10679                           
 10680 ;; *************** function i2_lcdInst *****************
 10681 ;; Defined at:
 10682 ;;		line 20 in file "lcd.c"
 10683 ;; Parameters:    Size  Location     Type
 10684 ;;  data            1    wreg     unsigned char 
 10685 ;; Auto vars:     Size  Location     Type
 10686 ;;  data            1    2[COMRAM] unsigned char 
 10687 ;; Return value:  Size  Location     Type
 10688 ;;                  1    wreg      void 
 10689 ;; Registers used:
 10690 ;;		wreg, status,2, status,0, cstack
 10691 ;; Tracked objects:
 10692 ;;		On entry : 0/0
 10693 ;;		On exit  : 0/0
 10694 ;;		Unchanged: 0/0
 10695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10697 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10699 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10700 ;;Total ram usage:        1 bytes
 10701 ;; Hardware stack levels used:    1
 10702 ;; Hardware stack levels required when called:    1
 10703 ;; This function calls:
 10704 ;;		i2_lcdNibble
 10705 ;; This function is called by:
 10706 ;;		i2_line0
 10707 ;;		i2_line1
 10708 ;; This function uses a non-reentrant model
 10709 ;;
 10710                           
 10711                           	psect	text61
 10712  0021B4                     __ptext61:
 10713                           	opt stack 0
 10714  0021B4                     i2_lcdInst:
 10715                           	opt stack 22
 10716                           
 10717                           ;incstack = 0
 10718                           ;i2lcdInst@data stored from wreg
 10719  0021B4  6E03               	movwf	i2lcdInst@data,c
 10720                           
 10721                           ;lcd.c: 21: LATDbits.LATD2 = 0;
 10722  0021B6  948C               	bcf	3980,2,c	;volatile
 10723                           
 10724                           ;lcd.c: 22: lcdNibble(data);
 10725  0021B8  5003               	movf	i2lcdInst@data,w,c
 10726  0021BA  EC56  F00E         	call	i2_lcdNibble
 10727  0021BE  0012               	return		;funcret
 10728  0021C0                     __end_ofi2_lcdInst:
 10729                           	opt stack 0
 10730                           pclatu	equ	0xFFB
 10731                           pclath	equ	0xFFA
 10732                           tblptru	equ	0xFF8
 10733                           tblptrh	equ	0xFF7
 10734                           tblptrl	equ	0xFF6
 10735                           tablat	equ	0xFF5
 10736                           prodh	equ	0xFF4
 10737                           prodl	equ	0xFF3
 10738                           intcon	equ	0xFF2
 10739                           intcon3	equ	0xFF0
 10740                           postinc0	equ	0xFEE
 10741                           fsr0h	equ	0xFEA
 10742                           fsr0l	equ	0xFE9
 10743                           wreg	equ	0xFE8
 10744                           plusw1	equ	0xFE3
 10745                           fsr1h	equ	0xFE2
 10746                           fsr1l	equ	0xFE1
 10747                           indf2	equ	0xFDF
 10748                           postinc2	equ	0xFDE
 10749                           postdec2	equ	0xFDD
 10750                           plusw2	equ	0xFDB
 10751                           fsr2h	equ	0xFDA
 10752                           fsr2l	equ	0xFD9
 10753                           status	equ	0xFD8
 10754                           
 10755 ;; *************** function i2_lcdNibble *****************
 10756 ;; Defined at:
 10757 ;;		line 30 in file "lcd.c"
 10758 ;; Parameters:    Size  Location     Type
 10759 ;;  data            1    wreg     unsigned char 
 10760 ;; Auto vars:     Size  Location     Type
 10761 ;;  data            1    1[COMRAM] unsigned char 
 10762 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 10763 ;; Return value:  Size  Location     Type
 10764 ;;                  1    wreg      void 
 10765 ;; Registers used:
 10766 ;;		wreg, status,2, status,0
 10767 ;; Tracked objects:
 10768 ;;		On entry : 0/0
 10769 ;;		On exit  : 0/0
 10770 ;;		Unchanged: 0/0
 10771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10773 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10775 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10776 ;;Total ram usage:        2 bytes
 10777 ;; Hardware stack levels used:    1
 10778 ;; This function calls:
 10779 ;;		Nothing
 10780 ;; This function is called by:
 10781 ;;		i2_lcdInst
 10782 ;;		i2_putch
 10783 ;; This function uses a non-reentrant model
 10784 ;;
 10785                           
 10786                           	psect	text62
 10787  001CAC                     __ptext62:
 10788                           	opt stack 0
 10789  001CAC                     i2_lcdNibble:
 10790                           	opt stack 22
 10791                           
 10792                           ;incstack = 0
 10793                           ;i2lcdNibble@data stored from wreg
 10794  001CAC  6E02               	movwf	i2lcdNibble@data,c
 10795                           
 10796                           ;lcd.c: 32: char temp = data & 0xF0;
 10797  001CAE  5002               	movf	i2lcdNibble@data,w,c
 10798  001CB0  0BF0               	andlw	240
 10799  001CB2  6E01               	movwf	i2lcdNibble@temp,c
 10800                           
 10801                           ;lcd.c: 33: LATD = LATD & 0x0F;
 10802  001CB4  508C               	movf	3980,w,c	;volatile
 10803  001CB6  0B0F               	andlw	15
 10804  001CB8  6E8C               	movwf	3980,c	;volatile
 10805                           
 10806                           ;lcd.c: 34: LATD = temp | LATD;
 10807  001CBA  5001               	movf	i2lcdNibble@temp,w,c
 10808  001CBC  108C               	iorwf	3980,w,c	;volatile
 10809  001CBE  6E8C               	movwf	3980,c	;volatile
 10810                           
 10811                           ;lcd.c: 36: LATDbits.LATD3 = 0;
 10812  001CC0  968C               	bcf	3980,3,c	;volatile
 10813                           
 10814                           ;lcd.c: 37: _delay((unsigned long)((25)*(8000000/4000000.0)));
 10815  001CC2  0E10               	movlw	16
 10816  001CC4                     i2u318_47:
 10817  001CC4  2EE8               	decfsz	wreg,f,c
 10818  001CC6  D7FE               	bra	i2u318_47
 10819  001CC8  D000               	nop2	
 10820                           
 10821                           ;lcd.c: 38: LATDbits.LATD3 = 1;
 10822  001CCA  868C               	bsf	3980,3,c	;volatile
 10823                           
 10824                           ;lcd.c: 39: _delay((unsigned long)((25)*(8000000/4000000.0)));
 10825  001CCC  0E10               	movlw	16
 10826  001CCE                     i2u319_47:
 10827  001CCE  2EE8               	decfsz	wreg,f,c
 10828  001CD0  D7FE               	bra	i2u319_47
 10829  001CD2  D000               	nop2	
 10830                           
 10831                           ;lcd.c: 41: data = data << 4;
 10832  001CD4  3802               	swapf	i2lcdNibble@data,w,c
 10833  001CD6  0BF0               	andlw	240
 10834  001CD8  6E02               	movwf	i2lcdNibble@data,c
 10835                           
 10836                           ;lcd.c: 43: temp = data & 0xF0;
 10837  001CDA  5002               	movf	i2lcdNibble@data,w,c
 10838  001CDC  0BF0               	andlw	240
 10839  001CDE  6E01               	movwf	i2lcdNibble@temp,c
 10840                           
 10841                           ;lcd.c: 44: LATD = LATD & 0x0F;
 10842  001CE0  508C               	movf	3980,w,c	;volatile
 10843  001CE2  0B0F               	andlw	15
 10844  001CE4  6E8C               	movwf	3980,c	;volatile
 10845                           
 10846                           ;lcd.c: 45: LATD = temp | LATD;
 10847  001CE6  5001               	movf	i2lcdNibble@temp,w,c
 10848  001CE8  108C               	iorwf	3980,w,c	;volatile
 10849  001CEA  6E8C               	movwf	3980,c	;volatile
 10850                           
 10851                           ;lcd.c: 47: LATDbits.LATD3 = 0;
 10852  001CEC  968C               	bcf	3980,3,c	;volatile
 10853                           
 10854                           ;lcd.c: 48: _delay((unsigned long)((25)*(8000000/4000000.0)));
 10855  001CEE  0E10               	movlw	16
 10856  001CF0                     i2u320_47:
 10857  001CF0  2EE8               	decfsz	wreg,f,c
 10858  001CF2  D7FE               	bra	i2u320_47
 10859  001CF4  D000               	nop2	
 10860                           
 10861                           ;lcd.c: 49: LATDbits.LATD3 = 1;
 10862  001CF6  868C               	bsf	3980,3,c	;volatile
 10863                           
 10864                           ;lcd.c: 50: _delay((unsigned long)((25)*(8000000/4000000.0)));
 10865  001CF8  0E10               	movlw	16
 10866  001CFA                     i2u321_47:
 10867  001CFA  2EE8               	decfsz	wreg,f,c
 10868  001CFC  D7FE               	bra	i2u321_47
 10869  001CFE  D000               	nop2	
 10870  001D00  0012               	return		;funcret
 10871  001D02                     __end_ofi2_lcdNibble:
 10872                           	opt stack 0
 10873                           pclatu	equ	0xFFB
 10874                           pclath	equ	0xFFA
 10875                           tblptru	equ	0xFF8
 10876                           tblptrh	equ	0xFF7
 10877                           tblptrl	equ	0xFF6
 10878                           tablat	equ	0xFF5
 10879                           prodh	equ	0xFF4
 10880                           prodl	equ	0xFF3
 10881                           intcon	equ	0xFF2
 10882                           intcon3	equ	0xFF0
 10883                           postinc0	equ	0xFEE
 10884                           fsr0h	equ	0xFEA
 10885                           fsr0l	equ	0xFE9
 10886                           wreg	equ	0xFE8
 10887                           plusw1	equ	0xFE3
 10888                           fsr1h	equ	0xFE2
 10889                           fsr1l	equ	0xFE1
 10890                           indf2	equ	0xFDF
 10891                           postinc2	equ	0xFDE
 10892                           postdec2	equ	0xFDD
 10893                           plusw2	equ	0xFDB
 10894                           fsr2h	equ	0xFDA
 10895                           fsr2l	equ	0xFD9
 10896                           status	equ	0xFD8
 10897                           
 10898 ;; *************** function _captureKeypad *****************
 10899 ;; Defined at:
 10900 ;;		line 13 in file "modules.c"
 10901 ;; Parameters:    Size  Location     Type
 10902 ;;		None
 10903 ;; Auto vars:     Size  Location     Type
 10904 ;;  keypress        1    2[COMRAM] unsigned char 
 10905 ;; Return value:  Size  Location     Type
 10906 ;;                  2    0[COMRAM] unsigned int 
 10907 ;; Registers used:
 10908 ;;		wreg, status,2, status,0
 10909 ;; Tracked objects:
 10910 ;;		On entry : 0/0
 10911 ;;		On exit  : 0/0
 10912 ;;		Unchanged: 0/0
 10913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10914 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10915 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10917 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10918 ;;Total ram usage:        3 bytes
 10919 ;; Hardware stack levels used:    1
 10920 ;; This function calls:
 10921 ;;		Nothing
 10922 ;; This function is called by:
 10923 ;;		_showInfo
 10924 ;; This function uses a non-reentrant model
 10925 ;;
 10926                           
 10927                           	psect	text63
 10928  0020FA                     __ptext63:
 10929                           	opt stack 0
 10930  0020FA                     _captureKeypad:
 10931                           	opt stack 23
 10932                           
 10933                           ;modules.c: 14: (INTCONbits.GIE = 0);
 10934                           
 10935                           ;incstack = 0
 10936  0020FA  9EF2               	bcf	intcon,7,c	;volatile
 10937  0020FC                     i2l214:
 10938  0020FC  A281               	btfss	3969,1,c	;volatile
 10939  0020FE  D7FE               	goto	i2l214
 10940                           
 10941                           ;modules.c: 16: unsigned char keypress = (PORTB & 0xF0) >> 4;
 10942  002100  3881               	swapf	3969,w,c	;volatile
 10943  002102  0B0F               	andlw	15
 10944  002104  0B0F               	andlw	15
 10945  002106  6E03               	movwf	captureKeypad@keypress,c
 10946  002108                     i2l217:
 10947  002108  B281               	btfsc	3969,1,c	;volatile
 10948  00210A  D7FE               	goto	i2l217
 10949                           
 10950                           ;modules.c: 18: INT1IF = 0;
 10951  00210C  90F0               	bcf	intcon3,0,c	;volatile
 10952                           
 10953                           ;modules.c: 19: (INTCONbits.GIE = 1);
 10954  00210E  8EF2               	bsf	intcon,7,c	;volatile
 10955                           
 10956                           ;modules.c: 20: return keypress;
 10957  002110  C003  F001         	movff	captureKeypad@keypress,?_captureKeypad
 10958  002114  6A02               	clrf	?_captureKeypad+1,c
 10959  002116  0012               	return		;funcret
 10960  002118                     __end_of_captureKeypad:
 10961                           	opt stack 0
 10962                           pclatu	equ	0xFFB
 10963                           pclath	equ	0xFFA
 10964                           tblptru	equ	0xFF8
 10965                           tblptrh	equ	0xFF7
 10966                           tblptrl	equ	0xFF6
 10967                           tablat	equ	0xFF5
 10968                           prodh	equ	0xFF4
 10969                           prodl	equ	0xFF3
 10970                           intcon	equ	0xFF2
 10971                           intcon3	equ	0xFF0
 10972                           postinc0	equ	0xFEE
 10973                           fsr0h	equ	0xFEA
 10974                           fsr0l	equ	0xFE9
 10975                           wreg	equ	0xFE8
 10976                           plusw1	equ	0xFE3
 10977                           fsr1h	equ	0xFE2
 10978                           fsr1l	equ	0xFE1
 10979                           indf2	equ	0xFDF
 10980                           postinc2	equ	0xFDE
 10981                           postdec2	equ	0xFDD
 10982                           plusw2	equ	0xFDB
 10983                           fsr2h	equ	0xFDA
 10984                           fsr2l	equ	0xFD9
 10985                           status	equ	0xFD8
 10986                           
 10987 ;; *************** function _ReadRun *****************
 10988 ;; Defined at:
 10989 ;;		line 66 in file "eeprom.c"
 10990 ;; Parameters:    Size  Location     Type
 10991 ;;  backruns        1    wreg     unsigned char 
 10992 ;;  sorted          2    2[COMRAM] PTR unsigned char 
 10993 ;;		 -> PermLog@sorted(4), 
 10994 ;;  time            2    4[COMRAM] PTR unsigned int 
 10995 ;;		 -> PermLog@time(2), 
 10996 ;; Auto vars:     Size  Location     Type
 10997 ;;  backruns        1   10[COMRAM] unsigned char 
 10998 ;;  add             2   11[COMRAM] unsigned int 
 10999 ;; Return value:  Size  Location     Type
 11000 ;;                  1    wreg      void 
 11001 ;; Registers used:
 11002 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11003 ;; Tracked objects:
 11004 ;;		On entry : 0/0
 11005 ;;		On exit  : 0/0
 11006 ;;		Unchanged: 0/0
 11007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11008 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11009 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11010 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11011 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11012 ;;Total ram usage:       11 bytes
 11013 ;; Hardware stack levels used:    1
 11014 ;; Hardware stack levels required when called:    1
 11015 ;; This function calls:
 11016 ;;		_back
 11017 ;;		i2_ReadEE
 11018 ;; This function is called by:
 11019 ;;		_PermLog
 11020 ;; This function uses a non-reentrant model
 11021 ;;
 11022                           
 11023                           	psect	text64
 11024  000EF0                     __ptext64:
 11025                           	opt stack 0
 11026  000EF0                     _ReadRun:
 11027                           	opt stack 23
 11028                           
 11029                           ;incstack = 0
 11030                           ;ReadRun@backruns stored from wreg
 11031  000EF0  6E0B               	movwf	ReadRun@backruns,c
 11032                           
 11033                           ;eeprom.c: 67: unsigned int add = back(backruns) * 5;
 11034  000EF2  500B               	movf	ReadRun@backruns,w,c
 11035  000EF4  EC8C  F010         	call	_back
 11036  000EF8  6E07               	movwf	??_ReadRun& (0+255),c
 11037  000EFA  5007               	movf	??_ReadRun,w,c
 11038  000EFC  0D05               	mullw	5
 11039  000EFE  CFF3 F00C          	movff	prodl,ReadRun@add
 11040  000F02  CFF4 F00D          	movff	prodh,ReadRun@add+1
 11041                           
 11042                           ;eeprom.c: 68: *time = ReadEE(add++ *8);
 11043  000F06  C00C  F007         	movff	ReadRun@add,??_ReadRun
 11044  000F0A  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 11045  000F0E  90D8               	bcf	status,0,c
 11046  000F10  3607               	rlcf	??_ReadRun,f,c
 11047  000F12  3608               	rlcf	??_ReadRun+1,f,c
 11048  000F14  90D8               	bcf	status,0,c
 11049  000F16  3607               	rlcf	??_ReadRun,f,c
 11050  000F18  3608               	rlcf	??_ReadRun+1,f,c
 11051  000F1A  90D8               	bcf	status,0,c
 11052  000F1C  3607               	rlcf	??_ReadRun,f,c
 11053  000F1E  3608               	rlcf	??_ReadRun+1,f,c
 11054  000F20  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 11055  000F24  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 11056  000F28  ECA6  F010         	call	i2_ReadEE	;wreg free
 11057  000F2C  6E09               	movwf	(??_ReadRun+2)& (0+255),c
 11058  000F2E  6A0A               	clrf	(??_ReadRun+3)& (0+255),c
 11059  000F30  C005  FFD9         	movff	ReadRun@time,fsr2l
 11060  000F34  C006  FFDA         	movff	ReadRun@time+1,fsr2h
 11061  000F38  C009  FFDE         	movff	??_ReadRun+2,postinc2
 11062  000F3C  C00A  FFDD         	movff	??_ReadRun+3,postdec2
 11063  000F40  4A0C               	infsnz	ReadRun@add,f,c
 11064  000F42  2A0D               	incf	ReadRun@add+1,f,c
 11065                           
 11066                           ;eeprom.c: 69: sorted[0] = ReadEE(add++ *8);
 11067  000F44  C00C  F007         	movff	ReadRun@add,??_ReadRun
 11068  000F48  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 11069  000F4C  90D8               	bcf	status,0,c
 11070  000F4E  3607               	rlcf	??_ReadRun,f,c
 11071  000F50  3608               	rlcf	??_ReadRun+1,f,c
 11072  000F52  90D8               	bcf	status,0,c
 11073  000F54  3607               	rlcf	??_ReadRun,f,c
 11074  000F56  3608               	rlcf	??_ReadRun+1,f,c
 11075  000F58  90D8               	bcf	status,0,c
 11076  000F5A  3607               	rlcf	??_ReadRun,f,c
 11077  000F5C  3608               	rlcf	??_ReadRun+1,f,c
 11078  000F5E  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 11079  000F62  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 11080  000F66  ECA6  F010         	call	i2_ReadEE	;wreg free
 11081  000F6A  C003  FFD9         	movff	ReadRun@sorted,fsr2l
 11082  000F6E  C004  FFDA         	movff	ReadRun@sorted+1,fsr2h
 11083  000F72  6EDF               	movwf	indf2,c
 11084  000F74  4A0C               	infsnz	ReadRun@add,f,c
 11085  000F76  2A0D               	incf	ReadRun@add+1,f,c
 11086                           
 11087                           ;eeprom.c: 70: sorted[1] = ReadEE(add++ *8);
 11088  000F78  EE20 F001          	lfsr	2,1
 11089  000F7C  5003               	movf	ReadRun@sorted,w,c
 11090  000F7E  26D9               	addwf	fsr2l,f,c
 11091  000F80  5004               	movf	ReadRun@sorted+1,w,c
 11092  000F82  22DA               	addwfc	fsr2h,f,c
 11093  000F84  C00C  F007         	movff	ReadRun@add,??_ReadRun
 11094  000F88  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 11095  000F8C  90D8               	bcf	status,0,c
 11096  000F8E  3607               	rlcf	??_ReadRun,f,c
 11097  000F90  3608               	rlcf	??_ReadRun+1,f,c
 11098  000F92  90D8               	bcf	status,0,c
 11099  000F94  3607               	rlcf	??_ReadRun,f,c
 11100  000F96  3608               	rlcf	??_ReadRun+1,f,c
 11101  000F98  90D8               	bcf	status,0,c
 11102  000F9A  3607               	rlcf	??_ReadRun,f,c
 11103  000F9C  3608               	rlcf	??_ReadRun+1,f,c
 11104  000F9E  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 11105  000FA2  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 11106  000FA6  ECA6  F010         	call	i2_ReadEE	;wreg free
 11107  000FAA  6EDF               	movwf	indf2,c
 11108  000FAC  4A0C               	infsnz	ReadRun@add,f,c
 11109  000FAE  2A0D               	incf	ReadRun@add+1,f,c
 11110                           
 11111                           ;eeprom.c: 71: sorted[2] = ReadEE(add++ *8);
 11112  000FB0  EE20 F002          	lfsr	2,2
 11113  000FB4  5003               	movf	ReadRun@sorted,w,c
 11114  000FB6  26D9               	addwf	fsr2l,f,c
 11115  000FB8  5004               	movf	ReadRun@sorted+1,w,c
 11116  000FBA  22DA               	addwfc	fsr2h,f,c
 11117  000FBC  C00C  F007         	movff	ReadRun@add,??_ReadRun
 11118  000FC0  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 11119  000FC4  90D8               	bcf	status,0,c
 11120  000FC6  3607               	rlcf	??_ReadRun,f,c
 11121  000FC8  3608               	rlcf	??_ReadRun+1,f,c
 11122  000FCA  90D8               	bcf	status,0,c
 11123  000FCC  3607               	rlcf	??_ReadRun,f,c
 11124  000FCE  3608               	rlcf	??_ReadRun+1,f,c
 11125  000FD0  90D8               	bcf	status,0,c
 11126  000FD2  3607               	rlcf	??_ReadRun,f,c
 11127  000FD4  3608               	rlcf	??_ReadRun+1,f,c
 11128  000FD6  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 11129  000FDA  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 11130  000FDE  ECA6  F010         	call	i2_ReadEE	;wreg free
 11131  000FE2  6EDF               	movwf	indf2,c
 11132  000FE4  4A0C               	infsnz	ReadRun@add,f,c
 11133  000FE6  2A0D               	incf	ReadRun@add+1,f,c
 11134                           
 11135                           ;eeprom.c: 72: sorted[3] = ReadEE(add++ *8);
 11136  000FE8  EE20 F003          	lfsr	2,3
 11137  000FEC  5003               	movf	ReadRun@sorted,w,c
 11138  000FEE  26D9               	addwf	fsr2l,f,c
 11139  000FF0  5004               	movf	ReadRun@sorted+1,w,c
 11140  000FF2  22DA               	addwfc	fsr2h,f,c
 11141  000FF4  C00C  F007         	movff	ReadRun@add,??_ReadRun
 11142  000FF8  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 11143  000FFC  90D8               	bcf	status,0,c
 11144  000FFE  3607               	rlcf	??_ReadRun,f,c
 11145  001000  3608               	rlcf	??_ReadRun+1,f,c
 11146  001002  90D8               	bcf	status,0,c
 11147  001004  3607               	rlcf	??_ReadRun,f,c
 11148  001006  3608               	rlcf	??_ReadRun+1,f,c
 11149  001008  90D8               	bcf	status,0,c
 11150  00100A  3607               	rlcf	??_ReadRun,f,c
 11151  00100C  3608               	rlcf	??_ReadRun+1,f,c
 11152  00100E  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 11153  001012  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 11154  001016  ECA6  F010         	call	i2_ReadEE	;wreg free
 11155  00101A  6EDF               	movwf	indf2,c
 11156  00101C  4A0C               	infsnz	ReadRun@add,f,c
 11157  00101E  2A0D               	incf	ReadRun@add+1,f,c
 11158  001020  0012               	return		;funcret
 11159  001022                     __end_of_ReadRun:
 11160                           	opt stack 0
 11161                           pclatu	equ	0xFFB
 11162                           pclath	equ	0xFFA
 11163                           tblptru	equ	0xFF8
 11164                           tblptrh	equ	0xFF7
 11165                           tblptrl	equ	0xFF6
 11166                           tablat	equ	0xFF5
 11167                           prodh	equ	0xFF4
 11168                           prodl	equ	0xFF3
 11169                           intcon	equ	0xFF2
 11170                           intcon3	equ	0xFF0
 11171                           postinc0	equ	0xFEE
 11172                           fsr0h	equ	0xFEA
 11173                           fsr0l	equ	0xFE9
 11174                           wreg	equ	0xFE8
 11175                           plusw1	equ	0xFE3
 11176                           fsr1h	equ	0xFE2
 11177                           fsr1l	equ	0xFE1
 11178                           indf2	equ	0xFDF
 11179                           postinc2	equ	0xFDE
 11180                           postdec2	equ	0xFDD
 11181                           plusw2	equ	0xFDB
 11182                           fsr2h	equ	0xFDA
 11183                           fsr2l	equ	0xFD9
 11184                           status	equ	0xFD8
 11185                           
 11186 ;; *************** function i2_ReadEE *****************
 11187 ;; Defined at:
 11188 ;;		line 16 in file "eeprom.c"
 11189 ;; Parameters:    Size  Location     Type
 11190 ;;  address         2    0[COMRAM] unsigned int 
 11191 ;; Auto vars:     Size  Location     Type
 11192 ;;		None
 11193 ;; Return value:  Size  Location     Type
 11194 ;;                  1    wreg      unsigned char 
 11195 ;; Registers used:
 11196 ;;		wreg, status,2
 11197 ;; Tracked objects:
 11198 ;;		On entry : 0/0
 11199 ;;		On exit  : 0/0
 11200 ;;		Unchanged: 0/0
 11201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11202 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11205 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11206 ;;Total ram usage:        2 bytes
 11207 ;; Hardware stack levels used:    1
 11208 ;; This function calls:
 11209 ;;		Nothing
 11210 ;; This function is called by:
 11211 ;;		_ReadRun
 11212 ;; This function uses a non-reentrant model
 11213 ;;
 11214                           
 11215                           	psect	text65
 11216  00214C                     __ptext65:
 11217                           	opt stack 0
 11218  00214C                     i2_ReadEE:
 11219                           	opt stack 23
 11220                           
 11221                           ;eeprom.c: 19: EEADRH = (unsigned char) (address >> 8);
 11222                           
 11223                           ;incstack = 0
 11224  00214C  5002               	movf	i2ReadEE@address+1,w,c
 11225  00214E  6EAA               	movwf	4010,c	;volatile
 11226                           
 11227                           ;eeprom.c: 20: EEADR = (unsigned char) address;
 11228  002150  C001  FFA9         	movff	i2ReadEE@address,4009	;volatile
 11229                           
 11230                           ;eeprom.c: 22: EECON1bits.EEPGD = 0;
 11231  002154  9EA6               	bcf	4006,7,c	;volatile
 11232                           
 11233                           ;eeprom.c: 23: EECON1bits.CFGS = 0;
 11234  002156  9CA6               	bcf	4006,6,c	;volatile
 11235                           
 11236                           ;eeprom.c: 24: EECON1bits.RD = 1;
 11237  002158  80A6               	bsf	4006,0,c	;volatile
 11238  00215A                     i2l421:
 11239  00215A  B0A6               	btfsc	4006,0,c	;volatile
 11240  00215C  D7FE               	goto	i2l421
 11241                           
 11242                           ;eeprom.c: 30: return EEDATA;
 11243  00215E  50A8               	movf	4008,w,c	;volatile
 11244  002160  0012               	return	
 11245  002162                     __end_ofi2_ReadEE:
 11246                           	opt stack 0
 11247                           pclatu	equ	0xFFB
 11248                           pclath	equ	0xFFA
 11249                           tblptru	equ	0xFF8
 11250                           tblptrh	equ	0xFF7
 11251                           tblptrl	equ	0xFF6
 11252                           tablat	equ	0xFF5
 11253                           prodh	equ	0xFF4
 11254                           prodl	equ	0xFF3
 11255                           intcon	equ	0xFF2
 11256                           intcon3	equ	0xFF0
 11257                           postinc0	equ	0xFEE
 11258                           fsr0h	equ	0xFEA
 11259                           fsr0l	equ	0xFE9
 11260                           wreg	equ	0xFE8
 11261                           plusw1	equ	0xFE3
 11262                           fsr1h	equ	0xFE2
 11263                           fsr1l	equ	0xFE1
 11264                           indf2	equ	0xFDF
 11265                           postinc2	equ	0xFDE
 11266                           postdec2	equ	0xFDD
 11267                           plusw2	equ	0xFDB
 11268                           fsr2h	equ	0xFDA
 11269                           fsr2l	equ	0xFD9
 11270                           status	equ	0xFD8
 11271                           
 11272 ;; *************** function _back *****************
 11273 ;; Defined at:
 11274 ;;		line 57 in file "eeprom.c"
 11275 ;; Parameters:    Size  Location     Type
 11276 ;;  runs            1    wreg     unsigned char 
 11277 ;; Auto vars:     Size  Location     Type
 11278 ;;  runs            1    0[COMRAM] unsigned char 
 11279 ;;  result          1    1[COMRAM] unsigned char 
 11280 ;; Return value:  Size  Location     Type
 11281 ;;                  1    wreg      unsigned char 
 11282 ;; Registers used:
 11283 ;;		wreg, status,2, status,0
 11284 ;; Tracked objects:
 11285 ;;		On entry : 0/0
 11286 ;;		On exit  : 0/0
 11287 ;;		Unchanged: 0/0
 11288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11290 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11292 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11293 ;;Total ram usage:        2 bytes
 11294 ;; Hardware stack levels used:    1
 11295 ;; This function calls:
 11296 ;;		Nothing
 11297 ;; This function is called by:
 11298 ;;		_ReadRun
 11299 ;; This function uses a non-reentrant model
 11300 ;;
 11301                           
 11302                           	psect	text66
 11303  002118                     __ptext66:
 11304                           	opt stack 0
 11305  002118                     _back:
 11306                           	opt stack 23
 11307                           
 11308                           ;incstack = 0
 11309                           ;back@runs stored from wreg
 11310  002118  6E01               	movwf	back@runs,c
 11311                           
 11312                           ;eeprom.c: 59: unsigned char result = Latest + 4 - runs;
 11313  00211A  5001               	movf	back@runs,w,c
 11314  00211C  0800               	sublw	0
 11315  00211E  0100               	movlb	0	; () banked
 11316  002120  25C6               	addwf	_Latest& (0+255),w,b
 11317  002122  0F04               	addlw	4
 11318  002124  6E02               	movwf	back@result,c
 11319                           
 11320                           ;eeprom.c: 60: if (result > 4) {
 11321  002126  0E04               	movlw	4
 11322  002128  6402               	cpfsgt	back@result,c
 11323  00212A  D002               	goto	i2l3316
 11324                           
 11325                           ; BSR set to: 0
 11326                           ;eeprom.c: 61: result -= 4;
 11327  00212C  0E04               	movlw	4
 11328  00212E  5E02               	subwf	back@result,f,c
 11329  002130                     i2l3316:
 11330                           
 11331                           ; BSR set to: 0
 11332                           ;eeprom.c: 62: }
 11333                           ;eeprom.c: 63: return result;
 11334  002130  5002               	movf	back@result,w,c
 11335  002132  0012               	return	
 11336  002134                     __end_of_back:
 11337                           	opt stack 0
 11338                           pclatu	equ	0xFFB
 11339                           pclath	equ	0xFFA
 11340                           tblptru	equ	0xFF8
 11341                           tblptrh	equ	0xFF7
 11342                           tblptrl	equ	0xFF6
 11343                           tablat	equ	0xFF5
 11344                           prodh	equ	0xFF4
 11345                           prodl	equ	0xFF3
 11346                           intcon	equ	0xFF2
 11347                           intcon3	equ	0xFF0
 11348                           postinc0	equ	0xFEE
 11349                           fsr0h	equ	0xFEA
 11350                           fsr0l	equ	0xFE9
 11351                           wreg	equ	0xFE8
 11352                           plusw1	equ	0xFE3
 11353                           fsr1h	equ	0xFE2
 11354                           fsr1l	equ	0xFE1
 11355                           indf2	equ	0xFDF
 11356                           postinc2	equ	0xFDE
 11357                           postdec2	equ	0xFDD
 11358                           plusw2	equ	0xFDB
 11359                           fsr2h	equ	0xFDA
 11360                           fsr2l	equ	0xFD9
 11361                           status	equ	0xFD8
 11362                           pclatu	equ	0xFFB
 11363                           pclath	equ	0xFFA
 11364                           tblptru	equ	0xFF8
 11365                           tblptrh	equ	0xFF7
 11366                           tblptrl	equ	0xFF6
 11367                           tablat	equ	0xFF5
 11368                           prodh	equ	0xFF4
 11369                           prodl	equ	0xFF3
 11370                           intcon	equ	0xFF2
 11371                           intcon3	equ	0xFF0
 11372                           postinc0	equ	0xFEE
 11373                           fsr0h	equ	0xFEA
 11374                           fsr0l	equ	0xFE9
 11375                           wreg	equ	0xFE8
 11376                           plusw1	equ	0xFE3
 11377                           fsr1h	equ	0xFE2
 11378                           fsr1l	equ	0xFE1
 11379                           indf2	equ	0xFDF
 11380                           postinc2	equ	0xFDE
 11381                           postdec2	equ	0xFDD
 11382                           plusw2	equ	0xFDB
 11383                           fsr2h	equ	0xFDA
 11384                           fsr2l	equ	0xFD9
 11385                           status	equ	0xFD8
 11386                           
 11387                           	psect	rparam
 11388  0000                     pclatu	equ	0xFFB
 11389                           pclath	equ	0xFFA
 11390                           tblptru	equ	0xFF8
 11391                           tblptrh	equ	0xFF7
 11392                           tblptrl	equ	0xFF6
 11393                           tablat	equ	0xFF5
 11394                           prodh	equ	0xFF4
 11395                           prodl	equ	0xFF3
 11396                           intcon	equ	0xFF2
 11397                           intcon3	equ	0xFF0
 11398                           postinc0	equ	0xFEE
 11399                           fsr0h	equ	0xFEA
 11400                           fsr0l	equ	0xFE9
 11401                           wreg	equ	0xFE8
 11402                           plusw1	equ	0xFE3
 11403                           fsr1h	equ	0xFE2
 11404                           fsr1l	equ	0xFE1
 11405                           indf2	equ	0xFDF
 11406                           postinc2	equ	0xFDE
 11407                           postdec2	equ	0xFDD
 11408                           plusw2	equ	0xFDB
 11409                           fsr2h	equ	0xFDA
 11410                           fsr2l	equ	0xFD9
 11411                           status	equ	0xFD8
 11412                           
 11413                           	psect	temp
 11414  00007D                     btemp:
 11415                           	opt stack 0
 11416  00007D                     	ds	1
 11417  0000                     int$flags	set	btemp
 11418                           pclatu	equ	0xFFB
 11419                           pclath	equ	0xFFA
 11420                           tblptru	equ	0xFF8
 11421                           tblptrh	equ	0xFF7
 11422                           tblptrl	equ	0xFF6
 11423                           tablat	equ	0xFF5
 11424                           prodh	equ	0xFF4
 11425                           prodl	equ	0xFF3
 11426                           intcon	equ	0xFF2
 11427                           intcon3	equ	0xFF0
 11428                           postinc0	equ	0xFEE
 11429                           fsr0h	equ	0xFEA
 11430                           fsr0l	equ	0xFE9
 11431                           wreg	equ	0xFE8
 11432                           plusw1	equ	0xFE3
 11433                           fsr1h	equ	0xFE2
 11434                           fsr1l	equ	0xFE1
 11435                           indf2	equ	0xFDF
 11436                           postinc2	equ	0xFDE
 11437                           postdec2	equ	0xFDD
 11438                           plusw2	equ	0xFDB
 11439                           fsr2h	equ	0xFDA
 11440                           fsr2l	equ	0xFD9
 11441                           status	equ	0xFD8


Data Sizes:
    Strings     536
    Constant    18
    Data        0
    BSS         38
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    115     124
    BANK0           128     42      71
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_51(CODE[17]), STR_50(CODE[17]), STR_49(CODE[4]), STR_48(CODE[4]), 
		 -> STR_47(CODE[4]), STR_46(CODE[4]), STR_45(CODE[4]), STR_44(CODE[4]), 
		 -> STR_43(CODE[4]), STR_42(CODE[3]), STR_41(CODE[4]), STR_40(CODE[4]), 
		 -> STR_39(CODE[4]), STR_38(CODE[4]), STR_37(CODE[18]), STR_36(CODE[20]), 
		 -> STR_35(CODE[16]), STR_34(CODE[21]), STR_33(CODE[16]), STR_32(CODE[21]), 
		 -> STR_31(CODE[16]), STR_30(CODE[20]), STR_29(CODE[16]), STR_28(CODE[21]), 
		 -> STR_27(CODE[23]), STR_26(CODE[24]), STR_25(CODE[21]), STR_24(CODE[24]), 
		 -> STR_23(CODE[24]), STR_22(CODE[25]), STR_21(CODE[19]), STR_20(CODE[25]), 
		 -> STR_19(CODE[25]), STR_18(CODE[27]), STR_17(CODE[19]), STR_16(CODE[25]), 
		 -> STR_15(CODE[3]), STR_14(CODE[3]), STR_13(CODE[3]), STR_12(CODE[5]), 
		 -> STR_11(CODE[3]), STR_10(CODE[3]), STR_9(CODE[3]), STR_8(CODE[4]), 
		 -> STR_7(CODE[3]), STR_6(CODE[3]), STR_5(CODE[3]), STR_4(CODE[4]), 
		 -> STR_3(CODE[5]), STR_2(CODE[24]), STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    WriteRun@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(COMRAM[4]), 

    ReadRun@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> PermLog@sorted(COMRAM[4]), 

    ReadRun@time	PTR unsigned int  size(2) Largest target is 2
		 -> PermLog@time(COMRAM[2]), 

    check9@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(COMRAM[4]), 

    checkC@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(COMRAM[4]), 

    checkAA@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(COMRAM[4]), 

    stopMoving$552	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_37(CODE[18]), STR_36(CODE[20]), 

    CCW90@port	PTR int  size(2) Largest target is 6
		 -> simulate@portCCW(COMRAM[6]), 

    CW90@port	PTR int  size(2) Largest target is 6
		 -> simulate@portCW(COMRAM[6]), 

    PWMC@port	PTR int  size(2) Largest target is 6
		 -> simulate@portCCW(COMRAM[6]), simulate@portCW(COMRAM[6]), 

    getTime@time	PTR unsigned char  size(2) Largest target is 7
		 -> time(COMRAM[7]), 

    showInfo@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> PermLog@sorted(COMRAM[4]), simulate@sorted(COMRAM[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _intrpt in COMRAM

    _intrpt->_simulate
    _simulate->_check9
    _simulate->_checkAA
    _simulate->_checkC
    i2_getTime->i2_I2C_Master_Read
    i2_getTime->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    _stopMoving->i2_printf
    _checkC->_checkV
    _checkAA->_checkV
    _check9->_checkV
    _checkV->___ftge
    ___ftmul->___ftpack
    ___ftge->___ftdiv
    ___ftdiv->___ftmul
    ___awtoft->___ftpack
    _WriteRun->i2___wmul
    _HexDecToDec2->i2___wmul
    _CW90->_PWMC
    _CCW90->_PWMC
    _PWMC->___awdiv
    _PermLog->_showInfo
    _showInfo->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_line1->i2_lcdInst
    i2_line0->i2_lcdInst
    i2_lcdInst->i2_lcdNibble
    _ReadRun->_back
    _ReadRun->i2_ReadEE

Critical Paths under _main in BANK0

    _main->_showRTC
    _showRTC->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _line1->_lcdInst
    _line0->_lcdInst
    _getTime->_I2C_Master_Read
    _getTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _initialize->_I2C_Master_Init
    _initLatest->_ReadEE
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _intrpt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _intrpt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _intrpt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _intrpt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _intrpt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _intrpt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _intrpt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _intrpt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _intrpt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _intrpt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _intrpt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _intrpt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _intrpt in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _intrpt in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _intrpt in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _intrpt in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   10636
                                             40 BANK0      2     2      0
                         _initialize
                              _line0
                             _printf
                            _showRTC
 ---------------------------------------------------------------------------------
 (1) _showRTC                                              2     2      0    5150
                                             38 BANK0      2     2      0
                            _getTime
                              _line0
                              _line1
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              30    22      8    4407
                                             12 BANK0     26    18      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     517
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _line1                                                0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _line0                                                0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _getTime                                              3     1      2     473
                                              3 BANK0      3     1      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2     214
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _initialize                                           1     1      0     944
                                             21 BANK0      1     1      0
                    _I2C_Master_Init
                            _initLCD
                         _initLatest
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _initLatest                                           0     0      0     298
                             _ReadEE
 ---------------------------------------------------------------------------------
 (3) _ReadEE                                               2     0      2     298
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _intrpt                                              17    17      0   66505
                                             98 COMRAM    17    17      0
                            _PermLog
                           _simulate
                         _stopMoving
 ---------------------------------------------------------------------------------
 (6) _simulate                                            38    38      0   54772
                                             60 COMRAM    38    38      0
                              _CCW90
                               _CW90
                       _HexDecToDec2
                           _WriteRun
                             _check9
                            _checkAA
                             _checkC
                           _showInfo
                         _stopMoving
                           i2___wmul
                          i2_getTime
                            i2_line0
                            i2_line1
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) i2_getTime                                            3     1      2     283
                                              3 COMRAM     3     1      2
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Write                                   2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _stopMoving                                           3     3      0    3420
                                             40 COMRAM     3     3      0
                            i2_line0
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _checkC                                               2     0      2   12160
                                             58 COMRAM     2     0      2
                             _checkV
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _checkAA                                              2     0      2   12160
                                             58 COMRAM     2     0      2
                             _checkV
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _check9                                               2     0      2   12160
                                             58 COMRAM     2     0      2
                             _checkV
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) _checkV                                              11     6      5    8835
                                             47 COMRAM    11     6      5
                                 _AD
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                          _fluctuate
 ---------------------------------------------------------------------------------
 (9) _fluctuate                                            8     4      4     518
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             15     9      6    2587
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftge                                               9     3      6     264
                                             38 COMRAM     9     3      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             15     9      6    2541
                                             23 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             4     1      3    2186
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2031
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) _AD                                                   5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (7) _WriteRun                                             8     4      4    1621
                                              6 COMRAM     8     4      4
                            _WriteEE
                           i2___wmul
 ---------------------------------------------------------------------------------
 (8) _WriteEE                                              3     0      3     834
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (7) _HexDecToDec2                                         9     7      2     711
                                              6 COMRAM     9     7      2
                           i2___wmul
 ---------------------------------------------------------------------------------
 (7) _CW90                                                 2     0      2    1757
                                             21 COMRAM     2     0      2
                               _PWMC
 ---------------------------------------------------------------------------------
 (7) _CCW90                                                2     0      2    1757
                                             21 COMRAM     2     0      2
                               _PWMC
 ---------------------------------------------------------------------------------
 (8) _PWMC                                                40    34      6    1671
                                              8 COMRAM    13     7      6
                            ___awdiv
 ---------------------------------------------------------------------------------
 (9) ___awdiv                                              8     4      4     428
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (6) _PermLog                                              9     9      0    8268
                                             53 COMRAM     9     9      0
                            _ReadRun
                           _showInfo
                            i2_line0
                            i2_line1
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _showInfo                                            13     9      4    4012
                                             40 COMRAM    13     9      4
                      _captureKeypad
                            i2_line0
                            i2_line1
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) i2_printf                                            32    22     10    3217
                                             12 COMRAM    28    18     10
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (8) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (8) i2___wmul                                             6     2      4     365
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (8) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (7) i2_line1                                              0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (7) i2_line0                                              0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (8) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (9) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _captureKeypad                                        3     1      2      23
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (7) _ReadRun                                             11     7      4     618
                                              2 COMRAM    11     7      4
                               _back
                           i2_ReadEE
 ---------------------------------------------------------------------------------
 (8) i2_ReadEE                                             2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _back                                                 2     2      0      68
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialize
     _I2C_Master_Init
       ___lldiv
     _initLCD
       _lcdInst
         _lcdNibble
     _initLatest
       _ReadEE
     _lcdInst
       _lcdNibble
   _line0
     _lcdInst
       _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
   _showRTC
     _getTime
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _line0
       _lcdInst
         _lcdNibble
     _line1
       _lcdInst
         _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble

 _intrpt (ROOT)
   _PermLog
     _ReadRun
       _back
       i2_ReadEE
     _showInfo
       _captureKeypad
       i2_line0
         i2_lcdInst
           i2_lcdNibble
       i2_line1
         i2_lcdInst
           i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_line0
       i2_lcdInst
         i2_lcdNibble
     i2_line1
       i2_lcdInst
         i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _simulate
     _CCW90
       _PWMC
         ___awdiv
     _CW90
       _PWMC
         ___awdiv
     _HexDecToDec2
       i2___wmul
     _WriteRun
       _WriteEE
       i2___wmul
     _check9
       _checkV
         _AD
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftge
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
         _fluctuate
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _checkAA
       _checkV
         _AD
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftge
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
         _fluctuate
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _checkC
       _checkV
         _AD
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftge
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
         _fluctuate
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _showInfo
       _captureKeypad
       i2_line0
         i2_lcdInst
           i2_lcdNibble
       i2_line1
         i2_lcdInst
           i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _stopMoving
       i2_line0
         i2_lcdInst
           i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2___wmul
     i2_getTime
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_line0
       i2_lcdInst
         i2_lcdNibble
     i2_line1
       i2_lcdInst
         i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _stopMoving
     i2_line0
       i2_lcdInst
         i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2A      47       5       55.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     73      7C       1       98.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C3      34        0.0%
DATA                 0      0      C3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Mar 13 15:35:35 2017

         i2_I2C_Master_Start 21FC           i2_I2C_Master_Write 21CA                           _AD 1FBC  
               ___awdiv@sign 0006          ___wmul@multiplicand 0082           i2___lwdiv@dividend 0001  
                __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                  __CFG_OSC$HS 000000  
                        ?_AD 0001                          l421 2144                          l505 02F6  
                        l373 2162                          l925 1B02                          l935 1C42  
                        l872 14A2                 __CFG_CPB$OFF 000000                          _PEN 007E2A  
               __CFG_CPD$OFF 000000                          _SEN 007E28          ?i2_I2C_Master_Start 0001  
        ?i2_I2C_Master_Write 0002                          wreg 000FE8                         ??_AD 0003  
               __CFG_LVP$OFF 000000                 ___ftdiv@cntr 0021                 ___ftdiv@sign 0026  
               __CFG_WDT$OFF 000000                         l3344 1426                         l3192 1F8A  
                       l3328 1FB2                         l3600 0020                         l3346 1436  
                       l3370 1AC4                         l3610 0050                         l3356 1490  
                       l3348 143C                         l3604 0034                         l3366 1AB2  
                       l3390 1C10                         l3710 0348                         l3702 02D0  
                       l3630 0124                         l3606 0046                         l3368 1ABE  
                       l3720 03B0                         l3704 02DC                         l3640 0162  
                       l3632 0130                         l3624 00F8                         l3616 0080  
                       l3378 1AF4                         l3394 1C34                         l3386 1BFE  
                       l3642 017A                         l3634 0136                         l3626 00FE  
                       l3650 019A                         l3722 03BC                         l4266 1DE8  
                       l3388 1C0A                         l3708 02FC                         l3716 0396  
                       l3636 014E                         l3652 01C6                         l3718 03A8  
                       l3670 021E                         l3646 0192                         l3672 0224  
                       l3656 01E2                         l3658 01E8                         l3860 1852  
                       l3692 02A4                         l3694 02AE                         l3686 025A  
                       l3856 1848                         l3688 026C                         l3866 1876  
                       _ADFM 007E07                         _ADON 007E10                         _CW90 20A0  
                       STR_1 FFD4                         STR_2 FEAE                         STR_3 FFCF  
                       STR_4 FFEE                         STR_5 FFF9                         STR_6 FFF6  
                       STR_7 FFFC                         STR_8 FFF2                         STR_9 FFF9  
                       u2000 1F88                         _LATA 000F89                         _LATB 000F8A  
                       _LATC 000F8B                         _LATD 000F8C                         _LATE 000F8D  
                       u3107 1E74                         u3117 1BA2                         u3127 1BAC  
                       u3137 1BD8                         u3057 1DCA                         u3147 1BE2  
                       u3067 190A                         u2605 1C7C                         u3077 19E0  
                       u3087 1A08                         u3097 1E40                         _RCEN 007E2B  
                       _PWMC 1220                checkAA@sorted 003B                         _back 2118  
                       _main 1DA4                 ___ftpack@arg 0001                         _mode 0074  
               ___ftpack@exp 0004                         _time 0076                         fsr0h 000FEA  
                       fsr1h 000FE2           i2___lwdiv@quotient 0005                         fsr2h 000FDA  
                       fsr0l 000FE9                         indf2 000FDF                         fsr1l 000FE1  
                       fsr2l 000FD9                         btemp 007D         ??i2_I2C_Master_Start 0002  
       ??i2_I2C_Master_Write 0004                         prodh 000FF4                         prodl 000FF3  
            ReadRun@backruns 000B                         start 000E              __end_ofi2_line0 2214  
            __end_ofi2_line1 220C                __CFG_IESO$OFF 000000         __end_of_HexDecToDec2 1E38  
               simulate@stop 003F                   ReadRun@add 000C              __end_ofi2_putch 21B4  
              __CFG_MCLRE$ON 000000                 ___ftmul@cntr 0016                 ___param_bank 000000  
               ___ftmul@sign 0017                   i2getTime@i 0006                  i2_lcdNibble 1CAC  
            __end_of_ReadRun 1022              __end_of_PermLog 1A94                        ?_CW90 0016  
           ?_I2C_Master_Init 008D             ?_I2C_Master_Read 0001                        ?_PWMC 0009  
           ?_I2C_Master_Wait 0001             ?_I2C_Master_Stop 0001                        ?_back 0001  
                      ?_main 0001                        _ACKEN 007E2C                        _ACKDT 007E2D  
                      _CCW90 20BE              __end_of___awdiv 199C                        _EEADR 000FA9  
                      STR_10 FFF6                        STR_11 FFFC                        STR_12 FFDD  
                      STR_20 FE34                        STR_13 FFF9                        STR_21 FF59  
                      STR_14 FFF6                        STR_30 FF45                        STR_22 FE02  
                      STR_31 FFC4                        STR_15 FFFC                        STR_23 FE96  
                      STR_40 FFE2                        STR_32 FF07                        STR_24 FE66  
                      STR_16 FE4D                        STR_33 FFC4                        STR_41 FFEA  
                      STR_17 FF6C                        STR_25 FF1C                        STR_42 FFF3  
                      STR_50 FFA2                        STR_34 FEDD                        STR_26 FE7E  
                      STR_18 FDE7                        STR_35 FFC4                        STR_43 FFE6  
                      STR_51 FFB3                        STR_27 FEC6                        STR_19 FE1B  
                      STR_44 FFE2                        STR_52 FF91                        STR_36 FF31  
                      STR_28 FEF2                        STR_45 FFEA                        STR_29 FFC4  
                      STR_37 FF7F                        STR_38 FFEE                        STR_46 FFDE  
                      STR_47 FFE6                        STR_39 FFE6                        STR_48 FFE2  
                      STR_49 FFEA              __end_of___ftdiv 13F8              __end_of_WriteEE 2058  
            __end_of___lldiv 14B4              __end_of___ftmul 1220              ___awdiv@divisor 0003  
                      _LATC0 007C58                        _LATC1 007C59                        _LATC2 007C5A  
                      _LATC5 007C5D              __end_of___lwdiv 1B0C              __end_of___lwmod 1C4C  
                      i2l114 0506                        i2l141 10B6                        i2l214 20FC  
                      i2l118 055A                        i2l134 10BA                        i2l144 10EE  
                      i2l217 2108                        i2l233 0BF0                        i2l315 0EEA  
                      i2l260 1258                        i2l421 215A                        i2l149 10EA  
                      i2l505 0968                        i2l427 204E                        i2l373 2176  
                      i2l278 1F62                        i2l296 1FCA                        i2l800 13C6  
                      i2l742 175A                        i2l925 1D4A                        i2l935 1EB6  
            ___awdiv@counter 0005              __end_of_checkAA 16CC                        _PORTB 000F81  
                      _TRISA 000F92                        _TRISB 000F93                        _TRISC 000F94  
                      _TRISD 000F95                        _TRISE 000F96                __CFG_PWRT$OFF 000000  
              __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000                simulate@F3110 00BA  
              simulate@F3106 00C2                simulate@F3108 00BE                simulate@F3117 00B0  
              simulate@F3119 00AA                __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000  
            __end_of_lcdInst 21A8               __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000  
            __end_of_getTime 1894               __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000  
             __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000  
              __CFG_WRTD$OFF 000000              __end_of_initLCD 1E7E               __CFG_EBTRB$OFF 000000  
                 i2isdigit@c 0003                ___awtoft@sign 000C              __end_of_dpowers FDDF  
           __end_ofi2_ReadEE 2162                        _line0 21DC                        _line1 21D4  
            __end_of_isdigit 1FBC                ___ftpack@sign 0005                        _putch 2188  
                      pclath 000FFA              __end_of_showRTC 1918                        tablat 000FF5  
           __end_ofi2___wmul 207E                        plusw1 000FE3                        plusw2 000FDB  
                      status 000FD8                simulate@start 0059               __CFG_PBADEN$ON 000000  
              i2printf@width 0026             __end_ofi2_printf 0A30           __size_ofi2___lwdiv 0052  
               __end_of_CW90 20BE           __size_ofi2___lwmod 0042                  ReadRun@time 0005  
               __end_of_PWMC 1312              __initialization 1FE6                 __end_of_back 2134  
         __size_ofi2_lcdInst 000C                 __end_of_main 1DF0           __size_ofi2_getTime 0076  
                 i2printf@ap 001B                   i2printf@cp 001D                ReadEE@address 0080  
                     ??_CW90 0018           __size_ofi2_isdigit 001E                       ??_PWMC 000F  
                     ??_back 0001                       ??_main 00A8                       ?_CCW90 0016  
              __activetblptr 000002                checkV@channel 0030            ?_I2C_Master_Start 0001  
          ?_I2C_Master_Write 0081                    CCW90@port 0016           ??_I2C_Master_Start 0081  
                     _ADCON0 000FC2                       _ADCON1 000FC1           ??_I2C_Master_Write 0083  
                     ?_line0 0001                       ?_line1 0001                       _ADRESH 000FC4  
                     _EEADRH 000FAA                       _ADRESL 000FC3                       _EEDATA 000FA8  
                     _EECON2 000FA7             ___awdiv@dividend 0001              i2lcdNibble@data 0002  
           __end_of___awtoft 1EF8                       ?_putch 0001             __end_of___ftpack 177A  
            i2lcdNibble@temp 0001                       _INT1IE 007F83                       _INT1IF 007F80  
           __end_of_WriteRun 0DA6                       _INT2IE 007F84                       _INT2IF 007F81  
                     _CVRCON 000FB5                       i2l3000 11BE                       i2l3010 11E6  
                     i2l3006 11D6                       i2l3040 195A                       i2l3032 193C  
                     i2l3130 1D20                       i2l3050 197A                       i2l3042 195E  
                     i2l3026 192C                       i2l3140 1D40                       i2l3132 1D24  
                     i2l3204 124A                       i2l4012 1B42                       i2l4100 0530  
                     i2l3150 1E94                       i2l3118 20F2                       i2l3038 1952  
                     i2l3054 1984                       i2l3070 1ED4                       i2l4022 1B66  
                     i2l3128 1D18                       i2l3152 1E98                       i2l3232 12E2  
                     i2l3224 12B2                       i2l3216 1282                       i2l4016 1B4A  
                     i2l4120 05A2                       i2l3058 1992                       i2l3242 130A  
                     i2l3234 12EC                       i2l3082 17DA                       i2l3250 0DE0  
                     i2l4122 05AE                       i2l4114 0584                       i2l4106 054E  
                     i2l3316 2130                       i2l3156 1EAC                       i2l3148 1E8C  
                     i2l3500 0896                       i2l3252 0DF0                       i2l4220 108C  
                     i2l4212 106E                       i2l3502 089A                       i2l3238 12FA  
                     i2l3078 17AA                       i2l3270 0E72                       i2l3254 0E00  
                     i2l3422 202C                       i2l4230 109E                       i2l3088 1806  
                     i2l3264 0E58                       i2l4064 043E                       i2l4240 10D2  
                     i2l3514 08C6                       i2l3530 08F6                       i2l3450 074A  
                     i2l3258 0E0A                       i2l4154 06B0                       i2l4234 10C2  
                     i2l3516 08CA                       i2l3532 0906                       i2l3460 077E  
                     i2l3444 072C                       i2l3276 0E7C                       i2l3268 0E62  
                     i2l4092 04FA                       i2l3470 07E0                       i2l3454 0750  
                     i2l4086 04DC                       i2l3552 096E                       i2l3560 09F8  
                     i2l3536 092A                       i2l3480 0818                       i2l3448 073C  
                     i2l2840 16F4                       i2l3554 09B2                       i2l3562 0A08  
                     i2l3546 094C                       i2l3538 0932                       i2l3490 084E  
                     i2l3474 07F6                       i2l2850 1750                       i2l2842 1712  
                     i2l2834 16DC                       i2l2930 133A                       i2l3564 0A0E  
                     i2l3548 0954                       i2l3484 082A                       i2l3476 0800  
                     i2l3468 07DC                       i2l2916 1D8C                       i2l4460 1602  
                     i2l4452 154E                    ??i2_line0 0004                       i2l3486 083C  
                     i2l3478 0806                       i2l3494 0854                       i2l3566 0A16  
                     i2l3902 0C66                       i2l2846 1728                       i2l2838 16EA  
                     i2l4462 1612                       i2l3822 15BE                       i2l3814 159A  
                     i2l3806 1576                       i2l3742 166E                       i2l3734 164A  
                     i2l3726 162A                       i2l4454 155E                    ??i2_line1 0004  
                     i2l3496 087C                       i2l2848 1746                       i2l2936 1362  
                     i2l4456 16B2                       i2l3834 15DA                       i2l4458 16C2  
                     i2l3754 168A                       i2l2956 13A0                       i2l3828 15D0  
                     i2l3748 1680                       i2l3950 0B14                       i2l2982 117C  
                     i2l3782 150A                       i2l3774 14E6                       i2l3766 14C2  
                     i2l3944 0A98                       i2l3936 0A60                       i2l2976 1154  
                     i2l3962 0B80                       i2l3938 0A6E                       i2l3794 1526  
                     i2l3956 0B48                       i2l2996 11AE                       i2l3788 151C  
                     i2l3974 0BF2                       i2l3968 0BB8                       i2l3976 0BFC  
                     i2l3888 1F48                       i2l3978 0C3A                       u172_41 113C  
                     u174_41 1164                       u167_41 1322                       u169_41 134A  
                  ??i2_putch 0003                       _SSPADD 000FC8                       _TRISC3 007CA3  
                     _TRISC4 007CA4                       _SSPBUF 000FC9                    AD@channel 0005  
              checkV@voltage 0039                    ??_ReadRun 0007                       _ReadEE 2134  
                  ??_PermLog 0036                       _Latest 00C6               __CFG_XINST$OFF 000000  
      __end_of_captureKeypad 2118                       ___ftge 177A                       ___wmul 1EF8  
                     _check9 1568                       _checkC 14B4                    ??___awdiv 0005  
                     _checkV 0DA6               __CFG_STVREN$ON 000000                    ??___ftdiv 001E  
                  ??_WriteEE 0004                    ??___lldiv 0088                    ??___ftmul 000F  
                  ??___lwdiv 0084                    ??___lwmod 008B                    ??_checkAA 003D  
                     clear_0 1FEC                       clear_1 1FF8             ___awdiv@quotient 0007  
                     _intrpt 0008                    ??_lcdInst 0082                       _printf 0012  
                  ??_getTime 0085        ___ftmul@f3_as_product 0013                  PermLog@time 003D  
                  ??_initLCD 0083                    ??_isdigit 0080             __end_of_showInfo 0C44  
          __end_ofi2___lwdiv 1D54                 __mediumconst FDD4            __end_ofi2___lwmod 1EC0  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
           __end_of_simulate 0722                    ??_showRTC 00A6            __end_ofi2_lcdInst 21C0  
          __end_ofi2_getTime 1B82               simulate@period 0061               simulate@portCW 0043  
      __size_of_HexDecToDec2 0048            __end_ofi2_isdigit 20FA               simulate@sorted 005D  
                 __accesstop 0080      __end_of__initialization 1FFE                   ___ftge@ff1 0027  
                 ___ftge@ff2 002A                __end_of_CCW90 20DC                ___rparam_used 000001  
                 ___ftdiv@f1 0018                   ___ftdiv@f2 001B                   ___ftdiv@f3 0022  
                 ___awtoft@c 0009                   ___ftmul@f1 0009                   ___ftmul@f2 000C  
         i2___lwmod@dividend 0008               __pcstackCOMRAM 0001                __end_of_line0 21E4  
              __end_of_line1 21DC                    ?i2_ReadEE 0001                __end_of_putch 2198  
                i2printf@idx 001F                  i2printf@len 0020                  i2printf@val 0023  
                 __end_of_AD 1FE6                      ??_CCW90 0018                    ?i2___wmul 0001  
         __size_of_lcdNibble 0068                  i2putch@data 0003                 _HexDecToDec2 1DF0  
          HexDecToDec2@digit 000E                    ?i2_printf 000D            HexDecToDec2@tenth 000C  
                    ??_line0 0083                      ??_line1 0083                      ??_putch 0082  
                 back@result 0002                   __pbssBANK0 00AA           __size_of_fluctuate 0050  
                    ?_ReadEE 0080                 stopMoving@em 002B                      ?___ftge 0027  
               WriteRun@time 0009                 ?i2_lcdNibble 0001                      ?___wmul 0080  
                    ?_check9 003B                      ?_checkC 003B                      ?_checkV 0030  
                 ??i2_ReadEE 0003                      ?_intrpt 0001                    ?___awtoft 0009  
                  ?___ftpack 0001                      ?_printf 008C                    ?_WriteRun 0007  
                 ??i2___wmul 0005               WriteRun@sorted 0007                   ??i2_printf 0017  
                    _SSPCON1 000FC6                      _SSPCON2 000FC5                      _SSPSTAT 000FC7  
             checkV@voltage2 0035               checkV@voltage3 0037                      i2_line0 220C  
                    i2_line1 2204                      i2_putch 21A8               _stopMoving$552 0029  
__size_ofi2_I2C_Master_Start 0008            __end_of_lcdNibble 1BEA                      _ReadRun 0EF0  
__size_ofi2_I2C_Master_Write 000A                      _PermLog 1A18                      __Hparam 0000  
            __size_of_ReadEE 0018                      __Lparam 0000                   _initLatest 207E  
                  ?_showInfo 0029              __size_of___ftge 0090                    ?_simulate 0001  
                    ___awdiv 1918                      ___ftdiv 1312                      _WriteEE 2032  
                    ___lldiv 13F8              __size_of___wmul 0036                      ___ftmul 112C  
            __size_of_check9 00B4              __size_of_checkC 00B4              __size_of_checkV 014A  
                    ___lwdiv 1A94                      ___lwmod 1BEA                      _checkAA 161C  
                    __pcinit 1FE6                   ??___awtoft 000C                   ??___ftpack 0006  
                    __ramtop 1000                   _initialize 199C              __size_of_intrpt 1124  
                    _lcdInst 2198                   ??_WriteRun 000B                      __ptext0 1DA4  
                    __ptext1 1894                      __ptext2 0012                      __ptext3 2188  
                    _getTime 180A                      __ptext4 1F92                      __ptext5 1EF8  
                    __ptext6 1BEA                      __ptext7 1A94                      __ptext8 21D4  
                    __ptext9 21DC              __size_of_printf 03C8                 PermLog@F3084 00B6  
          __end_of_fluctuate 1DA4                      _initLCD 1E38            __end_of_hexpowers FDE7  
                    _dpowers FDD5                      _isdigit 1F92     __size_of_I2C_Master_Init 0060  
   __size_of_I2C_Master_Read 002E                      _showRTC 1894     __size_of_I2C_Master_Wait 0014  
   __size_of_I2C_Master_Stop 0008               __pintcode_body 1022         end_of_initialization 1FFE  
              __Lmediumconst FDD4                      int_func 1022          i2___wmul@multiplier 0001  
  __size_of_I2C_Master_Start 0008    __size_of_I2C_Master_Write 000A              ___lldiv@divisor 0084  
            ___lldiv@counter 008C                    _PWMC$1400 0013                    _PWMC$1398 0011  
                  _PWMC$1399 0012                   ??_showInfo 002D                      printf@c 00A5  
                    printf@f 008C             I2C_Master_Init@c 008D             I2C_Master_Read@a 0081  
                    postdec2 000FDD                   ??_simulate 003D                      postinc0 000FEE  
                    postinc2 000FDE                    _PORTBbits 000F81                  PWMC@widthus 0009  
            simulate@portCCW 0049            i2_I2C_Master_Read 200C            i2_I2C_Master_Wait 2176  
          i2_I2C_Master_Stop 21F4            i2___lwdiv@divisor 0003                    i2___lwdiv 1D02  
                  i2___lwmod 1E7E            i2___lwdiv@counter 0007           ?i2_I2C_Master_Read 0001  
         ?i2_I2C_Master_Wait 0001           ?i2_I2C_Master_Stop 0001                    i2_lcdInst 21B4  
                  i2_getTime 1B0C                  ___ftdiv@exp 0025                  printf@width 00A3  
            PermLog@backruns 003C                   _stopMoving 1F2E          ??i2_I2C_Master_Read 0002  
                  i2_isdigit 20DC          ??i2_I2C_Master_Wait 0001          ??i2_I2C_Master_Stop 0002  
              ReadRun@sorted 0003                  simulate@now 0055                 check9@sorted 003B  
                ___ftmul@exp 0012               __end_of_ReadEE 214C                  ?_initLatest 0001  
             __end_of___ftge 180A               __end_of___wmul 1F2E               __end_of_check9 161C  
             __end_of_checkC 1568               __end_of_checkV 0EF0         __size_ofi2_lcdNibble 0056  
                ?_initialize 0001                i2lcdInst@data 0003                 checkC@sorted 003B  
          __size_ofi2_ReadEE 0016               __end_of_intrpt 112C             i2___wmul@product 0005  
             __end_of_printf 03DA                 i2printf@flag 0025              i2ReadEE@address 0001  
  __end_ofi2_I2C_Master_Read 2032    __end_ofi2_I2C_Master_Wait 2188                 i2printf@prec 0022  
        start_initialization 1FE6    __end_ofi2_I2C_Master_Stop 21FC            __size_ofi2___wmul 0026  
                  i2printf@c 0028                    i2printf@f 000D       __size_of_captureKeypad 001E  
      i2I2C_Master_Read@temp 0003                i2getTime@time 0004                   ?i2___lwdiv 0001  
                 ?i2___lwmod 0008            __size_ofi2_printf 030E                   fluctuate@a 0001  
                 fluctuate@b 0003                   fluctuate@i 0007            ??_I2C_Master_Init 0091  
          ??_I2C_Master_Read 0081            ??_I2C_Master_Wait 0080                   ?i2_lcdInst 0001  
          ??_I2C_Master_Stop 0081                   ?i2_getTime 0004                   ?i2_isdigit 0001  
                   ??_ReadEE 0082                     CW90@port 0016                     ??___ftge 002D  
                   ??___wmul 0084                     ??_check9 003D                     ??_checkC 003D  
                   ??_checkV 0035             __CFG_LPT1OSC$OFF 000000                     ??_intrpt 0063  
                   ??_printf 0094                  WriteEE@data 0003            __size_of___awtoft 0038  
          __size_of___ftpack 00AE            __size_of_WriteRun 0162                  __pbssCOMRAM 0074  
              __pcstackBANK0 0080            i2___lwmod@divisor 000A            i2___lwmod@counter 000C  
               _isdigit$1055 0081          __size_of_initLatest 0022                     ?i2_line0 0001  
                   ?i2_line1 0001                     ?i2_putch 0001               intrpt@keypress 0073  
        __size_of_initialize 007C                  ?_stopMoving 0001             _I2C_Master_Start 21EC  
                   ?_ReadRun 0003          i2I2C_Master_Write@d 0002             _I2C_Master_Write 21C0  
                   ?_PermLog 0001             ___lwdiv@dividend 0080            __CFG_CCP2MX$PORTC 000000  
                WriteRun@add 000D                _captureKeypad 20FA                    __pintcode 0008  
              __pmediumconst FDD4                    _lcdNibble 1B82                     ?___awdiv 0001  
                   ?___ftdiv 0018                     ?_WriteEE 0001                     ?___lldiv 0080  
                   ?___ftmul 0009                     ?___lwdiv 0080                     ?___lwmod 0087  
          __size_of_showInfo 0214                     ?_checkAA 003B            __size_of_simulate 0348  
                   ?_lcdInst 0001                     ?_getTime 0083                     PWMC@port 000D  
             __size_of_CCW90 001E                     ?_initLCD 0001                     ?_isdigit 0001  
 __size_ofi2_I2C_Master_Read 0026   __size_ofi2_I2C_Master_Wait 0012   __size_ofi2_I2C_Master_Stop 0008  
                  checkV@max 0032                    _fluctuate 1D54                     ?_showRTC 0001  
                  _hexpowers FDDF             ___lwdiv@quotient 0084               __size_of_line0 0008  
             __size_of_line1 0008                  ??i2___lwdiv 0005                  ??i2___lwmod 000C  
             __size_of_putch 0010                  __size_of_AD 002A   __end_ofi2_I2C_Master_Start 2204  
 __end_ofi2_I2C_Master_Write 21D4                  ??i2_lcdInst 0003                  ??i2_getTime 0006  
             ___wmul@product 0084                     _LATDbits 000F8C                  ??i2_isdigit 0001  
                   i2u211_45 12EA                     i2u211_46 12EC                     i2u205_45 128A  
                   i2u205_46 128C                     i2u208_45 12BA                     i2u208_46 12BC  
                   i2u320_47 1CF0                     i2u321_47 1CFA                     i2u163_40 1DA0  
                   i2u163_41 1D9C                     i2u315_47 06F6                     i2u316_47 12FC  
                   i2u237_40 202A                     i2u317_47 1A70                     i2u318_47 1CC4  
                   i2u319_47 1CCE                     i2u291_41 0494               ?_captureKeypad 0001  
                   _PIR2bits 000FA1                     i2u292_41 04A6                     i2u284_45 1DFC  
                   i2u287_40 0C5A             __CFG_WDTPS$32768 000000                   PWMC@cycles 000B  
                 ?_lcdNibble 0001                     i2_ReadEE 214C                   _ADCON0bits 000FC2  
          ___wmul@multiplier 0080                     i2___wmul 2058                lcdNibble@data 0081  
                 printf@flag 00A2                lcdNibble@temp 0080                   printf@prec 009F  
                 simulate@AA 004F          __size_of_stopMoving 0036                   simulate@V9 0053  
                 ?_fluctuate 0001                     i2_printf 0722        captureKeypad@keypress 0003  
        I2C_Master_Read@temp 0082             __size_ofi2_line0 0008             __size_ofi2_line1 0008  
           __size_ofi2_putch 000C                   _EECON1bits 000FA6               showInfo@sorted 002B  
                   __Hrparam 0000             __size_of_ReadRun 0132                     __Lrparam 0000  
           __size_of_PermLog 007C                 ??_initLatest 0082           __CFG_BOREN$SBORDIS 000000  
           __size_of___awdiv 0084             __size_of___ftdiv 00E6        i2___wmul@multiplicand 0003  
           __size_of_WriteEE 0026             __size_of___lldiv 00BC             __size_of___ftmul 00F4  
           __size_of___lwdiv 0078             __size_of___lwmod 0062                 ??_initialize 0095  
                   ___awtoft 1EC0                     ___ftpack 16CC             __size_of_checkAA 00B0  
                   _WriteRun 0C44           i2I2C_Master_Read@a 0002             __size_of_lcdInst 0010  
           __size_of_getTime 008A              HexDecToDec2@hex 0007              _I2C_Master_Init 1C4C  
            _I2C_Master_Read 1F64             __size_of_initLCD 0046                     back@runs 0001  
              ?_HexDecToDec2 0007              _I2C_Master_Wait 2162              _I2C_Master_Stop 21E4  
           __size_of_isdigit 002A              ___lwdiv@divisor 0082              ___lwdiv@counter 0086  
                   __ptext10 180A                     __ptext11 21C0                     __ptext20 2198  
                   __ptext12 21E4                     __ptext21 1B82                     __ptext13 21EC  
                   __ptext30 200C                     __ptext22 1C4C                     __ptext14 1F64  
                   __ptext31 2176                     __ptext23 13F8                     __ptext15 2162  
                   __ptext40 1312                     __ptext32 1F2E                     __ptext16 199C  
                   __ptext41 1EC0                     __ptext33 14B4                     __ptext25 03DA  
                   __ptext17 207E                     __ptext50 1918                     __ptext42 16CC  
                   __ptext34 161C                     __ptext26 1B0C                     __ptext18 2134  
                   __ptext51 1A18                     __ptext43 1FBC                     __ptext35 1568  
                   __ptext27 21CA                     __ptext19 1E38                     __ptext60 220C  
                   __ptext52 0A30                     __ptext44 0C44                     __ptext36 0DA6  
                   __ptext28 21F4                     __ptext61 21B4                     __ptext53 0722  
                   __ptext45 2032                     __ptext37 1D54                     __ptext29 21FC  
                   __ptext62 1CAC                     __ptext54 21A8                     __ptext46 1DF0  
                   __ptext38 112C                     __ptext63 20FA                     __ptext55 20DC  
                   __ptext47 20A0                     __ptext39 177A                     __ptext64 0EF0  
                   __ptext56 2058                     __ptext48 20BE                     __ptext65 214C  
                   __ptext57 1E7E                     __ptext49 1220                     __ptext66 2118  
                   __ptext58 1D02                     __ptext59 2204             __size_of_showRTC 0084  
         __end_of_initLatest 20A0                __size_of_CW90 001E                __size_of_PWMC 00F2  
             i2_isdigit$1055 0002                __size_of_back 001C                __size_of_main 004C  
         __end_of_initialize 1A18              ??_captureKeypad 0003                     _showInfo 0A30  
              ??i2_lcdNibble 0001                  ??_lcdNibble 0080                     getTime@i 0085  
                   _simulate 03DA                     int$flags 007D                    printf@idx 009C  
                  printf@len 009D                    printf@val 00A0                    simulate@C 0051  
             ??_HexDecToDec2 0009                    putch@data 0082     __end_of_I2C_Master_Start 21F4  
   __end_of_I2C_Master_Write 21CA                   _INTCONbits 000FF2                PermLog@sorted 0038  
                ??_fluctuate 0005                PWMC@countdown 0014                     isdigit@c 0082  
              _simulate$1504 0041                     intlevel2 0000             ___lwmod@dividend 0087  
           ___lldiv@dividend 0080                 ??_stopMoving 0029                     printf@ap 0098  
                   printf@cp 009A      __end_of_I2C_Master_Init 1CAC      __end_of_I2C_Master_Read 1F92  
    __end_of_I2C_Master_Wait 2176      __end_of_I2C_Master_Stop 21EC                  lcdInst@data 0082  
               showInfo@time 0029                 showInfo@stop 0034                 showInfo@type 0032  
        __end_ofi2_lcdNibble 1D02             ___lldiv@quotient 0088            I2C_Master_Write@d 0081  
            ___lwmod@divisor 0089              ___lwmod@counter 008B           __end_of_stopMoving 1F64  
             WriteEE@address 0001                  getTime@time 0083  

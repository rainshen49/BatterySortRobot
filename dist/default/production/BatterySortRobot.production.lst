

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Fri Feb 10 17:46:16 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    45                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    46  0000                     
    47                           ; Version 1.41
    48                           ; Generated 25/01/2017 GMT
    49                           ; 
    50                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC18F4620 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     
    82                           	psect	idataBANK1
    83  001F8A                     __pidataBANK1:
    84                           	opt stack 0
    85                           
    86                           ;initializer for println@F3053
    87  001F8A  20                 	db	32
    88  001F8B  20                 	db	32
    89  001F8C  20                 	db	32
    90  001F8D  20                 	db	32
    91  001F8E  20                 	db	32
    92  001F8F  20                 	db	32
    93  001F90  20                 	db	32
    94  001F91  20                 	db	32
    95  001F92  20                 	db	32
    96  001F93  20                 	db	32
    97  001F94  20                 	db	32
    98  001F95  20                 	db	32
    99  001F96  20                 	db	32
   100  001F97  20                 	db	32
   101  001F98  20                 	db	32
   102  001F99  20                 	db	32
   103  001F9A  20                 	db	32
   104  001F9B  20                 	db	32
   105  001F9C  20                 	db	32
   106  001F9D  20                 	db	32
   107  001F9E  20                 	db	32
   108  001F9F  20                 	db	32
   109  001FA0  20                 	db	32
   110  001FA1  20                 	db	32
   111  001FA2  20                 	db	32
   112  001FA3  20                 	db	32
   113  001FA4  20                 	db	32
   114  001FA5  20                 	db	32
   115  001FA6  20                 	db	32
   116  001FA7  20                 	db	32
   117  001FA8  20                 	db	32
   118  001FA9  20                 	db	32
   119  001FAA  20                 	db	32
   120  001FAB  20                 	db	32
   121  001FAC  20                 	db	32
   122  001FAD  20                 	db	32
   123  001FAE  20                 	db	32
   124  001FAF  20                 	db	32
   125  001FB0  20                 	db	32
   126  001FB1  20                 	db	32
   127  001FB2  00                 	db	0
   128                           
   129                           	psect	smallconst
   130  001000                     __psmallconst:
   131                           	opt stack 0
   132  001000  00                 	db	0
   133  001001                     _dpowers:
   134                           	opt stack 0
   135  001001  0001               	dw	1
   136  001003  000A               	dw	10
   137  001005  0064               	dw	100
   138  001007  03E8               	dw	1000
   139  001009  2710               	dw	10000
   140  00100B                     __end_of_dpowers:
   141                           	opt stack 0
   142  0000                     _PORTB	set	3969
   143  0000                     _PORTBbits	set	3969
   144  0000                     _ADRESL	set	4035
   145  0000                     _ADRESH	set	4036
   146  0000                     _ADCON0bits	set	4034
   147  0000                     _LATDbits	set	3980
   148  0000                     _INTCONbits	set	4082
   149  0000                     _CVRCON	set	4021
   150  0000                     _ADCON1	set	4033
   151  0000                     _ADCON0	set	4034
   152  0000                     _LATE	set	3981
   153  0000                     _LATD	set	3980
   154  0000                     _LATC	set	3979
   155  0000                     _LATB	set	3978
   156  0000                     _LATA	set	3977
   157  0000                     _TRISE	set	3990
   158  0000                     _TRISD	set	3989
   159  0000                     _TRISC	set	3988
   160  0000                     _TRISB	set	3987
   161  0000                     _TRISA	set	3986
   162  0000                     _INT1IF	set	32640
   163  0000                     _ADON	set	32272
   164  0000                     _INT1IE	set	32643
   165  0000                     _ADFM	set	32263
   166  00100B                     STR_4:
   167  00100B  53                 	db	83	;'S'
   168  00100C  6F                 	db	111	;'o'
   169  00100D  72                 	db	114	;'r'
   170  00100E  74                 	db	116	;'t'
   171  00100F  69                 	db	105	;'i'
   172  001010  6E                 	db	110	;'n'
   173  001011  67                 	db	103	;'g'
   174  001012  20                 	db	32
   175  001013  43                 	db	67	;'C'
   176  001014  6F                 	db	111	;'o'
   177  001015  6D                 	db	109	;'m'
   178  001016  70                 	db	112	;'p'
   179  001017  6C                 	db	108	;'l'
   180  001018  65                 	db	101	;'e'
   181  001019  74                 	db	116	;'t'
   182  00101A  65                 	db	101	;'e'
   183  00101B  00                 	db	0
   184  00101C                     STR_6:
   185  00101C  50                 	db	80	;'P'
   186  00101D  72                 	db	114	;'r'
   187  00101E  65                 	db	101	;'e'
   188  00101F  73                 	db	115	;'s'
   189  001020  73                 	db	115	;'s'
   190  001021  20                 	db	32
   191  001022  61                 	db	97	;'a'
   192  001023  20                 	db	32
   193  001024  6E                 	db	110	;'n'
   194  001025  75                 	db	117	;'u'
   195  001026  6D                 	db	109	;'m'
   196  001027  62                 	db	98	;'b'
   197  001028  65                 	db	101	;'e'
   198  001029  72                 	db	114	;'r'
   199  00102A  00                 	db	0
   200  00102B                     STR_8:
   201  00102B  54                 	db	84	;'T'
   202  00102C  69                 	db	105	;'i'
   203  00102D  6D                 	db	109	;'m'
   204  00102E  65                 	db	101	;'e'
   205  00102F  20                 	db	32
   206  001030  45                 	db	69	;'E'
   207  001031  6C                 	db	108	;'l'
   208  001032  61                 	db	97	;'a'
   209  001033  70                 	db	112	;'p'
   210  001034  73                 	db	115	;'s'
   211  001035  65                 	db	101	;'e'
   212  001036  64                 	db	100	;'d'
   213  001037  3A                 	db	58	;':'
   214  001038  00                 	db	0
   215  001039                     STR_10:
   216  001039  54                 	db	84	;'T'
   217  00103A  6F                 	db	111	;'o'
   218  00103B  74                 	db	116	;'t'
   219  00103C  61                 	db	97	;'a'
   220  00103D  6C                 	db	108	;'l'
   221  00103E  20                 	db	32
   222  00103F  53                 	db	83	;'S'
   223  001040  6F                 	db	111	;'o'
   224  001041  72                 	db	114	;'r'
   225  001042  74                 	db	116	;'t'
   226  001043  65                 	db	101	;'e'
   227  001044  64                 	db	100	;'d'
   228  001045  3A                 	db	58	;':'
   229  001046  00                 	db	0
   230  001047                     STR_7:
   231  001047  46                 	db	70	;'F'
   232  001048  6F                 	db	111	;'o'
   233  001049  72                 	db	114	;'r'
   234  00104A  20                 	db	32
   235  00104B  6D                 	db	109	;'m'
   236  00104C  6F                 	db	111	;'o'
   237  00104D  72                 	db	114	;'r'
   238  00104E  65                 	db	101	;'e'
   239  00104F  20                 	db	32
   240  001050  69                 	db	105	;'i'
   241  001051  6E                 	db	110	;'n'
   242  001052  66                 	db	102	;'f'
   243  001053  6F                 	db	111	;'o'
   244  001054  00                 	db	0
   245  001055                     STR_11:
   246  001055  25                 	db	37
   247  001056  64                 	db	100	;'d'
   248  001057  20                 	db	32
   249  001058  62                 	db	98	;'b'
   250  001059  61                 	db	97	;'a'
   251  00105A  74                 	db	116	;'t'
   252  00105B  74                 	db	116	;'t'
   253  00105C  65                 	db	101	;'e'
   254  00105D  72                 	db	114	;'r'
   255  00105E  69                 	db	105	;'i'
   256  00105F  65                 	db	101	;'e'
   257  001060  73                 	db	115	;'s'
   258  001061  00                 	db	0
   259  001062                     STR_18:
   260  001062  55                 	db	85	;'U'
   261  001063  6E                 	db	110	;'n'
   262  001064  63                 	db	99	;'c'
   263  001065  68                 	db	104	;'h'
   264  001066  61                 	db	97	;'a'
   265  001067  72                 	db	114	;'r'
   266  001068  67                 	db	103	;'g'
   267  001069  65                 	db	101	;'e'
   268  00106A  64                 	db	100	;'d'
   269  00106B  3A                 	db	58	;':'
   270  00106C  00                 	db	0
   271  00106D                     STR_12:
   272  00106D  41                 	db	65	;'A'
   273  00106E  41                 	db	65	;'A'
   274  00106F  20                 	db	32
   275  001070  53                 	db	83	;'S'
   276  001071  6F                 	db	111	;'o'
   277  001072  72                 	db	114	;'r'
   278  001073  74                 	db	116	;'t'
   279  001074  65                 	db	101	;'e'
   280  001075  64                 	db	100	;'d'
   281  001076  3A                 	db	58	;':'
   282  001077  00                 	db	0
   283  001078                     STR_16:
   284  001078  39                 	db	57	;'9'
   285  001079  56                 	db	86	;'V'
   286  00107A  20                 	db	32
   287  00107B  53                 	db	83	;'S'
   288  00107C  6F                 	db	111	;'o'
   289  00107D  72                 	db	114	;'r'
   290  00107E  74                 	db	116	;'t'
   291  00107F  65                 	db	101	;'e'
   292  001080  64                 	db	100	;'d'
   293  001081  3A                 	db	58	;':'
   294  001082  00                 	db	0
   295  001083                     STR_9:
   296  001083  25                 	db	37
   297  001084  64                 	db	100	;'d'
   298  001085  20                 	db	32
   299  001086  73                 	db	115	;'s'
   300  001087  65                 	db	101	;'e'
   301  001088  63                 	db	99	;'c'
   302  001089  6F                 	db	111	;'o'
   303  00108A  6E                 	db	110	;'n'
   304  00108B  64                 	db	100	;'d'
   305  00108C  73                 	db	115	;'s'
   306  00108D  00                 	db	0
   307  00108E                     STR_1:
   308  00108E  53                 	db	83	;'S'
   309  00108F  6F                 	db	111	;'o'
   310  001090  72                 	db	114	;'r'
   311  001091  74                 	db	116	;'t'
   312  001092  69                 	db	105	;'i'
   313  001093  6E                 	db	110	;'n'
   314  001094  67                 	db	103	;'g'
   315  001095  2E                 	db	46
   316  001096  2E                 	db	46
   317  001097  2E                 	db	46
   318  001098  00                 	db	0
   319  001099                     STR_14:
   320  001099  43                 	db	67	;'C'
   321  00109A  20                 	db	32
   322  00109B  53                 	db	83	;'S'
   323  00109C  6F                 	db	111	;'o'
   324  00109D  72                 	db	114	;'r'
   325  00109E  74                 	db	116	;'t'
   326  00109F  65                 	db	101	;'e'
   327  0010A0  64                 	db	100	;'d'
   328  0010A1  3A                 	db	58	;':'
   329  0010A2  00                 	db	0
   330  0010A3                     STR_20:
   331  0010A3  45                 	db	69	;'E'
   332  0010A4  6D                 	db	109	;'m'
   333  0010A5  65                 	db	101	;'e'
   334  0010A6  72                 	db	114	;'r'
   335  0010A7  67                 	db	103	;'g'
   336  0010A8  65                 	db	101	;'e'
   337  0010A9  6E                 	db	110	;'n'
   338  0010AA  63                 	db	99	;'c'
   339  0010AB  79                 	db	121	;'y'
   340  0010AC  00                 	db	0
   341  0010AD                     STR_2:
   342  0010AD  57                 	db	87	;'W'
   343  0010AE  65                 	db	101	;'e'
   344  0010AF  6C                 	db	108	;'l'
   345  0010B0  63                 	db	99	;'c'
   346  0010B1  6F                 	db	111	;'o'
   347  0010B2  6D                 	db	109	;'m'
   348  0010B3  65                 	db	101	;'e'
   349  0010B4  21                 	db	33
   350  0010B5  00                 	db	0
   351  0010B6                     STR_21:
   352  0010B6  28                 	db	40
   353  0010B7  6E                 	db	110	;'n'
   354  0010B8  75                 	db	117	;'u'
   355  0010B9  6C                 	db	108	;'l'
   356  0010BA  6C                 	db	108	;'l'
   357  0010BB  29                 	db	41
   358  0010BC  00                 	db	0
   359  0010BD                     STR_13:
   360  0010BD  25                 	db	37
   361  0010BE  64                 	db	100	;'d'
   362  0010BF  00                 	db	0
   363  0010C0                     STR_3:
   364  0010C0  25                 	db	37
   365  0010C1  73                 	db	115	;'s'
   366  0010C2  00                 	db	0
   367  0010C3                     STR_5:
   368  0010C3  20                 	db	32
   369  0010C4  00                 	db	0
   370  0000                     
   371                           ; #config settings
   372  0010C5  00                 	db	0	; dummy byte at the end
   373  0000                     
   374                           	psect	cinit
   375  001F54                     __pcinit:
   376                           	opt stack 0
   377  001F54                     start_initialization:
   378                           	opt stack 0
   379  001F54                     __initialization:
   380                           	opt stack 0
   381                           
   382                           ; Initialize objects allocated to BANK1 (41 bytes)
   383                           ; load TBLPTR registers with __pidataBANK1
   384  001F54  0E8A               	movlw	low __pidataBANK1
   385  001F56  6EF6               	movwf	tblptrl,c
   386  001F58  0E1F               	movlw	high __pidataBANK1
   387  001F5A  6EF7               	movwf	tblptrh,c
   388  001F5C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   389  001F5E  6EF8               	movwf	tblptru,c
   390  001F60  EE01  F000         	lfsr	0,__pdataBANK1
   391  001F64  EE10 F029          	lfsr	1,41
   392  001F68                     copy_data0:
   393  001F68  0009               	tblrd		*+
   394  001F6A  CFF5 FFEE          	movff	tablat,postinc0
   395  001F6E  50E5               	movf	postdec1,w,c
   396  001F70  50E1               	movf	fsr1l,w,c
   397  001F72  E1FA               	bnz	copy_data0
   398                           
   399                           ; Clear objects allocated to BANK0 (8 bytes)
   400  001F74  EE00  F0F7         	lfsr	0,__pbssBANK0
   401  001F78  0E08               	movlw	8
   402  001F7A                     clear_0:
   403  001F7A  6AEE               	clrf	postinc0,c
   404  001F7C  06E8               	decf	wreg,f,c
   405  001F7E  E1FD               	bnz	clear_0
   406  001F80                     end_of_initialization:
   407                           	opt stack 0
   408  001F80                     __end_of__initialization:
   409                           	opt stack 0
   410  001F80  9059               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   411  001F82  9259               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   412  001F84  0100               	movlb	0
   413  001F86  EFBC  F00C         	goto	_main	;jump to C main() function
   414                           tblptru	equ	0xFF8
   415                           tblptrh	equ	0xFF7
   416                           tblptrl	equ	0xFF6
   417                           tablat	equ	0xFF5
   418                           postinc0	equ	0xFEE
   419                           wreg	equ	0xFE8
   420                           postdec1	equ	0xFE5
   421                           fsr1l	equ	0xFE1
   422                           
   423                           	psect	bssBANK0
   424  0000F7                     __pbssBANK0:
   425                           	opt stack 0
   426  0000F7                     mainloop@F3179:
   427                           	opt stack 0
   428  0000F7                     	ds	8
   429                           tblptru	equ	0xFF8
   430                           tblptrh	equ	0xFF7
   431                           tblptrl	equ	0xFF6
   432                           tablat	equ	0xFF5
   433                           postinc0	equ	0xFEE
   434                           wreg	equ	0xFE8
   435                           postdec1	equ	0xFE5
   436                           fsr1l	equ	0xFE1
   437                           
   438                           	psect	dataBANK1
   439  000100                     __pdataBANK1:
   440                           	opt stack 0
   441  000100                     println@F3053:
   442                           	opt stack 0
   443  000100                     	ds	41
   444                           tblptru	equ	0xFF8
   445                           tblptrh	equ	0xFF7
   446                           tblptrl	equ	0xFF6
   447                           tablat	equ	0xFF5
   448                           postinc0	equ	0xFEE
   449                           wreg	equ	0xFE8
   450                           postdec1	equ	0xFE5
   451                           fsr1l	equ	0xFE1
   452                           
   453                           	psect	cstackBANK0
   454  000080                     __pcstackBANK0:
   455                           	opt stack 0
   456  000080                     ?_getTime:
   457                           	opt stack 0
   458  000080                     ?_captureKeypad:
   459                           	opt stack 0
   460  000080                     ?_AD:
   461                           	opt stack 0
   462  000080                     ?___lwdiv:
   463                           	opt stack 0
   464  000080                     lcdNibble@temp:
   465                           	opt stack 0
   466  000080                     moveBigNose@prev:
   467                           	opt stack 0
   468  000080                     moveSmallNose@prev:
   469                           	opt stack 0
   470  000080                     ___lwdiv@dividend:
   471                           	opt stack 0
   472                           
   473                           ; 2 bytes @ 0x0
   474  000080                     	ds	1
   475  000081                     lcdNibble@data:
   476                           	opt stack 0
   477                           
   478                           ; 1 bytes @ 0x1
   479  000081                     	ds	1
   480  000082                     ??_AD:
   481  000082                     lcdInst@data:
   482                           	opt stack 0
   483  000082                     putch@data:
   484                           	opt stack 0
   485  000082                     captureKeypad@keypress:
   486                           	opt stack 0
   487  000082                     getTime@time:
   488                           	opt stack 0
   489  000082                     moveBigNose@next:
   490                           	opt stack 0
   491  000082                     moveSmallNose@next:
   492                           	opt stack 0
   493  000082                     ___lwdiv@divisor:
   494                           	opt stack 0
   495                           
   496                           ; 2 bytes @ 0x2
   497  000082                     	ds	1
   498  000083                     ??_initLCD:
   499                           
   500                           ; 1 bytes @ 0x3
   501  000083                     	ds	1
   502  000084                     ??_moveSmallNose:
   503  000084                     ??_moveBigNose:
   504  000084                     AD@channel:
   505                           	opt stack 0
   506  000084                     ___lwdiv@quotient:
   507                           	opt stack 0
   508                           
   509                           ; 2 bytes @ 0x4
   510  000084                     	ds	1
   511  000085                     ?_checkAA:
   512                           	opt stack 0
   513  000085                     ?_checkC9V:
   514                           	opt stack 0
   515                           
   516                           ; 2 bytes @ 0x5
   517  000085                     	ds	1
   518  000086                     ___lwdiv@counter:
   519                           	opt stack 0
   520                           
   521                           ; 1 bytes @ 0x6
   522  000086                     	ds	1
   523  000087                     ?___lwmod:
   524                           	opt stack 0
   525  000087                     checkC9V@chargedC:
   526                           	opt stack 0
   527  000087                     ___lwmod@dividend:
   528                           	opt stack 0
   529                           
   530                           ; 2 bytes @ 0x7
   531  000087                     	ds	2
   532  000089                     checkC9V@charged9:
   533                           	opt stack 0
   534  000089                     ___lwmod@divisor:
   535                           	opt stack 0
   536                           
   537                           ; 2 bytes @ 0x9
   538  000089                     	ds	2
   539  00008B                     ___lwmod@counter:
   540                           	opt stack 0
   541                           
   542                           ; 1 bytes @ 0xB
   543  00008B                     	ds	1
   544  00008C                     ?_printf:
   545                           	opt stack 0
   546  00008C                     printf@f:
   547                           	opt stack 0
   548                           
   549                           ; 2 bytes @ 0xC
   550  00008C                     	ds	4
   551  000090                     ??_printf:
   552                           
   553                           ; 1 bytes @ 0x10
   554  000090                     	ds	1
   555  000091                     printf@flag:
   556                           	opt stack 0
   557                           
   558                           ; 1 bytes @ 0x11
   559  000091                     	ds	1
   560  000092                     printf@prec:
   561                           	opt stack 0
   562                           
   563                           ; 1 bytes @ 0x12
   564  000092                     	ds	1
   565  000093                     printf@ap:
   566                           	opt stack 0
   567                           
   568                           ; 2 bytes @ 0x13
   569  000093                     	ds	2
   570  000095                     printf@cp:
   571                           	opt stack 0
   572                           
   573                           ; 2 bytes @ 0x15
   574  000095                     	ds	2
   575  000097                     printf@val:
   576                           	opt stack 0
   577                           
   578                           ; 2 bytes @ 0x17
   579  000097                     	ds	2
   580  000099                     printf@c:
   581                           	opt stack 0
   582                           
   583                           ; 1 bytes @ 0x19
   584  000099                     	ds	1
   585  00009A                     println@data:
   586                           	opt stack 0
   587                           
   588                           ; 2 bytes @ 0x1A
   589  00009A                     	ds	2
   590  00009C                     ??_println:
   591                           
   592                           ; 1 bytes @ 0x1C
   593  00009C                     	ds	2
   594  00009E                     println@output:
   595                           	opt stack 0
   596                           
   597                           ; 41 bytes @ 0x1E
   598  00009E                     	ds	41
   599  0000C7                     println@i:
   600                           	opt stack 0
   601                           
   602                           ; 2 bytes @ 0x47
   603  0000C7                     	ds	2
   604  0000C9                     showInfo@time:
   605                           	opt stack 0
   606                           
   607                           ; 2 bytes @ 0x49
   608  0000C9                     	ds	2
   609  0000CB                     showInfo@sorted:
   610                           	opt stack 0
   611                           
   612                           ; 2 bytes @ 0x4B
   613  0000CB                     	ds	2
   614  0000CD                     ??_showInfo:
   615                           
   616                           ; 1 bytes @ 0x4D
   617  0000CD                     	ds	8
   618  0000D5                     showInfo@type:
   619                           	opt stack 0
   620                           
   621                           ; 2 bytes @ 0x55
   622  0000D5                     	ds	2
   623  0000D7                     mainloop@bigNose:
   624                           	opt stack 0
   625                           
   626                           ; 2 bytes @ 0x57
   627  0000D7                     	ds	2
   628  0000D9                     mainloop@smallNose:
   629                           	opt stack 0
   630                           
   631                           ; 2 bytes @ 0x59
   632  0000D9                     	ds	2
   633  0000DB                     ??_mainloop:
   634                           
   635                           ; 1 bytes @ 0x5B
   636  0000DB                     	ds	2
   637  0000DD                     mainloop@stop:
   638                           	opt stack 0
   639                           
   640                           ; 2 bytes @ 0x5D
   641  0000DD                     	ds	2
   642  0000DF                     _mainloop$155:
   643                           	opt stack 0
   644                           
   645                           ; 1 bytes @ 0x5F
   646  0000DF                     	ds	1
   647  0000E0                     mainloop@startTime:
   648                           	opt stack 0
   649                           
   650                           ; 2 bytes @ 0x60
   651  0000E0                     	ds	2
   652  0000E2                     mainloop@sorted:
   653                           	opt stack 0
   654                           
   655                           ; 8 bytes @ 0x62
   656  0000E2                     	ds	8
   657  0000EA                     mainloop@AA:
   658                           	opt stack 0
   659                           
   660                           ; 2 bytes @ 0x6A
   661  0000EA                     	ds	2
   662  0000EC                     mainloop@C9:
   663                           	opt stack 0
   664                           
   665                           ; 2 bytes @ 0x6C
   666  0000EC                     	ds	2
   667  0000EE                     
   668                           ; 2 bytes @ 0x6E
   669  0000EE                     	ds	2
   670  0000F0                     
   671                           ; 3 bytes @ 0x70
   672  0000F0                     	ds	3
   673  0000F3                     main@bigNose:
   674                           	opt stack 0
   675                           
   676                           ; 2 bytes @ 0x73
   677  0000F3                     	ds	2
   678  0000F5                     main@smallNose:
   679                           	opt stack 0
   680                           
   681                           ; 2 bytes @ 0x75
   682  0000F5                     	ds	2
   683                           tblptru	equ	0xFF8
   684                           tblptrh	equ	0xFF7
   685                           tblptrl	equ	0xFF6
   686                           tablat	equ	0xFF5
   687                           postinc0	equ	0xFEE
   688                           wreg	equ	0xFE8
   689                           postdec1	equ	0xFE5
   690                           fsr1l	equ	0xFE1
   691                           
   692                           	psect	cstackCOMRAM
   693  000001                     __pcstackCOMRAM:
   694                           	opt stack 0
   695  000001                     ?i2___lwdiv:
   696                           	opt stack 0
   697  000001                     i2lcdNibble@temp:
   698                           	opt stack 0
   699  000001                     i2___lwdiv@dividend:
   700                           	opt stack 0
   701                           
   702                           ; 2 bytes @ 0x0
   703  000001                     	ds	1
   704  000002                     i2lcdNibble@data:
   705                           	opt stack 0
   706                           
   707                           ; 1 bytes @ 0x1
   708  000002                     	ds	1
   709  000003                     i2putch@data:
   710                           	opt stack 0
   711  000003                     i2___lwdiv@divisor:
   712                           	opt stack 0
   713                           
   714                           ; 2 bytes @ 0x2
   715  000003                     	ds	2
   716  000005                     i2___lwdiv@quotient:
   717                           	opt stack 0
   718                           
   719                           ; 2 bytes @ 0x4
   720  000005                     	ds	2
   721  000007                     i2___lwdiv@counter:
   722                           	opt stack 0
   723                           
   724                           ; 1 bytes @ 0x6
   725  000007                     	ds	1
   726  000008                     ?i2___lwmod:
   727                           	opt stack 0
   728  000008                     i2___lwmod@dividend:
   729                           	opt stack 0
   730                           
   731                           ; 2 bytes @ 0x7
   732  000008                     	ds	2
   733  00000A                     i2___lwmod@divisor:
   734                           	opt stack 0
   735                           
   736                           ; 2 bytes @ 0x9
   737  00000A                     	ds	2
   738  00000C                     i2___lwmod@counter:
   739                           	opt stack 0
   740                           
   741                           ; 1 bytes @ 0xB
   742  00000C                     	ds	1
   743  00000D                     ?i2_printf:
   744                           	opt stack 0
   745  00000D                     i2printf@f:
   746                           	opt stack 0
   747                           
   748                           ; 2 bytes @ 0xC
   749  00000D                     	ds	4
   750  000011                     ??i2_printf:
   751                           
   752                           ; 1 bytes @ 0x10
   753  000011                     	ds	1
   754  000012                     i2printf@flag:
   755                           	opt stack 0
   756                           
   757                           ; 1 bytes @ 0x11
   758  000012                     	ds	1
   759  000013                     i2printf@prec:
   760                           	opt stack 0
   761                           
   762                           ; 1 bytes @ 0x12
   763  000013                     	ds	1
   764  000014                     i2printf@ap:
   765                           	opt stack 0
   766                           
   767                           ; 2 bytes @ 0x13
   768  000014                     	ds	2
   769  000016                     i2printf@cp:
   770                           	opt stack 0
   771                           
   772                           ; 2 bytes @ 0x15
   773  000016                     	ds	2
   774  000018                     i2printf@val:
   775                           	opt stack 0
   776                           
   777                           ; 2 bytes @ 0x17
   778  000018                     	ds	2
   779  00001A                     i2printf@c:
   780                           	opt stack 0
   781                           
   782                           ; 1 bytes @ 0x19
   783  00001A                     	ds	1
   784  00001B                     i2println@data:
   785                           	opt stack 0
   786                           
   787                           ; 2 bytes @ 0x1A
   788  00001B                     	ds	2
   789  00001D                     ??i2_println:
   790                           
   791                           ; 1 bytes @ 0x1C
   792  00001D                     	ds	2
   793  00001F                     i2println@output:
   794                           	opt stack 0
   795                           
   796                           ; 41 bytes @ 0x1E
   797  00001F                     	ds	41
   798  000048                     i2println@i:
   799                           	opt stack 0
   800                           
   801                           ; 2 bytes @ 0x47
   802  000048                     	ds	2
   803  00004A                     ??_keypressed:
   804  00004A                     
   805                           ; 1 bytes @ 0x49
   806  00004A                     	ds	14
   807  000058                     keypressed@keypress:
   808                           	opt stack 0
   809                           
   810                           ; 1 bytes @ 0x57
   811  000058                     	ds	1
   812                           tblptru	equ	0xFF8
   813                           tblptrh	equ	0xFF7
   814                           tblptrl	equ	0xFF6
   815                           tablat	equ	0xFF5
   816                           postinc0	equ	0xFEE
   817                           wreg	equ	0xFE8
   818                           postdec1	equ	0xFE5
   819                           fsr1l	equ	0xFE1
   820                           
   821 ;;
   822 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   823 ;;
   824 ;; *************** function _main *****************
   825 ;; Defined at:
   826 ;;		line 97 in file "main.c"
   827 ;; Parameters:    Size  Location     Type
   828 ;;  argc            2  110[BANK0 ] int 
   829 ;;  argv            3  112[BANK0 ] PTR PTR unsigned char 
   830 ;; Auto vars:     Size  Location     Type
   831 ;;  smallNose       2  117[BANK0 ] int 
   832 ;;  bigNose         2  115[BANK0 ] int 
   833 ;; Return value:  Size  Location     Type
   834 ;;                  2  110[BANK0 ] int 
   835 ;; Registers used:
   836 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   837 ;; Tracked objects:
   838 ;;		On entry : 0/0
   839 ;;		On exit  : 0/0
   840 ;;		Unchanged: 0/0
   841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   842 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   843 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   845 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   846 ;;Total ram usage:        9 bytes
   847 ;; Hardware stack levels required when called:   12
   848 ;; This function calls:
   849 ;;		_captureKeypad
   850 ;;		_initialize
   851 ;;		_mainloop
   852 ;;		_moveBigNose
   853 ;;		_moveSmallNose
   854 ;;		_println
   855 ;; This function is called by:
   856 ;;		Startup code after reset
   857 ;; This function uses a non-reentrant model
   858 ;;
   859                           
   860                           	psect	text0
   861  001978                     __ptext0:
   862                           	opt stack 0
   863  001978                     _main:
   864                           	opt stack 19
   865                           
   866                           ;main.c: 98: initialize();
   867                           
   868                           ;incstack = 0
   869  001978  EC8E  F00F         	call	_initialize	;wreg free
   870                           
   871                           ;main.c: 100: println((unsigned char *) "Welcome!");
   872  00197C  0EAD               	movlw	low STR_2
   873  00197E  0100               	movlb	0	; () banked
   874  001980  6F9A               	movwf	println@data& (0+255),b
   875  001982  0E10               	movlw	high STR_2
   876  001984  0100               	movlb	0	; () banked
   877  001986  6F9B               	movwf	(println@data+1)& (0+255),b
   878  001988  EC69  F00C         	call	_println	;wreg free
   879                           
   880                           ;main.c: 103: int bigNose = 0, smallNose = 0;
   881  00198C  0E00               	movlw	0
   882  00198E  0100               	movlb	0	; () banked
   883  001990  6FF4               	movwf	(main@bigNose+1)& (0+255),b
   884  001992  0E00               	movlw	0
   885  001994  6FF3               	movwf	main@bigNose& (0+255),b
   886                           
   887                           ; BSR set to: 0
   888  001996  0E00               	movlw	0
   889  001998  0100               	movlb	0	; () banked
   890  00199A  6FF6               	movwf	(main@smallNose+1)& (0+255),b
   891  00199C  0E00               	movlw	0
   892  00199E  6FF5               	movwf	main@smallNose& (0+255),b
   893                           
   894                           ; BSR set to: 0
   895                           ;main.c: 104: moveBigNose(&bigNose, 0);
   896  0019A0  0EF3               	movlw	low main@bigNose
   897  0019A2  0100               	movlb	0	; () banked
   898  0019A4  6F80               	movwf	moveBigNose@prev& (0+255),b
   899  0019A6  0E00               	movlw	high main@bigNose
   900  0019A8  0100               	movlb	0	; () banked
   901  0019AA  6F81               	movwf	(moveBigNose@prev+1)& (0+255),b
   902  0019AC  0E00               	movlw	0
   903  0019AE  0100               	movlb	0	; () banked
   904  0019B0  6F83               	movwf	(moveBigNose@next+1)& (0+255),b
   905  0019B2  0E00               	movlw	0
   906  0019B4  6F82               	movwf	moveBigNose@next& (0+255),b
   907  0019B6  ECC5  F00D         	call	_moveBigNose	;wreg free
   908                           
   909                           ;main.c: 105: moveSmallNose(&smallNose, 0);
   910  0019BA  0EF5               	movlw	low main@smallNose
   911  0019BC  0100               	movlb	0	; () banked
   912  0019BE  6F80               	movwf	moveSmallNose@prev& (0+255),b
   913  0019C0  0E00               	movlw	high main@smallNose
   914  0019C2  0100               	movlb	0	; () banked
   915  0019C4  6F81               	movwf	(moveSmallNose@prev+1)& (0+255),b
   916  0019C6  0E00               	movlw	0
   917  0019C8  0100               	movlb	0	; () banked
   918  0019CA  6F83               	movwf	(moveSmallNose@next+1)& (0+255),b
   919  0019CC  0E00               	movlw	0
   920  0019CE  6F82               	movwf	moveSmallNose@next& (0+255),b
   921  0019D0  EC87  F00D         	call	_moveSmallNose	;wreg free
   922  0019D4                     l1866:
   923  0019D4  ECDA  F00F         	call	_captureKeypad	;wreg free
   924  0019D8  0E0F               	movlw	15
   925  0019DA  0100               	movlb	0	; () banked
   926  0019DC  1980               	xorwf	?_captureKeypad& (0+255),w,b
   927  0019DE  0100               	movlb	0	; () banked
   928  0019E0  1181               	iorwf	(?_captureKeypad+1)& (0+255),w,b
   929  0019E2  A4D8               	btfss	status,2,c
   930  0019E4  D7F7               	goto	l1866
   931                           
   932                           ; BSR set to: 0
   933                           ;main.c: 109: mainloop(&bigNose, &smallNose);
   934                           
   935                           ; BSR set to: 0
   936  0019E6  0EF3               	movlw	low main@bigNose
   937  0019E8  0100               	movlb	0	; () banked
   938  0019EA  6FD7               	movwf	mainloop@bigNose& (0+255),b
   939  0019EC  0E00               	movlw	high main@bigNose
   940  0019EE  0100               	movlb	0	; () banked
   941  0019F0  6FD8               	movwf	(mainloop@bigNose+1)& (0+255),b
   942  0019F2  0EF5               	movlw	low main@smallNose
   943  0019F4  0100               	movlb	0	; () banked
   944  0019F6  6FD9               	movwf	mainloop@smallNose& (0+255),b
   945  0019F8  0E00               	movlw	high main@smallNose
   946  0019FA  0100               	movlb	0	; () banked
   947  0019FC  6FDA               	movwf	(mainloop@smallNose+1)& (0+255),b
   948  0019FE  EC94  F00A         	call	_mainloop	;wreg free
   949  001A02  00FF               	reset		;# 
   950  001A04  EF07  F000         	goto	start
   951  001A08                     __end_of_main:
   952                           	opt stack 0
   953                           tblptru	equ	0xFF8
   954                           tblptrh	equ	0xFF7
   955                           tblptrl	equ	0xFF6
   956                           tablat	equ	0xFF5
   957                           postinc0	equ	0xFEE
   958                           wreg	equ	0xFE8
   959                           postdec1	equ	0xFE5
   960                           fsr1l	equ	0xFE1
   961                           status	equ	0xFD8
   962                           
   963 ;; *************** function _mainloop *****************
   964 ;; Defined at:
   965 ;;		line 61 in file "main.c"
   966 ;; Parameters:    Size  Location     Type
   967 ;;  bigNose         2   87[BANK0 ] PTR int 
   968 ;;		 -> main@bigNose(2), 
   969 ;;  smallNose       2   89[BANK0 ] PTR int 
   970 ;;		 -> main@smallNose(2), 
   971 ;; Auto vars:     Size  Location     Type
   972 ;;  sorted          8   98[BANK0 ] int [4]
   973 ;;  C9              2  108[BANK0 ] int 
   974 ;;  AA              2  106[BANK0 ] int 
   975 ;;  startTime       2   96[BANK0 ] int 
   976 ;;  stop            2   93[BANK0 ] int 
   977 ;; Return value:  Size  Location     Type
   978 ;;                  1    wreg      void 
   979 ;; Registers used:
   980 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   981 ;; Tracked objects:
   982 ;;		On entry : 0/0
   983 ;;		On exit  : 0/0
   984 ;;		Unchanged: 0/0
   985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   986 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   987 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   988 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   989 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   990 ;;Total ram usage:       23 bytes
   991 ;; Hardware stack levels used:    1
   992 ;; Hardware stack levels required when called:   11
   993 ;; This function calls:
   994 ;;		_checkAA
   995 ;;		_checkC9V
   996 ;;		_getTime
   997 ;;		_moveBigNose
   998 ;;		_moveSmallNose
   999 ;;		_moveXMotors
  1000 ;;		_println
  1001 ;;		_showInfo
  1002 ;;		_stopMoving
  1003 ;; This function is called by:
  1004 ;;		_main
  1005 ;; This function uses a non-reentrant model
  1006 ;;
  1007                           
  1008                           	psect	text1
  1009  001528                     __ptext1:
  1010                           	opt stack 0
  1011  001528                     _mainloop:
  1012                           	opt stack 19
  1013                           
  1014                           ;main.c: 62: println("Sorting...");
  1015                           
  1016                           ;incstack = 0
  1017  001528  0E8E               	movlw	low STR_1
  1018  00152A  0100               	movlb	0	; () banked
  1019  00152C  6F9A               	movwf	println@data& (0+255),b
  1020  00152E  0E10               	movlw	high STR_1
  1021  001530  0100               	movlb	0	; () banked
  1022  001532  6F9B               	movwf	(println@data+1)& (0+255),b
  1023  001534  EC69  F00C         	call	_println	;wreg free
  1024                           
  1025                           ;main.c: 63: int stop = 0;
  1026  001538  0E00               	movlw	0
  1027  00153A  0100               	movlb	0	; () banked
  1028  00153C  6FDE               	movwf	(mainloop@stop+1)& (0+255),b
  1029  00153E  0E00               	movlw	0
  1030  001540  6FDD               	movwf	mainloop@stop& (0+255),b
  1031                           
  1032                           ; BSR set to: 0
  1033                           ;main.c: 64: int sorted[] = {0, 0, 0, 0};
  1034  001542  EE20  F0F7         	lfsr	2,mainloop@F3179
  1035  001546  EE10  F0E2         	lfsr	1,mainloop@sorted
  1036  00154A  0E07               	movlw	7
  1037  00154C                     u1131:
  1038  00154C  CFDB FFE3          	movff	plusw2,plusw1
  1039  001550  06E8               	decf	wreg,f,c
  1040  001552  E2FC               	bc	u1131
  1041                           
  1042                           ; BSR set to: 0
  1043                           ;main.c: 65: int startTime = getTime();
  1044  001554  ECF3  F00F         	call	_getTime	;wreg free
  1045  001558  C080  F0E0         	movff	?_getTime,mainloop@startTime
  1046  00155C  C081  F0E1         	movff	?_getTime+1,mainloop@startTime+1
  1047                           
  1048                           ;main.c: 66: int AA = 0;
  1049  001560  0E00               	movlw	0
  1050  001562  0100               	movlb	0	; () banked
  1051  001564  6FEB               	movwf	(mainloop@AA+1)& (0+255),b
  1052  001566  0E00               	movlw	0
  1053  001568  6FEA               	movwf	mainloop@AA& (0+255),b
  1054                           
  1055                           ; BSR set to: 0
  1056                           ;main.c: 67: int C9 = 0;
  1057  00156A  0E00               	movlw	0
  1058  00156C  0100               	movlb	0	; () banked
  1059  00156E  6FED               	movwf	(mainloop@C9+1)& (0+255),b
  1060  001570  0E00               	movlw	0
  1061  001572  6FEC               	movwf	mainloop@C9& (0+255),b
  1062                           
  1063                           ; BSR set to: 0
  1064                           ;main.c: 68: INT1IE = 1;
  1065  001574  86F0               	bsf	intcon3,3,c	;volatile
  1066                           
  1067                           ; BSR set to: 0
  1068                           ;main.c: 69: (INTCONbits.GIE = 1);
  1069  001576  8EF2               	bsf	intcon,7,c	;volatile
  1070                           
  1071                           ;main.c: 70: while (!stop) {
  1072  001578  D0A8               	goto	l1840
  1073  00157A                     l1808:
  1074                           
  1075                           ; BSR set to: 0
  1076                           ;main.c: 71: moveSmallNose(smallNose, AA);
  1077  00157A  C0D9  F080         	movff	mainloop@smallNose,moveSmallNose@prev
  1078  00157E  C0DA  F081         	movff	mainloop@smallNose+1,moveSmallNose@prev+1
  1079  001582  C0EA  F082         	movff	mainloop@AA,moveSmallNose@next
  1080  001586  C0EB  F083         	movff	mainloop@AA+1,moveSmallNose@next+1
  1081  00158A  EC87  F00D         	call	_moveSmallNose	;wreg free
  1082                           
  1083                           ;main.c: 72: moveBigNose(bigNose, C9);
  1084  00158E  C0D7  F080         	movff	mainloop@bigNose,moveBigNose@prev
  1085  001592  C0D8  F081         	movff	mainloop@bigNose+1,moveBigNose@prev+1
  1086  001596  C0EC  F082         	movff	mainloop@C9,moveBigNose@next
  1087  00159A  C0ED  F083         	movff	mainloop@C9+1,moveBigNose@next+1
  1088  00159E  ECC5  F00D         	call	_moveBigNose	;wreg free
  1089                           
  1090                           ;main.c: 73: moveXMotors();
  1091  0015A2  EC23  F010         	call	_moveXMotors	;wreg free
  1092                           
  1093                           ;main.c: 77: AA = checkAA();
  1094  0015A6  EC05  F010         	call	_checkAA	;wreg free
  1095  0015AA  C085  F0EA         	movff	?_checkAA,mainloop@AA
  1096  0015AE  C086  F0EB         	movff	?_checkAA+1,mainloop@AA+1
  1097                           
  1098                           ;main.c: 78: C9 = checkC9V();
  1099  0015B2  ECA4  F00E         	call	_checkC9V	;wreg free
  1100  0015B6  C085  F0EC         	movff	?_checkC9V,mainloop@C9
  1101  0015BA  C086  F0ED         	movff	?_checkC9V+1,mainloop@C9+1
  1102                           
  1103                           ;main.c: 79: sorted[0] += AA;
  1104  0015BE  0100               	movlb	0	; () banked
  1105  0015C0  51EA               	movf	mainloop@AA& (0+255),w,b
  1106  0015C2  0100               	movlb	0	; () banked
  1107  0015C4  27E2               	addwf	mainloop@sorted& (0+255),f,b
  1108  0015C6  0100               	movlb	0	; () banked
  1109  0015C8  51EB               	movf	(mainloop@AA+1)& (0+255),w,b
  1110  0015CA  0100               	movlb	0	; () banked
  1111  0015CC  23E3               	addwfc	(mainloop@sorted+1)& (0+255),f,b
  1112                           
  1113                           ; BSR set to: 0
  1114                           ;main.c: 80: sorted[1] += C9 == 1;
  1115  0015CE  0100               	movlb	0	; () banked
  1116  0015D0  05EC               	decf	mainloop@C9& (0+255),w,b
  1117  0015D2  0100               	movlb	0	; () banked
  1118  0015D4  11ED               	iorwf	(mainloop@C9+1)& (0+255),w,b
  1119  0015D6  A4D8               	btfss	status,2,c
  1120  0015D8  D002               	goto	u1140
  1121  0015DA  0E01               	movlw	1
  1122  0015DC  D001               	goto	u1150
  1123  0015DE                     u1140:
  1124  0015DE  0E00               	movlw	0
  1125  0015E0                     u1150:
  1126  0015E0  0100               	movlb	0	; () banked
  1127  0015E2  27E4               	addwf	(mainloop@sorted+2)& (0+255),f,b
  1128  0015E4  0E00               	movlw	0
  1129  0015E6  23E5               	addwfc	(mainloop@sorted+3)& (0+255),f,b
  1130                           
  1131                           ; BSR set to: 0
  1132                           ;main.c: 81: sorted[2] += C9 == 2;
  1133  0015E8  0E02               	movlw	2
  1134  0015EA  0100               	movlb	0	; () banked
  1135  0015EC  19EC               	xorwf	mainloop@C9& (0+255),w,b
  1136  0015EE  0100               	movlb	0	; () banked
  1137  0015F0  11ED               	iorwf	(mainloop@C9+1)& (0+255),w,b
  1138  0015F2  A4D8               	btfss	status,2,c
  1139  0015F4  D002               	goto	u1160
  1140  0015F6  0E01               	movlw	1
  1141  0015F8  D001               	goto	u1170
  1142  0015FA                     u1160:
  1143  0015FA  0E00               	movlw	0
  1144  0015FC                     u1170:
  1145  0015FC  0100               	movlb	0	; () banked
  1146  0015FE  27E6               	addwf	(mainloop@sorted+4)& (0+255),f,b
  1147  001600  0E00               	movlw	0
  1148  001602  23E7               	addwfc	(mainloop@sorted+5)& (0+255),f,b
  1149                           
  1150                           ; BSR set to: 0
  1151                           ;main.c: 82: sorted[3] += AA == 0 && C9 == 0;
  1152  001604  0E00               	movlw	0
  1153  001606  0100               	movlb	0	; () banked
  1154  001608  6FDF               	movwf	_mainloop$155& (0+255),b
  1155                           
  1156                           ; BSR set to: 0
  1157  00160A  0100               	movlb	0	; () banked
  1158  00160C  51EA               	movf	mainloop@AA& (0+255),w,b
  1159  00160E  0100               	movlb	0	; () banked
  1160  001610  11EB               	iorwf	(mainloop@AA+1)& (0+255),w,b
  1161  001612  A4D8               	btfss	status,2,c
  1162  001614  D009               	goto	l1830
  1163                           
  1164                           ; BSR set to: 0
  1165  001616  0100               	movlb	0	; () banked
  1166  001618  51EC               	movf	mainloop@C9& (0+255),w,b
  1167  00161A  0100               	movlb	0	; () banked
  1168  00161C  11ED               	iorwf	(mainloop@C9+1)& (0+255),w,b
  1169  00161E  A4D8               	btfss	status,2,c
  1170  001620  D003               	goto	l1830
  1171                           
  1172                           ; BSR set to: 0
  1173  001622  0E01               	movlw	1
  1174  001624  0100               	movlb	0	; () banked
  1175  001626  6FDF               	movwf	_mainloop$155& (0+255),b
  1176  001628                     l1830:
  1177                           
  1178                           ; BSR set to: 0
  1179  001628  0100               	movlb	0	; () banked
  1180  00162A  51DF               	movf	_mainloop$155& (0+255),w,b
  1181  00162C  0100               	movlb	0	; () banked
  1182  00162E  27E8               	addwf	(mainloop@sorted+6)& (0+255),f,b
  1183  001630  0E00               	movlw	0
  1184  001632  23E9               	addwfc	(mainloop@sorted+7)& (0+255),f,b
  1185                           
  1186                           ; BSR set to: 0
  1187                           ;main.c: 83: if (sorted[0] + sorted[1] + sorted[2] + sorted[3] == 15) {
  1188  001634  0100               	movlb	0	; () banked
  1189  001636  51E6               	movf	(mainloop@sorted+4)& (0+255),w,b
  1190  001638  0100               	movlb	0	; () banked
  1191  00163A  25E4               	addwf	(mainloop@sorted+2)& (0+255),w,b
  1192  00163C  0100               	movlb	0	; () banked
  1193  00163E  6FDB               	movwf	??_mainloop& (0+255),b
  1194  001640  0100               	movlb	0	; () banked
  1195  001642  51E7               	movf	(mainloop@sorted+5)& (0+255),w,b
  1196  001644  0100               	movlb	0	; () banked
  1197  001646  21E5               	addwfc	(mainloop@sorted+3)& (0+255),w,b
  1198  001648  0100               	movlb	0	; () banked
  1199  00164A  6FDC               	movwf	(??_mainloop+1)& (0+255),b
  1200  00164C  0100               	movlb	0	; () banked
  1201  00164E  51E8               	movf	(mainloop@sorted+6)& (0+255),w,b
  1202  001650  0100               	movlb	0	; () banked
  1203  001652  27DB               	addwf	??_mainloop& (0+255),f,b
  1204  001654  0100               	movlb	0	; () banked
  1205  001656  51E9               	movf	(mainloop@sorted+7)& (0+255),w,b
  1206  001658  0100               	movlb	0	; () banked
  1207  00165A  23DC               	addwfc	(??_mainloop+1)& (0+255),f,b
  1208  00165C  0100               	movlb	0	; () banked
  1209  00165E  51E2               	movf	mainloop@sorted& (0+255),w,b
  1210  001660  0100               	movlb	0	; () banked
  1211  001662  27DB               	addwf	??_mainloop& (0+255),f,b
  1212  001664  0100               	movlb	0	; () banked
  1213  001666  51E3               	movf	(mainloop@sorted+1)& (0+255),w,b
  1214  001668  0100               	movlb	0	; () banked
  1215  00166A  23DC               	addwfc	(??_mainloop+1)& (0+255),f,b
  1216  00166C  0E0F               	movlw	15
  1217  00166E  0100               	movlb	0	; () banked
  1218  001670  19DB               	xorwf	??_mainloop& (0+255),w,b
  1219  001672  0100               	movlb	0	; () banked
  1220  001674  11DC               	iorwf	(??_mainloop+1)& (0+255),w,b
  1221  001676  A4D8               	btfss	status,2,c
  1222  001678  D005               	goto	l1836
  1223                           
  1224                           ; BSR set to: 0
  1225                           ;main.c: 84: stop = 1;
  1226  00167A  0E00               	movlw	0
  1227  00167C  0100               	movlb	0	; () banked
  1228  00167E  6FDE               	movwf	(mainloop@stop+1)& (0+255),b
  1229  001680  0E01               	movlw	1
  1230  001682  6FDD               	movwf	mainloop@stop& (0+255),b
  1231  001684                     l1836:
  1232                           
  1233                           ; BSR set to: 0
  1234                           ;main.c: 85: }
  1235                           ;main.c: 86: if (getTime() - startTime >= 180) {
  1236  001684  C0E0  F0DB         	movff	mainloop@startTime,??_mainloop
  1237  001688  C0E1  F0DC         	movff	mainloop@startTime+1,??_mainloop+1
  1238  00168C  0100               	movlb	0	; () banked
  1239  00168E  1FDB               	comf	??_mainloop& (0+255),f,b
  1240  001690  1FDC               	comf	(??_mainloop+1)& (0+255),f,b
  1241  001692  4BDB               	infsnz	??_mainloop& (0+255),f,b
  1242  001694  2BDC               	incf	(??_mainloop+1)& (0+255),f,b
  1243  001696  ECF3  F00F         	call	_getTime	;wreg free
  1244  00169A  0100               	movlb	0	; () banked
  1245  00169C  51DB               	movf	??_mainloop& (0+255),w,b
  1246  00169E  0100               	movlb	0	; () banked
  1247  0016A0  2780               	addwf	?_getTime& (0+255),f,b
  1248  0016A2  0100               	movlb	0	; () banked
  1249  0016A4  51DC               	movf	(??_mainloop+1)& (0+255),w,b
  1250  0016A6  0100               	movlb	0	; () banked
  1251  0016A8  2381               	addwfc	(?_getTime+1)& (0+255),f,b
  1252  0016AA  0100               	movlb	0	; () banked
  1253  0016AC  BF81               	btfsc	(?_getTime+1)& (0+255),7,b
  1254  0016AE  D00D               	goto	l1840
  1255  0016B0  0100               	movlb	0	; () banked
  1256  0016B2  5181               	movf	(?_getTime+1)& (0+255),w,b
  1257  0016B4  E105               	bnz	u1210
  1258  0016B6  0EB4               	movlw	180
  1259  0016B8  0100               	movlb	0	; () banked
  1260  0016BA  5D80               	subwf	?_getTime& (0+255),w,b
  1261  0016BC  A0D8               	btfss	status,0,c
  1262  0016BE  D005               	goto	l1840
  1263  0016C0                     u1210:
  1264                           
  1265                           ; BSR set to: 0
  1266                           ;main.c: 87: stop = 1;
  1267  0016C0  0E00               	movlw	0
  1268  0016C2  0100               	movlb	0	; () banked
  1269  0016C4  6FDE               	movwf	(mainloop@stop+1)& (0+255),b
  1270  0016C6  0E01               	movlw	1
  1271  0016C8  6FDD               	movwf	mainloop@stop& (0+255),b
  1272  0016CA                     l1840:
  1273                           
  1274                           ; BSR set to: 0
  1275  0016CA  0100               	movlb	0	; () banked
  1276  0016CC  51DD               	movf	mainloop@stop& (0+255),w,b
  1277  0016CE  0100               	movlb	0	; () banked
  1278  0016D0  11DE               	iorwf	(mainloop@stop+1)& (0+255),w,b
  1279  0016D2  B4D8               	btfsc	status,2,c
  1280  0016D4  D752               	goto	l1808
  1281                           
  1282                           ; BSR set to: 0
  1283                           ;main.c: 88: }
  1284                           ;main.c: 89: }
  1285                           ;main.c: 90: (INTCONbits.GIE = 0);
  1286  0016D6  9EF2               	bcf	intcon,7,c	;volatile
  1287                           
  1288                           ; BSR set to: 0
  1289                           ;main.c: 92: showInfo(getTime() - startTime, sorted);
  1290  0016D8  C0E0  F0DB         	movff	mainloop@startTime,??_mainloop
  1291  0016DC  C0E1  F0DC         	movff	mainloop@startTime+1,??_mainloop+1
  1292  0016E0  0100               	movlb	0	; () banked
  1293  0016E2  1FDB               	comf	??_mainloop& (0+255),f,b
  1294  0016E4  1FDC               	comf	(??_mainloop+1)& (0+255),f,b
  1295  0016E6  4BDB               	infsnz	??_mainloop& (0+255),f,b
  1296  0016E8  2BDC               	incf	(??_mainloop+1)& (0+255),f,b
  1297  0016EA  ECF3  F00F         	call	_getTime	;wreg free
  1298  0016EE  0100               	movlb	0	; () banked
  1299  0016F0  51DB               	movf	??_mainloop& (0+255),w,b
  1300  0016F2  0100               	movlb	0	; () banked
  1301  0016F4  2580               	addwf	?_getTime& (0+255),w,b
  1302  0016F6  0100               	movlb	0	; () banked
  1303  0016F8  6FC9               	movwf	showInfo@time& (0+255),b
  1304  0016FA  0100               	movlb	0	; () banked
  1305  0016FC  51DC               	movf	(??_mainloop+1)& (0+255),w,b
  1306  0016FE  0100               	movlb	0	; () banked
  1307  001700  2181               	addwfc	(?_getTime+1)& (0+255),w,b
  1308  001702  0100               	movlb	0	; () banked
  1309  001704  6FCA               	movwf	(showInfo@time+1)& (0+255),b
  1310  001706  0EE2               	movlw	low mainloop@sorted
  1311  001708  0100               	movlb	0	; () banked
  1312  00170A  6FCB               	movwf	showInfo@sorted& (0+255),b
  1313  00170C  0E00               	movlw	high mainloop@sorted
  1314  00170E  0100               	movlb	0	; () banked
  1315  001710  6FCC               	movwf	(showInfo@sorted+1)& (0+255),b
  1316  001712  EC63  F008         	call	_showInfo	;wreg free
  1317                           
  1318                           ;main.c: 93: stopMoving();
  1319  001716  ECE9  F00F         	call	_stopMoving	;wreg free
  1320  00171A  0012               	return	
  1321  00171C                     __end_of_mainloop:
  1322                           	opt stack 0
  1323                           tblptru	equ	0xFF8
  1324                           tblptrh	equ	0xFF7
  1325                           tblptrl	equ	0xFF6
  1326                           tablat	equ	0xFF5
  1327                           intcon	equ	0xFF2
  1328                           intcon3	equ	0xFF0
  1329                           postinc0	equ	0xFEE
  1330                           wreg	equ	0xFE8
  1331                           postdec1	equ	0xFE5
  1332                           plusw1	equ	0xFE3
  1333                           fsr1l	equ	0xFE1
  1334                           plusw2	equ	0xFDB
  1335                           status	equ	0xFD8
  1336                           
  1337 ;; *************** function _stopMoving *****************
  1338 ;; Defined at:
  1339 ;;		line 126 in file "modules.c"
  1340 ;; Parameters:    Size  Location     Type
  1341 ;;		None
  1342 ;; Auto vars:     Size  Location     Type
  1343 ;;		None
  1344 ;; Return value:  Size  Location     Type
  1345 ;;                  1    wreg      void 
  1346 ;; Registers used:
  1347 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1348 ;; Tracked objects:
  1349 ;;		On entry : 0/0
  1350 ;;		On exit  : 0/0
  1351 ;;		Unchanged: 0/0
  1352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1356 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1357 ;;Total ram usage:        0 bytes
  1358 ;; Hardware stack levels used:    1
  1359 ;; Hardware stack levels required when called:   10
  1360 ;; This function calls:
  1361 ;;		_println
  1362 ;; This function is called by:
  1363 ;;		_mainloop
  1364 ;; This function uses a non-reentrant model
  1365 ;;
  1366                           
  1367                           	psect	text2
  1368  001FD2                     __ptext2:
  1369                           	opt stack 0
  1370  001FD2                     _stopMoving:
  1371                           	opt stack 19
  1372                           
  1373                           ;modules.c: 127: (INTCONbits.GIE = 0);
  1374                           
  1375                           ;incstack = 0
  1376  001FD2  9EF2               	bcf	intcon,7,c	;volatile
  1377                           
  1378                           ;modules.c: 128: println("Emergency");
  1379  001FD4  0EA3               	movlw	low STR_20
  1380  001FD6  0100               	movlb	0	; () banked
  1381  001FD8  6F9A               	movwf	println@data& (0+255),b
  1382  001FDA  0E10               	movlw	high STR_20
  1383  001FDC  0100               	movlb	0	; () banked
  1384  001FDE  6F9B               	movwf	(println@data+1)& (0+255),b
  1385  001FE0  EC69  F00C         	call	_println	;wreg free
  1386  001FE4                     l193:
  1387  001FE4  D7FF               	goto	l193
  1388  001FE6                     __end_of_stopMoving:
  1389                           	opt stack 0
  1390                           tblptru	equ	0xFF8
  1391                           tblptrh	equ	0xFF7
  1392                           tblptrl	equ	0xFF6
  1393                           tablat	equ	0xFF5
  1394                           intcon	equ	0xFF2
  1395                           intcon3	equ	0xFF0
  1396                           postinc0	equ	0xFEE
  1397                           wreg	equ	0xFE8
  1398                           postdec1	equ	0xFE5
  1399                           plusw1	equ	0xFE3
  1400                           fsr1l	equ	0xFE1
  1401                           plusw2	equ	0xFDB
  1402                           status	equ	0xFD8
  1403                           
  1404 ;; *************** function _showInfo *****************
  1405 ;; Defined at:
  1406 ;;		line 44 in file "modules.c"
  1407 ;; Parameters:    Size  Location     Type
  1408 ;;  time            2   73[BANK0 ] unsigned int 
  1409 ;;  sorted          2   75[BANK0 ] PTR unsigned int 
  1410 ;;		 -> mainloop@sorted(8), 
  1411 ;; Auto vars:     Size  Location     Type
  1412 ;;  type            2   85[BANK0 ] int 
  1413 ;; Return value:  Size  Location     Type
  1414 ;;                  1    wreg      void 
  1415 ;; Registers used:
  1416 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1417 ;; Tracked objects:
  1418 ;;		On entry : 0/0
  1419 ;;		On exit  : 0/0
  1420 ;;		Unchanged: 0/0
  1421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1422 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1423 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1424 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1425 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1426 ;;Total ram usage:       14 bytes
  1427 ;; Hardware stack levels used:    1
  1428 ;; Hardware stack levels required when called:   10
  1429 ;; This function calls:
  1430 ;;		_printf
  1431 ;;		_println
  1432 ;; This function is called by:
  1433 ;;		_mainloop
  1434 ;; This function uses a non-reentrant model
  1435 ;;
  1436                           
  1437                           	psect	text3
  1438  0010C6                     __ptext3:
  1439                           	opt stack 0
  1440  0010C6                     _showInfo:
  1441                           	opt stack 19
  1442                           
  1443                           ;modules.c: 45: (INTCONbits.GIE = 0);
  1444                           
  1445                           ;incstack = 0
  1446  0010C6  9EF2               	bcf	intcon,7,c	;volatile
  1447                           
  1448                           ;modules.c: 46: println("Sorting Complete");
  1449  0010C8  0E0B               	movlw	low STR_4
  1450  0010CA  0100               	movlb	0	; () banked
  1451  0010CC  6F9A               	movwf	println@data& (0+255),b
  1452  0010CE  0E10               	movlw	high STR_4
  1453  0010D0  0100               	movlb	0	; () banked
  1454  0010D2  6F9B               	movwf	(println@data+1)& (0+255),b
  1455  0010D4  EC69  F00C         	call	_println	;wreg free
  1456                           
  1457                           ;modules.c: 47: println(" ");
  1458  0010D8  0EC3               	movlw	low STR_5
  1459  0010DA  0100               	movlb	0	; () banked
  1460  0010DC  6F9A               	movwf	println@data& (0+255),b
  1461  0010DE  0E10               	movlw	high STR_5
  1462  0010E0  0100               	movlb	0	; () banked
  1463  0010E2  6F9B               	movwf	(println@data+1)& (0+255),b
  1464  0010E4  EC69  F00C         	call	_println	;wreg free
  1465                           
  1466                           ;modules.c: 48: _delay((unsigned long)((1000)*(8000000/4000.0)));
  1467  0010E8  0E0B               	movlw	11
  1468  0010EA  0100               	movlb	0	; () banked
  1469  0010EC  6FCE               	movwf	(??_showInfo+1)& (0+255),b
  1470  0010EE  0E26               	movlw	38
  1471  0010F0  0100               	movlb	0	; () banked
  1472  0010F2  6FCD               	movwf	??_showInfo& (0+255),b
  1473  0010F4  0E5D               	movlw	93
  1474  0010F6                     u1277:
  1475  0010F6  2EE8               	decfsz	wreg,f,c
  1476  0010F8  D7FE               	bra	u1277
  1477  0010FA  2FCD               	decfsz	??_showInfo& (0+255),f,b
  1478  0010FC  D7FC               	bra	u1277
  1479  0010FE  2FCE               	decfsz	(??_showInfo+1)& (0+255),f,b
  1480  001100  D7FA               	bra	u1277
  1481  001102  D000               	nop2	
  1482                           
  1483                           ;modules.c: 49: println("Press a number");
  1484  001104  0E1C               	movlw	low STR_6
  1485  001106  0100               	movlb	0	; () banked
  1486  001108  6F9A               	movwf	println@data& (0+255),b
  1487  00110A  0E10               	movlw	high STR_6
  1488  00110C  0100               	movlb	0	; () banked
  1489  00110E  6F9B               	movwf	(println@data+1)& (0+255),b
  1490  001110  EC69  F00C         	call	_println	;wreg free
  1491                           
  1492                           ;modules.c: 50: println("For more info");
  1493  001114  0E47               	movlw	low STR_7
  1494  001116  0100               	movlb	0	; () banked
  1495  001118  6F9A               	movwf	println@data& (0+255),b
  1496  00111A  0E10               	movlw	high STR_7
  1497  00111C  0100               	movlb	0	; () banked
  1498  00111E  6F9B               	movwf	(println@data+1)& (0+255),b
  1499  001120  EC69  F00C         	call	_println	;wreg free
  1500                           
  1501                           ;modules.c: 51: int type = 0;
  1502  001124  0E00               	movlw	0
  1503  001126  0100               	movlb	0	; () banked
  1504  001128  6FD6               	movwf	(showInfo@type+1)& (0+255),b
  1505  00112A  0E00               	movlw	0
  1506  00112C  6FD5               	movwf	showInfo@type& (0+255),b
  1507  00112E                     l1734:
  1508                           
  1509                           ;modules.c: 53: type = captureKeypad;
  1510  00112E  0E1F               	movlw	high _captureKeypad
  1511  001130  0100               	movlb	0	; () banked
  1512  001132  6FD6               	movwf	(showInfo@type+1)& (0+255),b
  1513  001134  0EB4               	movlw	low _captureKeypad
  1514  001136  6FD5               	movwf	showInfo@type& (0+255),b
  1515                           
  1516                           ;modules.c: 54: switch (type) {
  1517  001138  D0DA               	goto	l1762
  1518  00113A                     l1736:
  1519                           
  1520                           ; BSR set to: 0
  1521                           ;modules.c: 56: println("Time Elapsed:");
  1522  00113A  0E2B               	movlw	low STR_8
  1523  00113C  0100               	movlb	0	; () banked
  1524  00113E  6F9A               	movwf	println@data& (0+255),b
  1525  001140  0E10               	movlw	high STR_8
  1526  001142  0100               	movlb	0	; () banked
  1527  001144  6F9B               	movwf	(println@data+1)& (0+255),b
  1528  001146  EC69  F00C         	call	_println	;wreg free
  1529                           
  1530                           ;modules.c: 57: printf("%d seconds", time);
  1531  00114A  0E83               	movlw	low STR_9
  1532  00114C  0100               	movlb	0	; () banked
  1533  00114E  6F8C               	movwf	printf@f& (0+255),b
  1534  001150  0E10               	movlw	high STR_9
  1535  001152  0100               	movlb	0	; () banked
  1536  001154  6F8D               	movwf	(printf@f+1)& (0+255),b
  1537  001156  C0C9  F08E         	movff	showInfo@time,?_printf+2
  1538  00115A  C0CA  F08F         	movff	showInfo@time+1,?_printf+3
  1539  00115E  EC98  F009         	call	_printf	;wreg free
  1540                           
  1541                           ;modules.c: 58: break;
  1542  001162  D7E5               	goto	l1734
  1543  001164                     l1740:
  1544                           
  1545                           ;modules.c: 60: println("Total Sorted:");
  1546  001164  0E39               	movlw	low STR_10
  1547  001166  0100               	movlb	0	; () banked
  1548  001168  6F9A               	movwf	println@data& (0+255),b
  1549  00116A  0E10               	movlw	high STR_10
  1550  00116C  0100               	movlb	0	; () banked
  1551  00116E  6F9B               	movwf	(println@data+1)& (0+255),b
  1552  001170  EC69  F00C         	call	_println	;wreg free
  1553                           
  1554                           ;modules.c: 61: printf("%d batteries", sorted[0] + sorted[1] + sorted[2] + sorted[3]);
  1555  001174  0E55               	movlw	low STR_11
  1556  001176  0100               	movlb	0	; () banked
  1557  001178  6F8C               	movwf	printf@f& (0+255),b
  1558  00117A  0E10               	movlw	high STR_11
  1559  00117C  0100               	movlb	0	; () banked
  1560  00117E  6F8D               	movwf	(printf@f+1)& (0+255),b
  1561  001180  0100               	movlb	0	; () banked
  1562  001182  EE20 F006          	lfsr	2,6
  1563  001186  51CB               	movf	showInfo@sorted& (0+255),w,b
  1564  001188  26D9               	addwf	fsr2l,f,c
  1565  00118A  51CC               	movf	(showInfo@sorted+1)& (0+255),w,b
  1566  00118C  22DA               	addwfc	fsr2h,f,c
  1567  00118E  CFDE F0CD          	movff	postinc2,??_showInfo
  1568  001192  CFDD F0CE          	movff	postdec2,??_showInfo+1
  1569  001196  0100               	movlb	0	; () banked
  1570  001198  EE20 F004          	lfsr	2,4
  1571  00119C  51CB               	movf	showInfo@sorted& (0+255),w,b
  1572  00119E  26D9               	addwf	fsr2l,f,c
  1573  0011A0  51CC               	movf	(showInfo@sorted+1)& (0+255),w,b
  1574  0011A2  22DA               	addwfc	fsr2h,f,c
  1575  0011A4  CFDE F0CF          	movff	postinc2,??_showInfo+2
  1576  0011A8  CFDD F0D0          	movff	postdec2,??_showInfo+3
  1577  0011AC  0100               	movlb	0	; () banked
  1578  0011AE  EE20 F002          	lfsr	2,2
  1579  0011B2  51CB               	movf	showInfo@sorted& (0+255),w,b
  1580  0011B4  26D9               	addwf	fsr2l,f,c
  1581  0011B6  51CC               	movf	(showInfo@sorted+1)& (0+255),w,b
  1582  0011B8  22DA               	addwfc	fsr2h,f,c
  1583  0011BA  CFDE F0D1          	movff	postinc2,??_showInfo+4
  1584  0011BE  CFDD F0D2          	movff	postdec2,??_showInfo+5
  1585  0011C2  C0CB  FFD9         	movff	showInfo@sorted,fsr2l
  1586  0011C6  C0CC  FFDA         	movff	showInfo@sorted+1,fsr2h
  1587  0011CA  CFDE F0D3          	movff	postinc2,??_showInfo+6
  1588  0011CE  CFDD F0D4          	movff	postdec2,??_showInfo+7
  1589  0011D2  0100               	movlb	0	; () banked
  1590  0011D4  51D1               	movf	(??_showInfo+4)& (0+255),w,b
  1591  0011D6  0100               	movlb	0	; () banked
  1592  0011D8  27D3               	addwf	(??_showInfo+6)& (0+255),f,b
  1593  0011DA  0100               	movlb	0	; () banked
  1594  0011DC  51D2               	movf	(??_showInfo+5)& (0+255),w,b
  1595  0011DE  0100               	movlb	0	; () banked
  1596  0011E0  23D4               	addwfc	(??_showInfo+7)& (0+255),f,b
  1597  0011E2  0100               	movlb	0	; () banked
  1598  0011E4  51CF               	movf	(??_showInfo+2)& (0+255),w,b
  1599  0011E6  0100               	movlb	0	; () banked
  1600  0011E8  27D3               	addwf	(??_showInfo+6)& (0+255),f,b
  1601  0011EA  0100               	movlb	0	; () banked
  1602  0011EC  51D0               	movf	(??_showInfo+3)& (0+255),w,b
  1603  0011EE  0100               	movlb	0	; () banked
  1604  0011F0  23D4               	addwfc	(??_showInfo+7)& (0+255),f,b
  1605  0011F2  0100               	movlb	0	; () banked
  1606  0011F4  51CD               	movf	??_showInfo& (0+255),w,b
  1607  0011F6  0100               	movlb	0	; () banked
  1608  0011F8  25D3               	addwf	(??_showInfo+6)& (0+255),w,b
  1609  0011FA  0100               	movlb	0	; () banked
  1610  0011FC  6F8E               	movwf	(?_printf+2)& (0+255),b
  1611  0011FE  0100               	movlb	0	; () banked
  1612  001200  51CE               	movf	(??_showInfo+1)& (0+255),w,b
  1613  001202  0100               	movlb	0	; () banked
  1614  001204  21D4               	addwfc	(??_showInfo+7)& (0+255),w,b
  1615  001206  0100               	movlb	0	; () banked
  1616  001208  6F8F               	movwf	(?_printf+3)& (0+255),b
  1617  00120A  EC98  F009         	call	_printf	;wreg free
  1618                           
  1619                           ;modules.c: 62: break;
  1620  00120E  D78F               	goto	l1734
  1621  001210                     l1744:
  1622                           
  1623                           ;modules.c: 64: println("AA Sorted:");
  1624  001210  0E6D               	movlw	low STR_12
  1625  001212  0100               	movlb	0	; () banked
  1626  001214  6F9A               	movwf	println@data& (0+255),b
  1627  001216  0E10               	movlw	high STR_12
  1628  001218  0100               	movlb	0	; () banked
  1629  00121A  6F9B               	movwf	(println@data+1)& (0+255),b
  1630  00121C  EC69  F00C         	call	_println	;wreg free
  1631                           
  1632                           ;modules.c: 65: printf("%d", sorted[0]);
  1633  001220  0EBD               	movlw	low STR_13
  1634  001222  0100               	movlb	0	; () banked
  1635  001224  6F8C               	movwf	printf@f& (0+255),b
  1636  001226  0E10               	movlw	high STR_13
  1637  001228  0100               	movlb	0	; () banked
  1638  00122A  6F8D               	movwf	(printf@f+1)& (0+255),b
  1639  00122C  C0CB  FFD9         	movff	showInfo@sorted,fsr2l
  1640  001230  C0CC  FFDA         	movff	showInfo@sorted+1,fsr2h
  1641  001234  CFDE F08E          	movff	postinc2,?_printf+2
  1642  001238  CFDD F08F          	movff	postdec2,?_printf+3
  1643  00123C  EC98  F009         	call	_printf	;wreg free
  1644                           
  1645                           ;modules.c: 66: break;
  1646  001240  D776               	goto	l1734
  1647  001242                     l1748:
  1648                           
  1649                           ;modules.c: 68: println("C Sorted:");
  1650  001242  0E99               	movlw	low STR_14
  1651  001244  0100               	movlb	0	; () banked
  1652  001246  6F9A               	movwf	println@data& (0+255),b
  1653  001248  0E10               	movlw	high STR_14
  1654  00124A  0100               	movlb	0	; () banked
  1655  00124C  6F9B               	movwf	(println@data+1)& (0+255),b
  1656  00124E  EC69  F00C         	call	_println	;wreg free
  1657                           
  1658                           ;modules.c: 69: printf("%d", sorted[1]);
  1659  001252  0EBD               	movlw	low STR_13
  1660  001254  0100               	movlb	0	; () banked
  1661  001256  6F8C               	movwf	printf@f& (0+255),b
  1662  001258  0E10               	movlw	high STR_13
  1663  00125A  0100               	movlb	0	; () banked
  1664  00125C  6F8D               	movwf	(printf@f+1)& (0+255),b
  1665  00125E  0100               	movlb	0	; () banked
  1666  001260  EE20 F002          	lfsr	2,2
  1667  001264  51CB               	movf	showInfo@sorted& (0+255),w,b
  1668  001266  26D9               	addwf	fsr2l,f,c
  1669  001268  51CC               	movf	(showInfo@sorted+1)& (0+255),w,b
  1670  00126A  22DA               	addwfc	fsr2h,f,c
  1671  00126C  CFDE F08E          	movff	postinc2,?_printf+2
  1672  001270  CFDD F08F          	movff	postdec2,?_printf+3
  1673  001274  EC98  F009         	call	_printf	;wreg free
  1674                           
  1675                           ;modules.c: 70: break;
  1676  001278  D75A               	goto	l1734
  1677  00127A                     l1752:
  1678                           
  1679                           ;modules.c: 72: println("9V Sorted:");
  1680  00127A  0E78               	movlw	low STR_16
  1681  00127C  0100               	movlb	0	; () banked
  1682  00127E  6F9A               	movwf	println@data& (0+255),b
  1683  001280  0E10               	movlw	high STR_16
  1684  001282  0100               	movlb	0	; () banked
  1685  001284  6F9B               	movwf	(println@data+1)& (0+255),b
  1686  001286  EC69  F00C         	call	_println	;wreg free
  1687                           
  1688                           ;modules.c: 73: printf("%d", sorted[2]);
  1689  00128A  0EBD               	movlw	low STR_13
  1690  00128C  0100               	movlb	0	; () banked
  1691  00128E  6F8C               	movwf	printf@f& (0+255),b
  1692  001290  0E10               	movlw	high STR_13
  1693  001292  0100               	movlb	0	; () banked
  1694  001294  6F8D               	movwf	(printf@f+1)& (0+255),b
  1695  001296  0100               	movlb	0	; () banked
  1696  001298  EE20 F004          	lfsr	2,4
  1697  00129C  51CB               	movf	showInfo@sorted& (0+255),w,b
  1698  00129E  26D9               	addwf	fsr2l,f,c
  1699  0012A0  51CC               	movf	(showInfo@sorted+1)& (0+255),w,b
  1700  0012A2  22DA               	addwfc	fsr2h,f,c
  1701  0012A4  CFDE F08E          	movff	postinc2,?_printf+2
  1702  0012A8  CFDD F08F          	movff	postdec2,?_printf+3
  1703  0012AC  EC98  F009         	call	_printf	;wreg free
  1704                           
  1705                           ;modules.c: 74: break;
  1706  0012B0  D73E               	goto	l1734
  1707  0012B2                     l1756:
  1708                           
  1709                           ;modules.c: 76: println("Uncharged:");
  1710  0012B2  0E62               	movlw	low STR_18
  1711  0012B4  0100               	movlb	0	; () banked
  1712  0012B6  6F9A               	movwf	println@data& (0+255),b
  1713  0012B8  0E10               	movlw	high STR_18
  1714  0012BA  0100               	movlb	0	; () banked
  1715  0012BC  6F9B               	movwf	(println@data+1)& (0+255),b
  1716  0012BE  EC69  F00C         	call	_println	;wreg free
  1717                           
  1718                           ;modules.c: 77: printf("%d", sorted[3]);
  1719  0012C2  0EBD               	movlw	low STR_13
  1720  0012C4  0100               	movlb	0	; () banked
  1721  0012C6  6F8C               	movwf	printf@f& (0+255),b
  1722  0012C8  0E10               	movlw	high STR_13
  1723  0012CA  0100               	movlb	0	; () banked
  1724  0012CC  6F8D               	movwf	(printf@f+1)& (0+255),b
  1725  0012CE  0100               	movlb	0	; () banked
  1726  0012D0  EE20 F006          	lfsr	2,6
  1727  0012D4  51CB               	movf	showInfo@sorted& (0+255),w,b
  1728  0012D6  26D9               	addwf	fsr2l,f,c
  1729  0012D8  51CC               	movf	(showInfo@sorted+1)& (0+255),w,b
  1730  0012DA  22DA               	addwfc	fsr2h,f,c
  1731  0012DC  CFDE F08E          	movff	postinc2,?_printf+2
  1732  0012E0  CFDD F08F          	movff	postdec2,?_printf+3
  1733  0012E4  EC98  F009         	call	_printf	;wreg free
  1734                           
  1735                           ;modules.c: 78: break;
  1736  0012E8  D722               	goto	l1734
  1737  0012EA                     l160:
  1738                           
  1739                           ; BSR set to: 0
  1740  0012EA  00FF               	reset		;# 
  1741                           
  1742                           ;modules.c: 83: }
  1743                           
  1744                           ;modules.c: 82: break;
  1745                           
  1746                           ;modules.c: 81: default:
  1747  0012EC  D720               	goto	l1734
  1748  0012EE                     l1762:
  1749  0012EE  C0D5  F0CD         	movff	showInfo@type,??_showInfo
  1750  0012F2  C0D6  F0CE         	movff	showInfo@type+1,??_showInfo+1
  1751                           
  1752                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1753                           ; Switch size 1, requested type "space"
  1754                           ; Number of cases is 1, Range of values is 0 to 0
  1755                           ; switch strategies available:
  1756                           ; Name         Instructions Cycles
  1757                           ; simple_byte            4     3 (average)
  1758                           ;	Chosen strategy is simple_byte
  1759  0012F6  0100               	movlb	0	; () banked
  1760  0012F8  51CE               	movf	(??_showInfo+1)& (0+255),w,b
  1761  0012FA  0A00               	xorlw	0	; case 0
  1762  0012FC  A4D8               	btfss	status,2,c
  1763  0012FE  D717               	goto	l1734
  1764                           
  1765                           ; BSR set to: 0
  1766                           ; Switch size 1, requested type "space"
  1767                           ; Number of cases is 7, Range of values is 0 to 15
  1768                           ; switch strategies available:
  1769                           ; Name         Instructions Cycles
  1770                           ; simple_byte           22    12 (average)
  1771                           ;	Chosen strategy is simple_byte
  1772  001300  0100               	movlb	0	; () banked
  1773  001302  51CD               	movf	??_showInfo& (0+255),w,b
  1774  001304  0A00               	xorlw	0	; case 0
  1775  001306  B4D8               	btfsc	status,2,c
  1776  001308  D718               	goto	l1736
  1777  00130A  0A01               	xorlw	1	; case 1
  1778  00130C  B4D8               	btfsc	status,2,c
  1779  00130E  D72A               	goto	l1740
  1780  001310  0A03               	xorlw	3	; case 2
  1781  001312  B4D8               	btfsc	status,2,c
  1782  001314  D77D               	goto	l1744
  1783  001316  0A01               	xorlw	1	; case 3
  1784  001318  B4D8               	btfsc	status,2,c
  1785  00131A  D793               	goto	l1748
  1786  00131C  0A07               	xorlw	7	; case 4
  1787  00131E  B4D8               	btfsc	status,2,c
  1788  001320  D7AC               	goto	l1752
  1789  001322  0A01               	xorlw	1	; case 5
  1790  001324  B4D8               	btfsc	status,2,c
  1791  001326  D7C5               	goto	l1756
  1792  001328  0A0A               	xorlw	10	; case 15
  1793  00132A  B4D8               	btfsc	status,2,c
  1794  00132C  D7DE               	goto	l160
  1795                           
  1796                           ; BSR set to: 0
  1797                           
  1798                           ; BSR set to: 0
  1799  00132E  D6FF               	goto	l1734
  1800  001330                     __end_of_showInfo:
  1801                           	opt stack 0
  1802                           tblptru	equ	0xFF8
  1803                           tblptrh	equ	0xFF7
  1804                           tblptrl	equ	0xFF6
  1805                           tablat	equ	0xFF5
  1806                           intcon	equ	0xFF2
  1807                           intcon3	equ	0xFF0
  1808                           postinc0	equ	0xFEE
  1809                           wreg	equ	0xFE8
  1810                           postdec1	equ	0xFE5
  1811                           plusw1	equ	0xFE3
  1812                           fsr1l	equ	0xFE1
  1813                           postinc2	equ	0xFDE
  1814                           postdec2	equ	0xFDD
  1815                           plusw2	equ	0xFDB
  1816                           fsr2h	equ	0xFDA
  1817                           fsr2l	equ	0xFD9
  1818                           status	equ	0xFD8
  1819                           
  1820 ;; *************** function _println *****************
  1821 ;; Defined at:
  1822 ;;		line 18 in file "modules.c"
  1823 ;; Parameters:    Size  Location     Type
  1824 ;;  data            2   26[BANK0 ] PTR unsigned char 
  1825 ;;		 -> STR_20(10), STR_18(11), STR_16(11), STR_14(10), 
  1826 ;;		 -> STR_12(11), STR_10(14), STR_8(14), STR_7(14), 
  1827 ;;		 -> STR_6(15), STR_5(2), STR_4(17), STR_2(9), 
  1828 ;;		 -> STR_1(11), 
  1829 ;; Auto vars:     Size  Location     Type
  1830 ;;  output         41   30[BANK0 ] unsigned char [41]
  1831 ;;  i               2   71[BANK0 ] int 
  1832 ;; Return value:  Size  Location     Type
  1833 ;;                  1    wreg      void 
  1834 ;; Registers used:
  1835 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1836 ;; Tracked objects:
  1837 ;;		On entry : 0/0
  1838 ;;		On exit  : 0/0
  1839 ;;		Unchanged: 0/0
  1840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1841 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1842 ;;      Locals:         0      43       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1843 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1844 ;;      Totals:         0      47       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1845 ;;Total ram usage:       47 bytes
  1846 ;; Hardware stack levels used:    1
  1847 ;; Hardware stack levels required when called:    9
  1848 ;; This function calls:
  1849 ;;		_printf
  1850 ;; This function is called by:
  1851 ;;		_mainloop
  1852 ;;		_main
  1853 ;;		_showInfo
  1854 ;;		_stopMoving
  1855 ;; This function uses a non-reentrant model
  1856 ;;
  1857                           
  1858                           	psect	text4
  1859  0018D2                     __ptext4:
  1860                           	opt stack 0
  1861  0018D2                     _println:
  1862                           	opt stack 21
  1863                           
  1864                           ;modules.c: 19: int i = 0;
  1865                           
  1866                           ; BSR set to: 0
  1867                           ;incstack = 0
  1868  0018D2  0E00               	movlw	0
  1869  0018D4  0100               	movlb	0	; () banked
  1870  0018D6  6FC8               	movwf	(println@i+1)& (0+255),b
  1871  0018D8  0E00               	movlw	0
  1872  0018DA  6FC7               	movwf	println@i& (0+255),b
  1873                           
  1874                           ; BSR set to: 0
  1875                           ;modules.c: 20: char output[] = "                                        ";
  1876  0018DC  EE21  F000         	lfsr	2,println@F3053
  1877  0018E0  EE10  F09E         	lfsr	1,println@output
  1878  0018E4  0E28               	movlw	40
  1879  0018E6                     u881:
  1880  0018E6  CFDB FFE3          	movff	plusw2,plusw1
  1881  0018EA  06E8               	decf	wreg,f,c
  1882  0018EC  E2FC               	bc	u881
  1883                           
  1884                           ;modules.c: 21: while (data[i] != '\0') {
  1885  0018EE  D01F               	goto	l1568
  1886  0018F0                     l1564:
  1887                           
  1888                           ; BSR set to: 0
  1889                           ;modules.c: 22: output[i] = data[i++];
  1890  0018F0  0100               	movlb	0	; () banked
  1891  0018F2  51C7               	movf	println@i& (0+255),w,b
  1892  0018F4  0100               	movlb	0	; () banked
  1893  0018F6  259A               	addwf	println@data& (0+255),w,b
  1894  0018F8  0100               	movlb	0	; () banked
  1895  0018FA  6F9C               	movwf	??_println& (0+255),b
  1896  0018FC  0100               	movlb	0	; () banked
  1897  0018FE  51C8               	movf	(println@i+1)& (0+255),w,b
  1898  001900  0100               	movlb	0	; () banked
  1899  001902  219B               	addwfc	(println@data+1)& (0+255),w,b
  1900  001904  0100               	movlb	0	; () banked
  1901  001906  6F9D               	movwf	(??_println+1)& (0+255),b
  1902  001908  C09C  FFF6         	movff	??_println,tblptrl
  1903  00190C  C09D  FFF7         	movff	??_println+1,tblptrh
  1904  001910                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1905  001910  6AF8               	clrf	tblptru,c
  1906  001912                     	endif
  1907  001912                     	if	0	;tblptru may be non-zero
  1908  001912                     	endif
  1909  001912  0E9E               	movlw	low println@output
  1910  001914  0100               	movlb	0	; () banked
  1911  001916  25C7               	addwf	println@i& (0+255),w,b
  1912  001918  6ED9               	movwf	fsr2l,c
  1913  00191A  0E00               	movlw	high println@output
  1914  00191C  0100               	movlb	0	; () banked
  1915  00191E  21C8               	addwfc	(println@i+1)& (0+255),w,b
  1916  001920  6EDA               	movwf	fsr2h,c
  1917  001922  0008               	tblrd		*
  1918  001924  CFF5 FFDF          	movff	tablat,indf2
  1919                           
  1920                           ; BSR set to: 0
  1921  001928  0100               	movlb	0	; () banked
  1922  00192A  4BC7               	infsnz	println@i& (0+255),f,b
  1923  00192C  2BC8               	incf	(println@i+1)& (0+255),f,b
  1924  00192E                     l1568:
  1925                           
  1926                           ; BSR set to: 0
  1927  00192E  0100               	movlb	0	; () banked
  1928  001930  51C7               	movf	println@i& (0+255),w,b
  1929  001932  0100               	movlb	0	; () banked
  1930  001934  259A               	addwf	println@data& (0+255),w,b
  1931  001936  0100               	movlb	0	; () banked
  1932  001938  6F9C               	movwf	??_println& (0+255),b
  1933  00193A  0100               	movlb	0	; () banked
  1934  00193C  51C8               	movf	(println@i+1)& (0+255),w,b
  1935  00193E  0100               	movlb	0	; () banked
  1936  001940  219B               	addwfc	(println@data+1)& (0+255),w,b
  1937  001942  0100               	movlb	0	; () banked
  1938  001944  6F9D               	movwf	(??_println+1)& (0+255),b
  1939  001946  C09C  FFF6         	movff	??_println,tblptrl
  1940  00194A  C09D  FFF7         	movff	??_println+1,tblptrh
  1941  00194E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1942  00194E  6AF8               	clrf	tblptru,c
  1943  001950                     	endif
  1944  001950                     	if	0	;tblptru may be non-zero
  1945  001950                     	endif
  1946  001950  0008               	tblrd		*
  1947  001952  50F5               	movf	tablat,w,c
  1948  001954  0900               	iorlw	0
  1949  001956  A4D8               	btfss	status,2,c
  1950  001958  D7CB               	goto	l1564
  1951                           
  1952                           ; BSR set to: 0
  1953                           ;modules.c: 23: }
  1954                           ;modules.c: 24: printf("%s", output);
  1955                           
  1956                           ; BSR set to: 0
  1957  00195A  0EC0               	movlw	low STR_3
  1958  00195C  0100               	movlb	0	; () banked
  1959  00195E  6F8C               	movwf	printf@f& (0+255),b
  1960  001960  0E10               	movlw	high STR_3
  1961  001962  0100               	movlb	0	; () banked
  1962  001964  6F8D               	movwf	(printf@f+1)& (0+255),b
  1963  001966  0E9E               	movlw	low println@output
  1964  001968  0100               	movlb	0	; () banked
  1965  00196A  6F8E               	movwf	(?_printf+2)& (0+255),b
  1966  00196C  0E00               	movlw	high println@output
  1967  00196E  0100               	movlb	0	; () banked
  1968  001970  6F8F               	movwf	(?_printf+3)& (0+255),b
  1969  001972  EC98  F009         	call	_printf	;wreg free
  1970  001976  0012               	return		;funcret
  1971  001978                     __end_of_println:
  1972                           	opt stack 0
  1973                           tblptru	equ	0xFF8
  1974                           tblptrh	equ	0xFF7
  1975                           tblptrl	equ	0xFF6
  1976                           tablat	equ	0xFF5
  1977                           intcon	equ	0xFF2
  1978                           intcon3	equ	0xFF0
  1979                           postinc0	equ	0xFEE
  1980                           wreg	equ	0xFE8
  1981                           postdec1	equ	0xFE5
  1982                           plusw1	equ	0xFE3
  1983                           fsr1l	equ	0xFE1
  1984                           indf2	equ	0xFDF
  1985                           postinc2	equ	0xFDE
  1986                           postdec2	equ	0xFDD
  1987                           plusw2	equ	0xFDB
  1988                           fsr2h	equ	0xFDA
  1989                           fsr2l	equ	0xFD9
  1990                           status	equ	0xFD8
  1991                           
  1992 ;; *************** function _printf *****************
  1993 ;; Defined at:
  1994 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  1995 ;; Parameters:    Size  Location     Type
  1996 ;;  f               2   12[BANK0 ] PTR const unsigned char 
  1997 ;;		 -> STR_19(3), STR_17(3), STR_15(3), STR_13(3), 
  1998 ;;		 -> STR_11(13), STR_9(11), STR_3(3), 
  1999 ;; Auto vars:     Size  Location     Type
  2000 ;;  tmpval          4    0        struct .
  2001 ;;  val             2   23[BANK0 ] unsigned int 
  2002 ;;  cp              2   21[BANK0 ] PTR const unsigned char 
  2003 ;;		 -> STR_21(7), println@output(41), 
  2004 ;;  ap              2   19[BANK0 ] PTR void [1]
  2005 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2006 ;;  len             2    0        unsigned int 
  2007 ;;  c               1   25[BANK0 ] char 
  2008 ;;  prec            1   18[BANK0 ] char 
  2009 ;;  flag            1   17[BANK0 ] unsigned char 
  2010 ;; Return value:  Size  Location     Type
  2011 ;;                  2   12[BANK0 ] int 
  2012 ;; Registers used:
  2013 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2014 ;; Tracked objects:
  2015 ;;		On entry : 0/0
  2016 ;;		On exit  : 0/0
  2017 ;;		Unchanged: 0/0
  2018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2019 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2020 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2021 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2022 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2023 ;;Total ram usage:       14 bytes
  2024 ;; Hardware stack levels used:    1
  2025 ;; Hardware stack levels required when called:    8
  2026 ;; This function calls:
  2027 ;;		___lwdiv
  2028 ;;		___lwmod
  2029 ;;		_putch
  2030 ;; This function is called by:
  2031 ;;		_println
  2032 ;;		_showInfo
  2033 ;; This function uses a non-reentrant model
  2034 ;;
  2035                           
  2036                           	psect	text5
  2037  001330                     __ptext5:
  2038                           	opt stack 0
  2039  001330                     _printf:
  2040                           	opt stack 21
  2041                           
  2042                           ;doprnt.c: 466: va_list ap;
  2043                           ;doprnt.c: 499: signed char c;
  2044                           ;doprnt.c: 506: signed char prec;
  2045                           ;doprnt.c: 508: unsigned char flag;
  2046                           ;doprnt.c: 523: union {
  2047                           ;doprnt.c: 524: unsigned long vd;
  2048                           ;doprnt.c: 525: double integ;
  2049                           ;doprnt.c: 526: } tmpval;
  2050                           ;doprnt.c: 528: unsigned int val;
  2051                           ;doprnt.c: 529: unsigned len;
  2052                           ;doprnt.c: 530: const char * cp;
  2053                           ;doprnt.c: 533: *ap = __va_start();
  2054                           
  2055                           ;incstack = 0
  2056  001330  0E8E               	movlw	low (?_printf+2)
  2057  001332  0100               	movlb	0	; () banked
  2058  001334  6F93               	movwf	printf@ap& (0+255),b
  2059  001336  0E00               	movlw	high (?_printf+2)
  2060  001338  0100               	movlb	0	; () banked
  2061  00133A  6F94               	movwf	(printf@ap+1)& (0+255),b
  2062                           
  2063                           ;doprnt.c: 536: while(c = *f++) {
  2064  00133C  D0E5               	goto	l1516
  2065  00133E                     l1456:
  2066                           
  2067                           ; BSR set to: 0
  2068                           ;doprnt.c: 538: if(c != '%')
  2069  00133E  0E25               	movlw	37
  2070  001340  0100               	movlb	0	; () banked
  2071  001342  1999               	xorwf	printf@c& (0+255),w,b
  2072  001344  B4D8               	btfsc	status,2,c
  2073  001346  D005               	goto	l1460
  2074                           
  2075                           ; BSR set to: 0
  2076                           ;doprnt.c: 540: {
  2077                           ;doprnt.c: 541: (putch(c) );
  2078  001348  0100               	movlb	0	; () banked
  2079  00134A  5199               	movf	printf@c& (0+255),w,b
  2080  00134C  ECFD  F00F         	call	_putch
  2081                           
  2082                           ;doprnt.c: 542: continue;
  2083  001350  D0DB               	goto	l1516
  2084  001352                     l1460:
  2085                           
  2086                           ;doprnt.c: 543: }
  2087                           ;doprnt.c: 548: flag = 0;
  2088  001352  0E00               	movlw	0
  2089  001354  0100               	movlb	0	; () banked
  2090  001356  6F91               	movwf	printf@flag& (0+255),b
  2091                           
  2092                           ;doprnt.c: 635: switch(c = *f++) {
  2093  001358  D045               	goto	l1478
  2094  00135A                     l1462:
  2095                           
  2096                           ; BSR set to: 0
  2097                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  2098  00135A  C093  FFD9         	movff	printf@ap,fsr2l
  2099  00135E  C094  FFDA         	movff	printf@ap+1,fsr2h
  2100  001362  CFDE F095          	movff	postinc2,printf@cp
  2101  001366  CFDD F096          	movff	postdec2,printf@cp+1
  2102                           
  2103                           ; BSR set to: 0
  2104  00136A  0E02               	movlw	2
  2105  00136C  0100               	movlb	0	; () banked
  2106  00136E  2793               	addwf	printf@ap& (0+255),f,b
  2107  001370  0E00               	movlw	0
  2108  001372  2394               	addwfc	(printf@ap+1)& (0+255),f,b
  2109                           
  2110                           ; BSR set to: 0
  2111                           ;doprnt.c: 740: if(!cp)
  2112  001374  0100               	movlb	0	; () banked
  2113  001376  5195               	movf	printf@cp& (0+255),w,b
  2114  001378  0100               	movlb	0	; () banked
  2115  00137A  1196               	iorwf	(printf@cp+1)& (0+255),w,b
  2116  00137C  A4D8               	btfss	status,2,c
  2117  00137E  D01D               	goto	l1474
  2118                           
  2119                           ; BSR set to: 0
  2120                           ;doprnt.c: 741: cp = "(null)";
  2121  001380  0EB6               	movlw	low STR_21
  2122  001382  0100               	movlb	0	; () banked
  2123  001384  6F95               	movwf	printf@cp& (0+255),b
  2124  001386  0E10               	movlw	high STR_21
  2125  001388  0100               	movlb	0	; () banked
  2126  00138A  6F96               	movwf	(printf@cp+1)& (0+255),b
  2127                           
  2128                           ; BSR set to: 0
  2129                           ;doprnt.c: 777: while(*cp)
  2130  00138C  D016               	goto	l1474
  2131  00138E                     l1470:
  2132                           
  2133                           ;doprnt.c: 778: (putch(*cp++) );
  2134  00138E  C095  FFF6         	movff	printf@cp,tblptrl
  2135  001392  C096  FFF7         	movff	printf@cp+1,tblptrh
  2136  001396  0E00               	movlw	low (__smallconst shr (0+16))
  2137  001398  6EF8               	movwf	tblptru,c
  2138  00139A  0E0F               	movlw	(high __ramtop+-1)
  2139  00139C  64F7               	cpfsgt	tblptrh,c
  2140  00139E  D003               	bra	u727
  2141  0013A0  0008               	tblrd		*
  2142  0013A2  50F5               	movf	tablat,w,c
  2143  0013A4  D005               	bra	u720
  2144  0013A6                     u727:
  2145  0013A6  CFF6 FFE9          	movff	tblptrl,fsr0l
  2146  0013AA  CFF7 FFEA          	movff	tblptrh,fsr0h
  2147  0013AE  50EF               	movf	indf0,w,c
  2148  0013B0                     u720:
  2149  0013B0  ECFD  F00F         	call	_putch
  2150  0013B4  0100               	movlb	0	; () banked
  2151  0013B6  4B95               	infsnz	printf@cp& (0+255),f,b
  2152  0013B8  2B96               	incf	(printf@cp+1)& (0+255),f,b
  2153  0013BA                     l1474:
  2154                           
  2155                           ; BSR set to: 0
  2156  0013BA  C095  FFF6         	movff	printf@cp,tblptrl
  2157  0013BE  C096  FFF7         	movff	printf@cp+1,tblptrh
  2158  0013C2  0E00               	movlw	low (__smallconst shr (0+16))
  2159  0013C4  6EF8               	movwf	tblptru,c
  2160  0013C6  0E0F               	movlw	(high __ramtop+-1)
  2161  0013C8  64F7               	cpfsgt	tblptrh,c
  2162  0013CA  D003               	bra	u737
  2163  0013CC  0008               	tblrd		*
  2164  0013CE  50F5               	movf	tablat,w,c
  2165  0013D0  D005               	bra	u730
  2166  0013D2                     u737:
  2167  0013D2  CFF6 FFE9          	movff	tblptrl,fsr0l
  2168  0013D6  CFF7 FFEA          	movff	tblptrh,fsr0h
  2169  0013DA  50EF               	movf	indf0,w,c
  2170  0013DC                     u730:
  2171  0013DC  0900               	iorlw	0
  2172  0013DE  B4D8               	btfsc	status,2,c
  2173  0013E0  D093               	goto	l1516
  2174  0013E2  D7D5               	goto	l1470
  2175  0013E4                     l1478:
  2176  0013E4  C08C  FFF6         	movff	printf@f,tblptrl
  2177  0013E8  C08D  FFF7         	movff	printf@f+1,tblptrh
  2178  0013EC  0100               	movlb	0	; () banked
  2179  0013EE  4B8C               	infsnz	printf@f& (0+255),f,b
  2180  0013F0  2B8D               	incf	(printf@f+1)& (0+255),f,b
  2181  0013F2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2182  0013F2  6AF8               	clrf	tblptru,c
  2183  0013F4                     	endif
  2184  0013F4                     	if	0	;tblptru may be non-zero
  2185  0013F4                     	endif
  2186  0013F4  0008               	tblrd		*
  2187  0013F6  CFF5 F099          	movff	tablat,printf@c
  2188  0013FA  0100               	movlb	0	; () banked
  2189  0013FC  5199               	movf	printf@c& (0+255),w,b
  2190                           
  2191                           ; Switch size 1, requested type "space"
  2192                           ; Number of cases is 4, Range of values is 0 to 115
  2193                           ; switch strategies available:
  2194                           ; Name         Instructions Cycles
  2195                           ; simple_byte           13     7 (average)
  2196                           ;	Chosen strategy is simple_byte
  2197  0013FE  0A00               	xorlw	0	; case 0
  2198  001400  B4D8               	btfsc	status,2,c
  2199  001402  0012               	return	
  2200  001404  0A64               	xorlw	100	; case 100
  2201  001406  B4D8               	btfsc	status,2,c
  2202  001408  D007               	goto	l1480
  2203  00140A  0A0D               	xorlw	13	; case 105
  2204  00140C  B4D8               	btfsc	status,2,c
  2205  00140E  D004               	goto	l1480
  2206  001410  0A1A               	xorlw	26	; case 115
  2207  001412  B4D8               	btfsc	status,2,c
  2208  001414  D7A2               	goto	l1462
  2209  001416  D078               	goto	l1516
  2210  001418                     l1480:
  2211                           
  2212                           ;doprnt.c: 1253: {
  2213                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2214  001418  C093  FFD9         	movff	printf@ap,fsr2l
  2215  00141C  C094  FFDA         	movff	printf@ap+1,fsr2h
  2216  001420  CFDE F097          	movff	postinc2,printf@val
  2217  001424  CFDD F098          	movff	postdec2,printf@val+1
  2218  001428  0E02               	movlw	2
  2219  00142A  0100               	movlb	0	; () banked
  2220  00142C  2793               	addwf	printf@ap& (0+255),f,b
  2221  00142E  0E00               	movlw	0
  2222  001430  2394               	addwfc	(printf@ap+1)& (0+255),f,b
  2223                           
  2224                           ; BSR set to: 0
  2225                           ;doprnt.c: 1261: if((int)val < 0) {
  2226  001432  0100               	movlb	0	; () banked
  2227  001434  AF98               	btfss	(printf@val+1)& (0+255),7,b
  2228  001436  D008               	goto	l1490
  2229                           
  2230                           ; BSR set to: 0
  2231                           ;doprnt.c: 1262: flag |= 0x03;
  2232  001438  0E03               	movlw	3
  2233  00143A  0100               	movlb	0	; () banked
  2234  00143C  1391               	iorwf	printf@flag& (0+255),f,b
  2235                           
  2236                           ; BSR set to: 0
  2237                           ;doprnt.c: 1263: val = -val;
  2238  00143E  0100               	movlb	0	; () banked
  2239  001440  6D97               	negf	printf@val& (0+255),b
  2240  001442  1F98               	comf	(printf@val+1)& (0+255),f,b
  2241  001444  B0D8               	btfsc	status,0,c
  2242  001446  2B98               	incf	(printf@val+1)& (0+255),f,b
  2243  001448                     l1490:
  2244                           
  2245                           ; BSR set to: 0
  2246                           ;doprnt.c: 1264: }
  2247                           ;doprnt.c: 1266: }
  2248                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2249  001448  0E01               	movlw	1
  2250  00144A  0100               	movlb	0	; () banked
  2251  00144C  6F99               	movwf	printf@c& (0+255),b
  2252  00144E                     l1492:
  2253                           
  2254                           ; BSR set to: 0
  2255  00144E  0E05               	movlw	5
  2256  001450  0100               	movlb	0	; () banked
  2257  001452  1999               	xorwf	printf@c& (0+255),w,b
  2258  001454  B4D8               	btfsc	status,2,c
  2259  001456  D019               	goto	l1504
  2260                           
  2261                           ; BSR set to: 0
  2262                           ;doprnt.c: 1306: if(val < dpowers[c])
  2263                           
  2264                           ; BSR set to: 0
  2265                           
  2266                           ; BSR set to: 0
  2267  001458  0100               	movlb	0	; () banked
  2268  00145A  5199               	movf	printf@c& (0+255),w,b
  2269  00145C  0D02               	mullw	2
  2270  00145E  0E01               	movlw	low _dpowers
  2271  001460  24F3               	addwf	prodl,w,c
  2272  001462  6EF6               	movwf	tblptrl,c
  2273  001464  0E10               	movlw	high _dpowers
  2274  001466  20F4               	addwfc	prodh,w,c
  2275  001468  6EF7               	movwf	tblptrh,c
  2276  00146A                     	if	1	;There are 3 active tblptr bytes
  2277  00146A  6AF8               	clrf	tblptru,c
  2278  00146C  0E00               	movlw	low (__mediumconst shr (0+16))
  2279  00146E  22F8               	addwfc	tblptru,f,c
  2280  001470                     	endif
  2281  001470  0009               	tblrd		*+
  2282  001472  50F5               	movf	tablat,w,c
  2283  001474  0100               	movlb	0	; () banked
  2284  001476  5D97               	subwf	printf@val& (0+255),w,b
  2285  001478  0009               	tblrd		*+
  2286  00147A  50F5               	movf	tablat,w,c
  2287  00147C  0100               	movlb	0	; () banked
  2288  00147E  5998               	subwfb	(printf@val+1)& (0+255),w,b
  2289  001480  A0D8               	btfss	status,0,c
  2290  001482  D003               	goto	l1504
  2291                           
  2292                           ; BSR set to: 0
  2293                           
  2294                           ; BSR set to: 0
  2295                           
  2296                           ; BSR set to: 0
  2297                           ;doprnt.c: 1307: break;
  2298  001484  0100               	movlb	0	; () banked
  2299  001486  2B99               	incf	printf@c& (0+255),f,b
  2300  001488  D7E2               	goto	l1492
  2301  00148A                     l1504:
  2302                           
  2303                           ; BSR set to: 0
  2304                           ;doprnt.c: 1422: {
  2305                           ;doprnt.c: 1438: if(flag & 0x03)
  2306  00148A  C091  F090         	movff	printf@flag,??_printf
  2307  00148E  0E03               	movlw	3
  2308  001490  0100               	movlb	0	; () banked
  2309  001492  1790               	andwf	??_printf& (0+255),f,b
  2310  001494  B4D8               	btfsc	status,2,c
  2311  001496  D003               	goto	l1508
  2312                           
  2313                           ; BSR set to: 0
  2314                           ;doprnt.c: 1439: (putch('-') );
  2315  001498  0E2D               	movlw	45
  2316  00149A  ECFD  F00F         	call	_putch
  2317  00149E                     l1508:
  2318                           
  2319                           ;doprnt.c: 1469: }
  2320                           ;doprnt.c: 1472: prec = c;
  2321  00149E  C099  F092         	movff	printf@c,printf@prec
  2322                           
  2323                           ;doprnt.c: 1474: while(prec--) {
  2324  0014A2  D02C               	goto	l1514
  2325  0014A4                     l1510:
  2326                           
  2327                           ;doprnt.c: 1478: {
  2328                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2329  0014A4  0100               	movlb	0	; () banked
  2330  0014A6  5192               	movf	printf@prec& (0+255),w,b
  2331  0014A8  0D02               	mullw	2
  2332  0014AA  0E01               	movlw	low _dpowers
  2333  0014AC  24F3               	addwf	prodl,w,c
  2334  0014AE  6EF6               	movwf	tblptrl,c
  2335  0014B0  0E10               	movlw	high _dpowers
  2336  0014B2  20F4               	addwfc	prodh,w,c
  2337  0014B4  6EF7               	movwf	tblptrh,c
  2338  0014B6                     	if	1	;There are 3 active tblptr bytes
  2339  0014B6  6AF8               	clrf	tblptru,c
  2340  0014B8  0E00               	movlw	low (__mediumconst shr (0+16))
  2341  0014BA  22F8               	addwfc	tblptru,f,c
  2342  0014BC                     	endif
  2343  0014BC  0009               	tblrd		*+
  2344  0014BE  CFF5 F082          	movff	tablat,___lwdiv@divisor
  2345  0014C2  000A               	tblrd		*-
  2346  0014C4  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  2347  0014C8  C097  F080         	movff	printf@val,___lwdiv@dividend
  2348  0014CC  C098  F081         	movff	printf@val+1,___lwdiv@dividend+1
  2349  0014D0  EC03  F00E         	call	___lwdiv	;wreg free
  2350  0014D4  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  2351  0014D8  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  2352  0014DC  0E00               	movlw	0
  2353  0014DE  0100               	movlb	0	; () banked
  2354  0014E0  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  2355  0014E2  0E0A               	movlw	10
  2356  0014E4  6F89               	movwf	___lwmod@divisor& (0+255),b
  2357  0014E6  EC73  F00E         	call	___lwmod	;wreg free
  2358  0014EA  0100               	movlb	0	; () banked
  2359  0014EC  5187               	movf	?___lwmod& (0+255),w,b
  2360  0014EE  0F30               	addlw	48
  2361  0014F0  0100               	movlb	0	; () banked
  2362  0014F2  6F99               	movwf	printf@c& (0+255),b
  2363                           
  2364                           ; BSR set to: 0
  2365                           ;doprnt.c: 1523: }
  2366                           ;doprnt.c: 1524: (putch(c) );
  2367  0014F4  0100               	movlb	0	; () banked
  2368  0014F6  5199               	movf	printf@c& (0+255),w,b
  2369  0014F8  ECFD  F00F         	call	_putch
  2370  0014FC                     l1514:
  2371  0014FC  0100               	movlb	0	; () banked
  2372  0014FE  0792               	decf	printf@prec& (0+255),f,b
  2373  001500  0100               	movlb	0	; () banked
  2374  001502  2992               	incf	printf@prec& (0+255),w,b
  2375  001504  A4D8               	btfss	status,2,c
  2376  001506  D7CE               	goto	l1510
  2377  001508                     l1516:
  2378  001508  C08C  FFF6         	movff	printf@f,tblptrl
  2379  00150C  C08D  FFF7         	movff	printf@f+1,tblptrh
  2380  001510  0100               	movlb	0	; () banked
  2381  001512  4B8C               	infsnz	printf@f& (0+255),f,b
  2382  001514  2B8D               	incf	(printf@f+1)& (0+255),f,b
  2383  001516                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2384  001516  6AF8               	clrf	tblptru,c
  2385  001518                     	endif
  2386  001518                     	if	0	;tblptru may be non-zero
  2387  001518                     	endif
  2388  001518  0008               	tblrd		*
  2389  00151A  CFF5 F099          	movff	tablat,printf@c
  2390  00151E  0100               	movlb	0	; () banked
  2391  001520  5199               	movf	printf@c& (0+255),w,b
  2392  001522  B4D8               	btfsc	status,2,c
  2393  001524  0012               	return	
  2394  001526  D70B               	goto	l1456
  2395  001528                     __end_of_printf:
  2396                           	opt stack 0
  2397                           tblptru	equ	0xFF8
  2398                           tblptrh	equ	0xFF7
  2399                           tblptrl	equ	0xFF6
  2400                           tablat	equ	0xFF5
  2401                           prodh	equ	0xFF4
  2402                           prodl	equ	0xFF3
  2403                           intcon	equ	0xFF2
  2404                           intcon3	equ	0xFF0
  2405                           indf0	equ	0xFEF
  2406                           postinc0	equ	0xFEE
  2407                           fsr0h	equ	0xFEA
  2408                           fsr0l	equ	0xFE9
  2409                           wreg	equ	0xFE8
  2410                           postdec1	equ	0xFE5
  2411                           plusw1	equ	0xFE3
  2412                           fsr1l	equ	0xFE1
  2413                           indf2	equ	0xFDF
  2414                           postinc2	equ	0xFDE
  2415                           postdec2	equ	0xFDD
  2416                           plusw2	equ	0xFDB
  2417                           fsr2h	equ	0xFDA
  2418                           fsr2l	equ	0xFD9
  2419                           status	equ	0xFD8
  2420                           
  2421 ;; *************** function _putch *****************
  2422 ;; Defined at:
  2423 ;;		line 31 in file "lcd.c"
  2424 ;; Parameters:    Size  Location     Type
  2425 ;;  data            1    wreg     unsigned char 
  2426 ;; Auto vars:     Size  Location     Type
  2427 ;;  data            1    2[BANK0 ] unsigned char 
  2428 ;; Return value:  Size  Location     Type
  2429 ;;                  1    wreg      void 
  2430 ;; Registers used:
  2431 ;;		wreg, status,2, status,0, cstack
  2432 ;; Tracked objects:
  2433 ;;		On entry : 0/0
  2434 ;;		On exit  : 0/0
  2435 ;;		Unchanged: 0/0
  2436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2438 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2440 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2441 ;;Total ram usage:        1 bytes
  2442 ;; Hardware stack levels used:    1
  2443 ;; Hardware stack levels required when called:    7
  2444 ;; This function calls:
  2445 ;;		_lcdNibble
  2446 ;; This function is called by:
  2447 ;;		_printf
  2448 ;; This function uses a non-reentrant model
  2449 ;;
  2450                           
  2451                           	psect	text6
  2452  001FFA                     __ptext6:
  2453                           	opt stack 0
  2454  001FFA                     _putch:
  2455                           	opt stack 21
  2456                           
  2457                           ; BSR set to: 0
  2458                           ;incstack = 0
  2459                           ;putch@data stored from wreg
  2460  001FFA  0100               	movlb	0	; () banked
  2461  001FFC  6F82               	movwf	putch@data& (0+255),b
  2462                           
  2463                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  2464  001FFE  848C               	bsf	3980,2,c	;volatile
  2465                           
  2466                           ;lcd.c: 33: lcdNibble(data);
  2467  002000  0100               	movlb	0	; () banked
  2468  002002  5182               	movf	putch@data& (0+255),w,b
  2469  002004  EC3F  F00E         	call	_lcdNibble
  2470  002008  0012               	return		;funcret
  2471  00200A                     __end_of_putch:
  2472                           	opt stack 0
  2473                           tblptru	equ	0xFF8
  2474                           tblptrh	equ	0xFF7
  2475                           tblptrl	equ	0xFF6
  2476                           tablat	equ	0xFF5
  2477                           prodh	equ	0xFF4
  2478                           prodl	equ	0xFF3
  2479                           intcon	equ	0xFF2
  2480                           intcon3	equ	0xFF0
  2481                           indf0	equ	0xFEF
  2482                           postinc0	equ	0xFEE
  2483                           fsr0h	equ	0xFEA
  2484                           fsr0l	equ	0xFE9
  2485                           wreg	equ	0xFE8
  2486                           postdec1	equ	0xFE5
  2487                           plusw1	equ	0xFE3
  2488                           fsr1l	equ	0xFE1
  2489                           indf2	equ	0xFDF
  2490                           postinc2	equ	0xFDE
  2491                           postdec2	equ	0xFDD
  2492                           plusw2	equ	0xFDB
  2493                           fsr2h	equ	0xFDA
  2494                           fsr2l	equ	0xFD9
  2495                           status	equ	0xFD8
  2496                           
  2497 ;; *************** function ___lwmod *****************
  2498 ;; Defined at:
  2499 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  2500 ;; Parameters:    Size  Location     Type
  2501 ;;  dividend        2    7[BANK0 ] unsigned int 
  2502 ;;  divisor         2    9[BANK0 ] unsigned int 
  2503 ;; Auto vars:     Size  Location     Type
  2504 ;;  counter         1   11[BANK0 ] unsigned char 
  2505 ;; Return value:  Size  Location     Type
  2506 ;;                  2    7[BANK0 ] unsigned int 
  2507 ;; Registers used:
  2508 ;;		wreg, status,2, status,0
  2509 ;; Tracked objects:
  2510 ;;		On entry : 0/0
  2511 ;;		On exit  : 0/0
  2512 ;;		Unchanged: 0/0
  2513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2514 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2515 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2517 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2518 ;;Total ram usage:        5 bytes
  2519 ;; Hardware stack levels used:    1
  2520 ;; Hardware stack levels required when called:    6
  2521 ;; This function calls:
  2522 ;;		Nothing
  2523 ;; This function is called by:
  2524 ;;		_printf
  2525 ;; This function uses a non-reentrant model
  2526 ;;
  2527                           
  2528                           	psect	text7
  2529  001CE6                     __ptext7:
  2530                           	opt stack 0
  2531  001CE6                     ___lwmod:
  2532                           	opt stack 22
  2533                           
  2534                           ;incstack = 0
  2535  001CE6  0100               	movlb	0	; () banked
  2536  001CE8  5189               	movf	___lwmod@divisor& (0+255),w,b
  2537  001CEA  0100               	movlb	0	; () banked
  2538  001CEC  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  2539  001CEE  B4D8               	btfsc	status,2,c
  2540  001CF0  D026               	goto	l653
  2541                           
  2542                           ; BSR set to: 0
  2543  001CF2  0E01               	movlw	1
  2544  001CF4  0100               	movlb	0	; () banked
  2545  001CF6  6F8B               	movwf	___lwmod@counter& (0+255),b
  2546  001CF8  D006               	goto	l1426
  2547  001CFA                     l1424:
  2548                           
  2549                           ; BSR set to: 0
  2550  001CFA  0100               	movlb	0	; () banked
  2551  001CFC  90D8               	bcf	status,0,c
  2552  001CFE  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  2553  001D00  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  2554  001D02  0100               	movlb	0	; () banked
  2555  001D04  2B8B               	incf	___lwmod@counter& (0+255),f,b
  2556  001D06                     l1426:
  2557                           
  2558                           ; BSR set to: 0
  2559  001D06  0100               	movlb	0	; () banked
  2560  001D08  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  2561  001D0A  D7F7               	goto	l1424
  2562  001D0C                     l1428:
  2563                           
  2564                           ; BSR set to: 0
  2565  001D0C  0100               	movlb	0	; () banked
  2566  001D0E  5189               	movf	___lwmod@divisor& (0+255),w,b
  2567  001D10  0100               	movlb	0	; () banked
  2568  001D12  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  2569  001D14  0100               	movlb	0	; () banked
  2570  001D16  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  2571  001D18  0100               	movlb	0	; () banked
  2572  001D1A  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  2573  001D1C  A0D8               	btfss	status,0,c
  2574  001D1E  D008               	goto	l1432
  2575                           
  2576                           ; BSR set to: 0
  2577  001D20  0100               	movlb	0	; () banked
  2578  001D22  5189               	movf	___lwmod@divisor& (0+255),w,b
  2579  001D24  0100               	movlb	0	; () banked
  2580  001D26  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  2581  001D28  0100               	movlb	0	; () banked
  2582  001D2A  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  2583  001D2C  0100               	movlb	0	; () banked
  2584  001D2E  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  2585  001D30                     l1432:
  2586                           
  2587                           ; BSR set to: 0
  2588  001D30  0100               	movlb	0	; () banked
  2589  001D32  90D8               	bcf	status,0,c
  2590  001D34  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  2591  001D36  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  2592                           
  2593                           ; BSR set to: 0
  2594  001D38  0100               	movlb	0	; () banked
  2595  001D3A  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  2596  001D3C  D7E7               	goto	l1428
  2597  001D3E                     l653:
  2598                           
  2599                           ; BSR set to: 0
  2600  001D3E  C087  F087         	movff	___lwmod@dividend,?___lwmod
  2601  001D42  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  2602                           
  2603                           ; BSR set to: 0
  2604  001D46  0012               	return		;funcret
  2605  001D48                     __end_of___lwmod:
  2606                           	opt stack 0
  2607                           tblptru	equ	0xFF8
  2608                           tblptrh	equ	0xFF7
  2609                           tblptrl	equ	0xFF6
  2610                           tablat	equ	0xFF5
  2611                           prodh	equ	0xFF4
  2612                           prodl	equ	0xFF3
  2613                           intcon	equ	0xFF2
  2614                           intcon3	equ	0xFF0
  2615                           indf0	equ	0xFEF
  2616                           postinc0	equ	0xFEE
  2617                           fsr0h	equ	0xFEA
  2618                           fsr0l	equ	0xFE9
  2619                           wreg	equ	0xFE8
  2620                           postdec1	equ	0xFE5
  2621                           plusw1	equ	0xFE3
  2622                           fsr1l	equ	0xFE1
  2623                           indf2	equ	0xFDF
  2624                           postinc2	equ	0xFDE
  2625                           postdec2	equ	0xFDD
  2626                           plusw2	equ	0xFDB
  2627                           fsr2h	equ	0xFDA
  2628                           fsr2l	equ	0xFD9
  2629                           status	equ	0xFD8
  2630                           
  2631 ;; *************** function ___lwdiv *****************
  2632 ;; Defined at:
  2633 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  2634 ;; Parameters:    Size  Location     Type
  2635 ;;  dividend        2    0[BANK0 ] unsigned int 
  2636 ;;  divisor         2    2[BANK0 ] unsigned int 
  2637 ;; Auto vars:     Size  Location     Type
  2638 ;;  quotient        2    4[BANK0 ] unsigned int 
  2639 ;;  counter         1    6[BANK0 ] unsigned char 
  2640 ;; Return value:  Size  Location     Type
  2641 ;;                  2    0[BANK0 ] unsigned int 
  2642 ;; Registers used:
  2643 ;;		wreg, status,2, status,0
  2644 ;; Tracked objects:
  2645 ;;		On entry : 0/0
  2646 ;;		On exit  : 0/0
  2647 ;;		Unchanged: 0/0
  2648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2649 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2650 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2652 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2653 ;;Total ram usage:        7 bytes
  2654 ;; Hardware stack levels used:    1
  2655 ;; Hardware stack levels required when called:    6
  2656 ;; This function calls:
  2657 ;;		Nothing
  2658 ;; This function is called by:
  2659 ;;		_printf
  2660 ;; This function uses a non-reentrant model
  2661 ;;
  2662                           
  2663                           	psect	text8
  2664  001C06                     __ptext8:
  2665                           	opt stack 0
  2666  001C06                     ___lwdiv:
  2667                           	opt stack 22
  2668                           
  2669                           ; BSR set to: 0
  2670                           ;incstack = 0
  2671  001C06  0E00               	movlw	0
  2672  001C08  0100               	movlb	0	; () banked
  2673  001C0A  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
  2674  001C0C  0E00               	movlw	0
  2675  001C0E  6F84               	movwf	___lwdiv@quotient& (0+255),b
  2676                           
  2677                           ; BSR set to: 0
  2678  001C10  0100               	movlb	0	; () banked
  2679  001C12  5182               	movf	___lwdiv@divisor& (0+255),w,b
  2680  001C14  0100               	movlb	0	; () banked
  2681  001C16  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  2682  001C18  B4D8               	btfsc	status,2,c
  2683  001C1A  D02C               	goto	l643
  2684                           
  2685                           ; BSR set to: 0
  2686  001C1C  0E01               	movlw	1
  2687  001C1E  0100               	movlb	0	; () banked
  2688  001C20  6F86               	movwf	___lwdiv@counter& (0+255),b
  2689  001C22  D006               	goto	l1406
  2690  001C24                     l1404:
  2691                           
  2692                           ; BSR set to: 0
  2693  001C24  0100               	movlb	0	; () banked
  2694  001C26  90D8               	bcf	status,0,c
  2695  001C28  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  2696  001C2A  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  2697  001C2C  0100               	movlb	0	; () banked
  2698  001C2E  2B86               	incf	___lwdiv@counter& (0+255),f,b
  2699  001C30                     l1406:
  2700                           
  2701                           ; BSR set to: 0
  2702  001C30  0100               	movlb	0	; () banked
  2703  001C32  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  2704  001C34  D7F7               	goto	l1404
  2705  001C36                     l1408:
  2706                           
  2707                           ; BSR set to: 0
  2708  001C36  0100               	movlb	0	; () banked
  2709  001C38  90D8               	bcf	status,0,c
  2710  001C3A  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
  2711  001C3C  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  2712                           
  2713                           ; BSR set to: 0
  2714  001C3E  0100               	movlb	0	; () banked
  2715  001C40  5182               	movf	___lwdiv@divisor& (0+255),w,b
  2716  001C42  0100               	movlb	0	; () banked
  2717  001C44  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  2718  001C46  0100               	movlb	0	; () banked
  2719  001C48  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  2720  001C4A  0100               	movlb	0	; () banked
  2721  001C4C  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  2722  001C4E  A0D8               	btfss	status,0,c
  2723  001C50  D00A               	goto	l1416
  2724                           
  2725                           ; BSR set to: 0
  2726  001C52  0100               	movlb	0	; () banked
  2727  001C54  5182               	movf	___lwdiv@divisor& (0+255),w,b
  2728  001C56  0100               	movlb	0	; () banked
  2729  001C58  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  2730  001C5A  0100               	movlb	0	; () banked
  2731  001C5C  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  2732  001C5E  0100               	movlb	0	; () banked
  2733  001C60  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  2734                           
  2735                           ; BSR set to: 0
  2736  001C62  0100               	movlb	0	; () banked
  2737  001C64  8184               	bsf	___lwdiv@quotient& (0+255),0,b
  2738  001C66                     l1416:
  2739                           
  2740                           ; BSR set to: 0
  2741  001C66  0100               	movlb	0	; () banked
  2742  001C68  90D8               	bcf	status,0,c
  2743  001C6A  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  2744  001C6C  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  2745                           
  2746                           ; BSR set to: 0
  2747  001C6E  0100               	movlb	0	; () banked
  2748  001C70  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
  2749  001C72  D7E1               	goto	l1408
  2750  001C74                     l643:
  2751                           
  2752                           ; BSR set to: 0
  2753  001C74  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
  2754  001C78  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2755                           
  2756                           ; BSR set to: 0
  2757  001C7C  0012               	return		;funcret
  2758  001C7E                     __end_of___lwdiv:
  2759                           	opt stack 0
  2760                           tblptru	equ	0xFF8
  2761                           tblptrh	equ	0xFF7
  2762                           tblptrl	equ	0xFF6
  2763                           tablat	equ	0xFF5
  2764                           prodh	equ	0xFF4
  2765                           prodl	equ	0xFF3
  2766                           intcon	equ	0xFF2
  2767                           intcon3	equ	0xFF0
  2768                           indf0	equ	0xFEF
  2769                           postinc0	equ	0xFEE
  2770                           fsr0h	equ	0xFEA
  2771                           fsr0l	equ	0xFE9
  2772                           wreg	equ	0xFE8
  2773                           postdec1	equ	0xFE5
  2774                           plusw1	equ	0xFE3
  2775                           fsr1l	equ	0xFE1
  2776                           indf2	equ	0xFDF
  2777                           postinc2	equ	0xFDE
  2778                           postdec2	equ	0xFDD
  2779                           plusw2	equ	0xFDB
  2780                           fsr2h	equ	0xFDA
  2781                           fsr2l	equ	0xFD9
  2782                           status	equ	0xFD8
  2783                           
  2784 ;; *************** function _moveXMotors *****************
  2785 ;; Defined at:
  2786 ;;		line 94 in file "modules.c"
  2787 ;; Parameters:    Size  Location     Type
  2788 ;;		None
  2789 ;; Auto vars:     Size  Location     Type
  2790 ;;		None
  2791 ;; Return value:  Size  Location     Type
  2792 ;;                  2   44[None  ] int 
  2793 ;; Registers used:
  2794 ;;		None
  2795 ;; Tracked objects:
  2796 ;;		On entry : 0/0
  2797 ;;		On exit  : 0/0
  2798 ;;		Unchanged: 0/0
  2799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2803 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2804 ;;Total ram usage:        0 bytes
  2805 ;; Hardware stack levels used:    1
  2806 ;; Hardware stack levels required when called:    6
  2807 ;; This function calls:
  2808 ;;		Nothing
  2809 ;; This function is called by:
  2810 ;;		_mainloop
  2811 ;; This function uses a non-reentrant model
  2812 ;;
  2813                           
  2814                           	psect	text9
  2815  002046                     __ptext9:
  2816                           	opt stack 0
  2817  002046                     _moveXMotors:
  2818                           	opt stack 23
  2819                           
  2820                           ; BSR set to: 0
  2821                           ;incstack = 0
  2822  002046  0012               	return		;funcret
  2823  002048                     __end_of_moveXMotors:
  2824                           	opt stack 0
  2825                           tblptru	equ	0xFF8
  2826                           tblptrh	equ	0xFF7
  2827                           tblptrl	equ	0xFF6
  2828                           tablat	equ	0xFF5
  2829                           prodh	equ	0xFF4
  2830                           prodl	equ	0xFF3
  2831                           intcon	equ	0xFF2
  2832                           intcon3	equ	0xFF0
  2833                           indf0	equ	0xFEF
  2834                           postinc0	equ	0xFEE
  2835                           fsr0h	equ	0xFEA
  2836                           fsr0l	equ	0xFE9
  2837                           wreg	equ	0xFE8
  2838                           postdec1	equ	0xFE5
  2839                           plusw1	equ	0xFE3
  2840                           fsr1l	equ	0xFE1
  2841                           indf2	equ	0xFDF
  2842                           postinc2	equ	0xFDE
  2843                           postdec2	equ	0xFDD
  2844                           plusw2	equ	0xFDB
  2845                           fsr2h	equ	0xFDA
  2846                           fsr2l	equ	0xFD9
  2847                           status	equ	0xFD8
  2848                           
  2849 ;; *************** function _moveSmallNose *****************
  2850 ;; Defined at:
  2851 ;;		line 112 in file "modules.c"
  2852 ;; Parameters:    Size  Location     Type
  2853 ;;  prev            2    0[BANK0 ] PTR int 
  2854 ;;		 -> main@smallNose(2), 
  2855 ;;  next            2    2[BANK0 ] int 
  2856 ;; Auto vars:     Size  Location     Type
  2857 ;;		None
  2858 ;; Return value:  Size  Location     Type
  2859 ;;                  1    wreg      void 
  2860 ;; Registers used:
  2861 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2862 ;; Tracked objects:
  2863 ;;		On entry : 0/0
  2864 ;;		On exit  : 0/0
  2865 ;;		Unchanged: 0/0
  2866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2867 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2869 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2870 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2871 ;;Total ram usage:        7 bytes
  2872 ;; Hardware stack levels used:    1
  2873 ;; Hardware stack levels required when called:    6
  2874 ;; This function calls:
  2875 ;;		Nothing
  2876 ;; This function is called by:
  2877 ;;		_mainloop
  2878 ;;		_main
  2879 ;; This function uses a non-reentrant model
  2880 ;;
  2881                           
  2882                           	psect	text10
  2883  001B0E                     __ptext10:
  2884                           	opt stack 0
  2885  001B0E                     _moveSmallNose:
  2886                           	opt stack 24
  2887                           
  2888                           ;modules.c: 115: if (*prev == next)return;
  2889                           
  2890                           ;incstack = 0
  2891  001B0E  C080  FFD9         	movff	moveSmallNose@prev,fsr2l
  2892  001B12  C081  FFDA         	movff	moveSmallNose@prev+1,fsr2h
  2893  001B16  0100               	movlb	0	; () banked
  2894  001B18  5182               	movf	moveSmallNose@next& (0+255),w,b
  2895  001B1A  18DE               	xorwf	postinc2,w,c
  2896  001B1C  E10B               	bnz	l1680
  2897  001B1E  0100               	movlb	0	; () banked
  2898  001B20  5183               	movf	(moveSmallNose@next+1)& (0+255),w,b
  2899  001B22  18DE               	xorwf	postinc2,w,c
  2900  001B24  B4D8               	btfsc	status,2,c
  2901  001B26  0012               	return	
  2902  001B28  D005               	goto	l1680
  2903  001B2A                     l1678:
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;modules.c: 118: *prev++;
  2907  001B2A  0E02               	movlw	2
  2908  001B2C  0100               	movlb	0	; () banked
  2909  001B2E  2780               	addwf	moveSmallNose@prev& (0+255),f,b
  2910  001B30  0E00               	movlw	0
  2911  001B32  2381               	addwfc	(moveSmallNose@prev+1)& (0+255),f,b
  2912  001B34                     l1680:
  2913                           
  2914                           ; BSR set to: 0
  2915  001B34  C080  FFD9         	movff	moveSmallNose@prev,fsr2l
  2916  001B38  C081  FFDA         	movff	moveSmallNose@prev+1,fsr2h
  2917  001B3C  0100               	movlb	0	; () banked
  2918  001B3E  5182               	movf	moveSmallNose@next& (0+255),w,b
  2919  001B40  5CDE               	subwf	postinc2,w,c
  2920  001B42  50DE               	movf	postinc2,w,c
  2921  001B44  0A80               	xorlw	128
  2922  001B46  0100               	movlb	0	; () banked
  2923  001B48  6F86               	movwf	(??_moveSmallNose+2)& (0+255),b
  2924  001B4A  0100               	movlb	0	; () banked
  2925  001B4C  5183               	movf	(moveSmallNose@next+1)& (0+255),w,b
  2926  001B4E  0A80               	xorlw	128
  2927  001B50  0100               	movlb	0	; () banked
  2928  001B52  5986               	subwfb	(??_moveSmallNose+2)& (0+255),w,b
  2929  001B54  B0D8               	btfsc	status,0,c
  2930  001B56  D006               	goto	l1684
  2931  001B58  D7E8               	goto	l1678
  2932  001B5A                     l1682:
  2933                           
  2934                           ; BSR set to: 0
  2935                           ;modules.c: 122: *prev--;
  2936  001B5A  0E02               	movlw	2
  2937  001B5C  0100               	movlb	0	; () banked
  2938  001B5E  5F80               	subwf	moveSmallNose@prev& (0+255),f,b
  2939  001B60  0E00               	movlw	0
  2940  001B62  5B81               	subwfb	(moveSmallNose@prev+1)& (0+255),f,b
  2941  001B64                     l1684:
  2942                           
  2943                           ; BSR set to: 0
  2944  001B64  C080  FFD9         	movff	moveSmallNose@prev,fsr2l
  2945  001B68  C081  FFDA         	movff	moveSmallNose@prev+1,fsr2h
  2946  001B6C  50DE               	movf	postinc2,w,c
  2947  001B6E  0100               	movlb	0	; () banked
  2948  001B70  5D82               	subwf	moveSmallNose@next& (0+255),w,b
  2949  001B72  0100               	movlb	0	; () banked
  2950  001B74  5183               	movf	(moveSmallNose@next+1)& (0+255),w,b
  2951  001B76  0A80               	xorlw	128
  2952  001B78  0100               	movlb	0	; () banked
  2953  001B7A  6F86               	movwf	(??_moveSmallNose+2)& (0+255),b
  2954  001B7C  50DE               	movf	postinc2,w,c
  2955  001B7E  0A80               	xorlw	128
  2956  001B80  0100               	movlb	0	; () banked
  2957  001B82  5986               	subwfb	(??_moveSmallNose+2)& (0+255),w,b
  2958  001B84  B0D8               	btfsc	status,0,c
  2959  001B86  0012               	return	
  2960  001B88  D7E8               	goto	l1682
  2961  001B8A                     __end_of_moveSmallNose:
  2962                           	opt stack 0
  2963                           tblptru	equ	0xFF8
  2964                           tblptrh	equ	0xFF7
  2965                           tblptrl	equ	0xFF6
  2966                           tablat	equ	0xFF5
  2967                           prodh	equ	0xFF4
  2968                           prodl	equ	0xFF3
  2969                           intcon	equ	0xFF2
  2970                           intcon3	equ	0xFF0
  2971                           indf0	equ	0xFEF
  2972                           postinc0	equ	0xFEE
  2973                           fsr0h	equ	0xFEA
  2974                           fsr0l	equ	0xFE9
  2975                           wreg	equ	0xFE8
  2976                           postdec1	equ	0xFE5
  2977                           plusw1	equ	0xFE3
  2978                           fsr1l	equ	0xFE1
  2979                           indf2	equ	0xFDF
  2980                           postinc2	equ	0xFDE
  2981                           postdec2	equ	0xFDD
  2982                           plusw2	equ	0xFDB
  2983                           fsr2h	equ	0xFDA
  2984                           fsr2l	equ	0xFD9
  2985                           status	equ	0xFD8
  2986                           
  2987 ;; *************** function _moveBigNose *****************
  2988 ;; Defined at:
  2989 ;;		line 98 in file "modules.c"
  2990 ;; Parameters:    Size  Location     Type
  2991 ;;  prev            2    0[BANK0 ] PTR int 
  2992 ;;		 -> main@bigNose(2), 
  2993 ;;  next            2    2[BANK0 ] int 
  2994 ;; Auto vars:     Size  Location     Type
  2995 ;;		None
  2996 ;; Return value:  Size  Location     Type
  2997 ;;                  1    wreg      void 
  2998 ;; Registers used:
  2999 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3000 ;; Tracked objects:
  3001 ;;		On entry : 0/0
  3002 ;;		On exit  : 0/0
  3003 ;;		Unchanged: 0/0
  3004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3005 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3007 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3008 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3009 ;;Total ram usage:        7 bytes
  3010 ;; Hardware stack levels used:    1
  3011 ;; Hardware stack levels required when called:    6
  3012 ;; This function calls:
  3013 ;;		Nothing
  3014 ;; This function is called by:
  3015 ;;		_mainloop
  3016 ;;		_main
  3017 ;; This function uses a non-reentrant model
  3018 ;;
  3019                           
  3020                           	psect	text11
  3021  001B8A                     __ptext11:
  3022                           	opt stack 0
  3023  001B8A                     _moveBigNose:
  3024                           	opt stack 24
  3025                           
  3026                           ;modules.c: 101: if (*prev == next)return;
  3027                           
  3028                           ; BSR set to: 0
  3029                           ;incstack = 0
  3030  001B8A  C080  FFD9         	movff	moveBigNose@prev,fsr2l
  3031  001B8E  C081  FFDA         	movff	moveBigNose@prev+1,fsr2h
  3032  001B92  0100               	movlb	0	; () banked
  3033  001B94  5182               	movf	moveBigNose@next& (0+255),w,b
  3034  001B96  18DE               	xorwf	postinc2,w,c
  3035  001B98  E10B               	bnz	l1692
  3036  001B9A  0100               	movlb	0	; () banked
  3037  001B9C  5183               	movf	(moveBigNose@next+1)& (0+255),w,b
  3038  001B9E  18DE               	xorwf	postinc2,w,c
  3039  001BA0  B4D8               	btfsc	status,2,c
  3040  001BA2  0012               	return	
  3041  001BA4  D005               	goto	l1692
  3042  001BA6                     l1690:
  3043                           
  3044                           ; BSR set to: 0
  3045                           ;modules.c: 104: *prev++;
  3046  001BA6  0E02               	movlw	2
  3047  001BA8  0100               	movlb	0	; () banked
  3048  001BAA  2780               	addwf	moveBigNose@prev& (0+255),f,b
  3049  001BAC  0E00               	movlw	0
  3050  001BAE  2381               	addwfc	(moveBigNose@prev+1)& (0+255),f,b
  3051  001BB0                     l1692:
  3052                           
  3053                           ; BSR set to: 0
  3054  001BB0  C080  FFD9         	movff	moveBigNose@prev,fsr2l
  3055  001BB4  C081  FFDA         	movff	moveBigNose@prev+1,fsr2h
  3056  001BB8  0100               	movlb	0	; () banked
  3057  001BBA  5182               	movf	moveBigNose@next& (0+255),w,b
  3058  001BBC  5CDE               	subwf	postinc2,w,c
  3059  001BBE  50DE               	movf	postinc2,w,c
  3060  001BC0  0A80               	xorlw	128
  3061  001BC2  0100               	movlb	0	; () banked
  3062  001BC4  6F86               	movwf	(??_moveBigNose+2)& (0+255),b
  3063  001BC6  0100               	movlb	0	; () banked
  3064  001BC8  5183               	movf	(moveBigNose@next+1)& (0+255),w,b
  3065  001BCA  0A80               	xorlw	128
  3066  001BCC  0100               	movlb	0	; () banked
  3067  001BCE  5986               	subwfb	(??_moveBigNose+2)& (0+255),w,b
  3068  001BD0  B0D8               	btfsc	status,0,c
  3069  001BD2  D006               	goto	l1696
  3070  001BD4  D7E8               	goto	l1690
  3071  001BD6                     l1694:
  3072                           
  3073                           ; BSR set to: 0
  3074                           ;modules.c: 108: *prev--;
  3075  001BD6  0E02               	movlw	2
  3076  001BD8  0100               	movlb	0	; () banked
  3077  001BDA  5F80               	subwf	moveBigNose@prev& (0+255),f,b
  3078  001BDC  0E00               	movlw	0
  3079  001BDE  5B81               	subwfb	(moveBigNose@prev+1)& (0+255),f,b
  3080  001BE0                     l1696:
  3081                           
  3082                           ; BSR set to: 0
  3083  001BE0  C080  FFD9         	movff	moveBigNose@prev,fsr2l
  3084  001BE4  C081  FFDA         	movff	moveBigNose@prev+1,fsr2h
  3085  001BE8  50DE               	movf	postinc2,w,c
  3086  001BEA  0100               	movlb	0	; () banked
  3087  001BEC  5D82               	subwf	moveBigNose@next& (0+255),w,b
  3088  001BEE  0100               	movlb	0	; () banked
  3089  001BF0  5183               	movf	(moveBigNose@next+1)& (0+255),w,b
  3090  001BF2  0A80               	xorlw	128
  3091  001BF4  0100               	movlb	0	; () banked
  3092  001BF6  6F86               	movwf	(??_moveBigNose+2)& (0+255),b
  3093  001BF8  50DE               	movf	postinc2,w,c
  3094  001BFA  0A80               	xorlw	128
  3095  001BFC  0100               	movlb	0	; () banked
  3096  001BFE  5986               	subwfb	(??_moveBigNose+2)& (0+255),w,b
  3097  001C00  B0D8               	btfsc	status,0,c
  3098  001C02  0012               	return	
  3099  001C04  D7E8               	goto	l1694
  3100  001C06                     __end_of_moveBigNose:
  3101                           	opt stack 0
  3102                           tblptru	equ	0xFF8
  3103                           tblptrh	equ	0xFF7
  3104                           tblptrl	equ	0xFF6
  3105                           tablat	equ	0xFF5
  3106                           prodh	equ	0xFF4
  3107                           prodl	equ	0xFF3
  3108                           intcon	equ	0xFF2
  3109                           intcon3	equ	0xFF0
  3110                           indf0	equ	0xFEF
  3111                           postinc0	equ	0xFEE
  3112                           fsr0h	equ	0xFEA
  3113                           fsr0l	equ	0xFE9
  3114                           wreg	equ	0xFE8
  3115                           postdec1	equ	0xFE5
  3116                           plusw1	equ	0xFE3
  3117                           fsr1l	equ	0xFE1
  3118                           indf2	equ	0xFDF
  3119                           postinc2	equ	0xFDE
  3120                           postdec2	equ	0xFDD
  3121                           plusw2	equ	0xFDB
  3122                           fsr2h	equ	0xFDA
  3123                           fsr2l	equ	0xFD9
  3124                           status	equ	0xFD8
  3125                           
  3126 ;; *************** function _getTime *****************
  3127 ;; Defined at:
  3128 ;;		line 88 in file "modules.c"
  3129 ;; Parameters:    Size  Location     Type
  3130 ;;		None
  3131 ;; Auto vars:     Size  Location     Type
  3132 ;;  time            2    2[BANK0 ] int 
  3133 ;; Return value:  Size  Location     Type
  3134 ;;                  2    0[BANK0 ] int 
  3135 ;; Registers used:
  3136 ;;		wreg, status,2
  3137 ;; Tracked objects:
  3138 ;;		On entry : 0/0
  3139 ;;		On exit  : 0/0
  3140 ;;		Unchanged: 0/0
  3141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3142 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3143 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3145 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3146 ;;Total ram usage:        4 bytes
  3147 ;; Hardware stack levels used:    1
  3148 ;; Hardware stack levels required when called:    6
  3149 ;; This function calls:
  3150 ;;		Nothing
  3151 ;; This function is called by:
  3152 ;;		_mainloop
  3153 ;; This function uses a non-reentrant model
  3154 ;;
  3155                           
  3156                           	psect	text12
  3157  001FE6                     __ptext12:
  3158                           	opt stack 0
  3159  001FE6                     _getTime:
  3160                           	opt stack 23
  3161                           
  3162                           ;modules.c: 90: int time = 0;
  3163                           
  3164                           ; BSR set to: 0
  3165                           ;incstack = 0
  3166  001FE6  0E00               	movlw	0
  3167  001FE8  0100               	movlb	0	; () banked
  3168  001FEA  6F83               	movwf	(getTime@time+1)& (0+255),b
  3169  001FEC  0E00               	movlw	0
  3170  001FEE  6F82               	movwf	getTime@time& (0+255),b
  3171                           
  3172                           ; BSR set to: 0
  3173                           ;modules.c: 91: return time;
  3174  001FF0  C082  F080         	movff	getTime@time,?_getTime
  3175  001FF4  C083  F081         	movff	getTime@time+1,?_getTime+1
  3176  001FF8  0012               	return	
  3177  001FFA                     __end_of_getTime:
  3178                           	opt stack 0
  3179                           tblptru	equ	0xFF8
  3180                           tblptrh	equ	0xFF7
  3181                           tblptrl	equ	0xFF6
  3182                           tablat	equ	0xFF5
  3183                           prodh	equ	0xFF4
  3184                           prodl	equ	0xFF3
  3185                           intcon	equ	0xFF2
  3186                           intcon3	equ	0xFF0
  3187                           indf0	equ	0xFEF
  3188                           postinc0	equ	0xFEE
  3189                           fsr0h	equ	0xFEA
  3190                           fsr0l	equ	0xFE9
  3191                           wreg	equ	0xFE8
  3192                           postdec1	equ	0xFE5
  3193                           plusw1	equ	0xFE3
  3194                           fsr1l	equ	0xFE1
  3195                           indf2	equ	0xFDF
  3196                           postinc2	equ	0xFDE
  3197                           postdec2	equ	0xFDD
  3198                           plusw2	equ	0xFDB
  3199                           fsr2h	equ	0xFDA
  3200                           fsr2l	equ	0xFD9
  3201                           status	equ	0xFD8
  3202                           
  3203 ;; *************** function _checkC9V *****************
  3204 ;; Defined at:
  3205 ;;		line 137 in file "modules.c"
  3206 ;; Parameters:    Size  Location     Type
  3207 ;;		None
  3208 ;; Auto vars:     Size  Location     Type
  3209 ;;  charged9        2    9[BANK0 ] int 
  3210 ;;  chargedC        2    7[BANK0 ] int 
  3211 ;; Return value:  Size  Location     Type
  3212 ;;                  2    5[BANK0 ] int 
  3213 ;; Registers used:
  3214 ;;		wreg, status,2, status,0, cstack
  3215 ;; Tracked objects:
  3216 ;;		On entry : 0/0
  3217 ;;		On exit  : 0/0
  3218 ;;		Unchanged: 0/0
  3219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3220 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3221 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3223 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3224 ;;Total ram usage:        6 bytes
  3225 ;; Hardware stack levels used:    1
  3226 ;; Hardware stack levels required when called:    7
  3227 ;; This function calls:
  3228 ;;		_AD
  3229 ;; This function is called by:
  3230 ;;		_mainloop
  3231 ;; This function uses a non-reentrant model
  3232 ;;
  3233                           
  3234                           	psect	text13
  3235  001D48                     __ptext13:
  3236                           	opt stack 0
  3237  001D48                     _checkC9V:
  3238                           	opt stack 22
  3239                           
  3240                           ;modules.c: 138: int chargedC = AD(1);
  3241                           
  3242                           ; BSR set to: 0
  3243                           ;incstack = 0
  3244  001D48  0E01               	movlw	1
  3245  001D4A  EC23  F00F         	call	_AD
  3246  001D4E  C080  F087         	movff	?_AD,checkC9V@chargedC
  3247  001D52  C081  F088         	movff	?_AD+1,checkC9V@chargedC+1
  3248                           
  3249                           ;modules.c: 139: int charged9 = AD(2);
  3250  001D56  0E02               	movlw	2
  3251  001D58  EC23  F00F         	call	_AD
  3252  001D5C  C080  F089         	movff	?_AD,checkC9V@charged9
  3253  001D60  C081  F08A         	movff	?_AD+1,checkC9V@charged9+1
  3254                           
  3255                           ;modules.c: 140: if (chargedC) {
  3256  001D64  0100               	movlb	0	; () banked
  3257  001D66  5187               	movf	checkC9V@chargedC& (0+255),w,b
  3258  001D68  0100               	movlb	0	; () banked
  3259  001D6A  1188               	iorwf	(checkC9V@chargedC+1)& (0+255),w,b
  3260  001D6C  B4D8               	btfsc	status,2,c
  3261  001D6E  D006               	goto	l1712
  3262                           
  3263                           ; BSR set to: 0
  3264                           ;modules.c: 141: return 1;
  3265  001D70  0E00               	movlw	0
  3266  001D72  0100               	movlb	0	; () banked
  3267  001D74  6F86               	movwf	(?_checkC9V+1)& (0+255),b
  3268  001D76  0E01               	movlw	1
  3269  001D78  6F85               	movwf	?_checkC9V& (0+255),b
  3270                           
  3271                           ; BSR set to: 0
  3272  001D7A  0012               	return	
  3273  001D7C                     l1712:
  3274                           
  3275                           ; BSR set to: 0
  3276  001D7C  0100               	movlb	0	; () banked
  3277  001D7E  5189               	movf	checkC9V@charged9& (0+255),w,b
  3278  001D80  0100               	movlb	0	; () banked
  3279  001D82  118A               	iorwf	(checkC9V@charged9+1)& (0+255),w,b
  3280  001D84  B4D8               	btfsc	status,2,c
  3281  001D86  D005               	goto	l1718
  3282                           
  3283                           ; BSR set to: 0
  3284                           ;modules.c: 143: return 2;
  3285  001D88  0E00               	movlw	0
  3286  001D8A  0100               	movlb	0	; () banked
  3287  001D8C  6F86               	movwf	(?_checkC9V+1)& (0+255),b
  3288  001D8E  0E02               	movlw	2
  3289  001D90  D7F3               	goto	L1
  3290  001D92                     l1718:
  3291                           
  3292                           ; BSR set to: 0
  3293                           ;modules.c: 144: }
  3294                           ;modules.c: 145: return 0;
  3295  001D92  0E00               	movlw	0
  3296  001D94  0100               	movlb	0	; () banked
  3297  001D96  6F86               	movwf	(?_checkC9V+1)& (0+255),b
  3298  001D98  0E00               	movlw	0
  3299  001D9A  6F85               	movwf	?_checkC9V& (0+255),b
  3300  001D9C  0012               	return	
  3301  001D9E                     __end_of_checkC9V:
  3302                           	opt stack 0
  3303                           tblptru	equ	0xFF8
  3304                           tblptrh	equ	0xFF7
  3305                           tblptrl	equ	0xFF6
  3306                           tablat	equ	0xFF5
  3307                           prodh	equ	0xFF4
  3308                           prodl	equ	0xFF3
  3309                           intcon	equ	0xFF2
  3310                           intcon3	equ	0xFF0
  3311                           indf0	equ	0xFEF
  3312                           postinc0	equ	0xFEE
  3313                           fsr0h	equ	0xFEA
  3314                           fsr0l	equ	0xFE9
  3315                           wreg	equ	0xFE8
  3316                           postdec1	equ	0xFE5
  3317                           plusw1	equ	0xFE3
  3318                           fsr1l	equ	0xFE1
  3319                           indf2	equ	0xFDF
  3320                           postinc2	equ	0xFDE
  3321                           postdec2	equ	0xFDD
  3322                           plusw2	equ	0xFDB
  3323                           fsr2h	equ	0xFDA
  3324                           fsr2l	equ	0xFD9
  3325                           status	equ	0xFD8
  3326                           
  3327 ;; *************** function _checkAA *****************
  3328 ;; Defined at:
  3329 ;;		line 133 in file "modules.c"
  3330 ;; Parameters:    Size  Location     Type
  3331 ;;		None
  3332 ;; Auto vars:     Size  Location     Type
  3333 ;;		None
  3334 ;; Return value:  Size  Location     Type
  3335 ;;                  2    5[BANK0 ] int 
  3336 ;; Registers used:
  3337 ;;		wreg, status,2, status,0, cstack
  3338 ;; Tracked objects:
  3339 ;;		On entry : 0/0
  3340 ;;		On exit  : 0/0
  3341 ;;		Unchanged: 0/0
  3342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3343 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3346 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3347 ;;Total ram usage:        2 bytes
  3348 ;; Hardware stack levels used:    1
  3349 ;; Hardware stack levels required when called:    7
  3350 ;; This function calls:
  3351 ;;		_AD
  3352 ;; This function is called by:
  3353 ;;		_mainloop
  3354 ;; This function uses a non-reentrant model
  3355 ;;
  3356                           
  3357                           	psect	text14
  3358  00200A                     __ptext14:
  3359                           	opt stack 0
  3360  00200A                     _checkAA:
  3361                           	opt stack 22
  3362                           
  3363                           ;modules.c: 134: return AD(0);
  3364                           
  3365                           ; BSR set to: 0
  3366                           ;incstack = 0
  3367  00200A  0E00               	movlw	0
  3368  00200C  EC23  F00F         	call	_AD
  3369  002010  C080  F085         	movff	?_AD,?_checkAA
  3370  002014  C081  F086         	movff	?_AD+1,?_checkAA+1
  3371  002018  0012               	return	
  3372  00201A                     __end_of_checkAA:
  3373                           	opt stack 0
  3374                           tblptru	equ	0xFF8
  3375                           tblptrh	equ	0xFF7
  3376                           tblptrl	equ	0xFF6
  3377                           tablat	equ	0xFF5
  3378                           prodh	equ	0xFF4
  3379                           prodl	equ	0xFF3
  3380                           intcon	equ	0xFF2
  3381                           intcon3	equ	0xFF0
  3382                           indf0	equ	0xFEF
  3383                           postinc0	equ	0xFEE
  3384                           fsr0h	equ	0xFEA
  3385                           fsr0l	equ	0xFE9
  3386                           wreg	equ	0xFE8
  3387                           postdec1	equ	0xFE5
  3388                           plusw1	equ	0xFE3
  3389                           fsr1l	equ	0xFE1
  3390                           indf2	equ	0xFDF
  3391                           postinc2	equ	0xFDE
  3392                           postdec2	equ	0xFDD
  3393                           plusw2	equ	0xFDB
  3394                           fsr2h	equ	0xFDA
  3395                           fsr2l	equ	0xFD9
  3396                           status	equ	0xFD8
  3397                           
  3398 ;; *************** function _AD *****************
  3399 ;; Defined at:
  3400 ;;		line 7 in file "modules.c"
  3401 ;; Parameters:    Size  Location     Type
  3402 ;;  channel         1    wreg     unsigned char 
  3403 ;; Auto vars:     Size  Location     Type
  3404 ;;  channel         1    4[BANK0 ] unsigned char 
  3405 ;; Return value:  Size  Location     Type
  3406 ;;                  2    0[BANK0 ] int 
  3407 ;; Registers used:
  3408 ;;		wreg, status,2, status,0, cstack
  3409 ;; Tracked objects:
  3410 ;;		On entry : 0/0
  3411 ;;		On exit  : 0/0
  3412 ;;		Unchanged: 0/0
  3413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3414 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3415 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3416 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3417 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3418 ;;Total ram usage:        5 bytes
  3419 ;; Hardware stack levels used:    1
  3420 ;; Hardware stack levels required when called:    6
  3421 ;; This function calls:
  3422 ;;		Nothing
  3423 ;; This function is called by:
  3424 ;;		_checkAA
  3425 ;;		_checkC9V
  3426 ;; This function uses a non-reentrant model
  3427 ;;
  3428                           
  3429                           	psect	text15
  3430  001E46                     __ptext15:
  3431                           	opt stack 0
  3432  001E46                     _AD:
  3433                           	opt stack 22
  3434                           
  3435                           ;incstack = 0
  3436                           ;AD@channel stored from wreg
  3437  001E46  0100               	movlb	0	; () banked
  3438  001E48  6F84               	movwf	AD@channel& (0+255),b
  3439                           
  3440                           ;modules.c: 9: ADCON0 = ((channel << 2));
  3441  001E4A  0100               	movlb	0	; () banked
  3442  001E4C  4584               	rlncf	AD@channel& (0+255),w,b
  3443  001E4E  46E8               	rlncf	wreg,f,c
  3444  001E50  0BFC               	andlw	252
  3445  001E52  6EC2               	movwf	4034,c	;volatile
  3446                           
  3447                           ; BSR set to: 0
  3448                           ;modules.c: 10: ADON = 1;
  3449  001E54  80C2               	bsf	4034,0,c	;volatile
  3450                           
  3451                           ; BSR set to: 0
  3452                           ;modules.c: 11: ADCON0bits.GO = 1;
  3453  001E56  82C2               	bsf	4034,1,c	;volatile
  3454                           
  3455                           ;modules.c: 12: while (ADCON0bits.GO_NOT_DONE) {
  3456  001E58  D009               	goto	l1584
  3457  001E5A                     l1582:
  3458                           
  3459                           ;modules.c: 13: _delay((unsigned long)((10)*(8000000/4000.0)));
  3460  001E5A  0E1A               	movlw	26
  3461  001E5C  0100               	movlb	0	; () banked
  3462  001E5E  6F82               	movwf	??_AD& (0+255),b
  3463  001E60  0EF8               	movlw	248
  3464  001E62                     u1287:
  3465  001E62  2EE8               	decfsz	wreg,f,c
  3466  001E64  D7FE               	bra	u1287
  3467  001E66  2F82               	decfsz	??_AD& (0+255),f,b
  3468  001E68  D7FC               	bra	u1287
  3469  001E6A  F000               	nop	
  3470  001E6C                     l1584:
  3471  001E6C  B2C2               	btfsc	4034,1,c	;volatile
  3472  001E6E  D7F5               	goto	l1582
  3473                           
  3474                           ;modules.c: 14: }
  3475                           ;modules.c: 15: return (ADRESH << 8) | ADRESL;
  3476  001E70  50C3               	movf	4035,w,c	;volatile
  3477  001E72  CFC4 F082          	movff	4036,??_AD	;volatile
  3478  001E76  0100               	movlb	0	; () banked
  3479  001E78  6B83               	clrf	(??_AD+1)& (0+255),b
  3480  001E7A  C082  F083         	movff	??_AD,??_AD+1
  3481  001E7E  0100               	movlb	0	; () banked
  3482  001E80  6B82               	clrf	??_AD& (0+255),b
  3483  001E82  0100               	movlb	0	; () banked
  3484  001E84  1182               	iorwf	??_AD& (0+255),w,b
  3485  001E86  0100               	movlb	0	; () banked
  3486  001E88  6F80               	movwf	?_AD& (0+255),b
  3487  001E8A  0100               	movlb	0	; () banked
  3488  001E8C  5183               	movf	(??_AD+1)& (0+255),w,b
  3489  001E8E  0100               	movlb	0	; () banked
  3490  001E90  6F81               	movwf	(?_AD+1)& (0+255),b
  3491  001E92  0012               	return	
  3492  001E94                     __end_of_AD:
  3493                           	opt stack 0
  3494                           tblptru	equ	0xFF8
  3495                           tblptrh	equ	0xFF7
  3496                           tblptrl	equ	0xFF6
  3497                           tablat	equ	0xFF5
  3498                           prodh	equ	0xFF4
  3499                           prodl	equ	0xFF3
  3500                           intcon	equ	0xFF2
  3501                           intcon3	equ	0xFF0
  3502                           indf0	equ	0xFEF
  3503                           postinc0	equ	0xFEE
  3504                           fsr0h	equ	0xFEA
  3505                           fsr0l	equ	0xFE9
  3506                           wreg	equ	0xFE8
  3507                           postdec1	equ	0xFE5
  3508                           plusw1	equ	0xFE3
  3509                           fsr1l	equ	0xFE1
  3510                           indf2	equ	0xFDF
  3511                           postinc2	equ	0xFDE
  3512                           postdec2	equ	0xFDD
  3513                           plusw2	equ	0xFDB
  3514                           fsr2h	equ	0xFDA
  3515                           fsr2l	equ	0xFD9
  3516                           status	equ	0xFD8
  3517                           
  3518 ;; *************** function _initialize *****************
  3519 ;; Defined at:
  3520 ;;		line 19 in file "main.c"
  3521 ;; Parameters:    Size  Location     Type
  3522 ;;		None
  3523 ;; Auto vars:     Size  Location     Type
  3524 ;;		None
  3525 ;; Return value:  Size  Location     Type
  3526 ;;                  1    wreg      void 
  3527 ;; Registers used:
  3528 ;;		wreg, status,2, status,0, cstack
  3529 ;; Tracked objects:
  3530 ;;		On entry : 0/0
  3531 ;;		On exit  : 0/0
  3532 ;;		Unchanged: 0/0
  3533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3537 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3538 ;;Total ram usage:        0 bytes
  3539 ;; Hardware stack levels used:    1
  3540 ;; Hardware stack levels required when called:    9
  3541 ;; This function calls:
  3542 ;;		_initLCD
  3543 ;; This function is called by:
  3544 ;;		_main
  3545 ;; This function uses a non-reentrant model
  3546 ;;
  3547                           
  3548                           	psect	text16
  3549  001F1C                     __ptext16:
  3550                           	opt stack 0
  3551  001F1C                     _initialize:
  3552                           	opt stack 21
  3553                           
  3554                           ;main.c: 20: TRISA = 0xFF;
  3555                           
  3556                           ; BSR set to: 0
  3557                           ;incstack = 0
  3558  001F1C  6892               	setf	3986,c	;volatile
  3559                           
  3560                           ;main.c: 21: TRISB = 0xFF;
  3561  001F1E  6893               	setf	3987,c	;volatile
  3562                           
  3563                           ;main.c: 22: TRISC = 0x00;
  3564  001F20  0E00               	movlw	0
  3565  001F22  6E94               	movwf	3988,c	;volatile
  3566                           
  3567                           ;main.c: 23: TRISD = 0x00;
  3568  001F24  0E00               	movlw	0
  3569  001F26  6E95               	movwf	3989,c	;volatile
  3570                           
  3571                           ;main.c: 24: TRISE = 0x00;
  3572  001F28  0E00               	movlw	0
  3573  001F2A  6E96               	movwf	3990,c	;volatile
  3574                           
  3575                           ;main.c: 26: LATA = 0x00;
  3576  001F2C  0E00               	movlw	0
  3577  001F2E  6E89               	movwf	3977,c	;volatile
  3578                           
  3579                           ;main.c: 27: LATB = 0x00;
  3580  001F30  0E00               	movlw	0
  3581  001F32  6E8A               	movwf	3978,c	;volatile
  3582                           
  3583                           ;main.c: 28: LATC = 0x00;
  3584  001F34  0E00               	movlw	0
  3585  001F36  6E8B               	movwf	3979,c	;volatile
  3586                           
  3587                           ;main.c: 29: LATD = 0x00;
  3588  001F38  0E00               	movlw	0
  3589  001F3A  6E8C               	movwf	3980,c	;volatile
  3590                           
  3591                           ;main.c: 30: LATE = 0x00;
  3592  001F3C  0E00               	movlw	0
  3593  001F3E  6E8D               	movwf	3981,c	;volatile
  3594                           
  3595                           ;main.c: 33: ADCON0 = 0x00;
  3596  001F40  0E00               	movlw	0
  3597  001F42  6EC2               	movwf	4034,c	;volatile
  3598                           
  3599                           ;main.c: 34: ADCON1 = 0x0D;
  3600  001F44  0E0D               	movlw	13
  3601  001F46  6EC1               	movwf	4033,c	;volatile
  3602                           
  3603                           ;main.c: 35: CVRCON = 0x00;
  3604  001F48  0E00               	movlw	0
  3605  001F4A  6EB5               	movwf	4021,c	;volatile
  3606                           
  3607                           ;main.c: 36: ADFM = 1;
  3608  001F4C  8EC0               	bsf	4032,7,c	;volatile
  3609                           
  3610                           ;main.c: 38: initLCD();
  3611  001F4E  EC4A  F00F         	call	_initLCD	;wreg free
  3612  001F52  0012               	return		;funcret
  3613  001F54                     __end_of_initialize:
  3614                           	opt stack 0
  3615                           tblptru	equ	0xFF8
  3616                           tblptrh	equ	0xFF7
  3617                           tblptrl	equ	0xFF6
  3618                           tablat	equ	0xFF5
  3619                           prodh	equ	0xFF4
  3620                           prodl	equ	0xFF3
  3621                           intcon	equ	0xFF2
  3622                           intcon3	equ	0xFF0
  3623                           indf0	equ	0xFEF
  3624                           postinc0	equ	0xFEE
  3625                           fsr0h	equ	0xFEA
  3626                           fsr0l	equ	0xFE9
  3627                           wreg	equ	0xFE8
  3628                           postdec1	equ	0xFE5
  3629                           plusw1	equ	0xFE3
  3630                           fsr1l	equ	0xFE1
  3631                           indf2	equ	0xFDF
  3632                           postinc2	equ	0xFDE
  3633                           postdec2	equ	0xFDD
  3634                           plusw2	equ	0xFDB
  3635                           fsr2h	equ	0xFDA
  3636                           fsr2l	equ	0xFD9
  3637                           status	equ	0xFD8
  3638                           
  3639 ;; *************** function _initLCD *****************
  3640 ;; Defined at:
  3641 ;;		line 15 in file "lcd.c"
  3642 ;; Parameters:    Size  Location     Type
  3643 ;;		None
  3644 ;; Auto vars:     Size  Location     Type
  3645 ;;		None
  3646 ;; Return value:  Size  Location     Type
  3647 ;;                  1    wreg      void 
  3648 ;; Registers used:
  3649 ;;		wreg, status,2, status,0, cstack
  3650 ;; Tracked objects:
  3651 ;;		On entry : 0/0
  3652 ;;		On exit  : 0/0
  3653 ;;		Unchanged: 0/0
  3654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3657 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3658 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3659 ;;Total ram usage:        1 bytes
  3660 ;; Hardware stack levels used:    1
  3661 ;; Hardware stack levels required when called:    8
  3662 ;; This function calls:
  3663 ;;		_lcdInst
  3664 ;; This function is called by:
  3665 ;;		_initialize
  3666 ;; This function uses a non-reentrant model
  3667 ;;
  3668                           
  3669                           	psect	text17
  3670  001E94                     __ptext17:
  3671                           	opt stack 0
  3672  001E94                     _initLCD:
  3673                           	opt stack 21
  3674                           
  3675                           ;lcd.c: 16: _delay((unsigned long)((15)*(8000000/4000.0)));
  3676                           
  3677                           ;incstack = 0
  3678  001E94  0E27               	movlw	39
  3679  001E96  0100               	movlb	0	; () banked
  3680  001E98  6F83               	movwf	??_initLCD& (0+255),b
  3681  001E9A  0EF5               	movlw	245
  3682  001E9C                     u1297:
  3683  001E9C  2EE8               	decfsz	wreg,f,c
  3684  001E9E  D7FE               	bra	u1297
  3685  001EA0  2F83               	decfsz	??_initLCD& (0+255),f,b
  3686  001EA2  D7FC               	bra	u1297
  3687                           
  3688                           ;lcd.c: 17: lcdInst(0b00110011);
  3689  001EA4  0E33               	movlw	51
  3690  001EA6  EC0D  F010         	call	_lcdInst
  3691                           
  3692                           ;lcd.c: 18: lcdInst(0b00110010);
  3693  001EAA  0E32               	movlw	50
  3694  001EAC  EC0D  F010         	call	_lcdInst
  3695                           
  3696                           ;lcd.c: 19: lcdInst(0b00101000);
  3697  001EB0  0E28               	movlw	40
  3698  001EB2  EC0D  F010         	call	_lcdInst
  3699                           
  3700                           ;lcd.c: 20: lcdInst(0b00001111);
  3701  001EB6  0E0F               	movlw	15
  3702  001EB8  EC0D  F010         	call	_lcdInst
  3703                           
  3704                           ;lcd.c: 21: lcdInst(0b00000110);
  3705  001EBC  0E06               	movlw	6
  3706  001EBE  EC0D  F010         	call	_lcdInst
  3707                           
  3708                           ;lcd.c: 22: lcdInst(0b00000001);
  3709  001EC2  0E01               	movlw	1
  3710  001EC4  EC0D  F010         	call	_lcdInst
  3711                           
  3712                           ;lcd.c: 23: _delay((unsigned long)((15)*(8000000/4000.0)));
  3713  001EC8  0E27               	movlw	39
  3714  001ECA  0100               	movlb	0	; () banked
  3715  001ECC  6F83               	movwf	??_initLCD& (0+255),b
  3716  001ECE  0EF5               	movlw	245
  3717  001ED0                     u1307:
  3718  001ED0  2EE8               	decfsz	wreg,f,c
  3719  001ED2  D7FE               	bra	u1307
  3720  001ED4  2F83               	decfsz	??_initLCD& (0+255),f,b
  3721  001ED6  D7FC               	bra	u1307
  3722  001ED8  0012               	return		;funcret
  3723  001EDA                     __end_of_initLCD:
  3724                           	opt stack 0
  3725                           tblptru	equ	0xFF8
  3726                           tblptrh	equ	0xFF7
  3727                           tblptrl	equ	0xFF6
  3728                           tablat	equ	0xFF5
  3729                           prodh	equ	0xFF4
  3730                           prodl	equ	0xFF3
  3731                           intcon	equ	0xFF2
  3732                           intcon3	equ	0xFF0
  3733                           indf0	equ	0xFEF
  3734                           postinc0	equ	0xFEE
  3735                           fsr0h	equ	0xFEA
  3736                           fsr0l	equ	0xFE9
  3737                           wreg	equ	0xFE8
  3738                           postdec1	equ	0xFE5
  3739                           plusw1	equ	0xFE3
  3740                           fsr1l	equ	0xFE1
  3741                           indf2	equ	0xFDF
  3742                           postinc2	equ	0xFDE
  3743                           postdec2	equ	0xFDD
  3744                           plusw2	equ	0xFDB
  3745                           fsr2h	equ	0xFDA
  3746                           fsr2l	equ	0xFD9
  3747                           status	equ	0xFD8
  3748                           
  3749 ;; *************** function _lcdInst *****************
  3750 ;; Defined at:
  3751 ;;		line 26 in file "lcd.c"
  3752 ;; Parameters:    Size  Location     Type
  3753 ;;  data            1    wreg     unsigned char 
  3754 ;; Auto vars:     Size  Location     Type
  3755 ;;  data            1    2[BANK0 ] unsigned char 
  3756 ;; Return value:  Size  Location     Type
  3757 ;;                  1    wreg      void 
  3758 ;; Registers used:
  3759 ;;		wreg, status,2, status,0, cstack
  3760 ;; Tracked objects:
  3761 ;;		On entry : 0/0
  3762 ;;		On exit  : 0/0
  3763 ;;		Unchanged: 0/0
  3764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3766 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3768 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3769 ;;Total ram usage:        1 bytes
  3770 ;; Hardware stack levels used:    1
  3771 ;; Hardware stack levels required when called:    7
  3772 ;; This function calls:
  3773 ;;		_lcdNibble
  3774 ;; This function is called by:
  3775 ;;		_initLCD
  3776 ;; This function uses a non-reentrant model
  3777 ;;
  3778                           
  3779                           	psect	text18
  3780  00201A                     __ptext18:
  3781                           	opt stack 0
  3782  00201A                     _lcdInst:
  3783                           	opt stack 21
  3784                           
  3785                           ;incstack = 0
  3786                           ;lcdInst@data stored from wreg
  3787  00201A  0100               	movlb	0	; () banked
  3788  00201C  6F82               	movwf	lcdInst@data& (0+255),b
  3789                           
  3790                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  3791  00201E  948C               	bcf	3980,2,c	;volatile
  3792                           
  3793                           ;lcd.c: 28: lcdNibble(data);
  3794  002020  0100               	movlb	0	; () banked
  3795  002022  5182               	movf	lcdInst@data& (0+255),w,b
  3796  002024  EC3F  F00E         	call	_lcdNibble
  3797  002028  0012               	return		;funcret
  3798  00202A                     __end_of_lcdInst:
  3799                           	opt stack 0
  3800                           tblptru	equ	0xFF8
  3801                           tblptrh	equ	0xFF7
  3802                           tblptrl	equ	0xFF6
  3803                           tablat	equ	0xFF5
  3804                           prodh	equ	0xFF4
  3805                           prodl	equ	0xFF3
  3806                           intcon	equ	0xFF2
  3807                           intcon3	equ	0xFF0
  3808                           indf0	equ	0xFEF
  3809                           postinc0	equ	0xFEE
  3810                           fsr0h	equ	0xFEA
  3811                           fsr0l	equ	0xFE9
  3812                           wreg	equ	0xFE8
  3813                           postdec1	equ	0xFE5
  3814                           plusw1	equ	0xFE3
  3815                           fsr1l	equ	0xFE1
  3816                           indf2	equ	0xFDF
  3817                           postinc2	equ	0xFDE
  3818                           postdec2	equ	0xFDD
  3819                           plusw2	equ	0xFDB
  3820                           fsr2h	equ	0xFDA
  3821                           fsr2l	equ	0xFD9
  3822                           status	equ	0xFD8
  3823                           
  3824 ;; *************** function _lcdNibble *****************
  3825 ;; Defined at:
  3826 ;;		line 36 in file "lcd.c"
  3827 ;; Parameters:    Size  Location     Type
  3828 ;;  data            1    wreg     unsigned char 
  3829 ;; Auto vars:     Size  Location     Type
  3830 ;;  data            1    1[BANK0 ] unsigned char 
  3831 ;;  temp            1    0[BANK0 ] unsigned char 
  3832 ;; Return value:  Size  Location     Type
  3833 ;;                  1    wreg      void 
  3834 ;; Registers used:
  3835 ;;		wreg, status,2, status,0
  3836 ;; Tracked objects:
  3837 ;;		On entry : 0/0
  3838 ;;		On exit  : 0/0
  3839 ;;		Unchanged: 0/0
  3840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3842 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3844 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3845 ;;Total ram usage:        2 bytes
  3846 ;; Hardware stack levels used:    1
  3847 ;; Hardware stack levels required when called:    6
  3848 ;; This function calls:
  3849 ;;		Nothing
  3850 ;; This function is called by:
  3851 ;;		_lcdInst
  3852 ;;		_putch
  3853 ;; This function uses a non-reentrant model
  3854 ;;
  3855                           
  3856                           	psect	text19
  3857  001C7E                     __ptext19:
  3858                           	opt stack 0
  3859  001C7E                     _lcdNibble:
  3860                           	opt stack 21
  3861                           
  3862                           ;incstack = 0
  3863                           ;lcdNibble@data stored from wreg
  3864  001C7E  0100               	movlb	0	; () banked
  3865  001C80  6F81               	movwf	lcdNibble@data& (0+255),b
  3866                           
  3867                           ;lcd.c: 38: char temp = data & 0xF0;
  3868  001C82  0100               	movlb	0	; () banked
  3869  001C84  5181               	movf	lcdNibble@data& (0+255),w,b
  3870  001C86  0BF0               	andlw	240
  3871  001C88  0100               	movlb	0	; () banked
  3872  001C8A  6F80               	movwf	lcdNibble@temp& (0+255),b
  3873                           
  3874                           ;lcd.c: 39: LATD = LATD & 0x0F;
  3875  001C8C  508C               	movf	3980,w,c	;volatile
  3876  001C8E  0B0F               	andlw	15
  3877  001C90  6E8C               	movwf	3980,c	;volatile
  3878                           
  3879                           ;lcd.c: 40: LATD = temp | LATD;
  3880  001C92  0100               	movlb	0	; () banked
  3881  001C94  5180               	movf	lcdNibble@temp& (0+255),w,b
  3882  001C96  108C               	iorwf	3980,w,c	;volatile
  3883  001C98  6E8C               	movwf	3980,c	;volatile
  3884                           
  3885                           ; BSR set to: 0
  3886                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  3887  001C9A  968C               	bcf	3980,3,c	;volatile
  3888                           
  3889                           ; BSR set to: 0
  3890                           ;lcd.c: 43: _delay((unsigned long)((25)*(8000000/4000000.0)));
  3891  001C9C  0E10               	movlw	16
  3892  001C9E                     u1317:
  3893  001C9E  2EE8               	decfsz	wreg,f,c
  3894  001CA0  D7FE               	bra	u1317
  3895  001CA2  D000               	nop2	
  3896                           
  3897                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  3898  001CA4  868C               	bsf	3980,3,c	;volatile
  3899                           
  3900                           ;lcd.c: 45: _delay((unsigned long)((25)*(8000000/4000000.0)));
  3901  001CA6  0E10               	movlw	16
  3902  001CA8                     u1327:
  3903  001CA8  2EE8               	decfsz	wreg,f,c
  3904  001CAA  D7FE               	bra	u1327
  3905  001CAC  D000               	nop2	
  3906                           
  3907                           ;lcd.c: 47: data = data << 4;
  3908  001CAE  0100               	movlb	0	; () banked
  3909  001CB0  3981               	swapf	lcdNibble@data& (0+255),w,b
  3910  001CB2  0BF0               	andlw	240
  3911  001CB4  0100               	movlb	0	; () banked
  3912  001CB6  6F81               	movwf	lcdNibble@data& (0+255),b
  3913                           
  3914                           ;lcd.c: 49: temp = data & 0xF0;
  3915  001CB8  0100               	movlb	0	; () banked
  3916  001CBA  5181               	movf	lcdNibble@data& (0+255),w,b
  3917  001CBC  0BF0               	andlw	240
  3918  001CBE  0100               	movlb	0	; () banked
  3919  001CC0  6F80               	movwf	lcdNibble@temp& (0+255),b
  3920                           
  3921                           ;lcd.c: 50: LATD = LATD & 0x0F;
  3922  001CC2  508C               	movf	3980,w,c	;volatile
  3923  001CC4  0B0F               	andlw	15
  3924  001CC6  6E8C               	movwf	3980,c	;volatile
  3925                           
  3926                           ;lcd.c: 51: LATD = temp | LATD;
  3927  001CC8  0100               	movlb	0	; () banked
  3928  001CCA  5180               	movf	lcdNibble@temp& (0+255),w,b
  3929  001CCC  108C               	iorwf	3980,w,c	;volatile
  3930  001CCE  6E8C               	movwf	3980,c	;volatile
  3931                           
  3932                           ; BSR set to: 0
  3933                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  3934  001CD0  968C               	bcf	3980,3,c	;volatile
  3935                           
  3936                           ; BSR set to: 0
  3937                           ;lcd.c: 54: _delay((unsigned long)((25)*(8000000/4000000.0)));
  3938  001CD2  0E10               	movlw	16
  3939  001CD4                     u1337:
  3940  001CD4  2EE8               	decfsz	wreg,f,c
  3941  001CD6  D7FE               	bra	u1337
  3942  001CD8  D000               	nop2	
  3943                           
  3944                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  3945  001CDA  868C               	bsf	3980,3,c	;volatile
  3946                           
  3947                           ;lcd.c: 56: _delay((unsigned long)((25)*(8000000/4000000.0)));
  3948  001CDC  0E10               	movlw	16
  3949  001CDE                     u1347:
  3950  001CDE  2EE8               	decfsz	wreg,f,c
  3951  001CE0  D7FE               	bra	u1347
  3952  001CE2  D000               	nop2	
  3953  001CE4  0012               	return		;funcret
  3954  001CE6                     __end_of_lcdNibble:
  3955                           	opt stack 0
  3956                           tblptru	equ	0xFF8
  3957                           tblptrh	equ	0xFF7
  3958                           tblptrl	equ	0xFF6
  3959                           tablat	equ	0xFF5
  3960                           prodh	equ	0xFF4
  3961                           prodl	equ	0xFF3
  3962                           intcon	equ	0xFF2
  3963                           intcon3	equ	0xFF0
  3964                           indf0	equ	0xFEF
  3965                           postinc0	equ	0xFEE
  3966                           fsr0h	equ	0xFEA
  3967                           fsr0l	equ	0xFE9
  3968                           wreg	equ	0xFE8
  3969                           postdec1	equ	0xFE5
  3970                           plusw1	equ	0xFE3
  3971                           fsr1l	equ	0xFE1
  3972                           indf2	equ	0xFDF
  3973                           postinc2	equ	0xFDE
  3974                           postdec2	equ	0xFDD
  3975                           plusw2	equ	0xFDB
  3976                           fsr2h	equ	0xFDA
  3977                           fsr2l	equ	0xFD9
  3978                           status	equ	0xFD8
  3979                           
  3980 ;; *************** function _captureKeypad *****************
  3981 ;; Defined at:
  3982 ;;		line 27 in file "modules.c"
  3983 ;; Parameters:    Size  Location     Type
  3984 ;;		None
  3985 ;; Auto vars:     Size  Location     Type
  3986 ;;  keypress        1    2[BANK0 ] unsigned char 
  3987 ;; Return value:  Size  Location     Type
  3988 ;;                  2    0[BANK0 ] int 
  3989 ;; Registers used:
  3990 ;;		wreg, status,2, status,0
  3991 ;; Tracked objects:
  3992 ;;		On entry : 0/0
  3993 ;;		On exit  : 0/0
  3994 ;;		Unchanged: 0/0
  3995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3996 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3997 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3999 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4000 ;;Total ram usage:        3 bytes
  4001 ;; Hardware stack levels used:    1
  4002 ;; Hardware stack levels required when called:    6
  4003 ;; This function calls:
  4004 ;;		Nothing
  4005 ;; This function is called by:
  4006 ;;		_main
  4007 ;;		_showInfo
  4008 ;; This function uses a non-reentrant model
  4009 ;;
  4010                           
  4011                           	psect	text20
  4012  001FB4                     __ptext20:
  4013                           	opt stack 0
  4014  001FB4                     _captureKeypad:
  4015                           	opt stack 24
  4016  001FB4                     l138:
  4017  001FB4  A281               	btfss	3969,1,c	;volatile
  4018  001FB6  D7FE               	goto	l138
  4019                           
  4020                           ;modules.c: 29: unsigned char keypress = (PORTB & 0xF0) >> 4;
  4021  001FB8  3881               	swapf	3969,w,c	;volatile
  4022  001FBA  0B0F               	andlw	15
  4023  001FBC  0B0F               	andlw	15
  4024  001FBE  0100               	movlb	0	; () banked
  4025  001FC0  6F82               	movwf	captureKeypad@keypress& (0+255),b
  4026  001FC2                     l141:
  4027  001FC2  B281               	btfsc	3969,1,c	;volatile
  4028  001FC4  D7FE               	goto	l141
  4029                           
  4030                           ;modules.c: 31: INT1IF = 0;
  4031  001FC6  90F0               	bcf	intcon3,0,c	;volatile
  4032                           
  4033                           ;modules.c: 32: return keypress;
  4034  001FC8  C082  F080         	movff	captureKeypad@keypress,?_captureKeypad
  4035  001FCC  0100               	movlb	0	; () banked
  4036  001FCE  6B81               	clrf	(?_captureKeypad+1)& (0+255),b
  4037                           
  4038                           ; BSR set to: 0
  4039  001FD0  0012               	return		;funcret
  4040  001FD2                     __end_of_captureKeypad:
  4041                           	opt stack 0
  4042                           tblptru	equ	0xFF8
  4043                           tblptrh	equ	0xFF7
  4044                           tblptrl	equ	0xFF6
  4045                           tablat	equ	0xFF5
  4046                           prodh	equ	0xFF4
  4047                           prodl	equ	0xFF3
  4048                           intcon	equ	0xFF2
  4049                           intcon3	equ	0xFF0
  4050                           indf0	equ	0xFEF
  4051                           postinc0	equ	0xFEE
  4052                           fsr0h	equ	0xFEA
  4053                           fsr0l	equ	0xFE9
  4054                           wreg	equ	0xFE8
  4055                           postdec1	equ	0xFE5
  4056                           plusw1	equ	0xFE3
  4057                           fsr1l	equ	0xFE1
  4058                           indf2	equ	0xFDF
  4059                           postinc2	equ	0xFDE
  4060                           postdec2	equ	0xFDD
  4061                           plusw2	equ	0xFDB
  4062                           fsr2h	equ	0xFDA
  4063                           fsr2l	equ	0xFD9
  4064                           status	equ	0xFD8
  4065                           
  4066 ;; *************** function _keypressed *****************
  4067 ;; Defined at:
  4068 ;;		line 35 in file "modules.c"
  4069 ;; Parameters:    Size  Location     Type
  4070 ;;		None
  4071 ;; Auto vars:     Size  Location     Type
  4072 ;;  keypress        1   87[COMRAM] unsigned char 
  4073 ;; Return value:  Size  Location     Type
  4074 ;;                  1    wreg      void 
  4075 ;; Registers used:
  4076 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4077 ;; Tracked objects:
  4078 ;;		On entry : 0/0
  4079 ;;		On exit  : 0/0
  4080 ;;		Unchanged: 0/0
  4081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4083 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4084 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4085 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4086 ;;Total ram usage:       15 bytes
  4087 ;; Hardware stack levels used:    1
  4088 ;; Hardware stack levels required when called:    5
  4089 ;; This function calls:
  4090 ;;		i2_stopMoving
  4091 ;; This function is called by:
  4092 ;;		Interrupt level 2
  4093 ;; This function uses a non-reentrant model
  4094 ;;
  4095                           
  4096                           	psect	intcode
  4097  000008                     __pintcode:
  4098                           	opt stack 0
  4099  000008                     _keypressed:
  4100                           	opt stack 19
  4101                           
  4102                           ; BSR set to: 0
  4103                           ;incstack = 0
  4104  000008  8259               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4105  00000A  ED04  F00D         	call	int_func,f	;refresh shadow registers
  4106                           tblptru	equ	0xFF8
  4107                           tblptrh	equ	0xFF7
  4108                           tblptrl	equ	0xFF6
  4109                           tablat	equ	0xFF5
  4110                           prodh	equ	0xFF4
  4111                           prodl	equ	0xFF3
  4112                           intcon	equ	0xFF2
  4113                           intcon3	equ	0xFF0
  4114                           indf0	equ	0xFEF
  4115                           postinc0	equ	0xFEE
  4116                           fsr0h	equ	0xFEA
  4117                           fsr0l	equ	0xFE9
  4118                           wreg	equ	0xFE8
  4119                           postdec1	equ	0xFE5
  4120                           plusw1	equ	0xFE3
  4121                           fsr1l	equ	0xFE1
  4122                           indf2	equ	0xFDF
  4123                           postinc2	equ	0xFDE
  4124                           postdec2	equ	0xFDD
  4125                           plusw2	equ	0xFDB
  4126                           fsr2h	equ	0xFDA
  4127                           fsr2l	equ	0xFD9
  4128                           status	equ	0xFD8
  4129                           
  4130                           	psect	intcode_body
  4131  001A08                     __pintcode_body:
  4132                           	opt stack 19
  4133  001A08                     int_func:
  4134                           	opt stack 19
  4135  001A08  0006               	pop		; remove dummy address from shadow register refresh
  4136  001A0A  CFFA F04A          	movff	pclath,??_keypressed
  4137  001A0E  CFFB F04B          	movff	pclatu,??_keypressed+1
  4138  001A12  CFE9 F04C          	movff	fsr0l,??_keypressed+2
  4139  001A16  CFEA F04D          	movff	fsr0h,??_keypressed+3
  4140  001A1A  CFE1 F04E          	movff	fsr1l,??_keypressed+4
  4141  001A1E  CFE2 F04F          	movff	fsr1h,??_keypressed+5
  4142  001A22  CFD9 F050          	movff	fsr2l,??_keypressed+6
  4143  001A26  CFDA F051          	movff	fsr2h,??_keypressed+7
  4144  001A2A  CFF3 F052          	movff	prodl,??_keypressed+8
  4145  001A2E  CFF4 F053          	movff	prodh,??_keypressed+9
  4146  001A32  CFF6 F054          	movff	tblptrl,??_keypressed+10
  4147  001A36  CFF7 F055          	movff	tblptrh,??_keypressed+11
  4148  001A3A  CFF8 F056          	movff	tblptru,??_keypressed+12
  4149  001A3E  CFF5 F057          	movff	tablat,??_keypressed+13
  4150                           
  4151                           ;modules.c: 37: if (INT1IF) {
  4152  001A42  A0F0               	btfss	intcon3,0,c	;volatile
  4153  001A44  D007               	goto	i2l148
  4154                           
  4155                           ;modules.c: 38: unsigned char keypress = (PORTB & 0xF0) >> 4;
  4156  001A46  3881               	swapf	3969,w,c	;volatile
  4157  001A48  0B0F               	andlw	15
  4158  001A4A  0B0F               	andlw	15
  4159  001A4C  6E58               	movwf	keypressed@keypress,c
  4160                           
  4161                           ;modules.c: 39: INT1IF = 0;
  4162  001A4E  90F0               	bcf	intcon3,0,c	;volatile
  4163                           
  4164                           ;modules.c: 40: stopMoving();
  4165  001A50  EC15  F010         	call	i2_stopMoving	;wreg free
  4166  001A54                     i2l148:
  4167  001A54  C057  FFF5         	movff	??_keypressed+13,tablat
  4168  001A58  C056  FFF8         	movff	??_keypressed+12,tblptru
  4169  001A5C  C055  FFF7         	movff	??_keypressed+11,tblptrh
  4170  001A60  C054  FFF6         	movff	??_keypressed+10,tblptrl
  4171  001A64  C053  FFF4         	movff	??_keypressed+9,prodh
  4172  001A68  C052  FFF3         	movff	??_keypressed+8,prodl
  4173  001A6C  C051  FFDA         	movff	??_keypressed+7,fsr2h
  4174  001A70  C050  FFD9         	movff	??_keypressed+6,fsr2l
  4175  001A74  C04F  FFE2         	movff	??_keypressed+5,fsr1h
  4176  001A78  C04E  FFE1         	movff	??_keypressed+4,fsr1l
  4177  001A7C  C04D  FFEA         	movff	??_keypressed+3,fsr0h
  4178  001A80  C04C  FFE9         	movff	??_keypressed+2,fsr0l
  4179  001A84  C04B  FFFB         	movff	??_keypressed+1,pclatu
  4180  001A88  C04A  FFFA         	movff	??_keypressed,pclath
  4181  001A8C  9259               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4182  001A8E  0011               	retfie		f
  4183  001A90                     __end_of_keypressed:
  4184                           	opt stack 0
  4185                           pclatu	equ	0xFFB
  4186                           pclath	equ	0xFFA
  4187                           tblptru	equ	0xFF8
  4188                           tblptrh	equ	0xFF7
  4189                           tblptrl	equ	0xFF6
  4190                           tablat	equ	0xFF5
  4191                           prodh	equ	0xFF4
  4192                           prodl	equ	0xFF3
  4193                           intcon	equ	0xFF2
  4194                           intcon3	equ	0xFF0
  4195                           indf0	equ	0xFEF
  4196                           postinc0	equ	0xFEE
  4197                           fsr0h	equ	0xFEA
  4198                           fsr0l	equ	0xFE9
  4199                           wreg	equ	0xFE8
  4200                           postdec1	equ	0xFE5
  4201                           plusw1	equ	0xFE3
  4202                           fsr1h	equ	0xFE2
  4203                           fsr1l	equ	0xFE1
  4204                           indf2	equ	0xFDF
  4205                           postinc2	equ	0xFDE
  4206                           postdec2	equ	0xFDD
  4207                           plusw2	equ	0xFDB
  4208                           fsr2h	equ	0xFDA
  4209                           fsr2l	equ	0xFD9
  4210                           status	equ	0xFD8
  4211                           
  4212 ;; *************** function i2_stopMoving *****************
  4213 ;; Defined at:
  4214 ;;		line 126 in file "modules.c"
  4215 ;; Parameters:    Size  Location     Type
  4216 ;;		None
  4217 ;; Auto vars:     Size  Location     Type
  4218 ;;		None
  4219 ;; Return value:  Size  Location     Type
  4220 ;;                  1    wreg      void 
  4221 ;; Registers used:
  4222 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4223 ;; Tracked objects:
  4224 ;;		On entry : 0/0
  4225 ;;		On exit  : 0/0
  4226 ;;		Unchanged: 0/0
  4227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4231 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4232 ;;Total ram usage:        0 bytes
  4233 ;; Hardware stack levels used:    1
  4234 ;; Hardware stack levels required when called:    4
  4235 ;; This function calls:
  4236 ;;		i2_println
  4237 ;; This function is called by:
  4238 ;;		_keypressed
  4239 ;; This function uses a non-reentrant model
  4240 ;;
  4241                           
  4242                           	psect	text22
  4243  00202A                     __ptext22:
  4244                           	opt stack 0
  4245  00202A                     i2_stopMoving:
  4246                           	opt stack 19
  4247                           
  4248                           ;modules.c: 127: (INTCONbits.GIE = 0);
  4249                           
  4250                           ;incstack = 0
  4251  00202A  9EF2               	bcf	intcon,7,c	;volatile
  4252                           
  4253                           ;modules.c: 128: println("Emergency");
  4254  00202C  0EA3               	movlw	low STR_20
  4255  00202E  6E1B               	movwf	i2println@data,c
  4256  002030  0E10               	movlw	high STR_20
  4257  002032  6E1C               	movwf	i2println@data+1,c
  4258  002034  EC48  F00D         	call	i2_println	;wreg free
  4259  002038                     i2l193:
  4260  002038  D7FF               	goto	i2l193
  4261  00203A                     __end_ofi2_stopMoving:
  4262                           	opt stack 0
  4263                           pclatu	equ	0xFFB
  4264                           pclath	equ	0xFFA
  4265                           tblptru	equ	0xFF8
  4266                           tblptrh	equ	0xFF7
  4267                           tblptrl	equ	0xFF6
  4268                           tablat	equ	0xFF5
  4269                           prodh	equ	0xFF4
  4270                           prodl	equ	0xFF3
  4271                           intcon	equ	0xFF2
  4272                           intcon3	equ	0xFF0
  4273                           indf0	equ	0xFEF
  4274                           postinc0	equ	0xFEE
  4275                           fsr0h	equ	0xFEA
  4276                           fsr0l	equ	0xFE9
  4277                           wreg	equ	0xFE8
  4278                           postdec1	equ	0xFE5
  4279                           plusw1	equ	0xFE3
  4280                           fsr1h	equ	0xFE2
  4281                           fsr1l	equ	0xFE1
  4282                           indf2	equ	0xFDF
  4283                           postinc2	equ	0xFDE
  4284                           postdec2	equ	0xFDD
  4285                           plusw2	equ	0xFDB
  4286                           fsr2h	equ	0xFDA
  4287                           fsr2l	equ	0xFD9
  4288                           status	equ	0xFD8
  4289                           
  4290 ;; *************** function i2_println *****************
  4291 ;; Defined at:
  4292 ;;		line 18 in file "modules.c"
  4293 ;; Parameters:    Size  Location     Type
  4294 ;;  data            2   26[COMRAM] PTR unsigned char 
  4295 ;;		 -> STR_20(10), STR_18(11), STR_16(11), STR_14(10), 
  4296 ;;		 -> STR_12(11), STR_10(14), STR_8(14), STR_7(14), 
  4297 ;;		 -> STR_6(15), STR_5(2), STR_4(17), STR_2(9), 
  4298 ;;		 -> STR_1(11), 
  4299 ;; Auto vars:     Size  Location     Type
  4300 ;;  println        41   30[COMRAM] unsigned char [41]
  4301 ;;  println         2   71[COMRAM] int 
  4302 ;; Return value:  Size  Location     Type
  4303 ;;                  1    wreg      void 
  4304 ;; Registers used:
  4305 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4306 ;; Tracked objects:
  4307 ;;		On entry : 0/0
  4308 ;;		On exit  : 0/0
  4309 ;;		Unchanged: 0/0
  4310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4311 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4312 ;;      Locals:        43       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4313 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4314 ;;      Totals:        47       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4315 ;;Total ram usage:       47 bytes
  4316 ;; Hardware stack levels used:    1
  4317 ;; Hardware stack levels required when called:    3
  4318 ;; This function calls:
  4319 ;;		i2_printf
  4320 ;; This function is called by:
  4321 ;;		i2_stopMoving
  4322 ;; This function uses a non-reentrant model
  4323 ;;
  4324                           
  4325                           	psect	text23
  4326  001A90                     __ptext23:
  4327                           	opt stack 0
  4328  001A90                     i2_println:
  4329                           	opt stack 19
  4330                           
  4331                           ;modules.c: 19: int i = 0;
  4332                           
  4333                           ;incstack = 0
  4334  001A90  0E00               	movlw	0
  4335  001A92  6E49               	movwf	i2println@i+1,c
  4336  001A94  0E00               	movlw	0
  4337  001A96  6E48               	movwf	i2println@i,c
  4338                           
  4339                           ;modules.c: 20: char output[] = "                                        ";
  4340  001A98  EE21  F000         	lfsr	2,println@F3053
  4341  001A9C  EE10  F01F         	lfsr	1,i2println@output
  4342  001AA0  0E28               	movlw	40
  4343  001AA2                     i2u111_41:
  4344  001AA2  CFDB FFE3          	movff	plusw2,plusw1
  4345  001AA6  06E8               	decf	wreg,f,c
  4346  001AA8  E2FC               	bc	i2u111_41
  4347                           
  4348                           ;modules.c: 21: while (data[i] != '\0') {
  4349  001AAA  D016               	goto	i2l1780
  4350  001AAC                     i2l1776:
  4351                           
  4352                           ;modules.c: 22: output[i] = data[i++];
  4353  001AAC  5048               	movf	i2println@i,w,c
  4354  001AAE  241B               	addwf	i2println@data,w,c
  4355  001AB0  6E1D               	movwf	??i2_println& (0+255),c
  4356  001AB2  5049               	movf	i2println@i+1,w,c
  4357  001AB4  201C               	addwfc	i2println@data+1,w,c
  4358  001AB6  6E1E               	movwf	(??i2_println+1)& (0+255),c
  4359  001AB8  C01D  FFF6         	movff	??i2_println,tblptrl
  4360  001ABC  C01E  FFF7         	movff	??i2_println+1,tblptrh
  4361  001AC0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4362  001AC0  6AF8               	clrf	tblptru,c
  4363  001AC2                     	endif
  4364  001AC2                     	if	0	;tblptru may be non-zero
  4365  001AC2                     	endif
  4366  001AC2  0E1F               	movlw	low i2println@output
  4367  001AC4  2448               	addwf	i2println@i,w,c
  4368  001AC6  6ED9               	movwf	fsr2l,c
  4369  001AC8  0E00               	movlw	high i2println@output
  4370  001ACA  2049               	addwfc	i2println@i+1,w,c
  4371  001ACC  6EDA               	movwf	fsr2h,c
  4372  001ACE  0008               	tblrd		*
  4373  001AD0  CFF5 FFDF          	movff	tablat,indf2
  4374  001AD4  4A48               	infsnz	i2println@i,f,c
  4375  001AD6  2A49               	incf	i2println@i+1,f,c
  4376  001AD8                     i2l1780:
  4377  001AD8  5048               	movf	i2println@i,w,c
  4378  001ADA  241B               	addwf	i2println@data,w,c
  4379  001ADC  6E1D               	movwf	??i2_println& (0+255),c
  4380  001ADE  5049               	movf	i2println@i+1,w,c
  4381  001AE0  201C               	addwfc	i2println@data+1,w,c
  4382  001AE2  6E1E               	movwf	(??i2_println+1)& (0+255),c
  4383  001AE4  C01D  FFF6         	movff	??i2_println,tblptrl
  4384  001AE8  C01E  FFF7         	movff	??i2_println+1,tblptrh
  4385  001AEC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4386  001AEC  6AF8               	clrf	tblptru,c
  4387  001AEE                     	endif
  4388  001AEE                     	if	0	;tblptru may be non-zero
  4389  001AEE                     	endif
  4390  001AEE  0008               	tblrd		*
  4391  001AF0  50F5               	movf	tablat,w,c
  4392  001AF2  0900               	iorlw	0
  4393  001AF4  A4D8               	btfss	status,2,c
  4394  001AF6  D7DA               	goto	i2l1776
  4395                           
  4396                           ;modules.c: 23: }
  4397                           ;modules.c: 24: printf("%s", output);
  4398  001AF8  0EC0               	movlw	low STR_3
  4399  001AFA  6E0D               	movwf	i2printf@f,c
  4400  001AFC  0E10               	movlw	high STR_3
  4401  001AFE  6E0E               	movwf	i2printf@f+1,c
  4402  001B00  0E1F               	movlw	low i2println@output
  4403  001B02  6E0F               	movwf	?i2_printf+2,c
  4404  001B04  0E00               	movlw	high i2println@output
  4405  001B06  6E10               	movwf	?i2_printf+3,c
  4406  001B08  EC8E  F00B         	call	i2_printf	;wreg free
  4407  001B0C  0012               	return		;funcret
  4408  001B0E                     __end_ofi2_println:
  4409                           	opt stack 0
  4410                           pclatu	equ	0xFFB
  4411                           pclath	equ	0xFFA
  4412                           tblptru	equ	0xFF8
  4413                           tblptrh	equ	0xFF7
  4414                           tblptrl	equ	0xFF6
  4415                           tablat	equ	0xFF5
  4416                           prodh	equ	0xFF4
  4417                           prodl	equ	0xFF3
  4418                           intcon	equ	0xFF2
  4419                           intcon3	equ	0xFF0
  4420                           indf0	equ	0xFEF
  4421                           postinc0	equ	0xFEE
  4422                           fsr0h	equ	0xFEA
  4423                           fsr0l	equ	0xFE9
  4424                           wreg	equ	0xFE8
  4425                           postdec1	equ	0xFE5
  4426                           plusw1	equ	0xFE3
  4427                           fsr1h	equ	0xFE2
  4428                           fsr1l	equ	0xFE1
  4429                           indf2	equ	0xFDF
  4430                           postinc2	equ	0xFDE
  4431                           postdec2	equ	0xFDD
  4432                           plusw2	equ	0xFDB
  4433                           fsr2h	equ	0xFDA
  4434                           fsr2l	equ	0xFD9
  4435                           status	equ	0xFD8
  4436                           
  4437 ;; *************** function i2_printf *****************
  4438 ;; Defined at:
  4439 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  4440 ;; Parameters:    Size  Location     Type
  4441 ;;  f               2   12[COMRAM] PTR const unsigned char 
  4442 ;;		 -> STR_19(3), STR_17(3), STR_15(3), STR_13(3), 
  4443 ;;		 -> STR_11(13), STR_9(11), STR_3(3), 
  4444 ;; Auto vars:     Size  Location     Type
  4445 ;;  printf          4    0        struct .
  4446 ;;  printf          2   23[COMRAM] unsigned int 
  4447 ;;  printf          2   21[COMRAM] PTR const unsigned char 
  4448 ;;		 -> STR_21(7), println@output(41), 
  4449 ;;  printf          2   19[COMRAM] PTR void [1]
  4450 ;;		 -> ?i2_printf(2), ?_printf(2), 
  4451 ;;  printf          2    0        unsigned int 
  4452 ;;  printf          1   25[COMRAM] char 
  4453 ;;  printf          1   18[COMRAM] char 
  4454 ;;  printf          1   17[COMRAM] unsigned char 
  4455 ;; Return value:  Size  Location     Type
  4456 ;;                  2   12[COMRAM] int 
  4457 ;; Registers used:
  4458 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4459 ;; Tracked objects:
  4460 ;;		On entry : 0/0
  4461 ;;		On exit  : 0/0
  4462 ;;		Unchanged: 0/0
  4463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4464 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4465 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4466 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4467 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4468 ;;Total ram usage:       14 bytes
  4469 ;; Hardware stack levels used:    1
  4470 ;; Hardware stack levels required when called:    2
  4471 ;; This function calls:
  4472 ;;		i2___lwdiv
  4473 ;;		i2___lwmod
  4474 ;;		i2_putch
  4475 ;; This function is called by:
  4476 ;;		i2_println
  4477 ;; This function uses a non-reentrant model
  4478 ;;
  4479                           
  4480                           	psect	text24
  4481  00171C                     __ptext24:
  4482                           	opt stack 0
  4483  00171C                     i2_printf:
  4484                           	opt stack 19
  4485                           
  4486                           ;doprnt.c: 466: va_list ap;
  4487                           ;doprnt.c: 499: signed char c;
  4488                           ;doprnt.c: 506: signed char prec;
  4489                           ;doprnt.c: 508: unsigned char flag;
  4490                           ;doprnt.c: 523: union {
  4491                           ;doprnt.c: 524: unsigned long vd;
  4492                           ;doprnt.c: 525: double integ;
  4493                           ;doprnt.c: 526: } tmpval;
  4494                           ;doprnt.c: 528: unsigned int val;
  4495                           ;doprnt.c: 529: unsigned len;
  4496                           ;doprnt.c: 530: const char * cp;
  4497                           ;doprnt.c: 533: *ap = __va_start();
  4498                           
  4499                           ;incstack = 0
  4500  00171C  0E0F               	movlw	low (?i2_printf+2)
  4501  00171E  6E14               	movwf	i2printf@ap,c
  4502  001720  0E00               	movlw	high (?i2_printf+2)
  4503  001722  6E15               	movwf	i2printf@ap+1,c
  4504                           
  4505                           ;doprnt.c: 536: while(c = *f++) {
  4506  001724  D0C8               	goto	i2l1652
  4507  001726                     i2l1592:
  4508                           
  4509                           ;doprnt.c: 538: if(c != '%')
  4510  001726  0E25               	movlw	37
  4511  001728  181A               	xorwf	i2printf@c,w,c
  4512  00172A  B4D8               	btfsc	status,2,c
  4513  00172C  D004               	goto	i2l1596
  4514                           
  4515                           ;doprnt.c: 540: {
  4516                           ;doprnt.c: 541: (putch(c) );
  4517  00172E  501A               	movf	i2printf@c,w,c
  4518  001730  EC1D  F010         	call	i2_putch
  4519                           
  4520                           ;doprnt.c: 542: continue;
  4521  001734  D0C0               	goto	i2l1652
  4522  001736                     i2l1596:
  4523                           
  4524                           ;doprnt.c: 543: }
  4525                           ;doprnt.c: 548: flag = 0;
  4526  001736  0E00               	movlw	0
  4527  001738  6E12               	movwf	i2printf@flag,c
  4528                           
  4529                           ;doprnt.c: 635: switch(c = *f++) {
  4530  00173A  D03F               	goto	i2l1614
  4531  00173C                     i2l1598:
  4532                           
  4533                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4534  00173C  C014  FFD9         	movff	i2printf@ap,fsr2l
  4535  001740  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  4536  001744  CFDE F016          	movff	postinc2,i2printf@cp
  4537  001748  CFDD F017          	movff	postdec2,i2printf@cp+1
  4538  00174C  0E02               	movlw	2
  4539  00174E  2614               	addwf	i2printf@ap,f,c
  4540  001750  0E00               	movlw	0
  4541  001752  2215               	addwfc	i2printf@ap+1,f,c
  4542                           
  4543                           ;doprnt.c: 740: if(!cp)
  4544  001754  5016               	movf	i2printf@cp,w,c
  4545  001756  1017               	iorwf	i2printf@cp+1,w,c
  4546  001758  A4D8               	btfss	status,2,c
  4547  00175A  D01A               	goto	i2l1610
  4548                           
  4549                           ;doprnt.c: 741: cp = "(null)";
  4550  00175C  0EB6               	movlw	low STR_21
  4551  00175E  6E16               	movwf	i2printf@cp,c
  4552  001760  0E10               	movlw	high STR_21
  4553  001762  6E17               	movwf	i2printf@cp+1,c
  4554                           
  4555                           ;doprnt.c: 777: while(*cp)
  4556  001764  D015               	goto	i2l1610
  4557  001766                     i2l1606:
  4558                           
  4559                           ;doprnt.c: 778: (putch(*cp++) );
  4560  001766  C016  FFF6         	movff	i2printf@cp,tblptrl
  4561  00176A  C017  FFF7         	movff	i2printf@cp+1,tblptrh
  4562  00176E  0E00               	movlw	low (__smallconst shr (0+16))
  4563  001770  6EF8               	movwf	tblptru,c
  4564  001772  0E0F               	movlw	(high __ramtop+-1)
  4565  001774  64F7               	cpfsgt	tblptrh,c
  4566  001776  D003               	bra	i2u93_47
  4567  001778  0008               	tblrd		*
  4568  00177A  50F5               	movf	tablat,w,c
  4569  00177C  D005               	bra	i2u93_40
  4570  00177E                     i2u93_47:
  4571  00177E  CFF6 FFE9          	movff	tblptrl,fsr0l
  4572  001782  CFF7 FFEA          	movff	tblptrh,fsr0h
  4573  001786  50EF               	movf	indf0,w,c
  4574  001788                     i2u93_40:
  4575  001788  EC1D  F010         	call	i2_putch
  4576  00178C  4A16               	infsnz	i2printf@cp,f,c
  4577  00178E  2A17               	incf	i2printf@cp+1,f,c
  4578  001790                     i2l1610:
  4579  001790  C016  FFF6         	movff	i2printf@cp,tblptrl
  4580  001794  C017  FFF7         	movff	i2printf@cp+1,tblptrh
  4581  001798  0E00               	movlw	low (__smallconst shr (0+16))
  4582  00179A  6EF8               	movwf	tblptru,c
  4583  00179C  0E0F               	movlw	(high __ramtop+-1)
  4584  00179E  64F7               	cpfsgt	tblptrh,c
  4585  0017A0  D003               	bra	i2u94_47
  4586  0017A2  0008               	tblrd		*
  4587  0017A4  50F5               	movf	tablat,w,c
  4588  0017A6  D005               	bra	i2u94_40
  4589  0017A8                     i2u94_47:
  4590  0017A8  CFF6 FFE9          	movff	tblptrl,fsr0l
  4591  0017AC  CFF7 FFEA          	movff	tblptrh,fsr0h
  4592  0017B0  50EF               	movf	indf0,w,c
  4593  0017B2                     i2u94_40:
  4594  0017B2  0900               	iorlw	0
  4595  0017B4  B4D8               	btfsc	status,2,c
  4596  0017B6  D07F               	goto	i2l1652
  4597  0017B8  D7D6               	goto	i2l1606
  4598  0017BA                     i2l1614:
  4599  0017BA  C00D  FFF6         	movff	i2printf@f,tblptrl
  4600  0017BE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4601  0017C2  4A0D               	infsnz	i2printf@f,f,c
  4602  0017C4  2A0E               	incf	i2printf@f+1,f,c
  4603  0017C6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4604  0017C6  6AF8               	clrf	tblptru,c
  4605  0017C8                     	endif
  4606  0017C8                     	if	0	;tblptru may be non-zero
  4607  0017C8                     	endif
  4608  0017C8  0008               	tblrd		*
  4609  0017CA  CFF5 F01A          	movff	tablat,i2printf@c
  4610  0017CE  501A               	movf	i2printf@c,w,c
  4611                           
  4612                           ; Switch size 1, requested type "space"
  4613                           ; Number of cases is 4, Range of values is 0 to 115
  4614                           ; switch strategies available:
  4615                           ; Name         Instructions Cycles
  4616                           ; simple_byte           13     7 (average)
  4617                           ;	Chosen strategy is simple_byte
  4618  0017D0  0A00               	xorlw	0	; case 0
  4619  0017D2  B4D8               	btfsc	status,2,c
  4620  0017D4  0012               	return	
  4621  0017D6  0A64               	xorlw	100	; case 100
  4622  0017D8  B4D8               	btfsc	status,2,c
  4623  0017DA  D007               	goto	i2l1616
  4624  0017DC  0A0D               	xorlw	13	; case 105
  4625  0017DE  B4D8               	btfsc	status,2,c
  4626  0017E0  D004               	goto	i2l1616
  4627  0017E2  0A1A               	xorlw	26	; case 115
  4628  0017E4  B4D8               	btfsc	status,2,c
  4629  0017E6  D7AA               	goto	i2l1598
  4630  0017E8  D066               	goto	i2l1652
  4631  0017EA                     i2l1616:
  4632                           
  4633                           ;doprnt.c: 1253: {
  4634                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4635  0017EA  C014  FFD9         	movff	i2printf@ap,fsr2l
  4636  0017EE  C015  FFDA         	movff	i2printf@ap+1,fsr2h
  4637  0017F2  CFDE F018          	movff	postinc2,i2printf@val
  4638  0017F6  CFDD F019          	movff	postdec2,i2printf@val+1
  4639  0017FA  0E02               	movlw	2
  4640  0017FC  2614               	addwf	i2printf@ap,f,c
  4641  0017FE  0E00               	movlw	0
  4642  001800  2215               	addwfc	i2printf@ap+1,f,c
  4643                           
  4644                           ;doprnt.c: 1261: if((int)val < 0) {
  4645  001802  AE19               	btfss	i2printf@val+1,7,c
  4646  001804  D006               	goto	i2l1626
  4647                           
  4648                           ;doprnt.c: 1262: flag |= 0x03;
  4649  001806  0E03               	movlw	3
  4650  001808  1212               	iorwf	i2printf@flag,f,c
  4651                           
  4652                           ;doprnt.c: 1263: val = -val;
  4653  00180A  6C18               	negf	i2printf@val,c
  4654  00180C  1E19               	comf	i2printf@val+1,f,c
  4655  00180E  B0D8               	btfsc	status,0,c
  4656  001810  2A19               	incf	i2printf@val+1,f,c
  4657  001812                     i2l1626:
  4658                           
  4659                           ;doprnt.c: 1264: }
  4660                           ;doprnt.c: 1266: }
  4661                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4662  001812  0E01               	movlw	1
  4663  001814  6E1A               	movwf	i2printf@c,c
  4664  001816                     i2l1628:
  4665  001816  0E05               	movlw	5
  4666  001818  181A               	xorwf	i2printf@c,w,c
  4667  00181A  B4D8               	btfsc	status,2,c
  4668  00181C  D015               	goto	i2l1640
  4669                           
  4670                           ;doprnt.c: 1306: if(val < dpowers[c])
  4671  00181E  501A               	movf	i2printf@c,w,c
  4672  001820  0D02               	mullw	2
  4673  001822  0E01               	movlw	low _dpowers
  4674  001824  24F3               	addwf	prodl,w,c
  4675  001826  6EF6               	movwf	tblptrl,c
  4676  001828  0E10               	movlw	high _dpowers
  4677  00182A  20F4               	addwfc	prodh,w,c
  4678  00182C  6EF7               	movwf	tblptrh,c
  4679  00182E                     	if	1	;There are 3 active tblptr bytes
  4680  00182E  6AF8               	clrf	tblptru,c
  4681  001830  0E00               	movlw	low (__mediumconst shr (0+16))
  4682  001832  22F8               	addwfc	tblptru,f,c
  4683  001834                     	endif
  4684  001834  0009               	tblrd		*+
  4685  001836  50F5               	movf	tablat,w,c
  4686  001838  5C18               	subwf	i2printf@val,w,c
  4687  00183A  0009               	tblrd		*+
  4688  00183C  50F5               	movf	tablat,w,c
  4689  00183E  5819               	subwfb	i2printf@val+1,w,c
  4690  001840  A0D8               	btfss	status,0,c
  4691  001842  D002               	goto	i2l1640
  4692                           
  4693                           ;doprnt.c: 1307: break;
  4694  001844  2A1A               	incf	i2printf@c,f,c
  4695  001846  D7E7               	goto	i2l1628
  4696  001848                     i2l1640:
  4697                           
  4698                           ;doprnt.c: 1422: {
  4699                           ;doprnt.c: 1438: if(flag & 0x03)
  4700  001848  C012  F011         	movff	i2printf@flag,??i2_printf
  4701  00184C  0E03               	movlw	3
  4702  00184E  1611               	andwf	??i2_printf,f,c
  4703  001850  B4D8               	btfsc	status,2,c
  4704  001852  D003               	goto	i2l1644
  4705                           
  4706                           ;doprnt.c: 1439: (putch('-') );
  4707  001854  0E2D               	movlw	45
  4708  001856  EC1D  F010         	call	i2_putch
  4709  00185A                     i2l1644:
  4710                           
  4711                           ;doprnt.c: 1469: }
  4712                           ;doprnt.c: 1472: prec = c;
  4713  00185A  C01A  F013         	movff	i2printf@c,i2printf@prec
  4714                           
  4715                           ;doprnt.c: 1474: while(prec--) {
  4716  00185E  D027               	goto	i2l1650
  4717  001860                     i2l1646:
  4718                           
  4719                           ;doprnt.c: 1478: {
  4720                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4721  001860  5013               	movf	i2printf@prec,w,c
  4722  001862  0D02               	mullw	2
  4723  001864  0E01               	movlw	low _dpowers
  4724  001866  24F3               	addwf	prodl,w,c
  4725  001868  6EF6               	movwf	tblptrl,c
  4726  00186A  0E10               	movlw	high _dpowers
  4727  00186C  20F4               	addwfc	prodh,w,c
  4728  00186E  6EF7               	movwf	tblptrh,c
  4729  001870                     	if	1	;There are 3 active tblptr bytes
  4730  001870  6AF8               	clrf	tblptru,c
  4731  001872  0E00               	movlw	low (__mediumconst shr (0+16))
  4732  001874  22F8               	addwfc	tblptru,f,c
  4733  001876                     	endif
  4734  001876  0009               	tblrd		*+
  4735  001878  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  4736  00187C  000A               	tblrd		*-
  4737  00187E  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  4738  001882  C018  F001         	movff	i2printf@val,i2___lwdiv@dividend
  4739  001886  C019  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  4740  00188A  ECFA  F00E         	call	i2___lwdiv	;wreg free
  4741  00188E  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  4742  001892  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  4743  001896  0E00               	movlw	0
  4744  001898  6E0B               	movwf	i2___lwmod@divisor+1,c
  4745  00189A  0E0A               	movlw	10
  4746  00189C  6E0A               	movwf	i2___lwmod@divisor,c
  4747  00189E  EC6D  F00F         	call	i2___lwmod	;wreg free
  4748  0018A2  5008               	movf	?i2___lwmod,w,c
  4749  0018A4  0F30               	addlw	48
  4750  0018A6  6E1A               	movwf	i2printf@c,c
  4751                           
  4752                           ;doprnt.c: 1523: }
  4753                           ;doprnt.c: 1524: (putch(c) );
  4754  0018A8  501A               	movf	i2printf@c,w,c
  4755  0018AA  EC1D  F010         	call	i2_putch
  4756  0018AE                     i2l1650:
  4757  0018AE  0613               	decf	i2printf@prec,f,c
  4758  0018B0  2813               	incf	i2printf@prec,w,c
  4759  0018B2  A4D8               	btfss	status,2,c
  4760  0018B4  D7D5               	goto	i2l1646
  4761  0018B6                     i2l1652:
  4762  0018B6  C00D  FFF6         	movff	i2printf@f,tblptrl
  4763  0018BA  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  4764  0018BE  4A0D               	infsnz	i2printf@f,f,c
  4765  0018C0  2A0E               	incf	i2printf@f+1,f,c
  4766  0018C2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4767  0018C2  6AF8               	clrf	tblptru,c
  4768  0018C4                     	endif
  4769  0018C4                     	if	0	;tblptru may be non-zero
  4770  0018C4                     	endif
  4771  0018C4  0008               	tblrd		*
  4772  0018C6  CFF5 F01A          	movff	tablat,i2printf@c
  4773  0018CA  501A               	movf	i2printf@c,w,c
  4774  0018CC  B4D8               	btfsc	status,2,c
  4775  0018CE  0012               	return	
  4776  0018D0  D72A               	goto	i2l1592
  4777  0018D2                     __end_ofi2_printf:
  4778                           	opt stack 0
  4779                           pclatu	equ	0xFFB
  4780                           pclath	equ	0xFFA
  4781                           tblptru	equ	0xFF8
  4782                           tblptrh	equ	0xFF7
  4783                           tblptrl	equ	0xFF6
  4784                           tablat	equ	0xFF5
  4785                           prodh	equ	0xFF4
  4786                           prodl	equ	0xFF3
  4787                           intcon	equ	0xFF2
  4788                           intcon3	equ	0xFF0
  4789                           indf0	equ	0xFEF
  4790                           postinc0	equ	0xFEE
  4791                           fsr0h	equ	0xFEA
  4792                           fsr0l	equ	0xFE9
  4793                           wreg	equ	0xFE8
  4794                           postdec1	equ	0xFE5
  4795                           plusw1	equ	0xFE3
  4796                           fsr1h	equ	0xFE2
  4797                           fsr1l	equ	0xFE1
  4798                           indf2	equ	0xFDF
  4799                           postinc2	equ	0xFDE
  4800                           postdec2	equ	0xFDD
  4801                           plusw2	equ	0xFDB
  4802                           fsr2h	equ	0xFDA
  4803                           fsr2l	equ	0xFD9
  4804                           status	equ	0xFD8
  4805                           
  4806 ;; *************** function i2_putch *****************
  4807 ;; Defined at:
  4808 ;;		line 31 in file "lcd.c"
  4809 ;; Parameters:    Size  Location     Type
  4810 ;;  data            1    wreg     unsigned char 
  4811 ;; Auto vars:     Size  Location     Type
  4812 ;;  data            1    2[COMRAM] unsigned char 
  4813 ;; Return value:  Size  Location     Type
  4814 ;;                  1    wreg      void 
  4815 ;; Registers used:
  4816 ;;		wreg, status,2, status,0, cstack
  4817 ;; Tracked objects:
  4818 ;;		On entry : 0/0
  4819 ;;		On exit  : 0/0
  4820 ;;		Unchanged: 0/0
  4821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4823 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4825 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4826 ;;Total ram usage:        1 bytes
  4827 ;; Hardware stack levels used:    1
  4828 ;; Hardware stack levels required when called:    1
  4829 ;; This function calls:
  4830 ;;		i2_lcdNibble
  4831 ;; This function is called by:
  4832 ;;		i2_printf
  4833 ;; This function uses a non-reentrant model
  4834 ;;
  4835                           
  4836                           	psect	text25
  4837  00203A                     __ptext25:
  4838                           	opt stack 0
  4839  00203A                     i2_putch:
  4840                           	opt stack 19
  4841                           
  4842                           ;incstack = 0
  4843                           ;i2putch@data stored from wreg
  4844  00203A  6E03               	movwf	i2putch@data,c
  4845                           
  4846                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  4847  00203C  848C               	bsf	3980,2,c	;volatile
  4848                           
  4849                           ;lcd.c: 33: lcdNibble(data);
  4850  00203E  5003               	movf	i2putch@data,w,c
  4851  002040  ECCF  F00E         	call	i2_lcdNibble
  4852  002044  0012               	return		;funcret
  4853  002046                     __end_ofi2_putch:
  4854                           	opt stack 0
  4855                           pclatu	equ	0xFFB
  4856                           pclath	equ	0xFFA
  4857                           tblptru	equ	0xFF8
  4858                           tblptrh	equ	0xFF7
  4859                           tblptrl	equ	0xFF6
  4860                           tablat	equ	0xFF5
  4861                           prodh	equ	0xFF4
  4862                           prodl	equ	0xFF3
  4863                           intcon	equ	0xFF2
  4864                           intcon3	equ	0xFF0
  4865                           indf0	equ	0xFEF
  4866                           postinc0	equ	0xFEE
  4867                           fsr0h	equ	0xFEA
  4868                           fsr0l	equ	0xFE9
  4869                           wreg	equ	0xFE8
  4870                           postdec1	equ	0xFE5
  4871                           plusw1	equ	0xFE3
  4872                           fsr1h	equ	0xFE2
  4873                           fsr1l	equ	0xFE1
  4874                           indf2	equ	0xFDF
  4875                           postinc2	equ	0xFDE
  4876                           postdec2	equ	0xFDD
  4877                           plusw2	equ	0xFDB
  4878                           fsr2h	equ	0xFDA
  4879                           fsr2l	equ	0xFD9
  4880                           status	equ	0xFD8
  4881                           
  4882 ;; *************** function i2_lcdNibble *****************
  4883 ;; Defined at:
  4884 ;;		line 36 in file "lcd.c"
  4885 ;; Parameters:    Size  Location     Type
  4886 ;;  data            1    wreg     unsigned char 
  4887 ;; Auto vars:     Size  Location     Type
  4888 ;;  data            1    1[COMRAM] unsigned char 
  4889 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  4890 ;; Return value:  Size  Location     Type
  4891 ;;                  1    wreg      void 
  4892 ;; Registers used:
  4893 ;;		wreg, status,2, status,0
  4894 ;; Tracked objects:
  4895 ;;		On entry : 0/0
  4896 ;;		On exit  : 0/0
  4897 ;;		Unchanged: 0/0
  4898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4900 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4902 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4903 ;;Total ram usage:        2 bytes
  4904 ;; Hardware stack levels used:    1
  4905 ;; This function calls:
  4906 ;;		Nothing
  4907 ;; This function is called by:
  4908 ;;		i2_putch
  4909 ;; This function uses a non-reentrant model
  4910 ;;
  4911                           
  4912                           	psect	text26
  4913  001D9E                     __ptext26:
  4914                           	opt stack 0
  4915  001D9E                     i2_lcdNibble:
  4916                           	opt stack 19
  4917                           
  4918                           ;incstack = 0
  4919                           ;i2lcdNibble@data stored from wreg
  4920  001D9E  6E02               	movwf	i2lcdNibble@data,c
  4921                           
  4922                           ;lcd.c: 38: char temp = data & 0xF0;
  4923  001DA0  5002               	movf	i2lcdNibble@data,w,c
  4924  001DA2  0BF0               	andlw	240
  4925  001DA4  6E01               	movwf	i2lcdNibble@temp,c
  4926                           
  4927                           ;lcd.c: 39: LATD = LATD & 0x0F;
  4928  001DA6  508C               	movf	3980,w,c	;volatile
  4929  001DA8  0B0F               	andlw	15
  4930  001DAA  6E8C               	movwf	3980,c	;volatile
  4931                           
  4932                           ;lcd.c: 40: LATD = temp | LATD;
  4933  001DAC  5001               	movf	i2lcdNibble@temp,w,c
  4934  001DAE  108C               	iorwf	3980,w,c	;volatile
  4935  001DB0  6E8C               	movwf	3980,c	;volatile
  4936                           
  4937                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  4938  001DB2  968C               	bcf	3980,3,c	;volatile
  4939                           
  4940                           ;lcd.c: 43: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4941  001DB4  0E10               	movlw	16
  4942  001DB6                     i2u135_47:
  4943  001DB6  2EE8               	decfsz	wreg,f,c
  4944  001DB8  D7FE               	bra	i2u135_47
  4945  001DBA  D000               	nop2	
  4946                           
  4947                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  4948  001DBC  868C               	bsf	3980,3,c	;volatile
  4949                           
  4950                           ;lcd.c: 45: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4951  001DBE  0E10               	movlw	16
  4952  001DC0                     i2u136_47:
  4953  001DC0  2EE8               	decfsz	wreg,f,c
  4954  001DC2  D7FE               	bra	i2u136_47
  4955  001DC4  D000               	nop2	
  4956                           
  4957                           ;lcd.c: 47: data = data << 4;
  4958  001DC6  3802               	swapf	i2lcdNibble@data,w,c
  4959  001DC8  0BF0               	andlw	240
  4960  001DCA  6E02               	movwf	i2lcdNibble@data,c
  4961                           
  4962                           ;lcd.c: 49: temp = data & 0xF0;
  4963  001DCC  5002               	movf	i2lcdNibble@data,w,c
  4964  001DCE  0BF0               	andlw	240
  4965  001DD0  6E01               	movwf	i2lcdNibble@temp,c
  4966                           
  4967                           ;lcd.c: 50: LATD = LATD & 0x0F;
  4968  001DD2  508C               	movf	3980,w,c	;volatile
  4969  001DD4  0B0F               	andlw	15
  4970  001DD6  6E8C               	movwf	3980,c	;volatile
  4971                           
  4972                           ;lcd.c: 51: LATD = temp | LATD;
  4973  001DD8  5001               	movf	i2lcdNibble@temp,w,c
  4974  001DDA  108C               	iorwf	3980,w,c	;volatile
  4975  001DDC  6E8C               	movwf	3980,c	;volatile
  4976                           
  4977                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  4978  001DDE  968C               	bcf	3980,3,c	;volatile
  4979                           
  4980                           ;lcd.c: 54: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4981  001DE0  0E10               	movlw	16
  4982  001DE2                     i2u137_47:
  4983  001DE2  2EE8               	decfsz	wreg,f,c
  4984  001DE4  D7FE               	bra	i2u137_47
  4985  001DE6  D000               	nop2	
  4986                           
  4987                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  4988  001DE8  868C               	bsf	3980,3,c	;volatile
  4989                           
  4990                           ;lcd.c: 56: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4991  001DEA  0E10               	movlw	16
  4992  001DEC                     i2u138_47:
  4993  001DEC  2EE8               	decfsz	wreg,f,c
  4994  001DEE  D7FE               	bra	i2u138_47
  4995  001DF0  D000               	nop2	
  4996  001DF2  0012               	return		;funcret
  4997  001DF4                     __end_ofi2_lcdNibble:
  4998                           	opt stack 0
  4999                           pclatu	equ	0xFFB
  5000                           pclath	equ	0xFFA
  5001                           tblptru	equ	0xFF8
  5002                           tblptrh	equ	0xFF7
  5003                           tblptrl	equ	0xFF6
  5004                           tablat	equ	0xFF5
  5005                           prodh	equ	0xFF4
  5006                           prodl	equ	0xFF3
  5007                           intcon	equ	0xFF2
  5008                           intcon3	equ	0xFF0
  5009                           indf0	equ	0xFEF
  5010                           postinc0	equ	0xFEE
  5011                           fsr0h	equ	0xFEA
  5012                           fsr0l	equ	0xFE9
  5013                           wreg	equ	0xFE8
  5014                           postdec1	equ	0xFE5
  5015                           plusw1	equ	0xFE3
  5016                           fsr1h	equ	0xFE2
  5017                           fsr1l	equ	0xFE1
  5018                           indf2	equ	0xFDF
  5019                           postinc2	equ	0xFDE
  5020                           postdec2	equ	0xFDD
  5021                           plusw2	equ	0xFDB
  5022                           fsr2h	equ	0xFDA
  5023                           fsr2l	equ	0xFD9
  5024                           status	equ	0xFD8
  5025                           
  5026 ;; *************** function i2___lwmod *****************
  5027 ;; Defined at:
  5028 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  5029 ;; Parameters:    Size  Location     Type
  5030 ;;  dividend        2    7[COMRAM] unsigned int 
  5031 ;;  divisor         2    9[COMRAM] unsigned int 
  5032 ;; Auto vars:     Size  Location     Type
  5033 ;;  __lwmod         1   11[COMRAM] unsigned char 
  5034 ;; Return value:  Size  Location     Type
  5035 ;;                  2    7[COMRAM] unsigned int 
  5036 ;; Registers used:
  5037 ;;		wreg, status,2, status,0
  5038 ;; Tracked objects:
  5039 ;;		On entry : 0/0
  5040 ;;		On exit  : 0/0
  5041 ;;		Unchanged: 0/0
  5042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5043 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5044 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5046 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5047 ;;Total ram usage:        5 bytes
  5048 ;; Hardware stack levels used:    1
  5049 ;; This function calls:
  5050 ;;		Nothing
  5051 ;; This function is called by:
  5052 ;;		i2_printf
  5053 ;; This function uses a non-reentrant model
  5054 ;;
  5055                           
  5056                           	psect	text27
  5057  001EDA                     __ptext27:
  5058                           	opt stack 0
  5059  001EDA                     i2___lwmod:
  5060                           	opt stack 20
  5061                           
  5062                           ;incstack = 0
  5063  001EDA  500A               	movf	i2___lwmod@divisor,w,c
  5064  001EDC  100B               	iorwf	i2___lwmod@divisor+1,w,c
  5065  001EDE  B4D8               	btfsc	status,2,c
  5066  001EE0  D018               	goto	i2l653
  5067  001EE2  0E01               	movlw	1
  5068  001EE4  6E0C               	movwf	i2___lwmod@counter,c
  5069  001EE6  D004               	goto	i2l1550
  5070  001EE8                     i2l1548:
  5071  001EE8  90D8               	bcf	status,0,c
  5072  001EEA  360A               	rlcf	i2___lwmod@divisor,f,c
  5073  001EEC  360B               	rlcf	i2___lwmod@divisor+1,f,c
  5074  001EEE  2A0C               	incf	i2___lwmod@counter,f,c
  5075  001EF0                     i2l1550:
  5076  001EF0  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  5077  001EF2  D7FA               	goto	i2l1548
  5078  001EF4                     i2l1552:
  5079  001EF4  500A               	movf	i2___lwmod@divisor,w,c
  5080  001EF6  5C08               	subwf	i2___lwmod@dividend,w,c
  5081  001EF8  500B               	movf	i2___lwmod@divisor+1,w,c
  5082  001EFA  5809               	subwfb	i2___lwmod@dividend+1,w,c
  5083  001EFC  A0D8               	btfss	status,0,c
  5084  001EFE  D004               	goto	i2l1556
  5085  001F00  500A               	movf	i2___lwmod@divisor,w,c
  5086  001F02  5E08               	subwf	i2___lwmod@dividend,f,c
  5087  001F04  500B               	movf	i2___lwmod@divisor+1,w,c
  5088  001F06  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  5089  001F08                     i2l1556:
  5090  001F08  90D8               	bcf	status,0,c
  5091  001F0A  320B               	rrcf	i2___lwmod@divisor+1,f,c
  5092  001F0C  320A               	rrcf	i2___lwmod@divisor,f,c
  5093  001F0E  2E0C               	decfsz	i2___lwmod@counter,f,c
  5094  001F10  D7F1               	goto	i2l1552
  5095  001F12                     i2l653:
  5096  001F12  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  5097  001F16  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  5098  001F1A  0012               	return		;funcret
  5099  001F1C                     __end_ofi2___lwmod:
  5100                           	opt stack 0
  5101                           pclatu	equ	0xFFB
  5102                           pclath	equ	0xFFA
  5103                           tblptru	equ	0xFF8
  5104                           tblptrh	equ	0xFF7
  5105                           tblptrl	equ	0xFF6
  5106                           tablat	equ	0xFF5
  5107                           prodh	equ	0xFF4
  5108                           prodl	equ	0xFF3
  5109                           intcon	equ	0xFF2
  5110                           intcon3	equ	0xFF0
  5111                           indf0	equ	0xFEF
  5112                           postinc0	equ	0xFEE
  5113                           fsr0h	equ	0xFEA
  5114                           fsr0l	equ	0xFE9
  5115                           wreg	equ	0xFE8
  5116                           postdec1	equ	0xFE5
  5117                           plusw1	equ	0xFE3
  5118                           fsr1h	equ	0xFE2
  5119                           fsr1l	equ	0xFE1
  5120                           indf2	equ	0xFDF
  5121                           postinc2	equ	0xFDE
  5122                           postdec2	equ	0xFDD
  5123                           plusw2	equ	0xFDB
  5124                           fsr2h	equ	0xFDA
  5125                           fsr2l	equ	0xFD9
  5126                           status	equ	0xFD8
  5127                           
  5128 ;; *************** function i2___lwdiv *****************
  5129 ;; Defined at:
  5130 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  5131 ;; Parameters:    Size  Location     Type
  5132 ;;  dividend        2    0[COMRAM] unsigned int 
  5133 ;;  divisor         2    2[COMRAM] unsigned int 
  5134 ;; Auto vars:     Size  Location     Type
  5135 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  5136 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  5137 ;; Return value:  Size  Location     Type
  5138 ;;                  2    0[COMRAM] unsigned int 
  5139 ;; Registers used:
  5140 ;;		wreg, status,2, status,0
  5141 ;; Tracked objects:
  5142 ;;		On entry : 0/0
  5143 ;;		On exit  : 0/0
  5144 ;;		Unchanged: 0/0
  5145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5146 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5147 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5149 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5150 ;;Total ram usage:        7 bytes
  5151 ;; Hardware stack levels used:    1
  5152 ;; This function calls:
  5153 ;;		Nothing
  5154 ;; This function is called by:
  5155 ;;		i2_printf
  5156 ;; This function uses a non-reentrant model
  5157 ;;
  5158                           
  5159                           	psect	text28
  5160  001DF4                     __ptext28:
  5161                           	opt stack 0
  5162  001DF4                     i2___lwdiv:
  5163                           	opt stack 20
  5164                           
  5165                           ;incstack = 0
  5166  001DF4  0E00               	movlw	0
  5167  001DF6  6E06               	movwf	i2___lwdiv@quotient+1,c
  5168  001DF8  0E00               	movlw	0
  5169  001DFA  6E05               	movwf	i2___lwdiv@quotient,c
  5170  001DFC  5003               	movf	i2___lwdiv@divisor,w,c
  5171  001DFE  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  5172  001E00  B4D8               	btfsc	status,2,c
  5173  001E02  D01C               	goto	i2l643
  5174  001E04  0E01               	movlw	1
  5175  001E06  6E07               	movwf	i2___lwdiv@counter,c
  5176  001E08  D004               	goto	i2l1530
  5177  001E0A                     i2l1528:
  5178  001E0A  90D8               	bcf	status,0,c
  5179  001E0C  3603               	rlcf	i2___lwdiv@divisor,f,c
  5180  001E0E  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  5181  001E10  2A07               	incf	i2___lwdiv@counter,f,c
  5182  001E12                     i2l1530:
  5183  001E12  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  5184  001E14  D7FA               	goto	i2l1528
  5185  001E16                     i2l1532:
  5186  001E16  90D8               	bcf	status,0,c
  5187  001E18  3605               	rlcf	i2___lwdiv@quotient,f,c
  5188  001E1A  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  5189  001E1C  5003               	movf	i2___lwdiv@divisor,w,c
  5190  001E1E  5C01               	subwf	i2___lwdiv@dividend,w,c
  5191  001E20  5004               	movf	i2___lwdiv@divisor+1,w,c
  5192  001E22  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  5193  001E24  A0D8               	btfss	status,0,c
  5194  001E26  D005               	goto	i2l1540
  5195  001E28  5003               	movf	i2___lwdiv@divisor,w,c
  5196  001E2A  5E01               	subwf	i2___lwdiv@dividend,f,c
  5197  001E2C  5004               	movf	i2___lwdiv@divisor+1,w,c
  5198  001E2E  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  5199  001E30  8005               	bsf	i2___lwdiv@quotient,0,c
  5200  001E32                     i2l1540:
  5201  001E32  90D8               	bcf	status,0,c
  5202  001E34  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  5203  001E36  3203               	rrcf	i2___lwdiv@divisor,f,c
  5204  001E38  2E07               	decfsz	i2___lwdiv@counter,f,c
  5205  001E3A  D7ED               	goto	i2l1532
  5206  001E3C                     i2l643:
  5207  001E3C  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  5208  001E40  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  5209  001E44  0012               	return		;funcret
  5210  001E46                     __end_ofi2___lwdiv:
  5211                           	opt stack 0
  5212                           pclatu	equ	0xFFB
  5213                           pclath	equ	0xFFA
  5214                           tblptru	equ	0xFF8
  5215                           tblptrh	equ	0xFF7
  5216                           tblptrl	equ	0xFF6
  5217                           tablat	equ	0xFF5
  5218                           prodh	equ	0xFF4
  5219                           prodl	equ	0xFF3
  5220                           intcon	equ	0xFF2
  5221                           intcon3	equ	0xFF0
  5222                           indf0	equ	0xFEF
  5223                           postinc0	equ	0xFEE
  5224                           fsr0h	equ	0xFEA
  5225                           fsr0l	equ	0xFE9
  5226                           wreg	equ	0xFE8
  5227                           postdec1	equ	0xFE5
  5228                           plusw1	equ	0xFE3
  5229                           fsr1h	equ	0xFE2
  5230                           fsr1l	equ	0xFE1
  5231                           indf2	equ	0xFDF
  5232                           postinc2	equ	0xFDE
  5233                           postdec2	equ	0xFDD
  5234                           plusw2	equ	0xFDB
  5235                           fsr2h	equ	0xFDA
  5236                           fsr2l	equ	0xFD9
  5237                           status	equ	0xFD8
  5238                           pclatu	equ	0xFFB
  5239                           pclath	equ	0xFFA
  5240                           tblptru	equ	0xFF8
  5241                           tblptrh	equ	0xFF7
  5242                           tblptrl	equ	0xFF6
  5243                           tablat	equ	0xFF5
  5244                           prodh	equ	0xFF4
  5245                           prodl	equ	0xFF3
  5246                           intcon	equ	0xFF2
  5247                           intcon3	equ	0xFF0
  5248                           indf0	equ	0xFEF
  5249                           postinc0	equ	0xFEE
  5250                           fsr0h	equ	0xFEA
  5251                           fsr0l	equ	0xFE9
  5252                           wreg	equ	0xFE8
  5253                           postdec1	equ	0xFE5
  5254                           plusw1	equ	0xFE3
  5255                           fsr1h	equ	0xFE2
  5256                           fsr1l	equ	0xFE1
  5257                           indf2	equ	0xFDF
  5258                           postinc2	equ	0xFDE
  5259                           postdec2	equ	0xFDD
  5260                           plusw2	equ	0xFDB
  5261                           fsr2h	equ	0xFDA
  5262                           fsr2l	equ	0xFD9
  5263                           status	equ	0xFD8
  5264                           
  5265                           	psect	text29
  5266  000000                     __ptext29:
  5267                           	opt stack 0
  5268                           pclatu	equ	0xFFB
  5269                           pclath	equ	0xFFA
  5270                           tblptru	equ	0xFF8
  5271                           tblptrh	equ	0xFF7
  5272                           tblptrl	equ	0xFF6
  5273                           tablat	equ	0xFF5
  5274                           prodh	equ	0xFF4
  5275                           prodl	equ	0xFF3
  5276                           intcon	equ	0xFF2
  5277                           intcon3	equ	0xFF0
  5278                           indf0	equ	0xFEF
  5279                           postinc0	equ	0xFEE
  5280                           fsr0h	equ	0xFEA
  5281                           fsr0l	equ	0xFE9
  5282                           wreg	equ	0xFE8
  5283                           postdec1	equ	0xFE5
  5284                           plusw1	equ	0xFE3
  5285                           fsr1h	equ	0xFE2
  5286                           fsr1l	equ	0xFE1
  5287                           indf2	equ	0xFDF
  5288                           postinc2	equ	0xFDE
  5289                           postdec2	equ	0xFDD
  5290                           plusw2	equ	0xFDB
  5291                           fsr2h	equ	0xFDA
  5292                           fsr2l	equ	0xFD9
  5293                           status	equ	0xFD8
  5294                           
  5295                           	psect	rparam
  5296  0000                     pclatu	equ	0xFFB
  5297                           pclath	equ	0xFFA
  5298                           tblptru	equ	0xFF8
  5299                           tblptrh	equ	0xFF7
  5300                           tblptrl	equ	0xFF6
  5301                           tablat	equ	0xFF5
  5302                           prodh	equ	0xFF4
  5303                           prodl	equ	0xFF3
  5304                           intcon	equ	0xFF2
  5305                           intcon3	equ	0xFF0
  5306                           indf0	equ	0xFEF
  5307                           postinc0	equ	0xFEE
  5308                           fsr0h	equ	0xFEA
  5309                           fsr0l	equ	0xFE9
  5310                           wreg	equ	0xFE8
  5311                           postdec1	equ	0xFE5
  5312                           plusw1	equ	0xFE3
  5313                           fsr1h	equ	0xFE2
  5314                           fsr1l	equ	0xFE1
  5315                           indf2	equ	0xFDF
  5316                           postinc2	equ	0xFDE
  5317                           postdec2	equ	0xFDD
  5318                           plusw2	equ	0xFDB
  5319                           fsr2h	equ	0xFDA
  5320                           fsr2l	equ	0xFD9
  5321                           status	equ	0xFD8
  5322                           
  5323                           	psect	temp
  5324  000059                     btemp:
  5325                           	opt stack 0
  5326  000059                     	ds	1
  5327  0000                     int$flags	set	btemp
  5328                           pclatu	equ	0xFFB
  5329                           pclath	equ	0xFFA
  5330                           tblptru	equ	0xFF8
  5331                           tblptrh	equ	0xFF7
  5332                           tblptrl	equ	0xFF6
  5333                           tablat	equ	0xFF5
  5334                           prodh	equ	0xFF4
  5335                           prodl	equ	0xFF3
  5336                           intcon	equ	0xFF2
  5337                           intcon3	equ	0xFF0
  5338                           indf0	equ	0xFEF
  5339                           postinc0	equ	0xFEE
  5340                           fsr0h	equ	0xFEA
  5341                           fsr0l	equ	0xFE9
  5342                           wreg	equ	0xFE8
  5343                           postdec1	equ	0xFE5
  5344                           plusw1	equ	0xFE3
  5345                           fsr1h	equ	0xFE2
  5346                           fsr1l	equ	0xFE1
  5347                           indf2	equ	0xFDF
  5348                           postinc2	equ	0xFDE
  5349                           postdec2	equ	0xFDD
  5350                           plusw2	equ	0xFDB
  5351                           fsr2h	equ	0xFDA
  5352                           fsr2l	equ	0xFD9
  5353                           status	equ	0xFD8


Data Sizes:
    Strings     186
    Constant    10
    Data        41
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     88      88
    BANK0           128    119     127
    BANK1           256      0      41
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_19(CODE[3]), STR_17(CODE[3]), STR_15(CODE[3]), STR_13(CODE[3]), 
		 -> STR_11(CODE[13]), STR_9(CODE[11]), STR_3(CODE[3]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 41
		 -> STR_21(CODE[7]), println@output(BANK0[41]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    moveSmallNose@prev	PTR int  size(2) Largest target is 2
		 -> main@smallNose(BANK0[2]), 

    moveBigNose@prev	PTR int  size(2) Largest target is 2
		 -> main@bigNose(BANK0[2]), 

    showInfo@sorted	PTR unsigned int  size(2) Largest target is 8
		 -> mainloop@sorted(BANK0[8]), 

    println@data	PTR unsigned char  size(2) Largest target is 17
		 -> STR_20(CODE[10]), STR_18(CODE[11]), STR_16(CODE[11]), STR_14(CODE[10]), 
		 -> STR_12(CODE[11]), STR_10(CODE[14]), STR_8(CODE[14]), STR_7(CODE[14]), 
		 -> STR_6(CODE[15]), STR_5(CODE[2]), STR_4(CODE[17]), STR_2(CODE[9]), 
		 -> STR_1(CODE[11]), 

    mainloop@bigNose	PTR int  size(2) Largest target is 2
		 -> main@bigNose(BANK0[2]), 

    mainloop@smallNose	PTR int  size(2) Largest target is 2
		 -> main@smallNose(BANK0[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _keypressed in COMRAM

    i2_stopMoving->i2_println
    i2_println->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv

Critical Paths under _main in BANK0

    _main->_mainloop
    _mainloop->_showInfo
    _stopMoving->_println
    _showInfo->_println
    _println->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _checkC9V->_AD
    _checkAA->_AD
    _initialize->_initLCD
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     4      5   15074
                                            110 BANK0      9     4      5
                      _captureKeypad
                         _initialize
                           _mainloop
                        _moveBigNose
                      _moveSmallNose
                            _println
 ---------------------------------------------------------------------------------
 (1) _mainloop                                            23    19      4   11405
                                             87 BANK0     23    19      4
                            _checkAA
                           _checkC9V
                            _getTime
                        _moveBigNose
                      _moveSmallNose
                        _moveXMotors
                            _println
                           _showInfo
                         _stopMoving
 ---------------------------------------------------------------------------------
 (2) _stopMoving                                           0     0      0    2635
                            _println
 ---------------------------------------------------------------------------------
 (2) _showInfo                                            14    10      4    4623
                                             73 BANK0     14    10      4
                            _getTime (ARG)
                             _printf
                            _println
 ---------------------------------------------------------------------------------
 (1) _println                                             47    45      2    2635
                                             26 BANK0     47    45      2
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              20    16      4    1638
                                             12 BANK0     14    10      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     290
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _moveXMotors                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _moveSmallNose                                        7     3      4     390
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _moveBigNose                                          7     3      4     390
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _getTime                                              4     2      2      23
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _checkC9V                                             6     4      2      68
                                              5 BANK0      6     4      2
                                 _AD
 ---------------------------------------------------------------------------------
 (2) _checkAA                                              2     0      2      22
                                              5 BANK0      2     0      2
                                 _AD
 ---------------------------------------------------------------------------------
 (3) _AD                                                   5     3      2      22
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0     135
                            _initLCD
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _captureKeypad                                        3     1      2      23
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _keypressed                                          15    15      0    1248
                                             73 COMRAM    15    15      0
                       i2_stopMoving
 ---------------------------------------------------------------------------------
 (8) i2_stopMoving                                         0     0      0    1247
                          i2_println
 ---------------------------------------------------------------------------------
 (9) i2_println                                           47    45      2    1247
                                             26 COMRAM    47    45      2
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printf                                           20    16      4    1064
                                             12 COMRAM    14    10      4
                          i2___lwdiv
                          i2___lwmod
                            i2_putch
 ---------------------------------------------------------------------------------
 (11) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (12) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2___lwmod                                           5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___lwdiv                                           7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _captureKeypad
   _initialize
     _initLCD
       _lcdInst
         _lcdNibble
   _mainloop
     _checkAA
       _AD
     _checkC9V
       _AD
     _getTime
     _moveBigNose
     _moveSmallNose
     _moveXMotors
     _println
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
     _showInfo
       _getTime (ARG)
       _printf (ARG)
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
       _println (ARG)
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
             _lcdNibble
     _stopMoving
       _println
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
             _lcdNibble
   _moveBigNose
   _moveSmallNose
   _println
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _lcdNibble

 _keypressed (ROOT)
   i2_stopMoving
     i2_println
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2_putch
           i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      29       7       16.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     77      7F       5       99.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     58      58       1       69.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     100      34        0.0%
DATA                 0      0     100       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Feb 10 17:46:16 2017

                     _AD 1E46       i2___lwdiv@dividend 0001              __CFG_BORV$3 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000              __CFG_OSC$HS 000000                      ?_AD 0080  
                    l141 1FC2                      l160 12EA                      l138 1FB4  
                    l193 1FE4                      l643 1C74                      l653 1D3E  
           __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000                      u720 13B0  
                    u730 13DC                      u727 13A6                      u737 13D2  
                    u881 18E6                      wreg 000FE8              main@bigNose 00F3  
                   ??_AD 0082             __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000  
                   l1404 1C24                     l1406 1C30                     l1510 14A4  
                   l1416 1C66                     l1408 1C36                     l1432 1D30  
                   l1424 1CFA                     l1504 148A                     l1426 1D06  
                   l1514 14FC                     l1428 1D0C                     l1508 149E  
                   l1460 1352                     l1516 1508                     l1470 138E  
                   l1462 135A                     l1712 1D7C                     l1480 1418  
                   l1456 133E                     l1490 1448                     l1474 13BA  
                   l1492 144E                     l1564 18F0                     l1740 1164  
                   l1582 1E5A                     l1718 1D92                     l1478 13E4  
                   l1734 112E                     l1830 1628                     l1584 1E6C  
                   l1680 1B34                     l1568 192E                     l1752 127A  
                   l1744 1210                     l1736 113A                     l1808 157A  
                   l1840 16CA                     l1690 1BA6                     l1682 1B5A  
                   l1762 12EE                     l1692 1BB0                     l1684 1B64  
                   l1756 12B2                     l1748 1242                     l1836 1684  
                   l1694 1BD6                     l1678 1B2A                     l1696 1BE0  
                   l1866 19D4                     _ADFM 007E07                     _ADON 007E10  
                   STR_1 108E                     STR_2 10AD                     STR_3 10C0  
                   STR_4 100B                     STR_5 10C3                     STR_6 101C  
                   STR_7 1047                     STR_8 102B                     STR_9 1083  
                   u1210 16C0                     u1131 154C                     u1140 15DE  
                   u1150 15E0                     u1160 15FA                     u1170 15FC  
                   u1307 1ED0                     u1317 1C9E                     _LATA 000F89  
                   _LATB 000F8A                     u1327 1CA8                     _LATC 000F8B  
                   _LATD 000F8C                     u1337 1CD4                     _LATE 000F8D  
                   u1347 1CDE                     u1277 10F6                     u1287 1E62  
                   u1297 1E9C                     _main 1978             println@F3053 0100  
                   fsr0h 000FEA                     fsr1h 000FE2       i2___lwdiv@quotient 0005  
                   indf0 000FEF                     fsr2h 000FDA                     fsr0l 000FE9  
                   indf2 000FDF                     fsr1l 000FE1                     fsr2l 000FD9  
                   btemp 0059                     prodh 000FF4                     prodl 000FF3  
                   start 000E            __CFG_IESO$OFF 000000          __end_ofi2_putch 2046  
          __CFG_MCLRE$ON 000000             ___param_bank 000000              i2_lcdNibble 1D9E  
                  ?_main 00EE                    STR_10 1039                    STR_11 1055  
                  STR_20 10A3                    STR_12 106D                    STR_13 10BD  
                  STR_21 10B6                    STR_14 1099                    STR_15 10BD  
                  STR_16 1078                    STR_17 10BD                    STR_18 1062  
                  STR_19 10BD          __end_of___lwdiv 1C7E          __end_of___lwmod 1D48  
                  i2l148 1A54                    i2l193 2038                    i2l643 1E3C  
                  i2l653 1F12     __end_ofi2_stopMoving 203A          __end_of_checkAA 201A  
                  _PORTB 000F81                    _TRISA 000F92                    _TRISB 000F93  
                  _TRISC 000F94                    _TRISD 000F95                    _TRISE 000F96  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000          __end_of_lcdInst 202A  
         __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000          __end_of_getTime 1FFA  
         __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000           __CFG_EBTR3$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
        __end_of_initLCD 1EDA           __CFG_EBTRB$OFF 000000          __end_of_dpowers 100B  
                  _putch 1FFA                    pclath 000FFA                    tablat 000FF5  
        __end_of_println 1978                    plusw1 000FE3                    plusw2 000FDB  
                  status 000FD8           __CFG_PBADEN$ON 000000         __end_ofi2_printf 18D2  
     __size_ofi2___lwdiv 0052       __size_ofi2___lwmod 0042        moveSmallNose@next 0082  
      moveSmallNose@prev 0080          __initialization 1F54             __end_of_main 1A08  
             i2printf@ap 0014               i2printf@cp 0016            i2println@data 001B  
             i2println@i 0048           mainloop@sorted 00E2                   ??_main 00F3  
     __size_ofi2_println 007E            __activetblptr 000003             ?_moveBigNose 0080  
          println@output 009E                   _ADCON0 000FC2                   _ADCON1 000FC1  
           ?_moveXMotors 0001                   _ADRESH 000FC4                   _ADRESL 000FC3  
        i2lcdNibble@data 0002                   ?_putch 0001          i2lcdNibble@temp 0001  
                 _INT1IE 007F83                   _INT1IF 007F80                   _CVRCON 000FB5  
  __end_of_moveSmallNose 1B8A                   i2l1530 1E12                   i2l1610 1790  
                 i2l1540 1E32                   i2l1532 1E16                   i2l1550 1EF0  
                 i2l1606 1766                   i2l1614 17BA                   i2l1528 1E0A  
                 i2l1552 1EF4                   i2l1640 1848                   i2l1616 17EA  
                 i2l1650 18AE                   i2l1626 1812                   i2l1556 1F08  
                 i2l1548 1EE8                   i2l1644 185A                   i2l1628 1816  
                 i2l1652 18B6                   i2l1646 1860                   i2l1592 1726  
                 i2l1596 1736                   i2l1780 1AD8                   i2l1598 173C  
                 i2l1776 1AAC                ??i2_putch 0003         __end_of_checkC9V 1D9E  
              AD@channel 0084        mainloop@smallNose 00D9           __CFG_XINST$OFF 000000  
  __end_of_captureKeypad 1FD2           __CFG_STVREN$ON 000000         __end_of_mainloop 171C  
              ??___lwdiv 0084                ??___lwmod 008B                ??_checkAA 0087  
                 clear_0 1F7A        mainloop@startTime 00E0            main@smallNose 00F5  
              ??_lcdInst 0082                   _printf 1330                ??_getTime 0082  
              ??_initLCD 0083         __end_of_showInfo 1330        __end_ofi2___lwdiv 1E46  
           __mediumconst 0000        __end_ofi2___lwmod 1F1C                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                ??_println 009C  
             __accesstop 0080  __end_of__initialization 1F80         checkC9V@charged9 0089  
       checkC9V@chargedC 0087        __end_ofi2_println 1B0E            ___rparam_used 000001  
     i2___lwmod@dividend 0008           __pcstackCOMRAM 0001             __pidataBANK1 1F8A  
        mainloop@bigNose 00D7    __size_ofi2_stopMoving 0010            __end_of_putch 200A  
            i2printf@val 0018               __end_of_AD 1E94             mainloop@stop 00DD  
     __size_of_lcdNibble 0068              i2putch@data 0003                ?i2_printf 000D  
                ??_putch 0082               __pbssBANK0 00F7             i2_stopMoving 202A  
           ?i2_lcdNibble 0001                  ?_printf 008C                ?_checkC9V 0085  
   __size_of_moveBigNose 007C               ??i2_printf 0011                  i2u93_40 1788  
                i2u93_47 177E                  i2u94_40 17B2                  i2u94_47 17A8  
              ?_mainloop 00D7     __size_of_moveXMotors 0002                  i2_putch 203A  
      __end_of_lcdNibble 1CE6                  __Hparam 0000                  __Lparam 0000  
              ?_showInfo 00C9                  ___lwdiv 1C06                  ___lwmod 1CE6  
           __psmallconst 1000                  _checkAA 200A                  __pcinit 1F54  
                __ramtop 1000               _initialize 1F1C                  _lcdInst 201A  
                __ptext0 1978                  __ptext1 1528                  __ptext2 1FD2  
                __ptext3 10C6                  _getTime 1FE6                  __ptext4 18D2  
                __ptext5 1330                  __ptext6 1FFA                  __ptext7 1CE6  
                __ptext8 1C06                  __ptext9 2046          __size_of_printf 01F8  
                _initLCD 1E94               ??_checkC9V 0087                  _dpowers 1001  
             _keypressed 0008                  _println 18D2           __pintcode_body 1A08  
   end_of_initialization 1F80               ??_mainloop 00DB                  int_func 1A08  
             ??_showInfo 00CD                  printf@c 0099                  printf@f 008C  
                postdec1 000FE5                  postdec2 000FDD                  postinc0 000FEE  
                postinc2 000FDE                _PORTBbits 000F81        i2___lwdiv@divisor 0003  
              i2___lwdiv 1DF4                i2___lwmod 1EDA        i2___lwdiv@counter 0007  
             _stopMoving 1FD2                i2_println 1A90              println@data 009A  
   __size_ofi2_lcdNibble 0056            mainloop@F3179 00F7              ?_initialize 0001  
 __size_of_moveSmallNose 007C           __end_of_printf 1528             i2printf@flag 0012  
           i2printf@prec 0013      start_initialization 1F54              ?_keypressed 0001  
           _mainloop$155 00DF               mainloop@C9 00EC               mainloop@AA 00EA  
              i2printf@c 001A                i2printf@f 000D   __size_of_captureKeypad 001E  
             ?i2___lwdiv 0001               ?i2___lwmod 0008        __size_ofi2_printf 01B6  
        i2println@output 001F          moveBigNose@next 0082          moveBigNose@prev 0080  
             ?i2_println 001B              __pdataBANK1 0100         __CFG_LPT1OSC$OFF 000000  
               ??_printf 0090            __pcstackBANK0 0080        __size_of_checkC9V 0056  
      i2___lwmod@divisor 000A        i2___lwmod@counter 000C            _moveSmallNose 1B0E  
               ?i2_putch 0001      __size_of_initialize 0038        __size_of_mainloop 01F4  
            ?_stopMoving 0001         ___lwdiv@dividend 0080        __CFG_CCP2MX$PORTC 000000  
          _captureKeypad 1FB4      __size_of_keypressed 1A88                __pintcode 0008  
              _lcdNibble 1C7E                 ?___lwdiv 0080                 ?___lwmod 0087  
      __size_of_showInfo 026A                 ?_checkAA 0085                 ?_lcdInst 0001  
               ?_getTime 0080            ??_moveBigNose 0084                 ?_initLCD 0001  
            __smallconst 1000                 ?_println 009A            ??_moveXMotors 0080  
       ___lwdiv@quotient 0084              ??i2___lwdiv 0005              ??i2___lwmod 000C  
         __size_of_putch 0010              __size_of_AD 004E           ?_moveSmallNose 0080  
               _LATDbits 000F8C                 i2u111_41 1AA2                 i2u135_47 1DB6  
               i2u136_47 1DC0                 i2u137_47 1DE2                 i2u138_47 1DEC  
         ?_captureKeypad 0080              ??i2_println 001D         __CFG_WDTPS$32768 000000  
             ?_lcdNibble 0001               _ADCON0bits 000FC2            lcdNibble@data 0081  
             printf@flag 0091            lcdNibble@temp 0080               printf@prec 0092  
    __size_of_stopMoving 0014                 i2_printf 171C    captureKeypad@keypress 0082  
    __end_of_moveBigNose 1C06                copy_data0 1F68      __end_of_moveXMotors 2048  
       __size_ofi2_putch 000C       keypressed@keypress 0058           showInfo@sorted 00CB  
               __Hrparam 0000                 __Lrparam 0000       __CFG_BOREN$SBORDIS 000000  
       __size_of___lwdiv 0078         __size_of___lwmod 0062             ??_initialize 0084  
       __size_of_checkAA 0010         __size_of_lcdInst 0010         __size_of_getTime 0014  
               _checkC9V 1D48         __size_of_initLCD 0046             ??_keypressed 004A  
        ___lwdiv@divisor 0082          ___lwdiv@counter 0086                 __ptext10 1B0E  
               __ptext11 1B8A                 __ptext20 1FB4                 __ptext12 1FE6  
               __ptext13 1D48                 __ptext22 202A                 __ptext14 200A  
               __ptext23 1A90                 __ptext15 1E46                 __ptext24 171C  
               __ptext16 1F1C                 __ptext25 203A                 __ptext17 1E94  
               __ptext26 1D9E                 __ptext18 201A                 __ptext27 1EDA  
               __ptext19 1C7E                 __ptext28 1DF4                 __ptext29 0000  
        ??_moveSmallNose 0084         __size_of_println 00A6                 _mainloop 1528  
          __size_of_main 0090       __end_of_initialize 1F54          ??_captureKeypad 0082  
          ?i2_stopMoving 0001                 _showInfo 10C6            ??i2_lcdNibble 0001  
            ??_lcdNibble 0080       __end_of_keypressed 1A90                 int$flags 0059  
               main@argc 00EE                 main@argv 00F0                printf@val 0097  
            _moveBigNose 1B8A                putch@data 0082               _INTCONbits 000FF2  
            _moveXMotors 2046                 intlevel2 0000         ___lwmod@dividend 0087  
         ??i2_stopMoving 004A             ??_stopMoving 00C9                 printf@ap 0093  
               printf@cp 0095                 println@i 00C7              lcdInst@data 0082  
           showInfo@time 00C9             showInfo@type 00D5      __end_ofi2_lcdNibble 1DF4  
        ___lwmod@divisor 0089          ___lwmod@counter 008B       __end_of_stopMoving 1FE6  
            getTime@time 0082  

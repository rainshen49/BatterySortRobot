

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Feb 27 17:47:58 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    47                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1
    67                           	psect	text55,global,reloc=2,class=CODE,delta=1
    68                           	psect	text56,global,reloc=2,class=CODE,delta=1
    69                           	psect	text57,global,reloc=2,class=CODE,delta=1
    70                           	psect	text58,global,reloc=2,class=CODE,delta=1
    71                           	psect	text59,global,reloc=2,class=CODE,delta=1
    72                           	psect	text60,global,reloc=2,class=CODE,delta=1
    73                           	psect	text61,global,reloc=2,class=CODE,delta=1
    74                           	psect	text62,global,reloc=2,class=CODE,delta=1
    75                           	psect	text63,global,reloc=2,class=CODE,delta=1
    76                           	psect	text64,global,reloc=2,class=CODE,delta=1
    77                           	psect	text65,global,reloc=2,class=CODE,delta=1
    78                           	psect	text66,global,reloc=2,class=CODE,delta=1
    79                           	psect	text67,global,reloc=2,class=CODE,delta=1
    80                           	psect	text68,global,reloc=2,class=CODE,delta=1
    81                           	psect	text69,global,reloc=2,class=CODE,delta=1
    82                           	psect	text70,global,reloc=2,class=CODE,delta=1
    83                           	psect	text71,global,reloc=2,class=CODE,delta=1
    84                           	psect	text72,global,reloc=2,class=CODE,delta=1
    85                           	psect	text73,global,reloc=2,class=CODE,delta=1
    86                           	psect	text74,global,reloc=2,class=CODE,delta=1
    87                           	psect	text75,global,reloc=2,class=CODE,delta=1
    88                           	psect	text76,global,reloc=2,class=CODE,delta=1
    89                           	psect	text77,global,reloc=2,class=CODE,delta=1
    90                           	psect	text78,global,reloc=2,class=CODE,delta=1
    91                           	psect	text79,global,reloc=2,class=CODE,delta=1
    92                           	psect	text80,global,reloc=2,class=CODE,delta=1
    93                           	psect	text81,global,reloc=2,class=CODE,delta=1
    94                           	psect	text82,global,reloc=2,class=CODE,delta=1
    95                           	psect	text83,global,reloc=2,class=CODE,delta=1
    96                           	psect	text84,global,reloc=2,class=CODE,delta=1
    97                           	psect	text85,global,reloc=2,class=CODE,delta=1
    98                           	psect	text86,global,reloc=2,class=CODE,delta=1
    99                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   100                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   101                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   102  0000                     
   103                           ; Version 1.41
   104                           ; Generated 25/01/2017 GMT
   105                           ; 
   106                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   107                           ; All rights reserved.
   108                           ; 
   109                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   110                           ; 
   111                           ; Redistribution and use in source and binary forms, with or without modification, are
   112                           ; permitted provided that the following conditions are met:
   113                           ; 
   114                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   115                           ;        conditions and the following disclaimer.
   116                           ; 
   117                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   118                           ;        of conditions and the following disclaimer in the documentation and/or other
   119                           ;        materials provided with the distribution.
   120                           ; 
   121                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   122                           ;        software without specific prior written permission.
   123                           ; 
   124                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   125                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   126                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   127                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   128                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   129                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   130                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   131                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   132                           ; 
   133                           ; 
   134                           ; Code-generator required, PIC18F4620 Definitions
   135                           ; 
   136                           ; SFR Addresses
   137  0000                     
   138                           	psect	mediumconst
   139  00FBE0                     __pmediumconst:
   140                           	opt stack 0
   141  00FBE0  00                 	db	0
   142  00FBE1                     _dpowers:
   143                           	opt stack 0
   144  00FBE1  0001               	dw	1
   145  00FBE3  0000               	dw	0
   146  00FBE5  000A               	dw	10
   147  00FBE7  0000               	dw	0
   148  00FBE9  0064               	dw	100
   149  00FBEB  0000               	dw	0
   150  00FBED  03E8               	dw	1000
   151  00FBEF  0000               	dw	0
   152  00FBF1  2710               	dw	10000
   153  00FBF3  0000               	dw	0
   154  00FBF5  86A0               	dw	34464
   155  00FBF7  0001               	dw	1
   156  00FBF9  4240               	dw	16960
   157  00FBFB  000F               	dw	15
   158  00FBFD  9680               	dw	38528
   159  00FBFF  0098               	dw	152
   160  00FC01  E100               	dw	57600
   161  00FC03  05F5               	dw	1525
   162  00FC05  CA00               	dw	51712
   163  00FC07  3B9A               	dw	15258
   164  00FC09                     __end_of_dpowers:
   165                           	opt stack 0
   166  00FC09                     __powers_:
   167                           	opt stack 0
   168  00FC09  00                 	db	0
   169  00FC0A  80                 	db	128
   170  00FC0B  3F                 	db	63
   171  00FC0C  00                 	db	0
   172  00FC0D  20                 	db	32
   173  00FC0E  41                 	db	65
   174  00FC0F  00                 	db	0
   175  00FC10  C8                 	db	200
   176  00FC11  42                 	db	66
   177  00FC12  00                 	db	0
   178  00FC13  7A                 	db	122
   179  00FC14  44                 	db	68
   180  00FC15  40                 	db	64
   181  00FC16  1C                 	db	28
   182  00FC17  46                 	db	70
   183  00FC18  50                 	db	80
   184  00FC19  C3                 	db	195
   185  00FC1A  47                 	db	71
   186  00FC1B  24                 	db	36
   187  00FC1C  74                 	db	116
   188  00FC1D  49                 	db	73
   189  00FC1E  97                 	db	151
   190  00FC1F  18                 	db	24
   191  00FC20  4B                 	db	75
   192  00FC21  BC                 	db	188
   193  00FC22  BE                 	db	190
   194  00FC23  4C                 	db	76
   195  00FC24  6B                 	db	107
   196  00FC25  6E                 	db	110
   197  00FC26  4E                 	db	78
   198  00FC27  03                 	db	3
   199  00FC28  15                 	db	21
   200  00FC29  50                 	db	80
   201  00FC2A  79                 	db	121
   202  00FC2B  AD                 	db	173
   203  00FC2C  60                 	db	96
   204  00FC2D  F3                 	db	243
   205  00FC2E  49                 	db	73
   206  00FC2F  71                 	db	113
   207  00FC30                     __end_of__powers_:
   208                           	opt stack 0
   209  00FC30                     __npowers_:
   210                           	opt stack 0
   211  00FC30  00                 	db	0
   212  00FC31  80                 	db	128
   213  00FC32  3F                 	db	63
   214  00FC33  CD                 	db	205
   215  00FC34  CC                 	db	204
   216  00FC35  3D                 	db	61
   217  00FC36  D7                 	db	215
   218  00FC37  23                 	db	35
   219  00FC38  3C                 	db	60
   220  00FC39  12                 	db	18
   221  00FC3A  83                 	db	131
   222  00FC3B  3A                 	db	58
   223  00FC3C  B7                 	db	183
   224  00FC3D  D1                 	db	209
   225  00FC3E  38                 	db	56
   226  00FC3F  C6                 	db	198
   227  00FC40  27                 	db	39
   228  00FC41  37                 	db	55
   229  00FC42  38                 	db	56
   230  00FC43  86                 	db	134
   231  00FC44  35                 	db	53
   232  00FC45  C0                 	db	192
   233  00FC46  D6                 	db	214
   234  00FC47  33                 	db	51
   235  00FC48  CC                 	db	204
   236  00FC49  2B                 	db	43
   237  00FC4A  32                 	db	50
   238  00FC4B  70                 	db	112
   239  00FC4C  89                 	db	137
   240  00FC4D  30                 	db	48
   241  00FC4E  E7                 	db	231
   242  00FC4F  DB                 	db	219
   243  00FC50  2E                 	db	46
   244  00FC51  E5                 	db	229
   245  00FC52  3C                 	db	60
   246  00FC53  1E                 	db	30
   247  00FC54  42                 	db	66
   248  00FC55  A2                 	db	162
   249  00FC56  0D                 	db	13
   250  00FC57                     __end_of__npowers_:
   251                           	opt stack 0
   252  00FC57                     _hexpowers:
   253                           	opt stack 0
   254  00FC57  0001               	dw	1
   255  00FC59  0000               	dw	0
   256  00FC5B  0010               	dw	16
   257  00FC5D  0000               	dw	0
   258  00FC5F  0100               	dw	256
   259  00FC61  0000               	dw	0
   260  00FC63  1000               	dw	4096
   261  00FC65  0000               	dw	0
   262  00FC67  0000               	dw	0
   263  00FC69  0001               	dw	1
   264  00FC6B  0000               	dw	0
   265  00FC6D  0010               	dw	16
   266  00FC6F  0000               	dw	0
   267  00FC71  0100               	dw	256
   268  00FC73  0000               	dw	0
   269  00FC75  1000               	dw	4096
   270  00FC77                     __end_of_hexpowers:
   271                           	opt stack 0
   272  0000                     _PIR2bits	set	4001
   273  0000                     _EECON2	set	4007
   274  0000                     _EEDATA	set	4008
   275  0000                     _EECON1bits	set	4006
   276  0000                     _EEADR	set	4009
   277  0000                     _EEADRH	set	4010
   278  0000                     _SSPBUF	set	4041
   279  0000                     _SSPADD	set	4040
   280  0000                     _SSPCON2	set	4037
   281  0000                     _SSPCON1	set	4038
   282  0000                     _SSPSTAT	set	4039
   283  0000                     _ADRESL	set	4035
   284  0000                     _ADRESH	set	4036
   285  0000                     _ADCON0bits	set	4034
   286  0000                     _LATDbits	set	3980
   287  0000                     _PORTBbits	set	3969
   288  0000                     _PORTB	set	3969
   289  0000                     _INTCONbits	set	4082
   290  0000                     _CVRCON	set	4021
   291  0000                     _ADCON1	set	4033
   292  0000                     _ADCON0	set	4034
   293  0000                     _LATE	set	3981
   294  0000                     _LATD	set	3980
   295  0000                     _LATC	set	3979
   296  0000                     _LATB	set	3978
   297  0000                     _LATA	set	3977
   298  0000                     _TRISE	set	3990
   299  0000                     _TRISD	set	3989
   300  0000                     _TRISC	set	3988
   301  0000                     _TRISB	set	3987
   302  0000                     _TRISA	set	3986
   303  0000                     _ACKEN	set	32300
   304  0000                     _ACKDT	set	32301
   305  0000                     _RCEN	set	32299
   306  0000                     _PEN	set	32298
   307  0000                     _SEN	set	32296
   308  0000                     _TRISC4	set	31908
   309  0000                     _TRISC3	set	31907
   310  0000                     _ADON	set	32272
   311  0000                     _INT1IE	set	32643
   312  0000                     _INT1IF	set	32640
   313  0000                     _LATC5	set	31837
   314  0000                     _ADFM	set	32263
   315  0000                     _LATC2	set	31834
   316  0000                     _LATC1	set	31833
   317  0000                     _LATC0	set	31832
   318  00FC77                     STR_15:
   319                           
   320                           ; BSR set to: 0
   321  00FC77  53                 	db	83	;'S'
   322  00FC78  6F                 	db	111	;'o'
   323  00FC79  72                 	db	114	;'r'
   324  00FC7A  74                 	db	116	;'t'
   325  00FC7B  69                 	db	105	;'i'
   326  00FC7C  6E                 	db	110	;'n'
   327  00FC7D  67                 	db	103	;'g'
   328  00FC7E  20                 	db	32
   329  00FC7F  43                 	db	67	;'C'
   330  00FC80  6F                 	db	111	;'o'
   331  00FC81  6D                 	db	109	;'m'
   332  00FC82  70                 	db	112	;'p'
   333  00FC83  6C                 	db	108	;'l'
   334  00FC84  65                 	db	101	;'e'
   335  00FC85  74                 	db	116	;'t'
   336  00FC86  65                 	db	101	;'e'
   337  00FC87  20                 	db	32
   338  00FC88  20                 	db	32
   339  00FC89  20                 	db	32
   340  00FC8A  20                 	db	32
   341  00FC8B  20                 	db	32
   342  00FC8C  20                 	db	32
   343  00FC8D  20                 	db	32
   344  00FC8E  20                 	db	32
   345  00FC8F  20                 	db	32
   346  00FC90  20                 	db	32
   347  00FC91  00                 	db	0
   348  00FC92                     STR_19:
   349                           
   350                           ; BSR set to: 0
   351  00FC92  50                 	db	80	;'P'
   352  00FC93  72                 	db	114	;'r'
   353  00FC94  65                 	db	101	;'e'
   354  00FC95  73                 	db	115	;'s'
   355  00FC96  73                 	db	115	;'s'
   356  00FC97  20                 	db	32
   357  00FC98  61                 	db	97	;'a'
   358  00FC99  20                 	db	32
   359  00FC9A  6E                 	db	110	;'n'
   360  00FC9B  75                 	db	117	;'u'
   361  00FC9C  6D                 	db	109	;'m'
   362  00FC9D  62                 	db	98	;'b'
   363  00FC9E  65                 	db	101	;'e'
   364  00FC9F  72                 	db	114	;'r'
   365  00FCA0  20                 	db	32
   366  00FCA1  20                 	db	32
   367  00FCA2  20                 	db	32
   368  00FCA3  20                 	db	32
   369  00FCA4  20                 	db	32
   370  00FCA5  20                 	db	32
   371  00FCA6  20                 	db	32
   372  00FCA7  20                 	db	32
   373  00FCA8  20                 	db	32
   374  00FCA9  20                 	db	32
   375  00FCAA  00                 	db	0
   376  00FCAB                     STR_21:
   377                           
   378                           ; BSR set to: 0
   379  00FCAB  54                 	db	84	;'T'
   380  00FCAC  69                 	db	105	;'i'
   381  00FCAD  6D                 	db	109	;'m'
   382  00FCAE  65                 	db	101	;'e'
   383  00FCAF  20                 	db	32
   384  00FCB0  45                 	db	69	;'E'
   385  00FCB1  6C                 	db	108	;'l'
   386  00FCB2  61                 	db	97	;'a'
   387  00FCB3  70                 	db	112	;'p'
   388  00FCB4  73                 	db	115	;'s'
   389  00FCB5  65                 	db	101	;'e'
   390  00FCB6  64                 	db	100	;'d'
   391  00FCB7  3A                 	db	58	;':'
   392  00FCB8  20                 	db	32
   393  00FCB9  20                 	db	32
   394  00FCBA  20                 	db	32
   395  00FCBB  20                 	db	32
   396  00FCBC  20                 	db	32
   397  00FCBD  20                 	db	32
   398  00FCBE  20                 	db	32
   399  00FCBF  20                 	db	32
   400  00FCC0  20                 	db	32
   401  00FCC1  20                 	db	32
   402  00FCC2  00                 	db	0
   403  00FCC3                     STR_23:
   404                           
   405                           ; BSR set to: 0
   406  00FCC3  54                 	db	84	;'T'
   407  00FCC4  6F                 	db	111	;'o'
   408  00FCC5  74                 	db	116	;'t'
   409  00FCC6  61                 	db	97	;'a'
   410  00FCC7  6C                 	db	108	;'l'
   411  00FCC8  20                 	db	32
   412  00FCC9  53                 	db	83	;'S'
   413  00FCCA  6F                 	db	111	;'o'
   414  00FCCB  72                 	db	114	;'r'
   415  00FCCC  74                 	db	116	;'t'
   416  00FCCD  65                 	db	101	;'e'
   417  00FCCE  64                 	db	100	;'d'
   418  00FCCF  3A                 	db	58	;':'
   419  00FCD0  20                 	db	32
   420  00FCD1  20                 	db	32
   421  00FCD2  20                 	db	32
   422  00FCD3  20                 	db	32
   423  00FCD4  20                 	db	32
   424  00FCD5  20                 	db	32
   425  00FCD6  20                 	db	32
   426  00FCD7  20                 	db	32
   427  00FCD8  20                 	db	32
   428  00FCD9  20                 	db	32
   429  00FCDA  00                 	db	0
   430  00FCDB                     STR_20:
   431                           
   432                           ; BSR set to: 0
   433  00FCDB  46                 	db	70	;'F'
   434  00FCDC  6F                 	db	111	;'o'
   435  00FCDD  72                 	db	114	;'r'
   436  00FCDE  20                 	db	32
   437  00FCDF  6D                 	db	109	;'m'
   438  00FCE0  6F                 	db	111	;'o'
   439  00FCE1  72                 	db	114	;'r'
   440  00FCE2  65                 	db	101	;'e'
   441  00FCE3  20                 	db	32
   442  00FCE4  69                 	db	105	;'i'
   443  00FCE5  6E                 	db	110	;'n'
   444  00FCE6  66                 	db	102	;'f'
   445  00FCE7  6F                 	db	111	;'o'
   446  00FCE8  20                 	db	32
   447  00FCE9  20                 	db	32
   448  00FCEA  20                 	db	32
   449  00FCEB  20                 	db	32
   450  00FCEC  20                 	db	32
   451  00FCED  20                 	db	32
   452  00FCEE  20                 	db	32
   453  00FCEF  20                 	db	32
   454  00FCF0  20                 	db	32
   455  00FCF1  20                 	db	32
   456  00FCF2  00                 	db	0
   457  00FCF3                     STR_2:
   458                           
   459                           ; BSR set to: 0
   460  00FCF3  53                 	db	83	;'S'
   461  00FCF4  69                 	db	105	;'i'
   462  00FCF5  6D                 	db	109	;'m'
   463  00FCF6  75                 	db	117	;'u'
   464  00FCF7  6C                 	db	108	;'l'
   465  00FCF8  61                 	db	97	;'a'
   466  00FCF9  74                 	db	116	;'t'
   467  00FCFA  69                 	db	105	;'i'
   468  00FCFB  6E                 	db	110	;'n'
   469  00FCFC  67                 	db	103	;'g'
   470  00FCFD  2E                 	db	46
   471  00FCFE  2E                 	db	46
   472  00FCFF  2E                 	db	46
   473  00FD00  20                 	db	32
   474  00FD01  20                 	db	32
   475  00FD02  20                 	db	32
   476  00FD03  20                 	db	32
   477  00FD04  20                 	db	32
   478  00FD05  20                 	db	32
   479  00FD06  20                 	db	32
   480  00FD07  20                 	db	32
   481  00FD08  20                 	db	32
   482  00FD09  20                 	db	32
   483  00FD0A  00                 	db	0
   484  00FD0B                     STR_16:
   485                           
   486                           ; BSR set to: 0
   487  00FD0B  25                 	db	37
   488  00FD0C  30                 	db	48	;'0'
   489  00FD0D  32                 	db	50	;'2'
   490  00FD0E  78                 	db	120	;'x'
   491  00FD0F  2F                 	db	47
   492  00FD10  25                 	db	37
   493  00FD11  30                 	db	48	;'0'
   494  00FD12  32                 	db	50	;'2'
   495  00FD13  78                 	db	120	;'x'
   496  00FD14  2F                 	db	47
   497  00FD15  25                 	db	37
   498  00FD16  30                 	db	48	;'0'
   499  00FD17  32                 	db	50	;'2'
   500  00FD18  78                 	db	120	;'x'
   501  00FD19  20                 	db	32
   502  00FD1A  20                 	db	32
   503  00FD1B  20                 	db	32
   504  00FD1C  20                 	db	32
   505  00FD1D  20                 	db	32
   506  00FD1E  20                 	db	32
   507  00FD1F  20                 	db	32
   508  00FD20  20                 	db	32
   509  00FD21  20                 	db	32
   510  00FD22  00                 	db	0
   511  00FD23                     STR_17:
   512                           
   513                           ; BSR set to: 0
   514  00FD23  25                 	db	37
   515  00FD24  30                 	db	48	;'0'
   516  00FD25  32                 	db	50	;'2'
   517  00FD26  78                 	db	120	;'x'
   518  00FD27  3A                 	db	58	;':'
   519  00FD28  25                 	db	37
   520  00FD29  30                 	db	48	;'0'
   521  00FD2A  32                 	db	50	;'2'
   522  00FD2B  78                 	db	120	;'x'
   523  00FD2C  3A                 	db	58	;':'
   524  00FD2D  25                 	db	37
   525  00FD2E  30                 	db	48	;'0'
   526  00FD2F  32                 	db	50	;'2'
   527  00FD30  78                 	db	120	;'x'
   528  00FD31  20                 	db	32
   529  00FD32  20                 	db	32
   530  00FD33  20                 	db	32
   531  00FD34  20                 	db	32
   532  00FD35  20                 	db	32
   533  00FD36  20                 	db	32
   534  00FD37  20                 	db	32
   535  00FD38  20                 	db	32
   536  00FD39  20                 	db	32
   537  00FD3A  00                 	db	0
   538  00FD3B                     STR_40:
   539                           
   540                           ; BSR set to: 0
   541  00FD3B  75                 	db	117	;'u'
   542  00FD3C  6E                 	db	110	;'n'
   543  00FD3D  63                 	db	99	;'c'
   544  00FD3E  68                 	db	104	;'h'
   545  00FD3F  61                 	db	97	;'a'
   546  00FD40  72                 	db	114	;'r'
   547  00FD41  67                 	db	103	;'g'
   548  00FD42  65                 	db	101	;'e'
   549  00FD43  64                 	db	100	;'d'
   550  00FD44  20                 	db	32
   551  00FD45  41                 	db	65	;'A'
   552  00FD46  41                 	db	65	;'A'
   553  00FD47  20                 	db	32
   554  00FD48  20                 	db	32
   555  00FD49  20                 	db	32
   556  00FD4A  20                 	db	32
   557  00FD4B  20                 	db	32
   558  00FD4C  20                 	db	32
   559  00FD4D  20                 	db	32
   560  00FD4E  20                 	db	32
   561  00FD4F  20                 	db	32
   562  00FD50  20                 	db	32
   563  00FD51  00                 	db	0
   564  00FD52                     STR_48:
   565                           
   566                           ; BSR set to: 0
   567  00FD52  75                 	db	117	;'u'
   568  00FD53  6E                 	db	110	;'n'
   569  00FD54  63                 	db	99	;'c'
   570  00FD55  68                 	db	104	;'h'
   571  00FD56  61                 	db	97	;'a'
   572  00FD57  72                 	db	114	;'r'
   573  00FD58  67                 	db	103	;'g'
   574  00FD59  65                 	db	101	;'e'
   575  00FD5A  64                 	db	100	;'d'
   576  00FD5B  20                 	db	32
   577  00FD5C  39                 	db	57	;'9'
   578  00FD5D  56                 	db	86	;'V'
   579  00FD5E  20                 	db	32
   580  00FD5F  20                 	db	32
   581  00FD60  20                 	db	32
   582  00FD61  20                 	db	32
   583  00FD62  20                 	db	32
   584  00FD63  20                 	db	32
   585  00FD64  20                 	db	32
   586  00FD65  20                 	db	32
   587  00FD66  20                 	db	32
   588  00FD67  20                 	db	32
   589  00FD68  00                 	db	0
   590  00FD69                     STR_24:
   591                           
   592                           ; BSR set to: 0
   593  00FD69  25                 	db	37
   594  00FD6A  64                 	db	100	;'d'
   595  00FD6B  20                 	db	32
   596  00FD6C  62                 	db	98	;'b'
   597  00FD6D  61                 	db	97	;'a'
   598  00FD6E  74                 	db	116	;'t'
   599  00FD6F  74                 	db	116	;'t'
   600  00FD70  65                 	db	101	;'e'
   601  00FD71  72                 	db	114	;'r'
   602  00FD72  69                 	db	105	;'i'
   603  00FD73  65                 	db	101	;'e'
   604  00FD74  73                 	db	115	;'s'
   605  00FD75  20                 	db	32
   606  00FD76  20                 	db	32
   607  00FD77  20                 	db	32
   608  00FD78  20                 	db	32
   609  00FD79  20                 	db	32
   610  00FD7A  20                 	db	32
   611  00FD7B  20                 	db	32
   612  00FD7C  20                 	db	32
   613  00FD7D  20                 	db	32
   614  00FD7E  20                 	db	32
   615  00FD7F  00                 	db	0
   616  00FD80                     STR_44:
   617                           
   618                           ; BSR set to: 0
   619  00FD80  75                 	db	117	;'u'
   620  00FD81  6E                 	db	110	;'n'
   621  00FD82  63                 	db	99	;'c'
   622  00FD83  68                 	db	104	;'h'
   623  00FD84  61                 	db	97	;'a'
   624  00FD85  72                 	db	114	;'r'
   625  00FD86  67                 	db	103	;'g'
   626  00FD87  65                 	db	101	;'e'
   627  00FD88  64                 	db	100	;'d'
   628  00FD89  20                 	db	32
   629  00FD8A  43                 	db	67	;'C'
   630  00FD8B  20                 	db	32
   631  00FD8C  20                 	db	32
   632  00FD8D  20                 	db	32
   633  00FD8E  20                 	db	32
   634  00FD8F  20                 	db	32
   635  00FD90  20                 	db	32
   636  00FD91  20                 	db	32
   637  00FD92  20                 	db	32
   638  00FD93  20                 	db	32
   639  00FD94  20                 	db	32
   640  00FD95  00                 	db	0
   641  00FD96                     STR_5:
   642                           
   643                           ; BSR set to: 0
   644  00FD96  41                 	db	65	;'A'
   645  00FD97  41                 	db	65	;'A'
   646  00FD98  53                 	db	83	;'S'
   647  00FD99  65                 	db	101	;'e'
   648  00FD9A  72                 	db	114	;'r'
   649  00FD9B  76                 	db	118	;'v'
   650  00FD9C  6F                 	db	111	;'o'
   651  00FD9D  53                 	db	83	;'S'
   652  00FD9E  74                 	db	116	;'t'
   653  00FD9F  61                 	db	97	;'a'
   654  00FDA0  79                 	db	121	;'y'
   655  00FDA1  73                 	db	115	;'s'
   656  00FDA2  20                 	db	32
   657  00FDA3  20                 	db	32
   658  00FDA4  20                 	db	32
   659  00FDA5  20                 	db	32
   660  00FDA6  20                 	db	32
   661  00FDA7  20                 	db	32
   662  00FDA8  20                 	db	32
   663  00FDA9  20                 	db	32
   664  00FDAA  20                 	db	32
   665  00FDAB  00                 	db	0
   666  00FDAC                     STR_4:
   667                           
   668                           ; BSR set to: 0
   669  00FDAC  41                 	db	65	;'A'
   670  00FDAD  41                 	db	65	;'A'
   671  00FDAE  53                 	db	83	;'S'
   672  00FDAF  65                 	db	101	;'e'
   673  00FDB0  72                 	db	114	;'r'
   674  00FDB1  76                 	db	118	;'v'
   675  00FDB2  6F                 	db	111	;'o'
   676  00FDB3  52                 	db	82	;'R'
   677  00FDB4  69                 	db	105	;'i'
   678  00FDB5  67                 	db	103	;'g'
   679  00FDB6  68                 	db	104	;'h'
   680  00FDB7  74                 	db	116	;'t'
   681  00FDB8  20                 	db	32
   682  00FDB9  20                 	db	32
   683  00FDBA  20                 	db	32
   684  00FDBB  20                 	db	32
   685  00FDBC  20                 	db	32
   686  00FDBD  20                 	db	32
   687  00FDBE  20                 	db	32
   688  00FDBF  20                 	db	32
   689  00FDC0  20                 	db	32
   690  00FDC1  00                 	db	0
   691  00FDC2                     STR_31:
   692                           
   693                           ; BSR set to: 0
   694  00FDC2  55                 	db	85	;'U'
   695  00FDC3  6E                 	db	110	;'n'
   696  00FDC4  63                 	db	99	;'c'
   697  00FDC5  68                 	db	104	;'h'
   698  00FDC6  61                 	db	97	;'a'
   699  00FDC7  72                 	db	114	;'r'
   700  00FDC8  67                 	db	103	;'g'
   701  00FDC9  65                 	db	101	;'e'
   702  00FDCA  64                 	db	100	;'d'
   703  00FDCB  3A                 	db	58	;':'
   704  00FDCC  20                 	db	32
   705  00FDCD  20                 	db	32
   706  00FDCE  20                 	db	32
   707  00FDCF  20                 	db	32
   708  00FDD0  20                 	db	32
   709  00FDD1  20                 	db	32
   710  00FDD2  20                 	db	32
   711  00FDD3  20                 	db	32
   712  00FDD4  20                 	db	32
   713  00FDD5  20                 	db	32
   714  00FDD6  00                 	db	0
   715  00FDD7                     STR_25:
   716                           
   717                           ; BSR set to: 0
   718  00FDD7  41                 	db	65	;'A'
   719  00FDD8  41                 	db	65	;'A'
   720  00FDD9  20                 	db	32
   721  00FDDA  53                 	db	83	;'S'
   722  00FDDB  6F                 	db	111	;'o'
   723  00FDDC  72                 	db	114	;'r'
   724  00FDDD  74                 	db	116	;'t'
   725  00FDDE  65                 	db	101	;'e'
   726  00FDDF  64                 	db	100	;'d'
   727  00FDE0  3A                 	db	58	;':'
   728  00FDE1  20                 	db	32
   729  00FDE2  20                 	db	32
   730  00FDE3  20                 	db	32
   731  00FDE4  20                 	db	32
   732  00FDE5  20                 	db	32
   733  00FDE6  20                 	db	32
   734  00FDE7  20                 	db	32
   735  00FDE8  20                 	db	32
   736  00FDE9  20                 	db	32
   737  00FDEA  20                 	db	32
   738  00FDEB  00                 	db	0
   739  00FDEC                     STR_29:
   740                           
   741                           ; BSR set to: 0
   742  00FDEC  39                 	db	57	;'9'
   743  00FDED  56                 	db	86	;'V'
   744  00FDEE  20                 	db	32
   745  00FDEF  53                 	db	83	;'S'
   746  00FDF0  6F                 	db	111	;'o'
   747  00FDF1  72                 	db	114	;'r'
   748  00FDF2  74                 	db	116	;'t'
   749  00FDF3  65                 	db	101	;'e'
   750  00FDF4  64                 	db	100	;'d'
   751  00FDF5  3A                 	db	58	;':'
   752  00FDF6  20                 	db	32
   753  00FDF7  20                 	db	32
   754  00FDF8  20                 	db	32
   755  00FDF9  20                 	db	32
   756  00FDFA  20                 	db	32
   757  00FDFB  20                 	db	32
   758  00FDFC  20                 	db	32
   759  00FDFD  20                 	db	32
   760  00FDFE  20                 	db	32
   761  00FDFF  20                 	db	32
   762  00FE00  00                 	db	0
   763  00FE01                     STR_22:
   764                           
   765                           ; BSR set to: 0
   766  00FE01  25                 	db	37
   767  00FE02  75                 	db	117	;'u'
   768  00FE03  20                 	db	32
   769  00FE04  73                 	db	115	;'s'
   770  00FE05  65                 	db	101	;'e'
   771  00FE06  63                 	db	99	;'c'
   772  00FE07  6F                 	db	111	;'o'
   773  00FE08  6E                 	db	110	;'n'
   774  00FE09  64                 	db	100	;'d'
   775  00FE0A  73                 	db	115	;'s'
   776  00FE0B  20                 	db	32
   777  00FE0C  20                 	db	32
   778  00FE0D  20                 	db	32
   779  00FE0E  20                 	db	32
   780  00FE0F  20                 	db	32
   781  00FE10  20                 	db	32
   782  00FE11  20                 	db	32
   783  00FE12  20                 	db	32
   784  00FE13  20                 	db	32
   785  00FE14  20                 	db	32
   786  00FE15  00                 	db	0
   787  00FE16                     STR_11:
   788                           
   789                           ; BSR set to: 0
   790  00FE16  39                 	db	57	;'9'
   791  00FE17  53                 	db	83	;'S'
   792  00FE18  65                 	db	101	;'e'
   793  00FE19  72                 	db	114	;'r'
   794  00FE1A  76                 	db	118	;'v'
   795  00FE1B  6F                 	db	111	;'o'
   796  00FE1C  53                 	db	83	;'S'
   797  00FE1D  74                 	db	116	;'t'
   798  00FE1E  61                 	db	97	;'a'
   799  00FE1F  79                 	db	121	;'y'
   800  00FE20  73                 	db	115	;'s'
   801  00FE21  20                 	db	32
   802  00FE22  20                 	db	32
   803  00FE23  20                 	db	32
   804  00FE24  20                 	db	32
   805  00FE25  20                 	db	32
   806  00FE26  20                 	db	32
   807  00FE27  20                 	db	32
   808  00FE28  20                 	db	32
   809  00FE29  20                 	db	32
   810  00FE2A  00                 	db	0
   811  00FE2B                     STR_8:
   812                           
   813                           ; BSR set to: 0
   814  00FE2B  43                 	db	67	;'C'
   815  00FE2C  53                 	db	83	;'S'
   816  00FE2D  65                 	db	101	;'e'
   817  00FE2E  72                 	db	114	;'r'
   818  00FE2F  76                 	db	118	;'v'
   819  00FE30  6F                 	db	111	;'o'
   820  00FE31  53                 	db	83	;'S'
   821  00FE32  74                 	db	116	;'t'
   822  00FE33  61                 	db	97	;'a'
   823  00FE34  79                 	db	121	;'y'
   824  00FE35  73                 	db	115	;'s'
   825  00FE36  20                 	db	32
   826  00FE37  20                 	db	32
   827  00FE38  20                 	db	32
   828  00FE39  20                 	db	32
   829  00FE3A  20                 	db	32
   830  00FE3B  20                 	db	32
   831  00FE3C  20                 	db	32
   832  00FE3D  20                 	db	32
   833  00FE3E  20                 	db	32
   834  00FE3F  00                 	db	0
   835  00FE40                     STR_3:
   836                           
   837                           ; BSR set to: 0
   838  00FE40  41                 	db	65	;'A'
   839  00FE41  41                 	db	65	;'A'
   840  00FE42  53                 	db	83	;'S'
   841  00FE43  65                 	db	101	;'e'
   842  00FE44  72                 	db	114	;'r'
   843  00FE45  76                 	db	118	;'v'
   844  00FE46  6F                 	db	111	;'o'
   845  00FE47  4C                 	db	76	;'L'
   846  00FE48  65                 	db	101	;'e'
   847  00FE49  66                 	db	102	;'f'
   848  00FE4A  74                 	db	116	;'t'
   849  00FE4B  20                 	db	32
   850  00FE4C  20                 	db	32
   851  00FE4D  20                 	db	32
   852  00FE4E  20                 	db	32
   853  00FE4F  20                 	db	32
   854  00FE50  20                 	db	32
   855  00FE51  20                 	db	32
   856  00FE52  20                 	db	32
   857  00FE53  20                 	db	32
   858  00FE54  00                 	db	0
   859  00FE55                     STR_10:
   860                           
   861                           ; BSR set to: 0
   862  00FE55  39                 	db	57	;'9'
   863  00FE56  53                 	db	83	;'S'
   864  00FE57  65                 	db	101	;'e'
   865  00FE58  72                 	db	114	;'r'
   866  00FE59  76                 	db	118	;'v'
   867  00FE5A  6F                 	db	111	;'o'
   868  00FE5B  52                 	db	82	;'R'
   869  00FE5C  69                 	db	105	;'i'
   870  00FE5D  67                 	db	103	;'g'
   871  00FE5E  68                 	db	104	;'h'
   872  00FE5F  74                 	db	116	;'t'
   873  00FE60  20                 	db	32
   874  00FE61  20                 	db	32
   875  00FE62  20                 	db	32
   876  00FE63  20                 	db	32
   877  00FE64  20                 	db	32
   878  00FE65  20                 	db	32
   879  00FE66  20                 	db	32
   880  00FE67  20                 	db	32
   881  00FE68  20                 	db	32
   882  00FE69  00                 	db	0
   883  00FE6A                     STR_7:
   884                           
   885                           ; BSR set to: 0
   886  00FE6A  43                 	db	67	;'C'
   887  00FE6B  53                 	db	83	;'S'
   888  00FE6C  65                 	db	101	;'e'
   889  00FE6D  72                 	db	114	;'r'
   890  00FE6E  76                 	db	118	;'v'
   891  00FE6F  6F                 	db	111	;'o'
   892  00FE70  52                 	db	82	;'R'
   893  00FE71  69                 	db	105	;'i'
   894  00FE72  67                 	db	103	;'g'
   895  00FE73  68                 	db	104	;'h'
   896  00FE74  74                 	db	116	;'t'
   897  00FE75  20                 	db	32
   898  00FE76  20                 	db	32
   899  00FE77  20                 	db	32
   900  00FE78  20                 	db	32
   901  00FE79  20                 	db	32
   902  00FE7A  20                 	db	32
   903  00FE7B  20                 	db	32
   904  00FE7C  20                 	db	32
   905  00FE7D  20                 	db	32
   906  00FE7E  00                 	db	0
   907  00FE7F                     STR_13:
   908                           
   909                           ; BSR set to: 0
   910  00FE7F  6E                 	db	110	;'n'
   911  00FE80  6F                 	db	111	;'o'
   912  00FE81  77                 	db	119	;'w'
   913  00FE82  20                 	db	32
   914  00FE83  25                 	db	37
   915  00FE84  30                 	db	48	;'0'
   916  00FE85  32                 	db	50	;'2'
   917  00FE86  78                 	db	120	;'x'
   918  00FE87  3A                 	db	58	;':'
   919  00FE88  25                 	db	37
   920  00FE89  30                 	db	48	;'0'
   921  00FE8A  32                 	db	50	;'2'
   922  00FE8B  78                 	db	120	;'x'
   923  00FE8C  20                 	db	32
   924  00FE8D  20                 	db	32
   925  00FE8E  20                 	db	32
   926  00FE8F  20                 	db	32
   927  00FE90  20                 	db	32
   928  00FE91  20                 	db	32
   929  00FE92  20                 	db	32
   930  00FE93  00                 	db	0
   931  00FE94                     STR_12:
   932                           
   933                           ; BSR set to: 0
   934  00FE94  73                 	db	115	;'s'
   935  00FE95  74                 	db	116	;'t'
   936  00FE96  61                 	db	97	;'a'
   937  00FE97  72                 	db	114	;'r'
   938  00FE98  74                 	db	116	;'t'
   939  00FE99  20                 	db	32
   940  00FE9A  25                 	db	37
   941  00FE9B  30                 	db	48	;'0'
   942  00FE9C  32                 	db	50	;'2'
   943  00FE9D  78                 	db	120	;'x'
   944  00FE9E  3A                 	db	58	;':'
   945  00FE9F  25                 	db	37
   946  00FEA0  30                 	db	48	;'0'
   947  00FEA1  32                 	db	50	;'2'
   948  00FEA2  78                 	db	120	;'x'
   949  00FEA3  20                 	db	32
   950  00FEA4  20                 	db	32
   951  00FEA5  20                 	db	32
   952  00FEA6  20                 	db	32
   953  00FEA7  20                 	db	32
   954  00FEA8  00                 	db	0
   955  00FEA9                     STR_35:
   956                           
   957                           ; BSR set to: 0
   958  00FEA9  45                 	db	69	;'E'
   959  00FEAA  6D                 	db	109	;'m'
   960  00FEAB  65                 	db	101	;'e'
   961  00FEAC  72                 	db	114	;'r'
   962  00FEAD  67                 	db	103	;'g'
   963  00FEAE  65                 	db	101	;'e'
   964  00FEAF  6E                 	db	110	;'n'
   965  00FEB0  63                 	db	99	;'c'
   966  00FEB1  79                 	db	121	;'y'
   967  00FEB2  20                 	db	32
   968  00FEB3  20                 	db	32
   969  00FEB4  20                 	db	32
   970  00FEB5  20                 	db	32
   971  00FEB6  20                 	db	32
   972  00FEB7  20                 	db	32
   973  00FEB8  20                 	db	32
   974  00FEB9  20                 	db	32
   975  00FEBA  20                 	db	32
   976  00FEBB  20                 	db	32
   977  00FEBC  00                 	db	0
   978  00FEBD                     STR_34:
   979                           
   980                           ; BSR set to: 0
   981  00FEBD  6D                 	db	109	;'m'
   982  00FEBE  6F                 	db	111	;'o'
   983  00FEBF  76                 	db	118	;'v'
   984  00FEC0  65                 	db	101	;'e'
   985  00FEC1  20                 	db	32
   986  00FEC2  63                 	db	99	;'c'
   987  00FEC3  63                 	db	99	;'c'
   988  00FEC4  6C                 	db	108	;'l'
   989  00FEC5  6F                 	db	111	;'o'
   990  00FEC6  63                 	db	99	;'c'
   991  00FEC7  6B                 	db	107	;'k'
   992  00FEC8  77                 	db	119	;'w'
   993  00FEC9  69                 	db	105	;'i'
   994  00FECA  73                 	db	115	;'s'
   995  00FECB  65                 	db	101	;'e'
   996  00FECC  20                 	db	32
   997  00FECD  20                 	db	32
   998  00FECE  20                 	db	32
   999  00FECF  20                 	db	32
  1000  00FED0  00                 	db	0
  1001  00FED1                     STR_27:
  1002                           
  1003                           ; BSR set to: 0
  1004  00FED1  43                 	db	67	;'C'
  1005  00FED2  20                 	db	32
  1006  00FED3  53                 	db	83	;'S'
  1007  00FED4  6F                 	db	111	;'o'
  1008  00FED5  72                 	db	114	;'r'
  1009  00FED6  74                 	db	116	;'t'
  1010  00FED7  65                 	db	101	;'e'
  1011  00FED8  64                 	db	100	;'d'
  1012  00FED9  3A                 	db	58	;':'
  1013  00FEDA  20                 	db	32
  1014  00FEDB  20                 	db	32
  1015  00FEDC  20                 	db	32
  1016  00FEDD  20                 	db	32
  1017  00FEDE  20                 	db	32
  1018  00FEDF  20                 	db	32
  1019  00FEE0  20                 	db	32
  1020  00FEE1  20                 	db	32
  1021  00FEE2  20                 	db	32
  1022  00FEE3  20                 	db	32
  1023  00FEE4  00                 	db	0
  1024  00FEE5                     STR_9:
  1025                           
  1026                           ; BSR set to: 0
  1027  00FEE5  39                 	db	57	;'9'
  1028  00FEE6  53                 	db	83	;'S'
  1029  00FEE7  65                 	db	101	;'e'
  1030  00FEE8  72                 	db	114	;'r'
  1031  00FEE9  76                 	db	118	;'v'
  1032  00FEEA  6F                 	db	111	;'o'
  1033  00FEEB  4C                 	db	76	;'L'
  1034  00FEEC  65                 	db	101	;'e'
  1035  00FEED  66                 	db	102	;'f'
  1036  00FEEE  74                 	db	116	;'t'
  1037  00FEEF  20                 	db	32
  1038  00FEF0  20                 	db	32
  1039  00FEF1  20                 	db	32
  1040  00FEF2  20                 	db	32
  1041  00FEF3  20                 	db	32
  1042  00FEF4  20                 	db	32
  1043  00FEF5  20                 	db	32
  1044  00FEF6  20                 	db	32
  1045  00FEF7  20                 	db	32
  1046  00FEF8  00                 	db	0
  1047  00FEF9                     STR_6:
  1048                           
  1049                           ; BSR set to: 0
  1050  00FEF9  43                 	db	67	;'C'
  1051  00FEFA  53                 	db	83	;'S'
  1052  00FEFB  65                 	db	101	;'e'
  1053  00FEFC  72                 	db	114	;'r'
  1054  00FEFD  76                 	db	118	;'v'
  1055  00FEFE  6F                 	db	111	;'o'
  1056  00FEFF  4C                 	db	76	;'L'
  1057  00FF00  65                 	db	101	;'e'
  1058  00FF01  66                 	db	102	;'f'
  1059  00FF02  74                 	db	116	;'t'
  1060  00FF03  20                 	db	32
  1061  00FF04  20                 	db	32
  1062  00FF05  20                 	db	32
  1063  00FF06  20                 	db	32
  1064  00FF07  20                 	db	32
  1065  00FF08  20                 	db	32
  1066  00FF09  20                 	db	32
  1067  00FF0A  20                 	db	32
  1068  00FF0B  20                 	db	32
  1069  00FF0C  00                 	db	0
  1070  00FF0D                     STR_18:
  1071                           
  1072                           ; BSR set to: 0
  1073  00FF0D  57                 	db	87	;'W'
  1074  00FF0E  65                 	db	101	;'e'
  1075  00FF0F  6C                 	db	108	;'l'
  1076  00FF10  63                 	db	99	;'c'
  1077  00FF11  6F                 	db	111	;'o'
  1078  00FF12  6D                 	db	109	;'m'
  1079  00FF13  65                 	db	101	;'e'
  1080  00FF14  21                 	db	33
  1081  00FF15  20                 	db	32
  1082  00FF16  20                 	db	32
  1083  00FF17  20                 	db	32
  1084  00FF18  20                 	db	32
  1085  00FF19  20                 	db	32
  1086  00FF1A  20                 	db	32
  1087  00FF1B  20                 	db	32
  1088  00FF1C  20                 	db	32
  1089  00FF1D  20                 	db	32
  1090  00FF1E  20                 	db	32
  1091  00FF1F  00                 	db	0
  1092  00FF20                     STR_37:
  1093                           
  1094                           ; BSR set to: 0
  1095  00FF20  25                 	db	37
  1096  00FF21  66                 	db	102	;'f'
  1097  00FF22  30                 	db	48	;'0'
  1098  00FF23  32                 	db	50	;'2'
  1099  00FF24  20                 	db	32
  1100  00FF25  72                 	db	114	;'r'
  1101  00FF26  65                 	db	101	;'e'
  1102  00FF27  63                 	db	99	;'c'
  1103  00FF28  65                 	db	101	;'e'
  1104  00FF29  69                 	db	105	;'i'
  1105  00FF2A  76                 	db	118	;'v'
  1106  00FF2B  65                 	db	101	;'e'
  1107  00FF2C  64                 	db	100	;'d'
  1108  00FF2D  20                 	db	32
  1109  00FF2E  20                 	db	32
  1110  00FF2F  20                 	db	32
  1111  00FF30  20                 	db	32
  1112  00FF31  00                 	db	0
  1113  00FF32                     STR_36:
  1114                           
  1115                           ; BSR set to: 0
  1116  00FF32  53                 	db	83	;'S'
  1117  00FF33  74                 	db	116	;'t'
  1118  00FF34  6F                 	db	111	;'o'
  1119  00FF35  70                 	db	112	;'p'
  1120  00FF36  70                 	db	112	;'p'
  1121  00FF37  65                 	db	101	;'e'
  1122  00FF38  64                 	db	100	;'d'
  1123  00FF39  20                 	db	32
  1124  00FF3A  20                 	db	32
  1125  00FF3B  20                 	db	32
  1126  00FF3C  20                 	db	32
  1127  00FF3D  20                 	db	32
  1128  00FF3E  20                 	db	32
  1129  00FF3F  20                 	db	32
  1130  00FF40  20                 	db	32
  1131  00FF41  20                 	db	32
  1132  00FF42  20                 	db	32
  1133  00FF43  00                 	db	0
  1134  00FF44                     STR_52:
  1135                           
  1136                           ; BSR set to: 0
  1137  00FF44  30                 	db	48	;'0'
  1138  00FF45  31                 	db	49	;'1'
  1139  00FF46  32                 	db	50	;'2'
  1140  00FF47  33                 	db	51	;'3'
  1141  00FF48  34                 	db	52	;'4'
  1142  00FF49  35                 	db	53	;'5'
  1143  00FF4A  36                 	db	54	;'6'
  1144  00FF4B  37                 	db	55	;'7'
  1145  00FF4C  38                 	db	56	;'8'
  1146  00FF4D  39                 	db	57	;'9'
  1147  00FF4E  61                 	db	97	;'a'
  1148  00FF4F  62                 	db	98	;'b'
  1149  00FF50  63                 	db	99	;'c'
  1150  00FF51  64                 	db	100	;'d'
  1151  00FF52  65                 	db	101	;'e'
  1152  00FF53  66                 	db	102	;'f'
  1153  00FF54  00                 	db	0
  1154  00FF55                     STR_33:
  1155                           
  1156                           ; BSR set to: 0
  1157  00FF55  6D                 	db	109	;'m'
  1158  00FF56  6F                 	db	111	;'o'
  1159  00FF57  76                 	db	118	;'v'
  1160  00FF58  65                 	db	101	;'e'
  1161  00FF59  20                 	db	32
  1162  00FF5A  63                 	db	99	;'c'
  1163  00FF5B  6C                 	db	108	;'l'
  1164  00FF5C  6F                 	db	111	;'o'
  1165  00FF5D  63                 	db	99	;'c'
  1166  00FF5E  6B                 	db	107	;'k'
  1167  00FF5F  77                 	db	119	;'w'
  1168  00FF60  69                 	db	105	;'i'
  1169  00FF61  73                 	db	115	;'s'
  1170  00FF62  65                 	db	101	;'e'
  1171  00FF63  20                 	db	32
  1172  00FF64  20                 	db	32
  1173  00FF65  00                 	db	0
  1174  00FF66                     STR_14:
  1175                           
  1176                           ; BSR set to: 0
  1177  00FF66  50                 	db	80	;'P'
  1178  00FF67  65                 	db	101	;'e'
  1179  00FF68  72                 	db	114	;'r'
  1180  00FF69  69                 	db	105	;'i'
  1181  00FF6A  6F                 	db	111	;'o'
  1182  00FF6B  64                 	db	100	;'d'
  1183  00FF6C  3A                 	db	58	;':'
  1184  00FF6D  20                 	db	32
  1185  00FF6E  25                 	db	37
  1186  00FF6F  75                 	db	117	;'u'
  1187  00FF70  20                 	db	32
  1188  00FF71  20                 	db	32
  1189  00FF72  20                 	db	32
  1190  00FF73  20                 	db	32
  1191  00FF74  20                 	db	32
  1192  00FF75  20                 	db	32
  1193  00FF76  00                 	db	0
  1194  00FF77                     STR_41:
  1195                           
  1196                           ; BSR set to: 0
  1197  00FF77  6E                 	db	110	;'n'
  1198  00FF78  6F                 	db	111	;'o'
  1199  00FF79  20                 	db	32
  1200  00FF7A  41                 	db	65	;'A'
  1201  00FF7B  41                 	db	65	;'A'
  1202  00FF7C  20                 	db	32
  1203  00FF7D  20                 	db	32
  1204  00FF7E  20                 	db	32
  1205  00FF7F  20                 	db	32
  1206  00FF80  20                 	db	32
  1207  00FF81  20                 	db	32
  1208  00FF82  20                 	db	32
  1209  00FF83  20                 	db	32
  1210  00FF84  20                 	db	32
  1211  00FF85  20                 	db	32
  1212  00FF86  00                 	db	0
  1213  00FF87                     STR_49:
  1214                           
  1215                           ; BSR set to: 0
  1216  00FF87  6E                 	db	110	;'n'
  1217  00FF88  6F                 	db	111	;'o'
  1218  00FF89  20                 	db	32
  1219  00FF8A  39                 	db	57	;'9'
  1220  00FF8B  56                 	db	86	;'V'
  1221  00FF8C  20                 	db	32
  1222  00FF8D  20                 	db	32
  1223  00FF8E  20                 	db	32
  1224  00FF8F  20                 	db	32
  1225  00FF90  20                 	db	32
  1226  00FF91  20                 	db	32
  1227  00FF92  20                 	db	32
  1228  00FF93  20                 	db	32
  1229  00FF94  20                 	db	32
  1230  00FF95  20                 	db	32
  1231  00FF96  00                 	db	0
  1232  00FF97                     STR_26:
  1233                           
  1234                           ; BSR set to: 0
  1235  00FF97  25                 	db	37
  1236  00FF98  64                 	db	100	;'d'
  1237  00FF99  20                 	db	32
  1238  00FF9A  20                 	db	32
  1239  00FF9B  20                 	db	32
  1240  00FF9C  20                 	db	32
  1241  00FF9D  20                 	db	32
  1242  00FF9E  20                 	db	32
  1243  00FF9F  20                 	db	32
  1244  00FFA0  20                 	db	32
  1245  00FFA1  20                 	db	32
  1246  00FFA2  20                 	db	32
  1247  00FFA3  20                 	db	32
  1248  00FFA4  20                 	db	32
  1249  00FFA5  20                 	db	32
  1250  00FFA6  00                 	db	0
  1251  00FFA7                     STR_45:
  1252                           
  1253                           ; BSR set to: 0
  1254  00FFA7  6E                 	db	110	;'n'
  1255  00FFA8  6F                 	db	111	;'o'
  1256  00FFA9  20                 	db	32
  1257  00FFAA  43                 	db	67	;'C'
  1258  00FFAB  20                 	db	32
  1259  00FFAC  20                 	db	32
  1260  00FFAD  20                 	db	32
  1261  00FFAE  20                 	db	32
  1262  00FFAF  20                 	db	32
  1263  00FFB0  20                 	db	32
  1264  00FFB1  20                 	db	32
  1265  00FFB2  20                 	db	32
  1266  00FFB3  20                 	db	32
  1267  00FFB4  20                 	db	32
  1268  00FFB5  00                 	db	0
  1269  00FFB6                     STR_38:
  1270                           
  1271                           ; BSR set to: 0
  1272  00FFB6  41                 	db	65	;'A'
  1273  00FFB7  41                 	db	65	;'A'
  1274  00FFB8  3A                 	db	58	;':'
  1275  00FFB9  20                 	db	32
  1276  00FFBA  20                 	db	32
  1277  00FFBB  20                 	db	32
  1278  00FFBC  20                 	db	32
  1279  00FFBD  20                 	db	32
  1280  00FFBE  20                 	db	32
  1281  00FFBF  20                 	db	32
  1282  00FFC0  20                 	db	32
  1283  00FFC1  20                 	db	32
  1284  00FFC2  20                 	db	32
  1285  00FFC3  00                 	db	0
  1286  00FFC4                     STR_46:
  1287                           
  1288                           ; BSR set to: 0
  1289  00FFC4  39                 	db	57	;'9'
  1290  00FFC5  56                 	db	86	;'V'
  1291  00FFC6  3A                 	db	58	;':'
  1292  00FFC7  20                 	db	32
  1293  00FFC8  20                 	db	32
  1294  00FFC9  20                 	db	32
  1295  00FFCA  20                 	db	32
  1296  00FFCB  20                 	db	32
  1297  00FFCC  20                 	db	32
  1298  00FFCD  20                 	db	32
  1299  00FFCE  20                 	db	32
  1300  00FFCF  20                 	db	32
  1301  00FFD0  20                 	db	32
  1302  00FFD1  00                 	db	0
  1303  00FFD2                     STR_42:
  1304                           
  1305                           ; BSR set to: 0
  1306  00FFD2  43                 	db	67	;'C'
  1307  00FFD3  3A                 	db	58	;':'
  1308  00FFD4  20                 	db	32
  1309  00FFD5  20                 	db	32
  1310  00FFD6  20                 	db	32
  1311  00FFD7  20                 	db	32
  1312  00FFD8  20                 	db	32
  1313  00FFD9  20                 	db	32
  1314  00FFDA  20                 	db	32
  1315  00FFDB  20                 	db	32
  1316  00FFDC  20                 	db	32
  1317  00FFDD  20                 	db	32
  1318  00FFDE  00                 	db	0
  1319  00FFDF                     STR_51:
  1320                           
  1321                           ; BSR set to: 0
  1322  00FFDF  72                 	db	114	;'r'
  1323  00FFE0  75                 	db	117	;'u'
  1324  00FFE1  6E                 	db	110	;'n'
  1325  00FFE2  73                 	db	115	;'s'
  1326  00FFE3  20                 	db	32
  1327  00FFE4  62                 	db	98	;'b'
  1328  00FFE5  65                 	db	101	;'e'
  1329  00FFE6  66                 	db	102	;'f'
  1330  00FFE7  6F                 	db	111	;'o'
  1331  00FFE8  72                 	db	114	;'r'
  1332  00FFE9  65                 	db	101	;'e'
  1333  00FFEA  00                 	db	0
  1334  00FFEB                     STR_50:
  1335                           
  1336                           ; BSR set to: 0
  1337  00FFEB  73                 	db	115	;'s'
  1338  00FFEC  68                 	db	104	;'h'
  1339  00FFED  6F                 	db	111	;'o'
  1340  00FFEE  77                 	db	119	;'w'
  1341  00FFEF  69                 	db	105	;'i'
  1342  00FFF0  6E                 	db	110	;'n'
  1343  00FFF1  67                 	db	103	;'g'
  1344  00FFF2  20                 	db	32
  1345  00FFF3  25                 	db	37
  1346  00FFF4  75                 	db	117	;'u'
  1347  00FFF5  00                 	db	0
  1348  00FFF6                     
  1349                           ; BSR set to: 0
  1350  00FFF6  4D                 	db	77	;'M'
  1351  00FFF7  61                 	db	97	;'a'
  1352  00FFF8  69                 	db	105	;'i'
  1353  00FFF9  6E                 	db	110	;'n'
  1354  00FFFA  6C                 	db	108	;'l'
  1355  00FFFB  6F                 	db	111	;'o'
  1356  00FFFC  6F                 	db	111	;'o'
  1357  00FFFD  70                 	db	112	;'p'
  1358  00FFFE  00                 	db	0
  1359  0000                     
  1360                           ; #config settings
  1361  00FFFF  00                 	db	0	; dummy byte at the end
  1362  0000                     
  1363                           	psect	cinit
  1364  00527E                     __pcinit:
  1365                           	opt stack 0
  1366  00527E                     start_initialization:
  1367                           	opt stack 0
  1368  00527E                     __initialization:
  1369                           	opt stack 0
  1370                           
  1371                           ; Clear objects allocated to BANK0 (42 bytes)
  1372  00527E  EE00  F0B6         	lfsr	0,__pbssBANK0
  1373  005282  0E2A               	movlw	42
  1374  005284                     clear_0:
  1375  005284  6AEE               	clrf	postinc0,c
  1376  005286  06E8               	decf	wreg,f,c
  1377  005288  E1FD               	bnz	clear_0
  1378  00528A                     end_of_initialization:
  1379                           	opt stack 0
  1380  00528A                     __end_of__initialization:
  1381                           	opt stack 0
  1382  00528A  907F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1383  00528C  927F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1384  00528E  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1385  005290  6EF8               	movwf	tblptru,c
  1386  005292  0100               	movlb	0
  1387  005294  EFB6  F027         	goto	_main	;jump to C main() function
  1388                           tblptru	equ	0xFF8
  1389                           postinc0	equ	0xFEE
  1390                           wreg	equ	0xFE8
  1391                           
  1392                           	psect	bssBANK0
  1393  0000B6                     __pbssBANK0:
  1394                           	opt stack 0
  1395  0000B6                     simulate@F3117:
  1396                           	opt stack 0
  1397  0000B6                     	ds	6
  1398  0000BC                     simulate@F3115:
  1399                           	opt stack 0
  1400  0000BC                     	ds	6
  1401  0000C2                     PermLog@F3083:
  1402                           	opt stack 0
  1403  0000C2                     	ds	4
  1404  0000C6                     testADC@F3128:
  1405                           	opt stack 0
  1406  0000C6                     	ds	4
  1407  0000CA                     simulate@F3105:
  1408                           	opt stack 0
  1409  0000CA                     	ds	4
  1410  0000CE                     simulate@F3103:
  1411                           	opt stack 0
  1412  0000CE                     	ds	4
  1413  0000D2                     simulate@F3101:
  1414                           	opt stack 0
  1415  0000D2                     	ds	4
  1416  0000D6                     _mode:
  1417                           	opt stack 0
  1418  0000D6                     	ds	2
  1419  0000D8                     _Latest:
  1420                           	opt stack 0
  1421  0000D8                     	ds	1
  1422  0000D9                     _time:
  1423                           	opt stack 0
  1424  0000D9                     	ds	7
  1425                           tblptru	equ	0xFF8
  1426                           postinc0	equ	0xFEE
  1427                           wreg	equ	0xFE8
  1428                           
  1429                           	psect	cstackBANK1
  1430  000100                     __pcstackBANK1:
  1431                           	opt stack 0
  1432  000100                     ??_isdigit:
  1433  000100                     ??_I2C_Master_Wait:
  1434  000100                     ?___awmod:
  1435                           	opt stack 0
  1436  000100                     ?___ftpack:
  1437                           	opt stack 0
  1438  000100                     ?___ftneg:
  1439                           	opt stack 0
  1440  000100                     ?__tdiv_to_l_:
  1441                           	opt stack 0
  1442  000100                     ?__div_to_l_:
  1443                           	opt stack 0
  1444  000100                     ?___lldiv:
  1445                           	opt stack 0
  1446  000100                     lcdNibble@temp:
  1447                           	opt stack 0
  1448  000100                     ReadEE@address:
  1449                           	opt stack 0
  1450  000100                     ___awmod@dividend:
  1451                           	opt stack 0
  1452  000100                     __div_to_l_@f1:
  1453                           	opt stack 0
  1454  000100                     ___ftpack@arg:
  1455                           	opt stack 0
  1456  000100                     __tdiv_to_l_@f1:
  1457                           	opt stack 0
  1458  000100                     ___ftge@ff1:
  1459                           	opt stack 0
  1460  000100                     ___ftneg@f1:
  1461                           	opt stack 0
  1462  000100                     ___lldiv@dividend:
  1463                           	opt stack 0
  1464                           
  1465                           ; 4 bytes @ 0x0
  1466  000100                     	ds	1
  1467  000101                     lcdNibble@data:
  1468                           	opt stack 0
  1469  000101                     I2C_Master_Read@a:
  1470                           	opt stack 0
  1471  000101                     _isdigit$1086:
  1472                           	opt stack 0
  1473  000101                     I2C_Master_Write@d:
  1474                           	opt stack 0
  1475                           
  1476                           ; 2 bytes @ 0x1
  1477  000101                     	ds	1
  1478  000102                     lcdInst@data:
  1479                           	opt stack 0
  1480  000102                     putch@data:
  1481                           	opt stack 0
  1482  000102                     I2C_Master_Read@temp:
  1483                           	opt stack 0
  1484  000102                     isdigit@c:
  1485                           	opt stack 0
  1486  000102                     ___awmod@divisor:
  1487                           	opt stack 0
  1488                           
  1489                           ; 2 bytes @ 0x2
  1490  000102                     	ds	1
  1491  000103                     ??_initLCD:
  1492  000103                     ___ftpack@exp:
  1493                           	opt stack 0
  1494  000103                     getTime@time:
  1495                           	opt stack 0
  1496  000103                     __div_to_l_@f2:
  1497                           	opt stack 0
  1498  000103                     __tdiv_to_l_@f2:
  1499                           	opt stack 0
  1500  000103                     ___ftge@ff2:
  1501                           	opt stack 0
  1502                           
  1503                           ; 3 bytes @ 0x3
  1504  000103                     	ds	1
  1505  000104                     ___awmod@counter:
  1506                           	opt stack 0
  1507  000104                     ___ftpack@sign:
  1508                           	opt stack 0
  1509  000104                     ___lldiv@divisor:
  1510                           	opt stack 0
  1511                           
  1512                           ; 4 bytes @ 0x4
  1513  000104                     	ds	1
  1514  000105                     ??___ftpack:
  1515  000105                     getTime@i:
  1516                           	opt stack 0
  1517  000105                     ___awmod@sign:
  1518                           	opt stack 0
  1519                           
  1520                           ; 1 bytes @ 0x5
  1521  000105                     	ds	1
  1522  000106                     ??__tdiv_to_l_:
  1523  000106                     ??___ftge:
  1524  000106                     ?___awdiv:
  1525                           	opt stack 0
  1526  000106                     ___awdiv@dividend:
  1527                           	opt stack 0
  1528  000106                     __div_to_l_@quot:
  1529                           	opt stack 0
  1530                           
  1531                           ; 4 bytes @ 0x6
  1532  000106                     	ds	2
  1533  000108                     ?___lltoft:
  1534                           	opt stack 0
  1535  000108                     ___awdiv@divisor:
  1536                           	opt stack 0
  1537  000108                     ___lldiv@quotient:
  1538                           	opt stack 0
  1539  000108                     ___lltoft@c:
  1540                           	opt stack 0
  1541                           
  1542                           ; 4 bytes @ 0x8
  1543  000108                     	ds	1
  1544  000109                     __tdiv_to_l_@quot:
  1545                           	opt stack 0
  1546                           
  1547                           ; 4 bytes @ 0x9
  1548  000109                     	ds	1
  1549  00010A                     ___awdiv@counter:
  1550                           	opt stack 0
  1551  00010A                     __div_to_l_@cntr:
  1552                           	opt stack 0
  1553                           
  1554                           ; 1 bytes @ 0xA
  1555  00010A                     	ds	1
  1556  00010B                     ___awdiv@sign:
  1557                           	opt stack 0
  1558  00010B                     __div_to_l_@exp1:
  1559                           	opt stack 0
  1560                           
  1561                           ; 1 bytes @ 0xB
  1562  00010B                     	ds	1
  1563  00010C                     ??___lltoft:
  1564  00010C                     ___lldiv@counter:
  1565                           	opt stack 0
  1566  00010C                     ___awdiv@quotient:
  1567                           	opt stack 0
  1568                           
  1569                           ; 2 bytes @ 0xC
  1570  00010C                     	ds	1
  1571  00010D                     ?___llmod:
  1572                           	opt stack 0
  1573  00010D                     __tdiv_to_l_@cntr:
  1574                           	opt stack 0
  1575  00010D                     I2C_Master_Init@c:
  1576                           	opt stack 0
  1577  00010D                     ___llmod@dividend:
  1578                           	opt stack 0
  1579                           
  1580                           ; 4 bytes @ 0xD
  1581  00010D                     	ds	1
  1582  00010E                     ?___wmul:
  1583                           	opt stack 0
  1584  00010E                     __tdiv_to_l_@exp1:
  1585                           	opt stack 0
  1586  00010E                     ___wmul@multiplier:
  1587                           	opt stack 0
  1588                           
  1589                           ; 2 bytes @ 0xE
  1590  00010E                     	ds	2
  1591  000110                     ___lltoft@exp:
  1592                           	opt stack 0
  1593  000110                     ___wmul@multiplicand:
  1594                           	opt stack 0
  1595                           
  1596                           ; 2 bytes @ 0x10
  1597  000110                     	ds	1
  1598  000111                     ??_I2C_Master_Init:
  1599  000111                     ___llmod@divisor:
  1600                           	opt stack 0
  1601                           
  1602                           ; 4 bytes @ 0x11
  1603  000111                     	ds	1
  1604  000112                     ___wmul@product:
  1605                           	opt stack 0
  1606                           
  1607                           ; 2 bytes @ 0x12
  1608  000112                     	ds	2
  1609  000114                     ?___ftmul:
  1610                           	opt stack 0
  1611  000114                     ___ftmul@f1:
  1612                           	opt stack 0
  1613                           
  1614                           ; 3 bytes @ 0x14
  1615  000114                     	ds	1
  1616  000115                     ??_initialize:
  1617  000115                     ___llmod@counter:
  1618                           	opt stack 0
  1619                           
  1620                           ; 1 bytes @ 0x15
  1621  000115                     	ds	2
  1622  000117                     ___ftmul@f2:
  1623                           	opt stack 0
  1624                           
  1625                           ; 3 bytes @ 0x17
  1626  000117                     	ds	3
  1627  00011A                     ??___ftmul:
  1628                           
  1629                           ; 1 bytes @ 0x1A
  1630  00011A                     	ds	3
  1631  00011D                     ___ftmul@exp:
  1632                           	opt stack 0
  1633                           
  1634                           ; 1 bytes @ 0x1D
  1635  00011D                     	ds	1
  1636  00011E                     ___ftmul@f3_as_product:
  1637                           	opt stack 0
  1638                           
  1639                           ; 3 bytes @ 0x1E
  1640  00011E                     	ds	3
  1641  000121                     ___ftmul@cntr:
  1642                           	opt stack 0
  1643                           
  1644                           ; 1 bytes @ 0x21
  1645  000121                     	ds	1
  1646  000122                     ___ftmul@sign:
  1647                           	opt stack 0
  1648                           
  1649                           ; 1 bytes @ 0x22
  1650  000122                     	ds	1
  1651  000123                     ?_fround:
  1652                           	opt stack 0
  1653  000123                     ?_scale:
  1654                           	opt stack 0
  1655                           
  1656                           ; 3 bytes @ 0x23
  1657  000123                     	ds	3
  1658  000126                     _fround$1445:
  1659                           	opt stack 0
  1660  000126                     _scale$1446:
  1661                           	opt stack 0
  1662                           
  1663                           ; 3 bytes @ 0x26
  1664  000126                     	ds	3
  1665  000129                     scale@scl:
  1666                           	opt stack 0
  1667  000129                     _fround$1444:
  1668                           	opt stack 0
  1669                           
  1670                           ; 3 bytes @ 0x29
  1671  000129                     	ds	1
  1672  00012A                     ?___fttol:
  1673                           	opt stack 0
  1674  00012A                     ___fttol@f1:
  1675                           	opt stack 0
  1676                           
  1677                           ; 3 bytes @ 0x2A
  1678  00012A                     	ds	2
  1679  00012C                     fround@prec:
  1680                           	opt stack 0
  1681                           
  1682                           ; 1 bytes @ 0x2C
  1683  00012C                     	ds	1
  1684  00012D                     ?___ftadd:
  1685                           	opt stack 0
  1686  00012D                     ___ftadd@f1:
  1687                           	opt stack 0
  1688                           
  1689                           ; 3 bytes @ 0x2D
  1690  00012D                     	ds	1
  1691  00012E                     ??___fttol:
  1692                           
  1693                           ; 1 bytes @ 0x2E
  1694  00012E                     	ds	2
  1695  000130                     ___ftadd@f2:
  1696                           	opt stack 0
  1697                           
  1698                           ; 3 bytes @ 0x30
  1699  000130                     	ds	3
  1700  000133                     ??___ftadd:
  1701  000133                     ___fttol@sign1:
  1702                           	opt stack 0
  1703                           
  1704                           ; 1 bytes @ 0x33
  1705  000133                     	ds	1
  1706  000134                     ___fttol@lval:
  1707                           	opt stack 0
  1708                           
  1709                           ; 4 bytes @ 0x34
  1710  000134                     	ds	2
  1711  000136                     ___ftadd@sign:
  1712                           	opt stack 0
  1713                           
  1714                           ; 1 bytes @ 0x36
  1715  000136                     	ds	1
  1716  000137                     ___ftadd@exp2:
  1717                           	opt stack 0
  1718                           
  1719                           ; 1 bytes @ 0x37
  1720  000137                     	ds	1
  1721  000138                     ___ftadd@exp1:
  1722                           	opt stack 0
  1723  000138                     ___fttol@exp1:
  1724                           	opt stack 0
  1725                           
  1726                           ; 1 bytes @ 0x38
  1727  000138                     	ds	1
  1728  000139                     ?___ftsub:
  1729                           	opt stack 0
  1730  000139                     ___ftsub@f1:
  1731                           	opt stack 0
  1732                           
  1733                           ; 3 bytes @ 0x39
  1734  000139                     	ds	3
  1735  00013C                     ___ftsub@f2:
  1736                           	opt stack 0
  1737                           
  1738                           ; 3 bytes @ 0x3C
  1739  00013C                     	ds	3
  1740  00013F                     ?_printf:
  1741                           	opt stack 0
  1742  00013F                     printf@f:
  1743                           	opt stack 0
  1744                           
  1745                           ; 2 bytes @ 0x3F
  1746  00013F                     	ds	8
  1747  000147                     ??_printf:
  1748                           
  1749                           ; 1 bytes @ 0x47
  1750  000147                     	ds	6
  1751  00014D                     _printf$1447:
  1752                           	opt stack 0
  1753                           
  1754                           ; 3 bytes @ 0x4D
  1755  00014D                     	ds	3
  1756  000150                     printf@idx:
  1757                           	opt stack 0
  1758                           
  1759                           ; 1 bytes @ 0x50
  1760  000150                     	ds	1
  1761  000151                     printf@cp:
  1762                           	opt stack 0
  1763                           
  1764                           ; 2 bytes @ 0x51
  1765  000151                     	ds	2
  1766  000153                     printf@len:
  1767                           	opt stack 0
  1768                           
  1769                           ; 2 bytes @ 0x53
  1770  000153                     	ds	2
  1771  000155                     printf@ap:
  1772                           	opt stack 0
  1773                           
  1774                           ; 2 bytes @ 0x55
  1775  000155                     	ds	2
  1776  000157                     printf@prec:
  1777                           	opt stack 0
  1778                           
  1779                           ; 2 bytes @ 0x57
  1780  000157                     	ds	2
  1781  000159                     printf@tmpval:
  1782                           	opt stack 0
  1783                           
  1784                           ; 4 bytes @ 0x59
  1785  000159                     	ds	4
  1786  00015D                     printf@exp:
  1787                           	opt stack 0
  1788                           
  1789                           ; 2 bytes @ 0x5D
  1790  00015D                     	ds	2
  1791  00015F                     printf@val:
  1792                           	opt stack 0
  1793                           
  1794                           ; 4 bytes @ 0x5F
  1795  00015F                     	ds	4
  1796  000163                     printf@flag:
  1797                           	opt stack 0
  1798                           
  1799                           ; 2 bytes @ 0x63
  1800  000163                     	ds	2
  1801  000165                     printf@fval:
  1802                           	opt stack 0
  1803                           
  1804                           ; 3 bytes @ 0x65
  1805  000165                     	ds	3
  1806  000168                     printf@width:
  1807                           	opt stack 0
  1808                           
  1809                           ; 2 bytes @ 0x68
  1810  000168                     	ds	2
  1811  00016A                     printf@c:
  1812                           	opt stack 0
  1813                           
  1814                           ; 1 bytes @ 0x6A
  1815  00016A                     	ds	1
  1816  00016B                     ??_showRTC:
  1817                           
  1818                           ; 1 bytes @ 0x6B
  1819  00016B                     	ds	2
  1820  00016D                     
  1821                           ; 2 bytes @ 0x6D
  1822  00016D                     	ds	2
  1823  00016F                     
  1824                           ; 3 bytes @ 0x6F
  1825  00016F                     	ds	3
  1826  000172                     ??_main:
  1827                           
  1828                           ; 1 bytes @ 0x72
  1829  000172                     	ds	2
  1830                           tblptru	equ	0xFF8
  1831                           postinc0	equ	0xFEE
  1832                           wreg	equ	0xFE8
  1833                           
  1834                           	psect	cstackBANK0
  1835  000080                     __pcstackBANK0:
  1836                           	opt stack 0
  1837  000080                     ??_PermLog:
  1838  000080                     ??_simulate:
  1839                           
  1840                           ; 1 bytes @ 0x0
  1841  000080                     	ds	2
  1842  000082                     _simulate$1657:
  1843                           	opt stack 0
  1844  000082                     PermLog@sorted:
  1845                           	opt stack 0
  1846                           
  1847                           ; 4 bytes @ 0x2
  1848  000082                     	ds	2
  1849  000084                     simulate@portCW:
  1850                           	opt stack 0
  1851                           
  1852                           ; 6 bytes @ 0x4
  1853  000084                     	ds	2
  1854  000086                     PermLog@backruns:
  1855                           	opt stack 0
  1856                           
  1857                           ; 1 bytes @ 0x6
  1858  000086                     	ds	1
  1859  000087                     PermLog@time:
  1860                           	opt stack 0
  1861                           
  1862                           ; 2 bytes @ 0x7
  1863  000087                     	ds	3
  1864  00008A                     simulate@portCCW:
  1865                           	opt stack 0
  1866                           
  1867                           ; 6 bytes @ 0xA
  1868  00008A                     	ds	6
  1869  000090                     simulate@stop:
  1870                           	opt stack 0
  1871                           
  1872                           ; 2 bytes @ 0x10
  1873  000090                     	ds	2
  1874  000092                     simulate@AA:
  1875                           	opt stack 0
  1876                           
  1877                           ; 2 bytes @ 0x12
  1878  000092                     	ds	2
  1879  000094                     simulate@C:
  1880                           	opt stack 0
  1881                           
  1882                           ; 2 bytes @ 0x14
  1883  000094                     	ds	2
  1884  000096                     simulate@V9:
  1885                           	opt stack 0
  1886                           
  1887                           ; 2 bytes @ 0x16
  1888  000096                     	ds	2
  1889  000098                     simulate@now:
  1890                           	opt stack 0
  1891                           
  1892                           ; 4 bytes @ 0x18
  1893  000098                     	ds	4
  1894  00009C                     simulate@start:
  1895                           	opt stack 0
  1896                           
  1897                           ; 4 bytes @ 0x1C
  1898  00009C                     	ds	4
  1899  0000A0                     simulate@sorted:
  1900                           	opt stack 0
  1901                           
  1902                           ; 4 bytes @ 0x20
  1903  0000A0                     	ds	4
  1904  0000A4                     simulate@period:
  1905                           	opt stack 0
  1906                           
  1907                           ; 2 bytes @ 0x24
  1908  0000A4                     	ds	2
  1909  0000A6                     ??_keypressed:
  1910                           
  1911                           ; 1 bytes @ 0x26
  1912  0000A6                     	ds	16
  1913                           tblptru	equ	0xFF8
  1914                           postinc0	equ	0xFEE
  1915                           wreg	equ	0xFE8
  1916                           
  1917                           	psect	cstackCOMRAM
  1918  000001                     __pcstackCOMRAM:
  1919                           	opt stack 0
  1920  000001                     ??i2_I2C_Master_Wait:
  1921  000001                     ??i2_isdigit:
  1922  000001                     ?_captureKeypad:
  1923                           	opt stack 0
  1924  000001                     ?_AD:
  1925                           	opt stack 0
  1926  000001                     ?i2___awmod:
  1927                           	opt stack 0
  1928  000001                     ?i2___ftpack:
  1929                           	opt stack 0
  1930  000001                     ?i2___ftneg:
  1931                           	opt stack 0
  1932  000001                     ?i2__div_to_l_:
  1933                           	opt stack 0
  1934  000001                     ?i2__tdiv_to_l_:
  1935                           	opt stack 0
  1936  000001                     ?i2___lldiv:
  1937                           	opt stack 0
  1938  000001                     back@runs:
  1939                           	opt stack 0
  1940  000001                     i2lcdNibble@temp:
  1941                           	opt stack 0
  1942  000001                     WriteEE@address:
  1943                           	opt stack 0
  1944  000001                     i2ReadEE@address:
  1945                           	opt stack 0
  1946  000001                     i2___awmod@dividend:
  1947                           	opt stack 0
  1948  000001                     i2__div_to_l_@f1:
  1949                           	opt stack 0
  1950  000001                     i2___ftpack@arg:
  1951                           	opt stack 0
  1952  000001                     i2__tdiv_to_l_@f1:
  1953                           	opt stack 0
  1954  000001                     i2___ftneg@f1:
  1955                           	opt stack 0
  1956  000001                     i2___lldiv@dividend:
  1957                           	opt stack 0
  1958                           
  1959                           ; 4 bytes @ 0x0
  1960  000001                     	ds	1
  1961  000002                     back@result:
  1962                           	opt stack 0
  1963  000002                     i2lcdNibble@data:
  1964                           	opt stack 0
  1965  000002                     i2I2C_Master_Read@a:
  1966                           	opt stack 0
  1967  000002                     i2_isdigit$1086:
  1968                           	opt stack 0
  1969  000002                     i2I2C_Master_Write@d:
  1970                           	opt stack 0
  1971                           
  1972                           ; 2 bytes @ 0x1
  1973  000002                     	ds	1
  1974  000003                     ??_AD:
  1975  000003                     captureKeypad@keypress:
  1976                           	opt stack 0
  1977  000003                     WriteEE@data:
  1978                           	opt stack 0
  1979  000003                     i2lcdInst@data:
  1980                           	opt stack 0
  1981  000003                     i2putch@data:
  1982                           	opt stack 0
  1983  000003                     i2I2C_Master_Read@temp:
  1984                           	opt stack 0
  1985  000003                     i2isdigit@c:
  1986                           	opt stack 0
  1987  000003                     ReadRun@sorted:
  1988                           	opt stack 0
  1989  000003                     i2___awmod@divisor:
  1990                           	opt stack 0
  1991                           
  1992                           ; 2 bytes @ 0x2
  1993  000003                     	ds	1
  1994  000004                     i2___ftpack@exp:
  1995                           	opt stack 0
  1996  000004                     i2getTime@time:
  1997                           	opt stack 0
  1998  000004                     i2__div_to_l_@f2:
  1999                           	opt stack 0
  2000  000004                     i2__tdiv_to_l_@f2:
  2001                           	opt stack 0
  2002                           
  2003                           ; 3 bytes @ 0x3
  2004  000004                     	ds	1
  2005  000005                     AD@channel:
  2006                           	opt stack 0
  2007  000005                     i2___awmod@counter:
  2008                           	opt stack 0
  2009  000005                     i2___ftpack@sign:
  2010                           	opt stack 0
  2011  000005                     ReadRun@time:
  2012                           	opt stack 0
  2013  000005                     i2___lldiv@divisor:
  2014                           	opt stack 0
  2015                           
  2016                           ; 4 bytes @ 0x4
  2017  000005                     	ds	1
  2018  000006                     ??i2___ftpack:
  2019  000006                     i2getTime@i:
  2020                           	opt stack 0
  2021  000006                     i2___awmod@sign:
  2022                           	opt stack 0
  2023                           
  2024                           ; 1 bytes @ 0x5
  2025  000006                     	ds	1
  2026  000007                     ??_ReadRun:
  2027  000007                     ??i2__tdiv_to_l_:
  2028  000007                     ?i2___awdiv:
  2029                           	opt stack 0
  2030  000007                     i2___awdiv@dividend:
  2031                           	opt stack 0
  2032  000007                     i2__div_to_l_@quot:
  2033                           	opt stack 0
  2034                           
  2035                           ; 4 bytes @ 0x6
  2036  000007                     	ds	2
  2037  000009                     ?___awtoft:
  2038                           	opt stack 0
  2039  000009                     ?i2___lltoft:
  2040                           	opt stack 0
  2041  000009                     ___awtoft@c:
  2042                           	opt stack 0
  2043  000009                     i2___awdiv@divisor:
  2044                           	opt stack 0
  2045  000009                     i2___lldiv@quotient:
  2046                           	opt stack 0
  2047  000009                     i2___lltoft@c:
  2048                           	opt stack 0
  2049                           
  2050                           ; 4 bytes @ 0x8
  2051  000009                     	ds	1
  2052  00000A                     i2__tdiv_to_l_@quot:
  2053                           	opt stack 0
  2054                           
  2055                           ; 4 bytes @ 0x9
  2056  00000A                     	ds	1
  2057  00000B                     ReadRun@backruns:
  2058                           	opt stack 0
  2059  00000B                     i2___awdiv@counter:
  2060                           	opt stack 0
  2061  00000B                     i2__div_to_l_@cntr:
  2062                           	opt stack 0
  2063                           
  2064                           ; 1 bytes @ 0xA
  2065  00000B                     	ds	1
  2066  00000C                     ___awtoft@sign:
  2067                           	opt stack 0
  2068  00000C                     i2___awdiv@sign:
  2069                           	opt stack 0
  2070  00000C                     i2__div_to_l_@exp1:
  2071                           	opt stack 0
  2072  00000C                     ReadRun@add:
  2073                           	opt stack 0
  2074                           
  2075                           ; 2 bytes @ 0xB
  2076  00000C                     	ds	1
  2077  00000D                     ??i2___lltoft:
  2078  00000D                     ?___ftdiv:
  2079                           	opt stack 0
  2080  00000D                     i2___lldiv@counter:
  2081                           	opt stack 0
  2082  00000D                     i2___awdiv@quotient:
  2083                           	opt stack 0
  2084  00000D                     ___ftdiv@f1:
  2085                           	opt stack 0
  2086                           
  2087                           ; 3 bytes @ 0xC
  2088  00000D                     	ds	1
  2089  00000E                     ?i2___llmod:
  2090                           	opt stack 0
  2091  00000E                     i2__tdiv_to_l_@cntr:
  2092                           	opt stack 0
  2093  00000E                     i2___llmod@dividend:
  2094                           	opt stack 0
  2095                           
  2096                           ; 4 bytes @ 0xD
  2097  00000E                     	ds	1
  2098  00000F                     ?i2___wmul:
  2099                           	opt stack 0
  2100  00000F                     i2__tdiv_to_l_@exp1:
  2101                           	opt stack 0
  2102  00000F                     PWMC@widthus:
  2103                           	opt stack 0
  2104  00000F                     i2___wmul@multiplier:
  2105                           	opt stack 0
  2106                           
  2107                           ; 2 bytes @ 0xE
  2108  00000F                     	ds	1
  2109  000010                     ___ftdiv@f2:
  2110                           	opt stack 0
  2111                           
  2112                           ; 3 bytes @ 0xF
  2113  000010                     	ds	1
  2114  000011                     i2___lltoft@exp:
  2115                           	opt stack 0
  2116  000011                     PWMC@cycles:
  2117                           	opt stack 0
  2118  000011                     i2___wmul@multiplicand:
  2119                           	opt stack 0
  2120                           
  2121                           ; 2 bytes @ 0x10
  2122  000011                     	ds	1
  2123  000012                     i2___llmod@divisor:
  2124                           	opt stack 0
  2125                           
  2126                           ; 4 bytes @ 0x11
  2127  000012                     	ds	1
  2128  000013                     ??___ftdiv:
  2129  000013                     PWMC@port:
  2130                           	opt stack 0
  2131  000013                     i2___wmul@product:
  2132                           	opt stack 0
  2133                           
  2134                           ; 2 bytes @ 0x12
  2135  000013                     	ds	2
  2136  000015                     ??_PWMC:
  2137  000015                     ?_HexDecToDec2:
  2138                           	opt stack 0
  2139  000015                     HexDecToDec2@hex:
  2140                           	opt stack 0
  2141  000015                     WriteRun@sorted:
  2142                           	opt stack 0
  2143                           
  2144                           ; 2 bytes @ 0x14
  2145  000015                     	ds	1
  2146  000016                     ___ftdiv@cntr:
  2147                           	opt stack 0
  2148  000016                     i2___llmod@counter:
  2149                           	opt stack 0
  2150                           
  2151                           ; 1 bytes @ 0x15
  2152  000016                     	ds	1
  2153  000017                     ??_HexDecToDec2:
  2154  000017                     _PWMC$1439:
  2155                           	opt stack 0
  2156  000017                     WriteRun@time:
  2157                           	opt stack 0
  2158  000017                     ___ftdiv@f3:
  2159                           	opt stack 0
  2160                           
  2161                           ; 3 bytes @ 0x16
  2162  000017                     	ds	1
  2163  000018                     _PWMC$1440:
  2164                           	opt stack 0
  2165                           
  2166                           ; 1 bytes @ 0x17
  2167  000018                     	ds	1
  2168  000019                     ??_WriteRun:
  2169  000019                     _PWMC$1441:
  2170                           	opt stack 0
  2171                           
  2172                           ; 1 bytes @ 0x18
  2173  000019                     	ds	1
  2174  00001A                     ___ftdiv@exp:
  2175                           	opt stack 0
  2176  00001A                     HexDecToDec2@tenth:
  2177                           	opt stack 0
  2178  00001A                     PWMC@countdown:
  2179                           	opt stack 0
  2180                           
  2181                           ; 2 bytes @ 0x19
  2182  00001A                     	ds	1
  2183  00001B                     ___ftdiv@sign:
  2184                           	opt stack 0
  2185  00001B                     WriteRun@add:
  2186                           	opt stack 0
  2187                           
  2188                           ; 2 bytes @ 0x1A
  2189  00001B                     	ds	1
  2190  00001C                     ?i2___ftmul:
  2191                           	opt stack 0
  2192  00001C                     HexDecToDec2@digit:
  2193                           	opt stack 0
  2194  00001C                     i2___ftmul@f1:
  2195                           	opt stack 0
  2196                           
  2197                           ; 3 bytes @ 0x1B
  2198  00001C                     	ds	3
  2199  00001F                     i2___ftmul@f2:
  2200                           	opt stack 0
  2201                           
  2202                           ; 3 bytes @ 0x1E
  2203  00001F                     	ds	3
  2204  000022                     ??i2___ftmul:
  2205                           
  2206                           ; 1 bytes @ 0x21
  2207  000022                     	ds	3
  2208  000025                     i2___ftmul@exp:
  2209                           	opt stack 0
  2210                           
  2211                           ; 1 bytes @ 0x24
  2212  000025                     	ds	1
  2213  000026                     i2___ftmul@f3_as_product:
  2214                           	opt stack 0
  2215                           
  2216                           ; 3 bytes @ 0x25
  2217  000026                     	ds	3
  2218  000029                     i2___ftmul@cntr:
  2219                           	opt stack 0
  2220                           
  2221                           ; 1 bytes @ 0x28
  2222  000029                     	ds	1
  2223  00002A                     i2___ftmul@sign:
  2224                           	opt stack 0
  2225                           
  2226                           ; 1 bytes @ 0x29
  2227  00002A                     	ds	1
  2228  00002B                     ?i2_fround:
  2229                           	opt stack 0
  2230  00002B                     ?i2_scale:
  2231                           	opt stack 0
  2232  00002B                     ?i2___fttol:
  2233                           	opt stack 0
  2234  00002B                     i2___ftge@ff1:
  2235                           	opt stack 0
  2236  00002B                     i2___fttol@f1:
  2237                           	opt stack 0
  2238                           
  2239                           ; 3 bytes @ 0x2A
  2240  00002B                     	ds	3
  2241  00002E                     i2___ftge@ff2:
  2242                           	opt stack 0
  2243  00002E                     i2_fround$1660:
  2244                           	opt stack 0
  2245  00002E                     i2_scale$1661:
  2246                           	opt stack 0
  2247                           
  2248                           ; 3 bytes @ 0x2D
  2249  00002E                     	ds	1
  2250  00002F                     ??i2___fttol:
  2251                           
  2252                           ; 1 bytes @ 0x2E
  2253  00002F                     	ds	2
  2254  000031                     ??i2___ftge:
  2255  000031                     i2scale@scl:
  2256                           	opt stack 0
  2257  000031                     i2_fround$1659:
  2258                           	opt stack 0
  2259                           
  2260                           ; 3 bytes @ 0x30
  2261  000031                     	ds	3
  2262  000034                     i2fround@prec:
  2263                           	opt stack 0
  2264  000034                     i2___fttol@sign1:
  2265                           	opt stack 0
  2266                           
  2267                           ; 1 bytes @ 0x33
  2268  000034                     	ds	1
  2269  000035                     ?i2___ftadd:
  2270                           	opt stack 0
  2271  000035                     i2___ftadd@f1:
  2272                           	opt stack 0
  2273  000035                     i2___fttol@lval:
  2274                           	opt stack 0
  2275                           
  2276                           ; 4 bytes @ 0x34
  2277  000035                     	ds	3
  2278  000038                     i2___ftadd@f2:
  2279                           	opt stack 0
  2280                           
  2281                           ; 3 bytes @ 0x37
  2282  000038                     	ds	1
  2283  000039                     i2___fttol@exp1:
  2284                           	opt stack 0
  2285                           
  2286                           ; 1 bytes @ 0x38
  2287  000039                     	ds	2
  2288  00003B                     ??i2___ftadd:
  2289                           
  2290                           ; 1 bytes @ 0x3A
  2291  00003B                     	ds	3
  2292  00003E                     i2___ftadd@sign:
  2293                           	opt stack 0
  2294                           
  2295                           ; 1 bytes @ 0x3D
  2296  00003E                     	ds	1
  2297  00003F                     i2___ftadd@exp2:
  2298                           	opt stack 0
  2299                           
  2300                           ; 1 bytes @ 0x3E
  2301  00003F                     	ds	1
  2302  000040                     i2___ftadd@exp1:
  2303                           	opt stack 0
  2304                           
  2305                           ; 1 bytes @ 0x3F
  2306  000040                     	ds	1
  2307  000041                     ?i2___ftsub:
  2308                           	opt stack 0
  2309  000041                     i2___ftsub@f1:
  2310                           	opt stack 0
  2311                           
  2312                           ; 3 bytes @ 0x40
  2313  000041                     	ds	3
  2314  000044                     i2___ftsub@f2:
  2315                           	opt stack 0
  2316                           
  2317                           ; 3 bytes @ 0x43
  2318  000044                     	ds	3
  2319  000047                     ?i2_printf:
  2320                           	opt stack 0
  2321  000047                     i2printf@f:
  2322                           	opt stack 0
  2323                           
  2324                           ; 2 bytes @ 0x46
  2325  000047                     	ds	6
  2326  00004D                     ??i2_printf:
  2327                           
  2328                           ; 1 bytes @ 0x4C
  2329  00004D                     	ds	6
  2330  000053                     i2_printf$1662:
  2331                           	opt stack 0
  2332                           
  2333                           ; 3 bytes @ 0x52
  2334  000053                     	ds	3
  2335  000056                     i2printf@cp:
  2336                           	opt stack 0
  2337                           
  2338                           ; 2 bytes @ 0x55
  2339  000056                     	ds	2
  2340  000058                     i2printf@idx:
  2341                           	opt stack 0
  2342                           
  2343                           ; 1 bytes @ 0x57
  2344  000058                     	ds	1
  2345  000059                     i2printf@len:
  2346                           	opt stack 0
  2347                           
  2348                           ; 2 bytes @ 0x58
  2349  000059                     	ds	2
  2350  00005B                     i2printf@ap:
  2351                           	opt stack 0
  2352                           
  2353                           ; 2 bytes @ 0x5A
  2354  00005B                     	ds	2
  2355  00005D                     i2printf@prec:
  2356                           	opt stack 0
  2357                           
  2358                           ; 2 bytes @ 0x5C
  2359  00005D                     	ds	2
  2360  00005F                     i2printf@tmpval:
  2361                           	opt stack 0
  2362                           
  2363                           ; 4 bytes @ 0x5E
  2364  00005F                     	ds	4
  2365  000063                     i2printf@exp:
  2366                           	opt stack 0
  2367                           
  2368                           ; 2 bytes @ 0x62
  2369  000063                     	ds	2
  2370  000065                     i2printf@val:
  2371                           	opt stack 0
  2372                           
  2373                           ; 4 bytes @ 0x64
  2374  000065                     	ds	4
  2375  000069                     i2printf@flag:
  2376                           	opt stack 0
  2377                           
  2378                           ; 2 bytes @ 0x68
  2379  000069                     	ds	2
  2380  00006B                     i2printf@fval:
  2381                           	opt stack 0
  2382                           
  2383                           ; 3 bytes @ 0x6A
  2384  00006B                     	ds	3
  2385  00006E                     i2printf@width:
  2386                           	opt stack 0
  2387                           
  2388                           ; 2 bytes @ 0x6D
  2389  00006E                     	ds	2
  2390  000070                     i2printf@c:
  2391                           	opt stack 0
  2392                           
  2393                           ; 1 bytes @ 0x6F
  2394  000070                     	ds	1
  2395  000071                     ??_stopMoving:
  2396  000071                     ?_checkV:
  2397                           	opt stack 0
  2398  000071                     showInfo@time:
  2399                           	opt stack 0
  2400  000071                     CW90@port:
  2401                           	opt stack 0
  2402  000071                     CCW90@port:
  2403                           	opt stack 0
  2404  000071                     checkV@voltage:
  2405                           	opt stack 0
  2406                           
  2407                           ; 2 bytes @ 0x70
  2408  000071                     	ds	2
  2409  000073                     showInfo@sorted:
  2410                           	opt stack 0
  2411  000073                     _stopMoving$551:
  2412                           	opt stack 0
  2413  000073                     checkV@max:
  2414                           	opt stack 0
  2415                           
  2416                           ; 3 bytes @ 0x72
  2417  000073                     	ds	2
  2418  000075                     ??_showInfo:
  2419  000075                     stopMoving@em:
  2420                           	opt stack 0
  2421                           
  2422                           ; 1 bytes @ 0x74
  2423  000075                     	ds	1
  2424  000076                     ??_checkV:
  2425                           
  2426                           ; 1 bytes @ 0x75
  2427  000076                     	ds	2
  2428  000078                     _checkV$1658:
  2429                           	opt stack 0
  2430                           
  2431                           ; 3 bytes @ 0x77
  2432  000078                     	ds	2
  2433  00007A                     showInfo@type:
  2434                           	opt stack 0
  2435                           
  2436                           ; 2 bytes @ 0x79
  2437  00007A                     	ds	1
  2438  00007B                     ?_checkAA:
  2439                           	opt stack 0
  2440  00007B                     ?_checkC:
  2441                           	opt stack 0
  2442  00007B                     ?_check9:
  2443                           	opt stack 0
  2444  00007B                     checkAA@sorted:
  2445                           	opt stack 0
  2446  00007B                     checkC@sorted:
  2447                           	opt stack 0
  2448  00007B                     check9@sorted:
  2449                           	opt stack 0
  2450                           
  2451                           ; 2 bytes @ 0x7A
  2452  00007B                     	ds	1
  2453  00007C                     showInfo@stop:
  2454                           	opt stack 0
  2455                           
  2456                           ; 2 bytes @ 0x7B
  2457  00007C                     	ds	1
  2458  00007D                     
  2459                           ; 1 bytes @ 0x7C
  2460  00007D                     	ds	1
  2461  00007E                     keypressed@keypress:
  2462                           	opt stack 0
  2463                           
  2464                           ; 1 bytes @ 0x7D
  2465  00007E                     	ds	1
  2466                           tblptru	equ	0xFF8
  2467                           postinc0	equ	0xFEE
  2468                           wreg	equ	0xFE8
  2469                           
  2470 ;;
  2471 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2472 ;;
  2473 ;; *************** function _main *****************
  2474 ;; Defined at:
  2475 ;;		line 207 in file "main.c"
  2476 ;; Parameters:    Size  Location     Type
  2477 ;;  argc            2  109[BANK1 ] int 
  2478 ;;  argv            3  111[BANK1 ] PTR PTR unsigned char 
  2479 ;; Auto vars:     Size  Location     Type
  2480 ;;		None
  2481 ;; Return value:  Size  Location     Type
  2482 ;;                  2  109[BANK1 ] int 
  2483 ;; Registers used:
  2484 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2485 ;; Tracked objects:
  2486 ;;		On entry : 0/0
  2487 ;;		On exit  : 0/0
  2488 ;;		Unchanged: 0/0
  2489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2490 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2492 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2493 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2494 ;;Total ram usage:        7 bytes
  2495 ;; Hardware stack levels required when called:   13
  2496 ;; This function calls:
  2497 ;;		_initialize
  2498 ;;		_printf
  2499 ;;		_showRTC
  2500 ;; This function is called by:
  2501 ;;		Startup code after reset
  2502 ;; This function uses a non-reentrant model
  2503 ;;
  2504                           
  2505                           	psect	text0
  2506  004F6C                     __ptext0:
  2507                           	opt stack 0
  2508  004F6C                     _main:
  2509                           	opt stack 18
  2510                           
  2511                           ;main.c: 208: initialize();
  2512                           
  2513                           ; BSR set to: 0
  2514                           ;incstack = 0
  2515  004F6C  EC82  F025         	call	_initialize	;wreg free
  2516                           
  2517                           ;main.c: 210: printf((unsigned char *) "Welcome!          ");
  2518  004F70  0E0D               	movlw	low STR_18
  2519  004F72  0101               	movlb	1	; () banked
  2520  004F74  6F3F               	movwf	printf@f& (0+255),b
  2521  004F76  0EFF               	movlw	high STR_18
  2522  004F78  0101               	movlb	1	; () banked
  2523  004F7A  6F40               	movwf	(printf@f+1)& (0+255),b
  2524  004F7C  EC09  F000         	call	_printf	;wreg free
  2525                           
  2526                           ;main.c: 211: _delay((unsigned long)((700)*(8000000/4000.0)));
  2527  004F80  0E08               	movlw	8
  2528  004F82  0101               	movlb	1	; () banked
  2529  004F84  6F73               	movwf	(??_main+1)& (0+255),b
  2530  004F86  0E1B               	movlw	27
  2531  004F88  0101               	movlb	1	; () banked
  2532  004F8A  6F72               	movwf	??_main& (0+255),b
  2533  004F8C  0E27               	movlw	39
  2534  004F8E                     u8597:
  2535  004F8E  2EE8               	decfsz	wreg,f,c
  2536  004F90  D7FE               	bra	u8597
  2537  004F92  2F72               	decfsz	??_main& (0+255),f,b
  2538  004F94  D7FC               	bra	u8597
  2539  004F96  2F73               	decfsz	(??_main+1)& (0+255),f,b
  2540  004F98  D7FA               	bra	u8597
  2541                           
  2542                           ;main.c: 212: INT1IE = 1;
  2543  004F9A  86F0               	bsf	intcon3,3,c	;volatile
  2544                           
  2545                           ;main.c: 213: (INTCONbits.GIE = 1);
  2546  004F9C  8EF2               	bsf	intcon,7,c	;volatile
  2547                           
  2548                           ;main.c: 214: mode = 0;
  2549  004F9E  0E00               	movlw	0
  2550  004FA0  0100               	movlb	0	; () banked
  2551  004FA2  6FD7               	movwf	(_mode+1)& (0+255),b
  2552  004FA4  0E00               	movlw	0
  2553  004FA6  6FD6               	movwf	_mode& (0+255),b
  2554  004FA8                     l7933:
  2555  004FA8  EC3B  F024         	call	_showRTC	;wreg free
  2556  004FAC  D7FD               	goto	l7933
  2557  004FAE  00FF               	reset		;# 
  2558  004FB0                     __end_of_main:
  2559                           	opt stack 0
  2560                           tblptru	equ	0xFF8
  2561                           intcon	equ	0xFF2
  2562                           intcon3	equ	0xFF0
  2563                           postinc0	equ	0xFEE
  2564                           wreg	equ	0xFE8
  2565                           
  2566 ;; *************** function _showRTC *****************
  2567 ;; Defined at:
  2568 ;;		line 152 in file "main.c"
  2569 ;; Parameters:    Size  Location     Type
  2570 ;;		None
  2571 ;; Auto vars:     Size  Location     Type
  2572 ;;		None
  2573 ;; Return value:  Size  Location     Type
  2574 ;;                  1    wreg      void 
  2575 ;; Registers used:
  2576 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2577 ;; Tracked objects:
  2578 ;;		On entry : 0/0
  2579 ;;		On exit  : 0/0
  2580 ;;		Unchanged: 0/0
  2581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2584 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2585 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2586 ;;Total ram usage:        2 bytes
  2587 ;; Hardware stack levels used:    1
  2588 ;; Hardware stack levels required when called:   12
  2589 ;; This function calls:
  2590 ;;		___lcd_newline
  2591 ;;		_getTime
  2592 ;;		_lcdInst
  2593 ;;		_printf
  2594 ;; This function is called by:
  2595 ;;		_main
  2596 ;; This function uses a non-reentrant model
  2597 ;;
  2598                           
  2599                           	psect	text1
  2600  004876                     __ptext1:
  2601                           	opt stack 0
  2602  004876                     _showRTC:
  2603                           	opt stack 18
  2604                           
  2605                           ;main.c: 153: getTime(time);
  2606                           
  2607                           ;incstack = 0
  2608  004876  0ED9               	movlw	low _time
  2609  004878  0101               	movlb	1	; () banked
  2610  00487A  6F03               	movwf	getTime@time& (0+255),b
  2611  00487C  0E00               	movlw	high _time
  2612  00487E  0101               	movlb	1	; () banked
  2613  004880  6F04               	movwf	(getTime@time+1)& (0+255),b
  2614  004882  ECF6  F023         	call	_getTime	;wreg free
  2615                           
  2616                           ;main.c: 154: lcdInst(0b10000000);;
  2617  004886  0E80               	movlw	128
  2618  004888  EC7E  F029         	call	_lcdInst
  2619                           
  2620                           ;main.c: 155: printf("%02x/%02x/%02x         ", time[6], time[5], time[4]);
  2621  00488C  0E0B               	movlw	low STR_16
  2622  00488E  0101               	movlb	1	; () banked
  2623  004890  6F3F               	movwf	printf@f& (0+255),b
  2624  004892  0EFD               	movlw	high STR_16
  2625  004894  0101               	movlb	1	; () banked
  2626  004896  6F40               	movwf	(printf@f+1)& (0+255),b
  2627  004898  C0DF  F141         	movff	_time+6,?_printf+2
  2628  00489C  0101               	movlb	1	; () banked
  2629  00489E  6B42               	clrf	(?_printf+3)& (0+255),b
  2630  0048A0  C0DE  F143         	movff	_time+5,?_printf+4
  2631  0048A4  0101               	movlb	1	; () banked
  2632  0048A6  6B44               	clrf	(?_printf+5)& (0+255),b
  2633  0048A8  C0DD  F145         	movff	_time+4,?_printf+6
  2634  0048AC  0101               	movlb	1	; () banked
  2635  0048AE  6B46               	clrf	(?_printf+7)& (0+255),b
  2636  0048B0  EC09  F000         	call	_printf	;wreg free
  2637                           
  2638                           ;main.c: 156: __lcd_newline();
  2639  0048B4  ECA4  F029         	call	___lcd_newline	;wreg free
  2640                           
  2641                           ;main.c: 157: printf("%02x:%02x:%02x         ", time[2], time[1], time[0]);
  2642  0048B8  0E23               	movlw	low STR_17
  2643  0048BA  0101               	movlb	1	; () banked
  2644  0048BC  6F3F               	movwf	printf@f& (0+255),b
  2645  0048BE  0EFD               	movlw	high STR_17
  2646  0048C0  0101               	movlb	1	; () banked
  2647  0048C2  6F40               	movwf	(printf@f+1)& (0+255),b
  2648  0048C4  C0DB  F141         	movff	_time+2,?_printf+2
  2649  0048C8  0101               	movlb	1	; () banked
  2650  0048CA  6B42               	clrf	(?_printf+3)& (0+255),b
  2651  0048CC  C0DA  F143         	movff	_time+1,?_printf+4
  2652  0048D0  0101               	movlb	1	; () banked
  2653  0048D2  6B44               	clrf	(?_printf+5)& (0+255),b
  2654  0048D4  C0D9  F145         	movff	_time,?_printf+6
  2655  0048D8  0101               	movlb	1	; () banked
  2656  0048DA  6B46               	clrf	(?_printf+7)& (0+255),b
  2657  0048DC  EC09  F000         	call	_printf	;wreg free
  2658                           
  2659                           ;main.c: 158: _delay((unsigned long)((250)*(8000000/4000.0)));
  2660  0048E0  0E03               	movlw	3
  2661  0048E2  0101               	movlb	1	; () banked
  2662  0048E4  6F6C               	movwf	(??_showRTC+1)& (0+255),b
  2663  0048E6  0E8A               	movlw	138
  2664  0048E8  0101               	movlb	1	; () banked
  2665  0048EA  6F6B               	movwf	??_showRTC& (0+255),b
  2666  0048EC  0E55               	movlw	85
  2667  0048EE                     u8607:
  2668  0048EE  2EE8               	decfsz	wreg,f,c
  2669  0048F0  D7FE               	bra	u8607
  2670  0048F2  2F6B               	decfsz	??_showRTC& (0+255),f,b
  2671  0048F4  D7FC               	bra	u8607
  2672  0048F6  2F6C               	decfsz	(??_showRTC+1)& (0+255),f,b
  2673  0048F8  D7FA               	bra	u8607
  2674  0048FA  D000               	nop2	
  2675  0048FC  0012               	return		;funcret
  2676  0048FE                     __end_of_showRTC:
  2677                           	opt stack 0
  2678                           tblptru	equ	0xFF8
  2679                           intcon	equ	0xFF2
  2680                           intcon3	equ	0xFF0
  2681                           postinc0	equ	0xFEE
  2682                           wreg	equ	0xFE8
  2683                           
  2684 ;; *************** function _printf *****************
  2685 ;; Defined at:
  2686 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  2687 ;; Parameters:    Size  Location     Type
  2688 ;;  f               2   63[BANK1 ] PTR const unsigned char 
  2689 ;;		 -> STR_51(12), STR_50(11), STR_49(16), STR_48(23), 
  2690 ;;		 -> STR_47(21), STR_46(14), STR_45(15), STR_44(22), 
  2691 ;;		 -> STR_43(20), STR_42(13), STR_41(16), STR_40(23), 
  2692 ;;		 -> STR_39(21), STR_38(14), STR_37(18), STR_36(18), 
  2693 ;;		 -> STR_35(20), STR_34(20), STR_33(17), STR_32(16), 
  2694 ;;		 -> STR_31(21), STR_30(16), STR_29(21), STR_28(16), 
  2695 ;;		 -> STR_27(20), STR_26(16), STR_25(21), STR_24(23), 
  2696 ;;		 -> STR_23(24), STR_22(21), STR_21(24), STR_20(24), 
  2697 ;;		 -> STR_19(25), STR_18(19), STR_17(24), STR_16(24), 
  2698 ;;		 -> STR_15(27), STR_14(17), STR_13(21), STR_12(21), 
  2699 ;;		 -> STR_11(21), STR_10(21), STR_9(20), STR_8(21), 
  2700 ;;		 -> STR_7(21), STR_6(20), STR_5(22), STR_4(22), 
  2701 ;;		 -> STR_3(21), STR_2(24), STR_1(9), 
  2702 ;; Auto vars:     Size  Location     Type
  2703 ;;  idx             1   80[BANK1 ] unsigned char 
  2704 ;;  val             4   95[BANK1 ] unsigned long 
  2705 ;;  tmpval          4   89[BANK1 ] struct .
  2706 ;;  fval            3  101[BANK1 ] struct .
  2707 ;;  width           2  104[BANK1 ] int 
  2708 ;;  flag            2   99[BANK1 ] unsigned short 
  2709 ;;  exp             2   93[BANK1 ] int 
  2710 ;;  prec            2   87[BANK1 ] int 
  2711 ;;  ap              2   85[BANK1 ] PTR void [1]
  2712 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2713 ;;  len             2   83[BANK1 ] unsigned int 
  2714 ;;  cp              2   81[BANK1 ] PTR const unsigned char 
  2715 ;;		 -> printf@c(1), 
  2716 ;;  c               1  106[BANK1 ] char 
  2717 ;;  d               1    0        unsigned char 
  2718 ;; Return value:  Size  Location     Type
  2719 ;;                  2   63[BANK1 ] int 
  2720 ;; Registers used:
  2721 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2722 ;; Tracked objects:
  2723 ;;		On entry : 0/0
  2724 ;;		On exit  : 0/0
  2725 ;;		Unchanged: 0/0
  2726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2727 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2728 ;;      Locals:         0       0      30       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2729 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2730 ;;      Totals:         0       0      44       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2731 ;;Total ram usage:       44 bytes
  2732 ;; Hardware stack levels used:    1
  2733 ;; Hardware stack levels required when called:   11
  2734 ;; This function calls:
  2735 ;;		___awdiv
  2736 ;;		___ftadd
  2737 ;;		___ftge
  2738 ;;		___ftmul
  2739 ;;		___ftneg
  2740 ;;		___ftsub
  2741 ;;		___fttol
  2742 ;;		___lldiv
  2743 ;;		___llmod
  2744 ;;		___lltoft
  2745 ;;		___wmul
  2746 ;;		__div_to_l_
  2747 ;;		__tdiv_to_l_
  2748 ;;		_fround
  2749 ;;		_isdigit
  2750 ;;		_putch
  2751 ;;		_scale
  2752 ;; This function is called by:
  2753 ;;		_showRTC
  2754 ;;		_main
  2755 ;;		_mainloop
  2756 ;; This function uses a non-reentrant model
  2757 ;;
  2758                           
  2759                           	psect	text2
  2760  000012                     __ptext2:
  2761                           	opt stack 0
  2762  000012                     _printf:
  2763                           	opt stack 18
  2764                           
  2765                           ;doprnt.c: 466: va_list ap;
  2766                           ;doprnt.c: 499: signed char c;
  2767                           ;doprnt.c: 501: int width;
  2768                           ;doprnt.c: 504: int prec;
  2769                           ;doprnt.c: 508: unsigned short flag;
  2770                           ;doprnt.c: 515: char d;
  2771                           ;doprnt.c: 516: double fval;
  2772                           ;doprnt.c: 517: int exp;
  2773                           ;doprnt.c: 523: union {
  2774                           ;doprnt.c: 524: unsigned long vd;
  2775                           ;doprnt.c: 525: double integ;
  2776                           ;doprnt.c: 526: } tmpval;
  2777                           ;doprnt.c: 528: unsigned long val;
  2778                           ;doprnt.c: 529: unsigned len;
  2779                           ;doprnt.c: 530: const char * cp;
  2780                           ;doprnt.c: 533: *ap = __va_start();
  2781                           
  2782                           ;incstack = 0
  2783  000012  0E41               	movlw	low (?_printf+2)
  2784  000014  0101               	movlb	1	; () banked
  2785  000016  6F55               	movwf	printf@ap& (0+255),b
  2786  000018  0E01               	movlw	high (?_printf+2)
  2787  00001A  0101               	movlb	1	; () banked
  2788  00001C  6F56               	movwf	(printf@ap+1)& (0+255),b
  2789                           
  2790                           ;doprnt.c: 536: while(c = *f++) {
  2791  00001E  EF38  F006         	goto	l7863
  2792  000022                     l7553:
  2793                           
  2794                           ; BSR set to: 1
  2795                           ;doprnt.c: 538: if(c != '%')
  2796  000022  0E25               	movlw	37
  2797  000024  0101               	movlb	1	; () banked
  2798  000026  196A               	xorwf	printf@c& (0+255),w,b
  2799  000028  B4D8               	btfsc	status,2,c
  2800  00002A  D006               	goto	l7557
  2801                           
  2802                           ; BSR set to: 1
  2803                           ;doprnt.c: 540: {
  2804                           ;doprnt.c: 541: (putch(c) );
  2805  00002C  0101               	movlb	1	; () banked
  2806  00002E  516A               	movf	printf@c& (0+255),w,b
  2807  000030  EC76  F029         	call	_putch
  2808                           
  2809                           ;doprnt.c: 542: continue;
  2810  000034  EF38  F006         	goto	l7863
  2811  000038                     l7557:
  2812                           
  2813                           ;doprnt.c: 543: }
  2814                           ;doprnt.c: 546: width = 0;
  2815  000038  0E00               	movlw	0
  2816  00003A  0101               	movlb	1	; () banked
  2817  00003C  6F69               	movwf	(printf@width+1)& (0+255),b
  2818  00003E  0E00               	movlw	0
  2819  000040  6F68               	movwf	printf@width& (0+255),b
  2820                           
  2821                           ;doprnt.c: 548: flag = 0;
  2822  000042  0E00               	movlw	0
  2823  000044  0101               	movlb	1	; () banked
  2824  000046  6F64               	movwf	(printf@flag+1)& (0+255),b
  2825  000048  0E00               	movlw	0
  2826  00004A  6F63               	movwf	printf@flag& (0+255),b
  2827                           
  2828                           ; BSR set to: 1
  2829                           ;doprnt.c: 551: switch(*f) {
  2830                           
  2831                           ;doprnt.c: 550: for(;;) {
  2832  00004C  D005               	goto	l7563
  2833  00004E                     l7559:
  2834                           
  2835                           ;doprnt.c: 580: flag |= 0x04;
  2836  00004E  0101               	movlb	1	; () banked
  2837  000050  8563               	bsf	printf@flag& (0+255),2,b
  2838                           
  2839                           ;doprnt.c: 581: f++;
  2840  000052  0101               	movlb	1	; () banked
  2841  000054  4B3F               	infsnz	printf@f& (0+255),f,b
  2842  000056  2B40               	incf	(printf@f+1)& (0+255),f,b
  2843  000058                     l7563:
  2844  000058  C13F  FFF6         	movff	printf@f,tblptrl
  2845  00005C  C140  FFF7         	movff	printf@f+1,tblptrh
  2846  000060                     	if	0	;tblptru may be non-zero
  2847  000060                     	endif
  2848  000060                     	if	0	;tblptru may be non-zero
  2849  000060                     	endif
  2850  000060  0008               	tblrd		*
  2851  000062  50F5               	movf	tablat,w,c
  2852                           
  2853                           ; Switch size 1, requested type "space"
  2854                           ; Number of cases is 1, Range of values is 48 to 48
  2855                           ; switch strategies available:
  2856                           ; Name         Instructions Cycles
  2857                           ; simple_byte            4     3 (average)
  2858                           ;	Chosen strategy is simple_byte
  2859  000064  0A30               	xorlw	48	; case 48
  2860  000066  B4D8               	btfsc	status,2,c
  2861  000068  D7F2               	goto	l7559
  2862                           
  2863                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2864                           
  2865                           ;doprnt.c: 586: }
  2866                           
  2867                           ;doprnt.c: 585: break;
  2868  00006A  C13F  FFF6         	movff	printf@f,tblptrl
  2869  00006E  C140  FFF7         	movff	printf@f+1,tblptrh
  2870  000072                     	if	0	;tblptru may be non-zero
  2871  000072                     	endif
  2872  000072                     	if	0	;tblptru may be non-zero
  2873  000072                     	endif
  2874  000072  0008               	tblrd		*
  2875  000074  50F5               	movf	tablat,w,c
  2876  000076  EC8D  F028         	call	_isdigit
  2877  00007A  A0D8               	btfss	status,0,c
  2878  00007C  D096               	goto	l7605
  2879                           
  2880                           ;doprnt.c: 598: width = 0;
  2881  00007E  0E00               	movlw	0
  2882  000080  0101               	movlb	1	; () banked
  2883  000082  6F69               	movwf	(printf@width+1)& (0+255),b
  2884  000084  0E00               	movlw	0
  2885  000086  6F68               	movwf	printf@width& (0+255),b
  2886  000088                     l7569:
  2887                           
  2888                           ;doprnt.c: 600: width *= 10;
  2889  000088  C168  F10E         	movff	printf@width,___wmul@multiplier
  2890  00008C  C169  F10F         	movff	printf@width+1,___wmul@multiplier+1
  2891  000090  0E00               	movlw	0
  2892  000092  0101               	movlb	1	; () banked
  2893  000094  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2894  000096  0E0A               	movlw	10
  2895  000098  6F10               	movwf	___wmul@multiplicand& (0+255),b
  2896  00009A  EC14  F028         	call	___wmul	;wreg free
  2897  00009E  C10E  F168         	movff	?___wmul,printf@width
  2898  0000A2  C10F  F169         	movff	?___wmul+1,printf@width+1
  2899                           
  2900                           ;doprnt.c: 601: width += *f++ - '0';
  2901  0000A6  0ED0               	movlw	208
  2902  0000A8  0101               	movlb	1	; () banked
  2903  0000AA  6F47               	movwf	??_printf& (0+255),b
  2904  0000AC  0EFF               	movlw	255
  2905  0000AE  0101               	movlb	1	; () banked
  2906  0000B0  6F48               	movwf	(??_printf+1)& (0+255),b
  2907  0000B2  C13F  FFF6         	movff	printf@f,tblptrl
  2908  0000B6  C140  FFF7         	movff	printf@f+1,tblptrh
  2909  0000BA                     	if	0	;tblptru may be non-zero
  2910  0000BA                     	endif
  2911  0000BA                     	if	0	;tblptru may be non-zero
  2912  0000BA                     	endif
  2913  0000BA  0008               	tblrd		*
  2914  0000BC  50F5               	movf	tablat,w,c
  2915  0000BE  0101               	movlb	1	; () banked
  2916  0000C0  6F49               	movwf	(??_printf+2)& (0+255),b
  2917  0000C2  6B4A               	clrf	(??_printf+3)& (0+255),b
  2918  0000C4  0101               	movlb	1	; () banked
  2919  0000C6  5147               	movf	??_printf& (0+255),w,b
  2920  0000C8  0101               	movlb	1	; () banked
  2921  0000CA  2749               	addwf	(??_printf+2)& (0+255),f,b
  2922  0000CC  0101               	movlb	1	; () banked
  2923  0000CE  5148               	movf	(??_printf+1)& (0+255),w,b
  2924  0000D0  0101               	movlb	1	; () banked
  2925  0000D2  234A               	addwfc	(??_printf+3)& (0+255),f,b
  2926  0000D4  0101               	movlb	1	; () banked
  2927  0000D6  5149               	movf	(??_printf+2)& (0+255),w,b
  2928  0000D8  0101               	movlb	1	; () banked
  2929  0000DA  2768               	addwf	printf@width& (0+255),f,b
  2930  0000DC  0101               	movlb	1	; () banked
  2931  0000DE  514A               	movf	(??_printf+3)& (0+255),w,b
  2932  0000E0  0101               	movlb	1	; () banked
  2933  0000E2  2369               	addwfc	(printf@width+1)& (0+255),f,b
  2934                           
  2935                           ; BSR set to: 1
  2936  0000E4  0101               	movlb	1	; () banked
  2937  0000E6  4B3F               	infsnz	printf@f& (0+255),f,b
  2938  0000E8  2B40               	incf	(printf@f+1)& (0+255),f,b
  2939                           
  2940                           ; BSR set to: 1
  2941                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2942  0000EA  C13F  FFF6         	movff	printf@f,tblptrl
  2943  0000EE  C140  FFF7         	movff	printf@f+1,tblptrh
  2944  0000F2                     	if	0	;tblptru may be non-zero
  2945  0000F2                     	endif
  2946  0000F2                     	if	0	;tblptru may be non-zero
  2947  0000F2                     	endif
  2948  0000F2  0008               	tblrd		*
  2949  0000F4  50F5               	movf	tablat,w,c
  2950  0000F6  EC8D  F028         	call	_isdigit
  2951  0000FA  A0D8               	btfss	status,0,c
  2952  0000FC  D056               	goto	l7605
  2953  0000FE  D7C4               	goto	l7569
  2954  000100                     l7577:
  2955                           
  2956                           ;doprnt.c: 663: flag |= 0x400;
  2957  000100  0101               	movlb	1	; () banked
  2958  000102  8564               	bsf	(printf@flag+1)& (0+255),2,b
  2959                           
  2960                           ; BSR set to: 1
  2961                           ;doprnt.c: 698: case 'i':
  2962                           ;doprnt.c: 699: break;
  2963                           
  2964                           ; BSR set to: 1
  2965                           
  2966                           ;doprnt.c: 697: case 'd':
  2967                           
  2968                           ;doprnt.c: 664: break;
  2969  000104  D071               	goto	l7607
  2970  000106                     l7579:
  2971                           
  2972                           ; BSR set to: 1
  2973                           ;doprnt.c: 721: flag |= 0x80;
  2974  000106  0101               	movlb	1	; () banked
  2975  000108  8F63               	bsf	printf@flag& (0+255),7,b
  2976                           
  2977                           ;doprnt.c: 723: break;
  2978  00010A  D06E               	goto	l7607
  2979  00010C                     l7581:
  2980                           
  2981                           ; BSR set to: 1
  2982                           ;doprnt.c: 757: if(width > len)
  2983  00010C  0101               	movlb	1	; () banked
  2984  00010E  5168               	movf	printf@width& (0+255),w,b
  2985  000110  0101               	movlb	1	; () banked
  2986  000112  5D53               	subwf	printf@len& (0+255),w,b
  2987  000114  0101               	movlb	1	; () banked
  2988  000116  5169               	movf	(printf@width+1)& (0+255),w,b
  2989  000118  0101               	movlb	1	; () banked
  2990  00011A  5954               	subwfb	(printf@len+1)& (0+255),w,b
  2991  00011C  B0D8               	btfsc	status,0,c
  2992  00011E  D009               	goto	l7585
  2993                           
  2994                           ; BSR set to: 1
  2995                           ;doprnt.c: 758: width -= len;
  2996  000120  0101               	movlb	1	; () banked
  2997  000122  5153               	movf	printf@len& (0+255),w,b
  2998  000124  0101               	movlb	1	; () banked
  2999  000126  5F68               	subwf	printf@width& (0+255),f,b
  3000  000128  0101               	movlb	1	; () banked
  3001  00012A  5154               	movf	(printf@len+1)& (0+255),w,b
  3002  00012C  0101               	movlb	1	; () banked
  3003  00012E  5B69               	subwfb	(printf@width+1)& (0+255),f,b
  3004  000130  D009               	goto	l7589
  3005  000132                     l7585:
  3006                           
  3007                           ; BSR set to: 1
  3008                           ;doprnt.c: 759: else
  3009                           ;doprnt.c: 760: width = 0;
  3010  000132  0E00               	movlw	0
  3011  000134  0101               	movlb	1	; () banked
  3012  000136  6F69               	movwf	(printf@width+1)& (0+255),b
  3013  000138  0E00               	movlw	0
  3014  00013A  6F68               	movwf	printf@width& (0+255),b
  3015                           
  3016                           ; BSR set to: 1
  3017                           ;doprnt.c: 764: while(width--)
  3018  00013C  D003               	goto	l7589
  3019  00013E                     l7587:
  3020                           
  3021                           ; BSR set to: 1
  3022                           ;doprnt.c: 765: (putch(' ') );
  3023  00013E  0E20               	movlw	32
  3024  000140  EC76  F029         	call	_putch
  3025  000144                     l7589:
  3026  000144  0101               	movlb	1	; () banked
  3027  000146  0768               	decf	printf@width& (0+255),f,b
  3028  000148  A0D8               	btfss	status,0,c
  3029  00014A  0769               	decf	(printf@width+1)& (0+255),f,b
  3030  00014C  0101               	movlb	1	; () banked
  3031  00014E  2968               	incf	printf@width& (0+255),w,b
  3032  000150  E1F6               	bnz	l7587
  3033  000152  0101               	movlb	1	; () banked
  3034  000154  2969               	incf	(printf@width+1)& (0+255),w,b
  3035  000156  B4D8               	btfsc	status,2,c
  3036  000158  D00B               	goto	l7595
  3037  00015A  D7F1               	goto	l7587
  3038  00015C                     l7591:
  3039                           
  3040                           ; BSR set to: 1
  3041                           ;doprnt.c: 768: (putch(*cp++) );
  3042  00015C  C151  FFD9         	movff	printf@cp,fsr2l
  3043  000160  C152  FFDA         	movff	printf@cp+1,fsr2h
  3044  000164  50DF               	movf	indf2,w,c
  3045  000166  EC76  F029         	call	_putch
  3046  00016A  0101               	movlb	1	; () banked
  3047  00016C  4B51               	infsnz	printf@cp& (0+255),f,b
  3048  00016E  2B52               	incf	(printf@cp+1)& (0+255),f,b
  3049  000170                     l7595:
  3050                           
  3051                           ; BSR set to: 1
  3052  000170  0101               	movlb	1	; () banked
  3053  000172  0753               	decf	printf@len& (0+255),f,b
  3054  000174  A0D8               	btfss	status,0,c
  3055  000176  0754               	decf	(printf@len+1)& (0+255),f,b
  3056  000178  0101               	movlb	1	; () banked
  3057  00017A  2953               	incf	printf@len& (0+255),w,b
  3058  00017C  E1EF               	bnz	l7591
  3059  00017E  0101               	movlb	1	; () banked
  3060  000180  2954               	incf	(printf@len+1)& (0+255),w,b
  3061  000182  B4D8               	btfsc	status,2,c
  3062  000184  EF38  F006         	goto	l7863
  3063  000188  D7E9               	goto	l7591
  3064  00018A                     l7597:
  3065                           
  3066                           ; BSR set to: 1
  3067                           ;doprnt.c: 805: cp = (char *)&c;
  3068  00018A  0E6A               	movlw	low printf@c
  3069  00018C  0101               	movlb	1	; () banked
  3070  00018E  6F51               	movwf	printf@cp& (0+255),b
  3071  000190  0E01               	movlw	high printf@c
  3072  000192  0101               	movlb	1	; () banked
  3073  000194  6F52               	movwf	(printf@cp+1)& (0+255),b
  3074                           
  3075                           ; BSR set to: 1
  3076                           ;doprnt.c: 806: len = 1;
  3077  000196  0E00               	movlw	0
  3078  000198  0101               	movlb	1	; () banked
  3079  00019A  6F54               	movwf	(printf@len+1)& (0+255),b
  3080  00019C  0E01               	movlw	1
  3081  00019E  6F53               	movwf	printf@len& (0+255),b
  3082                           
  3083                           ;doprnt.c: 807: goto dostring;
  3084  0001A0  D7B5               	goto	l7581
  3085  0001A2                     l7601:
  3086                           
  3087                           ; BSR set to: 1
  3088                           ;doprnt.c: 818: flag |= 0xC0;
  3089  0001A2  0EC0               	movlw	192
  3090  0001A4  0101               	movlb	1	; () banked
  3091  0001A6  1363               	iorwf	printf@flag& (0+255),f,b
  3092                           
  3093                           ; BSR set to: 1
  3094                           ;doprnt.c: 822: }
  3095                           
  3096                           ;doprnt.c: 819: break;
  3097  0001A8  D01F               	goto	l7607
  3098  0001AA                     l7605:
  3099  0001AA  C13F  FFF6         	movff	printf@f,tblptrl
  3100  0001AE  C140  FFF7         	movff	printf@f+1,tblptrh
  3101  0001B2  0101               	movlb	1	; () banked
  3102  0001B4  4B3F               	infsnz	printf@f& (0+255),f,b
  3103  0001B6  2B40               	incf	(printf@f+1)& (0+255),f,b
  3104  0001B8                     	if	0	;tblptru may be non-zero
  3105  0001B8                     	endif
  3106  0001B8                     	if	0	;tblptru may be non-zero
  3107  0001B8                     	endif
  3108  0001B8  0008               	tblrd		*
  3109  0001BA  CFF5 F16A          	movff	tablat,printf@c
  3110  0001BE  0101               	movlb	1	; () banked
  3111  0001C0  516A               	movf	printf@c& (0+255),w,b
  3112                           
  3113                           ; Switch size 1, requested type "space"
  3114                           ; Number of cases is 6, Range of values is 0 to 120
  3115                           ; switch strategies available:
  3116                           ; Name         Instructions Cycles
  3117                           ; simple_byte           19    10 (average)
  3118                           ;	Chosen strategy is simple_byte
  3119  0001C2  0A00               	xorlw	0	; case 0
  3120  0001C4  B4D8               	btfsc	status,2,c
  3121  0001C6  0012               	return	
  3122  0001C8  0A64               	xorlw	100	; case 100
  3123  0001CA  B4D8               	btfsc	status,2,c
  3124  0001CC  D00D               	goto	l7607
  3125  0001CE  0A02               	xorlw	2	; case 102
  3126  0001D0  B4D8               	btfsc	status,2,c
  3127  0001D2  D796               	goto	l7577
  3128  0001D4  0A0F               	xorlw	15	; case 105
  3129  0001D6  B4D8               	btfsc	status,2,c
  3130  0001D8  D007               	goto	l7607
  3131  0001DA  0A1C               	xorlw	28	; case 117
  3132  0001DC  B4D8               	btfsc	status,2,c
  3133  0001DE  D7E1               	goto	l7601
  3134  0001E0  0A0D               	xorlw	13	; case 120
  3135  0001E2  B4D8               	btfsc	status,2,c
  3136  0001E4  D790               	goto	l7579
  3137  0001E6  D7D1               	goto	l7597
  3138  0001E8                     l7607:
  3139                           
  3140                           ; BSR set to: 1
  3141                           ;doprnt.c: 825: if(flag & (0x700)) {
  3142  0001E8  0E07               	movlw	7
  3143  0001EA  0101               	movlb	1	; () banked
  3144  0001EC  1564               	andwf	(printf@flag+1)& (0+255),w,b
  3145  0001EE  B4D8               	btfsc	status,2,c
  3146  0001F0  D37A               	goto	l7765
  3147                           
  3148                           ; BSR set to: 1
  3149                           ;doprnt.c: 829: prec = 6;
  3150  0001F2  0E00               	movlw	0
  3151  0001F4  0101               	movlb	1	; () banked
  3152  0001F6  6F58               	movwf	(printf@prec+1)& (0+255),b
  3153  0001F8  0E06               	movlw	6
  3154  0001FA  6F57               	movwf	printf@prec& (0+255),b
  3155                           
  3156                           ; BSR set to: 1
  3157                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3158  0001FC  C155  FFD9         	movff	printf@ap,fsr2l
  3159  000200  C156  FFDA         	movff	printf@ap+1,fsr2h
  3160  000204  CFDE F165          	movff	postinc2,printf@fval
  3161  000208  CFDE F166          	movff	postinc2,printf@fval+1
  3162  00020C  CFDD F167          	movff	postdec2,printf@fval+2
  3163                           
  3164                           ; BSR set to: 1
  3165  000210  0E03               	movlw	3
  3166  000212  0101               	movlb	1	; () banked
  3167  000214  2755               	addwf	printf@ap& (0+255),f,b
  3168  000216  0E00               	movlw	0
  3169  000218  2356               	addwfc	(printf@ap+1)& (0+255),f,b
  3170                           
  3171                           ; BSR set to: 1
  3172                           ;doprnt.c: 831: if(fval < 0.0) {
  3173  00021A  0101               	movlb	1	; () banked
  3174  00021C  AF67               	btfss	(printf@fval+2)& (0+255),7,b
  3175  00021E  D011               	goto	l7621
  3176                           
  3177                           ; BSR set to: 1
  3178                           ;doprnt.c: 832: fval = -fval;
  3179  000220  C165  F100         	movff	printf@fval,___ftneg@f1
  3180  000224  C166  F101         	movff	printf@fval+1,___ftneg@f1+1
  3181  000228  C167  F102         	movff	printf@fval+2,___ftneg@f1+2
  3182  00022C  EC2F  F028         	call	___ftneg	;wreg free
  3183  000230  C100  F165         	movff	?___ftneg,printf@fval
  3184  000234  C101  F166         	movff	?___ftneg+1,printf@fval+1
  3185  000238  C102  F167         	movff	?___ftneg+2,printf@fval+2
  3186                           
  3187                           ;doprnt.c: 833: flag |= 0x03;
  3188  00023C  0E03               	movlw	3
  3189  00023E  0101               	movlb	1	; () banked
  3190  000240  1363               	iorwf	printf@flag& (0+255),f,b
  3191  000242                     l7621:
  3192                           
  3193                           ; BSR set to: 1
  3194                           ;doprnt.c: 834: }
  3195                           ;doprnt.c: 835: exp = 0;
  3196  000242  0E00               	movlw	0
  3197  000244  0101               	movlb	1	; () banked
  3198  000246  6F5E               	movwf	(printf@exp+1)& (0+255),b
  3199  000248  0E00               	movlw	0
  3200  00024A  6F5D               	movwf	printf@exp& (0+255),b
  3201                           
  3202                           ; BSR set to: 1
  3203                           ;doprnt.c: 836: if( fval!=0) {
  3204  00024C  0101               	movlb	1	; () banked
  3205  00024E  5165               	movf	printf@fval& (0+255),w,b
  3206  000250  0101               	movlb	1	; () banked
  3207  000252  1166               	iorwf	(printf@fval+1)& (0+255),w,b
  3208  000254  0101               	movlb	1	; () banked
  3209  000256  1167               	iorwf	(printf@fval+2)& (0+255),w,b
  3210  000258  B4D8               	btfsc	status,2,c
  3211  00025A  D09B               	goto	l7649
  3212                           
  3213                           ; BSR set to: 1
  3214                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3215  00025C  0E82               	movlw	130
  3216  00025E  0101               	movlb	1	; () banked
  3217  000260  6F47               	movwf	??_printf& (0+255),b
  3218  000262  0EFF               	movlw	255
  3219  000264  0101               	movlb	1	; () banked
  3220  000266  6F48               	movwf	(??_printf+1)& (0+255),b
  3221  000268  C165  F149         	movff	printf@fval,??_printf+2
  3222  00026C  C166  F14A         	movff	printf@fval+1,??_printf+3
  3223  000270  C167  F14B         	movff	printf@fval+2,??_printf+4
  3224  000274  C168  F14C         	movff	printf@fval+3,??_printf+5
  3225  000278  0E10               	movlw	16
  3226  00027A  D006               	goto	u8110
  3227  00027C                     u8115:
  3228  00027C  0101               	movlb	1	; () banked
  3229  00027E  90D8               	bcf	status,0,c
  3230  000280  334C               	rrcf	(??_printf+5)& (0+255),f,b
  3231  000282  334B               	rrcf	(??_printf+4)& (0+255),f,b
  3232  000284  334A               	rrcf	(??_printf+3)& (0+255),f,b
  3233  000286  3349               	rrcf	(??_printf+2)& (0+255),f,b
  3234  000288                     u8110:
  3235  000288  2EE8               	decfsz	wreg,f,c
  3236  00028A  D7F8               	goto	u8115
  3237  00028C  0101               	movlb	1	; () banked
  3238  00028E  5149               	movf	(??_printf+2)& (0+255),w,b
  3239  000290  0101               	movlb	1	; () banked
  3240  000292  2547               	addwf	??_printf& (0+255),w,b
  3241  000294  0101               	movlb	1	; () banked
  3242  000296  6F5D               	movwf	printf@exp& (0+255),b
  3243  000298  0E00               	movlw	0
  3244  00029A  0101               	movlb	1	; () banked
  3245  00029C  2148               	addwfc	(??_printf+1)& (0+255),w,b
  3246  00029E  0101               	movlb	1	; () banked
  3247  0002A0  6F5E               	movwf	(printf@exp+1)& (0+255),b
  3248                           
  3249                           ; BSR set to: 1
  3250                           ;doprnt.c: 838: exp--;
  3251  0002A2  0101               	movlb	1	; () banked
  3252  0002A4  075D               	decf	printf@exp& (0+255),f,b
  3253  0002A6  A0D8               	btfss	status,0,c
  3254  0002A8  075E               	decf	(printf@exp+1)& (0+255),f,b
  3255                           
  3256                           ; BSR set to: 1
  3257                           ;doprnt.c: 839: exp *= 3;
  3258  0002AA  C15D  F10E         	movff	printf@exp,___wmul@multiplier
  3259  0002AE  C15E  F10F         	movff	printf@exp+1,___wmul@multiplier+1
  3260  0002B2  0E00               	movlw	0
  3261  0002B4  0101               	movlb	1	; () banked
  3262  0002B6  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3263  0002B8  0E03               	movlw	3
  3264  0002BA  6F10               	movwf	___wmul@multiplicand& (0+255),b
  3265  0002BC  EC14  F028         	call	___wmul	;wreg free
  3266  0002C0  C10E  F15D         	movff	?___wmul,printf@exp
  3267  0002C4  C10F  F15E         	movff	?___wmul+1,printf@exp+1
  3268                           
  3269                           ;doprnt.c: 840: exp /= 10;
  3270  0002C8  C15D  F106         	movff	printf@exp,___awdiv@dividend
  3271  0002CC  C15E  F107         	movff	printf@exp+1,___awdiv@dividend+1
  3272  0002D0  0E00               	movlw	0
  3273  0002D2  0101               	movlb	1	; () banked
  3274  0002D4  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  3275  0002D6  0E0A               	movlw	10
  3276  0002D8  6F08               	movwf	___awdiv@divisor& (0+255),b
  3277  0002DA  ECFC  F021         	call	___awdiv	;wreg free
  3278  0002DE  C106  F15D         	movff	?___awdiv,printf@exp
  3279  0002E2  C107  F15E         	movff	?___awdiv+1,printf@exp+1
  3280                           
  3281                           ;doprnt.c: 841: if(exp < 0)
  3282  0002E6  0101               	movlb	1	; () banked
  3283  0002E8  AF5E               	btfss	(printf@exp+1)& (0+255),7,b
  3284  0002EA  D004               	goto	l7637
  3285                           
  3286                           ; BSR set to: 1
  3287                           ;doprnt.c: 842: exp--;
  3288  0002EC  0101               	movlb	1	; () banked
  3289  0002EE  075D               	decf	printf@exp& (0+255),f,b
  3290  0002F0  A0D8               	btfss	status,0,c
  3291  0002F2  075E               	decf	(printf@exp+1)& (0+255),f,b
  3292  0002F4                     l7637:
  3293                           
  3294                           ; BSR set to: 1
  3295                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  3296  0002F4  0101               	movlb	1	; () banked
  3297  0002F6  515D               	movf	printf@exp& (0+255),w,b
  3298  0002F8  0800               	sublw	0
  3299  0002FA  ECCB  F00D         	call	_scale
  3300  0002FE  C123  F159         	movff	?_scale,printf@tmpval
  3301  000302  C124  F15A         	movff	?_scale+1,printf@tmpval+1
  3302  000306  C125  F15B         	movff	?_scale+2,printf@tmpval+2
  3303                           
  3304                           ;doprnt.c: 847: tmpval.integ *= fval;
  3305  00030A  C159  F114         	movff	printf@tmpval,___ftmul@f1
  3306  00030E  C15A  F115         	movff	printf@tmpval+1,___ftmul@f1+1
  3307  000312  C15B  F116         	movff	printf@tmpval+2,___ftmul@f1+2
  3308  000316  C165  F117         	movff	printf@fval,___ftmul@f2
  3309  00031A  C166  F118         	movff	printf@fval+1,___ftmul@f2+1
  3310  00031E  C167  F119         	movff	printf@fval+2,___ftmul@f2+2
  3311  000322  ECF2  F019         	call	___ftmul	;wreg free
  3312  000326  C114  F159         	movff	?___ftmul,printf@tmpval
  3313  00032A  C115  F15A         	movff	?___ftmul+1,printf@tmpval+1
  3314  00032E  C116  F15B         	movff	?___ftmul+2,printf@tmpval+2
  3315                           
  3316                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  3317  000332  C159  F100         	movff	printf@tmpval,___ftge@ff1
  3318  000336  C15A  F101         	movff	printf@tmpval+1,___ftge@ff1+1
  3319  00033A  C15B  F102         	movff	printf@tmpval+2,___ftge@ff1+2
  3320  00033E  0E00               	movlw	0
  3321  000340  0101               	movlb	1	; () banked
  3322  000342  6F03               	movwf	___ftge@ff2& (0+255),b
  3323  000344  0E80               	movlw	128
  3324  000346  0101               	movlb	1	; () banked
  3325  000348  6F04               	movwf	(___ftge@ff2+1)& (0+255),b
  3326  00034A  0E3F               	movlw	63
  3327  00034C  0101               	movlb	1	; () banked
  3328  00034E  6F05               	movwf	(___ftge@ff2+2)& (0+255),b
  3329  000350  EC74  F020         	call	___ftge	;wreg free
  3330  000354  0101               	movlb	1	; () banked
  3331  000356  B0D8               	btfsc	status,0,c
  3332  000358  D005               	goto	l7645
  3333                           
  3334                           ; BSR set to: 1
  3335                           ;doprnt.c: 849: exp--;
  3336  00035A  0101               	movlb	1	; () banked
  3337  00035C  075D               	decf	printf@exp& (0+255),f,b
  3338  00035E  A0D8               	btfss	status,0,c
  3339  000360  075E               	decf	(printf@exp+1)& (0+255),f,b
  3340  000362  D017               	goto	l7649
  3341  000364                     l7645:
  3342                           
  3343                           ; BSR set to: 1
  3344                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  3345  000364  C159  F100         	movff	printf@tmpval,___ftge@ff1
  3346  000368  C15A  F101         	movff	printf@tmpval+1,___ftge@ff1+1
  3347  00036C  C15B  F102         	movff	printf@tmpval+2,___ftge@ff1+2
  3348  000370  0E00               	movlw	0
  3349  000372  0101               	movlb	1	; () banked
  3350  000374  6F03               	movwf	___ftge@ff2& (0+255),b
  3351  000376  0E20               	movlw	32
  3352  000378  0101               	movlb	1	; () banked
  3353  00037A  6F04               	movwf	(___ftge@ff2+1)& (0+255),b
  3354  00037C  0E41               	movlw	65
  3355  00037E  0101               	movlb	1	; () banked
  3356  000380  6F05               	movwf	(___ftge@ff2+2)& (0+255),b
  3357  000382  EC74  F020         	call	___ftge	;wreg free
  3358  000386  0101               	movlb	1	; () banked
  3359  000388  A0D8               	btfss	status,0,c
  3360  00038A  D003               	goto	l7649
  3361                           
  3362                           ; BSR set to: 1
  3363                           ;doprnt.c: 851: exp++;
  3364  00038C  0101               	movlb	1	; () banked
  3365  00038E  4B5D               	infsnz	printf@exp& (0+255),f,b
  3366  000390  2B5E               	incf	(printf@exp+1)& (0+255),f,b
  3367  000392                     l7649:
  3368                           
  3369                           ; BSR set to: 1
  3370                           ;doprnt.c: 852: }
  3371                           ;doprnt.c: 1112: if(prec <= 12)
  3372  000392  0101               	movlb	1	; () banked
  3373  000394  BF58               	btfsc	(printf@prec+1)& (0+255),7,b
  3374  000396  D008               	goto	l7651
  3375  000398  0101               	movlb	1	; () banked
  3376  00039A  5158               	movf	(printf@prec+1)& (0+255),w,b
  3377  00039C  E11D               	bnz	l7653
  3378  00039E  0E0D               	movlw	13
  3379  0003A0  0101               	movlb	1	; () banked
  3380  0003A2  5D57               	subwf	printf@prec& (0+255),w,b
  3381  0003A4  B0D8               	btfsc	status,0,c
  3382  0003A6  D018               	goto	l7653
  3383  0003A8                     l7651:
  3384                           
  3385                           ; BSR set to: 1
  3386                           ;doprnt.c: 1113: fval += fround(prec);
  3387  0003A8  C165  F12D         	movff	printf@fval,___ftadd@f1
  3388  0003AC  C166  F12E         	movff	printf@fval+1,___ftadd@f1+1
  3389  0003B0  C167  F12F         	movff	printf@fval+2,___ftadd@f1+2
  3390  0003B4  0101               	movlb	1	; () banked
  3391  0003B6  5157               	movf	printf@prec& (0+255),w,b
  3392  0003B8  EC1A  F012         	call	_fround
  3393  0003BC  C123  F130         	movff	?_fround,___ftadd@f2
  3394  0003C0  C124  F131         	movff	?_fround+1,___ftadd@f2+1
  3395  0003C4  C125  F132         	movff	?_fround+2,___ftadd@f2+2
  3396  0003C8  EC70  F013         	call	___ftadd	;wreg free
  3397  0003CC  C12D  F165         	movff	?___ftadd,printf@fval
  3398  0003D0  C12E  F166         	movff	?___ftadd+1,printf@fval+1
  3399  0003D4  C12F  F167         	movff	?___ftadd+2,printf@fval+2
  3400  0003D8                     l7653:
  3401                           
  3402                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3403  0003D8  0101               	movlb	1	; () banked
  3404  0003DA  BF5E               	btfsc	(printf@exp+1)& (0+255),7,b
  3405  0003DC  D008               	goto	l7655
  3406  0003DE  0101               	movlb	1	; () banked
  3407  0003E0  515E               	movf	(printf@exp+1)& (0+255),w,b
  3408  0003E2  E12A               	bnz	l7661
  3409  0003E4  0E0A               	movlw	10
  3410  0003E6  0101               	movlb	1	; () banked
  3411  0003E8  5D5D               	subwf	printf@exp& (0+255),w,b
  3412  0003EA  B0D8               	btfsc	status,0,c
  3413  0003EC  D025               	goto	l7661
  3414  0003EE                     l7655:
  3415                           
  3416                           ; BSR set to: 1
  3417  0003EE  0101               	movlb	1	; () banked
  3418  0003F0  5165               	movf	printf@fval& (0+255),w,b
  3419  0003F2  0101               	movlb	1	; () banked
  3420  0003F4  1166               	iorwf	(printf@fval+1)& (0+255),w,b
  3421  0003F6  0101               	movlb	1	; () banked
  3422  0003F8  1167               	iorwf	(printf@fval+2)& (0+255),w,b
  3423  0003FA  B4D8               	btfsc	status,2,c
  3424  0003FC  D063               	goto	l7675
  3425                           
  3426                           ; BSR set to: 1
  3427  0003FE  C165  F12A         	movff	printf@fval,___fttol@f1
  3428  000402  C166  F12B         	movff	printf@fval+1,___fttol@f1+1
  3429  000406  C167  F12C         	movff	printf@fval+2,___fttol@f1+2
  3430  00040A  ECA1  F01A         	call	___fttol	;wreg free
  3431  00040E  0101               	movlb	1	; () banked
  3432  000410  512A               	movf	?___fttol& (0+255),w,b
  3433  000412  0101               	movlb	1	; () banked
  3434  000414  112B               	iorwf	(?___fttol+1)& (0+255),w,b
  3435  000416  0101               	movlb	1	; () banked
  3436  000418  112C               	iorwf	(?___fttol+2)& (0+255),w,b
  3437  00041A  0101               	movlb	1	; () banked
  3438  00041C  112D               	iorwf	(?___fttol+3)& (0+255),w,b
  3439  00041E  A4D8               	btfss	status,2,c
  3440  000420  D051               	goto	l7675
  3441                           
  3442                           ; BSR set to: 1
  3443  000422  0101               	movlb	1	; () banked
  3444  000424  BF5E               	btfsc	(printf@exp+1)& (0+255),7,b
  3445  000426  D04E               	goto	l7675
  3446  000428  0101               	movlb	1	; () banked
  3447  00042A  515E               	movf	(printf@exp+1)& (0+255),w,b
  3448  00042C  E105               	bnz	l7661
  3449  00042E  0E02               	movlw	2
  3450  000430  0101               	movlb	1	; () banked
  3451  000432  5D5D               	subwf	printf@exp& (0+255),w,b
  3452  000434  A0D8               	btfss	status,0,c
  3453  000436  D046               	goto	l7675
  3454  000438                     l7661:
  3455                           
  3456                           ; BSR set to: 1
  3457                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3458  000438  C159  F100         	movff	printf@tmpval,___ftge@ff1
  3459  00043C  C15A  F101         	movff	printf@tmpval+1,___ftge@ff1+1
  3460  000440  C15B  F102         	movff	printf@tmpval+2,___ftge@ff1+2
  3461  000444  0E70               	movlw	112
  3462  000446  0101               	movlb	1	; () banked
  3463  000448  6F03               	movwf	___ftge@ff2& (0+255),b
  3464  00044A  0E89               	movlw	137
  3465  00044C  0101               	movlb	1	; () banked
  3466  00044E  6F04               	movwf	(___ftge@ff2+1)& (0+255),b
  3467  000450  0E40               	movlw	64
  3468  000452  0101               	movlb	1	; () banked
  3469  000454  6F05               	movwf	(___ftge@ff2+2)& (0+255),b
  3470  000456  EC74  F020         	call	___ftge	;wreg free
  3471  00045A  0101               	movlb	1	; () banked
  3472  00045C  B0D8               	btfsc	status,0,c
  3473  00045E  D003               	goto	l7665
  3474                           
  3475                           ; BSR set to: 1
  3476                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3477  000460  0101               	movlb	1	; () banked
  3478  000462  0EF7               	movlw	247
  3479  000464  D002               	goto	L1
  3480  000466                     l7665:
  3481                           
  3482                           ; BSR set to: 1
  3483                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3484  000466  0101               	movlb	1	; () banked
  3485  000468  0EF8               	movlw	248
  3486  00046A                     L1:
  3487  00046A  275D               	addwf	printf@exp& (0+255),f,b
  3488  00046C  0EFF               	movlw	255
  3489  00046E  235E               	addwfc	(printf@exp+1)& (0+255),f,b
  3490                           
  3491                           ; BSR set to: 1
  3492                           ;doprnt.c: 1124: }
  3493                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  3494                           
  3495                           ; BSR set to: 1
  3496  000470  0101               	movlb	1	; () banked
  3497  000472  515D               	movf	printf@exp& (0+255),w,b
  3498  000474  ECCB  F00D         	call	_scale
  3499  000478  C123  F159         	movff	?_scale,printf@tmpval
  3500  00047C  C124  F15A         	movff	?_scale+1,printf@tmpval+1
  3501  000480  C125  F15B         	movff	?_scale+2,printf@tmpval+2
  3502                           
  3503                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3504  000484  C165  F100         	movff	printf@fval,__tdiv_to_l_@f1
  3505  000488  C166  F101         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  3506  00048C  C167  F102         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  3507  000490  C159  F103         	movff	printf@tmpval,__tdiv_to_l_@f2
  3508  000494  C15A  F104         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  3509  000498  C15B  F105         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  3510  00049C  ECAE  F017         	call	__tdiv_to_l_	;wreg free
  3511  0004A0  C100  F15F         	movff	?__tdiv_to_l_,printf@val
  3512  0004A4  C101  F160         	movff	?__tdiv_to_l_+1,printf@val+1
  3513  0004A8  C102  F161         	movff	?__tdiv_to_l_+2,printf@val+2
  3514  0004AC  C103  F162         	movff	?__tdiv_to_l_+3,printf@val+3
  3515                           
  3516                           ;doprnt.c: 1129: fval = 0.0;
  3517  0004B0  0E00               	movlw	0
  3518  0004B2  0101               	movlb	1	; () banked
  3519  0004B4  6F65               	movwf	printf@fval& (0+255),b
  3520  0004B6  0E00               	movlw	0
  3521  0004B8  0101               	movlb	1	; () banked
  3522  0004BA  6F66               	movwf	(printf@fval+1)& (0+255),b
  3523  0004BC  0E00               	movlw	0
  3524  0004BE  0101               	movlb	1	; () banked
  3525  0004C0  6F67               	movwf	(printf@fval+2)& (0+255),b
  3526                           
  3527                           ;doprnt.c: 1130: } else {
  3528  0004C2  D033               	goto	l7679
  3529  0004C4                     l7675:
  3530                           
  3531                           ; BSR set to: 1
  3532                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3533  0004C4  C165  F12A         	movff	printf@fval,___fttol@f1
  3534  0004C8  C166  F12B         	movff	printf@fval+1,___fttol@f1+1
  3535  0004CC  C167  F12C         	movff	printf@fval+2,___fttol@f1+2
  3536  0004D0  ECA1  F01A         	call	___fttol	;wreg free
  3537  0004D4  C12A  F15F         	movff	?___fttol,printf@val
  3538  0004D8  C12B  F160         	movff	?___fttol+1,printf@val+1
  3539  0004DC  C12C  F161         	movff	?___fttol+2,printf@val+2
  3540  0004E0  C12D  F162         	movff	?___fttol+3,printf@val+3
  3541                           
  3542                           ;doprnt.c: 1132: fval -= (double)val;
  3543  0004E4  C165  F139         	movff	printf@fval,___ftsub@f1
  3544  0004E8  C166  F13A         	movff	printf@fval+1,___ftsub@f1+1
  3545  0004EC  C167  F13B         	movff	printf@fval+2,___ftsub@f1+2
  3546  0004F0  C15F  F108         	movff	printf@val,___lltoft@c
  3547  0004F4  C160  F109         	movff	printf@val+1,___lltoft@c+1
  3548  0004F8  C161  F10A         	movff	printf@val+2,___lltoft@c+2
  3549  0004FC  C162  F10B         	movff	printf@val+3,___lltoft@c+3
  3550  000500  EC44  F025         	call	___lltoft	;wreg free
  3551  000504  C108  F13C         	movff	?___lltoft,___ftsub@f2
  3552  000508  C109  F13D         	movff	?___lltoft+1,___ftsub@f2+1
  3553  00050C  C10A  F13E         	movff	?___lltoft+2,___ftsub@f2+2
  3554  000510  EC49  F027         	call	___ftsub	;wreg free
  3555  000514  C139  F165         	movff	?___ftsub,printf@fval
  3556  000518  C13A  F166         	movff	?___ftsub+1,printf@fval+1
  3557  00051C  C13B  F167         	movff	?___ftsub+2,printf@fval+2
  3558                           
  3559                           ;doprnt.c: 1133: exp = 0;
  3560  000520  0E00               	movlw	0
  3561  000522  0101               	movlb	1	; () banked
  3562  000524  6F5E               	movwf	(printf@exp+1)& (0+255),b
  3563  000526  0E00               	movlw	0
  3564  000528  6F5D               	movwf	printf@exp& (0+255),b
  3565  00052A                     l7679:
  3566                           
  3567                           ; BSR set to: 1
  3568                           ;doprnt.c: 1134: }
  3569                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3570  00052A  0E01               	movlw	1
  3571  00052C  0101               	movlb	1	; () banked
  3572  00052E  6F6A               	movwf	printf@c& (0+255),b
  3573  000530                     l7681:
  3574                           
  3575                           ; BSR set to: 1
  3576  000530  0E0A               	movlw	10
  3577  000532  0101               	movlb	1	; () banked
  3578  000534  196A               	xorwf	printf@c& (0+255),w,b
  3579  000536  B4D8               	btfsc	status,2,c
  3580  000538  D01E               	goto	l7693
  3581                           
  3582                           ; BSR set to: 1
  3583                           ;doprnt.c: 1137: if(val < dpowers[c])
  3584                           
  3585                           ; BSR set to: 1
  3586                           
  3587                           ; BSR set to: 1
  3588  00053A  0101               	movlb	1	; () banked
  3589  00053C  516A               	movf	printf@c& (0+255),w,b
  3590  00053E  0D04               	mullw	4
  3591  000540  0EE1               	movlw	low _dpowers
  3592  000542  24F3               	addwf	prodl,w,c
  3593  000544  6EF6               	movwf	tblptrl,c
  3594  000546  0EFB               	movlw	high _dpowers
  3595  000548  20F4               	addwfc	prodh,w,c
  3596  00054A  6EF7               	movwf	tblptrh,c
  3597  00054C                     	if	0	;There are less than 3 active tblptr bytes
  3598  00054C                     	endif
  3599  00054C  0009               	tblrd		*+
  3600  00054E  50F5               	movf	tablat,w,c
  3601  000550  0101               	movlb	1	; () banked
  3602  000552  5D5F               	subwf	printf@val& (0+255),w,b
  3603  000554  0009               	tblrd		*+
  3604  000556  50F5               	movf	tablat,w,c
  3605  000558  0101               	movlb	1	; () banked
  3606  00055A  5960               	subwfb	(printf@val+1)& (0+255),w,b
  3607  00055C  0009               	tblrd		*+
  3608  00055E  50F5               	movf	tablat,w,c
  3609  000560  0101               	movlb	1	; () banked
  3610  000562  5961               	subwfb	(printf@val+2)& (0+255),w,b
  3611  000564  0009               	tblrd		*+
  3612  000566  50F5               	movf	tablat,w,c
  3613  000568  0101               	movlb	1	; () banked
  3614  00056A  5962               	subwfb	(printf@val+3)& (0+255),w,b
  3615  00056C  A0D8               	btfss	status,0,c
  3616  00056E  D003               	goto	l7693
  3617                           
  3618                           ; BSR set to: 1
  3619                           
  3620                           ; BSR set to: 1
  3621                           
  3622                           ; BSR set to: 1
  3623                           ;doprnt.c: 1138: break;
  3624  000570  0101               	movlb	1	; () banked
  3625  000572  2B6A               	incf	printf@c& (0+255),f,b
  3626  000574  D7DD               	goto	l7681
  3627  000576                     l7693:
  3628                           
  3629                           ; BSR set to: 1
  3630                           ;doprnt.c: 1142: width -= prec + c + exp;
  3631  000576  C16A  F147         	movff	printf@c,??_printf
  3632  00057A  0101               	movlb	1	; () banked
  3633  00057C  6B48               	clrf	(??_printf+1)& (0+255),b
  3634  00057E  BF47               	btfsc	??_printf& (0+255),7,b
  3635  000580  0748               	decf	(??_printf+1)& (0+255),f,b
  3636  000582  0101               	movlb	1	; () banked
  3637  000584  5157               	movf	printf@prec& (0+255),w,b
  3638  000586  0101               	movlb	1	; () banked
  3639  000588  2747               	addwf	??_printf& (0+255),f,b
  3640  00058A  0101               	movlb	1	; () banked
  3641  00058C  5158               	movf	(printf@prec+1)& (0+255),w,b
  3642  00058E  0101               	movlb	1	; () banked
  3643  000590  2348               	addwfc	(??_printf+1)& (0+255),f,b
  3644  000592  0101               	movlb	1	; () banked
  3645  000594  515D               	movf	printf@exp& (0+255),w,b
  3646  000596  0101               	movlb	1	; () banked
  3647  000598  2747               	addwf	??_printf& (0+255),f,b
  3648  00059A  0101               	movlb	1	; () banked
  3649  00059C  515E               	movf	(printf@exp+1)& (0+255),w,b
  3650  00059E  0101               	movlb	1	; () banked
  3651  0005A0  2348               	addwfc	(??_printf+1)& (0+255),f,b
  3652  0005A2  0101               	movlb	1	; () banked
  3653  0005A4  5147               	movf	??_printf& (0+255),w,b
  3654  0005A6  0101               	movlb	1	; () banked
  3655  0005A8  5F68               	subwf	printf@width& (0+255),f,b
  3656  0005AA  0101               	movlb	1	; () banked
  3657  0005AC  5148               	movf	(??_printf+1)& (0+255),w,b
  3658  0005AE  0101               	movlb	1	; () banked
  3659  0005B0  5B69               	subwfb	(printf@width+1)& (0+255),f,b
  3660                           
  3661                           ;doprnt.c: 1143: if(
  3662                           ;doprnt.c: 1147: prec)
  3663  0005B2  0101               	movlb	1	; () banked
  3664  0005B4  5157               	movf	printf@prec& (0+255),w,b
  3665  0005B6  0101               	movlb	1	; () banked
  3666  0005B8  1158               	iorwf	(printf@prec+1)& (0+255),w,b
  3667  0005BA  B4D8               	btfsc	status,2,c
  3668  0005BC  D004               	goto	l7697
  3669                           
  3670                           ; BSR set to: 1
  3671                           ;doprnt.c: 1148: width--;
  3672  0005BE  0101               	movlb	1	; () banked
  3673  0005C0  0768               	decf	printf@width& (0+255),f,b
  3674  0005C2  A0D8               	btfss	status,0,c
  3675  0005C4  0769               	decf	(printf@width+1)& (0+255),f,b
  3676  0005C6                     l7697:
  3677                           
  3678                           ; BSR set to: 1
  3679                           ;doprnt.c: 1149: if(flag & 0x03)
  3680  0005C6  0E03               	movlw	3
  3681  0005C8  0101               	movlb	1	; () banked
  3682  0005CA  1563               	andwf	printf@flag& (0+255),w,b
  3683  0005CC  0101               	movlb	1	; () banked
  3684  0005CE  6F47               	movwf	??_printf& (0+255),b
  3685  0005D0  0E00               	movlw	0
  3686  0005D2  0101               	movlb	1	; () banked
  3687  0005D4  1564               	andwf	(printf@flag+1)& (0+255),w,b
  3688  0005D6  0101               	movlb	1	; () banked
  3689  0005D8  6F48               	movwf	(??_printf+1)& (0+255),b
  3690  0005DA  0101               	movlb	1	; () banked
  3691  0005DC  5147               	movf	??_printf& (0+255),w,b
  3692  0005DE  0101               	movlb	1	; () banked
  3693  0005E0  1148               	iorwf	(??_printf+1)& (0+255),w,b
  3694  0005E2  B4D8               	btfsc	status,2,c
  3695  0005E4  D004               	goto	l7701
  3696                           
  3697                           ; BSR set to: 1
  3698                           ;doprnt.c: 1150: width--;
  3699  0005E6  0101               	movlb	1	; () banked
  3700  0005E8  0768               	decf	printf@width& (0+255),f,b
  3701  0005EA  A0D8               	btfss	status,0,c
  3702  0005EC  0769               	decf	(printf@width+1)& (0+255),f,b
  3703  0005EE                     l7701:
  3704                           
  3705                           ; BSR set to: 1
  3706                           ;doprnt.c: 1153: if(flag & 0x04) {
  3707  0005EE  0101               	movlb	1	; () banked
  3708  0005F0  A563               	btfss	printf@flag& (0+255),2,b
  3709  0005F2  D02D               	goto	l7717
  3710                           
  3711                           ; BSR set to: 1
  3712                           ;doprnt.c: 1157: if(flag & 0x03)
  3713  0005F4  0E03               	movlw	3
  3714  0005F6  0101               	movlb	1	; () banked
  3715  0005F8  1563               	andwf	printf@flag& (0+255),w,b
  3716  0005FA  0101               	movlb	1	; () banked
  3717  0005FC  6F47               	movwf	??_printf& (0+255),b
  3718  0005FE  0E00               	movlw	0
  3719  000600  0101               	movlb	1	; () banked
  3720  000602  1564               	andwf	(printf@flag+1)& (0+255),w,b
  3721  000604  0101               	movlb	1	; () banked
  3722  000606  6F48               	movwf	(??_printf+1)& (0+255),b
  3723  000608  0101               	movlb	1	; () banked
  3724  00060A  5147               	movf	??_printf& (0+255),w,b
  3725  00060C  0101               	movlb	1	; () banked
  3726  00060E  1148               	iorwf	(??_printf+1)& (0+255),w,b
  3727  000610  B4D8               	btfsc	status,2,c
  3728  000612  D00B               	goto	l7711
  3729                           
  3730                           ; BSR set to: 1
  3731                           ;doprnt.c: 1159: (putch('-') );
  3732  000614  0E2D               	movlw	45
  3733  000616  EC76  F029         	call	_putch
  3734                           
  3735                           ;doprnt.c: 1168: while(width > 0) {
  3736  00061A  D007               	goto	l7711
  3737  00061C                     l7707:
  3738                           
  3739                           ;doprnt.c: 1169: (putch('0') );
  3740  00061C  0E30               	movlw	48
  3741  00061E  EC76  F029         	call	_putch
  3742                           
  3743                           ;doprnt.c: 1170: width--;
  3744  000622  0101               	movlb	1	; () banked
  3745  000624  0768               	decf	printf@width& (0+255),f,b
  3746  000626  A0D8               	btfss	status,0,c
  3747  000628  0769               	decf	(printf@width+1)& (0+255),f,b
  3748  00062A                     l7711:
  3749  00062A  0101               	movlb	1	; () banked
  3750  00062C  BF69               	btfsc	(printf@width+1)& (0+255),7,b
  3751  00062E  D074               	goto	l7729
  3752  000630  0101               	movlb	1	; () banked
  3753  000632  5169               	movf	(printf@width+1)& (0+255),w,b
  3754  000634  E1F3               	bnz	l7707
  3755  000636  0101               	movlb	1	; () banked
  3756  000638  0568               	decf	printf@width& (0+255),w,b
  3757  00063A  A0D8               	btfss	status,0,c
  3758  00063C  D06D               	goto	l7729
  3759  00063E  D7EE               	goto	l7707
  3760  000640                     l7713:
  3761                           
  3762                           ; BSR set to: 1
  3763                           ;doprnt.c: 1181: (putch(' ') );
  3764  000640  0E20               	movlw	32
  3765  000642  EC76  F029         	call	_putch
  3766                           
  3767                           ;doprnt.c: 1182: width--;
  3768  000646  0101               	movlb	1	; () banked
  3769  000648  0768               	decf	printf@width& (0+255),f,b
  3770  00064A  A0D8               	btfss	status,0,c
  3771  00064C  0769               	decf	(printf@width+1)& (0+255),f,b
  3772  00064E                     l7717:
  3773                           
  3774                           ; BSR set to: 1
  3775  00064E  0101               	movlb	1	; () banked
  3776  000650  BF69               	btfsc	(printf@width+1)& (0+255),7,b
  3777  000652  D007               	goto	l7719
  3778  000654  0101               	movlb	1	; () banked
  3779  000656  5169               	movf	(printf@width+1)& (0+255),w,b
  3780  000658  E1F3               	bnz	l7713
  3781  00065A  0101               	movlb	1	; () banked
  3782  00065C  0568               	decf	printf@width& (0+255),w,b
  3783  00065E  B0D8               	btfsc	status,0,c
  3784  000660  D7EF               	goto	l7713
  3785  000662                     l7719:
  3786                           
  3787                           ; BSR set to: 1
  3788                           ;doprnt.c: 1183: }
  3789                           ;doprnt.c: 1188: if(flag & 0x03)
  3790  000662  0E03               	movlw	3
  3791  000664  0101               	movlb	1	; () banked
  3792  000666  1563               	andwf	printf@flag& (0+255),w,b
  3793  000668  0101               	movlb	1	; () banked
  3794  00066A  6F47               	movwf	??_printf& (0+255),b
  3795  00066C  0E00               	movlw	0
  3796  00066E  0101               	movlb	1	; () banked
  3797  000670  1564               	andwf	(printf@flag+1)& (0+255),w,b
  3798  000672  0101               	movlb	1	; () banked
  3799  000674  6F48               	movwf	(??_printf+1)& (0+255),b
  3800  000676  0101               	movlb	1	; () banked
  3801  000678  5147               	movf	??_printf& (0+255),w,b
  3802  00067A  0101               	movlb	1	; () banked
  3803  00067C  1148               	iorwf	(??_printf+1)& (0+255),w,b
  3804  00067E  B4D8               	btfsc	status,2,c
  3805  000680  D04B               	goto	l7729
  3806                           
  3807                           ; BSR set to: 1
  3808                           ;doprnt.c: 1190: (putch('-') );
  3809  000682  0E2D               	movlw	45
  3810  000684  EC76  F029         	call	_putch
  3811                           
  3812                           ;doprnt.c: 1195: }
  3813                           ;doprnt.c: 1196: while(c--) {
  3814  000688  D047               	goto	l7729
  3815  00068A                     l7723:
  3816                           
  3817                           ;doprnt.c: 1200: {
  3818                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  3819  00068A  C15F  F100         	movff	printf@val,___lldiv@dividend
  3820  00068E  C160  F101         	movff	printf@val+1,___lldiv@dividend+1
  3821  000692  C161  F102         	movff	printf@val+2,___lldiv@dividend+2
  3822  000696  C162  F103         	movff	printf@val+3,___lldiv@dividend+3
  3823  00069A  0101               	movlb	1	; () banked
  3824  00069C  516A               	movf	printf@c& (0+255),w,b
  3825  00069E  0D04               	mullw	4
  3826  0006A0  0EE1               	movlw	low _dpowers
  3827  0006A2  24F3               	addwf	prodl,w,c
  3828  0006A4  6EF6               	movwf	tblptrl,c
  3829  0006A6  0EFB               	movlw	high _dpowers
  3830  0006A8  20F4               	addwfc	prodh,w,c
  3831  0006AA  6EF7               	movwf	tblptrh,c
  3832  0006AC                     	if	0	;There are less than 3 active tblptr bytes
  3833  0006AC                     	endif
  3834  0006AC  0009               	tblrd		*+
  3835  0006AE  CFF5 F104          	movff	tablat,___lldiv@divisor
  3836  0006B2  0009               	tblrd		*+
  3837  0006B4  CFF5 F105          	movff	tablat,___lldiv@divisor+1
  3838  0006B8  0009               	tblrd		*+
  3839  0006BA  CFF5 F106          	movff	tablat,___lldiv@divisor+2
  3840  0006BE  000A               	tblrd		*-
  3841  0006C0  CFF5 F107          	movff	tablat,___lldiv@divisor+3
  3842  0006C4  EC5B  F022         	call	___lldiv	;wreg free
  3843  0006C8  C100  F159         	movff	?___lldiv,printf@tmpval
  3844  0006CC  C101  F15A         	movff	?___lldiv+1,printf@tmpval+1
  3845  0006D0  C102  F15B         	movff	?___lldiv+2,printf@tmpval+2
  3846  0006D4  C103  F15C         	movff	?___lldiv+3,printf@tmpval+3
  3847                           
  3848                           ;doprnt.c: 1202: tmpval.vd %= 10;
  3849  0006D8  C159  F10D         	movff	printf@tmpval,___llmod@dividend
  3850  0006DC  C15A  F10E         	movff	printf@tmpval+1,___llmod@dividend+1
  3851  0006E0  C15B  F10F         	movff	printf@tmpval+2,___llmod@dividend+2
  3852  0006E4  C15C  F110         	movff	printf@tmpval+3,___llmod@dividend+3
  3853  0006E8  0E0A               	movlw	10
  3854  0006EA  0101               	movlb	1	; () banked
  3855  0006EC  6F11               	movwf	___llmod@divisor& (0+255),b
  3856  0006EE  0E00               	movlw	0
  3857  0006F0  6F12               	movwf	(___llmod@divisor+1)& (0+255),b
  3858  0006F2  0E00               	movlw	0
  3859  0006F4  6F13               	movwf	(___llmod@divisor+2)& (0+255),b
  3860  0006F6  0E00               	movlw	0
  3861  0006F8  6F14               	movwf	(___llmod@divisor+3)& (0+255),b
  3862  0006FA  EC61  F023         	call	___llmod	;wreg free
  3863  0006FE  C10D  F159         	movff	?___llmod,printf@tmpval
  3864  000702  C10E  F15A         	movff	?___llmod+1,printf@tmpval+1
  3865  000706  C10F  F15B         	movff	?___llmod+2,printf@tmpval+2
  3866  00070A  C110  F15C         	movff	?___llmod+3,printf@tmpval+3
  3867                           
  3868                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  3869  00070E  0101               	movlb	1	; () banked
  3870  000710  5159               	movf	printf@tmpval& (0+255),w,b
  3871  000712  0F30               	addlw	48
  3872  000714  EC76  F029         	call	_putch
  3873  000718                     l7729:
  3874  000718  0101               	movlb	1	; () banked
  3875  00071A  076A               	decf	printf@c& (0+255),f,b
  3876  00071C  0101               	movlb	1	; () banked
  3877  00071E  296A               	incf	printf@c& (0+255),w,b
  3878  000720  B4D8               	btfsc	status,2,c
  3879  000722  D008               	goto	l7735
  3880  000724  D7B2               	goto	l7723
  3881  000726                     l7731:
  3882                           
  3883                           ; BSR set to: 1
  3884                           ;doprnt.c: 1208: (putch('0') );
  3885  000726  0E30               	movlw	48
  3886  000728  EC76  F029         	call	_putch
  3887                           
  3888                           ;doprnt.c: 1209: exp--;
  3889  00072C  0101               	movlb	1	; () banked
  3890  00072E  075D               	decf	printf@exp& (0+255),f,b
  3891  000730  A0D8               	btfss	status,0,c
  3892  000732  075E               	decf	(printf@exp+1)& (0+255),f,b
  3893  000734                     l7735:
  3894                           
  3895                           ; BSR set to: 1
  3896  000734  0101               	movlb	1	; () banked
  3897  000736  BF5E               	btfsc	(printf@exp+1)& (0+255),7,b
  3898  000738  D007               	goto	l7737
  3899  00073A  0101               	movlb	1	; () banked
  3900  00073C  515E               	movf	(printf@exp+1)& (0+255),w,b
  3901  00073E  E1F3               	bnz	l7731
  3902  000740  0101               	movlb	1	; () banked
  3903  000742  055D               	decf	printf@exp& (0+255),w,b
  3904  000744  B0D8               	btfsc	status,0,c
  3905  000746  D7EF               	goto	l7731
  3906  000748                     l7737:
  3907                           
  3908                           ; BSR set to: 1
  3909                           ;doprnt.c: 1210: }
  3910                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3911  000748  0101               	movlb	1	; () banked
  3912  00074A  BF58               	btfsc	(printf@prec+1)& (0+255),7,b
  3913  00074C  D00C               	goto	l551
  3914  00074E  0101               	movlb	1	; () banked
  3915  000750  5158               	movf	(printf@prec+1)& (0+255),w,b
  3916  000752  E105               	bnz	u8330
  3917  000754  0E09               	movlw	9
  3918  000756  0101               	movlb	1	; () banked
  3919  000758  5D57               	subwf	printf@prec& (0+255),w,b
  3920  00075A  A0D8               	btfss	status,0,c
  3921  00075C  D004               	goto	l551
  3922  00075E                     u8330:
  3923                           
  3924                           ; BSR set to: 1
  3925                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3926  00075E  0E08               	movlw	8
  3927  000760  0101               	movlb	1	; () banked
  3928  000762  6F6A               	movwf	printf@c& (0+255),b
  3929  000764  D002               	goto	l7741
  3930  000766                     l551:
  3931                           
  3932                           ; BSR set to: 1
  3933                           ;doprnt.c: 1213: else
  3934                           ;doprnt.c: 1214: c = prec;
  3935  000766  C157  F16A         	movff	printf@prec,printf@c
  3936  00076A                     l7741:
  3937                           
  3938                           ; BSR set to: 1
  3939                           ;doprnt.c: 1215: prec -= c;
  3940  00076A  0101               	movlb	1	; () banked
  3941  00076C  516A               	movf	printf@c& (0+255),w,b
  3942  00076E  0101               	movlb	1	; () banked
  3943  000770  5F57               	subwf	printf@prec& (0+255),f,b
  3944  000772  0E00               	movlw	0
  3945  000774  0101               	movlb	1	; () banked
  3946  000776  BF6A               	btfsc	printf@c& (0+255),7,b
  3947  000778  0EFF               	movlw	255
  3948  00077A  0101               	movlb	1	; () banked
  3949  00077C  5B58               	subwfb	(printf@prec+1)& (0+255),f,b
  3950                           
  3951                           ; BSR set to: 1
  3952                           ;doprnt.c: 1219: if(c)
  3953  00077E  0101               	movlb	1	; () banked
  3954  000780  516A               	movf	printf@c& (0+255),w,b
  3955  000782  0101               	movlb	1	; () banked
  3956  000784  B4D8               	btfsc	status,2,c
  3957  000786  D003               	goto	l7747
  3958                           
  3959                           ; BSR set to: 1
  3960                           ;doprnt.c: 1221: (putch('.') );
  3961  000788  0E2E               	movlw	46
  3962  00078A  EC76  F029         	call	_putch
  3963  00078E                     l7747:
  3964                           
  3965                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3966  00078E  0101               	movlb	1	; () banked
  3967  000790  516A               	movf	printf@c& (0+255),w,b
  3968  000792  ECCB  F00D         	call	_scale
  3969  000796  C123  F14D         	movff	?_scale,_printf$1447
  3970  00079A  C124  F14E         	movff	?_scale+1,_printf$1447+1
  3971  00079E  C125  F14F         	movff	?_scale+2,_printf$1447+2
  3972                           
  3973                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3974  0007A2  C165  F117         	movff	printf@fval,___ftmul@f2
  3975  0007A6  C166  F118         	movff	printf@fval+1,___ftmul@f2+1
  3976  0007AA  C167  F119         	movff	printf@fval+2,___ftmul@f2+2
  3977  0007AE  C14D  F114         	movff	_printf$1447,___ftmul@f1
  3978  0007B2  C14E  F115         	movff	_printf$1447+1,___ftmul@f1+1
  3979  0007B6  C14F  F116         	movff	_printf$1447+2,___ftmul@f1+2
  3980  0007BA  ECF2  F019         	call	___ftmul	;wreg free
  3981  0007BE  C114  F12A         	movff	?___ftmul,___fttol@f1
  3982  0007C2  C115  F12B         	movff	?___ftmul+1,___fttol@f1+1
  3983  0007C6  C116  F12C         	movff	?___ftmul+2,___fttol@f1+2
  3984  0007CA  ECA1  F01A         	call	___fttol	;wreg free
  3985  0007CE  C12A  F15F         	movff	?___fttol,printf@val
  3986  0007D2  C12B  F160         	movff	?___fttol+1,printf@val+1
  3987  0007D6  C12C  F161         	movff	?___fttol+2,printf@val+2
  3988  0007DA  C12D  F162         	movff	?___fttol+3,printf@val+3
  3989                           
  3990                           ;doprnt.c: 1228: while(c--) {
  3991  0007DE  D06E               	goto	l7757
  3992  0007E0                     l7751:
  3993                           
  3994                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3995  0007E0  C15F  F100         	movff	printf@val,___lldiv@dividend
  3996  0007E4  C160  F101         	movff	printf@val+1,___lldiv@dividend+1
  3997  0007E8  C161  F102         	movff	printf@val+2,___lldiv@dividend+2
  3998  0007EC  C162  F103         	movff	printf@val+3,___lldiv@dividend+3
  3999  0007F0  0101               	movlb	1	; () banked
  4000  0007F2  516A               	movf	printf@c& (0+255),w,b
  4001  0007F4  0D04               	mullw	4
  4002  0007F6  0EE1               	movlw	low _dpowers
  4003  0007F8  24F3               	addwf	prodl,w,c
  4004  0007FA  6EF6               	movwf	tblptrl,c
  4005  0007FC  0EFB               	movlw	high _dpowers
  4006  0007FE  20F4               	addwfc	prodh,w,c
  4007  000800  6EF7               	movwf	tblptrh,c
  4008  000802                     	if	0	;There are less than 3 active tblptr bytes
  4009  000802                     	endif
  4010  000802  0009               	tblrd		*+
  4011  000804  CFF5 F104          	movff	tablat,___lldiv@divisor
  4012  000808  0009               	tblrd		*+
  4013  00080A  CFF5 F105          	movff	tablat,___lldiv@divisor+1
  4014  00080E  0009               	tblrd		*+
  4015  000810  CFF5 F106          	movff	tablat,___lldiv@divisor+2
  4016  000814  000A               	tblrd		*-
  4017  000816  CFF5 F107          	movff	tablat,___lldiv@divisor+3
  4018  00081A  EC5B  F022         	call	___lldiv	;wreg free
  4019  00081E  C100  F159         	movff	?___lldiv,printf@tmpval
  4020  000822  C101  F15A         	movff	?___lldiv+1,printf@tmpval+1
  4021  000826  C102  F15B         	movff	?___lldiv+2,printf@tmpval+2
  4022  00082A  C103  F15C         	movff	?___lldiv+3,printf@tmpval+3
  4023                           
  4024                           ;doprnt.c: 1230: tmpval.vd %= 10;
  4025  00082E  C159  F10D         	movff	printf@tmpval,___llmod@dividend
  4026  000832  C15A  F10E         	movff	printf@tmpval+1,___llmod@dividend+1
  4027  000836  C15B  F10F         	movff	printf@tmpval+2,___llmod@dividend+2
  4028  00083A  C15C  F110         	movff	printf@tmpval+3,___llmod@dividend+3
  4029  00083E  0E0A               	movlw	10
  4030  000840  0101               	movlb	1	; () banked
  4031  000842  6F11               	movwf	___llmod@divisor& (0+255),b
  4032  000844  0E00               	movlw	0
  4033  000846  6F12               	movwf	(___llmod@divisor+1)& (0+255),b
  4034  000848  0E00               	movlw	0
  4035  00084A  6F13               	movwf	(___llmod@divisor+2)& (0+255),b
  4036  00084C  0E00               	movlw	0
  4037  00084E  6F14               	movwf	(___llmod@divisor+3)& (0+255),b
  4038  000850  EC61  F023         	call	___llmod	;wreg free
  4039  000854  C10D  F159         	movff	?___llmod,printf@tmpval
  4040  000858  C10E  F15A         	movff	?___llmod+1,printf@tmpval+1
  4041  00085C  C10F  F15B         	movff	?___llmod+2,printf@tmpval+2
  4042  000860  C110  F15C         	movff	?___llmod+3,printf@tmpval+3
  4043                           
  4044                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  4045  000864  0101               	movlb	1	; () banked
  4046  000866  5159               	movf	printf@tmpval& (0+255),w,b
  4047  000868  0F30               	addlw	48
  4048  00086A  EC76  F029         	call	_putch
  4049                           
  4050                           ;doprnt.c: 1232: val %= dpowers[c];
  4051  00086E  C15F  F10D         	movff	printf@val,___llmod@dividend
  4052  000872  C160  F10E         	movff	printf@val+1,___llmod@dividend+1
  4053  000876  C161  F10F         	movff	printf@val+2,___llmod@dividend+2
  4054  00087A  C162  F110         	movff	printf@val+3,___llmod@dividend+3
  4055  00087E  0101               	movlb	1	; () banked
  4056  000880  516A               	movf	printf@c& (0+255),w,b
  4057  000882  0D04               	mullw	4
  4058  000884  0EE1               	movlw	low _dpowers
  4059  000886  24F3               	addwf	prodl,w,c
  4060  000888  6EF6               	movwf	tblptrl,c
  4061  00088A  0EFB               	movlw	high _dpowers
  4062  00088C  20F4               	addwfc	prodh,w,c
  4063  00088E  6EF7               	movwf	tblptrh,c
  4064  000890                     	if	0	;There are less than 3 active tblptr bytes
  4065  000890                     	endif
  4066  000890  0009               	tblrd		*+
  4067  000892  CFF5 F111          	movff	tablat,___llmod@divisor
  4068  000896  0009               	tblrd		*+
  4069  000898  CFF5 F112          	movff	tablat,___llmod@divisor+1
  4070  00089C  0009               	tblrd		*+
  4071  00089E  CFF5 F113          	movff	tablat,___llmod@divisor+2
  4072  0008A2  000A               	tblrd		*-
  4073  0008A4  CFF5 F114          	movff	tablat,___llmod@divisor+3
  4074  0008A8  EC61  F023         	call	___llmod	;wreg free
  4075  0008AC  C10D  F15F         	movff	?___llmod,printf@val
  4076  0008B0  C10E  F160         	movff	?___llmod+1,printf@val+1
  4077  0008B4  C10F  F161         	movff	?___llmod+2,printf@val+2
  4078  0008B8  C110  F162         	movff	?___llmod+3,printf@val+3
  4079  0008BC                     l7757:
  4080  0008BC  0101               	movlb	1	; () banked
  4081  0008BE  076A               	decf	printf@c& (0+255),f,b
  4082  0008C0  0101               	movlb	1	; () banked
  4083  0008C2  296A               	incf	printf@c& (0+255),w,b
  4084  0008C4  B4D8               	btfsc	status,2,c
  4085  0008C6  D008               	goto	l7763
  4086  0008C8  D78B               	goto	l7751
  4087  0008CA                     l7759:
  4088                           
  4089                           ; BSR set to: 1
  4090                           ;doprnt.c: 1236: (putch('0') );
  4091  0008CA  0E30               	movlw	48
  4092  0008CC  EC76  F029         	call	_putch
  4093                           
  4094                           ;doprnt.c: 1237: prec--;
  4095  0008D0  0101               	movlb	1	; () banked
  4096  0008D2  0757               	decf	printf@prec& (0+255),f,b
  4097  0008D4  A0D8               	btfss	status,0,c
  4098  0008D6  0758               	decf	(printf@prec+1)& (0+255),f,b
  4099  0008D8                     l7763:
  4100                           
  4101                           ; BSR set to: 1
  4102  0008D8  0101               	movlb	1	; () banked
  4103  0008DA  5157               	movf	printf@prec& (0+255),w,b
  4104  0008DC  0101               	movlb	1	; () banked
  4105  0008DE  1158               	iorwf	(printf@prec+1)& (0+255),w,b
  4106  0008E0  B4D8               	btfsc	status,2,c
  4107  0008E2  D1C6               	goto	l7863
  4108  0008E4  D7F2               	goto	l7759
  4109  0008E6                     l7765:
  4110                           
  4111                           ; BSR set to: 1
  4112                           ;doprnt.c: 1246: }
  4113                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  4114  0008E6  0EC0               	movlw	192
  4115  0008E8  0101               	movlb	1	; () banked
  4116  0008EA  1563               	andwf	printf@flag& (0+255),w,b
  4117  0008EC  0101               	movlb	1	; () banked
  4118  0008EE  6F47               	movwf	??_printf& (0+255),b
  4119  0008F0  0E00               	movlw	0
  4120  0008F2  0101               	movlb	1	; () banked
  4121  0008F4  1564               	andwf	(printf@flag+1)& (0+255),w,b
  4122  0008F6  0101               	movlb	1	; () banked
  4123  0008F8  6F48               	movwf	(??_printf+1)& (0+255),b
  4124  0008FA  0101               	movlb	1	; () banked
  4125  0008FC  5147               	movf	??_printf& (0+255),w,b
  4126  0008FE  0101               	movlb	1	; () banked
  4127  000900  1148               	iorwf	(??_printf+1)& (0+255),w,b
  4128  000902  A4D8               	btfss	status,2,c
  4129  000904  D023               	goto	l7777
  4130                           
  4131                           ; BSR set to: 1
  4132                           ;doprnt.c: 1253: {
  4133                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  4134  000906  C155  FFD9         	movff	printf@ap,fsr2l
  4135  00090A  C156  FFDA         	movff	printf@ap+1,fsr2h
  4136  00090E  CFDE F15F          	movff	postinc2,printf@val
  4137  000912  CFDD F160          	movff	postdec2,printf@val+1
  4138  000916  0101               	movlb	1	; () banked
  4139  000918  0E00               	movlw	0
  4140  00091A  BF60               	btfsc	(printf@val+1)& (0+255),7,b
  4141  00091C  0EFF               	movlw	-1
  4142  00091E  6F61               	movwf	(printf@val+2)& (0+255),b
  4143  000920  6F62               	movwf	(printf@val+3)& (0+255),b
  4144                           
  4145                           ; BSR set to: 1
  4146  000922  0E02               	movlw	2
  4147  000924  0101               	movlb	1	; () banked
  4148  000926  2755               	addwf	printf@ap& (0+255),f,b
  4149  000928  0E00               	movlw	0
  4150  00092A  2356               	addwfc	(printf@ap+1)& (0+255),f,b
  4151                           
  4152                           ; BSR set to: 1
  4153                           ;doprnt.c: 1261: if((long)val < 0) {
  4154  00092C  0101               	movlb	1	; () banked
  4155  00092E  AF62               	btfss	(printf@val+3)& (0+255),7,b
  4156  000930  D06E               	goto	l7811
  4157                           
  4158                           ; BSR set to: 1
  4159                           ;doprnt.c: 1262: flag |= 0x03;
  4160  000932  0E03               	movlw	3
  4161  000934  0101               	movlb	1	; () banked
  4162  000936  1363               	iorwf	printf@flag& (0+255),f,b
  4163                           
  4164                           ; BSR set to: 1
  4165                           ;doprnt.c: 1263: val = -val;
  4166  000938  0101               	movlb	1	; () banked
  4167  00093A  1F62               	comf	(printf@val+3)& (0+255),f,b
  4168  00093C  1F61               	comf	(printf@val+2)& (0+255),f,b
  4169  00093E  1F60               	comf	(printf@val+1)& (0+255),f,b
  4170  000940  6D5F               	negf	printf@val& (0+255),b
  4171  000942  0E00               	movlw	0
  4172  000944  2360               	addwfc	(printf@val+1)& (0+255),f,b
  4173  000946  2361               	addwfc	(printf@val+2)& (0+255),f,b
  4174  000948  2362               	addwfc	(printf@val+3)& (0+255),f,b
  4175                           
  4176                           ; BSR set to: 1
  4177                           ;doprnt.c: 1264: }
  4178                           ;doprnt.c: 1266: }
  4179  00094A  D061               	goto	l7811
  4180  00094C                     l7777:
  4181                           
  4182                           ; BSR set to: 1
  4183                           ;doprnt.c: 1268: else
  4184                           ;doprnt.c: 1273: {
  4185                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4186  00094C  C155  FFD9         	movff	printf@ap,fsr2l
  4187  000950  C156  FFDA         	movff	printf@ap+1,fsr2h
  4188  000954  CFDE F147          	movff	postinc2,??_printf
  4189  000958  CFDD F148          	movff	postdec2,??_printf+1
  4190  00095C  C147  F15F         	movff	??_printf,printf@val
  4191  000960  C148  F160         	movff	??_printf+1,printf@val+1
  4192  000964  0101               	movlb	1	; () banked
  4193  000966  6B61               	clrf	(printf@val+2)& (0+255),b
  4194  000968  6B62               	clrf	(printf@val+3)& (0+255),b
  4195                           
  4196                           ; BSR set to: 1
  4197  00096A  0E02               	movlw	2
  4198  00096C  0101               	movlb	1	; () banked
  4199  00096E  2755               	addwf	printf@ap& (0+255),f,b
  4200  000970  0E00               	movlw	0
  4201  000972  2356               	addwfc	(printf@ap+1)& (0+255),f,b
  4202                           
  4203                           ; BSR set to: 1
  4204                           ;doprnt.c: 1287: }
  4205                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  4206  000974  D04C               	goto	l7811
  4207  000976                     l7781:
  4208                           
  4209                           ; BSR set to: 1
  4210                           ;doprnt.c: 1302: case 0xC0:
  4211                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4212  000976  0E01               	movlw	1
  4213  000978  0101               	movlb	1	; () banked
  4214  00097A  6F6A               	movwf	printf@c& (0+255),b
  4215  00097C                     l7783:
  4216                           
  4217                           ; BSR set to: 1
  4218  00097C  0E0A               	movlw	10
  4219  00097E  0101               	movlb	1	; () banked
  4220  000980  196A               	xorwf	printf@c& (0+255),w,b
  4221  000982  B4D8               	btfsc	status,2,c
  4222  000984  D050               	goto	l7813
  4223                           
  4224                           ; BSR set to: 1
  4225                           ;doprnt.c: 1306: if(val < dpowers[c])
  4226                           
  4227                           ; BSR set to: 1
  4228                           
  4229                           ; BSR set to: 1
  4230  000986  0101               	movlb	1	; () banked
  4231  000988  516A               	movf	printf@c& (0+255),w,b
  4232  00098A  0D04               	mullw	4
  4233  00098C  0EE1               	movlw	low _dpowers
  4234  00098E  24F3               	addwf	prodl,w,c
  4235  000990  6EF6               	movwf	tblptrl,c
  4236  000992  0EFB               	movlw	high _dpowers
  4237  000994  20F4               	addwfc	prodh,w,c
  4238  000996  6EF7               	movwf	tblptrh,c
  4239  000998                     	if	0	;There are less than 3 active tblptr bytes
  4240  000998                     	endif
  4241  000998  0009               	tblrd		*+
  4242  00099A  50F5               	movf	tablat,w,c
  4243  00099C  0101               	movlb	1	; () banked
  4244  00099E  5D5F               	subwf	printf@val& (0+255),w,b
  4245  0009A0  0009               	tblrd		*+
  4246  0009A2  50F5               	movf	tablat,w,c
  4247  0009A4  0101               	movlb	1	; () banked
  4248  0009A6  5960               	subwfb	(printf@val+1)& (0+255),w,b
  4249  0009A8  0009               	tblrd		*+
  4250  0009AA  50F5               	movf	tablat,w,c
  4251  0009AC  0101               	movlb	1	; () banked
  4252  0009AE  5961               	subwfb	(printf@val+2)& (0+255),w,b
  4253  0009B0  0009               	tblrd		*+
  4254  0009B2  50F5               	movf	tablat,w,c
  4255  0009B4  0101               	movlb	1	; () banked
  4256  0009B6  5962               	subwfb	(printf@val+3)& (0+255),w,b
  4257  0009B8  A0D8               	btfss	status,0,c
  4258  0009BA  D035               	goto	l7813
  4259                           
  4260                           ; BSR set to: 1
  4261                           
  4262                           ; BSR set to: 1
  4263                           
  4264                           ; BSR set to: 1
  4265                           ;doprnt.c: 1307: break;
  4266  0009BC  0101               	movlb	1	; () banked
  4267  0009BE  2B6A               	incf	printf@c& (0+255),f,b
  4268  0009C0  D7DD               	goto	l7783
  4269  0009C2                     l7795:
  4270                           
  4271                           ; BSR set to: 1
  4272                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4273  0009C2  0E01               	movlw	1
  4274  0009C4  0101               	movlb	1	; () banked
  4275  0009C6  6F6A               	movwf	printf@c& (0+255),b
  4276  0009C8                     l7797:
  4277                           
  4278                           ; BSR set to: 1
  4279  0009C8  0E08               	movlw	8
  4280  0009CA  0101               	movlb	1	; () banked
  4281  0009CC  196A               	xorwf	printf@c& (0+255),w,b
  4282  0009CE  B4D8               	btfsc	status,2,c
  4283  0009D0  D02A               	goto	l7813
  4284                           
  4285                           ; BSR set to: 1
  4286                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4287                           
  4288                           ; BSR set to: 1
  4289                           
  4290                           ; BSR set to: 1
  4291  0009D2  0101               	movlb	1	; () banked
  4292  0009D4  516A               	movf	printf@c& (0+255),w,b
  4293  0009D6  0D04               	mullw	4
  4294  0009D8  0E57               	movlw	low _hexpowers
  4295  0009DA  24F3               	addwf	prodl,w,c
  4296  0009DC  6EF6               	movwf	tblptrl,c
  4297  0009DE  0EFC               	movlw	high _hexpowers
  4298  0009E0  20F4               	addwfc	prodh,w,c
  4299  0009E2  6EF7               	movwf	tblptrh,c
  4300  0009E4                     	if	0	;There are less than 3 active tblptr bytes
  4301  0009E4                     	endif
  4302  0009E4  0009               	tblrd		*+
  4303  0009E6  50F5               	movf	tablat,w,c
  4304  0009E8  0101               	movlb	1	; () banked
  4305  0009EA  5D5F               	subwf	printf@val& (0+255),w,b
  4306  0009EC  0009               	tblrd		*+
  4307  0009EE  50F5               	movf	tablat,w,c
  4308  0009F0  0101               	movlb	1	; () banked
  4309  0009F2  5960               	subwfb	(printf@val+1)& (0+255),w,b
  4310  0009F4  0009               	tblrd		*+
  4311  0009F6  50F5               	movf	tablat,w,c
  4312  0009F8  0101               	movlb	1	; () banked
  4313  0009FA  5961               	subwfb	(printf@val+2)& (0+255),w,b
  4314  0009FC  0009               	tblrd		*+
  4315  0009FE  50F5               	movf	tablat,w,c
  4316  000A00  0101               	movlb	1	; () banked
  4317  000A02  5962               	subwfb	(printf@val+3)& (0+255),w,b
  4318  000A04  A0D8               	btfss	status,0,c
  4319  000A06  D00F               	goto	l7813
  4320                           
  4321                           ; BSR set to: 1
  4322                           
  4323                           ; BSR set to: 1
  4324                           
  4325                           ; BSR set to: 1
  4326                           ;doprnt.c: 1318: break;
  4327  000A08  0101               	movlb	1	; () banked
  4328  000A0A  2B6A               	incf	printf@c& (0+255),f,b
  4329  000A0C  D7DD               	goto	l7797
  4330  000A0E                     l7811:
  4331                           
  4332                           ; BSR set to: 1
  4333  000A0E  0101               	movlb	1	; () banked
  4334  000A10  5163               	movf	printf@flag& (0+255),w,b
  4335  000A12  0BC0               	andlw	192
  4336                           
  4337                           ; Switch size 1, requested type "space"
  4338                           ; Number of cases is 3, Range of values is 0 to 192
  4339                           ; switch strategies available:
  4340                           ; Name         Instructions Cycles
  4341                           ; simple_byte           10     6 (average)
  4342                           ;	Chosen strategy is simple_byte
  4343  000A14  0A00               	xorlw	0	; case 0
  4344  000A16  B4D8               	btfsc	status,2,c
  4345  000A18  D7AE               	goto	l7781
  4346  000A1A  0A80               	xorlw	128	; case 128
  4347  000A1C  B4D8               	btfsc	status,2,c
  4348  000A1E  D7D1               	goto	l7795
  4349  000A20  0A40               	xorlw	64	; case 192
  4350  000A22  B4D8               	btfsc	status,2,c
  4351  000A24  D7A8               	goto	l7781
  4352  000A26                     l7813:
  4353                           
  4354                           ; BSR set to: 1
  4355                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4356  000A26  0101               	movlb	1	; () banked
  4357  000A28  5168               	movf	printf@width& (0+255),w,b
  4358  000A2A  0101               	movlb	1	; () banked
  4359  000A2C  1169               	iorwf	(printf@width+1)& (0+255),w,b
  4360  000A2E  B4D8               	btfsc	status,2,c
  4361  000A30  D014               	goto	l7819
  4362                           
  4363                           ; BSR set to: 1
  4364  000A32  0E03               	movlw	3
  4365  000A34  0101               	movlb	1	; () banked
  4366  000A36  1563               	andwf	printf@flag& (0+255),w,b
  4367  000A38  0101               	movlb	1	; () banked
  4368  000A3A  6F47               	movwf	??_printf& (0+255),b
  4369  000A3C  0E00               	movlw	0
  4370  000A3E  0101               	movlb	1	; () banked
  4371  000A40  1564               	andwf	(printf@flag+1)& (0+255),w,b
  4372  000A42  0101               	movlb	1	; () banked
  4373  000A44  6F48               	movwf	(??_printf+1)& (0+255),b
  4374  000A46  0101               	movlb	1	; () banked
  4375  000A48  5147               	movf	??_printf& (0+255),w,b
  4376  000A4A  0101               	movlb	1	; () banked
  4377  000A4C  1148               	iorwf	(??_printf+1)& (0+255),w,b
  4378  000A4E  B4D8               	btfsc	status,2,c
  4379  000A50  D004               	goto	l7819
  4380                           
  4381                           ; BSR set to: 1
  4382                           ;doprnt.c: 1346: width--;
  4383  000A52  0101               	movlb	1	; () banked
  4384  000A54  0768               	decf	printf@width& (0+255),f,b
  4385  000A56  A0D8               	btfss	status,0,c
  4386  000A58  0769               	decf	(printf@width+1)& (0+255),f,b
  4387  000A5A                     l7819:
  4388                           
  4389                           ; BSR set to: 1
  4390                           ;doprnt.c: 1381: if(width > c)
  4391  000A5A  0E80               	movlw	128
  4392  000A5C  0101               	movlb	1	; () banked
  4393  000A5E  BF6A               	btfsc	printf@c& (0+255),7,b
  4394  000A60  0E7F               	movlw	127
  4395  000A62  0101               	movlb	1	; () banked
  4396  000A64  6F47               	movwf	??_printf& (0+255),b
  4397  000A66  0101               	movlb	1	; () banked
  4398  000A68  5168               	movf	printf@width& (0+255),w,b
  4399  000A6A  0101               	movlb	1	; () banked
  4400  000A6C  5D6A               	subwf	printf@c& (0+255),w,b
  4401  000A6E  0101               	movlb	1	; () banked
  4402  000A70  5169               	movf	(printf@width+1)& (0+255),w,b
  4403  000A72  0A80               	xorlw	128
  4404  000A74  0101               	movlb	1	; () banked
  4405  000A76  5947               	subwfb	??_printf& (0+255),w,b
  4406  000A78  B0D8               	btfsc	status,0,c
  4407  000A7A  D00B               	goto	l7823
  4408                           
  4409                           ; BSR set to: 1
  4410                           ;doprnt.c: 1382: width -= c;
  4411  000A7C  0101               	movlb	1	; () banked
  4412  000A7E  516A               	movf	printf@c& (0+255),w,b
  4413  000A80  0101               	movlb	1	; () banked
  4414  000A82  5F68               	subwf	printf@width& (0+255),f,b
  4415  000A84  0E00               	movlw	0
  4416  000A86  0101               	movlb	1	; () banked
  4417  000A88  BF6A               	btfsc	printf@c& (0+255),7,b
  4418  000A8A  0EFF               	movlw	255
  4419  000A8C  0101               	movlb	1	; () banked
  4420  000A8E  5B69               	subwfb	(printf@width+1)& (0+255),f,b
  4421  000A90  D005               	goto	l7825
  4422  000A92                     l7823:
  4423                           
  4424                           ; BSR set to: 1
  4425                           ;doprnt.c: 1383: else
  4426                           ;doprnt.c: 1384: width = 0;
  4427  000A92  0E00               	movlw	0
  4428  000A94  0101               	movlb	1	; () banked
  4429  000A96  6F69               	movwf	(printf@width+1)& (0+255),b
  4430  000A98  0E00               	movlw	0
  4431  000A9A  6F68               	movwf	printf@width& (0+255),b
  4432  000A9C                     l7825:
  4433                           
  4434                           ; BSR set to: 1
  4435                           ;doprnt.c: 1387: if(flag & 0x04) {
  4436  000A9C  0101               	movlb	1	; () banked
  4437  000A9E  A563               	btfss	printf@flag& (0+255),2,b
  4438  000AA0  D021               	goto	l7837
  4439                           
  4440                           ; BSR set to: 1
  4441                           ;doprnt.c: 1392: if(flag & 0x03)
  4442  000AA2  0E03               	movlw	3
  4443  000AA4  0101               	movlb	1	; () banked
  4444  000AA6  1563               	andwf	printf@flag& (0+255),w,b
  4445  000AA8  0101               	movlb	1	; () banked
  4446  000AAA  6F47               	movwf	??_printf& (0+255),b
  4447  000AAC  0E00               	movlw	0
  4448  000AAE  0101               	movlb	1	; () banked
  4449  000AB0  1564               	andwf	(printf@flag+1)& (0+255),w,b
  4450  000AB2  0101               	movlb	1	; () banked
  4451  000AB4  6F48               	movwf	(??_printf+1)& (0+255),b
  4452  000AB6  0101               	movlb	1	; () banked
  4453  000AB8  5147               	movf	??_printf& (0+255),w,b
  4454  000ABA  0101               	movlb	1	; () banked
  4455  000ABC  1148               	iorwf	(??_printf+1)& (0+255),w,b
  4456  000ABE  B4D8               	btfsc	status,2,c
  4457  000AC0  D003               	goto	l7831
  4458                           
  4459                           ; BSR set to: 1
  4460                           ;doprnt.c: 1393: (putch('-') );
  4461  000AC2  0E2D               	movlw	45
  4462  000AC4  EC76  F029         	call	_putch
  4463  000AC8                     l7831:
  4464                           
  4465                           ;doprnt.c: 1415: if(width)
  4466  000AC8  0101               	movlb	1	; () banked
  4467  000ACA  5168               	movf	printf@width& (0+255),w,b
  4468  000ACC  0101               	movlb	1	; () banked
  4469  000ACE  1169               	iorwf	(printf@width+1)& (0+255),w,b
  4470  000AD0  B4D8               	btfsc	status,2,c
  4471  000AD2  D02E               	goto	l7847
  4472                           
  4473                           ; BSR set to: 1
  4474                           ;doprnt.c: 1417: (putch('0') );
  4475                           
  4476                           ; BSR set to: 1
  4477                           
  4478                           ;doprnt.c: 1416: do
  4479  000AD4  0E30               	movlw	48
  4480  000AD6  EC76  F029         	call	_putch
  4481                           
  4482                           ;doprnt.c: 1418: while(--width);
  4483  000ADA  0101               	movlb	1	; () banked
  4484  000ADC  0768               	decf	printf@width& (0+255),f,b
  4485  000ADE  A0D8               	btfss	status,0,c
  4486  000AE0  0769               	decf	(printf@width+1)& (0+255),f,b
  4487  000AE2  D7F2               	goto	l7831
  4488  000AE4                     l7837:
  4489                           
  4490                           ; BSR set to: 1
  4491                           ;doprnt.c: 1422: {
  4492                           ;doprnt.c: 1424: if(width
  4493                           ;doprnt.c: 1428: )
  4494  000AE4  0101               	movlb	1	; () banked
  4495  000AE6  5168               	movf	printf@width& (0+255),w,b
  4496  000AE8  0101               	movlb	1	; () banked
  4497  000AEA  1169               	iorwf	(printf@width+1)& (0+255),w,b
  4498  000AEC  B4D8               	btfsc	status,2,c
  4499  000AEE  D00D               	goto	l7843
  4500  000AF0                     l7839:
  4501                           
  4502                           ; BSR set to: 1
  4503                           ;doprnt.c: 1430: (putch(' ') );
  4504  000AF0  0E20               	movlw	32
  4505  000AF2  EC76  F029         	call	_putch
  4506                           
  4507                           ;doprnt.c: 1431: while(--width);
  4508  000AF6  0101               	movlb	1	; () banked
  4509  000AF8  0768               	decf	printf@width& (0+255),f,b
  4510  000AFA  A0D8               	btfss	status,0,c
  4511  000AFC  0769               	decf	(printf@width+1)& (0+255),f,b
  4512  000AFE  0101               	movlb	1	; () banked
  4513  000B00  5168               	movf	printf@width& (0+255),w,b
  4514  000B02  0101               	movlb	1	; () banked
  4515  000B04  1169               	iorwf	(printf@width+1)& (0+255),w,b
  4516  000B06  A4D8               	btfss	status,2,c
  4517  000B08  D7F3               	goto	l7839
  4518  000B0A                     l7843:
  4519                           
  4520                           ; BSR set to: 1
  4521                           ;doprnt.c: 1438: if(flag & 0x03)
  4522  000B0A  0E03               	movlw	3
  4523  000B0C  0101               	movlb	1	; () banked
  4524  000B0E  1563               	andwf	printf@flag& (0+255),w,b
  4525  000B10  0101               	movlb	1	; () banked
  4526  000B12  6F47               	movwf	??_printf& (0+255),b
  4527  000B14  0E00               	movlw	0
  4528  000B16  0101               	movlb	1	; () banked
  4529  000B18  1564               	andwf	(printf@flag+1)& (0+255),w,b
  4530  000B1A  0101               	movlb	1	; () banked
  4531  000B1C  6F48               	movwf	(??_printf+1)& (0+255),b
  4532  000B1E  0101               	movlb	1	; () banked
  4533  000B20  5147               	movf	??_printf& (0+255),w,b
  4534  000B22  0101               	movlb	1	; () banked
  4535  000B24  1148               	iorwf	(??_printf+1)& (0+255),w,b
  4536  000B26  B4D8               	btfsc	status,2,c
  4537  000B28  D003               	goto	l7847
  4538                           
  4539                           ; BSR set to: 1
  4540                           ;doprnt.c: 1439: (putch('-') );
  4541  000B2A  0E2D               	movlw	45
  4542  000B2C  EC76  F029         	call	_putch
  4543  000B30                     l7847:
  4544                           
  4545                           ;doprnt.c: 1469: }
  4546                           ;doprnt.c: 1472: prec = c;
  4547  000B30  0101               	movlb	1	; () banked
  4548  000B32  516A               	movf	printf@c& (0+255),w,b
  4549  000B34  0101               	movlb	1	; () banked
  4550  000B36  6F57               	movwf	printf@prec& (0+255),b
  4551  000B38  6B58               	clrf	(printf@prec+1)& (0+255),b
  4552  000B3A  BF57               	btfsc	printf@prec& (0+255),7,b
  4553  000B3C  0758               	decf	(printf@prec+1)& (0+255),f,b
  4554                           
  4555                           ;doprnt.c: 1474: while(prec--) {
  4556  000B3E  D08D               	goto	l7861
  4557  000B40                     l7849:
  4558                           
  4559                           ; BSR set to: 1
  4560                           ;doprnt.c: 1486: case 0xC0:
  4561                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4562  000B40  C157  F147         	movff	printf@prec,??_printf
  4563  000B44  C158  F148         	movff	printf@prec+1,??_printf+1
  4564  000B48  0101               	movlb	1	; () banked
  4565  000B4A  90D8               	bcf	status,0,c
  4566  000B4C  3747               	rlcf	??_printf& (0+255),f,b
  4567  000B4E  3748               	rlcf	(??_printf+1)& (0+255),f,b
  4568  000B50  0101               	movlb	1	; () banked
  4569  000B52  90D8               	bcf	status,0,c
  4570  000B54  3747               	rlcf	??_printf& (0+255),f,b
  4571  000B56  3748               	rlcf	(??_printf+1)& (0+255),f,b
  4572  000B58  0EE1               	movlw	low _dpowers
  4573  000B5A  0101               	movlb	1	; () banked
  4574  000B5C  2547               	addwf	??_printf& (0+255),w,b
  4575  000B5E  6EF6               	movwf	tblptrl,c
  4576  000B60  0EFB               	movlw	high _dpowers
  4577  000B62  2148               	addwfc	(??_printf+1)& (0+255),w,b
  4578  000B64  6EF7               	movwf	tblptrh,c
  4579  000B66                     	if	0	;There are less than 3 active tblptr bytes
  4580  000B66                     	endif
  4581  000B66  0009               	tblrd		*+
  4582  000B68  CFF5 F104          	movff	tablat,___lldiv@divisor
  4583  000B6C  0009               	tblrd		*+
  4584  000B6E  CFF5 F105          	movff	tablat,___lldiv@divisor+1
  4585  000B72  0009               	tblrd		*+
  4586  000B74  CFF5 F106          	movff	tablat,___lldiv@divisor+2
  4587  000B78  000A               	tblrd		*-
  4588  000B7A  CFF5 F107          	movff	tablat,___lldiv@divisor+3
  4589  000B7E  C15F  F100         	movff	printf@val,___lldiv@dividend
  4590  000B82  C160  F101         	movff	printf@val+1,___lldiv@dividend+1
  4591  000B86  C161  F102         	movff	printf@val+2,___lldiv@dividend+2
  4592  000B8A  C162  F103         	movff	printf@val+3,___lldiv@dividend+3
  4593  000B8E  EC5B  F022         	call	___lldiv	;wreg free
  4594  000B92  C100  F10D         	movff	?___lldiv,___llmod@dividend
  4595  000B96  C101  F10E         	movff	?___lldiv+1,___llmod@dividend+1
  4596  000B9A  C102  F10F         	movff	?___lldiv+2,___llmod@dividend+2
  4597  000B9E  C103  F110         	movff	?___lldiv+3,___llmod@dividend+3
  4598  000BA2  0E0A               	movlw	10
  4599  000BA4  0101               	movlb	1	; () banked
  4600  000BA6  6F11               	movwf	___llmod@divisor& (0+255),b
  4601  000BA8  0E00               	movlw	0
  4602  000BAA  6F12               	movwf	(___llmod@divisor+1)& (0+255),b
  4603  000BAC  0E00               	movlw	0
  4604  000BAE  6F13               	movwf	(___llmod@divisor+2)& (0+255),b
  4605  000BB0  0E00               	movlw	0
  4606  000BB2  6F14               	movwf	(___llmod@divisor+3)& (0+255),b
  4607  000BB4  EC61  F023         	call	___llmod	;wreg free
  4608  000BB8  0101               	movlb	1	; () banked
  4609  000BBA  510D               	movf	?___llmod& (0+255),w,b
  4610  000BBC  0F30               	addlw	48
  4611  000BBE  0101               	movlb	1	; () banked
  4612  000BC0  6F6A               	movwf	printf@c& (0+255),b
  4613                           
  4614                           ;doprnt.c: 1491: break;
  4615  000BC2  D047               	goto	l7859
  4616  000BC4                     l7851:
  4617                           
  4618                           ; BSR set to: 1
  4619                           ;doprnt.c: 1499: {
  4620                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4621  000BC4  C15F  F100         	movff	printf@val,___lldiv@dividend
  4622  000BC8  C160  F101         	movff	printf@val+1,___lldiv@dividend+1
  4623  000BCC  C161  F102         	movff	printf@val+2,___lldiv@dividend+2
  4624  000BD0  C162  F103         	movff	printf@val+3,___lldiv@dividend+3
  4625  000BD4  C157  F147         	movff	printf@prec,??_printf
  4626  000BD8  C158  F148         	movff	printf@prec+1,??_printf+1
  4627  000BDC  0101               	movlb	1	; () banked
  4628  000BDE  90D8               	bcf	status,0,c
  4629  000BE0  3747               	rlcf	??_printf& (0+255),f,b
  4630  000BE2  3748               	rlcf	(??_printf+1)& (0+255),f,b
  4631  000BE4  0101               	movlb	1	; () banked
  4632  000BE6  90D8               	bcf	status,0,c
  4633  000BE8  3747               	rlcf	??_printf& (0+255),f,b
  4634  000BEA  3748               	rlcf	(??_printf+1)& (0+255),f,b
  4635  000BEC  0E57               	movlw	low _hexpowers
  4636  000BEE  0101               	movlb	1	; () banked
  4637  000BF0  2547               	addwf	??_printf& (0+255),w,b
  4638  000BF2  6EF6               	movwf	tblptrl,c
  4639  000BF4  0EFC               	movlw	high _hexpowers
  4640  000BF6  2148               	addwfc	(??_printf+1)& (0+255),w,b
  4641  000BF8  6EF7               	movwf	tblptrh,c
  4642  000BFA                     	if	0	;There are less than 3 active tblptr bytes
  4643  000BFA                     	endif
  4644  000BFA  0009               	tblrd		*+
  4645  000BFC  CFF5 F104          	movff	tablat,___lldiv@divisor
  4646  000C00  0009               	tblrd		*+
  4647  000C02  CFF5 F105          	movff	tablat,___lldiv@divisor+1
  4648  000C06  0009               	tblrd		*+
  4649  000C08  CFF5 F106          	movff	tablat,___lldiv@divisor+2
  4650  000C0C  000A               	tblrd		*-
  4651  000C0E  CFF5 F107          	movff	tablat,___lldiv@divisor+3
  4652  000C12  EC5B  F022         	call	___lldiv	;wreg free
  4653  000C16  0101               	movlb	1	; () banked
  4654  000C18  5100               	movf	?___lldiv& (0+255),w,b
  4655  000C1A  0B0F               	andlw	15
  4656  000C1C  0101               	movlb	1	; () banked
  4657  000C1E  6F50               	movwf	printf@idx& (0+255),b
  4658                           
  4659                           ; BSR set to: 1
  4660                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4661  000C20  0101               	movlb	1	; () banked
  4662  000C22  5150               	movf	printf@idx& (0+255),w,b
  4663  000C24  0D01               	mullw	1
  4664  000C26  0E44               	movlw	low STR_52
  4665  000C28  24F3               	addwf	prodl,w,c
  4666  000C2A  6EF6               	movwf	tblptrl,c
  4667  000C2C  0EFF               	movlw	high STR_52
  4668  000C2E  20F4               	addwfc	prodh,w,c
  4669  000C30  6EF7               	movwf	tblptrh,c
  4670  000C32                     	if	0	;There are less than 3 active tblptr bytes
  4671  000C32                     	endif
  4672  000C32  0008               	tblrd		*
  4673  000C34  CFF5 F16A          	movff	tablat,printf@c
  4674                           
  4675                           ; BSR set to: 1
  4676                           ;doprnt.c: 1523: }
  4677                           
  4678                           ;doprnt.c: 1508: }
  4679                           ;doprnt.c: 1510: break;
  4680  000C38  D00C               	goto	l7859
  4681  000C3A                     l7857:
  4682                           
  4683                           ; BSR set to: 1
  4684  000C3A  0101               	movlb	1	; () banked
  4685  000C3C  5163               	movf	printf@flag& (0+255),w,b
  4686  000C3E  0BC0               	andlw	192
  4687                           
  4688                           ; Switch size 1, requested type "space"
  4689                           ; Number of cases is 3, Range of values is 0 to 192
  4690                           ; switch strategies available:
  4691                           ; Name         Instructions Cycles
  4692                           ; simple_byte           10     6 (average)
  4693                           ;	Chosen strategy is simple_byte
  4694  000C40  0A00               	xorlw	0	; case 0
  4695  000C42  B4D8               	btfsc	status,2,c
  4696  000C44  D77D               	goto	l7849
  4697  000C46  0A80               	xorlw	128	; case 128
  4698  000C48  B4D8               	btfsc	status,2,c
  4699  000C4A  D7BC               	goto	l7851
  4700  000C4C  0A40               	xorlw	64	; case 192
  4701  000C4E  B4D8               	btfsc	status,2,c
  4702  000C50  D777               	goto	l7849
  4703  000C52                     l7859:
  4704                           
  4705                           ; BSR set to: 1
  4706                           ;doprnt.c: 1524: (putch(c) );
  4707  000C52  0101               	movlb	1	; () banked
  4708  000C54  516A               	movf	printf@c& (0+255),w,b
  4709  000C56  EC76  F029         	call	_putch
  4710  000C5A                     l7861:
  4711  000C5A  0101               	movlb	1	; () banked
  4712  000C5C  0757               	decf	printf@prec& (0+255),f,b
  4713  000C5E  A0D8               	btfss	status,0,c
  4714  000C60  0758               	decf	(printf@prec+1)& (0+255),f,b
  4715  000C62  0101               	movlb	1	; () banked
  4716  000C64  2957               	incf	printf@prec& (0+255),w,b
  4717  000C66  E1E9               	bnz	l7857
  4718  000C68  0101               	movlb	1	; () banked
  4719  000C6A  2958               	incf	(printf@prec+1)& (0+255),w,b
  4720  000C6C  A4D8               	btfss	status,2,c
  4721  000C6E  D7E5               	goto	l7857
  4722  000C70                     l7863:
  4723  000C70  C13F  FFF6         	movff	printf@f,tblptrl
  4724  000C74  C140  FFF7         	movff	printf@f+1,tblptrh
  4725  000C78  0101               	movlb	1	; () banked
  4726  000C7A  4B3F               	infsnz	printf@f& (0+255),f,b
  4727  000C7C  2B40               	incf	(printf@f+1)& (0+255),f,b
  4728  000C7E                     	if	0	;tblptru may be non-zero
  4729  000C7E                     	endif
  4730  000C7E                     	if	0	;tblptru may be non-zero
  4731  000C7E                     	endif
  4732  000C7E  0008               	tblrd		*
  4733  000C80  CFF5 F16A          	movff	tablat,printf@c
  4734  000C84  0101               	movlb	1	; () banked
  4735  000C86  516A               	movf	printf@c& (0+255),w,b
  4736  000C88  B4D8               	btfsc	status,2,c
  4737  000C8A  0012               	return	
  4738  000C8C  EF11  F000         	goto	l7553
  4739  000C90                     __end_of_printf:
  4740                           	opt stack 0
  4741                           tblptru	equ	0xFF8
  4742                           tblptrh	equ	0xFF7
  4743                           tblptrl	equ	0xFF6
  4744                           tablat	equ	0xFF5
  4745                           prodh	equ	0xFF4
  4746                           prodl	equ	0xFF3
  4747                           intcon	equ	0xFF2
  4748                           intcon3	equ	0xFF0
  4749                           postinc0	equ	0xFEE
  4750                           wreg	equ	0xFE8
  4751                           indf2	equ	0xFDF
  4752                           postinc2	equ	0xFDE
  4753                           postdec2	equ	0xFDD
  4754                           fsr2h	equ	0xFDA
  4755                           fsr2l	equ	0xFD9
  4756                           status	equ	0xFD8
  4757                           
  4758 ;; *************** function _scale *****************
  4759 ;; Defined at:
  4760 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  4761 ;; Parameters:    Size  Location     Type
  4762 ;;  scl             1    wreg     char 
  4763 ;; Auto vars:     Size  Location     Type
  4764 ;;  scl             1   41[BANK1 ] char 
  4765 ;; Return value:  Size  Location     Type
  4766 ;;                  3   35[BANK1 ] char 
  4767 ;; Registers used:
  4768 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4769 ;; Tracked objects:
  4770 ;;		On entry : 0/0
  4771 ;;		On exit  : 0/0
  4772 ;;		Unchanged: 0/0
  4773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4774 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4775 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4777 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4778 ;;Total ram usage:        7 bytes
  4779 ;; Hardware stack levels used:    1
  4780 ;; Hardware stack levels required when called:   10
  4781 ;; This function calls:
  4782 ;;		___awdiv
  4783 ;;		___awmod
  4784 ;;		___ftmul
  4785 ;;		___wmul
  4786 ;; This function is called by:
  4787 ;;		_printf
  4788 ;; This function uses a non-reentrant model
  4789 ;;
  4790                           
  4791                           	psect	text3
  4792  001B96                     __ptext3:
  4793                           	opt stack 0
  4794  001B96                     _scale:
  4795                           	opt stack 18
  4796                           
  4797                           ;incstack = 0
  4798                           ;scale@scl stored from wreg
  4799  001B96  0101               	movlb	1	; () banked
  4800  001B98  6F29               	movwf	scale@scl& (0+255),b
  4801                           
  4802                           ;doprnt.c: 428: if(scl < 0) {
  4803  001B9A  0101               	movlb	1	; () banked
  4804  001B9C  AF29               	btfss	scale@scl& (0+255),7,b
  4805  001B9E  D12A               	goto	l7299
  4806                           
  4807                           ; BSR set to: 1
  4808                           ;doprnt.c: 429: scl = -scl;
  4809  001BA0  0101               	movlb	1	; () banked
  4810  001BA2  6D29               	negf	scale@scl& (0+255),b
  4811                           
  4812                           ;doprnt.c: 430: if(scl>=110)
  4813  001BA4  0101               	movlb	1	; () banked
  4814  001BA6  5129               	movf	scale@scl& (0+255),w,b
  4815  001BA8  0A80               	xorlw	128
  4816  001BAA  0F12               	addlw	-238
  4817  001BAC  A0D8               	btfss	status,0,c
  4818  001BAE  D0AC               	goto	l7289
  4819                           
  4820                           ; BSR set to: 1
  4821                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4822  001BB0  0E00               	movlw	0
  4823  001BB2  0101               	movlb	1	; () banked
  4824  001BB4  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4825  001BB6  0E03               	movlw	3
  4826  001BB8  6F10               	movwf	___wmul@multiplicand& (0+255),b
  4827  001BBA  0E00               	movlw	0
  4828  001BBC  0101               	movlb	1	; () banked
  4829  001BBE  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  4830  001BC0  0E0A               	movlw	10
  4831  001BC2  6F08               	movwf	___awdiv@divisor& (0+255),b
  4832  001BC4  0E00               	movlw	0
  4833  001BC6  0101               	movlb	1	; () banked
  4834  001BC8  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  4835  001BCA  0E64               	movlw	100
  4836  001BCC  6F02               	movwf	___awmod@divisor& (0+255),b
  4837  001BCE  0101               	movlb	1	; () banked
  4838  001BD0  5129               	movf	scale@scl& (0+255),w,b
  4839  001BD2  0101               	movlb	1	; () banked
  4840  001BD4  6F00               	movwf	___awmod@dividend& (0+255),b
  4841  001BD6  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  4842  001BD8  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  4843  001BDA  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  4844  001BDC  EC10  F023         	call	___awmod	;wreg free
  4845  001BE0  C100  F106         	movff	?___awmod,___awdiv@dividend
  4846  001BE4  C101  F107         	movff	?___awmod+1,___awdiv@dividend+1
  4847  001BE8  ECFC  F021         	call	___awdiv	;wreg free
  4848  001BEC  0E09               	movlw	9
  4849  001BEE  0101               	movlb	1	; () banked
  4850  001BF0  2506               	addwf	?___awdiv& (0+255),w,b
  4851  001BF2  0101               	movlb	1	; () banked
  4852  001BF4  6F0E               	movwf	___wmul@multiplier& (0+255),b
  4853  001BF6  0E00               	movlw	0
  4854  001BF8  0101               	movlb	1	; () banked
  4855  001BFA  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  4856  001BFC  0101               	movlb	1	; () banked
  4857  001BFE  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4858  001C00  EC14  F028         	call	___wmul	;wreg free
  4859  001C04  0E30               	movlw	low __npowers_
  4860  001C06  0101               	movlb	1	; () banked
  4861  001C08  250E               	addwf	?___wmul& (0+255),w,b
  4862  001C0A  6EF6               	movwf	tblptrl,c
  4863  001C0C  0EFC               	movlw	high __npowers_
  4864  001C0E  0101               	movlb	1	; () banked
  4865  001C10  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  4866  001C12  6EF7               	movwf	tblptrh,c
  4867  001C14                     	if	0	;There are less than 3 active tblptr bytes
  4868  001C14                     	endif
  4869  001C14  0009               	tblrd		*+
  4870  001C16  CFF5 F117          	movff	tablat,___ftmul@f2
  4871  001C1A  0009               	tblrd		*+
  4872  001C1C  CFF5 F118          	movff	tablat,___ftmul@f2+1
  4873  001C20  000A               	tblrd		*-
  4874  001C22  CFF5 F119          	movff	tablat,___ftmul@f2+2
  4875  001C26  0E00               	movlw	0
  4876  001C28  0101               	movlb	1	; () banked
  4877  001C2A  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  4878  001C2C  0E64               	movlw	100
  4879  001C2E  6F08               	movwf	___awdiv@divisor& (0+255),b
  4880  001C30  0101               	movlb	1	; () banked
  4881  001C32  5129               	movf	scale@scl& (0+255),w,b
  4882  001C34  0101               	movlb	1	; () banked
  4883  001C36  6F06               	movwf	___awdiv@dividend& (0+255),b
  4884  001C38  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  4885  001C3A  BF06               	btfsc	___awdiv@dividend& (0+255),7,b
  4886  001C3C  0707               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4887  001C3E  ECFC  F021         	call	___awdiv	;wreg free
  4888  001C42  0E12               	movlw	18
  4889  001C44  0101               	movlb	1	; () banked
  4890  001C46  2506               	addwf	?___awdiv& (0+255),w,b
  4891  001C48  0101               	movlb	1	; () banked
  4892  001C4A  6F0E               	movwf	___wmul@multiplier& (0+255),b
  4893  001C4C  0E00               	movlw	0
  4894  001C4E  0101               	movlb	1	; () banked
  4895  001C50  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  4896  001C52  0101               	movlb	1	; () banked
  4897  001C54  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4898  001C56  0E00               	movlw	0
  4899  001C58  0101               	movlb	1	; () banked
  4900  001C5A  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4901  001C5C  0E03               	movlw	3
  4902  001C5E  6F10               	movwf	___wmul@multiplicand& (0+255),b
  4903  001C60  EC14  F028         	call	___wmul	;wreg free
  4904  001C64  0E30               	movlw	low __npowers_
  4905  001C66  0101               	movlb	1	; () banked
  4906  001C68  250E               	addwf	?___wmul& (0+255),w,b
  4907  001C6A  6EF6               	movwf	tblptrl,c
  4908  001C6C  0EFC               	movlw	high __npowers_
  4909  001C6E  0101               	movlb	1	; () banked
  4910  001C70  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  4911  001C72  6EF7               	movwf	tblptrh,c
  4912  001C74                     	if	0	;There are less than 3 active tblptr bytes
  4913  001C74                     	endif
  4914  001C74  0009               	tblrd		*+
  4915  001C76  CFF5 F114          	movff	tablat,___ftmul@f1
  4916  001C7A  0009               	tblrd		*+
  4917  001C7C  CFF5 F115          	movff	tablat,___ftmul@f1+1
  4918  001C80  000A               	tblrd		*-
  4919  001C82  CFF5 F116          	movff	tablat,___ftmul@f1+2
  4920  001C86  ECF2  F019         	call	___ftmul	;wreg free
  4921  001C8A  C114  F126         	movff	?___ftmul,_scale$1446
  4922  001C8E  C115  F127         	movff	?___ftmul+1,_scale$1446+1
  4923  001C92  C116  F128         	movff	?___ftmul+2,_scale$1446+2
  4924                           
  4925                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4926  001C96  C126  F114         	movff	_scale$1446,___ftmul@f1
  4927  001C9A  C127  F115         	movff	_scale$1446+1,___ftmul@f1+1
  4928  001C9E  C128  F116         	movff	_scale$1446+2,___ftmul@f1+2
  4929  001CA2  0E00               	movlw	0
  4930  001CA4  0101               	movlb	1	; () banked
  4931  001CA6  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4932  001CA8  0E03               	movlw	3
  4933  001CAA  6F10               	movwf	___wmul@multiplicand& (0+255),b
  4934  001CAC  0E00               	movlw	0
  4935  001CAE  0101               	movlb	1	; () banked
  4936  001CB0  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  4937  001CB2  0E0A               	movlw	10
  4938  001CB4  6F02               	movwf	___awmod@divisor& (0+255),b
  4939  001CB6  0101               	movlb	1	; () banked
  4940  001CB8  5129               	movf	scale@scl& (0+255),w,b
  4941  001CBA  0101               	movlb	1	; () banked
  4942  001CBC  6F00               	movwf	___awmod@dividend& (0+255),b
  4943  001CBE  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  4944  001CC0  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  4945  001CC2  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  4946  001CC4  EC10  F023         	call	___awmod	;wreg free
  4947  001CC8  C100  F10E         	movff	?___awmod,___wmul@multiplier
  4948  001CCC  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  4949  001CD0  EC14  F028         	call	___wmul	;wreg free
  4950  001CD4  0E30               	movlw	low __npowers_
  4951  001CD6  0101               	movlb	1	; () banked
  4952  001CD8  250E               	addwf	?___wmul& (0+255),w,b
  4953  001CDA  6EF6               	movwf	tblptrl,c
  4954  001CDC  0EFC               	movlw	high __npowers_
  4955  001CDE  0101               	movlb	1	; () banked
  4956  001CE0  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  4957  001CE2  6EF7               	movwf	tblptrh,c
  4958  001CE4                     	if	0	;There are less than 3 active tblptr bytes
  4959  001CE4                     	endif
  4960  001CE4  0009               	tblrd		*+
  4961  001CE6  CFF5 F117          	movff	tablat,___ftmul@f2
  4962  001CEA  0009               	tblrd		*+
  4963  001CEC  CFF5 F118          	movff	tablat,___ftmul@f2+1
  4964  001CF0  000A               	tblrd		*-
  4965  001CF2  CFF5 F119          	movff	tablat,___ftmul@f2+2
  4966  001CF6  ECF2  F019         	call	___ftmul	;wreg free
  4967  001CFA  C114  F123         	movff	?___ftmul,?_scale
  4968  001CFE  C115  F124         	movff	?___ftmul+1,?_scale+1
  4969  001D02  C116  F125         	movff	?___ftmul+2,?_scale+2
  4970  001D06  0012               	return	
  4971  001D08                     l7289:
  4972                           
  4973                           ;doprnt.c: 432: else if(scl > 10)
  4974  001D08  0101               	movlb	1	; () banked
  4975  001D0A  5129               	movf	scale@scl& (0+255),w,b
  4976  001D0C  0A80               	xorlw	128
  4977  001D0E  0F75               	addlw	-139
  4978  001D10  A0D8               	btfss	status,0,c
  4979  001D12  D05D               	goto	l7295
  4980                           
  4981                           ; BSR set to: 1
  4982                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4983  001D14  0E00               	movlw	0
  4984  001D16  0101               	movlb	1	; () banked
  4985  001D18  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  4986  001D1A  0E0A               	movlw	10
  4987  001D1C  6F08               	movwf	___awdiv@divisor& (0+255),b
  4988  001D1E  0101               	movlb	1	; () banked
  4989  001D20  5129               	movf	scale@scl& (0+255),w,b
  4990  001D22  0101               	movlb	1	; () banked
  4991  001D24  6F06               	movwf	___awdiv@dividend& (0+255),b
  4992  001D26  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  4993  001D28  BF06               	btfsc	___awdiv@dividend& (0+255),7,b
  4994  001D2A  0707               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4995  001D2C  ECFC  F021         	call	___awdiv	;wreg free
  4996  001D30  0E09               	movlw	9
  4997  001D32  0101               	movlb	1	; () banked
  4998  001D34  2506               	addwf	?___awdiv& (0+255),w,b
  4999  001D36  0101               	movlb	1	; () banked
  5000  001D38  6F0E               	movwf	___wmul@multiplier& (0+255),b
  5001  001D3A  0E00               	movlw	0
  5002  001D3C  0101               	movlb	1	; () banked
  5003  001D3E  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  5004  001D40  0101               	movlb	1	; () banked
  5005  001D42  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5006  001D44  0E00               	movlw	0
  5007  001D46  0101               	movlb	1	; () banked
  5008  001D48  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5009  001D4A  0E03               	movlw	3
  5010  001D4C  6F10               	movwf	___wmul@multiplicand& (0+255),b
  5011  001D4E  EC14  F028         	call	___wmul	;wreg free
  5012  001D52  0E30               	movlw	low __npowers_
  5013  001D54  0101               	movlb	1	; () banked
  5014  001D56  250E               	addwf	?___wmul& (0+255),w,b
  5015  001D58  6EF6               	movwf	tblptrl,c
  5016  001D5A  0EFC               	movlw	high __npowers_
  5017  001D5C  0101               	movlb	1	; () banked
  5018  001D5E  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  5019  001D60  6EF7               	movwf	tblptrh,c
  5020  001D62                     	if	0	;There are less than 3 active tblptr bytes
  5021  001D62                     	endif
  5022  001D62  0009               	tblrd		*+
  5023  001D64  CFF5 F114          	movff	tablat,___ftmul@f1
  5024  001D68  0009               	tblrd		*+
  5025  001D6A  CFF5 F115          	movff	tablat,___ftmul@f1+1
  5026  001D6E  000A               	tblrd		*-
  5027  001D70  CFF5 F116          	movff	tablat,___ftmul@f1+2
  5028  001D74  0E00               	movlw	0
  5029  001D76  0101               	movlb	1	; () banked
  5030  001D78  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5031  001D7A  0E03               	movlw	3
  5032  001D7C  6F10               	movwf	___wmul@multiplicand& (0+255),b
  5033  001D7E  0E00               	movlw	0
  5034  001D80  0101               	movlb	1	; () banked
  5035  001D82  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  5036  001D84  0E0A               	movlw	10
  5037  001D86  6F02               	movwf	___awmod@divisor& (0+255),b
  5038  001D88  0101               	movlb	1	; () banked
  5039  001D8A  5129               	movf	scale@scl& (0+255),w,b
  5040  001D8C  0101               	movlb	1	; () banked
  5041  001D8E  6F00               	movwf	___awmod@dividend& (0+255),b
  5042  001D90  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  5043  001D92  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  5044  001D94  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  5045  001D96  EC10  F023         	call	___awmod	;wreg free
  5046  001D9A  C100  F10E         	movff	?___awmod,___wmul@multiplier
  5047  001D9E  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  5048  001DA2  EC14  F028         	call	___wmul	;wreg free
  5049  001DA6  0E30               	movlw	low __npowers_
  5050  001DA8  0101               	movlb	1	; () banked
  5051  001DAA  250E               	addwf	?___wmul& (0+255),w,b
  5052  001DAC  6EF6               	movwf	tblptrl,c
  5053  001DAE  0EFC               	movlw	high __npowers_
  5054  001DB0  0101               	movlb	1	; () banked
  5055  001DB2  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  5056  001DB4  6EF7               	movwf	tblptrh,c
  5057  001DB6                     	if	0	;There are less than 3 active tblptr bytes
  5058  001DB6                     	endif
  5059  001DB6  0009               	tblrd		*+
  5060  001DB8  CFF5 F117          	movff	tablat,___ftmul@f2
  5061  001DBC  0009               	tblrd		*+
  5062  001DBE  CFF5 F118          	movff	tablat,___ftmul@f2+1
  5063  001DC2  000A               	tblrd		*-
  5064  001DC4  CFF5 F119          	movff	tablat,___ftmul@f2+2
  5065  001DC8  ECF2  F019         	call	___ftmul	;wreg free
  5066  001DCC  D796               	goto	L2
  5067  001DCE                     l7295:
  5068                           
  5069                           ;doprnt.c: 434: return _npowers_[scl];
  5070  001DCE  0101               	movlb	1	; () banked
  5071  001DD0  5129               	movf	scale@scl& (0+255),w,b
  5072  001DD2  0D03               	mullw	3
  5073  001DD4  0E30               	movlw	low __npowers_
  5074  001DD6  24F3               	addwf	prodl,w,c
  5075  001DD8  6EF6               	movwf	tblptrl,c
  5076  001DDA  0EFC               	movlw	high __npowers_
  5077  001DDC  20F4               	addwfc	prodh,w,c
  5078  001DDE  6EF7               	movwf	tblptrh,c
  5079  001DE0                     	if	0	;There are less than 3 active tblptr bytes
  5080  001DE0                     	endif
  5081  001DE0  0009               	tblrd		*+
  5082  001DE2  CFF5 F123          	movff	tablat,?_scale
  5083  001DE6  0009               	tblrd		*+
  5084  001DE8  CFF5 F124          	movff	tablat,?_scale+1
  5085  001DEC  000A               	tblrd		*-
  5086  001DEE  CFF5 F125          	movff	tablat,?_scale+2
  5087                           
  5088                           ; BSR set to: 1
  5089  001DF2  0012               	return	
  5090  001DF4                     l7299:
  5091                           
  5092                           ; BSR set to: 1
  5093                           ;doprnt.c: 435: }
  5094                           ;doprnt.c: 436: if(scl>=110)
  5095  001DF4  0101               	movlb	1	; () banked
  5096  001DF6  5129               	movf	scale@scl& (0+255),w,b
  5097  001DF8  0A80               	xorlw	128
  5098  001DFA  0F12               	addlw	-238
  5099  001DFC  A0D8               	btfss	status,0,c
  5100  001DFE  D0AC               	goto	l7307
  5101                           
  5102                           ; BSR set to: 1
  5103                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5104  001E00  0E00               	movlw	0
  5105  001E02  0101               	movlb	1	; () banked
  5106  001E04  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5107  001E06  0E03               	movlw	3
  5108  001E08  6F10               	movwf	___wmul@multiplicand& (0+255),b
  5109  001E0A  0E00               	movlw	0
  5110  001E0C  0101               	movlb	1	; () banked
  5111  001E0E  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  5112  001E10  0E0A               	movlw	10
  5113  001E12  6F08               	movwf	___awdiv@divisor& (0+255),b
  5114  001E14  0E00               	movlw	0
  5115  001E16  0101               	movlb	1	; () banked
  5116  001E18  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  5117  001E1A  0E64               	movlw	100
  5118  001E1C  6F02               	movwf	___awmod@divisor& (0+255),b
  5119  001E1E  0101               	movlb	1	; () banked
  5120  001E20  5129               	movf	scale@scl& (0+255),w,b
  5121  001E22  0101               	movlb	1	; () banked
  5122  001E24  6F00               	movwf	___awmod@dividend& (0+255),b
  5123  001E26  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  5124  001E28  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  5125  001E2A  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  5126  001E2C  EC10  F023         	call	___awmod	;wreg free
  5127  001E30  C100  F106         	movff	?___awmod,___awdiv@dividend
  5128  001E34  C101  F107         	movff	?___awmod+1,___awdiv@dividend+1
  5129  001E38  ECFC  F021         	call	___awdiv	;wreg free
  5130  001E3C  0E09               	movlw	9
  5131  001E3E  0101               	movlb	1	; () banked
  5132  001E40  2506               	addwf	?___awdiv& (0+255),w,b
  5133  001E42  0101               	movlb	1	; () banked
  5134  001E44  6F0E               	movwf	___wmul@multiplier& (0+255),b
  5135  001E46  0E00               	movlw	0
  5136  001E48  0101               	movlb	1	; () banked
  5137  001E4A  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  5138  001E4C  0101               	movlb	1	; () banked
  5139  001E4E  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5140  001E50  EC14  F028         	call	___wmul	;wreg free
  5141  001E54  0E09               	movlw	low __powers_
  5142  001E56  0101               	movlb	1	; () banked
  5143  001E58  250E               	addwf	?___wmul& (0+255),w,b
  5144  001E5A  6EF6               	movwf	tblptrl,c
  5145  001E5C  0EFC               	movlw	high __powers_
  5146  001E5E  0101               	movlb	1	; () banked
  5147  001E60  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  5148  001E62  6EF7               	movwf	tblptrh,c
  5149  001E64                     	if	0	;There are less than 3 active tblptr bytes
  5150  001E64                     	endif
  5151  001E64  0009               	tblrd		*+
  5152  001E66  CFF5 F117          	movff	tablat,___ftmul@f2
  5153  001E6A  0009               	tblrd		*+
  5154  001E6C  CFF5 F118          	movff	tablat,___ftmul@f2+1
  5155  001E70  000A               	tblrd		*-
  5156  001E72  CFF5 F119          	movff	tablat,___ftmul@f2+2
  5157  001E76  0E00               	movlw	0
  5158  001E78  0101               	movlb	1	; () banked
  5159  001E7A  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  5160  001E7C  0E64               	movlw	100
  5161  001E7E  6F08               	movwf	___awdiv@divisor& (0+255),b
  5162  001E80  0101               	movlb	1	; () banked
  5163  001E82  5129               	movf	scale@scl& (0+255),w,b
  5164  001E84  0101               	movlb	1	; () banked
  5165  001E86  6F06               	movwf	___awdiv@dividend& (0+255),b
  5166  001E88  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  5167  001E8A  BF06               	btfsc	___awdiv@dividend& (0+255),7,b
  5168  001E8C  0707               	decf	(___awdiv@dividend+1)& (0+255),f,b
  5169  001E8E  ECFC  F021         	call	___awdiv	;wreg free
  5170  001E92  0E12               	movlw	18
  5171  001E94  0101               	movlb	1	; () banked
  5172  001E96  2506               	addwf	?___awdiv& (0+255),w,b
  5173  001E98  0101               	movlb	1	; () banked
  5174  001E9A  6F0E               	movwf	___wmul@multiplier& (0+255),b
  5175  001E9C  0E00               	movlw	0
  5176  001E9E  0101               	movlb	1	; () banked
  5177  001EA0  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  5178  001EA2  0101               	movlb	1	; () banked
  5179  001EA4  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5180  001EA6  0E00               	movlw	0
  5181  001EA8  0101               	movlb	1	; () banked
  5182  001EAA  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5183  001EAC  0E03               	movlw	3
  5184  001EAE  6F10               	movwf	___wmul@multiplicand& (0+255),b
  5185  001EB0  EC14  F028         	call	___wmul	;wreg free
  5186  001EB4  0E09               	movlw	low __powers_
  5187  001EB6  0101               	movlb	1	; () banked
  5188  001EB8  250E               	addwf	?___wmul& (0+255),w,b
  5189  001EBA  6EF6               	movwf	tblptrl,c
  5190  001EBC  0EFC               	movlw	high __powers_
  5191  001EBE  0101               	movlb	1	; () banked
  5192  001EC0  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  5193  001EC2  6EF7               	movwf	tblptrh,c
  5194  001EC4                     	if	0	;There are less than 3 active tblptr bytes
  5195  001EC4                     	endif
  5196  001EC4  0009               	tblrd		*+
  5197  001EC6  CFF5 F114          	movff	tablat,___ftmul@f1
  5198  001ECA  0009               	tblrd		*+
  5199  001ECC  CFF5 F115          	movff	tablat,___ftmul@f1+1
  5200  001ED0  000A               	tblrd		*-
  5201  001ED2  CFF5 F116          	movff	tablat,___ftmul@f1+2
  5202  001ED6  ECF2  F019         	call	___ftmul	;wreg free
  5203  001EDA  C114  F126         	movff	?___ftmul,_scale$1446
  5204  001EDE  C115  F127         	movff	?___ftmul+1,_scale$1446+1
  5205  001EE2  C116  F128         	movff	?___ftmul+2,_scale$1446+2
  5206                           
  5207                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5208  001EE6  C126  F114         	movff	_scale$1446,___ftmul@f1
  5209  001EEA  C127  F115         	movff	_scale$1446+1,___ftmul@f1+1
  5210  001EEE  C128  F116         	movff	_scale$1446+2,___ftmul@f1+2
  5211  001EF2  0E00               	movlw	0
  5212  001EF4  0101               	movlb	1	; () banked
  5213  001EF6  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5214  001EF8  0E03               	movlw	3
  5215  001EFA  6F10               	movwf	___wmul@multiplicand& (0+255),b
  5216  001EFC  0E00               	movlw	0
  5217  001EFE  0101               	movlb	1	; () banked
  5218  001F00  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  5219  001F02  0E0A               	movlw	10
  5220  001F04  6F02               	movwf	___awmod@divisor& (0+255),b
  5221  001F06  0101               	movlb	1	; () banked
  5222  001F08  5129               	movf	scale@scl& (0+255),w,b
  5223  001F0A  0101               	movlb	1	; () banked
  5224  001F0C  6F00               	movwf	___awmod@dividend& (0+255),b
  5225  001F0E  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  5226  001F10  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  5227  001F12  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  5228  001F14  EC10  F023         	call	___awmod	;wreg free
  5229  001F18  C100  F10E         	movff	?___awmod,___wmul@multiplier
  5230  001F1C  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  5231  001F20  EC14  F028         	call	___wmul	;wreg free
  5232  001F24  0E09               	movlw	low __powers_
  5233  001F26  0101               	movlb	1	; () banked
  5234  001F28  250E               	addwf	?___wmul& (0+255),w,b
  5235  001F2A  6EF6               	movwf	tblptrl,c
  5236  001F2C  0EFC               	movlw	high __powers_
  5237  001F2E  0101               	movlb	1	; () banked
  5238  001F30  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  5239  001F32  6EF7               	movwf	tblptrh,c
  5240  001F34                     	if	0	;There are less than 3 active tblptr bytes
  5241  001F34                     	endif
  5242  001F34  0009               	tblrd		*+
  5243  001F36  CFF5 F117          	movff	tablat,___ftmul@f2
  5244  001F3A  0009               	tblrd		*+
  5245  001F3C  CFF5 F118          	movff	tablat,___ftmul@f2+1
  5246  001F40  000A               	tblrd		*-
  5247  001F42  CFF5 F119          	movff	tablat,___ftmul@f2+2
  5248  001F46  ECF2  F019         	call	___ftmul	;wreg free
  5249  001F4A  C114  F123         	movff	?___ftmul,?_scale
  5250  001F4E  C115  F124         	movff	?___ftmul+1,?_scale+1
  5251  001F52  C116  F125         	movff	?___ftmul+2,?_scale+2
  5252  001F56  0012               	return	
  5253  001F58                     l7307:
  5254                           
  5255                           ;doprnt.c: 438: else if(scl > 10)
  5256  001F58  0101               	movlb	1	; () banked
  5257  001F5A  5129               	movf	scale@scl& (0+255),w,b
  5258  001F5C  0A80               	xorlw	128
  5259  001F5E  0F75               	addlw	-139
  5260  001F60  A0D8               	btfss	status,0,c
  5261  001F62  D05D               	goto	l7313
  5262                           
  5263                           ; BSR set to: 1
  5264                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5265  001F64  0E00               	movlw	0
  5266  001F66  0101               	movlb	1	; () banked
  5267  001F68  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  5268  001F6A  0E0A               	movlw	10
  5269  001F6C  6F08               	movwf	___awdiv@divisor& (0+255),b
  5270  001F6E  0101               	movlb	1	; () banked
  5271  001F70  5129               	movf	scale@scl& (0+255),w,b
  5272  001F72  0101               	movlb	1	; () banked
  5273  001F74  6F06               	movwf	___awdiv@dividend& (0+255),b
  5274  001F76  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  5275  001F78  BF06               	btfsc	___awdiv@dividend& (0+255),7,b
  5276  001F7A  0707               	decf	(___awdiv@dividend+1)& (0+255),f,b
  5277  001F7C  ECFC  F021         	call	___awdiv	;wreg free
  5278  001F80  0E09               	movlw	9
  5279  001F82  0101               	movlb	1	; () banked
  5280  001F84  2506               	addwf	?___awdiv& (0+255),w,b
  5281  001F86  0101               	movlb	1	; () banked
  5282  001F88  6F0E               	movwf	___wmul@multiplier& (0+255),b
  5283  001F8A  0E00               	movlw	0
  5284  001F8C  0101               	movlb	1	; () banked
  5285  001F8E  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  5286  001F90  0101               	movlb	1	; () banked
  5287  001F92  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5288  001F94  0E00               	movlw	0
  5289  001F96  0101               	movlb	1	; () banked
  5290  001F98  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5291  001F9A  0E03               	movlw	3
  5292  001F9C  6F10               	movwf	___wmul@multiplicand& (0+255),b
  5293  001F9E  EC14  F028         	call	___wmul	;wreg free
  5294  001FA2  0E09               	movlw	low __powers_
  5295  001FA4  0101               	movlb	1	; () banked
  5296  001FA6  250E               	addwf	?___wmul& (0+255),w,b
  5297  001FA8  6EF6               	movwf	tblptrl,c
  5298  001FAA  0EFC               	movlw	high __powers_
  5299  001FAC  0101               	movlb	1	; () banked
  5300  001FAE  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  5301  001FB0  6EF7               	movwf	tblptrh,c
  5302  001FB2                     	if	0	;There are less than 3 active tblptr bytes
  5303  001FB2                     	endif
  5304  001FB2  0009               	tblrd		*+
  5305  001FB4  CFF5 F114          	movff	tablat,___ftmul@f1
  5306  001FB8  0009               	tblrd		*+
  5307  001FBA  CFF5 F115          	movff	tablat,___ftmul@f1+1
  5308  001FBE  000A               	tblrd		*-
  5309  001FC0  CFF5 F116          	movff	tablat,___ftmul@f1+2
  5310  001FC4  0E00               	movlw	0
  5311  001FC6  0101               	movlb	1	; () banked
  5312  001FC8  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5313  001FCA  0E03               	movlw	3
  5314  001FCC  6F10               	movwf	___wmul@multiplicand& (0+255),b
  5315  001FCE  0E00               	movlw	0
  5316  001FD0  0101               	movlb	1	; () banked
  5317  001FD2  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  5318  001FD4  0E0A               	movlw	10
  5319  001FD6  6F02               	movwf	___awmod@divisor& (0+255),b
  5320  001FD8  0101               	movlb	1	; () banked
  5321  001FDA  5129               	movf	scale@scl& (0+255),w,b
  5322  001FDC  0101               	movlb	1	; () banked
  5323  001FDE  6F00               	movwf	___awmod@dividend& (0+255),b
  5324  001FE0  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  5325  001FE2  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  5326  001FE4  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  5327  001FE6  EC10  F023         	call	___awmod	;wreg free
  5328  001FEA  C100  F10E         	movff	?___awmod,___wmul@multiplier
  5329  001FEE  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  5330  001FF2  EC14  F028         	call	___wmul	;wreg free
  5331  001FF6  0E09               	movlw	low __powers_
  5332  001FF8  0101               	movlb	1	; () banked
  5333  001FFA  250E               	addwf	?___wmul& (0+255),w,b
  5334  001FFC  6EF6               	movwf	tblptrl,c
  5335  001FFE  0EFC               	movlw	high __powers_
  5336  002000  0101               	movlb	1	; () banked
  5337  002002  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  5338  002004  6EF7               	movwf	tblptrh,c
  5339  002006                     	if	0	;There are less than 3 active tblptr bytes
  5340  002006                     	endif
  5341  002006  0009               	tblrd		*+
  5342  002008  CFF5 F117          	movff	tablat,___ftmul@f2
  5343  00200C  0009               	tblrd		*+
  5344  00200E  CFF5 F118          	movff	tablat,___ftmul@f2+1
  5345  002012  000A               	tblrd		*-
  5346  002014  CFF5 F119          	movff	tablat,___ftmul@f2+2
  5347  002018  ECF2  F019         	call	___ftmul	;wreg free
  5348  00201C  D796               	goto	L3
  5349  00201E                     l7313:
  5350                           
  5351                           ;doprnt.c: 440: return _powers_[scl];
  5352  00201E  0101               	movlb	1	; () banked
  5353  002020  5129               	movf	scale@scl& (0+255),w,b
  5354  002022  0D03               	mullw	3
  5355  002024  0E09               	movlw	low __powers_
  5356  002026  24F3               	addwf	prodl,w,c
  5357  002028  6EF6               	movwf	tblptrl,c
  5358  00202A  0EFC               	movlw	high __powers_
  5359  00202C  20F4               	addwfc	prodh,w,c
  5360  00202E  6EF7               	movwf	tblptrh,c
  5361  002030                     	if	0	;There are less than 3 active tblptr bytes
  5362  002030                     	endif
  5363  002030  0009               	tblrd		*+
  5364  002032  CFF5 F123          	movff	tablat,?_scale
  5365  002036  0009               	tblrd		*+
  5366  002038  CFF5 F124          	movff	tablat,?_scale+1
  5367  00203C  000A               	tblrd		*-
  5368  00203E  CFF5 F125          	movff	tablat,?_scale+2
  5369  002042  0012               	return	
  5370  002044                     __end_of_scale:
  5371                           	opt stack 0
  5372                           tblptru	equ	0xFF8
  5373                           tblptrh	equ	0xFF7
  5374                           tblptrl	equ	0xFF6
  5375                           tablat	equ	0xFF5
  5376                           prodh	equ	0xFF4
  5377                           prodl	equ	0xFF3
  5378                           intcon	equ	0xFF2
  5379                           intcon3	equ	0xFF0
  5380                           postinc0	equ	0xFEE
  5381                           wreg	equ	0xFE8
  5382                           indf2	equ	0xFDF
  5383                           postinc2	equ	0xFDE
  5384                           postdec2	equ	0xFDD
  5385                           fsr2h	equ	0xFDA
  5386                           fsr2l	equ	0xFD9
  5387                           status	equ	0xFD8
  5388                           
  5389 ;; *************** function _putch *****************
  5390 ;; Defined at:
  5391 ;;		line 25 in file "lcd.c"
  5392 ;; Parameters:    Size  Location     Type
  5393 ;;  data            1    wreg     unsigned char 
  5394 ;; Auto vars:     Size  Location     Type
  5395 ;;  data            1    2[BANK1 ] unsigned char 
  5396 ;; Return value:  Size  Location     Type
  5397 ;;                  1    wreg      void 
  5398 ;; Registers used:
  5399 ;;		wreg, status,2, status,0, cstack
  5400 ;; Tracked objects:
  5401 ;;		On entry : 0/0
  5402 ;;		On exit  : 0/0
  5403 ;;		Unchanged: 0/0
  5404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5406 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5408 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5409 ;;Total ram usage:        1 bytes
  5410 ;; Hardware stack levels used:    1
  5411 ;; Hardware stack levels required when called:    9
  5412 ;; This function calls:
  5413 ;;		_lcdNibble
  5414 ;; This function is called by:
  5415 ;;		_printf
  5416 ;; This function uses a non-reentrant model
  5417 ;;
  5418                           
  5419                           	psect	text4
  5420  0052EC                     __ptext4:
  5421                           	opt stack 0
  5422  0052EC                     _putch:
  5423                           	opt stack 19
  5424                           
  5425                           ;incstack = 0
  5426                           ;putch@data stored from wreg
  5427  0052EC  0101               	movlb	1	; () banked
  5428  0052EE  6F02               	movwf	putch@data& (0+255),b
  5429                           
  5430                           ;lcd.c: 26: LATDbits.LATD2 = 1;
  5431  0052F0  848C               	bsf	3980,2,c	;volatile
  5432                           
  5433                           ;lcd.c: 27: lcdNibble(data);
  5434  0052F2  0101               	movlb	1	; () banked
  5435  0052F4  5102               	movf	putch@data& (0+255),w,b
  5436  0052F6  EC31  F026         	call	_lcdNibble
  5437  0052FA  0012               	return		;funcret
  5438  0052FC                     __end_of_putch:
  5439                           	opt stack 0
  5440                           tblptru	equ	0xFF8
  5441                           tblptrh	equ	0xFF7
  5442                           tblptrl	equ	0xFF6
  5443                           tablat	equ	0xFF5
  5444                           prodh	equ	0xFF4
  5445                           prodl	equ	0xFF3
  5446                           intcon	equ	0xFF2
  5447                           intcon3	equ	0xFF0
  5448                           postinc0	equ	0xFEE
  5449                           wreg	equ	0xFE8
  5450                           indf2	equ	0xFDF
  5451                           postinc2	equ	0xFDE
  5452                           postdec2	equ	0xFDD
  5453                           fsr2h	equ	0xFDA
  5454                           fsr2l	equ	0xFD9
  5455                           status	equ	0xFD8
  5456                           
  5457 ;; *************** function _isdigit *****************
  5458 ;; Defined at:
  5459 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  5460 ;; Parameters:    Size  Location     Type
  5461 ;;  c               1    wreg     unsigned char 
  5462 ;; Auto vars:     Size  Location     Type
  5463 ;;  c               1    2[BANK1 ] unsigned char 
  5464 ;; Return value:  Size  Location     Type
  5465 ;;		None               void
  5466 ;; Registers used:
  5467 ;;		wreg, status,2, status,0
  5468 ;; Tracked objects:
  5469 ;;		On entry : 0/0
  5470 ;;		On exit  : 0/0
  5471 ;;		Unchanged: 0/0
  5472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5474 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5475 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5476 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5477 ;;Total ram usage:        3 bytes
  5478 ;; Hardware stack levels used:    1
  5479 ;; Hardware stack levels required when called:    8
  5480 ;; This function calls:
  5481 ;;		Nothing
  5482 ;; This function is called by:
  5483 ;;		_printf
  5484 ;; This function uses a non-reentrant model
  5485 ;;
  5486                           
  5487                           	psect	text5
  5488  00511A                     __ptext5:
  5489                           	opt stack 0
  5490  00511A                     _isdigit:
  5491                           	opt stack 20
  5492                           
  5493                           ;incstack = 0
  5494                           ;isdigit@c stored from wreg
  5495  00511A  0101               	movlb	1	; () banked
  5496  00511C  6F02               	movwf	isdigit@c& (0+255),b
  5497  00511E  0E00               	movlw	0
  5498  005120  0101               	movlb	1	; () banked
  5499  005122  6F01               	movwf	_isdigit$1086& (0+255),b
  5500                           
  5501                           ; BSR set to: 1
  5502  005124  0E3A               	movlw	58
  5503  005126  0101               	movlb	1	; () banked
  5504  005128  6102               	cpfslt	isdigit@c& (0+255),b
  5505  00512A  D007               	goto	l7325
  5506                           
  5507                           ; BSR set to: 1
  5508  00512C  0E2F               	movlw	47
  5509  00512E  0101               	movlb	1	; () banked
  5510  005130  6502               	cpfsgt	isdigit@c& (0+255),b
  5511  005132  D003               	goto	l7325
  5512                           
  5513                           ; BSR set to: 1
  5514  005134  0E01               	movlw	1
  5515  005136  0101               	movlb	1	; () banked
  5516  005138  6F01               	movwf	_isdigit$1086& (0+255),b
  5517  00513A                     l7325:
  5518                           
  5519                           ; BSR set to: 1
  5520  00513A  C101  F100         	movff	_isdigit$1086,??_isdigit
  5521  00513E  0101               	movlb	1	; () banked
  5522  005140  3100               	rrcf	??_isdigit& (0+255),w,b
  5523  005142  0012               	return	
  5524  005144                     __end_of_isdigit:
  5525                           	opt stack 0
  5526                           tblptru	equ	0xFF8
  5527                           tblptrh	equ	0xFF7
  5528                           tblptrl	equ	0xFF6
  5529                           tablat	equ	0xFF5
  5530                           prodh	equ	0xFF4
  5531                           prodl	equ	0xFF3
  5532                           intcon	equ	0xFF2
  5533                           intcon3	equ	0xFF0
  5534                           postinc0	equ	0xFEE
  5535                           wreg	equ	0xFE8
  5536                           indf2	equ	0xFDF
  5537                           postinc2	equ	0xFDE
  5538                           postdec2	equ	0xFDD
  5539                           fsr2h	equ	0xFDA
  5540                           fsr2l	equ	0xFD9
  5541                           status	equ	0xFD8
  5542                           
  5543 ;; *************** function _fround *****************
  5544 ;; Defined at:
  5545 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  5546 ;; Parameters:    Size  Location     Type
  5547 ;;  prec            1    wreg     unsigned char 
  5548 ;; Auto vars:     Size  Location     Type
  5549 ;;  prec            1   44[BANK1 ] unsigned char 
  5550 ;; Return value:  Size  Location     Type
  5551 ;;                  3   35[BANK1 ] unsigned char 
  5552 ;; Registers used:
  5553 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5554 ;; Tracked objects:
  5555 ;;		On entry : 0/0
  5556 ;;		On exit  : 0/0
  5557 ;;		Unchanged: 0/0
  5558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5559 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5560 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5562 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5563 ;;Total ram usage:       10 bytes
  5564 ;; Hardware stack levels used:    1
  5565 ;; Hardware stack levels required when called:   10
  5566 ;; This function calls:
  5567 ;;		___awdiv
  5568 ;;		___awmod
  5569 ;;		___ftmul
  5570 ;;		___wmul
  5571 ;; This function is called by:
  5572 ;;		_printf
  5573 ;; This function uses a non-reentrant model
  5574 ;;
  5575                           
  5576                           	psect	text6
  5577  002434                     __ptext6:
  5578                           	opt stack 0
  5579  002434                     _fround:
  5580                           	opt stack 18
  5581                           
  5582                           ; BSR set to: 1
  5583                           ;incstack = 0
  5584                           ;fround@prec stored from wreg
  5585  002434  0101               	movlb	1	; () banked
  5586  002436  6F2C               	movwf	fround@prec& (0+255),b
  5587                           
  5588                           ;doprnt.c: 413: if(prec>=110)
  5589  002438  0E6D               	movlw	109
  5590  00243A  0101               	movlb	1	; () banked
  5591  00243C  652C               	cpfsgt	fround@prec& (0+255),b
  5592  00243E  D0BA               	goto	l7267
  5593                           
  5594                           ; BSR set to: 1
  5595                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5596  002440  0E00               	movlw	0
  5597  002442  0101               	movlb	1	; () banked
  5598  002444  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5599  002446  0E03               	movlw	3
  5600  002448  6F10               	movwf	___wmul@multiplicand& (0+255),b
  5601  00244A  0E00               	movlw	0
  5602  00244C  0101               	movlb	1	; () banked
  5603  00244E  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  5604  002450  0E0A               	movlw	10
  5605  002452  6F08               	movwf	___awdiv@divisor& (0+255),b
  5606  002454  0E00               	movlw	0
  5607  002456  0101               	movlb	1	; () banked
  5608  002458  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  5609  00245A  0E64               	movlw	100
  5610  00245C  6F02               	movwf	___awmod@divisor& (0+255),b
  5611  00245E  C12C  F100         	movff	fround@prec,___awmod@dividend
  5612  002462  0101               	movlb	1	; () banked
  5613  002464  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  5614  002466  EC10  F023         	call	___awmod	;wreg free
  5615  00246A  C100  F106         	movff	?___awmod,___awdiv@dividend
  5616  00246E  C101  F107         	movff	?___awmod+1,___awdiv@dividend+1
  5617  002472  ECFC  F021         	call	___awdiv	;wreg free
  5618  002476  0E09               	movlw	9
  5619  002478  0101               	movlb	1	; () banked
  5620  00247A  2506               	addwf	?___awdiv& (0+255),w,b
  5621  00247C  0101               	movlb	1	; () banked
  5622  00247E  6F0E               	movwf	___wmul@multiplier& (0+255),b
  5623  002480  0E00               	movlw	0
  5624  002482  0101               	movlb	1	; () banked
  5625  002484  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  5626  002486  0101               	movlb	1	; () banked
  5627  002488  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5628  00248A  EC14  F028         	call	___wmul	;wreg free
  5629  00248E  0E30               	movlw	low __npowers_
  5630  002490  0101               	movlb	1	; () banked
  5631  002492  250E               	addwf	?___wmul& (0+255),w,b
  5632  002494  6EF6               	movwf	tblptrl,c
  5633  002496  0EFC               	movlw	high __npowers_
  5634  002498  0101               	movlb	1	; () banked
  5635  00249A  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  5636  00249C  6EF7               	movwf	tblptrh,c
  5637  00249E                     	if	0	;There are less than 3 active tblptr bytes
  5638  00249E                     	endif
  5639  00249E  0009               	tblrd		*+
  5640  0024A0  CFF5 F117          	movff	tablat,___ftmul@f2
  5641  0024A4  0009               	tblrd		*+
  5642  0024A6  CFF5 F118          	movff	tablat,___ftmul@f2+1
  5643  0024AA  000A               	tblrd		*-
  5644  0024AC  CFF5 F119          	movff	tablat,___ftmul@f2+2
  5645  0024B0  0E00               	movlw	0
  5646  0024B2  0101               	movlb	1	; () banked
  5647  0024B4  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  5648  0024B6  0E64               	movlw	100
  5649  0024B8  6F08               	movwf	___awdiv@divisor& (0+255),b
  5650  0024BA  C12C  F106         	movff	fround@prec,___awdiv@dividend
  5651  0024BE  0101               	movlb	1	; () banked
  5652  0024C0  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  5653  0024C2  ECFC  F021         	call	___awdiv	;wreg free
  5654  0024C6  0E12               	movlw	18
  5655  0024C8  0101               	movlb	1	; () banked
  5656  0024CA  2506               	addwf	?___awdiv& (0+255),w,b
  5657  0024CC  0101               	movlb	1	; () banked
  5658  0024CE  6F0E               	movwf	___wmul@multiplier& (0+255),b
  5659  0024D0  0E00               	movlw	0
  5660  0024D2  0101               	movlb	1	; () banked
  5661  0024D4  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  5662  0024D6  0101               	movlb	1	; () banked
  5663  0024D8  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5664  0024DA  0E00               	movlw	0
  5665  0024DC  0101               	movlb	1	; () banked
  5666  0024DE  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5667  0024E0  0E03               	movlw	3
  5668  0024E2  6F10               	movwf	___wmul@multiplicand& (0+255),b
  5669  0024E4  EC14  F028         	call	___wmul	;wreg free
  5670  0024E8  0E30               	movlw	low __npowers_
  5671  0024EA  0101               	movlb	1	; () banked
  5672  0024EC  250E               	addwf	?___wmul& (0+255),w,b
  5673  0024EE  6EF6               	movwf	tblptrl,c
  5674  0024F0  0EFC               	movlw	high __npowers_
  5675  0024F2  0101               	movlb	1	; () banked
  5676  0024F4  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  5677  0024F6  6EF7               	movwf	tblptrh,c
  5678  0024F8                     	if	0	;There are less than 3 active tblptr bytes
  5679  0024F8                     	endif
  5680  0024F8  0009               	tblrd		*+
  5681  0024FA  CFF5 F114          	movff	tablat,___ftmul@f1
  5682  0024FE  0009               	tblrd		*+
  5683  002500  CFF5 F115          	movff	tablat,___ftmul@f1+1
  5684  002504  000A               	tblrd		*-
  5685  002506  CFF5 F116          	movff	tablat,___ftmul@f1+2
  5686  00250A  ECF2  F019         	call	___ftmul	;wreg free
  5687  00250E  C114  F129         	movff	?___ftmul,_fround$1444
  5688  002512  C115  F12A         	movff	?___ftmul+1,_fround$1444+1
  5689  002516  C116  F12B         	movff	?___ftmul+2,_fround$1444+2
  5690                           
  5691                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5692  00251A  0E00               	movlw	0
  5693  00251C  0101               	movlb	1	; () banked
  5694  00251E  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5695  002520  0E03               	movlw	3
  5696  002522  6F10               	movwf	___wmul@multiplicand& (0+255),b
  5697  002524  0E00               	movlw	0
  5698  002526  0101               	movlb	1	; () banked
  5699  002528  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  5700  00252A  0E0A               	movlw	10
  5701  00252C  6F02               	movwf	___awmod@divisor& (0+255),b
  5702  00252E  C12C  F100         	movff	fround@prec,___awmod@dividend
  5703  002532  0101               	movlb	1	; () banked
  5704  002534  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  5705  002536  EC10  F023         	call	___awmod	;wreg free
  5706  00253A  C100  F10E         	movff	?___awmod,___wmul@multiplier
  5707  00253E  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  5708  002542  EC14  F028         	call	___wmul	;wreg free
  5709  002546  0E30               	movlw	low __npowers_
  5710  002548  0101               	movlb	1	; () banked
  5711  00254A  250E               	addwf	?___wmul& (0+255),w,b
  5712  00254C  6EF6               	movwf	tblptrl,c
  5713  00254E  0EFC               	movlw	high __npowers_
  5714  002550  0101               	movlb	1	; () banked
  5715  002552  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  5716  002554  6EF7               	movwf	tblptrh,c
  5717  002556                     	if	0	;There are less than 3 active tblptr bytes
  5718  002556                     	endif
  5719  002556  0009               	tblrd		*+
  5720  002558  CFF5 F117          	movff	tablat,___ftmul@f2
  5721  00255C  0009               	tblrd		*+
  5722  00255E  CFF5 F118          	movff	tablat,___ftmul@f2+1
  5723  002562  000A               	tblrd		*-
  5724  002564  CFF5 F119          	movff	tablat,___ftmul@f2+2
  5725  002568  C129  F114         	movff	_fround$1444,___ftmul@f1
  5726  00256C  C12A  F115         	movff	_fround$1444+1,___ftmul@f1+1
  5727  002570  C12B  F116         	movff	_fround$1444+2,___ftmul@f1+2
  5728  002574  ECF2  F019         	call	___ftmul	;wreg free
  5729  002578  C114  F126         	movff	?___ftmul,_fround$1445
  5730  00257C  C115  F127         	movff	?___ftmul+1,_fround$1445+1
  5731  002580  C116  F128         	movff	?___ftmul+2,_fround$1445+2
  5732                           
  5733                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5734  002584  C126  F114         	movff	_fround$1445,___ftmul@f1
  5735  002588  C127  F115         	movff	_fround$1445+1,___ftmul@f1+1
  5736  00258C  C128  F116         	movff	_fround$1445+2,___ftmul@f1+2
  5737  002590  0E00               	movlw	0
  5738  002592  0101               	movlb	1	; () banked
  5739  002594  6F17               	movwf	___ftmul@f2& (0+255),b
  5740  002596  0E00               	movlw	0
  5741  002598  0101               	movlb	1	; () banked
  5742  00259A  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
  5743  00259C  0E3F               	movlw	63
  5744  00259E  0101               	movlb	1	; () banked
  5745  0025A0  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
  5746  0025A2  ECF2  F019         	call	___ftmul	;wreg free
  5747  0025A6  C114  F123         	movff	?___ftmul,?_fround
  5748  0025AA  C115  F124         	movff	?___ftmul+1,?_fround+1
  5749  0025AE  C116  F125         	movff	?___ftmul+2,?_fround+2
  5750  0025B2  0012               	return	
  5751  0025B4                     l7267:
  5752                           
  5753                           ;doprnt.c: 415: else if(prec > 10)
  5754  0025B4  0E0A               	movlw	10
  5755  0025B6  0101               	movlb	1	; () banked
  5756  0025B8  652C               	cpfsgt	fround@prec& (0+255),b
  5757  0025BA  D06E               	goto	l7275
  5758                           
  5759                           ; BSR set to: 1
  5760                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5761  0025BC  0E00               	movlw	0
  5762  0025BE  0101               	movlb	1	; () banked
  5763  0025C0  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5764  0025C2  0E03               	movlw	3
  5765  0025C4  6F10               	movwf	___wmul@multiplicand& (0+255),b
  5766  0025C6  0E00               	movlw	0
  5767  0025C8  0101               	movlb	1	; () banked
  5768  0025CA  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  5769  0025CC  0E0A               	movlw	10
  5770  0025CE  6F02               	movwf	___awmod@divisor& (0+255),b
  5771  0025D0  C12C  F100         	movff	fround@prec,___awmod@dividend
  5772  0025D4  0101               	movlb	1	; () banked
  5773  0025D6  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  5774  0025D8  EC10  F023         	call	___awmod	;wreg free
  5775  0025DC  C100  F10E         	movff	?___awmod,___wmul@multiplier
  5776  0025E0  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  5777  0025E4  EC14  F028         	call	___wmul	;wreg free
  5778  0025E8  0E30               	movlw	low __npowers_
  5779  0025EA  0101               	movlb	1	; () banked
  5780  0025EC  250E               	addwf	?___wmul& (0+255),w,b
  5781  0025EE  6EF6               	movwf	tblptrl,c
  5782  0025F0  0EFC               	movlw	high __npowers_
  5783  0025F2  0101               	movlb	1	; () banked
  5784  0025F4  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  5785  0025F6  6EF7               	movwf	tblptrh,c
  5786  0025F8                     	if	0	;There are less than 3 active tblptr bytes
  5787  0025F8                     	endif
  5788  0025F8  0009               	tblrd		*+
  5789  0025FA  CFF5 F117          	movff	tablat,___ftmul@f2
  5790  0025FE  0009               	tblrd		*+
  5791  002600  CFF5 F118          	movff	tablat,___ftmul@f2+1
  5792  002604  000A               	tblrd		*-
  5793  002606  CFF5 F119          	movff	tablat,___ftmul@f2+2
  5794  00260A  0E00               	movlw	0
  5795  00260C  0101               	movlb	1	; () banked
  5796  00260E  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  5797  002610  0E0A               	movlw	10
  5798  002612  6F08               	movwf	___awdiv@divisor& (0+255),b
  5799  002614  C12C  F106         	movff	fround@prec,___awdiv@dividend
  5800  002618  0101               	movlb	1	; () banked
  5801  00261A  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  5802  00261C  ECFC  F021         	call	___awdiv	;wreg free
  5803  002620  0E09               	movlw	9
  5804  002622  0101               	movlb	1	; () banked
  5805  002624  2506               	addwf	?___awdiv& (0+255),w,b
  5806  002626  0101               	movlb	1	; () banked
  5807  002628  6F0E               	movwf	___wmul@multiplier& (0+255),b
  5808  00262A  0E00               	movlw	0
  5809  00262C  0101               	movlb	1	; () banked
  5810  00262E  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  5811  002630  0101               	movlb	1	; () banked
  5812  002632  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5813  002634  0E00               	movlw	0
  5814  002636  0101               	movlb	1	; () banked
  5815  002638  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5816  00263A  0E03               	movlw	3
  5817  00263C  6F10               	movwf	___wmul@multiplicand& (0+255),b
  5818  00263E  EC14  F028         	call	___wmul	;wreg free
  5819  002642  0E30               	movlw	low __npowers_
  5820  002644  0101               	movlb	1	; () banked
  5821  002646  250E               	addwf	?___wmul& (0+255),w,b
  5822  002648  6EF6               	movwf	tblptrl,c
  5823  00264A  0EFC               	movlw	high __npowers_
  5824  00264C  0101               	movlb	1	; () banked
  5825  00264E  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  5826  002650  6EF7               	movwf	tblptrh,c
  5827  002652                     	if	0	;There are less than 3 active tblptr bytes
  5828  002652                     	endif
  5829  002652  0009               	tblrd		*+
  5830  002654  CFF5 F114          	movff	tablat,___ftmul@f1
  5831  002658  0009               	tblrd		*+
  5832  00265A  CFF5 F115          	movff	tablat,___ftmul@f1+1
  5833  00265E  000A               	tblrd		*-
  5834  002660  CFF5 F116          	movff	tablat,___ftmul@f1+2
  5835  002664  ECF2  F019         	call	___ftmul	;wreg free
  5836  002668  C114  F129         	movff	?___ftmul,_fround$1444
  5837  00266C  C115  F12A         	movff	?___ftmul+1,_fround$1444+1
  5838  002670  C116  F12B         	movff	?___ftmul+2,_fround$1444+2
  5839                           
  5840                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5841  002674  C129  F114         	movff	_fround$1444,___ftmul@f1
  5842  002678  C12A  F115         	movff	_fround$1444+1,___ftmul@f1+1
  5843  00267C  C12B  F116         	movff	_fround$1444+2,___ftmul@f1+2
  5844  002680  0E00               	movlw	0
  5845  002682  0101               	movlb	1	; () banked
  5846  002684  6F17               	movwf	___ftmul@f2& (0+255),b
  5847  002686  0E00               	movlw	0
  5848  002688  0101               	movlb	1	; () banked
  5849  00268A  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
  5850  00268C  0E3F               	movlw	63
  5851  00268E  0101               	movlb	1	; () banked
  5852  002690  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
  5853  002692  ECF2  F019         	call	___ftmul	;wreg free
  5854  002696  D787               	goto	L4
  5855  002698                     l7275:
  5856                           
  5857                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5858  002698  0101               	movlb	1	; () banked
  5859  00269A  512C               	movf	fround@prec& (0+255),w,b
  5860  00269C  0D03               	mullw	3
  5861  00269E  0E30               	movlw	low __npowers_
  5862  0026A0  24F3               	addwf	prodl,w,c
  5863  0026A2  6EF6               	movwf	tblptrl,c
  5864  0026A4  0EFC               	movlw	high __npowers_
  5865  0026A6  20F4               	addwfc	prodh,w,c
  5866  0026A8  6EF7               	movwf	tblptrh,c
  5867  0026AA                     	if	0	;There are less than 3 active tblptr bytes
  5868  0026AA                     	endif
  5869  0026AA  0009               	tblrd		*+
  5870  0026AC  CFF5 F114          	movff	tablat,___ftmul@f1
  5871  0026B0  0009               	tblrd		*+
  5872  0026B2  CFF5 F115          	movff	tablat,___ftmul@f1+1
  5873  0026B6  000A               	tblrd		*-
  5874  0026B8  CFF5 F116          	movff	tablat,___ftmul@f1+2
  5875  0026BC  0E00               	movlw	0
  5876  0026BE  0101               	movlb	1	; () banked
  5877  0026C0  6F17               	movwf	___ftmul@f2& (0+255),b
  5878  0026C2  0E00               	movlw	0
  5879  0026C4  0101               	movlb	1	; () banked
  5880  0026C6  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
  5881  0026C8  0E3F               	movlw	63
  5882  0026CA  0101               	movlb	1	; () banked
  5883  0026CC  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
  5884  0026CE  ECF2  F019         	call	___ftmul	;wreg free
  5885  0026D2  C114  F123         	movff	?___ftmul,?_fround
  5886  0026D6  C115  F124         	movff	?___ftmul+1,?_fround+1
  5887  0026DA  C116  F125         	movff	?___ftmul+2,?_fround+2
  5888  0026DE  0012               	return	
  5889  0026E0                     __end_of_fround:
  5890                           	opt stack 0
  5891                           tblptru	equ	0xFF8
  5892                           tblptrh	equ	0xFF7
  5893                           tblptrl	equ	0xFF6
  5894                           tablat	equ	0xFF5
  5895                           prodh	equ	0xFF4
  5896                           prodl	equ	0xFF3
  5897                           intcon	equ	0xFF2
  5898                           intcon3	equ	0xFF0
  5899                           postinc0	equ	0xFEE
  5900                           wreg	equ	0xFE8
  5901                           indf2	equ	0xFDF
  5902                           postinc2	equ	0xFDE
  5903                           postdec2	equ	0xFDD
  5904                           fsr2h	equ	0xFDA
  5905                           fsr2l	equ	0xFD9
  5906                           status	equ	0xFD8
  5907                           
  5908 ;; *************** function ___wmul *****************
  5909 ;; Defined at:
  5910 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  5911 ;; Parameters:    Size  Location     Type
  5912 ;;  multiplier      2   14[BANK1 ] unsigned int 
  5913 ;;  multiplicand    2   16[BANK1 ] unsigned int 
  5914 ;; Auto vars:     Size  Location     Type
  5915 ;;  product         2   18[BANK1 ] unsigned int 
  5916 ;; Return value:  Size  Location     Type
  5917 ;;                  2   14[BANK1 ] unsigned int 
  5918 ;; Registers used:
  5919 ;;		wreg, status,2, status,0, prodl, prodh
  5920 ;; Tracked objects:
  5921 ;;		On entry : 0/0
  5922 ;;		On exit  : 0/0
  5923 ;;		Unchanged: 0/0
  5924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5925 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5926 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5928 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5929 ;;Total ram usage:        6 bytes
  5930 ;; Hardware stack levels used:    1
  5931 ;; Hardware stack levels required when called:    8
  5932 ;; This function calls:
  5933 ;;		Nothing
  5934 ;; This function is called by:
  5935 ;;		_fround
  5936 ;;		_scale
  5937 ;;		_printf
  5938 ;; This function uses a non-reentrant model
  5939 ;;
  5940                           
  5941                           	psect	text7
  5942  005028                     __ptext7:
  5943                           	opt stack 0
  5944  005028                     ___wmul:
  5945                           	opt stack 19
  5946                           
  5947                           ;incstack = 0
  5948  005028  0101               	movlb	1	; () banked
  5949  00502A  510E               	movf	___wmul@multiplier& (0+255),w,b
  5950  00502C  0101               	movlb	1	; () banked
  5951  00502E  0310               	mulwf	___wmul@multiplicand& (0+255),b
  5952  005030  CFF3 F112          	movff	prodl,___wmul@product
  5953  005034  CFF4 F113          	movff	prodh,___wmul@product+1
  5954  005038  0101               	movlb	1	; () banked
  5955  00503A  510E               	movf	___wmul@multiplier& (0+255),w,b
  5956  00503C  0101               	movlb	1	; () banked
  5957  00503E  0311               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  5958  005040  50F3               	movf	prodl,w,c
  5959  005042  0101               	movlb	1	; () banked
  5960  005044  2713               	addwf	(___wmul@product+1)& (0+255),f,b
  5961  005046  0101               	movlb	1	; () banked
  5962  005048  510F               	movf	(___wmul@multiplier+1)& (0+255),w,b
  5963  00504A  0101               	movlb	1	; () banked
  5964  00504C  0310               	mulwf	___wmul@multiplicand& (0+255),b
  5965  00504E  50F3               	movf	prodl,w,c
  5966  005050  0101               	movlb	1	; () banked
  5967  005052  2713               	addwf	(___wmul@product+1)& (0+255),f,b
  5968                           
  5969                           ; BSR set to: 1
  5970  005054  C112  F10E         	movff	___wmul@product,?___wmul
  5971  005058  C113  F10F         	movff	___wmul@product+1,?___wmul+1
  5972  00505C  0012               	return	
  5973  00505E                     __end_of___wmul:
  5974                           	opt stack 0
  5975                           tblptru	equ	0xFF8
  5976                           tblptrh	equ	0xFF7
  5977                           tblptrl	equ	0xFF6
  5978                           tablat	equ	0xFF5
  5979                           prodh	equ	0xFF4
  5980                           prodl	equ	0xFF3
  5981                           intcon	equ	0xFF2
  5982                           intcon3	equ	0xFF0
  5983                           postinc0	equ	0xFEE
  5984                           wreg	equ	0xFE8
  5985                           indf2	equ	0xFDF
  5986                           postinc2	equ	0xFDE
  5987                           postdec2	equ	0xFDD
  5988                           fsr2h	equ	0xFDA
  5989                           fsr2l	equ	0xFD9
  5990                           status	equ	0xFD8
  5991                           
  5992 ;; *************** function ___ftmul *****************
  5993 ;; Defined at:
  5994 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  5995 ;; Parameters:    Size  Location     Type
  5996 ;;  f1              3   20[BANK1 ] float 
  5997 ;;  f2              3   23[BANK1 ] float 
  5998 ;; Auto vars:     Size  Location     Type
  5999 ;;  f3_as_produc    3   30[BANK1 ] unsigned um
  6000 ;;  sign            1   34[BANK1 ] unsigned char 
  6001 ;;  cntr            1   33[BANK1 ] unsigned char 
  6002 ;;  exp             1   29[BANK1 ] unsigned char 
  6003 ;; Return value:  Size  Location     Type
  6004 ;;                  3   20[BANK1 ] float 
  6005 ;; Registers used:
  6006 ;;		wreg, status,2, status,0, cstack
  6007 ;; Tracked objects:
  6008 ;;		On entry : 0/0
  6009 ;;		On exit  : 0/0
  6010 ;;		Unchanged: 0/0
  6011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6012 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6013 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6014 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6015 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6016 ;;Total ram usage:       15 bytes
  6017 ;; Hardware stack levels used:    1
  6018 ;; Hardware stack levels required when called:    9
  6019 ;; This function calls:
  6020 ;;		___ftpack
  6021 ;; This function is called by:
  6022 ;;		_fround
  6023 ;;		_scale
  6024 ;;		_printf
  6025 ;; This function uses a non-reentrant model
  6026 ;;
  6027                           
  6028                           	psect	text8
  6029  0033E4                     __ptext8:
  6030                           	opt stack 0
  6031  0033E4                     ___ftmul:
  6032                           	opt stack 18
  6033                           
  6034                           ; BSR set to: 1
  6035                           ;incstack = 0
  6036  0033E4  C116  F11A         	movff	___ftmul@f1+2,??___ftmul
  6037  0033E8  0101               	movlb	1	; () banked
  6038  0033EA  6B1B               	clrf	(??___ftmul+1)& (0+255),b
  6039  0033EC  6B1C               	clrf	(??___ftmul+2)& (0+255),b
  6040  0033EE  0101               	movlb	1	; () banked
  6041  0033F0  3515               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  6042  0033F2  0101               	movlb	1	; () banked
  6043  0033F4  371A               	rlcf	??___ftmul& (0+255),f,b
  6044  0033F6  E301               	bnc	u7421
  6045  0033F8  811B               	bsf	(??___ftmul+1)& (0+255),0,b
  6046  0033FA                     u7421:
  6047  0033FA  0101               	movlb	1	; () banked
  6048  0033FC  511A               	movf	??___ftmul& (0+255),w,b
  6049  0033FE  0101               	movlb	1	; () banked
  6050  003400  6F1D               	movwf	___ftmul@exp& (0+255),b
  6051  003402  0101               	movlb	1	; () banked
  6052  003404  511D               	movf	___ftmul@exp& (0+255),w,b
  6053  003406  A4D8               	btfss	status,2,c
  6054  003408  D00A               	goto	l7087
  6055                           
  6056                           ; BSR set to: 1
  6057  00340A  0E00               	movlw	0
  6058  00340C  0101               	movlb	1	; () banked
  6059  00340E  6F14               	movwf	?___ftmul& (0+255),b
  6060  003410  0E00               	movlw	0
  6061  003412  0101               	movlb	1	; () banked
  6062  003414  6F15               	movwf	(?___ftmul+1)& (0+255),b
  6063  003416  0E00               	movlw	0
  6064  003418  0101               	movlb	1	; () banked
  6065  00341A  6F16               	movwf	(?___ftmul+2)& (0+255),b
  6066                           
  6067                           ; BSR set to: 1
  6068  00341C  0012               	return	
  6069  00341E                     l7087:
  6070                           
  6071                           ; BSR set to: 1
  6072  00341E  C119  F11A         	movff	___ftmul@f2+2,??___ftmul
  6073  003422  0101               	movlb	1	; () banked
  6074  003424  6B1B               	clrf	(??___ftmul+1)& (0+255),b
  6075  003426  6B1C               	clrf	(??___ftmul+2)& (0+255),b
  6076  003428  0101               	movlb	1	; () banked
  6077  00342A  3518               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  6078  00342C  0101               	movlb	1	; () banked
  6079  00342E  371A               	rlcf	??___ftmul& (0+255),f,b
  6080  003430  E301               	bnc	u7441
  6081  003432  811B               	bsf	(??___ftmul+1)& (0+255),0,b
  6082  003434                     u7441:
  6083  003434  0101               	movlb	1	; () banked
  6084  003436  511A               	movf	??___ftmul& (0+255),w,b
  6085  003438  0101               	movlb	1	; () banked
  6086  00343A  6F22               	movwf	___ftmul@sign& (0+255),b
  6087  00343C  0101               	movlb	1	; () banked
  6088  00343E  5122               	movf	___ftmul@sign& (0+255),w,b
  6089  003440  A4D8               	btfss	status,2,c
  6090  003442  D00A               	goto	l7093
  6091                           
  6092                           ; BSR set to: 1
  6093  003444  0E00               	movlw	0
  6094  003446  0101               	movlb	1	; () banked
  6095  003448  6F14               	movwf	?___ftmul& (0+255),b
  6096  00344A  0E00               	movlw	0
  6097  00344C  0101               	movlb	1	; () banked
  6098  00344E  6F15               	movwf	(?___ftmul+1)& (0+255),b
  6099  003450  0E00               	movlw	0
  6100  003452  0101               	movlb	1	; () banked
  6101  003454  6F16               	movwf	(?___ftmul+2)& (0+255),b
  6102                           
  6103                           ; BSR set to: 1
  6104  003456  0012               	return	
  6105  003458                     l7093:
  6106                           
  6107                           ; BSR set to: 1
  6108  003458  0101               	movlb	1	; () banked
  6109  00345A  5122               	movf	___ftmul@sign& (0+255),w,b
  6110  00345C  0F7B               	addlw	123
  6111  00345E  0101               	movlb	1	; () banked
  6112  003460  271D               	addwf	___ftmul@exp& (0+255),f,b
  6113                           
  6114                           ; BSR set to: 1
  6115  003462  C116  F122         	movff	___ftmul@f1+2,___ftmul@sign
  6116  003466  0101               	movlb	1	; () banked
  6117  003468  5119               	movf	(___ftmul@f2+2)& (0+255),w,b
  6118  00346A  0101               	movlb	1	; () banked
  6119  00346C  1B22               	xorwf	___ftmul@sign& (0+255),f,b
  6120  00346E  0E80               	movlw	128
  6121  003470  0101               	movlb	1	; () banked
  6122  003472  1722               	andwf	___ftmul@sign& (0+255),f,b
  6123                           
  6124                           ; BSR set to: 1
  6125  003474  0101               	movlb	1	; () banked
  6126  003476  8F15               	bsf	(___ftmul@f1+1)& (0+255),7,b
  6127                           
  6128                           ; BSR set to: 1
  6129  003478  0101               	movlb	1	; () banked
  6130  00347A  8F18               	bsf	(___ftmul@f2+1)& (0+255),7,b
  6131                           
  6132                           ; BSR set to: 1
  6133  00347C  0EFF               	movlw	255
  6134  00347E  0101               	movlb	1	; () banked
  6135  003480  1717               	andwf	___ftmul@f2& (0+255),f,b
  6136  003482  0EFF               	movlw	255
  6137  003484  0101               	movlb	1	; () banked
  6138  003486  1718               	andwf	(___ftmul@f2+1)& (0+255),f,b
  6139  003488  0E00               	movlw	0
  6140  00348A  0101               	movlb	1	; () banked
  6141  00348C  1719               	andwf	(___ftmul@f2+2)& (0+255),f,b
  6142                           
  6143                           ; BSR set to: 1
  6144  00348E  0E00               	movlw	0
  6145  003490  0101               	movlb	1	; () banked
  6146  003492  6F1E               	movwf	___ftmul@f3_as_product& (0+255),b
  6147  003494  0E00               	movlw	0
  6148  003496  0101               	movlb	1	; () banked
  6149  003498  6F1F               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  6150  00349A  0E00               	movlw	0
  6151  00349C  0101               	movlb	1	; () banked
  6152  00349E  6F20               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  6153                           
  6154                           ; BSR set to: 1
  6155  0034A0  0E07               	movlw	7
  6156  0034A2  0101               	movlb	1	; () banked
  6157  0034A4  6F21               	movwf	___ftmul@cntr& (0+255),b
  6158  0034A6                     l7107:
  6159                           
  6160                           ; BSR set to: 1
  6161  0034A6  0101               	movlb	1	; () banked
  6162  0034A8  A114               	btfss	___ftmul@f1& (0+255),0,b
  6163  0034AA  D00C               	goto	l7111
  6164                           
  6165                           ; BSR set to: 1
  6166  0034AC  0101               	movlb	1	; () banked
  6167  0034AE  5117               	movf	___ftmul@f2& (0+255),w,b
  6168  0034B0  0101               	movlb	1	; () banked
  6169  0034B2  271E               	addwf	___ftmul@f3_as_product& (0+255),f,b
  6170  0034B4  0101               	movlb	1	; () banked
  6171  0034B6  5118               	movf	(___ftmul@f2+1)& (0+255),w,b
  6172  0034B8  0101               	movlb	1	; () banked
  6173  0034BA  231F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  6174  0034BC  0101               	movlb	1	; () banked
  6175  0034BE  5119               	movf	(___ftmul@f2+2)& (0+255),w,b
  6176  0034C0  0101               	movlb	1	; () banked
  6177  0034C2  2320               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  6178  0034C4                     l7111:
  6179                           
  6180                           ; BSR set to: 1
  6181  0034C4  0101               	movlb	1	; () banked
  6182  0034C6  90D8               	bcf	status,0,c
  6183  0034C8  3316               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  6184  0034CA  3315               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  6185  0034CC  3314               	rrcf	___ftmul@f1& (0+255),f,b
  6186  0034CE  0101               	movlb	1	; () banked
  6187  0034D0  90D8               	bcf	status,0,c
  6188  0034D2  3717               	rlcf	___ftmul@f2& (0+255),f,b
  6189  0034D4  3718               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  6190  0034D6  3719               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  6191                           
  6192                           ; BSR set to: 1
  6193  0034D8  0101               	movlb	1	; () banked
  6194  0034DA  2F21               	decfsz	___ftmul@cntr& (0+255),f,b
  6195  0034DC  D7E4               	goto	l7107
  6196                           
  6197                           ; BSR set to: 1
  6198                           
  6199                           ; BSR set to: 1
  6200  0034DE  0E09               	movlw	9
  6201  0034E0  0101               	movlb	1	; () banked
  6202  0034E2  6F21               	movwf	___ftmul@cntr& (0+255),b
  6203  0034E4                     l7117:
  6204                           
  6205                           ; BSR set to: 1
  6206  0034E4  0101               	movlb	1	; () banked
  6207  0034E6  A114               	btfss	___ftmul@f1& (0+255),0,b
  6208  0034E8  D00C               	goto	l7121
  6209                           
  6210                           ; BSR set to: 1
  6211  0034EA  0101               	movlb	1	; () banked
  6212  0034EC  5117               	movf	___ftmul@f2& (0+255),w,b
  6213  0034EE  0101               	movlb	1	; () banked
  6214  0034F0  271E               	addwf	___ftmul@f3_as_product& (0+255),f,b
  6215  0034F2  0101               	movlb	1	; () banked
  6216  0034F4  5118               	movf	(___ftmul@f2+1)& (0+255),w,b
  6217  0034F6  0101               	movlb	1	; () banked
  6218  0034F8  231F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  6219  0034FA  0101               	movlb	1	; () banked
  6220  0034FC  5119               	movf	(___ftmul@f2+2)& (0+255),w,b
  6221  0034FE  0101               	movlb	1	; () banked
  6222  003500  2320               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  6223  003502                     l7121:
  6224                           
  6225                           ; BSR set to: 1
  6226  003502  0101               	movlb	1	; () banked
  6227  003504  90D8               	bcf	status,0,c
  6228  003506  3316               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  6229  003508  3315               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  6230  00350A  3314               	rrcf	___ftmul@f1& (0+255),f,b
  6231  00350C  0101               	movlb	1	; () banked
  6232  00350E  90D8               	bcf	status,0,c
  6233  003510  3320               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  6234  003512  331F               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  6235  003514  331E               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  6236                           
  6237                           ; BSR set to: 1
  6238  003516  0101               	movlb	1	; () banked
  6239  003518  2F21               	decfsz	___ftmul@cntr& (0+255),f,b
  6240  00351A  D7E4               	goto	l7117
  6241                           
  6242                           ; BSR set to: 1
  6243                           
  6244                           ; BSR set to: 1
  6245  00351C  C11E  F100         	movff	___ftmul@f3_as_product,___ftpack@arg
  6246  003520  C11F  F101         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6247  003524  C120  F102         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6248  003528  C11D  F103         	movff	___ftmul@exp,___ftpack@exp
  6249  00352C  C122  F104         	movff	___ftmul@sign,___ftpack@sign
  6250  003530  EC92  F01D         	call	___ftpack	;wreg free
  6251  003534  C100  F114         	movff	?___ftpack,?___ftmul
  6252  003538  C101  F115         	movff	?___ftpack+1,?___ftmul+1
  6253  00353C  C102  F116         	movff	?___ftpack+2,?___ftmul+2
  6254  003540  0012               	return	
  6255  003542                     __end_of___ftmul:
  6256                           	opt stack 0
  6257                           tblptru	equ	0xFF8
  6258                           tblptrh	equ	0xFF7
  6259                           tblptrl	equ	0xFF6
  6260                           tablat	equ	0xFF5
  6261                           prodh	equ	0xFF4
  6262                           prodl	equ	0xFF3
  6263                           intcon	equ	0xFF2
  6264                           intcon3	equ	0xFF0
  6265                           postinc0	equ	0xFEE
  6266                           wreg	equ	0xFE8
  6267                           indf2	equ	0xFDF
  6268                           postinc2	equ	0xFDE
  6269                           postdec2	equ	0xFDD
  6270                           fsr2h	equ	0xFDA
  6271                           fsr2l	equ	0xFD9
  6272                           status	equ	0xFD8
  6273                           
  6274 ;; *************** function ___awmod *****************
  6275 ;; Defined at:
  6276 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
  6277 ;; Parameters:    Size  Location     Type
  6278 ;;  dividend        2    0[BANK1 ] int 
  6279 ;;  divisor         2    2[BANK1 ] int 
  6280 ;; Auto vars:     Size  Location     Type
  6281 ;;  sign            1    5[BANK1 ] unsigned char 
  6282 ;;  counter         1    4[BANK1 ] unsigned char 
  6283 ;; Return value:  Size  Location     Type
  6284 ;;                  2    0[BANK1 ] int 
  6285 ;; Registers used:
  6286 ;;		wreg, status,2, status,0
  6287 ;; Tracked objects:
  6288 ;;		On entry : 0/0
  6289 ;;		On exit  : 0/0
  6290 ;;		Unchanged: 0/0
  6291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6292 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6293 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6295 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6296 ;;Total ram usage:        6 bytes
  6297 ;; Hardware stack levels used:    1
  6298 ;; Hardware stack levels required when called:    8
  6299 ;; This function calls:
  6300 ;;		Nothing
  6301 ;; This function is called by:
  6302 ;;		_fround
  6303 ;;		_scale
  6304 ;; This function uses a non-reentrant model
  6305 ;;
  6306                           
  6307                           	psect	text9
  6308  004620                     __ptext9:
  6309                           	opt stack 0
  6310  004620                     ___awmod:
  6311                           	opt stack 19
  6312                           
  6313                           ;incstack = 0
  6314  004620  0E00               	movlw	0
  6315  004622  0101               	movlb	1	; () banked
  6316  004624  6F05               	movwf	___awmod@sign& (0+255),b
  6317                           
  6318                           ; BSR set to: 1
  6319  004626  0101               	movlb	1	; () banked
  6320  004628  AF01               	btfss	(___awmod@dividend+1)& (0+255),7,b
  6321  00462A  D008               	goto	l7181
  6322                           
  6323                           ; BSR set to: 1
  6324  00462C  0101               	movlb	1	; () banked
  6325  00462E  6D00               	negf	___awmod@dividend& (0+255),b
  6326  004630  1F01               	comf	(___awmod@dividend+1)& (0+255),f,b
  6327  004632  B0D8               	btfsc	status,0,c
  6328  004634  2B01               	incf	(___awmod@dividend+1)& (0+255),f,b
  6329                           
  6330                           ; BSR set to: 1
  6331  004636  0E01               	movlw	1
  6332  004638  0101               	movlb	1	; () banked
  6333  00463A  6F05               	movwf	___awmod@sign& (0+255),b
  6334  00463C                     l7181:
  6335                           
  6336                           ; BSR set to: 1
  6337  00463C  0101               	movlb	1	; () banked
  6338  00463E  AF03               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6339  004640  D005               	goto	l7185
  6340                           
  6341                           ; BSR set to: 1
  6342  004642  0101               	movlb	1	; () banked
  6343  004644  6D02               	negf	___awmod@divisor& (0+255),b
  6344  004646  1F03               	comf	(___awmod@divisor+1)& (0+255),f,b
  6345  004648  B0D8               	btfsc	status,0,c
  6346  00464A  2B03               	incf	(___awmod@divisor+1)& (0+255),f,b
  6347  00464C                     l7185:
  6348                           
  6349                           ; BSR set to: 1
  6350  00464C  0101               	movlb	1	; () banked
  6351  00464E  5102               	movf	___awmod@divisor& (0+255),w,b
  6352  004650  0101               	movlb	1	; () banked
  6353  004652  1103               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  6354  004654  B4D8               	btfsc	status,2,c
  6355  004656  D026               	goto	l7201
  6356                           
  6357                           ; BSR set to: 1
  6358  004658  0E01               	movlw	1
  6359  00465A  0101               	movlb	1	; () banked
  6360  00465C  6F04               	movwf	___awmod@counter& (0+255),b
  6361  00465E  D006               	goto	l7191
  6362  004660                     l7189:
  6363                           
  6364                           ; BSR set to: 1
  6365  004660  0101               	movlb	1	; () banked
  6366  004662  90D8               	bcf	status,0,c
  6367  004664  3702               	rlcf	___awmod@divisor& (0+255),f,b
  6368  004666  3703               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  6369  004668  0101               	movlb	1	; () banked
  6370  00466A  2B04               	incf	___awmod@counter& (0+255),f,b
  6371  00466C                     l7191:
  6372                           
  6373                           ; BSR set to: 1
  6374  00466C  0101               	movlb	1	; () banked
  6375  00466E  AF03               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6376  004670  D7F7               	goto	l7189
  6377  004672                     l7193:
  6378                           
  6379                           ; BSR set to: 1
  6380  004672  0101               	movlb	1	; () banked
  6381  004674  5102               	movf	___awmod@divisor& (0+255),w,b
  6382  004676  0101               	movlb	1	; () banked
  6383  004678  5D00               	subwf	___awmod@dividend& (0+255),w,b
  6384  00467A  0101               	movlb	1	; () banked
  6385  00467C  5103               	movf	(___awmod@divisor+1)& (0+255),w,b
  6386  00467E  0101               	movlb	1	; () banked
  6387  004680  5901               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  6388  004682  A0D8               	btfss	status,0,c
  6389  004684  D008               	goto	l7197
  6390                           
  6391                           ; BSR set to: 1
  6392  004686  0101               	movlb	1	; () banked
  6393  004688  5102               	movf	___awmod@divisor& (0+255),w,b
  6394  00468A  0101               	movlb	1	; () banked
  6395  00468C  5F00               	subwf	___awmod@dividend& (0+255),f,b
  6396  00468E  0101               	movlb	1	; () banked
  6397  004690  5103               	movf	(___awmod@divisor+1)& (0+255),w,b
  6398  004692  0101               	movlb	1	; () banked
  6399  004694  5B01               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  6400  004696                     l7197:
  6401                           
  6402                           ; BSR set to: 1
  6403  004696  0101               	movlb	1	; () banked
  6404  004698  90D8               	bcf	status,0,c
  6405  00469A  3303               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  6406  00469C  3302               	rrcf	___awmod@divisor& (0+255),f,b
  6407                           
  6408                           ; BSR set to: 1
  6409  00469E  0101               	movlb	1	; () banked
  6410  0046A0  2F04               	decfsz	___awmod@counter& (0+255),f,b
  6411  0046A2  D7E7               	goto	l7193
  6412  0046A4                     l7201:
  6413                           
  6414                           ; BSR set to: 1
  6415  0046A4  0101               	movlb	1	; () banked
  6416  0046A6  5105               	movf	___awmod@sign& (0+255),w,b
  6417  0046A8  0101               	movlb	1	; () banked
  6418  0046AA  B4D8               	btfsc	status,2,c
  6419  0046AC  D005               	goto	l7205
  6420                           
  6421                           ; BSR set to: 1
  6422  0046AE  0101               	movlb	1	; () banked
  6423  0046B0  6D00               	negf	___awmod@dividend& (0+255),b
  6424  0046B2  1F01               	comf	(___awmod@dividend+1)& (0+255),f,b
  6425  0046B4  B0D8               	btfsc	status,0,c
  6426  0046B6  2B01               	incf	(___awmod@dividend+1)& (0+255),f,b
  6427  0046B8                     l7205:
  6428                           
  6429                           ; BSR set to: 1
  6430  0046B8  C100  F100         	movff	___awmod@dividend,?___awmod
  6431  0046BC  C101  F101         	movff	___awmod@dividend+1,?___awmod+1
  6432  0046C0  0012               	return	
  6433  0046C2                     __end_of___awmod:
  6434                           	opt stack 0
  6435                           tblptru	equ	0xFF8
  6436                           tblptrh	equ	0xFF7
  6437                           tblptrl	equ	0xFF6
  6438                           tablat	equ	0xFF5
  6439                           prodh	equ	0xFF4
  6440                           prodl	equ	0xFF3
  6441                           intcon	equ	0xFF2
  6442                           intcon3	equ	0xFF0
  6443                           postinc0	equ	0xFEE
  6444                           wreg	equ	0xFE8
  6445                           indf2	equ	0xFDF
  6446                           postinc2	equ	0xFDE
  6447                           postdec2	equ	0xFDD
  6448                           fsr2h	equ	0xFDA
  6449                           fsr2l	equ	0xFD9
  6450                           status	equ	0xFD8
  6451                           
  6452 ;; *************** function ___awdiv *****************
  6453 ;; Defined at:
  6454 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  6455 ;; Parameters:    Size  Location     Type
  6456 ;;  dividend        2    6[BANK1 ] int 
  6457 ;;  divisor         2    8[BANK1 ] int 
  6458 ;; Auto vars:     Size  Location     Type
  6459 ;;  quotient        2   12[BANK1 ] int 
  6460 ;;  sign            1   11[BANK1 ] unsigned char 
  6461 ;;  counter         1   10[BANK1 ] unsigned char 
  6462 ;; Return value:  Size  Location     Type
  6463 ;;                  2    6[BANK1 ] int 
  6464 ;; Registers used:
  6465 ;;		wreg, status,2, status,0
  6466 ;; Tracked objects:
  6467 ;;		On entry : 0/0
  6468 ;;		On exit  : 0/0
  6469 ;;		Unchanged: 0/0
  6470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6471 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6472 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6474 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6475 ;;Total ram usage:        8 bytes
  6476 ;; Hardware stack levels used:    1
  6477 ;; Hardware stack levels required when called:    8
  6478 ;; This function calls:
  6479 ;;		Nothing
  6480 ;; This function is called by:
  6481 ;;		_fround
  6482 ;;		_scale
  6483 ;;		_printf
  6484 ;; This function uses a non-reentrant model
  6485 ;;
  6486                           
  6487                           	psect	text10
  6488  0043F8                     __ptext10:
  6489                           	opt stack 0
  6490  0043F8                     ___awdiv:
  6491                           	opt stack 19
  6492                           
  6493                           ; BSR set to: 1
  6494                           ;incstack = 0
  6495  0043F8  0E00               	movlw	0
  6496  0043FA  0101               	movlb	1	; () banked
  6497  0043FC  6F0B               	movwf	___awdiv@sign& (0+255),b
  6498                           
  6499                           ; BSR set to: 1
  6500  0043FE  0101               	movlb	1	; () banked
  6501  004400  AF09               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6502  004402  D008               	goto	l7137
  6503                           
  6504                           ; BSR set to: 1
  6505  004404  0101               	movlb	1	; () banked
  6506  004406  6D08               	negf	___awdiv@divisor& (0+255),b
  6507  004408  1F09               	comf	(___awdiv@divisor+1)& (0+255),f,b
  6508  00440A  B0D8               	btfsc	status,0,c
  6509  00440C  2B09               	incf	(___awdiv@divisor+1)& (0+255),f,b
  6510                           
  6511                           ; BSR set to: 1
  6512  00440E  0E01               	movlw	1
  6513  004410  0101               	movlb	1	; () banked
  6514  004412  6F0B               	movwf	___awdiv@sign& (0+255),b
  6515  004414                     l7137:
  6516                           
  6517                           ; BSR set to: 1
  6518  004414  0101               	movlb	1	; () banked
  6519  004416  AF07               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  6520  004418  D008               	goto	l7143
  6521                           
  6522                           ; BSR set to: 1
  6523  00441A  0101               	movlb	1	; () banked
  6524  00441C  6D06               	negf	___awdiv@dividend& (0+255),b
  6525  00441E  1F07               	comf	(___awdiv@dividend+1)& (0+255),f,b
  6526  004420  B0D8               	btfsc	status,0,c
  6527  004422  2B07               	incf	(___awdiv@dividend+1)& (0+255),f,b
  6528                           
  6529                           ; BSR set to: 1
  6530  004424  0E01               	movlw	1
  6531  004426  0101               	movlb	1	; () banked
  6532  004428  1B0B               	xorwf	___awdiv@sign& (0+255),f,b
  6533  00442A                     l7143:
  6534                           
  6535                           ; BSR set to: 1
  6536  00442A  0E00               	movlw	0
  6537  00442C  0101               	movlb	1	; () banked
  6538  00442E  6F0D               	movwf	(___awdiv@quotient+1)& (0+255),b
  6539  004430  0E00               	movlw	0
  6540  004432  6F0C               	movwf	___awdiv@quotient& (0+255),b
  6541                           
  6542                           ; BSR set to: 1
  6543  004434  0101               	movlb	1	; () banked
  6544  004436  5108               	movf	___awdiv@divisor& (0+255),w,b
  6545  004438  0101               	movlb	1	; () banked
  6546  00443A  1109               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  6547  00443C  B4D8               	btfsc	status,2,c
  6548  00443E  D02C               	goto	l7165
  6549                           
  6550                           ; BSR set to: 1
  6551  004440  0E01               	movlw	1
  6552  004442  0101               	movlb	1	; () banked
  6553  004444  6F0A               	movwf	___awdiv@counter& (0+255),b
  6554  004446  D006               	goto	l7151
  6555  004448                     l7149:
  6556                           
  6557                           ; BSR set to: 1
  6558  004448  0101               	movlb	1	; () banked
  6559  00444A  90D8               	bcf	status,0,c
  6560  00444C  3708               	rlcf	___awdiv@divisor& (0+255),f,b
  6561  00444E  3709               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  6562  004450  0101               	movlb	1	; () banked
  6563  004452  2B0A               	incf	___awdiv@counter& (0+255),f,b
  6564  004454                     l7151:
  6565                           
  6566                           ; BSR set to: 1
  6567  004454  0101               	movlb	1	; () banked
  6568  004456  AF09               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6569  004458  D7F7               	goto	l7149
  6570  00445A                     l7153:
  6571                           
  6572                           ; BSR set to: 1
  6573  00445A  0101               	movlb	1	; () banked
  6574  00445C  90D8               	bcf	status,0,c
  6575  00445E  370C               	rlcf	___awdiv@quotient& (0+255),f,b
  6576  004460  370D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  6577                           
  6578                           ; BSR set to: 1
  6579  004462  0101               	movlb	1	; () banked
  6580  004464  5108               	movf	___awdiv@divisor& (0+255),w,b
  6581  004466  0101               	movlb	1	; () banked
  6582  004468  5D06               	subwf	___awdiv@dividend& (0+255),w,b
  6583  00446A  0101               	movlb	1	; () banked
  6584  00446C  5109               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6585  00446E  0101               	movlb	1	; () banked
  6586  004470  5907               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  6587  004472  A0D8               	btfss	status,0,c
  6588  004474  D00A               	goto	l7161
  6589                           
  6590                           ; BSR set to: 1
  6591  004476  0101               	movlb	1	; () banked
  6592  004478  5108               	movf	___awdiv@divisor& (0+255),w,b
  6593  00447A  0101               	movlb	1	; () banked
  6594  00447C  5F06               	subwf	___awdiv@dividend& (0+255),f,b
  6595  00447E  0101               	movlb	1	; () banked
  6596  004480  5109               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6597  004482  0101               	movlb	1	; () banked
  6598  004484  5B07               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  6599                           
  6600                           ; BSR set to: 1
  6601  004486  0101               	movlb	1	; () banked
  6602  004488  810C               	bsf	___awdiv@quotient& (0+255),0,b
  6603  00448A                     l7161:
  6604                           
  6605                           ; BSR set to: 1
  6606  00448A  0101               	movlb	1	; () banked
  6607  00448C  90D8               	bcf	status,0,c
  6608  00448E  3309               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  6609  004490  3308               	rrcf	___awdiv@divisor& (0+255),f,b
  6610                           
  6611                           ; BSR set to: 1
  6612  004492  0101               	movlb	1	; () banked
  6613  004494  2F0A               	decfsz	___awdiv@counter& (0+255),f,b
  6614  004496  D7E1               	goto	l7153
  6615  004498                     l7165:
  6616                           
  6617                           ; BSR set to: 1
  6618  004498  0101               	movlb	1	; () banked
  6619  00449A  510B               	movf	___awdiv@sign& (0+255),w,b
  6620  00449C  0101               	movlb	1	; () banked
  6621  00449E  B4D8               	btfsc	status,2,c
  6622  0044A0  D005               	goto	l7169
  6623                           
  6624                           ; BSR set to: 1
  6625  0044A2  0101               	movlb	1	; () banked
  6626  0044A4  6D0C               	negf	___awdiv@quotient& (0+255),b
  6627  0044A6  1F0D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  6628  0044A8  B0D8               	btfsc	status,0,c
  6629  0044AA  2B0D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  6630  0044AC                     l7169:
  6631                           
  6632                           ; BSR set to: 1
  6633  0044AC  C10C  F106         	movff	___awdiv@quotient,?___awdiv
  6634  0044B0  C10D  F107         	movff	___awdiv@quotient+1,?___awdiv+1
  6635  0044B4  0012               	return	
  6636  0044B6                     __end_of___awdiv:
  6637                           	opt stack 0
  6638                           tblptru	equ	0xFF8
  6639                           tblptrh	equ	0xFF7
  6640                           tblptrl	equ	0xFF6
  6641                           tablat	equ	0xFF5
  6642                           prodh	equ	0xFF4
  6643                           prodl	equ	0xFF3
  6644                           intcon	equ	0xFF2
  6645                           intcon3	equ	0xFF0
  6646                           postinc0	equ	0xFEE
  6647                           wreg	equ	0xFE8
  6648                           indf2	equ	0xFDF
  6649                           postinc2	equ	0xFDE
  6650                           postdec2	equ	0xFDD
  6651                           fsr2h	equ	0xFDA
  6652                           fsr2l	equ	0xFD9
  6653                           status	equ	0xFD8
  6654                           
  6655 ;; *************** function __tdiv_to_l_ *****************
  6656 ;; Defined at:
  6657 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdivl.c"
  6658 ;; Parameters:    Size  Location     Type
  6659 ;;  f1              3    0[BANK1 ] float 
  6660 ;;  f2              3    3[BANK1 ] float 
  6661 ;; Auto vars:     Size  Location     Type
  6662 ;;  quot            4    9[BANK1 ] unsigned long 
  6663 ;;  exp1            1   14[BANK1 ] unsigned char 
  6664 ;;  cntr            1   13[BANK1 ] unsigned char 
  6665 ;; Return value:  Size  Location     Type
  6666 ;;                  4    0[BANK1 ] unsigned long 
  6667 ;; Registers used:
  6668 ;;		wreg, status,2, status,0
  6669 ;; Tracked objects:
  6670 ;;		On entry : 0/0
  6671 ;;		On exit  : 0/0
  6672 ;;		Unchanged: 0/0
  6673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6674 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6675 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6676 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6677 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6678 ;;Total ram usage:       15 bytes
  6679 ;; Hardware stack levels used:    1
  6680 ;; Hardware stack levels required when called:    8
  6681 ;; This function calls:
  6682 ;;		Nothing
  6683 ;; This function is called by:
  6684 ;;		_printf
  6685 ;; This function uses a non-reentrant model
  6686 ;;
  6687                           
  6688                           	psect	text11
  6689  002F5C                     __ptext11:
  6690                           	opt stack 0
  6691  002F5C                     __tdiv_to_l_:
  6692                           	opt stack 20
  6693                           
  6694                           ; BSR set to: 1
  6695                           ;incstack = 0
  6696  002F5C  C102  F106         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  6697  002F60  0101               	movlb	1	; () banked
  6698  002F62  6B07               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  6699  002F64  6B08               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  6700  002F66  0101               	movlb	1	; () banked
  6701  002F68  3501               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
  6702  002F6A  0101               	movlb	1	; () banked
  6703  002F6C  3706               	rlcf	??__tdiv_to_l_& (0+255),f,b
  6704  002F6E  E301               	bnc	u7721
  6705  002F70  8107               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  6706  002F72                     u7721:
  6707  002F72  0101               	movlb	1	; () banked
  6708  002F74  5106               	movf	??__tdiv_to_l_& (0+255),w,b
  6709  002F76  0101               	movlb	1	; () banked
  6710  002F78  6F0E               	movwf	__tdiv_to_l_@exp1& (0+255),b
  6711  002F7A  0101               	movlb	1	; () banked
  6712  002F7C  510E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  6713  002F7E  A4D8               	btfss	status,2,c
  6714  002F80  D00A               	goto	l7335
  6715                           
  6716                           ; BSR set to: 1
  6717  002F82  0E00               	movlw	0
  6718  002F84  0101               	movlb	1	; () banked
  6719  002F86  6F00               	movwf	?__tdiv_to_l_& (0+255),b
  6720  002F88  0E00               	movlw	0
  6721  002F8A  6F01               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  6722  002F8C  0E00               	movlw	0
  6723  002F8E  6F02               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  6724  002F90  0E00               	movlw	0
  6725  002F92  6F03               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  6726                           
  6727                           ; BSR set to: 1
  6728  002F94  0012               	return	
  6729  002F96                     l7335:
  6730                           
  6731                           ; BSR set to: 1
  6732  002F96  C105  F106         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  6733  002F9A  0101               	movlb	1	; () banked
  6734  002F9C  6B07               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  6735  002F9E  6B08               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  6736  002FA0  0101               	movlb	1	; () banked
  6737  002FA2  3504               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  6738  002FA4  0101               	movlb	1	; () banked
  6739  002FA6  3706               	rlcf	??__tdiv_to_l_& (0+255),f,b
  6740  002FA8  E301               	bnc	u7741
  6741  002FAA  8107               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  6742  002FAC                     u7741:
  6743  002FAC  0101               	movlb	1	; () banked
  6744  002FAE  5106               	movf	??__tdiv_to_l_& (0+255),w,b
  6745  002FB0  0101               	movlb	1	; () banked
  6746  002FB2  6F0D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  6747  002FB4  0101               	movlb	1	; () banked
  6748  002FB6  510D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  6749  002FB8  A4D8               	btfss	status,2,c
  6750  002FBA  D00A               	goto	l7341
  6751                           
  6752                           ; BSR set to: 1
  6753  002FBC  0E00               	movlw	0
  6754  002FBE  0101               	movlb	1	; () banked
  6755  002FC0  6F00               	movwf	?__tdiv_to_l_& (0+255),b
  6756  002FC2  0E00               	movlw	0
  6757  002FC4  6F01               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  6758  002FC6  0E00               	movlw	0
  6759  002FC8  6F02               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  6760  002FCA  0E00               	movlw	0
  6761  002FCC  6F03               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  6762                           
  6763                           ; BSR set to: 1
  6764  002FCE  0012               	return	
  6765  002FD0                     l7341:
  6766                           
  6767                           ; BSR set to: 1
  6768  002FD0  0101               	movlb	1	; () banked
  6769  002FD2  8F01               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
  6770                           
  6771                           ; BSR set to: 1
  6772  002FD4  0EFF               	movlw	255
  6773  002FD6  0101               	movlb	1	; () banked
  6774  002FD8  1700               	andwf	__tdiv_to_l_@f1& (0+255),f,b
  6775  002FDA  0EFF               	movlw	255
  6776  002FDC  0101               	movlb	1	; () banked
  6777  002FDE  1701               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  6778  002FE0  0E00               	movlw	0
  6779  002FE2  0101               	movlb	1	; () banked
  6780  002FE4  1702               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  6781  002FE6  0101               	movlb	1	; () banked
  6782  002FE8  8F04               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
  6783                           
  6784                           ; BSR set to: 1
  6785  002FEA  0EFF               	movlw	255
  6786  002FEC  0101               	movlb	1	; () banked
  6787  002FEE  1703               	andwf	__tdiv_to_l_@f2& (0+255),f,b
  6788  002FF0  0EFF               	movlw	255
  6789  002FF2  0101               	movlb	1	; () banked
  6790  002FF4  1704               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
  6791  002FF6  0E00               	movlw	0
  6792  002FF8  0101               	movlb	1	; () banked
  6793  002FFA  1705               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
  6794                           
  6795                           ; BSR set to: 1
  6796  002FFC  0E00               	movlw	0
  6797  002FFE  0101               	movlb	1	; () banked
  6798  003000  6F09               	movwf	__tdiv_to_l_@quot& (0+255),b
  6799  003002  0E00               	movlw	0
  6800  003004  6F0A               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
  6801  003006  0E00               	movlw	0
  6802  003008  6F0B               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
  6803  00300A  0E00               	movlw	0
  6804  00300C  6F0C               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
  6805                           
  6806                           ; BSR set to: 1
  6807  00300E  0E7F               	movlw	127
  6808  003010  0101               	movlb	1	; () banked
  6809  003012  5F0E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  6810                           
  6811                           ; BSR set to: 1
  6812  003014  0101               	movlb	1	; () banked
  6813  003016  510D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  6814  003018  0F98               	addlw	152
  6815  00301A  0101               	movlb	1	; () banked
  6816  00301C  5F0E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  6817                           
  6818                           ; BSR set to: 1
  6819  00301E  0E18               	movlw	24
  6820  003020  0101               	movlb	1	; () banked
  6821  003022  6F0D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  6822  003024                     l903:
  6823                           
  6824                           ; BSR set to: 1
  6825  003024  0101               	movlb	1	; () banked
  6826  003026  90D8               	bcf	status,0,c
  6827  003028  3709               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  6828  00302A  370A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  6829  00302C  370B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  6830  00302E  370C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  6831                           
  6832                           ; BSR set to: 1
  6833  003030  0101               	movlb	1	; () banked
  6834  003032  5103               	movf	__tdiv_to_l_@f2& (0+255),w,b
  6835  003034  0101               	movlb	1	; () banked
  6836  003036  5D00               	subwf	__tdiv_to_l_@f1& (0+255),w,b
  6837  003038  0101               	movlb	1	; () banked
  6838  00303A  5104               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  6839  00303C  0101               	movlb	1	; () banked
  6840  00303E  5901               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
  6841  003040  0101               	movlb	1	; () banked
  6842  003042  5105               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  6843  003044  0101               	movlb	1	; () banked
  6844  003046  5902               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
  6845  003048  A0D8               	btfss	status,0,c
  6846  00304A  D00E               	goto	l904
  6847                           
  6848                           ; BSR set to: 1
  6849  00304C  0101               	movlb	1	; () banked
  6850  00304E  5103               	movf	__tdiv_to_l_@f2& (0+255),w,b
  6851  003050  0101               	movlb	1	; () banked
  6852  003052  5F00               	subwf	__tdiv_to_l_@f1& (0+255),f,b
  6853  003054  0101               	movlb	1	; () banked
  6854  003056  5104               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  6855  003058  0101               	movlb	1	; () banked
  6856  00305A  5B01               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
  6857  00305C  0101               	movlb	1	; () banked
  6858  00305E  5105               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  6859  003060  0101               	movlb	1	; () banked
  6860  003062  5B02               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
  6861                           
  6862                           ; BSR set to: 1
  6863  003064  0101               	movlb	1	; () banked
  6864  003066  8109               	bsf	__tdiv_to_l_@quot& (0+255),0,b
  6865  003068                     l904:
  6866                           
  6867                           ; BSR set to: 1
  6868  003068  0101               	movlb	1	; () banked
  6869  00306A  90D8               	bcf	status,0,c
  6870  00306C  3700               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
  6871  00306E  3701               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  6872  003070  3702               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  6873                           
  6874                           ; BSR set to: 1
  6875  003072  0101               	movlb	1	; () banked
  6876  003074  2F0D               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
  6877  003076  D7D6               	goto	l903
  6878                           
  6879                           ; BSR set to: 1
  6880                           
  6881                           ; BSR set to: 1
  6882  003078  0101               	movlb	1	; () banked
  6883  00307A  AF0E               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
  6884  00307C  D01A               	goto	l7375
  6885                           
  6886                           ; BSR set to: 1
  6887  00307E  0101               	movlb	1	; () banked
  6888  003080  510E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  6889  003082  0A80               	xorlw	128
  6890  003084  0F97               	addlw	151
  6891  003086  B0D8               	btfsc	status,0,c
  6892  003088  D00A               	goto	l7371
  6893                           
  6894                           ; BSR set to: 1
  6895  00308A  0E00               	movlw	0
  6896  00308C  0101               	movlb	1	; () banked
  6897  00308E  6F00               	movwf	?__tdiv_to_l_& (0+255),b
  6898  003090  0E00               	movlw	0
  6899  003092  6F01               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  6900  003094  0E00               	movlw	0
  6901  003096  6F02               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  6902  003098  0E00               	movlw	0
  6903  00309A  6F03               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  6904                           
  6905                           ; BSR set to: 1
  6906  00309C  0012               	return	
  6907  00309E                     l7371:
  6908                           
  6909                           ; BSR set to: 1
  6910  00309E  0101               	movlb	1	; () banked
  6911  0030A0  90D8               	bcf	status,0,c
  6912  0030A2  330C               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  6913  0030A4  330B               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  6914  0030A6  330A               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  6915  0030A8  3309               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
  6916                           
  6917                           ; BSR set to: 1
  6918  0030AA  0101               	movlb	1	; () banked
  6919  0030AC  3F0E               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
  6920  0030AE  D7F7               	goto	l7371
  6921                           
  6922                           ; BSR set to: 1
  6923  0030B0  D01B               	goto	l910
  6924  0030B2                     l7375:
  6925                           
  6926                           ; BSR set to: 1
  6927  0030B2  0E17               	movlw	23
  6928  0030B4  0101               	movlb	1	; () banked
  6929  0030B6  650E               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
  6930  0030B8  D012               	goto	l7383
  6931                           
  6932                           ; BSR set to: 1
  6933  0030BA  0E00               	movlw	0
  6934  0030BC  0101               	movlb	1	; () banked
  6935  0030BE  6F00               	movwf	?__tdiv_to_l_& (0+255),b
  6936  0030C0  0E00               	movlw	0
  6937  0030C2  6F01               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  6938  0030C4  0E00               	movlw	0
  6939  0030C6  6F02               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  6940  0030C8  0E00               	movlw	0
  6941  0030CA  6F03               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  6942                           
  6943                           ; BSR set to: 1
  6944  0030CC  0012               	return	
  6945  0030CE                     l7381:
  6946                           
  6947                           ; BSR set to: 1
  6948  0030CE  0101               	movlb	1	; () banked
  6949  0030D0  90D8               	bcf	status,0,c
  6950  0030D2  3709               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  6951  0030D4  370A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  6952  0030D6  370B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  6953  0030D8  370C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  6954  0030DA  0101               	movlb	1	; () banked
  6955  0030DC  070E               	decf	__tdiv_to_l_@exp1& (0+255),f,b
  6956  0030DE                     l7383:
  6957                           
  6958                           ; BSR set to: 1
  6959  0030DE  0101               	movlb	1	; () banked
  6960  0030E0  510E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  6961  0030E2  0101               	movlb	1	; () banked
  6962  0030E4  A4D8               	btfss	status,2,c
  6963  0030E6  D7F3               	goto	l7381
  6964  0030E8                     l910:
  6965                           
  6966                           ; BSR set to: 1
  6967  0030E8  C109  F100         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  6968  0030EC  C10A  F101         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  6969  0030F0  C10B  F102         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  6970  0030F4  C10C  F103         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  6971                           
  6972                           ; BSR set to: 1
  6973  0030F8  0012               	return		;funcret
  6974  0030FA                     __end_of__tdiv_to_l_:
  6975                           	opt stack 0
  6976                           tblptru	equ	0xFF8
  6977                           tblptrh	equ	0xFF7
  6978                           tblptrl	equ	0xFF6
  6979                           tablat	equ	0xFF5
  6980                           prodh	equ	0xFF4
  6981                           prodl	equ	0xFF3
  6982                           intcon	equ	0xFF2
  6983                           intcon3	equ	0xFF0
  6984                           postinc0	equ	0xFEE
  6985                           wreg	equ	0xFE8
  6986                           indf2	equ	0xFDF
  6987                           postinc2	equ	0xFDE
  6988                           postdec2	equ	0xFDD
  6989                           fsr2h	equ	0xFDA
  6990                           fsr2l	equ	0xFD9
  6991                           status	equ	0xFD8
  6992                           
  6993 ;; *************** function __div_to_l_ *****************
  6994 ;; Defined at:
  6995 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fldivl.c"
  6996 ;; Parameters:    Size  Location     Type
  6997 ;;  f1              3    0[BANK1 ] unsigned long 
  6998 ;;  f2              3    3[BANK1 ] unsigned long 
  6999 ;; Auto vars:     Size  Location     Type
  7000 ;;  quot            4    6[BANK1 ] unsigned long 
  7001 ;;  exp1            1   11[BANK1 ] unsigned char 
  7002 ;;  cntr            1   10[BANK1 ] unsigned char 
  7003 ;; Return value:  Size  Location     Type
  7004 ;;                  4    0[BANK1 ] unsigned long 
  7005 ;; Registers used:
  7006 ;;		wreg, status,2, status,0
  7007 ;; Tracked objects:
  7008 ;;		On entry : 0/0
  7009 ;;		On exit  : 0/0
  7010 ;;		Unchanged: 0/0
  7011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7012 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7013 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7015 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7016 ;;Total ram usage:       12 bytes
  7017 ;; Hardware stack levels used:    1
  7018 ;; Hardware stack levels required when called:    8
  7019 ;; This function calls:
  7020 ;;		Nothing
  7021 ;; This function is called by:
  7022 ;;		_printf
  7023 ;; This function uses a non-reentrant model
  7024 ;;
  7025                           
  7026                           	psect	text12
  7027  0030FA                     __ptext12:
  7028                           	opt stack 0
  7029  0030FA                     __div_to_l_:
  7030                           	opt stack 20
  7031                           
  7032                           ; BSR set to: 1
  7033                           ;incstack = 0
  7034  0030FA  0101               	movlb	1	; () banked
  7035  0030FC  3502               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
  7036  0030FE  3503               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
  7037  003100  0101               	movlb	1	; () banked
  7038  003102  6F0B               	movwf	__div_to_l_@exp1& (0+255),b
  7039  003104  0101               	movlb	1	; () banked
  7040  003106  510B               	movf	__div_to_l_@exp1& (0+255),w,b
  7041  003108  A4D8               	btfss	status,2,c
  7042  00310A  D00A               	goto	l7391
  7043                           
  7044                           ; BSR set to: 1
  7045  00310C  0E00               	movlw	0
  7046  00310E  0101               	movlb	1	; () banked
  7047  003110  6F00               	movwf	?__div_to_l_& (0+255),b
  7048  003112  0E00               	movlw	0
  7049  003114  6F01               	movwf	(?__div_to_l_+1)& (0+255),b
  7050  003116  0E00               	movlw	0
  7051  003118  6F02               	movwf	(?__div_to_l_+2)& (0+255),b
  7052  00311A  0E00               	movlw	0
  7053  00311C  6F03               	movwf	(?__div_to_l_+3)& (0+255),b
  7054                           
  7055                           ; BSR set to: 1
  7056  00311E  0012               	return	
  7057  003120                     l7391:
  7058                           
  7059                           ; BSR set to: 1
  7060  003120  0101               	movlb	1	; () banked
  7061  003122  3505               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
  7062  003124  3506               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
  7063  003126  0101               	movlb	1	; () banked
  7064  003128  6F0A               	movwf	__div_to_l_@cntr& (0+255),b
  7065  00312A  0101               	movlb	1	; () banked
  7066  00312C  510A               	movf	__div_to_l_@cntr& (0+255),w,b
  7067  00312E  A4D8               	btfss	status,2,c
  7068  003130  D00A               	goto	l7397
  7069                           
  7070                           ; BSR set to: 1
  7071  003132  0E00               	movlw	0
  7072  003134  0101               	movlb	1	; () banked
  7073  003136  6F00               	movwf	?__div_to_l_& (0+255),b
  7074  003138  0E00               	movlw	0
  7075  00313A  6F01               	movwf	(?__div_to_l_+1)& (0+255),b
  7076  00313C  0E00               	movlw	0
  7077  00313E  6F02               	movwf	(?__div_to_l_+2)& (0+255),b
  7078  003140  0E00               	movlw	0
  7079  003142  6F03               	movwf	(?__div_to_l_+3)& (0+255),b
  7080                           
  7081                           ; BSR set to: 1
  7082  003144  0012               	return	
  7083  003146                     l7397:
  7084                           
  7085                           ; BSR set to: 1
  7086  003146  0101               	movlb	1	; () banked
  7087  003148  8F02               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
  7088                           
  7089                           ; BSR set to: 1
  7090  00314A  0EFF               	movlw	255
  7091  00314C  0101               	movlb	1	; () banked
  7092  00314E  1700               	andwf	__div_to_l_@f1& (0+255),f,b
  7093  003150  0EFF               	movlw	255
  7094  003152  1701               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
  7095  003154  0EFF               	movlw	255
  7096  003156  1702               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
  7097  003158  0E00               	movlw	0
  7098  00315A  1703               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
  7099                           
  7100                           ; BSR set to: 1
  7101  00315C  0101               	movlb	1	; () banked
  7102  00315E  8F05               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
  7103  003160  0EFF               	movlw	255
  7104  003162  0101               	movlb	1	; () banked
  7105  003164  1703               	andwf	__div_to_l_@f2& (0+255),f,b
  7106  003166  0EFF               	movlw	255
  7107  003168  1704               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
  7108  00316A  0EFF               	movlw	255
  7109  00316C  1705               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
  7110  00316E  0E00               	movlw	0
  7111  003170  1706               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
  7112                           
  7113                           ; BSR set to: 1
  7114  003172  0E00               	movlw	0
  7115  003174  0101               	movlb	1	; () banked
  7116  003176  6F06               	movwf	__div_to_l_@quot& (0+255),b
  7117  003178  0E00               	movlw	0
  7118  00317A  6F07               	movwf	(__div_to_l_@quot+1)& (0+255),b
  7119  00317C  0E00               	movlw	0
  7120  00317E  6F08               	movwf	(__div_to_l_@quot+2)& (0+255),b
  7121  003180  0E00               	movlw	0
  7122  003182  6F09               	movwf	(__div_to_l_@quot+3)& (0+255),b
  7123                           
  7124                           ; BSR set to: 1
  7125  003184  0E7F               	movlw	127
  7126  003186  0101               	movlb	1	; () banked
  7127  003188  5F0B               	subwf	__div_to_l_@exp1& (0+255),f,b
  7128                           
  7129                           ; BSR set to: 1
  7130  00318A  0101               	movlb	1	; () banked
  7131  00318C  510A               	movf	__div_to_l_@cntr& (0+255),w,b
  7132  00318E  0FA0               	addlw	160
  7133  003190  0101               	movlb	1	; () banked
  7134  003192  5F0B               	subwf	__div_to_l_@exp1& (0+255),f,b
  7135                           
  7136                           ; BSR set to: 1
  7137  003194  0E20               	movlw	32
  7138  003196  0101               	movlb	1	; () banked
  7139  003198  6F0A               	movwf	__div_to_l_@cntr& (0+255),b
  7140  00319A                     l7411:
  7141                           
  7142                           ; BSR set to: 1
  7143  00319A  0101               	movlb	1	; () banked
  7144  00319C  90D8               	bcf	status,0,c
  7145  00319E  3706               	rlcf	__div_to_l_@quot& (0+255),f,b
  7146  0031A0  3707               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  7147  0031A2  3708               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  7148  0031A4  3709               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  7149                           
  7150                           ; BSR set to: 1
  7151  0031A6  0101               	movlb	1	; () banked
  7152  0031A8  5103               	movf	__div_to_l_@f2& (0+255),w,b
  7153  0031AA  0101               	movlb	1	; () banked
  7154  0031AC  5D00               	subwf	__div_to_l_@f1& (0+255),w,b
  7155  0031AE  0101               	movlb	1	; () banked
  7156  0031B0  5104               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  7157  0031B2  0101               	movlb	1	; () banked
  7158  0031B4  5901               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
  7159  0031B6  0101               	movlb	1	; () banked
  7160  0031B8  5105               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  7161  0031BA  0101               	movlb	1	; () banked
  7162  0031BC  5902               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
  7163  0031BE  0101               	movlb	1	; () banked
  7164  0031C0  5106               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  7165  0031C2  0101               	movlb	1	; () banked
  7166  0031C4  5903               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
  7167  0031C6  A0D8               	btfss	status,0,c
  7168  0031C8  D012               	goto	l7419
  7169                           
  7170                           ; BSR set to: 1
  7171  0031CA  0101               	movlb	1	; () banked
  7172  0031CC  5103               	movf	__div_to_l_@f2& (0+255),w,b
  7173  0031CE  0101               	movlb	1	; () banked
  7174  0031D0  5F00               	subwf	__div_to_l_@f1& (0+255),f,b
  7175  0031D2  0101               	movlb	1	; () banked
  7176  0031D4  5104               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  7177  0031D6  0101               	movlb	1	; () banked
  7178  0031D8  5B01               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
  7179  0031DA  0101               	movlb	1	; () banked
  7180  0031DC  5105               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  7181  0031DE  0101               	movlb	1	; () banked
  7182  0031E0  5B02               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
  7183  0031E2  0101               	movlb	1	; () banked
  7184  0031E4  5106               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  7185  0031E6  0101               	movlb	1	; () banked
  7186  0031E8  5B03               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
  7187                           
  7188                           ; BSR set to: 1
  7189  0031EA  0101               	movlb	1	; () banked
  7190  0031EC  8106               	bsf	__div_to_l_@quot& (0+255),0,b
  7191  0031EE                     l7419:
  7192                           
  7193                           ; BSR set to: 1
  7194  0031EE  0101               	movlb	1	; () banked
  7195  0031F0  90D8               	bcf	status,0,c
  7196  0031F2  3700               	rlcf	__div_to_l_@f1& (0+255),f,b
  7197  0031F4  3701               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
  7198  0031F6  3702               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
  7199  0031F8  3703               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
  7200                           
  7201                           ; BSR set to: 1
  7202  0031FA  0101               	movlb	1	; () banked
  7203  0031FC  2F0A               	decfsz	__div_to_l_@cntr& (0+255),f,b
  7204  0031FE  D7CD               	goto	l7411
  7205                           
  7206                           ; BSR set to: 1
  7207                           
  7208                           ; BSR set to: 1
  7209  003200  0101               	movlb	1	; () banked
  7210  003202  AF0B               	btfss	__div_to_l_@exp1& (0+255),7,b
  7211  003204  D01A               	goto	l7435
  7212                           
  7213                           ; BSR set to: 1
  7214  003206  0101               	movlb	1	; () banked
  7215  003208  510B               	movf	__div_to_l_@exp1& (0+255),w,b
  7216  00320A  0A80               	xorlw	128
  7217  00320C  0F9F               	addlw	159
  7218  00320E  B0D8               	btfsc	status,0,c
  7219  003210  D00A               	goto	l7431
  7220                           
  7221                           ; BSR set to: 1
  7222  003212  0E00               	movlw	0
  7223  003214  0101               	movlb	1	; () banked
  7224  003216  6F00               	movwf	?__div_to_l_& (0+255),b
  7225  003218  0E00               	movlw	0
  7226  00321A  6F01               	movwf	(?__div_to_l_+1)& (0+255),b
  7227  00321C  0E00               	movlw	0
  7228  00321E  6F02               	movwf	(?__div_to_l_+2)& (0+255),b
  7229  003220  0E00               	movlw	0
  7230  003222  6F03               	movwf	(?__div_to_l_+3)& (0+255),b
  7231                           
  7232                           ; BSR set to: 1
  7233  003224  0012               	return	
  7234  003226                     l7431:
  7235                           
  7236                           ; BSR set to: 1
  7237  003226  0101               	movlb	1	; () banked
  7238  003228  90D8               	bcf	status,0,c
  7239  00322A  3309               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
  7240  00322C  3308               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
  7241  00322E  3307               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
  7242  003230  3306               	rrcf	__div_to_l_@quot& (0+255),f,b
  7243                           
  7244                           ; BSR set to: 1
  7245  003232  0101               	movlb	1	; () banked
  7246  003234  3F0B               	incfsz	__div_to_l_@exp1& (0+255),f,b
  7247  003236  D7F7               	goto	l7431
  7248                           
  7249                           ; BSR set to: 1
  7250  003238  D01B               	goto	l806
  7251  00323A                     l7435:
  7252                           
  7253                           ; BSR set to: 1
  7254  00323A  0E1F               	movlw	31
  7255  00323C  0101               	movlb	1	; () banked
  7256  00323E  650B               	cpfsgt	__div_to_l_@exp1& (0+255),b
  7257  003240  D012               	goto	l7443
  7258                           
  7259                           ; BSR set to: 1
  7260  003242  0E00               	movlw	0
  7261  003244  0101               	movlb	1	; () banked
  7262  003246  6F00               	movwf	?__div_to_l_& (0+255),b
  7263  003248  0E00               	movlw	0
  7264  00324A  6F01               	movwf	(?__div_to_l_+1)& (0+255),b
  7265  00324C  0E00               	movlw	0
  7266  00324E  6F02               	movwf	(?__div_to_l_+2)& (0+255),b
  7267  003250  0E00               	movlw	0
  7268  003252  6F03               	movwf	(?__div_to_l_+3)& (0+255),b
  7269                           
  7270                           ; BSR set to: 1
  7271  003254  0012               	return	
  7272  003256                     l7441:
  7273                           
  7274                           ; BSR set to: 1
  7275  003256  0101               	movlb	1	; () banked
  7276  003258  90D8               	bcf	status,0,c
  7277  00325A  3706               	rlcf	__div_to_l_@quot& (0+255),f,b
  7278  00325C  3707               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  7279  00325E  3708               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  7280  003260  3709               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  7281  003262  0101               	movlb	1	; () banked
  7282  003264  070B               	decf	__div_to_l_@exp1& (0+255),f,b
  7283  003266                     l7443:
  7284                           
  7285                           ; BSR set to: 1
  7286  003266  0101               	movlb	1	; () banked
  7287  003268  510B               	movf	__div_to_l_@exp1& (0+255),w,b
  7288  00326A  0101               	movlb	1	; () banked
  7289  00326C  A4D8               	btfss	status,2,c
  7290  00326E  D7F3               	goto	l7441
  7291  003270                     l806:
  7292                           
  7293                           ; BSR set to: 1
  7294  003270  C106  F100         	movff	__div_to_l_@quot,?__div_to_l_
  7295  003274  C107  F101         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  7296  003278  C108  F102         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  7297  00327C  C109  F103         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  7298                           
  7299                           ; BSR set to: 1
  7300  003280  0012               	return		;funcret
  7301  003282                     __end_of__div_to_l_:
  7302                           	opt stack 0
  7303                           tblptru	equ	0xFF8
  7304                           tblptrh	equ	0xFF7
  7305                           tblptrl	equ	0xFF6
  7306                           tablat	equ	0xFF5
  7307                           prodh	equ	0xFF4
  7308                           prodl	equ	0xFF3
  7309                           intcon	equ	0xFF2
  7310                           intcon3	equ	0xFF0
  7311                           postinc0	equ	0xFEE
  7312                           wreg	equ	0xFE8
  7313                           indf2	equ	0xFDF
  7314                           postinc2	equ	0xFDE
  7315                           postdec2	equ	0xFDD
  7316                           fsr2h	equ	0xFDA
  7317                           fsr2l	equ	0xFD9
  7318                           status	equ	0xFD8
  7319                           
  7320 ;; *************** function ___lltoft *****************
  7321 ;; Defined at:
  7322 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lltoft.c"
  7323 ;; Parameters:    Size  Location     Type
  7324 ;;  c               4    8[BANK1 ] unsigned long 
  7325 ;; Auto vars:     Size  Location     Type
  7326 ;;  exp             1   16[BANK1 ] unsigned char 
  7327 ;; Return value:  Size  Location     Type
  7328 ;;                  3    8[BANK1 ] float 
  7329 ;; Registers used:
  7330 ;;		wreg, status,2, status,0, cstack
  7331 ;; Tracked objects:
  7332 ;;		On entry : 0/0
  7333 ;;		On exit  : 0/0
  7334 ;;		Unchanged: 0/0
  7335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7336 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7337 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7338 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7339 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7340 ;;Total ram usage:        9 bytes
  7341 ;; Hardware stack levels used:    1
  7342 ;; Hardware stack levels required when called:    9
  7343 ;; This function calls:
  7344 ;;		___ftpack
  7345 ;; This function is called by:
  7346 ;;		_printf
  7347 ;; This function uses a non-reentrant model
  7348 ;;
  7349                           
  7350                           	psect	text13
  7351  004A88                     __ptext13:
  7352                           	opt stack 0
  7353  004A88                     ___lltoft:
  7354                           	opt stack 19
  7355                           
  7356                           ; BSR set to: 1
  7357                           ;incstack = 0
  7358  004A88  0E8E               	movlw	142
  7359  004A8A  0101               	movlb	1	; () banked
  7360  004A8C  6F10               	movwf	___lltoft@exp& (0+255),b
  7361  004A8E  D008               	goto	l7517
  7362  004A90                     l7515:
  7363                           
  7364                           ; BSR set to: 1
  7365  004A90  0101               	movlb	1	; () banked
  7366  004A92  90D8               	bcf	status,0,c
  7367  004A94  330B               	rrcf	(___lltoft@c+3)& (0+255),f,b
  7368  004A96  330A               	rrcf	(___lltoft@c+2)& (0+255),f,b
  7369  004A98  3309               	rrcf	(___lltoft@c+1)& (0+255),f,b
  7370  004A9A  3308               	rrcf	___lltoft@c& (0+255),f,b
  7371  004A9C  0101               	movlb	1	; () banked
  7372  004A9E  2B10               	incf	___lltoft@exp& (0+255),f,b
  7373  004AA0                     l7517:
  7374                           
  7375                           ; BSR set to: 1
  7376  004AA0  0E00               	movlw	0
  7377  004AA2  0101               	movlb	1	; () banked
  7378  004AA4  1508               	andwf	___lltoft@c& (0+255),w,b
  7379  004AA6  0101               	movlb	1	; () banked
  7380  004AA8  6F0C               	movwf	??___lltoft& (0+255),b
  7381  004AAA  0E00               	movlw	0
  7382  004AAC  0101               	movlb	1	; () banked
  7383  004AAE  1509               	andwf	(___lltoft@c+1)& (0+255),w,b
  7384  004AB0  0101               	movlb	1	; () banked
  7385  004AB2  6F0D               	movwf	(??___lltoft+1)& (0+255),b
  7386  004AB4  0E00               	movlw	0
  7387  004AB6  0101               	movlb	1	; () banked
  7388  004AB8  150A               	andwf	(___lltoft@c+2)& (0+255),w,b
  7389  004ABA  0101               	movlb	1	; () banked
  7390  004ABC  6F0E               	movwf	(??___lltoft+2)& (0+255),b
  7391  004ABE  0EFF               	movlw	255
  7392  004AC0  0101               	movlb	1	; () banked
  7393  004AC2  150B               	andwf	(___lltoft@c+3)& (0+255),w,b
  7394  004AC4  0101               	movlb	1	; () banked
  7395  004AC6  6F0F               	movwf	(??___lltoft+3)& (0+255),b
  7396  004AC8  0101               	movlb	1	; () banked
  7397  004ACA  510C               	movf	??___lltoft& (0+255),w,b
  7398  004ACC  0101               	movlb	1	; () banked
  7399  004ACE  110D               	iorwf	(??___lltoft+1)& (0+255),w,b
  7400  004AD0  0101               	movlb	1	; () banked
  7401  004AD2  110E               	iorwf	(??___lltoft+2)& (0+255),w,b
  7402  004AD4  0101               	movlb	1	; () banked
  7403  004AD6  110F               	iorwf	(??___lltoft+3)& (0+255),w,b
  7404  004AD8  A4D8               	btfss	status,2,c
  7405  004ADA  D7DA               	goto	l7515
  7406                           
  7407                           ; BSR set to: 1
  7408                           
  7409                           ; BSR set to: 1
  7410  004ADC  C108  F100         	movff	___lltoft@c,___ftpack@arg
  7411  004AE0  C109  F101         	movff	___lltoft@c+1,___ftpack@arg+1
  7412  004AE4  C10A  F102         	movff	___lltoft@c+2,___ftpack@arg+2
  7413  004AE8  C110  F103         	movff	___lltoft@exp,___ftpack@exp
  7414  004AEC  0E00               	movlw	0
  7415  004AEE  0101               	movlb	1	; () banked
  7416  004AF0  6F04               	movwf	___ftpack@sign& (0+255),b
  7417  004AF2  EC92  F01D         	call	___ftpack	;wreg free
  7418  004AF6  C100  F108         	movff	?___ftpack,?___lltoft
  7419  004AFA  C101  F109         	movff	?___ftpack+1,?___lltoft+1
  7420  004AFE  C102  F10A         	movff	?___ftpack+2,?___lltoft+2
  7421  004B02  0012               	return	
  7422  004B04                     __end_of___lltoft:
  7423                           	opt stack 0
  7424                           tblptru	equ	0xFF8
  7425                           tblptrh	equ	0xFF7
  7426                           tblptrl	equ	0xFF6
  7427                           tablat	equ	0xFF5
  7428                           prodh	equ	0xFF4
  7429                           prodl	equ	0xFF3
  7430                           intcon	equ	0xFF2
  7431                           intcon3	equ	0xFF0
  7432                           postinc0	equ	0xFEE
  7433                           wreg	equ	0xFE8
  7434                           indf2	equ	0xFDF
  7435                           postinc2	equ	0xFDE
  7436                           postdec2	equ	0xFDD
  7437                           fsr2h	equ	0xFDA
  7438                           fsr2l	equ	0xFD9
  7439                           status	equ	0xFD8
  7440                           
  7441 ;; *************** function ___llmod *****************
  7442 ;; Defined at:
  7443 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\llmod.c"
  7444 ;; Parameters:    Size  Location     Type
  7445 ;;  dividend        4   13[BANK1 ] unsigned long 
  7446 ;;  divisor         4   17[BANK1 ] unsigned long 
  7447 ;; Auto vars:     Size  Location     Type
  7448 ;;  counter         1   21[BANK1 ] unsigned char 
  7449 ;; Return value:  Size  Location     Type
  7450 ;;                  4   13[BANK1 ] unsigned long 
  7451 ;; Registers used:
  7452 ;;		wreg, status,2, status,0
  7453 ;; Tracked objects:
  7454 ;;		On entry : 0/0
  7455 ;;		On exit  : 0/0
  7456 ;;		Unchanged: 0/0
  7457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7458 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7459 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7461 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7462 ;;Total ram usage:        9 bytes
  7463 ;; Hardware stack levels used:    1
  7464 ;; Hardware stack levels required when called:    8
  7465 ;; This function calls:
  7466 ;;		Nothing
  7467 ;; This function is called by:
  7468 ;;		_printf
  7469 ;; This function uses a non-reentrant model
  7470 ;;
  7471                           
  7472                           	psect	text14
  7473  0046C2                     __ptext14:
  7474                           	opt stack 0
  7475  0046C2                     ___llmod:
  7476                           	opt stack 20
  7477                           
  7478                           ;incstack = 0
  7479  0046C2  0101               	movlb	1	; () banked
  7480  0046C4  5111               	movf	___llmod@divisor& (0+255),w,b
  7481  0046C6  0101               	movlb	1	; () banked
  7482  0046C8  1112               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  7483  0046CA  0101               	movlb	1	; () banked
  7484  0046CC  1113               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  7485  0046CE  0101               	movlb	1	; () banked
  7486  0046D0  1114               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  7487  0046D2  B4D8               	btfsc	status,2,c
  7488  0046D4  D03A               	goto	l995
  7489                           
  7490                           ; BSR set to: 1
  7491  0046D6  0E01               	movlw	1
  7492  0046D8  0101               	movlb	1	; () banked
  7493  0046DA  6F15               	movwf	___llmod@counter& (0+255),b
  7494  0046DC  D008               	goto	l7503
  7495  0046DE                     l7501:
  7496                           
  7497                           ; BSR set to: 1
  7498  0046DE  0101               	movlb	1	; () banked
  7499  0046E0  90D8               	bcf	status,0,c
  7500  0046E2  3711               	rlcf	___llmod@divisor& (0+255),f,b
  7501  0046E4  3712               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  7502  0046E6  3713               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  7503  0046E8  3714               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  7504  0046EA  0101               	movlb	1	; () banked
  7505  0046EC  2B15               	incf	___llmod@counter& (0+255),f,b
  7506  0046EE                     l7503:
  7507                           
  7508                           ; BSR set to: 1
  7509  0046EE  0101               	movlb	1	; () banked
  7510  0046F0  AF14               	btfss	(___llmod@divisor+3)& (0+255),7,b
  7511  0046F2  D7F5               	goto	l7501
  7512  0046F4                     l7505:
  7513                           
  7514                           ; BSR set to: 1
  7515  0046F4  0101               	movlb	1	; () banked
  7516  0046F6  5111               	movf	___llmod@divisor& (0+255),w,b
  7517  0046F8  0101               	movlb	1	; () banked
  7518  0046FA  5D0D               	subwf	___llmod@dividend& (0+255),w,b
  7519  0046FC  0101               	movlb	1	; () banked
  7520  0046FE  5112               	movf	(___llmod@divisor+1)& (0+255),w,b
  7521  004700  0101               	movlb	1	; () banked
  7522  004702  590E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  7523  004704  0101               	movlb	1	; () banked
  7524  004706  5113               	movf	(___llmod@divisor+2)& (0+255),w,b
  7525  004708  0101               	movlb	1	; () banked
  7526  00470A  590F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  7527  00470C  0101               	movlb	1	; () banked
  7528  00470E  5114               	movf	(___llmod@divisor+3)& (0+255),w,b
  7529  004710  0101               	movlb	1	; () banked
  7530  004712  5910               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  7531  004714  A0D8               	btfss	status,0,c
  7532  004716  D010               	goto	l7509
  7533                           
  7534                           ; BSR set to: 1
  7535  004718  0101               	movlb	1	; () banked
  7536  00471A  5111               	movf	___llmod@divisor& (0+255),w,b
  7537  00471C  0101               	movlb	1	; () banked
  7538  00471E  5F0D               	subwf	___llmod@dividend& (0+255),f,b
  7539  004720  0101               	movlb	1	; () banked
  7540  004722  5112               	movf	(___llmod@divisor+1)& (0+255),w,b
  7541  004724  0101               	movlb	1	; () banked
  7542  004726  5B0E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  7543  004728  0101               	movlb	1	; () banked
  7544  00472A  5113               	movf	(___llmod@divisor+2)& (0+255),w,b
  7545  00472C  0101               	movlb	1	; () banked
  7546  00472E  5B0F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  7547  004730  0101               	movlb	1	; () banked
  7548  004732  5114               	movf	(___llmod@divisor+3)& (0+255),w,b
  7549  004734  0101               	movlb	1	; () banked
  7550  004736  5B10               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  7551  004738                     l7509:
  7552                           
  7553                           ; BSR set to: 1
  7554  004738  0101               	movlb	1	; () banked
  7555  00473A  90D8               	bcf	status,0,c
  7556  00473C  3314               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  7557  00473E  3313               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  7558  004740  3312               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  7559  004742  3311               	rrcf	___llmod@divisor& (0+255),f,b
  7560                           
  7561                           ; BSR set to: 1
  7562  004744  0101               	movlb	1	; () banked
  7563  004746  2F15               	decfsz	___llmod@counter& (0+255),f,b
  7564  004748  D7D5               	goto	l7505
  7565  00474A                     l995:
  7566                           
  7567                           ; BSR set to: 1
  7568  00474A  C10D  F10D         	movff	___llmod@dividend,?___llmod
  7569  00474E  C10E  F10E         	movff	___llmod@dividend+1,?___llmod+1
  7570  004752  C10F  F10F         	movff	___llmod@dividend+2,?___llmod+2
  7571  004756  C110  F110         	movff	___llmod@dividend+3,?___llmod+3
  7572                           
  7573                           ; BSR set to: 1
  7574  00475A  0012               	return		;funcret
  7575  00475C                     __end_of___llmod:
  7576                           	opt stack 0
  7577                           tblptru	equ	0xFF8
  7578                           tblptrh	equ	0xFF7
  7579                           tblptrl	equ	0xFF6
  7580                           tablat	equ	0xFF5
  7581                           prodh	equ	0xFF4
  7582                           prodl	equ	0xFF3
  7583                           intcon	equ	0xFF2
  7584                           intcon3	equ	0xFF0
  7585                           postinc0	equ	0xFEE
  7586                           wreg	equ	0xFE8
  7587                           indf2	equ	0xFDF
  7588                           postinc2	equ	0xFDE
  7589                           postdec2	equ	0xFDD
  7590                           fsr2h	equ	0xFDA
  7591                           fsr2l	equ	0xFD9
  7592                           status	equ	0xFD8
  7593                           
  7594 ;; *************** function ___fttol *****************
  7595 ;; Defined at:
  7596 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
  7597 ;; Parameters:    Size  Location     Type
  7598 ;;  f1              3   42[BANK1 ] float 
  7599 ;; Auto vars:     Size  Location     Type
  7600 ;;  lval            4   52[BANK1 ] unsigned long 
  7601 ;;  exp1            1   56[BANK1 ] unsigned char 
  7602 ;;  sign1           1   51[BANK1 ] unsigned char 
  7603 ;; Return value:  Size  Location     Type
  7604 ;;                  4   42[BANK1 ] long 
  7605 ;; Registers used:
  7606 ;;		wreg, status,2, status,0
  7607 ;; Tracked objects:
  7608 ;;		On entry : 0/0
  7609 ;;		On exit  : 0/0
  7610 ;;		Unchanged: 0/0
  7611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7612 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7613 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7614 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7615 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7616 ;;Total ram usage:       15 bytes
  7617 ;; Hardware stack levels used:    1
  7618 ;; Hardware stack levels required when called:    8
  7619 ;; This function calls:
  7620 ;;		Nothing
  7621 ;; This function is called by:
  7622 ;;		_printf
  7623 ;; This function uses a non-reentrant model
  7624 ;;
  7625                           
  7626                           	psect	text15
  7627  003542                     __ptext15:
  7628                           	opt stack 0
  7629  003542                     ___fttol:
  7630                           	opt stack 20
  7631                           
  7632                           ; BSR set to: 1
  7633                           ;incstack = 0
  7634  003542  C12C  F12E         	movff	___fttol@f1+2,??___fttol
  7635  003546  0101               	movlb	1	; () banked
  7636  003548  6B2F               	clrf	(??___fttol+1)& (0+255),b
  7637  00354A  6B30               	clrf	(??___fttol+2)& (0+255),b
  7638  00354C  0101               	movlb	1	; () banked
  7639  00354E  352B               	rlcf	(___fttol@f1+1)& (0+255),w,b
  7640  003550  0101               	movlb	1	; () banked
  7641  003552  372E               	rlcf	??___fttol& (0+255),f,b
  7642  003554  E301               	bnc	u6131
  7643  003556  812F               	bsf	(??___fttol+1)& (0+255),0,b
  7644  003558                     u6131:
  7645  003558  0101               	movlb	1	; () banked
  7646  00355A  512E               	movf	??___fttol& (0+255),w,b
  7647  00355C  0101               	movlb	1	; () banked
  7648  00355E  6F38               	movwf	___fttol@exp1& (0+255),b
  7649  003560  0101               	movlb	1	; () banked
  7650  003562  5138               	movf	___fttol@exp1& (0+255),w,b
  7651  003564  A4D8               	btfss	status,2,c
  7652  003566  D00A               	goto	l5747
  7653                           
  7654                           ; BSR set to: 1
  7655  003568  0E00               	movlw	0
  7656  00356A  0101               	movlb	1	; () banked
  7657  00356C  6F2A               	movwf	?___fttol& (0+255),b
  7658  00356E  0E00               	movlw	0
  7659  003570  6F2B               	movwf	(?___fttol+1)& (0+255),b
  7660  003572  0E00               	movlw	0
  7661  003574  6F2C               	movwf	(?___fttol+2)& (0+255),b
  7662  003576  0E00               	movlw	0
  7663  003578  6F2D               	movwf	(?___fttol+3)& (0+255),b
  7664                           
  7665                           ; BSR set to: 1
  7666  00357A  0012               	return	
  7667  00357C                     l5747:
  7668                           
  7669                           ; BSR set to: 1
  7670  00357C  0E17               	movlw	23
  7671  00357E  0101               	movlb	1	; () banked
  7672  003580  6F2E               	movwf	??___fttol& (0+255),b
  7673  003582  C12A  F12F         	movff	___fttol@f1,??___fttol+1
  7674  003586  C12B  F130         	movff	___fttol@f1+1,??___fttol+2
  7675  00358A  C12C  F131         	movff	___fttol@f1+2,??___fttol+3
  7676  00358E  0101               	movlb	1	; () banked
  7677  003590  292E               	incf	??___fttol& (0+255),w,b
  7678  003592  0101               	movlb	1	; () banked
  7679  003594  6F32               	movwf	(??___fttol+4)& (0+255),b
  7680  003596  D005               	goto	u6150
  7681  003598                     u6155:
  7682  003598  0101               	movlb	1	; () banked
  7683  00359A  90D8               	bcf	status,0,c
  7684  00359C  3331               	rrcf	(??___fttol+3)& (0+255),f,b
  7685  00359E  3330               	rrcf	(??___fttol+2)& (0+255),f,b
  7686  0035A0  332F               	rrcf	(??___fttol+1)& (0+255),f,b
  7687  0035A2                     u6150:
  7688  0035A2  0101               	movlb	1	; () banked
  7689  0035A4  2F32               	decfsz	(??___fttol+4)& (0+255),f,b
  7690  0035A6  D7F8               	goto	u6155
  7691  0035A8  0101               	movlb	1	; () banked
  7692  0035AA  512F               	movf	(??___fttol+1)& (0+255),w,b
  7693  0035AC  0101               	movlb	1	; () banked
  7694  0035AE  6F33               	movwf	___fttol@sign1& (0+255),b
  7695                           
  7696                           ; BSR set to: 1
  7697  0035B0  0101               	movlb	1	; () banked
  7698  0035B2  8F2B               	bsf	(___fttol@f1+1)& (0+255),7,b
  7699                           
  7700                           ; BSR set to: 1
  7701  0035B4  0EFF               	movlw	255
  7702  0035B6  0101               	movlb	1	; () banked
  7703  0035B8  172A               	andwf	___fttol@f1& (0+255),f,b
  7704  0035BA  0EFF               	movlw	255
  7705  0035BC  0101               	movlb	1	; () banked
  7706  0035BE  172B               	andwf	(___fttol@f1+1)& (0+255),f,b
  7707  0035C0  0E00               	movlw	0
  7708  0035C2  0101               	movlb	1	; () banked
  7709  0035C4  172C               	andwf	(___fttol@f1+2)& (0+255),f,b
  7710                           
  7711                           ; BSR set to: 1
  7712  0035C6  0101               	movlb	1	; () banked
  7713  0035C8  512A               	movf	___fttol@f1& (0+255),w,b
  7714  0035CA  0101               	movlb	1	; () banked
  7715  0035CC  6F34               	movwf	___fttol@lval& (0+255),b
  7716  0035CE  0101               	movlb	1	; () banked
  7717  0035D0  512B               	movf	(___fttol@f1+1)& (0+255),w,b
  7718  0035D2  0101               	movlb	1	; () banked
  7719  0035D4  6F35               	movwf	(___fttol@lval+1)& (0+255),b
  7720  0035D6  0101               	movlb	1	; () banked
  7721  0035D8  512C               	movf	(___fttol@f1+2)& (0+255),w,b
  7722  0035DA  0101               	movlb	1	; () banked
  7723  0035DC  6F36               	movwf	(___fttol@lval+2)& (0+255),b
  7724  0035DE  0101               	movlb	1	; () banked
  7725  0035E0  6B37               	clrf	(___fttol@lval+3)& (0+255),b
  7726                           
  7727                           ; BSR set to: 1
  7728  0035E2  0E8E               	movlw	142
  7729  0035E4  0101               	movlb	1	; () banked
  7730  0035E6  5F38               	subwf	___fttol@exp1& (0+255),f,b
  7731                           
  7732                           ; BSR set to: 1
  7733  0035E8  0101               	movlb	1	; () banked
  7734  0035EA  AF38               	btfss	___fttol@exp1& (0+255),7,b
  7735  0035EC  D01A               	goto	l5769
  7736                           
  7737                           ; BSR set to: 1
  7738  0035EE  0101               	movlb	1	; () banked
  7739  0035F0  5138               	movf	___fttol@exp1& (0+255),w,b
  7740  0035F2  0A80               	xorlw	128
  7741  0035F4  0F8F               	addlw	143
  7742  0035F6  B0D8               	btfsc	status,0,c
  7743  0035F8  D00A               	goto	l5765
  7744                           
  7745                           ; BSR set to: 1
  7746  0035FA  0E00               	movlw	0
  7747  0035FC  0101               	movlb	1	; () banked
  7748  0035FE  6F2A               	movwf	?___fttol& (0+255),b
  7749  003600  0E00               	movlw	0
  7750  003602  6F2B               	movwf	(?___fttol+1)& (0+255),b
  7751  003604  0E00               	movlw	0
  7752  003606  6F2C               	movwf	(?___fttol+2)& (0+255),b
  7753  003608  0E00               	movlw	0
  7754  00360A  6F2D               	movwf	(?___fttol+3)& (0+255),b
  7755                           
  7756                           ; BSR set to: 1
  7757  00360C  0012               	return	
  7758  00360E                     l5765:
  7759                           
  7760                           ; BSR set to: 1
  7761  00360E  0101               	movlb	1	; () banked
  7762  003610  90D8               	bcf	status,0,c
  7763  003612  3337               	rrcf	(___fttol@lval+3)& (0+255),f,b
  7764  003614  3336               	rrcf	(___fttol@lval+2)& (0+255),f,b
  7765  003616  3335               	rrcf	(___fttol@lval+1)& (0+255),f,b
  7766  003618  3334               	rrcf	___fttol@lval& (0+255),f,b
  7767                           
  7768                           ; BSR set to: 1
  7769  00361A  0101               	movlb	1	; () banked
  7770  00361C  3F38               	incfsz	___fttol@exp1& (0+255),f,b
  7771  00361E  D7F7               	goto	l5765
  7772                           
  7773                           ; BSR set to: 1
  7774  003620  D01B               	goto	l5779
  7775  003622                     l5769:
  7776                           
  7777                           ; BSR set to: 1
  7778  003622  0E17               	movlw	23
  7779  003624  0101               	movlb	1	; () banked
  7780  003626  6538               	cpfsgt	___fttol@exp1& (0+255),b
  7781  003628  D012               	goto	l5777
  7782                           
  7783                           ; BSR set to: 1
  7784  00362A  0E00               	movlw	0
  7785  00362C  0101               	movlb	1	; () banked
  7786  00362E  6F2A               	movwf	?___fttol& (0+255),b
  7787  003630  0E00               	movlw	0
  7788  003632  6F2B               	movwf	(?___fttol+1)& (0+255),b
  7789  003634  0E00               	movlw	0
  7790  003636  6F2C               	movwf	(?___fttol+2)& (0+255),b
  7791  003638  0E00               	movlw	0
  7792  00363A  6F2D               	movwf	(?___fttol+3)& (0+255),b
  7793                           
  7794                           ; BSR set to: 1
  7795  00363C  0012               	return	
  7796  00363E                     l5775:
  7797                           
  7798                           ; BSR set to: 1
  7799  00363E  0101               	movlb	1	; () banked
  7800  003640  90D8               	bcf	status,0,c
  7801  003642  3734               	rlcf	___fttol@lval& (0+255),f,b
  7802  003644  3735               	rlcf	(___fttol@lval+1)& (0+255),f,b
  7803  003646  3736               	rlcf	(___fttol@lval+2)& (0+255),f,b
  7804  003648  3737               	rlcf	(___fttol@lval+3)& (0+255),f,b
  7805  00364A  0101               	movlb	1	; () banked
  7806  00364C  0738               	decf	___fttol@exp1& (0+255),f,b
  7807  00364E                     l5777:
  7808                           
  7809                           ; BSR set to: 1
  7810  00364E  0101               	movlb	1	; () banked
  7811  003650  5138               	movf	___fttol@exp1& (0+255),w,b
  7812  003652  0101               	movlb	1	; () banked
  7813  003654  A4D8               	btfss	status,2,c
  7814  003656  D7F3               	goto	l5775
  7815  003658                     l5779:
  7816                           
  7817                           ; BSR set to: 1
  7818  003658  0101               	movlb	1	; () banked
  7819  00365A  5133               	movf	___fttol@sign1& (0+255),w,b
  7820  00365C  0101               	movlb	1	; () banked
  7821  00365E  B4D8               	btfsc	status,2,c
  7822  003660  D009               	goto	l5783
  7823                           
  7824                           ; BSR set to: 1
  7825  003662  0101               	movlb	1	; () banked
  7826  003664  1F37               	comf	(___fttol@lval+3)& (0+255),f,b
  7827  003666  1F36               	comf	(___fttol@lval+2)& (0+255),f,b
  7828  003668  1F35               	comf	(___fttol@lval+1)& (0+255),f,b
  7829  00366A  6D34               	negf	___fttol@lval& (0+255),b
  7830  00366C  0E00               	movlw	0
  7831  00366E  2335               	addwfc	(___fttol@lval+1)& (0+255),f,b
  7832  003670  2336               	addwfc	(___fttol@lval+2)& (0+255),f,b
  7833  003672  2337               	addwfc	(___fttol@lval+3)& (0+255),f,b
  7834  003674                     l5783:
  7835                           
  7836                           ; BSR set to: 1
  7837  003674  C134  F12A         	movff	___fttol@lval,?___fttol
  7838  003678  C135  F12B         	movff	___fttol@lval+1,?___fttol+1
  7839  00367C  C136  F12C         	movff	___fttol@lval+2,?___fttol+2
  7840  003680  C137  F12D         	movff	___fttol@lval+3,?___fttol+3
  7841  003684  0012               	return	
  7842  003686                     __end_of___fttol:
  7843                           	opt stack 0
  7844                           tblptru	equ	0xFF8
  7845                           tblptrh	equ	0xFF7
  7846                           tblptrl	equ	0xFF6
  7847                           tablat	equ	0xFF5
  7848                           prodh	equ	0xFF4
  7849                           prodl	equ	0xFF3
  7850                           intcon	equ	0xFF2
  7851                           intcon3	equ	0xFF0
  7852                           postinc0	equ	0xFEE
  7853                           wreg	equ	0xFE8
  7854                           indf2	equ	0xFDF
  7855                           postinc2	equ	0xFDE
  7856                           postdec2	equ	0xFDD
  7857                           fsr2h	equ	0xFDA
  7858                           fsr2l	equ	0xFD9
  7859                           status	equ	0xFD8
  7860                           
  7861 ;; *************** function ___ftsub *****************
  7862 ;; Defined at:
  7863 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftsub.c"
  7864 ;; Parameters:    Size  Location     Type
  7865 ;;  f1              3   57[BANK1 ] float 
  7866 ;;  f2              3   60[BANK1 ] float 
  7867 ;; Auto vars:     Size  Location     Type
  7868 ;;		None
  7869 ;; Return value:  Size  Location     Type
  7870 ;;                  3   57[BANK1 ] float 
  7871 ;; Registers used:
  7872 ;;		wreg, status,2, status,0, cstack
  7873 ;; Tracked objects:
  7874 ;;		On entry : 0/0
  7875 ;;		On exit  : 0/0
  7876 ;;		Unchanged: 0/0
  7877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7878 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7881 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7882 ;;Total ram usage:        6 bytes
  7883 ;; Hardware stack levels used:    1
  7884 ;; Hardware stack levels required when called:   10
  7885 ;; This function calls:
  7886 ;;		___ftadd
  7887 ;; This function is called by:
  7888 ;;		_printf
  7889 ;; This function uses a non-reentrant model
  7890 ;;
  7891                           
  7892                           	psect	text16
  7893  004E92                     __ptext16:
  7894                           	opt stack 0
  7895  004E92                     ___ftsub:
  7896                           	opt stack 18
  7897                           
  7898                           ; BSR set to: 1
  7899                           ;incstack = 0
  7900  004E92  0101               	movlb	1	; () banked
  7901  004E94  513C               	movf	___ftsub@f2& (0+255),w,b
  7902  004E96  0101               	movlb	1	; () banked
  7903  004E98  113D               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  7904  004E9A  0101               	movlb	1	; () banked
  7905  004E9C  113E               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  7906  004E9E  B4D8               	btfsc	status,2,c
  7907  004EA0  D009               	goto	l7449
  7908                           
  7909                           ; BSR set to: 1
  7910  004EA2  0E00               	movlw	0
  7911  004EA4  0101               	movlb	1	; () banked
  7912  004EA6  1B3C               	xorwf	___ftsub@f2& (0+255),f,b
  7913  004EA8  0E00               	movlw	0
  7914  004EAA  0101               	movlb	1	; () banked
  7915  004EAC  1B3D               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  7916  004EAE  0E80               	movlw	128
  7917  004EB0  0101               	movlb	1	; () banked
  7918  004EB2  1B3E               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  7919  004EB4                     l7449:
  7920                           
  7921                           ; BSR set to: 1
  7922  004EB4  C139  F12D         	movff	___ftsub@f1,___ftadd@f1
  7923  004EB8  C13A  F12E         	movff	___ftsub@f1+1,___ftadd@f1+1
  7924  004EBC  C13B  F12F         	movff	___ftsub@f1+2,___ftadd@f1+2
  7925  004EC0  C13C  F130         	movff	___ftsub@f2,___ftadd@f2
  7926  004EC4  C13D  F131         	movff	___ftsub@f2+1,___ftadd@f2+1
  7927  004EC8  C13E  F132         	movff	___ftsub@f2+2,___ftadd@f2+2
  7928  004ECC  EC70  F013         	call	___ftadd	;wreg free
  7929  004ED0  C12D  F139         	movff	?___ftadd,?___ftsub
  7930  004ED4  C12E  F13A         	movff	?___ftadd+1,?___ftsub+1
  7931  004ED8  C12F  F13B         	movff	?___ftadd+2,?___ftsub+2
  7932  004EDC  0012               	return	
  7933  004EDE                     __end_of___ftsub:
  7934                           	opt stack 0
  7935                           tblptru	equ	0xFF8
  7936                           tblptrh	equ	0xFF7
  7937                           tblptrl	equ	0xFF6
  7938                           tablat	equ	0xFF5
  7939                           prodh	equ	0xFF4
  7940                           prodl	equ	0xFF3
  7941                           intcon	equ	0xFF2
  7942                           intcon3	equ	0xFF0
  7943                           postinc0	equ	0xFEE
  7944                           wreg	equ	0xFE8
  7945                           indf2	equ	0xFDF
  7946                           postinc2	equ	0xFDE
  7947                           postdec2	equ	0xFDD
  7948                           fsr2h	equ	0xFDA
  7949                           fsr2l	equ	0xFD9
  7950                           status	equ	0xFD8
  7951                           
  7952 ;; *************** function ___ftadd *****************
  7953 ;; Defined at:
  7954 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftadd.c"
  7955 ;; Parameters:    Size  Location     Type
  7956 ;;  f1              3   45[BANK1 ] float 
  7957 ;;  f2              3   48[BANK1 ] float 
  7958 ;; Auto vars:     Size  Location     Type
  7959 ;;  exp1            1   56[BANK1 ] unsigned char 
  7960 ;;  exp2            1   55[BANK1 ] unsigned char 
  7961 ;;  sign            1   54[BANK1 ] unsigned char 
  7962 ;; Return value:  Size  Location     Type
  7963 ;;                  3   45[BANK1 ] float 
  7964 ;; Registers used:
  7965 ;;		wreg, status,2, status,0, cstack
  7966 ;; Tracked objects:
  7967 ;;		On entry : 0/0
  7968 ;;		On exit  : 0/0
  7969 ;;		Unchanged: 0/0
  7970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7971 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7972 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7973 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7974 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7975 ;;Total ram usage:       12 bytes
  7976 ;; Hardware stack levels used:    1
  7977 ;; Hardware stack levels required when called:    9
  7978 ;; This function calls:
  7979 ;;		___ftpack
  7980 ;; This function is called by:
  7981 ;;		_printf
  7982 ;;		___ftsub
  7983 ;; This function uses a non-reentrant model
  7984 ;;
  7985                           
  7986                           	psect	text17
  7987  0026E0                     __ptext17:
  7988                           	opt stack 0
  7989  0026E0                     ___ftadd:
  7990                           	opt stack 18
  7991                           
  7992                           ;incstack = 0
  7993  0026E0  C12F  F133         	movff	___ftadd@f1+2,??___ftadd
  7994  0026E4  0101               	movlb	1	; () banked
  7995  0026E6  6B34               	clrf	(??___ftadd+1)& (0+255),b
  7996  0026E8  6B35               	clrf	(??___ftadd+2)& (0+255),b
  7997  0026EA  0101               	movlb	1	; () banked
  7998  0026EC  352E               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  7999  0026EE  0101               	movlb	1	; () banked
  8000  0026F0  3733               	rlcf	??___ftadd& (0+255),f,b
  8001  0026F2  E301               	bnc	u7211
  8002  0026F4  8134               	bsf	(??___ftadd+1)& (0+255),0,b
  8003  0026F6                     u7211:
  8004  0026F6  0101               	movlb	1	; () banked
  8005  0026F8  5133               	movf	??___ftadd& (0+255),w,b
  8006  0026FA  0101               	movlb	1	; () banked
  8007  0026FC  6F38               	movwf	___ftadd@exp1& (0+255),b
  8008  0026FE  C132  F133         	movff	___ftadd@f2+2,??___ftadd
  8009  002702  0101               	movlb	1	; () banked
  8010  002704  6B34               	clrf	(??___ftadd+1)& (0+255),b
  8011  002706  6B35               	clrf	(??___ftadd+2)& (0+255),b
  8012  002708  0101               	movlb	1	; () banked
  8013  00270A  3531               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  8014  00270C  0101               	movlb	1	; () banked
  8015  00270E  3733               	rlcf	??___ftadd& (0+255),f,b
  8016  002710  E301               	bnc	u7221
  8017  002712  8134               	bsf	(??___ftadd+1)& (0+255),0,b
  8018  002714                     u7221:
  8019  002714  0101               	movlb	1	; () banked
  8020  002716  5133               	movf	??___ftadd& (0+255),w,b
  8021  002718  0101               	movlb	1	; () banked
  8022  00271A  6F37               	movwf	___ftadd@exp2& (0+255),b
  8023                           
  8024                           ; BSR set to: 1
  8025  00271C  0101               	movlb	1	; () banked
  8026  00271E  5138               	movf	___ftadd@exp1& (0+255),w,b
  8027  002720  0101               	movlb	1	; () banked
  8028  002722  B4D8               	btfsc	status,2,c
  8029  002724  D011               	goto	l861
  8030                           
  8031                           ; BSR set to: 1
  8032  002726  0101               	movlb	1	; () banked
  8033  002728  5137               	movf	___ftadd@exp2& (0+255),w,b
  8034  00272A  0101               	movlb	1	; () banked
  8035  00272C  5D38               	subwf	___ftadd@exp1& (0+255),w,b
  8036  00272E  B0D8               	btfsc	status,0,c
  8037  002730  D012               	goto	l7019
  8038                           
  8039                           ; BSR set to: 1
  8040  002732  0101               	movlb	1	; () banked
  8041  002734  5138               	movf	___ftadd@exp1& (0+255),w,b
  8042  002736  0800               	sublw	0
  8043  002738  0101               	movlb	1	; () banked
  8044  00273A  2537               	addwf	___ftadd@exp2& (0+255),w,b
  8045  00273C  0101               	movlb	1	; () banked
  8046  00273E  6F33               	movwf	??___ftadd& (0+255),b
  8047  002740  0E18               	movlw	24
  8048  002742  0101               	movlb	1	; () banked
  8049  002744  6533               	cpfsgt	??___ftadd& (0+255),b
  8050  002746  D007               	goto	l7019
  8051  002748                     l861:
  8052                           
  8053                           ; BSR set to: 1
  8054  002748  C130  F12D         	movff	___ftadd@f2,?___ftadd
  8055  00274C  C131  F12E         	movff	___ftadd@f2+1,?___ftadd+1
  8056  002750  C132  F12F         	movff	___ftadd@f2+2,?___ftadd+2
  8057  002754  0012               	return	
  8058  002756                     l7019:
  8059                           
  8060                           ; BSR set to: 1
  8061  002756  0101               	movlb	1	; () banked
  8062  002758  5137               	movf	___ftadd@exp2& (0+255),w,b
  8063  00275A  0101               	movlb	1	; () banked
  8064  00275C  B4D8               	btfsc	status,2,c
  8065  00275E  D011               	goto	l865
  8066                           
  8067                           ; BSR set to: 1
  8068  002760  0101               	movlb	1	; () banked
  8069  002762  5138               	movf	___ftadd@exp1& (0+255),w,b
  8070  002764  0101               	movlb	1	; () banked
  8071  002766  5D37               	subwf	___ftadd@exp2& (0+255),w,b
  8072  002768  B0D8               	btfsc	status,0,c
  8073  00276A  D012               	goto	l7025
  8074                           
  8075                           ; BSR set to: 1
  8076  00276C  0101               	movlb	1	; () banked
  8077  00276E  5137               	movf	___ftadd@exp2& (0+255),w,b
  8078  002770  0800               	sublw	0
  8079  002772  0101               	movlb	1	; () banked
  8080  002774  2538               	addwf	___ftadd@exp1& (0+255),w,b
  8081  002776  0101               	movlb	1	; () banked
  8082  002778  6F33               	movwf	??___ftadd& (0+255),b
  8083  00277A  0E18               	movlw	24
  8084  00277C  0101               	movlb	1	; () banked
  8085  00277E  6533               	cpfsgt	??___ftadd& (0+255),b
  8086  002780  D007               	goto	l7025
  8087  002782                     l865:
  8088                           
  8089                           ; BSR set to: 1
  8090  002782  C12D  F12D         	movff	___ftadd@f1,?___ftadd
  8091  002786  C12E  F12E         	movff	___ftadd@f1+1,?___ftadd+1
  8092  00278A  C12F  F12F         	movff	___ftadd@f1+2,?___ftadd+2
  8093  00278E  0012               	return	
  8094  002790                     l7025:
  8095                           
  8096                           ; BSR set to: 1
  8097  002790  0E06               	movlw	6
  8098  002792  0101               	movlb	1	; () banked
  8099  002794  6F36               	movwf	___ftadd@sign& (0+255),b
  8100                           
  8101                           ; BSR set to: 1
  8102  002796  0101               	movlb	1	; () banked
  8103  002798  AF2F               	btfss	(___ftadd@f1+2)& (0+255),7,b
  8104  00279A  D002               	goto	l7031
  8105                           
  8106                           ; BSR set to: 1
  8107  00279C  0101               	movlb	1	; () banked
  8108  00279E  8F36               	bsf	___ftadd@sign& (0+255),7,b
  8109  0027A0                     l7031:
  8110                           
  8111                           ; BSR set to: 1
  8112  0027A0  0101               	movlb	1	; () banked
  8113  0027A2  AF32               	btfss	(___ftadd@f2+2)& (0+255),7,b
  8114  0027A4  D002               	goto	l867
  8115                           
  8116                           ; BSR set to: 1
  8117  0027A6  0101               	movlb	1	; () banked
  8118  0027A8  8D36               	bsf	___ftadd@sign& (0+255),6,b
  8119  0027AA                     l867:
  8120                           
  8121                           ; BSR set to: 1
  8122  0027AA  0101               	movlb	1	; () banked
  8123  0027AC  8F2E               	bsf	(___ftadd@f1+1)& (0+255),7,b
  8124                           
  8125                           ; BSR set to: 1
  8126  0027AE  0EFF               	movlw	255
  8127  0027B0  0101               	movlb	1	; () banked
  8128  0027B2  172D               	andwf	___ftadd@f1& (0+255),f,b
  8129  0027B4  0EFF               	movlw	255
  8130  0027B6  0101               	movlb	1	; () banked
  8131  0027B8  172E               	andwf	(___ftadd@f1+1)& (0+255),f,b
  8132  0027BA  0E00               	movlw	0
  8133  0027BC  0101               	movlb	1	; () banked
  8134  0027BE  172F               	andwf	(___ftadd@f1+2)& (0+255),f,b
  8135  0027C0  0101               	movlb	1	; () banked
  8136  0027C2  8F31               	bsf	(___ftadd@f2+1)& (0+255),7,b
  8137                           
  8138                           ; BSR set to: 1
  8139  0027C4  0EFF               	movlw	255
  8140  0027C6  0101               	movlb	1	; () banked
  8141  0027C8  1730               	andwf	___ftadd@f2& (0+255),f,b
  8142  0027CA  0EFF               	movlw	255
  8143  0027CC  0101               	movlb	1	; () banked
  8144  0027CE  1731               	andwf	(___ftadd@f2+1)& (0+255),f,b
  8145  0027D0  0E00               	movlw	0
  8146  0027D2  0101               	movlb	1	; () banked
  8147  0027D4  1732               	andwf	(___ftadd@f2+2)& (0+255),f,b
  8148                           
  8149                           ; BSR set to: 1
  8150  0027D6  0101               	movlb	1	; () banked
  8151  0027D8  5137               	movf	___ftadd@exp2& (0+255),w,b
  8152  0027DA  0101               	movlb	1	; () banked
  8153  0027DC  5D38               	subwf	___ftadd@exp1& (0+255),w,b
  8154  0027DE  B0D8               	btfsc	status,0,c
  8155  0027E0  D025               	goto	l7051
  8156  0027E2                     l7041:
  8157                           
  8158                           ; BSR set to: 1
  8159  0027E2  0101               	movlb	1	; () banked
  8160  0027E4  90D8               	bcf	status,0,c
  8161  0027E6  3730               	rlcf	___ftadd@f2& (0+255),f,b
  8162  0027E8  3731               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  8163  0027EA  3732               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  8164  0027EC  0101               	movlb	1	; () banked
  8165  0027EE  0737               	decf	___ftadd@exp2& (0+255),f,b
  8166                           
  8167                           ; BSR set to: 1
  8168  0027F0  0101               	movlb	1	; () banked
  8169  0027F2  5138               	movf	___ftadd@exp1& (0+255),w,b
  8170  0027F4  0101               	movlb	1	; () banked
  8171  0027F6  1937               	xorwf	___ftadd@exp2& (0+255),w,b
  8172  0027F8  B4D8               	btfsc	status,2,c
  8173  0027FA  D011               	goto	l7049
  8174                           
  8175                           ; BSR set to: 1
  8176  0027FC  0101               	movlb	1	; () banked
  8177  0027FE  0736               	decf	___ftadd@sign& (0+255),f,b
  8178  002800  C136  F133         	movff	___ftadd@sign,??___ftadd
  8179  002804  0E07               	movlw	7
  8180  002806  0101               	movlb	1	; () banked
  8181  002808  1733               	andwf	??___ftadd& (0+255),f,b
  8182  00280A  B4D8               	btfsc	status,2,c
  8183  00280C  D008               	goto	l7049
  8184  00280E  D7E9               	goto	l7041
  8185  002810                     l7047:
  8186                           
  8187                           ; BSR set to: 1
  8188  002810  0101               	movlb	1	; () banked
  8189  002812  90D8               	bcf	status,0,c
  8190  002814  332F               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  8191  002816  332E               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  8192  002818  332D               	rrcf	___ftadd@f1& (0+255),f,b
  8193  00281A  0101               	movlb	1	; () banked
  8194  00281C  2B38               	incf	___ftadd@exp1& (0+255),f,b
  8195  00281E                     l7049:
  8196                           
  8197                           ; BSR set to: 1
  8198  00281E  0101               	movlb	1	; () banked
  8199  002820  5137               	movf	___ftadd@exp2& (0+255),w,b
  8200  002822  0101               	movlb	1	; () banked
  8201  002824  1938               	xorwf	___ftadd@exp1& (0+255),w,b
  8202  002826  B4D8               	btfsc	status,2,c
  8203  002828  D02B               	goto	l876
  8204  00282A  D7F2               	goto	l7047
  8205  00282C                     l7051:
  8206                           
  8207                           ; BSR set to: 1
  8208  00282C  0101               	movlb	1	; () banked
  8209  00282E  5138               	movf	___ftadd@exp1& (0+255),w,b
  8210  002830  0101               	movlb	1	; () banked
  8211  002832  5D37               	subwf	___ftadd@exp2& (0+255),w,b
  8212  002834  B0D8               	btfsc	status,0,c
  8213  002836  D024               	goto	l876
  8214  002838                     l7053:
  8215                           
  8216                           ; BSR set to: 1
  8217  002838  0101               	movlb	1	; () banked
  8218  00283A  90D8               	bcf	status,0,c
  8219  00283C  372D               	rlcf	___ftadd@f1& (0+255),f,b
  8220  00283E  372E               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  8221  002840  372F               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  8222  002842  0101               	movlb	1	; () banked
  8223  002844  0738               	decf	___ftadd@exp1& (0+255),f,b
  8224                           
  8225                           ; BSR set to: 1
  8226  002846  0101               	movlb	1	; () banked
  8227  002848  5138               	movf	___ftadd@exp1& (0+255),w,b
  8228  00284A  0101               	movlb	1	; () banked
  8229  00284C  1937               	xorwf	___ftadd@exp2& (0+255),w,b
  8230  00284E  B4D8               	btfsc	status,2,c
  8231  002850  D011               	goto	l7061
  8232                           
  8233                           ; BSR set to: 1
  8234  002852  0101               	movlb	1	; () banked
  8235  002854  0736               	decf	___ftadd@sign& (0+255),f,b
  8236  002856  C136  F133         	movff	___ftadd@sign,??___ftadd
  8237  00285A  0E07               	movlw	7
  8238  00285C  0101               	movlb	1	; () banked
  8239  00285E  1733               	andwf	??___ftadd& (0+255),f,b
  8240  002860  B4D8               	btfsc	status,2,c
  8241  002862  D008               	goto	l7061
  8242  002864  D7E9               	goto	l7053
  8243  002866                     l7059:
  8244                           
  8245                           ; BSR set to: 1
  8246  002866  0101               	movlb	1	; () banked
  8247  002868  90D8               	bcf	status,0,c
  8248  00286A  3332               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  8249  00286C  3331               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  8250  00286E  3330               	rrcf	___ftadd@f2& (0+255),f,b
  8251  002870  0101               	movlb	1	; () banked
  8252  002872  2B37               	incf	___ftadd@exp2& (0+255),f,b
  8253  002874                     l7061:
  8254                           
  8255                           ; BSR set to: 1
  8256  002874  0101               	movlb	1	; () banked
  8257  002876  5137               	movf	___ftadd@exp2& (0+255),w,b
  8258  002878  0101               	movlb	1	; () banked
  8259  00287A  1938               	xorwf	___ftadd@exp1& (0+255),w,b
  8260  00287C  A4D8               	btfss	status,2,c
  8261  00287E  D7F3               	goto	l7059
  8262  002880                     l876:
  8263                           
  8264                           ; BSR set to: 1
  8265  002880  0101               	movlb	1	; () banked
  8266  002882  AF36               	btfss	___ftadd@sign& (0+255),7,b
  8267  002884  D012               	goto	l885
  8268                           
  8269                           ; BSR set to: 1
  8270  002886  0EFF               	movlw	255
  8271  002888  0101               	movlb	1	; () banked
  8272  00288A  1B2D               	xorwf	___ftadd@f1& (0+255),f,b
  8273  00288C  0EFF               	movlw	255
  8274  00288E  0101               	movlb	1	; () banked
  8275  002890  1B2E               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  8276  002892  0EFF               	movlw	255
  8277  002894  0101               	movlb	1	; () banked
  8278  002896  1B2F               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  8279  002898  0E01               	movlw	1
  8280  00289A  0101               	movlb	1	; () banked
  8281  00289C  272D               	addwf	___ftadd@f1& (0+255),f,b
  8282  00289E  0E00               	movlw	0
  8283  0028A0  0101               	movlb	1	; () banked
  8284  0028A2  232E               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  8285  0028A4  0E00               	movlw	0
  8286  0028A6  0101               	movlb	1	; () banked
  8287  0028A8  232F               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  8288  0028AA                     l885:
  8289                           
  8290                           ; BSR set to: 1
  8291  0028AA  0101               	movlb	1	; () banked
  8292  0028AC  AD36               	btfss	___ftadd@sign& (0+255),6,b
  8293  0028AE  D012               	goto	l7067
  8294                           
  8295                           ; BSR set to: 1
  8296  0028B0  0EFF               	movlw	255
  8297  0028B2  0101               	movlb	1	; () banked
  8298  0028B4  1B30               	xorwf	___ftadd@f2& (0+255),f,b
  8299  0028B6  0EFF               	movlw	255
  8300  0028B8  0101               	movlb	1	; () banked
  8301  0028BA  1B31               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8302  0028BC  0EFF               	movlw	255
  8303  0028BE  0101               	movlb	1	; () banked
  8304  0028C0  1B32               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8305  0028C2  0E01               	movlw	1
  8306  0028C4  0101               	movlb	1	; () banked
  8307  0028C6  2730               	addwf	___ftadd@f2& (0+255),f,b
  8308  0028C8  0E00               	movlw	0
  8309  0028CA  0101               	movlb	1	; () banked
  8310  0028CC  2331               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8311  0028CE  0E00               	movlw	0
  8312  0028D0  0101               	movlb	1	; () banked
  8313  0028D2  2332               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8314  0028D4                     l7067:
  8315                           
  8316                           ; BSR set to: 1
  8317  0028D4  0E00               	movlw	0
  8318  0028D6  0101               	movlb	1	; () banked
  8319  0028D8  6F36               	movwf	___ftadd@sign& (0+255),b
  8320                           
  8321                           ; BSR set to: 1
  8322  0028DA  0101               	movlb	1	; () banked
  8323  0028DC  512D               	movf	___ftadd@f1& (0+255),w,b
  8324  0028DE  0101               	movlb	1	; () banked
  8325  0028E0  2730               	addwf	___ftadd@f2& (0+255),f,b
  8326  0028E2  0101               	movlb	1	; () banked
  8327  0028E4  512E               	movf	(___ftadd@f1+1)& (0+255),w,b
  8328  0028E6  0101               	movlb	1	; () banked
  8329  0028E8  2331               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8330  0028EA  0101               	movlb	1	; () banked
  8331  0028EC  512F               	movf	(___ftadd@f1+2)& (0+255),w,b
  8332  0028EE  0101               	movlb	1	; () banked
  8333  0028F0  2332               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8334                           
  8335                           ; BSR set to: 1
  8336  0028F2  0101               	movlb	1	; () banked
  8337  0028F4  AF32               	btfss	(___ftadd@f2+2)& (0+255),7,b
  8338  0028F6  D015               	goto	l7077
  8339                           
  8340                           ; BSR set to: 1
  8341  0028F8  0EFF               	movlw	255
  8342  0028FA  0101               	movlb	1	; () banked
  8343  0028FC  1B30               	xorwf	___ftadd@f2& (0+255),f,b
  8344  0028FE  0EFF               	movlw	255
  8345  002900  0101               	movlb	1	; () banked
  8346  002902  1B31               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8347  002904  0EFF               	movlw	255
  8348  002906  0101               	movlb	1	; () banked
  8349  002908  1B32               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8350  00290A  0E01               	movlw	1
  8351  00290C  0101               	movlb	1	; () banked
  8352  00290E  2730               	addwf	___ftadd@f2& (0+255),f,b
  8353  002910  0E00               	movlw	0
  8354  002912  0101               	movlb	1	; () banked
  8355  002914  2331               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8356  002916  0E00               	movlw	0
  8357  002918  0101               	movlb	1	; () banked
  8358  00291A  2332               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8359                           
  8360                           ; BSR set to: 1
  8361  00291C  0E01               	movlw	1
  8362  00291E  0101               	movlb	1	; () banked
  8363  002920  6F36               	movwf	___ftadd@sign& (0+255),b
  8364  002922                     l7077:
  8365                           
  8366                           ; BSR set to: 1
  8367  002922  C130  F100         	movff	___ftadd@f2,___ftpack@arg
  8368  002926  C131  F101         	movff	___ftadd@f2+1,___ftpack@arg+1
  8369  00292A  C132  F102         	movff	___ftadd@f2+2,___ftpack@arg+2
  8370  00292E  C138  F103         	movff	___ftadd@exp1,___ftpack@exp
  8371  002932  C136  F104         	movff	___ftadd@sign,___ftpack@sign
  8372  002936  EC92  F01D         	call	___ftpack	;wreg free
  8373  00293A  C100  F12D         	movff	?___ftpack,?___ftadd
  8374  00293E  C101  F12E         	movff	?___ftpack+1,?___ftadd+1
  8375  002942  C102  F12F         	movff	?___ftpack+2,?___ftadd+2
  8376  002946  0012               	return	
  8377  002948                     __end_of___ftadd:
  8378                           	opt stack 0
  8379                           tblptru	equ	0xFF8
  8380                           tblptrh	equ	0xFF7
  8381                           tblptrl	equ	0xFF6
  8382                           tablat	equ	0xFF5
  8383                           prodh	equ	0xFF4
  8384                           prodl	equ	0xFF3
  8385                           intcon	equ	0xFF2
  8386                           intcon3	equ	0xFF0
  8387                           postinc0	equ	0xFEE
  8388                           wreg	equ	0xFE8
  8389                           indf2	equ	0xFDF
  8390                           postinc2	equ	0xFDE
  8391                           postdec2	equ	0xFDD
  8392                           fsr2h	equ	0xFDA
  8393                           fsr2l	equ	0xFD9
  8394                           status	equ	0xFD8
  8395                           
  8396 ;; *************** function ___ftpack *****************
  8397 ;; Defined at:
  8398 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  8399 ;; Parameters:    Size  Location     Type
  8400 ;;  arg             3    0[BANK1 ] unsigned um
  8401 ;;  exp             1    3[BANK1 ] unsigned char 
  8402 ;;  sign            1    4[BANK1 ] unsigned char 
  8403 ;; Auto vars:     Size  Location     Type
  8404 ;;		None
  8405 ;; Return value:  Size  Location     Type
  8406 ;;                  3    0[BANK1 ] float 
  8407 ;; Registers used:
  8408 ;;		wreg, status,2, status,0
  8409 ;; Tracked objects:
  8410 ;;		On entry : 0/0
  8411 ;;		On exit  : 0/0
  8412 ;;		Unchanged: 0/0
  8413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8414 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8416 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8417 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8418 ;;Total ram usage:        8 bytes
  8419 ;; Hardware stack levels used:    1
  8420 ;; Hardware stack levels required when called:    8
  8421 ;; This function calls:
  8422 ;;		Nothing
  8423 ;; This function is called by:
  8424 ;;		___ftadd
  8425 ;;		___ftmul
  8426 ;;		___lltoft
  8427 ;; This function uses a non-reentrant model
  8428 ;;
  8429                           
  8430                           	psect	text18
  8431  003B24                     __ptext18:
  8432                           	opt stack 0
  8433  003B24                     ___ftpack:
  8434                           	opt stack 18
  8435                           
  8436                           ;incstack = 0
  8437  003B24  0101               	movlb	1	; () banked
  8438  003B26  5103               	movf	___ftpack@exp& (0+255),w,b
  8439  003B28  0101               	movlb	1	; () banked
  8440  003B2A  B4D8               	btfsc	status,2,c
  8441  003B2C  D008               	goto	l6951
  8442                           
  8443                           ; BSR set to: 1
  8444  003B2E  0101               	movlb	1	; () banked
  8445  003B30  5100               	movf	___ftpack@arg& (0+255),w,b
  8446  003B32  0101               	movlb	1	; () banked
  8447  003B34  1101               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  8448  003B36  0101               	movlb	1	; () banked
  8449  003B38  1102               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  8450  003B3A  A4D8               	btfss	status,2,c
  8451  003B3C  D011               	goto	l6957
  8452  003B3E                     l6951:
  8453                           
  8454                           ; BSR set to: 1
  8455  003B3E  0E00               	movlw	0
  8456  003B40  0101               	movlb	1	; () banked
  8457  003B42  6F00               	movwf	?___ftpack& (0+255),b
  8458  003B44  0E00               	movlw	0
  8459  003B46  0101               	movlb	1	; () banked
  8460  003B48  6F01               	movwf	(?___ftpack+1)& (0+255),b
  8461  003B4A  0E00               	movlw	0
  8462  003B4C  0101               	movlb	1	; () banked
  8463  003B4E  6F02               	movwf	(?___ftpack+2)& (0+255),b
  8464                           
  8465                           ; BSR set to: 1
  8466  003B50  0012               	return	
  8467  003B52                     l6955:
  8468                           
  8469                           ; BSR set to: 1
  8470  003B52  0101               	movlb	1	; () banked
  8471  003B54  2B03               	incf	___ftpack@exp& (0+255),f,b
  8472  003B56  0101               	movlb	1	; () banked
  8473  003B58  90D8               	bcf	status,0,c
  8474  003B5A  3302               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  8475  003B5C  3301               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  8476  003B5E  3300               	rrcf	___ftpack@arg& (0+255),f,b
  8477  003B60                     l6957:
  8478                           
  8479                           ; BSR set to: 1
  8480  003B60  0E00               	movlw	0
  8481  003B62  0101               	movlb	1	; () banked
  8482  003B64  1500               	andwf	___ftpack@arg& (0+255),w,b
  8483  003B66  0101               	movlb	1	; () banked
  8484  003B68  6F05               	movwf	??___ftpack& (0+255),b
  8485  003B6A  0E00               	movlw	0
  8486  003B6C  0101               	movlb	1	; () banked
  8487  003B6E  1501               	andwf	(___ftpack@arg+1)& (0+255),w,b
  8488  003B70  0101               	movlb	1	; () banked
  8489  003B72  6F06               	movwf	(??___ftpack+1)& (0+255),b
  8490  003B74  0EFE               	movlw	254
  8491  003B76  0101               	movlb	1	; () banked
  8492  003B78  1502               	andwf	(___ftpack@arg+2)& (0+255),w,b
  8493  003B7A  0101               	movlb	1	; () banked
  8494  003B7C  6F07               	movwf	(??___ftpack+2)& (0+255),b
  8495  003B7E  0101               	movlb	1	; () banked
  8496  003B80  5105               	movf	??___ftpack& (0+255),w,b
  8497  003B82  0101               	movlb	1	; () banked
  8498  003B84  1106               	iorwf	(??___ftpack+1)& (0+255),w,b
  8499  003B86  0101               	movlb	1	; () banked
  8500  003B88  1107               	iorwf	(??___ftpack+2)& (0+255),w,b
  8501  003B8A  B4D8               	btfsc	status,2,c
  8502  003B8C  D011               	goto	l6963
  8503  003B8E  D7E1               	goto	l6955
  8504  003B90                     l6959:
  8505                           
  8506                           ; BSR set to: 1
  8507  003B90  0101               	movlb	1	; () banked
  8508  003B92  2B03               	incf	___ftpack@exp& (0+255),f,b
  8509                           
  8510                           ; BSR set to: 1
  8511  003B94  0E01               	movlw	1
  8512  003B96  0101               	movlb	1	; () banked
  8513  003B98  2700               	addwf	___ftpack@arg& (0+255),f,b
  8514  003B9A  0E00               	movlw	0
  8515  003B9C  0101               	movlb	1	; () banked
  8516  003B9E  2301               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  8517  003BA0  0E00               	movlw	0
  8518  003BA2  0101               	movlb	1	; () banked
  8519  003BA4  2302               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  8520  003BA6  0101               	movlb	1	; () banked
  8521  003BA8  90D8               	bcf	status,0,c
  8522  003BAA  3302               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  8523  003BAC  3301               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  8524  003BAE  3300               	rrcf	___ftpack@arg& (0+255),f,b
  8525  003BB0                     l6963:
  8526                           
  8527                           ; BSR set to: 1
  8528  003BB0  0E00               	movlw	0
  8529  003BB2  0101               	movlb	1	; () banked
  8530  003BB4  1500               	andwf	___ftpack@arg& (0+255),w,b
  8531  003BB6  0101               	movlb	1	; () banked
  8532  003BB8  6F05               	movwf	??___ftpack& (0+255),b
  8533  003BBA  0E00               	movlw	0
  8534  003BBC  0101               	movlb	1	; () banked
  8535  003BBE  1501               	andwf	(___ftpack@arg+1)& (0+255),w,b
  8536  003BC0  0101               	movlb	1	; () banked
  8537  003BC2  6F06               	movwf	(??___ftpack+1)& (0+255),b
  8538  003BC4  0EFF               	movlw	255
  8539  003BC6  0101               	movlb	1	; () banked
  8540  003BC8  1502               	andwf	(___ftpack@arg+2)& (0+255),w,b
  8541  003BCA  0101               	movlb	1	; () banked
  8542  003BCC  6F07               	movwf	(??___ftpack+2)& (0+255),b
  8543  003BCE  0101               	movlb	1	; () banked
  8544  003BD0  5105               	movf	??___ftpack& (0+255),w,b
  8545  003BD2  0101               	movlb	1	; () banked
  8546  003BD4  1106               	iorwf	(??___ftpack+1)& (0+255),w,b
  8547  003BD6  0101               	movlb	1	; () banked
  8548  003BD8  1107               	iorwf	(??___ftpack+2)& (0+255),w,b
  8549  003BDA  B4D8               	btfsc	status,2,c
  8550  003BDC  D008               	goto	l6967
  8551  003BDE  D7D8               	goto	l6959
  8552  003BE0                     l6965:
  8553                           
  8554                           ; BSR set to: 1
  8555  003BE0  0101               	movlb	1	; () banked
  8556  003BE2  0703               	decf	___ftpack@exp& (0+255),f,b
  8557  003BE4  0101               	movlb	1	; () banked
  8558  003BE6  90D8               	bcf	status,0,c
  8559  003BE8  3700               	rlcf	___ftpack@arg& (0+255),f,b
  8560  003BEA  3701               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  8561  003BEC  3702               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  8562  003BEE                     l6967:
  8563                           
  8564                           ; BSR set to: 1
  8565  003BEE  0101               	movlb	1	; () banked
  8566  003BF0  BF01               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  8567  003BF2  D004               	goto	l838
  8568                           
  8569                           ; BSR set to: 1
  8570  003BF4  0E02               	movlw	2
  8571  003BF6  0101               	movlb	1	; () banked
  8572  003BF8  6103               	cpfslt	___ftpack@exp& (0+255),b
  8573  003BFA  D7F2               	goto	l6965
  8574  003BFC                     l838:
  8575                           
  8576                           ; BSR set to: 1
  8577  003BFC  0101               	movlb	1	; () banked
  8578  003BFE  B103               	btfsc	___ftpack@exp& (0+255),0,b
  8579  003C00  D002               	goto	l6973
  8580                           
  8581                           ; BSR set to: 1
  8582  003C02  0101               	movlb	1	; () banked
  8583  003C04  9F01               	bcf	(___ftpack@arg+1)& (0+255),7,b
  8584  003C06                     l6973:
  8585                           
  8586                           ; BSR set to: 1
  8587  003C06  0101               	movlb	1	; () banked
  8588  003C08  90D8               	bcf	status,0,c
  8589  003C0A  3303               	rrcf	___ftpack@exp& (0+255),f,b
  8590  003C0C  0101               	movlb	1	; () banked
  8591  003C0E  5103               	movf	___ftpack@exp& (0+255),w,b
  8592  003C10  0101               	movlb	1	; () banked
  8593  003C12  1302               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  8594                           
  8595                           ; BSR set to: 1
  8596  003C14  0101               	movlb	1	; () banked
  8597  003C16  5104               	movf	___ftpack@sign& (0+255),w,b
  8598  003C18  0101               	movlb	1	; () banked
  8599  003C1A  B4D8               	btfsc	status,2,c
  8600  003C1C  D002               	goto	l6979
  8601                           
  8602                           ; BSR set to: 1
  8603  003C1E  0101               	movlb	1	; () banked
  8604  003C20  8F02               	bsf	(___ftpack@arg+2)& (0+255),7,b
  8605  003C22                     l6979:
  8606                           
  8607                           ; BSR set to: 1
  8608  003C22  C100  F100         	movff	___ftpack@arg,?___ftpack
  8609  003C26  C101  F101         	movff	___ftpack@arg+1,?___ftpack+1
  8610  003C2A  C102  F102         	movff	___ftpack@arg+2,?___ftpack+2
  8611  003C2E  0012               	return	
  8612  003C30                     __end_of___ftpack:
  8613                           	opt stack 0
  8614                           tblptru	equ	0xFF8
  8615                           tblptrh	equ	0xFF7
  8616                           tblptrl	equ	0xFF6
  8617                           tablat	equ	0xFF5
  8618                           prodh	equ	0xFF4
  8619                           prodl	equ	0xFF3
  8620                           intcon	equ	0xFF2
  8621                           intcon3	equ	0xFF0
  8622                           postinc0	equ	0xFEE
  8623                           wreg	equ	0xFE8
  8624                           indf2	equ	0xFDF
  8625                           postinc2	equ	0xFDE
  8626                           postdec2	equ	0xFDD
  8627                           fsr2h	equ	0xFDA
  8628                           fsr2l	equ	0xFD9
  8629                           status	equ	0xFD8
  8630                           
  8631 ;; *************** function ___ftneg *****************
  8632 ;; Defined at:
  8633 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftneg.c"
  8634 ;; Parameters:    Size  Location     Type
  8635 ;;  f1              3    0[BANK1 ] float 
  8636 ;; Auto vars:     Size  Location     Type
  8637 ;;		None
  8638 ;; Return value:  Size  Location     Type
  8639 ;;                  3    0[BANK1 ] float 
  8640 ;; Registers used:
  8641 ;;		wreg, status,2, status,0
  8642 ;; Tracked objects:
  8643 ;;		On entry : 0/0
  8644 ;;		On exit  : 0/0
  8645 ;;		Unchanged: 0/0
  8646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8647 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8650 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8651 ;;Total ram usage:        3 bytes
  8652 ;; Hardware stack levels used:    1
  8653 ;; Hardware stack levels required when called:    8
  8654 ;; This function calls:
  8655 ;;		Nothing
  8656 ;; This function is called by:
  8657 ;;		_printf
  8658 ;; This function uses a non-reentrant model
  8659 ;;
  8660                           
  8661                           	psect	text19
  8662  00505E                     __ptext19:
  8663                           	opt stack 0
  8664  00505E                     ___ftneg:
  8665                           	opt stack 20
  8666                           
  8667                           ; BSR set to: 1
  8668                           ;incstack = 0
  8669  00505E  0101               	movlb	1	; () banked
  8670  005060  5100               	movf	___ftneg@f1& (0+255),w,b
  8671  005062  0101               	movlb	1	; () banked
  8672  005064  1101               	iorwf	(___ftneg@f1+1)& (0+255),w,b
  8673  005066  0101               	movlb	1	; () banked
  8674  005068  1102               	iorwf	(___ftneg@f1+2)& (0+255),w,b
  8675  00506A  B4D8               	btfsc	status,2,c
  8676  00506C  D009               	goto	l935
  8677                           
  8678                           ; BSR set to: 1
  8679  00506E  0E00               	movlw	0
  8680  005070  0101               	movlb	1	; () banked
  8681  005072  1B00               	xorwf	___ftneg@f1& (0+255),f,b
  8682  005074  0E00               	movlw	0
  8683  005076  0101               	movlb	1	; () banked
  8684  005078  1B01               	xorwf	(___ftneg@f1+1)& (0+255),f,b
  8685  00507A  0E80               	movlw	128
  8686  00507C  0101               	movlb	1	; () banked
  8687  00507E  1B02               	xorwf	(___ftneg@f1+2)& (0+255),f,b
  8688  005080                     l935:
  8689                           
  8690                           ; BSR set to: 1
  8691  005080  C100  F100         	movff	___ftneg@f1,?___ftneg
  8692  005084  C101  F101         	movff	___ftneg@f1+1,?___ftneg+1
  8693  005088  C102  F102         	movff	___ftneg@f1+2,?___ftneg+2
  8694                           
  8695                           ; BSR set to: 1
  8696  00508C  0012               	return		;funcret
  8697  00508E                     __end_of___ftneg:
  8698                           	opt stack 0
  8699                           tblptru	equ	0xFF8
  8700                           tblptrh	equ	0xFF7
  8701                           tblptrl	equ	0xFF6
  8702                           tablat	equ	0xFF5
  8703                           prodh	equ	0xFF4
  8704                           prodl	equ	0xFF3
  8705                           intcon	equ	0xFF2
  8706                           intcon3	equ	0xFF0
  8707                           postinc0	equ	0xFEE
  8708                           wreg	equ	0xFE8
  8709                           indf2	equ	0xFDF
  8710                           postinc2	equ	0xFDE
  8711                           postdec2	equ	0xFDD
  8712                           fsr2h	equ	0xFDA
  8713                           fsr2l	equ	0xFD9
  8714                           status	equ	0xFD8
  8715                           
  8716 ;; *************** function ___ftge *****************
  8717 ;; Defined at:
  8718 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
  8719 ;; Parameters:    Size  Location     Type
  8720 ;;  ff1             3    0[BANK1 ] float 
  8721 ;;  ff2             3    3[BANK1 ] float 
  8722 ;; Auto vars:     Size  Location     Type
  8723 ;;		None
  8724 ;; Return value:  Size  Location     Type
  8725 ;;		None               void
  8726 ;; Registers used:
  8727 ;;		wreg, status,2, status,0
  8728 ;; Tracked objects:
  8729 ;;		On entry : 0/0
  8730 ;;		On exit  : 0/0
  8731 ;;		Unchanged: 0/0
  8732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8733 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8735 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8736 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8737 ;;Total ram usage:        9 bytes
  8738 ;; Hardware stack levels used:    1
  8739 ;; Hardware stack levels required when called:    8
  8740 ;; This function calls:
  8741 ;;		Nothing
  8742 ;; This function is called by:
  8743 ;;		_printf
  8744 ;; This function uses a non-reentrant model
  8745 ;;
  8746                           
  8747                           	psect	text20
  8748  0040E8                     __ptext20:
  8749                           	opt stack 0
  8750  0040E8                     ___ftge:
  8751                           	opt stack 20
  8752                           
  8753                           ; BSR set to: 1
  8754                           ;incstack = 0
  8755  0040E8  0101               	movlb	1	; () banked
  8756  0040EA  AF02               	btfss	(___ftge@ff1+2)& (0+255),7,b
  8757  0040EC  D01D               	goto	l7457
  8758                           
  8759                           ; BSR set to: 1
  8760  0040EE  C100  F106         	movff	___ftge@ff1,??___ftge
  8761  0040F2  C101  F107         	movff	___ftge@ff1+1,??___ftge+1
  8762  0040F6  C102  F108         	movff	___ftge@ff1+2,??___ftge+2
  8763  0040FA  0101               	movlb	1	; () banked
  8764  0040FC  1F06               	comf	??___ftge& (0+255),f,b
  8765  0040FE  1F07               	comf	(??___ftge+1)& (0+255),f,b
  8766  004100  1F08               	comf	(??___ftge+2)& (0+255),f,b
  8767  004102  2B06               	incf	??___ftge& (0+255),f,b
  8768  004104  0E00               	movlw	0
  8769  004106  2307               	addwfc	(??___ftge+1)& (0+255),f,b
  8770  004108  2308               	addwfc	(??___ftge+2)& (0+255),f,b
  8771  00410A  0E00               	movlw	0
  8772  00410C  0101               	movlb	1	; () banked
  8773  00410E  2506               	addwf	??___ftge& (0+255),w,b
  8774  004110  0101               	movlb	1	; () banked
  8775  004112  6F00               	movwf	___ftge@ff1& (0+255),b
  8776  004114  0E00               	movlw	0
  8777  004116  0101               	movlb	1	; () banked
  8778  004118  2107               	addwfc	(??___ftge+1)& (0+255),w,b
  8779  00411A  0101               	movlb	1	; () banked
  8780  00411C  6F01               	movwf	(___ftge@ff1+1)& (0+255),b
  8781  00411E  0E80               	movlw	128
  8782  004120  0101               	movlb	1	; () banked
  8783  004122  2108               	addwfc	(??___ftge+2)& (0+255),w,b
  8784  004124  0101               	movlb	1	; () banked
  8785  004126  6F02               	movwf	(___ftge@ff1+2)& (0+255),b
  8786  004128                     l7457:
  8787                           
  8788                           ; BSR set to: 1
  8789  004128  0101               	movlb	1	; () banked
  8790  00412A  AF05               	btfss	(___ftge@ff2+2)& (0+255),7,b
  8791  00412C  D01D               	goto	l7461
  8792                           
  8793                           ; BSR set to: 1
  8794  00412E  C103  F106         	movff	___ftge@ff2,??___ftge
  8795  004132  C104  F107         	movff	___ftge@ff2+1,??___ftge+1
  8796  004136  C105  F108         	movff	___ftge@ff2+2,??___ftge+2
  8797  00413A  0101               	movlb	1	; () banked
  8798  00413C  1F06               	comf	??___ftge& (0+255),f,b
  8799  00413E  1F07               	comf	(??___ftge+1)& (0+255),f,b
  8800  004140  1F08               	comf	(??___ftge+2)& (0+255),f,b
  8801  004142  2B06               	incf	??___ftge& (0+255),f,b
  8802  004144  0E00               	movlw	0
  8803  004146  2307               	addwfc	(??___ftge+1)& (0+255),f,b
  8804  004148  2308               	addwfc	(??___ftge+2)& (0+255),f,b
  8805  00414A  0E00               	movlw	0
  8806  00414C  0101               	movlb	1	; () banked
  8807  00414E  2506               	addwf	??___ftge& (0+255),w,b
  8808  004150  0101               	movlb	1	; () banked
  8809  004152  6F03               	movwf	___ftge@ff2& (0+255),b
  8810  004154  0E00               	movlw	0
  8811  004156  0101               	movlb	1	; () banked
  8812  004158  2107               	addwfc	(??___ftge+1)& (0+255),w,b
  8813  00415A  0101               	movlb	1	; () banked
  8814  00415C  6F04               	movwf	(___ftge@ff2+1)& (0+255),b
  8815  00415E  0E80               	movlw	128
  8816  004160  0101               	movlb	1	; () banked
  8817  004162  2108               	addwfc	(??___ftge+2)& (0+255),w,b
  8818  004164  0101               	movlb	1	; () banked
  8819  004166  6F05               	movwf	(___ftge@ff2+2)& (0+255),b
  8820  004168                     l7461:
  8821                           
  8822                           ; BSR set to: 1
  8823  004168  0E00               	movlw	0
  8824  00416A  0101               	movlb	1	; () banked
  8825  00416C  1B00               	xorwf	___ftge@ff1& (0+255),f,b
  8826  00416E  0E00               	movlw	0
  8827  004170  0101               	movlb	1	; () banked
  8828  004172  1B01               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  8829  004174  0E80               	movlw	128
  8830  004176  0101               	movlb	1	; () banked
  8831  004178  1B02               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  8832                           
  8833                           ; BSR set to: 1
  8834  00417A  0E00               	movlw	0
  8835  00417C  0101               	movlb	1	; () banked
  8836  00417E  1B03               	xorwf	___ftge@ff2& (0+255),f,b
  8837  004180  0E00               	movlw	0
  8838  004182  0101               	movlb	1	; () banked
  8839  004184  1B04               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  8840  004186  0E80               	movlw	128
  8841  004188  0101               	movlb	1	; () banked
  8842  00418A  1B05               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  8843  00418C  0101               	movlb	1	; () banked
  8844  00418E  5103               	movf	___ftge@ff2& (0+255),w,b
  8845  004190  0101               	movlb	1	; () banked
  8846  004192  5D00               	subwf	___ftge@ff1& (0+255),w,b
  8847  004194  0101               	movlb	1	; () banked
  8848  004196  5104               	movf	(___ftge@ff2+1)& (0+255),w,b
  8849  004198  0101               	movlb	1	; () banked
  8850  00419A  5901               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  8851  00419C  0101               	movlb	1	; () banked
  8852  00419E  5105               	movf	(___ftge@ff2+2)& (0+255),w,b
  8853  0041A0  0101               	movlb	1	; () banked
  8854  0041A2  5902               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  8855  0041A4  B0D8               	btfsc	status,0,c
  8856  0041A6  D002               	goto	l7467
  8857                           
  8858                           ; BSR set to: 1
  8859  0041A8  90D8               	bcf	status,0,c
  8860  0041AA  0012               	return	
  8861  0041AC                     l7467:
  8862                           
  8863                           ; BSR set to: 1
  8864  0041AC  80D8               	bsf	status,0,c
  8865                           
  8866                           ; BSR set to: 1
  8867  0041AE  0012               	return	
  8868  0041B0                     __end_of___ftge:
  8869                           	opt stack 0
  8870                           tblptru	equ	0xFF8
  8871                           tblptrh	equ	0xFF7
  8872                           tblptrl	equ	0xFF6
  8873                           tablat	equ	0xFF5
  8874                           prodh	equ	0xFF4
  8875                           prodl	equ	0xFF3
  8876                           intcon	equ	0xFF2
  8877                           intcon3	equ	0xFF0
  8878                           postinc0	equ	0xFEE
  8879                           wreg	equ	0xFE8
  8880                           indf2	equ	0xFDF
  8881                           postinc2	equ	0xFDE
  8882                           postdec2	equ	0xFDD
  8883                           fsr2h	equ	0xFDA
  8884                           fsr2l	equ	0xFD9
  8885                           status	equ	0xFD8
  8886                           
  8887 ;; *************** function _getTime *****************
  8888 ;; Defined at:
  8889 ;;		line 77 in file "modules.c"
  8890 ;; Parameters:    Size  Location     Type
  8891 ;;  time            2    3[BANK1 ] PTR unsigned char 
  8892 ;;		 -> time(7), 
  8893 ;; Auto vars:     Size  Location     Type
  8894 ;;  i               1    5[BANK1 ] unsigned char 
  8895 ;; Return value:  Size  Location     Type
  8896 ;;                  1    wreg      void 
  8897 ;; Registers used:
  8898 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8899 ;; Tracked objects:
  8900 ;;		On entry : 0/0
  8901 ;;		On exit  : 0/0
  8902 ;;		Unchanged: 0/0
  8903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8904 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8905 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8907 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8908 ;;Total ram usage:        3 bytes
  8909 ;; Hardware stack levels used:    1
  8910 ;; Hardware stack levels required when called:   10
  8911 ;; This function calls:
  8912 ;;		_I2C_Master_Read
  8913 ;;		_I2C_Master_Start
  8914 ;;		_I2C_Master_Stop
  8915 ;;		_I2C_Master_Write
  8916 ;; This function is called by:
  8917 ;;		_showRTC
  8918 ;; This function uses a non-reentrant model
  8919 ;;
  8920                           
  8921                           	psect	text21
  8922  0047EC                     __ptext21:
  8923                           	opt stack 0
  8924  0047EC                     _getTime:
  8925                           	opt stack 19
  8926                           
  8927                           ;modules.c: 78: (INTCONbits.GIE = 0);
  8928                           
  8929                           ; BSR set to: 1
  8930                           ;incstack = 0
  8931  0047EC  9EF2               	bcf	intcon,7,c	;volatile
  8932                           
  8933                           ;modules.c: 82: I2C_Master_Start();
  8934  0047EE  ECA0  F029         	call	_I2C_Master_Start	;wreg free
  8935                           
  8936                           ;modules.c: 83: I2C_Master_Write(0b11010000);
  8937  0047F2  0E00               	movlw	0
  8938  0047F4  0101               	movlb	1	; () banked
  8939  0047F6  6F02               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8940  0047F8  0ED0               	movlw	208
  8941  0047FA  6F01               	movwf	I2C_Master_Write@d& (0+255),b
  8942  0047FC  EC92  F029         	call	_I2C_Master_Write	;wreg free
  8943                           
  8944                           ;modules.c: 84: I2C_Master_Write(0x00);
  8945  004800  0E00               	movlw	0
  8946  004802  0101               	movlb	1	; () banked
  8947  004804  6F02               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8948  004806  0E00               	movlw	0
  8949  004808  6F01               	movwf	I2C_Master_Write@d& (0+255),b
  8950  00480A  EC92  F029         	call	_I2C_Master_Write	;wreg free
  8951                           
  8952                           ;modules.c: 85: I2C_Master_Stop();
  8953  00480E  EC9C  F029         	call	_I2C_Master_Stop	;wreg free
  8954                           
  8955                           ;modules.c: 88: I2C_Master_Start();
  8956  004812  ECA0  F029         	call	_I2C_Master_Start	;wreg free
  8957                           
  8958                           ;modules.c: 89: I2C_Master_Write(0b11010001);
  8959  004816  0E00               	movlw	0
  8960  004818  0101               	movlb	1	; () banked
  8961  00481A  6F02               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8962  00481C  0ED1               	movlw	209
  8963  00481E  6F01               	movwf	I2C_Master_Write@d& (0+255),b
  8964  004820  EC92  F029         	call	_I2C_Master_Write	;wreg free
  8965                           
  8966                           ;modules.c: 90: for (unsigned char i = 0; i < 0x06; i++) {
  8967  004824  0E00               	movlw	0
  8968  004826  0101               	movlb	1	; () banked
  8969  004828  6F05               	movwf	getTime@i& (0+255),b
  8970  00482A                     l7871:
  8971                           
  8972                           ; BSR set to: 1
  8973  00482A  0E05               	movlw	5
  8974  00482C  0101               	movlb	1	; () banked
  8975  00482E  6505               	cpfsgt	getTime@i& (0+255),b
  8976  004830  D001               	goto	l7875
  8977  004832  D012               	goto	l7881
  8978  004834                     l7875:
  8979                           
  8980                           ; BSR set to: 1
  8981                           ;modules.c: 91: time[i] = I2C_Master_Read(1);
  8982  004834  0101               	movlb	1	; () banked
  8983  004836  5105               	movf	getTime@i& (0+255),w,b
  8984  004838  0D01               	mullw	1
  8985  00483A  50F3               	movf	prodl,w,c
  8986  00483C  0101               	movlb	1	; () banked
  8987  00483E  2503               	addwf	getTime@time& (0+255),w,b
  8988  004840  6ED9               	movwf	fsr2l,c
  8989  004842  50F4               	movf	prodh,w,c
  8990  004844  0101               	movlb	1	; () banked
  8991  004846  2104               	addwfc	(getTime@time+1)& (0+255),w,b
  8992  004848  6EDA               	movwf	fsr2h,c
  8993  00484A  0E01               	movlw	1
  8994  00484C  EC5F  F028         	call	_I2C_Master_Read
  8995  004850  6EDF               	movwf	indf2,c
  8996  004852  0101               	movlb	1	; () banked
  8997  004854  2B05               	incf	getTime@i& (0+255),f,b
  8998  004856  D7E9               	goto	l7871
  8999  004858                     l7881:
  9000                           
  9001                           ; BSR set to: 1
  9002                           ;modules.c: 92: }
  9003                           ;modules.c: 93: time[6] = I2C_Master_Read(0);
  9004  004858  0101               	movlb	1	; () banked
  9005  00485A  EE20 F006          	lfsr	2,6
  9006  00485E  5103               	movf	getTime@time& (0+255),w,b
  9007  004860  26D9               	addwf	fsr2l,f,c
  9008  004862  5104               	movf	(getTime@time+1)& (0+255),w,b
  9009  004864  22DA               	addwfc	fsr2h,f,c
  9010  004866  0E00               	movlw	0
  9011  004868  EC5F  F028         	call	_I2C_Master_Read
  9012  00486C  6EDF               	movwf	indf2,c
  9013                           
  9014                           ;modules.c: 94: I2C_Master_Stop();
  9015  00486E  EC9C  F029         	call	_I2C_Master_Stop	;wreg free
  9016                           
  9017                           ;modules.c: 95: (INTCONbits.GIE = 1);
  9018  004872  8EF2               	bsf	intcon,7,c	;volatile
  9019  004874  0012               	return		;funcret
  9020  004876                     __end_of_getTime:
  9021                           	opt stack 0
  9022                           tblptru	equ	0xFF8
  9023                           tblptrh	equ	0xFF7
  9024                           tblptrl	equ	0xFF6
  9025                           tablat	equ	0xFF5
  9026                           prodh	equ	0xFF4
  9027                           prodl	equ	0xFF3
  9028                           intcon	equ	0xFF2
  9029                           intcon3	equ	0xFF0
  9030                           postinc0	equ	0xFEE
  9031                           wreg	equ	0xFE8
  9032                           indf2	equ	0xFDF
  9033                           postinc2	equ	0xFDE
  9034                           postdec2	equ	0xFDD
  9035                           fsr2h	equ	0xFDA
  9036                           fsr2l	equ	0xFD9
  9037                           status	equ	0xFD8
  9038                           
  9039 ;; *************** function _I2C_Master_Write *****************
  9040 ;; Defined at:
  9041 ;;		line 42 in file "I2C.c"
  9042 ;; Parameters:    Size  Location     Type
  9043 ;;  d               2    1[BANK1 ] unsigned int 
  9044 ;; Auto vars:     Size  Location     Type
  9045 ;;		None
  9046 ;; Return value:  Size  Location     Type
  9047 ;;                  1    wreg      void 
  9048 ;; Registers used:
  9049 ;;		wreg, status,2, status,0, cstack
  9050 ;; Tracked objects:
  9051 ;;		On entry : 0/0
  9052 ;;		On exit  : 0/0
  9053 ;;		Unchanged: 0/0
  9054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9055 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9058 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9059 ;;Total ram usage:        2 bytes
  9060 ;; Hardware stack levels used:    1
  9061 ;; Hardware stack levels required when called:    9
  9062 ;; This function calls:
  9063 ;;		_I2C_Master_Wait
  9064 ;; This function is called by:
  9065 ;;		_getTime
  9066 ;; This function uses a non-reentrant model
  9067 ;;
  9068                           
  9069                           	psect	text22
  9070  005324                     __ptext22:
  9071                           	opt stack 0
  9072  005324                     _I2C_Master_Write:
  9073                           	opt stack 19
  9074                           
  9075                           ;I2C.c: 43: I2C_Master_Wait();
  9076                           
  9077                           ;incstack = 0
  9078  005324  EC63  F029         	call	_I2C_Master_Wait	;wreg free
  9079                           
  9080                           ;I2C.c: 44: SSPBUF = d;
  9081  005328  C101  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  9082  00532C  0012               	return		;funcret
  9083  00532E                     __end_of_I2C_Master_Write:
  9084                           	opt stack 0
  9085                           tblptru	equ	0xFF8
  9086                           tblptrh	equ	0xFF7
  9087                           tblptrl	equ	0xFF6
  9088                           tablat	equ	0xFF5
  9089                           prodh	equ	0xFF4
  9090                           prodl	equ	0xFF3
  9091                           intcon	equ	0xFF2
  9092                           intcon3	equ	0xFF0
  9093                           postinc0	equ	0xFEE
  9094                           wreg	equ	0xFE8
  9095                           indf2	equ	0xFDF
  9096                           postinc2	equ	0xFDE
  9097                           postdec2	equ	0xFDD
  9098                           fsr2h	equ	0xFDA
  9099                           fsr2l	equ	0xFD9
  9100                           status	equ	0xFD8
  9101                           
  9102 ;; *************** function _I2C_Master_Stop *****************
  9103 ;; Defined at:
  9104 ;;		line 37 in file "I2C.c"
  9105 ;; Parameters:    Size  Location     Type
  9106 ;;		None
  9107 ;; Auto vars:     Size  Location     Type
  9108 ;;		None
  9109 ;; Return value:  Size  Location     Type
  9110 ;;                  1    wreg      void 
  9111 ;; Registers used:
  9112 ;;		wreg, status,2, status,0, cstack
  9113 ;; Tracked objects:
  9114 ;;		On entry : 0/0
  9115 ;;		On exit  : 0/0
  9116 ;;		Unchanged: 0/0
  9117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9119 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9121 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9122 ;;Total ram usage:        0 bytes
  9123 ;; Hardware stack levels used:    1
  9124 ;; Hardware stack levels required when called:    9
  9125 ;; This function calls:
  9126 ;;		_I2C_Master_Wait
  9127 ;; This function is called by:
  9128 ;;		_getTime
  9129 ;; This function uses a non-reentrant model
  9130 ;;
  9131                           
  9132                           	psect	text23
  9133  005338                     __ptext23:
  9134                           	opt stack 0
  9135  005338                     _I2C_Master_Stop:
  9136                           	opt stack 19
  9137                           
  9138                           ;I2C.c: 38: I2C_Master_Wait();
  9139                           
  9140                           ;incstack = 0
  9141  005338  EC63  F029         	call	_I2C_Master_Wait	;wreg free
  9142                           
  9143                           ;I2C.c: 39: PEN = 1;
  9144  00533C  84C5               	bsf	4037,2,c	;volatile
  9145  00533E  0012               	return		;funcret
  9146  005340                     __end_of_I2C_Master_Stop:
  9147                           	opt stack 0
  9148                           tblptru	equ	0xFF8
  9149                           tblptrh	equ	0xFF7
  9150                           tblptrl	equ	0xFF6
  9151                           tablat	equ	0xFF5
  9152                           prodh	equ	0xFF4
  9153                           prodl	equ	0xFF3
  9154                           intcon	equ	0xFF2
  9155                           intcon3	equ	0xFF0
  9156                           postinc0	equ	0xFEE
  9157                           wreg	equ	0xFE8
  9158                           indf2	equ	0xFDF
  9159                           postinc2	equ	0xFDE
  9160                           postdec2	equ	0xFDD
  9161                           fsr2h	equ	0xFDA
  9162                           fsr2l	equ	0xFD9
  9163                           status	equ	0xFD8
  9164                           
  9165 ;; *************** function _I2C_Master_Start *****************
  9166 ;; Defined at:
  9167 ;;		line 27 in file "I2C.c"
  9168 ;; Parameters:    Size  Location     Type
  9169 ;;		None
  9170 ;; Auto vars:     Size  Location     Type
  9171 ;;		None
  9172 ;; Return value:  Size  Location     Type
  9173 ;;                  1    wreg      void 
  9174 ;; Registers used:
  9175 ;;		wreg, status,2, status,0, cstack
  9176 ;; Tracked objects:
  9177 ;;		On entry : 0/0
  9178 ;;		On exit  : 0/0
  9179 ;;		Unchanged: 0/0
  9180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9184 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9185 ;;Total ram usage:        0 bytes
  9186 ;; Hardware stack levels used:    1
  9187 ;; Hardware stack levels required when called:    9
  9188 ;; This function calls:
  9189 ;;		_I2C_Master_Wait
  9190 ;; This function is called by:
  9191 ;;		_getTime
  9192 ;; This function uses a non-reentrant model
  9193 ;;
  9194                           
  9195                           	psect	text24
  9196  005340                     __ptext24:
  9197                           	opt stack 0
  9198  005340                     _I2C_Master_Start:
  9199                           	opt stack 19
  9200                           
  9201                           ;I2C.c: 28: I2C_Master_Wait();
  9202                           
  9203                           ;incstack = 0
  9204  005340  EC63  F029         	call	_I2C_Master_Wait	;wreg free
  9205                           
  9206                           ;I2C.c: 29: SEN = 1;
  9207  005344  80C5               	bsf	4037,0,c	;volatile
  9208  005346  0012               	return		;funcret
  9209  005348                     __end_of_I2C_Master_Start:
  9210                           	opt stack 0
  9211                           tblptru	equ	0xFF8
  9212                           tblptrh	equ	0xFF7
  9213                           tblptrl	equ	0xFF6
  9214                           tablat	equ	0xFF5
  9215                           prodh	equ	0xFF4
  9216                           prodl	equ	0xFF3
  9217                           intcon	equ	0xFF2
  9218                           intcon3	equ	0xFF0
  9219                           postinc0	equ	0xFEE
  9220                           wreg	equ	0xFE8
  9221                           indf2	equ	0xFDF
  9222                           postinc2	equ	0xFDE
  9223                           postdec2	equ	0xFDD
  9224                           fsr2h	equ	0xFDA
  9225                           fsr2l	equ	0xFD9
  9226                           status	equ	0xFD8
  9227                           
  9228 ;; *************** function _I2C_Master_Read *****************
  9229 ;; Defined at:
  9230 ;;		line 47 in file "I2C.c"
  9231 ;; Parameters:    Size  Location     Type
  9232 ;;  a               1    wreg     unsigned char 
  9233 ;; Auto vars:     Size  Location     Type
  9234 ;;  a               1    1[BANK1 ] unsigned char 
  9235 ;;  temp            1    2[BANK1 ] unsigned char 
  9236 ;; Return value:  Size  Location     Type
  9237 ;;                  1    wreg      unsigned char 
  9238 ;; Registers used:
  9239 ;;		wreg, status,2, status,0, cstack
  9240 ;; Tracked objects:
  9241 ;;		On entry : 0/0
  9242 ;;		On exit  : 0/0
  9243 ;;		Unchanged: 0/0
  9244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9246 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9248 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9249 ;;Total ram usage:        2 bytes
  9250 ;; Hardware stack levels used:    1
  9251 ;; Hardware stack levels required when called:    9
  9252 ;; This function calls:
  9253 ;;		_I2C_Master_Wait
  9254 ;; This function is called by:
  9255 ;;		_getTime
  9256 ;; This function uses a non-reentrant model
  9257 ;;
  9258                           
  9259                           	psect	text25
  9260  0050BE                     __ptext25:
  9261                           	opt stack 0
  9262  0050BE                     _I2C_Master_Read:
  9263                           	opt stack 19
  9264                           
  9265                           ;incstack = 0
  9266                           ;I2C_Master_Read@a stored from wreg
  9267  0050BE  0101               	movlb	1	; () banked
  9268  0050C0  6F01               	movwf	I2C_Master_Read@a& (0+255),b
  9269                           
  9270                           ;I2C.c: 48: unsigned char temp;
  9271                           ;I2C.c: 49: I2C_Master_Wait();
  9272  0050C2  EC63  F029         	call	_I2C_Master_Wait	;wreg free
  9273                           
  9274                           ;I2C.c: 50: RCEN = 1;
  9275  0050C6  86C5               	bsf	4037,3,c	;volatile
  9276                           
  9277                           ;I2C.c: 51: I2C_Master_Wait();
  9278  0050C8  EC63  F029         	call	_I2C_Master_Wait	;wreg free
  9279                           
  9280                           ;I2C.c: 52: temp = SSPBUF;
  9281  0050CC  CFC9 F102          	movff	4041,I2C_Master_Read@temp	;volatile
  9282                           
  9283                           ;I2C.c: 53: I2C_Master_Wait();
  9284  0050D0  EC63  F029         	call	_I2C_Master_Wait	;wreg free
  9285                           
  9286                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
  9287  0050D4  0101               	movlb	1	; () banked
  9288  0050D6  5101               	movf	I2C_Master_Read@a& (0+255),w,b
  9289  0050D8  0101               	movlb	1	; () banked
  9290  0050DA  A4D8               	btfss	status,2,c
  9291  0050DC  D002               	goto	u7600
  9292  0050DE  8AC5               	bsf	4037,5,c	;volatile
  9293  0050E0  D001               	goto	l7237
  9294  0050E2                     u7600:
  9295  0050E2  9AC5               	bcf	4037,5,c	;volatile
  9296  0050E4                     l7237:
  9297                           
  9298                           ;I2C.c: 55: ACKEN = 1;
  9299  0050E4  88C5               	bsf	4037,4,c	;volatile
  9300                           
  9301                           ;I2C.c: 56: return temp;
  9302  0050E6  0101               	movlb	1	; () banked
  9303  0050E8  5102               	movf	I2C_Master_Read@temp& (0+255),w,b
  9304  0050EA  0012               	return	
  9305  0050EC                     __end_of_I2C_Master_Read:
  9306                           	opt stack 0
  9307                           tblptru	equ	0xFF8
  9308                           tblptrh	equ	0xFF7
  9309                           tblptrl	equ	0xFF6
  9310                           tablat	equ	0xFF5
  9311                           prodh	equ	0xFF4
  9312                           prodl	equ	0xFF3
  9313                           intcon	equ	0xFF2
  9314                           intcon3	equ	0xFF0
  9315                           postinc0	equ	0xFEE
  9316                           wreg	equ	0xFE8
  9317                           indf2	equ	0xFDF
  9318                           postinc2	equ	0xFDE
  9319                           postdec2	equ	0xFDD
  9320                           fsr2h	equ	0xFDA
  9321                           fsr2l	equ	0xFD9
  9322                           status	equ	0xFD8
  9323                           
  9324 ;; *************** function _I2C_Master_Wait *****************
  9325 ;; Defined at:
  9326 ;;		line 23 in file "I2C.c"
  9327 ;; Parameters:    Size  Location     Type
  9328 ;;		None
  9329 ;; Auto vars:     Size  Location     Type
  9330 ;;		None
  9331 ;; Return value:  Size  Location     Type
  9332 ;;                  1    wreg      void 
  9333 ;; Registers used:
  9334 ;;		wreg, status,2, status,0
  9335 ;; Tracked objects:
  9336 ;;		On entry : 0/0
  9337 ;;		On exit  : 0/0
  9338 ;;		Unchanged: 0/0
  9339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9342 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9343 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9344 ;;Total ram usage:        1 bytes
  9345 ;; Hardware stack levels used:    1
  9346 ;; Hardware stack levels required when called:    8
  9347 ;; This function calls:
  9348 ;;		Nothing
  9349 ;; This function is called by:
  9350 ;;		_I2C_Master_Start
  9351 ;;		_I2C_Master_Stop
  9352 ;;		_I2C_Master_Write
  9353 ;;		_I2C_Master_Read
  9354 ;; This function uses a non-reentrant model
  9355 ;;
  9356                           
  9357                           	psect	text26
  9358  0052C6                     __ptext26:
  9359                           	opt stack 0
  9360  0052C6                     _I2C_Master_Wait:
  9361                           	opt stack 19
  9362  0052C6                     l369:
  9363  0052C6  B4C7               	btfsc	4039,2,c	;volatile
  9364  0052C8  D7FE               	goto	l369
  9365  0052CA  CFC5 F100          	movff	4037,??_I2C_Master_Wait	;volatile
  9366  0052CE  0E1F               	movlw	31
  9367  0052D0  0101               	movlb	1	; () banked
  9368  0052D2  1700               	andwf	??_I2C_Master_Wait& (0+255),f,b
  9369  0052D4  B4D8               	btfsc	status,2,c
  9370  0052D6  0012               	return	
  9371  0052D8  D7F6               	goto	l369
  9372  0052DA                     __end_of_I2C_Master_Wait:
  9373                           	opt stack 0
  9374                           tblptru	equ	0xFF8
  9375                           tblptrh	equ	0xFF7
  9376                           tblptrl	equ	0xFF6
  9377                           tablat	equ	0xFF5
  9378                           prodh	equ	0xFF4
  9379                           prodl	equ	0xFF3
  9380                           intcon	equ	0xFF2
  9381                           intcon3	equ	0xFF0
  9382                           postinc0	equ	0xFEE
  9383                           wreg	equ	0xFE8
  9384                           indf2	equ	0xFDF
  9385                           postinc2	equ	0xFDE
  9386                           postdec2	equ	0xFDD
  9387                           fsr2h	equ	0xFDA
  9388                           fsr2l	equ	0xFD9
  9389                           status	equ	0xFD8
  9390                           
  9391 ;; *************** function ___lcd_newline *****************
  9392 ;; Defined at:
  9393 ;;		line 53 in file "lcd.c"
  9394 ;; Parameters:    Size  Location     Type
  9395 ;;		None
  9396 ;; Auto vars:     Size  Location     Type
  9397 ;;		None
  9398 ;; Return value:  Size  Location     Type
  9399 ;;                  1    wreg      void 
  9400 ;; Registers used:
  9401 ;;		wreg, status,2, status,0, cstack
  9402 ;; Tracked objects:
  9403 ;;		On entry : 0/0
  9404 ;;		On exit  : 0/0
  9405 ;;		Unchanged: 0/0
  9406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9410 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9411 ;;Total ram usage:        0 bytes
  9412 ;; Hardware stack levels used:    1
  9413 ;; Hardware stack levels required when called:   10
  9414 ;; This function calls:
  9415 ;;		_lcdInst
  9416 ;; This function is called by:
  9417 ;;		_showRTC
  9418 ;; This function uses a non-reentrant model
  9419 ;;
  9420                           
  9421                           	psect	text27
  9422  005348                     __ptext27:
  9423                           	opt stack 0
  9424  005348                     ___lcd_newline:
  9425                           	opt stack 19
  9426                           
  9427                           ;lcd.c: 54: lcdInst(0b11000000);
  9428                           
  9429                           ; BSR set to: 1
  9430                           ;incstack = 0
  9431  005348  0EC0               	movlw	192
  9432  00534A  EC7E  F029         	call	_lcdInst
  9433  00534E  0012               	return		;funcret
  9434  005350                     __end_of___lcd_newline:
  9435                           	opt stack 0
  9436                           tblptru	equ	0xFF8
  9437                           tblptrh	equ	0xFF7
  9438                           tblptrl	equ	0xFF6
  9439                           tablat	equ	0xFF5
  9440                           prodh	equ	0xFF4
  9441                           prodl	equ	0xFF3
  9442                           intcon	equ	0xFF2
  9443                           intcon3	equ	0xFF0
  9444                           postinc0	equ	0xFEE
  9445                           wreg	equ	0xFE8
  9446                           indf2	equ	0xFDF
  9447                           postinc2	equ	0xFDE
  9448                           postdec2	equ	0xFDD
  9449                           fsr2h	equ	0xFDA
  9450                           fsr2l	equ	0xFD9
  9451                           status	equ	0xFD8
  9452                           
  9453 ;; *************** function _initialize *****************
  9454 ;; Defined at:
  9455 ;;		line 18 in file "main.c"
  9456 ;; Parameters:    Size  Location     Type
  9457 ;;		None
  9458 ;; Auto vars:     Size  Location     Type
  9459 ;;		None
  9460 ;; Return value:  Size  Location     Type
  9461 ;;                  1    wreg      void 
  9462 ;; Registers used:
  9463 ;;		wreg, status,2, status,0, cstack
  9464 ;; Tracked objects:
  9465 ;;		On entry : 0/0
  9466 ;;		On exit  : 0/0
  9467 ;;		Unchanged: 0/0
  9468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9471 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9472 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9473 ;;Total ram usage:        2 bytes
  9474 ;; Hardware stack levels used:    1
  9475 ;; Hardware stack levels required when called:   11
  9476 ;; This function calls:
  9477 ;;		_I2C_Master_Init
  9478 ;;		_initLCD
  9479 ;;		_initLatest
  9480 ;;		_lcdInst
  9481 ;; This function is called by:
  9482 ;;		_main
  9483 ;; This function uses a non-reentrant model
  9484 ;;
  9485                           
  9486                           	psect	text28
  9487  004B04                     __ptext28:
  9488                           	opt stack 0
  9489  004B04                     _initialize:
  9490                           	opt stack 19
  9491                           
  9492                           ;main.c: 19: TRISA = 0xFF;
  9493                           
  9494                           ;incstack = 0
  9495  004B04  6892               	setf	3986,c	;volatile
  9496                           
  9497                           ;main.c: 20: TRISB = 0xFF;
  9498  004B06  6893               	setf	3987,c	;volatile
  9499                           
  9500                           ;main.c: 21: TRISC = 0x00;
  9501  004B08  0E00               	movlw	0
  9502  004B0A  6E94               	movwf	3988,c	;volatile
  9503                           
  9504                           ;main.c: 22: TRISD = 0x00;
  9505  004B0C  0E00               	movlw	0
  9506  004B0E  6E95               	movwf	3989,c	;volatile
  9507                           
  9508                           ;main.c: 23: TRISE = 0x00;
  9509  004B10  0E00               	movlw	0
  9510  004B12  6E96               	movwf	3990,c	;volatile
  9511                           
  9512                           ;main.c: 25: LATA = 0x00;
  9513  004B14  0E00               	movlw	0
  9514  004B16  6E89               	movwf	3977,c	;volatile
  9515                           
  9516                           ;main.c: 26: LATB = 0x00;
  9517  004B18  0E00               	movlw	0
  9518  004B1A  6E8A               	movwf	3978,c	;volatile
  9519                           
  9520                           ;main.c: 27: LATC = 0x00;
  9521  004B1C  0E00               	movlw	0
  9522  004B1E  6E8B               	movwf	3979,c	;volatile
  9523                           
  9524                           ;main.c: 28: LATD = 0x00;
  9525  004B20  0E00               	movlw	0
  9526  004B22  6E8C               	movwf	3980,c	;volatile
  9527                           
  9528                           ;main.c: 29: LATE = 0x00;
  9529  004B24  0E00               	movlw	0
  9530  004B26  6E8D               	movwf	3981,c	;volatile
  9531                           
  9532                           ;main.c: 32: ADCON0 = 0x00;
  9533  004B28  0E00               	movlw	0
  9534  004B2A  6EC2               	movwf	4034,c	;volatile
  9535                           
  9536                           ;main.c: 33: ADCON1 = 0x0C;
  9537  004B2C  0E0C               	movlw	12
  9538  004B2E  6EC1               	movwf	4033,c	;volatile
  9539                           
  9540                           ;main.c: 34: CVRCON = 0x00;
  9541  004B30  0E00               	movlw	0
  9542  004B32  6EB5               	movwf	4021,c	;volatile
  9543                           
  9544                           ;main.c: 35: ADFM = 1;
  9545  004B34  8EC0               	bsf	4032,7,c	;volatile
  9546                           
  9547                           ;main.c: 37: initLCD();
  9548  004B36  EC93  F027         	call	_initLCD	;wreg free
  9549                           
  9550                           ;main.c: 38: lcdInst(0x01);;
  9551  004B3A  0E01               	movlw	1
  9552  004B3C  EC7E  F029         	call	_lcdInst
  9553                           
  9554                           ;main.c: 39: lcdInst(0b10000000);;
  9555  004B40  0E80               	movlw	128
  9556  004B42  EC7E  F029         	call	_lcdInst
  9557                           
  9558                           ;main.c: 40: I2C_Master_Init(10000);
  9559  004B46  0E10               	movlw	16
  9560  004B48  0101               	movlb	1	; () banked
  9561  004B4A  6F0D               	movwf	I2C_Master_Init@c& (0+255),b
  9562  004B4C  0E27               	movlw	39
  9563  004B4E  6F0E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  9564  004B50  0E00               	movlw	0
  9565  004B52  6F0F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  9566  004B54  0E00               	movlw	0
  9567  004B56  6F10               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  9568  004B58  EC98  F026         	call	_I2C_Master_Init	;wreg free
  9569                           
  9570                           ;main.c: 41: initLatest();
  9571  004B5C  EC02  F029         	call	_initLatest	;wreg free
  9572                           
  9573                           ;main.c: 42: _delay((unsigned long)((200)*(8000000/4000.0)));
  9574  004B60  0E03               	movlw	3
  9575  004B62  0101               	movlb	1	; () banked
  9576  004B64  6F16               	movwf	(??_initialize+1)& (0+255),b
  9577  004B66  0E08               	movlw	8
  9578  004B68  0101               	movlb	1	; () banked
  9579  004B6A  6F15               	movwf	??_initialize& (0+255),b
  9580  004B6C  0E77               	movlw	119
  9581  004B6E                     u8617:
  9582  004B6E  2EE8               	decfsz	wreg,f,c
  9583  004B70  D7FE               	bra	u8617
  9584  004B72  2F15               	decfsz	??_initialize& (0+255),f,b
  9585  004B74  D7FC               	bra	u8617
  9586  004B76  2F16               	decfsz	(??_initialize+1)& (0+255),f,b
  9587  004B78  D7FA               	bra	u8617
  9588  004B7A  0012               	return		;funcret
  9589  004B7C                     __end_of_initialize:
  9590                           	opt stack 0
  9591                           tblptru	equ	0xFF8
  9592                           tblptrh	equ	0xFF7
  9593                           tblptrl	equ	0xFF6
  9594                           tablat	equ	0xFF5
  9595                           prodh	equ	0xFF4
  9596                           prodl	equ	0xFF3
  9597                           intcon	equ	0xFF2
  9598                           intcon3	equ	0xFF0
  9599                           postinc0	equ	0xFEE
  9600                           wreg	equ	0xFE8
  9601                           indf2	equ	0xFDF
  9602                           postinc2	equ	0xFDE
  9603                           postdec2	equ	0xFDD
  9604                           fsr2h	equ	0xFDA
  9605                           fsr2l	equ	0xFD9
  9606                           status	equ	0xFD8
  9607                           
  9608 ;; *************** function _initLatest *****************
  9609 ;; Defined at:
  9610 ;;		line 9 in file "eeprom.c"
  9611 ;; Parameters:    Size  Location     Type
  9612 ;;		None
  9613 ;; Auto vars:     Size  Location     Type
  9614 ;;		None
  9615 ;; Return value:  Size  Location     Type
  9616 ;;                  1    wreg      void 
  9617 ;; Registers used:
  9618 ;;		wreg, status,2, status,0, cstack
  9619 ;; Tracked objects:
  9620 ;;		On entry : 0/0
  9621 ;;		On exit  : 0/0
  9622 ;;		Unchanged: 0/0
  9623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9627 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9628 ;;Total ram usage:        0 bytes
  9629 ;; Hardware stack levels used:    1
  9630 ;; Hardware stack levels required when called:    9
  9631 ;; This function calls:
  9632 ;;		_ReadEE
  9633 ;; This function is called by:
  9634 ;;		_initialize
  9635 ;; This function uses a non-reentrant model
  9636 ;;
  9637                           
  9638                           	psect	text29
  9639  005204                     __ptext29:
  9640                           	opt stack 0
  9641  005204                     _initLatest:
  9642                           	opt stack 20
  9643                           
  9644                           ;eeprom.c: 10: Latest = ReadEE(160);
  9645                           
  9646                           ;incstack = 0
  9647  005204  0E00               	movlw	0
  9648  005206  0101               	movlb	1	; () banked
  9649  005208  6F01               	movwf	(ReadEE@address+1)& (0+255),b
  9650  00520A  0EA0               	movlw	160
  9651  00520C  6F00               	movwf	ReadEE@address& (0+255),b
  9652  00520E  EC4C  F029         	call	_ReadEE	;wreg free
  9653  005212  0100               	movlb	0	; () banked
  9654  005214  6FD8               	movwf	_Latest& (0+255),b
  9655                           
  9656                           ; BSR set to: 0
  9657                           ;eeprom.c: 11: if (Latest > 3) {
  9658  005216  0E03               	movlw	3
  9659  005218  0100               	movlb	0	; () banked
  9660  00521A  65D8               	cpfsgt	_Latest& (0+255),b
  9661  00521C  0012               	return	
  9662                           
  9663                           ; BSR set to: 0
  9664                           ;eeprom.c: 12: Latest = 0;
  9665  00521E  0E00               	movlw	0
  9666  005220  0100               	movlb	0	; () banked
  9667  005222  6FD8               	movwf	_Latest& (0+255),b
  9668  005224  0012               	return	
  9669  005226                     __end_of_initLatest:
  9670                           	opt stack 0
  9671                           tblptru	equ	0xFF8
  9672                           tblptrh	equ	0xFF7
  9673                           tblptrl	equ	0xFF6
  9674                           tablat	equ	0xFF5
  9675                           prodh	equ	0xFF4
  9676                           prodl	equ	0xFF3
  9677                           intcon	equ	0xFF2
  9678                           intcon3	equ	0xFF0
  9679                           postinc0	equ	0xFEE
  9680                           wreg	equ	0xFE8
  9681                           indf2	equ	0xFDF
  9682                           postinc2	equ	0xFDE
  9683                           postdec2	equ	0xFDD
  9684                           fsr2h	equ	0xFDA
  9685                           fsr2l	equ	0xFD9
  9686                           status	equ	0xFD8
  9687                           
  9688 ;; *************** function _ReadEE *****************
  9689 ;; Defined at:
  9690 ;;		line 16 in file "eeprom.c"
  9691 ;; Parameters:    Size  Location     Type
  9692 ;;  address         2    0[BANK1 ] unsigned int 
  9693 ;; Auto vars:     Size  Location     Type
  9694 ;;		None
  9695 ;; Return value:  Size  Location     Type
  9696 ;;                  1    wreg      unsigned char 
  9697 ;; Registers used:
  9698 ;;		wreg, status,2
  9699 ;; Tracked objects:
  9700 ;;		On entry : 0/0
  9701 ;;		On exit  : 0/0
  9702 ;;		Unchanged: 0/0
  9703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9704 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9707 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9708 ;;Total ram usage:        2 bytes
  9709 ;; Hardware stack levels used:    1
  9710 ;; Hardware stack levels required when called:    8
  9711 ;; This function calls:
  9712 ;;		Nothing
  9713 ;; This function is called by:
  9714 ;;		_initLatest
  9715 ;; This function uses a non-reentrant model
  9716 ;;
  9717                           
  9718                           	psect	text30
  9719  005298                     __ptext30:
  9720                           	opt stack 0
  9721  005298                     _ReadEE:
  9722                           	opt stack 20
  9723                           
  9724                           ;eeprom.c: 19: EEADRH = (unsigned char) (address >> 8);
  9725                           
  9726                           ; BSR set to: 0
  9727                           ;incstack = 0
  9728  005298  0101               	movlb	1	; () banked
  9729  00529A  5101               	movf	(ReadEE@address+1)& (0+255),w,b
  9730  00529C  6EAA               	movwf	4010,c	;volatile
  9731                           
  9732                           ; BSR set to: 1
  9733                           ;eeprom.c: 20: EEADR = (unsigned char) address;
  9734  00529E  C100  FFA9         	movff	ReadEE@address,4009	;volatile
  9735                           
  9736                           ; BSR set to: 1
  9737                           ;eeprom.c: 22: EECON1bits.EEPGD = 0;
  9738  0052A2  9EA6               	bcf	4006,7,c	;volatile
  9739                           
  9740                           ; BSR set to: 1
  9741                           ;eeprom.c: 23: EECON1bits.CFGS = 0;
  9742  0052A4  9CA6               	bcf	4006,6,c	;volatile
  9743                           
  9744                           ; BSR set to: 1
  9745                           ;eeprom.c: 24: EECON1bits.RD = 1;
  9746  0052A6  80A6               	bsf	4006,0,c	;volatile
  9747  0052A8                     l417:
  9748  0052A8  B0A6               	btfsc	4006,0,c	;volatile
  9749  0052AA  D7FE               	goto	l417
  9750                           
  9751                           ;eeprom.c: 30: return EEDATA;
  9752  0052AC  50A8               	movf	4008,w,c	;volatile
  9753  0052AE  0012               	return	
  9754  0052B0                     __end_of_ReadEE:
  9755                           	opt stack 0
  9756                           tblptru	equ	0xFF8
  9757                           tblptrh	equ	0xFF7
  9758                           tblptrl	equ	0xFF6
  9759                           tablat	equ	0xFF5
  9760                           prodh	equ	0xFF4
  9761                           prodl	equ	0xFF3
  9762                           intcon	equ	0xFF2
  9763                           intcon3	equ	0xFF0
  9764                           postinc0	equ	0xFEE
  9765                           wreg	equ	0xFE8
  9766                           indf2	equ	0xFDF
  9767                           postinc2	equ	0xFDE
  9768                           postdec2	equ	0xFDD
  9769                           fsr2h	equ	0xFDA
  9770                           fsr2l	equ	0xFD9
  9771                           status	equ	0xFD8
  9772                           
  9773 ;; *************** function _initLCD *****************
  9774 ;; Defined at:
  9775 ;;		line 9 in file "lcd.c"
  9776 ;; Parameters:    Size  Location     Type
  9777 ;;		None
  9778 ;; Auto vars:     Size  Location     Type
  9779 ;;		None
  9780 ;; Return value:  Size  Location     Type
  9781 ;;                  1    wreg      void 
  9782 ;; Registers used:
  9783 ;;		wreg, status,2, status,0, cstack
  9784 ;; Tracked objects:
  9785 ;;		On entry : 0/0
  9786 ;;		On exit  : 0/0
  9787 ;;		Unchanged: 0/0
  9788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9791 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9792 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9793 ;;Total ram usage:        1 bytes
  9794 ;; Hardware stack levels used:    1
  9795 ;; Hardware stack levels required when called:   10
  9796 ;; This function calls:
  9797 ;;		_lcdInst
  9798 ;; This function is called by:
  9799 ;;		_initialize
  9800 ;; This function uses a non-reentrant model
  9801 ;;
  9802                           
  9803                           	psect	text31
  9804  004F26                     __ptext31:
  9805                           	opt stack 0
  9806  004F26                     _initLCD:
  9807                           	opt stack 19
  9808                           
  9809                           ;lcd.c: 10: _delay((unsigned long)((15)*(8000000/4000.0)));
  9810                           
  9811                           ;incstack = 0
  9812  004F26  0E27               	movlw	39
  9813  004F28  0101               	movlb	1	; () banked
  9814  004F2A  6F03               	movwf	??_initLCD& (0+255),b
  9815  004F2C  0EF5               	movlw	245
  9816  004F2E                     u8627:
  9817  004F2E  2EE8               	decfsz	wreg,f,c
  9818  004F30  D7FE               	bra	u8627
  9819  004F32  2F03               	decfsz	??_initLCD& (0+255),f,b
  9820  004F34  D7FC               	bra	u8627
  9821                           
  9822                           ;lcd.c: 11: lcdInst(0b00110011);
  9823  004F36  0E33               	movlw	51
  9824  004F38  EC7E  F029         	call	_lcdInst
  9825                           
  9826                           ;lcd.c: 12: lcdInst(0b00110010);
  9827  004F3C  0E32               	movlw	50
  9828  004F3E  EC7E  F029         	call	_lcdInst
  9829                           
  9830                           ;lcd.c: 13: lcdInst(0b00101000);
  9831  004F42  0E28               	movlw	40
  9832  004F44  EC7E  F029         	call	_lcdInst
  9833                           
  9834                           ;lcd.c: 14: lcdInst(0b00001111);
  9835  004F48  0E0F               	movlw	15
  9836  004F4A  EC7E  F029         	call	_lcdInst
  9837                           
  9838                           ;lcd.c: 15: lcdInst(0b00000110);
  9839  004F4E  0E06               	movlw	6
  9840  004F50  EC7E  F029         	call	_lcdInst
  9841                           
  9842                           ;lcd.c: 16: lcdInst(0b00000001);
  9843  004F54  0E01               	movlw	1
  9844  004F56  EC7E  F029         	call	_lcdInst
  9845                           
  9846                           ;lcd.c: 17: _delay((unsigned long)((15)*(8000000/4000.0)));
  9847  004F5A  0E27               	movlw	39
  9848  004F5C  0101               	movlb	1	; () banked
  9849  004F5E  6F03               	movwf	??_initLCD& (0+255),b
  9850  004F60  0EF5               	movlw	245
  9851  004F62                     u8637:
  9852  004F62  2EE8               	decfsz	wreg,f,c
  9853  004F64  D7FE               	bra	u8637
  9854  004F66  2F03               	decfsz	??_initLCD& (0+255),f,b
  9855  004F68  D7FC               	bra	u8637
  9856  004F6A  0012               	return		;funcret
  9857  004F6C                     __end_of_initLCD:
  9858                           	opt stack 0
  9859                           tblptru	equ	0xFF8
  9860                           tblptrh	equ	0xFF7
  9861                           tblptrl	equ	0xFF6
  9862                           tablat	equ	0xFF5
  9863                           prodh	equ	0xFF4
  9864                           prodl	equ	0xFF3
  9865                           intcon	equ	0xFF2
  9866                           intcon3	equ	0xFF0
  9867                           postinc0	equ	0xFEE
  9868                           wreg	equ	0xFE8
  9869                           indf2	equ	0xFDF
  9870                           postinc2	equ	0xFDE
  9871                           postdec2	equ	0xFDD
  9872                           fsr2h	equ	0xFDA
  9873                           fsr2l	equ	0xFD9
  9874                           status	equ	0xFD8
  9875                           
  9876 ;; *************** function _lcdInst *****************
  9877 ;; Defined at:
  9878 ;;		line 20 in file "lcd.c"
  9879 ;; Parameters:    Size  Location     Type
  9880 ;;  data            1    wreg     unsigned char 
  9881 ;; Auto vars:     Size  Location     Type
  9882 ;;  data            1    2[BANK1 ] unsigned char 
  9883 ;; Return value:  Size  Location     Type
  9884 ;;                  1    wreg      void 
  9885 ;; Registers used:
  9886 ;;		wreg, status,2, status,0, cstack
  9887 ;; Tracked objects:
  9888 ;;		On entry : 0/0
  9889 ;;		On exit  : 0/0
  9890 ;;		Unchanged: 0/0
  9891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9893 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9895 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9896 ;;Total ram usage:        1 bytes
  9897 ;; Hardware stack levels used:    1
  9898 ;; Hardware stack levels required when called:    9
  9899 ;; This function calls:
  9900 ;;		_lcdNibble
  9901 ;; This function is called by:
  9902 ;;		_initialize
  9903 ;;		_showRTC
  9904 ;;		_initLCD
  9905 ;;		___lcd_newline
  9906 ;; This function uses a non-reentrant model
  9907 ;;
  9908                           
  9909                           	psect	text32
  9910  0052FC                     __ptext32:
  9911                           	opt stack 0
  9912  0052FC                     _lcdInst:
  9913                           	opt stack 20
  9914                           
  9915                           ;incstack = 0
  9916                           ;lcdInst@data stored from wreg
  9917  0052FC  0101               	movlb	1	; () banked
  9918  0052FE  6F02               	movwf	lcdInst@data& (0+255),b
  9919                           
  9920                           ;lcd.c: 21: LATDbits.LATD2 = 0;
  9921  005300  948C               	bcf	3980,2,c	;volatile
  9922                           
  9923                           ;lcd.c: 22: lcdNibble(data);
  9924  005302  0101               	movlb	1	; () banked
  9925  005304  5102               	movf	lcdInst@data& (0+255),w,b
  9926  005306  EC31  F026         	call	_lcdNibble
  9927  00530A  0012               	return		;funcret
  9928  00530C                     __end_of_lcdInst:
  9929                           	opt stack 0
  9930                           tblptru	equ	0xFF8
  9931                           tblptrh	equ	0xFF7
  9932                           tblptrl	equ	0xFF6
  9933                           tablat	equ	0xFF5
  9934                           prodh	equ	0xFF4
  9935                           prodl	equ	0xFF3
  9936                           intcon	equ	0xFF2
  9937                           intcon3	equ	0xFF0
  9938                           postinc0	equ	0xFEE
  9939                           wreg	equ	0xFE8
  9940                           indf2	equ	0xFDF
  9941                           postinc2	equ	0xFDE
  9942                           postdec2	equ	0xFDD
  9943                           fsr2h	equ	0xFDA
  9944                           fsr2l	equ	0xFD9
  9945                           status	equ	0xFD8
  9946                           
  9947 ;; *************** function _lcdNibble *****************
  9948 ;; Defined at:
  9949 ;;		line 30 in file "lcd.c"
  9950 ;; Parameters:    Size  Location     Type
  9951 ;;  data            1    wreg     unsigned char 
  9952 ;; Auto vars:     Size  Location     Type
  9953 ;;  data            1    1[BANK1 ] unsigned char 
  9954 ;;  temp            1    0[BANK1 ] unsigned char 
  9955 ;; Return value:  Size  Location     Type
  9956 ;;                  1    wreg      void 
  9957 ;; Registers used:
  9958 ;;		wreg, status,2, status,0
  9959 ;; Tracked objects:
  9960 ;;		On entry : 0/0
  9961 ;;		On exit  : 0/0
  9962 ;;		Unchanged: 0/0
  9963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9965 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9967 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9968 ;;Total ram usage:        2 bytes
  9969 ;; Hardware stack levels used:    1
  9970 ;; Hardware stack levels required when called:    8
  9971 ;; This function calls:
  9972 ;;		Nothing
  9973 ;; This function is called by:
  9974 ;;		_lcdInst
  9975 ;;		_putch
  9976 ;; This function uses a non-reentrant model
  9977 ;;
  9978                           
  9979                           	psect	text33
  9980  004C62                     __ptext33:
  9981                           	opt stack 0
  9982  004C62                     _lcdNibble:
  9983                           	opt stack 19
  9984                           
  9985                           ;incstack = 0
  9986                           ;lcdNibble@data stored from wreg
  9987  004C62  0101               	movlb	1	; () banked
  9988  004C64  6F01               	movwf	lcdNibble@data& (0+255),b
  9989                           
  9990                           ;lcd.c: 32: char temp = data & 0xF0;
  9991  004C66  0101               	movlb	1	; () banked
  9992  004C68  5101               	movf	lcdNibble@data& (0+255),w,b
  9993  004C6A  0BF0               	andlw	240
  9994  004C6C  0101               	movlb	1	; () banked
  9995  004C6E  6F00               	movwf	lcdNibble@temp& (0+255),b
  9996                           
  9997                           ;lcd.c: 33: LATD = LATD & 0x0F;
  9998  004C70  508C               	movf	3980,w,c	;volatile
  9999  004C72  0B0F               	andlw	15
 10000  004C74  6E8C               	movwf	3980,c	;volatile
 10001                           
 10002                           ;lcd.c: 34: LATD = temp | LATD;
 10003  004C76  0101               	movlb	1	; () banked
 10004  004C78  5100               	movf	lcdNibble@temp& (0+255),w,b
 10005  004C7A  108C               	iorwf	3980,w,c	;volatile
 10006  004C7C  6E8C               	movwf	3980,c	;volatile
 10007                           
 10008                           ; BSR set to: 1
 10009                           ;lcd.c: 36: LATDbits.LATD3 = 0;
 10010  004C7E  968C               	bcf	3980,3,c	;volatile
 10011                           
 10012                           ; BSR set to: 1
 10013                           ;lcd.c: 37: _delay((unsigned long)((25)*(8000000/4000000.0)));
 10014  004C80  0E10               	movlw	16
 10015  004C82                     u8647:
 10016  004C82  2EE8               	decfsz	wreg,f,c
 10017  004C84  D7FE               	bra	u8647
 10018  004C86  D000               	nop2	
 10019                           
 10020                           ;lcd.c: 38: LATDbits.LATD3 = 1;
 10021  004C88  868C               	bsf	3980,3,c	;volatile
 10022                           
 10023                           ;lcd.c: 39: _delay((unsigned long)((25)*(8000000/4000000.0)));
 10024  004C8A  0E10               	movlw	16
 10025  004C8C                     u8657:
 10026  004C8C  2EE8               	decfsz	wreg,f,c
 10027  004C8E  D7FE               	bra	u8657
 10028  004C90  D000               	nop2	
 10029                           
 10030                           ;lcd.c: 41: data = data << 4;
 10031  004C92  0101               	movlb	1	; () banked
 10032  004C94  3901               	swapf	lcdNibble@data& (0+255),w,b
 10033  004C96  0BF0               	andlw	240
 10034  004C98  0101               	movlb	1	; () banked
 10035  004C9A  6F01               	movwf	lcdNibble@data& (0+255),b
 10036                           
 10037                           ;lcd.c: 43: temp = data & 0xF0;
 10038  004C9C  0101               	movlb	1	; () banked
 10039  004C9E  5101               	movf	lcdNibble@data& (0+255),w,b
 10040  004CA0  0BF0               	andlw	240
 10041  004CA2  0101               	movlb	1	; () banked
 10042  004CA4  6F00               	movwf	lcdNibble@temp& (0+255),b
 10043                           
 10044                           ;lcd.c: 44: LATD = LATD & 0x0F;
 10045  004CA6  508C               	movf	3980,w,c	;volatile
 10046  004CA8  0B0F               	andlw	15
 10047  004CAA  6E8C               	movwf	3980,c	;volatile
 10048                           
 10049                           ;lcd.c: 45: LATD = temp | LATD;
 10050  004CAC  0101               	movlb	1	; () banked
 10051  004CAE  5100               	movf	lcdNibble@temp& (0+255),w,b
 10052  004CB0  108C               	iorwf	3980,w,c	;volatile
 10053  004CB2  6E8C               	movwf	3980,c	;volatile
 10054                           
 10055                           ; BSR set to: 1
 10056                           ;lcd.c: 47: LATDbits.LATD3 = 0;
 10057  004CB4  968C               	bcf	3980,3,c	;volatile
 10058                           
 10059                           ; BSR set to: 1
 10060                           ;lcd.c: 48: _delay((unsigned long)((25)*(8000000/4000000.0)));
 10061  004CB6  0E10               	movlw	16
 10062  004CB8                     u8667:
 10063  004CB8  2EE8               	decfsz	wreg,f,c
 10064  004CBA  D7FE               	bra	u8667
 10065  004CBC  D000               	nop2	
 10066                           
 10067                           ;lcd.c: 49: LATDbits.LATD3 = 1;
 10068  004CBE  868C               	bsf	3980,3,c	;volatile
 10069                           
 10070                           ;lcd.c: 50: _delay((unsigned long)((25)*(8000000/4000000.0)));
 10071  004CC0  0E10               	movlw	16
 10072  004CC2                     u8677:
 10073  004CC2  2EE8               	decfsz	wreg,f,c
 10074  004CC4  D7FE               	bra	u8677
 10075  004CC6  D000               	nop2	
 10076  004CC8  0012               	return		;funcret
 10077  004CCA                     __end_of_lcdNibble:
 10078                           	opt stack 0
 10079                           tblptru	equ	0xFF8
 10080                           tblptrh	equ	0xFF7
 10081                           tblptrl	equ	0xFF6
 10082                           tablat	equ	0xFF5
 10083                           prodh	equ	0xFF4
 10084                           prodl	equ	0xFF3
 10085                           intcon	equ	0xFF2
 10086                           intcon3	equ	0xFF0
 10087                           postinc0	equ	0xFEE
 10088                           wreg	equ	0xFE8
 10089                           indf2	equ	0xFDF
 10090                           postinc2	equ	0xFDE
 10091                           postdec2	equ	0xFDD
 10092                           fsr2h	equ	0xFDA
 10093                           fsr2l	equ	0xFD9
 10094                           status	equ	0xFD8
 10095                           
 10096 ;; *************** function _I2C_Master_Init *****************
 10097 ;; Defined at:
 10098 ;;		line 13 in file "I2C.c"
 10099 ;; Parameters:    Size  Location     Type
 10100 ;;  c               4   13[BANK1 ] const unsigned long 
 10101 ;; Auto vars:     Size  Location     Type
 10102 ;;		None
 10103 ;; Return value:  Size  Location     Type
 10104 ;;                  1    wreg      void 
 10105 ;; Registers used:
 10106 ;;		wreg, status,2, status,0, cstack
 10107 ;; Tracked objects:
 10108 ;;		On entry : 0/0
 10109 ;;		On exit  : 0/0
 10110 ;;		Unchanged: 0/0
 10111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10112 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10114 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10115 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10116 ;;Total ram usage:        8 bytes
 10117 ;; Hardware stack levels used:    1
 10118 ;; Hardware stack levels required when called:    9
 10119 ;; This function calls:
 10120 ;;		___lldiv
 10121 ;; This function is called by:
 10122 ;;		_initialize
 10123 ;; This function uses a non-reentrant model
 10124 ;;
 10125                           
 10126                           	psect	text34
 10127  004D30                     __ptext34:
 10128                           	opt stack 0
 10129  004D30                     _I2C_Master_Init:
 10130                           	opt stack 20
 10131                           
 10132                           ;I2C.c: 15: SSPSTAT = 0b00000000;
 10133                           
 10134                           ;incstack = 0
 10135  004D30  0E00               	movlw	0
 10136  004D32  6EC7               	movwf	4039,c	;volatile
 10137                           
 10138                           ;I2C.c: 16: SSPCON1 = 0b00101000;
 10139  004D34  0E28               	movlw	40
 10140  004D36  6EC6               	movwf	4038,c	;volatile
 10141                           
 10142                           ;I2C.c: 17: SSPCON2 = 0b00000000;
 10143  004D38  0E00               	movlw	0
 10144  004D3A  6EC5               	movwf	4037,c	;volatile
 10145                           
 10146                           ;I2C.c: 18: SSPADD = (8000000 / (4 * c)) - 1;
 10147  004D3C  0E00               	movlw	0
 10148  004D3E  0101               	movlb	1	; () banked
 10149  004D40  6F00               	movwf	___lldiv@dividend& (0+255),b
 10150  004D42  0E12               	movlw	18
 10151  004D44  6F01               	movwf	(___lldiv@dividend+1)& (0+255),b
 10152  004D46  0E7A               	movlw	122
 10153  004D48  6F02               	movwf	(___lldiv@dividend+2)& (0+255),b
 10154  004D4A  0E00               	movlw	0
 10155  004D4C  6F03               	movwf	(___lldiv@dividend+3)& (0+255),b
 10156  004D4E  C10D  F111         	movff	I2C_Master_Init@c,??_I2C_Master_Init
 10157  004D52  C10E  F112         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
 10158  004D56  C10F  F113         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
 10159  004D5A  C110  F114         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
 10160  004D5E  0E02               	movlw	2
 10161  004D60                     u8005:
 10162  004D60  90D8               	bcf	status,0,c
 10163  004D62  0101               	movlb	1	; () banked
 10164  004D64  3711               	rlcf	??_I2C_Master_Init& (0+255),f,b
 10165  004D66  3712               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
 10166  004D68  3713               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
 10167  004D6A  3714               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
 10168  004D6C  2EE8               	decfsz	wreg,f,c
 10169  004D6E  D7F8               	goto	u8005
 10170  004D70  C111  F104         	movff	??_I2C_Master_Init,___lldiv@divisor
 10171  004D74  C112  F105         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 10172  004D78  C113  F106         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 10173  004D7C  C114  F107         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 10174  004D80  EC5B  F022         	call	___lldiv	;wreg free
 10175  004D84  0101               	movlb	1	; () banked
 10176  004D86  0500               	decf	?___lldiv& (0+255),w,b
 10177  004D88  6EC8               	movwf	4040,c	;volatile
 10178                           
 10179                           ; BSR set to: 1
 10180                           ;I2C.c: 19: TRISC3 = 1;
 10181  004D8A  8694               	bsf	3988,3,c	;volatile
 10182                           
 10183                           ; BSR set to: 1
 10184                           ;I2C.c: 20: TRISC4 = 1;
 10185  004D8C  8894               	bsf	3988,4,c	;volatile
 10186                           
 10187                           ; BSR set to: 1
 10188  004D8E  0012               	return		;funcret
 10189  004D90                     __end_of_I2C_Master_Init:
 10190                           	opt stack 0
 10191                           tblptru	equ	0xFF8
 10192                           tblptrh	equ	0xFF7
 10193                           tblptrl	equ	0xFF6
 10194                           tablat	equ	0xFF5
 10195                           prodh	equ	0xFF4
 10196                           prodl	equ	0xFF3
 10197                           intcon	equ	0xFF2
 10198                           intcon3	equ	0xFF0
 10199                           postinc0	equ	0xFEE
 10200                           wreg	equ	0xFE8
 10201                           indf2	equ	0xFDF
 10202                           postinc2	equ	0xFDE
 10203                           postdec2	equ	0xFDD
 10204                           fsr2h	equ	0xFDA
 10205                           fsr2l	equ	0xFD9
 10206                           status	equ	0xFD8
 10207                           
 10208 ;; *************** function ___lldiv *****************
 10209 ;; Defined at:
 10210 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
 10211 ;; Parameters:    Size  Location     Type
 10212 ;;  dividend        4    0[BANK1 ] unsigned long 
 10213 ;;  divisor         4    4[BANK1 ] unsigned long 
 10214 ;; Auto vars:     Size  Location     Type
 10215 ;;  quotient        4    8[BANK1 ] unsigned long 
 10216 ;;  counter         1   12[BANK1 ] unsigned char 
 10217 ;; Return value:  Size  Location     Type
 10218 ;;                  4    0[BANK1 ] unsigned long 
 10219 ;; Registers used:
 10220 ;;		wreg, status,2, status,0
 10221 ;; Tracked objects:
 10222 ;;		On entry : 0/0
 10223 ;;		On exit  : 0/0
 10224 ;;		Unchanged: 0/0
 10225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10226 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10227 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10229 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10230 ;;Total ram usage:       13 bytes
 10231 ;; Hardware stack levels used:    1
 10232 ;; Hardware stack levels required when called:    8
 10233 ;; This function calls:
 10234 ;;		Nothing
 10235 ;; This function is called by:
 10236 ;;		_I2C_Master_Init
 10237 ;;		_printf
 10238 ;; This function uses a non-reentrant model
 10239 ;;
 10240                           
 10241                           	psect	text35
 10242  0044B6                     __ptext35:
 10243                           	opt stack 0
 10244  0044B6                     ___lldiv:
 10245                           	opt stack 20
 10246                           
 10247                           ; BSR set to: 1
 10248                           ;incstack = 0
 10249  0044B6  0E00               	movlw	0
 10250  0044B8  0101               	movlb	1	; () banked
 10251  0044BA  6F08               	movwf	___lldiv@quotient& (0+255),b
 10252  0044BC  0E00               	movlw	0
 10253  0044BE  6F09               	movwf	(___lldiv@quotient+1)& (0+255),b
 10254  0044C0  0E00               	movlw	0
 10255  0044C2  6F0A               	movwf	(___lldiv@quotient+2)& (0+255),b
 10256  0044C4  0E00               	movlw	0
 10257  0044C6  6F0B               	movwf	(___lldiv@quotient+3)& (0+255),b
 10258                           
 10259                           ; BSR set to: 1
 10260  0044C8  0101               	movlb	1	; () banked
 10261  0044CA  5104               	movf	___lldiv@divisor& (0+255),w,b
 10262  0044CC  0101               	movlb	1	; () banked
 10263  0044CE  1105               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 10264  0044D0  0101               	movlb	1	; () banked
 10265  0044D2  1106               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 10266  0044D4  0101               	movlb	1	; () banked
 10267  0044D6  1107               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 10268  0044D8  B4D8               	btfsc	status,2,c
 10269  0044DA  D042               	goto	l985
 10270                           
 10271                           ; BSR set to: 1
 10272  0044DC  0E01               	movlw	1
 10273  0044DE  0101               	movlb	1	; () banked
 10274  0044E0  6F0C               	movwf	___lldiv@counter& (0+255),b
 10275  0044E2  D008               	goto	l7483
 10276  0044E4                     l7481:
 10277                           
 10278                           ; BSR set to: 1
 10279  0044E4  0101               	movlb	1	; () banked
 10280  0044E6  90D8               	bcf	status,0,c
 10281  0044E8  3704               	rlcf	___lldiv@divisor& (0+255),f,b
 10282  0044EA  3705               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 10283  0044EC  3706               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 10284  0044EE  3707               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 10285  0044F0  0101               	movlb	1	; () banked
 10286  0044F2  2B0C               	incf	___lldiv@counter& (0+255),f,b
 10287  0044F4                     l7483:
 10288                           
 10289                           ; BSR set to: 1
 10290  0044F4  0101               	movlb	1	; () banked
 10291  0044F6  AF07               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 10292  0044F8  D7F5               	goto	l7481
 10293  0044FA                     l7485:
 10294                           
 10295                           ; BSR set to: 1
 10296  0044FA  0101               	movlb	1	; () banked
 10297  0044FC  90D8               	bcf	status,0,c
 10298  0044FE  3708               	rlcf	___lldiv@quotient& (0+255),f,b
 10299  004500  3709               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 10300  004502  370A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 10301  004504  370B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 10302                           
 10303                           ; BSR set to: 1
 10304  004506  0101               	movlb	1	; () banked
 10305  004508  5104               	movf	___lldiv@divisor& (0+255),w,b
 10306  00450A  0101               	movlb	1	; () banked
 10307  00450C  5D00               	subwf	___lldiv@dividend& (0+255),w,b
 10308  00450E  0101               	movlb	1	; () banked
 10309  004510  5105               	movf	(___lldiv@divisor+1)& (0+255),w,b
 10310  004512  0101               	movlb	1	; () banked
 10311  004514  5901               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 10312  004516  0101               	movlb	1	; () banked
 10313  004518  5106               	movf	(___lldiv@divisor+2)& (0+255),w,b
 10314  00451A  0101               	movlb	1	; () banked
 10315  00451C  5902               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 10316  00451E  0101               	movlb	1	; () banked
 10317  004520  5107               	movf	(___lldiv@divisor+3)& (0+255),w,b
 10318  004522  0101               	movlb	1	; () banked
 10319  004524  5903               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 10320  004526  A0D8               	btfss	status,0,c
 10321  004528  D012               	goto	l7493
 10322                           
 10323                           ; BSR set to: 1
 10324  00452A  0101               	movlb	1	; () banked
 10325  00452C  5104               	movf	___lldiv@divisor& (0+255),w,b
 10326  00452E  0101               	movlb	1	; () banked
 10327  004530  5F00               	subwf	___lldiv@dividend& (0+255),f,b
 10328  004532  0101               	movlb	1	; () banked
 10329  004534  5105               	movf	(___lldiv@divisor+1)& (0+255),w,b
 10330  004536  0101               	movlb	1	; () banked
 10331  004538  5B01               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 10332  00453A  0101               	movlb	1	; () banked
 10333  00453C  5106               	movf	(___lldiv@divisor+2)& (0+255),w,b
 10334  00453E  0101               	movlb	1	; () banked
 10335  004540  5B02               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 10336  004542  0101               	movlb	1	; () banked
 10337  004544  5107               	movf	(___lldiv@divisor+3)& (0+255),w,b
 10338  004546  0101               	movlb	1	; () banked
 10339  004548  5B03               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 10340                           
 10341                           ; BSR set to: 1
 10342  00454A  0101               	movlb	1	; () banked
 10343  00454C  8108               	bsf	___lldiv@quotient& (0+255),0,b
 10344  00454E                     l7493:
 10345                           
 10346                           ; BSR set to: 1
 10347  00454E  0101               	movlb	1	; () banked
 10348  004550  90D8               	bcf	status,0,c
 10349  004552  3307               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 10350  004554  3306               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 10351  004556  3305               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 10352  004558  3304               	rrcf	___lldiv@divisor& (0+255),f,b
 10353                           
 10354                           ; BSR set to: 1
 10355  00455A  0101               	movlb	1	; () banked
 10356  00455C  2F0C               	decfsz	___lldiv@counter& (0+255),f,b
 10357  00455E  D7CD               	goto	l7485
 10358  004560                     l985:
 10359                           
 10360                           ; BSR set to: 1
 10361  004560  C108  F100         	movff	___lldiv@quotient,?___lldiv
 10362  004564  C109  F101         	movff	___lldiv@quotient+1,?___lldiv+1
 10363  004568  C10A  F102         	movff	___lldiv@quotient+2,?___lldiv+2
 10364  00456C  C10B  F103         	movff	___lldiv@quotient+3,?___lldiv+3
 10365                           
 10366                           ; BSR set to: 1
 10367  004570  0012               	return		;funcret
 10368  004572                     __end_of___lldiv:
 10369                           	opt stack 0
 10370                           tblptru	equ	0xFF8
 10371                           tblptrh	equ	0xFF7
 10372                           tblptrl	equ	0xFF6
 10373                           tablat	equ	0xFF5
 10374                           prodh	equ	0xFF4
 10375                           prodl	equ	0xFF3
 10376                           intcon	equ	0xFF2
 10377                           intcon3	equ	0xFF0
 10378                           postinc0	equ	0xFEE
 10379                           wreg	equ	0xFE8
 10380                           indf2	equ	0xFDF
 10381                           postinc2	equ	0xFDE
 10382                           postdec2	equ	0xFDD
 10383                           fsr2h	equ	0xFDA
 10384                           fsr2l	equ	0xFD9
 10385                           status	equ	0xFD8
 10386                           
 10387 ;; *************** function _keypressed *****************
 10388 ;; Defined at:
 10389 ;;		line 171 in file "main.c"
 10390 ;; Parameters:    Size  Location     Type
 10391 ;;		None
 10392 ;; Auto vars:     Size  Location     Type
 10393 ;;  keypress        1  125[COMRAM] unsigned char 
 10394 ;; Return value:  Size  Location     Type
 10395 ;;                  1    wreg      void 
 10396 ;; Registers used:
 10397 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10398 ;; Tracked objects:
 10399 ;;		On entry : 0/0
 10400 ;;		On exit  : 0/0
 10401 ;;		Unchanged: 0/0
 10402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10404 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10405 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10406 ;;      Totals:         1      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10407 ;;Total ram usage:       17 bytes
 10408 ;; Hardware stack levels used:    1
 10409 ;; Hardware stack levels required when called:    7
 10410 ;; This function calls:
 10411 ;;		_PermLog
 10412 ;;		_simulate
 10413 ;;		_stopMoving
 10414 ;; This function is called by:
 10415 ;;		Interrupt level 2
 10416 ;; This function uses a non-reentrant model
 10417 ;;
 10418                           
 10419                           	psect	intcode
 10420  000008                     __pintcode:
 10421                           	opt stack 0
 10422  000008                     _keypressed:
 10423                           	opt stack 18
 10424                           
 10425                           ; BSR set to: 1
 10426                           ;incstack = 0
 10427  000008  827F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10428  00000A  ED18  F01E         	call	int_func,f	;refresh shadow registers
 10429                           tblptru	equ	0xFF8
 10430                           tblptrh	equ	0xFF7
 10431                           tblptrl	equ	0xFF6
 10432                           tablat	equ	0xFF5
 10433                           prodh	equ	0xFF4
 10434                           prodl	equ	0xFF3
 10435                           intcon	equ	0xFF2
 10436                           intcon3	equ	0xFF0
 10437                           postinc0	equ	0xFEE
 10438                           wreg	equ	0xFE8
 10439                           indf2	equ	0xFDF
 10440                           postinc2	equ	0xFDE
 10441                           postdec2	equ	0xFDD
 10442                           fsr2h	equ	0xFDA
 10443                           fsr2l	equ	0xFD9
 10444                           status	equ	0xFD8
 10445                           
 10446                           	psect	intcode_body
 10447  003C30                     __pintcode_body:
 10448                           	opt stack 18
 10449  003C30                     int_func:
 10450                           	opt stack 18
 10451  003C30  0006               	pop		; remove dummy address from shadow register refresh
 10452  003C32  CFFA F0A8          	movff	pclath,??_keypressed+2
 10453  003C36  CFFB F0A9          	movff	pclatu,??_keypressed+3
 10454  003C3A  CFE9 F0AA          	movff	fsr0l,??_keypressed+4
 10455  003C3E  CFEA F0AB          	movff	fsr0h,??_keypressed+5
 10456  003C42  CFE1 F0AC          	movff	fsr1l,??_keypressed+6
 10457  003C46  CFE2 F0AD          	movff	fsr1h,??_keypressed+7
 10458  003C4A  CFD9 F0AE          	movff	fsr2l,??_keypressed+8
 10459  003C4E  CFDA F0AF          	movff	fsr2h,??_keypressed+9
 10460  003C52  CFF3 F0B0          	movff	prodl,??_keypressed+10
 10461  003C56  CFF4 F0B1          	movff	prodh,??_keypressed+11
 10462  003C5A  CFF6 F0B2          	movff	tblptrl,??_keypressed+12
 10463  003C5E  CFF7 F0B3          	movff	tblptrh,??_keypressed+13
 10464  003C62  CFF8 F0B4          	movff	tblptru,??_keypressed+14
 10465  003C66  CFF5 F0B5          	movff	tablat,??_keypressed+15
 10466                           
 10467                           ;main.c: 178: (INTCONbits.GIE = 0);
 10468  003C6A  9EF2               	bcf	intcon,7,c	;volatile
 10469                           
 10470                           ;main.c: 179: if (INT1IF) {
 10471  003C6C  A0F0               	btfss	intcon3,0,c	;volatile
 10472  003C6E  D03D               	goto	i2l142
 10473                           
 10474                           ;main.c: 180: unsigned char keypress = (PORTB & 0xF0) >> 4;
 10475  003C70  3881               	swapf	3969,w,c	;volatile
 10476  003C72  0B0F               	andlw	15
 10477  003C74  0B0F               	andlw	15
 10478  003C76  6E7E               	movwf	keypressed@keypress,c
 10479                           
 10480                           ;main.c: 181: INT1IF = 0;
 10481  003C78  90F0               	bcf	intcon3,0,c	;volatile
 10482  003C7A                     i2l143:
 10483  003C7A  A281               	btfss	3969,1,c	;volatile
 10484  003C7C  D025               	goto	i2l6763
 10485  003C7E  D7FD               	goto	i2l143
 10486  003C80                     i2l6741:
 10487                           
 10488                           ;main.c: 185: if (keypress < 4) {
 10489  003C80  0E04               	movlw	4
 10490  003C82  607E               	cpfslt	keypressed@keypress,c
 10491  003C84  D00E               	goto	i2l6749
 10492                           
 10493                           ;main.c: 186: mode = 2;
 10494  003C86  0E00               	movlw	0
 10495  003C88  0100               	movlb	0	; () banked
 10496  003C8A  6FD7               	movwf	(_mode+1)& (0+255),b
 10497  003C8C  0E02               	movlw	2
 10498  003C8E  6FD6               	movwf	_mode& (0+255),b
 10499                           
 10500                           ; BSR set to: 0
 10501                           ;main.c: 187: PermLog(keypress);
 10502  003C90  507E               	movf	keypressed@keypress,w,c
 10503  003C92  EC7F  F024         	call	_PermLog
 10504                           
 10505                           ;main.c: 188: mode = 0;
 10506  003C96  0E00               	movlw	0
 10507  003C98  0100               	movlb	0	; () banked
 10508  003C9A  6FD7               	movwf	(_mode+1)& (0+255),b
 10509  003C9C  0E00               	movlw	0
 10510  003C9E  6FD6               	movwf	_mode& (0+255),b
 10511                           
 10512                           ;main.c: 189: } else {
 10513  003CA0  D024               	goto	i2l142
 10514  003CA2                     i2l6749:
 10515                           
 10516                           ;main.c: 190: mode = 1;
 10517  003CA2  0E00               	movlw	0
 10518  003CA4  0100               	movlb	0	; () banked
 10519  003CA6  6FD7               	movwf	(_mode+1)& (0+255),b
 10520  003CA8  0E01               	movlw	1
 10521  003CAA  6FD6               	movwf	_mode& (0+255),b
 10522                           
 10523                           ; BSR set to: 0
 10524                           ;main.c: 191: (INTCONbits.GIE = 1);
 10525  003CAC  8EF2               	bsf	intcon,7,c	;volatile
 10526                           
 10527                           ; BSR set to: 0
 10528                           ;main.c: 192: simulate();
 10529  003CAE  EC6E  F00B         	call	_simulate	;wreg free
 10530                           
 10531                           ;main.c: 193: (INTCONbits.GIE = 0);
 10532  003CB2  9EF2               	bcf	intcon,7,c	;volatile
 10533                           
 10534                           ;main.c: 194: }
 10535                           ;main.c: 195: break;
 10536  003CB4  D01A               	goto	i2l142
 10537  003CB6                     i2l6757:
 10538                           
 10539                           ;main.c: 197: mode = 3;
 10540  003CB6  0E00               	movlw	0
 10541  003CB8  0100               	movlb	0	; () banked
 10542  003CBA  6FD7               	movwf	(_mode+1)& (0+255),b
 10543  003CBC  0E03               	movlw	3
 10544  003CBE  6FD6               	movwf	_mode& (0+255),b
 10545                           
 10546                           ; BSR set to: 0
 10547                           ;main.c: 198: stopMoving(1);
 10548  003CC0  0E01               	movlw	1
 10549  003CC2  EC21  F027         	call	_stopMoving
 10550                           
 10551                           ;main.c: 202: }
 10552                           
 10553                           ;main.c: 201: break;
 10554                           
 10555                           ;main.c: 200: default:
 10556                           
 10557                           ;main.c: 199: break;
 10558  003CC6  D011               	goto	i2l142
 10559  003CC8                     i2l6763:
 10560  003CC8  C0D6  F0A6         	movff	_mode,??_keypressed
 10561  003CCC  C0D7  F0A7         	movff	_mode+1,??_keypressed+1
 10562                           
 10563                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10564                           ; Switch size 1, requested type "space"
 10565                           ; Number of cases is 1, Range of values is 0 to 0
 10566                           ; switch strategies available:
 10567                           ; Name         Instructions Cycles
 10568                           ; simple_byte            4     3 (average)
 10569                           ;	Chosen strategy is simple_byte
 10570  003CD0  0100               	movlb	0	; () banked
 10571  003CD2  51A7               	movf	(??_keypressed+1)& (0+255),w,b
 10572  003CD4  0A00               	xorlw	0	; case 0
 10573  003CD6  A4D8               	btfss	status,2,c
 10574  003CD8  D008               	goto	i2l142
 10575                           
 10576                           ; BSR set to: 0
 10577                           ; Switch size 1, requested type "space"
 10578                           ; Number of cases is 2, Range of values is 0 to 1
 10579                           ; switch strategies available:
 10580                           ; Name         Instructions Cycles
 10581                           ; simple_byte            7     4 (average)
 10582                           ;	Chosen strategy is simple_byte
 10583  003CDA  0100               	movlb	0	; () banked
 10584  003CDC  51A6               	movf	??_keypressed& (0+255),w,b
 10585  003CDE  0A00               	xorlw	0	; case 0
 10586  003CE0  B4D8               	btfsc	status,2,c
 10587  003CE2  D7CE               	goto	i2l6741
 10588  003CE4  0A01               	xorlw	1	; case 1
 10589  003CE6  B4D8               	btfsc	status,2,c
 10590  003CE8  D7E6               	goto	i2l6757
 10591  003CEA                     i2l142:
 10592                           
 10593                           ;main.c: 203: }
 10594                           ;main.c: 204: (INTCONbits.GIE = 1);
 10595  003CEA  8EF2               	bsf	intcon,7,c	;volatile
 10596  003CEC  C0B5  FFF5         	movff	??_keypressed+15,tablat
 10597  003CF0  C0B4  FFF8         	movff	??_keypressed+14,tblptru
 10598  003CF4  C0B3  FFF7         	movff	??_keypressed+13,tblptrh
 10599  003CF8  C0B2  FFF6         	movff	??_keypressed+12,tblptrl
 10600  003CFC  C0B1  FFF4         	movff	??_keypressed+11,prodh
 10601  003D00  C0B0  FFF3         	movff	??_keypressed+10,prodl
 10602  003D04  C0AF  FFDA         	movff	??_keypressed+9,fsr2h
 10603  003D08  C0AE  FFD9         	movff	??_keypressed+8,fsr2l
 10604  003D0C  C0AD  FFE2         	movff	??_keypressed+7,fsr1h
 10605  003D10  C0AC  FFE1         	movff	??_keypressed+6,fsr1l
 10606  003D14  C0AB  FFEA         	movff	??_keypressed+5,fsr0h
 10607  003D18  C0AA  FFE9         	movff	??_keypressed+4,fsr0l
 10608  003D1C  C0A9  FFFB         	movff	??_keypressed+3,pclatu
 10609  003D20  C0A8  FFFA         	movff	??_keypressed+2,pclath
 10610  003D24  927F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10611  003D26  0011               	retfie		f
 10612  003D28                     __end_of_keypressed:
 10613                           	opt stack 0
 10614                           pclatu	equ	0xFFB
 10615                           pclath	equ	0xFFA
 10616                           tblptru	equ	0xFF8
 10617                           tblptrh	equ	0xFF7
 10618                           tblptrl	equ	0xFF6
 10619                           tablat	equ	0xFF5
 10620                           prodh	equ	0xFF4
 10621                           prodl	equ	0xFF3
 10622                           intcon	equ	0xFF2
 10623                           intcon3	equ	0xFF0
 10624                           postinc0	equ	0xFEE
 10625                           fsr0h	equ	0xFEA
 10626                           fsr0l	equ	0xFE9
 10627                           wreg	equ	0xFE8
 10628                           fsr1h	equ	0xFE2
 10629                           fsr1l	equ	0xFE1
 10630                           indf2	equ	0xFDF
 10631                           postinc2	equ	0xFDE
 10632                           postdec2	equ	0xFDD
 10633                           fsr2h	equ	0xFDA
 10634                           fsr2l	equ	0xFD9
 10635                           status	equ	0xFD8
 10636                           
 10637 ;; *************** function _simulate *****************
 10638 ;; Defined at:
 10639 ;;		line 49 in file "main.c"
 10640 ;; Parameters:    Size  Location     Type
 10641 ;;		None
 10642 ;; Auto vars:     Size  Location     Type
 10643 ;;  portCCW         6   10[BANK0 ] int [3]
 10644 ;;  portCW          6    4[BANK0 ] int [3]
 10645 ;;  sorted          4   32[BANK0 ] unsigned char [4]
 10646 ;;  start           4   28[BANK0 ] unsigned int [2]
 10647 ;;  now             4   24[BANK0 ] unsigned int [2]
 10648 ;;  period          2   36[BANK0 ] unsigned int 
 10649 ;;  V9              2   22[BANK0 ] int 
 10650 ;;  C               2   20[BANK0 ] int 
 10651 ;;  AA              2   18[BANK0 ] int 
 10652 ;;  stop            2   16[BANK0 ] int 
 10653 ;; Return value:  Size  Location     Type
 10654 ;;                  1    wreg      void 
 10655 ;; Registers used:
 10656 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10657 ;; Tracked objects:
 10658 ;;		On entry : 0/0
 10659 ;;		On exit  : 0/0
 10660 ;;		Unchanged: 0/0
 10661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10663 ;;      Locals:         0      36       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10664 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10665 ;;      Totals:         0      38       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10666 ;;Total ram usage:       38 bytes
 10667 ;; Hardware stack levels used:    1
 10668 ;; Hardware stack levels required when called:    6
 10669 ;; This function calls:
 10670 ;;		_CCW90
 10671 ;;		_CW90
 10672 ;;		_HexDecToDec2
 10673 ;;		_WriteRun
 10674 ;;		_check9
 10675 ;;		_checkAA
 10676 ;;		_checkC
 10677 ;;		_showInfo
 10678 ;;		_stopMoving
 10679 ;;		i2___lcd_newline
 10680 ;;		i2___wmul
 10681 ;;		i2_getTime
 10682 ;;		i2_lcdInst
 10683 ;;		i2_printf
 10684 ;; This function is called by:
 10685 ;;		_keypressed
 10686 ;; This function uses a non-reentrant model
 10687 ;;
 10688                           
 10689                           	psect	text37
 10690  0016DC                     __ptext37:
 10691                           	opt stack 0
 10692  0016DC                     _simulate:
 10693                           	opt stack 18
 10694                           
 10695                           ;main.c: 50: unsigned int now[] = {0, 0}, start[] = {0, 0};
 10696                           
 10697                           ;incstack = 0
 10698  0016DC  C0D2  F098         	movff	simulate@F3101,simulate@now
 10699  0016E0  C0D3  F099         	movff	simulate@F3101+1,simulate@now+1
 10700  0016E4  C0D4  F09A         	movff	simulate@F3101+2,simulate@now+2
 10701  0016E8  C0D5  F09B         	movff	simulate@F3101+3,simulate@now+3
 10702  0016EC  C0CE  F09C         	movff	simulate@F3103,simulate@start
 10703  0016F0  C0CF  F09D         	movff	simulate@F3103+1,simulate@start+1
 10704  0016F4  C0D0  F09E         	movff	simulate@F3103+2,simulate@start+2
 10705  0016F8  C0D1  F09F         	movff	simulate@F3103+3,simulate@start+3
 10706                           
 10707                           ;main.c: 51: unsigned char sorted[] = {0, 0, 0, 0};
 10708  0016FC  C0CA  F0A0         	movff	simulate@F3105,simulate@sorted
 10709  001700  C0CB  F0A1         	movff	simulate@F3105+1,simulate@sorted+1
 10710  001704  C0CC  F0A2         	movff	simulate@F3105+2,simulate@sorted+2
 10711  001708  C0CD  F0A3         	movff	simulate@F3105+3,simulate@sorted+3
 10712                           
 10713                           ;main.c: 52: unsigned int period = 0;
 10714  00170C  0E00               	movlw	0
 10715  00170E  0100               	movlb	0	; () banked
 10716  001710  6FA5               	movwf	(simulate@period+1)& (0+255),b
 10717  001712  0E00               	movlw	0
 10718  001714  6FA4               	movwf	simulate@period& (0+255),b
 10719                           
 10720                           ;main.c: 53: int stop = 0;
 10721  001716  0E00               	movlw	0
 10722  001718  0100               	movlb	0	; () banked
 10723  00171A  6F91               	movwf	(simulate@stop+1)& (0+255),b
 10724  00171C  0E00               	movlw	0
 10725  00171E  6F90               	movwf	simulate@stop& (0+255),b
 10726                           
 10727                           ; BSR set to: 0
 10728                           ;main.c: 54: int AA, C, V9;
 10729                           ;main.c: 55: lcdInst(0b10000000);;
 10730  001720  0E80               	movlw	128
 10731  001722  EC8C  F029         	call	i2_lcdInst
 10732                           
 10733                           ;main.c: 56: printf("Simulating...          ");
 10734  001726  0EF3               	movlw	low STR_2
 10735  001728  6E47               	movwf	i2printf@f,c
 10736  00172A  0EFC               	movlw	high STR_2
 10737  00172C  6E48               	movwf	i2printf@f+1,c
 10738  00172E  EC48  F006         	call	i2_printf	;wreg free
 10739                           
 10740                           ;main.c: 57: _delay((unsigned long)((700)*(8000000/4000.0)));
 10741  001732  0E08               	movlw	8
 10742  001734  0100               	movlb	0	; () banked
 10743  001736  6F81               	movwf	(??_simulate+1)& (0+255),b
 10744  001738  0E1B               	movlw	27
 10745  00173A  0100               	movlb	0	; () banked
 10746  00173C  6F80               	movwf	??_simulate& (0+255),b
 10747  00173E  0E27               	movlw	39
 10748  001740                     i2u868_47:
 10749  001740  2EE8               	decfsz	wreg,f,c
 10750  001742  D7FE               	bra	i2u868_47
 10751  001744  2F80               	decfsz	??_simulate& (0+255),f,b
 10752  001746  D7FC               	bra	i2u868_47
 10753  001748  2F81               	decfsz	(??_simulate+1)& (0+255),f,b
 10754  00174A  D7FA               	bra	i2u868_47
 10755                           
 10756                           ;main.c: 58: start[0] = time[0];
 10757  00174C  C0D9  F09C         	movff	_time,simulate@start
 10758  001750  0100               	movlb	0	; () banked
 10759  001752  6B9D               	clrf	(simulate@start+1)& (0+255),b
 10760                           
 10761                           ; BSR set to: 0
 10762                           ;main.c: 59: start[1] = time[1];
 10763  001754  C0DA  F09E         	movff	_time+1,simulate@start+2
 10764  001758  0100               	movlb	0	; () banked
 10765  00175A  6B9F               	clrf	(simulate@start+3)& (0+255),b
 10766                           
 10767                           ; BSR set to: 0
 10768                           ;main.c: 60: LATC5 = 1;
 10769  00175C  8A8B               	bsf	3979,5,c	;volatile
 10770                           
 10771                           ;main.c: 61: while (!stop) {
 10772  00175E  D1DD               	goto	i2l6683
 10773  001760                     i2l6577:
 10774                           
 10775                           ; BSR set to: 0
 10776                           ;main.c: 63: AA = checkAA(sorted);
 10777  001760  0EA0               	movlw	low simulate@sorted
 10778  001762  6E7B               	movwf	checkAA@sorted,c
 10779  001764  0E00               	movlw	high simulate@sorted
 10780  001766  6E7C               	movwf	checkAA@sorted+1,c
 10781  001768  EC9C  F021         	call	_checkAA	;wreg free
 10782  00176C  C07B  F092         	movff	?_checkAA,simulate@AA
 10783  001770  C07C  F093         	movff	?_checkAA+1,simulate@AA+1
 10784                           
 10785                           ;main.c: 65: _delay((unsigned long)((700)*(8000000/4000.0)));
 10786  001774  0E08               	movlw	8
 10787  001776  0100               	movlb	0	; () banked
 10788  001778  6F81               	movwf	(??_simulate+1)& (0+255),b
 10789  00177A  0E1B               	movlw	27
 10790  00177C  0100               	movlb	0	; () banked
 10791  00177E  6F80               	movwf	??_simulate& (0+255),b
 10792  001780  0E27               	movlw	39
 10793  001782                     i2u869_47:
 10794  001782  2EE8               	decfsz	wreg,f,c
 10795  001784  D7FE               	bra	i2u869_47
 10796  001786  2F80               	decfsz	??_simulate& (0+255),f,b
 10797  001788  D7FC               	bra	i2u869_47
 10798  00178A  2F81               	decfsz	(??_simulate+1)& (0+255),f,b
 10799  00178C  D7FA               	bra	i2u869_47
 10800                           
 10801                           ;main.c: 66: C = checkC(sorted);
 10802  00178E  0EA0               	movlw	low simulate@sorted
 10803  001790  6E7B               	movwf	checkC@sorted,c
 10804  001792  0E00               	movlw	high simulate@sorted
 10805  001794  6E7C               	movwf	checkC@sorted+1,c
 10806  001796  ECD8  F020         	call	_checkC	;wreg free
 10807  00179A  C07B  F094         	movff	?_checkC,simulate@C
 10808  00179E  C07C  F095         	movff	?_checkC+1,simulate@C+1
 10809                           
 10810                           ;main.c: 68: _delay((unsigned long)((700)*(8000000/4000.0)));
 10811  0017A2  0E08               	movlw	8
 10812  0017A4  0100               	movlb	0	; () banked
 10813  0017A6  6F81               	movwf	(??_simulate+1)& (0+255),b
 10814  0017A8  0E1B               	movlw	27
 10815  0017AA  0100               	movlb	0	; () banked
 10816  0017AC  6F80               	movwf	??_simulate& (0+255),b
 10817  0017AE  0E27               	movlw	39
 10818  0017B0                     i2u870_47:
 10819  0017B0  2EE8               	decfsz	wreg,f,c
 10820  0017B2  D7FE               	bra	i2u870_47
 10821  0017B4  2F80               	decfsz	??_simulate& (0+255),f,b
 10822  0017B6  D7FC               	bra	i2u870_47
 10823  0017B8  2F81               	decfsz	(??_simulate+1)& (0+255),f,b
 10824  0017BA  D7FA               	bra	i2u870_47
 10825                           
 10826                           ;main.c: 70: V9 = check9(sorted);
 10827  0017BC  0EA0               	movlw	low simulate@sorted
 10828  0017BE  6E7B               	movwf	check9@sorted,c
 10829  0017C0  0E00               	movlw	high simulate@sorted
 10830  0017C2  6E7C               	movwf	check9@sorted+1,c
 10831  0017C4  EC3A  F021         	call	_check9	;wreg free
 10832  0017C8  C07B  F096         	movff	?_check9,simulate@V9
 10833  0017CC  C07C  F097         	movff	?_check9+1,simulate@V9+1
 10834                           
 10835                           ;main.c: 71: lcdInst(0b10000000);;
 10836  0017D0  0E80               	movlw	128
 10837  0017D2  EC8C  F029         	call	i2_lcdInst
 10838                           
 10839                           ;main.c: 74: int portCW[] = {0, 0, 0};
 10840  0017D6  EE20  F0BC         	lfsr	2,simulate@F3115
 10841  0017DA  EE10  F084         	lfsr	1,simulate@portCW
 10842  0017DE  0E05               	movlw	5
 10843  0017E0                     i2u697_41:
 10844  0017E0  CFDB FFE3          	movff	plusw2,plusw1
 10845  0017E4  06E8               	decf	wreg,f,c
 10846  0017E6  E2FC               	bc	i2u697_41
 10847                           
 10848                           ;main.c: 75: int portCCW[] = {0, 0, 0};
 10849  0017E8  EE20  F0B6         	lfsr	2,simulate@F3117
 10850  0017EC  EE10  F08A         	lfsr	1,simulate@portCCW
 10851  0017F0  0E05               	movlw	5
 10852  0017F2                     i2u698_41:
 10853  0017F2  CFDB FFE3          	movff	plusw2,plusw1
 10854  0017F6  06E8               	decf	wreg,f,c
 10855  0017F8  E2FC               	bc	i2u698_41
 10856                           
 10857                           ;main.c: 77: if (!AA) {
 10858  0017FA  0100               	movlb	0	; () banked
 10859  0017FC  5192               	movf	simulate@AA& (0+255),w,b
 10860  0017FE  0100               	movlb	0	; () banked
 10861  001800  1193               	iorwf	(simulate@AA+1)& (0+255),w,b
 10862  001802  A4D8               	btfss	status,2,c
 10863  001804  D00C               	goto	i2l6597
 10864                           
 10865                           ; BSR set to: 0
 10866                           ;main.c: 78: portCCW[0] = 1;
 10867  001806  0E00               	movlw	0
 10868  001808  0100               	movlb	0	; () banked
 10869  00180A  6F8B               	movwf	(simulate@portCCW+1)& (0+255),b
 10870  00180C  0E01               	movlw	1
 10871  00180E  6F8A               	movwf	simulate@portCCW& (0+255),b
 10872                           
 10873                           ; BSR set to: 0
 10874                           ;main.c: 79: printf("AAServoLeft         ");
 10875  001810  0E40               	movlw	low STR_3
 10876  001812  6E47               	movwf	i2printf@f,c
 10877  001814  0EFE               	movlw	high STR_3
 10878  001816  6E48               	movwf	i2printf@f+1,c
 10879  001818  EC48  F006         	call	i2_printf	;wreg free
 10880                           
 10881                           ;main.c: 80: } else if (AA == 1) {
 10882  00181C  D018               	goto	i2l6605
 10883  00181E                     i2l6597:
 10884  00181E  0100               	movlb	0	; () banked
 10885  001820  0592               	decf	simulate@AA& (0+255),w,b
 10886  001822  0100               	movlb	0	; () banked
 10887  001824  1193               	iorwf	(simulate@AA+1)& (0+255),w,b
 10888  001826  A4D8               	btfss	status,2,c
 10889  001828  D00C               	goto	i2l6603
 10890                           
 10891                           ; BSR set to: 0
 10892                           ;main.c: 81: portCW[0] = 1;
 10893  00182A  0E00               	movlw	0
 10894  00182C  0100               	movlb	0	; () banked
 10895  00182E  6F85               	movwf	(simulate@portCW+1)& (0+255),b
 10896  001830  0E01               	movlw	1
 10897  001832  6F84               	movwf	simulate@portCW& (0+255),b
 10898                           
 10899                           ; BSR set to: 0
 10900                           ;main.c: 82: printf("AAServoRight         ");
 10901  001834  0EAC               	movlw	low STR_4
 10902  001836  6E47               	movwf	i2printf@f,c
 10903  001838  0EFD               	movlw	high STR_4
 10904  00183A  6E48               	movwf	i2printf@f+1,c
 10905  00183C  EC48  F006         	call	i2_printf	;wreg free
 10906                           
 10907                           ;main.c: 83: } else {
 10908  001840  D006               	goto	i2l6605
 10909  001842                     i2l6603:
 10910                           
 10911                           ;main.c: 84: printf("AAServoStays         ");
 10912  001842  0E96               	movlw	low STR_5
 10913  001844  6E47               	movwf	i2printf@f,c
 10914  001846  0EFD               	movlw	high STR_5
 10915  001848  6E48               	movwf	i2printf@f+1,c
 10916  00184A  EC48  F006         	call	i2_printf	;wreg free
 10917  00184E                     i2l6605:
 10918                           
 10919                           ;main.c: 85: }
 10920                           ;main.c: 87: lcdInst(0b10000000);;
 10921  00184E  0E80               	movlw	128
 10922  001850  EC8C  F029         	call	i2_lcdInst
 10923                           
 10924                           ;main.c: 88: _delay((unsigned long)((700)*(8000000/4000.0)));
 10925  001854  0E08               	movlw	8
 10926  001856  0100               	movlb	0	; () banked
 10927  001858  6F81               	movwf	(??_simulate+1)& (0+255),b
 10928  00185A  0E1B               	movlw	27
 10929  00185C  0100               	movlb	0	; () banked
 10930  00185E  6F80               	movwf	??_simulate& (0+255),b
 10931  001860  0E27               	movlw	39
 10932  001862                     i2u871_47:
 10933  001862  2EE8               	decfsz	wreg,f,c
 10934  001864  D7FE               	bra	i2u871_47
 10935  001866  2F80               	decfsz	??_simulate& (0+255),f,b
 10936  001868  D7FC               	bra	i2u871_47
 10937  00186A  2F81               	decfsz	(??_simulate+1)& (0+255),f,b
 10938  00186C  D7FA               	bra	i2u871_47
 10939                           
 10940                           ;main.c: 90: if (!C) {
 10941  00186E  0100               	movlb	0	; () banked
 10942  001870  5194               	movf	simulate@C& (0+255),w,b
 10943  001872  0100               	movlb	0	; () banked
 10944  001874  1195               	iorwf	(simulate@C+1)& (0+255),w,b
 10945  001876  A4D8               	btfss	status,2,c
 10946  001878  D00C               	goto	i2l6615
 10947                           
 10948                           ; BSR set to: 0
 10949                           ;main.c: 91: portCCW[1] = 1;
 10950  00187A  0E00               	movlw	0
 10951  00187C  0100               	movlb	0	; () banked
 10952  00187E  6F8D               	movwf	(simulate@portCCW+3)& (0+255),b
 10953  001880  0E01               	movlw	1
 10954  001882  6F8C               	movwf	(simulate@portCCW+2)& (0+255),b
 10955                           
 10956                           ; BSR set to: 0
 10957                           ;main.c: 92: printf("CServoLeft         ");
 10958  001884  0EF9               	movlw	low STR_6
 10959  001886  6E47               	movwf	i2printf@f,c
 10960  001888  0EFE               	movlw	high STR_6
 10961  00188A  6E48               	movwf	i2printf@f+1,c
 10962  00188C  EC48  F006         	call	i2_printf	;wreg free
 10963                           
 10964                           ;main.c: 93: } else if (C == 1) {
 10965  001890  D018               	goto	i2l6623
 10966  001892                     i2l6615:
 10967  001892  0100               	movlb	0	; () banked
 10968  001894  0594               	decf	simulate@C& (0+255),w,b
 10969  001896  0100               	movlb	0	; () banked
 10970  001898  1195               	iorwf	(simulate@C+1)& (0+255),w,b
 10971  00189A  A4D8               	btfss	status,2,c
 10972  00189C  D00C               	goto	i2l6621
 10973                           
 10974                           ; BSR set to: 0
 10975                           ;main.c: 94: portCW[1] = 1;
 10976  00189E  0E00               	movlw	0
 10977  0018A0  0100               	movlb	0	; () banked
 10978  0018A2  6F87               	movwf	(simulate@portCW+3)& (0+255),b
 10979  0018A4  0E01               	movlw	1
 10980  0018A6  6F86               	movwf	(simulate@portCW+2)& (0+255),b
 10981                           
 10982                           ; BSR set to: 0
 10983                           ;main.c: 95: printf("CServoRight         ");
 10984  0018A8  0E6A               	movlw	low STR_7
 10985  0018AA  6E47               	movwf	i2printf@f,c
 10986  0018AC  0EFE               	movlw	high STR_7
 10987  0018AE  6E48               	movwf	i2printf@f+1,c
 10988  0018B0  EC48  F006         	call	i2_printf	;wreg free
 10989                           
 10990                           ;main.c: 96: } else {
 10991  0018B4  D006               	goto	i2l6623
 10992  0018B6                     i2l6621:
 10993                           
 10994                           ;main.c: 97: printf("CServoStays         ");
 10995  0018B6  0E2B               	movlw	low STR_8
 10996  0018B8  6E47               	movwf	i2printf@f,c
 10997  0018BA  0EFE               	movlw	high STR_8
 10998  0018BC  6E48               	movwf	i2printf@f+1,c
 10999  0018BE  EC48  F006         	call	i2_printf	;wreg free
 11000  0018C2                     i2l6623:
 11001                           
 11002                           ;main.c: 98: }
 11003                           ;main.c: 100: lcdInst(0b10000000);;
 11004  0018C2  0E80               	movlw	128
 11005  0018C4  EC8C  F029         	call	i2_lcdInst
 11006                           
 11007                           ;main.c: 101: _delay((unsigned long)((700)*(8000000/4000.0)));
 11008  0018C8  0E08               	movlw	8
 11009  0018CA  0100               	movlb	0	; () banked
 11010  0018CC  6F81               	movwf	(??_simulate+1)& (0+255),b
 11011  0018CE  0E1B               	movlw	27
 11012  0018D0  0100               	movlb	0	; () banked
 11013  0018D2  6F80               	movwf	??_simulate& (0+255),b
 11014  0018D4  0E27               	movlw	39
 11015  0018D6                     i2u872_47:
 11016  0018D6  2EE8               	decfsz	wreg,f,c
 11017  0018D8  D7FE               	bra	i2u872_47
 11018  0018DA  2F80               	decfsz	??_simulate& (0+255),f,b
 11019  0018DC  D7FC               	bra	i2u872_47
 11020  0018DE  2F81               	decfsz	(??_simulate+1)& (0+255),f,b
 11021  0018E0  D7FA               	bra	i2u872_47
 11022                           
 11023                           ;main.c: 103: if (!V9) {
 11024  0018E2  0100               	movlb	0	; () banked
 11025  0018E4  5196               	movf	simulate@V9& (0+255),w,b
 11026  0018E6  0100               	movlb	0	; () banked
 11027  0018E8  1197               	iorwf	(simulate@V9+1)& (0+255),w,b
 11028  0018EA  A4D8               	btfss	status,2,c
 11029  0018EC  D00C               	goto	i2l6633
 11030                           
 11031                           ; BSR set to: 0
 11032                           ;main.c: 104: portCCW[2] = 1;
 11033  0018EE  0E00               	movlw	0
 11034  0018F0  0100               	movlb	0	; () banked
 11035  0018F2  6F8F               	movwf	(simulate@portCCW+5)& (0+255),b
 11036  0018F4  0E01               	movlw	1
 11037  0018F6  6F8E               	movwf	(simulate@portCCW+4)& (0+255),b
 11038                           
 11039                           ; BSR set to: 0
 11040                           ;main.c: 105: printf("9ServoLeft         ");
 11041  0018F8  0EE5               	movlw	low STR_9
 11042  0018FA  6E47               	movwf	i2printf@f,c
 11043  0018FC  0EFE               	movlw	high STR_9
 11044  0018FE  6E48               	movwf	i2printf@f+1,c
 11045  001900  EC48  F006         	call	i2_printf	;wreg free
 11046                           
 11047                           ;main.c: 106: } else if (V9 == 1) {
 11048  001904  D018               	goto	i2l116
 11049  001906                     i2l6633:
 11050  001906  0100               	movlb	0	; () banked
 11051  001908  0596               	decf	simulate@V9& (0+255),w,b
 11052  00190A  0100               	movlb	0	; () banked
 11053  00190C  1197               	iorwf	(simulate@V9+1)& (0+255),w,b
 11054  00190E  A4D8               	btfss	status,2,c
 11055  001910  D00C               	goto	i2l6639
 11056                           
 11057                           ; BSR set to: 0
 11058                           ;main.c: 107: portCW[2] = 1;
 11059  001912  0E00               	movlw	0
 11060  001914  0100               	movlb	0	; () banked
 11061  001916  6F89               	movwf	(simulate@portCW+5)& (0+255),b
 11062  001918  0E01               	movlw	1
 11063  00191A  6F88               	movwf	(simulate@portCW+4)& (0+255),b
 11064                           
 11065                           ; BSR set to: 0
 11066                           ;main.c: 108: printf("9ServoRight         ");
 11067  00191C  0E55               	movlw	low STR_10
 11068  00191E  6E47               	movwf	i2printf@f,c
 11069  001920  0EFE               	movlw	high STR_10
 11070  001922  6E48               	movwf	i2printf@f+1,c
 11071  001924  EC48  F006         	call	i2_printf	;wreg free
 11072                           
 11073                           ;main.c: 109: } else {
 11074  001928  D006               	goto	i2l116
 11075  00192A                     i2l6639:
 11076                           
 11077                           ;main.c: 110: printf("9ServoStays         ");
 11078  00192A  0E16               	movlw	low STR_11
 11079  00192C  6E47               	movwf	i2printf@f,c
 11080  00192E  0EFE               	movlw	high STR_11
 11081  001930  6E48               	movwf	i2printf@f+1,c
 11082  001932  EC48  F006         	call	i2_printf	;wreg free
 11083  001936                     i2l116:
 11084                           
 11085                           ;main.c: 111: }
 11086                           ;main.c: 114: CCW90(portCCW);
 11087  001936  0E8A               	movlw	low simulate@portCCW
 11088  001938  6E71               	movwf	CCW90@port,c
 11089  00193A  0E00               	movlw	high simulate@portCCW
 11090  00193C  6E72               	movwf	CCW90@port+1,c
 11091  00193E  EC76  F028         	call	_CCW90	;wreg free
 11092                           
 11093                           ;main.c: 115: CW90(portCW);
 11094  001942  0E84               	movlw	low simulate@portCW
 11095  001944  6E71               	movwf	CW90@port,c
 11096  001946  0E00               	movlw	high simulate@portCW
 11097  001948  6E72               	movwf	CW90@port+1,c
 11098  00194A  EC47  F028         	call	_CW90	;wreg free
 11099                           
 11100                           ;main.c: 116: _delay((unsigned long)((700)*(8000000/4000.0)));
 11101  00194E  0E08               	movlw	8
 11102  001950  0100               	movlb	0	; () banked
 11103  001952  6F81               	movwf	(??_simulate+1)& (0+255),b
 11104  001954  0E1B               	movlw	27
 11105  001956  0100               	movlb	0	; () banked
 11106  001958  6F80               	movwf	??_simulate& (0+255),b
 11107  00195A  0E27               	movlw	39
 11108  00195C                     i2u873_47:
 11109  00195C  2EE8               	decfsz	wreg,f,c
 11110  00195E  D7FE               	bra	i2u873_47
 11111  001960  2F80               	decfsz	??_simulate& (0+255),f,b
 11112  001962  D7FC               	bra	i2u873_47
 11113  001964  2F81               	decfsz	(??_simulate+1)& (0+255),f,b
 11114  001966  D7FA               	bra	i2u873_47
 11115                           
 11116                           ;main.c: 117: LATC0 = 0;
 11117  001968  908B               	bcf	3979,0,c	;volatile
 11118                           
 11119                           ;main.c: 118: LATC1 = 0;
 11120  00196A  928B               	bcf	3979,1,c	;volatile
 11121                           
 11122                           ;main.c: 119: LATC2 = 0;
 11123  00196C  948B               	bcf	3979,2,c	;volatile
 11124                           
 11125                           ;main.c: 122: if (sorted[0] + sorted[1] + sorted[2] + sorted[3] >= 10) {
 11126  00196E  0100               	movlb	0	; () banked
 11127  001970  51A1               	movf	(simulate@sorted+1)& (0+255),w,b
 11128  001972  C0A0  F080         	movff	simulate@sorted,??_simulate
 11129  001976  0100               	movlb	0	; () banked
 11130  001978  6B81               	clrf	(??_simulate+1)& (0+255),b
 11131  00197A  0100               	movlb	0	; () banked
 11132  00197C  2780               	addwf	??_simulate& (0+255),f,b
 11133  00197E  0E00               	movlw	0
 11134  001980  2381               	addwfc	(??_simulate+1)& (0+255),f,b
 11135  001982  0100               	movlb	0	; () banked
 11136  001984  51A2               	movf	(simulate@sorted+2)& (0+255),w,b
 11137  001986  0100               	movlb	0	; () banked
 11138  001988  2780               	addwf	??_simulate& (0+255),f,b
 11139  00198A  0E00               	movlw	0
 11140  00198C  2381               	addwfc	(??_simulate+1)& (0+255),f,b
 11141  00198E  0100               	movlb	0	; () banked
 11142  001990  51A3               	movf	(simulate@sorted+3)& (0+255),w,b
 11143  001992  0100               	movlb	0	; () banked
 11144  001994  2780               	addwf	??_simulate& (0+255),f,b
 11145  001996  0E00               	movlw	0
 11146  001998  2381               	addwfc	(??_simulate+1)& (0+255),f,b
 11147  00199A  0100               	movlb	0	; () banked
 11148  00199C  BF81               	btfsc	(??_simulate+1)& (0+255),7,b
 11149  00199E  D00D               	goto	i2l6653
 11150  0019A0  0100               	movlb	0	; () banked
 11151  0019A2  5181               	movf	(??_simulate+1)& (0+255),w,b
 11152  0019A4  E105               	bnz	i2u705_40
 11153  0019A6  0E0A               	movlw	10
 11154  0019A8  0100               	movlb	0	; () banked
 11155  0019AA  5D80               	subwf	??_simulate& (0+255),w,b
 11156  0019AC  A0D8               	btfss	status,0,c
 11157  0019AE  D005               	goto	i2l6653
 11158  0019B0                     i2u705_40:
 11159                           
 11160                           ; BSR set to: 0
 11161                           ;main.c: 123: stop = 1;
 11162  0019B0  0E00               	movlw	0
 11163  0019B2  0100               	movlb	0	; () banked
 11164  0019B4  6F91               	movwf	(simulate@stop+1)& (0+255),b
 11165  0019B6  0E01               	movlw	1
 11166  0019B8  6F90               	movwf	simulate@stop& (0+255),b
 11167  0019BA                     i2l6653:
 11168                           
 11169                           ; BSR set to: 0
 11170                           ;main.c: 124: }
 11171                           ;main.c: 125: getTime(time);
 11172  0019BA  0ED9               	movlw	low _time
 11173  0019BC  6E04               	movwf	i2getTime@time,c
 11174  0019BE  0E00               	movlw	high _time
 11175  0019C0  6E05               	movwf	i2getTime@time+1,c
 11176  0019C2  ECBE  F025         	call	i2_getTime	;wreg free
 11177                           
 11178                           ;main.c: 126: now[0] = time[0];
 11179  0019C6  C0D9  F098         	movff	_time,simulate@now
 11180  0019CA  0100               	movlb	0	; () banked
 11181  0019CC  6B99               	clrf	(simulate@now+1)& (0+255),b
 11182                           
 11183                           ; BSR set to: 0
 11184                           ;main.c: 127: now[1] = time[1];
 11185  0019CE  C0DA  F09A         	movff	_time+1,simulate@now+2
 11186  0019D2  0100               	movlb	0	; () banked
 11187  0019D4  6B9B               	clrf	(simulate@now+3)& (0+255),b
 11188                           
 11189                           ; BSR set to: 0
 11190                           ;main.c: 128: lcdInst(0b10000000);;
 11191  0019D6  0E80               	movlw	128
 11192  0019D8  EC8C  F029         	call	i2_lcdInst
 11193                           
 11194                           ;main.c: 129: printf("start %02x:%02x     ", start[1], start[0]);
 11195  0019DC  0E94               	movlw	low STR_12
 11196  0019DE  6E47               	movwf	i2printf@f,c
 11197  0019E0  0EFE               	movlw	high STR_12
 11198  0019E2  6E48               	movwf	i2printf@f+1,c
 11199  0019E4  C09E  F049         	movff	simulate@start+2,?i2_printf+2
 11200  0019E8  C09F  F04A         	movff	simulate@start+3,?i2_printf+3
 11201  0019EC  C09C  F04B         	movff	simulate@start,?i2_printf+4
 11202  0019F0  C09D  F04C         	movff	simulate@start+1,?i2_printf+5
 11203  0019F4  EC48  F006         	call	i2_printf	;wreg free
 11204                           
 11205                           ;main.c: 130: __lcd_newline();
 11206  0019F8  ECB0  F029         	call	i2___lcd_newline	;wreg free
 11207                           
 11208                           ;main.c: 131: printf("now %02x:%02x       ", now[1], now[0]);
 11209  0019FC  0E7F               	movlw	low STR_13
 11210  0019FE  6E47               	movwf	i2printf@f,c
 11211  001A00  0EFE               	movlw	high STR_13
 11212  001A02  6E48               	movwf	i2printf@f+1,c
 11213  001A04  C09A  F049         	movff	simulate@now+2,?i2_printf+2
 11214  001A08  C09B  F04A         	movff	simulate@now+3,?i2_printf+3
 11215  001A0C  C098  F04B         	movff	simulate@now,?i2_printf+4
 11216  001A10  C099  F04C         	movff	simulate@now+1,?i2_printf+5
 11217  001A14  EC48  F006         	call	i2_printf	;wreg free
 11218                           
 11219                           ;main.c: 132: _delay((unsigned long)((1500)*(8000000/4000.0)));
 11220  001A18  0E10               	movlw	16
 11221  001A1A  0100               	movlb	0	; () banked
 11222  001A1C  6F81               	movwf	(??_simulate+1)& (0+255),b
 11223  001A1E  0E39               	movlw	57
 11224  001A20  0100               	movlb	0	; () banked
 11225  001A22  6F80               	movwf	??_simulate& (0+255),b
 11226  001A24  0E0D               	movlw	13
 11227  001A26                     i2u874_47:
 11228  001A26  2EE8               	decfsz	wreg,f,c
 11229  001A28  D7FE               	bra	i2u874_47
 11230  001A2A  2F80               	decfsz	??_simulate& (0+255),f,b
 11231  001A2C  D7FC               	bra	i2u874_47
 11232  001A2E  2F81               	decfsz	(??_simulate+1)& (0+255),f,b
 11233  001A30  D7FA               	bra	i2u874_47
 11234  001A32  D000               	nop2	
 11235                           
 11236                           ;main.c: 133: period = (HexDecToDec2(now[1]) - HexDecToDec2(start[1]))*60 + HexDecToDec2
      +                          (now[0]) - HexDecToDec2(start[0]);
 11237  001A34  C09A  F015         	movff	simulate@now+2,HexDecToDec2@hex
 11238  001A38  C09B  F016         	movff	simulate@now+3,HexDecToDec2@hex+1
 11239  001A3C  EC6F  F027         	call	_HexDecToDec2	;wreg free
 11240  001A40  C015  F080         	movff	?_HexDecToDec2,??_simulate
 11241  001A44  C016  F081         	movff	?_HexDecToDec2+1,??_simulate+1
 11242  001A48  C09E  F015         	movff	simulate@start+2,HexDecToDec2@hex
 11243  001A4C  C09F  F016         	movff	simulate@start+3,HexDecToDec2@hex+1
 11244  001A50  EC6F  F027         	call	_HexDecToDec2	;wreg free
 11245  001A54  1E15               	comf	?_HexDecToDec2,f,c
 11246  001A56  1E16               	comf	?_HexDecToDec2+1,f,c
 11247  001A58  4A15               	infsnz	?_HexDecToDec2,f,c
 11248  001A5A  2A16               	incf	?_HexDecToDec2+1,f,c
 11249  001A5C  5015               	movf	?_HexDecToDec2,w,c
 11250  001A5E  0100               	movlb	0	; () banked
 11251  001A60  2580               	addwf	??_simulate& (0+255),w,b
 11252  001A62  0100               	movlb	0	; () banked
 11253  001A64  6F82               	movwf	_simulate$1657& (0+255),b
 11254  001A66  5016               	movf	?_HexDecToDec2+1,w,c
 11255  001A68  0100               	movlb	0	; () banked
 11256  001A6A  2181               	addwfc	(??_simulate+1)& (0+255),w,b
 11257  001A6C  0100               	movlb	0	; () banked
 11258  001A6E  6F83               	movwf	(_simulate$1657+1)& (0+255),b
 11259                           
 11260                           ; BSR set to: 0
 11261                           ;main.c: 133: period = (HexDecToDec2(now[1]) - HexDecToDec2(start[1]))*60 + HexDecToDec2
      +                          (now[0]) - HexDecToDec2(start[0]);
 11262  001A70  C082  F00F         	movff	_simulate$1657,i2___wmul@multiplier
 11263  001A74  C083  F010         	movff	_simulate$1657+1,i2___wmul@multiplier+1
 11264  001A78  0E00               	movlw	0
 11265  001A7A  6E12               	movwf	i2___wmul@multiplicand+1,c
 11266  001A7C  0E3C               	movlw	60
 11267  001A7E  6E11               	movwf	i2___wmul@multiplicand,c
 11268  001A80  ECDD  F028         	call	i2___wmul	;wreg free
 11269  001A84  C00F  F080         	movff	?i2___wmul,??_simulate
 11270  001A88  C010  F081         	movff	?i2___wmul+1,??_simulate+1
 11271  001A8C  C098  F015         	movff	simulate@now,HexDecToDec2@hex
 11272  001A90  C099  F016         	movff	simulate@now+1,HexDecToDec2@hex+1
 11273  001A94  EC6F  F027         	call	_HexDecToDec2	;wreg free
 11274  001A98  5015               	movf	?_HexDecToDec2,w,c
 11275  001A9A  0100               	movlb	0	; () banked
 11276  001A9C  2780               	addwf	??_simulate& (0+255),f,b
 11277  001A9E  5016               	movf	?_HexDecToDec2+1,w,c
 11278  001AA0  0100               	movlb	0	; () banked
 11279  001AA2  2381               	addwfc	(??_simulate+1)& (0+255),f,b
 11280  001AA4  C09C  F015         	movff	simulate@start,HexDecToDec2@hex
 11281  001AA8  C09D  F016         	movff	simulate@start+1,HexDecToDec2@hex+1
 11282  001AAC  EC6F  F027         	call	_HexDecToDec2	;wreg free
 11283  001AB0  1E15               	comf	?_HexDecToDec2,f,c
 11284  001AB2  1E16               	comf	?_HexDecToDec2+1,f,c
 11285  001AB4  4A15               	infsnz	?_HexDecToDec2,f,c
 11286  001AB6  2A16               	incf	?_HexDecToDec2+1,f,c
 11287  001AB8  5015               	movf	?_HexDecToDec2,w,c
 11288  001ABA  0100               	movlb	0	; () banked
 11289  001ABC  2580               	addwf	??_simulate& (0+255),w,b
 11290  001ABE  0100               	movlb	0	; () banked
 11291  001AC0  6FA4               	movwf	simulate@period& (0+255),b
 11292  001AC2  5016               	movf	?_HexDecToDec2+1,w,c
 11293  001AC4  0100               	movlb	0	; () banked
 11294  001AC6  2181               	addwfc	(??_simulate+1)& (0+255),w,b
 11295  001AC8  0100               	movlb	0	; () banked
 11296  001ACA  6FA5               	movwf	(simulate@period+1)& (0+255),b
 11297                           
 11298                           ; BSR set to: 0
 11299                           ;main.c: 134: lcdInst(0b10000000);;
 11300  001ACC  0E80               	movlw	128
 11301  001ACE  EC8C  F029         	call	i2_lcdInst
 11302                           
 11303                           ;main.c: 135: printf("Period: %u      ", period);
 11304  001AD2  0E66               	movlw	low STR_14
 11305  001AD4  6E47               	movwf	i2printf@f,c
 11306  001AD6  0EFF               	movlw	high STR_14
 11307  001AD8  6E48               	movwf	i2printf@f+1,c
 11308  001ADA  C0A4  F049         	movff	simulate@period,?i2_printf+2
 11309  001ADE  C0A5  F04A         	movff	simulate@period+1,?i2_printf+3
 11310  001AE2  EC48  F006         	call	i2_printf	;wreg free
 11311                           
 11312                           ;main.c: 136: _delay((unsigned long)((700)*(8000000/4000.0)));
 11313  001AE6  0E08               	movlw	8
 11314  001AE8  0100               	movlb	0	; () banked
 11315  001AEA  6F81               	movwf	(??_simulate+1)& (0+255),b
 11316  001AEC  0E1B               	movlw	27
 11317  001AEE  0100               	movlb	0	; () banked
 11318  001AF0  6F80               	movwf	??_simulate& (0+255),b
 11319  001AF2  0E27               	movlw	39
 11320  001AF4                     i2u875_47:
 11321  001AF4  2EE8               	decfsz	wreg,f,c
 11322  001AF6  D7FE               	bra	i2u875_47
 11323  001AF8  2F80               	decfsz	??_simulate& (0+255),f,b
 11324  001AFA  D7FC               	bra	i2u875_47
 11325  001AFC  2F81               	decfsz	(??_simulate+1)& (0+255),f,b
 11326  001AFE  D7FA               	bra	i2u875_47
 11327                           
 11328                           ;main.c: 137: if (period > 20) {
 11329  001B00  0100               	movlb	0	; () banked
 11330  001B02  51A5               	movf	(simulate@period+1)& (0+255),w,b
 11331  001B04  E105               	bnz	i2u706_40
 11332  001B06  0E15               	movlw	21
 11333  001B08  0100               	movlb	0	; () banked
 11334  001B0A  5DA4               	subwf	simulate@period& (0+255),w,b
 11335  001B0C  A0D8               	btfss	status,0,c
 11336  001B0E  D005               	goto	i2l6683
 11337  001B10                     i2u706_40:
 11338                           
 11339                           ; BSR set to: 0
 11340                           ;main.c: 138: stop = 1;
 11341  001B10  0E00               	movlw	0
 11342  001B12  0100               	movlb	0	; () banked
 11343  001B14  6F91               	movwf	(simulate@stop+1)& (0+255),b
 11344  001B16  0E01               	movlw	1
 11345  001B18  6F90               	movwf	simulate@stop& (0+255),b
 11346  001B1A                     i2l6683:
 11347                           
 11348                           ; BSR set to: 0
 11349  001B1A  0100               	movlb	0	; () banked
 11350  001B1C  5190               	movf	simulate@stop& (0+255),w,b
 11351  001B1E  0100               	movlb	0	; () banked
 11352  001B20  1191               	iorwf	(simulate@stop+1)& (0+255),w,b
 11353  001B22  B4D8               	btfsc	status,2,c
 11354  001B24  D61D               	goto	i2l6577
 11355                           
 11356                           ; BSR set to: 0
 11357                           ;main.c: 139: }
 11358                           ;main.c: 140: }
 11359                           ;main.c: 142: mode = 2;
 11360                           
 11361                           ; BSR set to: 0
 11362  001B26  0E00               	movlw	0
 11363  001B28  0100               	movlb	0	; () banked
 11364  001B2A  6FD7               	movwf	(_mode+1)& (0+255),b
 11365  001B2C  0E02               	movlw	2
 11366  001B2E  6FD6               	movwf	_mode& (0+255),b
 11367                           
 11368                           ; BSR set to: 0
 11369                           ;main.c: 143: stopMoving(0);
 11370  001B30  0E00               	movlw	0
 11371  001B32  EC21  F027         	call	_stopMoving
 11372                           
 11373                           ;main.c: 144: lcdInst(0b10000000);;
 11374  001B36  0E80               	movlw	128
 11375  001B38  EC8C  F029         	call	i2_lcdInst
 11376                           
 11377                           ;main.c: 145: printf("Sorting Complete          ");
 11378  001B3C  0E77               	movlw	low STR_15
 11379  001B3E  6E47               	movwf	i2printf@f,c
 11380  001B40  0EFC               	movlw	high STR_15
 11381  001B42  6E48               	movwf	i2printf@f+1,c
 11382  001B44  EC48  F006         	call	i2_printf	;wreg free
 11383                           
 11384                           ;main.c: 146: _delay((unsigned long)((700)*(8000000/4000.0)));
 11385  001B48  0E08               	movlw	8
 11386  001B4A  0100               	movlb	0	; () banked
 11387  001B4C  6F81               	movwf	(??_simulate+1)& (0+255),b
 11388  001B4E  0E1B               	movlw	27
 11389  001B50  0100               	movlb	0	; () banked
 11390  001B52  6F80               	movwf	??_simulate& (0+255),b
 11391  001B54  0E27               	movlw	39
 11392  001B56                     i2u876_47:
 11393  001B56  2EE8               	decfsz	wreg,f,c
 11394  001B58  D7FE               	bra	i2u876_47
 11395  001B5A  2F80               	decfsz	??_simulate& (0+255),f,b
 11396  001B5C  D7FC               	bra	i2u876_47
 11397  001B5E  2F81               	decfsz	(??_simulate+1)& (0+255),f,b
 11398  001B60  D7FA               	bra	i2u876_47
 11399                           
 11400                           ;main.c: 147: showInfo(period, sorted);
 11401  001B62  C0A4  F071         	movff	simulate@period,showInfo@time
 11402  001B66  C0A5  F072         	movff	simulate@period+1,showInfo@time+1
 11403  001B6A  0EA0               	movlw	low simulate@sorted
 11404  001B6C  6E73               	movwf	showInfo@sorted,c
 11405  001B6E  0E00               	movlw	high simulate@sorted
 11406  001B70  6E74               	movwf	showInfo@sorted+1,c
 11407  001B72  ECC7  F015         	call	_showInfo	;wreg free
 11408                           
 11409                           ;main.c: 148: WriteRun(sorted, period);
 11410  001B76  0EA0               	movlw	low simulate@sorted
 11411  001B78  6E15               	movwf	WriteRun@sorted,c
 11412  001B7A  0E00               	movlw	high simulate@sorted
 11413  001B7C  6E16               	movwf	WriteRun@sorted+1,c
 11414  001B7E  C0A4  F017         	movff	simulate@period,WriteRun@time
 11415  001B82  C0A5  F018         	movff	simulate@period+1,WriteRun@time+1
 11416  001B86  EC41  F019         	call	_WriteRun	;wreg free
 11417                           
 11418                           ;main.c: 149: mode = 0;
 11419  001B8A  0E00               	movlw	0
 11420  001B8C  0100               	movlb	0	; () banked
 11421  001B8E  6FD7               	movwf	(_mode+1)& (0+255),b
 11422  001B90  0E00               	movlw	0
 11423  001B92  6FD6               	movwf	_mode& (0+255),b
 11424                           
 11425                           ; BSR set to: 0
 11426  001B94  0012               	return		;funcret
 11427  001B96                     __end_of_simulate:
 11428                           	opt stack 0
 11429                           pclatu	equ	0xFFB
 11430                           pclath	equ	0xFFA
 11431                           tblptru	equ	0xFF8
 11432                           tblptrh	equ	0xFF7
 11433                           tblptrl	equ	0xFF6
 11434                           tablat	equ	0xFF5
 11435                           prodh	equ	0xFF4
 11436                           prodl	equ	0xFF3
 11437                           intcon	equ	0xFF2
 11438                           intcon3	equ	0xFF0
 11439                           postinc0	equ	0xFEE
 11440                           fsr0h	equ	0xFEA
 11441                           fsr0l	equ	0xFE9
 11442                           wreg	equ	0xFE8
 11443                           plusw1	equ	0xFE3
 11444                           fsr1h	equ	0xFE2
 11445                           fsr1l	equ	0xFE1
 11446                           indf2	equ	0xFDF
 11447                           postinc2	equ	0xFDE
 11448                           postdec2	equ	0xFDD
 11449                           plusw2	equ	0xFDB
 11450                           fsr2h	equ	0xFDA
 11451                           fsr2l	equ	0xFD9
 11452                           status	equ	0xFD8
 11453                           
 11454 ;; *************** function i2_getTime *****************
 11455 ;; Defined at:
 11456 ;;		line 77 in file "modules.c"
 11457 ;; Parameters:    Size  Location     Type
 11458 ;;  time            2    3[COMRAM] PTR unsigned char 
 11459 ;;		 -> time(7), 
 11460 ;; Auto vars:     Size  Location     Type
 11461 ;;  getTime         1    5[COMRAM] unsigned char 
 11462 ;; Return value:  Size  Location     Type
 11463 ;;                  1    wreg      void 
 11464 ;; Registers used:
 11465 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11466 ;; Tracked objects:
 11467 ;;		On entry : 0/0
 11468 ;;		On exit  : 0/0
 11469 ;;		Unchanged: 0/0
 11470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11471 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11472 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11474 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11475 ;;Total ram usage:        3 bytes
 11476 ;; Hardware stack levels used:    1
 11477 ;; Hardware stack levels required when called:    2
 11478 ;; This function calls:
 11479 ;;		i2_I2C_Master_Read
 11480 ;;		i2_I2C_Master_Start
 11481 ;;		i2_I2C_Master_Stop
 11482 ;;		i2_I2C_Master_Write
 11483 ;; This function is called by:
 11484 ;;		_simulate
 11485 ;; This function uses a non-reentrant model
 11486 ;;
 11487                           
 11488                           	psect	text38
 11489  004B7C                     __ptext38:
 11490                           	opt stack 0
 11491  004B7C                     i2_getTime:
 11492                           	opt stack 21
 11493                           
 11494                           ;modules.c: 78: (INTCONbits.GIE = 0);
 11495                           
 11496                           ; BSR set to: 0
 11497                           ;incstack = 0
 11498  004B7C  9EF2               	bcf	intcon,7,c	;volatile
 11499                           
 11500                           ;modules.c: 82: I2C_Master_Start();
 11501  004B7E  ECAC  F029         	call	i2_I2C_Master_Start	;wreg free
 11502                           
 11503                           ;modules.c: 83: I2C_Master_Write(0b11010000);
 11504  004B82  0E00               	movlw	0
 11505  004B84  6E03               	movwf	i2I2C_Master_Write@d+1,c
 11506  004B86  0ED0               	movlw	208
 11507  004B88  6E02               	movwf	i2I2C_Master_Write@d,c
 11508  004B8A  EC97  F029         	call	i2_I2C_Master_Write	;wreg free
 11509                           
 11510                           ;modules.c: 84: I2C_Master_Write(0x00);
 11511  004B8E  0E00               	movlw	0
 11512  004B90  6E03               	movwf	i2I2C_Master_Write@d+1,c
 11513  004B92  0E00               	movlw	0
 11514  004B94  6E02               	movwf	i2I2C_Master_Write@d,c
 11515  004B96  EC97  F029         	call	i2_I2C_Master_Write	;wreg free
 11516                           
 11517                           ;modules.c: 85: I2C_Master_Stop();
 11518  004B9A  ECA8  F029         	call	i2_I2C_Master_Stop	;wreg free
 11519                           
 11520                           ;modules.c: 88: I2C_Master_Start();
 11521  004B9E  ECAC  F029         	call	i2_I2C_Master_Start	;wreg free
 11522                           
 11523                           ;modules.c: 89: I2C_Master_Write(0b11010001);
 11524  004BA2  0E00               	movlw	0
 11525  004BA4  6E03               	movwf	i2I2C_Master_Write@d+1,c
 11526  004BA6  0ED1               	movlw	209
 11527  004BA8  6E02               	movwf	i2I2C_Master_Write@d,c
 11528  004BAA  EC97  F029         	call	i2_I2C_Master_Write	;wreg free
 11529                           
 11530                           ;modules.c: 90: for (unsigned char i = 0; i < 0x06; i++) {
 11531  004BAE  0E00               	movlw	0
 11532  004BB0  6E06               	movwf	i2getTime@i,c
 11533  004BB2                     i2l6527:
 11534  004BB2  0E05               	movlw	5
 11535  004BB4  6406               	cpfsgt	i2getTime@i,c
 11536  004BB6  D001               	goto	i2l6531
 11537  004BB8  D00E               	goto	i2l6537
 11538  004BBA                     i2l6531:
 11539                           
 11540                           ;modules.c: 91: time[i] = I2C_Master_Read(1);
 11541  004BBA  5006               	movf	i2getTime@i,w,c
 11542  004BBC  0D01               	mullw	1
 11543  004BBE  50F3               	movf	prodl,w,c
 11544  004BC0  2404               	addwf	i2getTime@time,w,c
 11545  004BC2  6ED9               	movwf	fsr2l,c
 11546  004BC4  50F4               	movf	prodh,w,c
 11547  004BC6  2005               	addwfc	i2getTime@time+1,w,c
 11548  004BC8  6EDA               	movwf	fsr2h,c
 11549  004BCA  0E01               	movlw	1
 11550  004BCC  ECB7  F028         	call	i2_I2C_Master_Read
 11551  004BD0  6EDF               	movwf	indf2,c
 11552  004BD2  2A06               	incf	i2getTime@i,f,c
 11553  004BD4  D7EE               	goto	i2l6527
 11554  004BD6                     i2l6537:
 11555                           
 11556                           ;modules.c: 92: }
 11557                           ;modules.c: 93: time[6] = I2C_Master_Read(0);
 11558  004BD6  EE20 F006          	lfsr	2,6
 11559  004BDA  5004               	movf	i2getTime@time,w,c
 11560  004BDC  26D9               	addwf	fsr2l,f,c
 11561  004BDE  5005               	movf	i2getTime@time+1,w,c
 11562  004BE0  22DA               	addwfc	fsr2h,f,c
 11563  004BE2  0E00               	movlw	0
 11564  004BE4  ECB7  F028         	call	i2_I2C_Master_Read
 11565  004BE8  6EDF               	movwf	indf2,c
 11566                           
 11567                           ;modules.c: 94: I2C_Master_Stop();
 11568  004BEA  ECA8  F029         	call	i2_I2C_Master_Stop	;wreg free
 11569                           
 11570                           ;modules.c: 95: (INTCONbits.GIE = 1);
 11571  004BEE  8EF2               	bsf	intcon,7,c	;volatile
 11572  004BF0  0012               	return		;funcret
 11573  004BF2                     __end_ofi2_getTime:
 11574                           	opt stack 0
 11575                           pclatu	equ	0xFFB
 11576                           pclath	equ	0xFFA
 11577                           tblptru	equ	0xFF8
 11578                           tblptrh	equ	0xFF7
 11579                           tblptrl	equ	0xFF6
 11580                           tablat	equ	0xFF5
 11581                           prodh	equ	0xFF4
 11582                           prodl	equ	0xFF3
 11583                           intcon	equ	0xFF2
 11584                           intcon3	equ	0xFF0
 11585                           postinc0	equ	0xFEE
 11586                           fsr0h	equ	0xFEA
 11587                           fsr0l	equ	0xFE9
 11588                           wreg	equ	0xFE8
 11589                           plusw1	equ	0xFE3
 11590                           fsr1h	equ	0xFE2
 11591                           fsr1l	equ	0xFE1
 11592                           indf2	equ	0xFDF
 11593                           postinc2	equ	0xFDE
 11594                           postdec2	equ	0xFDD
 11595                           plusw2	equ	0xFDB
 11596                           fsr2h	equ	0xFDA
 11597                           fsr2l	equ	0xFD9
 11598                           status	equ	0xFD8
 11599                           
 11600 ;; *************** function i2_I2C_Master_Write *****************
 11601 ;; Defined at:
 11602 ;;		line 42 in file "I2C.c"
 11603 ;; Parameters:    Size  Location     Type
 11604 ;;  d               2    1[COMRAM] unsigned int 
 11605 ;; Auto vars:     Size  Location     Type
 11606 ;;		None
 11607 ;; Return value:  Size  Location     Type
 11608 ;;                  1    wreg      void 
 11609 ;; Registers used:
 11610 ;;		wreg, status,2, status,0, cstack
 11611 ;; Tracked objects:
 11612 ;;		On entry : 0/0
 11613 ;;		On exit  : 0/0
 11614 ;;		Unchanged: 0/0
 11615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11616 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11619 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11620 ;;Total ram usage:        2 bytes
 11621 ;; Hardware stack levels used:    1
 11622 ;; Hardware stack levels required when called:    1
 11623 ;; This function calls:
 11624 ;;		i2_I2C_Master_Wait
 11625 ;; This function is called by:
 11626 ;;		i2_getTime
 11627 ;; This function uses a non-reentrant model
 11628 ;;
 11629                           
 11630                           	psect	text39
 11631  00532E                     __ptext39:
 11632                           	opt stack 0
 11633  00532E                     i2_I2C_Master_Write:
 11634                           	opt stack 21
 11635                           
 11636                           ;I2C.c: 43: I2C_Master_Wait();
 11637                           
 11638                           ;incstack = 0
 11639  00532E  EC6D  F029         	call	i2_I2C_Master_Wait	;wreg free
 11640                           
 11641                           ;I2C.c: 44: SSPBUF = d;
 11642  005332  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 11643  005336  0012               	return		;funcret
 11644  005338                     __end_ofi2_I2C_Master_Write:
 11645                           	opt stack 0
 11646                           pclatu	equ	0xFFB
 11647                           pclath	equ	0xFFA
 11648                           tblptru	equ	0xFF8
 11649                           tblptrh	equ	0xFF7
 11650                           tblptrl	equ	0xFF6
 11651                           tablat	equ	0xFF5
 11652                           prodh	equ	0xFF4
 11653                           prodl	equ	0xFF3
 11654                           intcon	equ	0xFF2
 11655                           intcon3	equ	0xFF0
 11656                           postinc0	equ	0xFEE
 11657                           fsr0h	equ	0xFEA
 11658                           fsr0l	equ	0xFE9
 11659                           wreg	equ	0xFE8
 11660                           plusw1	equ	0xFE3
 11661                           fsr1h	equ	0xFE2
 11662                           fsr1l	equ	0xFE1
 11663                           indf2	equ	0xFDF
 11664                           postinc2	equ	0xFDE
 11665                           postdec2	equ	0xFDD
 11666                           plusw2	equ	0xFDB
 11667                           fsr2h	equ	0xFDA
 11668                           fsr2l	equ	0xFD9
 11669                           status	equ	0xFD8
 11670                           
 11671 ;; *************** function i2_I2C_Master_Stop *****************
 11672 ;; Defined at:
 11673 ;;		line 37 in file "I2C.c"
 11674 ;; Parameters:    Size  Location     Type
 11675 ;;		None
 11676 ;; Auto vars:     Size  Location     Type
 11677 ;;		None
 11678 ;; Return value:  Size  Location     Type
 11679 ;;                  1    wreg      void 
 11680 ;; Registers used:
 11681 ;;		wreg, status,2, status,0, cstack
 11682 ;; Tracked objects:
 11683 ;;		On entry : 0/0
 11684 ;;		On exit  : 0/0
 11685 ;;		Unchanged: 0/0
 11686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11691 ;;Total ram usage:        0 bytes
 11692 ;; Hardware stack levels used:    1
 11693 ;; Hardware stack levels required when called:    1
 11694 ;; This function calls:
 11695 ;;		i2_I2C_Master_Wait
 11696 ;; This function is called by:
 11697 ;;		i2_getTime
 11698 ;; This function uses a non-reentrant model
 11699 ;;
 11700                           
 11701                           	psect	text40
 11702  005350                     __ptext40:
 11703                           	opt stack 0
 11704  005350                     i2_I2C_Master_Stop:
 11705                           	opt stack 21
 11706                           
 11707                           ;I2C.c: 38: I2C_Master_Wait();
 11708                           
 11709                           ;incstack = 0
 11710  005350  EC6D  F029         	call	i2_I2C_Master_Wait	;wreg free
 11711                           
 11712                           ;I2C.c: 39: PEN = 1;
 11713  005354  84C5               	bsf	4037,2,c	;volatile
 11714  005356  0012               	return		;funcret
 11715  005358                     __end_ofi2_I2C_Master_Stop:
 11716                           	opt stack 0
 11717                           pclatu	equ	0xFFB
 11718                           pclath	equ	0xFFA
 11719                           tblptru	equ	0xFF8
 11720                           tblptrh	equ	0xFF7
 11721                           tblptrl	equ	0xFF6
 11722                           tablat	equ	0xFF5
 11723                           prodh	equ	0xFF4
 11724                           prodl	equ	0xFF3
 11725                           intcon	equ	0xFF2
 11726                           intcon3	equ	0xFF0
 11727                           postinc0	equ	0xFEE
 11728                           fsr0h	equ	0xFEA
 11729                           fsr0l	equ	0xFE9
 11730                           wreg	equ	0xFE8
 11731                           plusw1	equ	0xFE3
 11732                           fsr1h	equ	0xFE2
 11733                           fsr1l	equ	0xFE1
 11734                           indf2	equ	0xFDF
 11735                           postinc2	equ	0xFDE
 11736                           postdec2	equ	0xFDD
 11737                           plusw2	equ	0xFDB
 11738                           fsr2h	equ	0xFDA
 11739                           fsr2l	equ	0xFD9
 11740                           status	equ	0xFD8
 11741                           
 11742 ;; *************** function i2_I2C_Master_Start *****************
 11743 ;; Defined at:
 11744 ;;		line 27 in file "I2C.c"
 11745 ;; Parameters:    Size  Location     Type
 11746 ;;		None
 11747 ;; Auto vars:     Size  Location     Type
 11748 ;;		None
 11749 ;; Return value:  Size  Location     Type
 11750 ;;                  1    wreg      void 
 11751 ;; Registers used:
 11752 ;;		wreg, status,2, status,0, cstack
 11753 ;; Tracked objects:
 11754 ;;		On entry : 0/0
 11755 ;;		On exit  : 0/0
 11756 ;;		Unchanged: 0/0
 11757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11761 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11762 ;;Total ram usage:        0 bytes
 11763 ;; Hardware stack levels used:    1
 11764 ;; Hardware stack levels required when called:    1
 11765 ;; This function calls:
 11766 ;;		i2_I2C_Master_Wait
 11767 ;; This function is called by:
 11768 ;;		i2_getTime
 11769 ;; This function uses a non-reentrant model
 11770 ;;
 11771                           
 11772                           	psect	text41
 11773  005358                     __ptext41:
 11774                           	opt stack 0
 11775  005358                     i2_I2C_Master_Start:
 11776                           	opt stack 21
 11777                           
 11778                           ;I2C.c: 28: I2C_Master_Wait();
 11779                           
 11780                           ;incstack = 0
 11781  005358  EC6D  F029         	call	i2_I2C_Master_Wait	;wreg free
 11782                           
 11783                           ;I2C.c: 29: SEN = 1;
 11784  00535C  80C5               	bsf	4037,0,c	;volatile
 11785  00535E  0012               	return		;funcret
 11786  005360                     __end_ofi2_I2C_Master_Start:
 11787                           	opt stack 0
 11788                           pclatu	equ	0xFFB
 11789                           pclath	equ	0xFFA
 11790                           tblptru	equ	0xFF8
 11791                           tblptrh	equ	0xFF7
 11792                           tblptrl	equ	0xFF6
 11793                           tablat	equ	0xFF5
 11794                           prodh	equ	0xFF4
 11795                           prodl	equ	0xFF3
 11796                           intcon	equ	0xFF2
 11797                           intcon3	equ	0xFF0
 11798                           postinc0	equ	0xFEE
 11799                           fsr0h	equ	0xFEA
 11800                           fsr0l	equ	0xFE9
 11801                           wreg	equ	0xFE8
 11802                           plusw1	equ	0xFE3
 11803                           fsr1h	equ	0xFE2
 11804                           fsr1l	equ	0xFE1
 11805                           indf2	equ	0xFDF
 11806                           postinc2	equ	0xFDE
 11807                           postdec2	equ	0xFDD
 11808                           plusw2	equ	0xFDB
 11809                           fsr2h	equ	0xFDA
 11810                           fsr2l	equ	0xFD9
 11811                           status	equ	0xFD8
 11812                           
 11813 ;; *************** function i2_I2C_Master_Read *****************
 11814 ;; Defined at:
 11815 ;;		line 47 in file "I2C.c"
 11816 ;; Parameters:    Size  Location     Type
 11817 ;;  a               1    wreg     unsigned char 
 11818 ;; Auto vars:     Size  Location     Type
 11819 ;;  a               1    1[COMRAM] unsigned char 
 11820 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 11821 ;; Return value:  Size  Location     Type
 11822 ;;                  1    wreg      unsigned char 
 11823 ;; Registers used:
 11824 ;;		wreg, status,2, status,0, cstack
 11825 ;; Tracked objects:
 11826 ;;		On entry : 0/0
 11827 ;;		On exit  : 0/0
 11828 ;;		Unchanged: 0/0
 11829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11831 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11833 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11834 ;;Total ram usage:        2 bytes
 11835 ;; Hardware stack levels used:    1
 11836 ;; Hardware stack levels required when called:    1
 11837 ;; This function calls:
 11838 ;;		i2_I2C_Master_Wait
 11839 ;; This function is called by:
 11840 ;;		i2_getTime
 11841 ;; This function uses a non-reentrant model
 11842 ;;
 11843                           
 11844                           	psect	text42
 11845  00516E                     __ptext42:
 11846                           	opt stack 0
 11847  00516E                     i2_I2C_Master_Read:
 11848                           	opt stack 21
 11849                           
 11850                           ;incstack = 0
 11851                           ;i2I2C_Master_Read@a stored from wreg
 11852  00516E  6E02               	movwf	i2I2C_Master_Read@a,c
 11853                           
 11854                           ;I2C.c: 48: unsigned char temp;
 11855                           ;I2C.c: 49: I2C_Master_Wait();
 11856  005170  EC6D  F029         	call	i2_I2C_Master_Wait	;wreg free
 11857                           
 11858                           ;I2C.c: 50: RCEN = 1;
 11859  005174  86C5               	bsf	4037,3,c	;volatile
 11860                           
 11861                           ;I2C.c: 51: I2C_Master_Wait();
 11862  005176  EC6D  F029         	call	i2_I2C_Master_Wait	;wreg free
 11863                           
 11864                           ;I2C.c: 52: temp = SSPBUF;
 11865  00517A  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 11866                           
 11867                           ;I2C.c: 53: I2C_Master_Wait();
 11868  00517E  EC6D  F029         	call	i2_I2C_Master_Wait	;wreg free
 11869                           
 11870                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
 11871  005182  5002               	movf	i2I2C_Master_Read@a,w,c
 11872  005184  A4D8               	btfss	status,2,c
 11873  005186  D002               	goto	i2u628_40
 11874  005188  8AC5               	bsf	4037,5,c	;volatile
 11875  00518A  D001               	goto	i2l5855
 11876  00518C                     i2u628_40:
 11877  00518C  9AC5               	bcf	4037,5,c	;volatile
 11878  00518E                     i2l5855:
 11879                           
 11880                           ;I2C.c: 55: ACKEN = 1;
 11881  00518E  88C5               	bsf	4037,4,c	;volatile
 11882                           
 11883                           ;I2C.c: 56: return temp;
 11884  005190  5003               	movf	i2I2C_Master_Read@temp,w,c
 11885  005192  0012               	return	
 11886  005194                     __end_ofi2_I2C_Master_Read:
 11887                           	opt stack 0
 11888                           pclatu	equ	0xFFB
 11889                           pclath	equ	0xFFA
 11890                           tblptru	equ	0xFF8
 11891                           tblptrh	equ	0xFF7
 11892                           tblptrl	equ	0xFF6
 11893                           tablat	equ	0xFF5
 11894                           prodh	equ	0xFF4
 11895                           prodl	equ	0xFF3
 11896                           intcon	equ	0xFF2
 11897                           intcon3	equ	0xFF0
 11898                           postinc0	equ	0xFEE
 11899                           fsr0h	equ	0xFEA
 11900                           fsr0l	equ	0xFE9
 11901                           wreg	equ	0xFE8
 11902                           plusw1	equ	0xFE3
 11903                           fsr1h	equ	0xFE2
 11904                           fsr1l	equ	0xFE1
 11905                           indf2	equ	0xFDF
 11906                           postinc2	equ	0xFDE
 11907                           postdec2	equ	0xFDD
 11908                           plusw2	equ	0xFDB
 11909                           fsr2h	equ	0xFDA
 11910                           fsr2l	equ	0xFD9
 11911                           status	equ	0xFD8
 11912                           
 11913 ;; *************** function i2_I2C_Master_Wait *****************
 11914 ;; Defined at:
 11915 ;;		line 23 in file "I2C.c"
 11916 ;; Parameters:    Size  Location     Type
 11917 ;;		None
 11918 ;; Auto vars:     Size  Location     Type
 11919 ;;		None
 11920 ;; Return value:  Size  Location     Type
 11921 ;;                  1    wreg      void 
 11922 ;; Registers used:
 11923 ;;		wreg, status,2, status,0
 11924 ;; Tracked objects:
 11925 ;;		On entry : 0/0
 11926 ;;		On exit  : 0/0
 11927 ;;		Unchanged: 0/0
 11928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11931 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11932 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11933 ;;Total ram usage:        1 bytes
 11934 ;; Hardware stack levels used:    1
 11935 ;; This function calls:
 11936 ;;		Nothing
 11937 ;; This function is called by:
 11938 ;;		i2_I2C_Master_Start
 11939 ;;		i2_I2C_Master_Stop
 11940 ;;		i2_I2C_Master_Write
 11941 ;;		i2_I2C_Master_Read
 11942 ;; This function uses a non-reentrant model
 11943 ;;
 11944                           
 11945                           	psect	text43
 11946  0052DA                     __ptext43:
 11947                           	opt stack 0
 11948  0052DA                     i2_I2C_Master_Wait:
 11949                           	opt stack 21
 11950  0052DA                     i2l369:
 11951  0052DA  B4C7               	btfsc	4039,2,c	;volatile
 11952  0052DC  D7FE               	goto	i2l369
 11953  0052DE  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 11954  0052E2  0E1F               	movlw	31
 11955  0052E4  1601               	andwf	??i2_I2C_Master_Wait,f,c
 11956  0052E6  B4D8               	btfsc	status,2,c
 11957  0052E8  0012               	return	
 11958  0052EA  D7F7               	goto	i2l369
 11959  0052EC                     __end_ofi2_I2C_Master_Wait:
 11960                           	opt stack 0
 11961                           pclatu	equ	0xFFB
 11962                           pclath	equ	0xFFA
 11963                           tblptru	equ	0xFF8
 11964                           tblptrh	equ	0xFF7
 11965                           tblptrl	equ	0xFF6
 11966                           tablat	equ	0xFF5
 11967                           prodh	equ	0xFF4
 11968                           prodl	equ	0xFF3
 11969                           intcon	equ	0xFF2
 11970                           intcon3	equ	0xFF0
 11971                           postinc0	equ	0xFEE
 11972                           fsr0h	equ	0xFEA
 11973                           fsr0l	equ	0xFE9
 11974                           wreg	equ	0xFE8
 11975                           plusw1	equ	0xFE3
 11976                           fsr1h	equ	0xFE2
 11977                           fsr1l	equ	0xFE1
 11978                           indf2	equ	0xFDF
 11979                           postinc2	equ	0xFDE
 11980                           postdec2	equ	0xFDD
 11981                           plusw2	equ	0xFDB
 11982                           fsr2h	equ	0xFDA
 11983                           fsr2l	equ	0xFD9
 11984                           status	equ	0xFD8
 11985                           
 11986 ;; *************** function _stopMoving *****************
 11987 ;; Defined at:
 11988 ;;		line 31 in file "motors.c"
 11989 ;; Parameters:    Size  Location     Type
 11990 ;;  em              1    wreg     unsigned char 
 11991 ;; Auto vars:     Size  Location     Type
 11992 ;;  em              1  116[COMRAM] unsigned char 
 11993 ;; Return value:  Size  Location     Type
 11994 ;;                  1    wreg      void 
 11995 ;; Registers used:
 11996 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11997 ;; Tracked objects:
 11998 ;;		On entry : 0/0
 11999 ;;		On exit  : 0/0
 12000 ;;		Unchanged: 0/0
 12001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12003 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12004 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12005 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12006 ;;Total ram usage:        5 bytes
 12007 ;; Hardware stack levels used:    1
 12008 ;; Hardware stack levels required when called:    4
 12009 ;; This function calls:
 12010 ;;		i2_lcdInst
 12011 ;;		i2_printf
 12012 ;; This function is called by:
 12013 ;;		_simulate
 12014 ;;		_keypressed
 12015 ;; This function uses a non-reentrant model
 12016 ;;
 12017                           
 12018                           	psect	text44
 12019  004E42                     __ptext44:
 12020                           	opt stack 0
 12021  004E42                     _stopMoving:
 12022                           	opt stack 20
 12023                           
 12024                           ;incstack = 0
 12025                           ;stopMoving@em stored from wreg
 12026  004E42  6E75               	movwf	stopMoving@em,c
 12027                           
 12028                           ;motors.c: 32: (INTCONbits.GIE = 0);
 12029  004E44  9EF2               	bcf	intcon,7,c	;volatile
 12030                           
 12031                           ;motors.c: 33: lcdInst(0b10000000);;
 12032  004E46  0E80               	movlw	128
 12033  004E48  EC8C  F029         	call	i2_lcdInst
 12034                           
 12035                           ;motors.c: 34: LATC = 0;
 12036  004E4C  0E00               	movlw	0
 12037  004E4E  6E8B               	movwf	3979,c	;volatile
 12038                           
 12039                           ;motors.c: 35: printf(em ? "Emergency          " : "Stopped          ");
 12040  004E50  5075               	movf	stopMoving@em,w,c
 12041  004E52  A4D8               	btfss	status,2,c
 12042  004E54  D004               	goto	i2l6401
 12043  004E56  0E32               	movlw	low STR_36
 12044  004E58  6E73               	movwf	_stopMoving$551,c
 12045  004E5A  0EFF               	movlw	high STR_36
 12046  004E5C  D003               	goto	L5
 12047  004E5E                     i2l6401:
 12048  004E5E  0EA9               	movlw	low STR_35
 12049  004E60  6E73               	movwf	_stopMoving$551,c
 12050  004E62  0EFE               	movlw	high STR_35
 12051  004E64                     L5:
 12052  004E64  6E74               	movwf	_stopMoving$551+1,c
 12053  004E66  C073  F047         	movff	_stopMoving$551,i2printf@f
 12054  004E6A  C074  F048         	movff	_stopMoving$551+1,i2printf@f+1
 12055  004E6E  EC48  F006         	call	i2_printf	;wreg free
 12056                           
 12057                           ;motors.c: 36: _delay((unsigned long)((700)*(8000000/4000.0)));
 12058  004E72  0E08               	movlw	8
 12059  004E74  6E72               	movwf	(??_stopMoving+1)& (0+255),c
 12060  004E76  0E1B               	movlw	27
 12061  004E78  6E71               	movwf	??_stopMoving& (0+255),c
 12062  004E7A  0E27               	movlw	39
 12063  004E7C                     i2u877_47:
 12064  004E7C  2EE8               	decfsz	wreg,f,c
 12065  004E7E  D7FE               	bra	i2u877_47
 12066  004E80  2E71               	decfsz	??_stopMoving& (0+255),f,c
 12067  004E82  D7FC               	bra	i2u877_47
 12068  004E84  2E72               	decfsz	(??_stopMoving+1)& (0+255),f,c
 12069  004E86  D7FA               	bra	i2u877_47
 12070  004E88  F000               	nop	
 12071                           
 12072                           ;motors.c: 37: if (em)
 12073  004E8A  5075               	movf	stopMoving@em,w,c
 12074  004E8C  B4D8               	btfsc	status,2,c
 12075  004E8E  0012               	return	
 12076  004E90                     i2l278:
 12077  004E90  D7FF               	goto	i2l278
 12078  004E92                     __end_of_stopMoving:
 12079                           	opt stack 0
 12080                           pclatu	equ	0xFFB
 12081                           pclath	equ	0xFFA
 12082                           tblptru	equ	0xFF8
 12083                           tblptrh	equ	0xFF7
 12084                           tblptrl	equ	0xFF6
 12085                           tablat	equ	0xFF5
 12086                           prodh	equ	0xFF4
 12087                           prodl	equ	0xFF3
 12088                           intcon	equ	0xFF2
 12089                           intcon3	equ	0xFF0
 12090                           postinc0	equ	0xFEE
 12091                           fsr0h	equ	0xFEA
 12092                           fsr0l	equ	0xFE9
 12093                           wreg	equ	0xFE8
 12094                           plusw1	equ	0xFE3
 12095                           fsr1h	equ	0xFE2
 12096                           fsr1l	equ	0xFE1
 12097                           indf2	equ	0xFDF
 12098                           postinc2	equ	0xFDE
 12099                           postdec2	equ	0xFDD
 12100                           plusw2	equ	0xFDB
 12101                           fsr2h	equ	0xFDA
 12102                           fsr2l	equ	0xFD9
 12103                           status	equ	0xFD8
 12104                           
 12105 ;; *************** function _checkC *****************
 12106 ;; Defined at:
 12107 ;;		line 49 in file "sensors.c"
 12108 ;; Parameters:    Size  Location     Type
 12109 ;;  sorted          2  122[COMRAM] PTR unsigned char 
 12110 ;;		 -> simulate@sorted(4), 
 12111 ;; Auto vars:     Size  Location     Type
 12112 ;;		None
 12113 ;; Return value:  Size  Location     Type
 12114 ;;                  2  122[COMRAM] int 
 12115 ;; Registers used:
 12116 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12117 ;; Tracked objects:
 12118 ;;		On entry : 0/0
 12119 ;;		On exit  : 0/0
 12120 ;;		Unchanged: 0/0
 12121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12122 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12125 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12126 ;;Total ram usage:        2 bytes
 12127 ;; Hardware stack levels used:    1
 12128 ;; Hardware stack levels required when called:    5
 12129 ;; This function calls:
 12130 ;;		_AD
 12131 ;;		_checkV
 12132 ;;		i2___lcd_newline
 12133 ;;		i2_lcdInst
 12134 ;;		i2_printf
 12135 ;; This function is called by:
 12136 ;;		_simulate
 12137 ;; This function uses a non-reentrant model
 12138 ;;
 12139                           
 12140                           	psect	text45
 12141  0041B0                     __ptext45:
 12142                           	opt stack 0
 12143  0041B0                     _checkC:
 12144                           	opt stack 18
 12145                           
 12146                           ;sensors.c: 51: lcdInst(0b10000000);;
 12147                           
 12148                           ;incstack = 0
 12149  0041B0  0E80               	movlw	128
 12150  0041B2  EC8C  F029         	call	i2_lcdInst
 12151                           
 12152                           ;sensors.c: 52: printf("C:          ");
 12153  0041B6  0ED2               	movlw	low STR_42
 12154  0041B8  6E47               	movwf	i2printf@f,c
 12155  0041BA  0EFF               	movlw	high STR_42
 12156  0041BC  6E48               	movwf	i2printf@f+1,c
 12157  0041BE  EC48  F006         	call	i2_printf	;wreg free
 12158                           
 12159                           ;sensors.c: 53: __lcd_newline();
 12160  0041C2  ECB0  F029         	call	i2___lcd_newline	;wreg free
 12161                           
 12162                           ;sensors.c: 54: switch (checkV(AD(1), 1.5)) {
 12163  0041C6  D032               	goto	i2l6295
 12164  0041C8                     i2l6267:
 12165                           
 12166                           ;sensors.c: 56: printf("charged C          ");
 12167  0041C8  0E82               	movlw	low (STR_44+2)
 12168  0041CA  6E47               	movwf	i2printf@f,c
 12169  0041CC  0EFD               	movlw	high (STR_44+2)
 12170  0041CE  6E48               	movwf	i2printf@f+1,c
 12171  0041D0  EC48  F006         	call	i2_printf	;wreg free
 12172                           
 12173                           ;sensors.c: 57: sorted[1]++;
 12174  0041D4  EE20 F001          	lfsr	2,1
 12175  0041D8  507B               	movf	checkC@sorted,w,c
 12176  0041DA  26D9               	addwf	fsr2l,f,c
 12177  0041DC  507C               	movf	checkC@sorted+1,w,c
 12178  0041DE  22DA               	addwfc	fsr2h,f,c
 12179  0041E0  2ADF               	incf	indf2,f,c
 12180                           
 12181                           ;sensors.c: 58: return 1;
 12182  0041E2  0E00               	movlw	0
 12183  0041E4  6E7C               	movwf	?_checkC+1,c
 12184  0041E6  0E01               	movlw	1
 12185  0041E8  6E7B               	movwf	?_checkC,c
 12186  0041EA  0012               	return	
 12187  0041EC                     i2l6275:
 12188                           
 12189                           ;sensors.c: 60: printf("uncharged C          ");
 12190  0041EC  0E80               	movlw	low STR_44
 12191  0041EE  6E47               	movwf	i2printf@f,c
 12192  0041F0  0EFD               	movlw	high STR_44
 12193  0041F2  6E48               	movwf	i2printf@f+1,c
 12194  0041F4  EC48  F006         	call	i2_printf	;wreg free
 12195                           
 12196                           ;sensors.c: 61: sorted[3]++;
 12197  0041F8  EE20 F003          	lfsr	2,3
 12198  0041FC  507B               	movf	checkC@sorted,w,c
 12199  0041FE  26D9               	addwf	fsr2l,f,c
 12200  004200  507C               	movf	checkC@sorted+1,w,c
 12201  004202  22DA               	addwfc	fsr2h,f,c
 12202  004204  2ADF               	incf	indf2,f,c
 12203                           
 12204                           ;sensors.c: 62: return 0;
 12205  004206  0E00               	movlw	0
 12206  004208  6E7C               	movwf	?_checkC+1,c
 12207  00420A  0E00               	movlw	0
 12208  00420C  6E7B               	movwf	?_checkC,c
 12209  00420E  0012               	return	
 12210  004210                     i2l6283:
 12211                           
 12212                           ;sensors.c: 64: printf("no C          ");
 12213  004210  0EA7               	movlw	low STR_45
 12214  004212  6E47               	movwf	i2printf@f,c
 12215  004214  0EFF               	movlw	high STR_45
 12216  004216  6E48               	movwf	i2printf@f+1,c
 12217  004218  EC48  F006         	call	i2_printf	;wreg free
 12218                           
 12219                           ;sensors.c: 65: return -1;
 12220  00421C  687B               	setf	?_checkC,c
 12221  00421E  687C               	setf	?_checkC+1,c
 12222  004220  0012               	return	
 12223  004222                     i2l6289:
 12224                           
 12225                           ;sensors.c: 67: return 0;
 12226  004222  0E00               	movlw	0
 12227  004224  6E7C               	movwf	?_checkC+1,c
 12228  004226  0E00               	movlw	0
 12229  004228  6E7B               	movwf	?_checkC,c
 12230                           
 12231                           ;sensors.c: 68: }
 12232  00422A  0012               	return	
 12233  00422C                     i2l6295:
 12234  00422C  0E01               	movlw	1
 12235  00422E  ECA2  F028         	call	_AD
 12236  004232  C001  F071         	movff	?_AD,checkV@voltage
 12237  004236  C002  F072         	movff	?_AD+1,checkV@voltage+1
 12238  00423A  0E00               	movlw	0
 12239  00423C  6E73               	movwf	checkV@max,c
 12240  00423E  0EC0               	movlw	192
 12241  004240  6E74               	movwf	checkV@max+1,c
 12242  004242  0E3F               	movlw	63
 12243  004244  6E75               	movwf	checkV@max+2,c
 12244  004246  EC09  F01D         	call	_checkV	;wreg free
 12245                           
 12246                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 12247                           ; Switch size 1, requested type "space"
 12248                           ; Number of cases is 2, Range of values is 0 to 255
 12249                           ; switch strategies available:
 12250                           ; Name         Instructions Cycles
 12251                           ; simple_byte            7     4 (average)
 12252                           ;	Chosen strategy is simple_byte
 12253  00424A  5072               	movf	?_checkV+1,w,c
 12254  00424C  0A00               	xorlw	0	; case 0
 12255  00424E  B4D8               	btfsc	status,2,c
 12256  004250  D004               	goto	i2l8097
 12257  004252  0AFF               	xorlw	255	; case 255
 12258  004254  B4D8               	btfsc	status,2,c
 12259  004256  D009               	goto	i2l8099
 12260  004258  D7E4               	goto	i2l6289
 12261  00425A                     i2l8097:
 12262                           
 12263                           ; Switch size 1, requested type "space"
 12264                           ; Number of cases is 2, Range of values is 0 to 1
 12265                           ; switch strategies available:
 12266                           ; Name         Instructions Cycles
 12267                           ; simple_byte            7     4 (average)
 12268                           ;	Chosen strategy is simple_byte
 12269  00425A  5071               	movf	?_checkV,w,c
 12270  00425C  0A00               	xorlw	0	; case 0
 12271  00425E  B4D8               	btfsc	status,2,c
 12272  004260  D7D7               	goto	i2l6283
 12273  004262  0A01               	xorlw	1	; case 1
 12274  004264  B4D8               	btfsc	status,2,c
 12275  004266  D7B0               	goto	i2l6267
 12276  004268  D7DC               	goto	i2l6289
 12277  00426A                     i2l8099:
 12278                           
 12279                           ; Switch size 1, requested type "space"
 12280                           ; Number of cases is 1, Range of values is 255 to 255
 12281                           ; switch strategies available:
 12282                           ; Name         Instructions Cycles
 12283                           ; simple_byte            4     3 (average)
 12284                           ;	Chosen strategy is simple_byte
 12285  00426A  5071               	movf	?_checkV,w,c
 12286  00426C  0AFF               	xorlw	255	; case 255
 12287  00426E  B4D8               	btfsc	status,2,c
 12288  004270  D7BD               	goto	i2l6275
 12289  004272  D7D7               	goto	i2l6289
 12290  004274                     __end_of_checkC:
 12291                           	opt stack 0
 12292                           pclatu	equ	0xFFB
 12293                           pclath	equ	0xFFA
 12294                           tblptru	equ	0xFF8
 12295                           tblptrh	equ	0xFF7
 12296                           tblptrl	equ	0xFF6
 12297                           tablat	equ	0xFF5
 12298                           prodh	equ	0xFF4
 12299                           prodl	equ	0xFF3
 12300                           intcon	equ	0xFF2
 12301                           intcon3	equ	0xFF0
 12302                           postinc0	equ	0xFEE
 12303                           fsr0h	equ	0xFEA
 12304                           fsr0l	equ	0xFE9
 12305                           wreg	equ	0xFE8
 12306                           plusw1	equ	0xFE3
 12307                           fsr1h	equ	0xFE2
 12308                           fsr1l	equ	0xFE1
 12309                           indf2	equ	0xFDF
 12310                           postinc2	equ	0xFDE
 12311                           postdec2	equ	0xFDD
 12312                           plusw2	equ	0xFDB
 12313                           fsr2h	equ	0xFDA
 12314                           fsr2l	equ	0xFD9
 12315                           status	equ	0xFD8
 12316                           
 12317 ;; *************** function _checkAA *****************
 12318 ;; Defined at:
 12319 ;;		line 27 in file "sensors.c"
 12320 ;; Parameters:    Size  Location     Type
 12321 ;;  sorted          2  122[COMRAM] PTR unsigned char 
 12322 ;;		 -> testADC@sorted(4), simulate@sorted(4), 
 12323 ;; Auto vars:     Size  Location     Type
 12324 ;;		None
 12325 ;; Return value:  Size  Location     Type
 12326 ;;                  2  122[COMRAM] int 
 12327 ;; Registers used:
 12328 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12329 ;; Tracked objects:
 12330 ;;		On entry : 0/0
 12331 ;;		On exit  : 0/0
 12332 ;;		Unchanged: 0/0
 12333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12334 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12337 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12338 ;;Total ram usage:        2 bytes
 12339 ;; Hardware stack levels used:    1
 12340 ;; Hardware stack levels required when called:    5
 12341 ;; This function calls:
 12342 ;;		_AD
 12343 ;;		_checkV
 12344 ;;		i2___lcd_newline
 12345 ;;		i2_lcdInst
 12346 ;;		i2_printf
 12347 ;; This function is called by:
 12348 ;;		_simulate
 12349 ;;		_testADC
 12350 ;; This function uses a non-reentrant model
 12351 ;;
 12352                           
 12353                           	psect	text46
 12354  004338                     __ptext46:
 12355                           	opt stack 0
 12356  004338                     _checkAA:
 12357                           	opt stack 18
 12358                           
 12359                           ;sensors.c: 29: lcdInst(0b10000000);;
 12360                           
 12361                           ;incstack = 0
 12362  004338  0E80               	movlw	128
 12363  00433A  EC8C  F029         	call	i2_lcdInst
 12364                           
 12365                           ;sensors.c: 30: printf("AA:          ");
 12366  00433E  0EB6               	movlw	low STR_38
 12367  004340  6E47               	movwf	i2printf@f,c
 12368  004342  0EFF               	movlw	high STR_38
 12369  004344  6E48               	movwf	i2printf@f+1,c
 12370  004346  EC48  F006         	call	i2_printf	;wreg free
 12371                           
 12372                           ;sensors.c: 31: __lcd_newline();
 12373  00434A  ECB0  F029         	call	i2___lcd_newline	;wreg free
 12374                           
 12375                           ;sensors.c: 32: switch (checkV(AD(0), 1.5)) {
 12376  00434E  D030               	goto	i2l6251
 12377  004350                     i2l6223:
 12378                           
 12379                           ;sensors.c: 34: printf("charged AA          ");
 12380  004350  0E3D               	movlw	low (STR_40+2)
 12381  004352  6E47               	movwf	i2printf@f,c
 12382  004354  0EFD               	movlw	high (STR_40+2)
 12383  004356  6E48               	movwf	i2printf@f+1,c
 12384  004358  EC48  F006         	call	i2_printf	;wreg free
 12385                           
 12386                           ;sensors.c: 35: sorted[0]++;
 12387  00435C  C07B  FFD9         	movff	checkAA@sorted,fsr2l
 12388  004360  C07C  FFDA         	movff	checkAA@sorted+1,fsr2h
 12389  004364  2ADF               	incf	indf2,f,c
 12390                           
 12391                           ;sensors.c: 36: return 1;
 12392  004366  0E00               	movlw	0
 12393  004368  6E7C               	movwf	?_checkAA+1,c
 12394  00436A  0E01               	movlw	1
 12395  00436C  6E7B               	movwf	?_checkAA,c
 12396  00436E  0012               	return	
 12397  004370                     i2l6231:
 12398                           
 12399                           ;sensors.c: 38: printf("uncharged AA          ");
 12400  004370  0E3B               	movlw	low STR_40
 12401  004372  6E47               	movwf	i2printf@f,c
 12402  004374  0EFD               	movlw	high STR_40
 12403  004376  6E48               	movwf	i2printf@f+1,c
 12404  004378  EC48  F006         	call	i2_printf	;wreg free
 12405                           
 12406                           ;sensors.c: 39: sorted[3]++;
 12407  00437C  EE20 F003          	lfsr	2,3
 12408  004380  507B               	movf	checkAA@sorted,w,c
 12409  004382  26D9               	addwf	fsr2l,f,c
 12410  004384  507C               	movf	checkAA@sorted+1,w,c
 12411  004386  22DA               	addwfc	fsr2h,f,c
 12412  004388  2ADF               	incf	indf2,f,c
 12413                           
 12414                           ;sensors.c: 40: return 0;
 12415  00438A  0E00               	movlw	0
 12416  00438C  6E7C               	movwf	?_checkAA+1,c
 12417  00438E  0E00               	movlw	0
 12418  004390  6E7B               	movwf	?_checkAA,c
 12419  004392  0012               	return	
 12420  004394                     i2l6239:
 12421                           
 12422                           ;sensors.c: 42: printf("no AA          ");
 12423  004394  0E77               	movlw	low STR_41
 12424  004396  6E47               	movwf	i2printf@f,c
 12425  004398  0EFF               	movlw	high STR_41
 12426  00439A  6E48               	movwf	i2printf@f+1,c
 12427  00439C  EC48  F006         	call	i2_printf	;wreg free
 12428                           
 12429                           ;sensors.c: 43: return -1;
 12430  0043A0  687B               	setf	?_checkAA,c
 12431  0043A2  687C               	setf	?_checkAA+1,c
 12432  0043A4  0012               	return	
 12433  0043A6                     i2l6245:
 12434                           
 12435                           ;sensors.c: 45: return 0;
 12436  0043A6  0E00               	movlw	0
 12437  0043A8  6E7C               	movwf	?_checkAA+1,c
 12438  0043AA  0E00               	movlw	0
 12439  0043AC  6E7B               	movwf	?_checkAA,c
 12440                           
 12441                           ;sensors.c: 46: }
 12442  0043AE  0012               	return	
 12443  0043B0                     i2l6251:
 12444  0043B0  0E00               	movlw	0
 12445  0043B2  ECA2  F028         	call	_AD
 12446  0043B6  C001  F071         	movff	?_AD,checkV@voltage
 12447  0043BA  C002  F072         	movff	?_AD+1,checkV@voltage+1
 12448  0043BE  0E00               	movlw	0
 12449  0043C0  6E73               	movwf	checkV@max,c
 12450  0043C2  0EC0               	movlw	192
 12451  0043C4  6E74               	movwf	checkV@max+1,c
 12452  0043C6  0E3F               	movlw	63
 12453  0043C8  6E75               	movwf	checkV@max+2,c
 12454  0043CA  EC09  F01D         	call	_checkV	;wreg free
 12455                           
 12456                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 12457                           ; Switch size 1, requested type "space"
 12458                           ; Number of cases is 2, Range of values is 0 to 255
 12459                           ; switch strategies available:
 12460                           ; Name         Instructions Cycles
 12461                           ; simple_byte            7     4 (average)
 12462                           ;	Chosen strategy is simple_byte
 12463  0043CE  5072               	movf	?_checkV+1,w,c
 12464  0043D0  0A00               	xorlw	0	; case 0
 12465  0043D2  B4D8               	btfsc	status,2,c
 12466  0043D4  D004               	goto	i2l8101
 12467  0043D6  0AFF               	xorlw	255	; case 255
 12468  0043D8  B4D8               	btfsc	status,2,c
 12469  0043DA  D009               	goto	i2l8103
 12470  0043DC  D7E4               	goto	i2l6245
 12471  0043DE                     i2l8101:
 12472                           
 12473                           ; Switch size 1, requested type "space"
 12474                           ; Number of cases is 2, Range of values is 0 to 1
 12475                           ; switch strategies available:
 12476                           ; Name         Instructions Cycles
 12477                           ; simple_byte            7     4 (average)
 12478                           ;	Chosen strategy is simple_byte
 12479  0043DE  5071               	movf	?_checkV,w,c
 12480  0043E0  0A00               	xorlw	0	; case 0
 12481  0043E2  B4D8               	btfsc	status,2,c
 12482  0043E4  D7D7               	goto	i2l6239
 12483  0043E6  0A01               	xorlw	1	; case 1
 12484  0043E8  B4D8               	btfsc	status,2,c
 12485  0043EA  D7B2               	goto	i2l6223
 12486  0043EC  D7DC               	goto	i2l6245
 12487  0043EE                     i2l8103:
 12488                           
 12489                           ; Switch size 1, requested type "space"
 12490                           ; Number of cases is 1, Range of values is 255 to 255
 12491                           ; switch strategies available:
 12492                           ; Name         Instructions Cycles
 12493                           ; simple_byte            4     3 (average)
 12494                           ;	Chosen strategy is simple_byte
 12495  0043EE  5071               	movf	?_checkV,w,c
 12496  0043F0  0AFF               	xorlw	255	; case 255
 12497  0043F2  B4D8               	btfsc	status,2,c
 12498  0043F4  D7BD               	goto	i2l6231
 12499  0043F6  D7D7               	goto	i2l6245
 12500  0043F8                     __end_of_checkAA:
 12501                           	opt stack 0
 12502                           pclatu	equ	0xFFB
 12503                           pclath	equ	0xFFA
 12504                           tblptru	equ	0xFF8
 12505                           tblptrh	equ	0xFF7
 12506                           tblptrl	equ	0xFF6
 12507                           tablat	equ	0xFF5
 12508                           prodh	equ	0xFF4
 12509                           prodl	equ	0xFF3
 12510                           intcon	equ	0xFF2
 12511                           intcon3	equ	0xFF0
 12512                           postinc0	equ	0xFEE
 12513                           fsr0h	equ	0xFEA
 12514                           fsr0l	equ	0xFE9
 12515                           wreg	equ	0xFE8
 12516                           plusw1	equ	0xFE3
 12517                           fsr1h	equ	0xFE2
 12518                           fsr1l	equ	0xFE1
 12519                           indf2	equ	0xFDF
 12520                           postinc2	equ	0xFDE
 12521                           postdec2	equ	0xFDD
 12522                           plusw2	equ	0xFDB
 12523                           fsr2h	equ	0xFDA
 12524                           fsr2l	equ	0xFD9
 12525                           status	equ	0xFD8
 12526                           
 12527 ;; *************** function _check9 *****************
 12528 ;; Defined at:
 12529 ;;		line 71 in file "sensors.c"
 12530 ;; Parameters:    Size  Location     Type
 12531 ;;  sorted          2  122[COMRAM] PTR unsigned char 
 12532 ;;		 -> simulate@sorted(4), 
 12533 ;; Auto vars:     Size  Location     Type
 12534 ;;		None
 12535 ;; Return value:  Size  Location     Type
 12536 ;;                  2  122[COMRAM] int 
 12537 ;; Registers used:
 12538 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12539 ;; Tracked objects:
 12540 ;;		On entry : 0/0
 12541 ;;		On exit  : 0/0
 12542 ;;		Unchanged: 0/0
 12543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12544 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12547 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12548 ;;Total ram usage:        2 bytes
 12549 ;; Hardware stack levels used:    1
 12550 ;; Hardware stack levels required when called:    5
 12551 ;; This function calls:
 12552 ;;		_AD
 12553 ;;		_checkV
 12554 ;;		i2___lcd_newline
 12555 ;;		i2_lcdInst
 12556 ;;		i2_printf
 12557 ;; This function is called by:
 12558 ;;		_simulate
 12559 ;; This function uses a non-reentrant model
 12560 ;;
 12561                           
 12562                           	psect	text47
 12563  004274                     __ptext47:
 12564                           	opt stack 0
 12565  004274                     _check9:
 12566                           	opt stack 18
 12567                           
 12568                           ;sensors.c: 73: lcdInst(0b10000000);;
 12569                           
 12570                           ;incstack = 0
 12571  004274  0E80               	movlw	128
 12572  004276  EC8C  F029         	call	i2_lcdInst
 12573                           
 12574                           ;sensors.c: 74: printf("9V:          ");
 12575  00427A  0EC4               	movlw	low STR_46
 12576  00427C  6E47               	movwf	i2printf@f,c
 12577  00427E  0EFF               	movlw	high STR_46
 12578  004280  6E48               	movwf	i2printf@f+1,c
 12579  004282  EC48  F006         	call	i2_printf	;wreg free
 12580                           
 12581                           ;sensors.c: 75: __lcd_newline();
 12582  004286  ECB0  F029         	call	i2___lcd_newline	;wreg free
 12583                           
 12584                           ;sensors.c: 76: switch (checkV(AD(2), 4)) {
 12585  00428A  D032               	goto	i2l6339
 12586  00428C                     i2l6311:
 12587                           
 12588                           ;sensors.c: 78: printf("charged 9V          ");
 12589  00428C  0E54               	movlw	low (STR_48+2)
 12590  00428E  6E47               	movwf	i2printf@f,c
 12591  004290  0EFD               	movlw	high (STR_48+2)
 12592  004292  6E48               	movwf	i2printf@f+1,c
 12593  004294  EC48  F006         	call	i2_printf	;wreg free
 12594                           
 12595                           ;sensors.c: 79: sorted[2]++;
 12596  004298  EE20 F002          	lfsr	2,2
 12597  00429C  507B               	movf	check9@sorted,w,c
 12598  00429E  26D9               	addwf	fsr2l,f,c
 12599  0042A0  507C               	movf	check9@sorted+1,w,c
 12600  0042A2  22DA               	addwfc	fsr2h,f,c
 12601  0042A4  2ADF               	incf	indf2,f,c
 12602                           
 12603                           ;sensors.c: 80: return 1;
 12604  0042A6  0E00               	movlw	0
 12605  0042A8  6E7C               	movwf	?_check9+1,c
 12606  0042AA  0E01               	movlw	1
 12607  0042AC  6E7B               	movwf	?_check9,c
 12608  0042AE  0012               	return	
 12609  0042B0                     i2l6319:
 12610                           
 12611                           ;sensors.c: 82: printf("uncharged 9V          ");
 12612  0042B0  0E52               	movlw	low STR_48
 12613  0042B2  6E47               	movwf	i2printf@f,c
 12614  0042B4  0EFD               	movlw	high STR_48
 12615  0042B6  6E48               	movwf	i2printf@f+1,c
 12616  0042B8  EC48  F006         	call	i2_printf	;wreg free
 12617                           
 12618                           ;sensors.c: 83: sorted[3]++;
 12619  0042BC  EE20 F003          	lfsr	2,3
 12620  0042C0  507B               	movf	check9@sorted,w,c
 12621  0042C2  26D9               	addwf	fsr2l,f,c
 12622  0042C4  507C               	movf	check9@sorted+1,w,c
 12623  0042C6  22DA               	addwfc	fsr2h,f,c
 12624  0042C8  2ADF               	incf	indf2,f,c
 12625                           
 12626                           ;sensors.c: 84: return 0;
 12627  0042CA  0E00               	movlw	0
 12628  0042CC  6E7C               	movwf	?_check9+1,c
 12629  0042CE  0E00               	movlw	0
 12630  0042D0  6E7B               	movwf	?_check9,c
 12631  0042D2  0012               	return	
 12632  0042D4                     i2l6327:
 12633                           
 12634                           ;sensors.c: 86: printf("no 9V          ");
 12635  0042D4  0E87               	movlw	low STR_49
 12636  0042D6  6E47               	movwf	i2printf@f,c
 12637  0042D8  0EFF               	movlw	high STR_49
 12638  0042DA  6E48               	movwf	i2printf@f+1,c
 12639  0042DC  EC48  F006         	call	i2_printf	;wreg free
 12640                           
 12641                           ;sensors.c: 87: return -1;
 12642  0042E0  687B               	setf	?_check9,c
 12643  0042E2  687C               	setf	?_check9+1,c
 12644  0042E4  0012               	return	
 12645  0042E6                     i2l6333:
 12646                           
 12647                           ;sensors.c: 89: return 0;
 12648  0042E6  0E00               	movlw	0
 12649  0042E8  6E7C               	movwf	?_check9+1,c
 12650  0042EA  0E00               	movlw	0
 12651  0042EC  6E7B               	movwf	?_check9,c
 12652                           
 12653                           ;sensors.c: 90: }
 12654  0042EE  0012               	return	
 12655  0042F0                     i2l6339:
 12656  0042F0  0E02               	movlw	2
 12657  0042F2  ECA2  F028         	call	_AD
 12658  0042F6  C001  F071         	movff	?_AD,checkV@voltage
 12659  0042FA  C002  F072         	movff	?_AD+1,checkV@voltage+1
 12660  0042FE  0E00               	movlw	0
 12661  004300  6E73               	movwf	checkV@max,c
 12662  004302  0E80               	movlw	128
 12663  004304  6E74               	movwf	checkV@max+1,c
 12664  004306  0E40               	movlw	64
 12665  004308  6E75               	movwf	checkV@max+2,c
 12666  00430A  EC09  F01D         	call	_checkV	;wreg free
 12667                           
 12668                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 12669                           ; Switch size 1, requested type "space"
 12670                           ; Number of cases is 2, Range of values is 0 to 255
 12671                           ; switch strategies available:
 12672                           ; Name         Instructions Cycles
 12673                           ; simple_byte            7     4 (average)
 12674                           ;	Chosen strategy is simple_byte
 12675  00430E  5072               	movf	?_checkV+1,w,c
 12676  004310  0A00               	xorlw	0	; case 0
 12677  004312  B4D8               	btfsc	status,2,c
 12678  004314  D004               	goto	i2l8105
 12679  004316  0AFF               	xorlw	255	; case 255
 12680  004318  B4D8               	btfsc	status,2,c
 12681  00431A  D009               	goto	i2l8107
 12682  00431C  D7E4               	goto	i2l6333
 12683  00431E                     i2l8105:
 12684                           
 12685                           ; Switch size 1, requested type "space"
 12686                           ; Number of cases is 2, Range of values is 0 to 1
 12687                           ; switch strategies available:
 12688                           ; Name         Instructions Cycles
 12689                           ; simple_byte            7     4 (average)
 12690                           ;	Chosen strategy is simple_byte
 12691  00431E  5071               	movf	?_checkV,w,c
 12692  004320  0A00               	xorlw	0	; case 0
 12693  004322  B4D8               	btfsc	status,2,c
 12694  004324  D7D7               	goto	i2l6327
 12695  004326  0A01               	xorlw	1	; case 1
 12696  004328  B4D8               	btfsc	status,2,c
 12697  00432A  D7B0               	goto	i2l6311
 12698  00432C  D7DC               	goto	i2l6333
 12699  00432E                     i2l8107:
 12700                           
 12701                           ; Switch size 1, requested type "space"
 12702                           ; Number of cases is 1, Range of values is 255 to 255
 12703                           ; switch strategies available:
 12704                           ; Name         Instructions Cycles
 12705                           ; simple_byte            4     3 (average)
 12706                           ;	Chosen strategy is simple_byte
 12707  00432E  5071               	movf	?_checkV,w,c
 12708  004330  0AFF               	xorlw	255	; case 255
 12709  004332  B4D8               	btfsc	status,2,c
 12710  004334  D7BD               	goto	i2l6319
 12711  004336  D7D7               	goto	i2l6333
 12712  004338                     __end_of_check9:
 12713                           	opt stack 0
 12714                           pclatu	equ	0xFFB
 12715                           pclath	equ	0xFFA
 12716                           tblptru	equ	0xFF8
 12717                           tblptrh	equ	0xFF7
 12718                           tblptrl	equ	0xFF6
 12719                           tablat	equ	0xFF5
 12720                           prodh	equ	0xFF4
 12721                           prodl	equ	0xFF3
 12722                           intcon	equ	0xFF2
 12723                           intcon3	equ	0xFF0
 12724                           postinc0	equ	0xFEE
 12725                           fsr0h	equ	0xFEA
 12726                           fsr0l	equ	0xFE9
 12727                           wreg	equ	0xFE8
 12728                           plusw1	equ	0xFE3
 12729                           fsr1h	equ	0xFE2
 12730                           fsr1l	equ	0xFE1
 12731                           indf2	equ	0xFDF
 12732                           postinc2	equ	0xFDE
 12733                           postdec2	equ	0xFDD
 12734                           plusw2	equ	0xFDB
 12735                           fsr2h	equ	0xFDA
 12736                           fsr2l	equ	0xFD9
 12737                           status	equ	0xFD8
 12738                           
 12739 ;; *************** function _checkV *****************
 12740 ;; Defined at:
 12741 ;;		line 13 in file "sensors.c"
 12742 ;; Parameters:    Size  Location     Type
 12743 ;;  voltage         2  112[COMRAM] int 
 12744 ;;  max             3  114[COMRAM] float 
 12745 ;; Auto vars:     Size  Location     Type
 12746 ;;		None
 12747 ;; Return value:  Size  Location     Type
 12748 ;;                  2  112[COMRAM] int 
 12749 ;; Registers used:
 12750 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12751 ;; Tracked objects:
 12752 ;;		On entry : 0/0
 12753 ;;		On exit  : 0/0
 12754 ;;		Unchanged: 0/0
 12755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12756 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12757 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12758 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12759 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12760 ;;Total ram usage:       10 bytes
 12761 ;; Hardware stack levels used:    1
 12762 ;; Hardware stack levels required when called:    4
 12763 ;; This function calls:
 12764 ;;		___awtoft
 12765 ;;		___ftdiv
 12766 ;;		i2___ftge
 12767 ;;		i2___ftmul
 12768 ;;		i2___lcd_newline
 12769 ;;		i2_printf
 12770 ;; This function is called by:
 12771 ;;		_checkAA
 12772 ;;		_checkC
 12773 ;;		_check9
 12774 ;; This function uses a non-reentrant model
 12775 ;;
 12776                           
 12777                           	psect	text48
 12778  003A12                     __ptext48:
 12779                           	opt stack 0
 12780  003A12                     _checkV:
 12781                           	opt stack 18
 12782                           
 12783                           ;sensors.c: 15: printf("%f02 received    ", (float) voltage / 1024 * 4.1);
 12784                           
 12785                           ;incstack = 0
 12786  003A12  0E00               	movlw	0
 12787  003A14  6E10               	movwf	___ftdiv@f2,c
 12788  003A16  0E80               	movlw	128
 12789  003A18  6E11               	movwf	___ftdiv@f2+1,c
 12790  003A1A  0E44               	movlw	68
 12791  003A1C  6E12               	movwf	___ftdiv@f2+2,c
 12792  003A1E  C071  F009         	movff	checkV@voltage,___awtoft@c
 12793  003A22  C072  F00A         	movff	checkV@voltage+1,___awtoft@c+1
 12794  003A26  ECF8  F027         	call	___awtoft	;wreg free
 12795  003A2A  C009  F00D         	movff	?___awtoft,___ftdiv@f1
 12796  003A2E  C00A  F00E         	movff	?___awtoft+1,___ftdiv@f1+1
 12797  003A32  C00B  F00F         	movff	?___awtoft+2,___ftdiv@f1+2
 12798  003A36  EC01  F020         	call	___ftdiv	;wreg free
 12799  003A3A  C00D  F01C         	movff	?___ftdiv,i2___ftmul@f1
 12800  003A3E  C00E  F01D         	movff	?___ftdiv+1,i2___ftmul@f1+1
 12801  003A42  C00F  F01E         	movff	?___ftdiv+2,i2___ftmul@f1+2
 12802  003A46  0E33               	movlw	51
 12803  003A48  6E1F               	movwf	i2___ftmul@f2,c
 12804  003A4A  0E83               	movlw	131
 12805  003A4C  6E20               	movwf	i2___ftmul@f2+1,c
 12806  003A4E  0E40               	movlw	64
 12807  003A50  6E21               	movwf	i2___ftmul@f2+2,c
 12808  003A52  EC94  F01E         	call	i2___ftmul	;wreg free
 12809  003A56  C01C  F078         	movff	?i2___ftmul,_checkV$1658
 12810  003A5A  C01D  F079         	movff	?i2___ftmul+1,_checkV$1658+1
 12811  003A5E  C01E  F07A         	movff	?i2___ftmul+2,_checkV$1658+2
 12812                           
 12813                           ;sensors.c: 15: printf("%f02 received    ", (float) voltage / 1024 * 4.1);
 12814  003A62  0E20               	movlw	low STR_37
 12815  003A64  6E47               	movwf	i2printf@f,c
 12816  003A66  0EFF               	movlw	high STR_37
 12817  003A68  6E48               	movwf	i2printf@f+1,c
 12818  003A6A  C078  F049         	movff	_checkV$1658,?i2_printf+2
 12819  003A6E  C079  F04A         	movff	_checkV$1658+1,?i2_printf+3
 12820  003A72  C07A  F04B         	movff	_checkV$1658+2,?i2_printf+4
 12821  003A76  EC48  F006         	call	i2_printf	;wreg free
 12822                           
 12823                           ;sensors.c: 16: __lcd_newline();
 12824  003A7A  ECB0  F029         	call	i2___lcd_newline	;wreg free
 12825                           
 12826                           ;sensors.c: 17: _delay((unsigned long)((700)*(8000000/4000.0)));
 12827  003A7E  0E08               	movlw	8
 12828  003A80  6E77               	movwf	(??_checkV+1)& (0+255),c
 12829  003A82  0E1B               	movlw	27
 12830  003A84  6E76               	movwf	??_checkV& (0+255),c
 12831  003A86  0E27               	movlw	39
 12832  003A88                     i2u878_47:
 12833  003A88  2EE8               	decfsz	wreg,f,c
 12834  003A8A  D7FE               	bra	i2u878_47
 12835  003A8C  2E76               	decfsz	??_checkV& (0+255),f,c
 12836  003A8E  D7FC               	bra	i2u878_47
 12837  003A90  2E77               	decfsz	(??_checkV+1)& (0+255),f,c
 12838  003A92  D7FA               	bra	i2u878_47
 12839  003A94  F000               	nop	
 12840                           
 12841                           ;sensors.c: 18: if (voltage < 50) {
 12842  003A96  BE72               	btfsc	checkV@voltage+1,7,c
 12843  003A98  D006               	goto	i2l5473
 12844  003A9A  5072               	movf	checkV@voltage+1,w,c
 12845  003A9C  E109               	bnz	i2l5479
 12846  003A9E  0E32               	movlw	50
 12847  003AA0  5C71               	subwf	checkV@voltage,w,c
 12848  003AA2  B0D8               	btfsc	status,0,c
 12849  003AA4  D005               	goto	i2l5479
 12850  003AA6                     i2l5473:
 12851                           
 12852                           ;sensors.c: 19: return 0;
 12853  003AA6  0E00               	movlw	0
 12854  003AA8  6E72               	movwf	?_checkV+1,c
 12855  003AAA  0E00               	movlw	0
 12856  003AAC  6E71               	movwf	?_checkV,c
 12857                           
 12858                           ;sensors.c: 20: } else if (voltage > 0.85 * 1023 * max / 4.1) {
 12859  003AAE  0012               	return	
 12860  003AB0                     i2l5479:
 12861  003AB0  0E33               	movlw	51
 12862  003AB2  6E10               	movwf	___ftdiv@f2,c
 12863  003AB4  0E83               	movlw	131
 12864  003AB6  6E11               	movwf	___ftdiv@f2+1,c
 12865  003AB8  0E40               	movlw	64
 12866  003ABA  6E12               	movwf	___ftdiv@f2+2,c
 12867  003ABC  0E63               	movlw	99
 12868  003ABE  6E1F               	movwf	i2___ftmul@f2,c
 12869  003AC0  0E59               	movlw	89
 12870  003AC2  6E20               	movwf	i2___ftmul@f2+1,c
 12871  003AC4  0E44               	movlw	68
 12872  003AC6  6E21               	movwf	i2___ftmul@f2+2,c
 12873  003AC8  C073  F01C         	movff	checkV@max,i2___ftmul@f1
 12874  003ACC  C074  F01D         	movff	checkV@max+1,i2___ftmul@f1+1
 12875  003AD0  C075  F01E         	movff	checkV@max+2,i2___ftmul@f1+2
 12876  003AD4  EC94  F01E         	call	i2___ftmul	;wreg free
 12877  003AD8  C01C  F00D         	movff	?i2___ftmul,___ftdiv@f1
 12878  003ADC  C01D  F00E         	movff	?i2___ftmul+1,___ftdiv@f1+1
 12879  003AE0  C01E  F00F         	movff	?i2___ftmul+2,___ftdiv@f1+2
 12880  003AE4  EC01  F020         	call	___ftdiv	;wreg free
 12881  003AE8  C00D  F02B         	movff	?___ftdiv,i2___ftge@ff1
 12882  003AEC  C00E  F02C         	movff	?___ftdiv+1,i2___ftge@ff1+1
 12883  003AF0  C00F  F02D         	movff	?___ftdiv+2,i2___ftge@ff1+2
 12884  003AF4  C071  F009         	movff	checkV@voltage,___awtoft@c
 12885  003AF8  C072  F00A         	movff	checkV@voltage+1,___awtoft@c+1
 12886  003AFC  ECF8  F027         	call	___awtoft	;wreg free
 12887  003B00  C009  F02E         	movff	?___awtoft,i2___ftge@ff2
 12888  003B04  C00A  F02F         	movff	?___awtoft+1,i2___ftge@ff2+1
 12889  003B08  C00B  F030         	movff	?___awtoft+2,i2___ftge@ff2+2
 12890  003B0C  ECAE  F023         	call	i2___ftge	;wreg free
 12891  003B10  B0D8               	btfsc	status,0,c
 12892  003B12  D005               	goto	i2l311
 12893                           
 12894                           ;sensors.c: 21: return 1;
 12895  003B14  0E00               	movlw	0
 12896  003B16  6E72               	movwf	?_checkV+1,c
 12897  003B18  0E01               	movlw	1
 12898  003B1A  6E71               	movwf	?_checkV,c
 12899                           
 12900                           ;sensors.c: 22: } else {
 12901  003B1C  0012               	return	
 12902  003B1E                     i2l311:
 12903                           
 12904                           ;sensors.c: 23: return -1;
 12905  003B1E  6871               	setf	?_checkV,c
 12906  003B20  6872               	setf	?_checkV+1,c
 12907  003B22  0012               	return	
 12908  003B24                     __end_of_checkV:
 12909                           	opt stack 0
 12910                           pclatu	equ	0xFFB
 12911                           pclath	equ	0xFFA
 12912                           tblptru	equ	0xFF8
 12913                           tblptrh	equ	0xFF7
 12914                           tblptrl	equ	0xFF6
 12915                           tablat	equ	0xFF5
 12916                           prodh	equ	0xFF4
 12917                           prodl	equ	0xFF3
 12918                           intcon	equ	0xFF2
 12919                           intcon3	equ	0xFF0
 12920                           postinc0	equ	0xFEE
 12921                           fsr0h	equ	0xFEA
 12922                           fsr0l	equ	0xFE9
 12923                           wreg	equ	0xFE8
 12924                           plusw1	equ	0xFE3
 12925                           fsr1h	equ	0xFE2
 12926                           fsr1l	equ	0xFE1
 12927                           indf2	equ	0xFDF
 12928                           postinc2	equ	0xFDE
 12929                           postdec2	equ	0xFDD
 12930                           plusw2	equ	0xFDB
 12931                           fsr2h	equ	0xFDA
 12932                           fsr2l	equ	0xFD9
 12933                           status	equ	0xFD8
 12934                           
 12935 ;; *************** function ___ftdiv *****************
 12936 ;; Defined at:
 12937 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdiv.c"
 12938 ;; Parameters:    Size  Location     Type
 12939 ;;  f1              3   12[COMRAM] float 
 12940 ;;  f2              3   15[COMRAM] float 
 12941 ;; Auto vars:     Size  Location     Type
 12942 ;;  f3              3   22[COMRAM] float 
 12943 ;;  sign            1   26[COMRAM] unsigned char 
 12944 ;;  exp             1   25[COMRAM] unsigned char 
 12945 ;;  cntr            1   21[COMRAM] unsigned char 
 12946 ;; Return value:  Size  Location     Type
 12947 ;;                  3   12[COMRAM] float 
 12948 ;; Registers used:
 12949 ;;		wreg, status,2, status,0, cstack
 12950 ;; Tracked objects:
 12951 ;;		On entry : 0/0
 12952 ;;		On exit  : 0/0
 12953 ;;		Unchanged: 0/0
 12954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12955 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12956 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12957 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12958 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12959 ;;Total ram usage:       15 bytes
 12960 ;; Hardware stack levels used:    1
 12961 ;; Hardware stack levels required when called:    1
 12962 ;; This function calls:
 12963 ;;		i2___ftpack
 12964 ;; This function is called by:
 12965 ;;		_checkV
 12966 ;; This function uses a non-reentrant model
 12967 ;;
 12968                           
 12969                           	psect	text49
 12970  004002                     __ptext49:
 12971                           	opt stack 0
 12972  004002                     ___ftdiv:
 12973                           	opt stack 20
 12974                           
 12975                           ;incstack = 0
 12976  004002  C00F  F013         	movff	___ftdiv@f1+2,??___ftdiv
 12977  004006  6A14               	clrf	(??___ftdiv+1)& (0+255),c
 12978  004008  6A15               	clrf	(??___ftdiv+2)& (0+255),c
 12979  00400A  340E               	rlcf	___ftdiv@f1+1,w,c
 12980  00400C  3613               	rlcf	??___ftdiv& (0+255),f,c
 12981  00400E  E301               	bnc	u479_41
 12982  004010  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
 12983  004012                     u479_41:
 12984  004012  5013               	movf	??___ftdiv,w,c
 12985  004014  6E1A               	movwf	___ftdiv@exp,c
 12986  004016  501A               	movf	___ftdiv@exp,w,c
 12987  004018  A4D8               	btfss	status,2,c
 12988  00401A  D007               	goto	i2l4867
 12989  00401C  0E00               	movlw	0
 12990  00401E  6E0D               	movwf	?___ftdiv,c
 12991  004020  0E00               	movlw	0
 12992  004022  6E0E               	movwf	?___ftdiv+1,c
 12993  004024  0E00               	movlw	0
 12994  004026  6E0F               	movwf	?___ftdiv+2,c
 12995  004028  0012               	return	
 12996  00402A                     i2l4867:
 12997  00402A  C012  F013         	movff	___ftdiv@f2+2,??___ftdiv
 12998  00402E  6A14               	clrf	(??___ftdiv+1)& (0+255),c
 12999  004030  6A15               	clrf	(??___ftdiv+2)& (0+255),c
 13000  004032  3411               	rlcf	___ftdiv@f2+1,w,c
 13001  004034  3613               	rlcf	??___ftdiv& (0+255),f,c
 13002  004036  E301               	bnc	u481_41
 13003  004038  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
 13004  00403A                     u481_41:
 13005  00403A  5013               	movf	??___ftdiv,w,c
 13006  00403C  6E1B               	movwf	___ftdiv@sign,c
 13007  00403E  501B               	movf	___ftdiv@sign,w,c
 13008  004040  A4D8               	btfss	status,2,c
 13009  004042  D007               	goto	i2l4873
 13010  004044  0E00               	movlw	0
 13011  004046  6E0D               	movwf	?___ftdiv,c
 13012  004048  0E00               	movlw	0
 13013  00404A  6E0E               	movwf	?___ftdiv+1,c
 13014  00404C  0E00               	movlw	0
 13015  00404E  6E0F               	movwf	?___ftdiv+2,c
 13016  004050  0012               	return	
 13017  004052                     i2l4873:
 13018  004052  0E00               	movlw	0
 13019  004054  6E17               	movwf	___ftdiv@f3,c
 13020  004056  0E00               	movlw	0
 13021  004058  6E18               	movwf	___ftdiv@f3+1,c
 13022  00405A  0E00               	movlw	0
 13023  00405C  6E19               	movwf	___ftdiv@f3+2,c
 13024  00405E  501B               	movf	___ftdiv@sign,w,c
 13025  004060  0F89               	addlw	137
 13026  004062  5E1A               	subwf	___ftdiv@exp,f,c
 13027  004064  C00F  F01B         	movff	___ftdiv@f1+2,___ftdiv@sign
 13028  004068  5012               	movf	___ftdiv@f2+2,w,c
 13029  00406A  1A1B               	xorwf	___ftdiv@sign,f,c
 13030  00406C  0E80               	movlw	128
 13031  00406E  161B               	andwf	___ftdiv@sign,f,c
 13032  004070  8E0E               	bsf	___ftdiv@f1+1,7,c
 13033  004072  0EFF               	movlw	255
 13034  004074  160D               	andwf	___ftdiv@f1,f,c
 13035  004076  0EFF               	movlw	255
 13036  004078  160E               	andwf	___ftdiv@f1+1,f,c
 13037  00407A  0E00               	movlw	0
 13038  00407C  160F               	andwf	___ftdiv@f1+2,f,c
 13039  00407E  8E11               	bsf	___ftdiv@f2+1,7,c
 13040  004080  0EFF               	movlw	255
 13041  004082  1610               	andwf	___ftdiv@f2,f,c
 13042  004084  0EFF               	movlw	255
 13043  004086  1611               	andwf	___ftdiv@f2+1,f,c
 13044  004088  0E00               	movlw	0
 13045  00408A  1612               	andwf	___ftdiv@f2+2,f,c
 13046  00408C  0E18               	movlw	24
 13047  00408E  6E16               	movwf	___ftdiv@cntr,c
 13048  004090                     i2l4893:
 13049  004090  90D8               	bcf	status,0,c
 13050  004092  3617               	rlcf	___ftdiv@f3,f,c
 13051  004094  3618               	rlcf	___ftdiv@f3+1,f,c
 13052  004096  3619               	rlcf	___ftdiv@f3+2,f,c
 13053  004098  5010               	movf	___ftdiv@f2,w,c
 13054  00409A  5C0D               	subwf	___ftdiv@f1,w,c
 13055  00409C  5011               	movf	___ftdiv@f2+1,w,c
 13056  00409E  580E               	subwfb	___ftdiv@f1+1,w,c
 13057  0040A0  5012               	movf	___ftdiv@f2+2,w,c
 13058  0040A2  580F               	subwfb	___ftdiv@f1+2,w,c
 13059  0040A4  A0D8               	btfss	status,0,c
 13060  0040A6  D007               	goto	i2l896
 13061  0040A8  5010               	movf	___ftdiv@f2,w,c
 13062  0040AA  5E0D               	subwf	___ftdiv@f1,f,c
 13063  0040AC  5011               	movf	___ftdiv@f2+1,w,c
 13064  0040AE  5A0E               	subwfb	___ftdiv@f1+1,f,c
 13065  0040B0  5012               	movf	___ftdiv@f2+2,w,c
 13066  0040B2  5A0F               	subwfb	___ftdiv@f1+2,f,c
 13067  0040B4  8017               	bsf	___ftdiv@f3,0,c
 13068  0040B6                     i2l896:
 13069  0040B6  90D8               	bcf	status,0,c
 13070  0040B8  360D               	rlcf	___ftdiv@f1,f,c
 13071  0040BA  360E               	rlcf	___ftdiv@f1+1,f,c
 13072  0040BC  360F               	rlcf	___ftdiv@f1+2,f,c
 13073  0040BE  2E16               	decfsz	___ftdiv@cntr,f,c
 13074  0040C0  D7E7               	goto	i2l4893
 13075  0040C2  C017  F001         	movff	___ftdiv@f3,i2___ftpack@arg
 13076  0040C6  C018  F002         	movff	___ftdiv@f3+1,i2___ftpack@arg+1
 13077  0040CA  C019  F003         	movff	___ftdiv@f3+2,i2___ftpack@arg+2
 13078  0040CE  C01A  F004         	movff	___ftdiv@exp,i2___ftpack@exp
 13079  0040D2  C01B  F005         	movff	___ftdiv@sign,i2___ftpack@sign
 13080  0040D6  ECB9  F022         	call	i2___ftpack	;wreg free
 13081  0040DA  C001  F00D         	movff	?i2___ftpack,?___ftdiv
 13082  0040DE  C002  F00E         	movff	?i2___ftpack+1,?___ftdiv+1
 13083  0040E2  C003  F00F         	movff	?i2___ftpack+2,?___ftdiv+2
 13084  0040E6  0012               	return	
 13085  0040E8                     __end_of___ftdiv:
 13086                           	opt stack 0
 13087                           pclatu	equ	0xFFB
 13088                           pclath	equ	0xFFA
 13089                           tblptru	equ	0xFF8
 13090                           tblptrh	equ	0xFF7
 13091                           tblptrl	equ	0xFF6
 13092                           tablat	equ	0xFF5
 13093                           prodh	equ	0xFF4
 13094                           prodl	equ	0xFF3
 13095                           intcon	equ	0xFF2
 13096                           intcon3	equ	0xFF0
 13097                           postinc0	equ	0xFEE
 13098                           fsr0h	equ	0xFEA
 13099                           fsr0l	equ	0xFE9
 13100                           wreg	equ	0xFE8
 13101                           plusw1	equ	0xFE3
 13102                           fsr1h	equ	0xFE2
 13103                           fsr1l	equ	0xFE1
 13104                           indf2	equ	0xFDF
 13105                           postinc2	equ	0xFDE
 13106                           postdec2	equ	0xFDD
 13107                           plusw2	equ	0xFDB
 13108                           fsr2h	equ	0xFDA
 13109                           fsr2l	equ	0xFD9
 13110                           status	equ	0xFD8
 13111                           
 13112 ;; *************** function ___awtoft *****************
 13113 ;; Defined at:
 13114 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awtoft.c"
 13115 ;; Parameters:    Size  Location     Type
 13116 ;;  c               2    8[COMRAM] int 
 13117 ;; Auto vars:     Size  Location     Type
 13118 ;;  sign            1   11[COMRAM] unsigned char 
 13119 ;; Return value:  Size  Location     Type
 13120 ;;                  3    8[COMRAM] float 
 13121 ;; Registers used:
 13122 ;;		wreg, status,2, status,0, cstack
 13123 ;; Tracked objects:
 13124 ;;		On entry : 0/0
 13125 ;;		On exit  : 0/0
 13126 ;;		Unchanged: 0/0
 13127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13128 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13129 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13131 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13132 ;;Total ram usage:        4 bytes
 13133 ;; Hardware stack levels used:    1
 13134 ;; Hardware stack levels required when called:    1
 13135 ;; This function calls:
 13136 ;;		i2___ftpack
 13137 ;; This function is called by:
 13138 ;;		_checkV
 13139 ;; This function uses a non-reentrant model
 13140 ;;
 13141                           
 13142                           	psect	text50
 13143  004FF0                     __ptext50:
 13144                           	opt stack 0
 13145  004FF0                     ___awtoft:
 13146                           	opt stack 20
 13147                           
 13148                           ;incstack = 0
 13149  004FF0  0E00               	movlw	0
 13150  004FF2  6E0C               	movwf	___awtoft@sign,c
 13151  004FF4  AE0A               	btfss	___awtoft@c+1,7,c
 13152  004FF6  D006               	goto	i2l5043
 13153  004FF8  6C09               	negf	___awtoft@c,c
 13154  004FFA  1E0A               	comf	___awtoft@c+1,f,c
 13155  004FFC  B0D8               	btfsc	status,0,c
 13156  004FFE  2A0A               	incf	___awtoft@c+1,f,c
 13157  005000  0E01               	movlw	1
 13158  005002  6E0C               	movwf	___awtoft@sign,c
 13159  005004                     i2l5043:
 13160  005004  C009  F001         	movff	___awtoft@c,i2___ftpack@arg
 13161  005008  C00A  F002         	movff	___awtoft@c+1,i2___ftpack@arg+1
 13162  00500C  6A03               	clrf	i2___ftpack@arg+2,c
 13163  00500E  0E8E               	movlw	142
 13164  005010  6E04               	movwf	i2___ftpack@exp,c
 13165  005012  C00C  F005         	movff	___awtoft@sign,i2___ftpack@sign
 13166  005016  ECB9  F022         	call	i2___ftpack	;wreg free
 13167  00501A  C001  F009         	movff	?i2___ftpack,?___awtoft
 13168  00501E  C002  F00A         	movff	?i2___ftpack+1,?___awtoft+1
 13169  005022  C003  F00B         	movff	?i2___ftpack+2,?___awtoft+2
 13170  005026  0012               	return	
 13171  005028                     __end_of___awtoft:
 13172                           	opt stack 0
 13173                           pclatu	equ	0xFFB
 13174                           pclath	equ	0xFFA
 13175                           tblptru	equ	0xFF8
 13176                           tblptrh	equ	0xFF7
 13177                           tblptrl	equ	0xFF6
 13178                           tablat	equ	0xFF5
 13179                           prodh	equ	0xFF4
 13180                           prodl	equ	0xFF3
 13181                           intcon	equ	0xFF2
 13182                           intcon3	equ	0xFF0
 13183                           postinc0	equ	0xFEE
 13184                           fsr0h	equ	0xFEA
 13185                           fsr0l	equ	0xFE9
 13186                           wreg	equ	0xFE8
 13187                           plusw1	equ	0xFE3
 13188                           fsr1h	equ	0xFE2
 13189                           fsr1l	equ	0xFE1
 13190                           indf2	equ	0xFDF
 13191                           postinc2	equ	0xFDE
 13192                           postdec2	equ	0xFDD
 13193                           plusw2	equ	0xFDB
 13194                           fsr2h	equ	0xFDA
 13195                           fsr2l	equ	0xFD9
 13196                           status	equ	0xFD8
 13197                           
 13198 ;; *************** function _AD *****************
 13199 ;; Defined at:
 13200 ;;		line 4 in file "sensors.c"
 13201 ;; Parameters:    Size  Location     Type
 13202 ;;  channel         1    wreg     unsigned char 
 13203 ;; Auto vars:     Size  Location     Type
 13204 ;;  channel         1    4[COMRAM] unsigned char 
 13205 ;; Return value:  Size  Location     Type
 13206 ;;                  2    0[COMRAM] int 
 13207 ;; Registers used:
 13208 ;;		wreg, status,2, status,0
 13209 ;; Tracked objects:
 13210 ;;		On entry : 0/0
 13211 ;;		On exit  : 0/0
 13212 ;;		Unchanged: 0/0
 13213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13214 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13215 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13216 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13217 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13218 ;;Total ram usage:        5 bytes
 13219 ;; Hardware stack levels used:    1
 13220 ;; This function calls:
 13221 ;;		Nothing
 13222 ;; This function is called by:
 13223 ;;		_checkAA
 13224 ;;		_checkC
 13225 ;;		_check9
 13226 ;; This function uses a non-reentrant model
 13227 ;;
 13228                           
 13229                           	psect	text51
 13230  005144                     __ptext51:
 13231                           	opt stack 0
 13232  005144                     _AD:
 13233                           	opt stack 22
 13234                           
 13235                           ;incstack = 0
 13236                           ;AD@channel stored from wreg
 13237  005144  6E05               	movwf	AD@channel,c
 13238                           
 13239                           ;sensors.c: 6: ADCON0 = ((channel << 2));
 13240  005146  4405               	rlncf	AD@channel,w,c
 13241  005148  46E8               	rlncf	wreg,f,c
 13242  00514A  0BFC               	andlw	252
 13243  00514C  6EC2               	movwf	4034,c	;volatile
 13244                           
 13245                           ;sensors.c: 7: ADON = 1;
 13246  00514E  80C2               	bsf	4034,0,c	;volatile
 13247                           
 13248                           ;sensors.c: 8: ADCON0bits.GO = 1;
 13249  005150  82C2               	bsf	4034,1,c	;volatile
 13250  005152                     i2l302:
 13251  005152  B2C2               	btfsc	4034,1,c	;volatile
 13252  005154  D7FE               	goto	i2l302
 13253                           
 13254                           ;sensors.c: 10: return (ADRESH << 8) | ADRESL;
 13255  005156  50C3               	movf	4035,w,c	;volatile
 13256  005158  CFC4 F003          	movff	4036,??_AD	;volatile
 13257  00515C  6A04               	clrf	(??_AD+1)& (0+255),c
 13258  00515E  C003  F004         	movff	??_AD,??_AD+1
 13259  005162  6A03               	clrf	??_AD,c
 13260  005164  1003               	iorwf	??_AD,w,c
 13261  005166  6E01               	movwf	?_AD,c
 13262  005168  5004               	movf	??_AD+1,w,c
 13263  00516A  6E02               	movwf	?_AD+1,c
 13264  00516C  0012               	return	
 13265  00516E                     __end_of_AD:
 13266                           	opt stack 0
 13267                           pclatu	equ	0xFFB
 13268                           pclath	equ	0xFFA
 13269                           tblptru	equ	0xFF8
 13270                           tblptrh	equ	0xFF7
 13271                           tblptrl	equ	0xFF6
 13272                           tablat	equ	0xFF5
 13273                           prodh	equ	0xFF4
 13274                           prodl	equ	0xFF3
 13275                           intcon	equ	0xFF2
 13276                           intcon3	equ	0xFF0
 13277                           postinc0	equ	0xFEE
 13278                           fsr0h	equ	0xFEA
 13279                           fsr0l	equ	0xFE9
 13280                           wreg	equ	0xFE8
 13281                           plusw1	equ	0xFE3
 13282                           fsr1h	equ	0xFE2
 13283                           fsr1l	equ	0xFE1
 13284                           indf2	equ	0xFDF
 13285                           postinc2	equ	0xFDE
 13286                           postdec2	equ	0xFDD
 13287                           plusw2	equ	0xFDB
 13288                           fsr2h	equ	0xFDA
 13289                           fsr2l	equ	0xFD9
 13290                           status	equ	0xFD8
 13291                           
 13292 ;; *************** function _WriteRun *****************
 13293 ;; Defined at:
 13294 ;;		line 75 in file "eeprom.c"
 13295 ;; Parameters:    Size  Location     Type
 13296 ;;  sorted          2   20[COMRAM] PTR unsigned char 
 13297 ;;		 -> simulate@sorted(4), 
 13298 ;;  time            2   22[COMRAM] unsigned int 
 13299 ;; Auto vars:     Size  Location     Type
 13300 ;;  add             2   26[COMRAM] unsigned int 
 13301 ;; Return value:  Size  Location     Type
 13302 ;;                  1    wreg      void 
 13303 ;; Registers used:
 13304 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13305 ;; Tracked objects:
 13306 ;;		On entry : 0/0
 13307 ;;		On exit  : 0/0
 13308 ;;		Unchanged: 0/0
 13309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13310 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13311 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13312 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13313 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13314 ;;Total ram usage:        8 bytes
 13315 ;; Hardware stack levels used:    1
 13316 ;; Hardware stack levels required when called:    1
 13317 ;; This function calls:
 13318 ;;		_WriteEE
 13319 ;;		i2___wmul
 13320 ;; This function is called by:
 13321 ;;		_simulate
 13322 ;; This function uses a non-reentrant model
 13323 ;;
 13324                           
 13325                           	psect	text52
 13326  003282                     __ptext52:
 13327                           	opt stack 0
 13328  003282                     _WriteRun:
 13329                           	opt stack 22
 13330                           
 13331                           ;eeprom.c: 76: unsigned int add = ++Latest;
 13332                           
 13333                           ;incstack = 0
 13334  003282  0100               	movlb	0	; () banked
 13335  003284  2BD8               	incf	_Latest& (0+255),f,b
 13336  003286  C0D8  F01B         	movff	_Latest,WriteRun@add
 13337  00328A  6A1C               	clrf	WriteRun@add+1,c
 13338                           
 13339                           ; BSR set to: 0
 13340                           ;eeprom.c: 77: if (add > 3) {
 13341  00328C  501C               	movf	WriteRun@add+1,w,c
 13342  00328E  E104               	bnz	i2u694_40
 13343  003290  0E04               	movlw	4
 13344  003292  5C1B               	subwf	WriteRun@add,w,c
 13345  003294  A0D8               	btfss	status,0,c
 13346  003296  D006               	goto	i2l6475
 13347  003298                     i2u694_40:
 13348                           
 13349                           ; BSR set to: 0
 13350                           ;eeprom.c: 78: add -= 4;
 13351  003298  0E04               	movlw	4
 13352  00329A  5E1B               	subwf	WriteRun@add,f,c
 13353  00329C  0E00               	movlw	0
 13354  00329E  5A1C               	subwfb	WriteRun@add+1,f,c
 13355                           
 13356                           ; BSR set to: 0
 13357                           ;eeprom.c: 79: Latest = add;
 13358  0032A0  C01B  F0D8         	movff	WriteRun@add,_Latest
 13359  0032A4                     i2l6475:
 13360                           
 13361                           ; BSR set to: 0
 13362                           ;eeprom.c: 80: }
 13363                           ;eeprom.c: 81: add *= 5;
 13364  0032A4  C01B  F00F         	movff	WriteRun@add,i2___wmul@multiplier
 13365  0032A8  C01C  F010         	movff	WriteRun@add+1,i2___wmul@multiplier+1
 13366  0032AC  0E00               	movlw	0
 13367  0032AE  6E12               	movwf	i2___wmul@multiplicand+1,c
 13368  0032B0  0E05               	movlw	5
 13369  0032B2  6E11               	movwf	i2___wmul@multiplicand,c
 13370  0032B4  ECDD  F028         	call	i2___wmul	;wreg free
 13371  0032B8  C00F  F01B         	movff	?i2___wmul,WriteRun@add
 13372  0032BC  C010  F01C         	movff	?i2___wmul+1,WriteRun@add+1
 13373                           
 13374                           ;eeprom.c: 82: WriteEE(add++ *8, time);
 13375  0032C0  C01B  F019         	movff	WriteRun@add,??_WriteRun
 13376  0032C4  C01C  F01A         	movff	WriteRun@add+1,??_WriteRun+1
 13377  0032C8  90D8               	bcf	status,0,c
 13378  0032CA  3619               	rlcf	??_WriteRun,f,c
 13379  0032CC  361A               	rlcf	??_WriteRun+1,f,c
 13380  0032CE  90D8               	bcf	status,0,c
 13381  0032D0  3619               	rlcf	??_WriteRun,f,c
 13382  0032D2  361A               	rlcf	??_WriteRun+1,f,c
 13383  0032D4  90D8               	bcf	status,0,c
 13384  0032D6  3619               	rlcf	??_WriteRun,f,c
 13385  0032D8  361A               	rlcf	??_WriteRun+1,f,c
 13386  0032DA  C019  F001         	movff	??_WriteRun,WriteEE@address
 13387  0032DE  C01A  F002         	movff	??_WriteRun+1,WriteEE@address+1
 13388  0032E2  C017  F003         	movff	WriteRun@time,WriteEE@data
 13389  0032E6  ECCA  F028         	call	_WriteEE	;wreg free
 13390  0032EA  4A1B               	infsnz	WriteRun@add,f,c
 13391  0032EC  2A1C               	incf	WriteRun@add+1,f,c
 13392                           
 13393                           ;eeprom.c: 83: WriteEE(add++ *8, sorted[0]);
 13394  0032EE  C01B  F019         	movff	WriteRun@add,??_WriteRun
 13395  0032F2  C01C  F01A         	movff	WriteRun@add+1,??_WriteRun+1
 13396  0032F6  90D8               	bcf	status,0,c
 13397  0032F8  3619               	rlcf	??_WriteRun,f,c
 13398  0032FA  361A               	rlcf	??_WriteRun+1,f,c
 13399  0032FC  90D8               	bcf	status,0,c
 13400  0032FE  3619               	rlcf	??_WriteRun,f,c
 13401  003300  361A               	rlcf	??_WriteRun+1,f,c
 13402  003302  90D8               	bcf	status,0,c
 13403  003304  3619               	rlcf	??_WriteRun,f,c
 13404  003306  361A               	rlcf	??_WriteRun+1,f,c
 13405  003308  C019  F001         	movff	??_WriteRun,WriteEE@address
 13406  00330C  C01A  F002         	movff	??_WriteRun+1,WriteEE@address+1
 13407  003310  C015  FFD9         	movff	WriteRun@sorted,fsr2l
 13408  003314  C016  FFDA         	movff	WriteRun@sorted+1,fsr2h
 13409  003318  50DF               	movf	indf2,w,c
 13410  00331A  6E03               	movwf	WriteEE@data,c
 13411  00331C  ECCA  F028         	call	_WriteEE	;wreg free
 13412  003320  4A1B               	infsnz	WriteRun@add,f,c
 13413  003322  2A1C               	incf	WriteRun@add+1,f,c
 13414                           
 13415                           ;eeprom.c: 84: WriteEE(add++ *8, sorted[1]);
 13416  003324  C01B  F019         	movff	WriteRun@add,??_WriteRun
 13417  003328  C01C  F01A         	movff	WriteRun@add+1,??_WriteRun+1
 13418  00332C  90D8               	bcf	status,0,c
 13419  00332E  3619               	rlcf	??_WriteRun,f,c
 13420  003330  361A               	rlcf	??_WriteRun+1,f,c
 13421  003332  90D8               	bcf	status,0,c
 13422  003334  3619               	rlcf	??_WriteRun,f,c
 13423  003336  361A               	rlcf	??_WriteRun+1,f,c
 13424  003338  90D8               	bcf	status,0,c
 13425  00333A  3619               	rlcf	??_WriteRun,f,c
 13426  00333C  361A               	rlcf	??_WriteRun+1,f,c
 13427  00333E  C019  F001         	movff	??_WriteRun,WriteEE@address
 13428  003342  C01A  F002         	movff	??_WriteRun+1,WriteEE@address+1
 13429  003346  EE20 F001          	lfsr	2,1
 13430  00334A  5015               	movf	WriteRun@sorted,w,c
 13431  00334C  26D9               	addwf	fsr2l,f,c
 13432  00334E  5016               	movf	WriteRun@sorted+1,w,c
 13433  003350  22DA               	addwfc	fsr2h,f,c
 13434  003352  50DF               	movf	indf2,w,c
 13435  003354  6E03               	movwf	WriteEE@data,c
 13436  003356  ECCA  F028         	call	_WriteEE	;wreg free
 13437  00335A  4A1B               	infsnz	WriteRun@add,f,c
 13438  00335C  2A1C               	incf	WriteRun@add+1,f,c
 13439                           
 13440                           ;eeprom.c: 85: WriteEE(add++ *8, sorted[2]);
 13441  00335E  C01B  F019         	movff	WriteRun@add,??_WriteRun
 13442  003362  C01C  F01A         	movff	WriteRun@add+1,??_WriteRun+1
 13443  003366  90D8               	bcf	status,0,c
 13444  003368  3619               	rlcf	??_WriteRun,f,c
 13445  00336A  361A               	rlcf	??_WriteRun+1,f,c
 13446  00336C  90D8               	bcf	status,0,c
 13447  00336E  3619               	rlcf	??_WriteRun,f,c
 13448  003370  361A               	rlcf	??_WriteRun+1,f,c
 13449  003372  90D8               	bcf	status,0,c
 13450  003374  3619               	rlcf	??_WriteRun,f,c
 13451  003376  361A               	rlcf	??_WriteRun+1,f,c
 13452  003378  C019  F001         	movff	??_WriteRun,WriteEE@address
 13453  00337C  C01A  F002         	movff	??_WriteRun+1,WriteEE@address+1
 13454  003380  EE20 F002          	lfsr	2,2
 13455  003384  5015               	movf	WriteRun@sorted,w,c
 13456  003386  26D9               	addwf	fsr2l,f,c
 13457  003388  5016               	movf	WriteRun@sorted+1,w,c
 13458  00338A  22DA               	addwfc	fsr2h,f,c
 13459  00338C  50DF               	movf	indf2,w,c
 13460  00338E  6E03               	movwf	WriteEE@data,c
 13461  003390  ECCA  F028         	call	_WriteEE	;wreg free
 13462  003394  4A1B               	infsnz	WriteRun@add,f,c
 13463  003396  2A1C               	incf	WriteRun@add+1,f,c
 13464                           
 13465                           ;eeprom.c: 86: WriteEE(add++ *8, sorted[3]);
 13466  003398  C01B  F019         	movff	WriteRun@add,??_WriteRun
 13467  00339C  C01C  F01A         	movff	WriteRun@add+1,??_WriteRun+1
 13468  0033A0  90D8               	bcf	status,0,c
 13469  0033A2  3619               	rlcf	??_WriteRun,f,c
 13470  0033A4  361A               	rlcf	??_WriteRun+1,f,c
 13471  0033A6  90D8               	bcf	status,0,c
 13472  0033A8  3619               	rlcf	??_WriteRun,f,c
 13473  0033AA  361A               	rlcf	??_WriteRun+1,f,c
 13474  0033AC  90D8               	bcf	status,0,c
 13475  0033AE  3619               	rlcf	??_WriteRun,f,c
 13476  0033B0  361A               	rlcf	??_WriteRun+1,f,c
 13477  0033B2  C019  F001         	movff	??_WriteRun,WriteEE@address
 13478  0033B6  C01A  F002         	movff	??_WriteRun+1,WriteEE@address+1
 13479  0033BA  EE20 F003          	lfsr	2,3
 13480  0033BE  5015               	movf	WriteRun@sorted,w,c
 13481  0033C0  26D9               	addwf	fsr2l,f,c
 13482  0033C2  5016               	movf	WriteRun@sorted+1,w,c
 13483  0033C4  22DA               	addwfc	fsr2h,f,c
 13484  0033C6  50DF               	movf	indf2,w,c
 13485  0033C8  6E03               	movwf	WriteEE@data,c
 13486  0033CA  ECCA  F028         	call	_WriteEE	;wreg free
 13487  0033CE  4A1B               	infsnz	WriteRun@add,f,c
 13488  0033D0  2A1C               	incf	WriteRun@add+1,f,c
 13489                           
 13490                           ;eeprom.c: 87: WriteEE(160, Latest);
 13491  0033D2  0E00               	movlw	0
 13492  0033D4  6E02               	movwf	WriteEE@address+1,c
 13493  0033D6  0EA0               	movlw	160
 13494  0033D8  6E01               	movwf	WriteEE@address,c
 13495  0033DA  C0D8  F003         	movff	_Latest,WriteEE@data
 13496  0033DE  ECCA  F028         	call	_WriteEE	;wreg free
 13497  0033E2  0012               	return		;funcret
 13498  0033E4                     __end_of_WriteRun:
 13499                           	opt stack 0
 13500                           pclatu	equ	0xFFB
 13501                           pclath	equ	0xFFA
 13502                           tblptru	equ	0xFF8
 13503                           tblptrh	equ	0xFF7
 13504                           tblptrl	equ	0xFF6
 13505                           tablat	equ	0xFF5
 13506                           prodh	equ	0xFF4
 13507                           prodl	equ	0xFF3
 13508                           intcon	equ	0xFF2
 13509                           intcon3	equ	0xFF0
 13510                           postinc0	equ	0xFEE
 13511                           fsr0h	equ	0xFEA
 13512                           fsr0l	equ	0xFE9
 13513                           wreg	equ	0xFE8
 13514                           plusw1	equ	0xFE3
 13515                           fsr1h	equ	0xFE2
 13516                           fsr1l	equ	0xFE1
 13517                           indf2	equ	0xFDF
 13518                           postinc2	equ	0xFDE
 13519                           postdec2	equ	0xFDD
 13520                           plusw2	equ	0xFDB
 13521                           fsr2h	equ	0xFDA
 13522                           fsr2l	equ	0xFD9
 13523                           status	equ	0xFD8
 13524                           
 13525 ;; *************** function _WriteEE *****************
 13526 ;; Defined at:
 13527 ;;		line 34 in file "eeprom.c"
 13528 ;; Parameters:    Size  Location     Type
 13529 ;;  address         2    0[COMRAM] unsigned int 
 13530 ;;  data            1    2[COMRAM] unsigned char 
 13531 ;; Auto vars:     Size  Location     Type
 13532 ;;		None
 13533 ;; Return value:  Size  Location     Type
 13534 ;;                  1    wreg      void 
 13535 ;; Registers used:
 13536 ;;		wreg, status,2
 13537 ;; Tracked objects:
 13538 ;;		On entry : 0/0
 13539 ;;		On exit  : 0/0
 13540 ;;		Unchanged: 0/0
 13541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13542 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13545 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13546 ;;Total ram usage:        3 bytes
 13547 ;; Hardware stack levels used:    1
 13548 ;; This function calls:
 13549 ;;		Nothing
 13550 ;; This function is called by:
 13551 ;;		_WriteRun
 13552 ;; This function uses a non-reentrant model
 13553 ;;
 13554                           
 13555                           	psect	text53
 13556  005194                     __ptext53:
 13557                           	opt stack 0
 13558  005194                     _WriteEE:
 13559                           	opt stack 22
 13560                           
 13561                           ;eeprom.c: 36: EEADRH = (unsigned char) (address >> 8);
 13562                           
 13563                           ;incstack = 0
 13564  005194  5002               	movf	WriteEE@address+1,w,c
 13565  005196  6EAA               	movwf	4010,c	;volatile
 13566                           
 13567                           ;eeprom.c: 37: EEADR = (unsigned char) address;
 13568  005198  C001  FFA9         	movff	WriteEE@address,4009	;volatile
 13569                           
 13570                           ;eeprom.c: 39: EEDATA = data;
 13571  00519C  C003  FFA8         	movff	WriteEE@data,4008	;volatile
 13572                           
 13573                           ;eeprom.c: 40: EECON1bits.EEPGD = 0;
 13574  0051A0  9EA6               	bcf	4006,7,c	;volatile
 13575                           
 13576                           ;eeprom.c: 41: EECON1bits.CFGS = 0;
 13577  0051A2  9CA6               	bcf	4006,6,c	;volatile
 13578                           
 13579                           ;eeprom.c: 42: EECON1bits.WREN = 1;
 13580  0051A4  84A6               	bsf	4006,2,c	;volatile
 13581                           
 13582                           ;eeprom.c: 46: EECON2 = 0x55;
 13583  0051A6  0E55               	movlw	85
 13584  0051A8  6EA7               	movwf	4007,c	;volatile
 13585                           
 13586                           ;eeprom.c: 47: EECON2 = 0xAA;
 13587  0051AA  0EAA               	movlw	170
 13588  0051AC  6EA7               	movwf	4007,c	;volatile
 13589                           
 13590                           ;eeprom.c: 48: EECON1bits.WR = 1;
 13591  0051AE  82A6               	bsf	4006,1,c	;volatile
 13592  0051B0                     i2l423:
 13593  0051B0  A8A1               	btfss	4001,4,c	;volatile
 13594  0051B2  D7FE               	goto	i2l423
 13595                           
 13596                           ;eeprom.c: 53: PIR2bits.EEIF = 0;
 13597  0051B4  98A1               	bcf	4001,4,c	;volatile
 13598                           
 13599                           ;eeprom.c: 54: EECON1bits.WREN = 0;
 13600  0051B6  94A6               	bcf	4006,2,c	;volatile
 13601  0051B8  0012               	return		;funcret
 13602  0051BA                     __end_of_WriteEE:
 13603                           	opt stack 0
 13604                           pclatu	equ	0xFFB
 13605                           pclath	equ	0xFFA
 13606                           tblptru	equ	0xFF8
 13607                           tblptrh	equ	0xFF7
 13608                           tblptrl	equ	0xFF6
 13609                           tablat	equ	0xFF5
 13610                           prodh	equ	0xFF4
 13611                           prodl	equ	0xFF3
 13612                           intcon	equ	0xFF2
 13613                           intcon3	equ	0xFF0
 13614                           postinc0	equ	0xFEE
 13615                           fsr0h	equ	0xFEA
 13616                           fsr0l	equ	0xFE9
 13617                           wreg	equ	0xFE8
 13618                           plusw1	equ	0xFE3
 13619                           fsr1h	equ	0xFE2
 13620                           fsr1l	equ	0xFE1
 13621                           indf2	equ	0xFDF
 13622                           postinc2	equ	0xFDE
 13623                           postdec2	equ	0xFDD
 13624                           plusw2	equ	0xFDB
 13625                           fsr2h	equ	0xFDA
 13626                           fsr2l	equ	0xFD9
 13627                           status	equ	0xFD8
 13628                           
 13629 ;; *************** function _HexDecToDec2 *****************
 13630 ;; Defined at:
 13631 ;;		line 6 in file "modules.c"
 13632 ;; Parameters:    Size  Location     Type
 13633 ;;  hex             2   20[COMRAM] unsigned int 
 13634 ;; Auto vars:     Size  Location     Type
 13635 ;;  digit           2   27[COMRAM] unsigned int 
 13636 ;;  tenth           2   25[COMRAM] unsigned int 
 13637 ;; Return value:  Size  Location     Type
 13638 ;;                  2   20[COMRAM] unsigned int 
 13639 ;; Registers used:
 13640 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 13641 ;; Tracked objects:
 13642 ;;		On entry : 0/0
 13643 ;;		On exit  : 0/0
 13644 ;;		Unchanged: 0/0
 13645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13646 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13647 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13648 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13649 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13650 ;;Total ram usage:        9 bytes
 13651 ;; Hardware stack levels used:    1
 13652 ;; Hardware stack levels required when called:    1
 13653 ;; This function calls:
 13654 ;;		i2___wmul
 13655 ;; This function is called by:
 13656 ;;		_simulate
 13657 ;; This function uses a non-reentrant model
 13658 ;;
 13659                           
 13660                           	psect	text54
 13661  004EDE                     __ptext54:
 13662                           	opt stack 0
 13663  004EDE                     _HexDecToDec2:
 13664                           	opt stack 22
 13665                           
 13666                           ;modules.c: 8: unsigned tenth = hex / 16;
 13667                           
 13668                           ;incstack = 0
 13669  004EDE  C015  F017         	movff	HexDecToDec2@hex,??_HexDecToDec2
 13670  004EE2  C016  F018         	movff	HexDecToDec2@hex+1,??_HexDecToDec2+1
 13671  004EE6  0E04               	movlw	4
 13672  004EE8  6E19               	movwf	(??_HexDecToDec2+2)& (0+255),c
 13673  004EEA                     i2u690_45:
 13674  004EEA  90D8               	bcf	status,0,c
 13675  004EEC  3218               	rrcf	??_HexDecToDec2+1,f,c
 13676  004EEE  3217               	rrcf	??_HexDecToDec2,f,c
 13677  004EF0  2E19               	decfsz	(??_HexDecToDec2+2)& (0+255),f,c
 13678  004EF2  D7FB               	goto	i2u690_45
 13679  004EF4  C017  F01A         	movff	??_HexDecToDec2,HexDecToDec2@tenth
 13680  004EF8  C018  F01B         	movff	??_HexDecToDec2+1,HexDecToDec2@tenth+1
 13681                           
 13682                           ;modules.c: 9: unsigned digit = hex % 16;
 13683  004EFC  0E0F               	movlw	15
 13684  004EFE  1415               	andwf	HexDecToDec2@hex,w,c
 13685  004F00  6E1C               	movwf	HexDecToDec2@digit,c
 13686  004F02  6A1D               	clrf	HexDecToDec2@digit+1,c
 13687                           
 13688                           ;modules.c: 10: return tenth * 10 + digit;
 13689  004F04  C01A  F00F         	movff	HexDecToDec2@tenth,i2___wmul@multiplier
 13690  004F08  C01B  F010         	movff	HexDecToDec2@tenth+1,i2___wmul@multiplier+1
 13691  004F0C  0E00               	movlw	0
 13692  004F0E  6E12               	movwf	i2___wmul@multiplicand+1,c
 13693  004F10  0E0A               	movlw	10
 13694  004F12  6E11               	movwf	i2___wmul@multiplicand,c
 13695  004F14  ECDD  F028         	call	i2___wmul	;wreg free
 13696  004F18  501C               	movf	HexDecToDec2@digit,w,c
 13697  004F1A  240F               	addwf	?i2___wmul,w,c
 13698  004F1C  6E15               	movwf	?_HexDecToDec2,c
 13699  004F1E  501D               	movf	HexDecToDec2@digit+1,w,c
 13700  004F20  2010               	addwfc	?i2___wmul+1,w,c
 13701  004F22  6E16               	movwf	?_HexDecToDec2+1,c
 13702  004F24  0012               	return	
 13703  004F26                     __end_of_HexDecToDec2:
 13704                           	opt stack 0
 13705                           pclatu	equ	0xFFB
 13706                           pclath	equ	0xFFA
 13707                           tblptru	equ	0xFF8
 13708                           tblptrh	equ	0xFF7
 13709                           tblptrl	equ	0xFF6
 13710                           tablat	equ	0xFF5
 13711                           prodh	equ	0xFF4
 13712                           prodl	equ	0xFF3
 13713                           intcon	equ	0xFF2
 13714                           intcon3	equ	0xFF0
 13715                           postinc0	equ	0xFEE
 13716                           fsr0h	equ	0xFEA
 13717                           fsr0l	equ	0xFE9
 13718                           wreg	equ	0xFE8
 13719                           plusw1	equ	0xFE3
 13720                           fsr1h	equ	0xFE2
 13721                           fsr1l	equ	0xFE1
 13722                           indf2	equ	0xFDF
 13723                           postinc2	equ	0xFDE
 13724                           postdec2	equ	0xFDD
 13725                           plusw2	equ	0xFDB
 13726                           fsr2h	equ	0xFDA
 13727                           fsr2l	equ	0xFD9
 13728                           status	equ	0xFD8
 13729                           
 13730 ;; *************** function _CW90 *****************
 13731 ;; Defined at:
 13732 ;;		line 19 in file "motors.c"
 13733 ;; Parameters:    Size  Location     Type
 13734 ;;  port            2  112[COMRAM] PTR int 
 13735 ;;		 -> simulate@portCW(6), 
 13736 ;; Auto vars:     Size  Location     Type
 13737 ;;		None
 13738 ;; Return value:  Size  Location     Type
 13739 ;;                  1    wreg      void 
 13740 ;; Registers used:
 13741 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13742 ;; Tracked objects:
 13743 ;;		On entry : 0/0
 13744 ;;		On exit  : 0/0
 13745 ;;		Unchanged: 0/0
 13746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13747 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13750 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13751 ;;Total ram usage:        2 bytes
 13752 ;; Hardware stack levels used:    1
 13753 ;; Hardware stack levels required when called:    4
 13754 ;; This function calls:
 13755 ;;		_PWMC
 13756 ;;		i2_lcdInst
 13757 ;;		i2_printf
 13758 ;; This function is called by:
 13759 ;;		_simulate
 13760 ;; This function uses a non-reentrant model
 13761 ;;
 13762                           
 13763                           	psect	text55
 13764  00508E                     __ptext55:
 13765                           	opt stack 0
 13766  00508E                     _CW90:
 13767                           	opt stack 19
 13768                           
 13769                           ;motors.c: 20: lcdInst(0b10000000);;
 13770                           
 13771                           ;incstack = 0
 13772  00508E  0E80               	movlw	128
 13773  005090  EC8C  F029         	call	i2_lcdInst
 13774                           
 13775                           ;motors.c: 21: printf("move clockwise  ");
 13776  005094  0E55               	movlw	low STR_33
 13777  005096  6E47               	movwf	i2printf@f,c
 13778  005098  0EFF               	movlw	high STR_33
 13779  00509A  6E48               	movwf	i2printf@f+1,c
 13780  00509C  EC48  F006         	call	i2_printf	;wreg free
 13781                           
 13782                           ;motors.c: 22: PWMC(3000, 96, port);
 13783  0050A0  0E0B               	movlw	11
 13784  0050A2  6E10               	movwf	PWMC@widthus+1,c
 13785  0050A4  0EB8               	movlw	184
 13786  0050A6  6E0F               	movwf	PWMC@widthus,c
 13787  0050A8  0E00               	movlw	0
 13788  0050AA  6E12               	movwf	PWMC@cycles+1,c
 13789  0050AC  0E60               	movlw	96
 13790  0050AE  6E11               	movwf	PWMC@cycles,c
 13791  0050B0  C071  F013         	movff	CW90@port,PWMC@port
 13792  0050B4  C072  F014         	movff	CW90@port+1,PWMC@port+1
 13793  0050B8  EC88  F01F         	call	_PWMC	;wreg free
 13794  0050BC  0012               	return		;funcret
 13795  0050BE                     __end_of_CW90:
 13796                           	opt stack 0
 13797                           pclatu	equ	0xFFB
 13798                           pclath	equ	0xFFA
 13799                           tblptru	equ	0xFF8
 13800                           tblptrh	equ	0xFF7
 13801                           tblptrl	equ	0xFF6
 13802                           tablat	equ	0xFF5
 13803                           prodh	equ	0xFF4
 13804                           prodl	equ	0xFF3
 13805                           intcon	equ	0xFF2
 13806                           intcon3	equ	0xFF0
 13807                           postinc0	equ	0xFEE
 13808                           fsr0h	equ	0xFEA
 13809                           fsr0l	equ	0xFE9
 13810                           wreg	equ	0xFE8
 13811                           plusw1	equ	0xFE3
 13812                           fsr1h	equ	0xFE2
 13813                           fsr1l	equ	0xFE1
 13814                           indf2	equ	0xFDF
 13815                           postinc2	equ	0xFDE
 13816                           postdec2	equ	0xFDD
 13817                           plusw2	equ	0xFDB
 13818                           fsr2h	equ	0xFDA
 13819                           fsr2l	equ	0xFD9
 13820                           status	equ	0xFD8
 13821                           
 13822 ;; *************** function _CCW90 *****************
 13823 ;; Defined at:
 13824 ;;		line 25 in file "motors.c"
 13825 ;; Parameters:    Size  Location     Type
 13826 ;;  port            2  112[COMRAM] PTR int 
 13827 ;;		 -> simulate@portCCW(6), 
 13828 ;; Auto vars:     Size  Location     Type
 13829 ;;		None
 13830 ;; Return value:  Size  Location     Type
 13831 ;;                  1    wreg      void 
 13832 ;; Registers used:
 13833 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13834 ;; Tracked objects:
 13835 ;;		On entry : 0/0
 13836 ;;		On exit  : 0/0
 13837 ;;		Unchanged: 0/0
 13838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13839 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13842 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13843 ;;Total ram usage:        2 bytes
 13844 ;; Hardware stack levels used:    1
 13845 ;; Hardware stack levels required when called:    4
 13846 ;; This function calls:
 13847 ;;		_PWMC
 13848 ;;		i2___lcd_newline
 13849 ;;		i2_printf
 13850 ;; This function is called by:
 13851 ;;		_simulate
 13852 ;; This function uses a non-reentrant model
 13853 ;;
 13854                           
 13855                           	psect	text56
 13856  0050EC                     __ptext56:
 13857                           	opt stack 0
 13858  0050EC                     _CCW90:
 13859                           	opt stack 19
 13860                           
 13861                           ;motors.c: 26: __lcd_newline();
 13862                           
 13863                           ;incstack = 0
 13864  0050EC  ECB0  F029         	call	i2___lcd_newline	;wreg free
 13865                           
 13866                           ;motors.c: 27: printf("move cclockwise    ");
 13867  0050F0  0EBD               	movlw	low STR_34
 13868  0050F2  6E47               	movwf	i2printf@f,c
 13869  0050F4  0EFE               	movlw	high STR_34
 13870  0050F6  6E48               	movwf	i2printf@f+1,c
 13871  0050F8  EC48  F006         	call	i2_printf	;wreg free
 13872                           
 13873                           ;motors.c: 28: PWMC(400, 700, port);
 13874  0050FC  0E01               	movlw	1
 13875  0050FE  6E10               	movwf	PWMC@widthus+1,c
 13876  005100  0E90               	movlw	144
 13877  005102  6E0F               	movwf	PWMC@widthus,c
 13878  005104  0E02               	movlw	2
 13879  005106  6E12               	movwf	PWMC@cycles+1,c
 13880  005108  0EBC               	movlw	188
 13881  00510A  6E11               	movwf	PWMC@cycles,c
 13882  00510C  C071  F013         	movff	CCW90@port,PWMC@port
 13883  005110  C072  F014         	movff	CCW90@port+1,PWMC@port+1
 13884  005114  EC88  F01F         	call	_PWMC	;wreg free
 13885  005118  0012               	return		;funcret
 13886  00511A                     __end_of_CCW90:
 13887                           	opt stack 0
 13888                           pclatu	equ	0xFFB
 13889                           pclath	equ	0xFFA
 13890                           tblptru	equ	0xFF8
 13891                           tblptrh	equ	0xFF7
 13892                           tblptrl	equ	0xFF6
 13893                           tablat	equ	0xFF5
 13894                           prodh	equ	0xFF4
 13895                           prodl	equ	0xFF3
 13896                           intcon	equ	0xFF2
 13897                           intcon3	equ	0xFF0
 13898                           postinc0	equ	0xFEE
 13899                           fsr0h	equ	0xFEA
 13900                           fsr0l	equ	0xFE9
 13901                           wreg	equ	0xFE8
 13902                           plusw1	equ	0xFE3
 13903                           fsr1h	equ	0xFE2
 13904                           fsr1l	equ	0xFE1
 13905                           indf2	equ	0xFDF
 13906                           postinc2	equ	0xFDE
 13907                           postdec2	equ	0xFDD
 13908                           plusw2	equ	0xFDB
 13909                           fsr2h	equ	0xFDA
 13910                           fsr2l	equ	0xFD9
 13911                           status	equ	0xFD8
 13912                           
 13913 ;; *************** function _PWMC *****************
 13914 ;; Defined at:
 13915 ;;		line 4 in file "motors.c"
 13916 ;; Parameters:    Size  Location     Type
 13917 ;;  widthus         2   14[COMRAM] int 
 13918 ;;  cycles          2   16[COMRAM] int 
 13919 ;;  port            2   18[COMRAM] PTR int 
 13920 ;;		 -> simulate@portCCW(6), simulate@portCW(6), 
 13921 ;; Auto vars:     Size  Location     Type
 13922 ;;  countdown       2   25[COMRAM] int 
 13923 ;; Return value:  Size  Location     Type
 13924 ;;                  1    wreg      void 
 13925 ;; Registers used:
 13926 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13927 ;; Tracked objects:
 13928 ;;		On entry : 0/0
 13929 ;;		On exit  : 0/0
 13930 ;;		Unchanged: 0/0
 13931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13932 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13933 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13934 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13935 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13936 ;;Total ram usage:       13 bytes
 13937 ;; Hardware stack levels used:    1
 13938 ;; Hardware stack levels required when called:    1
 13939 ;; This function calls:
 13940 ;;		i2___awdiv
 13941 ;; This function is called by:
 13942 ;;		_CW90
 13943 ;;		_CCW90
 13944 ;; This function uses a non-reentrant model
 13945 ;;
 13946                           
 13947                           	psect	text57
 13948  003F10                     __ptext57:
 13949                           	opt stack 0
 13950  003F10                     _PWMC:
 13951                           	opt stack 21
 13952                           
 13953                           ;motors.c: 5: widthus /= 10;
 13954                           
 13955                           ;incstack = 0
 13956  003F10  C00F  F007         	movff	PWMC@widthus,i2___awdiv@dividend
 13957  003F14  C010  F008         	movff	PWMC@widthus+1,i2___awdiv@dividend+1
 13958  003F18  0E00               	movlw	0
 13959  003F1A  6E0A               	movwf	i2___awdiv@divisor+1,c
 13960  003F1C  0E0A               	movlw	10
 13961  003F1E  6E09               	movwf	i2___awdiv@divisor,c
 13962  003F20  ECC1  F024         	call	i2___awdiv	;wreg free
 13963  003F24  C007  F00F         	movff	?i2___awdiv,PWMC@widthus
 13964  003F28  C008  F010         	movff	?i2___awdiv+1,PWMC@widthus+1
 13965                           
 13966                           ;motors.c: 6: widthus -= 1;
 13967  003F2C  060F               	decf	PWMC@widthus,f,c
 13968  003F2E  A0D8               	btfss	status,0,c
 13969  003F30  0610               	decf	PWMC@widthus+1,f,c
 13970                           
 13971                           ;motors.c: 7: int countdown = widthus;
 13972  003F32  C00F  F01A         	movff	PWMC@widthus,PWMC@countdown
 13973  003F36  C010  F01B         	movff	PWMC@widthus+1,PWMC@countdown+1
 13974  003F3A                     i2l5411:
 13975  003F3A  BE12               	btfsc	PWMC@cycles+1,7,c
 13976  003F3C  0012               	return	
 13977  003F3E  5012               	movf	PWMC@cycles+1,w,c
 13978  003F40  E103               	bnz	i2l260
 13979  003F42  0411               	decf	PWMC@cycles,w,c
 13980  003F44  A0D8               	btfss	status,0,c
 13981  003F46  0012               	return	
 13982  003F48                     i2l260:
 13983                           
 13984                           ;motors.c: 9: countdown = widthus;
 13985  003F48  C00F  F01A         	movff	PWMC@widthus,PWMC@countdown
 13986  003F4C  C010  F01B         	movff	PWMC@widthus+1,PWMC@countdown+1
 13987                           
 13988                           ;motors.c: 10: LATC0 = (1 ^ LATC0) & port[0];
 13989  003F50  0E00               	movlw	0
 13990  003F52  6E17               	movwf	_PWMC$1439,c
 13991  003F54  B08B               	btfsc	3979,0,c	;volatile
 13992  003F56  D00D               	goto	i2l5423
 13993  003F58  C013  FFD9         	movff	PWMC@port,fsr2l
 13994  003F5C  C014  FFDA         	movff	PWMC@port+1,fsr2h
 13995  003F60  CFDE F015          	movff	postinc2,??_PWMC
 13996  003F64  CFDD F016          	movff	postdec2,??_PWMC+1
 13997  003F68  3015               	rrcf	??_PWMC,w,c
 13998  003F6A  A0D8               	btfss	status,0,c
 13999  003F6C  D002               	goto	i2l5423
 14000  003F6E  0E01               	movlw	1
 14001  003F70  6E17               	movwf	_PWMC$1439,c
 14002  003F72                     i2l5423:
 14003  003F72  B017               	btfsc	_PWMC$1439,0,c
 14004  003F74  D002               	bra	i2u567_45
 14005  003F76  908B               	bcf	3979,0,c	;volatile
 14006  003F78  D001               	bra	i2u567_46
 14007  003F7A                     i2u567_45:
 14008  003F7A  808B               	bsf	3979,0,c	;volatile
 14009  003F7C                     i2u567_46:
 14010                           
 14011                           ;motors.c: 11: LATC1 = (1 ^ LATC1) & port[1];
 14012  003F7C  0E00               	movlw	0
 14013  003F7E  6E18               	movwf	_PWMC$1440,c
 14014  003F80  B28B               	btfsc	3979,1,c	;volatile
 14015  003F82  D00F               	goto	i2l5431
 14016  003F84  EE20 F002          	lfsr	2,2
 14017  003F88  5013               	movf	PWMC@port,w,c
 14018  003F8A  26D9               	addwf	fsr2l,f,c
 14019  003F8C  5014               	movf	PWMC@port+1,w,c
 14020  003F8E  22DA               	addwfc	fsr2h,f,c
 14021  003F90  CFDE F015          	movff	postinc2,??_PWMC
 14022  003F94  CFDD F016          	movff	postdec2,??_PWMC+1
 14023  003F98  3015               	rrcf	??_PWMC,w,c
 14024  003F9A  A0D8               	btfss	status,0,c
 14025  003F9C  D002               	goto	i2l5431
 14026  003F9E  0E01               	movlw	1
 14027  003FA0  6E18               	movwf	_PWMC$1440,c
 14028  003FA2                     i2l5431:
 14029  003FA2  B018               	btfsc	_PWMC$1440,0,c
 14030  003FA4  D002               	bra	i2u570_45
 14031  003FA6  928B               	bcf	3979,1,c	;volatile
 14032  003FA8  D001               	bra	i2u570_46
 14033  003FAA                     i2u570_45:
 14034  003FAA  828B               	bsf	3979,1,c	;volatile
 14035  003FAC                     i2u570_46:
 14036                           
 14037                           ;motors.c: 12: LATC2 = (1 ^ LATC2) & port[2];
 14038  003FAC  0E00               	movlw	0
 14039  003FAE  6E19               	movwf	_PWMC$1441,c
 14040  003FB0  B48B               	btfsc	3979,2,c	;volatile
 14041  003FB2  D00F               	goto	i2l5439
 14042  003FB4  EE20 F004          	lfsr	2,4
 14043  003FB8  5013               	movf	PWMC@port,w,c
 14044  003FBA  26D9               	addwf	fsr2l,f,c
 14045  003FBC  5014               	movf	PWMC@port+1,w,c
 14046  003FBE  22DA               	addwfc	fsr2h,f,c
 14047  003FC0  CFDE F015          	movff	postinc2,??_PWMC
 14048  003FC4  CFDD F016          	movff	postdec2,??_PWMC+1
 14049  003FC8  3015               	rrcf	??_PWMC,w,c
 14050  003FCA  A0D8               	btfss	status,0,c
 14051  003FCC  D002               	goto	i2l5439
 14052  003FCE  0E01               	movlw	1
 14053  003FD0  6E19               	movwf	_PWMC$1441,c
 14054  003FD2                     i2l5439:
 14055  003FD2  B019               	btfsc	_PWMC$1441,0,c
 14056  003FD4  D002               	bra	i2u573_45
 14057  003FD6  948B               	bcf	3979,2,c	;volatile
 14058  003FD8  D001               	bra	i2u573_46
 14059  003FDA                     i2u573_45:
 14060  003FDA  848B               	bsf	3979,2,c	;volatile
 14061  003FDC                     i2u573_46:
 14062  003FDC                     i2l5441:
 14063  003FDC  BE1B               	btfsc	PWMC@countdown+1,7,c
 14064  003FDE  D00D               	goto	i2l5449
 14065  003FE0  501B               	movf	PWMC@countdown+1,w,c
 14066  003FE2  E103               	bnz	i2l5445
 14067  003FE4  041A               	decf	PWMC@countdown,w,c
 14068  003FE6  A0D8               	btfss	status,0,c
 14069  003FE8  D008               	goto	i2l5449
 14070  003FEA                     i2l5445:
 14071                           
 14072                           ;motors.c: 14: _delay((unsigned long)((5)*(8000000/4000000.0)));
 14073  003FEA  0E03               	movlw	3
 14074  003FEC                     i2u879_47:
 14075  003FEC  2EE8               	decfsz	wreg,f,c
 14076  003FEE  D7FE               	bra	i2u879_47
 14077  003FF0  F000               	nop	
 14078  003FF2  061A               	decf	PWMC@countdown,f,c
 14079  003FF4  A0D8               	btfss	status,0,c
 14080  003FF6  061B               	decf	PWMC@countdown+1,f,c
 14081  003FF8  D7F1               	goto	i2l5441
 14082  003FFA                     i2l5449:
 14083  003FFA  0611               	decf	PWMC@cycles,f,c
 14084  003FFC  A0D8               	btfss	status,0,c
 14085  003FFE  0612               	decf	PWMC@cycles+1,f,c
 14086  004000  D79C               	goto	i2l5411
 14087  004002                     __end_of_PWMC:
 14088                           	opt stack 0
 14089                           pclatu	equ	0xFFB
 14090                           pclath	equ	0xFFA
 14091                           tblptru	equ	0xFF8
 14092                           tblptrh	equ	0xFF7
 14093                           tblptrl	equ	0xFF6
 14094                           tablat	equ	0xFF5
 14095                           prodh	equ	0xFF4
 14096                           prodl	equ	0xFF3
 14097                           intcon	equ	0xFF2
 14098                           intcon3	equ	0xFF0
 14099                           postinc0	equ	0xFEE
 14100                           fsr0h	equ	0xFEA
 14101                           fsr0l	equ	0xFE9
 14102                           wreg	equ	0xFE8
 14103                           plusw1	equ	0xFE3
 14104                           fsr1h	equ	0xFE2
 14105                           fsr1l	equ	0xFE1
 14106                           indf2	equ	0xFDF
 14107                           postinc2	equ	0xFDE
 14108                           postdec2	equ	0xFDD
 14109                           plusw2	equ	0xFDB
 14110                           fsr2h	equ	0xFDA
 14111                           fsr2l	equ	0xFD9
 14112                           status	equ	0xFD8
 14113                           
 14114 ;; *************** function _PermLog *****************
 14115 ;; Defined at:
 14116 ;;		line 90 in file "eeprom.c"
 14117 ;; Parameters:    Size  Location     Type
 14118 ;;  backruns        1    wreg     unsigned char 
 14119 ;; Auto vars:     Size  Location     Type
 14120 ;;  backruns        1    6[BANK0 ] unsigned char 
 14121 ;;  sorted          4    2[BANK0 ] unsigned char [4]
 14122 ;;  time            2    7[BANK0 ] unsigned int 
 14123 ;; Return value:  Size  Location     Type
 14124 ;;                  1    wreg      void 
 14125 ;; Registers used:
 14126 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14127 ;; Tracked objects:
 14128 ;;		On entry : 0/0
 14129 ;;		On exit  : 0/0
 14130 ;;		Unchanged: 0/0
 14131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14133 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14134 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14135 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14136 ;;Total ram usage:        9 bytes
 14137 ;; Hardware stack levels used:    1
 14138 ;; Hardware stack levels required when called:    5
 14139 ;; This function calls:
 14140 ;;		_ReadRun
 14141 ;;		_showInfo
 14142 ;;		i2___lcd_newline
 14143 ;;		i2_lcdInst
 14144 ;;		i2_printf
 14145 ;; This function is called by:
 14146 ;;		_keypressed
 14147 ;; This function uses a non-reentrant model
 14148 ;;
 14149                           
 14150                           	psect	text58
 14151  0048FE                     __ptext58:
 14152                           	opt stack 0
 14153  0048FE                     _PermLog:
 14154                           	opt stack 19
 14155                           
 14156                           ;incstack = 0
 14157                           ;PermLog@backruns stored from wreg
 14158  0048FE  0100               	movlb	0	; () banked
 14159  004900  6F86               	movwf	PermLog@backruns& (0+255),b
 14160                           
 14161                           ;eeprom.c: 91: unsigned int time;
 14162                           ;eeprom.c: 92: unsigned char sorted[] = {0, 0, 0, 0};
 14163  004902  C0C2  F082         	movff	PermLog@F3083,PermLog@sorted
 14164  004906  C0C3  F083         	movff	PermLog@F3083+1,PermLog@sorted+1
 14165  00490A  C0C4  F084         	movff	PermLog@F3083+2,PermLog@sorted+2
 14166  00490E  C0C5  F085         	movff	PermLog@F3083+3,PermLog@sorted+3
 14167                           
 14168                           ;eeprom.c: 93: ReadRun(backruns, sorted, &time);
 14169  004912  0E82               	movlw	low PermLog@sorted
 14170  004914  6E03               	movwf	ReadRun@sorted,c
 14171  004916  0E00               	movlw	high PermLog@sorted
 14172  004918  6E04               	movwf	ReadRun@sorted+1,c
 14173  00491A  0E87               	movlw	low PermLog@time
 14174  00491C  6E05               	movwf	ReadRun@time,c
 14175  00491E  0E00               	movlw	high PermLog@time
 14176  004920  6E06               	movwf	ReadRun@time+1,c
 14177  004922  0100               	movlb	0	; () banked
 14178  004924  5186               	movf	PermLog@backruns& (0+255),w,b
 14179  004926  ECDC  F01B         	call	_ReadRun
 14180                           
 14181                           ;eeprom.c: 94: lcdInst(0b10000000);;
 14182  00492A  0E80               	movlw	128
 14183  00492C  EC8C  F029         	call	i2_lcdInst
 14184                           
 14185                           ;eeprom.c: 95: printf("showing %u", backruns);
 14186  004930  0EEB               	movlw	low STR_50
 14187  004932  6E47               	movwf	i2printf@f,c
 14188  004934  0EFF               	movlw	high STR_50
 14189  004936  6E48               	movwf	i2printf@f+1,c
 14190  004938  C086  F049         	movff	PermLog@backruns,?i2_printf+2
 14191  00493C  6A4A               	clrf	?i2_printf+3,c
 14192  00493E  EC48  F006         	call	i2_printf	;wreg free
 14193                           
 14194                           ;eeprom.c: 96: __lcd_newline();
 14195  004942  ECB0  F029         	call	i2___lcd_newline	;wreg free
 14196                           
 14197                           ;eeprom.c: 97: printf("runs before");
 14198  004946  0EDF               	movlw	low STR_51
 14199  004948  6E47               	movwf	i2printf@f,c
 14200  00494A  0EFF               	movlw	high STR_51
 14201  00494C  6E48               	movwf	i2printf@f+1,c
 14202  00494E  EC48  F006         	call	i2_printf	;wreg free
 14203                           
 14204                           ;eeprom.c: 98: _delay((unsigned long)((700)*(8000000/4000.0)));
 14205  004952  0E08               	movlw	8
 14206  004954  0100               	movlb	0	; () banked
 14207  004956  6F81               	movwf	(??_PermLog+1)& (0+255),b
 14208  004958  0E1B               	movlw	27
 14209  00495A  0100               	movlb	0	; () banked
 14210  00495C  6F80               	movwf	??_PermLog& (0+255),b
 14211  00495E  0E27               	movlw	39
 14212  004960                     i2u880_47:
 14213  004960  2EE8               	decfsz	wreg,f,c
 14214  004962  D7FE               	bra	i2u880_47
 14215  004964  2F80               	decfsz	??_PermLog& (0+255),f,b
 14216  004966  D7FC               	bra	i2u880_47
 14217  004968  2F81               	decfsz	(??_PermLog+1)& (0+255),f,b
 14218  00496A  D7FA               	bra	i2u880_47
 14219                           
 14220                           ;eeprom.c: 99: showInfo(time, sorted);
 14221  00496C  C087  F071         	movff	PermLog@time,showInfo@time
 14222  004970  C088  F072         	movff	PermLog@time+1,showInfo@time+1
 14223  004974  0E82               	movlw	low PermLog@sorted
 14224  004976  6E73               	movwf	showInfo@sorted,c
 14225  004978  0E00               	movlw	high PermLog@sorted
 14226  00497A  6E74               	movwf	showInfo@sorted+1,c
 14227  00497C  ECC7  F015         	call	_showInfo	;wreg free
 14228  004980  0012               	return		;funcret
 14229  004982                     __end_of_PermLog:
 14230                           	opt stack 0
 14231                           pclatu	equ	0xFFB
 14232                           pclath	equ	0xFFA
 14233                           tblptru	equ	0xFF8
 14234                           tblptrh	equ	0xFF7
 14235                           tblptrl	equ	0xFF6
 14236                           tablat	equ	0xFF5
 14237                           prodh	equ	0xFF4
 14238                           prodl	equ	0xFF3
 14239                           intcon	equ	0xFF2
 14240                           intcon3	equ	0xFF0
 14241                           postinc0	equ	0xFEE
 14242                           fsr0h	equ	0xFEA
 14243                           fsr0l	equ	0xFE9
 14244                           wreg	equ	0xFE8
 14245                           plusw1	equ	0xFE3
 14246                           fsr1h	equ	0xFE2
 14247                           fsr1l	equ	0xFE1
 14248                           indf2	equ	0xFDF
 14249                           postinc2	equ	0xFDE
 14250                           postdec2	equ	0xFDD
 14251                           plusw2	equ	0xFDB
 14252                           fsr2h	equ	0xFDA
 14253                           fsr2l	equ	0xFD9
 14254                           status	equ	0xFD8
 14255                           
 14256 ;; *************** function _showInfo *****************
 14257 ;; Defined at:
 14258 ;;		line 23 in file "modules.c"
 14259 ;; Parameters:    Size  Location     Type
 14260 ;;  time            2  112[COMRAM] unsigned int 
 14261 ;;  sorted          2  114[COMRAM] PTR unsigned char 
 14262 ;;		 -> PermLog@sorted(4), simulate@sorted(4), 
 14263 ;; Auto vars:     Size  Location     Type
 14264 ;;  stop            2  123[COMRAM] int 
 14265 ;;  type            2  121[COMRAM] int 
 14266 ;; Return value:  Size  Location     Type
 14267 ;;                  1    wreg      void 
 14268 ;; Registers used:
 14269 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14270 ;; Tracked objects:
 14271 ;;		On entry : 0/0
 14272 ;;		On exit  : 0/0
 14273 ;;		Unchanged: 0/0
 14274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14275 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14276 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14277 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14278 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14279 ;;Total ram usage:       13 bytes
 14280 ;; Hardware stack levels used:    1
 14281 ;; Hardware stack levels required when called:    4
 14282 ;; This function calls:
 14283 ;;		_captureKeypad
 14284 ;;		i2___lcd_newline
 14285 ;;		i2_lcdInst
 14286 ;;		i2_printf
 14287 ;; This function is called by:
 14288 ;;		_simulate
 14289 ;;		_PermLog
 14290 ;; This function uses a non-reentrant model
 14291 ;;
 14292                           
 14293                           	psect	text59
 14294  002B8E                     __ptext59:
 14295                           	opt stack 0
 14296  002B8E                     _showInfo:
 14297                           	opt stack 19
 14298                           
 14299                           ;modules.c: 24: lcdInst(0b10000000);;
 14300                           
 14301                           ;incstack = 0
 14302  002B8E  0E80               	movlw	128
 14303  002B90  EC8C  F029         	call	i2_lcdInst
 14304                           
 14305                           ;modules.c: 25: printf("Press a number          ");
 14306  002B94  0E92               	movlw	low STR_19
 14307  002B96  6E47               	movwf	i2printf@f,c
 14308  002B98  0EFC               	movlw	high STR_19
 14309  002B9A  6E48               	movwf	i2printf@f+1,c
 14310  002B9C  EC48  F006         	call	i2_printf	;wreg free
 14311                           
 14312                           ;modules.c: 26: __lcd_newline();
 14313  002BA0  ECB0  F029         	call	i2___lcd_newline	;wreg free
 14314                           
 14315                           ;modules.c: 27: printf("For more info          ");
 14316  002BA4  0EDB               	movlw	low STR_20
 14317  002BA6  6E47               	movwf	i2printf@f,c
 14318  002BA8  0EFC               	movlw	high STR_20
 14319  002BAA  6E48               	movwf	i2printf@f+1,c
 14320  002BAC  EC48  F006         	call	i2_printf	;wreg free
 14321                           
 14322                           ;modules.c: 28: int type = 0;
 14323  002BB0  0E00               	movlw	0
 14324  002BB2  6E7B               	movwf	showInfo@type+1,c
 14325  002BB4  0E00               	movlw	0
 14326  002BB6  6E7A               	movwf	showInfo@type,c
 14327                           
 14328                           ;modules.c: 29: int stop = 0;
 14329  002BB8  0E00               	movlw	0
 14330  002BBA  6E7D               	movwf	showInfo@stop+1,c
 14331  002BBC  0E00               	movlw	0
 14332  002BBE  D0D2               	goto	L6
 14333  002BC0                     i2l6419:
 14334                           
 14335                           ;modules.c: 31: type = captureKeypad();
 14336  002BC0  EC22  F029         	call	_captureKeypad	;wreg free
 14337  002BC4  C001  F07A         	movff	?_captureKeypad,showInfo@type
 14338  002BC8  C002  F07B         	movff	?_captureKeypad+1,showInfo@type+1
 14339                           
 14340                           ;modules.c: 32: switch (type) {
 14341  002BCC  D0CD               	goto	i2l6459
 14342  002BCE                     i2l6421:
 14343                           
 14344                           ;modules.c: 34: lcdInst(0b10000000);;
 14345  002BCE  0E80               	movlw	128
 14346  002BD0  EC8C  F029         	call	i2_lcdInst
 14347                           
 14348                           ;modules.c: 35: printf("Time Elapsed:          ");
 14349  002BD4  0EAB               	movlw	low STR_21
 14350  002BD6  6E47               	movwf	i2printf@f,c
 14351  002BD8  0EFC               	movlw	high STR_21
 14352  002BDA  6E48               	movwf	i2printf@f+1,c
 14353  002BDC  EC48  F006         	call	i2_printf	;wreg free
 14354                           
 14355                           ;modules.c: 36: __lcd_newline();
 14356  002BE0  ECB0  F029         	call	i2___lcd_newline	;wreg free
 14357                           
 14358                           ;modules.c: 37: printf("%u seconds          ", time);
 14359  002BE4  0E01               	movlw	low STR_22
 14360  002BE6  6E47               	movwf	i2printf@f,c
 14361  002BE8  0EFE               	movlw	high STR_22
 14362  002BEA  6E48               	movwf	i2printf@f+1,c
 14363  002BEC  C071  F049         	movff	showInfo@time,?i2_printf+2
 14364  002BF0  C072  F04A         	movff	showInfo@time+1,?i2_printf+3
 14365  002BF4  EC48  F006         	call	i2_printf	;wreg free
 14366                           
 14367                           ;modules.c: 38: break;
 14368  002BF8  D0D6               	goto	i2l6461
 14369  002BFA                     i2l6427:
 14370                           
 14371                           ;modules.c: 40: lcdInst(0b10000000);;
 14372  002BFA  0E80               	movlw	128
 14373  002BFC  EC8C  F029         	call	i2_lcdInst
 14374                           
 14375                           ;modules.c: 41: printf("Total Sorted:          ");
 14376  002C00  0EC3               	movlw	low STR_23
 14377  002C02  6E47               	movwf	i2printf@f,c
 14378  002C04  0EFC               	movlw	high STR_23
 14379  002C06  6E48               	movwf	i2printf@f+1,c
 14380  002C08  EC48  F006         	call	i2_printf	;wreg free
 14381                           
 14382                           ;modules.c: 42: __lcd_newline();
 14383  002C0C  ECB0  F029         	call	i2___lcd_newline	;wreg free
 14384                           
 14385                           ;modules.c: 43: printf("%d batteries          ", sorted[0] + sorted[1] + sorted[2] + sor
      +                          ted[3]);
 14386  002C10  0E69               	movlw	low STR_24
 14387  002C12  6E47               	movwf	i2printf@f,c
 14388  002C14  0EFD               	movlw	high STR_24
 14389  002C16  6E48               	movwf	i2printf@f+1,c
 14390  002C18  EE20 F003          	lfsr	2,3
 14391  002C1C  5073               	movf	showInfo@sorted,w,c
 14392  002C1E  26D9               	addwf	fsr2l,f,c
 14393  002C20  5074               	movf	showInfo@sorted+1,w,c
 14394  002C22  22DA               	addwfc	fsr2h,f,c
 14395  002C24  50DF               	movf	indf2,w,c
 14396  002C26  6E75               	movwf	??_showInfo& (0+255),c
 14397  002C28  C073  FFD9         	movff	showInfo@sorted,fsr2l
 14398  002C2C  C074  FFDA         	movff	showInfo@sorted+1,fsr2h
 14399  002C30  50DF               	movf	indf2,w,c
 14400  002C32  6E76               	movwf	(??_showInfo+1)& (0+255),c
 14401  002C34  6A77               	clrf	(??_showInfo+2)& (0+255),c
 14402  002C36  EE20 F001          	lfsr	2,1
 14403  002C3A  5073               	movf	showInfo@sorted,w,c
 14404  002C3C  26D9               	addwf	fsr2l,f,c
 14405  002C3E  5074               	movf	showInfo@sorted+1,w,c
 14406  002C40  22DA               	addwfc	fsr2h,f,c
 14407  002C42  50DF               	movf	indf2,w,c
 14408  002C44  6E78               	movwf	(??_showInfo+3)& (0+255),c
 14409  002C46  5078               	movf	??_showInfo+3,w,c
 14410  002C48  2676               	addwf	??_showInfo+1,f,c
 14411  002C4A  0E00               	movlw	0
 14412  002C4C  2277               	addwfc	??_showInfo+2,f,c
 14413  002C4E  EE20 F002          	lfsr	2,2
 14414  002C52  5073               	movf	showInfo@sorted,w,c
 14415  002C54  26D9               	addwf	fsr2l,f,c
 14416  002C56  5074               	movf	showInfo@sorted+1,w,c
 14417  002C58  22DA               	addwfc	fsr2h,f,c
 14418  002C5A  50DF               	movf	indf2,w,c
 14419  002C5C  6E79               	movwf	(??_showInfo+4)& (0+255),c
 14420  002C5E  5079               	movf	??_showInfo+4,w,c
 14421  002C60  2676               	addwf	??_showInfo+1,f,c
 14422  002C62  0E00               	movlw	0
 14423  002C64  2277               	addwfc	??_showInfo+2,f,c
 14424  002C66  5075               	movf	??_showInfo,w,c
 14425  002C68  2476               	addwf	??_showInfo+1,w,c
 14426  002C6A  6E49               	movwf	?i2_printf+2,c
 14427  002C6C  0E00               	movlw	0
 14428  002C6E  2077               	addwfc	??_showInfo+2,w,c
 14429  002C70  6E4A               	movwf	?i2_printf+3,c
 14430  002C72  EC48  F006         	call	i2_printf	;wreg free
 14431                           
 14432                           ;modules.c: 44: break;
 14433  002C76  D097               	goto	i2l6461
 14434  002C78                     i2l6433:
 14435                           
 14436                           ;modules.c: 46: lcdInst(0b10000000);;
 14437  002C78  0E80               	movlw	128
 14438  002C7A  EC8C  F029         	call	i2_lcdInst
 14439                           
 14440                           ;modules.c: 47: printf("AA Sorted:          ");
 14441  002C7E  0ED7               	movlw	low STR_25
 14442  002C80  6E47               	movwf	i2printf@f,c
 14443  002C82  0EFD               	movlw	high STR_25
 14444  002C84  6E48               	movwf	i2printf@f+1,c
 14445  002C86  EC48  F006         	call	i2_printf	;wreg free
 14446                           
 14447                           ;modules.c: 48: __lcd_newline();
 14448  002C8A  ECB0  F029         	call	i2___lcd_newline	;wreg free
 14449                           
 14450                           ;modules.c: 49: printf("%d             ", sorted[0]);
 14451  002C8E  0E97               	movlw	low STR_26
 14452  002C90  6E47               	movwf	i2printf@f,c
 14453  002C92  0EFF               	movlw	high STR_26
 14454  002C94  6E48               	movwf	i2printf@f+1,c
 14455  002C96  C073  FFD9         	movff	showInfo@sorted,fsr2l
 14456  002C9A  C074  FFDA         	movff	showInfo@sorted+1,fsr2h
 14457  002C9E  50DF               	movf	indf2,w,c
 14458  002CA0  6E75               	movwf	??_showInfo& (0+255),c
 14459  002CA2  5075               	movf	??_showInfo,w,c
 14460  002CA4  6E49               	movwf	?i2_printf+2,c
 14461  002CA6  6A4A               	clrf	?i2_printf+3,c
 14462  002CA8  EC48  F006         	call	i2_printf	;wreg free
 14463                           
 14464                           ;modules.c: 50: break;
 14465  002CAC  D07C               	goto	i2l6461
 14466  002CAE                     i2l6439:
 14467                           
 14468                           ;modules.c: 52: lcdInst(0b10000000);;
 14469  002CAE  0E80               	movlw	128
 14470  002CB0  EC8C  F029         	call	i2_lcdInst
 14471                           
 14472                           ;modules.c: 53: printf("C Sorted:          ");
 14473  002CB4  0ED1               	movlw	low STR_27
 14474  002CB6  6E47               	movwf	i2printf@f,c
 14475  002CB8  0EFE               	movlw	high STR_27
 14476  002CBA  6E48               	movwf	i2printf@f+1,c
 14477  002CBC  EC48  F006         	call	i2_printf	;wreg free
 14478                           
 14479                           ;modules.c: 54: __lcd_newline();
 14480  002CC0  ECB0  F029         	call	i2___lcd_newline	;wreg free
 14481                           
 14482                           ;modules.c: 55: printf("%d             ", sorted[1]);
 14483  002CC4  0E97               	movlw	low STR_26
 14484  002CC6  6E47               	movwf	i2printf@f,c
 14485  002CC8  0EFF               	movlw	high STR_26
 14486  002CCA  6E48               	movwf	i2printf@f+1,c
 14487  002CCC  EE20 F001          	lfsr	2,1
 14488  002CD0  5073               	movf	showInfo@sorted,w,c
 14489  002CD2  26D9               	addwf	fsr2l,f,c
 14490  002CD4  5074               	movf	showInfo@sorted+1,w,c
 14491  002CD6  22DA               	addwfc	fsr2h,f,c
 14492  002CD8  50DF               	movf	indf2,w,c
 14493  002CDA  6E75               	movwf	??_showInfo& (0+255),c
 14494  002CDC  5075               	movf	??_showInfo,w,c
 14495  002CDE  6E49               	movwf	?i2_printf+2,c
 14496  002CE0  6A4A               	clrf	?i2_printf+3,c
 14497  002CE2  EC48  F006         	call	i2_printf	;wreg free
 14498                           
 14499                           ;modules.c: 56: break;
 14500  002CE6  D05F               	goto	i2l6461
 14501  002CE8                     i2l6445:
 14502                           
 14503                           ;modules.c: 58: lcdInst(0b10000000);;
 14504  002CE8  0E80               	movlw	128
 14505  002CEA  EC8C  F029         	call	i2_lcdInst
 14506                           
 14507                           ;modules.c: 59: printf("9V Sorted:          ");
 14508  002CEE  0EEC               	movlw	low STR_29
 14509  002CF0  6E47               	movwf	i2printf@f,c
 14510  002CF2  0EFD               	movlw	high STR_29
 14511  002CF4  6E48               	movwf	i2printf@f+1,c
 14512  002CF6  EC48  F006         	call	i2_printf	;wreg free
 14513                           
 14514                           ;modules.c: 60: __lcd_newline();
 14515  002CFA  ECB0  F029         	call	i2___lcd_newline	;wreg free
 14516                           
 14517                           ;modules.c: 61: printf("%d             ", sorted[2]);
 14518  002CFE  0E97               	movlw	low STR_26
 14519  002D00  6E47               	movwf	i2printf@f,c
 14520  002D02  0EFF               	movlw	high STR_26
 14521  002D04  6E48               	movwf	i2printf@f+1,c
 14522  002D06  EE20 F002          	lfsr	2,2
 14523  002D0A  5073               	movf	showInfo@sorted,w,c
 14524  002D0C  26D9               	addwf	fsr2l,f,c
 14525  002D0E  5074               	movf	showInfo@sorted+1,w,c
 14526  002D10  22DA               	addwfc	fsr2h,f,c
 14527  002D12  50DF               	movf	indf2,w,c
 14528  002D14  6E75               	movwf	??_showInfo& (0+255),c
 14529  002D16  5075               	movf	??_showInfo,w,c
 14530  002D18  6E49               	movwf	?i2_printf+2,c
 14531  002D1A  6A4A               	clrf	?i2_printf+3,c
 14532  002D1C  EC48  F006         	call	i2_printf	;wreg free
 14533                           
 14534                           ;modules.c: 62: break;
 14535  002D20  D042               	goto	i2l6461
 14536  002D22                     i2l6451:
 14537                           
 14538                           ;modules.c: 64: lcdInst(0b10000000);;
 14539  002D22  0E80               	movlw	128
 14540  002D24  EC8C  F029         	call	i2_lcdInst
 14541                           
 14542                           ;modules.c: 65: printf("Uncharged:          ");
 14543  002D28  0EC2               	movlw	low STR_31
 14544  002D2A  6E47               	movwf	i2printf@f,c
 14545  002D2C  0EFD               	movlw	high STR_31
 14546  002D2E  6E48               	movwf	i2printf@f+1,c
 14547  002D30  EC48  F006         	call	i2_printf	;wreg free
 14548                           
 14549                           ;modules.c: 66: __lcd_newline();
 14550  002D34  ECB0  F029         	call	i2___lcd_newline	;wreg free
 14551                           
 14552                           ;modules.c: 67: printf("%d             ", sorted[3]);
 14553  002D38  0E97               	movlw	low STR_26
 14554  002D3A  6E47               	movwf	i2printf@f,c
 14555  002D3C  0EFF               	movlw	high STR_26
 14556  002D3E  6E48               	movwf	i2printf@f+1,c
 14557  002D40  EE20 F003          	lfsr	2,3
 14558  002D44  5073               	movf	showInfo@sorted,w,c
 14559  002D46  26D9               	addwf	fsr2l,f,c
 14560  002D48  5074               	movf	showInfo@sorted+1,w,c
 14561  002D4A  22DA               	addwfc	fsr2h,f,c
 14562  002D4C  50DF               	movf	indf2,w,c
 14563  002D4E  6E75               	movwf	??_showInfo& (0+255),c
 14564  002D50  5075               	movf	??_showInfo,w,c
 14565  002D52  6E49               	movwf	?i2_printf+2,c
 14566  002D54  6A4A               	clrf	?i2_printf+3,c
 14567  002D56  EC48  F006         	call	i2_printf	;wreg free
 14568                           
 14569                           ;modules.c: 68: break;
 14570  002D5A  D025               	goto	i2l6461
 14571  002D5C                     i2l231:
 14572  002D5C  00FF               	reset		;# 
 14573  002D5E                     i2l6457:
 14574                           
 14575                           ;modules.c: 72: stop = 1;
 14576  002D5E  0E00               	movlw	0
 14577  002D60  6E7D               	movwf	showInfo@stop+1,c
 14578  002D62  0E01               	movlw	1
 14579  002D64                     L6:
 14580  002D64  6E7C               	movwf	showInfo@stop,c
 14581                           
 14582                           ;modules.c: 73: }
 14583  002D66  D01F               	goto	i2l6461
 14584  002D68                     i2l6459:
 14585  002D68  C07A  F075         	movff	showInfo@type,??_showInfo
 14586  002D6C  C07B  F076         	movff	showInfo@type+1,??_showInfo+1
 14587                           
 14588                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14589                           ; Switch size 1, requested type "space"
 14590                           ; Number of cases is 1, Range of values is 0 to 0
 14591                           ; switch strategies available:
 14592                           ; Name         Instructions Cycles
 14593                           ; simple_byte            4     3 (average)
 14594                           ;	Chosen strategy is simple_byte
 14595  002D70  5076               	movf	??_showInfo+1,w,c
 14596  002D72  0A00               	xorlw	0	; case 0
 14597  002D74  A4D8               	btfss	status,2,c
 14598  002D76  D7F3               	goto	i2l6457
 14599                           
 14600                           ; Switch size 1, requested type "space"
 14601                           ; Number of cases is 7, Range of values is 0 to 15
 14602                           ; switch strategies available:
 14603                           ; Name         Instructions Cycles
 14604                           ; simple_byte           22    12 (average)
 14605                           ;	Chosen strategy is simple_byte
 14606  002D78  5075               	movf	??_showInfo,w,c
 14607  002D7A  0A00               	xorlw	0	; case 0
 14608  002D7C  B4D8               	btfsc	status,2,c
 14609  002D7E  D727               	goto	i2l6421
 14610  002D80  0A01               	xorlw	1	; case 1
 14611  002D82  B4D8               	btfsc	status,2,c
 14612  002D84  D73A               	goto	i2l6427
 14613  002D86  0A03               	xorlw	3	; case 2
 14614  002D88  B4D8               	btfsc	status,2,c
 14615  002D8A  D776               	goto	i2l6433
 14616  002D8C  0A01               	xorlw	1	; case 3
 14617  002D8E  B4D8               	btfsc	status,2,c
 14618  002D90  D78E               	goto	i2l6439
 14619  002D92  0A07               	xorlw	7	; case 4
 14620  002D94  B4D8               	btfsc	status,2,c
 14621  002D96  D7A8               	goto	i2l6445
 14622  002D98  0A01               	xorlw	1	; case 5
 14623  002D9A  B4D8               	btfsc	status,2,c
 14624  002D9C  D7C2               	goto	i2l6451
 14625  002D9E  0A0A               	xorlw	10	; case 15
 14626  002DA0  B4D8               	btfsc	status,2,c
 14627  002DA2  D7DC               	goto	i2l231
 14628  002DA4  D7DC               	goto	i2l6457
 14629  002DA6                     i2l6461:
 14630  002DA6  507C               	movf	showInfo@stop,w,c
 14631  002DA8  107D               	iorwf	showInfo@stop+1,w,c
 14632  002DAA  A4D8               	btfss	status,2,c
 14633  002DAC  0012               	return	
 14634  002DAE  D708               	goto	i2l6419
 14635  002DB0                     __end_of_showInfo:
 14636                           	opt stack 0
 14637                           pclatu	equ	0xFFB
 14638                           pclath	equ	0xFFA
 14639                           tblptru	equ	0xFF8
 14640                           tblptrh	equ	0xFF7
 14641                           tblptrl	equ	0xFF6
 14642                           tablat	equ	0xFF5
 14643                           prodh	equ	0xFF4
 14644                           prodl	equ	0xFF3
 14645                           intcon	equ	0xFF2
 14646                           intcon3	equ	0xFF0
 14647                           postinc0	equ	0xFEE
 14648                           fsr0h	equ	0xFEA
 14649                           fsr0l	equ	0xFE9
 14650                           wreg	equ	0xFE8
 14651                           plusw1	equ	0xFE3
 14652                           fsr1h	equ	0xFE2
 14653                           fsr1l	equ	0xFE1
 14654                           indf2	equ	0xFDF
 14655                           postinc2	equ	0xFDE
 14656                           postdec2	equ	0xFDD
 14657                           plusw2	equ	0xFDB
 14658                           fsr2h	equ	0xFDA
 14659                           fsr2l	equ	0xFD9
 14660                           status	equ	0xFD8
 14661                           
 14662 ;; *************** function i2_printf *****************
 14663 ;; Defined at:
 14664 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
 14665 ;; Parameters:    Size  Location     Type
 14666 ;;  f               2   70[COMRAM] PTR const unsigned char 
 14667 ;;		 -> STR_51(12), STR_50(11), STR_49(16), STR_48(23), 
 14668 ;;		 -> STR_47(21), STR_46(14), STR_45(15), STR_44(22), 
 14669 ;;		 -> STR_43(20), STR_42(13), STR_41(16), STR_40(23), 
 14670 ;;		 -> STR_39(21), STR_38(14), STR_37(18), STR_36(18), 
 14671 ;;		 -> STR_35(20), STR_34(20), STR_33(17), STR_32(16), 
 14672 ;;		 -> STR_31(21), STR_30(16), STR_29(21), STR_28(16), 
 14673 ;;		 -> STR_27(20), STR_26(16), STR_25(21), STR_24(23), 
 14674 ;;		 -> STR_23(24), STR_22(21), STR_21(24), STR_20(24), 
 14675 ;;		 -> STR_19(25), STR_18(19), STR_17(24), STR_16(24), 
 14676 ;;		 -> STR_15(27), STR_14(17), STR_13(21), STR_12(21), 
 14677 ;;		 -> STR_11(21), STR_10(21), STR_9(20), STR_8(21), 
 14678 ;;		 -> STR_7(21), STR_6(20), STR_5(22), STR_4(22), 
 14679 ;;		 -> STR_3(21), STR_2(24), STR_1(9), 
 14680 ;; Auto vars:     Size  Location     Type
 14681 ;;  printf          4  100[COMRAM] unsigned long 
 14682 ;;  printf          4   94[COMRAM] struct .
 14683 ;;  printf          3  106[COMRAM] struct .
 14684 ;;  printf          2  109[COMRAM] int 
 14685 ;;  printf          2  104[COMRAM] unsigned short 
 14686 ;;  printf          2   98[COMRAM] int 
 14687 ;;  printf          2   92[COMRAM] int 
 14688 ;;  printf          2   90[COMRAM] PTR void [1]
 14689 ;;		 -> ?i2_printf(2), ?_printf(2), 
 14690 ;;  printf          2   88[COMRAM] unsigned int 
 14691 ;;  printf          2   85[COMRAM] PTR const unsigned char 
 14692 ;;		 -> printf@c(1), 
 14693 ;;  printf          1  111[COMRAM] char 
 14694 ;;  printf          1   87[COMRAM] unsigned char 
 14695 ;;  printf          1    0        unsigned char 
 14696 ;; Return value:  Size  Location     Type
 14697 ;;                  2   70[COMRAM] int 
 14698 ;; Registers used:
 14699 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14700 ;; Tracked objects:
 14701 ;;		On entry : 0/0
 14702 ;;		On exit  : 0/0
 14703 ;;		Unchanged: 0/0
 14704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14705 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14706 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14707 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14708 ;;      Totals:        42       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14709 ;;Total ram usage:       42 bytes
 14710 ;; Hardware stack levels used:    1
 14711 ;; Hardware stack levels required when called:    3
 14712 ;; This function calls:
 14713 ;;		i2___awdiv
 14714 ;;		i2___ftadd
 14715 ;;		i2___ftge
 14716 ;;		i2___ftmul
 14717 ;;		i2___ftneg
 14718 ;;		i2___ftsub
 14719 ;;		i2___fttol
 14720 ;;		i2___lldiv
 14721 ;;		i2___llmod
 14722 ;;		i2___lltoft
 14723 ;;		i2___wmul
 14724 ;;		i2__div_to_l_
 14725 ;;		i2__tdiv_to_l_
 14726 ;;		i2_fround
 14727 ;;		i2_isdigit
 14728 ;;		i2_putch
 14729 ;;		i2_scale
 14730 ;; This function is called by:
 14731 ;;		_simulate
 14732 ;;		_showInfo
 14733 ;;		_CW90
 14734 ;;		_CCW90
 14735 ;;		_stopMoving
 14736 ;;		_checkV
 14737 ;;		_checkAA
 14738 ;;		_checkC
 14739 ;;		_check9
 14740 ;;		_PermLog
 14741 ;; This function uses a non-reentrant model
 14742 ;;
 14743                           
 14744                           	psect	text60
 14745  000C90                     __ptext60:
 14746                           	opt stack 0
 14747  000C90                     i2_printf:
 14748                           	opt stack 20
 14749                           
 14750                           ;doprnt.c: 466: va_list ap;
 14751                           ;doprnt.c: 499: signed char c;
 14752                           ;doprnt.c: 501: int width;
 14753                           ;doprnt.c: 504: int prec;
 14754                           ;doprnt.c: 508: unsigned short flag;
 14755                           ;doprnt.c: 515: char d;
 14756                           ;doprnt.c: 516: double fval;
 14757                           ;doprnt.c: 517: int exp;
 14758                           ;doprnt.c: 523: union {
 14759                           ;doprnt.c: 524: unsigned long vd;
 14760                           ;doprnt.c: 525: double integ;
 14761                           ;doprnt.c: 526: } tmpval;
 14762                           ;doprnt.c: 528: unsigned long val;
 14763                           ;doprnt.c: 529: unsigned len;
 14764                           ;doprnt.c: 530: const char * cp;
 14765                           ;doprnt.c: 533: *ap = __va_start();
 14766                           
 14767                           ;incstack = 0
 14768  000C90  0E49               	movlw	low (?i2_printf+2)
 14769  000C92  6E5B               	movwf	i2printf@ap,c
 14770  000C94  0E00               	movlw	high (?i2_printf+2)
 14771  000C96  6E5C               	movwf	i2printf@ap+1,c
 14772                           
 14773                           ;doprnt.c: 536: while(c = *f++) {
 14774  000C98  EF60  F00B         	goto	i2l5365
 14775  000C9C                     i2l5055:
 14776                           
 14777                           ;doprnt.c: 538: if(c != '%')
 14778  000C9C  0E25               	movlw	37
 14779  000C9E  1870               	xorwf	i2printf@c,w,c
 14780  000CA0  B4D8               	btfsc	status,2,c
 14781  000CA2  D005               	goto	i2l5059
 14782                           
 14783                           ;doprnt.c: 540: {
 14784                           ;doprnt.c: 541: (putch(c) );
 14785  000CA4  5070               	movf	i2printf@c,w,c
 14786  000CA6  EC86  F029         	call	i2_putch
 14787                           
 14788                           ;doprnt.c: 542: continue;
 14789  000CAA  EF60  F00B         	goto	i2l5365
 14790  000CAE                     i2l5059:
 14791                           
 14792                           ;doprnt.c: 543: }
 14793                           ;doprnt.c: 546: width = 0;
 14794  000CAE  0E00               	movlw	0
 14795  000CB0  6E6F               	movwf	i2printf@width+1,c
 14796  000CB2  0E00               	movlw	0
 14797  000CB4  6E6E               	movwf	i2printf@width,c
 14798                           
 14799                           ;doprnt.c: 548: flag = 0;
 14800  000CB6  0E00               	movlw	0
 14801  000CB8  6E6A               	movwf	i2printf@flag+1,c
 14802  000CBA  0E00               	movlw	0
 14803  000CBC  6E69               	movwf	i2printf@flag,c
 14804                           
 14805                           ;doprnt.c: 551: switch(*f) {
 14806                           
 14807                           ;doprnt.c: 550: for(;;) {
 14808  000CBE  D003               	goto	i2l5065
 14809  000CC0                     i2l5061:
 14810                           
 14811                           ;doprnt.c: 580: flag |= 0x04;
 14812  000CC0  8469               	bsf	i2printf@flag,2,c
 14813                           
 14814                           ;doprnt.c: 581: f++;
 14815  000CC2  4A47               	infsnz	i2printf@f,f,c
 14816  000CC4  2A48               	incf	i2printf@f+1,f,c
 14817  000CC6                     i2l5065:
 14818  000CC6  C047  FFF6         	movff	i2printf@f,tblptrl
 14819  000CCA  C048  FFF7         	movff	i2printf@f+1,tblptrh
 14820  000CCE                     	if	0	;tblptru may be non-zero
 14821  000CCE                     	endif
 14822  000CCE                     	if	0	;tblptru may be non-zero
 14823  000CCE                     	endif
 14824  000CCE  0008               	tblrd		*
 14825  000CD0  50F5               	movf	tablat,w,c
 14826                           
 14827                           ; Switch size 1, requested type "space"
 14828                           ; Number of cases is 1, Range of values is 48 to 48
 14829                           ; switch strategies available:
 14830                           ; Name         Instructions Cycles
 14831                           ; simple_byte            4     3 (average)
 14832                           ;	Chosen strategy is simple_byte
 14833  000CD2  0A30               	xorlw	48	; case 48
 14834  000CD4  B4D8               	btfsc	status,2,c
 14835  000CD6  D7F4               	goto	i2l5061
 14836                           
 14837                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 14838                           
 14839                           ;doprnt.c: 586: }
 14840                           
 14841                           ;doprnt.c: 585: break;
 14842  000CD8  C047  FFF6         	movff	i2printf@f,tblptrl
 14843  000CDC  C048  FFF7         	movff	i2printf@f+1,tblptrh
 14844  000CE0                     	if	0	;tblptru may be non-zero
 14845  000CE0                     	endif
 14846  000CE0                     	if	0	;tblptru may be non-zero
 14847  000CE0                     	endif
 14848  000CE0  0008               	tblrd		*
 14849  000CE2  50F5               	movf	tablat,w,c
 14850  000CE4  EC13  F029         	call	i2_isdigit
 14851  000CE8  A0D8               	btfss	status,0,c
 14852  000CEA  D072               	goto	i2l5107
 14853                           
 14854                           ;doprnt.c: 598: width = 0;
 14855  000CEC  0E00               	movlw	0
 14856  000CEE  6E6F               	movwf	i2printf@width+1,c
 14857  000CF0  0E00               	movlw	0
 14858  000CF2  6E6E               	movwf	i2printf@width,c
 14859  000CF4                     i2l5071:
 14860                           
 14861                           ;doprnt.c: 600: width *= 10;
 14862  000CF4  C06E  F00F         	movff	i2printf@width,i2___wmul@multiplier
 14863  000CF8  C06F  F010         	movff	i2printf@width+1,i2___wmul@multiplier+1
 14864  000CFC  0E00               	movlw	0
 14865  000CFE  6E12               	movwf	i2___wmul@multiplicand+1,c
 14866  000D00  0E0A               	movlw	10
 14867  000D02  6E11               	movwf	i2___wmul@multiplicand,c
 14868  000D04  ECDD  F028         	call	i2___wmul	;wreg free
 14869  000D08  C00F  F06E         	movff	?i2___wmul,i2printf@width
 14870  000D0C  C010  F06F         	movff	?i2___wmul+1,i2printf@width+1
 14871                           
 14872                           ;doprnt.c: 601: width += *f++ - '0';
 14873  000D10  0ED0               	movlw	208
 14874  000D12  6E4D               	movwf	??i2_printf& (0+255),c
 14875  000D14  0EFF               	movlw	255
 14876  000D16  6E4E               	movwf	(??i2_printf+1)& (0+255),c
 14877  000D18  C047  FFF6         	movff	i2printf@f,tblptrl
 14878  000D1C  C048  FFF7         	movff	i2printf@f+1,tblptrh
 14879  000D20                     	if	0	;tblptru may be non-zero
 14880  000D20                     	endif
 14881  000D20                     	if	0	;tblptru may be non-zero
 14882  000D20                     	endif
 14883  000D20  0008               	tblrd		*
 14884  000D22  50F5               	movf	tablat,w,c
 14885  000D24  6E4F               	movwf	(??i2_printf+2)& (0+255),c
 14886  000D26  6A50               	clrf	(??i2_printf+3)& (0+255),c
 14887  000D28  504D               	movf	??i2_printf,w,c
 14888  000D2A  264F               	addwf	??i2_printf+2,f,c
 14889  000D2C  504E               	movf	??i2_printf+1,w,c
 14890  000D2E  2250               	addwfc	??i2_printf+3,f,c
 14891  000D30  504F               	movf	??i2_printf+2,w,c
 14892  000D32  266E               	addwf	i2printf@width,f,c
 14893  000D34  5050               	movf	??i2_printf+3,w,c
 14894  000D36  226F               	addwfc	i2printf@width+1,f,c
 14895  000D38  4A47               	infsnz	i2printf@f,f,c
 14896  000D3A  2A48               	incf	i2printf@f+1,f,c
 14897                           
 14898                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 14899  000D3C  C047  FFF6         	movff	i2printf@f,tblptrl
 14900  000D40  C048  FFF7         	movff	i2printf@f+1,tblptrh
 14901  000D44                     	if	0	;tblptru may be non-zero
 14902  000D44                     	endif
 14903  000D44                     	if	0	;tblptru may be non-zero
 14904  000D44                     	endif
 14905  000D44  0008               	tblrd		*
 14906  000D46  50F5               	movf	tablat,w,c
 14907  000D48  EC13  F029         	call	i2_isdigit
 14908  000D4C  A0D8               	btfss	status,0,c
 14909  000D4E  D040               	goto	i2l5107
 14910  000D50  D7D1               	goto	i2l5071
 14911  000D52                     i2l5079:
 14912                           
 14913                           ;doprnt.c: 663: flag |= 0x400;
 14914  000D52  846A               	bsf	i2printf@flag+1,2,c
 14915                           
 14916                           ;doprnt.c: 698: case 'i':
 14917                           ;doprnt.c: 699: break;
 14918                           
 14919                           ;doprnt.c: 697: case 'd':
 14920                           
 14921                           ;doprnt.c: 664: break;
 14922  000D54  D05A               	goto	i2l5109
 14923  000D56                     i2l5081:
 14924                           
 14925                           ;doprnt.c: 721: flag |= 0x80;
 14926  000D56  8E69               	bsf	i2printf@flag,7,c
 14927                           
 14928                           ;doprnt.c: 723: break;
 14929  000D58  D058               	goto	i2l5109
 14930  000D5A                     i2l5083:
 14931                           
 14932                           ;doprnt.c: 757: if(width > len)
 14933  000D5A  506E               	movf	i2printf@width,w,c
 14934  000D5C  5C59               	subwf	i2printf@len,w,c
 14935  000D5E  506F               	movf	i2printf@width+1,w,c
 14936  000D60  585A               	subwfb	i2printf@len+1,w,c
 14937  000D62  B0D8               	btfsc	status,0,c
 14938  000D64  D005               	goto	i2l5087
 14939                           
 14940                           ;doprnt.c: 758: width -= len;
 14941  000D66  5059               	movf	i2printf@len,w,c
 14942  000D68  5E6E               	subwf	i2printf@width,f,c
 14943  000D6A  505A               	movf	i2printf@len+1,w,c
 14944  000D6C  5A6F               	subwfb	i2printf@width+1,f,c
 14945  000D6E  D008               	goto	i2l5091
 14946  000D70                     i2l5087:
 14947                           
 14948                           ;doprnt.c: 759: else
 14949                           ;doprnt.c: 760: width = 0;
 14950  000D70  0E00               	movlw	0
 14951  000D72  6E6F               	movwf	i2printf@width+1,c
 14952  000D74  0E00               	movlw	0
 14953  000D76  6E6E               	movwf	i2printf@width,c
 14954                           
 14955                           ;doprnt.c: 764: while(width--)
 14956  000D78  D003               	goto	i2l5091
 14957  000D7A                     i2l5089:
 14958                           
 14959                           ;doprnt.c: 765: (putch(' ') );
 14960  000D7A  0E20               	movlw	32
 14961  000D7C  EC86  F029         	call	i2_putch
 14962  000D80                     i2l5091:
 14963  000D80  066E               	decf	i2printf@width,f,c
 14964  000D82  A0D8               	btfss	status,0,c
 14965  000D84  066F               	decf	i2printf@width+1,f,c
 14966  000D86  286E               	incf	i2printf@width,w,c
 14967  000D88  E1F8               	bnz	i2l5089
 14968  000D8A  286F               	incf	i2printf@width+1,w,c
 14969  000D8C  B4D8               	btfsc	status,2,c
 14970  000D8E  D00A               	goto	i2l5097
 14971  000D90  D7F4               	goto	i2l5089
 14972  000D92                     i2l5093:
 14973                           
 14974                           ;doprnt.c: 768: (putch(*cp++) );
 14975  000D92  C056  FFD9         	movff	i2printf@cp,fsr2l
 14976  000D96  C057  FFDA         	movff	i2printf@cp+1,fsr2h
 14977  000D9A  50DF               	movf	indf2,w,c
 14978  000D9C  EC86  F029         	call	i2_putch
 14979  000DA0  4A56               	infsnz	i2printf@cp,f,c
 14980  000DA2  2A57               	incf	i2printf@cp+1,f,c
 14981  000DA4                     i2l5097:
 14982  000DA4  0659               	decf	i2printf@len,f,c
 14983  000DA6  A0D8               	btfss	status,0,c
 14984  000DA8  065A               	decf	i2printf@len+1,f,c
 14985  000DAA  2859               	incf	i2printf@len,w,c
 14986  000DAC  E1F2               	bnz	i2l5093
 14987  000DAE  285A               	incf	i2printf@len+1,w,c
 14988  000DB0  B4D8               	btfsc	status,2,c
 14989  000DB2  EF60  F00B         	goto	i2l5365
 14990  000DB6  D7ED               	goto	i2l5093
 14991  000DB8                     i2l5099:
 14992                           
 14993                           ;doprnt.c: 805: cp = (char *)&c;
 14994  000DB8  0E70               	movlw	low i2printf@c
 14995  000DBA  6E56               	movwf	i2printf@cp,c
 14996  000DBC  0E00               	movlw	high i2printf@c
 14997  000DBE  6E57               	movwf	i2printf@cp+1,c
 14998                           
 14999                           ;doprnt.c: 806: len = 1;
 15000  000DC0  0E00               	movlw	0
 15001  000DC2  6E5A               	movwf	i2printf@len+1,c
 15002  000DC4  0E01               	movlw	1
 15003  000DC6  6E59               	movwf	i2printf@len,c
 15004                           
 15005                           ;doprnt.c: 807: goto dostring;
 15006  000DC8  D7C8               	goto	i2l5083
 15007  000DCA                     i2l5103:
 15008                           
 15009                           ;doprnt.c: 818: flag |= 0xC0;
 15010  000DCA  0EC0               	movlw	192
 15011  000DCC  1269               	iorwf	i2printf@flag,f,c
 15012                           
 15013                           ;doprnt.c: 822: }
 15014                           
 15015                           ;doprnt.c: 819: break;
 15016  000DCE  D01D               	goto	i2l5109
 15017  000DD0                     i2l5107:
 15018  000DD0  C047  FFF6         	movff	i2printf@f,tblptrl
 15019  000DD4  C048  FFF7         	movff	i2printf@f+1,tblptrh
 15020  000DD8  4A47               	infsnz	i2printf@f,f,c
 15021  000DDA  2A48               	incf	i2printf@f+1,f,c
 15022  000DDC                     	if	0	;tblptru may be non-zero
 15023  000DDC                     	endif
 15024  000DDC                     	if	0	;tblptru may be non-zero
 15025  000DDC                     	endif
 15026  000DDC  0008               	tblrd		*
 15027  000DDE  CFF5 F070          	movff	tablat,i2printf@c
 15028  000DE2  5070               	movf	i2printf@c,w,c
 15029                           
 15030                           ; Switch size 1, requested type "space"
 15031                           ; Number of cases is 6, Range of values is 0 to 120
 15032                           ; switch strategies available:
 15033                           ; Name         Instructions Cycles
 15034                           ; simple_byte           19    10 (average)
 15035                           ;	Chosen strategy is simple_byte
 15036  000DE4  0A00               	xorlw	0	; case 0
 15037  000DE6  B4D8               	btfsc	status,2,c
 15038  000DE8  0012               	return	
 15039  000DEA  0A64               	xorlw	100	; case 100
 15040  000DEC  B4D8               	btfsc	status,2,c
 15041  000DEE  D00D               	goto	i2l5109
 15042  000DF0  0A02               	xorlw	2	; case 102
 15043  000DF2  B4D8               	btfsc	status,2,c
 15044  000DF4  D7AE               	goto	i2l5079
 15045  000DF6  0A0F               	xorlw	15	; case 105
 15046  000DF8  B4D8               	btfsc	status,2,c
 15047  000DFA  D007               	goto	i2l5109
 15048  000DFC  0A1C               	xorlw	28	; case 117
 15049  000DFE  B4D8               	btfsc	status,2,c
 15050  000E00  D7E4               	goto	i2l5103
 15051  000E02  0A0D               	xorlw	13	; case 120
 15052  000E04  B4D8               	btfsc	status,2,c
 15053  000E06  D7A7               	goto	i2l5081
 15054  000E08  D7D7               	goto	i2l5099
 15055  000E0A                     i2l5109:
 15056                           
 15057                           ;doprnt.c: 825: if(flag & (0x700)) {
 15058  000E0A  0E07               	movlw	7
 15059  000E0C  146A               	andwf	i2printf@flag+1,w,c
 15060  000E0E  B4D8               	btfsc	status,2,c
 15061  000E10  D2EC               	goto	i2l5267
 15062                           
 15063                           ;doprnt.c: 829: prec = 6;
 15064  000E12  0E00               	movlw	0
 15065  000E14  6E5E               	movwf	i2printf@prec+1,c
 15066  000E16  0E06               	movlw	6
 15067  000E18  6E5D               	movwf	i2printf@prec,c
 15068                           
 15069                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
 15070  000E1A  C05B  FFD9         	movff	i2printf@ap,fsr2l
 15071  000E1E  C05C  FFDA         	movff	i2printf@ap+1,fsr2h
 15072  000E22  CFDE F06B          	movff	postinc2,i2printf@fval
 15073  000E26  CFDE F06C          	movff	postinc2,i2printf@fval+1
 15074  000E2A  CFDD F06D          	movff	postdec2,i2printf@fval+2
 15075  000E2E  0E03               	movlw	3
 15076  000E30  265B               	addwf	i2printf@ap,f,c
 15077  000E32  0E00               	movlw	0
 15078  000E34  225C               	addwfc	i2printf@ap+1,f,c
 15079                           
 15080                           ;doprnt.c: 831: if(fval < 0.0) {
 15081  000E36  AE6D               	btfss	i2printf@fval+2,7,c
 15082  000E38  D010               	goto	i2l5123
 15083                           
 15084                           ;doprnt.c: 832: fval = -fval;
 15085  000E3A  C06B  F001         	movff	i2printf@fval,i2___ftneg@f1
 15086  000E3E  C06C  F002         	movff	i2printf@fval+1,i2___ftneg@f1+1
 15087  000E42  C06D  F003         	movff	i2printf@fval+2,i2___ftneg@f1+2
 15088  000E46  ECF0  F028         	call	i2___ftneg	;wreg free
 15089  000E4A  C001  F06B         	movff	?i2___ftneg,i2printf@fval
 15090  000E4E  C002  F06C         	movff	?i2___ftneg+1,i2printf@fval+1
 15091  000E52  C003  F06D         	movff	?i2___ftneg+2,i2printf@fval+2
 15092                           
 15093                           ;doprnt.c: 833: flag |= 0x03;
 15094  000E56  0E03               	movlw	3
 15095  000E58  1269               	iorwf	i2printf@flag,f,c
 15096  000E5A                     i2l5123:
 15097                           
 15098                           ;doprnt.c: 834: }
 15099                           ;doprnt.c: 835: exp = 0;
 15100  000E5A  0E00               	movlw	0
 15101  000E5C  6E64               	movwf	i2printf@exp+1,c
 15102  000E5E  0E00               	movlw	0
 15103  000E60  6E63               	movwf	i2printf@exp,c
 15104                           
 15105                           ;doprnt.c: 836: if( fval!=0) {
 15106  000E62  506B               	movf	i2printf@fval,w,c
 15107  000E64  106C               	iorwf	i2printf@fval+1,w,c
 15108  000E66  106D               	iorwf	i2printf@fval+2,w,c
 15109  000E68  B4D8               	btfsc	status,2,c
 15110  000E6A  D083               	goto	i2l5151
 15111                           
 15112                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
 15113  000E6C  0E82               	movlw	130
 15114  000E6E  6E4D               	movwf	??i2_printf& (0+255),c
 15115  000E70  0EFF               	movlw	255
 15116  000E72  6E4E               	movwf	(??i2_printf+1)& (0+255),c
 15117  000E74  C06B  F04F         	movff	i2printf@fval,??i2_printf+2
 15118  000E78  C06C  F050         	movff	i2printf@fval+1,??i2_printf+3
 15119  000E7C  C06D  F051         	movff	i2printf@fval+2,??i2_printf+4
 15120  000E80  C06E  F052         	movff	i2printf@fval+3,??i2_printf+5
 15121  000E84  0E10               	movlw	16
 15122  000E86  D005               	goto	i2u514_40
 15123  000E88                     i2u514_45:
 15124  000E88  90D8               	bcf	status,0,c
 15125  000E8A  3252               	rrcf	??i2_printf+5,f,c
 15126  000E8C  3251               	rrcf	??i2_printf+4,f,c
 15127  000E8E  3250               	rrcf	??i2_printf+3,f,c
 15128  000E90  324F               	rrcf	??i2_printf+2,f,c
 15129  000E92                     i2u514_40:
 15130  000E92  2EE8               	decfsz	wreg,f,c
 15131  000E94  D7F9               	goto	i2u514_45
 15132  000E96  504F               	movf	??i2_printf+2,w,c
 15133  000E98  244D               	addwf	??i2_printf,w,c
 15134  000E9A  6E63               	movwf	i2printf@exp,c
 15135  000E9C  0E00               	movlw	0
 15136  000E9E  204E               	addwfc	??i2_printf+1,w,c
 15137  000EA0  6E64               	movwf	i2printf@exp+1,c
 15138                           
 15139                           ;doprnt.c: 838: exp--;
 15140  000EA2  0663               	decf	i2printf@exp,f,c
 15141  000EA4  A0D8               	btfss	status,0,c
 15142  000EA6  0664               	decf	i2printf@exp+1,f,c
 15143                           
 15144                           ;doprnt.c: 839: exp *= 3;
 15145  000EA8  C063  F00F         	movff	i2printf@exp,i2___wmul@multiplier
 15146  000EAC  C064  F010         	movff	i2printf@exp+1,i2___wmul@multiplier+1
 15147  000EB0  0E00               	movlw	0
 15148  000EB2  6E12               	movwf	i2___wmul@multiplicand+1,c
 15149  000EB4  0E03               	movlw	3
 15150  000EB6  6E11               	movwf	i2___wmul@multiplicand,c
 15151  000EB8  ECDD  F028         	call	i2___wmul	;wreg free
 15152  000EBC  C00F  F063         	movff	?i2___wmul,i2printf@exp
 15153  000EC0  C010  F064         	movff	?i2___wmul+1,i2printf@exp+1
 15154                           
 15155                           ;doprnt.c: 840: exp /= 10;
 15156  000EC4  C063  F007         	movff	i2printf@exp,i2___awdiv@dividend
 15157  000EC8  C064  F008         	movff	i2printf@exp+1,i2___awdiv@dividend+1
 15158  000ECC  0E00               	movlw	0
 15159  000ECE  6E0A               	movwf	i2___awdiv@divisor+1,c
 15160  000ED0  0E0A               	movlw	10
 15161  000ED2  6E09               	movwf	i2___awdiv@divisor,c
 15162  000ED4  ECC1  F024         	call	i2___awdiv	;wreg free
 15163  000ED8  C007  F063         	movff	?i2___awdiv,i2printf@exp
 15164  000EDC  C008  F064         	movff	?i2___awdiv+1,i2printf@exp+1
 15165                           
 15166                           ;doprnt.c: 841: if(exp < 0)
 15167  000EE0  AE64               	btfss	i2printf@exp+1,7,c
 15168  000EE2  D003               	goto	i2l5139
 15169                           
 15170                           ;doprnt.c: 842: exp--;
 15171  000EE4  0663               	decf	i2printf@exp,f,c
 15172  000EE6  A0D8               	btfss	status,0,c
 15173  000EE8  0664               	decf	i2printf@exp+1,f,c
 15174  000EEA                     i2l5139:
 15175                           
 15176                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
 15177  000EEA  5063               	movf	i2printf@exp,w,c
 15178  000EEC  0800               	sublw	0
 15179  000EEE  EC22  F010         	call	i2_scale
 15180  000EF2  C02B  F05F         	movff	?i2_scale,i2printf@tmpval
 15181  000EF6  C02C  F060         	movff	?i2_scale+1,i2printf@tmpval+1
 15182  000EFA  C02D  F061         	movff	?i2_scale+2,i2printf@tmpval+2
 15183                           
 15184                           ;doprnt.c: 847: tmpval.integ *= fval;
 15185  000EFE  C05F  F01C         	movff	i2printf@tmpval,i2___ftmul@f1
 15186  000F02  C060  F01D         	movff	i2printf@tmpval+1,i2___ftmul@f1+1
 15187  000F06  C061  F01E         	movff	i2printf@tmpval+2,i2___ftmul@f1+2
 15188  000F0A  C06B  F01F         	movff	i2printf@fval,i2___ftmul@f2
 15189  000F0E  C06C  F020         	movff	i2printf@fval+1,i2___ftmul@f2+1
 15190  000F12  C06D  F021         	movff	i2printf@fval+2,i2___ftmul@f2+2
 15191  000F16  EC94  F01E         	call	i2___ftmul	;wreg free
 15192  000F1A  C01C  F05F         	movff	?i2___ftmul,i2printf@tmpval
 15193  000F1E  C01D  F060         	movff	?i2___ftmul+1,i2printf@tmpval+1
 15194  000F22  C01E  F061         	movff	?i2___ftmul+2,i2printf@tmpval+2
 15195                           
 15196                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
 15197  000F26  C05F  F02B         	movff	i2printf@tmpval,i2___ftge@ff1
 15198  000F2A  C060  F02C         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 15199  000F2E  C061  F02D         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 15200  000F32  0E00               	movlw	0
 15201  000F34  6E2E               	movwf	i2___ftge@ff2,c
 15202  000F36  0E80               	movlw	128
 15203  000F38  6E2F               	movwf	i2___ftge@ff2+1,c
 15204  000F3A  0E3F               	movlw	63
 15205  000F3C  6E30               	movwf	i2___ftge@ff2+2,c
 15206  000F3E  ECAE  F023         	call	i2___ftge	;wreg free
 15207  000F42  B0D8               	btfsc	status,0,c
 15208  000F44  D004               	goto	i2l5147
 15209                           
 15210                           ;doprnt.c: 849: exp--;
 15211  000F46  0663               	decf	i2printf@exp,f,c
 15212  000F48  A0D8               	btfss	status,0,c
 15213  000F4A  0664               	decf	i2printf@exp+1,f,c
 15214  000F4C  D012               	goto	i2l5151
 15215  000F4E                     i2l5147:
 15216                           
 15217                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
 15218  000F4E  C05F  F02B         	movff	i2printf@tmpval,i2___ftge@ff1
 15219  000F52  C060  F02C         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 15220  000F56  C061  F02D         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 15221  000F5A  0E00               	movlw	0
 15222  000F5C  6E2E               	movwf	i2___ftge@ff2,c
 15223  000F5E  0E20               	movlw	32
 15224  000F60  6E2F               	movwf	i2___ftge@ff2+1,c
 15225  000F62  0E41               	movlw	65
 15226  000F64  6E30               	movwf	i2___ftge@ff2+2,c
 15227  000F66  ECAE  F023         	call	i2___ftge	;wreg free
 15228  000F6A  A0D8               	btfss	status,0,c
 15229  000F6C  D002               	goto	i2l5151
 15230                           
 15231                           ;doprnt.c: 851: exp++;
 15232  000F6E  4A63               	infsnz	i2printf@exp,f,c
 15233  000F70  2A64               	incf	i2printf@exp+1,f,c
 15234  000F72                     i2l5151:
 15235                           
 15236                           ;doprnt.c: 852: }
 15237                           ;doprnt.c: 1112: if(prec <= 12)
 15238  000F72  BE5E               	btfsc	i2printf@prec+1,7,c
 15239  000F74  D006               	goto	i2l5153
 15240  000F76  505E               	movf	i2printf@prec+1,w,c
 15241  000F78  E11B               	bnz	i2l5155
 15242  000F7A  0E0D               	movlw	13
 15243  000F7C  5C5D               	subwf	i2printf@prec,w,c
 15244  000F7E  B0D8               	btfsc	status,0,c
 15245  000F80  D017               	goto	i2l5155
 15246  000F82                     i2l5153:
 15247                           
 15248                           ;doprnt.c: 1113: fval += fround(prec);
 15249  000F82  C06B  F035         	movff	i2printf@fval,i2___ftadd@f1
 15250  000F86  C06C  F036         	movff	i2printf@fval+1,i2___ftadd@f1+1
 15251  000F8A  C06D  F037         	movff	i2printf@fval+2,i2___ftadd@f1+2
 15252  000F8E  505D               	movf	i2printf@prec,w,c
 15253  000F90  ECA4  F014         	call	i2_fround
 15254  000F94  C02B  F038         	movff	?i2_fround,i2___ftadd@f2
 15255  000F98  C02C  F039         	movff	?i2_fround+1,i2___ftadd@f2+1
 15256  000F9C  C02D  F03A         	movff	?i2_fround+2,i2___ftadd@f2+2
 15257  000FA0  ECD8  F016         	call	i2___ftadd	;wreg free
 15258  000FA4  C035  F06B         	movff	?i2___ftadd,i2printf@fval
 15259  000FA8  C036  F06C         	movff	?i2___ftadd+1,i2printf@fval+1
 15260  000FAC  C037  F06D         	movff	?i2___ftadd+2,i2printf@fval+2
 15261  000FB0                     i2l5155:
 15262                           
 15263                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
 15264  000FB0  BE64               	btfsc	i2printf@exp+1,7,c
 15265  000FB2  D006               	goto	i2l5157
 15266  000FB4  5064               	movf	i2printf@exp+1,w,c
 15267  000FB6  E11E               	bnz	i2l5163
 15268  000FB8  0E0A               	movlw	10
 15269  000FBA  5C63               	subwf	i2printf@exp,w,c
 15270  000FBC  B0D8               	btfsc	status,0,c
 15271  000FBE  D01A               	goto	i2l5163
 15272  000FC0                     i2l5157:
 15273  000FC0  506B               	movf	i2printf@fval,w,c
 15274  000FC2  106C               	iorwf	i2printf@fval+1,w,c
 15275  000FC4  106D               	iorwf	i2printf@fval+2,w,c
 15276  000FC6  B4D8               	btfsc	status,2,c
 15277  000FC8  D051               	goto	i2l5177
 15278  000FCA  C06B  F02B         	movff	i2printf@fval,i2___fttol@f1
 15279  000FCE  C06C  F02C         	movff	i2printf@fval+1,i2___fttol@f1+1
 15280  000FD2  C06D  F02D         	movff	i2printf@fval+2,i2___fttol@f1+2
 15281  000FD6  EC0E  F01F         	call	i2___fttol	;wreg free
 15282  000FDA  502B               	movf	?i2___fttol,w,c
 15283  000FDC  102C               	iorwf	?i2___fttol+1,w,c
 15284  000FDE  102D               	iorwf	?i2___fttol+2,w,c
 15285  000FE0  102E               	iorwf	?i2___fttol+3,w,c
 15286  000FE2  B4D8               	btfsc	status,2,c
 15287  000FE4  BE64               	btfsc	i2printf@exp+1,7,c
 15288  000FE6  D042               	goto	i2l5177
 15289  000FE8  5064               	movf	i2printf@exp+1,w,c
 15290  000FEA  E104               	bnz	i2l5163
 15291  000FEC  0E02               	movlw	2
 15292  000FEE  5C63               	subwf	i2printf@exp,w,c
 15293  000FF0  A0D8               	btfss	status,0,c
 15294  000FF2  D03C               	goto	i2l5177
 15295  000FF4                     i2l5163:
 15296                           
 15297                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
 15298  000FF4  C05F  F02B         	movff	i2printf@tmpval,i2___ftge@ff1
 15299  000FF8  C060  F02C         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 15300  000FFC  C061  F02D         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 15301  001000  0E70               	movlw	112
 15302  001002  6E2E               	movwf	i2___ftge@ff2,c
 15303  001004  0E89               	movlw	137
 15304  001006  6E2F               	movwf	i2___ftge@ff2+1,c
 15305  001008  0E40               	movlw	64
 15306  00100A  6E30               	movwf	i2___ftge@ff2+2,c
 15307  00100C  ECAE  F023         	call	i2___ftge	;wreg free
 15308  001010  B0D8               	btfsc	status,0,c
 15309  001012  D002               	goto	i2l5167
 15310                           
 15311                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
 15312  001014  0EF7               	movlw	247
 15313  001016  D001               	goto	L7
 15314  001018                     i2l5167:
 15315                           
 15316                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
 15317  001018  0EF8               	movlw	248
 15318  00101A                     L7:
 15319  00101A  2663               	addwf	i2printf@exp,f,c
 15320  00101C  0EFF               	movlw	255
 15321  00101E  2264               	addwfc	i2printf@exp+1,f,c
 15322                           
 15323                           ;doprnt.c: 1124: }
 15324                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
 15325  001020  5063               	movf	i2printf@exp,w,c
 15326  001022  EC22  F010         	call	i2_scale
 15327  001026  C02B  F05F         	movff	?i2_scale,i2printf@tmpval
 15328  00102A  C02C  F060         	movff	?i2_scale+1,i2printf@tmpval+1
 15329  00102E  C02D  F061         	movff	?i2_scale+2,i2printf@tmpval+2
 15330                           
 15331                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
 15332  001032  C06B  F001         	movff	i2printf@fval,i2__tdiv_to_l_@f1
 15333  001036  C06C  F002         	movff	i2printf@fval+1,i2__tdiv_to_l_@f1+1
 15334  00103A  C06D  F003         	movff	i2printf@fval+2,i2__tdiv_to_l_@f1+2
 15335  00103E  C05F  F004         	movff	i2printf@tmpval,i2__tdiv_to_l_@f2
 15336  001042  C060  F005         	movff	i2printf@tmpval+1,i2__tdiv_to_l_@f2+1
 15337  001046  C061  F006         	movff	i2printf@tmpval+2,i2__tdiv_to_l_@f2+2
 15338  00104A  EC43  F01B         	call	i2__tdiv_to_l_	;wreg free
 15339  00104E  C001  F065         	movff	?i2__tdiv_to_l_,i2printf@val
 15340  001052  C002  F066         	movff	?i2__tdiv_to_l_+1,i2printf@val+1
 15341  001056  C003  F067         	movff	?i2__tdiv_to_l_+2,i2printf@val+2
 15342  00105A  C004  F068         	movff	?i2__tdiv_to_l_+3,i2printf@val+3
 15343                           
 15344                           ;doprnt.c: 1129: fval = 0.0;
 15345  00105E  0E00               	movlw	0
 15346  001060  6E6B               	movwf	i2printf@fval,c
 15347  001062  0E00               	movlw	0
 15348  001064  6E6C               	movwf	i2printf@fval+1,c
 15349  001066  0E00               	movlw	0
 15350  001068  6E6D               	movwf	i2printf@fval+2,c
 15351                           
 15352                           ;doprnt.c: 1130: } else {
 15353  00106A  D032               	goto	i2l5181
 15354  00106C                     i2l5177:
 15355                           
 15356                           ;doprnt.c: 1131: val = (unsigned long)fval;
 15357  00106C  C06B  F02B         	movff	i2printf@fval,i2___fttol@f1
 15358  001070  C06C  F02C         	movff	i2printf@fval+1,i2___fttol@f1+1
 15359  001074  C06D  F02D         	movff	i2printf@fval+2,i2___fttol@f1+2
 15360  001078  EC0E  F01F         	call	i2___fttol	;wreg free
 15361  00107C  C02B  F065         	movff	?i2___fttol,i2printf@val
 15362  001080  C02C  F066         	movff	?i2___fttol+1,i2printf@val+1
 15363  001084  C02D  F067         	movff	?i2___fttol+2,i2printf@val+2
 15364  001088  C02E  F068         	movff	?i2___fttol+3,i2printf@val+3
 15365                           
 15366                           ;doprnt.c: 1132: fval -= (double)val;
 15367  00108C  C06B  F041         	movff	i2printf@fval,i2___ftsub@f1
 15368  001090  C06C  F042         	movff	i2printf@fval+1,i2___ftsub@f1+1
 15369  001094  C06D  F043         	movff	i2printf@fval+2,i2___ftsub@f1+2
 15370  001098  C065  F009         	movff	i2printf@val,i2___lltoft@c
 15371  00109C  C066  F00A         	movff	i2printf@val+1,i2___lltoft@c+1
 15372  0010A0  C067  F00B         	movff	i2printf@val+2,i2___lltoft@c+2
 15373  0010A4  C068  F00C         	movff	i2printf@val+3,i2___lltoft@c+3
 15374  0010A8  ECC8  F026         	call	i2___lltoft	;wreg free
 15375  0010AC  C009  F044         	movff	?i2___lltoft,i2___ftsub@f2
 15376  0010B0  C00A  F045         	movff	?i2___lltoft+1,i2___ftsub@f2+1
 15377  0010B4  C00B  F046         	movff	?i2___lltoft+2,i2___ftsub@f2+2
 15378  0010B8  ECD8  F027         	call	i2___ftsub	;wreg free
 15379  0010BC  C041  F06B         	movff	?i2___ftsub,i2printf@fval
 15380  0010C0  C042  F06C         	movff	?i2___ftsub+1,i2printf@fval+1
 15381  0010C4  C043  F06D         	movff	?i2___ftsub+2,i2printf@fval+2
 15382                           
 15383                           ;doprnt.c: 1133: exp = 0;
 15384  0010C8  0E00               	movlw	0
 15385  0010CA  6E64               	movwf	i2printf@exp+1,c
 15386  0010CC  0E00               	movlw	0
 15387  0010CE  6E63               	movwf	i2printf@exp,c
 15388  0010D0                     i2l5181:
 15389                           
 15390                           ;doprnt.c: 1134: }
 15391                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
 15392  0010D0  0E01               	movlw	1
 15393  0010D2  6E70               	movwf	i2printf@c,c
 15394  0010D4                     i2l5183:
 15395  0010D4  0E0A               	movlw	10
 15396  0010D6  1870               	xorwf	i2printf@c,w,c
 15397  0010D8  B4D8               	btfsc	status,2,c
 15398  0010DA  D018               	goto	i2l5195
 15399                           
 15400                           ;doprnt.c: 1137: if(val < dpowers[c])
 15401  0010DC  5070               	movf	i2printf@c,w,c
 15402  0010DE  0D04               	mullw	4
 15403  0010E0  0EE1               	movlw	low _dpowers
 15404  0010E2  24F3               	addwf	prodl,w,c
 15405  0010E4  6EF6               	movwf	tblptrl,c
 15406  0010E6  0EFB               	movlw	high _dpowers
 15407  0010E8  20F4               	addwfc	prodh,w,c
 15408  0010EA  6EF7               	movwf	tblptrh,c
 15409  0010EC                     	if	0	;There are less than 3 active tblptr bytes
 15410  0010EC                     	endif
 15411  0010EC  0009               	tblrd		*+
 15412  0010EE  50F5               	movf	tablat,w,c
 15413  0010F0  5C65               	subwf	i2printf@val,w,c
 15414  0010F2  0009               	tblrd		*+
 15415  0010F4  50F5               	movf	tablat,w,c
 15416  0010F6  5866               	subwfb	i2printf@val+1,w,c
 15417  0010F8  0009               	tblrd		*+
 15418  0010FA  50F5               	movf	tablat,w,c
 15419  0010FC  5867               	subwfb	i2printf@val+2,w,c
 15420  0010FE  0009               	tblrd		*+
 15421  001100  50F5               	movf	tablat,w,c
 15422  001102  5868               	subwfb	i2printf@val+3,w,c
 15423  001104  A0D8               	btfss	status,0,c
 15424  001106  D002               	goto	i2l5195
 15425                           
 15426                           ;doprnt.c: 1138: break;
 15427  001108  2A70               	incf	i2printf@c,f,c
 15428  00110A  D7E4               	goto	i2l5183
 15429  00110C                     i2l5195:
 15430                           
 15431                           ;doprnt.c: 1142: width -= prec + c + exp;
 15432  00110C  C070  F04D         	movff	i2printf@c,??i2_printf
 15433  001110  6A4E               	clrf	(??i2_printf+1)& (0+255),c
 15434  001112  BE4D               	btfsc	??i2_printf& (0+255),7,c
 15435  001114  064E               	decf	(??i2_printf+1)& (0+255),f,c
 15436  001116  505D               	movf	i2printf@prec,w,c
 15437  001118  264D               	addwf	??i2_printf,f,c
 15438  00111A  505E               	movf	i2printf@prec+1,w,c
 15439  00111C  224E               	addwfc	??i2_printf+1,f,c
 15440  00111E  5063               	movf	i2printf@exp,w,c
 15441  001120  264D               	addwf	??i2_printf,f,c
 15442  001122  5064               	movf	i2printf@exp+1,w,c
 15443  001124  224E               	addwfc	??i2_printf+1,f,c
 15444  001126  504D               	movf	??i2_printf,w,c
 15445  001128  5E6E               	subwf	i2printf@width,f,c
 15446  00112A  504E               	movf	??i2_printf+1,w,c
 15447  00112C  5A6F               	subwfb	i2printf@width+1,f,c
 15448                           
 15449                           ;doprnt.c: 1143: if(
 15450                           ;doprnt.c: 1147: prec)
 15451  00112E  505D               	movf	i2printf@prec,w,c
 15452  001130  105E               	iorwf	i2printf@prec+1,w,c
 15453  001132  B4D8               	btfsc	status,2,c
 15454  001134  D003               	goto	i2l5199
 15455                           
 15456                           ;doprnt.c: 1148: width--;
 15457  001136  066E               	decf	i2printf@width,f,c
 15458  001138  A0D8               	btfss	status,0,c
 15459  00113A  066F               	decf	i2printf@width+1,f,c
 15460  00113C                     i2l5199:
 15461                           
 15462                           ;doprnt.c: 1149: if(flag & 0x03)
 15463  00113C  0E03               	movlw	3
 15464  00113E  1469               	andwf	i2printf@flag,w,c
 15465  001140  6E4D               	movwf	??i2_printf& (0+255),c
 15466  001142  0E00               	movlw	0
 15467  001144  146A               	andwf	i2printf@flag+1,w,c
 15468  001146  6E4E               	movwf	(??i2_printf+1)& (0+255),c
 15469  001148  504D               	movf	??i2_printf,w,c
 15470  00114A  104E               	iorwf	??i2_printf+1,w,c
 15471  00114C  B4D8               	btfsc	status,2,c
 15472  00114E  D003               	goto	i2l5203
 15473                           
 15474                           ;doprnt.c: 1150: width--;
 15475  001150  066E               	decf	i2printf@width,f,c
 15476  001152  A0D8               	btfss	status,0,c
 15477  001154  066F               	decf	i2printf@width+1,f,c
 15478  001156                     i2l5203:
 15479                           
 15480                           ;doprnt.c: 1153: if(flag & 0x04) {
 15481  001156  A469               	btfss	i2printf@flag,2,c
 15482  001158  D022               	goto	i2l5219
 15483                           
 15484                           ;doprnt.c: 1157: if(flag & 0x03)
 15485  00115A  0E03               	movlw	3
 15486  00115C  1469               	andwf	i2printf@flag,w,c
 15487  00115E  6E4D               	movwf	??i2_printf& (0+255),c
 15488  001160  0E00               	movlw	0
 15489  001162  146A               	andwf	i2printf@flag+1,w,c
 15490  001164  6E4E               	movwf	(??i2_printf+1)& (0+255),c
 15491  001166  504D               	movf	??i2_printf,w,c
 15492  001168  104E               	iorwf	??i2_printf+1,w,c
 15493  00116A  B4D8               	btfsc	status,2,c
 15494  00116C  D00A               	goto	i2l5213
 15495                           
 15496                           ;doprnt.c: 1159: (putch('-') );
 15497  00116E  0E2D               	movlw	45
 15498  001170  EC86  F029         	call	i2_putch
 15499                           
 15500                           ;doprnt.c: 1168: while(width > 0) {
 15501  001174  D006               	goto	i2l5213
 15502  001176                     i2l5209:
 15503                           
 15504                           ;doprnt.c: 1169: (putch('0') );
 15505  001176  0E30               	movlw	48
 15506  001178  EC86  F029         	call	i2_putch
 15507                           
 15508                           ;doprnt.c: 1170: width--;
 15509  00117C  066E               	decf	i2printf@width,f,c
 15510  00117E  A0D8               	btfss	status,0,c
 15511  001180  066F               	decf	i2printf@width+1,f,c
 15512  001182                     i2l5213:
 15513  001182  BE6F               	btfsc	i2printf@width+1,7,c
 15514  001184  D065               	goto	i2l5231
 15515  001186  506F               	movf	i2printf@width+1,w,c
 15516  001188  E1F6               	bnz	i2l5209
 15517  00118A  046E               	decf	i2printf@width,w,c
 15518  00118C  A0D8               	btfss	status,0,c
 15519  00118E  D060               	goto	i2l5231
 15520  001190  D7F2               	goto	i2l5209
 15521  001192                     i2l5215:
 15522                           
 15523                           ;doprnt.c: 1181: (putch(' ') );
 15524  001192  0E20               	movlw	32
 15525  001194  EC86  F029         	call	i2_putch
 15526                           
 15527                           ;doprnt.c: 1182: width--;
 15528  001198  066E               	decf	i2printf@width,f,c
 15529  00119A  A0D8               	btfss	status,0,c
 15530  00119C  066F               	decf	i2printf@width+1,f,c
 15531  00119E                     i2l5219:
 15532  00119E  BE6F               	btfsc	i2printf@width+1,7,c
 15533  0011A0  D005               	goto	i2l5221
 15534  0011A2  506F               	movf	i2printf@width+1,w,c
 15535  0011A4  E1F6               	bnz	i2l5215
 15536  0011A6  046E               	decf	i2printf@width,w,c
 15537  0011A8  B0D8               	btfsc	status,0,c
 15538  0011AA  D7F3               	goto	i2l5215
 15539  0011AC                     i2l5221:
 15540                           
 15541                           ;doprnt.c: 1183: }
 15542                           ;doprnt.c: 1188: if(flag & 0x03)
 15543  0011AC  0E03               	movlw	3
 15544  0011AE  1469               	andwf	i2printf@flag,w,c
 15545  0011B0  6E4D               	movwf	??i2_printf& (0+255),c
 15546  0011B2  0E00               	movlw	0
 15547  0011B4  146A               	andwf	i2printf@flag+1,w,c
 15548  0011B6  6E4E               	movwf	(??i2_printf+1)& (0+255),c
 15549  0011B8  504D               	movf	??i2_printf,w,c
 15550  0011BA  104E               	iorwf	??i2_printf+1,w,c
 15551  0011BC  B4D8               	btfsc	status,2,c
 15552  0011BE  D048               	goto	i2l5231
 15553                           
 15554                           ;doprnt.c: 1190: (putch('-') );
 15555  0011C0  0E2D               	movlw	45
 15556  0011C2  EC86  F029         	call	i2_putch
 15557                           
 15558                           ;doprnt.c: 1195: }
 15559                           ;doprnt.c: 1196: while(c--) {
 15560  0011C6  D044               	goto	i2l5231
 15561  0011C8                     i2l5225:
 15562                           
 15563                           ;doprnt.c: 1200: {
 15564                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
 15565  0011C8  C065  F001         	movff	i2printf@val,i2___lldiv@dividend
 15566  0011CC  C066  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 15567  0011D0  C067  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 15568  0011D4  C068  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 15569  0011D8  5070               	movf	i2printf@c,w,c
 15570  0011DA  0D04               	mullw	4
 15571  0011DC  0EE1               	movlw	low _dpowers
 15572  0011DE  24F3               	addwf	prodl,w,c
 15573  0011E0  6EF6               	movwf	tblptrl,c
 15574  0011E2  0EFB               	movlw	high _dpowers
 15575  0011E4  20F4               	addwfc	prodh,w,c
 15576  0011E6  6EF7               	movwf	tblptrh,c
 15577  0011E8                     	if	0	;There are less than 3 active tblptr bytes
 15578  0011E8                     	endif
 15579  0011E8  0009               	tblrd		*+
 15580  0011EA  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 15581  0011EE  0009               	tblrd		*+
 15582  0011F0  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 15583  0011F4  0009               	tblrd		*+
 15584  0011F6  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 15585  0011FA  000A               	tblrd		*-
 15586  0011FC  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 15587  001200  EC03  F025         	call	i2___lldiv	;wreg free
 15588  001204  C001  F05F         	movff	?i2___lldiv,i2printf@tmpval
 15589  001208  C002  F060         	movff	?i2___lldiv+1,i2printf@tmpval+1
 15590  00120C  C003  F061         	movff	?i2___lldiv+2,i2printf@tmpval+2
 15591  001210  C004  F062         	movff	?i2___lldiv+3,i2printf@tmpval+3
 15592                           
 15593                           ;doprnt.c: 1202: tmpval.vd %= 10;
 15594  001214  C05F  F00E         	movff	i2printf@tmpval,i2___llmod@dividend
 15595  001218  C060  F00F         	movff	i2printf@tmpval+1,i2___llmod@dividend+1
 15596  00121C  C061  F010         	movff	i2printf@tmpval+2,i2___llmod@dividend+2
 15597  001220  C062  F011         	movff	i2printf@tmpval+3,i2___llmod@dividend+3
 15598  001224  0E0A               	movlw	10
 15599  001226  6E12               	movwf	i2___llmod@divisor,c
 15600  001228  0E00               	movlw	0
 15601  00122A  6E13               	movwf	i2___llmod@divisor+1,c
 15602  00122C  0E00               	movlw	0
 15603  00122E  6E14               	movwf	i2___llmod@divisor+2,c
 15604  001230  0E00               	movlw	0
 15605  001232  6E15               	movwf	i2___llmod@divisor+3,c
 15606  001234  EC65  F026         	call	i2___llmod	;wreg free
 15607  001238  C00E  F05F         	movff	?i2___llmod,i2printf@tmpval
 15608  00123C  C00F  F060         	movff	?i2___llmod+1,i2printf@tmpval+1
 15609  001240  C010  F061         	movff	?i2___llmod+2,i2printf@tmpval+2
 15610  001244  C011  F062         	movff	?i2___llmod+3,i2printf@tmpval+3
 15611                           
 15612                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
 15613  001248  505F               	movf	i2printf@tmpval,w,c
 15614  00124A  0F30               	addlw	48
 15615  00124C  EC86  F029         	call	i2_putch
 15616  001250                     i2l5231:
 15617  001250  0670               	decf	i2printf@c,f,c
 15618  001252  2870               	incf	i2printf@c,w,c
 15619  001254  B4D8               	btfsc	status,2,c
 15620  001256  D007               	goto	i2l5237
 15621  001258  D7B7               	goto	i2l5225
 15622  00125A                     i2l5233:
 15623                           
 15624                           ;doprnt.c: 1208: (putch('0') );
 15625  00125A  0E30               	movlw	48
 15626  00125C  EC86  F029         	call	i2_putch
 15627                           
 15628                           ;doprnt.c: 1209: exp--;
 15629  001260  0663               	decf	i2printf@exp,f,c
 15630  001262  A0D8               	btfss	status,0,c
 15631  001264  0664               	decf	i2printf@exp+1,f,c
 15632  001266                     i2l5237:
 15633  001266  BE64               	btfsc	i2printf@exp+1,7,c
 15634  001268  D005               	goto	i2l5239
 15635  00126A  5064               	movf	i2printf@exp+1,w,c
 15636  00126C  E1F6               	bnz	i2l5233
 15637  00126E  0463               	decf	i2printf@exp,w,c
 15638  001270  B0D8               	btfsc	status,0,c
 15639  001272  D7F3               	goto	i2l5233
 15640  001274                     i2l5239:
 15641                           
 15642                           ;doprnt.c: 1210: }
 15643                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 15644  001274  BE5E               	btfsc	i2printf@prec+1,7,c
 15645  001276  D009               	goto	i2l551
 15646  001278  505E               	movf	i2printf@prec+1,w,c
 15647  00127A  E104               	bnz	i2u536_40
 15648  00127C  0E09               	movlw	9
 15649  00127E  5C5D               	subwf	i2printf@prec,w,c
 15650  001280  A0D8               	btfss	status,0,c
 15651  001282  D003               	goto	i2l551
 15652  001284                     i2u536_40:
 15653                           
 15654                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
 15655  001284  0E08               	movlw	8
 15656  001286  6E70               	movwf	i2printf@c,c
 15657  001288  D002               	goto	i2l5243
 15658  00128A                     i2l551:
 15659                           
 15660                           ;doprnt.c: 1213: else
 15661                           ;doprnt.c: 1214: c = prec;
 15662  00128A  C05D  F070         	movff	i2printf@prec,i2printf@c
 15663  00128E                     i2l5243:
 15664                           
 15665                           ;doprnt.c: 1215: prec -= c;
 15666  00128E  5070               	movf	i2printf@c,w,c
 15667  001290  5E5D               	subwf	i2printf@prec,f,c
 15668  001292  0E00               	movlw	0
 15669  001294  BE70               	btfsc	i2printf@c,7,c
 15670  001296  0EFF               	movlw	255
 15671  001298  5A5E               	subwfb	i2printf@prec+1,f,c
 15672                           
 15673                           ;doprnt.c: 1219: if(c)
 15674  00129A  5070               	movf	i2printf@c,w,c
 15675  00129C  B4D8               	btfsc	status,2,c
 15676  00129E  D003               	goto	i2l5249
 15677                           
 15678                           ;doprnt.c: 1221: (putch('.') );
 15679  0012A0  0E2E               	movlw	46
 15680  0012A2  EC86  F029         	call	i2_putch
 15681  0012A6                     i2l5249:
 15682                           
 15683                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 15684  0012A6  5070               	movf	i2printf@c,w,c
 15685  0012A8  EC22  F010         	call	i2_scale
 15686  0012AC  C02B  F053         	movff	?i2_scale,i2_printf$1662
 15687  0012B0  C02C  F054         	movff	?i2_scale+1,i2_printf$1662+1
 15688  0012B4  C02D  F055         	movff	?i2_scale+2,i2_printf$1662+2
 15689                           
 15690                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 15691  0012B8  C06B  F01F         	movff	i2printf@fval,i2___ftmul@f2
 15692  0012BC  C06C  F020         	movff	i2printf@fval+1,i2___ftmul@f2+1
 15693  0012C0  C06D  F021         	movff	i2printf@fval+2,i2___ftmul@f2+2
 15694  0012C4  C053  F01C         	movff	i2_printf$1662,i2___ftmul@f1
 15695  0012C8  C054  F01D         	movff	i2_printf$1662+1,i2___ftmul@f1+1
 15696  0012CC  C055  F01E         	movff	i2_printf$1662+2,i2___ftmul@f1+2
 15697  0012D0  EC94  F01E         	call	i2___ftmul	;wreg free
 15698  0012D4  C01C  F02B         	movff	?i2___ftmul,i2___fttol@f1
 15699  0012D8  C01D  F02C         	movff	?i2___ftmul+1,i2___fttol@f1+1
 15700  0012DC  C01E  F02D         	movff	?i2___ftmul+2,i2___fttol@f1+2
 15701  0012E0  EC0E  F01F         	call	i2___fttol	;wreg free
 15702  0012E4  C02B  F065         	movff	?i2___fttol,i2printf@val
 15703  0012E8  C02C  F066         	movff	?i2___fttol+1,i2printf@val+1
 15704  0012EC  C02D  F067         	movff	?i2___fttol+2,i2printf@val+2
 15705  0012F0  C02E  F068         	movff	?i2___fttol+3,i2printf@val+3
 15706                           
 15707                           ;doprnt.c: 1228: while(c--) {
 15708  0012F4  D06A               	goto	i2l5259
 15709  0012F6                     i2l5253:
 15710                           
 15711                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
 15712  0012F6  C065  F001         	movff	i2printf@val,i2___lldiv@dividend
 15713  0012FA  C066  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 15714  0012FE  C067  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 15715  001302  C068  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 15716  001306  5070               	movf	i2printf@c,w,c
 15717  001308  0D04               	mullw	4
 15718  00130A  0EE1               	movlw	low _dpowers
 15719  00130C  24F3               	addwf	prodl,w,c
 15720  00130E  6EF6               	movwf	tblptrl,c
 15721  001310  0EFB               	movlw	high _dpowers
 15722  001312  20F4               	addwfc	prodh,w,c
 15723  001314  6EF7               	movwf	tblptrh,c
 15724  001316                     	if	0	;There are less than 3 active tblptr bytes
 15725  001316                     	endif
 15726  001316  0009               	tblrd		*+
 15727  001318  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 15728  00131C  0009               	tblrd		*+
 15729  00131E  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 15730  001322  0009               	tblrd		*+
 15731  001324  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 15732  001328  000A               	tblrd		*-
 15733  00132A  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 15734  00132E  EC03  F025         	call	i2___lldiv	;wreg free
 15735  001332  C001  F05F         	movff	?i2___lldiv,i2printf@tmpval
 15736  001336  C002  F060         	movff	?i2___lldiv+1,i2printf@tmpval+1
 15737  00133A  C003  F061         	movff	?i2___lldiv+2,i2printf@tmpval+2
 15738  00133E  C004  F062         	movff	?i2___lldiv+3,i2printf@tmpval+3
 15739                           
 15740                           ;doprnt.c: 1230: tmpval.vd %= 10;
 15741  001342  C05F  F00E         	movff	i2printf@tmpval,i2___llmod@dividend
 15742  001346  C060  F00F         	movff	i2printf@tmpval+1,i2___llmod@dividend+1
 15743  00134A  C061  F010         	movff	i2printf@tmpval+2,i2___llmod@dividend+2
 15744  00134E  C062  F011         	movff	i2printf@tmpval+3,i2___llmod@dividend+3
 15745  001352  0E0A               	movlw	10
 15746  001354  6E12               	movwf	i2___llmod@divisor,c
 15747  001356  0E00               	movlw	0
 15748  001358  6E13               	movwf	i2___llmod@divisor+1,c
 15749  00135A  0E00               	movlw	0
 15750  00135C  6E14               	movwf	i2___llmod@divisor+2,c
 15751  00135E  0E00               	movlw	0
 15752  001360  6E15               	movwf	i2___llmod@divisor+3,c
 15753  001362  EC65  F026         	call	i2___llmod	;wreg free
 15754  001366  C00E  F05F         	movff	?i2___llmod,i2printf@tmpval
 15755  00136A  C00F  F060         	movff	?i2___llmod+1,i2printf@tmpval+1
 15756  00136E  C010  F061         	movff	?i2___llmod+2,i2printf@tmpval+2
 15757  001372  C011  F062         	movff	?i2___llmod+3,i2printf@tmpval+3
 15758                           
 15759                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
 15760  001376  505F               	movf	i2printf@tmpval,w,c
 15761  001378  0F30               	addlw	48
 15762  00137A  EC86  F029         	call	i2_putch
 15763                           
 15764                           ;doprnt.c: 1232: val %= dpowers[c];
 15765  00137E  C065  F00E         	movff	i2printf@val,i2___llmod@dividend
 15766  001382  C066  F00F         	movff	i2printf@val+1,i2___llmod@dividend+1
 15767  001386  C067  F010         	movff	i2printf@val+2,i2___llmod@dividend+2
 15768  00138A  C068  F011         	movff	i2printf@val+3,i2___llmod@dividend+3
 15769  00138E  5070               	movf	i2printf@c,w,c
 15770  001390  0D04               	mullw	4
 15771  001392  0EE1               	movlw	low _dpowers
 15772  001394  24F3               	addwf	prodl,w,c
 15773  001396  6EF6               	movwf	tblptrl,c
 15774  001398  0EFB               	movlw	high _dpowers
 15775  00139A  20F4               	addwfc	prodh,w,c
 15776  00139C  6EF7               	movwf	tblptrh,c
 15777  00139E                     	if	0	;There are less than 3 active tblptr bytes
 15778  00139E                     	endif
 15779  00139E  0009               	tblrd		*+
 15780  0013A0  CFF5 F012          	movff	tablat,i2___llmod@divisor
 15781  0013A4  0009               	tblrd		*+
 15782  0013A6  CFF5 F013          	movff	tablat,i2___llmod@divisor+1
 15783  0013AA  0009               	tblrd		*+
 15784  0013AC  CFF5 F014          	movff	tablat,i2___llmod@divisor+2
 15785  0013B0  000A               	tblrd		*-
 15786  0013B2  CFF5 F015          	movff	tablat,i2___llmod@divisor+3
 15787  0013B6  EC65  F026         	call	i2___llmod	;wreg free
 15788  0013BA  C00E  F065         	movff	?i2___llmod,i2printf@val
 15789  0013BE  C00F  F066         	movff	?i2___llmod+1,i2printf@val+1
 15790  0013C2  C010  F067         	movff	?i2___llmod+2,i2printf@val+2
 15791  0013C6  C011  F068         	movff	?i2___llmod+3,i2printf@val+3
 15792  0013CA                     i2l5259:
 15793  0013CA  0670               	decf	i2printf@c,f,c
 15794  0013CC  2870               	incf	i2printf@c,w,c
 15795  0013CE  B4D8               	btfsc	status,2,c
 15796  0013D0  D007               	goto	i2l5265
 15797  0013D2  D791               	goto	i2l5253
 15798  0013D4                     i2l5261:
 15799                           
 15800                           ;doprnt.c: 1236: (putch('0') );
 15801  0013D4  0E30               	movlw	48
 15802  0013D6  EC86  F029         	call	i2_putch
 15803                           
 15804                           ;doprnt.c: 1237: prec--;
 15805  0013DA  065D               	decf	i2printf@prec,f,c
 15806  0013DC  A0D8               	btfss	status,0,c
 15807  0013DE  065E               	decf	i2printf@prec+1,f,c
 15808  0013E0                     i2l5265:
 15809  0013E0  505D               	movf	i2printf@prec,w,c
 15810  0013E2  105E               	iorwf	i2printf@prec+1,w,c
 15811  0013E4  B4D8               	btfsc	status,2,c
 15812  0013E6  D16C               	goto	i2l5365
 15813  0013E8  D7F5               	goto	i2l5261
 15814  0013EA                     i2l5267:
 15815                           
 15816                           ;doprnt.c: 1246: }
 15817                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
 15818  0013EA  0EC0               	movlw	192
 15819  0013EC  1469               	andwf	i2printf@flag,w,c
 15820  0013EE  6E4D               	movwf	??i2_printf& (0+255),c
 15821  0013F0  0E00               	movlw	0
 15822  0013F2  146A               	andwf	i2printf@flag+1,w,c
 15823  0013F4  6E4E               	movwf	(??i2_printf+1)& (0+255),c
 15824  0013F6  504D               	movf	??i2_printf,w,c
 15825  0013F8  104E               	iorwf	??i2_printf+1,w,c
 15826  0013FA  A4D8               	btfss	status,2,c
 15827  0013FC  D01E               	goto	i2l5279
 15828                           
 15829                           ;doprnt.c: 1253: {
 15830                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 15831  0013FE  C05B  FFD9         	movff	i2printf@ap,fsr2l
 15832  001402  C05C  FFDA         	movff	i2printf@ap+1,fsr2h
 15833  001406  CFDE F065          	movff	postinc2,i2printf@val
 15834  00140A  CFDD F066          	movff	postdec2,i2printf@val+1
 15835  00140E  0E00               	movlw	0
 15836  001410  BE66               	btfsc	i2printf@val+1,7,c
 15837  001412  0EFF               	movlw	-1
 15838  001414  6E67               	movwf	i2printf@val+2,c
 15839  001416  6E68               	movwf	i2printf@val+3,c
 15840  001418  0E02               	movlw	2
 15841  00141A  265B               	addwf	i2printf@ap,f,c
 15842  00141C  0E00               	movlw	0
 15843  00141E  225C               	addwfc	i2printf@ap+1,f,c
 15844                           
 15845                           ;doprnt.c: 1261: if((long)val < 0) {
 15846  001420  AE68               	btfss	i2printf@val+3,7,c
 15847  001422  D05A               	goto	i2l5313
 15848                           
 15849                           ;doprnt.c: 1262: flag |= 0x03;
 15850  001424  0E03               	movlw	3
 15851  001426  1269               	iorwf	i2printf@flag,f,c
 15852                           
 15853                           ;doprnt.c: 1263: val = -val;
 15854  001428  1E68               	comf	i2printf@val+3,f,c
 15855  00142A  1E67               	comf	i2printf@val+2,f,c
 15856  00142C  1E66               	comf	i2printf@val+1,f,c
 15857  00142E  6C65               	negf	i2printf@val,c
 15858  001430  0E00               	movlw	0
 15859  001432  2266               	addwfc	i2printf@val+1,f,c
 15860  001434  2267               	addwfc	i2printf@val+2,f,c
 15861  001436  2268               	addwfc	i2printf@val+3,f,c
 15862                           
 15863                           ;doprnt.c: 1264: }
 15864                           ;doprnt.c: 1266: }
 15865  001438  D04F               	goto	i2l5313
 15866  00143A                     i2l5279:
 15867                           
 15868                           ;doprnt.c: 1268: else
 15869                           ;doprnt.c: 1273: {
 15870                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 15871  00143A  C05B  FFD9         	movff	i2printf@ap,fsr2l
 15872  00143E  C05C  FFDA         	movff	i2printf@ap+1,fsr2h
 15873  001442  CFDE F04D          	movff	postinc2,??i2_printf
 15874  001446  CFDD F04E          	movff	postdec2,??i2_printf+1
 15875  00144A  C04D  F065         	movff	??i2_printf,i2printf@val
 15876  00144E  C04E  F066         	movff	??i2_printf+1,i2printf@val+1
 15877  001452  6A67               	clrf	i2printf@val+2,c
 15878  001454  6A68               	clrf	i2printf@val+3,c
 15879  001456  0E02               	movlw	2
 15880  001458  265B               	addwf	i2printf@ap,f,c
 15881  00145A  0E00               	movlw	0
 15882  00145C  225C               	addwfc	i2printf@ap+1,f,c
 15883                           
 15884                           ;doprnt.c: 1287: }
 15885                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
 15886  00145E  D03C               	goto	i2l5313
 15887  001460                     i2l5283:
 15888                           
 15889                           ;doprnt.c: 1302: case 0xC0:
 15890                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 15891  001460  0E01               	movlw	1
 15892  001462  6E70               	movwf	i2printf@c,c
 15893  001464                     i2l5285:
 15894  001464  0E0A               	movlw	10
 15895  001466  1870               	xorwf	i2printf@c,w,c
 15896  001468  B4D8               	btfsc	status,2,c
 15897  00146A  D041               	goto	i2l5315
 15898                           
 15899                           ;doprnt.c: 1306: if(val < dpowers[c])
 15900  00146C  5070               	movf	i2printf@c,w,c
 15901  00146E  0D04               	mullw	4
 15902  001470  0EE1               	movlw	low _dpowers
 15903  001472  24F3               	addwf	prodl,w,c
 15904  001474  6EF6               	movwf	tblptrl,c
 15905  001476  0EFB               	movlw	high _dpowers
 15906  001478  20F4               	addwfc	prodh,w,c
 15907  00147A  6EF7               	movwf	tblptrh,c
 15908  00147C                     	if	0	;There are less than 3 active tblptr bytes
 15909  00147C                     	endif
 15910  00147C  0009               	tblrd		*+
 15911  00147E  50F5               	movf	tablat,w,c
 15912  001480  5C65               	subwf	i2printf@val,w,c
 15913  001482  0009               	tblrd		*+
 15914  001484  50F5               	movf	tablat,w,c
 15915  001486  5866               	subwfb	i2printf@val+1,w,c
 15916  001488  0009               	tblrd		*+
 15917  00148A  50F5               	movf	tablat,w,c
 15918  00148C  5867               	subwfb	i2printf@val+2,w,c
 15919  00148E  0009               	tblrd		*+
 15920  001490  50F5               	movf	tablat,w,c
 15921  001492  5868               	subwfb	i2printf@val+3,w,c
 15922  001494  A0D8               	btfss	status,0,c
 15923  001496  D02B               	goto	i2l5315
 15924                           
 15925                           ;doprnt.c: 1307: break;
 15926  001498  2A70               	incf	i2printf@c,f,c
 15927  00149A  D7E4               	goto	i2l5285
 15928  00149C                     i2l5297:
 15929                           
 15930                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 15931  00149C  0E01               	movlw	1
 15932  00149E  6E70               	movwf	i2printf@c,c
 15933  0014A0                     i2l5299:
 15934  0014A0  0E08               	movlw	8
 15935  0014A2  1870               	xorwf	i2printf@c,w,c
 15936  0014A4  B4D8               	btfsc	status,2,c
 15937  0014A6  D023               	goto	i2l5315
 15938                           
 15939                           ;doprnt.c: 1317: if(val < hexpowers[c])
 15940  0014A8  5070               	movf	i2printf@c,w,c
 15941  0014AA  0D04               	mullw	4
 15942  0014AC  0E57               	movlw	low _hexpowers
 15943  0014AE  24F3               	addwf	prodl,w,c
 15944  0014B0  6EF6               	movwf	tblptrl,c
 15945  0014B2  0EFC               	movlw	high _hexpowers
 15946  0014B4  20F4               	addwfc	prodh,w,c
 15947  0014B6  6EF7               	movwf	tblptrh,c
 15948  0014B8                     	if	0	;There are less than 3 active tblptr bytes
 15949  0014B8                     	endif
 15950  0014B8  0009               	tblrd		*+
 15951  0014BA  50F5               	movf	tablat,w,c
 15952  0014BC  5C65               	subwf	i2printf@val,w,c
 15953  0014BE  0009               	tblrd		*+
 15954  0014C0  50F5               	movf	tablat,w,c
 15955  0014C2  5866               	subwfb	i2printf@val+1,w,c
 15956  0014C4  0009               	tblrd		*+
 15957  0014C6  50F5               	movf	tablat,w,c
 15958  0014C8  5867               	subwfb	i2printf@val+2,w,c
 15959  0014CA  0009               	tblrd		*+
 15960  0014CC  50F5               	movf	tablat,w,c
 15961  0014CE  5868               	subwfb	i2printf@val+3,w,c
 15962  0014D0  A0D8               	btfss	status,0,c
 15963  0014D2  D00D               	goto	i2l5315
 15964                           
 15965                           ;doprnt.c: 1318: break;
 15966  0014D4  2A70               	incf	i2printf@c,f,c
 15967  0014D6  D7E4               	goto	i2l5299
 15968  0014D8                     i2l5313:
 15969  0014D8  5069               	movf	i2printf@flag,w,c
 15970  0014DA  0BC0               	andlw	192
 15971                           
 15972                           ; Switch size 1, requested type "space"
 15973                           ; Number of cases is 3, Range of values is 0 to 192
 15974                           ; switch strategies available:
 15975                           ; Name         Instructions Cycles
 15976                           ; simple_byte           10     6 (average)
 15977                           ;	Chosen strategy is simple_byte
 15978  0014DC  0A00               	xorlw	0	; case 0
 15979  0014DE  B4D8               	btfsc	status,2,c
 15980  0014E0  D7BF               	goto	i2l5283
 15981  0014E2  0A80               	xorlw	128	; case 128
 15982  0014E4  B4D8               	btfsc	status,2,c
 15983  0014E6  D7DA               	goto	i2l5297
 15984  0014E8  0A40               	xorlw	64	; case 192
 15985  0014EA  B4D8               	btfsc	status,2,c
 15986  0014EC  D7B9               	goto	i2l5283
 15987  0014EE                     i2l5315:
 15988                           
 15989                           ;doprnt.c: 1345: if(width && flag & 0x03)
 15990  0014EE  506E               	movf	i2printf@width,w,c
 15991  0014F0  106F               	iorwf	i2printf@width+1,w,c
 15992  0014F2  B4D8               	btfsc	status,2,c
 15993  0014F4  D00D               	goto	i2l5321
 15994  0014F6  0E03               	movlw	3
 15995  0014F8  1469               	andwf	i2printf@flag,w,c
 15996  0014FA  6E4D               	movwf	??i2_printf& (0+255),c
 15997  0014FC  0E00               	movlw	0
 15998  0014FE  146A               	andwf	i2printf@flag+1,w,c
 15999  001500  6E4E               	movwf	(??i2_printf+1)& (0+255),c
 16000  001502  504D               	movf	??i2_printf,w,c
 16001  001504  104E               	iorwf	??i2_printf+1,w,c
 16002  001506  B4D8               	btfsc	status,2,c
 16003  001508  D003               	goto	i2l5321
 16004                           
 16005                           ;doprnt.c: 1346: width--;
 16006  00150A  066E               	decf	i2printf@width,f,c
 16007  00150C  A0D8               	btfss	status,0,c
 16008  00150E  066F               	decf	i2printf@width+1,f,c
 16009  001510                     i2l5321:
 16010                           
 16011                           ;doprnt.c: 1381: if(width > c)
 16012  001510  0E80               	movlw	128
 16013  001512  BE70               	btfsc	i2printf@c,7,c
 16014  001514  0E7F               	movlw	127
 16015  001516  6E4D               	movwf	??i2_printf& (0+255),c
 16016  001518  506E               	movf	i2printf@width,w,c
 16017  00151A  5C70               	subwf	i2printf@c,w,c
 16018  00151C  506F               	movf	i2printf@width+1,w,c
 16019  00151E  0A80               	xorlw	128
 16020  001520  584D               	subwfb	??i2_printf& (0+255),w,c
 16021  001522  B0D8               	btfsc	status,0,c
 16022  001524  D007               	goto	i2l5325
 16023                           
 16024                           ;doprnt.c: 1382: width -= c;
 16025  001526  5070               	movf	i2printf@c,w,c
 16026  001528  5E6E               	subwf	i2printf@width,f,c
 16027  00152A  0E00               	movlw	0
 16028  00152C  BE70               	btfsc	i2printf@c,7,c
 16029  00152E  0EFF               	movlw	255
 16030  001530  5A6F               	subwfb	i2printf@width+1,f,c
 16031  001532  D004               	goto	i2l5327
 16032  001534                     i2l5325:
 16033                           
 16034                           ;doprnt.c: 1383: else
 16035                           ;doprnt.c: 1384: width = 0;
 16036  001534  0E00               	movlw	0
 16037  001536  6E6F               	movwf	i2printf@width+1,c
 16038  001538  0E00               	movlw	0
 16039  00153A  6E6E               	movwf	i2printf@width,c
 16040  00153C                     i2l5327:
 16041                           
 16042                           ;doprnt.c: 1387: if(flag & 0x04) {
 16043  00153C  A469               	btfss	i2printf@flag,2,c
 16044  00153E  D018               	goto	i2l5339
 16045                           
 16046                           ;doprnt.c: 1392: if(flag & 0x03)
 16047  001540  0E03               	movlw	3
 16048  001542  1469               	andwf	i2printf@flag,w,c
 16049  001544  6E4D               	movwf	??i2_printf& (0+255),c
 16050  001546  0E00               	movlw	0
 16051  001548  146A               	andwf	i2printf@flag+1,w,c
 16052  00154A  6E4E               	movwf	(??i2_printf+1)& (0+255),c
 16053  00154C  504D               	movf	??i2_printf,w,c
 16054  00154E  104E               	iorwf	??i2_printf+1,w,c
 16055  001550  B4D8               	btfsc	status,2,c
 16056  001552  D003               	goto	i2l5333
 16057                           
 16058                           ;doprnt.c: 1393: (putch('-') );
 16059  001554  0E2D               	movlw	45
 16060  001556  EC86  F029         	call	i2_putch
 16061  00155A                     i2l5333:
 16062                           
 16063                           ;doprnt.c: 1415: if(width)
 16064  00155A  506E               	movf	i2printf@width,w,c
 16065  00155C  106F               	iorwf	i2printf@width+1,w,c
 16066  00155E  B4D8               	btfsc	status,2,c
 16067  001560  D022               	goto	i2l5349
 16068                           
 16069                           ;doprnt.c: 1417: (putch('0') );
 16070                           
 16071                           ;doprnt.c: 1416: do
 16072  001562  0E30               	movlw	48
 16073  001564  EC86  F029         	call	i2_putch
 16074                           
 16075                           ;doprnt.c: 1418: while(--width);
 16076  001568  066E               	decf	i2printf@width,f,c
 16077  00156A  A0D8               	btfss	status,0,c
 16078  00156C  066F               	decf	i2printf@width+1,f,c
 16079  00156E  D7F5               	goto	i2l5333
 16080  001570                     i2l5339:
 16081                           
 16082                           ;doprnt.c: 1422: {
 16083                           ;doprnt.c: 1424: if(width
 16084                           ;doprnt.c: 1428: )
 16085  001570  506E               	movf	i2printf@width,w,c
 16086  001572  106F               	iorwf	i2printf@width+1,w,c
 16087  001574  B4D8               	btfsc	status,2,c
 16088  001576  D00A               	goto	i2l5345
 16089  001578                     i2l5341:
 16090                           
 16091                           ;doprnt.c: 1430: (putch(' ') );
 16092  001578  0E20               	movlw	32
 16093  00157A  EC86  F029         	call	i2_putch
 16094                           
 16095                           ;doprnt.c: 1431: while(--width);
 16096  00157E  066E               	decf	i2printf@width,f,c
 16097  001580  A0D8               	btfss	status,0,c
 16098  001582  066F               	decf	i2printf@width+1,f,c
 16099  001584  506E               	movf	i2printf@width,w,c
 16100  001586  106F               	iorwf	i2printf@width+1,w,c
 16101  001588  A4D8               	btfss	status,2,c
 16102  00158A  D7F6               	goto	i2l5341
 16103  00158C                     i2l5345:
 16104                           
 16105                           ;doprnt.c: 1438: if(flag & 0x03)
 16106  00158C  0E03               	movlw	3
 16107  00158E  1469               	andwf	i2printf@flag,w,c
 16108  001590  6E4D               	movwf	??i2_printf& (0+255),c
 16109  001592  0E00               	movlw	0
 16110  001594  146A               	andwf	i2printf@flag+1,w,c
 16111  001596  6E4E               	movwf	(??i2_printf+1)& (0+255),c
 16112  001598  504D               	movf	??i2_printf,w,c
 16113  00159A  104E               	iorwf	??i2_printf+1,w,c
 16114  00159C  B4D8               	btfsc	status,2,c
 16115  00159E  D003               	goto	i2l5349
 16116                           
 16117                           ;doprnt.c: 1439: (putch('-') );
 16118  0015A0  0E2D               	movlw	45
 16119  0015A2  EC86  F029         	call	i2_putch
 16120  0015A6                     i2l5349:
 16121                           
 16122                           ;doprnt.c: 1469: }
 16123                           ;doprnt.c: 1472: prec = c;
 16124  0015A6  5070               	movf	i2printf@c,w,c
 16125  0015A8  6E5D               	movwf	i2printf@prec,c
 16126  0015AA  6A5E               	clrf	i2printf@prec+1,c
 16127  0015AC  BE5D               	btfsc	i2printf@prec,7,c
 16128  0015AE  065E               	decf	i2printf@prec+1,f,c
 16129                           
 16130                           ;doprnt.c: 1474: while(prec--) {
 16131  0015B0  D07F               	goto	i2l5363
 16132  0015B2                     i2l5351:
 16133                           
 16134                           ;doprnt.c: 1486: case 0xC0:
 16135                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 16136  0015B2  C05D  F04D         	movff	i2printf@prec,??i2_printf
 16137  0015B6  C05E  F04E         	movff	i2printf@prec+1,??i2_printf+1
 16138  0015BA  90D8               	bcf	status,0,c
 16139  0015BC  364D               	rlcf	??i2_printf,f,c
 16140  0015BE  364E               	rlcf	??i2_printf+1,f,c
 16141  0015C0  90D8               	bcf	status,0,c
 16142  0015C2  364D               	rlcf	??i2_printf,f,c
 16143  0015C4  364E               	rlcf	??i2_printf+1,f,c
 16144  0015C6  0EE1               	movlw	low _dpowers
 16145  0015C8  244D               	addwf	??i2_printf,w,c
 16146  0015CA  6EF6               	movwf	tblptrl,c
 16147  0015CC  0EFB               	movlw	high _dpowers
 16148  0015CE  204E               	addwfc	??i2_printf+1,w,c
 16149  0015D0  6EF7               	movwf	tblptrh,c
 16150  0015D2                     	if	0	;There are less than 3 active tblptr bytes
 16151  0015D2                     	endif
 16152  0015D2  0009               	tblrd		*+
 16153  0015D4  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 16154  0015D8  0009               	tblrd		*+
 16155  0015DA  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 16156  0015DE  0009               	tblrd		*+
 16157  0015E0  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 16158  0015E4  000A               	tblrd		*-
 16159  0015E6  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 16160  0015EA  C065  F001         	movff	i2printf@val,i2___lldiv@dividend
 16161  0015EE  C066  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 16162  0015F2  C067  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 16163  0015F6  C068  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 16164  0015FA  EC03  F025         	call	i2___lldiv	;wreg free
 16165  0015FE  C001  F00E         	movff	?i2___lldiv,i2___llmod@dividend
 16166  001602  C002  F00F         	movff	?i2___lldiv+1,i2___llmod@dividend+1
 16167  001606  C003  F010         	movff	?i2___lldiv+2,i2___llmod@dividend+2
 16168  00160A  C004  F011         	movff	?i2___lldiv+3,i2___llmod@dividend+3
 16169  00160E  0E0A               	movlw	10
 16170  001610  6E12               	movwf	i2___llmod@divisor,c
 16171  001612  0E00               	movlw	0
 16172  001614  6E13               	movwf	i2___llmod@divisor+1,c
 16173  001616  0E00               	movlw	0
 16174  001618  6E14               	movwf	i2___llmod@divisor+2,c
 16175  00161A  0E00               	movlw	0
 16176  00161C  6E15               	movwf	i2___llmod@divisor+3,c
 16177  00161E  EC65  F026         	call	i2___llmod	;wreg free
 16178  001622  500E               	movf	?i2___llmod,w,c
 16179  001624  0F30               	addlw	48
 16180  001626  6E70               	movwf	i2printf@c,c
 16181                           
 16182                           ;doprnt.c: 1491: break;
 16183  001628  D040               	goto	i2l5361
 16184  00162A                     i2l5353:
 16185                           
 16186                           ;doprnt.c: 1499: {
 16187                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 16188  00162A  C065  F001         	movff	i2printf@val,i2___lldiv@dividend
 16189  00162E  C066  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 16190  001632  C067  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 16191  001636  C068  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 16192  00163A  C05D  F04D         	movff	i2printf@prec,??i2_printf
 16193  00163E  C05E  F04E         	movff	i2printf@prec+1,??i2_printf+1
 16194  001642  90D8               	bcf	status,0,c
 16195  001644  364D               	rlcf	??i2_printf,f,c
 16196  001646  364E               	rlcf	??i2_printf+1,f,c
 16197  001648  90D8               	bcf	status,0,c
 16198  00164A  364D               	rlcf	??i2_printf,f,c
 16199  00164C  364E               	rlcf	??i2_printf+1,f,c
 16200  00164E  0E57               	movlw	low _hexpowers
 16201  001650  244D               	addwf	??i2_printf,w,c
 16202  001652  6EF6               	movwf	tblptrl,c
 16203  001654  0EFC               	movlw	high _hexpowers
 16204  001656  204E               	addwfc	??i2_printf+1,w,c
 16205  001658  6EF7               	movwf	tblptrh,c
 16206  00165A                     	if	0	;There are less than 3 active tblptr bytes
 16207  00165A                     	endif
 16208  00165A  0009               	tblrd		*+
 16209  00165C  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 16210  001660  0009               	tblrd		*+
 16211  001662  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 16212  001666  0009               	tblrd		*+
 16213  001668  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 16214  00166C  000A               	tblrd		*-
 16215  00166E  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 16216  001672  EC03  F025         	call	i2___lldiv	;wreg free
 16217  001676  5001               	movf	?i2___lldiv,w,c
 16218  001678  0B0F               	andlw	15
 16219  00167A  6E58               	movwf	i2printf@idx,c
 16220                           
 16221                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 16222  00167C  5058               	movf	i2printf@idx,w,c
 16223  00167E  0D01               	mullw	1
 16224  001680  0E44               	movlw	low STR_52
 16225  001682  24F3               	addwf	prodl,w,c
 16226  001684  6EF6               	movwf	tblptrl,c
 16227  001686  0EFF               	movlw	high STR_52
 16228  001688  20F4               	addwfc	prodh,w,c
 16229  00168A  6EF7               	movwf	tblptrh,c
 16230  00168C                     	if	0	;There are less than 3 active tblptr bytes
 16231  00168C                     	endif
 16232  00168C  0008               	tblrd		*
 16233  00168E  CFF5 F070          	movff	tablat,i2printf@c
 16234                           
 16235                           ;doprnt.c: 1523: }
 16236                           
 16237                           ;doprnt.c: 1508: }
 16238                           ;doprnt.c: 1510: break;
 16239  001692  D00B               	goto	i2l5361
 16240  001694                     i2l5359:
 16241  001694  5069               	movf	i2printf@flag,w,c
 16242  001696  0BC0               	andlw	192
 16243                           
 16244                           ; Switch size 1, requested type "space"
 16245                           ; Number of cases is 3, Range of values is 0 to 192
 16246                           ; switch strategies available:
 16247                           ; Name         Instructions Cycles
 16248                           ; simple_byte           10     6 (average)
 16249                           ;	Chosen strategy is simple_byte
 16250  001698  0A00               	xorlw	0	; case 0
 16251  00169A  B4D8               	btfsc	status,2,c
 16252  00169C  D78A               	goto	i2l5351
 16253  00169E  0A80               	xorlw	128	; case 128
 16254  0016A0  B4D8               	btfsc	status,2,c
 16255  0016A2  D7C3               	goto	i2l5353
 16256  0016A4  0A40               	xorlw	64	; case 192
 16257  0016A6  B4D8               	btfsc	status,2,c
 16258  0016A8  D784               	goto	i2l5351
 16259  0016AA                     i2l5361:
 16260                           
 16261                           ;doprnt.c: 1524: (putch(c) );
 16262  0016AA  5070               	movf	i2printf@c,w,c
 16263  0016AC  EC86  F029         	call	i2_putch
 16264  0016B0                     i2l5363:
 16265  0016B0  065D               	decf	i2printf@prec,f,c
 16266  0016B2  A0D8               	btfss	status,0,c
 16267  0016B4  065E               	decf	i2printf@prec+1,f,c
 16268  0016B6  285D               	incf	i2printf@prec,w,c
 16269  0016B8  E1ED               	bnz	i2l5359
 16270  0016BA  285E               	incf	i2printf@prec+1,w,c
 16271  0016BC  A4D8               	btfss	status,2,c
 16272  0016BE  D7EA               	goto	i2l5359
 16273  0016C0                     i2l5365:
 16274  0016C0  C047  FFF6         	movff	i2printf@f,tblptrl
 16275  0016C4  C048  FFF7         	movff	i2printf@f+1,tblptrh
 16276  0016C8  4A47               	infsnz	i2printf@f,f,c
 16277  0016CA  2A48               	incf	i2printf@f+1,f,c
 16278  0016CC                     	if	0	;tblptru may be non-zero
 16279  0016CC                     	endif
 16280  0016CC                     	if	0	;tblptru may be non-zero
 16281  0016CC                     	endif
 16282  0016CC  0008               	tblrd		*
 16283  0016CE  CFF5 F070          	movff	tablat,i2printf@c
 16284  0016D2  5070               	movf	i2printf@c,w,c
 16285  0016D4  B4D8               	btfsc	status,2,c
 16286  0016D6  0012               	return	
 16287  0016D8  EF4E  F006         	goto	i2l5055
 16288  0016DC                     __end_ofi2_printf:
 16289                           	opt stack 0
 16290                           pclatu	equ	0xFFB
 16291                           pclath	equ	0xFFA
 16292                           tblptru	equ	0xFF8
 16293                           tblptrh	equ	0xFF7
 16294                           tblptrl	equ	0xFF6
 16295                           tablat	equ	0xFF5
 16296                           prodh	equ	0xFF4
 16297                           prodl	equ	0xFF3
 16298                           intcon	equ	0xFF2
 16299                           intcon3	equ	0xFF0
 16300                           postinc0	equ	0xFEE
 16301                           fsr0h	equ	0xFEA
 16302                           fsr0l	equ	0xFE9
 16303                           wreg	equ	0xFE8
 16304                           plusw1	equ	0xFE3
 16305                           fsr1h	equ	0xFE2
 16306                           fsr1l	equ	0xFE1
 16307                           indf2	equ	0xFDF
 16308                           postinc2	equ	0xFDE
 16309                           postdec2	equ	0xFDD
 16310                           plusw2	equ	0xFDB
 16311                           fsr2h	equ	0xFDA
 16312                           fsr2l	equ	0xFD9
 16313                           status	equ	0xFD8
 16314                           
 16315 ;; *************** function i2_scale *****************
 16316 ;; Defined at:
 16317 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
 16318 ;; Parameters:    Size  Location     Type
 16319 ;;  scl             1    wreg     char 
 16320 ;; Auto vars:     Size  Location     Type
 16321 ;;  scl             1   48[COMRAM] char 
 16322 ;; Return value:  Size  Location     Type
 16323 ;;                  3   42[COMRAM] char 
 16324 ;; Registers used:
 16325 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16326 ;; Tracked objects:
 16327 ;;		On entry : 0/0
 16328 ;;		On exit  : 0/0
 16329 ;;		Unchanged: 0/0
 16330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16331 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16332 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16334 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16335 ;;Total ram usage:        7 bytes
 16336 ;; Hardware stack levels used:    1
 16337 ;; Hardware stack levels required when called:    2
 16338 ;; This function calls:
 16339 ;;		i2___awdiv
 16340 ;;		i2___awmod
 16341 ;;		i2___ftmul
 16342 ;;		i2___wmul
 16343 ;; This function is called by:
 16344 ;;		i2_printf
 16345 ;; This function uses a non-reentrant model
 16346 ;;
 16347                           
 16348                           	psect	text61
 16349  002044                     __ptext61:
 16350                           	opt stack 0
 16351  002044                     i2_scale:
 16352                           	opt stack 20
 16353                           
 16354                           ;incstack = 0
 16355                           ;i2scale@scl stored from wreg
 16356  002044  6E31               	movwf	i2scale@scl,c
 16357                           
 16358                           ;doprnt.c: 428: if(scl < 0) {
 16359  002046  AE31               	btfss	i2scale@scl,7,c
 16360  002048  D0FB               	goto	i2l4493
 16361                           
 16362                           ;doprnt.c: 429: scl = -scl;
 16363  00204A  6C31               	negf	i2scale@scl,c
 16364                           
 16365                           ;doprnt.c: 430: if(scl>=110)
 16366  00204C  5031               	movf	i2scale@scl,w,c
 16367  00204E  0A80               	xorlw	128
 16368  002050  0F12               	addlw	-238
 16369  002052  A0D8               	btfss	status,0,c
 16370  002054  D091               	goto	i2l4483
 16371                           
 16372                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 16373  002056  0E00               	movlw	0
 16374  002058  6E12               	movwf	i2___wmul@multiplicand+1,c
 16375  00205A  0E03               	movlw	3
 16376  00205C  6E11               	movwf	i2___wmul@multiplicand,c
 16377  00205E  0E00               	movlw	0
 16378  002060  6E0A               	movwf	i2___awdiv@divisor+1,c
 16379  002062  0E0A               	movlw	10
 16380  002064  6E09               	movwf	i2___awdiv@divisor,c
 16381  002066  0E00               	movlw	0
 16382  002068  6E04               	movwf	i2___awmod@divisor+1,c
 16383  00206A  0E64               	movlw	100
 16384  00206C  6E03               	movwf	i2___awmod@divisor,c
 16385  00206E  5031               	movf	i2scale@scl,w,c
 16386  002070  6E01               	movwf	i2___awmod@dividend,c
 16387  002072  6A02               	clrf	i2___awmod@dividend+1,c
 16388  002074  BE01               	btfsc	i2___awmod@dividend,7,c
 16389  002076  0602               	decf	i2___awmod@dividend+1,f,c
 16390  002078  ECF9  F025         	call	i2___awmod	;wreg free
 16391  00207C  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 16392  002080  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 16393  002084  ECC1  F024         	call	i2___awdiv	;wreg free
 16394  002088  0E09               	movlw	9
 16395  00208A  2407               	addwf	?i2___awdiv,w,c
 16396  00208C  6E0F               	movwf	i2___wmul@multiplier,c
 16397  00208E  0E00               	movlw	0
 16398  002090  2008               	addwfc	?i2___awdiv+1,w,c
 16399  002092  6E10               	movwf	i2___wmul@multiplier+1,c
 16400  002094  ECDD  F028         	call	i2___wmul	;wreg free
 16401  002098  0E30               	movlw	low __npowers_
 16402  00209A  240F               	addwf	?i2___wmul,w,c
 16403  00209C  6EF6               	movwf	tblptrl,c
 16404  00209E  0EFC               	movlw	high __npowers_
 16405  0020A0  2010               	addwfc	?i2___wmul+1,w,c
 16406  0020A2  6EF7               	movwf	tblptrh,c
 16407  0020A4                     	if	0	;There are less than 3 active tblptr bytes
 16408  0020A4                     	endif
 16409  0020A4  0009               	tblrd		*+
 16410  0020A6  CFF5 F01F          	movff	tablat,i2___ftmul@f2
 16411  0020AA  0009               	tblrd		*+
 16412  0020AC  CFF5 F020          	movff	tablat,i2___ftmul@f2+1
 16413  0020B0  000A               	tblrd		*-
 16414  0020B2  CFF5 F021          	movff	tablat,i2___ftmul@f2+2
 16415  0020B6  0E00               	movlw	0
 16416  0020B8  6E0A               	movwf	i2___awdiv@divisor+1,c
 16417  0020BA  0E64               	movlw	100
 16418  0020BC  6E09               	movwf	i2___awdiv@divisor,c
 16419  0020BE  5031               	movf	i2scale@scl,w,c
 16420  0020C0  6E07               	movwf	i2___awdiv@dividend,c
 16421  0020C2  6A08               	clrf	i2___awdiv@dividend+1,c
 16422  0020C4  BE07               	btfsc	i2___awdiv@dividend,7,c
 16423  0020C6  0608               	decf	i2___awdiv@dividend+1,f,c
 16424  0020C8  ECC1  F024         	call	i2___awdiv	;wreg free
 16425  0020CC  0E12               	movlw	18
 16426  0020CE  2407               	addwf	?i2___awdiv,w,c
 16427  0020D0  6E0F               	movwf	i2___wmul@multiplier,c
 16428  0020D2  0E00               	movlw	0
 16429  0020D4  2008               	addwfc	?i2___awdiv+1,w,c
 16430  0020D6  6E10               	movwf	i2___wmul@multiplier+1,c
 16431  0020D8  0E00               	movlw	0
 16432  0020DA  6E12               	movwf	i2___wmul@multiplicand+1,c
 16433  0020DC  0E03               	movlw	3
 16434  0020DE  6E11               	movwf	i2___wmul@multiplicand,c
 16435  0020E0  ECDD  F028         	call	i2___wmul	;wreg free
 16436  0020E4  0E30               	movlw	low __npowers_
 16437  0020E6  240F               	addwf	?i2___wmul,w,c
 16438  0020E8  6EF6               	movwf	tblptrl,c
 16439  0020EA  0EFC               	movlw	high __npowers_
 16440  0020EC  2010               	addwfc	?i2___wmul+1,w,c
 16441  0020EE  6EF7               	movwf	tblptrh,c
 16442  0020F0                     	if	0	;There are less than 3 active tblptr bytes
 16443  0020F0                     	endif
 16444  0020F0  0009               	tblrd		*+
 16445  0020F2  CFF5 F01C          	movff	tablat,i2___ftmul@f1
 16446  0020F6  0009               	tblrd		*+
 16447  0020F8  CFF5 F01D          	movff	tablat,i2___ftmul@f1+1
 16448  0020FC  000A               	tblrd		*-
 16449  0020FE  CFF5 F01E          	movff	tablat,i2___ftmul@f1+2
 16450  002102  EC94  F01E         	call	i2___ftmul	;wreg free
 16451  002106  C01C  F02E         	movff	?i2___ftmul,i2_scale$1661
 16452  00210A  C01D  F02F         	movff	?i2___ftmul+1,i2_scale$1661+1
 16453  00210E  C01E  F030         	movff	?i2___ftmul+2,i2_scale$1661+2
 16454                           
 16455                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 16456  002112  C02E  F01C         	movff	i2_scale$1661,i2___ftmul@f1
 16457  002116  C02F  F01D         	movff	i2_scale$1661+1,i2___ftmul@f1+1
 16458  00211A  C030  F01E         	movff	i2_scale$1661+2,i2___ftmul@f1+2
 16459  00211E  0E00               	movlw	0
 16460  002120  6E12               	movwf	i2___wmul@multiplicand+1,c
 16461  002122  0E03               	movlw	3
 16462  002124  6E11               	movwf	i2___wmul@multiplicand,c
 16463  002126  0E00               	movlw	0
 16464  002128  6E04               	movwf	i2___awmod@divisor+1,c
 16465  00212A  0E0A               	movlw	10
 16466  00212C  6E03               	movwf	i2___awmod@divisor,c
 16467  00212E  5031               	movf	i2scale@scl,w,c
 16468  002130  6E01               	movwf	i2___awmod@dividend,c
 16469  002132  6A02               	clrf	i2___awmod@dividend+1,c
 16470  002134  BE01               	btfsc	i2___awmod@dividend,7,c
 16471  002136  0602               	decf	i2___awmod@dividend+1,f,c
 16472  002138  ECF9  F025         	call	i2___awmod	;wreg free
 16473  00213C  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 16474  002140  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 16475  002144  ECDD  F028         	call	i2___wmul	;wreg free
 16476  002148  0E30               	movlw	low __npowers_
 16477  00214A  240F               	addwf	?i2___wmul,w,c
 16478  00214C  6EF6               	movwf	tblptrl,c
 16479  00214E  0EFC               	movlw	high __npowers_
 16480  002150  2010               	addwfc	?i2___wmul+1,w,c
 16481  002152  6EF7               	movwf	tblptrh,c
 16482  002154                     	if	0	;There are less than 3 active tblptr bytes
 16483  002154                     	endif
 16484  002154  0009               	tblrd		*+
 16485  002156  CFF5 F01F          	movff	tablat,i2___ftmul@f2
 16486  00215A  0009               	tblrd		*+
 16487  00215C  CFF5 F020          	movff	tablat,i2___ftmul@f2+1
 16488  002160  000A               	tblrd		*-
 16489  002162  CFF5 F021          	movff	tablat,i2___ftmul@f2+2
 16490  002166  EC94  F01E         	call	i2___ftmul	;wreg free
 16491  00216A  C01C  F02B         	movff	?i2___ftmul,?i2_scale
 16492  00216E  C01D  F02C         	movff	?i2___ftmul+1,?i2_scale+1
 16493  002172  C01E  F02D         	movff	?i2___ftmul+2,?i2_scale+2
 16494  002176  0012               	return	
 16495  002178                     i2l4483:
 16496                           
 16497                           ;doprnt.c: 432: else if(scl > 10)
 16498  002178  5031               	movf	i2scale@scl,w,c
 16499  00217A  0A80               	xorlw	128
 16500  00217C  0F75               	addlw	-139
 16501  00217E  A0D8               	btfss	status,0,c
 16502  002180  D04D               	goto	i2l4489
 16503                           
 16504                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 16505  002182  0E00               	movlw	0
 16506  002184  6E0A               	movwf	i2___awdiv@divisor+1,c
 16507  002186  0E0A               	movlw	10
 16508  002188  6E09               	movwf	i2___awdiv@divisor,c
 16509  00218A  5031               	movf	i2scale@scl,w,c
 16510  00218C  6E07               	movwf	i2___awdiv@dividend,c
 16511  00218E  6A08               	clrf	i2___awdiv@dividend+1,c
 16512  002190  BE07               	btfsc	i2___awdiv@dividend,7,c
 16513  002192  0608               	decf	i2___awdiv@dividend+1,f,c
 16514  002194  ECC1  F024         	call	i2___awdiv	;wreg free
 16515  002198  0E09               	movlw	9
 16516  00219A  2407               	addwf	?i2___awdiv,w,c
 16517  00219C  6E0F               	movwf	i2___wmul@multiplier,c
 16518  00219E  0E00               	movlw	0
 16519  0021A0  2008               	addwfc	?i2___awdiv+1,w,c
 16520  0021A2  6E10               	movwf	i2___wmul@multiplier+1,c
 16521  0021A4  0E00               	movlw	0
 16522  0021A6  6E12               	movwf	i2___wmul@multiplicand+1,c
 16523  0021A8  0E03               	movlw	3
 16524  0021AA  6E11               	movwf	i2___wmul@multiplicand,c
 16525  0021AC  ECDD  F028         	call	i2___wmul	;wreg free
 16526  0021B0  0E30               	movlw	low __npowers_
 16527  0021B2  240F               	addwf	?i2___wmul,w,c
 16528  0021B4  6EF6               	movwf	tblptrl,c
 16529  0021B6  0EFC               	movlw	high __npowers_
 16530  0021B8  2010               	addwfc	?i2___wmul+1,w,c
 16531  0021BA  6EF7               	movwf	tblptrh,c
 16532  0021BC                     	if	0	;There are less than 3 active tblptr bytes
 16533  0021BC                     	endif
 16534  0021BC  0009               	tblrd		*+
 16535  0021BE  CFF5 F01C          	movff	tablat,i2___ftmul@f1
 16536  0021C2  0009               	tblrd		*+
 16537  0021C4  CFF5 F01D          	movff	tablat,i2___ftmul@f1+1
 16538  0021C8  000A               	tblrd		*-
 16539  0021CA  CFF5 F01E          	movff	tablat,i2___ftmul@f1+2
 16540  0021CE  0E00               	movlw	0
 16541  0021D0  6E12               	movwf	i2___wmul@multiplicand+1,c
 16542  0021D2  0E03               	movlw	3
 16543  0021D4  6E11               	movwf	i2___wmul@multiplicand,c
 16544  0021D6  0E00               	movlw	0
 16545  0021D8  6E04               	movwf	i2___awmod@divisor+1,c
 16546  0021DA  0E0A               	movlw	10
 16547  0021DC  6E03               	movwf	i2___awmod@divisor,c
 16548  0021DE  5031               	movf	i2scale@scl,w,c
 16549  0021E0  6E01               	movwf	i2___awmod@dividend,c
 16550  0021E2  6A02               	clrf	i2___awmod@dividend+1,c
 16551  0021E4  BE01               	btfsc	i2___awmod@dividend,7,c
 16552  0021E6  0602               	decf	i2___awmod@dividend+1,f,c
 16553  0021E8  ECF9  F025         	call	i2___awmod	;wreg free
 16554  0021EC  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 16555  0021F0  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 16556  0021F4  ECDD  F028         	call	i2___wmul	;wreg free
 16557  0021F8  0E30               	movlw	low __npowers_
 16558  0021FA  240F               	addwf	?i2___wmul,w,c
 16559  0021FC  6EF6               	movwf	tblptrl,c
 16560  0021FE  0EFC               	movlw	high __npowers_
 16561  002200  2010               	addwfc	?i2___wmul+1,w,c
 16562  002202  6EF7               	movwf	tblptrh,c
 16563  002204                     	if	0	;There are less than 3 active tblptr bytes
 16564  002204                     	endif
 16565  002204  0009               	tblrd		*+
 16566  002206  CFF5 F01F          	movff	tablat,i2___ftmul@f2
 16567  00220A  0009               	tblrd		*+
 16568  00220C  CFF5 F020          	movff	tablat,i2___ftmul@f2+1
 16569  002210  000A               	tblrd		*-
 16570  002212  CFF5 F021          	movff	tablat,i2___ftmul@f2+2
 16571  002216  EC94  F01E         	call	i2___ftmul	;wreg free
 16572  00221A  D7A7               	goto	L8
 16573  00221C                     i2l4489:
 16574                           
 16575                           ;doprnt.c: 434: return _npowers_[scl];
 16576  00221C  5031               	movf	i2scale@scl,w,c
 16577  00221E  0D03               	mullw	3
 16578  002220  0E30               	movlw	low __npowers_
 16579  002222  24F3               	addwf	prodl,w,c
 16580  002224  6EF6               	movwf	tblptrl,c
 16581  002226  0EFC               	movlw	high __npowers_
 16582  002228  20F4               	addwfc	prodh,w,c
 16583  00222A  6EF7               	movwf	tblptrh,c
 16584  00222C                     	if	0	;There are less than 3 active tblptr bytes
 16585  00222C                     	endif
 16586  00222C  0009               	tblrd		*+
 16587  00222E  CFF5 F02B          	movff	tablat,?i2_scale
 16588  002232  0009               	tblrd		*+
 16589  002234  CFF5 F02C          	movff	tablat,?i2_scale+1
 16590  002238  000A               	tblrd		*-
 16591  00223A  CFF5 F02D          	movff	tablat,?i2_scale+2
 16592  00223E  0012               	return	
 16593  002240                     i2l4493:
 16594                           
 16595                           ;doprnt.c: 435: }
 16596                           ;doprnt.c: 436: if(scl>=110)
 16597  002240  5031               	movf	i2scale@scl,w,c
 16598  002242  0A80               	xorlw	128
 16599  002244  0F12               	addlw	-238
 16600  002246  A0D8               	btfss	status,0,c
 16601  002248  D091               	goto	i2l4501
 16602                           
 16603                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 16604  00224A  0E00               	movlw	0
 16605  00224C  6E12               	movwf	i2___wmul@multiplicand+1,c
 16606  00224E  0E03               	movlw	3
 16607  002250  6E11               	movwf	i2___wmul@multiplicand,c
 16608  002252  0E00               	movlw	0
 16609  002254  6E0A               	movwf	i2___awdiv@divisor+1,c
 16610  002256  0E0A               	movlw	10
 16611  002258  6E09               	movwf	i2___awdiv@divisor,c
 16612  00225A  0E00               	movlw	0
 16613  00225C  6E04               	movwf	i2___awmod@divisor+1,c
 16614  00225E  0E64               	movlw	100
 16615  002260  6E03               	movwf	i2___awmod@divisor,c
 16616  002262  5031               	movf	i2scale@scl,w,c
 16617  002264  6E01               	movwf	i2___awmod@dividend,c
 16618  002266  6A02               	clrf	i2___awmod@dividend+1,c
 16619  002268  BE01               	btfsc	i2___awmod@dividend,7,c
 16620  00226A  0602               	decf	i2___awmod@dividend+1,f,c
 16621  00226C  ECF9  F025         	call	i2___awmod	;wreg free
 16622  002270  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 16623  002274  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 16624  002278  ECC1  F024         	call	i2___awdiv	;wreg free
 16625  00227C  0E09               	movlw	9
 16626  00227E  2407               	addwf	?i2___awdiv,w,c
 16627  002280  6E0F               	movwf	i2___wmul@multiplier,c
 16628  002282  0E00               	movlw	0
 16629  002284  2008               	addwfc	?i2___awdiv+1,w,c
 16630  002286  6E10               	movwf	i2___wmul@multiplier+1,c
 16631  002288  ECDD  F028         	call	i2___wmul	;wreg free
 16632  00228C  0E09               	movlw	low __powers_
 16633  00228E  240F               	addwf	?i2___wmul,w,c
 16634  002290  6EF6               	movwf	tblptrl,c
 16635  002292  0EFC               	movlw	high __powers_
 16636  002294  2010               	addwfc	?i2___wmul+1,w,c
 16637  002296  6EF7               	movwf	tblptrh,c
 16638  002298                     	if	0	;There are less than 3 active tblptr bytes
 16639  002298                     	endif
 16640  002298  0009               	tblrd		*+
 16641  00229A  CFF5 F01F          	movff	tablat,i2___ftmul@f2
 16642  00229E  0009               	tblrd		*+
 16643  0022A0  CFF5 F020          	movff	tablat,i2___ftmul@f2+1
 16644  0022A4  000A               	tblrd		*-
 16645  0022A6  CFF5 F021          	movff	tablat,i2___ftmul@f2+2
 16646  0022AA  0E00               	movlw	0
 16647  0022AC  6E0A               	movwf	i2___awdiv@divisor+1,c
 16648  0022AE  0E64               	movlw	100
 16649  0022B0  6E09               	movwf	i2___awdiv@divisor,c
 16650  0022B2  5031               	movf	i2scale@scl,w,c
 16651  0022B4  6E07               	movwf	i2___awdiv@dividend,c
 16652  0022B6  6A08               	clrf	i2___awdiv@dividend+1,c
 16653  0022B8  BE07               	btfsc	i2___awdiv@dividend,7,c
 16654  0022BA  0608               	decf	i2___awdiv@dividend+1,f,c
 16655  0022BC  ECC1  F024         	call	i2___awdiv	;wreg free
 16656  0022C0  0E12               	movlw	18
 16657  0022C2  2407               	addwf	?i2___awdiv,w,c
 16658  0022C4  6E0F               	movwf	i2___wmul@multiplier,c
 16659  0022C6  0E00               	movlw	0
 16660  0022C8  2008               	addwfc	?i2___awdiv+1,w,c
 16661  0022CA  6E10               	movwf	i2___wmul@multiplier+1,c
 16662  0022CC  0E00               	movlw	0
 16663  0022CE  6E12               	movwf	i2___wmul@multiplicand+1,c
 16664  0022D0  0E03               	movlw	3
 16665  0022D2  6E11               	movwf	i2___wmul@multiplicand,c
 16666  0022D4  ECDD  F028         	call	i2___wmul	;wreg free
 16667  0022D8  0E09               	movlw	low __powers_
 16668  0022DA  240F               	addwf	?i2___wmul,w,c
 16669  0022DC  6EF6               	movwf	tblptrl,c
 16670  0022DE  0EFC               	movlw	high __powers_
 16671  0022E0  2010               	addwfc	?i2___wmul+1,w,c
 16672  0022E2  6EF7               	movwf	tblptrh,c
 16673  0022E4                     	if	0	;There are less than 3 active tblptr bytes
 16674  0022E4                     	endif
 16675  0022E4  0009               	tblrd		*+
 16676  0022E6  CFF5 F01C          	movff	tablat,i2___ftmul@f1
 16677  0022EA  0009               	tblrd		*+
 16678  0022EC  CFF5 F01D          	movff	tablat,i2___ftmul@f1+1
 16679  0022F0  000A               	tblrd		*-
 16680  0022F2  CFF5 F01E          	movff	tablat,i2___ftmul@f1+2
 16681  0022F6  EC94  F01E         	call	i2___ftmul	;wreg free
 16682  0022FA  C01C  F02E         	movff	?i2___ftmul,i2_scale$1661
 16683  0022FE  C01D  F02F         	movff	?i2___ftmul+1,i2_scale$1661+1
 16684  002302  C01E  F030         	movff	?i2___ftmul+2,i2_scale$1661+2
 16685                           
 16686                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 16687  002306  C02E  F01C         	movff	i2_scale$1661,i2___ftmul@f1
 16688  00230A  C02F  F01D         	movff	i2_scale$1661+1,i2___ftmul@f1+1
 16689  00230E  C030  F01E         	movff	i2_scale$1661+2,i2___ftmul@f1+2
 16690  002312  0E00               	movlw	0
 16691  002314  6E12               	movwf	i2___wmul@multiplicand+1,c
 16692  002316  0E03               	movlw	3
 16693  002318  6E11               	movwf	i2___wmul@multiplicand,c
 16694  00231A  0E00               	movlw	0
 16695  00231C  6E04               	movwf	i2___awmod@divisor+1,c
 16696  00231E  0E0A               	movlw	10
 16697  002320  6E03               	movwf	i2___awmod@divisor,c
 16698  002322  5031               	movf	i2scale@scl,w,c
 16699  002324  6E01               	movwf	i2___awmod@dividend,c
 16700  002326  6A02               	clrf	i2___awmod@dividend+1,c
 16701  002328  BE01               	btfsc	i2___awmod@dividend,7,c
 16702  00232A  0602               	decf	i2___awmod@dividend+1,f,c
 16703  00232C  ECF9  F025         	call	i2___awmod	;wreg free
 16704  002330  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 16705  002334  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 16706  002338  ECDD  F028         	call	i2___wmul	;wreg free
 16707  00233C  0E09               	movlw	low __powers_
 16708  00233E  240F               	addwf	?i2___wmul,w,c
 16709  002340  6EF6               	movwf	tblptrl,c
 16710  002342  0EFC               	movlw	high __powers_
 16711  002344  2010               	addwfc	?i2___wmul+1,w,c
 16712  002346  6EF7               	movwf	tblptrh,c
 16713  002348                     	if	0	;There are less than 3 active tblptr bytes
 16714  002348                     	endif
 16715  002348  0009               	tblrd		*+
 16716  00234A  CFF5 F01F          	movff	tablat,i2___ftmul@f2
 16717  00234E  0009               	tblrd		*+
 16718  002350  CFF5 F020          	movff	tablat,i2___ftmul@f2+1
 16719  002354  000A               	tblrd		*-
 16720  002356  CFF5 F021          	movff	tablat,i2___ftmul@f2+2
 16721  00235A  EC94  F01E         	call	i2___ftmul	;wreg free
 16722  00235E  C01C  F02B         	movff	?i2___ftmul,?i2_scale
 16723  002362  C01D  F02C         	movff	?i2___ftmul+1,?i2_scale+1
 16724  002366  C01E  F02D         	movff	?i2___ftmul+2,?i2_scale+2
 16725  00236A  0012               	return	
 16726  00236C                     i2l4501:
 16727                           
 16728                           ;doprnt.c: 438: else if(scl > 10)
 16729  00236C  5031               	movf	i2scale@scl,w,c
 16730  00236E  0A80               	xorlw	128
 16731  002370  0F75               	addlw	-139
 16732  002372  A0D8               	btfss	status,0,c
 16733  002374  D04D               	goto	i2l4507
 16734                           
 16735                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 16736  002376  0E00               	movlw	0
 16737  002378  6E0A               	movwf	i2___awdiv@divisor+1,c
 16738  00237A  0E0A               	movlw	10
 16739  00237C  6E09               	movwf	i2___awdiv@divisor,c
 16740  00237E  5031               	movf	i2scale@scl,w,c
 16741  002380  6E07               	movwf	i2___awdiv@dividend,c
 16742  002382  6A08               	clrf	i2___awdiv@dividend+1,c
 16743  002384  BE07               	btfsc	i2___awdiv@dividend,7,c
 16744  002386  0608               	decf	i2___awdiv@dividend+1,f,c
 16745  002388  ECC1  F024         	call	i2___awdiv	;wreg free
 16746  00238C  0E09               	movlw	9
 16747  00238E  2407               	addwf	?i2___awdiv,w,c
 16748  002390  6E0F               	movwf	i2___wmul@multiplier,c
 16749  002392  0E00               	movlw	0
 16750  002394  2008               	addwfc	?i2___awdiv+1,w,c
 16751  002396  6E10               	movwf	i2___wmul@multiplier+1,c
 16752  002398  0E00               	movlw	0
 16753  00239A  6E12               	movwf	i2___wmul@multiplicand+1,c
 16754  00239C  0E03               	movlw	3
 16755  00239E  6E11               	movwf	i2___wmul@multiplicand,c
 16756  0023A0  ECDD  F028         	call	i2___wmul	;wreg free
 16757  0023A4  0E09               	movlw	low __powers_
 16758  0023A6  240F               	addwf	?i2___wmul,w,c
 16759  0023A8  6EF6               	movwf	tblptrl,c
 16760  0023AA  0EFC               	movlw	high __powers_
 16761  0023AC  2010               	addwfc	?i2___wmul+1,w,c
 16762  0023AE  6EF7               	movwf	tblptrh,c
 16763  0023B0                     	if	0	;There are less than 3 active tblptr bytes
 16764  0023B0                     	endif
 16765  0023B0  0009               	tblrd		*+
 16766  0023B2  CFF5 F01C          	movff	tablat,i2___ftmul@f1
 16767  0023B6  0009               	tblrd		*+
 16768  0023B8  CFF5 F01D          	movff	tablat,i2___ftmul@f1+1
 16769  0023BC  000A               	tblrd		*-
 16770  0023BE  CFF5 F01E          	movff	tablat,i2___ftmul@f1+2
 16771  0023C2  0E00               	movlw	0
 16772  0023C4  6E12               	movwf	i2___wmul@multiplicand+1,c
 16773  0023C6  0E03               	movlw	3
 16774  0023C8  6E11               	movwf	i2___wmul@multiplicand,c
 16775  0023CA  0E00               	movlw	0
 16776  0023CC  6E04               	movwf	i2___awmod@divisor+1,c
 16777  0023CE  0E0A               	movlw	10
 16778  0023D0  6E03               	movwf	i2___awmod@divisor,c
 16779  0023D2  5031               	movf	i2scale@scl,w,c
 16780  0023D4  6E01               	movwf	i2___awmod@dividend,c
 16781  0023D6  6A02               	clrf	i2___awmod@dividend+1,c
 16782  0023D8  BE01               	btfsc	i2___awmod@dividend,7,c
 16783  0023DA  0602               	decf	i2___awmod@dividend+1,f,c
 16784  0023DC  ECF9  F025         	call	i2___awmod	;wreg free
 16785  0023E0  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 16786  0023E4  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 16787  0023E8  ECDD  F028         	call	i2___wmul	;wreg free
 16788  0023EC  0E09               	movlw	low __powers_
 16789  0023EE  240F               	addwf	?i2___wmul,w,c
 16790  0023F0  6EF6               	movwf	tblptrl,c
 16791  0023F2  0EFC               	movlw	high __powers_
 16792  0023F4  2010               	addwfc	?i2___wmul+1,w,c
 16793  0023F6  6EF7               	movwf	tblptrh,c
 16794  0023F8                     	if	0	;There are less than 3 active tblptr bytes
 16795  0023F8                     	endif
 16796  0023F8  0009               	tblrd		*+
 16797  0023FA  CFF5 F01F          	movff	tablat,i2___ftmul@f2
 16798  0023FE  0009               	tblrd		*+
 16799  002400  CFF5 F020          	movff	tablat,i2___ftmul@f2+1
 16800  002404  000A               	tblrd		*-
 16801  002406  CFF5 F021          	movff	tablat,i2___ftmul@f2+2
 16802  00240A  EC94  F01E         	call	i2___ftmul	;wreg free
 16803  00240E  D7A7               	goto	L9
 16804  002410                     i2l4507:
 16805                           
 16806                           ;doprnt.c: 440: return _powers_[scl];
 16807  002410  5031               	movf	i2scale@scl,w,c
 16808  002412  0D03               	mullw	3
 16809  002414  0E09               	movlw	low __powers_
 16810  002416  24F3               	addwf	prodl,w,c
 16811  002418  6EF6               	movwf	tblptrl,c
 16812  00241A  0EFC               	movlw	high __powers_
 16813  00241C  20F4               	addwfc	prodh,w,c
 16814  00241E  6EF7               	movwf	tblptrh,c
 16815  002420                     	if	0	;There are less than 3 active tblptr bytes
 16816  002420                     	endif
 16817  002420  0009               	tblrd		*+
 16818  002422  CFF5 F02B          	movff	tablat,?i2_scale
 16819  002426  0009               	tblrd		*+
 16820  002428  CFF5 F02C          	movff	tablat,?i2_scale+1
 16821  00242C  000A               	tblrd		*-
 16822  00242E  CFF5 F02D          	movff	tablat,?i2_scale+2
 16823  002432  0012               	return	
 16824  002434                     __end_ofi2_scale:
 16825                           	opt stack 0
 16826                           pclatu	equ	0xFFB
 16827                           pclath	equ	0xFFA
 16828                           tblptru	equ	0xFF8
 16829                           tblptrh	equ	0xFF7
 16830                           tblptrl	equ	0xFF6
 16831                           tablat	equ	0xFF5
 16832                           prodh	equ	0xFF4
 16833                           prodl	equ	0xFF3
 16834                           intcon	equ	0xFF2
 16835                           intcon3	equ	0xFF0
 16836                           postinc0	equ	0xFEE
 16837                           fsr0h	equ	0xFEA
 16838                           fsr0l	equ	0xFE9
 16839                           wreg	equ	0xFE8
 16840                           plusw1	equ	0xFE3
 16841                           fsr1h	equ	0xFE2
 16842                           fsr1l	equ	0xFE1
 16843                           indf2	equ	0xFDF
 16844                           postinc2	equ	0xFDE
 16845                           postdec2	equ	0xFDD
 16846                           plusw2	equ	0xFDB
 16847                           fsr2h	equ	0xFDA
 16848                           fsr2l	equ	0xFD9
 16849                           status	equ	0xFD8
 16850                           
 16851 ;; *************** function i2_putch *****************
 16852 ;; Defined at:
 16853 ;;		line 25 in file "lcd.c"
 16854 ;; Parameters:    Size  Location     Type
 16855 ;;  data            1    wreg     unsigned char 
 16856 ;; Auto vars:     Size  Location     Type
 16857 ;;  data            1    2[COMRAM] unsigned char 
 16858 ;; Return value:  Size  Location     Type
 16859 ;;                  1    wreg      void 
 16860 ;; Registers used:
 16861 ;;		wreg, status,2, status,0, cstack
 16862 ;; Tracked objects:
 16863 ;;		On entry : 0/0
 16864 ;;		On exit  : 0/0
 16865 ;;		Unchanged: 0/0
 16866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16868 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16870 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16871 ;;Total ram usage:        1 bytes
 16872 ;; Hardware stack levels used:    1
 16873 ;; Hardware stack levels required when called:    1
 16874 ;; This function calls:
 16875 ;;		i2_lcdNibble
 16876 ;; This function is called by:
 16877 ;;		i2_printf
 16878 ;; This function uses a non-reentrant model
 16879 ;;
 16880                           
 16881                           	psect	text62
 16882  00530C                     __ptext62:
 16883                           	opt stack 0
 16884  00530C                     i2_putch:
 16885                           	opt stack 21
 16886                           
 16887                           ;incstack = 0
 16888                           ;i2putch@data stored from wreg
 16889  00530C  6E03               	movwf	i2putch@data,c
 16890                           
 16891                           ;lcd.c: 26: LATDbits.LATD2 = 1;
 16892  00530E  848C               	bsf	3980,2,c	;volatile
 16893                           
 16894                           ;lcd.c: 27: lcdNibble(data);
 16895  005310  5003               	movf	i2putch@data,w,c
 16896  005312  ECF6  F026         	call	i2_lcdNibble
 16897  005316  0012               	return		;funcret
 16898  005318                     __end_ofi2_putch:
 16899                           	opt stack 0
 16900                           pclatu	equ	0xFFB
 16901                           pclath	equ	0xFFA
 16902                           tblptru	equ	0xFF8
 16903                           tblptrh	equ	0xFF7
 16904                           tblptrl	equ	0xFF6
 16905                           tablat	equ	0xFF5
 16906                           prodh	equ	0xFF4
 16907                           prodl	equ	0xFF3
 16908                           intcon	equ	0xFF2
 16909                           intcon3	equ	0xFF0
 16910                           postinc0	equ	0xFEE
 16911                           fsr0h	equ	0xFEA
 16912                           fsr0l	equ	0xFE9
 16913                           wreg	equ	0xFE8
 16914                           plusw1	equ	0xFE3
 16915                           fsr1h	equ	0xFE2
 16916                           fsr1l	equ	0xFE1
 16917                           indf2	equ	0xFDF
 16918                           postinc2	equ	0xFDE
 16919                           postdec2	equ	0xFDD
 16920                           plusw2	equ	0xFDB
 16921                           fsr2h	equ	0xFDA
 16922                           fsr2l	equ	0xFD9
 16923                           status	equ	0xFD8
 16924                           
 16925 ;; *************** function i2_isdigit *****************
 16926 ;; Defined at:
 16927 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
 16928 ;; Parameters:    Size  Location     Type
 16929 ;;  c               1    wreg     unsigned char 
 16930 ;; Auto vars:     Size  Location     Type
 16931 ;;  c               1    2[COMRAM] unsigned char 
 16932 ;; Return value:  Size  Location     Type
 16933 ;;		None               void
 16934 ;; Registers used:
 16935 ;;		wreg, status,2, status,0
 16936 ;; Tracked objects:
 16937 ;;		On entry : 0/0
 16938 ;;		On exit  : 0/0
 16939 ;;		Unchanged: 0/0
 16940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16942 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16943 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16944 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16945 ;;Total ram usage:        3 bytes
 16946 ;; Hardware stack levels used:    1
 16947 ;; This function calls:
 16948 ;;		Nothing
 16949 ;; This function is called by:
 16950 ;;		i2_printf
 16951 ;; This function uses a non-reentrant model
 16952 ;;
 16953                           
 16954                           	psect	text63
 16955  005226                     __ptext63:
 16956                           	opt stack 0
 16957  005226                     i2_isdigit:
 16958                           	opt stack 22
 16959                           
 16960                           ;incstack = 0
 16961                           ;i2isdigit@c stored from wreg
 16962  005226  6E03               	movwf	i2isdigit@c,c
 16963  005228  0E00               	movlw	0
 16964  00522A  6E02               	movwf	i2_isdigit$1086,c
 16965  00522C  0E3A               	movlw	58
 16966  00522E  6003               	cpfslt	i2isdigit@c,c
 16967  005230  D005               	goto	i2l4711
 16968  005232  0E2F               	movlw	47
 16969  005234  6403               	cpfsgt	i2isdigit@c,c
 16970  005236  D002               	goto	i2l4711
 16971  005238  0E01               	movlw	1
 16972  00523A  6E02               	movwf	i2_isdigit$1086,c
 16973  00523C                     i2l4711:
 16974  00523C  C002  F001         	movff	i2_isdigit$1086,??i2_isdigit
 16975  005240  3001               	rrcf	??i2_isdigit,w,c
 16976  005242  0012               	return	
 16977  005244                     __end_ofi2_isdigit:
 16978                           	opt stack 0
 16979                           pclatu	equ	0xFFB
 16980                           pclath	equ	0xFFA
 16981                           tblptru	equ	0xFF8
 16982                           tblptrh	equ	0xFF7
 16983                           tblptrl	equ	0xFF6
 16984                           tablat	equ	0xFF5
 16985                           prodh	equ	0xFF4
 16986                           prodl	equ	0xFF3
 16987                           intcon	equ	0xFF2
 16988                           intcon3	equ	0xFF0
 16989                           postinc0	equ	0xFEE
 16990                           fsr0h	equ	0xFEA
 16991                           fsr0l	equ	0xFE9
 16992                           wreg	equ	0xFE8
 16993                           plusw1	equ	0xFE3
 16994                           fsr1h	equ	0xFE2
 16995                           fsr1l	equ	0xFE1
 16996                           indf2	equ	0xFDF
 16997                           postinc2	equ	0xFDE
 16998                           postdec2	equ	0xFDD
 16999                           plusw2	equ	0xFDB
 17000                           fsr2h	equ	0xFDA
 17001                           fsr2l	equ	0xFD9
 17002                           status	equ	0xFD8
 17003                           
 17004 ;; *************** function i2_fround *****************
 17005 ;; Defined at:
 17006 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
 17007 ;; Parameters:    Size  Location     Type
 17008 ;;  prec            1    wreg     unsigned char 
 17009 ;; Auto vars:     Size  Location     Type
 17010 ;;  prec            1   51[COMRAM] unsigned char 
 17011 ;; Return value:  Size  Location     Type
 17012 ;;                  3   42[COMRAM] unsigned char 
 17013 ;; Registers used:
 17014 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17015 ;; Tracked objects:
 17016 ;;		On entry : 0/0
 17017 ;;		On exit  : 0/0
 17018 ;;		Unchanged: 0/0
 17019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17020 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17021 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17023 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17024 ;;Total ram usage:       10 bytes
 17025 ;; Hardware stack levels used:    1
 17026 ;; Hardware stack levels required when called:    2
 17027 ;; This function calls:
 17028 ;;		i2___awdiv
 17029 ;;		i2___awmod
 17030 ;;		i2___ftmul
 17031 ;;		i2___wmul
 17032 ;; This function is called by:
 17033 ;;		i2_printf
 17034 ;; This function uses a non-reentrant model
 17035 ;;
 17036                           
 17037                           	psect	text64
 17038  002948                     __ptext64:
 17039                           	opt stack 0
 17040  002948                     i2_fround:
 17041                           	opt stack 20
 17042                           
 17043                           ;incstack = 0
 17044                           ;i2fround@prec stored from wreg
 17045  002948  6E34               	movwf	i2fround@prec,c
 17046                           
 17047                           ;doprnt.c: 413: if(prec>=110)
 17048  00294A  0E6D               	movlw	109
 17049  00294C  6434               	cpfsgt	i2fround@prec,c
 17050  00294E  D09F               	goto	i2l4461
 17051                           
 17052                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 17053  002950  0E00               	movlw	0
 17054  002952  6E12               	movwf	i2___wmul@multiplicand+1,c
 17055  002954  0E03               	movlw	3
 17056  002956  6E11               	movwf	i2___wmul@multiplicand,c
 17057  002958  0E00               	movlw	0
 17058  00295A  6E0A               	movwf	i2___awdiv@divisor+1,c
 17059  00295C  0E0A               	movlw	10
 17060  00295E  6E09               	movwf	i2___awdiv@divisor,c
 17061  002960  0E00               	movlw	0
 17062  002962  6E04               	movwf	i2___awmod@divisor+1,c
 17063  002964  0E64               	movlw	100
 17064  002966  6E03               	movwf	i2___awmod@divisor,c
 17065  002968  C034  F001         	movff	i2fround@prec,i2___awmod@dividend
 17066  00296C  6A02               	clrf	i2___awmod@dividend+1,c
 17067  00296E  ECF9  F025         	call	i2___awmod	;wreg free
 17068  002972  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 17069  002976  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 17070  00297A  ECC1  F024         	call	i2___awdiv	;wreg free
 17071  00297E  0E09               	movlw	9
 17072  002980  2407               	addwf	?i2___awdiv,w,c
 17073  002982  6E0F               	movwf	i2___wmul@multiplier,c
 17074  002984  0E00               	movlw	0
 17075  002986  2008               	addwfc	?i2___awdiv+1,w,c
 17076  002988  6E10               	movwf	i2___wmul@multiplier+1,c
 17077  00298A  ECDD  F028         	call	i2___wmul	;wreg free
 17078  00298E  0E30               	movlw	low __npowers_
 17079  002990  240F               	addwf	?i2___wmul,w,c
 17080  002992  6EF6               	movwf	tblptrl,c
 17081  002994  0EFC               	movlw	high __npowers_
 17082  002996  2010               	addwfc	?i2___wmul+1,w,c
 17083  002998  6EF7               	movwf	tblptrh,c
 17084  00299A                     	if	0	;There are less than 3 active tblptr bytes
 17085  00299A                     	endif
 17086  00299A  0009               	tblrd		*+
 17087  00299C  CFF5 F01F          	movff	tablat,i2___ftmul@f2
 17088  0029A0  0009               	tblrd		*+
 17089  0029A2  CFF5 F020          	movff	tablat,i2___ftmul@f2+1
 17090  0029A6  000A               	tblrd		*-
 17091  0029A8  CFF5 F021          	movff	tablat,i2___ftmul@f2+2
 17092  0029AC  0E00               	movlw	0
 17093  0029AE  6E0A               	movwf	i2___awdiv@divisor+1,c
 17094  0029B0  0E64               	movlw	100
 17095  0029B2  6E09               	movwf	i2___awdiv@divisor,c
 17096  0029B4  C034  F007         	movff	i2fround@prec,i2___awdiv@dividend
 17097  0029B8  6A08               	clrf	i2___awdiv@dividend+1,c
 17098  0029BA  ECC1  F024         	call	i2___awdiv	;wreg free
 17099  0029BE  0E12               	movlw	18
 17100  0029C0  2407               	addwf	?i2___awdiv,w,c
 17101  0029C2  6E0F               	movwf	i2___wmul@multiplier,c
 17102  0029C4  0E00               	movlw	0
 17103  0029C6  2008               	addwfc	?i2___awdiv+1,w,c
 17104  0029C8  6E10               	movwf	i2___wmul@multiplier+1,c
 17105  0029CA  0E00               	movlw	0
 17106  0029CC  6E12               	movwf	i2___wmul@multiplicand+1,c
 17107  0029CE  0E03               	movlw	3
 17108  0029D0  6E11               	movwf	i2___wmul@multiplicand,c
 17109  0029D2  ECDD  F028         	call	i2___wmul	;wreg free
 17110  0029D6  0E30               	movlw	low __npowers_
 17111  0029D8  240F               	addwf	?i2___wmul,w,c
 17112  0029DA  6EF6               	movwf	tblptrl,c
 17113  0029DC  0EFC               	movlw	high __npowers_
 17114  0029DE  2010               	addwfc	?i2___wmul+1,w,c
 17115  0029E0  6EF7               	movwf	tblptrh,c
 17116  0029E2                     	if	0	;There are less than 3 active tblptr bytes
 17117  0029E2                     	endif
 17118  0029E2  0009               	tblrd		*+
 17119  0029E4  CFF5 F01C          	movff	tablat,i2___ftmul@f1
 17120  0029E8  0009               	tblrd		*+
 17121  0029EA  CFF5 F01D          	movff	tablat,i2___ftmul@f1+1
 17122  0029EE  000A               	tblrd		*-
 17123  0029F0  CFF5 F01E          	movff	tablat,i2___ftmul@f1+2
 17124  0029F4  EC94  F01E         	call	i2___ftmul	;wreg free
 17125  0029F8  C01C  F031         	movff	?i2___ftmul,i2_fround$1659
 17126  0029FC  C01D  F032         	movff	?i2___ftmul+1,i2_fround$1659+1
 17127  002A00  C01E  F033         	movff	?i2___ftmul+2,i2_fround$1659+2
 17128                           
 17129                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 17130  002A04  0E00               	movlw	0
 17131  002A06  6E12               	movwf	i2___wmul@multiplicand+1,c
 17132  002A08  0E03               	movlw	3
 17133  002A0A  6E11               	movwf	i2___wmul@multiplicand,c
 17134  002A0C  0E00               	movlw	0
 17135  002A0E  6E04               	movwf	i2___awmod@divisor+1,c
 17136  002A10  0E0A               	movlw	10
 17137  002A12  6E03               	movwf	i2___awmod@divisor,c
 17138  002A14  C034  F001         	movff	i2fround@prec,i2___awmod@dividend
 17139  002A18  6A02               	clrf	i2___awmod@dividend+1,c
 17140  002A1A  ECF9  F025         	call	i2___awmod	;wreg free
 17141  002A1E  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 17142  002A22  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 17143  002A26  ECDD  F028         	call	i2___wmul	;wreg free
 17144  002A2A  0E30               	movlw	low __npowers_
 17145  002A2C  240F               	addwf	?i2___wmul,w,c
 17146  002A2E  6EF6               	movwf	tblptrl,c
 17147  002A30  0EFC               	movlw	high __npowers_
 17148  002A32  2010               	addwfc	?i2___wmul+1,w,c
 17149  002A34  6EF7               	movwf	tblptrh,c
 17150  002A36                     	if	0	;There are less than 3 active tblptr bytes
 17151  002A36                     	endif
 17152  002A36  0009               	tblrd		*+
 17153  002A38  CFF5 F01F          	movff	tablat,i2___ftmul@f2
 17154  002A3C  0009               	tblrd		*+
 17155  002A3E  CFF5 F020          	movff	tablat,i2___ftmul@f2+1
 17156  002A42  000A               	tblrd		*-
 17157  002A44  CFF5 F021          	movff	tablat,i2___ftmul@f2+2
 17158  002A48  C031  F01C         	movff	i2_fround$1659,i2___ftmul@f1
 17159  002A4C  C032  F01D         	movff	i2_fround$1659+1,i2___ftmul@f1+1
 17160  002A50  C033  F01E         	movff	i2_fround$1659+2,i2___ftmul@f1+2
 17161  002A54  EC94  F01E         	call	i2___ftmul	;wreg free
 17162  002A58  C01C  F02E         	movff	?i2___ftmul,i2_fround$1660
 17163  002A5C  C01D  F02F         	movff	?i2___ftmul+1,i2_fround$1660+1
 17164  002A60  C01E  F030         	movff	?i2___ftmul+2,i2_fround$1660+2
 17165                           
 17166                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 17167  002A64  C02E  F01C         	movff	i2_fround$1660,i2___ftmul@f1
 17168  002A68  C02F  F01D         	movff	i2_fround$1660+1,i2___ftmul@f1+1
 17169  002A6C  C030  F01E         	movff	i2_fround$1660+2,i2___ftmul@f1+2
 17170  002A70  0E00               	movlw	0
 17171  002A72  6E1F               	movwf	i2___ftmul@f2,c
 17172  002A74  0E00               	movlw	0
 17173  002A76  6E20               	movwf	i2___ftmul@f2+1,c
 17174  002A78  0E3F               	movlw	63
 17175  002A7A  6E21               	movwf	i2___ftmul@f2+2,c
 17176  002A7C  EC94  F01E         	call	i2___ftmul	;wreg free
 17177  002A80  C01C  F02B         	movff	?i2___ftmul,?i2_fround
 17178  002A84  C01D  F02C         	movff	?i2___ftmul+1,?i2_fround+1
 17179  002A88  C01E  F02D         	movff	?i2___ftmul+2,?i2_fround+2
 17180  002A8C  0012               	return	
 17181  002A8E                     i2l4461:
 17182                           
 17183                           ;doprnt.c: 415: else if(prec > 10)
 17184  002A8E  0E0A               	movlw	10
 17185  002A90  6434               	cpfsgt	i2fround@prec,c
 17186  002A92  D05D               	goto	i2l4469
 17187                           
 17188                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 17189  002A94  0E00               	movlw	0
 17190  002A96  6E12               	movwf	i2___wmul@multiplicand+1,c
 17191  002A98  0E03               	movlw	3
 17192  002A9A  6E11               	movwf	i2___wmul@multiplicand,c
 17193  002A9C  0E00               	movlw	0
 17194  002A9E  6E04               	movwf	i2___awmod@divisor+1,c
 17195  002AA0  0E0A               	movlw	10
 17196  002AA2  6E03               	movwf	i2___awmod@divisor,c
 17197  002AA4  C034  F001         	movff	i2fround@prec,i2___awmod@dividend
 17198  002AA8  6A02               	clrf	i2___awmod@dividend+1,c
 17199  002AAA  ECF9  F025         	call	i2___awmod	;wreg free
 17200  002AAE  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 17201  002AB2  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 17202  002AB6  ECDD  F028         	call	i2___wmul	;wreg free
 17203  002ABA  0E30               	movlw	low __npowers_
 17204  002ABC  240F               	addwf	?i2___wmul,w,c
 17205  002ABE  6EF6               	movwf	tblptrl,c
 17206  002AC0  0EFC               	movlw	high __npowers_
 17207  002AC2  2010               	addwfc	?i2___wmul+1,w,c
 17208  002AC4  6EF7               	movwf	tblptrh,c
 17209  002AC6                     	if	0	;There are less than 3 active tblptr bytes
 17210  002AC6                     	endif
 17211  002AC6  0009               	tblrd		*+
 17212  002AC8  CFF5 F01F          	movff	tablat,i2___ftmul@f2
 17213  002ACC  0009               	tblrd		*+
 17214  002ACE  CFF5 F020          	movff	tablat,i2___ftmul@f2+1
 17215  002AD2  000A               	tblrd		*-
 17216  002AD4  CFF5 F021          	movff	tablat,i2___ftmul@f2+2
 17217  002AD8  0E00               	movlw	0
 17218  002ADA  6E0A               	movwf	i2___awdiv@divisor+1,c
 17219  002ADC  0E0A               	movlw	10
 17220  002ADE  6E09               	movwf	i2___awdiv@divisor,c
 17221  002AE0  C034  F007         	movff	i2fround@prec,i2___awdiv@dividend
 17222  002AE4  6A08               	clrf	i2___awdiv@dividend+1,c
 17223  002AE6  ECC1  F024         	call	i2___awdiv	;wreg free
 17224  002AEA  0E09               	movlw	9
 17225  002AEC  2407               	addwf	?i2___awdiv,w,c
 17226  002AEE  6E0F               	movwf	i2___wmul@multiplier,c
 17227  002AF0  0E00               	movlw	0
 17228  002AF2  2008               	addwfc	?i2___awdiv+1,w,c
 17229  002AF4  6E10               	movwf	i2___wmul@multiplier+1,c
 17230  002AF6  0E00               	movlw	0
 17231  002AF8  6E12               	movwf	i2___wmul@multiplicand+1,c
 17232  002AFA  0E03               	movlw	3
 17233  002AFC  6E11               	movwf	i2___wmul@multiplicand,c
 17234  002AFE  ECDD  F028         	call	i2___wmul	;wreg free
 17235  002B02  0E30               	movlw	low __npowers_
 17236  002B04  240F               	addwf	?i2___wmul,w,c
 17237  002B06  6EF6               	movwf	tblptrl,c
 17238  002B08  0EFC               	movlw	high __npowers_
 17239  002B0A  2010               	addwfc	?i2___wmul+1,w,c
 17240  002B0C  6EF7               	movwf	tblptrh,c
 17241  002B0E                     	if	0	;There are less than 3 active tblptr bytes
 17242  002B0E                     	endif
 17243  002B0E  0009               	tblrd		*+
 17244  002B10  CFF5 F01C          	movff	tablat,i2___ftmul@f1
 17245  002B14  0009               	tblrd		*+
 17246  002B16  CFF5 F01D          	movff	tablat,i2___ftmul@f1+1
 17247  002B1A  000A               	tblrd		*-
 17248  002B1C  CFF5 F01E          	movff	tablat,i2___ftmul@f1+2
 17249  002B20  EC94  F01E         	call	i2___ftmul	;wreg free
 17250  002B24  C01C  F031         	movff	?i2___ftmul,i2_fround$1659
 17251  002B28  C01D  F032         	movff	?i2___ftmul+1,i2_fround$1659+1
 17252  002B2C  C01E  F033         	movff	?i2___ftmul+2,i2_fround$1659+2
 17253                           
 17254                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 17255  002B30  C031  F01C         	movff	i2_fround$1659,i2___ftmul@f1
 17256  002B34  C032  F01D         	movff	i2_fround$1659+1,i2___ftmul@f1+1
 17257  002B38  C033  F01E         	movff	i2_fround$1659+2,i2___ftmul@f1+2
 17258  002B3C  0E00               	movlw	0
 17259  002B3E  6E1F               	movwf	i2___ftmul@f2,c
 17260  002B40  0E00               	movlw	0
 17261  002B42  6E20               	movwf	i2___ftmul@f2+1,c
 17262  002B44  0E3F               	movlw	63
 17263  002B46  6E21               	movwf	i2___ftmul@f2+2,c
 17264  002B48  EC94  F01E         	call	i2___ftmul	;wreg free
 17265  002B4C  D799               	goto	L10
 17266  002B4E                     i2l4469:
 17267                           
 17268                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 17269  002B4E  5034               	movf	i2fround@prec,w,c
 17270  002B50  0D03               	mullw	3
 17271  002B52  0E30               	movlw	low __npowers_
 17272  002B54  24F3               	addwf	prodl,w,c
 17273  002B56  6EF6               	movwf	tblptrl,c
 17274  002B58  0EFC               	movlw	high __npowers_
 17275  002B5A  20F4               	addwfc	prodh,w,c
 17276  002B5C  6EF7               	movwf	tblptrh,c
 17277  002B5E                     	if	0	;There are less than 3 active tblptr bytes
 17278  002B5E                     	endif
 17279  002B5E  0009               	tblrd		*+
 17280  002B60  CFF5 F01C          	movff	tablat,i2___ftmul@f1
 17281  002B64  0009               	tblrd		*+
 17282  002B66  CFF5 F01D          	movff	tablat,i2___ftmul@f1+1
 17283  002B6A  000A               	tblrd		*-
 17284  002B6C  CFF5 F01E          	movff	tablat,i2___ftmul@f1+2
 17285  002B70  0E00               	movlw	0
 17286  002B72  6E1F               	movwf	i2___ftmul@f2,c
 17287  002B74  0E00               	movlw	0
 17288  002B76  6E20               	movwf	i2___ftmul@f2+1,c
 17289  002B78  0E3F               	movlw	63
 17290  002B7A  6E21               	movwf	i2___ftmul@f2+2,c
 17291  002B7C  EC94  F01E         	call	i2___ftmul	;wreg free
 17292  002B80  C01C  F02B         	movff	?i2___ftmul,?i2_fround
 17293  002B84  C01D  F02C         	movff	?i2___ftmul+1,?i2_fround+1
 17294  002B88  C01E  F02D         	movff	?i2___ftmul+2,?i2_fround+2
 17295  002B8C  0012               	return	
 17296  002B8E                     __end_ofi2_fround:
 17297                           	opt stack 0
 17298                           pclatu	equ	0xFFB
 17299                           pclath	equ	0xFFA
 17300                           tblptru	equ	0xFF8
 17301                           tblptrh	equ	0xFF7
 17302                           tblptrl	equ	0xFF6
 17303                           tablat	equ	0xFF5
 17304                           prodh	equ	0xFF4
 17305                           prodl	equ	0xFF3
 17306                           intcon	equ	0xFF2
 17307                           intcon3	equ	0xFF0
 17308                           postinc0	equ	0xFEE
 17309                           fsr0h	equ	0xFEA
 17310                           fsr0l	equ	0xFE9
 17311                           wreg	equ	0xFE8
 17312                           plusw1	equ	0xFE3
 17313                           fsr1h	equ	0xFE2
 17314                           fsr1l	equ	0xFE1
 17315                           indf2	equ	0xFDF
 17316                           postinc2	equ	0xFDE
 17317                           postdec2	equ	0xFDD
 17318                           plusw2	equ	0xFDB
 17319                           fsr2h	equ	0xFDA
 17320                           fsr2l	equ	0xFD9
 17321                           status	equ	0xFD8
 17322                           
 17323 ;; *************** function i2___wmul *****************
 17324 ;; Defined at:
 17325 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
 17326 ;; Parameters:    Size  Location     Type
 17327 ;;  multiplier      2   14[COMRAM] unsigned int 
 17328 ;;  multiplicand    2   16[COMRAM] unsigned int 
 17329 ;; Auto vars:     Size  Location     Type
 17330 ;;  __wmul          2   18[COMRAM] unsigned int 
 17331 ;; Return value:  Size  Location     Type
 17332 ;;                  2   14[COMRAM] unsigned int 
 17333 ;; Registers used:
 17334 ;;		wreg, status,2, status,0, prodl, prodh
 17335 ;; Tracked objects:
 17336 ;;		On entry : 0/0
 17337 ;;		On exit  : 0/0
 17338 ;;		Unchanged: 0/0
 17339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17340 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17341 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17343 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17344 ;;Total ram usage:        6 bytes
 17345 ;; Hardware stack levels used:    1
 17346 ;; This function calls:
 17347 ;;		Nothing
 17348 ;; This function is called by:
 17349 ;;		_simulate
 17350 ;;		_HexDecToDec2
 17351 ;;		_WriteRun
 17352 ;;		i2_fround
 17353 ;;		i2_scale
 17354 ;;		i2_printf
 17355 ;; This function uses a non-reentrant model
 17356 ;;
 17357                           
 17358                           	psect	text65
 17359  0051BA                     __ptext65:
 17360                           	opt stack 0
 17361  0051BA                     i2___wmul:
 17362                           	opt stack 21
 17363                           
 17364                           ;incstack = 0
 17365  0051BA  500F               	movf	i2___wmul@multiplier,w,c
 17366  0051BC  0211               	mulwf	i2___wmul@multiplicand,c
 17367  0051BE  CFF3 F013          	movff	prodl,i2___wmul@product
 17368  0051C2  CFF4 F014          	movff	prodh,i2___wmul@product+1
 17369  0051C6  500F               	movf	i2___wmul@multiplier,w,c
 17370  0051C8  0212               	mulwf	i2___wmul@multiplicand+1,c
 17371  0051CA  50F3               	movf	prodl,w,c
 17372  0051CC  2614               	addwf	i2___wmul@product+1,f,c
 17373  0051CE  5010               	movf	i2___wmul@multiplier+1,w,c
 17374  0051D0  0211               	mulwf	i2___wmul@multiplicand,c
 17375  0051D2  50F3               	movf	prodl,w,c
 17376  0051D4  2614               	addwf	i2___wmul@product+1,f,c
 17377  0051D6  C013  F00F         	movff	i2___wmul@product,?i2___wmul
 17378  0051DA  C014  F010         	movff	i2___wmul@product+1,?i2___wmul+1
 17379  0051DE  0012               	return	
 17380  0051E0                     __end_ofi2___wmul:
 17381                           	opt stack 0
 17382                           pclatu	equ	0xFFB
 17383                           pclath	equ	0xFFA
 17384                           tblptru	equ	0xFF8
 17385                           tblptrh	equ	0xFF7
 17386                           tblptrl	equ	0xFF6
 17387                           tablat	equ	0xFF5
 17388                           prodh	equ	0xFF4
 17389                           prodl	equ	0xFF3
 17390                           intcon	equ	0xFF2
 17391                           intcon3	equ	0xFF0
 17392                           postinc0	equ	0xFEE
 17393                           fsr0h	equ	0xFEA
 17394                           fsr0l	equ	0xFE9
 17395                           wreg	equ	0xFE8
 17396                           plusw1	equ	0xFE3
 17397                           fsr1h	equ	0xFE2
 17398                           fsr1l	equ	0xFE1
 17399                           indf2	equ	0xFDF
 17400                           postinc2	equ	0xFDE
 17401                           postdec2	equ	0xFDD
 17402                           plusw2	equ	0xFDB
 17403                           fsr2h	equ	0xFDA
 17404                           fsr2l	equ	0xFD9
 17405                           status	equ	0xFD8
 17406                           
 17407 ;; *************** function i2___ftmul *****************
 17408 ;; Defined at:
 17409 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
 17410 ;; Parameters:    Size  Location     Type
 17411 ;;  f1              3   27[COMRAM] float 
 17412 ;;  f2              3   30[COMRAM] float 
 17413 ;; Auto vars:     Size  Location     Type
 17414 ;;  __ftmul         3   37[COMRAM] unsigned um
 17415 ;;  __ftmul         1   41[COMRAM] unsigned char 
 17416 ;;  __ftmul         1   40[COMRAM] unsigned char 
 17417 ;;  __ftmul         1   36[COMRAM] unsigned char 
 17418 ;; Return value:  Size  Location     Type
 17419 ;;                  3   27[COMRAM] float 
 17420 ;; Registers used:
 17421 ;;		wreg, status,2, status,0, cstack
 17422 ;; Tracked objects:
 17423 ;;		On entry : 0/0
 17424 ;;		On exit  : 0/0
 17425 ;;		Unchanged: 0/0
 17426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17427 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17428 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17429 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17430 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17431 ;;Total ram usage:       15 bytes
 17432 ;; Hardware stack levels used:    1
 17433 ;; Hardware stack levels required when called:    1
 17434 ;; This function calls:
 17435 ;;		i2___ftpack
 17436 ;; This function is called by:
 17437 ;;		_checkV
 17438 ;;		i2_fround
 17439 ;;		i2_scale
 17440 ;;		i2_printf
 17441 ;; This function uses a non-reentrant model
 17442 ;;
 17443                           
 17444                           	psect	text66
 17445  003D28                     __ptext66:
 17446                           	opt stack 0
 17447  003D28                     i2___ftmul:
 17448                           	opt stack 20
 17449                           
 17450                           ;incstack = 0
 17451  003D28  C01E  F022         	movff	i2___ftmul@f1+2,??i2___ftmul
 17452  003D2C  6A23               	clrf	(??i2___ftmul+1)& (0+255),c
 17453  003D2E  6A24               	clrf	(??i2___ftmul+2)& (0+255),c
 17454  003D30  341D               	rlcf	i2___ftmul@f1+1,w,c
 17455  003D32  3622               	rlcf	??i2___ftmul& (0+255),f,c
 17456  003D34  E301               	bnc	u397_41
 17457  003D36  8023               	bsf	(??i2___ftmul+1)& (0+255),0,c
 17458  003D38                     u397_41:
 17459  003D38  5022               	movf	??i2___ftmul,w,c
 17460  003D3A  6E25               	movwf	i2___ftmul@exp,c
 17461  003D3C  5025               	movf	i2___ftmul@exp,w,c
 17462  003D3E  A4D8               	btfss	status,2,c
 17463  003D40  D007               	goto	i2l4365
 17464  003D42  0E00               	movlw	0
 17465  003D44  6E1C               	movwf	?i2___ftmul,c
 17466  003D46  0E00               	movlw	0
 17467  003D48  6E1D               	movwf	?i2___ftmul+1,c
 17468  003D4A  0E00               	movlw	0
 17469  003D4C  6E1E               	movwf	?i2___ftmul+2,c
 17470  003D4E  0012               	return	
 17471  003D50                     i2l4365:
 17472  003D50  C021  F022         	movff	i2___ftmul@f2+2,??i2___ftmul
 17473  003D54  6A23               	clrf	(??i2___ftmul+1)& (0+255),c
 17474  003D56  6A24               	clrf	(??i2___ftmul+2)& (0+255),c
 17475  003D58  3420               	rlcf	i2___ftmul@f2+1,w,c
 17476  003D5A  3622               	rlcf	??i2___ftmul& (0+255),f,c
 17477  003D5C  E301               	bnc	u399_41
 17478  003D5E  8023               	bsf	(??i2___ftmul+1)& (0+255),0,c
 17479  003D60                     u399_41:
 17480  003D60  5022               	movf	??i2___ftmul,w,c
 17481  003D62  6E2A               	movwf	i2___ftmul@sign,c
 17482  003D64  502A               	movf	i2___ftmul@sign,w,c
 17483  003D66  A4D8               	btfss	status,2,c
 17484  003D68  D007               	goto	i2l4371
 17485  003D6A  0E00               	movlw	0
 17486  003D6C  6E1C               	movwf	?i2___ftmul,c
 17487  003D6E  0E00               	movlw	0
 17488  003D70  6E1D               	movwf	?i2___ftmul+1,c
 17489  003D72  0E00               	movlw	0
 17490  003D74  6E1E               	movwf	?i2___ftmul+2,c
 17491  003D76  0012               	return	
 17492  003D78                     i2l4371:
 17493  003D78  502A               	movf	i2___ftmul@sign,w,c
 17494  003D7A  0F7B               	addlw	123
 17495  003D7C  2625               	addwf	i2___ftmul@exp,f,c
 17496  003D7E  C01E  F02A         	movff	i2___ftmul@f1+2,i2___ftmul@sign
 17497  003D82  5021               	movf	i2___ftmul@f2+2,w,c
 17498  003D84  1A2A               	xorwf	i2___ftmul@sign,f,c
 17499  003D86  0E80               	movlw	128
 17500  003D88  162A               	andwf	i2___ftmul@sign,f,c
 17501  003D8A  8E1D               	bsf	i2___ftmul@f1+1,7,c
 17502  003D8C  8E20               	bsf	i2___ftmul@f2+1,7,c
 17503  003D8E  0EFF               	movlw	255
 17504  003D90  161F               	andwf	i2___ftmul@f2,f,c
 17505  003D92  0EFF               	movlw	255
 17506  003D94  1620               	andwf	i2___ftmul@f2+1,f,c
 17507  003D96  0E00               	movlw	0
 17508  003D98  1621               	andwf	i2___ftmul@f2+2,f,c
 17509  003D9A  0E00               	movlw	0
 17510  003D9C  6E26               	movwf	i2___ftmul@f3_as_product,c
 17511  003D9E  0E00               	movlw	0
 17512  003DA0  6E27               	movwf	i2___ftmul@f3_as_product+1,c
 17513  003DA2  0E00               	movlw	0
 17514  003DA4  6E28               	movwf	i2___ftmul@f3_as_product+2,c
 17515  003DA6  0E07               	movlw	7
 17516  003DA8  6E29               	movwf	i2___ftmul@cntr,c
 17517  003DAA                     i2l4385:
 17518  003DAA  A01C               	btfss	i2___ftmul@f1,0,c
 17519  003DAC  D006               	goto	i2l4389
 17520  003DAE  501F               	movf	i2___ftmul@f2,w,c
 17521  003DB0  2626               	addwf	i2___ftmul@f3_as_product,f,c
 17522  003DB2  5020               	movf	i2___ftmul@f2+1,w,c
 17523  003DB4  2227               	addwfc	i2___ftmul@f3_as_product+1,f,c
 17524  003DB6  5021               	movf	i2___ftmul@f2+2,w,c
 17525  003DB8  2228               	addwfc	i2___ftmul@f3_as_product+2,f,c
 17526  003DBA                     i2l4389:
 17527  003DBA  90D8               	bcf	status,0,c
 17528  003DBC  321E               	rrcf	i2___ftmul@f1+2,f,c
 17529  003DBE  321D               	rrcf	i2___ftmul@f1+1,f,c
 17530  003DC0  321C               	rrcf	i2___ftmul@f1,f,c
 17531  003DC2  90D8               	bcf	status,0,c
 17532  003DC4  361F               	rlcf	i2___ftmul@f2,f,c
 17533  003DC6  3620               	rlcf	i2___ftmul@f2+1,f,c
 17534  003DC8  3621               	rlcf	i2___ftmul@f2+2,f,c
 17535  003DCA  2E29               	decfsz	i2___ftmul@cntr,f,c
 17536  003DCC  D7EE               	goto	i2l4385
 17537  003DCE  0E09               	movlw	9
 17538  003DD0  6E29               	movwf	i2___ftmul@cntr,c
 17539  003DD2                     i2l4395:
 17540  003DD2  A01C               	btfss	i2___ftmul@f1,0,c
 17541  003DD4  D006               	goto	i2l4399
 17542  003DD6  501F               	movf	i2___ftmul@f2,w,c
 17543  003DD8  2626               	addwf	i2___ftmul@f3_as_product,f,c
 17544  003DDA  5020               	movf	i2___ftmul@f2+1,w,c
 17545  003DDC  2227               	addwfc	i2___ftmul@f3_as_product+1,f,c
 17546  003DDE  5021               	movf	i2___ftmul@f2+2,w,c
 17547  003DE0  2228               	addwfc	i2___ftmul@f3_as_product+2,f,c
 17548  003DE2                     i2l4399:
 17549  003DE2  90D8               	bcf	status,0,c
 17550  003DE4  321E               	rrcf	i2___ftmul@f1+2,f,c
 17551  003DE6  321D               	rrcf	i2___ftmul@f1+1,f,c
 17552  003DE8  321C               	rrcf	i2___ftmul@f1,f,c
 17553  003DEA  90D8               	bcf	status,0,c
 17554  003DEC  3228               	rrcf	i2___ftmul@f3_as_product+2,f,c
 17555  003DEE  3227               	rrcf	i2___ftmul@f3_as_product+1,f,c
 17556  003DF0  3226               	rrcf	i2___ftmul@f3_as_product,f,c
 17557  003DF2  2E29               	decfsz	i2___ftmul@cntr,f,c
 17558  003DF4  D7EE               	goto	i2l4395
 17559  003DF6  C026  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
 17560  003DFA  C027  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
 17561  003DFE  C028  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
 17562  003E02  C025  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
 17563  003E06  C02A  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
 17564  003E0A  ECB9  F022         	call	i2___ftpack	;wreg free
 17565  003E0E  C001  F01C         	movff	?i2___ftpack,?i2___ftmul
 17566  003E12  C002  F01D         	movff	?i2___ftpack+1,?i2___ftmul+1
 17567  003E16  C003  F01E         	movff	?i2___ftpack+2,?i2___ftmul+2
 17568  003E1A  0012               	return	
 17569  003E1C                     __end_ofi2___ftmul:
 17570                           	opt stack 0
 17571                           pclatu	equ	0xFFB
 17572                           pclath	equ	0xFFA
 17573                           tblptru	equ	0xFF8
 17574                           tblptrh	equ	0xFF7
 17575                           tblptrl	equ	0xFF6
 17576                           tablat	equ	0xFF5
 17577                           prodh	equ	0xFF4
 17578                           prodl	equ	0xFF3
 17579                           intcon	equ	0xFF2
 17580                           intcon3	equ	0xFF0
 17581                           postinc0	equ	0xFEE
 17582                           fsr0h	equ	0xFEA
 17583                           fsr0l	equ	0xFE9
 17584                           wreg	equ	0xFE8
 17585                           plusw1	equ	0xFE3
 17586                           fsr1h	equ	0xFE2
 17587                           fsr1l	equ	0xFE1
 17588                           indf2	equ	0xFDF
 17589                           postinc2	equ	0xFDE
 17590                           postdec2	equ	0xFDD
 17591                           plusw2	equ	0xFDB
 17592                           fsr2h	equ	0xFDA
 17593                           fsr2l	equ	0xFD9
 17594                           status	equ	0xFD8
 17595                           
 17596 ;; *************** function i2___awmod *****************
 17597 ;; Defined at:
 17598 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
 17599 ;; Parameters:    Size  Location     Type
 17600 ;;  dividend        2    0[COMRAM] int 
 17601 ;;  divisor         2    2[COMRAM] int 
 17602 ;; Auto vars:     Size  Location     Type
 17603 ;;  __awmod         1    5[COMRAM] unsigned char 
 17604 ;;  __awmod         1    4[COMRAM] unsigned char 
 17605 ;; Return value:  Size  Location     Type
 17606 ;;                  2    0[COMRAM] int 
 17607 ;; Registers used:
 17608 ;;		wreg, status,2, status,0
 17609 ;; Tracked objects:
 17610 ;;		On entry : 0/0
 17611 ;;		On exit  : 0/0
 17612 ;;		Unchanged: 0/0
 17613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17614 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17615 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17617 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17618 ;;Total ram usage:        6 bytes
 17619 ;; Hardware stack levels used:    1
 17620 ;; This function calls:
 17621 ;;		Nothing
 17622 ;; This function is called by:
 17623 ;;		i2_fround
 17624 ;;		i2_scale
 17625 ;; This function uses a non-reentrant model
 17626 ;;
 17627                           
 17628                           	psect	text67
 17629  004BF2                     __ptext67:
 17630                           	opt stack 0
 17631  004BF2                     i2___awmod:
 17632                           	opt stack 21
 17633                           
 17634                           ;incstack = 0
 17635  004BF2  0E00               	movlw	0
 17636  004BF4  6E06               	movwf	i2___awmod@sign,c
 17637  004BF6  AE02               	btfss	i2___awmod@dividend+1,7,c
 17638  004BF8  D006               	goto	i2l4261
 17639  004BFA  6C01               	negf	i2___awmod@dividend,c
 17640  004BFC  1E02               	comf	i2___awmod@dividend+1,f,c
 17641  004BFE  B0D8               	btfsc	status,0,c
 17642  004C00  2A02               	incf	i2___awmod@dividend+1,f,c
 17643  004C02  0E01               	movlw	1
 17644  004C04  6E06               	movwf	i2___awmod@sign,c
 17645  004C06                     i2l4261:
 17646  004C06  AE04               	btfss	i2___awmod@divisor+1,7,c
 17647  004C08  D004               	goto	i2l4265
 17648  004C0A  6C03               	negf	i2___awmod@divisor,c
 17649  004C0C  1E04               	comf	i2___awmod@divisor+1,f,c
 17650  004C0E  B0D8               	btfsc	status,0,c
 17651  004C10  2A04               	incf	i2___awmod@divisor+1,f,c
 17652  004C12                     i2l4265:
 17653  004C12  5003               	movf	i2___awmod@divisor,w,c
 17654  004C14  1004               	iorwf	i2___awmod@divisor+1,w,c
 17655  004C16  B4D8               	btfsc	status,2,c
 17656  004C18  D018               	goto	i2l4281
 17657  004C1A  0E01               	movlw	1
 17658  004C1C  6E05               	movwf	i2___awmod@counter,c
 17659  004C1E  D004               	goto	i2l4271
 17660  004C20                     i2l4269:
 17661  004C20  90D8               	bcf	status,0,c
 17662  004C22  3603               	rlcf	i2___awmod@divisor,f,c
 17663  004C24  3604               	rlcf	i2___awmod@divisor+1,f,c
 17664  004C26  2A05               	incf	i2___awmod@counter,f,c
 17665  004C28                     i2l4271:
 17666  004C28  AE04               	btfss	i2___awmod@divisor+1,7,c
 17667  004C2A  D7FA               	goto	i2l4269
 17668  004C2C                     i2l4273:
 17669  004C2C  5003               	movf	i2___awmod@divisor,w,c
 17670  004C2E  5C01               	subwf	i2___awmod@dividend,w,c
 17671  004C30  5004               	movf	i2___awmod@divisor+1,w,c
 17672  004C32  5802               	subwfb	i2___awmod@dividend+1,w,c
 17673  004C34  A0D8               	btfss	status,0,c
 17674  004C36  D004               	goto	i2l4277
 17675  004C38  5003               	movf	i2___awmod@divisor,w,c
 17676  004C3A  5E01               	subwf	i2___awmod@dividend,f,c
 17677  004C3C  5004               	movf	i2___awmod@divisor+1,w,c
 17678  004C3E  5A02               	subwfb	i2___awmod@dividend+1,f,c
 17679  004C40                     i2l4277:
 17680  004C40  90D8               	bcf	status,0,c
 17681  004C42  3204               	rrcf	i2___awmod@divisor+1,f,c
 17682  004C44  3203               	rrcf	i2___awmod@divisor,f,c
 17683  004C46  2E05               	decfsz	i2___awmod@counter,f,c
 17684  004C48  D7F1               	goto	i2l4273
 17685  004C4A                     i2l4281:
 17686  004C4A  5006               	movf	i2___awmod@sign,w,c
 17687  004C4C  B4D8               	btfsc	status,2,c
 17688  004C4E  D004               	goto	i2l4285
 17689  004C50  6C01               	negf	i2___awmod@dividend,c
 17690  004C52  1E02               	comf	i2___awmod@dividend+1,f,c
 17691  004C54  B0D8               	btfsc	status,0,c
 17692  004C56  2A02               	incf	i2___awmod@dividend+1,f,c
 17693  004C58                     i2l4285:
 17694  004C58  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 17695  004C5C  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 17696  004C60  0012               	return	
 17697  004C62                     __end_ofi2___awmod:
 17698                           	opt stack 0
 17699                           pclatu	equ	0xFFB
 17700                           pclath	equ	0xFFA
 17701                           tblptru	equ	0xFF8
 17702                           tblptrh	equ	0xFF7
 17703                           tblptrl	equ	0xFF6
 17704                           tablat	equ	0xFF5
 17705                           prodh	equ	0xFF4
 17706                           prodl	equ	0xFF3
 17707                           intcon	equ	0xFF2
 17708                           intcon3	equ	0xFF0
 17709                           postinc0	equ	0xFEE
 17710                           fsr0h	equ	0xFEA
 17711                           fsr0l	equ	0xFE9
 17712                           wreg	equ	0xFE8
 17713                           plusw1	equ	0xFE3
 17714                           fsr1h	equ	0xFE2
 17715                           fsr1l	equ	0xFE1
 17716                           indf2	equ	0xFDF
 17717                           postinc2	equ	0xFDE
 17718                           postdec2	equ	0xFDD
 17719                           plusw2	equ	0xFDB
 17720                           fsr2h	equ	0xFDA
 17721                           fsr2l	equ	0xFD9
 17722                           status	equ	0xFD8
 17723                           
 17724 ;; *************** function i2___awdiv *****************
 17725 ;; Defined at:
 17726 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
 17727 ;; Parameters:    Size  Location     Type
 17728 ;;  dividend        2    6[COMRAM] int 
 17729 ;;  divisor         2    8[COMRAM] int 
 17730 ;; Auto vars:     Size  Location     Type
 17731 ;;  __awdiv         2   12[COMRAM] int 
 17732 ;;  __awdiv         1   11[COMRAM] unsigned char 
 17733 ;;  __awdiv         1   10[COMRAM] unsigned char 
 17734 ;; Return value:  Size  Location     Type
 17735 ;;                  2    6[COMRAM] int 
 17736 ;; Registers used:
 17737 ;;		wreg, status,2, status,0
 17738 ;; Tracked objects:
 17739 ;;		On entry : 0/0
 17740 ;;		On exit  : 0/0
 17741 ;;		Unchanged: 0/0
 17742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17743 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17744 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17745 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17746 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17747 ;;Total ram usage:        8 bytes
 17748 ;; Hardware stack levels used:    1
 17749 ;; This function calls:
 17750 ;;		Nothing
 17751 ;; This function is called by:
 17752 ;;		_PWMC
 17753 ;;		i2_fround
 17754 ;;		i2_scale
 17755 ;;		i2_printf
 17756 ;; This function uses a non-reentrant model
 17757 ;;
 17758                           
 17759                           	psect	text68
 17760  004982                     __ptext68:
 17761                           	opt stack 0
 17762  004982                     i2___awdiv:
 17763                           	opt stack 21
 17764                           
 17765                           ;incstack = 0
 17766  004982  0E00               	movlw	0
 17767  004984  6E0C               	movwf	i2___awdiv@sign,c
 17768  004986  AE0A               	btfss	i2___awdiv@divisor+1,7,c
 17769  004988  D006               	goto	i2l4217
 17770  00498A  6C09               	negf	i2___awdiv@divisor,c
 17771  00498C  1E0A               	comf	i2___awdiv@divisor+1,f,c
 17772  00498E  B0D8               	btfsc	status,0,c
 17773  004990  2A0A               	incf	i2___awdiv@divisor+1,f,c
 17774  004992  0E01               	movlw	1
 17775  004994  6E0C               	movwf	i2___awdiv@sign,c
 17776  004996                     i2l4217:
 17777  004996  AE08               	btfss	i2___awdiv@dividend+1,7,c
 17778  004998  D006               	goto	i2l4223
 17779  00499A  6C07               	negf	i2___awdiv@dividend,c
 17780  00499C  1E08               	comf	i2___awdiv@dividend+1,f,c
 17781  00499E  B0D8               	btfsc	status,0,c
 17782  0049A0  2A08               	incf	i2___awdiv@dividend+1,f,c
 17783  0049A2  0E01               	movlw	1
 17784  0049A4  1A0C               	xorwf	i2___awdiv@sign,f,c
 17785  0049A6                     i2l4223:
 17786  0049A6  0E00               	movlw	0
 17787  0049A8  6E0E               	movwf	i2___awdiv@quotient+1,c
 17788  0049AA  0E00               	movlw	0
 17789  0049AC  6E0D               	movwf	i2___awdiv@quotient,c
 17790  0049AE  5009               	movf	i2___awdiv@divisor,w,c
 17791  0049B0  100A               	iorwf	i2___awdiv@divisor+1,w,c
 17792  0049B2  B4D8               	btfsc	status,2,c
 17793  0049B4  D01C               	goto	i2l4245
 17794  0049B6  0E01               	movlw	1
 17795  0049B8  6E0B               	movwf	i2___awdiv@counter,c
 17796  0049BA  D004               	goto	i2l4231
 17797  0049BC                     i2l4229:
 17798  0049BC  90D8               	bcf	status,0,c
 17799  0049BE  3609               	rlcf	i2___awdiv@divisor,f,c
 17800  0049C0  360A               	rlcf	i2___awdiv@divisor+1,f,c
 17801  0049C2  2A0B               	incf	i2___awdiv@counter,f,c
 17802  0049C4                     i2l4231:
 17803  0049C4  AE0A               	btfss	i2___awdiv@divisor+1,7,c
 17804  0049C6  D7FA               	goto	i2l4229
 17805  0049C8                     i2l4233:
 17806  0049C8  90D8               	bcf	status,0,c
 17807  0049CA  360D               	rlcf	i2___awdiv@quotient,f,c
 17808  0049CC  360E               	rlcf	i2___awdiv@quotient+1,f,c
 17809  0049CE  5009               	movf	i2___awdiv@divisor,w,c
 17810  0049D0  5C07               	subwf	i2___awdiv@dividend,w,c
 17811  0049D2  500A               	movf	i2___awdiv@divisor+1,w,c
 17812  0049D4  5808               	subwfb	i2___awdiv@dividend+1,w,c
 17813  0049D6  A0D8               	btfss	status,0,c
 17814  0049D8  D005               	goto	i2l4241
 17815  0049DA  5009               	movf	i2___awdiv@divisor,w,c
 17816  0049DC  5E07               	subwf	i2___awdiv@dividend,f,c
 17817  0049DE  500A               	movf	i2___awdiv@divisor+1,w,c
 17818  0049E0  5A08               	subwfb	i2___awdiv@dividend+1,f,c
 17819  0049E2  800D               	bsf	i2___awdiv@quotient,0,c
 17820  0049E4                     i2l4241:
 17821  0049E4  90D8               	bcf	status,0,c
 17822  0049E6  320A               	rrcf	i2___awdiv@divisor+1,f,c
 17823  0049E8  3209               	rrcf	i2___awdiv@divisor,f,c
 17824  0049EA  2E0B               	decfsz	i2___awdiv@counter,f,c
 17825  0049EC  D7ED               	goto	i2l4233
 17826  0049EE                     i2l4245:
 17827  0049EE  500C               	movf	i2___awdiv@sign,w,c
 17828  0049F0  B4D8               	btfsc	status,2,c
 17829  0049F2  D004               	goto	i2l4249
 17830  0049F4  6C0D               	negf	i2___awdiv@quotient,c
 17831  0049F6  1E0E               	comf	i2___awdiv@quotient+1,f,c
 17832  0049F8  B0D8               	btfsc	status,0,c
 17833  0049FA  2A0E               	incf	i2___awdiv@quotient+1,f,c
 17834  0049FC                     i2l4249:
 17835  0049FC  C00D  F007         	movff	i2___awdiv@quotient,?i2___awdiv
 17836  004A00  C00E  F008         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 17837  004A04  0012               	return	
 17838  004A06                     __end_ofi2___awdiv:
 17839                           	opt stack 0
 17840                           pclatu	equ	0xFFB
 17841                           pclath	equ	0xFFA
 17842                           tblptru	equ	0xFF8
 17843                           tblptrh	equ	0xFF7
 17844                           tblptrl	equ	0xFF6
 17845                           tablat	equ	0xFF5
 17846                           prodh	equ	0xFF4
 17847                           prodl	equ	0xFF3
 17848                           intcon	equ	0xFF2
 17849                           intcon3	equ	0xFF0
 17850                           postinc0	equ	0xFEE
 17851                           fsr0h	equ	0xFEA
 17852                           fsr0l	equ	0xFE9
 17853                           wreg	equ	0xFE8
 17854                           plusw1	equ	0xFE3
 17855                           fsr1h	equ	0xFE2
 17856                           fsr1l	equ	0xFE1
 17857                           indf2	equ	0xFDF
 17858                           postinc2	equ	0xFDE
 17859                           postdec2	equ	0xFDD
 17860                           plusw2	equ	0xFDB
 17861                           fsr2h	equ	0xFDA
 17862                           fsr2l	equ	0xFD9
 17863                           status	equ	0xFD8
 17864                           
 17865 ;; *************** function i2__tdiv_to_l_ *****************
 17866 ;; Defined at:
 17867 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdivl.c"
 17868 ;; Parameters:    Size  Location     Type
 17869 ;;  f1              3    0[COMRAM] float 
 17870 ;;  f2              3    3[COMRAM] float 
 17871 ;; Auto vars:     Size  Location     Type
 17872 ;;  _tdiv_to_l_     4    9[COMRAM] unsigned long 
 17873 ;;  _tdiv_to_l_     1   14[COMRAM] unsigned char 
 17874 ;;  _tdiv_to_l_     1   13[COMRAM] unsigned char 
 17875 ;; Return value:  Size  Location     Type
 17876 ;;                  4    0[COMRAM] unsigned long 
 17877 ;; Registers used:
 17878 ;;		wreg, status,2, status,0
 17879 ;; Tracked objects:
 17880 ;;		On entry : 0/0
 17881 ;;		On exit  : 0/0
 17882 ;;		Unchanged: 0/0
 17883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17884 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17885 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17886 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17887 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17888 ;;Total ram usage:       15 bytes
 17889 ;; Hardware stack levels used:    1
 17890 ;; This function calls:
 17891 ;;		Nothing
 17892 ;; This function is called by:
 17893 ;;		i2_printf
 17894 ;; This function uses a non-reentrant model
 17895 ;;
 17896                           
 17897                           	psect	text69
 17898  003686                     __ptext69:
 17899                           	opt stack 0
 17900  003686                     i2__tdiv_to_l_:
 17901                           	opt stack 22
 17902                           
 17903                           ;incstack = 0
 17904  003686  C003  F007         	movff	i2__tdiv_to_l_@f1+2,??i2__tdiv_to_l_
 17905  00368A  6A08               	clrf	(??i2__tdiv_to_l_+1)& (0+255),c
 17906  00368C  6A09               	clrf	(??i2__tdiv_to_l_+2)& (0+255),c
 17907  00368E  3402               	rlcf	i2__tdiv_to_l_@f1+1,w,c
 17908  003690  3607               	rlcf	??i2__tdiv_to_l_& (0+255),f,c
 17909  003692  E301               	bnc	u425_41
 17910  003694  8008               	bsf	(??i2__tdiv_to_l_+1)& (0+255),0,c
 17911  003696                     u425_41:
 17912  003696  5007               	movf	??i2__tdiv_to_l_,w,c
 17913  003698  6E0F               	movwf	i2__tdiv_to_l_@exp1,c
 17914  00369A  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 17915  00369C  A4D8               	btfss	status,2,c
 17916  00369E  D009               	goto	i2l4577
 17917  0036A0  0E00               	movlw	0
 17918  0036A2  6E01               	movwf	?i2__tdiv_to_l_,c
 17919  0036A4  0E00               	movlw	0
 17920  0036A6  6E02               	movwf	?i2__tdiv_to_l_+1,c
 17921  0036A8  0E00               	movlw	0
 17922  0036AA  6E03               	movwf	?i2__tdiv_to_l_+2,c
 17923  0036AC  0E00               	movlw	0
 17924  0036AE  6E04               	movwf	?i2__tdiv_to_l_+3,c
 17925  0036B0  0012               	return	
 17926  0036B2                     i2l4577:
 17927  0036B2  C006  F007         	movff	i2__tdiv_to_l_@f2+2,??i2__tdiv_to_l_
 17928  0036B6  6A08               	clrf	(??i2__tdiv_to_l_+1)& (0+255),c
 17929  0036B8  6A09               	clrf	(??i2__tdiv_to_l_+2)& (0+255),c
 17930  0036BA  3405               	rlcf	i2__tdiv_to_l_@f2+1,w,c
 17931  0036BC  3607               	rlcf	??i2__tdiv_to_l_& (0+255),f,c
 17932  0036BE  E301               	bnc	u427_41
 17933  0036C0  8008               	bsf	(??i2__tdiv_to_l_+1)& (0+255),0,c
 17934  0036C2                     u427_41:
 17935  0036C2  5007               	movf	??i2__tdiv_to_l_,w,c
 17936  0036C4  6E0E               	movwf	i2__tdiv_to_l_@cntr,c
 17937  0036C6  500E               	movf	i2__tdiv_to_l_@cntr,w,c
 17938  0036C8  A4D8               	btfss	status,2,c
 17939  0036CA  D009               	goto	i2l4583
 17940  0036CC  0E00               	movlw	0
 17941  0036CE  6E01               	movwf	?i2__tdiv_to_l_,c
 17942  0036D0  0E00               	movlw	0
 17943  0036D2  6E02               	movwf	?i2__tdiv_to_l_+1,c
 17944  0036D4  0E00               	movlw	0
 17945  0036D6  6E03               	movwf	?i2__tdiv_to_l_+2,c
 17946  0036D8  0E00               	movlw	0
 17947  0036DA  6E04               	movwf	?i2__tdiv_to_l_+3,c
 17948  0036DC  0012               	return	
 17949  0036DE                     i2l4583:
 17950  0036DE  8E02               	bsf	i2__tdiv_to_l_@f1+1,7,c
 17951  0036E0  0EFF               	movlw	255
 17952  0036E2  1601               	andwf	i2__tdiv_to_l_@f1,f,c
 17953  0036E4  0EFF               	movlw	255
 17954  0036E6  1602               	andwf	i2__tdiv_to_l_@f1+1,f,c
 17955  0036E8  0E00               	movlw	0
 17956  0036EA  1603               	andwf	i2__tdiv_to_l_@f1+2,f,c
 17957  0036EC  8E05               	bsf	i2__tdiv_to_l_@f2+1,7,c
 17958  0036EE  0EFF               	movlw	255
 17959  0036F0  1604               	andwf	i2__tdiv_to_l_@f2,f,c
 17960  0036F2  0EFF               	movlw	255
 17961  0036F4  1605               	andwf	i2__tdiv_to_l_@f2+1,f,c
 17962  0036F6  0E00               	movlw	0
 17963  0036F8  1606               	andwf	i2__tdiv_to_l_@f2+2,f,c
 17964  0036FA  0E00               	movlw	0
 17965  0036FC  6E0A               	movwf	i2__tdiv_to_l_@quot,c
 17966  0036FE  0E00               	movlw	0
 17967  003700  6E0B               	movwf	i2__tdiv_to_l_@quot+1,c
 17968  003702  0E00               	movlw	0
 17969  003704  6E0C               	movwf	i2__tdiv_to_l_@quot+2,c
 17970  003706  0E00               	movlw	0
 17971  003708  6E0D               	movwf	i2__tdiv_to_l_@quot+3,c
 17972  00370A  0E7F               	movlw	127
 17973  00370C  5E0F               	subwf	i2__tdiv_to_l_@exp1,f,c
 17974  00370E  500E               	movf	i2__tdiv_to_l_@cntr,w,c
 17975  003710  0F98               	addlw	152
 17976  003712  5E0F               	subwf	i2__tdiv_to_l_@exp1,f,c
 17977  003714  0E18               	movlw	24
 17978  003716  6E0E               	movwf	i2__tdiv_to_l_@cntr,c
 17979  003718                     i2l903:
 17980  003718  90D8               	bcf	status,0,c
 17981  00371A  360A               	rlcf	i2__tdiv_to_l_@quot,f,c
 17982  00371C  360B               	rlcf	i2__tdiv_to_l_@quot+1,f,c
 17983  00371E  360C               	rlcf	i2__tdiv_to_l_@quot+2,f,c
 17984  003720  360D               	rlcf	i2__tdiv_to_l_@quot+3,f,c
 17985  003722  5004               	movf	i2__tdiv_to_l_@f2,w,c
 17986  003724  5C01               	subwf	i2__tdiv_to_l_@f1,w,c
 17987  003726  5005               	movf	i2__tdiv_to_l_@f2+1,w,c
 17988  003728  5802               	subwfb	i2__tdiv_to_l_@f1+1,w,c
 17989  00372A  5006               	movf	i2__tdiv_to_l_@f2+2,w,c
 17990  00372C  5803               	subwfb	i2__tdiv_to_l_@f1+2,w,c
 17991  00372E  A0D8               	btfss	status,0,c
 17992  003730  D007               	goto	i2l904
 17993  003732  5004               	movf	i2__tdiv_to_l_@f2,w,c
 17994  003734  5E01               	subwf	i2__tdiv_to_l_@f1,f,c
 17995  003736  5005               	movf	i2__tdiv_to_l_@f2+1,w,c
 17996  003738  5A02               	subwfb	i2__tdiv_to_l_@f1+1,f,c
 17997  00373A  5006               	movf	i2__tdiv_to_l_@f2+2,w,c
 17998  00373C  5A03               	subwfb	i2__tdiv_to_l_@f1+2,f,c
 17999  00373E  800A               	bsf	i2__tdiv_to_l_@quot,0,c
 18000  003740                     i2l904:
 18001  003740  90D8               	bcf	status,0,c
 18002  003742  3601               	rlcf	i2__tdiv_to_l_@f1,f,c
 18003  003744  3602               	rlcf	i2__tdiv_to_l_@f1+1,f,c
 18004  003746  3603               	rlcf	i2__tdiv_to_l_@f1+2,f,c
 18005  003748  2E0E               	decfsz	i2__tdiv_to_l_@cntr,f,c
 18006  00374A  D7E6               	goto	i2l903
 18007  00374C  AE0F               	btfss	i2__tdiv_to_l_@exp1,7,c
 18008  00374E  D016               	goto	i2l4617
 18009  003750  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 18010  003752  0A80               	xorlw	128
 18011  003754  0F97               	addlw	151
 18012  003756  B0D8               	btfsc	status,0,c
 18013  003758  D009               	goto	i2l4613
 18014  00375A  0E00               	movlw	0
 18015  00375C  6E01               	movwf	?i2__tdiv_to_l_,c
 18016  00375E  0E00               	movlw	0
 18017  003760  6E02               	movwf	?i2__tdiv_to_l_+1,c
 18018  003762  0E00               	movlw	0
 18019  003764  6E03               	movwf	?i2__tdiv_to_l_+2,c
 18020  003766  0E00               	movlw	0
 18021  003768  6E04               	movwf	?i2__tdiv_to_l_+3,c
 18022  00376A  0012               	return	
 18023  00376C                     i2l4613:
 18024  00376C  90D8               	bcf	status,0,c
 18025  00376E  320D               	rrcf	i2__tdiv_to_l_@quot+3,f,c
 18026  003770  320C               	rrcf	i2__tdiv_to_l_@quot+2,f,c
 18027  003772  320B               	rrcf	i2__tdiv_to_l_@quot+1,f,c
 18028  003774  320A               	rrcf	i2__tdiv_to_l_@quot,f,c
 18029  003776  3E0F               	incfsz	i2__tdiv_to_l_@exp1,f,c
 18030  003778  D7F9               	goto	i2l4613
 18031  00377A  D015               	goto	i2l910
 18032  00377C                     i2l4617:
 18033  00377C  0E17               	movlw	23
 18034  00377E  640F               	cpfsgt	i2__tdiv_to_l_@exp1,c
 18035  003780  D00F               	goto	i2l4625
 18036  003782  0E00               	movlw	0
 18037  003784  6E01               	movwf	?i2__tdiv_to_l_,c
 18038  003786  0E00               	movlw	0
 18039  003788  6E02               	movwf	?i2__tdiv_to_l_+1,c
 18040  00378A  0E00               	movlw	0
 18041  00378C  6E03               	movwf	?i2__tdiv_to_l_+2,c
 18042  00378E  0E00               	movlw	0
 18043  003790  6E04               	movwf	?i2__tdiv_to_l_+3,c
 18044  003792  0012               	return	
 18045  003794                     i2l4623:
 18046  003794  90D8               	bcf	status,0,c
 18047  003796  360A               	rlcf	i2__tdiv_to_l_@quot,f,c
 18048  003798  360B               	rlcf	i2__tdiv_to_l_@quot+1,f,c
 18049  00379A  360C               	rlcf	i2__tdiv_to_l_@quot+2,f,c
 18050  00379C  360D               	rlcf	i2__tdiv_to_l_@quot+3,f,c
 18051  00379E  060F               	decf	i2__tdiv_to_l_@exp1,f,c
 18052  0037A0                     i2l4625:
 18053  0037A0  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 18054  0037A2  A4D8               	btfss	status,2,c
 18055  0037A4  D7F7               	goto	i2l4623
 18056  0037A6                     i2l910:
 18057  0037A6  C00A  F001         	movff	i2__tdiv_to_l_@quot,?i2__tdiv_to_l_
 18058  0037AA  C00B  F002         	movff	i2__tdiv_to_l_@quot+1,?i2__tdiv_to_l_+1
 18059  0037AE  C00C  F003         	movff	i2__tdiv_to_l_@quot+2,?i2__tdiv_to_l_+2
 18060  0037B2  C00D  F004         	movff	i2__tdiv_to_l_@quot+3,?i2__tdiv_to_l_+3
 18061  0037B6  0012               	return		;funcret
 18062  0037B8                     __end_ofi2__tdiv_to_l_:
 18063                           	opt stack 0
 18064                           pclatu	equ	0xFFB
 18065                           pclath	equ	0xFFA
 18066                           tblptru	equ	0xFF8
 18067                           tblptrh	equ	0xFF7
 18068                           tblptrl	equ	0xFF6
 18069                           tablat	equ	0xFF5
 18070                           prodh	equ	0xFF4
 18071                           prodl	equ	0xFF3
 18072                           intcon	equ	0xFF2
 18073                           intcon3	equ	0xFF0
 18074                           postinc0	equ	0xFEE
 18075                           fsr0h	equ	0xFEA
 18076                           fsr0l	equ	0xFE9
 18077                           wreg	equ	0xFE8
 18078                           plusw1	equ	0xFE3
 18079                           fsr1h	equ	0xFE2
 18080                           fsr1l	equ	0xFE1
 18081                           indf2	equ	0xFDF
 18082                           postinc2	equ	0xFDE
 18083                           postdec2	equ	0xFDD
 18084                           plusw2	equ	0xFDB
 18085                           fsr2h	equ	0xFDA
 18086                           fsr2l	equ	0xFD9
 18087                           status	equ	0xFD8
 18088                           
 18089 ;; *************** function i2__div_to_l_ *****************
 18090 ;; Defined at:
 18091 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fldivl.c"
 18092 ;; Parameters:    Size  Location     Type
 18093 ;;  f1              3    0[COMRAM] unsigned long 
 18094 ;;  f2              3    3[COMRAM] unsigned long 
 18095 ;; Auto vars:     Size  Location     Type
 18096 ;;  _div_to_l_      4    6[COMRAM] unsigned long 
 18097 ;;  _div_to_l_      1   11[COMRAM] unsigned char 
 18098 ;;  _div_to_l_      1   10[COMRAM] unsigned char 
 18099 ;; Return value:  Size  Location     Type
 18100 ;;                  4    0[COMRAM] unsigned long 
 18101 ;; Registers used:
 18102 ;;		wreg, status,2, status,0
 18103 ;; Tracked objects:
 18104 ;;		On entry : 0/0
 18105 ;;		On exit  : 0/0
 18106 ;;		Unchanged: 0/0
 18107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18108 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18109 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18111 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18112 ;;Total ram usage:       12 bytes
 18113 ;; Hardware stack levels used:    1
 18114 ;; This function calls:
 18115 ;;		Nothing
 18116 ;; This function is called by:
 18117 ;;		i2_printf
 18118 ;; This function uses a non-reentrant model
 18119 ;;
 18120                           
 18121                           	psect	text70
 18122  0038EA                     __ptext70:
 18123                           	opt stack 0
 18124  0038EA                     i2__div_to_l_:
 18125                           	opt stack 22
 18126                           
 18127                           ;incstack = 0
 18128  0038EA  3403               	rlcf	i2__div_to_l_@f1+2,w,c
 18129  0038EC  3404               	rlcf	i2__div_to_l_@f1+3,w,c
 18130  0038EE  6E0C               	movwf	i2__div_to_l_@exp1,c
 18131  0038F0  500C               	movf	i2__div_to_l_@exp1,w,c
 18132  0038F2  A4D8               	btfss	status,2,c
 18133  0038F4  D009               	goto	i2l4517
 18134  0038F6  0E00               	movlw	0
 18135  0038F8  6E01               	movwf	?i2__div_to_l_,c
 18136  0038FA  0E00               	movlw	0
 18137  0038FC  6E02               	movwf	?i2__div_to_l_+1,c
 18138  0038FE  0E00               	movlw	0
 18139  003900  6E03               	movwf	?i2__div_to_l_+2,c
 18140  003902  0E00               	movlw	0
 18141  003904  6E04               	movwf	?i2__div_to_l_+3,c
 18142  003906  0012               	return	
 18143  003908                     i2l4517:
 18144  003908  3406               	rlcf	i2__div_to_l_@f2+2,w,c
 18145  00390A  3407               	rlcf	i2__div_to_l_@f2+3,w,c
 18146  00390C  6E0B               	movwf	i2__div_to_l_@cntr,c
 18147  00390E  500B               	movf	i2__div_to_l_@cntr,w,c
 18148  003910  A4D8               	btfss	status,2,c
 18149  003912  D009               	goto	i2l4523
 18150  003914  0E00               	movlw	0
 18151  003916  6E01               	movwf	?i2__div_to_l_,c
 18152  003918  0E00               	movlw	0
 18153  00391A  6E02               	movwf	?i2__div_to_l_+1,c
 18154  00391C  0E00               	movlw	0
 18155  00391E  6E03               	movwf	?i2__div_to_l_+2,c
 18156  003920  0E00               	movlw	0
 18157  003922  6E04               	movwf	?i2__div_to_l_+3,c
 18158  003924  0012               	return	
 18159  003926                     i2l4523:
 18160  003926  8E03               	bsf	i2__div_to_l_@f1+2,7,c
 18161  003928  0EFF               	movlw	255
 18162  00392A  1601               	andwf	i2__div_to_l_@f1,f,c
 18163  00392C  0EFF               	movlw	255
 18164  00392E  1602               	andwf	i2__div_to_l_@f1+1,f,c
 18165  003930  0EFF               	movlw	255
 18166  003932  1603               	andwf	i2__div_to_l_@f1+2,f,c
 18167  003934  0E00               	movlw	0
 18168  003936  1604               	andwf	i2__div_to_l_@f1+3,f,c
 18169  003938  8E06               	bsf	i2__div_to_l_@f2+2,7,c
 18170  00393A  0EFF               	movlw	255
 18171  00393C  1604               	andwf	i2__div_to_l_@f2,f,c
 18172  00393E  0EFF               	movlw	255
 18173  003940  1605               	andwf	i2__div_to_l_@f2+1,f,c
 18174  003942  0EFF               	movlw	255
 18175  003944  1606               	andwf	i2__div_to_l_@f2+2,f,c
 18176  003946  0E00               	movlw	0
 18177  003948  1607               	andwf	i2__div_to_l_@f2+3,f,c
 18178  00394A  0E00               	movlw	0
 18179  00394C  6E07               	movwf	i2__div_to_l_@quot,c
 18180  00394E  0E00               	movlw	0
 18181  003950  6E08               	movwf	i2__div_to_l_@quot+1,c
 18182  003952  0E00               	movlw	0
 18183  003954  6E09               	movwf	i2__div_to_l_@quot+2,c
 18184  003956  0E00               	movlw	0
 18185  003958  6E0A               	movwf	i2__div_to_l_@quot+3,c
 18186  00395A  0E7F               	movlw	127
 18187  00395C  5E0C               	subwf	i2__div_to_l_@exp1,f,c
 18188  00395E  500B               	movf	i2__div_to_l_@cntr,w,c
 18189  003960  0FA0               	addlw	160
 18190  003962  5E0C               	subwf	i2__div_to_l_@exp1,f,c
 18191  003964  0E20               	movlw	32
 18192  003966  6E0B               	movwf	i2__div_to_l_@cntr,c
 18193  003968                     i2l4537:
 18194  003968  90D8               	bcf	status,0,c
 18195  00396A  3607               	rlcf	i2__div_to_l_@quot,f,c
 18196  00396C  3608               	rlcf	i2__div_to_l_@quot+1,f,c
 18197  00396E  3609               	rlcf	i2__div_to_l_@quot+2,f,c
 18198  003970  360A               	rlcf	i2__div_to_l_@quot+3,f,c
 18199  003972  5004               	movf	i2__div_to_l_@f2,w,c
 18200  003974  5C01               	subwf	i2__div_to_l_@f1,w,c
 18201  003976  5005               	movf	i2__div_to_l_@f2+1,w,c
 18202  003978  5802               	subwfb	i2__div_to_l_@f1+1,w,c
 18203  00397A  5006               	movf	i2__div_to_l_@f2+2,w,c
 18204  00397C  5803               	subwfb	i2__div_to_l_@f1+2,w,c
 18205  00397E  5007               	movf	i2__div_to_l_@f2+3,w,c
 18206  003980  5804               	subwfb	i2__div_to_l_@f1+3,w,c
 18207  003982  A0D8               	btfss	status,0,c
 18208  003984  D009               	goto	i2l4545
 18209  003986  5004               	movf	i2__div_to_l_@f2,w,c
 18210  003988  5E01               	subwf	i2__div_to_l_@f1,f,c
 18211  00398A  5005               	movf	i2__div_to_l_@f2+1,w,c
 18212  00398C  5A02               	subwfb	i2__div_to_l_@f1+1,f,c
 18213  00398E  5006               	movf	i2__div_to_l_@f2+2,w,c
 18214  003990  5A03               	subwfb	i2__div_to_l_@f1+2,f,c
 18215  003992  5007               	movf	i2__div_to_l_@f2+3,w,c
 18216  003994  5A04               	subwfb	i2__div_to_l_@f1+3,f,c
 18217  003996  8007               	bsf	i2__div_to_l_@quot,0,c
 18218  003998                     i2l4545:
 18219  003998  90D8               	bcf	status,0,c
 18220  00399A  3601               	rlcf	i2__div_to_l_@f1,f,c
 18221  00399C  3602               	rlcf	i2__div_to_l_@f1+1,f,c
 18222  00399E  3603               	rlcf	i2__div_to_l_@f1+2,f,c
 18223  0039A0  3604               	rlcf	i2__div_to_l_@f1+3,f,c
 18224  0039A2  2E0B               	decfsz	i2__div_to_l_@cntr,f,c
 18225  0039A4  D7E1               	goto	i2l4537
 18226  0039A6  AE0C               	btfss	i2__div_to_l_@exp1,7,c
 18227  0039A8  D016               	goto	i2l4561
 18228  0039AA  500C               	movf	i2__div_to_l_@exp1,w,c
 18229  0039AC  0A80               	xorlw	128
 18230  0039AE  0F9F               	addlw	159
 18231  0039B0  B0D8               	btfsc	status,0,c
 18232  0039B2  D009               	goto	i2l4557
 18233  0039B4  0E00               	movlw	0
 18234  0039B6  6E01               	movwf	?i2__div_to_l_,c
 18235  0039B8  0E00               	movlw	0
 18236  0039BA  6E02               	movwf	?i2__div_to_l_+1,c
 18237  0039BC  0E00               	movlw	0
 18238  0039BE  6E03               	movwf	?i2__div_to_l_+2,c
 18239  0039C0  0E00               	movlw	0
 18240  0039C2  6E04               	movwf	?i2__div_to_l_+3,c
 18241  0039C4  0012               	return	
 18242  0039C6                     i2l4557:
 18243  0039C6  90D8               	bcf	status,0,c
 18244  0039C8  320A               	rrcf	i2__div_to_l_@quot+3,f,c
 18245  0039CA  3209               	rrcf	i2__div_to_l_@quot+2,f,c
 18246  0039CC  3208               	rrcf	i2__div_to_l_@quot+1,f,c
 18247  0039CE  3207               	rrcf	i2__div_to_l_@quot,f,c
 18248  0039D0  3E0C               	incfsz	i2__div_to_l_@exp1,f,c
 18249  0039D2  D7F9               	goto	i2l4557
 18250  0039D4  D015               	goto	i2l806
 18251  0039D6                     i2l4561:
 18252  0039D6  0E1F               	movlw	31
 18253  0039D8  640C               	cpfsgt	i2__div_to_l_@exp1,c
 18254  0039DA  D00F               	goto	i2l4569
 18255  0039DC  0E00               	movlw	0
 18256  0039DE  6E01               	movwf	?i2__div_to_l_,c
 18257  0039E0  0E00               	movlw	0
 18258  0039E2  6E02               	movwf	?i2__div_to_l_+1,c
 18259  0039E4  0E00               	movlw	0
 18260  0039E6  6E03               	movwf	?i2__div_to_l_+2,c
 18261  0039E8  0E00               	movlw	0
 18262  0039EA  6E04               	movwf	?i2__div_to_l_+3,c
 18263  0039EC  0012               	return	
 18264  0039EE                     i2l4567:
 18265  0039EE  90D8               	bcf	status,0,c
 18266  0039F0  3607               	rlcf	i2__div_to_l_@quot,f,c
 18267  0039F2  3608               	rlcf	i2__div_to_l_@quot+1,f,c
 18268  0039F4  3609               	rlcf	i2__div_to_l_@quot+2,f,c
 18269  0039F6  360A               	rlcf	i2__div_to_l_@quot+3,f,c
 18270  0039F8  060C               	decf	i2__div_to_l_@exp1,f,c
 18271  0039FA                     i2l4569:
 18272  0039FA  500C               	movf	i2__div_to_l_@exp1,w,c
 18273  0039FC  A4D8               	btfss	status,2,c
 18274  0039FE  D7F7               	goto	i2l4567
 18275  003A00                     i2l806:
 18276  003A00  C007  F001         	movff	i2__div_to_l_@quot,?i2__div_to_l_
 18277  003A04  C008  F002         	movff	i2__div_to_l_@quot+1,?i2__div_to_l_+1
 18278  003A08  C009  F003         	movff	i2__div_to_l_@quot+2,?i2__div_to_l_+2
 18279  003A0C  C00A  F004         	movff	i2__div_to_l_@quot+3,?i2__div_to_l_+3
 18280  003A10  0012               	return		;funcret
 18281  003A12                     __end_ofi2__div_to_l_:
 18282                           	opt stack 0
 18283                           pclatu	equ	0xFFB
 18284                           pclath	equ	0xFFA
 18285                           tblptru	equ	0xFF8
 18286                           tblptrh	equ	0xFF7
 18287                           tblptrl	equ	0xFF6
 18288                           tablat	equ	0xFF5
 18289                           prodh	equ	0xFF4
 18290                           prodl	equ	0xFF3
 18291                           intcon	equ	0xFF2
 18292                           intcon3	equ	0xFF0
 18293                           postinc0	equ	0xFEE
 18294                           fsr0h	equ	0xFEA
 18295                           fsr0l	equ	0xFE9
 18296                           wreg	equ	0xFE8
 18297                           plusw1	equ	0xFE3
 18298                           fsr1h	equ	0xFE2
 18299                           fsr1l	equ	0xFE1
 18300                           indf2	equ	0xFDF
 18301                           postinc2	equ	0xFDE
 18302                           postdec2	equ	0xFDD
 18303                           plusw2	equ	0xFDB
 18304                           fsr2h	equ	0xFDA
 18305                           fsr2l	equ	0xFD9
 18306                           status	equ	0xFD8
 18307                           
 18308 ;; *************** function i2___lltoft *****************
 18309 ;; Defined at:
 18310 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lltoft.c"
 18311 ;; Parameters:    Size  Location     Type
 18312 ;;  c               4    8[COMRAM] unsigned long 
 18313 ;; Auto vars:     Size  Location     Type
 18314 ;;  __lltoft        1   16[COMRAM] unsigned char 
 18315 ;; Return value:  Size  Location     Type
 18316 ;;                  3    8[COMRAM] float 
 18317 ;; Registers used:
 18318 ;;		wreg, status,2, status,0, cstack
 18319 ;; Tracked objects:
 18320 ;;		On entry : 0/0
 18321 ;;		On exit  : 0/0
 18322 ;;		Unchanged: 0/0
 18323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18324 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18325 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18326 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18327 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18328 ;;Total ram usage:        9 bytes
 18329 ;; Hardware stack levels used:    1
 18330 ;; Hardware stack levels required when called:    1
 18331 ;; This function calls:
 18332 ;;		i2___ftpack
 18333 ;; This function is called by:
 18334 ;;		i2_printf
 18335 ;; This function uses a non-reentrant model
 18336 ;;
 18337                           
 18338                           	psect	text71
 18339  004D90                     __ptext71:
 18340                           	opt stack 0
 18341  004D90                     i2___lltoft:
 18342                           	opt stack 21
 18343                           
 18344                           ;incstack = 0
 18345  004D90  0E8E               	movlw	142
 18346  004D92  6E11               	movwf	i2___lltoft@exp,c
 18347  004D94  D006               	goto	i2l4757
 18348  004D96                     i2l4755:
 18349  004D96  90D8               	bcf	status,0,c
 18350  004D98  320C               	rrcf	i2___lltoft@c+3,f,c
 18351  004D9A  320B               	rrcf	i2___lltoft@c+2,f,c
 18352  004D9C  320A               	rrcf	i2___lltoft@c+1,f,c
 18353  004D9E  3209               	rrcf	i2___lltoft@c,f,c
 18354  004DA0  2A11               	incf	i2___lltoft@exp,f,c
 18355  004DA2                     i2l4757:
 18356  004DA2  0E00               	movlw	0
 18357  004DA4  1409               	andwf	i2___lltoft@c,w,c
 18358  004DA6  6E0D               	movwf	??i2___lltoft& (0+255),c
 18359  004DA8  0E00               	movlw	0
 18360  004DAA  140A               	andwf	i2___lltoft@c+1,w,c
 18361  004DAC  6E0E               	movwf	(??i2___lltoft+1)& (0+255),c
 18362  004DAE  0E00               	movlw	0
 18363  004DB0  140B               	andwf	i2___lltoft@c+2,w,c
 18364  004DB2  6E0F               	movwf	(??i2___lltoft+2)& (0+255),c
 18365  004DB4  0EFF               	movlw	255
 18366  004DB6  140C               	andwf	i2___lltoft@c+3,w,c
 18367  004DB8  6E10               	movwf	(??i2___lltoft+3)& (0+255),c
 18368  004DBA  500D               	movf	??i2___lltoft,w,c
 18369  004DBC  100E               	iorwf	??i2___lltoft+1,w,c
 18370  004DBE  100F               	iorwf	??i2___lltoft+2,w,c
 18371  004DC0  1010               	iorwf	??i2___lltoft+3,w,c
 18372  004DC2  A4D8               	btfss	status,2,c
 18373  004DC4  D7E8               	goto	i2l4755
 18374  004DC6  C009  F001         	movff	i2___lltoft@c,i2___ftpack@arg
 18375  004DCA  C00A  F002         	movff	i2___lltoft@c+1,i2___ftpack@arg+1
 18376  004DCE  C00B  F003         	movff	i2___lltoft@c+2,i2___ftpack@arg+2
 18377  004DD2  C011  F004         	movff	i2___lltoft@exp,i2___ftpack@exp
 18378  004DD6  0E00               	movlw	0
 18379  004DD8  6E05               	movwf	i2___ftpack@sign,c
 18380  004DDA  ECB9  F022         	call	i2___ftpack	;wreg free
 18381  004DDE  C001  F009         	movff	?i2___ftpack,?i2___lltoft
 18382  004DE2  C002  F00A         	movff	?i2___ftpack+1,?i2___lltoft+1
 18383  004DE6  C003  F00B         	movff	?i2___ftpack+2,?i2___lltoft+2
 18384  004DEA  0012               	return	
 18385  004DEC                     __end_ofi2___lltoft:
 18386                           	opt stack 0
 18387                           pclatu	equ	0xFFB
 18388                           pclath	equ	0xFFA
 18389                           tblptru	equ	0xFF8
 18390                           tblptrh	equ	0xFF7
 18391                           tblptrl	equ	0xFF6
 18392                           tablat	equ	0xFF5
 18393                           prodh	equ	0xFF4
 18394                           prodl	equ	0xFF3
 18395                           intcon	equ	0xFF2
 18396                           intcon3	equ	0xFF0
 18397                           postinc0	equ	0xFEE
 18398                           fsr0h	equ	0xFEA
 18399                           fsr0l	equ	0xFE9
 18400                           wreg	equ	0xFE8
 18401                           plusw1	equ	0xFE3
 18402                           fsr1h	equ	0xFE2
 18403                           fsr1l	equ	0xFE1
 18404                           indf2	equ	0xFDF
 18405                           postinc2	equ	0xFDE
 18406                           postdec2	equ	0xFDD
 18407                           plusw2	equ	0xFDB
 18408                           fsr2h	equ	0xFDA
 18409                           fsr2l	equ	0xFD9
 18410                           status	equ	0xFD8
 18411                           
 18412 ;; *************** function i2___llmod *****************
 18413 ;; Defined at:
 18414 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\llmod.c"
 18415 ;; Parameters:    Size  Location     Type
 18416 ;;  dividend        4   13[COMRAM] unsigned long 
 18417 ;;  divisor         4   17[COMRAM] unsigned long 
 18418 ;; Auto vars:     Size  Location     Type
 18419 ;;  __llmod         1   21[COMRAM] unsigned char 
 18420 ;; Return value:  Size  Location     Type
 18421 ;;                  4   13[COMRAM] unsigned long 
 18422 ;; Registers used:
 18423 ;;		wreg, status,2, status,0
 18424 ;; Tracked objects:
 18425 ;;		On entry : 0/0
 18426 ;;		On exit  : 0/0
 18427 ;;		Unchanged: 0/0
 18428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18429 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18430 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18432 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18433 ;;Total ram usage:        9 bytes
 18434 ;; Hardware stack levels used:    1
 18435 ;; This function calls:
 18436 ;;		Nothing
 18437 ;; This function is called by:
 18438 ;;		i2_printf
 18439 ;; This function uses a non-reentrant model
 18440 ;;
 18441                           
 18442                           	psect	text72
 18443  004CCA                     __ptext72:
 18444                           	opt stack 0
 18445  004CCA                     i2___llmod:
 18446                           	opt stack 22
 18447                           
 18448                           ;incstack = 0
 18449  004CCA  5012               	movf	i2___llmod@divisor,w,c
 18450  004CCC  1013               	iorwf	i2___llmod@divisor+1,w,c
 18451  004CCE  1014               	iorwf	i2___llmod@divisor+2,w,c
 18452  004CD0  1015               	iorwf	i2___llmod@divisor+3,w,c
 18453  004CD2  B4D8               	btfsc	status,2,c
 18454  004CD4  D024               	goto	i2l995
 18455  004CD6  0E01               	movlw	1
 18456  004CD8  6E16               	movwf	i2___llmod@counter,c
 18457  004CDA  D006               	goto	i2l4743
 18458  004CDC                     i2l4741:
 18459  004CDC  90D8               	bcf	status,0,c
 18460  004CDE  3612               	rlcf	i2___llmod@divisor,f,c
 18461  004CE0  3613               	rlcf	i2___llmod@divisor+1,f,c
 18462  004CE2  3614               	rlcf	i2___llmod@divisor+2,f,c
 18463  004CE4  3615               	rlcf	i2___llmod@divisor+3,f,c
 18464  004CE6  2A16               	incf	i2___llmod@counter,f,c
 18465  004CE8                     i2l4743:
 18466  004CE8  AE15               	btfss	i2___llmod@divisor+3,7,c
 18467  004CEA  D7F8               	goto	i2l4741
 18468  004CEC                     i2l4745:
 18469  004CEC  5012               	movf	i2___llmod@divisor,w,c
 18470  004CEE  5C0E               	subwf	i2___llmod@dividend,w,c
 18471  004CF0  5013               	movf	i2___llmod@divisor+1,w,c
 18472  004CF2  580F               	subwfb	i2___llmod@dividend+1,w,c
 18473  004CF4  5014               	movf	i2___llmod@divisor+2,w,c
 18474  004CF6  5810               	subwfb	i2___llmod@dividend+2,w,c
 18475  004CF8  5015               	movf	i2___llmod@divisor+3,w,c
 18476  004CFA  5811               	subwfb	i2___llmod@dividend+3,w,c
 18477  004CFC  A0D8               	btfss	status,0,c
 18478  004CFE  D008               	goto	i2l4749
 18479  004D00  5012               	movf	i2___llmod@divisor,w,c
 18480  004D02  5E0E               	subwf	i2___llmod@dividend,f,c
 18481  004D04  5013               	movf	i2___llmod@divisor+1,w,c
 18482  004D06  5A0F               	subwfb	i2___llmod@dividend+1,f,c
 18483  004D08  5014               	movf	i2___llmod@divisor+2,w,c
 18484  004D0A  5A10               	subwfb	i2___llmod@dividend+2,f,c
 18485  004D0C  5015               	movf	i2___llmod@divisor+3,w,c
 18486  004D0E  5A11               	subwfb	i2___llmod@dividend+3,f,c
 18487  004D10                     i2l4749:
 18488  004D10  90D8               	bcf	status,0,c
 18489  004D12  3215               	rrcf	i2___llmod@divisor+3,f,c
 18490  004D14  3214               	rrcf	i2___llmod@divisor+2,f,c
 18491  004D16  3213               	rrcf	i2___llmod@divisor+1,f,c
 18492  004D18  3212               	rrcf	i2___llmod@divisor,f,c
 18493  004D1A  2E16               	decfsz	i2___llmod@counter,f,c
 18494  004D1C  D7E7               	goto	i2l4745
 18495  004D1E                     i2l995:
 18496  004D1E  C00E  F00E         	movff	i2___llmod@dividend,?i2___llmod
 18497  004D22  C00F  F00F         	movff	i2___llmod@dividend+1,?i2___llmod+1
 18498  004D26  C010  F010         	movff	i2___llmod@dividend+2,?i2___llmod+2
 18499  004D2A  C011  F011         	movff	i2___llmod@dividend+3,?i2___llmod+3
 18500  004D2E  0012               	return		;funcret
 18501  004D30                     __end_ofi2___llmod:
 18502                           	opt stack 0
 18503                           pclatu	equ	0xFFB
 18504                           pclath	equ	0xFFA
 18505                           tblptru	equ	0xFF8
 18506                           tblptrh	equ	0xFF7
 18507                           tblptrl	equ	0xFF6
 18508                           tablat	equ	0xFF5
 18509                           prodh	equ	0xFF4
 18510                           prodl	equ	0xFF3
 18511                           intcon	equ	0xFF2
 18512                           intcon3	equ	0xFF0
 18513                           postinc0	equ	0xFEE
 18514                           fsr0h	equ	0xFEA
 18515                           fsr0l	equ	0xFE9
 18516                           wreg	equ	0xFE8
 18517                           plusw1	equ	0xFE3
 18518                           fsr1h	equ	0xFE2
 18519                           fsr1l	equ	0xFE1
 18520                           indf2	equ	0xFDF
 18521                           postinc2	equ	0xFDE
 18522                           postdec2	equ	0xFDD
 18523                           plusw2	equ	0xFDB
 18524                           fsr2h	equ	0xFDA
 18525                           fsr2l	equ	0xFD9
 18526                           status	equ	0xFD8
 18527                           
 18528 ;; *************** function i2___lldiv *****************
 18529 ;; Defined at:
 18530 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
 18531 ;; Parameters:    Size  Location     Type
 18532 ;;  dividend        4    0[COMRAM] unsigned long 
 18533 ;;  divisor         4    4[COMRAM] unsigned long 
 18534 ;; Auto vars:     Size  Location     Type
 18535 ;;  __lldiv         4    8[COMRAM] unsigned long 
 18536 ;;  __lldiv         1   12[COMRAM] unsigned char 
 18537 ;; Return value:  Size  Location     Type
 18538 ;;                  4    0[COMRAM] unsigned long 
 18539 ;; Registers used:
 18540 ;;		wreg, status,2, status,0
 18541 ;; Tracked objects:
 18542 ;;		On entry : 0/0
 18543 ;;		On exit  : 0/0
 18544 ;;		Unchanged: 0/0
 18545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18546 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18547 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18549 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18550 ;;Total ram usage:       13 bytes
 18551 ;; Hardware stack levels used:    1
 18552 ;; This function calls:
 18553 ;;		Nothing
 18554 ;; This function is called by:
 18555 ;;		i2_printf
 18556 ;; This function uses a non-reentrant model
 18557 ;;
 18558                           
 18559                           	psect	text73
 18560  004A06                     __ptext73:
 18561                           	opt stack 0
 18562  004A06                     i2___lldiv:
 18563                           	opt stack 22
 18564                           
 18565                           ;incstack = 0
 18566  004A06  0E00               	movlw	0
 18567  004A08  6E09               	movwf	i2___lldiv@quotient,c
 18568  004A0A  0E00               	movlw	0
 18569  004A0C  6E0A               	movwf	i2___lldiv@quotient+1,c
 18570  004A0E  0E00               	movlw	0
 18571  004A10  6E0B               	movwf	i2___lldiv@quotient+2,c
 18572  004A12  0E00               	movlw	0
 18573  004A14  6E0C               	movwf	i2___lldiv@quotient+3,c
 18574  004A16  5005               	movf	i2___lldiv@divisor,w,c
 18575  004A18  1006               	iorwf	i2___lldiv@divisor+1,w,c
 18576  004A1A  1007               	iorwf	i2___lldiv@divisor+2,w,c
 18577  004A1C  1008               	iorwf	i2___lldiv@divisor+3,w,c
 18578  004A1E  B4D8               	btfsc	status,2,c
 18579  004A20  D02A               	goto	i2l985
 18580  004A22  0E01               	movlw	1
 18581  004A24  6E0D               	movwf	i2___lldiv@counter,c
 18582  004A26  D006               	goto	i2l4723
 18583  004A28                     i2l4721:
 18584  004A28  90D8               	bcf	status,0,c
 18585  004A2A  3605               	rlcf	i2___lldiv@divisor,f,c
 18586  004A2C  3606               	rlcf	i2___lldiv@divisor+1,f,c
 18587  004A2E  3607               	rlcf	i2___lldiv@divisor+2,f,c
 18588  004A30  3608               	rlcf	i2___lldiv@divisor+3,f,c
 18589  004A32  2A0D               	incf	i2___lldiv@counter,f,c
 18590  004A34                     i2l4723:
 18591  004A34  AE08               	btfss	i2___lldiv@divisor+3,7,c
 18592  004A36  D7F8               	goto	i2l4721
 18593  004A38                     i2l4725:
 18594  004A38  90D8               	bcf	status,0,c
 18595  004A3A  3609               	rlcf	i2___lldiv@quotient,f,c
 18596  004A3C  360A               	rlcf	i2___lldiv@quotient+1,f,c
 18597  004A3E  360B               	rlcf	i2___lldiv@quotient+2,f,c
 18598  004A40  360C               	rlcf	i2___lldiv@quotient+3,f,c
 18599  004A42  5005               	movf	i2___lldiv@divisor,w,c
 18600  004A44  5C01               	subwf	i2___lldiv@dividend,w,c
 18601  004A46  5006               	movf	i2___lldiv@divisor+1,w,c
 18602  004A48  5802               	subwfb	i2___lldiv@dividend+1,w,c
 18603  004A4A  5007               	movf	i2___lldiv@divisor+2,w,c
 18604  004A4C  5803               	subwfb	i2___lldiv@dividend+2,w,c
 18605  004A4E  5008               	movf	i2___lldiv@divisor+3,w,c
 18606  004A50  5804               	subwfb	i2___lldiv@dividend+3,w,c
 18607  004A52  A0D8               	btfss	status,0,c
 18608  004A54  D009               	goto	i2l4733
 18609  004A56  5005               	movf	i2___lldiv@divisor,w,c
 18610  004A58  5E01               	subwf	i2___lldiv@dividend,f,c
 18611  004A5A  5006               	movf	i2___lldiv@divisor+1,w,c
 18612  004A5C  5A02               	subwfb	i2___lldiv@dividend+1,f,c
 18613  004A5E  5007               	movf	i2___lldiv@divisor+2,w,c
 18614  004A60  5A03               	subwfb	i2___lldiv@dividend+2,f,c
 18615  004A62  5008               	movf	i2___lldiv@divisor+3,w,c
 18616  004A64  5A04               	subwfb	i2___lldiv@dividend+3,f,c
 18617  004A66  8009               	bsf	i2___lldiv@quotient,0,c
 18618  004A68                     i2l4733:
 18619  004A68  90D8               	bcf	status,0,c
 18620  004A6A  3208               	rrcf	i2___lldiv@divisor+3,f,c
 18621  004A6C  3207               	rrcf	i2___lldiv@divisor+2,f,c
 18622  004A6E  3206               	rrcf	i2___lldiv@divisor+1,f,c
 18623  004A70  3205               	rrcf	i2___lldiv@divisor,f,c
 18624  004A72  2E0D               	decfsz	i2___lldiv@counter,f,c
 18625  004A74  D7E1               	goto	i2l4725
 18626  004A76                     i2l985:
 18627  004A76  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
 18628  004A7A  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
 18629  004A7E  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
 18630  004A82  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
 18631  004A86  0012               	return		;funcret
 18632  004A88                     __end_ofi2___lldiv:
 18633                           	opt stack 0
 18634                           pclatu	equ	0xFFB
 18635                           pclath	equ	0xFFA
 18636                           tblptru	equ	0xFF8
 18637                           tblptrh	equ	0xFF7
 18638                           tblptrl	equ	0xFF6
 18639                           tablat	equ	0xFF5
 18640                           prodh	equ	0xFF4
 18641                           prodl	equ	0xFF3
 18642                           intcon	equ	0xFF2
 18643                           intcon3	equ	0xFF0
 18644                           postinc0	equ	0xFEE
 18645                           fsr0h	equ	0xFEA
 18646                           fsr0l	equ	0xFE9
 18647                           wreg	equ	0xFE8
 18648                           plusw1	equ	0xFE3
 18649                           fsr1h	equ	0xFE2
 18650                           fsr1l	equ	0xFE1
 18651                           indf2	equ	0xFDF
 18652                           postinc2	equ	0xFDE
 18653                           postdec2	equ	0xFDD
 18654                           plusw2	equ	0xFDB
 18655                           fsr2h	equ	0xFDA
 18656                           fsr2l	equ	0xFD9
 18657                           status	equ	0xFD8
 18658                           
 18659 ;; *************** function i2___fttol *****************
 18660 ;; Defined at:
 18661 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
 18662 ;; Parameters:    Size  Location     Type
 18663 ;;  f1              3   42[COMRAM] float 
 18664 ;; Auto vars:     Size  Location     Type
 18665 ;;  __fttol         4   52[COMRAM] unsigned long 
 18666 ;;  __fttol         1   56[COMRAM] unsigned char 
 18667 ;;  __fttol         1   51[COMRAM] unsigned char 
 18668 ;; Return value:  Size  Location     Type
 18669 ;;                  4   42[COMRAM] long 
 18670 ;; Registers used:
 18671 ;;		wreg, status,2, status,0
 18672 ;; Tracked objects:
 18673 ;;		On entry : 0/0
 18674 ;;		On exit  : 0/0
 18675 ;;		Unchanged: 0/0
 18676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18677 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18678 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18679 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18680 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18681 ;;Total ram usage:       15 bytes
 18682 ;; Hardware stack levels used:    1
 18683 ;; This function calls:
 18684 ;;		Nothing
 18685 ;; This function is called by:
 18686 ;;		i2_printf
 18687 ;; This function uses a non-reentrant model
 18688 ;;
 18689                           
 18690                           	psect	text74
 18691  003E1C                     __ptext74:
 18692                           	opt stack 0
 18693  003E1C                     i2___fttol:
 18694                           	opt stack 22
 18695                           
 18696                           ;incstack = 0
 18697  003E1C  C02D  F02F         	movff	i2___fttol@f1+2,??i2___fttol
 18698  003E20  6A30               	clrf	(??i2___fttol+1)& (0+255),c
 18699  003E22  6A31               	clrf	(??i2___fttol+2)& (0+255),c
 18700  003E24  342C               	rlcf	i2___fttol@f1+1,w,c
 18701  003E26  362F               	rlcf	??i2___fttol& (0+255),f,c
 18702  003E28  E301               	bnc	u439_41
 18703  003E2A  8030               	bsf	(??i2___fttol+1)& (0+255),0,c
 18704  003E2C                     u439_41:
 18705  003E2C  502F               	movf	??i2___fttol,w,c
 18706  003E2E  6E39               	movwf	i2___fttol@exp1,c
 18707  003E30  5039               	movf	i2___fttol@exp1,w,c
 18708  003E32  A4D8               	btfss	status,2,c
 18709  003E34  D009               	goto	i2l4663
 18710  003E36  0E00               	movlw	0
 18711  003E38  6E2B               	movwf	?i2___fttol,c
 18712  003E3A  0E00               	movlw	0
 18713  003E3C  6E2C               	movwf	?i2___fttol+1,c
 18714  003E3E  0E00               	movlw	0
 18715  003E40  6E2D               	movwf	?i2___fttol+2,c
 18716  003E42  0E00               	movlw	0
 18717  003E44  6E2E               	movwf	?i2___fttol+3,c
 18718  003E46  0012               	return	
 18719  003E48                     i2l4663:
 18720  003E48  0E17               	movlw	23
 18721  003E4A  6E2F               	movwf	??i2___fttol& (0+255),c
 18722  003E4C  C02B  F030         	movff	i2___fttol@f1,??i2___fttol+1
 18723  003E50  C02C  F031         	movff	i2___fttol@f1+1,??i2___fttol+2
 18724  003E54  C02D  F032         	movff	i2___fttol@f1+2,??i2___fttol+3
 18725  003E58  282F               	incf	??i2___fttol,w,c
 18726  003E5A  6E33               	movwf	(??i2___fttol+4)& (0+255),c
 18727  003E5C  D004               	goto	i2u441_40
 18728  003E5E                     i2u441_45:
 18729  003E5E  90D8               	bcf	status,0,c
 18730  003E60  3232               	rrcf	??i2___fttol+3,f,c
 18731  003E62  3231               	rrcf	??i2___fttol+2,f,c
 18732  003E64  3230               	rrcf	??i2___fttol+1,f,c
 18733  003E66                     i2u441_40:
 18734  003E66  2E33               	decfsz	(??i2___fttol+4)& (0+255),f,c
 18735  003E68  D7FA               	goto	i2u441_45
 18736  003E6A  5030               	movf	??i2___fttol+1,w,c
 18737  003E6C  6E34               	movwf	i2___fttol@sign1,c
 18738  003E6E  8E2C               	bsf	i2___fttol@f1+1,7,c
 18739  003E70  0EFF               	movlw	255
 18740  003E72  162B               	andwf	i2___fttol@f1,f,c
 18741  003E74  0EFF               	movlw	255
 18742  003E76  162C               	andwf	i2___fttol@f1+1,f,c
 18743  003E78  0E00               	movlw	0
 18744  003E7A  162D               	andwf	i2___fttol@f1+2,f,c
 18745  003E7C  502B               	movf	i2___fttol@f1,w,c
 18746  003E7E  6E35               	movwf	i2___fttol@lval,c
 18747  003E80  502C               	movf	i2___fttol@f1+1,w,c
 18748  003E82  6E36               	movwf	i2___fttol@lval+1,c
 18749  003E84  502D               	movf	i2___fttol@f1+2,w,c
 18750  003E86  6E37               	movwf	i2___fttol@lval+2,c
 18751  003E88  6A38               	clrf	i2___fttol@lval+3,c
 18752  003E8A  0E8E               	movlw	142
 18753  003E8C  5E39               	subwf	i2___fttol@exp1,f,c
 18754  003E8E  AE39               	btfss	i2___fttol@exp1,7,c
 18755  003E90  D016               	goto	i2l4685
 18756  003E92  5039               	movf	i2___fttol@exp1,w,c
 18757  003E94  0A80               	xorlw	128
 18758  003E96  0F8F               	addlw	143
 18759  003E98  B0D8               	btfsc	status,0,c
 18760  003E9A  D009               	goto	i2l4681
 18761  003E9C  0E00               	movlw	0
 18762  003E9E  6E2B               	movwf	?i2___fttol,c
 18763  003EA0  0E00               	movlw	0
 18764  003EA2  6E2C               	movwf	?i2___fttol+1,c
 18765  003EA4  0E00               	movlw	0
 18766  003EA6  6E2D               	movwf	?i2___fttol+2,c
 18767  003EA8  0E00               	movlw	0
 18768  003EAA  6E2E               	movwf	?i2___fttol+3,c
 18769  003EAC  0012               	return	
 18770  003EAE                     i2l4681:
 18771  003EAE  90D8               	bcf	status,0,c
 18772  003EB0  3238               	rrcf	i2___fttol@lval+3,f,c
 18773  003EB2  3237               	rrcf	i2___fttol@lval+2,f,c
 18774  003EB4  3236               	rrcf	i2___fttol@lval+1,f,c
 18775  003EB6  3235               	rrcf	i2___fttol@lval,f,c
 18776  003EB8  3E39               	incfsz	i2___fttol@exp1,f,c
 18777  003EBA  D7F9               	goto	i2l4681
 18778  003EBC  D015               	goto	i2l4695
 18779  003EBE                     i2l4685:
 18780  003EBE  0E17               	movlw	23
 18781  003EC0  6439               	cpfsgt	i2___fttol@exp1,c
 18782  003EC2  D00F               	goto	i2l4693
 18783  003EC4  0E00               	movlw	0
 18784  003EC6  6E2B               	movwf	?i2___fttol,c
 18785  003EC8  0E00               	movlw	0
 18786  003ECA  6E2C               	movwf	?i2___fttol+1,c
 18787  003ECC  0E00               	movlw	0
 18788  003ECE  6E2D               	movwf	?i2___fttol+2,c
 18789  003ED0  0E00               	movlw	0
 18790  003ED2  6E2E               	movwf	?i2___fttol+3,c
 18791  003ED4  0012               	return	
 18792  003ED6                     i2l4691:
 18793  003ED6  90D8               	bcf	status,0,c
 18794  003ED8  3635               	rlcf	i2___fttol@lval,f,c
 18795  003EDA  3636               	rlcf	i2___fttol@lval+1,f,c
 18796  003EDC  3637               	rlcf	i2___fttol@lval+2,f,c
 18797  003EDE  3638               	rlcf	i2___fttol@lval+3,f,c
 18798  003EE0  0639               	decf	i2___fttol@exp1,f,c
 18799  003EE2                     i2l4693:
 18800  003EE2  5039               	movf	i2___fttol@exp1,w,c
 18801  003EE4  A4D8               	btfss	status,2,c
 18802  003EE6  D7F7               	goto	i2l4691
 18803  003EE8                     i2l4695:
 18804  003EE8  5034               	movf	i2___fttol@sign1,w,c
 18805  003EEA  B4D8               	btfsc	status,2,c
 18806  003EEC  D008               	goto	i2l4699
 18807  003EEE  1E38               	comf	i2___fttol@lval+3,f,c
 18808  003EF0  1E37               	comf	i2___fttol@lval+2,f,c
 18809  003EF2  1E36               	comf	i2___fttol@lval+1,f,c
 18810  003EF4  6C35               	negf	i2___fttol@lval,c
 18811  003EF6  0E00               	movlw	0
 18812  003EF8  2236               	addwfc	i2___fttol@lval+1,f,c
 18813  003EFA  2237               	addwfc	i2___fttol@lval+2,f,c
 18814  003EFC  2238               	addwfc	i2___fttol@lval+3,f,c
 18815  003EFE                     i2l4699:
 18816  003EFE  C035  F02B         	movff	i2___fttol@lval,?i2___fttol
 18817  003F02  C036  F02C         	movff	i2___fttol@lval+1,?i2___fttol+1
 18818  003F06  C037  F02D         	movff	i2___fttol@lval+2,?i2___fttol+2
 18819  003F0A  C038  F02E         	movff	i2___fttol@lval+3,?i2___fttol+3
 18820  003F0E  0012               	return	
 18821  003F10                     __end_ofi2___fttol:
 18822                           	opt stack 0
 18823                           pclatu	equ	0xFFB
 18824                           pclath	equ	0xFFA
 18825                           tblptru	equ	0xFF8
 18826                           tblptrh	equ	0xFF7
 18827                           tblptrl	equ	0xFF6
 18828                           tablat	equ	0xFF5
 18829                           prodh	equ	0xFF4
 18830                           prodl	equ	0xFF3
 18831                           intcon	equ	0xFF2
 18832                           intcon3	equ	0xFF0
 18833                           postinc0	equ	0xFEE
 18834                           fsr0h	equ	0xFEA
 18835                           fsr0l	equ	0xFE9
 18836                           wreg	equ	0xFE8
 18837                           plusw1	equ	0xFE3
 18838                           fsr1h	equ	0xFE2
 18839                           fsr1l	equ	0xFE1
 18840                           indf2	equ	0xFDF
 18841                           postinc2	equ	0xFDE
 18842                           postdec2	equ	0xFDD
 18843                           plusw2	equ	0xFDB
 18844                           fsr2h	equ	0xFDA
 18845                           fsr2l	equ	0xFD9
 18846                           status	equ	0xFD8
 18847                           
 18848 ;; *************** function i2___ftsub *****************
 18849 ;; Defined at:
 18850 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftsub.c"
 18851 ;; Parameters:    Size  Location     Type
 18852 ;;  f1              3   64[COMRAM] float 
 18853 ;;  f2              3   67[COMRAM] float 
 18854 ;; Auto vars:     Size  Location     Type
 18855 ;;		None
 18856 ;; Return value:  Size  Location     Type
 18857 ;;                  3   64[COMRAM] float 
 18858 ;; Registers used:
 18859 ;;		wreg, status,2, status,0, cstack
 18860 ;; Tracked objects:
 18861 ;;		On entry : 0/0
 18862 ;;		On exit  : 0/0
 18863 ;;		Unchanged: 0/0
 18864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18865 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18868 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18869 ;;Total ram usage:        6 bytes
 18870 ;; Hardware stack levels used:    1
 18871 ;; Hardware stack levels required when called:    2
 18872 ;; This function calls:
 18873 ;;		i2___ftadd
 18874 ;; This function is called by:
 18875 ;;		i2_printf
 18876 ;; This function uses a non-reentrant model
 18877 ;;
 18878                           
 18879                           	psect	text75
 18880  004FB0                     __ptext75:
 18881                           	opt stack 0
 18882  004FB0                     i2___ftsub:
 18883                           	opt stack 20
 18884                           
 18885                           ;incstack = 0
 18886  004FB0  5044               	movf	i2___ftsub@f2,w,c
 18887  004FB2  1045               	iorwf	i2___ftsub@f2+1,w,c
 18888  004FB4  1046               	iorwf	i2___ftsub@f2+2,w,c
 18889  004FB6  B4D8               	btfsc	status,2,c
 18890  004FB8  D006               	goto	i2l4653
 18891  004FBA  0E00               	movlw	0
 18892  004FBC  1A44               	xorwf	i2___ftsub@f2,f,c
 18893  004FBE  0E00               	movlw	0
 18894  004FC0  1A45               	xorwf	i2___ftsub@f2+1,f,c
 18895  004FC2  0E80               	movlw	128
 18896  004FC4  1A46               	xorwf	i2___ftsub@f2+2,f,c
 18897  004FC6                     i2l4653:
 18898  004FC6  C041  F035         	movff	i2___ftsub@f1,i2___ftadd@f1
 18899  004FCA  C042  F036         	movff	i2___ftsub@f1+1,i2___ftadd@f1+1
 18900  004FCE  C043  F037         	movff	i2___ftsub@f1+2,i2___ftadd@f1+2
 18901  004FD2  C044  F038         	movff	i2___ftsub@f2,i2___ftadd@f2
 18902  004FD6  C045  F039         	movff	i2___ftsub@f2+1,i2___ftadd@f2+1
 18903  004FDA  C046  F03A         	movff	i2___ftsub@f2+2,i2___ftadd@f2+2
 18904  004FDE  ECD8  F016         	call	i2___ftadd	;wreg free
 18905  004FE2  C035  F041         	movff	?i2___ftadd,?i2___ftsub
 18906  004FE6  C036  F042         	movff	?i2___ftadd+1,?i2___ftsub+1
 18907  004FEA  C037  F043         	movff	?i2___ftadd+2,?i2___ftsub+2
 18908  004FEE  0012               	return	
 18909  004FF0                     __end_ofi2___ftsub:
 18910                           	opt stack 0
 18911                           pclatu	equ	0xFFB
 18912                           pclath	equ	0xFFA
 18913                           tblptru	equ	0xFF8
 18914                           tblptrh	equ	0xFF7
 18915                           tblptrl	equ	0xFF6
 18916                           tablat	equ	0xFF5
 18917                           prodh	equ	0xFF4
 18918                           prodl	equ	0xFF3
 18919                           intcon	equ	0xFF2
 18920                           intcon3	equ	0xFF0
 18921                           postinc0	equ	0xFEE
 18922                           fsr0h	equ	0xFEA
 18923                           fsr0l	equ	0xFE9
 18924                           wreg	equ	0xFE8
 18925                           plusw1	equ	0xFE3
 18926                           fsr1h	equ	0xFE2
 18927                           fsr1l	equ	0xFE1
 18928                           indf2	equ	0xFDF
 18929                           postinc2	equ	0xFDE
 18930                           postdec2	equ	0xFDD
 18931                           plusw2	equ	0xFDB
 18932                           fsr2h	equ	0xFDA
 18933                           fsr2l	equ	0xFD9
 18934                           status	equ	0xFD8
 18935                           
 18936 ;; *************** function i2___ftadd *****************
 18937 ;; Defined at:
 18938 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftadd.c"
 18939 ;; Parameters:    Size  Location     Type
 18940 ;;  f1              3   52[COMRAM] float 
 18941 ;;  f2              3   55[COMRAM] float 
 18942 ;; Auto vars:     Size  Location     Type
 18943 ;;  __ftadd         1   63[COMRAM] unsigned char 
 18944 ;;  __ftadd         1   62[COMRAM] unsigned char 
 18945 ;;  __ftadd         1   61[COMRAM] unsigned char 
 18946 ;; Return value:  Size  Location     Type
 18947 ;;                  3   52[COMRAM] float 
 18948 ;; Registers used:
 18949 ;;		wreg, status,2, status,0, cstack
 18950 ;; Tracked objects:
 18951 ;;		On entry : 0/0
 18952 ;;		On exit  : 0/0
 18953 ;;		Unchanged: 0/0
 18954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18955 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18956 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18957 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18958 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18959 ;;Total ram usage:       12 bytes
 18960 ;; Hardware stack levels used:    1
 18961 ;; Hardware stack levels required when called:    1
 18962 ;; This function calls:
 18963 ;;		i2___ftpack
 18964 ;; This function is called by:
 18965 ;;		i2_printf
 18966 ;;		i2___ftsub
 18967 ;; This function uses a non-reentrant model
 18968 ;;
 18969                           
 18970                           	psect	text76
 18971  002DB0                     __ptext76:
 18972                           	opt stack 0
 18973  002DB0                     i2___ftadd:
 18974                           	opt stack 20
 18975                           
 18976                           ;incstack = 0
 18977  002DB0  C037  F03B         	movff	i2___ftadd@f1+2,??i2___ftadd
 18978  002DB4  6A3C               	clrf	(??i2___ftadd+1)& (0+255),c
 18979  002DB6  6A3D               	clrf	(??i2___ftadd+2)& (0+255),c
 18980  002DB8  3436               	rlcf	i2___ftadd@f1+1,w,c
 18981  002DBA  363B               	rlcf	??i2___ftadd& (0+255),f,c
 18982  002DBC  E301               	bnc	u376_41
 18983  002DBE  803C               	bsf	(??i2___ftadd+1)& (0+255),0,c
 18984  002DC0                     u376_41:
 18985  002DC0  503B               	movf	??i2___ftadd,w,c
 18986  002DC2  6E40               	movwf	i2___ftadd@exp1,c
 18987  002DC4  C03A  F03B         	movff	i2___ftadd@f2+2,??i2___ftadd
 18988  002DC8  6A3C               	clrf	(??i2___ftadd+1)& (0+255),c
 18989  002DCA  6A3D               	clrf	(??i2___ftadd+2)& (0+255),c
 18990  002DCC  3439               	rlcf	i2___ftadd@f2+1,w,c
 18991  002DCE  363B               	rlcf	??i2___ftadd& (0+255),f,c
 18992  002DD0  E301               	bnc	u377_41
 18993  002DD2  803C               	bsf	(??i2___ftadd+1)& (0+255),0,c
 18994  002DD4                     u377_41:
 18995  002DD4  503B               	movf	??i2___ftadd,w,c
 18996  002DD6  6E3F               	movwf	i2___ftadd@exp2,c
 18997  002DD8  5040               	movf	i2___ftadd@exp1,w,c
 18998  002DDA  B4D8               	btfsc	status,2,c
 18999  002DDC  D00B               	goto	i2l861
 19000  002DDE  503F               	movf	i2___ftadd@exp2,w,c
 19001  002DE0  5C40               	subwf	i2___ftadd@exp1,w,c
 19002  002DE2  B0D8               	btfsc	status,0,c
 19003  002DE4  D00E               	goto	i2l4297
 19004  002DE6  5040               	movf	i2___ftadd@exp1,w,c
 19005  002DE8  0800               	sublw	0
 19006  002DEA  243F               	addwf	i2___ftadd@exp2,w,c
 19007  002DEC  6E3B               	movwf	??i2___ftadd& (0+255),c
 19008  002DEE  0E18               	movlw	24
 19009  002DF0  643B               	cpfsgt	??i2___ftadd,c
 19010  002DF2  D007               	goto	i2l4297
 19011  002DF4                     i2l861:
 19012  002DF4  C038  F035         	movff	i2___ftadd@f2,?i2___ftadd
 19013  002DF8  C039  F036         	movff	i2___ftadd@f2+1,?i2___ftadd+1
 19014  002DFC  C03A  F037         	movff	i2___ftadd@f2+2,?i2___ftadd+2
 19015  002E00  0012               	return	
 19016  002E02                     i2l4297:
 19017  002E02  503F               	movf	i2___ftadd@exp2,w,c
 19018  002E04  B4D8               	btfsc	status,2,c
 19019  002E06  D00B               	goto	i2l865
 19020  002E08  5040               	movf	i2___ftadd@exp1,w,c
 19021  002E0A  5C3F               	subwf	i2___ftadd@exp2,w,c
 19022  002E0C  B0D8               	btfsc	status,0,c
 19023  002E0E  D00E               	goto	i2l4303
 19024  002E10  503F               	movf	i2___ftadd@exp2,w,c
 19025  002E12  0800               	sublw	0
 19026  002E14  2440               	addwf	i2___ftadd@exp1,w,c
 19027  002E16  6E3B               	movwf	??i2___ftadd& (0+255),c
 19028  002E18  0E18               	movlw	24
 19029  002E1A  643B               	cpfsgt	??i2___ftadd,c
 19030  002E1C  D007               	goto	i2l4303
 19031  002E1E                     i2l865:
 19032  002E1E  C035  F035         	movff	i2___ftadd@f1,?i2___ftadd
 19033  002E22  C036  F036         	movff	i2___ftadd@f1+1,?i2___ftadd+1
 19034  002E26  C037  F037         	movff	i2___ftadd@f1+2,?i2___ftadd+2
 19035  002E2A  0012               	return	
 19036  002E2C                     i2l4303:
 19037  002E2C  0E06               	movlw	6
 19038  002E2E  6E3E               	movwf	i2___ftadd@sign,c
 19039  002E30  BE37               	btfsc	i2___ftadd@f1+2,7,c
 19040  002E32  8E3E               	bsf	i2___ftadd@sign,7,c
 19041  002E34  BE3A               	btfsc	i2___ftadd@f2+2,7,c
 19042  002E36  8C3E               	bsf	i2___ftadd@sign,6,c
 19043  002E38  8E36               	bsf	i2___ftadd@f1+1,7,c
 19044  002E3A  0EFF               	movlw	255
 19045  002E3C  1635               	andwf	i2___ftadd@f1,f,c
 19046  002E3E  0EFF               	movlw	255
 19047  002E40  1636               	andwf	i2___ftadd@f1+1,f,c
 19048  002E42  0E00               	movlw	0
 19049  002E44  1637               	andwf	i2___ftadd@f1+2,f,c
 19050  002E46  8E39               	bsf	i2___ftadd@f2+1,7,c
 19051  002E48  0EFF               	movlw	255
 19052  002E4A  1638               	andwf	i2___ftadd@f2,f,c
 19053  002E4C  0EFF               	movlw	255
 19054  002E4E  1639               	andwf	i2___ftadd@f2+1,f,c
 19055  002E50  0E00               	movlw	0
 19056  002E52  163A               	andwf	i2___ftadd@f2+2,f,c
 19057  002E54  503F               	movf	i2___ftadd@exp2,w,c
 19058  002E56  5C40               	subwf	i2___ftadd@exp1,w,c
 19059  002E58  B0D8               	btfsc	status,0,c
 19060  002E5A  D01B               	goto	i2l4329
 19061  002E5C                     i2l4319:
 19062  002E5C  90D8               	bcf	status,0,c
 19063  002E5E  3638               	rlcf	i2___ftadd@f2,f,c
 19064  002E60  3639               	rlcf	i2___ftadd@f2+1,f,c
 19065  002E62  363A               	rlcf	i2___ftadd@f2+2,f,c
 19066  002E64  063F               	decf	i2___ftadd@exp2,f,c
 19067  002E66  5040               	movf	i2___ftadd@exp1,w,c
 19068  002E68  183F               	xorwf	i2___ftadd@exp2,w,c
 19069  002E6A  B4D8               	btfsc	status,2,c
 19070  002E6C  D00D               	goto	i2l4327
 19071  002E6E  063E               	decf	i2___ftadd@sign,f,c
 19072  002E70  C03E  F03B         	movff	i2___ftadd@sign,??i2___ftadd
 19073  002E74  0E07               	movlw	7
 19074  002E76  163B               	andwf	??i2___ftadd,f,c
 19075  002E78  B4D8               	btfsc	status,2,c
 19076  002E7A  D006               	goto	i2l4327
 19077  002E7C  D7EF               	goto	i2l4319
 19078  002E7E                     i2l4325:
 19079  002E7E  90D8               	bcf	status,0,c
 19080  002E80  3237               	rrcf	i2___ftadd@f1+2,f,c
 19081  002E82  3236               	rrcf	i2___ftadd@f1+1,f,c
 19082  002E84  3235               	rrcf	i2___ftadd@f1,f,c
 19083  002E86  2A40               	incf	i2___ftadd@exp1,f,c
 19084  002E88                     i2l4327:
 19085  002E88  503F               	movf	i2___ftadd@exp2,w,c
 19086  002E8A  1840               	xorwf	i2___ftadd@exp1,w,c
 19087  002E8C  B4D8               	btfsc	status,2,c
 19088  002E8E  D01F               	goto	i2l876
 19089  002E90  D7F6               	goto	i2l4325
 19090  002E92                     i2l4329:
 19091  002E92  5040               	movf	i2___ftadd@exp1,w,c
 19092  002E94  5C3F               	subwf	i2___ftadd@exp2,w,c
 19093  002E96  B0D8               	btfsc	status,0,c
 19094  002E98  D01A               	goto	i2l876
 19095  002E9A                     i2l4331:
 19096  002E9A  90D8               	bcf	status,0,c
 19097  002E9C  3635               	rlcf	i2___ftadd@f1,f,c
 19098  002E9E  3636               	rlcf	i2___ftadd@f1+1,f,c
 19099  002EA0  3637               	rlcf	i2___ftadd@f1+2,f,c
 19100  002EA2  0640               	decf	i2___ftadd@exp1,f,c
 19101  002EA4  5040               	movf	i2___ftadd@exp1,w,c
 19102  002EA6  183F               	xorwf	i2___ftadd@exp2,w,c
 19103  002EA8  B4D8               	btfsc	status,2,c
 19104  002EAA  D00D               	goto	i2l4339
 19105  002EAC  063E               	decf	i2___ftadd@sign,f,c
 19106  002EAE  C03E  F03B         	movff	i2___ftadd@sign,??i2___ftadd
 19107  002EB2  0E07               	movlw	7
 19108  002EB4  163B               	andwf	??i2___ftadd,f,c
 19109  002EB6  B4D8               	btfsc	status,2,c
 19110  002EB8  D006               	goto	i2l4339
 19111  002EBA  D7EF               	goto	i2l4331
 19112  002EBC                     i2l4337:
 19113  002EBC  90D8               	bcf	status,0,c
 19114  002EBE  323A               	rrcf	i2___ftadd@f2+2,f,c
 19115  002EC0  3239               	rrcf	i2___ftadd@f2+1,f,c
 19116  002EC2  3238               	rrcf	i2___ftadd@f2,f,c
 19117  002EC4  2A3F               	incf	i2___ftadd@exp2,f,c
 19118  002EC6                     i2l4339:
 19119  002EC6  503F               	movf	i2___ftadd@exp2,w,c
 19120  002EC8  1840               	xorwf	i2___ftadd@exp1,w,c
 19121  002ECA  A4D8               	btfss	status,2,c
 19122  002ECC  D7F7               	goto	i2l4337
 19123  002ECE                     i2l876:
 19124  002ECE  AE3E               	btfss	i2___ftadd@sign,7,c
 19125  002ED0  D00C               	goto	i2l885
 19126  002ED2  0EFF               	movlw	255
 19127  002ED4  1A35               	xorwf	i2___ftadd@f1,f,c
 19128  002ED6  0EFF               	movlw	255
 19129  002ED8  1A36               	xorwf	i2___ftadd@f1+1,f,c
 19130  002EDA  0EFF               	movlw	255
 19131  002EDC  1A37               	xorwf	i2___ftadd@f1+2,f,c
 19132  002EDE  0E01               	movlw	1
 19133  002EE0  2635               	addwf	i2___ftadd@f1,f,c
 19134  002EE2  0E00               	movlw	0
 19135  002EE4  2236               	addwfc	i2___ftadd@f1+1,f,c
 19136  002EE6  0E00               	movlw	0
 19137  002EE8  2237               	addwfc	i2___ftadd@f1+2,f,c
 19138  002EEA                     i2l885:
 19139  002EEA  AC3E               	btfss	i2___ftadd@sign,6,c
 19140  002EEC  D00C               	goto	i2l4345
 19141  002EEE  0EFF               	movlw	255
 19142  002EF0  1A38               	xorwf	i2___ftadd@f2,f,c
 19143  002EF2  0EFF               	movlw	255
 19144  002EF4  1A39               	xorwf	i2___ftadd@f2+1,f,c
 19145  002EF6  0EFF               	movlw	255
 19146  002EF8  1A3A               	xorwf	i2___ftadd@f2+2,f,c
 19147  002EFA  0E01               	movlw	1
 19148  002EFC  2638               	addwf	i2___ftadd@f2,f,c
 19149  002EFE  0E00               	movlw	0
 19150  002F00  2239               	addwfc	i2___ftadd@f2+1,f,c
 19151  002F02  0E00               	movlw	0
 19152  002F04  223A               	addwfc	i2___ftadd@f2+2,f,c
 19153  002F06                     i2l4345:
 19154  002F06  0E00               	movlw	0
 19155  002F08  6E3E               	movwf	i2___ftadd@sign,c
 19156  002F0A  5035               	movf	i2___ftadd@f1,w,c
 19157  002F0C  2638               	addwf	i2___ftadd@f2,f,c
 19158  002F0E  5036               	movf	i2___ftadd@f1+1,w,c
 19159  002F10  2239               	addwfc	i2___ftadd@f2+1,f,c
 19160  002F12  5037               	movf	i2___ftadd@f1+2,w,c
 19161  002F14  223A               	addwfc	i2___ftadd@f2+2,f,c
 19162  002F16  AE3A               	btfss	i2___ftadd@f2+2,7,c
 19163  002F18  D00E               	goto	i2l4355
 19164  002F1A  0EFF               	movlw	255
 19165  002F1C  1A38               	xorwf	i2___ftadd@f2,f,c
 19166  002F1E  0EFF               	movlw	255
 19167  002F20  1A39               	xorwf	i2___ftadd@f2+1,f,c
 19168  002F22  0EFF               	movlw	255
 19169  002F24  1A3A               	xorwf	i2___ftadd@f2+2,f,c
 19170  002F26  0E01               	movlw	1
 19171  002F28  2638               	addwf	i2___ftadd@f2,f,c
 19172  002F2A  0E00               	movlw	0
 19173  002F2C  2239               	addwfc	i2___ftadd@f2+1,f,c
 19174  002F2E  0E00               	movlw	0
 19175  002F30  223A               	addwfc	i2___ftadd@f2+2,f,c
 19176  002F32  0E01               	movlw	1
 19177  002F34  6E3E               	movwf	i2___ftadd@sign,c
 19178  002F36                     i2l4355:
 19179  002F36  C038  F001         	movff	i2___ftadd@f2,i2___ftpack@arg
 19180  002F3A  C039  F002         	movff	i2___ftadd@f2+1,i2___ftpack@arg+1
 19181  002F3E  C03A  F003         	movff	i2___ftadd@f2+2,i2___ftpack@arg+2
 19182  002F42  C040  F004         	movff	i2___ftadd@exp1,i2___ftpack@exp
 19183  002F46  C03E  F005         	movff	i2___ftadd@sign,i2___ftpack@sign
 19184  002F4A  ECB9  F022         	call	i2___ftpack	;wreg free
 19185  002F4E  C001  F035         	movff	?i2___ftpack,?i2___ftadd
 19186  002F52  C002  F036         	movff	?i2___ftpack+1,?i2___ftadd+1
 19187  002F56  C003  F037         	movff	?i2___ftpack+2,?i2___ftadd+2
 19188  002F5A  0012               	return	
 19189  002F5C                     __end_ofi2___ftadd:
 19190                           	opt stack 0
 19191                           pclatu	equ	0xFFB
 19192                           pclath	equ	0xFFA
 19193                           tblptru	equ	0xFF8
 19194                           tblptrh	equ	0xFF7
 19195                           tblptrl	equ	0xFF6
 19196                           tablat	equ	0xFF5
 19197                           prodh	equ	0xFF4
 19198                           prodl	equ	0xFF3
 19199                           intcon	equ	0xFF2
 19200                           intcon3	equ	0xFF0
 19201                           postinc0	equ	0xFEE
 19202                           fsr0h	equ	0xFEA
 19203                           fsr0l	equ	0xFE9
 19204                           wreg	equ	0xFE8
 19205                           plusw1	equ	0xFE3
 19206                           fsr1h	equ	0xFE2
 19207                           fsr1l	equ	0xFE1
 19208                           indf2	equ	0xFDF
 19209                           postinc2	equ	0xFDE
 19210                           postdec2	equ	0xFDD
 19211                           plusw2	equ	0xFDB
 19212                           fsr2h	equ	0xFDA
 19213                           fsr2l	equ	0xFD9
 19214                           status	equ	0xFD8
 19215                           
 19216 ;; *************** function i2___ftpack *****************
 19217 ;; Defined at:
 19218 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
 19219 ;; Parameters:    Size  Location     Type
 19220 ;;  arg             3    0[COMRAM] unsigned um
 19221 ;;  exp             1    3[COMRAM] unsigned char 
 19222 ;;  sign            1    4[COMRAM] unsigned char 
 19223 ;; Auto vars:     Size  Location     Type
 19224 ;;		None
 19225 ;; Return value:  Size  Location     Type
 19226 ;;                  3    0[COMRAM] float 
 19227 ;; Registers used:
 19228 ;;		wreg, status,2, status,0
 19229 ;; Tracked objects:
 19230 ;;		On entry : 0/0
 19231 ;;		On exit  : 0/0
 19232 ;;		Unchanged: 0/0
 19233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19234 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19235 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19236 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19237 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19238 ;;Total ram usage:        8 bytes
 19239 ;; Hardware stack levels used:    1
 19240 ;; This function calls:
 19241 ;;		Nothing
 19242 ;; This function is called by:
 19243 ;;		___awtoft
 19244 ;;		___ftdiv
 19245 ;;		i2___ftadd
 19246 ;;		i2___ftmul
 19247 ;;		i2___lltoft
 19248 ;; This function uses a non-reentrant model
 19249 ;;
 19250                           
 19251                           	psect	text77
 19252  004572                     __ptext77:
 19253                           	opt stack 0
 19254  004572                     i2___ftpack:
 19255                           	opt stack 20
 19256                           
 19257                           ;incstack = 0
 19258  004572  5004               	movf	i2___ftpack@exp,w,c
 19259  004574  B4D8               	btfsc	status,2,c
 19260  004576  D005               	goto	i2l4153
 19261  004578  5001               	movf	i2___ftpack@arg,w,c
 19262  00457A  1002               	iorwf	i2___ftpack@arg+1,w,c
 19263  00457C  1003               	iorwf	i2___ftpack@arg+2,w,c
 19264  00457E  A4D8               	btfss	status,2,c
 19265  004580  D00C               	goto	i2l4159
 19266  004582                     i2l4153:
 19267  004582  0E00               	movlw	0
 19268  004584  6E01               	movwf	?i2___ftpack,c
 19269  004586  0E00               	movlw	0
 19270  004588  6E02               	movwf	?i2___ftpack+1,c
 19271  00458A  0E00               	movlw	0
 19272  00458C  6E03               	movwf	?i2___ftpack+2,c
 19273  00458E  0012               	return	
 19274  004590                     i2l4157:
 19275  004590  2A04               	incf	i2___ftpack@exp,f,c
 19276  004592  90D8               	bcf	status,0,c
 19277  004594  3203               	rrcf	i2___ftpack@arg+2,f,c
 19278  004596  3202               	rrcf	i2___ftpack@arg+1,f,c
 19279  004598  3201               	rrcf	i2___ftpack@arg,f,c
 19280  00459A                     i2l4159:
 19281  00459A  0E00               	movlw	0
 19282  00459C  1401               	andwf	i2___ftpack@arg,w,c
 19283  00459E  6E06               	movwf	??i2___ftpack& (0+255),c
 19284  0045A0  0E00               	movlw	0
 19285  0045A2  1402               	andwf	i2___ftpack@arg+1,w,c
 19286  0045A4  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 19287  0045A6  0EFE               	movlw	254
 19288  0045A8  1403               	andwf	i2___ftpack@arg+2,w,c
 19289  0045AA  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 19290  0045AC  5006               	movf	??i2___ftpack,w,c
 19291  0045AE  1007               	iorwf	??i2___ftpack+1,w,c
 19292  0045B0  1008               	iorwf	??i2___ftpack+2,w,c
 19293  0045B2  B4D8               	btfsc	status,2,c
 19294  0045B4  D00C               	goto	i2l4165
 19295  0045B6  D7EC               	goto	i2l4157
 19296  0045B8                     i2l4161:
 19297  0045B8  2A04               	incf	i2___ftpack@exp,f,c
 19298  0045BA  0E01               	movlw	1
 19299  0045BC  2601               	addwf	i2___ftpack@arg,f,c
 19300  0045BE  0E00               	movlw	0
 19301  0045C0  2202               	addwfc	i2___ftpack@arg+1,f,c
 19302  0045C2  0E00               	movlw	0
 19303  0045C4  2203               	addwfc	i2___ftpack@arg+2,f,c
 19304  0045C6  90D8               	bcf	status,0,c
 19305  0045C8  3203               	rrcf	i2___ftpack@arg+2,f,c
 19306  0045CA  3202               	rrcf	i2___ftpack@arg+1,f,c
 19307  0045CC  3201               	rrcf	i2___ftpack@arg,f,c
 19308  0045CE                     i2l4165:
 19309  0045CE  0E00               	movlw	0
 19310  0045D0  1401               	andwf	i2___ftpack@arg,w,c
 19311  0045D2  6E06               	movwf	??i2___ftpack& (0+255),c
 19312  0045D4  0E00               	movlw	0
 19313  0045D6  1402               	andwf	i2___ftpack@arg+1,w,c
 19314  0045D8  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 19315  0045DA  0EFF               	movlw	255
 19316  0045DC  1403               	andwf	i2___ftpack@arg+2,w,c
 19317  0045DE  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 19318  0045E0  5006               	movf	??i2___ftpack,w,c
 19319  0045E2  1007               	iorwf	??i2___ftpack+1,w,c
 19320  0045E4  1008               	iorwf	??i2___ftpack+2,w,c
 19321  0045E6  B4D8               	btfsc	status,2,c
 19322  0045E8  D006               	goto	i2l4169
 19323  0045EA  D7E6               	goto	i2l4161
 19324  0045EC                     i2l4167:
 19325  0045EC  0604               	decf	i2___ftpack@exp,f,c
 19326  0045EE  90D8               	bcf	status,0,c
 19327  0045F0  3601               	rlcf	i2___ftpack@arg,f,c
 19328  0045F2  3602               	rlcf	i2___ftpack@arg+1,f,c
 19329  0045F4  3603               	rlcf	i2___ftpack@arg+2,f,c
 19330  0045F6                     i2l4169:
 19331  0045F6  BE02               	btfsc	i2___ftpack@arg+1,7,c
 19332  0045F8  D003               	goto	i2l838
 19333  0045FA  0E02               	movlw	2
 19334  0045FC  6004               	cpfslt	i2___ftpack@exp,c
 19335  0045FE  D7F6               	goto	i2l4167
 19336  004600                     i2l838:
 19337  004600  A004               	btfss	i2___ftpack@exp,0,c
 19338  004602  9E02               	bcf	i2___ftpack@arg+1,7,c
 19339  004604  90D8               	bcf	status,0,c
 19340  004606  3204               	rrcf	i2___ftpack@exp,f,c
 19341  004608  5004               	movf	i2___ftpack@exp,w,c
 19342  00460A  1203               	iorwf	i2___ftpack@arg+2,f,c
 19343  00460C  5005               	movf	i2___ftpack@sign,w,c
 19344  00460E  A4D8               	btfss	status,2,c
 19345  004610  8E03               	bsf	i2___ftpack@arg+2,7,c
 19346  004612  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 19347  004616  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 19348  00461A  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 19349  00461E  0012               	return	
 19350  004620                     __end_ofi2___ftpack:
 19351                           	opt stack 0
 19352                           pclatu	equ	0xFFB
 19353                           pclath	equ	0xFFA
 19354                           tblptru	equ	0xFF8
 19355                           tblptrh	equ	0xFF7
 19356                           tblptrl	equ	0xFF6
 19357                           tablat	equ	0xFF5
 19358                           prodh	equ	0xFF4
 19359                           prodl	equ	0xFF3
 19360                           intcon	equ	0xFF2
 19361                           intcon3	equ	0xFF0
 19362                           postinc0	equ	0xFEE
 19363                           fsr0h	equ	0xFEA
 19364                           fsr0l	equ	0xFE9
 19365                           wreg	equ	0xFE8
 19366                           plusw1	equ	0xFE3
 19367                           fsr1h	equ	0xFE2
 19368                           fsr1l	equ	0xFE1
 19369                           indf2	equ	0xFDF
 19370                           postinc2	equ	0xFDE
 19371                           postdec2	equ	0xFDD
 19372                           plusw2	equ	0xFDB
 19373                           fsr2h	equ	0xFDA
 19374                           fsr2l	equ	0xFD9
 19375                           status	equ	0xFD8
 19376                           
 19377 ;; *************** function i2___ftneg *****************
 19378 ;; Defined at:
 19379 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftneg.c"
 19380 ;; Parameters:    Size  Location     Type
 19381 ;;  f1              3    0[COMRAM] float 
 19382 ;; Auto vars:     Size  Location     Type
 19383 ;;		None
 19384 ;; Return value:  Size  Location     Type
 19385 ;;                  3    0[COMRAM] float 
 19386 ;; Registers used:
 19387 ;;		wreg, status,2, status,0
 19388 ;; Tracked objects:
 19389 ;;		On entry : 0/0
 19390 ;;		On exit  : 0/0
 19391 ;;		Unchanged: 0/0
 19392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19393 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19396 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19397 ;;Total ram usage:        3 bytes
 19398 ;; Hardware stack levels used:    1
 19399 ;; This function calls:
 19400 ;;		Nothing
 19401 ;; This function is called by:
 19402 ;;		i2_printf
 19403 ;; This function uses a non-reentrant model
 19404 ;;
 19405                           
 19406                           	psect	text78
 19407  0051E0                     __ptext78:
 19408                           	opt stack 0
 19409  0051E0                     i2___ftneg:
 19410                           	opt stack 22
 19411                           
 19412                           ;incstack = 0
 19413  0051E0  5001               	movf	i2___ftneg@f1,w,c
 19414  0051E2  1002               	iorwf	i2___ftneg@f1+1,w,c
 19415  0051E4  1003               	iorwf	i2___ftneg@f1+2,w,c
 19416  0051E6  B4D8               	btfsc	status,2,c
 19417  0051E8  D006               	goto	i2l935
 19418  0051EA  0E00               	movlw	0
 19419  0051EC  1A01               	xorwf	i2___ftneg@f1,f,c
 19420  0051EE  0E00               	movlw	0
 19421  0051F0  1A02               	xorwf	i2___ftneg@f1+1,f,c
 19422  0051F2  0E80               	movlw	128
 19423  0051F4  1A03               	xorwf	i2___ftneg@f1+2,f,c
 19424  0051F6                     i2l935:
 19425  0051F6  C001  F001         	movff	i2___ftneg@f1,?i2___ftneg
 19426  0051FA  C002  F002         	movff	i2___ftneg@f1+1,?i2___ftneg+1
 19427  0051FE  C003  F003         	movff	i2___ftneg@f1+2,?i2___ftneg+2
 19428  005202  0012               	return		;funcret
 19429  005204                     __end_ofi2___ftneg:
 19430                           	opt stack 0
 19431                           pclatu	equ	0xFFB
 19432                           pclath	equ	0xFFA
 19433                           tblptru	equ	0xFF8
 19434                           tblptrh	equ	0xFF7
 19435                           tblptrl	equ	0xFF6
 19436                           tablat	equ	0xFF5
 19437                           prodh	equ	0xFF4
 19438                           prodl	equ	0xFF3
 19439                           intcon	equ	0xFF2
 19440                           intcon3	equ	0xFF0
 19441                           postinc0	equ	0xFEE
 19442                           fsr0h	equ	0xFEA
 19443                           fsr0l	equ	0xFE9
 19444                           wreg	equ	0xFE8
 19445                           plusw1	equ	0xFE3
 19446                           fsr1h	equ	0xFE2
 19447                           fsr1l	equ	0xFE1
 19448                           indf2	equ	0xFDF
 19449                           postinc2	equ	0xFDE
 19450                           postdec2	equ	0xFDD
 19451                           plusw2	equ	0xFDB
 19452                           fsr2h	equ	0xFDA
 19453                           fsr2l	equ	0xFD9
 19454                           status	equ	0xFD8
 19455                           
 19456 ;; *************** function i2___ftge *****************
 19457 ;; Defined at:
 19458 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
 19459 ;; Parameters:    Size  Location     Type
 19460 ;;  ff1             3   42[COMRAM] float 
 19461 ;;  ff2             3   45[COMRAM] float 
 19462 ;; Auto vars:     Size  Location     Type
 19463 ;;		None
 19464 ;; Return value:  Size  Location     Type
 19465 ;;		None               void
 19466 ;; Registers used:
 19467 ;;		wreg, status,2, status,0
 19468 ;; Tracked objects:
 19469 ;;		On entry : 0/0
 19470 ;;		On exit  : 0/0
 19471 ;;		Unchanged: 0/0
 19472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19473 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19475 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19476 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19477 ;;Total ram usage:        9 bytes
 19478 ;; Hardware stack levels used:    1
 19479 ;; This function calls:
 19480 ;;		Nothing
 19481 ;; This function is called by:
 19482 ;;		_checkV
 19483 ;;		i2_printf
 19484 ;; This function uses a non-reentrant model
 19485 ;;
 19486                           
 19487                           	psect	text79
 19488  00475C                     __ptext79:
 19489                           	opt stack 0
 19490  00475C                     i2___ftge:
 19491                           	opt stack 22
 19492                           
 19493                           ;incstack = 0
 19494  00475C  AE2D               	btfss	i2___ftge@ff1+2,7,c
 19495  00475E  D016               	goto	i2l4631
 19496  004760  C02B  F031         	movff	i2___ftge@ff1,??i2___ftge
 19497  004764  C02C  F032         	movff	i2___ftge@ff1+1,??i2___ftge+1
 19498  004768  C02D  F033         	movff	i2___ftge@ff1+2,??i2___ftge+2
 19499  00476C  1E31               	comf	??i2___ftge,f,c
 19500  00476E  1E32               	comf	??i2___ftge+1,f,c
 19501  004770  1E33               	comf	??i2___ftge+2,f,c
 19502  004772  2A31               	incf	??i2___ftge,f,c
 19503  004774  0E00               	movlw	0
 19504  004776  2232               	addwfc	??i2___ftge+1,f,c
 19505  004778  2233               	addwfc	??i2___ftge+2,f,c
 19506  00477A  0E00               	movlw	0
 19507  00477C  2431               	addwf	??i2___ftge,w,c
 19508  00477E  6E2B               	movwf	i2___ftge@ff1,c
 19509  004780  0E00               	movlw	0
 19510  004782  2032               	addwfc	??i2___ftge+1,w,c
 19511  004784  6E2C               	movwf	i2___ftge@ff1+1,c
 19512  004786  0E80               	movlw	128
 19513  004788  2033               	addwfc	??i2___ftge+2,w,c
 19514  00478A  6E2D               	movwf	i2___ftge@ff1+2,c
 19515  00478C                     i2l4631:
 19516  00478C  AE30               	btfss	i2___ftge@ff2+2,7,c
 19517  00478E  D016               	goto	i2l4635
 19518  004790  C02E  F031         	movff	i2___ftge@ff2,??i2___ftge
 19519  004794  C02F  F032         	movff	i2___ftge@ff2+1,??i2___ftge+1
 19520  004798  C030  F033         	movff	i2___ftge@ff2+2,??i2___ftge+2
 19521  00479C  1E31               	comf	??i2___ftge,f,c
 19522  00479E  1E32               	comf	??i2___ftge+1,f,c
 19523  0047A0  1E33               	comf	??i2___ftge+2,f,c
 19524  0047A2  2A31               	incf	??i2___ftge,f,c
 19525  0047A4  0E00               	movlw	0
 19526  0047A6  2232               	addwfc	??i2___ftge+1,f,c
 19527  0047A8  2233               	addwfc	??i2___ftge+2,f,c
 19528  0047AA  0E00               	movlw	0
 19529  0047AC  2431               	addwf	??i2___ftge,w,c
 19530  0047AE  6E2E               	movwf	i2___ftge@ff2,c
 19531  0047B0  0E00               	movlw	0
 19532  0047B2  2032               	addwfc	??i2___ftge+1,w,c
 19533  0047B4  6E2F               	movwf	i2___ftge@ff2+1,c
 19534  0047B6  0E80               	movlw	128
 19535  0047B8  2033               	addwfc	??i2___ftge+2,w,c
 19536  0047BA  6E30               	movwf	i2___ftge@ff2+2,c
 19537  0047BC                     i2l4635:
 19538  0047BC  0E00               	movlw	0
 19539  0047BE  1A2B               	xorwf	i2___ftge@ff1,f,c
 19540  0047C0  0E00               	movlw	0
 19541  0047C2  1A2C               	xorwf	i2___ftge@ff1+1,f,c
 19542  0047C4  0E80               	movlw	128
 19543  0047C6  1A2D               	xorwf	i2___ftge@ff1+2,f,c
 19544  0047C8  0E00               	movlw	0
 19545  0047CA  1A2E               	xorwf	i2___ftge@ff2,f,c
 19546  0047CC  0E00               	movlw	0
 19547  0047CE  1A2F               	xorwf	i2___ftge@ff2+1,f,c
 19548  0047D0  0E80               	movlw	128
 19549  0047D2  1A30               	xorwf	i2___ftge@ff2+2,f,c
 19550  0047D4  502E               	movf	i2___ftge@ff2,w,c
 19551  0047D6  5C2B               	subwf	i2___ftge@ff1,w,c
 19552  0047D8  502F               	movf	i2___ftge@ff2+1,w,c
 19553  0047DA  582C               	subwfb	i2___ftge@ff1+1,w,c
 19554  0047DC  5030               	movf	i2___ftge@ff2+2,w,c
 19555  0047DE  582D               	subwfb	i2___ftge@ff1+2,w,c
 19556  0047E0  B0D8               	btfsc	status,0,c
 19557  0047E2  D002               	goto	i2l4641
 19558  0047E4  90D8               	bcf	status,0,c
 19559  0047E6  0012               	return	
 19560  0047E8                     i2l4641:
 19561  0047E8  80D8               	bsf	status,0,c
 19562  0047EA  0012               	return	
 19563  0047EC                     __end_ofi2___ftge:
 19564                           	opt stack 0
 19565                           pclatu	equ	0xFFB
 19566                           pclath	equ	0xFFA
 19567                           tblptru	equ	0xFF8
 19568                           tblptrh	equ	0xFF7
 19569                           tblptrl	equ	0xFF6
 19570                           tablat	equ	0xFF5
 19571                           prodh	equ	0xFF4
 19572                           prodl	equ	0xFF3
 19573                           intcon	equ	0xFF2
 19574                           intcon3	equ	0xFF0
 19575                           postinc0	equ	0xFEE
 19576                           fsr0h	equ	0xFEA
 19577                           fsr0l	equ	0xFE9
 19578                           wreg	equ	0xFE8
 19579                           plusw1	equ	0xFE3
 19580                           fsr1h	equ	0xFE2
 19581                           fsr1l	equ	0xFE1
 19582                           indf2	equ	0xFDF
 19583                           postinc2	equ	0xFDE
 19584                           postdec2	equ	0xFDD
 19585                           plusw2	equ	0xFDB
 19586                           fsr2h	equ	0xFDA
 19587                           fsr2l	equ	0xFD9
 19588                           status	equ	0xFD8
 19589                           
 19590 ;; *************** function i2___lcd_newline *****************
 19591 ;; Defined at:
 19592 ;;		line 53 in file "lcd.c"
 19593 ;; Parameters:    Size  Location     Type
 19594 ;;		None
 19595 ;; Auto vars:     Size  Location     Type
 19596 ;;		None
 19597 ;; Return value:  Size  Location     Type
 19598 ;;                  1    wreg      void 
 19599 ;; Registers used:
 19600 ;;		wreg, status,2, status,0, cstack
 19601 ;; Tracked objects:
 19602 ;;		On entry : 0/0
 19603 ;;		On exit  : 0/0
 19604 ;;		Unchanged: 0/0
 19605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19609 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19610 ;;Total ram usage:        0 bytes
 19611 ;; Hardware stack levels used:    1
 19612 ;; Hardware stack levels required when called:    2
 19613 ;; This function calls:
 19614 ;;		i2_lcdInst
 19615 ;; This function is called by:
 19616 ;;		_simulate
 19617 ;;		_showInfo
 19618 ;;		_CCW90
 19619 ;;		_checkV
 19620 ;;		_checkAA
 19621 ;;		_checkC
 19622 ;;		_check9
 19623 ;;		_PermLog
 19624 ;; This function uses a non-reentrant model
 19625 ;;
 19626                           
 19627                           	psect	text80
 19628  005360                     __ptext80:
 19629                           	opt stack 0
 19630  005360                     i2___lcd_newline:
 19631                           	opt stack 21
 19632                           
 19633                           ;lcd.c: 54: lcdInst(0b11000000);
 19634                           
 19635                           ;incstack = 0
 19636  005360  0EC0               	movlw	192
 19637  005362  EC8C  F029         	call	i2_lcdInst
 19638  005366  0012               	return		;funcret
 19639  005368                     __end_ofi2___lcd_newline:
 19640                           	opt stack 0
 19641                           pclatu	equ	0xFFB
 19642                           pclath	equ	0xFFA
 19643                           tblptru	equ	0xFF8
 19644                           tblptrh	equ	0xFF7
 19645                           tblptrl	equ	0xFF6
 19646                           tablat	equ	0xFF5
 19647                           prodh	equ	0xFF4
 19648                           prodl	equ	0xFF3
 19649                           intcon	equ	0xFF2
 19650                           intcon3	equ	0xFF0
 19651                           postinc0	equ	0xFEE
 19652                           fsr0h	equ	0xFEA
 19653                           fsr0l	equ	0xFE9
 19654                           wreg	equ	0xFE8
 19655                           plusw1	equ	0xFE3
 19656                           fsr1h	equ	0xFE2
 19657                           fsr1l	equ	0xFE1
 19658                           indf2	equ	0xFDF
 19659                           postinc2	equ	0xFDE
 19660                           postdec2	equ	0xFDD
 19661                           plusw2	equ	0xFDB
 19662                           fsr2h	equ	0xFDA
 19663                           fsr2l	equ	0xFD9
 19664                           status	equ	0xFD8
 19665                           
 19666 ;; *************** function i2_lcdInst *****************
 19667 ;; Defined at:
 19668 ;;		line 20 in file "lcd.c"
 19669 ;; Parameters:    Size  Location     Type
 19670 ;;  data            1    wreg     unsigned char 
 19671 ;; Auto vars:     Size  Location     Type
 19672 ;;  data            1    2[COMRAM] unsigned char 
 19673 ;; Return value:  Size  Location     Type
 19674 ;;                  1    wreg      void 
 19675 ;; Registers used:
 19676 ;;		wreg, status,2, status,0, cstack
 19677 ;; Tracked objects:
 19678 ;;		On entry : 0/0
 19679 ;;		On exit  : 0/0
 19680 ;;		Unchanged: 0/0
 19681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19683 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19685 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19686 ;;Total ram usage:        1 bytes
 19687 ;; Hardware stack levels used:    1
 19688 ;; Hardware stack levels required when called:    1
 19689 ;; This function calls:
 19690 ;;		i2_lcdNibble
 19691 ;; This function is called by:
 19692 ;;		_simulate
 19693 ;;		_showInfo
 19694 ;;		_CW90
 19695 ;;		_stopMoving
 19696 ;;		_checkAA
 19697 ;;		_checkC
 19698 ;;		_check9
 19699 ;;		_PermLog
 19700 ;;		i2___lcd_newline
 19701 ;; This function uses a non-reentrant model
 19702 ;;
 19703                           
 19704                           	psect	text81
 19705  005318                     __ptext81:
 19706                           	opt stack 0
 19707  005318                     i2_lcdInst:
 19708                           	opt stack 22
 19709                           
 19710                           ;incstack = 0
 19711                           ;i2lcdInst@data stored from wreg
 19712  005318  6E03               	movwf	i2lcdInst@data,c
 19713                           
 19714                           ;lcd.c: 21: LATDbits.LATD2 = 0;
 19715  00531A  948C               	bcf	3980,2,c	;volatile
 19716                           
 19717                           ;lcd.c: 22: lcdNibble(data);
 19718  00531C  5003               	movf	i2lcdInst@data,w,c
 19719  00531E  ECF6  F026         	call	i2_lcdNibble
 19720  005322  0012               	return		;funcret
 19721  005324                     __end_ofi2_lcdInst:
 19722                           	opt stack 0
 19723                           pclatu	equ	0xFFB
 19724                           pclath	equ	0xFFA
 19725                           tblptru	equ	0xFF8
 19726                           tblptrh	equ	0xFF7
 19727                           tblptrl	equ	0xFF6
 19728                           tablat	equ	0xFF5
 19729                           prodh	equ	0xFF4
 19730                           prodl	equ	0xFF3
 19731                           intcon	equ	0xFF2
 19732                           intcon3	equ	0xFF0
 19733                           postinc0	equ	0xFEE
 19734                           fsr0h	equ	0xFEA
 19735                           fsr0l	equ	0xFE9
 19736                           wreg	equ	0xFE8
 19737                           plusw1	equ	0xFE3
 19738                           fsr1h	equ	0xFE2
 19739                           fsr1l	equ	0xFE1
 19740                           indf2	equ	0xFDF
 19741                           postinc2	equ	0xFDE
 19742                           postdec2	equ	0xFDD
 19743                           plusw2	equ	0xFDB
 19744                           fsr2h	equ	0xFDA
 19745                           fsr2l	equ	0xFD9
 19746                           status	equ	0xFD8
 19747                           
 19748 ;; *************** function i2_lcdNibble *****************
 19749 ;; Defined at:
 19750 ;;		line 30 in file "lcd.c"
 19751 ;; Parameters:    Size  Location     Type
 19752 ;;  data            1    wreg     unsigned char 
 19753 ;; Auto vars:     Size  Location     Type
 19754 ;;  data            1    1[COMRAM] unsigned char 
 19755 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 19756 ;; Return value:  Size  Location     Type
 19757 ;;                  1    wreg      void 
 19758 ;; Registers used:
 19759 ;;		wreg, status,2, status,0
 19760 ;; Tracked objects:
 19761 ;;		On entry : 0/0
 19762 ;;		On exit  : 0/0
 19763 ;;		Unchanged: 0/0
 19764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19766 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19768 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19769 ;;Total ram usage:        2 bytes
 19770 ;; Hardware stack levels used:    1
 19771 ;; This function calls:
 19772 ;;		Nothing
 19773 ;; This function is called by:
 19774 ;;		i2_lcdInst
 19775 ;;		i2_putch
 19776 ;; This function uses a non-reentrant model
 19777 ;;
 19778                           
 19779                           	psect	text82
 19780  004DEC                     __ptext82:
 19781                           	opt stack 0
 19782  004DEC                     i2_lcdNibble:
 19783                           	opt stack 21
 19784                           
 19785                           ;incstack = 0
 19786                           ;i2lcdNibble@data stored from wreg
 19787  004DEC  6E02               	movwf	i2lcdNibble@data,c
 19788                           
 19789                           ;lcd.c: 32: char temp = data & 0xF0;
 19790  004DEE  5002               	movf	i2lcdNibble@data,w,c
 19791  004DF0  0BF0               	andlw	240
 19792  004DF2  6E01               	movwf	i2lcdNibble@temp,c
 19793                           
 19794                           ;lcd.c: 33: LATD = LATD & 0x0F;
 19795  004DF4  508C               	movf	3980,w,c	;volatile
 19796  004DF6  0B0F               	andlw	15
 19797  004DF8  6E8C               	movwf	3980,c	;volatile
 19798                           
 19799                           ;lcd.c: 34: LATD = temp | LATD;
 19800  004DFA  5001               	movf	i2lcdNibble@temp,w,c
 19801  004DFC  108C               	iorwf	3980,w,c	;volatile
 19802  004DFE  6E8C               	movwf	3980,c	;volatile
 19803                           
 19804                           ;lcd.c: 36: LATDbits.LATD3 = 0;
 19805  004E00  968C               	bcf	3980,3,c	;volatile
 19806                           
 19807                           ;lcd.c: 37: _delay((unsigned long)((25)*(8000000/4000000.0)));
 19808  004E02  0E10               	movlw	16
 19809  004E04                     i2u881_47:
 19810  004E04  2EE8               	decfsz	wreg,f,c
 19811  004E06  D7FE               	bra	i2u881_47
 19812  004E08  D000               	nop2	
 19813                           
 19814                           ;lcd.c: 38: LATDbits.LATD3 = 1;
 19815  004E0A  868C               	bsf	3980,3,c	;volatile
 19816                           
 19817                           ;lcd.c: 39: _delay((unsigned long)((25)*(8000000/4000000.0)));
 19818  004E0C  0E10               	movlw	16
 19819  004E0E                     i2u882_47:
 19820  004E0E  2EE8               	decfsz	wreg,f,c
 19821  004E10  D7FE               	bra	i2u882_47
 19822  004E12  D000               	nop2	
 19823                           
 19824                           ;lcd.c: 41: data = data << 4;
 19825  004E14  3802               	swapf	i2lcdNibble@data,w,c
 19826  004E16  0BF0               	andlw	240
 19827  004E18  6E02               	movwf	i2lcdNibble@data,c
 19828                           
 19829                           ;lcd.c: 43: temp = data & 0xF0;
 19830  004E1A  5002               	movf	i2lcdNibble@data,w,c
 19831  004E1C  0BF0               	andlw	240
 19832  004E1E  6E01               	movwf	i2lcdNibble@temp,c
 19833                           
 19834                           ;lcd.c: 44: LATD = LATD & 0x0F;
 19835  004E20  508C               	movf	3980,w,c	;volatile
 19836  004E22  0B0F               	andlw	15
 19837  004E24  6E8C               	movwf	3980,c	;volatile
 19838                           
 19839                           ;lcd.c: 45: LATD = temp | LATD;
 19840  004E26  5001               	movf	i2lcdNibble@temp,w,c
 19841  004E28  108C               	iorwf	3980,w,c	;volatile
 19842  004E2A  6E8C               	movwf	3980,c	;volatile
 19843                           
 19844                           ;lcd.c: 47: LATDbits.LATD3 = 0;
 19845  004E2C  968C               	bcf	3980,3,c	;volatile
 19846                           
 19847                           ;lcd.c: 48: _delay((unsigned long)((25)*(8000000/4000000.0)));
 19848  004E2E  0E10               	movlw	16
 19849  004E30                     i2u883_47:
 19850  004E30  2EE8               	decfsz	wreg,f,c
 19851  004E32  D7FE               	bra	i2u883_47
 19852  004E34  D000               	nop2	
 19853                           
 19854                           ;lcd.c: 49: LATDbits.LATD3 = 1;
 19855  004E36  868C               	bsf	3980,3,c	;volatile
 19856                           
 19857                           ;lcd.c: 50: _delay((unsigned long)((25)*(8000000/4000000.0)));
 19858  004E38  0E10               	movlw	16
 19859  004E3A                     i2u884_47:
 19860  004E3A  2EE8               	decfsz	wreg,f,c
 19861  004E3C  D7FE               	bra	i2u884_47
 19862  004E3E  D000               	nop2	
 19863  004E40  0012               	return		;funcret
 19864  004E42                     __end_ofi2_lcdNibble:
 19865                           	opt stack 0
 19866                           pclatu	equ	0xFFB
 19867                           pclath	equ	0xFFA
 19868                           tblptru	equ	0xFF8
 19869                           tblptrh	equ	0xFF7
 19870                           tblptrl	equ	0xFF6
 19871                           tablat	equ	0xFF5
 19872                           prodh	equ	0xFF4
 19873                           prodl	equ	0xFF3
 19874                           intcon	equ	0xFF2
 19875                           intcon3	equ	0xFF0
 19876                           postinc0	equ	0xFEE
 19877                           fsr0h	equ	0xFEA
 19878                           fsr0l	equ	0xFE9
 19879                           wreg	equ	0xFE8
 19880                           plusw1	equ	0xFE3
 19881                           fsr1h	equ	0xFE2
 19882                           fsr1l	equ	0xFE1
 19883                           indf2	equ	0xFDF
 19884                           postinc2	equ	0xFDE
 19885                           postdec2	equ	0xFDD
 19886                           plusw2	equ	0xFDB
 19887                           fsr2h	equ	0xFDA
 19888                           fsr2l	equ	0xFD9
 19889                           status	equ	0xFD8
 19890                           
 19891 ;; *************** function _captureKeypad *****************
 19892 ;; Defined at:
 19893 ;;		line 13 in file "modules.c"
 19894 ;; Parameters:    Size  Location     Type
 19895 ;;		None
 19896 ;; Auto vars:     Size  Location     Type
 19897 ;;  keypress        1    2[COMRAM] unsigned char 
 19898 ;; Return value:  Size  Location     Type
 19899 ;;                  2    0[COMRAM] unsigned int 
 19900 ;; Registers used:
 19901 ;;		wreg, status,2, status,0
 19902 ;; Tracked objects:
 19903 ;;		On entry : 0/0
 19904 ;;		On exit  : 0/0
 19905 ;;		Unchanged: 0/0
 19906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19907 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19908 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19910 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19911 ;;Total ram usage:        3 bytes
 19912 ;; Hardware stack levels used:    1
 19913 ;; This function calls:
 19914 ;;		Nothing
 19915 ;; This function is called by:
 19916 ;;		_showInfo
 19917 ;; This function uses a non-reentrant model
 19918 ;;
 19919                           
 19920                           	psect	text83
 19921  005244                     __ptext83:
 19922                           	opt stack 0
 19923  005244                     _captureKeypad:
 19924                           	opt stack 22
 19925                           
 19926                           ;modules.c: 14: (INTCONbits.GIE = 0);
 19927                           
 19928                           ;incstack = 0
 19929  005244  9EF2               	bcf	intcon,7,c	;volatile
 19930  005246                     i2l212:
 19931  005246  A281               	btfss	3969,1,c	;volatile
 19932  005248  D7FE               	goto	i2l212
 19933                           
 19934                           ;modules.c: 16: unsigned char keypress = (PORTB & 0xF0) >> 4;
 19935  00524A  3881               	swapf	3969,w,c	;volatile
 19936  00524C  0B0F               	andlw	15
 19937  00524E  0B0F               	andlw	15
 19938  005250  6E03               	movwf	captureKeypad@keypress,c
 19939  005252                     i2l215:
 19940  005252  B281               	btfsc	3969,1,c	;volatile
 19941  005254  D7FE               	goto	i2l215
 19942                           
 19943                           ;modules.c: 18: INT1IF = 0;
 19944  005256  90F0               	bcf	intcon3,0,c	;volatile
 19945                           
 19946                           ;modules.c: 19: (INTCONbits.GIE = 1);
 19947  005258  8EF2               	bsf	intcon,7,c	;volatile
 19948                           
 19949                           ;modules.c: 20: return keypress;
 19950  00525A  C003  F001         	movff	captureKeypad@keypress,?_captureKeypad
 19951  00525E  6A02               	clrf	?_captureKeypad+1,c
 19952  005260  0012               	return		;funcret
 19953  005262                     __end_of_captureKeypad:
 19954                           	opt stack 0
 19955                           pclatu	equ	0xFFB
 19956                           pclath	equ	0xFFA
 19957                           tblptru	equ	0xFF8
 19958                           tblptrh	equ	0xFF7
 19959                           tblptrl	equ	0xFF6
 19960                           tablat	equ	0xFF5
 19961                           prodh	equ	0xFF4
 19962                           prodl	equ	0xFF3
 19963                           intcon	equ	0xFF2
 19964                           intcon3	equ	0xFF0
 19965                           postinc0	equ	0xFEE
 19966                           fsr0h	equ	0xFEA
 19967                           fsr0l	equ	0xFE9
 19968                           wreg	equ	0xFE8
 19969                           plusw1	equ	0xFE3
 19970                           fsr1h	equ	0xFE2
 19971                           fsr1l	equ	0xFE1
 19972                           indf2	equ	0xFDF
 19973                           postinc2	equ	0xFDE
 19974                           postdec2	equ	0xFDD
 19975                           plusw2	equ	0xFDB
 19976                           fsr2h	equ	0xFDA
 19977                           fsr2l	equ	0xFD9
 19978                           status	equ	0xFD8
 19979                           
 19980 ;; *************** function _ReadRun *****************
 19981 ;; Defined at:
 19982 ;;		line 66 in file "eeprom.c"
 19983 ;; Parameters:    Size  Location     Type
 19984 ;;  backruns        1    wreg     unsigned char 
 19985 ;;  sorted          2    2[COMRAM] PTR unsigned char 
 19986 ;;		 -> PermLog@sorted(4), 
 19987 ;;  time            2    4[COMRAM] PTR unsigned int 
 19988 ;;		 -> PermLog@time(2), 
 19989 ;; Auto vars:     Size  Location     Type
 19990 ;;  backruns        1   10[COMRAM] unsigned char 
 19991 ;;  add             2   11[COMRAM] unsigned int 
 19992 ;; Return value:  Size  Location     Type
 19993 ;;                  1    wreg      void 
 19994 ;; Registers used:
 19995 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19996 ;; Tracked objects:
 19997 ;;		On entry : 0/0
 19998 ;;		On exit  : 0/0
 19999 ;;		Unchanged: 0/0
 20000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20001 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20002 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20003 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20004 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20005 ;;Total ram usage:       11 bytes
 20006 ;; Hardware stack levels used:    1
 20007 ;; Hardware stack levels required when called:    1
 20008 ;; This function calls:
 20009 ;;		_back
 20010 ;;		i2_ReadEE
 20011 ;; This function is called by:
 20012 ;;		_PermLog
 20013 ;; This function uses a non-reentrant model
 20014 ;;
 20015                           
 20016                           	psect	text84
 20017  0037B8                     __ptext84:
 20018                           	opt stack 0
 20019  0037B8                     _ReadRun:
 20020                           	opt stack 22
 20021                           
 20022                           ;incstack = 0
 20023                           ;ReadRun@backruns stored from wreg
 20024  0037B8  6E0B               	movwf	ReadRun@backruns,c
 20025                           
 20026                           ;eeprom.c: 67: unsigned int add = back(backruns) * 5;
 20027  0037BA  500B               	movf	ReadRun@backruns,w,c
 20028  0037BC  EC31  F029         	call	_back
 20029  0037C0  6E07               	movwf	??_ReadRun& (0+255),c
 20030  0037C2  5007               	movf	??_ReadRun,w,c
 20031  0037C4  0D05               	mullw	5
 20032  0037C6  CFF3 F00C          	movff	prodl,ReadRun@add
 20033  0037CA  CFF4 F00D          	movff	prodh,ReadRun@add+1
 20034                           
 20035                           ;eeprom.c: 68: *time = ReadEE(add++ *8);
 20036  0037CE  C00C  F007         	movff	ReadRun@add,??_ReadRun
 20037  0037D2  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 20038  0037D6  90D8               	bcf	status,0,c
 20039  0037D8  3607               	rlcf	??_ReadRun,f,c
 20040  0037DA  3608               	rlcf	??_ReadRun+1,f,c
 20041  0037DC  90D8               	bcf	status,0,c
 20042  0037DE  3607               	rlcf	??_ReadRun,f,c
 20043  0037E0  3608               	rlcf	??_ReadRun+1,f,c
 20044  0037E2  90D8               	bcf	status,0,c
 20045  0037E4  3607               	rlcf	??_ReadRun,f,c
 20046  0037E6  3608               	rlcf	??_ReadRun+1,f,c
 20047  0037E8  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 20048  0037EC  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 20049  0037F0  EC58  F029         	call	i2_ReadEE	;wreg free
 20050  0037F4  6E09               	movwf	(??_ReadRun+2)& (0+255),c
 20051  0037F6  6A0A               	clrf	(??_ReadRun+3)& (0+255),c
 20052  0037F8  C005  FFD9         	movff	ReadRun@time,fsr2l
 20053  0037FC  C006  FFDA         	movff	ReadRun@time+1,fsr2h
 20054  003800  C009  FFDE         	movff	??_ReadRun+2,postinc2
 20055  003804  C00A  FFDD         	movff	??_ReadRun+3,postdec2
 20056  003808  4A0C               	infsnz	ReadRun@add,f,c
 20057  00380A  2A0D               	incf	ReadRun@add+1,f,c
 20058                           
 20059                           ;eeprom.c: 69: sorted[0] = ReadEE(add++ *8);
 20060  00380C  C00C  F007         	movff	ReadRun@add,??_ReadRun
 20061  003810  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 20062  003814  90D8               	bcf	status,0,c
 20063  003816  3607               	rlcf	??_ReadRun,f,c
 20064  003818  3608               	rlcf	??_ReadRun+1,f,c
 20065  00381A  90D8               	bcf	status,0,c
 20066  00381C  3607               	rlcf	??_ReadRun,f,c
 20067  00381E  3608               	rlcf	??_ReadRun+1,f,c
 20068  003820  90D8               	bcf	status,0,c
 20069  003822  3607               	rlcf	??_ReadRun,f,c
 20070  003824  3608               	rlcf	??_ReadRun+1,f,c
 20071  003826  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 20072  00382A  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 20073  00382E  EC58  F029         	call	i2_ReadEE	;wreg free
 20074  003832  C003  FFD9         	movff	ReadRun@sorted,fsr2l
 20075  003836  C004  FFDA         	movff	ReadRun@sorted+1,fsr2h
 20076  00383A  6EDF               	movwf	indf2,c
 20077  00383C  4A0C               	infsnz	ReadRun@add,f,c
 20078  00383E  2A0D               	incf	ReadRun@add+1,f,c
 20079                           
 20080                           ;eeprom.c: 70: sorted[1] = ReadEE(add++ *8);
 20081  003840  EE20 F001          	lfsr	2,1
 20082  003844  5003               	movf	ReadRun@sorted,w,c
 20083  003846  26D9               	addwf	fsr2l,f,c
 20084  003848  5004               	movf	ReadRun@sorted+1,w,c
 20085  00384A  22DA               	addwfc	fsr2h,f,c
 20086  00384C  C00C  F007         	movff	ReadRun@add,??_ReadRun
 20087  003850  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 20088  003854  90D8               	bcf	status,0,c
 20089  003856  3607               	rlcf	??_ReadRun,f,c
 20090  003858  3608               	rlcf	??_ReadRun+1,f,c
 20091  00385A  90D8               	bcf	status,0,c
 20092  00385C  3607               	rlcf	??_ReadRun,f,c
 20093  00385E  3608               	rlcf	??_ReadRun+1,f,c
 20094  003860  90D8               	bcf	status,0,c
 20095  003862  3607               	rlcf	??_ReadRun,f,c
 20096  003864  3608               	rlcf	??_ReadRun+1,f,c
 20097  003866  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 20098  00386A  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 20099  00386E  EC58  F029         	call	i2_ReadEE	;wreg free
 20100  003872  6EDF               	movwf	indf2,c
 20101  003874  4A0C               	infsnz	ReadRun@add,f,c
 20102  003876  2A0D               	incf	ReadRun@add+1,f,c
 20103                           
 20104                           ;eeprom.c: 71: sorted[2] = ReadEE(add++ *8);
 20105  003878  EE20 F002          	lfsr	2,2
 20106  00387C  5003               	movf	ReadRun@sorted,w,c
 20107  00387E  26D9               	addwf	fsr2l,f,c
 20108  003880  5004               	movf	ReadRun@sorted+1,w,c
 20109  003882  22DA               	addwfc	fsr2h,f,c
 20110  003884  C00C  F007         	movff	ReadRun@add,??_ReadRun
 20111  003888  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 20112  00388C  90D8               	bcf	status,0,c
 20113  00388E  3607               	rlcf	??_ReadRun,f,c
 20114  003890  3608               	rlcf	??_ReadRun+1,f,c
 20115  003892  90D8               	bcf	status,0,c
 20116  003894  3607               	rlcf	??_ReadRun,f,c
 20117  003896  3608               	rlcf	??_ReadRun+1,f,c
 20118  003898  90D8               	bcf	status,0,c
 20119  00389A  3607               	rlcf	??_ReadRun,f,c
 20120  00389C  3608               	rlcf	??_ReadRun+1,f,c
 20121  00389E  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 20122  0038A2  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 20123  0038A6  EC58  F029         	call	i2_ReadEE	;wreg free
 20124  0038AA  6EDF               	movwf	indf2,c
 20125  0038AC  4A0C               	infsnz	ReadRun@add,f,c
 20126  0038AE  2A0D               	incf	ReadRun@add+1,f,c
 20127                           
 20128                           ;eeprom.c: 72: sorted[3] = ReadEE(add++ *8);
 20129  0038B0  EE20 F003          	lfsr	2,3
 20130  0038B4  5003               	movf	ReadRun@sorted,w,c
 20131  0038B6  26D9               	addwf	fsr2l,f,c
 20132  0038B8  5004               	movf	ReadRun@sorted+1,w,c
 20133  0038BA  22DA               	addwfc	fsr2h,f,c
 20134  0038BC  C00C  F007         	movff	ReadRun@add,??_ReadRun
 20135  0038C0  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 20136  0038C4  90D8               	bcf	status,0,c
 20137  0038C6  3607               	rlcf	??_ReadRun,f,c
 20138  0038C8  3608               	rlcf	??_ReadRun+1,f,c
 20139  0038CA  90D8               	bcf	status,0,c
 20140  0038CC  3607               	rlcf	??_ReadRun,f,c
 20141  0038CE  3608               	rlcf	??_ReadRun+1,f,c
 20142  0038D0  90D8               	bcf	status,0,c
 20143  0038D2  3607               	rlcf	??_ReadRun,f,c
 20144  0038D4  3608               	rlcf	??_ReadRun+1,f,c
 20145  0038D6  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 20146  0038DA  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 20147  0038DE  EC58  F029         	call	i2_ReadEE	;wreg free
 20148  0038E2  6EDF               	movwf	indf2,c
 20149  0038E4  4A0C               	infsnz	ReadRun@add,f,c
 20150  0038E6  2A0D               	incf	ReadRun@add+1,f,c
 20151  0038E8  0012               	return		;funcret
 20152  0038EA                     __end_of_ReadRun:
 20153                           	opt stack 0
 20154                           pclatu	equ	0xFFB
 20155                           pclath	equ	0xFFA
 20156                           tblptru	equ	0xFF8
 20157                           tblptrh	equ	0xFF7
 20158                           tblptrl	equ	0xFF6
 20159                           tablat	equ	0xFF5
 20160                           prodh	equ	0xFF4
 20161                           prodl	equ	0xFF3
 20162                           intcon	equ	0xFF2
 20163                           intcon3	equ	0xFF0
 20164                           postinc0	equ	0xFEE
 20165                           fsr0h	equ	0xFEA
 20166                           fsr0l	equ	0xFE9
 20167                           wreg	equ	0xFE8
 20168                           plusw1	equ	0xFE3
 20169                           fsr1h	equ	0xFE2
 20170                           fsr1l	equ	0xFE1
 20171                           indf2	equ	0xFDF
 20172                           postinc2	equ	0xFDE
 20173                           postdec2	equ	0xFDD
 20174                           plusw2	equ	0xFDB
 20175                           fsr2h	equ	0xFDA
 20176                           fsr2l	equ	0xFD9
 20177                           status	equ	0xFD8
 20178                           
 20179 ;; *************** function i2_ReadEE *****************
 20180 ;; Defined at:
 20181 ;;		line 16 in file "eeprom.c"
 20182 ;; Parameters:    Size  Location     Type
 20183 ;;  address         2    0[COMRAM] unsigned int 
 20184 ;; Auto vars:     Size  Location     Type
 20185 ;;		None
 20186 ;; Return value:  Size  Location     Type
 20187 ;;                  1    wreg      unsigned char 
 20188 ;; Registers used:
 20189 ;;		wreg, status,2
 20190 ;; Tracked objects:
 20191 ;;		On entry : 0/0
 20192 ;;		On exit  : 0/0
 20193 ;;		Unchanged: 0/0
 20194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20195 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20198 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20199 ;;Total ram usage:        2 bytes
 20200 ;; Hardware stack levels used:    1
 20201 ;; This function calls:
 20202 ;;		Nothing
 20203 ;; This function is called by:
 20204 ;;		_ReadRun
 20205 ;; This function uses a non-reentrant model
 20206 ;;
 20207                           
 20208                           	psect	text85
 20209  0052B0                     __ptext85:
 20210                           	opt stack 0
 20211  0052B0                     i2_ReadEE:
 20212                           	opt stack 22
 20213                           
 20214                           ;eeprom.c: 19: EEADRH = (unsigned char) (address >> 8);
 20215                           
 20216                           ;incstack = 0
 20217  0052B0  5002               	movf	i2ReadEE@address+1,w,c
 20218  0052B2  6EAA               	movwf	4010,c	;volatile
 20219                           
 20220                           ;eeprom.c: 20: EEADR = (unsigned char) address;
 20221  0052B4  C001  FFA9         	movff	i2ReadEE@address,4009	;volatile
 20222                           
 20223                           ;eeprom.c: 22: EECON1bits.EEPGD = 0;
 20224  0052B8  9EA6               	bcf	4006,7,c	;volatile
 20225                           
 20226                           ;eeprom.c: 23: EECON1bits.CFGS = 0;
 20227  0052BA  9CA6               	bcf	4006,6,c	;volatile
 20228                           
 20229                           ;eeprom.c: 24: EECON1bits.RD = 1;
 20230  0052BC  80A6               	bsf	4006,0,c	;volatile
 20231  0052BE                     i2l417:
 20232  0052BE  B0A6               	btfsc	4006,0,c	;volatile
 20233  0052C0  D7FE               	goto	i2l417
 20234                           
 20235                           ;eeprom.c: 30: return EEDATA;
 20236  0052C2  50A8               	movf	4008,w,c	;volatile
 20237  0052C4  0012               	return	
 20238  0052C6                     __end_ofi2_ReadEE:
 20239                           	opt stack 0
 20240                           pclatu	equ	0xFFB
 20241                           pclath	equ	0xFFA
 20242                           tblptru	equ	0xFF8
 20243                           tblptrh	equ	0xFF7
 20244                           tblptrl	equ	0xFF6
 20245                           tablat	equ	0xFF5
 20246                           prodh	equ	0xFF4
 20247                           prodl	equ	0xFF3
 20248                           intcon	equ	0xFF2
 20249                           intcon3	equ	0xFF0
 20250                           postinc0	equ	0xFEE
 20251                           fsr0h	equ	0xFEA
 20252                           fsr0l	equ	0xFE9
 20253                           wreg	equ	0xFE8
 20254                           plusw1	equ	0xFE3
 20255                           fsr1h	equ	0xFE2
 20256                           fsr1l	equ	0xFE1
 20257                           indf2	equ	0xFDF
 20258                           postinc2	equ	0xFDE
 20259                           postdec2	equ	0xFDD
 20260                           plusw2	equ	0xFDB
 20261                           fsr2h	equ	0xFDA
 20262                           fsr2l	equ	0xFD9
 20263                           status	equ	0xFD8
 20264                           
 20265 ;; *************** function _back *****************
 20266 ;; Defined at:
 20267 ;;		line 57 in file "eeprom.c"
 20268 ;; Parameters:    Size  Location     Type
 20269 ;;  runs            1    wreg     unsigned char 
 20270 ;; Auto vars:     Size  Location     Type
 20271 ;;  runs            1    0[COMRAM] unsigned char 
 20272 ;;  result          1    1[COMRAM] unsigned char 
 20273 ;; Return value:  Size  Location     Type
 20274 ;;                  1    wreg      unsigned char 
 20275 ;; Registers used:
 20276 ;;		wreg, status,2, status,0
 20277 ;; Tracked objects:
 20278 ;;		On entry : 0/0
 20279 ;;		On exit  : 0/0
 20280 ;;		Unchanged: 0/0
 20281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20283 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20284 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20285 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20286 ;;Total ram usage:        2 bytes
 20287 ;; Hardware stack levels used:    1
 20288 ;; This function calls:
 20289 ;;		Nothing
 20290 ;; This function is called by:
 20291 ;;		_ReadRun
 20292 ;; This function uses a non-reentrant model
 20293 ;;
 20294                           
 20295                           	psect	text86
 20296  005262                     __ptext86:
 20297                           	opt stack 0
 20298  005262                     _back:
 20299                           	opt stack 22
 20300                           
 20301                           ;incstack = 0
 20302                           ;back@runs stored from wreg
 20303  005262  6E01               	movwf	back@runs,c
 20304                           
 20305                           ;eeprom.c: 59: unsigned char result = Latest + 4 - runs;
 20306  005264  5001               	movf	back@runs,w,c
 20307  005266  0800               	sublw	0
 20308  005268  0100               	movlb	0	; () banked
 20309  00526A  25D8               	addwf	_Latest& (0+255),w,b
 20310  00526C  0F04               	addlw	4
 20311  00526E  6E02               	movwf	back@result,c
 20312                           
 20313                           ;eeprom.c: 60: if (result > 4) {
 20314  005270  0E04               	movlw	4
 20315  005272  6402               	cpfsgt	back@result,c
 20316  005274  D002               	goto	i2l5519
 20317                           
 20318                           ; BSR set to: 0
 20319                           ;eeprom.c: 61: result -= 4;
 20320  005276  0E04               	movlw	4
 20321  005278  5E02               	subwf	back@result,f,c
 20322  00527A                     i2l5519:
 20323                           
 20324                           ; BSR set to: 0
 20325                           ;eeprom.c: 62: }
 20326                           ;eeprom.c: 63: return result;
 20327  00527A  5002               	movf	back@result,w,c
 20328  00527C  0012               	return	
 20329  00527E                     __end_of_back:
 20330                           	opt stack 0
 20331                           pclatu	equ	0xFFB
 20332                           pclath	equ	0xFFA
 20333                           tblptru	equ	0xFF8
 20334                           tblptrh	equ	0xFF7
 20335                           tblptrl	equ	0xFF6
 20336                           tablat	equ	0xFF5
 20337                           prodh	equ	0xFF4
 20338                           prodl	equ	0xFF3
 20339                           intcon	equ	0xFF2
 20340                           intcon3	equ	0xFF0
 20341                           postinc0	equ	0xFEE
 20342                           fsr0h	equ	0xFEA
 20343                           fsr0l	equ	0xFE9
 20344                           wreg	equ	0xFE8
 20345                           plusw1	equ	0xFE3
 20346                           fsr1h	equ	0xFE2
 20347                           fsr1l	equ	0xFE1
 20348                           indf2	equ	0xFDF
 20349                           postinc2	equ	0xFDE
 20350                           postdec2	equ	0xFDD
 20351                           plusw2	equ	0xFDB
 20352                           fsr2h	equ	0xFDA
 20353                           fsr2l	equ	0xFD9
 20354                           status	equ	0xFD8
 20355                           pclatu	equ	0xFFB
 20356                           pclath	equ	0xFFA
 20357                           tblptru	equ	0xFF8
 20358                           tblptrh	equ	0xFF7
 20359                           tblptrl	equ	0xFF6
 20360                           tablat	equ	0xFF5
 20361                           prodh	equ	0xFF4
 20362                           prodl	equ	0xFF3
 20363                           intcon	equ	0xFF2
 20364                           intcon3	equ	0xFF0
 20365                           postinc0	equ	0xFEE
 20366                           fsr0h	equ	0xFEA
 20367                           fsr0l	equ	0xFE9
 20368                           wreg	equ	0xFE8
 20369                           plusw1	equ	0xFE3
 20370                           fsr1h	equ	0xFE2
 20371                           fsr1l	equ	0xFE1
 20372                           indf2	equ	0xFDF
 20373                           postinc2	equ	0xFDE
 20374                           postdec2	equ	0xFDD
 20375                           plusw2	equ	0xFDB
 20376                           fsr2h	equ	0xFDA
 20377                           fsr2l	equ	0xFD9
 20378                           status	equ	0xFD8
 20379                           
 20380                           	psect	rparam
 20381  0000                     pclatu	equ	0xFFB
 20382                           pclath	equ	0xFFA
 20383                           tblptru	equ	0xFF8
 20384                           tblptrh	equ	0xFF7
 20385                           tblptrl	equ	0xFF6
 20386                           tablat	equ	0xFF5
 20387                           prodh	equ	0xFF4
 20388                           prodl	equ	0xFF3
 20389                           intcon	equ	0xFF2
 20390                           intcon3	equ	0xFF0
 20391                           postinc0	equ	0xFEE
 20392                           fsr0h	equ	0xFEA
 20393                           fsr0l	equ	0xFE9
 20394                           wreg	equ	0xFE8
 20395                           plusw1	equ	0xFE3
 20396                           fsr1h	equ	0xFE2
 20397                           fsr1l	equ	0xFE1
 20398                           indf2	equ	0xFDF
 20399                           postinc2	equ	0xFDE
 20400                           postdec2	equ	0xFDD
 20401                           plusw2	equ	0xFDB
 20402                           fsr2h	equ	0xFDA
 20403                           fsr2l	equ	0xFD9
 20404                           status	equ	0xFD8
 20405                           
 20406                           	psect	temp
 20407  00007F                     btemp:
 20408                           	opt stack 0
 20409  00007F                     	ds	1
 20410  0000                     int$flags	set	btemp
 20411                           pclatu	equ	0xFFB
 20412                           pclath	equ	0xFFA
 20413                           tblptru	equ	0xFF8
 20414                           tblptrh	equ	0xFF7
 20415                           tblptrl	equ	0xFF6
 20416                           tablat	equ	0xFF5
 20417                           prodh	equ	0xFF4
 20418                           prodl	equ	0xFF3
 20419                           intcon	equ	0xFF2
 20420                           intcon3	equ	0xFF0
 20421                           postinc0	equ	0xFEE
 20422                           fsr0h	equ	0xFEA
 20423                           fsr0l	equ	0xFE9
 20424                           wreg	equ	0xFE8
 20425                           plusw1	equ	0xFE3
 20426                           fsr1h	equ	0xFE2
 20427                           fsr1l	equ	0xFE1
 20428                           indf2	equ	0xFDF
 20429                           postinc2	equ	0xFDE
 20430                           postdec2	equ	0xFDD
 20431                           plusw2	equ	0xFDB
 20432                           fsr2h	equ	0xFDA
 20433                           fsr2l	equ	0xFD9
 20434                           status	equ	0xFD8


Data Sizes:
    Strings     904
    Constant    150
    Data        0
    BSS         42
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    126     126
    BANK0           128     54      96
    BANK1           256    116     116
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK1[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_51(CODE[12]), STR_50(CODE[11]), STR_49(CODE[16]), STR_48(CODE[23]), 
		 -> STR_47(CODE[21]), STR_46(CODE[14]), STR_45(CODE[15]), STR_44(CODE[22]), 
		 -> STR_43(CODE[20]), STR_42(CODE[13]), STR_41(CODE[16]), STR_40(CODE[23]), 
		 -> STR_39(CODE[21]), STR_38(CODE[14]), STR_37(CODE[18]), STR_36(CODE[18]), 
		 -> STR_35(CODE[20]), STR_34(CODE[20]), STR_33(CODE[17]), STR_32(CODE[16]), 
		 -> STR_31(CODE[21]), STR_30(CODE[16]), STR_29(CODE[21]), STR_28(CODE[16]), 
		 -> STR_27(CODE[20]), STR_26(CODE[16]), STR_25(CODE[21]), STR_24(CODE[23]), 
		 -> STR_23(CODE[24]), STR_22(CODE[21]), STR_21(CODE[24]), STR_20(CODE[24]), 
		 -> STR_19(CODE[25]), STR_18(CODE[19]), STR_17(CODE[24]), STR_16(CODE[24]), 
		 -> STR_15(CODE[27]), STR_14(CODE[17]), STR_13(CODE[21]), STR_12(CODE[21]), 
		 -> STR_11(CODE[21]), STR_10(CODE[21]), STR_9(CODE[20]), STR_8(CODE[21]), 
		 -> STR_7(CODE[21]), STR_6(CODE[20]), STR_5(CODE[22]), STR_4(CODE[22]), 
		 -> STR_3(CODE[21]), STR_2(CODE[24]), STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK1[2]), 

    WriteRun@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(BANK0[4]), 

    ReadRun@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> PermLog@sorted(BANK0[4]), 

    ReadRun@time	PTR unsigned int  size(2) Largest target is 2
		 -> PermLog@time(BANK0[2]), 

    check9@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(BANK0[4]), 

    checkC@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(BANK0[4]), 

    checkAA@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> testADC@sorted(COMRAM[4]), simulate@sorted(BANK0[4]), 

    stopMoving$551	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_36(CODE[18]), STR_35(CODE[20]), 

    CCW90@port	PTR int  size(2) Largest target is 6
		 -> simulate@portCCW(BANK0[6]), 

    CW90@port	PTR int  size(2) Largest target is 6
		 -> simulate@portCW(BANK0[6]), 

    PWMC@port	PTR int  size(2) Largest target is 6
		 -> simulate@portCCW(BANK0[6]), simulate@portCW(BANK0[6]), 

    getTime@time	PTR unsigned char  size(2) Largest target is 7
		 -> time(BANK0[7]), 

    showInfo@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> PermLog@sorted(BANK0[4]), simulate@sorted(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _keypressed in COMRAM

    _simulate->_showInfo
    i2_getTime->i2_I2C_Master_Read
    i2_getTime->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    _stopMoving->i2_printf
    _checkC->_checkV
    _checkAA->_checkV
    _check9->_checkV
    _checkV->i2_printf
    ___ftdiv->___awtoft
    ___awtoft->i2___ftpack
    _WriteRun->i2___wmul
    _HexDecToDec2->i2___wmul
    _CW90->i2_printf
    _CCW90->i2_printf
    _PWMC->i2___awdiv
    _PermLog->_showInfo
    _showInfo->i2_printf
    i2_printf->i2___ftsub
    i2_scale->i2___ftmul
    i2_putch->i2_lcdNibble
    i2_fround->i2___ftmul
    i2___wmul->i2___awdiv
    i2___ftmul->___ftdiv
    i2___awdiv->i2___awmod
    i2___lltoft->i2___ftpack
    i2___llmod->i2___lldiv
    i2___fttol->i2___ftmul
    i2___ftsub->i2___ftadd
    i2___ftadd->i2_fround
    i2___ftge->i2___ftmul
    i2___lcd_newline->i2_lcdInst
    i2_lcdInst->i2_lcdNibble
    _ReadRun->_back
    _ReadRun->i2_ReadEE

Critical Paths under _main in BANK0

    None.

Critical Paths under _keypressed in BANK0

    _keypressed->_simulate

Critical Paths under _main in BANK1

    _main->_showRTC
    _showRTC->_printf
    _printf->___ftsub
    _scale->___ftmul
    _putch->_lcdNibble
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _getTime->_I2C_Master_Read
    _getTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    ___lcd_newline->_lcdInst
    _initialize->_I2C_Master_Init
    _initLatest->_ReadEE
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     2      5  118535
                                            109 BANK1      7     2      5
                         _initialize
                             _printf
                            _showRTC
 ---------------------------------------------------------------------------------
 (1) _showRTC                                              2     2      0   58837
                                            107 BANK1      2     2      0
                      ___lcd_newline
                            _getTime
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              45    37      8   57840
                                             63 BANK1     44    36      8
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   12933
                                             35 BANK1      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     195
                                              2 BANK1      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   12654
                                             35 BANK1     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3108
                                             14 BANK1      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    5240
                                             20 BANK1     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1819
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    2069
                                              6 BANK1      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     608
                                              0 BANK1     15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     878
                                              0 BANK1     12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2493
                                              8 BANK1      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     848
                                             13 BANK1      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     444
                                             42 BANK1     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4325
                                             57 BANK1      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    3961
                                             45 BANK1     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2314
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     142
                                              0 BANK1      3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     744
                                              0 BANK1      9     3      6
 ---------------------------------------------------------------------------------
 (2) _getTime                                              3     1      2     607
                                              3 BANK1      3     1      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2     262
                                              1 BANK1      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      65
                                              1 BANK1      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lcd_newline                                        0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initialize                                           2     2      0    1858
                                             21 BANK1      2     2      0
                    _I2C_Master_Init
                            _initLCD
                         _initLatest
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _initLatest                                           0     0      0     349
                             _ReadEE
 ---------------------------------------------------------------------------------
 (3) _ReadEE                                               2     0      2     349
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     195
                                              3 BANK1      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     195
                                              2 BANK1      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     164
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4    1119
                                             13 BANK1      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1011
                                              0 BANK1     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _keypressed                                          17    17      0  368523
                                            125 COMRAM     1     1      0
                                             38 BANK0     16    16      0
                            _PermLog
                           _simulate
                         _stopMoving
 ---------------------------------------------------------------------------------
 (7) _simulate                                            38    38      0  293943
                                              0 BANK0     38    38      0
                              _CCW90
                               _CW90
                       _HexDecToDec2
                           _WriteRun
                             _check9
                            _checkAA
                             _checkC
                           _showInfo
                         _stopMoving
                    i2___lcd_newline
                           i2___wmul
                          i2_getTime
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) i2_getTime                                            3     1      2     283
                                              3 COMRAM     3     1      2
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Master_Write                                   2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (10) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _stopMoving                                           5     5      0   24369
                                            112 COMRAM     5     5      0
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) _checkC                                               2     0      2   53584
                                            122 COMRAM     2     0      2
                                 _AD
                             _checkV
                    i2___lcd_newline
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) _checkAA                                              2     0      2   53648
                                            122 COMRAM     2     0      2
                                 _AD
                             _checkV
                    i2___lcd_newline
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) _check9                                               2     0      2   53584
                                            122 COMRAM     2     0      2
                                 _AD
                             _checkV
                    i2___lcd_newline
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _checkV                                              10     5      5   29018
                                            112 COMRAM    10     5      5
                                 _AD (ARG)
                           ___awtoft
                            ___ftdiv
                           i2___ftge
                          i2___ftmul
                    i2___lcd_newline
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) ___ftdiv                                            15     9      6    1259
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                         i2___ftpack
                         i2___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (10) ___awtoft                                            4     1      3     840
                                              8 COMRAM     4     1      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (9) _AD                                                   5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (8) _WriteRun                                             8     4      4    2453
                                             20 COMRAM     8     4      4
                            _WriteEE
                           i2___wmul
 ---------------------------------------------------------------------------------
 (9) _WriteEE                                              3     0      3     834
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (8) _HexDecToDec2                                         9     7      2    1543
                                             20 COMRAM     9     7      2
                           i2___wmul
 ---------------------------------------------------------------------------------
 (8) _CW90                                                 2     0      2   26502
                                            112 COMRAM     2     0      2
                               _PWMC
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) _CCW90                                                2     0      2   26502
                                            112 COMRAM     2     0      2
                               _PWMC
                    i2___lcd_newline
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _PWMC                                                40    34      6    2115
                                             14 COMRAM    13     7      6
                          i2___awdiv
 ---------------------------------------------------------------------------------
 (7) _PermLog                                              9     9      0   50166
                                              0 BANK0      9     9      0
                            _ReadRun
                           _showInfo
                    i2___lcd_newline
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) _showInfo                                            13     9      4   24961
                                            112 COMRAM    13     9      4
                      _captureKeypad
                    i2___lcd_newline
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) i2_printf                                            43    37      6   24166
                                             70 COMRAM    42    36      6
                          i2___awdiv
                          i2___ftadd
                           i2___ftge
                          i2___ftmul
                          i2___ftneg
                          i2___ftsub
                          i2___fttol
                          i2___lldiv
                          i2___llmod
                         i2___lltoft
                           i2___wmul
                       i2__div_to_l_
                      i2__tdiv_to_l_
                           i2_fround
                          i2_isdigit
                            i2_putch
                            i2_scale
 ---------------------------------------------------------------------------------
 (9) i2_scale                                             13    10      3    5101
                                             42 COMRAM     7     4      3
                          i2___awdiv
                          i2___awmod
                          i2___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (9) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (9) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (9) i2_fround                                            16    13      3    4903
                                             42 COMRAM    10     7      3
                          i2___awdiv
                          i2___awmod
                          i2___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4    1197
                                             14 COMRAM     6     2      4
                          i2___awdiv (ARG)
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___ftmul                                          15     9      6    1779
                                             27 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                          i2___awdiv (ARG)
                          i2___awmod (ARG)
                         i2___ftpack
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___awmod                                           6     2      4     764
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___awdiv                                           8     4      4     872
                                              6 COMRAM     8     4      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (9) i2__tdiv_to_l_                                       15     9      6     355
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (9) i2__div_to_l_                                        12     6      6     481
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (9) i2___lltoft                                           9     5      4     716
                                              8 COMRAM     9     5      4
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (9) i2___llmod                                            9     1      8     367
                                             13 COMRAM     9     1      8
                          i2___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (9) i2___lldiv                                           13     5      8     370
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (9) i2___fttol                                           15    11      4     330
                                             42 COMRAM    15    11      4
                          i2___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) i2___ftsub                                            6     0      6    1684
                                             64 COMRAM     6     0      6
                          i2___ftadd
                         i2___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___ftadd                                          12     6      6    1565
                                             52 COMRAM    12     6      6
                         i2___ftpack
                           i2_fround (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___ftpack                                          8     3      5     621
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) i2___ftneg                                            3     0      3      71
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) i2___ftge                                             9     3      6     344
                                             42 COMRAM     9     3      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                          i2___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (8) i2___lcd_newline                                      0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (8) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (9) _captureKeypad                                        3     1      2      23
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (8) _ReadRun                                             11     7      4     618
                                              2 COMRAM    11     7      4
                               _back
                           i2_ReadEE
 ---------------------------------------------------------------------------------
 (9) i2_ReadEE                                             2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) _back                                                 2     2      0      68
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialize
     _I2C_Master_Init
       ___lldiv
     _initLCD
       _lcdInst
         _lcdNibble
     _initLatest
       _ReadEE
     _lcdInst
       _lcdNibble
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _putch
       _lcdNibble
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _showRTC
     ___lcd_newline
       _lcdInst
         _lcdNibble
     _getTime
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _putch
         _lcdNibble
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)

 _keypressed (ROOT)
   _PermLog
     _ReadRun
       _back
       i2_ReadEE
     _showInfo
       _captureKeypad
       i2___lcd_newline
         i2_lcdInst
           i2_lcdNibble
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___awdiv
           i2___awmod (ARG)
         i2___ftadd
           i2___ftpack
           i2_fround (ARG)
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftge
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftmul
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___ftneg
         i2___ftsub
           i2___ftadd
             i2___ftpack
             i2_fround (ARG)
               i2___awdiv
                 i2___awmod (ARG)
               i2___awmod
               i2___ftmul
                 ___awtoft (ARG)
                   i2___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     i2___ftpack
                   i2___ftpack (ARG)
                   i2___ftpack (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
               i2___wmul
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___lltoft (ARG)
             i2___ftpack
         i2___fttol
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___lldiv
         i2___llmod
           i2___lldiv (ARG)
         i2___lltoft
           i2___ftpack
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
         i2__div_to_l_
         i2__tdiv_to_l_
         i2_fround
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2_isdigit
         i2_putch
           i2_lcdNibble
         i2_scale
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
     i2___lcd_newline
       i2_lcdInst
         i2_lcdNibble
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___awdiv
         i2___awmod (ARG)
       i2___ftadd
         i2___ftpack
         i2_fround (ARG)
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___ftge
         ___awtoft (ARG)
           i2___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
           i2___ftpack (ARG)
         i2___ftmul (ARG)
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___ftmul
         ___awtoft (ARG)
           i2___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
           i2___ftpack (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___ftneg
       i2___ftsub
         i2___ftadd
           i2___ftpack
           i2_fround (ARG)
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___lltoft (ARG)
           i2___ftpack
       i2___fttol
         i2___ftmul (ARG)
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___lldiv
       i2___llmod
         i2___lldiv (ARG)
       i2___lltoft
         i2___ftpack
       i2___wmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
       i2__div_to_l_
       i2__tdiv_to_l_
       i2_fround
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
         i2___ftmul
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2_isdigit
       i2_putch
         i2_lcdNibble
       i2_scale
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
         i2___ftmul
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
   _simulate
     _CCW90
       _PWMC
         i2___awdiv
           i2___awmod (ARG)
       i2___lcd_newline
         i2_lcdInst
           i2_lcdNibble
       i2_printf
         i2___awdiv
           i2___awmod (ARG)
         i2___ftadd
           i2___ftpack
           i2_fround (ARG)
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftge
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftmul
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___ftneg
         i2___ftsub
           i2___ftadd
             i2___ftpack
             i2_fround (ARG)
               i2___awdiv
                 i2___awmod (ARG)
               i2___awmod
               i2___ftmul
                 ___awtoft (ARG)
                   i2___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     i2___ftpack
                   i2___ftpack (ARG)
                   i2___ftpack (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
               i2___wmul
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___lltoft (ARG)
             i2___ftpack
         i2___fttol
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___lldiv
         i2___llmod
           i2___lldiv (ARG)
         i2___lltoft
           i2___ftpack
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
         i2__div_to_l_
         i2__tdiv_to_l_
         i2_fround
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2_isdigit
         i2_putch
           i2_lcdNibble
         i2_scale
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
     _CW90
       _PWMC
         i2___awdiv
           i2___awmod (ARG)
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___awdiv
           i2___awmod (ARG)
         i2___ftadd
           i2___ftpack
           i2_fround (ARG)
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftge
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftmul
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___ftneg
         i2___ftsub
           i2___ftadd
             i2___ftpack
             i2_fround (ARG)
               i2___awdiv
                 i2___awmod (ARG)
               i2___awmod
               i2___ftmul
                 ___awtoft (ARG)
                   i2___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     i2___ftpack
                   i2___ftpack (ARG)
                   i2___ftpack (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
               i2___wmul
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___lltoft (ARG)
             i2___ftpack
         i2___fttol
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___lldiv
         i2___llmod
           i2___lldiv (ARG)
         i2___lltoft
           i2___ftpack
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
         i2__div_to_l_
         i2__tdiv_to_l_
         i2_fround
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2_isdigit
         i2_putch
           i2_lcdNibble
         i2_scale
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
     _HexDecToDec2
       i2___wmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
     _WriteRun
       _WriteEE
       i2___wmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
     _check9
       _AD
       _checkV
         _AD (ARG)
         ___awtoft (ARG)
           i2___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
           i2___ftpack (ARG)
         i2___ftge (ARG)
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftmul (ARG)
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___lcd_newline (ARG)
           i2_lcdInst
             i2_lcdNibble
         i2_printf (ARG)
           i2___awdiv
             i2___awmod (ARG)
           i2___ftadd
             i2___ftpack
             i2_fround (ARG)
               i2___awdiv
                 i2___awmod (ARG)
               i2___awmod
               i2___ftmul
                 ___awtoft (ARG)
                   i2___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     i2___ftpack
                   i2___ftpack (ARG)
                   i2___ftpack (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
               i2___wmul
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___ftge
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___ftmul (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___ftneg
           i2___ftsub
             i2___ftadd
               i2___ftpack
               i2_fround (ARG)
                 i2___awdiv
                   i2___awmod (ARG)
                 i2___awmod
                 i2___ftmul
                   ___awtoft (ARG)
                     i2___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       i2___ftpack
                     i2___ftpack (ARG)
                     i2___ftpack (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
                   i2___ftpack (ARG)
                   i2___wmul (ARG)
                     i2___awdiv (ARG)
                       i2___awmod (ARG)
                     i2___awmod (ARG)
                 i2___wmul
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
             i2___lltoft (ARG)
               i2___ftpack
           i2___fttol
             i2___ftmul (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___lldiv
           i2___llmod
             i2___lldiv (ARG)
           i2___lltoft
             i2___ftpack
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
           i2__div_to_l_
           i2__tdiv_to_l_
           i2_fround
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2_isdigit
           i2_putch
             i2_lcdNibble
           i2_scale
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
       i2___lcd_newline
         i2_lcdInst
           i2_lcdNibble
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___awdiv
           i2___awmod (ARG)
         i2___ftadd
           i2___ftpack
           i2_fround (ARG)
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftge
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftmul
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___ftneg
         i2___ftsub
           i2___ftadd
             i2___ftpack
             i2_fround (ARG)
               i2___awdiv
                 i2___awmod (ARG)
               i2___awmod
               i2___ftmul
                 ___awtoft (ARG)
                   i2___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     i2___ftpack
                   i2___ftpack (ARG)
                   i2___ftpack (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
               i2___wmul
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___lltoft (ARG)
             i2___ftpack
         i2___fttol
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___lldiv
         i2___llmod
           i2___lldiv (ARG)
         i2___lltoft
           i2___ftpack
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
         i2__div_to_l_
         i2__tdiv_to_l_
         i2_fround
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2_isdigit
         i2_putch
           i2_lcdNibble
         i2_scale
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
     _checkAA
       _AD
       _checkV
         _AD (ARG)
         ___awtoft (ARG)
           i2___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
           i2___ftpack (ARG)
         i2___ftge (ARG)
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftmul (ARG)
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___lcd_newline (ARG)
           i2_lcdInst
             i2_lcdNibble
         i2_printf (ARG)
           i2___awdiv
             i2___awmod (ARG)
           i2___ftadd
             i2___ftpack
             i2_fround (ARG)
               i2___awdiv
                 i2___awmod (ARG)
               i2___awmod
               i2___ftmul
                 ___awtoft (ARG)
                   i2___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     i2___ftpack
                   i2___ftpack (ARG)
                   i2___ftpack (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
               i2___wmul
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___ftge
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___ftmul (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___ftneg
           i2___ftsub
             i2___ftadd
               i2___ftpack
               i2_fround (ARG)
                 i2___awdiv
                   i2___awmod (ARG)
                 i2___awmod
                 i2___ftmul
                   ___awtoft (ARG)
                     i2___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       i2___ftpack
                     i2___ftpack (ARG)
                     i2___ftpack (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
                   i2___ftpack (ARG)
                   i2___wmul (ARG)
                     i2___awdiv (ARG)
                       i2___awmod (ARG)
                     i2___awmod (ARG)
                 i2___wmul
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
             i2___lltoft (ARG)
               i2___ftpack
           i2___fttol
             i2___ftmul (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___lldiv
           i2___llmod
             i2___lldiv (ARG)
           i2___lltoft
             i2___ftpack
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
           i2__div_to_l_
           i2__tdiv_to_l_
           i2_fround
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2_isdigit
           i2_putch
             i2_lcdNibble
           i2_scale
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
       i2___lcd_newline
         i2_lcdInst
           i2_lcdNibble
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___awdiv
           i2___awmod (ARG)
         i2___ftadd
           i2___ftpack
           i2_fround (ARG)
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftge
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftmul
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___ftneg
         i2___ftsub
           i2___ftadd
             i2___ftpack
             i2_fround (ARG)
               i2___awdiv
                 i2___awmod (ARG)
               i2___awmod
               i2___ftmul
                 ___awtoft (ARG)
                   i2___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     i2___ftpack
                   i2___ftpack (ARG)
                   i2___ftpack (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
               i2___wmul
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___lltoft (ARG)
             i2___ftpack
         i2___fttol
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___lldiv
         i2___llmod
           i2___lldiv (ARG)
         i2___lltoft
           i2___ftpack
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
         i2__div_to_l_
         i2__tdiv_to_l_
         i2_fround
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2_isdigit
         i2_putch
           i2_lcdNibble
         i2_scale
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
     _checkC
       _AD
       _checkV
         _AD (ARG)
         ___awtoft (ARG)
           i2___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
           i2___ftpack (ARG)
         i2___ftge (ARG)
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftmul (ARG)
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___lcd_newline (ARG)
           i2_lcdInst
             i2_lcdNibble
         i2_printf (ARG)
           i2___awdiv
             i2___awmod (ARG)
           i2___ftadd
             i2___ftpack
             i2_fround (ARG)
               i2___awdiv
                 i2___awmod (ARG)
               i2___awmod
               i2___ftmul
                 ___awtoft (ARG)
                   i2___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     i2___ftpack
                   i2___ftpack (ARG)
                   i2___ftpack (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
               i2___wmul
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___ftge
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___ftmul (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___ftneg
           i2___ftsub
             i2___ftadd
               i2___ftpack
               i2_fround (ARG)
                 i2___awdiv
                   i2___awmod (ARG)
                 i2___awmod
                 i2___ftmul
                   ___awtoft (ARG)
                     i2___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       i2___ftpack
                     i2___ftpack (ARG)
                     i2___ftpack (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
                   i2___ftpack (ARG)
                   i2___wmul (ARG)
                     i2___awdiv (ARG)
                       i2___awmod (ARG)
                     i2___awmod (ARG)
                 i2___wmul
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
             i2___lltoft (ARG)
               i2___ftpack
           i2___fttol
             i2___ftmul (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___lldiv
           i2___llmod
             i2___lldiv (ARG)
           i2___lltoft
             i2___ftpack
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
           i2__div_to_l_
           i2__tdiv_to_l_
           i2_fround
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2_isdigit
           i2_putch
             i2_lcdNibble
           i2_scale
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
       i2___lcd_newline
         i2_lcdInst
           i2_lcdNibble
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___awdiv
           i2___awmod (ARG)
         i2___ftadd
           i2___ftpack
           i2_fround (ARG)
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftge
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftmul
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___ftneg
         i2___ftsub
           i2___ftadd
             i2___ftpack
             i2_fround (ARG)
               i2___awdiv
                 i2___awmod (ARG)
               i2___awmod
               i2___ftmul
                 ___awtoft (ARG)
                   i2___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     i2___ftpack
                   i2___ftpack (ARG)
                   i2___ftpack (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
               i2___wmul
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___lltoft (ARG)
             i2___ftpack
         i2___fttol
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___lldiv
         i2___llmod
           i2___lldiv (ARG)
         i2___lltoft
           i2___ftpack
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
         i2__div_to_l_
         i2__tdiv_to_l_
         i2_fround
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2_isdigit
         i2_putch
           i2_lcdNibble
         i2_scale
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
     _showInfo
       _captureKeypad
       i2___lcd_newline
         i2_lcdInst
           i2_lcdNibble
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___awdiv
           i2___awmod (ARG)
         i2___ftadd
           i2___ftpack
           i2_fround (ARG)
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftge
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftmul
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___ftneg
         i2___ftsub
           i2___ftadd
             i2___ftpack
             i2_fround (ARG)
               i2___awdiv
                 i2___awmod (ARG)
               i2___awmod
               i2___ftmul
                 ___awtoft (ARG)
                   i2___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     i2___ftpack
                   i2___ftpack (ARG)
                   i2___ftpack (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
               i2___wmul
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___lltoft (ARG)
             i2___ftpack
         i2___fttol
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___lldiv
         i2___llmod
           i2___lldiv (ARG)
         i2___lltoft
           i2___ftpack
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
         i2__div_to_l_
         i2__tdiv_to_l_
         i2_fround
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2_isdigit
         i2_putch
           i2_lcdNibble
         i2_scale
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
     _stopMoving
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___awdiv
           i2___awmod (ARG)
         i2___ftadd
           i2___ftpack
           i2_fround (ARG)
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftge
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftmul
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___ftneg
         i2___ftsub
           i2___ftadd
             i2___ftpack
             i2_fround (ARG)
               i2___awdiv
                 i2___awmod (ARG)
               i2___awmod
               i2___ftmul
                 ___awtoft (ARG)
                   i2___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     i2___ftpack
                   i2___ftpack (ARG)
                   i2___ftpack (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
               i2___wmul
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___lltoft (ARG)
             i2___ftpack
         i2___fttol
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___lldiv
         i2___llmod
           i2___lldiv (ARG)
         i2___lltoft
           i2___ftpack
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
         i2__div_to_l_
         i2__tdiv_to_l_
         i2_fround
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2_isdigit
         i2_putch
           i2_lcdNibble
         i2_scale
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
     i2___lcd_newline
       i2_lcdInst
         i2_lcdNibble
     i2___wmul
       i2___awdiv (ARG)
         i2___awmod (ARG)
       i2___awmod (ARG)
     i2_getTime
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___awdiv
         i2___awmod (ARG)
       i2___ftadd
         i2___ftpack
         i2_fround (ARG)
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___ftge
         ___awtoft (ARG)
           i2___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
           i2___ftpack (ARG)
         i2___ftmul (ARG)
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___ftmul
         ___awtoft (ARG)
           i2___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
           i2___ftpack (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___ftneg
       i2___ftsub
         i2___ftadd
           i2___ftpack
           i2_fround (ARG)
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___lltoft (ARG)
           i2___ftpack
       i2___fttol
         i2___ftmul (ARG)
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___lldiv
       i2___llmod
         i2___lldiv (ARG)
       i2___lltoft
         i2___ftpack
       i2___wmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
       i2__div_to_l_
       i2__tdiv_to_l_
       i2_fround
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
         i2___ftmul
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2_isdigit
       i2_putch
         i2_lcdNibble
       i2_scale
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
         i2___ftmul
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
   _stopMoving
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___awdiv
         i2___awmod (ARG)
       i2___ftadd
         i2___ftpack
         i2_fround (ARG)
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___ftge
         ___awtoft (ARG)
           i2___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
           i2___ftpack (ARG)
         i2___ftmul (ARG)
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___ftmul
         ___awtoft (ARG)
           i2___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
           i2___ftpack (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___ftneg
       i2___ftsub
         i2___ftadd
           i2___ftpack
           i2_fround (ARG)
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___lltoft (ARG)
           i2___ftpack
       i2___fttol
         i2___ftmul (ARG)
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___lldiv
       i2___llmod
         i2___lldiv (ARG)
       i2___lltoft
         i2___ftpack
       i2___wmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
       i2__div_to_l_
       i2__tdiv_to_l_
       i2_fround
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
         i2___ftmul
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2_isdigit
       i2_putch
         i2_lcdNibble
       i2_scale
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
         i2___ftmul
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     74      74       7       45.3%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     36      60       5       75.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     7E      7E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     152      34        0.0%
DATA                 0      0     152       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Feb 27 17:47:58 2017

         i2_I2C_Master_Start 5358           i2_I2C_Master_Write 532E                           _AD 5144  
               ___awdiv@sign 010B          ___wmul@multiplicand 0110                  __CFG_BORV$3 000000  
                 i2___ftpack 4572                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                  __CFG_OSC$HS 000000  
               ___ftadd@exp1 0138                 ___ftadd@exp2 0137                   i2___lltoft 4D90  
                        ?_AD 0001                 ___ftadd@sign 0136                          l417 52A8  
                        l551 0766                          l369 52C6                          l806 3270  
                        l910 30E8                          l903 3024                          l904 3068  
                        l861 2748                          l838 3BFC                          l935 5080  
                        l865 2782                          l867 27AA                          l876 2880  
                        l885 28AA                          l985 4560                          l995 474A  
               __CFG_CPB$OFF 000000                          _PEN 007E2A                 __CFG_CPD$OFF 000000  
                        _SEN 007E28          ?i2_I2C_Master_Start 0001          ?i2_I2C_Master_Write 0002  
               ___awmod@sign 0105                          wreg 000FE8                ___lcd_newline 5348  
                       ??_AD 0003                 __CFG_LVP$OFF 000000                 ___ftdiv@cntr 0016  
               ___ftdiv@sign 001B                 __CFG_WDT$OFF 000000                         l7031 27A0  
                       l7111 34C4                         l7041 27E2                         l7025 2790  
                       l7201 46A4                         l7121 3502                         l7051 282C  
                       l7019 2756                         l7107 34A6                         l7061 2874  
                       l7053 2838                         l7205 46B8                         l7117 34E4  
                       l7047 2810                         l7151 4454                         l7143 442A  
                       l7049 281E                         l7161 448A                         l7153 445A  
                       l7137 4414                         l7313 201E                         l7067 28D4  
                       l7059 2866                         l7411 319A                         l7307 1F58  
                       l7237 50E4                         l7077 2922                         l7501 46DE  
                       l7341 2FD0                         l7149 4448                         l7165 4498  
                       l7181 463C                         l7093 3458                         l7325 513A  
                       l7503 46EE                         l7431 3226                         l7335 2F96  
                       l7191 466C                         l7087 341E                         l7505 46F4  
                       l7441 3256                         l7169 44AC                         l7193 4672  
                       l7185 464C                         l7601 01A2                         _ADFM 007E07  
                       l5747 357C                         l7515 4A90                         l7443 3266  
                       l7435 323A                         l7419 31EE                         l7371 309E  
                       l7275 2698                         l7267 25B4                         l7461 4168  
                       l5765 360E                         l7509 4738                         l7517 4AA0  
                       l7381 30CE                         l7197 4696                         l7189 4660  
                       l7701 05EE                         l7621 0242                         l7605 01AA  
                       l5783 3674                         l5775 363E                         l7391 3120  
                       l7383 30DE                         l7375 30B2                         l7295 1DCE  
                       l7711 062A                         l7607 01E8                         l7481 44E4  
                       l7457 4128                         l7449 4EB4                         l5777 364E  
                       l5769 3622                         l7289 1D08                         l7713 0640  
                       l7553 0022                         l7483 44F4                         l7467 41AC  
                       l5779 3658                         l7299 1DF4                         l7811 0A0E  
                       l7731 0726                         l7723 068A                         l7707 061C  
                       l7651 03A8                         l7563 0058                         l7493 454E  
                       l7485 44FA                         l7397 3146                         l7813 0A26  
                       l7741 076A                         l7717 064E                         l7661 0438  
                       l7653 03D8                         l7645 0364                         l7637 02F4  
                       l7581 010C                         l7557 0038                         l6951 3B3E  
                       l7831 0AC8                         l7823 0A92                         l7751 07E0  
                       l7735 0734                         l7719 0662                         l7655 03EE  
                       l7591 015C                         l7559 004E                         l7825 0A9C  
                       l7737 0748                         l7729 0718                         l7681 0530  
                       l7665 0466                         l7649 0392                         l7585 0132  
                       l7577 0100                         l7569 0088                         l6963 3BB0  
                       l6955 3B52                         l7851 0BC4                         l7843 0B0A  
                       l7819 0A5A                         l7763 08D8                         l7747 078E  
                       l7675 04C4                         l7595 0170                         l7587 013E  
                       l7579 0106                         _ADON 007E10                         l6973 3C06  
                       l6965 3BE0                         l6957 3B60                         l7861 0C5A  
                       l7837 0AE4                         l7781 0976                         l7757 08BC  
                       l7693 0576                         l7765 08E6                         l7597 018A  
                       l7589 0144                         l7933 4FA8                         l7871 482A  
                       l6967 3BEE                         l6959 3B90                         l7839 0AF0  
                       l7847 0B30                         l7783 097C                         l7759 08CA  
                       l7679 052A                         l7863 0C70                         l7881 4858  
                       l7849 0B40                         l7857 0C3A                         l7777 094C  
                       l7697 05C6                         l7875 4834                         l6979 3C22  
                       l7859 0C52                         l7795 09C2                         l7797 09C8  
      __size_ofi2__div_to_l_ 0128                         _CW90 508E                         STR_1 FFF6  
                       STR_2 FCF3                         STR_3 FE40                         STR_4 FDAC  
                       STR_5 FD96                         STR_6 FEF9                         STR_7 FE6A  
                       STR_8 FE2B                         STR_9 FEE5                         _LATA 000F89  
                       _LATB 000F8A                         _LATC 000F8B                         _LATD 000F8C  
                       _LATE 000F8D                 printf@tmpval 0159                         u6131 3558  
                       u6150 35A2                         u7211 26F6                         u6155 3598  
                       _RCEN 007E2B                         u8005 4D60                         u7221 2714  
                       u8110 0288                         u8115 027C                         u7421 33FA  
                       u7600 50E2                         u7441 3434                         u8330 075E  
                       u7721 2F72                         u7741 2FAC                         u8607 48EE  
                       u8617 4B6E                         u8627 4F2E                         u8637 4F62  
                       u8647 4C82                         u8657 4C8C                         u8667 4CB8  
                       u8677 4CC2                         u8597 4F8E                         _PWMC 3F10  
              checkAA@sorted 007B                         _back 5262                         _main 4F6C  
               ___ftpack@arg 0100                         _mode 00D6                 ___ftpack@exp 0103  
                       _time 00D9                         fsr0h 000FEA                         fsr1h 000FE2  
                       fsr2h 000FDA                         fsr0l 000FE9                         indf2 000FDF  
                       fsr1l 000FE1                         fsr2l 000FD9                         btemp 007F  
               i2___ftadd@f1 0035                 i2___ftadd@f2 0038         ??i2_I2C_Master_Start 0002  
               i2___ftge@ff1 002B                 i2___ftge@ff2 002E     __size_ofi2___lcd_newline 0008  
       ??i2_I2C_Master_Write 0004                         prodh 000FF4                         prodl 000FF3  
            ReadRun@backruns 000B                         start 000E                __CFG_IESO$OFF 000000  
       __end_of_HexDecToDec2 4F26                 simulate@stop 0090              __end_ofi2_scale 2434  
               i2___ftneg@f1 0001                   ReadRun@add 000C              __end_ofi2_putch 5318  
              __CFG_MCLRE$ON 000000                 ___ftmul@cntr 0121                 i2___ftmul@f1 001C  
               i2___ftmul@f2 001F                 ___param_bank 000000                 ___ftmul@sign 0122  
               i2___ftsub@f1 0041                 i2___ftsub@f2 0044                 i2___fttol@f1 002B  
                 i2getTime@i 0006                  i2_lcdNibble 4DEC              __end_of_ReadRun 38EA  
               ___fttol@exp1 0138              __end_of_PermLog 4982                 i2___lltoft@c 0009  
               ___fttol@lval 0134                        ?_CW90 0071             ?_I2C_Master_Init 010D  
           ?_I2C_Master_Read 0001                        ?_PWMC 000F             ?_I2C_Master_Wait 0001  
           ?_I2C_Master_Stop 0001                        ?_back 0001                        ?_main 016D  
                      _ACKEN 007E2C                        _ACKDT 007E2D                        _CCW90 50EC  
            __end_of___awdiv 44B6                        _EEADR 000FA9              __end_of___ftadd 2948  
                      STR_10 FE55                        STR_11 FE16                        STR_12 FE94  
                      STR_20 FCDB                        STR_13 FE7F                        STR_21 FCAB  
                      STR_30 FF97                        STR_14 FF66                        STR_22 FE01  
                      STR_31 FDC2                        STR_23 FCC3                        STR_15 FC77  
                      STR_32 FF97                        STR_24 FD69                        STR_40 FD3B  
                      STR_16 FD0B                        STR_41 FF77                        STR_33 FF55  
                      STR_25 FDD7                        STR_17 FD23                        STR_50 FFEB  
                      STR_42 FFD2                        STR_26 FF97                        STR_18 FF0D  
                      STR_34 FEBD                        STR_43 FD82                        STR_51 FFDF  
                      STR_27 FED1                        STR_35 FEA9                        STR_19 FC92  
                      STR_28 FF97                        STR_52 FF44                        STR_36 FF32  
                      STR_44 FD80              __end_of___awmod 46C2                        STR_45 FFA7  
                      STR_37 FF20                        STR_29 FDEC                        STR_46 FFC4  
                      STR_38 FFB6                        STR_39 FD3D                        STR_47 FD54  
                      STR_48 FD52                        STR_49 FF87              __end_of___ftdiv 40E8  
            __end_of___ftneg 508E              __end_of_WriteEE 51BA              __end_of___lldiv 4572  
            __end_of___ftmul 3542              ___awdiv@divisor 0108              __end_of___llmod 475C  
            __end_of___ftsub 4EDE              __end_of___fttol 3686                        _LATC0 007C58  
                      _LATC1 007C59                        _LATC2 007C5A                        _LATC5 007C5D  
                      i2l212 5246                        i2l116 1936                        i2l302 5152  
                      i2l142 3CEA                        i2l215 5252                        i2l231 2D5C  
                      i2l311 3B1E                        i2l143 3C7A                        i2l260 3F48  
                      i2l423 51B0                        i2l417 52BE                        i2l278 4E90  
                      i2l551 128A                        i2l369 52DA                        i2l806 3A00  
                      i2l910 37A6                        i2l903 3718                        i2l904 3740  
                      i2l861 2DF4                        i2l838 4600                        i2l935 51F6  
                      i2l865 2E1E                        i2l876 2ECE              ___awdiv@counter 010A  
                      i2l885 2EEA                        i2l896 40B6                        i2l985 4A76  
                      i2l995 4D1E              __end_of_checkAA 43F8                        _PORTB 000F81  
               i2__div_to_l_ 38EA                        _TRISA 000F92                        _TRISB 000F93  
                      _TRISC 000F94                        _TRISD 000F95                        _TRISE 000F96  
              __CFG_PWRT$OFF 000000               ?___lcd_newline 0001                __CFG_WRT0$OFF 000000  
              __CFG_WRT1$OFF 000000                simulate@F3101 00D2                simulate@F3103 00CE  
              simulate@F3105 00CA                simulate@F3115 00BC                simulate@F3117 00B6  
              __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000                 ___lltoft@exp 0110  
            __end_of_lcdInst 530C               __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000  
            __end_of_getTime 4876               __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000  
             __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000  
              __CFG_WRTD$OFF 000000              __end_of_initLCD 4F6C               __CFG_EBTRB$OFF 000000  
                 i2isdigit@c 0003                ___awtoft@sign 000C              __end_of_dpowers FC09  
           __end_ofi2_ReadEE 52C6                   i2scale@scl 0031                        _scale 1B96  
            __end_of_isdigit 5144                ___ftpack@sign 0104                        _putch 52EC  
                      pclath 000FFA              __end_of_showRTC 48FE                        tablat 000FF5  
           __end_ofi2___ftge 47EC             __end_ofi2___wmul 51E0                        plusw1 000FE3  
                      plusw2 000FDB                        status 000FD8                simulate@start 009C  
           __end_ofi2_fround 2B8E           __size_ofi2___awdiv 0084           __size_ofi2___ftadd 01AC  
         __size_ofi2___awmod 0070               __CFG_PBADEN$ON 000000                i2printf@width 006E  
         __size_ofi2___ftneg 0024           __size_ofi2___lldiv 0082           __size_ofi2___ftmul 00F4  
         __size_ofi2___llmod 0066           __size_ofi2___ftsub 0040           __size_ofi2___fttol 00F4  
           __end_ofi2_printf 16DC                 __end_of_CW90 50BE                  ReadRun@time 0005  
               __end_of_PWMC 4002              __initialization 527E            i2___lldiv@divisor 0005  
               __end_of_back 527E           __size_ofi2_lcdInst 000C                 __end_of_main 4FB0  
         __size_ofi2_getTime 0076            i2___lldiv@counter 000D                i2___ftmul@exp 0025  
                 i2printf@ap 005B                   i2printf@cp 0056                ReadEE@address 0100  
                     ??_CW90 0073           __size_ofi2_isdigit 001E                       ??_PWMC 0015  
                ?i2___ftpack 0001                       ??_back 0001                  ?i2___lltoft 0009  
                     ??_main 0172                ___fttol@sign1 0133                       ?_CCW90 0071  
              __activetblptr 000002         __size_of__tdiv_to_l_ 019E            ?_I2C_Master_Start 0001  
          ?_I2C_Master_Write 0101                    CCW90@port 0071           ??_I2C_Master_Start 0101  
                     _ADCON0 000FC2                       _ADCON1 000FC1           ??_I2C_Master_Write 0103  
           ___llmod@dividend 010D                       ?_scale 0123                       _ADRESH 000FC4  
                     _EEADRH 000FAA                       _ADRESL 000FC3                       _EEDATA 000FA8  
                     _EECON2 000FA7             ___awdiv@dividend 0106              i2lcdNibble@data 0002  
           __end_of___awtoft 5028                       ?_putch 0001             __end_of___ftpack 3C30  
            i2lcdNibble@temp 0001             __end_of___lltoft 4B04                       _INT1IE 007F83  
                     _INT1IF 007F80             __end_of_WriteRun 33E4                       _CVRCON 000FB5  
                     i2l4303 2E2C                       i2l4231 49C4                       i2l4223 49A6  
                     i2l5103 0DCA                       i2l4161 45B8                       i2l4153 4582  
                     i2l4241 49E4                       i2l4233 49C8                       i2l4217 4996  
                     i2l4331 2E9A                       i2l5203 1156                       i2l5123 0E5A  
                     i2l5107 0DD0                       i2l5043 5004                       i2l4165 45CE  
                     i2l4157 4590                       i2l4325 2E7E                       i2l4229 49BC  
                     i2l4245 49EE                       i2l4261 4C06                       i2l4501 236C  
                     i2l5221 11AC                       i2l5213 1182                       i2l5109 0E0A  
                     i2l5061 0CC0                       i2l4167 45EC                       i2l4159 459A  
                     i2l4327 2E88                       i2l4319 2E5C                       i2l4271 4C28  
                     i2l5215 1192                       i2l5231 1250                       i2l5151 0F72  
                     i2l5071 0CF4                       i2l5055 0C9C                       i2l4169 45F6  
                     i2l4345 2F06                       i2l4337 2EBC                       i2l4329 2E92  
                     i2l4249 49FC                       i2l4273 4C2C                       i2l4281 4C4A  
                     i2l4265 4C12                       i2l5321 1510                       i2l5313 14D8  
                     i2l5233 125A                       i2l5225 11C8                       i2l5209 1176  
                     i2l5153 0F82                       i2l5081 0D56                       i2l5065 0CC6  
                     i2l4355 2F36                       i2l4339 2EC6                       i2l4523 3926  
                     i2l4371 3D78                       i2l4507 2410                       i2l5315 14EE  
                     i2l5243 128E                       i2l5219 119E                       i2l5163 0FF4  
                     i2l5155 0FB0                       i2l5147 0F4E                       i2l5139 0EEA  
                     i2l5091 0D80                       i2l5083 0D5A                       i2l5059 0CAE  
                     i2l5411 3F3A                       i2l4517 3908                       i2l4613 376C  
                     i2l4285 4C58                       i2l4277 4C40                       i2l4269 4C20  
                     i2l4365 3D50                       i2l4461 2A8E                       i2l5341 1578  
                     i2l5333 155A                       i2l5325 1534                       i2l5261 13D4  
                     i2l5253 12F6                       i2l5237 1266                       i2l5181 10D0  
                     i2l5157 0FC0                       i2l5093 0D92                       i2l4631 478C  
                     i2l4623 3794                       i2l4711 523C                       i2l5351 15B2  
                     i2l5327 153C                       i2l5239 1274                       i2l5183 10D4  
                     i2l5167 1018                       i2l5087 0D70                       i2l5079 0D52  
                     i2l5431 3FA2                       i2l5423 3F72                       i2l6311 428C  
                     i2l6231 4370                       i2l6223 4350                       i2l4641 47E8  
                     i2l4297 2E02                       i2l4721 4A28                       i2l4561 39D6  
                     i2l4545 3998                       i2l4537 3968                       i2l4625 37A0  
                     i2l4617 377C                       i2l4385 3DAA                       i2l5353 162A  
                     i2l5361 16AA                       i2l5345 158C                       i2l5265 13E0  
                     i2l5249 12A6                       i2l5177 106C                       i2l5097 0DA4  
                     i2l5089 0D7A                       i2l5441 3FDC                       i2l6401 4E5E  
                     i2l4635 47BC                       i2l4723 4A34                       i2l4395 3DD2  
                     i2l4483 2178                       i2l5363 16B0                       i2l5339 1570  
                     i2l5283 1460                       i2l5259 13CA                       i2l5195 110C  
                     i2l5267 13EA                       i2l5099 0DB8                       i2l6251 43B0  
                     i2l4653 4FC6                       i2l4733 4A68                       i2l4725 4A38  
                     i2l4741 4CDC                       i2l4557 39C6                       i2l4389 3DBA  
                     i2l4469 2B4E                       i2l4493 2240                       i2l5349 15A6  
                     i2l5285 1464                       i2l5365 16C0                       i2l6421 2BCE  
                     i2l5445 3FEA                       i2l6333 42E6                       i2l8101 43DE  
                     i2l6245 43A6                       i2l5519 527A                       i2l4663 3E48  
                     i2l4743 4CE8                       i2l4567 39EE                       i2l4583 36DE  
                     i2l4399 3DE2                       i2l5359 1694                       i2l5279 143A  
                     i2l5199 113C                       i2l5439 3FD2                       i2l6327 42D4  
                     i2l6319 42B0                       i2l8103 43EE                       i2l6239 4394  
                     i2l4681 3EAE                       i2l4745 4CEC                       i2l4569 39FA  
                     i2l4577 36B2                       i2l4489 221C                       i2l5297 149C  
                     i2l6433 2C78                       i2l5449 3FFA                       i2l5473 3AA6  
                     i2l8105 431E                       i2l4691 3ED6                       i2l4755 4D96  
                     i2l5299 14A0                       i2l6451 2D22                       i2l6427 2BFA  
                     i2l6419 2BC0                       i2l8107 432E                       i2l6339 42F0  
                     i2l6283 4210                       i2l6275 41EC                       i2l6267 41C8  
                     i2l6531 4BBA                       i2l6603 1842                       i2l4693 3EE2  
                     i2l4685 3EBE                       i2l4749 4D10                       i2l4757 4DA2  
                     i2l6445 2CE8                       i2l6461 2DA6                       i2l6621 18B6  
                     i2l6605 184E                       i2l4695 3EE8                       i2l6439 2CAE  
                     i2l5479 3AB0                       i2l6295 422C                       i2l6527 4BB2  
                     i2l6623 18C2                       i2l6615 1892                       i2l6457 2D5E  
                     i2l4873 4052                       i2l6289 4222                       i2l6537 4BD6  
                     i2l6633 1906                       i2l4699 3EFE                       i2l6459 2D68  
                     i2l6475 32A4                       i2l4867 402A                       i2l4893 4090  
                     i2l6653 19BA                       i2l6741 3C80                       i2l5855 518E  
                     i2l6639 192A                       i2l8097 425A                       i2l6577 1760  
                     i2l8099 426A                       i2l6683 1B1A                       i2l6763 3CC8  
                     i2l6597 181E                       i2l6757 3CB6                       i2l6749 3CA2  
                  ??i2_scale 002E                       u425_41 3696                       u427_41 36C2  
                     u439_41 3E2C                       u376_41 2DC0                       u377_41 2DD4  
                     u481_41 403A                       u397_41 3D38                       u399_41 3D60  
                     u479_41 4012                    ??i2_putch 0003                       _SSPADD 000FC8  
                     _TRISC3 007CA3                       _TRISC4 007CA4                       _SSPBUF 000FC9  
                  AD@channel 0005                checkV@voltage 0071       __size_ofi2__tdiv_to_l_ 0132  
                  ??_ReadRun 0007                       _ReadEE 5298                    ??_PermLog 0080  
                     _Latest 00D8               __CFG_XINST$OFF 000000        __end_of_captureKeypad 5262  
               i2_scale$1661 002E             __end_of__powers_ FC30                       ___ftge 40E8  
                     ___wmul 5028                       _check9 4274                       _checkC 41B0  
                  ??___awdiv 010A                       _checkV 3A12                    ??___ftadd 0133  
             __CFG_STVREN$ON 000000                    ??___awmod 0104                    ??___ftdiv 0013  
                  ??___ftneg 0103                    ??_WriteEE 0004                    ??___lldiv 0108  
          ??i2___lcd_newline 0004                    ??___ftmul 011A                    ??___llmod 0115  
                  ??___ftsub 013F                    ??___fttol 012E                    ??_checkAA 007D  
                     _fround 2434                       clear_0 5284             ___awdiv@quotient 010C  
            ___awmod@divisor 0102              ___awmod@counter 0104                    ??_lcdInst 0102  
                     _printf 0012                    ??_getTime 0105               i2___awdiv@sign 000C  
            ??___lcd_newline 0103        ___ftmul@f3_as_product 011E                  PermLog@time 0087  
                  ??_initLCD 0103                    ??_isdigit 0100            __end_ofi2___awdiv 4A06  
          __end_ofi2___ftadd 2F5C            __end_ofi2___awmod 4C62               i2___ftadd@exp1 0040  
             i2___ftadd@exp2 003F            __end_ofi2___ftneg 5204            __end_ofi2___lldiv 4A88  
          __end_ofi2___ftmul 3E1C             __end_of_showInfo 2DB0            __end_ofi2___llmod 4D30  
          __end_ofi2___ftsub 4FF0            __end_ofi2___fttol 3F10               i2___ftadd@sign 003E  
               __mediumconst FBE0                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8             __end_of_simulate 1B96                    ??_showRTC 016B  
             i2___awmod@sign 0006            __end_ofi2_lcdInst 5324            __end_ofi2_getTime 4BF2  
             simulate@period 00A4               simulate@portCW 0084        __size_of_HexDecToDec2 0048  
          __end_ofi2_isdigit 5244               simulate@sorted 00A0                   __accesstop 0080  
    __end_of__initialization 528A                   ___ftadd@f1 012D                   ___ftadd@f2 0130  
        __size_ofi2___ftpack 00AE               i2printf@tmpval 005F                   ___ftge@ff1 0100  
                 ___ftge@ff2 0103                __end_of_CCW90 511A          __size_ofi2___lltoft 005C  
              ___rparam_used 000001                   ___ftdiv@f1 000D                   ___ftdiv@f2 0010  
                 ___ftdiv@f3 0017                   ___ftneg@f1 0100                   ___awtoft@c 0009  
             i2___ftpack@arg 0001           i2__tdiv_to_l_@exp1 000F            i2___llmod@divisor 0012  
             i2___ftpack@exp 0004           i2__tdiv_to_l_@cntr 000E            i2___llmod@counter 0016  
         i2__tdiv_to_l_@quot 000A                   ___ftmul@f1 0114                   ___ftmul@f2 0117  
                 ___ftsub@f1 0139                   ___ftsub@f2 013C                   ___fttol@f1 012A  
             __pcstackCOMRAM 0001           i2___lldiv@dividend 0001                   ___lltoft@c 0108  
             i2___ftmul@cntr 0029                __end_of_scale 2044               i2___ftmul@sign 002A  
                  ?i2_ReadEE 0001                __end_of_putch 52FC                  i2printf@idx 0058  
                i2printf@len 0059                  i2printf@exp 0063                  i2printf@val 0065  
                 __end_of_AD 516E               i2___fttol@exp1 0039               i2___fttol@lval 0035  
                    ??_CCW90 0073                    ?i2___ftge 002B                    ?i2___wmul 000F  
              i2__tdiv_to_l_ 3686           __size_of_lcdNibble 0068                   __div_to_l_ 30FA  
                i2putch@data 0003                 _HexDecToDec2 4EDE                    ?i2_fround 002B  
          HexDecToDec2@digit 001C                    ?i2_printf 0047            HexDecToDec2@tenth 001A  
            __div_to_l_@exp1 010B              __div_to_l_@cntr 010A                      ??_scale 0126  
             i2___lltoft@exp 0011              __div_to_l_@quot 0106                      ??_putch 0102  
         i2___lldiv@quotient 0009                   back@result 0002                   __pbssBANK0 00B6  
           i2__tdiv_to_l_@f1 0001             i2__tdiv_to_l_@f2 0004                __div_to_l_@f1 0100  
              __div_to_l_@f2 0103                      ?_ReadEE 0100                 stopMoving@em 0075  
                    ?___ftge 0100                 WriteRun@time 0017                 ?i2_lcdNibble 0001  
                    ?___wmul 010E                      ?_check9 007B                      ?_checkC 007B  
                    ?_checkV 0071                   ??i2_ReadEE 0003                      ?_fround 0123  
                  ?___awtoft 0009                    ?___ftpack 0100                      ?_printf 013F  
                  ?___lltoft 0108                    ?_WriteRun 0015               ?i2__tdiv_to_l_ 0001  
                 ??i2___ftge 0031                   ??i2___wmul 0013               WriteRun@sorted 0015  
                 ??i2_fround 002E                   ??i2_printf 004D                      _SSPCON1 000FC6  
                    _SSPCON2 000FC5                      _SSPSTAT 000FC7                      i2_scale 2044  
                    i2_putch 530C               _stopMoving$551 0073  __size_ofi2_I2C_Master_Start 0008  
          __end_of_lcdNibble 4CCA                      _ReadRun 37B8  __size_ofi2_I2C_Master_Write 000A  
                    _PermLog 48FE            __end_of__npowers_ FC57                      __Hparam 0000  
                 _scale$1446 0126              __size_of_ReadEE 0018                      __Lparam 0000  
                 _initLatest 5204                    ?_showInfo 0071              __size_of___ftge 00C8  
                  ?_simulate 0001                      ___awdiv 43F8                      ___ftadd 26E0  
                    ___awmod 4620                      ___ftdiv 4002                      ___ftneg 505E  
                    _WriteEE 5194                      ___lldiv 44B6              __size_of___wmul 0036  
                    ___ftmul 33E4              __size_of_check9 00C4                      ___llmod 46C2  
                    ___ftsub 4E92                      ___fttol 3542              __size_of_checkC 00C4  
            __size_of_checkV 0112                      _checkAA 4338                      __pcinit 527E  
               ??i2___ftpack 0006                   ??___awtoft 000C                   ??___ftpack 0105  
            __size_of_fround 02AC      i2___ftmul@f3_as_product 0026                      __ramtop 1000  
                 _initialize 4B04                 ??i2___lltoft 000D                      _lcdInst 52FC  
                 ??___lltoft 010C                   ??_WriteRun 0019                      __ptext0 4F6C  
                    __ptext1 4876                      __ptext2 0012                      __ptext3 1B96  
                    _getTime 47EC                      __ptext4 52EC                      __ptext5 511A  
                    __ptext6 2434                      __ptext7 5028                      __ptext8 33E4  
                    __ptext9 4620              __size_of_printf 0C7E                 PermLog@F3083 00C2  
              i2_fround$1660 002E                i2_fround$1659 0031                      _initLCD 4F26  
          __end_of_hexpowers FC77                  ?__div_to_l_ 0100                      _dpowers FBE1  
               i2fround@prec 0034                      _isdigit 511A             ___awmod@dividend 0100  
                 _keypressed 0008     __size_of_I2C_Master_Init 0060     __size_of_I2C_Master_Read 002E  
                    _showRTC 4876     __size_of_I2C_Master_Wait 0014     __size_of_I2C_Master_Stop 0008  
             __pintcode_body 3C30         end_of_initialization 528A              i2___lcd_newline 5360  
              __Lmediumconst FBE0                      int_func 3C30          i2___wmul@multiplier 000F  
         __end_ofi2___ftpack 4620    __size_of_I2C_Master_Start 0008           __end_ofi2___lltoft 4DEC  
  __size_of_I2C_Master_Write 000A              ___lldiv@divisor 0104              ___lldiv@counter 010C  
                  _PWMC$1440 0018                    _PWMC$1441 0019                    _PWMC$1439 0017  
                 ??_showInfo 0075                      printf@c 016A                      printf@f 013F  
           I2C_Master_Init@c 010D             I2C_Master_Read@a 0101                      postdec2 000FDD  
                 ??_simulate 0080                      postinc0 000FEE                      postinc2 000FDE  
             __tdiv_to_l_@f1 0100               __tdiv_to_l_@f2 0103              ??i2__tdiv_to_l_ 0007  
              ??__tdiv_to_l_ 0106                    _PORTBbits 000F81                  PWMC@widthus 000F  
            simulate@portCCW 008A            i2_I2C_Master_Read 516E            i2_I2C_Master_Wait 52DA  
          i2_I2C_Master_Stop 5350                    i2___awdiv 4982                    i2___ftadd 2DB0  
                  i2___awmod 4BF2                    i2___ftneg 51E0                    i2___lldiv 4A06  
                  i2___ftmul 3D28                    i2___llmod 4CCA                    i2___ftsub 4FB0  
                  i2___fttol 3E1C           ?i2_I2C_Master_Read 0001           ?i2_I2C_Master_Wait 0001  
         ?i2_I2C_Master_Stop 0001                    i2_lcdInst 5318                    i2_getTime 4B7C  
                ___ftdiv@exp 001A                  printf@width 0168              PermLog@backruns 0086  
         i2___llmod@dividend 000E           i2___awdiv@dividend 0007                   _stopMoving 4E42  
        ??i2_I2C_Master_Read 0002              i2___ftpack@sign 0005                    i2_isdigit 5226  
        ??i2_I2C_Master_Wait 0001          ??i2_I2C_Master_Stop 0002          __size_of__div_to_l_ 0188  
              ReadRun@sorted 0003                  simulate@now 0098                 check9@sorted 007B  
                ___ftmul@exp 011D               __end_of_ReadEE 52B0                  ?_initLatest 0001  
             __end_of___ftge 41B0               __end_of___wmul 505E               __end_of_check9 4338  
             __end_of_checkC 4274               __end_of_checkV 3B24         __size_ofi2_lcdNibble 0056  
                ?_initialize 0001                i2lcdInst@data 0003                 checkC@sorted 007B  
             __end_of_fround 26E0            __size_ofi2_ReadEE 0016             i2___wmul@product 0013  
             __end_of_printf 0C90                i2_printf$1662 0053                 i2printf@flag 0069  
            i2ReadEE@address 0001    __end_ofi2_I2C_Master_Read 5194                 i2printf@fval 006B  
  __end_ofi2_I2C_Master_Wait 52EC        __end_of___lcd_newline 5350                 i2printf@prec 005D  
        start_initialization 527E    __end_ofi2_I2C_Master_Stop 5358            __size_ofi2___ftge 0090  
                ?_keypressed 0001           i2___awdiv@quotient 000D            __size_ofi2___wmul 0026  
        __end_of__tdiv_to_l_ 30FA      __end_ofi2___lcd_newline 5368                    i2printf@c 0070  
                  i2printf@f 0047       __size_of_captureKeypad 001E        i2I2C_Master_Read@temp 0003  
            i2___fttol@sign1 0034            __size_ofi2_fround 0246                   ?i2___awdiv 0007  
                 ?i2___ftadd 0035                   ?i2___awmod 0001                   ?i2___ftneg 0001  
                 ?i2___lldiv 0001                   ?i2___ftmul 001C                   ?i2___llmod 000E  
                 ?i2___ftsub 0041                   ?i2___fttol 002B                i2getTime@time 0004  
          __size_ofi2_printf 0A4C            ??_I2C_Master_Init 0111            ??_I2C_Master_Read 0101  
          ??_I2C_Master_Wait 0100                   ?i2_lcdInst 0001            ??_I2C_Master_Stop 0101  
                 ?i2_getTime 0004              ___llmod@divisor 0111              ___llmod@counter 0115  
                _checkV$1658 0078                   ?i2_isdigit 0001                     ??_ReadEE 0102  
                   CW90@port 0071                     ??___ftge 0106                     ??___wmul 0112  
                   ??_check9 007D                     ??_checkC 007D                     ??_checkV 0076  
           __CFG_LPT1OSC$OFF 000000                     ??_fround 0126                     ??_printf 0147  
                WriteEE@data 0003                   fround@prec 012C                ?i2__div_to_l_ 0001  
          __size_of___awtoft 0038            __size_of___ftpack 010C            __size_of___lltoft 007C  
          __size_of_WriteRun 0162                __pcstackBANK0 0080                __pcstackBANK1 0100  
               _isdigit$1086 0101          __size_of_initLatest 0022                     ?i2_scale 002B  
                   ?i2_putch 0001          __size_of_initialize 0078                  ?_stopMoving 0001  
           _I2C_Master_Start 5340                     ?_ReadRun 0003          i2I2C_Master_Write@d 0002  
           _I2C_Master_Write 5324                     ?_PermLog 0001            __CFG_CCP2MX$PORTC 000000  
                WriteRun@add 001B                _captureKeypad 5244          __size_of_keypressed 3D20  
                  __pintcode 0008                __pmediumconst FBE0                    _lcdNibble 4C62  
                   ?___awdiv 0106                     ?___ftadd 012D                     ?___awmod 0100  
                   ?___ftdiv 000D                     ?___ftneg 0100                     ?_WriteEE 0001  
                   ?___lldiv 0100                     ?___ftmul 0114                     ?___llmod 010D  
                   ?___ftsub 0139                    __npowers_ FC30                     ?___fttol 012A  
          __size_of_showInfo 0222                     ?_checkAA 007B            __size_of_simulate 04BA  
                   ?_lcdInst 0001                  __tdiv_to_l_ 2F5C                     ?_getTime 0103  
                   PWMC@port 0013               ??i2__div_to_l_ 0007               __size_of_CCW90 002E  
               ??__div_to_l_ 0106                     ?_initLCD 0001                     ?_isdigit 0001  
 __size_ofi2_I2C_Master_Read 0026   __size_ofi2_I2C_Master_Wait 0012   __size_ofi2_I2C_Master_Stop 0008  
                  checkV@max 0073                     ?_showRTC 0001                    _hexpowers FC57  
           ?i2___lcd_newline 0001                  ??i2___awdiv 000B                  ??i2___ftadd 003B  
                ??i2___awmod 0005                  ??i2___ftneg 0004                  ??i2___lldiv 0009  
                ??i2___ftmul 0022               __size_of_scale 04AE                  ??i2___llmod 0016  
                ??i2___ftsub 0047                  ??i2___fttol 002F               __size_of_putch 0010  
                __size_of_AD 002A   __end_ofi2_I2C_Master_Start 5360   __end_ofi2_I2C_Master_Write 5338  
                ??i2_lcdInst 0003                  ??i2_getTime 0006               ___wmul@product 0112  
                   _LATDbits 000F8C                  ??i2_isdigit 0001                     i2u441_40 3E66  
                   i2u441_45 3E5E           __end_of__div_to_l_ 3282                     i2u514_40 0E92  
                   i2u514_45 0E88               ?_captureKeypad 0001                     _PIR2bits 000FA1  
                   i2u536_40 1284                     i2u705_40 19B0                     i2u706_40 1B10  
                   i2u570_45 3FAA                     i2u570_46 3FAC                     i2u628_40 518C  
                   i2u573_45 3FDA                     i2u573_46 3FDC                     i2u567_45 3F7A  
                   i2u567_46 3F7C                     i2u690_45 4EEA                     i2u694_40 3298  
                   i2u870_47 17B0                     i2u871_47 1862                     i2u880_47 4960  
                   i2u872_47 18D6                     i2u697_41 17E0                     i2u881_47 4E04  
                   i2u873_47 195C                     i2u698_41 17F2                     i2u882_47 4E0E  
                   i2u874_47 1A26                     i2u883_47 4E30                     i2u875_47 1AF4  
                   i2u884_47 4E3A                     i2u876_47 1B56                     i2u868_47 1740  
                   i2u877_47 4E7C                     i2u869_47 1782                     i2u878_47 3A88  
                   i2u879_47 3FEC             __CFG_WDTPS$32768 000000                   PWMC@cycles 0011  
                 ?_lcdNibble 0001              i2__div_to_l_@f1 0001              i2__div_to_l_@f2 0004  
                   i2_ReadEE 52B0                   _ADCON0bits 000FC2            ___wmul@multiplier 010E  
                   i2___ftge 475C                     i2___wmul 51BA                lcdNibble@data 0101  
                 printf@flag 0163                 testADC@F3128 00C6                lcdNibble@temp 0100  
                 printf@fval 0165                   printf@prec 0157                   simulate@AA 0092  
        __size_of_stopMoving 0050                   simulate@V9 0096            i2___awdiv@divisor 0009  
                   i2_fround 2948            i2___awdiv@counter 000B                     i2_printf 0C90  
      captureKeypad@keypress 0003          I2C_Master_Read@temp 0102           i2___awmod@dividend 0001  
           __size_ofi2_scale 03F0             __size_ofi2_putch 000C                   _EECON1bits 000FA6  
         keypressed@keypress 007E               showInfo@sorted 0073                     __Hrparam 0000  
           __size_of_ReadRun 0132                     __Lrparam 0000             __size_of_PermLog 0084  
               ??_initLatest 0102           __CFG_BOREN$SBORDIS 000000             __size_of___awdiv 00BE  
           __size_of___ftadd 0268             __size_of___awmod 00A2             __size_of___ftdiv 00E6  
           __size_of___ftneg 0030        i2___wmul@multiplicand 0011             __size_of_WriteEE 0026  
           __size_of___lldiv 00BC             __size_of___ftmul 015E             __size_of___llmod 009A  
           __size_of___ftsub 004C             __size_of___fttol 0144                 ??_initialize 0115  
                   ___awtoft 4FF0                     ___ftpack 3B24             __size_of_checkAA 00C0  
                _fround$1444 0129                  _fround$1445 0126                     ___lltoft 4A88  
      __end_ofi2__tdiv_to_l_ 37B8                     _WriteRun 3282           i2I2C_Master_Read@a 0002  
           __size_of_lcdInst 0010             __size_of_getTime 008A              HexDecToDec2@hex 0015  
            _I2C_Master_Init 4D30              _I2C_Master_Read 50BE             __size_of_initLCD 0046  
                   back@runs 0001                ?_HexDecToDec2 0015              _I2C_Master_Wait 52C6  
            _I2C_Master_Stop 5338                 ??_keypressed 00A6             __size_of_isdigit 002A  
                   __ptext10 43F8                     __ptext11 2F5C                     __ptext20 40E8  
                   __ptext12 30FA                     __ptext21 47EC                     __ptext13 4A88  
                   __ptext30 5298                     __ptext22 5324                     __ptext14 46C2  
                   __ptext31 4F26                     __ptext23 5338                     __ptext15 3542  
                   __ptext40 5350                     __ptext32 52FC                     __ptext24 5340  
                   __ptext16 4E92                     __ptext41 5358                     __ptext33 4C62  
                   __ptext25 50BE                     __ptext17 26E0                     __ptext50 4FF0  
                   __ptext42 516E                     __ptext34 4D30                     __ptext26 52C6  
                   __ptext18 3B24                     __ptext51 5144                     __ptext43 52DA  
                   __ptext35 44B6                     __ptext27 5348                     __ptext19 505E  
                   __ptext60 0C90                     __ptext52 3282                     __ptext44 4E42  
                   __ptext28 4B04                     __ptext61 2044                     __ptext53 5194  
                   __ptext45 41B0                     __ptext37 16DC                     __ptext29 5204  
                   __ptext70 38EA                     __ptext62 530C                     __ptext54 4EDE  
                   __ptext46 4338                     __ptext38 4B7C                     __ptext71 4D90  
                   __ptext63 5226                     __ptext55 508E                     __ptext47 4274  
                   __ptext39 532E                     __ptext80 5360                     __ptext72 4CCA  
                   __ptext64 2948                     __ptext56 50EC                     __ptext48 3A12  
                   __ptext81 5318                     __ptext73 4A06                     __ptext65 51BA  
                   __ptext57 3F10                     __ptext49 4002                     __ptext82 4DEC  
                   __ptext74 3E1C                     __ptext66 3D28                     __ptext58 48FE  
                   __ptext83 5244                     __ptext75 4FB0                     __ptext67 4BF2  
                   __ptext59 2B8E                     __ptext84 37B8                     __ptext76 2DB0  
                   __ptext68 4982                     __ptext85 52B0                     __ptext77 4572  
                   __ptext69 3686                     __ptext86 5262                     __ptext78 51E0  
                   __ptext79 475C             __size_of_showRTC 0088                     __powers_ FC09  
         __end_of_initLatest 5226                __size_of_CW90 0030                __size_of_PWMC 00F2  
             i2_isdigit$1086 0002                __size_of_back 001C                __size_of_main 0044  
       __end_ofi2__div_to_l_ 3A12           __end_of_initialize 4B7C              ??_captureKeypad 0003  
                   _showInfo 2B8E                ??i2_lcdNibble 0001                  ??_lcdNibble 0100  
                   getTime@i 0105                     _simulate 16DC           __end_of_keypressed 3D28  
                   int$flags 007F                    printf@idx 0150                    printf@len 0153  
                   main@argc 016D                    printf@exp 015D                     main@argv 016F  
                  printf@val 015F                    simulate@C 0094            i2___awmod@divisor 0003  
             ??_HexDecToDec2 0017                    putch@data 0102            i2___awmod@counter 0005  
   __end_of_I2C_Master_Start 5348     __end_of_I2C_Master_Write 532E                   _INTCONbits 000FF2  
              PermLog@sorted 0082                PWMC@countdown 001A                     isdigit@c 0102  
              _simulate$1657 0082                     scale@scl 0129                     intlevel2 0000  
           __tdiv_to_l_@exp1 010E             __tdiv_to_l_@cntr 010D             __tdiv_to_l_@quot 0109  
           ___lldiv@dividend 0100                 ??_stopMoving 0071       __size_of___lcd_newline 0008  
                   printf@ap 0155                     printf@cp 0151      __end_of_I2C_Master_Init 4D90  
    __end_of_I2C_Master_Read 50EC      __end_of_I2C_Master_Wait 52DA      __end_of_I2C_Master_Stop 5340  
                lcdInst@data 0102                 showInfo@time 0071                 showInfo@stop 007C  
               showInfo@type 007A                 ?__tdiv_to_l_ 0100                  _printf$1447 014D  
        __end_ofi2_lcdNibble 4E42             ___lldiv@quotient 0108            I2C_Master_Write@d 0101  
         __end_of_stopMoving 4E92               WriteEE@address 0001                  getTime@time 0103  
          i2__div_to_l_@exp1 000C            i2__div_to_l_@cntr 000B            i2__div_to_l_@quot 0007  

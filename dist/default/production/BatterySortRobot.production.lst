

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sat Mar 25 19:26:34 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1
    67                           	psect	text55,global,reloc=2,class=CODE,delta=1
    68                           	psect	text56,global,reloc=2,class=CODE,delta=1
    69                           	psect	text57,global,reloc=2,class=CODE,delta=1
    70                           	psect	text58,global,reloc=2,class=CODE,delta=1
    71                           	psect	text59,global,reloc=2,class=CODE,delta=1
    72                           	psect	text60,global,reloc=2,class=CODE,delta=1
    73                           	psect	text61,global,reloc=2,class=CODE,delta=1
    74                           	psect	text62,global,reloc=2,class=CODE,delta=1
    75                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    76                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    77                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    78  0000                     
    79                           ; Version 1.41
    80                           ; Generated 25/01/2017 GMT
    81                           ; 
    82                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution.
    96                           ; 
    97                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    98                           ;        software without specific prior written permission.
    99                           ; 
   100                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   101                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   102                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   103                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   104                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   105                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   106                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   107                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   108                           ; 
   109                           ; 
   110                           ; Code-generator required, PIC18F4620 Definitions
   111                           ; 
   112                           ; SFR Addresses
   113  0000                     
   114                           	psect	mediumconst
   115  00FDAC                     __pmediumconst:
   116                           	opt stack 0
   117  00FDAC  00                 	db	0
   118  00FDAD                     _dpowers:
   119                           	opt stack 0
   120  00FDAD  0001               	dw	1
   121  00FDAF  000A               	dw	10
   122  00FDB1  0064               	dw	100
   123  00FDB3  03E8               	dw	1000
   124  00FDB5  2710               	dw	10000
   125  00FDB7                     __end_of_dpowers:
   126                           	opt stack 0
   127  00FDB7                     _hexpowers:
   128                           	opt stack 0
   129  00FDB7  0001               	dw	1
   130  00FDB9  0010               	dw	16
   131  00FDBB  0100               	dw	256
   132  00FDBD  1000               	dw	4096
   133  00FDBF                     __end_of_hexpowers:
   134                           	opt stack 0
   135  0000                     _PIR2bits	set	4001
   136  0000                     _EECON2	set	4007
   137  0000                     _EEDATA	set	4008
   138  0000                     _EECON1bits	set	4006
   139  0000                     _EEADR	set	4009
   140  0000                     _EEADRH	set	4010
   141  0000                     _SSPBUF	set	4041
   142  0000                     _SSPADD	set	4040
   143  0000                     _SSPCON2	set	4037
   144  0000                     _SSPCON1	set	4038
   145  0000                     _SSPSTAT	set	4039
   146  0000                     _ADRESL	set	4035
   147  0000                     _ADRESH	set	4036
   148  0000                     _ADCON0bits	set	4034
   149  0000                     _LATDbits	set	3980
   150  0000                     _PORTBbits	set	3969
   151  0000                     _PORTB	set	3969
   152  0000                     _INTCONbits	set	4082
   153  0000                     _CVRCON	set	4021
   154  0000                     _ADCON1	set	4033
   155  0000                     _ADCON0	set	4034
   156  0000                     _LATE	set	3981
   157  0000                     _LATD	set	3980
   158  0000                     _LATC	set	3979
   159  0000                     _LATB	set	3978
   160  0000                     _LATA	set	3977
   161  0000                     _TRISE	set	3990
   162  0000                     _TRISD	set	3989
   163  0000                     _TRISC	set	3988
   164  0000                     _TRISB	set	3987
   165  0000                     _TRISA	set	3986
   166  0000                     _ACKEN	set	32300
   167  0000                     _ACKDT	set	32301
   168  0000                     _RCEN	set	32299
   169  0000                     _PEN	set	32298
   170  0000                     _SEN	set	32296
   171  0000                     _TRISC4	set	31908
   172  0000                     _TRISC3	set	31907
   173  0000                     _ADON	set	32272
   174  0000                     _INT1IE	set	32643
   175  0000                     _INT1IF	set	32640
   176  0000                     _INT2IF	set	32641
   177  0000                     _INT2IE	set	32644
   178  0000                     _LATC6	set	31838
   179  0000                     _ADFM	set	32263
   180  0000                     _LATC2	set	31834
   181  0000                     _LATC1	set	31833
   182  0000                     _LATC0	set	31832
   183  00FDBF                     STR_18:
   184                           
   185                           ; BSR set to: 0
   186  00FDBF  53                 	db	83	;'S'
   187  00FDC0  6F                 	db	111	;'o'
   188  00FDC1  72                 	db	114	;'r'
   189  00FDC2  74                 	db	116	;'t'
   190  00FDC3  69                 	db	105	;'i'
   191  00FDC4  6E                 	db	110	;'n'
   192  00FDC5  67                 	db	103	;'g'
   193  00FDC6  20                 	db	32
   194  00FDC7  43                 	db	67	;'C'
   195  00FDC8  6F                 	db	111	;'o'
   196  00FDC9  6D                 	db	109	;'m'
   197  00FDCA  70                 	db	112	;'p'
   198  00FDCB  6C                 	db	108	;'l'
   199  00FDCC  65                 	db	101	;'e'
   200  00FDCD  74                 	db	116	;'t'
   201  00FDCE  65                 	db	101	;'e'
   202  00FDCF  20                 	db	32
   203  00FDD0  20                 	db	32
   204  00FDD1  20                 	db	32
   205  00FDD2  20                 	db	32
   206  00FDD3  20                 	db	32
   207  00FDD4  20                 	db	32
   208  00FDD5  20                 	db	32
   209  00FDD6  20                 	db	32
   210  00FDD7  20                 	db	32
   211  00FDD8  20                 	db	32
   212  00FDD9  00                 	db	0
   213  00FDDA                     STR_22:
   214                           
   215                           ; BSR set to: 0
   216  00FDDA  50                 	db	80	;'P'
   217  00FDDB  72                 	db	114	;'r'
   218  00FDDC  65                 	db	101	;'e'
   219  00FDDD  73                 	db	115	;'s'
   220  00FDDE  73                 	db	115	;'s'
   221  00FDDF  20                 	db	32
   222  00FDE0  61                 	db	97	;'a'
   223  00FDE1  20                 	db	32
   224  00FDE2  6E                 	db	110	;'n'
   225  00FDE3  75                 	db	117	;'u'
   226  00FDE4  6D                 	db	109	;'m'
   227  00FDE5  62                 	db	98	;'b'
   228  00FDE6  65                 	db	101	;'e'
   229  00FDE7  72                 	db	114	;'r'
   230  00FDE8  20                 	db	32
   231  00FDE9  20                 	db	32
   232  00FDEA  20                 	db	32
   233  00FDEB  20                 	db	32
   234  00FDEC  20                 	db	32
   235  00FDED  20                 	db	32
   236  00FDEE  20                 	db	32
   237  00FDEF  20                 	db	32
   238  00FDF0  20                 	db	32
   239  00FDF1  20                 	db	32
   240  00FDF2  00                 	db	0
   241  00FDF3                     STR_19:
   242                           
   243                           ; BSR set to: 0
   244  00FDF3  20                 	db	32
   245  00FDF4  20                 	db	32
   246  00FDF5  20                 	db	32
   247  00FDF6  20                 	db	32
   248  00FDF7  25                 	db	37
   249  00FDF8  30                 	db	48	;'0'
   250  00FDF9  32                 	db	50	;'2'
   251  00FDFA  78                 	db	120	;'x'
   252  00FDFB  2F                 	db	47
   253  00FDFC  25                 	db	37
   254  00FDFD  30                 	db	48	;'0'
   255  00FDFE  32                 	db	50	;'2'
   256  00FDFF  78                 	db	120	;'x'
   257  00FE00  2F                 	db	47
   258  00FE01  25                 	db	37
   259  00FE02  30                 	db	48	;'0'
   260  00FE03  32                 	db	50	;'2'
   261  00FE04  78                 	db	120	;'x'
   262  00FE05  20                 	db	32
   263  00FE06  20                 	db	32
   264  00FE07  20                 	db	32
   265  00FE08  20                 	db	32
   266  00FE09  20                 	db	32
   267  00FE0A  20                 	db	32
   268  00FE0B  00                 	db	0
   269  00FE0C                     STR_20:
   270                           
   271                           ; BSR set to: 0
   272  00FE0C  20                 	db	32
   273  00FE0D  20                 	db	32
   274  00FE0E  20                 	db	32
   275  00FE0F  20                 	db	32
   276  00FE10  25                 	db	37
   277  00FE11  30                 	db	48	;'0'
   278  00FE12  32                 	db	50	;'2'
   279  00FE13  78                 	db	120	;'x'
   280  00FE14  3A                 	db	58	;':'
   281  00FE15  25                 	db	37
   282  00FE16  30                 	db	48	;'0'
   283  00FE17  32                 	db	50	;'2'
   284  00FE18  78                 	db	120	;'x'
   285  00FE19  3A                 	db	58	;':'
   286  00FE1A  25                 	db	37
   287  00FE1B  30                 	db	48	;'0'
   288  00FE1C  32                 	db	50	;'2'
   289  00FE1D  78                 	db	120	;'x'
   290  00FE1E  20                 	db	32
   291  00FE1F  20                 	db	32
   292  00FE20  20                 	db	32
   293  00FE21  20                 	db	32
   294  00FE22  20                 	db	32
   295  00FE23  20                 	db	32
   296  00FE24  00                 	db	0
   297  00FE25                     STR_16:
   298                           
   299                           ; BSR set to: 0
   300  00FE25  25                 	db	37
   301  00FE26  30                 	db	48	;'0'
   302  00FE27  32                 	db	50	;'2'
   303  00FE28  78                 	db	120	;'x'
   304  00FE29  3A                 	db	58	;':'
   305  00FE2A  25                 	db	37
   306  00FE2B  30                 	db	48	;'0'
   307  00FE2C  32                 	db	50	;'2'
   308  00FE2D  78                 	db	120	;'x'
   309  00FE2E  20                 	db	32
   310  00FE2F  74                 	db	116	;'t'
   311  00FE30  6F                 	db	111	;'o'
   312  00FE31  20                 	db	32
   313  00FE32  25                 	db	37
   314  00FE33  30                 	db	48	;'0'
   315  00FE34  32                 	db	50	;'2'
   316  00FE35  78                 	db	120	;'x'
   317  00FE36  3A                 	db	58	;':'
   318  00FE37  25                 	db	37
   319  00FE38  30                 	db	48	;'0'
   320  00FE39  32                 	db	50	;'2'
   321  00FE3A  78                 	db	120	;'x'
   322  00FE3B  20                 	db	32
   323  00FE3C  20                 	db	32
   324  00FE3D  00                 	db	0
   325  00FE3E                     STR_24:
   326                           
   327                           ; BSR set to: 0
   328  00FE3E  54                 	db	84	;'T'
   329  00FE3F  69                 	db	105	;'i'
   330  00FE40  6D                 	db	109	;'m'
   331  00FE41  65                 	db	101	;'e'
   332  00FE42  20                 	db	32
   333  00FE43  45                 	db	69	;'E'
   334  00FE44  6C                 	db	108	;'l'
   335  00FE45  61                 	db	97	;'a'
   336  00FE46  70                 	db	112	;'p'
   337  00FE47  73                 	db	115	;'s'
   338  00FE48  65                 	db	101	;'e'
   339  00FE49  64                 	db	100	;'d'
   340  00FE4A  3A                 	db	58	;':'
   341  00FE4B  20                 	db	32
   342  00FE4C  20                 	db	32
   343  00FE4D  20                 	db	32
   344  00FE4E  20                 	db	32
   345  00FE4F  20                 	db	32
   346  00FE50  20                 	db	32
   347  00FE51  20                 	db	32
   348  00FE52  20                 	db	32
   349  00FE53  20                 	db	32
   350  00FE54  20                 	db	32
   351  00FE55  00                 	db	0
   352  00FE56                     STR_26:
   353                           
   354                           ; BSR set to: 0
   355  00FE56  54                 	db	84	;'T'
   356  00FE57  6F                 	db	111	;'o'
   357  00FE58  74                 	db	116	;'t'
   358  00FE59  61                 	db	97	;'a'
   359  00FE5A  6C                 	db	108	;'l'
   360  00FE5B  20                 	db	32
   361  00FE5C  53                 	db	83	;'S'
   362  00FE5D  6F                 	db	111	;'o'
   363  00FE5E  72                 	db	114	;'r'
   364  00FE5F  74                 	db	116	;'t'
   365  00FE60  65                 	db	101	;'e'
   366  00FE61  64                 	db	100	;'d'
   367  00FE62  3A                 	db	58	;':'
   368  00FE63  20                 	db	32
   369  00FE64  20                 	db	32
   370  00FE65  20                 	db	32
   371  00FE66  20                 	db	32
   372  00FE67  20                 	db	32
   373  00FE68  20                 	db	32
   374  00FE69  20                 	db	32
   375  00FE6A  20                 	db	32
   376  00FE6B  20                 	db	32
   377  00FE6C  20                 	db	32
   378  00FE6D  00                 	db	0
   379  00FE6E                     STR_23:
   380                           
   381                           ; BSR set to: 0
   382  00FE6E  46                 	db	70	;'F'
   383  00FE6F  6F                 	db	111	;'o'
   384  00FE70  72                 	db	114	;'r'
   385  00FE71  20                 	db	32
   386  00FE72  6D                 	db	109	;'m'
   387  00FE73  6F                 	db	111	;'o'
   388  00FE74  72                 	db	114	;'r'
   389  00FE75  65                 	db	101	;'e'
   390  00FE76  20                 	db	32
   391  00FE77  69                 	db	105	;'i'
   392  00FE78  6E                 	db	110	;'n'
   393  00FE79  66                 	db	102	;'f'
   394  00FE7A  6F                 	db	111	;'o'
   395  00FE7B  20                 	db	32
   396  00FE7C  20                 	db	32
   397  00FE7D  20                 	db	32
   398  00FE7E  20                 	db	32
   399  00FE7F  20                 	db	32
   400  00FE80  20                 	db	32
   401  00FE81  20                 	db	32
   402  00FE82  20                 	db	32
   403  00FE83  20                 	db	32
   404  00FE84  20                 	db	32
   405  00FE85  00                 	db	0
   406  00FE86                     STR_2:
   407                           
   408                           ; BSR set to: 0
   409  00FE86  53                 	db	83	;'S'
   410  00FE87  69                 	db	105	;'i'
   411  00FE88  6D                 	db	109	;'m'
   412  00FE89  75                 	db	117	;'u'
   413  00FE8A  6C                 	db	108	;'l'
   414  00FE8B  61                 	db	97	;'a'
   415  00FE8C  74                 	db	116	;'t'
   416  00FE8D  69                 	db	105	;'i'
   417  00FE8E  6E                 	db	110	;'n'
   418  00FE8F  67                 	db	103	;'g'
   419  00FE90  2E                 	db	46
   420  00FE91  2E                 	db	46
   421  00FE92  2E                 	db	46
   422  00FE93  20                 	db	32
   423  00FE94  20                 	db	32
   424  00FE95  20                 	db	32
   425  00FE96  20                 	db	32
   426  00FE97  20                 	db	32
   427  00FE98  20                 	db	32
   428  00FE99  20                 	db	32
   429  00FE9A  20                 	db	32
   430  00FE9B  20                 	db	32
   431  00FE9C  20                 	db	32
   432  00FE9D  00                 	db	0
   433  00FE9E                     STR_27:
   434                           
   435                           ; BSR set to: 0
   436  00FE9E  25                 	db	37
   437  00FE9F  75                 	db	117	;'u'
   438  00FEA0  20                 	db	32
   439  00FEA1  62                 	db	98	;'b'
   440  00FEA2  61                 	db	97	;'a'
   441  00FEA3  74                 	db	116	;'t'
   442  00FEA4  74                 	db	116	;'t'
   443  00FEA5  65                 	db	101	;'e'
   444  00FEA6  72                 	db	114	;'r'
   445  00FEA7  69                 	db	105	;'i'
   446  00FEA8  65                 	db	101	;'e'
   447  00FEA9  73                 	db	115	;'s'
   448  00FEAA  20                 	db	32
   449  00FEAB  20                 	db	32
   450  00FEAC  20                 	db	32
   451  00FEAD  20                 	db	32
   452  00FEAE  20                 	db	32
   453  00FEAF  20                 	db	32
   454  00FEB0  20                 	db	32
   455  00FEB1  20                 	db	32
   456  00FEB2  20                 	db	32
   457  00FEB3  20                 	db	32
   458  00FEB4  00                 	db	0
   459  00FEB5                     STR_50:
   460                           
   461                           ; BSR set to: 0
   462  00FEB5  50                 	db	80	;'P'
   463  00FEB6  65                 	db	101	;'e'
   464  00FEB7  72                 	db	114	;'r'
   465  00FEB8  6D                 	db	109	;'m'
   466  00FEB9  61                 	db	97	;'a'
   467  00FEBA  6E                 	db	110	;'n'
   468  00FEBB  65                 	db	101	;'e'
   469  00FEBC  6E                 	db	110	;'n'
   470  00FEBD  74                 	db	116	;'t'
   471  00FEBE  20                 	db	32
   472  00FEBF  6C                 	db	108	;'l'
   473  00FEC0  6F                 	db	111	;'o'
   474  00FEC1  67                 	db	103	;'g'
   475  00FEC2  3A                 	db	58	;':'
   476  00FEC3  20                 	db	32
   477  00FEC4  20                 	db	32
   478  00FEC5  20                 	db	32
   479  00FEC6  20                 	db	32
   480  00FEC7  20                 	db	32
   481  00FEC8  20                 	db	32
   482  00FEC9  20                 	db	32
   483  00FECA  00                 	db	0
   484  00FECB                     STR_34:
   485                           
   486                           ; BSR set to: 0
   487  00FECB  55                 	db	85	;'U'
   488  00FECC  6E                 	db	110	;'n'
   489  00FECD  63                 	db	99	;'c'
   490  00FECE  68                 	db	104	;'h'
   491  00FECF  61                 	db	97	;'a'
   492  00FED0  72                 	db	114	;'r'
   493  00FED1  67                 	db	103	;'g'
   494  00FED2  65                 	db	101	;'e'
   495  00FED3  64                 	db	100	;'d'
   496  00FED4  3A                 	db	58	;':'
   497  00FED5  20                 	db	32
   498  00FED6  20                 	db	32
   499  00FED7  20                 	db	32
   500  00FED8  20                 	db	32
   501  00FED9  20                 	db	32
   502  00FEDA  20                 	db	32
   503  00FEDB  20                 	db	32
   504  00FEDC  20                 	db	32
   505  00FEDD  20                 	db	32
   506  00FEDE  20                 	db	32
   507  00FEDF  00                 	db	0
   508  00FEE0                     STR_28:
   509                           
   510                           ; BSR set to: 0
   511  00FEE0  41                 	db	65	;'A'
   512  00FEE1  41                 	db	65	;'A'
   513  00FEE2  20                 	db	32
   514  00FEE3  53                 	db	83	;'S'
   515  00FEE4  6F                 	db	111	;'o'
   516  00FEE5  72                 	db	114	;'r'
   517  00FEE6  74                 	db	116	;'t'
   518  00FEE7  65                 	db	101	;'e'
   519  00FEE8  64                 	db	100	;'d'
   520  00FEE9  3A                 	db	58	;':'
   521  00FEEA  20                 	db	32
   522  00FEEB  20                 	db	32
   523  00FEEC  20                 	db	32
   524  00FEED  20                 	db	32
   525  00FEEE  20                 	db	32
   526  00FEEF  20                 	db	32
   527  00FEF0  20                 	db	32
   528  00FEF1  20                 	db	32
   529  00FEF2  20                 	db	32
   530  00FEF3  20                 	db	32
   531  00FEF4  00                 	db	0
   532  00FEF5                     STR_32:
   533                           
   534                           ; BSR set to: 0
   535  00FEF5  39                 	db	57	;'9'
   536  00FEF6  56                 	db	86	;'V'
   537  00FEF7  20                 	db	32
   538  00FEF8  53                 	db	83	;'S'
   539  00FEF9  6F                 	db	111	;'o'
   540  00FEFA  72                 	db	114	;'r'
   541  00FEFB  74                 	db	116	;'t'
   542  00FEFC  65                 	db	101	;'e'
   543  00FEFD  64                 	db	100	;'d'
   544  00FEFE  3A                 	db	58	;':'
   545  00FEFF  20                 	db	32
   546  00FF00  20                 	db	32
   547  00FF01  20                 	db	32
   548  00FF02  20                 	db	32
   549  00FF03  20                 	db	32
   550  00FF04  20                 	db	32
   551  00FF05  20                 	db	32
   552  00FF06  20                 	db	32
   553  00FF07  20                 	db	32
   554  00FF08  20                 	db	32
   555  00FF09  00                 	db	0
   556  00FF0A                     STR_25:
   557                           
   558                           ; BSR set to: 0
   559  00FF0A  25                 	db	37
   560  00FF0B  75                 	db	117	;'u'
   561  00FF0C  20                 	db	32
   562  00FF0D  73                 	db	115	;'s'
   563  00FF0E  65                 	db	101	;'e'
   564  00FF0F  63                 	db	99	;'c'
   565  00FF10  6F                 	db	111	;'o'
   566  00FF11  6E                 	db	110	;'n'
   567  00FF12  64                 	db	100	;'d'
   568  00FF13  73                 	db	115	;'s'
   569  00FF14  20                 	db	32
   570  00FF15  20                 	db	32
   571  00FF16  20                 	db	32
   572  00FF17  20                 	db	32
   573  00FF18  20                 	db	32
   574  00FF19  20                 	db	32
   575  00FF1A  20                 	db	32
   576  00FF1B  20                 	db	32
   577  00FF1C  20                 	db	32
   578  00FF1D  20                 	db	32
   579  00FF1E  00                 	db	0
   580  00FF1F                     STR_36:
   581                           
   582                           ; BSR set to: 0
   583  00FF1F  45                 	db	69	;'E'
   584  00FF20  6D                 	db	109	;'m'
   585  00FF21  65                 	db	101	;'e'
   586  00FF22  72                 	db	114	;'r'
   587  00FF23  67                 	db	103	;'g'
   588  00FF24  65                 	db	101	;'e'
   589  00FF25  6E                 	db	110	;'n'
   590  00FF26  63                 	db	99	;'c'
   591  00FF27  79                 	db	121	;'y'
   592  00FF28  20                 	db	32
   593  00FF29  20                 	db	32
   594  00FF2A  20                 	db	32
   595  00FF2B  20                 	db	32
   596  00FF2C  20                 	db	32
   597  00FF2D  20                 	db	32
   598  00FF2E  20                 	db	32
   599  00FF2F  20                 	db	32
   600  00FF30  20                 	db	32
   601  00FF31  20                 	db	32
   602  00FF32  00                 	db	0
   603  00FF33                     STR_30:
   604                           
   605                           ; BSR set to: 0
   606  00FF33  43                 	db	67	;'C'
   607  00FF34  20                 	db	32
   608  00FF35  53                 	db	83	;'S'
   609  00FF36  6F                 	db	111	;'o'
   610  00FF37  72                 	db	114	;'r'
   611  00FF38  74                 	db	116	;'t'
   612  00FF39  65                 	db	101	;'e'
   613  00FF3A  64                 	db	100	;'d'
   614  00FF3B  3A                 	db	58	;':'
   615  00FF3C  20                 	db	32
   616  00FF3D  20                 	db	32
   617  00FF3E  20                 	db	32
   618  00FF3F  20                 	db	32
   619  00FF40  20                 	db	32
   620  00FF41  20                 	db	32
   621  00FF42  20                 	db	32
   622  00FF43  20                 	db	32
   623  00FF44  20                 	db	32
   624  00FF45  20                 	db	32
   625  00FF46  00                 	db	0
   626  00FF47                     STR_21:
   627                           
   628                           ; BSR set to: 0
   629  00FF47  57                 	db	87	;'W'
   630  00FF48  65                 	db	101	;'e'
   631  00FF49  6C                 	db	108	;'l'
   632  00FF4A  63                 	db	99	;'c'
   633  00FF4B  6F                 	db	111	;'o'
   634  00FF4C  6D                 	db	109	;'m'
   635  00FF4D  65                 	db	101	;'e'
   636  00FF4E  21                 	db	33
   637  00FF4F  20                 	db	32
   638  00FF50  20                 	db	32
   639  00FF51  20                 	db	32
   640  00FF52  20                 	db	32
   641  00FF53  20                 	db	32
   642  00FF54  20                 	db	32
   643  00FF55  20                 	db	32
   644  00FF56  20                 	db	32
   645  00FF57  20                 	db	32
   646  00FF58  20                 	db	32
   647  00FF59  00                 	db	0
   648  00FF5A                     STR_17:
   649                           
   650                           ; BSR set to: 0
   651  00FF5A  50                 	db	80	;'P'
   652  00FF5B  65                 	db	101	;'e'
   653  00FF5C  72                 	db	114	;'r'
   654  00FF5D  69                 	db	105	;'i'
   655  00FF5E  6F                 	db	111	;'o'
   656  00FF5F  64                 	db	100	;'d'
   657  00FF60  3A                 	db	58	;':'
   658  00FF61  20                 	db	32
   659  00FF62  25                 	db	37
   660  00FF63  75                 	db	117	;'u'
   661  00FF64  20                 	db	32
   662  00FF65  20                 	db	32
   663  00FF66  20                 	db	32
   664  00FF67  20                 	db	32
   665  00FF68  20                 	db	32
   666  00FF69  20                 	db	32
   667  00FF6A  20                 	db	32
   668  00FF6B  20                 	db	32
   669  00FF6C  00                 	db	0
   670  00FF6D                     STR_51:
   671                           
   672                           ; BSR set to: 0
   673  00FF6D  57                 	db	87	;'W'
   674  00FF6E  68                 	db	104	;'h'
   675  00FF6F  69                 	db	105	;'i'
   676  00FF70  63                 	db	99	;'c'
   677  00FF71  68                 	db	104	;'h'
   678  00FF72  20                 	db	32
   679  00FF73  72                 	db	114	;'r'
   680  00FF74  75                 	db	117	;'u'
   681  00FF75  6E                 	db	110	;'n'
   682  00FF76  3F                 	db	63	;'?'
   683  00FF77  20                 	db	32
   684  00FF78  20                 	db	32
   685  00FF79  20                 	db	32
   686  00FF7A  20                 	db	32
   687  00FF7B  20                 	db	32
   688  00FF7C  20                 	db	32
   689  00FF7D  20                 	db	32
   690  00FF7E  00                 	db	0
   691  00FF7F                     STR_37:
   692                           
   693                           ; BSR set to: 0
   694  00FF7F  53                 	db	83	;'S'
   695  00FF80  74                 	db	116	;'t'
   696  00FF81  6F                 	db	111	;'o'
   697  00FF82  70                 	db	112	;'p'
   698  00FF83  70                 	db	112	;'p'
   699  00FF84  65                 	db	101	;'e'
   700  00FF85  64                 	db	100	;'d'
   701  00FF86  20                 	db	32
   702  00FF87  20                 	db	32
   703  00FF88  20                 	db	32
   704  00FF89  20                 	db	32
   705  00FF8A  20                 	db	32
   706  00FF8B  20                 	db	32
   707  00FF8C  20                 	db	32
   708  00FF8D  20                 	db	32
   709  00FF8E  20                 	db	32
   710  00FF8F  20                 	db	32
   711  00FF90  00                 	db	0
   712  00FF91                     STR_54:
   713                           
   714                           ; BSR set to: 0
   715  00FF91  30                 	db	48	;'0'
   716  00FF92  31                 	db	49	;'1'
   717  00FF93  32                 	db	50	;'2'
   718  00FF94  33                 	db	51	;'3'
   719  00FF95  34                 	db	52	;'4'
   720  00FF96  35                 	db	53	;'5'
   721  00FF97  36                 	db	54	;'6'
   722  00FF98  37                 	db	55	;'7'
   723  00FF99  38                 	db	56	;'8'
   724  00FF9A  39                 	db	57	;'9'
   725  00FF9B  61                 	db	97	;'a'
   726  00FF9C  62                 	db	98	;'b'
   727  00FF9D  63                 	db	99	;'c'
   728  00FF9E  64                 	db	100	;'d'
   729  00FF9F  65                 	db	101	;'e'
   730  00FFA0  66                 	db	102	;'f'
   731  00FFA1  00                 	db	0
   732  00FFA2                     STR_52:
   733                           
   734                           ; BSR set to: 0
   735  00FFA2  73                 	db	115	;'s'
   736  00FFA3  68                 	db	104	;'h'
   737  00FFA4  6F                 	db	111	;'o'
   738  00FFA5  77                 	db	119	;'w'
   739  00FFA6  69                 	db	105	;'i'
   740  00FFA7  6E                 	db	110	;'n'
   741  00FFA8  67                 	db	103	;'g'
   742  00FFA9  20                 	db	32
   743  00FFAA  25                 	db	37
   744  00FFAB  75                 	db	117	;'u'
   745  00FFAC  20                 	db	32
   746  00FFAD  20                 	db	32
   747  00FFAE  20                 	db	32
   748  00FFAF  20                 	db	32
   749  00FFB0  20                 	db	32
   750  00FFB1  20                 	db	32
   751  00FFB2  00                 	db	0
   752  00FFB3                     STR_53:
   753                           
   754                           ; BSR set to: 0
   755  00FFB3  72                 	db	114	;'r'
   756  00FFB4  75                 	db	117	;'u'
   757  00FFB5  6E                 	db	110	;'n'
   758  00FFB6  73                 	db	115	;'s'
   759  00FFB7  20                 	db	32
   760  00FFB8  62                 	db	98	;'b'
   761  00FFB9  65                 	db	101	;'e'
   762  00FFBA  66                 	db	102	;'f'
   763  00FFBB  6F                 	db	111	;'o'
   764  00FFBC  72                 	db	114	;'r'
   765  00FFBD  65                 	db	101	;'e'
   766  00FFBE  20                 	db	32
   767  00FFBF  20                 	db	32
   768  00FFC0  20                 	db	32
   769  00FFC1  20                 	db	32
   770  00FFC2  20                 	db	32
   771  00FFC3  00                 	db	0
   772  00FFC4                     STR_29:
   773                           
   774                           ; BSR set to: 0
   775  00FFC4  25                 	db	37
   776  00FFC5  75                 	db	117	;'u'
   777  00FFC6  20                 	db	32
   778  00FFC7  20                 	db	32
   779  00FFC8  20                 	db	32
   780  00FFC9  20                 	db	32
   781  00FFCA  20                 	db	32
   782  00FFCB  20                 	db	32
   783  00FFCC  20                 	db	32
   784  00FFCD  20                 	db	32
   785  00FFCE  20                 	db	32
   786  00FFCF  20                 	db	32
   787  00FFD0  20                 	db	32
   788  00FFD1  20                 	db	32
   789  00FFD2  20                 	db	32
   790  00FFD3  00                 	db	0
   791  00FFD4                     
   792                           ; BSR set to: 0
   793  00FFD4  4D                 	db	77	;'M'
   794  00FFD5  61                 	db	97	;'a'
   795  00FFD6  69                 	db	105	;'i'
   796  00FFD7  6E                 	db	110	;'n'
   797  00FFD8  6C                 	db	108	;'l'
   798  00FFD9  6F                 	db	111	;'o'
   799  00FFDA  6F                 	db	111	;'o'
   800  00FFDB  70                 	db	112	;'p'
   801  00FFDC  00                 	db	0
   802  00FFDD                     STR_12:
   803                           
   804                           ; BSR set to: 0
   805  00FFDD  20                 	db	32
   806  00FFDE  41                 	db	65	;'A'
   807  00FFDF  41                 	db	65	;'A'
   808  00FFE0  3A                 	db	58	;':'
   809  00FFE1  00                 	db	0
   810  00FFE2                     STR_40:
   811                           
   812                           ; BSR set to: 0
   813  00FFE2  20                 	db	32
   814  00FFE3  30                 	db	48	;'0'
   815  00FFE4  20                 	db	32
   816  00FFE5  00                 	db	0
   817  00FFE6                     STR_39:
   818                           
   819                           ; BSR set to: 0
   820  00FFE6  20                 	db	32
   821  00FFE7  31                 	db	49	;'1'
   822  00FFE8  20                 	db	32
   823  00FFE9  00                 	db	0
   824  00FFEA                     STR_41:
   825                           
   826                           ; BSR set to: 0
   827  00FFEA  2D                 	db	45
   828  00FFEB  31                 	db	49	;'1'
   829  00FFEC  20                 	db	32
   830  00FFED  00                 	db	0
   831  00FFEE                     STR_8:
   832                           
   833                           ; BSR set to: 0
   834  00FFEE  20                 	db	32
   835  00FFEF  43                 	db	67	;'C'
   836  00FFF0  3A                 	db	58	;':'
   837  00FFF1  00                 	db	0
   838  00FFF2                     STR_4:
   839                           
   840                           ; BSR set to: 0
   841  00FFF2  39                 	db	57	;'9'
   842  00FFF3  56                 	db	86	;'V'
   843  00FFF4  3A                 	db	58	;':'
   844  00FFF5  00                 	db	0
   845  00FFF6                     STR_6:
   846                           
   847                           ; BSR set to: 0
   848  00FFF6  20                 	db	32
   849  00FFF7  2B                 	db	43
   850  00FFF8  00                 	db	0
   851  00FFF9                     STR_5:
   852                           
   853                           ; BSR set to: 0
   854  00FFF9  20                 	db	32
   855  00FFFA  2D                 	db	45
   856  00FFFB  00                 	db	0
   857  00FFFC                     STR_7:
   858                           
   859                           ; BSR set to: 0
   860  00FFFC  20                 	db	32
   861  00FFFD  30                 	db	48	;'0'
   862  00FFFE  00                 	db	0
   863  0000                     
   864                           ; #config settings
   865  00FFFF  00                 	db	0	; dummy byte at the end
   866  0000                     
   867                           	psect	cinit
   868  0021A2                     __pcinit:
   869                           	opt stack 0
   870  0021A2                     start_initialization:
   871                           	opt stack 0
   872  0021A2                     __initialization:
   873                           	opt stack 0
   874                           
   875                           ; Clear objects allocated to BANK0 (42 bytes)
   876  0021A2  EE00  F080         	lfsr	0,__pbssBANK0
   877  0021A6  0E2A               	movlw	42
   878  0021A8                     clear_0:
   879  0021A8  6AEE               	clrf	postinc0,c
   880  0021AA  06E8               	decf	wreg,f,c
   881  0021AC  E1FD               	bnz	clear_0
   882                           
   883                           ; Clear objects allocated to COMRAM (2 bytes)
   884  0021AE  6A7B               	clrf	(__pbssCOMRAM+1)& (0+255),c
   885  0021B0  6A7A               	clrf	__pbssCOMRAM& (0+255),c
   886  0021B2                     end_of_initialization:
   887                           	opt stack 0
   888  0021B2                     __end_of__initialization:
   889                           	opt stack 0
   890  0021B2  907C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   891  0021B4  927C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   892  0021B6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   893  0021B8  6EF8               	movwf	tblptru,c
   894  0021BA  0100               	movlb	0
   895  0021BC  EF64  F00F         	goto	_main	;jump to C main() function
   896                           tblptru	equ	0xFF8
   897                           postinc0	equ	0xFEE
   898                           wreg	equ	0xFE8
   899                           
   900                           	psect	bssCOMRAM
   901  00007A                     __pbssCOMRAM:
   902                           	opt stack 0
   903  00007A                     _mode:
   904                           	opt stack 0
   905  00007A                     	ds	2
   906                           tblptru	equ	0xFF8
   907                           postinc0	equ	0xFEE
   908                           wreg	equ	0xFE8
   909                           
   910                           	psect	bssBANK0
   911  000080                     __pbssBANK0:
   912                           	opt stack 0
   913  000080                     intrpt@F3122:
   914                           	opt stack 0
   915  000080                     	ds	6
   916  000086                     simulate@F3114:
   917                           	opt stack 0
   918  000086                     	ds	6
   919  00008C                     simulate@F3112:
   920                           	opt stack 0
   921  00008C                     	ds	6
   922  000092                     PermLog@F3082:
   923                           	opt stack 0
   924  000092                     	ds	4
   925  000096                     simulate@F3105:
   926                           	opt stack 0
   927  000096                     	ds	4
   928  00009A                     simulate@F3103:
   929                           	opt stack 0
   930  00009A                     	ds	4
   931  00009E                     simulate@F3101:
   932                           	opt stack 0
   933  00009E                     	ds	4
   934  0000A2                     _Latest:
   935                           	opt stack 0
   936  0000A2                     	ds	1
   937  0000A3                     _time:
   938                           	opt stack 0
   939  0000A3                     	ds	7
   940                           tblptru	equ	0xFF8
   941                           postinc0	equ	0xFEE
   942                           wreg	equ	0xFE8
   943                           
   944                           	psect	cstackBANK0
   945  0000AA                     __pcstackBANK0:
   946                           	opt stack 0
   947  0000AA                     ??_isdigit:
   948  0000AA                     ??_I2C_Master_Wait:
   949  0000AA                     ?___wmul:
   950                           	opt stack 0
   951  0000AA                     ?___lwdiv:
   952                           	opt stack 0
   953  0000AA                     ?___lldiv:
   954                           	opt stack 0
   955  0000AA                     lcdNibble@temp:
   956                           	opt stack 0
   957  0000AA                     ReadEE@address:
   958                           	opt stack 0
   959  0000AA                     ___wmul@multiplier:
   960                           	opt stack 0
   961  0000AA                     ___lwdiv@dividend:
   962                           	opt stack 0
   963  0000AA                     ___lldiv@dividend:
   964                           	opt stack 0
   965                           
   966                           ; 4 bytes @ 0x0
   967  0000AA                     	ds	1
   968  0000AB                     lcdNibble@data:
   969                           	opt stack 0
   970  0000AB                     I2C_Master_Read@a:
   971                           	opt stack 0
   972  0000AB                     _isdigit$1052:
   973                           	opt stack 0
   974  0000AB                     I2C_Master_Write@d:
   975                           	opt stack 0
   976                           
   977                           ; 2 bytes @ 0x1
   978  0000AB                     	ds	1
   979  0000AC                     lcdInst@data:
   980                           	opt stack 0
   981  0000AC                     putch@data:
   982                           	opt stack 0
   983  0000AC                     I2C_Master_Read@temp:
   984                           	opt stack 0
   985  0000AC                     isdigit@c:
   986                           	opt stack 0
   987  0000AC                     ___wmul@multiplicand:
   988                           	opt stack 0
   989  0000AC                     ___lwdiv@divisor:
   990                           	opt stack 0
   991                           
   992                           ; 2 bytes @ 0x2
   993  0000AC                     	ds	1
   994  0000AD                     ??_initLCD:
   995  0000AD                     getTime@time:
   996                           	opt stack 0
   997                           
   998                           ; 2 bytes @ 0x3
   999  0000AD                     	ds	1
  1000  0000AE                     ___wmul@product:
  1001                           	opt stack 0
  1002  0000AE                     ___lwdiv@quotient:
  1003                           	opt stack 0
  1004  0000AE                     ___lldiv@divisor:
  1005                           	opt stack 0
  1006                           
  1007                           ; 4 bytes @ 0x4
  1008  0000AE                     	ds	1
  1009  0000AF                     getTime@i:
  1010                           	opt stack 0
  1011                           
  1012                           ; 1 bytes @ 0x5
  1013  0000AF                     	ds	1
  1014  0000B0                     ___lwdiv@counter:
  1015                           	opt stack 0
  1016                           
  1017                           ; 1 bytes @ 0x6
  1018  0000B0                     	ds	1
  1019  0000B1                     ?___lwmod:
  1020                           	opt stack 0
  1021  0000B1                     ___lwmod@dividend:
  1022                           	opt stack 0
  1023                           
  1024                           ; 2 bytes @ 0x7
  1025  0000B1                     	ds	1
  1026  0000B2                     ___lldiv@quotient:
  1027                           	opt stack 0
  1028                           
  1029                           ; 4 bytes @ 0x8
  1030  0000B2                     	ds	1
  1031  0000B3                     ___lwmod@divisor:
  1032                           	opt stack 0
  1033                           
  1034                           ; 2 bytes @ 0x9
  1035  0000B3                     	ds	2
  1036  0000B5                     ___lwmod@counter:
  1037                           	opt stack 0
  1038                           
  1039                           ; 1 bytes @ 0xB
  1040  0000B5                     	ds	1
  1041  0000B6                     ?_printf:
  1042                           	opt stack 0
  1043  0000B6                     ___lldiv@counter:
  1044                           	opt stack 0
  1045  0000B6                     printf@f:
  1046                           	opt stack 0
  1047                           
  1048                           ; 2 bytes @ 0xC
  1049  0000B6                     	ds	1
  1050  0000B7                     I2C_Master_Init@c:
  1051                           	opt stack 0
  1052                           
  1053                           ; 4 bytes @ 0xD
  1054  0000B7                     	ds	4
  1055  0000BB                     ??_I2C_Master_Init:
  1056                           
  1057                           ; 1 bytes @ 0x11
  1058  0000BB                     	ds	3
  1059  0000BE                     ??_printf:
  1060                           
  1061                           ; 1 bytes @ 0x14
  1062  0000BE                     	ds	1
  1063  0000BF                     ??_initialize:
  1064                           
  1065                           ; 1 bytes @ 0x15
  1066  0000BF                     	ds	3
  1067  0000C2                     printf@ap:
  1068                           	opt stack 0
  1069                           
  1070                           ; 2 bytes @ 0x18
  1071  0000C2                     	ds	2
  1072  0000C4                     printf@cp:
  1073                           	opt stack 0
  1074                           
  1075                           ; 2 bytes @ 0x1A
  1076  0000C4                     	ds	2
  1077  0000C6                     printf@idx:
  1078                           	opt stack 0
  1079                           
  1080                           ; 1 bytes @ 0x1C
  1081  0000C6                     	ds	1
  1082  0000C7                     printf@len:
  1083                           	opt stack 0
  1084                           
  1085                           ; 2 bytes @ 0x1D
  1086  0000C7                     	ds	2
  1087  0000C9                     printf@prec:
  1088                           	opt stack 0
  1089                           
  1090                           ; 1 bytes @ 0x1F
  1091  0000C9                     	ds	1
  1092  0000CA                     printf@val:
  1093                           	opt stack 0
  1094                           
  1095                           ; 2 bytes @ 0x20
  1096  0000CA                     	ds	2
  1097  0000CC                     printf@flag:
  1098                           	opt stack 0
  1099                           
  1100                           ; 1 bytes @ 0x22
  1101  0000CC                     	ds	1
  1102  0000CD                     printf@width:
  1103                           	opt stack 0
  1104                           
  1105                           ; 2 bytes @ 0x23
  1106  0000CD                     	ds	2
  1107  0000CF                     printf@c:
  1108                           	opt stack 0
  1109                           
  1110                           ; 1 bytes @ 0x25
  1111  0000CF                     	ds	1
  1112  0000D0                     ??_showRTC:
  1113                           
  1114                           ; 1 bytes @ 0x26
  1115  0000D0                     	ds	2
  1116  0000D2                     ??_main:
  1117                           
  1118                           ; 1 bytes @ 0x28
  1119  0000D2                     	ds	2
  1120                           tblptru	equ	0xFF8
  1121                           postinc0	equ	0xFEE
  1122                           wreg	equ	0xFE8
  1123                           
  1124                           	psect	cstackCOMRAM
  1125  000001                     __pcstackCOMRAM:
  1126                           	opt stack 0
  1127  000001                     ??i2_I2C_Master_Wait:
  1128  000001                     ??i2_isdigit:
  1129  000001                     ?_captureKeypad:
  1130                           	opt stack 0
  1131  000001                     ?_AD:
  1132                           	opt stack 0
  1133  000001                     ?___awdiv:
  1134                           	opt stack 0
  1135  000001                     ?i2___wmul:
  1136                           	opt stack 0
  1137  000001                     ?i2___lwdiv:
  1138                           	opt stack 0
  1139  000001                     ?___ftpack:
  1140                           	opt stack 0
  1141  000001                     back@runs:
  1142                           	opt stack 0
  1143  000001                     i2lcdNibble@temp:
  1144                           	opt stack 0
  1145  000001                     fluctuate@a:
  1146                           	opt stack 0
  1147  000001                     WriteEE@address:
  1148                           	opt stack 0
  1149  000001                     ___awdiv@dividend:
  1150                           	opt stack 0
  1151  000001                     i2ReadEE@address:
  1152                           	opt stack 0
  1153  000001                     i2___wmul@multiplier:
  1154                           	opt stack 0
  1155  000001                     i2___lwdiv@dividend:
  1156                           	opt stack 0
  1157  000001                     ___ftpack@arg:
  1158                           	opt stack 0
  1159                           
  1160                           ; 3 bytes @ 0x0
  1161  000001                     	ds	1
  1162  000002                     back@result:
  1163                           	opt stack 0
  1164  000002                     i2lcdNibble@data:
  1165                           	opt stack 0
  1166  000002                     i2I2C_Master_Read@a:
  1167                           	opt stack 0
  1168  000002                     i2_isdigit$1052:
  1169                           	opt stack 0
  1170  000002                     i2I2C_Master_Write@d:
  1171                           	opt stack 0
  1172                           
  1173                           ; 2 bytes @ 0x1
  1174  000002                     	ds	1
  1175  000003                     ??_AD:
  1176  000003                     captureKeypad@keypress:
  1177                           	opt stack 0
  1178  000003                     WriteEE@data:
  1179                           	opt stack 0
  1180  000003                     i2lcdInst@data:
  1181                           	opt stack 0
  1182  000003                     i2putch@data:
  1183                           	opt stack 0
  1184  000003                     i2I2C_Master_Read@temp:
  1185                           	opt stack 0
  1186  000003                     i2isdigit@c:
  1187                           	opt stack 0
  1188  000003                     fluctuate@b:
  1189                           	opt stack 0
  1190  000003                     ReadRun@sorted:
  1191                           	opt stack 0
  1192  000003                     ___awdiv@divisor:
  1193                           	opt stack 0
  1194  000003                     i2___wmul@multiplicand:
  1195                           	opt stack 0
  1196  000003                     i2___lwdiv@divisor:
  1197                           	opt stack 0
  1198                           
  1199                           ; 2 bytes @ 0x2
  1200  000003                     	ds	1
  1201  000004                     ___ftpack@exp:
  1202                           	opt stack 0
  1203  000004                     i2getTime@time:
  1204                           	opt stack 0
  1205                           
  1206                           ; 2 bytes @ 0x3
  1207  000004                     	ds	1
  1208  000005                     ??_fluctuate:
  1209  000005                     AD@channel:
  1210                           	opt stack 0
  1211  000005                     ___awdiv@counter:
  1212                           	opt stack 0
  1213  000005                     ___ftpack@sign:
  1214                           	opt stack 0
  1215  000005                     ReadRun@time:
  1216                           	opt stack 0
  1217  000005                     i2___wmul@product:
  1218                           	opt stack 0
  1219  000005                     i2___lwdiv@quotient:
  1220                           	opt stack 0
  1221                           
  1222                           ; 2 bytes @ 0x4
  1223  000005                     	ds	1
  1224  000006                     ??___ftpack:
  1225  000006                     ___awdiv@sign:
  1226                           	opt stack 0
  1227  000006                     i2getTime@i:
  1228                           	opt stack 0
  1229                           
  1230                           ; 1 bytes @ 0x5
  1231  000006                     	ds	1
  1232  000007                     ??_ReadRun:
  1233  000007                     ?_HexDecToDec2:
  1234                           	opt stack 0
  1235  000007                     i2___lwdiv@counter:
  1236                           	opt stack 0
  1237  000007                     HexDecToDec2@hex:
  1238                           	opt stack 0
  1239  000007                     fluctuate@i:
  1240                           	opt stack 0
  1241  000007                     WriteRun@sorted:
  1242                           	opt stack 0
  1243  000007                     ___awdiv@quotient:
  1244                           	opt stack 0
  1245                           
  1246                           ; 2 bytes @ 0x6
  1247  000007                     	ds	1
  1248  000008                     ?i2___lwmod:
  1249                           	opt stack 0
  1250  000008                     i2___lwmod@dividend:
  1251                           	opt stack 0
  1252                           
  1253                           ; 2 bytes @ 0x7
  1254  000008                     	ds	1
  1255  000009                     ??_HexDecToDec2:
  1256  000009                     ?___ftmul:
  1257                           	opt stack 0
  1258  000009                     ?___awtoft:
  1259                           	opt stack 0
  1260  000009                     PWMC@widthus:
  1261                           	opt stack 0
  1262  000009                     WriteRun@time:
  1263                           	opt stack 0
  1264  000009                     ___awtoft@c:
  1265                           	opt stack 0
  1266  000009                     ___ftmul@f1:
  1267                           	opt stack 0
  1268                           
  1269                           ; 3 bytes @ 0x8
  1270  000009                     	ds	1
  1271  00000A                     i2___lwmod@divisor:
  1272                           	opt stack 0
  1273                           
  1274                           ; 2 bytes @ 0x9
  1275  00000A                     	ds	1
  1276  00000B                     ??_WriteRun:
  1277  00000B                     ReadRun@backruns:
  1278                           	opt stack 0
  1279  00000B                     PWMC@cycles:
  1280                           	opt stack 0
  1281                           
  1282                           ; 2 bytes @ 0xA
  1283  00000B                     	ds	1
  1284  00000C                     ___awtoft@sign:
  1285                           	opt stack 0
  1286  00000C                     i2___lwmod@counter:
  1287                           	opt stack 0
  1288  00000C                     HexDecToDec2@tenth:
  1289                           	opt stack 0
  1290  00000C                     ReadRun@add:
  1291                           	opt stack 0
  1292  00000C                     ___ftmul@f2:
  1293                           	opt stack 0
  1294                           
  1295                           ; 3 bytes @ 0xB
  1296  00000C                     	ds	1
  1297  00000D                     ?i2_printf:
  1298                           	opt stack 0
  1299  00000D                     PWMC@port:
  1300                           	opt stack 0
  1301  00000D                     WriteRun@add:
  1302                           	opt stack 0
  1303  00000D                     i2printf@f:
  1304                           	opt stack 0
  1305                           
  1306                           ; 2 bytes @ 0xC
  1307  00000D                     	ds	1
  1308  00000E                     HexDecToDec2@digit:
  1309                           	opt stack 0
  1310                           
  1311                           ; 2 bytes @ 0xD
  1312  00000E                     	ds	1
  1313  00000F                     ??_PWMC:
  1314  00000F                     ??___ftmul:
  1315                           
  1316                           ; 1 bytes @ 0xE
  1317  00000F                     	ds	2
  1318  000011                     _PWMC$1393:
  1319                           	opt stack 0
  1320                           
  1321                           ; 1 bytes @ 0x10
  1322  000011                     	ds	1
  1323  000012                     ___ftmul@exp:
  1324                           	opt stack 0
  1325  000012                     _PWMC$1394:
  1326                           	opt stack 0
  1327                           
  1328                           ; 1 bytes @ 0x11
  1329  000012                     	ds	1
  1330  000013                     _PWMC$1395:
  1331                           	opt stack 0
  1332  000013                     ___ftmul@f3_as_product:
  1333                           	opt stack 0
  1334                           
  1335                           ; 3 bytes @ 0x12
  1336  000013                     	ds	1
  1337  000014                     PWMC@countdown:
  1338                           	opt stack 0
  1339                           
  1340                           ; 2 bytes @ 0x13
  1341  000014                     	ds	2
  1342  000016                     ___ftmul@cntr:
  1343                           	opt stack 0
  1344  000016                     CW90@port:
  1345                           	opt stack 0
  1346  000016                     CCW90@port:
  1347                           	opt stack 0
  1348                           
  1349                           ; 2 bytes @ 0x15
  1350  000016                     	ds	1
  1351  000017                     ??i2_printf:
  1352  000017                     ___ftmul@sign:
  1353                           	opt stack 0
  1354                           
  1355                           ; 1 bytes @ 0x16
  1356  000017                     	ds	1
  1357  000018                     ?___ftdiv:
  1358                           	opt stack 0
  1359  000018                     ___ftdiv@f1:
  1360                           	opt stack 0
  1361                           
  1362                           ; 3 bytes @ 0x17
  1363  000018                     	ds	3
  1364  00001B                     i2printf@ap:
  1365                           	opt stack 0
  1366  00001B                     ___ftdiv@f2:
  1367                           	opt stack 0
  1368                           
  1369                           ; 3 bytes @ 0x1A
  1370  00001B                     	ds	2
  1371  00001D                     i2printf@cp:
  1372                           	opt stack 0
  1373                           
  1374                           ; 2 bytes @ 0x1C
  1375  00001D                     	ds	1
  1376  00001E                     ??___ftdiv:
  1377                           
  1378                           ; 1 bytes @ 0x1D
  1379  00001E                     	ds	1
  1380  00001F                     i2printf@idx:
  1381                           	opt stack 0
  1382                           
  1383                           ; 1 bytes @ 0x1E
  1384  00001F                     	ds	1
  1385  000020                     i2printf@len:
  1386                           	opt stack 0
  1387                           
  1388                           ; 2 bytes @ 0x1F
  1389  000020                     	ds	1
  1390  000021                     ___ftdiv@cntr:
  1391                           	opt stack 0
  1392                           
  1393                           ; 1 bytes @ 0x20
  1394  000021                     	ds	1
  1395  000022                     i2printf@prec:
  1396                           	opt stack 0
  1397  000022                     ___ftdiv@f3:
  1398                           	opt stack 0
  1399                           
  1400                           ; 3 bytes @ 0x21
  1401  000022                     	ds	1
  1402  000023                     i2printf@val:
  1403                           	opt stack 0
  1404                           
  1405                           ; 2 bytes @ 0x22
  1406  000023                     	ds	2
  1407  000025                     ___ftdiv@exp:
  1408                           	opt stack 0
  1409  000025                     i2printf@flag:
  1410                           	opt stack 0
  1411                           
  1412                           ; 1 bytes @ 0x24
  1413  000025                     	ds	1
  1414  000026                     ___ftdiv@sign:
  1415                           	opt stack 0
  1416  000026                     i2printf@width:
  1417                           	opt stack 0
  1418                           
  1419                           ; 2 bytes @ 0x25
  1420  000026                     	ds	1
  1421  000027                     ___ftge@ff1:
  1422                           	opt stack 0
  1423                           
  1424                           ; 3 bytes @ 0x26
  1425  000027                     	ds	1
  1426  000028                     i2printf@c:
  1427                           	opt stack 0
  1428                           
  1429                           ; 1 bytes @ 0x27
  1430  000028                     	ds	1
  1431  000029                     showInfo@time:
  1432                           	opt stack 0
  1433  000029                     _stopMoving$546:
  1434                           	opt stack 0
  1435                           
  1436                           ; 2 bytes @ 0x28
  1437  000029                     	ds	1
  1438  00002A                     ___ftge@ff2:
  1439                           	opt stack 0
  1440                           
  1441                           ; 3 bytes @ 0x29
  1442  00002A                     	ds	1
  1443  00002B                     stopMoving@em:
  1444                           	opt stack 0
  1445  00002B                     showInfo@sorted:
  1446                           	opt stack 0
  1447                           
  1448                           ; 2 bytes @ 0x2A
  1449  00002B                     	ds	2
  1450  00002D                     ??_showInfo:
  1451  00002D                     ??___ftge:
  1452                           
  1453                           ; 1 bytes @ 0x2C
  1454  00002D                     	ds	3
  1455  000030                     ?_checkV:
  1456                           	opt stack 0
  1457  000030                     checkV@channel:
  1458                           	opt stack 0
  1459                           
  1460                           ; 2 bytes @ 0x2F
  1461  000030                     	ds	2
  1462  000032                     showInfo@type:
  1463                           	opt stack 0
  1464  000032                     checkV@max:
  1465                           	opt stack 0
  1466                           
  1467                           ; 3 bytes @ 0x31
  1468  000032                     	ds	2
  1469  000034                     showInfo@stop:
  1470                           	opt stack 0
  1471                           
  1472                           ; 2 bytes @ 0x33
  1473  000034                     	ds	1
  1474  000035                     checkV@voltage2:
  1475                           	opt stack 0
  1476                           
  1477                           ; 2 bytes @ 0x34
  1478  000035                     	ds	1
  1479  000036                     ??_PermLog:
  1480                           
  1481                           ; 1 bytes @ 0x35
  1482  000036                     	ds	1
  1483  000037                     checkV@voltage3:
  1484                           	opt stack 0
  1485                           
  1486                           ; 2 bytes @ 0x36
  1487  000037                     	ds	1
  1488  000038                     PermLog@sorted:
  1489                           	opt stack 0
  1490                           
  1491                           ; 4 bytes @ 0x37
  1492  000038                     	ds	1
  1493  000039                     checkV@voltage:
  1494                           	opt stack 0
  1495                           
  1496                           ; 2 bytes @ 0x38
  1497  000039                     	ds	2
  1498  00003B                     ?_check9:
  1499                           	opt stack 0
  1500  00003B                     ?_checkC:
  1501                           	opt stack 0
  1502  00003B                     ?_checkAA:
  1503                           	opt stack 0
  1504  00003B                     checkAA@sorted:
  1505                           	opt stack 0
  1506  00003B                     checkC@sorted:
  1507                           	opt stack 0
  1508  00003B                     check9@sorted:
  1509                           	opt stack 0
  1510                           
  1511                           ; 2 bytes @ 0x3A
  1512  00003B                     	ds	1
  1513  00003C                     PermLog@goback:
  1514                           	opt stack 0
  1515                           
  1516                           ; 1 bytes @ 0x3B
  1517  00003C                     	ds	1
  1518  00003D                     ??_simulate:
  1519  00003D                     PermLog@time:
  1520                           	opt stack 0
  1521                           
  1522                           ; 2 bytes @ 0x3C
  1523  00003D                     	ds	2
  1524  00003F                     PermLog@backruns:
  1525                           	opt stack 0
  1526  00003F                     simulate@stop:
  1527                           	opt stack 0
  1528                           
  1529                           ; 2 bytes @ 0x3E
  1530  00003F                     	ds	2
  1531  000041                     _simulate$1491:
  1532                           	opt stack 0
  1533                           
  1534                           ; 2 bytes @ 0x40
  1535  000041                     	ds	2
  1536  000043                     simulate@portCW:
  1537                           	opt stack 0
  1538                           
  1539                           ; 6 bytes @ 0x42
  1540  000043                     	ds	6
  1541  000049                     simulate@portCCW:
  1542                           	opt stack 0
  1543                           
  1544                           ; 6 bytes @ 0x48
  1545  000049                     	ds	6
  1546  00004F                     simulate@AA:
  1547                           	opt stack 0
  1548                           
  1549                           ; 2 bytes @ 0x4E
  1550  00004F                     	ds	2
  1551  000051                     simulate@C:
  1552                           	opt stack 0
  1553                           
  1554                           ; 2 bytes @ 0x50
  1555  000051                     	ds	2
  1556  000053                     simulate@V9:
  1557                           	opt stack 0
  1558                           
  1559                           ; 2 bytes @ 0x52
  1560  000053                     	ds	2
  1561  000055                     simulate@now:
  1562                           	opt stack 0
  1563                           
  1564                           ; 4 bytes @ 0x54
  1565  000055                     	ds	4
  1566  000059                     simulate@start:
  1567                           	opt stack 0
  1568                           
  1569                           ; 4 bytes @ 0x58
  1570  000059                     	ds	4
  1571  00005D                     simulate@sorted:
  1572                           	opt stack 0
  1573                           
  1574                           ; 4 bytes @ 0x5C
  1575  00005D                     	ds	4
  1576  000061                     simulate@period:
  1577                           	opt stack 0
  1578                           
  1579                           ; 2 bytes @ 0x60
  1580  000061                     	ds	2
  1581  000063                     ??_intrpt:
  1582                           
  1583                           ; 1 bytes @ 0x62
  1584  000063                     	ds	16
  1585  000073                     intrpt@keypress:
  1586                           	opt stack 0
  1587                           
  1588                           ; 1 bytes @ 0x72
  1589  000073                     	ds	1
  1590  000074                     intrpt@portCW:
  1591                           	opt stack 0
  1592                           
  1593                           ; 6 bytes @ 0x73
  1594  000074                     	ds	6
  1595                           tblptru	equ	0xFF8
  1596                           postinc0	equ	0xFEE
  1597                           wreg	equ	0xFE8
  1598                           
  1599 ;;
  1600 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1601 ;;
  1602 ;; *************** function _main *****************
  1603 ;; Defined at:
  1604 ;;		line 228 in file "main.c"
  1605 ;; Parameters:    Size  Location     Type
  1606 ;;		None
  1607 ;; Auto vars:     Size  Location     Type
  1608 ;;		None
  1609 ;; Return value:  Size  Location     Type
  1610 ;;                  2  160[None  ] int 
  1611 ;; Registers used:
  1612 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1613 ;; Tracked objects:
  1614 ;;		On entry : 0/0
  1615 ;;		On exit  : 0/0
  1616 ;;		Unchanged: 0/0
  1617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1620 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1621 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1622 ;;Total ram usage:        2 bytes
  1623 ;; Hardware stack levels required when called:   10
  1624 ;; This function calls:
  1625 ;;		_initialize
  1626 ;;		_lcdInst
  1627 ;;		_printf
  1628 ;;		_showRTC
  1629 ;; This function is called by:
  1630 ;;		Startup code after reset
  1631 ;; This function uses a non-reentrant model
  1632 ;;
  1633                           
  1634                           	psect	text0
  1635  001EC8                     __ptext0:
  1636                           	opt stack 0
  1637  001EC8                     _main:
  1638                           	opt stack 21
  1639                           
  1640                           ;main.c: 229: initialize();
  1641                           
  1642                           ; BSR set to: 0
  1643                           ;incstack = 0
  1644  001EC8  EC9E  F00D         	call	_initialize	;wreg free
  1645                           
  1646                           ;main.c: 231: lcdInst(0b10000000);
  1647  001ECC  0E80               	movlw	128
  1648  001ECE  EC5C  F011         	call	_lcdInst
  1649                           
  1650                           ;main.c: 232: printf("Welcome!          ");
  1651  001ED2  0E47               	movlw	low STR_21
  1652  001ED4  0100               	movlb	0	; () banked
  1653  001ED6  6FB6               	movwf	printf@f& (0+255),b
  1654  001ED8  0EFF               	movlw	high STR_21
  1655  001EDA  0100               	movlb	0	; () banked
  1656  001EDC  6FB7               	movwf	(printf@f+1)& (0+255),b
  1657  001EDE  EC09  F000         	call	_printf	;wreg free
  1658                           
  1659                           ;main.c: 234: _delay((unsigned long)((500)*(8000000/4000.0)));
  1660  001EE2  0E06               	movlw	6
  1661  001EE4  0100               	movlb	0	; () banked
  1662  001EE6  6FD3               	movwf	(??_main+1)& (0+255),b
  1663  001EE8  0E13               	movlw	19
  1664  001EEA  0100               	movlb	0	; () banked
  1665  001EEC  6FD2               	movwf	??_main& (0+255),b
  1666  001EEE  0EAD               	movlw	173
  1667  001EF0                     u3137:
  1668  001EF0  2EE8               	decfsz	wreg,f,c
  1669  001EF2  D7FE               	bra	u3137
  1670  001EF4  2FD2               	decfsz	??_main& (0+255),f,b
  1671  001EF6  D7FC               	bra	u3137
  1672  001EF8  2FD3               	decfsz	(??_main+1)& (0+255),f,b
  1673  001EFA  D7FA               	bra	u3137
  1674  001EFC  D000               	nop2	
  1675                           
  1676                           ;main.c: 236: INT1IE = 1;
  1677  001EFE  86F0               	bsf	intcon3,3,c	;volatile
  1678                           
  1679                           ;main.c: 237: INT1IF = 0;
  1680  001F00  90F0               	bcf	intcon3,0,c	;volatile
  1681                           
  1682                           ;main.c: 238: INT2IE = 0;
  1683  001F02  98F0               	bcf	intcon3,4,c	;volatile
  1684                           
  1685                           ;main.c: 239: (INTCONbits.GIE = 1);
  1686  001F04  8EF2               	bsf	intcon,7,c	;volatile
  1687                           
  1688                           ;main.c: 240: mode = 0;
  1689  001F06  0E00               	movlw	0
  1690  001F08  6E7B               	movwf	_mode+1,c
  1691  001F0A  0E00               	movlw	0
  1692  001F0C  6E7A               	movwf	_mode,c
  1693  001F0E                     l4330:
  1694  001F0E  EC18  F00D         	call	_showRTC	;wreg free
  1695  001F12  D7FD               	goto	l4330
  1696  001F14  00FF               	reset		;# 
  1697  001F16                     __end_of_main:
  1698                           	opt stack 0
  1699                           tblptru	equ	0xFF8
  1700                           intcon	equ	0xFF2
  1701                           intcon3	equ	0xFF0
  1702                           postinc0	equ	0xFEE
  1703                           wreg	equ	0xFE8
  1704                           
  1705 ;; *************** function _showRTC *****************
  1706 ;; Defined at:
  1707 ;;		line 150 in file "main.c"
  1708 ;; Parameters:    Size  Location     Type
  1709 ;;		None
  1710 ;; Auto vars:     Size  Location     Type
  1711 ;;		None
  1712 ;; Return value:  Size  Location     Type
  1713 ;;                  1    wreg      void 
  1714 ;; Registers used:
  1715 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1716 ;; Tracked objects:
  1717 ;;		On entry : 0/0
  1718 ;;		On exit  : 0/0
  1719 ;;		Unchanged: 0/0
  1720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1723 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1724 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1725 ;;Total ram usage:        2 bytes
  1726 ;; Hardware stack levels used:    1
  1727 ;; Hardware stack levels required when called:    9
  1728 ;; This function calls:
  1729 ;;		_getTime
  1730 ;;		_lcdInst
  1731 ;;		_printf
  1732 ;; This function is called by:
  1733 ;;		_main
  1734 ;; This function uses a non-reentrant model
  1735 ;;
  1736                           
  1737                           	psect	text1
  1738  001A30                     __ptext1:
  1739                           	opt stack 0
  1740  001A30                     _showRTC:
  1741                           	opt stack 21
  1742                           
  1743                           ;main.c: 151: getTime(time);
  1744                           
  1745                           ;incstack = 0
  1746  001A30  0EA3               	movlw	low _time
  1747  001A32  0100               	movlb	0	; () banked
  1748  001A34  6FAD               	movwf	getTime@time& (0+255),b
  1749  001A36  0E00               	movlw	high _time
  1750  001A38  0100               	movlb	0	; () banked
  1751  001A3A  6FAE               	movwf	(getTime@time+1)& (0+255),b
  1752  001A3C  ECD3  F00C         	call	_getTime	;wreg free
  1753                           
  1754                           ;main.c: 152: lcdInst(0b10000000);
  1755  001A40  0E80               	movlw	128
  1756  001A42  EC5C  F011         	call	_lcdInst
  1757                           
  1758                           ;main.c: 153: printf("    %02x/%02x/%02x      ", time[6], time[5], time[4]);
  1759  001A46  0EF3               	movlw	low STR_19
  1760  001A48  0100               	movlb	0	; () banked
  1761  001A4A  6FB6               	movwf	printf@f& (0+255),b
  1762  001A4C  0EFD               	movlw	high STR_19
  1763  001A4E  0100               	movlb	0	; () banked
  1764  001A50  6FB7               	movwf	(printf@f+1)& (0+255),b
  1765  001A52  C0A9  F0B8         	movff	_time+6,?_printf+2
  1766  001A56  0100               	movlb	0	; () banked
  1767  001A58  6BB9               	clrf	(?_printf+3)& (0+255),b
  1768  001A5A  C0A8  F0BA         	movff	_time+5,?_printf+4
  1769  001A5E  0100               	movlb	0	; () banked
  1770  001A60  6BBB               	clrf	(?_printf+5)& (0+255),b
  1771  001A62  C0A7  F0BC         	movff	_time+4,?_printf+6
  1772  001A66  0100               	movlb	0	; () banked
  1773  001A68  6BBD               	clrf	(?_printf+7)& (0+255),b
  1774  001A6A  EC09  F000         	call	_printf	;wreg free
  1775                           
  1776                           ;main.c: 154: lcdInst(0b11000000);
  1777  001A6E  0EC0               	movlw	192
  1778  001A70  EC5C  F011         	call	_lcdInst
  1779                           
  1780                           ;main.c: 155: printf("    %02x:%02x:%02x      ", time[2], time[1], time[0]);
  1781  001A74  0E0C               	movlw	low STR_20
  1782  001A76  0100               	movlb	0	; () banked
  1783  001A78  6FB6               	movwf	printf@f& (0+255),b
  1784  001A7A  0EFE               	movlw	high STR_20
  1785  001A7C  0100               	movlb	0	; () banked
  1786  001A7E  6FB7               	movwf	(printf@f+1)& (0+255),b
  1787  001A80  C0A5  F0B8         	movff	_time+2,?_printf+2
  1788  001A84  0100               	movlb	0	; () banked
  1789  001A86  6BB9               	clrf	(?_printf+3)& (0+255),b
  1790  001A88  C0A4  F0BA         	movff	_time+1,?_printf+4
  1791  001A8C  0100               	movlb	0	; () banked
  1792  001A8E  6BBB               	clrf	(?_printf+5)& (0+255),b
  1793  001A90  C0A3  F0BC         	movff	_time,?_printf+6
  1794  001A94  0100               	movlb	0	; () banked
  1795  001A96  6BBD               	clrf	(?_printf+7)& (0+255),b
  1796  001A98  EC09  F000         	call	_printf	;wreg free
  1797                           
  1798                           ;main.c: 156: _delay((unsigned long)((200)*(8000000/4000.0)));
  1799  001A9C  0E03               	movlw	3
  1800  001A9E  0100               	movlb	0	; () banked
  1801  001AA0  6FD1               	movwf	(??_showRTC+1)& (0+255),b
  1802  001AA2  0E08               	movlw	8
  1803  001AA4  0100               	movlb	0	; () banked
  1804  001AA6  6FD0               	movwf	??_showRTC& (0+255),b
  1805  001AA8  0E77               	movlw	119
  1806  001AAA                     u3147:
  1807  001AAA  2EE8               	decfsz	wreg,f,c
  1808  001AAC  D7FE               	bra	u3147
  1809  001AAE  2FD0               	decfsz	??_showRTC& (0+255),f,b
  1810  001AB0  D7FC               	bra	u3147
  1811  001AB2  2FD1               	decfsz	(??_showRTC+1)& (0+255),f,b
  1812  001AB4  D7FA               	bra	u3147
  1813  001AB6  0012               	return		;funcret
  1814  001AB8                     __end_of_showRTC:
  1815                           	opt stack 0
  1816                           tblptru	equ	0xFF8
  1817                           intcon	equ	0xFF2
  1818                           intcon3	equ	0xFF0
  1819                           postinc0	equ	0xFEE
  1820                           wreg	equ	0xFE8
  1821                           
  1822 ;; *************** function _printf *****************
  1823 ;; Defined at:
  1824 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  1825 ;; Parameters:    Size  Location     Type
  1826 ;;  f               2   12[BANK0 ] PTR const unsigned char 
  1827 ;;		 -> STR_53(17), STR_52(17), STR_51(18), STR_50(22), 
  1828 ;;		 -> STR_49(4), STR_48(4), STR_47(4), STR_46(4), 
  1829 ;;		 -> STR_45(4), STR_44(4), STR_43(4), STR_42(3), 
  1830 ;;		 -> STR_41(4), STR_40(4), STR_39(4), STR_38(4), 
  1831 ;;		 -> STR_37(18), STR_36(20), STR_35(16), STR_34(21), 
  1832 ;;		 -> STR_33(16), STR_32(21), STR_31(16), STR_30(20), 
  1833 ;;		 -> STR_29(16), STR_28(21), STR_27(23), STR_26(24), 
  1834 ;;		 -> STR_25(21), STR_24(24), STR_23(24), STR_22(25), 
  1835 ;;		 -> STR_21(19), STR_20(25), STR_19(25), STR_18(27), 
  1836 ;;		 -> STR_17(19), STR_16(25), STR_15(3), STR_14(3), 
  1837 ;;		 -> STR_13(3), STR_12(5), STR_11(3), STR_10(3), 
  1838 ;;		 -> STR_9(3), STR_8(4), STR_7(3), STR_6(3), 
  1839 ;;		 -> STR_5(3), STR_4(4), STR_3(5), STR_2(24), 
  1840 ;;		 -> STR_1(9), 
  1841 ;; Auto vars:     Size  Location     Type
  1842 ;;  idx             1   28[BANK0 ] unsigned char 
  1843 ;;  tmpval          4    0        struct .
  1844 ;;  width           2   35[BANK0 ] int 
  1845 ;;  val             2   32[BANK0 ] unsigned int 
  1846 ;;  len             2   29[BANK0 ] unsigned int 
  1847 ;;  cp              2   26[BANK0 ] PTR const unsigned char 
  1848 ;;		 -> printf@c(1), 
  1849 ;;  ap              2   24[BANK0 ] PTR void [1]
  1850 ;;		 -> ?i2_printf(2), ?_printf(2), 
  1851 ;;  c               1   37[BANK0 ] char 
  1852 ;;  flag            1   34[BANK0 ] unsigned char 
  1853 ;;  prec            1   31[BANK0 ] char 
  1854 ;; Return value:  Size  Location     Type
  1855 ;;                  2   12[BANK0 ] int 
  1856 ;; Registers used:
  1857 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1858 ;; Tracked objects:
  1859 ;;		On entry : 0/0
  1860 ;;		On exit  : 0/0
  1861 ;;		Unchanged: 0/0
  1862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1863 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1864 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1865 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1866 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1867 ;;Total ram usage:       26 bytes
  1868 ;; Hardware stack levels used:    1
  1869 ;; Hardware stack levels required when called:    8
  1870 ;; This function calls:
  1871 ;;		___lwdiv
  1872 ;;		___lwmod
  1873 ;;		___wmul
  1874 ;;		_isdigit
  1875 ;;		_putch
  1876 ;; This function is called by:
  1877 ;;		_showRTC
  1878 ;;		_main
  1879 ;;		_mainloop
  1880 ;; This function uses a non-reentrant model
  1881 ;;
  1882                           
  1883                           	psect	text2
  1884  000012                     __ptext2:
  1885                           	opt stack 0
  1886  000012                     _printf:
  1887                           	opt stack 21
  1888                           
  1889                           ;doprnt.c: 466: va_list ap;
  1890                           ;doprnt.c: 499: signed char c;
  1891                           ;doprnt.c: 501: int width;
  1892                           ;doprnt.c: 506: signed char prec;
  1893                           ;doprnt.c: 508: unsigned char flag;
  1894                           ;doprnt.c: 523: union {
  1895                           ;doprnt.c: 524: unsigned long vd;
  1896                           ;doprnt.c: 525: double integ;
  1897                           ;doprnt.c: 526: } tmpval;
  1898                           ;doprnt.c: 528: unsigned int val;
  1899                           ;doprnt.c: 529: unsigned len;
  1900                           ;doprnt.c: 530: const char * cp;
  1901                           ;doprnt.c: 533: *ap = __va_start();
  1902                           
  1903                           ;incstack = 0
  1904  000012  0EB8               	movlw	low (?_printf+2)
  1905  000014  0100               	movlb	0	; () banked
  1906  000016  6FC2               	movwf	printf@ap& (0+255),b
  1907  000018  0E00               	movlw	high (?_printf+2)
  1908  00001A  0100               	movlb	0	; () banked
  1909  00001C  6FC3               	movwf	(printf@ap+1)& (0+255),b
  1910                           
  1911                           ;doprnt.c: 536: while(c = *f++) {
  1912  00001E  D1CE               	goto	l3750
  1913  000020                     l3628:
  1914                           
  1915                           ; BSR set to: 0
  1916                           ;doprnt.c: 538: if(c != '%')
  1917  000020  0E25               	movlw	37
  1918  000022  0100               	movlb	0	; () banked
  1919  000024  19CF               	xorwf	printf@c& (0+255),w,b
  1920  000026  B4D8               	btfsc	status,2,c
  1921  000028  D005               	goto	l3632
  1922                           
  1923                           ; BSR set to: 0
  1924                           ;doprnt.c: 540: {
  1925                           ;doprnt.c: 541: (putch(c) );
  1926  00002A  0100               	movlb	0	; () banked
  1927  00002C  51CF               	movf	printf@c& (0+255),w,b
  1928  00002E  EC54  F011         	call	_putch
  1929                           
  1930                           ;doprnt.c: 542: continue;
  1931  000032  D1C4               	goto	l3750
  1932  000034                     l3632:
  1933                           
  1934                           ;doprnt.c: 543: }
  1935                           ;doprnt.c: 546: width = 0;
  1936  000034  0E00               	movlw	0
  1937  000036  0100               	movlb	0	; () banked
  1938  000038  6FCE               	movwf	(printf@width+1)& (0+255),b
  1939  00003A  0E00               	movlw	0
  1940  00003C  6FCD               	movwf	printf@width& (0+255),b
  1941                           
  1942                           ;doprnt.c: 548: flag = 0;
  1943  00003E  0E00               	movlw	0
  1944  000040  0100               	movlb	0	; () banked
  1945  000042  6FCC               	movwf	printf@flag& (0+255),b
  1946                           
  1947                           ; BSR set to: 0
  1948                           ;doprnt.c: 551: switch(*f) {
  1949                           
  1950                           ;doprnt.c: 550: for(;;) {
  1951  000044  D005               	goto	l3638
  1952  000046                     l3634:
  1953                           
  1954                           ;doprnt.c: 580: flag |= 0x04;
  1955  000046  0100               	movlb	0	; () banked
  1956  000048  85CC               	bsf	printf@flag& (0+255),2,b
  1957                           
  1958                           ;doprnt.c: 581: f++;
  1959  00004A  0100               	movlb	0	; () banked
  1960  00004C  4BB6               	infsnz	printf@f& (0+255),f,b
  1961  00004E  2BB7               	incf	(printf@f+1)& (0+255),f,b
  1962  000050                     l3638:
  1963  000050  C0B6  FFF6         	movff	printf@f,tblptrl
  1964  000054  C0B7  FFF7         	movff	printf@f+1,tblptrh
  1965  000058                     	if	0	;tblptru may be non-zero
  1966  000058                     	endif
  1967  000058                     	if	0	;tblptru may be non-zero
  1968  000058                     	endif
  1969  000058  0008               	tblrd		*
  1970  00005A  50F5               	movf	tablat,w,c
  1971                           
  1972                           ; Switch size 1, requested type "space"
  1973                           ; Number of cases is 1, Range of values is 48 to 48
  1974                           ; switch strategies available:
  1975                           ; Name         Instructions Cycles
  1976                           ; simple_byte            4     3 (average)
  1977                           ;	Chosen strategy is simple_byte
  1978  00005C  0A30               	xorlw	48	; case 48
  1979  00005E  B4D8               	btfsc	status,2,c
  1980  000060  D7F2               	goto	l3634
  1981                           
  1982                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1983                           
  1984                           ;doprnt.c: 586: }
  1985                           
  1986                           ;doprnt.c: 585: break;
  1987  000062  C0B6  FFF6         	movff	printf@f,tblptrl
  1988  000066  C0B7  FFF7         	movff	printf@f+1,tblptrh
  1989  00006A                     	if	0	;tblptru may be non-zero
  1990  00006A                     	endif
  1991  00006A                     	if	0	;tblptru may be non-zero
  1992  00006A                     	endif
  1993  00006A  0008               	tblrd		*
  1994  00006C  50F5               	movf	tablat,w,c
  1995  00006E  EC5D  F010         	call	_isdigit
  1996  000072  A0D8               	btfss	status,0,c
  1997  000074  D092               	goto	l3678
  1998                           
  1999                           ;doprnt.c: 598: width = 0;
  2000  000076  0E00               	movlw	0
  2001  000078  0100               	movlb	0	; () banked
  2002  00007A  6FCE               	movwf	(printf@width+1)& (0+255),b
  2003  00007C  0E00               	movlw	0
  2004  00007E  6FCD               	movwf	printf@width& (0+255),b
  2005  000080                     l3644:
  2006                           
  2007                           ;doprnt.c: 600: width *= 10;
  2008  000080  C0CD  F0AA         	movff	printf@width,___wmul@multiplier
  2009  000084  C0CE  F0AB         	movff	printf@width+1,___wmul@multiplier+1
  2010  000088  0E00               	movlw	0
  2011  00008A  0100               	movlb	0	; () banked
  2012  00008C  6FAD               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2013  00008E  0E0A               	movlw	10
  2014  000090  6FAC               	movwf	___wmul@multiplicand& (0+255),b
  2015  000092  EC2B  F010         	call	___wmul	;wreg free
  2016  000096  C0AA  F0CD         	movff	?___wmul,printf@width
  2017  00009A  C0AB  F0CE         	movff	?___wmul+1,printf@width+1
  2018                           
  2019                           ;doprnt.c: 601: width += *f++ - '0';
  2020  00009E  0ED0               	movlw	208
  2021  0000A0  0100               	movlb	0	; () banked
  2022  0000A2  6FBE               	movwf	??_printf& (0+255),b
  2023  0000A4  0EFF               	movlw	255
  2024  0000A6  0100               	movlb	0	; () banked
  2025  0000A8  6FBF               	movwf	(??_printf+1)& (0+255),b
  2026  0000AA  C0B6  FFF6         	movff	printf@f,tblptrl
  2027  0000AE  C0B7  FFF7         	movff	printf@f+1,tblptrh
  2028  0000B2                     	if	0	;tblptru may be non-zero
  2029  0000B2                     	endif
  2030  0000B2                     	if	0	;tblptru may be non-zero
  2031  0000B2                     	endif
  2032  0000B2  0008               	tblrd		*
  2033  0000B4  50F5               	movf	tablat,w,c
  2034  0000B6  0100               	movlb	0	; () banked
  2035  0000B8  6FC0               	movwf	(??_printf+2)& (0+255),b
  2036  0000BA  6BC1               	clrf	(??_printf+3)& (0+255),b
  2037  0000BC  0100               	movlb	0	; () banked
  2038  0000BE  51BE               	movf	??_printf& (0+255),w,b
  2039  0000C0  0100               	movlb	0	; () banked
  2040  0000C2  27C0               	addwf	(??_printf+2)& (0+255),f,b
  2041  0000C4  0100               	movlb	0	; () banked
  2042  0000C6  51BF               	movf	(??_printf+1)& (0+255),w,b
  2043  0000C8  0100               	movlb	0	; () banked
  2044  0000CA  23C1               	addwfc	(??_printf+3)& (0+255),f,b
  2045  0000CC  0100               	movlb	0	; () banked
  2046  0000CE  51C0               	movf	(??_printf+2)& (0+255),w,b
  2047  0000D0  0100               	movlb	0	; () banked
  2048  0000D2  27CD               	addwf	printf@width& (0+255),f,b
  2049  0000D4  0100               	movlb	0	; () banked
  2050  0000D6  51C1               	movf	(??_printf+3)& (0+255),w,b
  2051  0000D8  0100               	movlb	0	; () banked
  2052  0000DA  23CE               	addwfc	(printf@width+1)& (0+255),f,b
  2053                           
  2054                           ; BSR set to: 0
  2055  0000DC  0100               	movlb	0	; () banked
  2056  0000DE  4BB6               	infsnz	printf@f& (0+255),f,b
  2057  0000E0  2BB7               	incf	(printf@f+1)& (0+255),f,b
  2058                           
  2059                           ; BSR set to: 0
  2060                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2061  0000E2  C0B6  FFF6         	movff	printf@f,tblptrl
  2062  0000E6  C0B7  FFF7         	movff	printf@f+1,tblptrh
  2063  0000EA                     	if	0	;tblptru may be non-zero
  2064  0000EA                     	endif
  2065  0000EA                     	if	0	;tblptru may be non-zero
  2066  0000EA                     	endif
  2067  0000EA  0008               	tblrd		*
  2068  0000EC  50F5               	movf	tablat,w,c
  2069  0000EE  EC5D  F010         	call	_isdigit
  2070  0000F2  A0D8               	btfss	status,0,c
  2071  0000F4  D052               	goto	l3678
  2072  0000F6  D7C4               	goto	l3644
  2073  0000F8                     l3652:
  2074                           
  2075                           ;doprnt.c: 721: flag |= 0x80;
  2076  0000F8  0100               	movlb	0	; () banked
  2077  0000FA  8FCC               	bsf	printf@flag& (0+255),7,b
  2078                           
  2079                           ;doprnt.c: 723: break;
  2080  0000FC  D064               	goto	l3680
  2081  0000FE                     l3654:
  2082                           
  2083                           ; BSR set to: 0
  2084                           ;doprnt.c: 757: if(width > len)
  2085  0000FE  0100               	movlb	0	; () banked
  2086  000100  51CD               	movf	printf@width& (0+255),w,b
  2087  000102  0100               	movlb	0	; () banked
  2088  000104  5DC7               	subwf	printf@len& (0+255),w,b
  2089  000106  0100               	movlb	0	; () banked
  2090  000108  51CE               	movf	(printf@width+1)& (0+255),w,b
  2091  00010A  0100               	movlb	0	; () banked
  2092  00010C  59C8               	subwfb	(printf@len+1)& (0+255),w,b
  2093  00010E  B0D8               	btfsc	status,0,c
  2094  000110  D009               	goto	l3658
  2095                           
  2096                           ; BSR set to: 0
  2097                           ;doprnt.c: 758: width -= len;
  2098  000112  0100               	movlb	0	; () banked
  2099  000114  51C7               	movf	printf@len& (0+255),w,b
  2100  000116  0100               	movlb	0	; () banked
  2101  000118  5FCD               	subwf	printf@width& (0+255),f,b
  2102  00011A  0100               	movlb	0	; () banked
  2103  00011C  51C8               	movf	(printf@len+1)& (0+255),w,b
  2104  00011E  0100               	movlb	0	; () banked
  2105  000120  5BCE               	subwfb	(printf@width+1)& (0+255),f,b
  2106  000122  D009               	goto	l3662
  2107  000124                     l3658:
  2108                           
  2109                           ; BSR set to: 0
  2110                           ;doprnt.c: 759: else
  2111                           ;doprnt.c: 760: width = 0;
  2112  000124  0E00               	movlw	0
  2113  000126  0100               	movlb	0	; () banked
  2114  000128  6FCE               	movwf	(printf@width+1)& (0+255),b
  2115  00012A  0E00               	movlw	0
  2116  00012C  6FCD               	movwf	printf@width& (0+255),b
  2117                           
  2118                           ; BSR set to: 0
  2119                           ;doprnt.c: 764: while(width--)
  2120  00012E  D003               	goto	l3662
  2121  000130                     l3660:
  2122                           
  2123                           ; BSR set to: 0
  2124                           ;doprnt.c: 765: (putch(' ') );
  2125  000130  0E20               	movlw	32
  2126  000132  EC54  F011         	call	_putch
  2127  000136                     l3662:
  2128  000136  0100               	movlb	0	; () banked
  2129  000138  07CD               	decf	printf@width& (0+255),f,b
  2130  00013A  A0D8               	btfss	status,0,c
  2131  00013C  07CE               	decf	(printf@width+1)& (0+255),f,b
  2132  00013E  0100               	movlb	0	; () banked
  2133  000140  29CD               	incf	printf@width& (0+255),w,b
  2134  000142  E1F6               	bnz	l3660
  2135  000144  0100               	movlb	0	; () banked
  2136  000146  29CE               	incf	(printf@width+1)& (0+255),w,b
  2137  000148  B4D8               	btfsc	status,2,c
  2138  00014A  D00B               	goto	l3668
  2139  00014C  D7F1               	goto	l3660
  2140  00014E                     l3664:
  2141                           
  2142                           ; BSR set to: 0
  2143                           ;doprnt.c: 768: (putch(*cp++) );
  2144  00014E  C0C4  FFD9         	movff	printf@cp,fsr2l
  2145  000152  C0C5  FFDA         	movff	printf@cp+1,fsr2h
  2146  000156  50DF               	movf	indf2,w,c
  2147  000158  EC54  F011         	call	_putch
  2148  00015C  0100               	movlb	0	; () banked
  2149  00015E  4BC4               	infsnz	printf@cp& (0+255),f,b
  2150  000160  2BC5               	incf	(printf@cp+1)& (0+255),f,b
  2151  000162                     l3668:
  2152                           
  2153                           ; BSR set to: 0
  2154  000162  0100               	movlb	0	; () banked
  2155  000164  07C7               	decf	printf@len& (0+255),f,b
  2156  000166  A0D8               	btfss	status,0,c
  2157  000168  07C8               	decf	(printf@len+1)& (0+255),f,b
  2158  00016A  0100               	movlb	0	; () banked
  2159  00016C  29C7               	incf	printf@len& (0+255),w,b
  2160  00016E  E1EF               	bnz	l3664
  2161  000170  0100               	movlb	0	; () banked
  2162  000172  29C8               	incf	(printf@len+1)& (0+255),w,b
  2163  000174  B4D8               	btfsc	status,2,c
  2164  000176  D122               	goto	l3750
  2165  000178  D7EA               	goto	l3664
  2166  00017A                     l3670:
  2167                           
  2168                           ; BSR set to: 0
  2169                           ;doprnt.c: 805: cp = (char *)&c;
  2170  00017A  0ECF               	movlw	low printf@c
  2171  00017C  0100               	movlb	0	; () banked
  2172  00017E  6FC4               	movwf	printf@cp& (0+255),b
  2173  000180  0E00               	movlw	high printf@c
  2174  000182  0100               	movlb	0	; () banked
  2175  000184  6FC5               	movwf	(printf@cp+1)& (0+255),b
  2176                           
  2177                           ; BSR set to: 0
  2178                           ;doprnt.c: 806: len = 1;
  2179  000186  0E00               	movlw	0
  2180  000188  0100               	movlb	0	; () banked
  2181  00018A  6FC8               	movwf	(printf@len+1)& (0+255),b
  2182  00018C  0E01               	movlw	1
  2183  00018E  6FC7               	movwf	printf@len& (0+255),b
  2184                           
  2185                           ;doprnt.c: 807: goto dostring;
  2186  000190  D7B6               	goto	l3654
  2187  000192                     l3674:
  2188                           
  2189                           ; BSR set to: 0
  2190                           ;doprnt.c: 818: flag |= 0xC0;
  2191  000192  0EC0               	movlw	192
  2192  000194  0100               	movlb	0	; () banked
  2193  000196  13CC               	iorwf	printf@flag& (0+255),f,b
  2194                           
  2195                           ; BSR set to: 0
  2196                           ;doprnt.c: 822: }
  2197                           
  2198                           ;doprnt.c: 819: break;
  2199  000198  D016               	goto	l3680
  2200  00019A                     l3678:
  2201  00019A  C0B6  FFF6         	movff	printf@f,tblptrl
  2202  00019E  C0B7  FFF7         	movff	printf@f+1,tblptrh
  2203  0001A2  0100               	movlb	0	; () banked
  2204  0001A4  4BB6               	infsnz	printf@f& (0+255),f,b
  2205  0001A6  2BB7               	incf	(printf@f+1)& (0+255),f,b
  2206  0001A8                     	if	0	;tblptru may be non-zero
  2207  0001A8                     	endif
  2208  0001A8                     	if	0	;tblptru may be non-zero
  2209  0001A8                     	endif
  2210  0001A8  0008               	tblrd		*
  2211  0001AA  CFF5 F0CF          	movff	tablat,printf@c
  2212  0001AE  0100               	movlb	0	; () banked
  2213  0001B0  51CF               	movf	printf@c& (0+255),w,b
  2214                           
  2215                           ; Switch size 1, requested type "space"
  2216                           ; Number of cases is 3, Range of values is 0 to 120
  2217                           ; switch strategies available:
  2218                           ; Name         Instructions Cycles
  2219                           ; simple_byte           10     6 (average)
  2220                           ;	Chosen strategy is simple_byte
  2221  0001B2  0A00               	xorlw	0	; case 0
  2222  0001B4  B4D8               	btfsc	status,2,c
  2223  0001B6  0012               	return	
  2224  0001B8  0A75               	xorlw	117	; case 117
  2225  0001BA  B4D8               	btfsc	status,2,c
  2226  0001BC  D7EA               	goto	l3674
  2227  0001BE  0A0D               	xorlw	13	; case 120
  2228  0001C0  B4D8               	btfsc	status,2,c
  2229  0001C2  D79A               	goto	l3652
  2230  0001C4  D7DA               	goto	l3670
  2231  0001C6                     l3680:
  2232                           
  2233                           ; BSR set to: 0
  2234                           ;doprnt.c: 1273: {
  2235                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2236  0001C6  C0C2  FFD9         	movff	printf@ap,fsr2l
  2237  0001CA  C0C3  FFDA         	movff	printf@ap+1,fsr2h
  2238  0001CE  CFDE F0CA          	movff	postinc2,printf@val
  2239  0001D2  CFDD F0CB          	movff	postdec2,printf@val+1
  2240                           
  2241                           ; BSR set to: 0
  2242  0001D6  0E02               	movlw	2
  2243  0001D8  0100               	movlb	0	; () banked
  2244  0001DA  27C2               	addwf	printf@ap& (0+255),f,b
  2245  0001DC  0E00               	movlw	0
  2246  0001DE  23C3               	addwfc	(printf@ap+1)& (0+255),f,b
  2247                           
  2248                           ;doprnt.c: 1287: }
  2249                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  2250  0001E0  D03C               	goto	l3714
  2251  0001E2                     l3684:
  2252                           
  2253                           ; BSR set to: 0
  2254                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2255  0001E2  0E01               	movlw	1
  2256  0001E4  0100               	movlb	0	; () banked
  2257  0001E6  6FCF               	movwf	printf@c& (0+255),b
  2258  0001E8                     l3686:
  2259                           
  2260                           ; BSR set to: 0
  2261  0001E8  0E05               	movlw	5
  2262  0001EA  0100               	movlb	0	; () banked
  2263  0001EC  19CF               	xorwf	printf@c& (0+255),w,b
  2264  0001EE  B4D8               	btfsc	status,2,c
  2265  0001F0  D03D               	goto	l3716
  2266                           
  2267                           ; BSR set to: 0
  2268                           ;doprnt.c: 1306: if(val < dpowers[c])
  2269                           
  2270                           ; BSR set to: 0
  2271                           
  2272                           ; BSR set to: 0
  2273  0001F2  0100               	movlb	0	; () banked
  2274  0001F4  51CF               	movf	printf@c& (0+255),w,b
  2275  0001F6  0D02               	mullw	2
  2276  0001F8  0EAD               	movlw	low _dpowers
  2277  0001FA  24F3               	addwf	prodl,w,c
  2278  0001FC  6EF6               	movwf	tblptrl,c
  2279  0001FE  0EFD               	movlw	high _dpowers
  2280  000200  20F4               	addwfc	prodh,w,c
  2281  000202  6EF7               	movwf	tblptrh,c
  2282  000204                     	if	0	;There are less than 3 active tblptr bytes
  2283  000204                     	endif
  2284  000204  0009               	tblrd		*+
  2285  000206  50F5               	movf	tablat,w,c
  2286  000208  0100               	movlb	0	; () banked
  2287  00020A  5DCA               	subwf	printf@val& (0+255),w,b
  2288  00020C  0009               	tblrd		*+
  2289  00020E  50F5               	movf	tablat,w,c
  2290  000210  0100               	movlb	0	; () banked
  2291  000212  59CB               	subwfb	(printf@val+1)& (0+255),w,b
  2292  000214  A0D8               	btfss	status,0,c
  2293  000216  D02A               	goto	l3716
  2294                           
  2295                           ; BSR set to: 0
  2296                           
  2297                           ; BSR set to: 0
  2298                           
  2299                           ; BSR set to: 0
  2300                           ;doprnt.c: 1307: break;
  2301  000218  0100               	movlb	0	; () banked
  2302  00021A  2BCF               	incf	printf@c& (0+255),f,b
  2303  00021C  D7E5               	goto	l3686
  2304  00021E                     l3698:
  2305                           
  2306                           ; BSR set to: 0
  2307                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2308  00021E  0E01               	movlw	1
  2309  000220  0100               	movlb	0	; () banked
  2310  000222  6FCF               	movwf	printf@c& (0+255),b
  2311  000224                     l3700:
  2312                           
  2313                           ; BSR set to: 0
  2314  000224  0E04               	movlw	4
  2315  000226  0100               	movlb	0	; () banked
  2316  000228  19CF               	xorwf	printf@c& (0+255),w,b
  2317  00022A  B4D8               	btfsc	status,2,c
  2318  00022C  D01F               	goto	l3716
  2319                           
  2320                           ; BSR set to: 0
  2321                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2322                           
  2323                           ; BSR set to: 0
  2324                           
  2325                           ; BSR set to: 0
  2326  00022E  0100               	movlb	0	; () banked
  2327  000230  51CF               	movf	printf@c& (0+255),w,b
  2328  000232  0D02               	mullw	2
  2329  000234  0EB7               	movlw	low _hexpowers
  2330  000236  24F3               	addwf	prodl,w,c
  2331  000238  6EF6               	movwf	tblptrl,c
  2332  00023A  0EFD               	movlw	high _hexpowers
  2333  00023C  20F4               	addwfc	prodh,w,c
  2334  00023E  6EF7               	movwf	tblptrh,c
  2335  000240                     	if	0	;There are less than 3 active tblptr bytes
  2336  000240                     	endif
  2337  000240  0009               	tblrd		*+
  2338  000242  50F5               	movf	tablat,w,c
  2339  000244  0100               	movlb	0	; () banked
  2340  000246  5DCA               	subwf	printf@val& (0+255),w,b
  2341  000248  0009               	tblrd		*+
  2342  00024A  50F5               	movf	tablat,w,c
  2343  00024C  0100               	movlb	0	; () banked
  2344  00024E  59CB               	subwfb	(printf@val+1)& (0+255),w,b
  2345  000250  A0D8               	btfss	status,0,c
  2346  000252  D00C               	goto	l3716
  2347                           
  2348                           ; BSR set to: 0
  2349                           
  2350                           ; BSR set to: 0
  2351                           
  2352                           ; BSR set to: 0
  2353                           ;doprnt.c: 1318: break;
  2354  000254  0100               	movlb	0	; () banked
  2355  000256  2BCF               	incf	printf@c& (0+255),f,b
  2356  000258  D7E5               	goto	l3700
  2357  00025A                     l3714:
  2358                           
  2359                           ; BSR set to: 0
  2360  00025A  0100               	movlb	0	; () banked
  2361  00025C  51CC               	movf	printf@flag& (0+255),w,b
  2362  00025E  0BC0               	andlw	192
  2363                           
  2364                           ; Switch size 1, requested type "space"
  2365                           ; Number of cases is 2, Range of values is 128 to 192
  2366                           ; switch strategies available:
  2367                           ; Name         Instructions Cycles
  2368                           ; simple_byte            7     4 (average)
  2369                           ;	Chosen strategy is simple_byte
  2370  000260  0A80               	xorlw	128	; case 128
  2371  000262  B4D8               	btfsc	status,2,c
  2372  000264  D7DC               	goto	l3698
  2373  000266  0A40               	xorlw	64	; case 192
  2374  000268  B4D8               	btfsc	status,2,c
  2375  00026A  D7BB               	goto	l3684
  2376  00026C                     l3716:
  2377                           
  2378                           ; BSR set to: 0
  2379                           ;doprnt.c: 1381: if(width > c)
  2380  00026C  0E80               	movlw	128
  2381  00026E  0100               	movlb	0	; () banked
  2382  000270  BFCF               	btfsc	printf@c& (0+255),7,b
  2383  000272  0E7F               	movlw	127
  2384  000274  0100               	movlb	0	; () banked
  2385  000276  6FBE               	movwf	??_printf& (0+255),b
  2386  000278  0100               	movlb	0	; () banked
  2387  00027A  51CD               	movf	printf@width& (0+255),w,b
  2388  00027C  0100               	movlb	0	; () banked
  2389  00027E  5DCF               	subwf	printf@c& (0+255),w,b
  2390  000280  0100               	movlb	0	; () banked
  2391  000282  51CE               	movf	(printf@width+1)& (0+255),w,b
  2392  000284  0A80               	xorlw	128
  2393  000286  0100               	movlb	0	; () banked
  2394  000288  59BE               	subwfb	??_printf& (0+255),w,b
  2395  00028A  B0D8               	btfsc	status,0,c
  2396  00028C  D00B               	goto	l3720
  2397                           
  2398                           ; BSR set to: 0
  2399                           ;doprnt.c: 1382: width -= c;
  2400  00028E  0100               	movlb	0	; () banked
  2401  000290  51CF               	movf	printf@c& (0+255),w,b
  2402  000292  0100               	movlb	0	; () banked
  2403  000294  5FCD               	subwf	printf@width& (0+255),f,b
  2404  000296  0E00               	movlw	0
  2405  000298  0100               	movlb	0	; () banked
  2406  00029A  BFCF               	btfsc	printf@c& (0+255),7,b
  2407  00029C  0EFF               	movlw	255
  2408  00029E  0100               	movlb	0	; () banked
  2409  0002A0  5BCE               	subwfb	(printf@width+1)& (0+255),f,b
  2410  0002A2  D005               	goto	l3722
  2411  0002A4                     l3720:
  2412                           
  2413                           ; BSR set to: 0
  2414                           ;doprnt.c: 1383: else
  2415                           ;doprnt.c: 1384: width = 0;
  2416  0002A4  0E00               	movlw	0
  2417  0002A6  0100               	movlb	0	; () banked
  2418  0002A8  6FCE               	movwf	(printf@width+1)& (0+255),b
  2419  0002AA  0E00               	movlw	0
  2420  0002AC  6FCD               	movwf	printf@width& (0+255),b
  2421  0002AE                     l3722:
  2422                           
  2423                           ; BSR set to: 0
  2424                           ;doprnt.c: 1387: if(flag & 0x04) {
  2425  0002AE  0100               	movlb	0	; () banked
  2426  0002B0  A5CC               	btfss	printf@flag& (0+255),2,b
  2427  0002B2  D00E               	goto	l3730
  2428  0002B4                     
  2429                           ; BSR set to: 0
  2430                           ;doprnt.c: 1415: if(width)
  2431  0002B4  0100               	movlb	0	; () banked
  2432  0002B6  51CD               	movf	printf@width& (0+255),w,b
  2433  0002B8  0100               	movlb	0	; () banked
  2434  0002BA  11CE               	iorwf	(printf@width+1)& (0+255),w,b
  2435  0002BC  B4D8               	btfsc	status,2,c
  2436  0002BE  D01B               	goto	l509
  2437                           
  2438                           ; BSR set to: 0
  2439                           ;doprnt.c: 1417: (putch('0') );
  2440                           
  2441                           ; BSR set to: 0
  2442                           
  2443                           ;doprnt.c: 1416: do
  2444  0002C0  0E30               	movlw	48
  2445  0002C2  EC54  F011         	call	_putch
  2446                           
  2447                           ;doprnt.c: 1418: while(--width);
  2448  0002C6  0100               	movlb	0	; () banked
  2449  0002C8  07CD               	decf	printf@width& (0+255),f,b
  2450  0002CA  A0D8               	btfss	status,0,c
  2451  0002CC  07CE               	decf	(printf@width+1)& (0+255),f,b
  2452  0002CE  D7F2               	goto	L4
  2453  0002D0                     l3730:
  2454                           
  2455                           ; BSR set to: 0
  2456                           ;doprnt.c: 1422: {
  2457                           ;doprnt.c: 1424: if(width
  2458                           ;doprnt.c: 1428: )
  2459  0002D0  0100               	movlb	0	; () banked
  2460  0002D2  51CD               	movf	printf@width& (0+255),w,b
  2461  0002D4  0100               	movlb	0	; () banked
  2462  0002D6  11CE               	iorwf	(printf@width+1)& (0+255),w,b
  2463  0002D8  B4D8               	btfsc	status,2,c
  2464  0002DA  D00D               	goto	l509
  2465  0002DC                     l3732:
  2466                           
  2467                           ; BSR set to: 0
  2468                           ;doprnt.c: 1430: (putch(' ') );
  2469  0002DC  0E20               	movlw	32
  2470  0002DE  EC54  F011         	call	_putch
  2471                           
  2472                           ;doprnt.c: 1431: while(--width);
  2473  0002E2  0100               	movlb	0	; () banked
  2474  0002E4  07CD               	decf	printf@width& (0+255),f,b
  2475  0002E6  A0D8               	btfss	status,0,c
  2476  0002E8  07CE               	decf	(printf@width+1)& (0+255),f,b
  2477  0002EA  0100               	movlb	0	; () banked
  2478  0002EC  51CD               	movf	printf@width& (0+255),w,b
  2479  0002EE  0100               	movlb	0	; () banked
  2480  0002F0  11CE               	iorwf	(printf@width+1)& (0+255),w,b
  2481  0002F2  A4D8               	btfss	status,2,c
  2482  0002F4  D7F3               	goto	l3732
  2483  0002F6                     l509:
  2484                           
  2485                           ; BSR set to: 0
  2486                           ;doprnt.c: 1469: }
  2487                           ;doprnt.c: 1472: prec = c;
  2488  0002F6  C0CF  F0C9         	movff	printf@c,printf@prec
  2489                           
  2490                           ;doprnt.c: 1474: while(prec--) {
  2491  0002FA  D05A               	goto	l3748
  2492  0002FC                     l3736:
  2493                           
  2494                           ; BSR set to: 0
  2495                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2496  0002FC  0100               	movlb	0	; () banked
  2497  0002FE  51C9               	movf	printf@prec& (0+255),w,b
  2498  000300  0D02               	mullw	2
  2499  000302  0EAD               	movlw	low _dpowers
  2500  000304  24F3               	addwf	prodl,w,c
  2501  000306  6EF6               	movwf	tblptrl,c
  2502  000308  0EFD               	movlw	high _dpowers
  2503  00030A  20F4               	addwfc	prodh,w,c
  2504  00030C  6EF7               	movwf	tblptrh,c
  2505  00030E                     	if	0	;There are less than 3 active tblptr bytes
  2506  00030E                     	endif
  2507  00030E  0009               	tblrd		*+
  2508  000310  CFF5 F0AC          	movff	tablat,___lwdiv@divisor
  2509  000314  000A               	tblrd		*-
  2510  000316  CFF5 F0AD          	movff	tablat,___lwdiv@divisor+1
  2511  00031A  C0CA  F0AA         	movff	printf@val,___lwdiv@dividend
  2512  00031E  C0CB  F0AB         	movff	printf@val+1,___lwdiv@dividend+1
  2513  000322  ECDC  F00D         	call	___lwdiv	;wreg free
  2514  000326  C0AA  F0B1         	movff	?___lwdiv,___lwmod@dividend
  2515  00032A  C0AB  F0B2         	movff	?___lwdiv+1,___lwmod@dividend+1
  2516  00032E  0E00               	movlw	0
  2517  000330  0100               	movlb	0	; () banked
  2518  000332  6FB4               	movwf	(___lwmod@divisor+1)& (0+255),b
  2519  000334  0E0A               	movlw	10
  2520  000336  6FB3               	movwf	___lwmod@divisor& (0+255),b
  2521  000338  EC87  F00E         	call	___lwmod	;wreg free
  2522  00033C  0100               	movlb	0	; () banked
  2523  00033E  51B1               	movf	?___lwmod& (0+255),w,b
  2524  000340  0F30               	addlw	48
  2525  000342  0100               	movlb	0	; () banked
  2526  000344  6FCF               	movwf	printf@c& (0+255),b
  2527                           
  2528                           ;doprnt.c: 1491: break;
  2529  000346  D030               	goto	l3746
  2530  000348                     l3738:
  2531                           
  2532                           ; BSR set to: 0
  2533                           ;doprnt.c: 1499: {
  2534                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2535  000348  C0CA  F0AA         	movff	printf@val,___lwdiv@dividend
  2536  00034C  C0CB  F0AB         	movff	printf@val+1,___lwdiv@dividend+1
  2537  000350  0100               	movlb	0	; () banked
  2538  000352  51C9               	movf	printf@prec& (0+255),w,b
  2539  000354  0D02               	mullw	2
  2540  000356  0EB7               	movlw	low _hexpowers
  2541  000358  24F3               	addwf	prodl,w,c
  2542  00035A  6EF6               	movwf	tblptrl,c
  2543  00035C  0EFD               	movlw	high _hexpowers
  2544  00035E  20F4               	addwfc	prodh,w,c
  2545  000360  6EF7               	movwf	tblptrh,c
  2546  000362                     	if	0	;There are less than 3 active tblptr bytes
  2547  000362                     	endif
  2548  000362  0009               	tblrd		*+
  2549  000364  CFF5 F0AC          	movff	tablat,___lwdiv@divisor
  2550  000368  000A               	tblrd		*-
  2551  00036A  CFF5 F0AD          	movff	tablat,___lwdiv@divisor+1
  2552  00036E  ECDC  F00D         	call	___lwdiv	;wreg free
  2553  000372  0100               	movlb	0	; () banked
  2554  000374  51AA               	movf	?___lwdiv& (0+255),w,b
  2555  000376  0B0F               	andlw	15
  2556  000378  0100               	movlb	0	; () banked
  2557  00037A  6FC6               	movwf	printf@idx& (0+255),b
  2558                           
  2559                           ; BSR set to: 0
  2560                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2561  00037C  0100               	movlb	0	; () banked
  2562  00037E  51C6               	movf	printf@idx& (0+255),w,b
  2563  000380  0D01               	mullw	1
  2564  000382  0E91               	movlw	low STR_54
  2565  000384  24F3               	addwf	prodl,w,c
  2566  000386  6EF6               	movwf	tblptrl,c
  2567  000388  0EFF               	movlw	high STR_54
  2568  00038A  20F4               	addwfc	prodh,w,c
  2569  00038C  6EF7               	movwf	tblptrh,c
  2570  00038E                     	if	0	;There are less than 3 active tblptr bytes
  2571  00038E                     	endif
  2572  00038E  0008               	tblrd		*
  2573  000390  CFF5 F0CF          	movff	tablat,printf@c
  2574                           
  2575                           ; BSR set to: 0
  2576                           ;doprnt.c: 1523: }
  2577                           
  2578                           ;doprnt.c: 1508: }
  2579                           ;doprnt.c: 1510: break;
  2580  000394  D009               	goto	l3746
  2581  000396                     l3744:
  2582                           
  2583                           ; BSR set to: 0
  2584  000396  0100               	movlb	0	; () banked
  2585  000398  51CC               	movf	printf@flag& (0+255),w,b
  2586  00039A  0BC0               	andlw	192
  2587                           
  2588                           ; Switch size 1, requested type "space"
  2589                           ; Number of cases is 2, Range of values is 128 to 192
  2590                           ; switch strategies available:
  2591                           ; Name         Instructions Cycles
  2592                           ; simple_byte            7     4 (average)
  2593                           ;	Chosen strategy is simple_byte
  2594  00039C  0A80               	xorlw	128	; case 128
  2595  00039E  B4D8               	btfsc	status,2,c
  2596  0003A0  D7D3               	goto	l3738
  2597  0003A2  0A40               	xorlw	64	; case 192
  2598  0003A4  B4D8               	btfsc	status,2,c
  2599  0003A6  D7AA               	goto	l3736
  2600  0003A8                     l3746:
  2601                           
  2602                           ; BSR set to: 0
  2603                           ;doprnt.c: 1524: (putch(c) );
  2604  0003A8  0100               	movlb	0	; () banked
  2605  0003AA  51CF               	movf	printf@c& (0+255),w,b
  2606  0003AC  EC54  F011         	call	_putch
  2607  0003B0                     l3748:
  2608  0003B0  0100               	movlb	0	; () banked
  2609  0003B2  07C9               	decf	printf@prec& (0+255),f,b
  2610  0003B4  0100               	movlb	0	; () banked
  2611  0003B6  29C9               	incf	printf@prec& (0+255),w,b
  2612  0003B8  A4D8               	btfss	status,2,c
  2613  0003BA  D7ED               	goto	l3744
  2614  0003BC                     l3750:
  2615  0003BC  C0B6  FFF6         	movff	printf@f,tblptrl
  2616  0003C0  C0B7  FFF7         	movff	printf@f+1,tblptrh
  2617  0003C4  0100               	movlb	0	; () banked
  2618  0003C6  4BB6               	infsnz	printf@f& (0+255),f,b
  2619  0003C8  2BB7               	incf	(printf@f+1)& (0+255),f,b
  2620  0003CA                     	if	0	;tblptru may be non-zero
  2621  0003CA                     	endif
  2622  0003CA                     	if	0	;tblptru may be non-zero
  2623  0003CA                     	endif
  2624  0003CA  0008               	tblrd		*
  2625  0003CC  CFF5 F0CF          	movff	tablat,printf@c
  2626  0003D0  0100               	movlb	0	; () banked
  2627  0003D2  51CF               	movf	printf@c& (0+255),w,b
  2628  0003D4  B4D8               	btfsc	status,2,c
  2629  0003D6  0012               	return	
  2630  0003D8  D623               	goto	l3628
  2631  0003DA                     __end_of_printf:
  2632                           	opt stack 0
  2633                           tblptru	equ	0xFF8
  2634                           tblptrh	equ	0xFF7
  2635                           tblptrl	equ	0xFF6
  2636                           tablat	equ	0xFF5
  2637                           prodh	equ	0xFF4
  2638                           prodl	equ	0xFF3
  2639                           intcon	equ	0xFF2
  2640                           intcon3	equ	0xFF0
  2641                           postinc0	equ	0xFEE
  2642                           wreg	equ	0xFE8
  2643                           indf2	equ	0xFDF
  2644                           postinc2	equ	0xFDE
  2645                           postdec2	equ	0xFDD
  2646                           fsr2h	equ	0xFDA
  2647                           fsr2l	equ	0xFD9
  2648                           status	equ	0xFD8
  2649                           
  2650 ;; *************** function _putch *****************
  2651 ;; Defined at:
  2652 ;;		line 25 in file "lcd.c"
  2653 ;; Parameters:    Size  Location     Type
  2654 ;;  data            1    wreg     unsigned char 
  2655 ;; Auto vars:     Size  Location     Type
  2656 ;;  data            1    2[BANK0 ] unsigned char 
  2657 ;; Return value:  Size  Location     Type
  2658 ;;                  1    wreg      void 
  2659 ;; Registers used:
  2660 ;;		wreg, status,2, status,0, cstack
  2661 ;; Tracked objects:
  2662 ;;		On entry : 0/0
  2663 ;;		On exit  : 0/0
  2664 ;;		Unchanged: 0/0
  2665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2667 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2669 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2670 ;;Total ram usage:        1 bytes
  2671 ;; Hardware stack levels used:    1
  2672 ;; Hardware stack levels required when called:    7
  2673 ;; This function calls:
  2674 ;;		_lcdNibble
  2675 ;; This function is called by:
  2676 ;;		_printf
  2677 ;; This function uses a non-reentrant model
  2678 ;;
  2679                           
  2680                           	psect	text3
  2681  0022A8                     __ptext3:
  2682                           	opt stack 0
  2683  0022A8                     _putch:
  2684                           	opt stack 21
  2685                           
  2686                           ;incstack = 0
  2687                           ;putch@data stored from wreg
  2688  0022A8  0100               	movlb	0	; () banked
  2689  0022AA  6FAC               	movwf	putch@data& (0+255),b
  2690                           
  2691                           ;lcd.c: 26: LATDbits.LATD2 = 1;
  2692  0022AC  848C               	bsf	3980,2,c	;volatile
  2693                           
  2694                           ;lcd.c: 27: lcdNibble(data);
  2695  0022AE  0100               	movlb	0	; () banked
  2696  0022B0  51AC               	movf	putch@data& (0+255),w,b
  2697  0022B2  EC53  F00E         	call	_lcdNibble
  2698  0022B6  0012               	return		;funcret
  2699  0022B8                     __end_of_putch:
  2700                           	opt stack 0
  2701                           tblptru	equ	0xFF8
  2702                           tblptrh	equ	0xFF7
  2703                           tblptrl	equ	0xFF6
  2704                           tablat	equ	0xFF5
  2705                           prodh	equ	0xFF4
  2706                           prodl	equ	0xFF3
  2707                           intcon	equ	0xFF2
  2708                           intcon3	equ	0xFF0
  2709                           postinc0	equ	0xFEE
  2710                           wreg	equ	0xFE8
  2711                           indf2	equ	0xFDF
  2712                           postinc2	equ	0xFDE
  2713                           postdec2	equ	0xFDD
  2714                           fsr2h	equ	0xFDA
  2715                           fsr2l	equ	0xFD9
  2716                           status	equ	0xFD8
  2717                           
  2718 ;; *************** function _isdigit *****************
  2719 ;; Defined at:
  2720 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  2721 ;; Parameters:    Size  Location     Type
  2722 ;;  c               1    wreg     unsigned char 
  2723 ;; Auto vars:     Size  Location     Type
  2724 ;;  c               1    2[BANK0 ] unsigned char 
  2725 ;; Return value:  Size  Location     Type
  2726 ;;		None               void
  2727 ;; Registers used:
  2728 ;;		wreg, status,2, status,0
  2729 ;; Tracked objects:
  2730 ;;		On entry : 0/0
  2731 ;;		On exit  : 0/0
  2732 ;;		Unchanged: 0/0
  2733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2735 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2736 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2737 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2738 ;;Total ram usage:        3 bytes
  2739 ;; Hardware stack levels used:    1
  2740 ;; Hardware stack levels required when called:    6
  2741 ;; This function calls:
  2742 ;;		Nothing
  2743 ;; This function is called by:
  2744 ;;		_printf
  2745 ;; This function uses a non-reentrant model
  2746 ;;
  2747                           
  2748                           	psect	text4
  2749  0020BA                     __ptext4:
  2750                           	opt stack 0
  2751  0020BA                     _isdigit:
  2752                           	opt stack 22
  2753                           
  2754                           ;incstack = 0
  2755                           ;isdigit@c stored from wreg
  2756  0020BA  0100               	movlb	0	; () banked
  2757  0020BC  6FAC               	movwf	isdigit@c& (0+255),b
  2758  0020BE  0E00               	movlw	0
  2759  0020C0  0100               	movlb	0	; () banked
  2760  0020C2  6FAB               	movwf	_isdigit$1052& (0+255),b
  2761                           
  2762                           ; BSR set to: 0
  2763  0020C4  0E3A               	movlw	58
  2764  0020C6  0100               	movlb	0	; () banked
  2765  0020C8  61AC               	cpfslt	isdigit@c& (0+255),b
  2766  0020CA  D007               	goto	l3358
  2767                           
  2768                           ; BSR set to: 0
  2769  0020CC  0E2F               	movlw	47
  2770  0020CE  0100               	movlb	0	; () banked
  2771  0020D0  65AC               	cpfsgt	isdigit@c& (0+255),b
  2772  0020D2  D003               	goto	l3358
  2773                           
  2774                           ; BSR set to: 0
  2775  0020D4  0E01               	movlw	1
  2776  0020D6  0100               	movlb	0	; () banked
  2777  0020D8  6FAB               	movwf	_isdigit$1052& (0+255),b
  2778  0020DA                     l3358:
  2779                           
  2780                           ; BSR set to: 0
  2781  0020DA  C0AB  F0AA         	movff	_isdigit$1052,??_isdigit
  2782  0020DE  0100               	movlb	0	; () banked
  2783  0020E0  31AA               	rrcf	??_isdigit& (0+255),w,b
  2784  0020E2  0012               	return	
  2785  0020E4                     __end_of_isdigit:
  2786                           	opt stack 0
  2787                           tblptru	equ	0xFF8
  2788                           tblptrh	equ	0xFF7
  2789                           tblptrl	equ	0xFF6
  2790                           tablat	equ	0xFF5
  2791                           prodh	equ	0xFF4
  2792                           prodl	equ	0xFF3
  2793                           intcon	equ	0xFF2
  2794                           intcon3	equ	0xFF0
  2795                           postinc0	equ	0xFEE
  2796                           wreg	equ	0xFE8
  2797                           indf2	equ	0xFDF
  2798                           postinc2	equ	0xFDE
  2799                           postdec2	equ	0xFDD
  2800                           fsr2h	equ	0xFDA
  2801                           fsr2l	equ	0xFD9
  2802                           status	equ	0xFD8
  2803                           
  2804 ;; *************** function ___wmul *****************
  2805 ;; Defined at:
  2806 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  2807 ;; Parameters:    Size  Location     Type
  2808 ;;  multiplier      2    0[BANK0 ] unsigned int 
  2809 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  2810 ;; Auto vars:     Size  Location     Type
  2811 ;;  product         2    4[BANK0 ] unsigned int 
  2812 ;; Return value:  Size  Location     Type
  2813 ;;                  2    0[BANK0 ] unsigned int 
  2814 ;; Registers used:
  2815 ;;		wreg, status,2, status,0, prodl, prodh
  2816 ;; Tracked objects:
  2817 ;;		On entry : 0/0
  2818 ;;		On exit  : 0/0
  2819 ;;		Unchanged: 0/0
  2820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2821 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2822 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2824 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2825 ;;Total ram usage:        6 bytes
  2826 ;; Hardware stack levels used:    1
  2827 ;; Hardware stack levels required when called:    6
  2828 ;; This function calls:
  2829 ;;		Nothing
  2830 ;; This function is called by:
  2831 ;;		_printf
  2832 ;; This function uses a non-reentrant model
  2833 ;;
  2834                           
  2835                           	psect	text5
  2836  002056                     __ptext5:
  2837                           	opt stack 0
  2838  002056                     ___wmul:
  2839                           	opt stack 22
  2840                           
  2841                           ; BSR set to: 0
  2842                           ;incstack = 0
  2843  002056  0100               	movlb	0	; () banked
  2844  002058  51AA               	movf	___wmul@multiplier& (0+255),w,b
  2845  00205A  0100               	movlb	0	; () banked
  2846  00205C  03AC               	mulwf	___wmul@multiplicand& (0+255),b
  2847  00205E  CFF3 F0AE          	movff	prodl,___wmul@product
  2848  002062  CFF4 F0AF          	movff	prodh,___wmul@product+1
  2849  002066  0100               	movlb	0	; () banked
  2850  002068  51AA               	movf	___wmul@multiplier& (0+255),w,b
  2851  00206A  0100               	movlb	0	; () banked
  2852  00206C  03AD               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  2853  00206E  50F3               	movf	prodl,w,c
  2854  002070  0100               	movlb	0	; () banked
  2855  002072  27AF               	addwf	(___wmul@product+1)& (0+255),f,b
  2856  002074  0100               	movlb	0	; () banked
  2857  002076  51AB               	movf	(___wmul@multiplier+1)& (0+255),w,b
  2858  002078  0100               	movlb	0	; () banked
  2859  00207A  03AC               	mulwf	___wmul@multiplicand& (0+255),b
  2860  00207C  50F3               	movf	prodl,w,c
  2861  00207E  0100               	movlb	0	; () banked
  2862  002080  27AF               	addwf	(___wmul@product+1)& (0+255),f,b
  2863                           
  2864                           ; BSR set to: 0
  2865  002082  C0AE  F0AA         	movff	___wmul@product,?___wmul
  2866  002086  C0AF  F0AB         	movff	___wmul@product+1,?___wmul+1
  2867  00208A  0012               	return	
  2868  00208C                     __end_of___wmul:
  2869                           	opt stack 0
  2870                           tblptru	equ	0xFF8
  2871                           tblptrh	equ	0xFF7
  2872                           tblptrl	equ	0xFF6
  2873                           tablat	equ	0xFF5
  2874                           prodh	equ	0xFF4
  2875                           prodl	equ	0xFF3
  2876                           intcon	equ	0xFF2
  2877                           intcon3	equ	0xFF0
  2878                           postinc0	equ	0xFEE
  2879                           wreg	equ	0xFE8
  2880                           indf2	equ	0xFDF
  2881                           postinc2	equ	0xFDE
  2882                           postdec2	equ	0xFDD
  2883                           fsr2h	equ	0xFDA
  2884                           fsr2l	equ	0xFD9
  2885                           status	equ	0xFD8
  2886                           
  2887 ;; *************** function ___lwmod *****************
  2888 ;; Defined at:
  2889 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  2890 ;; Parameters:    Size  Location     Type
  2891 ;;  dividend        2    7[BANK0 ] unsigned int 
  2892 ;;  divisor         2    9[BANK0 ] unsigned int 
  2893 ;; Auto vars:     Size  Location     Type
  2894 ;;  counter         1   11[BANK0 ] unsigned char 
  2895 ;; Return value:  Size  Location     Type
  2896 ;;                  2    7[BANK0 ] unsigned int 
  2897 ;; Registers used:
  2898 ;;		wreg, status,2, status,0
  2899 ;; Tracked objects:
  2900 ;;		On entry : 0/0
  2901 ;;		On exit  : 0/0
  2902 ;;		Unchanged: 0/0
  2903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2904 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2905 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2907 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2908 ;;Total ram usage:        5 bytes
  2909 ;; Hardware stack levels used:    1
  2910 ;; Hardware stack levels required when called:    6
  2911 ;; This function calls:
  2912 ;;		Nothing
  2913 ;; This function is called by:
  2914 ;;		_printf
  2915 ;; This function uses a non-reentrant model
  2916 ;;
  2917                           
  2918                           	psect	text6
  2919  001D0E                     __ptext6:
  2920                           	opt stack 0
  2921  001D0E                     ___lwmod:
  2922                           	opt stack 22
  2923                           
  2924                           ; BSR set to: 0
  2925                           ;incstack = 0
  2926  001D0E  0100               	movlb	0	; () banked
  2927  001D10  51B3               	movf	___lwmod@divisor& (0+255),w,b
  2928  001D12  0100               	movlb	0	; () banked
  2929  001D14  11B4               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  2930  001D16  B4D8               	btfsc	status,2,c
  2931  001D18  D026               	goto	l939
  2932                           
  2933                           ; BSR set to: 0
  2934  001D1A  0E01               	movlw	1
  2935  001D1C  0100               	movlb	0	; () banked
  2936  001D1E  6FB5               	movwf	___lwmod@counter& (0+255),b
  2937  001D20  D006               	goto	l3418
  2938  001D22                     l3416:
  2939                           
  2940                           ; BSR set to: 0
  2941  001D22  0100               	movlb	0	; () banked
  2942  001D24  90D8               	bcf	status,0,c
  2943  001D26  37B3               	rlcf	___lwmod@divisor& (0+255),f,b
  2944  001D28  37B4               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  2945  001D2A  0100               	movlb	0	; () banked
  2946  001D2C  2BB5               	incf	___lwmod@counter& (0+255),f,b
  2947  001D2E                     l3418:
  2948                           
  2949                           ; BSR set to: 0
  2950  001D2E  0100               	movlb	0	; () banked
  2951  001D30  AFB4               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  2952  001D32  D7F7               	goto	l3416
  2953  001D34                     l3420:
  2954                           
  2955                           ; BSR set to: 0
  2956  001D34  0100               	movlb	0	; () banked
  2957  001D36  51B3               	movf	___lwmod@divisor& (0+255),w,b
  2958  001D38  0100               	movlb	0	; () banked
  2959  001D3A  5DB1               	subwf	___lwmod@dividend& (0+255),w,b
  2960  001D3C  0100               	movlb	0	; () banked
  2961  001D3E  51B4               	movf	(___lwmod@divisor+1)& (0+255),w,b
  2962  001D40  0100               	movlb	0	; () banked
  2963  001D42  59B2               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  2964  001D44  A0D8               	btfss	status,0,c
  2965  001D46  D008               	goto	l3424
  2966                           
  2967                           ; BSR set to: 0
  2968  001D48  0100               	movlb	0	; () banked
  2969  001D4A  51B3               	movf	___lwmod@divisor& (0+255),w,b
  2970  001D4C  0100               	movlb	0	; () banked
  2971  001D4E  5FB1               	subwf	___lwmod@dividend& (0+255),f,b
  2972  001D50  0100               	movlb	0	; () banked
  2973  001D52  51B4               	movf	(___lwmod@divisor+1)& (0+255),w,b
  2974  001D54  0100               	movlb	0	; () banked
  2975  001D56  5BB2               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  2976  001D58                     l3424:
  2977                           
  2978                           ; BSR set to: 0
  2979  001D58  0100               	movlb	0	; () banked
  2980  001D5A  90D8               	bcf	status,0,c
  2981  001D5C  33B4               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  2982  001D5E  33B3               	rrcf	___lwmod@divisor& (0+255),f,b
  2983                           
  2984                           ; BSR set to: 0
  2985  001D60  0100               	movlb	0	; () banked
  2986  001D62  2FB5               	decfsz	___lwmod@counter& (0+255),f,b
  2987  001D64  D7E7               	goto	l3420
  2988  001D66                     l939:
  2989                           
  2990                           ; BSR set to: 0
  2991  001D66  C0B1  F0B1         	movff	___lwmod@dividend,?___lwmod
  2992  001D6A  C0B2  F0B2         	movff	___lwmod@dividend+1,?___lwmod+1
  2993                           
  2994                           ; BSR set to: 0
  2995  001D6E  0012               	return		;funcret
  2996  001D70                     __end_of___lwmod:
  2997                           	opt stack 0
  2998                           tblptru	equ	0xFF8
  2999                           tblptrh	equ	0xFF7
  3000                           tblptrl	equ	0xFF6
  3001                           tablat	equ	0xFF5
  3002                           prodh	equ	0xFF4
  3003                           prodl	equ	0xFF3
  3004                           intcon	equ	0xFF2
  3005                           intcon3	equ	0xFF0
  3006                           postinc0	equ	0xFEE
  3007                           wreg	equ	0xFE8
  3008                           indf2	equ	0xFDF
  3009                           postinc2	equ	0xFDE
  3010                           postdec2	equ	0xFDD
  3011                           fsr2h	equ	0xFDA
  3012                           fsr2l	equ	0xFD9
  3013                           status	equ	0xFD8
  3014                           
  3015 ;; *************** function ___lwdiv *****************
  3016 ;; Defined at:
  3017 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  3018 ;; Parameters:    Size  Location     Type
  3019 ;;  dividend        2    0[BANK0 ] unsigned int 
  3020 ;;  divisor         2    2[BANK0 ] unsigned int 
  3021 ;; Auto vars:     Size  Location     Type
  3022 ;;  quotient        2    4[BANK0 ] unsigned int 
  3023 ;;  counter         1    6[BANK0 ] unsigned char 
  3024 ;; Return value:  Size  Location     Type
  3025 ;;                  2    0[BANK0 ] unsigned int 
  3026 ;; Registers used:
  3027 ;;		wreg, status,2, status,0
  3028 ;; Tracked objects:
  3029 ;;		On entry : 0/0
  3030 ;;		On exit  : 0/0
  3031 ;;		Unchanged: 0/0
  3032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3033 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3034 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3036 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3037 ;;Total ram usage:        7 bytes
  3038 ;; Hardware stack levels used:    1
  3039 ;; Hardware stack levels required when called:    6
  3040 ;; This function calls:
  3041 ;;		Nothing
  3042 ;; This function is called by:
  3043 ;;		_printf
  3044 ;; This function uses a non-reentrant model
  3045 ;;
  3046                           
  3047                           	psect	text7
  3048  001BB8                     __ptext7:
  3049                           	opt stack 0
  3050  001BB8                     ___lwdiv:
  3051                           	opt stack 22
  3052                           
  3053                           ; BSR set to: 0
  3054                           ;incstack = 0
  3055  001BB8  0E00               	movlw	0
  3056  001BBA  0100               	movlb	0	; () banked
  3057  001BBC  6FAF               	movwf	(___lwdiv@quotient+1)& (0+255),b
  3058  001BBE  0E00               	movlw	0
  3059  001BC0  6FAE               	movwf	___lwdiv@quotient& (0+255),b
  3060                           
  3061                           ; BSR set to: 0
  3062  001BC2  0100               	movlb	0	; () banked
  3063  001BC4  51AC               	movf	___lwdiv@divisor& (0+255),w,b
  3064  001BC6  0100               	movlb	0	; () banked
  3065  001BC8  11AD               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  3066  001BCA  B4D8               	btfsc	status,2,c
  3067  001BCC  D02C               	goto	l929
  3068                           
  3069                           ; BSR set to: 0
  3070  001BCE  0E01               	movlw	1
  3071  001BD0  0100               	movlb	0	; () banked
  3072  001BD2  6FB0               	movwf	___lwdiv@counter& (0+255),b
  3073  001BD4  D006               	goto	l3398
  3074  001BD6                     l3396:
  3075                           
  3076                           ; BSR set to: 0
  3077  001BD6  0100               	movlb	0	; () banked
  3078  001BD8  90D8               	bcf	status,0,c
  3079  001BDA  37AC               	rlcf	___lwdiv@divisor& (0+255),f,b
  3080  001BDC  37AD               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  3081  001BDE  0100               	movlb	0	; () banked
  3082  001BE0  2BB0               	incf	___lwdiv@counter& (0+255),f,b
  3083  001BE2                     l3398:
  3084                           
  3085                           ; BSR set to: 0
  3086  001BE2  0100               	movlb	0	; () banked
  3087  001BE4  AFAD               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  3088  001BE6  D7F7               	goto	l3396
  3089  001BE8                     l3400:
  3090                           
  3091                           ; BSR set to: 0
  3092  001BE8  0100               	movlb	0	; () banked
  3093  001BEA  90D8               	bcf	status,0,c
  3094  001BEC  37AE               	rlcf	___lwdiv@quotient& (0+255),f,b
  3095  001BEE  37AF               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  3096                           
  3097                           ; BSR set to: 0
  3098  001BF0  0100               	movlb	0	; () banked
  3099  001BF2  51AC               	movf	___lwdiv@divisor& (0+255),w,b
  3100  001BF4  0100               	movlb	0	; () banked
  3101  001BF6  5DAA               	subwf	___lwdiv@dividend& (0+255),w,b
  3102  001BF8  0100               	movlb	0	; () banked
  3103  001BFA  51AD               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3104  001BFC  0100               	movlb	0	; () banked
  3105  001BFE  59AB               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  3106  001C00  A0D8               	btfss	status,0,c
  3107  001C02  D00A               	goto	l3408
  3108                           
  3109                           ; BSR set to: 0
  3110  001C04  0100               	movlb	0	; () banked
  3111  001C06  51AC               	movf	___lwdiv@divisor& (0+255),w,b
  3112  001C08  0100               	movlb	0	; () banked
  3113  001C0A  5FAA               	subwf	___lwdiv@dividend& (0+255),f,b
  3114  001C0C  0100               	movlb	0	; () banked
  3115  001C0E  51AD               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3116  001C10  0100               	movlb	0	; () banked
  3117  001C12  5BAB               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  3118                           
  3119                           ; BSR set to: 0
  3120  001C14  0100               	movlb	0	; () banked
  3121  001C16  81AE               	bsf	___lwdiv@quotient& (0+255),0,b
  3122  001C18                     l3408:
  3123                           
  3124                           ; BSR set to: 0
  3125  001C18  0100               	movlb	0	; () banked
  3126  001C1A  90D8               	bcf	status,0,c
  3127  001C1C  33AD               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  3128  001C1E  33AC               	rrcf	___lwdiv@divisor& (0+255),f,b
  3129                           
  3130                           ; BSR set to: 0
  3131  001C20  0100               	movlb	0	; () banked
  3132  001C22  2FB0               	decfsz	___lwdiv@counter& (0+255),f,b
  3133  001C24  D7E1               	goto	l3400
  3134  001C26                     l929:
  3135                           
  3136                           ; BSR set to: 0
  3137  001C26  C0AE  F0AA         	movff	___lwdiv@quotient,?___lwdiv
  3138  001C2A  C0AF  F0AB         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3139                           
  3140                           ; BSR set to: 0
  3141  001C2E  0012               	return		;funcret
  3142  001C30                     __end_of___lwdiv:
  3143                           	opt stack 0
  3144                           tblptru	equ	0xFF8
  3145                           tblptrh	equ	0xFF7
  3146                           tblptrl	equ	0xFF6
  3147                           tablat	equ	0xFF5
  3148                           prodh	equ	0xFF4
  3149                           prodl	equ	0xFF3
  3150                           intcon	equ	0xFF2
  3151                           intcon3	equ	0xFF0
  3152                           postinc0	equ	0xFEE
  3153                           wreg	equ	0xFE8
  3154                           indf2	equ	0xFDF
  3155                           postinc2	equ	0xFDE
  3156                           postdec2	equ	0xFDD
  3157                           fsr2h	equ	0xFDA
  3158                           fsr2l	equ	0xFD9
  3159                           status	equ	0xFD8
  3160                           
  3161 ;; *************** function _getTime *****************
  3162 ;; Defined at:
  3163 ;;		line 76 in file "modules.c"
  3164 ;; Parameters:    Size  Location     Type
  3165 ;;  time            2    3[BANK0 ] PTR unsigned char 
  3166 ;;		 -> time(7), 
  3167 ;; Auto vars:     Size  Location     Type
  3168 ;;  i               1    5[BANK0 ] unsigned char 
  3169 ;; Return value:  Size  Location     Type
  3170 ;;                  1    wreg      void 
  3171 ;; Registers used:
  3172 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3173 ;; Tracked objects:
  3174 ;;		On entry : 0/0
  3175 ;;		On exit  : 0/0
  3176 ;;		Unchanged: 0/0
  3177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3178 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3179 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3180 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3181 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3182 ;;Total ram usage:        3 bytes
  3183 ;; Hardware stack levels used:    1
  3184 ;; Hardware stack levels required when called:    8
  3185 ;; This function calls:
  3186 ;;		_I2C_Master_Read
  3187 ;;		_I2C_Master_Start
  3188 ;;		_I2C_Master_Stop
  3189 ;;		_I2C_Master_Write
  3190 ;; This function is called by:
  3191 ;;		_showRTC
  3192 ;; This function uses a non-reentrant model
  3193 ;;
  3194                           
  3195                           	psect	text8
  3196  0019A6                     __ptext8:
  3197                           	opt stack 0
  3198  0019A6                     _getTime:
  3199                           	opt stack 21
  3200                           
  3201                           ;modules.c: 77: (INTCONbits.GIE = 0);
  3202                           
  3203                           ; BSR set to: 0
  3204                           ;incstack = 0
  3205  0019A6  9EF2               	bcf	intcon,7,c	;volatile
  3206                           
  3207                           ;modules.c: 81: I2C_Master_Start();
  3208  0019A8  EC7E  F011         	call	_I2C_Master_Start	;wreg free
  3209                           
  3210                           ;modules.c: 82: I2C_Master_Write(0b11010000);
  3211  0019AC  0E00               	movlw	0
  3212  0019AE  0100               	movlb	0	; () banked
  3213  0019B0  6FAC               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3214  0019B2  0ED0               	movlw	208
  3215  0019B4  6FAB               	movwf	I2C_Master_Write@d& (0+255),b
  3216  0019B6  EC70  F011         	call	_I2C_Master_Write	;wreg free
  3217                           
  3218                           ;modules.c: 83: I2C_Master_Write(0x00);
  3219  0019BA  0E00               	movlw	0
  3220  0019BC  0100               	movlb	0	; () banked
  3221  0019BE  6FAC               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3222  0019C0  0E00               	movlw	0
  3223  0019C2  6FAB               	movwf	I2C_Master_Write@d& (0+255),b
  3224  0019C4  EC70  F011         	call	_I2C_Master_Write	;wreg free
  3225                           
  3226                           ;modules.c: 84: I2C_Master_Stop();
  3227  0019C8  EC7A  F011         	call	_I2C_Master_Stop	;wreg free
  3228                           
  3229                           ;modules.c: 87: I2C_Master_Start();
  3230  0019CC  EC7E  F011         	call	_I2C_Master_Start	;wreg free
  3231                           
  3232                           ;modules.c: 88: I2C_Master_Write(0b11010001);
  3233  0019D0  0E00               	movlw	0
  3234  0019D2  0100               	movlb	0	; () banked
  3235  0019D4  6FAC               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3236  0019D6  0ED1               	movlw	209
  3237  0019D8  6FAB               	movwf	I2C_Master_Write@d& (0+255),b
  3238  0019DA  EC70  F011         	call	_I2C_Master_Write	;wreg free
  3239                           
  3240                           ;modules.c: 89: for (unsigned char i = 0; i < 0x06; i++) {
  3241  0019DE  0E00               	movlw	0
  3242  0019E0  0100               	movlb	0	; () banked
  3243  0019E2  6FAF               	movwf	getTime@i& (0+255),b
  3244  0019E4                     l3882:
  3245                           
  3246                           ; BSR set to: 0
  3247  0019E4  0E05               	movlw	5
  3248  0019E6  0100               	movlb	0	; () banked
  3249  0019E8  65AF               	cpfsgt	getTime@i& (0+255),b
  3250  0019EA  D001               	goto	l3886
  3251  0019EC  D012               	goto	l3892
  3252  0019EE                     l3886:
  3253                           
  3254                           ; BSR set to: 0
  3255                           ;modules.c: 90: time[i] = I2C_Master_Read(1);
  3256  0019EE  0100               	movlb	0	; () banked
  3257  0019F0  51AF               	movf	getTime@i& (0+255),w,b
  3258  0019F2  0D01               	mullw	1
  3259  0019F4  50F3               	movf	prodl,w,c
  3260  0019F6  0100               	movlb	0	; () banked
  3261  0019F8  25AD               	addwf	getTime@time& (0+255),w,b
  3262  0019FA  6ED9               	movwf	fsr2l,c
  3263  0019FC  50F4               	movf	prodh,w,c
  3264  0019FE  0100               	movlb	0	; () banked
  3265  001A00  21AE               	addwfc	(getTime@time+1)& (0+255),w,b
  3266  001A02  6EDA               	movwf	fsr2h,c
  3267  001A04  0E01               	movlw	1
  3268  001A06  EC46  F010         	call	_I2C_Master_Read
  3269  001A0A  6EDF               	movwf	indf2,c
  3270  001A0C  0100               	movlb	0	; () banked
  3271  001A0E  2BAF               	incf	getTime@i& (0+255),f,b
  3272  001A10  D7E9               	goto	l3882
  3273  001A12                     l3892:
  3274                           
  3275                           ; BSR set to: 0
  3276                           ;modules.c: 91: }
  3277                           ;modules.c: 92: time[6] = I2C_Master_Read(0);
  3278  001A12  0100               	movlb	0	; () banked
  3279  001A14  EE20 F006          	lfsr	2,6
  3280  001A18  51AD               	movf	getTime@time& (0+255),w,b
  3281  001A1A  26D9               	addwf	fsr2l,f,c
  3282  001A1C  51AE               	movf	(getTime@time+1)& (0+255),w,b
  3283  001A1E  22DA               	addwfc	fsr2h,f,c
  3284  001A20  0E00               	movlw	0
  3285  001A22  EC46  F010         	call	_I2C_Master_Read
  3286  001A26  6EDF               	movwf	indf2,c
  3287                           
  3288                           ;modules.c: 93: I2C_Master_Stop();
  3289  001A28  EC7A  F011         	call	_I2C_Master_Stop	;wreg free
  3290                           
  3291                           ;modules.c: 94: (INTCONbits.GIE = 1);
  3292  001A2C  8EF2               	bsf	intcon,7,c	;volatile
  3293  001A2E  0012               	return		;funcret
  3294  001A30                     __end_of_getTime:
  3295                           	opt stack 0
  3296                           tblptru	equ	0xFF8
  3297                           tblptrh	equ	0xFF7
  3298                           tblptrl	equ	0xFF6
  3299                           tablat	equ	0xFF5
  3300                           prodh	equ	0xFF4
  3301                           prodl	equ	0xFF3
  3302                           intcon	equ	0xFF2
  3303                           intcon3	equ	0xFF0
  3304                           postinc0	equ	0xFEE
  3305                           wreg	equ	0xFE8
  3306                           indf2	equ	0xFDF
  3307                           postinc2	equ	0xFDE
  3308                           postdec2	equ	0xFDD
  3309                           fsr2h	equ	0xFDA
  3310                           fsr2l	equ	0xFD9
  3311                           status	equ	0xFD8
  3312                           
  3313 ;; *************** function _I2C_Master_Write *****************
  3314 ;; Defined at:
  3315 ;;		line 42 in file "I2C.c"
  3316 ;; Parameters:    Size  Location     Type
  3317 ;;  d               2    1[BANK0 ] unsigned int 
  3318 ;; Auto vars:     Size  Location     Type
  3319 ;;		None
  3320 ;; Return value:  Size  Location     Type
  3321 ;;                  1    wreg      void 
  3322 ;; Registers used:
  3323 ;;		wreg, status,2, status,0, cstack
  3324 ;; Tracked objects:
  3325 ;;		On entry : 0/0
  3326 ;;		On exit  : 0/0
  3327 ;;		Unchanged: 0/0
  3328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3329 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3332 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3333 ;;Total ram usage:        2 bytes
  3334 ;; Hardware stack levels used:    1
  3335 ;; Hardware stack levels required when called:    7
  3336 ;; This function calls:
  3337 ;;		_I2C_Master_Wait
  3338 ;; This function is called by:
  3339 ;;		_getTime
  3340 ;; This function uses a non-reentrant model
  3341 ;;
  3342                           
  3343                           	psect	text9
  3344  0022E0                     __ptext9:
  3345                           	opt stack 0
  3346  0022E0                     _I2C_Master_Write:
  3347                           	opt stack 21
  3348                           
  3349                           ;I2C.c: 43: I2C_Master_Wait();
  3350                           
  3351                           ;incstack = 0
  3352  0022E0  EC41  F011         	call	_I2C_Master_Wait	;wreg free
  3353                           
  3354                           ;I2C.c: 44: SSPBUF = d;
  3355  0022E4  C0AB  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  3356  0022E8  0012               	return		;funcret
  3357  0022EA                     __end_of_I2C_Master_Write:
  3358                           	opt stack 0
  3359                           tblptru	equ	0xFF8
  3360                           tblptrh	equ	0xFF7
  3361                           tblptrl	equ	0xFF6
  3362                           tablat	equ	0xFF5
  3363                           prodh	equ	0xFF4
  3364                           prodl	equ	0xFF3
  3365                           intcon	equ	0xFF2
  3366                           intcon3	equ	0xFF0
  3367                           postinc0	equ	0xFEE
  3368                           wreg	equ	0xFE8
  3369                           indf2	equ	0xFDF
  3370                           postinc2	equ	0xFDE
  3371                           postdec2	equ	0xFDD
  3372                           fsr2h	equ	0xFDA
  3373                           fsr2l	equ	0xFD9
  3374                           status	equ	0xFD8
  3375                           
  3376 ;; *************** function _I2C_Master_Stop *****************
  3377 ;; Defined at:
  3378 ;;		line 37 in file "I2C.c"
  3379 ;; Parameters:    Size  Location     Type
  3380 ;;		None
  3381 ;; Auto vars:     Size  Location     Type
  3382 ;;		None
  3383 ;; Return value:  Size  Location     Type
  3384 ;;                  1    wreg      void 
  3385 ;; Registers used:
  3386 ;;		wreg, status,2, status,0, cstack
  3387 ;; Tracked objects:
  3388 ;;		On entry : 0/0
  3389 ;;		On exit  : 0/0
  3390 ;;		Unchanged: 0/0
  3391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3395 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3396 ;;Total ram usage:        0 bytes
  3397 ;; Hardware stack levels used:    1
  3398 ;; Hardware stack levels required when called:    7
  3399 ;; This function calls:
  3400 ;;		_I2C_Master_Wait
  3401 ;; This function is called by:
  3402 ;;		_getTime
  3403 ;; This function uses a non-reentrant model
  3404 ;;
  3405                           
  3406                           	psect	text10
  3407  0022F4                     __ptext10:
  3408                           	opt stack 0
  3409  0022F4                     _I2C_Master_Stop:
  3410                           	opt stack 21
  3411                           
  3412                           ;I2C.c: 38: I2C_Master_Wait();
  3413                           
  3414                           ;incstack = 0
  3415  0022F4  EC41  F011         	call	_I2C_Master_Wait	;wreg free
  3416                           
  3417                           ;I2C.c: 39: PEN = 1;
  3418  0022F8  84C5               	bsf	4037,2,c	;volatile
  3419  0022FA  0012               	return		;funcret
  3420  0022FC                     __end_of_I2C_Master_Stop:
  3421                           	opt stack 0
  3422                           tblptru	equ	0xFF8
  3423                           tblptrh	equ	0xFF7
  3424                           tblptrl	equ	0xFF6
  3425                           tablat	equ	0xFF5
  3426                           prodh	equ	0xFF4
  3427                           prodl	equ	0xFF3
  3428                           intcon	equ	0xFF2
  3429                           intcon3	equ	0xFF0
  3430                           postinc0	equ	0xFEE
  3431                           wreg	equ	0xFE8
  3432                           indf2	equ	0xFDF
  3433                           postinc2	equ	0xFDE
  3434                           postdec2	equ	0xFDD
  3435                           fsr2h	equ	0xFDA
  3436                           fsr2l	equ	0xFD9
  3437                           status	equ	0xFD8
  3438                           
  3439 ;; *************** function _I2C_Master_Start *****************
  3440 ;; Defined at:
  3441 ;;		line 27 in file "I2C.c"
  3442 ;; Parameters:    Size  Location     Type
  3443 ;;		None
  3444 ;; Auto vars:     Size  Location     Type
  3445 ;;		None
  3446 ;; Return value:  Size  Location     Type
  3447 ;;                  1    wreg      void 
  3448 ;; Registers used:
  3449 ;;		wreg, status,2, status,0, cstack
  3450 ;; Tracked objects:
  3451 ;;		On entry : 0/0
  3452 ;;		On exit  : 0/0
  3453 ;;		Unchanged: 0/0
  3454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3459 ;;Total ram usage:        0 bytes
  3460 ;; Hardware stack levels used:    1
  3461 ;; Hardware stack levels required when called:    7
  3462 ;; This function calls:
  3463 ;;		_I2C_Master_Wait
  3464 ;; This function is called by:
  3465 ;;		_getTime
  3466 ;; This function uses a non-reentrant model
  3467 ;;
  3468                           
  3469                           	psect	text11
  3470  0022FC                     __ptext11:
  3471                           	opt stack 0
  3472  0022FC                     _I2C_Master_Start:
  3473                           	opt stack 21
  3474                           
  3475                           ;I2C.c: 28: I2C_Master_Wait();
  3476                           
  3477                           ;incstack = 0
  3478  0022FC  EC41  F011         	call	_I2C_Master_Wait	;wreg free
  3479                           
  3480                           ;I2C.c: 29: SEN = 1;
  3481  002300  80C5               	bsf	4037,0,c	;volatile
  3482  002302  0012               	return		;funcret
  3483  002304                     __end_of_I2C_Master_Start:
  3484                           	opt stack 0
  3485                           tblptru	equ	0xFF8
  3486                           tblptrh	equ	0xFF7
  3487                           tblptrl	equ	0xFF6
  3488                           tablat	equ	0xFF5
  3489                           prodh	equ	0xFF4
  3490                           prodl	equ	0xFF3
  3491                           intcon	equ	0xFF2
  3492                           intcon3	equ	0xFF0
  3493                           postinc0	equ	0xFEE
  3494                           wreg	equ	0xFE8
  3495                           indf2	equ	0xFDF
  3496                           postinc2	equ	0xFDE
  3497                           postdec2	equ	0xFDD
  3498                           fsr2h	equ	0xFDA
  3499                           fsr2l	equ	0xFD9
  3500                           status	equ	0xFD8
  3501                           
  3502 ;; *************** function _I2C_Master_Read *****************
  3503 ;; Defined at:
  3504 ;;		line 47 in file "I2C.c"
  3505 ;; Parameters:    Size  Location     Type
  3506 ;;  a               1    wreg     unsigned char 
  3507 ;; Auto vars:     Size  Location     Type
  3508 ;;  a               1    1[BANK0 ] unsigned char 
  3509 ;;  temp            1    2[BANK0 ] unsigned char 
  3510 ;; Return value:  Size  Location     Type
  3511 ;;                  1    wreg      unsigned char 
  3512 ;; Registers used:
  3513 ;;		wreg, status,2, status,0, cstack
  3514 ;; Tracked objects:
  3515 ;;		On entry : 0/0
  3516 ;;		On exit  : 0/0
  3517 ;;		Unchanged: 0/0
  3518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3520 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3522 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3523 ;;Total ram usage:        2 bytes
  3524 ;; Hardware stack levels used:    1
  3525 ;; Hardware stack levels required when called:    7
  3526 ;; This function calls:
  3527 ;;		_I2C_Master_Wait
  3528 ;; This function is called by:
  3529 ;;		_getTime
  3530 ;; This function uses a non-reentrant model
  3531 ;;
  3532                           
  3533                           	psect	text12
  3534  00208C                     __ptext12:
  3535                           	opt stack 0
  3536  00208C                     _I2C_Master_Read:
  3537                           	opt stack 21
  3538                           
  3539                           ;incstack = 0
  3540                           ;I2C_Master_Read@a stored from wreg
  3541  00208C  0100               	movlb	0	; () banked
  3542  00208E  6FAB               	movwf	I2C_Master_Read@a& (0+255),b
  3543                           
  3544                           ;I2C.c: 48: unsigned char temp;
  3545                           ;I2C.c: 49: I2C_Master_Wait();
  3546  002090  EC41  F011         	call	_I2C_Master_Wait	;wreg free
  3547                           
  3548                           ;I2C.c: 50: RCEN = 1;
  3549  002094  86C5               	bsf	4037,3,c	;volatile
  3550                           
  3551                           ;I2C.c: 51: I2C_Master_Wait();
  3552  002096  EC41  F011         	call	_I2C_Master_Wait	;wreg free
  3553                           
  3554                           ;I2C.c: 52: temp = SSPBUF;
  3555  00209A  CFC9 F0AC          	movff	4041,I2C_Master_Read@temp	;volatile
  3556                           
  3557                           ;I2C.c: 53: I2C_Master_Wait();
  3558  00209E  EC41  F011         	call	_I2C_Master_Wait	;wreg free
  3559                           
  3560                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
  3561  0020A2  0100               	movlb	0	; () banked
  3562  0020A4  51AB               	movf	I2C_Master_Read@a& (0+255),w,b
  3563  0020A6  0100               	movlb	0	; () banked
  3564  0020A8  A4D8               	btfss	status,2,c
  3565  0020AA  D002               	goto	u2170
  3566  0020AC  8AC5               	bsf	4037,5,c	;volatile
  3567  0020AE  D001               	goto	l3270
  3568  0020B0                     u2170:
  3569  0020B0  9AC5               	bcf	4037,5,c	;volatile
  3570  0020B2                     l3270:
  3571                           
  3572                           ;I2C.c: 55: ACKEN = 1;
  3573  0020B2  88C5               	bsf	4037,4,c	;volatile
  3574                           
  3575                           ;I2C.c: 56: return temp;
  3576  0020B4  0100               	movlb	0	; () banked
  3577  0020B6  51AC               	movf	I2C_Master_Read@temp& (0+255),w,b
  3578  0020B8  0012               	return	
  3579  0020BA                     __end_of_I2C_Master_Read:
  3580                           	opt stack 0
  3581                           tblptru	equ	0xFF8
  3582                           tblptrh	equ	0xFF7
  3583                           tblptrl	equ	0xFF6
  3584                           tablat	equ	0xFF5
  3585                           prodh	equ	0xFF4
  3586                           prodl	equ	0xFF3
  3587                           intcon	equ	0xFF2
  3588                           intcon3	equ	0xFF0
  3589                           postinc0	equ	0xFEE
  3590                           wreg	equ	0xFE8
  3591                           indf2	equ	0xFDF
  3592                           postinc2	equ	0xFDE
  3593                           postdec2	equ	0xFDD
  3594                           fsr2h	equ	0xFDA
  3595                           fsr2l	equ	0xFD9
  3596                           status	equ	0xFD8
  3597                           
  3598 ;; *************** function _I2C_Master_Wait *****************
  3599 ;; Defined at:
  3600 ;;		line 23 in file "I2C.c"
  3601 ;; Parameters:    Size  Location     Type
  3602 ;;		None
  3603 ;; Auto vars:     Size  Location     Type
  3604 ;;		None
  3605 ;; Return value:  Size  Location     Type
  3606 ;;                  1    wreg      void 
  3607 ;; Registers used:
  3608 ;;		wreg, status,2, status,0
  3609 ;; Tracked objects:
  3610 ;;		On entry : 0/0
  3611 ;;		On exit  : 0/0
  3612 ;;		Unchanged: 0/0
  3613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3616 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3617 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3618 ;;Total ram usage:        1 bytes
  3619 ;; Hardware stack levels used:    1
  3620 ;; Hardware stack levels required when called:    6
  3621 ;; This function calls:
  3622 ;;		Nothing
  3623 ;; This function is called by:
  3624 ;;		_I2C_Master_Start
  3625 ;;		_I2C_Master_Stop
  3626 ;;		_I2C_Master_Write
  3627 ;;		_I2C_Master_Read
  3628 ;; This function uses a non-reentrant model
  3629 ;;
  3630                           
  3631                           	psect	text13
  3632  002282                     __ptext13:
  3633                           	opt stack 0
  3634  002282                     _I2C_Master_Wait:
  3635                           	opt stack 21
  3636  002282                     l370:
  3637  002282  B4C7               	btfsc	4039,2,c	;volatile
  3638  002284  D7FE               	goto	l370
  3639  002286  CFC5 F0AA          	movff	4037,??_I2C_Master_Wait	;volatile
  3640  00228A  0E1F               	movlw	31
  3641  00228C  0100               	movlb	0	; () banked
  3642  00228E  17AA               	andwf	??_I2C_Master_Wait& (0+255),f,b
  3643  002290  B4D8               	btfsc	status,2,c
  3644  002292  0012               	return	
  3645  002294  D7F6               	goto	l370
  3646  002296                     __end_of_I2C_Master_Wait:
  3647                           	opt stack 0
  3648                           tblptru	equ	0xFF8
  3649                           tblptrh	equ	0xFF7
  3650                           tblptrl	equ	0xFF6
  3651                           tablat	equ	0xFF5
  3652                           prodh	equ	0xFF4
  3653                           prodl	equ	0xFF3
  3654                           intcon	equ	0xFF2
  3655                           intcon3	equ	0xFF0
  3656                           postinc0	equ	0xFEE
  3657                           wreg	equ	0xFE8
  3658                           indf2	equ	0xFDF
  3659                           postinc2	equ	0xFDE
  3660                           postdec2	equ	0xFDD
  3661                           fsr2h	equ	0xFDA
  3662                           fsr2l	equ	0xFD9
  3663                           status	equ	0xFD8
  3664                           
  3665 ;; *************** function _initialize *****************
  3666 ;; Defined at:
  3667 ;;		line 18 in file "main.c"
  3668 ;; Parameters:    Size  Location     Type
  3669 ;;		None
  3670 ;; Auto vars:     Size  Location     Type
  3671 ;;		None
  3672 ;; Return value:  Size  Location     Type
  3673 ;;                  1    wreg      void 
  3674 ;; Registers used:
  3675 ;;		wreg, status,2, status,0, cstack
  3676 ;; Tracked objects:
  3677 ;;		On entry : 0/0
  3678 ;;		On exit  : 0/0
  3679 ;;		Unchanged: 0/0
  3680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3683 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3684 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3685 ;;Total ram usage:        1 bytes
  3686 ;; Hardware stack levels used:    1
  3687 ;; Hardware stack levels required when called:    9
  3688 ;; This function calls:
  3689 ;;		_I2C_Master_Init
  3690 ;;		_initLCD
  3691 ;;		_initLatest
  3692 ;;		_lcdInst
  3693 ;; This function is called by:
  3694 ;;		_main
  3695 ;; This function uses a non-reentrant model
  3696 ;;
  3697                           
  3698                           	psect	text14
  3699  001B3C                     __ptext14:
  3700                           	opt stack 0
  3701  001B3C                     _initialize:
  3702                           	opt stack 21
  3703                           
  3704                           ;main.c: 19: TRISA = 0xFF;
  3705                           
  3706                           ; BSR set to: 0
  3707                           ;incstack = 0
  3708  001B3C  6892               	setf	3986,c	;volatile
  3709                           
  3710                           ;main.c: 20: TRISB = 0xFF;
  3711  001B3E  6893               	setf	3987,c	;volatile
  3712                           
  3713                           ;main.c: 21: TRISC = 0x00;
  3714  001B40  0E00               	movlw	0
  3715  001B42  6E94               	movwf	3988,c	;volatile
  3716                           
  3717                           ;main.c: 22: TRISD = 0x00;
  3718  001B44  0E00               	movlw	0
  3719  001B46  6E95               	movwf	3989,c	;volatile
  3720                           
  3721                           ;main.c: 23: TRISE = 0x0F;
  3722  001B48  0E0F               	movlw	15
  3723  001B4A  6E96               	movwf	3990,c	;volatile
  3724                           
  3725                           ;main.c: 25: LATA = 0x00;
  3726  001B4C  0E00               	movlw	0
  3727  001B4E  6E89               	movwf	3977,c	;volatile
  3728                           
  3729                           ;main.c: 26: LATB = 0x00;
  3730  001B50  0E00               	movlw	0
  3731  001B52  6E8A               	movwf	3978,c	;volatile
  3732                           
  3733                           ;main.c: 27: LATC = 0x00;
  3734  001B54  0E00               	movlw	0
  3735  001B56  6E8B               	movwf	3979,c	;volatile
  3736                           
  3737                           ;main.c: 28: LATD = 0x00;
  3738  001B58  0E00               	movlw	0
  3739  001B5A  6E8C               	movwf	3980,c	;volatile
  3740                           
  3741                           ;main.c: 29: LATE = 0x00;
  3742  001B5C  0E00               	movlw	0
  3743  001B5E  6E8D               	movwf	3981,c	;volatile
  3744                           
  3745                           ;main.c: 31: ADCON0 = 0x00;
  3746  001B60  0E00               	movlw	0
  3747  001B62  6EC2               	movwf	4034,c	;volatile
  3748                           
  3749                           ;main.c: 32: ADCON1 = 0x09;
  3750  001B64  0E09               	movlw	9
  3751  001B66  6EC1               	movwf	4033,c	;volatile
  3752                           
  3753                           ;main.c: 33: CVRCON = 0x00;
  3754  001B68  0E00               	movlw	0
  3755  001B6A  6EB5               	movwf	4021,c	;volatile
  3756                           
  3757                           ;main.c: 34: ADFM = 1;
  3758  001B6C  8EC0               	bsf	4032,7,c	;volatile
  3759                           
  3760                           ;main.c: 36: initLCD();
  3761  001B6E  ECAF  F00F         	call	_initLCD	;wreg free
  3762                           
  3763                           ;main.c: 37: lcdInst(0x01);;
  3764  001B72  0E01               	movlw	1
  3765  001B74  EC5C  F011         	call	_lcdInst
  3766                           
  3767                           ;main.c: 38: _delay((unsigned long)((50)*(8000000/4000.0)));
  3768  001B78  0E82               	movlw	130
  3769  001B7A  0100               	movlb	0	; () banked
  3770  001B7C  6FBF               	movwf	??_initialize& (0+255),b
  3771  001B7E  0EDD               	movlw	221
  3772  001B80                     u3157:
  3773  001B80  2EE8               	decfsz	wreg,f,c
  3774  001B82  D7FE               	bra	u3157
  3775  001B84  2FBF               	decfsz	??_initialize& (0+255),f,b
  3776  001B86  D7FC               	bra	u3157
  3777  001B88  D000               	nop2	
  3778                           
  3779                           ;main.c: 39: I2C_Master_Init(10000);
  3780  001B8A  0E10               	movlw	16
  3781  001B8C  0100               	movlb	0	; () banked
  3782  001B8E  6FB7               	movwf	I2C_Master_Init@c& (0+255),b
  3783  001B90  0E27               	movlw	39
  3784  001B92  6FB8               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3785  001B94  0E00               	movlw	0
  3786  001B96  6FB9               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3787  001B98  0E00               	movlw	0
  3788  001B9A  6FBA               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3789  001B9C  ECB8  F00E         	call	_I2C_Master_Init	;wreg free
  3790                           
  3791                           ;main.c: 41: _delay((unsigned long)((50)*(8000000/4000.0)));
  3792  001BA0  0E82               	movlw	130
  3793  001BA2  0100               	movlb	0	; () banked
  3794  001BA4  6FBF               	movwf	??_initialize& (0+255),b
  3795  001BA6  0EDD               	movlw	221
  3796  001BA8                     u3167:
  3797  001BA8  2EE8               	decfsz	wreg,f,c
  3798  001BAA  D7FE               	bra	u3167
  3799  001BAC  2FBF               	decfsz	??_initialize& (0+255),f,b
  3800  001BAE  D7FC               	bra	u3167
  3801  001BB0  D000               	nop2	
  3802                           
  3803                           ;main.c: 42: initLatest();
  3804  001BB2  ECC0  F010         	call	_initLatest	;wreg free
  3805  001BB6  0012               	return		;funcret
  3806  001BB8                     __end_of_initialize:
  3807                           	opt stack 0
  3808                           tblptru	equ	0xFF8
  3809                           tblptrh	equ	0xFF7
  3810                           tblptrl	equ	0xFF6
  3811                           tablat	equ	0xFF5
  3812                           prodh	equ	0xFF4
  3813                           prodl	equ	0xFF3
  3814                           intcon	equ	0xFF2
  3815                           intcon3	equ	0xFF0
  3816                           postinc0	equ	0xFEE
  3817                           wreg	equ	0xFE8
  3818                           indf2	equ	0xFDF
  3819                           postinc2	equ	0xFDE
  3820                           postdec2	equ	0xFDD
  3821                           fsr2h	equ	0xFDA
  3822                           fsr2l	equ	0xFD9
  3823                           status	equ	0xFD8
  3824                           
  3825 ;; *************** function _initLatest *****************
  3826 ;; Defined at:
  3827 ;;		line 9 in file "eeprom.c"
  3828 ;; Parameters:    Size  Location     Type
  3829 ;;		None
  3830 ;; Auto vars:     Size  Location     Type
  3831 ;;		None
  3832 ;; Return value:  Size  Location     Type
  3833 ;;                  1    wreg      void 
  3834 ;; Registers used:
  3835 ;;		wreg, status,2, status,0, cstack
  3836 ;; Tracked objects:
  3837 ;;		On entry : 0/0
  3838 ;;		On exit  : 0/0
  3839 ;;		Unchanged: 0/0
  3840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3844 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3845 ;;Total ram usage:        0 bytes
  3846 ;; Hardware stack levels used:    1
  3847 ;; Hardware stack levels required when called:    7
  3848 ;; This function calls:
  3849 ;;		_ReadEE
  3850 ;; This function is called by:
  3851 ;;		_initialize
  3852 ;; This function uses a non-reentrant model
  3853 ;;
  3854                           
  3855                           	psect	text15
  3856  002180                     __ptext15:
  3857                           	opt stack 0
  3858  002180                     _initLatest:
  3859                           	opt stack 22
  3860                           
  3861                           ;eeprom.c: 10: Latest = ReadEE(160);
  3862                           
  3863                           ;incstack = 0
  3864  002180  0E00               	movlw	0
  3865  002182  0100               	movlb	0	; () banked
  3866  002184  6FAB               	movwf	(ReadEE@address+1)& (0+255),b
  3867  002186  0EA0               	movlw	160
  3868  002188  6FAA               	movwf	ReadEE@address& (0+255),b
  3869  00218A  EC2A  F011         	call	_ReadEE	;wreg free
  3870  00218E  0100               	movlb	0	; () banked
  3871  002190  6FA2               	movwf	_Latest& (0+255),b
  3872                           
  3873                           ; BSR set to: 0
  3874                           ;eeprom.c: 11: if (Latest > 3) {
  3875  002192  0E03               	movlw	3
  3876  002194  0100               	movlb	0	; () banked
  3877  002196  65A2               	cpfsgt	_Latest& (0+255),b
  3878  002198  0012               	return	
  3879                           
  3880                           ; BSR set to: 0
  3881                           ;eeprom.c: 12: Latest = 0;
  3882  00219A  0E00               	movlw	0
  3883  00219C  0100               	movlb	0	; () banked
  3884  00219E  6FA2               	movwf	_Latest& (0+255),b
  3885  0021A0  0012               	return	
  3886  0021A2                     __end_of_initLatest:
  3887                           	opt stack 0
  3888                           tblptru	equ	0xFF8
  3889                           tblptrh	equ	0xFF7
  3890                           tblptrl	equ	0xFF6
  3891                           tablat	equ	0xFF5
  3892                           prodh	equ	0xFF4
  3893                           prodl	equ	0xFF3
  3894                           intcon	equ	0xFF2
  3895                           intcon3	equ	0xFF0
  3896                           postinc0	equ	0xFEE
  3897                           wreg	equ	0xFE8
  3898                           indf2	equ	0xFDF
  3899                           postinc2	equ	0xFDE
  3900                           postdec2	equ	0xFDD
  3901                           fsr2h	equ	0xFDA
  3902                           fsr2l	equ	0xFD9
  3903                           status	equ	0xFD8
  3904                           
  3905 ;; *************** function _ReadEE *****************
  3906 ;; Defined at:
  3907 ;;		line 16 in file "eeprom.c"
  3908 ;; Parameters:    Size  Location     Type
  3909 ;;  address         2    0[BANK0 ] unsigned int 
  3910 ;; Auto vars:     Size  Location     Type
  3911 ;;		None
  3912 ;; Return value:  Size  Location     Type
  3913 ;;                  1    wreg      unsigned char 
  3914 ;; Registers used:
  3915 ;;		wreg, status,2
  3916 ;; Tracked objects:
  3917 ;;		On entry : 0/0
  3918 ;;		On exit  : 0/0
  3919 ;;		Unchanged: 0/0
  3920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3921 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3922 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3924 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3925 ;;Total ram usage:        2 bytes
  3926 ;; Hardware stack levels used:    1
  3927 ;; Hardware stack levels required when called:    6
  3928 ;; This function calls:
  3929 ;;		Nothing
  3930 ;; This function is called by:
  3931 ;;		_initLatest
  3932 ;; This function uses a non-reentrant model
  3933 ;;
  3934                           
  3935                           	psect	text16
  3936  002254                     __ptext16:
  3937                           	opt stack 0
  3938  002254                     _ReadEE:
  3939                           	opt stack 22
  3940                           
  3941                           ;eeprom.c: 19: EEADRH = (unsigned char) (address >> 8);
  3942                           
  3943                           ; BSR set to: 0
  3944                           ;incstack = 0
  3945  002254  0100               	movlb	0	; () banked
  3946  002256  51AB               	movf	(ReadEE@address+1)& (0+255),w,b
  3947  002258  6EAA               	movwf	4010,c	;volatile
  3948                           
  3949                           ; BSR set to: 0
  3950                           ;eeprom.c: 20: EEADR = (unsigned char) address;
  3951  00225A  C0AA  FFA9         	movff	ReadEE@address,4009	;volatile
  3952                           
  3953                           ; BSR set to: 0
  3954                           ;eeprom.c: 22: EECON1bits.EEPGD = 0;
  3955  00225E  9EA6               	bcf	4006,7,c	;volatile
  3956                           
  3957                           ; BSR set to: 0
  3958                           ;eeprom.c: 23: EECON1bits.CFGS = 0;
  3959  002260  9CA6               	bcf	4006,6,c	;volatile
  3960                           
  3961                           ; BSR set to: 0
  3962                           ;eeprom.c: 24: EECON1bits.RD = 1;
  3963  002262  80A6               	bsf	4006,0,c	;volatile
  3964  002264                     l418:
  3965  002264  B0A6               	btfsc	4006,0,c	;volatile
  3966  002266  D7FE               	goto	l418
  3967                           
  3968                           ;eeprom.c: 30: return EEDATA;
  3969  002268  50A8               	movf	4008,w,c	;volatile
  3970  00226A  0012               	return	
  3971  00226C                     __end_of_ReadEE:
  3972                           	opt stack 0
  3973                           tblptru	equ	0xFF8
  3974                           tblptrh	equ	0xFF7
  3975                           tblptrl	equ	0xFF6
  3976                           tablat	equ	0xFF5
  3977                           prodh	equ	0xFF4
  3978                           prodl	equ	0xFF3
  3979                           intcon	equ	0xFF2
  3980                           intcon3	equ	0xFF0
  3981                           postinc0	equ	0xFEE
  3982                           wreg	equ	0xFE8
  3983                           indf2	equ	0xFDF
  3984                           postinc2	equ	0xFDE
  3985                           postdec2	equ	0xFDD
  3986                           fsr2h	equ	0xFDA
  3987                           fsr2l	equ	0xFD9
  3988                           status	equ	0xFD8
  3989                           
  3990 ;; *************** function _initLCD *****************
  3991 ;; Defined at:
  3992 ;;		line 9 in file "lcd.c"
  3993 ;; Parameters:    Size  Location     Type
  3994 ;;		None
  3995 ;; Auto vars:     Size  Location     Type
  3996 ;;		None
  3997 ;; Return value:  Size  Location     Type
  3998 ;;                  1    wreg      void 
  3999 ;; Registers used:
  4000 ;;		wreg, status,2, status,0, cstack
  4001 ;; Tracked objects:
  4002 ;;		On entry : 0/0
  4003 ;;		On exit  : 0/0
  4004 ;;		Unchanged: 0/0
  4005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4008 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4009 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4010 ;;Total ram usage:        1 bytes
  4011 ;; Hardware stack levels used:    1
  4012 ;; Hardware stack levels required when called:    8
  4013 ;; This function calls:
  4014 ;;		_lcdInst
  4015 ;; This function is called by:
  4016 ;;		_initialize
  4017 ;; This function uses a non-reentrant model
  4018 ;;
  4019                           
  4020                           	psect	text17
  4021  001F5E                     __ptext17:
  4022                           	opt stack 0
  4023  001F5E                     _initLCD:
  4024                           	opt stack 21
  4025                           
  4026                           ;lcd.c: 10: _delay((unsigned long)((15)*(8000000/4000.0)));
  4027                           
  4028                           ;incstack = 0
  4029  001F5E  0E27               	movlw	39
  4030  001F60  0100               	movlb	0	; () banked
  4031  001F62  6FAD               	movwf	??_initLCD& (0+255),b
  4032  001F64  0EF5               	movlw	245
  4033  001F66                     u3177:
  4034  001F66  2EE8               	decfsz	wreg,f,c
  4035  001F68  D7FE               	bra	u3177
  4036  001F6A  2FAD               	decfsz	??_initLCD& (0+255),f,b
  4037  001F6C  D7FC               	bra	u3177
  4038                           
  4039                           ;lcd.c: 11: lcdInst(0b00110011);
  4040  001F6E  0E33               	movlw	51
  4041  001F70  EC5C  F011         	call	_lcdInst
  4042                           
  4043                           ;lcd.c: 12: lcdInst(0b00110010);
  4044  001F74  0E32               	movlw	50
  4045  001F76  EC5C  F011         	call	_lcdInst
  4046                           
  4047                           ;lcd.c: 13: lcdInst(0b00101000);
  4048  001F7A  0E28               	movlw	40
  4049  001F7C  EC5C  F011         	call	_lcdInst
  4050                           
  4051                           ;lcd.c: 14: lcdInst(0b00001111);
  4052  001F80  0E0F               	movlw	15
  4053  001F82  EC5C  F011         	call	_lcdInst
  4054                           
  4055                           ;lcd.c: 15: lcdInst(0b00000110);
  4056  001F86  0E06               	movlw	6
  4057  001F88  EC5C  F011         	call	_lcdInst
  4058                           
  4059                           ;lcd.c: 16: lcdInst(0b00000001);
  4060  001F8C  0E01               	movlw	1
  4061  001F8E  EC5C  F011         	call	_lcdInst
  4062                           
  4063                           ;lcd.c: 17: _delay((unsigned long)((15)*(8000000/4000.0)));
  4064  001F92  0E27               	movlw	39
  4065  001F94  0100               	movlb	0	; () banked
  4066  001F96  6FAD               	movwf	??_initLCD& (0+255),b
  4067  001F98  0EF5               	movlw	245
  4068  001F9A                     u3187:
  4069  001F9A  2EE8               	decfsz	wreg,f,c
  4070  001F9C  D7FE               	bra	u3187
  4071  001F9E  2FAD               	decfsz	??_initLCD& (0+255),f,b
  4072  001FA0  D7FC               	bra	u3187
  4073  001FA2  0012               	return		;funcret
  4074  001FA4                     __end_of_initLCD:
  4075                           	opt stack 0
  4076                           tblptru	equ	0xFF8
  4077                           tblptrh	equ	0xFF7
  4078                           tblptrl	equ	0xFF6
  4079                           tablat	equ	0xFF5
  4080                           prodh	equ	0xFF4
  4081                           prodl	equ	0xFF3
  4082                           intcon	equ	0xFF2
  4083                           intcon3	equ	0xFF0
  4084                           postinc0	equ	0xFEE
  4085                           wreg	equ	0xFE8
  4086                           indf2	equ	0xFDF
  4087                           postinc2	equ	0xFDE
  4088                           postdec2	equ	0xFDD
  4089                           fsr2h	equ	0xFDA
  4090                           fsr2l	equ	0xFD9
  4091                           status	equ	0xFD8
  4092                           
  4093 ;; *************** function _lcdInst *****************
  4094 ;; Defined at:
  4095 ;;		line 20 in file "lcd.c"
  4096 ;; Parameters:    Size  Location     Type
  4097 ;;  data            1    wreg     unsigned char 
  4098 ;; Auto vars:     Size  Location     Type
  4099 ;;  data            1    2[BANK0 ] unsigned char 
  4100 ;; Return value:  Size  Location     Type
  4101 ;;                  1    wreg      void 
  4102 ;; Registers used:
  4103 ;;		wreg, status,2, status,0, cstack
  4104 ;; Tracked objects:
  4105 ;;		On entry : 0/0
  4106 ;;		On exit  : 0/0
  4107 ;;		Unchanged: 0/0
  4108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4110 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4112 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4113 ;;Total ram usage:        1 bytes
  4114 ;; Hardware stack levels used:    1
  4115 ;; Hardware stack levels required when called:    7
  4116 ;; This function calls:
  4117 ;;		_lcdNibble
  4118 ;; This function is called by:
  4119 ;;		_initialize
  4120 ;;		_showRTC
  4121 ;;		_main
  4122 ;;		_initLCD
  4123 ;;		_mainloop
  4124 ;; This function uses a non-reentrant model
  4125 ;;
  4126                           
  4127                           	psect	text18
  4128  0022B8                     __ptext18:
  4129                           	opt stack 0
  4130  0022B8                     _lcdInst:
  4131                           	opt stack 22
  4132                           
  4133                           ;incstack = 0
  4134                           ;lcdInst@data stored from wreg
  4135  0022B8  0100               	movlb	0	; () banked
  4136  0022BA  6FAC               	movwf	lcdInst@data& (0+255),b
  4137                           
  4138                           ;lcd.c: 21: LATDbits.LATD2 = 0;
  4139  0022BC  948C               	bcf	3980,2,c	;volatile
  4140                           
  4141                           ;lcd.c: 22: lcdNibble(data);
  4142  0022BE  0100               	movlb	0	; () banked
  4143  0022C0  51AC               	movf	lcdInst@data& (0+255),w,b
  4144  0022C2  EC53  F00E         	call	_lcdNibble
  4145  0022C6  0012               	return		;funcret
  4146  0022C8                     __end_of_lcdInst:
  4147                           	opt stack 0
  4148                           tblptru	equ	0xFF8
  4149                           tblptrh	equ	0xFF7
  4150                           tblptrl	equ	0xFF6
  4151                           tablat	equ	0xFF5
  4152                           prodh	equ	0xFF4
  4153                           prodl	equ	0xFF3
  4154                           intcon	equ	0xFF2
  4155                           intcon3	equ	0xFF0
  4156                           postinc0	equ	0xFEE
  4157                           wreg	equ	0xFE8
  4158                           indf2	equ	0xFDF
  4159                           postinc2	equ	0xFDE
  4160                           postdec2	equ	0xFDD
  4161                           fsr2h	equ	0xFDA
  4162                           fsr2l	equ	0xFD9
  4163                           status	equ	0xFD8
  4164                           
  4165 ;; *************** function _lcdNibble *****************
  4166 ;; Defined at:
  4167 ;;		line 30 in file "lcd.c"
  4168 ;; Parameters:    Size  Location     Type
  4169 ;;  data            1    wreg     unsigned char 
  4170 ;; Auto vars:     Size  Location     Type
  4171 ;;  data            1    1[BANK0 ] unsigned char 
  4172 ;;  temp            1    0[BANK0 ] unsigned char 
  4173 ;; Return value:  Size  Location     Type
  4174 ;;                  1    wreg      void 
  4175 ;; Registers used:
  4176 ;;		wreg, status,2, status,0
  4177 ;; Tracked objects:
  4178 ;;		On entry : 0/0
  4179 ;;		On exit  : 0/0
  4180 ;;		Unchanged: 0/0
  4181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4183 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4185 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4186 ;;Total ram usage:        2 bytes
  4187 ;; Hardware stack levels used:    1
  4188 ;; Hardware stack levels required when called:    6
  4189 ;; This function calls:
  4190 ;;		Nothing
  4191 ;; This function is called by:
  4192 ;;		_lcdInst
  4193 ;;		_putch
  4194 ;; This function uses a non-reentrant model
  4195 ;;
  4196                           
  4197                           	psect	text19
  4198  001CA6                     __ptext19:
  4199                           	opt stack 0
  4200  001CA6                     _lcdNibble:
  4201                           	opt stack 21
  4202                           
  4203                           ;incstack = 0
  4204                           ;lcdNibble@data stored from wreg
  4205  001CA6  0100               	movlb	0	; () banked
  4206  001CA8  6FAB               	movwf	lcdNibble@data& (0+255),b
  4207                           
  4208                           ;lcd.c: 32: char temp = data & 0xF0;
  4209  001CAA  0100               	movlb	0	; () banked
  4210  001CAC  51AB               	movf	lcdNibble@data& (0+255),w,b
  4211  001CAE  0BF0               	andlw	240
  4212  001CB0  0100               	movlb	0	; () banked
  4213  001CB2  6FAA               	movwf	lcdNibble@temp& (0+255),b
  4214                           
  4215                           ;lcd.c: 33: LATD = LATD & 0x0F;
  4216  001CB4  508C               	movf	3980,w,c	;volatile
  4217  001CB6  0B0F               	andlw	15
  4218  001CB8  6E8C               	movwf	3980,c	;volatile
  4219                           
  4220                           ;lcd.c: 34: LATD = temp | LATD;
  4221  001CBA  0100               	movlb	0	; () banked
  4222  001CBC  51AA               	movf	lcdNibble@temp& (0+255),w,b
  4223  001CBE  108C               	iorwf	3980,w,c	;volatile
  4224  001CC0  6E8C               	movwf	3980,c	;volatile
  4225                           
  4226                           ; BSR set to: 0
  4227                           ;lcd.c: 36: LATDbits.LATD3 = 0;
  4228  001CC2  968C               	bcf	3980,3,c	;volatile
  4229                           
  4230                           ; BSR set to: 0
  4231                           ;lcd.c: 37: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4232  001CC4  0E10               	movlw	16
  4233  001CC6                     u3197:
  4234  001CC6  2EE8               	decfsz	wreg,f,c
  4235  001CC8  D7FE               	bra	u3197
  4236  001CCA  D000               	nop2	
  4237                           
  4238                           ;lcd.c: 38: LATDbits.LATD3 = 1;
  4239  001CCC  868C               	bsf	3980,3,c	;volatile
  4240                           
  4241                           ;lcd.c: 39: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4242  001CCE  0E10               	movlw	16
  4243  001CD0                     u3207:
  4244  001CD0  2EE8               	decfsz	wreg,f,c
  4245  001CD2  D7FE               	bra	u3207
  4246  001CD4  D000               	nop2	
  4247                           
  4248                           ;lcd.c: 41: data = data << 4;
  4249  001CD6  0100               	movlb	0	; () banked
  4250  001CD8  39AB               	swapf	lcdNibble@data& (0+255),w,b
  4251  001CDA  0BF0               	andlw	240
  4252  001CDC  0100               	movlb	0	; () banked
  4253  001CDE  6FAB               	movwf	lcdNibble@data& (0+255),b
  4254                           
  4255                           ;lcd.c: 43: temp = data & 0xF0;
  4256  001CE0  0100               	movlb	0	; () banked
  4257  001CE2  51AB               	movf	lcdNibble@data& (0+255),w,b
  4258  001CE4  0BF0               	andlw	240
  4259  001CE6  0100               	movlb	0	; () banked
  4260  001CE8  6FAA               	movwf	lcdNibble@temp& (0+255),b
  4261                           
  4262                           ;lcd.c: 44: LATD = LATD & 0x0F;
  4263  001CEA  508C               	movf	3980,w,c	;volatile
  4264  001CEC  0B0F               	andlw	15
  4265  001CEE  6E8C               	movwf	3980,c	;volatile
  4266                           
  4267                           ;lcd.c: 45: LATD = temp | LATD;
  4268  001CF0  0100               	movlb	0	; () banked
  4269  001CF2  51AA               	movf	lcdNibble@temp& (0+255),w,b
  4270  001CF4  108C               	iorwf	3980,w,c	;volatile
  4271  001CF6  6E8C               	movwf	3980,c	;volatile
  4272                           
  4273                           ; BSR set to: 0
  4274                           ;lcd.c: 47: LATDbits.LATD3 = 0;
  4275  001CF8  968C               	bcf	3980,3,c	;volatile
  4276                           
  4277                           ; BSR set to: 0
  4278                           ;lcd.c: 48: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4279  001CFA  0E10               	movlw	16
  4280  001CFC                     u3217:
  4281  001CFC  2EE8               	decfsz	wreg,f,c
  4282  001CFE  D7FE               	bra	u3217
  4283  001D00  D000               	nop2	
  4284                           
  4285                           ;lcd.c: 49: LATDbits.LATD3 = 1;
  4286  001D02  868C               	bsf	3980,3,c	;volatile
  4287                           
  4288                           ;lcd.c: 50: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4289  001D04  0E10               	movlw	16
  4290  001D06                     u3227:
  4291  001D06  2EE8               	decfsz	wreg,f,c
  4292  001D08  D7FE               	bra	u3227
  4293  001D0A  D000               	nop2	
  4294  001D0C  0012               	return		;funcret
  4295  001D0E                     __end_of_lcdNibble:
  4296                           	opt stack 0
  4297                           tblptru	equ	0xFF8
  4298                           tblptrh	equ	0xFF7
  4299                           tblptrl	equ	0xFF6
  4300                           tablat	equ	0xFF5
  4301                           prodh	equ	0xFF4
  4302                           prodl	equ	0xFF3
  4303                           intcon	equ	0xFF2
  4304                           intcon3	equ	0xFF0
  4305                           postinc0	equ	0xFEE
  4306                           wreg	equ	0xFE8
  4307                           indf2	equ	0xFDF
  4308                           postinc2	equ	0xFDE
  4309                           postdec2	equ	0xFDD
  4310                           fsr2h	equ	0xFDA
  4311                           fsr2l	equ	0xFD9
  4312                           status	equ	0xFD8
  4313                           
  4314 ;; *************** function _I2C_Master_Init *****************
  4315 ;; Defined at:
  4316 ;;		line 13 in file "I2C.c"
  4317 ;; Parameters:    Size  Location     Type
  4318 ;;  c               4   13[BANK0 ] const unsigned long 
  4319 ;; Auto vars:     Size  Location     Type
  4320 ;;		None
  4321 ;; Return value:  Size  Location     Type
  4322 ;;                  1    wreg      void 
  4323 ;; Registers used:
  4324 ;;		wreg, status,2, status,0, cstack
  4325 ;; Tracked objects:
  4326 ;;		On entry : 0/0
  4327 ;;		On exit  : 0/0
  4328 ;;		Unchanged: 0/0
  4329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4330 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4332 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4333 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4334 ;;Total ram usage:        8 bytes
  4335 ;; Hardware stack levels used:    1
  4336 ;; Hardware stack levels required when called:    7
  4337 ;; This function calls:
  4338 ;;		___lldiv
  4339 ;; This function is called by:
  4340 ;;		_initialize
  4341 ;; This function uses a non-reentrant model
  4342 ;;
  4343                           
  4344                           	psect	text20
  4345  001D70                     __ptext20:
  4346                           	opt stack 0
  4347  001D70                     _I2C_Master_Init:
  4348                           	opt stack 22
  4349                           
  4350                           ;I2C.c: 15: SSPSTAT = 0b00000000;
  4351                           
  4352                           ;incstack = 0
  4353  001D70  0E00               	movlw	0
  4354  001D72  6EC7               	movwf	4039,c	;volatile
  4355                           
  4356                           ;I2C.c: 16: SSPCON1 = 0b00101000;
  4357  001D74  0E28               	movlw	40
  4358  001D76  6EC6               	movwf	4038,c	;volatile
  4359                           
  4360                           ;I2C.c: 17: SSPCON2 = 0b00000000;
  4361  001D78  0E00               	movlw	0
  4362  001D7A  6EC5               	movwf	4037,c	;volatile
  4363                           
  4364                           ;I2C.c: 18: SSPADD = (8000000 / (4 * c)) - 1;
  4365  001D7C  0E00               	movlw	0
  4366  001D7E  0100               	movlb	0	; () banked
  4367  001D80  6FAA               	movwf	___lldiv@dividend& (0+255),b
  4368  001D82  0E12               	movlw	18
  4369  001D84  6FAB               	movwf	(___lldiv@dividend+1)& (0+255),b
  4370  001D86  0E7A               	movlw	122
  4371  001D88  6FAC               	movwf	(___lldiv@dividend+2)& (0+255),b
  4372  001D8A  0E00               	movlw	0
  4373  001D8C  6FAD               	movwf	(___lldiv@dividend+3)& (0+255),b
  4374  001D8E  C0B7  F0BB         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  4375  001D92  C0B8  F0BC         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  4376  001D96  C0B9  F0BD         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  4377  001D9A  C0BA  F0BE         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  4378  001D9E  0E02               	movlw	2
  4379  001DA0                     u2645:
  4380  001DA0  90D8               	bcf	status,0,c
  4381  001DA2  0100               	movlb	0	; () banked
  4382  001DA4  37BB               	rlcf	??_I2C_Master_Init& (0+255),f,b
  4383  001DA6  37BC               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  4384  001DA8  37BD               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  4385  001DAA  37BE               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  4386  001DAC  2EE8               	decfsz	wreg,f,c
  4387  001DAE  D7F8               	goto	u2645
  4388  001DB0  C0BB  F0AE         	movff	??_I2C_Master_Init,___lldiv@divisor
  4389  001DB4  C0BC  F0AF         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  4390  001DB8  C0BD  F0B0         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  4391  001DBC  C0BE  F0B1         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  4392  001DC0  ECCA  F00A         	call	___lldiv	;wreg free
  4393  001DC4  0100               	movlb	0	; () banked
  4394  001DC6  05AA               	decf	?___lldiv& (0+255),w,b
  4395  001DC8  6EC8               	movwf	4040,c	;volatile
  4396                           
  4397                           ; BSR set to: 0
  4398                           ;I2C.c: 19: TRISC3 = 1;
  4399  001DCA  8694               	bsf	3988,3,c	;volatile
  4400                           
  4401                           ; BSR set to: 0
  4402                           ;I2C.c: 20: TRISC4 = 1;
  4403  001DCC  8894               	bsf	3988,4,c	;volatile
  4404                           
  4405                           ; BSR set to: 0
  4406  001DCE  0012               	return		;funcret
  4407  001DD0                     __end_of_I2C_Master_Init:
  4408                           	opt stack 0
  4409                           tblptru	equ	0xFF8
  4410                           tblptrh	equ	0xFF7
  4411                           tblptrl	equ	0xFF6
  4412                           tablat	equ	0xFF5
  4413                           prodh	equ	0xFF4
  4414                           prodl	equ	0xFF3
  4415                           intcon	equ	0xFF2
  4416                           intcon3	equ	0xFF0
  4417                           postinc0	equ	0xFEE
  4418                           wreg	equ	0xFE8
  4419                           indf2	equ	0xFDF
  4420                           postinc2	equ	0xFDE
  4421                           postdec2	equ	0xFDD
  4422                           fsr2h	equ	0xFDA
  4423                           fsr2l	equ	0xFD9
  4424                           status	equ	0xFD8
  4425                           
  4426 ;; *************** function ___lldiv *****************
  4427 ;; Defined at:
  4428 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  4429 ;; Parameters:    Size  Location     Type
  4430 ;;  dividend        4    0[BANK0 ] unsigned long 
  4431 ;;  divisor         4    4[BANK0 ] unsigned long 
  4432 ;; Auto vars:     Size  Location     Type
  4433 ;;  quotient        4    8[BANK0 ] unsigned long 
  4434 ;;  counter         1   12[BANK0 ] unsigned char 
  4435 ;; Return value:  Size  Location     Type
  4436 ;;                  4    0[BANK0 ] unsigned long 
  4437 ;; Registers used:
  4438 ;;		wreg, status,2, status,0
  4439 ;; Tracked objects:
  4440 ;;		On entry : 0/0
  4441 ;;		On exit  : 0/0
  4442 ;;		Unchanged: 0/0
  4443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4444 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4445 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4447 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4448 ;;Total ram usage:       13 bytes
  4449 ;; Hardware stack levels used:    1
  4450 ;; Hardware stack levels required when called:    6
  4451 ;; This function calls:
  4452 ;;		Nothing
  4453 ;; This function is called by:
  4454 ;;		_I2C_Master_Init
  4455 ;; This function uses a non-reentrant model
  4456 ;;
  4457                           
  4458                           	psect	text21
  4459  001594                     __ptext21:
  4460                           	opt stack 0
  4461  001594                     ___lldiv:
  4462                           	opt stack 22
  4463                           
  4464                           ; BSR set to: 0
  4465                           ;incstack = 0
  4466  001594  0E00               	movlw	0
  4467  001596  0100               	movlb	0	; () banked
  4468  001598  6FB2               	movwf	___lldiv@quotient& (0+255),b
  4469  00159A  0E00               	movlw	0
  4470  00159C  6FB3               	movwf	(___lldiv@quotient+1)& (0+255),b
  4471  00159E  0E00               	movlw	0
  4472  0015A0  6FB4               	movwf	(___lldiv@quotient+2)& (0+255),b
  4473  0015A2  0E00               	movlw	0
  4474  0015A4  6FB5               	movwf	(___lldiv@quotient+3)& (0+255),b
  4475                           
  4476                           ; BSR set to: 0
  4477  0015A6  0100               	movlb	0	; () banked
  4478  0015A8  51AE               	movf	___lldiv@divisor& (0+255),w,b
  4479  0015AA  0100               	movlb	0	; () banked
  4480  0015AC  11AF               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  4481  0015AE  0100               	movlb	0	; () banked
  4482  0015B0  11B0               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  4483  0015B2  0100               	movlb	0	; () banked
  4484  0015B4  11B1               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  4485  0015B6  B4D8               	btfsc	status,2,c
  4486  0015B8  D042               	goto	l876
  4487                           
  4488                           ; BSR set to: 0
  4489  0015BA  0E01               	movlw	1
  4490  0015BC  0100               	movlb	0	; () banked
  4491  0015BE  6FB6               	movwf	___lldiv@counter& (0+255),b
  4492  0015C0  D008               	goto	l3376
  4493  0015C2                     l3374:
  4494                           
  4495                           ; BSR set to: 0
  4496  0015C2  0100               	movlb	0	; () banked
  4497  0015C4  90D8               	bcf	status,0,c
  4498  0015C6  37AE               	rlcf	___lldiv@divisor& (0+255),f,b
  4499  0015C8  37AF               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  4500  0015CA  37B0               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  4501  0015CC  37B1               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  4502  0015CE  0100               	movlb	0	; () banked
  4503  0015D0  2BB6               	incf	___lldiv@counter& (0+255),f,b
  4504  0015D2                     l3376:
  4505                           
  4506                           ; BSR set to: 0
  4507  0015D2  0100               	movlb	0	; () banked
  4508  0015D4  AFB1               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  4509  0015D6  D7F5               	goto	l3374
  4510  0015D8                     l3378:
  4511                           
  4512                           ; BSR set to: 0
  4513  0015D8  0100               	movlb	0	; () banked
  4514  0015DA  90D8               	bcf	status,0,c
  4515  0015DC  37B2               	rlcf	___lldiv@quotient& (0+255),f,b
  4516  0015DE  37B3               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  4517  0015E0  37B4               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  4518  0015E2  37B5               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  4519                           
  4520                           ; BSR set to: 0
  4521  0015E4  0100               	movlb	0	; () banked
  4522  0015E6  51AE               	movf	___lldiv@divisor& (0+255),w,b
  4523  0015E8  0100               	movlb	0	; () banked
  4524  0015EA  5DAA               	subwf	___lldiv@dividend& (0+255),w,b
  4525  0015EC  0100               	movlb	0	; () banked
  4526  0015EE  51AF               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4527  0015F0  0100               	movlb	0	; () banked
  4528  0015F2  59AB               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  4529  0015F4  0100               	movlb	0	; () banked
  4530  0015F6  51B0               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4531  0015F8  0100               	movlb	0	; () banked
  4532  0015FA  59AC               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  4533  0015FC  0100               	movlb	0	; () banked
  4534  0015FE  51B1               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4535  001600  0100               	movlb	0	; () banked
  4536  001602  59AD               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  4537  001604  A0D8               	btfss	status,0,c
  4538  001606  D012               	goto	l3386
  4539                           
  4540                           ; BSR set to: 0
  4541  001608  0100               	movlb	0	; () banked
  4542  00160A  51AE               	movf	___lldiv@divisor& (0+255),w,b
  4543  00160C  0100               	movlb	0	; () banked
  4544  00160E  5FAA               	subwf	___lldiv@dividend& (0+255),f,b
  4545  001610  0100               	movlb	0	; () banked
  4546  001612  51AF               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4547  001614  0100               	movlb	0	; () banked
  4548  001616  5BAB               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  4549  001618  0100               	movlb	0	; () banked
  4550  00161A  51B0               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4551  00161C  0100               	movlb	0	; () banked
  4552  00161E  5BAC               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  4553  001620  0100               	movlb	0	; () banked
  4554  001622  51B1               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4555  001624  0100               	movlb	0	; () banked
  4556  001626  5BAD               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  4557                           
  4558                           ; BSR set to: 0
  4559  001628  0100               	movlb	0	; () banked
  4560  00162A  81B2               	bsf	___lldiv@quotient& (0+255),0,b
  4561  00162C                     l3386:
  4562                           
  4563                           ; BSR set to: 0
  4564  00162C  0100               	movlb	0	; () banked
  4565  00162E  90D8               	bcf	status,0,c
  4566  001630  33B1               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  4567  001632  33B0               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  4568  001634  33AF               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  4569  001636  33AE               	rrcf	___lldiv@divisor& (0+255),f,b
  4570                           
  4571                           ; BSR set to: 0
  4572  001638  0100               	movlb	0	; () banked
  4573  00163A  2FB6               	decfsz	___lldiv@counter& (0+255),f,b
  4574  00163C  D7CD               	goto	l3378
  4575  00163E                     l876:
  4576                           
  4577                           ; BSR set to: 0
  4578  00163E  C0B2  F0AA         	movff	___lldiv@quotient,?___lldiv
  4579  001642  C0B3  F0AB         	movff	___lldiv@quotient+1,?___lldiv+1
  4580  001646  C0B4  F0AC         	movff	___lldiv@quotient+2,?___lldiv+2
  4581  00164A  C0B5  F0AD         	movff	___lldiv@quotient+3,?___lldiv+3
  4582                           
  4583                           ; BSR set to: 0
  4584  00164E  0012               	return		;funcret
  4585  001650                     __end_of___lldiv:
  4586                           	opt stack 0
  4587                           tblptru	equ	0xFF8
  4588                           tblptrh	equ	0xFF7
  4589                           tblptrl	equ	0xFF6
  4590                           tablat	equ	0xFF5
  4591                           prodh	equ	0xFF4
  4592                           prodl	equ	0xFF3
  4593                           intcon	equ	0xFF2
  4594                           intcon3	equ	0xFF0
  4595                           postinc0	equ	0xFEE
  4596                           wreg	equ	0xFE8
  4597                           indf2	equ	0xFDF
  4598                           postinc2	equ	0xFDE
  4599                           postdec2	equ	0xFDD
  4600                           fsr2h	equ	0xFDA
  4601                           fsr2l	equ	0xFD9
  4602                           status	equ	0xFD8
  4603                           
  4604 ;; *************** function _intrpt *****************
  4605 ;; Defined at:
  4606 ;;		line 159 in file "main.c"
  4607 ;; Parameters:    Size  Location     Type
  4608 ;;		None
  4609 ;; Auto vars:     Size  Location     Type
  4610 ;;  portCW          6  115[COMRAM] int [3]
  4611 ;;  keypress        1  114[COMRAM] unsigned char 
  4612 ;; Return value:  Size  Location     Type
  4613 ;;                  1    wreg      void 
  4614 ;; Registers used:
  4615 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4616 ;; Tracked objects:
  4617 ;;		On entry : 0/0
  4618 ;;		On exit  : 0/0
  4619 ;;		Unchanged: 0/0
  4620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4622 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4623 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4624 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4625 ;;Total ram usage:       23 bytes
  4626 ;; Hardware stack levels used:    1
  4627 ;; Hardware stack levels required when called:    5
  4628 ;; This function calls:
  4629 ;;		_PWMC
  4630 ;;		_PermLog
  4631 ;;		_simulate
  4632 ;;		_stopMoving
  4633 ;; This function is called by:
  4634 ;;		Interrupt level 2
  4635 ;; This function uses a non-reentrant model
  4636 ;;
  4637                           
  4638                           	psect	intcode
  4639  000008                     __pintcode:
  4640                           	opt stack 0
  4641  000008                     _intrpt:
  4642                           	opt stack 21
  4643                           
  4644                           ; BSR set to: 0
  4645                           ;incstack = 0
  4646  000008  827C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4647  00000A  ED32  F006         	call	int_func,f	;refresh shadow registers
  4648                           tblptru	equ	0xFF8
  4649                           tblptrh	equ	0xFF7
  4650                           tblptrl	equ	0xFF6
  4651                           tablat	equ	0xFF5
  4652                           prodh	equ	0xFF4
  4653                           prodl	equ	0xFF3
  4654                           intcon	equ	0xFF2
  4655                           intcon3	equ	0xFF0
  4656                           postinc0	equ	0xFEE
  4657                           wreg	equ	0xFE8
  4658                           indf2	equ	0xFDF
  4659                           postinc2	equ	0xFDE
  4660                           postdec2	equ	0xFDD
  4661                           fsr2h	equ	0xFDA
  4662                           fsr2l	equ	0xFD9
  4663                           status	equ	0xFD8
  4664                           
  4665                           	psect	intcode_body
  4666  000C64                     __pintcode_body:
  4667                           	opt stack 21
  4668  000C64                     int_func:
  4669                           	opt stack 21
  4670  000C64  0006               	pop		; remove dummy address from shadow register refresh
  4671  000C66  CFFA F065          	movff	pclath,??_intrpt+2
  4672  000C6A  CFFB F066          	movff	pclatu,??_intrpt+3
  4673  000C6E  CFE9 F067          	movff	fsr0l,??_intrpt+4
  4674  000C72  CFEA F068          	movff	fsr0h,??_intrpt+5
  4675  000C76  CFE1 F069          	movff	fsr1l,??_intrpt+6
  4676  000C7A  CFE2 F06A          	movff	fsr1h,??_intrpt+7
  4677  000C7E  CFD9 F06B          	movff	fsr2l,??_intrpt+8
  4678  000C82  CFDA F06C          	movff	fsr2h,??_intrpt+9
  4679  000C86  CFF3 F06D          	movff	prodl,??_intrpt+10
  4680  000C8A  CFF4 F06E          	movff	prodh,??_intrpt+11
  4681  000C8E  CFF6 F06F          	movff	tblptrl,??_intrpt+12
  4682  000C92  CFF7 F070          	movff	tblptrh,??_intrpt+13
  4683  000C96  CFF8 F071          	movff	tblptru,??_intrpt+14
  4684  000C9A  CFF5 F072          	movff	tablat,??_intrpt+15
  4685                           
  4686                           ;main.c: 161: (INTCONbits.GIE = 0);
  4687  000C9E  9EF2               	bcf	intcon,7,c	;volatile
  4688                           
  4689                           ;main.c: 162: if (INT1IF) {
  4690  000CA0  A0F0               	btfss	intcon3,0,c	;volatile
  4691  000CA2  D07E               	goto	i2l132
  4692                           
  4693                           ;main.c: 163: int portCW[] = {0, 0, 0};
  4694  000CA4  EE20  F080         	lfsr	2,intrpt@F3122
  4695  000CA8  EE10  F074         	lfsr	1,intrpt@portCW
  4696  000CAC  0E05               	movlw	5
  4697  000CAE                     i2u309_41:
  4698  000CAE  CFDB FFE3          	movff	plusw2,plusw1
  4699  000CB2  06E8               	decf	wreg,f,c
  4700  000CB4  E2FC               	bc	i2u309_41
  4701                           
  4702                           ;main.c: 164: unsigned char keypress = (PORTB & 0xF0) >> 4;
  4703  000CB6  3881               	swapf	3969,w,c	;volatile
  4704  000CB8  0B0F               	andlw	15
  4705  000CBA  0B0F               	andlw	15
  4706  000CBC  6E73               	movwf	intrpt@keypress,c
  4707                           
  4708                           ;main.c: 165: INT1IF = 0;
  4709  000CBE  90F0               	bcf	intcon3,0,c	;volatile
  4710  000CC0                     i2l135:
  4711  000CC0  A281               	btfss	3969,1,c	;volatile
  4712  000CC2  D062               	goto	i2l4294
  4713  000CC4  D7FD               	goto	i2l135
  4714  000CC6                     i2l4262:
  4715                           
  4716                           ;main.c: 171: mode = 2;
  4717  000CC6  0E00               	movlw	0
  4718  000CC8  6E7B               	movwf	_mode+1,c
  4719  000CCA  0E02               	movlw	2
  4720  000CCC  6E7A               	movwf	_mode,c
  4721                           
  4722                           ;main.c: 172: PermLog();
  4723  000CCE  EC5E  F00A         	call	_PermLog	;wreg free
  4724                           
  4725                           ;main.c: 173: mode = 0;
  4726  000CD2  0E00               	movlw	0
  4727  000CD4  6E7B               	movwf	_mode+1,c
  4728  000CD6  0E00               	movlw	0
  4729  000CD8  6E7A               	movwf	_mode,c
  4730                           
  4731                           ;main.c: 174: break;
  4732  000CDA  D062               	goto	i2l132
  4733  000CDC                     i2l4268:
  4734                           
  4735                           ;main.c: 176: mode = 1;
  4736  000CDC  0E00               	movlw	0
  4737  000CDE  6E7B               	movwf	_mode+1,c
  4738  000CE0  0E01               	movlw	1
  4739  000CE2  6E7A               	movwf	_mode,c
  4740                           
  4741                           ;main.c: 177: (INTCONbits.GIE = 1);
  4742  000CE4  8EF2               	bsf	intcon,7,c	;volatile
  4743                           
  4744                           ;main.c: 178: simulate();
  4745  000CE6  ECED  F001         	call	_simulate	;wreg free
  4746                           
  4747                           ;main.c: 179: (INTCONbits.GIE = 0);
  4748  000CEA  9EF2               	bcf	intcon,7,c	;volatile
  4749                           
  4750                           ;main.c: 180: break;
  4751  000CEC  D059               	goto	i2l132
  4752  000CEE                     i2l4276:
  4753                           
  4754                           ;main.c: 183: portCW[0] = 1;
  4755  000CEE  0E00               	movlw	0
  4756  000CF0  6E75               	movwf	intrpt@portCW+1,c
  4757  000CF2  0E01               	movlw	1
  4758  000CF4  6E74               	movwf	intrpt@portCW,c
  4759                           
  4760                           ;main.c: 184: PWMC(3000, 10, portCW);
  4761  000CF6  0E0B               	movlw	11
  4762  000CF8  6E0A               	movwf	PWMC@widthus+1,c
  4763  000CFA  0EB8               	movlw	184
  4764  000CFC  6E09               	movwf	PWMC@widthus,c
  4765  000CFE  0E00               	movlw	0
  4766  000D00  6E0C               	movwf	PWMC@cycles+1,c
  4767  000D02  0E0A               	movlw	10
  4768  000D04  6E0B               	movwf	PWMC@cycles,c
  4769  000D06  0E74               	movlw	low intrpt@portCW
  4770  000D08  6E0D               	movwf	PWMC@port,c
  4771  000D0A  0E00               	movlw	high intrpt@portCW
  4772  000D0C  6E0E               	movwf	PWMC@port+1,c
  4773  000D0E  EC72  F009         	call	_PWMC	;wreg free
  4774                           
  4775                           ;main.c: 185: break;
  4776  000D12  D046               	goto	i2l132
  4777  000D14                     i2l4280:
  4778                           
  4779                           ;main.c: 188: portCW[1] = 1;
  4780  000D14  0E00               	movlw	0
  4781  000D16  6E77               	movwf	intrpt@portCW+3,c
  4782  000D18  0E01               	movlw	1
  4783  000D1A  6E76               	movwf	intrpt@portCW+2,c
  4784                           
  4785                           ;main.c: 189: PWMC(3000, 10, portCW);
  4786  000D1C  0E0B               	movlw	11
  4787  000D1E  6E0A               	movwf	PWMC@widthus+1,c
  4788  000D20  0EB8               	movlw	184
  4789  000D22  6E09               	movwf	PWMC@widthus,c
  4790  000D24  0E00               	movlw	0
  4791  000D26  6E0C               	movwf	PWMC@cycles+1,c
  4792  000D28  0E0A               	movlw	10
  4793  000D2A  6E0B               	movwf	PWMC@cycles,c
  4794  000D2C  0E74               	movlw	low intrpt@portCW
  4795  000D2E  6E0D               	movwf	PWMC@port,c
  4796  000D30  0E00               	movlw	high intrpt@portCW
  4797  000D32  6E0E               	movwf	PWMC@port+1,c
  4798  000D34  EC72  F009         	call	_PWMC	;wreg free
  4799                           
  4800                           ;main.c: 190: break;
  4801  000D38  D033               	goto	i2l132
  4802  000D3A                     i2l4284:
  4803                           
  4804                           ;main.c: 194: portCW[2] = 1;
  4805  000D3A  0E00               	movlw	0
  4806  000D3C  6E79               	movwf	intrpt@portCW+5,c
  4807  000D3E  0E01               	movlw	1
  4808  000D40  6E78               	movwf	intrpt@portCW+4,c
  4809                           
  4810                           ;main.c: 195: PWMC(3000, 10, portCW);
  4811  000D42  0E0B               	movlw	11
  4812  000D44  6E0A               	movwf	PWMC@widthus+1,c
  4813  000D46  0EB8               	movlw	184
  4814  000D48  6E09               	movwf	PWMC@widthus,c
  4815  000D4A  0E00               	movlw	0
  4816  000D4C  6E0C               	movwf	PWMC@cycles+1,c
  4817  000D4E  0E0A               	movlw	10
  4818  000D50  6E0B               	movwf	PWMC@cycles,c
  4819  000D52  0E74               	movlw	low intrpt@portCW
  4820  000D54  6E0D               	movwf	PWMC@port,c
  4821  000D56  0E00               	movlw	high intrpt@portCW
  4822  000D58  6E0E               	movwf	PWMC@port+1,c
  4823  000D5A  EC72  F009         	call	_PWMC	;wreg free
  4824                           
  4825                           ;main.c: 196: break;
  4826  000D5E  D020               	goto	i2l132
  4827  000D60                     i2l4290:
  4828  000D60  5073               	movf	intrpt@keypress,w,c
  4829                           
  4830                           ; Switch size 1, requested type "space"
  4831                           ; Number of cases is 6, Range of values is 3 to 15
  4832                           ; switch strategies available:
  4833                           ; Name         Instructions Cycles
  4834                           ; simple_byte           19    10 (average)
  4835                           ;	Chosen strategy is simple_byte
  4836  000D62  0A03               	xorlw	3	; case 3
  4837  000D64  B4D8               	btfsc	status,2,c
  4838  000D66  D7E9               	goto	i2l4284
  4839  000D68  0A04               	xorlw	4	; case 7
  4840  000D6A  B4D8               	btfsc	status,2,c
  4841  000D6C  D7D3               	goto	i2l4280
  4842  000D6E  0A0C               	xorlw	12	; case 11
  4843  000D70  B4D8               	btfsc	status,2,c
  4844  000D72  D7BD               	goto	i2l4276
  4845  000D74  0A07               	xorlw	7	; case 12
  4846  000D76  B4D8               	btfsc	status,2,c
  4847  000D78  D02E               	goto	i2l148
  4848  000D7A  0A02               	xorlw	2	; case 14
  4849  000D7C  B4D8               	btfsc	status,2,c
  4850  000D7E  D7A3               	goto	i2l4262
  4851  000D80  0A01               	xorlw	1	; case 15
  4852  000D82  B4D8               	btfsc	status,2,c
  4853  000D84  D7AB               	goto	i2l4268
  4854                           
  4855                           ;main.c: 203: }
  4856                           
  4857                           ;main.c: 202: break;
  4858                           
  4859                           ;main.c: 201: default:
  4860                           
  4861                           ;main.c: 200: break;
  4862  000D86  D00C               	goto	i2l132
  4863  000D88                     i2l4294:
  4864  000D88  C07A  F063         	movff	_mode,??_intrpt
  4865  000D8C  C07B  F064         	movff	_mode+1,??_intrpt+1
  4866                           
  4867                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4868                           ; Switch size 1, requested type "space"
  4869                           ; Number of cases is 1, Range of values is 0 to 0
  4870                           ; switch strategies available:
  4871                           ; Name         Instructions Cycles
  4872                           ; simple_byte            4     3 (average)
  4873                           ;	Chosen strategy is simple_byte
  4874  000D90  5064               	movf	??_intrpt+1,w,c
  4875  000D92  0A00               	xorlw	0	; case 0
  4876  000D94  A4D8               	btfss	status,2,c
  4877  000D96  D004               	goto	i2l132
  4878                           
  4879                           ; Switch size 1, requested type "space"
  4880                           ; Number of cases is 1, Range of values is 0 to 0
  4881                           ; switch strategies available:
  4882                           ; Name         Instructions Cycles
  4883                           ; simple_byte            4     3 (average)
  4884                           ;	Chosen strategy is simple_byte
  4885  000D98  5063               	movf	??_intrpt,w,c
  4886  000D9A  0A00               	xorlw	0	; case 0
  4887  000D9C  B4D8               	btfsc	status,2,c
  4888  000D9E  D7E0               	goto	i2l4290
  4889  000DA0                     i2l132:
  4890                           
  4891                           ;main.c: 204: }
  4892                           ;main.c: 205: if (INT2IF) {
  4893  000DA0  A2F0               	btfss	intcon3,1,c	;volatile
  4894  000DA2  D018               	goto	i2l151
  4895                           
  4896                           ;main.c: 206: INT2IF = 0;
  4897  000DA4  92F0               	bcf	intcon3,1,c	;volatile
  4898                           
  4899                           ;main.c: 207: switch (mode) {
  4900  000DA6  D008               	goto	i2l4304
  4901  000DA8                     i2l4298:
  4902                           
  4903                           ;main.c: 209: mode = 3;
  4904  000DA8  0E00               	movlw	0
  4905  000DAA  6E7B               	movwf	_mode+1,c
  4906  000DAC  0E03               	movlw	3
  4907  000DAE  6E7A               	movwf	_mode,c
  4908                           
  4909                           ;main.c: 210: stopMoving(1);
  4910  000DB0  0E01               	movlw	1
  4911  000DB2  ECF3  F00F         	call	_stopMoving
  4912                           
  4913                           ;main.c: 214: }
  4914                           
  4915                           ;main.c: 213: break;
  4916                           
  4917                           ;main.c: 212: default:
  4918                           
  4919                           ;main.c: 211: break;
  4920  000DB6  D00C               	goto	i2l156
  4921  000DB8                     i2l4304:
  4922  000DB8  C07A  F063         	movff	_mode,??_intrpt
  4923  000DBC  C07B  F064         	movff	_mode+1,??_intrpt+1
  4924                           
  4925                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4926                           ; Switch size 1, requested type "space"
  4927                           ; Number of cases is 1, Range of values is 0 to 0
  4928                           ; switch strategies available:
  4929                           ; Name         Instructions Cycles
  4930                           ; simple_byte            4     3 (average)
  4931                           ;	Chosen strategy is simple_byte
  4932  000DC0  5064               	movf	??_intrpt+1,w,c
  4933  000DC2  0A00               	xorlw	0	; case 0
  4934  000DC4  A4D8               	btfss	status,2,c
  4935  000DC6  D004               	goto	i2l156
  4936                           
  4937                           ; Switch size 1, requested type "space"
  4938                           ; Number of cases is 1, Range of values is 1 to 1
  4939                           ; switch strategies available:
  4940                           ; Name         Instructions Cycles
  4941                           ; simple_byte            4     3 (average)
  4942                           ;	Chosen strategy is simple_byte
  4943  000DC8  5063               	movf	??_intrpt,w,c
  4944  000DCA  0A01               	xorlw	1	; case 1
  4945  000DCC  B4D8               	btfsc	status,2,c
  4946  000DCE  D7EC               	goto	i2l4298
  4947  000DD0                     i2l156:
  4948  000DD0  B481               	btfsc	3969,2,c	;volatile
  4949  000DD2  D7FE               	goto	i2l156
  4950  000DD4                     i2l151:
  4951                           
  4952                           ;main.c: 216: }
  4953                           ;main.c: 217: (INTCONbits.GIE = 1);
  4954  000DD4  8EF2               	bsf	intcon,7,c	;volatile
  4955  000DD6                     i2l148:
  4956  000DD6  C072  FFF5         	movff	??_intrpt+15,tablat
  4957  000DDA  C071  FFF8         	movff	??_intrpt+14,tblptru
  4958  000DDE  C070  FFF7         	movff	??_intrpt+13,tblptrh
  4959  000DE2  C06F  FFF6         	movff	??_intrpt+12,tblptrl
  4960  000DE6  C06E  FFF4         	movff	??_intrpt+11,prodh
  4961  000DEA  C06D  FFF3         	movff	??_intrpt+10,prodl
  4962  000DEE  C06C  FFDA         	movff	??_intrpt+9,fsr2h
  4963  000DF2  C06B  FFD9         	movff	??_intrpt+8,fsr2l
  4964  000DF6  C06A  FFE2         	movff	??_intrpt+7,fsr1h
  4965  000DFA  C069  FFE1         	movff	??_intrpt+6,fsr1l
  4966  000DFE  C068  FFEA         	movff	??_intrpt+5,fsr0h
  4967  000E02  C067  FFE9         	movff	??_intrpt+4,fsr0l
  4968  000E06  C066  FFFB         	movff	??_intrpt+3,pclatu
  4969  000E0A  C065  FFFA         	movff	??_intrpt+2,pclath
  4970  000E0E  927C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4971  000E10  0011               	retfie		f
  4972  000E12                     __end_of_intrpt:
  4973                           	opt stack 0
  4974                           pclatu	equ	0xFFB
  4975                           pclath	equ	0xFFA
  4976                           tblptru	equ	0xFF8
  4977                           tblptrh	equ	0xFF7
  4978                           tblptrl	equ	0xFF6
  4979                           tablat	equ	0xFF5
  4980                           prodh	equ	0xFF4
  4981                           prodl	equ	0xFF3
  4982                           intcon	equ	0xFF2
  4983                           intcon3	equ	0xFF0
  4984                           postinc0	equ	0xFEE
  4985                           fsr0h	equ	0xFEA
  4986                           fsr0l	equ	0xFE9
  4987                           wreg	equ	0xFE8
  4988                           plusw1	equ	0xFE3
  4989                           fsr1h	equ	0xFE2
  4990                           fsr1l	equ	0xFE1
  4991                           indf2	equ	0xFDF
  4992                           postinc2	equ	0xFDE
  4993                           postdec2	equ	0xFDD
  4994                           plusw2	equ	0xFDB
  4995                           fsr2h	equ	0xFDA
  4996                           fsr2l	equ	0xFD9
  4997                           status	equ	0xFD8
  4998                           
  4999 ;; *************** function _simulate *****************
  5000 ;; Defined at:
  5001 ;;		line 50 in file "main.c"
  5002 ;; Parameters:    Size  Location     Type
  5003 ;;		None
  5004 ;; Auto vars:     Size  Location     Type
  5005 ;;  portCCW         6   72[COMRAM] int [3]
  5006 ;;  portCW          6   66[COMRAM] int [3]
  5007 ;;  sorted          4   92[COMRAM] unsigned char [4]
  5008 ;;  start           4   88[COMRAM] unsigned int [2]
  5009 ;;  now             4   84[COMRAM] unsigned int [2]
  5010 ;;  period          2   96[COMRAM] unsigned int 
  5011 ;;  V9              2   82[COMRAM] int 
  5012 ;;  C               2   80[COMRAM] int 
  5013 ;;  AA              2   78[COMRAM] int 
  5014 ;;  stop            2   62[COMRAM] int 
  5015 ;; Return value:  Size  Location     Type
  5016 ;;                  1    wreg      void 
  5017 ;; Registers used:
  5018 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5019 ;; Tracked objects:
  5020 ;;		On entry : 0/0
  5021 ;;		On exit  : 0/0
  5022 ;;		Unchanged: 0/0
  5023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5025 ;;      Locals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5026 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5027 ;;      Totals:        38       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5028 ;;Total ram usage:       38 bytes
  5029 ;; Hardware stack levels used:    1
  5030 ;; Hardware stack levels required when called:    4
  5031 ;; This function calls:
  5032 ;;		_CCW90
  5033 ;;		_CW90
  5034 ;;		_HexDecToDec2
  5035 ;;		_WriteRun
  5036 ;;		_check9
  5037 ;;		_checkAA
  5038 ;;		_checkC
  5039 ;;		_showInfo
  5040 ;;		_stopMoving
  5041 ;;		i2___wmul
  5042 ;;		i2_getTime
  5043 ;;		i2_lcdInst
  5044 ;;		i2_printf
  5045 ;; This function is called by:
  5046 ;;		_intrpt
  5047 ;; This function uses a non-reentrant model
  5048 ;;
  5049                           
  5050                           	psect	text23
  5051  0003DA                     __ptext23:
  5052                           	opt stack 0
  5053  0003DA                     _simulate:
  5054                           	opt stack 21
  5055                           
  5056                           ;main.c: 51: unsigned int now[] = {0, 0}, start[] = {0, 0};
  5057                           
  5058                           ;incstack = 0
  5059  0003DA  C09E  F055         	movff	simulate@F3101,simulate@now
  5060  0003DE  C09F  F056         	movff	simulate@F3101+1,simulate@now+1
  5061  0003E2  C0A0  F057         	movff	simulate@F3101+2,simulate@now+2
  5062  0003E6  C0A1  F058         	movff	simulate@F3101+3,simulate@now+3
  5063  0003EA  C09A  F059         	movff	simulate@F3103,simulate@start
  5064  0003EE  C09B  F05A         	movff	simulate@F3103+1,simulate@start+1
  5065  0003F2  C09C  F05B         	movff	simulate@F3103+2,simulate@start+2
  5066  0003F6  C09D  F05C         	movff	simulate@F3103+3,simulate@start+3
  5067                           
  5068                           ;main.c: 52: unsigned char sorted[] = {0, 0, 0, 0};
  5069  0003FA  C096  F05D         	movff	simulate@F3105,simulate@sorted
  5070  0003FE  C097  F05E         	movff	simulate@F3105+1,simulate@sorted+1
  5071  000402  C098  F05F         	movff	simulate@F3105+2,simulate@sorted+2
  5072  000406  C099  F060         	movff	simulate@F3105+3,simulate@sorted+3
  5073                           
  5074                           ;main.c: 53: unsigned int period = 0;
  5075  00040A  0E00               	movlw	0
  5076  00040C  6E62               	movwf	simulate@period+1,c
  5077  00040E  0E00               	movlw	0
  5078  000410  6E61               	movwf	simulate@period,c
  5079                           
  5080                           ;main.c: 54: int stop = 0;
  5081  000412  0E00               	movlw	0
  5082  000414  6E40               	movwf	simulate@stop+1,c
  5083  000416  0E00               	movlw	0
  5084  000418  6E3F               	movwf	simulate@stop,c
  5085                           
  5086                           ;main.c: 55: int AA, C, V9;
  5087                           ;main.c: 56: lcdInst(0b10000000);
  5088  00041A  0E80               	movlw	128
  5089  00041C  EC6A  F011         	call	i2_lcdInst
  5090                           
  5091                           ;main.c: 57: printf("Simulating...          ");
  5092  000420  0E86               	movlw	low STR_2
  5093  000422  6E0D               	movwf	i2printf@f,c
  5094  000424  0EFE               	movlw	high STR_2
  5095  000426  6E0E               	movwf	i2printf@f+1,c
  5096  000428  EC97  F003         	call	i2_printf	;wreg free
  5097                           
  5098                           ;main.c: 58: start[0] = time[0];
  5099  00042C  C0A3  F059         	movff	_time,simulate@start
  5100  000430  6A5A               	clrf	simulate@start+1,c
  5101                           
  5102                           ;main.c: 59: start[1] = time[1];
  5103  000432  C0A4  F05B         	movff	_time+1,simulate@start+2
  5104  000436  6A5C               	clrf	simulate@start+3,c
  5105                           
  5106                           ;main.c: 60: LATC6 = 1;
  5107  000438  8C8B               	bsf	3979,6,c	;volatile
  5108                           
  5109                           ;main.c: 61: INT2IE = 1;
  5110  00043A  88F0               	bsf	intcon3,4,c	;volatile
  5111                           
  5112                           ;main.c: 62: INT2IF = 0;
  5113  00043C  92F0               	bcf	intcon3,1,c	;volatile
  5114                           
  5115                           ;main.c: 63: while (!stop) {
  5116  00043E  D13D               	goto	i2l4180
  5117  000440                     i2l4090:
  5118                           
  5119                           ;main.c: 65: lcdInst(0b10000000);
  5120  000440  0E80               	movlw	128
  5121  000442  EC6A  F011         	call	i2_lcdInst
  5122                           
  5123                           ;main.c: 66: V9 = check9(sorted);
  5124  000446  0E5D               	movlw	low simulate@sorted
  5125  000448  6E3B               	movwf	check9@sorted,c
  5126  00044A  0E00               	movlw	high simulate@sorted
  5127  00044C  6E3C               	movwf	check9@sorted+1,c
  5128  00044E  EC82  F00B         	call	_check9	;wreg free
  5129  000452  C03B  F053         	movff	?_check9,simulate@V9
  5130  000456  C03C  F054         	movff	?_check9+1,simulate@V9+1
  5131                           
  5132                           ;main.c: 68: C = checkC(sorted);
  5133  00045A  0E5D               	movlw	low simulate@sorted
  5134  00045C  6E3B               	movwf	checkC@sorted,c
  5135  00045E  0E00               	movlw	high simulate@sorted
  5136  000460  6E3C               	movwf	checkC@sorted+1,c
  5137  000462  EC28  F00B         	call	_checkC	;wreg free
  5138  000466  C03B  F051         	movff	?_checkC,simulate@C
  5139  00046A  C03C  F052         	movff	?_checkC+1,simulate@C+1
  5140                           
  5141                           ;main.c: 70: AA = checkAA(sorted);
  5142  00046E  0E5D               	movlw	low simulate@sorted
  5143  000470  6E3B               	movwf	checkAA@sorted,c
  5144  000472  0E00               	movlw	high simulate@sorted
  5145  000474  6E3C               	movwf	checkAA@sorted+1,c
  5146  000476  ECDC  F00B         	call	_checkAA	;wreg free
  5147  00047A  C03B  F04F         	movff	?_checkAA,simulate@AA
  5148  00047E  C03C  F050         	movff	?_checkAA+1,simulate@AA+1
  5149                           
  5150                           ;main.c: 71: printf("    ");
  5151  000482  0ECF               	movlw	low (STR_29+11)
  5152  000484  6E0D               	movwf	i2printf@f,c
  5153  000486  0EFF               	movlw	high (STR_29+11)
  5154  000488  6E0E               	movwf	i2printf@f+1,c
  5155  00048A  EC97  F003         	call	i2_printf	;wreg free
  5156                           
  5157                           ;main.c: 74: int portCW[] = {0, 0, 0};
  5158  00048E  EE20  F08C         	lfsr	2,simulate@F3112
  5159  000492  EE10  F043         	lfsr	1,simulate@portCW
  5160  000496  0E05               	movlw	5
  5161  000498                     i2u295_41:
  5162  000498  CFDB FFE3          	movff	plusw2,plusw1
  5163  00049C  06E8               	decf	wreg,f,c
  5164  00049E  E2FC               	bc	i2u295_41
  5165                           
  5166                           ;main.c: 75: int portCCW[] = {0, 0, 0};
  5167  0004A0  EE20  F086         	lfsr	2,simulate@F3114
  5168  0004A4  EE10  F049         	lfsr	1,simulate@portCCW
  5169  0004A8  0E05               	movlw	5
  5170  0004AA                     i2u296_41:
  5171  0004AA  CFDB FFE3          	movff	plusw2,plusw1
  5172  0004AE  06E8               	decf	wreg,f,c
  5173  0004B0  E2FC               	bc	i2u296_41
  5174                           
  5175                           ;main.c: 77: lcdInst(0b11000000);
  5176  0004B2  0EC0               	movlw	192
  5177  0004B4  EC6A  F011         	call	i2_lcdInst
  5178                           
  5179                           ;main.c: 78: printf("9V:");
  5180  0004B8  0EF2               	movlw	low STR_4
  5181  0004BA  6E0D               	movwf	i2printf@f,c
  5182  0004BC  0EFF               	movlw	high STR_4
  5183  0004BE  6E0E               	movwf	i2printf@f+1,c
  5184  0004C0  EC97  F003         	call	i2_printf	;wreg free
  5185                           
  5186                           ;main.c: 79: if (!V9) {
  5187  0004C4  5053               	movf	simulate@V9,w,c
  5188  0004C6  1054               	iorwf	simulate@V9+1,w,c
  5189  0004C8  A4D8               	btfss	status,2,c
  5190  0004CA  D00B               	goto	i2l4112
  5191                           
  5192                           ;main.c: 80: portCCW[0] = 1;
  5193  0004CC  0E00               	movlw	0
  5194  0004CE  6E4A               	movwf	simulate@portCCW+1,c
  5195  0004D0  0E01               	movlw	1
  5196  0004D2  6E49               	movwf	simulate@portCCW,c
  5197                           
  5198                           ;main.c: 81: printf(" -");
  5199  0004D4  0EF9               	movlw	low STR_5
  5200  0004D6  6E0D               	movwf	i2printf@f,c
  5201  0004D8  0EFF               	movlw	high STR_5
  5202  0004DA  6E0E               	movwf	i2printf@f+1,c
  5203  0004DC  EC97  F003         	call	i2_printf	;wreg free
  5204                           
  5205                           ;main.c: 82: } else if (AA == 1) {
  5206  0004E0  D015               	goto	i2l112
  5207  0004E2                     i2l4112:
  5208  0004E2  044F               	decf	simulate@AA,w,c
  5209  0004E4  1050               	iorwf	simulate@AA+1,w,c
  5210  0004E6  A4D8               	btfss	status,2,c
  5211  0004E8  D00B               	goto	i2l4118
  5212                           
  5213                           ;main.c: 83: portCW[0] = 1;
  5214  0004EA  0E00               	movlw	0
  5215  0004EC  6E44               	movwf	simulate@portCW+1,c
  5216  0004EE  0E01               	movlw	1
  5217  0004F0  6E43               	movwf	simulate@portCW,c
  5218                           
  5219                           ;main.c: 84: printf(" +");
  5220  0004F2  0EF6               	movlw	low STR_6
  5221  0004F4  6E0D               	movwf	i2printf@f,c
  5222  0004F6  0EFF               	movlw	high STR_6
  5223  0004F8  6E0E               	movwf	i2printf@f+1,c
  5224  0004FA  EC97  F003         	call	i2_printf	;wreg free
  5225                           
  5226                           ;main.c: 85: } else {
  5227  0004FE  D006               	goto	i2l112
  5228  000500                     i2l4118:
  5229                           
  5230                           ;main.c: 86: printf(" 0");
  5231  000500  0EFC               	movlw	low STR_7
  5232  000502  6E0D               	movwf	i2printf@f,c
  5233  000504  0EFF               	movlw	high STR_7
  5234  000506  6E0E               	movwf	i2printf@f+1,c
  5235  000508  EC97  F003         	call	i2_printf	;wreg free
  5236  00050C                     i2l112:
  5237                           
  5238                           ;main.c: 87: }
  5239                           ;main.c: 89: printf(" C:");
  5240  00050C  0EEE               	movlw	low STR_8
  5241  00050E  6E0D               	movwf	i2printf@f,c
  5242  000510  0EFF               	movlw	high STR_8
  5243  000512  6E0E               	movwf	i2printf@f+1,c
  5244  000514  EC97  F003         	call	i2_printf	;wreg free
  5245                           
  5246                           ;main.c: 91: if (!C) {
  5247  000518  5051               	movf	simulate@C,w,c
  5248  00051A  1052               	iorwf	simulate@C+1,w,c
  5249  00051C  A4D8               	btfss	status,2,c
  5250  00051E  D00B               	goto	i2l4126
  5251                           
  5252                           ;main.c: 92: portCCW[1] = 1;
  5253  000520  0E00               	movlw	0
  5254  000522  6E4C               	movwf	simulate@portCCW+3,c
  5255  000524  0E01               	movlw	1
  5256  000526  6E4B               	movwf	simulate@portCCW+2,c
  5257                           
  5258                           ;main.c: 93: printf(" -");
  5259  000528  0EF9               	movlw	low STR_5
  5260  00052A  6E0D               	movwf	i2printf@f,c
  5261  00052C  0EFF               	movlw	high STR_5
  5262  00052E  6E0E               	movwf	i2printf@f+1,c
  5263  000530  EC97  F003         	call	i2_printf	;wreg free
  5264                           
  5265                           ;main.c: 94: } else if (C == 1) {
  5266  000534  D015               	goto	i2l116
  5267  000536                     i2l4126:
  5268  000536  0451               	decf	simulate@C,w,c
  5269  000538  1052               	iorwf	simulate@C+1,w,c
  5270  00053A  A4D8               	btfss	status,2,c
  5271  00053C  D00B               	goto	i2l4132
  5272                           
  5273                           ;main.c: 95: portCW[1] = 1;
  5274  00053E  0E00               	movlw	0
  5275  000540  6E46               	movwf	simulate@portCW+3,c
  5276  000542  0E01               	movlw	1
  5277  000544  6E45               	movwf	simulate@portCW+2,c
  5278                           
  5279                           ;main.c: 96: printf(" +");
  5280  000546  0EF6               	movlw	low STR_6
  5281  000548  6E0D               	movwf	i2printf@f,c
  5282  00054A  0EFF               	movlw	high STR_6
  5283  00054C  6E0E               	movwf	i2printf@f+1,c
  5284  00054E  EC97  F003         	call	i2_printf	;wreg free
  5285                           
  5286                           ;main.c: 97: } else {
  5287  000552  D006               	goto	i2l116
  5288  000554                     i2l4132:
  5289                           
  5290                           ;main.c: 98: printf(" 0");
  5291  000554  0EFC               	movlw	low STR_7
  5292  000556  6E0D               	movwf	i2printf@f,c
  5293  000558  0EFF               	movlw	high STR_7
  5294  00055A  6E0E               	movwf	i2printf@f+1,c
  5295  00055C  EC97  F003         	call	i2_printf	;wreg free
  5296  000560                     i2l116:
  5297                           
  5298                           ;main.c: 99: }
  5299                           ;main.c: 101: printf(" AA:");
  5300  000560  0EDD               	movlw	low STR_12
  5301  000562  6E0D               	movwf	i2printf@f,c
  5302  000564  0EFF               	movlw	high STR_12
  5303  000566  6E0E               	movwf	i2printf@f+1,c
  5304  000568  EC97  F003         	call	i2_printf	;wreg free
  5305                           
  5306                           ;main.c: 103: if (!AA) {
  5307  00056C  504F               	movf	simulate@AA,w,c
  5308  00056E  1050               	iorwf	simulate@AA+1,w,c
  5309  000570  A4D8               	btfss	status,2,c
  5310  000572  D00B               	goto	i2l4140
  5311                           
  5312                           ;main.c: 104: portCCW[2] = 1;
  5313  000574  0E00               	movlw	0
  5314  000576  6E4E               	movwf	simulate@portCCW+5,c
  5315  000578  0E01               	movlw	1
  5316  00057A  6E4D               	movwf	simulate@portCCW+4,c
  5317                           
  5318                           ;main.c: 105: printf(" -");
  5319  00057C  0EF9               	movlw	low STR_5
  5320  00057E  6E0D               	movwf	i2printf@f,c
  5321  000580  0EFF               	movlw	high STR_5
  5322  000582  6E0E               	movwf	i2printf@f+1,c
  5323  000584  EC97  F003         	call	i2_printf	;wreg free
  5324                           
  5325                           ;main.c: 107: } else if (V9 == 1) {
  5326  000588  D015               	goto	i2l4148
  5327  00058A                     i2l4140:
  5328  00058A  0453               	decf	simulate@V9,w,c
  5329  00058C  1054               	iorwf	simulate@V9+1,w,c
  5330  00058E  A4D8               	btfss	status,2,c
  5331  000590  D00B               	goto	i2l4146
  5332                           
  5333                           ;main.c: 108: portCW[2] = 1;
  5334  000592  0E00               	movlw	0
  5335  000594  6E48               	movwf	simulate@portCW+5,c
  5336  000596  0E01               	movlw	1
  5337  000598  6E47               	movwf	simulate@portCW+4,c
  5338                           
  5339                           ;main.c: 109: printf(" +");
  5340  00059A  0EF6               	movlw	low STR_6
  5341  00059C  6E0D               	movwf	i2printf@f,c
  5342  00059E  0EFF               	movlw	high STR_6
  5343  0005A0  6E0E               	movwf	i2printf@f+1,c
  5344  0005A2  EC97  F003         	call	i2_printf	;wreg free
  5345                           
  5346                           ;main.c: 110: } else {
  5347  0005A6  D006               	goto	i2l4148
  5348  0005A8                     i2l4146:
  5349                           
  5350                           ;main.c: 111: printf(" 0");
  5351  0005A8  0EFC               	movlw	low STR_7
  5352  0005AA  6E0D               	movwf	i2printf@f,c
  5353  0005AC  0EFF               	movlw	high STR_7
  5354  0005AE  6E0E               	movwf	i2printf@f+1,c
  5355  0005B0  EC97  F003         	call	i2_printf	;wreg free
  5356  0005B4                     i2l4148:
  5357                           
  5358                           ;main.c: 112: }
  5359                           ;main.c: 115: CCW90(portCCW);
  5360  0005B4  0E49               	movlw	low simulate@portCCW
  5361  0005B6  6E16               	movwf	CCW90@port,c
  5362  0005B8  0E00               	movlw	high simulate@portCCW
  5363  0005BA  6E17               	movwf	CCW90@port+1,c
  5364  0005BC  ECEF  F010         	call	_CCW90	;wreg free
  5365                           
  5366                           ;main.c: 116: CW90(portCW);
  5367  0005C0  0E43               	movlw	low simulate@portCW
  5368  0005C2  6E16               	movwf	CW90@port,c
  5369  0005C4  0E00               	movlw	high simulate@portCW
  5370  0005C6  6E17               	movwf	CW90@port+1,c
  5371  0005C8  ECE0  F010         	call	_CW90	;wreg free
  5372                           
  5373                           ;main.c: 117: LATC0 = 0;
  5374  0005CC  908B               	bcf	3979,0,c	;volatile
  5375                           
  5376                           ;main.c: 118: LATC1 = 0;
  5377  0005CE  928B               	bcf	3979,1,c	;volatile
  5378                           
  5379                           ;main.c: 119: LATC2 = 0;
  5380  0005D0  948B               	bcf	3979,2,c	;volatile
  5381                           
  5382                           ;main.c: 124: }
  5383                           ;main.c: 125: getTime(time);
  5384  0005D2  0EA3               	movlw	low _time
  5385  0005D4  6E04               	movwf	i2getTime@time,c
  5386  0005D6  0E00               	movlw	high _time
  5387  0005D8  6E05               	movwf	i2getTime@time+1,c
  5388  0005DA  EC18  F00E         	call	i2_getTime	;wreg free
  5389                           
  5390                           ;main.c: 126: now[0] = time[0];
  5391  0005DE  C0A3  F055         	movff	_time,simulate@now
  5392  0005E2  6A56               	clrf	simulate@now+1,c
  5393                           
  5394                           ;main.c: 127: now[1] = time[1];
  5395  0005E4  C0A4  F057         	movff	_time+1,simulate@now+2
  5396  0005E8  6A58               	clrf	simulate@now+3,c
  5397                           
  5398                           ;main.c: 128: lcdInst(0b10000000);
  5399  0005EA  0E80               	movlw	128
  5400  0005EC  EC6A  F011         	call	i2_lcdInst
  5401                           
  5402                           ;main.c: 129: printf("%02x:%02x to %02x:%02x  ", start[1], start[0], now[1], now[0]);
  5403  0005F0  0E25               	movlw	low STR_16
  5404  0005F2  6E0D               	movwf	i2printf@f,c
  5405  0005F4  0EFE               	movlw	high STR_16
  5406  0005F6  6E0E               	movwf	i2printf@f+1,c
  5407  0005F8  C05B  F00F         	movff	simulate@start+2,?i2_printf+2
  5408  0005FC  C05C  F010         	movff	simulate@start+3,?i2_printf+3
  5409  000600  C059  F011         	movff	simulate@start,?i2_printf+4
  5410  000604  C05A  F012         	movff	simulate@start+1,?i2_printf+5
  5411  000608  C057  F013         	movff	simulate@now+2,?i2_printf+6
  5412  00060C  C058  F014         	movff	simulate@now+3,?i2_printf+7
  5413  000610  C055  F015         	movff	simulate@now,?i2_printf+8
  5414  000614  C056  F016         	movff	simulate@now+1,?i2_printf+9
  5415  000618  EC97  F003         	call	i2_printf	;wreg free
  5416                           
  5417                           ;main.c: 130: period = (HexDecToDec2(now[1]) - HexDecToDec2(start[1]))*60 + HexDecToDec2
      +                          (now[0]) - HexDecToDec2(start[0]);
  5418  00061C  C057  F007         	movff	simulate@now+2,HexDecToDec2@hex
  5419  000620  C058  F008         	movff	simulate@now+3,HexDecToDec2@hex+1
  5420  000624  EC8B  F00F         	call	_HexDecToDec2	;wreg free
  5421  000628  C007  F03D         	movff	?_HexDecToDec2,??_simulate
  5422  00062C  C008  F03E         	movff	?_HexDecToDec2+1,??_simulate+1
  5423  000630  C05B  F007         	movff	simulate@start+2,HexDecToDec2@hex
  5424  000634  C05C  F008         	movff	simulate@start+3,HexDecToDec2@hex+1
  5425  000638  EC8B  F00F         	call	_HexDecToDec2	;wreg free
  5426  00063C  1E07               	comf	?_HexDecToDec2,f,c
  5427  00063E  1E08               	comf	?_HexDecToDec2+1,f,c
  5428  000640  4A07               	infsnz	?_HexDecToDec2,f,c
  5429  000642  2A08               	incf	?_HexDecToDec2+1,f,c
  5430  000644  5007               	movf	?_HexDecToDec2,w,c
  5431  000646  243D               	addwf	??_simulate,w,c
  5432  000648  6E41               	movwf	_simulate$1491,c
  5433  00064A  5008               	movf	?_HexDecToDec2+1,w,c
  5434  00064C  203E               	addwfc	??_simulate+1,w,c
  5435  00064E  6E42               	movwf	_simulate$1491+1,c
  5436                           
  5437                           ;main.c: 130: period = (HexDecToDec2(now[1]) - HexDecToDec2(start[1]))*60 + HexDecToDec2
      +                          (now[0]) - HexDecToDec2(start[0]);
  5438  000650  C041  F001         	movff	_simulate$1491,i2___wmul@multiplier
  5439  000654  C042  F002         	movff	_simulate$1491+1,i2___wmul@multiplier+1
  5440  000658  0E00               	movlw	0
  5441  00065A  6E04               	movwf	i2___wmul@multiplicand+1,c
  5442  00065C  0E3C               	movlw	60
  5443  00065E  6E03               	movwf	i2___wmul@multiplicand,c
  5444  000660  ECAD  F010         	call	i2___wmul	;wreg free
  5445  000664  C001  F03D         	movff	?i2___wmul,??_simulate
  5446  000668  C002  F03E         	movff	?i2___wmul+1,??_simulate+1
  5447  00066C  C055  F007         	movff	simulate@now,HexDecToDec2@hex
  5448  000670  C056  F008         	movff	simulate@now+1,HexDecToDec2@hex+1
  5449  000674  EC8B  F00F         	call	_HexDecToDec2	;wreg free
  5450  000678  5007               	movf	?_HexDecToDec2,w,c
  5451  00067A  263D               	addwf	??_simulate,f,c
  5452  00067C  5008               	movf	?_HexDecToDec2+1,w,c
  5453  00067E  223E               	addwfc	??_simulate+1,f,c
  5454  000680  C059  F007         	movff	simulate@start,HexDecToDec2@hex
  5455  000684  C05A  F008         	movff	simulate@start+1,HexDecToDec2@hex+1
  5456  000688  EC8B  F00F         	call	_HexDecToDec2	;wreg free
  5457  00068C  1E07               	comf	?_HexDecToDec2,f,c
  5458  00068E  1E08               	comf	?_HexDecToDec2+1,f,c
  5459  000690  4A07               	infsnz	?_HexDecToDec2,f,c
  5460  000692  2A08               	incf	?_HexDecToDec2+1,f,c
  5461  000694  5007               	movf	?_HexDecToDec2,w,c
  5462  000696  243D               	addwf	??_simulate,w,c
  5463  000698  6E61               	movwf	simulate@period,c
  5464  00069A  5008               	movf	?_HexDecToDec2+1,w,c
  5465  00069C  203E               	addwfc	??_simulate+1,w,c
  5466  00069E  6E62               	movwf	simulate@period+1,c
  5467                           
  5468                           ;main.c: 131: lcdInst(0b11000000);
  5469  0006A0  0EC0               	movlw	192
  5470  0006A2  EC6A  F011         	call	i2_lcdInst
  5471                           
  5472                           ;main.c: 132: printf("Period: %u        ", period);
  5473  0006A6  0E5A               	movlw	low STR_17
  5474  0006A8  6E0D               	movwf	i2printf@f,c
  5475  0006AA  0EFF               	movlw	high STR_17
  5476  0006AC  6E0E               	movwf	i2printf@f+1,c
  5477  0006AE  C061  F00F         	movff	simulate@period,?i2_printf+2
  5478  0006B2  C062  F010         	movff	simulate@period+1,?i2_printf+3
  5479  0006B6  EC97  F003         	call	i2_printf	;wreg free
  5480  0006BA                     i2l4180:
  5481  0006BA  503F               	movf	simulate@stop,w,c
  5482  0006BC  1040               	iorwf	simulate@stop+1,w,c
  5483  0006BE  B4D8               	btfsc	status,2,c
  5484  0006C0  D6BF               	goto	i2l4090
  5485                           
  5486                           ;main.c: 135: }
  5487                           ;main.c: 137: }
  5488                           ;main.c: 139: mode = 2;
  5489  0006C2  0E00               	movlw	0
  5490  0006C4  6E7B               	movwf	_mode+1,c
  5491  0006C6  0E02               	movlw	2
  5492  0006C8  6E7A               	movwf	_mode,c
  5493                           
  5494                           ;main.c: 140: INT2IE = 0;
  5495  0006CA  98F0               	bcf	intcon3,4,c	;volatile
  5496                           
  5497                           ;main.c: 141: stopMoving(0);
  5498  0006CC  0E00               	movlw	0
  5499  0006CE  ECF3  F00F         	call	_stopMoving
  5500                           
  5501                           ;main.c: 142: lcdInst(0b11000000);
  5502  0006D2  0EC0               	movlw	192
  5503  0006D4  EC6A  F011         	call	i2_lcdInst
  5504                           
  5505                           ;main.c: 143: printf("Sorting Complete          ");
  5506  0006D8  0EBF               	movlw	low STR_18
  5507  0006DA  6E0D               	movwf	i2printf@f,c
  5508  0006DC  0EFD               	movlw	high STR_18
  5509  0006DE  6E0E               	movwf	i2printf@f+1,c
  5510  0006E0  EC97  F003         	call	i2_printf	;wreg free
  5511                           
  5512                           ;main.c: 144: WriteRun(sorted, period);
  5513  0006E4  0E5D               	movlw	low simulate@sorted
  5514  0006E6  6E07               	movwf	WriteRun@sorted,c
  5515  0006E8  0E00               	movlw	high simulate@sorted
  5516  0006EA  6E08               	movwf	WriteRun@sorted+1,c
  5517  0006EC  C061  F009         	movff	simulate@period,WriteRun@time
  5518  0006F0  C062  F00A         	movff	simulate@period+1,WriteRun@time+1
  5519  0006F4  EC09  F007         	call	_WriteRun	;wreg free
  5520                           
  5521                           ;main.c: 145: _delay((unsigned long)((700)*(8000000/4000.0)));
  5522  0006F8  0E08               	movlw	8
  5523  0006FA  6E3E               	movwf	(??_simulate+1)& (0+255),c
  5524  0006FC  0E1B               	movlw	27
  5525  0006FE  6E3D               	movwf	??_simulate& (0+255),c
  5526  000700  0E27               	movlw	39
  5527  000702                     i2u323_47:
  5528  000702  2EE8               	decfsz	wreg,f,c
  5529  000704  D7FE               	bra	i2u323_47
  5530  000706  2E3D               	decfsz	??_simulate& (0+255),f,c
  5531  000708  D7FC               	bra	i2u323_47
  5532  00070A  2E3E               	decfsz	(??_simulate+1)& (0+255),f,c
  5533  00070C  D7FA               	bra	i2u323_47
  5534  00070E  F000               	nop	
  5535                           
  5536                           ;main.c: 146: showInfo(period, sorted);
  5537  000710  C061  F029         	movff	simulate@period,showInfo@time
  5538  000714  C062  F02A         	movff	simulate@period+1,showInfo@time+1
  5539  000718  0E5D               	movlw	low simulate@sorted
  5540  00071A  6E2B               	movwf	showInfo@sorted,c
  5541  00071C  0E00               	movlw	high simulate@sorted
  5542  00071E  6E2C               	movwf	showInfo@sorted+1,c
  5543  000720  EC1E  F005         	call	_showInfo	;wreg free
  5544                           
  5545                           ;main.c: 147: mode = 0;
  5546  000724  0E00               	movlw	0
  5547  000726  6E7B               	movwf	_mode+1,c
  5548  000728  0E00               	movlw	0
  5549  00072A  6E7A               	movwf	_mode,c
  5550  00072C  0012               	return		;funcret
  5551  00072E                     __end_of_simulate:
  5552                           	opt stack 0
  5553                           pclatu	equ	0xFFB
  5554                           pclath	equ	0xFFA
  5555                           tblptru	equ	0xFF8
  5556                           tblptrh	equ	0xFF7
  5557                           tblptrl	equ	0xFF6
  5558                           tablat	equ	0xFF5
  5559                           prodh	equ	0xFF4
  5560                           prodl	equ	0xFF3
  5561                           intcon	equ	0xFF2
  5562                           intcon3	equ	0xFF0
  5563                           postinc0	equ	0xFEE
  5564                           fsr0h	equ	0xFEA
  5565                           fsr0l	equ	0xFE9
  5566                           wreg	equ	0xFE8
  5567                           plusw1	equ	0xFE3
  5568                           fsr1h	equ	0xFE2
  5569                           fsr1l	equ	0xFE1
  5570                           indf2	equ	0xFDF
  5571                           postinc2	equ	0xFDE
  5572                           postdec2	equ	0xFDD
  5573                           plusw2	equ	0xFDB
  5574                           fsr2h	equ	0xFDA
  5575                           fsr2l	equ	0xFD9
  5576                           status	equ	0xFD8
  5577                           
  5578 ;; *************** function i2_getTime *****************
  5579 ;; Defined at:
  5580 ;;		line 76 in file "modules.c"
  5581 ;; Parameters:    Size  Location     Type
  5582 ;;  time            2    3[COMRAM] PTR unsigned char 
  5583 ;;		 -> time(7), 
  5584 ;; Auto vars:     Size  Location     Type
  5585 ;;  getTime         1    5[COMRAM] unsigned char 
  5586 ;; Return value:  Size  Location     Type
  5587 ;;                  1    wreg      void 
  5588 ;; Registers used:
  5589 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5590 ;; Tracked objects:
  5591 ;;		On entry : 0/0
  5592 ;;		On exit  : 0/0
  5593 ;;		Unchanged: 0/0
  5594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5595 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5596 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5598 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5599 ;;Total ram usage:        3 bytes
  5600 ;; Hardware stack levels used:    1
  5601 ;; Hardware stack levels required when called:    2
  5602 ;; This function calls:
  5603 ;;		i2_I2C_Master_Read
  5604 ;;		i2_I2C_Master_Start
  5605 ;;		i2_I2C_Master_Stop
  5606 ;;		i2_I2C_Master_Write
  5607 ;; This function is called by:
  5608 ;;		_simulate
  5609 ;; This function uses a non-reentrant model
  5610 ;;
  5611                           
  5612                           	psect	text24
  5613  001C30                     __ptext24:
  5614                           	opt stack 0
  5615  001C30                     i2_getTime:
  5616                           	opt stack 22
  5617                           
  5618                           ;modules.c: 77: (INTCONbits.GIE = 0);
  5619                           
  5620                           ;incstack = 0
  5621  001C30  9EF2               	bcf	intcon,7,c	;volatile
  5622                           
  5623                           ;modules.c: 81: I2C_Master_Start();
  5624  001C32  EC86  F011         	call	i2_I2C_Master_Start	;wreg free
  5625                           
  5626                           ;modules.c: 82: I2C_Master_Write(0b11010000);
  5627  001C36  0E00               	movlw	0
  5628  001C38  6E03               	movwf	i2I2C_Master_Write@d+1,c
  5629  001C3A  0ED0               	movlw	208
  5630  001C3C  6E02               	movwf	i2I2C_Master_Write@d,c
  5631  001C3E  EC75  F011         	call	i2_I2C_Master_Write	;wreg free
  5632                           
  5633                           ;modules.c: 83: I2C_Master_Write(0x00);
  5634  001C42  0E00               	movlw	0
  5635  001C44  6E03               	movwf	i2I2C_Master_Write@d+1,c
  5636  001C46  0E00               	movlw	0
  5637  001C48  6E02               	movwf	i2I2C_Master_Write@d,c
  5638  001C4A  EC75  F011         	call	i2_I2C_Master_Write	;wreg free
  5639                           
  5640                           ;modules.c: 84: I2C_Master_Stop();
  5641  001C4E  EC82  F011         	call	i2_I2C_Master_Stop	;wreg free
  5642                           
  5643                           ;modules.c: 87: I2C_Master_Start();
  5644  001C52  EC86  F011         	call	i2_I2C_Master_Start	;wreg free
  5645                           
  5646                           ;modules.c: 88: I2C_Master_Write(0b11010001);
  5647  001C56  0E00               	movlw	0
  5648  001C58  6E03               	movwf	i2I2C_Master_Write@d+1,c
  5649  001C5A  0ED1               	movlw	209
  5650  001C5C  6E02               	movwf	i2I2C_Master_Write@d,c
  5651  001C5E  EC75  F011         	call	i2_I2C_Master_Write	;wreg free
  5652                           
  5653                           ;modules.c: 89: for (unsigned char i = 0; i < 0x06; i++) {
  5654  001C62  0E00               	movlw	0
  5655  001C64  6E06               	movwf	i2getTime@i,c
  5656  001C66                     i2l4038:
  5657  001C66  0E05               	movlw	5
  5658  001C68  6406               	cpfsgt	i2getTime@i,c
  5659  001C6A  D001               	goto	i2l4042
  5660  001C6C  D00E               	goto	i2l4048
  5661  001C6E                     i2l4042:
  5662                           
  5663                           ;modules.c: 90: time[i] = I2C_Master_Read(1);
  5664  001C6E  5006               	movf	i2getTime@i,w,c
  5665  001C70  0D01               	mullw	1
  5666  001C72  50F3               	movf	prodl,w,c
  5667  001C74  2404               	addwf	i2getTime@time,w,c
  5668  001C76  6ED9               	movwf	fsr2l,c
  5669  001C78  50F4               	movf	prodh,w,c
  5670  001C7A  2005               	addwfc	i2getTime@time+1,w,c
  5671  001C7C  6EDA               	movwf	fsr2h,c
  5672  001C7E  0E01               	movlw	1
  5673  001C80  EC87  F010         	call	i2_I2C_Master_Read
  5674  001C84  6EDF               	movwf	indf2,c
  5675  001C86  2A06               	incf	i2getTime@i,f,c
  5676  001C88  D7EE               	goto	i2l4038
  5677  001C8A                     i2l4048:
  5678                           
  5679                           ;modules.c: 91: }
  5680                           ;modules.c: 92: time[6] = I2C_Master_Read(0);
  5681  001C8A  EE20 F006          	lfsr	2,6
  5682  001C8E  5004               	movf	i2getTime@time,w,c
  5683  001C90  26D9               	addwf	fsr2l,f,c
  5684  001C92  5005               	movf	i2getTime@time+1,w,c
  5685  001C94  22DA               	addwfc	fsr2h,f,c
  5686  001C96  0E00               	movlw	0
  5687  001C98  EC87  F010         	call	i2_I2C_Master_Read
  5688  001C9C  6EDF               	movwf	indf2,c
  5689                           
  5690                           ;modules.c: 93: I2C_Master_Stop();
  5691  001C9E  EC82  F011         	call	i2_I2C_Master_Stop	;wreg free
  5692                           
  5693                           ;modules.c: 94: (INTCONbits.GIE = 1);
  5694  001CA2  8EF2               	bsf	intcon,7,c	;volatile
  5695  001CA4  0012               	return		;funcret
  5696  001CA6                     __end_ofi2_getTime:
  5697                           	opt stack 0
  5698                           pclatu	equ	0xFFB
  5699                           pclath	equ	0xFFA
  5700                           tblptru	equ	0xFF8
  5701                           tblptrh	equ	0xFF7
  5702                           tblptrl	equ	0xFF6
  5703                           tablat	equ	0xFF5
  5704                           prodh	equ	0xFF4
  5705                           prodl	equ	0xFF3
  5706                           intcon	equ	0xFF2
  5707                           intcon3	equ	0xFF0
  5708                           postinc0	equ	0xFEE
  5709                           fsr0h	equ	0xFEA
  5710                           fsr0l	equ	0xFE9
  5711                           wreg	equ	0xFE8
  5712                           plusw1	equ	0xFE3
  5713                           fsr1h	equ	0xFE2
  5714                           fsr1l	equ	0xFE1
  5715                           indf2	equ	0xFDF
  5716                           postinc2	equ	0xFDE
  5717                           postdec2	equ	0xFDD
  5718                           plusw2	equ	0xFDB
  5719                           fsr2h	equ	0xFDA
  5720                           fsr2l	equ	0xFD9
  5721                           status	equ	0xFD8
  5722                           
  5723 ;; *************** function i2_I2C_Master_Write *****************
  5724 ;; Defined at:
  5725 ;;		line 42 in file "I2C.c"
  5726 ;; Parameters:    Size  Location     Type
  5727 ;;  d               2    1[COMRAM] unsigned int 
  5728 ;; Auto vars:     Size  Location     Type
  5729 ;;		None
  5730 ;; Return value:  Size  Location     Type
  5731 ;;                  1    wreg      void 
  5732 ;; Registers used:
  5733 ;;		wreg, status,2, status,0, cstack
  5734 ;; Tracked objects:
  5735 ;;		On entry : 0/0
  5736 ;;		On exit  : 0/0
  5737 ;;		Unchanged: 0/0
  5738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5739 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5742 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5743 ;;Total ram usage:        2 bytes
  5744 ;; Hardware stack levels used:    1
  5745 ;; Hardware stack levels required when called:    1
  5746 ;; This function calls:
  5747 ;;		i2_I2C_Master_Wait
  5748 ;; This function is called by:
  5749 ;;		i2_getTime
  5750 ;; This function uses a non-reentrant model
  5751 ;;
  5752                           
  5753                           	psect	text25
  5754  0022EA                     __ptext25:
  5755                           	opt stack 0
  5756  0022EA                     i2_I2C_Master_Write:
  5757                           	opt stack 22
  5758                           
  5759                           ;I2C.c: 43: I2C_Master_Wait();
  5760                           
  5761                           ;incstack = 0
  5762  0022EA  EC4B  F011         	call	i2_I2C_Master_Wait	;wreg free
  5763                           
  5764                           ;I2C.c: 44: SSPBUF = d;
  5765  0022EE  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
  5766  0022F2  0012               	return		;funcret
  5767  0022F4                     __end_ofi2_I2C_Master_Write:
  5768                           	opt stack 0
  5769                           pclatu	equ	0xFFB
  5770                           pclath	equ	0xFFA
  5771                           tblptru	equ	0xFF8
  5772                           tblptrh	equ	0xFF7
  5773                           tblptrl	equ	0xFF6
  5774                           tablat	equ	0xFF5
  5775                           prodh	equ	0xFF4
  5776                           prodl	equ	0xFF3
  5777                           intcon	equ	0xFF2
  5778                           intcon3	equ	0xFF0
  5779                           postinc0	equ	0xFEE
  5780                           fsr0h	equ	0xFEA
  5781                           fsr0l	equ	0xFE9
  5782                           wreg	equ	0xFE8
  5783                           plusw1	equ	0xFE3
  5784                           fsr1h	equ	0xFE2
  5785                           fsr1l	equ	0xFE1
  5786                           indf2	equ	0xFDF
  5787                           postinc2	equ	0xFDE
  5788                           postdec2	equ	0xFDD
  5789                           plusw2	equ	0xFDB
  5790                           fsr2h	equ	0xFDA
  5791                           fsr2l	equ	0xFD9
  5792                           status	equ	0xFD8
  5793                           
  5794 ;; *************** function i2_I2C_Master_Stop *****************
  5795 ;; Defined at:
  5796 ;;		line 37 in file "I2C.c"
  5797 ;; Parameters:    Size  Location     Type
  5798 ;;		None
  5799 ;; Auto vars:     Size  Location     Type
  5800 ;;		None
  5801 ;; Return value:  Size  Location     Type
  5802 ;;                  1    wreg      void 
  5803 ;; Registers used:
  5804 ;;		wreg, status,2, status,0, cstack
  5805 ;; Tracked objects:
  5806 ;;		On entry : 0/0
  5807 ;;		On exit  : 0/0
  5808 ;;		Unchanged: 0/0
  5809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5813 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5814 ;;Total ram usage:        0 bytes
  5815 ;; Hardware stack levels used:    1
  5816 ;; Hardware stack levels required when called:    1
  5817 ;; This function calls:
  5818 ;;		i2_I2C_Master_Wait
  5819 ;; This function is called by:
  5820 ;;		i2_getTime
  5821 ;; This function uses a non-reentrant model
  5822 ;;
  5823                           
  5824                           	psect	text26
  5825  002304                     __ptext26:
  5826                           	opt stack 0
  5827  002304                     i2_I2C_Master_Stop:
  5828                           	opt stack 22
  5829                           
  5830                           ;I2C.c: 38: I2C_Master_Wait();
  5831                           
  5832                           ;incstack = 0
  5833  002304  EC4B  F011         	call	i2_I2C_Master_Wait	;wreg free
  5834                           
  5835                           ;I2C.c: 39: PEN = 1;
  5836  002308  84C5               	bsf	4037,2,c	;volatile
  5837  00230A  0012               	return		;funcret
  5838  00230C                     __end_ofi2_I2C_Master_Stop:
  5839                           	opt stack 0
  5840                           pclatu	equ	0xFFB
  5841                           pclath	equ	0xFFA
  5842                           tblptru	equ	0xFF8
  5843                           tblptrh	equ	0xFF7
  5844                           tblptrl	equ	0xFF6
  5845                           tablat	equ	0xFF5
  5846                           prodh	equ	0xFF4
  5847                           prodl	equ	0xFF3
  5848                           intcon	equ	0xFF2
  5849                           intcon3	equ	0xFF0
  5850                           postinc0	equ	0xFEE
  5851                           fsr0h	equ	0xFEA
  5852                           fsr0l	equ	0xFE9
  5853                           wreg	equ	0xFE8
  5854                           plusw1	equ	0xFE3
  5855                           fsr1h	equ	0xFE2
  5856                           fsr1l	equ	0xFE1
  5857                           indf2	equ	0xFDF
  5858                           postinc2	equ	0xFDE
  5859                           postdec2	equ	0xFDD
  5860                           plusw2	equ	0xFDB
  5861                           fsr2h	equ	0xFDA
  5862                           fsr2l	equ	0xFD9
  5863                           status	equ	0xFD8
  5864                           
  5865 ;; *************** function i2_I2C_Master_Start *****************
  5866 ;; Defined at:
  5867 ;;		line 27 in file "I2C.c"
  5868 ;; Parameters:    Size  Location     Type
  5869 ;;		None
  5870 ;; Auto vars:     Size  Location     Type
  5871 ;;		None
  5872 ;; Return value:  Size  Location     Type
  5873 ;;                  1    wreg      void 
  5874 ;; Registers used:
  5875 ;;		wreg, status,2, status,0, cstack
  5876 ;; Tracked objects:
  5877 ;;		On entry : 0/0
  5878 ;;		On exit  : 0/0
  5879 ;;		Unchanged: 0/0
  5880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5884 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5885 ;;Total ram usage:        0 bytes
  5886 ;; Hardware stack levels used:    1
  5887 ;; Hardware stack levels required when called:    1
  5888 ;; This function calls:
  5889 ;;		i2_I2C_Master_Wait
  5890 ;; This function is called by:
  5891 ;;		i2_getTime
  5892 ;; This function uses a non-reentrant model
  5893 ;;
  5894                           
  5895                           	psect	text27
  5896  00230C                     __ptext27:
  5897                           	opt stack 0
  5898  00230C                     i2_I2C_Master_Start:
  5899                           	opt stack 22
  5900                           
  5901                           ;I2C.c: 28: I2C_Master_Wait();
  5902                           
  5903                           ;incstack = 0
  5904  00230C  EC4B  F011         	call	i2_I2C_Master_Wait	;wreg free
  5905                           
  5906                           ;I2C.c: 29: SEN = 1;
  5907  002310  80C5               	bsf	4037,0,c	;volatile
  5908  002312  0012               	return		;funcret
  5909  002314                     __end_ofi2_I2C_Master_Start:
  5910                           	opt stack 0
  5911                           pclatu	equ	0xFFB
  5912                           pclath	equ	0xFFA
  5913                           tblptru	equ	0xFF8
  5914                           tblptrh	equ	0xFF7
  5915                           tblptrl	equ	0xFF6
  5916                           tablat	equ	0xFF5
  5917                           prodh	equ	0xFF4
  5918                           prodl	equ	0xFF3
  5919                           intcon	equ	0xFF2
  5920                           intcon3	equ	0xFF0
  5921                           postinc0	equ	0xFEE
  5922                           fsr0h	equ	0xFEA
  5923                           fsr0l	equ	0xFE9
  5924                           wreg	equ	0xFE8
  5925                           plusw1	equ	0xFE3
  5926                           fsr1h	equ	0xFE2
  5927                           fsr1l	equ	0xFE1
  5928                           indf2	equ	0xFDF
  5929                           postinc2	equ	0xFDE
  5930                           postdec2	equ	0xFDD
  5931                           plusw2	equ	0xFDB
  5932                           fsr2h	equ	0xFDA
  5933                           fsr2l	equ	0xFD9
  5934                           status	equ	0xFD8
  5935                           
  5936 ;; *************** function i2_I2C_Master_Read *****************
  5937 ;; Defined at:
  5938 ;;		line 47 in file "I2C.c"
  5939 ;; Parameters:    Size  Location     Type
  5940 ;;  a               1    wreg     unsigned char 
  5941 ;; Auto vars:     Size  Location     Type
  5942 ;;  a               1    1[COMRAM] unsigned char 
  5943 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
  5944 ;; Return value:  Size  Location     Type
  5945 ;;                  1    wreg      unsigned char 
  5946 ;; Registers used:
  5947 ;;		wreg, status,2, status,0, cstack
  5948 ;; Tracked objects:
  5949 ;;		On entry : 0/0
  5950 ;;		On exit  : 0/0
  5951 ;;		Unchanged: 0/0
  5952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5954 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5956 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5957 ;;Total ram usage:        2 bytes
  5958 ;; Hardware stack levels used:    1
  5959 ;; Hardware stack levels required when called:    1
  5960 ;; This function calls:
  5961 ;;		i2_I2C_Master_Wait
  5962 ;; This function is called by:
  5963 ;;		i2_getTime
  5964 ;; This function uses a non-reentrant model
  5965 ;;
  5966                           
  5967                           	psect	text28
  5968  00210E                     __ptext28:
  5969                           	opt stack 0
  5970  00210E                     i2_I2C_Master_Read:
  5971                           	opt stack 22
  5972                           
  5973                           ;incstack = 0
  5974                           ;i2I2C_Master_Read@a stored from wreg
  5975  00210E  6E02               	movwf	i2I2C_Master_Read@a,c
  5976                           
  5977                           ;I2C.c: 48: unsigned char temp;
  5978                           ;I2C.c: 49: I2C_Master_Wait();
  5979  002110  EC4B  F011         	call	i2_I2C_Master_Wait	;wreg free
  5980                           
  5981                           ;I2C.c: 50: RCEN = 1;
  5982  002114  86C5               	bsf	4037,3,c	;volatile
  5983                           
  5984                           ;I2C.c: 51: I2C_Master_Wait();
  5985  002116  EC4B  F011         	call	i2_I2C_Master_Wait	;wreg free
  5986                           
  5987                           ;I2C.c: 52: temp = SSPBUF;
  5988  00211A  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
  5989                           
  5990                           ;I2C.c: 53: I2C_Master_Wait();
  5991  00211E  EC4B  F011         	call	i2_I2C_Master_Wait	;wreg free
  5992                           
  5993                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
  5994  002122  5002               	movf	i2I2C_Master_Read@a,w,c
  5995  002124  A4D8               	btfss	status,2,c
  5996  002126  D002               	goto	i2u241_40
  5997  002128  8AC5               	bsf	4037,5,c	;volatile
  5998  00212A  D001               	goto	i2l3452
  5999  00212C                     i2u241_40:
  6000  00212C  9AC5               	bcf	4037,5,c	;volatile
  6001  00212E                     i2l3452:
  6002                           
  6003                           ;I2C.c: 55: ACKEN = 1;
  6004  00212E  88C5               	bsf	4037,4,c	;volatile
  6005                           
  6006                           ;I2C.c: 56: return temp;
  6007  002130  5003               	movf	i2I2C_Master_Read@temp,w,c
  6008  002132  0012               	return	
  6009  002134                     __end_ofi2_I2C_Master_Read:
  6010                           	opt stack 0
  6011                           pclatu	equ	0xFFB
  6012                           pclath	equ	0xFFA
  6013                           tblptru	equ	0xFF8
  6014                           tblptrh	equ	0xFF7
  6015                           tblptrl	equ	0xFF6
  6016                           tablat	equ	0xFF5
  6017                           prodh	equ	0xFF4
  6018                           prodl	equ	0xFF3
  6019                           intcon	equ	0xFF2
  6020                           intcon3	equ	0xFF0
  6021                           postinc0	equ	0xFEE
  6022                           fsr0h	equ	0xFEA
  6023                           fsr0l	equ	0xFE9
  6024                           wreg	equ	0xFE8
  6025                           plusw1	equ	0xFE3
  6026                           fsr1h	equ	0xFE2
  6027                           fsr1l	equ	0xFE1
  6028                           indf2	equ	0xFDF
  6029                           postinc2	equ	0xFDE
  6030                           postdec2	equ	0xFDD
  6031                           plusw2	equ	0xFDB
  6032                           fsr2h	equ	0xFDA
  6033                           fsr2l	equ	0xFD9
  6034                           status	equ	0xFD8
  6035                           
  6036 ;; *************** function i2_I2C_Master_Wait *****************
  6037 ;; Defined at:
  6038 ;;		line 23 in file "I2C.c"
  6039 ;; Parameters:    Size  Location     Type
  6040 ;;		None
  6041 ;; Auto vars:     Size  Location     Type
  6042 ;;		None
  6043 ;; Return value:  Size  Location     Type
  6044 ;;                  1    wreg      void 
  6045 ;; Registers used:
  6046 ;;		wreg, status,2, status,0
  6047 ;; Tracked objects:
  6048 ;;		On entry : 0/0
  6049 ;;		On exit  : 0/0
  6050 ;;		Unchanged: 0/0
  6051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6054 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6055 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6056 ;;Total ram usage:        1 bytes
  6057 ;; Hardware stack levels used:    1
  6058 ;; This function calls:
  6059 ;;		Nothing
  6060 ;; This function is called by:
  6061 ;;		i2_I2C_Master_Start
  6062 ;;		i2_I2C_Master_Stop
  6063 ;;		i2_I2C_Master_Write
  6064 ;;		i2_I2C_Master_Read
  6065 ;; This function uses a non-reentrant model
  6066 ;;
  6067                           
  6068                           	psect	text29
  6069  002296                     __ptext29:
  6070                           	opt stack 0
  6071  002296                     i2_I2C_Master_Wait:
  6072                           	opt stack 22
  6073  002296                     i2l370:
  6074  002296  B4C7               	btfsc	4039,2,c	;volatile
  6075  002298  D7FE               	goto	i2l370
  6076  00229A  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
  6077  00229E  0E1F               	movlw	31
  6078  0022A0  1601               	andwf	??i2_I2C_Master_Wait,f,c
  6079  0022A2  B4D8               	btfsc	status,2,c
  6080  0022A4  0012               	return	
  6081  0022A6  D7F7               	goto	i2l370
  6082  0022A8                     __end_ofi2_I2C_Master_Wait:
  6083                           	opt stack 0
  6084                           pclatu	equ	0xFFB
  6085                           pclath	equ	0xFFA
  6086                           tblptru	equ	0xFF8
  6087                           tblptrh	equ	0xFF7
  6088                           tblptrl	equ	0xFF6
  6089                           tablat	equ	0xFF5
  6090                           prodh	equ	0xFF4
  6091                           prodl	equ	0xFF3
  6092                           intcon	equ	0xFF2
  6093                           intcon3	equ	0xFF0
  6094                           postinc0	equ	0xFEE
  6095                           fsr0h	equ	0xFEA
  6096                           fsr0l	equ	0xFE9
  6097                           wreg	equ	0xFE8
  6098                           plusw1	equ	0xFE3
  6099                           fsr1h	equ	0xFE2
  6100                           fsr1l	equ	0xFE1
  6101                           indf2	equ	0xFDF
  6102                           postinc2	equ	0xFDE
  6103                           postdec2	equ	0xFDD
  6104                           plusw2	equ	0xFDB
  6105                           fsr2h	equ	0xFDA
  6106                           fsr2l	equ	0xFD9
  6107                           status	equ	0xFD8
  6108                           
  6109 ;; *************** function _stopMoving *****************
  6110 ;; Defined at:
  6111 ;;		line 29 in file "motors.c"
  6112 ;; Parameters:    Size  Location     Type
  6113 ;;  em              1    wreg     unsigned char 
  6114 ;; Auto vars:     Size  Location     Type
  6115 ;;  em              1   42[COMRAM] unsigned char 
  6116 ;; Return value:  Size  Location     Type
  6117 ;;                  1    wreg      void 
  6118 ;; Registers used:
  6119 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6120 ;; Tracked objects:
  6121 ;;		On entry : 0/0
  6122 ;;		On exit  : 0/0
  6123 ;;		Unchanged: 0/0
  6124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6126 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6128 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6129 ;;Total ram usage:        3 bytes
  6130 ;; Hardware stack levels used:    1
  6131 ;; Hardware stack levels required when called:    3
  6132 ;; This function calls:
  6133 ;;		i2_lcdInst
  6134 ;;		i2_printf
  6135 ;; This function is called by:
  6136 ;;		_simulate
  6137 ;;		_intrpt
  6138 ;; This function uses a non-reentrant model
  6139 ;;
  6140                           
  6141                           	psect	text30
  6142  001FE6                     __ptext30:
  6143                           	opt stack 0
  6144  001FE6                     _stopMoving:
  6145                           	opt stack 22
  6146                           
  6147                           ;incstack = 0
  6148                           ;stopMoving@em stored from wreg
  6149  001FE6  6E2B               	movwf	stopMoving@em,c
  6150                           
  6151                           ;motors.c: 30: (INTCONbits.GIE = 0);
  6152  001FE8  9EF2               	bcf	intcon,7,c	;volatile
  6153                           
  6154                           ;motors.c: 31: LATC = 0;
  6155  001FEA  0E00               	movlw	0
  6156  001FEC  6E8B               	movwf	3979,c	;volatile
  6157                           
  6158                           ;motors.c: 32: lcdInst(0b10000000);printf(em ? "Emergency          " : "Stopped         
      +                           ");
  6159  001FEE  0E80               	movlw	128
  6160  001FF0  EC6A  F011         	call	i2_lcdInst
  6161  001FF4  502B               	movf	stopMoving@em,w,c
  6162  001FF6  A4D8               	btfss	status,2,c
  6163  001FF8  D004               	goto	i2l3914
  6164  001FFA  0E7F               	movlw	low STR_37
  6165  001FFC  6E29               	movwf	_stopMoving$546,c
  6166  001FFE  0EFF               	movlw	high STR_37
  6167  002000  D003               	goto	L1
  6168  002002                     i2l3914:
  6169  002002  0E1F               	movlw	low STR_36
  6170  002004  6E29               	movwf	_stopMoving$546,c
  6171  002006  0EFF               	movlw	high STR_36
  6172  002008                     L1:
  6173  002008  6E2A               	movwf	_stopMoving$546+1,c
  6174  00200A  C029  F00D         	movff	_stopMoving$546,i2printf@f
  6175  00200E  C02A  F00E         	movff	_stopMoving$546+1,i2printf@f+1
  6176  002012  EC97  F003         	call	i2_printf	;wreg free
  6177                           
  6178                           ;motors.c: 33: if (em)
  6179  002016  502B               	movf	stopMoving@em,w,c
  6180  002018  B4D8               	btfsc	status,2,c
  6181  00201A  0012               	return	
  6182  00201C                     i2l275:
  6183  00201C  D7FF               	goto	i2l275
  6184  00201E                     __end_of_stopMoving:
  6185                           	opt stack 0
  6186                           pclatu	equ	0xFFB
  6187                           pclath	equ	0xFFA
  6188                           tblptru	equ	0xFF8
  6189                           tblptrh	equ	0xFF7
  6190                           tblptrl	equ	0xFF6
  6191                           tablat	equ	0xFF5
  6192                           prodh	equ	0xFF4
  6193                           prodl	equ	0xFF3
  6194                           intcon	equ	0xFF2
  6195                           intcon3	equ	0xFF0
  6196                           postinc0	equ	0xFEE
  6197                           fsr0h	equ	0xFEA
  6198                           fsr0l	equ	0xFE9
  6199                           wreg	equ	0xFE8
  6200                           plusw1	equ	0xFE3
  6201                           fsr1h	equ	0xFE2
  6202                           fsr1l	equ	0xFE1
  6203                           indf2	equ	0xFDF
  6204                           postinc2	equ	0xFDE
  6205                           postdec2	equ	0xFDD
  6206                           plusw2	equ	0xFDB
  6207                           fsr2h	equ	0xFDA
  6208                           fsr2l	equ	0xFD9
  6209                           status	equ	0xFD8
  6210                           
  6211 ;; *************** function _checkC *****************
  6212 ;; Defined at:
  6213 ;;		line 62 in file "sensors.c"
  6214 ;; Parameters:    Size  Location     Type
  6215 ;;  sorted          2   58[COMRAM] PTR unsigned char 
  6216 ;;		 -> simulate@sorted(4), 
  6217 ;; Auto vars:     Size  Location     Type
  6218 ;;		None
  6219 ;; Return value:  Size  Location     Type
  6220 ;;                  2   58[COMRAM] int 
  6221 ;; Registers used:
  6222 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6223 ;; Tracked objects:
  6224 ;;		On entry : 0/0
  6225 ;;		On exit  : 0/0
  6226 ;;		Unchanged: 0/0
  6227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6228 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6231 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6232 ;;Total ram usage:        2 bytes
  6233 ;; Hardware stack levels used:    1
  6234 ;; Hardware stack levels required when called:    3
  6235 ;; This function calls:
  6236 ;;		_checkV
  6237 ;;		i2_printf
  6238 ;; This function is called by:
  6239 ;;		_simulate
  6240 ;; This function uses a non-reentrant model
  6241 ;;
  6242                           
  6243                           	psect	text31
  6244  001650                     __ptext31:
  6245                           	opt stack 0
  6246  001650                     _checkC:
  6247                           	opt stack 21
  6248                           
  6249                           ;sensors.c: 65: printf("C:");
  6250                           
  6251                           ;incstack = 0
  6252  001650  0EEF               	movlw	low (STR_8+1)
  6253  001652  6E0D               	movwf	i2printf@f,c
  6254  001654  0EFF               	movlw	high (STR_8+1)
  6255  001656  6E0E               	movwf	i2printf@f+1,c
  6256  001658  EC97  F003         	call	i2_printf	;wreg free
  6257                           
  6258                           ;sensors.c: 66: switch (checkV(0, 1.5)) {
  6259  00165C  D032               	goto	i2l3822
  6260  00165E                     i2l3794:
  6261                           
  6262                           ;sensors.c: 69: printf(" 1 ");
  6263  00165E  0EE6               	movlw	low STR_39
  6264  001660  6E0D               	movwf	i2printf@f,c
  6265  001662  0EFF               	movlw	high STR_39
  6266  001664  6E0E               	movwf	i2printf@f+1,c
  6267  001666  EC97  F003         	call	i2_printf	;wreg free
  6268                           
  6269                           ;sensors.c: 70: sorted[1]++;
  6270  00166A  EE20 F001          	lfsr	2,1
  6271  00166E  503B               	movf	checkC@sorted,w,c
  6272  001670  26D9               	addwf	fsr2l,f,c
  6273  001672  503C               	movf	checkC@sorted+1,w,c
  6274  001674  22DA               	addwfc	fsr2h,f,c
  6275  001676  2ADF               	incf	indf2,f,c
  6276                           
  6277                           ;sensors.c: 71: return 1;
  6278  001678  0E00               	movlw	0
  6279  00167A  6E3C               	movwf	?_checkC+1,c
  6280  00167C  0E01               	movlw	1
  6281  00167E  6E3B               	movwf	?_checkC,c
  6282  001680  0012               	return	
  6283  001682                     i2l3802:
  6284                           
  6285                           ;sensors.c: 74: printf(" 0 ");
  6286  001682  0EE2               	movlw	low STR_40
  6287  001684  6E0D               	movwf	i2printf@f,c
  6288  001686  0EFF               	movlw	high STR_40
  6289  001688  6E0E               	movwf	i2printf@f+1,c
  6290  00168A  EC97  F003         	call	i2_printf	;wreg free
  6291                           
  6292                           ;sensors.c: 75: sorted[3]++;
  6293  00168E  EE20 F003          	lfsr	2,3
  6294  001692  503B               	movf	checkC@sorted,w,c
  6295  001694  26D9               	addwf	fsr2l,f,c
  6296  001696  503C               	movf	checkC@sorted+1,w,c
  6297  001698  22DA               	addwfc	fsr2h,f,c
  6298  00169A  2ADF               	incf	indf2,f,c
  6299                           
  6300                           ;sensors.c: 76: return 0;
  6301  00169C  0E00               	movlw	0
  6302  00169E  6E3C               	movwf	?_checkC+1,c
  6303  0016A0  0E00               	movlw	0
  6304  0016A2  6E3B               	movwf	?_checkC,c
  6305  0016A4  0012               	return	
  6306  0016A6                     i2l3810:
  6307                           
  6308                           ;sensors.c: 79: printf("-1 ");
  6309  0016A6  0EEA               	movlw	low STR_41
  6310  0016A8  6E0D               	movwf	i2printf@f,c
  6311  0016AA  0EFF               	movlw	high STR_41
  6312  0016AC  6E0E               	movwf	i2printf@f+1,c
  6313  0016AE  EC97  F003         	call	i2_printf	;wreg free
  6314                           
  6315                           ;sensors.c: 80: return -1;
  6316  0016B2  683B               	setf	?_checkC,c
  6317  0016B4  683C               	setf	?_checkC+1,c
  6318  0016B6  0012               	return	
  6319  0016B8                     i2l3816:
  6320                           
  6321                           ;sensors.c: 82: return 0;
  6322  0016B8  0E00               	movlw	0
  6323  0016BA  6E3C               	movwf	?_checkC+1,c
  6324  0016BC  0E00               	movlw	0
  6325  0016BE  6E3B               	movwf	?_checkC,c
  6326                           
  6327                           ;sensors.c: 83: }
  6328  0016C0  0012               	return	
  6329  0016C2                     i2l3822:
  6330  0016C2  0E00               	movlw	0
  6331  0016C4  6E31               	movwf	checkV@channel+1,c
  6332  0016C6  0E00               	movlw	0
  6333  0016C8  6E30               	movwf	checkV@channel,c
  6334  0016CA  0E00               	movlw	0
  6335  0016CC  6E32               	movwf	checkV@max,c
  6336  0016CE  0EC0               	movlw	192
  6337  0016D0  6E33               	movwf	checkV@max+1,c
  6338  0016D2  0E3F               	movlw	63
  6339  0016D4  6E34               	movwf	checkV@max+2,c
  6340  0016D6  ECBA  F007         	call	_checkV	;wreg free
  6341                           
  6342                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  6343                           ; Switch size 1, requested type "space"
  6344                           ; Number of cases is 2, Range of values is 0 to 255
  6345                           ; switch strategies available:
  6346                           ; Name         Instructions Cycles
  6347                           ; simple_byte            7     4 (average)
  6348                           ;	Chosen strategy is simple_byte
  6349  0016DA  5031               	movf	?_checkV+1,w,c
  6350  0016DC  0A00               	xorlw	0	; case 0
  6351  0016DE  B4D8               	btfsc	status,2,c
  6352  0016E0  D004               	goto	i2l4516
  6353  0016E2  0AFF               	xorlw	255	; case 255
  6354  0016E4  B4D8               	btfsc	status,2,c
  6355  0016E6  D009               	goto	i2l4518
  6356  0016E8  D7E7               	goto	i2l3816
  6357  0016EA                     i2l4516:
  6358                           
  6359                           ; Switch size 1, requested type "space"
  6360                           ; Number of cases is 2, Range of values is 0 to 1
  6361                           ; switch strategies available:
  6362                           ; Name         Instructions Cycles
  6363                           ; simple_byte            7     4 (average)
  6364                           ;	Chosen strategy is simple_byte
  6365  0016EA  5030               	movf	?_checkV,w,c
  6366  0016EC  0A00               	xorlw	0	; case 0
  6367  0016EE  B4D8               	btfsc	status,2,c
  6368  0016F0  D7DA               	goto	i2l3810
  6369  0016F2  0A01               	xorlw	1	; case 1
  6370  0016F4  B4D8               	btfsc	status,2,c
  6371  0016F6  D7B3               	goto	i2l3794
  6372  0016F8  D7DF               	goto	i2l3816
  6373  0016FA                     i2l4518:
  6374                           
  6375                           ; Switch size 1, requested type "space"
  6376                           ; Number of cases is 1, Range of values is 255 to 255
  6377                           ; switch strategies available:
  6378                           ; Name         Instructions Cycles
  6379                           ; simple_byte            4     3 (average)
  6380                           ;	Chosen strategy is simple_byte
  6381  0016FA  5030               	movf	?_checkV,w,c
  6382  0016FC  0AFF               	xorlw	255	; case 255
  6383  0016FE  B4D8               	btfsc	status,2,c
  6384  001700  D7C0               	goto	i2l3802
  6385  001702  D7DA               	goto	i2l3816
  6386  001704                     __end_of_checkC:
  6387                           	opt stack 0
  6388                           pclatu	equ	0xFFB
  6389                           pclath	equ	0xFFA
  6390                           tblptru	equ	0xFF8
  6391                           tblptrh	equ	0xFF7
  6392                           tblptrl	equ	0xFF6
  6393                           tablat	equ	0xFF5
  6394                           prodh	equ	0xFF4
  6395                           prodl	equ	0xFF3
  6396                           intcon	equ	0xFF2
  6397                           intcon3	equ	0xFF0
  6398                           postinc0	equ	0xFEE
  6399                           fsr0h	equ	0xFEA
  6400                           fsr0l	equ	0xFE9
  6401                           wreg	equ	0xFE8
  6402                           plusw1	equ	0xFE3
  6403                           fsr1h	equ	0xFE2
  6404                           fsr1l	equ	0xFE1
  6405                           indf2	equ	0xFDF
  6406                           postinc2	equ	0xFDE
  6407                           postdec2	equ	0xFDD
  6408                           plusw2	equ	0xFDB
  6409                           fsr2h	equ	0xFDA
  6410                           fsr2l	equ	0xFD9
  6411                           status	equ	0xFD8
  6412                           
  6413 ;; *************** function _checkAA *****************
  6414 ;; Defined at:
  6415 ;;		line 38 in file "sensors.c"
  6416 ;; Parameters:    Size  Location     Type
  6417 ;;  sorted          2   58[COMRAM] PTR unsigned char 
  6418 ;;		 -> simulate@sorted(4), 
  6419 ;; Auto vars:     Size  Location     Type
  6420 ;;		None
  6421 ;; Return value:  Size  Location     Type
  6422 ;;                  2   58[COMRAM] int 
  6423 ;; Registers used:
  6424 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6425 ;; Tracked objects:
  6426 ;;		On entry : 0/0
  6427 ;;		On exit  : 0/0
  6428 ;;		Unchanged: 0/0
  6429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6430 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6431 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6433 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6434 ;;Total ram usage:        2 bytes
  6435 ;; Hardware stack levels used:    1
  6436 ;; Hardware stack levels required when called:    3
  6437 ;; This function calls:
  6438 ;;		_checkV
  6439 ;;		i2_printf
  6440 ;; This function is called by:
  6441 ;;		_simulate
  6442 ;; This function uses a non-reentrant model
  6443 ;;
  6444                           
  6445                           	psect	text32
  6446  0017B8                     __ptext32:
  6447                           	opt stack 0
  6448  0017B8                     _checkAA:
  6449                           	opt stack 21
  6450                           
  6451                           ;sensors.c: 41: printf("AA:");
  6452                           
  6453                           ;incstack = 0
  6454  0017B8  0EDE               	movlw	low (STR_12+1)
  6455  0017BA  6E0D               	movwf	i2printf@f,c
  6456  0017BC  0EFF               	movlw	high (STR_12+1)
  6457  0017BE  6E0E               	movwf	i2printf@f+1,c
  6458  0017C0  EC97  F003         	call	i2_printf	;wreg free
  6459                           
  6460                           ;sensors.c: 42: switch (checkV(2, 1.5)) {
  6461  0017C4  D030               	goto	i2l3862
  6462  0017C6                     i2l3834:
  6463                           
  6464                           ;sensors.c: 45: printf(" 1 ");
  6465  0017C6  0EE6               	movlw	low STR_39
  6466  0017C8  6E0D               	movwf	i2printf@f,c
  6467  0017CA  0EFF               	movlw	high STR_39
  6468  0017CC  6E0E               	movwf	i2printf@f+1,c
  6469  0017CE  EC97  F003         	call	i2_printf	;wreg free
  6470                           
  6471                           ;sensors.c: 46: sorted[0]++;
  6472  0017D2  C03B  FFD9         	movff	checkAA@sorted,fsr2l
  6473  0017D6  C03C  FFDA         	movff	checkAA@sorted+1,fsr2h
  6474  0017DA  2ADF               	incf	indf2,f,c
  6475                           
  6476                           ;sensors.c: 47: return 1;
  6477  0017DC  0E00               	movlw	0
  6478  0017DE  6E3C               	movwf	?_checkAA+1,c
  6479  0017E0  0E01               	movlw	1
  6480  0017E2  6E3B               	movwf	?_checkAA,c
  6481  0017E4  0012               	return	
  6482  0017E6                     i2l3842:
  6483                           
  6484                           ;sensors.c: 50: printf(" 0 ");
  6485  0017E6  0EE2               	movlw	low STR_40
  6486  0017E8  6E0D               	movwf	i2printf@f,c
  6487  0017EA  0EFF               	movlw	high STR_40
  6488  0017EC  6E0E               	movwf	i2printf@f+1,c
  6489  0017EE  EC97  F003         	call	i2_printf	;wreg free
  6490                           
  6491                           ;sensors.c: 51: sorted[3]++;
  6492  0017F2  EE20 F003          	lfsr	2,3
  6493  0017F6  503B               	movf	checkAA@sorted,w,c
  6494  0017F8  26D9               	addwf	fsr2l,f,c
  6495  0017FA  503C               	movf	checkAA@sorted+1,w,c
  6496  0017FC  22DA               	addwfc	fsr2h,f,c
  6497  0017FE  2ADF               	incf	indf2,f,c
  6498                           
  6499                           ;sensors.c: 52: return 0;
  6500  001800  0E00               	movlw	0
  6501  001802  6E3C               	movwf	?_checkAA+1,c
  6502  001804  0E00               	movlw	0
  6503  001806  6E3B               	movwf	?_checkAA,c
  6504  001808  0012               	return	
  6505  00180A                     i2l3850:
  6506                           
  6507                           ;sensors.c: 55: printf("-1 ");
  6508  00180A  0EEA               	movlw	low STR_41
  6509  00180C  6E0D               	movwf	i2printf@f,c
  6510  00180E  0EFF               	movlw	high STR_41
  6511  001810  6E0E               	movwf	i2printf@f+1,c
  6512  001812  EC97  F003         	call	i2_printf	;wreg free
  6513                           
  6514                           ;sensors.c: 56: return -1;
  6515  001816  683B               	setf	?_checkAA,c
  6516  001818  683C               	setf	?_checkAA+1,c
  6517  00181A  0012               	return	
  6518  00181C                     i2l3856:
  6519                           
  6520                           ;sensors.c: 58: return 0;
  6521  00181C  0E00               	movlw	0
  6522  00181E  6E3C               	movwf	?_checkAA+1,c
  6523  001820  0E00               	movlw	0
  6524  001822  6E3B               	movwf	?_checkAA,c
  6525                           
  6526                           ;sensors.c: 59: }
  6527  001824  0012               	return	
  6528  001826                     i2l3862:
  6529  001826  0E00               	movlw	0
  6530  001828  6E31               	movwf	checkV@channel+1,c
  6531  00182A  0E02               	movlw	2
  6532  00182C  6E30               	movwf	checkV@channel,c
  6533  00182E  0E00               	movlw	0
  6534  001830  6E32               	movwf	checkV@max,c
  6535  001832  0EC0               	movlw	192
  6536  001834  6E33               	movwf	checkV@max+1,c
  6537  001836  0E3F               	movlw	63
  6538  001838  6E34               	movwf	checkV@max+2,c
  6539  00183A  ECBA  F007         	call	_checkV	;wreg free
  6540                           
  6541                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  6542                           ; Switch size 1, requested type "space"
  6543                           ; Number of cases is 2, Range of values is 0 to 255
  6544                           ; switch strategies available:
  6545                           ; Name         Instructions Cycles
  6546                           ; simple_byte            7     4 (average)
  6547                           ;	Chosen strategy is simple_byte
  6548  00183E  5031               	movf	?_checkV+1,w,c
  6549  001840  0A00               	xorlw	0	; case 0
  6550  001842  B4D8               	btfsc	status,2,c
  6551  001844  D004               	goto	i2l4520
  6552  001846  0AFF               	xorlw	255	; case 255
  6553  001848  B4D8               	btfsc	status,2,c
  6554  00184A  D009               	goto	i2l4522
  6555  00184C  D7E7               	goto	i2l3856
  6556  00184E                     i2l4520:
  6557                           
  6558                           ; Switch size 1, requested type "space"
  6559                           ; Number of cases is 2, Range of values is 0 to 1
  6560                           ; switch strategies available:
  6561                           ; Name         Instructions Cycles
  6562                           ; simple_byte            7     4 (average)
  6563                           ;	Chosen strategy is simple_byte
  6564  00184E  5030               	movf	?_checkV,w,c
  6565  001850  0A00               	xorlw	0	; case 0
  6566  001852  B4D8               	btfsc	status,2,c
  6567  001854  D7DA               	goto	i2l3850
  6568  001856  0A01               	xorlw	1	; case 1
  6569  001858  B4D8               	btfsc	status,2,c
  6570  00185A  D7B5               	goto	i2l3834
  6571  00185C  D7DF               	goto	i2l3856
  6572  00185E                     i2l4522:
  6573                           
  6574                           ; Switch size 1, requested type "space"
  6575                           ; Number of cases is 1, Range of values is 255 to 255
  6576                           ; switch strategies available:
  6577                           ; Name         Instructions Cycles
  6578                           ; simple_byte            4     3 (average)
  6579                           ;	Chosen strategy is simple_byte
  6580  00185E  5030               	movf	?_checkV,w,c
  6581  001860  0AFF               	xorlw	255	; case 255
  6582  001862  B4D8               	btfsc	status,2,c
  6583  001864  D7C0               	goto	i2l3842
  6584  001866  D7DA               	goto	i2l3856
  6585  001868                     __end_of_checkAA:
  6586                           	opt stack 0
  6587                           pclatu	equ	0xFFB
  6588                           pclath	equ	0xFFA
  6589                           tblptru	equ	0xFF8
  6590                           tblptrh	equ	0xFF7
  6591                           tblptrl	equ	0xFF6
  6592                           tablat	equ	0xFF5
  6593                           prodh	equ	0xFF4
  6594                           prodl	equ	0xFF3
  6595                           intcon	equ	0xFF2
  6596                           intcon3	equ	0xFF0
  6597                           postinc0	equ	0xFEE
  6598                           fsr0h	equ	0xFEA
  6599                           fsr0l	equ	0xFE9
  6600                           wreg	equ	0xFE8
  6601                           plusw1	equ	0xFE3
  6602                           fsr1h	equ	0xFE2
  6603                           fsr1l	equ	0xFE1
  6604                           indf2	equ	0xFDF
  6605                           postinc2	equ	0xFDE
  6606                           postdec2	equ	0xFDD
  6607                           plusw2	equ	0xFDB
  6608                           fsr2h	equ	0xFDA
  6609                           fsr2l	equ	0xFD9
  6610                           status	equ	0xFD8
  6611                           
  6612 ;; *************** function _check9 *****************
  6613 ;; Defined at:
  6614 ;;		line 86 in file "sensors.c"
  6615 ;; Parameters:    Size  Location     Type
  6616 ;;  sorted          2   58[COMRAM] PTR unsigned char 
  6617 ;;		 -> simulate@sorted(4), 
  6618 ;; Auto vars:     Size  Location     Type
  6619 ;;		None
  6620 ;; Return value:  Size  Location     Type
  6621 ;;                  2   58[COMRAM] int 
  6622 ;; Registers used:
  6623 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6624 ;; Tracked objects:
  6625 ;;		On entry : 0/0
  6626 ;;		On exit  : 0/0
  6627 ;;		Unchanged: 0/0
  6628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6629 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6632 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6633 ;;Total ram usage:        2 bytes
  6634 ;; Hardware stack levels used:    1
  6635 ;; Hardware stack levels required when called:    3
  6636 ;; This function calls:
  6637 ;;		_checkV
  6638 ;;		i2_printf
  6639 ;; This function is called by:
  6640 ;;		_simulate
  6641 ;; This function uses a non-reentrant model
  6642 ;;
  6643                           
  6644                           	psect	text33
  6645  001704                     __ptext33:
  6646                           	opt stack 0
  6647  001704                     _check9:
  6648                           	opt stack 21
  6649                           
  6650                           ;sensors.c: 89: printf("9V:");
  6651                           
  6652                           ;incstack = 0
  6653  001704  0EF2               	movlw	low STR_4
  6654  001706  6E0D               	movwf	i2printf@f,c
  6655  001708  0EFF               	movlw	high STR_4
  6656  00170A  6E0E               	movwf	i2printf@f+1,c
  6657  00170C  EC97  F003         	call	i2_printf	;wreg free
  6658                           
  6659                           ;sensors.c: 90: switch (checkV(5, 4)) {
  6660  001710  D032               	goto	i2l3782
  6661  001712                     i2l3754:
  6662                           
  6663                           ;sensors.c: 93: printf(" 1 ");
  6664  001712  0EE6               	movlw	low STR_39
  6665  001714  6E0D               	movwf	i2printf@f,c
  6666  001716  0EFF               	movlw	high STR_39
  6667  001718  6E0E               	movwf	i2printf@f+1,c
  6668  00171A  EC97  F003         	call	i2_printf	;wreg free
  6669                           
  6670                           ;sensors.c: 94: sorted[2]++;
  6671  00171E  EE20 F002          	lfsr	2,2
  6672  001722  503B               	movf	check9@sorted,w,c
  6673  001724  26D9               	addwf	fsr2l,f,c
  6674  001726  503C               	movf	check9@sorted+1,w,c
  6675  001728  22DA               	addwfc	fsr2h,f,c
  6676  00172A  2ADF               	incf	indf2,f,c
  6677                           
  6678                           ;sensors.c: 95: return 1;
  6679  00172C  0E00               	movlw	0
  6680  00172E  6E3C               	movwf	?_check9+1,c
  6681  001730  0E01               	movlw	1
  6682  001732  6E3B               	movwf	?_check9,c
  6683  001734  0012               	return	
  6684  001736                     i2l3762:
  6685                           
  6686                           ;sensors.c: 98: printf(" 0 ");
  6687  001736  0EE2               	movlw	low STR_40
  6688  001738  6E0D               	movwf	i2printf@f,c
  6689  00173A  0EFF               	movlw	high STR_40
  6690  00173C  6E0E               	movwf	i2printf@f+1,c
  6691  00173E  EC97  F003         	call	i2_printf	;wreg free
  6692                           
  6693                           ;sensors.c: 99: sorted[3]++;
  6694  001742  EE20 F003          	lfsr	2,3
  6695  001746  503B               	movf	check9@sorted,w,c
  6696  001748  26D9               	addwf	fsr2l,f,c
  6697  00174A  503C               	movf	check9@sorted+1,w,c
  6698  00174C  22DA               	addwfc	fsr2h,f,c
  6699  00174E  2ADF               	incf	indf2,f,c
  6700                           
  6701                           ;sensors.c: 100: return 0;
  6702  001750  0E00               	movlw	0
  6703  001752  6E3C               	movwf	?_check9+1,c
  6704  001754  0E00               	movlw	0
  6705  001756  6E3B               	movwf	?_check9,c
  6706  001758  0012               	return	
  6707  00175A                     i2l3770:
  6708                           
  6709                           ;sensors.c: 103: printf("-1 ");
  6710  00175A  0EEA               	movlw	low STR_41
  6711  00175C  6E0D               	movwf	i2printf@f,c
  6712  00175E  0EFF               	movlw	high STR_41
  6713  001760  6E0E               	movwf	i2printf@f+1,c
  6714  001762  EC97  F003         	call	i2_printf	;wreg free
  6715                           
  6716                           ;sensors.c: 104: return -1;
  6717  001766  683B               	setf	?_check9,c
  6718  001768  683C               	setf	?_check9+1,c
  6719  00176A  0012               	return	
  6720  00176C                     i2l3776:
  6721                           
  6722                           ;sensors.c: 106: return 0;
  6723  00176C  0E00               	movlw	0
  6724  00176E  6E3C               	movwf	?_check9+1,c
  6725  001770  0E00               	movlw	0
  6726  001772  6E3B               	movwf	?_check9,c
  6727                           
  6728                           ;sensors.c: 107: }
  6729  001774  0012               	return	
  6730  001776                     i2l3782:
  6731  001776  0E00               	movlw	0
  6732  001778  6E31               	movwf	checkV@channel+1,c
  6733  00177A  0E05               	movlw	5
  6734  00177C  6E30               	movwf	checkV@channel,c
  6735  00177E  0E00               	movlw	0
  6736  001780  6E32               	movwf	checkV@max,c
  6737  001782  0E80               	movlw	128
  6738  001784  6E33               	movwf	checkV@max+1,c
  6739  001786  0E40               	movlw	64
  6740  001788  6E34               	movwf	checkV@max+2,c
  6741  00178A  ECBA  F007         	call	_checkV	;wreg free
  6742                           
  6743                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  6744                           ; Switch size 1, requested type "space"
  6745                           ; Number of cases is 2, Range of values is 0 to 255
  6746                           ; switch strategies available:
  6747                           ; Name         Instructions Cycles
  6748                           ; simple_byte            7     4 (average)
  6749                           ;	Chosen strategy is simple_byte
  6750  00178E  5031               	movf	?_checkV+1,w,c
  6751  001790  0A00               	xorlw	0	; case 0
  6752  001792  B4D8               	btfsc	status,2,c
  6753  001794  D004               	goto	i2l4524
  6754  001796  0AFF               	xorlw	255	; case 255
  6755  001798  B4D8               	btfsc	status,2,c
  6756  00179A  D009               	goto	i2l4526
  6757  00179C  D7E7               	goto	i2l3776
  6758  00179E                     i2l4524:
  6759                           
  6760                           ; Switch size 1, requested type "space"
  6761                           ; Number of cases is 2, Range of values is 0 to 1
  6762                           ; switch strategies available:
  6763                           ; Name         Instructions Cycles
  6764                           ; simple_byte            7     4 (average)
  6765                           ;	Chosen strategy is simple_byte
  6766  00179E  5030               	movf	?_checkV,w,c
  6767  0017A0  0A00               	xorlw	0	; case 0
  6768  0017A2  B4D8               	btfsc	status,2,c
  6769  0017A4  D7DA               	goto	i2l3770
  6770  0017A6  0A01               	xorlw	1	; case 1
  6771  0017A8  B4D8               	btfsc	status,2,c
  6772  0017AA  D7B3               	goto	i2l3754
  6773  0017AC  D7DF               	goto	i2l3776
  6774  0017AE                     i2l4526:
  6775                           
  6776                           ; Switch size 1, requested type "space"
  6777                           ; Number of cases is 1, Range of values is 255 to 255
  6778                           ; switch strategies available:
  6779                           ; Name         Instructions Cycles
  6780                           ; simple_byte            4     3 (average)
  6781                           ;	Chosen strategy is simple_byte
  6782  0017AE  5030               	movf	?_checkV,w,c
  6783  0017B0  0AFF               	xorlw	255	; case 255
  6784  0017B2  B4D8               	btfsc	status,2,c
  6785  0017B4  D7C0               	goto	i2l3762
  6786  0017B6  D7DA               	goto	i2l3776
  6787  0017B8                     __end_of_check9:
  6788                           	opt stack 0
  6789                           pclatu	equ	0xFFB
  6790                           pclath	equ	0xFFA
  6791                           tblptru	equ	0xFF8
  6792                           tblptrh	equ	0xFF7
  6793                           tblptrl	equ	0xFF6
  6794                           tablat	equ	0xFF5
  6795                           prodh	equ	0xFF4
  6796                           prodl	equ	0xFF3
  6797                           intcon	equ	0xFF2
  6798                           intcon3	equ	0xFF0
  6799                           postinc0	equ	0xFEE
  6800                           fsr0h	equ	0xFEA
  6801                           fsr0l	equ	0xFE9
  6802                           wreg	equ	0xFE8
  6803                           plusw1	equ	0xFE3
  6804                           fsr1h	equ	0xFE2
  6805                           fsr1l	equ	0xFE1
  6806                           indf2	equ	0xFDF
  6807                           postinc2	equ	0xFDE
  6808                           postdec2	equ	0xFDD
  6809                           plusw2	equ	0xFDB
  6810                           fsr2h	equ	0xFDA
  6811                           fsr2l	equ	0xFD9
  6812                           status	equ	0xFD8
  6813                           
  6814 ;; *************** function _checkV *****************
  6815 ;; Defined at:
  6816 ;;		line 20 in file "sensors.c"
  6817 ;; Parameters:    Size  Location     Type
  6818 ;;  channel         2   47[COMRAM] int 
  6819 ;;  max             3   49[COMRAM] float 
  6820 ;; Auto vars:     Size  Location     Type
  6821 ;;  voltage         2   56[COMRAM] int 
  6822 ;;  voltage3        2   54[COMRAM] int 
  6823 ;;  voltage2        2   52[COMRAM] int 
  6824 ;; Return value:  Size  Location     Type
  6825 ;;                  2   47[COMRAM] int 
  6826 ;; Registers used:
  6827 ;;		wreg, status,2, status,0, cstack
  6828 ;; Tracked objects:
  6829 ;;		On entry : 0/0
  6830 ;;		On exit  : 0/0
  6831 ;;		Unchanged: 0/0
  6832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6833 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6834 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6836 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6837 ;;Total ram usage:       11 bytes
  6838 ;; Hardware stack levels used:    1
  6839 ;; Hardware stack levels required when called:    2
  6840 ;; This function calls:
  6841 ;;		_AD
  6842 ;;		___awtoft
  6843 ;;		___ftdiv
  6844 ;;		___ftge
  6845 ;;		___ftmul
  6846 ;;		_fluctuate
  6847 ;; This function is called by:
  6848 ;;		_checkAA
  6849 ;;		_checkC
  6850 ;;		_check9
  6851 ;; This function uses a non-reentrant model
  6852 ;;
  6853                           
  6854                           	psect	text34
  6855  000F74                     __ptext34:
  6856                           	opt stack 0
  6857  000F74                     _checkV:
  6858                           	opt stack 21
  6859                           
  6860                           ;sensors.c: 24: int voltage = AD(channel);
  6861                           
  6862                           ;incstack = 0
  6863  000F74  5030               	movf	checkV@channel,w,c
  6864  000F76  EC72  F010         	call	_AD
  6865  000F7A  C001  F039         	movff	?_AD,checkV@voltage
  6866  000F7E  C002  F03A         	movff	?_AD+1,checkV@voltage+1
  6867                           
  6868                           ;sensors.c: 25: int voltage2 = AD(channel);
  6869  000F82  5030               	movf	checkV@channel,w,c
  6870  000F84  EC72  F010         	call	_AD
  6871  000F88  C001  F035         	movff	?_AD,checkV@voltage2
  6872  000F8C  C002  F036         	movff	?_AD+1,checkV@voltage2+1
  6873                           
  6874                           ;sensors.c: 26: int voltage3 = AD(channel);
  6875  000F90  5030               	movf	checkV@channel,w,c
  6876  000F92  EC72  F010         	call	_AD
  6877  000F96  C001  F037         	movff	?_AD,checkV@voltage3
  6878  000F9A  C002  F038         	movff	?_AD+1,checkV@voltage3+1
  6879                           
  6880                           ;sensors.c: 27: if (voltage > 800 || voltage2 > 800 || voltage3 > 800)return 0;
  6881  000F9E  BE3A               	btfsc	checkV@voltage+1,7,c
  6882  000FA0  D006               	goto	i2l3280
  6883  000FA2  0E21               	movlw	33
  6884  000FA4  5C39               	subwf	checkV@voltage,w,c
  6885  000FA6  0E03               	movlw	3
  6886  000FA8  583A               	subwfb	checkV@voltage+1,w,c
  6887  000FAA  B0D8               	btfsc	status,0,c
  6888  000FAC  D010               	goto	i2l3284
  6889  000FAE                     i2l3280:
  6890  000FAE  BE36               	btfsc	checkV@voltage2+1,7,c
  6891  000FB0  D006               	goto	i2l3282
  6892  000FB2  0E21               	movlw	33
  6893  000FB4  5C35               	subwf	checkV@voltage2,w,c
  6894  000FB6  0E03               	movlw	3
  6895  000FB8  5836               	subwfb	checkV@voltage2+1,w,c
  6896  000FBA  B0D8               	btfsc	status,0,c
  6897  000FBC  D008               	goto	i2l3284
  6898  000FBE                     i2l3282:
  6899  000FBE  BE38               	btfsc	checkV@voltage3+1,7,c
  6900  000FC0  D00B               	goto	i2l3288
  6901  000FC2  0E21               	movlw	33
  6902  000FC4  5C37               	subwf	checkV@voltage3,w,c
  6903  000FC6  0E03               	movlw	3
  6904  000FC8  5838               	subwfb	checkV@voltage3+1,w,c
  6905  000FCA  A0D8               	btfss	status,0,c
  6906  000FCC  D005               	goto	i2l3288
  6907  000FCE                     i2l3284:
  6908  000FCE  0E00               	movlw	0
  6909  000FD0  6E31               	movwf	?_checkV+1,c
  6910  000FD2  0E00               	movlw	0
  6911  000FD4  6E30               	movwf	?_checkV,c
  6912  000FD6  0012               	return	
  6913  000FD8                     i2l3288:
  6914                           
  6915                           ;sensors.c: 28: if (fluctuate(voltage, voltage2) || fluctuate(voltage2, voltage3) || flu
      +                          ctuate(voltage, voltage3))return 0;
  6916  000FD8  C039  F001         	movff	checkV@voltage,fluctuate@a
  6917  000FDC  C03A  F002         	movff	checkV@voltage+1,fluctuate@a+1
  6918  000FE0  C035  F003         	movff	checkV@voltage2,fluctuate@b
  6919  000FE4  C036  F004         	movff	checkV@voltage2+1,fluctuate@b+1
  6920  000FE8  EC3C  F00F         	call	_fluctuate	;wreg free
  6921  000FEC  0900               	iorlw	0
  6922  000FEE  A4D8               	btfss	status,2,c
  6923  000FF0  D01A               	goto	i2l3294
  6924  000FF2  C035  F001         	movff	checkV@voltage2,fluctuate@a
  6925  000FF6  C036  F002         	movff	checkV@voltage2+1,fluctuate@a+1
  6926  000FFA  C037  F003         	movff	checkV@voltage3,fluctuate@b
  6927  000FFE  C038  F004         	movff	checkV@voltage3+1,fluctuate@b+1
  6928  001002  EC3C  F00F         	call	_fluctuate	;wreg free
  6929  001006  0900               	iorlw	0
  6930  001008  A4D8               	btfss	status,2,c
  6931  00100A  D00D               	goto	i2l3294
  6932  00100C  C039  F001         	movff	checkV@voltage,fluctuate@a
  6933  001010  C03A  F002         	movff	checkV@voltage+1,fluctuate@a+1
  6934  001014  C037  F003         	movff	checkV@voltage3,fluctuate@b
  6935  001018  C038  F004         	movff	checkV@voltage3+1,fluctuate@b+1
  6936  00101C  EC3C  F00F         	call	_fluctuate	;wreg free
  6937  001020  0900               	iorlw	0
  6938  001022  B4D8               	btfsc	status,2,c
  6939  001024  D005               	goto	i2l3298
  6940  001026                     i2l3294:
  6941  001026  0E00               	movlw	0
  6942  001028  6E31               	movwf	?_checkV+1,c
  6943  00102A  0E00               	movlw	0
  6944  00102C  6E30               	movwf	?_checkV,c
  6945  00102E  0012               	return	
  6946  001030                     i2l3298:
  6947                           
  6948                           ;sensors.c: 29: if (voltage < 50) {
  6949  001030  BE3A               	btfsc	checkV@voltage+1,7,c
  6950  001032  D006               	goto	i2l3300
  6951  001034  503A               	movf	checkV@voltage+1,w,c
  6952  001036  E109               	bnz	i2l3306
  6953  001038  0E32               	movlw	50
  6954  00103A  5C39               	subwf	checkV@voltage,w,c
  6955  00103C  B0D8               	btfsc	status,0,c
  6956  00103E  D005               	goto	i2l3306
  6957  001040                     i2l3300:
  6958                           
  6959                           ;sensors.c: 30: return 0;
  6960  001040  0E00               	movlw	0
  6961  001042  6E31               	movwf	?_checkV+1,c
  6962  001044  0E00               	movlw	0
  6963  001046  6E30               	movwf	?_checkV,c
  6964                           
  6965                           ;sensors.c: 31: } else if (voltage > 0.85 * 1023 * max / 4.1) {
  6966  001048  0012               	return	
  6967  00104A                     i2l3306:
  6968  00104A  0E33               	movlw	51
  6969  00104C  6E1B               	movwf	___ftdiv@f2,c
  6970  00104E  0E83               	movlw	131
  6971  001050  6E1C               	movwf	___ftdiv@f2+1,c
  6972  001052  0E40               	movlw	64
  6973  001054  6E1D               	movwf	___ftdiv@f2+2,c
  6974  001056  0E63               	movlw	99
  6975  001058  6E0C               	movwf	___ftmul@f2,c
  6976  00105A  0E59               	movlw	89
  6977  00105C  6E0D               	movwf	___ftmul@f2+1,c
  6978  00105E  0E44               	movlw	68
  6979  001060  6E0E               	movwf	___ftmul@f2+2,c
  6980  001062  C032  F009         	movff	checkV@max,___ftmul@f1
  6981  001066  C033  F00A         	movff	checkV@max+1,___ftmul@f1+1
  6982  00106A  C034  F00B         	movff	checkV@max+2,___ftmul@f1+2
  6983  00106E  ECF8  F008         	call	___ftmul	;wreg free
  6984  001072  C009  F018         	movff	?___ftmul,___ftdiv@f1
  6985  001076  C00A  F019         	movff	?___ftmul+1,___ftdiv@f1+1
  6986  00107A  C00B  F01A         	movff	?___ftmul+2,___ftdiv@f1+2
  6987  00107E  ECEB  F009         	call	___ftdiv	;wreg free
  6988  001082  C018  F027         	movff	?___ftdiv,___ftge@ff1
  6989  001086  C019  F028         	movff	?___ftdiv+1,___ftge@ff1+1
  6990  00108A  C01A  F029         	movff	?___ftdiv+2,___ftge@ff1+2
  6991  00108E  C039  F009         	movff	checkV@voltage,___awtoft@c
  6992  001092  C03A  F00A         	movff	checkV@voltage+1,___awtoft@c+1
  6993  001096  EC0F  F010         	call	___awtoft	;wreg free
  6994  00109A  C009  F02A         	movff	?___awtoft,___ftge@ff2
  6995  00109E  C00A  F02B         	movff	?___awtoft+1,___ftge@ff2+1
  6996  0010A2  C00B  F02C         	movff	?___awtoft+2,___ftge@ff2+2
  6997  0010A6  EC8B  F00C         	call	___ftge	;wreg free
  6998  0010AA  B0D8               	btfsc	status,0,c
  6999  0010AC  D005               	goto	i2l312
  7000                           
  7001                           ;sensors.c: 32: return 1;
  7002  0010AE  0E00               	movlw	0
  7003  0010B0  6E31               	movwf	?_checkV+1,c
  7004  0010B2  0E01               	movlw	1
  7005  0010B4  6E30               	movwf	?_checkV,c
  7006                           
  7007                           ;sensors.c: 33: } else {
  7008  0010B6  0012               	return	
  7009  0010B8                     i2l312:
  7010                           
  7011                           ;sensors.c: 34: return -1;
  7012  0010B8  6830               	setf	?_checkV,c
  7013  0010BA  6831               	setf	?_checkV+1,c
  7014  0010BC  0012               	return	
  7015  0010BE                     __end_of_checkV:
  7016                           	opt stack 0
  7017                           pclatu	equ	0xFFB
  7018                           pclath	equ	0xFFA
  7019                           tblptru	equ	0xFF8
  7020                           tblptrh	equ	0xFF7
  7021                           tblptrl	equ	0xFF6
  7022                           tablat	equ	0xFF5
  7023                           prodh	equ	0xFF4
  7024                           prodl	equ	0xFF3
  7025                           intcon	equ	0xFF2
  7026                           intcon3	equ	0xFF0
  7027                           postinc0	equ	0xFEE
  7028                           fsr0h	equ	0xFEA
  7029                           fsr0l	equ	0xFE9
  7030                           wreg	equ	0xFE8
  7031                           plusw1	equ	0xFE3
  7032                           fsr1h	equ	0xFE2
  7033                           fsr1l	equ	0xFE1
  7034                           indf2	equ	0xFDF
  7035                           postinc2	equ	0xFDE
  7036                           postdec2	equ	0xFDD
  7037                           plusw2	equ	0xFDB
  7038                           fsr2h	equ	0xFDA
  7039                           fsr2l	equ	0xFD9
  7040                           status	equ	0xFD8
  7041                           
  7042 ;; *************** function _fluctuate *****************
  7043 ;; Defined at:
  7044 ;;		line 13 in file "sensors.c"
  7045 ;; Parameters:    Size  Location     Type
  7046 ;;  a               2    0[COMRAM] int 
  7047 ;;  b               2    2[COMRAM] int 
  7048 ;; Auto vars:     Size  Location     Type
  7049 ;;  i               2    6[COMRAM] int 
  7050 ;; Return value:  Size  Location     Type
  7051 ;;                  1    wreg      unsigned char 
  7052 ;; Registers used:
  7053 ;;		wreg, status,2, status,0
  7054 ;; Tracked objects:
  7055 ;;		On entry : 0/0
  7056 ;;		On exit  : 0/0
  7057 ;;		Unchanged: 0/0
  7058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7059 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7060 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7061 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7062 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7063 ;;Total ram usage:        8 bytes
  7064 ;; Hardware stack levels used:    1
  7065 ;; This function calls:
  7066 ;;		Nothing
  7067 ;; This function is called by:
  7068 ;;		_checkV
  7069 ;; This function uses a non-reentrant model
  7070 ;;
  7071                           
  7072                           	psect	text35
  7073  001E78                     __ptext35:
  7074                           	opt stack 0
  7075  001E78                     _fluctuate:
  7076                           	opt stack 22
  7077                           
  7078                           ;sensors.c: 15: int i = a - b;
  7079                           
  7080                           ;incstack = 0
  7081  001E78  C003  F005         	movff	fluctuate@b,??_fluctuate
  7082  001E7C  C004  F006         	movff	fluctuate@b+1,??_fluctuate+1
  7083  001E80  1E05               	comf	??_fluctuate,f,c
  7084  001E82  1E06               	comf	??_fluctuate+1,f,c
  7085  001E84  4A05               	infsnz	??_fluctuate,f,c
  7086  001E86  2A06               	incf	??_fluctuate+1,f,c
  7087  001E88  5001               	movf	fluctuate@a,w,c
  7088  001E8A  2405               	addwf	??_fluctuate,w,c
  7089  001E8C  6E07               	movwf	fluctuate@i,c
  7090  001E8E  5002               	movf	fluctuate@a+1,w,c
  7091  001E90  2006               	addwfc	??_fluctuate+1,w,c
  7092  001E92  6E08               	movwf	fluctuate@i+1,c
  7093                           
  7094                           ;sensors.c: 16: if (a < b)i = -i;
  7095  001E94  5003               	movf	fluctuate@b,w,c
  7096  001E96  5C01               	subwf	fluctuate@a,w,c
  7097  001E98  5002               	movf	fluctuate@a+1,w,c
  7098  001E9A  0A80               	xorlw	128
  7099  001E9C  6E05               	movwf	??_fluctuate& (0+255),c
  7100  001E9E  5004               	movf	fluctuate@b+1,w,c
  7101  001EA0  0A80               	xorlw	128
  7102  001EA2  5805               	subwfb	??_fluctuate& (0+255),w,c
  7103  001EA4  B0D8               	btfsc	status,0,c
  7104  001EA6  D004               	goto	i2l2950
  7105  001EA8  6C07               	negf	fluctuate@i,c
  7106  001EAA  1E08               	comf	fluctuate@i+1,f,c
  7107  001EAC  B0D8               	btfsc	status,0,c
  7108  001EAE  2A08               	incf	fluctuate@i+1,f,c
  7109  001EB0                     i2l2950:
  7110                           
  7111                           ;sensors.c: 17: return i > 200;
  7112  001EB0  BE08               	btfsc	fluctuate@i+1,7,c
  7113  001EB2  D008               	goto	i2u167_40
  7114  001EB4  5008               	movf	fluctuate@i+1,w,c
  7115  001EB6  E104               	bnz	i2u167_41
  7116  001EB8  0EC9               	movlw	201
  7117  001EBA  5C07               	subwf	fluctuate@i,w,c
  7118  001EBC  A0D8               	btfss	status,0,c
  7119  001EBE  D002               	goto	i2u167_40
  7120  001EC0                     i2u167_41:
  7121  001EC0  0E01               	movlw	1
  7122  001EC2  0012               	return	
  7123  001EC4                     i2u167_40:
  7124  001EC4  0E00               	movlw	0
  7125  001EC6  0012               	return	
  7126  001EC8                     __end_of_fluctuate:
  7127                           	opt stack 0
  7128                           pclatu	equ	0xFFB
  7129                           pclath	equ	0xFFA
  7130                           tblptru	equ	0xFF8
  7131                           tblptrh	equ	0xFF7
  7132                           tblptrl	equ	0xFF6
  7133                           tablat	equ	0xFF5
  7134                           prodh	equ	0xFF4
  7135                           prodl	equ	0xFF3
  7136                           intcon	equ	0xFF2
  7137                           intcon3	equ	0xFF0
  7138                           postinc0	equ	0xFEE
  7139                           fsr0h	equ	0xFEA
  7140                           fsr0l	equ	0xFE9
  7141                           wreg	equ	0xFE8
  7142                           plusw1	equ	0xFE3
  7143                           fsr1h	equ	0xFE2
  7144                           fsr1l	equ	0xFE1
  7145                           indf2	equ	0xFDF
  7146                           postinc2	equ	0xFDE
  7147                           postdec2	equ	0xFDD
  7148                           plusw2	equ	0xFDB
  7149                           fsr2h	equ	0xFDA
  7150                           fsr2l	equ	0xFD9
  7151                           status	equ	0xFD8
  7152                           
  7153 ;; *************** function ___ftmul *****************
  7154 ;; Defined at:
  7155 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  7156 ;; Parameters:    Size  Location     Type
  7157 ;;  f1              3    8[COMRAM] float 
  7158 ;;  f2              3   11[COMRAM] float 
  7159 ;; Auto vars:     Size  Location     Type
  7160 ;;  f3_as_produc    3   18[COMRAM] unsigned um
  7161 ;;  sign            1   22[COMRAM] unsigned char 
  7162 ;;  cntr            1   21[COMRAM] unsigned char 
  7163 ;;  exp             1   17[COMRAM] unsigned char 
  7164 ;; Return value:  Size  Location     Type
  7165 ;;                  3    8[COMRAM] float 
  7166 ;; Registers used:
  7167 ;;		wreg, status,2, status,0, cstack
  7168 ;; Tracked objects:
  7169 ;;		On entry : 0/0
  7170 ;;		On exit  : 0/0
  7171 ;;		Unchanged: 0/0
  7172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7173 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7174 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7175 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7176 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7177 ;;Total ram usage:       15 bytes
  7178 ;; Hardware stack levels used:    1
  7179 ;; Hardware stack levels required when called:    1
  7180 ;; This function calls:
  7181 ;;		___ftpack
  7182 ;; This function is called by:
  7183 ;;		_checkV
  7184 ;; This function uses a non-reentrant model
  7185 ;;
  7186                           
  7187                           	psect	text36
  7188  0011F0                     __ptext36:
  7189                           	opt stack 0
  7190  0011F0                     ___ftmul:
  7191                           	opt stack 21
  7192                           
  7193                           ;incstack = 0
  7194  0011F0  C00B  F00F         	movff	___ftmul@f1+2,??___ftmul
  7195  0011F4  6A10               	clrf	(??___ftmul+1)& (0+255),c
  7196  0011F6  6A11               	clrf	(??___ftmul+2)& (0+255),c
  7197  0011F8  340A               	rlcf	___ftmul@f1+1,w,c
  7198  0011FA  360F               	rlcf	??___ftmul& (0+255),f,c
  7199  0011FC  E301               	bnc	u176_41
  7200  0011FE  8010               	bsf	(??___ftmul+1)& (0+255),0,c
  7201  001200                     u176_41:
  7202  001200  500F               	movf	??___ftmul,w,c
  7203  001202  6E12               	movwf	___ftmul@exp,c
  7204  001204  5012               	movf	___ftmul@exp,w,c
  7205  001206  A4D8               	btfss	status,2,c
  7206  001208  D007               	goto	i2l3010
  7207  00120A  0E00               	movlw	0
  7208  00120C  6E09               	movwf	?___ftmul,c
  7209  00120E  0E00               	movlw	0
  7210  001210  6E0A               	movwf	?___ftmul+1,c
  7211  001212  0E00               	movlw	0
  7212  001214  6E0B               	movwf	?___ftmul+2,c
  7213  001216  0012               	return	
  7214  001218                     i2l3010:
  7215  001218  C00E  F00F         	movff	___ftmul@f2+2,??___ftmul
  7216  00121C  6A10               	clrf	(??___ftmul+1)& (0+255),c
  7217  00121E  6A11               	clrf	(??___ftmul+2)& (0+255),c
  7218  001220  340D               	rlcf	___ftmul@f2+1,w,c
  7219  001222  360F               	rlcf	??___ftmul& (0+255),f,c
  7220  001224  E301               	bnc	u178_41
  7221  001226  8010               	bsf	(??___ftmul+1)& (0+255),0,c
  7222  001228                     u178_41:
  7223  001228  500F               	movf	??___ftmul,w,c
  7224  00122A  6E17               	movwf	___ftmul@sign,c
  7225  00122C  5017               	movf	___ftmul@sign,w,c
  7226  00122E  A4D8               	btfss	status,2,c
  7227  001230  D007               	goto	i2l3016
  7228  001232  0E00               	movlw	0
  7229  001234  6E09               	movwf	?___ftmul,c
  7230  001236  0E00               	movlw	0
  7231  001238  6E0A               	movwf	?___ftmul+1,c
  7232  00123A  0E00               	movlw	0
  7233  00123C  6E0B               	movwf	?___ftmul+2,c
  7234  00123E  0012               	return	
  7235  001240                     i2l3016:
  7236  001240  5017               	movf	___ftmul@sign,w,c
  7237  001242  0F7B               	addlw	123
  7238  001244  2612               	addwf	___ftmul@exp,f,c
  7239  001246  C00B  F017         	movff	___ftmul@f1+2,___ftmul@sign
  7240  00124A  500E               	movf	___ftmul@f2+2,w,c
  7241  00124C  1A17               	xorwf	___ftmul@sign,f,c
  7242  00124E  0E80               	movlw	128
  7243  001250  1617               	andwf	___ftmul@sign,f,c
  7244  001252  8E0A               	bsf	___ftmul@f1+1,7,c
  7245  001254  8E0D               	bsf	___ftmul@f2+1,7,c
  7246  001256  0EFF               	movlw	255
  7247  001258  160C               	andwf	___ftmul@f2,f,c
  7248  00125A  0EFF               	movlw	255
  7249  00125C  160D               	andwf	___ftmul@f2+1,f,c
  7250  00125E  0E00               	movlw	0
  7251  001260  160E               	andwf	___ftmul@f2+2,f,c
  7252  001262  0E00               	movlw	0
  7253  001264  6E13               	movwf	___ftmul@f3_as_product,c
  7254  001266  0E00               	movlw	0
  7255  001268  6E14               	movwf	___ftmul@f3_as_product+1,c
  7256  00126A  0E00               	movlw	0
  7257  00126C  6E15               	movwf	___ftmul@f3_as_product+2,c
  7258  00126E  0E07               	movlw	7
  7259  001270  6E16               	movwf	___ftmul@cntr,c
  7260  001272                     i2l3030:
  7261  001272  A009               	btfss	___ftmul@f1,0,c
  7262  001274  D006               	goto	i2l3034
  7263  001276  500C               	movf	___ftmul@f2,w,c
  7264  001278  2613               	addwf	___ftmul@f3_as_product,f,c
  7265  00127A  500D               	movf	___ftmul@f2+1,w,c
  7266  00127C  2214               	addwfc	___ftmul@f3_as_product+1,f,c
  7267  00127E  500E               	movf	___ftmul@f2+2,w,c
  7268  001280  2215               	addwfc	___ftmul@f3_as_product+2,f,c
  7269  001282                     i2l3034:
  7270  001282  90D8               	bcf	status,0,c
  7271  001284  320B               	rrcf	___ftmul@f1+2,f,c
  7272  001286  320A               	rrcf	___ftmul@f1+1,f,c
  7273  001288  3209               	rrcf	___ftmul@f1,f,c
  7274  00128A  90D8               	bcf	status,0,c
  7275  00128C  360C               	rlcf	___ftmul@f2,f,c
  7276  00128E  360D               	rlcf	___ftmul@f2+1,f,c
  7277  001290  360E               	rlcf	___ftmul@f2+2,f,c
  7278  001292  2E16               	decfsz	___ftmul@cntr,f,c
  7279  001294  D7EE               	goto	i2l3030
  7280  001296  0E09               	movlw	9
  7281  001298  6E16               	movwf	___ftmul@cntr,c
  7282  00129A                     i2l3040:
  7283  00129A  A009               	btfss	___ftmul@f1,0,c
  7284  00129C  D006               	goto	i2l3044
  7285  00129E  500C               	movf	___ftmul@f2,w,c
  7286  0012A0  2613               	addwf	___ftmul@f3_as_product,f,c
  7287  0012A2  500D               	movf	___ftmul@f2+1,w,c
  7288  0012A4  2214               	addwfc	___ftmul@f3_as_product+1,f,c
  7289  0012A6  500E               	movf	___ftmul@f2+2,w,c
  7290  0012A8  2215               	addwfc	___ftmul@f3_as_product+2,f,c
  7291  0012AA                     i2l3044:
  7292  0012AA  90D8               	bcf	status,0,c
  7293  0012AC  320B               	rrcf	___ftmul@f1+2,f,c
  7294  0012AE  320A               	rrcf	___ftmul@f1+1,f,c
  7295  0012B0  3209               	rrcf	___ftmul@f1,f,c
  7296  0012B2  90D8               	bcf	status,0,c
  7297  0012B4  3215               	rrcf	___ftmul@f3_as_product+2,f,c
  7298  0012B6  3214               	rrcf	___ftmul@f3_as_product+1,f,c
  7299  0012B8  3213               	rrcf	___ftmul@f3_as_product,f,c
  7300  0012BA  2E16               	decfsz	___ftmul@cntr,f,c
  7301  0012BC  D7EE               	goto	i2l3040
  7302  0012BE  C013  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  7303  0012C2  C014  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  7304  0012C6  C015  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  7305  0012CA  C012  F004         	movff	___ftmul@exp,___ftpack@exp
  7306  0012CE  C017  F005         	movff	___ftmul@sign,___ftpack@sign
  7307  0012D2  EC34  F00C         	call	___ftpack	;wreg free
  7308  0012D6  C001  F009         	movff	?___ftpack,?___ftmul
  7309  0012DA  C002  F00A         	movff	?___ftpack+1,?___ftmul+1
  7310  0012DE  C003  F00B         	movff	?___ftpack+2,?___ftmul+2
  7311  0012E2  0012               	return	
  7312  0012E4                     __end_of___ftmul:
  7313                           	opt stack 0
  7314                           pclatu	equ	0xFFB
  7315                           pclath	equ	0xFFA
  7316                           tblptru	equ	0xFF8
  7317                           tblptrh	equ	0xFF7
  7318                           tblptrl	equ	0xFF6
  7319                           tablat	equ	0xFF5
  7320                           prodh	equ	0xFF4
  7321                           prodl	equ	0xFF3
  7322                           intcon	equ	0xFF2
  7323                           intcon3	equ	0xFF0
  7324                           postinc0	equ	0xFEE
  7325                           fsr0h	equ	0xFEA
  7326                           fsr0l	equ	0xFE9
  7327                           wreg	equ	0xFE8
  7328                           plusw1	equ	0xFE3
  7329                           fsr1h	equ	0xFE2
  7330                           fsr1l	equ	0xFE1
  7331                           indf2	equ	0xFDF
  7332                           postinc2	equ	0xFDE
  7333                           postdec2	equ	0xFDD
  7334                           plusw2	equ	0xFDB
  7335                           fsr2h	equ	0xFDA
  7336                           fsr2l	equ	0xFD9
  7337                           status	equ	0xFD8
  7338                           
  7339 ;; *************** function ___ftge *****************
  7340 ;; Defined at:
  7341 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
  7342 ;; Parameters:    Size  Location     Type
  7343 ;;  ff1             3   38[COMRAM] float 
  7344 ;;  ff2             3   41[COMRAM] float 
  7345 ;; Auto vars:     Size  Location     Type
  7346 ;;		None
  7347 ;; Return value:  Size  Location     Type
  7348 ;;		None               void
  7349 ;; Registers used:
  7350 ;;		wreg, status,2, status,0
  7351 ;; Tracked objects:
  7352 ;;		On entry : 0/0
  7353 ;;		On exit  : 0/0
  7354 ;;		Unchanged: 0/0
  7355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7356 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7358 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7359 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7360 ;;Total ram usage:        9 bytes
  7361 ;; Hardware stack levels used:    1
  7362 ;; This function calls:
  7363 ;;		Nothing
  7364 ;; This function is called by:
  7365 ;;		_checkV
  7366 ;; This function uses a non-reentrant model
  7367 ;;
  7368                           
  7369                           	psect	text37
  7370  001916                     __ptext37:
  7371                           	opt stack 0
  7372  001916                     ___ftge:
  7373                           	opt stack 22
  7374                           
  7375                           ;incstack = 0
  7376  001916  AE29               	btfss	___ftge@ff1+2,7,c
  7377  001918  D016               	goto	i2l3112
  7378  00191A  C027  F02D         	movff	___ftge@ff1,??___ftge
  7379  00191E  C028  F02E         	movff	___ftge@ff1+1,??___ftge+1
  7380  001922  C029  F02F         	movff	___ftge@ff1+2,??___ftge+2
  7381  001926  1E2D               	comf	??___ftge,f,c
  7382  001928  1E2E               	comf	??___ftge+1,f,c
  7383  00192A  1E2F               	comf	??___ftge+2,f,c
  7384  00192C  2A2D               	incf	??___ftge,f,c
  7385  00192E  0E00               	movlw	0
  7386  001930  222E               	addwfc	??___ftge+1,f,c
  7387  001932  222F               	addwfc	??___ftge+2,f,c
  7388  001934  0E00               	movlw	0
  7389  001936  242D               	addwf	??___ftge,w,c
  7390  001938  6E27               	movwf	___ftge@ff1,c
  7391  00193A  0E00               	movlw	0
  7392  00193C  202E               	addwfc	??___ftge+1,w,c
  7393  00193E  6E28               	movwf	___ftge@ff1+1,c
  7394  001940  0E80               	movlw	128
  7395  001942  202F               	addwfc	??___ftge+2,w,c
  7396  001944  6E29               	movwf	___ftge@ff1+2,c
  7397  001946                     i2l3112:
  7398  001946  AE2C               	btfss	___ftge@ff2+2,7,c
  7399  001948  D016               	goto	i2l3116
  7400  00194A  C02A  F02D         	movff	___ftge@ff2,??___ftge
  7401  00194E  C02B  F02E         	movff	___ftge@ff2+1,??___ftge+1
  7402  001952  C02C  F02F         	movff	___ftge@ff2+2,??___ftge+2
  7403  001956  1E2D               	comf	??___ftge,f,c
  7404  001958  1E2E               	comf	??___ftge+1,f,c
  7405  00195A  1E2F               	comf	??___ftge+2,f,c
  7406  00195C  2A2D               	incf	??___ftge,f,c
  7407  00195E  0E00               	movlw	0
  7408  001960  222E               	addwfc	??___ftge+1,f,c
  7409  001962  222F               	addwfc	??___ftge+2,f,c
  7410  001964  0E00               	movlw	0
  7411  001966  242D               	addwf	??___ftge,w,c
  7412  001968  6E2A               	movwf	___ftge@ff2,c
  7413  00196A  0E00               	movlw	0
  7414  00196C  202E               	addwfc	??___ftge+1,w,c
  7415  00196E  6E2B               	movwf	___ftge@ff2+1,c
  7416  001970  0E80               	movlw	128
  7417  001972  202F               	addwfc	??___ftge+2,w,c
  7418  001974  6E2C               	movwf	___ftge@ff2+2,c
  7419  001976                     i2l3116:
  7420  001976  0E00               	movlw	0
  7421  001978  1A27               	xorwf	___ftge@ff1,f,c
  7422  00197A  0E00               	movlw	0
  7423  00197C  1A28               	xorwf	___ftge@ff1+1,f,c
  7424  00197E  0E80               	movlw	128
  7425  001980  1A29               	xorwf	___ftge@ff1+2,f,c
  7426  001982  0E00               	movlw	0
  7427  001984  1A2A               	xorwf	___ftge@ff2,f,c
  7428  001986  0E00               	movlw	0
  7429  001988  1A2B               	xorwf	___ftge@ff2+1,f,c
  7430  00198A  0E80               	movlw	128
  7431  00198C  1A2C               	xorwf	___ftge@ff2+2,f,c
  7432  00198E  502A               	movf	___ftge@ff2,w,c
  7433  001990  5C27               	subwf	___ftge@ff1,w,c
  7434  001992  502B               	movf	___ftge@ff2+1,w,c
  7435  001994  5828               	subwfb	___ftge@ff1+1,w,c
  7436  001996  502C               	movf	___ftge@ff2+2,w,c
  7437  001998  5829               	subwfb	___ftge@ff1+2,w,c
  7438  00199A  B0D8               	btfsc	status,0,c
  7439  00199C  D002               	goto	i2l3122
  7440  00199E  90D8               	bcf	status,0,c
  7441  0019A0  0012               	return	
  7442  0019A2                     i2l3122:
  7443  0019A2  80D8               	bsf	status,0,c
  7444  0019A4  0012               	return	
  7445  0019A6                     __end_of___ftge:
  7446                           	opt stack 0
  7447                           pclatu	equ	0xFFB
  7448                           pclath	equ	0xFFA
  7449                           tblptru	equ	0xFF8
  7450                           tblptrh	equ	0xFF7
  7451                           tblptrl	equ	0xFF6
  7452                           tablat	equ	0xFF5
  7453                           prodh	equ	0xFF4
  7454                           prodl	equ	0xFF3
  7455                           intcon	equ	0xFF2
  7456                           intcon3	equ	0xFF0
  7457                           postinc0	equ	0xFEE
  7458                           fsr0h	equ	0xFEA
  7459                           fsr0l	equ	0xFE9
  7460                           wreg	equ	0xFE8
  7461                           plusw1	equ	0xFE3
  7462                           fsr1h	equ	0xFE2
  7463                           fsr1l	equ	0xFE1
  7464                           indf2	equ	0xFDF
  7465                           postinc2	equ	0xFDE
  7466                           postdec2	equ	0xFDD
  7467                           plusw2	equ	0xFDB
  7468                           fsr2h	equ	0xFDA
  7469                           fsr2l	equ	0xFD9
  7470                           status	equ	0xFD8
  7471                           
  7472 ;; *************** function ___ftdiv *****************
  7473 ;; Defined at:
  7474 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdiv.c"
  7475 ;; Parameters:    Size  Location     Type
  7476 ;;  f1              3   23[COMRAM] float 
  7477 ;;  f2              3   26[COMRAM] float 
  7478 ;; Auto vars:     Size  Location     Type
  7479 ;;  f3              3   33[COMRAM] float 
  7480 ;;  sign            1   37[COMRAM] unsigned char 
  7481 ;;  exp             1   36[COMRAM] unsigned char 
  7482 ;;  cntr            1   32[COMRAM] unsigned char 
  7483 ;; Return value:  Size  Location     Type
  7484 ;;                  3   23[COMRAM] float 
  7485 ;; Registers used:
  7486 ;;		wreg, status,2, status,0, cstack
  7487 ;; Tracked objects:
  7488 ;;		On entry : 0/0
  7489 ;;		On exit  : 0/0
  7490 ;;		Unchanged: 0/0
  7491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7492 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7493 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7494 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7495 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7496 ;;Total ram usage:       15 bytes
  7497 ;; Hardware stack levels used:    1
  7498 ;; Hardware stack levels required when called:    1
  7499 ;; This function calls:
  7500 ;;		___ftpack
  7501 ;; This function is called by:
  7502 ;;		_checkV
  7503 ;; This function uses a non-reentrant model
  7504 ;;
  7505                           
  7506                           	psect	text38
  7507  0013D6                     __ptext38:
  7508                           	opt stack 0
  7509  0013D6                     ___ftdiv:
  7510                           	opt stack 21
  7511                           
  7512                           ;incstack = 0
  7513  0013D6  C01A  F01E         	movff	___ftdiv@f1+2,??___ftdiv
  7514  0013DA  6A1F               	clrf	(??___ftdiv+1)& (0+255),c
  7515  0013DC  6A20               	clrf	(??___ftdiv+2)& (0+255),c
  7516  0013DE  3419               	rlcf	___ftdiv@f1+1,w,c
  7517  0013E0  361E               	rlcf	??___ftdiv& (0+255),f,c
  7518  0013E2  E301               	bnc	u171_41
  7519  0013E4  801F               	bsf	(??___ftdiv+1)& (0+255),0,c
  7520  0013E6                     u171_41:
  7521  0013E6  501E               	movf	??___ftdiv,w,c
  7522  0013E8  6E25               	movwf	___ftdiv@exp,c
  7523  0013EA  5025               	movf	___ftdiv@exp,w,c
  7524  0013EC  A4D8               	btfss	status,2,c
  7525  0013EE  D007               	goto	i2l2964
  7526  0013F0  0E00               	movlw	0
  7527  0013F2  6E18               	movwf	?___ftdiv,c
  7528  0013F4  0E00               	movlw	0
  7529  0013F6  6E19               	movwf	?___ftdiv+1,c
  7530  0013F8  0E00               	movlw	0
  7531  0013FA  6E1A               	movwf	?___ftdiv+2,c
  7532  0013FC  0012               	return	
  7533  0013FE                     i2l2964:
  7534  0013FE  C01D  F01E         	movff	___ftdiv@f2+2,??___ftdiv
  7535  001402  6A1F               	clrf	(??___ftdiv+1)& (0+255),c
  7536  001404  6A20               	clrf	(??___ftdiv+2)& (0+255),c
  7537  001406  341C               	rlcf	___ftdiv@f2+1,w,c
  7538  001408  361E               	rlcf	??___ftdiv& (0+255),f,c
  7539  00140A  E301               	bnc	u173_41
  7540  00140C  801F               	bsf	(??___ftdiv+1)& (0+255),0,c
  7541  00140E                     u173_41:
  7542  00140E  501E               	movf	??___ftdiv,w,c
  7543  001410  6E26               	movwf	___ftdiv@sign,c
  7544  001412  5026               	movf	___ftdiv@sign,w,c
  7545  001414  A4D8               	btfss	status,2,c
  7546  001416  D007               	goto	i2l2970
  7547  001418  0E00               	movlw	0
  7548  00141A  6E18               	movwf	?___ftdiv,c
  7549  00141C  0E00               	movlw	0
  7550  00141E  6E19               	movwf	?___ftdiv+1,c
  7551  001420  0E00               	movlw	0
  7552  001422  6E1A               	movwf	?___ftdiv+2,c
  7553  001424  0012               	return	
  7554  001426                     i2l2970:
  7555  001426  0E00               	movlw	0
  7556  001428  6E22               	movwf	___ftdiv@f3,c
  7557  00142A  0E00               	movlw	0
  7558  00142C  6E23               	movwf	___ftdiv@f3+1,c
  7559  00142E  0E00               	movlw	0
  7560  001430  6E24               	movwf	___ftdiv@f3+2,c
  7561  001432  5026               	movf	___ftdiv@sign,w,c
  7562  001434  0F89               	addlw	137
  7563  001436  5E25               	subwf	___ftdiv@exp,f,c
  7564  001438  C01A  F026         	movff	___ftdiv@f1+2,___ftdiv@sign
  7565  00143C  501D               	movf	___ftdiv@f2+2,w,c
  7566  00143E  1A26               	xorwf	___ftdiv@sign,f,c
  7567  001440  0E80               	movlw	128
  7568  001442  1626               	andwf	___ftdiv@sign,f,c
  7569  001444  8E19               	bsf	___ftdiv@f1+1,7,c
  7570  001446  0EFF               	movlw	255
  7571  001448  1618               	andwf	___ftdiv@f1,f,c
  7572  00144A  0EFF               	movlw	255
  7573  00144C  1619               	andwf	___ftdiv@f1+1,f,c
  7574  00144E  0E00               	movlw	0
  7575  001450  161A               	andwf	___ftdiv@f1+2,f,c
  7576  001452  8E1C               	bsf	___ftdiv@f2+1,7,c
  7577  001454  0EFF               	movlw	255
  7578  001456  161B               	andwf	___ftdiv@f2,f,c
  7579  001458  0EFF               	movlw	255
  7580  00145A  161C               	andwf	___ftdiv@f2+1,f,c
  7581  00145C  0E00               	movlw	0
  7582  00145E  161D               	andwf	___ftdiv@f2+2,f,c
  7583  001460  0E18               	movlw	24
  7584  001462  6E21               	movwf	___ftdiv@cntr,c
  7585  001464                     i2l2990:
  7586  001464  90D8               	bcf	status,0,c
  7587  001466  3622               	rlcf	___ftdiv@f3,f,c
  7588  001468  3623               	rlcf	___ftdiv@f3+1,f,c
  7589  00146A  3624               	rlcf	___ftdiv@f3+2,f,c
  7590  00146C  501B               	movf	___ftdiv@f2,w,c
  7591  00146E  5C18               	subwf	___ftdiv@f1,w,c
  7592  001470  501C               	movf	___ftdiv@f2+1,w,c
  7593  001472  5819               	subwfb	___ftdiv@f1+1,w,c
  7594  001474  501D               	movf	___ftdiv@f2+2,w,c
  7595  001476  581A               	subwfb	___ftdiv@f1+2,w,c
  7596  001478  A0D8               	btfss	status,0,c
  7597  00147A  D007               	goto	i2l804
  7598  00147C  501B               	movf	___ftdiv@f2,w,c
  7599  00147E  5E18               	subwf	___ftdiv@f1,f,c
  7600  001480  501C               	movf	___ftdiv@f2+1,w,c
  7601  001482  5A19               	subwfb	___ftdiv@f1+1,f,c
  7602  001484  501D               	movf	___ftdiv@f2+2,w,c
  7603  001486  5A1A               	subwfb	___ftdiv@f1+2,f,c
  7604  001488  8022               	bsf	___ftdiv@f3,0,c
  7605  00148A                     i2l804:
  7606  00148A  90D8               	bcf	status,0,c
  7607  00148C  3618               	rlcf	___ftdiv@f1,f,c
  7608  00148E  3619               	rlcf	___ftdiv@f1+1,f,c
  7609  001490  361A               	rlcf	___ftdiv@f1+2,f,c
  7610  001492  2E21               	decfsz	___ftdiv@cntr,f,c
  7611  001494  D7E7               	goto	i2l2990
  7612  001496  C022  F001         	movff	___ftdiv@f3,___ftpack@arg
  7613  00149A  C023  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  7614  00149E  C024  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  7615  0014A2  C025  F004         	movff	___ftdiv@exp,___ftpack@exp
  7616  0014A6  C026  F005         	movff	___ftdiv@sign,___ftpack@sign
  7617  0014AA  EC34  F00C         	call	___ftpack	;wreg free
  7618  0014AE  C001  F018         	movff	?___ftpack,?___ftdiv
  7619  0014B2  C002  F019         	movff	?___ftpack+1,?___ftdiv+1
  7620  0014B6  C003  F01A         	movff	?___ftpack+2,?___ftdiv+2
  7621  0014BA  0012               	return	
  7622  0014BC                     __end_of___ftdiv:
  7623                           	opt stack 0
  7624                           pclatu	equ	0xFFB
  7625                           pclath	equ	0xFFA
  7626                           tblptru	equ	0xFF8
  7627                           tblptrh	equ	0xFF7
  7628                           tblptrl	equ	0xFF6
  7629                           tablat	equ	0xFF5
  7630                           prodh	equ	0xFF4
  7631                           prodl	equ	0xFF3
  7632                           intcon	equ	0xFF2
  7633                           intcon3	equ	0xFF0
  7634                           postinc0	equ	0xFEE
  7635                           fsr0h	equ	0xFEA
  7636                           fsr0l	equ	0xFE9
  7637                           wreg	equ	0xFE8
  7638                           plusw1	equ	0xFE3
  7639                           fsr1h	equ	0xFE2
  7640                           fsr1l	equ	0xFE1
  7641                           indf2	equ	0xFDF
  7642                           postinc2	equ	0xFDE
  7643                           postdec2	equ	0xFDD
  7644                           plusw2	equ	0xFDB
  7645                           fsr2h	equ	0xFDA
  7646                           fsr2l	equ	0xFD9
  7647                           status	equ	0xFD8
  7648                           
  7649 ;; *************** function ___awtoft *****************
  7650 ;; Defined at:
  7651 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awtoft.c"
  7652 ;; Parameters:    Size  Location     Type
  7653 ;;  c               2    8[COMRAM] int 
  7654 ;; Auto vars:     Size  Location     Type
  7655 ;;  sign            1   11[COMRAM] unsigned char 
  7656 ;; Return value:  Size  Location     Type
  7657 ;;                  3    8[COMRAM] float 
  7658 ;; Registers used:
  7659 ;;		wreg, status,2, status,0, cstack
  7660 ;; Tracked objects:
  7661 ;;		On entry : 0/0
  7662 ;;		On exit  : 0/0
  7663 ;;		Unchanged: 0/0
  7664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7665 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7666 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7668 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7669 ;;Total ram usage:        4 bytes
  7670 ;; Hardware stack levels used:    1
  7671 ;; Hardware stack levels required when called:    1
  7672 ;; This function calls:
  7673 ;;		___ftpack
  7674 ;; This function is called by:
  7675 ;;		_checkV
  7676 ;; This function uses a non-reentrant model
  7677 ;;
  7678                           
  7679                           	psect	text39
  7680  00201E                     __ptext39:
  7681                           	opt stack 0
  7682  00201E                     ___awtoft:
  7683                           	opt stack 21
  7684                           
  7685                           ;incstack = 0
  7686  00201E  0E00               	movlw	0
  7687  002020  6E0C               	movwf	___awtoft@sign,c
  7688  002022  AE0A               	btfss	___awtoft@c+1,7,c
  7689  002024  D006               	goto	i2l3104
  7690  002026  6C09               	negf	___awtoft@c,c
  7691  002028  1E0A               	comf	___awtoft@c+1,f,c
  7692  00202A  B0D8               	btfsc	status,0,c
  7693  00202C  2A0A               	incf	___awtoft@c+1,f,c
  7694  00202E  0E01               	movlw	1
  7695  002030  6E0C               	movwf	___awtoft@sign,c
  7696  002032                     i2l3104:
  7697  002032  C009  F001         	movff	___awtoft@c,___ftpack@arg
  7698  002036  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  7699  00203A  6A03               	clrf	___ftpack@arg+2,c
  7700  00203C  0E8E               	movlw	142
  7701  00203E  6E04               	movwf	___ftpack@exp,c
  7702  002040  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  7703  002044  EC34  F00C         	call	___ftpack	;wreg free
  7704  002048  C001  F009         	movff	?___ftpack,?___awtoft
  7705  00204C  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  7706  002050  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  7707  002054  0012               	return	
  7708  002056                     __end_of___awtoft:
  7709                           	opt stack 0
  7710                           pclatu	equ	0xFFB
  7711                           pclath	equ	0xFFA
  7712                           tblptru	equ	0xFF8
  7713                           tblptrh	equ	0xFF7
  7714                           tblptrl	equ	0xFF6
  7715                           tablat	equ	0xFF5
  7716                           prodh	equ	0xFF4
  7717                           prodl	equ	0xFF3
  7718                           intcon	equ	0xFF2
  7719                           intcon3	equ	0xFF0
  7720                           postinc0	equ	0xFEE
  7721                           fsr0h	equ	0xFEA
  7722                           fsr0l	equ	0xFE9
  7723                           wreg	equ	0xFE8
  7724                           plusw1	equ	0xFE3
  7725                           fsr1h	equ	0xFE2
  7726                           fsr1l	equ	0xFE1
  7727                           indf2	equ	0xFDF
  7728                           postinc2	equ	0xFDE
  7729                           postdec2	equ	0xFDD
  7730                           plusw2	equ	0xFDB
  7731                           fsr2h	equ	0xFDA
  7732                           fsr2l	equ	0xFD9
  7733                           status	equ	0xFD8
  7734                           
  7735 ;; *************** function ___ftpack *****************
  7736 ;; Defined at:
  7737 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  7738 ;; Parameters:    Size  Location     Type
  7739 ;;  arg             3    0[COMRAM] unsigned um
  7740 ;;  exp             1    3[COMRAM] unsigned char 
  7741 ;;  sign            1    4[COMRAM] unsigned char 
  7742 ;; Auto vars:     Size  Location     Type
  7743 ;;		None
  7744 ;; Return value:  Size  Location     Type
  7745 ;;                  3    0[COMRAM] float 
  7746 ;; Registers used:
  7747 ;;		wreg, status,2, status,0
  7748 ;; Tracked objects:
  7749 ;;		On entry : 0/0
  7750 ;;		On exit  : 0/0
  7751 ;;		Unchanged: 0/0
  7752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7753 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7755 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7756 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7757 ;;Total ram usage:        8 bytes
  7758 ;; Hardware stack levels used:    1
  7759 ;; This function calls:
  7760 ;;		Nothing
  7761 ;; This function is called by:
  7762 ;;		___awtoft
  7763 ;;		___ftdiv
  7764 ;;		___ftmul
  7765 ;; This function uses a non-reentrant model
  7766 ;;
  7767                           
  7768                           	psect	text40
  7769  001868                     __ptext40:
  7770                           	opt stack 0
  7771  001868                     ___ftpack:
  7772                           	opt stack 21
  7773                           
  7774                           ;incstack = 0
  7775  001868  5004               	movf	___ftpack@exp,w,c
  7776  00186A  B4D8               	btfsc	status,2,c
  7777  00186C  D005               	goto	i2l2868
  7778  00186E  5001               	movf	___ftpack@arg,w,c
  7779  001870  1002               	iorwf	___ftpack@arg+1,w,c
  7780  001872  1003               	iorwf	___ftpack@arg+2,w,c
  7781  001874  A4D8               	btfss	status,2,c
  7782  001876  D00C               	goto	i2l2874
  7783  001878                     i2l2868:
  7784  001878  0E00               	movlw	0
  7785  00187A  6E01               	movwf	?___ftpack,c
  7786  00187C  0E00               	movlw	0
  7787  00187E  6E02               	movwf	?___ftpack+1,c
  7788  001880  0E00               	movlw	0
  7789  001882  6E03               	movwf	?___ftpack+2,c
  7790  001884  0012               	return	
  7791  001886                     i2l2872:
  7792  001886  2A04               	incf	___ftpack@exp,f,c
  7793  001888  90D8               	bcf	status,0,c
  7794  00188A  3203               	rrcf	___ftpack@arg+2,f,c
  7795  00188C  3202               	rrcf	___ftpack@arg+1,f,c
  7796  00188E  3201               	rrcf	___ftpack@arg,f,c
  7797  001890                     i2l2874:
  7798  001890  0E00               	movlw	0
  7799  001892  1401               	andwf	___ftpack@arg,w,c
  7800  001894  6E06               	movwf	??___ftpack& (0+255),c
  7801  001896  0E00               	movlw	0
  7802  001898  1402               	andwf	___ftpack@arg+1,w,c
  7803  00189A  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7804  00189C  0EFE               	movlw	254
  7805  00189E  1403               	andwf	___ftpack@arg+2,w,c
  7806  0018A0  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7807  0018A2  5006               	movf	??___ftpack,w,c
  7808  0018A4  1007               	iorwf	??___ftpack+1,w,c
  7809  0018A6  1008               	iorwf	??___ftpack+2,w,c
  7810  0018A8  B4D8               	btfsc	status,2,c
  7811  0018AA  D00C               	goto	i2l2880
  7812  0018AC  D7EC               	goto	i2l2872
  7813  0018AE                     i2l2876:
  7814  0018AE  2A04               	incf	___ftpack@exp,f,c
  7815  0018B0  0E01               	movlw	1
  7816  0018B2  2601               	addwf	___ftpack@arg,f,c
  7817  0018B4  0E00               	movlw	0
  7818  0018B6  2202               	addwfc	___ftpack@arg+1,f,c
  7819  0018B8  0E00               	movlw	0
  7820  0018BA  2203               	addwfc	___ftpack@arg+2,f,c
  7821  0018BC  90D8               	bcf	status,0,c
  7822  0018BE  3203               	rrcf	___ftpack@arg+2,f,c
  7823  0018C0  3202               	rrcf	___ftpack@arg+1,f,c
  7824  0018C2  3201               	rrcf	___ftpack@arg,f,c
  7825  0018C4                     i2l2880:
  7826  0018C4  0E00               	movlw	0
  7827  0018C6  1401               	andwf	___ftpack@arg,w,c
  7828  0018C8  6E06               	movwf	??___ftpack& (0+255),c
  7829  0018CA  0E00               	movlw	0
  7830  0018CC  1402               	andwf	___ftpack@arg+1,w,c
  7831  0018CE  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7832  0018D0  0EFF               	movlw	255
  7833  0018D2  1403               	andwf	___ftpack@arg+2,w,c
  7834  0018D4  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7835  0018D6  5006               	movf	??___ftpack,w,c
  7836  0018D8  1007               	iorwf	??___ftpack+1,w,c
  7837  0018DA  1008               	iorwf	??___ftpack+2,w,c
  7838  0018DC  B4D8               	btfsc	status,2,c
  7839  0018DE  D006               	goto	i2l2884
  7840  0018E0  D7E6               	goto	i2l2876
  7841  0018E2                     i2l2882:
  7842  0018E2  0604               	decf	___ftpack@exp,f,c
  7843  0018E4  90D8               	bcf	status,0,c
  7844  0018E6  3601               	rlcf	___ftpack@arg,f,c
  7845  0018E8  3602               	rlcf	___ftpack@arg+1,f,c
  7846  0018EA  3603               	rlcf	___ftpack@arg+2,f,c
  7847  0018EC                     i2l2884:
  7848  0018EC  BE02               	btfsc	___ftpack@arg+1,7,c
  7849  0018EE  D003               	goto	i2l746
  7850  0018F0  0E02               	movlw	2
  7851  0018F2  6004               	cpfslt	___ftpack@exp,c
  7852  0018F4  D7F6               	goto	i2l2882
  7853  0018F6                     i2l746:
  7854  0018F6  A004               	btfss	___ftpack@exp,0,c
  7855  0018F8  9E02               	bcf	___ftpack@arg+1,7,c
  7856  0018FA  90D8               	bcf	status,0,c
  7857  0018FC  3204               	rrcf	___ftpack@exp,f,c
  7858  0018FE  5004               	movf	___ftpack@exp,w,c
  7859  001900  1203               	iorwf	___ftpack@arg+2,f,c
  7860  001902  5005               	movf	___ftpack@sign,w,c
  7861  001904  A4D8               	btfss	status,2,c
  7862  001906  8E03               	bsf	___ftpack@arg+2,7,c
  7863  001908  C001  F001         	movff	___ftpack@arg,?___ftpack
  7864  00190C  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  7865  001910  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  7866  001914  0012               	return	
  7867  001916                     __end_of___ftpack:
  7868                           	opt stack 0
  7869                           pclatu	equ	0xFFB
  7870                           pclath	equ	0xFFA
  7871                           tblptru	equ	0xFF8
  7872                           tblptrh	equ	0xFF7
  7873                           tblptrl	equ	0xFF6
  7874                           tablat	equ	0xFF5
  7875                           prodh	equ	0xFF4
  7876                           prodl	equ	0xFF3
  7877                           intcon	equ	0xFF2
  7878                           intcon3	equ	0xFF0
  7879                           postinc0	equ	0xFEE
  7880                           fsr0h	equ	0xFEA
  7881                           fsr0l	equ	0xFE9
  7882                           wreg	equ	0xFE8
  7883                           plusw1	equ	0xFE3
  7884                           fsr1h	equ	0xFE2
  7885                           fsr1l	equ	0xFE1
  7886                           indf2	equ	0xFDF
  7887                           postinc2	equ	0xFDE
  7888                           postdec2	equ	0xFDD
  7889                           plusw2	equ	0xFDB
  7890                           fsr2h	equ	0xFDA
  7891                           fsr2l	equ	0xFD9
  7892                           status	equ	0xFD8
  7893                           
  7894 ;; *************** function _AD *****************
  7895 ;; Defined at:
  7896 ;;		line 4 in file "sensors.c"
  7897 ;; Parameters:    Size  Location     Type
  7898 ;;  channel         1    wreg     unsigned char 
  7899 ;; Auto vars:     Size  Location     Type
  7900 ;;  channel         1    4[COMRAM] unsigned char 
  7901 ;; Return value:  Size  Location     Type
  7902 ;;                  2    0[COMRAM] int 
  7903 ;; Registers used:
  7904 ;;		wreg, status,2, status,0
  7905 ;; Tracked objects:
  7906 ;;		On entry : 0/0
  7907 ;;		On exit  : 0/0
  7908 ;;		Unchanged: 0/0
  7909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7910 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7911 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7912 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7913 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7914 ;;Total ram usage:        5 bytes
  7915 ;; Hardware stack levels used:    1
  7916 ;; This function calls:
  7917 ;;		Nothing
  7918 ;; This function is called by:
  7919 ;;		_checkV
  7920 ;; This function uses a non-reentrant model
  7921 ;;
  7922                           
  7923                           	psect	text41
  7924  0020E4                     __ptext41:
  7925                           	opt stack 0
  7926  0020E4                     _AD:
  7927                           	opt stack 22
  7928                           
  7929                           ;incstack = 0
  7930                           ;AD@channel stored from wreg
  7931  0020E4  6E05               	movwf	AD@channel,c
  7932                           
  7933                           ;sensors.c: 6: ADCON0 = ((channel << 2));
  7934  0020E6  4405               	rlncf	AD@channel,w,c
  7935  0020E8  46E8               	rlncf	wreg,f,c
  7936  0020EA  0BFC               	andlw	252
  7937  0020EC  6EC2               	movwf	4034,c	;volatile
  7938                           
  7939                           ;sensors.c: 7: ADON = 1;
  7940  0020EE  80C2               	bsf	4034,0,c	;volatile
  7941                           
  7942                           ;sensors.c: 8: ADCON0bits.GO = 1;
  7943  0020F0  82C2               	bsf	4034,1,c	;volatile
  7944  0020F2                     i2l293:
  7945  0020F2  B2C2               	btfsc	4034,1,c	;volatile
  7946  0020F4  D7FE               	goto	i2l293
  7947                           
  7948                           ;sensors.c: 10: return (ADRESH << 8) | ADRESL;
  7949  0020F6  50C3               	movf	4035,w,c	;volatile
  7950  0020F8  CFC4 F003          	movff	4036,??_AD	;volatile
  7951  0020FC  6A04               	clrf	(??_AD+1)& (0+255),c
  7952  0020FE  C003  F004         	movff	??_AD,??_AD+1
  7953  002102  6A03               	clrf	??_AD,c
  7954  002104  1003               	iorwf	??_AD,w,c
  7955  002106  6E01               	movwf	?_AD,c
  7956  002108  5004               	movf	??_AD+1,w,c
  7957  00210A  6E02               	movwf	?_AD+1,c
  7958  00210C  0012               	return	
  7959  00210E                     __end_of_AD:
  7960                           	opt stack 0
  7961                           pclatu	equ	0xFFB
  7962                           pclath	equ	0xFFA
  7963                           tblptru	equ	0xFF8
  7964                           tblptrh	equ	0xFF7
  7965                           tblptrl	equ	0xFF6
  7966                           tablat	equ	0xFF5
  7967                           prodh	equ	0xFF4
  7968                           prodl	equ	0xFF3
  7969                           intcon	equ	0xFF2
  7970                           intcon3	equ	0xFF0
  7971                           postinc0	equ	0xFEE
  7972                           fsr0h	equ	0xFEA
  7973                           fsr0l	equ	0xFE9
  7974                           wreg	equ	0xFE8
  7975                           plusw1	equ	0xFE3
  7976                           fsr1h	equ	0xFE2
  7977                           fsr1l	equ	0xFE1
  7978                           indf2	equ	0xFDF
  7979                           postinc2	equ	0xFDE
  7980                           postdec2	equ	0xFDD
  7981                           plusw2	equ	0xFDB
  7982                           fsr2h	equ	0xFDA
  7983                           fsr2l	equ	0xFD9
  7984                           status	equ	0xFD8
  7985                           
  7986 ;; *************** function _WriteRun *****************
  7987 ;; Defined at:
  7988 ;;		line 75 in file "eeprom.c"
  7989 ;; Parameters:    Size  Location     Type
  7990 ;;  sorted          2    6[COMRAM] PTR unsigned char 
  7991 ;;		 -> simulate@sorted(4), 
  7992 ;;  time            2    8[COMRAM] unsigned int 
  7993 ;; Auto vars:     Size  Location     Type
  7994 ;;  add             2   12[COMRAM] unsigned int 
  7995 ;; Return value:  Size  Location     Type
  7996 ;;                  1    wreg      void 
  7997 ;; Registers used:
  7998 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7999 ;; Tracked objects:
  8000 ;;		On entry : 0/0
  8001 ;;		On exit  : 0/0
  8002 ;;		Unchanged: 0/0
  8003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8004 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8005 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8006 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8007 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8008 ;;Total ram usage:        8 bytes
  8009 ;; Hardware stack levels used:    1
  8010 ;; Hardware stack levels required when called:    1
  8011 ;; This function calls:
  8012 ;;		_WriteEE
  8013 ;;		i2___wmul
  8014 ;; This function is called by:
  8015 ;;		_simulate
  8016 ;; This function uses a non-reentrant model
  8017 ;;
  8018                           
  8019                           	psect	text42
  8020  000E12                     __ptext42:
  8021                           	opt stack 0
  8022  000E12                     _WriteRun:
  8023                           	opt stack 23
  8024                           
  8025                           ;eeprom.c: 76: unsigned int add = ++Latest;
  8026                           
  8027                           ;incstack = 0
  8028  000E12  0100               	movlb	0	; () banked
  8029  000E14  2BA2               	incf	_Latest& (0+255),f,b
  8030  000E16  C0A2  F00D         	movff	_Latest,WriteRun@add
  8031  000E1A  6A0E               	clrf	WriteRun@add+1,c
  8032                           
  8033                           ; BSR set to: 0
  8034                           ;eeprom.c: 77: if (add > 3) {
  8035  000E1C  500E               	movf	WriteRun@add+1,w,c
  8036  000E1E  E104               	bnz	i2u291_40
  8037  000E20  0E04               	movlw	4
  8038  000E22  5C0D               	subwf	WriteRun@add,w,c
  8039  000E24  A0D8               	btfss	status,0,c
  8040  000E26  D006               	goto	i2l3928
  8041  000E28                     i2u291_40:
  8042                           
  8043                           ; BSR set to: 0
  8044                           ;eeprom.c: 78: add -= 4;
  8045  000E28  0E04               	movlw	4
  8046  000E2A  5E0D               	subwf	WriteRun@add,f,c
  8047  000E2C  0E00               	movlw	0
  8048  000E2E  5A0E               	subwfb	WriteRun@add+1,f,c
  8049                           
  8050                           ; BSR set to: 0
  8051                           ;eeprom.c: 79: Latest = add;
  8052  000E30  C00D  F0A2         	movff	WriteRun@add,_Latest
  8053  000E34                     i2l3928:
  8054                           
  8055                           ; BSR set to: 0
  8056                           ;eeprom.c: 80: }
  8057                           ;eeprom.c: 81: add *= 5;
  8058  000E34  C00D  F001         	movff	WriteRun@add,i2___wmul@multiplier
  8059  000E38  C00E  F002         	movff	WriteRun@add+1,i2___wmul@multiplier+1
  8060  000E3C  0E00               	movlw	0
  8061  000E3E  6E04               	movwf	i2___wmul@multiplicand+1,c
  8062  000E40  0E05               	movlw	5
  8063  000E42  6E03               	movwf	i2___wmul@multiplicand,c
  8064  000E44  ECAD  F010         	call	i2___wmul	;wreg free
  8065  000E48  C001  F00D         	movff	?i2___wmul,WriteRun@add
  8066  000E4C  C002  F00E         	movff	?i2___wmul+1,WriteRun@add+1
  8067                           
  8068                           ;eeprom.c: 82: WriteEE(add++ *8, time);
  8069  000E50  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  8070  000E54  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  8071  000E58  90D8               	bcf	status,0,c
  8072  000E5A  360B               	rlcf	??_WriteRun,f,c
  8073  000E5C  360C               	rlcf	??_WriteRun+1,f,c
  8074  000E5E  90D8               	bcf	status,0,c
  8075  000E60  360B               	rlcf	??_WriteRun,f,c
  8076  000E62  360C               	rlcf	??_WriteRun+1,f,c
  8077  000E64  90D8               	bcf	status,0,c
  8078  000E66  360B               	rlcf	??_WriteRun,f,c
  8079  000E68  360C               	rlcf	??_WriteRun+1,f,c
  8080  000E6A  C00B  F001         	movff	??_WriteRun,WriteEE@address
  8081  000E6E  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  8082  000E72  C009  F003         	movff	WriteRun@time,WriteEE@data
  8083  000E76  EC9A  F010         	call	_WriteEE	;wreg free
  8084  000E7A  4A0D               	infsnz	WriteRun@add,f,c
  8085  000E7C  2A0E               	incf	WriteRun@add+1,f,c
  8086                           
  8087                           ;eeprom.c: 83: WriteEE(add++ *8, sorted[0]);
  8088  000E7E  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  8089  000E82  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  8090  000E86  90D8               	bcf	status,0,c
  8091  000E88  360B               	rlcf	??_WriteRun,f,c
  8092  000E8A  360C               	rlcf	??_WriteRun+1,f,c
  8093  000E8C  90D8               	bcf	status,0,c
  8094  000E8E  360B               	rlcf	??_WriteRun,f,c
  8095  000E90  360C               	rlcf	??_WriteRun+1,f,c
  8096  000E92  90D8               	bcf	status,0,c
  8097  000E94  360B               	rlcf	??_WriteRun,f,c
  8098  000E96  360C               	rlcf	??_WriteRun+1,f,c
  8099  000E98  C00B  F001         	movff	??_WriteRun,WriteEE@address
  8100  000E9C  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  8101  000EA0  C007  FFD9         	movff	WriteRun@sorted,fsr2l
  8102  000EA4  C008  FFDA         	movff	WriteRun@sorted+1,fsr2h
  8103  000EA8  50DF               	movf	indf2,w,c
  8104  000EAA  6E03               	movwf	WriteEE@data,c
  8105  000EAC  EC9A  F010         	call	_WriteEE	;wreg free
  8106  000EB0  4A0D               	infsnz	WriteRun@add,f,c
  8107  000EB2  2A0E               	incf	WriteRun@add+1,f,c
  8108                           
  8109                           ;eeprom.c: 84: WriteEE(add++ *8, sorted[1]);
  8110  000EB4  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  8111  000EB8  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  8112  000EBC  90D8               	bcf	status,0,c
  8113  000EBE  360B               	rlcf	??_WriteRun,f,c
  8114  000EC0  360C               	rlcf	??_WriteRun+1,f,c
  8115  000EC2  90D8               	bcf	status,0,c
  8116  000EC4  360B               	rlcf	??_WriteRun,f,c
  8117  000EC6  360C               	rlcf	??_WriteRun+1,f,c
  8118  000EC8  90D8               	bcf	status,0,c
  8119  000ECA  360B               	rlcf	??_WriteRun,f,c
  8120  000ECC  360C               	rlcf	??_WriteRun+1,f,c
  8121  000ECE  C00B  F001         	movff	??_WriteRun,WriteEE@address
  8122  000ED2  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  8123  000ED6  EE20 F001          	lfsr	2,1
  8124  000EDA  5007               	movf	WriteRun@sorted,w,c
  8125  000EDC  26D9               	addwf	fsr2l,f,c
  8126  000EDE  5008               	movf	WriteRun@sorted+1,w,c
  8127  000EE0  22DA               	addwfc	fsr2h,f,c
  8128  000EE2  50DF               	movf	indf2,w,c
  8129  000EE4  6E03               	movwf	WriteEE@data,c
  8130  000EE6  EC9A  F010         	call	_WriteEE	;wreg free
  8131  000EEA  4A0D               	infsnz	WriteRun@add,f,c
  8132  000EEC  2A0E               	incf	WriteRun@add+1,f,c
  8133                           
  8134                           ;eeprom.c: 85: WriteEE(add++ *8, sorted[2]);
  8135  000EEE  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  8136  000EF2  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  8137  000EF6  90D8               	bcf	status,0,c
  8138  000EF8  360B               	rlcf	??_WriteRun,f,c
  8139  000EFA  360C               	rlcf	??_WriteRun+1,f,c
  8140  000EFC  90D8               	bcf	status,0,c
  8141  000EFE  360B               	rlcf	??_WriteRun,f,c
  8142  000F00  360C               	rlcf	??_WriteRun+1,f,c
  8143  000F02  90D8               	bcf	status,0,c
  8144  000F04  360B               	rlcf	??_WriteRun,f,c
  8145  000F06  360C               	rlcf	??_WriteRun+1,f,c
  8146  000F08  C00B  F001         	movff	??_WriteRun,WriteEE@address
  8147  000F0C  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  8148  000F10  EE20 F002          	lfsr	2,2
  8149  000F14  5007               	movf	WriteRun@sorted,w,c
  8150  000F16  26D9               	addwf	fsr2l,f,c
  8151  000F18  5008               	movf	WriteRun@sorted+1,w,c
  8152  000F1A  22DA               	addwfc	fsr2h,f,c
  8153  000F1C  50DF               	movf	indf2,w,c
  8154  000F1E  6E03               	movwf	WriteEE@data,c
  8155  000F20  EC9A  F010         	call	_WriteEE	;wreg free
  8156  000F24  4A0D               	infsnz	WriteRun@add,f,c
  8157  000F26  2A0E               	incf	WriteRun@add+1,f,c
  8158                           
  8159                           ;eeprom.c: 86: WriteEE(add++ *8, sorted[3]);
  8160  000F28  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  8161  000F2C  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  8162  000F30  90D8               	bcf	status,0,c
  8163  000F32  360B               	rlcf	??_WriteRun,f,c
  8164  000F34  360C               	rlcf	??_WriteRun+1,f,c
  8165  000F36  90D8               	bcf	status,0,c
  8166  000F38  360B               	rlcf	??_WriteRun,f,c
  8167  000F3A  360C               	rlcf	??_WriteRun+1,f,c
  8168  000F3C  90D8               	bcf	status,0,c
  8169  000F3E  360B               	rlcf	??_WriteRun,f,c
  8170  000F40  360C               	rlcf	??_WriteRun+1,f,c
  8171  000F42  C00B  F001         	movff	??_WriteRun,WriteEE@address
  8172  000F46  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  8173  000F4A  EE20 F003          	lfsr	2,3
  8174  000F4E  5007               	movf	WriteRun@sorted,w,c
  8175  000F50  26D9               	addwf	fsr2l,f,c
  8176  000F52  5008               	movf	WriteRun@sorted+1,w,c
  8177  000F54  22DA               	addwfc	fsr2h,f,c
  8178  000F56  50DF               	movf	indf2,w,c
  8179  000F58  6E03               	movwf	WriteEE@data,c
  8180  000F5A  EC9A  F010         	call	_WriteEE	;wreg free
  8181  000F5E  4A0D               	infsnz	WriteRun@add,f,c
  8182  000F60  2A0E               	incf	WriteRun@add+1,f,c
  8183                           
  8184                           ;eeprom.c: 87: WriteEE(160, Latest);
  8185  000F62  0E00               	movlw	0
  8186  000F64  6E02               	movwf	WriteEE@address+1,c
  8187  000F66  0EA0               	movlw	160
  8188  000F68  6E01               	movwf	WriteEE@address,c
  8189  000F6A  C0A2  F003         	movff	_Latest,WriteEE@data
  8190  000F6E  EC9A  F010         	call	_WriteEE	;wreg free
  8191  000F72  0012               	return		;funcret
  8192  000F74                     __end_of_WriteRun:
  8193                           	opt stack 0
  8194                           pclatu	equ	0xFFB
  8195                           pclath	equ	0xFFA
  8196                           tblptru	equ	0xFF8
  8197                           tblptrh	equ	0xFF7
  8198                           tblptrl	equ	0xFF6
  8199                           tablat	equ	0xFF5
  8200                           prodh	equ	0xFF4
  8201                           prodl	equ	0xFF3
  8202                           intcon	equ	0xFF2
  8203                           intcon3	equ	0xFF0
  8204                           postinc0	equ	0xFEE
  8205                           fsr0h	equ	0xFEA
  8206                           fsr0l	equ	0xFE9
  8207                           wreg	equ	0xFE8
  8208                           plusw1	equ	0xFE3
  8209                           fsr1h	equ	0xFE2
  8210                           fsr1l	equ	0xFE1
  8211                           indf2	equ	0xFDF
  8212                           postinc2	equ	0xFDE
  8213                           postdec2	equ	0xFDD
  8214                           plusw2	equ	0xFDB
  8215                           fsr2h	equ	0xFDA
  8216                           fsr2l	equ	0xFD9
  8217                           status	equ	0xFD8
  8218                           
  8219 ;; *************** function _WriteEE *****************
  8220 ;; Defined at:
  8221 ;;		line 34 in file "eeprom.c"
  8222 ;; Parameters:    Size  Location     Type
  8223 ;;  address         2    0[COMRAM] unsigned int 
  8224 ;;  data            1    2[COMRAM] unsigned char 
  8225 ;; Auto vars:     Size  Location     Type
  8226 ;;		None
  8227 ;; Return value:  Size  Location     Type
  8228 ;;                  1    wreg      void 
  8229 ;; Registers used:
  8230 ;;		wreg, status,2
  8231 ;; Tracked objects:
  8232 ;;		On entry : 0/0
  8233 ;;		On exit  : 0/0
  8234 ;;		Unchanged: 0/0
  8235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8236 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8239 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8240 ;;Total ram usage:        3 bytes
  8241 ;; Hardware stack levels used:    1
  8242 ;; This function calls:
  8243 ;;		Nothing
  8244 ;; This function is called by:
  8245 ;;		_WriteRun
  8246 ;; This function uses a non-reentrant model
  8247 ;;
  8248                           
  8249                           	psect	text43
  8250  002134                     __ptext43:
  8251                           	opt stack 0
  8252  002134                     _WriteEE:
  8253                           	opt stack 23
  8254                           
  8255                           ;eeprom.c: 36: EEADRH = (unsigned char) (address >> 8);
  8256                           
  8257                           ;incstack = 0
  8258  002134  5002               	movf	WriteEE@address+1,w,c
  8259  002136  6EAA               	movwf	4010,c	;volatile
  8260                           
  8261                           ;eeprom.c: 37: EEADR = (unsigned char) address;
  8262  002138  C001  FFA9         	movff	WriteEE@address,4009	;volatile
  8263                           
  8264                           ;eeprom.c: 39: EEDATA = data;
  8265  00213C  C003  FFA8         	movff	WriteEE@data,4008	;volatile
  8266                           
  8267                           ;eeprom.c: 40: EECON1bits.EEPGD = 0;
  8268  002140  9EA6               	bcf	4006,7,c	;volatile
  8269                           
  8270                           ;eeprom.c: 41: EECON1bits.CFGS = 0;
  8271  002142  9CA6               	bcf	4006,6,c	;volatile
  8272                           
  8273                           ;eeprom.c: 42: EECON1bits.WREN = 1;
  8274  002144  84A6               	bsf	4006,2,c	;volatile
  8275                           
  8276                           ;eeprom.c: 46: EECON2 = 0x55;
  8277  002146  0E55               	movlw	85
  8278  002148  6EA7               	movwf	4007,c	;volatile
  8279                           
  8280                           ;eeprom.c: 47: EECON2 = 0xAA;
  8281  00214A  0EAA               	movlw	170
  8282  00214C  6EA7               	movwf	4007,c	;volatile
  8283                           
  8284                           ;eeprom.c: 48: EECON1bits.WR = 1;
  8285  00214E  82A6               	bsf	4006,1,c	;volatile
  8286  002150                     i2l424:
  8287  002150  A8A1               	btfss	4001,4,c	;volatile
  8288  002152  D7FE               	goto	i2l424
  8289                           
  8290                           ;eeprom.c: 53: PIR2bits.EEIF = 0;
  8291  002154  98A1               	bcf	4001,4,c	;volatile
  8292                           
  8293                           ;eeprom.c: 54: EECON1bits.WREN = 0;
  8294  002156  94A6               	bcf	4006,2,c	;volatile
  8295  002158  0012               	return		;funcret
  8296  00215A                     __end_of_WriteEE:
  8297                           	opt stack 0
  8298                           pclatu	equ	0xFFB
  8299                           pclath	equ	0xFFA
  8300                           tblptru	equ	0xFF8
  8301                           tblptrh	equ	0xFF7
  8302                           tblptrl	equ	0xFF6
  8303                           tablat	equ	0xFF5
  8304                           prodh	equ	0xFF4
  8305                           prodl	equ	0xFF3
  8306                           intcon	equ	0xFF2
  8307                           intcon3	equ	0xFF0
  8308                           postinc0	equ	0xFEE
  8309                           fsr0h	equ	0xFEA
  8310                           fsr0l	equ	0xFE9
  8311                           wreg	equ	0xFE8
  8312                           plusw1	equ	0xFE3
  8313                           fsr1h	equ	0xFE2
  8314                           fsr1l	equ	0xFE1
  8315                           indf2	equ	0xFDF
  8316                           postinc2	equ	0xFDE
  8317                           postdec2	equ	0xFDD
  8318                           plusw2	equ	0xFDB
  8319                           fsr2h	equ	0xFDA
  8320                           fsr2l	equ	0xFD9
  8321                           status	equ	0xFD8
  8322                           
  8323 ;; *************** function _HexDecToDec2 *****************
  8324 ;; Defined at:
  8325 ;;		line 6 in file "modules.c"
  8326 ;; Parameters:    Size  Location     Type
  8327 ;;  hex             2    6[COMRAM] unsigned int 
  8328 ;; Auto vars:     Size  Location     Type
  8329 ;;  digit           2   13[COMRAM] unsigned int 
  8330 ;;  tenth           2   11[COMRAM] unsigned int 
  8331 ;; Return value:  Size  Location     Type
  8332 ;;                  2    6[COMRAM] unsigned int 
  8333 ;; Registers used:
  8334 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8335 ;; Tracked objects:
  8336 ;;		On entry : 0/0
  8337 ;;		On exit  : 0/0
  8338 ;;		Unchanged: 0/0
  8339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8340 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8341 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8342 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8343 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8344 ;;Total ram usage:        9 bytes
  8345 ;; Hardware stack levels used:    1
  8346 ;; Hardware stack levels required when called:    1
  8347 ;; This function calls:
  8348 ;;		i2___wmul
  8349 ;; This function is called by:
  8350 ;;		_simulate
  8351 ;; This function uses a non-reentrant model
  8352 ;;
  8353                           
  8354                           	psect	text44
  8355  001F16                     __ptext44:
  8356                           	opt stack 0
  8357  001F16                     _HexDecToDec2:
  8358                           	opt stack 23
  8359                           
  8360                           ;modules.c: 8: unsigned tenth = hex / 16;
  8361                           
  8362                           ;incstack = 0
  8363  001F16  C007  F009         	movff	HexDecToDec2@hex,??_HexDecToDec2
  8364  001F1A  C008  F00A         	movff	HexDecToDec2@hex+1,??_HexDecToDec2+1
  8365  001F1E  0E04               	movlw	4
  8366  001F20  6E0B               	movwf	(??_HexDecToDec2+2)& (0+255),c
  8367  001F22                     i2u288_45:
  8368  001F22  90D8               	bcf	status,0,c
  8369  001F24  320A               	rrcf	??_HexDecToDec2+1,f,c
  8370  001F26  3209               	rrcf	??_HexDecToDec2,f,c
  8371  001F28  2E0B               	decfsz	(??_HexDecToDec2+2)& (0+255),f,c
  8372  001F2A  D7FB               	goto	i2u288_45
  8373  001F2C  C009  F00C         	movff	??_HexDecToDec2,HexDecToDec2@tenth
  8374  001F30  C00A  F00D         	movff	??_HexDecToDec2+1,HexDecToDec2@tenth+1
  8375                           
  8376                           ;modules.c: 9: unsigned digit = hex % 16;
  8377  001F34  0E0F               	movlw	15
  8378  001F36  1407               	andwf	HexDecToDec2@hex,w,c
  8379  001F38  6E0E               	movwf	HexDecToDec2@digit,c
  8380  001F3A  6A0F               	clrf	HexDecToDec2@digit+1,c
  8381                           
  8382                           ;modules.c: 10: return tenth * 10 + digit;
  8383  001F3C  C00C  F001         	movff	HexDecToDec2@tenth,i2___wmul@multiplier
  8384  001F40  C00D  F002         	movff	HexDecToDec2@tenth+1,i2___wmul@multiplier+1
  8385  001F44  0E00               	movlw	0
  8386  001F46  6E04               	movwf	i2___wmul@multiplicand+1,c
  8387  001F48  0E0A               	movlw	10
  8388  001F4A  6E03               	movwf	i2___wmul@multiplicand,c
  8389  001F4C  ECAD  F010         	call	i2___wmul	;wreg free
  8390  001F50  500E               	movf	HexDecToDec2@digit,w,c
  8391  001F52  2401               	addwf	?i2___wmul,w,c
  8392  001F54  6E07               	movwf	?_HexDecToDec2,c
  8393  001F56  500F               	movf	HexDecToDec2@digit+1,w,c
  8394  001F58  2002               	addwfc	?i2___wmul+1,w,c
  8395  001F5A  6E08               	movwf	?_HexDecToDec2+1,c
  8396  001F5C  0012               	return	
  8397  001F5E                     __end_of_HexDecToDec2:
  8398                           	opt stack 0
  8399                           pclatu	equ	0xFFB
  8400                           pclath	equ	0xFFA
  8401                           tblptru	equ	0xFF8
  8402                           tblptrh	equ	0xFF7
  8403                           tblptrl	equ	0xFF6
  8404                           tablat	equ	0xFF5
  8405                           prodh	equ	0xFF4
  8406                           prodl	equ	0xFF3
  8407                           intcon	equ	0xFF2
  8408                           intcon3	equ	0xFF0
  8409                           postinc0	equ	0xFEE
  8410                           fsr0h	equ	0xFEA
  8411                           fsr0l	equ	0xFE9
  8412                           wreg	equ	0xFE8
  8413                           plusw1	equ	0xFE3
  8414                           fsr1h	equ	0xFE2
  8415                           fsr1l	equ	0xFE1
  8416                           indf2	equ	0xFDF
  8417                           postinc2	equ	0xFDE
  8418                           postdec2	equ	0xFDD
  8419                           plusw2	equ	0xFDB
  8420                           fsr2h	equ	0xFDA
  8421                           fsr2l	equ	0xFD9
  8422                           status	equ	0xFD8
  8423                           
  8424 ;; *************** function _CW90 *****************
  8425 ;; Defined at:
  8426 ;;		line 19 in file "motors.c"
  8427 ;; Parameters:    Size  Location     Type
  8428 ;;  port            2   21[COMRAM] PTR int 
  8429 ;;		 -> simulate@portCW(6), 
  8430 ;; Auto vars:     Size  Location     Type
  8431 ;;		None
  8432 ;; Return value:  Size  Location     Type
  8433 ;;                  1    wreg      void 
  8434 ;; Registers used:
  8435 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8436 ;; Tracked objects:
  8437 ;;		On entry : 0/0
  8438 ;;		On exit  : 0/0
  8439 ;;		Unchanged: 0/0
  8440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8441 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8444 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8445 ;;Total ram usage:        2 bytes
  8446 ;; Hardware stack levels used:    1
  8447 ;; Hardware stack levels required when called:    2
  8448 ;; This function calls:
  8449 ;;		_PWMC
  8450 ;; This function is called by:
  8451 ;;		_simulate
  8452 ;; This function uses a non-reentrant model
  8453 ;;
  8454                           
  8455                           	psect	text45
  8456  0021C0                     __ptext45:
  8457                           	opt stack 0
  8458  0021C0                     _CW90:
  8459                           	opt stack 22
  8460                           
  8461                           ;motors.c: 21: PWMC(3000, 96, port);
  8462                           
  8463                           ;incstack = 0
  8464  0021C0  0E0B               	movlw	11
  8465  0021C2  6E0A               	movwf	PWMC@widthus+1,c
  8466  0021C4  0EB8               	movlw	184
  8467  0021C6  6E09               	movwf	PWMC@widthus,c
  8468  0021C8  0E00               	movlw	0
  8469  0021CA  6E0C               	movwf	PWMC@cycles+1,c
  8470  0021CC  0E60               	movlw	96
  8471  0021CE  6E0B               	movwf	PWMC@cycles,c
  8472  0021D0  C016  F00D         	movff	CW90@port,PWMC@port
  8473  0021D4  C017  F00E         	movff	CW90@port+1,PWMC@port+1
  8474  0021D8  EC72  F009         	call	_PWMC	;wreg free
  8475  0021DC  0012               	return		;funcret
  8476  0021DE                     __end_of_CW90:
  8477                           	opt stack 0
  8478                           pclatu	equ	0xFFB
  8479                           pclath	equ	0xFFA
  8480                           tblptru	equ	0xFF8
  8481                           tblptrh	equ	0xFF7
  8482                           tblptrl	equ	0xFF6
  8483                           tablat	equ	0xFF5
  8484                           prodh	equ	0xFF4
  8485                           prodl	equ	0xFF3
  8486                           intcon	equ	0xFF2
  8487                           intcon3	equ	0xFF0
  8488                           postinc0	equ	0xFEE
  8489                           fsr0h	equ	0xFEA
  8490                           fsr0l	equ	0xFE9
  8491                           wreg	equ	0xFE8
  8492                           plusw1	equ	0xFE3
  8493                           fsr1h	equ	0xFE2
  8494                           fsr1l	equ	0xFE1
  8495                           indf2	equ	0xFDF
  8496                           postinc2	equ	0xFDE
  8497                           postdec2	equ	0xFDD
  8498                           plusw2	equ	0xFDB
  8499                           fsr2h	equ	0xFDA
  8500                           fsr2l	equ	0xFD9
  8501                           status	equ	0xFD8
  8502                           
  8503 ;; *************** function _CCW90 *****************
  8504 ;; Defined at:
  8505 ;;		line 24 in file "motors.c"
  8506 ;; Parameters:    Size  Location     Type
  8507 ;;  port            2   21[COMRAM] PTR int 
  8508 ;;		 -> simulate@portCCW(6), 
  8509 ;; Auto vars:     Size  Location     Type
  8510 ;;		None
  8511 ;; Return value:  Size  Location     Type
  8512 ;;                  1    wreg      void 
  8513 ;; Registers used:
  8514 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8515 ;; Tracked objects:
  8516 ;;		On entry : 0/0
  8517 ;;		On exit  : 0/0
  8518 ;;		Unchanged: 0/0
  8519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8520 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8523 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8524 ;;Total ram usage:        2 bytes
  8525 ;; Hardware stack levels used:    1
  8526 ;; Hardware stack levels required when called:    2
  8527 ;; This function calls:
  8528 ;;		_PWMC
  8529 ;; This function is called by:
  8530 ;;		_simulate
  8531 ;; This function uses a non-reentrant model
  8532 ;;
  8533                           
  8534                           	psect	text46
  8535  0021DE                     __ptext46:
  8536                           	opt stack 0
  8537  0021DE                     _CCW90:
  8538                           	opt stack 22
  8539                           
  8540                           ;motors.c: 26: PWMC(300, 1400, port);
  8541                           
  8542                           ;incstack = 0
  8543  0021DE  0E01               	movlw	1
  8544  0021E0  6E0A               	movwf	PWMC@widthus+1,c
  8545  0021E2  0E2C               	movlw	44
  8546  0021E4  6E09               	movwf	PWMC@widthus,c
  8547  0021E6  0E05               	movlw	5
  8548  0021E8  6E0C               	movwf	PWMC@cycles+1,c
  8549  0021EA  0E78               	movlw	120
  8550  0021EC  6E0B               	movwf	PWMC@cycles,c
  8551  0021EE  C016  F00D         	movff	CCW90@port,PWMC@port
  8552  0021F2  C017  F00E         	movff	CCW90@port+1,PWMC@port+1
  8553  0021F6  EC72  F009         	call	_PWMC	;wreg free
  8554  0021FA  0012               	return		;funcret
  8555  0021FC                     __end_of_CCW90:
  8556                           	opt stack 0
  8557                           pclatu	equ	0xFFB
  8558                           pclath	equ	0xFFA
  8559                           tblptru	equ	0xFF8
  8560                           tblptrh	equ	0xFF7
  8561                           tblptrl	equ	0xFF6
  8562                           tablat	equ	0xFF5
  8563                           prodh	equ	0xFF4
  8564                           prodl	equ	0xFF3
  8565                           intcon	equ	0xFF2
  8566                           intcon3	equ	0xFF0
  8567                           postinc0	equ	0xFEE
  8568                           fsr0h	equ	0xFEA
  8569                           fsr0l	equ	0xFE9
  8570                           wreg	equ	0xFE8
  8571                           plusw1	equ	0xFE3
  8572                           fsr1h	equ	0xFE2
  8573                           fsr1l	equ	0xFE1
  8574                           indf2	equ	0xFDF
  8575                           postinc2	equ	0xFDE
  8576                           postdec2	equ	0xFDD
  8577                           plusw2	equ	0xFDB
  8578                           fsr2h	equ	0xFDA
  8579                           fsr2l	equ	0xFD9
  8580                           status	equ	0xFD8
  8581                           
  8582 ;; *************** function _PWMC *****************
  8583 ;; Defined at:
  8584 ;;		line 4 in file "motors.c"
  8585 ;; Parameters:    Size  Location     Type
  8586 ;;  widthus         2    8[COMRAM] int 
  8587 ;;  cycles          2   10[COMRAM] int 
  8588 ;;  port            2   12[COMRAM] PTR int 
  8589 ;;		 -> intrpt@portCW(6), simulate@portCCW(6), simulate@portCW(6), 
  8590 ;; Auto vars:     Size  Location     Type
  8591 ;;  countdown       2   19[COMRAM] int 
  8592 ;; Return value:  Size  Location     Type
  8593 ;;                  1    wreg      void 
  8594 ;; Registers used:
  8595 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8596 ;; Tracked objects:
  8597 ;;		On entry : 0/0
  8598 ;;		On exit  : 0/0
  8599 ;;		Unchanged: 0/0
  8600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8601 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8602 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8603 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8604 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8605 ;;Total ram usage:       13 bytes
  8606 ;; Hardware stack levels used:    1
  8607 ;; Hardware stack levels required when called:    1
  8608 ;; This function calls:
  8609 ;;		___awdiv
  8610 ;; This function is called by:
  8611 ;;		_intrpt
  8612 ;;		_CW90
  8613 ;;		_CCW90
  8614 ;; This function uses a non-reentrant model
  8615 ;;
  8616                           
  8617                           	psect	text47
  8618  0012E4                     __ptext47:
  8619                           	opt stack 0
  8620  0012E4                     _PWMC:
  8621                           	opt stack 22
  8622                           
  8623                           ;motors.c: 5: widthus /= 10;
  8624                           
  8625                           ;incstack = 0
  8626  0012E4  C009  F001         	movff	PWMC@widthus,___awdiv@dividend
  8627  0012E8  C00A  F002         	movff	PWMC@widthus+1,___awdiv@dividend+1
  8628  0012EC  0E00               	movlw	0
  8629  0012EE  6E04               	movwf	___awdiv@divisor+1,c
  8630  0012F0  0E0A               	movlw	10
  8631  0012F2  6E03               	movwf	___awdiv@divisor,c
  8632  0012F4  EC5C  F00D         	call	___awdiv	;wreg free
  8633  0012F8  C001  F009         	movff	?___awdiv,PWMC@widthus
  8634  0012FC  C002  F00A         	movff	?___awdiv+1,PWMC@widthus+1
  8635                           
  8636                           ;motors.c: 6: widthus -= 1;
  8637  001300  0609               	decf	PWMC@widthus,f,c
  8638  001302  A0D8               	btfss	status,0,c
  8639  001304  060A               	decf	PWMC@widthus+1,f,c
  8640                           
  8641                           ;motors.c: 7: int countdown = widthus;
  8642  001306  C009  F014         	movff	PWMC@widthus,PWMC@countdown
  8643  00130A  C00A  F015         	movff	PWMC@widthus+1,PWMC@countdown+1
  8644  00130E                     i2l3200:
  8645  00130E  BE0C               	btfsc	PWMC@cycles+1,7,c
  8646  001310  0012               	return	
  8647  001312  500C               	movf	PWMC@cycles+1,w,c
  8648  001314  E103               	bnz	i2l257
  8649  001316  040B               	decf	PWMC@cycles,w,c
  8650  001318  A0D8               	btfss	status,0,c
  8651  00131A  0012               	return	
  8652  00131C                     i2l257:
  8653                           
  8654                           ;motors.c: 9: countdown = widthus;
  8655  00131C  C009  F014         	movff	PWMC@widthus,PWMC@countdown
  8656  001320  C00A  F015         	movff	PWMC@widthus+1,PWMC@countdown+1
  8657                           
  8658                           ;motors.c: 10: LATC0 = (1 ^ LATC0) & port[0];
  8659  001324  0E00               	movlw	0
  8660  001326  6E11               	movwf	_PWMC$1393,c
  8661  001328  B08B               	btfsc	3979,0,c	;volatile
  8662  00132A  D00D               	goto	i2l3212
  8663  00132C  C00D  FFD9         	movff	PWMC@port,fsr2l
  8664  001330  C00E  FFDA         	movff	PWMC@port+1,fsr2h
  8665  001334  CFDE F00F          	movff	postinc2,??_PWMC
  8666  001338  CFDD F010          	movff	postdec2,??_PWMC+1
  8667  00133C  300F               	rrcf	??_PWMC,w,c
  8668  00133E  A0D8               	btfss	status,0,c
  8669  001340  D002               	goto	i2l3212
  8670  001342  0E01               	movlw	1
  8671  001344  6E11               	movwf	_PWMC$1393,c
  8672  001346                     i2l3212:
  8673  001346  B011               	btfsc	_PWMC$1393,0,c
  8674  001348  D002               	bra	i2u205_45
  8675  00134A  908B               	bcf	3979,0,c	;volatile
  8676  00134C  D001               	bra	i2u205_46
  8677  00134E                     i2u205_45:
  8678  00134E  808B               	bsf	3979,0,c	;volatile
  8679  001350                     i2u205_46:
  8680                           
  8681                           ;motors.c: 11: LATC1 = (1 ^ LATC1) & port[1];
  8682  001350  0E00               	movlw	0
  8683  001352  6E12               	movwf	_PWMC$1394,c
  8684  001354  B28B               	btfsc	3979,1,c	;volatile
  8685  001356  D00F               	goto	i2l3220
  8686  001358  EE20 F002          	lfsr	2,2
  8687  00135C  500D               	movf	PWMC@port,w,c
  8688  00135E  26D9               	addwf	fsr2l,f,c
  8689  001360  500E               	movf	PWMC@port+1,w,c
  8690  001362  22DA               	addwfc	fsr2h,f,c
  8691  001364  CFDE F00F          	movff	postinc2,??_PWMC
  8692  001368  CFDD F010          	movff	postdec2,??_PWMC+1
  8693  00136C  300F               	rrcf	??_PWMC,w,c
  8694  00136E  A0D8               	btfss	status,0,c
  8695  001370  D002               	goto	i2l3220
  8696  001372  0E01               	movlw	1
  8697  001374  6E12               	movwf	_PWMC$1394,c
  8698  001376                     i2l3220:
  8699  001376  B012               	btfsc	_PWMC$1394,0,c
  8700  001378  D002               	bra	i2u208_45
  8701  00137A  928B               	bcf	3979,1,c	;volatile
  8702  00137C  D001               	bra	i2u208_46
  8703  00137E                     i2u208_45:
  8704  00137E  828B               	bsf	3979,1,c	;volatile
  8705  001380                     i2u208_46:
  8706                           
  8707                           ;motors.c: 12: LATC2 = (1 ^ LATC2) & port[2];
  8708  001380  0E00               	movlw	0
  8709  001382  6E13               	movwf	_PWMC$1395,c
  8710  001384  B48B               	btfsc	3979,2,c	;volatile
  8711  001386  D00F               	goto	i2l3228
  8712  001388  EE20 F004          	lfsr	2,4
  8713  00138C  500D               	movf	PWMC@port,w,c
  8714  00138E  26D9               	addwf	fsr2l,f,c
  8715  001390  500E               	movf	PWMC@port+1,w,c
  8716  001392  22DA               	addwfc	fsr2h,f,c
  8717  001394  CFDE F00F          	movff	postinc2,??_PWMC
  8718  001398  CFDD F010          	movff	postdec2,??_PWMC+1
  8719  00139C  300F               	rrcf	??_PWMC,w,c
  8720  00139E  A0D8               	btfss	status,0,c
  8721  0013A0  D002               	goto	i2l3228
  8722  0013A2  0E01               	movlw	1
  8723  0013A4  6E13               	movwf	_PWMC$1395,c
  8724  0013A6                     i2l3228:
  8725  0013A6  B013               	btfsc	_PWMC$1395,0,c
  8726  0013A8  D002               	bra	i2u211_45
  8727  0013AA  948B               	bcf	3979,2,c	;volatile
  8728  0013AC  D001               	bra	i2u211_46
  8729  0013AE                     i2u211_45:
  8730  0013AE  848B               	bsf	3979,2,c	;volatile
  8731  0013B0                     i2u211_46:
  8732  0013B0                     i2l3230:
  8733  0013B0  BE15               	btfsc	PWMC@countdown+1,7,c
  8734  0013B2  D00D               	goto	i2l3238
  8735  0013B4  5015               	movf	PWMC@countdown+1,w,c
  8736  0013B6  E103               	bnz	i2l3234
  8737  0013B8  0414               	decf	PWMC@countdown,w,c
  8738  0013BA  A0D8               	btfss	status,0,c
  8739  0013BC  D008               	goto	i2l3238
  8740  0013BE                     i2l3234:
  8741                           
  8742                           ;motors.c: 14: _delay((unsigned long)((5)*(8000000/4000000.0)));
  8743  0013BE  0E03               	movlw	3
  8744  0013C0                     i2u324_47:
  8745  0013C0  2EE8               	decfsz	wreg,f,c
  8746  0013C2  D7FE               	bra	i2u324_47
  8747  0013C4  F000               	nop	
  8748  0013C6  0614               	decf	PWMC@countdown,f,c
  8749  0013C8  A0D8               	btfss	status,0,c
  8750  0013CA  0615               	decf	PWMC@countdown+1,f,c
  8751  0013CC  D7F1               	goto	i2l3230
  8752  0013CE                     i2l3238:
  8753  0013CE  060B               	decf	PWMC@cycles,f,c
  8754  0013D0  A0D8               	btfss	status,0,c
  8755  0013D2  060C               	decf	PWMC@cycles+1,f,c
  8756  0013D4  D79C               	goto	i2l3200
  8757  0013D6                     __end_of_PWMC:
  8758                           	opt stack 0
  8759                           pclatu	equ	0xFFB
  8760                           pclath	equ	0xFFA
  8761                           tblptru	equ	0xFF8
  8762                           tblptrh	equ	0xFF7
  8763                           tblptrl	equ	0xFF6
  8764                           tablat	equ	0xFF5
  8765                           prodh	equ	0xFF4
  8766                           prodl	equ	0xFF3
  8767                           intcon	equ	0xFF2
  8768                           intcon3	equ	0xFF0
  8769                           postinc0	equ	0xFEE
  8770                           fsr0h	equ	0xFEA
  8771                           fsr0l	equ	0xFE9
  8772                           wreg	equ	0xFE8
  8773                           plusw1	equ	0xFE3
  8774                           fsr1h	equ	0xFE2
  8775                           fsr1l	equ	0xFE1
  8776                           indf2	equ	0xFDF
  8777                           postinc2	equ	0xFDE
  8778                           postdec2	equ	0xFDD
  8779                           plusw2	equ	0xFDB
  8780                           fsr2h	equ	0xFDA
  8781                           fsr2l	equ	0xFD9
  8782                           status	equ	0xFD8
  8783                           
  8784 ;; *************** function ___awdiv *****************
  8785 ;; Defined at:
  8786 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  8787 ;; Parameters:    Size  Location     Type
  8788 ;;  dividend        2    0[COMRAM] int 
  8789 ;;  divisor         2    2[COMRAM] int 
  8790 ;; Auto vars:     Size  Location     Type
  8791 ;;  quotient        2    6[COMRAM] int 
  8792 ;;  sign            1    5[COMRAM] unsigned char 
  8793 ;;  counter         1    4[COMRAM] unsigned char 
  8794 ;; Return value:  Size  Location     Type
  8795 ;;                  2    0[COMRAM] int 
  8796 ;; Registers used:
  8797 ;;		wreg, status,2, status,0
  8798 ;; Tracked objects:
  8799 ;;		On entry : 0/0
  8800 ;;		On exit  : 0/0
  8801 ;;		Unchanged: 0/0
  8802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8803 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8804 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8806 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8807 ;;Total ram usage:        8 bytes
  8808 ;; Hardware stack levels used:    1
  8809 ;; This function calls:
  8810 ;;		Nothing
  8811 ;; This function is called by:
  8812 ;;		_PWMC
  8813 ;; This function uses a non-reentrant model
  8814 ;;
  8815                           
  8816                           	psect	text48
  8817  001AB8                     __ptext48:
  8818                           	opt stack 0
  8819  001AB8                     ___awdiv:
  8820                           	opt stack 22
  8821                           
  8822                           ;incstack = 0
  8823  001AB8  0E00               	movlw	0
  8824  001ABA  6E06               	movwf	___awdiv@sign,c
  8825  001ABC  AE04               	btfss	___awdiv@divisor+1,7,c
  8826  001ABE  D006               	goto	i2l3060
  8827  001AC0  6C03               	negf	___awdiv@divisor,c
  8828  001AC2  1E04               	comf	___awdiv@divisor+1,f,c
  8829  001AC4  B0D8               	btfsc	status,0,c
  8830  001AC6  2A04               	incf	___awdiv@divisor+1,f,c
  8831  001AC8  0E01               	movlw	1
  8832  001ACA  6E06               	movwf	___awdiv@sign,c
  8833  001ACC                     i2l3060:
  8834  001ACC  AE02               	btfss	___awdiv@dividend+1,7,c
  8835  001ACE  D006               	goto	i2l3066
  8836  001AD0  6C01               	negf	___awdiv@dividend,c
  8837  001AD2  1E02               	comf	___awdiv@dividend+1,f,c
  8838  001AD4  B0D8               	btfsc	status,0,c
  8839  001AD6  2A02               	incf	___awdiv@dividend+1,f,c
  8840  001AD8  0E01               	movlw	1
  8841  001ADA  1A06               	xorwf	___awdiv@sign,f,c
  8842  001ADC                     i2l3066:
  8843  001ADC  0E00               	movlw	0
  8844  001ADE  6E08               	movwf	___awdiv@quotient+1,c
  8845  001AE0  0E00               	movlw	0
  8846  001AE2  6E07               	movwf	___awdiv@quotient,c
  8847  001AE4  5003               	movf	___awdiv@divisor,w,c
  8848  001AE6  1004               	iorwf	___awdiv@divisor+1,w,c
  8849  001AE8  B4D8               	btfsc	status,2,c
  8850  001AEA  D01C               	goto	i2l3088
  8851  001AEC  0E01               	movlw	1
  8852  001AEE  6E05               	movwf	___awdiv@counter,c
  8853  001AF0  D004               	goto	i2l3074
  8854  001AF2                     i2l3072:
  8855  001AF2  90D8               	bcf	status,0,c
  8856  001AF4  3603               	rlcf	___awdiv@divisor,f,c
  8857  001AF6  3604               	rlcf	___awdiv@divisor+1,f,c
  8858  001AF8  2A05               	incf	___awdiv@counter,f,c
  8859  001AFA                     i2l3074:
  8860  001AFA  AE04               	btfss	___awdiv@divisor+1,7,c
  8861  001AFC  D7FA               	goto	i2l3072
  8862  001AFE                     i2l3076:
  8863  001AFE  90D8               	bcf	status,0,c
  8864  001B00  3607               	rlcf	___awdiv@quotient,f,c
  8865  001B02  3608               	rlcf	___awdiv@quotient+1,f,c
  8866  001B04  5003               	movf	___awdiv@divisor,w,c
  8867  001B06  5C01               	subwf	___awdiv@dividend,w,c
  8868  001B08  5004               	movf	___awdiv@divisor+1,w,c
  8869  001B0A  5802               	subwfb	___awdiv@dividend+1,w,c
  8870  001B0C  A0D8               	btfss	status,0,c
  8871  001B0E  D005               	goto	i2l3084
  8872  001B10  5003               	movf	___awdiv@divisor,w,c
  8873  001B12  5E01               	subwf	___awdiv@dividend,f,c
  8874  001B14  5004               	movf	___awdiv@divisor+1,w,c
  8875  001B16  5A02               	subwfb	___awdiv@dividend+1,f,c
  8876  001B18  8007               	bsf	___awdiv@quotient,0,c
  8877  001B1A                     i2l3084:
  8878  001B1A  90D8               	bcf	status,0,c
  8879  001B1C  3204               	rrcf	___awdiv@divisor+1,f,c
  8880  001B1E  3203               	rrcf	___awdiv@divisor,f,c
  8881  001B20  2E05               	decfsz	___awdiv@counter,f,c
  8882  001B22  D7ED               	goto	i2l3076
  8883  001B24                     i2l3088:
  8884  001B24  5006               	movf	___awdiv@sign,w,c
  8885  001B26  B4D8               	btfsc	status,2,c
  8886  001B28  D004               	goto	i2l3092
  8887  001B2A  6C07               	negf	___awdiv@quotient,c
  8888  001B2C  1E08               	comf	___awdiv@quotient+1,f,c
  8889  001B2E  B0D8               	btfsc	status,0,c
  8890  001B30  2A08               	incf	___awdiv@quotient+1,f,c
  8891  001B32                     i2l3092:
  8892  001B32  C007  F001         	movff	___awdiv@quotient,?___awdiv
  8893  001B36  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  8894  001B3A  0012               	return	
  8895  001B3C                     __end_of___awdiv:
  8896                           	opt stack 0
  8897                           pclatu	equ	0xFFB
  8898                           pclath	equ	0xFFA
  8899                           tblptru	equ	0xFF8
  8900                           tblptrh	equ	0xFF7
  8901                           tblptrl	equ	0xFF6
  8902                           tablat	equ	0xFF5
  8903                           prodh	equ	0xFF4
  8904                           prodl	equ	0xFF3
  8905                           intcon	equ	0xFF2
  8906                           intcon3	equ	0xFF0
  8907                           postinc0	equ	0xFEE
  8908                           fsr0h	equ	0xFEA
  8909                           fsr0l	equ	0xFE9
  8910                           wreg	equ	0xFE8
  8911                           plusw1	equ	0xFE3
  8912                           fsr1h	equ	0xFE2
  8913                           fsr1l	equ	0xFE1
  8914                           indf2	equ	0xFDF
  8915                           postinc2	equ	0xFDE
  8916                           postdec2	equ	0xFDD
  8917                           plusw2	equ	0xFDB
  8918                           fsr2h	equ	0xFDA
  8919                           fsr2l	equ	0xFD9
  8920                           status	equ	0xFD8
  8921                           
  8922 ;; *************** function _PermLog *****************
  8923 ;; Defined at:
  8924 ;;		line 90 in file "eeprom.c"
  8925 ;; Parameters:    Size  Location     Type
  8926 ;;		None
  8927 ;; Auto vars:     Size  Location     Type
  8928 ;;  sorted          4   55[COMRAM] unsigned char [4]
  8929 ;;  time            2   60[COMRAM] unsigned int 
  8930 ;;  backruns        1   62[COMRAM] unsigned char 
  8931 ;;  goback          1   59[COMRAM] unsigned char 
  8932 ;; Return value:  Size  Location     Type
  8933 ;;                  1    wreg      void 
  8934 ;; Registers used:
  8935 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8936 ;; Tracked objects:
  8937 ;;		On entry : 0/0
  8938 ;;		On exit  : 0/0
  8939 ;;		Unchanged: 0/0
  8940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8942 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8943 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8944 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8945 ;;Total ram usage:       10 bytes
  8946 ;; Hardware stack levels used:    1
  8947 ;; Hardware stack levels required when called:    4
  8948 ;; This function calls:
  8949 ;;		_ReadRun
  8950 ;;		_captureKeypad
  8951 ;;		_showInfo
  8952 ;;		i2_lcdInst
  8953 ;;		i2_printf
  8954 ;; This function is called by:
  8955 ;;		_intrpt
  8956 ;; This function uses a non-reentrant model
  8957 ;;
  8958                           
  8959                           	psect	text49
  8960  0014BC                     __ptext49:
  8961                           	opt stack 0
  8962  0014BC                     _PermLog:
  8963                           	opt stack 21
  8964                           
  8965                           ;eeprom.c: 91: unsigned char goback = 0;
  8966                           
  8967                           ;incstack = 0
  8968  0014BC  0E00               	movlw	0
  8969  0014BE  D065               	goto	L2
  8970  0014C0                     i2l4214:
  8971                           
  8972                           ;eeprom.c: 93: lcdInst(0b10000000);
  8973  0014C0  0E80               	movlw	128
  8974  0014C2  EC6A  F011         	call	i2_lcdInst
  8975                           
  8976                           ;eeprom.c: 94: printf("Permanent log:       ");
  8977  0014C6  0EB5               	movlw	low STR_50
  8978  0014C8  6E0D               	movwf	i2printf@f,c
  8979  0014CA  0EFE               	movlw	high STR_50
  8980  0014CC  6E0E               	movwf	i2printf@f+1,c
  8981  0014CE  EC97  F003         	call	i2_printf	;wreg free
  8982                           
  8983                           ;eeprom.c: 95: lcdInst(0b11000000);
  8984  0014D2  0EC0               	movlw	192
  8985  0014D4  EC6A  F011         	call	i2_lcdInst
  8986                           
  8987                           ;eeprom.c: 96: printf("Which run?       ");
  8988  0014D8  0E6D               	movlw	low STR_51
  8989  0014DA  6E0D               	movwf	i2printf@f,c
  8990  0014DC  0EFF               	movlw	high STR_51
  8991  0014DE  6E0E               	movwf	i2printf@f+1,c
  8992  0014E0  EC97  F003         	call	i2_printf	;wreg free
  8993                           
  8994                           ;eeprom.c: 97: unsigned char backruns = captureKeypad();
  8995  0014E4  EC0D  F011         	call	_captureKeypad	;wreg free
  8996  0014E8  5001               	movf	?_captureKeypad,w,c
  8997  0014EA  6E3F               	movwf	PermLog@backruns,c
  8998                           
  8999                           ;eeprom.c: 98: if (backruns == 3)backruns = 2;
  9000  0014EC  0E03               	movlw	3
  9001  0014EE  183F               	xorwf	PermLog@backruns,w,c
  9002  0014F0  A4D8               	btfss	status,2,c
  9003  0014F2  D002               	goto	i2l4226
  9004  0014F4  0E02               	movlw	2
  9005  0014F6  6E3F               	movwf	PermLog@backruns,c
  9006  0014F8                     i2l4226:
  9007                           
  9008                           ;eeprom.c: 99: if (backruns == 4)backruns = 3;
  9009  0014F8  0E04               	movlw	4
  9010  0014FA  183F               	xorwf	PermLog@backruns,w,c
  9011  0014FC  A4D8               	btfss	status,2,c
  9012  0014FE  D002               	goto	i2l4230
  9013  001500  0E03               	movlw	3
  9014  001502  6E3F               	movwf	PermLog@backruns,c
  9015  001504                     i2l4230:
  9016                           
  9017                           ;eeprom.c: 100: if (backruns < 4) {
  9018  001504  0E04               	movlw	4
  9019  001506  603F               	cpfslt	PermLog@backruns,c
  9020  001508  D03F               	goto	i2l4248
  9021                           
  9022                           ;eeprom.c: 101: unsigned int time;
  9023                           ;eeprom.c: 102: unsigned char sorted[] = {0, 0, 0, 0};
  9024  00150A  C092  F038         	movff	PermLog@F3082,PermLog@sorted
  9025  00150E  C093  F039         	movff	PermLog@F3082+1,PermLog@sorted+1
  9026  001512  C094  F03A         	movff	PermLog@F3082+2,PermLog@sorted+2
  9027  001516  C095  F03B         	movff	PermLog@F3082+3,PermLog@sorted+3
  9028                           
  9029                           ;eeprom.c: 103: ReadRun(backruns, sorted, &time);
  9030  00151A  0E38               	movlw	low PermLog@sorted
  9031  00151C  6E03               	movwf	ReadRun@sorted,c
  9032  00151E  0E00               	movlw	high PermLog@sorted
  9033  001520  6E04               	movwf	ReadRun@sorted+1,c
  9034  001522  0E3D               	movlw	low PermLog@time
  9035  001524  6E05               	movwf	ReadRun@time,c
  9036  001526  0E00               	movlw	high PermLog@time
  9037  001528  6E06               	movwf	ReadRun@time+1,c
  9038  00152A  503F               	movf	PermLog@backruns,w,c
  9039  00152C  EC5F  F008         	call	_ReadRun
  9040                           
  9041                           ;eeprom.c: 104: lcdInst(0b10000000);
  9042  001530  0E80               	movlw	128
  9043  001532  EC6A  F011         	call	i2_lcdInst
  9044                           
  9045                           ;eeprom.c: 105: printf("showing %u      ", backruns);
  9046  001536  0EA2               	movlw	low STR_52
  9047  001538  6E0D               	movwf	i2printf@f,c
  9048  00153A  0EFF               	movlw	high STR_52
  9049  00153C  6E0E               	movwf	i2printf@f+1,c
  9050  00153E  C03F  F00F         	movff	PermLog@backruns,?i2_printf+2
  9051  001542  6A10               	clrf	?i2_printf+3,c
  9052  001544  EC97  F003         	call	i2_printf	;wreg free
  9053                           
  9054                           ;eeprom.c: 106: lcdInst(0b11000000);
  9055  001548  0EC0               	movlw	192
  9056  00154A  EC6A  F011         	call	i2_lcdInst
  9057                           
  9058                           ;eeprom.c: 107: printf("runs before     ");
  9059  00154E  0EB3               	movlw	low STR_53
  9060  001550  6E0D               	movwf	i2printf@f,c
  9061  001552  0EFF               	movlw	high STR_53
  9062  001554  6E0E               	movwf	i2printf@f+1,c
  9063  001556  EC97  F003         	call	i2_printf	;wreg free
  9064                           
  9065                           ;eeprom.c: 108: _delay((unsigned long)((700)*(8000000/4000.0)));
  9066  00155A  0E08               	movlw	8
  9067  00155C  6E37               	movwf	(??_PermLog+1)& (0+255),c
  9068  00155E  0E1B               	movlw	27
  9069  001560  6E36               	movwf	??_PermLog& (0+255),c
  9070  001562  0E27               	movlw	39
  9071  001564                     i2u325_47:
  9072  001564  2EE8               	decfsz	wreg,f,c
  9073  001566  D7FE               	bra	i2u325_47
  9074  001568  2E36               	decfsz	??_PermLog& (0+255),f,c
  9075  00156A  D7FC               	bra	i2u325_47
  9076  00156C  2E37               	decfsz	(??_PermLog+1)& (0+255),f,c
  9077  00156E  D7FA               	bra	i2u325_47
  9078  001570  F000               	nop	
  9079                           
  9080                           ;eeprom.c: 109: showInfo(time, sorted);
  9081  001572  C03D  F029         	movff	PermLog@time,showInfo@time
  9082  001576  C03E  F02A         	movff	PermLog@time+1,showInfo@time+1
  9083  00157A  0E38               	movlw	low PermLog@sorted
  9084  00157C  6E2B               	movwf	showInfo@sorted,c
  9085  00157E  0E00               	movlw	high PermLog@sorted
  9086  001580  6E2C               	movwf	showInfo@sorted+1,c
  9087  001582  EC1E  F005         	call	_showInfo	;wreg free
  9088                           
  9089                           ;eeprom.c: 110: } else goback = 1;
  9090  001586  D002               	goto	i2l441
  9091  001588                     i2l4248:
  9092  001588  0E01               	movlw	1
  9093  00158A                     L2:
  9094  00158A  6E3C               	movwf	PermLog@goback,c
  9095  00158C                     i2l441:
  9096  00158C  503C               	movf	PermLog@goback,w,c
  9097  00158E  A4D8               	btfss	status,2,c
  9098  001590  0012               	return	
  9099  001592  D796               	goto	i2l4214
  9100  001594                     __end_of_PermLog:
  9101                           	opt stack 0
  9102                           pclatu	equ	0xFFB
  9103                           pclath	equ	0xFFA
  9104                           tblptru	equ	0xFF8
  9105                           tblptrh	equ	0xFF7
  9106                           tblptrl	equ	0xFF6
  9107                           tablat	equ	0xFF5
  9108                           prodh	equ	0xFF4
  9109                           prodl	equ	0xFF3
  9110                           intcon	equ	0xFF2
  9111                           intcon3	equ	0xFF0
  9112                           postinc0	equ	0xFEE
  9113                           fsr0h	equ	0xFEA
  9114                           fsr0l	equ	0xFE9
  9115                           wreg	equ	0xFE8
  9116                           plusw1	equ	0xFE3
  9117                           fsr1h	equ	0xFE2
  9118                           fsr1l	equ	0xFE1
  9119                           indf2	equ	0xFDF
  9120                           postinc2	equ	0xFDE
  9121                           postdec2	equ	0xFDD
  9122                           plusw2	equ	0xFDB
  9123                           fsr2h	equ	0xFDA
  9124                           fsr2l	equ	0xFD9
  9125                           status	equ	0xFD8
  9126                           
  9127 ;; *************** function _showInfo *****************
  9128 ;; Defined at:
  9129 ;;		line 23 in file "modules.c"
  9130 ;; Parameters:    Size  Location     Type
  9131 ;;  time            2   40[COMRAM] unsigned int 
  9132 ;;  sorted          2   42[COMRAM] PTR unsigned char 
  9133 ;;		 -> PermLog@sorted(4), simulate@sorted(4), 
  9134 ;; Auto vars:     Size  Location     Type
  9135 ;;  stop            2   51[COMRAM] int 
  9136 ;;  type            2   49[COMRAM] int 
  9137 ;; Return value:  Size  Location     Type
  9138 ;;                  1    wreg      void 
  9139 ;; Registers used:
  9140 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9141 ;; Tracked objects:
  9142 ;;		On entry : 0/0
  9143 ;;		On exit  : 0/0
  9144 ;;		Unchanged: 0/0
  9145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9146 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9147 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9148 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9149 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9150 ;;Total ram usage:       13 bytes
  9151 ;; Hardware stack levels used:    1
  9152 ;; Hardware stack levels required when called:    3
  9153 ;; This function calls:
  9154 ;;		_captureKeypad
  9155 ;;		i2_lcdInst
  9156 ;;		i2_printf
  9157 ;; This function is called by:
  9158 ;;		_simulate
  9159 ;;		_PermLog
  9160 ;; This function uses a non-reentrant model
  9161 ;;
  9162                           
  9163                           	psect	text50
  9164  000A3C                     __ptext50:
  9165                           	opt stack 0
  9166  000A3C                     _showInfo:
  9167                           	opt stack 21
  9168                           
  9169                           ;modules.c: 24: lcdInst(0b10000000);
  9170                           
  9171                           ;incstack = 0
  9172  000A3C  0E80               	movlw	128
  9173  000A3E  EC6A  F011         	call	i2_lcdInst
  9174                           
  9175                           ;modules.c: 25: printf("Press a number          ");
  9176  000A42  0EDA               	movlw	low STR_22
  9177  000A44  6E0D               	movwf	i2printf@f,c
  9178  000A46  0EFD               	movlw	high STR_22
  9179  000A48  6E0E               	movwf	i2printf@f+1,c
  9180  000A4A  EC97  F003         	call	i2_printf	;wreg free
  9181                           
  9182                           ;modules.c: 26: lcdInst(0b11000000);
  9183  000A4E  0EC0               	movlw	192
  9184  000A50  EC6A  F011         	call	i2_lcdInst
  9185                           
  9186                           ;modules.c: 27: printf("For more info          ");
  9187  000A54  0E6E               	movlw	low STR_23
  9188  000A56  6E0D               	movwf	i2printf@f,c
  9189  000A58  0EFE               	movlw	high STR_23
  9190  000A5A  6E0E               	movwf	i2printf@f+1,c
  9191  000A5C  EC97  F003         	call	i2_printf	;wreg free
  9192                           
  9193                           ;modules.c: 28: int type = 0;
  9194  000A60  0E00               	movlw	0
  9195  000A62  6E33               	movwf	showInfo@type+1,c
  9196  000A64  0E00               	movlw	0
  9197  000A66  6E32               	movwf	showInfo@type,c
  9198                           
  9199                           ;modules.c: 29: int stop = 0;
  9200  000A68  0E00               	movlw	0
  9201  000A6A  6E35               	movwf	showInfo@stop+1,c
  9202  000A6C  0E00               	movlw	0
  9203  000A6E  D0D7               	goto	L3
  9204  000A70                     i2l3962:
  9205                           
  9206                           ;modules.c: 31: type = captureKeypad();
  9207  000A70  EC0D  F011         	call	_captureKeypad	;wreg free
  9208  000A74  C001  F032         	movff	?_captureKeypad,showInfo@type
  9209  000A78  C002  F033         	movff	?_captureKeypad+1,showInfo@type+1
  9210                           
  9211                           ;modules.c: 33: switch (type) {
  9212  000A7C  D0D2               	goto	i2l4002
  9213  000A7E                     i2l3964:
  9214                           
  9215                           ;modules.c: 35: lcdInst(0b10000000);
  9216  000A7E  0E80               	movlw	128
  9217  000A80  EC6A  F011         	call	i2_lcdInst
  9218                           
  9219                           ;modules.c: 36: printf("Time Elapsed:          ");
  9220  000A84  0E3E               	movlw	low STR_24
  9221  000A86  6E0D               	movwf	i2printf@f,c
  9222  000A88  0EFE               	movlw	high STR_24
  9223  000A8A  6E0E               	movwf	i2printf@f+1,c
  9224  000A8C  EC97  F003         	call	i2_printf	;wreg free
  9225                           
  9226                           ;modules.c: 37: lcdInst(0b11000000);
  9227  000A90  0EC0               	movlw	192
  9228  000A92  EC6A  F011         	call	i2_lcdInst
  9229                           
  9230                           ;modules.c: 38: printf("%u seconds          ", time);
  9231  000A96  0E0A               	movlw	low STR_25
  9232  000A98  6E0D               	movwf	i2printf@f,c
  9233  000A9A  0EFF               	movlw	high STR_25
  9234  000A9C  6E0E               	movwf	i2printf@f+1,c
  9235  000A9E  C029  F00F         	movff	showInfo@time,?i2_printf+2
  9236  000AA2  C02A  F010         	movff	showInfo@time+1,?i2_printf+3
  9237  000AA6  EC97  F003         	call	i2_printf	;wreg free
  9238                           
  9239                           ;modules.c: 39: break;
  9240  000AAA  D0D7               	goto	i2l4004
  9241  000AAC                     i2l3970:
  9242                           
  9243                           ;modules.c: 41: lcdInst(0b10000000);
  9244  000AAC  0E80               	movlw	128
  9245  000AAE  EC6A  F011         	call	i2_lcdInst
  9246                           
  9247                           ;modules.c: 42: printf("Total Sorted:          ");
  9248  000AB2  0E56               	movlw	low STR_26
  9249  000AB4  6E0D               	movwf	i2printf@f,c
  9250  000AB6  0EFE               	movlw	high STR_26
  9251  000AB8  6E0E               	movwf	i2printf@f+1,c
  9252  000ABA  EC97  F003         	call	i2_printf	;wreg free
  9253                           
  9254                           ;modules.c: 43: lcdInst(0b11000000);
  9255  000ABE  0EC0               	movlw	192
  9256  000AC0  EC6A  F011         	call	i2_lcdInst
  9257                           
  9258                           ;modules.c: 44: printf("%u batteries          ", sorted[0] + sorted[1] + sorted[2] + sor
      +                          ted[3]);
  9259  000AC4  0E9E               	movlw	low STR_27
  9260  000AC6  6E0D               	movwf	i2printf@f,c
  9261  000AC8  0EFE               	movlw	high STR_27
  9262  000ACA  6E0E               	movwf	i2printf@f+1,c
  9263  000ACC  EE20 F003          	lfsr	2,3
  9264  000AD0  502B               	movf	showInfo@sorted,w,c
  9265  000AD2  26D9               	addwf	fsr2l,f,c
  9266  000AD4  502C               	movf	showInfo@sorted+1,w,c
  9267  000AD6  22DA               	addwfc	fsr2h,f,c
  9268  000AD8  50DF               	movf	indf2,w,c
  9269  000ADA  6E2D               	movwf	??_showInfo& (0+255),c
  9270  000ADC  C02B  FFD9         	movff	showInfo@sorted,fsr2l
  9271  000AE0  C02C  FFDA         	movff	showInfo@sorted+1,fsr2h
  9272  000AE4  50DF               	movf	indf2,w,c
  9273  000AE6  6E2E               	movwf	(??_showInfo+1)& (0+255),c
  9274  000AE8  6A2F               	clrf	(??_showInfo+2)& (0+255),c
  9275  000AEA  EE20 F001          	lfsr	2,1
  9276  000AEE  502B               	movf	showInfo@sorted,w,c
  9277  000AF0  26D9               	addwf	fsr2l,f,c
  9278  000AF2  502C               	movf	showInfo@sorted+1,w,c
  9279  000AF4  22DA               	addwfc	fsr2h,f,c
  9280  000AF6  50DF               	movf	indf2,w,c
  9281  000AF8  6E30               	movwf	(??_showInfo+3)& (0+255),c
  9282  000AFA  5030               	movf	??_showInfo+3,w,c
  9283  000AFC  262E               	addwf	??_showInfo+1,f,c
  9284  000AFE  0E00               	movlw	0
  9285  000B00  222F               	addwfc	??_showInfo+2,f,c
  9286  000B02  EE20 F002          	lfsr	2,2
  9287  000B06  502B               	movf	showInfo@sorted,w,c
  9288  000B08  26D9               	addwf	fsr2l,f,c
  9289  000B0A  502C               	movf	showInfo@sorted+1,w,c
  9290  000B0C  22DA               	addwfc	fsr2h,f,c
  9291  000B0E  50DF               	movf	indf2,w,c
  9292  000B10  6E31               	movwf	(??_showInfo+4)& (0+255),c
  9293  000B12  5031               	movf	??_showInfo+4,w,c
  9294  000B14  262E               	addwf	??_showInfo+1,f,c
  9295  000B16  0E00               	movlw	0
  9296  000B18  222F               	addwfc	??_showInfo+2,f,c
  9297  000B1A  502D               	movf	??_showInfo,w,c
  9298  000B1C  242E               	addwf	??_showInfo+1,w,c
  9299  000B1E  6E0F               	movwf	?i2_printf+2,c
  9300  000B20  0E00               	movlw	0
  9301  000B22  202F               	addwfc	??_showInfo+2,w,c
  9302  000B24  6E10               	movwf	?i2_printf+3,c
  9303  000B26  EC97  F003         	call	i2_printf	;wreg free
  9304                           
  9305                           ;modules.c: 45: break;
  9306  000B2A  D097               	goto	i2l4004
  9307  000B2C                     i2l3976:
  9308                           
  9309                           ;modules.c: 47: lcdInst(0b10000000);
  9310  000B2C  0E80               	movlw	128
  9311  000B2E  EC6A  F011         	call	i2_lcdInst
  9312                           
  9313                           ;modules.c: 48: printf("AA Sorted:          ");
  9314  000B32  0EE0               	movlw	low STR_28
  9315  000B34  6E0D               	movwf	i2printf@f,c
  9316  000B36  0EFE               	movlw	high STR_28
  9317  000B38  6E0E               	movwf	i2printf@f+1,c
  9318  000B3A  EC97  F003         	call	i2_printf	;wreg free
  9319                           
  9320                           ;modules.c: 49: lcdInst(0b11000000);
  9321  000B3E  0EC0               	movlw	192
  9322  000B40  EC6A  F011         	call	i2_lcdInst
  9323                           
  9324                           ;modules.c: 50: printf("%u             ", sorted[0]);
  9325  000B44  0EC4               	movlw	low STR_29
  9326  000B46  6E0D               	movwf	i2printf@f,c
  9327  000B48  0EFF               	movlw	high STR_29
  9328  000B4A  6E0E               	movwf	i2printf@f+1,c
  9329  000B4C  C02B  FFD9         	movff	showInfo@sorted,fsr2l
  9330  000B50  C02C  FFDA         	movff	showInfo@sorted+1,fsr2h
  9331  000B54  50DF               	movf	indf2,w,c
  9332  000B56  6E2D               	movwf	??_showInfo& (0+255),c
  9333  000B58  502D               	movf	??_showInfo,w,c
  9334  000B5A  6E0F               	movwf	?i2_printf+2,c
  9335  000B5C  6A10               	clrf	?i2_printf+3,c
  9336  000B5E  EC97  F003         	call	i2_printf	;wreg free
  9337                           
  9338                           ;modules.c: 51: break;
  9339  000B62  D07B               	goto	i2l4004
  9340  000B64                     i2l3982:
  9341                           
  9342                           ;modules.c: 53: lcdInst(0b10000000);
  9343  000B64  0E80               	movlw	128
  9344  000B66  EC6A  F011         	call	i2_lcdInst
  9345                           
  9346                           ;modules.c: 54: printf("C Sorted:          ");
  9347  000B6A  0E33               	movlw	low STR_30
  9348  000B6C  6E0D               	movwf	i2printf@f,c
  9349  000B6E  0EFF               	movlw	high STR_30
  9350  000B70  6E0E               	movwf	i2printf@f+1,c
  9351  000B72  EC97  F003         	call	i2_printf	;wreg free
  9352                           
  9353                           ;modules.c: 55: lcdInst(0b11000000);
  9354  000B76  0EC0               	movlw	192
  9355  000B78  EC6A  F011         	call	i2_lcdInst
  9356                           
  9357                           ;modules.c: 56: printf("%u             ", sorted[1]);
  9358  000B7C  0EC4               	movlw	low STR_29
  9359  000B7E  6E0D               	movwf	i2printf@f,c
  9360  000B80  0EFF               	movlw	high STR_29
  9361  000B82  6E0E               	movwf	i2printf@f+1,c
  9362  000B84  EE20 F001          	lfsr	2,1
  9363  000B88  502B               	movf	showInfo@sorted,w,c
  9364  000B8A  26D9               	addwf	fsr2l,f,c
  9365  000B8C  502C               	movf	showInfo@sorted+1,w,c
  9366  000B8E  22DA               	addwfc	fsr2h,f,c
  9367  000B90  50DF               	movf	indf2,w,c
  9368  000B92  6E2D               	movwf	??_showInfo& (0+255),c
  9369  000B94  502D               	movf	??_showInfo,w,c
  9370  000B96  6E0F               	movwf	?i2_printf+2,c
  9371  000B98  6A10               	clrf	?i2_printf+3,c
  9372  000B9A  EC97  F003         	call	i2_printf	;wreg free
  9373                           
  9374                           ;modules.c: 57: break;
  9375  000B9E  D05D               	goto	i2l4004
  9376  000BA0                     i2l3988:
  9377                           
  9378                           ;modules.c: 59: lcdInst(0b10000000);
  9379  000BA0  0E80               	movlw	128
  9380  000BA2  EC6A  F011         	call	i2_lcdInst
  9381                           
  9382                           ;modules.c: 60: printf("9V Sorted:          ");
  9383  000BA6  0EF5               	movlw	low STR_32
  9384  000BA8  6E0D               	movwf	i2printf@f,c
  9385  000BAA  0EFE               	movlw	high STR_32
  9386  000BAC  6E0E               	movwf	i2printf@f+1,c
  9387  000BAE  EC97  F003         	call	i2_printf	;wreg free
  9388                           
  9389                           ;modules.c: 61: lcdInst(0b11000000);
  9390  000BB2  0EC0               	movlw	192
  9391  000BB4  EC6A  F011         	call	i2_lcdInst
  9392                           
  9393                           ;modules.c: 62: printf("%u             ", sorted[2]);
  9394  000BB8  0EC4               	movlw	low STR_29
  9395  000BBA  6E0D               	movwf	i2printf@f,c
  9396  000BBC  0EFF               	movlw	high STR_29
  9397  000BBE  6E0E               	movwf	i2printf@f+1,c
  9398  000BC0  EE20 F002          	lfsr	2,2
  9399  000BC4  502B               	movf	showInfo@sorted,w,c
  9400  000BC6  26D9               	addwf	fsr2l,f,c
  9401  000BC8  502C               	movf	showInfo@sorted+1,w,c
  9402  000BCA  22DA               	addwfc	fsr2h,f,c
  9403  000BCC  50DF               	movf	indf2,w,c
  9404  000BCE  6E2D               	movwf	??_showInfo& (0+255),c
  9405  000BD0  502D               	movf	??_showInfo,w,c
  9406  000BD2  6E0F               	movwf	?i2_printf+2,c
  9407  000BD4  6A10               	clrf	?i2_printf+3,c
  9408  000BD6  EC97  F003         	call	i2_printf	;wreg free
  9409                           
  9410                           ;modules.c: 63: break;
  9411  000BDA  D03F               	goto	i2l4004
  9412  000BDC                     i2l3994:
  9413                           
  9414                           ;modules.c: 65: lcdInst(0b10000000);
  9415  000BDC  0E80               	movlw	128
  9416  000BDE  EC6A  F011         	call	i2_lcdInst
  9417                           
  9418                           ;modules.c: 66: printf("Uncharged:          ");
  9419  000BE2  0ECB               	movlw	low STR_34
  9420  000BE4  6E0D               	movwf	i2printf@f,c
  9421  000BE6  0EFE               	movlw	high STR_34
  9422  000BE8  6E0E               	movwf	i2printf@f+1,c
  9423  000BEA  EC97  F003         	call	i2_printf	;wreg free
  9424                           
  9425                           ;modules.c: 67: lcdInst(0b11000000);
  9426  000BEE  0EC0               	movlw	192
  9427  000BF0  EC6A  F011         	call	i2_lcdInst
  9428                           
  9429                           ;modules.c: 68: printf("%u             ", sorted[3]);
  9430  000BF4  0EC4               	movlw	low STR_29
  9431  000BF6  6E0D               	movwf	i2printf@f,c
  9432  000BF8  0EFF               	movlw	high STR_29
  9433  000BFA  6E0E               	movwf	i2printf@f+1,c
  9434  000BFC  EE20 F003          	lfsr	2,3
  9435  000C00  502B               	movf	showInfo@sorted,w,c
  9436  000C02  26D9               	addwf	fsr2l,f,c
  9437  000C04  502C               	movf	showInfo@sorted+1,w,c
  9438  000C06  22DA               	addwfc	fsr2h,f,c
  9439  000C08  50DF               	movf	indf2,w,c
  9440  000C0A  6E2D               	movwf	??_showInfo& (0+255),c
  9441  000C0C  502D               	movf	??_showInfo,w,c
  9442  000C0E  6E0F               	movwf	?i2_printf+2,c
  9443  000C10  6A10               	clrf	?i2_printf+3,c
  9444  000C12  EC97  F003         	call	i2_printf	;wreg free
  9445                           
  9446                           ;modules.c: 69: break;
  9447  000C16  D021               	goto	i2l4004
  9448  000C18                     i2l4000:
  9449                           
  9450                           ;modules.c: 71: stop = 1;
  9451  000C18  0E00               	movlw	0
  9452  000C1A  6E35               	movwf	showInfo@stop+1,c
  9453  000C1C  0E01               	movlw	1
  9454  000C1E                     L3:
  9455  000C1E  6E34               	movwf	showInfo@stop,c
  9456                           
  9457                           ;modules.c: 72: }
  9458  000C20  D01C               	goto	i2l4004
  9459  000C22                     i2l4002:
  9460  000C22  C032  F02D         	movff	showInfo@type,??_showInfo
  9461  000C26  C033  F02E         	movff	showInfo@type+1,??_showInfo+1
  9462                           
  9463                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9464                           ; Switch size 1, requested type "space"
  9465                           ; Number of cases is 1, Range of values is 0 to 0
  9466                           ; switch strategies available:
  9467                           ; Name         Instructions Cycles
  9468                           ; simple_byte            4     3 (average)
  9469                           ;	Chosen strategy is simple_byte
  9470  000C2A  502E               	movf	??_showInfo+1,w,c
  9471  000C2C  0A00               	xorlw	0	; case 0
  9472  000C2E  A4D8               	btfss	status,2,c
  9473  000C30  D7F3               	goto	i2l4000
  9474                           
  9475                           ; Switch size 1, requested type "space"
  9476                           ; Number of cases is 6, Range of values is 0 to 6
  9477                           ; switch strategies available:
  9478                           ; Name         Instructions Cycles
  9479                           ; simple_byte           19    10 (average)
  9480                           ;	Chosen strategy is simple_byte
  9481  000C32  502D               	movf	??_showInfo,w,c
  9482  000C34  0A00               	xorlw	0	; case 0
  9483  000C36  B4D8               	btfsc	status,2,c
  9484  000C38  D722               	goto	i2l3964
  9485  000C3A  0A01               	xorlw	1	; case 1
  9486  000C3C  B4D8               	btfsc	status,2,c
  9487  000C3E  D736               	goto	i2l3970
  9488  000C40  0A03               	xorlw	3	; case 2
  9489  000C42  B4D8               	btfsc	status,2,c
  9490  000C44  D773               	goto	i2l3976
  9491  000C46  0A06               	xorlw	6	; case 4
  9492  000C48  B4D8               	btfsc	status,2,c
  9493  000C4A  D78C               	goto	i2l3982
  9494  000C4C  0A01               	xorlw	1	; case 5
  9495  000C4E  B4D8               	btfsc	status,2,c
  9496  000C50  D7A7               	goto	i2l3988
  9497  000C52  0A03               	xorlw	3	; case 6
  9498  000C54  B4D8               	btfsc	status,2,c
  9499  000C56  D7C2               	goto	i2l3994
  9500  000C58  D7DF               	goto	i2l4000
  9501  000C5A                     i2l4004:
  9502  000C5A  5034               	movf	showInfo@stop,w,c
  9503  000C5C  1035               	iorwf	showInfo@stop+1,w,c
  9504  000C5E  A4D8               	btfss	status,2,c
  9505  000C60  0012               	return	
  9506  000C62  D706               	goto	i2l3962
  9507  000C64                     __end_of_showInfo:
  9508                           	opt stack 0
  9509                           pclatu	equ	0xFFB
  9510                           pclath	equ	0xFFA
  9511                           tblptru	equ	0xFF8
  9512                           tblptrh	equ	0xFF7
  9513                           tblptrl	equ	0xFF6
  9514                           tablat	equ	0xFF5
  9515                           prodh	equ	0xFF4
  9516                           prodl	equ	0xFF3
  9517                           intcon	equ	0xFF2
  9518                           intcon3	equ	0xFF0
  9519                           postinc0	equ	0xFEE
  9520                           fsr0h	equ	0xFEA
  9521                           fsr0l	equ	0xFE9
  9522                           wreg	equ	0xFE8
  9523                           plusw1	equ	0xFE3
  9524                           fsr1h	equ	0xFE2
  9525                           fsr1l	equ	0xFE1
  9526                           indf2	equ	0xFDF
  9527                           postinc2	equ	0xFDE
  9528                           postdec2	equ	0xFDD
  9529                           plusw2	equ	0xFDB
  9530                           fsr2h	equ	0xFDA
  9531                           fsr2l	equ	0xFD9
  9532                           status	equ	0xFD8
  9533                           
  9534 ;; *************** function i2_printf *****************
  9535 ;; Defined at:
  9536 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  9537 ;; Parameters:    Size  Location     Type
  9538 ;;  f               2   12[COMRAM] PTR const unsigned char 
  9539 ;;		 -> STR_53(17), STR_52(17), STR_51(18), STR_50(22), 
  9540 ;;		 -> STR_49(4), STR_48(4), STR_47(4), STR_46(4), 
  9541 ;;		 -> STR_45(4), STR_44(4), STR_43(4), STR_42(3), 
  9542 ;;		 -> STR_41(4), STR_40(4), STR_39(4), STR_38(4), 
  9543 ;;		 -> STR_37(18), STR_36(20), STR_35(16), STR_34(21), 
  9544 ;;		 -> STR_33(16), STR_32(21), STR_31(16), STR_30(20), 
  9545 ;;		 -> STR_29(16), STR_28(21), STR_27(23), STR_26(24), 
  9546 ;;		 -> STR_25(21), STR_24(24), STR_23(24), STR_22(25), 
  9547 ;;		 -> STR_21(19), STR_20(25), STR_19(25), STR_18(27), 
  9548 ;;		 -> STR_17(19), STR_16(25), STR_15(3), STR_14(3), 
  9549 ;;		 -> STR_13(3), STR_12(5), STR_11(3), STR_10(3), 
  9550 ;;		 -> STR_9(3), STR_8(4), STR_7(3), STR_6(3), 
  9551 ;;		 -> STR_5(3), STR_4(4), STR_3(5), STR_2(24), 
  9552 ;;		 -> STR_1(9), 
  9553 ;; Auto vars:     Size  Location     Type
  9554 ;;  printf          4    0        struct .
  9555 ;;  printf          2   37[COMRAM] int 
  9556 ;;  printf          2   34[COMRAM] unsigned int 
  9557 ;;  printf          2   31[COMRAM] unsigned int 
  9558 ;;  printf          2   28[COMRAM] PTR const unsigned char 
  9559 ;;		 -> printf@c(1), 
  9560 ;;  printf          2   26[COMRAM] PTR void [1]
  9561 ;;		 -> ?i2_printf(2), ?_printf(2), 
  9562 ;;  printf          1   39[COMRAM] char 
  9563 ;;  printf          1   36[COMRAM] unsigned char 
  9564 ;;  printf          1   33[COMRAM] char 
  9565 ;;  printf          1   30[COMRAM] unsigned char 
  9566 ;; Return value:  Size  Location     Type
  9567 ;;                  2   12[COMRAM] int 
  9568 ;; Registers used:
  9569 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9570 ;; Tracked objects:
  9571 ;;		On entry : 0/0
  9572 ;;		On exit  : 0/0
  9573 ;;		Unchanged: 0/0
  9574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9575 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9576 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9577 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9578 ;;      Totals:        28       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9579 ;;Total ram usage:       28 bytes
  9580 ;; Hardware stack levels used:    1
  9581 ;; Hardware stack levels required when called:    2
  9582 ;; This function calls:
  9583 ;;		i2___lwdiv
  9584 ;;		i2___lwmod
  9585 ;;		i2___wmul
  9586 ;;		i2_isdigit
  9587 ;;		i2_putch
  9588 ;; This function is called by:
  9589 ;;		_simulate
  9590 ;;		_showInfo
  9591 ;;		_stopMoving
  9592 ;;		_checkAA
  9593 ;;		_checkC
  9594 ;;		_check9
  9595 ;;		_PermLog
  9596 ;; This function uses a non-reentrant model
  9597 ;;
  9598                           
  9599                           	psect	text51
  9600  00072E                     __ptext51:
  9601                           	opt stack 0
  9602  00072E                     i2_printf:
  9603                           	opt stack 22
  9604                           
  9605                           ;doprnt.c: 466: va_list ap;
  9606                           ;doprnt.c: 499: signed char c;
  9607                           ;doprnt.c: 501: int width;
  9608                           ;doprnt.c: 506: signed char prec;
  9609                           ;doprnt.c: 508: unsigned char flag;
  9610                           ;doprnt.c: 523: union {
  9611                           ;doprnt.c: 524: unsigned long vd;
  9612                           ;doprnt.c: 525: double integ;
  9613                           ;doprnt.c: 526: } tmpval;
  9614                           ;doprnt.c: 528: unsigned int val;
  9615                           ;doprnt.c: 529: unsigned len;
  9616                           ;doprnt.c: 530: const char * cp;
  9617                           ;doprnt.c: 533: *ap = __va_start();
  9618                           
  9619                           ;incstack = 0
  9620  00072E  0E0F               	movlw	low (?i2_printf+2)
  9621  000730  6E1B               	movwf	i2printf@ap,c
  9622  000732  0E00               	movlw	high (?i2_printf+2)
  9623  000734  6E1C               	movwf	i2printf@ap+1,c
  9624                           
  9625                           ;doprnt.c: 536: while(c = *f++) {
  9626  000736  D175               	goto	i2l3596
  9627  000738                     i2l3474:
  9628                           
  9629                           ;doprnt.c: 538: if(c != '%')
  9630  000738  0E25               	movlw	37
  9631  00073A  1828               	xorwf	i2printf@c,w,c
  9632  00073C  B4D8               	btfsc	status,2,c
  9633  00073E  D004               	goto	i2l3478
  9634                           
  9635                           ;doprnt.c: 540: {
  9636                           ;doprnt.c: 541: (putch(c) );
  9637  000740  5028               	movf	i2printf@c,w,c
  9638  000742  EC64  F011         	call	i2_putch
  9639                           
  9640                           ;doprnt.c: 542: continue;
  9641  000746  D16D               	goto	i2l3596
  9642  000748                     i2l3478:
  9643                           
  9644                           ;doprnt.c: 543: }
  9645                           ;doprnt.c: 546: width = 0;
  9646  000748  0E00               	movlw	0
  9647  00074A  6E27               	movwf	i2printf@width+1,c
  9648  00074C  0E00               	movlw	0
  9649  00074E  6E26               	movwf	i2printf@width,c
  9650                           
  9651                           ;doprnt.c: 548: flag = 0;
  9652  000750  0E00               	movlw	0
  9653  000752  6E25               	movwf	i2printf@flag,c
  9654                           
  9655                           ;doprnt.c: 551: switch(*f) {
  9656                           
  9657                           ;doprnt.c: 550: for(;;) {
  9658  000754  D003               	goto	i2l3484
  9659  000756                     i2l3480:
  9660                           
  9661                           ;doprnt.c: 580: flag |= 0x04;
  9662  000756  8425               	bsf	i2printf@flag,2,c
  9663                           
  9664                           ;doprnt.c: 581: f++;
  9665  000758  4A0D               	infsnz	i2printf@f,f,c
  9666  00075A  2A0E               	incf	i2printf@f+1,f,c
  9667  00075C                     i2l3484:
  9668  00075C  C00D  FFF6         	movff	i2printf@f,tblptrl
  9669  000760  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9670  000764                     	if	0	;tblptru may be non-zero
  9671  000764                     	endif
  9672  000764                     	if	0	;tblptru may be non-zero
  9673  000764                     	endif
  9674  000764  0008               	tblrd		*
  9675  000766  50F5               	movf	tablat,w,c
  9676                           
  9677                           ; Switch size 1, requested type "space"
  9678                           ; Number of cases is 1, Range of values is 48 to 48
  9679                           ; switch strategies available:
  9680                           ; Name         Instructions Cycles
  9681                           ; simple_byte            4     3 (average)
  9682                           ;	Chosen strategy is simple_byte
  9683  000768  0A30               	xorlw	48	; case 48
  9684  00076A  B4D8               	btfsc	status,2,c
  9685  00076C  D7F4               	goto	i2l3480
  9686                           
  9687                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  9688                           
  9689                           ;doprnt.c: 586: }
  9690                           
  9691                           ;doprnt.c: 585: break;
  9692  00076E  C00D  FFF6         	movff	i2printf@f,tblptrl
  9693  000772  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9694  000776                     	if	0	;tblptru may be non-zero
  9695  000776                     	endif
  9696  000776                     	if	0	;tblptru may be non-zero
  9697  000776                     	endif
  9698  000776  0008               	tblrd		*
  9699  000778  50F5               	movf	tablat,w,c
  9700  00077A  ECFE  F010         	call	i2_isdigit
  9701  00077E  A0D8               	btfss	status,0,c
  9702  000780  D06F               	goto	i2l3524
  9703                           
  9704                           ;doprnt.c: 598: width = 0;
  9705  000782  0E00               	movlw	0
  9706  000784  6E27               	movwf	i2printf@width+1,c
  9707  000786  0E00               	movlw	0
  9708  000788  6E26               	movwf	i2printf@width,c
  9709  00078A                     i2l3490:
  9710                           
  9711                           ;doprnt.c: 600: width *= 10;
  9712  00078A  C026  F001         	movff	i2printf@width,i2___wmul@multiplier
  9713  00078E  C027  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  9714  000792  0E00               	movlw	0
  9715  000794  6E04               	movwf	i2___wmul@multiplicand+1,c
  9716  000796  0E0A               	movlw	10
  9717  000798  6E03               	movwf	i2___wmul@multiplicand,c
  9718  00079A  ECAD  F010         	call	i2___wmul	;wreg free
  9719  00079E  C001  F026         	movff	?i2___wmul,i2printf@width
  9720  0007A2  C002  F027         	movff	?i2___wmul+1,i2printf@width+1
  9721                           
  9722                           ;doprnt.c: 601: width += *f++ - '0';
  9723  0007A6  0ED0               	movlw	208
  9724  0007A8  6E17               	movwf	??i2_printf& (0+255),c
  9725  0007AA  0EFF               	movlw	255
  9726  0007AC  6E18               	movwf	(??i2_printf+1)& (0+255),c
  9727  0007AE  C00D  FFF6         	movff	i2printf@f,tblptrl
  9728  0007B2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9729  0007B6                     	if	0	;tblptru may be non-zero
  9730  0007B6                     	endif
  9731  0007B6                     	if	0	;tblptru may be non-zero
  9732  0007B6                     	endif
  9733  0007B6  0008               	tblrd		*
  9734  0007B8  50F5               	movf	tablat,w,c
  9735  0007BA  6E19               	movwf	(??i2_printf+2)& (0+255),c
  9736  0007BC  6A1A               	clrf	(??i2_printf+3)& (0+255),c
  9737  0007BE  5017               	movf	??i2_printf,w,c
  9738  0007C0  2619               	addwf	??i2_printf+2,f,c
  9739  0007C2  5018               	movf	??i2_printf+1,w,c
  9740  0007C4  221A               	addwfc	??i2_printf+3,f,c
  9741  0007C6  5019               	movf	??i2_printf+2,w,c
  9742  0007C8  2626               	addwf	i2printf@width,f,c
  9743  0007CA  501A               	movf	??i2_printf+3,w,c
  9744  0007CC  2227               	addwfc	i2printf@width+1,f,c
  9745  0007CE  4A0D               	infsnz	i2printf@f,f,c
  9746  0007D0  2A0E               	incf	i2printf@f+1,f,c
  9747                           
  9748                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  9749  0007D2  C00D  FFF6         	movff	i2printf@f,tblptrl
  9750  0007D6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9751  0007DA                     	if	0	;tblptru may be non-zero
  9752  0007DA                     	endif
  9753  0007DA                     	if	0	;tblptru may be non-zero
  9754  0007DA                     	endif
  9755  0007DA  0008               	tblrd		*
  9756  0007DC  50F5               	movf	tablat,w,c
  9757  0007DE  ECFE  F010         	call	i2_isdigit
  9758  0007E2  A0D8               	btfss	status,0,c
  9759  0007E4  D03D               	goto	i2l3524
  9760  0007E6  D7D1               	goto	i2l3490
  9761  0007E8                     i2l3498:
  9762                           
  9763                           ;doprnt.c: 721: flag |= 0x80;
  9764  0007E8  8E25               	bsf	i2printf@flag,7,c
  9765                           
  9766                           ;doprnt.c: 723: break;
  9767  0007EA  D04E               	goto	i2l3526
  9768  0007EC                     i2l3500:
  9769                           
  9770                           ;doprnt.c: 757: if(width > len)
  9771  0007EC  5026               	movf	i2printf@width,w,c
  9772  0007EE  5C20               	subwf	i2printf@len,w,c
  9773  0007F0  5027               	movf	i2printf@width+1,w,c
  9774  0007F2  5821               	subwfb	i2printf@len+1,w,c
  9775  0007F4  B0D8               	btfsc	status,0,c
  9776  0007F6  D005               	goto	i2l3504
  9777                           
  9778                           ;doprnt.c: 758: width -= len;
  9779  0007F8  5020               	movf	i2printf@len,w,c
  9780  0007FA  5E26               	subwf	i2printf@width,f,c
  9781  0007FC  5021               	movf	i2printf@len+1,w,c
  9782  0007FE  5A27               	subwfb	i2printf@width+1,f,c
  9783  000800  D008               	goto	i2l3508
  9784  000802                     i2l3504:
  9785                           
  9786                           ;doprnt.c: 759: else
  9787                           ;doprnt.c: 760: width = 0;
  9788  000802  0E00               	movlw	0
  9789  000804  6E27               	movwf	i2printf@width+1,c
  9790  000806  0E00               	movlw	0
  9791  000808  6E26               	movwf	i2printf@width,c
  9792                           
  9793                           ;doprnt.c: 764: while(width--)
  9794  00080A  D003               	goto	i2l3508
  9795  00080C                     i2l3506:
  9796                           
  9797                           ;doprnt.c: 765: (putch(' ') );
  9798  00080C  0E20               	movlw	32
  9799  00080E  EC64  F011         	call	i2_putch
  9800  000812                     i2l3508:
  9801  000812  0626               	decf	i2printf@width,f,c
  9802  000814  A0D8               	btfss	status,0,c
  9803  000816  0627               	decf	i2printf@width+1,f,c
  9804  000818  2826               	incf	i2printf@width,w,c
  9805  00081A  E1F8               	bnz	i2l3506
  9806  00081C  2827               	incf	i2printf@width+1,w,c
  9807  00081E  B4D8               	btfsc	status,2,c
  9808  000820  D00A               	goto	i2l3514
  9809  000822  D7F4               	goto	i2l3506
  9810  000824                     i2l3510:
  9811                           
  9812                           ;doprnt.c: 768: (putch(*cp++) );
  9813  000824  C01D  FFD9         	movff	i2printf@cp,fsr2l
  9814  000828  C01E  FFDA         	movff	i2printf@cp+1,fsr2h
  9815  00082C  50DF               	movf	indf2,w,c
  9816  00082E  EC64  F011         	call	i2_putch
  9817  000832  4A1D               	infsnz	i2printf@cp,f,c
  9818  000834  2A1E               	incf	i2printf@cp+1,f,c
  9819  000836                     i2l3514:
  9820  000836  0620               	decf	i2printf@len,f,c
  9821  000838  A0D8               	btfss	status,0,c
  9822  00083A  0621               	decf	i2printf@len+1,f,c
  9823  00083C  2820               	incf	i2printf@len,w,c
  9824  00083E  E1F2               	bnz	i2l3510
  9825  000840  2821               	incf	i2printf@len+1,w,c
  9826  000842  B4D8               	btfsc	status,2,c
  9827  000844  D0EE               	goto	i2l3596
  9828  000846  D7EE               	goto	i2l3510
  9829  000848                     i2l3516:
  9830                           
  9831                           ;doprnt.c: 805: cp = (char *)&c;
  9832  000848  0E28               	movlw	low i2printf@c
  9833  00084A  6E1D               	movwf	i2printf@cp,c
  9834  00084C  0E00               	movlw	high i2printf@c
  9835  00084E  6E1E               	movwf	i2printf@cp+1,c
  9836                           
  9837                           ;doprnt.c: 806: len = 1;
  9838  000850  0E00               	movlw	0
  9839  000852  6E21               	movwf	i2printf@len+1,c
  9840  000854  0E01               	movlw	1
  9841  000856  6E20               	movwf	i2printf@len,c
  9842                           
  9843                           ;doprnt.c: 807: goto dostring;
  9844  000858  D7C9               	goto	i2l3500
  9845  00085A                     i2l3520:
  9846                           
  9847                           ;doprnt.c: 818: flag |= 0xC0;
  9848  00085A  0EC0               	movlw	192
  9849  00085C  1225               	iorwf	i2printf@flag,f,c
  9850                           
  9851                           ;doprnt.c: 822: }
  9852                           
  9853                           ;doprnt.c: 819: break;
  9854  00085E  D014               	goto	i2l3526
  9855  000860                     i2l3524:
  9856  000860  C00D  FFF6         	movff	i2printf@f,tblptrl
  9857  000864  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9858  000868  4A0D               	infsnz	i2printf@f,f,c
  9859  00086A  2A0E               	incf	i2printf@f+1,f,c
  9860  00086C                     	if	0	;tblptru may be non-zero
  9861  00086C                     	endif
  9862  00086C                     	if	0	;tblptru may be non-zero
  9863  00086C                     	endif
  9864  00086C  0008               	tblrd		*
  9865  00086E  CFF5 F028          	movff	tablat,i2printf@c
  9866  000872  5028               	movf	i2printf@c,w,c
  9867                           
  9868                           ; Switch size 1, requested type "space"
  9869                           ; Number of cases is 3, Range of values is 0 to 120
  9870                           ; switch strategies available:
  9871                           ; Name         Instructions Cycles
  9872                           ; simple_byte           10     6 (average)
  9873                           ;	Chosen strategy is simple_byte
  9874  000874  0A00               	xorlw	0	; case 0
  9875  000876  B4D8               	btfsc	status,2,c
  9876  000878  0012               	return	
  9877  00087A  0A75               	xorlw	117	; case 117
  9878  00087C  B4D8               	btfsc	status,2,c
  9879  00087E  D7ED               	goto	i2l3520
  9880  000880  0A0D               	xorlw	13	; case 120
  9881  000882  B4D8               	btfsc	status,2,c
  9882  000884  D7B1               	goto	i2l3498
  9883  000886  D7E0               	goto	i2l3516
  9884  000888                     i2l3526:
  9885                           
  9886                           ;doprnt.c: 1273: {
  9887                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  9888  000888  C01B  FFD9         	movff	i2printf@ap,fsr2l
  9889  00088C  C01C  FFDA         	movff	i2printf@ap+1,fsr2h
  9890  000890  CFDE F023          	movff	postinc2,i2printf@val
  9891  000894  CFDD F024          	movff	postdec2,i2printf@val+1
  9892  000898  0E02               	movlw	2
  9893  00089A  261B               	addwf	i2printf@ap,f,c
  9894  00089C  0E00               	movlw	0
  9895  00089E  221C               	addwfc	i2printf@ap+1,f,c
  9896                           
  9897                           ;doprnt.c: 1287: }
  9898                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  9899  0008A0  D030               	goto	i2l3560
  9900  0008A2                     i2l3530:
  9901                           
  9902                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9903  0008A2  0E01               	movlw	1
  9904  0008A4  6E28               	movwf	i2printf@c,c
  9905  0008A6                     i2l3532:
  9906  0008A6  0E05               	movlw	5
  9907  0008A8  1828               	xorwf	i2printf@c,w,c
  9908  0008AA  B4D8               	btfsc	status,2,c
  9909  0008AC  D032               	goto	i2l3562
  9910                           
  9911                           ;doprnt.c: 1306: if(val < dpowers[c])
  9912  0008AE  5028               	movf	i2printf@c,w,c
  9913  0008B0  0D02               	mullw	2
  9914  0008B2  0EAD               	movlw	low _dpowers
  9915  0008B4  24F3               	addwf	prodl,w,c
  9916  0008B6  6EF6               	movwf	tblptrl,c
  9917  0008B8  0EFD               	movlw	high _dpowers
  9918  0008BA  20F4               	addwfc	prodh,w,c
  9919  0008BC  6EF7               	movwf	tblptrh,c
  9920  0008BE                     	if	0	;There are less than 3 active tblptr bytes
  9921  0008BE                     	endif
  9922  0008BE  0009               	tblrd		*+
  9923  0008C0  50F5               	movf	tablat,w,c
  9924  0008C2  5C23               	subwf	i2printf@val,w,c
  9925  0008C4  0009               	tblrd		*+
  9926  0008C6  50F5               	movf	tablat,w,c
  9927  0008C8  5824               	subwfb	i2printf@val+1,w,c
  9928  0008CA  A0D8               	btfss	status,0,c
  9929  0008CC  D022               	goto	i2l3562
  9930                           
  9931                           ;doprnt.c: 1307: break;
  9932  0008CE  2A28               	incf	i2printf@c,f,c
  9933  0008D0  D7EA               	goto	i2l3532
  9934  0008D2                     i2l3544:
  9935                           
  9936                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  9937  0008D2  0E01               	movlw	1
  9938  0008D4  6E28               	movwf	i2printf@c,c
  9939  0008D6                     i2l3546:
  9940  0008D6  0E04               	movlw	4
  9941  0008D8  1828               	xorwf	i2printf@c,w,c
  9942  0008DA  B4D8               	btfsc	status,2,c
  9943  0008DC  D01A               	goto	i2l3562
  9944                           
  9945                           ;doprnt.c: 1317: if(val < hexpowers[c])
  9946  0008DE  5028               	movf	i2printf@c,w,c
  9947  0008E0  0D02               	mullw	2
  9948  0008E2  0EB7               	movlw	low _hexpowers
  9949  0008E4  24F3               	addwf	prodl,w,c
  9950  0008E6  6EF6               	movwf	tblptrl,c
  9951  0008E8  0EFD               	movlw	high _hexpowers
  9952  0008EA  20F4               	addwfc	prodh,w,c
  9953  0008EC  6EF7               	movwf	tblptrh,c
  9954  0008EE                     	if	0	;There are less than 3 active tblptr bytes
  9955  0008EE                     	endif
  9956  0008EE  0009               	tblrd		*+
  9957  0008F0  50F5               	movf	tablat,w,c
  9958  0008F2  5C23               	subwf	i2printf@val,w,c
  9959  0008F4  0009               	tblrd		*+
  9960  0008F6  50F5               	movf	tablat,w,c
  9961  0008F8  5824               	subwfb	i2printf@val+1,w,c
  9962  0008FA  A0D8               	btfss	status,0,c
  9963  0008FC  D00A               	goto	i2l3562
  9964                           
  9965                           ;doprnt.c: 1318: break;
  9966  0008FE  2A28               	incf	i2printf@c,f,c
  9967  000900  D7EA               	goto	i2l3546
  9968  000902                     i2l3560:
  9969  000902  5025               	movf	i2printf@flag,w,c
  9970  000904  0BC0               	andlw	192
  9971                           
  9972                           ; Switch size 1, requested type "space"
  9973                           ; Number of cases is 2, Range of values is 128 to 192
  9974                           ; switch strategies available:
  9975                           ; Name         Instructions Cycles
  9976                           ; simple_byte            7     4 (average)
  9977                           ;	Chosen strategy is simple_byte
  9978  000906  0A80               	xorlw	128	; case 128
  9979  000908  B4D8               	btfsc	status,2,c
  9980  00090A  D7E3               	goto	i2l3544
  9981  00090C  0A40               	xorlw	64	; case 192
  9982  00090E  B4D8               	btfsc	status,2,c
  9983  000910  D7C8               	goto	i2l3530
  9984  000912                     i2l3562:
  9985                           
  9986                           ;doprnt.c: 1381: if(width > c)
  9987  000912  0E80               	movlw	128
  9988  000914  BE28               	btfsc	i2printf@c,7,c
  9989  000916  0E7F               	movlw	127
  9990  000918  6E17               	movwf	??i2_printf& (0+255),c
  9991  00091A  5026               	movf	i2printf@width,w,c
  9992  00091C  5C28               	subwf	i2printf@c,w,c
  9993  00091E  5027               	movf	i2printf@width+1,w,c
  9994  000920  0A80               	xorlw	128
  9995  000922  5817               	subwfb	??i2_printf& (0+255),w,c
  9996  000924  B0D8               	btfsc	status,0,c
  9997  000926  D007               	goto	i2l3566
  9998                           
  9999                           ;doprnt.c: 1382: width -= c;
 10000  000928  5028               	movf	i2printf@c,w,c
 10001  00092A  5E26               	subwf	i2printf@width,f,c
 10002  00092C  0E00               	movlw	0
 10003  00092E  BE28               	btfsc	i2printf@c,7,c
 10004  000930  0EFF               	movlw	255
 10005  000932  5A27               	subwfb	i2printf@width+1,f,c
 10006  000934  D004               	goto	i2l3568
 10007  000936                     i2l3566:
 10008                           
 10009                           ;doprnt.c: 1383: else
 10010                           ;doprnt.c: 1384: width = 0;
 10011  000936  0E00               	movlw	0
 10012  000938  6E27               	movwf	i2printf@width+1,c
 10013  00093A  0E00               	movlw	0
 10014  00093C  6E26               	movwf	i2printf@width,c
 10015  00093E                     i2l3568:
 10016                           
 10017                           ;doprnt.c: 1387: if(flag & 0x04) {
 10018  00093E  A425               	btfss	i2printf@flag,2,c
 10019  000940  D00B               	goto	i2l3576
 10020  000942                     
 10021                           ;doprnt.c: 1415: if(width)
 10022  000942  5026               	movf	i2printf@width,w,c
 10023  000944  1027               	iorwf	i2printf@width+1,w,c
 10024  000946  B4D8               	btfsc	status,2,c
 10025  000948  D015               	goto	i2l509
 10026                           
 10027                           ;doprnt.c: 1417: (putch('0') );
 10028                           
 10029                           ;doprnt.c: 1416: do
 10030  00094A  0E30               	movlw	48
 10031  00094C  EC64  F011         	call	i2_putch
 10032                           
 10033                           ;doprnt.c: 1418: while(--width);
 10034  000950  0626               	decf	i2printf@width,f,c
 10035  000952  A0D8               	btfss	status,0,c
 10036  000954  0627               	decf	i2printf@width+1,f,c
 10037  000956  D7F5               	goto	L5
 10038  000958                     i2l3576:
 10039                           
 10040                           ;doprnt.c: 1422: {
 10041                           ;doprnt.c: 1424: if(width
 10042                           ;doprnt.c: 1428: )
 10043  000958  5026               	movf	i2printf@width,w,c
 10044  00095A  1027               	iorwf	i2printf@width+1,w,c
 10045  00095C  B4D8               	btfsc	status,2,c
 10046  00095E  D00A               	goto	i2l509
 10047  000960                     i2l3578:
 10048                           
 10049                           ;doprnt.c: 1430: (putch(' ') );
 10050  000960  0E20               	movlw	32
 10051  000962  EC64  F011         	call	i2_putch
 10052                           
 10053                           ;doprnt.c: 1431: while(--width);
 10054  000966  0626               	decf	i2printf@width,f,c
 10055  000968  A0D8               	btfss	status,0,c
 10056  00096A  0627               	decf	i2printf@width+1,f,c
 10057  00096C  5026               	movf	i2printf@width,w,c
 10058  00096E  1027               	iorwf	i2printf@width+1,w,c
 10059  000970  A4D8               	btfss	status,2,c
 10060  000972  D7F6               	goto	i2l3578
 10061  000974                     i2l509:
 10062                           
 10063                           ;doprnt.c: 1469: }
 10064                           ;doprnt.c: 1472: prec = c;
 10065  000974  C028  F022         	movff	i2printf@c,i2printf@prec
 10066                           
 10067                           ;doprnt.c: 1474: while(prec--) {
 10068  000978  D050               	goto	i2l3594
 10069  00097A                     i2l3582:
 10070                           
 10071                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10072  00097A  5022               	movf	i2printf@prec,w,c
 10073  00097C  0D02               	mullw	2
 10074  00097E  0EAD               	movlw	low _dpowers
 10075  000980  24F3               	addwf	prodl,w,c
 10076  000982  6EF6               	movwf	tblptrl,c
 10077  000984  0EFD               	movlw	high _dpowers
 10078  000986  20F4               	addwfc	prodh,w,c
 10079  000988  6EF7               	movwf	tblptrh,c
 10080  00098A                     	if	0	;There are less than 3 active tblptr bytes
 10081  00098A                     	endif
 10082  00098A  0009               	tblrd		*+
 10083  00098C  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 10084  000990  000A               	tblrd		*-
 10085  000992  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 10086  000996  C023  F001         	movff	i2printf@val,i2___lwdiv@dividend
 10087  00099A  C024  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 10088  00099E  EC13  F00F         	call	i2___lwdiv	;wreg free
 10089  0009A2  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 10090  0009A6  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 10091  0009AA  0E00               	movlw	0
 10092  0009AC  6E0B               	movwf	i2___lwmod@divisor+1,c
 10093  0009AE  0E0A               	movlw	10
 10094  0009B0  6E0A               	movwf	i2___lwmod@divisor,c
 10095  0009B2  ECD2  F00F         	call	i2___lwmod	;wreg free
 10096  0009B6  5008               	movf	?i2___lwmod,w,c
 10097  0009B8  0F30               	addlw	48
 10098  0009BA  6E28               	movwf	i2printf@c,c
 10099                           
 10100                           ;doprnt.c: 1491: break;
 10101  0009BC  D02B               	goto	i2l3592
 10102  0009BE                     i2l3584:
 10103                           
 10104                           ;doprnt.c: 1499: {
 10105                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 10106  0009BE  C023  F001         	movff	i2printf@val,i2___lwdiv@dividend
 10107  0009C2  C024  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 10108  0009C6  5022               	movf	i2printf@prec,w,c
 10109  0009C8  0D02               	mullw	2
 10110  0009CA  0EB7               	movlw	low _hexpowers
 10111  0009CC  24F3               	addwf	prodl,w,c
 10112  0009CE  6EF6               	movwf	tblptrl,c
 10113  0009D0  0EFD               	movlw	high _hexpowers
 10114  0009D2  20F4               	addwfc	prodh,w,c
 10115  0009D4  6EF7               	movwf	tblptrh,c
 10116  0009D6                     	if	0	;There are less than 3 active tblptr bytes
 10117  0009D6                     	endif
 10118  0009D6  0009               	tblrd		*+
 10119  0009D8  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 10120  0009DC  000A               	tblrd		*-
 10121  0009DE  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 10122  0009E2  EC13  F00F         	call	i2___lwdiv	;wreg free
 10123  0009E6  5001               	movf	?i2___lwdiv,w,c
 10124  0009E8  0B0F               	andlw	15
 10125  0009EA  6E1F               	movwf	i2printf@idx,c
 10126                           
 10127                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 10128  0009EC  501F               	movf	i2printf@idx,w,c
 10129  0009EE  0D01               	mullw	1
 10130  0009F0  0E91               	movlw	low STR_54
 10131  0009F2  24F3               	addwf	prodl,w,c
 10132  0009F4  6EF6               	movwf	tblptrl,c
 10133  0009F6  0EFF               	movlw	high STR_54
 10134  0009F8  20F4               	addwfc	prodh,w,c
 10135  0009FA  6EF7               	movwf	tblptrh,c
 10136  0009FC                     	if	0	;There are less than 3 active tblptr bytes
 10137  0009FC                     	endif
 10138  0009FC  0008               	tblrd		*
 10139  0009FE  CFF5 F028          	movff	tablat,i2printf@c
 10140                           
 10141                           ;doprnt.c: 1523: }
 10142                           
 10143                           ;doprnt.c: 1508: }
 10144                           ;doprnt.c: 1510: break;
 10145  000A02  D008               	goto	i2l3592
 10146  000A04                     i2l3590:
 10147  000A04  5025               	movf	i2printf@flag,w,c
 10148  000A06  0BC0               	andlw	192
 10149                           
 10150                           ; Switch size 1, requested type "space"
 10151                           ; Number of cases is 2, Range of values is 128 to 192
 10152                           ; switch strategies available:
 10153                           ; Name         Instructions Cycles
 10154                           ; simple_byte            7     4 (average)
 10155                           ;	Chosen strategy is simple_byte
 10156  000A08  0A80               	xorlw	128	; case 128
 10157  000A0A  B4D8               	btfsc	status,2,c
 10158  000A0C  D7D8               	goto	i2l3584
 10159  000A0E  0A40               	xorlw	64	; case 192
 10160  000A10  B4D8               	btfsc	status,2,c
 10161  000A12  D7B3               	goto	i2l3582
 10162  000A14                     i2l3592:
 10163                           
 10164                           ;doprnt.c: 1524: (putch(c) );
 10165  000A14  5028               	movf	i2printf@c,w,c
 10166  000A16  EC64  F011         	call	i2_putch
 10167  000A1A                     i2l3594:
 10168  000A1A  0622               	decf	i2printf@prec,f,c
 10169  000A1C  2822               	incf	i2printf@prec,w,c
 10170  000A1E  A4D8               	btfss	status,2,c
 10171  000A20  D7F1               	goto	i2l3590
 10172  000A22                     i2l3596:
 10173  000A22  C00D  FFF6         	movff	i2printf@f,tblptrl
 10174  000A26  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 10175  000A2A  4A0D               	infsnz	i2printf@f,f,c
 10176  000A2C  2A0E               	incf	i2printf@f+1,f,c
 10177  000A2E                     	if	0	;tblptru may be non-zero
 10178  000A2E                     	endif
 10179  000A2E                     	if	0	;tblptru may be non-zero
 10180  000A2E                     	endif
 10181  000A2E  0008               	tblrd		*
 10182  000A30  CFF5 F028          	movff	tablat,i2printf@c
 10183  000A34  5028               	movf	i2printf@c,w,c
 10184  000A36  B4D8               	btfsc	status,2,c
 10185  000A38  0012               	return	
 10186  000A3A  D67E               	goto	i2l3474
 10187  000A3C                     __end_ofi2_printf:
 10188                           	opt stack 0
 10189                           pclatu	equ	0xFFB
 10190                           pclath	equ	0xFFA
 10191                           tblptru	equ	0xFF8
 10192                           tblptrh	equ	0xFF7
 10193                           tblptrl	equ	0xFF6
 10194                           tablat	equ	0xFF5
 10195                           prodh	equ	0xFF4
 10196                           prodl	equ	0xFF3
 10197                           intcon	equ	0xFF2
 10198                           intcon3	equ	0xFF0
 10199                           postinc0	equ	0xFEE
 10200                           fsr0h	equ	0xFEA
 10201                           fsr0l	equ	0xFE9
 10202                           wreg	equ	0xFE8
 10203                           plusw1	equ	0xFE3
 10204                           fsr1h	equ	0xFE2
 10205                           fsr1l	equ	0xFE1
 10206                           indf2	equ	0xFDF
 10207                           postinc2	equ	0xFDE
 10208                           postdec2	equ	0xFDD
 10209                           plusw2	equ	0xFDB
 10210                           fsr2h	equ	0xFDA
 10211                           fsr2l	equ	0xFD9
 10212                           status	equ	0xFD8
 10213                           
 10214 ;; *************** function i2_putch *****************
 10215 ;; Defined at:
 10216 ;;		line 25 in file "lcd.c"
 10217 ;; Parameters:    Size  Location     Type
 10218 ;;  data            1    wreg     unsigned char 
 10219 ;; Auto vars:     Size  Location     Type
 10220 ;;  data            1    2[COMRAM] unsigned char 
 10221 ;; Return value:  Size  Location     Type
 10222 ;;                  1    wreg      void 
 10223 ;; Registers used:
 10224 ;;		wreg, status,2, status,0, cstack
 10225 ;; Tracked objects:
 10226 ;;		On entry : 0/0
 10227 ;;		On exit  : 0/0
 10228 ;;		Unchanged: 0/0
 10229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10231 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10233 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10234 ;;Total ram usage:        1 bytes
 10235 ;; Hardware stack levels used:    1
 10236 ;; Hardware stack levels required when called:    1
 10237 ;; This function calls:
 10238 ;;		i2_lcdNibble
 10239 ;; This function is called by:
 10240 ;;		i2_printf
 10241 ;; This function uses a non-reentrant model
 10242 ;;
 10243                           
 10244                           	psect	text52
 10245  0022C8                     __ptext52:
 10246                           	opt stack 0
 10247  0022C8                     i2_putch:
 10248                           	opt stack 22
 10249                           
 10250                           ;incstack = 0
 10251                           ;i2putch@data stored from wreg
 10252  0022C8  6E03               	movwf	i2putch@data,c
 10253                           
 10254                           ;lcd.c: 26: LATDbits.LATD2 = 1;
 10255  0022CA  848C               	bsf	3980,2,c	;volatile
 10256                           
 10257                           ;lcd.c: 27: lcdNibble(data);
 10258  0022CC  5003               	movf	i2putch@data,w,c
 10259  0022CE  ECE8  F00E         	call	i2_lcdNibble
 10260  0022D2  0012               	return		;funcret
 10261  0022D4                     __end_ofi2_putch:
 10262                           	opt stack 0
 10263                           pclatu	equ	0xFFB
 10264                           pclath	equ	0xFFA
 10265                           tblptru	equ	0xFF8
 10266                           tblptrh	equ	0xFF7
 10267                           tblptrl	equ	0xFF6
 10268                           tablat	equ	0xFF5
 10269                           prodh	equ	0xFF4
 10270                           prodl	equ	0xFF3
 10271                           intcon	equ	0xFF2
 10272                           intcon3	equ	0xFF0
 10273                           postinc0	equ	0xFEE
 10274                           fsr0h	equ	0xFEA
 10275                           fsr0l	equ	0xFE9
 10276                           wreg	equ	0xFE8
 10277                           plusw1	equ	0xFE3
 10278                           fsr1h	equ	0xFE2
 10279                           fsr1l	equ	0xFE1
 10280                           indf2	equ	0xFDF
 10281                           postinc2	equ	0xFDE
 10282                           postdec2	equ	0xFDD
 10283                           plusw2	equ	0xFDB
 10284                           fsr2h	equ	0xFDA
 10285                           fsr2l	equ	0xFD9
 10286                           status	equ	0xFD8
 10287                           
 10288 ;; *************** function i2_isdigit *****************
 10289 ;; Defined at:
 10290 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
 10291 ;; Parameters:    Size  Location     Type
 10292 ;;  c               1    wreg     unsigned char 
 10293 ;; Auto vars:     Size  Location     Type
 10294 ;;  c               1    2[COMRAM] unsigned char 
 10295 ;; Return value:  Size  Location     Type
 10296 ;;		None               void
 10297 ;; Registers used:
 10298 ;;		wreg, status,2, status,0
 10299 ;; Tracked objects:
 10300 ;;		On entry : 0/0
 10301 ;;		On exit  : 0/0
 10302 ;;		Unchanged: 0/0
 10303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10305 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10306 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10307 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10308 ;;Total ram usage:        3 bytes
 10309 ;; Hardware stack levels used:    1
 10310 ;; This function calls:
 10311 ;;		Nothing
 10312 ;; This function is called by:
 10313 ;;		i2_printf
 10314 ;; This function uses a non-reentrant model
 10315 ;;
 10316                           
 10317                           	psect	text53
 10318  0021FC                     __ptext53:
 10319                           	opt stack 0
 10320  0021FC                     i2_isdigit:
 10321                           	opt stack 23
 10322                           
 10323                           ;incstack = 0
 10324                           ;i2isdigit@c stored from wreg
 10325  0021FC  6E03               	movwf	i2isdigit@c,c
 10326  0021FE  0E00               	movlw	0
 10327  002200  6E02               	movwf	i2_isdigit$1052,c
 10328  002202  0E3A               	movlw	58
 10329  002204  6003               	cpfslt	i2isdigit@c,c
 10330  002206  D005               	goto	i2l3148
 10331  002208  0E2F               	movlw	47
 10332  00220A  6403               	cpfsgt	i2isdigit@c,c
 10333  00220C  D002               	goto	i2l3148
 10334  00220E  0E01               	movlw	1
 10335  002210  6E02               	movwf	i2_isdigit$1052,c
 10336  002212                     i2l3148:
 10337  002212  C002  F001         	movff	i2_isdigit$1052,??i2_isdigit
 10338  002216  3001               	rrcf	??i2_isdigit,w,c
 10339  002218  0012               	return	
 10340  00221A                     __end_ofi2_isdigit:
 10341                           	opt stack 0
 10342                           pclatu	equ	0xFFB
 10343                           pclath	equ	0xFFA
 10344                           tblptru	equ	0xFF8
 10345                           tblptrh	equ	0xFF7
 10346                           tblptrl	equ	0xFF6
 10347                           tablat	equ	0xFF5
 10348                           prodh	equ	0xFF4
 10349                           prodl	equ	0xFF3
 10350                           intcon	equ	0xFF2
 10351                           intcon3	equ	0xFF0
 10352                           postinc0	equ	0xFEE
 10353                           fsr0h	equ	0xFEA
 10354                           fsr0l	equ	0xFE9
 10355                           wreg	equ	0xFE8
 10356                           plusw1	equ	0xFE3
 10357                           fsr1h	equ	0xFE2
 10358                           fsr1l	equ	0xFE1
 10359                           indf2	equ	0xFDF
 10360                           postinc2	equ	0xFDE
 10361                           postdec2	equ	0xFDD
 10362                           plusw2	equ	0xFDB
 10363                           fsr2h	equ	0xFDA
 10364                           fsr2l	equ	0xFD9
 10365                           status	equ	0xFD8
 10366                           
 10367 ;; *************** function i2___wmul *****************
 10368 ;; Defined at:
 10369 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
 10370 ;; Parameters:    Size  Location     Type
 10371 ;;  multiplier      2    0[COMRAM] unsigned int 
 10372 ;;  multiplicand    2    2[COMRAM] unsigned int 
 10373 ;; Auto vars:     Size  Location     Type
 10374 ;;  __wmul          2    4[COMRAM] unsigned int 
 10375 ;; Return value:  Size  Location     Type
 10376 ;;                  2    0[COMRAM] unsigned int 
 10377 ;; Registers used:
 10378 ;;		wreg, status,2, status,0, prodl, prodh
 10379 ;; Tracked objects:
 10380 ;;		On entry : 0/0
 10381 ;;		On exit  : 0/0
 10382 ;;		Unchanged: 0/0
 10383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10384 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10385 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10387 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10388 ;;Total ram usage:        6 bytes
 10389 ;; Hardware stack levels used:    1
 10390 ;; This function calls:
 10391 ;;		Nothing
 10392 ;; This function is called by:
 10393 ;;		_simulate
 10394 ;;		_HexDecToDec2
 10395 ;;		_WriteRun
 10396 ;;		i2_printf
 10397 ;; This function uses a non-reentrant model
 10398 ;;
 10399                           
 10400                           	psect	text54
 10401  00215A                     __ptext54:
 10402                           	opt stack 0
 10403  00215A                     i2___wmul:
 10404                           	opt stack 23
 10405                           
 10406                           ;incstack = 0
 10407  00215A  5001               	movf	i2___wmul@multiplier,w,c
 10408  00215C  0203               	mulwf	i2___wmul@multiplicand,c
 10409  00215E  CFF3 F005          	movff	prodl,i2___wmul@product
 10410  002162  CFF4 F006          	movff	prodh,i2___wmul@product+1
 10411  002166  5001               	movf	i2___wmul@multiplier,w,c
 10412  002168  0204               	mulwf	i2___wmul@multiplicand+1,c
 10413  00216A  50F3               	movf	prodl,w,c
 10414  00216C  2606               	addwf	i2___wmul@product+1,f,c
 10415  00216E  5002               	movf	i2___wmul@multiplier+1,w,c
 10416  002170  0203               	mulwf	i2___wmul@multiplicand,c
 10417  002172  50F3               	movf	prodl,w,c
 10418  002174  2606               	addwf	i2___wmul@product+1,f,c
 10419  002176  C005  F001         	movff	i2___wmul@product,?i2___wmul
 10420  00217A  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 10421  00217E  0012               	return	
 10422  002180                     __end_ofi2___wmul:
 10423                           	opt stack 0
 10424                           pclatu	equ	0xFFB
 10425                           pclath	equ	0xFFA
 10426                           tblptru	equ	0xFF8
 10427                           tblptrh	equ	0xFF7
 10428                           tblptrl	equ	0xFF6
 10429                           tablat	equ	0xFF5
 10430                           prodh	equ	0xFF4
 10431                           prodl	equ	0xFF3
 10432                           intcon	equ	0xFF2
 10433                           intcon3	equ	0xFF0
 10434                           postinc0	equ	0xFEE
 10435                           fsr0h	equ	0xFEA
 10436                           fsr0l	equ	0xFE9
 10437                           wreg	equ	0xFE8
 10438                           plusw1	equ	0xFE3
 10439                           fsr1h	equ	0xFE2
 10440                           fsr1l	equ	0xFE1
 10441                           indf2	equ	0xFDF
 10442                           postinc2	equ	0xFDE
 10443                           postdec2	equ	0xFDD
 10444                           plusw2	equ	0xFDB
 10445                           fsr2h	equ	0xFDA
 10446                           fsr2l	equ	0xFD9
 10447                           status	equ	0xFD8
 10448                           
 10449 ;; *************** function i2___lwmod *****************
 10450 ;; Defined at:
 10451 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
 10452 ;; Parameters:    Size  Location     Type
 10453 ;;  dividend        2    7[COMRAM] unsigned int 
 10454 ;;  divisor         2    9[COMRAM] unsigned int 
 10455 ;; Auto vars:     Size  Location     Type
 10456 ;;  __lwmod         1   11[COMRAM] unsigned char 
 10457 ;; Return value:  Size  Location     Type
 10458 ;;                  2    7[COMRAM] unsigned int 
 10459 ;; Registers used:
 10460 ;;		wreg, status,2, status,0
 10461 ;; Tracked objects:
 10462 ;;		On entry : 0/0
 10463 ;;		On exit  : 0/0
 10464 ;;		Unchanged: 0/0
 10465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10466 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10467 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10469 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10470 ;;Total ram usage:        5 bytes
 10471 ;; Hardware stack levels used:    1
 10472 ;; This function calls:
 10473 ;;		Nothing
 10474 ;; This function is called by:
 10475 ;;		i2_printf
 10476 ;; This function uses a non-reentrant model
 10477 ;;
 10478                           
 10479                           	psect	text55
 10480  001FA4                     __ptext55:
 10481                           	opt stack 0
 10482  001FA4                     i2___lwmod:
 10483                           	opt stack 23
 10484                           
 10485                           ;incstack = 0
 10486  001FA4  500A               	movf	i2___lwmod@divisor,w,c
 10487  001FA6  100B               	iorwf	i2___lwmod@divisor+1,w,c
 10488  001FA8  B4D8               	btfsc	status,2,c
 10489  001FAA  D018               	goto	i2l939
 10490  001FAC  0E01               	movlw	1
 10491  001FAE  6E0C               	movwf	i2___lwmod@counter,c
 10492  001FB0  D004               	goto	i2l3180
 10493  001FB2                     i2l3178:
 10494  001FB2  90D8               	bcf	status,0,c
 10495  001FB4  360A               	rlcf	i2___lwmod@divisor,f,c
 10496  001FB6  360B               	rlcf	i2___lwmod@divisor+1,f,c
 10497  001FB8  2A0C               	incf	i2___lwmod@counter,f,c
 10498  001FBA                     i2l3180:
 10499  001FBA  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 10500  001FBC  D7FA               	goto	i2l3178
 10501  001FBE                     i2l3182:
 10502  001FBE  500A               	movf	i2___lwmod@divisor,w,c
 10503  001FC0  5C08               	subwf	i2___lwmod@dividend,w,c
 10504  001FC2  500B               	movf	i2___lwmod@divisor+1,w,c
 10505  001FC4  5809               	subwfb	i2___lwmod@dividend+1,w,c
 10506  001FC6  A0D8               	btfss	status,0,c
 10507  001FC8  D004               	goto	i2l3186
 10508  001FCA  500A               	movf	i2___lwmod@divisor,w,c
 10509  001FCC  5E08               	subwf	i2___lwmod@dividend,f,c
 10510  001FCE  500B               	movf	i2___lwmod@divisor+1,w,c
 10511  001FD0  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 10512  001FD2                     i2l3186:
 10513  001FD2  90D8               	bcf	status,0,c
 10514  001FD4  320B               	rrcf	i2___lwmod@divisor+1,f,c
 10515  001FD6  320A               	rrcf	i2___lwmod@divisor,f,c
 10516  001FD8  2E0C               	decfsz	i2___lwmod@counter,f,c
 10517  001FDA  D7F1               	goto	i2l3182
 10518  001FDC                     i2l939:
 10519  001FDC  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 10520  001FE0  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 10521  001FE4  0012               	return		;funcret
 10522  001FE6                     __end_ofi2___lwmod:
 10523                           	opt stack 0
 10524                           pclatu	equ	0xFFB
 10525                           pclath	equ	0xFFA
 10526                           tblptru	equ	0xFF8
 10527                           tblptrh	equ	0xFF7
 10528                           tblptrl	equ	0xFF6
 10529                           tablat	equ	0xFF5
 10530                           prodh	equ	0xFF4
 10531                           prodl	equ	0xFF3
 10532                           intcon	equ	0xFF2
 10533                           intcon3	equ	0xFF0
 10534                           postinc0	equ	0xFEE
 10535                           fsr0h	equ	0xFEA
 10536                           fsr0l	equ	0xFE9
 10537                           wreg	equ	0xFE8
 10538                           plusw1	equ	0xFE3
 10539                           fsr1h	equ	0xFE2
 10540                           fsr1l	equ	0xFE1
 10541                           indf2	equ	0xFDF
 10542                           postinc2	equ	0xFDE
 10543                           postdec2	equ	0xFDD
 10544                           plusw2	equ	0xFDB
 10545                           fsr2h	equ	0xFDA
 10546                           fsr2l	equ	0xFD9
 10547                           status	equ	0xFD8
 10548                           
 10549 ;; *************** function i2___lwdiv *****************
 10550 ;; Defined at:
 10551 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
 10552 ;; Parameters:    Size  Location     Type
 10553 ;;  dividend        2    0[COMRAM] unsigned int 
 10554 ;;  divisor         2    2[COMRAM] unsigned int 
 10555 ;; Auto vars:     Size  Location     Type
 10556 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 10557 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 10558 ;; Return value:  Size  Location     Type
 10559 ;;                  2    0[COMRAM] unsigned int 
 10560 ;; Registers used:
 10561 ;;		wreg, status,2, status,0
 10562 ;; Tracked objects:
 10563 ;;		On entry : 0/0
 10564 ;;		On exit  : 0/0
 10565 ;;		Unchanged: 0/0
 10566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10567 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10568 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10570 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10571 ;;Total ram usage:        7 bytes
 10572 ;; Hardware stack levels used:    1
 10573 ;; This function calls:
 10574 ;;		Nothing
 10575 ;; This function is called by:
 10576 ;;		i2_printf
 10577 ;; This function uses a non-reentrant model
 10578 ;;
 10579                           
 10580                           	psect	text56
 10581  001E26                     __ptext56:
 10582                           	opt stack 0
 10583  001E26                     i2___lwdiv:
 10584                           	opt stack 23
 10585                           
 10586                           ;incstack = 0
 10587  001E26  0E00               	movlw	0
 10588  001E28  6E06               	movwf	i2___lwdiv@quotient+1,c
 10589  001E2A  0E00               	movlw	0
 10590  001E2C  6E05               	movwf	i2___lwdiv@quotient,c
 10591  001E2E  5003               	movf	i2___lwdiv@divisor,w,c
 10592  001E30  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 10593  001E32  B4D8               	btfsc	status,2,c
 10594  001E34  D01C               	goto	i2l929
 10595  001E36  0E01               	movlw	1
 10596  001E38  6E07               	movwf	i2___lwdiv@counter,c
 10597  001E3A  D004               	goto	i2l3160
 10598  001E3C                     i2l3158:
 10599  001E3C  90D8               	bcf	status,0,c
 10600  001E3E  3603               	rlcf	i2___lwdiv@divisor,f,c
 10601  001E40  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 10602  001E42  2A07               	incf	i2___lwdiv@counter,f,c
 10603  001E44                     i2l3160:
 10604  001E44  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 10605  001E46  D7FA               	goto	i2l3158
 10606  001E48                     i2l3162:
 10607  001E48  90D8               	bcf	status,0,c
 10608  001E4A  3605               	rlcf	i2___lwdiv@quotient,f,c
 10609  001E4C  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 10610  001E4E  5003               	movf	i2___lwdiv@divisor,w,c
 10611  001E50  5C01               	subwf	i2___lwdiv@dividend,w,c
 10612  001E52  5004               	movf	i2___lwdiv@divisor+1,w,c
 10613  001E54  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 10614  001E56  A0D8               	btfss	status,0,c
 10615  001E58  D005               	goto	i2l3170
 10616  001E5A  5003               	movf	i2___lwdiv@divisor,w,c
 10617  001E5C  5E01               	subwf	i2___lwdiv@dividend,f,c
 10618  001E5E  5004               	movf	i2___lwdiv@divisor+1,w,c
 10619  001E60  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 10620  001E62  8005               	bsf	i2___lwdiv@quotient,0,c
 10621  001E64                     i2l3170:
 10622  001E64  90D8               	bcf	status,0,c
 10623  001E66  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 10624  001E68  3203               	rrcf	i2___lwdiv@divisor,f,c
 10625  001E6A  2E07               	decfsz	i2___lwdiv@counter,f,c
 10626  001E6C  D7ED               	goto	i2l3162
 10627  001E6E                     i2l929:
 10628  001E6E  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 10629  001E72  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 10630  001E76  0012               	return		;funcret
 10631  001E78                     __end_ofi2___lwdiv:
 10632                           	opt stack 0
 10633                           pclatu	equ	0xFFB
 10634                           pclath	equ	0xFFA
 10635                           tblptru	equ	0xFF8
 10636                           tblptrh	equ	0xFF7
 10637                           tblptrl	equ	0xFF6
 10638                           tablat	equ	0xFF5
 10639                           prodh	equ	0xFF4
 10640                           prodl	equ	0xFF3
 10641                           intcon	equ	0xFF2
 10642                           intcon3	equ	0xFF0
 10643                           postinc0	equ	0xFEE
 10644                           fsr0h	equ	0xFEA
 10645                           fsr0l	equ	0xFE9
 10646                           wreg	equ	0xFE8
 10647                           plusw1	equ	0xFE3
 10648                           fsr1h	equ	0xFE2
 10649                           fsr1l	equ	0xFE1
 10650                           indf2	equ	0xFDF
 10651                           postinc2	equ	0xFDE
 10652                           postdec2	equ	0xFDD
 10653                           plusw2	equ	0xFDB
 10654                           fsr2h	equ	0xFDA
 10655                           fsr2l	equ	0xFD9
 10656                           status	equ	0xFD8
 10657                           
 10658 ;; *************** function i2_lcdInst *****************
 10659 ;; Defined at:
 10660 ;;		line 20 in file "lcd.c"
 10661 ;; Parameters:    Size  Location     Type
 10662 ;;  data            1    wreg     unsigned char 
 10663 ;; Auto vars:     Size  Location     Type
 10664 ;;  data            1    2[COMRAM] unsigned char 
 10665 ;; Return value:  Size  Location     Type
 10666 ;;                  1    wreg      void 
 10667 ;; Registers used:
 10668 ;;		wreg, status,2, status,0, cstack
 10669 ;; Tracked objects:
 10670 ;;		On entry : 0/0
 10671 ;;		On exit  : 0/0
 10672 ;;		Unchanged: 0/0
 10673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10675 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10677 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10678 ;;Total ram usage:        1 bytes
 10679 ;; Hardware stack levels used:    1
 10680 ;; Hardware stack levels required when called:    1
 10681 ;; This function calls:
 10682 ;;		i2_lcdNibble
 10683 ;; This function is called by:
 10684 ;;		_simulate
 10685 ;;		_showInfo
 10686 ;;		_stopMoving
 10687 ;;		_PermLog
 10688 ;; This function uses a non-reentrant model
 10689 ;;
 10690                           
 10691                           	psect	text57
 10692  0022D4                     __ptext57:
 10693                           	opt stack 0
 10694  0022D4                     i2_lcdInst:
 10695                           	opt stack 23
 10696                           
 10697                           ;incstack = 0
 10698                           ;i2lcdInst@data stored from wreg
 10699  0022D4  6E03               	movwf	i2lcdInst@data,c
 10700                           
 10701                           ;lcd.c: 21: LATDbits.LATD2 = 0;
 10702  0022D6  948C               	bcf	3980,2,c	;volatile
 10703                           
 10704                           ;lcd.c: 22: lcdNibble(data);
 10705  0022D8  5003               	movf	i2lcdInst@data,w,c
 10706  0022DA  ECE8  F00E         	call	i2_lcdNibble
 10707  0022DE  0012               	return		;funcret
 10708  0022E0                     __end_ofi2_lcdInst:
 10709                           	opt stack 0
 10710                           pclatu	equ	0xFFB
 10711                           pclath	equ	0xFFA
 10712                           tblptru	equ	0xFF8
 10713                           tblptrh	equ	0xFF7
 10714                           tblptrl	equ	0xFF6
 10715                           tablat	equ	0xFF5
 10716                           prodh	equ	0xFF4
 10717                           prodl	equ	0xFF3
 10718                           intcon	equ	0xFF2
 10719                           intcon3	equ	0xFF0
 10720                           postinc0	equ	0xFEE
 10721                           fsr0h	equ	0xFEA
 10722                           fsr0l	equ	0xFE9
 10723                           wreg	equ	0xFE8
 10724                           plusw1	equ	0xFE3
 10725                           fsr1h	equ	0xFE2
 10726                           fsr1l	equ	0xFE1
 10727                           indf2	equ	0xFDF
 10728                           postinc2	equ	0xFDE
 10729                           postdec2	equ	0xFDD
 10730                           plusw2	equ	0xFDB
 10731                           fsr2h	equ	0xFDA
 10732                           fsr2l	equ	0xFD9
 10733                           status	equ	0xFD8
 10734                           
 10735 ;; *************** function i2_lcdNibble *****************
 10736 ;; Defined at:
 10737 ;;		line 30 in file "lcd.c"
 10738 ;; Parameters:    Size  Location     Type
 10739 ;;  data            1    wreg     unsigned char 
 10740 ;; Auto vars:     Size  Location     Type
 10741 ;;  data            1    1[COMRAM] unsigned char 
 10742 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 10743 ;; Return value:  Size  Location     Type
 10744 ;;                  1    wreg      void 
 10745 ;; Registers used:
 10746 ;;		wreg, status,2, status,0
 10747 ;; Tracked objects:
 10748 ;;		On entry : 0/0
 10749 ;;		On exit  : 0/0
 10750 ;;		Unchanged: 0/0
 10751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10753 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10755 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10756 ;;Total ram usage:        2 bytes
 10757 ;; Hardware stack levels used:    1
 10758 ;; This function calls:
 10759 ;;		Nothing
 10760 ;; This function is called by:
 10761 ;;		i2_lcdInst
 10762 ;;		i2_putch
 10763 ;; This function uses a non-reentrant model
 10764 ;;
 10765                           
 10766                           	psect	text58
 10767  001DD0                     __ptext58:
 10768                           	opt stack 0
 10769  001DD0                     i2_lcdNibble:
 10770                           	opt stack 22
 10771                           
 10772                           ;incstack = 0
 10773                           ;i2lcdNibble@data stored from wreg
 10774  001DD0  6E02               	movwf	i2lcdNibble@data,c
 10775                           
 10776                           ;lcd.c: 32: char temp = data & 0xF0;
 10777  001DD2  5002               	movf	i2lcdNibble@data,w,c
 10778  001DD4  0BF0               	andlw	240
 10779  001DD6  6E01               	movwf	i2lcdNibble@temp,c
 10780                           
 10781                           ;lcd.c: 33: LATD = LATD & 0x0F;
 10782  001DD8  508C               	movf	3980,w,c	;volatile
 10783  001DDA  0B0F               	andlw	15
 10784  001DDC  6E8C               	movwf	3980,c	;volatile
 10785                           
 10786                           ;lcd.c: 34: LATD = temp | LATD;
 10787  001DDE  5001               	movf	i2lcdNibble@temp,w,c
 10788  001DE0  108C               	iorwf	3980,w,c	;volatile
 10789  001DE2  6E8C               	movwf	3980,c	;volatile
 10790                           
 10791                           ;lcd.c: 36: LATDbits.LATD3 = 0;
 10792  001DE4  968C               	bcf	3980,3,c	;volatile
 10793                           
 10794                           ;lcd.c: 37: _delay((unsigned long)((25)*(8000000/4000000.0)));
 10795  001DE6  0E10               	movlw	16
 10796  001DE8                     i2u326_47:
 10797  001DE8  2EE8               	decfsz	wreg,f,c
 10798  001DEA  D7FE               	bra	i2u326_47
 10799  001DEC  D000               	nop2	
 10800                           
 10801                           ;lcd.c: 38: LATDbits.LATD3 = 1;
 10802  001DEE  868C               	bsf	3980,3,c	;volatile
 10803                           
 10804                           ;lcd.c: 39: _delay((unsigned long)((25)*(8000000/4000000.0)));
 10805  001DF0  0E10               	movlw	16
 10806  001DF2                     i2u327_47:
 10807  001DF2  2EE8               	decfsz	wreg,f,c
 10808  001DF4  D7FE               	bra	i2u327_47
 10809  001DF6  D000               	nop2	
 10810                           
 10811                           ;lcd.c: 41: data = data << 4;
 10812  001DF8  3802               	swapf	i2lcdNibble@data,w,c
 10813  001DFA  0BF0               	andlw	240
 10814  001DFC  6E02               	movwf	i2lcdNibble@data,c
 10815                           
 10816                           ;lcd.c: 43: temp = data & 0xF0;
 10817  001DFE  5002               	movf	i2lcdNibble@data,w,c
 10818  001E00  0BF0               	andlw	240
 10819  001E02  6E01               	movwf	i2lcdNibble@temp,c
 10820                           
 10821                           ;lcd.c: 44: LATD = LATD & 0x0F;
 10822  001E04  508C               	movf	3980,w,c	;volatile
 10823  001E06  0B0F               	andlw	15
 10824  001E08  6E8C               	movwf	3980,c	;volatile
 10825                           
 10826                           ;lcd.c: 45: LATD = temp | LATD;
 10827  001E0A  5001               	movf	i2lcdNibble@temp,w,c
 10828  001E0C  108C               	iorwf	3980,w,c	;volatile
 10829  001E0E  6E8C               	movwf	3980,c	;volatile
 10830                           
 10831                           ;lcd.c: 47: LATDbits.LATD3 = 0;
 10832  001E10  968C               	bcf	3980,3,c	;volatile
 10833                           
 10834                           ;lcd.c: 48: _delay((unsigned long)((25)*(8000000/4000000.0)));
 10835  001E12  0E10               	movlw	16
 10836  001E14                     i2u328_47:
 10837  001E14  2EE8               	decfsz	wreg,f,c
 10838  001E16  D7FE               	bra	i2u328_47
 10839  001E18  D000               	nop2	
 10840                           
 10841                           ;lcd.c: 49: LATDbits.LATD3 = 1;
 10842  001E1A  868C               	bsf	3980,3,c	;volatile
 10843                           
 10844                           ;lcd.c: 50: _delay((unsigned long)((25)*(8000000/4000000.0)));
 10845  001E1C  0E10               	movlw	16
 10846  001E1E                     i2u329_47:
 10847  001E1E  2EE8               	decfsz	wreg,f,c
 10848  001E20  D7FE               	bra	i2u329_47
 10849  001E22  D000               	nop2	
 10850  001E24  0012               	return		;funcret
 10851  001E26                     __end_ofi2_lcdNibble:
 10852                           	opt stack 0
 10853                           pclatu	equ	0xFFB
 10854                           pclath	equ	0xFFA
 10855                           tblptru	equ	0xFF8
 10856                           tblptrh	equ	0xFF7
 10857                           tblptrl	equ	0xFF6
 10858                           tablat	equ	0xFF5
 10859                           prodh	equ	0xFF4
 10860                           prodl	equ	0xFF3
 10861                           intcon	equ	0xFF2
 10862                           intcon3	equ	0xFF0
 10863                           postinc0	equ	0xFEE
 10864                           fsr0h	equ	0xFEA
 10865                           fsr0l	equ	0xFE9
 10866                           wreg	equ	0xFE8
 10867                           plusw1	equ	0xFE3
 10868                           fsr1h	equ	0xFE2
 10869                           fsr1l	equ	0xFE1
 10870                           indf2	equ	0xFDF
 10871                           postinc2	equ	0xFDE
 10872                           postdec2	equ	0xFDD
 10873                           plusw2	equ	0xFDB
 10874                           fsr2h	equ	0xFDA
 10875                           fsr2l	equ	0xFD9
 10876                           status	equ	0xFD8
 10877                           
 10878 ;; *************** function _captureKeypad *****************
 10879 ;; Defined at:
 10880 ;;		line 13 in file "modules.c"
 10881 ;; Parameters:    Size  Location     Type
 10882 ;;		None
 10883 ;; Auto vars:     Size  Location     Type
 10884 ;;  keypress        1    2[COMRAM] unsigned char 
 10885 ;; Return value:  Size  Location     Type
 10886 ;;                  2    0[COMRAM] unsigned int 
 10887 ;; Registers used:
 10888 ;;		wreg, status,2, status,0
 10889 ;; Tracked objects:
 10890 ;;		On entry : 0/0
 10891 ;;		On exit  : 0/0
 10892 ;;		Unchanged: 0/0
 10893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10894 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10895 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10897 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10898 ;;Total ram usage:        3 bytes
 10899 ;; Hardware stack levels used:    1
 10900 ;; This function calls:
 10901 ;;		Nothing
 10902 ;; This function is called by:
 10903 ;;		_showInfo
 10904 ;;		_PermLog
 10905 ;; This function uses a non-reentrant model
 10906 ;;
 10907                           
 10908                           	psect	text59
 10909  00221A                     __ptext59:
 10910                           	opt stack 0
 10911  00221A                     _captureKeypad:
 10912                           	opt stack 23
 10913                           
 10914                           ;modules.c: 14: (INTCONbits.GIE = 0);
 10915                           
 10916                           ;incstack = 0
 10917  00221A  9EF2               	bcf	intcon,7,c	;volatile
 10918  00221C                     i2l212:
 10919  00221C  A281               	btfss	3969,1,c	;volatile
 10920  00221E  D7FE               	goto	i2l212
 10921                           
 10922                           ;modules.c: 16: unsigned char keypress = (PORTB & 0xF0) >> 4;
 10923  002220  3881               	swapf	3969,w,c	;volatile
 10924  002222  0B0F               	andlw	15
 10925  002224  0B0F               	andlw	15
 10926  002226  6E03               	movwf	captureKeypad@keypress,c
 10927  002228                     i2l215:
 10928  002228  B281               	btfsc	3969,1,c	;volatile
 10929  00222A  D7FE               	goto	i2l215
 10930                           
 10931                           ;modules.c: 18: INT1IF = 0;
 10932  00222C  90F0               	bcf	intcon3,0,c	;volatile
 10933                           
 10934                           ;modules.c: 19: (INTCONbits.GIE = 1);
 10935  00222E  8EF2               	bsf	intcon,7,c	;volatile
 10936                           
 10937                           ;modules.c: 20: return keypress;
 10938  002230  C003  F001         	movff	captureKeypad@keypress,?_captureKeypad
 10939  002234  6A02               	clrf	?_captureKeypad+1,c
 10940  002236  0012               	return		;funcret
 10941  002238                     __end_of_captureKeypad:
 10942                           	opt stack 0
 10943                           pclatu	equ	0xFFB
 10944                           pclath	equ	0xFFA
 10945                           tblptru	equ	0xFF8
 10946                           tblptrh	equ	0xFF7
 10947                           tblptrl	equ	0xFF6
 10948                           tablat	equ	0xFF5
 10949                           prodh	equ	0xFF4
 10950                           prodl	equ	0xFF3
 10951                           intcon	equ	0xFF2
 10952                           intcon3	equ	0xFF0
 10953                           postinc0	equ	0xFEE
 10954                           fsr0h	equ	0xFEA
 10955                           fsr0l	equ	0xFE9
 10956                           wreg	equ	0xFE8
 10957                           plusw1	equ	0xFE3
 10958                           fsr1h	equ	0xFE2
 10959                           fsr1l	equ	0xFE1
 10960                           indf2	equ	0xFDF
 10961                           postinc2	equ	0xFDE
 10962                           postdec2	equ	0xFDD
 10963                           plusw2	equ	0xFDB
 10964                           fsr2h	equ	0xFDA
 10965                           fsr2l	equ	0xFD9
 10966                           status	equ	0xFD8
 10967                           
 10968 ;; *************** function _ReadRun *****************
 10969 ;; Defined at:
 10970 ;;		line 66 in file "eeprom.c"
 10971 ;; Parameters:    Size  Location     Type
 10972 ;;  backruns        1    wreg     unsigned char 
 10973 ;;  sorted          2    2[COMRAM] PTR unsigned char 
 10974 ;;		 -> PermLog@sorted(4), 
 10975 ;;  time            2    4[COMRAM] PTR unsigned int 
 10976 ;;		 -> PermLog@time(2), 
 10977 ;; Auto vars:     Size  Location     Type
 10978 ;;  backruns        1   10[COMRAM] unsigned char 
 10979 ;;  add             2   11[COMRAM] unsigned int 
 10980 ;; Return value:  Size  Location     Type
 10981 ;;                  1    wreg      void 
 10982 ;; Registers used:
 10983 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10984 ;; Tracked objects:
 10985 ;;		On entry : 0/0
 10986 ;;		On exit  : 0/0
 10987 ;;		Unchanged: 0/0
 10988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10989 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10990 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10991 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10992 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10993 ;;Total ram usage:       11 bytes
 10994 ;; Hardware stack levels used:    1
 10995 ;; Hardware stack levels required when called:    1
 10996 ;; This function calls:
 10997 ;;		_back
 10998 ;;		i2_ReadEE
 10999 ;; This function is called by:
 11000 ;;		_PermLog
 11001 ;; This function uses a non-reentrant model
 11002 ;;
 11003                           
 11004                           	psect	text60
 11005  0010BE                     __ptext60:
 11006                           	opt stack 0
 11007  0010BE                     _ReadRun:
 11008                           	opt stack 23
 11009                           
 11010                           ;incstack = 0
 11011                           ;ReadRun@backruns stored from wreg
 11012  0010BE  6E0B               	movwf	ReadRun@backruns,c
 11013                           
 11014                           ;eeprom.c: 67: unsigned int add = back(backruns) * 5;
 11015  0010C0  500B               	movf	ReadRun@backruns,w,c
 11016  0010C2  EC1C  F011         	call	_back
 11017  0010C6  6E07               	movwf	??_ReadRun& (0+255),c
 11018  0010C8  5007               	movf	??_ReadRun,w,c
 11019  0010CA  0D05               	mullw	5
 11020  0010CC  CFF3 F00C          	movff	prodl,ReadRun@add
 11021  0010D0  CFF4 F00D          	movff	prodh,ReadRun@add+1
 11022                           
 11023                           ;eeprom.c: 68: *time = ReadEE(add++ *8);
 11024  0010D4  C00C  F007         	movff	ReadRun@add,??_ReadRun
 11025  0010D8  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 11026  0010DC  90D8               	bcf	status,0,c
 11027  0010DE  3607               	rlcf	??_ReadRun,f,c
 11028  0010E0  3608               	rlcf	??_ReadRun+1,f,c
 11029  0010E2  90D8               	bcf	status,0,c
 11030  0010E4  3607               	rlcf	??_ReadRun,f,c
 11031  0010E6  3608               	rlcf	??_ReadRun+1,f,c
 11032  0010E8  90D8               	bcf	status,0,c
 11033  0010EA  3607               	rlcf	??_ReadRun,f,c
 11034  0010EC  3608               	rlcf	??_ReadRun+1,f,c
 11035  0010EE  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 11036  0010F2  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 11037  0010F6  EC36  F011         	call	i2_ReadEE	;wreg free
 11038  0010FA  6E09               	movwf	(??_ReadRun+2)& (0+255),c
 11039  0010FC  6A0A               	clrf	(??_ReadRun+3)& (0+255),c
 11040  0010FE  C005  FFD9         	movff	ReadRun@time,fsr2l
 11041  001102  C006  FFDA         	movff	ReadRun@time+1,fsr2h
 11042  001106  C009  FFDE         	movff	??_ReadRun+2,postinc2
 11043  00110A  C00A  FFDD         	movff	??_ReadRun+3,postdec2
 11044  00110E  4A0C               	infsnz	ReadRun@add,f,c
 11045  001110  2A0D               	incf	ReadRun@add+1,f,c
 11046                           
 11047                           ;eeprom.c: 69: sorted[0] = ReadEE(add++ *8);
 11048  001112  C00C  F007         	movff	ReadRun@add,??_ReadRun
 11049  001116  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 11050  00111A  90D8               	bcf	status,0,c
 11051  00111C  3607               	rlcf	??_ReadRun,f,c
 11052  00111E  3608               	rlcf	??_ReadRun+1,f,c
 11053  001120  90D8               	bcf	status,0,c
 11054  001122  3607               	rlcf	??_ReadRun,f,c
 11055  001124  3608               	rlcf	??_ReadRun+1,f,c
 11056  001126  90D8               	bcf	status,0,c
 11057  001128  3607               	rlcf	??_ReadRun,f,c
 11058  00112A  3608               	rlcf	??_ReadRun+1,f,c
 11059  00112C  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 11060  001130  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 11061  001134  EC36  F011         	call	i2_ReadEE	;wreg free
 11062  001138  C003  FFD9         	movff	ReadRun@sorted,fsr2l
 11063  00113C  C004  FFDA         	movff	ReadRun@sorted+1,fsr2h
 11064  001140  6EDF               	movwf	indf2,c
 11065  001142  4A0C               	infsnz	ReadRun@add,f,c
 11066  001144  2A0D               	incf	ReadRun@add+1,f,c
 11067                           
 11068                           ;eeprom.c: 70: sorted[1] = ReadEE(add++ *8);
 11069  001146  EE20 F001          	lfsr	2,1
 11070  00114A  5003               	movf	ReadRun@sorted,w,c
 11071  00114C  26D9               	addwf	fsr2l,f,c
 11072  00114E  5004               	movf	ReadRun@sorted+1,w,c
 11073  001150  22DA               	addwfc	fsr2h,f,c
 11074  001152  C00C  F007         	movff	ReadRun@add,??_ReadRun
 11075  001156  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 11076  00115A  90D8               	bcf	status,0,c
 11077  00115C  3607               	rlcf	??_ReadRun,f,c
 11078  00115E  3608               	rlcf	??_ReadRun+1,f,c
 11079  001160  90D8               	bcf	status,0,c
 11080  001162  3607               	rlcf	??_ReadRun,f,c
 11081  001164  3608               	rlcf	??_ReadRun+1,f,c
 11082  001166  90D8               	bcf	status,0,c
 11083  001168  3607               	rlcf	??_ReadRun,f,c
 11084  00116A  3608               	rlcf	??_ReadRun+1,f,c
 11085  00116C  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 11086  001170  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 11087  001174  EC36  F011         	call	i2_ReadEE	;wreg free
 11088  001178  6EDF               	movwf	indf2,c
 11089  00117A  4A0C               	infsnz	ReadRun@add,f,c
 11090  00117C  2A0D               	incf	ReadRun@add+1,f,c
 11091                           
 11092                           ;eeprom.c: 71: sorted[2] = ReadEE(add++ *8);
 11093  00117E  EE20 F002          	lfsr	2,2
 11094  001182  5003               	movf	ReadRun@sorted,w,c
 11095  001184  26D9               	addwf	fsr2l,f,c
 11096  001186  5004               	movf	ReadRun@sorted+1,w,c
 11097  001188  22DA               	addwfc	fsr2h,f,c
 11098  00118A  C00C  F007         	movff	ReadRun@add,??_ReadRun
 11099  00118E  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 11100  001192  90D8               	bcf	status,0,c
 11101  001194  3607               	rlcf	??_ReadRun,f,c
 11102  001196  3608               	rlcf	??_ReadRun+1,f,c
 11103  001198  90D8               	bcf	status,0,c
 11104  00119A  3607               	rlcf	??_ReadRun,f,c
 11105  00119C  3608               	rlcf	??_ReadRun+1,f,c
 11106  00119E  90D8               	bcf	status,0,c
 11107  0011A0  3607               	rlcf	??_ReadRun,f,c
 11108  0011A2  3608               	rlcf	??_ReadRun+1,f,c
 11109  0011A4  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 11110  0011A8  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 11111  0011AC  EC36  F011         	call	i2_ReadEE	;wreg free
 11112  0011B0  6EDF               	movwf	indf2,c
 11113  0011B2  4A0C               	infsnz	ReadRun@add,f,c
 11114  0011B4  2A0D               	incf	ReadRun@add+1,f,c
 11115                           
 11116                           ;eeprom.c: 72: sorted[3] = ReadEE(add++ *8);
 11117  0011B6  EE20 F003          	lfsr	2,3
 11118  0011BA  5003               	movf	ReadRun@sorted,w,c
 11119  0011BC  26D9               	addwf	fsr2l,f,c
 11120  0011BE  5004               	movf	ReadRun@sorted+1,w,c
 11121  0011C0  22DA               	addwfc	fsr2h,f,c
 11122  0011C2  C00C  F007         	movff	ReadRun@add,??_ReadRun
 11123  0011C6  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 11124  0011CA  90D8               	bcf	status,0,c
 11125  0011CC  3607               	rlcf	??_ReadRun,f,c
 11126  0011CE  3608               	rlcf	??_ReadRun+1,f,c
 11127  0011D0  90D8               	bcf	status,0,c
 11128  0011D2  3607               	rlcf	??_ReadRun,f,c
 11129  0011D4  3608               	rlcf	??_ReadRun+1,f,c
 11130  0011D6  90D8               	bcf	status,0,c
 11131  0011D8  3607               	rlcf	??_ReadRun,f,c
 11132  0011DA  3608               	rlcf	??_ReadRun+1,f,c
 11133  0011DC  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 11134  0011E0  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 11135  0011E4  EC36  F011         	call	i2_ReadEE	;wreg free
 11136  0011E8  6EDF               	movwf	indf2,c
 11137  0011EA  4A0C               	infsnz	ReadRun@add,f,c
 11138  0011EC  2A0D               	incf	ReadRun@add+1,f,c
 11139  0011EE  0012               	return		;funcret
 11140  0011F0                     __end_of_ReadRun:
 11141                           	opt stack 0
 11142                           pclatu	equ	0xFFB
 11143                           pclath	equ	0xFFA
 11144                           tblptru	equ	0xFF8
 11145                           tblptrh	equ	0xFF7
 11146                           tblptrl	equ	0xFF6
 11147                           tablat	equ	0xFF5
 11148                           prodh	equ	0xFF4
 11149                           prodl	equ	0xFF3
 11150                           intcon	equ	0xFF2
 11151                           intcon3	equ	0xFF0
 11152                           postinc0	equ	0xFEE
 11153                           fsr0h	equ	0xFEA
 11154                           fsr0l	equ	0xFE9
 11155                           wreg	equ	0xFE8
 11156                           plusw1	equ	0xFE3
 11157                           fsr1h	equ	0xFE2
 11158                           fsr1l	equ	0xFE1
 11159                           indf2	equ	0xFDF
 11160                           postinc2	equ	0xFDE
 11161                           postdec2	equ	0xFDD
 11162                           plusw2	equ	0xFDB
 11163                           fsr2h	equ	0xFDA
 11164                           fsr2l	equ	0xFD9
 11165                           status	equ	0xFD8
 11166                           
 11167 ;; *************** function i2_ReadEE *****************
 11168 ;; Defined at:
 11169 ;;		line 16 in file "eeprom.c"
 11170 ;; Parameters:    Size  Location     Type
 11171 ;;  address         2    0[COMRAM] unsigned int 
 11172 ;; Auto vars:     Size  Location     Type
 11173 ;;		None
 11174 ;; Return value:  Size  Location     Type
 11175 ;;                  1    wreg      unsigned char 
 11176 ;; Registers used:
 11177 ;;		wreg, status,2
 11178 ;; Tracked objects:
 11179 ;;		On entry : 0/0
 11180 ;;		On exit  : 0/0
 11181 ;;		Unchanged: 0/0
 11182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11183 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11186 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11187 ;;Total ram usage:        2 bytes
 11188 ;; Hardware stack levels used:    1
 11189 ;; This function calls:
 11190 ;;		Nothing
 11191 ;; This function is called by:
 11192 ;;		_ReadRun
 11193 ;; This function uses a non-reentrant model
 11194 ;;
 11195                           
 11196                           	psect	text61
 11197  00226C                     __ptext61:
 11198                           	opt stack 0
 11199  00226C                     i2_ReadEE:
 11200                           	opt stack 23
 11201                           
 11202                           ;eeprom.c: 19: EEADRH = (unsigned char) (address >> 8);
 11203                           
 11204                           ;incstack = 0
 11205  00226C  5002               	movf	i2ReadEE@address+1,w,c
 11206  00226E  6EAA               	movwf	4010,c	;volatile
 11207                           
 11208                           ;eeprom.c: 20: EEADR = (unsigned char) address;
 11209  002270  C001  FFA9         	movff	i2ReadEE@address,4009	;volatile
 11210                           
 11211                           ;eeprom.c: 22: EECON1bits.EEPGD = 0;
 11212  002274  9EA6               	bcf	4006,7,c	;volatile
 11213                           
 11214                           ;eeprom.c: 23: EECON1bits.CFGS = 0;
 11215  002276  9CA6               	bcf	4006,6,c	;volatile
 11216                           
 11217                           ;eeprom.c: 24: EECON1bits.RD = 1;
 11218  002278  80A6               	bsf	4006,0,c	;volatile
 11219  00227A                     i2l418:
 11220  00227A  B0A6               	btfsc	4006,0,c	;volatile
 11221  00227C  D7FE               	goto	i2l418
 11222                           
 11223                           ;eeprom.c: 30: return EEDATA;
 11224  00227E  50A8               	movf	4008,w,c	;volatile
 11225  002280  0012               	return	
 11226  002282                     __end_ofi2_ReadEE:
 11227                           	opt stack 0
 11228                           pclatu	equ	0xFFB
 11229                           pclath	equ	0xFFA
 11230                           tblptru	equ	0xFF8
 11231                           tblptrh	equ	0xFF7
 11232                           tblptrl	equ	0xFF6
 11233                           tablat	equ	0xFF5
 11234                           prodh	equ	0xFF4
 11235                           prodl	equ	0xFF3
 11236                           intcon	equ	0xFF2
 11237                           intcon3	equ	0xFF0
 11238                           postinc0	equ	0xFEE
 11239                           fsr0h	equ	0xFEA
 11240                           fsr0l	equ	0xFE9
 11241                           wreg	equ	0xFE8
 11242                           plusw1	equ	0xFE3
 11243                           fsr1h	equ	0xFE2
 11244                           fsr1l	equ	0xFE1
 11245                           indf2	equ	0xFDF
 11246                           postinc2	equ	0xFDE
 11247                           postdec2	equ	0xFDD
 11248                           plusw2	equ	0xFDB
 11249                           fsr2h	equ	0xFDA
 11250                           fsr2l	equ	0xFD9
 11251                           status	equ	0xFD8
 11252                           
 11253 ;; *************** function _back *****************
 11254 ;; Defined at:
 11255 ;;		line 57 in file "eeprom.c"
 11256 ;; Parameters:    Size  Location     Type
 11257 ;;  runs            1    wreg     unsigned char 
 11258 ;; Auto vars:     Size  Location     Type
 11259 ;;  runs            1    0[COMRAM] unsigned char 
 11260 ;;  result          1    1[COMRAM] unsigned char 
 11261 ;; Return value:  Size  Location     Type
 11262 ;;                  1    wreg      unsigned char 
 11263 ;; Registers used:
 11264 ;;		wreg, status,2, status,0
 11265 ;; Tracked objects:
 11266 ;;		On entry : 0/0
 11267 ;;		On exit  : 0/0
 11268 ;;		Unchanged: 0/0
 11269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11271 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11273 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11274 ;;Total ram usage:        2 bytes
 11275 ;; Hardware stack levels used:    1
 11276 ;; This function calls:
 11277 ;;		Nothing
 11278 ;; This function is called by:
 11279 ;;		_ReadRun
 11280 ;; This function uses a non-reentrant model
 11281 ;;
 11282                           
 11283                           	psect	text62
 11284  002238                     __ptext62:
 11285                           	opt stack 0
 11286  002238                     _back:
 11287                           	opt stack 23
 11288                           
 11289                           ;incstack = 0
 11290                           ;back@runs stored from wreg
 11291  002238  6E01               	movwf	back@runs,c
 11292                           
 11293                           ;eeprom.c: 59: unsigned char result = Latest + 4 - runs;
 11294  00223A  5001               	movf	back@runs,w,c
 11295  00223C  0800               	sublw	0
 11296  00223E  0100               	movlb	0	; () banked
 11297  002240  25A2               	addwf	_Latest& (0+255),w,b
 11298  002242  0F04               	addlw	4
 11299  002244  6E02               	movwf	back@result,c
 11300                           
 11301                           ;eeprom.c: 60: if (result > 4) {
 11302  002246  0E04               	movlw	4
 11303  002248  6402               	cpfsgt	back@result,c
 11304  00224A  D002               	goto	i2l3346
 11305                           
 11306                           ; BSR set to: 0
 11307                           ;eeprom.c: 61: result -= 4;
 11308  00224C  0E04               	movlw	4
 11309  00224E  5E02               	subwf	back@result,f,c
 11310  002250                     i2l3346:
 11311                           
 11312                           ; BSR set to: 0
 11313                           ;eeprom.c: 62: }
 11314                           ;eeprom.c: 63: return result;
 11315  002250  5002               	movf	back@result,w,c
 11316  002252  0012               	return	
 11317  002254                     __end_of_back:
 11318                           	opt stack 0
 11319                           pclatu	equ	0xFFB
 11320                           pclath	equ	0xFFA
 11321                           tblptru	equ	0xFF8
 11322                           tblptrh	equ	0xFF7
 11323                           tblptrl	equ	0xFF6
 11324                           tablat	equ	0xFF5
 11325                           prodh	equ	0xFF4
 11326                           prodl	equ	0xFF3
 11327                           intcon	equ	0xFF2
 11328                           intcon3	equ	0xFF0
 11329                           postinc0	equ	0xFEE
 11330                           fsr0h	equ	0xFEA
 11331                           fsr0l	equ	0xFE9
 11332                           wreg	equ	0xFE8
 11333                           plusw1	equ	0xFE3
 11334                           fsr1h	equ	0xFE2
 11335                           fsr1l	equ	0xFE1
 11336                           indf2	equ	0xFDF
 11337                           postinc2	equ	0xFDE
 11338                           postdec2	equ	0xFDD
 11339                           plusw2	equ	0xFDB
 11340                           fsr2h	equ	0xFDA
 11341                           fsr2l	equ	0xFD9
 11342                           status	equ	0xFD8
 11343                           pclatu	equ	0xFFB
 11344                           pclath	equ	0xFFA
 11345                           tblptru	equ	0xFF8
 11346                           tblptrh	equ	0xFF7
 11347                           tblptrl	equ	0xFF6
 11348                           tablat	equ	0xFF5
 11349                           prodh	equ	0xFF4
 11350                           prodl	equ	0xFF3
 11351                           intcon	equ	0xFF2
 11352                           intcon3	equ	0xFF0
 11353                           postinc0	equ	0xFEE
 11354                           fsr0h	equ	0xFEA
 11355                           fsr0l	equ	0xFE9
 11356                           wreg	equ	0xFE8
 11357                           plusw1	equ	0xFE3
 11358                           fsr1h	equ	0xFE2
 11359                           fsr1l	equ	0xFE1
 11360                           indf2	equ	0xFDF
 11361                           postinc2	equ	0xFDE
 11362                           postdec2	equ	0xFDD
 11363                           plusw2	equ	0xFDB
 11364                           fsr2h	equ	0xFDA
 11365                           fsr2l	equ	0xFD9
 11366                           status	equ	0xFD8
 11367                           
 11368                           	psect	rparam
 11369  0000                     pclatu	equ	0xFFB
 11370                           pclath	equ	0xFFA
 11371                           tblptru	equ	0xFF8
 11372                           tblptrh	equ	0xFF7
 11373                           tblptrl	equ	0xFF6
 11374                           tablat	equ	0xFF5
 11375                           prodh	equ	0xFF4
 11376                           prodl	equ	0xFF3
 11377                           intcon	equ	0xFF2
 11378                           intcon3	equ	0xFF0
 11379                           postinc0	equ	0xFEE
 11380                           fsr0h	equ	0xFEA
 11381                           fsr0l	equ	0xFE9
 11382                           wreg	equ	0xFE8
 11383                           plusw1	equ	0xFE3
 11384                           fsr1h	equ	0xFE2
 11385                           fsr1l	equ	0xFE1
 11386                           indf2	equ	0xFDF
 11387                           postinc2	equ	0xFDE
 11388                           postdec2	equ	0xFDD
 11389                           plusw2	equ	0xFDB
 11390                           fsr2h	equ	0xFDA
 11391                           fsr2l	equ	0xFD9
 11392                           status	equ	0xFD8
 11393                           
 11394                           	psect	temp
 11395  00007C                     btemp:
 11396                           	opt stack 0
 11397  00007C                     	ds	1
 11398  0000                     int$flags	set	btemp
 11399                           pclatu	equ	0xFFB
 11400                           pclath	equ	0xFFA
 11401                           tblptru	equ	0xFF8
 11402                           tblptrh	equ	0xFF7
 11403                           tblptrl	equ	0xFF6
 11404                           tablat	equ	0xFF5
 11405                           prodh	equ	0xFF4
 11406                           prodl	equ	0xFF3
 11407                           intcon	equ	0xFF2
 11408                           intcon3	equ	0xFF0
 11409                           postinc0	equ	0xFEE
 11410                           fsr0h	equ	0xFEA
 11411                           fsr0l	equ	0xFE9
 11412                           wreg	equ	0xFE8
 11413                           plusw1	equ	0xFE3
 11414                           fsr1h	equ	0xFE2
 11415                           fsr1l	equ	0xFE1
 11416                           indf2	equ	0xFDF
 11417                           postinc2	equ	0xFDE
 11418                           postdec2	equ	0xFDD
 11419                           plusw2	equ	0xFDB
 11420                           fsr2h	equ	0xFDA
 11421                           fsr2l	equ	0xFD9
 11422                           status	equ	0xFD8


Data Sizes:
    Strings     576
    Constant    18
    Data        0
    BSS         44
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    121     123
    BANK0           128     42      84
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_53(CODE[17]), STR_52(CODE[17]), STR_51(CODE[18]), STR_50(CODE[22]), 
		 -> STR_49(CODE[4]), STR_48(CODE[4]), STR_47(CODE[4]), STR_46(CODE[4]), 
		 -> STR_45(CODE[4]), STR_44(CODE[4]), STR_43(CODE[4]), STR_42(CODE[3]), 
		 -> STR_41(CODE[4]), STR_40(CODE[4]), STR_39(CODE[4]), STR_38(CODE[4]), 
		 -> STR_37(CODE[18]), STR_36(CODE[20]), STR_35(CODE[16]), STR_34(CODE[21]), 
		 -> STR_33(CODE[16]), STR_32(CODE[21]), STR_31(CODE[16]), STR_30(CODE[20]), 
		 -> STR_29(CODE[16]), STR_28(CODE[21]), STR_27(CODE[23]), STR_26(CODE[24]), 
		 -> STR_25(CODE[21]), STR_24(CODE[24]), STR_23(CODE[24]), STR_22(CODE[25]), 
		 -> STR_21(CODE[19]), STR_20(CODE[25]), STR_19(CODE[25]), STR_18(CODE[27]), 
		 -> STR_17(CODE[19]), STR_16(CODE[25]), STR_15(CODE[3]), STR_14(CODE[3]), 
		 -> STR_13(CODE[3]), STR_12(CODE[5]), STR_11(CODE[3]), STR_10(CODE[3]), 
		 -> STR_9(CODE[3]), STR_8(CODE[4]), STR_7(CODE[3]), STR_6(CODE[3]), 
		 -> STR_5(CODE[3]), STR_4(CODE[4]), STR_3(CODE[5]), STR_2(CODE[24]), 
		 -> STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    WriteRun@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(COMRAM[4]), 

    ReadRun@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> PermLog@sorted(COMRAM[4]), 

    ReadRun@time	PTR unsigned int  size(2) Largest target is 2
		 -> PermLog@time(COMRAM[2]), 

    check9@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(COMRAM[4]), 

    checkC@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(COMRAM[4]), 

    checkAA@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(COMRAM[4]), 

    stopMoving$546	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_37(CODE[18]), STR_36(CODE[20]), 

    CCW90@port	PTR int  size(2) Largest target is 6
		 -> simulate@portCCW(COMRAM[6]), 

    CW90@port	PTR int  size(2) Largest target is 6
		 -> simulate@portCW(COMRAM[6]), 

    PWMC@port	PTR int  size(2) Largest target is 6
		 -> intrpt@portCW(COMRAM[6]), simulate@portCCW(COMRAM[6]), simulate@portCW(COMRAM[6]), 

    getTime@time	PTR unsigned char  size(2) Largest target is 7
		 -> time(BANK0[7]), 

    showInfo@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> PermLog@sorted(COMRAM[4]), simulate@sorted(COMRAM[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _intrpt in COMRAM

    _intrpt->_simulate
    _simulate->_check9
    _simulate->_checkAA
    _simulate->_checkC
    i2_getTime->i2_I2C_Master_Read
    i2_getTime->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    _stopMoving->i2_printf
    _checkC->_checkV
    _checkAA->_checkV
    _check9->_checkV
    _checkV->___ftge
    ___ftmul->___ftpack
    ___ftge->___ftdiv
    ___ftdiv->___ftmul
    ___awtoft->___ftpack
    _WriteRun->i2___wmul
    _HexDecToDec2->i2___wmul
    _CW90->_PWMC
    _CCW90->_PWMC
    _PWMC->___awdiv
    _PermLog->_showInfo
    _showInfo->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble
    _ReadRun->_back
    _ReadRun->i2_ReadEE

Critical Paths under _main in BANK0

    _main->_showRTC
    _showRTC->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _getTime->_I2C_Master_Read
    _getTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _initialize->_I2C_Master_Init
    _initLatest->_ReadEE
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _intrpt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _intrpt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _intrpt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _intrpt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _intrpt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _intrpt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _intrpt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _intrpt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _intrpt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _intrpt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _intrpt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _intrpt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _intrpt in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _intrpt in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _intrpt in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _intrpt in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   10653
                                             40 BANK0      2     2      0
                         _initialize
                            _lcdInst
                             _printf
                            _showRTC
 ---------------------------------------------------------------------------------
 (1) _showRTC                                              2     2      0    5091
                                             38 BANK0      2     2      0
                            _getTime
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              30    22      8    4483
                                             12 BANK0     26    18      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     517
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _getTime                                              3     1      2     473
                                              3 BANK0      3     1      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2     214
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _initialize                                           1     1      0     944
                                             21 BANK0      1     1      0
                    _I2C_Master_Init
                            _initLCD
                         _initLatest
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _initLatest                                           0     0      0     298
                             _ReadEE
 ---------------------------------------------------------------------------------
 (3) _ReadEE                                               2     0      2     298
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _intrpt                                              23    23      0   70045
                                             98 COMRAM    23    23      0
                               _PWMC
                            _PermLog
                           _simulate
                         _stopMoving
 ---------------------------------------------------------------------------------
 (6) _simulate                                            38    38      0   55966
                                             60 COMRAM    38    38      0
                              _CCW90
                               _CW90
                       _HexDecToDec2
                           _WriteRun
                             _check9
                            _checkAA
                             _checkC
                           _showInfo
                         _stopMoving
                           i2___wmul
                          i2_getTime
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) i2_getTime                                            3     1      2     283
                                              3 COMRAM     3     1      2
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Write                                   2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _stopMoving                                           3     3      0    3472
                                             40 COMRAM     3     3      0
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _checkC                                               2     0      2   12212
                                             58 COMRAM     2     0      2
                             _checkV
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _checkAA                                              2     0      2   12212
                                             58 COMRAM     2     0      2
                             _checkV
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _check9                                               2     0      2   12212
                                             58 COMRAM     2     0      2
                             _checkV
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) _checkV                                              11     6      5    8835
                                             47 COMRAM    11     6      5
                                 _AD
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                          _fluctuate
 ---------------------------------------------------------------------------------
 (9) _fluctuate                                            8     4      4     518
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             15     9      6    2587
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftge                                               9     3      6     264
                                             38 COMRAM     9     3      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             15     9      6    2541
                                             23 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             4     1      3    2186
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2031
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) _AD                                                   5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (7) _WriteRun                                             8     4      4    1621
                                              6 COMRAM     8     4      4
                            _WriteEE
                           i2___wmul
 ---------------------------------------------------------------------------------
 (8) _WriteEE                                              3     0      3     834
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (7) _HexDecToDec2                                         9     7      2     711
                                              6 COMRAM     9     7      2
                           i2___wmul
 ---------------------------------------------------------------------------------
 (7) _CW90                                                 2     0      2    2333
                                             21 COMRAM     2     0      2
                               _PWMC
 ---------------------------------------------------------------------------------
 (7) _CCW90                                                2     0      2    2333
                                             21 COMRAM     2     0      2
                               _PWMC
 ---------------------------------------------------------------------------------
 (8) _PWMC                                                40    34      6    2247
                                              8 COMRAM    13     7      6
                            ___awdiv
 ---------------------------------------------------------------------------------
 (9) ___awdiv                                              8     4      4     428
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (6) _PermLog                                             10    10      0    8218
                                             53 COMRAM    10    10      0
                            _ReadRun
                      _captureKeypad
                           _showInfo
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _showInfo                                            13     9      4    3929
                                             40 COMRAM    13     9      4
                      _captureKeypad
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) i2_printf                                            32    22     10    3269
                                             12 COMRAM    28    18     10
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (8) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (8) i2___wmul                                             6     2      4     365
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (8) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (7) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (9) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _captureKeypad                                        3     1      2      23
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (7) _ReadRun                                             11     7      4     618
                                              2 COMRAM    11     7      4
                               _back
                           i2_ReadEE
 ---------------------------------------------------------------------------------
 (8) i2_ReadEE                                             2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _back                                                 2     2      0      68
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialize
     _I2C_Master_Init
       ___lldiv
     _initLCD
       _lcdInst
         _lcdNibble
     _initLatest
       _ReadEE
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
   _showRTC
     _getTime
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble

 _intrpt (ROOT)
   _PWMC
     ___awdiv
   _PermLog
     _ReadRun
       _back
       i2_ReadEE
     _captureKeypad
     _showInfo
       _captureKeypad
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _simulate
     _CCW90
       _PWMC
         ___awdiv
     _CW90
       _PWMC
         ___awdiv
     _HexDecToDec2
       i2___wmul
     _WriteRun
       _WriteEE
       i2___wmul
     _check9
       _checkV
         _AD
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftge
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
         _fluctuate
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _checkAA
       _checkV
         _AD
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftge
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
         _fluctuate
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _checkC
       _checkV
         _AD
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftge
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
         _fluctuate
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _showInfo
       _captureKeypad
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _stopMoving
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2___wmul
     i2_getTime
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _stopMoving
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2A      54       5       65.6%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     79      7B       1       97.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      CF      34        0.0%
DATA                 0      0      CF       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sat Mar 25 19:26:34 2017

         i2_I2C_Master_Start 230C           i2_I2C_Master_Write 22EA                           _AD 20E4  
               ___awdiv@sign 0006          ___wmul@multiplicand 00AC           i2___lwdiv@dividend 0001  
                __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                  __CFG_OSC$HS 000000  
                        ?_AD 0001                          l418 2264                          l370 2282  
                        l509 02F6                          l929 1C26                          l939 1D66  
                        l876 163E                 __CFG_CPB$OFF 000000                          _PEN 007E2A  
               __CFG_CPD$OFF 000000                          _SEN 007E28          ?i2_I2C_Master_Start 0001  
        ?i2_I2C_Master_Write 0002                          wreg 000FE8                         ??_AD 0003  
               __CFG_LVP$OFF 000000                 ___ftdiv@cntr 0021                 ___ftdiv@sign 0026  
               __CFG_WDT$OFF 000000                         l3400 1BE8                         l3420 1D34  
                       l3270 20B2                         l3408 1C18                         l3424 1D58  
                       l3416 1D22                         l3418 1D2E                         l4330 1F0E  
                       l3700 0224                         l3374 15C2                         l3358 20DA  
                       l3376 15D2                         l3720 02A4                         l3632 0034  
                       l3386 162C                         l3378 15D8                         l3730 02D0  
                       l3722 02AE                         l3714 025A                         l3634 0046  
                       l3396 1BD6                         l3732 02DC                         l3716 026C  
                       l3660 0130                         l3652 00F8                         l3644 0080  
                       l3628 0020                         l3398 1BE2                         l3670 017A  
                       l3662 0136                         l3654 00FE                         l3638 0050  
                       l3750 03BC                         l3736 02FC                         l3744 0396  
                       l3664 014E                         l3680 01C6                         l3738 0348  
                       l3746 03A8                         l3674 0192                         l3658 0124  
                       l3748 03B0                         l3684 01E2                         l3668 0162  
                       l3686 01E8                         l3678 019A                         l3882 19E4  
                       l3698 021E                         l3892 1A12                         l3886 19EE  
                       _ADFM 007E07                         _ADON 007E10                         _CW90 21C0  
                       STR_1 FFD4                         STR_2 FE86                         STR_3 FFCF  
                       STR_4 FFF2                         STR_5 FFF9                         STR_6 FFF6  
                       STR_7 FFFC                         STR_8 FFEE                         STR_9 FFF9  
                       _LATA 000F89                         _LATB 000F8A                         _LATC 000F8B  
                       _LATD 000F8C                         _LATE 000F8D                         u2170 20B0  
                       u3207 1CD0                         u3217 1CFC                         u3137 1EF0  
                       u3227 1D06                         u3147 1AAA                         u3157 1B80  
                       u3167 1BA8                         u3177 1F66                         u3187 1F9A  
                       u2645 1DA0                         u3197 1CC6                         _RCEN 007E2B  
                       _PWMC 12E4                checkAA@sorted 003B                         _back 2238  
                       _main 1EC8                 ___ftpack@arg 0001                         _mode 007A  
               ___ftpack@exp 0004                         _time 00A3                         fsr0h 000FEA  
                       fsr1h 000FE2           i2___lwdiv@quotient 0005                         fsr2h 000FDA  
                       fsr0l 000FE9                         indf2 000FDF                         fsr1l 000FE1  
                       fsr2l 000FD9                         btemp 007C         ??i2_I2C_Master_Start 0002  
       ??i2_I2C_Master_Write 0004                         prodh 000FF4                         prodl 000FF3  
            ReadRun@backruns 000B                         start 000E                __CFG_IESO$OFF 000000  
       __end_of_HexDecToDec2 1F5E                 simulate@stop 003F                   ReadRun@add 000C  
            __end_ofi2_putch 22D4                __CFG_MCLRE$ON 000000                 ___ftmul@cntr 0016  
               ___param_bank 000000                 ___ftmul@sign 0017                   i2getTime@i 0006  
                i2_lcdNibble 1DD0              __end_of_ReadRun 11F0              __end_of_PermLog 1594  
                      ?_CW90 0016             ?_I2C_Master_Init 00B7             ?_I2C_Master_Read 0001  
                      ?_PWMC 0009             ?_I2C_Master_Wait 0001             ?_I2C_Master_Stop 0001  
                      ?_back 0001                        ?_main 0001                        _ACKEN 007E2C  
                      _ACKDT 007E2D                        _CCW90 21DE              __end_of___awdiv 1B3C  
                      _EEADR 000FA9                        STR_10 FFF6                        STR_11 FFFC  
                      STR_12 FFDD                        STR_20 FE0C                        STR_13 FFF9  
                      STR_21 FF47                        STR_14 FFF6                        STR_30 FF33  
                      STR_22 FDDA                        STR_31 FFC4                        STR_15 FFFC  
                      STR_23 FE6E                        STR_40 FFE2                        STR_32 FEF5  
                      STR_24 FE3E                        STR_16 FE25                        STR_33 FFC4  
                      STR_41 FFEA                        STR_17 FF5A                        STR_25 FF0A  
                      STR_42 FFEF                        STR_34 FECB                        STR_50 FEB5  
                      STR_26 FE56                        STR_18 FDBF                        STR_35 FFC4  
                      STR_43 FFE6                        STR_51 FF6D                        STR_27 FE9E  
                      STR_19 FDF3                        STR_44 FFE2                        STR_52 FFA2  
                      STR_36 FF1F                        STR_28 FEE0                        STR_45 FFEA  
                      STR_29 FFC4                        STR_53 FFB3                        STR_37 FF7F  
                      STR_38 FFDE                        STR_46 FFF2                        STR_54 FF91  
                      STR_47 FFE6                        STR_39 FFE6                        STR_48 FFE2  
                      STR_49 FFEA              __end_of___ftdiv 14BC              __end_of_WriteEE 215A  
            __end_of___lldiv 1650              __end_of___ftmul 12E4              ___awdiv@divisor 0003  
                      _LATC0 007C58                        _LATC1 007C59                        _LATC2 007C5A  
                      _LATC6 007C5E              __end_of___lwdiv 1C30                        i2l112 050C  
            __end_of___lwmod 1D70                        i2l212 221C                        i2l116 0560  
                      i2l132 0DA0                        i2l215 2228                        i2l151 0DD4  
                      i2l135 0CC0                        i2l312 10B8                        i2l156 0DD0  
                      i2l148 0DD6                        i2l424 2150                        i2l441 158C  
                      i2l257 131C                        i2l418 227A                        i2l370 2296  
                      i2l275 201C                        i2l509 0974                        i2l293 20F2  
                      i2l804 148A                        i2l746 18F6                        i2l929 1E6E  
                      i2l939 1FDC              ___awdiv@counter 0005              __end_of_checkAA 1868  
                      _PORTB 000F81                        _TRISA 000F92                        _TRISB 000F93  
                      _TRISC 000F94                        _TRISD 000F95                        _TRISE 000F96  
              __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000  
              simulate@F3101 009E                simulate@F3103 009A                simulate@F3112 008C  
              simulate@F3105 0096                simulate@F3114 0086                __CFG_WRT2$OFF 000000  
              __CFG_WRT3$OFF 000000              __end_of_lcdInst 22C8               __CFG_EBTR0$OFF 000000  
             __CFG_FCMEN$OFF 000000              __end_of_getTime 1A30               __CFG_EBTR1$OFF 000000  
             __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000  
              __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000              __end_of_initLCD 1FA4  
             __CFG_EBTRB$OFF 000000                   i2isdigit@c 0003                ___awtoft@sign 000C  
            __end_of_dpowers FDB7             __end_ofi2_ReadEE 2282              __end_of_isdigit 20E4  
              ___ftpack@sign 0005                        _putch 22A8                        pclath 000FFA  
            __end_of_showRTC 1AB8                        tablat 000FF5             __end_ofi2___wmul 2180  
                      plusw1 000FE3                        plusw2 000FDB                        status 000FD8  
              simulate@start 0059               __CFG_PBADEN$ON 000000                i2printf@width 0026  
           __end_ofi2_printf 0A3C           __size_ofi2___lwdiv 0052                 __end_of_CW90 21DE  
         __size_ofi2___lwmod 0042                  ReadRun@time 0005                 __end_of_PWMC 13D6  
            __initialization 21A2                 __end_of_back 2254           __size_ofi2_lcdInst 000C  
               __end_of_main 1F16           __size_ofi2_getTime 0076                   i2printf@ap 001B  
                 i2printf@cp 001D                ReadEE@address 00AA                       ??_CW90 0018  
         __size_ofi2_isdigit 001E                       ??_PWMC 000F                       ??_back 0001  
                     ??_main 00D2                       ?_CCW90 0016                __activetblptr 000002  
              checkV@channel 0030            ?_I2C_Master_Start 0001            ?_I2C_Master_Write 00AB  
                  CCW90@port 0016           ??_I2C_Master_Start 00AB                       _ADCON0 000FC2  
                     _ADCON1 000FC1           ??_I2C_Master_Write 00AD                       _ADRESH 000FC4  
                     _EEADRH 000FAA                       _ADRESL 000FC3                       _EEDATA 000FA8  
                     _EECON2 000FA7             ___awdiv@dividend 0001              i2lcdNibble@data 0002  
           __end_of___awtoft 2056                       ?_putch 0001             __end_of___ftpack 1916  
            i2lcdNibble@temp 0001                       _INT1IE 007F83                       _INT1IF 007F80  
           __end_of_WriteRun 0F74                       _INT2IE 007F84                       _INT2IF 007F81  
                     _CVRCON 000FB5                       i2l3010 1218                       i2l3030 1272  
                     i2l4000 0C18                       i2l3200 130E                       i2l3104 2032  
                     i2l3112 1946                       i2l3040 129A                       i2l3016 1240  
                     i2l4002 0C22                       i2l3122 19A2                       i2l3034 1282  
                     i2l4004 0C5A                       i2l3060 1ACC                       i2l3220 1376  
                     i2l3212 1346                       i2l3116 1976                       i2l3044 12AA  
                     i2l3300 1040                       i2l3230 13B0                       i2l3160 1E44  
                     i2l3072 1AF2                       i2l4112 04E2                       i2l3170 1E64  
                     i2l3162 1E48                       i2l3074 1AFA                       i2l3066 1ADC  
                     i2l3234 13BE                       i2l3306 104A                       i2l4042 1C6E  
                     i2l3180 1FBA                       i2l3148 2212                       i2l3500 07EC  
                     i2l3092 1B32                       i2l3084 1B1A                       i2l3076 1AFE  
                     i2l3228 13A6                       i2l4140 058A                       i2l4132 0554  
                     i2l3158 1E3C                       i2l3182 1FBE                       i2l3510 0824  
                     i2l4230 1504                       i2l4214 14C0                       i2l3238 13CE  
                     i2l4038 1C66                       i2l4126 0536                       i2l4118 0500  
                     i2l3520 085A                       i2l3504 0802                       i2l3088 1B24  
                     i2l3280 0FAE                       i2l4048 1C8A                       i2l4304 0DB8  
                     i2l3346 2250                       i2l3186 1FD2                       i2l3178 1FB2  
                     i2l3530 08A2                       i2l3514 0836                       i2l3506 080C  
                     i2l4226 14F8                       i2l3282 0FBE                       i2l4146 05A8  
                     i2l4090 0440                       i2l3532 08A6                       i2l3516 0848  
                     i2l3508 0812                       i2l3524 0860                       i2l3284 0FCE  
                     i2l3452 212E                       i2l4148 05B4                       i2l4180 06BA  
                     i2l3526 0888                       i2l3294 1026                       i2l4262 0CC6  
                     i2l3544 08D2                       i2l3560 0902                       i2l3480 0756  
                     i2l4248 1588                       i2l3288 0FD8                       i2l4520 184E  
                     i2l4280 0D14                       i2l3546 08D6                       i2l3562 0912  
                     i2l3490 078A                       i2l3474 0738                       i2l3298 1030  
                     i2l4522 185E                       i2l3810 16A6                       i2l3802 1682  
                     i2l4290 0D60                       i2l3484 075C                       i2l4524 179E  
                     i2l4516 16EA                       i2l4284 0D3A                       i2l4276 0CEE  
                     i2l4268 0CDC                       i2l3582 097A                       i2l3590 0A04  
                     i2l3566 0936                       i2l3478 0748                       i2l2950 1EB0  
                     i2l4526 17AE                       i2l4518 16FA                       i2l3822 16C2  
                     i2l4294 0D88                       i2l3584 09BE                       i2l3592 0A14  
                     i2l3576 0958                       i2l3568 093E                       i2l2880 18C4  
                     i2l2872 1886                       i2l3816 16B8                       i2l3594 0A1A  
                     i2l3578 0960                       i2l3498 07E8                       i2l2882 18E2  
                     i2l2874 1890                       i2l2970 1426                       i2l3770 175A  
                     i2l3762 1736                       i2l3754 1712                       i2l3850 180A  
                     i2l3842 17E6                       i2l3834 17C6                       i2l3914 2002  
                     i2l4298 0DA8                       i2l3596 0A22                       i2l2884 18EC  
                     i2l2876 18AE                       i2l2868 1878                       i2l2964 13FE  
                     i2l2990 1464                       i2l3782 1776                       i2l3862 1826  
                     i2l3928 0E34                       i2l3776 176C                       i2l3856 181C  
                     i2l3970 0AAC                       i2l3962 0A70                       i2l3794 165E  
                     i2l3964 0A7E                       i2l3982 0B64                       i2l3976 0B2C  
                     i2l3994 0BDC                       i2l3988 0BA0                       u171_41 13E6  
                     u173_41 140E                       u176_41 1200                       u178_41 1228  
                  ??i2_putch 0003                       _SSPADD 000FC8                       _TRISC3 007CA3  
                     _TRISC4 007CA4                       _SSPBUF 000FC9                    AD@channel 0005  
              checkV@voltage 0039                    ??_ReadRun 0007                       _ReadEE 2254  
                  ??_PermLog 0036                       _Latest 00A2               __CFG_XINST$OFF 000000  
      __end_of_captureKeypad 2238                       ___ftge 1916                       ___wmul 2056  
                     _check9 1704                       _checkC 1650                    ??___awdiv 0005  
                     _checkV 0F74               __CFG_STVREN$ON 000000                    ??___ftdiv 001E  
                  ??_WriteEE 0004                    ??___lldiv 00B2                    ??___ftmul 000F  
                  ??___lwdiv 00AE                    ??___lwmod 00B5                    ??_checkAA 003D  
                     clear_0 21A8             ___awdiv@quotient 0007                       _intrpt 0008  
                  ??_lcdInst 00AC                       _printf 0012                    ??_getTime 00AF  
      ___ftmul@f3_as_product 0013                  PermLog@time 003D                    ??_initLCD 00AD  
                  ??_isdigit 00AA             __end_of_showInfo 0C64            __end_ofi2___lwdiv 1E78  
               __mediumconst FDAC            __end_ofi2___lwmod 1FE6                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8             __end_of_simulate 072E  
                  ??_showRTC 00D0            __end_ofi2_lcdInst 22E0            __end_ofi2_getTime 1CA6  
             simulate@period 0061               simulate@portCW 0043        __size_of_HexDecToDec2 0048  
          __end_ofi2_isdigit 221A               simulate@sorted 005D                   __accesstop 0080  
    __end_of__initialization 21B2                   ___ftge@ff1 0027                   ___ftge@ff2 002A  
              __end_of_CCW90 21FC                ___rparam_used 000001                   ___ftdiv@f1 0018  
                 ___ftdiv@f2 001B                   ___ftdiv@f3 0022                   ___awtoft@c 0009  
                 ___ftmul@f1 0009                   ___ftmul@f2 000C           i2___lwmod@dividend 0008  
             __pcstackCOMRAM 0001                    ?i2_ReadEE 0001                __end_of_putch 22B8  
                i2printf@idx 001F                  i2printf@len 0020                  i2printf@val 0023  
                 __end_of_AD 210E                      ??_CCW90 0018                    ?i2___wmul 0001  
         __size_of_lcdNibble 0068                  i2putch@data 0003                 _HexDecToDec2 1F16  
          HexDecToDec2@digit 000E                    ?i2_printf 000D            HexDecToDec2@tenth 000C  
                intrpt@F3122 0080                      ??_putch 00AC                   back@result 0002  
                 __pbssBANK0 0080           __size_of_fluctuate 0050                      ?_ReadEE 00AA  
               stopMoving@em 002B                      ?___ftge 0027                 WriteRun@time 0009  
               ?i2_lcdNibble 0001                      ?___wmul 00AA                      ?_check9 003B  
                    ?_checkC 003B                      ?_checkV 0030                   ??i2_ReadEE 0003  
                    ?_intrpt 0001                    ?___awtoft 0009                    ?___ftpack 0001  
                    ?_printf 00B6                    ?_WriteRun 0007                   ??i2___wmul 0005  
             WriteRun@sorted 0007                   ??i2_printf 0017                      _SSPCON1 000FC6  
                    _SSPCON2 000FC5                      _SSPSTAT 000FC7               checkV@voltage2 0035  
             checkV@voltage3 0037                      i2_putch 22C8               _stopMoving$546 0029  
__size_ofi2_I2C_Master_Start 0008            __end_of_lcdNibble 1D0E                      _ReadRun 10BE  
__size_ofi2_I2C_Master_Write 000A                      _PermLog 14BC                      __Hparam 0000  
            __size_of_ReadEE 0018                      __Lparam 0000                   _initLatest 2180  
                  ?_showInfo 0029              __size_of___ftge 0090                    ?_simulate 0001  
                    ___awdiv 1AB8                      ___ftdiv 13D6                      _WriteEE 2134  
                    ___lldiv 1594              __size_of___wmul 0036                      ___ftmul 11F0  
            __size_of_check9 00B4              __size_of_checkC 00B4              __size_of_checkV 014A  
                    ___lwdiv 1BB8                      ___lwmod 1D0E                      _checkAA 17B8  
                    __pcinit 21A2                   ??___awtoft 000C                   ??___ftpack 0006  
                    __ramtop 1000                   _initialize 1B3C              __size_of_intrpt 0E0A  
                    _lcdInst 22B8                   ??_WriteRun 000B                      __ptext0 1EC8  
                    __ptext1 1A30                      __ptext2 0012                      __ptext3 22A8  
                    _getTime 19A6                      __ptext4 20BA                      __ptext5 2056  
                    __ptext6 1D0E                      __ptext7 1BB8                      __ptext8 19A6  
                    __ptext9 22E0                 PermLog@F3082 0092              __size_of_printf 03C8  
          __end_of_fluctuate 1EC8                      _initLCD 1F5E            __end_of_hexpowers FDBF  
                    _dpowers FDAD                      _isdigit 20BA     __size_of_I2C_Master_Init 0060  
   __size_of_I2C_Master_Read 002E                      _showRTC 1A30     __size_of_I2C_Master_Wait 0014  
   __size_of_I2C_Master_Stop 0008               __pintcode_body 0C64         end_of_initialization 21B2  
              __Lmediumconst FDAC                      int_func 0C64          i2___wmul@multiplier 0001  
  __size_of_I2C_Master_Start 0008    __size_of_I2C_Master_Write 000A              ___lldiv@divisor 00AE  
            ___lldiv@counter 00B6                    _PWMC$1393 0011                    _PWMC$1394 0012  
                  _PWMC$1395 0013                   ??_showInfo 002D                      printf@c 00CF  
                    printf@f 00B6             I2C_Master_Init@c 00B7             I2C_Master_Read@a 00AB  
                    postdec2 000FDD                   ??_simulate 003D                      postinc0 000FEE  
                    postinc2 000FDE                    _PORTBbits 000F81                  PWMC@widthus 0009  
            simulate@portCCW 0049            i2_I2C_Master_Read 210E            i2_I2C_Master_Wait 2296  
          i2_I2C_Master_Stop 2304            i2___lwdiv@divisor 0003                    i2___lwdiv 1E26  
                  i2___lwmod 1FA4            i2___lwdiv@counter 0007           ?i2_I2C_Master_Read 0001  
         ?i2_I2C_Master_Wait 0001           ?i2_I2C_Master_Stop 0001                    i2_lcdInst 22D4  
                  i2_getTime 1C30                  ___ftdiv@exp 0025                  printf@width 00CD  
            PermLog@backruns 003F                   _stopMoving 1FE6          ??i2_I2C_Master_Read 0002  
                  i2_isdigit 21FC          ??i2_I2C_Master_Wait 0001          ??i2_I2C_Master_Stop 0002  
              ReadRun@sorted 0003                  simulate@now 0055                 check9@sorted 003B  
                ___ftmul@exp 0012               __end_of_ReadEE 226C                  ?_initLatest 0001  
             __end_of___ftge 19A6               __end_of___wmul 208C               __end_of_check9 17B8  
             __end_of_checkC 1704               __end_of_checkV 10BE         __size_ofi2_lcdNibble 0056  
                ?_initialize 0001                i2lcdInst@data 0003                 checkC@sorted 003B  
          __size_ofi2_ReadEE 0016               __end_of_intrpt 0E12             i2___wmul@product 0005  
             __end_of_printf 03DA                 i2printf@flag 0025              i2ReadEE@address 0001  
  __end_ofi2_I2C_Master_Read 2134    __end_ofi2_I2C_Master_Wait 22A8                 i2printf@prec 0022  
        start_initialization 21A2    __end_ofi2_I2C_Master_Stop 230C            __size_ofi2___wmul 0026  
                  i2printf@c 0028                    i2printf@f 000D       __size_of_captureKeypad 001E  
      i2I2C_Master_Read@temp 0003                i2getTime@time 0004                   ?i2___lwdiv 0001  
                 ?i2___lwmod 0008            __size_ofi2_printf 030E                   fluctuate@a 0001  
                 fluctuate@b 0003                   fluctuate@i 0007            ??_I2C_Master_Init 00BB  
          ??_I2C_Master_Read 00AB            ??_I2C_Master_Wait 00AA                   ?i2_lcdInst 0001  
          ??_I2C_Master_Stop 00AB                   ?i2_getTime 0004                   ?i2_isdigit 0001  
                   ??_ReadEE 00AC                     CW90@port 0016                     ??___ftge 002D  
                   ??___wmul 00AE                     ??_check9 003D                     ??_checkC 003D  
                   ??_checkV 0035             __CFG_LPT1OSC$OFF 000000                     ??_intrpt 0063  
                   ??_printf 00BE                  WriteEE@data 0003            __size_of___awtoft 0038  
          __size_of___ftpack 00AE            __size_of_WriteRun 0162                  __pbssCOMRAM 007A  
              __pcstackBANK0 00AA            i2___lwmod@divisor 000A            i2___lwmod@counter 000C  
               _isdigit$1052 00AB          __size_of_initLatest 0022                     ?i2_putch 0001  
             intrpt@keypress 0073          __size_of_initialize 007C                  ?_stopMoving 0001  
           _I2C_Master_Start 22FC                     ?_ReadRun 0003          i2I2C_Master_Write@d 0002  
           _I2C_Master_Write 22E0                     ?_PermLog 0001             ___lwdiv@dividend 00AA  
               intrpt@portCW 0074            __CFG_CCP2MX$PORTC 000000                  WriteRun@add 000D  
              _captureKeypad 221A                    __pintcode 0008                __pmediumconst FDAC  
                  _lcdNibble 1CA6                     ?___awdiv 0001                     ?___ftdiv 0018  
                   ?_WriteEE 0001                     ?___lldiv 00AA                     ?___ftmul 0009  
                   ?___lwdiv 00AA                     ?___lwmod 00B1            __size_of_showInfo 0228  
                   ?_checkAA 003B            __size_of_simulate 0354                     ?_lcdInst 0001  
                   ?_getTime 00AD                     PWMC@port 000D               __size_of_CCW90 001E  
                   ?_initLCD 0001                     ?_isdigit 0001   __size_ofi2_I2C_Master_Read 0026  
 __size_ofi2_I2C_Master_Wait 0012   __size_ofi2_I2C_Master_Stop 0008                    checkV@max 0032  
                  _fluctuate 1E78                     ?_showRTC 0001                    _hexpowers FDB7  
           ___lwdiv@quotient 00AE                  ??i2___lwdiv 0005                  ??i2___lwmod 000C  
             __size_of_putch 0010                  __size_of_AD 002A   __end_ofi2_I2C_Master_Start 2314  
 __end_ofi2_I2C_Master_Write 22F4                  ??i2_lcdInst 0003                  ??i2_getTime 0006  
             ___wmul@product 00AE                     _LATDbits 000F8C                  ??i2_isdigit 0001  
                   i2u211_45 13AE                     i2u211_46 13B0                     i2u205_45 134E  
                   i2u205_46 1350                     i2u208_45 137E                     i2u208_46 1380  
                   i2u241_40 212C                     i2u323_47 0702                     i2u324_47 13C0  
                   i2u309_41 0CAE                     i2u325_47 1564                     i2u326_47 1DE8  
                   i2u167_40 1EC4                     i2u167_41 1EC0                     i2u327_47 1DF2  
                   i2u328_47 1E14                     i2u329_47 1E1E                     i2u291_40 0E28  
             ?_captureKeypad 0001                     _PIR2bits 000FA1                     i2u295_41 0498  
                   i2u296_41 04AA                     i2u288_45 1F22             __CFG_WDTPS$32768 000000  
                 PWMC@cycles 000B                   ?_lcdNibble 0001                     i2_ReadEE 226C  
                 _ADCON0bits 000FC2            ___wmul@multiplier 00AA                     i2___wmul 215A  
              lcdNibble@data 00AB                   printf@flag 00CC                lcdNibble@temp 00AA  
                 printf@prec 00C9                   simulate@AA 004F          __size_of_stopMoving 0038  
                 simulate@V9 0053                   ?_fluctuate 0001                     i2_printf 072E  
      captureKeypad@keypress 0003          I2C_Master_Read@temp 00AC             __size_ofi2_putch 000C  
                 _EECON1bits 000FA6               showInfo@sorted 002B                     __Hrparam 0000  
           __size_of_ReadRun 0132                     __Lrparam 0000             __size_of_PermLog 00D8  
               ??_initLatest 00AC           __CFG_BOREN$SBORDIS 000000             __size_of___awdiv 0084  
           __size_of___ftdiv 00E6        i2___wmul@multiplicand 0003             __size_of_WriteEE 0026  
           __size_of___lldiv 00BC             __size_of___ftmul 00F4             __size_of___lwdiv 0078  
           __size_of___lwmod 0062                 ??_initialize 00BF                     ___awtoft 201E  
                   ___ftpack 1868             __size_of_checkAA 00B0                     _WriteRun 0E12  
         i2I2C_Master_Read@a 0002             __size_of_lcdInst 0010             __size_of_getTime 008A  
            HexDecToDec2@hex 0007              _I2C_Master_Init 1D70              _I2C_Master_Read 208C  
           __size_of_initLCD 0046                     back@runs 0001                ?_HexDecToDec2 0007  
            _I2C_Master_Wait 2282              _I2C_Master_Stop 22F4             __size_of_isdigit 002A  
            ___lwdiv@divisor 00AC              ___lwdiv@counter 00B0                     __ptext10 22F4  
                   __ptext11 22FC                     __ptext20 1D70                     __ptext12 208C  
                   __ptext21 1594                     __ptext13 2282                     __ptext30 1FE6  
                   __ptext14 1B3C                     __ptext31 1650                     __ptext23 03DA  
                   __ptext15 2180                     __ptext40 1868                     __ptext32 17B8  
                   __ptext24 1C30                     __ptext16 2254                     __ptext41 20E4  
                   __ptext33 1704                     __ptext25 22EA                     __ptext17 1F5E  
                   __ptext50 0A3C                     __ptext42 0E12                     __ptext34 0F74  
                   __ptext26 2304                     __ptext18 22B8                     __ptext51 072E  
                   __ptext43 2134                     __ptext35 1E78                     __ptext27 230C  
                   __ptext19 1CA6                     __ptext60 10BE                     __ptext52 22C8  
                   __ptext44 1F16                     __ptext36 11F0                     __ptext28 210E  
                   __ptext61 226C                     __ptext53 21FC                     __ptext45 21C0  
                   __ptext37 1916                     __ptext29 2296                     __ptext62 2238  
                   __ptext54 215A                     __ptext46 21DE                     __ptext38 13D6  
                   __ptext55 1FA4                     __ptext47 12E4                     __ptext39 201E  
                   __ptext56 1E26                     __ptext48 1AB8                     __ptext57 22D4  
                   __ptext49 14BC                     __ptext58 1DD0                     __ptext59 221A  
           __size_of_showRTC 0088           __end_of_initLatest 21A2                __size_of_CW90 001E  
              __size_of_PWMC 00F2               i2_isdigit$1052 0002                __size_of_back 001C  
              __size_of_main 004E           __end_of_initialize 1BB8              ??_captureKeypad 0003  
                   _showInfo 0A3C                ??i2_lcdNibble 0001                  ??_lcdNibble 00AA  
                   getTime@i 00AF                     _simulate 03DA                     int$flags 007C  
                  printf@idx 00C6                    printf@len 00C7                    printf@val 00CA  
                  simulate@C 0051                PermLog@goback 003C               ??_HexDecToDec2 0009  
                  putch@data 00AC     __end_of_I2C_Master_Start 2304     __end_of_I2C_Master_Write 22EA  
                 _INTCONbits 000FF2                PermLog@sorted 0038                  ??_fluctuate 0005  
              PWMC@countdown 0014                     isdigit@c 00AC                _simulate$1491 0041  
                   intlevel2 0000             ___lwmod@dividend 00B1             ___lldiv@dividend 00AA  
               ??_stopMoving 0029                     printf@ap 00C2                     printf@cp 00C4  
    __end_of_I2C_Master_Init 1DD0      __end_of_I2C_Master_Read 20BA      __end_of_I2C_Master_Wait 2296  
    __end_of_I2C_Master_Stop 22FC                  lcdInst@data 00AC                 showInfo@time 0029  
               showInfo@stop 0034                 showInfo@type 0032          __end_ofi2_lcdNibble 1E26  
           ___lldiv@quotient 00B2            I2C_Master_Write@d 00AB              ___lwmod@divisor 00B3  
            ___lwmod@counter 00B5           __end_of_stopMoving 201E               WriteEE@address 0001  
                getTime@time 00AD  

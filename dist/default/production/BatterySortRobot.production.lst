

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Mar 29 16:14:09 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1
    67                           	psect	text55,global,reloc=2,class=CODE,delta=1
    68                           	psect	text56,global,reloc=2,class=CODE,delta=1
    69                           	psect	text57,global,reloc=2,class=CODE,delta=1
    70                           	psect	text58,global,reloc=2,class=CODE,delta=1
    71                           	psect	text59,global,reloc=2,class=CODE,delta=1
    72                           	psect	text60,global,reloc=2,class=CODE,delta=1
    73                           	psect	text61,global,reloc=2,class=CODE,delta=1
    74                           	psect	text62,global,reloc=2,class=CODE,delta=1
    75                           	psect	text63,global,reloc=2,class=CODE,delta=1
    76                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    77                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    78                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    79  0000                     
    80                           ; Version 1.41
    81                           ; Generated 25/01/2017 GMT
    82                           ; 
    83                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    84                           ; All rights reserved.
    85                           ; 
    86                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    87                           ; 
    88                           ; Redistribution and use in source and binary forms, with or without modification, are
    89                           ; permitted provided that the following conditions are met:
    90                           ; 
    91                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    92                           ;        conditions and the following disclaimer.
    93                           ; 
    94                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    95                           ;        of conditions and the following disclaimer in the documentation and/or other
    96                           ;        materials provided with the distribution.
    97                           ; 
    98                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    99                           ;        software without specific prior written permission.
   100                           ; 
   101                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   102                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   103                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   104                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   105                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   106                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   107                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   108                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   109                           ; 
   110                           ; 
   111                           ; Code-generator required, PIC18F4620 Definitions
   112                           ; 
   113                           ; SFR Addresses
   114  0000                     
   115                           	psect	mediumconst
   116  00FDC8                     __pmediumconst:
   117                           	opt stack 0
   118  00FDC8  00                 	db	0
   119  00FDC9                     _dpowers:
   120                           	opt stack 0
   121  00FDC9  0001               	dw	1
   122  00FDCB  000A               	dw	10
   123  00FDCD  0064               	dw	100
   124  00FDCF  03E8               	dw	1000
   125  00FDD1  2710               	dw	10000
   126  00FDD3                     __end_of_dpowers:
   127                           	opt stack 0
   128  00FDD3                     _hexpowers:
   129                           	opt stack 0
   130  00FDD3  0001               	dw	1
   131  00FDD5  0010               	dw	16
   132  00FDD7  0100               	dw	256
   133  00FDD9  1000               	dw	4096
   134  00FDDB                     __end_of_hexpowers:
   135                           	opt stack 0
   136  0000                     _PIR2bits	set	4001
   137  0000                     _EECON2	set	4007
   138  0000                     _EEDATA	set	4008
   139  0000                     _EECON1bits	set	4006
   140  0000                     _EEADR	set	4009
   141  0000                     _EEADRH	set	4010
   142  0000                     _SSPBUF	set	4041
   143  0000                     _SSPADD	set	4040
   144  0000                     _SSPCON2	set	4037
   145  0000                     _SSPCON1	set	4038
   146  0000                     _SSPSTAT	set	4039
   147  0000                     _ADRESL	set	4035
   148  0000                     _ADRESH	set	4036
   149  0000                     _ADCON0bits	set	4034
   150  0000                     _LATDbits	set	3980
   151  0000                     _PORTBbits	set	3969
   152  0000                     _PORTB	set	3969
   153  0000                     _INTCONbits	set	4082
   154  0000                     _CVRCON	set	4021
   155  0000                     _ADCON1	set	4033
   156  0000                     _ADCON0	set	4034
   157  0000                     _LATE	set	3981
   158  0000                     _LATD	set	3980
   159  0000                     _LATC	set	3979
   160  0000                     _LATB	set	3978
   161  0000                     _LATA	set	3977
   162  0000                     _TRISE	set	3990
   163  0000                     _TRISD	set	3989
   164  0000                     _TRISC	set	3988
   165  0000                     _TRISB	set	3987
   166  0000                     _TRISA	set	3986
   167  0000                     _ACKEN	set	32300
   168  0000                     _ACKDT	set	32301
   169  0000                     _RCEN	set	32299
   170  0000                     _PEN	set	32298
   171  0000                     _SEN	set	32296
   172  0000                     _TRISC4	set	31908
   173  0000                     _TRISC3	set	31907
   174  0000                     _ADON	set	32272
   175  0000                     _INT1IE	set	32643
   176  0000                     _INT1IF	set	32640
   177  0000                     _INT2IF	set	32641
   178  0000                     _INT2IE	set	32644
   179  0000                     _LATC6	set	31838
   180  0000                     _ADFM	set	32263
   181  0000                     _LATC2	set	31834
   182  0000                     _LATC1	set	31833
   183  0000                     _LATC0	set	31832
   184  00FDDB                     STR_16:
   185                           
   186                           ; BSR set to: 0
   187  00FDDB  53                 	db	83	;'S'
   188  00FDDC  6F                 	db	111	;'o'
   189  00FDDD  72                 	db	114	;'r'
   190  00FDDE  74                 	db	116	;'t'
   191  00FDDF  69                 	db	105	;'i'
   192  00FDE0  6E                 	db	110	;'n'
   193  00FDE1  67                 	db	103	;'g'
   194  00FDE2  20                 	db	32
   195  00FDE3  43                 	db	67	;'C'
   196  00FDE4  6F                 	db	111	;'o'
   197  00FDE5  6D                 	db	109	;'m'
   198  00FDE6  70                 	db	112	;'p'
   199  00FDE7  6C                 	db	108	;'l'
   200  00FDE8  65                 	db	101	;'e'
   201  00FDE9  74                 	db	116	;'t'
   202  00FDEA  65                 	db	101	;'e'
   203  00FDEB  20                 	db	32
   204  00FDEC  20                 	db	32
   205  00FDED  20                 	db	32
   206  00FDEE  20                 	db	32
   207  00FDEF  20                 	db	32
   208  00FDF0  20                 	db	32
   209  00FDF1  20                 	db	32
   210  00FDF2  20                 	db	32
   211  00FDF3  20                 	db	32
   212  00FDF4  20                 	db	32
   213  00FDF5  00                 	db	0
   214  00FDF6                     STR_21:
   215                           
   216                           ; BSR set to: 0
   217  00FDF6  50                 	db	80	;'P'
   218  00FDF7  72                 	db	114	;'r'
   219  00FDF8  65                 	db	101	;'e'
   220  00FDF9  73                 	db	115	;'s'
   221  00FDFA  73                 	db	115	;'s'
   222  00FDFB  20                 	db	32
   223  00FDFC  61                 	db	97	;'a'
   224  00FDFD  20                 	db	32
   225  00FDFE  6E                 	db	110	;'n'
   226  00FDFF  75                 	db	117	;'u'
   227  00FE00  6D                 	db	109	;'m'
   228  00FE01  62                 	db	98	;'b'
   229  00FE02  65                 	db	101	;'e'
   230  00FE03  72                 	db	114	;'r'
   231  00FE04  20                 	db	32
   232  00FE05  20                 	db	32
   233  00FE06  20                 	db	32
   234  00FE07  20                 	db	32
   235  00FE08  20                 	db	32
   236  00FE09  20                 	db	32
   237  00FE0A  20                 	db	32
   238  00FE0B  20                 	db	32
   239  00FE0C  20                 	db	32
   240  00FE0D  20                 	db	32
   241  00FE0E  00                 	db	0
   242  00FE0F                     STR_17:
   243                           
   244                           ; BSR set to: 0
   245  00FE0F  20                 	db	32
   246  00FE10  20                 	db	32
   247  00FE11  20                 	db	32
   248  00FE12  20                 	db	32
   249  00FE13  25                 	db	37
   250  00FE14  30                 	db	48	;'0'
   251  00FE15  32                 	db	50	;'2'
   252  00FE16  78                 	db	120	;'x'
   253  00FE17  2F                 	db	47
   254  00FE18  25                 	db	37
   255  00FE19  30                 	db	48	;'0'
   256  00FE1A  32                 	db	50	;'2'
   257  00FE1B  78                 	db	120	;'x'
   258  00FE1C  2F                 	db	47
   259  00FE1D  25                 	db	37
   260  00FE1E  30                 	db	48	;'0'
   261  00FE1F  32                 	db	50	;'2'
   262  00FE20  78                 	db	120	;'x'
   263  00FE21  20                 	db	32
   264  00FE22  20                 	db	32
   265  00FE23  20                 	db	32
   266  00FE24  20                 	db	32
   267  00FE25  20                 	db	32
   268  00FE26  20                 	db	32
   269  00FE27  00                 	db	0
   270  00FE28                     STR_18:
   271                           
   272                           ; BSR set to: 0
   273  00FE28  20                 	db	32
   274  00FE29  20                 	db	32
   275  00FE2A  20                 	db	32
   276  00FE2B  20                 	db	32
   277  00FE2C  25                 	db	37
   278  00FE2D  30                 	db	48	;'0'
   279  00FE2E  32                 	db	50	;'2'
   280  00FE2F  78                 	db	120	;'x'
   281  00FE30  3A                 	db	58	;':'
   282  00FE31  25                 	db	37
   283  00FE32  30                 	db	48	;'0'
   284  00FE33  32                 	db	50	;'2'
   285  00FE34  78                 	db	120	;'x'
   286  00FE35  3A                 	db	58	;':'
   287  00FE36  25                 	db	37
   288  00FE37  30                 	db	48	;'0'
   289  00FE38  32                 	db	50	;'2'
   290  00FE39  78                 	db	120	;'x'
   291  00FE3A  20                 	db	32
   292  00FE3B  20                 	db	32
   293  00FE3C  20                 	db	32
   294  00FE3D  20                 	db	32
   295  00FE3E  20                 	db	32
   296  00FE3F  20                 	db	32
   297  00FE40  00                 	db	0
   298  00FE41                     STR_23:
   299                           
   300                           ; BSR set to: 0
   301  00FE41  54                 	db	84	;'T'
   302  00FE42  69                 	db	105	;'i'
   303  00FE43  6D                 	db	109	;'m'
   304  00FE44  65                 	db	101	;'e'
   305  00FE45  20                 	db	32
   306  00FE46  45                 	db	69	;'E'
   307  00FE47  6C                 	db	108	;'l'
   308  00FE48  61                 	db	97	;'a'
   309  00FE49  70                 	db	112	;'p'
   310  00FE4A  73                 	db	115	;'s'
   311  00FE4B  65                 	db	101	;'e'
   312  00FE4C  64                 	db	100	;'d'
   313  00FE4D  3A                 	db	58	;':'
   314  00FE4E  20                 	db	32
   315  00FE4F  20                 	db	32
   316  00FE50  20                 	db	32
   317  00FE51  20                 	db	32
   318  00FE52  20                 	db	32
   319  00FE53  20                 	db	32
   320  00FE54  20                 	db	32
   321  00FE55  20                 	db	32
   322  00FE56  20                 	db	32
   323  00FE57  20                 	db	32
   324  00FE58  00                 	db	0
   325  00FE59                     STR_25:
   326                           
   327                           ; BSR set to: 0
   328  00FE59  54                 	db	84	;'T'
   329  00FE5A  6F                 	db	111	;'o'
   330  00FE5B  74                 	db	116	;'t'
   331  00FE5C  61                 	db	97	;'a'
   332  00FE5D  6C                 	db	108	;'l'
   333  00FE5E  20                 	db	32
   334  00FE5F  53                 	db	83	;'S'
   335  00FE60  6F                 	db	111	;'o'
   336  00FE61  72                 	db	114	;'r'
   337  00FE62  74                 	db	116	;'t'
   338  00FE63  65                 	db	101	;'e'
   339  00FE64  64                 	db	100	;'d'
   340  00FE65  3A                 	db	58	;':'
   341  00FE66  20                 	db	32
   342  00FE67  20                 	db	32
   343  00FE68  20                 	db	32
   344  00FE69  20                 	db	32
   345  00FE6A  20                 	db	32
   346  00FE6B  20                 	db	32
   347  00FE6C  20                 	db	32
   348  00FE6D  20                 	db	32
   349  00FE6E  20                 	db	32
   350  00FE6F  20                 	db	32
   351  00FE70  00                 	db	0
   352  00FE71                     STR_22:
   353                           
   354                           ; BSR set to: 0
   355  00FE71  46                 	db	70	;'F'
   356  00FE72  6F                 	db	111	;'o'
   357  00FE73  72                 	db	114	;'r'
   358  00FE74  20                 	db	32
   359  00FE75  6D                 	db	109	;'m'
   360  00FE76  6F                 	db	111	;'o'
   361  00FE77  72                 	db	114	;'r'
   362  00FE78  65                 	db	101	;'e'
   363  00FE79  20                 	db	32
   364  00FE7A  69                 	db	105	;'i'
   365  00FE7B  6E                 	db	110	;'n'
   366  00FE7C  66                 	db	102	;'f'
   367  00FE7D  6F                 	db	111	;'o'
   368  00FE7E  20                 	db	32
   369  00FE7F  20                 	db	32
   370  00FE80  20                 	db	32
   371  00FE81  20                 	db	32
   372  00FE82  20                 	db	32
   373  00FE83  20                 	db	32
   374  00FE84  20                 	db	32
   375  00FE85  20                 	db	32
   376  00FE86  20                 	db	32
   377  00FE87  20                 	db	32
   378  00FE88  00                 	db	0
   379  00FE89                     STR_2:
   380                           
   381                           ; BSR set to: 0
   382  00FE89  53                 	db	83	;'S'
   383  00FE8A  69                 	db	105	;'i'
   384  00FE8B  6D                 	db	109	;'m'
   385  00FE8C  75                 	db	117	;'u'
   386  00FE8D  6C                 	db	108	;'l'
   387  00FE8E  61                 	db	97	;'a'
   388  00FE8F  74                 	db	116	;'t'
   389  00FE90  69                 	db	105	;'i'
   390  00FE91  6E                 	db	110	;'n'
   391  00FE92  67                 	db	103	;'g'
   392  00FE93  2E                 	db	46
   393  00FE94  2E                 	db	46
   394  00FE95  2E                 	db	46
   395  00FE96  20                 	db	32
   396  00FE97  20                 	db	32
   397  00FE98  20                 	db	32
   398  00FE99  20                 	db	32
   399  00FE9A  20                 	db	32
   400  00FE9B  20                 	db	32
   401  00FE9C  20                 	db	32
   402  00FE9D  20                 	db	32
   403  00FE9E  20                 	db	32
   404  00FE9F  20                 	db	32
   405  00FEA0  00                 	db	0
   406  00FEA1                     STR_26:
   407                           
   408                           ; BSR set to: 0
   409  00FEA1  25                 	db	37
   410  00FEA2  75                 	db	117	;'u'
   411  00FEA3  20                 	db	32
   412  00FEA4  62                 	db	98	;'b'
   413  00FEA5  61                 	db	97	;'a'
   414  00FEA6  74                 	db	116	;'t'
   415  00FEA7  74                 	db	116	;'t'
   416  00FEA8  65                 	db	101	;'e'
   417  00FEA9  72                 	db	114	;'r'
   418  00FEAA  69                 	db	105	;'i'
   419  00FEAB  65                 	db	101	;'e'
   420  00FEAC  73                 	db	115	;'s'
   421  00FEAD  20                 	db	32
   422  00FEAE  20                 	db	32
   423  00FEAF  20                 	db	32
   424  00FEB0  20                 	db	32
   425  00FEB1  20                 	db	32
   426  00FEB2  20                 	db	32
   427  00FEB3  20                 	db	32
   428  00FEB4  20                 	db	32
   429  00FEB5  20                 	db	32
   430  00FEB6  20                 	db	32
   431  00FEB7  00                 	db	0
   432  00FEB8                     STR_42:
   433                           
   434                           ; BSR set to: 0
   435  00FEB8  50                 	db	80	;'P'
   436  00FEB9  65                 	db	101	;'e'
   437  00FEBA  72                 	db	114	;'r'
   438  00FEBB  6D                 	db	109	;'m'
   439  00FEBC  61                 	db	97	;'a'
   440  00FEBD  6E                 	db	110	;'n'
   441  00FEBE  65                 	db	101	;'e'
   442  00FEBF  6E                 	db	110	;'n'
   443  00FEC0  74                 	db	116	;'t'
   444  00FEC1  20                 	db	32
   445  00FEC2  6C                 	db	108	;'l'
   446  00FEC3  6F                 	db	111	;'o'
   447  00FEC4  67                 	db	103	;'g'
   448  00FEC5  3A                 	db	58	;':'
   449  00FEC6  20                 	db	32
   450  00FEC7  20                 	db	32
   451  00FEC8  20                 	db	32
   452  00FEC9  20                 	db	32
   453  00FECA  20                 	db	32
   454  00FECB  20                 	db	32
   455  00FECC  20                 	db	32
   456  00FECD  00                 	db	0
   457  00FECE                     STR_33:
   458                           
   459                           ; BSR set to: 0
   460  00FECE  55                 	db	85	;'U'
   461  00FECF  6E                 	db	110	;'n'
   462  00FED0  63                 	db	99	;'c'
   463  00FED1  68                 	db	104	;'h'
   464  00FED2  61                 	db	97	;'a'
   465  00FED3  72                 	db	114	;'r'
   466  00FED4  67                 	db	103	;'g'
   467  00FED5  65                 	db	101	;'e'
   468  00FED6  64                 	db	100	;'d'
   469  00FED7  3A                 	db	58	;':'
   470  00FED8  20                 	db	32
   471  00FED9  20                 	db	32
   472  00FEDA  20                 	db	32
   473  00FEDB  20                 	db	32
   474  00FEDC  20                 	db	32
   475  00FEDD  20                 	db	32
   476  00FEDE  20                 	db	32
   477  00FEDF  20                 	db	32
   478  00FEE0  20                 	db	32
   479  00FEE1  20                 	db	32
   480  00FEE2  00                 	db	0
   481  00FEE3                     STR_27:
   482                           
   483                           ; BSR set to: 0
   484  00FEE3  41                 	db	65	;'A'
   485  00FEE4  41                 	db	65	;'A'
   486  00FEE5  20                 	db	32
   487  00FEE6  53                 	db	83	;'S'
   488  00FEE7  6F                 	db	111	;'o'
   489  00FEE8  72                 	db	114	;'r'
   490  00FEE9  74                 	db	116	;'t'
   491  00FEEA  65                 	db	101	;'e'
   492  00FEEB  64                 	db	100	;'d'
   493  00FEEC  3A                 	db	58	;':'
   494  00FEED  20                 	db	32
   495  00FEEE  20                 	db	32
   496  00FEEF  20                 	db	32
   497  00FEF0  20                 	db	32
   498  00FEF1  20                 	db	32
   499  00FEF2  20                 	db	32
   500  00FEF3  20                 	db	32
   501  00FEF4  20                 	db	32
   502  00FEF5  20                 	db	32
   503  00FEF6  20                 	db	32
   504  00FEF7  00                 	db	0
   505  00FEF8                     STR_31:
   506                           
   507                           ; BSR set to: 0
   508  00FEF8  39                 	db	57	;'9'
   509  00FEF9  56                 	db	86	;'V'
   510  00FEFA  20                 	db	32
   511  00FEFB  53                 	db	83	;'S'
   512  00FEFC  6F                 	db	111	;'o'
   513  00FEFD  72                 	db	114	;'r'
   514  00FEFE  74                 	db	116	;'t'
   515  00FEFF  65                 	db	101	;'e'
   516  00FF00  64                 	db	100	;'d'
   517  00FF01  3A                 	db	58	;':'
   518  00FF02  20                 	db	32
   519  00FF03  20                 	db	32
   520  00FF04  20                 	db	32
   521  00FF05  20                 	db	32
   522  00FF06  20                 	db	32
   523  00FF07  20                 	db	32
   524  00FF08  20                 	db	32
   525  00FF09  20                 	db	32
   526  00FF0A  20                 	db	32
   527  00FF0B  20                 	db	32
   528  00FF0C  00                 	db	0
   529  00FF0D                     STR_24:
   530                           
   531                           ; BSR set to: 0
   532  00FF0D  25                 	db	37
   533  00FF0E  75                 	db	117	;'u'
   534  00FF0F  20                 	db	32
   535  00FF10  73                 	db	115	;'s'
   536  00FF11  65                 	db	101	;'e'
   537  00FF12  63                 	db	99	;'c'
   538  00FF13  6F                 	db	111	;'o'
   539  00FF14  6E                 	db	110	;'n'
   540  00FF15  64                 	db	100	;'d'
   541  00FF16  73                 	db	115	;'s'
   542  00FF17  20                 	db	32
   543  00FF18  20                 	db	32
   544  00FF19  20                 	db	32
   545  00FF1A  20                 	db	32
   546  00FF1B  20                 	db	32
   547  00FF1C  20                 	db	32
   548  00FF1D  20                 	db	32
   549  00FF1E  20                 	db	32
   550  00FF1F  20                 	db	32
   551  00FF20  20                 	db	32
   552  00FF21  00                 	db	0
   553  00FF22                     STR_35:
   554                           
   555                           ; BSR set to: 0
   556  00FF22  45                 	db	69	;'E'
   557  00FF23  6D                 	db	109	;'m'
   558  00FF24  65                 	db	101	;'e'
   559  00FF25  72                 	db	114	;'r'
   560  00FF26  67                 	db	103	;'g'
   561  00FF27  65                 	db	101	;'e'
   562  00FF28  6E                 	db	110	;'n'
   563  00FF29  63                 	db	99	;'c'
   564  00FF2A  79                 	db	121	;'y'
   565  00FF2B  20                 	db	32
   566  00FF2C  20                 	db	32
   567  00FF2D  20                 	db	32
   568  00FF2E  20                 	db	32
   569  00FF2F  20                 	db	32
   570  00FF30  20                 	db	32
   571  00FF31  20                 	db	32
   572  00FF32  20                 	db	32
   573  00FF33  20                 	db	32
   574  00FF34  20                 	db	32
   575  00FF35  00                 	db	0
   576  00FF36                     STR_29:
   577                           
   578                           ; BSR set to: 0
   579  00FF36  43                 	db	67	;'C'
   580  00FF37  20                 	db	32
   581  00FF38  53                 	db	83	;'S'
   582  00FF39  6F                 	db	111	;'o'
   583  00FF3A  72                 	db	114	;'r'
   584  00FF3B  74                 	db	116	;'t'
   585  00FF3C  65                 	db	101	;'e'
   586  00FF3D  64                 	db	100	;'d'
   587  00FF3E  3A                 	db	58	;':'
   588  00FF3F  20                 	db	32
   589  00FF40  20                 	db	32
   590  00FF41  20                 	db	32
   591  00FF42  20                 	db	32
   592  00FF43  20                 	db	32
   593  00FF44  20                 	db	32
   594  00FF45  20                 	db	32
   595  00FF46  20                 	db	32
   596  00FF47  20                 	db	32
   597  00FF48  20                 	db	32
   598  00FF49  00                 	db	0
   599  00FF4A                     STR_20:
   600                           
   601                           ; BSR set to: 0
   602  00FF4A  57                 	db	87	;'W'
   603  00FF4B  65                 	db	101	;'e'
   604  00FF4C  6C                 	db	108	;'l'
   605  00FF4D  63                 	db	99	;'c'
   606  00FF4E  6F                 	db	111	;'o'
   607  00FF4F  6D                 	db	109	;'m'
   608  00FF50  65                 	db	101	;'e'
   609  00FF51  21                 	db	33
   610  00FF52  20                 	db	32
   611  00FF53  20                 	db	32
   612  00FF54  20                 	db	32
   613  00FF55  20                 	db	32
   614  00FF56  20                 	db	32
   615  00FF57  20                 	db	32
   616  00FF58  20                 	db	32
   617  00FF59  20                 	db	32
   618  00FF5A  20                 	db	32
   619  00FF5B  20                 	db	32
   620  00FF5C  00                 	db	0
   621  00FF5D                     STR_43:
   622                           
   623                           ; BSR set to: 0
   624  00FF5D  57                 	db	87	;'W'
   625  00FF5E  68                 	db	104	;'h'
   626  00FF5F  69                 	db	105	;'i'
   627  00FF60  63                 	db	99	;'c'
   628  00FF61  68                 	db	104	;'h'
   629  00FF62  20                 	db	32
   630  00FF63  72                 	db	114	;'r'
   631  00FF64  75                 	db	117	;'u'
   632  00FF65  6E                 	db	110	;'n'
   633  00FF66  3F                 	db	63	;'?'
   634  00FF67  20                 	db	32
   635  00FF68  20                 	db	32
   636  00FF69  20                 	db	32
   637  00FF6A  20                 	db	32
   638  00FF6B  20                 	db	32
   639  00FF6C  20                 	db	32
   640  00FF6D  20                 	db	32
   641  00FF6E  00                 	db	0
   642  00FF6F                     STR_36:
   643                           
   644                           ; BSR set to: 0
   645  00FF6F  53                 	db	83	;'S'
   646  00FF70  74                 	db	116	;'t'
   647  00FF71  6F                 	db	111	;'o'
   648  00FF72  70                 	db	112	;'p'
   649  00FF73  70                 	db	112	;'p'
   650  00FF74  65                 	db	101	;'e'
   651  00FF75  64                 	db	100	;'d'
   652  00FF76  20                 	db	32
   653  00FF77  20                 	db	32
   654  00FF78  20                 	db	32
   655  00FF79  20                 	db	32
   656  00FF7A  20                 	db	32
   657  00FF7B  20                 	db	32
   658  00FF7C  20                 	db	32
   659  00FF7D  20                 	db	32
   660  00FF7E  20                 	db	32
   661  00FF7F  20                 	db	32
   662  00FF80  00                 	db	0
   663  00FF81                     STR_19:
   664                           
   665                           ; BSR set to: 0
   666  00FF81  41                 	db	65	;'A'
   667  00FF82  20                 	db	32
   668  00FF83  25                 	db	37
   669  00FF84  64                 	db	100	;'d'
   670  00FF85  2C                 	db	44
   671  00FF86  43                 	db	67	;'C'
   672  00FF87  20                 	db	32
   673  00FF88  25                 	db	37
   674  00FF89  64                 	db	100	;'d'
   675  00FF8A  2C                 	db	44
   676  00FF8B  39                 	db	57	;'9'
   677  00FF8C  20                 	db	32
   678  00FF8D  25                 	db	37
   679  00FF8E  64                 	db	100	;'d'
   680  00FF8F  20                 	db	32
   681  00FF90  20                 	db	32
   682  00FF91  20                 	db	32
   683  00FF92  00                 	db	0
   684  00FF93                     STR_46:
   685                           
   686                           ; BSR set to: 0
   687  00FF93  30                 	db	48	;'0'
   688  00FF94  31                 	db	49	;'1'
   689  00FF95  32                 	db	50	;'2'
   690  00FF96  33                 	db	51	;'3'
   691  00FF97  34                 	db	52	;'4'
   692  00FF98  35                 	db	53	;'5'
   693  00FF99  36                 	db	54	;'6'
   694  00FF9A  37                 	db	55	;'7'
   695  00FF9B  38                 	db	56	;'8'
   696  00FF9C  39                 	db	57	;'9'
   697  00FF9D  61                 	db	97	;'a'
   698  00FF9E  62                 	db	98	;'b'
   699  00FF9F  63                 	db	99	;'c'
   700  00FFA0  64                 	db	100	;'d'
   701  00FFA1  65                 	db	101	;'e'
   702  00FFA2  66                 	db	102	;'f'
   703  00FFA3  00                 	db	0
   704  00FFA4                     STR_44:
   705                           
   706                           ; BSR set to: 0
   707  00FFA4  73                 	db	115	;'s'
   708  00FFA5  68                 	db	104	;'h'
   709  00FFA6  6F                 	db	111	;'o'
   710  00FFA7  77                 	db	119	;'w'
   711  00FFA8  69                 	db	105	;'i'
   712  00FFA9  6E                 	db	110	;'n'
   713  00FFAA  67                 	db	103	;'g'
   714  00FFAB  20                 	db	32
   715  00FFAC  25                 	db	37
   716  00FFAD  75                 	db	117	;'u'
   717  00FFAE  20                 	db	32
   718  00FFAF  20                 	db	32
   719  00FFB0  20                 	db	32
   720  00FFB1  20                 	db	32
   721  00FFB2  20                 	db	32
   722  00FFB3  20                 	db	32
   723  00FFB4  00                 	db	0
   724  00FFB5                     STR_45:
   725                           
   726                           ; BSR set to: 0
   727  00FFB5  72                 	db	114	;'r'
   728  00FFB6  75                 	db	117	;'u'
   729  00FFB7  6E                 	db	110	;'n'
   730  00FFB8  73                 	db	115	;'s'
   731  00FFB9  20                 	db	32
   732  00FFBA  62                 	db	98	;'b'
   733  00FFBB  65                 	db	101	;'e'
   734  00FFBC  66                 	db	102	;'f'
   735  00FFBD  6F                 	db	111	;'o'
   736  00FFBE  72                 	db	114	;'r'
   737  00FFBF  65                 	db	101	;'e'
   738  00FFC0  20                 	db	32
   739  00FFC1  20                 	db	32
   740  00FFC2  20                 	db	32
   741  00FFC3  20                 	db	32
   742  00FFC4  20                 	db	32
   743  00FFC5  00                 	db	0
   744  00FFC6                     STR_28:
   745                           
   746                           ; BSR set to: 0
   747  00FFC6  25                 	db	37
   748  00FFC7  75                 	db	117	;'u'
   749  00FFC8  20                 	db	32
   750  00FFC9  20                 	db	32
   751  00FFCA  20                 	db	32
   752  00FFCB  20                 	db	32
   753  00FFCC  20                 	db	32
   754  00FFCD  20                 	db	32
   755  00FFCE  20                 	db	32
   756  00FFCF  20                 	db	32
   757  00FFD0  20                 	db	32
   758  00FFD1  20                 	db	32
   759  00FFD2  20                 	db	32
   760  00FFD3  20                 	db	32
   761  00FFD4  20                 	db	32
   762  00FFD5  00                 	db	0
   763  00FFD6                     
   764                           ; BSR set to: 0
   765  00FFD6  4D                 	db	77	;'M'
   766  00FFD7  61                 	db	97	;'a'
   767  00FFD8  69                 	db	105	;'i'
   768  00FFD9  6E                 	db	110	;'n'
   769  00FFDA  6C                 	db	108	;'l'
   770  00FFDB  6F                 	db	111	;'o'
   771  00FFDC  6F                 	db	111	;'o'
   772  00FFDD  70                 	db	112	;'p'
   773  00FFDE  00                 	db	0
   774  00FFDF                     STR_38:
   775                           
   776                           ; BSR set to: 0
   777  00FFDF  20                 	db	32
   778  00FFE0  25                 	db	37
   779  00FFE1  64                 	db	100	;'d'
   780  00FFE2  20                 	db	32
   781  00FFE3  00                 	db	0
   782  00FFE4                     STR_12:
   783                           
   784                           ; BSR set to: 0
   785  00FFE4  20                 	db	32
   786  00FFE5  41                 	db	65	;'A'
   787  00FFE6  41                 	db	65	;'A'
   788  00FFE7  3A                 	db	58	;':'
   789  00FFE8  00                 	db	0
   790  00FFE9                     STR_37:
   791                           
   792                           ; BSR set to: 0
   793  00FFE9  2D                 	db	45
   794  00FFEA  31                 	db	49	;'1'
   795  00FFEB  20                 	db	32
   796  00FFEC  00                 	db	0
   797  00FFED                     STR_8:
   798                           
   799                           ; BSR set to: 0
   800  00FFED  20                 	db	32
   801  00FFEE  43                 	db	67	;'C'
   802  00FFEF  3A                 	db	58	;':'
   803  00FFF0  00                 	db	0
   804  00FFF1                     STR_4:
   805                           
   806                           ; BSR set to: 0
   807  00FFF1  39                 	db	57	;'9'
   808  00FFF2  56                 	db	86	;'V'
   809  00FFF3  3A                 	db	58	;':'
   810  00FFF4  00                 	db	0
   811  00FFF5                     STR_6:
   812                           
   813                           ; BSR set to: 0
   814  00FFF5  20                 	db	32
   815  00FFF6  2B                 	db	43
   816  00FFF7  00                 	db	0
   817  00FFF8                     STR_5:
   818                           
   819                           ; BSR set to: 0
   820  00FFF8  20                 	db	32
   821  00FFF9  2D                 	db	45
   822  00FFFA  00                 	db	0
   823  00FFFB                     STR_7:
   824                           
   825                           ; BSR set to: 0
   826  00FFFB  20                 	db	32
   827  00FFFC  30                 	db	48	;'0'
   828  00FFFD  00                 	db	0
   829  0000                     
   830                           ; #config settings
   831  00FFFE  00                 	db	0	; dummy byte at the end
   832  0000                     
   833                           	psect	cinit
   834  002162                     __pcinit:
   835                           	opt stack 0
   836  002162                     start_initialization:
   837                           	opt stack 0
   838  002162                     __initialization:
   839                           	opt stack 0
   840                           
   841                           ; Clear objects allocated to BANK0 (31 bytes)
   842  002162  EE00  F0AA         	lfsr	0,__pbssBANK0
   843  002166  0E1F               	movlw	31
   844  002168                     clear_0:
   845  002168  6AEE               	clrf	postinc0,c
   846  00216A  06E8               	decf	wreg,f,c
   847  00216C  E1FD               	bnz	clear_0
   848                           
   849                           ; Clear objects allocated to COMRAM (13 bytes)
   850  00216E  EE00  F071         	lfsr	0,__pbssCOMRAM
   851  002172  0E0D               	movlw	13
   852  002174                     clear_1:
   853  002174  6AEE               	clrf	postinc0,c
   854  002176  06E8               	decf	wreg,f,c
   855  002178  E1FD               	bnz	clear_1
   856  00217A                     end_of_initialization:
   857                           	opt stack 0
   858  00217A                     __end_of__initialization:
   859                           	opt stack 0
   860  00217A  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   861  00217C  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   862  00217E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   863  002180  6EF8               	movwf	tblptru,c
   864  002182  0100               	movlb	0
   865  002184  EFA9  F00F         	goto	_main	;jump to C main() function
   866                           tblptru	equ	0xFF8
   867                           postinc0	equ	0xFEE
   868                           wreg	equ	0xFE8
   869                           
   870                           	psect	bssCOMRAM
   871  000071                     __pbssCOMRAM:
   872                           	opt stack 0
   873  000071                     simulate@F3093:
   874                           	opt stack 0
   875  000071                     	ds	4
   876  000075                     _mode:
   877                           	opt stack 0
   878  000075                     	ds	2
   879  000077                     _time:
   880                           	opt stack 0
   881  000077                     	ds	7
   882                           tblptru	equ	0xFF8
   883                           postinc0	equ	0xFEE
   884                           wreg	equ	0xFE8
   885                           
   886                           	psect	bssBANK0
   887  0000AA                     __pbssBANK0:
   888                           	opt stack 0
   889  0000AA                     intrpt@F3114:
   890                           	opt stack 0
   891  0000AA                     	ds	6
   892  0000B0                     simulate@F3106:
   893                           	opt stack 0
   894  0000B0                     	ds	6
   895  0000B6                     simulate@F3104:
   896                           	opt stack 0
   897  0000B6                     	ds	6
   898  0000BC                     PermLog@F3082:
   899                           	opt stack 0
   900  0000BC                     	ds	4
   901  0000C0                     simulate@F3097:
   902                           	opt stack 0
   903  0000C0                     	ds	4
   904  0000C4                     simulate@F3095:
   905                           	opt stack 0
   906  0000C4                     	ds	4
   907  0000C8                     _Latest:
   908                           	opt stack 0
   909  0000C8                     	ds	1
   910                           tblptru	equ	0xFF8
   911                           postinc0	equ	0xFEE
   912                           wreg	equ	0xFE8
   913                           
   914                           	psect	cstackBANK0
   915  000080                     __pcstackBANK0:
   916                           	opt stack 0
   917  000080                     ??_isdigit:
   918  000080                     ??_I2C_Master_Wait:
   919  000080                     ?_AD:
   920                           	opt stack 0
   921  000080                     ?___wmul:
   922                           	opt stack 0
   923  000080                     ?___lwdiv:
   924                           	opt stack 0
   925  000080                     ?___lldiv:
   926                           	opt stack 0
   927  000080                     lcdNibble@temp:
   928                           	opt stack 0
   929  000080                     ReadEE@address:
   930                           	opt stack 0
   931  000080                     ___wmul@multiplier:
   932                           	opt stack 0
   933  000080                     ___lwdiv@dividend:
   934                           	opt stack 0
   935  000080                     ___lldiv@dividend:
   936                           	opt stack 0
   937                           
   938                           ; 4 bytes @ 0x0
   939  000080                     	ds	1
   940  000081                     lcdNibble@data:
   941                           	opt stack 0
   942  000081                     I2C_Master_Read@a:
   943                           	opt stack 0
   944  000081                     _isdigit$1054:
   945                           	opt stack 0
   946  000081                     I2C_Master_Write@d:
   947                           	opt stack 0
   948                           
   949                           ; 2 bytes @ 0x1
   950  000081                     	ds	1
   951  000082                     ??_AD:
   952  000082                     lcdInst@data:
   953                           	opt stack 0
   954  000082                     putch@data:
   955                           	opt stack 0
   956  000082                     I2C_Master_Read@temp:
   957                           	opt stack 0
   958  000082                     isdigit@c:
   959                           	opt stack 0
   960  000082                     ___wmul@multiplicand:
   961                           	opt stack 0
   962  000082                     ___lwdiv@divisor:
   963                           	opt stack 0
   964                           
   965                           ; 2 bytes @ 0x2
   966  000082                     	ds	1
   967  000083                     ??_initLCD:
   968  000083                     getTime@time:
   969                           	opt stack 0
   970                           
   971                           ; 2 bytes @ 0x3
   972  000083                     	ds	1
   973  000084                     AD@channel:
   974                           	opt stack 0
   975  000084                     ___wmul@product:
   976                           	opt stack 0
   977  000084                     ___lwdiv@quotient:
   978                           	opt stack 0
   979  000084                     ___lldiv@divisor:
   980                           	opt stack 0
   981                           
   982                           ; 4 bytes @ 0x4
   983  000084                     	ds	1
   984  000085                     getTime@i:
   985                           	opt stack 0
   986                           
   987                           ; 1 bytes @ 0x5
   988  000085                     	ds	1
   989  000086                     ___lwdiv@counter:
   990                           	opt stack 0
   991                           
   992                           ; 1 bytes @ 0x6
   993  000086                     	ds	1
   994  000087                     ?___lwmod:
   995                           	opt stack 0
   996  000087                     ___lwmod@dividend:
   997                           	opt stack 0
   998                           
   999                           ; 2 bytes @ 0x7
  1000  000087                     	ds	1
  1001  000088                     ___lldiv@quotient:
  1002                           	opt stack 0
  1003                           
  1004                           ; 4 bytes @ 0x8
  1005  000088                     	ds	1
  1006  000089                     ___lwmod@divisor:
  1007                           	opt stack 0
  1008                           
  1009                           ; 2 bytes @ 0x9
  1010  000089                     	ds	2
  1011  00008B                     ___lwmod@counter:
  1012                           	opt stack 0
  1013                           
  1014                           ; 1 bytes @ 0xB
  1015  00008B                     	ds	1
  1016  00008C                     ?_printf:
  1017                           	opt stack 0
  1018  00008C                     ___lldiv@counter:
  1019                           	opt stack 0
  1020  00008C                     printf@f:
  1021                           	opt stack 0
  1022                           
  1023                           ; 2 bytes @ 0xC
  1024  00008C                     	ds	1
  1025  00008D                     I2C_Master_Init@c:
  1026                           	opt stack 0
  1027                           
  1028                           ; 4 bytes @ 0xD
  1029  00008D                     	ds	4
  1030  000091                     ??_I2C_Master_Init:
  1031                           
  1032                           ; 1 bytes @ 0x11
  1033  000091                     	ds	3
  1034  000094                     ??_printf:
  1035                           
  1036                           ; 1 bytes @ 0x14
  1037  000094                     	ds	1
  1038  000095                     
  1039                           ; 1 bytes @ 0x15
  1040  000095                     	ds	3
  1041  000098                     printf@cp:
  1042                           	opt stack 0
  1043                           
  1044                           ; 2 bytes @ 0x18
  1045  000098                     	ds	2
  1046  00009A                     printf@idx:
  1047                           	opt stack 0
  1048                           
  1049                           ; 1 bytes @ 0x1A
  1050  00009A                     	ds	1
  1051  00009B                     printf@ap:
  1052                           	opt stack 0
  1053                           
  1054                           ; 2 bytes @ 0x1B
  1055  00009B                     	ds	2
  1056  00009D                     printf@len:
  1057                           	opt stack 0
  1058                           
  1059                           ; 2 bytes @ 0x1D
  1060  00009D                     	ds	2
  1061  00009F                     printf@prec:
  1062                           	opt stack 0
  1063                           
  1064                           ; 1 bytes @ 0x1F
  1065  00009F                     	ds	1
  1066  0000A0                     printf@val:
  1067                           	opt stack 0
  1068                           
  1069                           ; 2 bytes @ 0x20
  1070  0000A0                     	ds	2
  1071  0000A2                     printf@flag:
  1072                           	opt stack 0
  1073                           
  1074                           ; 1 bytes @ 0x22
  1075  0000A2                     	ds	1
  1076  0000A3                     printf@width:
  1077                           	opt stack 0
  1078                           
  1079                           ; 2 bytes @ 0x23
  1080  0000A3                     	ds	2
  1081  0000A5                     printf@c:
  1082                           	opt stack 0
  1083                           
  1084                           ; 1 bytes @ 0x25
  1085  0000A5                     	ds	1
  1086  0000A6                     ??_showRTC:
  1087  0000A6                     ??_testAD:
  1088                           
  1089                           ; 1 bytes @ 0x26
  1090  0000A6                     	ds	2
  1091  0000A8                     ??_main:
  1092                           
  1093                           ; 1 bytes @ 0x28
  1094  0000A8                     	ds	2
  1095                           tblptru	equ	0xFF8
  1096                           postinc0	equ	0xFEE
  1097                           wreg	equ	0xFE8
  1098                           
  1099                           	psect	cstackCOMRAM
  1100  000001                     __pcstackCOMRAM:
  1101                           	opt stack 0
  1102  000001                     ??i2_I2C_Master_Wait:
  1103  000001                     ??i2_isdigit:
  1104  000001                     ?_captureKeypad:
  1105                           	opt stack 0
  1106  000001                     ?___awdiv:
  1107                           	opt stack 0
  1108  000001                     ?i2_AD:
  1109                           	opt stack 0
  1110  000001                     ?i2___wmul:
  1111                           	opt stack 0
  1112  000001                     ?i2___lwdiv:
  1113                           	opt stack 0
  1114  000001                     ?___ftpack:
  1115                           	opt stack 0
  1116  000001                     back@runs:
  1117                           	opt stack 0
  1118  000001                     i2lcdNibble@temp:
  1119                           	opt stack 0
  1120  000001                     WriteEE@address:
  1121                           	opt stack 0
  1122  000001                     ___awdiv@dividend:
  1123                           	opt stack 0
  1124  000001                     i2ReadEE@address:
  1125                           	opt stack 0
  1126  000001                     i2___wmul@multiplier:
  1127                           	opt stack 0
  1128  000001                     i2___lwdiv@dividend:
  1129                           	opt stack 0
  1130  000001                     ___ftpack@arg:
  1131                           	opt stack 0
  1132                           
  1133                           ; 3 bytes @ 0x0
  1134  000001                     	ds	1
  1135  000002                     back@result:
  1136                           	opt stack 0
  1137  000002                     i2lcdNibble@data:
  1138                           	opt stack 0
  1139  000002                     i2I2C_Master_Read@a:
  1140                           	opt stack 0
  1141  000002                     i2_isdigit$1054:
  1142                           	opt stack 0
  1143  000002                     i2I2C_Master_Write@d:
  1144                           	opt stack 0
  1145                           
  1146                           ; 2 bytes @ 0x1
  1147  000002                     	ds	1
  1148  000003                     ??i2_AD:
  1149  000003                     captureKeypad@keypress:
  1150                           	opt stack 0
  1151  000003                     WriteEE@data:
  1152                           	opt stack 0
  1153  000003                     i2lcdInst@data:
  1154                           	opt stack 0
  1155  000003                     i2putch@data:
  1156                           	opt stack 0
  1157  000003                     i2I2C_Master_Read@temp:
  1158                           	opt stack 0
  1159  000003                     i2isdigit@c:
  1160                           	opt stack 0
  1161  000003                     ReadRun@sorted:
  1162                           	opt stack 0
  1163  000003                     ___awdiv@divisor:
  1164                           	opt stack 0
  1165  000003                     i2___wmul@multiplicand:
  1166                           	opt stack 0
  1167  000003                     i2___lwdiv@divisor:
  1168                           	opt stack 0
  1169                           
  1170                           ; 2 bytes @ 0x2
  1171  000003                     	ds	1
  1172  000004                     ___ftpack@exp:
  1173                           	opt stack 0
  1174  000004                     i2getTime@time:
  1175                           	opt stack 0
  1176                           
  1177                           ; 2 bytes @ 0x3
  1178  000004                     	ds	1
  1179  000005                     ___awdiv@counter:
  1180                           	opt stack 0
  1181  000005                     ___ftpack@sign:
  1182                           	opt stack 0
  1183  000005                     i2AD@channel:
  1184                           	opt stack 0
  1185  000005                     ReadRun@time:
  1186                           	opt stack 0
  1187  000005                     i2___wmul@product:
  1188                           	opt stack 0
  1189  000005                     i2___lwdiv@quotient:
  1190                           	opt stack 0
  1191                           
  1192                           ; 2 bytes @ 0x4
  1193  000005                     	ds	1
  1194  000006                     ??___ftpack:
  1195  000006                     ___awdiv@sign:
  1196                           	opt stack 0
  1197  000006                     i2getTime@i:
  1198                           	opt stack 0
  1199                           
  1200                           ; 1 bytes @ 0x5
  1201  000006                     	ds	1
  1202  000007                     ??_ReadRun:
  1203  000007                     ?_HexDecToDec2:
  1204                           	opt stack 0
  1205  000007                     i2___lwdiv@counter:
  1206                           	opt stack 0
  1207  000007                     HexDecToDec2@hex:
  1208                           	opt stack 0
  1209  000007                     WriteRun@sorted:
  1210                           	opt stack 0
  1211  000007                     ___awdiv@quotient:
  1212                           	opt stack 0
  1213                           
  1214                           ; 2 bytes @ 0x6
  1215  000007                     	ds	1
  1216  000008                     ?i2___lwmod:
  1217                           	opt stack 0
  1218  000008                     i2___lwmod@dividend:
  1219                           	opt stack 0
  1220                           
  1221                           ; 2 bytes @ 0x7
  1222  000008                     	ds	1
  1223  000009                     ??_HexDecToDec2:
  1224  000009                     ?___awtoft:
  1225                           	opt stack 0
  1226  000009                     PWMC@widthus:
  1227                           	opt stack 0
  1228  000009                     WriteRun@time:
  1229                           	opt stack 0
  1230  000009                     ___awtoft@c:
  1231                           	opt stack 0
  1232                           
  1233                           ; 2 bytes @ 0x8
  1234  000009                     	ds	1
  1235  00000A                     i2___lwmod@divisor:
  1236                           	opt stack 0
  1237                           
  1238                           ; 2 bytes @ 0x9
  1239  00000A                     	ds	1
  1240  00000B                     ??_WriteRun:
  1241  00000B                     ReadRun@backruns:
  1242                           	opt stack 0
  1243  00000B                     PWMC@cycles:
  1244                           	opt stack 0
  1245                           
  1246                           ; 2 bytes @ 0xA
  1247  00000B                     	ds	1
  1248  00000C                     ___awtoft@sign:
  1249                           	opt stack 0
  1250  00000C                     i2___lwmod@counter:
  1251                           	opt stack 0
  1252  00000C                     HexDecToDec2@tenth:
  1253                           	opt stack 0
  1254  00000C                     ReadRun@add:
  1255                           	opt stack 0
  1256                           
  1257                           ; 2 bytes @ 0xB
  1258  00000C                     	ds	1
  1259  00000D                     ?i2_printf:
  1260                           	opt stack 0
  1261  00000D                     ?___ftmul:
  1262                           	opt stack 0
  1263  00000D                     PWMC@port:
  1264                           	opt stack 0
  1265  00000D                     WriteRun@add:
  1266                           	opt stack 0
  1267  00000D                     i2printf@f:
  1268                           	opt stack 0
  1269  00000D                     ___ftmul@f1:
  1270                           	opt stack 0
  1271                           
  1272                           ; 3 bytes @ 0xC
  1273  00000D                     	ds	1
  1274  00000E                     HexDecToDec2@digit:
  1275                           	opt stack 0
  1276                           
  1277                           ; 2 bytes @ 0xD
  1278  00000E                     	ds	1
  1279  00000F                     ??_PWMC:
  1280                           
  1281                           ; 1 bytes @ 0xE
  1282  00000F                     	ds	1
  1283  000010                     ___ftmul@f2:
  1284                           	opt stack 0
  1285                           
  1286                           ; 3 bytes @ 0xF
  1287  000010                     	ds	1
  1288  000011                     ??i2_printf:
  1289  000011                     _PWMC$1393:
  1290                           	opt stack 0
  1291                           
  1292                           ; 1 bytes @ 0x10
  1293  000011                     	ds	1
  1294  000012                     _PWMC$1394:
  1295                           	opt stack 0
  1296                           
  1297                           ; 1 bytes @ 0x11
  1298  000012                     	ds	1
  1299  000013                     ??___ftmul:
  1300  000013                     _PWMC$1395:
  1301                           	opt stack 0
  1302                           
  1303                           ; 1 bytes @ 0x12
  1304  000013                     	ds	1
  1305  000014                     PWMC@countdown:
  1306                           	opt stack 0
  1307                           
  1308                           ; 2 bytes @ 0x13
  1309  000014                     	ds	1
  1310  000015                     i2printf@cp:
  1311                           	opt stack 0
  1312                           
  1313                           ; 2 bytes @ 0x14
  1314  000015                     	ds	1
  1315  000016                     ___ftmul@exp:
  1316                           	opt stack 0
  1317  000016                     CW90@port:
  1318                           	opt stack 0
  1319  000016                     CCW90@port:
  1320                           	opt stack 0
  1321                           
  1322                           ; 2 bytes @ 0x15
  1323  000016                     	ds	1
  1324  000017                     i2printf@idx:
  1325                           	opt stack 0
  1326  000017                     ___ftmul@f3_as_product:
  1327                           	opt stack 0
  1328                           
  1329                           ; 3 bytes @ 0x16
  1330  000017                     	ds	1
  1331  000018                     ??_CCW90:
  1332  000018                     ??_CW90:
  1333  000018                     i2printf@ap:
  1334                           	opt stack 0
  1335                           
  1336                           ; 2 bytes @ 0x17
  1337  000018                     	ds	2
  1338  00001A                     ___ftmul@cntr:
  1339                           	opt stack 0
  1340  00001A                     i2printf@len:
  1341                           	opt stack 0
  1342                           
  1343                           ; 2 bytes @ 0x19
  1344  00001A                     	ds	1
  1345  00001B                     ___ftmul@sign:
  1346                           	opt stack 0
  1347                           
  1348                           ; 1 bytes @ 0x1A
  1349  00001B                     	ds	1
  1350  00001C                     i2printf@prec:
  1351                           	opt stack 0
  1352  00001C                     ___ftge@ff1:
  1353                           	opt stack 0
  1354                           
  1355                           ; 3 bytes @ 0x1B
  1356  00001C                     	ds	1
  1357  00001D                     i2printf@val:
  1358                           	opt stack 0
  1359                           
  1360                           ; 2 bytes @ 0x1C
  1361  00001D                     	ds	2
  1362  00001F                     i2printf@flag:
  1363                           	opt stack 0
  1364  00001F                     ___ftge@ff2:
  1365                           	opt stack 0
  1366                           
  1367                           ; 3 bytes @ 0x1E
  1368  00001F                     	ds	1
  1369  000020                     i2printf@width:
  1370                           	opt stack 0
  1371                           
  1372                           ; 2 bytes @ 0x1F
  1373  000020                     	ds	2
  1374  000022                     ??___ftge:
  1375  000022                     i2printf@c:
  1376                           	opt stack 0
  1377                           
  1378                           ; 1 bytes @ 0x21
  1379  000022                     	ds	1
  1380  000023                     showInfo@time:
  1381                           	opt stack 0
  1382  000023                     _stopMoving$555:
  1383                           	opt stack 0
  1384  000023                     printV@charged:
  1385                           	opt stack 0
  1386                           
  1387                           ; 2 bytes @ 0x22
  1388  000023                     	ds	2
  1389  000025                     ?_checkV:
  1390                           	opt stack 0
  1391  000025                     stopMoving@em:
  1392                           	opt stack 0
  1393  000025                     showInfo@sorted:
  1394                           	opt stack 0
  1395  000025                     checkV@threshhold:
  1396                           	opt stack 0
  1397                           
  1398                           ; 2 bytes @ 0x24
  1399  000025                     	ds	2
  1400  000027                     ??_showInfo:
  1401  000027                     checkV@voltage3:
  1402                           	opt stack 0
  1403                           
  1404                           ; 2 bytes @ 0x26
  1405  000027                     	ds	2
  1406  000029                     checkV@voltage2:
  1407                           	opt stack 0
  1408                           
  1409                           ; 2 bytes @ 0x28
  1410  000029                     	ds	2
  1411  00002B                     checkV@channel:
  1412                           	opt stack 0
  1413                           
  1414                           ; 1 bytes @ 0x2A
  1415  00002B                     	ds	1
  1416  00002C                     showInfo@type:
  1417                           	opt stack 0
  1418  00002C                     checkV@voltage:
  1419                           	opt stack 0
  1420                           
  1421                           ; 2 bytes @ 0x2B
  1422  00002C                     	ds	2
  1423  00002E                     ?_check9:
  1424                           	opt stack 0
  1425  00002E                     ?_checkC:
  1426                           	opt stack 0
  1427  00002E                     ?_checkAA:
  1428                           	opt stack 0
  1429  00002E                     showInfo@stop:
  1430                           	opt stack 0
  1431  00002E                     checkAA@sorted:
  1432                           	opt stack 0
  1433  00002E                     checkC@sorted:
  1434                           	opt stack 0
  1435  00002E                     check9@sorted:
  1436                           	opt stack 0
  1437                           
  1438                           ; 2 bytes @ 0x2D
  1439  00002E                     	ds	2
  1440  000030                     ??_check9:
  1441  000030                     ??_checkC:
  1442  000030                     ??_checkAA:
  1443  000030                     ??_PermLog:
  1444                           
  1445                           ; 1 bytes @ 0x2F
  1446  000030                     	ds	2
  1447  000032                     checkAA@V:
  1448                           	opt stack 0
  1449  000032                     checkC@V:
  1450                           	opt stack 0
  1451  000032                     check9@V:
  1452                           	opt stack 0
  1453  000032                     PermLog@sorted:
  1454                           	opt stack 0
  1455                           
  1456                           ; 4 bytes @ 0x31
  1457  000032                     	ds	2
  1458  000034                     ??_simulate:
  1459                           
  1460                           ; 1 bytes @ 0x33
  1461  000034                     	ds	2
  1462  000036                     PermLog@goback:
  1463                           	opt stack 0
  1464  000036                     simulate@stop:
  1465                           	opt stack 0
  1466                           
  1467                           ; 2 bytes @ 0x35
  1468  000036                     	ds	1
  1469  000037                     PermLog@time:
  1470                           	opt stack 0
  1471                           
  1472                           ; 2 bytes @ 0x36
  1473  000037                     	ds	1
  1474  000038                     _simulate$1496:
  1475                           	opt stack 0
  1476                           
  1477                           ; 2 bytes @ 0x37
  1478  000038                     	ds	1
  1479  000039                     PermLog@backruns:
  1480                           	opt stack 0
  1481                           
  1482                           ; 1 bytes @ 0x38
  1483  000039                     	ds	1
  1484  00003A                     simulate@portCW:
  1485                           	opt stack 0
  1486                           
  1487                           ; 6 bytes @ 0x39
  1488  00003A                     	ds	6
  1489  000040                     simulate@portCCW:
  1490                           	opt stack 0
  1491                           
  1492                           ; 6 bytes @ 0x3F
  1493  000040                     	ds	6
  1494  000046                     simulate@now:
  1495                           	opt stack 0
  1496                           
  1497                           ; 4 bytes @ 0x45
  1498  000046                     	ds	4
  1499  00004A                     simulate@start:
  1500                           	opt stack 0
  1501                           
  1502                           ; 4 bytes @ 0x49
  1503  00004A                     	ds	4
  1504  00004E                     simulate@AA:
  1505                           	opt stack 0
  1506                           
  1507                           ; 2 bytes @ 0x4D
  1508  00004E                     	ds	2
  1509  000050                     simulate@C:
  1510                           	opt stack 0
  1511                           
  1512                           ; 2 bytes @ 0x4F
  1513  000050                     	ds	2
  1514  000052                     simulate@V9:
  1515                           	opt stack 0
  1516                           
  1517                           ; 2 bytes @ 0x51
  1518  000052                     	ds	2
  1519  000054                     simulate@period:
  1520                           	opt stack 0
  1521                           
  1522                           ; 2 bytes @ 0x53
  1523  000054                     	ds	2
  1524  000056                     simulate@sorted:
  1525                           	opt stack 0
  1526                           
  1527                           ; 4 bytes @ 0x55
  1528  000056                     	ds	4
  1529  00005A                     ??_intrpt:
  1530                           
  1531                           ; 1 bytes @ 0x59
  1532  00005A                     	ds	16
  1533  00006A                     intrpt@keypress:
  1534                           	opt stack 0
  1535                           
  1536                           ; 1 bytes @ 0x69
  1537  00006A                     	ds	1
  1538  00006B                     intrpt@portCW:
  1539                           	opt stack 0
  1540                           
  1541                           ; 6 bytes @ 0x6A
  1542  00006B                     	ds	6
  1543                           tblptru	equ	0xFF8
  1544                           postinc0	equ	0xFEE
  1545                           wreg	equ	0xFE8
  1546                           
  1547 ;;
  1548 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1549 ;;
  1550 ;; *************** function _main *****************
  1551 ;; Defined at:
  1552 ;;		line 255 in file "main.c"
  1553 ;; Parameters:    Size  Location     Type
  1554 ;;		None
  1555 ;; Auto vars:     Size  Location     Type
  1556 ;;		None
  1557 ;; Return value:  Size  Location     Type
  1558 ;;                  2  167[None  ] int 
  1559 ;; Registers used:
  1560 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1561 ;; Tracked objects:
  1562 ;;		On entry : 0/0
  1563 ;;		On exit  : 0/0
  1564 ;;		Unchanged: 0/0
  1565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1568 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1569 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1570 ;;Total ram usage:        2 bytes
  1571 ;; Hardware stack levels required when called:   11
  1572 ;; This function calls:
  1573 ;;		_initialize
  1574 ;;		_lcdInst
  1575 ;;		_printf
  1576 ;;		_showRTC
  1577 ;;		_testAD
  1578 ;; This function is called by:
  1579 ;;		Startup code after reset
  1580 ;; This function uses a non-reentrant model
  1581 ;;
  1582                           
  1583                           	psect	text0
  1584  001F52                     __ptext0:
  1585                           	opt stack 0
  1586  001F52                     _main:
  1587                           	opt stack 20
  1588                           
  1589                           ;main.c: 256: initialize();
  1590                           
  1591                           ; BSR set to: 0
  1592                           ;incstack = 0
  1593  001F52  ECE2  F00E         	call	_initialize	;wreg free
  1594                           
  1595                           ;main.c: 258: lcdInst(0b10000000);
  1596  001F56  0E80               	movlw	128
  1597  001F58  EC6C  F011         	call	_lcdInst
  1598                           
  1599                           ;main.c: 259: printf("Welcome!          ");
  1600  001F5C  0E4A               	movlw	low STR_20
  1601  001F5E  0100               	movlb	0	; () banked
  1602  001F60  6F8C               	movwf	printf@f& (0+255),b
  1603  001F62  0EFF               	movlw	high STR_20
  1604  001F64  0100               	movlb	0	; () banked
  1605  001F66  6F8D               	movwf	(printf@f+1)& (0+255),b
  1606  001F68  EC09  F000         	call	_printf	;wreg free
  1607                           
  1608                           ;main.c: 261: _delay((unsigned long)((500)*(8000000/4000.0)));
  1609  001F6C  0E06               	movlw	6
  1610  001F6E  0100               	movlb	0	; () banked
  1611  001F70  6FA9               	movwf	(??_main+1)& (0+255),b
  1612  001F72  0E13               	movlw	19
  1613  001F74  0100               	movlb	0	; () banked
  1614  001F76  6FA8               	movwf	??_main& (0+255),b
  1615  001F78  0EAD               	movlw	173
  1616  001F7A                     u3237:
  1617  001F7A  2EE8               	decfsz	wreg,f,c
  1618  001F7C  D7FE               	bra	u3237
  1619  001F7E  2FA8               	decfsz	??_main& (0+255),f,b
  1620  001F80  D7FC               	bra	u3237
  1621  001F82  2FA9               	decfsz	(??_main+1)& (0+255),f,b
  1622  001F84  D7FA               	bra	u3237
  1623  001F86  D000               	nop2	
  1624  001F88                     l4197:
  1625  001F88  ECB3  F00E         	call	_testAD	;wreg free
  1626  001F8C  D7FD               	goto	l4197
  1627  001F8E                     l4201:
  1628  001F8E  ECBE  F00B         	call	_showRTC	;wreg free
  1629  001F92  D7FD               	goto	l4201
  1630  001F94  00FF               	reset		;# 
  1631  001F96                     __end_of_main:
  1632                           	opt stack 0
  1633                           tblptru	equ	0xFF8
  1634                           postinc0	equ	0xFEE
  1635                           wreg	equ	0xFE8
  1636                           
  1637 ;; *************** function _testAD *****************
  1638 ;; Defined at:
  1639 ;;		line 248 in file "main.c"
  1640 ;; Parameters:    Size  Location     Type
  1641 ;;		None
  1642 ;; Auto vars:     Size  Location     Type
  1643 ;;		None
  1644 ;; Return value:  Size  Location     Type
  1645 ;;                  1    wreg      void 
  1646 ;; Registers used:
  1647 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1648 ;; Tracked objects:
  1649 ;;		On entry : 0/0
  1650 ;;		On exit  : 0/0
  1651 ;;		Unchanged: 0/0
  1652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1655 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1656 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1657 ;;Total ram usage:        2 bytes
  1658 ;; Hardware stack levels used:    1
  1659 ;; Hardware stack levels required when called:   10
  1660 ;; This function calls:
  1661 ;;		_AD
  1662 ;;		_lcdInst
  1663 ;;		_printf
  1664 ;; This function is called by:
  1665 ;;		_main
  1666 ;; This function uses a non-reentrant model
  1667 ;;
  1668                           
  1669                           	psect	text1
  1670  001D66                     __ptext1:
  1671                           	opt stack 0
  1672  001D66                     _testAD:
  1673                           	opt stack 20
  1674                           
  1675                           ;main.c: 250: lcdInst(0b10000000);
  1676                           
  1677                           ;incstack = 0
  1678  001D66  0E80               	movlw	128
  1679  001D68  EC6C  F011         	call	_lcdInst
  1680                           
  1681                           ;main.c: 251: printf("A %d,C %d,9 %d   ", AD(2), AD(0), AD(5));
  1682  001D6C  0E81               	movlw	low STR_19
  1683  001D6E  0100               	movlb	0	; () banked
  1684  001D70  6F8C               	movwf	printf@f& (0+255),b
  1685  001D72  0EFF               	movlw	high STR_19
  1686  001D74  0100               	movlb	0	; () banked
  1687  001D76  6F8D               	movwf	(printf@f+1)& (0+255),b
  1688  001D78  0E02               	movlw	2
  1689  001D7A  ECEC  F00F         	call	_AD
  1690  001D7E  C080  F08E         	movff	?_AD,?_printf+2
  1691  001D82  C081  F08F         	movff	?_AD+1,?_printf+3
  1692  001D86  0E00               	movlw	0
  1693  001D88  ECEC  F00F         	call	_AD
  1694  001D8C  C080  F090         	movff	?_AD,?_printf+4
  1695  001D90  C081  F091         	movff	?_AD+1,?_printf+5
  1696  001D94  0E05               	movlw	5
  1697  001D96  ECEC  F00F         	call	_AD
  1698  001D9A  C080  F092         	movff	?_AD,?_printf+6
  1699  001D9E  C081  F093         	movff	?_AD+1,?_printf+7
  1700  001DA2  EC09  F000         	call	_printf	;wreg free
  1701                           
  1702                           ;main.c: 252: _delay((unsigned long)((500)*(8000000/4000.0)));
  1703  001DA6  0E06               	movlw	6
  1704  001DA8  0100               	movlb	0	; () banked
  1705  001DAA  6FA7               	movwf	(??_testAD+1)& (0+255),b
  1706  001DAC  0E13               	movlw	19
  1707  001DAE  0100               	movlb	0	; () banked
  1708  001DB0  6FA6               	movwf	??_testAD& (0+255),b
  1709  001DB2  0EAD               	movlw	173
  1710  001DB4                     u3247:
  1711  001DB4  2EE8               	decfsz	wreg,f,c
  1712  001DB6  D7FE               	bra	u3247
  1713  001DB8  2FA6               	decfsz	??_testAD& (0+255),f,b
  1714  001DBA  D7FC               	bra	u3247
  1715  001DBC  2FA7               	decfsz	(??_testAD+1)& (0+255),f,b
  1716  001DBE  D7FA               	bra	u3247
  1717  001DC0  D000               	nop2	
  1718  001DC2  0012               	return		;funcret
  1719  001DC4                     __end_of_testAD:
  1720                           	opt stack 0
  1721                           tblptru	equ	0xFF8
  1722                           postinc0	equ	0xFEE
  1723                           wreg	equ	0xFE8
  1724                           
  1725 ;; *************** function _AD *****************
  1726 ;; Defined at:
  1727 ;;		line 4 in file "sensors.c"
  1728 ;; Parameters:    Size  Location     Type
  1729 ;;  channel         1    wreg     unsigned char 
  1730 ;; Auto vars:     Size  Location     Type
  1731 ;;  channel         1    4[BANK0 ] unsigned char 
  1732 ;; Return value:  Size  Location     Type
  1733 ;;                  2    0[BANK0 ] int 
  1734 ;; Registers used:
  1735 ;;		wreg, status,2, status,0
  1736 ;; Tracked objects:
  1737 ;;		On entry : 0/0
  1738 ;;		On exit  : 0/0
  1739 ;;		Unchanged: 0/0
  1740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1741 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1742 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1743 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1744 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1745 ;;Total ram usage:        5 bytes
  1746 ;; Hardware stack levels used:    1
  1747 ;; Hardware stack levels required when called:    7
  1748 ;; This function calls:
  1749 ;;		Nothing
  1750 ;; This function is called by:
  1751 ;;		_testAD
  1752 ;; This function uses a non-reentrant model
  1753 ;;
  1754                           
  1755                           	psect	text2
  1756  001FD8                     __ptext2:
  1757                           	opt stack 0
  1758  001FD8                     _AD:
  1759                           	opt stack 22
  1760                           
  1761                           ;incstack = 0
  1762                           ;AD@channel stored from wreg
  1763  001FD8  0100               	movlb	0	; () banked
  1764  001FDA  6F84               	movwf	AD@channel& (0+255),b
  1765                           
  1766                           ;sensors.c: 6: ADCON0 = ((channel << 2));
  1767  001FDC  0100               	movlb	0	; () banked
  1768  001FDE  4584               	rlncf	AD@channel& (0+255),w,b
  1769  001FE0  46E8               	rlncf	wreg,f,c
  1770  001FE2  0BFC               	andlw	252
  1771  001FE4  6EC2               	movwf	4034,c	;volatile
  1772                           
  1773                           ; BSR set to: 0
  1774                           ;sensors.c: 7: ADON = 1;
  1775  001FE6  80C2               	bsf	4034,0,c	;volatile
  1776                           
  1777                           ; BSR set to: 0
  1778                           ;sensors.c: 8: ADCON0bits.GO = 1;
  1779  001FE8  82C2               	bsf	4034,1,c	;volatile
  1780  001FEA                     l305:
  1781  001FEA  B2C2               	btfsc	4034,1,c	;volatile
  1782  001FEC  D7FE               	goto	l305
  1783                           
  1784                           ;sensors.c: 10: return (ADRESH << 8) | ADRESL;
  1785  001FEE  50C3               	movf	4035,w,c	;volatile
  1786  001FF0  CFC4 F082          	movff	4036,??_AD	;volatile
  1787  001FF4  0100               	movlb	0	; () banked
  1788  001FF6  6B83               	clrf	(??_AD+1)& (0+255),b
  1789  001FF8  C082  F083         	movff	??_AD,??_AD+1
  1790  001FFC  0100               	movlb	0	; () banked
  1791  001FFE  6B82               	clrf	??_AD& (0+255),b
  1792  002000  0100               	movlb	0	; () banked
  1793  002002  1182               	iorwf	??_AD& (0+255),w,b
  1794  002004  0100               	movlb	0	; () banked
  1795  002006  6F80               	movwf	?_AD& (0+255),b
  1796  002008  0100               	movlb	0	; () banked
  1797  00200A  5183               	movf	(??_AD+1)& (0+255),w,b
  1798  00200C  0100               	movlb	0	; () banked
  1799  00200E  6F81               	movwf	(?_AD+1)& (0+255),b
  1800  002010  0012               	return	
  1801  002012                     __end_of_AD:
  1802                           	opt stack 0
  1803                           tblptru	equ	0xFF8
  1804                           postinc0	equ	0xFEE
  1805                           wreg	equ	0xFE8
  1806                           
  1807 ;; *************** function _showRTC *****************
  1808 ;; Defined at:
  1809 ;;		line 171 in file "main.c"
  1810 ;; Parameters:    Size  Location     Type
  1811 ;;		None
  1812 ;; Auto vars:     Size  Location     Type
  1813 ;;		None
  1814 ;; Return value:  Size  Location     Type
  1815 ;;                  1    wreg      void 
  1816 ;; Registers used:
  1817 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1818 ;; Tracked objects:
  1819 ;;		On entry : 0/0
  1820 ;;		On exit  : 0/0
  1821 ;;		Unchanged: 0/0
  1822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1824 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1825 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1826 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1827 ;;Total ram usage:        2 bytes
  1828 ;; Hardware stack levels used:    1
  1829 ;; Hardware stack levels required when called:   10
  1830 ;; This function calls:
  1831 ;;		_getTime
  1832 ;;		_lcdInst
  1833 ;;		_printf
  1834 ;; This function is called by:
  1835 ;;		_main
  1836 ;; This function uses a non-reentrant model
  1837 ;;
  1838                           
  1839                           	psect	text3
  1840  00177C                     __ptext3:
  1841                           	opt stack 0
  1842  00177C                     _showRTC:
  1843                           	opt stack 20
  1844                           
  1845                           ;main.c: 172: getTime(time);
  1846                           
  1847                           ; BSR set to: 0
  1848                           ;incstack = 0
  1849  00177C  0E77               	movlw	low _time
  1850  00177E  0100               	movlb	0	; () banked
  1851  001780  6F83               	movwf	getTime@time& (0+255),b
  1852  001782  0E00               	movlw	high _time
  1853  001784  0100               	movlb	0	; () banked
  1854  001786  6F84               	movwf	(getTime@time+1)& (0+255),b
  1855  001788  EC03  F00C         	call	_getTime	;wreg free
  1856                           
  1857                           ;main.c: 173: lcdInst(0b10000000);
  1858  00178C  0E80               	movlw	128
  1859  00178E  EC6C  F011         	call	_lcdInst
  1860                           
  1861                           ;main.c: 174: printf("    %02x/%02x/%02x      ", time[6], time[5], time[4]);
  1862  001792  0E0F               	movlw	low STR_17
  1863  001794  0100               	movlb	0	; () banked
  1864  001796  6F8C               	movwf	printf@f& (0+255),b
  1865  001798  0EFE               	movlw	high STR_17
  1866  00179A  0100               	movlb	0	; () banked
  1867  00179C  6F8D               	movwf	(printf@f+1)& (0+255),b
  1868  00179E  C07D  F08E         	movff	_time+6,?_printf+2
  1869  0017A2  0100               	movlb	0	; () banked
  1870  0017A4  6B8F               	clrf	(?_printf+3)& (0+255),b
  1871  0017A6  C07C  F090         	movff	_time+5,?_printf+4
  1872  0017AA  0100               	movlb	0	; () banked
  1873  0017AC  6B91               	clrf	(?_printf+5)& (0+255),b
  1874  0017AE  C07B  F092         	movff	_time+4,?_printf+6
  1875  0017B2  0100               	movlb	0	; () banked
  1876  0017B4  6B93               	clrf	(?_printf+7)& (0+255),b
  1877  0017B6  EC09  F000         	call	_printf	;wreg free
  1878                           
  1879                           ;main.c: 175: lcdInst(0b11000000);
  1880  0017BA  0EC0               	movlw	192
  1881  0017BC  EC6C  F011         	call	_lcdInst
  1882                           
  1883                           ;main.c: 176: printf("    %02x:%02x:%02x      ", time[2], time[1], time[0]);
  1884  0017C0  0E28               	movlw	low STR_18
  1885  0017C2  0100               	movlb	0	; () banked
  1886  0017C4  6F8C               	movwf	printf@f& (0+255),b
  1887  0017C6  0EFE               	movlw	high STR_18
  1888  0017C8  0100               	movlb	0	; () banked
  1889  0017CA  6F8D               	movwf	(printf@f+1)& (0+255),b
  1890  0017CC  C079  F08E         	movff	_time+2,?_printf+2
  1891  0017D0  0100               	movlb	0	; () banked
  1892  0017D2  6B8F               	clrf	(?_printf+3)& (0+255),b
  1893  0017D4  C078  F090         	movff	_time+1,?_printf+4
  1894  0017D8  0100               	movlb	0	; () banked
  1895  0017DA  6B91               	clrf	(?_printf+5)& (0+255),b
  1896  0017DC  C077  F092         	movff	_time,?_printf+6
  1897  0017E0  0100               	movlb	0	; () banked
  1898  0017E2  6B93               	clrf	(?_printf+7)& (0+255),b
  1899  0017E4  EC09  F000         	call	_printf	;wreg free
  1900                           
  1901                           ;main.c: 177: _delay((unsigned long)((250)*(8000000/4000.0)));
  1902  0017E8  0E03               	movlw	3
  1903  0017EA  0100               	movlb	0	; () banked
  1904  0017EC  6FA7               	movwf	(??_showRTC+1)& (0+255),b
  1905  0017EE  0E8A               	movlw	138
  1906  0017F0  0100               	movlb	0	; () banked
  1907  0017F2  6FA6               	movwf	??_showRTC& (0+255),b
  1908  0017F4  0E55               	movlw	85
  1909  0017F6                     u3257:
  1910  0017F6  2EE8               	decfsz	wreg,f,c
  1911  0017F8  D7FE               	bra	u3257
  1912  0017FA  2FA6               	decfsz	??_showRTC& (0+255),f,b
  1913  0017FC  D7FC               	bra	u3257
  1914  0017FE  2FA7               	decfsz	(??_showRTC+1)& (0+255),f,b
  1915  001800  D7FA               	bra	u3257
  1916  001802  D000               	nop2	
  1917  001804  0012               	return		;funcret
  1918  001806                     __end_of_showRTC:
  1919                           	opt stack 0
  1920                           tblptru	equ	0xFF8
  1921                           postinc0	equ	0xFEE
  1922                           wreg	equ	0xFE8
  1923                           
  1924 ;; *************** function _printf *****************
  1925 ;; Defined at:
  1926 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  1927 ;; Parameters:    Size  Location     Type
  1928 ;;  f               2   12[BANK0 ] PTR const unsigned char 
  1929 ;;		 -> STR_45(17), STR_44(17), STR_43(18), STR_42(22), 
  1930 ;;		 -> STR_41(4), STR_40(3), STR_39(4), STR_38(5), 
  1931 ;;		 -> STR_37(4), STR_36(18), STR_35(20), STR_34(16), 
  1932 ;;		 -> STR_33(21), STR_32(16), STR_31(21), STR_30(16), 
  1933 ;;		 -> STR_29(20), STR_28(16), STR_27(21), STR_26(23), 
  1934 ;;		 -> STR_25(24), STR_24(21), STR_23(24), STR_22(24), 
  1935 ;;		 -> STR_21(25), STR_20(19), STR_19(18), STR_18(25), 
  1936 ;;		 -> STR_17(25), STR_16(27), STR_15(3), STR_14(3), 
  1937 ;;		 -> STR_13(3), STR_12(5), STR_11(3), STR_10(3), 
  1938 ;;		 -> STR_9(3), STR_8(4), STR_7(3), STR_6(3), 
  1939 ;;		 -> STR_5(3), STR_4(4), STR_3(5), STR_2(24), 
  1940 ;;		 -> STR_1(9), 
  1941 ;; Auto vars:     Size  Location     Type
  1942 ;;  idx             1   26[BANK0 ] unsigned char 
  1943 ;;  tmpval          4    0        struct .
  1944 ;;  width           2   35[BANK0 ] int 
  1945 ;;  val             2   32[BANK0 ] unsigned int 
  1946 ;;  len             2   29[BANK0 ] unsigned int 
  1947 ;;  ap              2   27[BANK0 ] PTR void [1]
  1948 ;;		 -> ?i2_printf(2), ?_printf(2), 
  1949 ;;  cp              2   24[BANK0 ] PTR const unsigned char 
  1950 ;;		 -> printf@c(1), 
  1951 ;;  c               1   37[BANK0 ] char 
  1952 ;;  flag            1   34[BANK0 ] unsigned char 
  1953 ;;  prec            1   31[BANK0 ] char 
  1954 ;; Return value:  Size  Location     Type
  1955 ;;                  2   12[BANK0 ] int 
  1956 ;; Registers used:
  1957 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1958 ;; Tracked objects:
  1959 ;;		On entry : 0/0
  1960 ;;		On exit  : 0/0
  1961 ;;		Unchanged: 0/0
  1962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1963 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1964 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1965 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1966 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1967 ;;Total ram usage:       26 bytes
  1968 ;; Hardware stack levels used:    1
  1969 ;; Hardware stack levels required when called:    9
  1970 ;; This function calls:
  1971 ;;		___lwdiv
  1972 ;;		___lwmod
  1973 ;;		___wmul
  1974 ;;		_isdigit
  1975 ;;		_putch
  1976 ;; This function is called by:
  1977 ;;		_showRTC
  1978 ;;		_testAD
  1979 ;;		_main
  1980 ;;		_mainloop
  1981 ;; This function uses a non-reentrant model
  1982 ;;
  1983                           
  1984                           	psect	text4
  1985  000012                     __ptext4:
  1986                           	opt stack 0
  1987  000012                     _printf:
  1988                           	opt stack 20
  1989                           
  1990                           ;doprnt.c: 466: va_list ap;
  1991                           ;doprnt.c: 499: signed char c;
  1992                           ;doprnt.c: 501: int width;
  1993                           ;doprnt.c: 506: signed char prec;
  1994                           ;doprnt.c: 508: unsigned char flag;
  1995                           ;doprnt.c: 523: union {
  1996                           ;doprnt.c: 524: unsigned long vd;
  1997                           ;doprnt.c: 525: double integ;
  1998                           ;doprnt.c: 526: } tmpval;
  1999                           ;doprnt.c: 528: unsigned int val;
  2000                           ;doprnt.c: 529: unsigned len;
  2001                           ;doprnt.c: 530: const char * cp;
  2002                           ;doprnt.c: 533: *ap = __va_start();
  2003                           
  2004                           ;incstack = 0
  2005  000012  0E8E               	movlw	low (?_printf+2)
  2006  000014  0100               	movlb	0	; () banked
  2007  000016  6F9B               	movwf	printf@ap& (0+255),b
  2008  000018  0E00               	movlw	high (?_printf+2)
  2009  00001A  0100               	movlb	0	; () banked
  2010  00001C  6F9C               	movwf	(printf@ap+1)& (0+255),b
  2011                           
  2012                           ;doprnt.c: 536: while(c = *f++) {
  2013  00001E  D21F               	goto	l3659
  2014  000020                     l3509:
  2015                           
  2016                           ; BSR set to: 0
  2017                           ;doprnt.c: 538: if(c != '%')
  2018  000020  0E25               	movlw	37
  2019  000022  0100               	movlb	0	; () banked
  2020  000024  19A5               	xorwf	printf@c& (0+255),w,b
  2021  000026  B4D8               	btfsc	status,2,c
  2022  000028  D005               	goto	l3513
  2023                           
  2024                           ; BSR set to: 0
  2025                           ;doprnt.c: 540: {
  2026                           ;doprnt.c: 541: (putch(c) );
  2027  00002A  0100               	movlb	0	; () banked
  2028  00002C  51A5               	movf	printf@c& (0+255),w,b
  2029  00002E  EC64  F011         	call	_putch
  2030                           
  2031                           ;doprnt.c: 542: continue;
  2032  000032  D215               	goto	l3659
  2033  000034                     l3513:
  2034                           
  2035                           ;doprnt.c: 543: }
  2036                           ;doprnt.c: 546: width = 0;
  2037  000034  0E00               	movlw	0
  2038  000036  0100               	movlb	0	; () banked
  2039  000038  6FA4               	movwf	(printf@width+1)& (0+255),b
  2040  00003A  0E00               	movlw	0
  2041  00003C  6FA3               	movwf	printf@width& (0+255),b
  2042                           
  2043                           ;doprnt.c: 548: flag = 0;
  2044  00003E  0E00               	movlw	0
  2045  000040  0100               	movlb	0	; () banked
  2046  000042  6FA2               	movwf	printf@flag& (0+255),b
  2047                           
  2048                           ; BSR set to: 0
  2049                           ;doprnt.c: 551: switch(*f) {
  2050                           
  2051                           ;doprnt.c: 550: for(;;) {
  2052  000044  D005               	goto	l3519
  2053  000046                     l3515:
  2054                           
  2055                           ;doprnt.c: 580: flag |= 0x04;
  2056  000046  0100               	movlb	0	; () banked
  2057  000048  85A2               	bsf	printf@flag& (0+255),2,b
  2058                           
  2059                           ;doprnt.c: 581: f++;
  2060  00004A  0100               	movlb	0	; () banked
  2061  00004C  4B8C               	infsnz	printf@f& (0+255),f,b
  2062  00004E  2B8D               	incf	(printf@f+1)& (0+255),f,b
  2063  000050                     l3519:
  2064  000050  C08C  FFF6         	movff	printf@f,tblptrl
  2065  000054  C08D  FFF7         	movff	printf@f+1,tblptrh
  2066  000058                     	if	0	;tblptru may be non-zero
  2067  000058                     	endif
  2068  000058                     	if	0	;tblptru may be non-zero
  2069  000058                     	endif
  2070  000058  0008               	tblrd		*
  2071  00005A  50F5               	movf	tablat,w,c
  2072                           
  2073                           ; Switch size 1, requested type "space"
  2074                           ; Number of cases is 1, Range of values is 48 to 48
  2075                           ; switch strategies available:
  2076                           ; Name         Instructions Cycles
  2077                           ; simple_byte            4     3 (average)
  2078                           ;	Chosen strategy is simple_byte
  2079  00005C  0A30               	xorlw	48	; case 48
  2080  00005E  B4D8               	btfsc	status,2,c
  2081  000060  D7F2               	goto	l3515
  2082                           
  2083                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2084                           
  2085                           ;doprnt.c: 586: }
  2086                           
  2087                           ;doprnt.c: 585: break;
  2088  000062  C08C  FFF6         	movff	printf@f,tblptrl
  2089  000066  C08D  FFF7         	movff	printf@f+1,tblptrh
  2090  00006A                     	if	0	;tblptru may be non-zero
  2091  00006A                     	endif
  2092  00006A                     	if	0	;tblptru may be non-zero
  2093  00006A                     	endif
  2094  00006A  0008               	tblrd		*
  2095  00006C  50F5               	movf	tablat,w,c
  2096  00006E  EC73  F010         	call	_isdigit
  2097  000072  A0D8               	btfss	status,0,c
  2098  000074  D092               	goto	l3559
  2099                           
  2100                           ;doprnt.c: 598: width = 0;
  2101  000076  0E00               	movlw	0
  2102  000078  0100               	movlb	0	; () banked
  2103  00007A  6FA4               	movwf	(printf@width+1)& (0+255),b
  2104  00007C  0E00               	movlw	0
  2105  00007E  6FA3               	movwf	printf@width& (0+255),b
  2106  000080                     l3525:
  2107                           
  2108                           ;doprnt.c: 600: width *= 10;
  2109  000080  C0A3  F080         	movff	printf@width,___wmul@multiplier
  2110  000084  C0A4  F081         	movff	printf@width+1,___wmul@multiplier+1
  2111  000088  0E00               	movlw	0
  2112  00008A  0100               	movlb	0	; () banked
  2113  00008C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2114  00008E  0E0A               	movlw	10
  2115  000090  6F82               	movwf	___wmul@multiplicand& (0+255),b
  2116  000092  EC41  F010         	call	___wmul	;wreg free
  2117  000096  C080  F0A3         	movff	?___wmul,printf@width
  2118  00009A  C081  F0A4         	movff	?___wmul+1,printf@width+1
  2119                           
  2120                           ;doprnt.c: 601: width += *f++ - '0';
  2121  00009E  0ED0               	movlw	208
  2122  0000A0  0100               	movlb	0	; () banked
  2123  0000A2  6F94               	movwf	??_printf& (0+255),b
  2124  0000A4  0EFF               	movlw	255
  2125  0000A6  0100               	movlb	0	; () banked
  2126  0000A8  6F95               	movwf	(??_printf+1)& (0+255),b
  2127  0000AA  C08C  FFF6         	movff	printf@f,tblptrl
  2128  0000AE  C08D  FFF7         	movff	printf@f+1,tblptrh
  2129  0000B2                     	if	0	;tblptru may be non-zero
  2130  0000B2                     	endif
  2131  0000B2                     	if	0	;tblptru may be non-zero
  2132  0000B2                     	endif
  2133  0000B2  0008               	tblrd		*
  2134  0000B4  50F5               	movf	tablat,w,c
  2135  0000B6  0100               	movlb	0	; () banked
  2136  0000B8  6F96               	movwf	(??_printf+2)& (0+255),b
  2137  0000BA  6B97               	clrf	(??_printf+3)& (0+255),b
  2138  0000BC  0100               	movlb	0	; () banked
  2139  0000BE  5194               	movf	??_printf& (0+255),w,b
  2140  0000C0  0100               	movlb	0	; () banked
  2141  0000C2  2796               	addwf	(??_printf+2)& (0+255),f,b
  2142  0000C4  0100               	movlb	0	; () banked
  2143  0000C6  5195               	movf	(??_printf+1)& (0+255),w,b
  2144  0000C8  0100               	movlb	0	; () banked
  2145  0000CA  2397               	addwfc	(??_printf+3)& (0+255),f,b
  2146  0000CC  0100               	movlb	0	; () banked
  2147  0000CE  5196               	movf	(??_printf+2)& (0+255),w,b
  2148  0000D0  0100               	movlb	0	; () banked
  2149  0000D2  27A3               	addwf	printf@width& (0+255),f,b
  2150  0000D4  0100               	movlb	0	; () banked
  2151  0000D6  5197               	movf	(??_printf+3)& (0+255),w,b
  2152  0000D8  0100               	movlb	0	; () banked
  2153  0000DA  23A4               	addwfc	(printf@width+1)& (0+255),f,b
  2154                           
  2155                           ; BSR set to: 0
  2156  0000DC  0100               	movlb	0	; () banked
  2157  0000DE  4B8C               	infsnz	printf@f& (0+255),f,b
  2158  0000E0  2B8D               	incf	(printf@f+1)& (0+255),f,b
  2159                           
  2160                           ; BSR set to: 0
  2161                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2162  0000E2  C08C  FFF6         	movff	printf@f,tblptrl
  2163  0000E6  C08D  FFF7         	movff	printf@f+1,tblptrh
  2164  0000EA                     	if	0	;tblptru may be non-zero
  2165  0000EA                     	endif
  2166  0000EA                     	if	0	;tblptru may be non-zero
  2167  0000EA                     	endif
  2168  0000EA  0008               	tblrd		*
  2169  0000EC  50F5               	movf	tablat,w,c
  2170  0000EE  EC73  F010         	call	_isdigit
  2171  0000F2  A0D8               	btfss	status,0,c
  2172  0000F4  D052               	goto	l3559
  2173  0000F6  D7C4               	goto	l3525
  2174  0000F8                     l3533:
  2175                           
  2176                           ;doprnt.c: 721: flag |= 0x80;
  2177  0000F8  0100               	movlb	0	; () banked
  2178  0000FA  8FA2               	bsf	printf@flag& (0+255),7,b
  2179                           
  2180                           ;doprnt.c: 723: break;
  2181  0000FC  D06A               	goto	l3561
  2182  0000FE                     l3535:
  2183                           
  2184                           ; BSR set to: 0
  2185                           ;doprnt.c: 757: if(width > len)
  2186  0000FE  0100               	movlb	0	; () banked
  2187  000100  51A3               	movf	printf@width& (0+255),w,b
  2188  000102  0100               	movlb	0	; () banked
  2189  000104  5D9D               	subwf	printf@len& (0+255),w,b
  2190  000106  0100               	movlb	0	; () banked
  2191  000108  51A4               	movf	(printf@width+1)& (0+255),w,b
  2192  00010A  0100               	movlb	0	; () banked
  2193  00010C  599E               	subwfb	(printf@len+1)& (0+255),w,b
  2194  00010E  B0D8               	btfsc	status,0,c
  2195  000110  D009               	goto	l3539
  2196                           
  2197                           ; BSR set to: 0
  2198                           ;doprnt.c: 758: width -= len;
  2199  000112  0100               	movlb	0	; () banked
  2200  000114  519D               	movf	printf@len& (0+255),w,b
  2201  000116  0100               	movlb	0	; () banked
  2202  000118  5FA3               	subwf	printf@width& (0+255),f,b
  2203  00011A  0100               	movlb	0	; () banked
  2204  00011C  519E               	movf	(printf@len+1)& (0+255),w,b
  2205  00011E  0100               	movlb	0	; () banked
  2206  000120  5BA4               	subwfb	(printf@width+1)& (0+255),f,b
  2207  000122  D009               	goto	l3543
  2208  000124                     l3539:
  2209                           
  2210                           ; BSR set to: 0
  2211                           ;doprnt.c: 759: else
  2212                           ;doprnt.c: 760: width = 0;
  2213  000124  0E00               	movlw	0
  2214  000126  0100               	movlb	0	; () banked
  2215  000128  6FA4               	movwf	(printf@width+1)& (0+255),b
  2216  00012A  0E00               	movlw	0
  2217  00012C  6FA3               	movwf	printf@width& (0+255),b
  2218                           
  2219                           ; BSR set to: 0
  2220                           ;doprnt.c: 764: while(width--)
  2221  00012E  D003               	goto	l3543
  2222  000130                     l3541:
  2223                           
  2224                           ; BSR set to: 0
  2225                           ;doprnt.c: 765: (putch(' ') );
  2226  000130  0E20               	movlw	32
  2227  000132  EC64  F011         	call	_putch
  2228  000136                     l3543:
  2229  000136  0100               	movlb	0	; () banked
  2230  000138  07A3               	decf	printf@width& (0+255),f,b
  2231  00013A  A0D8               	btfss	status,0,c
  2232  00013C  07A4               	decf	(printf@width+1)& (0+255),f,b
  2233  00013E  0100               	movlb	0	; () banked
  2234  000140  29A3               	incf	printf@width& (0+255),w,b
  2235  000142  E1F6               	bnz	l3541
  2236  000144  0100               	movlb	0	; () banked
  2237  000146  29A4               	incf	(printf@width+1)& (0+255),w,b
  2238  000148  B4D8               	btfsc	status,2,c
  2239  00014A  D00B               	goto	l3549
  2240  00014C  D7F1               	goto	l3541
  2241  00014E                     l3545:
  2242                           
  2243                           ; BSR set to: 0
  2244                           ;doprnt.c: 768: (putch(*cp++) );
  2245  00014E  C098  FFD9         	movff	printf@cp,fsr2l
  2246  000152  C099  FFDA         	movff	printf@cp+1,fsr2h
  2247  000156  50DF               	movf	indf2,w,c
  2248  000158  EC64  F011         	call	_putch
  2249  00015C  0100               	movlb	0	; () banked
  2250  00015E  4B98               	infsnz	printf@cp& (0+255),f,b
  2251  000160  2B99               	incf	(printf@cp+1)& (0+255),f,b
  2252  000162                     l3549:
  2253                           
  2254                           ; BSR set to: 0
  2255  000162  0100               	movlb	0	; () banked
  2256  000164  079D               	decf	printf@len& (0+255),f,b
  2257  000166  A0D8               	btfss	status,0,c
  2258  000168  079E               	decf	(printf@len+1)& (0+255),f,b
  2259  00016A  0100               	movlb	0	; () banked
  2260  00016C  299D               	incf	printf@len& (0+255),w,b
  2261  00016E  E1EF               	bnz	l3545
  2262  000170  0100               	movlb	0	; () banked
  2263  000172  299E               	incf	(printf@len+1)& (0+255),w,b
  2264  000174  B4D8               	btfsc	status,2,c
  2265  000176  D173               	goto	l3659
  2266  000178  D7EA               	goto	l3545
  2267  00017A                     l3551:
  2268                           
  2269                           ; BSR set to: 0
  2270                           ;doprnt.c: 805: cp = (char *)&c;
  2271  00017A  0EA5               	movlw	low printf@c
  2272  00017C  0100               	movlb	0	; () banked
  2273  00017E  6F98               	movwf	printf@cp& (0+255),b
  2274  000180  0E00               	movlw	high printf@c
  2275  000182  0100               	movlb	0	; () banked
  2276  000184  6F99               	movwf	(printf@cp+1)& (0+255),b
  2277                           
  2278                           ; BSR set to: 0
  2279                           ;doprnt.c: 806: len = 1;
  2280  000186  0E00               	movlw	0
  2281  000188  0100               	movlb	0	; () banked
  2282  00018A  6F9E               	movwf	(printf@len+1)& (0+255),b
  2283  00018C  0E01               	movlw	1
  2284  00018E  6F9D               	movwf	printf@len& (0+255),b
  2285                           
  2286                           ;doprnt.c: 807: goto dostring;
  2287  000190  D7B6               	goto	l3535
  2288  000192                     l3555:
  2289                           
  2290                           ; BSR set to: 0
  2291                           ;doprnt.c: 818: flag |= 0xC0;
  2292  000192  0EC0               	movlw	192
  2293  000194  0100               	movlb	0	; () banked
  2294  000196  13A2               	iorwf	printf@flag& (0+255),f,b
  2295                           
  2296                           ; BSR set to: 0
  2297                           ;doprnt.c: 822: }
  2298                           
  2299                           ;doprnt.c: 819: break;
  2300  000198  D01C               	goto	l3561
  2301  00019A                     l3559:
  2302  00019A  C08C  FFF6         	movff	printf@f,tblptrl
  2303  00019E  C08D  FFF7         	movff	printf@f+1,tblptrh
  2304  0001A2  0100               	movlb	0	; () banked
  2305  0001A4  4B8C               	infsnz	printf@f& (0+255),f,b
  2306  0001A6  2B8D               	incf	(printf@f+1)& (0+255),f,b
  2307  0001A8                     	if	0	;tblptru may be non-zero
  2308  0001A8                     	endif
  2309  0001A8                     	if	0	;tblptru may be non-zero
  2310  0001A8                     	endif
  2311  0001A8  0008               	tblrd		*
  2312  0001AA  CFF5 F0A5          	movff	tablat,printf@c
  2313  0001AE  0100               	movlb	0	; () banked
  2314  0001B0  51A5               	movf	printf@c& (0+255),w,b
  2315                           
  2316                           ; Switch size 1, requested type "space"
  2317                           ; Number of cases is 5, Range of values is 0 to 120
  2318                           ; switch strategies available:
  2319                           ; Name         Instructions Cycles
  2320                           ; simple_byte           16     9 (average)
  2321                           ;	Chosen strategy is simple_byte
  2322  0001B2  0A00               	xorlw	0	; case 0
  2323  0001B4  B4D8               	btfsc	status,2,c
  2324  0001B6  0012               	return	
  2325  0001B8  0A64               	xorlw	100	; case 100
  2326  0001BA  B4D8               	btfsc	status,2,c
  2327  0001BC  D00A               	goto	l3561
  2328  0001BE  0A0D               	xorlw	13	; case 105
  2329  0001C0  B4D8               	btfsc	status,2,c
  2330  0001C2  D007               	goto	l3561
  2331  0001C4  0A1C               	xorlw	28	; case 117
  2332  0001C6  B4D8               	btfsc	status,2,c
  2333  0001C8  D7E4               	goto	l3555
  2334  0001CA  0A0D               	xorlw	13	; case 120
  2335  0001CC  B4D8               	btfsc	status,2,c
  2336  0001CE  D794               	goto	l3533
  2337  0001D0  D7D4               	goto	l3551
  2338  0001D2                     l3561:
  2339                           
  2340                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  2341  0001D2  C0A2  F094         	movff	printf@flag,??_printf
  2342  0001D6  0EC0               	movlw	192
  2343  0001D8  0100               	movlb	0	; () banked
  2344  0001DA  1794               	andwf	??_printf& (0+255),f,b
  2345  0001DC  A4D8               	btfss	status,2,c
  2346  0001DE  D019               	goto	l3573
  2347                           
  2348                           ; BSR set to: 0
  2349                           ;doprnt.c: 1253: {
  2350                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2351  0001E0  C09B  FFD9         	movff	printf@ap,fsr2l
  2352  0001E4  C09C  FFDA         	movff	printf@ap+1,fsr2h
  2353  0001E8  CFDE F0A0          	movff	postinc2,printf@val
  2354  0001EC  CFDD F0A1          	movff	postdec2,printf@val+1
  2355                           
  2356                           ; BSR set to: 0
  2357  0001F0  0E02               	movlw	2
  2358  0001F2  0100               	movlb	0	; () banked
  2359  0001F4  279B               	addwf	printf@ap& (0+255),f,b
  2360  0001F6  0E00               	movlw	0
  2361  0001F8  239C               	addwfc	(printf@ap+1)& (0+255),f,b
  2362                           
  2363                           ; BSR set to: 0
  2364                           ;doprnt.c: 1261: if((int)val < 0) {
  2365  0001FA  0100               	movlb	0	; () banked
  2366  0001FC  AFA1               	btfss	(printf@val+1)& (0+255),7,b
  2367  0001FE  D053               	goto	l3607
  2368                           
  2369                           ; BSR set to: 0
  2370                           ;doprnt.c: 1262: flag |= 0x03;
  2371  000200  0E03               	movlw	3
  2372  000202  0100               	movlb	0	; () banked
  2373  000204  13A2               	iorwf	printf@flag& (0+255),f,b
  2374                           
  2375                           ; BSR set to: 0
  2376                           ;doprnt.c: 1263: val = -val;
  2377  000206  0100               	movlb	0	; () banked
  2378  000208  6DA0               	negf	printf@val& (0+255),b
  2379  00020A  1FA1               	comf	(printf@val+1)& (0+255),f,b
  2380  00020C  B0D8               	btfsc	status,0,c
  2381  00020E  2BA1               	incf	(printf@val+1)& (0+255),f,b
  2382                           
  2383                           ; BSR set to: 0
  2384                           ;doprnt.c: 1264: }
  2385                           ;doprnt.c: 1266: }
  2386  000210  D04A               	goto	l3607
  2387  000212                     l3573:
  2388                           
  2389                           ; BSR set to: 0
  2390                           ;doprnt.c: 1268: else
  2391                           ;doprnt.c: 1273: {
  2392                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2393  000212  C09B  FFD9         	movff	printf@ap,fsr2l
  2394  000216  C09C  FFDA         	movff	printf@ap+1,fsr2h
  2395  00021A  CFDE F0A0          	movff	postinc2,printf@val
  2396  00021E  CFDD F0A1          	movff	postdec2,printf@val+1
  2397                           
  2398                           ; BSR set to: 0
  2399  000222  0E02               	movlw	2
  2400  000224  0100               	movlb	0	; () banked
  2401  000226  279B               	addwf	printf@ap& (0+255),f,b
  2402  000228  0E00               	movlw	0
  2403  00022A  239C               	addwfc	(printf@ap+1)& (0+255),f,b
  2404                           
  2405                           ; BSR set to: 0
  2406                           ;doprnt.c: 1287: }
  2407                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  2408  00022C  D03C               	goto	l3607
  2409  00022E                     l3577:
  2410                           
  2411                           ; BSR set to: 0
  2412                           ;doprnt.c: 1302: case 0xC0:
  2413                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2414  00022E  0E01               	movlw	1
  2415  000230  0100               	movlb	0	; () banked
  2416  000232  6FA5               	movwf	printf@c& (0+255),b
  2417  000234                     l3579:
  2418                           
  2419                           ; BSR set to: 0
  2420  000234  0E05               	movlw	5
  2421  000236  0100               	movlb	0	; () banked
  2422  000238  19A5               	xorwf	printf@c& (0+255),w,b
  2423  00023A  B4D8               	btfsc	status,2,c
  2424  00023C  D040               	goto	l3609
  2425                           
  2426                           ; BSR set to: 0
  2427                           ;doprnt.c: 1306: if(val < dpowers[c])
  2428                           
  2429                           ; BSR set to: 0
  2430                           
  2431                           ; BSR set to: 0
  2432  00023E  0100               	movlb	0	; () banked
  2433  000240  51A5               	movf	printf@c& (0+255),w,b
  2434  000242  0D02               	mullw	2
  2435  000244  0EC9               	movlw	low _dpowers
  2436  000246  24F3               	addwf	prodl,w,c
  2437  000248  6EF6               	movwf	tblptrl,c
  2438  00024A  0EFD               	movlw	high _dpowers
  2439  00024C  20F4               	addwfc	prodh,w,c
  2440  00024E  6EF7               	movwf	tblptrh,c
  2441  000250                     	if	0	;There are less than 3 active tblptr bytes
  2442  000250                     	endif
  2443  000250  0009               	tblrd		*+
  2444  000252  50F5               	movf	tablat,w,c
  2445  000254  0100               	movlb	0	; () banked
  2446  000256  5DA0               	subwf	printf@val& (0+255),w,b
  2447  000258  0009               	tblrd		*+
  2448  00025A  50F5               	movf	tablat,w,c
  2449  00025C  0100               	movlb	0	; () banked
  2450  00025E  59A1               	subwfb	(printf@val+1)& (0+255),w,b
  2451  000260  A0D8               	btfss	status,0,c
  2452  000262  D02D               	goto	l3609
  2453                           
  2454                           ; BSR set to: 0
  2455                           
  2456                           ; BSR set to: 0
  2457                           
  2458                           ; BSR set to: 0
  2459                           ;doprnt.c: 1307: break;
  2460  000264  0100               	movlb	0	; () banked
  2461  000266  2BA5               	incf	printf@c& (0+255),f,b
  2462  000268  D7E5               	goto	l3579
  2463  00026A                     l3591:
  2464                           
  2465                           ; BSR set to: 0
  2466                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2467  00026A  0E01               	movlw	1
  2468  00026C  0100               	movlb	0	; () banked
  2469  00026E  6FA5               	movwf	printf@c& (0+255),b
  2470  000270                     l3593:
  2471                           
  2472                           ; BSR set to: 0
  2473  000270  0E04               	movlw	4
  2474  000272  0100               	movlb	0	; () banked
  2475  000274  19A5               	xorwf	printf@c& (0+255),w,b
  2476  000276  B4D8               	btfsc	status,2,c
  2477  000278  D022               	goto	l3609
  2478                           
  2479                           ; BSR set to: 0
  2480                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2481                           
  2482                           ; BSR set to: 0
  2483                           
  2484                           ; BSR set to: 0
  2485  00027A  0100               	movlb	0	; () banked
  2486  00027C  51A5               	movf	printf@c& (0+255),w,b
  2487  00027E  0D02               	mullw	2
  2488  000280  0ED3               	movlw	low _hexpowers
  2489  000282  24F3               	addwf	prodl,w,c
  2490  000284  6EF6               	movwf	tblptrl,c
  2491  000286  0EFD               	movlw	high _hexpowers
  2492  000288  20F4               	addwfc	prodh,w,c
  2493  00028A  6EF7               	movwf	tblptrh,c
  2494  00028C                     	if	0	;There are less than 3 active tblptr bytes
  2495  00028C                     	endif
  2496  00028C  0009               	tblrd		*+
  2497  00028E  50F5               	movf	tablat,w,c
  2498  000290  0100               	movlb	0	; () banked
  2499  000292  5DA0               	subwf	printf@val& (0+255),w,b
  2500  000294  0009               	tblrd		*+
  2501  000296  50F5               	movf	tablat,w,c
  2502  000298  0100               	movlb	0	; () banked
  2503  00029A  59A1               	subwfb	(printf@val+1)& (0+255),w,b
  2504  00029C  A0D8               	btfss	status,0,c
  2505  00029E  D00F               	goto	l3609
  2506                           
  2507                           ; BSR set to: 0
  2508                           
  2509                           ; BSR set to: 0
  2510                           
  2511                           ; BSR set to: 0
  2512                           ;doprnt.c: 1318: break;
  2513  0002A0  0100               	movlb	0	; () banked
  2514  0002A2  2BA5               	incf	printf@c& (0+255),f,b
  2515  0002A4  D7E5               	goto	l3593
  2516  0002A6                     l3607:
  2517                           
  2518                           ; BSR set to: 0
  2519  0002A6  0100               	movlb	0	; () banked
  2520  0002A8  51A2               	movf	printf@flag& (0+255),w,b
  2521  0002AA  0BC0               	andlw	192
  2522                           
  2523                           ; Switch size 1, requested type "space"
  2524                           ; Number of cases is 3, Range of values is 0 to 192
  2525                           ; switch strategies available:
  2526                           ; Name         Instructions Cycles
  2527                           ; simple_byte           10     6 (average)
  2528                           ;	Chosen strategy is simple_byte
  2529  0002AC  0A00               	xorlw	0	; case 0
  2530  0002AE  B4D8               	btfsc	status,2,c
  2531  0002B0  D7BE               	goto	l3577
  2532  0002B2  0A80               	xorlw	128	; case 128
  2533  0002B4  B4D8               	btfsc	status,2,c
  2534  0002B6  D7D9               	goto	l3591
  2535  0002B8  0A40               	xorlw	64	; case 192
  2536  0002BA  B4D8               	btfsc	status,2,c
  2537  0002BC  D7B8               	goto	l3577
  2538  0002BE                     l3609:
  2539                           
  2540                           ; BSR set to: 0
  2541                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2542  0002BE  0100               	movlb	0	; () banked
  2543  0002C0  51A3               	movf	printf@width& (0+255),w,b
  2544  0002C2  0100               	movlb	0	; () banked
  2545  0002C4  11A4               	iorwf	(printf@width+1)& (0+255),w,b
  2546  0002C6  B4D8               	btfsc	status,2,c
  2547  0002C8  D00B               	goto	l3615
  2548                           
  2549                           ; BSR set to: 0
  2550  0002CA  C0A2  F094         	movff	printf@flag,??_printf
  2551  0002CE  0E03               	movlw	3
  2552  0002D0  0100               	movlb	0	; () banked
  2553  0002D2  1794               	andwf	??_printf& (0+255),f,b
  2554  0002D4  B4D8               	btfsc	status,2,c
  2555  0002D6  D004               	goto	l3615
  2556                           
  2557                           ; BSR set to: 0
  2558                           ;doprnt.c: 1346: width--;
  2559  0002D8  0100               	movlb	0	; () banked
  2560  0002DA  07A3               	decf	printf@width& (0+255),f,b
  2561  0002DC  A0D8               	btfss	status,0,c
  2562  0002DE  07A4               	decf	(printf@width+1)& (0+255),f,b
  2563  0002E0                     l3615:
  2564                           
  2565                           ; BSR set to: 0
  2566                           ;doprnt.c: 1381: if(width > c)
  2567  0002E0  0E80               	movlw	128
  2568  0002E2  0100               	movlb	0	; () banked
  2569  0002E4  BFA5               	btfsc	printf@c& (0+255),7,b
  2570  0002E6  0E7F               	movlw	127
  2571  0002E8  0100               	movlb	0	; () banked
  2572  0002EA  6F94               	movwf	??_printf& (0+255),b
  2573  0002EC  0100               	movlb	0	; () banked
  2574  0002EE  51A3               	movf	printf@width& (0+255),w,b
  2575  0002F0  0100               	movlb	0	; () banked
  2576  0002F2  5DA5               	subwf	printf@c& (0+255),w,b
  2577  0002F4  0100               	movlb	0	; () banked
  2578  0002F6  51A4               	movf	(printf@width+1)& (0+255),w,b
  2579  0002F8  0A80               	xorlw	128
  2580  0002FA  0100               	movlb	0	; () banked
  2581  0002FC  5994               	subwfb	??_printf& (0+255),w,b
  2582  0002FE  B0D8               	btfsc	status,0,c
  2583  000300  D00B               	goto	l3619
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;doprnt.c: 1382: width -= c;
  2587  000302  0100               	movlb	0	; () banked
  2588  000304  51A5               	movf	printf@c& (0+255),w,b
  2589  000306  0100               	movlb	0	; () banked
  2590  000308  5FA3               	subwf	printf@width& (0+255),f,b
  2591  00030A  0E00               	movlw	0
  2592  00030C  0100               	movlb	0	; () banked
  2593  00030E  BFA5               	btfsc	printf@c& (0+255),7,b
  2594  000310  0EFF               	movlw	255
  2595  000312  0100               	movlb	0	; () banked
  2596  000314  5BA4               	subwfb	(printf@width+1)& (0+255),f,b
  2597  000316  D005               	goto	l3621
  2598  000318                     l3619:
  2599                           
  2600                           ; BSR set to: 0
  2601                           ;doprnt.c: 1383: else
  2602                           ;doprnt.c: 1384: width = 0;
  2603  000318  0E00               	movlw	0
  2604  00031A  0100               	movlb	0	; () banked
  2605  00031C  6FA4               	movwf	(printf@width+1)& (0+255),b
  2606  00031E  0E00               	movlw	0
  2607  000320  6FA3               	movwf	printf@width& (0+255),b
  2608  000322                     l3621:
  2609                           
  2610                           ; BSR set to: 0
  2611                           ;doprnt.c: 1387: if(flag & 0x04) {
  2612  000322  0100               	movlb	0	; () banked
  2613  000324  A5A2               	btfss	printf@flag& (0+255),2,b
  2614  000326  D018               	goto	l3633
  2615                           
  2616                           ; BSR set to: 0
  2617                           ;doprnt.c: 1392: if(flag & 0x03)
  2618  000328  C0A2  F094         	movff	printf@flag,??_printf
  2619  00032C  0E03               	movlw	3
  2620  00032E  0100               	movlb	0	; () banked
  2621  000330  1794               	andwf	??_printf& (0+255),f,b
  2622  000332  B4D8               	btfsc	status,2,c
  2623  000334  D003               	goto	l3627
  2624                           
  2625                           ; BSR set to: 0
  2626                           ;doprnt.c: 1393: (putch('-') );
  2627  000336  0E2D               	movlw	45
  2628  000338  EC64  F011         	call	_putch
  2629  00033C                     l3627:
  2630                           
  2631                           ;doprnt.c: 1415: if(width)
  2632  00033C  0100               	movlb	0	; () banked
  2633  00033E  51A3               	movf	printf@width& (0+255),w,b
  2634  000340  0100               	movlb	0	; () banked
  2635  000342  11A4               	iorwf	(printf@width+1)& (0+255),w,b
  2636  000344  B4D8               	btfsc	status,2,c
  2637  000346  D025               	goto	l3643
  2638                           
  2639                           ; BSR set to: 0
  2640                           ;doprnt.c: 1417: (putch('0') );
  2641                           
  2642                           ; BSR set to: 0
  2643                           
  2644                           ;doprnt.c: 1416: do
  2645  000348  0E30               	movlw	48
  2646  00034A  EC64  F011         	call	_putch
  2647                           
  2648                           ;doprnt.c: 1418: while(--width);
  2649  00034E  0100               	movlb	0	; () banked
  2650  000350  07A3               	decf	printf@width& (0+255),f,b
  2651  000352  A0D8               	btfss	status,0,c
  2652  000354  07A4               	decf	(printf@width+1)& (0+255),f,b
  2653  000356  D7F2               	goto	l3627
  2654  000358                     l3633:
  2655                           
  2656                           ; BSR set to: 0
  2657                           ;doprnt.c: 1422: {
  2658                           ;doprnt.c: 1424: if(width
  2659                           ;doprnt.c: 1428: )
  2660  000358  0100               	movlb	0	; () banked
  2661  00035A  51A3               	movf	printf@width& (0+255),w,b
  2662  00035C  0100               	movlb	0	; () banked
  2663  00035E  11A4               	iorwf	(printf@width+1)& (0+255),w,b
  2664  000360  B4D8               	btfsc	status,2,c
  2665  000362  D00D               	goto	l3639
  2666  000364                     l3635:
  2667                           
  2668                           ; BSR set to: 0
  2669                           ;doprnt.c: 1430: (putch(' ') );
  2670  000364  0E20               	movlw	32
  2671  000366  EC64  F011         	call	_putch
  2672                           
  2673                           ;doprnt.c: 1431: while(--width);
  2674  00036A  0100               	movlb	0	; () banked
  2675  00036C  07A3               	decf	printf@width& (0+255),f,b
  2676  00036E  A0D8               	btfss	status,0,c
  2677  000370  07A4               	decf	(printf@width+1)& (0+255),f,b
  2678  000372  0100               	movlb	0	; () banked
  2679  000374  51A3               	movf	printf@width& (0+255),w,b
  2680  000376  0100               	movlb	0	; () banked
  2681  000378  11A4               	iorwf	(printf@width+1)& (0+255),w,b
  2682  00037A  A4D8               	btfss	status,2,c
  2683  00037C  D7F3               	goto	l3635
  2684  00037E                     l3639:
  2685                           
  2686                           ; BSR set to: 0
  2687                           ;doprnt.c: 1438: if(flag & 0x03)
  2688  00037E  C0A2  F094         	movff	printf@flag,??_printf
  2689  000382  0E03               	movlw	3
  2690  000384  0100               	movlb	0	; () banked
  2691  000386  1794               	andwf	??_printf& (0+255),f,b
  2692  000388  B4D8               	btfsc	status,2,c
  2693  00038A  D003               	goto	l3643
  2694                           
  2695                           ; BSR set to: 0
  2696                           ;doprnt.c: 1439: (putch('-') );
  2697  00038C  0E2D               	movlw	45
  2698  00038E  EC64  F011         	call	_putch
  2699  000392                     l3643:
  2700                           
  2701                           ;doprnt.c: 1469: }
  2702                           ;doprnt.c: 1472: prec = c;
  2703  000392  C0A5  F09F         	movff	printf@c,printf@prec
  2704                           
  2705                           ;doprnt.c: 1474: while(prec--) {
  2706  000396  D05D               	goto	l3657
  2707  000398                     l3645:
  2708                           
  2709                           ;doprnt.c: 1486: case 0xC0:
  2710                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2711  000398  0100               	movlb	0	; () banked
  2712  00039A  519F               	movf	printf@prec& (0+255),w,b
  2713  00039C  0D02               	mullw	2
  2714  00039E  0EC9               	movlw	low _dpowers
  2715  0003A0  24F3               	addwf	prodl,w,c
  2716  0003A2  6EF6               	movwf	tblptrl,c
  2717  0003A4  0EFD               	movlw	high _dpowers
  2718  0003A6  20F4               	addwfc	prodh,w,c
  2719  0003A8  6EF7               	movwf	tblptrh,c
  2720  0003AA                     	if	0	;There are less than 3 active tblptr bytes
  2721  0003AA                     	endif
  2722  0003AA  0009               	tblrd		*+
  2723  0003AC  CFF5 F082          	movff	tablat,___lwdiv@divisor
  2724  0003B0  000A               	tblrd		*-
  2725  0003B2  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  2726  0003B6  C0A0  F080         	movff	printf@val,___lwdiv@dividend
  2727  0003BA  C0A1  F081         	movff	printf@val+1,___lwdiv@dividend+1
  2728  0003BE  EC8A  F00C         	call	___lwdiv	;wreg free
  2729  0003C2  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  2730  0003C6  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  2731  0003CA  0E00               	movlw	0
  2732  0003CC  0100               	movlb	0	; () banked
  2733  0003CE  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  2734  0003D0  0E0A               	movlw	10
  2735  0003D2  6F89               	movwf	___lwmod@divisor& (0+255),b
  2736  0003D4  EC52  F00E         	call	___lwmod	;wreg free
  2737  0003D8  0100               	movlb	0	; () banked
  2738  0003DA  5187               	movf	?___lwmod& (0+255),w,b
  2739  0003DC  0F30               	addlw	48
  2740  0003DE  0100               	movlb	0	; () banked
  2741  0003E0  6FA5               	movwf	printf@c& (0+255),b
  2742                           
  2743                           ;doprnt.c: 1491: break;
  2744  0003E2  D033               	goto	l3655
  2745  0003E4                     l3647:
  2746                           
  2747                           ; BSR set to: 0
  2748                           ;doprnt.c: 1499: {
  2749                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2750  0003E4  C0A0  F080         	movff	printf@val,___lwdiv@dividend
  2751  0003E8  C0A1  F081         	movff	printf@val+1,___lwdiv@dividend+1
  2752  0003EC  0100               	movlb	0	; () banked
  2753  0003EE  519F               	movf	printf@prec& (0+255),w,b
  2754  0003F0  0D02               	mullw	2
  2755  0003F2  0ED3               	movlw	low _hexpowers
  2756  0003F4  24F3               	addwf	prodl,w,c
  2757  0003F6  6EF6               	movwf	tblptrl,c
  2758  0003F8  0EFD               	movlw	high _hexpowers
  2759  0003FA  20F4               	addwfc	prodh,w,c
  2760  0003FC  6EF7               	movwf	tblptrh,c
  2761  0003FE                     	if	0	;There are less than 3 active tblptr bytes
  2762  0003FE                     	endif
  2763  0003FE  0009               	tblrd		*+
  2764  000400  CFF5 F082          	movff	tablat,___lwdiv@divisor
  2765  000404  000A               	tblrd		*-
  2766  000406  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  2767  00040A  EC8A  F00C         	call	___lwdiv	;wreg free
  2768  00040E  0100               	movlb	0	; () banked
  2769  000410  5180               	movf	?___lwdiv& (0+255),w,b
  2770  000412  0B0F               	andlw	15
  2771  000414  0100               	movlb	0	; () banked
  2772  000416  6F9A               	movwf	printf@idx& (0+255),b
  2773                           
  2774                           ; BSR set to: 0
  2775                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2776  000418  0100               	movlb	0	; () banked
  2777  00041A  519A               	movf	printf@idx& (0+255),w,b
  2778  00041C  0D01               	mullw	1
  2779  00041E  0E93               	movlw	low STR_46
  2780  000420  24F3               	addwf	prodl,w,c
  2781  000422  6EF6               	movwf	tblptrl,c
  2782  000424  0EFF               	movlw	high STR_46
  2783  000426  20F4               	addwfc	prodh,w,c
  2784  000428  6EF7               	movwf	tblptrh,c
  2785  00042A                     	if	0	;There are less than 3 active tblptr bytes
  2786  00042A                     	endif
  2787  00042A  0008               	tblrd		*
  2788  00042C  CFF5 F0A5          	movff	tablat,printf@c
  2789                           
  2790                           ; BSR set to: 0
  2791                           ;doprnt.c: 1523: }
  2792                           
  2793                           ;doprnt.c: 1508: }
  2794                           ;doprnt.c: 1510: break;
  2795  000430  D00C               	goto	l3655
  2796  000432                     l3653:
  2797  000432  0100               	movlb	0	; () banked
  2798  000434  51A2               	movf	printf@flag& (0+255),w,b
  2799  000436  0BC0               	andlw	192
  2800                           
  2801                           ; Switch size 1, requested type "space"
  2802                           ; Number of cases is 3, Range of values is 0 to 192
  2803                           ; switch strategies available:
  2804                           ; Name         Instructions Cycles
  2805                           ; simple_byte           10     6 (average)
  2806                           ;	Chosen strategy is simple_byte
  2807  000438  0A00               	xorlw	0	; case 0
  2808  00043A  B4D8               	btfsc	status,2,c
  2809  00043C  D7AD               	goto	l3645
  2810  00043E  0A80               	xorlw	128	; case 128
  2811  000440  B4D8               	btfsc	status,2,c
  2812  000442  D7D0               	goto	l3647
  2813  000444  0A40               	xorlw	64	; case 192
  2814  000446  B4D8               	btfsc	status,2,c
  2815  000448  D7A7               	goto	l3645
  2816  00044A                     l3655:
  2817                           
  2818                           ; BSR set to: 0
  2819                           ;doprnt.c: 1524: (putch(c) );
  2820  00044A  0100               	movlb	0	; () banked
  2821  00044C  51A5               	movf	printf@c& (0+255),w,b
  2822  00044E  EC64  F011         	call	_putch
  2823  000452                     l3657:
  2824  000452  0100               	movlb	0	; () banked
  2825  000454  079F               	decf	printf@prec& (0+255),f,b
  2826  000456  0100               	movlb	0	; () banked
  2827  000458  299F               	incf	printf@prec& (0+255),w,b
  2828  00045A  A4D8               	btfss	status,2,c
  2829  00045C  D7EA               	goto	l3653
  2830  00045E                     l3659:
  2831  00045E  C08C  FFF6         	movff	printf@f,tblptrl
  2832  000462  C08D  FFF7         	movff	printf@f+1,tblptrh
  2833  000466  0100               	movlb	0	; () banked
  2834  000468  4B8C               	infsnz	printf@f& (0+255),f,b
  2835  00046A  2B8D               	incf	(printf@f+1)& (0+255),f,b
  2836  00046C                     	if	0	;tblptru may be non-zero
  2837  00046C                     	endif
  2838  00046C                     	if	0	;tblptru may be non-zero
  2839  00046C                     	endif
  2840  00046C  0008               	tblrd		*
  2841  00046E  CFF5 F0A5          	movff	tablat,printf@c
  2842  000472  0100               	movlb	0	; () banked
  2843  000474  51A5               	movf	printf@c& (0+255),w,b
  2844  000476  B4D8               	btfsc	status,2,c
  2845  000478  0012               	return	
  2846  00047A  D5D2               	goto	l3509
  2847  00047C                     __end_of_printf:
  2848                           	opt stack 0
  2849                           tblptru	equ	0xFF8
  2850                           tblptrh	equ	0xFF7
  2851                           tblptrl	equ	0xFF6
  2852                           tablat	equ	0xFF5
  2853                           prodh	equ	0xFF4
  2854                           prodl	equ	0xFF3
  2855                           postinc0	equ	0xFEE
  2856                           wreg	equ	0xFE8
  2857                           indf2	equ	0xFDF
  2858                           postinc2	equ	0xFDE
  2859                           postdec2	equ	0xFDD
  2860                           fsr2h	equ	0xFDA
  2861                           fsr2l	equ	0xFD9
  2862                           status	equ	0xFD8
  2863                           
  2864 ;; *************** function _putch *****************
  2865 ;; Defined at:
  2866 ;;		line 25 in file "lcd.c"
  2867 ;; Parameters:    Size  Location     Type
  2868 ;;  data            1    wreg     unsigned char 
  2869 ;; Auto vars:     Size  Location     Type
  2870 ;;  data            1    2[BANK0 ] unsigned char 
  2871 ;; Return value:  Size  Location     Type
  2872 ;;                  1    wreg      void 
  2873 ;; Registers used:
  2874 ;;		wreg, status,2, status,0, cstack
  2875 ;; Tracked objects:
  2876 ;;		On entry : 0/0
  2877 ;;		On exit  : 0/0
  2878 ;;		Unchanged: 0/0
  2879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2881 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2883 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2884 ;;Total ram usage:        1 bytes
  2885 ;; Hardware stack levels used:    1
  2886 ;; Hardware stack levels required when called:    8
  2887 ;; This function calls:
  2888 ;;		_lcdNibble
  2889 ;; This function is called by:
  2890 ;;		_printf
  2891 ;; This function uses a non-reentrant model
  2892 ;;
  2893                           
  2894                           	psect	text5
  2895  0022C8                     __ptext5:
  2896                           	opt stack 0
  2897  0022C8                     _putch:
  2898                           	opt stack 20
  2899                           
  2900                           ;incstack = 0
  2901                           ;putch@data stored from wreg
  2902  0022C8  0100               	movlb	0	; () banked
  2903  0022CA  6F82               	movwf	putch@data& (0+255),b
  2904                           
  2905                           ;lcd.c: 26: LATDbits.LATD2 = 1;
  2906  0022CC  848C               	bsf	3980,2,c	;volatile
  2907                           
  2908                           ;lcd.c: 27: lcdNibble(data);
  2909  0022CE  0100               	movlb	0	; () banked
  2910  0022D0  5182               	movf	putch@data& (0+255),w,b
  2911  0022D2  EC1E  F00E         	call	_lcdNibble
  2912  0022D6  0012               	return		;funcret
  2913  0022D8                     __end_of_putch:
  2914                           	opt stack 0
  2915                           tblptru	equ	0xFF8
  2916                           tblptrh	equ	0xFF7
  2917                           tblptrl	equ	0xFF6
  2918                           tablat	equ	0xFF5
  2919                           prodh	equ	0xFF4
  2920                           prodl	equ	0xFF3
  2921                           postinc0	equ	0xFEE
  2922                           wreg	equ	0xFE8
  2923                           indf2	equ	0xFDF
  2924                           postinc2	equ	0xFDE
  2925                           postdec2	equ	0xFDD
  2926                           fsr2h	equ	0xFDA
  2927                           fsr2l	equ	0xFD9
  2928                           status	equ	0xFD8
  2929                           
  2930 ;; *************** function _isdigit *****************
  2931 ;; Defined at:
  2932 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  2933 ;; Parameters:    Size  Location     Type
  2934 ;;  c               1    wreg     unsigned char 
  2935 ;; Auto vars:     Size  Location     Type
  2936 ;;  c               1    2[BANK0 ] unsigned char 
  2937 ;; Return value:  Size  Location     Type
  2938 ;;		None               void
  2939 ;; Registers used:
  2940 ;;		wreg, status,2, status,0
  2941 ;; Tracked objects:
  2942 ;;		On entry : 0/0
  2943 ;;		On exit  : 0/0
  2944 ;;		Unchanged: 0/0
  2945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2947 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2948 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2949 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2950 ;;Total ram usage:        3 bytes
  2951 ;; Hardware stack levels used:    1
  2952 ;; Hardware stack levels required when called:    7
  2953 ;; This function calls:
  2954 ;;		Nothing
  2955 ;; This function is called by:
  2956 ;;		_printf
  2957 ;; This function uses a non-reentrant model
  2958 ;;
  2959                           
  2960                           	psect	text6
  2961  0020E6                     __ptext6:
  2962                           	opt stack 0
  2963  0020E6                     _isdigit:
  2964                           	opt stack 21
  2965                           
  2966                           ;incstack = 0
  2967                           ;isdigit@c stored from wreg
  2968  0020E6  0100               	movlb	0	; () banked
  2969  0020E8  6F82               	movwf	isdigit@c& (0+255),b
  2970  0020EA  0E00               	movlw	0
  2971  0020EC  0100               	movlb	0	; () banked
  2972  0020EE  6F81               	movwf	_isdigit$1054& (0+255),b
  2973                           
  2974                           ; BSR set to: 0
  2975  0020F0  0E3A               	movlw	58
  2976  0020F2  0100               	movlb	0	; () banked
  2977  0020F4  6182               	cpfslt	isdigit@c& (0+255),b
  2978  0020F6  D007               	goto	l3365
  2979                           
  2980                           ; BSR set to: 0
  2981  0020F8  0E2F               	movlw	47
  2982  0020FA  0100               	movlb	0	; () banked
  2983  0020FC  6582               	cpfsgt	isdigit@c& (0+255),b
  2984  0020FE  D003               	goto	l3365
  2985                           
  2986                           ; BSR set to: 0
  2987  002100  0E01               	movlw	1
  2988  002102  0100               	movlb	0	; () banked
  2989  002104  6F81               	movwf	_isdigit$1054& (0+255),b
  2990  002106                     l3365:
  2991                           
  2992                           ; BSR set to: 0
  2993  002106  C081  F080         	movff	_isdigit$1054,??_isdigit
  2994  00210A  0100               	movlb	0	; () banked
  2995  00210C  3180               	rrcf	??_isdigit& (0+255),w,b
  2996  00210E  0012               	return	
  2997  002110                     __end_of_isdigit:
  2998                           	opt stack 0
  2999                           tblptru	equ	0xFF8
  3000                           tblptrh	equ	0xFF7
  3001                           tblptrl	equ	0xFF6
  3002                           tablat	equ	0xFF5
  3003                           prodh	equ	0xFF4
  3004                           prodl	equ	0xFF3
  3005                           postinc0	equ	0xFEE
  3006                           wreg	equ	0xFE8
  3007                           indf2	equ	0xFDF
  3008                           postinc2	equ	0xFDE
  3009                           postdec2	equ	0xFDD
  3010                           fsr2h	equ	0xFDA
  3011                           fsr2l	equ	0xFD9
  3012                           status	equ	0xFD8
  3013                           
  3014 ;; *************** function ___wmul *****************
  3015 ;; Defined at:
  3016 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  3017 ;; Parameters:    Size  Location     Type
  3018 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3019 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3020 ;; Auto vars:     Size  Location     Type
  3021 ;;  product         2    4[BANK0 ] unsigned int 
  3022 ;; Return value:  Size  Location     Type
  3023 ;;                  2    0[BANK0 ] unsigned int 
  3024 ;; Registers used:
  3025 ;;		wreg, status,2, status,0, prodl, prodh
  3026 ;; Tracked objects:
  3027 ;;		On entry : 0/0
  3028 ;;		On exit  : 0/0
  3029 ;;		Unchanged: 0/0
  3030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3031 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3032 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3034 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3035 ;;Total ram usage:        6 bytes
  3036 ;; Hardware stack levels used:    1
  3037 ;; Hardware stack levels required when called:    7
  3038 ;; This function calls:
  3039 ;;		Nothing
  3040 ;; This function is called by:
  3041 ;;		_printf
  3042 ;; This function uses a non-reentrant model
  3043 ;;
  3044                           
  3045                           	psect	text7
  3046  002082                     __ptext7:
  3047                           	opt stack 0
  3048  002082                     ___wmul:
  3049                           	opt stack 21
  3050                           
  3051                           ; BSR set to: 0
  3052                           ;incstack = 0
  3053  002082  0100               	movlb	0	; () banked
  3054  002084  5180               	movf	___wmul@multiplier& (0+255),w,b
  3055  002086  0100               	movlb	0	; () banked
  3056  002088  0382               	mulwf	___wmul@multiplicand& (0+255),b
  3057  00208A  CFF3 F084          	movff	prodl,___wmul@product
  3058  00208E  CFF4 F085          	movff	prodh,___wmul@product+1
  3059  002092  0100               	movlb	0	; () banked
  3060  002094  5180               	movf	___wmul@multiplier& (0+255),w,b
  3061  002096  0100               	movlb	0	; () banked
  3062  002098  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  3063  00209A  50F3               	movf	prodl,w,c
  3064  00209C  0100               	movlb	0	; () banked
  3065  00209E  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  3066  0020A0  0100               	movlb	0	; () banked
  3067  0020A2  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  3068  0020A4  0100               	movlb	0	; () banked
  3069  0020A6  0382               	mulwf	___wmul@multiplicand& (0+255),b
  3070  0020A8  50F3               	movf	prodl,w,c
  3071  0020AA  0100               	movlb	0	; () banked
  3072  0020AC  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  3073                           
  3074                           ; BSR set to: 0
  3075  0020AE  C084  F080         	movff	___wmul@product,?___wmul
  3076  0020B2  C085  F081         	movff	___wmul@product+1,?___wmul+1
  3077  0020B6  0012               	return	
  3078  0020B8                     __end_of___wmul:
  3079                           	opt stack 0
  3080                           tblptru	equ	0xFF8
  3081                           tblptrh	equ	0xFF7
  3082                           tblptrl	equ	0xFF6
  3083                           tablat	equ	0xFF5
  3084                           prodh	equ	0xFF4
  3085                           prodl	equ	0xFF3
  3086                           postinc0	equ	0xFEE
  3087                           wreg	equ	0xFE8
  3088                           indf2	equ	0xFDF
  3089                           postinc2	equ	0xFDE
  3090                           postdec2	equ	0xFDD
  3091                           fsr2h	equ	0xFDA
  3092                           fsr2l	equ	0xFD9
  3093                           status	equ	0xFD8
  3094                           
  3095 ;; *************** function ___lwmod *****************
  3096 ;; Defined at:
  3097 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  3098 ;; Parameters:    Size  Location     Type
  3099 ;;  dividend        2    7[BANK0 ] unsigned int 
  3100 ;;  divisor         2    9[BANK0 ] unsigned int 
  3101 ;; Auto vars:     Size  Location     Type
  3102 ;;  counter         1   11[BANK0 ] unsigned char 
  3103 ;; Return value:  Size  Location     Type
  3104 ;;                  2    7[BANK0 ] unsigned int 
  3105 ;; Registers used:
  3106 ;;		wreg, status,2, status,0
  3107 ;; Tracked objects:
  3108 ;;		On entry : 0/0
  3109 ;;		On exit  : 0/0
  3110 ;;		Unchanged: 0/0
  3111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3112 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3113 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3114 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3115 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3116 ;;Total ram usage:        5 bytes
  3117 ;; Hardware stack levels used:    1
  3118 ;; Hardware stack levels required when called:    7
  3119 ;; This function calls:
  3120 ;;		Nothing
  3121 ;; This function is called by:
  3122 ;;		_printf
  3123 ;; This function uses a non-reentrant model
  3124 ;;
  3125                           
  3126                           	psect	text8
  3127  001CA4                     __ptext8:
  3128                           	opt stack 0
  3129  001CA4                     ___lwmod:
  3130                           	opt stack 21
  3131                           
  3132                           ; BSR set to: 0
  3133                           ;incstack = 0
  3134  001CA4  0100               	movlb	0	; () banked
  3135  001CA6  5189               	movf	___lwmod@divisor& (0+255),w,b
  3136  001CA8  0100               	movlb	0	; () banked
  3137  001CAA  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  3138  001CAC  B4D8               	btfsc	status,2,c
  3139  001CAE  D026               	goto	l954
  3140                           
  3141                           ; BSR set to: 0
  3142  001CB0  0E01               	movlw	1
  3143  001CB2  0100               	movlb	0	; () banked
  3144  001CB4  6F8B               	movwf	___lwmod@counter& (0+255),b
  3145  001CB6  D006               	goto	l3425
  3146  001CB8                     l3423:
  3147                           
  3148                           ; BSR set to: 0
  3149  001CB8  0100               	movlb	0	; () banked
  3150  001CBA  90D8               	bcf	status,0,c
  3151  001CBC  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  3152  001CBE  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  3153  001CC0  0100               	movlb	0	; () banked
  3154  001CC2  2B8B               	incf	___lwmod@counter& (0+255),f,b
  3155  001CC4                     l3425:
  3156                           
  3157                           ; BSR set to: 0
  3158  001CC4  0100               	movlb	0	; () banked
  3159  001CC6  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  3160  001CC8  D7F7               	goto	l3423
  3161  001CCA                     l3427:
  3162                           
  3163                           ; BSR set to: 0
  3164  001CCA  0100               	movlb	0	; () banked
  3165  001CCC  5189               	movf	___lwmod@divisor& (0+255),w,b
  3166  001CCE  0100               	movlb	0	; () banked
  3167  001CD0  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  3168  001CD2  0100               	movlb	0	; () banked
  3169  001CD4  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3170  001CD6  0100               	movlb	0	; () banked
  3171  001CD8  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  3172  001CDA  A0D8               	btfss	status,0,c
  3173  001CDC  D008               	goto	l3431
  3174                           
  3175                           ; BSR set to: 0
  3176  001CDE  0100               	movlb	0	; () banked
  3177  001CE0  5189               	movf	___lwmod@divisor& (0+255),w,b
  3178  001CE2  0100               	movlb	0	; () banked
  3179  001CE4  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  3180  001CE6  0100               	movlb	0	; () banked
  3181  001CE8  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3182  001CEA  0100               	movlb	0	; () banked
  3183  001CEC  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  3184  001CEE                     l3431:
  3185                           
  3186                           ; BSR set to: 0
  3187  001CEE  0100               	movlb	0	; () banked
  3188  001CF0  90D8               	bcf	status,0,c
  3189  001CF2  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  3190  001CF4  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  3191                           
  3192                           ; BSR set to: 0
  3193  001CF6  0100               	movlb	0	; () banked
  3194  001CF8  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  3195  001CFA  D7E7               	goto	l3427
  3196  001CFC                     l954:
  3197                           
  3198                           ; BSR set to: 0
  3199  001CFC  C087  F087         	movff	___lwmod@dividend,?___lwmod
  3200  001D00  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  3201                           
  3202                           ; BSR set to: 0
  3203  001D04  0012               	return		;funcret
  3204  001D06                     __end_of___lwmod:
  3205                           	opt stack 0
  3206                           tblptru	equ	0xFF8
  3207                           tblptrh	equ	0xFF7
  3208                           tblptrl	equ	0xFF6
  3209                           tablat	equ	0xFF5
  3210                           prodh	equ	0xFF4
  3211                           prodl	equ	0xFF3
  3212                           postinc0	equ	0xFEE
  3213                           wreg	equ	0xFE8
  3214                           indf2	equ	0xFDF
  3215                           postinc2	equ	0xFDE
  3216                           postdec2	equ	0xFDD
  3217                           fsr2h	equ	0xFDA
  3218                           fsr2l	equ	0xFD9
  3219                           status	equ	0xFD8
  3220                           
  3221 ;; *************** function ___lwdiv *****************
  3222 ;; Defined at:
  3223 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  3224 ;; Parameters:    Size  Location     Type
  3225 ;;  dividend        2    0[BANK0 ] unsigned int 
  3226 ;;  divisor         2    2[BANK0 ] unsigned int 
  3227 ;; Auto vars:     Size  Location     Type
  3228 ;;  quotient        2    4[BANK0 ] unsigned int 
  3229 ;;  counter         1    6[BANK0 ] unsigned char 
  3230 ;; Return value:  Size  Location     Type
  3231 ;;                  2    0[BANK0 ] unsigned int 
  3232 ;; Registers used:
  3233 ;;		wreg, status,2, status,0
  3234 ;; Tracked objects:
  3235 ;;		On entry : 0/0
  3236 ;;		On exit  : 0/0
  3237 ;;		Unchanged: 0/0
  3238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3239 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3240 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3242 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3243 ;;Total ram usage:        7 bytes
  3244 ;; Hardware stack levels used:    1
  3245 ;; Hardware stack levels required when called:    7
  3246 ;; This function calls:
  3247 ;;		Nothing
  3248 ;; This function is called by:
  3249 ;;		_printf
  3250 ;; This function uses a non-reentrant model
  3251 ;;
  3252                           
  3253                           	psect	text9
  3254  001914                     __ptext9:
  3255                           	opt stack 0
  3256  001914                     ___lwdiv:
  3257                           	opt stack 21
  3258                           
  3259                           ; BSR set to: 0
  3260                           ;incstack = 0
  3261  001914  0E00               	movlw	0
  3262  001916  0100               	movlb	0	; () banked
  3263  001918  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
  3264  00191A  0E00               	movlw	0
  3265  00191C  6F84               	movwf	___lwdiv@quotient& (0+255),b
  3266                           
  3267                           ; BSR set to: 0
  3268  00191E  0100               	movlb	0	; () banked
  3269  001920  5182               	movf	___lwdiv@divisor& (0+255),w,b
  3270  001922  0100               	movlb	0	; () banked
  3271  001924  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  3272  001926  B4D8               	btfsc	status,2,c
  3273  001928  D02C               	goto	l944
  3274                           
  3275                           ; BSR set to: 0
  3276  00192A  0E01               	movlw	1
  3277  00192C  0100               	movlb	0	; () banked
  3278  00192E  6F86               	movwf	___lwdiv@counter& (0+255),b
  3279  001930  D006               	goto	l3405
  3280  001932                     l3403:
  3281                           
  3282                           ; BSR set to: 0
  3283  001932  0100               	movlb	0	; () banked
  3284  001934  90D8               	bcf	status,0,c
  3285  001936  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  3286  001938  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  3287  00193A  0100               	movlb	0	; () banked
  3288  00193C  2B86               	incf	___lwdiv@counter& (0+255),f,b
  3289  00193E                     l3405:
  3290                           
  3291                           ; BSR set to: 0
  3292  00193E  0100               	movlb	0	; () banked
  3293  001940  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  3294  001942  D7F7               	goto	l3403
  3295  001944                     l3407:
  3296                           
  3297                           ; BSR set to: 0
  3298  001944  0100               	movlb	0	; () banked
  3299  001946  90D8               	bcf	status,0,c
  3300  001948  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
  3301  00194A  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  3302                           
  3303                           ; BSR set to: 0
  3304  00194C  0100               	movlb	0	; () banked
  3305  00194E  5182               	movf	___lwdiv@divisor& (0+255),w,b
  3306  001950  0100               	movlb	0	; () banked
  3307  001952  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  3308  001954  0100               	movlb	0	; () banked
  3309  001956  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3310  001958  0100               	movlb	0	; () banked
  3311  00195A  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  3312  00195C  A0D8               	btfss	status,0,c
  3313  00195E  D00A               	goto	l3415
  3314                           
  3315                           ; BSR set to: 0
  3316  001960  0100               	movlb	0	; () banked
  3317  001962  5182               	movf	___lwdiv@divisor& (0+255),w,b
  3318  001964  0100               	movlb	0	; () banked
  3319  001966  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  3320  001968  0100               	movlb	0	; () banked
  3321  00196A  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3322  00196C  0100               	movlb	0	; () banked
  3323  00196E  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  3324                           
  3325                           ; BSR set to: 0
  3326  001970  0100               	movlb	0	; () banked
  3327  001972  8184               	bsf	___lwdiv@quotient& (0+255),0,b
  3328  001974                     l3415:
  3329                           
  3330                           ; BSR set to: 0
  3331  001974  0100               	movlb	0	; () banked
  3332  001976  90D8               	bcf	status,0,c
  3333  001978  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  3334  00197A  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  3335                           
  3336                           ; BSR set to: 0
  3337  00197C  0100               	movlb	0	; () banked
  3338  00197E  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
  3339  001980  D7E1               	goto	l3407
  3340  001982                     l944:
  3341                           
  3342                           ; BSR set to: 0
  3343  001982  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
  3344  001986  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3345                           
  3346                           ; BSR set to: 0
  3347  00198A  0012               	return		;funcret
  3348  00198C                     __end_of___lwdiv:
  3349                           	opt stack 0
  3350                           tblptru	equ	0xFF8
  3351                           tblptrh	equ	0xFF7
  3352                           tblptrl	equ	0xFF6
  3353                           tablat	equ	0xFF5
  3354                           prodh	equ	0xFF4
  3355                           prodl	equ	0xFF3
  3356                           postinc0	equ	0xFEE
  3357                           wreg	equ	0xFE8
  3358                           indf2	equ	0xFDF
  3359                           postinc2	equ	0xFDE
  3360                           postdec2	equ	0xFDD
  3361                           fsr2h	equ	0xFDA
  3362                           fsr2l	equ	0xFD9
  3363                           status	equ	0xFD8
  3364                           
  3365 ;; *************** function _getTime *****************
  3366 ;; Defined at:
  3367 ;;		line 76 in file "modules.c"
  3368 ;; Parameters:    Size  Location     Type
  3369 ;;  time            2    3[BANK0 ] PTR unsigned char 
  3370 ;;		 -> time(7), 
  3371 ;; Auto vars:     Size  Location     Type
  3372 ;;  i               1    5[BANK0 ] unsigned char 
  3373 ;; Return value:  Size  Location     Type
  3374 ;;                  1    wreg      void 
  3375 ;; Registers used:
  3376 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3377 ;; Tracked objects:
  3378 ;;		On entry : 0/0
  3379 ;;		On exit  : 0/0
  3380 ;;		Unchanged: 0/0
  3381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3382 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3383 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3385 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3386 ;;Total ram usage:        3 bytes
  3387 ;; Hardware stack levels used:    1
  3388 ;; Hardware stack levels required when called:    9
  3389 ;; This function calls:
  3390 ;;		_I2C_Master_Read
  3391 ;;		_I2C_Master_Start
  3392 ;;		_I2C_Master_Stop
  3393 ;;		_I2C_Master_Write
  3394 ;; This function is called by:
  3395 ;;		_showRTC
  3396 ;; This function uses a non-reentrant model
  3397 ;;
  3398                           
  3399                           	psect	text10
  3400  001806                     __ptext10:
  3401                           	opt stack 0
  3402  001806                     _getTime:
  3403                           	opt stack 20
  3404                           
  3405                           ;modules.c: 77: (INTCONbits.GIE = 0);
  3406                           
  3407                           ; BSR set to: 0
  3408                           ;incstack = 0
  3409  001806  9EF2               	bcf	intcon,7,c	;volatile
  3410                           
  3411                           ;modules.c: 81: I2C_Master_Start();
  3412  001808  EC8E  F011         	call	_I2C_Master_Start	;wreg free
  3413                           
  3414                           ;modules.c: 82: I2C_Master_Write(0b11010000);
  3415  00180C  0E00               	movlw	0
  3416  00180E  0100               	movlb	0	; () banked
  3417  001810  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3418  001812  0ED0               	movlw	208
  3419  001814  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3420  001816  EC80  F011         	call	_I2C_Master_Write	;wreg free
  3421                           
  3422                           ;modules.c: 83: I2C_Master_Write(0x00);
  3423  00181A  0E00               	movlw	0
  3424  00181C  0100               	movlb	0	; () banked
  3425  00181E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3426  001820  0E00               	movlw	0
  3427  001822  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3428  001824  EC80  F011         	call	_I2C_Master_Write	;wreg free
  3429                           
  3430                           ;modules.c: 84: I2C_Master_Stop();
  3431  001828  EC8A  F011         	call	_I2C_Master_Stop	;wreg free
  3432                           
  3433                           ;modules.c: 87: I2C_Master_Start();
  3434  00182C  EC8E  F011         	call	_I2C_Master_Start	;wreg free
  3435                           
  3436                           ;modules.c: 88: I2C_Master_Write(0b11010001);
  3437  001830  0E00               	movlw	0
  3438  001832  0100               	movlb	0	; () banked
  3439  001834  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3440  001836  0ED1               	movlw	209
  3441  001838  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3442  00183A  EC80  F011         	call	_I2C_Master_Write	;wreg free
  3443                           
  3444                           ;modules.c: 89: for (unsigned char i = 0; i < 0x06; i++) {
  3445  00183E  0E00               	movlw	0
  3446  001840  0100               	movlb	0	; () banked
  3447  001842  6F85               	movwf	getTime@i& (0+255),b
  3448  001844                     l3723:
  3449                           
  3450                           ; BSR set to: 0
  3451  001844  0E05               	movlw	5
  3452  001846  0100               	movlb	0	; () banked
  3453  001848  6585               	cpfsgt	getTime@i& (0+255),b
  3454  00184A  D001               	goto	l3727
  3455  00184C  D012               	goto	l3733
  3456  00184E                     l3727:
  3457                           
  3458                           ; BSR set to: 0
  3459                           ;modules.c: 90: time[i] = I2C_Master_Read(1);
  3460  00184E  0100               	movlb	0	; () banked
  3461  001850  5185               	movf	getTime@i& (0+255),w,b
  3462  001852  0D01               	mullw	1
  3463  001854  50F3               	movf	prodl,w,c
  3464  001856  0100               	movlb	0	; () banked
  3465  001858  2583               	addwf	getTime@time& (0+255),w,b
  3466  00185A  6ED9               	movwf	fsr2l,c
  3467  00185C  50F4               	movf	prodh,w,c
  3468  00185E  0100               	movlb	0	; () banked
  3469  001860  2184               	addwfc	(getTime@time+1)& (0+255),w,b
  3470  001862  6EDA               	movwf	fsr2h,c
  3471  001864  0E01               	movlw	1
  3472  001866  EC5C  F010         	call	_I2C_Master_Read
  3473  00186A  6EDF               	movwf	indf2,c
  3474  00186C  0100               	movlb	0	; () banked
  3475  00186E  2B85               	incf	getTime@i& (0+255),f,b
  3476  001870  D7E9               	goto	l3723
  3477  001872                     l3733:
  3478                           
  3479                           ; BSR set to: 0
  3480                           ;modules.c: 91: }
  3481                           ;modules.c: 92: time[6] = I2C_Master_Read(0);
  3482  001872  0100               	movlb	0	; () banked
  3483  001874  EE20 F006          	lfsr	2,6
  3484  001878  5183               	movf	getTime@time& (0+255),w,b
  3485  00187A  26D9               	addwf	fsr2l,f,c
  3486  00187C  5184               	movf	(getTime@time+1)& (0+255),w,b
  3487  00187E  22DA               	addwfc	fsr2h,f,c
  3488  001880  0E00               	movlw	0
  3489  001882  EC5C  F010         	call	_I2C_Master_Read
  3490  001886  6EDF               	movwf	indf2,c
  3491                           
  3492                           ;modules.c: 93: I2C_Master_Stop();
  3493  001888  EC8A  F011         	call	_I2C_Master_Stop	;wreg free
  3494                           
  3495                           ;modules.c: 94: (INTCONbits.GIE = 1);
  3496  00188C  8EF2               	bsf	intcon,7,c	;volatile
  3497  00188E  0012               	return		;funcret
  3498  001890                     __end_of_getTime:
  3499                           	opt stack 0
  3500                           tblptru	equ	0xFF8
  3501                           tblptrh	equ	0xFF7
  3502                           tblptrl	equ	0xFF6
  3503                           tablat	equ	0xFF5
  3504                           prodh	equ	0xFF4
  3505                           prodl	equ	0xFF3
  3506                           intcon	equ	0xFF2
  3507                           postinc0	equ	0xFEE
  3508                           wreg	equ	0xFE8
  3509                           indf2	equ	0xFDF
  3510                           postinc2	equ	0xFDE
  3511                           postdec2	equ	0xFDD
  3512                           fsr2h	equ	0xFDA
  3513                           fsr2l	equ	0xFD9
  3514                           status	equ	0xFD8
  3515                           
  3516 ;; *************** function _I2C_Master_Write *****************
  3517 ;; Defined at:
  3518 ;;		line 42 in file "I2C.c"
  3519 ;; Parameters:    Size  Location     Type
  3520 ;;  d               2    1[BANK0 ] unsigned int 
  3521 ;; Auto vars:     Size  Location     Type
  3522 ;;		None
  3523 ;; Return value:  Size  Location     Type
  3524 ;;                  1    wreg      void 
  3525 ;; Registers used:
  3526 ;;		wreg, status,2, status,0, cstack
  3527 ;; Tracked objects:
  3528 ;;		On entry : 0/0
  3529 ;;		On exit  : 0/0
  3530 ;;		Unchanged: 0/0
  3531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3532 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3535 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3536 ;;Total ram usage:        2 bytes
  3537 ;; Hardware stack levels used:    1
  3538 ;; Hardware stack levels required when called:    8
  3539 ;; This function calls:
  3540 ;;		_I2C_Master_Wait
  3541 ;; This function is called by:
  3542 ;;		_getTime
  3543 ;; This function uses a non-reentrant model
  3544 ;;
  3545                           
  3546                           	psect	text11
  3547  002300                     __ptext11:
  3548                           	opt stack 0
  3549  002300                     _I2C_Master_Write:
  3550                           	opt stack 20
  3551                           
  3552                           ;I2C.c: 43: I2C_Master_Wait();
  3553                           
  3554                           ;incstack = 0
  3555  002300  EC51  F011         	call	_I2C_Master_Wait	;wreg free
  3556                           
  3557                           ;I2C.c: 44: SSPBUF = d;
  3558  002304  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  3559  002308  0012               	return		;funcret
  3560  00230A                     __end_of_I2C_Master_Write:
  3561                           	opt stack 0
  3562                           tblptru	equ	0xFF8
  3563                           tblptrh	equ	0xFF7
  3564                           tblptrl	equ	0xFF6
  3565                           tablat	equ	0xFF5
  3566                           prodh	equ	0xFF4
  3567                           prodl	equ	0xFF3
  3568                           intcon	equ	0xFF2
  3569                           postinc0	equ	0xFEE
  3570                           wreg	equ	0xFE8
  3571                           indf2	equ	0xFDF
  3572                           postinc2	equ	0xFDE
  3573                           postdec2	equ	0xFDD
  3574                           fsr2h	equ	0xFDA
  3575                           fsr2l	equ	0xFD9
  3576                           status	equ	0xFD8
  3577                           
  3578 ;; *************** function _I2C_Master_Stop *****************
  3579 ;; Defined at:
  3580 ;;		line 37 in file "I2C.c"
  3581 ;; Parameters:    Size  Location     Type
  3582 ;;		None
  3583 ;; Auto vars:     Size  Location     Type
  3584 ;;		None
  3585 ;; Return value:  Size  Location     Type
  3586 ;;                  1    wreg      void 
  3587 ;; Registers used:
  3588 ;;		wreg, status,2, status,0, cstack
  3589 ;; Tracked objects:
  3590 ;;		On entry : 0/0
  3591 ;;		On exit  : 0/0
  3592 ;;		Unchanged: 0/0
  3593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3597 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3598 ;;Total ram usage:        0 bytes
  3599 ;; Hardware stack levels used:    1
  3600 ;; Hardware stack levels required when called:    8
  3601 ;; This function calls:
  3602 ;;		_I2C_Master_Wait
  3603 ;; This function is called by:
  3604 ;;		_getTime
  3605 ;; This function uses a non-reentrant model
  3606 ;;
  3607                           
  3608                           	psect	text12
  3609  002314                     __ptext12:
  3610                           	opt stack 0
  3611  002314                     _I2C_Master_Stop:
  3612                           	opt stack 20
  3613                           
  3614                           ;I2C.c: 38: I2C_Master_Wait();
  3615                           
  3616                           ;incstack = 0
  3617  002314  EC51  F011         	call	_I2C_Master_Wait	;wreg free
  3618                           
  3619                           ;I2C.c: 39: PEN = 1;
  3620  002318  84C5               	bsf	4037,2,c	;volatile
  3621  00231A  0012               	return		;funcret
  3622  00231C                     __end_of_I2C_Master_Stop:
  3623                           	opt stack 0
  3624                           tblptru	equ	0xFF8
  3625                           tblptrh	equ	0xFF7
  3626                           tblptrl	equ	0xFF6
  3627                           tablat	equ	0xFF5
  3628                           prodh	equ	0xFF4
  3629                           prodl	equ	0xFF3
  3630                           intcon	equ	0xFF2
  3631                           postinc0	equ	0xFEE
  3632                           wreg	equ	0xFE8
  3633                           indf2	equ	0xFDF
  3634                           postinc2	equ	0xFDE
  3635                           postdec2	equ	0xFDD
  3636                           fsr2h	equ	0xFDA
  3637                           fsr2l	equ	0xFD9
  3638                           status	equ	0xFD8
  3639                           
  3640 ;; *************** function _I2C_Master_Start *****************
  3641 ;; Defined at:
  3642 ;;		line 27 in file "I2C.c"
  3643 ;; Parameters:    Size  Location     Type
  3644 ;;		None
  3645 ;; Auto vars:     Size  Location     Type
  3646 ;;		None
  3647 ;; Return value:  Size  Location     Type
  3648 ;;                  1    wreg      void 
  3649 ;; Registers used:
  3650 ;;		wreg, status,2, status,0, cstack
  3651 ;; Tracked objects:
  3652 ;;		On entry : 0/0
  3653 ;;		On exit  : 0/0
  3654 ;;		Unchanged: 0/0
  3655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3660 ;;Total ram usage:        0 bytes
  3661 ;; Hardware stack levels used:    1
  3662 ;; Hardware stack levels required when called:    8
  3663 ;; This function calls:
  3664 ;;		_I2C_Master_Wait
  3665 ;; This function is called by:
  3666 ;;		_getTime
  3667 ;; This function uses a non-reentrant model
  3668 ;;
  3669                           
  3670                           	psect	text13
  3671  00231C                     __ptext13:
  3672                           	opt stack 0
  3673  00231C                     _I2C_Master_Start:
  3674                           	opt stack 20
  3675                           
  3676                           ;I2C.c: 28: I2C_Master_Wait();
  3677                           
  3678                           ;incstack = 0
  3679  00231C  EC51  F011         	call	_I2C_Master_Wait	;wreg free
  3680                           
  3681                           ;I2C.c: 29: SEN = 1;
  3682  002320  80C5               	bsf	4037,0,c	;volatile
  3683  002322  0012               	return		;funcret
  3684  002324                     __end_of_I2C_Master_Start:
  3685                           	opt stack 0
  3686                           tblptru	equ	0xFF8
  3687                           tblptrh	equ	0xFF7
  3688                           tblptrl	equ	0xFF6
  3689                           tablat	equ	0xFF5
  3690                           prodh	equ	0xFF4
  3691                           prodl	equ	0xFF3
  3692                           intcon	equ	0xFF2
  3693                           postinc0	equ	0xFEE
  3694                           wreg	equ	0xFE8
  3695                           indf2	equ	0xFDF
  3696                           postinc2	equ	0xFDE
  3697                           postdec2	equ	0xFDD
  3698                           fsr2h	equ	0xFDA
  3699                           fsr2l	equ	0xFD9
  3700                           status	equ	0xFD8
  3701                           
  3702 ;; *************** function _I2C_Master_Read *****************
  3703 ;; Defined at:
  3704 ;;		line 47 in file "I2C.c"
  3705 ;; Parameters:    Size  Location     Type
  3706 ;;  a               1    wreg     unsigned char 
  3707 ;; Auto vars:     Size  Location     Type
  3708 ;;  a               1    1[BANK0 ] unsigned char 
  3709 ;;  temp            1    2[BANK0 ] unsigned char 
  3710 ;; Return value:  Size  Location     Type
  3711 ;;                  1    wreg      unsigned char 
  3712 ;; Registers used:
  3713 ;;		wreg, status,2, status,0, cstack
  3714 ;; Tracked objects:
  3715 ;;		On entry : 0/0
  3716 ;;		On exit  : 0/0
  3717 ;;		Unchanged: 0/0
  3718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3720 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3722 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3723 ;;Total ram usage:        2 bytes
  3724 ;; Hardware stack levels used:    1
  3725 ;; Hardware stack levels required when called:    8
  3726 ;; This function calls:
  3727 ;;		_I2C_Master_Wait
  3728 ;; This function is called by:
  3729 ;;		_getTime
  3730 ;; This function uses a non-reentrant model
  3731 ;;
  3732                           
  3733                           	psect	text14
  3734  0020B8                     __ptext14:
  3735                           	opt stack 0
  3736  0020B8                     _I2C_Master_Read:
  3737                           	opt stack 20
  3738                           
  3739                           ;incstack = 0
  3740                           ;I2C_Master_Read@a stored from wreg
  3741  0020B8  0100               	movlb	0	; () banked
  3742  0020BA  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  3743                           
  3744                           ;I2C.c: 48: unsigned char temp;
  3745                           ;I2C.c: 49: I2C_Master_Wait();
  3746  0020BC  EC51  F011         	call	_I2C_Master_Wait	;wreg free
  3747                           
  3748                           ;I2C.c: 50: RCEN = 1;
  3749  0020C0  86C5               	bsf	4037,3,c	;volatile
  3750                           
  3751                           ;I2C.c: 51: I2C_Master_Wait();
  3752  0020C2  EC51  F011         	call	_I2C_Master_Wait	;wreg free
  3753                           
  3754                           ;I2C.c: 52: temp = SSPBUF;
  3755  0020C6  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  3756                           
  3757                           ;I2C.c: 53: I2C_Master_Wait();
  3758  0020CA  EC51  F011         	call	_I2C_Master_Wait	;wreg free
  3759                           
  3760                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
  3761  0020CE  0100               	movlb	0	; () banked
  3762  0020D0  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  3763  0020D2  0100               	movlb	0	; () banked
  3764  0020D4  A4D8               	btfss	status,2,c
  3765  0020D6  D002               	goto	u2400
  3766  0020D8  8AC5               	bsf	4037,5,c	;volatile
  3767  0020DA  D001               	goto	l3283
  3768  0020DC                     u2400:
  3769  0020DC  9AC5               	bcf	4037,5,c	;volatile
  3770  0020DE                     l3283:
  3771                           
  3772                           ;I2C.c: 55: ACKEN = 1;
  3773  0020DE  88C5               	bsf	4037,4,c	;volatile
  3774                           
  3775                           ;I2C.c: 56: return temp;
  3776  0020E0  0100               	movlb	0	; () banked
  3777  0020E2  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  3778  0020E4  0012               	return	
  3779  0020E6                     __end_of_I2C_Master_Read:
  3780                           	opt stack 0
  3781                           tblptru	equ	0xFF8
  3782                           tblptrh	equ	0xFF7
  3783                           tblptrl	equ	0xFF6
  3784                           tablat	equ	0xFF5
  3785                           prodh	equ	0xFF4
  3786                           prodl	equ	0xFF3
  3787                           intcon	equ	0xFF2
  3788                           postinc0	equ	0xFEE
  3789                           wreg	equ	0xFE8
  3790                           indf2	equ	0xFDF
  3791                           postinc2	equ	0xFDE
  3792                           postdec2	equ	0xFDD
  3793                           fsr2h	equ	0xFDA
  3794                           fsr2l	equ	0xFD9
  3795                           status	equ	0xFD8
  3796                           
  3797 ;; *************** function _I2C_Master_Wait *****************
  3798 ;; Defined at:
  3799 ;;		line 23 in file "I2C.c"
  3800 ;; Parameters:    Size  Location     Type
  3801 ;;		None
  3802 ;; Auto vars:     Size  Location     Type
  3803 ;;		None
  3804 ;; Return value:  Size  Location     Type
  3805 ;;                  1    wreg      void 
  3806 ;; Registers used:
  3807 ;;		wreg, status,2, status,0
  3808 ;; Tracked objects:
  3809 ;;		On entry : 0/0
  3810 ;;		On exit  : 0/0
  3811 ;;		Unchanged: 0/0
  3812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3815 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3816 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3817 ;;Total ram usage:        1 bytes
  3818 ;; Hardware stack levels used:    1
  3819 ;; Hardware stack levels required when called:    7
  3820 ;; This function calls:
  3821 ;;		Nothing
  3822 ;; This function is called by:
  3823 ;;		_I2C_Master_Start
  3824 ;;		_I2C_Master_Stop
  3825 ;;		_I2C_Master_Write
  3826 ;;		_I2C_Master_Read
  3827 ;; This function uses a non-reentrant model
  3828 ;;
  3829                           
  3830                           	psect	text15
  3831  0022A2                     __ptext15:
  3832                           	opt stack 0
  3833  0022A2                     _I2C_Master_Wait:
  3834                           	opt stack 20
  3835  0022A2                     l375:
  3836  0022A2  B4C7               	btfsc	4039,2,c	;volatile
  3837  0022A4  D7FE               	goto	l375
  3838  0022A6  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  3839  0022AA  0E1F               	movlw	31
  3840  0022AC  0100               	movlb	0	; () banked
  3841  0022AE  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  3842  0022B0  B4D8               	btfsc	status,2,c
  3843  0022B2  0012               	return	
  3844  0022B4  D7F6               	goto	l375
  3845  0022B6                     __end_of_I2C_Master_Wait:
  3846                           	opt stack 0
  3847                           tblptru	equ	0xFF8
  3848                           tblptrh	equ	0xFF7
  3849                           tblptrl	equ	0xFF6
  3850                           tablat	equ	0xFF5
  3851                           prodh	equ	0xFF4
  3852                           prodl	equ	0xFF3
  3853                           intcon	equ	0xFF2
  3854                           postinc0	equ	0xFEE
  3855                           wreg	equ	0xFE8
  3856                           indf2	equ	0xFDF
  3857                           postinc2	equ	0xFDE
  3858                           postdec2	equ	0xFDD
  3859                           fsr2h	equ	0xFDA
  3860                           fsr2l	equ	0xFD9
  3861                           status	equ	0xFD8
  3862                           
  3863 ;; *************** function _initialize *****************
  3864 ;; Defined at:
  3865 ;;		line 23 in file "main.c"
  3866 ;; Parameters:    Size  Location     Type
  3867 ;;		None
  3868 ;; Auto vars:     Size  Location     Type
  3869 ;;		None
  3870 ;; Return value:  Size  Location     Type
  3871 ;;                  1    wreg      void 
  3872 ;; Registers used:
  3873 ;;		wreg, status,2, status,0, cstack
  3874 ;; Tracked objects:
  3875 ;;		On entry : 0/0
  3876 ;;		On exit  : 0/0
  3877 ;;		Unchanged: 0/0
  3878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3882 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3883 ;;Total ram usage:        0 bytes
  3884 ;; Hardware stack levels used:    1
  3885 ;; Hardware stack levels required when called:   10
  3886 ;; This function calls:
  3887 ;;		_I2C_Master_Init
  3888 ;;		_initLCD
  3889 ;;		_initLatest
  3890 ;;		_lcdInst
  3891 ;; This function is called by:
  3892 ;;		_main
  3893 ;; This function uses a non-reentrant model
  3894 ;;
  3895                           
  3896                           	psect	text16
  3897  001DC4                     __ptext16:
  3898                           	opt stack 0
  3899  001DC4                     _initialize:
  3900                           	opt stack 20
  3901                           
  3902                           ;main.c: 24: TRISA = 0xFF;
  3903                           
  3904                           ; BSR set to: 0
  3905                           ;incstack = 0
  3906  001DC4  6892               	setf	3986,c	;volatile
  3907                           
  3908                           ;main.c: 25: TRISB = 0xFF;
  3909  001DC6  6893               	setf	3987,c	;volatile
  3910                           
  3911                           ;main.c: 26: TRISC = 0x00;
  3912  001DC8  0E00               	movlw	0
  3913  001DCA  6E94               	movwf	3988,c	;volatile
  3914                           
  3915                           ;main.c: 27: TRISD = 0x00;
  3916  001DCC  0E00               	movlw	0
  3917  001DCE  6E95               	movwf	3989,c	;volatile
  3918                           
  3919                           ;main.c: 28: TRISE = 0x0F;
  3920  001DD0  0E0F               	movlw	15
  3921  001DD2  6E96               	movwf	3990,c	;volatile
  3922                           
  3923                           ;main.c: 30: initLCD();
  3924  001DD4  EC86  F00F         	call	_initLCD	;wreg free
  3925                           
  3926                           ;main.c: 32: LATA = 0x00;
  3927  001DD8  0E00               	movlw	0
  3928  001DDA  6E89               	movwf	3977,c	;volatile
  3929                           
  3930                           ;main.c: 33: LATB = 0x00;
  3931  001DDC  0E00               	movlw	0
  3932  001DDE  6E8A               	movwf	3978,c	;volatile
  3933                           
  3934                           ;main.c: 34: LATC = 0x00;
  3935  001DE0  0E00               	movlw	0
  3936  001DE2  6E8B               	movwf	3979,c	;volatile
  3937                           
  3938                           ;main.c: 35: LATD = 0x00;
  3939  001DE4  0E00               	movlw	0
  3940  001DE6  6E8C               	movwf	3980,c	;volatile
  3941                           
  3942                           ;main.c: 36: LATE = 0x00;
  3943  001DE8  0E00               	movlw	0
  3944  001DEA  6E8D               	movwf	3981,c	;volatile
  3945                           
  3946                           ;main.c: 38: ADCON0 = 0x00;
  3947  001DEC  0E00               	movlw	0
  3948  001DEE  6EC2               	movwf	4034,c	;volatile
  3949                           
  3950                           ;main.c: 39: ADCON1 = 0x09;
  3951  001DF0  0E09               	movlw	9
  3952  001DF2  6EC1               	movwf	4033,c	;volatile
  3953                           
  3954                           ;main.c: 40: CVRCON = 0x00;
  3955  001DF4  0E00               	movlw	0
  3956  001DF6  6EB5               	movwf	4021,c	;volatile
  3957                           
  3958                           ;main.c: 41: ADFM = 1;
  3959  001DF8  8EC0               	bsf	4032,7,c	;volatile
  3960                           
  3961                           ;main.c: 43: lcdInst(0x01);;
  3962  001DFA  0E01               	movlw	1
  3963  001DFC  EC6C  F011         	call	_lcdInst
  3964                           
  3965                           ;main.c: 45: I2C_Master_Init(10000);
  3966  001E00  0E10               	movlw	16
  3967  001E02  0100               	movlb	0	; () banked
  3968  001E04  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3969  001E06  0E27               	movlw	39
  3970  001E08  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3971  001E0A  0E00               	movlw	0
  3972  001E0C  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3973  001E0E  0E00               	movlw	0
  3974  001E10  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3975  001E12  EC83  F00E         	call	_I2C_Master_Init	;wreg free
  3976                           
  3977                           ;main.c: 48: initLatest();
  3978  001E16  ECFD  F010         	call	_initLatest	;wreg free
  3979  001E1A  0012               	return		;funcret
  3980  001E1C                     __end_of_initialize:
  3981                           	opt stack 0
  3982                           tblptru	equ	0xFF8
  3983                           tblptrh	equ	0xFF7
  3984                           tblptrl	equ	0xFF6
  3985                           tablat	equ	0xFF5
  3986                           prodh	equ	0xFF4
  3987                           prodl	equ	0xFF3
  3988                           intcon	equ	0xFF2
  3989                           postinc0	equ	0xFEE
  3990                           wreg	equ	0xFE8
  3991                           indf2	equ	0xFDF
  3992                           postinc2	equ	0xFDE
  3993                           postdec2	equ	0xFDD
  3994                           fsr2h	equ	0xFDA
  3995                           fsr2l	equ	0xFD9
  3996                           status	equ	0xFD8
  3997                           
  3998 ;; *************** function _initLatest *****************
  3999 ;; Defined at:
  4000 ;;		line 9 in file "eeprom.c"
  4001 ;; Parameters:    Size  Location     Type
  4002 ;;		None
  4003 ;; Auto vars:     Size  Location     Type
  4004 ;;		None
  4005 ;; Return value:  Size  Location     Type
  4006 ;;                  1    wreg      void 
  4007 ;; Registers used:
  4008 ;;		wreg, status,2, status,0, cstack
  4009 ;; Tracked objects:
  4010 ;;		On entry : 0/0
  4011 ;;		On exit  : 0/0
  4012 ;;		Unchanged: 0/0
  4013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4017 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4018 ;;Total ram usage:        0 bytes
  4019 ;; Hardware stack levels used:    1
  4020 ;; Hardware stack levels required when called:    8
  4021 ;; This function calls:
  4022 ;;		_ReadEE
  4023 ;; This function is called by:
  4024 ;;		_initialize
  4025 ;; This function uses a non-reentrant model
  4026 ;;
  4027                           
  4028                           	psect	text17
  4029  0021FA                     __ptext17:
  4030                           	opt stack 0
  4031  0021FA                     _initLatest:
  4032                           	opt stack 21
  4033                           
  4034                           ;eeprom.c: 10: Latest = ReadEE(160);
  4035                           
  4036                           ;incstack = 0
  4037  0021FA  0E00               	movlw	0
  4038  0021FC  0100               	movlb	0	; () banked
  4039  0021FE  6F81               	movwf	(ReadEE@address+1)& (0+255),b
  4040  002200  0EA0               	movlw	160
  4041  002202  6F80               	movwf	ReadEE@address& (0+255),b
  4042  002204  EC3A  F011         	call	_ReadEE	;wreg free
  4043  002208  0100               	movlb	0	; () banked
  4044  00220A  6FC8               	movwf	_Latest& (0+255),b
  4045                           
  4046                           ; BSR set to: 0
  4047                           ;eeprom.c: 11: if (Latest > 3) {
  4048  00220C  0E03               	movlw	3
  4049  00220E  0100               	movlb	0	; () banked
  4050  002210  65C8               	cpfsgt	_Latest& (0+255),b
  4051  002212  0012               	return	
  4052                           
  4053                           ; BSR set to: 0
  4054                           ;eeprom.c: 12: Latest = 0;
  4055  002214  0E00               	movlw	0
  4056  002216  0100               	movlb	0	; () banked
  4057  002218  6FC8               	movwf	_Latest& (0+255),b
  4058  00221A  0012               	return	
  4059  00221C                     __end_of_initLatest:
  4060                           	opt stack 0
  4061                           tblptru	equ	0xFF8
  4062                           tblptrh	equ	0xFF7
  4063                           tblptrl	equ	0xFF6
  4064                           tablat	equ	0xFF5
  4065                           prodh	equ	0xFF4
  4066                           prodl	equ	0xFF3
  4067                           intcon	equ	0xFF2
  4068                           postinc0	equ	0xFEE
  4069                           wreg	equ	0xFE8
  4070                           indf2	equ	0xFDF
  4071                           postinc2	equ	0xFDE
  4072                           postdec2	equ	0xFDD
  4073                           fsr2h	equ	0xFDA
  4074                           fsr2l	equ	0xFD9
  4075                           status	equ	0xFD8
  4076                           
  4077 ;; *************** function _ReadEE *****************
  4078 ;; Defined at:
  4079 ;;		line 16 in file "eeprom.c"
  4080 ;; Parameters:    Size  Location     Type
  4081 ;;  address         2    0[BANK0 ] unsigned int 
  4082 ;; Auto vars:     Size  Location     Type
  4083 ;;		None
  4084 ;; Return value:  Size  Location     Type
  4085 ;;                  1    wreg      unsigned char 
  4086 ;; Registers used:
  4087 ;;		wreg, status,2
  4088 ;; Tracked objects:
  4089 ;;		On entry : 0/0
  4090 ;;		On exit  : 0/0
  4091 ;;		Unchanged: 0/0
  4092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4093 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4096 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4097 ;;Total ram usage:        2 bytes
  4098 ;; Hardware stack levels used:    1
  4099 ;; Hardware stack levels required when called:    7
  4100 ;; This function calls:
  4101 ;;		Nothing
  4102 ;; This function is called by:
  4103 ;;		_initLatest
  4104 ;; This function uses a non-reentrant model
  4105 ;;
  4106                           
  4107                           	psect	text18
  4108  002274                     __ptext18:
  4109                           	opt stack 0
  4110  002274                     _ReadEE:
  4111                           	opt stack 21
  4112                           
  4113                           ;eeprom.c: 19: EEADRH = (unsigned char) (address >> 8);
  4114                           
  4115                           ; BSR set to: 0
  4116                           ;incstack = 0
  4117  002274  0100               	movlb	0	; () banked
  4118  002276  5181               	movf	(ReadEE@address+1)& (0+255),w,b
  4119  002278  6EAA               	movwf	4010,c	;volatile
  4120                           
  4121                           ; BSR set to: 0
  4122                           ;eeprom.c: 20: EEADR = (unsigned char) address;
  4123  00227A  C080  FFA9         	movff	ReadEE@address,4009	;volatile
  4124                           
  4125                           ; BSR set to: 0
  4126                           ;eeprom.c: 22: EECON1bits.EEPGD = 0;
  4127  00227E  9EA6               	bcf	4006,7,c	;volatile
  4128                           
  4129                           ; BSR set to: 0
  4130                           ;eeprom.c: 23: EECON1bits.CFGS = 0;
  4131  002280  9CA6               	bcf	4006,6,c	;volatile
  4132                           
  4133                           ; BSR set to: 0
  4134                           ;eeprom.c: 24: EECON1bits.RD = 1;
  4135  002282  80A6               	bsf	4006,0,c	;volatile
  4136  002284                     l423:
  4137  002284  B0A6               	btfsc	4006,0,c	;volatile
  4138  002286  D7FE               	goto	l423
  4139                           
  4140                           ;eeprom.c: 30: return EEDATA;
  4141  002288  50A8               	movf	4008,w,c	;volatile
  4142  00228A  0012               	return	
  4143  00228C                     __end_of_ReadEE:
  4144                           	opt stack 0
  4145                           tblptru	equ	0xFF8
  4146                           tblptrh	equ	0xFF7
  4147                           tblptrl	equ	0xFF6
  4148                           tablat	equ	0xFF5
  4149                           prodh	equ	0xFF4
  4150                           prodl	equ	0xFF3
  4151                           intcon	equ	0xFF2
  4152                           postinc0	equ	0xFEE
  4153                           wreg	equ	0xFE8
  4154                           indf2	equ	0xFDF
  4155                           postinc2	equ	0xFDE
  4156                           postdec2	equ	0xFDD
  4157                           fsr2h	equ	0xFDA
  4158                           fsr2l	equ	0xFD9
  4159                           status	equ	0xFD8
  4160                           
  4161 ;; *************** function _initLCD *****************
  4162 ;; Defined at:
  4163 ;;		line 9 in file "lcd.c"
  4164 ;; Parameters:    Size  Location     Type
  4165 ;;		None
  4166 ;; Auto vars:     Size  Location     Type
  4167 ;;		None
  4168 ;; Return value:  Size  Location     Type
  4169 ;;                  1    wreg      void 
  4170 ;; Registers used:
  4171 ;;		wreg, status,2, status,0, cstack
  4172 ;; Tracked objects:
  4173 ;;		On entry : 0/0
  4174 ;;		On exit  : 0/0
  4175 ;;		Unchanged: 0/0
  4176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4179 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4180 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4181 ;;Total ram usage:        1 bytes
  4182 ;; Hardware stack levels used:    1
  4183 ;; Hardware stack levels required when called:    9
  4184 ;; This function calls:
  4185 ;;		_lcdInst
  4186 ;; This function is called by:
  4187 ;;		_initialize
  4188 ;; This function uses a non-reentrant model
  4189 ;;
  4190                           
  4191                           	psect	text19
  4192  001F0C                     __ptext19:
  4193                           	opt stack 0
  4194  001F0C                     _initLCD:
  4195                           	opt stack 20
  4196                           
  4197                           ;lcd.c: 10: _delay((unsigned long)((15)*(8000000/4000.0)));
  4198                           
  4199                           ;incstack = 0
  4200  001F0C  0E27               	movlw	39
  4201  001F0E  0100               	movlb	0	; () banked
  4202  001F10  6F83               	movwf	??_initLCD& (0+255),b
  4203  001F12  0EF5               	movlw	245
  4204  001F14                     u3267:
  4205  001F14  2EE8               	decfsz	wreg,f,c
  4206  001F16  D7FE               	bra	u3267
  4207  001F18  2F83               	decfsz	??_initLCD& (0+255),f,b
  4208  001F1A  D7FC               	bra	u3267
  4209                           
  4210                           ;lcd.c: 11: lcdInst(0b00110011);
  4211  001F1C  0E33               	movlw	51
  4212  001F1E  EC6C  F011         	call	_lcdInst
  4213                           
  4214                           ;lcd.c: 12: lcdInst(0b00110010);
  4215  001F22  0E32               	movlw	50
  4216  001F24  EC6C  F011         	call	_lcdInst
  4217                           
  4218                           ;lcd.c: 13: lcdInst(0b00101000);
  4219  001F28  0E28               	movlw	40
  4220  001F2A  EC6C  F011         	call	_lcdInst
  4221                           
  4222                           ;lcd.c: 14: lcdInst(0b00001111);
  4223  001F2E  0E0F               	movlw	15
  4224  001F30  EC6C  F011         	call	_lcdInst
  4225                           
  4226                           ;lcd.c: 15: lcdInst(0b00000110);
  4227  001F34  0E06               	movlw	6
  4228  001F36  EC6C  F011         	call	_lcdInst
  4229                           
  4230                           ;lcd.c: 16: lcdInst(0b00000001);
  4231  001F3A  0E01               	movlw	1
  4232  001F3C  EC6C  F011         	call	_lcdInst
  4233                           
  4234                           ;lcd.c: 17: _delay((unsigned long)((15)*(8000000/4000.0)));
  4235  001F40  0E27               	movlw	39
  4236  001F42  0100               	movlb	0	; () banked
  4237  001F44  6F83               	movwf	??_initLCD& (0+255),b
  4238  001F46  0EF5               	movlw	245
  4239  001F48                     u3277:
  4240  001F48  2EE8               	decfsz	wreg,f,c
  4241  001F4A  D7FE               	bra	u3277
  4242  001F4C  2F83               	decfsz	??_initLCD& (0+255),f,b
  4243  001F4E  D7FC               	bra	u3277
  4244  001F50  0012               	return		;funcret
  4245  001F52                     __end_of_initLCD:
  4246                           	opt stack 0
  4247                           tblptru	equ	0xFF8
  4248                           tblptrh	equ	0xFF7
  4249                           tblptrl	equ	0xFF6
  4250                           tablat	equ	0xFF5
  4251                           prodh	equ	0xFF4
  4252                           prodl	equ	0xFF3
  4253                           intcon	equ	0xFF2
  4254                           postinc0	equ	0xFEE
  4255                           wreg	equ	0xFE8
  4256                           indf2	equ	0xFDF
  4257                           postinc2	equ	0xFDE
  4258                           postdec2	equ	0xFDD
  4259                           fsr2h	equ	0xFDA
  4260                           fsr2l	equ	0xFD9
  4261                           status	equ	0xFD8
  4262                           
  4263 ;; *************** function _lcdInst *****************
  4264 ;; Defined at:
  4265 ;;		line 20 in file "lcd.c"
  4266 ;; Parameters:    Size  Location     Type
  4267 ;;  data            1    wreg     unsigned char 
  4268 ;; Auto vars:     Size  Location     Type
  4269 ;;  data            1    2[BANK0 ] unsigned char 
  4270 ;; Return value:  Size  Location     Type
  4271 ;;                  1    wreg      void 
  4272 ;; Registers used:
  4273 ;;		wreg, status,2, status,0, cstack
  4274 ;; Tracked objects:
  4275 ;;		On entry : 0/0
  4276 ;;		On exit  : 0/0
  4277 ;;		Unchanged: 0/0
  4278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4280 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4282 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4283 ;;Total ram usage:        1 bytes
  4284 ;; Hardware stack levels used:    1
  4285 ;; Hardware stack levels required when called:    8
  4286 ;; This function calls:
  4287 ;;		_lcdNibble
  4288 ;; This function is called by:
  4289 ;;		_initialize
  4290 ;;		_showRTC
  4291 ;;		_testAD
  4292 ;;		_main
  4293 ;;		_initLCD
  4294 ;;		_mainloop
  4295 ;; This function uses a non-reentrant model
  4296 ;;
  4297                           
  4298                           	psect	text20
  4299  0022D8                     __ptext20:
  4300                           	opt stack 0
  4301  0022D8                     _lcdInst:
  4302                           	opt stack 21
  4303                           
  4304                           ;incstack = 0
  4305                           ;lcdInst@data stored from wreg
  4306  0022D8  0100               	movlb	0	; () banked
  4307  0022DA  6F82               	movwf	lcdInst@data& (0+255),b
  4308                           
  4309                           ;lcd.c: 21: LATDbits.LATD2 = 0;
  4310  0022DC  948C               	bcf	3980,2,c	;volatile
  4311                           
  4312                           ;lcd.c: 22: lcdNibble(data);
  4313  0022DE  0100               	movlb	0	; () banked
  4314  0022E0  5182               	movf	lcdInst@data& (0+255),w,b
  4315  0022E2  EC1E  F00E         	call	_lcdNibble
  4316  0022E6  0012               	return		;funcret
  4317  0022E8                     __end_of_lcdInst:
  4318                           	opt stack 0
  4319                           tblptru	equ	0xFF8
  4320                           tblptrh	equ	0xFF7
  4321                           tblptrl	equ	0xFF6
  4322                           tablat	equ	0xFF5
  4323                           prodh	equ	0xFF4
  4324                           prodl	equ	0xFF3
  4325                           intcon	equ	0xFF2
  4326                           postinc0	equ	0xFEE
  4327                           wreg	equ	0xFE8
  4328                           indf2	equ	0xFDF
  4329                           postinc2	equ	0xFDE
  4330                           postdec2	equ	0xFDD
  4331                           fsr2h	equ	0xFDA
  4332                           fsr2l	equ	0xFD9
  4333                           status	equ	0xFD8
  4334                           
  4335 ;; *************** function _lcdNibble *****************
  4336 ;; Defined at:
  4337 ;;		line 30 in file "lcd.c"
  4338 ;; Parameters:    Size  Location     Type
  4339 ;;  data            1    wreg     unsigned char 
  4340 ;; Auto vars:     Size  Location     Type
  4341 ;;  data            1    1[BANK0 ] unsigned char 
  4342 ;;  temp            1    0[BANK0 ] unsigned char 
  4343 ;; Return value:  Size  Location     Type
  4344 ;;                  1    wreg      void 
  4345 ;; Registers used:
  4346 ;;		wreg, status,2, status,0
  4347 ;; Tracked objects:
  4348 ;;		On entry : 0/0
  4349 ;;		On exit  : 0/0
  4350 ;;		Unchanged: 0/0
  4351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4353 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4355 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4356 ;;Total ram usage:        2 bytes
  4357 ;; Hardware stack levels used:    1
  4358 ;; Hardware stack levels required when called:    7
  4359 ;; This function calls:
  4360 ;;		Nothing
  4361 ;; This function is called by:
  4362 ;;		_lcdInst
  4363 ;;		_putch
  4364 ;; This function uses a non-reentrant model
  4365 ;;
  4366                           
  4367                           	psect	text21
  4368  001C3C                     __ptext21:
  4369                           	opt stack 0
  4370  001C3C                     _lcdNibble:
  4371                           	opt stack 20
  4372                           
  4373                           ;incstack = 0
  4374                           ;lcdNibble@data stored from wreg
  4375  001C3C  0100               	movlb	0	; () banked
  4376  001C3E  6F81               	movwf	lcdNibble@data& (0+255),b
  4377                           
  4378                           ;lcd.c: 32: char temp = data & 0xF0;
  4379  001C40  0100               	movlb	0	; () banked
  4380  001C42  5181               	movf	lcdNibble@data& (0+255),w,b
  4381  001C44  0BF0               	andlw	240
  4382  001C46  0100               	movlb	0	; () banked
  4383  001C48  6F80               	movwf	lcdNibble@temp& (0+255),b
  4384                           
  4385                           ;lcd.c: 33: LATD = LATD & 0x0F;
  4386  001C4A  508C               	movf	3980,w,c	;volatile
  4387  001C4C  0B0F               	andlw	15
  4388  001C4E  6E8C               	movwf	3980,c	;volatile
  4389                           
  4390                           ;lcd.c: 34: LATD = temp | LATD;
  4391  001C50  0100               	movlb	0	; () banked
  4392  001C52  5180               	movf	lcdNibble@temp& (0+255),w,b
  4393  001C54  108C               	iorwf	3980,w,c	;volatile
  4394  001C56  6E8C               	movwf	3980,c	;volatile
  4395                           
  4396                           ; BSR set to: 0
  4397                           ;lcd.c: 36: LATDbits.LATD3 = 0;
  4398  001C58  968C               	bcf	3980,3,c	;volatile
  4399                           
  4400                           ; BSR set to: 0
  4401                           ;lcd.c: 37: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4402  001C5A  0E10               	movlw	16
  4403  001C5C                     u3287:
  4404  001C5C  2EE8               	decfsz	wreg,f,c
  4405  001C5E  D7FE               	bra	u3287
  4406  001C60  D000               	nop2	
  4407                           
  4408                           ;lcd.c: 38: LATDbits.LATD3 = 1;
  4409  001C62  868C               	bsf	3980,3,c	;volatile
  4410                           
  4411                           ;lcd.c: 39: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4412  001C64  0E10               	movlw	16
  4413  001C66                     u3297:
  4414  001C66  2EE8               	decfsz	wreg,f,c
  4415  001C68  D7FE               	bra	u3297
  4416  001C6A  D000               	nop2	
  4417                           
  4418                           ;lcd.c: 41: data = data << 4;
  4419  001C6C  0100               	movlb	0	; () banked
  4420  001C6E  3981               	swapf	lcdNibble@data& (0+255),w,b
  4421  001C70  0BF0               	andlw	240
  4422  001C72  0100               	movlb	0	; () banked
  4423  001C74  6F81               	movwf	lcdNibble@data& (0+255),b
  4424                           
  4425                           ;lcd.c: 43: temp = data & 0xF0;
  4426  001C76  0100               	movlb	0	; () banked
  4427  001C78  5181               	movf	lcdNibble@data& (0+255),w,b
  4428  001C7A  0BF0               	andlw	240
  4429  001C7C  0100               	movlb	0	; () banked
  4430  001C7E  6F80               	movwf	lcdNibble@temp& (0+255),b
  4431                           
  4432                           ;lcd.c: 44: LATD = LATD & 0x0F;
  4433  001C80  508C               	movf	3980,w,c	;volatile
  4434  001C82  0B0F               	andlw	15
  4435  001C84  6E8C               	movwf	3980,c	;volatile
  4436                           
  4437                           ;lcd.c: 45: LATD = temp | LATD;
  4438  001C86  0100               	movlb	0	; () banked
  4439  001C88  5180               	movf	lcdNibble@temp& (0+255),w,b
  4440  001C8A  108C               	iorwf	3980,w,c	;volatile
  4441  001C8C  6E8C               	movwf	3980,c	;volatile
  4442                           
  4443                           ; BSR set to: 0
  4444                           ;lcd.c: 47: LATDbits.LATD3 = 0;
  4445  001C8E  968C               	bcf	3980,3,c	;volatile
  4446                           
  4447                           ; BSR set to: 0
  4448                           ;lcd.c: 48: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4449  001C90  0E10               	movlw	16
  4450  001C92                     u3307:
  4451  001C92  2EE8               	decfsz	wreg,f,c
  4452  001C94  D7FE               	bra	u3307
  4453  001C96  D000               	nop2	
  4454                           
  4455                           ;lcd.c: 49: LATDbits.LATD3 = 1;
  4456  001C98  868C               	bsf	3980,3,c	;volatile
  4457                           
  4458                           ;lcd.c: 50: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4459  001C9A  0E10               	movlw	16
  4460  001C9C                     u3317:
  4461  001C9C  2EE8               	decfsz	wreg,f,c
  4462  001C9E  D7FE               	bra	u3317
  4463  001CA0  D000               	nop2	
  4464  001CA2  0012               	return		;funcret
  4465  001CA4                     __end_of_lcdNibble:
  4466                           	opt stack 0
  4467                           tblptru	equ	0xFF8
  4468                           tblptrh	equ	0xFF7
  4469                           tblptrl	equ	0xFF6
  4470                           tablat	equ	0xFF5
  4471                           prodh	equ	0xFF4
  4472                           prodl	equ	0xFF3
  4473                           intcon	equ	0xFF2
  4474                           postinc0	equ	0xFEE
  4475                           wreg	equ	0xFE8
  4476                           indf2	equ	0xFDF
  4477                           postinc2	equ	0xFDE
  4478                           postdec2	equ	0xFDD
  4479                           fsr2h	equ	0xFDA
  4480                           fsr2l	equ	0xFD9
  4481                           status	equ	0xFD8
  4482                           
  4483 ;; *************** function _I2C_Master_Init *****************
  4484 ;; Defined at:
  4485 ;;		line 13 in file "I2C.c"
  4486 ;; Parameters:    Size  Location     Type
  4487 ;;  c               4   13[BANK0 ] const unsigned long 
  4488 ;; Auto vars:     Size  Location     Type
  4489 ;;		None
  4490 ;; Return value:  Size  Location     Type
  4491 ;;                  1    wreg      void 
  4492 ;; Registers used:
  4493 ;;		wreg, status,2, status,0, cstack
  4494 ;; Tracked objects:
  4495 ;;		On entry : 0/0
  4496 ;;		On exit  : 0/0
  4497 ;;		Unchanged: 0/0
  4498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4499 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4501 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4502 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4503 ;;Total ram usage:        8 bytes
  4504 ;; Hardware stack levels used:    1
  4505 ;; Hardware stack levels required when called:    8
  4506 ;; This function calls:
  4507 ;;		___lldiv
  4508 ;; This function is called by:
  4509 ;;		_initialize
  4510 ;; This function uses a non-reentrant model
  4511 ;;
  4512                           
  4513                           	psect	text22
  4514  001D06                     __ptext22:
  4515                           	opt stack 0
  4516  001D06                     _I2C_Master_Init:
  4517                           	opt stack 21
  4518                           
  4519                           ;I2C.c: 15: SSPSTAT = 0b00000000;
  4520                           
  4521                           ;incstack = 0
  4522  001D06  0E00               	movlw	0
  4523  001D08  6EC7               	movwf	4039,c	;volatile
  4524                           
  4525                           ;I2C.c: 16: SSPCON1 = 0b00101000;
  4526  001D0A  0E28               	movlw	40
  4527  001D0C  6EC6               	movwf	4038,c	;volatile
  4528                           
  4529                           ;I2C.c: 17: SSPCON2 = 0b00000000;
  4530  001D0E  0E00               	movlw	0
  4531  001D10  6EC5               	movwf	4037,c	;volatile
  4532                           
  4533                           ;I2C.c: 18: SSPADD = (8000000 / (4 * c)) - 1;
  4534  001D12  0E00               	movlw	0
  4535  001D14  0100               	movlb	0	; () banked
  4536  001D16  6F80               	movwf	___lldiv@dividend& (0+255),b
  4537  001D18  0E12               	movlw	18
  4538  001D1A  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  4539  001D1C  0E7A               	movlw	122
  4540  001D1E  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  4541  001D20  0E00               	movlw	0
  4542  001D22  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  4543  001D24  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  4544  001D28  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  4545  001D2C  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  4546  001D30  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  4547  001D34  0E02               	movlw	2
  4548  001D36                     u2655:
  4549  001D36  90D8               	bcf	status,0,c
  4550  001D38  0100               	movlb	0	; () banked
  4551  001D3A  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  4552  001D3C  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  4553  001D3E  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  4554  001D40  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  4555  001D42  2EE8               	decfsz	wreg,f,c
  4556  001D44  D7F8               	goto	u2655
  4557  001D46  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  4558  001D4A  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  4559  001D4E  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  4560  001D52  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  4561  001D56  ECC1  F00A         	call	___lldiv	;wreg free
  4562  001D5A  0100               	movlb	0	; () banked
  4563  001D5C  0580               	decf	?___lldiv& (0+255),w,b
  4564  001D5E  6EC8               	movwf	4040,c	;volatile
  4565                           
  4566                           ; BSR set to: 0
  4567                           ;I2C.c: 19: TRISC3 = 1;
  4568  001D60  8694               	bsf	3988,3,c	;volatile
  4569                           
  4570                           ; BSR set to: 0
  4571                           ;I2C.c: 20: TRISC4 = 1;
  4572  001D62  8894               	bsf	3988,4,c	;volatile
  4573                           
  4574                           ; BSR set to: 0
  4575  001D64  0012               	return		;funcret
  4576  001D66                     __end_of_I2C_Master_Init:
  4577                           	opt stack 0
  4578                           tblptru	equ	0xFF8
  4579                           tblptrh	equ	0xFF7
  4580                           tblptrl	equ	0xFF6
  4581                           tablat	equ	0xFF5
  4582                           prodh	equ	0xFF4
  4583                           prodl	equ	0xFF3
  4584                           intcon	equ	0xFF2
  4585                           postinc0	equ	0xFEE
  4586                           wreg	equ	0xFE8
  4587                           indf2	equ	0xFDF
  4588                           postinc2	equ	0xFDE
  4589                           postdec2	equ	0xFDD
  4590                           fsr2h	equ	0xFDA
  4591                           fsr2l	equ	0xFD9
  4592                           status	equ	0xFD8
  4593                           
  4594 ;; *************** function ___lldiv *****************
  4595 ;; Defined at:
  4596 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  4597 ;; Parameters:    Size  Location     Type
  4598 ;;  dividend        4    0[BANK0 ] unsigned long 
  4599 ;;  divisor         4    4[BANK0 ] unsigned long 
  4600 ;; Auto vars:     Size  Location     Type
  4601 ;;  quotient        4    8[BANK0 ] unsigned long 
  4602 ;;  counter         1   12[BANK0 ] unsigned char 
  4603 ;; Return value:  Size  Location     Type
  4604 ;;                  4    0[BANK0 ] unsigned long 
  4605 ;; Registers used:
  4606 ;;		wreg, status,2, status,0
  4607 ;; Tracked objects:
  4608 ;;		On entry : 0/0
  4609 ;;		On exit  : 0/0
  4610 ;;		Unchanged: 0/0
  4611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4612 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4613 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4615 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4616 ;;Total ram usage:       13 bytes
  4617 ;; Hardware stack levels used:    1
  4618 ;; Hardware stack levels required when called:    7
  4619 ;; This function calls:
  4620 ;;		Nothing
  4621 ;; This function is called by:
  4622 ;;		_I2C_Master_Init
  4623 ;; This function uses a non-reentrant model
  4624 ;;
  4625                           
  4626                           	psect	text23
  4627  001582                     __ptext23:
  4628                           	opt stack 0
  4629  001582                     ___lldiv:
  4630                           	opt stack 21
  4631                           
  4632                           ; BSR set to: 0
  4633                           ;incstack = 0
  4634  001582  0E00               	movlw	0
  4635  001584  0100               	movlb	0	; () banked
  4636  001586  6F88               	movwf	___lldiv@quotient& (0+255),b
  4637  001588  0E00               	movlw	0
  4638  00158A  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  4639  00158C  0E00               	movlw	0
  4640  00158E  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  4641  001590  0E00               	movlw	0
  4642  001592  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  4643                           
  4644                           ; BSR set to: 0
  4645  001594  0100               	movlb	0	; () banked
  4646  001596  5184               	movf	___lldiv@divisor& (0+255),w,b
  4647  001598  0100               	movlb	0	; () banked
  4648  00159A  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  4649  00159C  0100               	movlb	0	; () banked
  4650  00159E  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  4651  0015A0  0100               	movlb	0	; () banked
  4652  0015A2  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  4653  0015A4  B4D8               	btfsc	status,2,c
  4654  0015A6  D042               	goto	l891
  4655                           
  4656                           ; BSR set to: 0
  4657  0015A8  0E01               	movlw	1
  4658  0015AA  0100               	movlb	0	; () banked
  4659  0015AC  6F8C               	movwf	___lldiv@counter& (0+255),b
  4660  0015AE  D008               	goto	l3383
  4661  0015B0                     l3381:
  4662                           
  4663                           ; BSR set to: 0
  4664  0015B0  0100               	movlb	0	; () banked
  4665  0015B2  90D8               	bcf	status,0,c
  4666  0015B4  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  4667  0015B6  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  4668  0015B8  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  4669  0015BA  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  4670  0015BC  0100               	movlb	0	; () banked
  4671  0015BE  2B8C               	incf	___lldiv@counter& (0+255),f,b
  4672  0015C0                     l3383:
  4673                           
  4674                           ; BSR set to: 0
  4675  0015C0  0100               	movlb	0	; () banked
  4676  0015C2  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  4677  0015C4  D7F5               	goto	l3381
  4678  0015C6                     l3385:
  4679                           
  4680                           ; BSR set to: 0
  4681  0015C6  0100               	movlb	0	; () banked
  4682  0015C8  90D8               	bcf	status,0,c
  4683  0015CA  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  4684  0015CC  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  4685  0015CE  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  4686  0015D0  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  4687                           
  4688                           ; BSR set to: 0
  4689  0015D2  0100               	movlb	0	; () banked
  4690  0015D4  5184               	movf	___lldiv@divisor& (0+255),w,b
  4691  0015D6  0100               	movlb	0	; () banked
  4692  0015D8  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  4693  0015DA  0100               	movlb	0	; () banked
  4694  0015DC  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4695  0015DE  0100               	movlb	0	; () banked
  4696  0015E0  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  4697  0015E2  0100               	movlb	0	; () banked
  4698  0015E4  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4699  0015E6  0100               	movlb	0	; () banked
  4700  0015E8  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  4701  0015EA  0100               	movlb	0	; () banked
  4702  0015EC  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4703  0015EE  0100               	movlb	0	; () banked
  4704  0015F0  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  4705  0015F2  A0D8               	btfss	status,0,c
  4706  0015F4  D012               	goto	l3393
  4707                           
  4708                           ; BSR set to: 0
  4709  0015F6  0100               	movlb	0	; () banked
  4710  0015F8  5184               	movf	___lldiv@divisor& (0+255),w,b
  4711  0015FA  0100               	movlb	0	; () banked
  4712  0015FC  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  4713  0015FE  0100               	movlb	0	; () banked
  4714  001600  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4715  001602  0100               	movlb	0	; () banked
  4716  001604  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  4717  001606  0100               	movlb	0	; () banked
  4718  001608  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4719  00160A  0100               	movlb	0	; () banked
  4720  00160C  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  4721  00160E  0100               	movlb	0	; () banked
  4722  001610  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4723  001612  0100               	movlb	0	; () banked
  4724  001614  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  4725                           
  4726                           ; BSR set to: 0
  4727  001616  0100               	movlb	0	; () banked
  4728  001618  8188               	bsf	___lldiv@quotient& (0+255),0,b
  4729  00161A                     l3393:
  4730                           
  4731                           ; BSR set to: 0
  4732  00161A  0100               	movlb	0	; () banked
  4733  00161C  90D8               	bcf	status,0,c
  4734  00161E  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  4735  001620  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  4736  001622  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  4737  001624  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  4738                           
  4739                           ; BSR set to: 0
  4740  001626  0100               	movlb	0	; () banked
  4741  001628  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  4742  00162A  D7CD               	goto	l3385
  4743  00162C                     l891:
  4744                           
  4745                           ; BSR set to: 0
  4746  00162C  C088  F080         	movff	___lldiv@quotient,?___lldiv
  4747  001630  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  4748  001634  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  4749  001638  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  4750                           
  4751                           ; BSR set to: 0
  4752  00163C  0012               	return		;funcret
  4753  00163E                     __end_of___lldiv:
  4754                           	opt stack 0
  4755                           tblptru	equ	0xFF8
  4756                           tblptrh	equ	0xFF7
  4757                           tblptrl	equ	0xFF6
  4758                           tablat	equ	0xFF5
  4759                           prodh	equ	0xFF4
  4760                           prodl	equ	0xFF3
  4761                           intcon	equ	0xFF2
  4762                           postinc0	equ	0xFEE
  4763                           wreg	equ	0xFE8
  4764                           indf2	equ	0xFDF
  4765                           postinc2	equ	0xFDE
  4766                           postdec2	equ	0xFDD
  4767                           fsr2h	equ	0xFDA
  4768                           fsr2l	equ	0xFD9
  4769                           status	equ	0xFD8
  4770                           
  4771 ;; *************** function _intrpt *****************
  4772 ;; Defined at:
  4773 ;;		line 180 in file "main.c"
  4774 ;; Parameters:    Size  Location     Type
  4775 ;;		None
  4776 ;; Auto vars:     Size  Location     Type
  4777 ;;  portCW          6  106[COMRAM] int [3]
  4778 ;;  keypress        1  105[COMRAM] unsigned char 
  4779 ;; Return value:  Size  Location     Type
  4780 ;;                  1    wreg      void 
  4781 ;; Registers used:
  4782 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4783 ;; Tracked objects:
  4784 ;;		On entry : 0/0
  4785 ;;		On exit  : 0/0
  4786 ;;		Unchanged: 0/0
  4787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4789 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4790 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4791 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4792 ;;Total ram usage:       23 bytes
  4793 ;; Hardware stack levels used:    1
  4794 ;; Hardware stack levels required when called:    6
  4795 ;; This function calls:
  4796 ;;		_PWMC
  4797 ;;		_PermLog
  4798 ;;		_simulate
  4799 ;;		_stopMoving
  4800 ;; This function is called by:
  4801 ;;		Interrupt level 2
  4802 ;; This function uses a non-reentrant model
  4803 ;;
  4804                           
  4805                           	psect	intcode
  4806  000008                     __pintcode:
  4807                           	opt stack 0
  4808  000008                     _intrpt:
  4809                           	opt stack 20
  4810                           
  4811                           ; BSR set to: 0
  4812                           ;incstack = 0
  4813  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4814  00000A  EDB5  F006         	call	int_func,f	;refresh shadow registers
  4815                           tblptru	equ	0xFF8
  4816                           tblptrh	equ	0xFF7
  4817                           tblptrl	equ	0xFF6
  4818                           tablat	equ	0xFF5
  4819                           prodh	equ	0xFF4
  4820                           prodl	equ	0xFF3
  4821                           intcon	equ	0xFF2
  4822                           postinc0	equ	0xFEE
  4823                           wreg	equ	0xFE8
  4824                           indf2	equ	0xFDF
  4825                           postinc2	equ	0xFDE
  4826                           postdec2	equ	0xFDD
  4827                           fsr2h	equ	0xFDA
  4828                           fsr2l	equ	0xFD9
  4829                           status	equ	0xFD8
  4830                           
  4831                           	psect	intcode_body
  4832  000D6A                     __pintcode_body:
  4833                           	opt stack 20
  4834  000D6A                     int_func:
  4835                           	opt stack 20
  4836  000D6A  0006               	pop		; remove dummy address from shadow register refresh
  4837  000D6C  CFFA F05C          	movff	pclath,??_intrpt+2
  4838  000D70  CFFB F05D          	movff	pclatu,??_intrpt+3
  4839  000D74  CFE9 F05E          	movff	fsr0l,??_intrpt+4
  4840  000D78  CFEA F05F          	movff	fsr0h,??_intrpt+5
  4841  000D7C  CFE1 F060          	movff	fsr1l,??_intrpt+6
  4842  000D80  CFE2 F061          	movff	fsr1h,??_intrpt+7
  4843  000D84  CFD9 F062          	movff	fsr2l,??_intrpt+8
  4844  000D88  CFDA F063          	movff	fsr2h,??_intrpt+9
  4845  000D8C  CFF3 F064          	movff	prodl,??_intrpt+10
  4846  000D90  CFF4 F065          	movff	prodh,??_intrpt+11
  4847  000D94  CFF6 F066          	movff	tblptrl,??_intrpt+12
  4848  000D98  CFF7 F067          	movff	tblptrh,??_intrpt+13
  4849  000D9C  CFF8 F068          	movff	tblptru,??_intrpt+14
  4850  000DA0  CFF5 F069          	movff	tablat,??_intrpt+15
  4851                           
  4852                           ;main.c: 181: (INTCONbits.GIE = 0);
  4853  000DA4  9EF2               	bcf	intcon,7,c	;volatile
  4854                           
  4855                           ;main.c: 182: if (INT1IF) {
  4856  000DA6  A0F0               	btfss	intcon3,0,c	;volatile
  4857  000DA8  D07E               	goto	i2l136
  4858                           
  4859                           ;main.c: 183: int portCW[] = {0, 0, 0};
  4860  000DAA  EE20  F0AA         	lfsr	2,intrpt@F3114
  4861  000DAE  EE10  F06B         	lfsr	1,intrpt@portCW
  4862  000DB2  0E05               	movlw	5
  4863  000DB4                     i2u319_41:
  4864  000DB4  CFDB FFE3          	movff	plusw2,plusw1
  4865  000DB8  06E8               	decf	wreg,f,c
  4866  000DBA  E2FC               	bc	i2u319_41
  4867                           
  4868                           ;main.c: 184: unsigned char keypress = (PORTB & 0xF0) >> 4;
  4869  000DBC  3881               	swapf	3969,w,c	;volatile
  4870  000DBE  0B0F               	andlw	15
  4871  000DC0  0B0F               	andlw	15
  4872  000DC2  6E6A               	movwf	intrpt@keypress,c
  4873                           
  4874                           ;main.c: 185: INT1IF = 0;
  4875  000DC4  90F0               	bcf	intcon3,0,c	;volatile
  4876  000DC6                     i2l139:
  4877  000DC6  A281               	btfss	3969,1,c	;volatile
  4878  000DC8  D062               	goto	i2l4171
  4879  000DCA  D7FD               	goto	i2l139
  4880  000DCC                     i2l4139:
  4881                           
  4882                           ;main.c: 191: mode = 2;
  4883  000DCC  0E00               	movlw	0
  4884  000DCE  6E76               	movwf	_mode+1,c
  4885  000DD0  0E02               	movlw	2
  4886  000DD2  6E75               	movwf	_mode,c
  4887                           
  4888                           ;main.c: 192: PermLog();
  4889  000DD4  EC55  F00A         	call	_PermLog	;wreg free
  4890                           
  4891                           ;main.c: 193: mode = 0;
  4892  000DD8  0E00               	movlw	0
  4893  000DDA  6E76               	movwf	_mode+1,c
  4894  000DDC  0E00               	movlw	0
  4895  000DDE  6E75               	movwf	_mode,c
  4896                           
  4897                           ;main.c: 194: break;
  4898  000DE0  D062               	goto	i2l136
  4899  000DE2                     i2l4145:
  4900                           
  4901                           ;main.c: 196: mode = 1;
  4902  000DE2  0E00               	movlw	0
  4903  000DE4  6E76               	movwf	_mode+1,c
  4904  000DE6  0E01               	movlw	1
  4905  000DE8  6E75               	movwf	_mode,c
  4906                           
  4907                           ;main.c: 197: (INTCONbits.GIE = 1);
  4908  000DEA  8EF2               	bsf	intcon,7,c	;volatile
  4909                           
  4910                           ;main.c: 198: simulate();
  4911  000DEC  EC0B  F004         	call	_simulate	;wreg free
  4912                           
  4913                           ;main.c: 199: (INTCONbits.GIE = 0);
  4914  000DF0  9EF2               	bcf	intcon,7,c	;volatile
  4915                           
  4916                           ;main.c: 200: break;
  4917  000DF2  D059               	goto	i2l136
  4918  000DF4                     i2l4153:
  4919                           
  4920                           ;main.c: 203: portCW[0] = 1;
  4921  000DF4  0E00               	movlw	0
  4922  000DF6  6E6C               	movwf	intrpt@portCW+1,c
  4923  000DF8  0E01               	movlw	1
  4924  000DFA  6E6B               	movwf	intrpt@portCW,c
  4925                           
  4926                           ;main.c: 204: PWMC(3000, 10, portCW);
  4927  000DFC  0E0B               	movlw	11
  4928  000DFE  6E0A               	movwf	PWMC@widthus+1,c
  4929  000E00  0EB8               	movlw	184
  4930  000E02  6E09               	movwf	PWMC@widthus,c
  4931  000E04  0E00               	movlw	0
  4932  000E06  6E0C               	movwf	PWMC@cycles+1,c
  4933  000E08  0E0A               	movlw	10
  4934  000E0A  6E0B               	movwf	PWMC@cycles,c
  4935  000E0C  0E6B               	movlw	low intrpt@portCW
  4936  000E0E  6E0D               	movwf	PWMC@port,c
  4937  000E10  0E00               	movlw	high intrpt@portCW
  4938  000E12  6E0E               	movwf	PWMC@port+1,c
  4939  000E14  ECDC  F009         	call	_PWMC	;wreg free
  4940                           
  4941                           ;main.c: 205: break;
  4942  000E18  D046               	goto	i2l136
  4943  000E1A                     i2l4157:
  4944                           
  4945                           ;main.c: 208: portCW[1] = 1;
  4946  000E1A  0E00               	movlw	0
  4947  000E1C  6E6E               	movwf	intrpt@portCW+3,c
  4948  000E1E  0E01               	movlw	1
  4949  000E20  6E6D               	movwf	intrpt@portCW+2,c
  4950                           
  4951                           ;main.c: 209: PWMC(3000, 10, portCW);
  4952  000E22  0E0B               	movlw	11
  4953  000E24  6E0A               	movwf	PWMC@widthus+1,c
  4954  000E26  0EB8               	movlw	184
  4955  000E28  6E09               	movwf	PWMC@widthus,c
  4956  000E2A  0E00               	movlw	0
  4957  000E2C  6E0C               	movwf	PWMC@cycles+1,c
  4958  000E2E  0E0A               	movlw	10
  4959  000E30  6E0B               	movwf	PWMC@cycles,c
  4960  000E32  0E6B               	movlw	low intrpt@portCW
  4961  000E34  6E0D               	movwf	PWMC@port,c
  4962  000E36  0E00               	movlw	high intrpt@portCW
  4963  000E38  6E0E               	movwf	PWMC@port+1,c
  4964  000E3A  ECDC  F009         	call	_PWMC	;wreg free
  4965                           
  4966                           ;main.c: 210: break;
  4967  000E3E  D033               	goto	i2l136
  4968  000E40                     i2l4161:
  4969                           
  4970                           ;main.c: 214: portCW[2] = 1;
  4971  000E40  0E00               	movlw	0
  4972  000E42  6E70               	movwf	intrpt@portCW+5,c
  4973  000E44  0E01               	movlw	1
  4974  000E46  6E6F               	movwf	intrpt@portCW+4,c
  4975                           
  4976                           ;main.c: 215: PWMC(3000, 10, portCW);
  4977  000E48  0E0B               	movlw	11
  4978  000E4A  6E0A               	movwf	PWMC@widthus+1,c
  4979  000E4C  0EB8               	movlw	184
  4980  000E4E  6E09               	movwf	PWMC@widthus,c
  4981  000E50  0E00               	movlw	0
  4982  000E52  6E0C               	movwf	PWMC@cycles+1,c
  4983  000E54  0E0A               	movlw	10
  4984  000E56  6E0B               	movwf	PWMC@cycles,c
  4985  000E58  0E6B               	movlw	low intrpt@portCW
  4986  000E5A  6E0D               	movwf	PWMC@port,c
  4987  000E5C  0E00               	movlw	high intrpt@portCW
  4988  000E5E  6E0E               	movwf	PWMC@port+1,c
  4989  000E60  ECDC  F009         	call	_PWMC	;wreg free
  4990                           
  4991                           ;main.c: 216: break;
  4992  000E64  D020               	goto	i2l136
  4993  000E66                     i2l4167:
  4994  000E66  506A               	movf	intrpt@keypress,w,c
  4995                           
  4996                           ; Switch size 1, requested type "space"
  4997                           ; Number of cases is 6, Range of values is 3 to 15
  4998                           ; switch strategies available:
  4999                           ; Name         Instructions Cycles
  5000                           ; simple_byte           19    10 (average)
  5001                           ;	Chosen strategy is simple_byte
  5002  000E68  0A03               	xorlw	3	; case 3
  5003  000E6A  B4D8               	btfsc	status,2,c
  5004  000E6C  D7E9               	goto	i2l4161
  5005  000E6E  0A04               	xorlw	4	; case 7
  5006  000E70  B4D8               	btfsc	status,2,c
  5007  000E72  D7D3               	goto	i2l4157
  5008  000E74  0A0C               	xorlw	12	; case 11
  5009  000E76  B4D8               	btfsc	status,2,c
  5010  000E78  D7BD               	goto	i2l4153
  5011  000E7A  0A07               	xorlw	7	; case 12
  5012  000E7C  B4D8               	btfsc	status,2,c
  5013  000E7E  D02E               	goto	i2l152
  5014  000E80  0A02               	xorlw	2	; case 14
  5015  000E82  B4D8               	btfsc	status,2,c
  5016  000E84  D7A3               	goto	i2l4139
  5017  000E86  0A01               	xorlw	1	; case 15
  5018  000E88  B4D8               	btfsc	status,2,c
  5019  000E8A  D7AB               	goto	i2l4145
  5020                           
  5021                           ;main.c: 223: }
  5022                           
  5023                           ;main.c: 222: break;
  5024                           
  5025                           ;main.c: 221: default:
  5026                           
  5027                           ;main.c: 220: break;
  5028  000E8C  D00C               	goto	i2l136
  5029  000E8E                     i2l4171:
  5030  000E8E  C075  F05A         	movff	_mode,??_intrpt
  5031  000E92  C076  F05B         	movff	_mode+1,??_intrpt+1
  5032                           
  5033                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5034                           ; Switch size 1, requested type "space"
  5035                           ; Number of cases is 1, Range of values is 0 to 0
  5036                           ; switch strategies available:
  5037                           ; Name         Instructions Cycles
  5038                           ; simple_byte            4     3 (average)
  5039                           ;	Chosen strategy is simple_byte
  5040  000E96  505B               	movf	??_intrpt+1,w,c
  5041  000E98  0A00               	xorlw	0	; case 0
  5042  000E9A  A4D8               	btfss	status,2,c
  5043  000E9C  D004               	goto	i2l136
  5044                           
  5045                           ; Switch size 1, requested type "space"
  5046                           ; Number of cases is 1, Range of values is 0 to 0
  5047                           ; switch strategies available:
  5048                           ; Name         Instructions Cycles
  5049                           ; simple_byte            4     3 (average)
  5050                           ;	Chosen strategy is simple_byte
  5051  000E9E  505A               	movf	??_intrpt,w,c
  5052  000EA0  0A00               	xorlw	0	; case 0
  5053  000EA2  B4D8               	btfsc	status,2,c
  5054  000EA4  D7E0               	goto	i2l4167
  5055  000EA6                     i2l136:
  5056                           
  5057                           ;main.c: 224: }
  5058                           ;main.c: 225: if (INT2IF) {
  5059  000EA6  A2F0               	btfss	intcon3,1,c	;volatile
  5060  000EA8  D018               	goto	i2l155
  5061                           
  5062                           ;main.c: 226: INT2IF = 0;
  5063  000EAA  92F0               	bcf	intcon3,1,c	;volatile
  5064                           
  5065                           ;main.c: 227: switch (mode) {
  5066  000EAC  D008               	goto	i2l4181
  5067  000EAE                     i2l4175:
  5068                           
  5069                           ;main.c: 229: mode = 3;
  5070  000EAE  0E00               	movlw	0
  5071  000EB0  6E76               	movwf	_mode+1,c
  5072  000EB2  0E03               	movlw	3
  5073  000EB4  6E75               	movwf	_mode,c
  5074                           
  5075                           ;main.c: 230: stopMoving(1);
  5076  000EB6  0E01               	movlw	1
  5077  000EB8  EC09  F010         	call	_stopMoving
  5078                           
  5079                           ;main.c: 234: }
  5080                           
  5081                           ;main.c: 233: break;
  5082                           
  5083                           ;main.c: 232: default:
  5084                           
  5085                           ;main.c: 231: break;
  5086  000EBC  D00C               	goto	i2l160
  5087  000EBE                     i2l4181:
  5088  000EBE  C075  F05A         	movff	_mode,??_intrpt
  5089  000EC2  C076  F05B         	movff	_mode+1,??_intrpt+1
  5090                           
  5091                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5092                           ; Switch size 1, requested type "space"
  5093                           ; Number of cases is 1, Range of values is 0 to 0
  5094                           ; switch strategies available:
  5095                           ; Name         Instructions Cycles
  5096                           ; simple_byte            4     3 (average)
  5097                           ;	Chosen strategy is simple_byte
  5098  000EC6  505B               	movf	??_intrpt+1,w,c
  5099  000EC8  0A00               	xorlw	0	; case 0
  5100  000ECA  A4D8               	btfss	status,2,c
  5101  000ECC  D004               	goto	i2l160
  5102                           
  5103                           ; Switch size 1, requested type "space"
  5104                           ; Number of cases is 1, Range of values is 1 to 1
  5105                           ; switch strategies available:
  5106                           ; Name         Instructions Cycles
  5107                           ; simple_byte            4     3 (average)
  5108                           ;	Chosen strategy is simple_byte
  5109  000ECE  505A               	movf	??_intrpt,w,c
  5110  000ED0  0A01               	xorlw	1	; case 1
  5111  000ED2  B4D8               	btfsc	status,2,c
  5112  000ED4  D7EC               	goto	i2l4175
  5113  000ED6                     i2l160:
  5114  000ED6  B481               	btfsc	3969,2,c	;volatile
  5115  000ED8  D7FE               	goto	i2l160
  5116  000EDA                     i2l155:
  5117                           
  5118                           ;main.c: 236: }
  5119                           ;main.c: 237: (INTCONbits.GIE = 1);
  5120  000EDA  8EF2               	bsf	intcon,7,c	;volatile
  5121  000EDC                     i2l152:
  5122  000EDC  C069  FFF5         	movff	??_intrpt+15,tablat
  5123  000EE0  C068  FFF8         	movff	??_intrpt+14,tblptru
  5124  000EE4  C067  FFF7         	movff	??_intrpt+13,tblptrh
  5125  000EE8  C066  FFF6         	movff	??_intrpt+12,tblptrl
  5126  000EEC  C065  FFF4         	movff	??_intrpt+11,prodh
  5127  000EF0  C064  FFF3         	movff	??_intrpt+10,prodl
  5128  000EF4  C063  FFDA         	movff	??_intrpt+9,fsr2h
  5129  000EF8  C062  FFD9         	movff	??_intrpt+8,fsr2l
  5130  000EFC  C061  FFE2         	movff	??_intrpt+7,fsr1h
  5131  000F00  C060  FFE1         	movff	??_intrpt+6,fsr1l
  5132  000F04  C05F  FFEA         	movff	??_intrpt+5,fsr0h
  5133  000F08  C05E  FFE9         	movff	??_intrpt+4,fsr0l
  5134  000F0C  C05D  FFFB         	movff	??_intrpt+3,pclatu
  5135  000F10  C05C  FFFA         	movff	??_intrpt+2,pclath
  5136  000F14  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5137  000F16  0011               	retfie		f
  5138  000F18                     __end_of_intrpt:
  5139                           	opt stack 0
  5140                           pclatu	equ	0xFFB
  5141                           pclath	equ	0xFFA
  5142                           tblptru	equ	0xFF8
  5143                           tblptrh	equ	0xFF7
  5144                           tblptrl	equ	0xFF6
  5145                           tablat	equ	0xFF5
  5146                           prodh	equ	0xFF4
  5147                           prodl	equ	0xFF3
  5148                           intcon	equ	0xFF2
  5149                           intcon3	equ	0xFF0
  5150                           postinc0	equ	0xFEE
  5151                           fsr0h	equ	0xFEA
  5152                           fsr0l	equ	0xFE9
  5153                           wreg	equ	0xFE8
  5154                           plusw1	equ	0xFE3
  5155                           fsr1h	equ	0xFE2
  5156                           fsr1l	equ	0xFE1
  5157                           indf2	equ	0xFDF
  5158                           postinc2	equ	0xFDE
  5159                           postdec2	equ	0xFDD
  5160                           plusw2	equ	0xFDB
  5161                           fsr2h	equ	0xFDA
  5162                           fsr2l	equ	0xFD9
  5163                           status	equ	0xFD8
  5164                           
  5165 ;; *************** function _simulate *****************
  5166 ;; Defined at:
  5167 ;;		line 56 in file "main.c"
  5168 ;; Parameters:    Size  Location     Type
  5169 ;;		None
  5170 ;; Auto vars:     Size  Location     Type
  5171 ;;  portCCW         6   63[COMRAM] int [3]
  5172 ;;  portCW          6   57[COMRAM] int [3]
  5173 ;;  sorted          4   85[COMRAM] unsigned char [4]
  5174 ;;  start           4   73[COMRAM] unsigned int [2]
  5175 ;;  now             4   69[COMRAM] unsigned int [2]
  5176 ;;  period          2   83[COMRAM] unsigned int 
  5177 ;;  V9              2   81[COMRAM] int 
  5178 ;;  C               2   79[COMRAM] int 
  5179 ;;  AA              2   77[COMRAM] int 
  5180 ;;  stop            2   53[COMRAM] int 
  5181 ;; Return value:  Size  Location     Type
  5182 ;;                  1    wreg      void 
  5183 ;; Registers used:
  5184 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5185 ;; Tracked objects:
  5186 ;;		On entry : 0/0
  5187 ;;		On exit  : 0/0
  5188 ;;		Unchanged: 0/0
  5189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5191 ;;      Locals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5192 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5193 ;;      Totals:        38       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5194 ;;Total ram usage:       38 bytes
  5195 ;; Hardware stack levels used:    1
  5196 ;; Hardware stack levels required when called:    5
  5197 ;; This function calls:
  5198 ;;		_CCW90
  5199 ;;		_CW90
  5200 ;;		_HexDecToDec2
  5201 ;;		_WriteRun
  5202 ;;		_captureKeypad
  5203 ;;		_check9
  5204 ;;		_checkAA
  5205 ;;		_checkC
  5206 ;;		_showInfo
  5207 ;;		_stopMoving
  5208 ;;		i2___wmul
  5209 ;;		i2_getTime
  5210 ;;		i2_lcdInst
  5211 ;;		i2_printf
  5212 ;; This function is called by:
  5213 ;;		_intrpt
  5214 ;; This function uses a non-reentrant model
  5215 ;;
  5216                           
  5217                           	psect	text25
  5218  000816                     __ptext25:
  5219                           	opt stack 0
  5220  000816                     _simulate:
  5221                           	opt stack 20
  5222                           
  5223                           ;main.c: 57: unsigned int now[] = {0, 0}, start[] = {0, 0};
  5224                           
  5225                           ;incstack = 0
  5226  000816  C071  F046         	movff	simulate@F3093,simulate@now
  5227  00081A  C072  F047         	movff	simulate@F3093+1,simulate@now+1
  5228  00081E  C073  F048         	movff	simulate@F3093+2,simulate@now+2
  5229  000822  C074  F049         	movff	simulate@F3093+3,simulate@now+3
  5230  000826  C0C4  F04A         	movff	simulate@F3095,simulate@start
  5231  00082A  C0C5  F04B         	movff	simulate@F3095+1,simulate@start+1
  5232  00082E  C0C6  F04C         	movff	simulate@F3095+2,simulate@start+2
  5233  000832  C0C7  F04D         	movff	simulate@F3095+3,simulate@start+3
  5234                           
  5235                           ;main.c: 58: unsigned char sorted[] = {0, 0, 0, 0};
  5236  000836  C0C0  F056         	movff	simulate@F3097,simulate@sorted
  5237  00083A  C0C1  F057         	movff	simulate@F3097+1,simulate@sorted+1
  5238  00083E  C0C2  F058         	movff	simulate@F3097+2,simulate@sorted+2
  5239  000842  C0C3  F059         	movff	simulate@F3097+3,simulate@sorted+3
  5240                           
  5241                           ;main.c: 59: unsigned int period = 0;
  5242  000846  0E00               	movlw	0
  5243  000848  6E55               	movwf	simulate@period+1,c
  5244  00084A  0E00               	movlw	0
  5245  00084C  6E54               	movwf	simulate@period,c
  5246                           
  5247                           ;main.c: 60: int stop = 0;
  5248  00084E  0E00               	movlw	0
  5249  000850  6E37               	movwf	simulate@stop+1,c
  5250  000852  0E00               	movlw	0
  5251  000854  6E36               	movwf	simulate@stop,c
  5252                           
  5253                           ;main.c: 61: int AA, C, V9;
  5254                           ;main.c: 62: lcdInst(0b10000000);
  5255  000856  0E80               	movlw	128
  5256  000858  EC7A  F011         	call	i2_lcdInst
  5257                           
  5258                           ;main.c: 63: printf("Simulating...          ");
  5259  00085C  0E89               	movlw	low STR_2
  5260  00085E  6E0D               	movwf	i2printf@f,c
  5261  000860  0EFE               	movlw	high STR_2
  5262  000862  6E0E               	movwf	i2printf@f+1,c
  5263  000864  EC3E  F002         	call	i2_printf	;wreg free
  5264                           
  5265                           ;main.c: 64: start[0] = time[0];
  5266  000868  C077  F04A         	movff	_time,simulate@start
  5267  00086C  6A4B               	clrf	simulate@start+1,c
  5268                           
  5269                           ;main.c: 65: start[1] = time[1];
  5270  00086E  C078  F04C         	movff	_time+1,simulate@start+2
  5271  000872  6A4D               	clrf	simulate@start+3,c
  5272                           
  5273                           ;main.c: 66: LATC6 = 1;
  5274  000874  8C8B               	bsf	3979,6,c	;volatile
  5275                           
  5276                           ;main.c: 67: INT2IE = 1;
  5277  000876  88F0               	bsf	intcon3,4,c	;volatile
  5278                           
  5279                           ;main.c: 68: INT2IF = 0;
  5280  000878  92F0               	bcf	intcon3,1,c	;volatile
  5281                           
  5282                           ;main.c: 69: while (!stop) {
  5283  00087A  D129               	goto	i2l4051
  5284  00087C                     i2l3953:
  5285                           
  5286                           ;main.c: 70: lcdInst(0b10000000);
  5287  00087C  0E80               	movlw	128
  5288  00087E  EC7A  F011         	call	i2_lcdInst
  5289                           
  5290                           ;main.c: 71: V9 = check9(sorted);
  5291  000882  0E56               	movlw	low simulate@sorted
  5292  000884  6E2E               	movwf	check9@sorted,c
  5293  000886  0E00               	movlw	high simulate@sorted
  5294  000888  6E2F               	movwf	check9@sorted+1,c
  5295  00088A  EC3C  F00D         	call	_check9	;wreg free
  5296  00088E  C02E  F052         	movff	?_check9,simulate@V9
  5297  000892  C02F  F053         	movff	?_check9+1,simulate@V9+1
  5298                           
  5299                           ;main.c: 72: C = checkC(sorted);
  5300  000896  0E56               	movlw	low simulate@sorted
  5301  000898  6E2E               	movwf	checkC@sorted,c
  5302  00089A  0E00               	movlw	high simulate@sorted
  5303  00089C  6E2F               	movwf	checkC@sorted+1,c
  5304  00089E  EC01  F00D         	call	_checkC	;wreg free
  5305  0008A2  C02E  F050         	movff	?_checkC,simulate@C
  5306  0008A6  C02F  F051         	movff	?_checkC+1,simulate@C+1
  5307                           
  5308                           ;main.c: 73: AA = checkAA(sorted);
  5309  0008AA  0E56               	movlw	low simulate@sorted
  5310  0008AC  6E2E               	movwf	checkAA@sorted,c
  5311  0008AE  0E00               	movlw	high simulate@sorted
  5312  0008B0  6E2F               	movwf	checkAA@sorted+1,c
  5313  0008B2  EC77  F00D         	call	_checkAA	;wreg free
  5314  0008B6  C02E  F04E         	movff	?_checkAA,simulate@AA
  5315  0008BA  C02F  F04F         	movff	?_checkAA+1,simulate@AA+1
  5316                           
  5317                           ;main.c: 74: printf("    ");
  5318  0008BE  0ED1               	movlw	low (STR_28+11)
  5319  0008C0  6E0D               	movwf	i2printf@f,c
  5320  0008C2  0EFF               	movlw	high (STR_28+11)
  5321  0008C4  6E0E               	movwf	i2printf@f+1,c
  5322  0008C6  EC3E  F002         	call	i2_printf	;wreg free
  5323                           
  5324                           ;main.c: 76: int portCW[] = {0, 0, 0};
  5325  0008CA  EE20  F0B6         	lfsr	2,simulate@F3104
  5326  0008CE  EE10  F03A         	lfsr	1,simulate@portCW
  5327  0008D2  0E05               	movlw	5
  5328  0008D4                     i2u305_41:
  5329  0008D4  CFDB FFE3          	movff	plusw2,plusw1
  5330  0008D8  06E8               	decf	wreg,f,c
  5331  0008DA  E2FC               	bc	i2u305_41
  5332                           
  5333                           ;main.c: 77: int portCCW[] = {0, 0, 0};
  5334  0008DC  EE20  F0B0         	lfsr	2,simulate@F3106
  5335  0008E0  EE10  F040         	lfsr	1,simulate@portCCW
  5336  0008E4  0E05               	movlw	5
  5337  0008E6                     i2u306_41:
  5338  0008E6  CFDB FFE3          	movff	plusw2,plusw1
  5339  0008EA  06E8               	decf	wreg,f,c
  5340  0008EC  E2FC               	bc	i2u306_41
  5341                           
  5342                           ;main.c: 80: lcdInst(0b11000000);
  5343  0008EE  0EC0               	movlw	192
  5344  0008F0  EC7A  F011         	call	i2_lcdInst
  5345                           
  5346                           ;main.c: 81: printf("9V:");
  5347  0008F4  0EF1               	movlw	low STR_4
  5348  0008F6  6E0D               	movwf	i2printf@f,c
  5349  0008F8  0EFF               	movlw	high STR_4
  5350  0008FA  6E0E               	movwf	i2printf@f+1,c
  5351  0008FC  EC3E  F002         	call	i2_printf	;wreg free
  5352                           
  5353                           ;main.c: 82: if (!V9) {
  5354  000900  5052               	movf	simulate@V9,w,c
  5355  000902  1053               	iorwf	simulate@V9+1,w,c
  5356  000904  A4D8               	btfss	status,2,c
  5357  000906  D00D               	goto	i2l3977
  5358                           
  5359                           ;main.c: 83: portCCW[0] = 1;
  5360  000908  0E00               	movlw	0
  5361  00090A  6E41               	movwf	simulate@portCCW+1,c
  5362  00090C  0E01               	movlw	1
  5363  00090E  6E40               	movwf	simulate@portCCW,c
  5364                           
  5365                           ;main.c: 84: printf(" -");
  5366  000910  0EF8               	movlw	low STR_5
  5367  000912  6E0D               	movwf	i2printf@f,c
  5368  000914  0EFF               	movlw	high STR_5
  5369  000916  6E0E               	movwf	i2printf@f+1,c
  5370  000918  EC3E  F002         	call	i2_printf	;wreg free
  5371                           
  5372                           ;main.c: 86: captureKeypad();
  5373  00091C  EC1D  F011         	call	_captureKeypad	;wreg free
  5374                           
  5375                           ;main.c: 88: } else if (V9 == 1) {
  5376  000920  D017               	goto	i2l116
  5377  000922                     i2l3977:
  5378  000922  0452               	decf	simulate@V9,w,c
  5379  000924  1053               	iorwf	simulate@V9+1,w,c
  5380  000926  A4D8               	btfss	status,2,c
  5381  000928  D00D               	goto	i2l3985
  5382                           
  5383                           ;main.c: 89: portCW[0] = 1;
  5384  00092A  0E00               	movlw	0
  5385  00092C  6E3B               	movwf	simulate@portCW+1,c
  5386  00092E  0E01               	movlw	1
  5387  000930  6E3A               	movwf	simulate@portCW,c
  5388                           
  5389                           ;main.c: 90: printf(" +");
  5390  000932  0EF5               	movlw	low STR_6
  5391  000934  6E0D               	movwf	i2printf@f,c
  5392  000936  0EFF               	movlw	high STR_6
  5393  000938  6E0E               	movwf	i2printf@f+1,c
  5394  00093A  EC3E  F002         	call	i2_printf	;wreg free
  5395                           
  5396                           ;main.c: 92: captureKeypad();
  5397  00093E  EC1D  F011         	call	_captureKeypad	;wreg free
  5398                           
  5399                           ;main.c: 94: } else {
  5400  000942  D006               	goto	i2l116
  5401  000944                     i2l3985:
  5402                           
  5403                           ;main.c: 95: printf(" 0");
  5404  000944  0EFB               	movlw	low STR_7
  5405  000946  6E0D               	movwf	i2printf@f,c
  5406  000948  0EFF               	movlw	high STR_7
  5407  00094A  6E0E               	movwf	i2printf@f+1,c
  5408  00094C  EC3E  F002         	call	i2_printf	;wreg free
  5409  000950                     i2l116:
  5410                           
  5411                           ;main.c: 96: }
  5412                           ;main.c: 98: printf(" C:");
  5413  000950  0EED               	movlw	low STR_8
  5414  000952  6E0D               	movwf	i2printf@f,c
  5415  000954  0EFF               	movlw	high STR_8
  5416  000956  6E0E               	movwf	i2printf@f+1,c
  5417  000958  EC3E  F002         	call	i2_printf	;wreg free
  5418                           
  5419                           ;main.c: 100: if (!C) {
  5420  00095C  5050               	movf	simulate@C,w,c
  5421  00095E  1051               	iorwf	simulate@C+1,w,c
  5422  000960  A4D8               	btfss	status,2,c
  5423  000962  D00D               	goto	i2l3995
  5424                           
  5425                           ;main.c: 101: portCCW[1] = 1;
  5426  000964  0E00               	movlw	0
  5427  000966  6E43               	movwf	simulate@portCCW+3,c
  5428  000968  0E01               	movlw	1
  5429  00096A  6E42               	movwf	simulate@portCCW+2,c
  5430                           
  5431                           ;main.c: 102: printf(" -");
  5432  00096C  0EF8               	movlw	low STR_5
  5433  00096E  6E0D               	movwf	i2printf@f,c
  5434  000970  0EFF               	movlw	high STR_5
  5435  000972  6E0E               	movwf	i2printf@f+1,c
  5436  000974  EC3E  F002         	call	i2_printf	;wreg free
  5437                           
  5438                           ;main.c: 104: captureKeypad();
  5439  000978  EC1D  F011         	call	_captureKeypad	;wreg free
  5440                           
  5441                           ;main.c: 106: } else if (C == 1) {
  5442  00097C  D017               	goto	i2l120
  5443  00097E                     i2l3995:
  5444  00097E  0450               	decf	simulate@C,w,c
  5445  000980  1051               	iorwf	simulate@C+1,w,c
  5446  000982  A4D8               	btfss	status,2,c
  5447  000984  D00D               	goto	i2l4003
  5448                           
  5449                           ;main.c: 107: portCW[1] = 1;
  5450  000986  0E00               	movlw	0
  5451  000988  6E3D               	movwf	simulate@portCW+3,c
  5452  00098A  0E01               	movlw	1
  5453  00098C  6E3C               	movwf	simulate@portCW+2,c
  5454                           
  5455                           ;main.c: 108: printf(" +");
  5456  00098E  0EF5               	movlw	low STR_6
  5457  000990  6E0D               	movwf	i2printf@f,c
  5458  000992  0EFF               	movlw	high STR_6
  5459  000994  6E0E               	movwf	i2printf@f+1,c
  5460  000996  EC3E  F002         	call	i2_printf	;wreg free
  5461                           
  5462                           ;main.c: 110: captureKeypad();
  5463  00099A  EC1D  F011         	call	_captureKeypad	;wreg free
  5464                           
  5465                           ;main.c: 112: } else {
  5466  00099E  D006               	goto	i2l120
  5467  0009A0                     i2l4003:
  5468                           
  5469                           ;main.c: 113: printf(" 0");
  5470  0009A0  0EFB               	movlw	low STR_7
  5471  0009A2  6E0D               	movwf	i2printf@f,c
  5472  0009A4  0EFF               	movlw	high STR_7
  5473  0009A6  6E0E               	movwf	i2printf@f+1,c
  5474  0009A8  EC3E  F002         	call	i2_printf	;wreg free
  5475  0009AC                     i2l120:
  5476                           
  5477                           ;main.c: 114: }
  5478                           ;main.c: 116: printf(" AA:");
  5479  0009AC  0EE4               	movlw	low STR_12
  5480  0009AE  6E0D               	movwf	i2printf@f,c
  5481  0009B0  0EFF               	movlw	high STR_12
  5482  0009B2  6E0E               	movwf	i2printf@f+1,c
  5483  0009B4  EC3E  F002         	call	i2_printf	;wreg free
  5484                           
  5485                           ;main.c: 118: if (!AA) {
  5486  0009B8  504E               	movf	simulate@AA,w,c
  5487  0009BA  104F               	iorwf	simulate@AA+1,w,c
  5488  0009BC  A4D8               	btfss	status,2,c
  5489  0009BE  D00D               	goto	i2l4013
  5490                           
  5491                           ;main.c: 119: portCCW[2] = 1;
  5492  0009C0  0E00               	movlw	0
  5493  0009C2  6E45               	movwf	simulate@portCCW+5,c
  5494  0009C4  0E01               	movlw	1
  5495  0009C6  6E44               	movwf	simulate@portCCW+4,c
  5496                           
  5497                           ;main.c: 120: printf(" -");
  5498  0009C8  0EF8               	movlw	low STR_5
  5499  0009CA  6E0D               	movwf	i2printf@f,c
  5500  0009CC  0EFF               	movlw	high STR_5
  5501  0009CE  6E0E               	movwf	i2printf@f+1,c
  5502  0009D0  EC3E  F002         	call	i2_printf	;wreg free
  5503                           
  5504                           ;main.c: 122: captureKeypad();
  5505  0009D4  EC1D  F011         	call	_captureKeypad	;wreg free
  5506                           
  5507                           ;main.c: 124: } else if (AA == 1) {
  5508  0009D8  D017               	goto	i2l4023
  5509  0009DA                     i2l4013:
  5510  0009DA  044E               	decf	simulate@AA,w,c
  5511  0009DC  104F               	iorwf	simulate@AA+1,w,c
  5512  0009DE  A4D8               	btfss	status,2,c
  5513  0009E0  D00D               	goto	i2l4021
  5514                           
  5515                           ;main.c: 125: portCW[2] = 1;
  5516  0009E2  0E00               	movlw	0
  5517  0009E4  6E3F               	movwf	simulate@portCW+5,c
  5518  0009E6  0E01               	movlw	1
  5519  0009E8  6E3E               	movwf	simulate@portCW+4,c
  5520                           
  5521                           ;main.c: 126: printf(" +");
  5522  0009EA  0EF5               	movlw	low STR_6
  5523  0009EC  6E0D               	movwf	i2printf@f,c
  5524  0009EE  0EFF               	movlw	high STR_6
  5525  0009F0  6E0E               	movwf	i2printf@f+1,c
  5526  0009F2  EC3E  F002         	call	i2_printf	;wreg free
  5527                           
  5528                           ;main.c: 128: captureKeypad();
  5529  0009F6  EC1D  F011         	call	_captureKeypad	;wreg free
  5530                           
  5531                           ;main.c: 130: } else {
  5532  0009FA  D006               	goto	i2l4023
  5533  0009FC                     i2l4021:
  5534                           
  5535                           ;main.c: 131: printf(" 0");
  5536  0009FC  0EFB               	movlw	low STR_7
  5537  0009FE  6E0D               	movwf	i2printf@f,c
  5538  000A00  0EFF               	movlw	high STR_7
  5539  000A02  6E0E               	movwf	i2printf@f+1,c
  5540  000A04  EC3E  F002         	call	i2_printf	;wreg free
  5541  000A08                     i2l4023:
  5542                           
  5543                           ;main.c: 132: }
  5544                           ;main.c: 135: CCW90(portCCW);
  5545  000A08  0E40               	movlw	low simulate@portCCW
  5546  000A0A  6E16               	movwf	CCW90@port,c
  5547  000A0C  0E00               	movlw	high simulate@portCCW
  5548  000A0E  6E17               	movwf	CCW90@port+1,c
  5549  000A10  ECE7  F00D         	call	_CCW90	;wreg free
  5550                           
  5551                           ;main.c: 136: CW90(portCW);
  5552  000A14  0E3A               	movlw	low simulate@portCW
  5553  000A16  6E16               	movwf	CW90@port,c
  5554  000A18  0E00               	movlw	high simulate@portCW
  5555  000A1A  6E17               	movwf	CW90@port+1,c
  5556  000A1C  ECB0  F00D         	call	_CW90	;wreg free
  5557                           
  5558                           ;main.c: 137: LATC0 = 0;
  5559  000A20  908B               	bcf	3979,0,c	;volatile
  5560                           
  5561                           ;main.c: 138: LATC1 = 0;
  5562  000A22  928B               	bcf	3979,1,c	;volatile
  5563                           
  5564                           ;main.c: 139: LATC2 = 0;
  5565  000A24  948B               	bcf	3979,2,c	;volatile
  5566                           
  5567                           ;main.c: 144: }
  5568                           ;main.c: 145: getTime(time);
  5569  000A26  0E77               	movlw	low _time
  5570  000A28  6E04               	movwf	i2getTime@time,c
  5571  000A2A  0E00               	movlw	high _time
  5572  000A2C  6E05               	movwf	i2getTime@time+1,c
  5573  000A2E  ECC6  F00C         	call	i2_getTime	;wreg free
  5574                           
  5575                           ;main.c: 146: now[0] = time[0];
  5576  000A32  C077  F046         	movff	_time,simulate@now
  5577  000A36  6A47               	clrf	simulate@now+1,c
  5578                           
  5579                           ;main.c: 147: now[1] = time[1];
  5580  000A38  C078  F048         	movff	_time+1,simulate@now+2
  5581  000A3C  6A49               	clrf	simulate@now+3,c
  5582                           
  5583                           ;main.c: 148: lcdInst(0b10000000);
  5584  000A3E  0E80               	movlw	128
  5585  000A40  EC7A  F011         	call	i2_lcdInst
  5586                           
  5587                           ;main.c: 150: period = (HexDecToDec2(now[1]) - HexDecToDec2(start[1]))*60 + HexDecToDec2
      +                          (now[0]) - HexDecToDec2(start[0]);
  5588  000A44  C048  F007         	movff	simulate@now+2,HexDecToDec2@hex
  5589  000A48  C049  F008         	movff	simulate@now+3,HexDecToDec2@hex+1
  5590  000A4C  EC62  F00F         	call	_HexDecToDec2	;wreg free
  5591  000A50  C007  F034         	movff	?_HexDecToDec2,??_simulate
  5592  000A54  C008  F035         	movff	?_HexDecToDec2+1,??_simulate+1
  5593  000A58  C04C  F007         	movff	simulate@start+2,HexDecToDec2@hex
  5594  000A5C  C04D  F008         	movff	simulate@start+3,HexDecToDec2@hex+1
  5595  000A60  EC62  F00F         	call	_HexDecToDec2	;wreg free
  5596  000A64  1E07               	comf	?_HexDecToDec2,f,c
  5597  000A66  1E08               	comf	?_HexDecToDec2+1,f,c
  5598  000A68  4A07               	infsnz	?_HexDecToDec2,f,c
  5599  000A6A  2A08               	incf	?_HexDecToDec2+1,f,c
  5600  000A6C  5007               	movf	?_HexDecToDec2,w,c
  5601  000A6E  2434               	addwf	??_simulate,w,c
  5602  000A70  6E38               	movwf	_simulate$1496,c
  5603  000A72  5008               	movf	?_HexDecToDec2+1,w,c
  5604  000A74  2035               	addwfc	??_simulate+1,w,c
  5605  000A76  6E39               	movwf	_simulate$1496+1,c
  5606                           
  5607                           ;main.c: 150: period = (HexDecToDec2(now[1]) - HexDecToDec2(start[1]))*60 + HexDecToDec2
      +                          (now[0]) - HexDecToDec2(start[0]);
  5608  000A78  C038  F001         	movff	_simulate$1496,i2___wmul@multiplier
  5609  000A7C  C039  F002         	movff	_simulate$1496+1,i2___wmul@multiplier+1
  5610  000A80  0E00               	movlw	0
  5611  000A82  6E04               	movwf	i2___wmul@multiplicand+1,c
  5612  000A84  0E3C               	movlw	60
  5613  000A86  6E03               	movwf	i2___wmul@multiplicand,c
  5614  000A88  ECEA  F010         	call	i2___wmul	;wreg free
  5615  000A8C  C001  F034         	movff	?i2___wmul,??_simulate
  5616  000A90  C002  F035         	movff	?i2___wmul+1,??_simulate+1
  5617  000A94  C046  F007         	movff	simulate@now,HexDecToDec2@hex
  5618  000A98  C047  F008         	movff	simulate@now+1,HexDecToDec2@hex+1
  5619  000A9C  EC62  F00F         	call	_HexDecToDec2	;wreg free
  5620  000AA0  5007               	movf	?_HexDecToDec2,w,c
  5621  000AA2  2634               	addwf	??_simulate,f,c
  5622  000AA4  5008               	movf	?_HexDecToDec2+1,w,c
  5623  000AA6  2235               	addwfc	??_simulate+1,f,c
  5624  000AA8  C04A  F007         	movff	simulate@start,HexDecToDec2@hex
  5625  000AAC  C04B  F008         	movff	simulate@start+1,HexDecToDec2@hex+1
  5626  000AB0  EC62  F00F         	call	_HexDecToDec2	;wreg free
  5627  000AB4  1E07               	comf	?_HexDecToDec2,f,c
  5628  000AB6  1E08               	comf	?_HexDecToDec2+1,f,c
  5629  000AB8  4A07               	infsnz	?_HexDecToDec2,f,c
  5630  000ABA  2A08               	incf	?_HexDecToDec2+1,f,c
  5631  000ABC  5007               	movf	?_HexDecToDec2,w,c
  5632  000ABE  2434               	addwf	??_simulate,w,c
  5633  000AC0  6E54               	movwf	simulate@period,c
  5634  000AC2  5008               	movf	?_HexDecToDec2+1,w,c
  5635  000AC4  2035               	addwfc	??_simulate+1,w,c
  5636  000AC6  6E55               	movwf	simulate@period+1,c
  5637                           
  5638                           ;main.c: 151: lcdInst(0b11000000);
  5639  000AC8  0EC0               	movlw	192
  5640  000ACA  EC7A  F011         	call	i2_lcdInst
  5641  000ACE                     i2l4051:
  5642  000ACE  5036               	movf	simulate@stop,w,c
  5643  000AD0  1037               	iorwf	simulate@stop+1,w,c
  5644  000AD2  B4D8               	btfsc	status,2,c
  5645  000AD4  D6D3               	goto	i2l3953
  5646                           
  5647                           ;main.c: 155: }
  5648                           ;main.c: 158: }
  5649                           ;main.c: 160: mode = 2;
  5650  000AD6  0E00               	movlw	0
  5651  000AD8  6E76               	movwf	_mode+1,c
  5652  000ADA  0E02               	movlw	2
  5653  000ADC  6E75               	movwf	_mode,c
  5654                           
  5655                           ;main.c: 161: INT2IE = 0;
  5656  000ADE  98F0               	bcf	intcon3,4,c	;volatile
  5657                           
  5658                           ;main.c: 162: stopMoving(0);
  5659  000AE0  0E00               	movlw	0
  5660  000AE2  EC09  F010         	call	_stopMoving
  5661                           
  5662                           ;main.c: 163: lcdInst(0b11000000);
  5663  000AE6  0EC0               	movlw	192
  5664  000AE8  EC7A  F011         	call	i2_lcdInst
  5665                           
  5666                           ;main.c: 164: printf("Sorting Complete          ");
  5667  000AEC  0EDB               	movlw	low STR_16
  5668  000AEE  6E0D               	movwf	i2printf@f,c
  5669  000AF0  0EFD               	movlw	high STR_16
  5670  000AF2  6E0E               	movwf	i2printf@f+1,c
  5671  000AF4  EC3E  F002         	call	i2_printf	;wreg free
  5672                           
  5673                           ;main.c: 165: WriteRun(sorted, period);
  5674  000AF8  0E56               	movlw	low simulate@sorted
  5675  000AFA  6E07               	movwf	WriteRun@sorted,c
  5676  000AFC  0E00               	movlw	high simulate@sorted
  5677  000AFE  6E08               	movwf	WriteRun@sorted+1,c
  5678  000B00  C054  F009         	movff	simulate@period,WriteRun@time
  5679  000B04  C055  F00A         	movff	simulate@period+1,WriteRun@time+1
  5680  000B08  EC8C  F007         	call	_WriteRun	;wreg free
  5681                           
  5682                           ;main.c: 166: _delay((unsigned long)((700)*(8000000/4000.0)));
  5683  000B0C  0E08               	movlw	8
  5684  000B0E  6E35               	movwf	(??_simulate+1)& (0+255),c
  5685  000B10  0E1B               	movlw	27
  5686  000B12  6E34               	movwf	??_simulate& (0+255),c
  5687  000B14  0E27               	movlw	39
  5688  000B16                     i2u332_47:
  5689  000B16  2EE8               	decfsz	wreg,f,c
  5690  000B18  D7FE               	bra	i2u332_47
  5691  000B1A  2E34               	decfsz	??_simulate& (0+255),f,c
  5692  000B1C  D7FC               	bra	i2u332_47
  5693  000B1E  2E35               	decfsz	(??_simulate+1)& (0+255),f,c
  5694  000B20  D7FA               	bra	i2u332_47
  5695  000B22  F000               	nop	
  5696                           
  5697                           ;main.c: 167: showInfo(period, sorted);
  5698  000B24  C054  F023         	movff	simulate@period,showInfo@time
  5699  000B28  C055  F024         	movff	simulate@period+1,showInfo@time+1
  5700  000B2C  0E56               	movlw	low simulate@sorted
  5701  000B2E  6E25               	movwf	showInfo@sorted,c
  5702  000B30  0E00               	movlw	high simulate@sorted
  5703  000B32  6E26               	movwf	showInfo@sorted+1,c
  5704  000B34  ECA1  F005         	call	_showInfo	;wreg free
  5705                           
  5706                           ;main.c: 168: mode = 0;
  5707  000B38  0E00               	movlw	0
  5708  000B3A  6E76               	movwf	_mode+1,c
  5709  000B3C  0E00               	movlw	0
  5710  000B3E  6E75               	movwf	_mode,c
  5711  000B40  0012               	return		;funcret
  5712  000B42                     __end_of_simulate:
  5713                           	opt stack 0
  5714                           pclatu	equ	0xFFB
  5715                           pclath	equ	0xFFA
  5716                           tblptru	equ	0xFF8
  5717                           tblptrh	equ	0xFF7
  5718                           tblptrl	equ	0xFF6
  5719                           tablat	equ	0xFF5
  5720                           prodh	equ	0xFF4
  5721                           prodl	equ	0xFF3
  5722                           intcon	equ	0xFF2
  5723                           intcon3	equ	0xFF0
  5724                           postinc0	equ	0xFEE
  5725                           fsr0h	equ	0xFEA
  5726                           fsr0l	equ	0xFE9
  5727                           wreg	equ	0xFE8
  5728                           plusw1	equ	0xFE3
  5729                           fsr1h	equ	0xFE2
  5730                           fsr1l	equ	0xFE1
  5731                           indf2	equ	0xFDF
  5732                           postinc2	equ	0xFDE
  5733                           postdec2	equ	0xFDD
  5734                           plusw2	equ	0xFDB
  5735                           fsr2h	equ	0xFDA
  5736                           fsr2l	equ	0xFD9
  5737                           status	equ	0xFD8
  5738                           
  5739 ;; *************** function i2_getTime *****************
  5740 ;; Defined at:
  5741 ;;		line 76 in file "modules.c"
  5742 ;; Parameters:    Size  Location     Type
  5743 ;;  time            2    3[COMRAM] PTR unsigned char 
  5744 ;;		 -> time(7), 
  5745 ;; Auto vars:     Size  Location     Type
  5746 ;;  getTime         1    5[COMRAM] unsigned char 
  5747 ;; Return value:  Size  Location     Type
  5748 ;;                  1    wreg      void 
  5749 ;; Registers used:
  5750 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5751 ;; Tracked objects:
  5752 ;;		On entry : 0/0
  5753 ;;		On exit  : 0/0
  5754 ;;		Unchanged: 0/0
  5755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5756 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5757 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5759 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5760 ;;Total ram usage:        3 bytes
  5761 ;; Hardware stack levels used:    1
  5762 ;; Hardware stack levels required when called:    2
  5763 ;; This function calls:
  5764 ;;		i2_I2C_Master_Read
  5765 ;;		i2_I2C_Master_Start
  5766 ;;		i2_I2C_Master_Stop
  5767 ;;		i2_I2C_Master_Write
  5768 ;; This function is called by:
  5769 ;;		_simulate
  5770 ;; This function uses a non-reentrant model
  5771 ;;
  5772                           
  5773                           	psect	text26
  5774  00198C                     __ptext26:
  5775                           	opt stack 0
  5776  00198C                     i2_getTime:
  5777                           	opt stack 22
  5778                           
  5779                           ;modules.c: 77: (INTCONbits.GIE = 0);
  5780                           
  5781                           ;incstack = 0
  5782  00198C  9EF2               	bcf	intcon,7,c	;volatile
  5783                           
  5784                           ;modules.c: 81: I2C_Master_Start();
  5785  00198E  EC96  F011         	call	i2_I2C_Master_Start	;wreg free
  5786                           
  5787                           ;modules.c: 82: I2C_Master_Write(0b11010000);
  5788  001992  0E00               	movlw	0
  5789  001994  6E03               	movwf	i2I2C_Master_Write@d+1,c
  5790  001996  0ED0               	movlw	208
  5791  001998  6E02               	movwf	i2I2C_Master_Write@d,c
  5792  00199A  EC85  F011         	call	i2_I2C_Master_Write	;wreg free
  5793                           
  5794                           ;modules.c: 83: I2C_Master_Write(0x00);
  5795  00199E  0E00               	movlw	0
  5796  0019A0  6E03               	movwf	i2I2C_Master_Write@d+1,c
  5797  0019A2  0E00               	movlw	0
  5798  0019A4  6E02               	movwf	i2I2C_Master_Write@d,c
  5799  0019A6  EC85  F011         	call	i2_I2C_Master_Write	;wreg free
  5800                           
  5801                           ;modules.c: 84: I2C_Master_Stop();
  5802  0019AA  EC92  F011         	call	i2_I2C_Master_Stop	;wreg free
  5803                           
  5804                           ;modules.c: 87: I2C_Master_Start();
  5805  0019AE  EC96  F011         	call	i2_I2C_Master_Start	;wreg free
  5806                           
  5807                           ;modules.c: 88: I2C_Master_Write(0b11010001);
  5808  0019B2  0E00               	movlw	0
  5809  0019B4  6E03               	movwf	i2I2C_Master_Write@d+1,c
  5810  0019B6  0ED1               	movlw	209
  5811  0019B8  6E02               	movwf	i2I2C_Master_Write@d,c
  5812  0019BA  EC85  F011         	call	i2_I2C_Master_Write	;wreg free
  5813                           
  5814                           ;modules.c: 89: for (unsigned char i = 0; i < 0x06; i++) {
  5815  0019BE  0E00               	movlw	0
  5816  0019C0  6E06               	movwf	i2getTime@i,c
  5817  0019C2                     i2l3889:
  5818  0019C2  0E05               	movlw	5
  5819  0019C4  6406               	cpfsgt	i2getTime@i,c
  5820  0019C6  D001               	goto	i2l3893
  5821  0019C8  D00E               	goto	i2l3899
  5822  0019CA                     i2l3893:
  5823                           
  5824                           ;modules.c: 90: time[i] = I2C_Master_Read(1);
  5825  0019CA  5006               	movf	i2getTime@i,w,c
  5826  0019CC  0D01               	mullw	1
  5827  0019CE  50F3               	movf	prodl,w,c
  5828  0019D0  2404               	addwf	i2getTime@time,w,c
  5829  0019D2  6ED9               	movwf	fsr2l,c
  5830  0019D4  50F4               	movf	prodh,w,c
  5831  0019D6  2005               	addwfc	i2getTime@time+1,w,c
  5832  0019D8  6EDA               	movwf	fsr2h,c
  5833  0019DA  0E01               	movlw	1
  5834  0019DC  ECC4  F010         	call	i2_I2C_Master_Read
  5835  0019E0  6EDF               	movwf	indf2,c
  5836  0019E2  2A06               	incf	i2getTime@i,f,c
  5837  0019E4  D7EE               	goto	i2l3889
  5838  0019E6                     i2l3899:
  5839                           
  5840                           ;modules.c: 91: }
  5841                           ;modules.c: 92: time[6] = I2C_Master_Read(0);
  5842  0019E6  EE20 F006          	lfsr	2,6
  5843  0019EA  5004               	movf	i2getTime@time,w,c
  5844  0019EC  26D9               	addwf	fsr2l,f,c
  5845  0019EE  5005               	movf	i2getTime@time+1,w,c
  5846  0019F0  22DA               	addwfc	fsr2h,f,c
  5847  0019F2  0E00               	movlw	0
  5848  0019F4  ECC4  F010         	call	i2_I2C_Master_Read
  5849  0019F8  6EDF               	movwf	indf2,c
  5850                           
  5851                           ;modules.c: 93: I2C_Master_Stop();
  5852  0019FA  EC92  F011         	call	i2_I2C_Master_Stop	;wreg free
  5853                           
  5854                           ;modules.c: 94: (INTCONbits.GIE = 1);
  5855  0019FE  8EF2               	bsf	intcon,7,c	;volatile
  5856  001A00  0012               	return		;funcret
  5857  001A02                     __end_ofi2_getTime:
  5858                           	opt stack 0
  5859                           pclatu	equ	0xFFB
  5860                           pclath	equ	0xFFA
  5861                           tblptru	equ	0xFF8
  5862                           tblptrh	equ	0xFF7
  5863                           tblptrl	equ	0xFF6
  5864                           tablat	equ	0xFF5
  5865                           prodh	equ	0xFF4
  5866                           prodl	equ	0xFF3
  5867                           intcon	equ	0xFF2
  5868                           intcon3	equ	0xFF0
  5869                           postinc0	equ	0xFEE
  5870                           fsr0h	equ	0xFEA
  5871                           fsr0l	equ	0xFE9
  5872                           wreg	equ	0xFE8
  5873                           plusw1	equ	0xFE3
  5874                           fsr1h	equ	0xFE2
  5875                           fsr1l	equ	0xFE1
  5876                           indf2	equ	0xFDF
  5877                           postinc2	equ	0xFDE
  5878                           postdec2	equ	0xFDD
  5879                           plusw2	equ	0xFDB
  5880                           fsr2h	equ	0xFDA
  5881                           fsr2l	equ	0xFD9
  5882                           status	equ	0xFD8
  5883                           
  5884 ;; *************** function i2_I2C_Master_Write *****************
  5885 ;; Defined at:
  5886 ;;		line 42 in file "I2C.c"
  5887 ;; Parameters:    Size  Location     Type
  5888 ;;  d               2    1[COMRAM] unsigned int 
  5889 ;; Auto vars:     Size  Location     Type
  5890 ;;		None
  5891 ;; Return value:  Size  Location     Type
  5892 ;;                  1    wreg      void 
  5893 ;; Registers used:
  5894 ;;		wreg, status,2, status,0, cstack
  5895 ;; Tracked objects:
  5896 ;;		On entry : 0/0
  5897 ;;		On exit  : 0/0
  5898 ;;		Unchanged: 0/0
  5899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5900 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5903 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5904 ;;Total ram usage:        2 bytes
  5905 ;; Hardware stack levels used:    1
  5906 ;; Hardware stack levels required when called:    1
  5907 ;; This function calls:
  5908 ;;		i2_I2C_Master_Wait
  5909 ;; This function is called by:
  5910 ;;		i2_getTime
  5911 ;; This function uses a non-reentrant model
  5912 ;;
  5913                           
  5914                           	psect	text27
  5915  00230A                     __ptext27:
  5916                           	opt stack 0
  5917  00230A                     i2_I2C_Master_Write:
  5918                           	opt stack 22
  5919                           
  5920                           ;I2C.c: 43: I2C_Master_Wait();
  5921                           
  5922                           ;incstack = 0
  5923  00230A  EC5B  F011         	call	i2_I2C_Master_Wait	;wreg free
  5924                           
  5925                           ;I2C.c: 44: SSPBUF = d;
  5926  00230E  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
  5927  002312  0012               	return		;funcret
  5928  002314                     __end_ofi2_I2C_Master_Write:
  5929                           	opt stack 0
  5930                           pclatu	equ	0xFFB
  5931                           pclath	equ	0xFFA
  5932                           tblptru	equ	0xFF8
  5933                           tblptrh	equ	0xFF7
  5934                           tblptrl	equ	0xFF6
  5935                           tablat	equ	0xFF5
  5936                           prodh	equ	0xFF4
  5937                           prodl	equ	0xFF3
  5938                           intcon	equ	0xFF2
  5939                           intcon3	equ	0xFF0
  5940                           postinc0	equ	0xFEE
  5941                           fsr0h	equ	0xFEA
  5942                           fsr0l	equ	0xFE9
  5943                           wreg	equ	0xFE8
  5944                           plusw1	equ	0xFE3
  5945                           fsr1h	equ	0xFE2
  5946                           fsr1l	equ	0xFE1
  5947                           indf2	equ	0xFDF
  5948                           postinc2	equ	0xFDE
  5949                           postdec2	equ	0xFDD
  5950                           plusw2	equ	0xFDB
  5951                           fsr2h	equ	0xFDA
  5952                           fsr2l	equ	0xFD9
  5953                           status	equ	0xFD8
  5954                           
  5955 ;; *************** function i2_I2C_Master_Stop *****************
  5956 ;; Defined at:
  5957 ;;		line 37 in file "I2C.c"
  5958 ;; Parameters:    Size  Location     Type
  5959 ;;		None
  5960 ;; Auto vars:     Size  Location     Type
  5961 ;;		None
  5962 ;; Return value:  Size  Location     Type
  5963 ;;                  1    wreg      void 
  5964 ;; Registers used:
  5965 ;;		wreg, status,2, status,0, cstack
  5966 ;; Tracked objects:
  5967 ;;		On entry : 0/0
  5968 ;;		On exit  : 0/0
  5969 ;;		Unchanged: 0/0
  5970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5974 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5975 ;;Total ram usage:        0 bytes
  5976 ;; Hardware stack levels used:    1
  5977 ;; Hardware stack levels required when called:    1
  5978 ;; This function calls:
  5979 ;;		i2_I2C_Master_Wait
  5980 ;; This function is called by:
  5981 ;;		i2_getTime
  5982 ;; This function uses a non-reentrant model
  5983 ;;
  5984                           
  5985                           	psect	text28
  5986  002324                     __ptext28:
  5987                           	opt stack 0
  5988  002324                     i2_I2C_Master_Stop:
  5989                           	opt stack 22
  5990                           
  5991                           ;I2C.c: 38: I2C_Master_Wait();
  5992                           
  5993                           ;incstack = 0
  5994  002324  EC5B  F011         	call	i2_I2C_Master_Wait	;wreg free
  5995                           
  5996                           ;I2C.c: 39: PEN = 1;
  5997  002328  84C5               	bsf	4037,2,c	;volatile
  5998  00232A  0012               	return		;funcret
  5999  00232C                     __end_ofi2_I2C_Master_Stop:
  6000                           	opt stack 0
  6001                           pclatu	equ	0xFFB
  6002                           pclath	equ	0xFFA
  6003                           tblptru	equ	0xFF8
  6004                           tblptrh	equ	0xFF7
  6005                           tblptrl	equ	0xFF6
  6006                           tablat	equ	0xFF5
  6007                           prodh	equ	0xFF4
  6008                           prodl	equ	0xFF3
  6009                           intcon	equ	0xFF2
  6010                           intcon3	equ	0xFF0
  6011                           postinc0	equ	0xFEE
  6012                           fsr0h	equ	0xFEA
  6013                           fsr0l	equ	0xFE9
  6014                           wreg	equ	0xFE8
  6015                           plusw1	equ	0xFE3
  6016                           fsr1h	equ	0xFE2
  6017                           fsr1l	equ	0xFE1
  6018                           indf2	equ	0xFDF
  6019                           postinc2	equ	0xFDE
  6020                           postdec2	equ	0xFDD
  6021                           plusw2	equ	0xFDB
  6022                           fsr2h	equ	0xFDA
  6023                           fsr2l	equ	0xFD9
  6024                           status	equ	0xFD8
  6025                           
  6026 ;; *************** function i2_I2C_Master_Start *****************
  6027 ;; Defined at:
  6028 ;;		line 27 in file "I2C.c"
  6029 ;; Parameters:    Size  Location     Type
  6030 ;;		None
  6031 ;; Auto vars:     Size  Location     Type
  6032 ;;		None
  6033 ;; Return value:  Size  Location     Type
  6034 ;;                  1    wreg      void 
  6035 ;; Registers used:
  6036 ;;		wreg, status,2, status,0, cstack
  6037 ;; Tracked objects:
  6038 ;;		On entry : 0/0
  6039 ;;		On exit  : 0/0
  6040 ;;		Unchanged: 0/0
  6041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6045 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6046 ;;Total ram usage:        0 bytes
  6047 ;; Hardware stack levels used:    1
  6048 ;; Hardware stack levels required when called:    1
  6049 ;; This function calls:
  6050 ;;		i2_I2C_Master_Wait
  6051 ;; This function is called by:
  6052 ;;		i2_getTime
  6053 ;; This function uses a non-reentrant model
  6054 ;;
  6055                           
  6056                           	psect	text29
  6057  00232C                     __ptext29:
  6058                           	opt stack 0
  6059  00232C                     i2_I2C_Master_Start:
  6060                           	opt stack 22
  6061                           
  6062                           ;I2C.c: 28: I2C_Master_Wait();
  6063                           
  6064                           ;incstack = 0
  6065  00232C  EC5B  F011         	call	i2_I2C_Master_Wait	;wreg free
  6066                           
  6067                           ;I2C.c: 29: SEN = 1;
  6068  002330  80C5               	bsf	4037,0,c	;volatile
  6069  002332  0012               	return		;funcret
  6070  002334                     __end_ofi2_I2C_Master_Start:
  6071                           	opt stack 0
  6072                           pclatu	equ	0xFFB
  6073                           pclath	equ	0xFFA
  6074                           tblptru	equ	0xFF8
  6075                           tblptrh	equ	0xFF7
  6076                           tblptrl	equ	0xFF6
  6077                           tablat	equ	0xFF5
  6078                           prodh	equ	0xFF4
  6079                           prodl	equ	0xFF3
  6080                           intcon	equ	0xFF2
  6081                           intcon3	equ	0xFF0
  6082                           postinc0	equ	0xFEE
  6083                           fsr0h	equ	0xFEA
  6084                           fsr0l	equ	0xFE9
  6085                           wreg	equ	0xFE8
  6086                           plusw1	equ	0xFE3
  6087                           fsr1h	equ	0xFE2
  6088                           fsr1l	equ	0xFE1
  6089                           indf2	equ	0xFDF
  6090                           postinc2	equ	0xFDE
  6091                           postdec2	equ	0xFDD
  6092                           plusw2	equ	0xFDB
  6093                           fsr2h	equ	0xFDA
  6094                           fsr2l	equ	0xFD9
  6095                           status	equ	0xFD8
  6096                           
  6097 ;; *************** function i2_I2C_Master_Read *****************
  6098 ;; Defined at:
  6099 ;;		line 47 in file "I2C.c"
  6100 ;; Parameters:    Size  Location     Type
  6101 ;;  a               1    wreg     unsigned char 
  6102 ;; Auto vars:     Size  Location     Type
  6103 ;;  a               1    1[COMRAM] unsigned char 
  6104 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
  6105 ;; Return value:  Size  Location     Type
  6106 ;;                  1    wreg      unsigned char 
  6107 ;; Registers used:
  6108 ;;		wreg, status,2, status,0, cstack
  6109 ;; Tracked objects:
  6110 ;;		On entry : 0/0
  6111 ;;		On exit  : 0/0
  6112 ;;		Unchanged: 0/0
  6113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6115 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6117 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6118 ;;Total ram usage:        2 bytes
  6119 ;; Hardware stack levels used:    1
  6120 ;; Hardware stack levels required when called:    1
  6121 ;; This function calls:
  6122 ;;		i2_I2C_Master_Wait
  6123 ;; This function is called by:
  6124 ;;		i2_getTime
  6125 ;; This function uses a non-reentrant model
  6126 ;;
  6127                           
  6128                           	psect	text30
  6129  002188                     __ptext30:
  6130                           	opt stack 0
  6131  002188                     i2_I2C_Master_Read:
  6132                           	opt stack 22
  6133                           
  6134                           ;incstack = 0
  6135                           ;i2I2C_Master_Read@a stored from wreg
  6136  002188  6E02               	movwf	i2I2C_Master_Read@a,c
  6137                           
  6138                           ;I2C.c: 48: unsigned char temp;
  6139                           ;I2C.c: 49: I2C_Master_Wait();
  6140  00218A  EC5B  F011         	call	i2_I2C_Master_Wait	;wreg free
  6141                           
  6142                           ;I2C.c: 50: RCEN = 1;
  6143  00218E  86C5               	bsf	4037,3,c	;volatile
  6144                           
  6145                           ;I2C.c: 51: I2C_Master_Wait();
  6146  002190  EC5B  F011         	call	i2_I2C_Master_Wait	;wreg free
  6147                           
  6148                           ;I2C.c: 52: temp = SSPBUF;
  6149  002194  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
  6150                           
  6151                           ;I2C.c: 53: I2C_Master_Wait();
  6152  002198  EC5B  F011         	call	i2_I2C_Master_Wait	;wreg free
  6153                           
  6154                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
  6155  00219C  5002               	movf	i2I2C_Master_Read@a,w,c
  6156  00219E  A4D8               	btfss	status,2,c
  6157  0021A0  D002               	goto	i2u262_40
  6158  0021A2  8AC5               	bsf	4037,5,c	;volatile
  6159  0021A4  D001               	goto	i2l3459
  6160  0021A6                     i2u262_40:
  6161  0021A6  9AC5               	bcf	4037,5,c	;volatile
  6162  0021A8                     i2l3459:
  6163                           
  6164                           ;I2C.c: 55: ACKEN = 1;
  6165  0021A8  88C5               	bsf	4037,4,c	;volatile
  6166                           
  6167                           ;I2C.c: 56: return temp;
  6168  0021AA  5003               	movf	i2I2C_Master_Read@temp,w,c
  6169  0021AC  0012               	return	
  6170  0021AE                     __end_ofi2_I2C_Master_Read:
  6171                           	opt stack 0
  6172                           pclatu	equ	0xFFB
  6173                           pclath	equ	0xFFA
  6174                           tblptru	equ	0xFF8
  6175                           tblptrh	equ	0xFF7
  6176                           tblptrl	equ	0xFF6
  6177                           tablat	equ	0xFF5
  6178                           prodh	equ	0xFF4
  6179                           prodl	equ	0xFF3
  6180                           intcon	equ	0xFF2
  6181                           intcon3	equ	0xFF0
  6182                           postinc0	equ	0xFEE
  6183                           fsr0h	equ	0xFEA
  6184                           fsr0l	equ	0xFE9
  6185                           wreg	equ	0xFE8
  6186                           plusw1	equ	0xFE3
  6187                           fsr1h	equ	0xFE2
  6188                           fsr1l	equ	0xFE1
  6189                           indf2	equ	0xFDF
  6190                           postinc2	equ	0xFDE
  6191                           postdec2	equ	0xFDD
  6192                           plusw2	equ	0xFDB
  6193                           fsr2h	equ	0xFDA
  6194                           fsr2l	equ	0xFD9
  6195                           status	equ	0xFD8
  6196                           
  6197 ;; *************** function i2_I2C_Master_Wait *****************
  6198 ;; Defined at:
  6199 ;;		line 23 in file "I2C.c"
  6200 ;; Parameters:    Size  Location     Type
  6201 ;;		None
  6202 ;; Auto vars:     Size  Location     Type
  6203 ;;		None
  6204 ;; Return value:  Size  Location     Type
  6205 ;;                  1    wreg      void 
  6206 ;; Registers used:
  6207 ;;		wreg, status,2, status,0
  6208 ;; Tracked objects:
  6209 ;;		On entry : 0/0
  6210 ;;		On exit  : 0/0
  6211 ;;		Unchanged: 0/0
  6212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6215 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6216 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6217 ;;Total ram usage:        1 bytes
  6218 ;; Hardware stack levels used:    1
  6219 ;; This function calls:
  6220 ;;		Nothing
  6221 ;; This function is called by:
  6222 ;;		i2_I2C_Master_Start
  6223 ;;		i2_I2C_Master_Stop
  6224 ;;		i2_I2C_Master_Write
  6225 ;;		i2_I2C_Master_Read
  6226 ;; This function uses a non-reentrant model
  6227 ;;
  6228                           
  6229                           	psect	text31
  6230  0022B6                     __ptext31:
  6231                           	opt stack 0
  6232  0022B6                     i2_I2C_Master_Wait:
  6233                           	opt stack 22
  6234  0022B6                     i2l375:
  6235  0022B6  B4C7               	btfsc	4039,2,c	;volatile
  6236  0022B8  D7FE               	goto	i2l375
  6237  0022BA  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
  6238  0022BE  0E1F               	movlw	31
  6239  0022C0  1601               	andwf	??i2_I2C_Master_Wait,f,c
  6240  0022C2  B4D8               	btfsc	status,2,c
  6241  0022C4  0012               	return	
  6242  0022C6  D7F7               	goto	i2l375
  6243  0022C8                     __end_ofi2_I2C_Master_Wait:
  6244                           	opt stack 0
  6245                           pclatu	equ	0xFFB
  6246                           pclath	equ	0xFFA
  6247                           tblptru	equ	0xFF8
  6248                           tblptrh	equ	0xFF7
  6249                           tblptrl	equ	0xFF6
  6250                           tablat	equ	0xFF5
  6251                           prodh	equ	0xFF4
  6252                           prodl	equ	0xFF3
  6253                           intcon	equ	0xFF2
  6254                           intcon3	equ	0xFF0
  6255                           postinc0	equ	0xFEE
  6256                           fsr0h	equ	0xFEA
  6257                           fsr0l	equ	0xFE9
  6258                           wreg	equ	0xFE8
  6259                           plusw1	equ	0xFE3
  6260                           fsr1h	equ	0xFE2
  6261                           fsr1l	equ	0xFE1
  6262                           indf2	equ	0xFDF
  6263                           postinc2	equ	0xFDE
  6264                           postdec2	equ	0xFDD
  6265                           plusw2	equ	0xFDB
  6266                           fsr2h	equ	0xFDA
  6267                           fsr2l	equ	0xFD9
  6268                           status	equ	0xFD8
  6269                           
  6270 ;; *************** function _stopMoving *****************
  6271 ;; Defined at:
  6272 ;;		line 31 in file "motors.c"
  6273 ;; Parameters:    Size  Location     Type
  6274 ;;  em              1    wreg     unsigned char 
  6275 ;; Auto vars:     Size  Location     Type
  6276 ;;  em              1   36[COMRAM] unsigned char 
  6277 ;; Return value:  Size  Location     Type
  6278 ;;                  1    wreg      void 
  6279 ;; Registers used:
  6280 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6281 ;; Tracked objects:
  6282 ;;		On entry : 0/0
  6283 ;;		On exit  : 0/0
  6284 ;;		Unchanged: 0/0
  6285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6287 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6289 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6290 ;;Total ram usage:        3 bytes
  6291 ;; Hardware stack levels used:    1
  6292 ;; Hardware stack levels required when called:    3
  6293 ;; This function calls:
  6294 ;;		i2_lcdInst
  6295 ;;		i2_printf
  6296 ;; This function is called by:
  6297 ;;		_simulate
  6298 ;;		_intrpt
  6299 ;; This function uses a non-reentrant model
  6300 ;;
  6301                           
  6302                           	psect	text32
  6303  002012                     __ptext32:
  6304                           	opt stack 0
  6305  002012                     _stopMoving:
  6306                           	opt stack 22
  6307                           
  6308                           ;incstack = 0
  6309                           ;stopMoving@em stored from wreg
  6310  002012  6E25               	movwf	stopMoving@em,c
  6311                           
  6312                           ;motors.c: 32: (INTCONbits.GIE = 0);
  6313  002014  9EF2               	bcf	intcon,7,c	;volatile
  6314                           
  6315                           ;motors.c: 33: LATC = 0;
  6316  002016  0E00               	movlw	0
  6317  002018  6E8B               	movwf	3979,c	;volatile
  6318                           
  6319                           ;motors.c: 34: lcdInst(0b10000000);
  6320  00201A  0E80               	movlw	128
  6321  00201C  EC7A  F011         	call	i2_lcdInst
  6322                           
  6323                           ;motors.c: 35: printf(em ? "Emergency          " : "Stopped          ");
  6324  002020  5025               	movf	stopMoving@em,w,c
  6325  002022  A4D8               	btfss	status,2,c
  6326  002024  D004               	goto	i2l3755
  6327  002026  0E6F               	movlw	low STR_36
  6328  002028  6E23               	movwf	_stopMoving$555,c
  6329  00202A  0EFF               	movlw	high STR_36
  6330  00202C  D003               	goto	L1
  6331  00202E                     i2l3755:
  6332  00202E  0E22               	movlw	low STR_35
  6333  002030  6E23               	movwf	_stopMoving$555,c
  6334  002032  0EFF               	movlw	high STR_35
  6335  002034                     L1:
  6336  002034  6E24               	movwf	_stopMoving$555+1,c
  6337  002036  C023  F00D         	movff	_stopMoving$555,i2printf@f
  6338  00203A  C024  F00E         	movff	_stopMoving$555+1,i2printf@f+1
  6339  00203E  EC3E  F002         	call	i2_printf	;wreg free
  6340                           
  6341                           ;motors.c: 36: if (em)
  6342  002042  5025               	movf	stopMoving@em,w,c
  6343  002044  B4D8               	btfsc	status,2,c
  6344  002046  0012               	return	
  6345  002048                     i2l287:
  6346  002048  D7FF               	goto	i2l287
  6347  00204A                     __end_of_stopMoving:
  6348                           	opt stack 0
  6349                           pclatu	equ	0xFFB
  6350                           pclath	equ	0xFFA
  6351                           tblptru	equ	0xFF8
  6352                           tblptrh	equ	0xFF7
  6353                           tblptrl	equ	0xFF6
  6354                           tablat	equ	0xFF5
  6355                           prodh	equ	0xFF4
  6356                           prodl	equ	0xFF3
  6357                           intcon	equ	0xFF2
  6358                           intcon3	equ	0xFF0
  6359                           postinc0	equ	0xFEE
  6360                           fsr0h	equ	0xFEA
  6361                           fsr0l	equ	0xFE9
  6362                           wreg	equ	0xFE8
  6363                           plusw1	equ	0xFE3
  6364                           fsr1h	equ	0xFE2
  6365                           fsr1l	equ	0xFE1
  6366                           indf2	equ	0xFDF
  6367                           postinc2	equ	0xFDE
  6368                           postdec2	equ	0xFDD
  6369                           plusw2	equ	0xFDB
  6370                           fsr2h	equ	0xFDA
  6371                           fsr2l	equ	0xFD9
  6372                           status	equ	0xFD8
  6373                           
  6374 ;; *************** function _checkC *****************
  6375 ;; Defined at:
  6376 ;;		line 73 in file "sensors.c"
  6377 ;; Parameters:    Size  Location     Type
  6378 ;;  sorted          2   45[COMRAM] PTR unsigned char 
  6379 ;;		 -> simulate@sorted(4), 
  6380 ;; Auto vars:     Size  Location     Type
  6381 ;;  V               2   49[COMRAM] int 
  6382 ;; Return value:  Size  Location     Type
  6383 ;;                  2   45[COMRAM] int 
  6384 ;; Registers used:
  6385 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6386 ;; Tracked objects:
  6387 ;;		On entry : 0/0
  6388 ;;		On exit  : 0/0
  6389 ;;		Unchanged: 0/0
  6390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6391 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6392 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6393 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6394 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6395 ;;Total ram usage:        6 bytes
  6396 ;; Hardware stack levels used:    1
  6397 ;; Hardware stack levels required when called:    4
  6398 ;; This function calls:
  6399 ;;		_checkV
  6400 ;;		_printV
  6401 ;;		i2_printf
  6402 ;; This function is called by:
  6403 ;;		_simulate
  6404 ;; This function uses a non-reentrant model
  6405 ;;
  6406                           
  6407                           	psect	text33
  6408  001A02                     __ptext33:
  6409                           	opt stack 0
  6410  001A02                     _checkC:
  6411                           	opt stack 20
  6412                           
  6413                           ;sensors.c: 76: printf("C:");
  6414                           
  6415                           ;incstack = 0
  6416  001A02  0EEE               	movlw	low (STR_8+1)
  6417  001A04  6E0D               	movwf	i2printf@f,c
  6418  001A06  0EFF               	movlw	high (STR_8+1)
  6419  001A08  6E0E               	movwf	i2printf@f+1,c
  6420  001A0A  EC3E  F002         	call	i2_printf	;wreg free
  6421                           
  6422                           ;sensors.c: 77: int V = checkV(0, 1.5 / 5 * 1023);
  6423  001A0E  0E01               	movlw	1
  6424  001A10  6E26               	movwf	checkV@threshhold+1,c
  6425  001A12  0E32               	movlw	50
  6426  001A14  6E25               	movwf	checkV@threshhold,c
  6427  001A16  0E00               	movlw	0
  6428  001A18  ECD6  F008         	call	_checkV
  6429  001A1C  C025  F032         	movff	?_checkV,checkC@V
  6430  001A20  C026  F033         	movff	?_checkV+1,checkC@V+1
  6431                           
  6432                           ;sensors.c: 78: printV(V);
  6433  001A24  C032  F023         	movff	checkC@V,printV@charged
  6434  001A28  C033  F024         	movff	checkC@V+1,printV@charged+1
  6435  001A2C  EC9D  F010         	call	_printV	;wreg free
  6436                           
  6437                           ;sensors.c: 79: switch (V) {
  6438  001A30  D00F               	goto	i2l3683
  6439  001A32                     i2l3681:
  6440                           
  6441                           ;sensors.c: 82: sorted[1]++;
  6442  001A32  EE20 F001          	lfsr	2,1
  6443  001A36  502E               	movf	checkC@sorted,w,c
  6444  001A38  26D9               	addwf	fsr2l,f,c
  6445  001A3A  502F               	movf	checkC@sorted+1,w,c
  6446  001A3C  22DA               	addwfc	fsr2h,f,c
  6447  001A3E  2ADF               	incf	indf2,f,c
  6448  001A40                     i2l336:
  6449                           
  6450                           ;sensors.c: 85: sorted[3]++;
  6451  001A40  EE20 F003          	lfsr	2,3
  6452  001A44  502E               	movf	checkC@sorted,w,c
  6453  001A46  26D9               	addwf	fsr2l,f,c
  6454  001A48  502F               	movf	checkC@sorted+1,w,c
  6455  001A4A  22DA               	addwfc	fsr2h,f,c
  6456  001A4C  2ADF               	incf	indf2,f,c
  6457                           
  6458                           ;sensors.c: 86: }
  6459  001A4E  D00F               	goto	i2l337
  6460  001A50                     i2l3683:
  6461  001A50  C032  F030         	movff	checkC@V,??_checkC
  6462  001A54  C033  F031         	movff	checkC@V+1,??_checkC+1
  6463                           
  6464                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6465                           ; Switch size 1, requested type "space"
  6466                           ; Number of cases is 1, Range of values is 0 to 0
  6467                           ; switch strategies available:
  6468                           ; Name         Instructions Cycles
  6469                           ; simple_byte            4     3 (average)
  6470                           ;	Chosen strategy is simple_byte
  6471  001A58  5031               	movf	??_checkC+1,w,c
  6472  001A5A  0A00               	xorlw	0	; case 0
  6473  001A5C  A4D8               	btfss	status,2,c
  6474  001A5E  D007               	goto	i2l337
  6475                           
  6476                           ; Switch size 1, requested type "space"
  6477                           ; Number of cases is 2, Range of values is 0 to 1
  6478                           ; switch strategies available:
  6479                           ; Name         Instructions Cycles
  6480                           ; simple_byte            7     4 (average)
  6481                           ;	Chosen strategy is simple_byte
  6482  001A60  5030               	movf	??_checkC,w,c
  6483  001A62  0A00               	xorlw	0	; case 0
  6484  001A64  B4D8               	btfsc	status,2,c
  6485  001A66  D7EC               	goto	i2l336
  6486  001A68  0A01               	xorlw	1	; case 1
  6487  001A6A  B4D8               	btfsc	status,2,c
  6488  001A6C  D7E2               	goto	i2l3681
  6489  001A6E                     i2l337:
  6490                           
  6491                           ;sensors.c: 87: return V;
  6492  001A6E  C032  F02E         	movff	checkC@V,?_checkC
  6493  001A72  C033  F02F         	movff	checkC@V+1,?_checkC+1
  6494  001A76  0012               	return		;funcret
  6495  001A78                     __end_of_checkC:
  6496                           	opt stack 0
  6497                           pclatu	equ	0xFFB
  6498                           pclath	equ	0xFFA
  6499                           tblptru	equ	0xFF8
  6500                           tblptrh	equ	0xFF7
  6501                           tblptrl	equ	0xFF6
  6502                           tablat	equ	0xFF5
  6503                           prodh	equ	0xFF4
  6504                           prodl	equ	0xFF3
  6505                           intcon	equ	0xFF2
  6506                           intcon3	equ	0xFF0
  6507                           postinc0	equ	0xFEE
  6508                           fsr0h	equ	0xFEA
  6509                           fsr0l	equ	0xFE9
  6510                           wreg	equ	0xFE8
  6511                           plusw1	equ	0xFE3
  6512                           fsr1h	equ	0xFE2
  6513                           fsr1l	equ	0xFE1
  6514                           indf2	equ	0xFDF
  6515                           postinc2	equ	0xFDE
  6516                           postdec2	equ	0xFDD
  6517                           plusw2	equ	0xFDB
  6518                           fsr2h	equ	0xFDA
  6519                           fsr2l	equ	0xFD9
  6520                           status	equ	0xFD8
  6521                           
  6522 ;; *************** function _checkAA *****************
  6523 ;; Defined at:
  6524 ;;		line 57 in file "sensors.c"
  6525 ;; Parameters:    Size  Location     Type
  6526 ;;  sorted          2   45[COMRAM] PTR unsigned char 
  6527 ;;		 -> simulate@sorted(4), 
  6528 ;; Auto vars:     Size  Location     Type
  6529 ;;  V               2   49[COMRAM] int 
  6530 ;; Return value:  Size  Location     Type
  6531 ;;                  2   45[COMRAM] int 
  6532 ;; Registers used:
  6533 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6534 ;; Tracked objects:
  6535 ;;		On entry : 0/0
  6536 ;;		On exit  : 0/0
  6537 ;;		Unchanged: 0/0
  6538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6539 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6540 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6541 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6542 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6543 ;;Total ram usage:        6 bytes
  6544 ;; Hardware stack levels used:    1
  6545 ;; Hardware stack levels required when called:    4
  6546 ;; This function calls:
  6547 ;;		_checkV
  6548 ;;		_printV
  6549 ;;		i2_printf
  6550 ;; This function is called by:
  6551 ;;		_simulate
  6552 ;; This function uses a non-reentrant model
  6553 ;;
  6554                           
  6555                           	psect	text34
  6556  001AEE                     __ptext34:
  6557                           	opt stack 0
  6558  001AEE                     _checkAA:
  6559                           	opt stack 20
  6560                           
  6561                           ;sensors.c: 58: printf("AA:");
  6562                           
  6563                           ;incstack = 0
  6564  001AEE  0EE5               	movlw	low (STR_12+1)
  6565  001AF0  6E0D               	movwf	i2printf@f,c
  6566  001AF2  0EFF               	movlw	high (STR_12+1)
  6567  001AF4  6E0E               	movwf	i2printf@f+1,c
  6568  001AF6  EC3E  F002         	call	i2_printf	;wreg free
  6569                           
  6570                           ;sensors.c: 60: int V = checkV(2, 1.5 / 5 * 1023);
  6571  001AFA  0E01               	movlw	1
  6572  001AFC  6E26               	movwf	checkV@threshhold+1,c
  6573  001AFE  0E32               	movlw	50
  6574  001B00  6E25               	movwf	checkV@threshhold,c
  6575  001B02  0E02               	movlw	2
  6576  001B04  ECD6  F008         	call	_checkV
  6577  001B08  C025  F032         	movff	?_checkV,checkAA@V
  6578  001B0C  C026  F033         	movff	?_checkV+1,checkAA@V+1
  6579                           
  6580                           ;sensors.c: 61: printV(V);
  6581  001B10  C032  F023         	movff	checkAA@V,printV@charged
  6582  001B14  C033  F024         	movff	checkAA@V+1,printV@charged+1
  6583  001B18  EC9D  F010         	call	_printV	;wreg free
  6584                           
  6585                           ;sensors.c: 62: switch (V) {
  6586  001B1C  D00D               	goto	i2l3699
  6587  001B1E                     i2l3695:
  6588                           
  6589                           ;sensors.c: 65: sorted[0]++;
  6590  001B1E  C02E  FFD9         	movff	checkAA@sorted,fsr2l
  6591  001B22  C02F  FFDA         	movff	checkAA@sorted+1,fsr2h
  6592  001B26  2ADF               	incf	indf2,f,c
  6593  001B28                     i2l3697:
  6594                           
  6595                           ;sensors.c: 68: sorted[3]++;
  6596  001B28  EE20 F003          	lfsr	2,3
  6597  001B2C  502E               	movf	checkAA@sorted,w,c
  6598  001B2E  26D9               	addwf	fsr2l,f,c
  6599  001B30  502F               	movf	checkAA@sorted+1,w,c
  6600  001B32  22DA               	addwfc	fsr2h,f,c
  6601  001B34  2ADF               	incf	indf2,f,c
  6602                           
  6603                           ;sensors.c: 69: }
  6604  001B36  D00F               	goto	i2l330
  6605  001B38                     i2l3699:
  6606  001B38  C032  F030         	movff	checkAA@V,??_checkAA
  6607  001B3C  C033  F031         	movff	checkAA@V+1,??_checkAA+1
  6608                           
  6609                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6610                           ; Switch size 1, requested type "space"
  6611                           ; Number of cases is 1, Range of values is 0 to 0
  6612                           ; switch strategies available:
  6613                           ; Name         Instructions Cycles
  6614                           ; simple_byte            4     3 (average)
  6615                           ;	Chosen strategy is simple_byte
  6616  001B40  5031               	movf	??_checkAA+1,w,c
  6617  001B42  0A00               	xorlw	0	; case 0
  6618  001B44  A4D8               	btfss	status,2,c
  6619  001B46  D007               	goto	i2l330
  6620                           
  6621                           ; Switch size 1, requested type "space"
  6622                           ; Number of cases is 2, Range of values is 0 to 1
  6623                           ; switch strategies available:
  6624                           ; Name         Instructions Cycles
  6625                           ; simple_byte            7     4 (average)
  6626                           ;	Chosen strategy is simple_byte
  6627  001B48  5030               	movf	??_checkAA,w,c
  6628  001B4A  0A00               	xorlw	0	; case 0
  6629  001B4C  B4D8               	btfsc	status,2,c
  6630  001B4E  D7EC               	goto	i2l3697
  6631  001B50  0A01               	xorlw	1	; case 1
  6632  001B52  B4D8               	btfsc	status,2,c
  6633  001B54  D7E4               	goto	i2l3695
  6634  001B56                     i2l330:
  6635                           
  6636                           ;sensors.c: 70: return V;
  6637  001B56  C032  F02E         	movff	checkAA@V,?_checkAA
  6638  001B5A  C033  F02F         	movff	checkAA@V+1,?_checkAA+1
  6639  001B5E  0012               	return		;funcret
  6640  001B60                     __end_of_checkAA:
  6641                           	opt stack 0
  6642                           pclatu	equ	0xFFB
  6643                           pclath	equ	0xFFA
  6644                           tblptru	equ	0xFF8
  6645                           tblptrh	equ	0xFF7
  6646                           tblptrl	equ	0xFF6
  6647                           tablat	equ	0xFF5
  6648                           prodh	equ	0xFF4
  6649                           prodl	equ	0xFF3
  6650                           intcon	equ	0xFF2
  6651                           intcon3	equ	0xFF0
  6652                           postinc0	equ	0xFEE
  6653                           fsr0h	equ	0xFEA
  6654                           fsr0l	equ	0xFE9
  6655                           wreg	equ	0xFE8
  6656                           plusw1	equ	0xFE3
  6657                           fsr1h	equ	0xFE2
  6658                           fsr1l	equ	0xFE1
  6659                           indf2	equ	0xFDF
  6660                           postinc2	equ	0xFDE
  6661                           postdec2	equ	0xFDD
  6662                           plusw2	equ	0xFDB
  6663                           fsr2h	equ	0xFDA
  6664                           fsr2l	equ	0xFD9
  6665                           status	equ	0xFD8
  6666                           
  6667 ;; *************** function _check9 *****************
  6668 ;; Defined at:
  6669 ;;		line 90 in file "sensors.c"
  6670 ;; Parameters:    Size  Location     Type
  6671 ;;  sorted          2   45[COMRAM] PTR unsigned char 
  6672 ;;		 -> simulate@sorted(4), 
  6673 ;; Auto vars:     Size  Location     Type
  6674 ;;  V               2   49[COMRAM] int 
  6675 ;; Return value:  Size  Location     Type
  6676 ;;                  2   45[COMRAM] int 
  6677 ;; Registers used:
  6678 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6679 ;; Tracked objects:
  6680 ;;		On entry : 0/0
  6681 ;;		On exit  : 0/0
  6682 ;;		Unchanged: 0/0
  6683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6684 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6685 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6686 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6687 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6688 ;;Total ram usage:        6 bytes
  6689 ;; Hardware stack levels used:    1
  6690 ;; Hardware stack levels required when called:    4
  6691 ;; This function calls:
  6692 ;;		_checkV
  6693 ;;		_printV
  6694 ;;		i2_printf
  6695 ;; This function is called by:
  6696 ;;		_simulate
  6697 ;; This function uses a non-reentrant model
  6698 ;;
  6699                           
  6700                           	psect	text35
  6701  001A78                     __ptext35:
  6702                           	opt stack 0
  6703  001A78                     _check9:
  6704                           	opt stack 20
  6705                           
  6706                           ;sensors.c: 93: printf("9V:");
  6707                           
  6708                           ;incstack = 0
  6709  001A78  0EF1               	movlw	low STR_4
  6710  001A7A  6E0D               	movwf	i2printf@f,c
  6711  001A7C  0EFF               	movlw	high STR_4
  6712  001A7E  6E0E               	movwf	i2printf@f+1,c
  6713  001A80  EC3E  F002         	call	i2_printf	;wreg free
  6714                           
  6715                           ;sensors.c: 94: int V = checkV(5, 3.65 / 5 * 1023);
  6716  001A84  0E02               	movlw	2
  6717  001A86  6E26               	movwf	checkV@threshhold+1,c
  6718  001A88  0EEA               	movlw	234
  6719  001A8A  6E25               	movwf	checkV@threshhold,c
  6720  001A8C  0E05               	movlw	5
  6721  001A8E  ECD6  F008         	call	_checkV
  6722  001A92  C025  F032         	movff	?_checkV,check9@V
  6723  001A96  C026  F033         	movff	?_checkV+1,check9@V+1
  6724                           
  6725                           ;sensors.c: 95: printV(V);
  6726  001A9A  C032  F023         	movff	check9@V,printV@charged
  6727  001A9E  C033  F024         	movff	check9@V+1,printV@charged+1
  6728  001AA2  EC9D  F010         	call	_printV	;wreg free
  6729                           
  6730                           ;sensors.c: 96: switch (V) {
  6731  001AA6  D00F               	goto	i2l3669
  6732  001AA8                     i2l3667:
  6733                           
  6734                           ;sensors.c: 99: sorted[2]++;
  6735  001AA8  EE20 F002          	lfsr	2,2
  6736  001AAC  502E               	movf	check9@sorted,w,c
  6737  001AAE  26D9               	addwf	fsr2l,f,c
  6738  001AB0  502F               	movf	check9@sorted+1,w,c
  6739  001AB2  22DA               	addwfc	fsr2h,f,c
  6740  001AB4  2ADF               	incf	indf2,f,c
  6741  001AB6                     i2l343:
  6742                           
  6743                           ;sensors.c: 102: sorted[3]++;
  6744  001AB6  EE20 F003          	lfsr	2,3
  6745  001ABA  502E               	movf	check9@sorted,w,c
  6746  001ABC  26D9               	addwf	fsr2l,f,c
  6747  001ABE  502F               	movf	check9@sorted+1,w,c
  6748  001AC0  22DA               	addwfc	fsr2h,f,c
  6749  001AC2  2ADF               	incf	indf2,f,c
  6750                           
  6751                           ;sensors.c: 103: }
  6752  001AC4  D00F               	goto	i2l344
  6753  001AC6                     i2l3669:
  6754  001AC6  C032  F030         	movff	check9@V,??_check9
  6755  001ACA  C033  F031         	movff	check9@V+1,??_check9+1
  6756                           
  6757                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6758                           ; Switch size 1, requested type "space"
  6759                           ; Number of cases is 1, Range of values is 0 to 0
  6760                           ; switch strategies available:
  6761                           ; Name         Instructions Cycles
  6762                           ; simple_byte            4     3 (average)
  6763                           ;	Chosen strategy is simple_byte
  6764  001ACE  5031               	movf	??_check9+1,w,c
  6765  001AD0  0A00               	xorlw	0	; case 0
  6766  001AD2  A4D8               	btfss	status,2,c
  6767  001AD4  D007               	goto	i2l344
  6768                           
  6769                           ; Switch size 1, requested type "space"
  6770                           ; Number of cases is 2, Range of values is 0 to 1
  6771                           ; switch strategies available:
  6772                           ; Name         Instructions Cycles
  6773                           ; simple_byte            7     4 (average)
  6774                           ;	Chosen strategy is simple_byte
  6775  001AD6  5030               	movf	??_check9,w,c
  6776  001AD8  0A00               	xorlw	0	; case 0
  6777  001ADA  B4D8               	btfsc	status,2,c
  6778  001ADC  D7EC               	goto	i2l343
  6779  001ADE  0A01               	xorlw	1	; case 1
  6780  001AE0  B4D8               	btfsc	status,2,c
  6781  001AE2  D7E2               	goto	i2l3667
  6782  001AE4                     i2l344:
  6783                           
  6784                           ;sensors.c: 104: return V;
  6785  001AE4  C032  F02E         	movff	check9@V,?_check9
  6786  001AE8  C033  F02F         	movff	check9@V+1,?_check9+1
  6787  001AEC  0012               	return		;funcret
  6788  001AEE                     __end_of_check9:
  6789                           	opt stack 0
  6790                           pclatu	equ	0xFFB
  6791                           pclath	equ	0xFFA
  6792                           tblptru	equ	0xFF8
  6793                           tblptrh	equ	0xFF7
  6794                           tblptrl	equ	0xFF6
  6795                           tablat	equ	0xFF5
  6796                           prodh	equ	0xFF4
  6797                           prodl	equ	0xFF3
  6798                           intcon	equ	0xFF2
  6799                           intcon3	equ	0xFF0
  6800                           postinc0	equ	0xFEE
  6801                           fsr0h	equ	0xFEA
  6802                           fsr0l	equ	0xFE9
  6803                           wreg	equ	0xFE8
  6804                           plusw1	equ	0xFE3
  6805                           fsr1h	equ	0xFE2
  6806                           fsr1l	equ	0xFE1
  6807                           indf2	equ	0xFDF
  6808                           postinc2	equ	0xFDE
  6809                           postdec2	equ	0xFDD
  6810                           plusw2	equ	0xFDB
  6811                           fsr2h	equ	0xFDA
  6812                           fsr2l	equ	0xFD9
  6813                           status	equ	0xFD8
  6814                           
  6815 ;; *************** function _printV *****************
  6816 ;; Defined at:
  6817 ;;		line 46 in file "sensors.c"
  6818 ;; Parameters:    Size  Location     Type
  6819 ;;  charged         2   34[COMRAM] int 
  6820 ;; Auto vars:     Size  Location     Type
  6821 ;;		None
  6822 ;; Return value:  Size  Location     Type
  6823 ;;                  1    wreg      void 
  6824 ;; Registers used:
  6825 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6826 ;; Tracked objects:
  6827 ;;		On entry : 0/0
  6828 ;;		On exit  : 0/0
  6829 ;;		Unchanged: 0/0
  6830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6831 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6834 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6835 ;;Total ram usage:        2 bytes
  6836 ;; Hardware stack levels used:    1
  6837 ;; Hardware stack levels required when called:    3
  6838 ;; This function calls:
  6839 ;;		i2_printf
  6840 ;; This function is called by:
  6841 ;;		_checkAA
  6842 ;;		_checkC
  6843 ;;		_check9
  6844 ;; This function uses a non-reentrant model
  6845 ;;
  6846                           
  6847                           	psect	text36
  6848  00213A                     __ptext36:
  6849                           	opt stack 0
  6850  00213A                     _printV:
  6851                           	opt stack 20
  6852                           
  6853                           ;sensors.c: 49: if (charged < 0) {
  6854                           
  6855                           ;incstack = 0
  6856  00213A  AE24               	btfss	printV@charged+1,7,c
  6857  00213C  D007               	goto	i2l3319
  6858                           
  6859                           ;sensors.c: 50: printf("-1 ");
  6860  00213E  0EE9               	movlw	low STR_37
  6861  002140  6E0D               	movwf	i2printf@f,c
  6862  002142  0EFF               	movlw	high STR_37
  6863  002144  6E0E               	movwf	i2printf@f+1,c
  6864  002146  EC3E  F002         	call	i2_printf	;wreg free
  6865                           
  6866                           ;sensors.c: 51: } else {
  6867  00214A  0012               	return	
  6868  00214C                     i2l3319:
  6869                           
  6870                           ;sensors.c: 52: printf(" %d ", charged);
  6871  00214C  0EDF               	movlw	low STR_38
  6872  00214E  6E0D               	movwf	i2printf@f,c
  6873  002150  0EFF               	movlw	high STR_38
  6874  002152  6E0E               	movwf	i2printf@f+1,c
  6875  002154  C023  F00F         	movff	printV@charged,?i2_printf+2
  6876  002158  C024  F010         	movff	printV@charged+1,?i2_printf+3
  6877  00215C  EC3E  F002         	call	i2_printf	;wreg free
  6878  002160  0012               	return	
  6879  002162                     __end_of_printV:
  6880                           	opt stack 0
  6881                           pclatu	equ	0xFFB
  6882                           pclath	equ	0xFFA
  6883                           tblptru	equ	0xFF8
  6884                           tblptrh	equ	0xFF7
  6885                           tblptrl	equ	0xFF6
  6886                           tablat	equ	0xFF5
  6887                           prodh	equ	0xFF4
  6888                           prodl	equ	0xFF3
  6889                           intcon	equ	0xFF2
  6890                           intcon3	equ	0xFF0
  6891                           postinc0	equ	0xFEE
  6892                           fsr0h	equ	0xFEA
  6893                           fsr0l	equ	0xFE9
  6894                           wreg	equ	0xFE8
  6895                           plusw1	equ	0xFE3
  6896                           fsr1h	equ	0xFE2
  6897                           fsr1l	equ	0xFE1
  6898                           indf2	equ	0xFDF
  6899                           postinc2	equ	0xFDE
  6900                           postdec2	equ	0xFDD
  6901                           plusw2	equ	0xFDB
  6902                           fsr2h	equ	0xFDA
  6903                           fsr2l	equ	0xFD9
  6904                           status	equ	0xFD8
  6905                           
  6906 ;; *************** function _checkV *****************
  6907 ;; Defined at:
  6908 ;;		line 13 in file "sensors.c"
  6909 ;; Parameters:    Size  Location     Type
  6910 ;;  channel         1    wreg     unsigned char 
  6911 ;;  threshhold      2   36[COMRAM] int 
  6912 ;; Auto vars:     Size  Location     Type
  6913 ;;  channel         1   42[COMRAM] unsigned char 
  6914 ;;  voltage         2   43[COMRAM] int 
  6915 ;;  voltage2        2   40[COMRAM] int 
  6916 ;;  voltage3        2   38[COMRAM] int 
  6917 ;; Return value:  Size  Location     Type
  6918 ;;                  2   36[COMRAM] int 
  6919 ;; Registers used:
  6920 ;;		wreg, status,2, status,0, cstack
  6921 ;; Tracked objects:
  6922 ;;		On entry : 0/0
  6923 ;;		On exit  : 0/0
  6924 ;;		Unchanged: 0/0
  6925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6926 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6927 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6929 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6930 ;;Total ram usage:        9 bytes
  6931 ;; Hardware stack levels used:    1
  6932 ;; Hardware stack levels required when called:    2
  6933 ;; This function calls:
  6934 ;;		___awtoft
  6935 ;;		___ftge
  6936 ;;		___ftmul
  6937 ;;		i2_AD
  6938 ;; This function is called by:
  6939 ;;		_checkAA
  6940 ;;		_checkC
  6941 ;;		_check9
  6942 ;; This function uses a non-reentrant model
  6943 ;;
  6944                           
  6945                           	psect	text37
  6946  0011AC                     __ptext37:
  6947                           	opt stack 0
  6948  0011AC                     _checkV:
  6949                           	opt stack 21
  6950                           
  6951                           ;incstack = 0
  6952                           ;checkV@channel stored from wreg
  6953  0011AC  6E2B               	movwf	checkV@channel,c
  6954                           
  6955                           ;sensors.c: 16: int voltage = AD(channel);
  6956  0011AE  502B               	movf	checkV@channel,w,c
  6957  0011B0  EC88  F010         	call	i2_AD
  6958  0011B4  C001  F02C         	movff	?i2_AD,checkV@voltage
  6959  0011B8  C002  F02D         	movff	?i2_AD+1,checkV@voltage+1
  6960                           
  6961                           ;sensors.c: 18: int voltage2 = AD(channel);
  6962  0011BC  502B               	movf	checkV@channel,w,c
  6963  0011BE  EC88  F010         	call	i2_AD
  6964  0011C2  C001  F029         	movff	?i2_AD,checkV@voltage2
  6965  0011C6  C002  F02A         	movff	?i2_AD+1,checkV@voltage2+1
  6966                           
  6967                           ;sensors.c: 20: int voltage3 = AD(channel);
  6968  0011CA  502B               	movf	checkV@channel,w,c
  6969  0011CC  EC88  F010         	call	i2_AD
  6970  0011D0  C001  F027         	movff	?i2_AD,checkV@voltage3
  6971  0011D4  C002  F028         	movff	?i2_AD+1,checkV@voltage3+1
  6972                           
  6973                           ;sensors.c: 27: if (voltage == voltage2 && voltage2 == voltage3) {
  6974  0011D8  5029               	movf	checkV@voltage2,w,c
  6975  0011DA  182C               	xorwf	checkV@voltage,w,c
  6976  0011DC  E170               	bnz	i2l319
  6977  0011DE  502A               	movf	checkV@voltage2+1,w,c
  6978  0011E0  182D               	xorwf	checkV@voltage+1,w,c
  6979  0011E2  A4D8               	btfss	status,2,c
  6980  0011E4  D06C               	goto	i2l319
  6981  0011E6  5027               	movf	checkV@voltage3,w,c
  6982  0011E8  1829               	xorwf	checkV@voltage2,w,c
  6983  0011EA  E169               	bnz	i2l319
  6984  0011EC  5028               	movf	checkV@voltage3+1,w,c
  6985  0011EE  182A               	xorwf	checkV@voltage2+1,w,c
  6986  0011F0  A4D8               	btfss	status,2,c
  6987  0011F2  D065               	goto	i2l319
  6988                           
  6989                           ;sensors.c: 29: if (voltage > 1.1 * threshhold) {
  6990  0011F4  0ECD               	movlw	205
  6991  0011F6  6E10               	movwf	___ftmul@f2,c
  6992  0011F8  0E8C               	movlw	140
  6993  0011FA  6E11               	movwf	___ftmul@f2+1,c
  6994  0011FC  0E3F               	movlw	63
  6995  0011FE  6E12               	movwf	___ftmul@f2+2,c
  6996  001200  C025  F009         	movff	checkV@threshhold,___awtoft@c
  6997  001204  C026  F00A         	movff	checkV@threshhold+1,___awtoft@c+1
  6998  001208  EC25  F010         	call	___awtoft	;wreg free
  6999  00120C  C009  F00D         	movff	?___awtoft,___ftmul@f1
  7000  001210  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  7001  001214  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  7002  001218  EC62  F009         	call	___ftmul	;wreg free
  7003  00121C  C00D  F01C         	movff	?___ftmul,___ftge@ff1
  7004  001220  C00E  F01D         	movff	?___ftmul+1,___ftge@ff1+1
  7005  001224  C00F  F01E         	movff	?___ftmul+2,___ftge@ff1+2
  7006  001228  C02C  F009         	movff	checkV@voltage,___awtoft@c
  7007  00122C  C02D  F00A         	movff	checkV@voltage+1,___awtoft@c+1
  7008  001230  EC25  F010         	call	___awtoft	;wreg free
  7009  001234  C009  F01F         	movff	?___awtoft,___ftge@ff2
  7010  001238  C00A  F020         	movff	?___awtoft+1,___ftge@ff2+1
  7011  00123C  C00B  F021         	movff	?___awtoft+2,___ftge@ff2+2
  7012  001240  EC76  F00B         	call	___ftge	;wreg free
  7013  001244  A0D8               	btfss	status,0,c
  7014  001246  D03B               	goto	i2l319
  7015                           
  7016                           ;sensors.c: 31: } else if (voltage > 0.85 * threshhold) {
  7017  001248  0E9A               	movlw	154
  7018  00124A  6E10               	movwf	___ftmul@f2,c
  7019  00124C  0E59               	movlw	89
  7020  00124E  6E11               	movwf	___ftmul@f2+1,c
  7021  001250  0E3F               	movlw	63
  7022  001252  6E12               	movwf	___ftmul@f2+2,c
  7023  001254  C025  F009         	movff	checkV@threshhold,___awtoft@c
  7024  001258  C026  F00A         	movff	checkV@threshhold+1,___awtoft@c+1
  7025  00125C  EC25  F010         	call	___awtoft	;wreg free
  7026  001260  C009  F00D         	movff	?___awtoft,___ftmul@f1
  7027  001264  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  7028  001268  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  7029  00126C  EC62  F009         	call	___ftmul	;wreg free
  7030  001270  C00D  F01C         	movff	?___ftmul,___ftge@ff1
  7031  001274  C00E  F01D         	movff	?___ftmul+1,___ftge@ff1+1
  7032  001278  C00F  F01E         	movff	?___ftmul+2,___ftge@ff1+2
  7033  00127C  C02C  F009         	movff	checkV@voltage,___awtoft@c
  7034  001280  C02D  F00A         	movff	checkV@voltage+1,___awtoft@c+1
  7035  001284  EC25  F010         	call	___awtoft	;wreg free
  7036  001288  C009  F01F         	movff	?___awtoft,___ftge@ff2
  7037  00128C  C00A  F020         	movff	?___awtoft+1,___ftge@ff2+1
  7038  001290  C00B  F021         	movff	?___awtoft+2,___ftge@ff2+2
  7039  001294  EC76  F00B         	call	___ftge	;wreg free
  7040  001298  B0D8               	btfsc	status,0,c
  7041  00129A  D005               	goto	i2l3307
  7042                           
  7043                           ;sensors.c: 33: return 1;
  7044  00129C  0E00               	movlw	0
  7045  00129E  6E26               	movwf	?_checkV+1,c
  7046  0012A0  0E01               	movlw	1
  7047  0012A2  6E25               	movwf	?_checkV,c
  7048  0012A4  0012               	return	
  7049  0012A6                     i2l3307:
  7050  0012A6  BE2D               	btfsc	checkV@voltage+1,7,c
  7051  0012A8  D00A               	goto	i2l319
  7052  0012AA  502D               	movf	checkV@voltage+1,w,c
  7053  0012AC  E104               	bnz	i2l3311
  7054  0012AE  0E0A               	movlw	10
  7055  0012B0  5C2C               	subwf	checkV@voltage,w,c
  7056  0012B2  A0D8               	btfss	status,0,c
  7057  0012B4  D004               	goto	i2l319
  7058  0012B6                     i2l3311:
  7059                           
  7060                           ;sensors.c: 38: return 0;
  7061  0012B6  0E00               	movlw	0
  7062  0012B8  6E26               	movwf	?_checkV+1,c
  7063  0012BA  0E00               	movlw	0
  7064  0012BC  D7F2               	goto	L2
  7065  0012BE                     i2l319:
  7066                           
  7067                           ;sensors.c: 42: }
  7068                           ;sensors.c: 43: return -1;
  7069  0012BE  6825               	setf	?_checkV,c
  7070  0012C0  6826               	setf	?_checkV+1,c
  7071  0012C2  0012               	return		;funcret
  7072  0012C4                     __end_of_checkV:
  7073                           	opt stack 0
  7074                           pclatu	equ	0xFFB
  7075                           pclath	equ	0xFFA
  7076                           tblptru	equ	0xFF8
  7077                           tblptrh	equ	0xFF7
  7078                           tblptrl	equ	0xFF6
  7079                           tablat	equ	0xFF5
  7080                           prodh	equ	0xFF4
  7081                           prodl	equ	0xFF3
  7082                           intcon	equ	0xFF2
  7083                           intcon3	equ	0xFF0
  7084                           postinc0	equ	0xFEE
  7085                           fsr0h	equ	0xFEA
  7086                           fsr0l	equ	0xFE9
  7087                           wreg	equ	0xFE8
  7088                           plusw1	equ	0xFE3
  7089                           fsr1h	equ	0xFE2
  7090                           fsr1l	equ	0xFE1
  7091                           indf2	equ	0xFDF
  7092                           postinc2	equ	0xFDE
  7093                           postdec2	equ	0xFDD
  7094                           plusw2	equ	0xFDB
  7095                           fsr2h	equ	0xFDA
  7096                           fsr2l	equ	0xFD9
  7097                           status	equ	0xFD8
  7098                           
  7099 ;; *************** function i2_AD *****************
  7100 ;; Defined at:
  7101 ;;		line 4 in file "sensors.c"
  7102 ;; Parameters:    Size  Location     Type
  7103 ;;  channel         1    wreg     unsigned char 
  7104 ;; Auto vars:     Size  Location     Type
  7105 ;;  channel         1    4[COMRAM] unsigned char 
  7106 ;; Return value:  Size  Location     Type
  7107 ;;                  2    0[COMRAM] int 
  7108 ;; Registers used:
  7109 ;;		wreg, status,2, status,0
  7110 ;; Tracked objects:
  7111 ;;		On entry : 0/0
  7112 ;;		On exit  : 0/0
  7113 ;;		Unchanged: 0/0
  7114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7115 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7116 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7117 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7118 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7119 ;;Total ram usage:        5 bytes
  7120 ;; Hardware stack levels used:    1
  7121 ;; This function calls:
  7122 ;;		Nothing
  7123 ;; This function is called by:
  7124 ;;		_checkV
  7125 ;; This function uses a non-reentrant model
  7126 ;;
  7127                           
  7128                           	psect	text38
  7129  002110                     __ptext38:
  7130                           	opt stack 0
  7131  002110                     i2_AD:
  7132                           	opt stack 22
  7133                           
  7134                           ;incstack = 0
  7135                           ;i2AD@channel stored from wreg
  7136  002110  6E05               	movwf	i2AD@channel,c
  7137                           
  7138                           ;sensors.c: 6: ADCON0 = ((channel << 2));
  7139  002112  4405               	rlncf	i2AD@channel,w,c
  7140  002114  46E8               	rlncf	wreg,f,c
  7141  002116  0BFC               	andlw	252
  7142  002118  6EC2               	movwf	4034,c	;volatile
  7143                           
  7144                           ;sensors.c: 7: ADON = 1;
  7145  00211A  80C2               	bsf	4034,0,c	;volatile
  7146                           
  7147                           ;sensors.c: 8: ADCON0bits.GO = 1;
  7148  00211C  82C2               	bsf	4034,1,c	;volatile
  7149  00211E                     i2l305:
  7150  00211E  B2C2               	btfsc	4034,1,c	;volatile
  7151  002120  D7FE               	goto	i2l305
  7152                           
  7153                           ;sensors.c: 10: return (ADRESH << 8) | ADRESL;
  7154  002122  50C3               	movf	4035,w,c	;volatile
  7155  002124  CFC4 F003          	movff	4036,??i2_AD	;volatile
  7156  002128  6A04               	clrf	(??i2_AD+1)& (0+255),c
  7157  00212A  C003  F004         	movff	??i2_AD,??i2_AD+1
  7158  00212E  6A03               	clrf	??i2_AD,c
  7159  002130  1003               	iorwf	??i2_AD,w,c
  7160  002132  6E01               	movwf	?i2_AD,c
  7161  002134  5004               	movf	??i2_AD+1,w,c
  7162  002136  6E02               	movwf	?i2_AD+1,c
  7163  002138  0012               	return	
  7164  00213A                     __end_ofi2_AD:
  7165                           	opt stack 0
  7166                           pclatu	equ	0xFFB
  7167                           pclath	equ	0xFFA
  7168                           tblptru	equ	0xFF8
  7169                           tblptrh	equ	0xFF7
  7170                           tblptrl	equ	0xFF6
  7171                           tablat	equ	0xFF5
  7172                           prodh	equ	0xFF4
  7173                           prodl	equ	0xFF3
  7174                           intcon	equ	0xFF2
  7175                           intcon3	equ	0xFF0
  7176                           postinc0	equ	0xFEE
  7177                           fsr0h	equ	0xFEA
  7178                           fsr0l	equ	0xFE9
  7179                           wreg	equ	0xFE8
  7180                           plusw1	equ	0xFE3
  7181                           fsr1h	equ	0xFE2
  7182                           fsr1l	equ	0xFE1
  7183                           indf2	equ	0xFDF
  7184                           postinc2	equ	0xFDE
  7185                           postdec2	equ	0xFDD
  7186                           plusw2	equ	0xFDB
  7187                           fsr2h	equ	0xFDA
  7188                           fsr2l	equ	0xFD9
  7189                           status	equ	0xFD8
  7190                           
  7191 ;; *************** function ___ftmul *****************
  7192 ;; Defined at:
  7193 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  7194 ;; Parameters:    Size  Location     Type
  7195 ;;  f1              3   12[COMRAM] float 
  7196 ;;  f2              3   15[COMRAM] float 
  7197 ;; Auto vars:     Size  Location     Type
  7198 ;;  f3_as_produc    3   22[COMRAM] unsigned um
  7199 ;;  sign            1   26[COMRAM] unsigned char 
  7200 ;;  cntr            1   25[COMRAM] unsigned char 
  7201 ;;  exp             1   21[COMRAM] unsigned char 
  7202 ;; Return value:  Size  Location     Type
  7203 ;;                  3   12[COMRAM] float 
  7204 ;; Registers used:
  7205 ;;		wreg, status,2, status,0, cstack
  7206 ;; Tracked objects:
  7207 ;;		On entry : 0/0
  7208 ;;		On exit  : 0/0
  7209 ;;		Unchanged: 0/0
  7210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7211 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7212 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7213 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7214 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7215 ;;Total ram usage:       15 bytes
  7216 ;; Hardware stack levels used:    1
  7217 ;; Hardware stack levels required when called:    1
  7218 ;; This function calls:
  7219 ;;		___ftpack
  7220 ;; This function is called by:
  7221 ;;		_checkV
  7222 ;; This function uses a non-reentrant model
  7223 ;;
  7224                           
  7225                           	psect	text39
  7226  0012C4                     __ptext39:
  7227                           	opt stack 0
  7228  0012C4                     ___ftmul:
  7229                           	opt stack 21
  7230                           
  7231                           ;incstack = 0
  7232  0012C4  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
  7233  0012C8  6A14               	clrf	(??___ftmul+1)& (0+255),c
  7234  0012CA  6A15               	clrf	(??___ftmul+2)& (0+255),c
  7235  0012CC  340E               	rlcf	___ftmul@f1+1,w,c
  7236  0012CE  3613               	rlcf	??___ftmul& (0+255),f,c
  7237  0012D0  E301               	bnc	u180_41
  7238  0012D2  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  7239  0012D4                     u180_41:
  7240  0012D4  5013               	movf	??___ftmul,w,c
  7241  0012D6  6E16               	movwf	___ftmul@exp,c
  7242  0012D8  5016               	movf	___ftmul@exp,w,c
  7243  0012DA  A4D8               	btfss	status,2,c
  7244  0012DC  D007               	goto	i2l2919
  7245  0012DE  0E00               	movlw	0
  7246  0012E0  6E0D               	movwf	?___ftmul,c
  7247  0012E2  0E00               	movlw	0
  7248  0012E4  6E0E               	movwf	?___ftmul+1,c
  7249  0012E6  0E00               	movlw	0
  7250  0012E8  6E0F               	movwf	?___ftmul+2,c
  7251  0012EA  0012               	return	
  7252  0012EC                     i2l2919:
  7253  0012EC  C012  F013         	movff	___ftmul@f2+2,??___ftmul
  7254  0012F0  6A14               	clrf	(??___ftmul+1)& (0+255),c
  7255  0012F2  6A15               	clrf	(??___ftmul+2)& (0+255),c
  7256  0012F4  3411               	rlcf	___ftmul@f2+1,w,c
  7257  0012F6  3613               	rlcf	??___ftmul& (0+255),f,c
  7258  0012F8  E301               	bnc	u182_41
  7259  0012FA  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  7260  0012FC                     u182_41:
  7261  0012FC  5013               	movf	??___ftmul,w,c
  7262  0012FE  6E1B               	movwf	___ftmul@sign,c
  7263  001300  501B               	movf	___ftmul@sign,w,c
  7264  001302  A4D8               	btfss	status,2,c
  7265  001304  D007               	goto	i2l2925
  7266  001306  0E00               	movlw	0
  7267  001308  6E0D               	movwf	?___ftmul,c
  7268  00130A  0E00               	movlw	0
  7269  00130C  6E0E               	movwf	?___ftmul+1,c
  7270  00130E  0E00               	movlw	0
  7271  001310  6E0F               	movwf	?___ftmul+2,c
  7272  001312  0012               	return	
  7273  001314                     i2l2925:
  7274  001314  501B               	movf	___ftmul@sign,w,c
  7275  001316  0F7B               	addlw	123
  7276  001318  2616               	addwf	___ftmul@exp,f,c
  7277  00131A  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
  7278  00131E  5012               	movf	___ftmul@f2+2,w,c
  7279  001320  1A1B               	xorwf	___ftmul@sign,f,c
  7280  001322  0E80               	movlw	128
  7281  001324  161B               	andwf	___ftmul@sign,f,c
  7282  001326  8E0E               	bsf	___ftmul@f1+1,7,c
  7283  001328  8E11               	bsf	___ftmul@f2+1,7,c
  7284  00132A  0EFF               	movlw	255
  7285  00132C  1610               	andwf	___ftmul@f2,f,c
  7286  00132E  0EFF               	movlw	255
  7287  001330  1611               	andwf	___ftmul@f2+1,f,c
  7288  001332  0E00               	movlw	0
  7289  001334  1612               	andwf	___ftmul@f2+2,f,c
  7290  001336  0E00               	movlw	0
  7291  001338  6E17               	movwf	___ftmul@f3_as_product,c
  7292  00133A  0E00               	movlw	0
  7293  00133C  6E18               	movwf	___ftmul@f3_as_product+1,c
  7294  00133E  0E00               	movlw	0
  7295  001340  6E19               	movwf	___ftmul@f3_as_product+2,c
  7296  001342  0E07               	movlw	7
  7297  001344  6E1A               	movwf	___ftmul@cntr,c
  7298  001346                     i2l2939:
  7299  001346  A00D               	btfss	___ftmul@f1,0,c
  7300  001348  D006               	goto	i2l2943
  7301  00134A  5010               	movf	___ftmul@f2,w,c
  7302  00134C  2617               	addwf	___ftmul@f3_as_product,f,c
  7303  00134E  5011               	movf	___ftmul@f2+1,w,c
  7304  001350  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  7305  001352  5012               	movf	___ftmul@f2+2,w,c
  7306  001354  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  7307  001356                     i2l2943:
  7308  001356  90D8               	bcf	status,0,c
  7309  001358  320F               	rrcf	___ftmul@f1+2,f,c
  7310  00135A  320E               	rrcf	___ftmul@f1+1,f,c
  7311  00135C  320D               	rrcf	___ftmul@f1,f,c
  7312  00135E  90D8               	bcf	status,0,c
  7313  001360  3610               	rlcf	___ftmul@f2,f,c
  7314  001362  3611               	rlcf	___ftmul@f2+1,f,c
  7315  001364  3612               	rlcf	___ftmul@f2+2,f,c
  7316  001366  2E1A               	decfsz	___ftmul@cntr,f,c
  7317  001368  D7EE               	goto	i2l2939
  7318  00136A  0E09               	movlw	9
  7319  00136C  6E1A               	movwf	___ftmul@cntr,c
  7320  00136E                     i2l2949:
  7321  00136E  A00D               	btfss	___ftmul@f1,0,c
  7322  001370  D006               	goto	i2l2953
  7323  001372  5010               	movf	___ftmul@f2,w,c
  7324  001374  2617               	addwf	___ftmul@f3_as_product,f,c
  7325  001376  5011               	movf	___ftmul@f2+1,w,c
  7326  001378  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  7327  00137A  5012               	movf	___ftmul@f2+2,w,c
  7328  00137C  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  7329  00137E                     i2l2953:
  7330  00137E  90D8               	bcf	status,0,c
  7331  001380  320F               	rrcf	___ftmul@f1+2,f,c
  7332  001382  320E               	rrcf	___ftmul@f1+1,f,c
  7333  001384  320D               	rrcf	___ftmul@f1,f,c
  7334  001386  90D8               	bcf	status,0,c
  7335  001388  3219               	rrcf	___ftmul@f3_as_product+2,f,c
  7336  00138A  3218               	rrcf	___ftmul@f3_as_product+1,f,c
  7337  00138C  3217               	rrcf	___ftmul@f3_as_product,f,c
  7338  00138E  2E1A               	decfsz	___ftmul@cntr,f,c
  7339  001390  D7EE               	goto	i2l2949
  7340  001392  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  7341  001396  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  7342  00139A  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  7343  00139E  C016  F004         	movff	___ftmul@exp,___ftpack@exp
  7344  0013A2  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
  7345  0013A6  EC1F  F00B         	call	___ftpack	;wreg free
  7346  0013AA  C001  F00D         	movff	?___ftpack,?___ftmul
  7347  0013AE  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
  7348  0013B2  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
  7349  0013B6  0012               	return	
  7350  0013B8                     __end_of___ftmul:
  7351                           	opt stack 0
  7352                           pclatu	equ	0xFFB
  7353                           pclath	equ	0xFFA
  7354                           tblptru	equ	0xFF8
  7355                           tblptrh	equ	0xFF7
  7356                           tblptrl	equ	0xFF6
  7357                           tablat	equ	0xFF5
  7358                           prodh	equ	0xFF4
  7359                           prodl	equ	0xFF3
  7360                           intcon	equ	0xFF2
  7361                           intcon3	equ	0xFF0
  7362                           postinc0	equ	0xFEE
  7363                           fsr0h	equ	0xFEA
  7364                           fsr0l	equ	0xFE9
  7365                           wreg	equ	0xFE8
  7366                           plusw1	equ	0xFE3
  7367                           fsr1h	equ	0xFE2
  7368                           fsr1l	equ	0xFE1
  7369                           indf2	equ	0xFDF
  7370                           postinc2	equ	0xFDE
  7371                           postdec2	equ	0xFDD
  7372                           plusw2	equ	0xFDB
  7373                           fsr2h	equ	0xFDA
  7374                           fsr2l	equ	0xFD9
  7375                           status	equ	0xFD8
  7376                           
  7377 ;; *************** function ___ftge *****************
  7378 ;; Defined at:
  7379 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
  7380 ;; Parameters:    Size  Location     Type
  7381 ;;  ff1             3   27[COMRAM] float 
  7382 ;;  ff2             3   30[COMRAM] float 
  7383 ;; Auto vars:     Size  Location     Type
  7384 ;;		None
  7385 ;; Return value:  Size  Location     Type
  7386 ;;		None               void
  7387 ;; Registers used:
  7388 ;;		wreg, status,2, status,0
  7389 ;; Tracked objects:
  7390 ;;		On entry : 0/0
  7391 ;;		On exit  : 0/0
  7392 ;;		Unchanged: 0/0
  7393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7394 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7396 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7397 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7398 ;;Total ram usage:        9 bytes
  7399 ;; Hardware stack levels used:    1
  7400 ;; This function calls:
  7401 ;;		Nothing
  7402 ;; This function is called by:
  7403 ;;		_checkV
  7404 ;; This function uses a non-reentrant model
  7405 ;;
  7406                           
  7407                           	psect	text40
  7408  0016EC                     __ptext40:
  7409                           	opt stack 0
  7410  0016EC                     ___ftge:
  7411                           	opt stack 22
  7412                           
  7413                           ;incstack = 0
  7414  0016EC  AE1E               	btfss	___ftge@ff1+2,7,c
  7415  0016EE  D016               	goto	i2l3021
  7416  0016F0  C01C  F022         	movff	___ftge@ff1,??___ftge
  7417  0016F4  C01D  F023         	movff	___ftge@ff1+1,??___ftge+1
  7418  0016F8  C01E  F024         	movff	___ftge@ff1+2,??___ftge+2
  7419  0016FC  1E22               	comf	??___ftge,f,c
  7420  0016FE  1E23               	comf	??___ftge+1,f,c
  7421  001700  1E24               	comf	??___ftge+2,f,c
  7422  001702  2A22               	incf	??___ftge,f,c
  7423  001704  0E00               	movlw	0
  7424  001706  2223               	addwfc	??___ftge+1,f,c
  7425  001708  2224               	addwfc	??___ftge+2,f,c
  7426  00170A  0E00               	movlw	0
  7427  00170C  2422               	addwf	??___ftge,w,c
  7428  00170E  6E1C               	movwf	___ftge@ff1,c
  7429  001710  0E00               	movlw	0
  7430  001712  2023               	addwfc	??___ftge+1,w,c
  7431  001714  6E1D               	movwf	___ftge@ff1+1,c
  7432  001716  0E80               	movlw	128
  7433  001718  2024               	addwfc	??___ftge+2,w,c
  7434  00171A  6E1E               	movwf	___ftge@ff1+2,c
  7435  00171C                     i2l3021:
  7436  00171C  AE21               	btfss	___ftge@ff2+2,7,c
  7437  00171E  D016               	goto	i2l3025
  7438  001720  C01F  F022         	movff	___ftge@ff2,??___ftge
  7439  001724  C020  F023         	movff	___ftge@ff2+1,??___ftge+1
  7440  001728  C021  F024         	movff	___ftge@ff2+2,??___ftge+2
  7441  00172C  1E22               	comf	??___ftge,f,c
  7442  00172E  1E23               	comf	??___ftge+1,f,c
  7443  001730  1E24               	comf	??___ftge+2,f,c
  7444  001732  2A22               	incf	??___ftge,f,c
  7445  001734  0E00               	movlw	0
  7446  001736  2223               	addwfc	??___ftge+1,f,c
  7447  001738  2224               	addwfc	??___ftge+2,f,c
  7448  00173A  0E00               	movlw	0
  7449  00173C  2422               	addwf	??___ftge,w,c
  7450  00173E  6E1F               	movwf	___ftge@ff2,c
  7451  001740  0E00               	movlw	0
  7452  001742  2023               	addwfc	??___ftge+1,w,c
  7453  001744  6E20               	movwf	___ftge@ff2+1,c
  7454  001746  0E80               	movlw	128
  7455  001748  2024               	addwfc	??___ftge+2,w,c
  7456  00174A  6E21               	movwf	___ftge@ff2+2,c
  7457  00174C                     i2l3025:
  7458  00174C  0E00               	movlw	0
  7459  00174E  1A1C               	xorwf	___ftge@ff1,f,c
  7460  001750  0E00               	movlw	0
  7461  001752  1A1D               	xorwf	___ftge@ff1+1,f,c
  7462  001754  0E80               	movlw	128
  7463  001756  1A1E               	xorwf	___ftge@ff1+2,f,c
  7464  001758  0E00               	movlw	0
  7465  00175A  1A1F               	xorwf	___ftge@ff2,f,c
  7466  00175C  0E00               	movlw	0
  7467  00175E  1A20               	xorwf	___ftge@ff2+1,f,c
  7468  001760  0E80               	movlw	128
  7469  001762  1A21               	xorwf	___ftge@ff2+2,f,c
  7470  001764  501F               	movf	___ftge@ff2,w,c
  7471  001766  5C1C               	subwf	___ftge@ff1,w,c
  7472  001768  5020               	movf	___ftge@ff2+1,w,c
  7473  00176A  581D               	subwfb	___ftge@ff1+1,w,c
  7474  00176C  5021               	movf	___ftge@ff2+2,w,c
  7475  00176E  581E               	subwfb	___ftge@ff1+2,w,c
  7476  001770  B0D8               	btfsc	status,0,c
  7477  001772  D002               	goto	i2l3031
  7478  001774  90D8               	bcf	status,0,c
  7479  001776  0012               	return	
  7480  001778                     i2l3031:
  7481  001778  80D8               	bsf	status,0,c
  7482  00177A  0012               	return	
  7483  00177C                     __end_of___ftge:
  7484                           	opt stack 0
  7485                           pclatu	equ	0xFFB
  7486                           pclath	equ	0xFFA
  7487                           tblptru	equ	0xFF8
  7488                           tblptrh	equ	0xFF7
  7489                           tblptrl	equ	0xFF6
  7490                           tablat	equ	0xFF5
  7491                           prodh	equ	0xFF4
  7492                           prodl	equ	0xFF3
  7493                           intcon	equ	0xFF2
  7494                           intcon3	equ	0xFF0
  7495                           postinc0	equ	0xFEE
  7496                           fsr0h	equ	0xFEA
  7497                           fsr0l	equ	0xFE9
  7498                           wreg	equ	0xFE8
  7499                           plusw1	equ	0xFE3
  7500                           fsr1h	equ	0xFE2
  7501                           fsr1l	equ	0xFE1
  7502                           indf2	equ	0xFDF
  7503                           postinc2	equ	0xFDE
  7504                           postdec2	equ	0xFDD
  7505                           plusw2	equ	0xFDB
  7506                           fsr2h	equ	0xFDA
  7507                           fsr2l	equ	0xFD9
  7508                           status	equ	0xFD8
  7509                           
  7510 ;; *************** function ___awtoft *****************
  7511 ;; Defined at:
  7512 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awtoft.c"
  7513 ;; Parameters:    Size  Location     Type
  7514 ;;  c               2    8[COMRAM] int 
  7515 ;; Auto vars:     Size  Location     Type
  7516 ;;  sign            1   11[COMRAM] unsigned char 
  7517 ;; Return value:  Size  Location     Type
  7518 ;;                  3    8[COMRAM] float 
  7519 ;; Registers used:
  7520 ;;		wreg, status,2, status,0, cstack
  7521 ;; Tracked objects:
  7522 ;;		On entry : 0/0
  7523 ;;		On exit  : 0/0
  7524 ;;		Unchanged: 0/0
  7525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7526 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7527 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7529 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7530 ;;Total ram usage:        4 bytes
  7531 ;; Hardware stack levels used:    1
  7532 ;; Hardware stack levels required when called:    1
  7533 ;; This function calls:
  7534 ;;		___ftpack
  7535 ;; This function is called by:
  7536 ;;		_checkV
  7537 ;; This function uses a non-reentrant model
  7538 ;;
  7539                           
  7540                           	psect	text41
  7541  00204A                     __ptext41:
  7542                           	opt stack 0
  7543  00204A                     ___awtoft:
  7544                           	opt stack 21
  7545                           
  7546                           ;incstack = 0
  7547  00204A  0E00               	movlw	0
  7548  00204C  6E0C               	movwf	___awtoft@sign,c
  7549  00204E  AE0A               	btfss	___awtoft@c+1,7,c
  7550  002050  D006               	goto	i2l3013
  7551  002052  6C09               	negf	___awtoft@c,c
  7552  002054  1E0A               	comf	___awtoft@c+1,f,c
  7553  002056  B0D8               	btfsc	status,0,c
  7554  002058  2A0A               	incf	___awtoft@c+1,f,c
  7555  00205A  0E01               	movlw	1
  7556  00205C  6E0C               	movwf	___awtoft@sign,c
  7557  00205E                     i2l3013:
  7558  00205E  C009  F001         	movff	___awtoft@c,___ftpack@arg
  7559  002062  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  7560  002066  6A03               	clrf	___ftpack@arg+2,c
  7561  002068  0E8E               	movlw	142
  7562  00206A  6E04               	movwf	___ftpack@exp,c
  7563  00206C  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  7564  002070  EC1F  F00B         	call	___ftpack	;wreg free
  7565  002074  C001  F009         	movff	?___ftpack,?___awtoft
  7566  002078  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  7567  00207C  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  7568  002080  0012               	return	
  7569  002082                     __end_of___awtoft:
  7570                           	opt stack 0
  7571                           pclatu	equ	0xFFB
  7572                           pclath	equ	0xFFA
  7573                           tblptru	equ	0xFF8
  7574                           tblptrh	equ	0xFF7
  7575                           tblptrl	equ	0xFF6
  7576                           tablat	equ	0xFF5
  7577                           prodh	equ	0xFF4
  7578                           prodl	equ	0xFF3
  7579                           intcon	equ	0xFF2
  7580                           intcon3	equ	0xFF0
  7581                           postinc0	equ	0xFEE
  7582                           fsr0h	equ	0xFEA
  7583                           fsr0l	equ	0xFE9
  7584                           wreg	equ	0xFE8
  7585                           plusw1	equ	0xFE3
  7586                           fsr1h	equ	0xFE2
  7587                           fsr1l	equ	0xFE1
  7588                           indf2	equ	0xFDF
  7589                           postinc2	equ	0xFDE
  7590                           postdec2	equ	0xFDD
  7591                           plusw2	equ	0xFDB
  7592                           fsr2h	equ	0xFDA
  7593                           fsr2l	equ	0xFD9
  7594                           status	equ	0xFD8
  7595                           
  7596 ;; *************** function ___ftpack *****************
  7597 ;; Defined at:
  7598 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  7599 ;; Parameters:    Size  Location     Type
  7600 ;;  arg             3    0[COMRAM] unsigned um
  7601 ;;  exp             1    3[COMRAM] unsigned char 
  7602 ;;  sign            1    4[COMRAM] unsigned char 
  7603 ;; Auto vars:     Size  Location     Type
  7604 ;;		None
  7605 ;; Return value:  Size  Location     Type
  7606 ;;                  3    0[COMRAM] float 
  7607 ;; Registers used:
  7608 ;;		wreg, status,2, status,0
  7609 ;; Tracked objects:
  7610 ;;		On entry : 0/0
  7611 ;;		On exit  : 0/0
  7612 ;;		Unchanged: 0/0
  7613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7614 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7616 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7617 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7618 ;;Total ram usage:        8 bytes
  7619 ;; Hardware stack levels used:    1
  7620 ;; This function calls:
  7621 ;;		Nothing
  7622 ;; This function is called by:
  7623 ;;		___awtoft
  7624 ;;		___ftmul
  7625 ;; This function uses a non-reentrant model
  7626 ;;
  7627                           
  7628                           	psect	text42
  7629  00163E                     __ptext42:
  7630                           	opt stack 0
  7631  00163E                     ___ftpack:
  7632                           	opt stack 21
  7633                           
  7634                           ;incstack = 0
  7635  00163E  5004               	movf	___ftpack@exp,w,c
  7636  001640  B4D8               	btfsc	status,2,c
  7637  001642  D005               	goto	i2l2799
  7638  001644  5001               	movf	___ftpack@arg,w,c
  7639  001646  1002               	iorwf	___ftpack@arg+1,w,c
  7640  001648  1003               	iorwf	___ftpack@arg+2,w,c
  7641  00164A  A4D8               	btfss	status,2,c
  7642  00164C  D00C               	goto	i2l2805
  7643  00164E                     i2l2799:
  7644  00164E  0E00               	movlw	0
  7645  001650  6E01               	movwf	?___ftpack,c
  7646  001652  0E00               	movlw	0
  7647  001654  6E02               	movwf	?___ftpack+1,c
  7648  001656  0E00               	movlw	0
  7649  001658  6E03               	movwf	?___ftpack+2,c
  7650  00165A  0012               	return	
  7651  00165C                     i2l2803:
  7652  00165C  2A04               	incf	___ftpack@exp,f,c
  7653  00165E  90D8               	bcf	status,0,c
  7654  001660  3203               	rrcf	___ftpack@arg+2,f,c
  7655  001662  3202               	rrcf	___ftpack@arg+1,f,c
  7656  001664  3201               	rrcf	___ftpack@arg,f,c
  7657  001666                     i2l2805:
  7658  001666  0E00               	movlw	0
  7659  001668  1401               	andwf	___ftpack@arg,w,c
  7660  00166A  6E06               	movwf	??___ftpack& (0+255),c
  7661  00166C  0E00               	movlw	0
  7662  00166E  1402               	andwf	___ftpack@arg+1,w,c
  7663  001670  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7664  001672  0EFE               	movlw	254
  7665  001674  1403               	andwf	___ftpack@arg+2,w,c
  7666  001676  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7667  001678  5006               	movf	??___ftpack,w,c
  7668  00167A  1007               	iorwf	??___ftpack+1,w,c
  7669  00167C  1008               	iorwf	??___ftpack+2,w,c
  7670  00167E  B4D8               	btfsc	status,2,c
  7671  001680  D00C               	goto	i2l2811
  7672  001682  D7EC               	goto	i2l2803
  7673  001684                     i2l2807:
  7674  001684  2A04               	incf	___ftpack@exp,f,c
  7675  001686  0E01               	movlw	1
  7676  001688  2601               	addwf	___ftpack@arg,f,c
  7677  00168A  0E00               	movlw	0
  7678  00168C  2202               	addwfc	___ftpack@arg+1,f,c
  7679  00168E  0E00               	movlw	0
  7680  001690  2203               	addwfc	___ftpack@arg+2,f,c
  7681  001692  90D8               	bcf	status,0,c
  7682  001694  3203               	rrcf	___ftpack@arg+2,f,c
  7683  001696  3202               	rrcf	___ftpack@arg+1,f,c
  7684  001698  3201               	rrcf	___ftpack@arg,f,c
  7685  00169A                     i2l2811:
  7686  00169A  0E00               	movlw	0
  7687  00169C  1401               	andwf	___ftpack@arg,w,c
  7688  00169E  6E06               	movwf	??___ftpack& (0+255),c
  7689  0016A0  0E00               	movlw	0
  7690  0016A2  1402               	andwf	___ftpack@arg+1,w,c
  7691  0016A4  6E07               	movwf	(??___ftpack+1)& (0+255),c
  7692  0016A6  0EFF               	movlw	255
  7693  0016A8  1403               	andwf	___ftpack@arg+2,w,c
  7694  0016AA  6E08               	movwf	(??___ftpack+2)& (0+255),c
  7695  0016AC  5006               	movf	??___ftpack,w,c
  7696  0016AE  1007               	iorwf	??___ftpack+1,w,c
  7697  0016B0  1008               	iorwf	??___ftpack+2,w,c
  7698  0016B2  B4D8               	btfsc	status,2,c
  7699  0016B4  D006               	goto	i2l2815
  7700  0016B6  D7E6               	goto	i2l2807
  7701  0016B8                     i2l2813:
  7702  0016B8  0604               	decf	___ftpack@exp,f,c
  7703  0016BA  90D8               	bcf	status,0,c
  7704  0016BC  3601               	rlcf	___ftpack@arg,f,c
  7705  0016BE  3602               	rlcf	___ftpack@arg+1,f,c
  7706  0016C0  3603               	rlcf	___ftpack@arg+2,f,c
  7707  0016C2                     i2l2815:
  7708  0016C2  BE02               	btfsc	___ftpack@arg+1,7,c
  7709  0016C4  D003               	goto	i2l761
  7710  0016C6  0E02               	movlw	2
  7711  0016C8  6004               	cpfslt	___ftpack@exp,c
  7712  0016CA  D7F6               	goto	i2l2813
  7713  0016CC                     i2l761:
  7714  0016CC  A004               	btfss	___ftpack@exp,0,c
  7715  0016CE  9E02               	bcf	___ftpack@arg+1,7,c
  7716  0016D0  90D8               	bcf	status,0,c
  7717  0016D2  3204               	rrcf	___ftpack@exp,f,c
  7718  0016D4  5004               	movf	___ftpack@exp,w,c
  7719  0016D6  1203               	iorwf	___ftpack@arg+2,f,c
  7720  0016D8  5005               	movf	___ftpack@sign,w,c
  7721  0016DA  A4D8               	btfss	status,2,c
  7722  0016DC  8E03               	bsf	___ftpack@arg+2,7,c
  7723  0016DE  C001  F001         	movff	___ftpack@arg,?___ftpack
  7724  0016E2  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  7725  0016E6  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  7726  0016EA  0012               	return	
  7727  0016EC                     __end_of___ftpack:
  7728                           	opt stack 0
  7729                           pclatu	equ	0xFFB
  7730                           pclath	equ	0xFFA
  7731                           tblptru	equ	0xFF8
  7732                           tblptrh	equ	0xFF7
  7733                           tblptrl	equ	0xFF6
  7734                           tablat	equ	0xFF5
  7735                           prodh	equ	0xFF4
  7736                           prodl	equ	0xFF3
  7737                           intcon	equ	0xFF2
  7738                           intcon3	equ	0xFF0
  7739                           postinc0	equ	0xFEE
  7740                           fsr0h	equ	0xFEA
  7741                           fsr0l	equ	0xFE9
  7742                           wreg	equ	0xFE8
  7743                           plusw1	equ	0xFE3
  7744                           fsr1h	equ	0xFE2
  7745                           fsr1l	equ	0xFE1
  7746                           indf2	equ	0xFDF
  7747                           postinc2	equ	0xFDE
  7748                           postdec2	equ	0xFDD
  7749                           plusw2	equ	0xFDB
  7750                           fsr2h	equ	0xFDA
  7751                           fsr2l	equ	0xFD9
  7752                           status	equ	0xFD8
  7753                           
  7754 ;; *************** function _WriteRun *****************
  7755 ;; Defined at:
  7756 ;;		line 75 in file "eeprom.c"
  7757 ;; Parameters:    Size  Location     Type
  7758 ;;  sorted          2    6[COMRAM] PTR unsigned char 
  7759 ;;		 -> simulate@sorted(4), 
  7760 ;;  time            2    8[COMRAM] unsigned int 
  7761 ;; Auto vars:     Size  Location     Type
  7762 ;;  add             2   12[COMRAM] unsigned int 
  7763 ;; Return value:  Size  Location     Type
  7764 ;;                  1    wreg      void 
  7765 ;; Registers used:
  7766 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7767 ;; Tracked objects:
  7768 ;;		On entry : 0/0
  7769 ;;		On exit  : 0/0
  7770 ;;		Unchanged: 0/0
  7771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7772 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7773 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7774 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7775 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7776 ;;Total ram usage:        8 bytes
  7777 ;; Hardware stack levels used:    1
  7778 ;; Hardware stack levels required when called:    1
  7779 ;; This function calls:
  7780 ;;		_WriteEE
  7781 ;;		i2___wmul
  7782 ;; This function is called by:
  7783 ;;		_simulate
  7784 ;; This function uses a non-reentrant model
  7785 ;;
  7786                           
  7787                           	psect	text43
  7788  000F18                     __ptext43:
  7789                           	opt stack 0
  7790  000F18                     _WriteRun:
  7791                           	opt stack 23
  7792                           
  7793                           ;eeprom.c: 76: unsigned int add = ++Latest;
  7794                           
  7795                           ;incstack = 0
  7796  000F18  0100               	movlb	0	; () banked
  7797  000F1A  2BC8               	incf	_Latest& (0+255),f,b
  7798  000F1C  C0C8  F00D         	movff	_Latest,WriteRun@add
  7799  000F20  6A0E               	clrf	WriteRun@add+1,c
  7800                           
  7801                           ; BSR set to: 0
  7802                           ;eeprom.c: 77: if (add > 3) {
  7803  000F22  500E               	movf	WriteRun@add+1,w,c
  7804  000F24  E104               	bnz	i2u300_40
  7805  000F26  0E04               	movlw	4
  7806  000F28  5C0D               	subwf	WriteRun@add,w,c
  7807  000F2A  A0D8               	btfss	status,0,c
  7808  000F2C  D006               	goto	i2l3769
  7809  000F2E                     i2u300_40:
  7810                           
  7811                           ; BSR set to: 0
  7812                           ;eeprom.c: 78: add -= 4;
  7813  000F2E  0E04               	movlw	4
  7814  000F30  5E0D               	subwf	WriteRun@add,f,c
  7815  000F32  0E00               	movlw	0
  7816  000F34  5A0E               	subwfb	WriteRun@add+1,f,c
  7817                           
  7818                           ; BSR set to: 0
  7819                           ;eeprom.c: 79: Latest = add;
  7820  000F36  C00D  F0C8         	movff	WriteRun@add,_Latest
  7821  000F3A                     i2l3769:
  7822                           
  7823                           ; BSR set to: 0
  7824                           ;eeprom.c: 80: }
  7825                           ;eeprom.c: 81: add *= 5;
  7826  000F3A  C00D  F001         	movff	WriteRun@add,i2___wmul@multiplier
  7827  000F3E  C00E  F002         	movff	WriteRun@add+1,i2___wmul@multiplier+1
  7828  000F42  0E00               	movlw	0
  7829  000F44  6E04               	movwf	i2___wmul@multiplicand+1,c
  7830  000F46  0E05               	movlw	5
  7831  000F48  6E03               	movwf	i2___wmul@multiplicand,c
  7832  000F4A  ECEA  F010         	call	i2___wmul	;wreg free
  7833  000F4E  C001  F00D         	movff	?i2___wmul,WriteRun@add
  7834  000F52  C002  F00E         	movff	?i2___wmul+1,WriteRun@add+1
  7835                           
  7836                           ;eeprom.c: 82: WriteEE(add++ *8, time);
  7837  000F56  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  7838  000F5A  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  7839  000F5E  90D8               	bcf	status,0,c
  7840  000F60  360B               	rlcf	??_WriteRun,f,c
  7841  000F62  360C               	rlcf	??_WriteRun+1,f,c
  7842  000F64  90D8               	bcf	status,0,c
  7843  000F66  360B               	rlcf	??_WriteRun,f,c
  7844  000F68  360C               	rlcf	??_WriteRun+1,f,c
  7845  000F6A  90D8               	bcf	status,0,c
  7846  000F6C  360B               	rlcf	??_WriteRun,f,c
  7847  000F6E  360C               	rlcf	??_WriteRun+1,f,c
  7848  000F70  C00B  F001         	movff	??_WriteRun,WriteEE@address
  7849  000F74  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  7850  000F78  C009  F003         	movff	WriteRun@time,WriteEE@data
  7851  000F7C  ECD7  F010         	call	_WriteEE	;wreg free
  7852  000F80  4A0D               	infsnz	WriteRun@add,f,c
  7853  000F82  2A0E               	incf	WriteRun@add+1,f,c
  7854                           
  7855                           ;eeprom.c: 83: WriteEE(add++ *8, sorted[0]);
  7856  000F84  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  7857  000F88  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  7858  000F8C  90D8               	bcf	status,0,c
  7859  000F8E  360B               	rlcf	??_WriteRun,f,c
  7860  000F90  360C               	rlcf	??_WriteRun+1,f,c
  7861  000F92  90D8               	bcf	status,0,c
  7862  000F94  360B               	rlcf	??_WriteRun,f,c
  7863  000F96  360C               	rlcf	??_WriteRun+1,f,c
  7864  000F98  90D8               	bcf	status,0,c
  7865  000F9A  360B               	rlcf	??_WriteRun,f,c
  7866  000F9C  360C               	rlcf	??_WriteRun+1,f,c
  7867  000F9E  C00B  F001         	movff	??_WriteRun,WriteEE@address
  7868  000FA2  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  7869  000FA6  C007  FFD9         	movff	WriteRun@sorted,fsr2l
  7870  000FAA  C008  FFDA         	movff	WriteRun@sorted+1,fsr2h
  7871  000FAE  50DF               	movf	indf2,w,c
  7872  000FB0  6E03               	movwf	WriteEE@data,c
  7873  000FB2  ECD7  F010         	call	_WriteEE	;wreg free
  7874  000FB6  4A0D               	infsnz	WriteRun@add,f,c
  7875  000FB8  2A0E               	incf	WriteRun@add+1,f,c
  7876                           
  7877                           ;eeprom.c: 84: WriteEE(add++ *8, sorted[1]);
  7878  000FBA  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  7879  000FBE  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  7880  000FC2  90D8               	bcf	status,0,c
  7881  000FC4  360B               	rlcf	??_WriteRun,f,c
  7882  000FC6  360C               	rlcf	??_WriteRun+1,f,c
  7883  000FC8  90D8               	bcf	status,0,c
  7884  000FCA  360B               	rlcf	??_WriteRun,f,c
  7885  000FCC  360C               	rlcf	??_WriteRun+1,f,c
  7886  000FCE  90D8               	bcf	status,0,c
  7887  000FD0  360B               	rlcf	??_WriteRun,f,c
  7888  000FD2  360C               	rlcf	??_WriteRun+1,f,c
  7889  000FD4  C00B  F001         	movff	??_WriteRun,WriteEE@address
  7890  000FD8  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  7891  000FDC  EE20 F001          	lfsr	2,1
  7892  000FE0  5007               	movf	WriteRun@sorted,w,c
  7893  000FE2  26D9               	addwf	fsr2l,f,c
  7894  000FE4  5008               	movf	WriteRun@sorted+1,w,c
  7895  000FE6  22DA               	addwfc	fsr2h,f,c
  7896  000FE8  50DF               	movf	indf2,w,c
  7897  000FEA  6E03               	movwf	WriteEE@data,c
  7898  000FEC  ECD7  F010         	call	_WriteEE	;wreg free
  7899  000FF0  4A0D               	infsnz	WriteRun@add,f,c
  7900  000FF2  2A0E               	incf	WriteRun@add+1,f,c
  7901                           
  7902                           ;eeprom.c: 85: WriteEE(add++ *8, sorted[2]);
  7903  000FF4  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  7904  000FF8  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  7905  000FFC  90D8               	bcf	status,0,c
  7906  000FFE  360B               	rlcf	??_WriteRun,f,c
  7907  001000  360C               	rlcf	??_WriteRun+1,f,c
  7908  001002  90D8               	bcf	status,0,c
  7909  001004  360B               	rlcf	??_WriteRun,f,c
  7910  001006  360C               	rlcf	??_WriteRun+1,f,c
  7911  001008  90D8               	bcf	status,0,c
  7912  00100A  360B               	rlcf	??_WriteRun,f,c
  7913  00100C  360C               	rlcf	??_WriteRun+1,f,c
  7914  00100E  C00B  F001         	movff	??_WriteRun,WriteEE@address
  7915  001012  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  7916  001016  EE20 F002          	lfsr	2,2
  7917  00101A  5007               	movf	WriteRun@sorted,w,c
  7918  00101C  26D9               	addwf	fsr2l,f,c
  7919  00101E  5008               	movf	WriteRun@sorted+1,w,c
  7920  001020  22DA               	addwfc	fsr2h,f,c
  7921  001022  50DF               	movf	indf2,w,c
  7922  001024  6E03               	movwf	WriteEE@data,c
  7923  001026  ECD7  F010         	call	_WriteEE	;wreg free
  7924  00102A  4A0D               	infsnz	WriteRun@add,f,c
  7925  00102C  2A0E               	incf	WriteRun@add+1,f,c
  7926                           
  7927                           ;eeprom.c: 86: WriteEE(add++ *8, sorted[3]);
  7928  00102E  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  7929  001032  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  7930  001036  90D8               	bcf	status,0,c
  7931  001038  360B               	rlcf	??_WriteRun,f,c
  7932  00103A  360C               	rlcf	??_WriteRun+1,f,c
  7933  00103C  90D8               	bcf	status,0,c
  7934  00103E  360B               	rlcf	??_WriteRun,f,c
  7935  001040  360C               	rlcf	??_WriteRun+1,f,c
  7936  001042  90D8               	bcf	status,0,c
  7937  001044  360B               	rlcf	??_WriteRun,f,c
  7938  001046  360C               	rlcf	??_WriteRun+1,f,c
  7939  001048  C00B  F001         	movff	??_WriteRun,WriteEE@address
  7940  00104C  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  7941  001050  EE20 F003          	lfsr	2,3
  7942  001054  5007               	movf	WriteRun@sorted,w,c
  7943  001056  26D9               	addwf	fsr2l,f,c
  7944  001058  5008               	movf	WriteRun@sorted+1,w,c
  7945  00105A  22DA               	addwfc	fsr2h,f,c
  7946  00105C  50DF               	movf	indf2,w,c
  7947  00105E  6E03               	movwf	WriteEE@data,c
  7948  001060  ECD7  F010         	call	_WriteEE	;wreg free
  7949  001064  4A0D               	infsnz	WriteRun@add,f,c
  7950  001066  2A0E               	incf	WriteRun@add+1,f,c
  7951                           
  7952                           ;eeprom.c: 87: WriteEE(160, Latest);
  7953  001068  0E00               	movlw	0
  7954  00106A  6E02               	movwf	WriteEE@address+1,c
  7955  00106C  0EA0               	movlw	160
  7956  00106E  6E01               	movwf	WriteEE@address,c
  7957  001070  C0C8  F003         	movff	_Latest,WriteEE@data
  7958  001074  ECD7  F010         	call	_WriteEE	;wreg free
  7959  001078  0012               	return		;funcret
  7960  00107A                     __end_of_WriteRun:
  7961                           	opt stack 0
  7962                           pclatu	equ	0xFFB
  7963                           pclath	equ	0xFFA
  7964                           tblptru	equ	0xFF8
  7965                           tblptrh	equ	0xFF7
  7966                           tblptrl	equ	0xFF6
  7967                           tablat	equ	0xFF5
  7968                           prodh	equ	0xFF4
  7969                           prodl	equ	0xFF3
  7970                           intcon	equ	0xFF2
  7971                           intcon3	equ	0xFF0
  7972                           postinc0	equ	0xFEE
  7973                           fsr0h	equ	0xFEA
  7974                           fsr0l	equ	0xFE9
  7975                           wreg	equ	0xFE8
  7976                           plusw1	equ	0xFE3
  7977                           fsr1h	equ	0xFE2
  7978                           fsr1l	equ	0xFE1
  7979                           indf2	equ	0xFDF
  7980                           postinc2	equ	0xFDE
  7981                           postdec2	equ	0xFDD
  7982                           plusw2	equ	0xFDB
  7983                           fsr2h	equ	0xFDA
  7984                           fsr2l	equ	0xFD9
  7985                           status	equ	0xFD8
  7986                           
  7987 ;; *************** function _WriteEE *****************
  7988 ;; Defined at:
  7989 ;;		line 34 in file "eeprom.c"
  7990 ;; Parameters:    Size  Location     Type
  7991 ;;  address         2    0[COMRAM] unsigned int 
  7992 ;;  data            1    2[COMRAM] unsigned char 
  7993 ;; Auto vars:     Size  Location     Type
  7994 ;;		None
  7995 ;; Return value:  Size  Location     Type
  7996 ;;                  1    wreg      void 
  7997 ;; Registers used:
  7998 ;;		wreg, status,2
  7999 ;; Tracked objects:
  8000 ;;		On entry : 0/0
  8001 ;;		On exit  : 0/0
  8002 ;;		Unchanged: 0/0
  8003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8004 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8007 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8008 ;;Total ram usage:        3 bytes
  8009 ;; Hardware stack levels used:    1
  8010 ;; This function calls:
  8011 ;;		Nothing
  8012 ;; This function is called by:
  8013 ;;		_WriteRun
  8014 ;; This function uses a non-reentrant model
  8015 ;;
  8016                           
  8017                           	psect	text44
  8018  0021AE                     __ptext44:
  8019                           	opt stack 0
  8020  0021AE                     _WriteEE:
  8021                           	opt stack 23
  8022                           
  8023                           ;eeprom.c: 36: EEADRH = (unsigned char) (address >> 8);
  8024                           
  8025                           ;incstack = 0
  8026  0021AE  5002               	movf	WriteEE@address+1,w,c
  8027  0021B0  6EAA               	movwf	4010,c	;volatile
  8028                           
  8029                           ;eeprom.c: 37: EEADR = (unsigned char) address;
  8030  0021B2  C001  FFA9         	movff	WriteEE@address,4009	;volatile
  8031                           
  8032                           ;eeprom.c: 39: EEDATA = data;
  8033  0021B6  C003  FFA8         	movff	WriteEE@data,4008	;volatile
  8034                           
  8035                           ;eeprom.c: 40: EECON1bits.EEPGD = 0;
  8036  0021BA  9EA6               	bcf	4006,7,c	;volatile
  8037                           
  8038                           ;eeprom.c: 41: EECON1bits.CFGS = 0;
  8039  0021BC  9CA6               	bcf	4006,6,c	;volatile
  8040                           
  8041                           ;eeprom.c: 42: EECON1bits.WREN = 1;
  8042  0021BE  84A6               	bsf	4006,2,c	;volatile
  8043                           
  8044                           ;eeprom.c: 46: EECON2 = 0x55;
  8045  0021C0  0E55               	movlw	85
  8046  0021C2  6EA7               	movwf	4007,c	;volatile
  8047                           
  8048                           ;eeprom.c: 47: EECON2 = 0xAA;
  8049  0021C4  0EAA               	movlw	170
  8050  0021C6  6EA7               	movwf	4007,c	;volatile
  8051                           
  8052                           ;eeprom.c: 48: EECON1bits.WR = 1;
  8053  0021C8  82A6               	bsf	4006,1,c	;volatile
  8054  0021CA                     i2l429:
  8055  0021CA  A8A1               	btfss	4001,4,c	;volatile
  8056  0021CC  D7FE               	goto	i2l429
  8057                           
  8058                           ;eeprom.c: 53: PIR2bits.EEIF = 0;
  8059  0021CE  98A1               	bcf	4001,4,c	;volatile
  8060                           
  8061                           ;eeprom.c: 54: EECON1bits.WREN = 0;
  8062  0021D0  94A6               	bcf	4006,2,c	;volatile
  8063  0021D2  0012               	return		;funcret
  8064  0021D4                     __end_of_WriteEE:
  8065                           	opt stack 0
  8066                           pclatu	equ	0xFFB
  8067                           pclath	equ	0xFFA
  8068                           tblptru	equ	0xFF8
  8069                           tblptrh	equ	0xFF7
  8070                           tblptrl	equ	0xFF6
  8071                           tablat	equ	0xFF5
  8072                           prodh	equ	0xFF4
  8073                           prodl	equ	0xFF3
  8074                           intcon	equ	0xFF2
  8075                           intcon3	equ	0xFF0
  8076                           postinc0	equ	0xFEE
  8077                           fsr0h	equ	0xFEA
  8078                           fsr0l	equ	0xFE9
  8079                           wreg	equ	0xFE8
  8080                           plusw1	equ	0xFE3
  8081                           fsr1h	equ	0xFE2
  8082                           fsr1l	equ	0xFE1
  8083                           indf2	equ	0xFDF
  8084                           postinc2	equ	0xFDE
  8085                           postdec2	equ	0xFDD
  8086                           plusw2	equ	0xFDB
  8087                           fsr2h	equ	0xFDA
  8088                           fsr2l	equ	0xFD9
  8089                           status	equ	0xFD8
  8090                           
  8091 ;; *************** function _HexDecToDec2 *****************
  8092 ;; Defined at:
  8093 ;;		line 6 in file "modules.c"
  8094 ;; Parameters:    Size  Location     Type
  8095 ;;  hex             2    6[COMRAM] unsigned int 
  8096 ;; Auto vars:     Size  Location     Type
  8097 ;;  digit           2   13[COMRAM] unsigned int 
  8098 ;;  tenth           2   11[COMRAM] unsigned int 
  8099 ;; Return value:  Size  Location     Type
  8100 ;;                  2    6[COMRAM] unsigned int 
  8101 ;; Registers used:
  8102 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8103 ;; Tracked objects:
  8104 ;;		On entry : 0/0
  8105 ;;		On exit  : 0/0
  8106 ;;		Unchanged: 0/0
  8107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8108 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8109 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8110 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8111 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8112 ;;Total ram usage:        9 bytes
  8113 ;; Hardware stack levels used:    1
  8114 ;; Hardware stack levels required when called:    1
  8115 ;; This function calls:
  8116 ;;		i2___wmul
  8117 ;; This function is called by:
  8118 ;;		_simulate
  8119 ;; This function uses a non-reentrant model
  8120 ;;
  8121                           
  8122                           	psect	text45
  8123  001EC4                     __ptext45:
  8124                           	opt stack 0
  8125  001EC4                     _HexDecToDec2:
  8126                           	opt stack 23
  8127                           
  8128                           ;modules.c: 8: unsigned tenth = hex / 16;
  8129                           
  8130                           ;incstack = 0
  8131  001EC4  C007  F009         	movff	HexDecToDec2@hex,??_HexDecToDec2
  8132  001EC8  C008  F00A         	movff	HexDecToDec2@hex+1,??_HexDecToDec2+1
  8133  001ECC  0E04               	movlw	4
  8134  001ECE  6E0B               	movwf	(??_HexDecToDec2+2)& (0+255),c
  8135  001ED0                     i2u297_45:
  8136  001ED0  90D8               	bcf	status,0,c
  8137  001ED2  320A               	rrcf	??_HexDecToDec2+1,f,c
  8138  001ED4  3209               	rrcf	??_HexDecToDec2,f,c
  8139  001ED6  2E0B               	decfsz	(??_HexDecToDec2+2)& (0+255),f,c
  8140  001ED8  D7FB               	goto	i2u297_45
  8141  001EDA  C009  F00C         	movff	??_HexDecToDec2,HexDecToDec2@tenth
  8142  001EDE  C00A  F00D         	movff	??_HexDecToDec2+1,HexDecToDec2@tenth+1
  8143                           
  8144                           ;modules.c: 9: unsigned digit = hex % 16;
  8145  001EE2  0E0F               	movlw	15
  8146  001EE4  1407               	andwf	HexDecToDec2@hex,w,c
  8147  001EE6  6E0E               	movwf	HexDecToDec2@digit,c
  8148  001EE8  6A0F               	clrf	HexDecToDec2@digit+1,c
  8149                           
  8150                           ;modules.c: 10: return tenth * 10 + digit;
  8151  001EEA  C00C  F001         	movff	HexDecToDec2@tenth,i2___wmul@multiplier
  8152  001EEE  C00D  F002         	movff	HexDecToDec2@tenth+1,i2___wmul@multiplier+1
  8153  001EF2  0E00               	movlw	0
  8154  001EF4  6E04               	movwf	i2___wmul@multiplicand+1,c
  8155  001EF6  0E0A               	movlw	10
  8156  001EF8  6E03               	movwf	i2___wmul@multiplicand,c
  8157  001EFA  ECEA  F010         	call	i2___wmul	;wreg free
  8158  001EFE  500E               	movf	HexDecToDec2@digit,w,c
  8159  001F00  2401               	addwf	?i2___wmul,w,c
  8160  001F02  6E07               	movwf	?_HexDecToDec2,c
  8161  001F04  500F               	movf	HexDecToDec2@digit+1,w,c
  8162  001F06  2002               	addwfc	?i2___wmul+1,w,c
  8163  001F08  6E08               	movwf	?_HexDecToDec2+1,c
  8164  001F0A  0012               	return	
  8165  001F0C                     __end_of_HexDecToDec2:
  8166                           	opt stack 0
  8167                           pclatu	equ	0xFFB
  8168                           pclath	equ	0xFFA
  8169                           tblptru	equ	0xFF8
  8170                           tblptrh	equ	0xFF7
  8171                           tblptrl	equ	0xFF6
  8172                           tablat	equ	0xFF5
  8173                           prodh	equ	0xFF4
  8174                           prodl	equ	0xFF3
  8175                           intcon	equ	0xFF2
  8176                           intcon3	equ	0xFF0
  8177                           postinc0	equ	0xFEE
  8178                           fsr0h	equ	0xFEA
  8179                           fsr0l	equ	0xFE9
  8180                           wreg	equ	0xFE8
  8181                           plusw1	equ	0xFE3
  8182                           fsr1h	equ	0xFE2
  8183                           fsr1l	equ	0xFE1
  8184                           indf2	equ	0xFDF
  8185                           postinc2	equ	0xFDE
  8186                           postdec2	equ	0xFDD
  8187                           plusw2	equ	0xFDB
  8188                           fsr2h	equ	0xFDA
  8189                           fsr2l	equ	0xFD9
  8190                           status	equ	0xFD8
  8191                           
  8192 ;; *************** function _CW90 *****************
  8193 ;; Defined at:
  8194 ;;		line 19 in file "motors.c"
  8195 ;; Parameters:    Size  Location     Type
  8196 ;;  port            2   21[COMRAM] PTR int 
  8197 ;;		 -> simulate@portCW(6), 
  8198 ;; Auto vars:     Size  Location     Type
  8199 ;;		None
  8200 ;; Return value:  Size  Location     Type
  8201 ;;                  1    wreg      void 
  8202 ;; Registers used:
  8203 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8204 ;; Tracked objects:
  8205 ;;		On entry : 0/0
  8206 ;;		On exit  : 0/0
  8207 ;;		Unchanged: 0/0
  8208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8209 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8210 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8211 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8212 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8213 ;;Total ram usage:        8 bytes
  8214 ;; Hardware stack levels used:    1
  8215 ;; Hardware stack levels required when called:    2
  8216 ;; This function calls:
  8217 ;;		_PWMC
  8218 ;; This function is called by:
  8219 ;;		_simulate
  8220 ;; This function uses a non-reentrant model
  8221 ;;
  8222                           
  8223                           	psect	text46
  8224  001B60                     __ptext46:
  8225                           	opt stack 0
  8226  001B60                     _CW90:
  8227                           	opt stack 22
  8228                           
  8229                           ;motors.c: 21: if (port[0] + port[1] + port[2] == 0)return;
  8230                           
  8231                           ;incstack = 0
  8232  001B60  EE20 F004          	lfsr	2,4
  8233  001B64  5016               	movf	CW90@port,w,c
  8234  001B66  26D9               	addwf	fsr2l,f,c
  8235  001B68  5017               	movf	CW90@port+1,w,c
  8236  001B6A  22DA               	addwfc	fsr2h,f,c
  8237  001B6C  CFDE F018          	movff	postinc2,??_CW90
  8238  001B70  CFDD F019          	movff	postdec2,??_CW90+1
  8239  001B74  EE20 F002          	lfsr	2,2
  8240  001B78  5016               	movf	CW90@port,w,c
  8241  001B7A  26D9               	addwf	fsr2l,f,c
  8242  001B7C  5017               	movf	CW90@port+1,w,c
  8243  001B7E  22DA               	addwfc	fsr2h,f,c
  8244  001B80  CFDE F01A          	movff	postinc2,??_CW90+2
  8245  001B84  CFDD F01B          	movff	postdec2,??_CW90+3
  8246  001B88  C016  FFD9         	movff	CW90@port,fsr2l
  8247  001B8C  C017  FFDA         	movff	CW90@port+1,fsr2h
  8248  001B90  CFDE F01C          	movff	postinc2,??_CW90+4
  8249  001B94  CFDD F01D          	movff	postdec2,??_CW90+5
  8250  001B98  501A               	movf	??_CW90+2,w,c
  8251  001B9A  261C               	addwf	??_CW90+4,f,c
  8252  001B9C  501B               	movf	??_CW90+3,w,c
  8253  001B9E  221D               	addwfc	??_CW90+5,f,c
  8254  001BA0  5018               	movf	??_CW90,w,c
  8255  001BA2  261C               	addwf	??_CW90+4,f,c
  8256  001BA4  5019               	movf	??_CW90+1,w,c
  8257  001BA6  221D               	addwfc	??_CW90+5,f,c
  8258  001BA8  501C               	movf	??_CW90+4,w,c
  8259  001BAA  101D               	iorwf	??_CW90+5,w,c
  8260  001BAC  B4D8               	btfsc	status,2,c
  8261  001BAE  0012               	return	
  8262                           
  8263                           ;motors.c: 22: PWMC(3000, 96, port);
  8264  001BB0  0E0B               	movlw	11
  8265  001BB2  6E0A               	movwf	PWMC@widthus+1,c
  8266  001BB4  0EB8               	movlw	184
  8267  001BB6  6E09               	movwf	PWMC@widthus,c
  8268  001BB8  0E00               	movlw	0
  8269  001BBA  6E0C               	movwf	PWMC@cycles+1,c
  8270  001BBC  0E60               	movlw	96
  8271  001BBE  6E0B               	movwf	PWMC@cycles,c
  8272  001BC0  C016  F00D         	movff	CW90@port,PWMC@port
  8273  001BC4  C017  F00E         	movff	CW90@port+1,PWMC@port+1
  8274  001BC8  ECDC  F009         	call	_PWMC	;wreg free
  8275  001BCC  0012               	return		;funcret
  8276  001BCE                     __end_of_CW90:
  8277                           	opt stack 0
  8278                           pclatu	equ	0xFFB
  8279                           pclath	equ	0xFFA
  8280                           tblptru	equ	0xFF8
  8281                           tblptrh	equ	0xFF7
  8282                           tblptrl	equ	0xFF6
  8283                           tablat	equ	0xFF5
  8284                           prodh	equ	0xFF4
  8285                           prodl	equ	0xFF3
  8286                           intcon	equ	0xFF2
  8287                           intcon3	equ	0xFF0
  8288                           postinc0	equ	0xFEE
  8289                           fsr0h	equ	0xFEA
  8290                           fsr0l	equ	0xFE9
  8291                           wreg	equ	0xFE8
  8292                           plusw1	equ	0xFE3
  8293                           fsr1h	equ	0xFE2
  8294                           fsr1l	equ	0xFE1
  8295                           indf2	equ	0xFDF
  8296                           postinc2	equ	0xFDE
  8297                           postdec2	equ	0xFDD
  8298                           plusw2	equ	0xFDB
  8299                           fsr2h	equ	0xFDA
  8300                           fsr2l	equ	0xFD9
  8301                           status	equ	0xFD8
  8302                           
  8303 ;; *************** function _CCW90 *****************
  8304 ;; Defined at:
  8305 ;;		line 25 in file "motors.c"
  8306 ;; Parameters:    Size  Location     Type
  8307 ;;  port            2   21[COMRAM] PTR int 
  8308 ;;		 -> simulate@portCCW(6), 
  8309 ;; Auto vars:     Size  Location     Type
  8310 ;;		None
  8311 ;; Return value:  Size  Location     Type
  8312 ;;                  1    wreg      void 
  8313 ;; Registers used:
  8314 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8315 ;; Tracked objects:
  8316 ;;		On entry : 0/0
  8317 ;;		On exit  : 0/0
  8318 ;;		Unchanged: 0/0
  8319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8320 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8321 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8322 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8323 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8324 ;;Total ram usage:        8 bytes
  8325 ;; Hardware stack levels used:    1
  8326 ;; Hardware stack levels required when called:    2
  8327 ;; This function calls:
  8328 ;;		_PWMC
  8329 ;; This function is called by:
  8330 ;;		_simulate
  8331 ;; This function uses a non-reentrant model
  8332 ;;
  8333                           
  8334                           	psect	text47
  8335  001BCE                     __ptext47:
  8336                           	opt stack 0
  8337  001BCE                     _CCW90:
  8338                           	opt stack 22
  8339                           
  8340                           ;motors.c: 27: if (port[0] + port[1] + port[2] == 0)return;
  8341                           
  8342                           ;incstack = 0
  8343  001BCE  EE20 F004          	lfsr	2,4
  8344  001BD2  5016               	movf	CCW90@port,w,c
  8345  001BD4  26D9               	addwf	fsr2l,f,c
  8346  001BD6  5017               	movf	CCW90@port+1,w,c
  8347  001BD8  22DA               	addwfc	fsr2h,f,c
  8348  001BDA  CFDE F018          	movff	postinc2,??_CCW90
  8349  001BDE  CFDD F019          	movff	postdec2,??_CCW90+1
  8350  001BE2  EE20 F002          	lfsr	2,2
  8351  001BE6  5016               	movf	CCW90@port,w,c
  8352  001BE8  26D9               	addwf	fsr2l,f,c
  8353  001BEA  5017               	movf	CCW90@port+1,w,c
  8354  001BEC  22DA               	addwfc	fsr2h,f,c
  8355  001BEE  CFDE F01A          	movff	postinc2,??_CCW90+2
  8356  001BF2  CFDD F01B          	movff	postdec2,??_CCW90+3
  8357  001BF6  C016  FFD9         	movff	CCW90@port,fsr2l
  8358  001BFA  C017  FFDA         	movff	CCW90@port+1,fsr2h
  8359  001BFE  CFDE F01C          	movff	postinc2,??_CCW90+4
  8360  001C02  CFDD F01D          	movff	postdec2,??_CCW90+5
  8361  001C06  501A               	movf	??_CCW90+2,w,c
  8362  001C08  261C               	addwf	??_CCW90+4,f,c
  8363  001C0A  501B               	movf	??_CCW90+3,w,c
  8364  001C0C  221D               	addwfc	??_CCW90+5,f,c
  8365  001C0E  5018               	movf	??_CCW90,w,c
  8366  001C10  261C               	addwf	??_CCW90+4,f,c
  8367  001C12  5019               	movf	??_CCW90+1,w,c
  8368  001C14  221D               	addwfc	??_CCW90+5,f,c
  8369  001C16  501C               	movf	??_CCW90+4,w,c
  8370  001C18  101D               	iorwf	??_CCW90+5,w,c
  8371  001C1A  B4D8               	btfsc	status,2,c
  8372  001C1C  0012               	return	
  8373                           
  8374                           ;motors.c: 28: PWMC(300, 1400, port);
  8375  001C1E  0E01               	movlw	1
  8376  001C20  6E0A               	movwf	PWMC@widthus+1,c
  8377  001C22  0E2C               	movlw	44
  8378  001C24  6E09               	movwf	PWMC@widthus,c
  8379  001C26  0E05               	movlw	5
  8380  001C28  6E0C               	movwf	PWMC@cycles+1,c
  8381  001C2A  0E78               	movlw	120
  8382  001C2C  6E0B               	movwf	PWMC@cycles,c
  8383  001C2E  C016  F00D         	movff	CCW90@port,PWMC@port
  8384  001C32  C017  F00E         	movff	CCW90@port+1,PWMC@port+1
  8385  001C36  ECDC  F009         	call	_PWMC	;wreg free
  8386  001C3A  0012               	return		;funcret
  8387  001C3C                     __end_of_CCW90:
  8388                           	opt stack 0
  8389                           pclatu	equ	0xFFB
  8390                           pclath	equ	0xFFA
  8391                           tblptru	equ	0xFF8
  8392                           tblptrh	equ	0xFF7
  8393                           tblptrl	equ	0xFF6
  8394                           tablat	equ	0xFF5
  8395                           prodh	equ	0xFF4
  8396                           prodl	equ	0xFF3
  8397                           intcon	equ	0xFF2
  8398                           intcon3	equ	0xFF0
  8399                           postinc0	equ	0xFEE
  8400                           fsr0h	equ	0xFEA
  8401                           fsr0l	equ	0xFE9
  8402                           wreg	equ	0xFE8
  8403                           plusw1	equ	0xFE3
  8404                           fsr1h	equ	0xFE2
  8405                           fsr1l	equ	0xFE1
  8406                           indf2	equ	0xFDF
  8407                           postinc2	equ	0xFDE
  8408                           postdec2	equ	0xFDD
  8409                           plusw2	equ	0xFDB
  8410                           fsr2h	equ	0xFDA
  8411                           fsr2l	equ	0xFD9
  8412                           status	equ	0xFD8
  8413                           
  8414 ;; *************** function _PWMC *****************
  8415 ;; Defined at:
  8416 ;;		line 4 in file "motors.c"
  8417 ;; Parameters:    Size  Location     Type
  8418 ;;  widthus         2    8[COMRAM] int 
  8419 ;;  cycles          2   10[COMRAM] int 
  8420 ;;  port            2   12[COMRAM] PTR int 
  8421 ;;		 -> intrpt@portCW(6), simulate@portCCW(6), simulate@portCW(6), 
  8422 ;; Auto vars:     Size  Location     Type
  8423 ;;  countdown       2   19[COMRAM] int 
  8424 ;; Return value:  Size  Location     Type
  8425 ;;                  1    wreg      void 
  8426 ;; Registers used:
  8427 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8428 ;; Tracked objects:
  8429 ;;		On entry : 0/0
  8430 ;;		On exit  : 0/0
  8431 ;;		Unchanged: 0/0
  8432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8433 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8434 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8435 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8436 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8437 ;;Total ram usage:       13 bytes
  8438 ;; Hardware stack levels used:    1
  8439 ;; Hardware stack levels required when called:    1
  8440 ;; This function calls:
  8441 ;;		___awdiv
  8442 ;; This function is called by:
  8443 ;;		_intrpt
  8444 ;;		_CW90
  8445 ;;		_CCW90
  8446 ;; This function uses a non-reentrant model
  8447 ;;
  8448                           
  8449                           	psect	text48
  8450  0013B8                     __ptext48:
  8451                           	opt stack 0
  8452  0013B8                     _PWMC:
  8453                           	opt stack 22
  8454                           
  8455                           ;motors.c: 5: widthus /= 10;
  8456                           
  8457                           ;incstack = 0
  8458  0013B8  C009  F001         	movff	PWMC@widthus,___awdiv@dividend
  8459  0013BC  C00A  F002         	movff	PWMC@widthus+1,___awdiv@dividend+1
  8460  0013C0  0E00               	movlw	0
  8461  0013C2  6E04               	movwf	___awdiv@divisor+1,c
  8462  0013C4  0E0A               	movlw	10
  8463  0013C6  6E03               	movwf	___awdiv@divisor,c
  8464  0013C8  EC48  F00C         	call	___awdiv	;wreg free
  8465  0013CC  C001  F009         	movff	?___awdiv,PWMC@widthus
  8466  0013D0  C002  F00A         	movff	?___awdiv+1,PWMC@widthus+1
  8467                           
  8468                           ;motors.c: 6: widthus -= 1;
  8469  0013D4  0609               	decf	PWMC@widthus,f,c
  8470  0013D6  A0D8               	btfss	status,0,c
  8471  0013D8  060A               	decf	PWMC@widthus+1,f,c
  8472                           
  8473                           ;motors.c: 7: int countdown = widthus;
  8474  0013DA  C009  F014         	movff	PWMC@widthus,PWMC@countdown
  8475  0013DE  C00A  F015         	movff	PWMC@widthus+1,PWMC@countdown+1
  8476  0013E2                     i2l3217:
  8477  0013E2  BE0C               	btfsc	PWMC@cycles+1,7,c
  8478  0013E4  0012               	return	
  8479  0013E6  500C               	movf	PWMC@cycles+1,w,c
  8480  0013E8  E103               	bnz	i2l267
  8481  0013EA  040B               	decf	PWMC@cycles,w,c
  8482  0013EC  A0D8               	btfss	status,0,c
  8483  0013EE  0012               	return	
  8484  0013F0                     i2l267:
  8485                           
  8486                           ;motors.c: 9: countdown = widthus;
  8487  0013F0  C009  F014         	movff	PWMC@widthus,PWMC@countdown
  8488  0013F4  C00A  F015         	movff	PWMC@widthus+1,PWMC@countdown+1
  8489                           
  8490                           ;motors.c: 10: LATC0 = (1 ^ LATC0) & port[0];
  8491  0013F8  0E00               	movlw	0
  8492  0013FA  6E11               	movwf	_PWMC$1393,c
  8493  0013FC  B08B               	btfsc	3979,0,c	;volatile
  8494  0013FE  D00D               	goto	i2l3229
  8495  001400  C00D  FFD9         	movff	PWMC@port,fsr2l
  8496  001404  C00E  FFDA         	movff	PWMC@port+1,fsr2h
  8497  001408  CFDE F00F          	movff	postinc2,??_PWMC
  8498  00140C  CFDD F010          	movff	postdec2,??_PWMC+1
  8499  001410  300F               	rrcf	??_PWMC,w,c
  8500  001412  A0D8               	btfss	status,0,c
  8501  001414  D002               	goto	i2l3229
  8502  001416  0E01               	movlw	1
  8503  001418  6E11               	movwf	_PWMC$1393,c
  8504  00141A                     i2l3229:
  8505  00141A  B011               	btfsc	_PWMC$1393,0,c
  8506  00141C  D002               	bra	i2u230_45
  8507  00141E  908B               	bcf	3979,0,c	;volatile
  8508  001420  D001               	bra	i2u230_46
  8509  001422                     i2u230_45:
  8510  001422  808B               	bsf	3979,0,c	;volatile
  8511  001424                     i2u230_46:
  8512                           
  8513                           ;motors.c: 11: LATC1 = (1 ^ LATC1) & port[1];
  8514  001424  0E00               	movlw	0
  8515  001426  6E12               	movwf	_PWMC$1394,c
  8516  001428  B28B               	btfsc	3979,1,c	;volatile
  8517  00142A  D00F               	goto	i2l3237
  8518  00142C  EE20 F002          	lfsr	2,2
  8519  001430  500D               	movf	PWMC@port,w,c
  8520  001432  26D9               	addwf	fsr2l,f,c
  8521  001434  500E               	movf	PWMC@port+1,w,c
  8522  001436  22DA               	addwfc	fsr2h,f,c
  8523  001438  CFDE F00F          	movff	postinc2,??_PWMC
  8524  00143C  CFDD F010          	movff	postdec2,??_PWMC+1
  8525  001440  300F               	rrcf	??_PWMC,w,c
  8526  001442  A0D8               	btfss	status,0,c
  8527  001444  D002               	goto	i2l3237
  8528  001446  0E01               	movlw	1
  8529  001448  6E12               	movwf	_PWMC$1394,c
  8530  00144A                     i2l3237:
  8531  00144A  B012               	btfsc	_PWMC$1394,0,c
  8532  00144C  D002               	bra	i2u233_45
  8533  00144E  928B               	bcf	3979,1,c	;volatile
  8534  001450  D001               	bra	i2u233_46
  8535  001452                     i2u233_45:
  8536  001452  828B               	bsf	3979,1,c	;volatile
  8537  001454                     i2u233_46:
  8538                           
  8539                           ;motors.c: 12: LATC2 = (1 ^ LATC2) & port[2];
  8540  001454  0E00               	movlw	0
  8541  001456  6E13               	movwf	_PWMC$1395,c
  8542  001458  B48B               	btfsc	3979,2,c	;volatile
  8543  00145A  D00F               	goto	i2l3245
  8544  00145C  EE20 F004          	lfsr	2,4
  8545  001460  500D               	movf	PWMC@port,w,c
  8546  001462  26D9               	addwf	fsr2l,f,c
  8547  001464  500E               	movf	PWMC@port+1,w,c
  8548  001466  22DA               	addwfc	fsr2h,f,c
  8549  001468  CFDE F00F          	movff	postinc2,??_PWMC
  8550  00146C  CFDD F010          	movff	postdec2,??_PWMC+1
  8551  001470  300F               	rrcf	??_PWMC,w,c
  8552  001472  A0D8               	btfss	status,0,c
  8553  001474  D002               	goto	i2l3245
  8554  001476  0E01               	movlw	1
  8555  001478  6E13               	movwf	_PWMC$1395,c
  8556  00147A                     i2l3245:
  8557  00147A  B013               	btfsc	_PWMC$1395,0,c
  8558  00147C  D002               	bra	i2u236_45
  8559  00147E  948B               	bcf	3979,2,c	;volatile
  8560  001480  D001               	bra	i2u236_46
  8561  001482                     i2u236_45:
  8562  001482  848B               	bsf	3979,2,c	;volatile
  8563  001484                     i2u236_46:
  8564  001484                     i2l3247:
  8565  001484  BE15               	btfsc	PWMC@countdown+1,7,c
  8566  001486  D00D               	goto	i2l3255
  8567  001488  5015               	movf	PWMC@countdown+1,w,c
  8568  00148A  E103               	bnz	i2l3251
  8569  00148C  0414               	decf	PWMC@countdown,w,c
  8570  00148E  A0D8               	btfss	status,0,c
  8571  001490  D008               	goto	i2l3255
  8572  001492                     i2l3251:
  8573                           
  8574                           ;motors.c: 14: _delay((unsigned long)((5)*(8000000/4000000.0)));
  8575  001492  0E03               	movlw	3
  8576  001494                     i2u333_47:
  8577  001494  2EE8               	decfsz	wreg,f,c
  8578  001496  D7FE               	bra	i2u333_47
  8579  001498  F000               	nop	
  8580  00149A  0614               	decf	PWMC@countdown,f,c
  8581  00149C  A0D8               	btfss	status,0,c
  8582  00149E  0615               	decf	PWMC@countdown+1,f,c
  8583  0014A0  D7F1               	goto	i2l3247
  8584  0014A2                     i2l3255:
  8585  0014A2  060B               	decf	PWMC@cycles,f,c
  8586  0014A4  A0D8               	btfss	status,0,c
  8587  0014A6  060C               	decf	PWMC@cycles+1,f,c
  8588  0014A8  D79C               	goto	i2l3217
  8589  0014AA                     __end_of_PWMC:
  8590                           	opt stack 0
  8591                           pclatu	equ	0xFFB
  8592                           pclath	equ	0xFFA
  8593                           tblptru	equ	0xFF8
  8594                           tblptrh	equ	0xFF7
  8595                           tblptrl	equ	0xFF6
  8596                           tablat	equ	0xFF5
  8597                           prodh	equ	0xFF4
  8598                           prodl	equ	0xFF3
  8599                           intcon	equ	0xFF2
  8600                           intcon3	equ	0xFF0
  8601                           postinc0	equ	0xFEE
  8602                           fsr0h	equ	0xFEA
  8603                           fsr0l	equ	0xFE9
  8604                           wreg	equ	0xFE8
  8605                           plusw1	equ	0xFE3
  8606                           fsr1h	equ	0xFE2
  8607                           fsr1l	equ	0xFE1
  8608                           indf2	equ	0xFDF
  8609                           postinc2	equ	0xFDE
  8610                           postdec2	equ	0xFDD
  8611                           plusw2	equ	0xFDB
  8612                           fsr2h	equ	0xFDA
  8613                           fsr2l	equ	0xFD9
  8614                           status	equ	0xFD8
  8615                           
  8616 ;; *************** function ___awdiv *****************
  8617 ;; Defined at:
  8618 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  8619 ;; Parameters:    Size  Location     Type
  8620 ;;  dividend        2    0[COMRAM] int 
  8621 ;;  divisor         2    2[COMRAM] int 
  8622 ;; Auto vars:     Size  Location     Type
  8623 ;;  quotient        2    6[COMRAM] int 
  8624 ;;  sign            1    5[COMRAM] unsigned char 
  8625 ;;  counter         1    4[COMRAM] unsigned char 
  8626 ;; Return value:  Size  Location     Type
  8627 ;;                  2    0[COMRAM] int 
  8628 ;; Registers used:
  8629 ;;		wreg, status,2, status,0
  8630 ;; Tracked objects:
  8631 ;;		On entry : 0/0
  8632 ;;		On exit  : 0/0
  8633 ;;		Unchanged: 0/0
  8634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8635 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8636 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8638 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8639 ;;Total ram usage:        8 bytes
  8640 ;; Hardware stack levels used:    1
  8641 ;; This function calls:
  8642 ;;		Nothing
  8643 ;; This function is called by:
  8644 ;;		_PWMC
  8645 ;; This function uses a non-reentrant model
  8646 ;;
  8647                           
  8648                           	psect	text49
  8649  001890                     __ptext49:
  8650                           	opt stack 0
  8651  001890                     ___awdiv:
  8652                           	opt stack 22
  8653                           
  8654                           ;incstack = 0
  8655  001890  0E00               	movlw	0
  8656  001892  6E06               	movwf	___awdiv@sign,c
  8657  001894  AE04               	btfss	___awdiv@divisor+1,7,c
  8658  001896  D006               	goto	i2l2969
  8659  001898  6C03               	negf	___awdiv@divisor,c
  8660  00189A  1E04               	comf	___awdiv@divisor+1,f,c
  8661  00189C  B0D8               	btfsc	status,0,c
  8662  00189E  2A04               	incf	___awdiv@divisor+1,f,c
  8663  0018A0  0E01               	movlw	1
  8664  0018A2  6E06               	movwf	___awdiv@sign,c
  8665  0018A4                     i2l2969:
  8666  0018A4  AE02               	btfss	___awdiv@dividend+1,7,c
  8667  0018A6  D006               	goto	i2l2975
  8668  0018A8  6C01               	negf	___awdiv@dividend,c
  8669  0018AA  1E02               	comf	___awdiv@dividend+1,f,c
  8670  0018AC  B0D8               	btfsc	status,0,c
  8671  0018AE  2A02               	incf	___awdiv@dividend+1,f,c
  8672  0018B0  0E01               	movlw	1
  8673  0018B2  1A06               	xorwf	___awdiv@sign,f,c
  8674  0018B4                     i2l2975:
  8675  0018B4  0E00               	movlw	0
  8676  0018B6  6E08               	movwf	___awdiv@quotient+1,c
  8677  0018B8  0E00               	movlw	0
  8678  0018BA  6E07               	movwf	___awdiv@quotient,c
  8679  0018BC  5003               	movf	___awdiv@divisor,w,c
  8680  0018BE  1004               	iorwf	___awdiv@divisor+1,w,c
  8681  0018C0  B4D8               	btfsc	status,2,c
  8682  0018C2  D01C               	goto	i2l2997
  8683  0018C4  0E01               	movlw	1
  8684  0018C6  6E05               	movwf	___awdiv@counter,c
  8685  0018C8  D004               	goto	i2l2983
  8686  0018CA                     i2l2981:
  8687  0018CA  90D8               	bcf	status,0,c
  8688  0018CC  3603               	rlcf	___awdiv@divisor,f,c
  8689  0018CE  3604               	rlcf	___awdiv@divisor+1,f,c
  8690  0018D0  2A05               	incf	___awdiv@counter,f,c
  8691  0018D2                     i2l2983:
  8692  0018D2  AE04               	btfss	___awdiv@divisor+1,7,c
  8693  0018D4  D7FA               	goto	i2l2981
  8694  0018D6                     i2l2985:
  8695  0018D6  90D8               	bcf	status,0,c
  8696  0018D8  3607               	rlcf	___awdiv@quotient,f,c
  8697  0018DA  3608               	rlcf	___awdiv@quotient+1,f,c
  8698  0018DC  5003               	movf	___awdiv@divisor,w,c
  8699  0018DE  5C01               	subwf	___awdiv@dividend,w,c
  8700  0018E0  5004               	movf	___awdiv@divisor+1,w,c
  8701  0018E2  5802               	subwfb	___awdiv@dividend+1,w,c
  8702  0018E4  A0D8               	btfss	status,0,c
  8703  0018E6  D005               	goto	i2l2993
  8704  0018E8  5003               	movf	___awdiv@divisor,w,c
  8705  0018EA  5E01               	subwf	___awdiv@dividend,f,c
  8706  0018EC  5004               	movf	___awdiv@divisor+1,w,c
  8707  0018EE  5A02               	subwfb	___awdiv@dividend+1,f,c
  8708  0018F0  8007               	bsf	___awdiv@quotient,0,c
  8709  0018F2                     i2l2993:
  8710  0018F2  90D8               	bcf	status,0,c
  8711  0018F4  3204               	rrcf	___awdiv@divisor+1,f,c
  8712  0018F6  3203               	rrcf	___awdiv@divisor,f,c
  8713  0018F8  2E05               	decfsz	___awdiv@counter,f,c
  8714  0018FA  D7ED               	goto	i2l2985
  8715  0018FC                     i2l2997:
  8716  0018FC  5006               	movf	___awdiv@sign,w,c
  8717  0018FE  B4D8               	btfsc	status,2,c
  8718  001900  D004               	goto	i2l3001
  8719  001902  6C07               	negf	___awdiv@quotient,c
  8720  001904  1E08               	comf	___awdiv@quotient+1,f,c
  8721  001906  B0D8               	btfsc	status,0,c
  8722  001908  2A08               	incf	___awdiv@quotient+1,f,c
  8723  00190A                     i2l3001:
  8724  00190A  C007  F001         	movff	___awdiv@quotient,?___awdiv
  8725  00190E  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  8726  001912  0012               	return	
  8727  001914                     __end_of___awdiv:
  8728                           	opt stack 0
  8729                           pclatu	equ	0xFFB
  8730                           pclath	equ	0xFFA
  8731                           tblptru	equ	0xFF8
  8732                           tblptrh	equ	0xFF7
  8733                           tblptrl	equ	0xFF6
  8734                           tablat	equ	0xFF5
  8735                           prodh	equ	0xFF4
  8736                           prodl	equ	0xFF3
  8737                           intcon	equ	0xFF2
  8738                           intcon3	equ	0xFF0
  8739                           postinc0	equ	0xFEE
  8740                           fsr0h	equ	0xFEA
  8741                           fsr0l	equ	0xFE9
  8742                           wreg	equ	0xFE8
  8743                           plusw1	equ	0xFE3
  8744                           fsr1h	equ	0xFE2
  8745                           fsr1l	equ	0xFE1
  8746                           indf2	equ	0xFDF
  8747                           postinc2	equ	0xFDE
  8748                           postdec2	equ	0xFDD
  8749                           plusw2	equ	0xFDB
  8750                           fsr2h	equ	0xFDA
  8751                           fsr2l	equ	0xFD9
  8752                           status	equ	0xFD8
  8753                           
  8754 ;; *************** function _PermLog *****************
  8755 ;; Defined at:
  8756 ;;		line 90 in file "eeprom.c"
  8757 ;; Parameters:    Size  Location     Type
  8758 ;;		None
  8759 ;; Auto vars:     Size  Location     Type
  8760 ;;  sorted          4   49[COMRAM] unsigned char [4]
  8761 ;;  time            2   54[COMRAM] unsigned int 
  8762 ;;  backruns        1   56[COMRAM] unsigned char 
  8763 ;;  goback          1   53[COMRAM] unsigned char 
  8764 ;; Return value:  Size  Location     Type
  8765 ;;                  1    wreg      void 
  8766 ;; Registers used:
  8767 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8768 ;; Tracked objects:
  8769 ;;		On entry : 0/0
  8770 ;;		On exit  : 0/0
  8771 ;;		Unchanged: 0/0
  8772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8774 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8775 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8776 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8777 ;;Total ram usage:       10 bytes
  8778 ;; Hardware stack levels used:    1
  8779 ;; Hardware stack levels required when called:    4
  8780 ;; This function calls:
  8781 ;;		_ReadRun
  8782 ;;		_captureKeypad
  8783 ;;		_showInfo
  8784 ;;		i2_lcdInst
  8785 ;;		i2_printf
  8786 ;; This function is called by:
  8787 ;;		_intrpt
  8788 ;; This function uses a non-reentrant model
  8789 ;;
  8790                           
  8791                           	psect	text50
  8792  0014AA                     __ptext50:
  8793                           	opt stack 0
  8794  0014AA                     _PermLog:
  8795                           	opt stack 21
  8796                           
  8797                           ;eeprom.c: 91: unsigned char goback = 0;
  8798                           
  8799                           ;incstack = 0
  8800  0014AA  0E00               	movlw	0
  8801  0014AC  D065               	goto	L3
  8802  0014AE                     i2l4085:
  8803                           
  8804                           ;eeprom.c: 93: lcdInst(0b10000000);
  8805  0014AE  0E80               	movlw	128
  8806  0014B0  EC7A  F011         	call	i2_lcdInst
  8807                           
  8808                           ;eeprom.c: 94: printf("Permanent log:       ");
  8809  0014B4  0EB8               	movlw	low STR_42
  8810  0014B6  6E0D               	movwf	i2printf@f,c
  8811  0014B8  0EFE               	movlw	high STR_42
  8812  0014BA  6E0E               	movwf	i2printf@f+1,c
  8813  0014BC  EC3E  F002         	call	i2_printf	;wreg free
  8814                           
  8815                           ;eeprom.c: 95: lcdInst(0b11000000);
  8816  0014C0  0EC0               	movlw	192
  8817  0014C2  EC7A  F011         	call	i2_lcdInst
  8818                           
  8819                           ;eeprom.c: 96: printf("Which run?       ");
  8820  0014C6  0E5D               	movlw	low STR_43
  8821  0014C8  6E0D               	movwf	i2printf@f,c
  8822  0014CA  0EFF               	movlw	high STR_43
  8823  0014CC  6E0E               	movwf	i2printf@f+1,c
  8824  0014CE  EC3E  F002         	call	i2_printf	;wreg free
  8825                           
  8826                           ;eeprom.c: 97: unsigned char backruns = captureKeypad();
  8827  0014D2  EC1D  F011         	call	_captureKeypad	;wreg free
  8828  0014D6  5001               	movf	?_captureKeypad,w,c
  8829  0014D8  6E39               	movwf	PermLog@backruns,c
  8830                           
  8831                           ;eeprom.c: 98: if (backruns == 3)backruns = 2;
  8832  0014DA  0E03               	movlw	3
  8833  0014DC  1839               	xorwf	PermLog@backruns,w,c
  8834  0014DE  A4D8               	btfss	status,2,c
  8835  0014E0  D002               	goto	i2l4097
  8836  0014E2  0E02               	movlw	2
  8837  0014E4  6E39               	movwf	PermLog@backruns,c
  8838  0014E6                     i2l4097:
  8839                           
  8840                           ;eeprom.c: 99: if (backruns == 4)backruns = 3;
  8841  0014E6  0E04               	movlw	4
  8842  0014E8  1839               	xorwf	PermLog@backruns,w,c
  8843  0014EA  A4D8               	btfss	status,2,c
  8844  0014EC  D002               	goto	i2l4101
  8845  0014EE  0E03               	movlw	3
  8846  0014F0  6E39               	movwf	PermLog@backruns,c
  8847  0014F2                     i2l4101:
  8848                           
  8849                           ;eeprom.c: 100: if (backruns < 4) {
  8850  0014F2  0E04               	movlw	4
  8851  0014F4  6039               	cpfslt	PermLog@backruns,c
  8852  0014F6  D03F               	goto	i2l4119
  8853                           
  8854                           ;eeprom.c: 101: unsigned int time;
  8855                           ;eeprom.c: 102: unsigned char sorted[] = {0, 0, 0, 0};
  8856  0014F8  C0BC  F032         	movff	PermLog@F3082,PermLog@sorted
  8857  0014FC  C0BD  F033         	movff	PermLog@F3082+1,PermLog@sorted+1
  8858  001500  C0BE  F034         	movff	PermLog@F3082+2,PermLog@sorted+2
  8859  001504  C0BF  F035         	movff	PermLog@F3082+3,PermLog@sorted+3
  8860                           
  8861                           ;eeprom.c: 103: ReadRun(backruns, sorted, &time);
  8862  001508  0E32               	movlw	low PermLog@sorted
  8863  00150A  6E03               	movwf	ReadRun@sorted,c
  8864  00150C  0E00               	movlw	high PermLog@sorted
  8865  00150E  6E04               	movwf	ReadRun@sorted+1,c
  8866  001510  0E37               	movlw	low PermLog@time
  8867  001512  6E05               	movwf	ReadRun@time,c
  8868  001514  0E00               	movlw	high PermLog@time
  8869  001516  6E06               	movwf	ReadRun@time+1,c
  8870  001518  5039               	movf	PermLog@backruns,w,c
  8871  00151A  EC3D  F008         	call	_ReadRun
  8872                           
  8873                           ;eeprom.c: 104: lcdInst(0b10000000);
  8874  00151E  0E80               	movlw	128
  8875  001520  EC7A  F011         	call	i2_lcdInst
  8876                           
  8877                           ;eeprom.c: 105: printf("showing %u      ", backruns);
  8878  001524  0EA4               	movlw	low STR_44
  8879  001526  6E0D               	movwf	i2printf@f,c
  8880  001528  0EFF               	movlw	high STR_44
  8881  00152A  6E0E               	movwf	i2printf@f+1,c
  8882  00152C  C039  F00F         	movff	PermLog@backruns,?i2_printf+2
  8883  001530  6A10               	clrf	?i2_printf+3,c
  8884  001532  EC3E  F002         	call	i2_printf	;wreg free
  8885                           
  8886                           ;eeprom.c: 106: lcdInst(0b11000000);
  8887  001536  0EC0               	movlw	192
  8888  001538  EC7A  F011         	call	i2_lcdInst
  8889                           
  8890                           ;eeprom.c: 107: printf("runs before     ");
  8891  00153C  0EB5               	movlw	low STR_45
  8892  00153E  6E0D               	movwf	i2printf@f,c
  8893  001540  0EFF               	movlw	high STR_45
  8894  001542  6E0E               	movwf	i2printf@f+1,c
  8895  001544  EC3E  F002         	call	i2_printf	;wreg free
  8896                           
  8897                           ;eeprom.c: 108: _delay((unsigned long)((700)*(8000000/4000.0)));
  8898  001548  0E08               	movlw	8
  8899  00154A  6E31               	movwf	(??_PermLog+1)& (0+255),c
  8900  00154C  0E1B               	movlw	27
  8901  00154E  6E30               	movwf	??_PermLog& (0+255),c
  8902  001550  0E27               	movlw	39
  8903  001552                     i2u334_47:
  8904  001552  2EE8               	decfsz	wreg,f,c
  8905  001554  D7FE               	bra	i2u334_47
  8906  001556  2E30               	decfsz	??_PermLog& (0+255),f,c
  8907  001558  D7FC               	bra	i2u334_47
  8908  00155A  2E31               	decfsz	(??_PermLog+1)& (0+255),f,c
  8909  00155C  D7FA               	bra	i2u334_47
  8910  00155E  F000               	nop	
  8911                           
  8912                           ;eeprom.c: 109: showInfo(time, sorted);
  8913  001560  C037  F023         	movff	PermLog@time,showInfo@time
  8914  001564  C038  F024         	movff	PermLog@time+1,showInfo@time+1
  8915  001568  0E32               	movlw	low PermLog@sorted
  8916  00156A  6E25               	movwf	showInfo@sorted,c
  8917  00156C  0E00               	movlw	high PermLog@sorted
  8918  00156E  6E26               	movwf	showInfo@sorted+1,c
  8919  001570  ECA1  F005         	call	_showInfo	;wreg free
  8920                           
  8921                           ;eeprom.c: 110: } else goback = 1;
  8922  001574  D002               	goto	i2l446
  8923  001576                     i2l4119:
  8924  001576  0E01               	movlw	1
  8925  001578                     L3:
  8926  001578  6E36               	movwf	PermLog@goback,c
  8927  00157A                     i2l446:
  8928  00157A  5036               	movf	PermLog@goback,w,c
  8929  00157C  A4D8               	btfss	status,2,c
  8930  00157E  0012               	return	
  8931  001580  D796               	goto	i2l4085
  8932  001582                     __end_of_PermLog:
  8933                           	opt stack 0
  8934                           pclatu	equ	0xFFB
  8935                           pclath	equ	0xFFA
  8936                           tblptru	equ	0xFF8
  8937                           tblptrh	equ	0xFF7
  8938                           tblptrl	equ	0xFF6
  8939                           tablat	equ	0xFF5
  8940                           prodh	equ	0xFF4
  8941                           prodl	equ	0xFF3
  8942                           intcon	equ	0xFF2
  8943                           intcon3	equ	0xFF0
  8944                           postinc0	equ	0xFEE
  8945                           fsr0h	equ	0xFEA
  8946                           fsr0l	equ	0xFE9
  8947                           wreg	equ	0xFE8
  8948                           plusw1	equ	0xFE3
  8949                           fsr1h	equ	0xFE2
  8950                           fsr1l	equ	0xFE1
  8951                           indf2	equ	0xFDF
  8952                           postinc2	equ	0xFDE
  8953                           postdec2	equ	0xFDD
  8954                           plusw2	equ	0xFDB
  8955                           fsr2h	equ	0xFDA
  8956                           fsr2l	equ	0xFD9
  8957                           status	equ	0xFD8
  8958                           
  8959 ;; *************** function _showInfo *****************
  8960 ;; Defined at:
  8961 ;;		line 23 in file "modules.c"
  8962 ;; Parameters:    Size  Location     Type
  8963 ;;  time            2   34[COMRAM] unsigned int 
  8964 ;;  sorted          2   36[COMRAM] PTR unsigned char 
  8965 ;;		 -> PermLog@sorted(4), simulate@sorted(4), 
  8966 ;; Auto vars:     Size  Location     Type
  8967 ;;  stop            2   45[COMRAM] int 
  8968 ;;  type            2   43[COMRAM] int 
  8969 ;; Return value:  Size  Location     Type
  8970 ;;                  1    wreg      void 
  8971 ;; Registers used:
  8972 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8973 ;; Tracked objects:
  8974 ;;		On entry : 0/0
  8975 ;;		On exit  : 0/0
  8976 ;;		Unchanged: 0/0
  8977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8978 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8979 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8980 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8981 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8982 ;;Total ram usage:       13 bytes
  8983 ;; Hardware stack levels used:    1
  8984 ;; Hardware stack levels required when called:    3
  8985 ;; This function calls:
  8986 ;;		_captureKeypad
  8987 ;;		i2_lcdInst
  8988 ;;		i2_printf
  8989 ;; This function is called by:
  8990 ;;		_simulate
  8991 ;;		_PermLog
  8992 ;; This function uses a non-reentrant model
  8993 ;;
  8994                           
  8995                           	psect	text51
  8996  000B42                     __ptext51:
  8997                           	opt stack 0
  8998  000B42                     _showInfo:
  8999                           	opt stack 21
  9000                           
  9001                           ;modules.c: 24: lcdInst(0b10000000);
  9002                           
  9003                           ;incstack = 0
  9004  000B42  0E80               	movlw	128
  9005  000B44  EC7A  F011         	call	i2_lcdInst
  9006                           
  9007                           ;modules.c: 25: printf("Press a number          ");
  9008  000B48  0EF6               	movlw	low STR_21
  9009  000B4A  6E0D               	movwf	i2printf@f,c
  9010  000B4C  0EFD               	movlw	high STR_21
  9011  000B4E  6E0E               	movwf	i2printf@f+1,c
  9012  000B50  EC3E  F002         	call	i2_printf	;wreg free
  9013                           
  9014                           ;modules.c: 26: lcdInst(0b11000000);
  9015  000B54  0EC0               	movlw	192
  9016  000B56  EC7A  F011         	call	i2_lcdInst
  9017                           
  9018                           ;modules.c: 27: printf("For more info          ");
  9019  000B5A  0E71               	movlw	low STR_22
  9020  000B5C  6E0D               	movwf	i2printf@f,c
  9021  000B5E  0EFE               	movlw	high STR_22
  9022  000B60  6E0E               	movwf	i2printf@f+1,c
  9023  000B62  EC3E  F002         	call	i2_printf	;wreg free
  9024                           
  9025                           ;modules.c: 28: int type = 0;
  9026  000B66  0E00               	movlw	0
  9027  000B68  6E2D               	movwf	showInfo@type+1,c
  9028  000B6A  0E00               	movlw	0
  9029  000B6C  6E2C               	movwf	showInfo@type,c
  9030                           
  9031                           ;modules.c: 29: int stop = 0;
  9032  000B6E  0E00               	movlw	0
  9033  000B70  6E2F               	movwf	showInfo@stop+1,c
  9034  000B72  0E00               	movlw	0
  9035  000B74  D0D7               	goto	L4
  9036  000B76                     i2l3803:
  9037                           
  9038                           ;modules.c: 31: type = captureKeypad();
  9039  000B76  EC1D  F011         	call	_captureKeypad	;wreg free
  9040  000B7A  C001  F02C         	movff	?_captureKeypad,showInfo@type
  9041  000B7E  C002  F02D         	movff	?_captureKeypad+1,showInfo@type+1
  9042                           
  9043                           ;modules.c: 33: switch (type) {
  9044  000B82  D0D2               	goto	i2l3843
  9045  000B84                     i2l3805:
  9046                           
  9047                           ;modules.c: 35: lcdInst(0b10000000);
  9048  000B84  0E80               	movlw	128
  9049  000B86  EC7A  F011         	call	i2_lcdInst
  9050                           
  9051                           ;modules.c: 36: printf("Time Elapsed:          ");
  9052  000B8A  0E41               	movlw	low STR_23
  9053  000B8C  6E0D               	movwf	i2printf@f,c
  9054  000B8E  0EFE               	movlw	high STR_23
  9055  000B90  6E0E               	movwf	i2printf@f+1,c
  9056  000B92  EC3E  F002         	call	i2_printf	;wreg free
  9057                           
  9058                           ;modules.c: 37: lcdInst(0b11000000);
  9059  000B96  0EC0               	movlw	192
  9060  000B98  EC7A  F011         	call	i2_lcdInst
  9061                           
  9062                           ;modules.c: 38: printf("%u seconds          ", time);
  9063  000B9C  0E0D               	movlw	low STR_24
  9064  000B9E  6E0D               	movwf	i2printf@f,c
  9065  000BA0  0EFF               	movlw	high STR_24
  9066  000BA2  6E0E               	movwf	i2printf@f+1,c
  9067  000BA4  C023  F00F         	movff	showInfo@time,?i2_printf+2
  9068  000BA8  C024  F010         	movff	showInfo@time+1,?i2_printf+3
  9069  000BAC  EC3E  F002         	call	i2_printf	;wreg free
  9070                           
  9071                           ;modules.c: 39: break;
  9072  000BB0  D0D7               	goto	i2l3845
  9073  000BB2                     i2l3811:
  9074                           
  9075                           ;modules.c: 41: lcdInst(0b10000000);
  9076  000BB2  0E80               	movlw	128
  9077  000BB4  EC7A  F011         	call	i2_lcdInst
  9078                           
  9079                           ;modules.c: 42: printf("Total Sorted:          ");
  9080  000BB8  0E59               	movlw	low STR_25
  9081  000BBA  6E0D               	movwf	i2printf@f,c
  9082  000BBC  0EFE               	movlw	high STR_25
  9083  000BBE  6E0E               	movwf	i2printf@f+1,c
  9084  000BC0  EC3E  F002         	call	i2_printf	;wreg free
  9085                           
  9086                           ;modules.c: 43: lcdInst(0b11000000);
  9087  000BC4  0EC0               	movlw	192
  9088  000BC6  EC7A  F011         	call	i2_lcdInst
  9089                           
  9090                           ;modules.c: 44: printf("%u batteries          ", sorted[0] + sorted[1] + sorted[2] + sor
      +                          ted[3]);
  9091  000BCA  0EA1               	movlw	low STR_26
  9092  000BCC  6E0D               	movwf	i2printf@f,c
  9093  000BCE  0EFE               	movlw	high STR_26
  9094  000BD0  6E0E               	movwf	i2printf@f+1,c
  9095  000BD2  EE20 F003          	lfsr	2,3
  9096  000BD6  5025               	movf	showInfo@sorted,w,c
  9097  000BD8  26D9               	addwf	fsr2l,f,c
  9098  000BDA  5026               	movf	showInfo@sorted+1,w,c
  9099  000BDC  22DA               	addwfc	fsr2h,f,c
  9100  000BDE  50DF               	movf	indf2,w,c
  9101  000BE0  6E27               	movwf	??_showInfo& (0+255),c
  9102  000BE2  C025  FFD9         	movff	showInfo@sorted,fsr2l
  9103  000BE6  C026  FFDA         	movff	showInfo@sorted+1,fsr2h
  9104  000BEA  50DF               	movf	indf2,w,c
  9105  000BEC  6E28               	movwf	(??_showInfo+1)& (0+255),c
  9106  000BEE  6A29               	clrf	(??_showInfo+2)& (0+255),c
  9107  000BF0  EE20 F001          	lfsr	2,1
  9108  000BF4  5025               	movf	showInfo@sorted,w,c
  9109  000BF6  26D9               	addwf	fsr2l,f,c
  9110  000BF8  5026               	movf	showInfo@sorted+1,w,c
  9111  000BFA  22DA               	addwfc	fsr2h,f,c
  9112  000BFC  50DF               	movf	indf2,w,c
  9113  000BFE  6E2A               	movwf	(??_showInfo+3)& (0+255),c
  9114  000C00  502A               	movf	??_showInfo+3,w,c
  9115  000C02  2628               	addwf	??_showInfo+1,f,c
  9116  000C04  0E00               	movlw	0
  9117  000C06  2229               	addwfc	??_showInfo+2,f,c
  9118  000C08  EE20 F002          	lfsr	2,2
  9119  000C0C  5025               	movf	showInfo@sorted,w,c
  9120  000C0E  26D9               	addwf	fsr2l,f,c
  9121  000C10  5026               	movf	showInfo@sorted+1,w,c
  9122  000C12  22DA               	addwfc	fsr2h,f,c
  9123  000C14  50DF               	movf	indf2,w,c
  9124  000C16  6E2B               	movwf	(??_showInfo+4)& (0+255),c
  9125  000C18  502B               	movf	??_showInfo+4,w,c
  9126  000C1A  2628               	addwf	??_showInfo+1,f,c
  9127  000C1C  0E00               	movlw	0
  9128  000C1E  2229               	addwfc	??_showInfo+2,f,c
  9129  000C20  5027               	movf	??_showInfo,w,c
  9130  000C22  2428               	addwf	??_showInfo+1,w,c
  9131  000C24  6E0F               	movwf	?i2_printf+2,c
  9132  000C26  0E00               	movlw	0
  9133  000C28  2029               	addwfc	??_showInfo+2,w,c
  9134  000C2A  6E10               	movwf	?i2_printf+3,c
  9135  000C2C  EC3E  F002         	call	i2_printf	;wreg free
  9136                           
  9137                           ;modules.c: 45: break;
  9138  000C30  D097               	goto	i2l3845
  9139  000C32                     i2l3817:
  9140                           
  9141                           ;modules.c: 47: lcdInst(0b10000000);
  9142  000C32  0E80               	movlw	128
  9143  000C34  EC7A  F011         	call	i2_lcdInst
  9144                           
  9145                           ;modules.c: 48: printf("AA Sorted:          ");
  9146  000C38  0EE3               	movlw	low STR_27
  9147  000C3A  6E0D               	movwf	i2printf@f,c
  9148  000C3C  0EFE               	movlw	high STR_27
  9149  000C3E  6E0E               	movwf	i2printf@f+1,c
  9150  000C40  EC3E  F002         	call	i2_printf	;wreg free
  9151                           
  9152                           ;modules.c: 49: lcdInst(0b11000000);
  9153  000C44  0EC0               	movlw	192
  9154  000C46  EC7A  F011         	call	i2_lcdInst
  9155                           
  9156                           ;modules.c: 50: printf("%u             ", sorted[0]);
  9157  000C4A  0EC6               	movlw	low STR_28
  9158  000C4C  6E0D               	movwf	i2printf@f,c
  9159  000C4E  0EFF               	movlw	high STR_28
  9160  000C50  6E0E               	movwf	i2printf@f+1,c
  9161  000C52  C025  FFD9         	movff	showInfo@sorted,fsr2l
  9162  000C56  C026  FFDA         	movff	showInfo@sorted+1,fsr2h
  9163  000C5A  50DF               	movf	indf2,w,c
  9164  000C5C  6E27               	movwf	??_showInfo& (0+255),c
  9165  000C5E  5027               	movf	??_showInfo,w,c
  9166  000C60  6E0F               	movwf	?i2_printf+2,c
  9167  000C62  6A10               	clrf	?i2_printf+3,c
  9168  000C64  EC3E  F002         	call	i2_printf	;wreg free
  9169                           
  9170                           ;modules.c: 51: break;
  9171  000C68  D07B               	goto	i2l3845
  9172  000C6A                     i2l3823:
  9173                           
  9174                           ;modules.c: 53: lcdInst(0b10000000);
  9175  000C6A  0E80               	movlw	128
  9176  000C6C  EC7A  F011         	call	i2_lcdInst
  9177                           
  9178                           ;modules.c: 54: printf("C Sorted:          ");
  9179  000C70  0E36               	movlw	low STR_29
  9180  000C72  6E0D               	movwf	i2printf@f,c
  9181  000C74  0EFF               	movlw	high STR_29
  9182  000C76  6E0E               	movwf	i2printf@f+1,c
  9183  000C78  EC3E  F002         	call	i2_printf	;wreg free
  9184                           
  9185                           ;modules.c: 55: lcdInst(0b11000000);
  9186  000C7C  0EC0               	movlw	192
  9187  000C7E  EC7A  F011         	call	i2_lcdInst
  9188                           
  9189                           ;modules.c: 56: printf("%u             ", sorted[1]);
  9190  000C82  0EC6               	movlw	low STR_28
  9191  000C84  6E0D               	movwf	i2printf@f,c
  9192  000C86  0EFF               	movlw	high STR_28
  9193  000C88  6E0E               	movwf	i2printf@f+1,c
  9194  000C8A  EE20 F001          	lfsr	2,1
  9195  000C8E  5025               	movf	showInfo@sorted,w,c
  9196  000C90  26D9               	addwf	fsr2l,f,c
  9197  000C92  5026               	movf	showInfo@sorted+1,w,c
  9198  000C94  22DA               	addwfc	fsr2h,f,c
  9199  000C96  50DF               	movf	indf2,w,c
  9200  000C98  6E27               	movwf	??_showInfo& (0+255),c
  9201  000C9A  5027               	movf	??_showInfo,w,c
  9202  000C9C  6E0F               	movwf	?i2_printf+2,c
  9203  000C9E  6A10               	clrf	?i2_printf+3,c
  9204  000CA0  EC3E  F002         	call	i2_printf	;wreg free
  9205                           
  9206                           ;modules.c: 57: break;
  9207  000CA4  D05D               	goto	i2l3845
  9208  000CA6                     i2l3829:
  9209                           
  9210                           ;modules.c: 59: lcdInst(0b10000000);
  9211  000CA6  0E80               	movlw	128
  9212  000CA8  EC7A  F011         	call	i2_lcdInst
  9213                           
  9214                           ;modules.c: 60: printf("9V Sorted:          ");
  9215  000CAC  0EF8               	movlw	low STR_31
  9216  000CAE  6E0D               	movwf	i2printf@f,c
  9217  000CB0  0EFE               	movlw	high STR_31
  9218  000CB2  6E0E               	movwf	i2printf@f+1,c
  9219  000CB4  EC3E  F002         	call	i2_printf	;wreg free
  9220                           
  9221                           ;modules.c: 61: lcdInst(0b11000000);
  9222  000CB8  0EC0               	movlw	192
  9223  000CBA  EC7A  F011         	call	i2_lcdInst
  9224                           
  9225                           ;modules.c: 62: printf("%u             ", sorted[2]);
  9226  000CBE  0EC6               	movlw	low STR_28
  9227  000CC0  6E0D               	movwf	i2printf@f,c
  9228  000CC2  0EFF               	movlw	high STR_28
  9229  000CC4  6E0E               	movwf	i2printf@f+1,c
  9230  000CC6  EE20 F002          	lfsr	2,2
  9231  000CCA  5025               	movf	showInfo@sorted,w,c
  9232  000CCC  26D9               	addwf	fsr2l,f,c
  9233  000CCE  5026               	movf	showInfo@sorted+1,w,c
  9234  000CD0  22DA               	addwfc	fsr2h,f,c
  9235  000CD2  50DF               	movf	indf2,w,c
  9236  000CD4  6E27               	movwf	??_showInfo& (0+255),c
  9237  000CD6  5027               	movf	??_showInfo,w,c
  9238  000CD8  6E0F               	movwf	?i2_printf+2,c
  9239  000CDA  6A10               	clrf	?i2_printf+3,c
  9240  000CDC  EC3E  F002         	call	i2_printf	;wreg free
  9241                           
  9242                           ;modules.c: 63: break;
  9243  000CE0  D03F               	goto	i2l3845
  9244  000CE2                     i2l3835:
  9245                           
  9246                           ;modules.c: 65: lcdInst(0b10000000);
  9247  000CE2  0E80               	movlw	128
  9248  000CE4  EC7A  F011         	call	i2_lcdInst
  9249                           
  9250                           ;modules.c: 66: printf("Uncharged:          ");
  9251  000CE8  0ECE               	movlw	low STR_33
  9252  000CEA  6E0D               	movwf	i2printf@f,c
  9253  000CEC  0EFE               	movlw	high STR_33
  9254  000CEE  6E0E               	movwf	i2printf@f+1,c
  9255  000CF0  EC3E  F002         	call	i2_printf	;wreg free
  9256                           
  9257                           ;modules.c: 67: lcdInst(0b11000000);
  9258  000CF4  0EC0               	movlw	192
  9259  000CF6  EC7A  F011         	call	i2_lcdInst
  9260                           
  9261                           ;modules.c: 68: printf("%u             ", sorted[3]);
  9262  000CFA  0EC6               	movlw	low STR_28
  9263  000CFC  6E0D               	movwf	i2printf@f,c
  9264  000CFE  0EFF               	movlw	high STR_28
  9265  000D00  6E0E               	movwf	i2printf@f+1,c
  9266  000D02  EE20 F003          	lfsr	2,3
  9267  000D06  5025               	movf	showInfo@sorted,w,c
  9268  000D08  26D9               	addwf	fsr2l,f,c
  9269  000D0A  5026               	movf	showInfo@sorted+1,w,c
  9270  000D0C  22DA               	addwfc	fsr2h,f,c
  9271  000D0E  50DF               	movf	indf2,w,c
  9272  000D10  6E27               	movwf	??_showInfo& (0+255),c
  9273  000D12  5027               	movf	??_showInfo,w,c
  9274  000D14  6E0F               	movwf	?i2_printf+2,c
  9275  000D16  6A10               	clrf	?i2_printf+3,c
  9276  000D18  EC3E  F002         	call	i2_printf	;wreg free
  9277                           
  9278                           ;modules.c: 69: break;
  9279  000D1C  D021               	goto	i2l3845
  9280  000D1E                     i2l3841:
  9281                           
  9282                           ;modules.c: 71: stop = 1;
  9283  000D1E  0E00               	movlw	0
  9284  000D20  6E2F               	movwf	showInfo@stop+1,c
  9285  000D22  0E01               	movlw	1
  9286  000D24                     L4:
  9287  000D24  6E2E               	movwf	showInfo@stop,c
  9288                           
  9289                           ;modules.c: 72: }
  9290  000D26  D01C               	goto	i2l3845
  9291  000D28                     i2l3843:
  9292  000D28  C02C  F027         	movff	showInfo@type,??_showInfo
  9293  000D2C  C02D  F028         	movff	showInfo@type+1,??_showInfo+1
  9294                           
  9295                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9296                           ; Switch size 1, requested type "space"
  9297                           ; Number of cases is 1, Range of values is 0 to 0
  9298                           ; switch strategies available:
  9299                           ; Name         Instructions Cycles
  9300                           ; simple_byte            4     3 (average)
  9301                           ;	Chosen strategy is simple_byte
  9302  000D30  5028               	movf	??_showInfo+1,w,c
  9303  000D32  0A00               	xorlw	0	; case 0
  9304  000D34  A4D8               	btfss	status,2,c
  9305  000D36  D7F3               	goto	i2l3841
  9306                           
  9307                           ; Switch size 1, requested type "space"
  9308                           ; Number of cases is 6, Range of values is 0 to 6
  9309                           ; switch strategies available:
  9310                           ; Name         Instructions Cycles
  9311                           ; simple_byte           19    10 (average)
  9312                           ;	Chosen strategy is simple_byte
  9313  000D38  5027               	movf	??_showInfo,w,c
  9314  000D3A  0A00               	xorlw	0	; case 0
  9315  000D3C  B4D8               	btfsc	status,2,c
  9316  000D3E  D722               	goto	i2l3805
  9317  000D40  0A01               	xorlw	1	; case 1
  9318  000D42  B4D8               	btfsc	status,2,c
  9319  000D44  D736               	goto	i2l3811
  9320  000D46  0A03               	xorlw	3	; case 2
  9321  000D48  B4D8               	btfsc	status,2,c
  9322  000D4A  D773               	goto	i2l3817
  9323  000D4C  0A06               	xorlw	6	; case 4
  9324  000D4E  B4D8               	btfsc	status,2,c
  9325  000D50  D78C               	goto	i2l3823
  9326  000D52  0A01               	xorlw	1	; case 5
  9327  000D54  B4D8               	btfsc	status,2,c
  9328  000D56  D7A7               	goto	i2l3829
  9329  000D58  0A03               	xorlw	3	; case 6
  9330  000D5A  B4D8               	btfsc	status,2,c
  9331  000D5C  D7C2               	goto	i2l3835
  9332  000D5E  D7DF               	goto	i2l3841
  9333  000D60                     i2l3845:
  9334  000D60  502E               	movf	showInfo@stop,w,c
  9335  000D62  102F               	iorwf	showInfo@stop+1,w,c
  9336  000D64  A4D8               	btfss	status,2,c
  9337  000D66  0012               	return	
  9338  000D68  D706               	goto	i2l3803
  9339  000D6A                     __end_of_showInfo:
  9340                           	opt stack 0
  9341                           pclatu	equ	0xFFB
  9342                           pclath	equ	0xFFA
  9343                           tblptru	equ	0xFF8
  9344                           tblptrh	equ	0xFF7
  9345                           tblptrl	equ	0xFF6
  9346                           tablat	equ	0xFF5
  9347                           prodh	equ	0xFF4
  9348                           prodl	equ	0xFF3
  9349                           intcon	equ	0xFF2
  9350                           intcon3	equ	0xFF0
  9351                           postinc0	equ	0xFEE
  9352                           fsr0h	equ	0xFEA
  9353                           fsr0l	equ	0xFE9
  9354                           wreg	equ	0xFE8
  9355                           plusw1	equ	0xFE3
  9356                           fsr1h	equ	0xFE2
  9357                           fsr1l	equ	0xFE1
  9358                           indf2	equ	0xFDF
  9359                           postinc2	equ	0xFDE
  9360                           postdec2	equ	0xFDD
  9361                           plusw2	equ	0xFDB
  9362                           fsr2h	equ	0xFDA
  9363                           fsr2l	equ	0xFD9
  9364                           status	equ	0xFD8
  9365                           
  9366 ;; *************** function i2_printf *****************
  9367 ;; Defined at:
  9368 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  9369 ;; Parameters:    Size  Location     Type
  9370 ;;  f               2   12[COMRAM] PTR const unsigned char 
  9371 ;;		 -> STR_45(17), STR_44(17), STR_43(18), STR_42(22), 
  9372 ;;		 -> STR_41(4), STR_40(3), STR_39(4), STR_38(5), 
  9373 ;;		 -> STR_37(4), STR_36(18), STR_35(20), STR_34(16), 
  9374 ;;		 -> STR_33(21), STR_32(16), STR_31(21), STR_30(16), 
  9375 ;;		 -> STR_29(20), STR_28(16), STR_27(21), STR_26(23), 
  9376 ;;		 -> STR_25(24), STR_24(21), STR_23(24), STR_22(24), 
  9377 ;;		 -> STR_21(25), STR_20(19), STR_19(18), STR_18(25), 
  9378 ;;		 -> STR_17(25), STR_16(27), STR_15(3), STR_14(3), 
  9379 ;;		 -> STR_13(3), STR_12(5), STR_11(3), STR_10(3), 
  9380 ;;		 -> STR_9(3), STR_8(4), STR_7(3), STR_6(3), 
  9381 ;;		 -> STR_5(3), STR_4(4), STR_3(5), STR_2(24), 
  9382 ;;		 -> STR_1(9), 
  9383 ;; Auto vars:     Size  Location     Type
  9384 ;;  printf          4    0        struct .
  9385 ;;  printf          2   31[COMRAM] int 
  9386 ;;  printf          2   28[COMRAM] unsigned int 
  9387 ;;  printf          2   25[COMRAM] unsigned int 
  9388 ;;  printf          2   23[COMRAM] PTR void [1]
  9389 ;;		 -> ?i2_printf(2), ?_printf(2), 
  9390 ;;  printf          2   20[COMRAM] PTR const unsigned char 
  9391 ;;		 -> printf@c(1), 
  9392 ;;  printf          1   33[COMRAM] char 
  9393 ;;  printf          1   30[COMRAM] unsigned char 
  9394 ;;  printf          1   27[COMRAM] char 
  9395 ;;  printf          1   22[COMRAM] unsigned char 
  9396 ;; Return value:  Size  Location     Type
  9397 ;;                  2   12[COMRAM] int 
  9398 ;; Registers used:
  9399 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9400 ;; Tracked objects:
  9401 ;;		On entry : 0/0
  9402 ;;		On exit  : 0/0
  9403 ;;		Unchanged: 0/0
  9404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9405 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9406 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9407 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9408 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9409 ;;Total ram usage:       22 bytes
  9410 ;; Hardware stack levels used:    1
  9411 ;; Hardware stack levels required when called:    2
  9412 ;; This function calls:
  9413 ;;		i2___lwdiv
  9414 ;;		i2___lwmod
  9415 ;;		i2___wmul
  9416 ;;		i2_isdigit
  9417 ;;		i2_putch
  9418 ;; This function is called by:
  9419 ;;		_simulate
  9420 ;;		_showInfo
  9421 ;;		_stopMoving
  9422 ;;		_printV
  9423 ;;		_checkAA
  9424 ;;		_checkC
  9425 ;;		_check9
  9426 ;;		_PermLog
  9427 ;; This function uses a non-reentrant model
  9428 ;;
  9429                           
  9430                           	psect	text52
  9431  00047C                     __ptext52:
  9432                           	opt stack 0
  9433  00047C                     i2_printf:
  9434                           	opt stack 22
  9435                           
  9436                           ;doprnt.c: 466: va_list ap;
  9437                           ;doprnt.c: 499: signed char c;
  9438                           ;doprnt.c: 501: int width;
  9439                           ;doprnt.c: 506: signed char prec;
  9440                           ;doprnt.c: 508: unsigned char flag;
  9441                           ;doprnt.c: 523: union {
  9442                           ;doprnt.c: 524: unsigned long vd;
  9443                           ;doprnt.c: 525: double integ;
  9444                           ;doprnt.c: 526: } tmpval;
  9445                           ;doprnt.c: 528: unsigned int val;
  9446                           ;doprnt.c: 529: unsigned len;
  9447                           ;doprnt.c: 530: const char * cp;
  9448                           ;doprnt.c: 533: *ap = __va_start();
  9449                           
  9450                           ;incstack = 0
  9451  00047C  0E0F               	movlw	low (?i2_printf+2)
  9452  00047E  6E18               	movwf	i2printf@ap,c
  9453  000480  0E00               	movlw	high (?i2_printf+2)
  9454  000482  6E19               	movwf	i2printf@ap+1,c
  9455                           
  9456                           ;doprnt.c: 536: while(c = *f++) {
  9457  000484  D1BB               	goto	i2l3201
  9458  000486                     i2l3051:
  9459                           
  9460                           ;doprnt.c: 538: if(c != '%')
  9461  000486  0E25               	movlw	37
  9462  000488  1822               	xorwf	i2printf@c,w,c
  9463  00048A  B4D8               	btfsc	status,2,c
  9464  00048C  D004               	goto	i2l3055
  9465                           
  9466                           ;doprnt.c: 540: {
  9467                           ;doprnt.c: 541: (putch(c) );
  9468  00048E  5022               	movf	i2printf@c,w,c
  9469  000490  EC74  F011         	call	i2_putch
  9470                           
  9471                           ;doprnt.c: 542: continue;
  9472  000494  D1B3               	goto	i2l3201
  9473  000496                     i2l3055:
  9474                           
  9475                           ;doprnt.c: 543: }
  9476                           ;doprnt.c: 546: width = 0;
  9477  000496  0E00               	movlw	0
  9478  000498  6E21               	movwf	i2printf@width+1,c
  9479  00049A  0E00               	movlw	0
  9480  00049C  6E20               	movwf	i2printf@width,c
  9481                           
  9482                           ;doprnt.c: 548: flag = 0;
  9483  00049E  0E00               	movlw	0
  9484  0004A0  6E1F               	movwf	i2printf@flag,c
  9485                           
  9486                           ;doprnt.c: 551: switch(*f) {
  9487                           
  9488                           ;doprnt.c: 550: for(;;) {
  9489  0004A2  D003               	goto	i2l3061
  9490  0004A4                     i2l3057:
  9491                           
  9492                           ;doprnt.c: 580: flag |= 0x04;
  9493  0004A4  841F               	bsf	i2printf@flag,2,c
  9494                           
  9495                           ;doprnt.c: 581: f++;
  9496  0004A6  4A0D               	infsnz	i2printf@f,f,c
  9497  0004A8  2A0E               	incf	i2printf@f+1,f,c
  9498  0004AA                     i2l3061:
  9499  0004AA  C00D  FFF6         	movff	i2printf@f,tblptrl
  9500  0004AE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9501  0004B2                     	if	0	;tblptru may be non-zero
  9502  0004B2                     	endif
  9503  0004B2                     	if	0	;tblptru may be non-zero
  9504  0004B2                     	endif
  9505  0004B2  0008               	tblrd		*
  9506  0004B4  50F5               	movf	tablat,w,c
  9507                           
  9508                           ; Switch size 1, requested type "space"
  9509                           ; Number of cases is 1, Range of values is 48 to 48
  9510                           ; switch strategies available:
  9511                           ; Name         Instructions Cycles
  9512                           ; simple_byte            4     3 (average)
  9513                           ;	Chosen strategy is simple_byte
  9514  0004B6  0A30               	xorlw	48	; case 48
  9515  0004B8  B4D8               	btfsc	status,2,c
  9516  0004BA  D7F4               	goto	i2l3057
  9517                           
  9518                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  9519                           
  9520                           ;doprnt.c: 586: }
  9521                           
  9522                           ;doprnt.c: 585: break;
  9523  0004BC  C00D  FFF6         	movff	i2printf@f,tblptrl
  9524  0004C0  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9525  0004C4                     	if	0	;tblptru may be non-zero
  9526  0004C4                     	endif
  9527  0004C4                     	if	0	;tblptru may be non-zero
  9528  0004C4                     	endif
  9529  0004C4  0008               	tblrd		*
  9530  0004C6  50F5               	movf	tablat,w,c
  9531  0004C8  EC0E  F011         	call	i2_isdigit
  9532  0004CC  A0D8               	btfss	status,0,c
  9533  0004CE  D06F               	goto	i2l3101
  9534                           
  9535                           ;doprnt.c: 598: width = 0;
  9536  0004D0  0E00               	movlw	0
  9537  0004D2  6E21               	movwf	i2printf@width+1,c
  9538  0004D4  0E00               	movlw	0
  9539  0004D6  6E20               	movwf	i2printf@width,c
  9540  0004D8                     i2l3067:
  9541                           
  9542                           ;doprnt.c: 600: width *= 10;
  9543  0004D8  C020  F001         	movff	i2printf@width,i2___wmul@multiplier
  9544  0004DC  C021  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  9545  0004E0  0E00               	movlw	0
  9546  0004E2  6E04               	movwf	i2___wmul@multiplicand+1,c
  9547  0004E4  0E0A               	movlw	10
  9548  0004E6  6E03               	movwf	i2___wmul@multiplicand,c
  9549  0004E8  ECEA  F010         	call	i2___wmul	;wreg free
  9550  0004EC  C001  F020         	movff	?i2___wmul,i2printf@width
  9551  0004F0  C002  F021         	movff	?i2___wmul+1,i2printf@width+1
  9552                           
  9553                           ;doprnt.c: 601: width += *f++ - '0';
  9554  0004F4  0ED0               	movlw	208
  9555  0004F6  6E11               	movwf	??i2_printf& (0+255),c
  9556  0004F8  0EFF               	movlw	255
  9557  0004FA  6E12               	movwf	(??i2_printf+1)& (0+255),c
  9558  0004FC  C00D  FFF6         	movff	i2printf@f,tblptrl
  9559  000500  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9560  000504                     	if	0	;tblptru may be non-zero
  9561  000504                     	endif
  9562  000504                     	if	0	;tblptru may be non-zero
  9563  000504                     	endif
  9564  000504  0008               	tblrd		*
  9565  000506  50F5               	movf	tablat,w,c
  9566  000508  6E13               	movwf	(??i2_printf+2)& (0+255),c
  9567  00050A  6A14               	clrf	(??i2_printf+3)& (0+255),c
  9568  00050C  5011               	movf	??i2_printf,w,c
  9569  00050E  2613               	addwf	??i2_printf+2,f,c
  9570  000510  5012               	movf	??i2_printf+1,w,c
  9571  000512  2214               	addwfc	??i2_printf+3,f,c
  9572  000514  5013               	movf	??i2_printf+2,w,c
  9573  000516  2620               	addwf	i2printf@width,f,c
  9574  000518  5014               	movf	??i2_printf+3,w,c
  9575  00051A  2221               	addwfc	i2printf@width+1,f,c
  9576  00051C  4A0D               	infsnz	i2printf@f,f,c
  9577  00051E  2A0E               	incf	i2printf@f+1,f,c
  9578                           
  9579                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  9580  000520  C00D  FFF6         	movff	i2printf@f,tblptrl
  9581  000524  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9582  000528                     	if	0	;tblptru may be non-zero
  9583  000528                     	endif
  9584  000528                     	if	0	;tblptru may be non-zero
  9585  000528                     	endif
  9586  000528  0008               	tblrd		*
  9587  00052A  50F5               	movf	tablat,w,c
  9588  00052C  EC0E  F011         	call	i2_isdigit
  9589  000530  A0D8               	btfss	status,0,c
  9590  000532  D03D               	goto	i2l3101
  9591  000534  D7D1               	goto	i2l3067
  9592  000536                     i2l3075:
  9593                           
  9594                           ;doprnt.c: 721: flag |= 0x80;
  9595  000536  8E1F               	bsf	i2printf@flag,7,c
  9596                           
  9597                           ;doprnt.c: 723: break;
  9598  000538  D054               	goto	i2l3103
  9599  00053A                     i2l3077:
  9600                           
  9601                           ;doprnt.c: 757: if(width > len)
  9602  00053A  5020               	movf	i2printf@width,w,c
  9603  00053C  5C1A               	subwf	i2printf@len,w,c
  9604  00053E  5021               	movf	i2printf@width+1,w,c
  9605  000540  581B               	subwfb	i2printf@len+1,w,c
  9606  000542  B0D8               	btfsc	status,0,c
  9607  000544  D005               	goto	i2l3081
  9608                           
  9609                           ;doprnt.c: 758: width -= len;
  9610  000546  501A               	movf	i2printf@len,w,c
  9611  000548  5E20               	subwf	i2printf@width,f,c
  9612  00054A  501B               	movf	i2printf@len+1,w,c
  9613  00054C  5A21               	subwfb	i2printf@width+1,f,c
  9614  00054E  D008               	goto	i2l3085
  9615  000550                     i2l3081:
  9616                           
  9617                           ;doprnt.c: 759: else
  9618                           ;doprnt.c: 760: width = 0;
  9619  000550  0E00               	movlw	0
  9620  000552  6E21               	movwf	i2printf@width+1,c
  9621  000554  0E00               	movlw	0
  9622  000556  6E20               	movwf	i2printf@width,c
  9623                           
  9624                           ;doprnt.c: 764: while(width--)
  9625  000558  D003               	goto	i2l3085
  9626  00055A                     i2l3083:
  9627                           
  9628                           ;doprnt.c: 765: (putch(' ') );
  9629  00055A  0E20               	movlw	32
  9630  00055C  EC74  F011         	call	i2_putch
  9631  000560                     i2l3085:
  9632  000560  0620               	decf	i2printf@width,f,c
  9633  000562  A0D8               	btfss	status,0,c
  9634  000564  0621               	decf	i2printf@width+1,f,c
  9635  000566  2820               	incf	i2printf@width,w,c
  9636  000568  E1F8               	bnz	i2l3083
  9637  00056A  2821               	incf	i2printf@width+1,w,c
  9638  00056C  B4D8               	btfsc	status,2,c
  9639  00056E  D00A               	goto	i2l3091
  9640  000570  D7F4               	goto	i2l3083
  9641  000572                     i2l3087:
  9642                           
  9643                           ;doprnt.c: 768: (putch(*cp++) );
  9644  000572  C015  FFD9         	movff	i2printf@cp,fsr2l
  9645  000576  C016  FFDA         	movff	i2printf@cp+1,fsr2h
  9646  00057A  50DF               	movf	indf2,w,c
  9647  00057C  EC74  F011         	call	i2_putch
  9648  000580  4A15               	infsnz	i2printf@cp,f,c
  9649  000582  2A16               	incf	i2printf@cp+1,f,c
  9650  000584                     i2l3091:
  9651  000584  061A               	decf	i2printf@len,f,c
  9652  000586  A0D8               	btfss	status,0,c
  9653  000588  061B               	decf	i2printf@len+1,f,c
  9654  00058A  281A               	incf	i2printf@len,w,c
  9655  00058C  E1F2               	bnz	i2l3087
  9656  00058E  281B               	incf	i2printf@len+1,w,c
  9657  000590  B4D8               	btfsc	status,2,c
  9658  000592  D134               	goto	i2l3201
  9659  000594  D7EE               	goto	i2l3087
  9660  000596                     i2l3093:
  9661                           
  9662                           ;doprnt.c: 805: cp = (char *)&c;
  9663  000596  0E22               	movlw	low i2printf@c
  9664  000598  6E15               	movwf	i2printf@cp,c
  9665  00059A  0E00               	movlw	high i2printf@c
  9666  00059C  6E16               	movwf	i2printf@cp+1,c
  9667                           
  9668                           ;doprnt.c: 806: len = 1;
  9669  00059E  0E00               	movlw	0
  9670  0005A0  6E1B               	movwf	i2printf@len+1,c
  9671  0005A2  0E01               	movlw	1
  9672  0005A4  6E1A               	movwf	i2printf@len,c
  9673                           
  9674                           ;doprnt.c: 807: goto dostring;
  9675  0005A6  D7C9               	goto	i2l3077
  9676  0005A8                     i2l3097:
  9677                           
  9678                           ;doprnt.c: 818: flag |= 0xC0;
  9679  0005A8  0EC0               	movlw	192
  9680  0005AA  121F               	iorwf	i2printf@flag,f,c
  9681                           
  9682                           ;doprnt.c: 822: }
  9683                           
  9684                           ;doprnt.c: 819: break;
  9685  0005AC  D01A               	goto	i2l3103
  9686  0005AE                     i2l3101:
  9687  0005AE  C00D  FFF6         	movff	i2printf@f,tblptrl
  9688  0005B2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9689  0005B6  4A0D               	infsnz	i2printf@f,f,c
  9690  0005B8  2A0E               	incf	i2printf@f+1,f,c
  9691  0005BA                     	if	0	;tblptru may be non-zero
  9692  0005BA                     	endif
  9693  0005BA                     	if	0	;tblptru may be non-zero
  9694  0005BA                     	endif
  9695  0005BA  0008               	tblrd		*
  9696  0005BC  CFF5 F022          	movff	tablat,i2printf@c
  9697  0005C0  5022               	movf	i2printf@c,w,c
  9698                           
  9699                           ; Switch size 1, requested type "space"
  9700                           ; Number of cases is 5, Range of values is 0 to 120
  9701                           ; switch strategies available:
  9702                           ; Name         Instructions Cycles
  9703                           ; simple_byte           16     9 (average)
  9704                           ;	Chosen strategy is simple_byte
  9705  0005C2  0A00               	xorlw	0	; case 0
  9706  0005C4  B4D8               	btfsc	status,2,c
  9707  0005C6  0012               	return	
  9708  0005C8  0A64               	xorlw	100	; case 100
  9709  0005CA  B4D8               	btfsc	status,2,c
  9710  0005CC  D00A               	goto	i2l3103
  9711  0005CE  0A0D               	xorlw	13	; case 105
  9712  0005D0  B4D8               	btfsc	status,2,c
  9713  0005D2  D007               	goto	i2l3103
  9714  0005D4  0A1C               	xorlw	28	; case 117
  9715  0005D6  B4D8               	btfsc	status,2,c
  9716  0005D8  D7E7               	goto	i2l3097
  9717  0005DA  0A0D               	xorlw	13	; case 120
  9718  0005DC  B4D8               	btfsc	status,2,c
  9719  0005DE  D7AB               	goto	i2l3075
  9720  0005E0  D7DA               	goto	i2l3093
  9721  0005E2                     i2l3103:
  9722                           
  9723                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  9724  0005E2  C01F  F011         	movff	i2printf@flag,??i2_printf
  9725  0005E6  0EC0               	movlw	192
  9726  0005E8  1611               	andwf	??i2_printf,f,c
  9727  0005EA  A4D8               	btfss	status,2,c
  9728  0005EC  D015               	goto	i2l3115
  9729                           
  9730                           ;doprnt.c: 1253: {
  9731                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  9732  0005EE  C018  FFD9         	movff	i2printf@ap,fsr2l
  9733  0005F2  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  9734  0005F6  CFDE F01D          	movff	postinc2,i2printf@val
  9735  0005FA  CFDD F01E          	movff	postdec2,i2printf@val+1
  9736  0005FE  0E02               	movlw	2
  9737  000600  2618               	addwf	i2printf@ap,f,c
  9738  000602  0E00               	movlw	0
  9739  000604  2219               	addwfc	i2printf@ap+1,f,c
  9740                           
  9741                           ;doprnt.c: 1261: if((int)val < 0) {
  9742  000606  AE1E               	btfss	i2printf@val+1,7,c
  9743  000608  D044               	goto	i2l3149
  9744                           
  9745                           ;doprnt.c: 1262: flag |= 0x03;
  9746  00060A  0E03               	movlw	3
  9747  00060C  121F               	iorwf	i2printf@flag,f,c
  9748                           
  9749                           ;doprnt.c: 1263: val = -val;
  9750  00060E  6C1D               	negf	i2printf@val,c
  9751  000610  1E1E               	comf	i2printf@val+1,f,c
  9752  000612  B0D8               	btfsc	status,0,c
  9753  000614  2A1E               	incf	i2printf@val+1,f,c
  9754                           
  9755                           ;doprnt.c: 1264: }
  9756                           ;doprnt.c: 1266: }
  9757  000616  D03D               	goto	i2l3149
  9758  000618                     i2l3115:
  9759                           
  9760                           ;doprnt.c: 1268: else
  9761                           ;doprnt.c: 1273: {
  9762                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  9763  000618  C018  FFD9         	movff	i2printf@ap,fsr2l
  9764  00061C  C019  FFDA         	movff	i2printf@ap+1,fsr2h
  9765  000620  CFDE F01D          	movff	postinc2,i2printf@val
  9766  000624  CFDD F01E          	movff	postdec2,i2printf@val+1
  9767  000628  0E02               	movlw	2
  9768  00062A  2618               	addwf	i2printf@ap,f,c
  9769  00062C  0E00               	movlw	0
  9770  00062E  2219               	addwfc	i2printf@ap+1,f,c
  9771                           
  9772                           ;doprnt.c: 1287: }
  9773                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  9774  000630  D030               	goto	i2l3149
  9775  000632                     i2l3119:
  9776                           
  9777                           ;doprnt.c: 1302: case 0xC0:
  9778                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9779  000632  0E01               	movlw	1
  9780  000634  6E22               	movwf	i2printf@c,c
  9781  000636                     i2l3121:
  9782  000636  0E05               	movlw	5
  9783  000638  1822               	xorwf	i2printf@c,w,c
  9784  00063A  B4D8               	btfsc	status,2,c
  9785  00063C  D035               	goto	i2l3151
  9786                           
  9787                           ;doprnt.c: 1306: if(val < dpowers[c])
  9788  00063E  5022               	movf	i2printf@c,w,c
  9789  000640  0D02               	mullw	2
  9790  000642  0EC9               	movlw	low _dpowers
  9791  000644  24F3               	addwf	prodl,w,c
  9792  000646  6EF6               	movwf	tblptrl,c
  9793  000648  0EFD               	movlw	high _dpowers
  9794  00064A  20F4               	addwfc	prodh,w,c
  9795  00064C  6EF7               	movwf	tblptrh,c
  9796  00064E                     	if	0	;There are less than 3 active tblptr bytes
  9797  00064E                     	endif
  9798  00064E  0009               	tblrd		*+
  9799  000650  50F5               	movf	tablat,w,c
  9800  000652  5C1D               	subwf	i2printf@val,w,c
  9801  000654  0009               	tblrd		*+
  9802  000656  50F5               	movf	tablat,w,c
  9803  000658  581E               	subwfb	i2printf@val+1,w,c
  9804  00065A  A0D8               	btfss	status,0,c
  9805  00065C  D025               	goto	i2l3151
  9806                           
  9807                           ;doprnt.c: 1307: break;
  9808  00065E  2A22               	incf	i2printf@c,f,c
  9809  000660  D7EA               	goto	i2l3121
  9810  000662                     i2l3133:
  9811                           
  9812                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  9813  000662  0E01               	movlw	1
  9814  000664  6E22               	movwf	i2printf@c,c
  9815  000666                     i2l3135:
  9816  000666  0E04               	movlw	4
  9817  000668  1822               	xorwf	i2printf@c,w,c
  9818  00066A  B4D8               	btfsc	status,2,c
  9819  00066C  D01D               	goto	i2l3151
  9820                           
  9821                           ;doprnt.c: 1317: if(val < hexpowers[c])
  9822  00066E  5022               	movf	i2printf@c,w,c
  9823  000670  0D02               	mullw	2
  9824  000672  0ED3               	movlw	low _hexpowers
  9825  000674  24F3               	addwf	prodl,w,c
  9826  000676  6EF6               	movwf	tblptrl,c
  9827  000678  0EFD               	movlw	high _hexpowers
  9828  00067A  20F4               	addwfc	prodh,w,c
  9829  00067C  6EF7               	movwf	tblptrh,c
  9830  00067E                     	if	0	;There are less than 3 active tblptr bytes
  9831  00067E                     	endif
  9832  00067E  0009               	tblrd		*+
  9833  000680  50F5               	movf	tablat,w,c
  9834  000682  5C1D               	subwf	i2printf@val,w,c
  9835  000684  0009               	tblrd		*+
  9836  000686  50F5               	movf	tablat,w,c
  9837  000688  581E               	subwfb	i2printf@val+1,w,c
  9838  00068A  A0D8               	btfss	status,0,c
  9839  00068C  D00D               	goto	i2l3151
  9840                           
  9841                           ;doprnt.c: 1318: break;
  9842  00068E  2A22               	incf	i2printf@c,f,c
  9843  000690  D7EA               	goto	i2l3135
  9844  000692                     i2l3149:
  9845  000692  501F               	movf	i2printf@flag,w,c
  9846  000694  0BC0               	andlw	192
  9847                           
  9848                           ; Switch size 1, requested type "space"
  9849                           ; Number of cases is 3, Range of values is 0 to 192
  9850                           ; switch strategies available:
  9851                           ; Name         Instructions Cycles
  9852                           ; simple_byte           10     6 (average)
  9853                           ;	Chosen strategy is simple_byte
  9854  000696  0A00               	xorlw	0	; case 0
  9855  000698  B4D8               	btfsc	status,2,c
  9856  00069A  D7CB               	goto	i2l3119
  9857  00069C  0A80               	xorlw	128	; case 128
  9858  00069E  B4D8               	btfsc	status,2,c
  9859  0006A0  D7E0               	goto	i2l3133
  9860  0006A2  0A40               	xorlw	64	; case 192
  9861  0006A4  B4D8               	btfsc	status,2,c
  9862  0006A6  D7C5               	goto	i2l3119
  9863  0006A8                     i2l3151:
  9864                           
  9865                           ;doprnt.c: 1345: if(width && flag & 0x03)
  9866  0006A8  5020               	movf	i2printf@width,w,c
  9867  0006AA  1021               	iorwf	i2printf@width+1,w,c
  9868  0006AC  B4D8               	btfsc	status,2,c
  9869  0006AE  D009               	goto	i2l3157
  9870  0006B0  C01F  F011         	movff	i2printf@flag,??i2_printf
  9871  0006B4  0E03               	movlw	3
  9872  0006B6  1611               	andwf	??i2_printf,f,c
  9873  0006B8  B4D8               	btfsc	status,2,c
  9874  0006BA  D003               	goto	i2l3157
  9875                           
  9876                           ;doprnt.c: 1346: width--;
  9877  0006BC  0620               	decf	i2printf@width,f,c
  9878  0006BE  A0D8               	btfss	status,0,c
  9879  0006C0  0621               	decf	i2printf@width+1,f,c
  9880  0006C2                     i2l3157:
  9881                           
  9882                           ;doprnt.c: 1381: if(width > c)
  9883  0006C2  0E80               	movlw	128
  9884  0006C4  BE22               	btfsc	i2printf@c,7,c
  9885  0006C6  0E7F               	movlw	127
  9886  0006C8  6E11               	movwf	??i2_printf& (0+255),c
  9887  0006CA  5020               	movf	i2printf@width,w,c
  9888  0006CC  5C22               	subwf	i2printf@c,w,c
  9889  0006CE  5021               	movf	i2printf@width+1,w,c
  9890  0006D0  0A80               	xorlw	128
  9891  0006D2  5811               	subwfb	??i2_printf& (0+255),w,c
  9892  0006D4  B0D8               	btfsc	status,0,c
  9893  0006D6  D007               	goto	i2l3161
  9894                           
  9895                           ;doprnt.c: 1382: width -= c;
  9896  0006D8  5022               	movf	i2printf@c,w,c
  9897  0006DA  5E20               	subwf	i2printf@width,f,c
  9898  0006DC  0E00               	movlw	0
  9899  0006DE  BE22               	btfsc	i2printf@c,7,c
  9900  0006E0  0EFF               	movlw	255
  9901  0006E2  5A21               	subwfb	i2printf@width+1,f,c
  9902  0006E4  D004               	goto	i2l3163
  9903  0006E6                     i2l3161:
  9904                           
  9905                           ;doprnt.c: 1383: else
  9906                           ;doprnt.c: 1384: width = 0;
  9907  0006E6  0E00               	movlw	0
  9908  0006E8  6E21               	movwf	i2printf@width+1,c
  9909  0006EA  0E00               	movlw	0
  9910  0006EC  6E20               	movwf	i2printf@width,c
  9911  0006EE                     i2l3163:
  9912                           
  9913                           ;doprnt.c: 1387: if(flag & 0x04) {
  9914  0006EE  A41F               	btfss	i2printf@flag,2,c
  9915  0006F0  D014               	goto	i2l3175
  9916                           
  9917                           ;doprnt.c: 1392: if(flag & 0x03)
  9918  0006F2  C01F  F011         	movff	i2printf@flag,??i2_printf
  9919  0006F6  0E03               	movlw	3
  9920  0006F8  1611               	andwf	??i2_printf,f,c
  9921  0006FA  B4D8               	btfsc	status,2,c
  9922  0006FC  D003               	goto	i2l3169
  9923                           
  9924                           ;doprnt.c: 1393: (putch('-') );
  9925  0006FE  0E2D               	movlw	45
  9926  000700  EC74  F011         	call	i2_putch
  9927  000704                     i2l3169:
  9928                           
  9929                           ;doprnt.c: 1415: if(width)
  9930  000704  5020               	movf	i2printf@width,w,c
  9931  000706  1021               	iorwf	i2printf@width+1,w,c
  9932  000708  B4D8               	btfsc	status,2,c
  9933  00070A  D01E               	goto	i2l3185
  9934                           
  9935                           ;doprnt.c: 1417: (putch('0') );
  9936                           
  9937                           ;doprnt.c: 1416: do
  9938  00070C  0E30               	movlw	48
  9939  00070E  EC74  F011         	call	i2_putch
  9940                           
  9941                           ;doprnt.c: 1418: while(--width);
  9942  000712  0620               	decf	i2printf@width,f,c
  9943  000714  A0D8               	btfss	status,0,c
  9944  000716  0621               	decf	i2printf@width+1,f,c
  9945  000718  D7F5               	goto	i2l3169
  9946  00071A                     i2l3175:
  9947                           
  9948                           ;doprnt.c: 1422: {
  9949                           ;doprnt.c: 1424: if(width
  9950                           ;doprnt.c: 1428: )
  9951  00071A  5020               	movf	i2printf@width,w,c
  9952  00071C  1021               	iorwf	i2printf@width+1,w,c
  9953  00071E  B4D8               	btfsc	status,2,c
  9954  000720  D00A               	goto	i2l3181
  9955  000722                     i2l3177:
  9956                           
  9957                           ;doprnt.c: 1430: (putch(' ') );
  9958  000722  0E20               	movlw	32
  9959  000724  EC74  F011         	call	i2_putch
  9960                           
  9961                           ;doprnt.c: 1431: while(--width);
  9962  000728  0620               	decf	i2printf@width,f,c
  9963  00072A  A0D8               	btfss	status,0,c
  9964  00072C  0621               	decf	i2printf@width+1,f,c
  9965  00072E  5020               	movf	i2printf@width,w,c
  9966  000730  1021               	iorwf	i2printf@width+1,w,c
  9967  000732  A4D8               	btfss	status,2,c
  9968  000734  D7F6               	goto	i2l3177
  9969  000736                     i2l3181:
  9970                           
  9971                           ;doprnt.c: 1438: if(flag & 0x03)
  9972  000736  C01F  F011         	movff	i2printf@flag,??i2_printf
  9973  00073A  0E03               	movlw	3
  9974  00073C  1611               	andwf	??i2_printf,f,c
  9975  00073E  B4D8               	btfsc	status,2,c
  9976  000740  D003               	goto	i2l3185
  9977                           
  9978                           ;doprnt.c: 1439: (putch('-') );
  9979  000742  0E2D               	movlw	45
  9980  000744  EC74  F011         	call	i2_putch
  9981  000748                     i2l3185:
  9982                           
  9983                           ;doprnt.c: 1469: }
  9984                           ;doprnt.c: 1472: prec = c;
  9985  000748  C022  F01C         	movff	i2printf@c,i2printf@prec
  9986                           
  9987                           ;doprnt.c: 1474: while(prec--) {
  9988  00074C  D053               	goto	i2l3199
  9989  00074E                     i2l3187:
  9990                           
  9991                           ;doprnt.c: 1486: case 0xC0:
  9992                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  9993  00074E  501C               	movf	i2printf@prec,w,c
  9994  000750  0D02               	mullw	2
  9995  000752  0EC9               	movlw	low _dpowers
  9996  000754  24F3               	addwf	prodl,w,c
  9997  000756  6EF6               	movwf	tblptrl,c
  9998  000758  0EFD               	movlw	high _dpowers
  9999  00075A  20F4               	addwfc	prodh,w,c
 10000  00075C  6EF7               	movwf	tblptrh,c
 10001  00075E                     	if	0	;There are less than 3 active tblptr bytes
 10002  00075E                     	endif
 10003  00075E  0009               	tblrd		*+
 10004  000760  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 10005  000764  000A               	tblrd		*-
 10006  000766  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 10007  00076A  C01D  F001         	movff	i2printf@val,i2___lwdiv@dividend
 10008  00076E  C01E  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 10009  000772  EC39  F00F         	call	i2___lwdiv	;wreg free
 10010  000776  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 10011  00077A  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 10012  00077E  0E00               	movlw	0
 10013  000780  6E0B               	movwf	i2___lwmod@divisor+1,c
 10014  000782  0E0A               	movlw	10
 10015  000784  6E0A               	movwf	i2___lwmod@divisor,c
 10016  000786  ECCB  F00F         	call	i2___lwmod	;wreg free
 10017  00078A  5008               	movf	?i2___lwmod,w,c
 10018  00078C  0F30               	addlw	48
 10019  00078E  6E22               	movwf	i2printf@c,c
 10020                           
 10021                           ;doprnt.c: 1491: break;
 10022  000790  D02E               	goto	i2l3197
 10023  000792                     i2l3189:
 10024                           
 10025                           ;doprnt.c: 1499: {
 10026                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 10027  000792  C01D  F001         	movff	i2printf@val,i2___lwdiv@dividend
 10028  000796  C01E  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 10029  00079A  501C               	movf	i2printf@prec,w,c
 10030  00079C  0D02               	mullw	2
 10031  00079E  0ED3               	movlw	low _hexpowers
 10032  0007A0  24F3               	addwf	prodl,w,c
 10033  0007A2  6EF6               	movwf	tblptrl,c
 10034  0007A4  0EFD               	movlw	high _hexpowers
 10035  0007A6  20F4               	addwfc	prodh,w,c
 10036  0007A8  6EF7               	movwf	tblptrh,c
 10037  0007AA                     	if	0	;There are less than 3 active tblptr bytes
 10038  0007AA                     	endif
 10039  0007AA  0009               	tblrd		*+
 10040  0007AC  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 10041  0007B0  000A               	tblrd		*-
 10042  0007B2  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 10043  0007B6  EC39  F00F         	call	i2___lwdiv	;wreg free
 10044  0007BA  5001               	movf	?i2___lwdiv,w,c
 10045  0007BC  0B0F               	andlw	15
 10046  0007BE  6E17               	movwf	i2printf@idx,c
 10047                           
 10048                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 10049  0007C0  5017               	movf	i2printf@idx,w,c
 10050  0007C2  0D01               	mullw	1
 10051  0007C4  0E93               	movlw	low STR_46
 10052  0007C6  24F3               	addwf	prodl,w,c
 10053  0007C8  6EF6               	movwf	tblptrl,c
 10054  0007CA  0EFF               	movlw	high STR_46
 10055  0007CC  20F4               	addwfc	prodh,w,c
 10056  0007CE  6EF7               	movwf	tblptrh,c
 10057  0007D0                     	if	0	;There are less than 3 active tblptr bytes
 10058  0007D0                     	endif
 10059  0007D0  0008               	tblrd		*
 10060  0007D2  CFF5 F022          	movff	tablat,i2printf@c
 10061                           
 10062                           ;doprnt.c: 1523: }
 10063                           
 10064                           ;doprnt.c: 1508: }
 10065                           ;doprnt.c: 1510: break;
 10066  0007D6  D00B               	goto	i2l3197
 10067  0007D8                     i2l3195:
 10068  0007D8  501F               	movf	i2printf@flag,w,c
 10069  0007DA  0BC0               	andlw	192
 10070                           
 10071                           ; Switch size 1, requested type "space"
 10072                           ; Number of cases is 3, Range of values is 0 to 192
 10073                           ; switch strategies available:
 10074                           ; Name         Instructions Cycles
 10075                           ; simple_byte           10     6 (average)
 10076                           ;	Chosen strategy is simple_byte
 10077  0007DC  0A00               	xorlw	0	; case 0
 10078  0007DE  B4D8               	btfsc	status,2,c
 10079  0007E0  D7B6               	goto	i2l3187
 10080  0007E2  0A80               	xorlw	128	; case 128
 10081  0007E4  B4D8               	btfsc	status,2,c
 10082  0007E6  D7D5               	goto	i2l3189
 10083  0007E8  0A40               	xorlw	64	; case 192
 10084  0007EA  B4D8               	btfsc	status,2,c
 10085  0007EC  D7B0               	goto	i2l3187
 10086  0007EE                     i2l3197:
 10087                           
 10088                           ;doprnt.c: 1524: (putch(c) );
 10089  0007EE  5022               	movf	i2printf@c,w,c
 10090  0007F0  EC74  F011         	call	i2_putch
 10091  0007F4                     i2l3199:
 10092  0007F4  061C               	decf	i2printf@prec,f,c
 10093  0007F6  281C               	incf	i2printf@prec,w,c
 10094  0007F8  A4D8               	btfss	status,2,c
 10095  0007FA  D7EE               	goto	i2l3195
 10096  0007FC                     i2l3201:
 10097  0007FC  C00D  FFF6         	movff	i2printf@f,tblptrl
 10098  000800  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 10099  000804  4A0D               	infsnz	i2printf@f,f,c
 10100  000806  2A0E               	incf	i2printf@f+1,f,c
 10101  000808                     	if	0	;tblptru may be non-zero
 10102  000808                     	endif
 10103  000808                     	if	0	;tblptru may be non-zero
 10104  000808                     	endif
 10105  000808  0008               	tblrd		*
 10106  00080A  CFF5 F022          	movff	tablat,i2printf@c
 10107  00080E  5022               	movf	i2printf@c,w,c
 10108  000810  B4D8               	btfsc	status,2,c
 10109  000812  0012               	return	
 10110  000814  D638               	goto	i2l3051
 10111  000816                     __end_ofi2_printf:
 10112                           	opt stack 0
 10113                           pclatu	equ	0xFFB
 10114                           pclath	equ	0xFFA
 10115                           tblptru	equ	0xFF8
 10116                           tblptrh	equ	0xFF7
 10117                           tblptrl	equ	0xFF6
 10118                           tablat	equ	0xFF5
 10119                           prodh	equ	0xFF4
 10120                           prodl	equ	0xFF3
 10121                           intcon	equ	0xFF2
 10122                           intcon3	equ	0xFF0
 10123                           postinc0	equ	0xFEE
 10124                           fsr0h	equ	0xFEA
 10125                           fsr0l	equ	0xFE9
 10126                           wreg	equ	0xFE8
 10127                           plusw1	equ	0xFE3
 10128                           fsr1h	equ	0xFE2
 10129                           fsr1l	equ	0xFE1
 10130                           indf2	equ	0xFDF
 10131                           postinc2	equ	0xFDE
 10132                           postdec2	equ	0xFDD
 10133                           plusw2	equ	0xFDB
 10134                           fsr2h	equ	0xFDA
 10135                           fsr2l	equ	0xFD9
 10136                           status	equ	0xFD8
 10137                           
 10138 ;; *************** function i2_putch *****************
 10139 ;; Defined at:
 10140 ;;		line 25 in file "lcd.c"
 10141 ;; Parameters:    Size  Location     Type
 10142 ;;  data            1    wreg     unsigned char 
 10143 ;; Auto vars:     Size  Location     Type
 10144 ;;  data            1    2[COMRAM] unsigned char 
 10145 ;; Return value:  Size  Location     Type
 10146 ;;                  1    wreg      void 
 10147 ;; Registers used:
 10148 ;;		wreg, status,2, status,0, cstack
 10149 ;; Tracked objects:
 10150 ;;		On entry : 0/0
 10151 ;;		On exit  : 0/0
 10152 ;;		Unchanged: 0/0
 10153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10155 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10157 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10158 ;;Total ram usage:        1 bytes
 10159 ;; Hardware stack levels used:    1
 10160 ;; Hardware stack levels required when called:    1
 10161 ;; This function calls:
 10162 ;;		i2_lcdNibble
 10163 ;; This function is called by:
 10164 ;;		i2_printf
 10165 ;; This function uses a non-reentrant model
 10166 ;;
 10167                           
 10168                           	psect	text53
 10169  0022E8                     __ptext53:
 10170                           	opt stack 0
 10171  0022E8                     i2_putch:
 10172                           	opt stack 22
 10173                           
 10174                           ;incstack = 0
 10175                           ;i2putch@data stored from wreg
 10176  0022E8  6E03               	movwf	i2putch@data,c
 10177                           
 10178                           ;lcd.c: 26: LATDbits.LATD2 = 1;
 10179  0022EA  848C               	bsf	3980,2,c	;volatile
 10180                           
 10181                           ;lcd.c: 27: lcdNibble(data);
 10182  0022EC  5003               	movf	i2putch@data,w,c
 10183  0022EE  EC0E  F00F         	call	i2_lcdNibble
 10184  0022F2  0012               	return		;funcret
 10185  0022F4                     __end_ofi2_putch:
 10186                           	opt stack 0
 10187                           pclatu	equ	0xFFB
 10188                           pclath	equ	0xFFA
 10189                           tblptru	equ	0xFF8
 10190                           tblptrh	equ	0xFF7
 10191                           tblptrl	equ	0xFF6
 10192                           tablat	equ	0xFF5
 10193                           prodh	equ	0xFF4
 10194                           prodl	equ	0xFF3
 10195                           intcon	equ	0xFF2
 10196                           intcon3	equ	0xFF0
 10197                           postinc0	equ	0xFEE
 10198                           fsr0h	equ	0xFEA
 10199                           fsr0l	equ	0xFE9
 10200                           wreg	equ	0xFE8
 10201                           plusw1	equ	0xFE3
 10202                           fsr1h	equ	0xFE2
 10203                           fsr1l	equ	0xFE1
 10204                           indf2	equ	0xFDF
 10205                           postinc2	equ	0xFDE
 10206                           postdec2	equ	0xFDD
 10207                           plusw2	equ	0xFDB
 10208                           fsr2h	equ	0xFDA
 10209                           fsr2l	equ	0xFD9
 10210                           status	equ	0xFD8
 10211                           
 10212 ;; *************** function i2_isdigit *****************
 10213 ;; Defined at:
 10214 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
 10215 ;; Parameters:    Size  Location     Type
 10216 ;;  c               1    wreg     unsigned char 
 10217 ;; Auto vars:     Size  Location     Type
 10218 ;;  c               1    2[COMRAM] unsigned char 
 10219 ;; Return value:  Size  Location     Type
 10220 ;;		None               void
 10221 ;; Registers used:
 10222 ;;		wreg, status,2, status,0
 10223 ;; Tracked objects:
 10224 ;;		On entry : 0/0
 10225 ;;		On exit  : 0/0
 10226 ;;		Unchanged: 0/0
 10227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10229 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10230 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10231 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10232 ;;Total ram usage:        3 bytes
 10233 ;; Hardware stack levels used:    1
 10234 ;; This function calls:
 10235 ;;		Nothing
 10236 ;; This function is called by:
 10237 ;;		i2_printf
 10238 ;; This function uses a non-reentrant model
 10239 ;;
 10240                           
 10241                           	psect	text54
 10242  00221C                     __ptext54:
 10243                           	opt stack 0
 10244  00221C                     i2_isdigit:
 10245                           	opt stack 23
 10246                           
 10247                           ;incstack = 0
 10248                           ;i2isdigit@c stored from wreg
 10249  00221C  6E03               	movwf	i2isdigit@c,c
 10250  00221E  0E00               	movlw	0
 10251  002220  6E02               	movwf	i2_isdigit$1054,c
 10252  002222  0E3A               	movlw	58
 10253  002224  6003               	cpfslt	i2isdigit@c,c
 10254  002226  D005               	goto	i2l2849
 10255  002228  0E2F               	movlw	47
 10256  00222A  6403               	cpfsgt	i2isdigit@c,c
 10257  00222C  D002               	goto	i2l2849
 10258  00222E  0E01               	movlw	1
 10259  002230  6E02               	movwf	i2_isdigit$1054,c
 10260  002232                     i2l2849:
 10261  002232  C002  F001         	movff	i2_isdigit$1054,??i2_isdigit
 10262  002236  3001               	rrcf	??i2_isdigit,w,c
 10263  002238  0012               	return	
 10264  00223A                     __end_ofi2_isdigit:
 10265                           	opt stack 0
 10266                           pclatu	equ	0xFFB
 10267                           pclath	equ	0xFFA
 10268                           tblptru	equ	0xFF8
 10269                           tblptrh	equ	0xFF7
 10270                           tblptrl	equ	0xFF6
 10271                           tablat	equ	0xFF5
 10272                           prodh	equ	0xFF4
 10273                           prodl	equ	0xFF3
 10274                           intcon	equ	0xFF2
 10275                           intcon3	equ	0xFF0
 10276                           postinc0	equ	0xFEE
 10277                           fsr0h	equ	0xFEA
 10278                           fsr0l	equ	0xFE9
 10279                           wreg	equ	0xFE8
 10280                           plusw1	equ	0xFE3
 10281                           fsr1h	equ	0xFE2
 10282                           fsr1l	equ	0xFE1
 10283                           indf2	equ	0xFDF
 10284                           postinc2	equ	0xFDE
 10285                           postdec2	equ	0xFDD
 10286                           plusw2	equ	0xFDB
 10287                           fsr2h	equ	0xFDA
 10288                           fsr2l	equ	0xFD9
 10289                           status	equ	0xFD8
 10290                           
 10291 ;; *************** function i2___wmul *****************
 10292 ;; Defined at:
 10293 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
 10294 ;; Parameters:    Size  Location     Type
 10295 ;;  multiplier      2    0[COMRAM] unsigned int 
 10296 ;;  multiplicand    2    2[COMRAM] unsigned int 
 10297 ;; Auto vars:     Size  Location     Type
 10298 ;;  __wmul          2    4[COMRAM] unsigned int 
 10299 ;; Return value:  Size  Location     Type
 10300 ;;                  2    0[COMRAM] unsigned int 
 10301 ;; Registers used:
 10302 ;;		wreg, status,2, status,0, prodl, prodh
 10303 ;; Tracked objects:
 10304 ;;		On entry : 0/0
 10305 ;;		On exit  : 0/0
 10306 ;;		Unchanged: 0/0
 10307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10308 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10309 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10311 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10312 ;;Total ram usage:        6 bytes
 10313 ;; Hardware stack levels used:    1
 10314 ;; This function calls:
 10315 ;;		Nothing
 10316 ;; This function is called by:
 10317 ;;		_simulate
 10318 ;;		_HexDecToDec2
 10319 ;;		_WriteRun
 10320 ;;		i2_printf
 10321 ;; This function uses a non-reentrant model
 10322 ;;
 10323                           
 10324                           	psect	text55
 10325  0021D4                     __ptext55:
 10326                           	opt stack 0
 10327  0021D4                     i2___wmul:
 10328                           	opt stack 23
 10329                           
 10330                           ;incstack = 0
 10331  0021D4  5001               	movf	i2___wmul@multiplier,w,c
 10332  0021D6  0203               	mulwf	i2___wmul@multiplicand,c
 10333  0021D8  CFF3 F005          	movff	prodl,i2___wmul@product
 10334  0021DC  CFF4 F006          	movff	prodh,i2___wmul@product+1
 10335  0021E0  5001               	movf	i2___wmul@multiplier,w,c
 10336  0021E2  0204               	mulwf	i2___wmul@multiplicand+1,c
 10337  0021E4  50F3               	movf	prodl,w,c
 10338  0021E6  2606               	addwf	i2___wmul@product+1,f,c
 10339  0021E8  5002               	movf	i2___wmul@multiplier+1,w,c
 10340  0021EA  0203               	mulwf	i2___wmul@multiplicand,c
 10341  0021EC  50F3               	movf	prodl,w,c
 10342  0021EE  2606               	addwf	i2___wmul@product+1,f,c
 10343  0021F0  C005  F001         	movff	i2___wmul@product,?i2___wmul
 10344  0021F4  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 10345  0021F8  0012               	return	
 10346  0021FA                     __end_ofi2___wmul:
 10347                           	opt stack 0
 10348                           pclatu	equ	0xFFB
 10349                           pclath	equ	0xFFA
 10350                           tblptru	equ	0xFF8
 10351                           tblptrh	equ	0xFF7
 10352                           tblptrl	equ	0xFF6
 10353                           tablat	equ	0xFF5
 10354                           prodh	equ	0xFF4
 10355                           prodl	equ	0xFF3
 10356                           intcon	equ	0xFF2
 10357                           intcon3	equ	0xFF0
 10358                           postinc0	equ	0xFEE
 10359                           fsr0h	equ	0xFEA
 10360                           fsr0l	equ	0xFE9
 10361                           wreg	equ	0xFE8
 10362                           plusw1	equ	0xFE3
 10363                           fsr1h	equ	0xFE2
 10364                           fsr1l	equ	0xFE1
 10365                           indf2	equ	0xFDF
 10366                           postinc2	equ	0xFDE
 10367                           postdec2	equ	0xFDD
 10368                           plusw2	equ	0xFDB
 10369                           fsr2h	equ	0xFDA
 10370                           fsr2l	equ	0xFD9
 10371                           status	equ	0xFD8
 10372                           
 10373 ;; *************** function i2___lwmod *****************
 10374 ;; Defined at:
 10375 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
 10376 ;; Parameters:    Size  Location     Type
 10377 ;;  dividend        2    7[COMRAM] unsigned int 
 10378 ;;  divisor         2    9[COMRAM] unsigned int 
 10379 ;; Auto vars:     Size  Location     Type
 10380 ;;  __lwmod         1   11[COMRAM] unsigned char 
 10381 ;; Return value:  Size  Location     Type
 10382 ;;                  2    7[COMRAM] unsigned int 
 10383 ;; Registers used:
 10384 ;;		wreg, status,2, status,0
 10385 ;; Tracked objects:
 10386 ;;		On entry : 0/0
 10387 ;;		On exit  : 0/0
 10388 ;;		Unchanged: 0/0
 10389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10390 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10391 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10393 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10394 ;;Total ram usage:        5 bytes
 10395 ;; Hardware stack levels used:    1
 10396 ;; This function calls:
 10397 ;;		Nothing
 10398 ;; This function is called by:
 10399 ;;		i2_printf
 10400 ;; This function uses a non-reentrant model
 10401 ;;
 10402                           
 10403                           	psect	text56
 10404  001F96                     __ptext56:
 10405                           	opt stack 0
 10406  001F96                     i2___lwmod:
 10407                           	opt stack 23
 10408                           
 10409                           ;incstack = 0
 10410  001F96  500A               	movf	i2___lwmod@divisor,w,c
 10411  001F98  100B               	iorwf	i2___lwmod@divisor+1,w,c
 10412  001F9A  B4D8               	btfsc	status,2,c
 10413  001F9C  D018               	goto	i2l954
 10414  001F9E  0E01               	movlw	1
 10415  001FA0  6E0C               	movwf	i2___lwmod@counter,c
 10416  001FA2  D004               	goto	i2l2881
 10417  001FA4                     i2l2879:
 10418  001FA4  90D8               	bcf	status,0,c
 10419  001FA6  360A               	rlcf	i2___lwmod@divisor,f,c
 10420  001FA8  360B               	rlcf	i2___lwmod@divisor+1,f,c
 10421  001FAA  2A0C               	incf	i2___lwmod@counter,f,c
 10422  001FAC                     i2l2881:
 10423  001FAC  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 10424  001FAE  D7FA               	goto	i2l2879
 10425  001FB0                     i2l2883:
 10426  001FB0  500A               	movf	i2___lwmod@divisor,w,c
 10427  001FB2  5C08               	subwf	i2___lwmod@dividend,w,c
 10428  001FB4  500B               	movf	i2___lwmod@divisor+1,w,c
 10429  001FB6  5809               	subwfb	i2___lwmod@dividend+1,w,c
 10430  001FB8  A0D8               	btfss	status,0,c
 10431  001FBA  D004               	goto	i2l2887
 10432  001FBC  500A               	movf	i2___lwmod@divisor,w,c
 10433  001FBE  5E08               	subwf	i2___lwmod@dividend,f,c
 10434  001FC0  500B               	movf	i2___lwmod@divisor+1,w,c
 10435  001FC2  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 10436  001FC4                     i2l2887:
 10437  001FC4  90D8               	bcf	status,0,c
 10438  001FC6  320B               	rrcf	i2___lwmod@divisor+1,f,c
 10439  001FC8  320A               	rrcf	i2___lwmod@divisor,f,c
 10440  001FCA  2E0C               	decfsz	i2___lwmod@counter,f,c
 10441  001FCC  D7F1               	goto	i2l2883
 10442  001FCE                     i2l954:
 10443  001FCE  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 10444  001FD2  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 10445  001FD6  0012               	return		;funcret
 10446  001FD8                     __end_ofi2___lwmod:
 10447                           	opt stack 0
 10448                           pclatu	equ	0xFFB
 10449                           pclath	equ	0xFFA
 10450                           tblptru	equ	0xFF8
 10451                           tblptrh	equ	0xFF7
 10452                           tblptrl	equ	0xFF6
 10453                           tablat	equ	0xFF5
 10454                           prodh	equ	0xFF4
 10455                           prodl	equ	0xFF3
 10456                           intcon	equ	0xFF2
 10457                           intcon3	equ	0xFF0
 10458                           postinc0	equ	0xFEE
 10459                           fsr0h	equ	0xFEA
 10460                           fsr0l	equ	0xFE9
 10461                           wreg	equ	0xFE8
 10462                           plusw1	equ	0xFE3
 10463                           fsr1h	equ	0xFE2
 10464                           fsr1l	equ	0xFE1
 10465                           indf2	equ	0xFDF
 10466                           postinc2	equ	0xFDE
 10467                           postdec2	equ	0xFDD
 10468                           plusw2	equ	0xFDB
 10469                           fsr2h	equ	0xFDA
 10470                           fsr2l	equ	0xFD9
 10471                           status	equ	0xFD8
 10472                           
 10473 ;; *************** function i2___lwdiv *****************
 10474 ;; Defined at:
 10475 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
 10476 ;; Parameters:    Size  Location     Type
 10477 ;;  dividend        2    0[COMRAM] unsigned int 
 10478 ;;  divisor         2    2[COMRAM] unsigned int 
 10479 ;; Auto vars:     Size  Location     Type
 10480 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 10481 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 10482 ;; Return value:  Size  Location     Type
 10483 ;;                  2    0[COMRAM] unsigned int 
 10484 ;; Registers used:
 10485 ;;		wreg, status,2, status,0
 10486 ;; Tracked objects:
 10487 ;;		On entry : 0/0
 10488 ;;		On exit  : 0/0
 10489 ;;		Unchanged: 0/0
 10490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10491 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10492 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10494 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10495 ;;Total ram usage:        7 bytes
 10496 ;; Hardware stack levels used:    1
 10497 ;; This function calls:
 10498 ;;		Nothing
 10499 ;; This function is called by:
 10500 ;;		i2_printf
 10501 ;; This function uses a non-reentrant model
 10502 ;;
 10503                           
 10504                           	psect	text57
 10505  001E72                     __ptext57:
 10506                           	opt stack 0
 10507  001E72                     i2___lwdiv:
 10508                           	opt stack 23
 10509                           
 10510                           ;incstack = 0
 10511  001E72  0E00               	movlw	0
 10512  001E74  6E06               	movwf	i2___lwdiv@quotient+1,c
 10513  001E76  0E00               	movlw	0
 10514  001E78  6E05               	movwf	i2___lwdiv@quotient,c
 10515  001E7A  5003               	movf	i2___lwdiv@divisor,w,c
 10516  001E7C  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 10517  001E7E  B4D8               	btfsc	status,2,c
 10518  001E80  D01C               	goto	i2l944
 10519  001E82  0E01               	movlw	1
 10520  001E84  6E07               	movwf	i2___lwdiv@counter,c
 10521  001E86  D004               	goto	i2l2861
 10522  001E88                     i2l2859:
 10523  001E88  90D8               	bcf	status,0,c
 10524  001E8A  3603               	rlcf	i2___lwdiv@divisor,f,c
 10525  001E8C  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 10526  001E8E  2A07               	incf	i2___lwdiv@counter,f,c
 10527  001E90                     i2l2861:
 10528  001E90  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 10529  001E92  D7FA               	goto	i2l2859
 10530  001E94                     i2l2863:
 10531  001E94  90D8               	bcf	status,0,c
 10532  001E96  3605               	rlcf	i2___lwdiv@quotient,f,c
 10533  001E98  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 10534  001E9A  5003               	movf	i2___lwdiv@divisor,w,c
 10535  001E9C  5C01               	subwf	i2___lwdiv@dividend,w,c
 10536  001E9E  5004               	movf	i2___lwdiv@divisor+1,w,c
 10537  001EA0  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 10538  001EA2  A0D8               	btfss	status,0,c
 10539  001EA4  D005               	goto	i2l2871
 10540  001EA6  5003               	movf	i2___lwdiv@divisor,w,c
 10541  001EA8  5E01               	subwf	i2___lwdiv@dividend,f,c
 10542  001EAA  5004               	movf	i2___lwdiv@divisor+1,w,c
 10543  001EAC  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 10544  001EAE  8005               	bsf	i2___lwdiv@quotient,0,c
 10545  001EB0                     i2l2871:
 10546  001EB0  90D8               	bcf	status,0,c
 10547  001EB2  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 10548  001EB4  3203               	rrcf	i2___lwdiv@divisor,f,c
 10549  001EB6  2E07               	decfsz	i2___lwdiv@counter,f,c
 10550  001EB8  D7ED               	goto	i2l2863
 10551  001EBA                     i2l944:
 10552  001EBA  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 10553  001EBE  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 10554  001EC2  0012               	return		;funcret
 10555  001EC4                     __end_ofi2___lwdiv:
 10556                           	opt stack 0
 10557                           pclatu	equ	0xFFB
 10558                           pclath	equ	0xFFA
 10559                           tblptru	equ	0xFF8
 10560                           tblptrh	equ	0xFF7
 10561                           tblptrl	equ	0xFF6
 10562                           tablat	equ	0xFF5
 10563                           prodh	equ	0xFF4
 10564                           prodl	equ	0xFF3
 10565                           intcon	equ	0xFF2
 10566                           intcon3	equ	0xFF0
 10567                           postinc0	equ	0xFEE
 10568                           fsr0h	equ	0xFEA
 10569                           fsr0l	equ	0xFE9
 10570                           wreg	equ	0xFE8
 10571                           plusw1	equ	0xFE3
 10572                           fsr1h	equ	0xFE2
 10573                           fsr1l	equ	0xFE1
 10574                           indf2	equ	0xFDF
 10575                           postinc2	equ	0xFDE
 10576                           postdec2	equ	0xFDD
 10577                           plusw2	equ	0xFDB
 10578                           fsr2h	equ	0xFDA
 10579                           fsr2l	equ	0xFD9
 10580                           status	equ	0xFD8
 10581                           
 10582 ;; *************** function i2_lcdInst *****************
 10583 ;; Defined at:
 10584 ;;		line 20 in file "lcd.c"
 10585 ;; Parameters:    Size  Location     Type
 10586 ;;  data            1    wreg     unsigned char 
 10587 ;; Auto vars:     Size  Location     Type
 10588 ;;  data            1    2[COMRAM] unsigned char 
 10589 ;; Return value:  Size  Location     Type
 10590 ;;                  1    wreg      void 
 10591 ;; Registers used:
 10592 ;;		wreg, status,2, status,0, cstack
 10593 ;; Tracked objects:
 10594 ;;		On entry : 0/0
 10595 ;;		On exit  : 0/0
 10596 ;;		Unchanged: 0/0
 10597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10599 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10601 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10602 ;;Total ram usage:        1 bytes
 10603 ;; Hardware stack levels used:    1
 10604 ;; Hardware stack levels required when called:    1
 10605 ;; This function calls:
 10606 ;;		i2_lcdNibble
 10607 ;; This function is called by:
 10608 ;;		_simulate
 10609 ;;		_showInfo
 10610 ;;		_stopMoving
 10611 ;;		_PermLog
 10612 ;; This function uses a non-reentrant model
 10613 ;;
 10614                           
 10615                           	psect	text58
 10616  0022F4                     __ptext58:
 10617                           	opt stack 0
 10618  0022F4                     i2_lcdInst:
 10619                           	opt stack 23
 10620                           
 10621                           ;incstack = 0
 10622                           ;i2lcdInst@data stored from wreg
 10623  0022F4  6E03               	movwf	i2lcdInst@data,c
 10624                           
 10625                           ;lcd.c: 21: LATDbits.LATD2 = 0;
 10626  0022F6  948C               	bcf	3980,2,c	;volatile
 10627                           
 10628                           ;lcd.c: 22: lcdNibble(data);
 10629  0022F8  5003               	movf	i2lcdInst@data,w,c
 10630  0022FA  EC0E  F00F         	call	i2_lcdNibble
 10631  0022FE  0012               	return		;funcret
 10632  002300                     __end_ofi2_lcdInst:
 10633                           	opt stack 0
 10634                           pclatu	equ	0xFFB
 10635                           pclath	equ	0xFFA
 10636                           tblptru	equ	0xFF8
 10637                           tblptrh	equ	0xFF7
 10638                           tblptrl	equ	0xFF6
 10639                           tablat	equ	0xFF5
 10640                           prodh	equ	0xFF4
 10641                           prodl	equ	0xFF3
 10642                           intcon	equ	0xFF2
 10643                           intcon3	equ	0xFF0
 10644                           postinc0	equ	0xFEE
 10645                           fsr0h	equ	0xFEA
 10646                           fsr0l	equ	0xFE9
 10647                           wreg	equ	0xFE8
 10648                           plusw1	equ	0xFE3
 10649                           fsr1h	equ	0xFE2
 10650                           fsr1l	equ	0xFE1
 10651                           indf2	equ	0xFDF
 10652                           postinc2	equ	0xFDE
 10653                           postdec2	equ	0xFDD
 10654                           plusw2	equ	0xFDB
 10655                           fsr2h	equ	0xFDA
 10656                           fsr2l	equ	0xFD9
 10657                           status	equ	0xFD8
 10658                           
 10659 ;; *************** function i2_lcdNibble *****************
 10660 ;; Defined at:
 10661 ;;		line 30 in file "lcd.c"
 10662 ;; Parameters:    Size  Location     Type
 10663 ;;  data            1    wreg     unsigned char 
 10664 ;; Auto vars:     Size  Location     Type
 10665 ;;  data            1    1[COMRAM] unsigned char 
 10666 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 10667 ;; Return value:  Size  Location     Type
 10668 ;;                  1    wreg      void 
 10669 ;; Registers used:
 10670 ;;		wreg, status,2, status,0
 10671 ;; Tracked objects:
 10672 ;;		On entry : 0/0
 10673 ;;		On exit  : 0/0
 10674 ;;		Unchanged: 0/0
 10675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10677 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10679 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10680 ;;Total ram usage:        2 bytes
 10681 ;; Hardware stack levels used:    1
 10682 ;; This function calls:
 10683 ;;		Nothing
 10684 ;; This function is called by:
 10685 ;;		i2_lcdInst
 10686 ;;		i2_putch
 10687 ;; This function uses a non-reentrant model
 10688 ;;
 10689                           
 10690                           	psect	text59
 10691  001E1C                     __ptext59:
 10692                           	opt stack 0
 10693  001E1C                     i2_lcdNibble:
 10694                           	opt stack 22
 10695                           
 10696                           ;incstack = 0
 10697                           ;i2lcdNibble@data stored from wreg
 10698  001E1C  6E02               	movwf	i2lcdNibble@data,c
 10699                           
 10700                           ;lcd.c: 32: char temp = data & 0xF0;
 10701  001E1E  5002               	movf	i2lcdNibble@data,w,c
 10702  001E20  0BF0               	andlw	240
 10703  001E22  6E01               	movwf	i2lcdNibble@temp,c
 10704                           
 10705                           ;lcd.c: 33: LATD = LATD & 0x0F;
 10706  001E24  508C               	movf	3980,w,c	;volatile
 10707  001E26  0B0F               	andlw	15
 10708  001E28  6E8C               	movwf	3980,c	;volatile
 10709                           
 10710                           ;lcd.c: 34: LATD = temp | LATD;
 10711  001E2A  5001               	movf	i2lcdNibble@temp,w,c
 10712  001E2C  108C               	iorwf	3980,w,c	;volatile
 10713  001E2E  6E8C               	movwf	3980,c	;volatile
 10714                           
 10715                           ;lcd.c: 36: LATDbits.LATD3 = 0;
 10716  001E30  968C               	bcf	3980,3,c	;volatile
 10717                           
 10718                           ;lcd.c: 37: _delay((unsigned long)((25)*(8000000/4000000.0)));
 10719  001E32  0E10               	movlw	16
 10720  001E34                     i2u335_47:
 10721  001E34  2EE8               	decfsz	wreg,f,c
 10722  001E36  D7FE               	bra	i2u335_47
 10723  001E38  D000               	nop2	
 10724                           
 10725                           ;lcd.c: 38: LATDbits.LATD3 = 1;
 10726  001E3A  868C               	bsf	3980,3,c	;volatile
 10727                           
 10728                           ;lcd.c: 39: _delay((unsigned long)((25)*(8000000/4000000.0)));
 10729  001E3C  0E10               	movlw	16
 10730  001E3E                     i2u336_47:
 10731  001E3E  2EE8               	decfsz	wreg,f,c
 10732  001E40  D7FE               	bra	i2u336_47
 10733  001E42  D000               	nop2	
 10734                           
 10735                           ;lcd.c: 41: data = data << 4;
 10736  001E44  3802               	swapf	i2lcdNibble@data,w,c
 10737  001E46  0BF0               	andlw	240
 10738  001E48  6E02               	movwf	i2lcdNibble@data,c
 10739                           
 10740                           ;lcd.c: 43: temp = data & 0xF0;
 10741  001E4A  5002               	movf	i2lcdNibble@data,w,c
 10742  001E4C  0BF0               	andlw	240
 10743  001E4E  6E01               	movwf	i2lcdNibble@temp,c
 10744                           
 10745                           ;lcd.c: 44: LATD = LATD & 0x0F;
 10746  001E50  508C               	movf	3980,w,c	;volatile
 10747  001E52  0B0F               	andlw	15
 10748  001E54  6E8C               	movwf	3980,c	;volatile
 10749                           
 10750                           ;lcd.c: 45: LATD = temp | LATD;
 10751  001E56  5001               	movf	i2lcdNibble@temp,w,c
 10752  001E58  108C               	iorwf	3980,w,c	;volatile
 10753  001E5A  6E8C               	movwf	3980,c	;volatile
 10754                           
 10755                           ;lcd.c: 47: LATDbits.LATD3 = 0;
 10756  001E5C  968C               	bcf	3980,3,c	;volatile
 10757                           
 10758                           ;lcd.c: 48: _delay((unsigned long)((25)*(8000000/4000000.0)));
 10759  001E5E  0E10               	movlw	16
 10760  001E60                     i2u337_47:
 10761  001E60  2EE8               	decfsz	wreg,f,c
 10762  001E62  D7FE               	bra	i2u337_47
 10763  001E64  D000               	nop2	
 10764                           
 10765                           ;lcd.c: 49: LATDbits.LATD3 = 1;
 10766  001E66  868C               	bsf	3980,3,c	;volatile
 10767                           
 10768                           ;lcd.c: 50: _delay((unsigned long)((25)*(8000000/4000000.0)));
 10769  001E68  0E10               	movlw	16
 10770  001E6A                     i2u338_47:
 10771  001E6A  2EE8               	decfsz	wreg,f,c
 10772  001E6C  D7FE               	bra	i2u338_47
 10773  001E6E  D000               	nop2	
 10774  001E70  0012               	return		;funcret
 10775  001E72                     __end_ofi2_lcdNibble:
 10776                           	opt stack 0
 10777                           pclatu	equ	0xFFB
 10778                           pclath	equ	0xFFA
 10779                           tblptru	equ	0xFF8
 10780                           tblptrh	equ	0xFF7
 10781                           tblptrl	equ	0xFF6
 10782                           tablat	equ	0xFF5
 10783                           prodh	equ	0xFF4
 10784                           prodl	equ	0xFF3
 10785                           intcon	equ	0xFF2
 10786                           intcon3	equ	0xFF0
 10787                           postinc0	equ	0xFEE
 10788                           fsr0h	equ	0xFEA
 10789                           fsr0l	equ	0xFE9
 10790                           wreg	equ	0xFE8
 10791                           plusw1	equ	0xFE3
 10792                           fsr1h	equ	0xFE2
 10793                           fsr1l	equ	0xFE1
 10794                           indf2	equ	0xFDF
 10795                           postinc2	equ	0xFDE
 10796                           postdec2	equ	0xFDD
 10797                           plusw2	equ	0xFDB
 10798                           fsr2h	equ	0xFDA
 10799                           fsr2l	equ	0xFD9
 10800                           status	equ	0xFD8
 10801                           
 10802 ;; *************** function _captureKeypad *****************
 10803 ;; Defined at:
 10804 ;;		line 13 in file "modules.c"
 10805 ;; Parameters:    Size  Location     Type
 10806 ;;		None
 10807 ;; Auto vars:     Size  Location     Type
 10808 ;;  keypress        1    2[COMRAM] unsigned char 
 10809 ;; Return value:  Size  Location     Type
 10810 ;;                  2    0[COMRAM] unsigned int 
 10811 ;; Registers used:
 10812 ;;		wreg, status,2, status,0
 10813 ;; Tracked objects:
 10814 ;;		On entry : 0/0
 10815 ;;		On exit  : 0/0
 10816 ;;		Unchanged: 0/0
 10817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10818 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10819 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10821 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10822 ;;Total ram usage:        3 bytes
 10823 ;; Hardware stack levels used:    1
 10824 ;; This function calls:
 10825 ;;		Nothing
 10826 ;; This function is called by:
 10827 ;;		_simulate
 10828 ;;		_showInfo
 10829 ;;		_PermLog
 10830 ;; This function uses a non-reentrant model
 10831 ;;
 10832                           
 10833                           	psect	text60
 10834  00223A                     __ptext60:
 10835                           	opt stack 0
 10836  00223A                     _captureKeypad:
 10837                           	opt stack 23
 10838                           
 10839                           ;modules.c: 14: (INTCONbits.GIE = 0);
 10840                           
 10841                           ;incstack = 0
 10842  00223A  9EF2               	bcf	intcon,7,c	;volatile
 10843  00223C                     i2l222:
 10844  00223C  A281               	btfss	3969,1,c	;volatile
 10845  00223E  D7FE               	goto	i2l222
 10846                           
 10847                           ;modules.c: 16: unsigned char keypress = (PORTB & 0xF0) >> 4;
 10848  002240  3881               	swapf	3969,w,c	;volatile
 10849  002242  0B0F               	andlw	15
 10850  002244  0B0F               	andlw	15
 10851  002246  6E03               	movwf	captureKeypad@keypress,c
 10852  002248                     i2l225:
 10853  002248  B281               	btfsc	3969,1,c	;volatile
 10854  00224A  D7FE               	goto	i2l225
 10855                           
 10856                           ;modules.c: 18: INT1IF = 0;
 10857  00224C  90F0               	bcf	intcon3,0,c	;volatile
 10858                           
 10859                           ;modules.c: 19: (INTCONbits.GIE = 1);
 10860  00224E  8EF2               	bsf	intcon,7,c	;volatile
 10861                           
 10862                           ;modules.c: 20: return keypress;
 10863  002250  C003  F001         	movff	captureKeypad@keypress,?_captureKeypad
 10864  002254  6A02               	clrf	?_captureKeypad+1,c
 10865  002256  0012               	return		;funcret
 10866  002258                     __end_of_captureKeypad:
 10867                           	opt stack 0
 10868                           pclatu	equ	0xFFB
 10869                           pclath	equ	0xFFA
 10870                           tblptru	equ	0xFF8
 10871                           tblptrh	equ	0xFF7
 10872                           tblptrl	equ	0xFF6
 10873                           tablat	equ	0xFF5
 10874                           prodh	equ	0xFF4
 10875                           prodl	equ	0xFF3
 10876                           intcon	equ	0xFF2
 10877                           intcon3	equ	0xFF0
 10878                           postinc0	equ	0xFEE
 10879                           fsr0h	equ	0xFEA
 10880                           fsr0l	equ	0xFE9
 10881                           wreg	equ	0xFE8
 10882                           plusw1	equ	0xFE3
 10883                           fsr1h	equ	0xFE2
 10884                           fsr1l	equ	0xFE1
 10885                           indf2	equ	0xFDF
 10886                           postinc2	equ	0xFDE
 10887                           postdec2	equ	0xFDD
 10888                           plusw2	equ	0xFDB
 10889                           fsr2h	equ	0xFDA
 10890                           fsr2l	equ	0xFD9
 10891                           status	equ	0xFD8
 10892                           
 10893 ;; *************** function _ReadRun *****************
 10894 ;; Defined at:
 10895 ;;		line 66 in file "eeprom.c"
 10896 ;; Parameters:    Size  Location     Type
 10897 ;;  backruns        1    wreg     unsigned char 
 10898 ;;  sorted          2    2[COMRAM] PTR unsigned char 
 10899 ;;		 -> PermLog@sorted(4), 
 10900 ;;  time            2    4[COMRAM] PTR unsigned int 
 10901 ;;		 -> PermLog@time(2), 
 10902 ;; Auto vars:     Size  Location     Type
 10903 ;;  backruns        1   10[COMRAM] unsigned char 
 10904 ;;  add             2   11[COMRAM] unsigned int 
 10905 ;; Return value:  Size  Location     Type
 10906 ;;                  1    wreg      void 
 10907 ;; Registers used:
 10908 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10909 ;; Tracked objects:
 10910 ;;		On entry : 0/0
 10911 ;;		On exit  : 0/0
 10912 ;;		Unchanged: 0/0
 10913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10914 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10915 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10916 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10917 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10918 ;;Total ram usage:       11 bytes
 10919 ;; Hardware stack levels used:    1
 10920 ;; Hardware stack levels required when called:    1
 10921 ;; This function calls:
 10922 ;;		_back
 10923 ;;		i2_ReadEE
 10924 ;; This function is called by:
 10925 ;;		_PermLog
 10926 ;; This function uses a non-reentrant model
 10927 ;;
 10928                           
 10929                           	psect	text61
 10930  00107A                     __ptext61:
 10931                           	opt stack 0
 10932  00107A                     _ReadRun:
 10933                           	opt stack 23
 10934                           
 10935                           ;incstack = 0
 10936                           ;ReadRun@backruns stored from wreg
 10937  00107A  6E0B               	movwf	ReadRun@backruns,c
 10938                           
 10939                           ;eeprom.c: 67: unsigned int add = back(backruns) * 5;
 10940  00107C  500B               	movf	ReadRun@backruns,w,c
 10941  00107E  EC2C  F011         	call	_back
 10942  001082  6E07               	movwf	??_ReadRun& (0+255),c
 10943  001084  5007               	movf	??_ReadRun,w,c
 10944  001086  0D05               	mullw	5
 10945  001088  CFF3 F00C          	movff	prodl,ReadRun@add
 10946  00108C  CFF4 F00D          	movff	prodh,ReadRun@add+1
 10947                           
 10948                           ;eeprom.c: 68: *time = ReadEE(add++ *8);
 10949  001090  C00C  F007         	movff	ReadRun@add,??_ReadRun
 10950  001094  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 10951  001098  90D8               	bcf	status,0,c
 10952  00109A  3607               	rlcf	??_ReadRun,f,c
 10953  00109C  3608               	rlcf	??_ReadRun+1,f,c
 10954  00109E  90D8               	bcf	status,0,c
 10955  0010A0  3607               	rlcf	??_ReadRun,f,c
 10956  0010A2  3608               	rlcf	??_ReadRun+1,f,c
 10957  0010A4  90D8               	bcf	status,0,c
 10958  0010A6  3607               	rlcf	??_ReadRun,f,c
 10959  0010A8  3608               	rlcf	??_ReadRun+1,f,c
 10960  0010AA  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 10961  0010AE  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 10962  0010B2  EC46  F011         	call	i2_ReadEE	;wreg free
 10963  0010B6  6E09               	movwf	(??_ReadRun+2)& (0+255),c
 10964  0010B8  6A0A               	clrf	(??_ReadRun+3)& (0+255),c
 10965  0010BA  C005  FFD9         	movff	ReadRun@time,fsr2l
 10966  0010BE  C006  FFDA         	movff	ReadRun@time+1,fsr2h
 10967  0010C2  C009  FFDE         	movff	??_ReadRun+2,postinc2
 10968  0010C6  C00A  FFDD         	movff	??_ReadRun+3,postdec2
 10969  0010CA  4A0C               	infsnz	ReadRun@add,f,c
 10970  0010CC  2A0D               	incf	ReadRun@add+1,f,c
 10971                           
 10972                           ;eeprom.c: 69: sorted[0] = ReadEE(add++ *8);
 10973  0010CE  C00C  F007         	movff	ReadRun@add,??_ReadRun
 10974  0010D2  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 10975  0010D6  90D8               	bcf	status,0,c
 10976  0010D8  3607               	rlcf	??_ReadRun,f,c
 10977  0010DA  3608               	rlcf	??_ReadRun+1,f,c
 10978  0010DC  90D8               	bcf	status,0,c
 10979  0010DE  3607               	rlcf	??_ReadRun,f,c
 10980  0010E0  3608               	rlcf	??_ReadRun+1,f,c
 10981  0010E2  90D8               	bcf	status,0,c
 10982  0010E4  3607               	rlcf	??_ReadRun,f,c
 10983  0010E6  3608               	rlcf	??_ReadRun+1,f,c
 10984  0010E8  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 10985  0010EC  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 10986  0010F0  EC46  F011         	call	i2_ReadEE	;wreg free
 10987  0010F4  C003  FFD9         	movff	ReadRun@sorted,fsr2l
 10988  0010F8  C004  FFDA         	movff	ReadRun@sorted+1,fsr2h
 10989  0010FC  6EDF               	movwf	indf2,c
 10990  0010FE  4A0C               	infsnz	ReadRun@add,f,c
 10991  001100  2A0D               	incf	ReadRun@add+1,f,c
 10992                           
 10993                           ;eeprom.c: 70: sorted[1] = ReadEE(add++ *8);
 10994  001102  EE20 F001          	lfsr	2,1
 10995  001106  5003               	movf	ReadRun@sorted,w,c
 10996  001108  26D9               	addwf	fsr2l,f,c
 10997  00110A  5004               	movf	ReadRun@sorted+1,w,c
 10998  00110C  22DA               	addwfc	fsr2h,f,c
 10999  00110E  C00C  F007         	movff	ReadRun@add,??_ReadRun
 11000  001112  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 11001  001116  90D8               	bcf	status,0,c
 11002  001118  3607               	rlcf	??_ReadRun,f,c
 11003  00111A  3608               	rlcf	??_ReadRun+1,f,c
 11004  00111C  90D8               	bcf	status,0,c
 11005  00111E  3607               	rlcf	??_ReadRun,f,c
 11006  001120  3608               	rlcf	??_ReadRun+1,f,c
 11007  001122  90D8               	bcf	status,0,c
 11008  001124  3607               	rlcf	??_ReadRun,f,c
 11009  001126  3608               	rlcf	??_ReadRun+1,f,c
 11010  001128  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 11011  00112C  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 11012  001130  EC46  F011         	call	i2_ReadEE	;wreg free
 11013  001134  6EDF               	movwf	indf2,c
 11014  001136  4A0C               	infsnz	ReadRun@add,f,c
 11015  001138  2A0D               	incf	ReadRun@add+1,f,c
 11016                           
 11017                           ;eeprom.c: 71: sorted[2] = ReadEE(add++ *8);
 11018  00113A  EE20 F002          	lfsr	2,2
 11019  00113E  5003               	movf	ReadRun@sorted,w,c
 11020  001140  26D9               	addwf	fsr2l,f,c
 11021  001142  5004               	movf	ReadRun@sorted+1,w,c
 11022  001144  22DA               	addwfc	fsr2h,f,c
 11023  001146  C00C  F007         	movff	ReadRun@add,??_ReadRun
 11024  00114A  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 11025  00114E  90D8               	bcf	status,0,c
 11026  001150  3607               	rlcf	??_ReadRun,f,c
 11027  001152  3608               	rlcf	??_ReadRun+1,f,c
 11028  001154  90D8               	bcf	status,0,c
 11029  001156  3607               	rlcf	??_ReadRun,f,c
 11030  001158  3608               	rlcf	??_ReadRun+1,f,c
 11031  00115A  90D8               	bcf	status,0,c
 11032  00115C  3607               	rlcf	??_ReadRun,f,c
 11033  00115E  3608               	rlcf	??_ReadRun+1,f,c
 11034  001160  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 11035  001164  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 11036  001168  EC46  F011         	call	i2_ReadEE	;wreg free
 11037  00116C  6EDF               	movwf	indf2,c
 11038  00116E  4A0C               	infsnz	ReadRun@add,f,c
 11039  001170  2A0D               	incf	ReadRun@add+1,f,c
 11040                           
 11041                           ;eeprom.c: 72: sorted[3] = ReadEE(add++ *8);
 11042  001172  EE20 F003          	lfsr	2,3
 11043  001176  5003               	movf	ReadRun@sorted,w,c
 11044  001178  26D9               	addwf	fsr2l,f,c
 11045  00117A  5004               	movf	ReadRun@sorted+1,w,c
 11046  00117C  22DA               	addwfc	fsr2h,f,c
 11047  00117E  C00C  F007         	movff	ReadRun@add,??_ReadRun
 11048  001182  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 11049  001186  90D8               	bcf	status,0,c
 11050  001188  3607               	rlcf	??_ReadRun,f,c
 11051  00118A  3608               	rlcf	??_ReadRun+1,f,c
 11052  00118C  90D8               	bcf	status,0,c
 11053  00118E  3607               	rlcf	??_ReadRun,f,c
 11054  001190  3608               	rlcf	??_ReadRun+1,f,c
 11055  001192  90D8               	bcf	status,0,c
 11056  001194  3607               	rlcf	??_ReadRun,f,c
 11057  001196  3608               	rlcf	??_ReadRun+1,f,c
 11058  001198  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 11059  00119C  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 11060  0011A0  EC46  F011         	call	i2_ReadEE	;wreg free
 11061  0011A4  6EDF               	movwf	indf2,c
 11062  0011A6  4A0C               	infsnz	ReadRun@add,f,c
 11063  0011A8  2A0D               	incf	ReadRun@add+1,f,c
 11064  0011AA  0012               	return		;funcret
 11065  0011AC                     __end_of_ReadRun:
 11066                           	opt stack 0
 11067                           pclatu	equ	0xFFB
 11068                           pclath	equ	0xFFA
 11069                           tblptru	equ	0xFF8
 11070                           tblptrh	equ	0xFF7
 11071                           tblptrl	equ	0xFF6
 11072                           tablat	equ	0xFF5
 11073                           prodh	equ	0xFF4
 11074                           prodl	equ	0xFF3
 11075                           intcon	equ	0xFF2
 11076                           intcon3	equ	0xFF0
 11077                           postinc0	equ	0xFEE
 11078                           fsr0h	equ	0xFEA
 11079                           fsr0l	equ	0xFE9
 11080                           wreg	equ	0xFE8
 11081                           plusw1	equ	0xFE3
 11082                           fsr1h	equ	0xFE2
 11083                           fsr1l	equ	0xFE1
 11084                           indf2	equ	0xFDF
 11085                           postinc2	equ	0xFDE
 11086                           postdec2	equ	0xFDD
 11087                           plusw2	equ	0xFDB
 11088                           fsr2h	equ	0xFDA
 11089                           fsr2l	equ	0xFD9
 11090                           status	equ	0xFD8
 11091                           
 11092 ;; *************** function i2_ReadEE *****************
 11093 ;; Defined at:
 11094 ;;		line 16 in file "eeprom.c"
 11095 ;; Parameters:    Size  Location     Type
 11096 ;;  address         2    0[COMRAM] unsigned int 
 11097 ;; Auto vars:     Size  Location     Type
 11098 ;;		None
 11099 ;; Return value:  Size  Location     Type
 11100 ;;                  1    wreg      unsigned char 
 11101 ;; Registers used:
 11102 ;;		wreg, status,2
 11103 ;; Tracked objects:
 11104 ;;		On entry : 0/0
 11105 ;;		On exit  : 0/0
 11106 ;;		Unchanged: 0/0
 11107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11108 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11111 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11112 ;;Total ram usage:        2 bytes
 11113 ;; Hardware stack levels used:    1
 11114 ;; This function calls:
 11115 ;;		Nothing
 11116 ;; This function is called by:
 11117 ;;		_ReadRun
 11118 ;; This function uses a non-reentrant model
 11119 ;;
 11120                           
 11121                           	psect	text62
 11122  00228C                     __ptext62:
 11123                           	opt stack 0
 11124  00228C                     i2_ReadEE:
 11125                           	opt stack 23
 11126                           
 11127                           ;eeprom.c: 19: EEADRH = (unsigned char) (address >> 8);
 11128                           
 11129                           ;incstack = 0
 11130  00228C  5002               	movf	i2ReadEE@address+1,w,c
 11131  00228E  6EAA               	movwf	4010,c	;volatile
 11132                           
 11133                           ;eeprom.c: 20: EEADR = (unsigned char) address;
 11134  002290  C001  FFA9         	movff	i2ReadEE@address,4009	;volatile
 11135                           
 11136                           ;eeprom.c: 22: EECON1bits.EEPGD = 0;
 11137  002294  9EA6               	bcf	4006,7,c	;volatile
 11138                           
 11139                           ;eeprom.c: 23: EECON1bits.CFGS = 0;
 11140  002296  9CA6               	bcf	4006,6,c	;volatile
 11141                           
 11142                           ;eeprom.c: 24: EECON1bits.RD = 1;
 11143  002298  80A6               	bsf	4006,0,c	;volatile
 11144  00229A                     i2l423:
 11145  00229A  B0A6               	btfsc	4006,0,c	;volatile
 11146  00229C  D7FE               	goto	i2l423
 11147                           
 11148                           ;eeprom.c: 30: return EEDATA;
 11149  00229E  50A8               	movf	4008,w,c	;volatile
 11150  0022A0  0012               	return	
 11151  0022A2                     __end_ofi2_ReadEE:
 11152                           	opt stack 0
 11153                           pclatu	equ	0xFFB
 11154                           pclath	equ	0xFFA
 11155                           tblptru	equ	0xFF8
 11156                           tblptrh	equ	0xFF7
 11157                           tblptrl	equ	0xFF6
 11158                           tablat	equ	0xFF5
 11159                           prodh	equ	0xFF4
 11160                           prodl	equ	0xFF3
 11161                           intcon	equ	0xFF2
 11162                           intcon3	equ	0xFF0
 11163                           postinc0	equ	0xFEE
 11164                           fsr0h	equ	0xFEA
 11165                           fsr0l	equ	0xFE9
 11166                           wreg	equ	0xFE8
 11167                           plusw1	equ	0xFE3
 11168                           fsr1h	equ	0xFE2
 11169                           fsr1l	equ	0xFE1
 11170                           indf2	equ	0xFDF
 11171                           postinc2	equ	0xFDE
 11172                           postdec2	equ	0xFDD
 11173                           plusw2	equ	0xFDB
 11174                           fsr2h	equ	0xFDA
 11175                           fsr2l	equ	0xFD9
 11176                           status	equ	0xFD8
 11177                           
 11178 ;; *************** function _back *****************
 11179 ;; Defined at:
 11180 ;;		line 57 in file "eeprom.c"
 11181 ;; Parameters:    Size  Location     Type
 11182 ;;  runs            1    wreg     unsigned char 
 11183 ;; Auto vars:     Size  Location     Type
 11184 ;;  runs            1    0[COMRAM] unsigned char 
 11185 ;;  result          1    1[COMRAM] unsigned char 
 11186 ;; Return value:  Size  Location     Type
 11187 ;;                  1    wreg      unsigned char 
 11188 ;; Registers used:
 11189 ;;		wreg, status,2, status,0
 11190 ;; Tracked objects:
 11191 ;;		On entry : 0/0
 11192 ;;		On exit  : 0/0
 11193 ;;		Unchanged: 0/0
 11194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11196 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11198 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11199 ;;Total ram usage:        2 bytes
 11200 ;; Hardware stack levels used:    1
 11201 ;; This function calls:
 11202 ;;		Nothing
 11203 ;; This function is called by:
 11204 ;;		_ReadRun
 11205 ;; This function uses a non-reentrant model
 11206 ;;
 11207                           
 11208                           	psect	text63
 11209  002258                     __ptext63:
 11210                           	opt stack 0
 11211  002258                     _back:
 11212                           	opt stack 23
 11213                           
 11214                           ;incstack = 0
 11215                           ;back@runs stored from wreg
 11216  002258  6E01               	movwf	back@runs,c
 11217                           
 11218                           ;eeprom.c: 59: unsigned char result = Latest + 4 - runs;
 11219  00225A  5001               	movf	back@runs,w,c
 11220  00225C  0800               	sublw	0
 11221  00225E  0100               	movlb	0	; () banked
 11222  002260  25C8               	addwf	_Latest& (0+255),w,b
 11223  002262  0F04               	addlw	4
 11224  002264  6E02               	movwf	back@result,c
 11225                           
 11226                           ;eeprom.c: 60: if (result > 4) {
 11227  002266  0E04               	movlw	4
 11228  002268  6402               	cpfsgt	back@result,c
 11229  00226A  D002               	goto	i2l3353
 11230                           
 11231                           ; BSR set to: 0
 11232                           ;eeprom.c: 61: result -= 4;
 11233  00226C  0E04               	movlw	4
 11234  00226E  5E02               	subwf	back@result,f,c
 11235  002270                     i2l3353:
 11236                           
 11237                           ; BSR set to: 0
 11238                           ;eeprom.c: 62: }
 11239                           ;eeprom.c: 63: return result;
 11240  002270  5002               	movf	back@result,w,c
 11241  002272  0012               	return	
 11242  002274                     __end_of_back:
 11243                           	opt stack 0
 11244                           pclatu	equ	0xFFB
 11245                           pclath	equ	0xFFA
 11246                           tblptru	equ	0xFF8
 11247                           tblptrh	equ	0xFF7
 11248                           tblptrl	equ	0xFF6
 11249                           tablat	equ	0xFF5
 11250                           prodh	equ	0xFF4
 11251                           prodl	equ	0xFF3
 11252                           intcon	equ	0xFF2
 11253                           intcon3	equ	0xFF0
 11254                           postinc0	equ	0xFEE
 11255                           fsr0h	equ	0xFEA
 11256                           fsr0l	equ	0xFE9
 11257                           wreg	equ	0xFE8
 11258                           plusw1	equ	0xFE3
 11259                           fsr1h	equ	0xFE2
 11260                           fsr1l	equ	0xFE1
 11261                           indf2	equ	0xFDF
 11262                           postinc2	equ	0xFDE
 11263                           postdec2	equ	0xFDD
 11264                           plusw2	equ	0xFDB
 11265                           fsr2h	equ	0xFDA
 11266                           fsr2l	equ	0xFD9
 11267                           status	equ	0xFD8
 11268                           pclatu	equ	0xFFB
 11269                           pclath	equ	0xFFA
 11270                           tblptru	equ	0xFF8
 11271                           tblptrh	equ	0xFF7
 11272                           tblptrl	equ	0xFF6
 11273                           tablat	equ	0xFF5
 11274                           prodh	equ	0xFF4
 11275                           prodl	equ	0xFF3
 11276                           intcon	equ	0xFF2
 11277                           intcon3	equ	0xFF0
 11278                           postinc0	equ	0xFEE
 11279                           fsr0h	equ	0xFEA
 11280                           fsr0l	equ	0xFE9
 11281                           wreg	equ	0xFE8
 11282                           plusw1	equ	0xFE3
 11283                           fsr1h	equ	0xFE2
 11284                           fsr1l	equ	0xFE1
 11285                           indf2	equ	0xFDF
 11286                           postinc2	equ	0xFDE
 11287                           postdec2	equ	0xFDD
 11288                           plusw2	equ	0xFDB
 11289                           fsr2h	equ	0xFDA
 11290                           fsr2l	equ	0xFD9
 11291                           status	equ	0xFD8
 11292                           
 11293                           	psect	rparam
 11294  0000                     pclatu	equ	0xFFB
 11295                           pclath	equ	0xFFA
 11296                           tblptru	equ	0xFF8
 11297                           tblptrh	equ	0xFF7
 11298                           tblptrl	equ	0xFF6
 11299                           tablat	equ	0xFF5
 11300                           prodh	equ	0xFF4
 11301                           prodl	equ	0xFF3
 11302                           intcon	equ	0xFF2
 11303                           intcon3	equ	0xFF0
 11304                           postinc0	equ	0xFEE
 11305                           fsr0h	equ	0xFEA
 11306                           fsr0l	equ	0xFE9
 11307                           wreg	equ	0xFE8
 11308                           plusw1	equ	0xFE3
 11309                           fsr1h	equ	0xFE2
 11310                           fsr1l	equ	0xFE1
 11311                           indf2	equ	0xFDF
 11312                           postinc2	equ	0xFDE
 11313                           postdec2	equ	0xFDD
 11314                           plusw2	equ	0xFDB
 11315                           fsr2h	equ	0xFDA
 11316                           fsr2l	equ	0xFD9
 11317                           status	equ	0xFD8
 11318                           
 11319                           	psect	temp
 11320  00007E                     btemp:
 11321                           	opt stack 0
 11322  00007E                     	ds	1
 11323  0000                     int$flags	set	btemp
 11324                           pclatu	equ	0xFFB
 11325                           pclath	equ	0xFFA
 11326                           tblptru	equ	0xFF8
 11327                           tblptrh	equ	0xFF7
 11328                           tblptrl	equ	0xFF6
 11329                           tablat	equ	0xFF5
 11330                           prodh	equ	0xFF4
 11331                           prodl	equ	0xFF3
 11332                           intcon	equ	0xFF2
 11333                           intcon3	equ	0xFF0
 11334                           postinc0	equ	0xFEE
 11335                           fsr0h	equ	0xFEA
 11336                           fsr0l	equ	0xFE9
 11337                           wreg	equ	0xFE8
 11338                           plusw1	equ	0xFE3
 11339                           fsr1h	equ	0xFE2
 11340                           fsr1l	equ	0xFE1
 11341                           indf2	equ	0xFDF
 11342                           postinc2	equ	0xFDE
 11343                           postdec2	equ	0xFDD
 11344                           plusw2	equ	0xFDB
 11345                           fsr2h	equ	0xFDA
 11346                           fsr2l	equ	0xFD9
 11347                           status	equ	0xFD8


Data Sizes:
    Strings     547
    Constant    18
    Data        0
    BSS         44
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    112     125
    BANK0           128     42      73
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[18]), STR_42(CODE[22]), 
		 -> STR_41(CODE[4]), STR_40(CODE[3]), STR_39(CODE[4]), STR_38(CODE[5]), 
		 -> STR_37(CODE[4]), STR_36(CODE[18]), STR_35(CODE[20]), STR_34(CODE[16]), 
		 -> STR_33(CODE[21]), STR_32(CODE[16]), STR_31(CODE[21]), STR_30(CODE[16]), 
		 -> STR_29(CODE[20]), STR_28(CODE[16]), STR_27(CODE[21]), STR_26(CODE[23]), 
		 -> STR_25(CODE[24]), STR_24(CODE[21]), STR_23(CODE[24]), STR_22(CODE[24]), 
		 -> STR_21(CODE[25]), STR_20(CODE[19]), STR_19(CODE[18]), STR_18(CODE[25]), 
		 -> STR_17(CODE[25]), STR_16(CODE[27]), STR_15(CODE[3]), STR_14(CODE[3]), 
		 -> STR_13(CODE[3]), STR_12(CODE[5]), STR_11(CODE[3]), STR_10(CODE[3]), 
		 -> STR_9(CODE[3]), STR_8(CODE[4]), STR_7(CODE[3]), STR_6(CODE[3]), 
		 -> STR_5(CODE[3]), STR_4(CODE[4]), STR_3(CODE[5]), STR_2(CODE[24]), 
		 -> STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    WriteRun@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(COMRAM[4]), 

    ReadRun@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> PermLog@sorted(COMRAM[4]), 

    ReadRun@time	PTR unsigned int  size(2) Largest target is 2
		 -> PermLog@time(COMRAM[2]), 

    check9@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(COMRAM[4]), 

    checkC@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(COMRAM[4]), 

    checkAA@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(COMRAM[4]), 

    stopMoving$555	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_36(CODE[18]), STR_35(CODE[20]), 

    CCW90@port	PTR int  size(2) Largest target is 6
		 -> simulate@portCCW(COMRAM[6]), 

    CW90@port	PTR int  size(2) Largest target is 6
		 -> simulate@portCW(COMRAM[6]), 

    PWMC@port	PTR int  size(2) Largest target is 6
		 -> intrpt@portCW(COMRAM[6]), simulate@portCCW(COMRAM[6]), simulate@portCW(COMRAM[6]), 

    getTime@time	PTR unsigned char  size(2) Largest target is 7
		 -> time(COMRAM[7]), 

    showInfo@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> PermLog@sorted(COMRAM[4]), simulate@sorted(COMRAM[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _intrpt in COMRAM

    _intrpt->_simulate
    _simulate->_check9
    _simulate->_checkAA
    _simulate->_checkC
    i2_getTime->i2_I2C_Master_Read
    i2_getTime->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    _stopMoving->i2_printf
    _checkC->_checkV
    _checkAA->_checkV
    _check9->_checkV
    _printV->i2_printf
    _checkV->___ftge
    ___ftmul->___awtoft
    ___ftge->___ftmul
    ___awtoft->___ftpack
    _WriteRun->i2___wmul
    _HexDecToDec2->i2___wmul
    _CW90->_PWMC
    _CCW90->_PWMC
    _PWMC->___awdiv
    _PermLog->_showInfo
    _showInfo->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble
    _ReadRun->_back
    _ReadRun->i2_ReadEE

Critical Paths under _main in BANK0

    _main->_showRTC
    _main->_testAD
    _testAD->_printf
    _showRTC->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _getTime->_I2C_Master_Read
    _getTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _initialize->_I2C_Master_Init
    _initLatest->_ReadEE
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _intrpt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _intrpt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _intrpt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _intrpt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _intrpt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _intrpt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _intrpt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _intrpt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _intrpt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _intrpt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _intrpt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _intrpt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _intrpt in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _intrpt in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _intrpt in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _intrpt in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   15002
                                             40 BANK0      2     2      0
                         _initialize
                            _lcdInst
                             _printf
                            _showRTC
                             _testAD
 ---------------------------------------------------------------------------------
 (1) _testAD                                               2     2      0    4543
                                             38 BANK0      2     2      0
                                 _AD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _AD                                                   5     3      2      22
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _showRTC                                              2     2      0    4994
                                             38 BANK0      2     2      0
                            _getTime
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              30    22      8    4386
                                             12 BANK0     26    18      8
                                 _AD (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     517
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _getTime                                              3     1      2     473
                                              3 BANK0      3     1      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2     214
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0     944
                    _I2C_Master_Init
                            _initLCD
                         _initLatest
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _initLatest                                           0     0      0     298
                             _ReadEE
 ---------------------------------------------------------------------------------
 (3) _ReadEE                                               2     0      2     298
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _intrpt                                              23    23      0   71333
                                             89 COMRAM    23    23      0
                               _PWMC
                            _PermLog
                           _simulate
                         _stopMoving
 ---------------------------------------------------------------------------------
 (6) _simulate                                            38    38      0   57413
                                             51 COMRAM    38    38      0
                              _CCW90
                               _CW90
                       _HexDecToDec2
                           _WriteRun
                      _captureKeypad
                             _check9
                            _checkAA
                             _checkC
                           _showInfo
                         _stopMoving
                           i2___wmul
                          i2_getTime
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) i2_getTime                                            3     1      2     283
                                              3 COMRAM     3     1      2
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Write                                   2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _stopMoving                                           3     3      0    3419
                                             34 COMRAM     3     3      0
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _checkC                                               6     4      2   12731
                                             45 COMRAM     6     4      2
                             _checkV
                             _printV
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _checkAA                                              6     4      2   12731
                                             45 COMRAM     6     4      2
                             _checkV
                             _printV
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _check9                                               6     4      2   12731
                                             45 COMRAM     6     4      2
                             _checkV
                             _printV
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) _printV                                               2     0      2    3452
                                             34 COMRAM     2     0      2
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) _checkV                                               9     7      2    5888
                                             36 COMRAM     9     7      2
                           ___awtoft
                             ___ftge
                            ___ftmul
                               i2_AD
 ---------------------------------------------------------------------------------
 (9) i2_AD                                                 5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             15     9      6    2676
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftge                                               9     3      6     392
                                             27 COMRAM     9     3      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             4     1      3    2339
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    1992
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (7) _WriteRun                                             8     4      4    1621
                                              6 COMRAM     8     4      4
                            _WriteEE
                           i2___wmul
 ---------------------------------------------------------------------------------
 (8) _WriteEE                                              3     0      3     834
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (7) _HexDecToDec2                                         9     7      2     711
                                              6 COMRAM     9     7      2
                           i2___wmul
 ---------------------------------------------------------------------------------
 (7) _CW90                                                 8     6      2    2399
                                             21 COMRAM     8     6      2
                               _PWMC
 ---------------------------------------------------------------------------------
 (7) _CCW90                                                8     6      2    2399
                                             21 COMRAM     8     6      2
                               _PWMC
 ---------------------------------------------------------------------------------
 (8) _PWMC                                                40    34      6    2247
                                              8 COMRAM    13     7      6
                            ___awdiv
 ---------------------------------------------------------------------------------
 (9) ___awdiv                                              8     4      4     428
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (6) _PermLog                                             10    10      0    8112
                                             47 COMRAM    10    10      0
                            _ReadRun
                      _captureKeypad
                           _showInfo
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _showInfo                                            13     9      4    3876
                                             34 COMRAM    13     9      4
                      _captureKeypad
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) i2_printf                                            26    22      4    3216
                                             12 COMRAM    22    18      4
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (8) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (8) i2___wmul                                             6     2      4     365
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (8) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (7) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (9) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _captureKeypad                                        3     1      2      23
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (7) _ReadRun                                             11     7      4     618
                                              2 COMRAM    11     7      4
                               _back
                           i2_ReadEE
 ---------------------------------------------------------------------------------
 (8) i2_ReadEE                                             2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _back                                                 2     2      0      68
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialize
     _I2C_Master_Init
       ___lldiv
     _initLCD
       _lcdInst
         _lcdNibble
     _initLatest
       _ReadEE
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     _AD (ARG)
     ___lwdiv (ARG)
     ___lwmod (ARG)
       ___lwdiv (ARG)
     ___wmul (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _lcdNibble
   _showRTC
     _getTime
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       _AD (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble
   _testAD
     _AD
     _lcdInst
       _lcdNibble
     _printf
       _AD (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
       _putch (ARG)
         _lcdNibble

 _intrpt (ROOT)
   _PWMC
     ___awdiv
   _PermLog
     _ReadRun
       _back
       i2_ReadEE
     _captureKeypad
     _showInfo
       _captureKeypad
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _simulate
     _CCW90
       _PWMC
         ___awdiv
     _CW90
       _PWMC
         ___awdiv
     _HexDecToDec2
       i2___wmul
     _WriteRun
       _WriteEE
       i2___wmul
     _captureKeypad
     _check9
       _checkV
         ___awtoft
           ___ftpack
         ___ftge
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         i2_AD
       _printV
         i2_printf
           i2___lwdiv
           i2___lwmod
             i2___lwdiv (ARG)
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _checkAA
       _checkV
         ___awtoft
           ___ftpack
         ___ftge
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         i2_AD
       _printV
         i2_printf
           i2___lwdiv
           i2___lwmod
             i2___lwdiv (ARG)
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _checkC
       _checkV
         ___awtoft
           ___ftpack
         ___ftge
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         i2_AD
       _printV
         i2_printf
           i2___lwdiv
           i2___lwmod
             i2___lwdiv (ARG)
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _showInfo
       _captureKeypad
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _stopMoving
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2___wmul
     i2_getTime
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _stopMoving
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2A      49       5       57.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     70      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C6      34        0.0%
DATA                 0      0      C6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Mar 29 16:14:09 2017

         i2_I2C_Master_Start 232C           i2_I2C_Master_Write 230A                           _AD 1FD8  
               ___awdiv@sign 0006          ___wmul@multiplicand 0082           i2___lwdiv@dividend 0001  
                __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                  __CFG_OSC$HS 000000  
                        ?_AD 0080                          l305 1FEA                          l423 2284  
                        l375 22A2                          l944 1982                          l954 1CFC  
                        l891 162C                 __CFG_CPB$OFF 000000                          _PEN 007E2A  
               __CFG_CPD$OFF 000000                          _SEN 007E28          ?i2_I2C_Master_Start 0001  
        ?i2_I2C_Master_Write 0002                          wreg 000FE8                         ??_AD 0082  
               __CFG_LVP$OFF 000000                 __CFG_WDT$OFF 000000                         l4201 1F8E  
                       l3403 1932                         l3405 193E                         l3415 1974  
                       l3407 1944                         l3431 1CEE                         l3423 1CB8  
                       l3425 1CC4                         l3513 0034                         l3283 20DE  
                       l3427 1CCA                         l3515 0046                         l3381 15B0  
                       l3365 2106                         l3621 0322                         l3541 0130  
                       l3533 00F8                         l3525 0080                         l3509 0020  
                       l3383 15C0                         l3615 02E0                         l3607 02A6  
                       l3551 017A                         l3543 0136                         l3535 00FE  
                       l3519 0050                         l3393 161A                         l3385 15C6  
                       l3633 0358                         l3609 02BE                         l3545 014E  
                       l3561 01D2                         l3723 1844                         l3635 0364  
                       l3643 0392                         l3627 033C                         l3619 0318  
                       l3555 0192                         l3539 0124                         l3733 1872  
                       l3645 0398                         l3653 0432                         l3573 0212  
                       l3549 0162                         l4197 1F88                         l3727 184E  
                       l3647 03E4                         l3655 044A                         l3639 037E  
                       l3591 026A                         l3559 019A                         l3657 0452  
                       l3593 0270                         l3577 022E                         l3579 0234  
                       l3659 045E                         _ADFM 007E07                         _ADON 007E10  
                       _CW90 1B60                         STR_1 FFD6                         STR_2 FE89  
                       STR_3 FFD1                         STR_4 FFF1                         STR_5 FFF8  
                       STR_6 FFF5                         STR_7 FFFB                         STR_8 FFED  
                       STR_9 FFF8                         _LATA 000F89                         _LATB 000F8A  
                       _LATC 000F8B                         u2400 20DC                         _LATD 000F8C  
                       _LATE 000F8D                         u3307 1C92                         u3317 1C9C  
                       u3237 1F7A                         u3247 1DB4                         u3257 17F6  
                       u3267 1F14                         u3277 1F48                         u2655 1D36  
                       u3287 1C5C                         u3297 1C66                         i2_AD 2110  
                       _RCEN 007E2B                         _PWMC 13B8                checkAA@sorted 002E  
                       _back 2258                         _main 1F52                 ___ftpack@arg 0001  
                       _mode 0075                 ___ftpack@exp 0004                         _time 0077  
                       fsr0h 000FEA                         fsr1h 000FE2           i2___lwdiv@quotient 0005  
                       fsr2h 000FDA                         fsr0l 000FE9                         indf2 000FDF  
                       fsr1l 000FE1                         fsr2l 000FD9                         btemp 007E  
       ??i2_I2C_Master_Start 0002         ??i2_I2C_Master_Write 0004                         prodh 000FF4  
                       prodl 000FF3              ReadRun@backruns 000B                         start 000E  
              __CFG_IESO$OFF 000000         __end_of_HexDecToDec2 1F0C                 simulate@stop 0036  
                 ReadRun@add 000C              __end_ofi2_putch 22F4                __CFG_MCLRE$ON 000000  
               ___ftmul@cntr 001A                 ___param_bank 000000                 ___ftmul@sign 001B  
                 i2getTime@i 0006                  i2_lcdNibble 1E1C              __end_of_ReadRun 11AC  
            __end_of_PermLog 1582                        ?_CW90 0016                        ?i2_AD 0001  
           ?_I2C_Master_Init 008D             ?_I2C_Master_Read 0001                        ?_PWMC 0009  
           ?_I2C_Master_Wait 0001             ?_I2C_Master_Stop 0001                        ?_back 0001  
                      ?_main 0001                        _ACKEN 007E2C                        _ACKDT 007E2D  
                      _CCW90 1BCE              __end_of___awdiv 1914                        _EEADR 000FA9  
                      STR_10 FFF5                        STR_11 FFFB                        STR_12 FFE4  
                      STR_20 FF4A                        STR_13 FFF8                        STR_21 FDF6  
                      STR_30 FFC6                        STR_14 FFF5                        STR_22 FE71  
                      STR_15 FFFB                        STR_31 FEF8                        STR_23 FE41  
                      STR_32 FFC6                        STR_40 FFEE                        STR_24 FF0D  
                      STR_16 FDDB                        STR_41 FFF1                        STR_33 FECE  
                      STR_25 FE59                        STR_17 FE0F                        STR_34 FFC6  
                      STR_42 FEB8                        STR_26 FEA1                        STR_18 FE28  
                      STR_19 FF81                        STR_43 FF5D                        STR_35 FF22  
                      STR_27 FEE3                        STR_28 FFC6                        STR_44 FFA4  
                      STR_36 FF6F                        STR_37 FFE9                        STR_45 FFB5  
                      STR_29 FF36                        STR_38 FFDF                        STR_46 FF93  
                      STR_39 FFE5              __end_of_WriteEE 21D4              __end_of___lldiv 163E  
            __end_of___ftmul 13B8              ___awdiv@divisor 0003                        _LATC0 007C58  
                      _LATC1 007C59                        _LATC2 007C5A                        _LATC6 007C5E  
            __end_of___lwdiv 198C                        i2l120 09AC              __end_of___lwmod 1D06  
                      i2l116 0950                        i2l222 223C                        i2l160 0ED6  
                      i2l152 0EDC                        i2l136 0EA6                        i2l225 2248  
                      i2l305 211E                        i2l330 1B56                        i2l155 0EDA  
                      i2l139 0DC6                        i2l423 229A                        i2l319 12BE  
                      i2l343 1AB6                        i2l344 1AE4                        i2l336 1A40  
                      i2l337 1A6E                        i2l267 13F0                        i2l429 21CA  
                      i2l446 157A                        i2l287 2048                        i2l375 22B6  
                      i2l761 16CC                        i2l944 1EBA                        i2l954 1FCE  
            ___awdiv@counter 0005              __end_of_checkAA 1B60                        _PORTB 000F81  
                      _TRISA 000F92                        _TRISB 000F93                        _TRISC 000F94  
                      _TRISD 000F95                        _TRISE 000F96                __CFG_PWRT$OFF 000000  
              __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000                simulate@F3104 00B6  
              simulate@F3106 00B0                __CFG_WRT2$OFF 000000                simulate@F3093 0071  
              simulate@F3095 00C4                simulate@F3097 00C0                __CFG_WRT3$OFF 000000  
            __end_of_lcdInst 22E8               __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000  
            __end_of_getTime 1890               __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000  
             __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000  
              __CFG_WRTD$OFF 000000              __end_of_initLCD 1F52               __CFG_EBTRB$OFF 000000  
                 i2isdigit@c 0003                ___awtoft@sign 000C              __end_of_dpowers FDD3  
           __end_ofi2_ReadEE 22A2              __end_of_isdigit 2110                ___ftpack@sign 0005  
                      _putch 22C8                        pclath 000FFA              __end_of_showRTC 1806  
                      tablat 000FF5             __end_ofi2___wmul 21FA                        plusw1 000FE3  
                      plusw2 000FDB                        status 000FD8                simulate@start 004A  
             __CFG_PBADEN$ON 000000                i2printf@width 0020             __end_ofi2_printf 0816  
         __size_ofi2___lwdiv 0052                 __end_of_CW90 1BCE           __size_ofi2___lwmod 0042  
               __end_ofi2_AD 213A                  ReadRun@time 0005                 __end_of_PWMC 14AA  
            __initialization 2162                 __end_of_back 2274           __size_ofi2_lcdInst 000C  
               __end_of_main 1F96           __size_ofi2_getTime 0076                   i2printf@ap 0018  
                 i2printf@cp 0015                ReadEE@address 0080                       ??_CW90 0018  
                     ??i2_AD 0003           __size_ofi2_isdigit 001E                       ??_PWMC 000F  
                     ??_back 0001                       ??_main 00A8                       ?_CCW90 0016  
              __activetblptr 000002                checkV@channel 002B            ?_I2C_Master_Start 0001  
          ?_I2C_Master_Write 0081                    CCW90@port 0016           ??_I2C_Master_Start 0081  
                     _ADCON0 000FC2                       _ADCON1 000FC1           ??_I2C_Master_Write 0083  
                     _ADRESH 000FC4                       _EEADRH 000FAA                       _ADRESL 000FC3  
                     _EEDATA 000FA8                       _EECON2 000FA7             ___awdiv@dividend 0001  
            i2lcdNibble@data 0002             __end_of___awtoft 2082                       ?_putch 0001  
           __end_of___ftpack 16EC              i2lcdNibble@temp 0001                       _INT1IE 007F83  
                     _INT1IF 007F80             __end_of_WriteRun 107A                       _INT2IE 007F84  
                     _INT2IF 007F81                       _CVRCON 000FB5                       i2l3001 190A  
                     i2l3101 05AE                       i2l3013 205E                       i2l3021 171C  
                     i2l3103 05E2                       i2l3031 1778                       i2l3121 0636  
                     i2l3201 07FC                       i2l3025 174C                       i2l3115 0618  
                     i2l3051 0486                       i2l4003 09A0                       i2l3133 0662  
                     i2l3061 04AA                       i2l4101 14F2                       i2l4021 09FC  
                     i2l4013 09DA                       i2l3135 0666                       i2l3151 06A8  
                     i2l3119 0632                       i2l3055 0496                       i2l3311 12B6  
                     i2l4023 0A08                       i2l3161 06E6                       i2l3081 0550  
                     i2l3057 04A4                       i2l3217 13E2                       i2l3163 06EE  
                     i2l3091 0584                       i2l3083 055A                       i2l3075 0536  
                     i2l3067 04D8                       i2l3251 1492                       i2l3307 12A6  
                     i2l4051 0ACE                       i2l3181 0736                       i2l3157 06C2  
                     i2l3149 0692                       i2l3093 0596                       i2l3085 0560  
                     i2l3077 053A                       i2l3245 147A                       i2l3237 144A  
                     i2l3229 141A                       i2l3175 071A                       i2l3087 0572  
                     i2l4119 1576                       i2l3255 14A2                       i2l3247 1484  
                     i2l3319 214C                       i2l3353 2270                       i2l3177 0722  
                     i2l3185 0748                       i2l3169 0704                       i2l3097 05A8  
                     i2l4161 0E40                       i2l4153 0DF4                       i2l4145 0DE2  
                     i2l3187 074E                       i2l3195 07D8                       i2l2811 169A  
                     i2l2803 165C                       i2l4139 0DCC                       i2l4171 0E8E  
                     i2l3189 0792                       i2l3197 07EE                       i2l4085 14AE  
                     i2l2813 16B8                       i2l2805 1666                       i2l4181 0EBE  
                     i2l4157 0E1A                       i2l3199 07F4                       i2l2815 16C2  
                     i2l2807 1684                       i2l4175 0EAE                       i2l4167 0E66  
                     i2l4097 14E6                       i2l3811 0BB2                       i2l3803 0B76  
                     i2l3459 21A8                       i2l2861 1E90                       i2l3805 0B84  
                     i2l2925 1314                       i2l2871 1EB0                       i2l2863 1E94  
                     i2l3823 0C6A                       i2l2943 1356                       i2l2919 12EC  
                     i2l2881 1FAC                       i2l2849 2232                       i2l3841 0D1E  
                     i2l3817 0C32                       i2l2953 137E                       i2l3681 1A32  
                     i2l2859 1E88                       i2l2883 1FB0                       i2l3835 0CE2  
                     i2l3843 0D28                       i2l2939 1346                       i2l3667 1AA8  
                     i2l3683 1A50                       i2l3755 202E                       i2l3829 0CA6  
                     i2l3845 0D60                       i2l2981 18CA                       i2l2949 136E  
                     i2l3669 1AC6                       i2l2887 1FC4                       i2l2879 1FA4  
                     i2l2983 18D2                       i2l2975 18B4                       i2l2799 164E  
                     i2l3695 1B1E                       i2l2993 18F2                       i2l2985 18D6  
                     i2l2969 18A4                       i2l3769 0F3A                       i2l3697 1B28  
                     i2l3953 087C                       i2l3699 1B38                       i2l2997 18FC  
                     i2l3893 19CA                       i2l3889 19C2                       i2l3985 0944  
                     i2l3977 0922                       i2l3899 19E6                       i2l3995 097E  
                     u180_41 12D4                       u182_41 12FC                    ??i2_putch 0003  
                     _SSPADD 000FC8                       _TRISC3 007CA3                       _TRISC4 007CA4  
                     _SSPBUF 000FC9                    AD@channel 0084                checkV@voltage 002C  
                  ??_ReadRun 0007                       _ReadEE 2274                    ??_PermLog 0030  
                     _Latest 00C8               __CFG_XINST$OFF 000000        __end_of_captureKeypad 2258  
                     ___ftge 16EC                       ___wmul 2082                       _check9 1A78  
                     _checkC 1A02                    ??___awdiv 0005                       _checkV 11AC  
             __CFG_STVREN$ON 000000                    ??_WriteEE 0004                    ??___lldiv 0088  
                  ??___ftmul 0013                    ??___lwdiv 0084                    ??___lwmod 008B  
                  ??_checkAA 0030                       clear_0 2168                       clear_1 2174  
           ___awdiv@quotient 0007                       _intrpt 0008                       _testAD 1D66  
                     _printV 213A                    ??_lcdInst 0082                       _printf 0012  
                  ??_getTime 0085        ___ftmul@f3_as_product 0017                  PermLog@time 0037  
                  ??_initLCD 0083                    ??_isdigit 0080             __end_of_showInfo 0D6A  
          __end_ofi2___lwdiv 1EC4                 __mediumconst FDC8            __end_ofi2___lwmod 1FD8  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
           __end_of_simulate 0B42                    ??_showRTC 00A6            __end_ofi2_lcdInst 2300  
          __end_ofi2_getTime 1A02               simulate@period 0054               simulate@portCW 003A  
      __size_of_HexDecToDec2 0048            __end_ofi2_isdigit 223A               simulate@sorted 0056  
                 __accesstop 0080      __end_of__initialization 217A                   ___ftge@ff1 001C  
                 ___ftge@ff2 001F                __end_of_CCW90 1C3C                ___rparam_used 000001  
                 ___awtoft@c 0009                   ___ftmul@f1 000D                   ___ftmul@f2 0010  
         i2___lwmod@dividend 0008               __pcstackCOMRAM 0001                    ?i2_ReadEE 0001  
              __end_of_putch 22D8                  i2printf@idx 0017                  i2printf@len 001A  
                i2printf@val 001D                   __end_of_AD 2012                      ??_CCW90 0018  
                  ?i2___wmul 0001           __size_of_lcdNibble 0068                  i2putch@data 0003  
               _HexDecToDec2 1EC4            HexDecToDec2@digit 000E                    ?i2_printf 000D  
          HexDecToDec2@tenth 000C                  intrpt@F3114 00AA                      ??_putch 0082  
                 back@result 0002                   __pbssBANK0 00AA                      ?_ReadEE 0080  
               stopMoving@em 0025                      ?___ftge 001C                 WriteRun@time 0009  
               ?i2_lcdNibble 0001                      ?___wmul 0080                      ?_check9 002E  
                    ?_checkC 002E                      ?_checkV 0025                   ??i2_ReadEE 0003  
                    ?_intrpt 0001                    ?___awtoft 0009                    ?___ftpack 0001  
                    ?_testAD 0001                      ?_printV 0023                      ?_printf 008C  
                  ?_WriteRun 0007                   ??i2___wmul 0005               WriteRun@sorted 0007  
                 ??i2_printf 0011                      _SSPCON1 000FC6                      _SSPCON2 000FC5  
                    _SSPSTAT 000FC7               checkV@voltage2 0029               checkV@voltage3 0027  
                    i2_putch 22E8               _stopMoving$555 0023  __size_ofi2_I2C_Master_Start 0008  
          __end_of_lcdNibble 1CA4                      _ReadRun 107A  __size_ofi2_I2C_Master_Write 000A  
                    _PermLog 14AA                      __Hparam 0000              __size_of_ReadEE 0018  
                    __Lparam 0000                   _initLatest 21FA                    ?_showInfo 0023  
            __size_of___ftge 0090                    ?_simulate 0001                      ___awdiv 1890  
                    _WriteEE 21AE                      ___lldiv 1582              __size_of___wmul 0036  
                    ___ftmul 12C4              __size_of_check9 0076              __size_of_checkC 0076  
            __size_of_checkV 0118                      ___lwdiv 1914                      ___lwmod 1CA4  
                    _checkAA 1AEE                      __pcinit 2162                   ??___awtoft 000C  
                 ??___ftpack 0006                      __ramtop 1000                   _initialize 1DC4  
            __size_of_intrpt 0F10                      _lcdInst 22D8                   ??_WriteRun 000B  
            __size_of_testAD 005E                      __ptext0 1F52                      __ptext1 1D66  
                    __ptext2 1FD8                      __ptext3 177C                      _getTime 1806  
                    __ptext4 0012                      __ptext5 22C8                      __ptext6 20E6  
                    __ptext7 2082                      __ptext8 1CA4                      __ptext9 1914  
            __size_of_printV 0028                 PermLog@F3082 00BC              __size_of_printf 046A  
                    check9@V 0032                      checkC@V 0032                      _initLCD 1F0C  
          __end_of_hexpowers FDDB                      _dpowers FDC9                      _isdigit 20E6  
   __size_of_I2C_Master_Init 0060     __size_of_I2C_Master_Read 002E                      _showRTC 177C  
   __size_of_I2C_Master_Wait 0014     __size_of_I2C_Master_Stop 0008               __pintcode_body 0D6A  
       end_of_initialization 217A                __Lmediumconst FDC8                      int_func 0D6A  
        i2___wmul@multiplier 0001    __size_of_I2C_Master_Start 0008    __size_of_I2C_Master_Write 000A  
            ___lldiv@divisor 0084              ___lldiv@counter 008C                    _PWMC$1393 0011  
                  _PWMC$1394 0012                    _PWMC$1395 0013                   ??_showInfo 0027  
                    printf@c 00A5                      printf@f 008C             I2C_Master_Init@c 008D  
           I2C_Master_Read@a 0081                      postdec2 000FDD                   ??_simulate 0034  
                    postinc0 000FEE                      postinc2 000FDE             checkV@threshhold 0025  
                  _PORTBbits 000F81                  PWMC@widthus 0009              simulate@portCCW 0040  
          i2_I2C_Master_Read 2188            i2_I2C_Master_Wait 22B6            i2_I2C_Master_Stop 2324  
          i2___lwdiv@divisor 0003                    i2___lwdiv 1E72                    i2___lwmod 1F96  
          i2___lwdiv@counter 0007           ?i2_I2C_Master_Read 0001           ?i2_I2C_Master_Wait 0001  
         ?i2_I2C_Master_Stop 0001                    i2_lcdInst 22F4                    i2_getTime 198C  
                printf@width 00A3              PermLog@backruns 0039                   _stopMoving 2012  
        ??i2_I2C_Master_Read 0002                    i2_isdigit 221C          ??i2_I2C_Master_Wait 0001  
        ??i2_I2C_Master_Stop 0002                ReadRun@sorted 0003                  simulate@now 0046  
               check9@sorted 002E                  ___ftmul@exp 0016               __end_of_ReadEE 228C  
                ?_initLatest 0001               __end_of___ftge 177C               __end_of___wmul 20B8  
             __end_of_check9 1AEE               __end_of_checkC 1A78               __end_of_checkV 12C4  
       __size_ofi2_lcdNibble 0056                  ?_initialize 0001                i2lcdInst@data 0003  
               checkC@sorted 002E            __size_ofi2_ReadEE 0016               __end_of_intrpt 0F18  
             __end_of_testAD 1DC4             i2___wmul@product 0005               __end_of_printV 2162  
             __end_of_printf 047C                 i2printf@flag 001F              i2ReadEE@address 0001  
  __end_ofi2_I2C_Master_Read 21AE    __end_ofi2_I2C_Master_Wait 22C8                 i2printf@prec 001C  
        start_initialization 2162    __end_ofi2_I2C_Master_Stop 232C            __size_ofi2___wmul 0026  
                  i2printf@c 0022                    i2printf@f 000D       __size_of_captureKeypad 001E  
      i2I2C_Master_Read@temp 0003                i2getTime@time 0004                   ?i2___lwdiv 0001  
                 ?i2___lwmod 0008            __size_ofi2_printf 039A            ??_I2C_Master_Init 0091  
          ??_I2C_Master_Read 0081            ??_I2C_Master_Wait 0080                   ?i2_lcdInst 0001  
          ??_I2C_Master_Stop 0081                   ?i2_getTime 0004                  i2AD@channel 0005  
                 ?i2_isdigit 0001                     ??_ReadEE 0082                     CW90@port 0016  
                   ??___ftge 0022                     ??___wmul 0084                     ??_check9 0030  
                   ??_checkC 0030                     ??_checkV 0027             __CFG_LPT1OSC$OFF 000000  
                   ??_intrpt 005A                     ??_testAD 00A6                     ??_printV 0025  
                   ??_printf 0094                  WriteEE@data 0003            __size_of___awtoft 0038  
          __size_of___ftpack 00AE            __size_of_WriteRun 0162                  __pbssCOMRAM 0071  
              __pcstackBANK0 0080            i2___lwmod@divisor 000A            i2___lwmod@counter 000C  
               _isdigit$1054 0081          __size_of_initLatest 0022                     ?i2_putch 0001  
             intrpt@keypress 006A          __size_of_initialize 0058                  ?_stopMoving 0001  
           _I2C_Master_Start 231C                     ?_ReadRun 0003          i2I2C_Master_Write@d 0002  
           _I2C_Master_Write 2300                     ?_PermLog 0001             ___lwdiv@dividend 0080  
               intrpt@portCW 006B            __CFG_CCP2MX$PORTC 000000                  WriteRun@add 000D  
              _captureKeypad 223A                    __pintcode 0008                __pmediumconst FDC8  
                  _lcdNibble 1C3C                     ?___awdiv 0001                     ?_WriteEE 0001  
                   ?___lldiv 0080                     ?___ftmul 000D                     ?___lwdiv 0080  
                   ?___lwmod 0087            __size_of_showInfo 0228                     ?_checkAA 002E  
          __size_of_simulate 032C                     ?_lcdInst 0001                     ?_getTime 0083  
                   PWMC@port 000D               __size_of_CCW90 006E                     ?_initLCD 0001  
                   ?_isdigit 0001   __size_ofi2_I2C_Master_Read 0026   __size_ofi2_I2C_Master_Wait 0012  
 __size_ofi2_I2C_Master_Stop 0008                     ?_showRTC 0001                    _hexpowers FDD3  
           ___lwdiv@quotient 0084                  ??i2___lwdiv 0005                  ??i2___lwmod 000C  
             __size_of_putch 0010                  __size_of_AD 003A   __end_ofi2_I2C_Master_Start 2334  
 __end_ofi2_I2C_Master_Write 2314                  ??i2_lcdInst 0003                  ??i2_getTime 0006  
             ___wmul@product 0084                     _LATDbits 000F8C                  ??i2_isdigit 0001  
                   i2u300_40 0F2E                     i2u230_45 1422                     i2u230_46 1424  
                   i2u305_41 08D4                     i2u233_45 1452                     i2u233_46 1454  
                   i2u306_41 08E6                     i2u236_45 1482                     i2u236_46 1484  
                   i2u332_47 0B16                     i2u333_47 1494                     i2u262_40 21A6  
                   i2u334_47 1552                     i2u319_41 0DB4                     i2u335_47 1E34  
                   i2u336_47 1E3E                     i2u337_47 1E60                     i2u338_47 1E6A  
             ?_captureKeypad 0001                     _PIR2bits 000FA1                     i2u297_45 1ED0  
           __CFG_WDTPS$32768 000000                   PWMC@cycles 000B                   ?_lcdNibble 0001  
                   i2_ReadEE 228C                   _ADCON0bits 000FC2            ___wmul@multiplier 0080  
                   i2___wmul 21D4                lcdNibble@data 0081                   printf@flag 00A2  
              lcdNibble@temp 0080                   printf@prec 009F                   simulate@AA 004E  
        __size_of_stopMoving 0038                   simulate@V9 0052                     i2_printf 047C  
      captureKeypad@keypress 0003          I2C_Master_Read@temp 0082             __size_ofi2_putch 000C  
                 _EECON1bits 000FA6               showInfo@sorted 0025                     __Hrparam 0000  
           __size_of_ReadRun 0132                     __Lrparam 0000             __size_of_PermLog 00D8  
               ??_initLatest 0082           __CFG_BOREN$SBORDIS 000000             __size_of___awdiv 0084  
      i2___wmul@multiplicand 0003             __size_of_WriteEE 0026             __size_of___lldiv 00BC  
           __size_of___ftmul 00F4             __size_of___lwdiv 0078             __size_of___lwmod 0062  
               ??_initialize 0095                     ___awtoft 204A                     ___ftpack 163E  
           __size_of_checkAA 0072                     _WriteRun 0F18           i2I2C_Master_Read@a 0002  
           __size_of_lcdInst 0010             __size_of_getTime 008A              HexDecToDec2@hex 0007  
            _I2C_Master_Init 1D06              _I2C_Master_Read 20B8             __size_of_initLCD 0046  
                   back@runs 0001                ?_HexDecToDec2 0007              _I2C_Master_Wait 22A2  
            _I2C_Master_Stop 2314             __size_of_isdigit 002A              ___lwdiv@divisor 0082  
            ___lwdiv@counter 0086                     __ptext10 1806                     __ptext11 2300  
                   __ptext20 22D8                     __ptext12 2314                     __ptext21 1C3C  
                   __ptext13 231C                     __ptext30 2188                     __ptext22 1D06  
                   __ptext14 20B8                     __ptext31 22B6                     __ptext23 1582  
                   __ptext15 22A2                     __ptext40 16EC                     __ptext32 2012  
                   __ptext16 1DC4                     __ptext41 204A                     __ptext33 1A02  
                   __ptext25 0816                     __ptext17 21FA                     __ptext50 14AA  
                   __ptext42 163E                     __ptext34 1AEE                     __ptext26 198C  
                   __ptext18 2274                     __ptext51 0B42                     __ptext43 0F18  
                   __ptext35 1A78                     __ptext27 230A                     __ptext19 1F0C  
                   __ptext60 223A                     __ptext52 047C                     __ptext44 21AE  
                   __ptext36 213A                     __ptext28 2324                     __ptext61 107A  
                   __ptext53 22E8                     __ptext45 1EC4                     __ptext37 11AC  
                   __ptext29 232C                     __ptext62 228C                     __ptext54 221C  
                   __ptext46 1B60                     __ptext38 2110                     __ptext63 2258  
                   __ptext55 21D4                     __ptext47 1BCE                     __ptext39 12C4  
                   __ptext56 1F96                     __ptext48 13B8                     __ptext57 1E72  
                   __ptext49 1890                     __ptext58 22F4                     __ptext59 1E1C  
           __size_of_showRTC 008A           __end_of_initLatest 221C                     checkAA@V 0032  
              __size_of_CW90 006E                __size_ofi2_AD 002A                __size_of_PWMC 00F2  
             i2_isdigit$1054 0002                __size_of_back 001C                __size_of_main 0044  
         __end_of_initialize 1E1C              ??_captureKeypad 0003                     _showInfo 0B42  
              ??i2_lcdNibble 0001                  ??_lcdNibble 0080                     getTime@i 0085  
                   _simulate 0816                     int$flags 007E                    printf@idx 009A  
                  printf@len 009D                    printf@val 00A0                    simulate@C 0050  
              PermLog@goback 0036               ??_HexDecToDec2 0009                    putch@data 0082  
   __end_of_I2C_Master_Start 2324     __end_of_I2C_Master_Write 230A                   _INTCONbits 000FF2  
              PermLog@sorted 0032                PWMC@countdown 0014                     isdigit@c 0082  
              _simulate$1496 0038                     intlevel2 0000             ___lwmod@dividend 0087  
           ___lldiv@dividend 0080                 ??_stopMoving 0023                     printf@ap 009B  
                   printf@cp 0098      __end_of_I2C_Master_Init 1D66      __end_of_I2C_Master_Read 20E6  
    __end_of_I2C_Master_Wait 22B6      __end_of_I2C_Master_Stop 231C                  lcdInst@data 0082  
               showInfo@time 0023                 showInfo@stop 002E                 showInfo@type 002C  
        __end_ofi2_lcdNibble 1E72             ___lldiv@quotient 0088            I2C_Master_Write@d 0081  
            ___lwmod@divisor 0089              ___lwmod@counter 008B           __end_of_stopMoving 204A  
             WriteEE@address 0001                  getTime@time 0083                printV@charged 0023  



Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Apr 10 15:20:56 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	text36,global,reloc=2,class=CODE,delta=1
    51                           	psect	text37,global,reloc=2,class=CODE,delta=1
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	text39,global,reloc=2,class=CODE,delta=1
    54                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text44,global,reloc=2,class=CODE,delta=1
    59                           	psect	text45,global,reloc=2,class=CODE,delta=1
    60                           	psect	text46,global,reloc=2,class=CODE,delta=1
    61                           	psect	text47,global,reloc=2,class=CODE,delta=1
    62                           	psect	text48,global,reloc=2,class=CODE,delta=1
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	text50,global,reloc=2,class=CODE,delta=1
    65                           	psect	text51,global,reloc=2,class=CODE,delta=1
    66                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,delta=1
    81                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    82                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    83                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    84  0000                     
    85                           ; Version 1.41
    86                           ; Generated 25/01/2017 GMT
    87                           ; 
    88                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    89                           ; All rights reserved.
    90                           ; 
    91                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    92                           ; 
    93                           ; Redistribution and use in source and binary forms, with or without modification, are
    94                           ; permitted provided that the following conditions are met:
    95                           ; 
    96                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    97                           ;        conditions and the following disclaimer.
    98                           ; 
    99                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   100                           ;        of conditions and the following disclaimer in the documentation and/or other
   101                           ;        materials provided with the distribution.
   102                           ; 
   103                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   104                           ;        software without specific prior written permission.
   105                           ; 
   106                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   107                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   108                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   109                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   110                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   111                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   112                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   113                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   114                           ; 
   115                           ; 
   116                           ; Code-generator required, PIC18F4620 Definitions
   117                           ; 
   118                           ; SFR Addresses
   119  0000                     
   120                           	psect	idataBANK0
   121  0027E2                     __pidataBANK0:
   122                           	opt stack 0
   123                           
   124                           ;initializer for AASpin@F3067
   125  0027E2  0001               	dw	1
   126  0027E4  0000               	dw	0
   127  0027E6  0000               	dw	0
   128                           
   129                           ;initializer for CSpin@F3063
   130  0027E8  0000               	dw	0
   131  0027EA  0001               	dw	1
   132  0027EC  0000               	dw	0
   133                           
   134                           ;initializer for V9Spin@F3059
   135  0027EE  0000               	dw	0
   136  0027F0  0000               	dw	0
   137  0027F2  0001               	dw	1
   138                           
   139                           	psect	mediumconst
   140  00FDE6                     __pmediumconst:
   141                           	opt stack 0
   142  00FDE6  00                 	db	0
   143  00FDE7                     _dpowers:
   144                           	opt stack 0
   145  00FDE7  0001               	dw	1
   146  00FDE9  000A               	dw	10
   147  00FDEB  0064               	dw	100
   148  00FDED  03E8               	dw	1000
   149  00FDEF  2710               	dw	10000
   150  00FDF1                     __end_of_dpowers:
   151                           	opt stack 0
   152  00FDF1                     _hexpowers:
   153                           	opt stack 0
   154  00FDF1  0001               	dw	1
   155  00FDF3  0010               	dw	16
   156  00FDF5  0100               	dw	256
   157  00FDF7  1000               	dw	4096
   158  00FDF9                     __end_of_hexpowers:
   159                           	opt stack 0
   160  0000                     _PIR2bits	set	4001
   161  0000                     _EECON2	set	4007
   162  0000                     _EEDATA	set	4008
   163  0000                     _EECON1bits	set	4006
   164  0000                     _EEADR	set	4009
   165  0000                     _EEADRH	set	4010
   166  0000                     _SSPBUF	set	4041
   167  0000                     _SSPADD	set	4040
   168  0000                     _SSPCON2	set	4037
   169  0000                     _SSPCON1	set	4038
   170  0000                     _SSPSTAT	set	4039
   171  0000                     _ADRESL	set	4035
   172  0000                     _ADRESH	set	4036
   173  0000                     _ADCON0bits	set	4034
   174  0000                     _LATDbits	set	3980
   175  0000                     _PORTBbits	set	3969
   176  0000                     _PORTB	set	3969
   177  0000                     _INTCONbits	set	4082
   178  0000                     _CVRCON	set	4021
   179  0000                     _ADCON1	set	4033
   180  0000                     _ADCON0	set	4034
   181  0000                     _LATE	set	3981
   182  0000                     _LATD	set	3980
   183  0000                     _LATC	set	3979
   184  0000                     _LATB	set	3978
   185  0000                     _LATA	set	3977
   186  0000                     _TRISE	set	3990
   187  0000                     _TRISD	set	3989
   188  0000                     _TRISC	set	3988
   189  0000                     _TRISB	set	3987
   190  0000                     _TRISA	set	3986
   191  0000                     _ACKEN	set	32300
   192  0000                     _ACKDT	set	32301
   193  0000                     _RCEN	set	32299
   194  0000                     _PEN	set	32298
   195  0000                     _SEN	set	32296
   196  0000                     _TRISC4	set	31908
   197  0000                     _TRISC3	set	31907
   198  0000                     _ADON	set	32272
   199  0000                     _INT1IE	set	32643
   200  0000                     _LATC5	set	31837
   201  0000                     _LATC7	set	31839
   202  0000                     _INT1IF	set	32640
   203  0000                     _INT2IF	set	32641
   204  0000                     _INT2IE	set	32644
   205  0000                     _LATC6	set	31838
   206  0000                     _INTEDG2	set	32652
   207  0000                     _ADFM	set	32263
   208  0000                     _LATB2	set	31826
   209  0000                     _LATC2	set	31834
   210  0000                     _LATC1	set	31833
   211  0000                     _LATC0	set	31832
   212  00FDF9                     STR_15:
   213                           
   214                           ; BSR set to: 0
   215  00FDF9  53                 	db	83	;'S'
   216  00FDFA  6F                 	db	111	;'o'
   217  00FDFB  72                 	db	114	;'r'
   218  00FDFC  74                 	db	116	;'t'
   219  00FDFD  69                 	db	105	;'i'
   220  00FDFE  6E                 	db	110	;'n'
   221  00FDFF  67                 	db	103	;'g'
   222  00FE00  20                 	db	32
   223  00FE01  43                 	db	67	;'C'
   224  00FE02  6F                 	db	111	;'o'
   225  00FE03  6D                 	db	109	;'m'
   226  00FE04  70                 	db	112	;'p'
   227  00FE05  6C                 	db	108	;'l'
   228  00FE06  65                 	db	101	;'e'
   229  00FE07  74                 	db	116	;'t'
   230  00FE08  65                 	db	101	;'e'
   231  00FE09  20                 	db	32
   232  00FE0A  20                 	db	32
   233  00FE0B  20                 	db	32
   234  00FE0C  20                 	db	32
   235  00FE0D  20                 	db	32
   236  00FE0E  20                 	db	32
   237  00FE0F  20                 	db	32
   238  00FE10  20                 	db	32
   239  00FE11  20                 	db	32
   240  00FE12  20                 	db	32
   241  00FE13  00                 	db	0
   242  00FE14                     STR_31:
   243                           
   244                           ; BSR set to: 0
   245  00FE14  20                 	db	32
   246  00FE15  20                 	db	32
   247  00FE16  20                 	db	32
   248  00FE17  20                 	db	32
   249  00FE18  25                 	db	37
   250  00FE19  30                 	db	48	;'0'
   251  00FE1A  32                 	db	50	;'2'
   252  00FE1B  78                 	db	120	;'x'
   253  00FE1C  2F                 	db	47
   254  00FE1D  25                 	db	37
   255  00FE1E  30                 	db	48	;'0'
   256  00FE1F  32                 	db	50	;'2'
   257  00FE20  78                 	db	120	;'x'
   258  00FE21  2F                 	db	47
   259  00FE22  25                 	db	37
   260  00FE23  30                 	db	48	;'0'
   261  00FE24  32                 	db	50	;'2'
   262  00FE25  78                 	db	120	;'x'
   263  00FE26  20                 	db	32
   264  00FE27  20                 	db	32
   265  00FE28  20                 	db	32
   266  00FE29  20                 	db	32
   267  00FE2A  20                 	db	32
   268  00FE2B  20                 	db	32
   269  00FE2C  00                 	db	0
   270  00FE2D                     STR_32:
   271                           
   272                           ; BSR set to: 0
   273  00FE2D  20                 	db	32
   274  00FE2E  20                 	db	32
   275  00FE2F  20                 	db	32
   276  00FE30  20                 	db	32
   277  00FE31  25                 	db	37
   278  00FE32  30                 	db	48	;'0'
   279  00FE33  32                 	db	50	;'2'
   280  00FE34  78                 	db	120	;'x'
   281  00FE35  3A                 	db	58	;':'
   282  00FE36  25                 	db	37
   283  00FE37  30                 	db	48	;'0'
   284  00FE38  32                 	db	50	;'2'
   285  00FE39  78                 	db	120	;'x'
   286  00FE3A  3A                 	db	58	;':'
   287  00FE3B  25                 	db	37
   288  00FE3C  30                 	db	48	;'0'
   289  00FE3D  32                 	db	50	;'2'
   290  00FE3E  78                 	db	120	;'x'
   291  00FE3F  20                 	db	32
   292  00FE40  20                 	db	32
   293  00FE41  20                 	db	32
   294  00FE42  20                 	db	32
   295  00FE43  20                 	db	32
   296  00FE44  20                 	db	32
   297  00FE45  00                 	db	0
   298  00FE46                     STR_36:
   299                           
   300                           ; BSR set to: 0
   301  00FE46  54                 	db	84	;'T'
   302  00FE47  69                 	db	105	;'i'
   303  00FE48  6D                 	db	109	;'m'
   304  00FE49  65                 	db	101	;'e'
   305  00FE4A  20                 	db	32
   306  00FE4B  45                 	db	69	;'E'
   307  00FE4C  6C                 	db	108	;'l'
   308  00FE4D  61                 	db	97	;'a'
   309  00FE4E  70                 	db	112	;'p'
   310  00FE4F  73                 	db	115	;'s'
   311  00FE50  65                 	db	101	;'e'
   312  00FE51  64                 	db	100	;'d'
   313  00FE52  3A                 	db	58	;':'
   314  00FE53  20                 	db	32
   315  00FE54  20                 	db	32
   316  00FE55  20                 	db	32
   317  00FE56  20                 	db	32
   318  00FE57  20                 	db	32
   319  00FE58  20                 	db	32
   320  00FE59  20                 	db	32
   321  00FE5A  20                 	db	32
   322  00FE5B  20                 	db	32
   323  00FE5C  20                 	db	32
   324  00FE5D  00                 	db	0
   325  00FE5E                     STR_38:
   326                           
   327                           ; BSR set to: 0
   328  00FE5E  54                 	db	84	;'T'
   329  00FE5F  6F                 	db	111	;'o'
   330  00FE60  74                 	db	116	;'t'
   331  00FE61  61                 	db	97	;'a'
   332  00FE62  6C                 	db	108	;'l'
   333  00FE63  20                 	db	32
   334  00FE64  53                 	db	83	;'S'
   335  00FE65  6F                 	db	111	;'o'
   336  00FE66  72                 	db	114	;'r'
   337  00FE67  74                 	db	116	;'t'
   338  00FE68  65                 	db	101	;'e'
   339  00FE69  64                 	db	100	;'d'
   340  00FE6A  3A                 	db	58	;':'
   341  00FE6B  20                 	db	32
   342  00FE6C  20                 	db	32
   343  00FE6D  20                 	db	32
   344  00FE6E  20                 	db	32
   345  00FE6F  20                 	db	32
   346  00FE70  20                 	db	32
   347  00FE71  20                 	db	32
   348  00FE72  20                 	db	32
   349  00FE73  20                 	db	32
   350  00FE74  20                 	db	32
   351  00FE75  00                 	db	0
   352  00FE76                     STR_35:
   353                           
   354                           ; BSR set to: 0
   355  00FE76  46                 	db	70	;'F'
   356  00FE77  6F                 	db	111	;'o'
   357  00FE78  72                 	db	114	;'r'
   358  00FE79  20                 	db	32
   359  00FE7A  6D                 	db	109	;'m'
   360  00FE7B  6F                 	db	111	;'o'
   361  00FE7C  72                 	db	114	;'r'
   362  00FE7D  65                 	db	101	;'e'
   363  00FE7E  20                 	db	32
   364  00FE7F  69                 	db	105	;'i'
   365  00FE80  6E                 	db	110	;'n'
   366  00FE81  66                 	db	102	;'f'
   367  00FE82  6F                 	db	111	;'o'
   368  00FE83  20                 	db	32
   369  00FE84  20                 	db	32
   370  00FE85  20                 	db	32
   371  00FE86  20                 	db	32
   372  00FE87  20                 	db	32
   373  00FE88  20                 	db	32
   374  00FE89  20                 	db	32
   375  00FE8A  20                 	db	32
   376  00FE8B  20                 	db	32
   377  00FE8C  20                 	db	32
   378  00FE8D  00                 	db	0
   379  00FE8E                     STR_39:
   380                           
   381                           ; BSR set to: 0
   382  00FE8E  25                 	db	37
   383  00FE8F  75                 	db	117	;'u'
   384  00FE90  20                 	db	32
   385  00FE91  62                 	db	98	;'b'
   386  00FE92  61                 	db	97	;'a'
   387  00FE93  74                 	db	116	;'t'
   388  00FE94  74                 	db	116	;'t'
   389  00FE95  65                 	db	101	;'e'
   390  00FE96  72                 	db	114	;'r'
   391  00FE97  69                 	db	105	;'i'
   392  00FE98  65                 	db	101	;'e'
   393  00FE99  73                 	db	115	;'s'
   394  00FE9A  20                 	db	32
   395  00FE9B  20                 	db	32
   396  00FE9C  20                 	db	32
   397  00FE9D  20                 	db	32
   398  00FE9E  20                 	db	32
   399  00FE9F  20                 	db	32
   400  00FEA0  20                 	db	32
   401  00FEA1  20                 	db	32
   402  00FEA2  20                 	db	32
   403  00FEA3  20                 	db	32
   404  00FEA4  00                 	db	0
   405  00FEA5                     STR_55:
   406                           
   407                           ; BSR set to: 0
   408  00FEA5  50                 	db	80	;'P'
   409  00FEA6  65                 	db	101	;'e'
   410  00FEA7  72                 	db	114	;'r'
   411  00FEA8  6D                 	db	109	;'m'
   412  00FEA9  61                 	db	97	;'a'
   413  00FEAA  6E                 	db	110	;'n'
   414  00FEAB  65                 	db	101	;'e'
   415  00FEAC  6E                 	db	110	;'n'
   416  00FEAD  74                 	db	116	;'t'
   417  00FEAE  20                 	db	32
   418  00FEAF  6C                 	db	108	;'l'
   419  00FEB0  6F                 	db	111	;'o'
   420  00FEB1  67                 	db	103	;'g'
   421  00FEB2  3A                 	db	58	;':'
   422  00FEB3  20                 	db	32
   423  00FEB4  20                 	db	32
   424  00FEB5  20                 	db	32
   425  00FEB6  20                 	db	32
   426  00FEB7  20                 	db	32
   427  00FEB8  20                 	db	32
   428  00FEB9  20                 	db	32
   429  00FEBA  00                 	db	0
   430  00FEBB                     STR_40:
   431                           
   432                           ; BSR set to: 0
   433  00FEBB  43                 	db	67	;'C'
   434  00FEBC  68                 	db	104	;'h'
   435  00FEBD  61                 	db	97	;'a'
   436  00FEBE  72                 	db	114	;'r'
   437  00FEBF  67                 	db	103	;'g'
   438  00FEC0  65                 	db	101	;'e'
   439  00FEC1  64                 	db	100	;'d'
   440  00FEC2  20                 	db	32
   441  00FEC3  41                 	db	65	;'A'
   442  00FEC4  41                 	db	65	;'A'
   443  00FEC5  3A                 	db	58	;':'
   444  00FEC6  20                 	db	32
   445  00FEC7  20                 	db	32
   446  00FEC8  20                 	db	32
   447  00FEC9  20                 	db	32
   448  00FECA  20                 	db	32
   449  00FECB  20                 	db	32
   450  00FECC  20                 	db	32
   451  00FECD  20                 	db	32
   452  00FECE  20                 	db	32
   453  00FECF  20                 	db	32
   454  00FED0  00                 	db	0
   455  00FED1                     STR_44:
   456                           
   457                           ; BSR set to: 0
   458  00FED1  43                 	db	67	;'C'
   459  00FED2  68                 	db	104	;'h'
   460  00FED3  61                 	db	97	;'a'
   461  00FED4  72                 	db	114	;'r'
   462  00FED5  67                 	db	103	;'g'
   463  00FED6  65                 	db	101	;'e'
   464  00FED7  64                 	db	100	;'d'
   465  00FED8  20                 	db	32
   466  00FED9  39                 	db	57	;'9'
   467  00FEDA  56                 	db	86	;'V'
   468  00FEDB  3A                 	db	58	;':'
   469  00FEDC  20                 	db	32
   470  00FEDD  20                 	db	32
   471  00FEDE  20                 	db	32
   472  00FEDF  20                 	db	32
   473  00FEE0  20                 	db	32
   474  00FEE1  20                 	db	32
   475  00FEE2  20                 	db	32
   476  00FEE3  20                 	db	32
   477  00FEE4  20                 	db	32
   478  00FEE5  20                 	db	32
   479  00FEE6  00                 	db	0
   480  00FEE7                     STR_34:
   481                           
   482                           ; BSR set to: 0
   483  00FEE7  50                 	db	80	;'P'
   484  00FEE8  72                 	db	114	;'r'
   485  00FEE9  65                 	db	101	;'e'
   486  00FEEA  73                 	db	115	;'s'
   487  00FEEB  73                 	db	115	;'s'
   488  00FEEC  20                 	db	32
   489  00FEED  61                 	db	97	;'a'
   490  00FEEE  20                 	db	32
   491  00FEEF  6B                 	db	107	;'k'
   492  00FEF0  65                 	db	101	;'e'
   493  00FEF1  79                 	db	121	;'y'
   494  00FEF2  20                 	db	32
   495  00FEF3  20                 	db	32
   496  00FEF4  20                 	db	32
   497  00FEF5  20                 	db	32
   498  00FEF6  20                 	db	32
   499  00FEF7  20                 	db	32
   500  00FEF8  20                 	db	32
   501  00FEF9  20                 	db	32
   502  00FEFA  20                 	db	32
   503  00FEFB  20                 	db	32
   504  00FEFC  00                 	db	0
   505  00FEFD                     STR_42:
   506                           
   507                           ; BSR set to: 0
   508  00FEFD  43                 	db	67	;'C'
   509  00FEFE  68                 	db	104	;'h'
   510  00FEFF  61                 	db	97	;'a'
   511  00FF00  72                 	db	114	;'r'
   512  00FF01  67                 	db	103	;'g'
   513  00FF02  65                 	db	101	;'e'
   514  00FF03  64                 	db	100	;'d'
   515  00FF04  20                 	db	32
   516  00FF05  43                 	db	67	;'C'
   517  00FF06  3A                 	db	58	;':'
   518  00FF07  20                 	db	32
   519  00FF08  20                 	db	32
   520  00FF09  20                 	db	32
   521  00FF0A  20                 	db	32
   522  00FF0B  20                 	db	32
   523  00FF0C  20                 	db	32
   524  00FF0D  20                 	db	32
   525  00FF0E  20                 	db	32
   526  00FF0F  20                 	db	32
   527  00FF10  20                 	db	32
   528  00FF11  00                 	db	0
   529  00FF12                     STR_46:
   530                           
   531                           ; BSR set to: 0
   532  00FF12  55                 	db	85	;'U'
   533  00FF13  6E                 	db	110	;'n'
   534  00FF14  63                 	db	99	;'c'
   535  00FF15  68                 	db	104	;'h'
   536  00FF16  61                 	db	97	;'a'
   537  00FF17  72                 	db	114	;'r'
   538  00FF18  67                 	db	103	;'g'
   539  00FF19  65                 	db	101	;'e'
   540  00FF1A  64                 	db	100	;'d'
   541  00FF1B  3A                 	db	58	;':'
   542  00FF1C  20                 	db	32
   543  00FF1D  20                 	db	32
   544  00FF1E  20                 	db	32
   545  00FF1F  20                 	db	32
   546  00FF20  20                 	db	32
   547  00FF21  20                 	db	32
   548  00FF22  20                 	db	32
   549  00FF23  20                 	db	32
   550  00FF24  20                 	db	32
   551  00FF25  20                 	db	32
   552  00FF26  00                 	db	0
   553  00FF27                     STR_37:
   554                           
   555                           ; BSR set to: 0
   556  00FF27  25                 	db	37
   557  00FF28  75                 	db	117	;'u'
   558  00FF29  20                 	db	32
   559  00FF2A  73                 	db	115	;'s'
   560  00FF2B  65                 	db	101	;'e'
   561  00FF2C  63                 	db	99	;'c'
   562  00FF2D  6F                 	db	111	;'o'
   563  00FF2E  6E                 	db	110	;'n'
   564  00FF2F  64                 	db	100	;'d'
   565  00FF30  73                 	db	115	;'s'
   566  00FF31  20                 	db	32
   567  00FF32  20                 	db	32
   568  00FF33  20                 	db	32
   569  00FF34  20                 	db	32
   570  00FF35  20                 	db	32
   571  00FF36  20                 	db	32
   572  00FF37  20                 	db	32
   573  00FF38  20                 	db	32
   574  00FF39  20                 	db	32
   575  00FF3A  20                 	db	32
   576  00FF3B  00                 	db	0
   577  00FF3C                     STR_1:
   578                           
   579                           ; BSR set to: 0
   580  00FF3C  53                 	db	83	;'S'
   581  00FF3D  6F                 	db	111	;'o'
   582  00FF3E  72                 	db	114	;'r'
   583  00FF3F  74                 	db	116	;'t'
   584  00FF40  69                 	db	105	;'i'
   585  00FF41  6E                 	db	110	;'n'
   586  00FF42  67                 	db	103	;'g'
   587  00FF43  2E                 	db	46
   588  00FF44  2E                 	db	46
   589  00FF45  2E                 	db	46
   590  00FF46  20                 	db	32
   591  00FF47  20                 	db	32
   592  00FF48  20                 	db	32
   593  00FF49  20                 	db	32
   594  00FF4A  20                 	db	32
   595  00FF4B  20                 	db	32
   596  00FF4C  20                 	db	32
   597  00FF4D  20                 	db	32
   598  00FF4E  20                 	db	32
   599  00FF4F  20                 	db	32
   600  00FF50  00                 	db	0
   601  00FF51                     STR_48:
   602                           
   603                           ; BSR set to: 0
   604  00FF51  45                 	db	69	;'E'
   605  00FF52  6D                 	db	109	;'m'
   606  00FF53  65                 	db	101	;'e'
   607  00FF54  72                 	db	114	;'r'
   608  00FF55  67                 	db	103	;'g'
   609  00FF56  65                 	db	101	;'e'
   610  00FF57  6E                 	db	110	;'n'
   611  00FF58  63                 	db	99	;'c'
   612  00FF59  79                 	db	121	;'y'
   613  00FF5A  20                 	db	32
   614  00FF5B  20                 	db	32
   615  00FF5C  20                 	db	32
   616  00FF5D  20                 	db	32
   617  00FF5E  20                 	db	32
   618  00FF5F  20                 	db	32
   619  00FF60  20                 	db	32
   620  00FF61  20                 	db	32
   621  00FF62  20                 	db	32
   622  00FF63  20                 	db	32
   623  00FF64  00                 	db	0
   624  00FF65                     STR_33:
   625                           
   626                           ; BSR set to: 0
   627  00FF65  57                 	db	87	;'W'
   628  00FF66  65                 	db	101	;'e'
   629  00FF67  6C                 	db	108	;'l'
   630  00FF68  63                 	db	99	;'c'
   631  00FF69  6F                 	db	111	;'o'
   632  00FF6A  6D                 	db	109	;'m'
   633  00FF6B  65                 	db	101	;'e'
   634  00FF6C  21                 	db	33
   635  00FF6D  20                 	db	32
   636  00FF6E  20                 	db	32
   637  00FF6F  20                 	db	32
   638  00FF70  20                 	db	32
   639  00FF71  20                 	db	32
   640  00FF72  20                 	db	32
   641  00FF73  20                 	db	32
   642  00FF74  20                 	db	32
   643  00FF75  20                 	db	32
   644  00FF76  20                 	db	32
   645  00FF77  00                 	db	0
   646  00FF78                     STR_56:
   647                           
   648                           ; BSR set to: 0
   649  00FF78  57                 	db	87	;'W'
   650  00FF79  68                 	db	104	;'h'
   651  00FF7A  69                 	db	105	;'i'
   652  00FF7B  63                 	db	99	;'c'
   653  00FF7C  68                 	db	104	;'h'
   654  00FF7D  20                 	db	32
   655  00FF7E  72                 	db	114	;'r'
   656  00FF7F  75                 	db	117	;'u'
   657  00FF80  6E                 	db	110	;'n'
   658  00FF81  3F                 	db	63	;'?'
   659  00FF82  20                 	db	32
   660  00FF83  20                 	db	32
   661  00FF84  20                 	db	32
   662  00FF85  20                 	db	32
   663  00FF86  20                 	db	32
   664  00FF87  20                 	db	32
   665  00FF88  20                 	db	32
   666  00FF89  00                 	db	0
   667  00FF8A                     STR_49:
   668                           
   669                           ; BSR set to: 0
   670  00FF8A  53                 	db	83	;'S'
   671  00FF8B  74                 	db	116	;'t'
   672  00FF8C  6F                 	db	111	;'o'
   673  00FF8D  70                 	db	112	;'p'
   674  00FF8E  70                 	db	112	;'p'
   675  00FF8F  65                 	db	101	;'e'
   676  00FF90  64                 	db	100	;'d'
   677  00FF91  20                 	db	32
   678  00FF92  20                 	db	32
   679  00FF93  20                 	db	32
   680  00FF94  20                 	db	32
   681  00FF95  20                 	db	32
   682  00FF96  20                 	db	32
   683  00FF97  20                 	db	32
   684  00FF98  20                 	db	32
   685  00FF99  20                 	db	32
   686  00FF9A  20                 	db	32
   687  00FF9B  00                 	db	0
   688  00FF9C                     STR_59:
   689                           
   690                           ; BSR set to: 0
   691  00FF9C  30                 	db	48	;'0'
   692  00FF9D  31                 	db	49	;'1'
   693  00FF9E  32                 	db	50	;'2'
   694  00FF9F  33                 	db	51	;'3'
   695  00FFA0  34                 	db	52	;'4'
   696  00FFA1  35                 	db	53	;'5'
   697  00FFA2  36                 	db	54	;'6'
   698  00FFA3  37                 	db	55	;'7'
   699  00FFA4  38                 	db	56	;'8'
   700  00FFA5  39                 	db	57	;'9'
   701  00FFA6  61                 	db	97	;'a'
   702  00FFA7  62                 	db	98	;'b'
   703  00FFA8  63                 	db	99	;'c'
   704  00FFA9  64                 	db	100	;'d'
   705  00FFAA  65                 	db	101	;'e'
   706  00FFAB  66                 	db	102	;'f'
   707  00FFAC  00                 	db	0
   708  00FFAD                     STR_57:
   709                           
   710                           ; BSR set to: 0
   711  00FFAD  73                 	db	115	;'s'
   712  00FFAE  68                 	db	104	;'h'
   713  00FFAF  6F                 	db	111	;'o'
   714  00FFB0  77                 	db	119	;'w'
   715  00FFB1  69                 	db	105	;'i'
   716  00FFB2  6E                 	db	110	;'n'
   717  00FFB3  67                 	db	103	;'g'
   718  00FFB4  20                 	db	32
   719  00FFB5  25                 	db	37
   720  00FFB6  75                 	db	117	;'u'
   721  00FFB7  20                 	db	32
   722  00FFB8  20                 	db	32
   723  00FFB9  20                 	db	32
   724  00FFBA  20                 	db	32
   725  00FFBB  20                 	db	32
   726  00FFBC  20                 	db	32
   727  00FFBD  00                 	db	0
   728  00FFBE                     STR_58:
   729                           
   730                           ; BSR set to: 0
   731  00FFBE  72                 	db	114	;'r'
   732  00FFBF  75                 	db	117	;'u'
   733  00FFC0  6E                 	db	110	;'n'
   734  00FFC1  73                 	db	115	;'s'
   735  00FFC2  20                 	db	32
   736  00FFC3  62                 	db	98	;'b'
   737  00FFC4  65                 	db	101	;'e'
   738  00FFC5  66                 	db	102	;'f'
   739  00FFC6  6F                 	db	111	;'o'
   740  00FFC7  72                 	db	114	;'r'
   741  00FFC8  65                 	db	101	;'e'
   742  00FFC9  20                 	db	32
   743  00FFCA  20                 	db	32
   744  00FFCB  20                 	db	32
   745  00FFCC  20                 	db	32
   746  00FFCD  20                 	db	32
   747  00FFCE  00                 	db	0
   748  00FFCF                     STR_41:
   749                           
   750                           ; BSR set to: 0
   751  00FFCF  25                 	db	37
   752  00FFD0  75                 	db	117	;'u'
   753  00FFD1  20                 	db	32
   754  00FFD2  20                 	db	32
   755  00FFD3  20                 	db	32
   756  00FFD4  20                 	db	32
   757  00FFD5  20                 	db	32
   758  00FFD6  20                 	db	32
   759  00FFD7  20                 	db	32
   760  00FFD8  20                 	db	32
   761  00FFD9  20                 	db	32
   762  00FFDA  20                 	db	32
   763  00FFDB  20                 	db	32
   764  00FFDC  20                 	db	32
   765  00FFDD  20                 	db	32
   766  00FFDE  00                 	db	0
   767  00FFDF                     STR_51:
   768                           
   769                           ; BSR set to: 0
   770  00FFDF  20                 	db	32
   771  00FFE0  25                 	db	37
   772  00FFE1  64                 	db	100	;'d'
   773  00FFE2  20                 	db	32
   774  00FFE3  00                 	db	0
   775  00FFE4                     STR_11:
   776                           
   777                           ; BSR set to: 0
   778  00FFE4  20                 	db	32
   779  00FFE5  41                 	db	65	;'A'
   780  00FFE6  41                 	db	65	;'A'
   781  00FFE7  3A                 	db	58	;':'
   782  00FFE8  00                 	db	0
   783  00FFE9                     STR_50:
   784                           
   785                           ; BSR set to: 0
   786  00FFE9  2D                 	db	45
   787  00FFEA  31                 	db	49	;'1'
   788  00FFEB  20                 	db	32
   789  00FFEC  00                 	db	0
   790  00FFED                     STR_7:
   791                           
   792                           ; BSR set to: 0
   793  00FFED  20                 	db	32
   794  00FFEE  43                 	db	67	;'C'
   795  00FFEF  3A                 	db	58	;':'
   796  00FFF0  00                 	db	0
   797  00FFF1                     STR_3:
   798                           
   799                           ; BSR set to: 0
   800  00FFF1  39                 	db	57	;'9'
   801  00FFF2  56                 	db	86	;'V'
   802  00FFF3  3A                 	db	58	;':'
   803  00FFF4  00                 	db	0
   804  00FFF5                     STR_4:
   805                           
   806                           ; BSR set to: 0
   807  00FFF5  20                 	db	32
   808  00FFF6  2B                 	db	43
   809  00FFF7  00                 	db	0
   810  00FFF8                     STR_5:
   811                           
   812                           ; BSR set to: 0
   813  00FFF8  20                 	db	32
   814  00FFF9  2D                 	db	45
   815  00FFFA  00                 	db	0
   816  00FFFB                     STR_6:
   817                           
   818                           ; BSR set to: 0
   819  00FFFB  20                 	db	32
   820  00FFFC  30                 	db	48	;'0'
   821  00FFFD  00                 	db	0
   822  0000                     
   823                           ; #config settings
   824  00FFFE  00                 	db	0	; dummy byte at the end
   825  0000                     
   826                           	psect	cinit
   827  00242A                     __pcinit:
   828                           	opt stack 0
   829  00242A                     start_initialization:
   830                           	opt stack 0
   831  00242A                     __initialization:
   832                           	opt stack 0
   833                           
   834                           ; Initialize objects allocated to BANK0 (18 bytes)
   835                           ; load TBLPTR registers with __pidataBANK0
   836  00242A  0EE2               	movlw	low __pidataBANK0
   837  00242C  6EF6               	movwf	tblptrl,c
   838  00242E  0E27               	movlw	high __pidataBANK0
   839  002430  6EF7               	movwf	tblptrh,c
   840  002432  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   841  002434  6EF8               	movwf	tblptru,c
   842  002436  EE00  F0C1         	lfsr	0,__pdataBANK0
   843  00243A  EE10 F012          	lfsr	1,18
   844  00243E                     copy_data0:
   845  00243E  0009               	tblrd		*+
   846  002440  CFF5 FFEE          	movff	tablat,postinc0
   847  002444  50E5               	movf	postdec1,w,c
   848  002446  50E1               	movf	fsr1l,w,c
   849  002448  E1FA               	bnz	copy_data0
   850                           
   851                           ; Clear objects allocated to BANK0 (23 bytes)
   852  00244A  EE00  F0AA         	lfsr	0,__pbssBANK0
   853  00244E  0E17               	movlw	23
   854  002450                     clear_0:
   855  002450  6AEE               	clrf	postinc0,c
   856  002452  06E8               	decf	wreg,f,c
   857  002454  E1FD               	bnz	clear_0
   858                           
   859                           ; Clear objects allocated to COMRAM (24 bytes)
   860  002456  EE00  F065         	lfsr	0,__pbssCOMRAM
   861  00245A  0E18               	movlw	24
   862  00245C                     clear_1:
   863  00245C  6AEE               	clrf	postinc0,c
   864  00245E  06E8               	decf	wreg,f,c
   865  002460  E1FD               	bnz	clear_1
   866  002462                     end_of_initialization:
   867                           	opt stack 0
   868  002462                     __end_of__initialization:
   869                           	opt stack 0
   870  002462  907D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   871  002464  927D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   872  002466  0E00               	movlw	low (__Lmediumconst shr (0+16))
   873  002468  6EF8               	movwf	tblptru,c
   874  00246A  0100               	movlb	0
   875  00246C  EFCA  F011         	goto	_main	;jump to C main() function
   876                           tblptru	equ	0xFF8
   877                           tblptrh	equ	0xFF7
   878                           tblptrl	equ	0xFF6
   879                           tablat	equ	0xFF5
   880                           postinc0	equ	0xFEE
   881                           wreg	equ	0xFE8
   882                           postdec1	equ	0xFE5
   883                           fsr1l	equ	0xFE1
   884                           
   885                           	psect	bssCOMRAM
   886  000065                     __pbssCOMRAM:
   887                           	opt stack 0
   888  000065                     simulate@F3110:
   889                           	opt stack 0
   890  000065                     	ds	4
   891  000069                     mainloop@F3098:
   892                           	opt stack 0
   893  000069                     	ds	4
   894  00006D                     mainloop@F3096:
   895                           	opt stack 0
   896  00006D                     	ds	4
   897  000071                     _shake:
   898                           	opt stack 0
   899  000071                     	ds	3
   900  000074                     _mode:
   901                           	opt stack 0
   902  000074                     	ds	2
   903  000076                     _time:
   904                           	opt stack 0
   905  000076                     	ds	7
   906                           tblptru	equ	0xFF8
   907                           tblptrh	equ	0xFF7
   908                           tblptrl	equ	0xFF6
   909                           tablat	equ	0xFF5
   910                           postinc0	equ	0xFEE
   911                           wreg	equ	0xFE8
   912                           postdec1	equ	0xFE5
   913                           fsr1l	equ	0xFE1
   914                           
   915                           	psect	bssBANK0
   916  0000AA                     __pbssBANK0:
   917                           	opt stack 0
   918  0000AA                     intrpt@F3131:
   919                           	opt stack 0
   920  0000AA                     	ds	6
   921  0000B0                     PermLog@F3082:
   922                           	opt stack 0
   923  0000B0                     	ds	4
   924  0000B4                     simulate@F3114:
   925                           	opt stack 0
   926  0000B4                     	ds	4
   927  0000B8                     simulate@F3112:
   928                           	opt stack 0
   929  0000B8                     	ds	4
   930  0000BC                     mainloop@F3100:
   931                           	opt stack 0
   932  0000BC                     	ds	4
   933  0000C0                     _Latest:
   934                           	opt stack 0
   935  0000C0                     	ds	1
   936                           tblptru	equ	0xFF8
   937                           tblptrh	equ	0xFF7
   938                           tblptrl	equ	0xFF6
   939                           tablat	equ	0xFF5
   940                           postinc0	equ	0xFEE
   941                           wreg	equ	0xFE8
   942                           postdec1	equ	0xFE5
   943                           fsr1l	equ	0xFE1
   944                           
   945                           	psect	dataBANK0
   946  0000C1                     __pdataBANK0:
   947                           	opt stack 0
   948  0000C1                     AASpin@F3067:
   949                           	opt stack 0
   950  0000C1                     	ds	6
   951  0000C7                     CSpin@F3063:
   952                           	opt stack 0
   953  0000C7                     	ds	6
   954  0000CD                     V9Spin@F3059:
   955                           	opt stack 0
   956  0000CD                     	ds	6
   957                           tblptru	equ	0xFF8
   958                           tblptrh	equ	0xFF7
   959                           tblptrl	equ	0xFF6
   960                           tablat	equ	0xFF5
   961                           postinc0	equ	0xFEE
   962                           wreg	equ	0xFE8
   963                           postdec1	equ	0xFE5
   964                           fsr1l	equ	0xFE1
   965                           
   966                           	psect	cstackBANK0
   967  000080                     __pcstackBANK0:
   968                           	opt stack 0
   969  000080                     ??_isdigit:
   970  000080                     ??_I2C_Master_Wait:
   971  000080                     ?___wmul:
   972                           	opt stack 0
   973  000080                     ?___lwdiv:
   974                           	opt stack 0
   975  000080                     ?___lldiv:
   976                           	opt stack 0
   977  000080                     lcdNibble@temp:
   978                           	opt stack 0
   979  000080                     ReadEE@address:
   980                           	opt stack 0
   981  000080                     ___wmul@multiplier:
   982                           	opt stack 0
   983  000080                     ___lwdiv@dividend:
   984                           	opt stack 0
   985  000080                     ___lldiv@dividend:
   986                           	opt stack 0
   987                           
   988                           ; 4 bytes @ 0x0
   989  000080                     	ds	1
   990  000081                     lcdNibble@data:
   991                           	opt stack 0
   992  000081                     I2C_Master_Read@a:
   993                           	opt stack 0
   994  000081                     _isdigit$1098:
   995                           	opt stack 0
   996  000081                     I2C_Master_Write@d:
   997                           	opt stack 0
   998                           
   999                           ; 2 bytes @ 0x1
  1000  000081                     	ds	1
  1001  000082                     lcdInst@data:
  1002                           	opt stack 0
  1003  000082                     putch@data:
  1004                           	opt stack 0
  1005  000082                     I2C_Master_Read@temp:
  1006                           	opt stack 0
  1007  000082                     isdigit@c:
  1008                           	opt stack 0
  1009  000082                     ___wmul@multiplicand:
  1010                           	opt stack 0
  1011  000082                     ___lwdiv@divisor:
  1012                           	opt stack 0
  1013                           
  1014                           ; 2 bytes @ 0x2
  1015  000082                     	ds	1
  1016  000083                     ??_initLCD:
  1017  000083                     getTime@time:
  1018                           	opt stack 0
  1019                           
  1020                           ; 2 bytes @ 0x3
  1021  000083                     	ds	1
  1022  000084                     ___wmul@product:
  1023                           	opt stack 0
  1024  000084                     ___lwdiv@quotient:
  1025                           	opt stack 0
  1026  000084                     ___lldiv@divisor:
  1027                           	opt stack 0
  1028                           
  1029                           ; 4 bytes @ 0x4
  1030  000084                     	ds	1
  1031  000085                     getTime@i:
  1032                           	opt stack 0
  1033                           
  1034                           ; 1 bytes @ 0x5
  1035  000085                     	ds	1
  1036  000086                     ___lwdiv@counter:
  1037                           	opt stack 0
  1038                           
  1039                           ; 1 bytes @ 0x6
  1040  000086                     	ds	1
  1041  000087                     ?___lwmod:
  1042                           	opt stack 0
  1043  000087                     ___lwmod@dividend:
  1044                           	opt stack 0
  1045                           
  1046                           ; 2 bytes @ 0x7
  1047  000087                     	ds	1
  1048  000088                     ___lldiv@quotient:
  1049                           	opt stack 0
  1050                           
  1051                           ; 4 bytes @ 0x8
  1052  000088                     	ds	1
  1053  000089                     ___lwmod@divisor:
  1054                           	opt stack 0
  1055                           
  1056                           ; 2 bytes @ 0x9
  1057  000089                     	ds	2
  1058  00008B                     ___lwmod@counter:
  1059                           	opt stack 0
  1060                           
  1061                           ; 1 bytes @ 0xB
  1062  00008B                     	ds	1
  1063  00008C                     ?_printf:
  1064                           	opt stack 0
  1065  00008C                     ___lldiv@counter:
  1066                           	opt stack 0
  1067  00008C                     printf@f:
  1068                           	opt stack 0
  1069                           
  1070                           ; 2 bytes @ 0xC
  1071  00008C                     	ds	1
  1072  00008D                     I2C_Master_Init@c:
  1073                           	opt stack 0
  1074                           
  1075                           ; 4 bytes @ 0xD
  1076  00008D                     	ds	4
  1077  000091                     ??_I2C_Master_Init:
  1078                           
  1079                           ; 1 bytes @ 0x11
  1080  000091                     	ds	3
  1081  000094                     ??_printf:
  1082                           
  1083                           ; 1 bytes @ 0x14
  1084  000094                     	ds	1
  1085  000095                     
  1086                           ; 1 bytes @ 0x15
  1087  000095                     	ds	3
  1088  000098                     printf@cp:
  1089                           	opt stack 0
  1090                           
  1091                           ; 2 bytes @ 0x18
  1092  000098                     	ds	2
  1093  00009A                     printf@idx:
  1094                           	opt stack 0
  1095                           
  1096                           ; 1 bytes @ 0x1A
  1097  00009A                     	ds	1
  1098  00009B                     printf@ap:
  1099                           	opt stack 0
  1100                           
  1101                           ; 2 bytes @ 0x1B
  1102  00009B                     	ds	2
  1103  00009D                     printf@len:
  1104                           	opt stack 0
  1105                           
  1106                           ; 2 bytes @ 0x1D
  1107  00009D                     	ds	2
  1108  00009F                     printf@prec:
  1109                           	opt stack 0
  1110                           
  1111                           ; 1 bytes @ 0x1F
  1112  00009F                     	ds	1
  1113  0000A0                     printf@val:
  1114                           	opt stack 0
  1115                           
  1116                           ; 2 bytes @ 0x20
  1117  0000A0                     	ds	2
  1118  0000A2                     printf@flag:
  1119                           	opt stack 0
  1120                           
  1121                           ; 1 bytes @ 0x22
  1122  0000A2                     	ds	1
  1123  0000A3                     printf@width:
  1124                           	opt stack 0
  1125                           
  1126                           ; 2 bytes @ 0x23
  1127  0000A3                     	ds	2
  1128  0000A5                     printf@c:
  1129                           	opt stack 0
  1130                           
  1131                           ; 1 bytes @ 0x25
  1132  0000A5                     	ds	1
  1133  0000A6                     ??_showRTC:
  1134                           
  1135                           ; 1 bytes @ 0x26
  1136  0000A6                     	ds	2
  1137  0000A8                     ??_main:
  1138                           
  1139                           ; 1 bytes @ 0x28
  1140  0000A8                     	ds	2
  1141                           tblptru	equ	0xFF8
  1142                           tblptrh	equ	0xFF7
  1143                           tblptrl	equ	0xFF6
  1144                           tablat	equ	0xFF5
  1145                           postinc0	equ	0xFEE
  1146                           wreg	equ	0xFE8
  1147                           postdec1	equ	0xFE5
  1148                           fsr1l	equ	0xFE1
  1149                           
  1150                           	psect	cstackCOMRAM
  1151  000001                     __pcstackCOMRAM:
  1152                           	opt stack 0
  1153  000001                     ??_openGate:
  1154  000001                     ??_closeGate:
  1155  000001                     ??i2_I2C_Master_Wait:
  1156  000001                     ??i2_isdigit:
  1157  000001                     ?_captureKeypad:
  1158                           	opt stack 0
  1159  000001                     ?_AD:
  1160                           	opt stack 0
  1161  000001                     ?___awdiv:
  1162                           	opt stack 0
  1163  000001                     ?i2___wmul:
  1164                           	opt stack 0
  1165  000001                     ?i2___lwdiv:
  1166                           	opt stack 0
  1167  000001                     ?___ftpack:
  1168                           	opt stack 0
  1169  000001                     back@runs:
  1170                           	opt stack 0
  1171  000001                     i2lcdNibble@temp:
  1172                           	opt stack 0
  1173  000001                     WriteEE@address:
  1174                           	opt stack 0
  1175  000001                     ___awdiv@dividend:
  1176                           	opt stack 0
  1177  000001                     i2ReadEE@address:
  1178                           	opt stack 0
  1179  000001                     i2___wmul@multiplier:
  1180                           	opt stack 0
  1181  000001                     i2___lwdiv@dividend:
  1182                           	opt stack 0
  1183  000001                     ___ftpack@arg:
  1184                           	opt stack 0
  1185                           
  1186                           ; 3 bytes @ 0x0
  1187  000001                     	ds	1
  1188  000002                     back@result:
  1189                           	opt stack 0
  1190  000002                     i2lcdNibble@data:
  1191                           	opt stack 0
  1192  000002                     i2I2C_Master_Read@a:
  1193                           	opt stack 0
  1194  000002                     i2_isdigit$1098:
  1195                           	opt stack 0
  1196  000002                     i2I2C_Master_Write@d:
  1197                           	opt stack 0
  1198                           
  1199                           ; 2 bytes @ 0x1
  1200  000002                     	ds	1
  1201  000003                     ??_AD:
  1202  000003                     captureKeypad@keypress:
  1203                           	opt stack 0
  1204  000003                     WriteEE@data:
  1205                           	opt stack 0
  1206  000003                     i2lcdInst@data:
  1207                           	opt stack 0
  1208  000003                     i2putch@data:
  1209                           	opt stack 0
  1210  000003                     i2I2C_Master_Read@temp:
  1211                           	opt stack 0
  1212  000003                     i2isdigit@c:
  1213                           	opt stack 0
  1214  000003                     ReadRun@sorted:
  1215                           	opt stack 0
  1216  000003                     ___awdiv@divisor:
  1217                           	opt stack 0
  1218  000003                     i2___wmul@multiplicand:
  1219                           	opt stack 0
  1220  000003                     i2___lwdiv@divisor:
  1221                           	opt stack 0
  1222                           
  1223                           ; 2 bytes @ 0x2
  1224  000003                     	ds	1
  1225  000004                     ___ftpack@exp:
  1226                           	opt stack 0
  1227  000004                     i2getTime@time:
  1228                           	opt stack 0
  1229                           
  1230                           ; 2 bytes @ 0x3
  1231  000004                     	ds	1
  1232  000005                     AD@channel:
  1233                           	opt stack 0
  1234  000005                     ___awdiv@counter:
  1235                           	opt stack 0
  1236  000005                     ___ftpack@sign:
  1237                           	opt stack 0
  1238  000005                     ReadRun@time:
  1239                           	opt stack 0
  1240  000005                     i2___wmul@product:
  1241                           	opt stack 0
  1242  000005                     i2___lwdiv@quotient:
  1243                           	opt stack 0
  1244                           
  1245                           ; 2 bytes @ 0x4
  1246  000005                     	ds	1
  1247  000006                     ??___ftpack:
  1248  000006                     ___awdiv@sign:
  1249                           	opt stack 0
  1250  000006                     i2getTime@i:
  1251                           	opt stack 0
  1252                           
  1253                           ; 1 bytes @ 0x5
  1254  000006                     	ds	1
  1255  000007                     ??_ReadRun:
  1256  000007                     ?_HexDecToDec2:
  1257                           	opt stack 0
  1258  000007                     i2___lwdiv@counter:
  1259                           	opt stack 0
  1260  000007                     HexDecToDec2@hex:
  1261                           	opt stack 0
  1262  000007                     WriteRun@sorted:
  1263                           	opt stack 0
  1264  000007                     ___awdiv@quotient:
  1265                           	opt stack 0
  1266                           
  1267                           ; 2 bytes @ 0x6
  1268  000007                     	ds	1
  1269  000008                     ?i2___lwmod:
  1270                           	opt stack 0
  1271  000008                     i2___lwmod@dividend:
  1272                           	opt stack 0
  1273                           
  1274                           ; 2 bytes @ 0x7
  1275  000008                     	ds	1
  1276  000009                     ??_HexDecToDec2:
  1277  000009                     ?___awtoft:
  1278                           	opt stack 0
  1279  000009                     PWMC@widthus:
  1280                           	opt stack 0
  1281  000009                     WriteRun@time:
  1282                           	opt stack 0
  1283  000009                     ___awtoft@c:
  1284                           	opt stack 0
  1285                           
  1286                           ; 2 bytes @ 0x8
  1287  000009                     	ds	1
  1288  00000A                     i2___lwmod@divisor:
  1289                           	opt stack 0
  1290                           
  1291                           ; 2 bytes @ 0x9
  1292  00000A                     	ds	1
  1293  00000B                     ??_WriteRun:
  1294  00000B                     ReadRun@backruns:
  1295                           	opt stack 0
  1296  00000B                     PWMC@cycles:
  1297                           	opt stack 0
  1298                           
  1299                           ; 2 bytes @ 0xA
  1300  00000B                     	ds	1
  1301  00000C                     ___awtoft@sign:
  1302                           	opt stack 0
  1303  00000C                     i2___lwmod@counter:
  1304                           	opt stack 0
  1305  00000C                     HexDecToDec2@tenth:
  1306                           	opt stack 0
  1307  00000C                     ReadRun@add:
  1308                           	opt stack 0
  1309                           
  1310                           ; 2 bytes @ 0xB
  1311  00000C                     	ds	1
  1312  00000D                     ?i2_printf:
  1313                           	opt stack 0
  1314  00000D                     ?___ftmul:
  1315                           	opt stack 0
  1316  00000D                     PWMC@port:
  1317                           	opt stack 0
  1318  00000D                     WriteRun@add:
  1319                           	opt stack 0
  1320  00000D                     i2printf@f:
  1321                           	opt stack 0
  1322  00000D                     ___ftmul@f1:
  1323                           	opt stack 0
  1324                           
  1325                           ; 3 bytes @ 0xC
  1326  00000D                     	ds	1
  1327  00000E                     HexDecToDec2@digit:
  1328                           	opt stack 0
  1329                           
  1330                           ; 2 bytes @ 0xD
  1331  00000E                     	ds	1
  1332  00000F                     ??_PWMC:
  1333                           
  1334                           ; 1 bytes @ 0xE
  1335  00000F                     	ds	1
  1336  000010                     ___ftmul@f2:
  1337                           	opt stack 0
  1338                           
  1339                           ; 3 bytes @ 0xF
  1340  000010                     	ds	1
  1341  000011                     ??i2_printf:
  1342  000011                     _PWMC$1440:
  1343                           	opt stack 0
  1344                           
  1345                           ; 1 bytes @ 0x10
  1346  000011                     	ds	1
  1347  000012                     _PWMC$1441:
  1348                           	opt stack 0
  1349                           
  1350                           ; 1 bytes @ 0x11
  1351  000012                     	ds	1
  1352  000013                     ??___ftmul:
  1353  000013                     _PWMC$1442:
  1354                           	opt stack 0
  1355                           
  1356                           ; 1 bytes @ 0x12
  1357  000013                     	ds	1
  1358  000014                     PWMC@countdown:
  1359                           	opt stack 0
  1360                           
  1361                           ; 2 bytes @ 0x13
  1362  000014                     	ds	1
  1363  000015                     i2printf@cp:
  1364                           	opt stack 0
  1365                           
  1366                           ; 2 bytes @ 0x14
  1367  000015                     	ds	1
  1368  000016                     ??_V9Spin:
  1369  000016                     ??_CSpin:
  1370  000016                     ??_AASpin:
  1371  000016                     ___ftmul@exp:
  1372                           	opt stack 0
  1373                           
  1374                           ; 1 bytes @ 0x15
  1375  000016                     	ds	1
  1376  000017                     V9Spin@mode:
  1377                           	opt stack 0
  1378  000017                     CSpin@mode:
  1379                           	opt stack 0
  1380  000017                     AASpin@mode:
  1381                           	opt stack 0
  1382  000017                     i2printf@idx:
  1383                           	opt stack 0
  1384  000017                     ___ftmul@f3_as_product:
  1385                           	opt stack 0
  1386                           
  1387                           ; 3 bytes @ 0x16
  1388  000017                     	ds	1
  1389  000018                     i2printf@ap:
  1390                           	opt stack 0
  1391  000018                     V9Spin@port:
  1392                           	opt stack 0
  1393  000018                     CSpin@port:
  1394                           	opt stack 0
  1395  000018                     AASpin@port:
  1396                           	opt stack 0
  1397                           
  1398                           ; 6 bytes @ 0x17
  1399  000018                     	ds	2
  1400  00001A                     ___ftmul@cntr:
  1401                           	opt stack 0
  1402  00001A                     i2printf@len:
  1403                           	opt stack 0
  1404                           
  1405                           ; 2 bytes @ 0x19
  1406  00001A                     	ds	1
  1407  00001B                     ___ftmul@sign:
  1408                           	opt stack 0
  1409                           
  1410                           ; 1 bytes @ 0x1A
  1411  00001B                     	ds	1
  1412  00001C                     i2printf@prec:
  1413                           	opt stack 0
  1414  00001C                     ___ftge@ff1:
  1415                           	opt stack 0
  1416                           
  1417                           ; 3 bytes @ 0x1B
  1418  00001C                     	ds	1
  1419  00001D                     i2printf@val:
  1420                           	opt stack 0
  1421                           
  1422                           ; 2 bytes @ 0x1C
  1423  00001D                     	ds	1
  1424  00001E                     ??_testServo:
  1425                           
  1426                           ; 1 bytes @ 0x1D
  1427  00001E                     	ds	1
  1428  00001F                     i2printf@flag:
  1429                           	opt stack 0
  1430  00001F                     ___ftge@ff2:
  1431                           	opt stack 0
  1432                           
  1433                           ; 3 bytes @ 0x1E
  1434  00001F                     	ds	1
  1435  000020                     i2printf@width:
  1436                           	opt stack 0
  1437                           
  1438                           ; 2 bytes @ 0x1F
  1439  000020                     	ds	2
  1440  000022                     ??___ftge:
  1441  000022                     i2printf@c:
  1442                           	opt stack 0
  1443                           
  1444                           ; 1 bytes @ 0x21
  1445  000022                     	ds	1
  1446  000023                     showInfo@time:
  1447                           	opt stack 0
  1448  000023                     _stopMoving$595:
  1449                           	opt stack 0
  1450  000023                     printV@charged:
  1451                           	opt stack 0
  1452                           
  1453                           ; 2 bytes @ 0x22
  1454  000023                     	ds	2
  1455  000025                     ?_checkV:
  1456                           	opt stack 0
  1457  000025                     stopMoving@em:
  1458                           	opt stack 0
  1459  000025                     showInfo@sorted:
  1460                           	opt stack 0
  1461  000025                     checkV@threshhold:
  1462                           	opt stack 0
  1463                           
  1464                           ; 2 bytes @ 0x24
  1465  000025                     	ds	2
  1466  000027                     ??_showInfo:
  1467  000027                     ??_checkV:
  1468                           
  1469                           ; 1 bytes @ 0x26
  1470  000027                     	ds	2
  1471  000029                     checkV@tmp:
  1472                           	opt stack 0
  1473                           
  1474                           ; 2 bytes @ 0x28
  1475  000029                     	ds	2
  1476  00002B                     checkV@channel:
  1477                           	opt stack 0
  1478                           
  1479                           ; 1 bytes @ 0x2A
  1480  00002B                     	ds	1
  1481  00002C                     showInfo@type:
  1482                           	opt stack 0
  1483  00002C                     checkV@voltage:
  1484                           	opt stack 0
  1485                           
  1486                           ; 2 bytes @ 0x2B
  1487  00002C                     	ds	2
  1488  00002E                     ?_check9:
  1489                           	opt stack 0
  1490  00002E                     ?_checkC:
  1491                           	opt stack 0
  1492  00002E                     ?_checkAA:
  1493                           	opt stack 0
  1494  00002E                     showInfo@stop:
  1495                           	opt stack 0
  1496  00002E                     checkAA@sorted:
  1497                           	opt stack 0
  1498  00002E                     checkC@sorted:
  1499                           	opt stack 0
  1500  00002E                     check9@sorted:
  1501                           	opt stack 0
  1502                           
  1503                           ; 2 bytes @ 0x2D
  1504  00002E                     	ds	2
  1505  000030                     ??_check9:
  1506  000030                     ??_checkC:
  1507  000030                     ??_checkAA:
  1508  000030                     ??_PermLog:
  1509                           
  1510                           ; 1 bytes @ 0x2F
  1511  000030                     	ds	2
  1512  000032                     checkAA@V:
  1513                           	opt stack 0
  1514  000032                     checkC@V:
  1515                           	opt stack 0
  1516  000032                     check9@V:
  1517                           	opt stack 0
  1518  000032                     PermLog@sorted:
  1519                           	opt stack 0
  1520                           
  1521                           ; 4 bytes @ 0x31
  1522  000032                     	ds	2
  1523  000034                     ??_mainloop:
  1524  000034                     ??_simulate:
  1525                           
  1526                           ; 1 bytes @ 0x33
  1527  000034                     	ds	2
  1528  000036                     mainloop@shakeCW:
  1529                           	opt stack 0
  1530  000036                     simulate@shakeCW:
  1531                           	opt stack 0
  1532  000036                     PermLog@goback:
  1533                           	opt stack 0
  1534                           
  1535                           ; 1 bytes @ 0x35
  1536  000036                     	ds	1
  1537  000037                     PermLog@time:
  1538                           	opt stack 0
  1539  000037                     _mainloop$1539:
  1540                           	opt stack 0
  1541  000037                     _simulate$1540:
  1542                           	opt stack 0
  1543                           
  1544                           ; 2 bytes @ 0x36
  1545  000037                     	ds	2
  1546  000039                     PermLog@backruns:
  1547                           	opt stack 0
  1548  000039                     mainloop@now:
  1549                           	opt stack 0
  1550  000039                     simulate@now:
  1551                           	opt stack 0
  1552                           
  1553                           ; 4 bytes @ 0x38
  1554  000039                     	ds	4
  1555  00003D                     mainloop@start:
  1556                           	opt stack 0
  1557  00003D                     simulate@start:
  1558                           	opt stack 0
  1559                           
  1560                           ; 4 bytes @ 0x3C
  1561  00003D                     	ds	4
  1562  000041                     mainloop@notyet:
  1563                           	opt stack 0
  1564  000041                     simulate@notyet:
  1565                           	opt stack 0
  1566                           
  1567                           ; 1 bytes @ 0x40
  1568  000041                     	ds	1
  1569  000042                     mainloop@period:
  1570                           	opt stack 0
  1571  000042                     simulate@period:
  1572                           	opt stack 0
  1573                           
  1574                           ; 2 bytes @ 0x41
  1575  000042                     	ds	2
  1576  000044                     mainloop@sorted:
  1577                           	opt stack 0
  1578  000044                     simulate@sorted:
  1579                           	opt stack 0
  1580                           
  1581                           ; 4 bytes @ 0x43
  1582  000044                     	ds	4
  1583  000048                     mainloop@C:
  1584                           	opt stack 0
  1585  000048                     simulate@C:
  1586                           	opt stack 0
  1587                           
  1588                           ; 2 bytes @ 0x47
  1589  000048                     	ds	2
  1590  00004A                     mainloop@V9:
  1591                           	opt stack 0
  1592  00004A                     simulate@V9:
  1593                           	opt stack 0
  1594                           
  1595                           ; 2 bytes @ 0x49
  1596  00004A                     	ds	2
  1597  00004C                     mainloop@AA:
  1598                           	opt stack 0
  1599  00004C                     simulate@AA:
  1600                           	opt stack 0
  1601                           
  1602                           ; 2 bytes @ 0x4B
  1603  00004C                     	ds	2
  1604  00004E                     ??_intrpt:
  1605                           
  1606                           ; 1 bytes @ 0x4D
  1607  00004E                     	ds	16
  1608  00005E                     intrpt@keypress:
  1609                           	opt stack 0
  1610                           
  1611                           ; 1 bytes @ 0x5D
  1612  00005E                     	ds	1
  1613  00005F                     intrpt@port:
  1614                           	opt stack 0
  1615                           
  1616                           ; 6 bytes @ 0x5E
  1617  00005F                     	ds	6
  1618                           tblptru	equ	0xFF8
  1619                           tblptrh	equ	0xFF7
  1620                           tblptrl	equ	0xFF6
  1621                           tablat	equ	0xFF5
  1622                           postinc0	equ	0xFEE
  1623                           wreg	equ	0xFE8
  1624                           postdec1	equ	0xFE5
  1625                           fsr1l	equ	0xFE1
  1626                           
  1627 ;;
  1628 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1629 ;;
  1630 ;; *************** function _main *****************
  1631 ;; Defined at:
  1632 ;;		line 366 in file "main.c"
  1633 ;; Parameters:    Size  Location     Type
  1634 ;;		None
  1635 ;; Auto vars:     Size  Location     Type
  1636 ;;		None
  1637 ;; Return value:  Size  Location     Type
  1638 ;;                  2  204[None  ] int 
  1639 ;; Registers used:
  1640 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1641 ;; Tracked objects:
  1642 ;;		On entry : 0/0
  1643 ;;		On exit  : 0/0
  1644 ;;		Unchanged: 0/0
  1645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1648 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1649 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1650 ;;Total ram usage:        2 bytes
  1651 ;; Hardware stack levels required when called:   11
  1652 ;; This function calls:
  1653 ;;		_initialize
  1654 ;;		_lcdInst
  1655 ;;		_printf
  1656 ;;		_showRTC
  1657 ;; This function is called by:
  1658 ;;		Startup code after reset
  1659 ;; This function uses a non-reentrant model
  1660 ;;
  1661                           
  1662                           	psect	text0
  1663  002394                     __ptext0:
  1664                           	opt stack 0
  1665  002394                     _main:
  1666                           	opt stack 20
  1667                           
  1668                           ;main.c: 367: initialize();
  1669                           
  1670                           ; BSR set to: 0
  1671                           ;incstack = 0
  1672  002394  EC48  F011         	call	_initialize	;wreg free
  1673                           
  1674                           ;main.c: 369: lcdInst(0b10000000);
  1675  002398  0E80               	movlw	128
  1676  00239A  EC0B  F014         	call	_lcdInst
  1677                           
  1678                           ;main.c: 370: printf("Welcome!          ");
  1679  00239E  0E65               	movlw	low STR_33
  1680  0023A0  0100               	movlb	0	; () banked
  1681  0023A2  6F8C               	movwf	printf@f& (0+255),b
  1682  0023A4  0EFF               	movlw	high STR_33
  1683  0023A6  0100               	movlb	0	; () banked
  1684  0023A8  6F8D               	movwf	(printf@f+1)& (0+255),b
  1685  0023AA  EC09  F000         	call	_printf	;wreg free
  1686                           
  1687                           ;main.c: 372: _delay((unsigned long)((500)*(8000000/4000.0)));
  1688  0023AE  0E06               	movlw	6
  1689  0023B0  0100               	movlb	0	; () banked
  1690  0023B2  6FA9               	movwf	(??_main+1)& (0+255),b
  1691  0023B4  0E13               	movlw	19
  1692  0023B6  0100               	movlb	0	; () banked
  1693  0023B8  6FA8               	movwf	??_main& (0+255),b
  1694  0023BA  0EAD               	movlw	173
  1695  0023BC                     u3717:
  1696  0023BC  2EE8               	decfsz	wreg,f,c
  1697  0023BE  D7FE               	bra	u3717
  1698  0023C0  2FA8               	decfsz	??_main& (0+255),f,b
  1699  0023C2  D7FC               	bra	u3717
  1700  0023C4  2FA9               	decfsz	(??_main+1)& (0+255),f,b
  1701  0023C6  D7FA               	bra	u3717
  1702  0023C8  D000               	nop2	
  1703                           
  1704                           ;main.c: 375: INT1IE = 1;
  1705  0023CA  86F0               	bsf	intcon3,3,c	;volatile
  1706                           
  1707                           ;main.c: 376: INT1IF = 0;
  1708  0023CC  90F0               	bcf	intcon3,0,c	;volatile
  1709                           
  1710                           ;main.c: 377: INT2IE = 0;
  1711  0023CE  98F0               	bcf	intcon3,4,c	;volatile
  1712                           
  1713                           ;main.c: 378: (INTCONbits.GIE = 1);
  1714  0023D0  8EF2               	bsf	intcon,7,c	;volatile
  1715                           
  1716                           ;main.c: 379: mode = 0;
  1717  0023D2  0E00               	movlw	0
  1718  0023D4  6E75               	movwf	_mode+1,c
  1719  0023D6  0E00               	movlw	0
  1720  0023D8  6E74               	movwf	_mode,c
  1721  0023DA                     l4709:
  1722  0023DA  ECC1  F00E         	call	_showRTC	;wreg free
  1723  0023DE  D7FD               	goto	l4709
  1724  0023E0  00FF               	reset		;# 
  1725  0023E2                     __end_of_main:
  1726                           	opt stack 0
  1727                           tblptru	equ	0xFF8
  1728                           tblptrh	equ	0xFF7
  1729                           tblptrl	equ	0xFF6
  1730                           tablat	equ	0xFF5
  1731                           intcon	equ	0xFF2
  1732                           intcon3	equ	0xFF0
  1733                           postinc0	equ	0xFEE
  1734                           wreg	equ	0xFE8
  1735                           postdec1	equ	0xFE5
  1736                           fsr1l	equ	0xFE1
  1737                           
  1738 ;; *************** function _showRTC *****************
  1739 ;; Defined at:
  1740 ;;		line 254 in file "main.c"
  1741 ;; Parameters:    Size  Location     Type
  1742 ;;		None
  1743 ;; Auto vars:     Size  Location     Type
  1744 ;;		None
  1745 ;; Return value:  Size  Location     Type
  1746 ;;                  1    wreg      void 
  1747 ;; Registers used:
  1748 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1749 ;; Tracked objects:
  1750 ;;		On entry : 0/0
  1751 ;;		On exit  : 0/0
  1752 ;;		Unchanged: 0/0
  1753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1756 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1757 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1758 ;;Total ram usage:        2 bytes
  1759 ;; Hardware stack levels used:    1
  1760 ;; Hardware stack levels required when called:   10
  1761 ;; This function calls:
  1762 ;;		_getTime
  1763 ;;		_lcdInst
  1764 ;;		_printf
  1765 ;; This function is called by:
  1766 ;;		_main
  1767 ;; This function uses a non-reentrant model
  1768 ;;
  1769                           
  1770                           	psect	text1
  1771  001D82                     __ptext1:
  1772                           	opt stack 0
  1773  001D82                     _showRTC:
  1774                           	opt stack 20
  1775                           
  1776                           ;main.c: 256: getTime(time);
  1777                           
  1778                           ;incstack = 0
  1779  001D82  0E76               	movlw	low _time
  1780  001D84  0100               	movlb	0	; () banked
  1781  001D86  6F83               	movwf	getTime@time& (0+255),b
  1782  001D88  0E00               	movlw	high _time
  1783  001D8A  0100               	movlb	0	; () banked
  1784  001D8C  6F84               	movwf	(getTime@time+1)& (0+255),b
  1785  001D8E  EC06  F00F         	call	_getTime	;wreg free
  1786                           
  1787                           ;main.c: 257: lcdInst(0b10000000);
  1788  001D92  0E80               	movlw	128
  1789  001D94  EC0B  F014         	call	_lcdInst
  1790                           
  1791                           ;main.c: 258: printf("    %02x/%02x/%02x      ", time[6], time[5], time[4]);
  1792  001D98  0E14               	movlw	low STR_31
  1793  001D9A  0100               	movlb	0	; () banked
  1794  001D9C  6F8C               	movwf	printf@f& (0+255),b
  1795  001D9E  0EFE               	movlw	high STR_31
  1796  001DA0  0100               	movlb	0	; () banked
  1797  001DA2  6F8D               	movwf	(printf@f+1)& (0+255),b
  1798  001DA4  C07C  F08E         	movff	_time+6,?_printf+2
  1799  001DA8  0100               	movlb	0	; () banked
  1800  001DAA  6B8F               	clrf	(?_printf+3)& (0+255),b
  1801  001DAC  C07B  F090         	movff	_time+5,?_printf+4
  1802  001DB0  0100               	movlb	0	; () banked
  1803  001DB2  6B91               	clrf	(?_printf+5)& (0+255),b
  1804  001DB4  C07A  F092         	movff	_time+4,?_printf+6
  1805  001DB8  0100               	movlb	0	; () banked
  1806  001DBA  6B93               	clrf	(?_printf+7)& (0+255),b
  1807  001DBC  EC09  F000         	call	_printf	;wreg free
  1808                           
  1809                           ;main.c: 259: lcdInst(0b11000000);
  1810  001DC0  0EC0               	movlw	192
  1811  001DC2  EC0B  F014         	call	_lcdInst
  1812                           
  1813                           ;main.c: 260: printf("    %02x:%02x:%02x      ", time[2], time[1], time[0]);
  1814  001DC6  0E2D               	movlw	low STR_32
  1815  001DC8  0100               	movlb	0	; () banked
  1816  001DCA  6F8C               	movwf	printf@f& (0+255),b
  1817  001DCC  0EFE               	movlw	high STR_32
  1818  001DCE  0100               	movlb	0	; () banked
  1819  001DD0  6F8D               	movwf	(printf@f+1)& (0+255),b
  1820  001DD2  C078  F08E         	movff	_time+2,?_printf+2
  1821  001DD6  0100               	movlb	0	; () banked
  1822  001DD8  6B8F               	clrf	(?_printf+3)& (0+255),b
  1823  001DDA  C077  F090         	movff	_time+1,?_printf+4
  1824  001DDE  0100               	movlb	0	; () banked
  1825  001DE0  6B91               	clrf	(?_printf+5)& (0+255),b
  1826  001DE2  C076  F092         	movff	_time,?_printf+6
  1827  001DE6  0100               	movlb	0	; () banked
  1828  001DE8  6B93               	clrf	(?_printf+7)& (0+255),b
  1829  001DEA  EC09  F000         	call	_printf	;wreg free
  1830                           
  1831                           ;main.c: 261: _delay((unsigned long)((250)*(8000000/4000.0)));
  1832  001DEE  0E03               	movlw	3
  1833  001DF0  0100               	movlb	0	; () banked
  1834  001DF2  6FA7               	movwf	(??_showRTC+1)& (0+255),b
  1835  001DF4  0E8A               	movlw	138
  1836  001DF6  0100               	movlb	0	; () banked
  1837  001DF8  6FA6               	movwf	??_showRTC& (0+255),b
  1838  001DFA  0E55               	movlw	85
  1839  001DFC                     u3727:
  1840  001DFC  2EE8               	decfsz	wreg,f,c
  1841  001DFE  D7FE               	bra	u3727
  1842  001E00  2FA6               	decfsz	??_showRTC& (0+255),f,b
  1843  001E02  D7FC               	bra	u3727
  1844  001E04  2FA7               	decfsz	(??_showRTC+1)& (0+255),f,b
  1845  001E06  D7FA               	bra	u3727
  1846  001E08  D000               	nop2	
  1847  001E0A  0012               	return		;funcret
  1848  001E0C                     __end_of_showRTC:
  1849                           	opt stack 0
  1850                           tblptru	equ	0xFF8
  1851                           tblptrh	equ	0xFF7
  1852                           tblptrl	equ	0xFF6
  1853                           tablat	equ	0xFF5
  1854                           intcon	equ	0xFF2
  1855                           intcon3	equ	0xFF0
  1856                           postinc0	equ	0xFEE
  1857                           wreg	equ	0xFE8
  1858                           postdec1	equ	0xFE5
  1859                           fsr1l	equ	0xFE1
  1860                           
  1861 ;; *************** function _printf *****************
  1862 ;; Defined at:
  1863 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  1864 ;; Parameters:    Size  Location     Type
  1865 ;;  f               2   12[BANK0 ] PTR const unsigned char 
  1866 ;;		 -> STR_58(17), STR_57(17), STR_56(18), STR_55(22), 
  1867 ;;		 -> STR_54(4), STR_53(3), STR_52(4), STR_51(5), 
  1868 ;;		 -> STR_50(4), STR_49(18), STR_48(20), STR_47(16), 
  1869 ;;		 -> STR_46(21), STR_45(16), STR_44(22), STR_43(16), 
  1870 ;;		 -> STR_42(21), STR_41(16), STR_40(22), STR_39(23), 
  1871 ;;		 -> STR_38(24), STR_37(21), STR_36(24), STR_35(24), 
  1872 ;;		 -> STR_34(22), STR_33(19), STR_32(25), STR_31(25), 
  1873 ;;		 -> STR_30(27), STR_29(3), STR_28(3), STR_27(3), 
  1874 ;;		 -> STR_26(5), STR_25(3), STR_24(3), STR_23(3), 
  1875 ;;		 -> STR_22(4), STR_21(3), STR_20(3), STR_19(3), 
  1876 ;;		 -> STR_18(4), STR_17(5), STR_16(21), STR_15(27), 
  1877 ;;		 -> STR_14(3), STR_13(3), STR_12(3), STR_11(5), 
  1878 ;;		 -> STR_10(3), STR_9(3), STR_8(3), STR_7(4), 
  1879 ;;		 -> STR_6(3), STR_5(3), STR_4(3), STR_3(4), 
  1880 ;;		 -> STR_2(5), STR_1(21), 
  1881 ;; Auto vars:     Size  Location     Type
  1882 ;;  idx             1   26[BANK0 ] unsigned char 
  1883 ;;  tmpval          4    0        struct .
  1884 ;;  width           2   35[BANK0 ] int 
  1885 ;;  val             2   32[BANK0 ] unsigned int 
  1886 ;;  len             2   29[BANK0 ] unsigned int 
  1887 ;;  ap              2   27[BANK0 ] PTR void [1]
  1888 ;;		 -> ?i2_printf(2), ?_printf(2), 
  1889 ;;  cp              2   24[BANK0 ] PTR const unsigned char 
  1890 ;;		 -> printf@c(1), 
  1891 ;;  c               1   37[BANK0 ] char 
  1892 ;;  flag            1   34[BANK0 ] unsigned char 
  1893 ;;  prec            1   31[BANK0 ] char 
  1894 ;; Return value:  Size  Location     Type
  1895 ;;                  2   12[BANK0 ] int 
  1896 ;; Registers used:
  1897 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1898 ;; Tracked objects:
  1899 ;;		On entry : 0/0
  1900 ;;		On exit  : 0/0
  1901 ;;		Unchanged: 0/0
  1902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1903 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1904 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1905 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1906 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1907 ;;Total ram usage:       26 bytes
  1908 ;; Hardware stack levels used:    1
  1909 ;; Hardware stack levels required when called:    9
  1910 ;; This function calls:
  1911 ;;		___lwdiv
  1912 ;;		___lwmod
  1913 ;;		___wmul
  1914 ;;		_isdigit
  1915 ;;		_putch
  1916 ;; This function is called by:
  1917 ;;		_showRTC
  1918 ;;		_main
  1919 ;; This function uses a non-reentrant model
  1920 ;;
  1921                           
  1922                           	psect	text2
  1923  000012                     __ptext2:
  1924                           	opt stack 0
  1925  000012                     _printf:
  1926                           	opt stack 20
  1927                           
  1928                           ;doprnt.c: 466: va_list ap;
  1929                           ;doprnt.c: 499: signed char c;
  1930                           ;doprnt.c: 501: int width;
  1931                           ;doprnt.c: 506: signed char prec;
  1932                           ;doprnt.c: 508: unsigned char flag;
  1933                           ;doprnt.c: 523: union {
  1934                           ;doprnt.c: 524: unsigned long vd;
  1935                           ;doprnt.c: 525: double integ;
  1936                           ;doprnt.c: 526: } tmpval;
  1937                           ;doprnt.c: 528: unsigned int val;
  1938                           ;doprnt.c: 529: unsigned len;
  1939                           ;doprnt.c: 530: const char * cp;
  1940                           ;doprnt.c: 533: *ap = __va_start();
  1941                           
  1942                           ;incstack = 0
  1943  000012  0E8E               	movlw	low (?_printf+2)
  1944  000014  0100               	movlb	0	; () banked
  1945  000016  6F9B               	movwf	printf@ap& (0+255),b
  1946  000018  0E00               	movlw	high (?_printf+2)
  1947  00001A  0100               	movlb	0	; () banked
  1948  00001C  6F9C               	movwf	(printf@ap+1)& (0+255),b
  1949                           
  1950                           ;doprnt.c: 536: while(c = *f++) {
  1951  00001E  D21F               	goto	l3947
  1952  000020                     l3797:
  1953                           
  1954                           ; BSR set to: 0
  1955                           ;doprnt.c: 538: if(c != '%')
  1956  000020  0E25               	movlw	37
  1957  000022  0100               	movlb	0	; () banked
  1958  000024  19A5               	xorwf	printf@c& (0+255),w,b
  1959  000026  B4D8               	btfsc	status,2,c
  1960  000028  D005               	goto	l3801
  1961                           
  1962                           ; BSR set to: 0
  1963                           ;doprnt.c: 540: {
  1964                           ;doprnt.c: 541: (putch(c) );
  1965  00002A  0100               	movlb	0	; () banked
  1966  00002C  51A5               	movf	printf@c& (0+255),w,b
  1967  00002E  EC03  F014         	call	_putch
  1968                           
  1969                           ;doprnt.c: 542: continue;
  1970  000032  D215               	goto	l3947
  1971  000034                     l3801:
  1972                           
  1973                           ;doprnt.c: 543: }
  1974                           ;doprnt.c: 546: width = 0;
  1975  000034  0E00               	movlw	0
  1976  000036  0100               	movlb	0	; () banked
  1977  000038  6FA4               	movwf	(printf@width+1)& (0+255),b
  1978  00003A  0E00               	movlw	0
  1979  00003C  6FA3               	movwf	printf@width& (0+255),b
  1980                           
  1981                           ;doprnt.c: 548: flag = 0;
  1982  00003E  0E00               	movlw	0
  1983  000040  0100               	movlb	0	; () banked
  1984  000042  6FA2               	movwf	printf@flag& (0+255),b
  1985                           
  1986                           ; BSR set to: 0
  1987                           ;doprnt.c: 551: switch(*f) {
  1988                           
  1989                           ;doprnt.c: 550: for(;;) {
  1990  000044  D005               	goto	l3807
  1991  000046                     l3803:
  1992                           
  1993                           ;doprnt.c: 580: flag |= 0x04;
  1994  000046  0100               	movlb	0	; () banked
  1995  000048  85A2               	bsf	printf@flag& (0+255),2,b
  1996                           
  1997                           ;doprnt.c: 581: f++;
  1998  00004A  0100               	movlb	0	; () banked
  1999  00004C  4B8C               	infsnz	printf@f& (0+255),f,b
  2000  00004E  2B8D               	incf	(printf@f+1)& (0+255),f,b
  2001  000050                     l3807:
  2002  000050  C08C  FFF6         	movff	printf@f,tblptrl
  2003  000054  C08D  FFF7         	movff	printf@f+1,tblptrh
  2004  000058                     	if	0	;tblptru may be non-zero
  2005  000058                     	endif
  2006  000058                     	if	0	;tblptru may be non-zero
  2007  000058                     	endif
  2008  000058  0008               	tblrd		*
  2009  00005A  50F5               	movf	tablat,w,c
  2010                           
  2011                           ; Switch size 1, requested type "space"
  2012                           ; Number of cases is 1, Range of values is 48 to 48
  2013                           ; switch strategies available:
  2014                           ; Name         Instructions Cycles
  2015                           ; simple_byte            4     3 (average)
  2016                           ;	Chosen strategy is simple_byte
  2017  00005C  0A30               	xorlw	48	; case 48
  2018  00005E  B4D8               	btfsc	status,2,c
  2019  000060  D7F2               	goto	l3803
  2020                           
  2021                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2022                           
  2023                           ;doprnt.c: 586: }
  2024                           
  2025                           ;doprnt.c: 585: break;
  2026  000062  C08C  FFF6         	movff	printf@f,tblptrl
  2027  000066  C08D  FFF7         	movff	printf@f+1,tblptrh
  2028  00006A                     	if	0	;tblptru may be non-zero
  2029  00006A                     	endif
  2030  00006A                     	if	0	;tblptru may be non-zero
  2031  00006A                     	endif
  2032  00006A  0008               	tblrd		*
  2033  00006C  50F5               	movf	tablat,w,c
  2034  00006E  ECFC  F012         	call	_isdigit
  2035  000072  A0D8               	btfss	status,0,c
  2036  000074  D092               	goto	l3847
  2037                           
  2038                           ;doprnt.c: 598: width = 0;
  2039  000076  0E00               	movlw	0
  2040  000078  0100               	movlb	0	; () banked
  2041  00007A  6FA4               	movwf	(printf@width+1)& (0+255),b
  2042  00007C  0E00               	movlw	0
  2043  00007E  6FA3               	movwf	printf@width& (0+255),b
  2044  000080                     l3813:
  2045                           
  2046                           ;doprnt.c: 600: width *= 10;
  2047  000080  C0A3  F080         	movff	printf@width,___wmul@multiplier
  2048  000084  C0A4  F081         	movff	printf@width+1,___wmul@multiplier+1
  2049  000088  0E00               	movlw	0
  2050  00008A  0100               	movlb	0	; () banked
  2051  00008C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2052  00008E  0E0A               	movlw	10
  2053  000090  6F82               	movwf	___wmul@multiplicand& (0+255),b
  2054  000092  ECB4  F012         	call	___wmul	;wreg free
  2055  000096  C080  F0A3         	movff	?___wmul,printf@width
  2056  00009A  C081  F0A4         	movff	?___wmul+1,printf@width+1
  2057                           
  2058                           ;doprnt.c: 601: width += *f++ - '0';
  2059  00009E  0ED0               	movlw	208
  2060  0000A0  0100               	movlb	0	; () banked
  2061  0000A2  6F94               	movwf	??_printf& (0+255),b
  2062  0000A4  0EFF               	movlw	255
  2063  0000A6  0100               	movlb	0	; () banked
  2064  0000A8  6F95               	movwf	(??_printf+1)& (0+255),b
  2065  0000AA  C08C  FFF6         	movff	printf@f,tblptrl
  2066  0000AE  C08D  FFF7         	movff	printf@f+1,tblptrh
  2067  0000B2                     	if	0	;tblptru may be non-zero
  2068  0000B2                     	endif
  2069  0000B2                     	if	0	;tblptru may be non-zero
  2070  0000B2                     	endif
  2071  0000B2  0008               	tblrd		*
  2072  0000B4  50F5               	movf	tablat,w,c
  2073  0000B6  0100               	movlb	0	; () banked
  2074  0000B8  6F96               	movwf	(??_printf+2)& (0+255),b
  2075  0000BA  6B97               	clrf	(??_printf+3)& (0+255),b
  2076  0000BC  0100               	movlb	0	; () banked
  2077  0000BE  5194               	movf	??_printf& (0+255),w,b
  2078  0000C0  0100               	movlb	0	; () banked
  2079  0000C2  2796               	addwf	(??_printf+2)& (0+255),f,b
  2080  0000C4  0100               	movlb	0	; () banked
  2081  0000C6  5195               	movf	(??_printf+1)& (0+255),w,b
  2082  0000C8  0100               	movlb	0	; () banked
  2083  0000CA  2397               	addwfc	(??_printf+3)& (0+255),f,b
  2084  0000CC  0100               	movlb	0	; () banked
  2085  0000CE  5196               	movf	(??_printf+2)& (0+255),w,b
  2086  0000D0  0100               	movlb	0	; () banked
  2087  0000D2  27A3               	addwf	printf@width& (0+255),f,b
  2088  0000D4  0100               	movlb	0	; () banked
  2089  0000D6  5197               	movf	(??_printf+3)& (0+255),w,b
  2090  0000D8  0100               	movlb	0	; () banked
  2091  0000DA  23A4               	addwfc	(printf@width+1)& (0+255),f,b
  2092                           
  2093                           ; BSR set to: 0
  2094  0000DC  0100               	movlb	0	; () banked
  2095  0000DE  4B8C               	infsnz	printf@f& (0+255),f,b
  2096  0000E0  2B8D               	incf	(printf@f+1)& (0+255),f,b
  2097                           
  2098                           ; BSR set to: 0
  2099                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2100  0000E2  C08C  FFF6         	movff	printf@f,tblptrl
  2101  0000E6  C08D  FFF7         	movff	printf@f+1,tblptrh
  2102  0000EA                     	if	0	;tblptru may be non-zero
  2103  0000EA                     	endif
  2104  0000EA                     	if	0	;tblptru may be non-zero
  2105  0000EA                     	endif
  2106  0000EA  0008               	tblrd		*
  2107  0000EC  50F5               	movf	tablat,w,c
  2108  0000EE  ECFC  F012         	call	_isdigit
  2109  0000F2  A0D8               	btfss	status,0,c
  2110  0000F4  D052               	goto	l3847
  2111  0000F6  D7C4               	goto	l3813
  2112  0000F8                     l3821:
  2113                           
  2114                           ;doprnt.c: 721: flag |= 0x80;
  2115  0000F8  0100               	movlb	0	; () banked
  2116  0000FA  8FA2               	bsf	printf@flag& (0+255),7,b
  2117                           
  2118                           ;doprnt.c: 723: break;
  2119  0000FC  D06A               	goto	l3849
  2120  0000FE                     l3823:
  2121                           
  2122                           ; BSR set to: 0
  2123                           ;doprnt.c: 757: if(width > len)
  2124  0000FE  0100               	movlb	0	; () banked
  2125  000100  51A3               	movf	printf@width& (0+255),w,b
  2126  000102  0100               	movlb	0	; () banked
  2127  000104  5D9D               	subwf	printf@len& (0+255),w,b
  2128  000106  0100               	movlb	0	; () banked
  2129  000108  51A4               	movf	(printf@width+1)& (0+255),w,b
  2130  00010A  0100               	movlb	0	; () banked
  2131  00010C  599E               	subwfb	(printf@len+1)& (0+255),w,b
  2132  00010E  B0D8               	btfsc	status,0,c
  2133  000110  D009               	goto	l3827
  2134                           
  2135                           ; BSR set to: 0
  2136                           ;doprnt.c: 758: width -= len;
  2137  000112  0100               	movlb	0	; () banked
  2138  000114  519D               	movf	printf@len& (0+255),w,b
  2139  000116  0100               	movlb	0	; () banked
  2140  000118  5FA3               	subwf	printf@width& (0+255),f,b
  2141  00011A  0100               	movlb	0	; () banked
  2142  00011C  519E               	movf	(printf@len+1)& (0+255),w,b
  2143  00011E  0100               	movlb	0	; () banked
  2144  000120  5BA4               	subwfb	(printf@width+1)& (0+255),f,b
  2145  000122  D009               	goto	l3831
  2146  000124                     l3827:
  2147                           
  2148                           ; BSR set to: 0
  2149                           ;doprnt.c: 759: else
  2150                           ;doprnt.c: 760: width = 0;
  2151  000124  0E00               	movlw	0
  2152  000126  0100               	movlb	0	; () banked
  2153  000128  6FA4               	movwf	(printf@width+1)& (0+255),b
  2154  00012A  0E00               	movlw	0
  2155  00012C  6FA3               	movwf	printf@width& (0+255),b
  2156                           
  2157                           ; BSR set to: 0
  2158                           ;doprnt.c: 764: while(width--)
  2159  00012E  D003               	goto	l3831
  2160  000130                     l3829:
  2161                           
  2162                           ; BSR set to: 0
  2163                           ;doprnt.c: 765: (putch(' ') );
  2164  000130  0E20               	movlw	32
  2165  000132  EC03  F014         	call	_putch
  2166  000136                     l3831:
  2167  000136  0100               	movlb	0	; () banked
  2168  000138  07A3               	decf	printf@width& (0+255),f,b
  2169  00013A  A0D8               	btfss	status,0,c
  2170  00013C  07A4               	decf	(printf@width+1)& (0+255),f,b
  2171  00013E  0100               	movlb	0	; () banked
  2172  000140  29A3               	incf	printf@width& (0+255),w,b
  2173  000142  E1F6               	bnz	l3829
  2174  000144  0100               	movlb	0	; () banked
  2175  000146  29A4               	incf	(printf@width+1)& (0+255),w,b
  2176  000148  B4D8               	btfsc	status,2,c
  2177  00014A  D00B               	goto	l3837
  2178  00014C  D7F1               	goto	l3829
  2179  00014E                     l3833:
  2180                           
  2181                           ; BSR set to: 0
  2182                           ;doprnt.c: 768: (putch(*cp++) );
  2183  00014E  C098  FFD9         	movff	printf@cp,fsr2l
  2184  000152  C099  FFDA         	movff	printf@cp+1,fsr2h
  2185  000156  50DF               	movf	indf2,w,c
  2186  000158  EC03  F014         	call	_putch
  2187  00015C  0100               	movlb	0	; () banked
  2188  00015E  4B98               	infsnz	printf@cp& (0+255),f,b
  2189  000160  2B99               	incf	(printf@cp+1)& (0+255),f,b
  2190  000162                     l3837:
  2191                           
  2192                           ; BSR set to: 0
  2193  000162  0100               	movlb	0	; () banked
  2194  000164  079D               	decf	printf@len& (0+255),f,b
  2195  000166  A0D8               	btfss	status,0,c
  2196  000168  079E               	decf	(printf@len+1)& (0+255),f,b
  2197  00016A  0100               	movlb	0	; () banked
  2198  00016C  299D               	incf	printf@len& (0+255),w,b
  2199  00016E  E1EF               	bnz	l3833
  2200  000170  0100               	movlb	0	; () banked
  2201  000172  299E               	incf	(printf@len+1)& (0+255),w,b
  2202  000174  B4D8               	btfsc	status,2,c
  2203  000176  D173               	goto	l3947
  2204  000178  D7EA               	goto	l3833
  2205  00017A                     l3839:
  2206                           
  2207                           ; BSR set to: 0
  2208                           ;doprnt.c: 805: cp = (char *)&c;
  2209  00017A  0EA5               	movlw	low printf@c
  2210  00017C  0100               	movlb	0	; () banked
  2211  00017E  6F98               	movwf	printf@cp& (0+255),b
  2212  000180  0E00               	movlw	high printf@c
  2213  000182  0100               	movlb	0	; () banked
  2214  000184  6F99               	movwf	(printf@cp+1)& (0+255),b
  2215                           
  2216                           ; BSR set to: 0
  2217                           ;doprnt.c: 806: len = 1;
  2218  000186  0E00               	movlw	0
  2219  000188  0100               	movlb	0	; () banked
  2220  00018A  6F9E               	movwf	(printf@len+1)& (0+255),b
  2221  00018C  0E01               	movlw	1
  2222  00018E  6F9D               	movwf	printf@len& (0+255),b
  2223                           
  2224                           ;doprnt.c: 807: goto dostring;
  2225  000190  D7B6               	goto	l3823
  2226  000192                     l3843:
  2227                           
  2228                           ; BSR set to: 0
  2229                           ;doprnt.c: 818: flag |= 0xC0;
  2230  000192  0EC0               	movlw	192
  2231  000194  0100               	movlb	0	; () banked
  2232  000196  13A2               	iorwf	printf@flag& (0+255),f,b
  2233                           
  2234                           ; BSR set to: 0
  2235                           ;doprnt.c: 822: }
  2236                           
  2237                           ;doprnt.c: 819: break;
  2238  000198  D01C               	goto	l3849
  2239  00019A                     l3847:
  2240  00019A  C08C  FFF6         	movff	printf@f,tblptrl
  2241  00019E  C08D  FFF7         	movff	printf@f+1,tblptrh
  2242  0001A2  0100               	movlb	0	; () banked
  2243  0001A4  4B8C               	infsnz	printf@f& (0+255),f,b
  2244  0001A6  2B8D               	incf	(printf@f+1)& (0+255),f,b
  2245  0001A8                     	if	0	;tblptru may be non-zero
  2246  0001A8                     	endif
  2247  0001A8                     	if	0	;tblptru may be non-zero
  2248  0001A8                     	endif
  2249  0001A8  0008               	tblrd		*
  2250  0001AA  CFF5 F0A5          	movff	tablat,printf@c
  2251  0001AE  0100               	movlb	0	; () banked
  2252  0001B0  51A5               	movf	printf@c& (0+255),w,b
  2253                           
  2254                           ; Switch size 1, requested type "space"
  2255                           ; Number of cases is 5, Range of values is 0 to 120
  2256                           ; switch strategies available:
  2257                           ; Name         Instructions Cycles
  2258                           ; simple_byte           16     9 (average)
  2259                           ;	Chosen strategy is simple_byte
  2260  0001B2  0A00               	xorlw	0	; case 0
  2261  0001B4  B4D8               	btfsc	status,2,c
  2262  0001B6  0012               	return	
  2263  0001B8  0A64               	xorlw	100	; case 100
  2264  0001BA  B4D8               	btfsc	status,2,c
  2265  0001BC  D00A               	goto	l3849
  2266  0001BE  0A0D               	xorlw	13	; case 105
  2267  0001C0  B4D8               	btfsc	status,2,c
  2268  0001C2  D007               	goto	l3849
  2269  0001C4  0A1C               	xorlw	28	; case 117
  2270  0001C6  B4D8               	btfsc	status,2,c
  2271  0001C8  D7E4               	goto	l3843
  2272  0001CA  0A0D               	xorlw	13	; case 120
  2273  0001CC  B4D8               	btfsc	status,2,c
  2274  0001CE  D794               	goto	l3821
  2275  0001D0  D7D4               	goto	l3839
  2276  0001D2                     l3849:
  2277                           
  2278                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  2279  0001D2  C0A2  F094         	movff	printf@flag,??_printf
  2280  0001D6  0EC0               	movlw	192
  2281  0001D8  0100               	movlb	0	; () banked
  2282  0001DA  1794               	andwf	??_printf& (0+255),f,b
  2283  0001DC  A4D8               	btfss	status,2,c
  2284  0001DE  D019               	goto	l3861
  2285                           
  2286                           ; BSR set to: 0
  2287                           ;doprnt.c: 1253: {
  2288                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2289  0001E0  C09B  FFD9         	movff	printf@ap,fsr2l
  2290  0001E4  C09C  FFDA         	movff	printf@ap+1,fsr2h
  2291  0001E8  CFDE F0A0          	movff	postinc2,printf@val
  2292  0001EC  CFDD F0A1          	movff	postdec2,printf@val+1
  2293                           
  2294                           ; BSR set to: 0
  2295  0001F0  0E02               	movlw	2
  2296  0001F2  0100               	movlb	0	; () banked
  2297  0001F4  279B               	addwf	printf@ap& (0+255),f,b
  2298  0001F6  0E00               	movlw	0
  2299  0001F8  239C               	addwfc	(printf@ap+1)& (0+255),f,b
  2300                           
  2301                           ; BSR set to: 0
  2302                           ;doprnt.c: 1261: if((int)val < 0) {
  2303  0001FA  0100               	movlb	0	; () banked
  2304  0001FC  AFA1               	btfss	(printf@val+1)& (0+255),7,b
  2305  0001FE  D053               	goto	l3895
  2306                           
  2307                           ; BSR set to: 0
  2308                           ;doprnt.c: 1262: flag |= 0x03;
  2309  000200  0E03               	movlw	3
  2310  000202  0100               	movlb	0	; () banked
  2311  000204  13A2               	iorwf	printf@flag& (0+255),f,b
  2312                           
  2313                           ; BSR set to: 0
  2314                           ;doprnt.c: 1263: val = -val;
  2315  000206  0100               	movlb	0	; () banked
  2316  000208  6DA0               	negf	printf@val& (0+255),b
  2317  00020A  1FA1               	comf	(printf@val+1)& (0+255),f,b
  2318  00020C  B0D8               	btfsc	status,0,c
  2319  00020E  2BA1               	incf	(printf@val+1)& (0+255),f,b
  2320                           
  2321                           ; BSR set to: 0
  2322                           ;doprnt.c: 1264: }
  2323                           ;doprnt.c: 1266: }
  2324  000210  D04A               	goto	l3895
  2325  000212                     l3861:
  2326                           
  2327                           ; BSR set to: 0
  2328                           ;doprnt.c: 1268: else
  2329                           ;doprnt.c: 1273: {
  2330                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2331  000212  C09B  FFD9         	movff	printf@ap,fsr2l
  2332  000216  C09C  FFDA         	movff	printf@ap+1,fsr2h
  2333  00021A  CFDE F0A0          	movff	postinc2,printf@val
  2334  00021E  CFDD F0A1          	movff	postdec2,printf@val+1
  2335                           
  2336                           ; BSR set to: 0
  2337  000222  0E02               	movlw	2
  2338  000224  0100               	movlb	0	; () banked
  2339  000226  279B               	addwf	printf@ap& (0+255),f,b
  2340  000228  0E00               	movlw	0
  2341  00022A  239C               	addwfc	(printf@ap+1)& (0+255),f,b
  2342                           
  2343                           ; BSR set to: 0
  2344                           ;doprnt.c: 1287: }
  2345                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  2346  00022C  D03C               	goto	l3895
  2347  00022E                     l3865:
  2348                           
  2349                           ; BSR set to: 0
  2350                           ;doprnt.c: 1302: case 0xC0:
  2351                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2352  00022E  0E01               	movlw	1
  2353  000230  0100               	movlb	0	; () banked
  2354  000232  6FA5               	movwf	printf@c& (0+255),b
  2355  000234                     l3867:
  2356                           
  2357                           ; BSR set to: 0
  2358  000234  0E05               	movlw	5
  2359  000236  0100               	movlb	0	; () banked
  2360  000238  19A5               	xorwf	printf@c& (0+255),w,b
  2361  00023A  B4D8               	btfsc	status,2,c
  2362  00023C  D040               	goto	l3897
  2363                           
  2364                           ; BSR set to: 0
  2365                           ;doprnt.c: 1306: if(val < dpowers[c])
  2366                           
  2367                           ; BSR set to: 0
  2368                           
  2369                           ; BSR set to: 0
  2370  00023E  0100               	movlb	0	; () banked
  2371  000240  51A5               	movf	printf@c& (0+255),w,b
  2372  000242  0D02               	mullw	2
  2373  000244  0EE7               	movlw	low _dpowers
  2374  000246  24F3               	addwf	prodl,w,c
  2375  000248  6EF6               	movwf	tblptrl,c
  2376  00024A  0EFD               	movlw	high _dpowers
  2377  00024C  20F4               	addwfc	prodh,w,c
  2378  00024E  6EF7               	movwf	tblptrh,c
  2379  000250                     	if	0	;There are less than 3 active tblptr bytes
  2380  000250                     	endif
  2381  000250  0009               	tblrd		*+
  2382  000252  50F5               	movf	tablat,w,c
  2383  000254  0100               	movlb	0	; () banked
  2384  000256  5DA0               	subwf	printf@val& (0+255),w,b
  2385  000258  0009               	tblrd		*+
  2386  00025A  50F5               	movf	tablat,w,c
  2387  00025C  0100               	movlb	0	; () banked
  2388  00025E  59A1               	subwfb	(printf@val+1)& (0+255),w,b
  2389  000260  A0D8               	btfss	status,0,c
  2390  000262  D02D               	goto	l3897
  2391                           
  2392                           ; BSR set to: 0
  2393                           
  2394                           ; BSR set to: 0
  2395                           
  2396                           ; BSR set to: 0
  2397                           ;doprnt.c: 1307: break;
  2398  000264  0100               	movlb	0	; () banked
  2399  000266  2BA5               	incf	printf@c& (0+255),f,b
  2400  000268  D7E5               	goto	l3867
  2401  00026A                     l3879:
  2402                           
  2403                           ; BSR set to: 0
  2404                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2405  00026A  0E01               	movlw	1
  2406  00026C  0100               	movlb	0	; () banked
  2407  00026E  6FA5               	movwf	printf@c& (0+255),b
  2408  000270                     l3881:
  2409                           
  2410                           ; BSR set to: 0
  2411  000270  0E04               	movlw	4
  2412  000272  0100               	movlb	0	; () banked
  2413  000274  19A5               	xorwf	printf@c& (0+255),w,b
  2414  000276  B4D8               	btfsc	status,2,c
  2415  000278  D022               	goto	l3897
  2416                           
  2417                           ; BSR set to: 0
  2418                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2419                           
  2420                           ; BSR set to: 0
  2421                           
  2422                           ; BSR set to: 0
  2423  00027A  0100               	movlb	0	; () banked
  2424  00027C  51A5               	movf	printf@c& (0+255),w,b
  2425  00027E  0D02               	mullw	2
  2426  000280  0EF1               	movlw	low _hexpowers
  2427  000282  24F3               	addwf	prodl,w,c
  2428  000284  6EF6               	movwf	tblptrl,c
  2429  000286  0EFD               	movlw	high _hexpowers
  2430  000288  20F4               	addwfc	prodh,w,c
  2431  00028A  6EF7               	movwf	tblptrh,c
  2432  00028C                     	if	0	;There are less than 3 active tblptr bytes
  2433  00028C                     	endif
  2434  00028C  0009               	tblrd		*+
  2435  00028E  50F5               	movf	tablat,w,c
  2436  000290  0100               	movlb	0	; () banked
  2437  000292  5DA0               	subwf	printf@val& (0+255),w,b
  2438  000294  0009               	tblrd		*+
  2439  000296  50F5               	movf	tablat,w,c
  2440  000298  0100               	movlb	0	; () banked
  2441  00029A  59A1               	subwfb	(printf@val+1)& (0+255),w,b
  2442  00029C  A0D8               	btfss	status,0,c
  2443  00029E  D00F               	goto	l3897
  2444                           
  2445                           ; BSR set to: 0
  2446                           
  2447                           ; BSR set to: 0
  2448                           
  2449                           ; BSR set to: 0
  2450                           ;doprnt.c: 1318: break;
  2451  0002A0  0100               	movlb	0	; () banked
  2452  0002A2  2BA5               	incf	printf@c& (0+255),f,b
  2453  0002A4  D7E5               	goto	l3881
  2454  0002A6                     l3895:
  2455                           
  2456                           ; BSR set to: 0
  2457  0002A6  0100               	movlb	0	; () banked
  2458  0002A8  51A2               	movf	printf@flag& (0+255),w,b
  2459  0002AA  0BC0               	andlw	192
  2460                           
  2461                           ; Switch size 1, requested type "space"
  2462                           ; Number of cases is 3, Range of values is 0 to 192
  2463                           ; switch strategies available:
  2464                           ; Name         Instructions Cycles
  2465                           ; simple_byte           10     6 (average)
  2466                           ;	Chosen strategy is simple_byte
  2467  0002AC  0A00               	xorlw	0	; case 0
  2468  0002AE  B4D8               	btfsc	status,2,c
  2469  0002B0  D7BE               	goto	l3865
  2470  0002B2  0A80               	xorlw	128	; case 128
  2471  0002B4  B4D8               	btfsc	status,2,c
  2472  0002B6  D7D9               	goto	l3879
  2473  0002B8  0A40               	xorlw	64	; case 192
  2474  0002BA  B4D8               	btfsc	status,2,c
  2475  0002BC  D7B8               	goto	l3865
  2476  0002BE                     l3897:
  2477                           
  2478                           ; BSR set to: 0
  2479                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2480  0002BE  0100               	movlb	0	; () banked
  2481  0002C0  51A3               	movf	printf@width& (0+255),w,b
  2482  0002C2  0100               	movlb	0	; () banked
  2483  0002C4  11A4               	iorwf	(printf@width+1)& (0+255),w,b
  2484  0002C6  B4D8               	btfsc	status,2,c
  2485  0002C8  D00B               	goto	l3903
  2486                           
  2487                           ; BSR set to: 0
  2488  0002CA  C0A2  F094         	movff	printf@flag,??_printf
  2489  0002CE  0E03               	movlw	3
  2490  0002D0  0100               	movlb	0	; () banked
  2491  0002D2  1794               	andwf	??_printf& (0+255),f,b
  2492  0002D4  B4D8               	btfsc	status,2,c
  2493  0002D6  D004               	goto	l3903
  2494                           
  2495                           ; BSR set to: 0
  2496                           ;doprnt.c: 1346: width--;
  2497  0002D8  0100               	movlb	0	; () banked
  2498  0002DA  07A3               	decf	printf@width& (0+255),f,b
  2499  0002DC  A0D8               	btfss	status,0,c
  2500  0002DE  07A4               	decf	(printf@width+1)& (0+255),f,b
  2501  0002E0                     l3903:
  2502                           
  2503                           ; BSR set to: 0
  2504                           ;doprnt.c: 1381: if(width > c)
  2505  0002E0  0E80               	movlw	128
  2506  0002E2  0100               	movlb	0	; () banked
  2507  0002E4  BFA5               	btfsc	printf@c& (0+255),7,b
  2508  0002E6  0E7F               	movlw	127
  2509  0002E8  0100               	movlb	0	; () banked
  2510  0002EA  6F94               	movwf	??_printf& (0+255),b
  2511  0002EC  0100               	movlb	0	; () banked
  2512  0002EE  51A3               	movf	printf@width& (0+255),w,b
  2513  0002F0  0100               	movlb	0	; () banked
  2514  0002F2  5DA5               	subwf	printf@c& (0+255),w,b
  2515  0002F4  0100               	movlb	0	; () banked
  2516  0002F6  51A4               	movf	(printf@width+1)& (0+255),w,b
  2517  0002F8  0A80               	xorlw	128
  2518  0002FA  0100               	movlb	0	; () banked
  2519  0002FC  5994               	subwfb	??_printf& (0+255),w,b
  2520  0002FE  B0D8               	btfsc	status,0,c
  2521  000300  D00B               	goto	l3907
  2522                           
  2523                           ; BSR set to: 0
  2524                           ;doprnt.c: 1382: width -= c;
  2525  000302  0100               	movlb	0	; () banked
  2526  000304  51A5               	movf	printf@c& (0+255),w,b
  2527  000306  0100               	movlb	0	; () banked
  2528  000308  5FA3               	subwf	printf@width& (0+255),f,b
  2529  00030A  0E00               	movlw	0
  2530  00030C  0100               	movlb	0	; () banked
  2531  00030E  BFA5               	btfsc	printf@c& (0+255),7,b
  2532  000310  0EFF               	movlw	255
  2533  000312  0100               	movlb	0	; () banked
  2534  000314  5BA4               	subwfb	(printf@width+1)& (0+255),f,b
  2535  000316  D005               	goto	l3909
  2536  000318                     l3907:
  2537                           
  2538                           ; BSR set to: 0
  2539                           ;doprnt.c: 1383: else
  2540                           ;doprnt.c: 1384: width = 0;
  2541  000318  0E00               	movlw	0
  2542  00031A  0100               	movlb	0	; () banked
  2543  00031C  6FA4               	movwf	(printf@width+1)& (0+255),b
  2544  00031E  0E00               	movlw	0
  2545  000320  6FA3               	movwf	printf@width& (0+255),b
  2546  000322                     l3909:
  2547                           
  2548                           ; BSR set to: 0
  2549                           ;doprnt.c: 1387: if(flag & 0x04) {
  2550  000322  0100               	movlb	0	; () banked
  2551  000324  A5A2               	btfss	printf@flag& (0+255),2,b
  2552  000326  D018               	goto	l3921
  2553                           
  2554                           ; BSR set to: 0
  2555                           ;doprnt.c: 1392: if(flag & 0x03)
  2556  000328  C0A2  F094         	movff	printf@flag,??_printf
  2557  00032C  0E03               	movlw	3
  2558  00032E  0100               	movlb	0	; () banked
  2559  000330  1794               	andwf	??_printf& (0+255),f,b
  2560  000332  B4D8               	btfsc	status,2,c
  2561  000334  D003               	goto	l3915
  2562                           
  2563                           ; BSR set to: 0
  2564                           ;doprnt.c: 1393: (putch('-') );
  2565  000336  0E2D               	movlw	45
  2566  000338  EC03  F014         	call	_putch
  2567  00033C                     l3915:
  2568                           
  2569                           ;doprnt.c: 1415: if(width)
  2570  00033C  0100               	movlb	0	; () banked
  2571  00033E  51A3               	movf	printf@width& (0+255),w,b
  2572  000340  0100               	movlb	0	; () banked
  2573  000342  11A4               	iorwf	(printf@width+1)& (0+255),w,b
  2574  000344  B4D8               	btfsc	status,2,c
  2575  000346  D025               	goto	l3931
  2576                           
  2577                           ; BSR set to: 0
  2578                           ;doprnt.c: 1417: (putch('0') );
  2579                           
  2580                           ; BSR set to: 0
  2581                           
  2582                           ;doprnt.c: 1416: do
  2583  000348  0E30               	movlw	48
  2584  00034A  EC03  F014         	call	_putch
  2585                           
  2586                           ;doprnt.c: 1418: while(--width);
  2587  00034E  0100               	movlb	0	; () banked
  2588  000350  07A3               	decf	printf@width& (0+255),f,b
  2589  000352  A0D8               	btfss	status,0,c
  2590  000354  07A4               	decf	(printf@width+1)& (0+255),f,b
  2591  000356  D7F2               	goto	l3915
  2592  000358                     l3921:
  2593                           
  2594                           ; BSR set to: 0
  2595                           ;doprnt.c: 1422: {
  2596                           ;doprnt.c: 1424: if(width
  2597                           ;doprnt.c: 1428: )
  2598  000358  0100               	movlb	0	; () banked
  2599  00035A  51A3               	movf	printf@width& (0+255),w,b
  2600  00035C  0100               	movlb	0	; () banked
  2601  00035E  11A4               	iorwf	(printf@width+1)& (0+255),w,b
  2602  000360  B4D8               	btfsc	status,2,c
  2603  000362  D00D               	goto	l3927
  2604  000364                     l3923:
  2605                           
  2606                           ; BSR set to: 0
  2607                           ;doprnt.c: 1430: (putch(' ') );
  2608  000364  0E20               	movlw	32
  2609  000366  EC03  F014         	call	_putch
  2610                           
  2611                           ;doprnt.c: 1431: while(--width);
  2612  00036A  0100               	movlb	0	; () banked
  2613  00036C  07A3               	decf	printf@width& (0+255),f,b
  2614  00036E  A0D8               	btfss	status,0,c
  2615  000370  07A4               	decf	(printf@width+1)& (0+255),f,b
  2616  000372  0100               	movlb	0	; () banked
  2617  000374  51A3               	movf	printf@width& (0+255),w,b
  2618  000376  0100               	movlb	0	; () banked
  2619  000378  11A4               	iorwf	(printf@width+1)& (0+255),w,b
  2620  00037A  A4D8               	btfss	status,2,c
  2621  00037C  D7F3               	goto	l3923
  2622  00037E                     l3927:
  2623                           
  2624                           ; BSR set to: 0
  2625                           ;doprnt.c: 1438: if(flag & 0x03)
  2626  00037E  C0A2  F094         	movff	printf@flag,??_printf
  2627  000382  0E03               	movlw	3
  2628  000384  0100               	movlb	0	; () banked
  2629  000386  1794               	andwf	??_printf& (0+255),f,b
  2630  000388  B4D8               	btfsc	status,2,c
  2631  00038A  D003               	goto	l3931
  2632                           
  2633                           ; BSR set to: 0
  2634                           ;doprnt.c: 1439: (putch('-') );
  2635  00038C  0E2D               	movlw	45
  2636  00038E  EC03  F014         	call	_putch
  2637  000392                     l3931:
  2638                           
  2639                           ;doprnt.c: 1469: }
  2640                           ;doprnt.c: 1472: prec = c;
  2641  000392  C0A5  F09F         	movff	printf@c,printf@prec
  2642                           
  2643                           ;doprnt.c: 1474: while(prec--) {
  2644  000396  D05D               	goto	l3945
  2645  000398                     l3933:
  2646                           
  2647                           ;doprnt.c: 1486: case 0xC0:
  2648                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2649  000398  0100               	movlb	0	; () banked
  2650  00039A  519F               	movf	printf@prec& (0+255),w,b
  2651  00039C  0D02               	mullw	2
  2652  00039E  0EE7               	movlw	low _dpowers
  2653  0003A0  24F3               	addwf	prodl,w,c
  2654  0003A2  6EF6               	movwf	tblptrl,c
  2655  0003A4  0EFD               	movlw	high _dpowers
  2656  0003A6  20F4               	addwfc	prodh,w,c
  2657  0003A8  6EF7               	movwf	tblptrh,c
  2658  0003AA                     	if	0	;There are less than 3 active tblptr bytes
  2659  0003AA                     	endif
  2660  0003AA  0009               	tblrd		*+
  2661  0003AC  CFF5 F082          	movff	tablat,___lwdiv@divisor
  2662  0003B0  000A               	tblrd		*-
  2663  0003B2  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  2664  0003B6  C0A0  F080         	movff	printf@val,___lwdiv@dividend
  2665  0003BA  C0A1  F081         	movff	printf@val+1,___lwdiv@dividend+1
  2666  0003BE  EC8D  F00F         	call	___lwdiv	;wreg free
  2667  0003C2  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  2668  0003C6  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  2669  0003CA  0E00               	movlw	0
  2670  0003CC  0100               	movlb	0	; () banked
  2671  0003CE  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  2672  0003D0  0E0A               	movlw	10
  2673  0003D2  6F89               	movwf	___lwmod@divisor& (0+255),b
  2674  0003D4  ECE7  F010         	call	___lwmod	;wreg free
  2675  0003D8  0100               	movlb	0	; () banked
  2676  0003DA  5187               	movf	?___lwmod& (0+255),w,b
  2677  0003DC  0F30               	addlw	48
  2678  0003DE  0100               	movlb	0	; () banked
  2679  0003E0  6FA5               	movwf	printf@c& (0+255),b
  2680                           
  2681                           ;doprnt.c: 1491: break;
  2682  0003E2  D033               	goto	l3943
  2683  0003E4                     l3935:
  2684                           
  2685                           ; BSR set to: 0
  2686                           ;doprnt.c: 1499: {
  2687                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2688  0003E4  C0A0  F080         	movff	printf@val,___lwdiv@dividend
  2689  0003E8  C0A1  F081         	movff	printf@val+1,___lwdiv@dividend+1
  2690  0003EC  0100               	movlb	0	; () banked
  2691  0003EE  519F               	movf	printf@prec& (0+255),w,b
  2692  0003F0  0D02               	mullw	2
  2693  0003F2  0EF1               	movlw	low _hexpowers
  2694  0003F4  24F3               	addwf	prodl,w,c
  2695  0003F6  6EF6               	movwf	tblptrl,c
  2696  0003F8  0EFD               	movlw	high _hexpowers
  2697  0003FA  20F4               	addwfc	prodh,w,c
  2698  0003FC  6EF7               	movwf	tblptrh,c
  2699  0003FE                     	if	0	;There are less than 3 active tblptr bytes
  2700  0003FE                     	endif
  2701  0003FE  0009               	tblrd		*+
  2702  000400  CFF5 F082          	movff	tablat,___lwdiv@divisor
  2703  000404  000A               	tblrd		*-
  2704  000406  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  2705  00040A  EC8D  F00F         	call	___lwdiv	;wreg free
  2706  00040E  0100               	movlb	0	; () banked
  2707  000410  5180               	movf	?___lwdiv& (0+255),w,b
  2708  000412  0B0F               	andlw	15
  2709  000414  0100               	movlb	0	; () banked
  2710  000416  6F9A               	movwf	printf@idx& (0+255),b
  2711                           
  2712                           ; BSR set to: 0
  2713                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2714  000418  0100               	movlb	0	; () banked
  2715  00041A  519A               	movf	printf@idx& (0+255),w,b
  2716  00041C  0D01               	mullw	1
  2717  00041E  0E9C               	movlw	low STR_59
  2718  000420  24F3               	addwf	prodl,w,c
  2719  000422  6EF6               	movwf	tblptrl,c
  2720  000424  0EFF               	movlw	high STR_59
  2721  000426  20F4               	addwfc	prodh,w,c
  2722  000428  6EF7               	movwf	tblptrh,c
  2723  00042A                     	if	0	;There are less than 3 active tblptr bytes
  2724  00042A                     	endif
  2725  00042A  0008               	tblrd		*
  2726  00042C  CFF5 F0A5          	movff	tablat,printf@c
  2727                           
  2728                           ; BSR set to: 0
  2729                           ;doprnt.c: 1523: }
  2730                           
  2731                           ;doprnt.c: 1508: }
  2732                           ;doprnt.c: 1510: break;
  2733  000430  D00C               	goto	l3943
  2734  000432                     l3941:
  2735  000432  0100               	movlb	0	; () banked
  2736  000434  51A2               	movf	printf@flag& (0+255),w,b
  2737  000436  0BC0               	andlw	192
  2738                           
  2739                           ; Switch size 1, requested type "space"
  2740                           ; Number of cases is 3, Range of values is 0 to 192
  2741                           ; switch strategies available:
  2742                           ; Name         Instructions Cycles
  2743                           ; simple_byte           10     6 (average)
  2744                           ;	Chosen strategy is simple_byte
  2745  000438  0A00               	xorlw	0	; case 0
  2746  00043A  B4D8               	btfsc	status,2,c
  2747  00043C  D7AD               	goto	l3933
  2748  00043E  0A80               	xorlw	128	; case 128
  2749  000440  B4D8               	btfsc	status,2,c
  2750  000442  D7D0               	goto	l3935
  2751  000444  0A40               	xorlw	64	; case 192
  2752  000446  B4D8               	btfsc	status,2,c
  2753  000448  D7A7               	goto	l3933
  2754  00044A                     l3943:
  2755                           
  2756                           ; BSR set to: 0
  2757                           ;doprnt.c: 1524: (putch(c) );
  2758  00044A  0100               	movlb	0	; () banked
  2759  00044C  51A5               	movf	printf@c& (0+255),w,b
  2760  00044E  EC03  F014         	call	_putch
  2761  000452                     l3945:
  2762  000452  0100               	movlb	0	; () banked
  2763  000454  079F               	decf	printf@prec& (0+255),f,b
  2764  000456  0100               	movlb	0	; () banked
  2765  000458  299F               	incf	printf@prec& (0+255),w,b
  2766  00045A  A4D8               	btfss	status,2,c
  2767  00045C  D7EA               	goto	l3941
  2768  00045E                     l3947:
  2769  00045E  C08C  FFF6         	movff	printf@f,tblptrl
  2770  000462  C08D  FFF7         	movff	printf@f+1,tblptrh
  2771  000466  0100               	movlb	0	; () banked
  2772  000468  4B8C               	infsnz	printf@f& (0+255),f,b
  2773  00046A  2B8D               	incf	(printf@f+1)& (0+255),f,b
  2774  00046C                     	if	0	;tblptru may be non-zero
  2775  00046C                     	endif
  2776  00046C                     	if	0	;tblptru may be non-zero
  2777  00046C                     	endif
  2778  00046C  0008               	tblrd		*
  2779  00046E  CFF5 F0A5          	movff	tablat,printf@c
  2780  000472  0100               	movlb	0	; () banked
  2781  000474  51A5               	movf	printf@c& (0+255),w,b
  2782  000476  B4D8               	btfsc	status,2,c
  2783  000478  0012               	return	
  2784  00047A  D5D2               	goto	l3797
  2785  00047C                     __end_of_printf:
  2786                           	opt stack 0
  2787                           tblptru	equ	0xFF8
  2788                           tblptrh	equ	0xFF7
  2789                           tblptrl	equ	0xFF6
  2790                           tablat	equ	0xFF5
  2791                           prodh	equ	0xFF4
  2792                           prodl	equ	0xFF3
  2793                           intcon	equ	0xFF2
  2794                           intcon3	equ	0xFF0
  2795                           postinc0	equ	0xFEE
  2796                           wreg	equ	0xFE8
  2797                           postdec1	equ	0xFE5
  2798                           fsr1l	equ	0xFE1
  2799                           indf2	equ	0xFDF
  2800                           postinc2	equ	0xFDE
  2801                           postdec2	equ	0xFDD
  2802                           fsr2h	equ	0xFDA
  2803                           fsr2l	equ	0xFD9
  2804                           status	equ	0xFD8
  2805                           
  2806 ;; *************** function _putch *****************
  2807 ;; Defined at:
  2808 ;;		line 25 in file "lcd.c"
  2809 ;; Parameters:    Size  Location     Type
  2810 ;;  data            1    wreg     unsigned char 
  2811 ;; Auto vars:     Size  Location     Type
  2812 ;;  data            1    2[BANK0 ] unsigned char 
  2813 ;; Return value:  Size  Location     Type
  2814 ;;                  1    wreg      void 
  2815 ;; Registers used:
  2816 ;;		wreg, status,2, status,0, cstack
  2817 ;; Tracked objects:
  2818 ;;		On entry : 0/0
  2819 ;;		On exit  : 0/0
  2820 ;;		Unchanged: 0/0
  2821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2823 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2825 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2826 ;;Total ram usage:        1 bytes
  2827 ;; Hardware stack levels used:    1
  2828 ;; Hardware stack levels required when called:    8
  2829 ;; This function calls:
  2830 ;;		_lcdNibble
  2831 ;; This function is called by:
  2832 ;;		_printf
  2833 ;; This function uses a non-reentrant model
  2834 ;;
  2835                           
  2836                           	psect	text3
  2837  002806                     __ptext3:
  2838                           	opt stack 0
  2839  002806                     _putch:
  2840                           	opt stack 20
  2841                           
  2842                           ;incstack = 0
  2843                           ;putch@data stored from wreg
  2844  002806  0100               	movlb	0	; () banked
  2845  002808  6F82               	movwf	putch@data& (0+255),b
  2846                           
  2847                           ;lcd.c: 26: LATDbits.LATD2 = 1;
  2848  00280A  848C               	bsf	3980,2,c	;volatile
  2849                           
  2850                           ;lcd.c: 27: lcdNibble(data);
  2851  00280C  0100               	movlb	0	; () banked
  2852  00280E  5182               	movf	putch@data& (0+255),w,b
  2853  002810  ECB3  F010         	call	_lcdNibble
  2854  002814  0012               	return		;funcret
  2855  002816                     __end_of_putch:
  2856                           	opt stack 0
  2857                           tblptru	equ	0xFF8
  2858                           tblptrh	equ	0xFF7
  2859                           tblptrl	equ	0xFF6
  2860                           tablat	equ	0xFF5
  2861                           prodh	equ	0xFF4
  2862                           prodl	equ	0xFF3
  2863                           intcon	equ	0xFF2
  2864                           intcon3	equ	0xFF0
  2865                           postinc0	equ	0xFEE
  2866                           wreg	equ	0xFE8
  2867                           postdec1	equ	0xFE5
  2868                           fsr1l	equ	0xFE1
  2869                           indf2	equ	0xFDF
  2870                           postinc2	equ	0xFDE
  2871                           postdec2	equ	0xFDD
  2872                           fsr2h	equ	0xFDA
  2873                           fsr2l	equ	0xFD9
  2874                           status	equ	0xFD8
  2875                           
  2876 ;; *************** function _isdigit *****************
  2877 ;; Defined at:
  2878 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  2879 ;; Parameters:    Size  Location     Type
  2880 ;;  c               1    wreg     unsigned char 
  2881 ;; Auto vars:     Size  Location     Type
  2882 ;;  c               1    2[BANK0 ] unsigned char 
  2883 ;; Return value:  Size  Location     Type
  2884 ;;		None               void
  2885 ;; Registers used:
  2886 ;;		wreg, status,2, status,0
  2887 ;; Tracked objects:
  2888 ;;		On entry : 0/0
  2889 ;;		On exit  : 0/0
  2890 ;;		Unchanged: 0/0
  2891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2893 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2894 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2895 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2896 ;;Total ram usage:        3 bytes
  2897 ;; Hardware stack levels used:    1
  2898 ;; Hardware stack levels required when called:    7
  2899 ;; This function calls:
  2900 ;;		Nothing
  2901 ;; This function is called by:
  2902 ;;		_printf
  2903 ;; This function uses a non-reentrant model
  2904 ;;
  2905                           
  2906                           	psect	text4
  2907  0025F8                     __ptext4:
  2908                           	opt stack 0
  2909  0025F8                     _isdigit:
  2910                           	opt stack 21
  2911                           
  2912                           ;incstack = 0
  2913                           ;isdigit@c stored from wreg
  2914  0025F8  0100               	movlb	0	; () banked
  2915  0025FA  6F82               	movwf	isdigit@c& (0+255),b
  2916  0025FC  0E00               	movlw	0
  2917  0025FE  0100               	movlb	0	; () banked
  2918  002600  6F81               	movwf	_isdigit$1098& (0+255),b
  2919                           
  2920                           ; BSR set to: 0
  2921  002602  0E3A               	movlw	58
  2922  002604  0100               	movlb	0	; () banked
  2923  002606  6182               	cpfslt	isdigit@c& (0+255),b
  2924  002608  D007               	goto	l3653
  2925                           
  2926                           ; BSR set to: 0
  2927  00260A  0E2F               	movlw	47
  2928  00260C  0100               	movlb	0	; () banked
  2929  00260E  6582               	cpfsgt	isdigit@c& (0+255),b
  2930  002610  D003               	goto	l3653
  2931                           
  2932                           ; BSR set to: 0
  2933  002612  0E01               	movlw	1
  2934  002614  0100               	movlb	0	; () banked
  2935  002616  6F81               	movwf	_isdigit$1098& (0+255),b
  2936  002618                     l3653:
  2937                           
  2938                           ; BSR set to: 0
  2939  002618  C081  F080         	movff	_isdigit$1098,??_isdigit
  2940  00261C  0100               	movlb	0	; () banked
  2941  00261E  3180               	rrcf	??_isdigit& (0+255),w,b
  2942  002620  0012               	return	
  2943  002622                     __end_of_isdigit:
  2944                           	opt stack 0
  2945                           tblptru	equ	0xFF8
  2946                           tblptrh	equ	0xFF7
  2947                           tblptrl	equ	0xFF6
  2948                           tablat	equ	0xFF5
  2949                           prodh	equ	0xFF4
  2950                           prodl	equ	0xFF3
  2951                           intcon	equ	0xFF2
  2952                           intcon3	equ	0xFF0
  2953                           postinc0	equ	0xFEE
  2954                           wreg	equ	0xFE8
  2955                           postdec1	equ	0xFE5
  2956                           fsr1l	equ	0xFE1
  2957                           indf2	equ	0xFDF
  2958                           postinc2	equ	0xFDE
  2959                           postdec2	equ	0xFDD
  2960                           fsr2h	equ	0xFDA
  2961                           fsr2l	equ	0xFD9
  2962                           status	equ	0xFD8
  2963                           
  2964 ;; *************** function ___wmul *****************
  2965 ;; Defined at:
  2966 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  2967 ;; Parameters:    Size  Location     Type
  2968 ;;  multiplier      2    0[BANK0 ] unsigned int 
  2969 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  2970 ;; Auto vars:     Size  Location     Type
  2971 ;;  product         2    4[BANK0 ] unsigned int 
  2972 ;; Return value:  Size  Location     Type
  2973 ;;                  2    0[BANK0 ] unsigned int 
  2974 ;; Registers used:
  2975 ;;		wreg, status,2, status,0, prodl, prodh
  2976 ;; Tracked objects:
  2977 ;;		On entry : 0/0
  2978 ;;		On exit  : 0/0
  2979 ;;		Unchanged: 0/0
  2980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2981 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2982 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2984 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2985 ;;Total ram usage:        6 bytes
  2986 ;; Hardware stack levels used:    1
  2987 ;; Hardware stack levels required when called:    7
  2988 ;; This function calls:
  2989 ;;		Nothing
  2990 ;; This function is called by:
  2991 ;;		_printf
  2992 ;; This function uses a non-reentrant model
  2993 ;;
  2994                           
  2995                           	psect	text5
  2996  002568                     __ptext5:
  2997                           	opt stack 0
  2998  002568                     ___wmul:
  2999                           	opt stack 21
  3000                           
  3001                           ; BSR set to: 0
  3002                           ;incstack = 0
  3003  002568  0100               	movlb	0	; () banked
  3004  00256A  5180               	movf	___wmul@multiplier& (0+255),w,b
  3005  00256C  0100               	movlb	0	; () banked
  3006  00256E  0382               	mulwf	___wmul@multiplicand& (0+255),b
  3007  002570  CFF3 F084          	movff	prodl,___wmul@product
  3008  002574  CFF4 F085          	movff	prodh,___wmul@product+1
  3009  002578  0100               	movlb	0	; () banked
  3010  00257A  5180               	movf	___wmul@multiplier& (0+255),w,b
  3011  00257C  0100               	movlb	0	; () banked
  3012  00257E  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  3013  002580  50F3               	movf	prodl,w,c
  3014  002582  0100               	movlb	0	; () banked
  3015  002584  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  3016  002586  0100               	movlb	0	; () banked
  3017  002588  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  3018  00258A  0100               	movlb	0	; () banked
  3019  00258C  0382               	mulwf	___wmul@multiplicand& (0+255),b
  3020  00258E  50F3               	movf	prodl,w,c
  3021  002590  0100               	movlb	0	; () banked
  3022  002592  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  3023                           
  3024                           ; BSR set to: 0
  3025  002594  C084  F080         	movff	___wmul@product,?___wmul
  3026  002598  C085  F081         	movff	___wmul@product+1,?___wmul+1
  3027  00259C  0012               	return	
  3028  00259E                     __end_of___wmul:
  3029                           	opt stack 0
  3030                           tblptru	equ	0xFF8
  3031                           tblptrh	equ	0xFF7
  3032                           tblptrl	equ	0xFF6
  3033                           tablat	equ	0xFF5
  3034                           prodh	equ	0xFF4
  3035                           prodl	equ	0xFF3
  3036                           intcon	equ	0xFF2
  3037                           intcon3	equ	0xFF0
  3038                           postinc0	equ	0xFEE
  3039                           wreg	equ	0xFE8
  3040                           postdec1	equ	0xFE5
  3041                           fsr1l	equ	0xFE1
  3042                           indf2	equ	0xFDF
  3043                           postinc2	equ	0xFDE
  3044                           postdec2	equ	0xFDD
  3045                           fsr2h	equ	0xFDA
  3046                           fsr2l	equ	0xFD9
  3047                           status	equ	0xFD8
  3048                           
  3049 ;; *************** function ___lwmod *****************
  3050 ;; Defined at:
  3051 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  3052 ;; Parameters:    Size  Location     Type
  3053 ;;  dividend        2    7[BANK0 ] unsigned int 
  3054 ;;  divisor         2    9[BANK0 ] unsigned int 
  3055 ;; Auto vars:     Size  Location     Type
  3056 ;;  counter         1   11[BANK0 ] unsigned char 
  3057 ;; Return value:  Size  Location     Type
  3058 ;;                  2    7[BANK0 ] unsigned int 
  3059 ;; Registers used:
  3060 ;;		wreg, status,2, status,0
  3061 ;; Tracked objects:
  3062 ;;		On entry : 0/0
  3063 ;;		On exit  : 0/0
  3064 ;;		Unchanged: 0/0
  3065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3066 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3067 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3069 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3070 ;;Total ram usage:        5 bytes
  3071 ;; Hardware stack levels used:    1
  3072 ;; Hardware stack levels required when called:    7
  3073 ;; This function calls:
  3074 ;;		Nothing
  3075 ;; This function is called by:
  3076 ;;		_printf
  3077 ;; This function uses a non-reentrant model
  3078 ;;
  3079                           
  3080                           	psect	text6
  3081  0021CE                     __ptext6:
  3082                           	opt stack 0
  3083  0021CE                     ___lwmod:
  3084                           	opt stack 21
  3085                           
  3086                           ; BSR set to: 0
  3087                           ;incstack = 0
  3088  0021CE  0100               	movlb	0	; () banked
  3089  0021D0  5189               	movf	___lwmod@divisor& (0+255),w,b
  3090  0021D2  0100               	movlb	0	; () banked
  3091  0021D4  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  3092  0021D6  B4D8               	btfsc	status,2,c
  3093  0021D8  D026               	goto	l1022
  3094                           
  3095                           ; BSR set to: 0
  3096  0021DA  0E01               	movlw	1
  3097  0021DC  0100               	movlb	0	; () banked
  3098  0021DE  6F8B               	movwf	___lwmod@counter& (0+255),b
  3099  0021E0  D006               	goto	l3713
  3100  0021E2                     l3711:
  3101                           
  3102                           ; BSR set to: 0
  3103  0021E2  0100               	movlb	0	; () banked
  3104  0021E4  90D8               	bcf	status,0,c
  3105  0021E6  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  3106  0021E8  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  3107  0021EA  0100               	movlb	0	; () banked
  3108  0021EC  2B8B               	incf	___lwmod@counter& (0+255),f,b
  3109  0021EE                     l3713:
  3110                           
  3111                           ; BSR set to: 0
  3112  0021EE  0100               	movlb	0	; () banked
  3113  0021F0  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  3114  0021F2  D7F7               	goto	l3711
  3115  0021F4                     l3715:
  3116                           
  3117                           ; BSR set to: 0
  3118  0021F4  0100               	movlb	0	; () banked
  3119  0021F6  5189               	movf	___lwmod@divisor& (0+255),w,b
  3120  0021F8  0100               	movlb	0	; () banked
  3121  0021FA  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  3122  0021FC  0100               	movlb	0	; () banked
  3123  0021FE  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3124  002200  0100               	movlb	0	; () banked
  3125  002202  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  3126  002204  A0D8               	btfss	status,0,c
  3127  002206  D008               	goto	l3719
  3128                           
  3129                           ; BSR set to: 0
  3130  002208  0100               	movlb	0	; () banked
  3131  00220A  5189               	movf	___lwmod@divisor& (0+255),w,b
  3132  00220C  0100               	movlb	0	; () banked
  3133  00220E  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  3134  002210  0100               	movlb	0	; () banked
  3135  002212  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3136  002214  0100               	movlb	0	; () banked
  3137  002216  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  3138  002218                     l3719:
  3139                           
  3140                           ; BSR set to: 0
  3141  002218  0100               	movlb	0	; () banked
  3142  00221A  90D8               	bcf	status,0,c
  3143  00221C  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  3144  00221E  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  3145                           
  3146                           ; BSR set to: 0
  3147  002220  0100               	movlb	0	; () banked
  3148  002222  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  3149  002224  D7E7               	goto	l3715
  3150  002226                     l1022:
  3151                           
  3152                           ; BSR set to: 0
  3153  002226  C087  F087         	movff	___lwmod@dividend,?___lwmod
  3154  00222A  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  3155                           
  3156                           ; BSR set to: 0
  3157  00222E  0012               	return		;funcret
  3158  002230                     __end_of___lwmod:
  3159                           	opt stack 0
  3160                           tblptru	equ	0xFF8
  3161                           tblptrh	equ	0xFF7
  3162                           tblptrl	equ	0xFF6
  3163                           tablat	equ	0xFF5
  3164                           prodh	equ	0xFF4
  3165                           prodl	equ	0xFF3
  3166                           intcon	equ	0xFF2
  3167                           intcon3	equ	0xFF0
  3168                           postinc0	equ	0xFEE
  3169                           wreg	equ	0xFE8
  3170                           postdec1	equ	0xFE5
  3171                           fsr1l	equ	0xFE1
  3172                           indf2	equ	0xFDF
  3173                           postinc2	equ	0xFDE
  3174                           postdec2	equ	0xFDD
  3175                           fsr2h	equ	0xFDA
  3176                           fsr2l	equ	0xFD9
  3177                           status	equ	0xFD8
  3178                           
  3179 ;; *************** function ___lwdiv *****************
  3180 ;; Defined at:
  3181 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  3182 ;; Parameters:    Size  Location     Type
  3183 ;;  dividend        2    0[BANK0 ] unsigned int 
  3184 ;;  divisor         2    2[BANK0 ] unsigned int 
  3185 ;; Auto vars:     Size  Location     Type
  3186 ;;  quotient        2    4[BANK0 ] unsigned int 
  3187 ;;  counter         1    6[BANK0 ] unsigned char 
  3188 ;; Return value:  Size  Location     Type
  3189 ;;                  2    0[BANK0 ] unsigned int 
  3190 ;; Registers used:
  3191 ;;		wreg, status,2, status,0
  3192 ;; Tracked objects:
  3193 ;;		On entry : 0/0
  3194 ;;		On exit  : 0/0
  3195 ;;		Unchanged: 0/0
  3196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3197 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3198 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3200 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3201 ;;Total ram usage:        7 bytes
  3202 ;; Hardware stack levels used:    1
  3203 ;; Hardware stack levels required when called:    7
  3204 ;; This function calls:
  3205 ;;		Nothing
  3206 ;; This function is called by:
  3207 ;;		_printf
  3208 ;; This function uses a non-reentrant model
  3209 ;;
  3210                           
  3211                           	psect	text7
  3212  001F1A                     __ptext7:
  3213                           	opt stack 0
  3214  001F1A                     ___lwdiv:
  3215                           	opt stack 21
  3216                           
  3217                           ; BSR set to: 0
  3218                           ;incstack = 0
  3219  001F1A  0E00               	movlw	0
  3220  001F1C  0100               	movlb	0	; () banked
  3221  001F1E  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
  3222  001F20  0E00               	movlw	0
  3223  001F22  6F84               	movwf	___lwdiv@quotient& (0+255),b
  3224                           
  3225                           ; BSR set to: 0
  3226  001F24  0100               	movlb	0	; () banked
  3227  001F26  5182               	movf	___lwdiv@divisor& (0+255),w,b
  3228  001F28  0100               	movlb	0	; () banked
  3229  001F2A  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  3230  001F2C  B4D8               	btfsc	status,2,c
  3231  001F2E  D02C               	goto	l1012
  3232                           
  3233                           ; BSR set to: 0
  3234  001F30  0E01               	movlw	1
  3235  001F32  0100               	movlb	0	; () banked
  3236  001F34  6F86               	movwf	___lwdiv@counter& (0+255),b
  3237  001F36  D006               	goto	l3693
  3238  001F38                     l3691:
  3239                           
  3240                           ; BSR set to: 0
  3241  001F38  0100               	movlb	0	; () banked
  3242  001F3A  90D8               	bcf	status,0,c
  3243  001F3C  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  3244  001F3E  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  3245  001F40  0100               	movlb	0	; () banked
  3246  001F42  2B86               	incf	___lwdiv@counter& (0+255),f,b
  3247  001F44                     l3693:
  3248                           
  3249                           ; BSR set to: 0
  3250  001F44  0100               	movlb	0	; () banked
  3251  001F46  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  3252  001F48  D7F7               	goto	l3691
  3253  001F4A                     l3695:
  3254                           
  3255                           ; BSR set to: 0
  3256  001F4A  0100               	movlb	0	; () banked
  3257  001F4C  90D8               	bcf	status,0,c
  3258  001F4E  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
  3259  001F50  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  3260                           
  3261                           ; BSR set to: 0
  3262  001F52  0100               	movlb	0	; () banked
  3263  001F54  5182               	movf	___lwdiv@divisor& (0+255),w,b
  3264  001F56  0100               	movlb	0	; () banked
  3265  001F58  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  3266  001F5A  0100               	movlb	0	; () banked
  3267  001F5C  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3268  001F5E  0100               	movlb	0	; () banked
  3269  001F60  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  3270  001F62  A0D8               	btfss	status,0,c
  3271  001F64  D00A               	goto	l3703
  3272                           
  3273                           ; BSR set to: 0
  3274  001F66  0100               	movlb	0	; () banked
  3275  001F68  5182               	movf	___lwdiv@divisor& (0+255),w,b
  3276  001F6A  0100               	movlb	0	; () banked
  3277  001F6C  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  3278  001F6E  0100               	movlb	0	; () banked
  3279  001F70  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3280  001F72  0100               	movlb	0	; () banked
  3281  001F74  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  3282                           
  3283                           ; BSR set to: 0
  3284  001F76  0100               	movlb	0	; () banked
  3285  001F78  8184               	bsf	___lwdiv@quotient& (0+255),0,b
  3286  001F7A                     l3703:
  3287                           
  3288                           ; BSR set to: 0
  3289  001F7A  0100               	movlb	0	; () banked
  3290  001F7C  90D8               	bcf	status,0,c
  3291  001F7E  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  3292  001F80  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  3293                           
  3294                           ; BSR set to: 0
  3295  001F82  0100               	movlb	0	; () banked
  3296  001F84  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
  3297  001F86  D7E1               	goto	l3695
  3298  001F88                     l1012:
  3299                           
  3300                           ; BSR set to: 0
  3301  001F88  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
  3302  001F8C  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3303                           
  3304                           ; BSR set to: 0
  3305  001F90  0012               	return		;funcret
  3306  001F92                     __end_of___lwdiv:
  3307                           	opt stack 0
  3308                           tblptru	equ	0xFF8
  3309                           tblptrh	equ	0xFF7
  3310                           tblptrl	equ	0xFF6
  3311                           tablat	equ	0xFF5
  3312                           prodh	equ	0xFF4
  3313                           prodl	equ	0xFF3
  3314                           intcon	equ	0xFF2
  3315                           intcon3	equ	0xFF0
  3316                           postinc0	equ	0xFEE
  3317                           wreg	equ	0xFE8
  3318                           postdec1	equ	0xFE5
  3319                           fsr1l	equ	0xFE1
  3320                           indf2	equ	0xFDF
  3321                           postinc2	equ	0xFDE
  3322                           postdec2	equ	0xFDD
  3323                           fsr2h	equ	0xFDA
  3324                           fsr2l	equ	0xFD9
  3325                           status	equ	0xFD8
  3326                           
  3327 ;; *************** function _getTime *****************
  3328 ;; Defined at:
  3329 ;;		line 76 in file "modules.c"
  3330 ;; Parameters:    Size  Location     Type
  3331 ;;  time            2    3[BANK0 ] PTR unsigned char 
  3332 ;;		 -> time(7), 
  3333 ;; Auto vars:     Size  Location     Type
  3334 ;;  i               1    5[BANK0 ] unsigned char 
  3335 ;; Return value:  Size  Location     Type
  3336 ;;                  1    wreg      void 
  3337 ;; Registers used:
  3338 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3339 ;; Tracked objects:
  3340 ;;		On entry : 0/0
  3341 ;;		On exit  : 0/0
  3342 ;;		Unchanged: 0/0
  3343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3344 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3345 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3347 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3348 ;;Total ram usage:        3 bytes
  3349 ;; Hardware stack levels used:    1
  3350 ;; Hardware stack levels required when called:    9
  3351 ;; This function calls:
  3352 ;;		_I2C_Master_Read
  3353 ;;		_I2C_Master_Start
  3354 ;;		_I2C_Master_Stop
  3355 ;;		_I2C_Master_Write
  3356 ;; This function is called by:
  3357 ;;		_showRTC
  3358 ;; This function uses a non-reentrant model
  3359 ;;
  3360                           
  3361                           	psect	text8
  3362  001E0C                     __ptext8:
  3363                           	opt stack 0
  3364  001E0C                     _getTime:
  3365                           	opt stack 20
  3366                           
  3367                           ;modules.c: 77: (INTCONbits.GIE = 0);
  3368                           
  3369                           ; BSR set to: 0
  3370                           ;incstack = 0
  3371  001E0C  9EF2               	bcf	intcon,7,c	;volatile
  3372                           
  3373                           ;modules.c: 81: I2C_Master_Start();
  3374  001E0E  EC2D  F014         	call	_I2C_Master_Start	;wreg free
  3375                           
  3376                           ;modules.c: 82: I2C_Master_Write(0b11010000);
  3377  001E12  0E00               	movlw	0
  3378  001E14  0100               	movlb	0	; () banked
  3379  001E16  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3380  001E18  0ED0               	movlw	208
  3381  001E1A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3382  001E1C  EC1F  F014         	call	_I2C_Master_Write	;wreg free
  3383                           
  3384                           ;modules.c: 83: I2C_Master_Write(0x00);
  3385  001E20  0E00               	movlw	0
  3386  001E22  0100               	movlb	0	; () banked
  3387  001E24  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3388  001E26  0E00               	movlw	0
  3389  001E28  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3390  001E2A  EC1F  F014         	call	_I2C_Master_Write	;wreg free
  3391                           
  3392                           ;modules.c: 84: I2C_Master_Stop();
  3393  001E2E  EC29  F014         	call	_I2C_Master_Stop	;wreg free
  3394                           
  3395                           ;modules.c: 87: I2C_Master_Start();
  3396  001E32  EC2D  F014         	call	_I2C_Master_Start	;wreg free
  3397                           
  3398                           ;modules.c: 88: I2C_Master_Write(0b11010001);
  3399  001E36  0E00               	movlw	0
  3400  001E38  0100               	movlb	0	; () banked
  3401  001E3A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3402  001E3C  0ED1               	movlw	209
  3403  001E3E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3404  001E40  EC1F  F014         	call	_I2C_Master_Write	;wreg free
  3405                           
  3406                           ;modules.c: 89: for (unsigned char i = 0; i < 0x06; i++) {
  3407  001E44  0E00               	movlw	0
  3408  001E46  0100               	movlb	0	; () banked
  3409  001E48  6F85               	movwf	getTime@i& (0+255),b
  3410  001E4A                     l4065:
  3411                           
  3412                           ; BSR set to: 0
  3413  001E4A  0E05               	movlw	5
  3414  001E4C  0100               	movlb	0	; () banked
  3415  001E4E  6585               	cpfsgt	getTime@i& (0+255),b
  3416  001E50  D001               	goto	l4069
  3417  001E52  D012               	goto	l4075
  3418  001E54                     l4069:
  3419                           
  3420                           ; BSR set to: 0
  3421                           ;modules.c: 90: time[i] = I2C_Master_Read(1);
  3422  001E54  0100               	movlb	0	; () banked
  3423  001E56  5185               	movf	getTime@i& (0+255),w,b
  3424  001E58  0D01               	mullw	1
  3425  001E5A  50F3               	movf	prodl,w,c
  3426  001E5C  0100               	movlb	0	; () banked
  3427  001E5E  2583               	addwf	getTime@time& (0+255),w,b
  3428  001E60  6ED9               	movwf	fsr2l,c
  3429  001E62  50F4               	movf	prodh,w,c
  3430  001E64  0100               	movlb	0	; () banked
  3431  001E66  2184               	addwfc	(getTime@time+1)& (0+255),w,b
  3432  001E68  6EDA               	movwf	fsr2h,c
  3433  001E6A  0E01               	movlw	1
  3434  001E6C  ECCF  F012         	call	_I2C_Master_Read
  3435  001E70  6EDF               	movwf	indf2,c
  3436  001E72  0100               	movlb	0	; () banked
  3437  001E74  2B85               	incf	getTime@i& (0+255),f,b
  3438  001E76  D7E9               	goto	l4065
  3439  001E78                     l4075:
  3440                           
  3441                           ; BSR set to: 0
  3442                           ;modules.c: 91: }
  3443                           ;modules.c: 92: time[6] = I2C_Master_Read(0);
  3444  001E78  0100               	movlb	0	; () banked
  3445  001E7A  EE20 F006          	lfsr	2,6
  3446  001E7E  5183               	movf	getTime@time& (0+255),w,b
  3447  001E80  26D9               	addwf	fsr2l,f,c
  3448  001E82  5184               	movf	(getTime@time+1)& (0+255),w,b
  3449  001E84  22DA               	addwfc	fsr2h,f,c
  3450  001E86  0E00               	movlw	0
  3451  001E88  ECCF  F012         	call	_I2C_Master_Read
  3452  001E8C  6EDF               	movwf	indf2,c
  3453                           
  3454                           ;modules.c: 93: I2C_Master_Stop();
  3455  001E8E  EC29  F014         	call	_I2C_Master_Stop	;wreg free
  3456                           
  3457                           ;modules.c: 94: (INTCONbits.GIE = 1);
  3458  001E92  8EF2               	bsf	intcon,7,c	;volatile
  3459  001E94  0012               	return		;funcret
  3460  001E96                     __end_of_getTime:
  3461                           	opt stack 0
  3462                           tblptru	equ	0xFF8
  3463                           tblptrh	equ	0xFF7
  3464                           tblptrl	equ	0xFF6
  3465                           tablat	equ	0xFF5
  3466                           prodh	equ	0xFF4
  3467                           prodl	equ	0xFF3
  3468                           intcon	equ	0xFF2
  3469                           intcon3	equ	0xFF0
  3470                           postinc0	equ	0xFEE
  3471                           wreg	equ	0xFE8
  3472                           postdec1	equ	0xFE5
  3473                           fsr1l	equ	0xFE1
  3474                           indf2	equ	0xFDF
  3475                           postinc2	equ	0xFDE
  3476                           postdec2	equ	0xFDD
  3477                           fsr2h	equ	0xFDA
  3478                           fsr2l	equ	0xFD9
  3479                           status	equ	0xFD8
  3480                           
  3481 ;; *************** function _I2C_Master_Write *****************
  3482 ;; Defined at:
  3483 ;;		line 42 in file "I2C.c"
  3484 ;; Parameters:    Size  Location     Type
  3485 ;;  d               2    1[BANK0 ] unsigned int 
  3486 ;; Auto vars:     Size  Location     Type
  3487 ;;		None
  3488 ;; Return value:  Size  Location     Type
  3489 ;;                  1    wreg      void 
  3490 ;; Registers used:
  3491 ;;		wreg, status,2, status,0, cstack
  3492 ;; Tracked objects:
  3493 ;;		On entry : 0/0
  3494 ;;		On exit  : 0/0
  3495 ;;		Unchanged: 0/0
  3496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3497 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3500 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3501 ;;Total ram usage:        2 bytes
  3502 ;; Hardware stack levels used:    1
  3503 ;; Hardware stack levels required when called:    8
  3504 ;; This function calls:
  3505 ;;		_I2C_Master_Wait
  3506 ;; This function is called by:
  3507 ;;		_getTime
  3508 ;; This function uses a non-reentrant model
  3509 ;;
  3510                           
  3511                           	psect	text9
  3512  00283E                     __ptext9:
  3513                           	opt stack 0
  3514  00283E                     _I2C_Master_Write:
  3515                           	opt stack 20
  3516                           
  3517                           ;I2C.c: 43: I2C_Master_Wait();
  3518                           
  3519                           ;incstack = 0
  3520  00283E  ECE7  F013         	call	_I2C_Master_Wait	;wreg free
  3521                           
  3522                           ;I2C.c: 44: SSPBUF = d;
  3523  002842  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  3524  002846  0012               	return		;funcret
  3525  002848                     __end_of_I2C_Master_Write:
  3526                           	opt stack 0
  3527                           tblptru	equ	0xFF8
  3528                           tblptrh	equ	0xFF7
  3529                           tblptrl	equ	0xFF6
  3530                           tablat	equ	0xFF5
  3531                           prodh	equ	0xFF4
  3532                           prodl	equ	0xFF3
  3533                           intcon	equ	0xFF2
  3534                           intcon3	equ	0xFF0
  3535                           postinc0	equ	0xFEE
  3536                           wreg	equ	0xFE8
  3537                           postdec1	equ	0xFE5
  3538                           fsr1l	equ	0xFE1
  3539                           indf2	equ	0xFDF
  3540                           postinc2	equ	0xFDE
  3541                           postdec2	equ	0xFDD
  3542                           fsr2h	equ	0xFDA
  3543                           fsr2l	equ	0xFD9
  3544                           status	equ	0xFD8
  3545                           
  3546 ;; *************** function _I2C_Master_Stop *****************
  3547 ;; Defined at:
  3548 ;;		line 37 in file "I2C.c"
  3549 ;; Parameters:    Size  Location     Type
  3550 ;;		None
  3551 ;; Auto vars:     Size  Location     Type
  3552 ;;		None
  3553 ;; Return value:  Size  Location     Type
  3554 ;;                  1    wreg      void 
  3555 ;; Registers used:
  3556 ;;		wreg, status,2, status,0, cstack
  3557 ;; Tracked objects:
  3558 ;;		On entry : 0/0
  3559 ;;		On exit  : 0/0
  3560 ;;		Unchanged: 0/0
  3561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3565 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3566 ;;Total ram usage:        0 bytes
  3567 ;; Hardware stack levels used:    1
  3568 ;; Hardware stack levels required when called:    8
  3569 ;; This function calls:
  3570 ;;		_I2C_Master_Wait
  3571 ;; This function is called by:
  3572 ;;		_getTime
  3573 ;; This function uses a non-reentrant model
  3574 ;;
  3575                           
  3576                           	psect	text10
  3577  002852                     __ptext10:
  3578                           	opt stack 0
  3579  002852                     _I2C_Master_Stop:
  3580                           	opt stack 20
  3581                           
  3582                           ;I2C.c: 38: I2C_Master_Wait();
  3583                           
  3584                           ;incstack = 0
  3585  002852  ECE7  F013         	call	_I2C_Master_Wait	;wreg free
  3586                           
  3587                           ;I2C.c: 39: PEN = 1;
  3588  002856  84C5               	bsf	4037,2,c	;volatile
  3589  002858  0012               	return		;funcret
  3590  00285A                     __end_of_I2C_Master_Stop:
  3591                           	opt stack 0
  3592                           tblptru	equ	0xFF8
  3593                           tblptrh	equ	0xFF7
  3594                           tblptrl	equ	0xFF6
  3595                           tablat	equ	0xFF5
  3596                           prodh	equ	0xFF4
  3597                           prodl	equ	0xFF3
  3598                           intcon	equ	0xFF2
  3599                           intcon3	equ	0xFF0
  3600                           postinc0	equ	0xFEE
  3601                           wreg	equ	0xFE8
  3602                           postdec1	equ	0xFE5
  3603                           fsr1l	equ	0xFE1
  3604                           indf2	equ	0xFDF
  3605                           postinc2	equ	0xFDE
  3606                           postdec2	equ	0xFDD
  3607                           fsr2h	equ	0xFDA
  3608                           fsr2l	equ	0xFD9
  3609                           status	equ	0xFD8
  3610                           
  3611 ;; *************** function _I2C_Master_Start *****************
  3612 ;; Defined at:
  3613 ;;		line 27 in file "I2C.c"
  3614 ;; Parameters:    Size  Location     Type
  3615 ;;		None
  3616 ;; Auto vars:     Size  Location     Type
  3617 ;;		None
  3618 ;; Return value:  Size  Location     Type
  3619 ;;                  1    wreg      void 
  3620 ;; Registers used:
  3621 ;;		wreg, status,2, status,0, cstack
  3622 ;; Tracked objects:
  3623 ;;		On entry : 0/0
  3624 ;;		On exit  : 0/0
  3625 ;;		Unchanged: 0/0
  3626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3630 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3631 ;;Total ram usage:        0 bytes
  3632 ;; Hardware stack levels used:    1
  3633 ;; Hardware stack levels required when called:    8
  3634 ;; This function calls:
  3635 ;;		_I2C_Master_Wait
  3636 ;; This function is called by:
  3637 ;;		_getTime
  3638 ;; This function uses a non-reentrant model
  3639 ;;
  3640                           
  3641                           	psect	text11
  3642  00285A                     __ptext11:
  3643                           	opt stack 0
  3644  00285A                     _I2C_Master_Start:
  3645                           	opt stack 20
  3646                           
  3647                           ;I2C.c: 28: I2C_Master_Wait();
  3648                           
  3649                           ;incstack = 0
  3650  00285A  ECE7  F013         	call	_I2C_Master_Wait	;wreg free
  3651                           
  3652                           ;I2C.c: 29: SEN = 1;
  3653  00285E  80C5               	bsf	4037,0,c	;volatile
  3654  002860  0012               	return		;funcret
  3655  002862                     __end_of_I2C_Master_Start:
  3656                           	opt stack 0
  3657                           tblptru	equ	0xFF8
  3658                           tblptrh	equ	0xFF7
  3659                           tblptrl	equ	0xFF6
  3660                           tablat	equ	0xFF5
  3661                           prodh	equ	0xFF4
  3662                           prodl	equ	0xFF3
  3663                           intcon	equ	0xFF2
  3664                           intcon3	equ	0xFF0
  3665                           postinc0	equ	0xFEE
  3666                           wreg	equ	0xFE8
  3667                           postdec1	equ	0xFE5
  3668                           fsr1l	equ	0xFE1
  3669                           indf2	equ	0xFDF
  3670                           postinc2	equ	0xFDE
  3671                           postdec2	equ	0xFDD
  3672                           fsr2h	equ	0xFDA
  3673                           fsr2l	equ	0xFD9
  3674                           status	equ	0xFD8
  3675                           
  3676 ;; *************** function _I2C_Master_Read *****************
  3677 ;; Defined at:
  3678 ;;		line 47 in file "I2C.c"
  3679 ;; Parameters:    Size  Location     Type
  3680 ;;  a               1    wreg     unsigned char 
  3681 ;; Auto vars:     Size  Location     Type
  3682 ;;  a               1    1[BANK0 ] unsigned char 
  3683 ;;  temp            1    2[BANK0 ] unsigned char 
  3684 ;; Return value:  Size  Location     Type
  3685 ;;                  1    wreg      unsigned char 
  3686 ;; Registers used:
  3687 ;;		wreg, status,2, status,0, cstack
  3688 ;; Tracked objects:
  3689 ;;		On entry : 0/0
  3690 ;;		On exit  : 0/0
  3691 ;;		Unchanged: 0/0
  3692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3694 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3696 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3697 ;;Total ram usage:        2 bytes
  3698 ;; Hardware stack levels used:    1
  3699 ;; Hardware stack levels required when called:    8
  3700 ;; This function calls:
  3701 ;;		_I2C_Master_Wait
  3702 ;; This function is called by:
  3703 ;;		_getTime
  3704 ;; This function uses a non-reentrant model
  3705 ;;
  3706                           
  3707                           	psect	text12
  3708  00259E                     __ptext12:
  3709                           	opt stack 0
  3710  00259E                     _I2C_Master_Read:
  3711                           	opt stack 20
  3712                           
  3713                           ;incstack = 0
  3714                           ;I2C_Master_Read@a stored from wreg
  3715  00259E  0100               	movlb	0	; () banked
  3716  0025A0  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  3717                           
  3718                           ;I2C.c: 48: unsigned char temp;
  3719                           ;I2C.c: 49: I2C_Master_Wait();
  3720  0025A2  ECE7  F013         	call	_I2C_Master_Wait	;wreg free
  3721                           
  3722                           ;I2C.c: 50: RCEN = 1;
  3723  0025A6  86C5               	bsf	4037,3,c	;volatile
  3724                           
  3725                           ;I2C.c: 51: I2C_Master_Wait();
  3726  0025A8  ECE7  F013         	call	_I2C_Master_Wait	;wreg free
  3727                           
  3728                           ;I2C.c: 52: temp = SSPBUF;
  3729  0025AC  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  3730                           
  3731                           ;I2C.c: 53: I2C_Master_Wait();
  3732  0025B0  ECE7  F013         	call	_I2C_Master_Wait	;wreg free
  3733                           
  3734                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
  3735  0025B4  0100               	movlb	0	; () banked
  3736  0025B6  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  3737  0025B8  0100               	movlb	0	; () banked
  3738  0025BA  A4D8               	btfss	status,2,c
  3739  0025BC  D002               	goto	u2640
  3740  0025BE  8AC5               	bsf	4037,5,c	;volatile
  3741  0025C0  D001               	goto	l3571
  3742  0025C2                     u2640:
  3743  0025C2  9AC5               	bcf	4037,5,c	;volatile
  3744  0025C4                     l3571:
  3745                           
  3746                           ;I2C.c: 55: ACKEN = 1;
  3747  0025C4  88C5               	bsf	4037,4,c	;volatile
  3748                           
  3749                           ;I2C.c: 56: return temp;
  3750  0025C6  0100               	movlb	0	; () banked
  3751  0025C8  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  3752  0025CA  0012               	return	
  3753  0025CC                     __end_of_I2C_Master_Read:
  3754                           	opt stack 0
  3755                           tblptru	equ	0xFF8
  3756                           tblptrh	equ	0xFF7
  3757                           tblptrl	equ	0xFF6
  3758                           tablat	equ	0xFF5
  3759                           prodh	equ	0xFF4
  3760                           prodl	equ	0xFF3
  3761                           intcon	equ	0xFF2
  3762                           intcon3	equ	0xFF0
  3763                           postinc0	equ	0xFEE
  3764                           wreg	equ	0xFE8
  3765                           postdec1	equ	0xFE5
  3766                           fsr1l	equ	0xFE1
  3767                           indf2	equ	0xFDF
  3768                           postinc2	equ	0xFDE
  3769                           postdec2	equ	0xFDD
  3770                           fsr2h	equ	0xFDA
  3771                           fsr2l	equ	0xFD9
  3772                           status	equ	0xFD8
  3773                           
  3774 ;; *************** function _I2C_Master_Wait *****************
  3775 ;; Defined at:
  3776 ;;		line 23 in file "I2C.c"
  3777 ;; Parameters:    Size  Location     Type
  3778 ;;		None
  3779 ;; Auto vars:     Size  Location     Type
  3780 ;;		None
  3781 ;; Return value:  Size  Location     Type
  3782 ;;                  1    wreg      void 
  3783 ;; Registers used:
  3784 ;;		wreg, status,2, status,0
  3785 ;; Tracked objects:
  3786 ;;		On entry : 0/0
  3787 ;;		On exit  : 0/0
  3788 ;;		Unchanged: 0/0
  3789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3791 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3792 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3793 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3794 ;;Total ram usage:        1 bytes
  3795 ;; Hardware stack levels used:    1
  3796 ;; Hardware stack levels required when called:    7
  3797 ;; This function calls:
  3798 ;;		Nothing
  3799 ;; This function is called by:
  3800 ;;		_I2C_Master_Start
  3801 ;;		_I2C_Master_Stop
  3802 ;;		_I2C_Master_Write
  3803 ;;		_I2C_Master_Read
  3804 ;; This function uses a non-reentrant model
  3805 ;;
  3806                           
  3807                           	psect	text13
  3808  0027CE                     __ptext13:
  3809                           	opt stack 0
  3810  0027CE                     _I2C_Master_Wait:
  3811                           	opt stack 20
  3812  0027CE                     l445:
  3813  0027CE  B4C7               	btfsc	4039,2,c	;volatile
  3814  0027D0  D7FE               	goto	l445
  3815  0027D2  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  3816  0027D6  0E1F               	movlw	31
  3817  0027D8  0100               	movlb	0	; () banked
  3818  0027DA  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  3819  0027DC  B4D8               	btfsc	status,2,c
  3820  0027DE  0012               	return	
  3821  0027E0  D7F6               	goto	l445
  3822  0027E2                     __end_of_I2C_Master_Wait:
  3823                           	opt stack 0
  3824                           tblptru	equ	0xFF8
  3825                           tblptrh	equ	0xFF7
  3826                           tblptrl	equ	0xFF6
  3827                           tablat	equ	0xFF5
  3828                           prodh	equ	0xFF4
  3829                           prodl	equ	0xFF3
  3830                           intcon	equ	0xFF2
  3831                           intcon3	equ	0xFF0
  3832                           postinc0	equ	0xFEE
  3833                           wreg	equ	0xFE8
  3834                           postdec1	equ	0xFE5
  3835                           fsr1l	equ	0xFE1
  3836                           indf2	equ	0xFDF
  3837                           postinc2	equ	0xFDE
  3838                           postdec2	equ	0xFDD
  3839                           fsr2h	equ	0xFDA
  3840                           fsr2l	equ	0xFD9
  3841                           status	equ	0xFD8
  3842                           
  3843 ;; *************** function _initialize *****************
  3844 ;; Defined at:
  3845 ;;		line 21 in file "main.c"
  3846 ;; Parameters:    Size  Location     Type
  3847 ;;		None
  3848 ;; Auto vars:     Size  Location     Type
  3849 ;;		None
  3850 ;; Return value:  Size  Location     Type
  3851 ;;                  1    wreg      void 
  3852 ;; Registers used:
  3853 ;;		wreg, status,2, status,0, cstack
  3854 ;; Tracked objects:
  3855 ;;		On entry : 0/0
  3856 ;;		On exit  : 0/0
  3857 ;;		Unchanged: 0/0
  3858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3862 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3863 ;;Total ram usage:        0 bytes
  3864 ;; Hardware stack levels used:    1
  3865 ;; Hardware stack levels required when called:   10
  3866 ;; This function calls:
  3867 ;;		_I2C_Master_Init
  3868 ;;		_initLCD
  3869 ;;		_initLatest
  3870 ;;		_lcdInst
  3871 ;; This function is called by:
  3872 ;;		_main
  3873 ;; This function uses a non-reentrant model
  3874 ;;
  3875                           
  3876                           	psect	text14
  3877  002290                     __ptext14:
  3878                           	opt stack 0
  3879  002290                     _initialize:
  3880                           	opt stack 20
  3881                           
  3882                           ;main.c: 22: TRISA = 0xFF;
  3883                           
  3884                           ; BSR set to: 0
  3885                           ;incstack = 0
  3886  002290  6892               	setf	3986,c	;volatile
  3887                           
  3888                           ;main.c: 23: TRISB = 0xFF;
  3889  002292  6893               	setf	3987,c	;volatile
  3890                           
  3891                           ;main.c: 24: TRISC = 0x00;
  3892  002294  0E00               	movlw	0
  3893  002296  6E94               	movwf	3988,c	;volatile
  3894                           
  3895                           ;main.c: 25: TRISD = 0x00;
  3896  002298  0E00               	movlw	0
  3897  00229A  6E95               	movwf	3989,c	;volatile
  3898                           
  3899                           ;main.c: 26: TRISE = 0x0F;
  3900  00229C  0E0F               	movlw	15
  3901  00229E  6E96               	movwf	3990,c	;volatile
  3902                           
  3903                           ;main.c: 28: initLCD();
  3904  0022A0  EC38  F012         	call	_initLCD	;wreg free
  3905                           
  3906                           ;main.c: 30: LATA = 0x00;
  3907  0022A4  0E00               	movlw	0
  3908  0022A6  6E89               	movwf	3977,c	;volatile
  3909                           
  3910                           ;main.c: 31: LATB = 0x00;
  3911  0022A8  0E00               	movlw	0
  3912  0022AA  6E8A               	movwf	3978,c	;volatile
  3913                           
  3914                           ;main.c: 32: LATB2 = 1;
  3915  0022AC  848A               	bsf	3978,2,c	;volatile
  3916                           
  3917                           ;main.c: 33: LATC = 0x00;
  3918  0022AE  0E00               	movlw	0
  3919  0022B0  6E8B               	movwf	3979,c	;volatile
  3920                           
  3921                           ;main.c: 34: LATD = 0x00;
  3922  0022B2  0E00               	movlw	0
  3923  0022B4  6E8C               	movwf	3980,c	;volatile
  3924                           
  3925                           ;main.c: 35: LATE = 0x00;
  3926  0022B6  0E00               	movlw	0
  3927  0022B8  6E8D               	movwf	3981,c	;volatile
  3928                           
  3929                           ;main.c: 37: ADCON0 = 0x00;
  3930  0022BA  0E00               	movlw	0
  3931  0022BC  6EC2               	movwf	4034,c	;volatile
  3932                           
  3933                           ;main.c: 38: ADCON1 = 0x09;
  3934  0022BE  0E09               	movlw	9
  3935  0022C0  6EC1               	movwf	4033,c	;volatile
  3936                           
  3937                           ;main.c: 39: CVRCON = 0x00;
  3938  0022C2  0E00               	movlw	0
  3939  0022C4  6EB5               	movwf	4021,c	;volatile
  3940                           
  3941                           ;main.c: 40: ADFM = 1;
  3942  0022C6  8EC0               	bsf	4032,7,c	;volatile
  3943                           
  3944                           ;main.c: 42: lcdInst(0x01);;
  3945  0022C8  0E01               	movlw	1
  3946  0022CA  EC0B  F014         	call	_lcdInst
  3947                           
  3948                           ;main.c: 44: I2C_Master_Init(10000);
  3949  0022CE  0E10               	movlw	16
  3950  0022D0  0100               	movlb	0	; () banked
  3951  0022D2  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  3952  0022D4  0E27               	movlw	39
  3953  0022D6  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  3954  0022D8  0E00               	movlw	0
  3955  0022DA  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  3956  0022DC  0E00               	movlw	0
  3957  0022DE  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  3958  0022E0  EC18  F011         	call	_I2C_Master_Init	;wreg free
  3959                           
  3960                           ;main.c: 47: initLatest();
  3961  0022E4  EC73  F013         	call	_initLatest	;wreg free
  3962                           
  3963                           ;main.c: 48: INTEDG2 = 0;
  3964  0022E8  98F1               	bcf	intcon2,4,c	;volatile
  3965  0022EA  0012               	return		;funcret
  3966  0022EC                     __end_of_initialize:
  3967                           	opt stack 0
  3968                           tblptru	equ	0xFF8
  3969                           tblptrh	equ	0xFF7
  3970                           tblptrl	equ	0xFF6
  3971                           tablat	equ	0xFF5
  3972                           prodh	equ	0xFF4
  3973                           prodl	equ	0xFF3
  3974                           intcon	equ	0xFF2
  3975                           intcon2	equ	0xFF1
  3976                           intcon3	equ	0xFF0
  3977                           postinc0	equ	0xFEE
  3978                           wreg	equ	0xFE8
  3979                           postdec1	equ	0xFE5
  3980                           fsr1l	equ	0xFE1
  3981                           indf2	equ	0xFDF
  3982                           postinc2	equ	0xFDE
  3983                           postdec2	equ	0xFDD
  3984                           fsr2h	equ	0xFDA
  3985                           fsr2l	equ	0xFD9
  3986                           status	equ	0xFD8
  3987                           
  3988 ;; *************** function _initLatest *****************
  3989 ;; Defined at:
  3990 ;;		line 9 in file "eeprom.c"
  3991 ;; Parameters:    Size  Location     Type
  3992 ;;		None
  3993 ;; Auto vars:     Size  Location     Type
  3994 ;;		None
  3995 ;; Return value:  Size  Location     Type
  3996 ;;                  1    wreg      void 
  3997 ;; Registers used:
  3998 ;;		wreg, status,2, status,0, cstack
  3999 ;; Tracked objects:
  4000 ;;		On entry : 0/0
  4001 ;;		On exit  : 0/0
  4002 ;;		Unchanged: 0/0
  4003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4007 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4008 ;;Total ram usage:        0 bytes
  4009 ;; Hardware stack levels used:    1
  4010 ;; Hardware stack levels required when called:    8
  4011 ;; This function calls:
  4012 ;;		_ReadEE
  4013 ;; This function is called by:
  4014 ;;		_initialize
  4015 ;; This function uses a non-reentrant model
  4016 ;;
  4017                           
  4018                           	psect	text15
  4019  0026E6                     __ptext15:
  4020                           	opt stack 0
  4021  0026E6                     _initLatest:
  4022                           	opt stack 21
  4023                           
  4024                           ;eeprom.c: 10: Latest = ReadEE(160);
  4025                           
  4026                           ;incstack = 0
  4027  0026E6  0E00               	movlw	0
  4028  0026E8  0100               	movlb	0	; () banked
  4029  0026EA  6F81               	movwf	(ReadEE@address+1)& (0+255),b
  4030  0026EC  0EA0               	movlw	160
  4031  0026EE  6F80               	movwf	ReadEE@address& (0+255),b
  4032  0026F0  ECD0  F013         	call	_ReadEE	;wreg free
  4033  0026F4  0100               	movlb	0	; () banked
  4034  0026F6  6FC0               	movwf	_Latest& (0+255),b
  4035                           
  4036                           ; BSR set to: 0
  4037                           ;eeprom.c: 11: if (Latest > 3) {
  4038  0026F8  0E03               	movlw	3
  4039  0026FA  0100               	movlb	0	; () banked
  4040  0026FC  65C0               	cpfsgt	_Latest& (0+255),b
  4041  0026FE  0012               	return	
  4042                           
  4043                           ; BSR set to: 0
  4044                           ;eeprom.c: 12: Latest = 0;
  4045  002700  0E00               	movlw	0
  4046  002702  0100               	movlb	0	; () banked
  4047  002704  6FC0               	movwf	_Latest& (0+255),b
  4048  002706  0012               	return	
  4049  002708                     __end_of_initLatest:
  4050                           	opt stack 0
  4051                           tblptru	equ	0xFF8
  4052                           tblptrh	equ	0xFF7
  4053                           tblptrl	equ	0xFF6
  4054                           tablat	equ	0xFF5
  4055                           prodh	equ	0xFF4
  4056                           prodl	equ	0xFF3
  4057                           intcon	equ	0xFF2
  4058                           intcon2	equ	0xFF1
  4059                           intcon3	equ	0xFF0
  4060                           postinc0	equ	0xFEE
  4061                           wreg	equ	0xFE8
  4062                           postdec1	equ	0xFE5
  4063                           fsr1l	equ	0xFE1
  4064                           indf2	equ	0xFDF
  4065                           postinc2	equ	0xFDE
  4066                           postdec2	equ	0xFDD
  4067                           fsr2h	equ	0xFDA
  4068                           fsr2l	equ	0xFD9
  4069                           status	equ	0xFD8
  4070                           
  4071 ;; *************** function _ReadEE *****************
  4072 ;; Defined at:
  4073 ;;		line 16 in file "eeprom.c"
  4074 ;; Parameters:    Size  Location     Type
  4075 ;;  address         2    0[BANK0 ] unsigned int 
  4076 ;; Auto vars:     Size  Location     Type
  4077 ;;		None
  4078 ;; Return value:  Size  Location     Type
  4079 ;;                  1    wreg      unsigned char 
  4080 ;; Registers used:
  4081 ;;		wreg, status,2
  4082 ;; Tracked objects:
  4083 ;;		On entry : 0/0
  4084 ;;		On exit  : 0/0
  4085 ;;		Unchanged: 0/0
  4086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4087 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4090 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4091 ;;Total ram usage:        2 bytes
  4092 ;; Hardware stack levels used:    1
  4093 ;; Hardware stack levels required when called:    7
  4094 ;; This function calls:
  4095 ;;		Nothing
  4096 ;; This function is called by:
  4097 ;;		_initLatest
  4098 ;; This function uses a non-reentrant model
  4099 ;;
  4100                           
  4101                           	psect	text16
  4102  0027A0                     __ptext16:
  4103                           	opt stack 0
  4104  0027A0                     _ReadEE:
  4105                           	opt stack 21
  4106                           
  4107                           ;eeprom.c: 19: EEADRH = (unsigned char) (address >> 8);
  4108                           
  4109                           ; BSR set to: 0
  4110                           ;incstack = 0
  4111  0027A0  0100               	movlb	0	; () banked
  4112  0027A2  5181               	movf	(ReadEE@address+1)& (0+255),w,b
  4113  0027A4  6EAA               	movwf	4010,c	;volatile
  4114                           
  4115                           ; BSR set to: 0
  4116                           ;eeprom.c: 20: EEADR = (unsigned char) address;
  4117  0027A6  C080  FFA9         	movff	ReadEE@address,4009	;volatile
  4118                           
  4119                           ; BSR set to: 0
  4120                           ;eeprom.c: 22: EECON1bits.EEPGD = 0;
  4121  0027AA  9EA6               	bcf	4006,7,c	;volatile
  4122                           
  4123                           ; BSR set to: 0
  4124                           ;eeprom.c: 23: EECON1bits.CFGS = 0;
  4125  0027AC  9CA6               	bcf	4006,6,c	;volatile
  4126                           
  4127                           ; BSR set to: 0
  4128                           ;eeprom.c: 24: EECON1bits.RD = 1;
  4129  0027AE  80A6               	bsf	4006,0,c	;volatile
  4130  0027B0                     l493:
  4131  0027B0  B0A6               	btfsc	4006,0,c	;volatile
  4132  0027B2  D7FE               	goto	l493
  4133                           
  4134                           ;eeprom.c: 30: return EEDATA;
  4135  0027B4  50A8               	movf	4008,w,c	;volatile
  4136  0027B6  0012               	return	
  4137  0027B8                     __end_of_ReadEE:
  4138                           	opt stack 0
  4139                           tblptru	equ	0xFF8
  4140                           tblptrh	equ	0xFF7
  4141                           tblptrl	equ	0xFF6
  4142                           tablat	equ	0xFF5
  4143                           prodh	equ	0xFF4
  4144                           prodl	equ	0xFF3
  4145                           intcon	equ	0xFF2
  4146                           intcon2	equ	0xFF1
  4147                           intcon3	equ	0xFF0
  4148                           postinc0	equ	0xFEE
  4149                           wreg	equ	0xFE8
  4150                           postdec1	equ	0xFE5
  4151                           fsr1l	equ	0xFE1
  4152                           indf2	equ	0xFDF
  4153                           postinc2	equ	0xFDE
  4154                           postdec2	equ	0xFDD
  4155                           fsr2h	equ	0xFDA
  4156                           fsr2l	equ	0xFD9
  4157                           status	equ	0xFD8
  4158                           
  4159 ;; *************** function _initLCD *****************
  4160 ;; Defined at:
  4161 ;;		line 9 in file "lcd.c"
  4162 ;; Parameters:    Size  Location     Type
  4163 ;;		None
  4164 ;; Auto vars:     Size  Location     Type
  4165 ;;		None
  4166 ;; Return value:  Size  Location     Type
  4167 ;;                  1    wreg      void 
  4168 ;; Registers used:
  4169 ;;		wreg, status,2, status,0, cstack
  4170 ;; Tracked objects:
  4171 ;;		On entry : 0/0
  4172 ;;		On exit  : 0/0
  4173 ;;		Unchanged: 0/0
  4174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4177 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4178 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4179 ;;Total ram usage:        1 bytes
  4180 ;; Hardware stack levels used:    1
  4181 ;; Hardware stack levels required when called:    9
  4182 ;; This function calls:
  4183 ;;		_lcdInst
  4184 ;; This function is called by:
  4185 ;;		_initialize
  4186 ;; This function uses a non-reentrant model
  4187 ;;
  4188                           
  4189                           	psect	text17
  4190  002470                     __ptext17:
  4191                           	opt stack 0
  4192  002470                     _initLCD:
  4193                           	opt stack 20
  4194                           
  4195                           ;lcd.c: 10: _delay((unsigned long)((15)*(8000000/4000.0)));
  4196                           
  4197                           ;incstack = 0
  4198  002470  0E27               	movlw	39
  4199  002472  0100               	movlb	0	; () banked
  4200  002474  6F83               	movwf	??_initLCD& (0+255),b
  4201  002476  0EF5               	movlw	245
  4202  002478                     u3737:
  4203  002478  2EE8               	decfsz	wreg,f,c
  4204  00247A  D7FE               	bra	u3737
  4205  00247C  2F83               	decfsz	??_initLCD& (0+255),f,b
  4206  00247E  D7FC               	bra	u3737
  4207                           
  4208                           ;lcd.c: 11: lcdInst(0b00110011);
  4209  002480  0E33               	movlw	51
  4210  002482  EC0B  F014         	call	_lcdInst
  4211                           
  4212                           ;lcd.c: 12: lcdInst(0b00110010);
  4213  002486  0E32               	movlw	50
  4214  002488  EC0B  F014         	call	_lcdInst
  4215                           
  4216                           ;lcd.c: 13: lcdInst(0b00101000);
  4217  00248C  0E28               	movlw	40
  4218  00248E  EC0B  F014         	call	_lcdInst
  4219                           
  4220                           ;lcd.c: 14: lcdInst(0b00001111);
  4221  002492  0E0F               	movlw	15
  4222  002494  EC0B  F014         	call	_lcdInst
  4223                           
  4224                           ;lcd.c: 15: lcdInst(0b00000110);
  4225  002498  0E06               	movlw	6
  4226  00249A  EC0B  F014         	call	_lcdInst
  4227                           
  4228                           ;lcd.c: 16: lcdInst(0b00000001);
  4229  00249E  0E01               	movlw	1
  4230  0024A0  EC0B  F014         	call	_lcdInst
  4231                           
  4232                           ;lcd.c: 17: _delay((unsigned long)((15)*(8000000/4000.0)));
  4233  0024A4  0E27               	movlw	39
  4234  0024A6  0100               	movlb	0	; () banked
  4235  0024A8  6F83               	movwf	??_initLCD& (0+255),b
  4236  0024AA  0EF5               	movlw	245
  4237  0024AC                     u3747:
  4238  0024AC  2EE8               	decfsz	wreg,f,c
  4239  0024AE  D7FE               	bra	u3747
  4240  0024B0  2F83               	decfsz	??_initLCD& (0+255),f,b
  4241  0024B2  D7FC               	bra	u3747
  4242  0024B4  0012               	return		;funcret
  4243  0024B6                     __end_of_initLCD:
  4244                           	opt stack 0
  4245                           tblptru	equ	0xFF8
  4246                           tblptrh	equ	0xFF7
  4247                           tblptrl	equ	0xFF6
  4248                           tablat	equ	0xFF5
  4249                           prodh	equ	0xFF4
  4250                           prodl	equ	0xFF3
  4251                           intcon	equ	0xFF2
  4252                           intcon2	equ	0xFF1
  4253                           intcon3	equ	0xFF0
  4254                           postinc0	equ	0xFEE
  4255                           wreg	equ	0xFE8
  4256                           postdec1	equ	0xFE5
  4257                           fsr1l	equ	0xFE1
  4258                           indf2	equ	0xFDF
  4259                           postinc2	equ	0xFDE
  4260                           postdec2	equ	0xFDD
  4261                           fsr2h	equ	0xFDA
  4262                           fsr2l	equ	0xFD9
  4263                           status	equ	0xFD8
  4264                           
  4265 ;; *************** function _lcdInst *****************
  4266 ;; Defined at:
  4267 ;;		line 20 in file "lcd.c"
  4268 ;; Parameters:    Size  Location     Type
  4269 ;;  data            1    wreg     unsigned char 
  4270 ;; Auto vars:     Size  Location     Type
  4271 ;;  data            1    2[BANK0 ] unsigned char 
  4272 ;; Return value:  Size  Location     Type
  4273 ;;                  1    wreg      void 
  4274 ;; Registers used:
  4275 ;;		wreg, status,2, status,0, cstack
  4276 ;; Tracked objects:
  4277 ;;		On entry : 0/0
  4278 ;;		On exit  : 0/0
  4279 ;;		Unchanged: 0/0
  4280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4282 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4284 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4285 ;;Total ram usage:        1 bytes
  4286 ;; Hardware stack levels used:    1
  4287 ;; Hardware stack levels required when called:    8
  4288 ;; This function calls:
  4289 ;;		_lcdNibble
  4290 ;; This function is called by:
  4291 ;;		_initialize
  4292 ;;		_showRTC
  4293 ;;		_main
  4294 ;;		_initLCD
  4295 ;; This function uses a non-reentrant model
  4296 ;;
  4297                           
  4298                           	psect	text18
  4299  002816                     __ptext18:
  4300                           	opt stack 0
  4301  002816                     _lcdInst:
  4302                           	opt stack 21
  4303                           
  4304                           ;incstack = 0
  4305                           ;lcdInst@data stored from wreg
  4306  002816  0100               	movlb	0	; () banked
  4307  002818  6F82               	movwf	lcdInst@data& (0+255),b
  4308                           
  4309                           ;lcd.c: 21: LATDbits.LATD2 = 0;
  4310  00281A  948C               	bcf	3980,2,c	;volatile
  4311                           
  4312                           ;lcd.c: 22: lcdNibble(data);
  4313  00281C  0100               	movlb	0	; () banked
  4314  00281E  5182               	movf	lcdInst@data& (0+255),w,b
  4315  002820  ECB3  F010         	call	_lcdNibble
  4316  002824  0012               	return		;funcret
  4317  002826                     __end_of_lcdInst:
  4318                           	opt stack 0
  4319                           tblptru	equ	0xFF8
  4320                           tblptrh	equ	0xFF7
  4321                           tblptrl	equ	0xFF6
  4322                           tablat	equ	0xFF5
  4323                           prodh	equ	0xFF4
  4324                           prodl	equ	0xFF3
  4325                           intcon	equ	0xFF2
  4326                           intcon2	equ	0xFF1
  4327                           intcon3	equ	0xFF0
  4328                           postinc0	equ	0xFEE
  4329                           wreg	equ	0xFE8
  4330                           postdec1	equ	0xFE5
  4331                           fsr1l	equ	0xFE1
  4332                           indf2	equ	0xFDF
  4333                           postinc2	equ	0xFDE
  4334                           postdec2	equ	0xFDD
  4335                           fsr2h	equ	0xFDA
  4336                           fsr2l	equ	0xFD9
  4337                           status	equ	0xFD8
  4338                           
  4339 ;; *************** function _lcdNibble *****************
  4340 ;; Defined at:
  4341 ;;		line 30 in file "lcd.c"
  4342 ;; Parameters:    Size  Location     Type
  4343 ;;  data            1    wreg     unsigned char 
  4344 ;; Auto vars:     Size  Location     Type
  4345 ;;  data            1    1[BANK0 ] unsigned char 
  4346 ;;  temp            1    0[BANK0 ] unsigned char 
  4347 ;; Return value:  Size  Location     Type
  4348 ;;                  1    wreg      void 
  4349 ;; Registers used:
  4350 ;;		wreg, status,2, status,0
  4351 ;; Tracked objects:
  4352 ;;		On entry : 0/0
  4353 ;;		On exit  : 0/0
  4354 ;;		Unchanged: 0/0
  4355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4357 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4359 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4360 ;;Total ram usage:        2 bytes
  4361 ;; Hardware stack levels used:    1
  4362 ;; Hardware stack levels required when called:    7
  4363 ;; This function calls:
  4364 ;;		Nothing
  4365 ;; This function is called by:
  4366 ;;		_lcdInst
  4367 ;;		_putch
  4368 ;; This function uses a non-reentrant model
  4369 ;;
  4370                           
  4371                           	psect	text19
  4372  002166                     __ptext19:
  4373                           	opt stack 0
  4374  002166                     _lcdNibble:
  4375                           	opt stack 20
  4376                           
  4377                           ;incstack = 0
  4378                           ;lcdNibble@data stored from wreg
  4379  002166  0100               	movlb	0	; () banked
  4380  002168  6F81               	movwf	lcdNibble@data& (0+255),b
  4381                           
  4382                           ;lcd.c: 32: char temp = data & 0xF0;
  4383  00216A  0100               	movlb	0	; () banked
  4384  00216C  5181               	movf	lcdNibble@data& (0+255),w,b
  4385  00216E  0BF0               	andlw	240
  4386  002170  0100               	movlb	0	; () banked
  4387  002172  6F80               	movwf	lcdNibble@temp& (0+255),b
  4388                           
  4389                           ;lcd.c: 33: LATD = LATD & 0x0F;
  4390  002174  508C               	movf	3980,w,c	;volatile
  4391  002176  0B0F               	andlw	15
  4392  002178  6E8C               	movwf	3980,c	;volatile
  4393                           
  4394                           ;lcd.c: 34: LATD = temp | LATD;
  4395  00217A  0100               	movlb	0	; () banked
  4396  00217C  5180               	movf	lcdNibble@temp& (0+255),w,b
  4397  00217E  108C               	iorwf	3980,w,c	;volatile
  4398  002180  6E8C               	movwf	3980,c	;volatile
  4399                           
  4400                           ; BSR set to: 0
  4401                           ;lcd.c: 36: LATDbits.LATD3 = 0;
  4402  002182  968C               	bcf	3980,3,c	;volatile
  4403                           
  4404                           ; BSR set to: 0
  4405                           ;lcd.c: 37: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4406  002184  0E10               	movlw	16
  4407  002186                     u3757:
  4408  002186  2EE8               	decfsz	wreg,f,c
  4409  002188  D7FE               	bra	u3757
  4410  00218A  D000               	nop2	
  4411                           
  4412                           ;lcd.c: 38: LATDbits.LATD3 = 1;
  4413  00218C  868C               	bsf	3980,3,c	;volatile
  4414                           
  4415                           ;lcd.c: 39: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4416  00218E  0E10               	movlw	16
  4417  002190                     u3767:
  4418  002190  2EE8               	decfsz	wreg,f,c
  4419  002192  D7FE               	bra	u3767
  4420  002194  D000               	nop2	
  4421                           
  4422                           ;lcd.c: 41: data = data << 4;
  4423  002196  0100               	movlb	0	; () banked
  4424  002198  3981               	swapf	lcdNibble@data& (0+255),w,b
  4425  00219A  0BF0               	andlw	240
  4426  00219C  0100               	movlb	0	; () banked
  4427  00219E  6F81               	movwf	lcdNibble@data& (0+255),b
  4428                           
  4429                           ;lcd.c: 43: temp = data & 0xF0;
  4430  0021A0  0100               	movlb	0	; () banked
  4431  0021A2  5181               	movf	lcdNibble@data& (0+255),w,b
  4432  0021A4  0BF0               	andlw	240
  4433  0021A6  0100               	movlb	0	; () banked
  4434  0021A8  6F80               	movwf	lcdNibble@temp& (0+255),b
  4435                           
  4436                           ;lcd.c: 44: LATD = LATD & 0x0F;
  4437  0021AA  508C               	movf	3980,w,c	;volatile
  4438  0021AC  0B0F               	andlw	15
  4439  0021AE  6E8C               	movwf	3980,c	;volatile
  4440                           
  4441                           ;lcd.c: 45: LATD = temp | LATD;
  4442  0021B0  0100               	movlb	0	; () banked
  4443  0021B2  5180               	movf	lcdNibble@temp& (0+255),w,b
  4444  0021B4  108C               	iorwf	3980,w,c	;volatile
  4445  0021B6  6E8C               	movwf	3980,c	;volatile
  4446                           
  4447                           ; BSR set to: 0
  4448                           ;lcd.c: 47: LATDbits.LATD3 = 0;
  4449  0021B8  968C               	bcf	3980,3,c	;volatile
  4450                           
  4451                           ; BSR set to: 0
  4452                           ;lcd.c: 48: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4453  0021BA  0E10               	movlw	16
  4454  0021BC                     u3777:
  4455  0021BC  2EE8               	decfsz	wreg,f,c
  4456  0021BE  D7FE               	bra	u3777
  4457  0021C0  D000               	nop2	
  4458                           
  4459                           ;lcd.c: 49: LATDbits.LATD3 = 1;
  4460  0021C2  868C               	bsf	3980,3,c	;volatile
  4461                           
  4462                           ;lcd.c: 50: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4463  0021C4  0E10               	movlw	16
  4464  0021C6                     u3787:
  4465  0021C6  2EE8               	decfsz	wreg,f,c
  4466  0021C8  D7FE               	bra	u3787
  4467  0021CA  D000               	nop2	
  4468  0021CC  0012               	return		;funcret
  4469  0021CE                     __end_of_lcdNibble:
  4470                           	opt stack 0
  4471                           tblptru	equ	0xFF8
  4472                           tblptrh	equ	0xFF7
  4473                           tblptrl	equ	0xFF6
  4474                           tablat	equ	0xFF5
  4475                           prodh	equ	0xFF4
  4476                           prodl	equ	0xFF3
  4477                           intcon	equ	0xFF2
  4478                           intcon2	equ	0xFF1
  4479                           intcon3	equ	0xFF0
  4480                           postinc0	equ	0xFEE
  4481                           wreg	equ	0xFE8
  4482                           postdec1	equ	0xFE5
  4483                           fsr1l	equ	0xFE1
  4484                           indf2	equ	0xFDF
  4485                           postinc2	equ	0xFDE
  4486                           postdec2	equ	0xFDD
  4487                           fsr2h	equ	0xFDA
  4488                           fsr2l	equ	0xFD9
  4489                           status	equ	0xFD8
  4490                           
  4491 ;; *************** function _I2C_Master_Init *****************
  4492 ;; Defined at:
  4493 ;;		line 13 in file "I2C.c"
  4494 ;; Parameters:    Size  Location     Type
  4495 ;;  c               4   13[BANK0 ] const unsigned long 
  4496 ;; Auto vars:     Size  Location     Type
  4497 ;;		None
  4498 ;; Return value:  Size  Location     Type
  4499 ;;                  1    wreg      void 
  4500 ;; Registers used:
  4501 ;;		wreg, status,2, status,0, cstack
  4502 ;; Tracked objects:
  4503 ;;		On entry : 0/0
  4504 ;;		On exit  : 0/0
  4505 ;;		Unchanged: 0/0
  4506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4507 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4509 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4510 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4511 ;;Total ram usage:        8 bytes
  4512 ;; Hardware stack levels used:    1
  4513 ;; Hardware stack levels required when called:    8
  4514 ;; This function calls:
  4515 ;;		___lldiv
  4516 ;; This function is called by:
  4517 ;;		_initialize
  4518 ;; This function uses a non-reentrant model
  4519 ;;
  4520                           
  4521                           	psect	text20
  4522  002230                     __ptext20:
  4523                           	opt stack 0
  4524  002230                     _I2C_Master_Init:
  4525                           	opt stack 21
  4526                           
  4527                           ;I2C.c: 15: SSPSTAT = 0b00000000;
  4528                           
  4529                           ;incstack = 0
  4530  002230  0E00               	movlw	0
  4531  002232  6EC7               	movwf	4039,c	;volatile
  4532                           
  4533                           ;I2C.c: 16: SSPCON1 = 0b00101000;
  4534  002234  0E28               	movlw	40
  4535  002236  6EC6               	movwf	4038,c	;volatile
  4536                           
  4537                           ;I2C.c: 17: SSPCON2 = 0b00000000;
  4538  002238  0E00               	movlw	0
  4539  00223A  6EC5               	movwf	4037,c	;volatile
  4540                           
  4541                           ;I2C.c: 18: SSPADD = (8000000 / (4 * c)) - 1;
  4542  00223C  0E00               	movlw	0
  4543  00223E  0100               	movlb	0	; () banked
  4544  002240  6F80               	movwf	___lldiv@dividend& (0+255),b
  4545  002242  0E12               	movlw	18
  4546  002244  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  4547  002246  0E7A               	movlw	122
  4548  002248  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  4549  00224A  0E00               	movlw	0
  4550  00224C  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  4551  00224E  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  4552  002252  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  4553  002256  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  4554  00225A  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  4555  00225E  0E02               	movlw	2
  4556  002260                     u2875:
  4557  002260  90D8               	bcf	status,0,c
  4558  002262  0100               	movlb	0	; () banked
  4559  002264  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  4560  002266  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  4561  002268  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  4562  00226A  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  4563  00226C  2EE8               	decfsz	wreg,f,c
  4564  00226E  D7F8               	goto	u2875
  4565  002270  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  4566  002274  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  4567  002278  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  4568  00227C  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  4569  002280  ECB6  F00C         	call	___lldiv	;wreg free
  4570  002284  0100               	movlb	0	; () banked
  4571  002286  0580               	decf	?___lldiv& (0+255),w,b
  4572  002288  6EC8               	movwf	4040,c	;volatile
  4573                           
  4574                           ; BSR set to: 0
  4575                           ;I2C.c: 19: TRISC3 = 1;
  4576  00228A  8694               	bsf	3988,3,c	;volatile
  4577                           
  4578                           ; BSR set to: 0
  4579                           ;I2C.c: 20: TRISC4 = 1;
  4580  00228C  8894               	bsf	3988,4,c	;volatile
  4581                           
  4582                           ; BSR set to: 0
  4583  00228E  0012               	return		;funcret
  4584  002290                     __end_of_I2C_Master_Init:
  4585                           	opt stack 0
  4586                           tblptru	equ	0xFF8
  4587                           tblptrh	equ	0xFF7
  4588                           tblptrl	equ	0xFF6
  4589                           tablat	equ	0xFF5
  4590                           prodh	equ	0xFF4
  4591                           prodl	equ	0xFF3
  4592                           intcon	equ	0xFF2
  4593                           intcon2	equ	0xFF1
  4594                           intcon3	equ	0xFF0
  4595                           postinc0	equ	0xFEE
  4596                           wreg	equ	0xFE8
  4597                           postdec1	equ	0xFE5
  4598                           fsr1l	equ	0xFE1
  4599                           indf2	equ	0xFDF
  4600                           postinc2	equ	0xFDE
  4601                           postdec2	equ	0xFDD
  4602                           fsr2h	equ	0xFDA
  4603                           fsr2l	equ	0xFD9
  4604                           status	equ	0xFD8
  4605                           
  4606 ;; *************** function ___lldiv *****************
  4607 ;; Defined at:
  4608 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  4609 ;; Parameters:    Size  Location     Type
  4610 ;;  dividend        4    0[BANK0 ] unsigned long 
  4611 ;;  divisor         4    4[BANK0 ] unsigned long 
  4612 ;; Auto vars:     Size  Location     Type
  4613 ;;  quotient        4    8[BANK0 ] unsigned long 
  4614 ;;  counter         1   12[BANK0 ] unsigned char 
  4615 ;; Return value:  Size  Location     Type
  4616 ;;                  4    0[BANK0 ] unsigned long 
  4617 ;; Registers used:
  4618 ;;		wreg, status,2, status,0
  4619 ;; Tracked objects:
  4620 ;;		On entry : 0/0
  4621 ;;		On exit  : 0/0
  4622 ;;		Unchanged: 0/0
  4623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4624 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4625 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4627 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4628 ;;Total ram usage:       13 bytes
  4629 ;; Hardware stack levels used:    1
  4630 ;; Hardware stack levels required when called:    7
  4631 ;; This function calls:
  4632 ;;		Nothing
  4633 ;; This function is called by:
  4634 ;;		_I2C_Master_Init
  4635 ;; This function uses a non-reentrant model
  4636 ;;
  4637                           
  4638                           	psect	text21
  4639  00196C                     __ptext21:
  4640                           	opt stack 0
  4641  00196C                     ___lldiv:
  4642                           	opt stack 21
  4643                           
  4644                           ; BSR set to: 0
  4645                           ;incstack = 0
  4646  00196C  0E00               	movlw	0
  4647  00196E  0100               	movlb	0	; () banked
  4648  001970  6F88               	movwf	___lldiv@quotient& (0+255),b
  4649  001972  0E00               	movlw	0
  4650  001974  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  4651  001976  0E00               	movlw	0
  4652  001978  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  4653  00197A  0E00               	movlw	0
  4654  00197C  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  4655                           
  4656                           ; BSR set to: 0
  4657  00197E  0100               	movlb	0	; () banked
  4658  001980  5184               	movf	___lldiv@divisor& (0+255),w,b
  4659  001982  0100               	movlb	0	; () banked
  4660  001984  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  4661  001986  0100               	movlb	0	; () banked
  4662  001988  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  4663  00198A  0100               	movlb	0	; () banked
  4664  00198C  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  4665  00198E  B4D8               	btfsc	status,2,c
  4666  001990  D042               	goto	l959
  4667                           
  4668                           ; BSR set to: 0
  4669  001992  0E01               	movlw	1
  4670  001994  0100               	movlb	0	; () banked
  4671  001996  6F8C               	movwf	___lldiv@counter& (0+255),b
  4672  001998  D008               	goto	l3671
  4673  00199A                     l3669:
  4674                           
  4675                           ; BSR set to: 0
  4676  00199A  0100               	movlb	0	; () banked
  4677  00199C  90D8               	bcf	status,0,c
  4678  00199E  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  4679  0019A0  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  4680  0019A2  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  4681  0019A4  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  4682  0019A6  0100               	movlb	0	; () banked
  4683  0019A8  2B8C               	incf	___lldiv@counter& (0+255),f,b
  4684  0019AA                     l3671:
  4685                           
  4686                           ; BSR set to: 0
  4687  0019AA  0100               	movlb	0	; () banked
  4688  0019AC  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  4689  0019AE  D7F5               	goto	l3669
  4690  0019B0                     l3673:
  4691                           
  4692                           ; BSR set to: 0
  4693  0019B0  0100               	movlb	0	; () banked
  4694  0019B2  90D8               	bcf	status,0,c
  4695  0019B4  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  4696  0019B6  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  4697  0019B8  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  4698  0019BA  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  4699                           
  4700                           ; BSR set to: 0
  4701  0019BC  0100               	movlb	0	; () banked
  4702  0019BE  5184               	movf	___lldiv@divisor& (0+255),w,b
  4703  0019C0  0100               	movlb	0	; () banked
  4704  0019C2  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  4705  0019C4  0100               	movlb	0	; () banked
  4706  0019C6  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4707  0019C8  0100               	movlb	0	; () banked
  4708  0019CA  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  4709  0019CC  0100               	movlb	0	; () banked
  4710  0019CE  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4711  0019D0  0100               	movlb	0	; () banked
  4712  0019D2  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  4713  0019D4  0100               	movlb	0	; () banked
  4714  0019D6  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4715  0019D8  0100               	movlb	0	; () banked
  4716  0019DA  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  4717  0019DC  A0D8               	btfss	status,0,c
  4718  0019DE  D012               	goto	l3681
  4719                           
  4720                           ; BSR set to: 0
  4721  0019E0  0100               	movlb	0	; () banked
  4722  0019E2  5184               	movf	___lldiv@divisor& (0+255),w,b
  4723  0019E4  0100               	movlb	0	; () banked
  4724  0019E6  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  4725  0019E8  0100               	movlb	0	; () banked
  4726  0019EA  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  4727  0019EC  0100               	movlb	0	; () banked
  4728  0019EE  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  4729  0019F0  0100               	movlb	0	; () banked
  4730  0019F2  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  4731  0019F4  0100               	movlb	0	; () banked
  4732  0019F6  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  4733  0019F8  0100               	movlb	0	; () banked
  4734  0019FA  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  4735  0019FC  0100               	movlb	0	; () banked
  4736  0019FE  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  4737                           
  4738                           ; BSR set to: 0
  4739  001A00  0100               	movlb	0	; () banked
  4740  001A02  8188               	bsf	___lldiv@quotient& (0+255),0,b
  4741  001A04                     l3681:
  4742                           
  4743                           ; BSR set to: 0
  4744  001A04  0100               	movlb	0	; () banked
  4745  001A06  90D8               	bcf	status,0,c
  4746  001A08  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  4747  001A0A  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  4748  001A0C  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  4749  001A0E  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  4750                           
  4751                           ; BSR set to: 0
  4752  001A10  0100               	movlb	0	; () banked
  4753  001A12  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  4754  001A14  D7CD               	goto	l3673
  4755  001A16                     l959:
  4756                           
  4757                           ; BSR set to: 0
  4758  001A16  C088  F080         	movff	___lldiv@quotient,?___lldiv
  4759  001A1A  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  4760  001A1E  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  4761  001A22  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  4762                           
  4763                           ; BSR set to: 0
  4764  001A26  0012               	return		;funcret
  4765  001A28                     __end_of___lldiv:
  4766                           	opt stack 0
  4767                           tblptru	equ	0xFF8
  4768                           tblptrh	equ	0xFF7
  4769                           tblptrl	equ	0xFF6
  4770                           tablat	equ	0xFF5
  4771                           prodh	equ	0xFF4
  4772                           prodl	equ	0xFF3
  4773                           intcon	equ	0xFF2
  4774                           intcon2	equ	0xFF1
  4775                           intcon3	equ	0xFF0
  4776                           postinc0	equ	0xFEE
  4777                           wreg	equ	0xFE8
  4778                           postdec1	equ	0xFE5
  4779                           fsr1l	equ	0xFE1
  4780                           indf2	equ	0xFDF
  4781                           postinc2	equ	0xFDE
  4782                           postdec2	equ	0xFDD
  4783                           fsr2h	equ	0xFDA
  4784                           fsr2l	equ	0xFD9
  4785                           status	equ	0xFD8
  4786                           
  4787 ;; *************** function _intrpt *****************
  4788 ;; Defined at:
  4789 ;;		line 276 in file "main.c"
  4790 ;; Parameters:    Size  Location     Type
  4791 ;;		None
  4792 ;; Auto vars:     Size  Location     Type
  4793 ;;  port            6   94[COMRAM] int [3]
  4794 ;;  keypress        1   93[COMRAM] unsigned char 
  4795 ;; Return value:  Size  Location     Type
  4796 ;;                  1    wreg      void 
  4797 ;; Registers used:
  4798 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4799 ;; Tracked objects:
  4800 ;;		On entry : 0/0
  4801 ;;		On exit  : 0/0
  4802 ;;		Unchanged: 0/0
  4803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4805 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4806 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4807 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4808 ;;Total ram usage:       23 bytes
  4809 ;; Hardware stack levels used:    1
  4810 ;; Hardware stack levels required when called:    6
  4811 ;; This function calls:
  4812 ;;		_PWMC
  4813 ;;		_PermLog
  4814 ;;		_mainloop
  4815 ;;		_simulate
  4816 ;;		_stopMoving
  4817 ;;		_testServo
  4818 ;;		i2_lcdInst
  4819 ;; This function is called by:
  4820 ;;		Interrupt level 2
  4821 ;; This function uses a non-reentrant model
  4822 ;;
  4823                           
  4824                           	psect	intcode
  4825  000008                     __pintcode:
  4826                           	opt stack 0
  4827  000008                     _intrpt:
  4828                           	opt stack 20
  4829                           
  4830                           ; BSR set to: 0
  4831                           ;incstack = 0
  4832  000008  827D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4833  00000A  ED2F  F007         	call	int_func,f	;refresh shadow registers
  4834                           tblptru	equ	0xFF8
  4835                           tblptrh	equ	0xFF7
  4836                           tblptrl	equ	0xFF6
  4837                           tablat	equ	0xFF5
  4838                           prodh	equ	0xFF4
  4839                           prodl	equ	0xFF3
  4840                           intcon	equ	0xFF2
  4841                           intcon2	equ	0xFF1
  4842                           intcon3	equ	0xFF0
  4843                           postinc0	equ	0xFEE
  4844                           wreg	equ	0xFE8
  4845                           postdec1	equ	0xFE5
  4846                           fsr1l	equ	0xFE1
  4847                           indf2	equ	0xFDF
  4848                           postinc2	equ	0xFDE
  4849                           postdec2	equ	0xFDD
  4850                           fsr2h	equ	0xFDA
  4851                           fsr2l	equ	0xFD9
  4852                           status	equ	0xFD8
  4853                           
  4854                           	psect	intcode_body
  4855  000E5E                     __pintcode_body:
  4856                           	opt stack 20
  4857  000E5E                     int_func:
  4858                           	opt stack 20
  4859  000E5E  0006               	pop		; remove dummy address from shadow register refresh
  4860  000E60  CFFA F050          	movff	pclath,??_intrpt+2
  4861  000E64  CFFB F051          	movff	pclatu,??_intrpt+3
  4862  000E68  CFE9 F052          	movff	fsr0l,??_intrpt+4
  4863  000E6C  CFEA F053          	movff	fsr0h,??_intrpt+5
  4864  000E70  CFE1 F054          	movff	fsr1l,??_intrpt+6
  4865  000E74  CFE2 F055          	movff	fsr1h,??_intrpt+7
  4866  000E78  CFD9 F056          	movff	fsr2l,??_intrpt+8
  4867  000E7C  CFDA F057          	movff	fsr2h,??_intrpt+9
  4868  000E80  CFF3 F058          	movff	prodl,??_intrpt+10
  4869  000E84  CFF4 F059          	movff	prodh,??_intrpt+11
  4870  000E88  CFF6 F05A          	movff	tblptrl,??_intrpt+12
  4871  000E8C  CFF7 F05B          	movff	tblptrh,??_intrpt+13
  4872  000E90  CFF8 F05C          	movff	tblptru,??_intrpt+14
  4873  000E94  CFF5 F05D          	movff	tablat,??_intrpt+15
  4874                           
  4875                           ;main.c: 277: (INTCONbits.GIE = 0);
  4876  000E98  9EF2               	bcf	intcon,7,c	;volatile
  4877                           
  4878                           ;main.c: 278: if (INT1IF) {
  4879  000E9A  A0F0               	btfss	intcon3,0,c	;volatile
  4880  000E9C  D0EB               	goto	i2l173
  4881                           
  4882                           ;main.c: 279: int port[] = {0, 0, 0};
  4883  000E9E  EE20  F0AA         	lfsr	2,intrpt@F3131
  4884  000EA2  EE10  F05F         	lfsr	1,intrpt@port
  4885  000EA6  0E05               	movlw	5
  4886  000EA8                     i2u365_41:
  4887  000EA8  CFDB FFE3          	movff	plusw2,plusw1
  4888  000EAC  06E8               	decf	wreg,f,c
  4889  000EAE  E2FC               	bc	i2u365_41
  4890                           
  4891                           ;main.c: 280: unsigned char keypress = (PORTB & 0xF0) >> 4;
  4892  000EB0  3881               	swapf	3969,w,c	;volatile
  4893  000EB2  0B0F               	andlw	15
  4894  000EB4  0B0F               	andlw	15
  4895  000EB6  6E5E               	movwf	intrpt@keypress,c
  4896                           
  4897                           ;main.c: 281: INT1IF = 0;
  4898  000EB8  90F0               	bcf	intcon3,0,c	;volatile
  4899  000EBA                     i2l176:
  4900  000EBA  A281               	btfss	3969,1,c	;volatile
  4901  000EBC  D0CF               	goto	i2l4667
  4902  000EBE  D7FD               	goto	i2l176
  4903  000EC0                     i2l4609:
  4904                           
  4905                           ;main.c: 287: {
  4906                           ;main.c: 288: testServo();
  4907  000EC0  ECE6  F012         	call	_testServo	;wreg free
  4908                           
  4909                           ;main.c: 289: break;
  4910  000EC4  D0D7               	goto	i2l173
  4911  000EC6                     i2l4611:
  4912                           
  4913                           ;main.c: 293: port[2] = 1;
  4914  000EC6  0E00               	movlw	0
  4915  000EC8  6E64               	movwf	intrpt@port+5,c
  4916  000ECA  0E01               	movlw	1
  4917  000ECC  6E63               	movwf	intrpt@port+4,c
  4918                           
  4919                           ;main.c: 294: PWMC(3000, 30, port);
  4920  000ECE  0E0B               	movlw	11
  4921  000ED0  6E0A               	movwf	PWMC@widthus+1,c
  4922  000ED2  0EB8               	movlw	184
  4923  000ED4  6E09               	movwf	PWMC@widthus,c
  4924  000ED6  0E00               	movlw	0
  4925  000ED8  6E0C               	movwf	PWMC@cycles+1,c
  4926  000EDA  0E1E               	movlw	30
  4927  000EDC  6E0B               	movwf	PWMC@cycles,c
  4928  000EDE  0E5F               	movlw	low intrpt@port
  4929  000EE0  6E0D               	movwf	PWMC@port,c
  4930  000EE2  0E00               	movlw	high intrpt@port
  4931  000EE4  6E0E               	movwf	PWMC@port+1,c
  4932  000EE6  EC57  F00B         	call	_PWMC	;wreg free
  4933                           
  4934                           ;main.c: 295: PWMC(400, 2, port);
  4935  000EEA  0E01               	movlw	1
  4936  000EEC  6E0A               	movwf	PWMC@widthus+1,c
  4937  000EEE  0E90               	movlw	144
  4938  000EF0  6E09               	movwf	PWMC@widthus,c
  4939  000EF2  0E00               	movlw	0
  4940  000EF4  6E0C               	movwf	PWMC@cycles+1,c
  4941  000EF6  0E02               	movlw	2
  4942  000EF8  6E0B               	movwf	PWMC@cycles,c
  4943  000EFA  0E5F               	movlw	low intrpt@port
  4944  000EFC  6E0D               	movwf	PWMC@port,c
  4945  000EFE  0E00               	movlw	high intrpt@port
  4946  000F00  6E0E               	movwf	PWMC@port+1,c
  4947  000F02  EC57  F00B         	call	_PWMC	;wreg free
  4948                           
  4949                           ;main.c: 296: break;
  4950  000F06  D0B6               	goto	i2l173
  4951  000F08                     i2l4617:
  4952                           
  4953                           ;main.c: 299: port[1] = 1;
  4954  000F08  0E00               	movlw	0
  4955  000F0A  6E62               	movwf	intrpt@port+3,c
  4956  000F0C  0E01               	movlw	1
  4957  000F0E  6E61               	movwf	intrpt@port+2,c
  4958                           
  4959                           ;main.c: 300: PWMC(3000, 30, port);
  4960  000F10  0E0B               	movlw	11
  4961  000F12  6E0A               	movwf	PWMC@widthus+1,c
  4962  000F14  0EB8               	movlw	184
  4963  000F16  6E09               	movwf	PWMC@widthus,c
  4964  000F18  0E00               	movlw	0
  4965  000F1A  6E0C               	movwf	PWMC@cycles+1,c
  4966  000F1C  0E1E               	movlw	30
  4967  000F1E  6E0B               	movwf	PWMC@cycles,c
  4968  000F20  0E5F               	movlw	low intrpt@port
  4969  000F22  6E0D               	movwf	PWMC@port,c
  4970  000F24  0E00               	movlw	high intrpt@port
  4971  000F26  6E0E               	movwf	PWMC@port+1,c
  4972  000F28  EC57  F00B         	call	_PWMC	;wreg free
  4973                           
  4974                           ;main.c: 301: PWMC(400, 2, port);
  4975  000F2C  0E01               	movlw	1
  4976  000F2E  6E0A               	movwf	PWMC@widthus+1,c
  4977  000F30  0E90               	movlw	144
  4978  000F32  6E09               	movwf	PWMC@widthus,c
  4979  000F34  0E00               	movlw	0
  4980  000F36  6E0C               	movwf	PWMC@cycles+1,c
  4981  000F38  0E02               	movlw	2
  4982  000F3A  6E0B               	movwf	PWMC@cycles,c
  4983  000F3C  0E5F               	movlw	low intrpt@port
  4984  000F3E  6E0D               	movwf	PWMC@port,c
  4985  000F40  0E00               	movlw	high intrpt@port
  4986  000F42  6E0E               	movwf	PWMC@port+1,c
  4987  000F44  EC57  F00B         	call	_PWMC	;wreg free
  4988                           
  4989                           ;main.c: 302: break;
  4990  000F48  D095               	goto	i2l173
  4991  000F4A                     i2l186:
  4992                           
  4993                           ;main.c: 304: LATC6 = ~LATC6;
  4994  000F4A  BC8B               	btfsc	3979,6,c	;volatile
  4995  000F4C  D002               	goto	i2u367_40
  4996  000F4E  8C8B               	bsf	3979,6,c	;volatile
  4997  000F50  D091               	goto	i2l173
  4998  000F52                     i2u367_40:
  4999  000F52  9C8B               	bcf	3979,6,c	;volatile
  5000                           
  5001                           ;main.c: 305: break;
  5002  000F54  D08F               	goto	i2l173
  5003  000F56                     i2l187:
  5004                           
  5005                           ;main.c: 307: LATC7 = 0;
  5006  000F56  9E8B               	bcf	3979,7,c	;volatile
  5007                           
  5008                           ;main.c: 308: LATC5 = 1;
  5009  000F58  8A8B               	bsf	3979,5,c	;volatile
  5010                           
  5011                           ;main.c: 309: _delay((unsigned long)((180)*(8000000/4000.0)));
  5012  000F5A  0E02               	movlw	2
  5013  000F5C  6E4F               	movwf	(??_intrpt+1)& (0+255),c
  5014  000F5E  0ED4               	movlw	212
  5015  000F60  6E4E               	movwf	??_intrpt& (0+255),c
  5016  000F62  0E85               	movlw	133
  5017  000F64                     i2u379_47:
  5018  000F64  2EE8               	decfsz	wreg,f,c
  5019  000F66  D7FE               	bra	i2u379_47
  5020  000F68  2E4E               	decfsz	??_intrpt& (0+255),f,c
  5021  000F6A  D7FC               	bra	i2u379_47
  5022  000F6C  2E4F               	decfsz	(??_intrpt+1)& (0+255),f,c
  5023  000F6E  D7FA               	bra	i2u379_47
  5024  000F70  F000               	nop	
  5025                           
  5026                           ;main.c: 310: LATC5 = 0;
  5027  000F72  9A8B               	bcf	3979,5,c	;volatile
  5028                           
  5029                           ;main.c: 311: break;
  5030  000F74  D07F               	goto	i2l173
  5031  000F76                     i2l188:
  5032                           
  5033                           ;main.c: 313: LATC5 = 0;
  5034  000F76  9A8B               	bcf	3979,5,c	;volatile
  5035                           
  5036                           ;main.c: 314: LATC7 = 1;
  5037  000F78  8E8B               	bsf	3979,7,c	;volatile
  5038                           
  5039                           ;main.c: 315: _delay((unsigned long)((100)*(8000000/4000.0)));
  5040  000F7A  0E02               	movlw	2
  5041  000F7C  6E4F               	movwf	(??_intrpt+1)& (0+255),c
  5042  000F7E  0E04               	movlw	4
  5043  000F80  6E4E               	movwf	??_intrpt& (0+255),c
  5044  000F82  0EBA               	movlw	186
  5045  000F84                     i2u380_47:
  5046  000F84  2EE8               	decfsz	wreg,f,c
  5047  000F86  D7FE               	bra	i2u380_47
  5048  000F88  2E4E               	decfsz	??_intrpt& (0+255),f,c
  5049  000F8A  D7FC               	bra	i2u380_47
  5050  000F8C  2E4F               	decfsz	(??_intrpt+1)& (0+255),f,c
  5051  000F8E  D7FA               	bra	i2u380_47
  5052  000F90  D000               	nop2	
  5053                           
  5054                           ;main.c: 316: LATC7 = 0;
  5055  000F92  9E8B               	bcf	3979,7,c	;volatile
  5056                           
  5057                           ;main.c: 317: break;
  5058  000F94  D06F               	goto	i2l173
  5059  000F96                     i2l4631:
  5060                           
  5061                           ;main.c: 319: port[0] = 1;
  5062  000F96  0E00               	movlw	0
  5063  000F98  6E60               	movwf	intrpt@port+1,c
  5064  000F9A  0E01               	movlw	1
  5065  000F9C  6E5F               	movwf	intrpt@port,c
  5066                           
  5067                           ;main.c: 320: lcdInst(0b11000000);
  5068  000F9E  0EC0               	movlw	192
  5069  000FA0  EC19  F014         	call	i2_lcdInst
  5070                           
  5071                           ;main.c: 321: PWMC(3000, 30, port);
  5072  000FA4  0E0B               	movlw	11
  5073  000FA6  6E0A               	movwf	PWMC@widthus+1,c
  5074  000FA8  0EB8               	movlw	184
  5075  000FAA  6E09               	movwf	PWMC@widthus,c
  5076  000FAC  0E00               	movlw	0
  5077  000FAE  6E0C               	movwf	PWMC@cycles+1,c
  5078  000FB0  0E1E               	movlw	30
  5079  000FB2  6E0B               	movwf	PWMC@cycles,c
  5080  000FB4  0E5F               	movlw	low intrpt@port
  5081  000FB6  6E0D               	movwf	PWMC@port,c
  5082  000FB8  0E00               	movlw	high intrpt@port
  5083  000FBA  6E0E               	movwf	PWMC@port+1,c
  5084  000FBC  EC57  F00B         	call	_PWMC	;wreg free
  5085                           
  5086                           ;main.c: 322: PWMC(400, 2, port);
  5087  000FC0  0E01               	movlw	1
  5088  000FC2  6E0A               	movwf	PWMC@widthus+1,c
  5089  000FC4  0E90               	movlw	144
  5090  000FC6  6E09               	movwf	PWMC@widthus,c
  5091  000FC8  0E00               	movlw	0
  5092  000FCA  6E0C               	movwf	PWMC@cycles+1,c
  5093  000FCC  0E02               	movlw	2
  5094  000FCE  6E0B               	movwf	PWMC@cycles,c
  5095  000FD0  0E5F               	movlw	low intrpt@port
  5096  000FD2  6E0D               	movwf	PWMC@port,c
  5097  000FD4  0E00               	movlw	high intrpt@port
  5098  000FD6  6E0E               	movwf	PWMC@port+1,c
  5099  000FD8  EC57  F00B         	call	_PWMC	;wreg free
  5100                           
  5101                           ;main.c: 323: break;
  5102  000FDC  D04B               	goto	i2l173
  5103  000FDE                     i2l4639:
  5104                           
  5105                           ;main.c: 327: mode = 1;
  5106  000FDE  0E00               	movlw	0
  5107  000FE0  6E75               	movwf	_mode+1,c
  5108  000FE2  0E01               	movlw	1
  5109  000FE4  6E74               	movwf	_mode,c
  5110                           
  5111                           ;main.c: 328: (INTCONbits.GIE = 1);
  5112  000FE6  8EF2               	bsf	intcon,7,c	;volatile
  5113                           
  5114                           ;main.c: 329: mainloop();
  5115  000FE8  ECA2  F005         	call	_mainloop	;wreg free
  5116  000FEC  D012               	goto	i2l4659
  5117  000FEE                     i2l4647:
  5118                           
  5119                           ;main.c: 333: mode = 2;
  5120  000FEE  0E00               	movlw	0
  5121  000FF0  6E75               	movwf	_mode+1,c
  5122  000FF2  0E02               	movlw	2
  5123  000FF4  6E74               	movwf	_mode,c
  5124                           
  5125                           ;main.c: 334: PermLog();
  5126  000FF6  EC48  F00C         	call	_PermLog	;wreg free
  5127                           
  5128                           ;main.c: 335: mode = 0;
  5129  000FFA  0E00               	movlw	0
  5130  000FFC  6E75               	movwf	_mode+1,c
  5131  000FFE  0E00               	movlw	0
  5132  001000  6E74               	movwf	_mode,c
  5133                           
  5134                           ;main.c: 336: break;
  5135  001002  D038               	goto	i2l173
  5136  001004                     i2l4653:
  5137                           
  5138                           ;main.c: 338: mode = 1;
  5139  001004  0E00               	movlw	0
  5140  001006  6E75               	movwf	_mode+1,c
  5141  001008  0E01               	movlw	1
  5142  00100A  6E74               	movwf	_mode,c
  5143                           
  5144                           ;main.c: 339: (INTCONbits.GIE = 1);
  5145  00100C  8EF2               	bsf	intcon,7,c	;volatile
  5146                           
  5147                           ;main.c: 340: simulate();
  5148  00100E  EC0B  F004         	call	_simulate	;wreg free
  5149  001012                     i2l4659:
  5150                           
  5151                           ;main.c: 341: (INTCONbits.GIE = 0);
  5152  001012  9EF2               	bcf	intcon,7,c	;volatile
  5153                           
  5154                           ;main.c: 343: }
  5155                           
  5156                           ;main.c: 342: break;
  5157  001014  D02F               	goto	i2l173
  5158  001016                     i2l4663:
  5159  001016  505E               	movf	intrpt@keypress,w,c
  5160                           
  5161                           ; Switch size 1, requested type "space"
  5162                           ; Number of cases is 11, Range of values is 0 to 15
  5163                           ; switch strategies available:
  5164                           ; Name         Instructions Cycles
  5165                           ; simple_byte           34    18 (average)
  5166                           ;	Chosen strategy is simple_byte
  5167  001018  0A00               	xorlw	0	; case 0
  5168  00101A  B4D8               	btfsc	status,2,c
  5169  00101C  D751               	goto	i2l4609
  5170  00101E  0A03               	xorlw	3	; case 3
  5171  001020  B4D8               	btfsc	status,2,c
  5172  001022  D751               	goto	i2l4611
  5173  001024  0A04               	xorlw	4	; case 7
  5174  001026  B4D8               	btfsc	status,2,c
  5175  001028  D76F               	goto	i2l4617
  5176  00102A  0A0F               	xorlw	15	; case 8
  5177  00102C  B4D8               	btfsc	status,2,c
  5178  00102E  D78D               	goto	i2l186
  5179  001030  0A01               	xorlw	1	; case 9
  5180  001032  B4D8               	btfsc	status,2,c
  5181  001034  D790               	goto	i2l187
  5182  001036  0A03               	xorlw	3	; case 10
  5183  001038  B4D8               	btfsc	status,2,c
  5184  00103A  D79D               	goto	i2l188
  5185  00103C  0A01               	xorlw	1	; case 11
  5186  00103E  B4D8               	btfsc	status,2,c
  5187  001040  D7AA               	goto	i2l4631
  5188  001042  0A07               	xorlw	7	; case 12
  5189  001044  B4D8               	btfsc	status,2,c
  5190  001046  D03D               	goto	i2l191
  5191  001048  0A01               	xorlw	1	; case 13
  5192  00104A  B4D8               	btfsc	status,2,c
  5193  00104C  D7C8               	goto	i2l4639
  5194  00104E  0A03               	xorlw	3	; case 14
  5195  001050  B4D8               	btfsc	status,2,c
  5196  001052  D7CD               	goto	i2l4647
  5197  001054  0A01               	xorlw	1	; case 15
  5198  001056  B4D8               	btfsc	status,2,c
  5199  001058  D7D5               	goto	i2l4653
  5200                           
  5201                           ;main.c: 347: }
  5202                           
  5203                           ;main.c: 346: break;
  5204                           
  5205                           ;main.c: 345: default:
  5206                           
  5207                           ;main.c: 344: break;
  5208  00105A  D00C               	goto	i2l173
  5209  00105C                     i2l4667:
  5210  00105C  C074  F04E         	movff	_mode,??_intrpt
  5211  001060  C075  F04F         	movff	_mode+1,??_intrpt+1
  5212                           
  5213                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5214                           ; Switch size 1, requested type "space"
  5215                           ; Number of cases is 1, Range of values is 0 to 0
  5216                           ; switch strategies available:
  5217                           ; Name         Instructions Cycles
  5218                           ; simple_byte            4     3 (average)
  5219                           ;	Chosen strategy is simple_byte
  5220  001064  504F               	movf	??_intrpt+1,w,c
  5221  001066  0A00               	xorlw	0	; case 0
  5222  001068  A4D8               	btfss	status,2,c
  5223  00106A  D004               	goto	i2l173
  5224                           
  5225                           ; Switch size 1, requested type "space"
  5226                           ; Number of cases is 1, Range of values is 0 to 0
  5227                           ; switch strategies available:
  5228                           ; Name         Instructions Cycles
  5229                           ; simple_byte            4     3 (average)
  5230                           ;	Chosen strategy is simple_byte
  5231  00106C  504E               	movf	??_intrpt,w,c
  5232  00106E  0A00               	xorlw	0	; case 0
  5233  001070  B4D8               	btfsc	status,2,c
  5234  001072  D7D1               	goto	i2l4663
  5235  001074                     i2l173:
  5236                           
  5237                           ;main.c: 348: }
  5238                           ;main.c: 349: if (INT2IF) {
  5239  001074  A2F0               	btfss	intcon3,1,c	;volatile
  5240  001076  D024               	goto	i2l197
  5241                           
  5242                           ;main.c: 350: INT2IF = 0;
  5243  001078  92F0               	bcf	intcon3,1,c	;volatile
  5244                           
  5245                           ;main.c: 351: _delay((unsigned long)((100)*(8000000/4000.0)));
  5246  00107A  0E02               	movlw	2
  5247  00107C  6E4F               	movwf	(??_intrpt+1)& (0+255),c
  5248  00107E  0E04               	movlw	4
  5249  001080  6E4E               	movwf	??_intrpt& (0+255),c
  5250  001082  0EBA               	movlw	186
  5251  001084                     i2u381_47:
  5252  001084  2EE8               	decfsz	wreg,f,c
  5253  001086  D7FE               	bra	i2u381_47
  5254  001088  2E4E               	decfsz	??_intrpt& (0+255),f,c
  5255  00108A  D7FC               	bra	i2u381_47
  5256  00108C  2E4F               	decfsz	(??_intrpt+1)& (0+255),f,c
  5257  00108E  D7FA               	bra	i2u381_47
  5258  001090  D000               	nop2	
  5259                           
  5260                           ;main.c: 352: if (!PORTBbits.RB2) {
  5261  001092  A481               	btfss	3969,2,c	;volatile
  5262  001094  D009               	goto	i2l4683
  5263  001096  D014               	goto	i2l197
  5264  001098                     i2l4677:
  5265                           
  5266                           ;main.c: 355: mode = 3;
  5267  001098  0E00               	movlw	0
  5268  00109A  6E75               	movwf	_mode+1,c
  5269  00109C  0E03               	movlw	3
  5270  00109E  6E74               	movwf	_mode,c
  5271                           
  5272                           ;main.c: 356: stopMoving(1);
  5273  0010A0  0E01               	movlw	1
  5274  0010A2  EC7C  F012         	call	_stopMoving
  5275                           
  5276                           ;main.c: 360: }
  5277                           
  5278                           ;main.c: 359: break;
  5279                           
  5280                           ;main.c: 358: default:
  5281                           
  5282                           ;main.c: 357: break;
  5283  0010A6  D00C               	goto	i2l197
  5284  0010A8                     i2l4683:
  5285  0010A8  C074  F04E         	movff	_mode,??_intrpt
  5286  0010AC  C075  F04F         	movff	_mode+1,??_intrpt+1
  5287                           
  5288                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5289                           ; Switch size 1, requested type "space"
  5290                           ; Number of cases is 1, Range of values is 0 to 0
  5291                           ; switch strategies available:
  5292                           ; Name         Instructions Cycles
  5293                           ; simple_byte            4     3 (average)
  5294                           ;	Chosen strategy is simple_byte
  5295  0010B0  504F               	movf	??_intrpt+1,w,c
  5296  0010B2  0A00               	xorlw	0	; case 0
  5297  0010B4  A4D8               	btfss	status,2,c
  5298  0010B6  D004               	goto	i2l197
  5299                           
  5300                           ; Switch size 1, requested type "space"
  5301                           ; Number of cases is 1, Range of values is 1 to 1
  5302                           ; switch strategies available:
  5303                           ; Name         Instructions Cycles
  5304                           ; simple_byte            4     3 (average)
  5305                           ;	Chosen strategy is simple_byte
  5306  0010B8  504E               	movf	??_intrpt,w,c
  5307  0010BA  0A01               	xorlw	1	; case 1
  5308  0010BC  B4D8               	btfsc	status,2,c
  5309  0010BE  D7EC               	goto	i2l4677
  5310  0010C0                     i2l197:
  5311                           
  5312                           ;main.c: 361: }
  5313                           ;main.c: 362: }
  5314                           ;main.c: 363: (INTCONbits.GIE = 1);
  5315  0010C0  8EF2               	bsf	intcon,7,c	;volatile
  5316  0010C2                     i2l191:
  5317  0010C2  C05D  FFF5         	movff	??_intrpt+15,tablat
  5318  0010C6  C05C  FFF8         	movff	??_intrpt+14,tblptru
  5319  0010CA  C05B  FFF7         	movff	??_intrpt+13,tblptrh
  5320  0010CE  C05A  FFF6         	movff	??_intrpt+12,tblptrl
  5321  0010D2  C059  FFF4         	movff	??_intrpt+11,prodh
  5322  0010D6  C058  FFF3         	movff	??_intrpt+10,prodl
  5323  0010DA  C057  FFDA         	movff	??_intrpt+9,fsr2h
  5324  0010DE  C056  FFD9         	movff	??_intrpt+8,fsr2l
  5325  0010E2  C055  FFE2         	movff	??_intrpt+7,fsr1h
  5326  0010E6  C054  FFE1         	movff	??_intrpt+6,fsr1l
  5327  0010EA  C053  FFEA         	movff	??_intrpt+5,fsr0h
  5328  0010EE  C052  FFE9         	movff	??_intrpt+4,fsr0l
  5329  0010F2  C051  FFFB         	movff	??_intrpt+3,pclatu
  5330  0010F6  C050  FFFA         	movff	??_intrpt+2,pclath
  5331  0010FA  927D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5332  0010FC  0011               	retfie		f
  5333  0010FE                     __end_of_intrpt:
  5334                           	opt stack 0
  5335                           pclatu	equ	0xFFB
  5336                           pclath	equ	0xFFA
  5337                           tblptru	equ	0xFF8
  5338                           tblptrh	equ	0xFF7
  5339                           tblptrl	equ	0xFF6
  5340                           tablat	equ	0xFF5
  5341                           prodh	equ	0xFF4
  5342                           prodl	equ	0xFF3
  5343                           intcon	equ	0xFF2
  5344                           intcon2	equ	0xFF1
  5345                           intcon3	equ	0xFF0
  5346                           postinc0	equ	0xFEE
  5347                           fsr0h	equ	0xFEA
  5348                           fsr0l	equ	0xFE9
  5349                           wreg	equ	0xFE8
  5350                           postdec1	equ	0xFE5
  5351                           plusw1	equ	0xFE3
  5352                           fsr1h	equ	0xFE2
  5353                           fsr1l	equ	0xFE1
  5354                           indf2	equ	0xFDF
  5355                           postinc2	equ	0xFDE
  5356                           postdec2	equ	0xFDD
  5357                           plusw2	equ	0xFDB
  5358                           fsr2h	equ	0xFDA
  5359                           fsr2l	equ	0xFD9
  5360                           status	equ	0xFD8
  5361                           
  5362 ;; *************** function _testServo *****************
  5363 ;; Defined at:
  5364 ;;		line 264 in file "main.c"
  5365 ;; Parameters:    Size  Location     Type
  5366 ;;		None
  5367 ;; Auto vars:     Size  Location     Type
  5368 ;;		None
  5369 ;; Return value:  Size  Location     Type
  5370 ;;                  1    wreg      void 
  5371 ;; Registers used:
  5372 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5373 ;; Tracked objects:
  5374 ;;		On entry : 0/0
  5375 ;;		On exit  : 0/0
  5376 ;;		Unchanged: 0/0
  5377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5380 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5381 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5382 ;;Total ram usage:        2 bytes
  5383 ;; Hardware stack levels used:    1
  5384 ;; Hardware stack levels required when called:    3
  5385 ;; This function calls:
  5386 ;;		_AASpin
  5387 ;;		_CSpin
  5388 ;;		_V9Spin
  5389 ;; This function is called by:
  5390 ;;		_intrpt
  5391 ;; This function uses a non-reentrant model
  5392 ;;
  5393                           
  5394                           	psect	text23
  5395  0025CC                     __ptext23:
  5396                           	opt stack 0
  5397  0025CC                     _testServo:
  5398                           	opt stack 22
  5399  0025CC                     
  5400                           ;main.c: 266: V9Spin(1);
  5401  0025CC  0E01               	movlw	1
  5402  0025CE  EC14  F00D         	call	_V9Spin
  5403                           
  5404                           ;main.c: 267: AASpin(1);
  5405  0025D2  0E01               	movlw	1
  5406  0025D4  ECC8  F00D         	call	_AASpin
  5407                           
  5408                           ;main.c: 268: CSpin(1);
  5409  0025D8  0E01               	movlw	1
  5410  0025DA  EC6E  F00D         	call	_CSpin
  5411                           
  5412                           ;main.c: 269: _delay((unsigned long)((200)*(8000000/4000.0)));
  5413  0025DE  0E03               	movlw	3
  5414  0025E0  6E1F               	movwf	(??_testServo+1)& (0+255),c
  5415  0025E2  0E08               	movlw	8
  5416  0025E4  6E1E               	movwf	??_testServo& (0+255),c
  5417  0025E6  0E77               	movlw	119
  5418  0025E8                     i2u382_47:
  5419  0025E8  2EE8               	decfsz	wreg,f,c
  5420  0025EA  D7FE               	bra	i2u382_47
  5421  0025EC  2E1E               	decfsz	??_testServo& (0+255),f,c
  5422  0025EE  D7FC               	bra	i2u382_47
  5423  0025F0  2E1F               	decfsz	(??_testServo+1)& (0+255),f,c
  5424  0025F2  D7FA               	bra	i2u382_47
  5425  0025F4  F000               	nop	
  5426  0025F6  D7EA               	goto	i2l4565
  5427  0025F8                     __end_of_testServo:
  5428                           	opt stack 0
  5429                           pclatu	equ	0xFFB
  5430                           pclath	equ	0xFFA
  5431                           tblptru	equ	0xFF8
  5432                           tblptrh	equ	0xFF7
  5433                           tblptrl	equ	0xFF6
  5434                           tablat	equ	0xFF5
  5435                           prodh	equ	0xFF4
  5436                           prodl	equ	0xFF3
  5437                           intcon	equ	0xFF2
  5438                           intcon2	equ	0xFF1
  5439                           intcon3	equ	0xFF0
  5440                           postinc0	equ	0xFEE
  5441                           fsr0h	equ	0xFEA
  5442                           fsr0l	equ	0xFE9
  5443                           wreg	equ	0xFE8
  5444                           postdec1	equ	0xFE5
  5445                           plusw1	equ	0xFE3
  5446                           fsr1h	equ	0xFE2
  5447                           fsr1l	equ	0xFE1
  5448                           indf2	equ	0xFDF
  5449                           postinc2	equ	0xFDE
  5450                           postdec2	equ	0xFDD
  5451                           plusw2	equ	0xFDB
  5452                           fsr2h	equ	0xFDA
  5453                           fsr2l	equ	0xFD9
  5454                           status	equ	0xFD8
  5455                           
  5456 ;; *************** function _simulate *****************
  5457 ;; Defined at:
  5458 ;;		line 155 in file "main.c"
  5459 ;; Parameters:    Size  Location     Type
  5460 ;;		None
  5461 ;; Auto vars:     Size  Location     Type
  5462 ;;  sorted          4   67[COMRAM] unsigned char [4]
  5463 ;;  start           4   60[COMRAM] unsigned int [2]
  5464 ;;  now             4   56[COMRAM] unsigned int [2]
  5465 ;;  AA              2   75[COMRAM] int 
  5466 ;;  V9              2   73[COMRAM] int 
  5467 ;;  C               2   71[COMRAM] int 
  5468 ;;  period          2   65[COMRAM] unsigned int 
  5469 ;;  notyet          1   64[COMRAM] unsigned char 
  5470 ;;  shakeCW         1   53[COMRAM] unsigned char 
  5471 ;; Return value:  Size  Location     Type
  5472 ;;                  1    wreg      void 
  5473 ;; Registers used:
  5474 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5475 ;; Tracked objects:
  5476 ;;		On entry : 0/0
  5477 ;;		On exit  : 0/0
  5478 ;;		Unchanged: 0/0
  5479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5481 ;;      Locals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5482 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5483 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5484 ;;Total ram usage:       26 bytes
  5485 ;; Hardware stack levels used:    1
  5486 ;; Hardware stack levels required when called:    5
  5487 ;; This function calls:
  5488 ;;		_AASpin
  5489 ;;		_CSpin
  5490 ;;		_HexDecToDec2
  5491 ;;		_V9Spin
  5492 ;;		_WriteRun
  5493 ;;		_check9
  5494 ;;		_checkAA
  5495 ;;		_checkC
  5496 ;;		_closeGate
  5497 ;;		_openGate
  5498 ;;		_showInfo
  5499 ;;		_stopMoving
  5500 ;;		i2___wmul
  5501 ;;		i2_getTime
  5502 ;;		i2_lcdInst
  5503 ;;		i2_printf
  5504 ;; This function is called by:
  5505 ;;		_intrpt
  5506 ;; This function uses a non-reentrant model
  5507 ;;
  5508                           
  5509                           	psect	text24
  5510  000816                     __ptext24:
  5511                           	opt stack 0
  5512  000816                     _simulate:
  5513                           	opt stack 20
  5514                           
  5515                           ;main.c: 156: unsigned int now[] = {0, 0}, start[] = {0, 0};
  5516                           
  5517                           ;incstack = 0
  5518  000816  C065  F039         	movff	simulate@F3110,simulate@now
  5519  00081A  C066  F03A         	movff	simulate@F3110+1,simulate@now+1
  5520  00081E  C067  F03B         	movff	simulate@F3110+2,simulate@now+2
  5521  000822  C068  F03C         	movff	simulate@F3110+3,simulate@now+3
  5522  000826  C0B8  F03D         	movff	simulate@F3112,simulate@start
  5523  00082A  C0B9  F03E         	movff	simulate@F3112+1,simulate@start+1
  5524  00082E  C0BA  F03F         	movff	simulate@F3112+2,simulate@start+2
  5525  000832  C0BB  F040         	movff	simulate@F3112+3,simulate@start+3
  5526                           
  5527                           ;main.c: 157: unsigned char sorted[] = {0, 0, 0, 0};
  5528  000836  C0B4  F044         	movff	simulate@F3114,simulate@sorted
  5529  00083A  C0B5  F045         	movff	simulate@F3114+1,simulate@sorted+1
  5530  00083E  C0B6  F046         	movff	simulate@F3114+2,simulate@sorted+2
  5531  000842  C0B7  F047         	movff	simulate@F3114+3,simulate@sorted+3
  5532                           
  5533                           ;main.c: 158: unsigned int period = 0;
  5534  000846  0E00               	movlw	0
  5535  000848  6E43               	movwf	simulate@period+1,c
  5536  00084A  0E00               	movlw	0
  5537  00084C  6E42               	movwf	simulate@period,c
  5538                           
  5539                           ;main.c: 159: unsigned char shakeCW = 0;
  5540  00084E  0E00               	movlw	0
  5541  000850  6E36               	movwf	simulate@shakeCW,c
  5542                           
  5543                           ;main.c: 160: int AA, C, V9;
  5544                           ;main.c: 162: lcdInst(0b10000000);
  5545  000852  0E80               	movlw	128
  5546  000854  EC19  F014         	call	i2_lcdInst
  5547                           
  5548                           ;main.c: 163: printf("Sorting...          ");
  5549  000858  0E3C               	movlw	low STR_1
  5550  00085A  6E0D               	movwf	i2printf@f,c
  5551  00085C  0EFF               	movlw	high STR_1
  5552  00085E  6E0E               	movwf	i2printf@f+1,c
  5553  000860  EC3E  F002         	call	i2_printf	;wreg free
  5554                           
  5555                           ;main.c: 164: start[0] = time[0];
  5556  000864  C076  F03D         	movff	_time,simulate@start
  5557  000868  6A3E               	clrf	simulate@start+1,c
  5558                           
  5559                           ;main.c: 165: start[1] = time[1];
  5560  00086A  C077  F03F         	movff	_time+1,simulate@start+2
  5561  00086E  6A40               	clrf	simulate@start+3,c
  5562                           
  5563                           ;main.c: 167: LATC6 = 1;
  5564  000870  8C8B               	bsf	3979,6,c	;volatile
  5565                           
  5566                           ;main.c: 168: INT2IE = 1;
  5567  000872  88F0               	bsf	intcon3,4,c	;volatile
  5568                           
  5569                           ;main.c: 169: INT2IF = 0;
  5570  000874  92F0               	bcf	intcon3,1,c	;volatile
  5571                           
  5572                           ;main.c: 170: _delay((unsigned long)((20000)*(8000000/4000.0)));
  5573  000876  0ECB               	movlw	203
  5574  000878  6E35               	movwf	(??_simulate+1)& (0+255),c
  5575  00087A  0EEC               	movlw	236
  5576  00087C  6E34               	movwf	??_simulate& (0+255),c
  5577  00087E  0E84               	movlw	132
  5578  000880                     i2u383_47:
  5579  000880  2EE8               	decfsz	wreg,f,c
  5580  000882  D7FE               	bra	i2u383_47
  5581  000884  2E34               	decfsz	??_simulate& (0+255),f,c
  5582  000886  D7FC               	bra	i2u383_47
  5583  000888  2E35               	decfsz	(??_simulate+1)& (0+255),f,c
  5584  00088A  D7FA               	bra	i2u383_47
  5585  00088C  D000               	nop2	
  5586                           
  5587                           ;main.c: 171: openGate();
  5588  00088E  EC84  F013         	call	_openGate	;wreg free
  5589                           
  5590                           ;main.c: 172: char notyet = 0;
  5591  000892  0E00               	movlw	0
  5592  000894  6E41               	movwf	simulate@notyet,c
  5593                           
  5594                           ;main.c: 173: while (mode == 1) {
  5595  000896  D11E               	goto	i2l4535
  5596  000898                     i2l141:
  5597                           
  5598                           ;main.c: 175: LATC6 = 0;
  5599  000898  9C8B               	bcf	3979,6,c	;volatile
  5600                           
  5601                           ;main.c: 176: lcdInst(0b10000000);
  5602  00089A  0E80               	movlw	128
  5603  00089C  EC19  F014         	call	i2_lcdInst
  5604                           
  5605                           ;main.c: 177: V9 = check9(sorted);
  5606  0008A0  0E44               	movlw	low simulate@sorted
  5607  0008A2  6E2E               	movwf	check9@sorted,c
  5608  0008A4  0E00               	movlw	high simulate@sorted
  5609  0008A6  6E2F               	movwf	check9@sorted+1,c
  5610  0008A8  EC3F  F010         	call	_check9	;wreg free
  5611  0008AC  C02E  F04A         	movff	?_check9,simulate@V9
  5612  0008B0  C02F  F04B         	movff	?_check9+1,simulate@V9+1
  5613                           
  5614                           ;main.c: 178: C = checkC(sorted);
  5615  0008B4  0E44               	movlw	low simulate@sorted
  5616  0008B6  6E2E               	movwf	checkC@sorted,c
  5617  0008B8  0E00               	movlw	high simulate@sorted
  5618  0008BA  6E2F               	movwf	checkC@sorted+1,c
  5619  0008BC  EC04  F010         	call	_checkC	;wreg free
  5620  0008C0  C02E  F048         	movff	?_checkC,simulate@C
  5621  0008C4  C02F  F049         	movff	?_checkC+1,simulate@C+1
  5622                           
  5623                           ;main.c: 179: AA = checkAA(sorted);
  5624  0008C8  0E44               	movlw	low simulate@sorted
  5625  0008CA  6E2E               	movwf	checkAA@sorted,c
  5626  0008CC  0E00               	movlw	high simulate@sorted
  5627  0008CE  6E2F               	movwf	checkAA@sorted+1,c
  5628  0008D0  EC7A  F010         	call	_checkAA	;wreg free
  5629  0008D4  C02E  F04C         	movff	?_checkAA,simulate@AA
  5630  0008D8  C02F  F04D         	movff	?_checkAA+1,simulate@AA+1
  5631                           
  5632                           ;main.c: 180: printf("    ");
  5633  0008DC  0EDA               	movlw	low (STR_41+11)
  5634  0008DE  6E0D               	movwf	i2printf@f,c
  5635  0008E0  0EFF               	movlw	high (STR_41+11)
  5636  0008E2  6E0E               	movwf	i2printf@f+1,c
  5637  0008E4  EC3E  F002         	call	i2_printf	;wreg free
  5638                           
  5639                           ;main.c: 181: if (V9 != -1 || C != -1 || AA != -1) {
  5640  0008E8  284A               	incf	simulate@V9,w,c
  5641  0008EA  E10D               	bnz	i2l4453
  5642  0008EC  284B               	incf	simulate@V9+1,w,c
  5643  0008EE  A4D8               	btfss	status,2,c
  5644  0008F0  D00A               	goto	i2l4453
  5645  0008F2  2848               	incf	simulate@C,w,c
  5646  0008F4  E108               	bnz	i2l4453
  5647  0008F6  2849               	incf	simulate@C+1,w,c
  5648  0008F8  A4D8               	btfss	status,2,c
  5649  0008FA  D005               	goto	i2l4453
  5650  0008FC  284C               	incf	simulate@AA,w,c
  5651  0008FE  E103               	bnz	i2l4453
  5652  000900  284D               	incf	simulate@AA+1,w,c
  5653  000902  B4D8               	btfsc	status,2,c
  5654  000904  D002               	goto	i2l4455
  5655  000906                     i2l4453:
  5656                           
  5657                           ;main.c: 182: notyet = 0;
  5658  000906  0E00               	movlw	0
  5659  000908  6E41               	movwf	simulate@notyet,c
  5660  00090A                     i2l4455:
  5661                           
  5662                           ;main.c: 183: }
  5663                           ;main.c: 186: lcdInst(0b11000000);
  5664  00090A  0EC0               	movlw	192
  5665  00090C  EC19  F014         	call	i2_lcdInst
  5666                           
  5667                           ;main.c: 187: printf("9V:");
  5668  000910  0EF1               	movlw	low STR_3
  5669  000912  6E0D               	movwf	i2printf@f,c
  5670  000914  0EFF               	movlw	high STR_3
  5671  000916  6E0E               	movwf	i2printf@f+1,c
  5672  000918  EC3E  F002         	call	i2_printf	;wreg free
  5673                           
  5674                           ;main.c: 188: if (!V9) {
  5675  00091C  504A               	movf	simulate@V9,w,c
  5676  00091E  104B               	iorwf	simulate@V9+1,w,c
  5677  000920  A4D8               	btfss	status,2,c
  5678  000922  D007               	goto	i2l4465
  5679                           
  5680                           ;main.c: 189: printf(" +");
  5681  000924  0EF5               	movlw	low STR_4
  5682  000926  6E0D               	movwf	i2printf@f,c
  5683  000928  0EFF               	movlw	high STR_4
  5684  00092A  6E0E               	movwf	i2printf@f+1,c
  5685  00092C  EC3E  F002         	call	i2_printf	;wreg free
  5686  000930  D00A               	goto	i2l4469
  5687  000932                     i2l4465:
  5688  000932  044A               	decf	simulate@V9,w,c
  5689  000934  104B               	iorwf	simulate@V9+1,w,c
  5690  000936  A4D8               	btfss	status,2,c
  5691  000938  D009               	goto	i2l4471
  5692                           
  5693                           ;main.c: 193: printf(" -");
  5694  00093A  0EF8               	movlw	low STR_5
  5695  00093C  6E0D               	movwf	i2printf@f,c
  5696  00093E  0EFF               	movlw	high STR_5
  5697  000940  6E0E               	movwf	i2printf@f+1,c
  5698  000942  EC3E  F002         	call	i2_printf	;wreg free
  5699  000946                     i2l4469:
  5700                           
  5701                           ;main.c: 194: AA = -1;
  5702  000946  684C               	setf	simulate@AA,c
  5703  000948  684D               	setf	simulate@AA+1,c
  5704                           
  5705                           ;main.c: 196: } else {
  5706  00094A  D006               	goto	i2l4473
  5707  00094C                     i2l4471:
  5708                           
  5709                           ;main.c: 197: printf(" 0");
  5710  00094C  0EFB               	movlw	low STR_6
  5711  00094E  6E0D               	movwf	i2printf@f,c
  5712  000950  0EFF               	movlw	high STR_6
  5713  000952  6E0E               	movwf	i2printf@f+1,c
  5714  000954  EC3E  F002         	call	i2_printf	;wreg free
  5715  000958                     i2l4473:
  5716                           
  5717                           ;main.c: 198: }
  5718                           ;main.c: 199: V9Spin(V9);
  5719  000958  504A               	movf	simulate@V9,w,c
  5720  00095A  EC14  F00D         	call	_V9Spin
  5721                           
  5722                           ;main.c: 201: printf(" C:");
  5723  00095E  0EED               	movlw	low STR_7
  5724  000960  6E0D               	movwf	i2printf@f,c
  5725  000962  0EFF               	movlw	high STR_7
  5726  000964  6E0E               	movwf	i2printf@f+1,c
  5727  000966  EC3E  F002         	call	i2_printf	;wreg free
  5728                           
  5729                           ;main.c: 203: if (!C) {
  5730  00096A  5048               	movf	simulate@C,w,c
  5731  00096C  1049               	iorwf	simulate@C+1,w,c
  5732  00096E  A4D8               	btfss	status,2,c
  5733  000970  D007               	goto	i2l4481
  5734                           
  5735                           ;main.c: 204: printf(" +");
  5736  000972  0EF5               	movlw	low STR_4
  5737  000974  6E0D               	movwf	i2printf@f,c
  5738  000976  0EFF               	movlw	high STR_4
  5739  000978  6E0E               	movwf	i2printf@f+1,c
  5740  00097A  EC3E  F002         	call	i2_printf	;wreg free
  5741                           
  5742                           ;main.c: 206: } else if (C == 1) {
  5743  00097E  D011               	goto	i2l4487
  5744  000980                     i2l4481:
  5745  000980  0448               	decf	simulate@C,w,c
  5746  000982  1049               	iorwf	simulate@C+1,w,c
  5747  000984  A4D8               	btfss	status,2,c
  5748  000986  D007               	goto	i2l4485
  5749                           
  5750                           ;main.c: 207: printf(" -");
  5751  000988  0EF8               	movlw	low STR_5
  5752  00098A  6E0D               	movwf	i2printf@f,c
  5753  00098C  0EFF               	movlw	high STR_5
  5754  00098E  6E0E               	movwf	i2printf@f+1,c
  5755  000990  EC3E  F002         	call	i2_printf	;wreg free
  5756                           
  5757                           ;main.c: 209: } else {
  5758  000994  D006               	goto	i2l4487
  5759  000996                     i2l4485:
  5760                           
  5761                           ;main.c: 210: printf(" 0");
  5762  000996  0EFB               	movlw	low STR_6
  5763  000998  6E0D               	movwf	i2printf@f,c
  5764  00099A  0EFF               	movlw	high STR_6
  5765  00099C  6E0E               	movwf	i2printf@f+1,c
  5766  00099E  EC3E  F002         	call	i2_printf	;wreg free
  5767  0009A2                     i2l4487:
  5768                           
  5769                           ;main.c: 211: }
  5770                           ;main.c: 212: CSpin(C);
  5771  0009A2  5048               	movf	simulate@C,w,c
  5772  0009A4  EC6E  F00D         	call	_CSpin
  5773                           
  5774                           ;main.c: 214: printf(" AA:");
  5775  0009A8  0EE4               	movlw	low STR_11
  5776  0009AA  6E0D               	movwf	i2printf@f,c
  5777  0009AC  0EFF               	movlw	high STR_11
  5778  0009AE  6E0E               	movwf	i2printf@f+1,c
  5779  0009B0  EC3E  F002         	call	i2_printf	;wreg free
  5780                           
  5781                           ;main.c: 216: if (!AA) {
  5782  0009B4  504C               	movf	simulate@AA,w,c
  5783  0009B6  104D               	iorwf	simulate@AA+1,w,c
  5784  0009B8  A4D8               	btfss	status,2,c
  5785  0009BA  D007               	goto	i2l4495
  5786                           
  5787                           ;main.c: 217: printf(" -");
  5788  0009BC  0EF8               	movlw	low STR_5
  5789  0009BE  6E0D               	movwf	i2printf@f,c
  5790  0009C0  0EFF               	movlw	high STR_5
  5791  0009C2  6E0E               	movwf	i2printf@f+1,c
  5792  0009C4  EC3E  F002         	call	i2_printf	;wreg free
  5793                           
  5794                           ;main.c: 219: } else if (AA == 1) {
  5795  0009C8  D011               	goto	i2l4501
  5796  0009CA                     i2l4495:
  5797  0009CA  044C               	decf	simulate@AA,w,c
  5798  0009CC  104D               	iorwf	simulate@AA+1,w,c
  5799  0009CE  A4D8               	btfss	status,2,c
  5800  0009D0  D007               	goto	i2l4499
  5801                           
  5802                           ;main.c: 220: printf(" +");
  5803  0009D2  0EF5               	movlw	low STR_4
  5804  0009D4  6E0D               	movwf	i2printf@f,c
  5805  0009D6  0EFF               	movlw	high STR_4
  5806  0009D8  6E0E               	movwf	i2printf@f+1,c
  5807  0009DA  EC3E  F002         	call	i2_printf	;wreg free
  5808                           
  5809                           ;main.c: 222: } else {
  5810  0009DE  D006               	goto	i2l4501
  5811  0009E0                     i2l4499:
  5812                           
  5813                           ;main.c: 223: printf(" 0");
  5814  0009E0  0EFB               	movlw	low STR_6
  5815  0009E2  6E0D               	movwf	i2printf@f,c
  5816  0009E4  0EFF               	movlw	high STR_6
  5817  0009E6  6E0E               	movwf	i2printf@f+1,c
  5818  0009E8  EC3E  F002         	call	i2_printf	;wreg free
  5819  0009EC                     i2l4501:
  5820                           
  5821                           ;main.c: 224: }
  5822                           ;main.c: 225: AASpin(AA);
  5823  0009EC  504C               	movf	simulate@AA,w,c
  5824  0009EE  ECC8  F00D         	call	_AASpin
  5825                           
  5826                           ;main.c: 226: LATC6 = 1;
  5827  0009F2  8C8B               	bsf	3979,6,c	;volatile
  5828                           
  5829                           ;main.c: 228: if (sorted[0] > 0 && sorted[1] > 0 && sorted[2] > 0 && sorted[3] > 0) {
  5830  0009F4  5044               	movf	simulate@sorted,w,c
  5831  0009F6  B4D8               	btfsc	status,2,c
  5832  0009F8  D00D               	goto	i2l4515
  5833  0009FA  5045               	movf	simulate@sorted+1,w,c
  5834  0009FC  B4D8               	btfsc	status,2,c
  5835  0009FE  D00A               	goto	i2l4515
  5836  000A00  5046               	movf	simulate@sorted+2,w,c
  5837  000A02  B4D8               	btfsc	status,2,c
  5838  000A04  D007               	goto	i2l4515
  5839  000A06  5047               	movf	simulate@sorted+3,w,c
  5840  000A08  B4D8               	btfsc	status,2,c
  5841  000A0A  D004               	goto	i2l4515
  5842                           
  5843                           ;main.c: 229: mode = 2;
  5844  000A0C  0E00               	movlw	0
  5845  000A0E  6E75               	movwf	_mode+1,c
  5846  000A10  0E02               	movlw	2
  5847  000A12  6E74               	movwf	_mode,c
  5848  000A14                     i2l4515:
  5849                           
  5850                           ;main.c: 230: }
  5851                           ;main.c: 231: getTime(time);
  5852  000A14  0E76               	movlw	low _time
  5853  000A16  6E04               	movwf	i2getTime@time,c
  5854  000A18  0E00               	movlw	high _time
  5855  000A1A  6E05               	movwf	i2getTime@time+1,c
  5856  000A1C  ECC9  F00F         	call	i2_getTime	;wreg free
  5857                           
  5858                           ;main.c: 232: now[0] = time[0];
  5859  000A20  C076  F039         	movff	_time,simulate@now
  5860  000A24  6A3A               	clrf	simulate@now+1,c
  5861                           
  5862                           ;main.c: 233: now[1] = time[1];
  5863  000A26  C077  F03B         	movff	_time+1,simulate@now+2
  5864  000A2A  6A3C               	clrf	simulate@now+3,c
  5865                           
  5866                           ;main.c: 234: period = (HexDecToDec2(now[1]) - HexDecToDec2(start[1]))*60 + HexDecToDec2
      +                          (now[0]) - HexDecToDec2(start[0]);
  5867  000A2C  C03B  F007         	movff	simulate@now+2,HexDecToDec2@hex
  5868  000A30  C03C  F008         	movff	simulate@now+3,HexDecToDec2@hex+1
  5869  000A34  ECF1  F011         	call	_HexDecToDec2	;wreg free
  5870  000A38  C007  F034         	movff	?_HexDecToDec2,??_simulate
  5871  000A3C  C008  F035         	movff	?_HexDecToDec2+1,??_simulate+1
  5872  000A40  C03F  F007         	movff	simulate@start+2,HexDecToDec2@hex
  5873  000A44  C040  F008         	movff	simulate@start+3,HexDecToDec2@hex+1
  5874  000A48  ECF1  F011         	call	_HexDecToDec2	;wreg free
  5875  000A4C  1E07               	comf	?_HexDecToDec2,f,c
  5876  000A4E  1E08               	comf	?_HexDecToDec2+1,f,c
  5877  000A50  4A07               	infsnz	?_HexDecToDec2,f,c
  5878  000A52  2A08               	incf	?_HexDecToDec2+1,f,c
  5879  000A54  5007               	movf	?_HexDecToDec2,w,c
  5880  000A56  2434               	addwf	??_simulate,w,c
  5881  000A58  6E37               	movwf	_simulate$1540,c
  5882  000A5A  5008               	movf	?_HexDecToDec2+1,w,c
  5883  000A5C  2035               	addwfc	??_simulate+1,w,c
  5884  000A5E  6E38               	movwf	_simulate$1540+1,c
  5885                           
  5886                           ;main.c: 234: period = (HexDecToDec2(now[1]) - HexDecToDec2(start[1]))*60 + HexDecToDec2
      +                          (now[0]) - HexDecToDec2(start[0]);
  5887  000A60  C037  F001         	movff	_simulate$1540,i2___wmul@multiplier
  5888  000A64  C038  F002         	movff	_simulate$1540+1,i2___wmul@multiplier+1
  5889  000A68  0E00               	movlw	0
  5890  000A6A  6E04               	movwf	i2___wmul@multiplicand+1,c
  5891  000A6C  0E3C               	movlw	60
  5892  000A6E  6E03               	movwf	i2___wmul@multiplicand,c
  5893  000A70  EC60  F013         	call	i2___wmul	;wreg free
  5894  000A74  C001  F034         	movff	?i2___wmul,??_simulate
  5895  000A78  C002  F035         	movff	?i2___wmul+1,??_simulate+1
  5896  000A7C  C039  F007         	movff	simulate@now,HexDecToDec2@hex
  5897  000A80  C03A  F008         	movff	simulate@now+1,HexDecToDec2@hex+1
  5898  000A84  ECF1  F011         	call	_HexDecToDec2	;wreg free
  5899  000A88  5007               	movf	?_HexDecToDec2,w,c
  5900  000A8A  2634               	addwf	??_simulate,f,c
  5901  000A8C  5008               	movf	?_HexDecToDec2+1,w,c
  5902  000A8E  2235               	addwfc	??_simulate+1,f,c
  5903  000A90  C03D  F007         	movff	simulate@start,HexDecToDec2@hex
  5904  000A94  C03E  F008         	movff	simulate@start+1,HexDecToDec2@hex+1
  5905  000A98  ECF1  F011         	call	_HexDecToDec2	;wreg free
  5906  000A9C  1E07               	comf	?_HexDecToDec2,f,c
  5907  000A9E  1E08               	comf	?_HexDecToDec2+1,f,c
  5908  000AA0  4A07               	infsnz	?_HexDecToDec2,f,c
  5909  000AA2  2A08               	incf	?_HexDecToDec2+1,f,c
  5910  000AA4  5007               	movf	?_HexDecToDec2,w,c
  5911  000AA6  2434               	addwf	??_simulate,w,c
  5912  000AA8  6E42               	movwf	simulate@period,c
  5913  000AAA  5008               	movf	?_HexDecToDec2+1,w,c
  5914  000AAC  2035               	addwfc	??_simulate+1,w,c
  5915  000AAE  6E43               	movwf	simulate@period+1,c
  5916                           
  5917                           ;main.c: 235: if (period > 150) {
  5918  000AB0  5043               	movf	simulate@period+1,w,c
  5919  000AB2  E104               	bnz	i2u358_40
  5920  000AB4  0E97               	movlw	151
  5921  000AB6  5C42               	subwf	simulate@period,w,c
  5922  000AB8  A0D8               	btfss	status,0,c
  5923  000ABA  D004               	goto	i2l4529
  5924  000ABC                     i2u358_40:
  5925                           
  5926                           ;main.c: 236: mode = 2;
  5927  000ABC  0E00               	movlw	0
  5928  000ABE  6E75               	movwf	_mode+1,c
  5929  000AC0  0E02               	movlw	2
  5930  000AC2  6E74               	movwf	_mode,c
  5931  000AC4                     i2l4529:
  5932                           
  5933                           ;main.c: 237: }
  5934                           ;main.c: 238: notyet++;
  5935  000AC4  2A41               	incf	simulate@notyet,f,c
  5936                           
  5937                           ;main.c: 239: if (notyet > 200) {
  5938  000AC6  0EC8               	movlw	200
  5939  000AC8  6441               	cpfsgt	simulate@notyet,c
  5940  000ACA  D004               	goto	i2l4535
  5941                           
  5942                           ;main.c: 240: mode = 2;
  5943  000ACC  0E00               	movlw	0
  5944  000ACE  6E75               	movwf	_mode+1,c
  5945  000AD0  0E02               	movlw	2
  5946  000AD2  6E74               	movwf	_mode,c
  5947  000AD4                     i2l4535:
  5948  000AD4  0474               	decf	_mode,w,c
  5949  000AD6  1075               	iorwf	_mode+1,w,c
  5950  000AD8  B4D8               	btfsc	status,2,c
  5951  000ADA  D6DE               	goto	i2l141
  5952                           
  5953                           ;main.c: 241: }
  5954                           ;main.c: 242: }
  5955                           ;main.c: 243: INT2IE = 0;
  5956  000ADC  98F0               	bcf	intcon3,4,c	;volatile
  5957                           
  5958                           ;main.c: 244: stopMoving(0);
  5959  000ADE  0E00               	movlw	0
  5960  000AE0  EC7C  F012         	call	_stopMoving
  5961                           
  5962                           ;main.c: 245: closeGate();
  5963  000AE4  EC94  F013         	call	_closeGate	;wreg free
  5964                           
  5965                           ;main.c: 246: lcdInst(0b11000000);
  5966  000AE8  0EC0               	movlw	192
  5967  000AEA  EC19  F014         	call	i2_lcdInst
  5968                           
  5969                           ;main.c: 247: printf("Sorting Complete          ");
  5970  000AEE  0EF9               	movlw	low STR_15
  5971  000AF0  6E0D               	movwf	i2printf@f,c
  5972  000AF2  0EFD               	movlw	high STR_15
  5973  000AF4  6E0E               	movwf	i2printf@f+1,c
  5974  000AF6  EC3E  F002         	call	i2_printf	;wreg free
  5975                           
  5976                           ;main.c: 248: WriteRun(sorted, period);
  5977  000AFA  0E44               	movlw	low simulate@sorted
  5978  000AFC  6E07               	movwf	WriteRun@sorted,c
  5979  000AFE  0E00               	movlw	high simulate@sorted
  5980  000B00  6E08               	movwf	WriteRun@sorted+1,c
  5981  000B02  C042  F009         	movff	simulate@period,WriteRun@time
  5982  000B06  C043  F00A         	movff	simulate@period+1,WriteRun@time+1
  5983  000B0A  EC93  F009         	call	_WriteRun	;wreg free
  5984                           
  5985                           ;main.c: 249: _delay((unsigned long)((700)*(8000000/4000.0)));
  5986  000B0E  0E08               	movlw	8
  5987  000B10  6E35               	movwf	(??_simulate+1)& (0+255),c
  5988  000B12  0E1B               	movlw	27
  5989  000B14  6E34               	movwf	??_simulate& (0+255),c
  5990  000B16  0E27               	movlw	39
  5991  000B18                     i2u384_47:
  5992  000B18  2EE8               	decfsz	wreg,f,c
  5993  000B1A  D7FE               	bra	i2u384_47
  5994  000B1C  2E34               	decfsz	??_simulate& (0+255),f,c
  5995  000B1E  D7FC               	bra	i2u384_47
  5996  000B20  2E35               	decfsz	(??_simulate+1)& (0+255),f,c
  5997  000B22  D7FA               	bra	i2u384_47
  5998  000B24  F000               	nop	
  5999                           
  6000                           ;main.c: 250: showInfo(period, sorted);
  6001  000B26  C042  F023         	movff	simulate@period,showInfo@time
  6002  000B2A  C043  F024         	movff	simulate@period+1,showInfo@time+1
  6003  000B2E  0E44               	movlw	low simulate@sorted
  6004  000B30  6E25               	movwf	showInfo@sorted,c
  6005  000B32  0E00               	movlw	high simulate@sorted
  6006  000B34  6E26               	movwf	showInfo@sorted+1,c
  6007  000B36  EC7F  F008         	call	_showInfo	;wreg free
  6008                           
  6009                           ;main.c: 251: mode = 0;
  6010  000B3A  0E00               	movlw	0
  6011  000B3C  6E75               	movwf	_mode+1,c
  6012  000B3E  0E00               	movlw	0
  6013  000B40  6E74               	movwf	_mode,c
  6014  000B42  0012               	return		;funcret
  6015  000B44                     __end_of_simulate:
  6016                           	opt stack 0
  6017                           pclatu	equ	0xFFB
  6018                           pclath	equ	0xFFA
  6019                           tblptru	equ	0xFF8
  6020                           tblptrh	equ	0xFF7
  6021                           tblptrl	equ	0xFF6
  6022                           tablat	equ	0xFF5
  6023                           prodh	equ	0xFF4
  6024                           prodl	equ	0xFF3
  6025                           intcon	equ	0xFF2
  6026                           intcon2	equ	0xFF1
  6027                           intcon3	equ	0xFF0
  6028                           postinc0	equ	0xFEE
  6029                           fsr0h	equ	0xFEA
  6030                           fsr0l	equ	0xFE9
  6031                           wreg	equ	0xFE8
  6032                           postdec1	equ	0xFE5
  6033                           plusw1	equ	0xFE3
  6034                           fsr1h	equ	0xFE2
  6035                           fsr1l	equ	0xFE1
  6036                           indf2	equ	0xFDF
  6037                           postinc2	equ	0xFDE
  6038                           postdec2	equ	0xFDD
  6039                           plusw2	equ	0xFDB
  6040                           fsr2h	equ	0xFDA
  6041                           fsr2l	equ	0xFD9
  6042                           status	equ	0xFD8
  6043                           
  6044 ;; *************** function _mainloop *****************
  6045 ;; Defined at:
  6046 ;;		line 51 in file "main.c"
  6047 ;; Parameters:    Size  Location     Type
  6048 ;;		None
  6049 ;; Auto vars:     Size  Location     Type
  6050 ;;  sorted          4   67[COMRAM] unsigned char [4]
  6051 ;;  start           4   60[COMRAM] unsigned int [2]
  6052 ;;  now             4   56[COMRAM] unsigned int [2]
  6053 ;;  AA              2   75[COMRAM] int 
  6054 ;;  V9              2   73[COMRAM] int 
  6055 ;;  C               2   71[COMRAM] int 
  6056 ;;  period          2   65[COMRAM] unsigned int 
  6057 ;;  notyet          1   64[COMRAM] unsigned char 
  6058 ;;  shakeCW         1   53[COMRAM] unsigned char 
  6059 ;; Return value:  Size  Location     Type
  6060 ;;                  1    wreg      void 
  6061 ;; Registers used:
  6062 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6063 ;; Tracked objects:
  6064 ;;		On entry : 0/0
  6065 ;;		On exit  : 0/0
  6066 ;;		Unchanged: 0/0
  6067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6069 ;;      Locals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6070 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6071 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6072 ;;Total ram usage:       26 bytes
  6073 ;; Hardware stack levels used:    1
  6074 ;; Hardware stack levels required when called:    5
  6075 ;; This function calls:
  6076 ;;		_AASpin
  6077 ;;		_CSpin
  6078 ;;		_HexDecToDec2
  6079 ;;		_V9Spin
  6080 ;;		_WriteRun
  6081 ;;		_check9
  6082 ;;		_checkAA
  6083 ;;		_checkC
  6084 ;;		_closeGate
  6085 ;;		_openGate
  6086 ;;		_showInfo
  6087 ;;		_stopMoving
  6088 ;;		i2___wmul
  6089 ;;		i2_getTime
  6090 ;;		i2_lcdInst
  6091 ;;		i2_printf
  6092 ;; This function is called by:
  6093 ;;		_intrpt
  6094 ;; This function uses a non-reentrant model
  6095 ;;
  6096                           
  6097                           	psect	text25
  6098  000B44                     __ptext25:
  6099                           	opt stack 0
  6100  000B44                     _mainloop:
  6101                           	opt stack 20
  6102                           
  6103                           ;main.c: 52: unsigned int now[] = {0, 0}, start[] = {0, 0};
  6104                           
  6105                           ;incstack = 0
  6106  000B44  C06D  F039         	movff	mainloop@F3096,mainloop@now
  6107  000B48  C06E  F03A         	movff	mainloop@F3096+1,mainloop@now+1
  6108  000B4C  C06F  F03B         	movff	mainloop@F3096+2,mainloop@now+2
  6109  000B50  C070  F03C         	movff	mainloop@F3096+3,mainloop@now+3
  6110  000B54  C069  F03D         	movff	mainloop@F3098,mainloop@start
  6111  000B58  C06A  F03E         	movff	mainloop@F3098+1,mainloop@start+1
  6112  000B5C  C06B  F03F         	movff	mainloop@F3098+2,mainloop@start+2
  6113  000B60  C06C  F040         	movff	mainloop@F3098+3,mainloop@start+3
  6114                           
  6115                           ;main.c: 53: unsigned char sorted[] = {0, 0, 0, 0};
  6116  000B64  C0BC  F044         	movff	mainloop@F3100,mainloop@sorted
  6117  000B68  C0BD  F045         	movff	mainloop@F3100+1,mainloop@sorted+1
  6118  000B6C  C0BE  F046         	movff	mainloop@F3100+2,mainloop@sorted+2
  6119  000B70  C0BF  F047         	movff	mainloop@F3100+3,mainloop@sorted+3
  6120                           
  6121                           ;main.c: 54: unsigned int period = 0;
  6122  000B74  0E00               	movlw	0
  6123  000B76  6E43               	movwf	mainloop@period+1,c
  6124  000B78  0E00               	movlw	0
  6125  000B7A  6E42               	movwf	mainloop@period,c
  6126                           
  6127                           ;main.c: 55: unsigned char shakeCW = 0;
  6128  000B7C  0E00               	movlw	0
  6129  000B7E  6E36               	movwf	mainloop@shakeCW,c
  6130                           
  6131                           ;main.c: 56: int AA, C, V9;
  6132                           ;main.c: 58: lcdInst(0b10000000);
  6133  000B80  0E80               	movlw	128
  6134  000B82  EC19  F014         	call	i2_lcdInst
  6135                           
  6136                           ;main.c: 59: printf("Sorting...          ");
  6137  000B86  0E3C               	movlw	low STR_1
  6138  000B88  6E0D               	movwf	i2printf@f,c
  6139  000B8A  0EFF               	movlw	high STR_1
  6140  000B8C  6E0E               	movwf	i2printf@f+1,c
  6141  000B8E  EC3E  F002         	call	i2_printf	;wreg free
  6142                           
  6143                           ;main.c: 60: start[0] = time[0];
  6144  000B92  C076  F03D         	movff	_time,mainloop@start
  6145  000B96  6A3E               	clrf	mainloop@start+1,c
  6146                           
  6147                           ;main.c: 61: start[1] = time[1];
  6148  000B98  C077  F03F         	movff	_time+1,mainloop@start+2
  6149  000B9C  6A40               	clrf	mainloop@start+3,c
  6150                           
  6151                           ;main.c: 63: LATC6 = 1;
  6152  000B9E  8C8B               	bsf	3979,6,c	;volatile
  6153                           
  6154                           ;main.c: 64: INT2IE = 1;
  6155  000BA0  88F0               	bsf	intcon3,4,c	;volatile
  6156                           
  6157                           ;main.c: 65: INT2IF = 0;
  6158  000BA2  92F0               	bcf	intcon3,1,c	;volatile
  6159                           
  6160                           ;main.c: 67: openGate();
  6161  000BA4  EC84  F013         	call	_openGate	;wreg free
  6162                           
  6163                           ;main.c: 68: char notyet = 0;
  6164  000BA8  0E00               	movlw	0
  6165  000BAA  6E41               	movwf	mainloop@notyet,c
  6166                           
  6167                           ;main.c: 69: while (mode == 1) {
  6168  000BAC  D120               	goto	i2l4395
  6169  000BAE                     i2l4299:
  6170                           
  6171                           ;main.c: 70: lcdInst(0b10000000);
  6172  000BAE  0E80               	movlw	128
  6173  000BB0  EC19  F014         	call	i2_lcdInst
  6174                           
  6175                           ;main.c: 71: V9 = check9(sorted);
  6176  000BB4  0E44               	movlw	low mainloop@sorted
  6177  000BB6  6E2E               	movwf	check9@sorted,c
  6178  000BB8  0E00               	movlw	high mainloop@sorted
  6179  000BBA  6E2F               	movwf	check9@sorted+1,c
  6180  000BBC  EC3F  F010         	call	_check9	;wreg free
  6181  000BC0  C02E  F04A         	movff	?_check9,mainloop@V9
  6182  000BC4  C02F  F04B         	movff	?_check9+1,mainloop@V9+1
  6183                           
  6184                           ;main.c: 72: C = checkC(sorted);
  6185  000BC8  0E44               	movlw	low mainloop@sorted
  6186  000BCA  6E2E               	movwf	checkC@sorted,c
  6187  000BCC  0E00               	movlw	high mainloop@sorted
  6188  000BCE  6E2F               	movwf	checkC@sorted+1,c
  6189  000BD0  EC04  F010         	call	_checkC	;wreg free
  6190  000BD4  C02E  F048         	movff	?_checkC,mainloop@C
  6191  000BD8  C02F  F049         	movff	?_checkC+1,mainloop@C+1
  6192                           
  6193                           ;main.c: 73: AA = checkAA(sorted);
  6194  000BDC  0E44               	movlw	low mainloop@sorted
  6195  000BDE  6E2E               	movwf	checkAA@sorted,c
  6196  000BE0  0E00               	movlw	high mainloop@sorted
  6197  000BE2  6E2F               	movwf	checkAA@sorted+1,c
  6198  000BE4  EC7A  F010         	call	_checkAA	;wreg free
  6199  000BE8  C02E  F04C         	movff	?_checkAA,mainloop@AA
  6200  000BEC  C02F  F04D         	movff	?_checkAA+1,mainloop@AA+1
  6201                           
  6202                           ;main.c: 74: printf("    ");
  6203  000BF0  0EDA               	movlw	low (STR_41+11)
  6204  000BF2  6E0D               	movwf	i2printf@f,c
  6205  000BF4  0EFF               	movlw	high (STR_41+11)
  6206  000BF6  6E0E               	movwf	i2printf@f+1,c
  6207  000BF8  EC3E  F002         	call	i2_printf	;wreg free
  6208                           
  6209                           ;main.c: 75: if (V9 != -1 || C != -1 || AA != -1) {
  6210  000BFC  284A               	incf	mainloop@V9,w,c
  6211  000BFE  E10D               	bnz	i2l4315
  6212  000C00  284B               	incf	mainloop@V9+1,w,c
  6213  000C02  A4D8               	btfss	status,2,c
  6214  000C04  D00A               	goto	i2l4315
  6215  000C06  2848               	incf	mainloop@C,w,c
  6216  000C08  E108               	bnz	i2l4315
  6217  000C0A  2849               	incf	mainloop@C+1,w,c
  6218  000C0C  A4D8               	btfss	status,2,c
  6219  000C0E  D005               	goto	i2l4315
  6220  000C10  284C               	incf	mainloop@AA,w,c
  6221  000C12  E103               	bnz	i2l4315
  6222  000C14  284D               	incf	mainloop@AA+1,w,c
  6223  000C16  B4D8               	btfsc	status,2,c
  6224  000C18  D002               	goto	i2l4317
  6225  000C1A                     i2l4315:
  6226                           
  6227                           ;main.c: 76: notyet = 0;
  6228  000C1A  0E00               	movlw	0
  6229  000C1C  6E41               	movwf	mainloop@notyet,c
  6230  000C1E                     i2l4317:
  6231                           
  6232                           ;main.c: 77: }
  6233                           ;main.c: 79: lcdInst(0b11000000);
  6234  000C1E  0EC0               	movlw	192
  6235  000C20  EC19  F014         	call	i2_lcdInst
  6236                           
  6237                           ;main.c: 80: printf("9V:");
  6238  000C24  0EF1               	movlw	low STR_3
  6239  000C26  6E0D               	movwf	i2printf@f,c
  6240  000C28  0EFF               	movlw	high STR_3
  6241  000C2A  6E0E               	movwf	i2printf@f+1,c
  6242  000C2C  EC3E  F002         	call	i2_printf	;wreg free
  6243                           
  6244                           ;main.c: 81: if (!V9) {
  6245  000C30  504A               	movf	mainloop@V9,w,c
  6246  000C32  104B               	iorwf	mainloop@V9+1,w,c
  6247  000C34  A4D8               	btfss	status,2,c
  6248  000C36  D00C               	goto	i2l4329
  6249                           
  6250                           ;main.c: 82: printf(" +");
  6251  000C38  0EF5               	movlw	low STR_4
  6252  000C3A  6E0D               	movwf	i2printf@f,c
  6253  000C3C  0EFF               	movlw	high STR_4
  6254  000C3E  6E0E               	movwf	i2printf@f+1,c
  6255  000C40  EC3E  F002         	call	i2_printf	;wreg free
  6256                           
  6257                           ;main.c: 83: AA = -1;
  6258  000C44  684C               	setf	mainloop@AA,c
  6259  000C46  684D               	setf	mainloop@AA+1,c
  6260                           
  6261                           ;main.c: 84: V9Spin(V9);
  6262  000C48  504A               	movf	mainloop@V9,w,c
  6263  000C4A  EC14  F00D         	call	_V9Spin
  6264                           
  6265                           ;main.c: 87: } else if (V9 == 1) {
  6266  000C4E  D016               	goto	i2l116
  6267  000C50                     i2l4329:
  6268  000C50  044A               	decf	mainloop@V9,w,c
  6269  000C52  104B               	iorwf	mainloop@V9+1,w,c
  6270  000C54  A4D8               	btfss	status,2,c
  6271  000C56  D00C               	goto	i2l4337
  6272                           
  6273                           ;main.c: 88: printf(" -");
  6274  000C58  0EF8               	movlw	low STR_5
  6275  000C5A  6E0D               	movwf	i2printf@f,c
  6276  000C5C  0EFF               	movlw	high STR_5
  6277  000C5E  6E0E               	movwf	i2printf@f+1,c
  6278  000C60  EC3E  F002         	call	i2_printf	;wreg free
  6279                           
  6280                           ;main.c: 89: AA = -1;
  6281  000C64  684C               	setf	mainloop@AA,c
  6282  000C66  684D               	setf	mainloop@AA+1,c
  6283                           
  6284                           ;main.c: 90: V9Spin(V9);
  6285  000C68  504A               	movf	mainloop@V9,w,c
  6286  000C6A  EC14  F00D         	call	_V9Spin
  6287                           
  6288                           ;main.c: 93: } else {
  6289  000C6E  D006               	goto	i2l116
  6290  000C70                     i2l4337:
  6291                           
  6292                           ;main.c: 94: printf(" 0");
  6293  000C70  0EFB               	movlw	low STR_6
  6294  000C72  6E0D               	movwf	i2printf@f,c
  6295  000C74  0EFF               	movlw	high STR_6
  6296  000C76  6E0E               	movwf	i2printf@f+1,c
  6297  000C78  EC3E  F002         	call	i2_printf	;wreg free
  6298  000C7C                     i2l116:
  6299                           
  6300                           ;main.c: 95: }
  6301                           ;main.c: 97: printf(" C:");
  6302  000C7C  0EED               	movlw	low STR_7
  6303  000C7E  6E0D               	movwf	i2printf@f,c
  6304  000C80  0EFF               	movlw	high STR_7
  6305  000C82  6E0E               	movwf	i2printf@f+1,c
  6306  000C84  EC3E  F002         	call	i2_printf	;wreg free
  6307                           
  6308                           ;main.c: 99: if (!C) {
  6309  000C88  5048               	movf	mainloop@C,w,c
  6310  000C8A  1049               	iorwf	mainloop@C+1,w,c
  6311  000C8C  A4D8               	btfss	status,2,c
  6312  000C8E  D00A               	goto	i2l4345
  6313                           
  6314                           ;main.c: 100: printf(" +");
  6315  000C90  0EF5               	movlw	low STR_4
  6316  000C92  6E0D               	movwf	i2printf@f,c
  6317  000C94  0EFF               	movlw	high STR_4
  6318  000C96  6E0E               	movwf	i2printf@f+1,c
  6319  000C98  EC3E  F002         	call	i2_printf	;wreg free
  6320                           
  6321                           ;main.c: 101: CSpin(C);
  6322  000C9C  5048               	movf	mainloop@C,w,c
  6323  000C9E  EC6E  F00D         	call	_CSpin
  6324                           
  6325                           ;main.c: 104: } else if (C == 1) {
  6326  000CA2  D014               	goto	i2l120
  6327  000CA4                     i2l4345:
  6328  000CA4  0448               	decf	mainloop@C,w,c
  6329  000CA6  1049               	iorwf	mainloop@C+1,w,c
  6330  000CA8  A4D8               	btfss	status,2,c
  6331  000CAA  D00A               	goto	i2l4351
  6332                           
  6333                           ;main.c: 105: printf(" -");
  6334  000CAC  0EF8               	movlw	low STR_5
  6335  000CAE  6E0D               	movwf	i2printf@f,c
  6336  000CB0  0EFF               	movlw	high STR_5
  6337  000CB2  6E0E               	movwf	i2printf@f+1,c
  6338  000CB4  EC3E  F002         	call	i2_printf	;wreg free
  6339                           
  6340                           ;main.c: 106: CSpin(C);
  6341  000CB8  5048               	movf	mainloop@C,w,c
  6342  000CBA  EC6E  F00D         	call	_CSpin
  6343                           
  6344                           ;main.c: 109: } else {
  6345  000CBE  D006               	goto	i2l120
  6346  000CC0                     i2l4351:
  6347                           
  6348                           ;main.c: 110: printf(" 0");
  6349  000CC0  0EFB               	movlw	low STR_6
  6350  000CC2  6E0D               	movwf	i2printf@f,c
  6351  000CC4  0EFF               	movlw	high STR_6
  6352  000CC6  6E0E               	movwf	i2printf@f+1,c
  6353  000CC8  EC3E  F002         	call	i2_printf	;wreg free
  6354  000CCC                     i2l120:
  6355                           
  6356                           ;main.c: 111: }
  6357                           ;main.c: 113: printf(" AA:");
  6358  000CCC  0EE4               	movlw	low STR_11
  6359  000CCE  6E0D               	movwf	i2printf@f,c
  6360  000CD0  0EFF               	movlw	high STR_11
  6361  000CD2  6E0E               	movwf	i2printf@f+1,c
  6362  000CD4  EC3E  F002         	call	i2_printf	;wreg free
  6363                           
  6364                           ;main.c: 115: if (!AA) {
  6365  000CD8  504C               	movf	mainloop@AA,w,c
  6366  000CDA  104D               	iorwf	mainloop@AA+1,w,c
  6367  000CDC  A4D8               	btfss	status,2,c
  6368  000CDE  D00A               	goto	i2l4359
  6369                           
  6370                           ;main.c: 116: printf(" -");
  6371  000CE0  0EF8               	movlw	low STR_5
  6372  000CE2  6E0D               	movwf	i2printf@f,c
  6373  000CE4  0EFF               	movlw	high STR_5
  6374  000CE6  6E0E               	movwf	i2printf@f+1,c
  6375  000CE8  EC3E  F002         	call	i2_printf	;wreg free
  6376                           
  6377                           ;main.c: 118: AASpin(AA);
  6378  000CEC  504C               	movf	mainloop@AA,w,c
  6379  000CEE  ECC8  F00D         	call	_AASpin
  6380                           
  6381                           ;main.c: 120: } else if (AA == 1) {
  6382  000CF2  D014               	goto	i2l4367
  6383  000CF4                     i2l4359:
  6384  000CF4  044C               	decf	mainloop@AA,w,c
  6385  000CF6  104D               	iorwf	mainloop@AA+1,w,c
  6386  000CF8  A4D8               	btfss	status,2,c
  6387  000CFA  D00A               	goto	i2l4365
  6388                           
  6389                           ;main.c: 121: printf(" +");
  6390  000CFC  0EF5               	movlw	low STR_4
  6391  000CFE  6E0D               	movwf	i2printf@f,c
  6392  000D00  0EFF               	movlw	high STR_4
  6393  000D02  6E0E               	movwf	i2printf@f+1,c
  6394  000D04  EC3E  F002         	call	i2_printf	;wreg free
  6395                           
  6396                           ;main.c: 122: AASpin(AA);
  6397  000D08  504C               	movf	mainloop@AA,w,c
  6398  000D0A  ECC8  F00D         	call	_AASpin
  6399                           
  6400                           ;main.c: 125: } else {
  6401  000D0E  D006               	goto	i2l4367
  6402  000D10                     i2l4365:
  6403                           
  6404                           ;main.c: 126: printf(" 0");
  6405  000D10  0EFB               	movlw	low STR_6
  6406  000D12  6E0D               	movwf	i2printf@f,c
  6407  000D14  0EFF               	movlw	high STR_6
  6408  000D16  6E0E               	movwf	i2printf@f+1,c
  6409  000D18  EC3E  F002         	call	i2_printf	;wreg free
  6410  000D1C                     i2l4367:
  6411                           
  6412                           ;main.c: 127: }
  6413                           ;main.c: 129: if (sorted[0] > 0 && sorted[1] > 0 && sorted[2] > 0 && sorted[3] > 0) {
  6414  000D1C  5044               	movf	mainloop@sorted,w,c
  6415  000D1E  B4D8               	btfsc	status,2,c
  6416  000D20  D00D               	goto	i2l4377
  6417  000D22  5045               	movf	mainloop@sorted+1,w,c
  6418  000D24  B4D8               	btfsc	status,2,c
  6419  000D26  D00A               	goto	i2l4377
  6420  000D28  5046               	movf	mainloop@sorted+2,w,c
  6421  000D2A  B4D8               	btfsc	status,2,c
  6422  000D2C  D007               	goto	i2l4377
  6423  000D2E  5047               	movf	mainloop@sorted+3,w,c
  6424  000D30  B4D8               	btfsc	status,2,c
  6425  000D32  D004               	goto	i2l4377
  6426                           
  6427                           ;main.c: 130: mode = 2;
  6428  000D34  0E00               	movlw	0
  6429  000D36  6E75               	movwf	_mode+1,c
  6430  000D38  0E02               	movlw	2
  6431  000D3A  6E74               	movwf	_mode,c
  6432  000D3C                     i2l4377:
  6433                           
  6434                           ;main.c: 131: }
  6435                           ;main.c: 132: getTime(time);
  6436  000D3C  0E76               	movlw	low _time
  6437  000D3E  6E04               	movwf	i2getTime@time,c
  6438  000D40  0E00               	movlw	high _time
  6439  000D42  6E05               	movwf	i2getTime@time+1,c
  6440  000D44  ECC9  F00F         	call	i2_getTime	;wreg free
  6441                           
  6442                           ;main.c: 133: now[0] = time[0];
  6443  000D48  C076  F039         	movff	_time,mainloop@now
  6444  000D4C  6A3A               	clrf	mainloop@now+1,c
  6445                           
  6446                           ;main.c: 134: now[1] = time[1];
  6447  000D4E  C077  F03B         	movff	_time+1,mainloop@now+2
  6448  000D52  6A3C               	clrf	mainloop@now+3,c
  6449                           
  6450                           ;main.c: 135: period = (HexDecToDec2(now[1]) - HexDecToDec2(start[1]))*60 + HexDecToDec2
      +                          (now[0]) - HexDecToDec2(start[0]);
  6451  000D54  C03B  F007         	movff	mainloop@now+2,HexDecToDec2@hex
  6452  000D58  C03C  F008         	movff	mainloop@now+3,HexDecToDec2@hex+1
  6453  000D5C  ECF1  F011         	call	_HexDecToDec2	;wreg free
  6454  000D60  C007  F034         	movff	?_HexDecToDec2,??_mainloop
  6455  000D64  C008  F035         	movff	?_HexDecToDec2+1,??_mainloop+1
  6456  000D68  C03F  F007         	movff	mainloop@start+2,HexDecToDec2@hex
  6457  000D6C  C040  F008         	movff	mainloop@start+3,HexDecToDec2@hex+1
  6458  000D70  ECF1  F011         	call	_HexDecToDec2	;wreg free
  6459  000D74  1E07               	comf	?_HexDecToDec2,f,c
  6460  000D76  1E08               	comf	?_HexDecToDec2+1,f,c
  6461  000D78  4A07               	infsnz	?_HexDecToDec2,f,c
  6462  000D7A  2A08               	incf	?_HexDecToDec2+1,f,c
  6463  000D7C  5007               	movf	?_HexDecToDec2,w,c
  6464  000D7E  2434               	addwf	??_mainloop,w,c
  6465  000D80  6E37               	movwf	_mainloop$1539,c
  6466  000D82  5008               	movf	?_HexDecToDec2+1,w,c
  6467  000D84  2035               	addwfc	??_mainloop+1,w,c
  6468  000D86  6E38               	movwf	_mainloop$1539+1,c
  6469                           
  6470                           ;main.c: 135: period = (HexDecToDec2(now[1]) - HexDecToDec2(start[1]))*60 + HexDecToDec2
      +                          (now[0]) - HexDecToDec2(start[0]);
  6471  000D88  C037  F001         	movff	_mainloop$1539,i2___wmul@multiplier
  6472  000D8C  C038  F002         	movff	_mainloop$1539+1,i2___wmul@multiplier+1
  6473  000D90  0E00               	movlw	0
  6474  000D92  6E04               	movwf	i2___wmul@multiplicand+1,c
  6475  000D94  0E3C               	movlw	60
  6476  000D96  6E03               	movwf	i2___wmul@multiplicand,c
  6477  000D98  EC60  F013         	call	i2___wmul	;wreg free
  6478  000D9C  C001  F034         	movff	?i2___wmul,??_mainloop
  6479  000DA0  C002  F035         	movff	?i2___wmul+1,??_mainloop+1
  6480  000DA4  C039  F007         	movff	mainloop@now,HexDecToDec2@hex
  6481  000DA8  C03A  F008         	movff	mainloop@now+1,HexDecToDec2@hex+1
  6482  000DAC  ECF1  F011         	call	_HexDecToDec2	;wreg free
  6483  000DB0  5007               	movf	?_HexDecToDec2,w,c
  6484  000DB2  2634               	addwf	??_mainloop,f,c
  6485  000DB4  5008               	movf	?_HexDecToDec2+1,w,c
  6486  000DB6  2235               	addwfc	??_mainloop+1,f,c
  6487  000DB8  C03D  F007         	movff	mainloop@start,HexDecToDec2@hex
  6488  000DBC  C03E  F008         	movff	mainloop@start+1,HexDecToDec2@hex+1
  6489  000DC0  ECF1  F011         	call	_HexDecToDec2	;wreg free
  6490  000DC4  1E07               	comf	?_HexDecToDec2,f,c
  6491  000DC6  1E08               	comf	?_HexDecToDec2+1,f,c
  6492  000DC8  4A07               	infsnz	?_HexDecToDec2,f,c
  6493  000DCA  2A08               	incf	?_HexDecToDec2+1,f,c
  6494  000DCC  5007               	movf	?_HexDecToDec2,w,c
  6495  000DCE  2434               	addwf	??_mainloop,w,c
  6496  000DD0  6E42               	movwf	mainloop@period,c
  6497  000DD2  5008               	movf	?_HexDecToDec2+1,w,c
  6498  000DD4  2035               	addwfc	??_mainloop+1,w,c
  6499  000DD6  6E43               	movwf	mainloop@period+1,c
  6500                           
  6501                           ;main.c: 136: if (period > 150) {
  6502  000DD8  5043               	movf	mainloop@period+1,w,c
  6503  000DDA  E104               	bnz	i2u343_40
  6504  000DDC  0E97               	movlw	151
  6505  000DDE  5C42               	subwf	mainloop@period,w,c
  6506  000DE0  A0D8               	btfss	status,0,c
  6507  000DE2  D004               	goto	i2l4391
  6508  000DE4                     i2u343_40:
  6509                           
  6510                           ;main.c: 137: mode = 2;
  6511  000DE4  0E00               	movlw	0
  6512  000DE6  6E75               	movwf	_mode+1,c
  6513  000DE8  0E02               	movlw	2
  6514  000DEA  6E74               	movwf	_mode,c
  6515  000DEC                     i2l4391:
  6516                           
  6517                           ;main.c: 138: }
  6518                           ;main.c: 139: notyet++;
  6519  000DEC  2A41               	incf	mainloop@notyet,f,c
  6520  000DEE                     i2l4395:
  6521  000DEE  0474               	decf	_mode,w,c
  6522  000DF0  1075               	iorwf	_mode+1,w,c
  6523  000DF2  B4D8               	btfsc	status,2,c
  6524  000DF4  D6DC               	goto	i2l4299
  6525                           
  6526                           ;main.c: 142: }
  6527                           ;main.c: 143: }
  6528                           ;main.c: 144: INT2IE = 0;
  6529  000DF6  98F0               	bcf	intcon3,4,c	;volatile
  6530                           
  6531                           ;main.c: 145: stopMoving(0);
  6532  000DF8  0E00               	movlw	0
  6533  000DFA  EC7C  F012         	call	_stopMoving
  6534                           
  6535                           ;main.c: 146: closeGate();
  6536  000DFE  EC94  F013         	call	_closeGate	;wreg free
  6537                           
  6538                           ;main.c: 147: lcdInst(0b11000000);
  6539  000E02  0EC0               	movlw	192
  6540  000E04  EC19  F014         	call	i2_lcdInst
  6541                           
  6542                           ;main.c: 148: printf("Sorting Complete          ");
  6543  000E08  0EF9               	movlw	low STR_15
  6544  000E0A  6E0D               	movwf	i2printf@f,c
  6545  000E0C  0EFD               	movlw	high STR_15
  6546  000E0E  6E0E               	movwf	i2printf@f+1,c
  6547  000E10  EC3E  F002         	call	i2_printf	;wreg free
  6548                           
  6549                           ;main.c: 149: WriteRun(sorted, period);
  6550  000E14  0E44               	movlw	low mainloop@sorted
  6551  000E16  6E07               	movwf	WriteRun@sorted,c
  6552  000E18  0E00               	movlw	high mainloop@sorted
  6553  000E1A  6E08               	movwf	WriteRun@sorted+1,c
  6554  000E1C  C042  F009         	movff	mainloop@period,WriteRun@time
  6555  000E20  C043  F00A         	movff	mainloop@period+1,WriteRun@time+1
  6556  000E24  EC93  F009         	call	_WriteRun	;wreg free
  6557                           
  6558                           ;main.c: 150: _delay((unsigned long)((700)*(8000000/4000.0)));
  6559  000E28  0E08               	movlw	8
  6560  000E2A  6E35               	movwf	(??_mainloop+1)& (0+255),c
  6561  000E2C  0E1B               	movlw	27
  6562  000E2E  6E34               	movwf	??_mainloop& (0+255),c
  6563  000E30  0E27               	movlw	39
  6564  000E32                     i2u385_47:
  6565  000E32  2EE8               	decfsz	wreg,f,c
  6566  000E34  D7FE               	bra	i2u385_47
  6567  000E36  2E34               	decfsz	??_mainloop& (0+255),f,c
  6568  000E38  D7FC               	bra	i2u385_47
  6569  000E3A  2E35               	decfsz	(??_mainloop+1)& (0+255),f,c
  6570  000E3C  D7FA               	bra	i2u385_47
  6571  000E3E  F000               	nop	
  6572                           
  6573                           ;main.c: 151: showInfo(period, sorted);
  6574  000E40  C042  F023         	movff	mainloop@period,showInfo@time
  6575  000E44  C043  F024         	movff	mainloop@period+1,showInfo@time+1
  6576  000E48  0E44               	movlw	low mainloop@sorted
  6577  000E4A  6E25               	movwf	showInfo@sorted,c
  6578  000E4C  0E00               	movlw	high mainloop@sorted
  6579  000E4E  6E26               	movwf	showInfo@sorted+1,c
  6580  000E50  EC7F  F008         	call	_showInfo	;wreg free
  6581                           
  6582                           ;main.c: 152: mode = 0;
  6583  000E54  0E00               	movlw	0
  6584  000E56  6E75               	movwf	_mode+1,c
  6585  000E58  0E00               	movlw	0
  6586  000E5A  6E74               	movwf	_mode,c
  6587  000E5C  0012               	return		;funcret
  6588  000E5E                     __end_of_mainloop:
  6589                           	opt stack 0
  6590                           pclatu	equ	0xFFB
  6591                           pclath	equ	0xFFA
  6592                           tblptru	equ	0xFF8
  6593                           tblptrh	equ	0xFF7
  6594                           tblptrl	equ	0xFF6
  6595                           tablat	equ	0xFF5
  6596                           prodh	equ	0xFF4
  6597                           prodl	equ	0xFF3
  6598                           intcon	equ	0xFF2
  6599                           intcon2	equ	0xFF1
  6600                           intcon3	equ	0xFF0
  6601                           postinc0	equ	0xFEE
  6602                           fsr0h	equ	0xFEA
  6603                           fsr0l	equ	0xFE9
  6604                           wreg	equ	0xFE8
  6605                           postdec1	equ	0xFE5
  6606                           plusw1	equ	0xFE3
  6607                           fsr1h	equ	0xFE2
  6608                           fsr1l	equ	0xFE1
  6609                           indf2	equ	0xFDF
  6610                           postinc2	equ	0xFDE
  6611                           postdec2	equ	0xFDD
  6612                           plusw2	equ	0xFDB
  6613                           fsr2h	equ	0xFDA
  6614                           fsr2l	equ	0xFD9
  6615                           status	equ	0xFD8
  6616                           
  6617 ;; *************** function i2_getTime *****************
  6618 ;; Defined at:
  6619 ;;		line 76 in file "modules.c"
  6620 ;; Parameters:    Size  Location     Type
  6621 ;;  time            2    3[COMRAM] PTR unsigned char 
  6622 ;;		 -> time(7), 
  6623 ;; Auto vars:     Size  Location     Type
  6624 ;;  getTime         1    5[COMRAM] unsigned char 
  6625 ;; Return value:  Size  Location     Type
  6626 ;;                  1    wreg      void 
  6627 ;; Registers used:
  6628 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6629 ;; Tracked objects:
  6630 ;;		On entry : 0/0
  6631 ;;		On exit  : 0/0
  6632 ;;		Unchanged: 0/0
  6633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6634 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6635 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6637 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6638 ;;Total ram usage:        3 bytes
  6639 ;; Hardware stack levels used:    1
  6640 ;; Hardware stack levels required when called:    2
  6641 ;; This function calls:
  6642 ;;		i2_I2C_Master_Read
  6643 ;;		i2_I2C_Master_Start
  6644 ;;		i2_I2C_Master_Stop
  6645 ;;		i2_I2C_Master_Write
  6646 ;; This function is called by:
  6647 ;;		_mainloop
  6648 ;;		_simulate
  6649 ;; This function uses a non-reentrant model
  6650 ;;
  6651                           
  6652                           	psect	text26
  6653  001F92                     __ptext26:
  6654                           	opt stack 0
  6655  001F92                     i2_getTime:
  6656                           	opt stack 22
  6657                           
  6658                           ;modules.c: 77: (INTCONbits.GIE = 0);
  6659                           
  6660                           ;incstack = 0
  6661  001F92  9EF2               	bcf	intcon,7,c	;volatile
  6662                           
  6663                           ;modules.c: 81: I2C_Master_Start();
  6664  001F94  EC35  F014         	call	i2_I2C_Master_Start	;wreg free
  6665                           
  6666                           ;modules.c: 82: I2C_Master_Write(0b11010000);
  6667  001F98  0E00               	movlw	0
  6668  001F9A  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6669  001F9C  0ED0               	movlw	208
  6670  001F9E  6E02               	movwf	i2I2C_Master_Write@d,c
  6671  001FA0  EC24  F014         	call	i2_I2C_Master_Write	;wreg free
  6672                           
  6673                           ;modules.c: 83: I2C_Master_Write(0x00);
  6674  001FA4  0E00               	movlw	0
  6675  001FA6  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6676  001FA8  0E00               	movlw	0
  6677  001FAA  6E02               	movwf	i2I2C_Master_Write@d,c
  6678  001FAC  EC24  F014         	call	i2_I2C_Master_Write	;wreg free
  6679                           
  6680                           ;modules.c: 84: I2C_Master_Stop();
  6681  001FB0  EC31  F014         	call	i2_I2C_Master_Stop	;wreg free
  6682                           
  6683                           ;modules.c: 87: I2C_Master_Start();
  6684  001FB4  EC35  F014         	call	i2_I2C_Master_Start	;wreg free
  6685                           
  6686                           ;modules.c: 88: I2C_Master_Write(0b11010001);
  6687  001FB8  0E00               	movlw	0
  6688  001FBA  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6689  001FBC  0ED1               	movlw	209
  6690  001FBE  6E02               	movwf	i2I2C_Master_Write@d,c
  6691  001FC0  EC24  F014         	call	i2_I2C_Master_Write	;wreg free
  6692                           
  6693                           ;modules.c: 89: for (unsigned char i = 0; i < 0x06; i++) {
  6694  001FC4  0E00               	movlw	0
  6695  001FC6  6E06               	movwf	i2getTime@i,c
  6696  001FC8                     i2l4227:
  6697  001FC8  0E05               	movlw	5
  6698  001FCA  6406               	cpfsgt	i2getTime@i,c
  6699  001FCC  D001               	goto	i2l4231
  6700  001FCE  D00E               	goto	i2l4237
  6701  001FD0                     i2l4231:
  6702                           
  6703                           ;modules.c: 90: time[i] = I2C_Master_Read(1);
  6704  001FD0  5006               	movf	i2getTime@i,w,c
  6705  001FD2  0D01               	mullw	1
  6706  001FD4  50F3               	movf	prodl,w,c
  6707  001FD6  2404               	addwf	i2getTime@time,w,c
  6708  001FD8  6ED9               	movwf	fsr2l,c
  6709  001FDA  50F4               	movf	prodh,w,c
  6710  001FDC  2005               	addwfc	i2getTime@time+1,w,c
  6711  001FDE  6EDA               	movwf	fsr2h,c
  6712  001FE0  0E01               	movlw	1
  6713  001FE2  EC3A  F013         	call	i2_I2C_Master_Read
  6714  001FE6  6EDF               	movwf	indf2,c
  6715  001FE8  2A06               	incf	i2getTime@i,f,c
  6716  001FEA  D7EE               	goto	i2l4227
  6717  001FEC                     i2l4237:
  6718                           
  6719                           ;modules.c: 91: }
  6720                           ;modules.c: 92: time[6] = I2C_Master_Read(0);
  6721  001FEC  EE20 F006          	lfsr	2,6
  6722  001FF0  5004               	movf	i2getTime@time,w,c
  6723  001FF2  26D9               	addwf	fsr2l,f,c
  6724  001FF4  5005               	movf	i2getTime@time+1,w,c
  6725  001FF6  22DA               	addwfc	fsr2h,f,c
  6726  001FF8  0E00               	movlw	0
  6727  001FFA  EC3A  F013         	call	i2_I2C_Master_Read
  6728  001FFE  6EDF               	movwf	indf2,c
  6729                           
  6730                           ;modules.c: 93: I2C_Master_Stop();
  6731  002000  EC31  F014         	call	i2_I2C_Master_Stop	;wreg free
  6732                           
  6733                           ;modules.c: 94: (INTCONbits.GIE = 1);
  6734  002004  8EF2               	bsf	intcon,7,c	;volatile
  6735  002006  0012               	return		;funcret
  6736  002008                     __end_ofi2_getTime:
  6737                           	opt stack 0
  6738                           pclatu	equ	0xFFB
  6739                           pclath	equ	0xFFA
  6740                           tblptru	equ	0xFF8
  6741                           tblptrh	equ	0xFF7
  6742                           tblptrl	equ	0xFF6
  6743                           tablat	equ	0xFF5
  6744                           prodh	equ	0xFF4
  6745                           prodl	equ	0xFF3
  6746                           intcon	equ	0xFF2
  6747                           intcon2	equ	0xFF1
  6748                           intcon3	equ	0xFF0
  6749                           postinc0	equ	0xFEE
  6750                           fsr0h	equ	0xFEA
  6751                           fsr0l	equ	0xFE9
  6752                           wreg	equ	0xFE8
  6753                           postdec1	equ	0xFE5
  6754                           plusw1	equ	0xFE3
  6755                           fsr1h	equ	0xFE2
  6756                           fsr1l	equ	0xFE1
  6757                           indf2	equ	0xFDF
  6758                           postinc2	equ	0xFDE
  6759                           postdec2	equ	0xFDD
  6760                           plusw2	equ	0xFDB
  6761                           fsr2h	equ	0xFDA
  6762                           fsr2l	equ	0xFD9
  6763                           status	equ	0xFD8
  6764                           
  6765 ;; *************** function i2_I2C_Master_Write *****************
  6766 ;; Defined at:
  6767 ;;		line 42 in file "I2C.c"
  6768 ;; Parameters:    Size  Location     Type
  6769 ;;  d               2    1[COMRAM] unsigned int 
  6770 ;; Auto vars:     Size  Location     Type
  6771 ;;		None
  6772 ;; Return value:  Size  Location     Type
  6773 ;;                  1    wreg      void 
  6774 ;; Registers used:
  6775 ;;		wreg, status,2, status,0, cstack
  6776 ;; Tracked objects:
  6777 ;;		On entry : 0/0
  6778 ;;		On exit  : 0/0
  6779 ;;		Unchanged: 0/0
  6780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6781 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6784 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6785 ;;Total ram usage:        2 bytes
  6786 ;; Hardware stack levels used:    1
  6787 ;; Hardware stack levels required when called:    1
  6788 ;; This function calls:
  6789 ;;		i2_I2C_Master_Wait
  6790 ;; This function is called by:
  6791 ;;		i2_getTime
  6792 ;; This function uses a non-reentrant model
  6793 ;;
  6794                           
  6795                           	psect	text27
  6796  002848                     __ptext27:
  6797                           	opt stack 0
  6798  002848                     i2_I2C_Master_Write:
  6799                           	opt stack 22
  6800                           
  6801                           ;I2C.c: 43: I2C_Master_Wait();
  6802                           
  6803                           ;incstack = 0
  6804  002848  ECFA  F013         	call	i2_I2C_Master_Wait	;wreg free
  6805                           
  6806                           ;I2C.c: 44: SSPBUF = d;
  6807  00284C  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
  6808  002850  0012               	return		;funcret
  6809  002852                     __end_ofi2_I2C_Master_Write:
  6810                           	opt stack 0
  6811                           pclatu	equ	0xFFB
  6812                           pclath	equ	0xFFA
  6813                           tblptru	equ	0xFF8
  6814                           tblptrh	equ	0xFF7
  6815                           tblptrl	equ	0xFF6
  6816                           tablat	equ	0xFF5
  6817                           prodh	equ	0xFF4
  6818                           prodl	equ	0xFF3
  6819                           intcon	equ	0xFF2
  6820                           intcon2	equ	0xFF1
  6821                           intcon3	equ	0xFF0
  6822                           postinc0	equ	0xFEE
  6823                           fsr0h	equ	0xFEA
  6824                           fsr0l	equ	0xFE9
  6825                           wreg	equ	0xFE8
  6826                           postdec1	equ	0xFE5
  6827                           plusw1	equ	0xFE3
  6828                           fsr1h	equ	0xFE2
  6829                           fsr1l	equ	0xFE1
  6830                           indf2	equ	0xFDF
  6831                           postinc2	equ	0xFDE
  6832                           postdec2	equ	0xFDD
  6833                           plusw2	equ	0xFDB
  6834                           fsr2h	equ	0xFDA
  6835                           fsr2l	equ	0xFD9
  6836                           status	equ	0xFD8
  6837                           
  6838 ;; *************** function i2_I2C_Master_Stop *****************
  6839 ;; Defined at:
  6840 ;;		line 37 in file "I2C.c"
  6841 ;; Parameters:    Size  Location     Type
  6842 ;;		None
  6843 ;; Auto vars:     Size  Location     Type
  6844 ;;		None
  6845 ;; Return value:  Size  Location     Type
  6846 ;;                  1    wreg      void 
  6847 ;; Registers used:
  6848 ;;		wreg, status,2, status,0, cstack
  6849 ;; Tracked objects:
  6850 ;;		On entry : 0/0
  6851 ;;		On exit  : 0/0
  6852 ;;		Unchanged: 0/0
  6853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6857 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6858 ;;Total ram usage:        0 bytes
  6859 ;; Hardware stack levels used:    1
  6860 ;; Hardware stack levels required when called:    1
  6861 ;; This function calls:
  6862 ;;		i2_I2C_Master_Wait
  6863 ;; This function is called by:
  6864 ;;		i2_getTime
  6865 ;; This function uses a non-reentrant model
  6866 ;;
  6867                           
  6868                           	psect	text28
  6869  002862                     __ptext28:
  6870                           	opt stack 0
  6871  002862                     i2_I2C_Master_Stop:
  6872                           	opt stack 22
  6873                           
  6874                           ;I2C.c: 38: I2C_Master_Wait();
  6875                           
  6876                           ;incstack = 0
  6877  002862  ECFA  F013         	call	i2_I2C_Master_Wait	;wreg free
  6878                           
  6879                           ;I2C.c: 39: PEN = 1;
  6880  002866  84C5               	bsf	4037,2,c	;volatile
  6881  002868  0012               	return		;funcret
  6882  00286A                     __end_ofi2_I2C_Master_Stop:
  6883                           	opt stack 0
  6884                           pclatu	equ	0xFFB
  6885                           pclath	equ	0xFFA
  6886                           tblptru	equ	0xFF8
  6887                           tblptrh	equ	0xFF7
  6888                           tblptrl	equ	0xFF6
  6889                           tablat	equ	0xFF5
  6890                           prodh	equ	0xFF4
  6891                           prodl	equ	0xFF3
  6892                           intcon	equ	0xFF2
  6893                           intcon2	equ	0xFF1
  6894                           intcon3	equ	0xFF0
  6895                           postinc0	equ	0xFEE
  6896                           fsr0h	equ	0xFEA
  6897                           fsr0l	equ	0xFE9
  6898                           wreg	equ	0xFE8
  6899                           postdec1	equ	0xFE5
  6900                           plusw1	equ	0xFE3
  6901                           fsr1h	equ	0xFE2
  6902                           fsr1l	equ	0xFE1
  6903                           indf2	equ	0xFDF
  6904                           postinc2	equ	0xFDE
  6905                           postdec2	equ	0xFDD
  6906                           plusw2	equ	0xFDB
  6907                           fsr2h	equ	0xFDA
  6908                           fsr2l	equ	0xFD9
  6909                           status	equ	0xFD8
  6910                           
  6911 ;; *************** function i2_I2C_Master_Start *****************
  6912 ;; Defined at:
  6913 ;;		line 27 in file "I2C.c"
  6914 ;; Parameters:    Size  Location     Type
  6915 ;;		None
  6916 ;; Auto vars:     Size  Location     Type
  6917 ;;		None
  6918 ;; Return value:  Size  Location     Type
  6919 ;;                  1    wreg      void 
  6920 ;; Registers used:
  6921 ;;		wreg, status,2, status,0, cstack
  6922 ;; Tracked objects:
  6923 ;;		On entry : 0/0
  6924 ;;		On exit  : 0/0
  6925 ;;		Unchanged: 0/0
  6926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6931 ;;Total ram usage:        0 bytes
  6932 ;; Hardware stack levels used:    1
  6933 ;; Hardware stack levels required when called:    1
  6934 ;; This function calls:
  6935 ;;		i2_I2C_Master_Wait
  6936 ;; This function is called by:
  6937 ;;		i2_getTime
  6938 ;; This function uses a non-reentrant model
  6939 ;;
  6940                           
  6941                           	psect	text29
  6942  00286A                     __ptext29:
  6943                           	opt stack 0
  6944  00286A                     i2_I2C_Master_Start:
  6945                           	opt stack 22
  6946                           
  6947                           ;I2C.c: 28: I2C_Master_Wait();
  6948                           
  6949                           ;incstack = 0
  6950  00286A  ECFA  F013         	call	i2_I2C_Master_Wait	;wreg free
  6951                           
  6952                           ;I2C.c: 29: SEN = 1;
  6953  00286E  80C5               	bsf	4037,0,c	;volatile
  6954  002870  0012               	return		;funcret
  6955  002872                     __end_ofi2_I2C_Master_Start:
  6956                           	opt stack 0
  6957                           pclatu	equ	0xFFB
  6958                           pclath	equ	0xFFA
  6959                           tblptru	equ	0xFF8
  6960                           tblptrh	equ	0xFF7
  6961                           tblptrl	equ	0xFF6
  6962                           tablat	equ	0xFF5
  6963                           prodh	equ	0xFF4
  6964                           prodl	equ	0xFF3
  6965                           intcon	equ	0xFF2
  6966                           intcon2	equ	0xFF1
  6967                           intcon3	equ	0xFF0
  6968                           postinc0	equ	0xFEE
  6969                           fsr0h	equ	0xFEA
  6970                           fsr0l	equ	0xFE9
  6971                           wreg	equ	0xFE8
  6972                           postdec1	equ	0xFE5
  6973                           plusw1	equ	0xFE3
  6974                           fsr1h	equ	0xFE2
  6975                           fsr1l	equ	0xFE1
  6976                           indf2	equ	0xFDF
  6977                           postinc2	equ	0xFDE
  6978                           postdec2	equ	0xFDD
  6979                           plusw2	equ	0xFDB
  6980                           fsr2h	equ	0xFDA
  6981                           fsr2l	equ	0xFD9
  6982                           status	equ	0xFD8
  6983                           
  6984 ;; *************** function i2_I2C_Master_Read *****************
  6985 ;; Defined at:
  6986 ;;		line 47 in file "I2C.c"
  6987 ;; Parameters:    Size  Location     Type
  6988 ;;  a               1    wreg     unsigned char 
  6989 ;; Auto vars:     Size  Location     Type
  6990 ;;  a               1    1[COMRAM] unsigned char 
  6991 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
  6992 ;; Return value:  Size  Location     Type
  6993 ;;                  1    wreg      unsigned char 
  6994 ;; Registers used:
  6995 ;;		wreg, status,2, status,0, cstack
  6996 ;; Tracked objects:
  6997 ;;		On entry : 0/0
  6998 ;;		On exit  : 0/0
  6999 ;;		Unchanged: 0/0
  7000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7002 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7004 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7005 ;;Total ram usage:        2 bytes
  7006 ;; Hardware stack levels used:    1
  7007 ;; Hardware stack levels required when called:    1
  7008 ;; This function calls:
  7009 ;;		i2_I2C_Master_Wait
  7010 ;; This function is called by:
  7011 ;;		i2_getTime
  7012 ;; This function uses a non-reentrant model
  7013 ;;
  7014                           
  7015                           	psect	text30
  7016  002674                     __ptext30:
  7017                           	opt stack 0
  7018  002674                     i2_I2C_Master_Read:
  7019                           	opt stack 22
  7020                           
  7021                           ;incstack = 0
  7022                           ;i2I2C_Master_Read@a stored from wreg
  7023  002674  6E02               	movwf	i2I2C_Master_Read@a,c
  7024                           
  7025                           ;I2C.c: 48: unsigned char temp;
  7026                           ;I2C.c: 49: I2C_Master_Wait();
  7027  002676  ECFA  F013         	call	i2_I2C_Master_Wait	;wreg free
  7028                           
  7029                           ;I2C.c: 50: RCEN = 1;
  7030  00267A  86C5               	bsf	4037,3,c	;volatile
  7031                           
  7032                           ;I2C.c: 51: I2C_Master_Wait();
  7033  00267C  ECFA  F013         	call	i2_I2C_Master_Wait	;wreg free
  7034                           
  7035                           ;I2C.c: 52: temp = SSPBUF;
  7036  002680  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
  7037                           
  7038                           ;I2C.c: 53: I2C_Master_Wait();
  7039  002684  ECFA  F013         	call	i2_I2C_Master_Wait	;wreg free
  7040                           
  7041                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
  7042  002688  5002               	movf	i2I2C_Master_Read@a,w,c
  7043  00268A  A4D8               	btfss	status,2,c
  7044  00268C  D002               	goto	i2u284_40
  7045  00268E  8AC5               	bsf	4037,5,c	;volatile
  7046  002690  D001               	goto	i2l3747
  7047  002692                     i2u284_40:
  7048  002692  9AC5               	bcf	4037,5,c	;volatile
  7049  002694                     i2l3747:
  7050                           
  7051                           ;I2C.c: 55: ACKEN = 1;
  7052  002694  88C5               	bsf	4037,4,c	;volatile
  7053                           
  7054                           ;I2C.c: 56: return temp;
  7055  002696  5003               	movf	i2I2C_Master_Read@temp,w,c
  7056  002698  0012               	return	
  7057  00269A                     __end_ofi2_I2C_Master_Read:
  7058                           	opt stack 0
  7059                           pclatu	equ	0xFFB
  7060                           pclath	equ	0xFFA
  7061                           tblptru	equ	0xFF8
  7062                           tblptrh	equ	0xFF7
  7063                           tblptrl	equ	0xFF6
  7064                           tablat	equ	0xFF5
  7065                           prodh	equ	0xFF4
  7066                           prodl	equ	0xFF3
  7067                           intcon	equ	0xFF2
  7068                           intcon2	equ	0xFF1
  7069                           intcon3	equ	0xFF0
  7070                           postinc0	equ	0xFEE
  7071                           fsr0h	equ	0xFEA
  7072                           fsr0l	equ	0xFE9
  7073                           wreg	equ	0xFE8
  7074                           postdec1	equ	0xFE5
  7075                           plusw1	equ	0xFE3
  7076                           fsr1h	equ	0xFE2
  7077                           fsr1l	equ	0xFE1
  7078                           indf2	equ	0xFDF
  7079                           postinc2	equ	0xFDE
  7080                           postdec2	equ	0xFDD
  7081                           plusw2	equ	0xFDB
  7082                           fsr2h	equ	0xFDA
  7083                           fsr2l	equ	0xFD9
  7084                           status	equ	0xFD8
  7085                           
  7086 ;; *************** function i2_I2C_Master_Wait *****************
  7087 ;; Defined at:
  7088 ;;		line 23 in file "I2C.c"
  7089 ;; Parameters:    Size  Location     Type
  7090 ;;		None
  7091 ;; Auto vars:     Size  Location     Type
  7092 ;;		None
  7093 ;; Return value:  Size  Location     Type
  7094 ;;                  1    wreg      void 
  7095 ;; Registers used:
  7096 ;;		wreg, status,2, status,0
  7097 ;; Tracked objects:
  7098 ;;		On entry : 0/0
  7099 ;;		On exit  : 0/0
  7100 ;;		Unchanged: 0/0
  7101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7103 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7104 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7105 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7106 ;;Total ram usage:        1 bytes
  7107 ;; Hardware stack levels used:    1
  7108 ;; This function calls:
  7109 ;;		Nothing
  7110 ;; This function is called by:
  7111 ;;		i2_I2C_Master_Start
  7112 ;;		i2_I2C_Master_Stop
  7113 ;;		i2_I2C_Master_Write
  7114 ;;		i2_I2C_Master_Read
  7115 ;; This function uses a non-reentrant model
  7116 ;;
  7117                           
  7118                           	psect	text31
  7119  0027F4                     __ptext31:
  7120                           	opt stack 0
  7121  0027F4                     i2_I2C_Master_Wait:
  7122                           	opt stack 22
  7123  0027F4                     i2l445:
  7124  0027F4  B4C7               	btfsc	4039,2,c	;volatile
  7125  0027F6  D7FE               	goto	i2l445
  7126  0027F8  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
  7127  0027FC  0E1F               	movlw	31
  7128  0027FE  1601               	andwf	??i2_I2C_Master_Wait,f,c
  7129  002800  B4D8               	btfsc	status,2,c
  7130  002802  0012               	return	
  7131  002804  D7F7               	goto	i2l445
  7132  002806                     __end_ofi2_I2C_Master_Wait:
  7133                           	opt stack 0
  7134                           pclatu	equ	0xFFB
  7135                           pclath	equ	0xFFA
  7136                           tblptru	equ	0xFF8
  7137                           tblptrh	equ	0xFF7
  7138                           tblptrl	equ	0xFF6
  7139                           tablat	equ	0xFF5
  7140                           prodh	equ	0xFF4
  7141                           prodl	equ	0xFF3
  7142                           intcon	equ	0xFF2
  7143                           intcon2	equ	0xFF1
  7144                           intcon3	equ	0xFF0
  7145                           postinc0	equ	0xFEE
  7146                           fsr0h	equ	0xFEA
  7147                           fsr0l	equ	0xFE9
  7148                           wreg	equ	0xFE8
  7149                           postdec1	equ	0xFE5
  7150                           plusw1	equ	0xFE3
  7151                           fsr1h	equ	0xFE2
  7152                           fsr1l	equ	0xFE1
  7153                           indf2	equ	0xFDF
  7154                           postinc2	equ	0xFDE
  7155                           postdec2	equ	0xFDD
  7156                           plusw2	equ	0xFDB
  7157                           fsr2h	equ	0xFDA
  7158                           fsr2l	equ	0xFD9
  7159                           status	equ	0xFD8
  7160                           
  7161 ;; *************** function _stopMoving *****************
  7162 ;; Defined at:
  7163 ;;		line 109 in file "motors.c"
  7164 ;; Parameters:    Size  Location     Type
  7165 ;;  em              1    wreg     unsigned char 
  7166 ;; Auto vars:     Size  Location     Type
  7167 ;;  em              1   36[COMRAM] unsigned char 
  7168 ;; Return value:  Size  Location     Type
  7169 ;;                  1    wreg      void 
  7170 ;; Registers used:
  7171 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7172 ;; Tracked objects:
  7173 ;;		On entry : 0/0
  7174 ;;		On exit  : 0/0
  7175 ;;		Unchanged: 0/0
  7176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7178 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7180 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7181 ;;Total ram usage:        3 bytes
  7182 ;; Hardware stack levels used:    1
  7183 ;; Hardware stack levels required when called:    3
  7184 ;; This function calls:
  7185 ;;		i2_lcdInst
  7186 ;;		i2_printf
  7187 ;; This function is called by:
  7188 ;;		_mainloop
  7189 ;;		_simulate
  7190 ;;		_intrpt
  7191 ;; This function uses a non-reentrant model
  7192 ;;
  7193                           
  7194                           	psect	text32
  7195  0024F8                     __ptext32:
  7196                           	opt stack 0
  7197  0024F8                     _stopMoving:
  7198                           	opt stack 22
  7199                           
  7200                           ;incstack = 0
  7201                           ;stopMoving@em stored from wreg
  7202  0024F8  6E25               	movwf	stopMoving@em,c
  7203                           
  7204                           ;motors.c: 110: (INTCONbits.GIE = 0);
  7205  0024FA  9EF2               	bcf	intcon,7,c	;volatile
  7206                           
  7207                           ;motors.c: 111: LATC = 0;
  7208  0024FC  0E00               	movlw	0
  7209  0024FE  6E8B               	movwf	3979,c	;volatile
  7210                           
  7211                           ;motors.c: 112: lcdInst(0b10000000);
  7212  002500  0E80               	movlw	128
  7213  002502  EC19  F014         	call	i2_lcdInst
  7214                           
  7215                           ;motors.c: 113: printf(em ? "Emergency          " : "Stopped          ");
  7216  002506  5025               	movf	stopMoving@em,w,c
  7217  002508  A4D8               	btfss	status,2,c
  7218  00250A  D004               	goto	i2l4097
  7219  00250C  0E8A               	movlw	low STR_49
  7220  00250E  6E23               	movwf	_stopMoving$595,c
  7221  002510  0EFF               	movlw	high STR_49
  7222  002512  D003               	goto	L1
  7223  002514                     i2l4097:
  7224  002514  0E51               	movlw	low STR_48
  7225  002516  6E23               	movwf	_stopMoving$595,c
  7226  002518  0EFF               	movlw	high STR_48
  7227  00251A                     L1:
  7228  00251A  6E24               	movwf	_stopMoving$595+1,c
  7229  00251C  C023  F00D         	movff	_stopMoving$595,i2printf@f
  7230  002520  C024  F00E         	movff	_stopMoving$595+1,i2printf@f+1
  7231  002524  EC3E  F002         	call	i2_printf	;wreg free
  7232                           
  7233                           ;motors.c: 114: if (em) while(1);
  7234  002528  5025               	movf	stopMoving@em,w,c
  7235  00252A  B4D8               	btfsc	status,2,c
  7236  00252C  0012               	return	
  7237  00252E                     i2l352:
  7238  00252E  D7FF               	goto	i2l352
  7239  002530                     __end_of_stopMoving:
  7240                           	opt stack 0
  7241                           pclatu	equ	0xFFB
  7242                           pclath	equ	0xFFA
  7243                           tblptru	equ	0xFF8
  7244                           tblptrh	equ	0xFF7
  7245                           tblptrl	equ	0xFF6
  7246                           tablat	equ	0xFF5
  7247                           prodh	equ	0xFF4
  7248                           prodl	equ	0xFF3
  7249                           intcon	equ	0xFF2
  7250                           intcon2	equ	0xFF1
  7251                           intcon3	equ	0xFF0
  7252                           postinc0	equ	0xFEE
  7253                           fsr0h	equ	0xFEA
  7254                           fsr0l	equ	0xFE9
  7255                           wreg	equ	0xFE8
  7256                           postdec1	equ	0xFE5
  7257                           plusw1	equ	0xFE3
  7258                           fsr1h	equ	0xFE2
  7259                           fsr1l	equ	0xFE1
  7260                           indf2	equ	0xFDF
  7261                           postinc2	equ	0xFDE
  7262                           postdec2	equ	0xFDD
  7263                           plusw2	equ	0xFDB
  7264                           fsr2h	equ	0xFDA
  7265                           fsr2l	equ	0xFD9
  7266                           status	equ	0xFD8
  7267                           
  7268 ;; *************** function _openGate *****************
  7269 ;; Defined at:
  7270 ;;		line 117 in file "motors.c"
  7271 ;; Parameters:    Size  Location     Type
  7272 ;;		None
  7273 ;; Auto vars:     Size  Location     Type
  7274 ;;		None
  7275 ;; Return value:  Size  Location     Type
  7276 ;;                  1    wreg      void 
  7277 ;; Registers used:
  7278 ;;		wreg
  7279 ;; Tracked objects:
  7280 ;;		On entry : 0/0
  7281 ;;		On exit  : 0/0
  7282 ;;		Unchanged: 0/0
  7283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7286 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7287 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7288 ;;Total ram usage:        2 bytes
  7289 ;; Hardware stack levels used:    1
  7290 ;; This function calls:
  7291 ;;		Nothing
  7292 ;; This function is called by:
  7293 ;;		_mainloop
  7294 ;;		_simulate
  7295 ;; This function uses a non-reentrant model
  7296 ;;
  7297                           
  7298                           	psect	text33
  7299  002708                     __ptext33:
  7300                           	opt stack 0
  7301  002708                     _openGate:
  7302                           	opt stack 24
  7303                           
  7304                           ;motors.c: 118: LATC7 = 0;
  7305                           
  7306                           ;incstack = 0
  7307  002708  9E8B               	bcf	3979,7,c	;volatile
  7308                           
  7309                           ;motors.c: 119: LATC5 = 1;
  7310  00270A  8A8B               	bsf	3979,5,c	;volatile
  7311                           
  7312                           ;motors.c: 120: _delay((unsigned long)((160)*(8000000/4000.0)));
  7313  00270C  0E02               	movlw	2
  7314  00270E  6E02               	movwf	(??_openGate+1)& (0+255),c
  7315  002710  0EA0               	movlw	160
  7316  002712  6E01               	movwf	??_openGate& (0+255),c
  7317  002714  0E92               	movlw	146
  7318  002716                     i2u386_47:
  7319  002716  2EE8               	decfsz	wreg,f,c
  7320  002718  D7FE               	bra	i2u386_47
  7321  00271A  2E01               	decfsz	??_openGate& (0+255),f,c
  7322  00271C  D7FC               	bra	i2u386_47
  7323  00271E  2E02               	decfsz	(??_openGate+1)& (0+255),f,c
  7324  002720  D7FA               	bra	i2u386_47
  7325  002722  D000               	nop2	
  7326                           
  7327                           ;motors.c: 121: LATC5 = 0;
  7328  002724  9A8B               	bcf	3979,5,c	;volatile
  7329  002726  0012               	return		;funcret
  7330  002728                     __end_of_openGate:
  7331                           	opt stack 0
  7332                           pclatu	equ	0xFFB
  7333                           pclath	equ	0xFFA
  7334                           tblptru	equ	0xFF8
  7335                           tblptrh	equ	0xFF7
  7336                           tblptrl	equ	0xFF6
  7337                           tablat	equ	0xFF5
  7338                           prodh	equ	0xFF4
  7339                           prodl	equ	0xFF3
  7340                           intcon	equ	0xFF2
  7341                           intcon2	equ	0xFF1
  7342                           intcon3	equ	0xFF0
  7343                           postinc0	equ	0xFEE
  7344                           fsr0h	equ	0xFEA
  7345                           fsr0l	equ	0xFE9
  7346                           wreg	equ	0xFE8
  7347                           postdec1	equ	0xFE5
  7348                           plusw1	equ	0xFE3
  7349                           fsr1h	equ	0xFE2
  7350                           fsr1l	equ	0xFE1
  7351                           indf2	equ	0xFDF
  7352                           postinc2	equ	0xFDE
  7353                           postdec2	equ	0xFDD
  7354                           plusw2	equ	0xFDB
  7355                           fsr2h	equ	0xFDA
  7356                           fsr2l	equ	0xFD9
  7357                           status	equ	0xFD8
  7358                           
  7359 ;; *************** function _closeGate *****************
  7360 ;; Defined at:
  7361 ;;		line 124 in file "motors.c"
  7362 ;; Parameters:    Size  Location     Type
  7363 ;;		None
  7364 ;; Auto vars:     Size  Location     Type
  7365 ;;		None
  7366 ;; Return value:  Size  Location     Type
  7367 ;;                  1    wreg      void 
  7368 ;; Registers used:
  7369 ;;		wreg
  7370 ;; Tracked objects:
  7371 ;;		On entry : 0/0
  7372 ;;		On exit  : 0/0
  7373 ;;		Unchanged: 0/0
  7374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7377 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7378 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7379 ;;Total ram usage:        2 bytes
  7380 ;; Hardware stack levels used:    1
  7381 ;; This function calls:
  7382 ;;		Nothing
  7383 ;; This function is called by:
  7384 ;;		_mainloop
  7385 ;;		_simulate
  7386 ;; This function uses a non-reentrant model
  7387 ;;
  7388                           
  7389                           	psect	text34
  7390  002728                     __ptext34:
  7391                           	opt stack 0
  7392  002728                     _closeGate:
  7393                           	opt stack 24
  7394                           
  7395                           ;motors.c: 125: LATC5 = 0;
  7396                           
  7397                           ;incstack = 0
  7398  002728  9A8B               	bcf	3979,5,c	;volatile
  7399                           
  7400                           ;motors.c: 126: LATC7 = 1;
  7401  00272A  8E8B               	bsf	3979,7,c	;volatile
  7402                           
  7403                           ;motors.c: 127: _delay((unsigned long)((160)*(8000000/4000.0)));
  7404  00272C  0E02               	movlw	2
  7405  00272E  6E02               	movwf	(??_closeGate+1)& (0+255),c
  7406  002730  0EA0               	movlw	160
  7407  002732  6E01               	movwf	??_closeGate& (0+255),c
  7408  002734  0E92               	movlw	146
  7409  002736                     i2u387_47:
  7410  002736  2EE8               	decfsz	wreg,f,c
  7411  002738  D7FE               	bra	i2u387_47
  7412  00273A  2E01               	decfsz	??_closeGate& (0+255),f,c
  7413  00273C  D7FC               	bra	i2u387_47
  7414  00273E  2E02               	decfsz	(??_closeGate+1)& (0+255),f,c
  7415  002740  D7FA               	bra	i2u387_47
  7416  002742  D000               	nop2	
  7417                           
  7418                           ;motors.c: 128: LATC7 = 0;
  7419  002744  9E8B               	bcf	3979,7,c	;volatile
  7420  002746  0012               	return		;funcret
  7421  002748                     __end_of_closeGate:
  7422                           	opt stack 0
  7423                           pclatu	equ	0xFFB
  7424                           pclath	equ	0xFFA
  7425                           tblptru	equ	0xFF8
  7426                           tblptrh	equ	0xFF7
  7427                           tblptrl	equ	0xFF6
  7428                           tablat	equ	0xFF5
  7429                           prodh	equ	0xFF4
  7430                           prodl	equ	0xFF3
  7431                           intcon	equ	0xFF2
  7432                           intcon2	equ	0xFF1
  7433                           intcon3	equ	0xFF0
  7434                           postinc0	equ	0xFEE
  7435                           fsr0h	equ	0xFEA
  7436                           fsr0l	equ	0xFE9
  7437                           wreg	equ	0xFE8
  7438                           postdec1	equ	0xFE5
  7439                           plusw1	equ	0xFE3
  7440                           fsr1h	equ	0xFE2
  7441                           fsr1l	equ	0xFE1
  7442                           indf2	equ	0xFDF
  7443                           postinc2	equ	0xFDE
  7444                           postdec2	equ	0xFDD
  7445                           plusw2	equ	0xFDB
  7446                           fsr2h	equ	0xFDA
  7447                           fsr2l	equ	0xFD9
  7448                           status	equ	0xFD8
  7449                           
  7450 ;; *************** function _checkC *****************
  7451 ;; Defined at:
  7452 ;;		line 53 in file "sensors.c"
  7453 ;; Parameters:    Size  Location     Type
  7454 ;;  sorted          2   45[COMRAM] PTR unsigned char 
  7455 ;;		 -> simulate@sorted(4), mainloop@sorted(4), 
  7456 ;; Auto vars:     Size  Location     Type
  7457 ;;  V               2   49[COMRAM] int 
  7458 ;; Return value:  Size  Location     Type
  7459 ;;                  2   45[COMRAM] int 
  7460 ;; Registers used:
  7461 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7462 ;; Tracked objects:
  7463 ;;		On entry : 0/0
  7464 ;;		On exit  : 0/0
  7465 ;;		Unchanged: 0/0
  7466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7467 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7468 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7469 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7470 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7471 ;;Total ram usage:        6 bytes
  7472 ;; Hardware stack levels used:    1
  7473 ;; Hardware stack levels required when called:    4
  7474 ;; This function calls:
  7475 ;;		_checkV
  7476 ;;		_printV
  7477 ;;		i2_printf
  7478 ;; This function is called by:
  7479 ;;		_mainloop
  7480 ;;		_simulate
  7481 ;; This function uses a non-reentrant model
  7482 ;;
  7483                           
  7484                           	psect	text35
  7485  002008                     __ptext35:
  7486                           	opt stack 0
  7487  002008                     _checkC:
  7488                           	opt stack 20
  7489                           
  7490                           ;sensors.c: 56: printf("C:");
  7491                           
  7492                           ;incstack = 0
  7493  002008  0EEE               	movlw	low (STR_7+1)
  7494  00200A  6E0D               	movwf	i2printf@f,c
  7495  00200C  0EFF               	movlw	high (STR_7+1)
  7496  00200E  6E0E               	movwf	i2printf@f+1,c
  7497  002010  EC3E  F002         	call	i2_printf	;wreg free
  7498                           
  7499                           ;sensors.c: 57: int V = checkV(0, 1.5 / 5 * 1023);
  7500  002014  0E01               	movlw	1
  7501  002016  6E26               	movwf	checkV@threshhold+1,c
  7502  002018  0E32               	movlw	50
  7503  00201A  6E25               	movwf	checkV@threshhold,c
  7504  00201C  0E00               	movlw	0
  7505  00201E  ECD0  F00B         	call	_checkV
  7506  002022  C025  F032         	movff	?_checkV,checkC@V
  7507  002026  C026  F033         	movff	?_checkV+1,checkC@V+1
  7508                           
  7509                           ;sensors.c: 58: printV(V);
  7510  00202A  C032  F023         	movff	checkC@V,printV@charged
  7511  00202E  C033  F024         	movff	checkC@V+1,printV@charged+1
  7512  002032  EC26  F013         	call	_printV	;wreg free
  7513                           
  7514                           ;sensors.c: 59: switch (V) {
  7515  002036  D00F               	goto	i2l3977
  7516  002038                     i2l3975:
  7517                           
  7518                           ;sensors.c: 61: sorted[1]++;
  7519  002038  EE20 F001          	lfsr	2,1
  7520  00203C  502E               	movf	checkC@sorted,w,c
  7521  00203E  26D9               	addwf	fsr2l,f,c
  7522  002040  502F               	movf	checkC@sorted+1,w,c
  7523  002042  22DA               	addwfc	fsr2h,f,c
  7524  002044  2ADF               	incf	indf2,f,c
  7525  002046                     i2l406:
  7526                           
  7527                           ;sensors.c: 63: sorted[3]++;
  7528  002046  EE20 F003          	lfsr	2,3
  7529  00204A  502E               	movf	checkC@sorted,w,c
  7530  00204C  26D9               	addwf	fsr2l,f,c
  7531  00204E  502F               	movf	checkC@sorted+1,w,c
  7532  002050  22DA               	addwfc	fsr2h,f,c
  7533  002052  2ADF               	incf	indf2,f,c
  7534                           
  7535                           ;sensors.c: 64: }
  7536  002054  D00F               	goto	i2l407
  7537  002056                     i2l3977:
  7538  002056  C032  F030         	movff	checkC@V,??_checkC
  7539  00205A  C033  F031         	movff	checkC@V+1,??_checkC+1
  7540                           
  7541                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7542                           ; Switch size 1, requested type "space"
  7543                           ; Number of cases is 1, Range of values is 0 to 0
  7544                           ; switch strategies available:
  7545                           ; Name         Instructions Cycles
  7546                           ; simple_byte            4     3 (average)
  7547                           ;	Chosen strategy is simple_byte
  7548  00205E  5031               	movf	??_checkC+1,w,c
  7549  002060  0A00               	xorlw	0	; case 0
  7550  002062  A4D8               	btfss	status,2,c
  7551  002064  D007               	goto	i2l407
  7552                           
  7553                           ; Switch size 1, requested type "space"
  7554                           ; Number of cases is 2, Range of values is 0 to 1
  7555                           ; switch strategies available:
  7556                           ; Name         Instructions Cycles
  7557                           ; simple_byte            7     4 (average)
  7558                           ;	Chosen strategy is simple_byte
  7559  002066  5030               	movf	??_checkC,w,c
  7560  002068  0A00               	xorlw	0	; case 0
  7561  00206A  B4D8               	btfsc	status,2,c
  7562  00206C  D7EC               	goto	i2l406
  7563  00206E  0A01               	xorlw	1	; case 1
  7564  002070  B4D8               	btfsc	status,2,c
  7565  002072  D7E2               	goto	i2l3975
  7566  002074                     i2l407:
  7567                           
  7568                           ;sensors.c: 65: return V;
  7569  002074  C032  F02E         	movff	checkC@V,?_checkC
  7570  002078  C033  F02F         	movff	checkC@V+1,?_checkC+1
  7571  00207C  0012               	return		;funcret
  7572  00207E                     __end_of_checkC:
  7573                           	opt stack 0
  7574                           pclatu	equ	0xFFB
  7575                           pclath	equ	0xFFA
  7576                           tblptru	equ	0xFF8
  7577                           tblptrh	equ	0xFF7
  7578                           tblptrl	equ	0xFF6
  7579                           tablat	equ	0xFF5
  7580                           prodh	equ	0xFF4
  7581                           prodl	equ	0xFF3
  7582                           intcon	equ	0xFF2
  7583                           intcon2	equ	0xFF1
  7584                           intcon3	equ	0xFF0
  7585                           postinc0	equ	0xFEE
  7586                           fsr0h	equ	0xFEA
  7587                           fsr0l	equ	0xFE9
  7588                           wreg	equ	0xFE8
  7589                           postdec1	equ	0xFE5
  7590                           plusw1	equ	0xFE3
  7591                           fsr1h	equ	0xFE2
  7592                           fsr1l	equ	0xFE1
  7593                           indf2	equ	0xFDF
  7594                           postinc2	equ	0xFDE
  7595                           postdec2	equ	0xFDD
  7596                           plusw2	equ	0xFDB
  7597                           fsr2h	equ	0xFDA
  7598                           fsr2l	equ	0xFD9
  7599                           status	equ	0xFD8
  7600                           
  7601 ;; *************** function _checkAA *****************
  7602 ;; Defined at:
  7603 ;;		line 39 in file "sensors.c"
  7604 ;; Parameters:    Size  Location     Type
  7605 ;;  sorted          2   45[COMRAM] PTR unsigned char 
  7606 ;;		 -> simulate@sorted(4), mainloop@sorted(4), 
  7607 ;; Auto vars:     Size  Location     Type
  7608 ;;  V               2   49[COMRAM] int 
  7609 ;; Return value:  Size  Location     Type
  7610 ;;                  2   45[COMRAM] int 
  7611 ;; Registers used:
  7612 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7613 ;; Tracked objects:
  7614 ;;		On entry : 0/0
  7615 ;;		On exit  : 0/0
  7616 ;;		Unchanged: 0/0
  7617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7618 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7619 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7620 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7621 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7622 ;;Total ram usage:        6 bytes
  7623 ;; Hardware stack levels used:    1
  7624 ;; Hardware stack levels required when called:    4
  7625 ;; This function calls:
  7626 ;;		_checkV
  7627 ;;		_printV
  7628 ;;		i2_printf
  7629 ;; This function is called by:
  7630 ;;		_mainloop
  7631 ;;		_simulate
  7632 ;; This function uses a non-reentrant model
  7633 ;;
  7634                           
  7635                           	psect	text36
  7636  0020F4                     __ptext36:
  7637                           	opt stack 0
  7638  0020F4                     _checkAA:
  7639                           	opt stack 20
  7640                           
  7641                           ;sensors.c: 40: printf("AA:");
  7642                           
  7643                           ;incstack = 0
  7644  0020F4  0EE5               	movlw	low (STR_11+1)
  7645  0020F6  6E0D               	movwf	i2printf@f,c
  7646  0020F8  0EFF               	movlw	high (STR_11+1)
  7647  0020FA  6E0E               	movwf	i2printf@f+1,c
  7648  0020FC  EC3E  F002         	call	i2_printf	;wreg free
  7649                           
  7650                           ;sensors.c: 42: int V = checkV(2, 1.5 / 5 * 1023);
  7651  002100  0E01               	movlw	1
  7652  002102  6E26               	movwf	checkV@threshhold+1,c
  7653  002104  0E32               	movlw	50
  7654  002106  6E25               	movwf	checkV@threshhold,c
  7655  002108  0E02               	movlw	2
  7656  00210A  ECD0  F00B         	call	_checkV
  7657  00210E  C025  F032         	movff	?_checkV,checkAA@V
  7658  002112  C026  F033         	movff	?_checkV+1,checkAA@V+1
  7659                           
  7660                           ;sensors.c: 43: printV(V);
  7661  002116  C032  F023         	movff	checkAA@V,printV@charged
  7662  00211A  C033  F024         	movff	checkAA@V+1,printV@charged+1
  7663  00211E  EC26  F013         	call	_printV	;wreg free
  7664                           
  7665                           ;sensors.c: 44: switch (V) {
  7666  002122  D00D               	goto	i2l3993
  7667  002124                     i2l3989:
  7668                           
  7669                           ;sensors.c: 46: sorted[0]++;
  7670  002124  C02E  FFD9         	movff	checkAA@sorted,fsr2l
  7671  002128  C02F  FFDA         	movff	checkAA@sorted+1,fsr2h
  7672  00212C  2ADF               	incf	indf2,f,c
  7673  00212E                     i2l3991:
  7674                           
  7675                           ;sensors.c: 48: sorted[3]++;
  7676  00212E  EE20 F003          	lfsr	2,3
  7677  002132  502E               	movf	checkAA@sorted,w,c
  7678  002134  26D9               	addwf	fsr2l,f,c
  7679  002136  502F               	movf	checkAA@sorted+1,w,c
  7680  002138  22DA               	addwfc	fsr2h,f,c
  7681  00213A  2ADF               	incf	indf2,f,c
  7682                           
  7683                           ;sensors.c: 49: }
  7684  00213C  D00F               	goto	i2l400
  7685  00213E                     i2l3993:
  7686  00213E  C032  F030         	movff	checkAA@V,??_checkAA
  7687  002142  C033  F031         	movff	checkAA@V+1,??_checkAA+1
  7688                           
  7689                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7690                           ; Switch size 1, requested type "space"
  7691                           ; Number of cases is 1, Range of values is 0 to 0
  7692                           ; switch strategies available:
  7693                           ; Name         Instructions Cycles
  7694                           ; simple_byte            4     3 (average)
  7695                           ;	Chosen strategy is simple_byte
  7696  002146  5031               	movf	??_checkAA+1,w,c
  7697  002148  0A00               	xorlw	0	; case 0
  7698  00214A  A4D8               	btfss	status,2,c
  7699  00214C  D007               	goto	i2l400
  7700                           
  7701                           ; Switch size 1, requested type "space"
  7702                           ; Number of cases is 2, Range of values is 0 to 1
  7703                           ; switch strategies available:
  7704                           ; Name         Instructions Cycles
  7705                           ; simple_byte            7     4 (average)
  7706                           ;	Chosen strategy is simple_byte
  7707  00214E  5030               	movf	??_checkAA,w,c
  7708  002150  0A00               	xorlw	0	; case 0
  7709  002152  B4D8               	btfsc	status,2,c
  7710  002154  D7EC               	goto	i2l3991
  7711  002156  0A01               	xorlw	1	; case 1
  7712  002158  B4D8               	btfsc	status,2,c
  7713  00215A  D7E4               	goto	i2l3989
  7714  00215C                     i2l400:
  7715                           
  7716                           ;sensors.c: 50: return V;
  7717  00215C  C032  F02E         	movff	checkAA@V,?_checkAA
  7718  002160  C033  F02F         	movff	checkAA@V+1,?_checkAA+1
  7719  002164  0012               	return		;funcret
  7720  002166                     __end_of_checkAA:
  7721                           	opt stack 0
  7722                           pclatu	equ	0xFFB
  7723                           pclath	equ	0xFFA
  7724                           tblptru	equ	0xFF8
  7725                           tblptrh	equ	0xFF7
  7726                           tblptrl	equ	0xFF6
  7727                           tablat	equ	0xFF5
  7728                           prodh	equ	0xFF4
  7729                           prodl	equ	0xFF3
  7730                           intcon	equ	0xFF2
  7731                           intcon2	equ	0xFF1
  7732                           intcon3	equ	0xFF0
  7733                           postinc0	equ	0xFEE
  7734                           fsr0h	equ	0xFEA
  7735                           fsr0l	equ	0xFE9
  7736                           wreg	equ	0xFE8
  7737                           postdec1	equ	0xFE5
  7738                           plusw1	equ	0xFE3
  7739                           fsr1h	equ	0xFE2
  7740                           fsr1l	equ	0xFE1
  7741                           indf2	equ	0xFDF
  7742                           postinc2	equ	0xFDE
  7743                           postdec2	equ	0xFDD
  7744                           plusw2	equ	0xFDB
  7745                           fsr2h	equ	0xFDA
  7746                           fsr2l	equ	0xFD9
  7747                           status	equ	0xFD8
  7748                           
  7749 ;; *************** function _check9 *****************
  7750 ;; Defined at:
  7751 ;;		line 68 in file "sensors.c"
  7752 ;; Parameters:    Size  Location     Type
  7753 ;;  sorted          2   45[COMRAM] PTR unsigned char 
  7754 ;;		 -> simulate@sorted(4), mainloop@sorted(4), 
  7755 ;; Auto vars:     Size  Location     Type
  7756 ;;  V               2   49[COMRAM] int 
  7757 ;; Return value:  Size  Location     Type
  7758 ;;                  2   45[COMRAM] int 
  7759 ;; Registers used:
  7760 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7761 ;; Tracked objects:
  7762 ;;		On entry : 0/0
  7763 ;;		On exit  : 0/0
  7764 ;;		Unchanged: 0/0
  7765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7766 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7767 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7768 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7769 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7770 ;;Total ram usage:        6 bytes
  7771 ;; Hardware stack levels used:    1
  7772 ;; Hardware stack levels required when called:    4
  7773 ;; This function calls:
  7774 ;;		_checkV
  7775 ;;		_printV
  7776 ;;		i2_printf
  7777 ;; This function is called by:
  7778 ;;		_mainloop
  7779 ;;		_simulate
  7780 ;; This function uses a non-reentrant model
  7781 ;;
  7782                           
  7783                           	psect	text37
  7784  00207E                     __ptext37:
  7785                           	opt stack 0
  7786  00207E                     _check9:
  7787                           	opt stack 20
  7788                           
  7789                           ;sensors.c: 71: printf("9V:");
  7790                           
  7791                           ;incstack = 0
  7792  00207E  0EF1               	movlw	low STR_3
  7793  002080  6E0D               	movwf	i2printf@f,c
  7794  002082  0EFF               	movlw	high STR_3
  7795  002084  6E0E               	movwf	i2printf@f+1,c
  7796  002086  EC3E  F002         	call	i2_printf	;wreg free
  7797                           
  7798                           ;sensors.c: 72: int V = checkV(5, 3.65 / 5 * 1023);
  7799  00208A  0E02               	movlw	2
  7800  00208C  6E26               	movwf	checkV@threshhold+1,c
  7801  00208E  0EEA               	movlw	234
  7802  002090  6E25               	movwf	checkV@threshhold,c
  7803  002092  0E05               	movlw	5
  7804  002094  ECD0  F00B         	call	_checkV
  7805  002098  C025  F032         	movff	?_checkV,check9@V
  7806  00209C  C026  F033         	movff	?_checkV+1,check9@V+1
  7807                           
  7808                           ;sensors.c: 73: printV(V);
  7809  0020A0  C032  F023         	movff	check9@V,printV@charged
  7810  0020A4  C033  F024         	movff	check9@V+1,printV@charged+1
  7811  0020A8  EC26  F013         	call	_printV	;wreg free
  7812                           
  7813                           ;sensors.c: 74: switch (V) {
  7814  0020AC  D00F               	goto	i2l3963
  7815  0020AE                     i2l3961:
  7816                           
  7817                           ;sensors.c: 76: sorted[2]++;
  7818  0020AE  EE20 F002          	lfsr	2,2
  7819  0020B2  502E               	movf	check9@sorted,w,c
  7820  0020B4  26D9               	addwf	fsr2l,f,c
  7821  0020B6  502F               	movf	check9@sorted+1,w,c
  7822  0020B8  22DA               	addwfc	fsr2h,f,c
  7823  0020BA  2ADF               	incf	indf2,f,c
  7824  0020BC                     i2l413:
  7825                           
  7826                           ;sensors.c: 78: sorted[3]++;
  7827  0020BC  EE20 F003          	lfsr	2,3
  7828  0020C0  502E               	movf	check9@sorted,w,c
  7829  0020C2  26D9               	addwf	fsr2l,f,c
  7830  0020C4  502F               	movf	check9@sorted+1,w,c
  7831  0020C6  22DA               	addwfc	fsr2h,f,c
  7832  0020C8  2ADF               	incf	indf2,f,c
  7833                           
  7834                           ;sensors.c: 79: }
  7835  0020CA  D00F               	goto	i2l414
  7836  0020CC                     i2l3963:
  7837  0020CC  C032  F030         	movff	check9@V,??_check9
  7838  0020D0  C033  F031         	movff	check9@V+1,??_check9+1
  7839                           
  7840                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7841                           ; Switch size 1, requested type "space"
  7842                           ; Number of cases is 1, Range of values is 0 to 0
  7843                           ; switch strategies available:
  7844                           ; Name         Instructions Cycles
  7845                           ; simple_byte            4     3 (average)
  7846                           ;	Chosen strategy is simple_byte
  7847  0020D4  5031               	movf	??_check9+1,w,c
  7848  0020D6  0A00               	xorlw	0	; case 0
  7849  0020D8  A4D8               	btfss	status,2,c
  7850  0020DA  D007               	goto	i2l414
  7851                           
  7852                           ; Switch size 1, requested type "space"
  7853                           ; Number of cases is 2, Range of values is 0 to 1
  7854                           ; switch strategies available:
  7855                           ; Name         Instructions Cycles
  7856                           ; simple_byte            7     4 (average)
  7857                           ;	Chosen strategy is simple_byte
  7858  0020DC  5030               	movf	??_check9,w,c
  7859  0020DE  0A00               	xorlw	0	; case 0
  7860  0020E0  B4D8               	btfsc	status,2,c
  7861  0020E2  D7EC               	goto	i2l413
  7862  0020E4  0A01               	xorlw	1	; case 1
  7863  0020E6  B4D8               	btfsc	status,2,c
  7864  0020E8  D7E2               	goto	i2l3961
  7865  0020EA                     i2l414:
  7866                           
  7867                           ;sensors.c: 80: return V;
  7868  0020EA  C032  F02E         	movff	check9@V,?_check9
  7869  0020EE  C033  F02F         	movff	check9@V+1,?_check9+1
  7870  0020F2  0012               	return		;funcret
  7871  0020F4                     __end_of_check9:
  7872                           	opt stack 0
  7873                           pclatu	equ	0xFFB
  7874                           pclath	equ	0xFFA
  7875                           tblptru	equ	0xFF8
  7876                           tblptrh	equ	0xFF7
  7877                           tblptrl	equ	0xFF6
  7878                           tablat	equ	0xFF5
  7879                           prodh	equ	0xFF4
  7880                           prodl	equ	0xFF3
  7881                           intcon	equ	0xFF2
  7882                           intcon2	equ	0xFF1
  7883                           intcon3	equ	0xFF0
  7884                           postinc0	equ	0xFEE
  7885                           fsr0h	equ	0xFEA
  7886                           fsr0l	equ	0xFE9
  7887                           wreg	equ	0xFE8
  7888                           postdec1	equ	0xFE5
  7889                           plusw1	equ	0xFE3
  7890                           fsr1h	equ	0xFE2
  7891                           fsr1l	equ	0xFE1
  7892                           indf2	equ	0xFDF
  7893                           postinc2	equ	0xFDE
  7894                           postdec2	equ	0xFDD
  7895                           plusw2	equ	0xFDB
  7896                           fsr2h	equ	0xFDA
  7897                           fsr2l	equ	0xFD9
  7898                           status	equ	0xFD8
  7899                           
  7900 ;; *************** function _printV *****************
  7901 ;; Defined at:
  7902 ;;		line 28 in file "sensors.c"
  7903 ;; Parameters:    Size  Location     Type
  7904 ;;  charged         2   34[COMRAM] int 
  7905 ;; Auto vars:     Size  Location     Type
  7906 ;;		None
  7907 ;; Return value:  Size  Location     Type
  7908 ;;                  1    wreg      void 
  7909 ;; Registers used:
  7910 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7911 ;; Tracked objects:
  7912 ;;		On entry : 0/0
  7913 ;;		On exit  : 0/0
  7914 ;;		Unchanged: 0/0
  7915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7916 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7919 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7920 ;;Total ram usage:        2 bytes
  7921 ;; Hardware stack levels used:    1
  7922 ;; Hardware stack levels required when called:    3
  7923 ;; This function calls:
  7924 ;;		i2_printf
  7925 ;; This function is called by:
  7926 ;;		_checkAA
  7927 ;;		_checkC
  7928 ;;		_check9
  7929 ;; This function uses a non-reentrant model
  7930 ;;
  7931                           
  7932                           	psect	text38
  7933  00264C                     __ptext38:
  7934                           	opt stack 0
  7935  00264C                     _printV:
  7936                           	opt stack 20
  7937                           
  7938                           ;sensors.c: 31: if (charged < 0) {
  7939                           
  7940                           ;incstack = 0
  7941  00264C  AE24               	btfss	printV@charged+1,7,c
  7942  00264E  D007               	goto	i2l3607
  7943                           
  7944                           ;sensors.c: 32: printf("-1 ");
  7945  002650  0EE9               	movlw	low STR_50
  7946  002652  6E0D               	movwf	i2printf@f,c
  7947  002654  0EFF               	movlw	high STR_50
  7948  002656  6E0E               	movwf	i2printf@f+1,c
  7949  002658  EC3E  F002         	call	i2_printf	;wreg free
  7950                           
  7951                           ;sensors.c: 33: } else {
  7952  00265C  0012               	return	
  7953  00265E                     i2l3607:
  7954                           
  7955                           ;sensors.c: 34: printf(" %d ", charged);
  7956  00265E  0EDF               	movlw	low STR_51
  7957  002660  6E0D               	movwf	i2printf@f,c
  7958  002662  0EFF               	movlw	high STR_51
  7959  002664  6E0E               	movwf	i2printf@f+1,c
  7960  002666  C023  F00F         	movff	printV@charged,?i2_printf+2
  7961  00266A  C024  F010         	movff	printV@charged+1,?i2_printf+3
  7962  00266E  EC3E  F002         	call	i2_printf	;wreg free
  7963  002672  0012               	return	
  7964  002674                     __end_of_printV:
  7965                           	opt stack 0
  7966                           pclatu	equ	0xFFB
  7967                           pclath	equ	0xFFA
  7968                           tblptru	equ	0xFF8
  7969                           tblptrh	equ	0xFF7
  7970                           tblptrl	equ	0xFF6
  7971                           tablat	equ	0xFF5
  7972                           prodh	equ	0xFF4
  7973                           prodl	equ	0xFF3
  7974                           intcon	equ	0xFF2
  7975                           intcon2	equ	0xFF1
  7976                           intcon3	equ	0xFF0
  7977                           postinc0	equ	0xFEE
  7978                           fsr0h	equ	0xFEA
  7979                           fsr0l	equ	0xFE9
  7980                           wreg	equ	0xFE8
  7981                           postdec1	equ	0xFE5
  7982                           plusw1	equ	0xFE3
  7983                           fsr1h	equ	0xFE2
  7984                           fsr1l	equ	0xFE1
  7985                           indf2	equ	0xFDF
  7986                           postinc2	equ	0xFDE
  7987                           postdec2	equ	0xFDD
  7988                           plusw2	equ	0xFDB
  7989                           fsr2h	equ	0xFDA
  7990                           fsr2l	equ	0xFD9
  7991                           status	equ	0xFD8
  7992                           
  7993 ;; *************** function _checkV *****************
  7994 ;; Defined at:
  7995 ;;		line 13 in file "sensors.c"
  7996 ;; Parameters:    Size  Location     Type
  7997 ;;  channel         1    wreg     unsigned char 
  7998 ;;  threshhold      2   36[COMRAM] int 
  7999 ;; Auto vars:     Size  Location     Type
  8000 ;;  channel         1   42[COMRAM] unsigned char 
  8001 ;;  voltage         2   43[COMRAM] int 
  8002 ;;  tmp             2   40[COMRAM] int 
  8003 ;; Return value:  Size  Location     Type
  8004 ;;                  2   36[COMRAM] int 
  8005 ;; Registers used:
  8006 ;;		wreg, status,2, status,0, cstack
  8007 ;; Tracked objects:
  8008 ;;		On entry : 0/0
  8009 ;;		On exit  : 0/0
  8010 ;;		Unchanged: 0/0
  8011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8012 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8013 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8014 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8015 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8016 ;;Total ram usage:        9 bytes
  8017 ;; Hardware stack levels used:    1
  8018 ;; Hardware stack levels required when called:    2
  8019 ;; This function calls:
  8020 ;;		_AD
  8021 ;;		___awtoft
  8022 ;;		___ftge
  8023 ;;		___ftmul
  8024 ;; This function is called by:
  8025 ;;		_checkAA
  8026 ;;		_checkC
  8027 ;;		_check9
  8028 ;; This function uses a non-reentrant model
  8029 ;;
  8030                           
  8031                           	psect	text39
  8032  0017A0                     __ptext39:
  8033                           	opt stack 0
  8034  0017A0                     _checkV:
  8035                           	opt stack 21
  8036                           
  8037                           ;incstack = 0
  8038                           ;checkV@channel stored from wreg
  8039  0017A0  6E2B               	movwf	checkV@channel,c
  8040                           
  8041                           ;sensors.c: 15: int voltage = AD(channel);
  8042  0017A2  502B               	movf	checkV@channel,w,c
  8043  0017A4  EC11  F013         	call	_AD
  8044  0017A8  C001  F02C         	movff	?_AD,checkV@voltage
  8045  0017AC  C002  F02D         	movff	?_AD+1,checkV@voltage+1
  8046                           
  8047                           ;sensors.c: 16: if (voltage < 20) return -1;
  8048  0017B0  BE2D               	btfsc	checkV@voltage+1,7,c
  8049  0017B2  D006               	goto	i2l3581
  8050  0017B4  502D               	movf	checkV@voltage+1,w,c
  8051  0017B6  E107               	bnz	i2l3583
  8052  0017B8  0E14               	movlw	20
  8053  0017BA  5C2C               	subwf	checkV@voltage,w,c
  8054  0017BC  B0D8               	btfsc	status,0,c
  8055  0017BE  D003               	goto	i2l3583
  8056  0017C0                     i2l3581:
  8057  0017C0  6825               	setf	?_checkV,c
  8058  0017C2  6826               	setf	?_checkV+1,c
  8059  0017C4  0012               	return	
  8060  0017C6                     i2l3583:
  8061                           
  8062                           ;sensors.c: 17: _delay((unsigned long)((1)*(8000000/4000.0)));
  8063  0017C6  0E03               	movlw	3
  8064  0017C8  6E27               	movwf	??_checkV& (0+255),c
  8065  0017CA  0E98               	movlw	152
  8066  0017CC                     i2u388_47:
  8067  0017CC  2EE8               	decfsz	wreg,f,c
  8068  0017CE  D7FE               	bra	i2u388_47
  8069  0017D0  2E27               	decfsz	??_checkV& (0+255),f,c
  8070  0017D2  D7FC               	bra	i2u388_47
  8071                           
  8072                           ;sensors.c: 18: int tmp = AD(channel);
  8073  0017D4  502B               	movf	checkV@channel,w,c
  8074  0017D6  EC11  F013         	call	_AD
  8075  0017DA  D00E               	goto	L2
  8076  0017DC                     i2l387:
  8077                           
  8078                           ;sensors.c: 20: voltage = tmp;
  8079  0017DC  C029  F02C         	movff	checkV@tmp,checkV@voltage
  8080  0017E0  C02A  F02D         	movff	checkV@tmp+1,checkV@voltage+1
  8081                           
  8082                           ;sensors.c: 21: _delay((unsigned long)((1)*(8000000/4000.0)));
  8083  0017E4  0E03               	movlw	3
  8084  0017E6  6E27               	movwf	??_checkV& (0+255),c
  8085  0017E8  0E98               	movlw	152
  8086  0017EA                     i2u389_47:
  8087  0017EA  2EE8               	decfsz	wreg,f,c
  8088  0017EC  D7FE               	bra	i2u389_47
  8089  0017EE  2E27               	decfsz	??_checkV& (0+255),f,c
  8090  0017F0  D7FC               	bra	i2u389_47
  8091                           
  8092                           ;sensors.c: 22: tmp = AD(channel);
  8093  0017F2  502B               	movf	checkV@channel,w,c
  8094  0017F4  EC11  F013         	call	_AD
  8095  0017F8                     L2:
  8096  0017F8  C001  F029         	movff	?_AD,checkV@tmp
  8097  0017FC  C002  F02A         	movff	?_AD+1,checkV@tmp+1
  8098  001800  C02C  F027         	movff	checkV@voltage,??_checkV
  8099  001804  C02D  F028         	movff	checkV@voltage+1,??_checkV+1
  8100  001808  1E27               	comf	??_checkV,f,c
  8101  00180A  1E28               	comf	??_checkV+1,f,c
  8102  00180C  4A27               	infsnz	??_checkV,f,c
  8103  00180E  2A28               	incf	??_checkV+1,f,c
  8104  001810  5029               	movf	checkV@tmp,w,c
  8105  001812  2627               	addwf	??_checkV,f,c
  8106  001814  502A               	movf	checkV@tmp+1,w,c
  8107  001816  2228               	addwfc	??_checkV+1,f,c
  8108  001818  BE28               	btfsc	??_checkV+1,7,c
  8109  00181A  D006               	goto	i2l3593
  8110  00181C  5028               	movf	??_checkV+1,w,c
  8111  00181E  E1DE               	bnz	i2l387
  8112  001820  0E06               	movlw	6
  8113  001822  5C27               	subwf	??_checkV,w,c
  8114  001824  B0D8               	btfsc	status,0,c
  8115  001826  D7DA               	goto	i2l387
  8116  001828                     i2l3593:
  8117                           
  8118                           ;sensors.c: 23: };
  8119                           ;sensors.c: 24: if (voltage > 0.85 * threshhold)return 1;
  8120  001828  0E9A               	movlw	154
  8121  00182A  6E10               	movwf	___ftmul@f2,c
  8122  00182C  0E59               	movlw	89
  8123  00182E  6E11               	movwf	___ftmul@f2+1,c
  8124  001830  0E3F               	movlw	63
  8125  001832  6E12               	movwf	___ftmul@f2+2,c
  8126  001834  C025  F009         	movff	checkV@threshhold,___awtoft@c
  8127  001838  C026  F00A         	movff	checkV@threshhold+1,___awtoft@c+1
  8128  00183C  EC98  F012         	call	___awtoft	;wreg free
  8129  001840  C009  F00D         	movff	?___awtoft,___ftmul@f1
  8130  001844  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
  8131  001848  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
  8132  00184C  ECDD  F00A         	call	___ftmul	;wreg free
  8133  001850  C00D  F01C         	movff	?___ftmul,___ftge@ff1
  8134  001854  C00E  F01D         	movff	?___ftmul+1,___ftge@ff1+1
  8135  001858  C00F  F01E         	movff	?___ftmul+2,___ftge@ff1+2
  8136  00185C  C02C  F009         	movff	checkV@voltage,___awtoft@c
  8137  001860  C02D  F00A         	movff	checkV@voltage+1,___awtoft@c+1
  8138  001864  EC98  F012         	call	___awtoft	;wreg free
  8139  001868  C009  F01F         	movff	?___awtoft,___ftge@ff2
  8140  00186C  C00A  F020         	movff	?___awtoft+1,___ftge@ff2+1
  8141  001870  C00B  F021         	movff	?___awtoft+2,___ftge@ff2+2
  8142  001874  EC79  F00E         	call	___ftge	;wreg free
  8143  001878  B0D8               	btfsc	status,0,c
  8144  00187A  D005               	goto	i2l3599
  8145  00187C  0E00               	movlw	0
  8146  00187E  6E26               	movwf	?_checkV+1,c
  8147  001880  0E01               	movlw	1
  8148  001882  6E25               	movwf	?_checkV,c
  8149  001884  0012               	return	
  8150  001886                     i2l3599:
  8151                           
  8152                           ;sensors.c: 25: return 0;
  8153  001886  0E00               	movlw	0
  8154  001888  6E26               	movwf	?_checkV+1,c
  8155  00188A  0E00               	movlw	0
  8156  00188C  6E25               	movwf	?_checkV,c
  8157  00188E  0012               	return	
  8158  001890                     __end_of_checkV:
  8159                           	opt stack 0
  8160                           pclatu	equ	0xFFB
  8161                           pclath	equ	0xFFA
  8162                           tblptru	equ	0xFF8
  8163                           tblptrh	equ	0xFF7
  8164                           tblptrl	equ	0xFF6
  8165                           tablat	equ	0xFF5
  8166                           prodh	equ	0xFF4
  8167                           prodl	equ	0xFF3
  8168                           intcon	equ	0xFF2
  8169                           intcon2	equ	0xFF1
  8170                           intcon3	equ	0xFF0
  8171                           postinc0	equ	0xFEE
  8172                           fsr0h	equ	0xFEA
  8173                           fsr0l	equ	0xFE9
  8174                           wreg	equ	0xFE8
  8175                           postdec1	equ	0xFE5
  8176                           plusw1	equ	0xFE3
  8177                           fsr1h	equ	0xFE2
  8178                           fsr1l	equ	0xFE1
  8179                           indf2	equ	0xFDF
  8180                           postinc2	equ	0xFDE
  8181                           postdec2	equ	0xFDD
  8182                           plusw2	equ	0xFDB
  8183                           fsr2h	equ	0xFDA
  8184                           fsr2l	equ	0xFD9
  8185                           status	equ	0xFD8
  8186                           
  8187 ;; *************** function ___ftmul *****************
  8188 ;; Defined at:
  8189 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  8190 ;; Parameters:    Size  Location     Type
  8191 ;;  f1              3   12[COMRAM] float 
  8192 ;;  f2              3   15[COMRAM] float 
  8193 ;; Auto vars:     Size  Location     Type
  8194 ;;  f3_as_produc    3   22[COMRAM] unsigned um
  8195 ;;  sign            1   26[COMRAM] unsigned char 
  8196 ;;  cntr            1   25[COMRAM] unsigned char 
  8197 ;;  exp             1   21[COMRAM] unsigned char 
  8198 ;; Return value:  Size  Location     Type
  8199 ;;                  3   12[COMRAM] float 
  8200 ;; Registers used:
  8201 ;;		wreg, status,2, status,0, cstack
  8202 ;; Tracked objects:
  8203 ;;		On entry : 0/0
  8204 ;;		On exit  : 0/0
  8205 ;;		Unchanged: 0/0
  8206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8207 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8208 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8209 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8210 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8211 ;;Total ram usage:       15 bytes
  8212 ;; Hardware stack levels used:    1
  8213 ;; Hardware stack levels required when called:    1
  8214 ;; This function calls:
  8215 ;;		___ftpack
  8216 ;; This function is called by:
  8217 ;;		_checkV
  8218 ;; This function uses a non-reentrant model
  8219 ;;
  8220                           
  8221                           	psect	text40
  8222  0015BA                     __ptext40:
  8223                           	opt stack 0
  8224  0015BA                     ___ftmul:
  8225                           	opt stack 21
  8226                           
  8227                           ;incstack = 0
  8228  0015BA  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
  8229  0015BE  6A14               	clrf	(??___ftmul+1)& (0+255),c
  8230  0015C0  6A15               	clrf	(??___ftmul+2)& (0+255),c
  8231  0015C2  340E               	rlcf	___ftmul@f1+1,w,c
  8232  0015C4  3613               	rlcf	??___ftmul& (0+255),f,c
  8233  0015C6  E301               	bnc	u205_41
  8234  0015C8  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  8235  0015CA                     u205_41:
  8236  0015CA  5013               	movf	??___ftmul,w,c
  8237  0015CC  6E16               	movwf	___ftmul@exp,c
  8238  0015CE  5016               	movf	___ftmul@exp,w,c
  8239  0015D0  A4D8               	btfss	status,2,c
  8240  0015D2  D007               	goto	i2l3217
  8241  0015D4  0E00               	movlw	0
  8242  0015D6  6E0D               	movwf	?___ftmul,c
  8243  0015D8  0E00               	movlw	0
  8244  0015DA  6E0E               	movwf	?___ftmul+1,c
  8245  0015DC  0E00               	movlw	0
  8246  0015DE  6E0F               	movwf	?___ftmul+2,c
  8247  0015E0  0012               	return	
  8248  0015E2                     i2l3217:
  8249  0015E2  C012  F013         	movff	___ftmul@f2+2,??___ftmul
  8250  0015E6  6A14               	clrf	(??___ftmul+1)& (0+255),c
  8251  0015E8  6A15               	clrf	(??___ftmul+2)& (0+255),c
  8252  0015EA  3411               	rlcf	___ftmul@f2+1,w,c
  8253  0015EC  3613               	rlcf	??___ftmul& (0+255),f,c
  8254  0015EE  E301               	bnc	u207_41
  8255  0015F0  8014               	bsf	(??___ftmul+1)& (0+255),0,c
  8256  0015F2                     u207_41:
  8257  0015F2  5013               	movf	??___ftmul,w,c
  8258  0015F4  6E1B               	movwf	___ftmul@sign,c
  8259  0015F6  501B               	movf	___ftmul@sign,w,c
  8260  0015F8  A4D8               	btfss	status,2,c
  8261  0015FA  D007               	goto	i2l3223
  8262  0015FC  0E00               	movlw	0
  8263  0015FE  6E0D               	movwf	?___ftmul,c
  8264  001600  0E00               	movlw	0
  8265  001602  6E0E               	movwf	?___ftmul+1,c
  8266  001604  0E00               	movlw	0
  8267  001606  6E0F               	movwf	?___ftmul+2,c
  8268  001608  0012               	return	
  8269  00160A                     i2l3223:
  8270  00160A  501B               	movf	___ftmul@sign,w,c
  8271  00160C  0F7B               	addlw	123
  8272  00160E  2616               	addwf	___ftmul@exp,f,c
  8273  001610  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
  8274  001614  5012               	movf	___ftmul@f2+2,w,c
  8275  001616  1A1B               	xorwf	___ftmul@sign,f,c
  8276  001618  0E80               	movlw	128
  8277  00161A  161B               	andwf	___ftmul@sign,f,c
  8278  00161C  8E0E               	bsf	___ftmul@f1+1,7,c
  8279  00161E  8E11               	bsf	___ftmul@f2+1,7,c
  8280  001620  0EFF               	movlw	255
  8281  001622  1610               	andwf	___ftmul@f2,f,c
  8282  001624  0EFF               	movlw	255
  8283  001626  1611               	andwf	___ftmul@f2+1,f,c
  8284  001628  0E00               	movlw	0
  8285  00162A  1612               	andwf	___ftmul@f2+2,f,c
  8286  00162C  0E00               	movlw	0
  8287  00162E  6E17               	movwf	___ftmul@f3_as_product,c
  8288  001630  0E00               	movlw	0
  8289  001632  6E18               	movwf	___ftmul@f3_as_product+1,c
  8290  001634  0E00               	movlw	0
  8291  001636  6E19               	movwf	___ftmul@f3_as_product+2,c
  8292  001638  0E07               	movlw	7
  8293  00163A  6E1A               	movwf	___ftmul@cntr,c
  8294  00163C                     i2l3237:
  8295  00163C  A00D               	btfss	___ftmul@f1,0,c
  8296  00163E  D006               	goto	i2l3241
  8297  001640  5010               	movf	___ftmul@f2,w,c
  8298  001642  2617               	addwf	___ftmul@f3_as_product,f,c
  8299  001644  5011               	movf	___ftmul@f2+1,w,c
  8300  001646  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  8301  001648  5012               	movf	___ftmul@f2+2,w,c
  8302  00164A  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  8303  00164C                     i2l3241:
  8304  00164C  90D8               	bcf	status,0,c
  8305  00164E  320F               	rrcf	___ftmul@f1+2,f,c
  8306  001650  320E               	rrcf	___ftmul@f1+1,f,c
  8307  001652  320D               	rrcf	___ftmul@f1,f,c
  8308  001654  90D8               	bcf	status,0,c
  8309  001656  3610               	rlcf	___ftmul@f2,f,c
  8310  001658  3611               	rlcf	___ftmul@f2+1,f,c
  8311  00165A  3612               	rlcf	___ftmul@f2+2,f,c
  8312  00165C  2E1A               	decfsz	___ftmul@cntr,f,c
  8313  00165E  D7EE               	goto	i2l3237
  8314  001660  0E09               	movlw	9
  8315  001662  6E1A               	movwf	___ftmul@cntr,c
  8316  001664                     i2l3247:
  8317  001664  A00D               	btfss	___ftmul@f1,0,c
  8318  001666  D006               	goto	i2l3251
  8319  001668  5010               	movf	___ftmul@f2,w,c
  8320  00166A  2617               	addwf	___ftmul@f3_as_product,f,c
  8321  00166C  5011               	movf	___ftmul@f2+1,w,c
  8322  00166E  2218               	addwfc	___ftmul@f3_as_product+1,f,c
  8323  001670  5012               	movf	___ftmul@f2+2,w,c
  8324  001672  2219               	addwfc	___ftmul@f3_as_product+2,f,c
  8325  001674                     i2l3251:
  8326  001674  90D8               	bcf	status,0,c
  8327  001676  320F               	rrcf	___ftmul@f1+2,f,c
  8328  001678  320E               	rrcf	___ftmul@f1+1,f,c
  8329  00167A  320D               	rrcf	___ftmul@f1,f,c
  8330  00167C  90D8               	bcf	status,0,c
  8331  00167E  3219               	rrcf	___ftmul@f3_as_product+2,f,c
  8332  001680  3218               	rrcf	___ftmul@f3_as_product+1,f,c
  8333  001682  3217               	rrcf	___ftmul@f3_as_product,f,c
  8334  001684  2E1A               	decfsz	___ftmul@cntr,f,c
  8335  001686  D7EE               	goto	i2l3247
  8336  001688  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  8337  00168C  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  8338  001690  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  8339  001694  C016  F004         	movff	___ftmul@exp,___ftpack@exp
  8340  001698  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
  8341  00169C  EC22  F00E         	call	___ftpack	;wreg free
  8342  0016A0  C001  F00D         	movff	?___ftpack,?___ftmul
  8343  0016A4  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
  8344  0016A8  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
  8345  0016AC  0012               	return	
  8346  0016AE                     __end_of___ftmul:
  8347                           	opt stack 0
  8348                           pclatu	equ	0xFFB
  8349                           pclath	equ	0xFFA
  8350                           tblptru	equ	0xFF8
  8351                           tblptrh	equ	0xFF7
  8352                           tblptrl	equ	0xFF6
  8353                           tablat	equ	0xFF5
  8354                           prodh	equ	0xFF4
  8355                           prodl	equ	0xFF3
  8356                           intcon	equ	0xFF2
  8357                           intcon2	equ	0xFF1
  8358                           intcon3	equ	0xFF0
  8359                           postinc0	equ	0xFEE
  8360                           fsr0h	equ	0xFEA
  8361                           fsr0l	equ	0xFE9
  8362                           wreg	equ	0xFE8
  8363                           postdec1	equ	0xFE5
  8364                           plusw1	equ	0xFE3
  8365                           fsr1h	equ	0xFE2
  8366                           fsr1l	equ	0xFE1
  8367                           indf2	equ	0xFDF
  8368                           postinc2	equ	0xFDE
  8369                           postdec2	equ	0xFDD
  8370                           plusw2	equ	0xFDB
  8371                           fsr2h	equ	0xFDA
  8372                           fsr2l	equ	0xFD9
  8373                           status	equ	0xFD8
  8374                           
  8375 ;; *************** function ___ftge *****************
  8376 ;; Defined at:
  8377 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
  8378 ;; Parameters:    Size  Location     Type
  8379 ;;  ff1             3   27[COMRAM] float 
  8380 ;;  ff2             3   30[COMRAM] float 
  8381 ;; Auto vars:     Size  Location     Type
  8382 ;;		None
  8383 ;; Return value:  Size  Location     Type
  8384 ;;		None               void
  8385 ;; Registers used:
  8386 ;;		wreg, status,2, status,0
  8387 ;; Tracked objects:
  8388 ;;		On entry : 0/0
  8389 ;;		On exit  : 0/0
  8390 ;;		Unchanged: 0/0
  8391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8392 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8394 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8395 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8396 ;;Total ram usage:        9 bytes
  8397 ;; Hardware stack levels used:    1
  8398 ;; This function calls:
  8399 ;;		Nothing
  8400 ;; This function is called by:
  8401 ;;		_checkV
  8402 ;; This function uses a non-reentrant model
  8403 ;;
  8404                           
  8405                           	psect	text41
  8406  001CF2                     __ptext41:
  8407                           	opt stack 0
  8408  001CF2                     ___ftge:
  8409                           	opt stack 22
  8410                           
  8411                           ;incstack = 0
  8412  001CF2  AE1E               	btfss	___ftge@ff1+2,7,c
  8413  001CF4  D016               	goto	i2l3319
  8414  001CF6  C01C  F022         	movff	___ftge@ff1,??___ftge
  8415  001CFA  C01D  F023         	movff	___ftge@ff1+1,??___ftge+1
  8416  001CFE  C01E  F024         	movff	___ftge@ff1+2,??___ftge+2
  8417  001D02  1E22               	comf	??___ftge,f,c
  8418  001D04  1E23               	comf	??___ftge+1,f,c
  8419  001D06  1E24               	comf	??___ftge+2,f,c
  8420  001D08  2A22               	incf	??___ftge,f,c
  8421  001D0A  0E00               	movlw	0
  8422  001D0C  2223               	addwfc	??___ftge+1,f,c
  8423  001D0E  2224               	addwfc	??___ftge+2,f,c
  8424  001D10  0E00               	movlw	0
  8425  001D12  2422               	addwf	??___ftge,w,c
  8426  001D14  6E1C               	movwf	___ftge@ff1,c
  8427  001D16  0E00               	movlw	0
  8428  001D18  2023               	addwfc	??___ftge+1,w,c
  8429  001D1A  6E1D               	movwf	___ftge@ff1+1,c
  8430  001D1C  0E80               	movlw	128
  8431  001D1E  2024               	addwfc	??___ftge+2,w,c
  8432  001D20  6E1E               	movwf	___ftge@ff1+2,c
  8433  001D22                     i2l3319:
  8434  001D22  AE21               	btfss	___ftge@ff2+2,7,c
  8435  001D24  D016               	goto	i2l3323
  8436  001D26  C01F  F022         	movff	___ftge@ff2,??___ftge
  8437  001D2A  C020  F023         	movff	___ftge@ff2+1,??___ftge+1
  8438  001D2E  C021  F024         	movff	___ftge@ff2+2,??___ftge+2
  8439  001D32  1E22               	comf	??___ftge,f,c
  8440  001D34  1E23               	comf	??___ftge+1,f,c
  8441  001D36  1E24               	comf	??___ftge+2,f,c
  8442  001D38  2A22               	incf	??___ftge,f,c
  8443  001D3A  0E00               	movlw	0
  8444  001D3C  2223               	addwfc	??___ftge+1,f,c
  8445  001D3E  2224               	addwfc	??___ftge+2,f,c
  8446  001D40  0E00               	movlw	0
  8447  001D42  2422               	addwf	??___ftge,w,c
  8448  001D44  6E1F               	movwf	___ftge@ff2,c
  8449  001D46  0E00               	movlw	0
  8450  001D48  2023               	addwfc	??___ftge+1,w,c
  8451  001D4A  6E20               	movwf	___ftge@ff2+1,c
  8452  001D4C  0E80               	movlw	128
  8453  001D4E  2024               	addwfc	??___ftge+2,w,c
  8454  001D50  6E21               	movwf	___ftge@ff2+2,c
  8455  001D52                     i2l3323:
  8456  001D52  0E00               	movlw	0
  8457  001D54  1A1C               	xorwf	___ftge@ff1,f,c
  8458  001D56  0E00               	movlw	0
  8459  001D58  1A1D               	xorwf	___ftge@ff1+1,f,c
  8460  001D5A  0E80               	movlw	128
  8461  001D5C  1A1E               	xorwf	___ftge@ff1+2,f,c
  8462  001D5E  0E00               	movlw	0
  8463  001D60  1A1F               	xorwf	___ftge@ff2,f,c
  8464  001D62  0E00               	movlw	0
  8465  001D64  1A20               	xorwf	___ftge@ff2+1,f,c
  8466  001D66  0E80               	movlw	128
  8467  001D68  1A21               	xorwf	___ftge@ff2+2,f,c
  8468  001D6A  501F               	movf	___ftge@ff2,w,c
  8469  001D6C  5C1C               	subwf	___ftge@ff1,w,c
  8470  001D6E  5020               	movf	___ftge@ff2+1,w,c
  8471  001D70  581D               	subwfb	___ftge@ff1+1,w,c
  8472  001D72  5021               	movf	___ftge@ff2+2,w,c
  8473  001D74  581E               	subwfb	___ftge@ff1+2,w,c
  8474  001D76  B0D8               	btfsc	status,0,c
  8475  001D78  D002               	goto	i2l3329
  8476  001D7A  90D8               	bcf	status,0,c
  8477  001D7C  0012               	return	
  8478  001D7E                     i2l3329:
  8479  001D7E  80D8               	bsf	status,0,c
  8480  001D80  0012               	return	
  8481  001D82                     __end_of___ftge:
  8482                           	opt stack 0
  8483                           pclatu	equ	0xFFB
  8484                           pclath	equ	0xFFA
  8485                           tblptru	equ	0xFF8
  8486                           tblptrh	equ	0xFF7
  8487                           tblptrl	equ	0xFF6
  8488                           tablat	equ	0xFF5
  8489                           prodh	equ	0xFF4
  8490                           prodl	equ	0xFF3
  8491                           intcon	equ	0xFF2
  8492                           intcon2	equ	0xFF1
  8493                           intcon3	equ	0xFF0
  8494                           postinc0	equ	0xFEE
  8495                           fsr0h	equ	0xFEA
  8496                           fsr0l	equ	0xFE9
  8497                           wreg	equ	0xFE8
  8498                           postdec1	equ	0xFE5
  8499                           plusw1	equ	0xFE3
  8500                           fsr1h	equ	0xFE2
  8501                           fsr1l	equ	0xFE1
  8502                           indf2	equ	0xFDF
  8503                           postinc2	equ	0xFDE
  8504                           postdec2	equ	0xFDD
  8505                           plusw2	equ	0xFDB
  8506                           fsr2h	equ	0xFDA
  8507                           fsr2l	equ	0xFD9
  8508                           status	equ	0xFD8
  8509                           
  8510 ;; *************** function ___awtoft *****************
  8511 ;; Defined at:
  8512 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awtoft.c"
  8513 ;; Parameters:    Size  Location     Type
  8514 ;;  c               2    8[COMRAM] int 
  8515 ;; Auto vars:     Size  Location     Type
  8516 ;;  sign            1   11[COMRAM] unsigned char 
  8517 ;; Return value:  Size  Location     Type
  8518 ;;                  3    8[COMRAM] float 
  8519 ;; Registers used:
  8520 ;;		wreg, status,2, status,0, cstack
  8521 ;; Tracked objects:
  8522 ;;		On entry : 0/0
  8523 ;;		On exit  : 0/0
  8524 ;;		Unchanged: 0/0
  8525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8526 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8527 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8529 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8530 ;;Total ram usage:        4 bytes
  8531 ;; Hardware stack levels used:    1
  8532 ;; Hardware stack levels required when called:    1
  8533 ;; This function calls:
  8534 ;;		___ftpack
  8535 ;; This function is called by:
  8536 ;;		_checkV
  8537 ;; This function uses a non-reentrant model
  8538 ;;
  8539                           
  8540                           	psect	text42
  8541  002530                     __ptext42:
  8542                           	opt stack 0
  8543  002530                     ___awtoft:
  8544                           	opt stack 21
  8545                           
  8546                           ;incstack = 0
  8547  002530  0E00               	movlw	0
  8548  002532  6E0C               	movwf	___awtoft@sign,c
  8549  002534  AE0A               	btfss	___awtoft@c+1,7,c
  8550  002536  D006               	goto	i2l3311
  8551  002538  6C09               	negf	___awtoft@c,c
  8552  00253A  1E0A               	comf	___awtoft@c+1,f,c
  8553  00253C  B0D8               	btfsc	status,0,c
  8554  00253E  2A0A               	incf	___awtoft@c+1,f,c
  8555  002540  0E01               	movlw	1
  8556  002542  6E0C               	movwf	___awtoft@sign,c
  8557  002544                     i2l3311:
  8558  002544  C009  F001         	movff	___awtoft@c,___ftpack@arg
  8559  002548  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  8560  00254C  6A03               	clrf	___ftpack@arg+2,c
  8561  00254E  0E8E               	movlw	142
  8562  002550  6E04               	movwf	___ftpack@exp,c
  8563  002552  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  8564  002556  EC22  F00E         	call	___ftpack	;wreg free
  8565  00255A  C001  F009         	movff	?___ftpack,?___awtoft
  8566  00255E  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  8567  002562  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  8568  002566  0012               	return	
  8569  002568                     __end_of___awtoft:
  8570                           	opt stack 0
  8571                           pclatu	equ	0xFFB
  8572                           pclath	equ	0xFFA
  8573                           tblptru	equ	0xFF8
  8574                           tblptrh	equ	0xFF7
  8575                           tblptrl	equ	0xFF6
  8576                           tablat	equ	0xFF5
  8577                           prodh	equ	0xFF4
  8578                           prodl	equ	0xFF3
  8579                           intcon	equ	0xFF2
  8580                           intcon2	equ	0xFF1
  8581                           intcon3	equ	0xFF0
  8582                           postinc0	equ	0xFEE
  8583                           fsr0h	equ	0xFEA
  8584                           fsr0l	equ	0xFE9
  8585                           wreg	equ	0xFE8
  8586                           postdec1	equ	0xFE5
  8587                           plusw1	equ	0xFE3
  8588                           fsr1h	equ	0xFE2
  8589                           fsr1l	equ	0xFE1
  8590                           indf2	equ	0xFDF
  8591                           postinc2	equ	0xFDE
  8592                           postdec2	equ	0xFDD
  8593                           plusw2	equ	0xFDB
  8594                           fsr2h	equ	0xFDA
  8595                           fsr2l	equ	0xFD9
  8596                           status	equ	0xFD8
  8597                           
  8598 ;; *************** function ___ftpack *****************
  8599 ;; Defined at:
  8600 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  8601 ;; Parameters:    Size  Location     Type
  8602 ;;  arg             3    0[COMRAM] unsigned um
  8603 ;;  exp             1    3[COMRAM] unsigned char 
  8604 ;;  sign            1    4[COMRAM] unsigned char 
  8605 ;; Auto vars:     Size  Location     Type
  8606 ;;		None
  8607 ;; Return value:  Size  Location     Type
  8608 ;;                  3    0[COMRAM] float 
  8609 ;; Registers used:
  8610 ;;		wreg, status,2, status,0
  8611 ;; Tracked objects:
  8612 ;;		On entry : 0/0
  8613 ;;		On exit  : 0/0
  8614 ;;		Unchanged: 0/0
  8615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8616 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8618 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8619 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8620 ;;Total ram usage:        8 bytes
  8621 ;; Hardware stack levels used:    1
  8622 ;; This function calls:
  8623 ;;		Nothing
  8624 ;; This function is called by:
  8625 ;;		___awtoft
  8626 ;;		___ftmul
  8627 ;; This function uses a non-reentrant model
  8628 ;;
  8629                           
  8630                           	psect	text43
  8631  001C44                     __ptext43:
  8632                           	opt stack 0
  8633  001C44                     ___ftpack:
  8634                           	opt stack 21
  8635                           
  8636                           ;incstack = 0
  8637  001C44  5004               	movf	___ftpack@exp,w,c
  8638  001C46  B4D8               	btfsc	status,2,c
  8639  001C48  D005               	goto	i2l3087
  8640  001C4A  5001               	movf	___ftpack@arg,w,c
  8641  001C4C  1002               	iorwf	___ftpack@arg+1,w,c
  8642  001C4E  1003               	iorwf	___ftpack@arg+2,w,c
  8643  001C50  A4D8               	btfss	status,2,c
  8644  001C52  D00C               	goto	i2l3093
  8645  001C54                     i2l3087:
  8646  001C54  0E00               	movlw	0
  8647  001C56  6E01               	movwf	?___ftpack,c
  8648  001C58  0E00               	movlw	0
  8649  001C5A  6E02               	movwf	?___ftpack+1,c
  8650  001C5C  0E00               	movlw	0
  8651  001C5E  6E03               	movwf	?___ftpack+2,c
  8652  001C60  0012               	return	
  8653  001C62                     i2l3091:
  8654  001C62  2A04               	incf	___ftpack@exp,f,c
  8655  001C64  90D8               	bcf	status,0,c
  8656  001C66  3203               	rrcf	___ftpack@arg+2,f,c
  8657  001C68  3202               	rrcf	___ftpack@arg+1,f,c
  8658  001C6A  3201               	rrcf	___ftpack@arg,f,c
  8659  001C6C                     i2l3093:
  8660  001C6C  0E00               	movlw	0
  8661  001C6E  1401               	andwf	___ftpack@arg,w,c
  8662  001C70  6E06               	movwf	??___ftpack& (0+255),c
  8663  001C72  0E00               	movlw	0
  8664  001C74  1402               	andwf	___ftpack@arg+1,w,c
  8665  001C76  6E07               	movwf	(??___ftpack+1)& (0+255),c
  8666  001C78  0EFE               	movlw	254
  8667  001C7A  1403               	andwf	___ftpack@arg+2,w,c
  8668  001C7C  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8669  001C7E  5006               	movf	??___ftpack,w,c
  8670  001C80  1007               	iorwf	??___ftpack+1,w,c
  8671  001C82  1008               	iorwf	??___ftpack+2,w,c
  8672  001C84  B4D8               	btfsc	status,2,c
  8673  001C86  D00C               	goto	i2l3099
  8674  001C88  D7EC               	goto	i2l3091
  8675  001C8A                     i2l3095:
  8676  001C8A  2A04               	incf	___ftpack@exp,f,c
  8677  001C8C  0E01               	movlw	1
  8678  001C8E  2601               	addwf	___ftpack@arg,f,c
  8679  001C90  0E00               	movlw	0
  8680  001C92  2202               	addwfc	___ftpack@arg+1,f,c
  8681  001C94  0E00               	movlw	0
  8682  001C96  2203               	addwfc	___ftpack@arg+2,f,c
  8683  001C98  90D8               	bcf	status,0,c
  8684  001C9A  3203               	rrcf	___ftpack@arg+2,f,c
  8685  001C9C  3202               	rrcf	___ftpack@arg+1,f,c
  8686  001C9E  3201               	rrcf	___ftpack@arg,f,c
  8687  001CA0                     i2l3099:
  8688  001CA0  0E00               	movlw	0
  8689  001CA2  1401               	andwf	___ftpack@arg,w,c
  8690  001CA4  6E06               	movwf	??___ftpack& (0+255),c
  8691  001CA6  0E00               	movlw	0
  8692  001CA8  1402               	andwf	___ftpack@arg+1,w,c
  8693  001CAA  6E07               	movwf	(??___ftpack+1)& (0+255),c
  8694  001CAC  0EFF               	movlw	255
  8695  001CAE  1403               	andwf	___ftpack@arg+2,w,c
  8696  001CB0  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8697  001CB2  5006               	movf	??___ftpack,w,c
  8698  001CB4  1007               	iorwf	??___ftpack+1,w,c
  8699  001CB6  1008               	iorwf	??___ftpack+2,w,c
  8700  001CB8  B4D8               	btfsc	status,2,c
  8701  001CBA  D006               	goto	i2l3103
  8702  001CBC  D7E6               	goto	i2l3095
  8703  001CBE                     i2l3101:
  8704  001CBE  0604               	decf	___ftpack@exp,f,c
  8705  001CC0  90D8               	bcf	status,0,c
  8706  001CC2  3601               	rlcf	___ftpack@arg,f,c
  8707  001CC4  3602               	rlcf	___ftpack@arg+1,f,c
  8708  001CC6  3603               	rlcf	___ftpack@arg+2,f,c
  8709  001CC8                     i2l3103:
  8710  001CC8  BE02               	btfsc	___ftpack@arg+1,7,c
  8711  001CCA  D003               	goto	i2l829
  8712  001CCC  0E02               	movlw	2
  8713  001CCE  6004               	cpfslt	___ftpack@exp,c
  8714  001CD0  D7F6               	goto	i2l3101
  8715  001CD2                     i2l829:
  8716  001CD2  A004               	btfss	___ftpack@exp,0,c
  8717  001CD4  9E02               	bcf	___ftpack@arg+1,7,c
  8718  001CD6  90D8               	bcf	status,0,c
  8719  001CD8  3204               	rrcf	___ftpack@exp,f,c
  8720  001CDA  5004               	movf	___ftpack@exp,w,c
  8721  001CDC  1203               	iorwf	___ftpack@arg+2,f,c
  8722  001CDE  5005               	movf	___ftpack@sign,w,c
  8723  001CE0  A4D8               	btfss	status,2,c
  8724  001CE2  8E03               	bsf	___ftpack@arg+2,7,c
  8725  001CE4  C001  F001         	movff	___ftpack@arg,?___ftpack
  8726  001CE8  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  8727  001CEC  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  8728  001CF0  0012               	return	
  8729  001CF2                     __end_of___ftpack:
  8730                           	opt stack 0
  8731                           pclatu	equ	0xFFB
  8732                           pclath	equ	0xFFA
  8733                           tblptru	equ	0xFF8
  8734                           tblptrh	equ	0xFF7
  8735                           tblptrl	equ	0xFF6
  8736                           tablat	equ	0xFF5
  8737                           prodh	equ	0xFF4
  8738                           prodl	equ	0xFF3
  8739                           intcon	equ	0xFF2
  8740                           intcon2	equ	0xFF1
  8741                           intcon3	equ	0xFF0
  8742                           postinc0	equ	0xFEE
  8743                           fsr0h	equ	0xFEA
  8744                           fsr0l	equ	0xFE9
  8745                           wreg	equ	0xFE8
  8746                           postdec1	equ	0xFE5
  8747                           plusw1	equ	0xFE3
  8748                           fsr1h	equ	0xFE2
  8749                           fsr1l	equ	0xFE1
  8750                           indf2	equ	0xFDF
  8751                           postinc2	equ	0xFDE
  8752                           postdec2	equ	0xFDD
  8753                           plusw2	equ	0xFDB
  8754                           fsr2h	equ	0xFDA
  8755                           fsr2l	equ	0xFD9
  8756                           status	equ	0xFD8
  8757                           
  8758 ;; *************** function _AD *****************
  8759 ;; Defined at:
  8760 ;;		line 4 in file "sensors.c"
  8761 ;; Parameters:    Size  Location     Type
  8762 ;;  channel         1    wreg     unsigned char 
  8763 ;; Auto vars:     Size  Location     Type
  8764 ;;  channel         1    4[COMRAM] unsigned char 
  8765 ;; Return value:  Size  Location     Type
  8766 ;;                  2    0[COMRAM] int 
  8767 ;; Registers used:
  8768 ;;		wreg, status,2, status,0
  8769 ;; Tracked objects:
  8770 ;;		On entry : 0/0
  8771 ;;		On exit  : 0/0
  8772 ;;		Unchanged: 0/0
  8773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8774 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8775 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8776 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8777 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8778 ;;Total ram usage:        5 bytes
  8779 ;; Hardware stack levels used:    1
  8780 ;; This function calls:
  8781 ;;		Nothing
  8782 ;; This function is called by:
  8783 ;;		_checkV
  8784 ;; This function uses a non-reentrant model
  8785 ;;
  8786                           
  8787                           	psect	text44
  8788  002622                     __ptext44:
  8789                           	opt stack 0
  8790  002622                     _AD:
  8791                           	opt stack 22
  8792                           
  8793                           ;incstack = 0
  8794                           ;AD@channel stored from wreg
  8795  002622  6E05               	movwf	AD@channel,c
  8796                           
  8797                           ;sensors.c: 6: ADCON0 = ((channel << 2));
  8798  002624  4405               	rlncf	AD@channel,w,c
  8799  002626  46E8               	rlncf	wreg,f,c
  8800  002628  0BFC               	andlw	252
  8801  00262A  6EC2               	movwf	4034,c	;volatile
  8802                           
  8803                           ;sensors.c: 7: ADON = 1;
  8804  00262C  80C2               	bsf	4034,0,c	;volatile
  8805                           
  8806                           ;sensors.c: 8: ADCON0bits.GO = 1;
  8807  00262E  82C2               	bsf	4034,1,c	;volatile
  8808  002630                     i2l378:
  8809  002630  B2C2               	btfsc	4034,1,c	;volatile
  8810  002632  D7FE               	goto	i2l378
  8811                           
  8812                           ;sensors.c: 10: return (ADRESH << 8) | ADRESL;
  8813  002634  50C3               	movf	4035,w,c	;volatile
  8814  002636  CFC4 F003          	movff	4036,??_AD	;volatile
  8815  00263A  6A04               	clrf	(??_AD+1)& (0+255),c
  8816  00263C  C003  F004         	movff	??_AD,??_AD+1
  8817  002640  6A03               	clrf	??_AD,c
  8818  002642  1003               	iorwf	??_AD,w,c
  8819  002644  6E01               	movwf	?_AD,c
  8820  002646  5004               	movf	??_AD+1,w,c
  8821  002648  6E02               	movwf	?_AD+1,c
  8822  00264A  0012               	return	
  8823  00264C                     __end_of_AD:
  8824                           	opt stack 0
  8825                           pclatu	equ	0xFFB
  8826                           pclath	equ	0xFFA
  8827                           tblptru	equ	0xFF8
  8828                           tblptrh	equ	0xFF7
  8829                           tblptrl	equ	0xFF6
  8830                           tablat	equ	0xFF5
  8831                           prodh	equ	0xFF4
  8832                           prodl	equ	0xFF3
  8833                           intcon	equ	0xFF2
  8834                           intcon2	equ	0xFF1
  8835                           intcon3	equ	0xFF0
  8836                           postinc0	equ	0xFEE
  8837                           fsr0h	equ	0xFEA
  8838                           fsr0l	equ	0xFE9
  8839                           wreg	equ	0xFE8
  8840                           postdec1	equ	0xFE5
  8841                           plusw1	equ	0xFE3
  8842                           fsr1h	equ	0xFE2
  8843                           fsr1l	equ	0xFE1
  8844                           indf2	equ	0xFDF
  8845                           postinc2	equ	0xFDE
  8846                           postdec2	equ	0xFDD
  8847                           plusw2	equ	0xFDB
  8848                           fsr2h	equ	0xFDA
  8849                           fsr2l	equ	0xFD9
  8850                           status	equ	0xFD8
  8851                           
  8852 ;; *************** function _WriteRun *****************
  8853 ;; Defined at:
  8854 ;;		line 75 in file "eeprom.c"
  8855 ;; Parameters:    Size  Location     Type
  8856 ;;  sorted          2    6[COMRAM] PTR unsigned char 
  8857 ;;		 -> simulate@sorted(4), mainloop@sorted(4), 
  8858 ;;  time            2    8[COMRAM] unsigned int 
  8859 ;; Auto vars:     Size  Location     Type
  8860 ;;  add             2   12[COMRAM] unsigned int 
  8861 ;; Return value:  Size  Location     Type
  8862 ;;                  1    wreg      void 
  8863 ;; Registers used:
  8864 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8865 ;; Tracked objects:
  8866 ;;		On entry : 0/0
  8867 ;;		On exit  : 0/0
  8868 ;;		Unchanged: 0/0
  8869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8870 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8871 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8872 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8873 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8874 ;;Total ram usage:        8 bytes
  8875 ;; Hardware stack levels used:    1
  8876 ;; Hardware stack levels required when called:    1
  8877 ;; This function calls:
  8878 ;;		_WriteEE
  8879 ;;		i2___wmul
  8880 ;; This function is called by:
  8881 ;;		_mainloop
  8882 ;;		_simulate
  8883 ;; This function uses a non-reentrant model
  8884 ;;
  8885                           
  8886                           	psect	text45
  8887  001326                     __ptext45:
  8888                           	opt stack 0
  8889  001326                     _WriteRun:
  8890                           	opt stack 23
  8891                           
  8892                           ;eeprom.c: 76: unsigned int add = ++Latest;
  8893                           
  8894                           ;incstack = 0
  8895  001326  0100               	movlb	0	; () banked
  8896  001328  2BC0               	incf	_Latest& (0+255),f,b
  8897  00132A  C0C0  F00D         	movff	_Latest,WriteRun@add
  8898  00132E  6A0E               	clrf	WriteRun@add+1,c
  8899                           
  8900                           ; BSR set to: 0
  8901                           ;eeprom.c: 77: if (add > 3) {
  8902  001330  500E               	movf	WriteRun@add+1,w,c
  8903  001332  E104               	bnz	i2u326_40
  8904  001334  0E04               	movlw	4
  8905  001336  5C0D               	subwf	WriteRun@add,w,c
  8906  001338  A0D8               	btfss	status,0,c
  8907  00133A  D006               	goto	i2l4117
  8908  00133C                     i2u326_40:
  8909                           
  8910                           ; BSR set to: 0
  8911                           ;eeprom.c: 78: add -= 4;
  8912  00133C  0E04               	movlw	4
  8913  00133E  5E0D               	subwf	WriteRun@add,f,c
  8914  001340  0E00               	movlw	0
  8915  001342  5A0E               	subwfb	WriteRun@add+1,f,c
  8916                           
  8917                           ; BSR set to: 0
  8918                           ;eeprom.c: 79: Latest = add;
  8919  001344  C00D  F0C0         	movff	WriteRun@add,_Latest
  8920  001348                     i2l4117:
  8921                           
  8922                           ; BSR set to: 0
  8923                           ;eeprom.c: 80: }
  8924                           ;eeprom.c: 81: add *= 5;
  8925  001348  C00D  F001         	movff	WriteRun@add,i2___wmul@multiplier
  8926  00134C  C00E  F002         	movff	WriteRun@add+1,i2___wmul@multiplier+1
  8927  001350  0E00               	movlw	0
  8928  001352  6E04               	movwf	i2___wmul@multiplicand+1,c
  8929  001354  0E05               	movlw	5
  8930  001356  6E03               	movwf	i2___wmul@multiplicand,c
  8931  001358  EC60  F013         	call	i2___wmul	;wreg free
  8932  00135C  C001  F00D         	movff	?i2___wmul,WriteRun@add
  8933  001360  C002  F00E         	movff	?i2___wmul+1,WriteRun@add+1
  8934                           
  8935                           ;eeprom.c: 82: WriteEE(add++ *8, time);
  8936  001364  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  8937  001368  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  8938  00136C  90D8               	bcf	status,0,c
  8939  00136E  360B               	rlcf	??_WriteRun,f,c
  8940  001370  360C               	rlcf	??_WriteRun+1,f,c
  8941  001372  90D8               	bcf	status,0,c
  8942  001374  360B               	rlcf	??_WriteRun,f,c
  8943  001376  360C               	rlcf	??_WriteRun+1,f,c
  8944  001378  90D8               	bcf	status,0,c
  8945  00137A  360B               	rlcf	??_WriteRun,f,c
  8946  00137C  360C               	rlcf	??_WriteRun+1,f,c
  8947  00137E  C00B  F001         	movff	??_WriteRun,WriteEE@address
  8948  001382  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  8949  001386  C009  F003         	movff	WriteRun@time,WriteEE@data
  8950  00138A  EC4D  F013         	call	_WriteEE	;wreg free
  8951  00138E  4A0D               	infsnz	WriteRun@add,f,c
  8952  001390  2A0E               	incf	WriteRun@add+1,f,c
  8953                           
  8954                           ;eeprom.c: 83: WriteEE(add++ *8, sorted[0]);
  8955  001392  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  8956  001396  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  8957  00139A  90D8               	bcf	status,0,c
  8958  00139C  360B               	rlcf	??_WriteRun,f,c
  8959  00139E  360C               	rlcf	??_WriteRun+1,f,c
  8960  0013A0  90D8               	bcf	status,0,c
  8961  0013A2  360B               	rlcf	??_WriteRun,f,c
  8962  0013A4  360C               	rlcf	??_WriteRun+1,f,c
  8963  0013A6  90D8               	bcf	status,0,c
  8964  0013A8  360B               	rlcf	??_WriteRun,f,c
  8965  0013AA  360C               	rlcf	??_WriteRun+1,f,c
  8966  0013AC  C00B  F001         	movff	??_WriteRun,WriteEE@address
  8967  0013B0  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  8968  0013B4  C007  FFD9         	movff	WriteRun@sorted,fsr2l
  8969  0013B8  C008  FFDA         	movff	WriteRun@sorted+1,fsr2h
  8970  0013BC  50DF               	movf	indf2,w,c
  8971  0013BE  6E03               	movwf	WriteEE@data,c
  8972  0013C0  EC4D  F013         	call	_WriteEE	;wreg free
  8973  0013C4  4A0D               	infsnz	WriteRun@add,f,c
  8974  0013C6  2A0E               	incf	WriteRun@add+1,f,c
  8975                           
  8976                           ;eeprom.c: 84: WriteEE(add++ *8, sorted[1]);
  8977  0013C8  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  8978  0013CC  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  8979  0013D0  90D8               	bcf	status,0,c
  8980  0013D2  360B               	rlcf	??_WriteRun,f,c
  8981  0013D4  360C               	rlcf	??_WriteRun+1,f,c
  8982  0013D6  90D8               	bcf	status,0,c
  8983  0013D8  360B               	rlcf	??_WriteRun,f,c
  8984  0013DA  360C               	rlcf	??_WriteRun+1,f,c
  8985  0013DC  90D8               	bcf	status,0,c
  8986  0013DE  360B               	rlcf	??_WriteRun,f,c
  8987  0013E0  360C               	rlcf	??_WriteRun+1,f,c
  8988  0013E2  C00B  F001         	movff	??_WriteRun,WriteEE@address
  8989  0013E6  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  8990  0013EA  EE20 F001          	lfsr	2,1
  8991  0013EE  5007               	movf	WriteRun@sorted,w,c
  8992  0013F0  26D9               	addwf	fsr2l,f,c
  8993  0013F2  5008               	movf	WriteRun@sorted+1,w,c
  8994  0013F4  22DA               	addwfc	fsr2h,f,c
  8995  0013F6  50DF               	movf	indf2,w,c
  8996  0013F8  6E03               	movwf	WriteEE@data,c
  8997  0013FA  EC4D  F013         	call	_WriteEE	;wreg free
  8998  0013FE  4A0D               	infsnz	WriteRun@add,f,c
  8999  001400  2A0E               	incf	WriteRun@add+1,f,c
  9000                           
  9001                           ;eeprom.c: 85: WriteEE(add++ *8, sorted[2]);
  9002  001402  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  9003  001406  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  9004  00140A  90D8               	bcf	status,0,c
  9005  00140C  360B               	rlcf	??_WriteRun,f,c
  9006  00140E  360C               	rlcf	??_WriteRun+1,f,c
  9007  001410  90D8               	bcf	status,0,c
  9008  001412  360B               	rlcf	??_WriteRun,f,c
  9009  001414  360C               	rlcf	??_WriteRun+1,f,c
  9010  001416  90D8               	bcf	status,0,c
  9011  001418  360B               	rlcf	??_WriteRun,f,c
  9012  00141A  360C               	rlcf	??_WriteRun+1,f,c
  9013  00141C  C00B  F001         	movff	??_WriteRun,WriteEE@address
  9014  001420  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  9015  001424  EE20 F002          	lfsr	2,2
  9016  001428  5007               	movf	WriteRun@sorted,w,c
  9017  00142A  26D9               	addwf	fsr2l,f,c
  9018  00142C  5008               	movf	WriteRun@sorted+1,w,c
  9019  00142E  22DA               	addwfc	fsr2h,f,c
  9020  001430  50DF               	movf	indf2,w,c
  9021  001432  6E03               	movwf	WriteEE@data,c
  9022  001434  EC4D  F013         	call	_WriteEE	;wreg free
  9023  001438  4A0D               	infsnz	WriteRun@add,f,c
  9024  00143A  2A0E               	incf	WriteRun@add+1,f,c
  9025                           
  9026                           ;eeprom.c: 86: WriteEE(add++ *8, sorted[3]);
  9027  00143C  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  9028  001440  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  9029  001444  90D8               	bcf	status,0,c
  9030  001446  360B               	rlcf	??_WriteRun,f,c
  9031  001448  360C               	rlcf	??_WriteRun+1,f,c
  9032  00144A  90D8               	bcf	status,0,c
  9033  00144C  360B               	rlcf	??_WriteRun,f,c
  9034  00144E  360C               	rlcf	??_WriteRun+1,f,c
  9035  001450  90D8               	bcf	status,0,c
  9036  001452  360B               	rlcf	??_WriteRun,f,c
  9037  001454  360C               	rlcf	??_WriteRun+1,f,c
  9038  001456  C00B  F001         	movff	??_WriteRun,WriteEE@address
  9039  00145A  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  9040  00145E  EE20 F003          	lfsr	2,3
  9041  001462  5007               	movf	WriteRun@sorted,w,c
  9042  001464  26D9               	addwf	fsr2l,f,c
  9043  001466  5008               	movf	WriteRun@sorted+1,w,c
  9044  001468  22DA               	addwfc	fsr2h,f,c
  9045  00146A  50DF               	movf	indf2,w,c
  9046  00146C  6E03               	movwf	WriteEE@data,c
  9047  00146E  EC4D  F013         	call	_WriteEE	;wreg free
  9048  001472  4A0D               	infsnz	WriteRun@add,f,c
  9049  001474  2A0E               	incf	WriteRun@add+1,f,c
  9050                           
  9051                           ;eeprom.c: 87: WriteEE(160, Latest);
  9052  001476  0E00               	movlw	0
  9053  001478  6E02               	movwf	WriteEE@address+1,c
  9054  00147A  0EA0               	movlw	160
  9055  00147C  6E01               	movwf	WriteEE@address,c
  9056  00147E  C0C0  F003         	movff	_Latest,WriteEE@data
  9057  001482  EC4D  F013         	call	_WriteEE	;wreg free
  9058  001486  0012               	return		;funcret
  9059  001488                     __end_of_WriteRun:
  9060                           	opt stack 0
  9061                           pclatu	equ	0xFFB
  9062                           pclath	equ	0xFFA
  9063                           tblptru	equ	0xFF8
  9064                           tblptrh	equ	0xFF7
  9065                           tblptrl	equ	0xFF6
  9066                           tablat	equ	0xFF5
  9067                           prodh	equ	0xFF4
  9068                           prodl	equ	0xFF3
  9069                           intcon	equ	0xFF2
  9070                           intcon2	equ	0xFF1
  9071                           intcon3	equ	0xFF0
  9072                           postinc0	equ	0xFEE
  9073                           fsr0h	equ	0xFEA
  9074                           fsr0l	equ	0xFE9
  9075                           wreg	equ	0xFE8
  9076                           postdec1	equ	0xFE5
  9077                           plusw1	equ	0xFE3
  9078                           fsr1h	equ	0xFE2
  9079                           fsr1l	equ	0xFE1
  9080                           indf2	equ	0xFDF
  9081                           postinc2	equ	0xFDE
  9082                           postdec2	equ	0xFDD
  9083                           plusw2	equ	0xFDB
  9084                           fsr2h	equ	0xFDA
  9085                           fsr2l	equ	0xFD9
  9086                           status	equ	0xFD8
  9087                           
  9088 ;; *************** function _WriteEE *****************
  9089 ;; Defined at:
  9090 ;;		line 34 in file "eeprom.c"
  9091 ;; Parameters:    Size  Location     Type
  9092 ;;  address         2    0[COMRAM] unsigned int 
  9093 ;;  data            1    2[COMRAM] unsigned char 
  9094 ;; Auto vars:     Size  Location     Type
  9095 ;;		None
  9096 ;; Return value:  Size  Location     Type
  9097 ;;                  1    wreg      void 
  9098 ;; Registers used:
  9099 ;;		wreg, status,2
  9100 ;; Tracked objects:
  9101 ;;		On entry : 0/0
  9102 ;;		On exit  : 0/0
  9103 ;;		Unchanged: 0/0
  9104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9105 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9108 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9109 ;;Total ram usage:        3 bytes
  9110 ;; Hardware stack levels used:    1
  9111 ;; This function calls:
  9112 ;;		Nothing
  9113 ;; This function is called by:
  9114 ;;		_WriteRun
  9115 ;; This function uses a non-reentrant model
  9116 ;;
  9117                           
  9118                           	psect	text46
  9119  00269A                     __ptext46:
  9120                           	opt stack 0
  9121  00269A                     _WriteEE:
  9122                           	opt stack 23
  9123                           
  9124                           ;eeprom.c: 36: EEADRH = (unsigned char) (address >> 8);
  9125                           
  9126                           ;incstack = 0
  9127  00269A  5002               	movf	WriteEE@address+1,w,c
  9128  00269C  6EAA               	movwf	4010,c	;volatile
  9129                           
  9130                           ;eeprom.c: 37: EEADR = (unsigned char) address;
  9131  00269E  C001  FFA9         	movff	WriteEE@address,4009	;volatile
  9132                           
  9133                           ;eeprom.c: 39: EEDATA = data;
  9134  0026A2  C003  FFA8         	movff	WriteEE@data,4008	;volatile
  9135                           
  9136                           ;eeprom.c: 40: EECON1bits.EEPGD = 0;
  9137  0026A6  9EA6               	bcf	4006,7,c	;volatile
  9138                           
  9139                           ;eeprom.c: 41: EECON1bits.CFGS = 0;
  9140  0026A8  9CA6               	bcf	4006,6,c	;volatile
  9141                           
  9142                           ;eeprom.c: 42: EECON1bits.WREN = 1;
  9143  0026AA  84A6               	bsf	4006,2,c	;volatile
  9144                           
  9145                           ;eeprom.c: 46: EECON2 = 0x55;
  9146  0026AC  0E55               	movlw	85
  9147  0026AE  6EA7               	movwf	4007,c	;volatile
  9148                           
  9149                           ;eeprom.c: 47: EECON2 = 0xAA;
  9150  0026B0  0EAA               	movlw	170
  9151  0026B2  6EA7               	movwf	4007,c	;volatile
  9152                           
  9153                           ;eeprom.c: 48: EECON1bits.WR = 1;
  9154  0026B4  82A6               	bsf	4006,1,c	;volatile
  9155  0026B6                     i2l499:
  9156  0026B6  A8A1               	btfss	4001,4,c	;volatile
  9157  0026B8  D7FE               	goto	i2l499
  9158                           
  9159                           ;eeprom.c: 53: PIR2bits.EEIF = 0;
  9160  0026BA  98A1               	bcf	4001,4,c	;volatile
  9161                           
  9162                           ;eeprom.c: 54: EECON1bits.WREN = 0;
  9163  0026BC  94A6               	bcf	4006,2,c	;volatile
  9164  0026BE  0012               	return		;funcret
  9165  0026C0                     __end_of_WriteEE:
  9166                           	opt stack 0
  9167                           pclatu	equ	0xFFB
  9168                           pclath	equ	0xFFA
  9169                           tblptru	equ	0xFF8
  9170                           tblptrh	equ	0xFF7
  9171                           tblptrl	equ	0xFF6
  9172                           tablat	equ	0xFF5
  9173                           prodh	equ	0xFF4
  9174                           prodl	equ	0xFF3
  9175                           intcon	equ	0xFF2
  9176                           intcon2	equ	0xFF1
  9177                           intcon3	equ	0xFF0
  9178                           postinc0	equ	0xFEE
  9179                           fsr0h	equ	0xFEA
  9180                           fsr0l	equ	0xFE9
  9181                           wreg	equ	0xFE8
  9182                           postdec1	equ	0xFE5
  9183                           plusw1	equ	0xFE3
  9184                           fsr1h	equ	0xFE2
  9185                           fsr1l	equ	0xFE1
  9186                           indf2	equ	0xFDF
  9187                           postinc2	equ	0xFDE
  9188                           postdec2	equ	0xFDD
  9189                           plusw2	equ	0xFDB
  9190                           fsr2h	equ	0xFDA
  9191                           fsr2l	equ	0xFD9
  9192                           status	equ	0xFD8
  9193                           
  9194 ;; *************** function _V9Spin *****************
  9195 ;; Defined at:
  9196 ;;		line 20 in file "motors.c"
  9197 ;; Parameters:    Size  Location     Type
  9198 ;;  mode            1    wreg     unsigned char 
  9199 ;; Auto vars:     Size  Location     Type
  9200 ;;  mode            1   22[COMRAM] unsigned char 
  9201 ;;  port            6   23[COMRAM] int [3]
  9202 ;; Return value:  Size  Location     Type
  9203 ;;                  1    wreg      void 
  9204 ;; Registers used:
  9205 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9206 ;; Tracked objects:
  9207 ;;		On entry : 0/0
  9208 ;;		On exit  : 0/0
  9209 ;;		Unchanged: 0/0
  9210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9212 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9213 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9214 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9215 ;;Total ram usage:        8 bytes
  9216 ;; Hardware stack levels used:    1
  9217 ;; Hardware stack levels required when called:    2
  9218 ;; This function calls:
  9219 ;;		_PWMC
  9220 ;; This function is called by:
  9221 ;;		_mainloop
  9222 ;;		_simulate
  9223 ;;		_testServo
  9224 ;; This function uses a non-reentrant model
  9225 ;;
  9226                           
  9227                           	psect	text47
  9228  001A28                     __ptext47:
  9229                           	opt stack 0
  9230  001A28                     _V9Spin:
  9231                           	opt stack 22
  9232                           
  9233                           ;incstack = 0
  9234                           ;V9Spin@mode stored from wreg
  9235  001A28  6E17               	movwf	V9Spin@mode,c
  9236                           
  9237                           ;motors.c: 22: int port[] = {0, 0, 1};
  9238  001A2A  EE20  F0CD         	lfsr	2,V9Spin@F3059
  9239  001A2E  EE10  F018         	lfsr	1,V9Spin@port
  9240  001A32  0E05               	movlw	5
  9241  001A34                     i2u315_41:
  9242  001A34  CFDB FFE3          	movff	plusw2,plusw1
  9243  001A38  06E8               	decf	wreg,f,c
  9244  001A3A  E2FC               	bc	i2u315_41
  9245                           
  9246                           ;motors.c: 23: LATC = 0;
  9247  001A3C  0E00               	movlw	0
  9248  001A3E  6E8B               	movwf	3979,c	;volatile
  9249                           
  9250                           ;motors.c: 24: switch (mode) {
  9251  001A40  D01E               	goto	i2l4009
  9252  001A42                     i2l4003:
  9253                           
  9254                           ;motors.c: 26: PWMC(400, 1000, port);
  9255  001A42  0E01               	movlw	1
  9256  001A44  6E0A               	movwf	PWMC@widthus+1,c
  9257  001A46  0E90               	movlw	144
  9258  001A48  6E09               	movwf	PWMC@widthus,c
  9259  001A4A  0E03               	movlw	3
  9260  001A4C  6E0C               	movwf	PWMC@cycles+1,c
  9261  001A4E  0EE8               	movlw	232
  9262  001A50  6E0B               	movwf	PWMC@cycles,c
  9263  001A52  0E18               	movlw	low V9Spin@port
  9264  001A54  6E0D               	movwf	PWMC@port,c
  9265  001A56  0E00               	movlw	high V9Spin@port
  9266  001A58  6E0E               	movwf	PWMC@port+1,c
  9267  001A5A  EC57  F00B         	call	_PWMC	;wreg free
  9268                           
  9269                           ;motors.c: 27: break;
  9270  001A5E  D016               	goto	i2l4011
  9271  001A60                     i2l4005:
  9272                           
  9273                           ;motors.c: 29: PWMC(3000, 180, port);
  9274  001A60  0E0B               	movlw	11
  9275  001A62  6E0A               	movwf	PWMC@widthus+1,c
  9276  001A64  0EB8               	movlw	184
  9277  001A66  6E09               	movwf	PWMC@widthus,c
  9278  001A68  0E00               	movlw	0
  9279  001A6A  6E0C               	movwf	PWMC@cycles+1,c
  9280  001A6C  0EB4               	movlw	180
  9281  001A6E  6E0B               	movwf	PWMC@cycles,c
  9282  001A70  0E18               	movlw	low V9Spin@port
  9283  001A72  6E0D               	movwf	PWMC@port,c
  9284  001A74  0E00               	movlw	high V9Spin@port
  9285  001A76  6E0E               	movwf	PWMC@port+1,c
  9286  001A78  EC57  F00B         	call	_PWMC	;wreg free
  9287                           
  9288                           ;motors.c: 31: }
  9289                           
  9290                           ;motors.c: 30: break;
  9291  001A7C  D007               	goto	i2l4011
  9292  001A7E                     i2l4009:
  9293  001A7E  5017               	movf	V9Spin@mode,w,c
  9294                           
  9295                           ; Switch size 1, requested type "space"
  9296                           ; Number of cases is 2, Range of values is 0 to 1
  9297                           ; switch strategies available:
  9298                           ; Name         Instructions Cycles
  9299                           ; simple_byte            7     4 (average)
  9300                           ;	Chosen strategy is simple_byte
  9301  001A80  0A00               	xorlw	0	; case 0
  9302  001A82  B4D8               	btfsc	status,2,c
  9303  001A84  D7ED               	goto	i2l4005
  9304  001A86  0A01               	xorlw	1	; case 1
  9305  001A88  B4D8               	btfsc	status,2,c
  9306  001A8A  D7DB               	goto	i2l4003
  9307  001A8C                     i2l4011:
  9308                           
  9309                           ;motors.c: 32: _delay((unsigned long)((20)*(8000000/4000.0)));
  9310  001A8C  0E34               	movlw	52
  9311  001A8E  6E16               	movwf	??_V9Spin& (0+255),c
  9312  001A90  0EF2               	movlw	242
  9313  001A92                     i2u390_47:
  9314  001A92  2EE8               	decfsz	wreg,f,c
  9315  001A94  D7FE               	bra	i2u390_47
  9316  001A96  2E16               	decfsz	??_V9Spin& (0+255),f,c
  9317  001A98  D7FC               	bra	i2u390_47
  9318                           
  9319                           ;motors.c: 33: if (shake[2]) {
  9320  001A9A  5073               	movf	_shake+2,w,c
  9321  001A9C  B4D8               	btfsc	status,2,c
  9322  001A9E  D00F               	goto	i2l4017
  9323                           
  9324                           ;motors.c: 34: PWMC(450, 20, port);
  9325  001AA0  0E01               	movlw	1
  9326  001AA2  6E0A               	movwf	PWMC@widthus+1,c
  9327  001AA4  0EC2               	movlw	194
  9328  001AA6  6E09               	movwf	PWMC@widthus,c
  9329  001AA8  0E00               	movlw	0
  9330  001AAA  6E0C               	movwf	PWMC@cycles+1,c
  9331  001AAC  0E14               	movlw	20
  9332  001AAE  6E0B               	movwf	PWMC@cycles,c
  9333  001AB0  0E18               	movlw	low V9Spin@port
  9334  001AB2  6E0D               	movwf	PWMC@port,c
  9335  001AB4  0E00               	movlw	high V9Spin@port
  9336  001AB6  6E0E               	movwf	PWMC@port+1,c
  9337  001AB8  EC57  F00B         	call	_PWMC	;wreg free
  9338                           
  9339                           ;motors.c: 35: } else {
  9340  001ABC  0012               	return	
  9341  001ABE                     i2l4017:
  9342                           
  9343                           ;motors.c: 36: PWMC(5000, 20, port);
  9344  001ABE  0E13               	movlw	19
  9345  001AC0  6E0A               	movwf	PWMC@widthus+1,c
  9346  001AC2  0E88               	movlw	136
  9347  001AC4  6E09               	movwf	PWMC@widthus,c
  9348  001AC6  0E00               	movlw	0
  9349  001AC8  6E0C               	movwf	PWMC@cycles+1,c
  9350  001ACA  0E14               	movlw	20
  9351  001ACC  6E0B               	movwf	PWMC@cycles,c
  9352  001ACE  0E18               	movlw	low V9Spin@port
  9353  001AD0  6E0D               	movwf	PWMC@port,c
  9354  001AD2  0E00               	movlw	high V9Spin@port
  9355  001AD4  6E0E               	movwf	PWMC@port+1,c
  9356  001AD6  EC57  F00B         	call	_PWMC	;wreg free
  9357  001ADA  0012               	return	
  9358  001ADC                     __end_of_V9Spin:
  9359                           	opt stack 0
  9360                           pclatu	equ	0xFFB
  9361                           pclath	equ	0xFFA
  9362                           tblptru	equ	0xFF8
  9363                           tblptrh	equ	0xFF7
  9364                           tblptrl	equ	0xFF6
  9365                           tablat	equ	0xFF5
  9366                           prodh	equ	0xFF4
  9367                           prodl	equ	0xFF3
  9368                           intcon	equ	0xFF2
  9369                           intcon2	equ	0xFF1
  9370                           intcon3	equ	0xFF0
  9371                           postinc0	equ	0xFEE
  9372                           fsr0h	equ	0xFEA
  9373                           fsr0l	equ	0xFE9
  9374                           wreg	equ	0xFE8
  9375                           postdec1	equ	0xFE5
  9376                           plusw1	equ	0xFE3
  9377                           fsr1h	equ	0xFE2
  9378                           fsr1l	equ	0xFE1
  9379                           indf2	equ	0xFDF
  9380                           postinc2	equ	0xFDE
  9381                           postdec2	equ	0xFDD
  9382                           plusw2	equ	0xFDB
  9383                           fsr2h	equ	0xFDA
  9384                           fsr2l	equ	0xFD9
  9385                           status	equ	0xFD8
  9386                           
  9387 ;; *************** function _HexDecToDec2 *****************
  9388 ;; Defined at:
  9389 ;;		line 6 in file "modules.c"
  9390 ;; Parameters:    Size  Location     Type
  9391 ;;  hex             2    6[COMRAM] unsigned int 
  9392 ;; Auto vars:     Size  Location     Type
  9393 ;;  digit           2   13[COMRAM] unsigned int 
  9394 ;;  tenth           2   11[COMRAM] unsigned int 
  9395 ;; Return value:  Size  Location     Type
  9396 ;;                  2    6[COMRAM] unsigned int 
  9397 ;; Registers used:
  9398 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9399 ;; Tracked objects:
  9400 ;;		On entry : 0/0
  9401 ;;		On exit  : 0/0
  9402 ;;		Unchanged: 0/0
  9403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9404 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9405 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9406 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9407 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9408 ;;Total ram usage:        9 bytes
  9409 ;; Hardware stack levels used:    1
  9410 ;; Hardware stack levels required when called:    1
  9411 ;; This function calls:
  9412 ;;		i2___wmul
  9413 ;; This function is called by:
  9414 ;;		_mainloop
  9415 ;;		_simulate
  9416 ;; This function uses a non-reentrant model
  9417 ;;
  9418                           
  9419                           	psect	text48
  9420  0023E2                     __ptext48:
  9421                           	opt stack 0
  9422  0023E2                     _HexDecToDec2:
  9423                           	opt stack 23
  9424                           
  9425                           ;modules.c: 8: unsigned tenth = hex / 16;
  9426                           
  9427                           ;incstack = 0
  9428  0023E2  C007  F009         	movff	HexDecToDec2@hex,??_HexDecToDec2
  9429  0023E6  C008  F00A         	movff	HexDecToDec2@hex+1,??_HexDecToDec2+1
  9430  0023EA  0E04               	movlw	4
  9431  0023EC  6E0B               	movwf	(??_HexDecToDec2+2)& (0+255),c
  9432  0023EE                     i2u323_45:
  9433  0023EE  90D8               	bcf	status,0,c
  9434  0023F0  320A               	rrcf	??_HexDecToDec2+1,f,c
  9435  0023F2  3209               	rrcf	??_HexDecToDec2,f,c
  9436  0023F4  2E0B               	decfsz	(??_HexDecToDec2+2)& (0+255),f,c
  9437  0023F6  D7FB               	goto	i2u323_45
  9438  0023F8  C009  F00C         	movff	??_HexDecToDec2,HexDecToDec2@tenth
  9439  0023FC  C00A  F00D         	movff	??_HexDecToDec2+1,HexDecToDec2@tenth+1
  9440                           
  9441                           ;modules.c: 9: unsigned digit = hex % 16;
  9442  002400  0E0F               	movlw	15
  9443  002402  1407               	andwf	HexDecToDec2@hex,w,c
  9444  002404  6E0E               	movwf	HexDecToDec2@digit,c
  9445  002406  6A0F               	clrf	HexDecToDec2@digit+1,c
  9446                           
  9447                           ;modules.c: 10: return tenth * 10 + digit;
  9448  002408  C00C  F001         	movff	HexDecToDec2@tenth,i2___wmul@multiplier
  9449  00240C  C00D  F002         	movff	HexDecToDec2@tenth+1,i2___wmul@multiplier+1
  9450  002410  0E00               	movlw	0
  9451  002412  6E04               	movwf	i2___wmul@multiplicand+1,c
  9452  002414  0E0A               	movlw	10
  9453  002416  6E03               	movwf	i2___wmul@multiplicand,c
  9454  002418  EC60  F013         	call	i2___wmul	;wreg free
  9455  00241C  500E               	movf	HexDecToDec2@digit,w,c
  9456  00241E  2401               	addwf	?i2___wmul,w,c
  9457  002420  6E07               	movwf	?_HexDecToDec2,c
  9458  002422  500F               	movf	HexDecToDec2@digit+1,w,c
  9459  002424  2002               	addwfc	?i2___wmul+1,w,c
  9460  002426  6E08               	movwf	?_HexDecToDec2+1,c
  9461  002428  0012               	return	
  9462  00242A                     __end_of_HexDecToDec2:
  9463                           	opt stack 0
  9464                           pclatu	equ	0xFFB
  9465                           pclath	equ	0xFFA
  9466                           tblptru	equ	0xFF8
  9467                           tblptrh	equ	0xFF7
  9468                           tblptrl	equ	0xFF6
  9469                           tablat	equ	0xFF5
  9470                           prodh	equ	0xFF4
  9471                           prodl	equ	0xFF3
  9472                           intcon	equ	0xFF2
  9473                           intcon2	equ	0xFF1
  9474                           intcon3	equ	0xFF0
  9475                           postinc0	equ	0xFEE
  9476                           fsr0h	equ	0xFEA
  9477                           fsr0l	equ	0xFE9
  9478                           wreg	equ	0xFE8
  9479                           postdec1	equ	0xFE5
  9480                           plusw1	equ	0xFE3
  9481                           fsr1h	equ	0xFE2
  9482                           fsr1l	equ	0xFE1
  9483                           indf2	equ	0xFDF
  9484                           postinc2	equ	0xFDE
  9485                           postdec2	equ	0xFDD
  9486                           plusw2	equ	0xFDB
  9487                           fsr2h	equ	0xFDA
  9488                           fsr2l	equ	0xFD9
  9489                           status	equ	0xFD8
  9490                           
  9491 ;; *************** function _CSpin *****************
  9492 ;; Defined at:
  9493 ;;		line 40 in file "motors.c"
  9494 ;; Parameters:    Size  Location     Type
  9495 ;;  mode            1    wreg     unsigned char 
  9496 ;; Auto vars:     Size  Location     Type
  9497 ;;  mode            1   22[COMRAM] unsigned char 
  9498 ;;  port            6   23[COMRAM] int [3]
  9499 ;; Return value:  Size  Location     Type
  9500 ;;                  1    wreg      void 
  9501 ;; Registers used:
  9502 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9503 ;; Tracked objects:
  9504 ;;		On entry : 0/0
  9505 ;;		On exit  : 0/0
  9506 ;;		Unchanged: 0/0
  9507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9509 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9510 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9511 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9512 ;;Total ram usage:        8 bytes
  9513 ;; Hardware stack levels used:    1
  9514 ;; Hardware stack levels required when called:    2
  9515 ;; This function calls:
  9516 ;;		_PWMC
  9517 ;; This function is called by:
  9518 ;;		_mainloop
  9519 ;;		_simulate
  9520 ;;		_testServo
  9521 ;; This function uses a non-reentrant model
  9522 ;;
  9523                           
  9524                           	psect	text49
  9525  001ADC                     __ptext49:
  9526                           	opt stack 0
  9527  001ADC                     _CSpin:
  9528                           	opt stack 22
  9529                           
  9530                           ;incstack = 0
  9531                           ;CSpin@mode stored from wreg
  9532  001ADC  6E17               	movwf	CSpin@mode,c
  9533                           
  9534                           ;motors.c: 42: int port[] = {0, 1, 0};
  9535  001ADE  EE20  F0C7         	lfsr	2,CSpin@F3063
  9536  001AE2  EE10  F018         	lfsr	1,CSpin@port
  9537  001AE6  0E05               	movlw	5
  9538  001AE8                     i2u317_41:
  9539  001AE8  CFDB FFE3          	movff	plusw2,plusw1
  9540  001AEC  06E8               	decf	wreg,f,c
  9541  001AEE  E2FC               	bc	i2u317_41
  9542                           
  9543                           ;motors.c: 43: LATC = 0;
  9544  001AF0  0E00               	movlw	0
  9545  001AF2  6E8B               	movwf	3979,c	;volatile
  9546                           
  9547                           ;motors.c: 45: switch (mode) {
  9548  001AF4  D01E               	goto	i2l4029
  9549  001AF6                     i2l4023:
  9550                           
  9551                           ;motors.c: 47: PWMC(400, 800, port);
  9552  001AF6  0E01               	movlw	1
  9553  001AF8  6E0A               	movwf	PWMC@widthus+1,c
  9554  001AFA  0E90               	movlw	144
  9555  001AFC  6E09               	movwf	PWMC@widthus,c
  9556  001AFE  0E03               	movlw	3
  9557  001B00  6E0C               	movwf	PWMC@cycles+1,c
  9558  001B02  0E20               	movlw	32
  9559  001B04  6E0B               	movwf	PWMC@cycles,c
  9560  001B06  0E18               	movlw	low CSpin@port
  9561  001B08  6E0D               	movwf	PWMC@port,c
  9562  001B0A  0E00               	movlw	high CSpin@port
  9563  001B0C  6E0E               	movwf	PWMC@port+1,c
  9564  001B0E  EC57  F00B         	call	_PWMC	;wreg free
  9565                           
  9566                           ;motors.c: 48: break;
  9567  001B12  D016               	goto	i2l4031
  9568  001B14                     i2l4025:
  9569                           
  9570                           ;motors.c: 50: PWMC(3000, 180, port);
  9571  001B14  0E0B               	movlw	11
  9572  001B16  6E0A               	movwf	PWMC@widthus+1,c
  9573  001B18  0EB8               	movlw	184
  9574  001B1A  6E09               	movwf	PWMC@widthus,c
  9575  001B1C  0E00               	movlw	0
  9576  001B1E  6E0C               	movwf	PWMC@cycles+1,c
  9577  001B20  0EB4               	movlw	180
  9578  001B22  6E0B               	movwf	PWMC@cycles,c
  9579  001B24  0E18               	movlw	low CSpin@port
  9580  001B26  6E0D               	movwf	PWMC@port,c
  9581  001B28  0E00               	movlw	high CSpin@port
  9582  001B2A  6E0E               	movwf	PWMC@port+1,c
  9583  001B2C  EC57  F00B         	call	_PWMC	;wreg free
  9584                           
  9585                           ;motors.c: 52: }
  9586                           
  9587                           ;motors.c: 51: break;
  9588  001B30  D007               	goto	i2l4031
  9589  001B32                     i2l4029:
  9590  001B32  5017               	movf	CSpin@mode,w,c
  9591                           
  9592                           ; Switch size 1, requested type "space"
  9593                           ; Number of cases is 2, Range of values is 0 to 1
  9594                           ; switch strategies available:
  9595                           ; Name         Instructions Cycles
  9596                           ; simple_byte            7     4 (average)
  9597                           ;	Chosen strategy is simple_byte
  9598  001B34  0A00               	xorlw	0	; case 0
  9599  001B36  B4D8               	btfsc	status,2,c
  9600  001B38  D7ED               	goto	i2l4025
  9601  001B3A  0A01               	xorlw	1	; case 1
  9602  001B3C  B4D8               	btfsc	status,2,c
  9603  001B3E  D7DB               	goto	i2l4023
  9604  001B40                     i2l4031:
  9605                           
  9606                           ;motors.c: 53: _delay((unsigned long)((20)*(8000000/4000.0)));
  9607  001B40  0E34               	movlw	52
  9608  001B42  6E16               	movwf	??_CSpin& (0+255),c
  9609  001B44  0EF2               	movlw	242
  9610  001B46                     i2u391_47:
  9611  001B46  2EE8               	decfsz	wreg,f,c
  9612  001B48  D7FE               	bra	i2u391_47
  9613  001B4A  2E16               	decfsz	??_CSpin& (0+255),f,c
  9614  001B4C  D7FC               	bra	i2u391_47
  9615                           
  9616                           ;motors.c: 55: if (shake[1]) {
  9617  001B4E  5072               	movf	_shake+1,w,c
  9618  001B50  B4D8               	btfsc	status,2,c
  9619  001B52  D00F               	goto	i2l4037
  9620                           
  9621                           ;motors.c: 56: PWMC(450, 20, port);
  9622  001B54  0E01               	movlw	1
  9623  001B56  6E0A               	movwf	PWMC@widthus+1,c
  9624  001B58  0EC2               	movlw	194
  9625  001B5A  6E09               	movwf	PWMC@widthus,c
  9626  001B5C  0E00               	movlw	0
  9627  001B5E  6E0C               	movwf	PWMC@cycles+1,c
  9628  001B60  0E14               	movlw	20
  9629  001B62  6E0B               	movwf	PWMC@cycles,c
  9630  001B64  0E18               	movlw	low CSpin@port
  9631  001B66  6E0D               	movwf	PWMC@port,c
  9632  001B68  0E00               	movlw	high CSpin@port
  9633  001B6A  6E0E               	movwf	PWMC@port+1,c
  9634  001B6C  EC57  F00B         	call	_PWMC	;wreg free
  9635                           
  9636                           ;motors.c: 57: } else {
  9637  001B70  0012               	return	
  9638  001B72                     i2l4037:
  9639                           
  9640                           ;motors.c: 58: PWMC(5000, 20, port);
  9641  001B72  0E13               	movlw	19
  9642  001B74  6E0A               	movwf	PWMC@widthus+1,c
  9643  001B76  0E88               	movlw	136
  9644  001B78  6E09               	movwf	PWMC@widthus,c
  9645  001B7A  0E00               	movlw	0
  9646  001B7C  6E0C               	movwf	PWMC@cycles+1,c
  9647  001B7E  0E14               	movlw	20
  9648  001B80  6E0B               	movwf	PWMC@cycles,c
  9649  001B82  0E18               	movlw	low CSpin@port
  9650  001B84  6E0D               	movwf	PWMC@port,c
  9651  001B86  0E00               	movlw	high CSpin@port
  9652  001B88  6E0E               	movwf	PWMC@port+1,c
  9653  001B8A  EC57  F00B         	call	_PWMC	;wreg free
  9654  001B8E  0012               	return	
  9655  001B90                     __end_of_CSpin:
  9656                           	opt stack 0
  9657                           pclatu	equ	0xFFB
  9658                           pclath	equ	0xFFA
  9659                           tblptru	equ	0xFF8
  9660                           tblptrh	equ	0xFF7
  9661                           tblptrl	equ	0xFF6
  9662                           tablat	equ	0xFF5
  9663                           prodh	equ	0xFF4
  9664                           prodl	equ	0xFF3
  9665                           intcon	equ	0xFF2
  9666                           intcon2	equ	0xFF1
  9667                           intcon3	equ	0xFF0
  9668                           postinc0	equ	0xFEE
  9669                           fsr0h	equ	0xFEA
  9670                           fsr0l	equ	0xFE9
  9671                           wreg	equ	0xFE8
  9672                           postdec1	equ	0xFE5
  9673                           plusw1	equ	0xFE3
  9674                           fsr1h	equ	0xFE2
  9675                           fsr1l	equ	0xFE1
  9676                           indf2	equ	0xFDF
  9677                           postinc2	equ	0xFDE
  9678                           postdec2	equ	0xFDD
  9679                           plusw2	equ	0xFDB
  9680                           fsr2h	equ	0xFDA
  9681                           fsr2l	equ	0xFD9
  9682                           status	equ	0xFD8
  9683                           
  9684 ;; *************** function _AASpin *****************
  9685 ;; Defined at:
  9686 ;;		line 62 in file "motors.c"
  9687 ;; Parameters:    Size  Location     Type
  9688 ;;  mode            1    wreg     unsigned char 
  9689 ;; Auto vars:     Size  Location     Type
  9690 ;;  mode            1   22[COMRAM] unsigned char 
  9691 ;;  port            6   23[COMRAM] int [3]
  9692 ;; Return value:  Size  Location     Type
  9693 ;;                  1    wreg      void 
  9694 ;; Registers used:
  9695 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9696 ;; Tracked objects:
  9697 ;;		On entry : 0/0
  9698 ;;		On exit  : 0/0
  9699 ;;		Unchanged: 0/0
  9700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9702 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9703 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9704 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9705 ;;Total ram usage:        8 bytes
  9706 ;; Hardware stack levels used:    1
  9707 ;; Hardware stack levels required when called:    2
  9708 ;; This function calls:
  9709 ;;		_PWMC
  9710 ;; This function is called by:
  9711 ;;		_mainloop
  9712 ;;		_simulate
  9713 ;;		_testServo
  9714 ;; This function uses a non-reentrant model
  9715 ;;
  9716                           
  9717                           	psect	text50
  9718  001B90                     __ptext50:
  9719                           	opt stack 0
  9720  001B90                     _AASpin:
  9721                           	opt stack 22
  9722                           
  9723                           ;incstack = 0
  9724                           ;AASpin@mode stored from wreg
  9725  001B90  6E17               	movwf	AASpin@mode,c
  9726                           
  9727                           ;motors.c: 64: int port[] = {1, 0, 0};
  9728  001B92  EE20  F0C1         	lfsr	2,AASpin@F3067
  9729  001B96  EE10  F018         	lfsr	1,AASpin@port
  9730  001B9A  0E05               	movlw	5
  9731  001B9C                     i2u319_41:
  9732  001B9C  CFDB FFE3          	movff	plusw2,plusw1
  9733  001BA0  06E8               	decf	wreg,f,c
  9734  001BA2  E2FC               	bc	i2u319_41
  9735                           
  9736                           ;motors.c: 65: LATC = 0;
  9737  001BA4  0E00               	movlw	0
  9738  001BA6  6E8B               	movwf	3979,c	;volatile
  9739                           
  9740                           ;motors.c: 67: switch (mode) {
  9741  001BA8  D01E               	goto	i2l4049
  9742  001BAA                     i2l4043:
  9743                           
  9744                           ;motors.c: 69: PWMC(3000, 180, port);
  9745  001BAA  0E0B               	movlw	11
  9746  001BAC  6E0A               	movwf	PWMC@widthus+1,c
  9747  001BAE  0EB8               	movlw	184
  9748  001BB0  6E09               	movwf	PWMC@widthus,c
  9749  001BB2  0E00               	movlw	0
  9750  001BB4  6E0C               	movwf	PWMC@cycles+1,c
  9751  001BB6  0EB4               	movlw	180
  9752  001BB8  6E0B               	movwf	PWMC@cycles,c
  9753  001BBA  0E18               	movlw	low AASpin@port
  9754  001BBC  6E0D               	movwf	PWMC@port,c
  9755  001BBE  0E00               	movlw	high AASpin@port
  9756  001BC0  6E0E               	movwf	PWMC@port+1,c
  9757  001BC2  EC57  F00B         	call	_PWMC	;wreg free
  9758                           
  9759                           ;motors.c: 70: break;
  9760  001BC6  D016               	goto	i2l4051
  9761  001BC8                     i2l4045:
  9762                           
  9763                           ;motors.c: 72: PWMC(400, 800, port);
  9764  001BC8  0E01               	movlw	1
  9765  001BCA  6E0A               	movwf	PWMC@widthus+1,c
  9766  001BCC  0E90               	movlw	144
  9767  001BCE  6E09               	movwf	PWMC@widthus,c
  9768  001BD0  0E03               	movlw	3
  9769  001BD2  6E0C               	movwf	PWMC@cycles+1,c
  9770  001BD4  0E20               	movlw	32
  9771  001BD6  6E0B               	movwf	PWMC@cycles,c
  9772  001BD8  0E18               	movlw	low AASpin@port
  9773  001BDA  6E0D               	movwf	PWMC@port,c
  9774  001BDC  0E00               	movlw	high AASpin@port
  9775  001BDE  6E0E               	movwf	PWMC@port+1,c
  9776  001BE0  EC57  F00B         	call	_PWMC	;wreg free
  9777                           
  9778                           ;motors.c: 74: }
  9779                           
  9780                           ;motors.c: 73: break;
  9781  001BE4  D007               	goto	i2l4051
  9782  001BE6                     i2l4049:
  9783  001BE6  5017               	movf	AASpin@mode,w,c
  9784                           
  9785                           ; Switch size 1, requested type "space"
  9786                           ; Number of cases is 2, Range of values is 0 to 1
  9787                           ; switch strategies available:
  9788                           ; Name         Instructions Cycles
  9789                           ; simple_byte            7     4 (average)
  9790                           ;	Chosen strategy is simple_byte
  9791  001BE8  0A00               	xorlw	0	; case 0
  9792  001BEA  B4D8               	btfsc	status,2,c
  9793  001BEC  D7ED               	goto	i2l4045
  9794  001BEE  0A01               	xorlw	1	; case 1
  9795  001BF0  B4D8               	btfsc	status,2,c
  9796  001BF2  D7DB               	goto	i2l4043
  9797  001BF4                     i2l4051:
  9798                           
  9799                           ;motors.c: 75: _delay((unsigned long)((20)*(8000000/4000.0)));
  9800  001BF4  0E34               	movlw	52
  9801  001BF6  6E16               	movwf	??_AASpin& (0+255),c
  9802  001BF8  0EF2               	movlw	242
  9803  001BFA                     i2u392_47:
  9804  001BFA  2EE8               	decfsz	wreg,f,c
  9805  001BFC  D7FE               	bra	i2u392_47
  9806  001BFE  2E16               	decfsz	??_AASpin& (0+255),f,c
  9807  001C00  D7FC               	bra	i2u392_47
  9808                           
  9809                           ;motors.c: 77: if (shake[0]) {
  9810  001C02  5071               	movf	_shake,w,c
  9811  001C04  B4D8               	btfsc	status,2,c
  9812  001C06  D00F               	goto	i2l4057
  9813                           
  9814                           ;motors.c: 78: PWMC(450, 20, port);
  9815  001C08  0E01               	movlw	1
  9816  001C0A  6E0A               	movwf	PWMC@widthus+1,c
  9817  001C0C  0EC2               	movlw	194
  9818  001C0E  6E09               	movwf	PWMC@widthus,c
  9819  001C10  0E00               	movlw	0
  9820  001C12  6E0C               	movwf	PWMC@cycles+1,c
  9821  001C14  0E14               	movlw	20
  9822  001C16  6E0B               	movwf	PWMC@cycles,c
  9823  001C18  0E18               	movlw	low AASpin@port
  9824  001C1A  6E0D               	movwf	PWMC@port,c
  9825  001C1C  0E00               	movlw	high AASpin@port
  9826  001C1E  6E0E               	movwf	PWMC@port+1,c
  9827  001C20  EC57  F00B         	call	_PWMC	;wreg free
  9828                           
  9829                           ;motors.c: 79: } else {
  9830  001C24  0012               	return	
  9831  001C26                     i2l4057:
  9832                           
  9833                           ;motors.c: 80: PWMC(5000, 20, port);
  9834  001C26  0E13               	movlw	19
  9835  001C28  6E0A               	movwf	PWMC@widthus+1,c
  9836  001C2A  0E88               	movlw	136
  9837  001C2C  6E09               	movwf	PWMC@widthus,c
  9838  001C2E  0E00               	movlw	0
  9839  001C30  6E0C               	movwf	PWMC@cycles+1,c
  9840  001C32  0E14               	movlw	20
  9841  001C34  6E0B               	movwf	PWMC@cycles,c
  9842  001C36  0E18               	movlw	low AASpin@port
  9843  001C38  6E0D               	movwf	PWMC@port,c
  9844  001C3A  0E00               	movlw	high AASpin@port
  9845  001C3C  6E0E               	movwf	PWMC@port+1,c
  9846  001C3E  EC57  F00B         	call	_PWMC	;wreg free
  9847  001C42  0012               	return	
  9848  001C44                     __end_of_AASpin:
  9849                           	opt stack 0
  9850                           pclatu	equ	0xFFB
  9851                           pclath	equ	0xFFA
  9852                           tblptru	equ	0xFF8
  9853                           tblptrh	equ	0xFF7
  9854                           tblptrl	equ	0xFF6
  9855                           tablat	equ	0xFF5
  9856                           prodh	equ	0xFF4
  9857                           prodl	equ	0xFF3
  9858                           intcon	equ	0xFF2
  9859                           intcon2	equ	0xFF1
  9860                           intcon3	equ	0xFF0
  9861                           postinc0	equ	0xFEE
  9862                           fsr0h	equ	0xFEA
  9863                           fsr0l	equ	0xFE9
  9864                           wreg	equ	0xFE8
  9865                           postdec1	equ	0xFE5
  9866                           plusw1	equ	0xFE3
  9867                           fsr1h	equ	0xFE2
  9868                           fsr1l	equ	0xFE1
  9869                           indf2	equ	0xFDF
  9870                           postinc2	equ	0xFDE
  9871                           postdec2	equ	0xFDD
  9872                           plusw2	equ	0xFDB
  9873                           fsr2h	equ	0xFDA
  9874                           fsr2l	equ	0xFD9
  9875                           status	equ	0xFD8
  9876                           
  9877 ;; *************** function _PWMC *****************
  9878 ;; Defined at:
  9879 ;;		line 5 in file "motors.c"
  9880 ;; Parameters:    Size  Location     Type
  9881 ;;  widthus         2    8[COMRAM] int 
  9882 ;;  cycles          2   10[COMRAM] int 
  9883 ;;  port            2   12[COMRAM] PTR int 
  9884 ;;		 -> AASpin@port(6), CSpin@port(6), V9Spin@port(6), intrpt@port(6), 
  9885 ;; Auto vars:     Size  Location     Type
  9886 ;;  countdown       2   19[COMRAM] int 
  9887 ;; Return value:  Size  Location     Type
  9888 ;;                  1    wreg      void 
  9889 ;; Registers used:
  9890 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9891 ;; Tracked objects:
  9892 ;;		On entry : 0/0
  9893 ;;		On exit  : 0/0
  9894 ;;		Unchanged: 0/0
  9895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9896 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9897 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9898 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9899 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9900 ;;Total ram usage:       13 bytes
  9901 ;; Hardware stack levels used:    1
  9902 ;; Hardware stack levels required when called:    1
  9903 ;; This function calls:
  9904 ;;		___awdiv
  9905 ;; This function is called by:
  9906 ;;		_intrpt
  9907 ;;		_V9Spin
  9908 ;;		_CSpin
  9909 ;;		_AASpin
  9910 ;; This function uses a non-reentrant model
  9911 ;;
  9912                           
  9913                           	psect	text51
  9914  0016AE                     __ptext51:
  9915                           	opt stack 0
  9916  0016AE                     _PWMC:
  9917                           	opt stack 22
  9918                           
  9919                           ;motors.c: 6: widthus /= 10;
  9920                           
  9921                           ;incstack = 0
  9922  0016AE  C009  F001         	movff	PWMC@widthus,___awdiv@dividend
  9923  0016B2  C00A  F002         	movff	PWMC@widthus+1,___awdiv@dividend+1
  9924  0016B6  0E00               	movlw	0
  9925  0016B8  6E04               	movwf	___awdiv@divisor+1,c
  9926  0016BA  0E0A               	movlw	10
  9927  0016BC  6E03               	movwf	___awdiv@divisor,c
  9928  0016BE  EC4B  F00F         	call	___awdiv	;wreg free
  9929  0016C2  C001  F009         	movff	?___awdiv,PWMC@widthus
  9930  0016C6  C002  F00A         	movff	?___awdiv+1,PWMC@widthus+1
  9931                           
  9932                           ;motors.c: 7: widthus -= 1;
  9933  0016CA  0609               	decf	PWMC@widthus,f,c
  9934  0016CC  A0D8               	btfss	status,0,c
  9935  0016CE  060A               	decf	PWMC@widthus+1,f,c
  9936                           
  9937                           ;motors.c: 8: int countdown = widthus;
  9938  0016D0  C009  F014         	movff	PWMC@widthus,PWMC@countdown
  9939  0016D4  C00A  F015         	movff	PWMC@widthus+1,PWMC@countdown+1
  9940  0016D8                     i2l3501:
  9941  0016D8  BE0C               	btfsc	PWMC@cycles+1,7,c
  9942  0016DA  0012               	return	
  9943  0016DC  500C               	movf	PWMC@cycles+1,w,c
  9944  0016DE  E103               	bnz	i2l307
  9945  0016E0  040B               	decf	PWMC@cycles,w,c
  9946  0016E2  A0D8               	btfss	status,0,c
  9947  0016E4  0012               	return	
  9948  0016E6                     i2l307:
  9949                           
  9950                           ;motors.c: 10: countdown = widthus;
  9951  0016E6  C009  F014         	movff	PWMC@widthus,PWMC@countdown
  9952  0016EA  C00A  F015         	movff	PWMC@widthus+1,PWMC@countdown+1
  9953                           
  9954                           ;motors.c: 11: LATC0 = (1 ^ LATC0) & port[0];
  9955  0016EE  0E00               	movlw	0
  9956  0016F0  6E11               	movwf	_PWMC$1440,c
  9957  0016F2  B08B               	btfsc	3979,0,c	;volatile
  9958  0016F4  D00D               	goto	i2l3513
  9959  0016F6  C00D  FFD9         	movff	PWMC@port,fsr2l
  9960  0016FA  C00E  FFDA         	movff	PWMC@port+1,fsr2h
  9961  0016FE  CFDE F00F          	movff	postinc2,??_PWMC
  9962  001702  CFDD F010          	movff	postdec2,??_PWMC+1
  9963  001706  300F               	rrcf	??_PWMC,w,c
  9964  001708  A0D8               	btfss	status,0,c
  9965  00170A  D002               	goto	i2l3513
  9966  00170C  0E01               	movlw	1
  9967  00170E  6E11               	movwf	_PWMC$1440,c
  9968  001710                     i2l3513:
  9969  001710  B011               	btfsc	_PWMC$1440,0,c
  9970  001712  D002               	bra	i2u252_45
  9971  001714  908B               	bcf	3979,0,c	;volatile
  9972  001716  D001               	bra	i2u252_46
  9973  001718                     i2u252_45:
  9974  001718  808B               	bsf	3979,0,c	;volatile
  9975  00171A                     i2u252_46:
  9976                           
  9977                           ;motors.c: 12: LATC1 = (1 ^ LATC1) & port[1];
  9978  00171A  0E00               	movlw	0
  9979  00171C  6E12               	movwf	_PWMC$1441,c
  9980  00171E  B28B               	btfsc	3979,1,c	;volatile
  9981  001720  D00F               	goto	i2l3521
  9982  001722  EE20 F002          	lfsr	2,2
  9983  001726  500D               	movf	PWMC@port,w,c
  9984  001728  26D9               	addwf	fsr2l,f,c
  9985  00172A  500E               	movf	PWMC@port+1,w,c
  9986  00172C  22DA               	addwfc	fsr2h,f,c
  9987  00172E  CFDE F00F          	movff	postinc2,??_PWMC
  9988  001732  CFDD F010          	movff	postdec2,??_PWMC+1
  9989  001736  300F               	rrcf	??_PWMC,w,c
  9990  001738  A0D8               	btfss	status,0,c
  9991  00173A  D002               	goto	i2l3521
  9992  00173C  0E01               	movlw	1
  9993  00173E  6E12               	movwf	_PWMC$1441,c
  9994  001740                     i2l3521:
  9995  001740  B012               	btfsc	_PWMC$1441,0,c
  9996  001742  D002               	bra	i2u255_45
  9997  001744  928B               	bcf	3979,1,c	;volatile
  9998  001746  D001               	bra	i2u255_46
  9999  001748                     i2u255_45:
 10000  001748  828B               	bsf	3979,1,c	;volatile
 10001  00174A                     i2u255_46:
 10002                           
 10003                           ;motors.c: 13: LATC2 = (1 ^ LATC2) & port[2];
 10004  00174A  0E00               	movlw	0
 10005  00174C  6E13               	movwf	_PWMC$1442,c
 10006  00174E  B48B               	btfsc	3979,2,c	;volatile
 10007  001750  D00F               	goto	i2l3529
 10008  001752  EE20 F004          	lfsr	2,4
 10009  001756  500D               	movf	PWMC@port,w,c
 10010  001758  26D9               	addwf	fsr2l,f,c
 10011  00175A  500E               	movf	PWMC@port+1,w,c
 10012  00175C  22DA               	addwfc	fsr2h,f,c
 10013  00175E  CFDE F00F          	movff	postinc2,??_PWMC
 10014  001762  CFDD F010          	movff	postdec2,??_PWMC+1
 10015  001766  300F               	rrcf	??_PWMC,w,c
 10016  001768  A0D8               	btfss	status,0,c
 10017  00176A  D002               	goto	i2l3529
 10018  00176C  0E01               	movlw	1
 10019  00176E  6E13               	movwf	_PWMC$1442,c
 10020  001770                     i2l3529:
 10021  001770  B013               	btfsc	_PWMC$1442,0,c
 10022  001772  D002               	bra	i2u258_45
 10023  001774  948B               	bcf	3979,2,c	;volatile
 10024  001776  D001               	bra	i2u258_46
 10025  001778                     i2u258_45:
 10026  001778  848B               	bsf	3979,2,c	;volatile
 10027  00177A                     i2u258_46:
 10028  00177A                     i2l3531:
 10029  00177A  BE15               	btfsc	PWMC@countdown+1,7,c
 10030  00177C  D00D               	goto	i2l3539
 10031  00177E  5015               	movf	PWMC@countdown+1,w,c
 10032  001780  E103               	bnz	i2l3535
 10033  001782  0414               	decf	PWMC@countdown,w,c
 10034  001784  A0D8               	btfss	status,0,c
 10035  001786  D008               	goto	i2l3539
 10036  001788                     i2l3535:
 10037                           
 10038                           ;motors.c: 15: _delay((unsigned long)((5)*(8000000/4000000.0)));
 10039  001788  0E03               	movlw	3
 10040  00178A                     i2u393_47:
 10041  00178A  2EE8               	decfsz	wreg,f,c
 10042  00178C  D7FE               	bra	i2u393_47
 10043  00178E  F000               	nop	
 10044  001790  0614               	decf	PWMC@countdown,f,c
 10045  001792  A0D8               	btfss	status,0,c
 10046  001794  0615               	decf	PWMC@countdown+1,f,c
 10047  001796  D7F1               	goto	i2l3531
 10048  001798                     i2l3539:
 10049  001798  060B               	decf	PWMC@cycles,f,c
 10050  00179A  A0D8               	btfss	status,0,c
 10051  00179C  060C               	decf	PWMC@cycles+1,f,c
 10052  00179E  D79C               	goto	i2l3501
 10053  0017A0                     __end_of_PWMC:
 10054                           	opt stack 0
 10055                           pclatu	equ	0xFFB
 10056                           pclath	equ	0xFFA
 10057                           tblptru	equ	0xFF8
 10058                           tblptrh	equ	0xFF7
 10059                           tblptrl	equ	0xFF6
 10060                           tablat	equ	0xFF5
 10061                           prodh	equ	0xFF4
 10062                           prodl	equ	0xFF3
 10063                           intcon	equ	0xFF2
 10064                           intcon2	equ	0xFF1
 10065                           intcon3	equ	0xFF0
 10066                           postinc0	equ	0xFEE
 10067                           fsr0h	equ	0xFEA
 10068                           fsr0l	equ	0xFE9
 10069                           wreg	equ	0xFE8
 10070                           postdec1	equ	0xFE5
 10071                           plusw1	equ	0xFE3
 10072                           fsr1h	equ	0xFE2
 10073                           fsr1l	equ	0xFE1
 10074                           indf2	equ	0xFDF
 10075                           postinc2	equ	0xFDE
 10076                           postdec2	equ	0xFDD
 10077                           plusw2	equ	0xFDB
 10078                           fsr2h	equ	0xFDA
 10079                           fsr2l	equ	0xFD9
 10080                           status	equ	0xFD8
 10081                           
 10082 ;; *************** function ___awdiv *****************
 10083 ;; Defined at:
 10084 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
 10085 ;; Parameters:    Size  Location     Type
 10086 ;;  dividend        2    0[COMRAM] int 
 10087 ;;  divisor         2    2[COMRAM] int 
 10088 ;; Auto vars:     Size  Location     Type
 10089 ;;  quotient        2    6[COMRAM] int 
 10090 ;;  sign            1    5[COMRAM] unsigned char 
 10091 ;;  counter         1    4[COMRAM] unsigned char 
 10092 ;; Return value:  Size  Location     Type
 10093 ;;                  2    0[COMRAM] int 
 10094 ;; Registers used:
 10095 ;;		wreg, status,2, status,0
 10096 ;; Tracked objects:
 10097 ;;		On entry : 0/0
 10098 ;;		On exit  : 0/0
 10099 ;;		Unchanged: 0/0
 10100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10101 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10102 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10104 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10105 ;;Total ram usage:        8 bytes
 10106 ;; Hardware stack levels used:    1
 10107 ;; This function calls:
 10108 ;;		Nothing
 10109 ;; This function is called by:
 10110 ;;		_PWMC
 10111 ;; This function uses a non-reentrant model
 10112 ;;
 10113                           
 10114                           	psect	text52
 10115  001E96                     __ptext52:
 10116                           	opt stack 0
 10117  001E96                     ___awdiv:
 10118                           	opt stack 22
 10119                           
 10120                           ;incstack = 0
 10121  001E96  0E00               	movlw	0
 10122  001E98  6E06               	movwf	___awdiv@sign,c
 10123  001E9A  AE04               	btfss	___awdiv@divisor+1,7,c
 10124  001E9C  D006               	goto	i2l3267
 10125  001E9E  6C03               	negf	___awdiv@divisor,c
 10126  001EA0  1E04               	comf	___awdiv@divisor+1,f,c
 10127  001EA2  B0D8               	btfsc	status,0,c
 10128  001EA4  2A04               	incf	___awdiv@divisor+1,f,c
 10129  001EA6  0E01               	movlw	1
 10130  001EA8  6E06               	movwf	___awdiv@sign,c
 10131  001EAA                     i2l3267:
 10132  001EAA  AE02               	btfss	___awdiv@dividend+1,7,c
 10133  001EAC  D006               	goto	i2l3273
 10134  001EAE  6C01               	negf	___awdiv@dividend,c
 10135  001EB0  1E02               	comf	___awdiv@dividend+1,f,c
 10136  001EB2  B0D8               	btfsc	status,0,c
 10137  001EB4  2A02               	incf	___awdiv@dividend+1,f,c
 10138  001EB6  0E01               	movlw	1
 10139  001EB8  1A06               	xorwf	___awdiv@sign,f,c
 10140  001EBA                     i2l3273:
 10141  001EBA  0E00               	movlw	0
 10142  001EBC  6E08               	movwf	___awdiv@quotient+1,c
 10143  001EBE  0E00               	movlw	0
 10144  001EC0  6E07               	movwf	___awdiv@quotient,c
 10145  001EC2  5003               	movf	___awdiv@divisor,w,c
 10146  001EC4  1004               	iorwf	___awdiv@divisor+1,w,c
 10147  001EC6  B4D8               	btfsc	status,2,c
 10148  001EC8  D01C               	goto	i2l3295
 10149  001ECA  0E01               	movlw	1
 10150  001ECC  6E05               	movwf	___awdiv@counter,c
 10151  001ECE  D004               	goto	i2l3281
 10152  001ED0                     i2l3279:
 10153  001ED0  90D8               	bcf	status,0,c
 10154  001ED2  3603               	rlcf	___awdiv@divisor,f,c
 10155  001ED4  3604               	rlcf	___awdiv@divisor+1,f,c
 10156  001ED6  2A05               	incf	___awdiv@counter,f,c
 10157  001ED8                     i2l3281:
 10158  001ED8  AE04               	btfss	___awdiv@divisor+1,7,c
 10159  001EDA  D7FA               	goto	i2l3279
 10160  001EDC                     i2l3283:
 10161  001EDC  90D8               	bcf	status,0,c
 10162  001EDE  3607               	rlcf	___awdiv@quotient,f,c
 10163  001EE0  3608               	rlcf	___awdiv@quotient+1,f,c
 10164  001EE2  5003               	movf	___awdiv@divisor,w,c
 10165  001EE4  5C01               	subwf	___awdiv@dividend,w,c
 10166  001EE6  5004               	movf	___awdiv@divisor+1,w,c
 10167  001EE8  5802               	subwfb	___awdiv@dividend+1,w,c
 10168  001EEA  A0D8               	btfss	status,0,c
 10169  001EEC  D005               	goto	i2l3291
 10170  001EEE  5003               	movf	___awdiv@divisor,w,c
 10171  001EF0  5E01               	subwf	___awdiv@dividend,f,c
 10172  001EF2  5004               	movf	___awdiv@divisor+1,w,c
 10173  001EF4  5A02               	subwfb	___awdiv@dividend+1,f,c
 10174  001EF6  8007               	bsf	___awdiv@quotient,0,c
 10175  001EF8                     i2l3291:
 10176  001EF8  90D8               	bcf	status,0,c
 10177  001EFA  3204               	rrcf	___awdiv@divisor+1,f,c
 10178  001EFC  3203               	rrcf	___awdiv@divisor,f,c
 10179  001EFE  2E05               	decfsz	___awdiv@counter,f,c
 10180  001F00  D7ED               	goto	i2l3283
 10181  001F02                     i2l3295:
 10182  001F02  5006               	movf	___awdiv@sign,w,c
 10183  001F04  B4D8               	btfsc	status,2,c
 10184  001F06  D004               	goto	i2l3299
 10185  001F08  6C07               	negf	___awdiv@quotient,c
 10186  001F0A  1E08               	comf	___awdiv@quotient+1,f,c
 10187  001F0C  B0D8               	btfsc	status,0,c
 10188  001F0E  2A08               	incf	___awdiv@quotient+1,f,c
 10189  001F10                     i2l3299:
 10190  001F10  C007  F001         	movff	___awdiv@quotient,?___awdiv
 10191  001F14  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
 10192  001F18  0012               	return	
 10193  001F1A                     __end_of___awdiv:
 10194                           	opt stack 0
 10195                           pclatu	equ	0xFFB
 10196                           pclath	equ	0xFFA
 10197                           tblptru	equ	0xFF8
 10198                           tblptrh	equ	0xFF7
 10199                           tblptrl	equ	0xFF6
 10200                           tablat	equ	0xFF5
 10201                           prodh	equ	0xFF4
 10202                           prodl	equ	0xFF3
 10203                           intcon	equ	0xFF2
 10204                           intcon2	equ	0xFF1
 10205                           intcon3	equ	0xFF0
 10206                           postinc0	equ	0xFEE
 10207                           fsr0h	equ	0xFEA
 10208                           fsr0l	equ	0xFE9
 10209                           wreg	equ	0xFE8
 10210                           postdec1	equ	0xFE5
 10211                           plusw1	equ	0xFE3
 10212                           fsr1h	equ	0xFE2
 10213                           fsr1l	equ	0xFE1
 10214                           indf2	equ	0xFDF
 10215                           postinc2	equ	0xFDE
 10216                           postdec2	equ	0xFDD
 10217                           plusw2	equ	0xFDB
 10218                           fsr2h	equ	0xFDA
 10219                           fsr2l	equ	0xFD9
 10220                           status	equ	0xFD8
 10221                           
 10222 ;; *************** function _PermLog *****************
 10223 ;; Defined at:
 10224 ;;		line 90 in file "eeprom.c"
 10225 ;; Parameters:    Size  Location     Type
 10226 ;;		None
 10227 ;; Auto vars:     Size  Location     Type
 10228 ;;  sorted          4   49[COMRAM] unsigned char [4]
 10229 ;;  time            2   54[COMRAM] unsigned int 
 10230 ;;  backruns        2   56[COMRAM] int 
 10231 ;;  goback          1   53[COMRAM] unsigned char 
 10232 ;; Return value:  Size  Location     Type
 10233 ;;                  1    wreg      void 
 10234 ;; Registers used:
 10235 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10236 ;; Tracked objects:
 10237 ;;		On entry : 0/0
 10238 ;;		On exit  : 0/0
 10239 ;;		Unchanged: 0/0
 10240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10242 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10243 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10244 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10245 ;;Total ram usage:       11 bytes
 10246 ;; Hardware stack levels used:    1
 10247 ;; Hardware stack levels required when called:    4
 10248 ;; This function calls:
 10249 ;;		_ReadRun
 10250 ;;		_captureKeypad
 10251 ;;		_showInfo
 10252 ;;		i2_lcdInst
 10253 ;;		i2_printf
 10254 ;; This function is called by:
 10255 ;;		_intrpt
 10256 ;; This function uses a non-reentrant model
 10257 ;;
 10258                           
 10259                           	psect	text53
 10260  001890                     __ptext53:
 10261                           	opt stack 0
 10262  001890                     _PermLog:
 10263                           	opt stack 21
 10264                           
 10265                           ;eeprom.c: 91: unsigned char goback = 0;
 10266                           
 10267                           ;incstack = 0
 10268  001890  0E00               	movlw	0
 10269  001892  D067               	goto	L3
 10270  001894                     i2l4571:
 10271                           
 10272                           ;eeprom.c: 93: lcdInst(0b10000000);
 10273  001894  0E80               	movlw	128
 10274  001896  EC19  F014         	call	i2_lcdInst
 10275                           
 10276                           ;eeprom.c: 94: printf("Permanent log:       ");
 10277  00189A  0EA5               	movlw	low STR_55
 10278  00189C  6E0D               	movwf	i2printf@f,c
 10279  00189E  0EFE               	movlw	high STR_55
 10280  0018A0  6E0E               	movwf	i2printf@f+1,c
 10281  0018A2  EC3E  F002         	call	i2_printf	;wreg free
 10282                           
 10283                           ;eeprom.c: 95: lcdInst(0b11000000);
 10284  0018A6  0EC0               	movlw	192
 10285  0018A8  EC19  F014         	call	i2_lcdInst
 10286                           
 10287                           ;eeprom.c: 96: printf("Which run?       ");
 10288  0018AC  0E78               	movlw	low STR_56
 10289  0018AE  6E0D               	movwf	i2printf@f,c
 10290  0018B0  0EFF               	movlw	high STR_56
 10291  0018B2  6E0E               	movwf	i2printf@f+1,c
 10292  0018B4  EC3E  F002         	call	i2_printf	;wreg free
 10293                           
 10294                           ;eeprom.c: 97: int backruns = captureKeypad() - 8;
 10295  0018B8  ECB3  F013         	call	_captureKeypad	;wreg free
 10296  0018BC  0EF8               	movlw	248
 10297  0018BE  2401               	addwf	?_captureKeypad,w,c
 10298  0018C0  6E39               	movwf	PermLog@backruns,c
 10299  0018C2  0EFF               	movlw	255
 10300  0018C4  2002               	addwfc	?_captureKeypad+1,w,c
 10301  0018C6  6E3A               	movwf	PermLog@backruns+1,c
 10302                           
 10303                           ;eeprom.c: 98: if (backruns>=0 && backruns < 4){
 10304  0018C8  BE3A               	btfsc	PermLog@backruns+1,7,c
 10305  0018CA  D04A               	goto	i2l4599
 10306  0018CC  BE3A               	btfsc	PermLog@backruns+1,7,c
 10307  0018CE  D006               	goto	i2l4583
 10308  0018D0  503A               	movf	PermLog@backruns+1,w,c
 10309  0018D2  E146               	bnz	i2l4599
 10310  0018D4  0E04               	movlw	4
 10311  0018D6  5C39               	subwf	PermLog@backruns,w,c
 10312  0018D8  B0D8               	btfsc	status,0,c
 10313  0018DA  D042               	goto	i2l4599
 10314  0018DC                     i2l4583:
 10315                           
 10316                           ;eeprom.c: 99: unsigned int time;
 10317                           ;eeprom.c: 100: unsigned char sorted[] = {0, 0, 0, 0};
 10318  0018DC  C0B0  F032         	movff	PermLog@F3082,PermLog@sorted
 10319  0018E0  C0B1  F033         	movff	PermLog@F3082+1,PermLog@sorted+1
 10320  0018E4  C0B2  F034         	movff	PermLog@F3082+2,PermLog@sorted+2
 10321  0018E8  C0B3  F035         	movff	PermLog@F3082+3,PermLog@sorted+3
 10322                           
 10323                           ;eeprom.c: 101: ReadRun(backruns, sorted, &time);
 10324  0018EC  0E32               	movlw	low PermLog@sorted
 10325  0018EE  6E03               	movwf	ReadRun@sorted,c
 10326  0018F0  0E00               	movlw	high PermLog@sorted
 10327  0018F2  6E04               	movwf	ReadRun@sorted+1,c
 10328  0018F4  0E37               	movlw	low PermLog@time
 10329  0018F6  6E05               	movwf	ReadRun@time,c
 10330  0018F8  0E00               	movlw	high PermLog@time
 10331  0018FA  6E06               	movwf	ReadRun@time+1,c
 10332  0018FC  5039               	movf	PermLog@backruns,w,c
 10333  0018FE  EC44  F00A         	call	_ReadRun
 10334                           
 10335                           ;eeprom.c: 102: lcdInst(0b10000000);
 10336  001902  0E80               	movlw	128
 10337  001904  EC19  F014         	call	i2_lcdInst
 10338                           
 10339                           ;eeprom.c: 103: printf("showing %u      ", backruns+1);
 10340  001908  0EAD               	movlw	low STR_57
 10341  00190A  6E0D               	movwf	i2printf@f,c
 10342  00190C  0EFF               	movlw	high STR_57
 10343  00190E  6E0E               	movwf	i2printf@f+1,c
 10344  001910  0E01               	movlw	1
 10345  001912  2439               	addwf	PermLog@backruns,w,c
 10346  001914  6E0F               	movwf	?i2_printf+2,c
 10347  001916  0E00               	movlw	0
 10348  001918  203A               	addwfc	PermLog@backruns+1,w,c
 10349  00191A  6E10               	movwf	?i2_printf+3,c
 10350  00191C  EC3E  F002         	call	i2_printf	;wreg free
 10351                           
 10352                           ;eeprom.c: 104: lcdInst(0b11000000);
 10353  001920  0EC0               	movlw	192
 10354  001922  EC19  F014         	call	i2_lcdInst
 10355                           
 10356                           ;eeprom.c: 105: printf("runs before     ");
 10357  001926  0EBE               	movlw	low STR_58
 10358  001928  6E0D               	movwf	i2printf@f,c
 10359  00192A  0EFF               	movlw	high STR_58
 10360  00192C  6E0E               	movwf	i2printf@f+1,c
 10361  00192E  EC3E  F002         	call	i2_printf	;wreg free
 10362                           
 10363                           ;eeprom.c: 106: _delay((unsigned long)((700)*(8000000/4000.0)));
 10364  001932  0E08               	movlw	8
 10365  001934  6E31               	movwf	(??_PermLog+1)& (0+255),c
 10366  001936  0E1B               	movlw	27
 10367  001938  6E30               	movwf	??_PermLog& (0+255),c
 10368  00193A  0E27               	movlw	39
 10369  00193C                     i2u394_47:
 10370  00193C  2EE8               	decfsz	wreg,f,c
 10371  00193E  D7FE               	bra	i2u394_47
 10372  001940  2E30               	decfsz	??_PermLog& (0+255),f,c
 10373  001942  D7FC               	bra	i2u394_47
 10374  001944  2E31               	decfsz	(??_PermLog+1)& (0+255),f,c
 10375  001946  D7FA               	bra	i2u394_47
 10376  001948  F000               	nop	
 10377                           
 10378                           ;eeprom.c: 107: showInfo(time, sorted);
 10379  00194A  C037  F023         	movff	PermLog@time,showInfo@time
 10380  00194E  C038  F024         	movff	PermLog@time+1,showInfo@time+1
 10381  001952  0E32               	movlw	low PermLog@sorted
 10382  001954  6E25               	movwf	showInfo@sorted,c
 10383  001956  0E00               	movlw	high PermLog@sorted
 10384  001958  6E26               	movwf	showInfo@sorted+1,c
 10385  00195A  EC7F  F008         	call	_showInfo	;wreg free
 10386                           
 10387                           ;eeprom.c: 108: } else goback = 1;
 10388  00195E  D002               	goto	i2l516
 10389  001960                     i2l4599:
 10390  001960  0E01               	movlw	1
 10391  001962                     L3:
 10392  001962  6E36               	movwf	PermLog@goback,c
 10393  001964                     i2l516:
 10394  001964  5036               	movf	PermLog@goback,w,c
 10395  001966  A4D8               	btfss	status,2,c
 10396  001968  0012               	return	
 10397  00196A  D794               	goto	i2l4571
 10398  00196C                     __end_of_PermLog:
 10399                           	opt stack 0
 10400                           pclatu	equ	0xFFB
 10401                           pclath	equ	0xFFA
 10402                           tblptru	equ	0xFF8
 10403                           tblptrh	equ	0xFF7
 10404                           tblptrl	equ	0xFF6
 10405                           tablat	equ	0xFF5
 10406                           prodh	equ	0xFF4
 10407                           prodl	equ	0xFF3
 10408                           intcon	equ	0xFF2
 10409                           intcon2	equ	0xFF1
 10410                           intcon3	equ	0xFF0
 10411                           postinc0	equ	0xFEE
 10412                           fsr0h	equ	0xFEA
 10413                           fsr0l	equ	0xFE9
 10414                           wreg	equ	0xFE8
 10415                           postdec1	equ	0xFE5
 10416                           plusw1	equ	0xFE3
 10417                           fsr1h	equ	0xFE2
 10418                           fsr1l	equ	0xFE1
 10419                           indf2	equ	0xFDF
 10420                           postinc2	equ	0xFDE
 10421                           postdec2	equ	0xFDD
 10422                           plusw2	equ	0xFDB
 10423                           fsr2h	equ	0xFDA
 10424                           fsr2l	equ	0xFD9
 10425                           status	equ	0xFD8
 10426                           
 10427 ;; *************** function _showInfo *****************
 10428 ;; Defined at:
 10429 ;;		line 23 in file "modules.c"
 10430 ;; Parameters:    Size  Location     Type
 10431 ;;  time            2   34[COMRAM] unsigned int 
 10432 ;;  sorted          2   36[COMRAM] PTR unsigned char 
 10433 ;;		 -> PermLog@sorted(4), simulate@sorted(4), mainloop@sorted(4), 
 10434 ;; Auto vars:     Size  Location     Type
 10435 ;;  stop            2   45[COMRAM] int 
 10436 ;;  type            2   43[COMRAM] int 
 10437 ;; Return value:  Size  Location     Type
 10438 ;;                  1    wreg      void 
 10439 ;; Registers used:
 10440 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10441 ;; Tracked objects:
 10442 ;;		On entry : 0/0
 10443 ;;		On exit  : 0/0
 10444 ;;		Unchanged: 0/0
 10445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10446 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10447 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10448 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10449 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10450 ;;Total ram usage:       13 bytes
 10451 ;; Hardware stack levels used:    1
 10452 ;; Hardware stack levels required when called:    3
 10453 ;; This function calls:
 10454 ;;		_captureKeypad
 10455 ;;		i2_lcdInst
 10456 ;;		i2_printf
 10457 ;; This function is called by:
 10458 ;;		_mainloop
 10459 ;;		_simulate
 10460 ;;		_PermLog
 10461 ;; This function uses a non-reentrant model
 10462 ;;
 10463                           
 10464                           	psect	text54
 10465  0010FE                     __ptext54:
 10466                           	opt stack 0
 10467  0010FE                     _showInfo:
 10468                           	opt stack 21
 10469                           
 10470                           ;modules.c: 24: lcdInst(0b10000000);
 10471                           
 10472                           ;incstack = 0
 10473  0010FE  0E80               	movlw	128
 10474  001100  EC19  F014         	call	i2_lcdInst
 10475                           
 10476                           ;modules.c: 25: printf("Press a key          ");
 10477  001104  0EE7               	movlw	low STR_34
 10478  001106  6E0D               	movwf	i2printf@f,c
 10479  001108  0EFE               	movlw	high STR_34
 10480  00110A  6E0E               	movwf	i2printf@f+1,c
 10481  00110C  EC3E  F002         	call	i2_printf	;wreg free
 10482                           
 10483                           ;modules.c: 26: lcdInst(0b11000000);
 10484  001110  0EC0               	movlw	192
 10485  001112  EC19  F014         	call	i2_lcdInst
 10486                           
 10487                           ;modules.c: 27: printf("For more info          ");
 10488  001116  0E76               	movlw	low STR_35
 10489  001118  6E0D               	movwf	i2printf@f,c
 10490  00111A  0EFE               	movlw	high STR_35
 10491  00111C  6E0E               	movwf	i2printf@f+1,c
 10492  00111E  EC3E  F002         	call	i2_printf	;wreg free
 10493                           
 10494                           ;modules.c: 28: int type = 0;
 10495  001122  0E00               	movlw	0
 10496  001124  6E2D               	movwf	showInfo@type+1,c
 10497  001126  0E00               	movlw	0
 10498  001128  6E2C               	movwf	showInfo@type,c
 10499                           
 10500                           ;modules.c: 29: int stop = 0;
 10501  00112A  0E00               	movlw	0
 10502  00112C  6E2F               	movwf	showInfo@stop+1,c
 10503  00112E  0E00               	movlw	0
 10504  001130  D0D7               	goto	L4
 10505  001132                     i2l4151:
 10506                           
 10507                           ;modules.c: 31: type = captureKeypad();
 10508  001132  ECB3  F013         	call	_captureKeypad	;wreg free
 10509  001136  C001  F02C         	movff	?_captureKeypad,showInfo@type
 10510  00113A  C002  F02D         	movff	?_captureKeypad+1,showInfo@type+1
 10511                           
 10512                           ;modules.c: 33: switch (type) {
 10513  00113E  D0D2               	goto	i2l4191
 10514  001140                     i2l4153:
 10515                           
 10516                           ;modules.c: 35: lcdInst(0b10000000);
 10517  001140  0E80               	movlw	128
 10518  001142  EC19  F014         	call	i2_lcdInst
 10519                           
 10520                           ;modules.c: 36: printf("Time Elapsed:          ");
 10521  001146  0E46               	movlw	low STR_36
 10522  001148  6E0D               	movwf	i2printf@f,c
 10523  00114A  0EFE               	movlw	high STR_36
 10524  00114C  6E0E               	movwf	i2printf@f+1,c
 10525  00114E  EC3E  F002         	call	i2_printf	;wreg free
 10526                           
 10527                           ;modules.c: 37: lcdInst(0b11000000);
 10528  001152  0EC0               	movlw	192
 10529  001154  EC19  F014         	call	i2_lcdInst
 10530                           
 10531                           ;modules.c: 38: printf("%u seconds          ", time);
 10532  001158  0E27               	movlw	low STR_37
 10533  00115A  6E0D               	movwf	i2printf@f,c
 10534  00115C  0EFF               	movlw	high STR_37
 10535  00115E  6E0E               	movwf	i2printf@f+1,c
 10536  001160  C023  F00F         	movff	showInfo@time,?i2_printf+2
 10537  001164  C024  F010         	movff	showInfo@time+1,?i2_printf+3
 10538  001168  EC3E  F002         	call	i2_printf	;wreg free
 10539                           
 10540                           ;modules.c: 39: break;
 10541  00116C  D0D7               	goto	i2l4193
 10542  00116E                     i2l4159:
 10543                           
 10544                           ;modules.c: 41: lcdInst(0b10000000);
 10545  00116E  0E80               	movlw	128
 10546  001170  EC19  F014         	call	i2_lcdInst
 10547                           
 10548                           ;modules.c: 42: printf("Total Sorted:          ");
 10549  001174  0E5E               	movlw	low STR_38
 10550  001176  6E0D               	movwf	i2printf@f,c
 10551  001178  0EFE               	movlw	high STR_38
 10552  00117A  6E0E               	movwf	i2printf@f+1,c
 10553  00117C  EC3E  F002         	call	i2_printf	;wreg free
 10554                           
 10555                           ;modules.c: 43: lcdInst(0b11000000);
 10556  001180  0EC0               	movlw	192
 10557  001182  EC19  F014         	call	i2_lcdInst
 10558                           
 10559                           ;modules.c: 44: printf("%u batteries          ", sorted[0] + sorted[1] + sorted[2] + sor
      +                          ted[3]);
 10560  001186  0E8E               	movlw	low STR_39
 10561  001188  6E0D               	movwf	i2printf@f,c
 10562  00118A  0EFE               	movlw	high STR_39
 10563  00118C  6E0E               	movwf	i2printf@f+1,c
 10564  00118E  EE20 F003          	lfsr	2,3
 10565  001192  5025               	movf	showInfo@sorted,w,c
 10566  001194  26D9               	addwf	fsr2l,f,c
 10567  001196  5026               	movf	showInfo@sorted+1,w,c
 10568  001198  22DA               	addwfc	fsr2h,f,c
 10569  00119A  50DF               	movf	indf2,w,c
 10570  00119C  6E27               	movwf	??_showInfo& (0+255),c
 10571  00119E  C025  FFD9         	movff	showInfo@sorted,fsr2l
 10572  0011A2  C026  FFDA         	movff	showInfo@sorted+1,fsr2h
 10573  0011A6  50DF               	movf	indf2,w,c
 10574  0011A8  6E28               	movwf	(??_showInfo+1)& (0+255),c
 10575  0011AA  6A29               	clrf	(??_showInfo+2)& (0+255),c
 10576  0011AC  EE20 F001          	lfsr	2,1
 10577  0011B0  5025               	movf	showInfo@sorted,w,c
 10578  0011B2  26D9               	addwf	fsr2l,f,c
 10579  0011B4  5026               	movf	showInfo@sorted+1,w,c
 10580  0011B6  22DA               	addwfc	fsr2h,f,c
 10581  0011B8  50DF               	movf	indf2,w,c
 10582  0011BA  6E2A               	movwf	(??_showInfo+3)& (0+255),c
 10583  0011BC  502A               	movf	??_showInfo+3,w,c
 10584  0011BE  2628               	addwf	??_showInfo+1,f,c
 10585  0011C0  0E00               	movlw	0
 10586  0011C2  2229               	addwfc	??_showInfo+2,f,c
 10587  0011C4  EE20 F002          	lfsr	2,2
 10588  0011C8  5025               	movf	showInfo@sorted,w,c
 10589  0011CA  26D9               	addwf	fsr2l,f,c
 10590  0011CC  5026               	movf	showInfo@sorted+1,w,c
 10591  0011CE  22DA               	addwfc	fsr2h,f,c
 10592  0011D0  50DF               	movf	indf2,w,c
 10593  0011D2  6E2B               	movwf	(??_showInfo+4)& (0+255),c
 10594  0011D4  502B               	movf	??_showInfo+4,w,c
 10595  0011D6  2628               	addwf	??_showInfo+1,f,c
 10596  0011D8  0E00               	movlw	0
 10597  0011DA  2229               	addwfc	??_showInfo+2,f,c
 10598  0011DC  5027               	movf	??_showInfo,w,c
 10599  0011DE  2428               	addwf	??_showInfo+1,w,c
 10600  0011E0  6E0F               	movwf	?i2_printf+2,c
 10601  0011E2  0E00               	movlw	0
 10602  0011E4  2029               	addwfc	??_showInfo+2,w,c
 10603  0011E6  6E10               	movwf	?i2_printf+3,c
 10604  0011E8  EC3E  F002         	call	i2_printf	;wreg free
 10605                           
 10606                           ;modules.c: 45: break;
 10607  0011EC  D097               	goto	i2l4193
 10608  0011EE                     i2l4165:
 10609                           
 10610                           ;modules.c: 47: lcdInst(0b10000000);
 10611  0011EE  0E80               	movlw	128
 10612  0011F0  EC19  F014         	call	i2_lcdInst
 10613                           
 10614                           ;modules.c: 48: printf("Charged AA:          ");
 10615  0011F4  0EBB               	movlw	low STR_40
 10616  0011F6  6E0D               	movwf	i2printf@f,c
 10617  0011F8  0EFE               	movlw	high STR_40
 10618  0011FA  6E0E               	movwf	i2printf@f+1,c
 10619  0011FC  EC3E  F002         	call	i2_printf	;wreg free
 10620                           
 10621                           ;modules.c: 49: lcdInst(0b11000000);
 10622  001200  0EC0               	movlw	192
 10623  001202  EC19  F014         	call	i2_lcdInst
 10624                           
 10625                           ;modules.c: 50: printf("%u             ", sorted[0]);
 10626  001206  0ECF               	movlw	low STR_41
 10627  001208  6E0D               	movwf	i2printf@f,c
 10628  00120A  0EFF               	movlw	high STR_41
 10629  00120C  6E0E               	movwf	i2printf@f+1,c
 10630  00120E  C025  FFD9         	movff	showInfo@sorted,fsr2l
 10631  001212  C026  FFDA         	movff	showInfo@sorted+1,fsr2h
 10632  001216  50DF               	movf	indf2,w,c
 10633  001218  6E27               	movwf	??_showInfo& (0+255),c
 10634  00121A  5027               	movf	??_showInfo,w,c
 10635  00121C  6E0F               	movwf	?i2_printf+2,c
 10636  00121E  6A10               	clrf	?i2_printf+3,c
 10637  001220  EC3E  F002         	call	i2_printf	;wreg free
 10638                           
 10639                           ;modules.c: 51: break;
 10640  001224  D07B               	goto	i2l4193
 10641  001226                     i2l4171:
 10642                           
 10643                           ;modules.c: 53: lcdInst(0b10000000);
 10644  001226  0E80               	movlw	128
 10645  001228  EC19  F014         	call	i2_lcdInst
 10646                           
 10647                           ;modules.c: 54: printf("Charged C:          ");
 10648  00122C  0EFD               	movlw	low STR_42
 10649  00122E  6E0D               	movwf	i2printf@f,c
 10650  001230  0EFE               	movlw	high STR_42
 10651  001232  6E0E               	movwf	i2printf@f+1,c
 10652  001234  EC3E  F002         	call	i2_printf	;wreg free
 10653                           
 10654                           ;modules.c: 55: lcdInst(0b11000000);
 10655  001238  0EC0               	movlw	192
 10656  00123A  EC19  F014         	call	i2_lcdInst
 10657                           
 10658                           ;modules.c: 56: printf("%u             ", sorted[1]);
 10659  00123E  0ECF               	movlw	low STR_41
 10660  001240  6E0D               	movwf	i2printf@f,c
 10661  001242  0EFF               	movlw	high STR_41
 10662  001244  6E0E               	movwf	i2printf@f+1,c
 10663  001246  EE20 F001          	lfsr	2,1
 10664  00124A  5025               	movf	showInfo@sorted,w,c
 10665  00124C  26D9               	addwf	fsr2l,f,c
 10666  00124E  5026               	movf	showInfo@sorted+1,w,c
 10667  001250  22DA               	addwfc	fsr2h,f,c
 10668  001252  50DF               	movf	indf2,w,c
 10669  001254  6E27               	movwf	??_showInfo& (0+255),c
 10670  001256  5027               	movf	??_showInfo,w,c
 10671  001258  6E0F               	movwf	?i2_printf+2,c
 10672  00125A  6A10               	clrf	?i2_printf+3,c
 10673  00125C  EC3E  F002         	call	i2_printf	;wreg free
 10674                           
 10675                           ;modules.c: 57: break;
 10676  001260  D05D               	goto	i2l4193
 10677  001262                     i2l4177:
 10678                           
 10679                           ;modules.c: 59: lcdInst(0b10000000);
 10680  001262  0E80               	movlw	128
 10681  001264  EC19  F014         	call	i2_lcdInst
 10682                           
 10683                           ;modules.c: 60: printf("Charged 9V:          ");
 10684  001268  0ED1               	movlw	low STR_44
 10685  00126A  6E0D               	movwf	i2printf@f,c
 10686  00126C  0EFE               	movlw	high STR_44
 10687  00126E  6E0E               	movwf	i2printf@f+1,c
 10688  001270  EC3E  F002         	call	i2_printf	;wreg free
 10689                           
 10690                           ;modules.c: 61: lcdInst(0b11000000);
 10691  001274  0EC0               	movlw	192
 10692  001276  EC19  F014         	call	i2_lcdInst
 10693                           
 10694                           ;modules.c: 62: printf("%u             ", sorted[2]);
 10695  00127A  0ECF               	movlw	low STR_41
 10696  00127C  6E0D               	movwf	i2printf@f,c
 10697  00127E  0EFF               	movlw	high STR_41
 10698  001280  6E0E               	movwf	i2printf@f+1,c
 10699  001282  EE20 F002          	lfsr	2,2
 10700  001286  5025               	movf	showInfo@sorted,w,c
 10701  001288  26D9               	addwf	fsr2l,f,c
 10702  00128A  5026               	movf	showInfo@sorted+1,w,c
 10703  00128C  22DA               	addwfc	fsr2h,f,c
 10704  00128E  50DF               	movf	indf2,w,c
 10705  001290  6E27               	movwf	??_showInfo& (0+255),c
 10706  001292  5027               	movf	??_showInfo,w,c
 10707  001294  6E0F               	movwf	?i2_printf+2,c
 10708  001296  6A10               	clrf	?i2_printf+3,c
 10709  001298  EC3E  F002         	call	i2_printf	;wreg free
 10710                           
 10711                           ;modules.c: 63: break;
 10712  00129C  D03F               	goto	i2l4193
 10713  00129E                     i2l4183:
 10714                           
 10715                           ;modules.c: 65: lcdInst(0b10000000);
 10716  00129E  0E80               	movlw	128
 10717  0012A0  EC19  F014         	call	i2_lcdInst
 10718                           
 10719                           ;modules.c: 66: printf("Uncharged:          ");
 10720  0012A4  0E12               	movlw	low STR_46
 10721  0012A6  6E0D               	movwf	i2printf@f,c
 10722  0012A8  0EFF               	movlw	high STR_46
 10723  0012AA  6E0E               	movwf	i2printf@f+1,c
 10724  0012AC  EC3E  F002         	call	i2_printf	;wreg free
 10725                           
 10726                           ;modules.c: 67: lcdInst(0b11000000);
 10727  0012B0  0EC0               	movlw	192
 10728  0012B2  EC19  F014         	call	i2_lcdInst
 10729                           
 10730                           ;modules.c: 68: printf("%u             ", sorted[3]);
 10731  0012B6  0ECF               	movlw	low STR_41
 10732  0012B8  6E0D               	movwf	i2printf@f,c
 10733  0012BA  0EFF               	movlw	high STR_41
 10734  0012BC  6E0E               	movwf	i2printf@f+1,c
 10735  0012BE  EE20 F003          	lfsr	2,3
 10736  0012C2  5025               	movf	showInfo@sorted,w,c
 10737  0012C4  26D9               	addwf	fsr2l,f,c
 10738  0012C6  5026               	movf	showInfo@sorted+1,w,c
 10739  0012C8  22DA               	addwfc	fsr2h,f,c
 10740  0012CA  50DF               	movf	indf2,w,c
 10741  0012CC  6E27               	movwf	??_showInfo& (0+255),c
 10742  0012CE  5027               	movf	??_showInfo,w,c
 10743  0012D0  6E0F               	movwf	?i2_printf+2,c
 10744  0012D2  6A10               	clrf	?i2_printf+3,c
 10745  0012D4  EC3E  F002         	call	i2_printf	;wreg free
 10746                           
 10747                           ;modules.c: 69: break;
 10748  0012D8  D021               	goto	i2l4193
 10749  0012DA                     i2l4189:
 10750                           
 10751                           ;modules.c: 71: stop = 1;
 10752  0012DA  0E00               	movlw	0
 10753  0012DC  6E2F               	movwf	showInfo@stop+1,c
 10754  0012DE  0E01               	movlw	1
 10755  0012E0                     L4:
 10756  0012E0  6E2E               	movwf	showInfo@stop,c
 10757                           
 10758                           ;modules.c: 72: }
 10759  0012E2  D01C               	goto	i2l4193
 10760  0012E4                     i2l4191:
 10761  0012E4  C02C  F027         	movff	showInfo@type,??_showInfo
 10762  0012E8  C02D  F028         	movff	showInfo@type+1,??_showInfo+1
 10763                           
 10764                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10765                           ; Switch size 1, requested type "space"
 10766                           ; Number of cases is 1, Range of values is 0 to 0
 10767                           ; switch strategies available:
 10768                           ; Name         Instructions Cycles
 10769                           ; simple_byte            4     3 (average)
 10770                           ;	Chosen strategy is simple_byte
 10771  0012EC  5028               	movf	??_showInfo+1,w,c
 10772  0012EE  0A00               	xorlw	0	; case 0
 10773  0012F0  A4D8               	btfss	status,2,c
 10774  0012F2  D7F3               	goto	i2l4189
 10775                           
 10776                           ; Switch size 1, requested type "space"
 10777                           ; Number of cases is 6, Range of values is 0 to 6
 10778                           ; switch strategies available:
 10779                           ; Name         Instructions Cycles
 10780                           ; simple_byte           19    10 (average)
 10781                           ;	Chosen strategy is simple_byte
 10782  0012F4  5027               	movf	??_showInfo,w,c
 10783  0012F6  0A00               	xorlw	0	; case 0
 10784  0012F8  B4D8               	btfsc	status,2,c
 10785  0012FA  D722               	goto	i2l4153
 10786  0012FC  0A01               	xorlw	1	; case 1
 10787  0012FE  B4D8               	btfsc	status,2,c
 10788  001300  D736               	goto	i2l4159
 10789  001302  0A03               	xorlw	3	; case 2
 10790  001304  B4D8               	btfsc	status,2,c
 10791  001306  D773               	goto	i2l4165
 10792  001308  0A06               	xorlw	6	; case 4
 10793  00130A  B4D8               	btfsc	status,2,c
 10794  00130C  D78C               	goto	i2l4171
 10795  00130E  0A01               	xorlw	1	; case 5
 10796  001310  B4D8               	btfsc	status,2,c
 10797  001312  D7A7               	goto	i2l4177
 10798  001314  0A03               	xorlw	3	; case 6
 10799  001316  B4D8               	btfsc	status,2,c
 10800  001318  D7C2               	goto	i2l4183
 10801  00131A  D7DF               	goto	i2l4189
 10802  00131C                     i2l4193:
 10803  00131C  502E               	movf	showInfo@stop,w,c
 10804  00131E  102F               	iorwf	showInfo@stop+1,w,c
 10805  001320  A4D8               	btfss	status,2,c
 10806  001322  0012               	return	
 10807  001324  D706               	goto	i2l4151
 10808  001326                     __end_of_showInfo:
 10809                           	opt stack 0
 10810                           pclatu	equ	0xFFB
 10811                           pclath	equ	0xFFA
 10812                           tblptru	equ	0xFF8
 10813                           tblptrh	equ	0xFF7
 10814                           tblptrl	equ	0xFF6
 10815                           tablat	equ	0xFF5
 10816                           prodh	equ	0xFF4
 10817                           prodl	equ	0xFF3
 10818                           intcon	equ	0xFF2
 10819                           intcon2	equ	0xFF1
 10820                           intcon3	equ	0xFF0
 10821                           postinc0	equ	0xFEE
 10822                           fsr0h	equ	0xFEA
 10823                           fsr0l	equ	0xFE9
 10824                           wreg	equ	0xFE8
 10825                           postdec1	equ	0xFE5
 10826                           plusw1	equ	0xFE3
 10827                           fsr1h	equ	0xFE2
 10828                           fsr1l	equ	0xFE1
 10829                           indf2	equ	0xFDF
 10830                           postinc2	equ	0xFDE
 10831                           postdec2	equ	0xFDD
 10832                           plusw2	equ	0xFDB
 10833                           fsr2h	equ	0xFDA
 10834                           fsr2l	equ	0xFD9
 10835                           status	equ	0xFD8
 10836                           
 10837 ;; *************** function i2_printf *****************
 10838 ;; Defined at:
 10839 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
 10840 ;; Parameters:    Size  Location     Type
 10841 ;;  f               2   12[COMRAM] PTR const unsigned char 
 10842 ;;		 -> STR_58(17), STR_57(17), STR_56(18), STR_55(22), 
 10843 ;;		 -> STR_54(4), STR_53(3), STR_52(4), STR_51(5), 
 10844 ;;		 -> STR_50(4), STR_49(18), STR_48(20), STR_47(16), 
 10845 ;;		 -> STR_46(21), STR_45(16), STR_44(22), STR_43(16), 
 10846 ;;		 -> STR_42(21), STR_41(16), STR_40(22), STR_39(23), 
 10847 ;;		 -> STR_38(24), STR_37(21), STR_36(24), STR_35(24), 
 10848 ;;		 -> STR_34(22), STR_33(19), STR_32(25), STR_31(25), 
 10849 ;;		 -> STR_30(27), STR_29(3), STR_28(3), STR_27(3), 
 10850 ;;		 -> STR_26(5), STR_25(3), STR_24(3), STR_23(3), 
 10851 ;;		 -> STR_22(4), STR_21(3), STR_20(3), STR_19(3), 
 10852 ;;		 -> STR_18(4), STR_17(5), STR_16(21), STR_15(27), 
 10853 ;;		 -> STR_14(3), STR_13(3), STR_12(3), STR_11(5), 
 10854 ;;		 -> STR_10(3), STR_9(3), STR_8(3), STR_7(4), 
 10855 ;;		 -> STR_6(3), STR_5(3), STR_4(3), STR_3(4), 
 10856 ;;		 -> STR_2(5), STR_1(21), 
 10857 ;; Auto vars:     Size  Location     Type
 10858 ;;  printf          4    0        struct .
 10859 ;;  printf          2   31[COMRAM] int 
 10860 ;;  printf          2   28[COMRAM] unsigned int 
 10861 ;;  printf          2   25[COMRAM] unsigned int 
 10862 ;;  printf          2   23[COMRAM] PTR void [1]
 10863 ;;		 -> ?i2_printf(2), ?_printf(2), 
 10864 ;;  printf          2   20[COMRAM] PTR const unsigned char 
 10865 ;;		 -> printf@c(1), 
 10866 ;;  printf          1   33[COMRAM] char 
 10867 ;;  printf          1   30[COMRAM] unsigned char 
 10868 ;;  printf          1   27[COMRAM] char 
 10869 ;;  printf          1   22[COMRAM] unsigned char 
 10870 ;; Return value:  Size  Location     Type
 10871 ;;                  2   12[COMRAM] int 
 10872 ;; Registers used:
 10873 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10874 ;; Tracked objects:
 10875 ;;		On entry : 0/0
 10876 ;;		On exit  : 0/0
 10877 ;;		Unchanged: 0/0
 10878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10879 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10880 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10881 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10882 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10883 ;;Total ram usage:       22 bytes
 10884 ;; Hardware stack levels used:    1
 10885 ;; Hardware stack levels required when called:    2
 10886 ;; This function calls:
 10887 ;;		i2___lwdiv
 10888 ;;		i2___lwmod
 10889 ;;		i2___wmul
 10890 ;;		i2_isdigit
 10891 ;;		i2_putch
 10892 ;; This function is called by:
 10893 ;;		_mainloop
 10894 ;;		_simulate
 10895 ;;		_showInfo
 10896 ;;		_stopMoving
 10897 ;;		_printV
 10898 ;;		_checkAA
 10899 ;;		_checkC
 10900 ;;		_check9
 10901 ;;		_PermLog
 10902 ;; This function uses a non-reentrant model
 10903 ;;
 10904                           
 10905                           	psect	text55
 10906  00047C                     __ptext55:
 10907                           	opt stack 0
 10908  00047C                     i2_printf:
 10909                           	opt stack 22
 10910                           
 10911                           ;doprnt.c: 466: va_list ap;
 10912                           ;doprnt.c: 499: signed char c;
 10913                           ;doprnt.c: 501: int width;
 10914                           ;doprnt.c: 506: signed char prec;
 10915                           ;doprnt.c: 508: unsigned char flag;
 10916                           ;doprnt.c: 523: union {
 10917                           ;doprnt.c: 524: unsigned long vd;
 10918                           ;doprnt.c: 525: double integ;
 10919                           ;doprnt.c: 526: } tmpval;
 10920                           ;doprnt.c: 528: unsigned int val;
 10921                           ;doprnt.c: 529: unsigned len;
 10922                           ;doprnt.c: 530: const char * cp;
 10923                           ;doprnt.c: 533: *ap = __va_start();
 10924                           
 10925                           ;incstack = 0
 10926  00047C  0E0F               	movlw	low (?i2_printf+2)
 10927  00047E  6E18               	movwf	i2printf@ap,c
 10928  000480  0E00               	movlw	high (?i2_printf+2)
 10929  000482  6E19               	movwf	i2printf@ap+1,c
 10930                           
 10931                           ;doprnt.c: 536: while(c = *f++) {
 10932  000484  D1BB               	goto	i2l3489
 10933  000486                     i2l3339:
 10934                           
 10935                           ;doprnt.c: 538: if(c != '%')
 10936  000486  0E25               	movlw	37
 10937  000488  1822               	xorwf	i2printf@c,w,c
 10938  00048A  B4D8               	btfsc	status,2,c
 10939  00048C  D004               	goto	i2l3343
 10940                           
 10941                           ;doprnt.c: 540: {
 10942                           ;doprnt.c: 541: (putch(c) );
 10943  00048E  5022               	movf	i2printf@c,w,c
 10944  000490  EC13  F014         	call	i2_putch
 10945                           
 10946                           ;doprnt.c: 542: continue;
 10947  000494  D1B3               	goto	i2l3489
 10948  000496                     i2l3343:
 10949                           
 10950                           ;doprnt.c: 543: }
 10951                           ;doprnt.c: 546: width = 0;
 10952  000496  0E00               	movlw	0
 10953  000498  6E21               	movwf	i2printf@width+1,c
 10954  00049A  0E00               	movlw	0
 10955  00049C  6E20               	movwf	i2printf@width,c
 10956                           
 10957                           ;doprnt.c: 548: flag = 0;
 10958  00049E  0E00               	movlw	0
 10959  0004A0  6E1F               	movwf	i2printf@flag,c
 10960                           
 10961                           ;doprnt.c: 551: switch(*f) {
 10962                           
 10963                           ;doprnt.c: 550: for(;;) {
 10964  0004A2  D003               	goto	i2l3349
 10965  0004A4                     i2l3345:
 10966                           
 10967                           ;doprnt.c: 580: flag |= 0x04;
 10968  0004A4  841F               	bsf	i2printf@flag,2,c
 10969                           
 10970                           ;doprnt.c: 581: f++;
 10971  0004A6  4A0D               	infsnz	i2printf@f,f,c
 10972  0004A8  2A0E               	incf	i2printf@f+1,f,c
 10973  0004AA                     i2l3349:
 10974  0004AA  C00D  FFF6         	movff	i2printf@f,tblptrl
 10975  0004AE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 10976  0004B2                     	if	0	;tblptru may be non-zero
 10977  0004B2                     	endif
 10978  0004B2                     	if	0	;tblptru may be non-zero
 10979  0004B2                     	endif
 10980  0004B2  0008               	tblrd		*
 10981  0004B4  50F5               	movf	tablat,w,c
 10982                           
 10983                           ; Switch size 1, requested type "space"
 10984                           ; Number of cases is 1, Range of values is 48 to 48
 10985                           ; switch strategies available:
 10986                           ; Name         Instructions Cycles
 10987                           ; simple_byte            4     3 (average)
 10988                           ;	Chosen strategy is simple_byte
 10989  0004B6  0A30               	xorlw	48	; case 48
 10990  0004B8  B4D8               	btfsc	status,2,c
 10991  0004BA  D7F4               	goto	i2l3345
 10992                           
 10993                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 10994                           
 10995                           ;doprnt.c: 586: }
 10996                           
 10997                           ;doprnt.c: 585: break;
 10998  0004BC  C00D  FFF6         	movff	i2printf@f,tblptrl
 10999  0004C0  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11000  0004C4                     	if	0	;tblptru may be non-zero
 11001  0004C4                     	endif
 11002  0004C4                     	if	0	;tblptru may be non-zero
 11003  0004C4                     	endif
 11004  0004C4  0008               	tblrd		*
 11005  0004C6  50F5               	movf	tablat,w,c
 11006  0004C8  ECA4  F013         	call	i2_isdigit
 11007  0004CC  A0D8               	btfss	status,0,c
 11008  0004CE  D06F               	goto	i2l3389
 11009                           
 11010                           ;doprnt.c: 598: width = 0;
 11011  0004D0  0E00               	movlw	0
 11012  0004D2  6E21               	movwf	i2printf@width+1,c
 11013  0004D4  0E00               	movlw	0
 11014  0004D6  6E20               	movwf	i2printf@width,c
 11015  0004D8                     i2l3355:
 11016                           
 11017                           ;doprnt.c: 600: width *= 10;
 11018  0004D8  C020  F001         	movff	i2printf@width,i2___wmul@multiplier
 11019  0004DC  C021  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 11020  0004E0  0E00               	movlw	0
 11021  0004E2  6E04               	movwf	i2___wmul@multiplicand+1,c
 11022  0004E4  0E0A               	movlw	10
 11023  0004E6  6E03               	movwf	i2___wmul@multiplicand,c
 11024  0004E8  EC60  F013         	call	i2___wmul	;wreg free
 11025  0004EC  C001  F020         	movff	?i2___wmul,i2printf@width
 11026  0004F0  C002  F021         	movff	?i2___wmul+1,i2printf@width+1
 11027                           
 11028                           ;doprnt.c: 601: width += *f++ - '0';
 11029  0004F4  0ED0               	movlw	208
 11030  0004F6  6E11               	movwf	??i2_printf& (0+255),c
 11031  0004F8  0EFF               	movlw	255
 11032  0004FA  6E12               	movwf	(??i2_printf+1)& (0+255),c
 11033  0004FC  C00D  FFF6         	movff	i2printf@f,tblptrl
 11034  000500  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11035  000504                     	if	0	;tblptru may be non-zero
 11036  000504                     	endif
 11037  000504                     	if	0	;tblptru may be non-zero
 11038  000504                     	endif
 11039  000504  0008               	tblrd		*
 11040  000506  50F5               	movf	tablat,w,c
 11041  000508  6E13               	movwf	(??i2_printf+2)& (0+255),c
 11042  00050A  6A14               	clrf	(??i2_printf+3)& (0+255),c
 11043  00050C  5011               	movf	??i2_printf,w,c
 11044  00050E  2613               	addwf	??i2_printf+2,f,c
 11045  000510  5012               	movf	??i2_printf+1,w,c
 11046  000512  2214               	addwfc	??i2_printf+3,f,c
 11047  000514  5013               	movf	??i2_printf+2,w,c
 11048  000516  2620               	addwf	i2printf@width,f,c
 11049  000518  5014               	movf	??i2_printf+3,w,c
 11050  00051A  2221               	addwfc	i2printf@width+1,f,c
 11051  00051C  4A0D               	infsnz	i2printf@f,f,c
 11052  00051E  2A0E               	incf	i2printf@f+1,f,c
 11053                           
 11054                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 11055  000520  C00D  FFF6         	movff	i2printf@f,tblptrl
 11056  000524  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11057  000528                     	if	0	;tblptru may be non-zero
 11058  000528                     	endif
 11059  000528                     	if	0	;tblptru may be non-zero
 11060  000528                     	endif
 11061  000528  0008               	tblrd		*
 11062  00052A  50F5               	movf	tablat,w,c
 11063  00052C  ECA4  F013         	call	i2_isdigit
 11064  000530  A0D8               	btfss	status,0,c
 11065  000532  D03D               	goto	i2l3389
 11066  000534  D7D1               	goto	i2l3355
 11067  000536                     i2l3363:
 11068                           
 11069                           ;doprnt.c: 721: flag |= 0x80;
 11070  000536  8E1F               	bsf	i2printf@flag,7,c
 11071                           
 11072                           ;doprnt.c: 723: break;
 11073  000538  D054               	goto	i2l3391
 11074  00053A                     i2l3365:
 11075                           
 11076                           ;doprnt.c: 757: if(width > len)
 11077  00053A  5020               	movf	i2printf@width,w,c
 11078  00053C  5C1A               	subwf	i2printf@len,w,c
 11079  00053E  5021               	movf	i2printf@width+1,w,c
 11080  000540  581B               	subwfb	i2printf@len+1,w,c
 11081  000542  B0D8               	btfsc	status,0,c
 11082  000544  D005               	goto	i2l3369
 11083                           
 11084                           ;doprnt.c: 758: width -= len;
 11085  000546  501A               	movf	i2printf@len,w,c
 11086  000548  5E20               	subwf	i2printf@width,f,c
 11087  00054A  501B               	movf	i2printf@len+1,w,c
 11088  00054C  5A21               	subwfb	i2printf@width+1,f,c
 11089  00054E  D008               	goto	i2l3373
 11090  000550                     i2l3369:
 11091                           
 11092                           ;doprnt.c: 759: else
 11093                           ;doprnt.c: 760: width = 0;
 11094  000550  0E00               	movlw	0
 11095  000552  6E21               	movwf	i2printf@width+1,c
 11096  000554  0E00               	movlw	0
 11097  000556  6E20               	movwf	i2printf@width,c
 11098                           
 11099                           ;doprnt.c: 764: while(width--)
 11100  000558  D003               	goto	i2l3373
 11101  00055A                     i2l3371:
 11102                           
 11103                           ;doprnt.c: 765: (putch(' ') );
 11104  00055A  0E20               	movlw	32
 11105  00055C  EC13  F014         	call	i2_putch
 11106  000560                     i2l3373:
 11107  000560  0620               	decf	i2printf@width,f,c
 11108  000562  A0D8               	btfss	status,0,c
 11109  000564  0621               	decf	i2printf@width+1,f,c
 11110  000566  2820               	incf	i2printf@width,w,c
 11111  000568  E1F8               	bnz	i2l3371
 11112  00056A  2821               	incf	i2printf@width+1,w,c
 11113  00056C  B4D8               	btfsc	status,2,c
 11114  00056E  D00A               	goto	i2l3379
 11115  000570  D7F4               	goto	i2l3371
 11116  000572                     i2l3375:
 11117                           
 11118                           ;doprnt.c: 768: (putch(*cp++) );
 11119  000572  C015  FFD9         	movff	i2printf@cp,fsr2l
 11120  000576  C016  FFDA         	movff	i2printf@cp+1,fsr2h
 11121  00057A  50DF               	movf	indf2,w,c
 11122  00057C  EC13  F014         	call	i2_putch
 11123  000580  4A15               	infsnz	i2printf@cp,f,c
 11124  000582  2A16               	incf	i2printf@cp+1,f,c
 11125  000584                     i2l3379:
 11126  000584  061A               	decf	i2printf@len,f,c
 11127  000586  A0D8               	btfss	status,0,c
 11128  000588  061B               	decf	i2printf@len+1,f,c
 11129  00058A  281A               	incf	i2printf@len,w,c
 11130  00058C  E1F2               	bnz	i2l3375
 11131  00058E  281B               	incf	i2printf@len+1,w,c
 11132  000590  B4D8               	btfsc	status,2,c
 11133  000592  D134               	goto	i2l3489
 11134  000594  D7EE               	goto	i2l3375
 11135  000596                     i2l3381:
 11136                           
 11137                           ;doprnt.c: 805: cp = (char *)&c;
 11138  000596  0E22               	movlw	low i2printf@c
 11139  000598  6E15               	movwf	i2printf@cp,c
 11140  00059A  0E00               	movlw	high i2printf@c
 11141  00059C  6E16               	movwf	i2printf@cp+1,c
 11142                           
 11143                           ;doprnt.c: 806: len = 1;
 11144  00059E  0E00               	movlw	0
 11145  0005A0  6E1B               	movwf	i2printf@len+1,c
 11146  0005A2  0E01               	movlw	1
 11147  0005A4  6E1A               	movwf	i2printf@len,c
 11148                           
 11149                           ;doprnt.c: 807: goto dostring;
 11150  0005A6  D7C9               	goto	i2l3365
 11151  0005A8                     i2l3385:
 11152                           
 11153                           ;doprnt.c: 818: flag |= 0xC0;
 11154  0005A8  0EC0               	movlw	192
 11155  0005AA  121F               	iorwf	i2printf@flag,f,c
 11156                           
 11157                           ;doprnt.c: 822: }
 11158                           
 11159                           ;doprnt.c: 819: break;
 11160  0005AC  D01A               	goto	i2l3391
 11161  0005AE                     i2l3389:
 11162  0005AE  C00D  FFF6         	movff	i2printf@f,tblptrl
 11163  0005B2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11164  0005B6  4A0D               	infsnz	i2printf@f,f,c
 11165  0005B8  2A0E               	incf	i2printf@f+1,f,c
 11166  0005BA                     	if	0	;tblptru may be non-zero
 11167  0005BA                     	endif
 11168  0005BA                     	if	0	;tblptru may be non-zero
 11169  0005BA                     	endif
 11170  0005BA  0008               	tblrd		*
 11171  0005BC  CFF5 F022          	movff	tablat,i2printf@c
 11172  0005C0  5022               	movf	i2printf@c,w,c
 11173                           
 11174                           ; Switch size 1, requested type "space"
 11175                           ; Number of cases is 5, Range of values is 0 to 120
 11176                           ; switch strategies available:
 11177                           ; Name         Instructions Cycles
 11178                           ; simple_byte           16     9 (average)
 11179                           ;	Chosen strategy is simple_byte
 11180  0005C2  0A00               	xorlw	0	; case 0
 11181  0005C4  B4D8               	btfsc	status,2,c
 11182  0005C6  0012               	return	
 11183  0005C8  0A64               	xorlw	100	; case 100
 11184  0005CA  B4D8               	btfsc	status,2,c
 11185  0005CC  D00A               	goto	i2l3391
 11186  0005CE  0A0D               	xorlw	13	; case 105
 11187  0005D0  B4D8               	btfsc	status,2,c
 11188  0005D2  D007               	goto	i2l3391
 11189  0005D4  0A1C               	xorlw	28	; case 117
 11190  0005D6  B4D8               	btfsc	status,2,c
 11191  0005D8  D7E7               	goto	i2l3385
 11192  0005DA  0A0D               	xorlw	13	; case 120
 11193  0005DC  B4D8               	btfsc	status,2,c
 11194  0005DE  D7AB               	goto	i2l3363
 11195  0005E0  D7DA               	goto	i2l3381
 11196  0005E2                     i2l3391:
 11197                           
 11198                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
 11199  0005E2  C01F  F011         	movff	i2printf@flag,??i2_printf
 11200  0005E6  0EC0               	movlw	192
 11201  0005E8  1611               	andwf	??i2_printf,f,c
 11202  0005EA  A4D8               	btfss	status,2,c
 11203  0005EC  D015               	goto	i2l3403
 11204                           
 11205                           ;doprnt.c: 1253: {
 11206                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 11207  0005EE  C018  FFD9         	movff	i2printf@ap,fsr2l
 11208  0005F2  C019  FFDA         	movff	i2printf@ap+1,fsr2h
 11209  0005F6  CFDE F01D          	movff	postinc2,i2printf@val
 11210  0005FA  CFDD F01E          	movff	postdec2,i2printf@val+1
 11211  0005FE  0E02               	movlw	2
 11212  000600  2618               	addwf	i2printf@ap,f,c
 11213  000602  0E00               	movlw	0
 11214  000604  2219               	addwfc	i2printf@ap+1,f,c
 11215                           
 11216                           ;doprnt.c: 1261: if((int)val < 0) {
 11217  000606  AE1E               	btfss	i2printf@val+1,7,c
 11218  000608  D044               	goto	i2l3437
 11219                           
 11220                           ;doprnt.c: 1262: flag |= 0x03;
 11221  00060A  0E03               	movlw	3
 11222  00060C  121F               	iorwf	i2printf@flag,f,c
 11223                           
 11224                           ;doprnt.c: 1263: val = -val;
 11225  00060E  6C1D               	negf	i2printf@val,c
 11226  000610  1E1E               	comf	i2printf@val+1,f,c
 11227  000612  B0D8               	btfsc	status,0,c
 11228  000614  2A1E               	incf	i2printf@val+1,f,c
 11229                           
 11230                           ;doprnt.c: 1264: }
 11231                           ;doprnt.c: 1266: }
 11232  000616  D03D               	goto	i2l3437
 11233  000618                     i2l3403:
 11234                           
 11235                           ;doprnt.c: 1268: else
 11236                           ;doprnt.c: 1273: {
 11237                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 11238  000618  C018  FFD9         	movff	i2printf@ap,fsr2l
 11239  00061C  C019  FFDA         	movff	i2printf@ap+1,fsr2h
 11240  000620  CFDE F01D          	movff	postinc2,i2printf@val
 11241  000624  CFDD F01E          	movff	postdec2,i2printf@val+1
 11242  000628  0E02               	movlw	2
 11243  00062A  2618               	addwf	i2printf@ap,f,c
 11244  00062C  0E00               	movlw	0
 11245  00062E  2219               	addwfc	i2printf@ap+1,f,c
 11246                           
 11247                           ;doprnt.c: 1287: }
 11248                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
 11249  000630  D030               	goto	i2l3437
 11250  000632                     i2l3407:
 11251                           
 11252                           ;doprnt.c: 1302: case 0xC0:
 11253                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 11254  000632  0E01               	movlw	1
 11255  000634  6E22               	movwf	i2printf@c,c
 11256  000636                     i2l3409:
 11257  000636  0E05               	movlw	5
 11258  000638  1822               	xorwf	i2printf@c,w,c
 11259  00063A  B4D8               	btfsc	status,2,c
 11260  00063C  D035               	goto	i2l3439
 11261                           
 11262                           ;doprnt.c: 1306: if(val < dpowers[c])
 11263  00063E  5022               	movf	i2printf@c,w,c
 11264  000640  0D02               	mullw	2
 11265  000642  0EE7               	movlw	low _dpowers
 11266  000644  24F3               	addwf	prodl,w,c
 11267  000646  6EF6               	movwf	tblptrl,c
 11268  000648  0EFD               	movlw	high _dpowers
 11269  00064A  20F4               	addwfc	prodh,w,c
 11270  00064C  6EF7               	movwf	tblptrh,c
 11271  00064E                     	if	0	;There are less than 3 active tblptr bytes
 11272  00064E                     	endif
 11273  00064E  0009               	tblrd		*+
 11274  000650  50F5               	movf	tablat,w,c
 11275  000652  5C1D               	subwf	i2printf@val,w,c
 11276  000654  0009               	tblrd		*+
 11277  000656  50F5               	movf	tablat,w,c
 11278  000658  581E               	subwfb	i2printf@val+1,w,c
 11279  00065A  A0D8               	btfss	status,0,c
 11280  00065C  D025               	goto	i2l3439
 11281                           
 11282                           ;doprnt.c: 1307: break;
 11283  00065E  2A22               	incf	i2printf@c,f,c
 11284  000660  D7EA               	goto	i2l3409
 11285  000662                     i2l3421:
 11286                           
 11287                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 11288  000662  0E01               	movlw	1
 11289  000664  6E22               	movwf	i2printf@c,c
 11290  000666                     i2l3423:
 11291  000666  0E04               	movlw	4
 11292  000668  1822               	xorwf	i2printf@c,w,c
 11293  00066A  B4D8               	btfsc	status,2,c
 11294  00066C  D01D               	goto	i2l3439
 11295                           
 11296                           ;doprnt.c: 1317: if(val < hexpowers[c])
 11297  00066E  5022               	movf	i2printf@c,w,c
 11298  000670  0D02               	mullw	2
 11299  000672  0EF1               	movlw	low _hexpowers
 11300  000674  24F3               	addwf	prodl,w,c
 11301  000676  6EF6               	movwf	tblptrl,c
 11302  000678  0EFD               	movlw	high _hexpowers
 11303  00067A  20F4               	addwfc	prodh,w,c
 11304  00067C  6EF7               	movwf	tblptrh,c
 11305  00067E                     	if	0	;There are less than 3 active tblptr bytes
 11306  00067E                     	endif
 11307  00067E  0009               	tblrd		*+
 11308  000680  50F5               	movf	tablat,w,c
 11309  000682  5C1D               	subwf	i2printf@val,w,c
 11310  000684  0009               	tblrd		*+
 11311  000686  50F5               	movf	tablat,w,c
 11312  000688  581E               	subwfb	i2printf@val+1,w,c
 11313  00068A  A0D8               	btfss	status,0,c
 11314  00068C  D00D               	goto	i2l3439
 11315                           
 11316                           ;doprnt.c: 1318: break;
 11317  00068E  2A22               	incf	i2printf@c,f,c
 11318  000690  D7EA               	goto	i2l3423
 11319  000692                     i2l3437:
 11320  000692  501F               	movf	i2printf@flag,w,c
 11321  000694  0BC0               	andlw	192
 11322                           
 11323                           ; Switch size 1, requested type "space"
 11324                           ; Number of cases is 3, Range of values is 0 to 192
 11325                           ; switch strategies available:
 11326                           ; Name         Instructions Cycles
 11327                           ; simple_byte           10     6 (average)
 11328                           ;	Chosen strategy is simple_byte
 11329  000696  0A00               	xorlw	0	; case 0
 11330  000698  B4D8               	btfsc	status,2,c
 11331  00069A  D7CB               	goto	i2l3407
 11332  00069C  0A80               	xorlw	128	; case 128
 11333  00069E  B4D8               	btfsc	status,2,c
 11334  0006A0  D7E0               	goto	i2l3421
 11335  0006A2  0A40               	xorlw	64	; case 192
 11336  0006A4  B4D8               	btfsc	status,2,c
 11337  0006A6  D7C5               	goto	i2l3407
 11338  0006A8                     i2l3439:
 11339                           
 11340                           ;doprnt.c: 1345: if(width && flag & 0x03)
 11341  0006A8  5020               	movf	i2printf@width,w,c
 11342  0006AA  1021               	iorwf	i2printf@width+1,w,c
 11343  0006AC  B4D8               	btfsc	status,2,c
 11344  0006AE  D009               	goto	i2l3445
 11345  0006B0  C01F  F011         	movff	i2printf@flag,??i2_printf
 11346  0006B4  0E03               	movlw	3
 11347  0006B6  1611               	andwf	??i2_printf,f,c
 11348  0006B8  B4D8               	btfsc	status,2,c
 11349  0006BA  D003               	goto	i2l3445
 11350                           
 11351                           ;doprnt.c: 1346: width--;
 11352  0006BC  0620               	decf	i2printf@width,f,c
 11353  0006BE  A0D8               	btfss	status,0,c
 11354  0006C0  0621               	decf	i2printf@width+1,f,c
 11355  0006C2                     i2l3445:
 11356                           
 11357                           ;doprnt.c: 1381: if(width > c)
 11358  0006C2  0E80               	movlw	128
 11359  0006C4  BE22               	btfsc	i2printf@c,7,c
 11360  0006C6  0E7F               	movlw	127
 11361  0006C8  6E11               	movwf	??i2_printf& (0+255),c
 11362  0006CA  5020               	movf	i2printf@width,w,c
 11363  0006CC  5C22               	subwf	i2printf@c,w,c
 11364  0006CE  5021               	movf	i2printf@width+1,w,c
 11365  0006D0  0A80               	xorlw	128
 11366  0006D2  5811               	subwfb	??i2_printf& (0+255),w,c
 11367  0006D4  B0D8               	btfsc	status,0,c
 11368  0006D6  D007               	goto	i2l3449
 11369                           
 11370                           ;doprnt.c: 1382: width -= c;
 11371  0006D8  5022               	movf	i2printf@c,w,c
 11372  0006DA  5E20               	subwf	i2printf@width,f,c
 11373  0006DC  0E00               	movlw	0
 11374  0006DE  BE22               	btfsc	i2printf@c,7,c
 11375  0006E0  0EFF               	movlw	255
 11376  0006E2  5A21               	subwfb	i2printf@width+1,f,c
 11377  0006E4  D004               	goto	i2l3451
 11378  0006E6                     i2l3449:
 11379                           
 11380                           ;doprnt.c: 1383: else
 11381                           ;doprnt.c: 1384: width = 0;
 11382  0006E6  0E00               	movlw	0
 11383  0006E8  6E21               	movwf	i2printf@width+1,c
 11384  0006EA  0E00               	movlw	0
 11385  0006EC  6E20               	movwf	i2printf@width,c
 11386  0006EE                     i2l3451:
 11387                           
 11388                           ;doprnt.c: 1387: if(flag & 0x04) {
 11389  0006EE  A41F               	btfss	i2printf@flag,2,c
 11390  0006F0  D014               	goto	i2l3463
 11391                           
 11392                           ;doprnt.c: 1392: if(flag & 0x03)
 11393  0006F2  C01F  F011         	movff	i2printf@flag,??i2_printf
 11394  0006F6  0E03               	movlw	3
 11395  0006F8  1611               	andwf	??i2_printf,f,c
 11396  0006FA  B4D8               	btfsc	status,2,c
 11397  0006FC  D003               	goto	i2l3457
 11398                           
 11399                           ;doprnt.c: 1393: (putch('-') );
 11400  0006FE  0E2D               	movlw	45
 11401  000700  EC13  F014         	call	i2_putch
 11402  000704                     i2l3457:
 11403                           
 11404                           ;doprnt.c: 1415: if(width)
 11405  000704  5020               	movf	i2printf@width,w,c
 11406  000706  1021               	iorwf	i2printf@width+1,w,c
 11407  000708  B4D8               	btfsc	status,2,c
 11408  00070A  D01E               	goto	i2l3473
 11409                           
 11410                           ;doprnt.c: 1417: (putch('0') );
 11411                           
 11412                           ;doprnt.c: 1416: do
 11413  00070C  0E30               	movlw	48
 11414  00070E  EC13  F014         	call	i2_putch
 11415                           
 11416                           ;doprnt.c: 1418: while(--width);
 11417  000712  0620               	decf	i2printf@width,f,c
 11418  000714  A0D8               	btfss	status,0,c
 11419  000716  0621               	decf	i2printf@width+1,f,c
 11420  000718  D7F5               	goto	i2l3457
 11421  00071A                     i2l3463:
 11422                           
 11423                           ;doprnt.c: 1422: {
 11424                           ;doprnt.c: 1424: if(width
 11425                           ;doprnt.c: 1428: )
 11426  00071A  5020               	movf	i2printf@width,w,c
 11427  00071C  1021               	iorwf	i2printf@width+1,w,c
 11428  00071E  B4D8               	btfsc	status,2,c
 11429  000720  D00A               	goto	i2l3469
 11430  000722                     i2l3465:
 11431                           
 11432                           ;doprnt.c: 1430: (putch(' ') );
 11433  000722  0E20               	movlw	32
 11434  000724  EC13  F014         	call	i2_putch
 11435                           
 11436                           ;doprnt.c: 1431: while(--width);
 11437  000728  0620               	decf	i2printf@width,f,c
 11438  00072A  A0D8               	btfss	status,0,c
 11439  00072C  0621               	decf	i2printf@width+1,f,c
 11440  00072E  5020               	movf	i2printf@width,w,c
 11441  000730  1021               	iorwf	i2printf@width+1,w,c
 11442  000732  A4D8               	btfss	status,2,c
 11443  000734  D7F6               	goto	i2l3465
 11444  000736                     i2l3469:
 11445                           
 11446                           ;doprnt.c: 1438: if(flag & 0x03)
 11447  000736  C01F  F011         	movff	i2printf@flag,??i2_printf
 11448  00073A  0E03               	movlw	3
 11449  00073C  1611               	andwf	??i2_printf,f,c
 11450  00073E  B4D8               	btfsc	status,2,c
 11451  000740  D003               	goto	i2l3473
 11452                           
 11453                           ;doprnt.c: 1439: (putch('-') );
 11454  000742  0E2D               	movlw	45
 11455  000744  EC13  F014         	call	i2_putch
 11456  000748                     i2l3473:
 11457                           
 11458                           ;doprnt.c: 1469: }
 11459                           ;doprnt.c: 1472: prec = c;
 11460  000748  C022  F01C         	movff	i2printf@c,i2printf@prec
 11461                           
 11462                           ;doprnt.c: 1474: while(prec--) {
 11463  00074C  D053               	goto	i2l3487
 11464  00074E                     i2l3475:
 11465                           
 11466                           ;doprnt.c: 1486: case 0xC0:
 11467                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 11468  00074E  501C               	movf	i2printf@prec,w,c
 11469  000750  0D02               	mullw	2
 11470  000752  0EE7               	movlw	low _dpowers
 11471  000754  24F3               	addwf	prodl,w,c
 11472  000756  6EF6               	movwf	tblptrl,c
 11473  000758  0EFD               	movlw	high _dpowers
 11474  00075A  20F4               	addwfc	prodh,w,c
 11475  00075C  6EF7               	movwf	tblptrh,c
 11476  00075E                     	if	0	;There are less than 3 active tblptr bytes
 11477  00075E                     	endif
 11478  00075E  0009               	tblrd		*+
 11479  000760  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 11480  000764  000A               	tblrd		*-
 11481  000766  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 11482  00076A  C01D  F001         	movff	i2printf@val,i2___lwdiv@dividend
 11483  00076E  C01E  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 11484  000772  ECA1  F011         	call	i2___lwdiv	;wreg free
 11485  000776  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 11486  00077A  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 11487  00077E  0E00               	movlw	0
 11488  000780  6E0B               	movwf	i2___lwmod@divisor+1,c
 11489  000782  0E0A               	movlw	10
 11490  000784  6E0A               	movwf	i2___lwmod@divisor,c
 11491  000786  EC5B  F012         	call	i2___lwmod	;wreg free
 11492  00078A  5008               	movf	?i2___lwmod,w,c
 11493  00078C  0F30               	addlw	48
 11494  00078E  6E22               	movwf	i2printf@c,c
 11495                           
 11496                           ;doprnt.c: 1491: break;
 11497  000790  D02E               	goto	i2l3485
 11498  000792                     i2l3477:
 11499                           
 11500                           ;doprnt.c: 1499: {
 11501                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 11502  000792  C01D  F001         	movff	i2printf@val,i2___lwdiv@dividend
 11503  000796  C01E  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 11504  00079A  501C               	movf	i2printf@prec,w,c
 11505  00079C  0D02               	mullw	2
 11506  00079E  0EF1               	movlw	low _hexpowers
 11507  0007A0  24F3               	addwf	prodl,w,c
 11508  0007A2  6EF6               	movwf	tblptrl,c
 11509  0007A4  0EFD               	movlw	high _hexpowers
 11510  0007A6  20F4               	addwfc	prodh,w,c
 11511  0007A8  6EF7               	movwf	tblptrh,c
 11512  0007AA                     	if	0	;There are less than 3 active tblptr bytes
 11513  0007AA                     	endif
 11514  0007AA  0009               	tblrd		*+
 11515  0007AC  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 11516  0007B0  000A               	tblrd		*-
 11517  0007B2  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 11518  0007B6  ECA1  F011         	call	i2___lwdiv	;wreg free
 11519  0007BA  5001               	movf	?i2___lwdiv,w,c
 11520  0007BC  0B0F               	andlw	15
 11521  0007BE  6E17               	movwf	i2printf@idx,c
 11522                           
 11523                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 11524  0007C0  5017               	movf	i2printf@idx,w,c
 11525  0007C2  0D01               	mullw	1
 11526  0007C4  0E9C               	movlw	low STR_59
 11527  0007C6  24F3               	addwf	prodl,w,c
 11528  0007C8  6EF6               	movwf	tblptrl,c
 11529  0007CA  0EFF               	movlw	high STR_59
 11530  0007CC  20F4               	addwfc	prodh,w,c
 11531  0007CE  6EF7               	movwf	tblptrh,c
 11532  0007D0                     	if	0	;There are less than 3 active tblptr bytes
 11533  0007D0                     	endif
 11534  0007D0  0008               	tblrd		*
 11535  0007D2  CFF5 F022          	movff	tablat,i2printf@c
 11536                           
 11537                           ;doprnt.c: 1523: }
 11538                           
 11539                           ;doprnt.c: 1508: }
 11540                           ;doprnt.c: 1510: break;
 11541  0007D6  D00B               	goto	i2l3485
 11542  0007D8                     i2l3483:
 11543  0007D8  501F               	movf	i2printf@flag,w,c
 11544  0007DA  0BC0               	andlw	192
 11545                           
 11546                           ; Switch size 1, requested type "space"
 11547                           ; Number of cases is 3, Range of values is 0 to 192
 11548                           ; switch strategies available:
 11549                           ; Name         Instructions Cycles
 11550                           ; simple_byte           10     6 (average)
 11551                           ;	Chosen strategy is simple_byte
 11552  0007DC  0A00               	xorlw	0	; case 0
 11553  0007DE  B4D8               	btfsc	status,2,c
 11554  0007E0  D7B6               	goto	i2l3475
 11555  0007E2  0A80               	xorlw	128	; case 128
 11556  0007E4  B4D8               	btfsc	status,2,c
 11557  0007E6  D7D5               	goto	i2l3477
 11558  0007E8  0A40               	xorlw	64	; case 192
 11559  0007EA  B4D8               	btfsc	status,2,c
 11560  0007EC  D7B0               	goto	i2l3475
 11561  0007EE                     i2l3485:
 11562                           
 11563                           ;doprnt.c: 1524: (putch(c) );
 11564  0007EE  5022               	movf	i2printf@c,w,c
 11565  0007F0  EC13  F014         	call	i2_putch
 11566  0007F4                     i2l3487:
 11567  0007F4  061C               	decf	i2printf@prec,f,c
 11568  0007F6  281C               	incf	i2printf@prec,w,c
 11569  0007F8  A4D8               	btfss	status,2,c
 11570  0007FA  D7EE               	goto	i2l3483
 11571  0007FC                     i2l3489:
 11572  0007FC  C00D  FFF6         	movff	i2printf@f,tblptrl
 11573  000800  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11574  000804  4A0D               	infsnz	i2printf@f,f,c
 11575  000806  2A0E               	incf	i2printf@f+1,f,c
 11576  000808                     	if	0	;tblptru may be non-zero
 11577  000808                     	endif
 11578  000808                     	if	0	;tblptru may be non-zero
 11579  000808                     	endif
 11580  000808  0008               	tblrd		*
 11581  00080A  CFF5 F022          	movff	tablat,i2printf@c
 11582  00080E  5022               	movf	i2printf@c,w,c
 11583  000810  B4D8               	btfsc	status,2,c
 11584  000812  0012               	return	
 11585  000814  D638               	goto	i2l3339
 11586  000816                     __end_ofi2_printf:
 11587                           	opt stack 0
 11588                           pclatu	equ	0xFFB
 11589                           pclath	equ	0xFFA
 11590                           tblptru	equ	0xFF8
 11591                           tblptrh	equ	0xFF7
 11592                           tblptrl	equ	0xFF6
 11593                           tablat	equ	0xFF5
 11594                           prodh	equ	0xFF4
 11595                           prodl	equ	0xFF3
 11596                           intcon	equ	0xFF2
 11597                           intcon2	equ	0xFF1
 11598                           intcon3	equ	0xFF0
 11599                           postinc0	equ	0xFEE
 11600                           fsr0h	equ	0xFEA
 11601                           fsr0l	equ	0xFE9
 11602                           wreg	equ	0xFE8
 11603                           postdec1	equ	0xFE5
 11604                           plusw1	equ	0xFE3
 11605                           fsr1h	equ	0xFE2
 11606                           fsr1l	equ	0xFE1
 11607                           indf2	equ	0xFDF
 11608                           postinc2	equ	0xFDE
 11609                           postdec2	equ	0xFDD
 11610                           plusw2	equ	0xFDB
 11611                           fsr2h	equ	0xFDA
 11612                           fsr2l	equ	0xFD9
 11613                           status	equ	0xFD8
 11614                           
 11615 ;; *************** function i2_putch *****************
 11616 ;; Defined at:
 11617 ;;		line 25 in file "lcd.c"
 11618 ;; Parameters:    Size  Location     Type
 11619 ;;  data            1    wreg     unsigned char 
 11620 ;; Auto vars:     Size  Location     Type
 11621 ;;  data            1    2[COMRAM] unsigned char 
 11622 ;; Return value:  Size  Location     Type
 11623 ;;                  1    wreg      void 
 11624 ;; Registers used:
 11625 ;;		wreg, status,2, status,0, cstack
 11626 ;; Tracked objects:
 11627 ;;		On entry : 0/0
 11628 ;;		On exit  : 0/0
 11629 ;;		Unchanged: 0/0
 11630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11632 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11634 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11635 ;;Total ram usage:        1 bytes
 11636 ;; Hardware stack levels used:    1
 11637 ;; Hardware stack levels required when called:    1
 11638 ;; This function calls:
 11639 ;;		i2_lcdNibble
 11640 ;; This function is called by:
 11641 ;;		i2_printf
 11642 ;; This function uses a non-reentrant model
 11643 ;;
 11644                           
 11645                           	psect	text56
 11646  002826                     __ptext56:
 11647                           	opt stack 0
 11648  002826                     i2_putch:
 11649                           	opt stack 22
 11650                           
 11651                           ;incstack = 0
 11652                           ;i2putch@data stored from wreg
 11653  002826  6E03               	movwf	i2putch@data,c
 11654                           
 11655                           ;lcd.c: 26: LATDbits.LATD2 = 1;
 11656  002828  848C               	bsf	3980,2,c	;volatile
 11657                           
 11658                           ;lcd.c: 27: lcdNibble(data);
 11659  00282A  5003               	movf	i2putch@data,w,c
 11660  00282C  EC76  F011         	call	i2_lcdNibble
 11661  002830  0012               	return		;funcret
 11662  002832                     __end_ofi2_putch:
 11663                           	opt stack 0
 11664                           pclatu	equ	0xFFB
 11665                           pclath	equ	0xFFA
 11666                           tblptru	equ	0xFF8
 11667                           tblptrh	equ	0xFF7
 11668                           tblptrl	equ	0xFF6
 11669                           tablat	equ	0xFF5
 11670                           prodh	equ	0xFF4
 11671                           prodl	equ	0xFF3
 11672                           intcon	equ	0xFF2
 11673                           intcon2	equ	0xFF1
 11674                           intcon3	equ	0xFF0
 11675                           postinc0	equ	0xFEE
 11676                           fsr0h	equ	0xFEA
 11677                           fsr0l	equ	0xFE9
 11678                           wreg	equ	0xFE8
 11679                           postdec1	equ	0xFE5
 11680                           plusw1	equ	0xFE3
 11681                           fsr1h	equ	0xFE2
 11682                           fsr1l	equ	0xFE1
 11683                           indf2	equ	0xFDF
 11684                           postinc2	equ	0xFDE
 11685                           postdec2	equ	0xFDD
 11686                           plusw2	equ	0xFDB
 11687                           fsr2h	equ	0xFDA
 11688                           fsr2l	equ	0xFD9
 11689                           status	equ	0xFD8
 11690                           
 11691 ;; *************** function i2_isdigit *****************
 11692 ;; Defined at:
 11693 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
 11694 ;; Parameters:    Size  Location     Type
 11695 ;;  c               1    wreg     unsigned char 
 11696 ;; Auto vars:     Size  Location     Type
 11697 ;;  c               1    2[COMRAM] unsigned char 
 11698 ;; Return value:  Size  Location     Type
 11699 ;;		None               void
 11700 ;; Registers used:
 11701 ;;		wreg, status,2, status,0
 11702 ;; Tracked objects:
 11703 ;;		On entry : 0/0
 11704 ;;		On exit  : 0/0
 11705 ;;		Unchanged: 0/0
 11706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11708 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11709 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11710 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11711 ;;Total ram usage:        3 bytes
 11712 ;; Hardware stack levels used:    1
 11713 ;; This function calls:
 11714 ;;		Nothing
 11715 ;; This function is called by:
 11716 ;;		i2_printf
 11717 ;; This function uses a non-reentrant model
 11718 ;;
 11719                           
 11720                           	psect	text57
 11721  002748                     __ptext57:
 11722                           	opt stack 0
 11723  002748                     i2_isdigit:
 11724                           	opt stack 23
 11725                           
 11726                           ;incstack = 0
 11727                           ;i2isdigit@c stored from wreg
 11728  002748  6E03               	movwf	i2isdigit@c,c
 11729  00274A  0E00               	movlw	0
 11730  00274C  6E02               	movwf	i2_isdigit$1098,c
 11731  00274E  0E3A               	movlw	58
 11732  002750  6003               	cpfslt	i2isdigit@c,c
 11733  002752  D005               	goto	i2l3137
 11734  002754  0E2F               	movlw	47
 11735  002756  6403               	cpfsgt	i2isdigit@c,c
 11736  002758  D002               	goto	i2l3137
 11737  00275A  0E01               	movlw	1
 11738  00275C  6E02               	movwf	i2_isdigit$1098,c
 11739  00275E                     i2l3137:
 11740  00275E  C002  F001         	movff	i2_isdigit$1098,??i2_isdigit
 11741  002762  3001               	rrcf	??i2_isdigit,w,c
 11742  002764  0012               	return	
 11743  002766                     __end_ofi2_isdigit:
 11744                           	opt stack 0
 11745                           pclatu	equ	0xFFB
 11746                           pclath	equ	0xFFA
 11747                           tblptru	equ	0xFF8
 11748                           tblptrh	equ	0xFF7
 11749                           tblptrl	equ	0xFF6
 11750                           tablat	equ	0xFF5
 11751                           prodh	equ	0xFF4
 11752                           prodl	equ	0xFF3
 11753                           intcon	equ	0xFF2
 11754                           intcon2	equ	0xFF1
 11755                           intcon3	equ	0xFF0
 11756                           postinc0	equ	0xFEE
 11757                           fsr0h	equ	0xFEA
 11758                           fsr0l	equ	0xFE9
 11759                           wreg	equ	0xFE8
 11760                           postdec1	equ	0xFE5
 11761                           plusw1	equ	0xFE3
 11762                           fsr1h	equ	0xFE2
 11763                           fsr1l	equ	0xFE1
 11764                           indf2	equ	0xFDF
 11765                           postinc2	equ	0xFDE
 11766                           postdec2	equ	0xFDD
 11767                           plusw2	equ	0xFDB
 11768                           fsr2h	equ	0xFDA
 11769                           fsr2l	equ	0xFD9
 11770                           status	equ	0xFD8
 11771                           
 11772 ;; *************** function i2___wmul *****************
 11773 ;; Defined at:
 11774 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
 11775 ;; Parameters:    Size  Location     Type
 11776 ;;  multiplier      2    0[COMRAM] unsigned int 
 11777 ;;  multiplicand    2    2[COMRAM] unsigned int 
 11778 ;; Auto vars:     Size  Location     Type
 11779 ;;  __wmul          2    4[COMRAM] unsigned int 
 11780 ;; Return value:  Size  Location     Type
 11781 ;;                  2    0[COMRAM] unsigned int 
 11782 ;; Registers used:
 11783 ;;		wreg, status,2, status,0, prodl, prodh
 11784 ;; Tracked objects:
 11785 ;;		On entry : 0/0
 11786 ;;		On exit  : 0/0
 11787 ;;		Unchanged: 0/0
 11788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11789 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11790 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11792 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11793 ;;Total ram usage:        6 bytes
 11794 ;; Hardware stack levels used:    1
 11795 ;; This function calls:
 11796 ;;		Nothing
 11797 ;; This function is called by:
 11798 ;;		_mainloop
 11799 ;;		_simulate
 11800 ;;		_HexDecToDec2
 11801 ;;		_WriteRun
 11802 ;;		i2_printf
 11803 ;; This function uses a non-reentrant model
 11804 ;;
 11805                           
 11806                           	psect	text58
 11807  0026C0                     __ptext58:
 11808                           	opt stack 0
 11809  0026C0                     i2___wmul:
 11810                           	opt stack 23
 11811                           
 11812                           ;incstack = 0
 11813  0026C0  5001               	movf	i2___wmul@multiplier,w,c
 11814  0026C2  0203               	mulwf	i2___wmul@multiplicand,c
 11815  0026C4  CFF3 F005          	movff	prodl,i2___wmul@product
 11816  0026C8  CFF4 F006          	movff	prodh,i2___wmul@product+1
 11817  0026CC  5001               	movf	i2___wmul@multiplier,w,c
 11818  0026CE  0204               	mulwf	i2___wmul@multiplicand+1,c
 11819  0026D0  50F3               	movf	prodl,w,c
 11820  0026D2  2606               	addwf	i2___wmul@product+1,f,c
 11821  0026D4  5002               	movf	i2___wmul@multiplier+1,w,c
 11822  0026D6  0203               	mulwf	i2___wmul@multiplicand,c
 11823  0026D8  50F3               	movf	prodl,w,c
 11824  0026DA  2606               	addwf	i2___wmul@product+1,f,c
 11825  0026DC  C005  F001         	movff	i2___wmul@product,?i2___wmul
 11826  0026E0  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 11827  0026E4  0012               	return	
 11828  0026E6                     __end_ofi2___wmul:
 11829                           	opt stack 0
 11830                           pclatu	equ	0xFFB
 11831                           pclath	equ	0xFFA
 11832                           tblptru	equ	0xFF8
 11833                           tblptrh	equ	0xFF7
 11834                           tblptrl	equ	0xFF6
 11835                           tablat	equ	0xFF5
 11836                           prodh	equ	0xFF4
 11837                           prodl	equ	0xFF3
 11838                           intcon	equ	0xFF2
 11839                           intcon2	equ	0xFF1
 11840                           intcon3	equ	0xFF0
 11841                           postinc0	equ	0xFEE
 11842                           fsr0h	equ	0xFEA
 11843                           fsr0l	equ	0xFE9
 11844                           wreg	equ	0xFE8
 11845                           postdec1	equ	0xFE5
 11846                           plusw1	equ	0xFE3
 11847                           fsr1h	equ	0xFE2
 11848                           fsr1l	equ	0xFE1
 11849                           indf2	equ	0xFDF
 11850                           postinc2	equ	0xFDE
 11851                           postdec2	equ	0xFDD
 11852                           plusw2	equ	0xFDB
 11853                           fsr2h	equ	0xFDA
 11854                           fsr2l	equ	0xFD9
 11855                           status	equ	0xFD8
 11856                           
 11857 ;; *************** function i2___lwmod *****************
 11858 ;; Defined at:
 11859 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
 11860 ;; Parameters:    Size  Location     Type
 11861 ;;  dividend        2    7[COMRAM] unsigned int 
 11862 ;;  divisor         2    9[COMRAM] unsigned int 
 11863 ;; Auto vars:     Size  Location     Type
 11864 ;;  __lwmod         1   11[COMRAM] unsigned char 
 11865 ;; Return value:  Size  Location     Type
 11866 ;;                  2    7[COMRAM] unsigned int 
 11867 ;; Registers used:
 11868 ;;		wreg, status,2, status,0
 11869 ;; Tracked objects:
 11870 ;;		On entry : 0/0
 11871 ;;		On exit  : 0/0
 11872 ;;		Unchanged: 0/0
 11873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11874 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11875 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11877 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11878 ;;Total ram usage:        5 bytes
 11879 ;; Hardware stack levels used:    1
 11880 ;; This function calls:
 11881 ;;		Nothing
 11882 ;; This function is called by:
 11883 ;;		i2_printf
 11884 ;; This function uses a non-reentrant model
 11885 ;;
 11886                           
 11887                           	psect	text59
 11888  0024B6                     __ptext59:
 11889                           	opt stack 0
 11890  0024B6                     i2___lwmod:
 11891                           	opt stack 23
 11892                           
 11893                           ;incstack = 0
 11894  0024B6  500A               	movf	i2___lwmod@divisor,w,c
 11895  0024B8  100B               	iorwf	i2___lwmod@divisor+1,w,c
 11896  0024BA  B4D8               	btfsc	status,2,c
 11897  0024BC  D018               	goto	i2l1022
 11898  0024BE  0E01               	movlw	1
 11899  0024C0  6E0C               	movwf	i2___lwmod@counter,c
 11900  0024C2  D004               	goto	i2l3169
 11901  0024C4                     i2l3167:
 11902  0024C4  90D8               	bcf	status,0,c
 11903  0024C6  360A               	rlcf	i2___lwmod@divisor,f,c
 11904  0024C8  360B               	rlcf	i2___lwmod@divisor+1,f,c
 11905  0024CA  2A0C               	incf	i2___lwmod@counter,f,c
 11906  0024CC                     i2l3169:
 11907  0024CC  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 11908  0024CE  D7FA               	goto	i2l3167
 11909  0024D0                     i2l3171:
 11910  0024D0  500A               	movf	i2___lwmod@divisor,w,c
 11911  0024D2  5C08               	subwf	i2___lwmod@dividend,w,c
 11912  0024D4  500B               	movf	i2___lwmod@divisor+1,w,c
 11913  0024D6  5809               	subwfb	i2___lwmod@dividend+1,w,c
 11914  0024D8  A0D8               	btfss	status,0,c
 11915  0024DA  D004               	goto	i2l3175
 11916  0024DC  500A               	movf	i2___lwmod@divisor,w,c
 11917  0024DE  5E08               	subwf	i2___lwmod@dividend,f,c
 11918  0024E0  500B               	movf	i2___lwmod@divisor+1,w,c
 11919  0024E2  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 11920  0024E4                     i2l3175:
 11921  0024E4  90D8               	bcf	status,0,c
 11922  0024E6  320B               	rrcf	i2___lwmod@divisor+1,f,c
 11923  0024E8  320A               	rrcf	i2___lwmod@divisor,f,c
 11924  0024EA  2E0C               	decfsz	i2___lwmod@counter,f,c
 11925  0024EC  D7F1               	goto	i2l3171
 11926  0024EE                     i2l1022:
 11927  0024EE  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 11928  0024F2  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 11929  0024F6  0012               	return		;funcret
 11930  0024F8                     __end_ofi2___lwmod:
 11931                           	opt stack 0
 11932                           pclatu	equ	0xFFB
 11933                           pclath	equ	0xFFA
 11934                           tblptru	equ	0xFF8
 11935                           tblptrh	equ	0xFF7
 11936                           tblptrl	equ	0xFF6
 11937                           tablat	equ	0xFF5
 11938                           prodh	equ	0xFF4
 11939                           prodl	equ	0xFF3
 11940                           intcon	equ	0xFF2
 11941                           intcon2	equ	0xFF1
 11942                           intcon3	equ	0xFF0
 11943                           postinc0	equ	0xFEE
 11944                           fsr0h	equ	0xFEA
 11945                           fsr0l	equ	0xFE9
 11946                           wreg	equ	0xFE8
 11947                           postdec1	equ	0xFE5
 11948                           plusw1	equ	0xFE3
 11949                           fsr1h	equ	0xFE2
 11950                           fsr1l	equ	0xFE1
 11951                           indf2	equ	0xFDF
 11952                           postinc2	equ	0xFDE
 11953                           postdec2	equ	0xFDD
 11954                           plusw2	equ	0xFDB
 11955                           fsr2h	equ	0xFDA
 11956                           fsr2l	equ	0xFD9
 11957                           status	equ	0xFD8
 11958                           
 11959 ;; *************** function i2___lwdiv *****************
 11960 ;; Defined at:
 11961 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
 11962 ;; Parameters:    Size  Location     Type
 11963 ;;  dividend        2    0[COMRAM] unsigned int 
 11964 ;;  divisor         2    2[COMRAM] unsigned int 
 11965 ;; Auto vars:     Size  Location     Type
 11966 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 11967 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 11968 ;; Return value:  Size  Location     Type
 11969 ;;                  2    0[COMRAM] unsigned int 
 11970 ;; Registers used:
 11971 ;;		wreg, status,2, status,0
 11972 ;; Tracked objects:
 11973 ;;		On entry : 0/0
 11974 ;;		On exit  : 0/0
 11975 ;;		Unchanged: 0/0
 11976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11977 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11978 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11980 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11981 ;;Total ram usage:        7 bytes
 11982 ;; Hardware stack levels used:    1
 11983 ;; This function calls:
 11984 ;;		Nothing
 11985 ;; This function is called by:
 11986 ;;		i2_printf
 11987 ;; This function uses a non-reentrant model
 11988 ;;
 11989                           
 11990                           	psect	text60
 11991  002342                     __ptext60:
 11992                           	opt stack 0
 11993  002342                     i2___lwdiv:
 11994                           	opt stack 23
 11995                           
 11996                           ;incstack = 0
 11997  002342  0E00               	movlw	0
 11998  002344  6E06               	movwf	i2___lwdiv@quotient+1,c
 11999  002346  0E00               	movlw	0
 12000  002348  6E05               	movwf	i2___lwdiv@quotient,c
 12001  00234A  5003               	movf	i2___lwdiv@divisor,w,c
 12002  00234C  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 12003  00234E  B4D8               	btfsc	status,2,c
 12004  002350  D01C               	goto	i2l1012
 12005  002352  0E01               	movlw	1
 12006  002354  6E07               	movwf	i2___lwdiv@counter,c
 12007  002356  D004               	goto	i2l3149
 12008  002358                     i2l3147:
 12009  002358  90D8               	bcf	status,0,c
 12010  00235A  3603               	rlcf	i2___lwdiv@divisor,f,c
 12011  00235C  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 12012  00235E  2A07               	incf	i2___lwdiv@counter,f,c
 12013  002360                     i2l3149:
 12014  002360  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 12015  002362  D7FA               	goto	i2l3147
 12016  002364                     i2l3151:
 12017  002364  90D8               	bcf	status,0,c
 12018  002366  3605               	rlcf	i2___lwdiv@quotient,f,c
 12019  002368  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 12020  00236A  5003               	movf	i2___lwdiv@divisor,w,c
 12021  00236C  5C01               	subwf	i2___lwdiv@dividend,w,c
 12022  00236E  5004               	movf	i2___lwdiv@divisor+1,w,c
 12023  002370  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 12024  002372  A0D8               	btfss	status,0,c
 12025  002374  D005               	goto	i2l3159
 12026  002376  5003               	movf	i2___lwdiv@divisor,w,c
 12027  002378  5E01               	subwf	i2___lwdiv@dividend,f,c
 12028  00237A  5004               	movf	i2___lwdiv@divisor+1,w,c
 12029  00237C  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 12030  00237E  8005               	bsf	i2___lwdiv@quotient,0,c
 12031  002380                     i2l3159:
 12032  002380  90D8               	bcf	status,0,c
 12033  002382  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 12034  002384  3203               	rrcf	i2___lwdiv@divisor,f,c
 12035  002386  2E07               	decfsz	i2___lwdiv@counter,f,c
 12036  002388  D7ED               	goto	i2l3151
 12037  00238A                     i2l1012:
 12038  00238A  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 12039  00238E  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 12040  002392  0012               	return		;funcret
 12041  002394                     __end_ofi2___lwdiv:
 12042                           	opt stack 0
 12043                           pclatu	equ	0xFFB
 12044                           pclath	equ	0xFFA
 12045                           tblptru	equ	0xFF8
 12046                           tblptrh	equ	0xFF7
 12047                           tblptrl	equ	0xFF6
 12048                           tablat	equ	0xFF5
 12049                           prodh	equ	0xFF4
 12050                           prodl	equ	0xFF3
 12051                           intcon	equ	0xFF2
 12052                           intcon2	equ	0xFF1
 12053                           intcon3	equ	0xFF0
 12054                           postinc0	equ	0xFEE
 12055                           fsr0h	equ	0xFEA
 12056                           fsr0l	equ	0xFE9
 12057                           wreg	equ	0xFE8
 12058                           postdec1	equ	0xFE5
 12059                           plusw1	equ	0xFE3
 12060                           fsr1h	equ	0xFE2
 12061                           fsr1l	equ	0xFE1
 12062                           indf2	equ	0xFDF
 12063                           postinc2	equ	0xFDE
 12064                           postdec2	equ	0xFDD
 12065                           plusw2	equ	0xFDB
 12066                           fsr2h	equ	0xFDA
 12067                           fsr2l	equ	0xFD9
 12068                           status	equ	0xFD8
 12069                           
 12070 ;; *************** function i2_lcdInst *****************
 12071 ;; Defined at:
 12072 ;;		line 20 in file "lcd.c"
 12073 ;; Parameters:    Size  Location     Type
 12074 ;;  data            1    wreg     unsigned char 
 12075 ;; Auto vars:     Size  Location     Type
 12076 ;;  data            1    2[COMRAM] unsigned char 
 12077 ;; Return value:  Size  Location     Type
 12078 ;;                  1    wreg      void 
 12079 ;; Registers used:
 12080 ;;		wreg, status,2, status,0, cstack
 12081 ;; Tracked objects:
 12082 ;;		On entry : 0/0
 12083 ;;		On exit  : 0/0
 12084 ;;		Unchanged: 0/0
 12085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12087 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12089 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12090 ;;Total ram usage:        1 bytes
 12091 ;; Hardware stack levels used:    1
 12092 ;; Hardware stack levels required when called:    1
 12093 ;; This function calls:
 12094 ;;		i2_lcdNibble
 12095 ;; This function is called by:
 12096 ;;		_mainloop
 12097 ;;		_simulate
 12098 ;;		_intrpt
 12099 ;;		_showInfo
 12100 ;;		_stopMoving
 12101 ;;		_PermLog
 12102 ;; This function uses a non-reentrant model
 12103 ;;
 12104                           
 12105                           	psect	text61
 12106  002832                     __ptext61:
 12107                           	opt stack 0
 12108  002832                     i2_lcdInst:
 12109                           	opt stack 24
 12110                           
 12111                           ;incstack = 0
 12112                           ;i2lcdInst@data stored from wreg
 12113  002832  6E03               	movwf	i2lcdInst@data,c
 12114                           
 12115                           ;lcd.c: 21: LATDbits.LATD2 = 0;
 12116  002834  948C               	bcf	3980,2,c	;volatile
 12117                           
 12118                           ;lcd.c: 22: lcdNibble(data);
 12119  002836  5003               	movf	i2lcdInst@data,w,c
 12120  002838  EC76  F011         	call	i2_lcdNibble
 12121  00283C  0012               	return		;funcret
 12122  00283E                     __end_ofi2_lcdInst:
 12123                           	opt stack 0
 12124                           pclatu	equ	0xFFB
 12125                           pclath	equ	0xFFA
 12126                           tblptru	equ	0xFF8
 12127                           tblptrh	equ	0xFF7
 12128                           tblptrl	equ	0xFF6
 12129                           tablat	equ	0xFF5
 12130                           prodh	equ	0xFF4
 12131                           prodl	equ	0xFF3
 12132                           intcon	equ	0xFF2
 12133                           intcon2	equ	0xFF1
 12134                           intcon3	equ	0xFF0
 12135                           postinc0	equ	0xFEE
 12136                           fsr0h	equ	0xFEA
 12137                           fsr0l	equ	0xFE9
 12138                           wreg	equ	0xFE8
 12139                           postdec1	equ	0xFE5
 12140                           plusw1	equ	0xFE3
 12141                           fsr1h	equ	0xFE2
 12142                           fsr1l	equ	0xFE1
 12143                           indf2	equ	0xFDF
 12144                           postinc2	equ	0xFDE
 12145                           postdec2	equ	0xFDD
 12146                           plusw2	equ	0xFDB
 12147                           fsr2h	equ	0xFDA
 12148                           fsr2l	equ	0xFD9
 12149                           status	equ	0xFD8
 12150                           
 12151 ;; *************** function i2_lcdNibble *****************
 12152 ;; Defined at:
 12153 ;;		line 30 in file "lcd.c"
 12154 ;; Parameters:    Size  Location     Type
 12155 ;;  data            1    wreg     unsigned char 
 12156 ;; Auto vars:     Size  Location     Type
 12157 ;;  data            1    1[COMRAM] unsigned char 
 12158 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 12159 ;; Return value:  Size  Location     Type
 12160 ;;                  1    wreg      void 
 12161 ;; Registers used:
 12162 ;;		wreg, status,2, status,0
 12163 ;; Tracked objects:
 12164 ;;		On entry : 0/0
 12165 ;;		On exit  : 0/0
 12166 ;;		Unchanged: 0/0
 12167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12169 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12171 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12172 ;;Total ram usage:        2 bytes
 12173 ;; Hardware stack levels used:    1
 12174 ;; This function calls:
 12175 ;;		Nothing
 12176 ;; This function is called by:
 12177 ;;		i2_lcdInst
 12178 ;;		i2_putch
 12179 ;; This function uses a non-reentrant model
 12180 ;;
 12181                           
 12182                           	psect	text62
 12183  0022EC                     __ptext62:
 12184                           	opt stack 0
 12185  0022EC                     i2_lcdNibble:
 12186                           	opt stack 24
 12187                           
 12188                           ;incstack = 0
 12189                           ;i2lcdNibble@data stored from wreg
 12190  0022EC  6E02               	movwf	i2lcdNibble@data,c
 12191                           
 12192                           ;lcd.c: 32: char temp = data & 0xF0;
 12193  0022EE  5002               	movf	i2lcdNibble@data,w,c
 12194  0022F0  0BF0               	andlw	240
 12195  0022F2  6E01               	movwf	i2lcdNibble@temp,c
 12196                           
 12197                           ;lcd.c: 33: LATD = LATD & 0x0F;
 12198  0022F4  508C               	movf	3980,w,c	;volatile
 12199  0022F6  0B0F               	andlw	15
 12200  0022F8  6E8C               	movwf	3980,c	;volatile
 12201                           
 12202                           ;lcd.c: 34: LATD = temp | LATD;
 12203  0022FA  5001               	movf	i2lcdNibble@temp,w,c
 12204  0022FC  108C               	iorwf	3980,w,c	;volatile
 12205  0022FE  6E8C               	movwf	3980,c	;volatile
 12206                           
 12207                           ;lcd.c: 36: LATDbits.LATD3 = 0;
 12208  002300  968C               	bcf	3980,3,c	;volatile
 12209                           
 12210                           ;lcd.c: 37: _delay((unsigned long)((25)*(8000000/4000000.0)));
 12211  002302  0E10               	movlw	16
 12212  002304                     i2u395_47:
 12213  002304  2EE8               	decfsz	wreg,f,c
 12214  002306  D7FE               	bra	i2u395_47
 12215  002308  D000               	nop2	
 12216                           
 12217                           ;lcd.c: 38: LATDbits.LATD3 = 1;
 12218  00230A  868C               	bsf	3980,3,c	;volatile
 12219                           
 12220                           ;lcd.c: 39: _delay((unsigned long)((25)*(8000000/4000000.0)));
 12221  00230C  0E10               	movlw	16
 12222  00230E                     i2u396_47:
 12223  00230E  2EE8               	decfsz	wreg,f,c
 12224  002310  D7FE               	bra	i2u396_47
 12225  002312  D000               	nop2	
 12226                           
 12227                           ;lcd.c: 41: data = data << 4;
 12228  002314  3802               	swapf	i2lcdNibble@data,w,c
 12229  002316  0BF0               	andlw	240
 12230  002318  6E02               	movwf	i2lcdNibble@data,c
 12231                           
 12232                           ;lcd.c: 43: temp = data & 0xF0;
 12233  00231A  5002               	movf	i2lcdNibble@data,w,c
 12234  00231C  0BF0               	andlw	240
 12235  00231E  6E01               	movwf	i2lcdNibble@temp,c
 12236                           
 12237                           ;lcd.c: 44: LATD = LATD & 0x0F;
 12238  002320  508C               	movf	3980,w,c	;volatile
 12239  002322  0B0F               	andlw	15
 12240  002324  6E8C               	movwf	3980,c	;volatile
 12241                           
 12242                           ;lcd.c: 45: LATD = temp | LATD;
 12243  002326  5001               	movf	i2lcdNibble@temp,w,c
 12244  002328  108C               	iorwf	3980,w,c	;volatile
 12245  00232A  6E8C               	movwf	3980,c	;volatile
 12246                           
 12247                           ;lcd.c: 47: LATDbits.LATD3 = 0;
 12248  00232C  968C               	bcf	3980,3,c	;volatile
 12249                           
 12250                           ;lcd.c: 48: _delay((unsigned long)((25)*(8000000/4000000.0)));
 12251  00232E  0E10               	movlw	16
 12252  002330                     i2u397_47:
 12253  002330  2EE8               	decfsz	wreg,f,c
 12254  002332  D7FE               	bra	i2u397_47
 12255  002334  D000               	nop2	
 12256                           
 12257                           ;lcd.c: 49: LATDbits.LATD3 = 1;
 12258  002336  868C               	bsf	3980,3,c	;volatile
 12259                           
 12260                           ;lcd.c: 50: _delay((unsigned long)((25)*(8000000/4000000.0)));
 12261  002338  0E10               	movlw	16
 12262  00233A                     i2u398_47:
 12263  00233A  2EE8               	decfsz	wreg,f,c
 12264  00233C  D7FE               	bra	i2u398_47
 12265  00233E  D000               	nop2	
 12266  002340  0012               	return		;funcret
 12267  002342                     __end_ofi2_lcdNibble:
 12268                           	opt stack 0
 12269                           pclatu	equ	0xFFB
 12270                           pclath	equ	0xFFA
 12271                           tblptru	equ	0xFF8
 12272                           tblptrh	equ	0xFF7
 12273                           tblptrl	equ	0xFF6
 12274                           tablat	equ	0xFF5
 12275                           prodh	equ	0xFF4
 12276                           prodl	equ	0xFF3
 12277                           intcon	equ	0xFF2
 12278                           intcon2	equ	0xFF1
 12279                           intcon3	equ	0xFF0
 12280                           postinc0	equ	0xFEE
 12281                           fsr0h	equ	0xFEA
 12282                           fsr0l	equ	0xFE9
 12283                           wreg	equ	0xFE8
 12284                           postdec1	equ	0xFE5
 12285                           plusw1	equ	0xFE3
 12286                           fsr1h	equ	0xFE2
 12287                           fsr1l	equ	0xFE1
 12288                           indf2	equ	0xFDF
 12289                           postinc2	equ	0xFDE
 12290                           postdec2	equ	0xFDD
 12291                           plusw2	equ	0xFDB
 12292                           fsr2h	equ	0xFDA
 12293                           fsr2l	equ	0xFD9
 12294                           status	equ	0xFD8
 12295                           
 12296 ;; *************** function _captureKeypad *****************
 12297 ;; Defined at:
 12298 ;;		line 13 in file "modules.c"
 12299 ;; Parameters:    Size  Location     Type
 12300 ;;		None
 12301 ;; Auto vars:     Size  Location     Type
 12302 ;;  keypress        1    2[COMRAM] unsigned char 
 12303 ;; Return value:  Size  Location     Type
 12304 ;;                  2    0[COMRAM] unsigned int 
 12305 ;; Registers used:
 12306 ;;		wreg, status,2, status,0
 12307 ;; Tracked objects:
 12308 ;;		On entry : 0/0
 12309 ;;		On exit  : 0/0
 12310 ;;		Unchanged: 0/0
 12311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12312 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12313 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12315 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12316 ;;Total ram usage:        3 bytes
 12317 ;; Hardware stack levels used:    1
 12318 ;; This function calls:
 12319 ;;		Nothing
 12320 ;; This function is called by:
 12321 ;;		_showInfo
 12322 ;;		_PermLog
 12323 ;; This function uses a non-reentrant model
 12324 ;;
 12325                           
 12326                           	psect	text63
 12327  002766                     __ptext63:
 12328                           	opt stack 0
 12329  002766                     _captureKeypad:
 12330                           	opt stack 23
 12331                           
 12332                           ;modules.c: 14: (INTCONbits.GIE = 0);
 12333                           
 12334                           ;incstack = 0
 12335  002766  9EF2               	bcf	intcon,7,c	;volatile
 12336  002768                     i2l256:
 12337  002768  A281               	btfss	3969,1,c	;volatile
 12338  00276A  D7FE               	goto	i2l256
 12339                           
 12340                           ;modules.c: 16: unsigned char keypress = (PORTB & 0xF0) >> 4;
 12341  00276C  3881               	swapf	3969,w,c	;volatile
 12342  00276E  0B0F               	andlw	15
 12343  002770  0B0F               	andlw	15
 12344  002772  6E03               	movwf	captureKeypad@keypress,c
 12345  002774                     i2l259:
 12346  002774  B281               	btfsc	3969,1,c	;volatile
 12347  002776  D7FE               	goto	i2l259
 12348                           
 12349                           ;modules.c: 18: INT1IF = 0;
 12350  002778  90F0               	bcf	intcon3,0,c	;volatile
 12351                           
 12352                           ;modules.c: 19: (INTCONbits.GIE = 1);
 12353  00277A  8EF2               	bsf	intcon,7,c	;volatile
 12354                           
 12355                           ;modules.c: 20: return keypress;
 12356  00277C  C003  F001         	movff	captureKeypad@keypress,?_captureKeypad
 12357  002780  6A02               	clrf	?_captureKeypad+1,c
 12358  002782  0012               	return		;funcret
 12359  002784                     __end_of_captureKeypad:
 12360                           	opt stack 0
 12361                           pclatu	equ	0xFFB
 12362                           pclath	equ	0xFFA
 12363                           tblptru	equ	0xFF8
 12364                           tblptrh	equ	0xFF7
 12365                           tblptrl	equ	0xFF6
 12366                           tablat	equ	0xFF5
 12367                           prodh	equ	0xFF4
 12368                           prodl	equ	0xFF3
 12369                           intcon	equ	0xFF2
 12370                           intcon2	equ	0xFF1
 12371                           intcon3	equ	0xFF0
 12372                           postinc0	equ	0xFEE
 12373                           fsr0h	equ	0xFEA
 12374                           fsr0l	equ	0xFE9
 12375                           wreg	equ	0xFE8
 12376                           postdec1	equ	0xFE5
 12377                           plusw1	equ	0xFE3
 12378                           fsr1h	equ	0xFE2
 12379                           fsr1l	equ	0xFE1
 12380                           indf2	equ	0xFDF
 12381                           postinc2	equ	0xFDE
 12382                           postdec2	equ	0xFDD
 12383                           plusw2	equ	0xFDB
 12384                           fsr2h	equ	0xFDA
 12385                           fsr2l	equ	0xFD9
 12386                           status	equ	0xFD8
 12387                           
 12388 ;; *************** function _ReadRun *****************
 12389 ;; Defined at:
 12390 ;;		line 66 in file "eeprom.c"
 12391 ;; Parameters:    Size  Location     Type
 12392 ;;  backruns        1    wreg     unsigned char 
 12393 ;;  sorted          2    2[COMRAM] PTR unsigned char 
 12394 ;;		 -> PermLog@sorted(4), 
 12395 ;;  time            2    4[COMRAM] PTR unsigned int 
 12396 ;;		 -> PermLog@time(2), 
 12397 ;; Auto vars:     Size  Location     Type
 12398 ;;  backruns        1   10[COMRAM] unsigned char 
 12399 ;;  add             2   11[COMRAM] unsigned int 
 12400 ;; Return value:  Size  Location     Type
 12401 ;;                  1    wreg      void 
 12402 ;; Registers used:
 12403 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12404 ;; Tracked objects:
 12405 ;;		On entry : 0/0
 12406 ;;		On exit  : 0/0
 12407 ;;		Unchanged: 0/0
 12408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12409 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12410 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12411 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12412 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12413 ;;Total ram usage:       11 bytes
 12414 ;; Hardware stack levels used:    1
 12415 ;; Hardware stack levels required when called:    1
 12416 ;; This function calls:
 12417 ;;		_back
 12418 ;;		i2_ReadEE
 12419 ;; This function is called by:
 12420 ;;		_PermLog
 12421 ;; This function uses a non-reentrant model
 12422 ;;
 12423                           
 12424                           	psect	text64
 12425  001488                     __ptext64:
 12426                           	opt stack 0
 12427  001488                     _ReadRun:
 12428                           	opt stack 23
 12429                           
 12430                           ;incstack = 0
 12431                           ;ReadRun@backruns stored from wreg
 12432  001488  6E0B               	movwf	ReadRun@backruns,c
 12433                           
 12434                           ;eeprom.c: 67: unsigned int add = back(backruns) * 5;
 12435  00148A  500B               	movf	ReadRun@backruns,w,c
 12436  00148C  ECC2  F013         	call	_back
 12437  001490  6E07               	movwf	??_ReadRun& (0+255),c
 12438  001492  5007               	movf	??_ReadRun,w,c
 12439  001494  0D05               	mullw	5
 12440  001496  CFF3 F00C          	movff	prodl,ReadRun@add
 12441  00149A  CFF4 F00D          	movff	prodh,ReadRun@add+1
 12442                           
 12443                           ;eeprom.c: 68: *time = ReadEE(add++ *8);
 12444  00149E  C00C  F007         	movff	ReadRun@add,??_ReadRun
 12445  0014A2  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 12446  0014A6  90D8               	bcf	status,0,c
 12447  0014A8  3607               	rlcf	??_ReadRun,f,c
 12448  0014AA  3608               	rlcf	??_ReadRun+1,f,c
 12449  0014AC  90D8               	bcf	status,0,c
 12450  0014AE  3607               	rlcf	??_ReadRun,f,c
 12451  0014B0  3608               	rlcf	??_ReadRun+1,f,c
 12452  0014B2  90D8               	bcf	status,0,c
 12453  0014B4  3607               	rlcf	??_ReadRun,f,c
 12454  0014B6  3608               	rlcf	??_ReadRun+1,f,c
 12455  0014B8  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 12456  0014BC  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 12457  0014C0  ECDC  F013         	call	i2_ReadEE	;wreg free
 12458  0014C4  6E09               	movwf	(??_ReadRun+2)& (0+255),c
 12459  0014C6  6A0A               	clrf	(??_ReadRun+3)& (0+255),c
 12460  0014C8  C005  FFD9         	movff	ReadRun@time,fsr2l
 12461  0014CC  C006  FFDA         	movff	ReadRun@time+1,fsr2h
 12462  0014D0  C009  FFDE         	movff	??_ReadRun+2,postinc2
 12463  0014D4  C00A  FFDD         	movff	??_ReadRun+3,postdec2
 12464  0014D8  4A0C               	infsnz	ReadRun@add,f,c
 12465  0014DA  2A0D               	incf	ReadRun@add+1,f,c
 12466                           
 12467                           ;eeprom.c: 69: sorted[0] = ReadEE(add++ *8);
 12468  0014DC  C00C  F007         	movff	ReadRun@add,??_ReadRun
 12469  0014E0  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 12470  0014E4  90D8               	bcf	status,0,c
 12471  0014E6  3607               	rlcf	??_ReadRun,f,c
 12472  0014E8  3608               	rlcf	??_ReadRun+1,f,c
 12473  0014EA  90D8               	bcf	status,0,c
 12474  0014EC  3607               	rlcf	??_ReadRun,f,c
 12475  0014EE  3608               	rlcf	??_ReadRun+1,f,c
 12476  0014F0  90D8               	bcf	status,0,c
 12477  0014F2  3607               	rlcf	??_ReadRun,f,c
 12478  0014F4  3608               	rlcf	??_ReadRun+1,f,c
 12479  0014F6  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 12480  0014FA  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 12481  0014FE  ECDC  F013         	call	i2_ReadEE	;wreg free
 12482  001502  C003  FFD9         	movff	ReadRun@sorted,fsr2l
 12483  001506  C004  FFDA         	movff	ReadRun@sorted+1,fsr2h
 12484  00150A  6EDF               	movwf	indf2,c
 12485  00150C  4A0C               	infsnz	ReadRun@add,f,c
 12486  00150E  2A0D               	incf	ReadRun@add+1,f,c
 12487                           
 12488                           ;eeprom.c: 70: sorted[1] = ReadEE(add++ *8);
 12489  001510  EE20 F001          	lfsr	2,1
 12490  001514  5003               	movf	ReadRun@sorted,w,c
 12491  001516  26D9               	addwf	fsr2l,f,c
 12492  001518  5004               	movf	ReadRun@sorted+1,w,c
 12493  00151A  22DA               	addwfc	fsr2h,f,c
 12494  00151C  C00C  F007         	movff	ReadRun@add,??_ReadRun
 12495  001520  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 12496  001524  90D8               	bcf	status,0,c
 12497  001526  3607               	rlcf	??_ReadRun,f,c
 12498  001528  3608               	rlcf	??_ReadRun+1,f,c
 12499  00152A  90D8               	bcf	status,0,c
 12500  00152C  3607               	rlcf	??_ReadRun,f,c
 12501  00152E  3608               	rlcf	??_ReadRun+1,f,c
 12502  001530  90D8               	bcf	status,0,c
 12503  001532  3607               	rlcf	??_ReadRun,f,c
 12504  001534  3608               	rlcf	??_ReadRun+1,f,c
 12505  001536  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 12506  00153A  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 12507  00153E  ECDC  F013         	call	i2_ReadEE	;wreg free
 12508  001542  6EDF               	movwf	indf2,c
 12509  001544  4A0C               	infsnz	ReadRun@add,f,c
 12510  001546  2A0D               	incf	ReadRun@add+1,f,c
 12511                           
 12512                           ;eeprom.c: 71: sorted[2] = ReadEE(add++ *8);
 12513  001548  EE20 F002          	lfsr	2,2
 12514  00154C  5003               	movf	ReadRun@sorted,w,c
 12515  00154E  26D9               	addwf	fsr2l,f,c
 12516  001550  5004               	movf	ReadRun@sorted+1,w,c
 12517  001552  22DA               	addwfc	fsr2h,f,c
 12518  001554  C00C  F007         	movff	ReadRun@add,??_ReadRun
 12519  001558  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 12520  00155C  90D8               	bcf	status,0,c
 12521  00155E  3607               	rlcf	??_ReadRun,f,c
 12522  001560  3608               	rlcf	??_ReadRun+1,f,c
 12523  001562  90D8               	bcf	status,0,c
 12524  001564  3607               	rlcf	??_ReadRun,f,c
 12525  001566  3608               	rlcf	??_ReadRun+1,f,c
 12526  001568  90D8               	bcf	status,0,c
 12527  00156A  3607               	rlcf	??_ReadRun,f,c
 12528  00156C  3608               	rlcf	??_ReadRun+1,f,c
 12529  00156E  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 12530  001572  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 12531  001576  ECDC  F013         	call	i2_ReadEE	;wreg free
 12532  00157A  6EDF               	movwf	indf2,c
 12533  00157C  4A0C               	infsnz	ReadRun@add,f,c
 12534  00157E  2A0D               	incf	ReadRun@add+1,f,c
 12535                           
 12536                           ;eeprom.c: 72: sorted[3] = ReadEE(add++ *8);
 12537  001580  EE20 F003          	lfsr	2,3
 12538  001584  5003               	movf	ReadRun@sorted,w,c
 12539  001586  26D9               	addwf	fsr2l,f,c
 12540  001588  5004               	movf	ReadRun@sorted+1,w,c
 12541  00158A  22DA               	addwfc	fsr2h,f,c
 12542  00158C  C00C  F007         	movff	ReadRun@add,??_ReadRun
 12543  001590  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 12544  001594  90D8               	bcf	status,0,c
 12545  001596  3607               	rlcf	??_ReadRun,f,c
 12546  001598  3608               	rlcf	??_ReadRun+1,f,c
 12547  00159A  90D8               	bcf	status,0,c
 12548  00159C  3607               	rlcf	??_ReadRun,f,c
 12549  00159E  3608               	rlcf	??_ReadRun+1,f,c
 12550  0015A0  90D8               	bcf	status,0,c
 12551  0015A2  3607               	rlcf	??_ReadRun,f,c
 12552  0015A4  3608               	rlcf	??_ReadRun+1,f,c
 12553  0015A6  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 12554  0015AA  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 12555  0015AE  ECDC  F013         	call	i2_ReadEE	;wreg free
 12556  0015B2  6EDF               	movwf	indf2,c
 12557  0015B4  4A0C               	infsnz	ReadRun@add,f,c
 12558  0015B6  2A0D               	incf	ReadRun@add+1,f,c
 12559  0015B8  0012               	return		;funcret
 12560  0015BA                     __end_of_ReadRun:
 12561                           	opt stack 0
 12562                           pclatu	equ	0xFFB
 12563                           pclath	equ	0xFFA
 12564                           tblptru	equ	0xFF8
 12565                           tblptrh	equ	0xFF7
 12566                           tblptrl	equ	0xFF6
 12567                           tablat	equ	0xFF5
 12568                           prodh	equ	0xFF4
 12569                           prodl	equ	0xFF3
 12570                           intcon	equ	0xFF2
 12571                           intcon2	equ	0xFF1
 12572                           intcon3	equ	0xFF0
 12573                           postinc0	equ	0xFEE
 12574                           fsr0h	equ	0xFEA
 12575                           fsr0l	equ	0xFE9
 12576                           wreg	equ	0xFE8
 12577                           postdec1	equ	0xFE5
 12578                           plusw1	equ	0xFE3
 12579                           fsr1h	equ	0xFE2
 12580                           fsr1l	equ	0xFE1
 12581                           indf2	equ	0xFDF
 12582                           postinc2	equ	0xFDE
 12583                           postdec2	equ	0xFDD
 12584                           plusw2	equ	0xFDB
 12585                           fsr2h	equ	0xFDA
 12586                           fsr2l	equ	0xFD9
 12587                           status	equ	0xFD8
 12588                           
 12589 ;; *************** function i2_ReadEE *****************
 12590 ;; Defined at:
 12591 ;;		line 16 in file "eeprom.c"
 12592 ;; Parameters:    Size  Location     Type
 12593 ;;  address         2    0[COMRAM] unsigned int 
 12594 ;; Auto vars:     Size  Location     Type
 12595 ;;		None
 12596 ;; Return value:  Size  Location     Type
 12597 ;;                  1    wreg      unsigned char 
 12598 ;; Registers used:
 12599 ;;		wreg, status,2
 12600 ;; Tracked objects:
 12601 ;;		On entry : 0/0
 12602 ;;		On exit  : 0/0
 12603 ;;		Unchanged: 0/0
 12604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12605 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12608 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12609 ;;Total ram usage:        2 bytes
 12610 ;; Hardware stack levels used:    1
 12611 ;; This function calls:
 12612 ;;		Nothing
 12613 ;; This function is called by:
 12614 ;;		_ReadRun
 12615 ;; This function uses a non-reentrant model
 12616 ;;
 12617                           
 12618                           	psect	text65
 12619  0027B8                     __ptext65:
 12620                           	opt stack 0
 12621  0027B8                     i2_ReadEE:
 12622                           	opt stack 23
 12623                           
 12624                           ;eeprom.c: 19: EEADRH = (unsigned char) (address >> 8);
 12625                           
 12626                           ;incstack = 0
 12627  0027B8  5002               	movf	i2ReadEE@address+1,w,c
 12628  0027BA  6EAA               	movwf	4010,c	;volatile
 12629                           
 12630                           ;eeprom.c: 20: EEADR = (unsigned char) address;
 12631  0027BC  C001  FFA9         	movff	i2ReadEE@address,4009	;volatile
 12632                           
 12633                           ;eeprom.c: 22: EECON1bits.EEPGD = 0;
 12634  0027C0  9EA6               	bcf	4006,7,c	;volatile
 12635                           
 12636                           ;eeprom.c: 23: EECON1bits.CFGS = 0;
 12637  0027C2  9CA6               	bcf	4006,6,c	;volatile
 12638                           
 12639                           ;eeprom.c: 24: EECON1bits.RD = 1;
 12640  0027C4  80A6               	bsf	4006,0,c	;volatile
 12641  0027C6                     i2l493:
 12642  0027C6  B0A6               	btfsc	4006,0,c	;volatile
 12643  0027C8  D7FE               	goto	i2l493
 12644                           
 12645                           ;eeprom.c: 30: return EEDATA;
 12646  0027CA  50A8               	movf	4008,w,c	;volatile
 12647  0027CC  0012               	return	
 12648  0027CE                     __end_ofi2_ReadEE:
 12649                           	opt stack 0
 12650                           pclatu	equ	0xFFB
 12651                           pclath	equ	0xFFA
 12652                           tblptru	equ	0xFF8
 12653                           tblptrh	equ	0xFF7
 12654                           tblptrl	equ	0xFF6
 12655                           tablat	equ	0xFF5
 12656                           prodh	equ	0xFF4
 12657                           prodl	equ	0xFF3
 12658                           intcon	equ	0xFF2
 12659                           intcon2	equ	0xFF1
 12660                           intcon3	equ	0xFF0
 12661                           postinc0	equ	0xFEE
 12662                           fsr0h	equ	0xFEA
 12663                           fsr0l	equ	0xFE9
 12664                           wreg	equ	0xFE8
 12665                           postdec1	equ	0xFE5
 12666                           plusw1	equ	0xFE3
 12667                           fsr1h	equ	0xFE2
 12668                           fsr1l	equ	0xFE1
 12669                           indf2	equ	0xFDF
 12670                           postinc2	equ	0xFDE
 12671                           postdec2	equ	0xFDD
 12672                           plusw2	equ	0xFDB
 12673                           fsr2h	equ	0xFDA
 12674                           fsr2l	equ	0xFD9
 12675                           status	equ	0xFD8
 12676                           
 12677 ;; *************** function _back *****************
 12678 ;; Defined at:
 12679 ;;		line 57 in file "eeprom.c"
 12680 ;; Parameters:    Size  Location     Type
 12681 ;;  runs            1    wreg     unsigned char 
 12682 ;; Auto vars:     Size  Location     Type
 12683 ;;  runs            1    0[COMRAM] unsigned char 
 12684 ;;  result          1    1[COMRAM] unsigned char 
 12685 ;; Return value:  Size  Location     Type
 12686 ;;                  1    wreg      unsigned char 
 12687 ;; Registers used:
 12688 ;;		wreg, status,2, status,0
 12689 ;; Tracked objects:
 12690 ;;		On entry : 0/0
 12691 ;;		On exit  : 0/0
 12692 ;;		Unchanged: 0/0
 12693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12695 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12697 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12698 ;;Total ram usage:        2 bytes
 12699 ;; Hardware stack levels used:    1
 12700 ;; This function calls:
 12701 ;;		Nothing
 12702 ;; This function is called by:
 12703 ;;		_ReadRun
 12704 ;; This function uses a non-reentrant model
 12705 ;;
 12706                           
 12707                           	psect	text66
 12708  002784                     __ptext66:
 12709                           	opt stack 0
 12710  002784                     _back:
 12711                           	opt stack 23
 12712                           
 12713                           ;incstack = 0
 12714                           ;back@runs stored from wreg
 12715  002784  6E01               	movwf	back@runs,c
 12716                           
 12717                           ;eeprom.c: 59: unsigned char result = Latest + 4 - runs;
 12718  002786  5001               	movf	back@runs,w,c
 12719  002788  0800               	sublw	0
 12720  00278A  0100               	movlb	0	; () banked
 12721  00278C  25C0               	addwf	_Latest& (0+255),w,b
 12722  00278E  0F04               	addlw	4
 12723  002790  6E02               	movwf	back@result,c
 12724                           
 12725                           ;eeprom.c: 60: if (result > 4) {
 12726  002792  0E04               	movlw	4
 12727  002794  6402               	cpfsgt	back@result,c
 12728  002796  D002               	goto	i2l3641
 12729                           
 12730                           ; BSR set to: 0
 12731                           ;eeprom.c: 61: result -= 4;
 12732  002798  0E04               	movlw	4
 12733  00279A  5E02               	subwf	back@result,f,c
 12734  00279C                     i2l3641:
 12735                           
 12736                           ; BSR set to: 0
 12737                           ;eeprom.c: 62: }
 12738                           ;eeprom.c: 63: return result;
 12739  00279C  5002               	movf	back@result,w,c
 12740  00279E  0012               	return	
 12741  0027A0                     __end_of_back:
 12742                           	opt stack 0
 12743                           pclatu	equ	0xFFB
 12744                           pclath	equ	0xFFA
 12745                           tblptru	equ	0xFF8
 12746                           tblptrh	equ	0xFF7
 12747                           tblptrl	equ	0xFF6
 12748                           tablat	equ	0xFF5
 12749                           prodh	equ	0xFF4
 12750                           prodl	equ	0xFF3
 12751                           intcon	equ	0xFF2
 12752                           intcon2	equ	0xFF1
 12753                           intcon3	equ	0xFF0
 12754                           postinc0	equ	0xFEE
 12755                           fsr0h	equ	0xFEA
 12756                           fsr0l	equ	0xFE9
 12757                           wreg	equ	0xFE8
 12758                           postdec1	equ	0xFE5
 12759                           plusw1	equ	0xFE3
 12760                           fsr1h	equ	0xFE2
 12761                           fsr1l	equ	0xFE1
 12762                           indf2	equ	0xFDF
 12763                           postinc2	equ	0xFDE
 12764                           postdec2	equ	0xFDD
 12765                           plusw2	equ	0xFDB
 12766                           fsr2h	equ	0xFDA
 12767                           fsr2l	equ	0xFD9
 12768                           status	equ	0xFD8
 12769                           pclatu	equ	0xFFB
 12770                           pclath	equ	0xFFA
 12771                           tblptru	equ	0xFF8
 12772                           tblptrh	equ	0xFF7
 12773                           tblptrl	equ	0xFF6
 12774                           tablat	equ	0xFF5
 12775                           prodh	equ	0xFF4
 12776                           prodl	equ	0xFF3
 12777                           intcon	equ	0xFF2
 12778                           intcon2	equ	0xFF1
 12779                           intcon3	equ	0xFF0
 12780                           postinc0	equ	0xFEE
 12781                           fsr0h	equ	0xFEA
 12782                           fsr0l	equ	0xFE9
 12783                           wreg	equ	0xFE8
 12784                           postdec1	equ	0xFE5
 12785                           plusw1	equ	0xFE3
 12786                           fsr1h	equ	0xFE2
 12787                           fsr1l	equ	0xFE1
 12788                           indf2	equ	0xFDF
 12789                           postinc2	equ	0xFDE
 12790                           postdec2	equ	0xFDD
 12791                           plusw2	equ	0xFDB
 12792                           fsr2h	equ	0xFDA
 12793                           fsr2l	equ	0xFD9
 12794                           status	equ	0xFD8
 12795                           
 12796                           	psect	rparam
 12797  0000                     pclatu	equ	0xFFB
 12798                           pclath	equ	0xFFA
 12799                           tblptru	equ	0xFF8
 12800                           tblptrh	equ	0xFF7
 12801                           tblptrl	equ	0xFF6
 12802                           tablat	equ	0xFF5
 12803                           prodh	equ	0xFF4
 12804                           prodl	equ	0xFF3
 12805                           intcon	equ	0xFF2
 12806                           intcon2	equ	0xFF1
 12807                           intcon3	equ	0xFF0
 12808                           postinc0	equ	0xFEE
 12809                           fsr0h	equ	0xFEA
 12810                           fsr0l	equ	0xFE9
 12811                           wreg	equ	0xFE8
 12812                           postdec1	equ	0xFE5
 12813                           plusw1	equ	0xFE3
 12814                           fsr1h	equ	0xFE2
 12815                           fsr1l	equ	0xFE1
 12816                           indf2	equ	0xFDF
 12817                           postinc2	equ	0xFDE
 12818                           postdec2	equ	0xFDD
 12819                           plusw2	equ	0xFDB
 12820                           fsr2h	equ	0xFDA
 12821                           fsr2l	equ	0xFD9
 12822                           status	equ	0xFD8
 12823                           
 12824                           	psect	temp
 12825  00007D                     btemp:
 12826                           	opt stack 0
 12827  00007D                     	ds	1
 12828  0000                     int$flags	set	btemp
 12829                           pclatu	equ	0xFFB
 12830                           pclath	equ	0xFFA
 12831                           tblptru	equ	0xFF8
 12832                           tblptrh	equ	0xFF7
 12833                           tblptrl	equ	0xFF6
 12834                           tablat	equ	0xFF5
 12835                           prodh	equ	0xFF4
 12836                           prodl	equ	0xFF3
 12837                           intcon	equ	0xFF2
 12838                           intcon2	equ	0xFF1
 12839                           intcon3	equ	0xFF0
 12840                           postinc0	equ	0xFEE
 12841                           fsr0h	equ	0xFEA
 12842                           fsr0l	equ	0xFE9
 12843                           wreg	equ	0xFE8
 12844                           postdec1	equ	0xFE5
 12845                           plusw1	equ	0xFE3
 12846                           fsr1h	equ	0xFE2
 12847                           fsr1l	equ	0xFE1
 12848                           indf2	equ	0xFDF
 12849                           postinc2	equ	0xFDE
 12850                           postdec2	equ	0xFDD
 12851                           plusw2	equ	0xFDB
 12852                           fsr2h	equ	0xFDA
 12853                           fsr2l	equ	0xFD9
 12854                           status	equ	0xFD8


Data Sizes:
    Strings     517
    Constant    18
    Data        18
    BSS         47
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    100     124
    BANK0           128     42      83
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_58(CODE[17]), STR_57(CODE[17]), STR_56(CODE[18]), STR_55(CODE[22]), 
		 -> STR_54(CODE[4]), STR_53(CODE[3]), STR_52(CODE[4]), STR_51(CODE[5]), 
		 -> STR_50(CODE[4]), STR_49(CODE[18]), STR_48(CODE[20]), STR_47(CODE[16]), 
		 -> STR_46(CODE[21]), STR_45(CODE[16]), STR_44(CODE[22]), STR_43(CODE[16]), 
		 -> STR_42(CODE[21]), STR_41(CODE[16]), STR_40(CODE[22]), STR_39(CODE[23]), 
		 -> STR_38(CODE[24]), STR_37(CODE[21]), STR_36(CODE[24]), STR_35(CODE[24]), 
		 -> STR_34(CODE[22]), STR_33(CODE[19]), STR_32(CODE[25]), STR_31(CODE[25]), 
		 -> STR_30(CODE[27]), STR_29(CODE[3]), STR_28(CODE[3]), STR_27(CODE[3]), 
		 -> STR_26(CODE[5]), STR_25(CODE[3]), STR_24(CODE[3]), STR_23(CODE[3]), 
		 -> STR_22(CODE[4]), STR_21(CODE[3]), STR_20(CODE[3]), STR_19(CODE[3]), 
		 -> STR_18(CODE[4]), STR_17(CODE[5]), STR_16(CODE[21]), STR_15(CODE[27]), 
		 -> STR_14(CODE[3]), STR_13(CODE[3]), STR_12(CODE[3]), STR_11(CODE[5]), 
		 -> STR_10(CODE[3]), STR_9(CODE[3]), STR_8(CODE[3]), STR_7(CODE[4]), 
		 -> STR_6(CODE[3]), STR_5(CODE[3]), STR_4(CODE[3]), STR_3(CODE[4]), 
		 -> STR_2(CODE[5]), STR_1(CODE[21]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    WriteRun@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(COMRAM[4]), mainloop@sorted(COMRAM[4]), 

    ReadRun@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> PermLog@sorted(COMRAM[4]), 

    ReadRun@time	PTR unsigned int  size(2) Largest target is 2
		 -> PermLog@time(COMRAM[2]), 

    check9@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(COMRAM[4]), mainloop@sorted(COMRAM[4]), 

    checkC@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(COMRAM[4]), mainloop@sorted(COMRAM[4]), 

    checkAA@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(COMRAM[4]), mainloop@sorted(COMRAM[4]), 

    stopMoving$595	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_49(CODE[18]), STR_48(CODE[20]), 

    PWMC@port	PTR int  size(2) Largest target is 6
		 -> AASpin@port(COMRAM[6]), CSpin@port(COMRAM[6]), V9Spin@port(COMRAM[6]), intrpt@port(COMRAM[6]), 

    getTime@time	PTR unsigned char  size(2) Largest target is 7
		 -> time(COMRAM[7]), 

    showInfo@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> PermLog@sorted(COMRAM[4]), simulate@sorted(COMRAM[4]), mainloop@sorted(COMRAM[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _intrpt in COMRAM

    _intrpt->_mainloop
    _intrpt->_simulate
    _testServo->_AASpin
    _testServo->_CSpin
    _testServo->_V9Spin
    _simulate->_check9
    _simulate->_checkAA
    _simulate->_checkC
    _mainloop->_check9
    _mainloop->_checkAA
    _mainloop->_checkC
    i2_getTime->i2_I2C_Master_Read
    i2_getTime->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    _stopMoving->i2_printf
    _checkC->_checkV
    _checkAA->_checkV
    _check9->_checkV
    _printV->i2_printf
    _checkV->___ftge
    ___ftmul->___awtoft
    ___ftge->___ftmul
    ___awtoft->___ftpack
    _WriteRun->i2___wmul
    _V9Spin->_PWMC
    _HexDecToDec2->i2___wmul
    _CSpin->_PWMC
    _AASpin->_PWMC
    _PWMC->___awdiv
    _PermLog->_showInfo
    _showInfo->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble
    _ReadRun->_back
    _ReadRun->i2_ReadEE

Critical Paths under _main in BANK0

    _main->_showRTC
    _showRTC->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _getTime->_I2C_Master_Read
    _getTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _initialize->_I2C_Master_Init
    _initLatest->_ReadEE
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _intrpt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _intrpt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _intrpt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _intrpt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _intrpt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _intrpt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _intrpt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _intrpt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _intrpt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _intrpt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _intrpt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _intrpt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _intrpt in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _intrpt in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _intrpt in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _intrpt in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   11533
                                             40 BANK0      2     2      0
                         _initialize
                            _lcdInst
                             _printf
                            _showRTC
 ---------------------------------------------------------------------------------
 (1) _showRTC                                              2     2      0    5550
                                             38 BANK0      2     2      0
                            _getTime
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              30    22      8    4904
                                             12 BANK0     26    18      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     593
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _getTime                                              3     1      2     511
                                              3 BANK0      3     1      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2     214
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0     944
                    _I2C_Master_Init
                            _initLCD
                         _initLatest
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _initLatest                                           0     0      0     298
                             _ReadEE
 ---------------------------------------------------------------------------------
 (3) _ReadEE                                               2     0      2     298
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _intrpt                                              23    23      0  174006
                                             77 COMRAM    23    23      0
                               _PWMC
                            _PermLog
                           _mainloop
                           _simulate
                         _stopMoving
                          _testServo
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (6) _testServo                                            2     2      0   14571
                                             29 COMRAM     2     2      0
                             _AASpin
                              _CSpin
                             _V9Spin
 ---------------------------------------------------------------------------------
 (6) _simulate                                            26    26      0   70661
                                             51 COMRAM    26    26      0
                             _AASpin
                              _CSpin
                       _HexDecToDec2
                             _V9Spin
                           _WriteRun
                             _check9
                            _checkAA
                             _checkC
                          _closeGate
                           _openGate
                           _showInfo
                         _stopMoving
                           i2___wmul
                          i2_getTime
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (6) _mainloop                                            26    26      0   70727
                                             51 COMRAM    26    26      0
                             _AASpin
                              _CSpin
                       _HexDecToDec2
                             _V9Spin
                           _WriteRun
                             _check9
                            _checkAA
                             _checkC
                          _closeGate
                           _openGate
                           _showInfo
                         _stopMoving
                           i2___wmul
                          i2_getTime
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) i2_getTime                                            3     1      2     309
                                              3 COMRAM     3     1      2
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Write                                   2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _stopMoving                                           3     3      0    3861
                                             34 COMRAM     3     3      0
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _openGate                                             2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) _closeGate                                            2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (7) _checkC                                               6     4      2   13230
                                             45 COMRAM     6     4      2
                             _checkV
                             _printV
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _checkAA                                              6     4      2   13230
                                             45 COMRAM     6     4      2
                             _checkV
                             _printV
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _check9                                               6     4      2   13230
                                             45 COMRAM     6     4      2
                             _checkV
                             _printV
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) _printV                                               2     0      2    3894
                                             34 COMRAM     2     0      2
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) _checkV                                               9     7      2    5439
                                             36 COMRAM     9     7      2
                                 _AD
                           ___awtoft
                             ___ftge
                            ___ftmul
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             15     9      6    2548
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftge                                               9     3      6     264
                                             27 COMRAM     9     3      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             4     1      3    2211
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    1992
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) _AD                                                   5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (7) _WriteRun                                             8     4      4    1801
                                              6 COMRAM     8     4      4
                            _WriteEE
                           i2___wmul
 ---------------------------------------------------------------------------------
 (8) _WriteEE                                              3     0      3     834
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (7) _V9Spin                                               8     8      0    4857
                                             21 COMRAM     8     8      0
                               _PWMC
 ---------------------------------------------------------------------------------
 (7) _HexDecToDec2                                         9     7      2    1019
                                              6 COMRAM     9     7      2
                           i2___wmul
 ---------------------------------------------------------------------------------
 (7) _CSpin                                                8     8      0    4857
                                             21 COMRAM     8     8      0
                               _PWMC
 ---------------------------------------------------------------------------------
 (7) _AASpin                                               8     8      0    4857
                                             21 COMRAM     8     8      0
                               _PWMC
 ---------------------------------------------------------------------------------
 (8) _PWMC                                                40    34      6    4743
                                              8 COMRAM    13     7      6
                            ___awdiv
 ---------------------------------------------------------------------------------
 (9) ___awdiv                                              8     4      4     428
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (6) _PermLog                                             11    11      0    9100
                                             47 COMRAM    11    11      0
                            _ReadRun
                      _captureKeypad
                           _showInfo
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _showInfo                                            13     9      4    4446
                                             34 COMRAM    13     9      4
                      _captureKeypad
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) i2_printf                                            26    22      4    3658
                                             12 COMRAM    22    18      4
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (8) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (8) i2___wmul                                             6     2      4     417
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (8) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _captureKeypad                                        3     1      2      23
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (7) _ReadRun                                             11     7      4     618
                                              2 COMRAM    11     7      4
                               _back
                           i2_ReadEE
 ---------------------------------------------------------------------------------
 (8) i2_ReadEE                                             2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _back                                                 2     2      0      68
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialize
     _I2C_Master_Init
       ___lldiv
     _initLCD
       _lcdInst
         _lcdNibble
     _initLatest
       _ReadEE
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
   _showRTC
     _getTime
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble

 _intrpt (ROOT)
   _PWMC
     ___awdiv
   _PermLog
     _ReadRun
       _back
       i2_ReadEE
     _captureKeypad
     _showInfo
       _captureKeypad
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _mainloop
     _AASpin
       _PWMC
         ___awdiv
     _CSpin
       _PWMC
         ___awdiv
     _HexDecToDec2
       i2___wmul
     _V9Spin
       _PWMC
         ___awdiv
     _WriteRun
       _WriteEE
       i2___wmul
     _check9
       _checkV
         _AD
         ___awtoft
           ___ftpack
         ___ftge
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       _printV
         i2_printf
           i2___lwdiv
           i2___lwmod
             i2___lwdiv (ARG)
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _checkAA
       _checkV
         _AD
         ___awtoft
           ___ftpack
         ___ftge
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       _printV
         i2_printf
           i2___lwdiv
           i2___lwmod
             i2___lwdiv (ARG)
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _checkC
       _checkV
         _AD
         ___awtoft
           ___ftpack
         ___ftge
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       _printV
         i2_printf
           i2___lwdiv
           i2___lwmod
             i2___lwdiv (ARG)
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _closeGate
     _openGate
     _showInfo
       _captureKeypad
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _stopMoving
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2___wmul
     i2_getTime
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _simulate
     _AASpin
       _PWMC
         ___awdiv
     _CSpin
       _PWMC
         ___awdiv
     _HexDecToDec2
       i2___wmul
     _V9Spin
       _PWMC
         ___awdiv
     _WriteRun
       _WriteEE
       i2___wmul
     _check9
       _checkV
         _AD
         ___awtoft
           ___ftpack
         ___ftge
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       _printV
         i2_printf
           i2___lwdiv
           i2___lwmod
             i2___lwdiv (ARG)
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _checkAA
       _checkV
         _AD
         ___awtoft
           ___ftpack
         ___ftge
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       _printV
         i2_printf
           i2___lwdiv
           i2___lwmod
             i2___lwdiv (ARG)
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _checkC
       _checkV
         _AD
         ___awtoft
           ___ftpack
         ___ftge
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       _printV
         i2_printf
           i2___lwdiv
           i2___lwmod
             i2___lwdiv (ARG)
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _closeGate
     _openGate
     _showInfo
       _captureKeypad
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _stopMoving
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2___wmul
     i2_getTime
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _stopMoving
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _testServo
     _AASpin
       _PWMC
         ___awdiv
     _CSpin
       _PWMC
         ___awdiv
     _V9Spin
       _PWMC
         ___awdiv
   i2_lcdInst
     i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2A      53       5       64.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     64      7C       1       98.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      CF      34        0.0%
DATA                 0      0      CF       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Apr 10 15:20:56 2017

         i2_I2C_Master_Start 286A           i2_I2C_Master_Write 2848                           _AD 2622  
               ___awdiv@sign 0006          ___wmul@multiplicand 0082           i2___lwdiv@dividend 0001  
                __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                  __CFG_OSC$HS 000000  
                        ?_AD 0001                          l445 27CE                          l493 27B0  
                        l959 1A16                 __CFG_CPB$OFF 000000                          _PEN 007E2A  
               __CFG_CPD$OFF 000000                          _SEN 007E28          ?i2_I2C_Master_Start 0001  
        ?i2_I2C_Master_Write 0002                          wreg 000FE8                         ??_AD 0003  
               __CFG_LVP$OFF 000000                 __CFG_WDT$OFF 000000                         l1012 1F88  
                       l1022 2226                         l4065 1E4A                         l4075 1E78  
                       l4069 1E54                         l3703 1F7A                         l3711 21E2  
                       l3713 21EE                         l3801 0034                         l3571 25C4  
                       l3715 21F4                         l3803 0046                         l3653 2618  
                       l3821 00F8                         l3813 0080                         l3671 19AA  
                       l3719 2218                         l3903 02E0                         l3831 0136  
                       l3823 00FE                         l3807 0050                         l3681 1A04  
                       l3673 19B0                         l3921 0358                         l3833 014E  
                       l3691 1F38                         l3923 0364                         l3931 0392  
                       l3915 033C                         l3907 0318                         l3843 0192  
                       l3827 0124                         l3669 199A                         l3693 1F44  
                       l3933 0398                         l3941 0432                         l3909 0322  
                       l3861 0212                         l3837 0162                         l3829 0130  
                       l4709 23DA                         l3695 1F4A                         l3935 03E4  
                       l3943 044A                         l3927 037E                         l3839 017A  
                       l3847 019A                         l3945 0452                         l3881 0270  
                       l3865 022E                         l3849 01D2                         l3867 0234  
                       l3947 045E                         l3797 0020                         l3879 026A  
                       l3895 02A6                         l3897 02BE                         _ADFM 007E07  
                       _ADON 007E10                         STR_1 FF3C                         STR_2 FFDA  
                       STR_3 FFF1                         STR_4 FFF5                         STR_5 FFF8  
                       STR_6 FFFB                         STR_7 FFED                         STR_8 FFF5  
                       STR_9 FFF8                         _LATA 000F89                         _LATB 000F8A  
                       _LATC 000F8B                         _LATD 000F8C                         _LATE 000F8D  
                       u2640 25C2                         u3717 23BC                         u3727 1DFC  
                       u3737 2478                         u2875 2260                         u3747 24AC  
                       _RCEN 007E2B                         u3757 2186                         u3767 2190  
                       u3777 21BC                         u3787 21C6                         _PWMC 16AE  
              checkAA@sorted 002E                         _back 2784                         _main 2394  
               ___ftpack@arg 0001                         _mode 0074                 ___ftpack@exp 0004  
                       _time 0076                         fsr0h 000FEA                         fsr1h 000FE2  
         i2___lwdiv@quotient 0005                         fsr2h 000FDA                         fsr0l 000FE9  
                       indf2 000FDF                         fsr1l 000FE1                         fsr2l 000FD9  
                       btemp 007D         ??i2_I2C_Master_Start 0002         ??i2_I2C_Master_Write 0004  
                       prodh 000FF4                         prodl 000FF3              ReadRun@backruns 000B  
                       start 000E                __CFG_IESO$OFF 000000         __end_of_HexDecToDec2 242A  
                 ReadRun@add 000C              __end_ofi2_putch 2832                __CFG_MCLRE$ON 000000  
               ___ftmul@cntr 001A                 ___param_bank 000000                 ___ftmul@sign 001B  
                 i2getTime@i 0006                  i2_lcdNibble 22EC              __end_of_ReadRun 15BA  
            __end_of_PermLog 196C             ?_I2C_Master_Init 008D             ?_I2C_Master_Read 0001  
                      ?_PWMC 0009             ?_I2C_Master_Wait 0001             ?_I2C_Master_Stop 0001  
                      ?_back 0001                        ?_main 0001                        _ACKEN 007E2C  
                      _ACKDT 007E2D              __end_of___awdiv 1F1A                        _EEADR 000FA9  
                      STR_10 FFFB                        STR_11 FFE4                        STR_20 FFF8  
                      STR_12 FFF8                        STR_13 FFF5                        STR_21 FFFB  
                      STR_30 FDF9                        STR_14 FFFB                        STR_22 FFED  
                      STR_23 FFF5                        STR_31 FE14                        STR_15 FDF9  
                      STR_16 FF3C                        STR_24 FFF8                        STR_40 FEBB  
                      STR_32 FE2D                        STR_17 FFDA                        STR_25 FFFB  
                      STR_41 FFCF                        STR_33 FF65                        STR_26 FFE4  
                      STR_18 FFF1                        STR_50 FFE9                        STR_42 FEFD  
                      STR_34 FEE7                        STR_43 FFCF                        STR_19 FFF5  
                      STR_27 FFF8                        STR_51 FFDF                        STR_35 FE76  
                      STR_28 FFF5                        STR_52 FFE5                        STR_44 FED1  
                      STR_36 FE46                        STR_45 FFCF                        STR_29 FFFB  
                      STR_53 FFEE                        STR_37 FF27                        STR_54 FFF1  
                      STR_46 FF12                        STR_38 FE5E                        STR_47 FFCF  
                      STR_55 FEA5                        STR_39 FE8E                        STR_56 FF78  
                      STR_48 FF51                        STR_57 FFAD                        STR_49 FF8A  
                      STR_58 FFBE                        STR_59 FF9C              __end_of_WriteEE 26C0  
            __end_of___lldiv 1A28              __end_of___ftmul 16AE              ___awdiv@divisor 0003  
                      _LATC0 007C58                        _LATB2 007C52                        _LATC1 007C59  
                      _LATC2 007C5A                        _LATC5 007C5D                        _LATC6 007C5E  
                      _LATC7 007C5F              __end_of___lwdiv 1F92                        i2l120 0CCC  
            __end_of___lwmod 2230                        i2l116 0C7C                        i2l141 0898  
                      i2l400 215C                        i2l307 16E6                        i2l413 20BC  
                      i2l173 1074                        i2l414 20EA                        i2l406 2046  
                      i2l407 2074                        i2l191 10C2                        i2l256 2768  
                      i2l352 252E                        i2l176 0EBA                        i2l186 0F4A  
                      i2l259 2774                        i2l187 0F56                        i2l516 1964  
                      i2l188 0F76                        i2l445 27F4                        i2l197 10C0  
                      i2l378 2630                        i2l387 17DC                        i2l493 27C6  
                      i2l499 26B6                        i2l829 1CD2              ___awdiv@counter 0005  
            __end_of_checkAA 2166                        _PORTB 000F81                        _CSpin 1ADC  
                      _TRISA 000F92                        _TRISB 000F93                        _TRISC 000F94  
                      _TRISD 000F95                        _TRISE 000F96                __CFG_PWRT$OFF 000000  
              __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000                simulate@F3110 0065  
              simulate@F3112 00B8                simulate@F3114 00B4                __CFG_WRT2$OFF 000000  
              __CFG_WRT3$OFF 000000              __end_of_lcdInst 2826               __CFG_EBTR0$OFF 000000  
             __CFG_FCMEN$OFF 000000              __end_of_getTime 1E96               __CFG_EBTR1$OFF 000000  
             __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000  
              __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000              __end_of_initLCD 24B6  
             __CFG_EBTRB$OFF 000000                   i2isdigit@c 0003                ___awtoft@sign 000C  
            __end_of_dpowers FDF1             __end_ofi2_ReadEE 27CE              __end_of_isdigit 2622  
                      _shake 0071                ___ftpack@sign 0005                        _putch 2806  
                      pclath 000FFA              __end_of_showRTC 1E0C                        tablat 000FF5  
           __end_ofi2___wmul 26E6                        plusw1 000FE3                        plusw2 000FDB  
                      status 000FD8                simulate@start 003D               __CFG_PBADEN$ON 000000  
              i2printf@width 0020             __end_ofi2_printf 0816           __size_ofi2___lwdiv 0052  
         __size_ofi2___lwmod 0042                _mainloop$1539 0037                  ReadRun@time 0005  
               __end_of_PWMC 17A0              __initialization 242A                 __end_of_back 27A0  
         __size_ofi2_lcdInst 000C                 __end_of_main 23E2           __size_ofi2_getTime 0076  
                 i2printf@ap 0018                   i2printf@cp 0015                ReadEE@address 0080  
                mainloop@now 0039           __size_ofi2_isdigit 001E                       ??_PWMC 000F  
             mainloop@period 0042               mainloop@notyet 0041                       ??_back 0001  
             mainloop@sorted 0044                       ??_main 00A8                __activetblptr 000002  
                     ?_CSpin 0001                checkV@channel 002B            ?_I2C_Master_Start 0001  
          ?_I2C_Master_Write 0081           ??_I2C_Master_Start 0081                       _ADCON0 000FC2  
                     _ADCON1 000FC1           ??_I2C_Master_Write 0083                       _ADRESH 000FC4  
                     _EEADRH 000FAA                       _ADRESL 000FC3                       _EEDATA 000FA8  
                     _EECON2 000FA7             ___awdiv@dividend 0001              i2lcdNibble@data 0002  
           __end_of___awtoft 2568                       ?_putch 0001             __end_of___ftpack 1CF2  
                     _AASpin 1B90              i2lcdNibble@temp 0001                       _INT1IE 007F83  
                     _INT1IF 007F80             __end_of_WriteRun 1488                       _INT2IE 007F84  
                     _INT2IF 007F81                       _CVRCON 000FB5                       i2l1012 238A  
                     i2l1022 24EE                       i2l3101 1CBE                       i2l3103 1CC8  
                     i2l4011 1A8C                       i2l4003 1A42                       i2l4005 1A60  
                     i2l3151 2364                       i2l4031 1B40                       i2l4023 1AF6  
                     i2l3311 2544                       i2l3223 160A                       i2l3137 275E  
                     i2l4025 1B14                       i2l4017 1ABE                       i2l4009 1A7E  
                     i2l3241 164C                       i2l3217 15E2                       i2l3147 2358  
                     i2l3171 24D0                       i2l3403 0618                       i2l4051 1BF4  
                     i2l4043 1BAA                       i2l3091 1C62                       i2l3323 1D52  
                     i2l3251 1674                       i2l3149 2360                       i2l3421 0662  
                     i2l3501 16D8                       i2l4045 1BC8                       i2l4037 1B72  
                     i2l4029 1B32                       i2l4117 1348                       i2l3093 1C6C  
                     i2l3237 163C                       u205_41 15CA                       i2l3159 2380  
                     i2l3175 24E4                       i2l3167 24C4                       i2l3423 0666  
                     i2l3407 0632                       i2l3343 0496                       i2l4151 1132  
                     i2l3095 1C8A                       i2l3087 1C54                       i2l3319 1D22  
                     i2l3247 1664                       i2l4231 1FD0                       i2l3169 24CC  
                     i2l3409 0636                       i2l3345 04A4                       i2l4153 1140  
                     i2l3281 1ED8                       i2l3273 1EBA                       i2l3521 1740  
                     i2l3513 1710                       i2l4057 1C26                       i2l4049 1BE6  
                     i2l3329 1D7E                       i2l3451 06EE                       i2l3371 055A  
                     i2l3363 0536                       i2l3355 04D8                       i2l3339 0486  
                     i2l4171 1226                       i2l3291 1EF8                       i2l3283 1EDC  
                     i2l3267 1EAA                       i2l3531 177A                       i2l3099 1CA0  
                     i2l4227 1FC8                       i2l4315 0C1A                       i2l3445 06C2  
                     i2l3437 0692                       i2l3381 0596                       i2l3373 0560  
                     i2l3365 053A                       i2l3349 04AA                       i2l4165 11EE  
                     i2l4237 1FEC                       i2l4317 0C1E                       i2l4501 09EC  
                     i2l3463 071A                       i2l3439 06A8                       i2l3375 0572  
                     i2l3391 05E2                       i2l4183 129E                       i2l4159 116E  
                     i2l4191 12E4                       i2l3279 1ED0                       i2l3295 1F02  
                     i2l3535 1788                       i2l3607 265E                       i2l4351 0CC0  
                     i2l3641 279C                       i2l3465 0722                       i2l3473 0748  
                     i2l3457 0704                       i2l3449 06E6                       i2l3385 05A8  
                     i2l3369 0550                       i2l4177 1262                       i2l4193 131C  
                     i2l3529 1770                       i2l4097 2514                       i2l4345 0CA4  
                     i2l4337 0C70                       i2l4329 0C50                       i2l3475 074E  
                     i2l3483 07D8                       i2l3379 0584                       i2l3299 1F10  
                     i2l3539 1798                       i2l4515 0A14                       i2l4611 0EC6  
                     i2l3477 0792                       i2l3485 07EE                       i2l3469 0736  
                     i2l3389 05AE                       i2l4189 12DA                       u207_41 15F2  
                     i2l3581 17C0                       i2l4365 0D10                       i2l4453 0906  
                     i2l3487 07F4                       i2l3583 17C6                       i2l4391 0DEC  
                     i2l4367 0D1C                       i2l4359 0CF4                       i2l4471 094C  
                     i2l4455 090A                       i2l4535 0AD4                       i2l4631 0F96  
                     i2l3489 07FC                       i2l3593 1828                       i2l4377 0D3C  
                     i2l4529 0AC4                       i2l4481 0980                       i2l4473 0958  
                     i2l4465 0932                       i2l4617 0F08                       i2l4609 0EC0  
                     i2l4571 1894                       i2l3747 2694                       i2l4299 0BAE  
                     i2l4395 0DEE                       i2l4485 0996                       i2l4469 0946  
                     i2l4565 25CC                       i2l4653 1004                       i2l4583 18DC  
                     i2l3599 1886                       i2l4495 09CA                       i2l4487 09A2  
                     i2l4647 0FEE                       i2l4639 0FDE                       i2l4663 1016  
                     i2l3961 20AE                       i2l3963 20CC                       i2l4499 09E0  
                     i2l4683 10A8                       i2l4659 1012                       i2l4667 105C  
                     i2l4677 1098                       i2l4599 1960                       i2l3991 212E  
                     i2l3975 2038                       i2l3993 213E                       i2l3977 2056  
                     i2l3989 2124                    ??i2_putch 0003                       _SSPADD 000FC8  
                     _V9Spin 1A28                       _TRISC3 007CA3                       _TRISC4 007CA4  
                     _SSPBUF 000FC9                    AD@channel 0005                checkV@voltage 002C  
                  ??_ReadRun 0007                       _ReadEE 27A0                    ??_PermLog 0030  
                     _Latest 00C0               __CFG_XINST$OFF 000000        __end_of_captureKeypad 2784  
                     ___ftge 1CF2                       ___wmul 2568                       _check9 207E  
                     _checkC 2008                    ??___awdiv 0005                       _checkV 17A0  
             __CFG_STVREN$ON 000000                    ??_WriteEE 0004                    ??___lldiv 0088  
                  ??___ftmul 0013             __end_of_mainloop 0E5E                    ??___lwdiv 0084  
                  ??___lwmod 008B                    ??_checkAA 0030                       clear_0 2450  
                     clear_1 245C             ___awdiv@quotient 0007                       _intrpt 0008  
                     _printV 264C                    ??_lcdInst 0082                       _printf 0012  
                  ??_getTime 0085             __end_of_openGate 2728        ___ftmul@f3_as_product 0017  
                PermLog@time 0037                    ??_initLCD 0083                    ??_isdigit 0080  
           __end_of_showInfo 1326            __end_ofi2___lwdiv 2394                 __mediumconst FDE6  
          __end_ofi2___lwmod 24F8                       tblptrh 000FF7                       tblptrl 000FF6  
                     tblptru 000FF8             __end_of_simulate 0B44                    ??_showRTC 00A6  
          __end_ofi2_lcdInst 283E            __end_ofi2_getTime 2008               simulate@period 0042  
             simulate@notyet 0041        __size_of_HexDecToDec2 0048            __end_ofi2_isdigit 2766  
             simulate@sorted 0044                   __accesstop 0080      __end_of__initialization 2462  
                 ___ftge@ff1 001C                   ___ftge@ff2 001F                ___rparam_used 000001  
                 ___awtoft@c 0009                __end_of_CSpin 1B90                   ___ftmul@f1 000D  
                 ___ftmul@f2 0010           i2___lwmod@dividend 0008               __pcstackCOMRAM 0001  
               __pidataBANK0 27E2                    ?i2_ReadEE 0001                __end_of_putch 2816  
                i2printf@idx 0017                  i2printf@len 001A                  i2printf@val 001D  
                 __end_of_AD 264C                    ?i2___wmul 0001           __size_of_lcdNibble 0068  
                i2putch@data 0003                      ??_CSpin 0016              mainloop@shakeCW 0036  
               _HexDecToDec2 23E2           __size_of_closeGate 0020            HexDecToDec2@digit 000E  
                  ?i2_printf 000D            HexDecToDec2@tenth 000C                  intrpt@F3131 00AA  
                    ??_putch 0082                   back@result 0002                      ?_AASpin 0001  
                 __pbssBANK0 00AA                      ?_V9Spin 0001                      ?_ReadEE 0080  
               stopMoving@em 0025                      ?___ftge 001C                 WriteRun@time 0009  
               ?i2_lcdNibble 0001                      ?___wmul 0080                      ?_check9 002E  
                    ?_checkC 002E                      ?_checkV 0025                   ??i2_ReadEE 0003  
                    ?_intrpt 0001                    ?___awtoft 0009                    ?___ftpack 0001  
                    ?_printV 0023                      ?_printf 008C                    ?_WriteRun 0007  
                 ??i2___wmul 0005               WriteRun@sorted 0007                      _INTEDG2 007F8C  
         __size_of_testServo 002C                   ??i2_printf 0011                    CSpin@mode 0017  
                  CSpin@port 0018                      _SSPCON1 000FC6                      _SSPCON2 000FC5  
                    _SSPSTAT 000FC7              __size_of_AASpin 00B4                    ?_mainloop 0001  
                    i2_putch 2826              __size_of_V9Spin 00B4               _stopMoving$595 0023  
__size_ofi2_I2C_Master_Start 0008            __end_of_lcdNibble 21CE                      _ReadRun 1488  
__size_ofi2_I2C_Master_Write 000A                    ?_openGate 0001                      _PermLog 1890  
                    __Hparam 0000              __size_of_ReadEE 0018                      __Lparam 0000  
          __end_of_closeGate 2748                   _initLatest 26E6                    ?_showInfo 0023  
            __size_of___ftge 0090                    ?_simulate 0001                      ___awdiv 1E96  
                    _WriteEE 269A                      ___lldiv 196C              __size_of___wmul 0036  
                    ___ftmul 15BA              __size_of_check9 0076              __size_of_checkC 0076  
            __size_of_checkV 00F0                      ___lwdiv 1F1A                      ___lwmod 21CE  
                    _checkAA 20F4                      __pcinit 242A                   ??___awtoft 000C  
                 ??___ftpack 0006                      __ramtop 1000                   _initialize 2290  
            __size_of_intrpt 10F6                      _lcdInst 2816                   ??_WriteRun 000B  
                    __ptext0 2394                      __ptext1 1D82                      __ptext2 0012  
                    __ptext3 2806                      _getTime 1E0C                      __ptext4 25F8  
                    __ptext5 2568                      __ptext6 21CE                      __ptext7 1F1A  
                    __ptext8 1E0C                      __ptext9 283E              __size_of_printV 0028  
               PermLog@F3082 00B0              __size_of_printf 046A                      check9@V 0032  
                    checkC@V 0032                      _initLCD 2470            __end_of_hexpowers FDF9  
                    _dpowers FDE7                      _isdigit 25F8     __size_of_I2C_Master_Init 0060  
   __size_of_I2C_Master_Read 002E                      _showRTC 1D82     __size_of_I2C_Master_Wait 0014  
   __size_of_I2C_Master_Stop 0008               __pintcode_body 0E5E         end_of_initialization 2462  
                 ??_mainloop 0034                __Lmediumconst FDE6                      int_func 0E5E  
                 AASpin@mode 0017          i2___wmul@multiplier 0001                   AASpin@port 0018  
                V9Spin@F3059 00CD    __size_of_I2C_Master_Start 0008                   ??_openGate 0001  
  __size_of_I2C_Master_Write 000A              ___lldiv@divisor 0084            __end_of_testServo 25F8  
            ___lldiv@counter 008C                    _PWMC$1440 0011                    _PWMC$1441 0012  
                  _PWMC$1442 0013                   ??_showInfo 0027                      printf@c 00A5  
                    printf@f 008C             I2C_Master_Init@c 008D             I2C_Master_Read@a 0081  
                    postdec1 000FE5                      postdec2 000FDD                   ??_simulate 0034  
                    postinc0 000FEE                      postinc2 000FDE             checkV@threshhold 0025  
                  _PORTBbits 000F81              simulate@shakeCW 0036                  PWMC@widthus 0009  
          i2_I2C_Master_Read 2674            i2_I2C_Master_Wait 27F4            i2_I2C_Master_Stop 2862  
          i2___lwdiv@divisor 0003                    i2___lwdiv 2342                    i2___lwmod 24B6  
          i2___lwdiv@counter 0007           ?i2_I2C_Master_Read 0001           ?i2_I2C_Master_Wait 0001  
         ?i2_I2C_Master_Stop 0001               __end_of_AASpin 1C44                    i2_lcdInst 2832  
                  i2_getTime 1F92                  printf@width 00A3              PermLog@backruns 0039  
                 _stopMoving 24F8               __end_of_V9Spin 1ADC          ??i2_I2C_Master_Read 0002  
                  i2_isdigit 2748          ??i2_I2C_Master_Wait 0001          ??i2_I2C_Master_Stop 0002  
              ReadRun@sorted 0003                  simulate@now 0039                 check9@sorted 002E  
                ___ftmul@exp 0016               __end_of_ReadEE 27B8                  ?_initLatest 0001  
             __end_of___ftge 1D82               __end_of___wmul 259E               __end_of_check9 20F4  
             __end_of_checkC 207E               __end_of_checkV 1890         __size_ofi2_lcdNibble 0056  
              mainloop@F3100 00BC                mainloop@F3096 006D                mainloop@F3098 0069  
                ?_initialize 0001                i2lcdInst@data 0003                 checkC@sorted 002E  
          __size_ofi2_ReadEE 0016               __end_of_intrpt 10FE             i2___wmul@product 0005  
             __end_of_printV 2674               __end_of_printf 047C                 i2printf@flag 001F  
            i2ReadEE@address 0001    __end_ofi2_I2C_Master_Read 269A    __end_ofi2_I2C_Master_Wait 2806  
               i2printf@prec 001C          start_initialization 242A    __end_ofi2_I2C_Master_Stop 286A  
          __size_ofi2___wmul 0026                   mainloop@AA 004C                   mainloop@V9 004A  
                  i2printf@c 0022                    i2printf@f 000D       __size_of_captureKeypad 001E  
      i2I2C_Master_Read@temp 0003                i2getTime@time 0004                mainloop@start 003D  
                 ?i2___lwdiv 0001                   ?i2___lwmod 0008                     ??_AASpin 0016  
          __size_ofi2_printf 039A            ??_I2C_Master_Init 0091            ??_I2C_Master_Read 0081  
          ??_I2C_Master_Wait 0080                   ?i2_lcdInst 0001            ??_I2C_Master_Stop 0081  
                 ?i2_getTime 0004                     ??_V9Spin 0016                   ?i2_isdigit 0001  
                   ??_ReadEE 0082                     ??___ftge 0022                     ??___wmul 0084  
                   ??_check9 0030                     ??_checkC 0030                     ??_checkV 0027  
                __pdataBANK0 00C1             __CFG_LPT1OSC$OFF 000000                     ??_intrpt 004E  
                   ??_printV 0025                     ??_printf 0094                  WriteEE@data 0003  
          __size_of___awtoft 0038            __size_of___ftpack 00AE            __size_of_WriteRun 0162  
                __pbssCOMRAM 0065                __pcstackBANK0 0080            i2___lwmod@divisor 000A  
          i2___lwmod@counter 000C                 _isdigit$1098 0081          __size_of_initLatest 0022  
                   ?i2_putch 0001               intrpt@keypress 005E          __size_of_initialize 005C  
          __size_of_mainloop 031A                  ?_stopMoving 0001             _I2C_Master_Start 285A  
                   ?_ReadRun 0003          i2I2C_Master_Write@d 0002             _I2C_Master_Write 283E  
                   ?_PermLog 0001             ___lwdiv@dividend 0080            __CFG_CCP2MX$PORTC 000000  
                 intrpt@port 005F                  WriteRun@add 000D                _captureKeypad 2766  
                  __pintcode 0008            __size_of_openGate 0020                __pmediumconst FDE6  
                  _lcdNibble 2166                     ?___awdiv 0001                     ?_WriteEE 0001  
                   ?___lldiv 0080                     ?___ftmul 000D                     ?___lwdiv 0080  
                   ?___lwmod 0087            __size_of_showInfo 0228                     ?_checkAA 002E  
                  _closeGate 2728            __size_of_simulate 032E                     ?_lcdInst 0001  
                   ?_getTime 0083                     PWMC@port 000D                     ?_initLCD 0001  
                   ?_isdigit 0001               __size_of_CSpin 00B4   __size_ofi2_I2C_Master_Read 0026  
 __size_ofi2_I2C_Master_Wait 0012   __size_ofi2_I2C_Master_Stop 0008                    checkV@tmp 0029  
                   ?_showRTC 0001                    _hexpowers FDF1             ___lwdiv@quotient 0084  
                ??i2___lwdiv 0005                  ??i2___lwmod 000C               __size_of_putch 0010  
                __size_of_AD 002A                   CSpin@F3063 00C7   __end_ofi2_I2C_Master_Start 2872  
 __end_ofi2_I2C_Master_Write 2852                  ??i2_lcdInst 0003                  ??i2_getTime 0006  
             ___wmul@product 0084                     _LATDbits 000F8C                  ??i2_isdigit 0001  
                   i2u315_41 1A34                     i2u323_45 23EE                     i2u252_45 1718  
                   i2u252_46 171A                     i2u317_41 1AE8                     i2u326_40 133C  
                   i2u343_40 0DE4                     i2u319_41 1B9C                     i2u255_45 1748  
                   i2u255_46 174A                     i2u258_45 1778                     i2u258_46 177A  
             ?_captureKeypad 0001                     _PIR2bits 000FA1                     i2u284_40 2692  
                   i2u380_47 0F84                     i2u365_41 0EA8                     i2u381_47 1084  
                   i2u358_40 0ABC                     i2u390_47 1A92                     i2u382_47 25E8  
                   i2u367_40 0F52                     i2u391_47 1B46                     i2u383_47 0880  
                   i2u392_47 1BFA                     i2u384_47 0B18                     i2u393_47 178A  
                   i2u385_47 0E32                     i2u394_47 193C                     i2u386_47 2716  
                   i2u395_47 2304                     i2u387_47 2736                     i2u379_47 0F64  
                   i2u396_47 230E                     i2u388_47 17CC                     i2u397_47 2330  
                   i2u389_47 17EA                     i2u398_47 233A             __CFG_WDTPS$32768 000000  
                 PWMC@cycles 000B                   ?_lcdNibble 0001                   V9Spin@mode 0017  
                  _testServo 25CC                   V9Spin@port 0018                     i2_ReadEE 27B8  
                 ?_closeGate 0001                   _ADCON0bits 000FC2            ___wmul@multiplier 0080  
                   i2___wmul 26C0                lcdNibble@data 0081                   printf@flag 00A2  
              lcdNibble@temp 0080                   printf@prec 009F                   simulate@AA 004C  
        __size_of_stopMoving 0038                   simulate@V9 004A                     i2_printf 047C  
      captureKeypad@keypress 0003          I2C_Master_Read@temp 0082                    copy_data0 243E  
                  mainloop@C 0048             __size_ofi2_putch 000C                   _EECON1bits 000FA6  
             showInfo@sorted 0025                     __Hrparam 0000             __size_of_ReadRun 0132  
                   __Lrparam 0000             __size_of_PermLog 00DC                 ??_initLatest 0082  
         __CFG_BOREN$SBORDIS 000000                   ?_testServo 0001             __size_of___awdiv 0084  
      i2___wmul@multiplicand 0003             __size_of_WriteEE 0026             __size_of___lldiv 00BC  
           __size_of___ftmul 00F4             __size_of___lwdiv 0078             __size_of___lwmod 0062  
               ??_initialize 0095                     ___awtoft 2530                     ___ftpack 1C44  
           __size_of_checkAA 0072                     _WriteRun 1326           i2I2C_Master_Read@a 0002  
           __size_of_lcdInst 0010             __size_of_getTime 008A              HexDecToDec2@hex 0007  
            _I2C_Master_Init 2230              _I2C_Master_Read 259E             __size_of_initLCD 0046  
                   back@runs 0001                ?_HexDecToDec2 0007              _I2C_Master_Wait 27CE  
            _I2C_Master_Stop 2852             __size_of_isdigit 002A              ___lwdiv@divisor 0082  
            ___lwdiv@counter 0086                     __ptext10 2852                     __ptext11 285A  
                   __ptext20 2230                     __ptext12 259E                     __ptext21 196C  
                   __ptext13 27CE                     __ptext30 2674                     __ptext14 2290  
                   __ptext31 27F4                     __ptext23 25CC                     __ptext15 26E6  
                   __ptext40 15BA                     __ptext32 24F8                     __ptext24 0816  
                   __ptext16 27A0                     __ptext41 1CF2                     __ptext33 2708  
                   __ptext25 0B44                     __ptext17 2470                     __ptext50 1B90  
                   __ptext42 2530                     __ptext34 2728                     __ptext26 1F92  
                   __ptext18 2816                     __ptext51 16AE                     __ptext43 1C44  
                   __ptext35 2008                     __ptext27 2848                     __ptext19 2166  
                   __ptext60 2342                     __ptext52 1E96                     __ptext44 2622  
                   __ptext36 20F4                     __ptext28 2862                     __ptext61 2832  
                   __ptext53 1890                     __ptext45 1326                     __ptext37 207E  
                   __ptext29 286A                     __ptext62 22EC                     __ptext54 10FE  
                   __ptext46 269A                     __ptext38 264C                     __ptext63 2766  
                   __ptext55 047C                     __ptext47 1A28                     __ptext39 17A0  
                   __ptext64 1488                     __ptext56 2826                     __ptext48 23E2  
                   __ptext65 27B8                     __ptext57 2748                     __ptext49 1ADC  
                   __ptext66 2784                     __ptext58 26C0                     __ptext59 24B6  
           __size_of_showRTC 008A           __end_of_initLatest 2708                     checkAA@V 0032  
              __size_of_PWMC 00F2               i2_isdigit$1098 0002                     _mainloop 0B44  
              __size_of_back 001C                __size_of_main 004E           __end_of_initialize 22EC  
            ??_captureKeypad 0003                     _openGate 2708                     _showInfo 10FE  
              ??i2_lcdNibble 0001                  ??_lcdNibble 0080                     getTime@i 0085  
                   _simulate 0816                     int$flags 007D                  ??_closeGate 0001  
                  printf@idx 009A                    printf@len 009D                    printf@val 00A0  
                  simulate@C 0048                  AASpin@F3067 00C1                PermLog@goback 0036  
             ??_HexDecToDec2 0009                    putch@data 0082     __end_of_I2C_Master_Start 2862  
   __end_of_I2C_Master_Write 2848                   _INTCONbits 000FF2                PermLog@sorted 0032  
              PWMC@countdown 0014                     isdigit@c 0082                _simulate$1540 0037  
                   intlevel2 0000             ___lwmod@dividend 0087             ___lldiv@dividend 0080  
               ??_stopMoving 0023                     printf@ap 009B                     printf@cp 0098  
                ??_testServo 001E      __end_of_I2C_Master_Init 2290      __end_of_I2C_Master_Read 25CC  
    __end_of_I2C_Master_Wait 27E2      __end_of_I2C_Master_Stop 285A                  lcdInst@data 0082  
               showInfo@time 0023                 showInfo@stop 002E                 showInfo@type 002C  
        __end_ofi2_lcdNibble 2342             ___lldiv@quotient 0088            I2C_Master_Write@d 0081  
            ___lwmod@divisor 0089              ___lwmod@counter 008B           __end_of_stopMoving 2530  
             WriteEE@address 0001                  getTime@time 0083                printV@charged 0023  



Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Fri Feb 24 17:16:41 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    43                           	psect	text29,global,reloc=2,class=CODE,delta=1
    44                           	psect	text30,global,reloc=2,class=CODE,delta=1
    45                           	psect	text31,global,reloc=2,class=CODE,delta=1
    46                           	psect	text32,global,reloc=2,class=CODE,delta=1
    47                           	psect	text33,global,reloc=2,class=CODE,delta=1
    48                           	psect	text34,global,reloc=2,class=CODE,delta=1
    49                           	psect	text35,global,reloc=2,class=CODE,delta=1
    50                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    51                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    52                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    53  0000                     
    54                           ; Version 1.41
    55                           ; Generated 25/01/2017 GMT
    56                           ; 
    57                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC18F4620 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     
    89                           	psect	idataCOMRAM
    90  00146E                     __pidataCOMRAM:
    91                           	opt stack 0
    92                           
    93                           ;initializer for testADC@F3099
    94  00146E  0001               	dw	1
    95  001470  0001               	dw	1
    96  001472  0001               	dw	1
    97  001474  0001               	dw	1
    98                           
    99                           	psect	mediumconst
   100  00FD46                     __pmediumconst:
   101                           	opt stack 0
   102  00FD46  00                 	db	0
   103  00FD47                     _dpowers:
   104                           	opt stack 0
   105  00FD47  0001               	dw	1
   106  00FD49  000A               	dw	10
   107  00FD4B  0064               	dw	100
   108  00FD4D  03E8               	dw	1000
   109  00FD4F  2710               	dw	10000
   110  00FD51                     __end_of_dpowers:
   111                           	opt stack 0
   112  0000                     _ADRESL	set	4035
   113  0000                     _ADRESH	set	4036
   114  0000                     _ADCON0bits	set	4034
   115  0000                     _PORTB	set	3969
   116  0000                     _PORTBbits	set	3969
   117  0000                     _LATDbits	set	3980
   118  0000                     _INTCONbits	set	4082
   119  0000                     _CVRCON	set	4021
   120  0000                     _ADCON1	set	4033
   121  0000                     _ADCON0	set	4034
   122  0000                     _LATE	set	3981
   123  0000                     _LATD	set	3980
   124  0000                     _LATC	set	3979
   125  0000                     _LATB	set	3978
   126  0000                     _LATA	set	3977
   127  0000                     _TRISE	set	3990
   128  0000                     _TRISD	set	3989
   129  0000                     _TRISC	set	3988
   130  0000                     _TRISB	set	3987
   131  0000                     _TRISA	set	3986
   132  0000                     _ADON	set	32272
   133  0000                     _INT1IF	set	32640
   134  0000                     _INT1IE	set	32643
   135  0000                     _LATC3	set	31835
   136  0000                     _ADFM	set	32263
   137  0000                     _LATC2	set	31834
   138  0000                     _LATC1	set	31833
   139  0000                     _LATC0	set	31832
   140  00FD51                     STR_12:
   141  00FD51  53                 	db	83	;'S'
   142  00FD52  6F                 	db	111	;'o'
   143  00FD53  72                 	db	114	;'r'
   144  00FD54  74                 	db	116	;'t'
   145  00FD55  69                 	db	105	;'i'
   146  00FD56  6E                 	db	110	;'n'
   147  00FD57  67                 	db	103	;'g'
   148  00FD58  20                 	db	32
   149  00FD59  43                 	db	67	;'C'
   150  00FD5A  6F                 	db	111	;'o'
   151  00FD5B  6D                 	db	109	;'m'
   152  00FD5C  70                 	db	112	;'p'
   153  00FD5D  6C                 	db	108	;'l'
   154  00FD5E  65                 	db	101	;'e'
   155  00FD5F  74                 	db	116	;'t'
   156  00FD60  65                 	db	101	;'e'
   157  00FD61  20                 	db	32
   158  00FD62  20                 	db	32
   159  00FD63  20                 	db	32
   160  00FD64  20                 	db	32
   161  00FD65  20                 	db	32
   162  00FD66  20                 	db	32
   163  00FD67  20                 	db	32
   164  00FD68  20                 	db	32
   165  00FD69  20                 	db	32
   166  00FD6A  20                 	db	32
   167  00FD6B  00                 	db	0
   168  00FD6C                     STR_13:
   169  00FD6C  50                 	db	80	;'P'
   170  00FD6D  72                 	db	114	;'r'
   171  00FD6E  65                 	db	101	;'e'
   172  00FD6F  73                 	db	115	;'s'
   173  00FD70  73                 	db	115	;'s'
   174  00FD71  20                 	db	32
   175  00FD72  61                 	db	97	;'a'
   176  00FD73  20                 	db	32
   177  00FD74  6E                 	db	110	;'n'
   178  00FD75  75                 	db	117	;'u'
   179  00FD76  6D                 	db	109	;'m'
   180  00FD77  62                 	db	98	;'b'
   181  00FD78  65                 	db	101	;'e'
   182  00FD79  72                 	db	114	;'r'
   183  00FD7A  20                 	db	32
   184  00FD7B  20                 	db	32
   185  00FD7C  20                 	db	32
   186  00FD7D  20                 	db	32
   187  00FD7E  20                 	db	32
   188  00FD7F  20                 	db	32
   189  00FD80  20                 	db	32
   190  00FD81  20                 	db	32
   191  00FD82  20                 	db	32
   192  00FD83  20                 	db	32
   193  00FD84  00                 	db	0
   194  00FD85                     STR_15:
   195  00FD85  54                 	db	84	;'T'
   196  00FD86  69                 	db	105	;'i'
   197  00FD87  6D                 	db	109	;'m'
   198  00FD88  65                 	db	101	;'e'
   199  00FD89  20                 	db	32
   200  00FD8A  45                 	db	69	;'E'
   201  00FD8B  6C                 	db	108	;'l'
   202  00FD8C  61                 	db	97	;'a'
   203  00FD8D  70                 	db	112	;'p'
   204  00FD8E  73                 	db	115	;'s'
   205  00FD8F  65                 	db	101	;'e'
   206  00FD90  64                 	db	100	;'d'
   207  00FD91  3A                 	db	58	;':'
   208  00FD92  20                 	db	32
   209  00FD93  20                 	db	32
   210  00FD94  20                 	db	32
   211  00FD95  20                 	db	32
   212  00FD96  20                 	db	32
   213  00FD97  20                 	db	32
   214  00FD98  20                 	db	32
   215  00FD99  20                 	db	32
   216  00FD9A  20                 	db	32
   217  00FD9B  20                 	db	32
   218  00FD9C  00                 	db	0
   219  00FD9D                     STR_17:
   220  00FD9D  54                 	db	84	;'T'
   221  00FD9E  6F                 	db	111	;'o'
   222  00FD9F  74                 	db	116	;'t'
   223  00FDA0  61                 	db	97	;'a'
   224  00FDA1  6C                 	db	108	;'l'
   225  00FDA2  20                 	db	32
   226  00FDA3  53                 	db	83	;'S'
   227  00FDA4  6F                 	db	111	;'o'
   228  00FDA5  72                 	db	114	;'r'
   229  00FDA6  74                 	db	116	;'t'
   230  00FDA7  65                 	db	101	;'e'
   231  00FDA8  64                 	db	100	;'d'
   232  00FDA9  3A                 	db	58	;':'
   233  00FDAA  20                 	db	32
   234  00FDAB  20                 	db	32
   235  00FDAC  20                 	db	32
   236  00FDAD  20                 	db	32
   237  00FDAE  20                 	db	32
   238  00FDAF  20                 	db	32
   239  00FDB0  20                 	db	32
   240  00FDB1  20                 	db	32
   241  00FDB2  20                 	db	32
   242  00FDB3  20                 	db	32
   243  00FDB4  00                 	db	0
   244  00FDB5                     STR_14:
   245  00FDB5  46                 	db	70	;'F'
   246  00FDB6  6F                 	db	111	;'o'
   247  00FDB7  72                 	db	114	;'r'
   248  00FDB8  20                 	db	32
   249  00FDB9  6D                 	db	109	;'m'
   250  00FDBA  6F                 	db	111	;'o'
   251  00FDBB  72                 	db	114	;'r'
   252  00FDBC  65                 	db	101	;'e'
   253  00FDBD  20                 	db	32
   254  00FDBE  69                 	db	105	;'i'
   255  00FDBF  6E                 	db	110	;'n'
   256  00FDC0  66                 	db	102	;'f'
   257  00FDC1  6F                 	db	111	;'o'
   258  00FDC2  20                 	db	32
   259  00FDC3  20                 	db	32
   260  00FDC4  20                 	db	32
   261  00FDC5  20                 	db	32
   262  00FDC6  20                 	db	32
   263  00FDC7  20                 	db	32
   264  00FDC8  20                 	db	32
   265  00FDC9  20                 	db	32
   266  00FDCA  20                 	db	32
   267  00FDCB  20                 	db	32
   268  00FDCC  00                 	db	0
   269  00FDCD                     STR_2:
   270  00FDCD  53                 	db	83	;'S'
   271  00FDCE  69                 	db	105	;'i'
   272  00FDCF  6D                 	db	109	;'m'
   273  00FDD0  75                 	db	117	;'u'
   274  00FDD1  6C                 	db	108	;'l'
   275  00FDD2  61                 	db	97	;'a'
   276  00FDD3  74                 	db	116	;'t'
   277  00FDD4  69                 	db	105	;'i'
   278  00FDD5  6E                 	db	110	;'n'
   279  00FDD6  67                 	db	103	;'g'
   280  00FDD7  2E                 	db	46
   281  00FDD8  2E                 	db	46
   282  00FDD9  2E                 	db	46
   283  00FDDA  20                 	db	32
   284  00FDDB  20                 	db	32
   285  00FDDC  20                 	db	32
   286  00FDDD  20                 	db	32
   287  00FDDE  20                 	db	32
   288  00FDDF  20                 	db	32
   289  00FDE0  20                 	db	32
   290  00FDE1  20                 	db	32
   291  00FDE2  20                 	db	32
   292  00FDE3  20                 	db	32
   293  00FDE4  00                 	db	0
   294  00FDE5                     STR_31:
   295  00FDE5  75                 	db	117	;'u'
   296  00FDE6  6E                 	db	110	;'n'
   297  00FDE7  63                 	db	99	;'c'
   298  00FDE8  68                 	db	104	;'h'
   299  00FDE9  61                 	db	97	;'a'
   300  00FDEA  72                 	db	114	;'r'
   301  00FDEB  67                 	db	103	;'g'
   302  00FDEC  65                 	db	101	;'e'
   303  00FDED  64                 	db	100	;'d'
   304  00FDEE  20                 	db	32
   305  00FDEF  41                 	db	65	;'A'
   306  00FDF0  41                 	db	65	;'A'
   307  00FDF1  20                 	db	32
   308  00FDF2  20                 	db	32
   309  00FDF3  20                 	db	32
   310  00FDF4  20                 	db	32
   311  00FDF5  20                 	db	32
   312  00FDF6  20                 	db	32
   313  00FDF7  20                 	db	32
   314  00FDF8  20                 	db	32
   315  00FDF9  20                 	db	32
   316  00FDFA  20                 	db	32
   317  00FDFB  00                 	db	0
   318  00FDFC                     STR_39:
   319  00FDFC  75                 	db	117	;'u'
   320  00FDFD  6E                 	db	110	;'n'
   321  00FDFE  63                 	db	99	;'c'
   322  00FDFF  68                 	db	104	;'h'
   323  00FE00  61                 	db	97	;'a'
   324  00FE01  72                 	db	114	;'r'
   325  00FE02  67                 	db	103	;'g'
   326  00FE03  65                 	db	101	;'e'
   327  00FE04  64                 	db	100	;'d'
   328  00FE05  20                 	db	32
   329  00FE06  39                 	db	57	;'9'
   330  00FE07  56                 	db	86	;'V'
   331  00FE08  20                 	db	32
   332  00FE09  20                 	db	32
   333  00FE0A  20                 	db	32
   334  00FE0B  20                 	db	32
   335  00FE0C  20                 	db	32
   336  00FE0D  20                 	db	32
   337  00FE0E  20                 	db	32
   338  00FE0F  20                 	db	32
   339  00FE10  20                 	db	32
   340  00FE11  20                 	db	32
   341  00FE12  00                 	db	0
   342  00FE13                     STR_18:
   343  00FE13  25                 	db	37
   344  00FE14  64                 	db	100	;'d'
   345  00FE15  20                 	db	32
   346  00FE16  62                 	db	98	;'b'
   347  00FE17  61                 	db	97	;'a'
   348  00FE18  74                 	db	116	;'t'
   349  00FE19  74                 	db	116	;'t'
   350  00FE1A  65                 	db	101	;'e'
   351  00FE1B  72                 	db	114	;'r'
   352  00FE1C  69                 	db	105	;'i'
   353  00FE1D  65                 	db	101	;'e'
   354  00FE1E  73                 	db	115	;'s'
   355  00FE1F  20                 	db	32
   356  00FE20  20                 	db	32
   357  00FE21  20                 	db	32
   358  00FE22  20                 	db	32
   359  00FE23  20                 	db	32
   360  00FE24  20                 	db	32
   361  00FE25  20                 	db	32
   362  00FE26  20                 	db	32
   363  00FE27  20                 	db	32
   364  00FE28  20                 	db	32
   365  00FE29  00                 	db	0
   366  00FE2A                     STR_35:
   367  00FE2A  75                 	db	117	;'u'
   368  00FE2B  6E                 	db	110	;'n'
   369  00FE2C  63                 	db	99	;'c'
   370  00FE2D  68                 	db	104	;'h'
   371  00FE2E  61                 	db	97	;'a'
   372  00FE2F  72                 	db	114	;'r'
   373  00FE30  67                 	db	103	;'g'
   374  00FE31  65                 	db	101	;'e'
   375  00FE32  64                 	db	100	;'d'
   376  00FE33  20                 	db	32
   377  00FE34  43                 	db	67	;'C'
   378  00FE35  20                 	db	32
   379  00FE36  20                 	db	32
   380  00FE37  20                 	db	32
   381  00FE38  20                 	db	32
   382  00FE39  20                 	db	32
   383  00FE3A  20                 	db	32
   384  00FE3B  20                 	db	32
   385  00FE3C  20                 	db	32
   386  00FE3D  20                 	db	32
   387  00FE3E  20                 	db	32
   388  00FE3F  00                 	db	0
   389  00FE40                     STR_10:
   390  00FE40  50                 	db	80	;'P'
   391  00FE41  72                 	db	114	;'r'
   392  00FE42  65                 	db	101	;'e'
   393  00FE43  73                 	db	115	;'s'
   394  00FE44  73                 	db	115	;'s'
   395  00FE45  20                 	db	32
   396  00FE46  53                 	db	83	;'S'
   397  00FE47  74                 	db	116	;'t'
   398  00FE48  61                 	db	97	;'a'
   399  00FE49  72                 	db	114	;'r'
   400  00FE4A  74                 	db	116	;'t'
   401  00FE4B  20                 	db	32
   402  00FE4C  20                 	db	32
   403  00FE4D  20                 	db	32
   404  00FE4E  20                 	db	32
   405  00FE4F  20                 	db	32
   406  00FE50  20                 	db	32
   407  00FE51  20                 	db	32
   408  00FE52  20                 	db	32
   409  00FE53  20                 	db	32
   410  00FE54  20                 	db	32
   411  00FE55  00                 	db	0
   412  00FE56                     STR_4:
   413  00FE56  41                 	db	65	;'A'
   414  00FE57  41                 	db	65	;'A'
   415  00FE58  53                 	db	83	;'S'
   416  00FE59  65                 	db	101	;'e'
   417  00FE5A  72                 	db	114	;'r'
   418  00FE5B  76                 	db	118	;'v'
   419  00FE5C  6F                 	db	111	;'o'
   420  00FE5D  52                 	db	82	;'R'
   421  00FE5E  69                 	db	105	;'i'
   422  00FE5F  67                 	db	103	;'g'
   423  00FE60  68                 	db	104	;'h'
   424  00FE61  74                 	db	116	;'t'
   425  00FE62  20                 	db	32
   426  00FE63  20                 	db	32
   427  00FE64  20                 	db	32
   428  00FE65  20                 	db	32
   429  00FE66  20                 	db	32
   430  00FE67  20                 	db	32
   431  00FE68  20                 	db	32
   432  00FE69  20                 	db	32
   433  00FE6A  20                 	db	32
   434  00FE6B  00                 	db	0
   435  00FE6C                     STR_25:
   436  00FE6C  55                 	db	85	;'U'
   437  00FE6D  6E                 	db	110	;'n'
   438  00FE6E  63                 	db	99	;'c'
   439  00FE6F  68                 	db	104	;'h'
   440  00FE70  61                 	db	97	;'a'
   441  00FE71  72                 	db	114	;'r'
   442  00FE72  67                 	db	103	;'g'
   443  00FE73  65                 	db	101	;'e'
   444  00FE74  64                 	db	100	;'d'
   445  00FE75  3A                 	db	58	;':'
   446  00FE76  20                 	db	32
   447  00FE77  20                 	db	32
   448  00FE78  20                 	db	32
   449  00FE79  20                 	db	32
   450  00FE7A  20                 	db	32
   451  00FE7B  20                 	db	32
   452  00FE7C  20                 	db	32
   453  00FE7D  20                 	db	32
   454  00FE7E  20                 	db	32
   455  00FE7F  20                 	db	32
   456  00FE80  00                 	db	0
   457  00FE81                     STR_19:
   458  00FE81  41                 	db	65	;'A'
   459  00FE82  41                 	db	65	;'A'
   460  00FE83  20                 	db	32
   461  00FE84  53                 	db	83	;'S'
   462  00FE85  6F                 	db	111	;'o'
   463  00FE86  72                 	db	114	;'r'
   464  00FE87  74                 	db	116	;'t'
   465  00FE88  65                 	db	101	;'e'
   466  00FE89  64                 	db	100	;'d'
   467  00FE8A  3A                 	db	58	;':'
   468  00FE8B  20                 	db	32
   469  00FE8C  20                 	db	32
   470  00FE8D  20                 	db	32
   471  00FE8E  20                 	db	32
   472  00FE8F  20                 	db	32
   473  00FE90  20                 	db	32
   474  00FE91  20                 	db	32
   475  00FE92  20                 	db	32
   476  00FE93  20                 	db	32
   477  00FE94  20                 	db	32
   478  00FE95  00                 	db	0
   479  00FE96                     STR_23:
   480  00FE96  39                 	db	57	;'9'
   481  00FE97  56                 	db	86	;'V'
   482  00FE98  20                 	db	32
   483  00FE99  53                 	db	83	;'S'
   484  00FE9A  6F                 	db	111	;'o'
   485  00FE9B  72                 	db	114	;'r'
   486  00FE9C  74                 	db	116	;'t'
   487  00FE9D  65                 	db	101	;'e'
   488  00FE9E  64                 	db	100	;'d'
   489  00FE9F  3A                 	db	58	;':'
   490  00FEA0  20                 	db	32
   491  00FEA1  20                 	db	32
   492  00FEA2  20                 	db	32
   493  00FEA3  20                 	db	32
   494  00FEA4  20                 	db	32
   495  00FEA5  20                 	db	32
   496  00FEA6  20                 	db	32
   497  00FEA7  20                 	db	32
   498  00FEA8  20                 	db	32
   499  00FEA9  20                 	db	32
   500  00FEAA  00                 	db	0
   501  00FEAB                     STR_16:
   502  00FEAB  25                 	db	37
   503  00FEAC  64                 	db	100	;'d'
   504  00FEAD  20                 	db	32
   505  00FEAE  73                 	db	115	;'s'
   506  00FEAF  65                 	db	101	;'e'
   507  00FEB0  63                 	db	99	;'c'
   508  00FEB1  6F                 	db	111	;'o'
   509  00FEB2  6E                 	db	110	;'n'
   510  00FEB3  64                 	db	100	;'d'
   511  00FEB4  73                 	db	115	;'s'
   512  00FEB5  20                 	db	32
   513  00FEB6  20                 	db	32
   514  00FEB7  20                 	db	32
   515  00FEB8  20                 	db	32
   516  00FEB9  20                 	db	32
   517  00FEBA  20                 	db	32
   518  00FEBB  20                 	db	32
   519  00FEBC  20                 	db	32
   520  00FEBD  20                 	db	32
   521  00FEBE  20                 	db	32
   522  00FEBF  00                 	db	0
   523  00FEC0  53                 	db	83	;'S'
   524  00FEC1  6F                 	db	111	;'o'
   525  00FEC2  72                 	db	114	;'r'
   526  00FEC3  74                 	db	116	;'t'
   527  00FEC4  69                 	db	105	;'i'
   528  00FEC5  6E                 	db	110	;'n'
   529  00FEC6  67                 	db	103	;'g'
   530  00FEC7  2E                 	db	46
   531  00FEC8  2E                 	db	46
   532  00FEC9  2E                 	db	46
   533  00FECA  20                 	db	32
   534  00FECB  20                 	db	32
   535  00FECC  20                 	db	32
   536  00FECD  20                 	db	32
   537  00FECE  20                 	db	32
   538  00FECF  20                 	db	32
   539  00FED0  20                 	db	32
   540  00FED1  20                 	db	32
   541  00FED2  20                 	db	32
   542  00FED3  20                 	db	32
   543  00FED4  00                 	db	0
   544  00FED5                     STR_3:
   545  00FED5  41                 	db	65	;'A'
   546  00FED6  41                 	db	65	;'A'
   547  00FED7  53                 	db	83	;'S'
   548  00FED8  65                 	db	101	;'e'
   549  00FED9  72                 	db	114	;'r'
   550  00FEDA  76                 	db	118	;'v'
   551  00FEDB  6F                 	db	111	;'o'
   552  00FEDC  4C                 	db	76	;'L'
   553  00FEDD  65                 	db	101	;'e'
   554  00FEDE  66                 	db	102	;'f'
   555  00FEDF  74                 	db	116	;'t'
   556  00FEE0  20                 	db	32
   557  00FEE1  20                 	db	32
   558  00FEE2  20                 	db	32
   559  00FEE3  20                 	db	32
   560  00FEE4  20                 	db	32
   561  00FEE5  20                 	db	32
   562  00FEE6  20                 	db	32
   563  00FEE7  20                 	db	32
   564  00FEE8  20                 	db	32
   565  00FEE9  00                 	db	0
   566  00FEEA                     STR_8:
   567  00FEEA  39                 	db	57	;'9'
   568  00FEEB  53                 	db	83	;'S'
   569  00FEEC  65                 	db	101	;'e'
   570  00FEED  72                 	db	114	;'r'
   571  00FEEE  76                 	db	118	;'v'
   572  00FEEF  6F                 	db	111	;'o'
   573  00FEF0  52                 	db	82	;'R'
   574  00FEF1  69                 	db	105	;'i'
   575  00FEF2  67                 	db	103	;'g'
   576  00FEF3  68                 	db	104	;'h'
   577  00FEF4  74                 	db	116	;'t'
   578  00FEF5  20                 	db	32
   579  00FEF6  20                 	db	32
   580  00FEF7  20                 	db	32
   581  00FEF8  20                 	db	32
   582  00FEF9  20                 	db	32
   583  00FEFA  20                 	db	32
   584  00FEFB  20                 	db	32
   585  00FEFC  20                 	db	32
   586  00FEFD  20                 	db	32
   587  00FEFE  00                 	db	0
   588  00FEFF                     STR_6:
   589  00FEFF  43                 	db	67	;'C'
   590  00FF00  53                 	db	83	;'S'
   591  00FF01  65                 	db	101	;'e'
   592  00FF02  72                 	db	114	;'r'
   593  00FF03  76                 	db	118	;'v'
   594  00FF04  6F                 	db	111	;'o'
   595  00FF05  52                 	db	82	;'R'
   596  00FF06  69                 	db	105	;'i'
   597  00FF07  67                 	db	103	;'g'
   598  00FF08  68                 	db	104	;'h'
   599  00FF09  74                 	db	116	;'t'
   600  00FF0A  20                 	db	32
   601  00FF0B  20                 	db	32
   602  00FF0C  20                 	db	32
   603  00FF0D  20                 	db	32
   604  00FF0E  20                 	db	32
   605  00FF0F  20                 	db	32
   606  00FF10  20                 	db	32
   607  00FF11  20                 	db	32
   608  00FF12  20                 	db	32
   609  00FF13  00                 	db	0
   610  00FF14                     STR_21:
   611  00FF14  43                 	db	67	;'C'
   612  00FF15  20                 	db	32
   613  00FF16  53                 	db	83	;'S'
   614  00FF17  6F                 	db	111	;'o'
   615  00FF18  72                 	db	114	;'r'
   616  00FF19  74                 	db	116	;'t'
   617  00FF1A  65                 	db	101	;'e'
   618  00FF1B  64                 	db	100	;'d'
   619  00FF1C  3A                 	db	58	;':'
   620  00FF1D  20                 	db	32
   621  00FF1E  20                 	db	32
   622  00FF1F  20                 	db	32
   623  00FF20  20                 	db	32
   624  00FF21  20                 	db	32
   625  00FF22  20                 	db	32
   626  00FF23  20                 	db	32
   627  00FF24  20                 	db	32
   628  00FF25  20                 	db	32
   629  00FF26  20                 	db	32
   630  00FF27  00                 	db	0
   631  00FF28                     STR_11:
   632  00FF28  45                 	db	69	;'E'
   633  00FF29  6D                 	db	109	;'m'
   634  00FF2A  65                 	db	101	;'e'
   635  00FF2B  72                 	db	114	;'r'
   636  00FF2C  67                 	db	103	;'g'
   637  00FF2D  65                 	db	101	;'e'
   638  00FF2E  6E                 	db	110	;'n'
   639  00FF2F  63                 	db	99	;'c'
   640  00FF30  79                 	db	121	;'y'
   641  00FF31  20                 	db	32
   642  00FF32  20                 	db	32
   643  00FF33  20                 	db	32
   644  00FF34  20                 	db	32
   645  00FF35  20                 	db	32
   646  00FF36  20                 	db	32
   647  00FF37  20                 	db	32
   648  00FF38  20                 	db	32
   649  00FF39  20                 	db	32
   650  00FF3A  20                 	db	32
   651  00FF3B  00                 	db	0
   652  00FF3C                     STR_7:
   653  00FF3C  39                 	db	57	;'9'
   654  00FF3D  53                 	db	83	;'S'
   655  00FF3E  65                 	db	101	;'e'
   656  00FF3F  72                 	db	114	;'r'
   657  00FF40  76                 	db	118	;'v'
   658  00FF41  6F                 	db	111	;'o'
   659  00FF42  4C                 	db	76	;'L'
   660  00FF43  65                 	db	101	;'e'
   661  00FF44  66                 	db	102	;'f'
   662  00FF45  74                 	db	116	;'t'
   663  00FF46  20                 	db	32
   664  00FF47  20                 	db	32
   665  00FF48  20                 	db	32
   666  00FF49  20                 	db	32
   667  00FF4A  20                 	db	32
   668  00FF4B  20                 	db	32
   669  00FF4C  20                 	db	32
   670  00FF4D  20                 	db	32
   671  00FF4E  20                 	db	32
   672  00FF4F  00                 	db	0
   673  00FF50                     STR_5:
   674  00FF50  43                 	db	67	;'C'
   675  00FF51  53                 	db	83	;'S'
   676  00FF52  65                 	db	101	;'e'
   677  00FF53  72                 	db	114	;'r'
   678  00FF54  76                 	db	118	;'v'
   679  00FF55  6F                 	db	111	;'o'
   680  00FF56  4C                 	db	76	;'L'
   681  00FF57  65                 	db	101	;'e'
   682  00FF58  66                 	db	102	;'f'
   683  00FF59  74                 	db	116	;'t'
   684  00FF5A  20                 	db	32
   685  00FF5B  20                 	db	32
   686  00FF5C  20                 	db	32
   687  00FF5D  20                 	db	32
   688  00FF5E  20                 	db	32
   689  00FF5F  20                 	db	32
   690  00FF60  20                 	db	32
   691  00FF61  20                 	db	32
   692  00FF62  20                 	db	32
   693  00FF63  00                 	db	0
   694  00FF64                     STR_9:
   695  00FF64  57                 	db	87	;'W'
   696  00FF65  65                 	db	101	;'e'
   697  00FF66  6C                 	db	108	;'l'
   698  00FF67  63                 	db	99	;'c'
   699  00FF68  6F                 	db	111	;'o'
   700  00FF69  6D                 	db	109	;'m'
   701  00FF6A  65                 	db	101	;'e'
   702  00FF6B  21                 	db	33
   703  00FF6C  20                 	db	32
   704  00FF6D  20                 	db	32
   705  00FF6E  20                 	db	32
   706  00FF6F  20                 	db	32
   707  00FF70  20                 	db	32
   708  00FF71  20                 	db	32
   709  00FF72  20                 	db	32
   710  00FF73  20                 	db	32
   711  00FF74  20                 	db	32
   712  00FF75  20                 	db	32
   713  00FF76  00                 	db	0
   714  00FF77                     STR_27:
   715  00FF77  53                 	db	83	;'S'
   716  00FF78  74                 	db	116	;'t'
   717  00FF79  6F                 	db	111	;'o'
   718  00FF7A  70                 	db	112	;'p'
   719  00FF7B  70                 	db	112	;'p'
   720  00FF7C  65                 	db	101	;'e'
   721  00FF7D  64                 	db	100	;'d'
   722  00FF7E  20                 	db	32
   723  00FF7F  20                 	db	32
   724  00FF80  20                 	db	32
   725  00FF81  20                 	db	32
   726  00FF82  20                 	db	32
   727  00FF83  20                 	db	32
   728  00FF84  20                 	db	32
   729  00FF85  20                 	db	32
   730  00FF86  20                 	db	32
   731  00FF87  20                 	db	32
   732  00FF88  00                 	db	0
   733  00FF89                     STR_32:
   734  00FF89  6E                 	db	110	;'n'
   735  00FF8A  6F                 	db	111	;'o'
   736  00FF8B  20                 	db	32
   737  00FF8C  41                 	db	65	;'A'
   738  00FF8D  41                 	db	65	;'A'
   739  00FF8E  20                 	db	32
   740  00FF8F  20                 	db	32
   741  00FF90  20                 	db	32
   742  00FF91  20                 	db	32
   743  00FF92  20                 	db	32
   744  00FF93  20                 	db	32
   745  00FF94  20                 	db	32
   746  00FF95  20                 	db	32
   747  00FF96  20                 	db	32
   748  00FF97  20                 	db	32
   749  00FF98  00                 	db	0
   750  00FF99                     STR_40:
   751  00FF99  6E                 	db	110	;'n'
   752  00FF9A  6F                 	db	111	;'o'
   753  00FF9B  20                 	db	32
   754  00FF9C  39                 	db	57	;'9'
   755  00FF9D  56                 	db	86	;'V'
   756  00FF9E  20                 	db	32
   757  00FF9F  20                 	db	32
   758  00FFA0  20                 	db	32
   759  00FFA1  20                 	db	32
   760  00FFA2  20                 	db	32
   761  00FFA3  20                 	db	32
   762  00FFA4  20                 	db	32
   763  00FFA5  20                 	db	32
   764  00FFA6  20                 	db	32
   765  00FFA7  20                 	db	32
   766  00FFA8  00                 	db	0
   767  00FFA9                     STR_28:
   768  00FFA9  25                 	db	37
   769  00FFAA  64                 	db	100	;'d'
   770  00FFAB  20                 	db	32
   771  00FFAC  72                 	db	114	;'r'
   772  00FFAD  65                 	db	101	;'e'
   773  00FFAE  63                 	db	99	;'c'
   774  00FFAF  65                 	db	101	;'e'
   775  00FFB0  69                 	db	105	;'i'
   776  00FFB1  76                 	db	118	;'v'
   777  00FFB2  65                 	db	101	;'e'
   778  00FFB3  64                 	db	100	;'d'
   779  00FFB4  20                 	db	32
   780  00FFB5  20                 	db	32
   781  00FFB6  20                 	db	32
   782  00FFB7  20                 	db	32
   783  00FFB8  00                 	db	0
   784  00FFB9                     STR_36:
   785  00FFB9  6E                 	db	110	;'n'
   786  00FFBA  6F                 	db	111	;'o'
   787  00FFBB  20                 	db	32
   788  00FFBC  43                 	db	67	;'C'
   789  00FFBD  20                 	db	32
   790  00FFBE  20                 	db	32
   791  00FFBF  20                 	db	32
   792  00FFC0  20                 	db	32
   793  00FFC1  20                 	db	32
   794  00FFC2  20                 	db	32
   795  00FFC3  20                 	db	32
   796  00FFC4  20                 	db	32
   797  00FFC5  20                 	db	32
   798  00FFC6  20                 	db	32
   799  00FFC7  00                 	db	0
   800  00FFC8                     STR_29:
   801  00FFC8  41                 	db	65	;'A'
   802  00FFC9  41                 	db	65	;'A'
   803  00FFCA  3A                 	db	58	;':'
   804  00FFCB  20                 	db	32
   805  00FFCC  20                 	db	32
   806  00FFCD  20                 	db	32
   807  00FFCE  20                 	db	32
   808  00FFCF  20                 	db	32
   809  00FFD0  20                 	db	32
   810  00FFD1  20                 	db	32
   811  00FFD2  20                 	db	32
   812  00FFD3  20                 	db	32
   813  00FFD4  20                 	db	32
   814  00FFD5  00                 	db	0
   815  00FFD6                     STR_37:
   816  00FFD6  39                 	db	57	;'9'
   817  00FFD7  56                 	db	86	;'V'
   818  00FFD8  3A                 	db	58	;':'
   819  00FFD9  20                 	db	32
   820  00FFDA  20                 	db	32
   821  00FFDB  20                 	db	32
   822  00FFDC  20                 	db	32
   823  00FFDD  20                 	db	32
   824  00FFDE  20                 	db	32
   825  00FFDF  20                 	db	32
   826  00FFE0  20                 	db	32
   827  00FFE1  20                 	db	32
   828  00FFE2  20                 	db	32
   829  00FFE3  00                 	db	0
   830  00FFE4                     STR_33:
   831  00FFE4  43                 	db	67	;'C'
   832  00FFE5  3A                 	db	58	;':'
   833  00FFE6  20                 	db	32
   834  00FFE7  20                 	db	32
   835  00FFE8  20                 	db	32
   836  00FFE9  20                 	db	32
   837  00FFEA  20                 	db	32
   838  00FFEB  20                 	db	32
   839  00FFEC  20                 	db	32
   840  00FFED  20                 	db	32
   841  00FFEE  20                 	db	32
   842  00FFEF  20                 	db	32
   843  00FFF0  00                 	db	0
   844  00FFF1                     STR_20:
   845  00FFF1  25                 	db	37
   846  00FFF2  64                 	db	100	;'d'
   847  00FFF3  20                 	db	32
   848  00FFF4  20                 	db	32
   849  00FFF5  20                 	db	32
   850  00FFF6  20                 	db	32
   851  00FFF7  20                 	db	32
   852  00FFF8  20                 	db	32
   853  00FFF9  20                 	db	32
   854  00FFFA  20                 	db	32
   855  00FFFB  20                 	db	32
   856  00FFFC  20                 	db	32
   857  00FFFD  00                 	db	0
   858  0000                     
   859                           ; #config settings
   860  00FFFE  00                 	db	0	; dummy byte at the end
   861  0000                     
   862                           	psect	cinit
   863  0011C2                     __pcinit:
   864                           	opt stack 0
   865  0011C2                     start_initialization:
   866                           	opt stack 0
   867  0011C2                     __initialization:
   868                           	opt stack 0
   869                           
   870                           ; Initialize objects allocated to COMRAM (8 bytes)
   871                           ; load TBLPTR registers with __pidataCOMRAM
   872  0011C2  0E6E               	movlw	low __pidataCOMRAM
   873  0011C4  6EF6               	movwf	tblptrl,c
   874  0011C6  0E14               	movlw	high __pidataCOMRAM
   875  0011C8  6EF7               	movwf	tblptrh,c
   876  0011CA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   877  0011CC  6EF8               	movwf	tblptru,c
   878  0011CE  EE00  F052         	lfsr	0,__pdataCOMRAM
   879  0011D2  EE10 F008          	lfsr	1,8
   880  0011D6                     copy_data0:
   881  0011D6  0009               	tblrd		*+
   882  0011D8  CFF5 FFEE          	movff	tablat,postinc0
   883  0011DC  50E5               	movf	postdec1,w,c
   884  0011DE  50E1               	movf	fsr1l,w,c
   885  0011E0  E1FA               	bnz	copy_data0
   886                           
   887                           ; Clear objects allocated to BANK0 (20 bytes)
   888  0011E2  EE00  F0BB         	lfsr	0,__pbssBANK0
   889  0011E6  0E14               	movlw	20
   890  0011E8                     clear_0:
   891  0011E8  6AEE               	clrf	postinc0,c
   892  0011EA  06E8               	decf	wreg,f,c
   893  0011EC  E1FD               	bnz	clear_0
   894                           
   895                           ; Clear objects allocated to COMRAM (8 bytes)
   896  0011EE  EE00  F04A         	lfsr	0,__pbssCOMRAM
   897  0011F2  0E08               	movlw	8
   898  0011F4                     clear_1:
   899  0011F4  6AEE               	clrf	postinc0,c
   900  0011F6  06E8               	decf	wreg,f,c
   901  0011F8  E1FD               	bnz	clear_1
   902  0011FA                     end_of_initialization:
   903                           	opt stack 0
   904  0011FA                     __end_of__initialization:
   905                           	opt stack 0
   906  0011FA  905A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   907  0011FC  925A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   908  0011FE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   909  001200  6EF8               	movwf	tblptru,c
   910  001202  0100               	movlb	0
   911  001204  EFC5  F009         	goto	_main	;jump to C main() function
   912                           tblptru	equ	0xFF8
   913                           tblptrh	equ	0xFF7
   914                           tblptrl	equ	0xFF6
   915                           tablat	equ	0xFF5
   916                           postinc0	equ	0xFEE
   917                           wreg	equ	0xFE8
   918                           postdec1	equ	0xFE5
   919                           fsr1l	equ	0xFE1
   920                           
   921                           	psect	bssCOMRAM
   922  00004A                     __pbssCOMRAM:
   923                           	opt stack 0
   924  00004A                     mainloop@F3072:
   925                           	opt stack 0
   926  00004A                     	ds	8
   927                           tblptru	equ	0xFF8
   928                           tblptrh	equ	0xFF7
   929                           tblptrl	equ	0xFF6
   930                           tablat	equ	0xFF5
   931                           postinc0	equ	0xFEE
   932                           wreg	equ	0xFE8
   933                           postdec1	equ	0xFE5
   934                           fsr1l	equ	0xFE1
   935                           
   936                           	psect	dataCOMRAM
   937  000052                     __pdataCOMRAM:
   938                           	opt stack 0
   939  000052                     testADC@F3099:
   940                           	opt stack 0
   941  000052                     	ds	8
   942                           tblptru	equ	0xFF8
   943                           tblptrh	equ	0xFF7
   944                           tblptrl	equ	0xFF6
   945                           tablat	equ	0xFF5
   946                           postinc0	equ	0xFEE
   947                           wreg	equ	0xFE8
   948                           postdec1	equ	0xFE5
   949                           fsr1l	equ	0xFE1
   950                           
   951                           	psect	bssBANK0
   952  0000BB                     __pbssBANK0:
   953                           	opt stack 0
   954  0000BB                     simulate@F3080:
   955                           	opt stack 0
   956  0000BB                     	ds	8
   957  0000C3                     simulate@F3091:
   958                           	opt stack 0
   959  0000C3                     	ds	6
   960  0000C9                     simulate@F3089:
   961                           	opt stack 0
   962  0000C9                     	ds	6
   963                           tblptru	equ	0xFF8
   964                           tblptrh	equ	0xFF7
   965                           tblptrl	equ	0xFF6
   966                           tablat	equ	0xFF5
   967                           postinc0	equ	0xFEE
   968                           wreg	equ	0xFE8
   969                           postdec1	equ	0xFE5
   970                           fsr1l	equ	0xFE1
   971                           
   972                           	psect	cstackBANK0
   973  000080                     __pcstackBANK0:
   974                           	opt stack 0
   975  000080                     ___ftdiv@cntr:
   976                           	opt stack 0
   977  000080                     showInfo@type:
   978                           	opt stack 0
   979                           
   980                           ; 2 bytes @ 0x0
   981  000080                     	ds	1
   982  000081                     ___ftdiv@f3:
   983                           	opt stack 0
   984                           
   985                           ; 3 bytes @ 0x1
   986  000081                     	ds	3
   987  000084                     ___ftdiv@exp:
   988                           	opt stack 0
   989                           
   990                           ; 1 bytes @ 0x4
   991  000084                     	ds	1
   992  000085                     ___ftdiv@sign:
   993                           	opt stack 0
   994                           
   995                           ; 1 bytes @ 0x5
   996  000085                     	ds	1
   997  000086                     ___ftge@ff1:
   998                           	opt stack 0
   999                           
  1000                           ; 3 bytes @ 0x6
  1001  000086                     	ds	3
  1002  000089                     ___ftge@ff2:
  1003                           	opt stack 0
  1004                           
  1005                           ; 3 bytes @ 0x9
  1006  000089                     	ds	3
  1007  00008C                     ?_checkV:
  1008                           	opt stack 0
  1009  00008C                     checkV@voltage:
  1010                           	opt stack 0
  1011                           
  1012                           ; 2 bytes @ 0xC
  1013  00008C                     	ds	2
  1014  00008E                     checkV@max:
  1015                           	opt stack 0
  1016                           
  1017                           ; 3 bytes @ 0xE
  1018  00008E                     	ds	3
  1019  000091                     checkV@i:
  1020                           	opt stack 0
  1021                           
  1022                           ; 1 bytes @ 0x11
  1023  000091                     	ds	1
  1024  000092                     ?_checkAA:
  1025                           	opt stack 0
  1026  000092                     ?_checkC:
  1027                           	opt stack 0
  1028  000092                     ?_check9:
  1029                           	opt stack 0
  1030  000092                     checkAA@sorted:
  1031                           	opt stack 0
  1032  000092                     checkC@sorted:
  1033                           	opt stack 0
  1034  000092                     check9@sorted:
  1035                           	opt stack 0
  1036                           
  1037                           ; 2 bytes @ 0x12
  1038  000092                     	ds	2
  1039  000094                     ??_simulate:
  1040                           
  1041                           ; 1 bytes @ 0x14
  1042  000094                     	ds	2
  1043  000096                     simulate@stop:
  1044                           	opt stack 0
  1045                           
  1046                           ; 2 bytes @ 0x16
  1047  000096                     	ds	2
  1048  000098                     simulate@portCW:
  1049                           	opt stack 0
  1050                           
  1051                           ; 6 bytes @ 0x18
  1052  000098                     	ds	6
  1053  00009E                     simulate@portCCW:
  1054                           	opt stack 0
  1055                           
  1056                           ; 6 bytes @ 0x1E
  1057  00009E                     	ds	6
  1058  0000A4                     simulate@AA:
  1059                           	opt stack 0
  1060                           
  1061                           ; 2 bytes @ 0x24
  1062  0000A4                     	ds	2
  1063  0000A6                     simulate@C:
  1064                           	opt stack 0
  1065                           
  1066                           ; 2 bytes @ 0x26
  1067  0000A6                     	ds	2
  1068  0000A8                     simulate@V9:
  1069                           	opt stack 0
  1070                           
  1071                           ; 2 bytes @ 0x28
  1072  0000A8                     	ds	2
  1073  0000AA                     simulate@i:
  1074                           	opt stack 0
  1075                           
  1076                           ; 1 bytes @ 0x2A
  1077  0000AA                     	ds	1
  1078  0000AB                     simulate@i_182:
  1079                           	opt stack 0
  1080                           
  1081                           ; 1 bytes @ 0x2B
  1082  0000AB                     	ds	1
  1083  0000AC                     simulate@i_189:
  1084                           	opt stack 0
  1085                           
  1086                           ; 1 bytes @ 0x2C
  1087  0000AC                     	ds	1
  1088  0000AD                     simulate@i_192:
  1089                           	opt stack 0
  1090                           
  1091                           ; 1 bytes @ 0x2D
  1092  0000AD                     	ds	1
  1093  0000AE                     simulate@sorted:
  1094                           	opt stack 0
  1095                           
  1096                           ; 8 bytes @ 0x2E
  1097  0000AE                     	ds	8
  1098  0000B6                     
  1099                           ; 2 bytes @ 0x36
  1100  0000B6                     	ds	2
  1101  0000B8                     
  1102                           ; 3 bytes @ 0x38
  1103  0000B8                     	ds	3
  1104                           tblptru	equ	0xFF8
  1105                           tblptrh	equ	0xFF7
  1106                           tblptrl	equ	0xFF6
  1107                           tablat	equ	0xFF5
  1108                           postinc0	equ	0xFEE
  1109                           wreg	equ	0xFE8
  1110                           postdec1	equ	0xFE5
  1111                           fsr1l	equ	0xFE1
  1112                           
  1113                           	psect	cstackCOMRAM
  1114  000001                     __pcstackCOMRAM:
  1115                           	opt stack 0
  1116  000001                     ?i2___lwdiv:
  1117                           	opt stack 0
  1118  000001                     i2lcdNibble@temp:
  1119                           	opt stack 0
  1120  000001                     i2___lwdiv@dividend:
  1121                           	opt stack 0
  1122                           
  1123                           ; 2 bytes @ 0x0
  1124  000001                     	ds	1
  1125  000002                     i2lcdNibble@data:
  1126                           	opt stack 0
  1127                           
  1128                           ; 1 bytes @ 0x1
  1129  000002                     	ds	1
  1130  000003                     i2lcdInst@data:
  1131                           	opt stack 0
  1132  000003                     i2putch@data:
  1133                           	opt stack 0
  1134  000003                     i2___lwdiv@divisor:
  1135                           	opt stack 0
  1136                           
  1137                           ; 2 bytes @ 0x2
  1138  000003                     	ds	2
  1139  000005                     i2___lwdiv@quotient:
  1140                           	opt stack 0
  1141                           
  1142                           ; 2 bytes @ 0x4
  1143  000005                     	ds	2
  1144  000007                     i2___lwdiv@counter:
  1145                           	opt stack 0
  1146                           
  1147                           ; 1 bytes @ 0x6
  1148  000007                     	ds	1
  1149  000008                     ?i2___lwmod:
  1150                           	opt stack 0
  1151  000008                     i2___lwmod@dividend:
  1152                           	opt stack 0
  1153                           
  1154                           ; 2 bytes @ 0x7
  1155  000008                     	ds	2
  1156  00000A                     i2___lwmod@divisor:
  1157                           	opt stack 0
  1158                           
  1159                           ; 2 bytes @ 0x9
  1160  00000A                     	ds	2
  1161  00000C                     i2___lwmod@counter:
  1162                           	opt stack 0
  1163                           
  1164                           ; 1 bytes @ 0xB
  1165  00000C                     	ds	1
  1166  00000D                     ?i2_printf:
  1167                           	opt stack 0
  1168  00000D                     i2printf@f:
  1169                           	opt stack 0
  1170                           
  1171                           ; 2 bytes @ 0xC
  1172  00000D                     	ds	2
  1173  00000F                     ??i2_printf:
  1174                           
  1175                           ; 1 bytes @ 0xE
  1176  00000F                     	ds	1
  1177  000010                     i2printf@ap:
  1178                           	opt stack 0
  1179                           
  1180                           ; 2 bytes @ 0xF
  1181  000010                     	ds	2
  1182  000012                     i2printf@flag:
  1183                           	opt stack 0
  1184                           
  1185                           ; 1 bytes @ 0x11
  1186  000012                     	ds	1
  1187  000013                     i2printf@prec:
  1188                           	opt stack 0
  1189                           
  1190                           ; 1 bytes @ 0x12
  1191  000013                     	ds	1
  1192  000014                     i2printf@val:
  1193                           	opt stack 0
  1194                           
  1195                           ; 2 bytes @ 0x13
  1196  000014                     	ds	2
  1197  000016                     i2printf@c:
  1198                           	opt stack 0
  1199                           
  1200                           ; 1 bytes @ 0x15
  1201  000016                     	ds	1
  1202  000017                     ??_keypressed:
  1203  000017                     
  1204                           ; 1 bytes @ 0x16
  1205  000017                     	ds	14
  1206  000025                     keypressed@keypress:
  1207                           	opt stack 0
  1208                           
  1209                           ; 1 bytes @ 0x24
  1210  000025                     	ds	1
  1211  000026                     ?_captureKeypad:
  1212                           	opt stack 0
  1213  000026                     ?_AD:
  1214                           	opt stack 0
  1215  000026                     ?___awdiv:
  1216                           	opt stack 0
  1217  000026                     ?___lwdiv:
  1218                           	opt stack 0
  1219  000026                     ?___ftpack:
  1220                           	opt stack 0
  1221  000026                     lcdNibble@temp:
  1222                           	opt stack 0
  1223  000026                     ___awdiv@dividend:
  1224                           	opt stack 0
  1225  000026                     ___lwdiv@dividend:
  1226                           	opt stack 0
  1227  000026                     ___ftpack@arg:
  1228                           	opt stack 0
  1229                           
  1230                           ; 3 bytes @ 0x25
  1231  000026                     	ds	1
  1232  000027                     lcdNibble@data:
  1233                           	opt stack 0
  1234                           
  1235                           ; 1 bytes @ 0x26
  1236  000027                     	ds	1
  1237  000028                     ??_AD:
  1238  000028                     lcdInst@data:
  1239                           	opt stack 0
  1240  000028                     putch@data:
  1241                           	opt stack 0
  1242  000028                     captureKeypad@keypress:
  1243                           	opt stack 0
  1244  000028                     ___awdiv@divisor:
  1245                           	opt stack 0
  1246  000028                     ___lwdiv@divisor:
  1247                           	opt stack 0
  1248                           
  1249                           ; 2 bytes @ 0x27
  1250  000028                     	ds	1
  1251  000029                     ??_initLCD:
  1252  000029                     ___ftpack@exp:
  1253                           	opt stack 0
  1254                           
  1255                           ; 1 bytes @ 0x28
  1256  000029                     	ds	1
  1257  00002A                     AD@channel:
  1258                           	opt stack 0
  1259  00002A                     ___awdiv@counter:
  1260                           	opt stack 0
  1261  00002A                     ___ftpack@sign:
  1262                           	opt stack 0
  1263  00002A                     ___lwdiv@counter:
  1264                           	opt stack 0
  1265                           
  1266                           ; 1 bytes @ 0x29
  1267  00002A                     	ds	1
  1268  00002B                     ??___ftpack:
  1269  00002B                     ___awdiv@sign:
  1270                           	opt stack 0
  1271  00002B                     ___lwdiv@quotient:
  1272                           	opt stack 0
  1273                           
  1274                           ; 2 bytes @ 0x2A
  1275  00002B                     	ds	1
  1276  00002C                     ___awdiv@quotient:
  1277                           	opt stack 0
  1278                           
  1279                           ; 2 bytes @ 0x2B
  1280  00002C                     	ds	1
  1281  00002D                     ?___lwmod:
  1282                           	opt stack 0
  1283  00002D                     ___lwmod@dividend:
  1284                           	opt stack 0
  1285                           
  1286                           ; 2 bytes @ 0x2C
  1287  00002D                     	ds	1
  1288  00002E                     ?___ftmul:
  1289                           	opt stack 0
  1290  00002E                     ?___awtoft:
  1291                           	opt stack 0
  1292  00002E                     PWMC@widthus:
  1293                           	opt stack 0
  1294  00002E                     ___awtoft@c:
  1295                           	opt stack 0
  1296  00002E                     ___ftmul@f1:
  1297                           	opt stack 0
  1298                           
  1299                           ; 3 bytes @ 0x2D
  1300  00002E                     	ds	1
  1301  00002F                     ___lwmod@divisor:
  1302                           	opt stack 0
  1303                           
  1304                           ; 2 bytes @ 0x2E
  1305  00002F                     	ds	1
  1306  000030                     PWMC@cycles:
  1307                           	opt stack 0
  1308                           
  1309                           ; 2 bytes @ 0x2F
  1310  000030                     	ds	1
  1311  000031                     ___awtoft@sign:
  1312                           	opt stack 0
  1313  000031                     ___lwmod@counter:
  1314                           	opt stack 0
  1315  000031                     ___ftmul@f2:
  1316                           	opt stack 0
  1317                           
  1318                           ; 3 bytes @ 0x30
  1319  000031                     	ds	1
  1320  000032                     ?_printf:
  1321                           	opt stack 0
  1322  000032                     PWMC@port:
  1323                           	opt stack 0
  1324  000032                     printf@f:
  1325                           	opt stack 0
  1326                           
  1327                           ; 2 bytes @ 0x31
  1328  000032                     	ds	2
  1329  000034                     ??___ftmul:
  1330  000034                     ??_PWMC:
  1331                           
  1332                           ; 1 bytes @ 0x33
  1333  000034                     	ds	2
  1334  000036                     ??_printf:
  1335  000036                     _PWMC$1136:
  1336                           	opt stack 0
  1337                           
  1338                           ; 1 bytes @ 0x35
  1339  000036                     	ds	1
  1340  000037                     ___ftmul@exp:
  1341                           	opt stack 0
  1342  000037                     _PWMC$1137:
  1343                           	opt stack 0
  1344  000037                     printf@ap:
  1345                           	opt stack 0
  1346                           
  1347                           ; 2 bytes @ 0x36
  1348  000037                     	ds	1
  1349  000038                     _PWMC$1138:
  1350                           	opt stack 0
  1351  000038                     ___ftmul@f3_as_product:
  1352                           	opt stack 0
  1353                           
  1354                           ; 3 bytes @ 0x37
  1355  000038                     	ds	1
  1356  000039                     printf@flag:
  1357                           	opt stack 0
  1358  000039                     PWMC@countdown:
  1359                           	opt stack 0
  1360                           
  1361                           ; 2 bytes @ 0x38
  1362  000039                     	ds	1
  1363  00003A                     printf@prec:
  1364                           	opt stack 0
  1365                           
  1366                           ; 1 bytes @ 0x39
  1367  00003A                     	ds	1
  1368  00003B                     ___ftmul@cntr:
  1369                           	opt stack 0
  1370  00003B                     CW90@port:
  1371                           	opt stack 0
  1372  00003B                     CCW90@port:
  1373                           	opt stack 0
  1374  00003B                     printf@val:
  1375                           	opt stack 0
  1376                           
  1377                           ; 2 bytes @ 0x3A
  1378  00003B                     	ds	1
  1379  00003C                     ___ftmul@sign:
  1380                           	opt stack 0
  1381                           
  1382                           ; 1 bytes @ 0x3B
  1383  00003C                     	ds	1
  1384  00003D                     ?___ftdiv:
  1385                           	opt stack 0
  1386  00003D                     printf@c:
  1387                           	opt stack 0
  1388  00003D                     ___ftdiv@f1:
  1389                           	opt stack 0
  1390                           
  1391                           ; 3 bytes @ 0x3C
  1392  00003D                     	ds	1
  1393  00003E                     showInfo@time:
  1394                           	opt stack 0
  1395                           
  1396                           ; 2 bytes @ 0x3D
  1397  00003E                     	ds	2
  1398  000040                     showInfo@sorted:
  1399                           	opt stack 0
  1400  000040                     ___ftdiv@f2:
  1401                           	opt stack 0
  1402                           
  1403                           ; 3 bytes @ 0x3F
  1404  000040                     	ds	2
  1405  000042                     ??_showInfo:
  1406                           
  1407                           ; 1 bytes @ 0x41
  1408  000042                     	ds	1
  1409  000043                     ??___ftdiv:
  1410                           
  1411                           ; 1 bytes @ 0x42
  1412  000043                     	ds	3
  1413  000046                     ??___ftge:
  1414                           
  1415                           ; 1 bytes @ 0x45
  1416  000046                     	ds	3
  1417  000049                     ??_checkV:
  1418                           
  1419                           ; 1 bytes @ 0x48
  1420  000049                     	ds	1
  1421  00004A                     tblptru	equ	0xFF8
  1422                           tblptrh	equ	0xFF7
  1423                           tblptrl	equ	0xFF6
  1424                           tablat	equ	0xFF5
  1425                           postinc0	equ	0xFEE
  1426                           wreg	equ	0xFE8
  1427                           postdec1	equ	0xFE5
  1428                           fsr1l	equ	0xFE1
  1429                           
  1430                           ; 1 bytes @ 0x49
  1431 ;;
  1432 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1433 ;;
  1434 ;; *************** function _main *****************
  1435 ;; Defined at:
  1436 ;;		line 166 in file "main.c"
  1437 ;; Parameters:    Size  Location     Type
  1438 ;;  argc            2   54[BANK0 ] int 
  1439 ;;  argv            3   56[BANK0 ] PTR PTR unsigned char 
  1440 ;; Auto vars:     Size  Location     Type
  1441 ;;		None
  1442 ;; Return value:  Size  Location     Type
  1443 ;;                  2   54[BANK0 ] int 
  1444 ;; Registers used:
  1445 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1446 ;; Tracked objects:
  1447 ;;		On entry : 0/0
  1448 ;;		On exit  : 0/0
  1449 ;;		Unchanged: 0/0
  1450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1451 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1454 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1455 ;;Total ram usage:        5 bytes
  1456 ;; Hardware stack levels required when called:   11
  1457 ;; This function calls:
  1458 ;;		___lcd_newline
  1459 ;;		_initialize
  1460 ;;		_printf
  1461 ;;		_simulate
  1462 ;; This function is called by:
  1463 ;;		Startup code after reset
  1464 ;; This function uses a non-reentrant model
  1465 ;;
  1466                           
  1467                           	psect	text0
  1468  00138A                     __ptext0:
  1469                           	opt stack 0
  1470  00138A                     _main:
  1471                           	opt stack 20
  1472                           
  1473                           ;main.c: 167: initialize();
  1474                           
  1475                           ;incstack = 0
  1476  00138A  EC27  F009         	call	_initialize	;wreg free
  1477                           
  1478                           ;main.c: 169: printf((unsigned char *) "Welcome!          ");
  1479  00138E  0E64               	movlw	low STR_9
  1480  001390  6E32               	movwf	printf@f,c
  1481  001392  0EFF               	movlw	high STR_9
  1482  001394  6E33               	movwf	printf@f+1,c
  1483  001396  EC9D  F002         	call	_printf	;wreg free
  1484                           
  1485                           ;main.c: 171: __lcd_newline();
  1486  00139A  EC3B  F00A         	call	___lcd_newline	;wreg free
  1487                           
  1488                           ;main.c: 172: printf("Press Start          ");
  1489  00139E  0E40               	movlw	low STR_10
  1490  0013A0  6E32               	movwf	printf@f,c
  1491  0013A2  0EFE               	movlw	high STR_10
  1492  0013A4  6E33               	movwf	printf@f+1,c
  1493  0013A6  EC9D  F002         	call	_printf	;wreg free
  1494                           
  1495                           ;main.c: 176: simulate();
  1496  0013AA  EC09  F000         	call	_simulate	;wreg free
  1497  0013AE  00FF               	reset		;# 
  1498  0013B0  EF07  F000         	goto	start
  1499  0013B4                     __end_of_main:
  1500                           	opt stack 0
  1501                           tblptru	equ	0xFF8
  1502                           tblptrh	equ	0xFF7
  1503                           tblptrl	equ	0xFF6
  1504                           tablat	equ	0xFF5
  1505                           postinc0	equ	0xFEE
  1506                           wreg	equ	0xFE8
  1507                           postdec1	equ	0xFE5
  1508                           fsr1l	equ	0xFE1
  1509                           
  1510 ;; *************** function _simulate *****************
  1511 ;; Defined at:
  1512 ;;		line 76 in file "main.c"
  1513 ;; Parameters:    Size  Location     Type
  1514 ;;		None
  1515 ;; Auto vars:     Size  Location     Type
  1516 ;;  i               1   45[BANK0 ] unsigned char 
  1517 ;;  i               1   44[BANK0 ] unsigned char 
  1518 ;;  i               1   43[BANK0 ] unsigned char 
  1519 ;;  i               1   42[BANK0 ] unsigned char 
  1520 ;;  portCCW         6   30[BANK0 ] int [3]
  1521 ;;  portCW          6   24[BANK0 ] int [3]
  1522 ;;  sorted          8   46[BANK0 ] int [4]
  1523 ;;  V9              2   40[BANK0 ] int 
  1524 ;;  C               2   38[BANK0 ] int 
  1525 ;;  AA              2   36[BANK0 ] int 
  1526 ;;  stop            2   22[BANK0 ] int 
  1527 ;; Return value:  Size  Location     Type
  1528 ;;                  1    wreg      void 
  1529 ;; Registers used:
  1530 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1531 ;; Tracked objects:
  1532 ;;		On entry : 0/0
  1533 ;;		On exit  : 0/0
  1534 ;;		Unchanged: 0/0
  1535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1537 ;;      Locals:         0      32       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1538 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1539 ;;      Totals:         0      34       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1540 ;;Total ram usage:       34 bytes
  1541 ;; Hardware stack levels used:    1
  1542 ;; Hardware stack levels required when called:   10
  1543 ;; This function calls:
  1544 ;;		_CCW90
  1545 ;;		_CW90
  1546 ;;		_captureKeypad
  1547 ;;		_check9
  1548 ;;		_checkAA
  1549 ;;		_checkC
  1550 ;;		_lcdInst
  1551 ;;		_printf
  1552 ;;		_showInfo
  1553 ;;		_stopMoving
  1554 ;; This function is called by:
  1555 ;;		_main
  1556 ;; This function uses a non-reentrant model
  1557 ;;
  1558                           
  1559                           	psect	text1
  1560  000012                     __ptext1:
  1561                           	opt stack 0
  1562  000012                     _simulate:
  1563                           	opt stack 20
  1564                           
  1565                           ;main.c: 77: lcdInst(0b10000000);;
  1566                           
  1567                           ;incstack = 0
  1568  000012  0E80               	movlw	128
  1569  000014  EC25  F00A         	call	_lcdInst
  1570                           
  1571                           ;main.c: 78: printf("Simulating...          ");
  1572  000018  0ECD               	movlw	low STR_2
  1573  00001A  6E32               	movwf	printf@f,c
  1574  00001C  0EFD               	movlw	high STR_2
  1575  00001E  6E33               	movwf	printf@f+1,c
  1576  000020  EC9D  F002         	call	_printf	;wreg free
  1577                           
  1578                           ;main.c: 79: int stop = 0;
  1579  000024  0E00               	movlw	0
  1580  000026  0100               	movlb	0	; () banked
  1581  000028  6F97               	movwf	(simulate@stop+1)& (0+255),b
  1582  00002A  0E00               	movlw	0
  1583  00002C  6F96               	movwf	simulate@stop& (0+255),b
  1584                           
  1585                           ; BSR set to: 0
  1586                           ;main.c: 80: int sorted[] = {0, 0, 0, 0};
  1587  00002E  EE20  F0BB         	lfsr	2,simulate@F3080
  1588  000032  EE10  F0AE         	lfsr	1,simulate@sorted
  1589  000036  0E07               	movlw	7
  1590  000038                     u2481:
  1591  000038  CFDB FFE3          	movff	plusw2,plusw1
  1592  00003C  06E8               	decf	wreg,f,c
  1593  00003E  E2FC               	bc	u2481
  1594                           
  1595                           ; BSR set to: 0
  1596                           ;main.c: 81: int AA = -1, C = -1, V9 = -1;
  1597  000040  0100               	movlb	0	; () banked
  1598  000042  69A4               	setf	simulate@AA& (0+255),b
  1599  000044  69A5               	setf	(simulate@AA+1)& (0+255),b
  1600                           
  1601                           ; BSR set to: 0
  1602  000046  0100               	movlb	0	; () banked
  1603  000048  69A6               	setf	simulate@C& (0+255),b
  1604  00004A  69A7               	setf	(simulate@C+1)& (0+255),b
  1605                           
  1606                           ; BSR set to: 0
  1607  00004C  0100               	movlb	0	; () banked
  1608  00004E  69A8               	setf	simulate@V9& (0+255),b
  1609  000050  69A9               	setf	(simulate@V9+1)& (0+255),b
  1610                           
  1611                           ; BSR set to: 0
  1612                           ;main.c: 82: LATC3 = 1;
  1613  000052  868B               	bsf	3979,3,c	;volatile
  1614                           
  1615                           ;main.c: 83: while (!stop) {
  1616  000054  D141               	goto	l3809
  1617  000056                     l3699:
  1618                           
  1619                           ; BSR set to: 0
  1620                           ;main.c: 84: captureKeypad();
  1621  000056  EC05  F00A         	call	_captureKeypad	;wreg free
  1622                           
  1623                           ;main.c: 85: AA = checkAA(sorted);
  1624  00005A  0EAE               	movlw	low simulate@sorted
  1625  00005C  0100               	movlb	0	; () banked
  1626  00005E  6F92               	movwf	checkAA@sorted& (0+255),b
  1627  000060  0E00               	movlw	high simulate@sorted
  1628  000062  0100               	movlb	0	; () banked
  1629  000064  6F93               	movwf	(checkAA@sorted+1)& (0+255),b
  1630  000066  EC1E  F006         	call	_checkAA	;wreg free
  1631  00006A  C092  F0A4         	movff	?_checkAA,simulate@AA
  1632  00006E  C093  F0A5         	movff	?_checkAA+1,simulate@AA+1
  1633                           
  1634                           ;main.c: 87: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(8000000/4000.0)));};
  1635  000072  0E00               	movlw	0
  1636  000074  0100               	movlb	0	; () banked
  1637  000076  6FAA               	movwf	simulate@i& (0+255),b
  1638  000078                     l3705:
  1639                           
  1640                           ; BSR set to: 0
  1641  000078  0E09               	movlw	9
  1642  00007A  0100               	movlb	0	; () banked
  1643  00007C  65AA               	cpfsgt	simulate@i& (0+255),b
  1644  00007E  D001               	goto	l3709
  1645  000080  D00C               	goto	l3713
  1646  000082                     l3709:
  1647                           
  1648                           ; BSR set to: 0
  1649  000082  0EFF               	movlw	255
  1650  000084  0100               	movlb	0	; () banked
  1651  000086  6F94               	movwf	??_simulate& (0+255),b
  1652  000088  0E8A               	movlw	138
  1653  00008A                     u2727:
  1654  00008A  2EE8               	decfsz	wreg,f,c
  1655  00008C  D7FE               	bra	u2727
  1656  00008E  2F94               	decfsz	??_simulate& (0+255),f,b
  1657  000090  D7FC               	bra	u2727
  1658  000092  F000               	nop	
  1659  000094  0100               	movlb	0	; () banked
  1660  000096  2BAA               	incf	simulate@i& (0+255),f,b
  1661  000098  D7EF               	goto	l3705
  1662  00009A                     l3713:
  1663                           
  1664                           ; BSR set to: 0
  1665                           ;main.c: 88: C = checkC(sorted);
  1666  00009A  0EAE               	movlw	low simulate@sorted
  1667  00009C  0100               	movlb	0	; () banked
  1668  00009E  6F92               	movwf	checkC@sorted& (0+255),b
  1669  0000A0  0E00               	movlw	high simulate@sorted
  1670  0000A2  0100               	movlb	0	; () banked
  1671  0000A4  6F93               	movwf	(checkC@sorted+1)& (0+255),b
  1672  0000A6  EC3A  F005         	call	_checkC	;wreg free
  1673  0000AA  C092  F0A6         	movff	?_checkC,simulate@C
  1674  0000AE  C093  F0A7         	movff	?_checkC+1,simulate@C+1
  1675                           
  1676                           ;main.c: 90: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(8000000/4000.0)));};
  1677  0000B2  0E00               	movlw	0
  1678  0000B4  0100               	movlb	0	; () banked
  1679  0000B6  6FAB               	movwf	simulate@i_182& (0+255),b
  1680  0000B8                     l3717:
  1681                           
  1682                           ; BSR set to: 0
  1683  0000B8  0E09               	movlw	9
  1684  0000BA  0100               	movlb	0	; () banked
  1685  0000BC  65AB               	cpfsgt	simulate@i_182& (0+255),b
  1686  0000BE  D001               	goto	l3721
  1687  0000C0  D00C               	goto	l3725
  1688  0000C2                     l3721:
  1689                           
  1690                           ; BSR set to: 0
  1691  0000C2  0EFF               	movlw	255
  1692  0000C4  0100               	movlb	0	; () banked
  1693  0000C6  6F94               	movwf	??_simulate& (0+255),b
  1694  0000C8  0E8A               	movlw	138
  1695  0000CA                     u2737:
  1696  0000CA  2EE8               	decfsz	wreg,f,c
  1697  0000CC  D7FE               	bra	u2737
  1698  0000CE  2F94               	decfsz	??_simulate& (0+255),f,b
  1699  0000D0  D7FC               	bra	u2737
  1700  0000D2  F000               	nop	
  1701  0000D4  0100               	movlb	0	; () banked
  1702  0000D6  2BAB               	incf	simulate@i_182& (0+255),f,b
  1703  0000D8  D7EF               	goto	l3717
  1704  0000DA                     l3725:
  1705                           
  1706                           ; BSR set to: 0
  1707                           ;main.c: 92: V9 = check9(sorted);
  1708  0000DA  0EAE               	movlw	low simulate@sorted
  1709  0000DC  0100               	movlb	0	; () banked
  1710  0000DE  6F92               	movwf	check9@sorted& (0+255),b
  1711  0000E0  0E00               	movlw	high simulate@sorted
  1712  0000E2  0100               	movlb	0	; () banked
  1713  0000E4  6F93               	movwf	(check9@sorted+1)& (0+255),b
  1714  0000E6  ECAC  F005         	call	_check9	;wreg free
  1715  0000EA  C092  F0A8         	movff	?_check9,simulate@V9
  1716  0000EE  C093  F0A9         	movff	?_check9+1,simulate@V9+1
  1717                           
  1718                           ;main.c: 93: lcdInst(0b10000000);;
  1719  0000F2  0E80               	movlw	128
  1720  0000F4  EC25  F00A         	call	_lcdInst
  1721                           
  1722                           ;main.c: 94: captureKeypad();
  1723  0000F8  EC05  F00A         	call	_captureKeypad	;wreg free
  1724                           
  1725                           ;main.c: 96: int portCW[] = {0, 0, 0};
  1726  0000FC  EE20  F0C9         	lfsr	2,simulate@F3089
  1727  000100  EE10  F098         	lfsr	1,simulate@portCW
  1728  000104  0E05               	movlw	5
  1729  000106                     u2531:
  1730  000106  CFDB FFE3          	movff	plusw2,plusw1
  1731  00010A  06E8               	decf	wreg,f,c
  1732  00010C  E2FC               	bc	u2531
  1733                           
  1734                           ;main.c: 97: int portCCW[] = {0, 0, 0};
  1735  00010E  EE20  F0C3         	lfsr	2,simulate@F3091
  1736  000112  EE10  F09E         	lfsr	1,simulate@portCCW
  1737  000116  0E05               	movlw	5
  1738  000118                     u2541:
  1739  000118  CFDB FFE3          	movff	plusw2,plusw1
  1740  00011C  06E8               	decf	wreg,f,c
  1741  00011E  E2FC               	bc	u2541
  1742                           
  1743                           ;main.c: 99: if (!AA) {
  1744  000120  0100               	movlb	0	; () banked
  1745  000122  51A4               	movf	simulate@AA& (0+255),w,b
  1746  000124  0100               	movlb	0	; () banked
  1747  000126  11A5               	iorwf	(simulate@AA+1)& (0+255),w,b
  1748  000128  A4D8               	btfss	status,2,c
  1749  00012A  D00C               	goto	l3741
  1750                           
  1751                           ; BSR set to: 0
  1752                           ;main.c: 100: portCCW[0] = 1;
  1753  00012C  0E00               	movlw	0
  1754  00012E  0100               	movlb	0	; () banked
  1755  000130  6F9F               	movwf	(simulate@portCCW+1)& (0+255),b
  1756  000132  0E01               	movlw	1
  1757  000134  6F9E               	movwf	simulate@portCCW& (0+255),b
  1758                           
  1759                           ; BSR set to: 0
  1760                           ;main.c: 101: printf("AAServoLeft         ");
  1761  000136  0ED5               	movlw	low STR_3
  1762  000138  6E32               	movwf	printf@f,c
  1763  00013A  0EFE               	movlw	high STR_3
  1764  00013C  6E33               	movwf	printf@f+1,c
  1765  00013E  EC9D  F002         	call	_printf	;wreg free
  1766                           
  1767                           ;main.c: 102: } else if (AA == 1) {
  1768  000142  D011               	goto	l3747
  1769  000144                     l3741:
  1770  000144  0100               	movlb	0	; () banked
  1771  000146  05A4               	decf	simulate@AA& (0+255),w,b
  1772  000148  0100               	movlb	0	; () banked
  1773  00014A  11A5               	iorwf	(simulate@AA+1)& (0+255),w,b
  1774  00014C  A4D8               	btfss	status,2,c
  1775  00014E  D00B               	goto	l3747
  1776                           
  1777                           ; BSR set to: 0
  1778                           ;main.c: 103: portCW[0] = 1;
  1779  000150  0E00               	movlw	0
  1780  000152  0100               	movlb	0	; () banked
  1781  000154  6F99               	movwf	(simulate@portCW+1)& (0+255),b
  1782  000156  0E01               	movlw	1
  1783  000158  6F98               	movwf	simulate@portCW& (0+255),b
  1784                           
  1785                           ; BSR set to: 0
  1786                           ;main.c: 104: printf("AAServoRight         ");
  1787  00015A  0E56               	movlw	low STR_4
  1788  00015C  6E32               	movwf	printf@f,c
  1789  00015E  0EFE               	movlw	high STR_4
  1790  000160  6E33               	movwf	printf@f+1,c
  1791  000162  EC9D  F002         	call	_printf	;wreg free
  1792  000166                     l3747:
  1793                           
  1794                           ;main.c: 105: }
  1795                           ;main.c: 107: lcdInst(0b10000000);;
  1796  000166  0E80               	movlw	128
  1797  000168  EC25  F00A         	call	_lcdInst
  1798                           
  1799                           ;main.c: 108: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(8000000/4000.0)));};
  1800  00016C  0E00               	movlw	0
  1801  00016E  0100               	movlb	0	; () banked
  1802  000170  6FAC               	movwf	simulate@i_189& (0+255),b
  1803  000172                     l3751:
  1804                           
  1805                           ; BSR set to: 0
  1806  000172  0E09               	movlw	9
  1807  000174  0100               	movlb	0	; () banked
  1808  000176  65AC               	cpfsgt	simulate@i_189& (0+255),b
  1809  000178  D001               	goto	l3755
  1810  00017A  D00C               	goto	l3759
  1811  00017C                     l3755:
  1812                           
  1813                           ; BSR set to: 0
  1814  00017C  0EFF               	movlw	255
  1815  00017E  0100               	movlb	0	; () banked
  1816  000180  6F94               	movwf	??_simulate& (0+255),b
  1817  000182  0E8A               	movlw	138
  1818  000184                     u2747:
  1819  000184  2EE8               	decfsz	wreg,f,c
  1820  000186  D7FE               	bra	u2747
  1821  000188  2F94               	decfsz	??_simulate& (0+255),f,b
  1822  00018A  D7FC               	bra	u2747
  1823  00018C  F000               	nop	
  1824  00018E  0100               	movlb	0	; () banked
  1825  000190  2BAC               	incf	simulate@i_189& (0+255),f,b
  1826  000192  D7EF               	goto	l3751
  1827  000194                     l3759:
  1828                           
  1829                           ; BSR set to: 0
  1830                           ;main.c: 110: if (!C) {
  1831  000194  0100               	movlb	0	; () banked
  1832  000196  51A6               	movf	simulate@C& (0+255),w,b
  1833  000198  0100               	movlb	0	; () banked
  1834  00019A  11A7               	iorwf	(simulate@C+1)& (0+255),w,b
  1835  00019C  A4D8               	btfss	status,2,c
  1836  00019E  D00C               	goto	l3765
  1837                           
  1838                           ; BSR set to: 0
  1839                           ;main.c: 111: portCCW[1] = 1;
  1840  0001A0  0E00               	movlw	0
  1841  0001A2  0100               	movlb	0	; () banked
  1842  0001A4  6FA1               	movwf	(simulate@portCCW+3)& (0+255),b
  1843  0001A6  0E01               	movlw	1
  1844  0001A8  6FA0               	movwf	(simulate@portCCW+2)& (0+255),b
  1845                           
  1846                           ; BSR set to: 0
  1847                           ;main.c: 112: printf("CServoLeft         ");
  1848  0001AA  0E50               	movlw	low STR_5
  1849  0001AC  6E32               	movwf	printf@f,c
  1850  0001AE  0EFF               	movlw	high STR_5
  1851  0001B0  6E33               	movwf	printf@f+1,c
  1852  0001B2  EC9D  F002         	call	_printf	;wreg free
  1853                           
  1854                           ;main.c: 113: } else if (C == 1) {
  1855  0001B6  D011               	goto	l3771
  1856  0001B8                     l3765:
  1857  0001B8  0100               	movlb	0	; () banked
  1858  0001BA  05A6               	decf	simulate@C& (0+255),w,b
  1859  0001BC  0100               	movlb	0	; () banked
  1860  0001BE  11A7               	iorwf	(simulate@C+1)& (0+255),w,b
  1861  0001C0  A4D8               	btfss	status,2,c
  1862  0001C2  D00B               	goto	l3771
  1863                           
  1864                           ; BSR set to: 0
  1865                           ;main.c: 114: portCW[1] = 1;
  1866  0001C4  0E00               	movlw	0
  1867  0001C6  0100               	movlb	0	; () banked
  1868  0001C8  6F9B               	movwf	(simulate@portCW+3)& (0+255),b
  1869  0001CA  0E01               	movlw	1
  1870  0001CC  6F9A               	movwf	(simulate@portCW+2)& (0+255),b
  1871                           
  1872                           ; BSR set to: 0
  1873                           ;main.c: 115: printf("CServoRight         ");
  1874  0001CE  0EFF               	movlw	low STR_6
  1875  0001D0  6E32               	movwf	printf@f,c
  1876  0001D2  0EFE               	movlw	high STR_6
  1877  0001D4  6E33               	movwf	printf@f+1,c
  1878  0001D6  EC9D  F002         	call	_printf	;wreg free
  1879  0001DA                     l3771:
  1880                           
  1881                           ;main.c: 116: }
  1882                           ;main.c: 118: lcdInst(0b10000000);;
  1883  0001DA  0E80               	movlw	128
  1884  0001DC  EC25  F00A         	call	_lcdInst
  1885                           
  1886                           ;main.c: 119: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(8000000/4000.0)));};
  1887  0001E0  0E00               	movlw	0
  1888  0001E2  0100               	movlb	0	; () banked
  1889  0001E4  6FAD               	movwf	simulate@i_192& (0+255),b
  1890  0001E6                     l3775:
  1891                           
  1892                           ; BSR set to: 0
  1893  0001E6  0E09               	movlw	9
  1894  0001E8  0100               	movlb	0	; () banked
  1895  0001EA  65AD               	cpfsgt	simulate@i_192& (0+255),b
  1896  0001EC  D001               	goto	l3779
  1897  0001EE  D00C               	goto	l3783
  1898  0001F0                     l3779:
  1899                           
  1900                           ; BSR set to: 0
  1901  0001F0  0EFF               	movlw	255
  1902  0001F2  0100               	movlb	0	; () banked
  1903  0001F4  6F94               	movwf	??_simulate& (0+255),b
  1904  0001F6  0E8A               	movlw	138
  1905  0001F8                     u2757:
  1906  0001F8  2EE8               	decfsz	wreg,f,c
  1907  0001FA  D7FE               	bra	u2757
  1908  0001FC  2F94               	decfsz	??_simulate& (0+255),f,b
  1909  0001FE  D7FC               	bra	u2757
  1910  000200  F000               	nop	
  1911  000202  0100               	movlb	0	; () banked
  1912  000204  2BAD               	incf	simulate@i_192& (0+255),f,b
  1913  000206  D7EF               	goto	l3775
  1914  000208                     l3783:
  1915                           
  1916                           ; BSR set to: 0
  1917                           ;main.c: 121: if (!V9) {
  1918  000208  0100               	movlb	0	; () banked
  1919  00020A  51A8               	movf	simulate@V9& (0+255),w,b
  1920  00020C  0100               	movlb	0	; () banked
  1921  00020E  11A9               	iorwf	(simulate@V9+1)& (0+255),w,b
  1922  000210  A4D8               	btfss	status,2,c
  1923  000212  D00C               	goto	l3789
  1924                           
  1925                           ; BSR set to: 0
  1926                           ;main.c: 122: portCCW[2] = 1;
  1927  000214  0E00               	movlw	0
  1928  000216  0100               	movlb	0	; () banked
  1929  000218  6FA3               	movwf	(simulate@portCCW+5)& (0+255),b
  1930  00021A  0E01               	movlw	1
  1931  00021C  6FA2               	movwf	(simulate@portCCW+4)& (0+255),b
  1932                           
  1933                           ; BSR set to: 0
  1934                           ;main.c: 123: printf("9ServoLeft         ");
  1935  00021E  0E3C               	movlw	low STR_7
  1936  000220  6E32               	movwf	printf@f,c
  1937  000222  0EFF               	movlw	high STR_7
  1938  000224  6E33               	movwf	printf@f+1,c
  1939  000226  EC9D  F002         	call	_printf	;wreg free
  1940                           
  1941                           ;main.c: 124: } else if (V9 == 1) {
  1942  00022A  D011               	goto	l3795
  1943  00022C                     l3789:
  1944  00022C  0100               	movlb	0	; () banked
  1945  00022E  05A8               	decf	simulate@V9& (0+255),w,b
  1946  000230  0100               	movlb	0	; () banked
  1947  000232  11A9               	iorwf	(simulate@V9+1)& (0+255),w,b
  1948  000234  A4D8               	btfss	status,2,c
  1949  000236  D00B               	goto	l3795
  1950                           
  1951                           ; BSR set to: 0
  1952                           ;main.c: 125: portCW[2] = 1;
  1953  000238  0E00               	movlw	0
  1954  00023A  0100               	movlb	0	; () banked
  1955  00023C  6F9D               	movwf	(simulate@portCW+5)& (0+255),b
  1956  00023E  0E01               	movlw	1
  1957  000240  6F9C               	movwf	(simulate@portCW+4)& (0+255),b
  1958                           
  1959                           ; BSR set to: 0
  1960                           ;main.c: 126: printf("9ServoRight         ");
  1961  000242  0EEA               	movlw	low STR_8
  1962  000244  6E32               	movwf	printf@f,c
  1963  000246  0EFE               	movlw	high STR_8
  1964  000248  6E33               	movwf	printf@f+1,c
  1965  00024A  EC9D  F002         	call	_printf	;wreg free
  1966  00024E                     l3795:
  1967                           
  1968                           ;main.c: 127: }
  1969                           ;main.c: 128: captureKeypad();
  1970  00024E  EC05  F00A         	call	_captureKeypad	;wreg free
  1971                           
  1972                           ;main.c: 130: CCW90(portCCW);
  1973  000252  0E9E               	movlw	low simulate@portCCW
  1974  000254  6E3B               	movwf	CCW90@port,c
  1975  000256  0E00               	movlw	high simulate@portCCW
  1976  000258  6E3C               	movwf	CCW90@port+1,c
  1977  00025A  ECE9  F009         	call	_CCW90	;wreg free
  1978                           
  1979                           ;main.c: 131: _delay((unsigned long)((20)*(8000000/4000.0)));
  1980  00025E  0E34               	movlw	52
  1981  000260  0100               	movlb	0	; () banked
  1982  000262  6F94               	movwf	??_simulate& (0+255),b
  1983  000264  0EF1               	movlw	241
  1984  000266                     u2767:
  1985  000266  2EE8               	decfsz	wreg,f,c
  1986  000268  D7FE               	bra	u2767
  1987  00026A  2F94               	decfsz	??_simulate& (0+255),f,b
  1988  00026C  D7FC               	bra	u2767
  1989  00026E  D000               	nop2	
  1990                           
  1991                           ;main.c: 132: CW90(portCW);
  1992  000270  0E98               	movlw	low simulate@portCW
  1993  000272  6E3B               	movwf	CW90@port,c
  1994  000274  0E00               	movlw	high simulate@portCW
  1995  000276  6E3C               	movwf	CW90@port+1,c
  1996  000278  ECDA  F009         	call	_CW90	;wreg free
  1997                           
  1998                           ;main.c: 133: LATC = 0b00001000;
  1999  00027C  0E08               	movlw	8
  2000  00027E  6E8B               	movwf	3979,c	;volatile
  2001                           
  2002                           ;main.c: 135: if (sorted[0] + sorted[1] + sorted[2] + sorted[3] >= 15) {
  2003  000280  0100               	movlb	0	; () banked
  2004  000282  51B2               	movf	(simulate@sorted+4)& (0+255),w,b
  2005  000284  0100               	movlb	0	; () banked
  2006  000286  25B0               	addwf	(simulate@sorted+2)& (0+255),w,b
  2007  000288  0100               	movlb	0	; () banked
  2008  00028A  6F94               	movwf	??_simulate& (0+255),b
  2009  00028C  0100               	movlb	0	; () banked
  2010  00028E  51B3               	movf	(simulate@sorted+5)& (0+255),w,b
  2011  000290  0100               	movlb	0	; () banked
  2012  000292  21B1               	addwfc	(simulate@sorted+3)& (0+255),w,b
  2013  000294  0100               	movlb	0	; () banked
  2014  000296  6F95               	movwf	(??_simulate+1)& (0+255),b
  2015  000298  0100               	movlb	0	; () banked
  2016  00029A  51B4               	movf	(simulate@sorted+6)& (0+255),w,b
  2017  00029C  0100               	movlb	0	; () banked
  2018  00029E  2794               	addwf	??_simulate& (0+255),f,b
  2019  0002A0  0100               	movlb	0	; () banked
  2020  0002A2  51B5               	movf	(simulate@sorted+7)& (0+255),w,b
  2021  0002A4  0100               	movlb	0	; () banked
  2022  0002A6  2395               	addwfc	(??_simulate+1)& (0+255),f,b
  2023  0002A8  0100               	movlb	0	; () banked
  2024  0002AA  51AE               	movf	simulate@sorted& (0+255),w,b
  2025  0002AC  0100               	movlb	0	; () banked
  2026  0002AE  2794               	addwf	??_simulate& (0+255),f,b
  2027  0002B0  0100               	movlb	0	; () banked
  2028  0002B2  51AF               	movf	(simulate@sorted+1)& (0+255),w,b
  2029  0002B4  0100               	movlb	0	; () banked
  2030  0002B6  2395               	addwfc	(??_simulate+1)& (0+255),f,b
  2031  0002B8  0100               	movlb	0	; () banked
  2032  0002BA  BF95               	btfsc	(??_simulate+1)& (0+255),7,b
  2033  0002BC  D00D               	goto	l3809
  2034  0002BE  0100               	movlb	0	; () banked
  2035  0002C0  5195               	movf	(??_simulate+1)& (0+255),w,b
  2036  0002C2  E105               	bnz	u2650
  2037  0002C4  0E0F               	movlw	15
  2038  0002C6  0100               	movlb	0	; () banked
  2039  0002C8  5D94               	subwf	??_simulate& (0+255),w,b
  2040  0002CA  A0D8               	btfss	status,0,c
  2041  0002CC  D005               	goto	l3809
  2042  0002CE                     u2650:
  2043                           
  2044                           ; BSR set to: 0
  2045                           ;main.c: 136: stop = 1;
  2046  0002CE  0E00               	movlw	0
  2047  0002D0  0100               	movlb	0	; () banked
  2048  0002D2  6F97               	movwf	(simulate@stop+1)& (0+255),b
  2049  0002D4  0E01               	movlw	1
  2050  0002D6  6F96               	movwf	simulate@stop& (0+255),b
  2051  0002D8                     l3809:
  2052                           
  2053                           ; BSR set to: 0
  2054  0002D8  0100               	movlb	0	; () banked
  2055  0002DA  5196               	movf	simulate@stop& (0+255),w,b
  2056  0002DC  0100               	movlb	0	; () banked
  2057  0002DE  1197               	iorwf	(simulate@stop+1)& (0+255),w,b
  2058  0002E0  B4D8               	btfsc	status,2,c
  2059  0002E2  D6B9               	goto	l3699
  2060                           
  2061                           ; BSR set to: 0
  2062                           ;main.c: 137: }
  2063                           ;main.c: 138: }
  2064                           ;main.c: 139: (INTCONbits.GIE = 0);
  2065  0002E4  9EF2               	bcf	intcon,7,c	;volatile
  2066                           
  2067                           ; BSR set to: 0
  2068                           ;main.c: 141: showInfo(179, sorted);
  2069  0002E6  0E00               	movlw	0
  2070  0002E8  6E3F               	movwf	showInfo@time+1,c
  2071  0002EA  0EB3               	movlw	179
  2072  0002EC  6E3E               	movwf	showInfo@time,c
  2073  0002EE  0EAE               	movlw	low simulate@sorted
  2074  0002F0  6E40               	movwf	showInfo@sorted,c
  2075  0002F2  0E00               	movlw	high simulate@sorted
  2076  0002F4  6E41               	movwf	showInfo@sorted+1,c
  2077  0002F6  EC80  F001         	call	_showInfo	;wreg free
  2078                           
  2079                           ;main.c: 142: stopMoving();
  2080  0002FA  ECF8  F009         	call	_stopMoving	;wreg free
  2081  0002FE  0012               	return	
  2082  000300                     __end_of_simulate:
  2083                           	opt stack 0
  2084                           tblptru	equ	0xFF8
  2085                           tblptrh	equ	0xFF7
  2086                           tblptrl	equ	0xFF6
  2087                           tablat	equ	0xFF5
  2088                           intcon	equ	0xFF2
  2089                           postinc0	equ	0xFEE
  2090                           wreg	equ	0xFE8
  2091                           postdec1	equ	0xFE5
  2092                           plusw1	equ	0xFE3
  2093                           fsr1l	equ	0xFE1
  2094                           plusw2	equ	0xFDB
  2095                           status	equ	0xFD8
  2096                           
  2097 ;; *************** function _stopMoving *****************
  2098 ;; Defined at:
  2099 ;;		line 29 in file "motors.c"
  2100 ;; Parameters:    Size  Location     Type
  2101 ;;		None
  2102 ;; Auto vars:     Size  Location     Type
  2103 ;;		None
  2104 ;; Return value:  Size  Location     Type
  2105 ;;                  1    wreg      void 
  2106 ;; Registers used:
  2107 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2108 ;; Tracked objects:
  2109 ;;		On entry : 0/0
  2110 ;;		On exit  : 0/0
  2111 ;;		Unchanged: 0/0
  2112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2116 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2117 ;;Total ram usage:        0 bytes
  2118 ;; Hardware stack levels used:    1
  2119 ;; Hardware stack levels required when called:    8
  2120 ;; This function calls:
  2121 ;;		_lcdInst
  2122 ;;		_printf
  2123 ;; This function is called by:
  2124 ;;		_simulate
  2125 ;;		_mainloop
  2126 ;; This function uses a non-reentrant model
  2127 ;;
  2128                           
  2129                           	psect	text2
  2130  0013F0                     __ptext2:
  2131                           	opt stack 0
  2132  0013F0                     _stopMoving:
  2133                           	opt stack 21
  2134                           
  2135                           ;motors.c: 30: (INTCONbits.GIE = 0);
  2136                           
  2137                           ;incstack = 0
  2138  0013F0  9EF2               	bcf	intcon,7,c	;volatile
  2139                           
  2140                           ;motors.c: 31: lcdInst(0b10000000);;
  2141  0013F2  0E80               	movlw	128
  2142  0013F4  EC25  F00A         	call	_lcdInst
  2143                           
  2144                           ;motors.c: 32: LATC = 0;
  2145  0013F8  0E00               	movlw	0
  2146  0013FA  6E8B               	movwf	3979,c	;volatile
  2147                           
  2148                           ;motors.c: 33: printf("Stopped          ");
  2149  0013FC  0E77               	movlw	low STR_27
  2150  0013FE  6E32               	movwf	printf@f,c
  2151  001400  0EFF               	movlw	high STR_27
  2152  001402  6E33               	movwf	printf@f+1,c
  2153  001404  EC9D  F002         	call	_printf	;wreg free
  2154  001408                     l226:
  2155  001408  D7FF               	goto	l226
  2156  00140A                     __end_of_stopMoving:
  2157                           	opt stack 0
  2158                           tblptru	equ	0xFF8
  2159                           tblptrh	equ	0xFF7
  2160                           tblptrl	equ	0xFF6
  2161                           tablat	equ	0xFF5
  2162                           intcon	equ	0xFF2
  2163                           postinc0	equ	0xFEE
  2164                           wreg	equ	0xFE8
  2165                           postdec1	equ	0xFE5
  2166                           plusw1	equ	0xFE3
  2167                           fsr1l	equ	0xFE1
  2168                           plusw2	equ	0xFDB
  2169                           status	equ	0xFD8
  2170                           
  2171 ;; *************** function _showInfo *****************
  2172 ;; Defined at:
  2173 ;;		line 30 in file "modules.c"
  2174 ;; Parameters:    Size  Location     Type
  2175 ;;  time            2   61[COMRAM] unsigned int 
  2176 ;;  sorted          2   63[COMRAM] PTR unsigned int 
  2177 ;;		 -> simulate@sorted(8), mainloop@sorted(8), 
  2178 ;; Auto vars:     Size  Location     Type
  2179 ;;  type            2    0[BANK0 ] int 
  2180 ;; Return value:  Size  Location     Type
  2181 ;;                  1    wreg      void 
  2182 ;; Registers used:
  2183 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2184 ;; Tracked objects:
  2185 ;;		On entry : 0/0
  2186 ;;		On exit  : 0/0
  2187 ;;		Unchanged: 0/0
  2188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2189 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2190 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2191 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2192 ;;      Totals:        12       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2193 ;;Total ram usage:       14 bytes
  2194 ;; Hardware stack levels used:    1
  2195 ;; Hardware stack levels required when called:    8
  2196 ;; This function calls:
  2197 ;;		___lcd_newline
  2198 ;;		_captureKeypad
  2199 ;;		_lcdInst
  2200 ;;		_printf
  2201 ;; This function is called by:
  2202 ;;		_simulate
  2203 ;;		_mainloop
  2204 ;; This function uses a non-reentrant model
  2205 ;;
  2206                           
  2207                           	psect	text3
  2208  000300                     __ptext3:
  2209                           	opt stack 0
  2210  000300                     _showInfo:
  2211                           	opt stack 21
  2212                           
  2213                           ;modules.c: 32: (INTCONbits.GIE = 0);
  2214                           
  2215                           ;incstack = 0
  2216  000300  9EF2               	bcf	intcon,7,c	;volatile
  2217                           
  2218                           ;modules.c: 33: lcdInst(0b10000000);;
  2219  000302  0E80               	movlw	128
  2220  000304  EC25  F00A         	call	_lcdInst
  2221                           
  2222                           ;modules.c: 34: printf("Sorting Complete          ");
  2223  000308  0E51               	movlw	low STR_12
  2224  00030A  6E32               	movwf	printf@f,c
  2225  00030C  0EFD               	movlw	high STR_12
  2226  00030E  6E33               	movwf	printf@f+1,c
  2227  000310  EC9D  F002         	call	_printf	;wreg free
  2228                           
  2229                           ;modules.c: 35: _delay((unsigned long)((1000)*(8000000/4000.0)));
  2230  000314  0E0B               	movlw	11
  2231  000316  6E43               	movwf	(??_showInfo+1)& (0+255),c
  2232  000318  0E26               	movlw	38
  2233  00031A  6E42               	movwf	??_showInfo& (0+255),c
  2234  00031C  0E5E               	movlw	94
  2235  00031E                     u2777:
  2236  00031E  2EE8               	decfsz	wreg,f,c
  2237  000320  D7FE               	bra	u2777
  2238  000322  2E42               	decfsz	??_showInfo& (0+255),f,c
  2239  000324  D7FC               	bra	u2777
  2240  000326  2E43               	decfsz	(??_showInfo+1)& (0+255),f,c
  2241  000328  D7FA               	bra	u2777
  2242                           
  2243                           ;modules.c: 36: lcdInst(0b10000000);;
  2244  00032A  0E80               	movlw	128
  2245  00032C  EC25  F00A         	call	_lcdInst
  2246                           
  2247                           ;modules.c: 37: printf("Press a number          ");
  2248  000330  0E6C               	movlw	low STR_13
  2249  000332  6E32               	movwf	printf@f,c
  2250  000334  0EFD               	movlw	high STR_13
  2251  000336  6E33               	movwf	printf@f+1,c
  2252  000338  EC9D  F002         	call	_printf	;wreg free
  2253                           
  2254                           ;modules.c: 38: __lcd_newline();
  2255  00033C  EC3B  F00A         	call	___lcd_newline	;wreg free
  2256                           
  2257                           ;modules.c: 39: printf("For more info          ");
  2258  000340  0EB5               	movlw	low STR_14
  2259  000342  6E32               	movwf	printf@f,c
  2260  000344  0EFD               	movlw	high STR_14
  2261  000346  6E33               	movwf	printf@f+1,c
  2262  000348  EC9D  F002         	call	_printf	;wreg free
  2263                           
  2264                           ;modules.c: 40: int type = 0;
  2265  00034C  0E00               	movlw	0
  2266  00034E  0100               	movlb	0	; () banked
  2267  000350  6F81               	movwf	(showInfo@type+1)& (0+255),b
  2268  000352  0E00               	movlw	0
  2269  000354  6F80               	movwf	showInfo@type& (0+255),b
  2270  000356                     l3617:
  2271                           
  2272                           ;modules.c: 42: {
  2273                           ;modules.c: 43: type = captureKeypad();
  2274  000356  EC05  F00A         	call	_captureKeypad	;wreg free
  2275  00035A  C026  F080         	movff	?_captureKeypad,showInfo@type
  2276  00035E  C027  F081         	movff	?_captureKeypad+1,showInfo@type+1
  2277                           
  2278                           ;modules.c: 44: switch (type)
  2279  000362  D0CC               	goto	l3657
  2280  000364                     l3619:
  2281                           
  2282                           ;modules.c: 47: lcdInst(0b10000000);;
  2283  000364  0E80               	movlw	128
  2284  000366  EC25  F00A         	call	_lcdInst
  2285                           
  2286                           ;modules.c: 48: printf("Time Elapsed:          ");
  2287  00036A  0E85               	movlw	low STR_15
  2288  00036C  6E32               	movwf	printf@f,c
  2289  00036E  0EFD               	movlw	high STR_15
  2290  000370  6E33               	movwf	printf@f+1,c
  2291  000372  EC9D  F002         	call	_printf	;wreg free
  2292                           
  2293                           ;modules.c: 49: __lcd_newline();
  2294  000376  EC3B  F00A         	call	___lcd_newline	;wreg free
  2295                           
  2296                           ;modules.c: 50: printf("%d seconds          ", time);
  2297  00037A  0EAB               	movlw	low STR_16
  2298  00037C  6E32               	movwf	printf@f,c
  2299  00037E  0EFE               	movlw	high STR_16
  2300  000380  6E33               	movwf	printf@f+1,c
  2301  000382  C03E  F034         	movff	showInfo@time,?_printf+2
  2302  000386  C03F  F035         	movff	showInfo@time+1,?_printf+3
  2303  00038A  EC9D  F002         	call	_printf	;wreg free
  2304                           
  2305                           ;modules.c: 51: break;
  2306  00038E  D7E3               	goto	l3617
  2307  000390                     l3625:
  2308                           
  2309                           ;modules.c: 53: lcdInst(0b10000000);;
  2310  000390  0E80               	movlw	128
  2311  000392  EC25  F00A         	call	_lcdInst
  2312                           
  2313                           ;modules.c: 54: printf("Total Sorted:          ");
  2314  000396  0E9D               	movlw	low STR_17
  2315  000398  6E32               	movwf	printf@f,c
  2316  00039A  0EFD               	movlw	high STR_17
  2317  00039C  6E33               	movwf	printf@f+1,c
  2318  00039E  EC9D  F002         	call	_printf	;wreg free
  2319                           
  2320                           ;modules.c: 55: __lcd_newline();
  2321  0003A2  EC3B  F00A         	call	___lcd_newline	;wreg free
  2322                           
  2323                           ;modules.c: 56: printf("%d batteries          ", sorted[0] + sorted[1] + sorted[2] + sor
      +                          ted[3]);
  2324  0003A6  0E13               	movlw	low STR_18
  2325  0003A8  6E32               	movwf	printf@f,c
  2326  0003AA  0EFE               	movlw	high STR_18
  2327  0003AC  6E33               	movwf	printf@f+1,c
  2328  0003AE  EE20 F006          	lfsr	2,6
  2329  0003B2  5040               	movf	showInfo@sorted,w,c
  2330  0003B4  26D9               	addwf	fsr2l,f,c
  2331  0003B6  5041               	movf	showInfo@sorted+1,w,c
  2332  0003B8  22DA               	addwfc	fsr2h,f,c
  2333  0003BA  CFDE F042          	movff	postinc2,??_showInfo
  2334  0003BE  CFDD F043          	movff	postdec2,??_showInfo+1
  2335  0003C2  EE20 F004          	lfsr	2,4
  2336  0003C6  5040               	movf	showInfo@sorted,w,c
  2337  0003C8  26D9               	addwf	fsr2l,f,c
  2338  0003CA  5041               	movf	showInfo@sorted+1,w,c
  2339  0003CC  22DA               	addwfc	fsr2h,f,c
  2340  0003CE  CFDE F044          	movff	postinc2,??_showInfo+2
  2341  0003D2  CFDD F045          	movff	postdec2,??_showInfo+3
  2342  0003D6  EE20 F002          	lfsr	2,2
  2343  0003DA  5040               	movf	showInfo@sorted,w,c
  2344  0003DC  26D9               	addwf	fsr2l,f,c
  2345  0003DE  5041               	movf	showInfo@sorted+1,w,c
  2346  0003E0  22DA               	addwfc	fsr2h,f,c
  2347  0003E2  CFDE F046          	movff	postinc2,??_showInfo+4
  2348  0003E6  CFDD F047          	movff	postdec2,??_showInfo+5
  2349  0003EA  C040  FFD9         	movff	showInfo@sorted,fsr2l
  2350  0003EE  C041  FFDA         	movff	showInfo@sorted+1,fsr2h
  2351  0003F2  CFDE F048          	movff	postinc2,??_showInfo+6
  2352  0003F6  CFDD F049          	movff	postdec2,??_showInfo+7
  2353  0003FA  5046               	movf	??_showInfo+4,w,c
  2354  0003FC  2648               	addwf	??_showInfo+6,f,c
  2355  0003FE  5047               	movf	??_showInfo+5,w,c
  2356  000400  2249               	addwfc	??_showInfo+7,f,c
  2357  000402  5044               	movf	??_showInfo+2,w,c
  2358  000404  2648               	addwf	??_showInfo+6,f,c
  2359  000406  5045               	movf	??_showInfo+3,w,c
  2360  000408  2249               	addwfc	??_showInfo+7,f,c
  2361  00040A  5042               	movf	??_showInfo,w,c
  2362  00040C  2448               	addwf	??_showInfo+6,w,c
  2363  00040E  6E34               	movwf	?_printf+2,c
  2364  000410  5043               	movf	??_showInfo+1,w,c
  2365  000412  2049               	addwfc	??_showInfo+7,w,c
  2366  000414  6E35               	movwf	?_printf+3,c
  2367  000416  EC9D  F002         	call	_printf	;wreg free
  2368                           
  2369                           ;modules.c: 57: break;
  2370  00041A  D79D               	goto	l3617
  2371  00041C                     l3631:
  2372                           
  2373                           ;modules.c: 59: lcdInst(0b10000000);;
  2374  00041C  0E80               	movlw	128
  2375  00041E  EC25  F00A         	call	_lcdInst
  2376                           
  2377                           ;modules.c: 60: printf("AA Sorted:          ");
  2378  000422  0E81               	movlw	low STR_19
  2379  000424  6E32               	movwf	printf@f,c
  2380  000426  0EFE               	movlw	high STR_19
  2381  000428  6E33               	movwf	printf@f+1,c
  2382  00042A  EC9D  F002         	call	_printf	;wreg free
  2383                           
  2384                           ;modules.c: 61: __lcd_newline();
  2385  00042E  EC3B  F00A         	call	___lcd_newline	;wreg free
  2386                           
  2387                           ;modules.c: 62: printf("%d          ", sorted[0]);
  2388  000432  0EF1               	movlw	low STR_20
  2389  000434  6E32               	movwf	printf@f,c
  2390  000436  0EFF               	movlw	high STR_20
  2391  000438  6E33               	movwf	printf@f+1,c
  2392  00043A  C040  FFD9         	movff	showInfo@sorted,fsr2l
  2393  00043E  C041  FFDA         	movff	showInfo@sorted+1,fsr2h
  2394  000442  CFDE F034          	movff	postinc2,?_printf+2
  2395  000446  CFDD F035          	movff	postdec2,?_printf+3
  2396  00044A  EC9D  F002         	call	_printf	;wreg free
  2397                           
  2398                           ;modules.c: 63: break;
  2399  00044E  D783               	goto	l3617
  2400  000450                     l3637:
  2401                           
  2402                           ;modules.c: 65: lcdInst(0b10000000);;
  2403  000450  0E80               	movlw	128
  2404  000452  EC25  F00A         	call	_lcdInst
  2405                           
  2406                           ;modules.c: 66: printf("C Sorted:          ");
  2407  000456  0E14               	movlw	low STR_21
  2408  000458  6E32               	movwf	printf@f,c
  2409  00045A  0EFF               	movlw	high STR_21
  2410  00045C  6E33               	movwf	printf@f+1,c
  2411  00045E  EC9D  F002         	call	_printf	;wreg free
  2412                           
  2413                           ;modules.c: 67: __lcd_newline();
  2414  000462  EC3B  F00A         	call	___lcd_newline	;wreg free
  2415                           
  2416                           ;modules.c: 68: printf("%d          ", sorted[1]);
  2417  000466  0EF1               	movlw	low STR_20
  2418  000468  6E32               	movwf	printf@f,c
  2419  00046A  0EFF               	movlw	high STR_20
  2420  00046C  6E33               	movwf	printf@f+1,c
  2421  00046E  EE20 F002          	lfsr	2,2
  2422  000472  5040               	movf	showInfo@sorted,w,c
  2423  000474  26D9               	addwf	fsr2l,f,c
  2424  000476  5041               	movf	showInfo@sorted+1,w,c
  2425  000478  22DA               	addwfc	fsr2h,f,c
  2426  00047A  CFDE F034          	movff	postinc2,?_printf+2
  2427  00047E  CFDD F035          	movff	postdec2,?_printf+3
  2428  000482  EC9D  F002         	call	_printf	;wreg free
  2429                           
  2430                           ;modules.c: 69: break;
  2431  000486  D767               	goto	l3617
  2432  000488                     l3643:
  2433                           
  2434                           ;modules.c: 71: lcdInst(0b10000000);;
  2435  000488  0E80               	movlw	128
  2436  00048A  EC25  F00A         	call	_lcdInst
  2437                           
  2438                           ;modules.c: 72: printf("9V Sorted:          ");
  2439  00048E  0E96               	movlw	low STR_23
  2440  000490  6E32               	movwf	printf@f,c
  2441  000492  0EFE               	movlw	high STR_23
  2442  000494  6E33               	movwf	printf@f+1,c
  2443  000496  EC9D  F002         	call	_printf	;wreg free
  2444                           
  2445                           ;modules.c: 73: __lcd_newline();
  2446  00049A  EC3B  F00A         	call	___lcd_newline	;wreg free
  2447                           
  2448                           ;modules.c: 74: printf("%d          ", sorted[2]);
  2449  00049E  0EF1               	movlw	low STR_20
  2450  0004A0  6E32               	movwf	printf@f,c
  2451  0004A2  0EFF               	movlw	high STR_20
  2452  0004A4  6E33               	movwf	printf@f+1,c
  2453  0004A6  EE20 F004          	lfsr	2,4
  2454  0004AA  5040               	movf	showInfo@sorted,w,c
  2455  0004AC  26D9               	addwf	fsr2l,f,c
  2456  0004AE  5041               	movf	showInfo@sorted+1,w,c
  2457  0004B0  22DA               	addwfc	fsr2h,f,c
  2458  0004B2  CFDE F034          	movff	postinc2,?_printf+2
  2459  0004B6  CFDD F035          	movff	postdec2,?_printf+3
  2460  0004BA  EC9D  F002         	call	_printf	;wreg free
  2461                           
  2462                           ;modules.c: 75: break;
  2463  0004BE  D74B               	goto	l3617
  2464  0004C0                     l3649:
  2465                           
  2466                           ;modules.c: 77: lcdInst(0b10000000);;
  2467  0004C0  0E80               	movlw	128
  2468  0004C2  EC25  F00A         	call	_lcdInst
  2469                           
  2470                           ;modules.c: 78: printf("Uncharged:          ");
  2471  0004C6  0E6C               	movlw	low STR_25
  2472  0004C8  6E32               	movwf	printf@f,c
  2473  0004CA  0EFE               	movlw	high STR_25
  2474  0004CC  6E33               	movwf	printf@f+1,c
  2475  0004CE  EC9D  F002         	call	_printf	;wreg free
  2476                           
  2477                           ;modules.c: 79: __lcd_newline();
  2478  0004D2  EC3B  F00A         	call	___lcd_newline	;wreg free
  2479                           
  2480                           ;modules.c: 80: printf("%d          ", sorted[3]);
  2481  0004D6  0EF1               	movlw	low STR_20
  2482  0004D8  6E32               	movwf	printf@f,c
  2483  0004DA  0EFF               	movlw	high STR_20
  2484  0004DC  6E33               	movwf	printf@f+1,c
  2485  0004DE  EE20 F006          	lfsr	2,6
  2486  0004E2  5040               	movf	showInfo@sorted,w,c
  2487  0004E4  26D9               	addwf	fsr2l,f,c
  2488  0004E6  5041               	movf	showInfo@sorted+1,w,c
  2489  0004E8  22DA               	addwfc	fsr2h,f,c
  2490  0004EA  CFDE F034          	movff	postinc2,?_printf+2
  2491  0004EE  CFDD F035          	movff	postdec2,?_printf+3
  2492  0004F2  EC9D  F002         	call	_printf	;wreg free
  2493                           
  2494                           ;modules.c: 81: break;
  2495  0004F6  D72F               	goto	l3617
  2496  0004F8                     l187:
  2497  0004F8  00FF               	reset		;# 
  2498                           
  2499                           ;modules.c: 87: }
  2500                           
  2501                           ;modules.c: 86: break;
  2502                           
  2503                           ;modules.c: 85: default:
  2504  0004FA  D72D               	goto	l3617
  2505  0004FC                     l3657:
  2506  0004FC  C080  F042         	movff	showInfo@type,??_showInfo
  2507  000500  C081  F043         	movff	showInfo@type+1,??_showInfo+1
  2508                           
  2509                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2510                           ; Switch size 1, requested type "space"
  2511                           ; Number of cases is 1, Range of values is 0 to 0
  2512                           ; switch strategies available:
  2513                           ; Name         Instructions Cycles
  2514                           ; simple_byte            4     3 (average)
  2515                           ;	Chosen strategy is simple_byte
  2516  000504  5043               	movf	??_showInfo+1,w,c
  2517  000506  0A00               	xorlw	0	; case 0
  2518  000508  A4D8               	btfss	status,2,c
  2519  00050A  D725               	goto	l3617
  2520                           
  2521                           ; Switch size 1, requested type "space"
  2522                           ; Number of cases is 7, Range of values is 0 to 15
  2523                           ; switch strategies available:
  2524                           ; Name         Instructions Cycles
  2525                           ; simple_byte           22    12 (average)
  2526                           ;	Chosen strategy is simple_byte
  2527  00050C  5042               	movf	??_showInfo,w,c
  2528  00050E  0A00               	xorlw	0	; case 0
  2529  000510  B4D8               	btfsc	status,2,c
  2530  000512  D728               	goto	l3619
  2531  000514  0A01               	xorlw	1	; case 1
  2532  000516  B4D8               	btfsc	status,2,c
  2533  000518  D73B               	goto	l3625
  2534  00051A  0A03               	xorlw	3	; case 2
  2535  00051C  B4D8               	btfsc	status,2,c
  2536  00051E  D77E               	goto	l3631
  2537  000520  0A01               	xorlw	1	; case 3
  2538  000522  B4D8               	btfsc	status,2,c
  2539  000524  D795               	goto	l3637
  2540  000526  0A07               	xorlw	7	; case 4
  2541  000528  B4D8               	btfsc	status,2,c
  2542  00052A  D7AE               	goto	l3643
  2543  00052C  0A01               	xorlw	1	; case 5
  2544  00052E  B4D8               	btfsc	status,2,c
  2545  000530  D7C7               	goto	l3649
  2546  000532  0A0A               	xorlw	10	; case 15
  2547  000534  B4D8               	btfsc	status,2,c
  2548  000536  D7E0               	goto	l187
  2549  000538  D70E               	goto	l3617
  2550  00053A                     __end_of_showInfo:
  2551                           	opt stack 0
  2552                           tblptru	equ	0xFF8
  2553                           tblptrh	equ	0xFF7
  2554                           tblptrl	equ	0xFF6
  2555                           tablat	equ	0xFF5
  2556                           intcon	equ	0xFF2
  2557                           postinc0	equ	0xFEE
  2558                           wreg	equ	0xFE8
  2559                           postdec1	equ	0xFE5
  2560                           plusw1	equ	0xFE3
  2561                           fsr1l	equ	0xFE1
  2562                           postinc2	equ	0xFDE
  2563                           postdec2	equ	0xFDD
  2564                           plusw2	equ	0xFDB
  2565                           fsr2h	equ	0xFDA
  2566                           fsr2l	equ	0xFD9
  2567                           status	equ	0xFD8
  2568                           
  2569 ;; *************** function _captureKeypad *****************
  2570 ;; Defined at:
  2571 ;;		line 5 in file "modules.c"
  2572 ;; Parameters:    Size  Location     Type
  2573 ;;		None
  2574 ;; Auto vars:     Size  Location     Type
  2575 ;;  keypress        1   39[COMRAM] unsigned char 
  2576 ;; Return value:  Size  Location     Type
  2577 ;;                  2   37[COMRAM] unsigned int 
  2578 ;; Registers used:
  2579 ;;		wreg, status,2, status,0
  2580 ;; Tracked objects:
  2581 ;;		On entry : 0/0
  2582 ;;		On exit  : 0/0
  2583 ;;		Unchanged: 0/0
  2584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2585 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2586 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2588 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2589 ;;Total ram usage:        3 bytes
  2590 ;; Hardware stack levels used:    1
  2591 ;; Hardware stack levels required when called:    5
  2592 ;; This function calls:
  2593 ;;		Nothing
  2594 ;; This function is called by:
  2595 ;;		_simulate
  2596 ;;		_showInfo
  2597 ;; This function uses a non-reentrant model
  2598 ;;
  2599                           
  2600                           	psect	text4
  2601  00140A                     __ptext4:
  2602                           	opt stack 0
  2603  00140A                     _captureKeypad:
  2604                           	opt stack 23
  2605  00140A                     l165:
  2606  00140A  A281               	btfss	3969,1,c	;volatile
  2607  00140C  D7FE               	goto	l165
  2608                           
  2609                           ;modules.c: 9: unsigned char keypress = (PORTB & 0xF0) >> 4;
  2610  00140E  3881               	swapf	3969,w,c	;volatile
  2611  001410  0B0F               	andlw	15
  2612  001412  0B0F               	andlw	15
  2613  001414  6E28               	movwf	captureKeypad@keypress,c
  2614  001416                     l168:
  2615  001416  B281               	btfsc	3969,1,c	;volatile
  2616  001418  D7FE               	goto	l168
  2617                           
  2618                           ;modules.c: 12: INT1IF = 0;
  2619  00141A  90F0               	bcf	intcon3,0,c	;volatile
  2620                           
  2621                           ;modules.c: 14: return keypress;
  2622  00141C  C028  F026         	movff	captureKeypad@keypress,?_captureKeypad
  2623  001420  6A27               	clrf	?_captureKeypad+1,c
  2624  001422  0012               	return		;funcret
  2625  001424                     __end_of_captureKeypad:
  2626                           	opt stack 0
  2627                           tblptru	equ	0xFF8
  2628                           tblptrh	equ	0xFF7
  2629                           tblptrl	equ	0xFF6
  2630                           tablat	equ	0xFF5
  2631                           intcon	equ	0xFF2
  2632                           intcon3	equ	0xFF0
  2633                           postinc0	equ	0xFEE
  2634                           wreg	equ	0xFE8
  2635                           postdec1	equ	0xFE5
  2636                           plusw1	equ	0xFE3
  2637                           fsr1l	equ	0xFE1
  2638                           postinc2	equ	0xFDE
  2639                           postdec2	equ	0xFDD
  2640                           plusw2	equ	0xFDB
  2641                           fsr2h	equ	0xFDA
  2642                           fsr2l	equ	0xFD9
  2643                           status	equ	0xFD8
  2644                           
  2645 ;; *************** function _checkC *****************
  2646 ;; Defined at:
  2647 ;;		line 52 in file "sensors.c"
  2648 ;; Parameters:    Size  Location     Type
  2649 ;;  sorted          2   18[BANK0 ] PTR int 
  2650 ;;		 -> simulate@sorted(8), mainloop@sorted(8), 
  2651 ;; Auto vars:     Size  Location     Type
  2652 ;;		None
  2653 ;; Return value:  Size  Location     Type
  2654 ;;                  2   18[BANK0 ] int 
  2655 ;; Registers used:
  2656 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2657 ;; Tracked objects:
  2658 ;;		On entry : 0/0
  2659 ;;		On exit  : 0/0
  2660 ;;		Unchanged: 0/0
  2661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2662 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2665 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2666 ;;Total ram usage:        2 bytes
  2667 ;; Hardware stack levels used:    1
  2668 ;; Hardware stack levels required when called:    9
  2669 ;; This function calls:
  2670 ;;		_AD
  2671 ;;		___lcd_newline
  2672 ;;		_checkV
  2673 ;;		_lcdInst
  2674 ;;		_printf
  2675 ;; This function is called by:
  2676 ;;		_simulate
  2677 ;;		_mainloop
  2678 ;; This function uses a non-reentrant model
  2679 ;;
  2680                           
  2681                           	psect	text5
  2682  000A74                     __ptext5:
  2683                           	opt stack 0
  2684  000A74                     _checkC:
  2685                           	opt stack 20
  2686                           
  2687                           ;sensors.c: 54: lcdInst(0b10000000);;
  2688                           
  2689                           ;incstack = 0
  2690  000A74  0E80               	movlw	128
  2691  000A76  EC25  F00A         	call	_lcdInst
  2692                           
  2693                           ;sensors.c: 55: printf("C:          ");
  2694  000A7A  0EE4               	movlw	low STR_33
  2695  000A7C  6E32               	movwf	printf@f,c
  2696  000A7E  0EFF               	movlw	high STR_33
  2697  000A80  6E33               	movwf	printf@f+1,c
  2698  000A82  EC9D  F002         	call	_printf	;wreg free
  2699                           
  2700                           ;sensors.c: 56: __lcd_newline();
  2701  000A86  EC3B  F00A         	call	___lcd_newline	;wreg free
  2702                           
  2703                           ;sensors.c: 57: switch (checkV(AD(1), 1.5)) {
  2704  000A8A  D03C               	goto	l3545
  2705  000A8C                     l3517:
  2706                           
  2707                           ;sensors.c: 59: printf("charged C          ");
  2708  000A8C  0E2C               	movlw	low (STR_35+2)
  2709  000A8E  6E32               	movwf	printf@f,c
  2710  000A90  0EFE               	movlw	high (STR_35+2)
  2711  000A92  6E33               	movwf	printf@f+1,c
  2712  000A94  EC9D  F002         	call	_printf	;wreg free
  2713                           
  2714                           ;sensors.c: 60: sorted[1]++;
  2715  000A98  0100               	movlb	0	; () banked
  2716  000A9A  EE20 F002          	lfsr	2,2
  2717  000A9E  5192               	movf	checkC@sorted& (0+255),w,b
  2718  000AA0  26D9               	addwf	fsr2l,f,c
  2719  000AA2  5193               	movf	(checkC@sorted+1)& (0+255),w,b
  2720  000AA4  22DA               	addwfc	fsr2h,f,c
  2721  000AA6  2ADE               	incf	postinc2,f,c
  2722  000AA8  0E00               	movlw	0
  2723  000AAA  22DD               	addwfc	postdec2,f,c
  2724                           
  2725                           ; BSR set to: 0
  2726                           ;sensors.c: 61: return 1;
  2727  000AAC  0E00               	movlw	0
  2728  000AAE  0100               	movlb	0	; () banked
  2729  000AB0  6F93               	movwf	(?_checkC+1)& (0+255),b
  2730  000AB2  0E01               	movlw	1
  2731  000AB4  6F92               	movwf	?_checkC& (0+255),b
  2732                           
  2733                           ; BSR set to: 0
  2734  000AB6  0012               	return	
  2735  000AB8                     l3525:
  2736                           
  2737                           ; BSR set to: 0
  2738                           ;sensors.c: 63: printf("uncharged C          ");
  2739  000AB8  0E2A               	movlw	low STR_35
  2740  000ABA  6E32               	movwf	printf@f,c
  2741  000ABC  0EFE               	movlw	high STR_35
  2742  000ABE  6E33               	movwf	printf@f+1,c
  2743  000AC0  EC9D  F002         	call	_printf	;wreg free
  2744                           
  2745                           ;sensors.c: 64: sorted[3]++;
  2746  000AC4  0100               	movlb	0	; () banked
  2747  000AC6  EE20 F006          	lfsr	2,6
  2748  000ACA  5192               	movf	checkC@sorted& (0+255),w,b
  2749  000ACC  26D9               	addwf	fsr2l,f,c
  2750  000ACE  5193               	movf	(checkC@sorted+1)& (0+255),w,b
  2751  000AD0  22DA               	addwfc	fsr2h,f,c
  2752  000AD2  2ADE               	incf	postinc2,f,c
  2753  000AD4  0E00               	movlw	0
  2754  000AD6  22DD               	addwfc	postdec2,f,c
  2755                           
  2756                           ; BSR set to: 0
  2757                           ;sensors.c: 65: return 0;
  2758  000AD8  0E00               	movlw	0
  2759  000ADA  0100               	movlb	0	; () banked
  2760  000ADC  6F93               	movwf	(?_checkC+1)& (0+255),b
  2761  000ADE  0E00               	movlw	0
  2762  000AE0  6F92               	movwf	?_checkC& (0+255),b
  2763                           
  2764                           ; BSR set to: 0
  2765  000AE2  0012               	return	
  2766  000AE4                     l3533:
  2767                           
  2768                           ; BSR set to: 0
  2769                           ;sensors.c: 67: printf("no C          ");
  2770  000AE4  0EB9               	movlw	low STR_36
  2771  000AE6  6E32               	movwf	printf@f,c
  2772  000AE8  0EFF               	movlw	high STR_36
  2773  000AEA  6E33               	movwf	printf@f+1,c
  2774  000AEC  EC9D  F002         	call	_printf	;wreg free
  2775                           
  2776                           ;sensors.c: 68: return -1;
  2777  000AF0  0100               	movlb	0	; () banked
  2778  000AF2  6992               	setf	?_checkC& (0+255),b
  2779  000AF4  6993               	setf	(?_checkC+1)& (0+255),b
  2780                           
  2781                           ; BSR set to: 0
  2782  000AF6  0012               	return	
  2783  000AF8                     l3539:
  2784                           
  2785                           ; BSR set to: 0
  2786                           ;sensors.c: 70: return 0;
  2787  000AF8  0E00               	movlw	0
  2788  000AFA  0100               	movlb	0	; () banked
  2789  000AFC  6F93               	movwf	(?_checkC+1)& (0+255),b
  2790  000AFE  0E00               	movlw	0
  2791  000B00  6F92               	movwf	?_checkC& (0+255),b
  2792                           
  2793                           ; BSR set to: 0
  2794                           ;sensors.c: 71: }
  2795                           
  2796                           ; BSR set to: 0
  2797  000B02  0012               	return	
  2798  000B04                     l3545:
  2799  000B04  0E01               	movlw	1
  2800  000B06  EC8B  F009         	call	_AD
  2801  000B0A  C026  F08C         	movff	?_AD,checkV@voltage
  2802  000B0E  C027  F08D         	movff	?_AD+1,checkV@voltage+1
  2803  000B12  0E00               	movlw	0
  2804  000B14  0100               	movlb	0	; () banked
  2805  000B16  6F8E               	movwf	checkV@max& (0+255),b
  2806  000B18  0EC0               	movlw	192
  2807  000B1A  0100               	movlb	0	; () banked
  2808  000B1C  6F8F               	movwf	(checkV@max+1)& (0+255),b
  2809  000B1E  0E3F               	movlw	63
  2810  000B20  0100               	movlb	0	; () banked
  2811  000B22  6F90               	movwf	(checkV@max+2)& (0+255),b
  2812  000B24  EC8D  F006         	call	_checkV	;wreg free
  2813                           
  2814                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  2815                           ; Switch size 1, requested type "space"
  2816                           ; Number of cases is 2, Range of values is 0 to 255
  2817                           ; switch strategies available:
  2818                           ; Name         Instructions Cycles
  2819                           ; simple_byte            7     4 (average)
  2820                           ;	Chosen strategy is simple_byte
  2821  000B28  0100               	movlb	0	; () banked
  2822  000B2A  518D               	movf	(?_checkV+1)& (0+255),w,b
  2823  000B2C  0A00               	xorlw	0	; case 0
  2824  000B2E  B4D8               	btfsc	status,2,c
  2825  000B30  D004               	goto	l4015
  2826  000B32  0AFF               	xorlw	255	; case 255
  2827  000B34  B4D8               	btfsc	status,2,c
  2828  000B36  D00A               	goto	l4017
  2829  000B38  D7DF               	goto	l3539
  2830  000B3A                     l4015:
  2831                           
  2832                           ; BSR set to: 0
  2833                           ; Switch size 1, requested type "space"
  2834                           ; Number of cases is 2, Range of values is 0 to 1
  2835                           ; switch strategies available:
  2836                           ; Name         Instructions Cycles
  2837                           ; simple_byte            7     4 (average)
  2838                           ;	Chosen strategy is simple_byte
  2839  000B3A  0100               	movlb	0	; () banked
  2840  000B3C  518C               	movf	?_checkV& (0+255),w,b
  2841  000B3E  0A00               	xorlw	0	; case 0
  2842  000B40  B4D8               	btfsc	status,2,c
  2843  000B42  D7D0               	goto	l3533
  2844  000B44  0A01               	xorlw	1	; case 1
  2845  000B46  B4D8               	btfsc	status,2,c
  2846  000B48  D7A1               	goto	l3517
  2847  000B4A  D7D6               	goto	l3539
  2848  000B4C                     l4017:
  2849                           
  2850                           ; BSR set to: 0
  2851                           ; Switch size 1, requested type "space"
  2852                           ; Number of cases is 1, Range of values is 255 to 255
  2853                           ; switch strategies available:
  2854                           ; Name         Instructions Cycles
  2855                           ; simple_byte            4     3 (average)
  2856                           ;	Chosen strategy is simple_byte
  2857  000B4C  0100               	movlb	0	; () banked
  2858  000B4E  518C               	movf	?_checkV& (0+255),w,b
  2859  000B50  0AFF               	xorlw	255	; case 255
  2860  000B52  B4D8               	btfsc	status,2,c
  2861  000B54  D7B1               	goto	l3525
  2862  000B56  D7D0               	goto	l3539
  2863  000B58                     __end_of_checkC:
  2864                           	opt stack 0
  2865                           tblptru	equ	0xFF8
  2866                           tblptrh	equ	0xFF7
  2867                           tblptrl	equ	0xFF6
  2868                           tablat	equ	0xFF5
  2869                           intcon	equ	0xFF2
  2870                           intcon3	equ	0xFF0
  2871                           postinc0	equ	0xFEE
  2872                           wreg	equ	0xFE8
  2873                           postdec1	equ	0xFE5
  2874                           plusw1	equ	0xFE3
  2875                           fsr1l	equ	0xFE1
  2876                           postinc2	equ	0xFDE
  2877                           postdec2	equ	0xFDD
  2878                           plusw2	equ	0xFDB
  2879                           fsr2h	equ	0xFDA
  2880                           fsr2l	equ	0xFD9
  2881                           status	equ	0xFD8
  2882                           
  2883 ;; *************** function _checkAA *****************
  2884 ;; Defined at:
  2885 ;;		line 30 in file "sensors.c"
  2886 ;; Parameters:    Size  Location     Type
  2887 ;;  sorted          2   18[BANK0 ] PTR int 
  2888 ;;		 -> testADC@sorted(8), simulate@sorted(8), mainloop@sorted(8), 
  2889 ;; Auto vars:     Size  Location     Type
  2890 ;;		None
  2891 ;; Return value:  Size  Location     Type
  2892 ;;                  2   18[BANK0 ] int 
  2893 ;; Registers used:
  2894 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2895 ;; Tracked objects:
  2896 ;;		On entry : 0/0
  2897 ;;		On exit  : 0/0
  2898 ;;		Unchanged: 0/0
  2899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2900 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2903 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2904 ;;Total ram usage:        2 bytes
  2905 ;; Hardware stack levels used:    1
  2906 ;; Hardware stack levels required when called:    9
  2907 ;; This function calls:
  2908 ;;		_AD
  2909 ;;		___lcd_newline
  2910 ;;		_checkV
  2911 ;;		_lcdInst
  2912 ;;		_printf
  2913 ;; This function is called by:
  2914 ;;		_simulate
  2915 ;;		_mainloop
  2916 ;;		_testADC
  2917 ;; This function uses a non-reentrant model
  2918 ;;
  2919                           
  2920                           	psect	text6
  2921  000C3C                     __ptext6:
  2922                           	opt stack 0
  2923  000C3C                     _checkAA:
  2924                           	opt stack 20
  2925                           
  2926                           ;sensors.c: 32: lcdInst(0b10000000);;
  2927                           
  2928                           ; BSR set to: 0
  2929                           ;incstack = 0
  2930  000C3C  0E80               	movlw	128
  2931  000C3E  EC25  F00A         	call	_lcdInst
  2932                           
  2933                           ;sensors.c: 33: printf("AA:          ");
  2934  000C42  0EC8               	movlw	low STR_29
  2935  000C44  6E32               	movwf	printf@f,c
  2936  000C46  0EFF               	movlw	high STR_29
  2937  000C48  6E33               	movwf	printf@f+1,c
  2938  000C4A  EC9D  F002         	call	_printf	;wreg free
  2939                           
  2940                           ;sensors.c: 34: __lcd_newline();
  2941  000C4E  EC3B  F00A         	call	___lcd_newline	;wreg free
  2942                           
  2943                           ;sensors.c: 35: switch (checkV(AD(0), 1.5)) {
  2944  000C52  D039               	goto	l3501
  2945  000C54                     l3473:
  2946                           
  2947                           ;sensors.c: 37: printf("charged AA          ");
  2948  000C54  0EE7               	movlw	low (STR_31+2)
  2949  000C56  6E32               	movwf	printf@f,c
  2950  000C58  0EFD               	movlw	high (STR_31+2)
  2951  000C5A  6E33               	movwf	printf@f+1,c
  2952  000C5C  EC9D  F002         	call	_printf	;wreg free
  2953                           
  2954                           ;sensors.c: 38: sorted[0]++;
  2955  000C60  C092  FFD9         	movff	checkAA@sorted,fsr2l
  2956  000C64  C093  FFDA         	movff	checkAA@sorted+1,fsr2h
  2957  000C68  2ADE               	incf	postinc2,f,c
  2958  000C6A  0E00               	movlw	0
  2959  000C6C  22DD               	addwfc	postdec2,f,c
  2960                           
  2961                           ;sensors.c: 39: return 1;
  2962  000C6E  0E00               	movlw	0
  2963  000C70  0100               	movlb	0	; () banked
  2964  000C72  6F93               	movwf	(?_checkAA+1)& (0+255),b
  2965  000C74  0E01               	movlw	1
  2966  000C76  6F92               	movwf	?_checkAA& (0+255),b
  2967                           
  2968                           ; BSR set to: 0
  2969  000C78  0012               	return	
  2970  000C7A                     l3481:
  2971                           
  2972                           ; BSR set to: 0
  2973                           ;sensors.c: 41: printf("uncharged AA          ");
  2974  000C7A  0EE5               	movlw	low STR_31
  2975  000C7C  6E32               	movwf	printf@f,c
  2976  000C7E  0EFD               	movlw	high STR_31
  2977  000C80  6E33               	movwf	printf@f+1,c
  2978  000C82  EC9D  F002         	call	_printf	;wreg free
  2979                           
  2980                           ;sensors.c: 42: sorted[3]++;
  2981  000C86  0100               	movlb	0	; () banked
  2982  000C88  EE20 F006          	lfsr	2,6
  2983  000C8C  5192               	movf	checkAA@sorted& (0+255),w,b
  2984  000C8E  26D9               	addwf	fsr2l,f,c
  2985  000C90  5193               	movf	(checkAA@sorted+1)& (0+255),w,b
  2986  000C92  22DA               	addwfc	fsr2h,f,c
  2987  000C94  2ADE               	incf	postinc2,f,c
  2988  000C96  0E00               	movlw	0
  2989  000C98  22DD               	addwfc	postdec2,f,c
  2990                           
  2991                           ; BSR set to: 0
  2992                           ;sensors.c: 43: return 0;
  2993  000C9A  0E00               	movlw	0
  2994  000C9C  0100               	movlb	0	; () banked
  2995  000C9E  6F93               	movwf	(?_checkAA+1)& (0+255),b
  2996  000CA0  0E00               	movlw	0
  2997  000CA2  6F92               	movwf	?_checkAA& (0+255),b
  2998                           
  2999                           ; BSR set to: 0
  3000  000CA4  0012               	return	
  3001  000CA6                     l3489:
  3002                           
  3003                           ; BSR set to: 0
  3004                           ;sensors.c: 45: printf("no AA          ");
  3005  000CA6  0E89               	movlw	low STR_32
  3006  000CA8  6E32               	movwf	printf@f,c
  3007  000CAA  0EFF               	movlw	high STR_32
  3008  000CAC  6E33               	movwf	printf@f+1,c
  3009  000CAE  EC9D  F002         	call	_printf	;wreg free
  3010                           
  3011                           ;sensors.c: 46: return -1;
  3012  000CB2  0100               	movlb	0	; () banked
  3013  000CB4  6992               	setf	?_checkAA& (0+255),b
  3014  000CB6  6993               	setf	(?_checkAA+1)& (0+255),b
  3015                           
  3016                           ; BSR set to: 0
  3017  000CB8  0012               	return	
  3018  000CBA                     l3495:
  3019                           
  3020                           ; BSR set to: 0
  3021                           ;sensors.c: 48: return 0;
  3022  000CBA  0E00               	movlw	0
  3023  000CBC  0100               	movlb	0	; () banked
  3024  000CBE  6F93               	movwf	(?_checkAA+1)& (0+255),b
  3025  000CC0  0E00               	movlw	0
  3026  000CC2  6F92               	movwf	?_checkAA& (0+255),b
  3027                           
  3028                           ; BSR set to: 0
  3029                           ;sensors.c: 49: }
  3030                           
  3031                           ; BSR set to: 0
  3032  000CC4  0012               	return	
  3033  000CC6                     l3501:
  3034  000CC6  0E00               	movlw	0
  3035  000CC8  EC8B  F009         	call	_AD
  3036  000CCC  C026  F08C         	movff	?_AD,checkV@voltage
  3037  000CD0  C027  F08D         	movff	?_AD+1,checkV@voltage+1
  3038  000CD4  0E00               	movlw	0
  3039  000CD6  0100               	movlb	0	; () banked
  3040  000CD8  6F8E               	movwf	checkV@max& (0+255),b
  3041  000CDA  0EC0               	movlw	192
  3042  000CDC  0100               	movlb	0	; () banked
  3043  000CDE  6F8F               	movwf	(checkV@max+1)& (0+255),b
  3044  000CE0  0E3F               	movlw	63
  3045  000CE2  0100               	movlb	0	; () banked
  3046  000CE4  6F90               	movwf	(checkV@max+2)& (0+255),b
  3047  000CE6  EC8D  F006         	call	_checkV	;wreg free
  3048                           
  3049                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  3050                           ; Switch size 1, requested type "space"
  3051                           ; Number of cases is 2, Range of values is 0 to 255
  3052                           ; switch strategies available:
  3053                           ; Name         Instructions Cycles
  3054                           ; simple_byte            7     4 (average)
  3055                           ;	Chosen strategy is simple_byte
  3056  000CEA  0100               	movlb	0	; () banked
  3057  000CEC  518D               	movf	(?_checkV+1)& (0+255),w,b
  3058  000CEE  0A00               	xorlw	0	; case 0
  3059  000CF0  B4D8               	btfsc	status,2,c
  3060  000CF2  D004               	goto	l4019
  3061  000CF4  0AFF               	xorlw	255	; case 255
  3062  000CF6  B4D8               	btfsc	status,2,c
  3063  000CF8  D00A               	goto	l4021
  3064  000CFA  D7DF               	goto	l3495
  3065  000CFC                     l4019:
  3066                           
  3067                           ; BSR set to: 0
  3068                           ; Switch size 1, requested type "space"
  3069                           ; Number of cases is 2, Range of values is 0 to 1
  3070                           ; switch strategies available:
  3071                           ; Name         Instructions Cycles
  3072                           ; simple_byte            7     4 (average)
  3073                           ;	Chosen strategy is simple_byte
  3074  000CFC  0100               	movlb	0	; () banked
  3075  000CFE  518C               	movf	?_checkV& (0+255),w,b
  3076  000D00  0A00               	xorlw	0	; case 0
  3077  000D02  B4D8               	btfsc	status,2,c
  3078  000D04  D7D0               	goto	l3489
  3079  000D06  0A01               	xorlw	1	; case 1
  3080  000D08  B4D8               	btfsc	status,2,c
  3081  000D0A  D7A4               	goto	l3473
  3082  000D0C  D7D6               	goto	l3495
  3083  000D0E                     l4021:
  3084                           
  3085                           ; BSR set to: 0
  3086                           ; Switch size 1, requested type "space"
  3087                           ; Number of cases is 1, Range of values is 255 to 255
  3088                           ; switch strategies available:
  3089                           ; Name         Instructions Cycles
  3090                           ; simple_byte            4     3 (average)
  3091                           ;	Chosen strategy is simple_byte
  3092  000D0E  0100               	movlb	0	; () banked
  3093  000D10  518C               	movf	?_checkV& (0+255),w,b
  3094  000D12  0AFF               	xorlw	255	; case 255
  3095  000D14  B4D8               	btfsc	status,2,c
  3096  000D16  D7B1               	goto	l3481
  3097  000D18  D7D0               	goto	l3495
  3098  000D1A                     __end_of_checkAA:
  3099                           	opt stack 0
  3100                           tblptru	equ	0xFF8
  3101                           tblptrh	equ	0xFF7
  3102                           tblptrl	equ	0xFF6
  3103                           tablat	equ	0xFF5
  3104                           intcon	equ	0xFF2
  3105                           intcon3	equ	0xFF0
  3106                           postinc0	equ	0xFEE
  3107                           wreg	equ	0xFE8
  3108                           postdec1	equ	0xFE5
  3109                           plusw1	equ	0xFE3
  3110                           fsr1l	equ	0xFE1
  3111                           postinc2	equ	0xFDE
  3112                           postdec2	equ	0xFDD
  3113                           plusw2	equ	0xFDB
  3114                           fsr2h	equ	0xFDA
  3115                           fsr2l	equ	0xFD9
  3116                           status	equ	0xFD8
  3117                           
  3118 ;; *************** function _check9 *****************
  3119 ;; Defined at:
  3120 ;;		line 74 in file "sensors.c"
  3121 ;; Parameters:    Size  Location     Type
  3122 ;;  sorted          2   18[BANK0 ] PTR int 
  3123 ;;		 -> simulate@sorted(8), mainloop@sorted(8), 
  3124 ;; Auto vars:     Size  Location     Type
  3125 ;;		None
  3126 ;; Return value:  Size  Location     Type
  3127 ;;                  2   18[BANK0 ] int 
  3128 ;; Registers used:
  3129 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3130 ;; Tracked objects:
  3131 ;;		On entry : 0/0
  3132 ;;		On exit  : 0/0
  3133 ;;		Unchanged: 0/0
  3134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3135 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3138 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3139 ;;Total ram usage:        2 bytes
  3140 ;; Hardware stack levels used:    1
  3141 ;; Hardware stack levels required when called:    9
  3142 ;; This function calls:
  3143 ;;		_AD
  3144 ;;		___lcd_newline
  3145 ;;		_checkV
  3146 ;;		_lcdInst
  3147 ;;		_printf
  3148 ;; This function is called by:
  3149 ;;		_simulate
  3150 ;;		_mainloop
  3151 ;; This function uses a non-reentrant model
  3152 ;;
  3153                           
  3154                           	psect	text7
  3155  000B58                     __ptext7:
  3156                           	opt stack 0
  3157  000B58                     _check9:
  3158                           	opt stack 20
  3159                           
  3160                           ;sensors.c: 76: lcdInst(0b10000000);;
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;incstack = 0
  3164  000B58  0E80               	movlw	128
  3165  000B5A  EC25  F00A         	call	_lcdInst
  3166                           
  3167                           ;sensors.c: 77: printf("9V:          ");
  3168  000B5E  0ED6               	movlw	low STR_37
  3169  000B60  6E32               	movwf	printf@f,c
  3170  000B62  0EFF               	movlw	high STR_37
  3171  000B64  6E33               	movwf	printf@f+1,c
  3172  000B66  EC9D  F002         	call	_printf	;wreg free
  3173                           
  3174                           ;sensors.c: 78: __lcd_newline();
  3175  000B6A  EC3B  F00A         	call	___lcd_newline	;wreg free
  3176                           
  3177                           ;sensors.c: 79: switch (checkV(AD(2), 4)) {
  3178  000B6E  D03C               	goto	l3589
  3179  000B70                     l3561:
  3180                           
  3181                           ;sensors.c: 81: printf("charged 9V          ");
  3182  000B70  0EFE               	movlw	low (STR_39+2)
  3183  000B72  6E32               	movwf	printf@f,c
  3184  000B74  0EFD               	movlw	high (STR_39+2)
  3185  000B76  6E33               	movwf	printf@f+1,c
  3186  000B78  EC9D  F002         	call	_printf	;wreg free
  3187                           
  3188                           ;sensors.c: 82: sorted[2]++;
  3189  000B7C  0100               	movlb	0	; () banked
  3190  000B7E  EE20 F004          	lfsr	2,4
  3191  000B82  5192               	movf	check9@sorted& (0+255),w,b
  3192  000B84  26D9               	addwf	fsr2l,f,c
  3193  000B86  5193               	movf	(check9@sorted+1)& (0+255),w,b
  3194  000B88  22DA               	addwfc	fsr2h,f,c
  3195  000B8A  2ADE               	incf	postinc2,f,c
  3196  000B8C  0E00               	movlw	0
  3197  000B8E  22DD               	addwfc	postdec2,f,c
  3198                           
  3199                           ; BSR set to: 0
  3200                           ;sensors.c: 83: return 1;
  3201  000B90  0E00               	movlw	0
  3202  000B92  0100               	movlb	0	; () banked
  3203  000B94  6F93               	movwf	(?_check9+1)& (0+255),b
  3204  000B96  0E01               	movlw	1
  3205  000B98  6F92               	movwf	?_check9& (0+255),b
  3206                           
  3207                           ; BSR set to: 0
  3208  000B9A  0012               	return	
  3209  000B9C                     l3569:
  3210                           
  3211                           ; BSR set to: 0
  3212                           ;sensors.c: 85: printf("uncharged 9V          ");
  3213  000B9C  0EFC               	movlw	low STR_39
  3214  000B9E  6E32               	movwf	printf@f,c
  3215  000BA0  0EFD               	movlw	high STR_39
  3216  000BA2  6E33               	movwf	printf@f+1,c
  3217  000BA4  EC9D  F002         	call	_printf	;wreg free
  3218                           
  3219                           ;sensors.c: 86: sorted[3]++;
  3220  000BA8  0100               	movlb	0	; () banked
  3221  000BAA  EE20 F006          	lfsr	2,6
  3222  000BAE  5192               	movf	check9@sorted& (0+255),w,b
  3223  000BB0  26D9               	addwf	fsr2l,f,c
  3224  000BB2  5193               	movf	(check9@sorted+1)& (0+255),w,b
  3225  000BB4  22DA               	addwfc	fsr2h,f,c
  3226  000BB6  2ADE               	incf	postinc2,f,c
  3227  000BB8  0E00               	movlw	0
  3228  000BBA  22DD               	addwfc	postdec2,f,c
  3229                           
  3230                           ; BSR set to: 0
  3231                           ;sensors.c: 87: return 0;
  3232  000BBC  0E00               	movlw	0
  3233  000BBE  0100               	movlb	0	; () banked
  3234  000BC0  6F93               	movwf	(?_check9+1)& (0+255),b
  3235  000BC2  0E00               	movlw	0
  3236  000BC4  6F92               	movwf	?_check9& (0+255),b
  3237                           
  3238                           ; BSR set to: 0
  3239  000BC6  0012               	return	
  3240  000BC8                     l3577:
  3241                           
  3242                           ; BSR set to: 0
  3243                           ;sensors.c: 89: printf("no 9V          ");
  3244  000BC8  0E99               	movlw	low STR_40
  3245  000BCA  6E32               	movwf	printf@f,c
  3246  000BCC  0EFF               	movlw	high STR_40
  3247  000BCE  6E33               	movwf	printf@f+1,c
  3248  000BD0  EC9D  F002         	call	_printf	;wreg free
  3249                           
  3250                           ;sensors.c: 90: return -1;
  3251  000BD4  0100               	movlb	0	; () banked
  3252  000BD6  6992               	setf	?_check9& (0+255),b
  3253  000BD8  6993               	setf	(?_check9+1)& (0+255),b
  3254                           
  3255                           ; BSR set to: 0
  3256  000BDA  0012               	return	
  3257  000BDC                     l3583:
  3258                           
  3259                           ; BSR set to: 0
  3260                           ;sensors.c: 92: return 0;
  3261  000BDC  0E00               	movlw	0
  3262  000BDE  0100               	movlb	0	; () banked
  3263  000BE0  6F93               	movwf	(?_check9+1)& (0+255),b
  3264  000BE2  0E00               	movlw	0
  3265  000BE4  6F92               	movwf	?_check9& (0+255),b
  3266                           
  3267                           ; BSR set to: 0
  3268                           ;sensors.c: 93: }
  3269                           
  3270                           ; BSR set to: 0
  3271  000BE6  0012               	return	
  3272  000BE8                     l3589:
  3273  000BE8  0E02               	movlw	2
  3274  000BEA  EC8B  F009         	call	_AD
  3275  000BEE  C026  F08C         	movff	?_AD,checkV@voltage
  3276  000BF2  C027  F08D         	movff	?_AD+1,checkV@voltage+1
  3277  000BF6  0E00               	movlw	0
  3278  000BF8  0100               	movlb	0	; () banked
  3279  000BFA  6F8E               	movwf	checkV@max& (0+255),b
  3280  000BFC  0E80               	movlw	128
  3281  000BFE  0100               	movlb	0	; () banked
  3282  000C00  6F8F               	movwf	(checkV@max+1)& (0+255),b
  3283  000C02  0E40               	movlw	64
  3284  000C04  0100               	movlb	0	; () banked
  3285  000C06  6F90               	movwf	(checkV@max+2)& (0+255),b
  3286  000C08  EC8D  F006         	call	_checkV	;wreg free
  3287                           
  3288                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  3289                           ; Switch size 1, requested type "space"
  3290                           ; Number of cases is 2, Range of values is 0 to 255
  3291                           ; switch strategies available:
  3292                           ; Name         Instructions Cycles
  3293                           ; simple_byte            7     4 (average)
  3294                           ;	Chosen strategy is simple_byte
  3295  000C0C  0100               	movlb	0	; () banked
  3296  000C0E  518D               	movf	(?_checkV+1)& (0+255),w,b
  3297  000C10  0A00               	xorlw	0	; case 0
  3298  000C12  B4D8               	btfsc	status,2,c
  3299  000C14  D004               	goto	l4023
  3300  000C16  0AFF               	xorlw	255	; case 255
  3301  000C18  B4D8               	btfsc	status,2,c
  3302  000C1A  D00A               	goto	l4025
  3303  000C1C  D7DF               	goto	l3583
  3304  000C1E                     l4023:
  3305                           
  3306                           ; BSR set to: 0
  3307                           ; Switch size 1, requested type "space"
  3308                           ; Number of cases is 2, Range of values is 0 to 1
  3309                           ; switch strategies available:
  3310                           ; Name         Instructions Cycles
  3311                           ; simple_byte            7     4 (average)
  3312                           ;	Chosen strategy is simple_byte
  3313  000C1E  0100               	movlb	0	; () banked
  3314  000C20  518C               	movf	?_checkV& (0+255),w,b
  3315  000C22  0A00               	xorlw	0	; case 0
  3316  000C24  B4D8               	btfsc	status,2,c
  3317  000C26  D7D0               	goto	l3577
  3318  000C28  0A01               	xorlw	1	; case 1
  3319  000C2A  B4D8               	btfsc	status,2,c
  3320  000C2C  D7A1               	goto	l3561
  3321  000C2E  D7D6               	goto	l3583
  3322  000C30                     l4025:
  3323                           
  3324                           ; BSR set to: 0
  3325                           ; Switch size 1, requested type "space"
  3326                           ; Number of cases is 1, Range of values is 255 to 255
  3327                           ; switch strategies available:
  3328                           ; Name         Instructions Cycles
  3329                           ; simple_byte            4     3 (average)
  3330                           ;	Chosen strategy is simple_byte
  3331  000C30  0100               	movlb	0	; () banked
  3332  000C32  518C               	movf	?_checkV& (0+255),w,b
  3333  000C34  0AFF               	xorlw	255	; case 255
  3334  000C36  B4D8               	btfsc	status,2,c
  3335  000C38  D7B1               	goto	l3569
  3336  000C3A  D7D0               	goto	l3583
  3337  000C3C                     __end_of_check9:
  3338                           	opt stack 0
  3339                           tblptru	equ	0xFF8
  3340                           tblptrh	equ	0xFF7
  3341                           tblptrl	equ	0xFF6
  3342                           tablat	equ	0xFF5
  3343                           intcon	equ	0xFF2
  3344                           intcon3	equ	0xFF0
  3345                           postinc0	equ	0xFEE
  3346                           wreg	equ	0xFE8
  3347                           postdec1	equ	0xFE5
  3348                           plusw1	equ	0xFE3
  3349                           fsr1l	equ	0xFE1
  3350                           postinc2	equ	0xFDE
  3351                           postdec2	equ	0xFDD
  3352                           plusw2	equ	0xFDB
  3353                           fsr2h	equ	0xFDA
  3354                           fsr2l	equ	0xFD9
  3355                           status	equ	0xFD8
  3356                           
  3357 ;; *************** function _checkV *****************
  3358 ;; Defined at:
  3359 ;;		line 16 in file "sensors.c"
  3360 ;; Parameters:    Size  Location     Type
  3361 ;;  voltage         2   12[BANK0 ] int 
  3362 ;;  max             3   14[BANK0 ] float 
  3363 ;; Auto vars:     Size  Location     Type
  3364 ;;  i               1   17[BANK0 ] unsigned char 
  3365 ;; Return value:  Size  Location     Type
  3366 ;;                  2   12[BANK0 ] int 
  3367 ;; Registers used:
  3368 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3369 ;; Tracked objects:
  3370 ;;		On entry : 0/0
  3371 ;;		On exit  : 0/0
  3372 ;;		Unchanged: 0/0
  3373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3374 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3375 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3376 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3377 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3378 ;;Total ram usage:        7 bytes
  3379 ;; Hardware stack levels used:    1
  3380 ;; Hardware stack levels required when called:    8
  3381 ;; This function calls:
  3382 ;;		___awtoft
  3383 ;;		___ftdiv
  3384 ;;		___ftge
  3385 ;;		___ftmul
  3386 ;;		___lcd_newline
  3387 ;;		_printf
  3388 ;; This function is called by:
  3389 ;;		_checkAA
  3390 ;;		_checkC
  3391 ;;		_check9
  3392 ;; This function uses a non-reentrant model
  3393 ;;
  3394                           
  3395                           	psect	text8
  3396  000D1A                     __ptext8:
  3397                           	opt stack 0
  3398  000D1A                     _checkV:
  3399                           	opt stack 20
  3400                           
  3401                           ;sensors.c: 18: printf("%d received    ", voltage);
  3402                           
  3403                           ; BSR set to: 0
  3404                           ;incstack = 0
  3405  000D1A  0EA9               	movlw	low STR_28
  3406  000D1C  6E32               	movwf	printf@f,c
  3407  000D1E  0EFF               	movlw	high STR_28
  3408  000D20  6E33               	movwf	printf@f+1,c
  3409  000D22  C08C  F034         	movff	checkV@voltage,?_printf+2
  3410  000D26  C08D  F035         	movff	checkV@voltage+1,?_printf+3
  3411  000D2A  EC9D  F002         	call	_printf	;wreg free
  3412                           
  3413                           ;sensors.c: 19: __lcd_newline();
  3414  000D2E  EC3B  F00A         	call	___lcd_newline	;wreg free
  3415                           
  3416                           ;sensors.c: 20: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(8000000/4000.0)));};
  3417  000D32  0E00               	movlw	0
  3418  000D34  0100               	movlb	0	; () banked
  3419  000D36  6F91               	movwf	checkV@i& (0+255),b
  3420  000D38                     l3429:
  3421                           
  3422                           ; BSR set to: 0
  3423  000D38  0E09               	movlw	9
  3424  000D3A  0100               	movlb	0	; () banked
  3425  000D3C  6591               	cpfsgt	checkV@i& (0+255),b
  3426  000D3E  D001               	goto	l3433
  3427  000D40  D00B               	goto	l3437
  3428  000D42                     l3433:
  3429                           
  3430                           ; BSR set to: 0
  3431  000D42  0EFF               	movlw	255
  3432  000D44  6E49               	movwf	??_checkV& (0+255),c
  3433  000D46  0E8A               	movlw	138
  3434  000D48                     u2787:
  3435  000D48  2EE8               	decfsz	wreg,f,c
  3436  000D4A  D7FE               	bra	u2787
  3437  000D4C  2E49               	decfsz	??_checkV& (0+255),f,c
  3438  000D4E  D7FC               	bra	u2787
  3439  000D50  D000               	nop2	
  3440  000D52  0100               	movlb	0	; () banked
  3441  000D54  2B91               	incf	checkV@i& (0+255),f,b
  3442  000D56  D7F0               	goto	l3429
  3443  000D58                     l3437:
  3444                           
  3445                           ; BSR set to: 0
  3446                           ;sensors.c: 21: if (voltage < 50) {
  3447  000D58  0100               	movlb	0	; () banked
  3448  000D5A  BF8D               	btfsc	(checkV@voltage+1)& (0+255),7,b
  3449  000D5C  D008               	goto	l3439
  3450  000D5E  0100               	movlb	0	; () banked
  3451  000D60  518D               	movf	(checkV@voltage+1)& (0+255),w,b
  3452  000D62  E10B               	bnz	l3445
  3453  000D64  0E32               	movlw	50
  3454  000D66  0100               	movlb	0	; () banked
  3455  000D68  5D8C               	subwf	checkV@voltage& (0+255),w,b
  3456  000D6A  B0D8               	btfsc	status,0,c
  3457  000D6C  D006               	goto	l3445
  3458  000D6E                     l3439:
  3459                           
  3460                           ; BSR set to: 0
  3461                           ;sensors.c: 22: return 0;
  3462  000D6E  0E00               	movlw	0
  3463  000D70  0100               	movlb	0	; () banked
  3464  000D72  6F8D               	movwf	(?_checkV+1)& (0+255),b
  3465  000D74  0E00               	movlw	0
  3466  000D76  6F8C               	movwf	?_checkV& (0+255),b
  3467                           
  3468                           ; BSR set to: 0
  3469                           ;sensors.c: 23: } else if (voltage > 0.85 * 1023 * max / 5) {
  3470                           
  3471                           ; BSR set to: 0
  3472  000D78  0012               	return	
  3473  000D7A                     l3445:
  3474                           
  3475                           ; BSR set to: 0
  3476  000D7A  0E00               	movlw	0
  3477  000D7C  6E40               	movwf	___ftdiv@f2,c
  3478  000D7E  0EA0               	movlw	160
  3479  000D80  6E41               	movwf	___ftdiv@f2+1,c
  3480  000D82  0E40               	movlw	64
  3481  000D84  6E42               	movwf	___ftdiv@f2+2,c
  3482  000D86  0E63               	movlw	99
  3483  000D88  6E31               	movwf	___ftmul@f2,c
  3484  000D8A  0E59               	movlw	89
  3485  000D8C  6E32               	movwf	___ftmul@f2+1,c
  3486  000D8E  0E44               	movlw	68
  3487  000D90  6E33               	movwf	___ftmul@f2+2,c
  3488  000D92  C08E  F02E         	movff	checkV@max,___ftmul@f1
  3489  000D96  C08F  F02F         	movff	checkV@max+1,___ftmul@f1+1
  3490  000D9A  C090  F030         	movff	checkV@max+2,___ftmul@f1+2
  3491  000D9E  EC47  F004         	call	___ftmul	;wreg free
  3492  000DA2  C02E  F03D         	movff	?___ftmul,___ftdiv@f1
  3493  000DA6  C02F  F03E         	movff	?___ftmul+1,___ftdiv@f1+1
  3494  000DAA  C030  F03F         	movff	?___ftmul+2,___ftdiv@f1+2
  3495  000DAE  ECC5  F003         	call	___ftdiv	;wreg free
  3496  000DB2  C03D  F086         	movff	?___ftdiv,___ftge@ff1
  3497  000DB6  C03E  F087         	movff	?___ftdiv+1,___ftge@ff1+1
  3498  000DBA  C03F  F088         	movff	?___ftdiv+2,___ftge@ff1+2
  3499  000DBE  C08C  F02E         	movff	checkV@voltage,___awtoft@c
  3500  000DC2  C08D  F02F         	movff	checkV@voltage+1,___awtoft@c+1
  3501  000DC6  ECA9  F009         	call	___awtoft	;wreg free
  3502  000DCA  C02E  F089         	movff	?___awtoft,___ftge@ff2
  3503  000DCE  C02F  F08A         	movff	?___awtoft+1,___ftge@ff2+1
  3504  000DD2  C030  F08B         	movff	?___awtoft+2,___ftge@ff2+2
  3505  000DD6  ECFA  F006         	call	___ftge	;wreg free
  3506  000DDA  0100               	movlb	0	; () banked
  3507  000DDC  B0D8               	btfsc	status,0,c
  3508  000DDE  D006               	goto	l261
  3509                           
  3510                           ; BSR set to: 0
  3511                           ;sensors.c: 24: return 1;
  3512  000DE0  0E00               	movlw	0
  3513  000DE2  0100               	movlb	0	; () banked
  3514  000DE4  6F8D               	movwf	(?_checkV+1)& (0+255),b
  3515  000DE6  0E01               	movlw	1
  3516  000DE8  6F8C               	movwf	?_checkV& (0+255),b
  3517                           
  3518                           ; BSR set to: 0
  3519                           ;sensors.c: 25: } else {
  3520                           
  3521                           ; BSR set to: 0
  3522  000DEA  0012               	return	
  3523  000DEC                     l261:
  3524                           
  3525                           ; BSR set to: 0
  3526                           ;sensors.c: 26: return -1;
  3527  000DEC  0100               	movlb	0	; () banked
  3528  000DEE  698C               	setf	?_checkV& (0+255),b
  3529  000DF0  698D               	setf	(?_checkV+1)& (0+255),b
  3530                           
  3531                           ; BSR set to: 0
  3532  000DF2  0012               	return	
  3533  000DF4                     __end_of_checkV:
  3534                           	opt stack 0
  3535                           tblptru	equ	0xFF8
  3536                           tblptrh	equ	0xFF7
  3537                           tblptrl	equ	0xFF6
  3538                           tablat	equ	0xFF5
  3539                           intcon	equ	0xFF2
  3540                           intcon3	equ	0xFF0
  3541                           postinc0	equ	0xFEE
  3542                           wreg	equ	0xFE8
  3543                           postdec1	equ	0xFE5
  3544                           plusw1	equ	0xFE3
  3545                           fsr1l	equ	0xFE1
  3546                           postinc2	equ	0xFDE
  3547                           postdec2	equ	0xFDD
  3548                           plusw2	equ	0xFDB
  3549                           fsr2h	equ	0xFDA
  3550                           fsr2l	equ	0xFD9
  3551                           status	equ	0xFD8
  3552                           
  3553 ;; *************** function _printf *****************
  3554 ;; Defined at:
  3555 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  3556 ;; Parameters:    Size  Location     Type
  3557 ;;  f               2   49[COMRAM] PTR const unsigned char 
  3558 ;;		 -> STR_40(16), STR_39(23), STR_38(21), STR_37(14), 
  3559 ;;		 -> STR_36(15), STR_35(22), STR_34(20), STR_33(13), 
  3560 ;;		 -> STR_32(16), STR_31(23), STR_30(21), STR_29(14), 
  3561 ;;		 -> STR_28(16), STR_27(18), STR_26(13), STR_25(21), 
  3562 ;;		 -> STR_24(13), STR_23(21), STR_22(13), STR_21(20), 
  3563 ;;		 -> STR_20(13), STR_19(21), STR_18(23), STR_17(24), 
  3564 ;;		 -> STR_16(21), STR_15(24), STR_14(24), STR_13(25), 
  3565 ;;		 -> STR_12(27), STR_11(20), STR_10(22), STR_9(19), 
  3566 ;;		 -> STR_8(21), STR_7(20), STR_6(21), STR_5(20), 
  3567 ;;		 -> STR_4(22), STR_3(21), STR_2(24), STR_1(21), 
  3568 ;; Auto vars:     Size  Location     Type
  3569 ;;  tmpval          4    0        struct .
  3570 ;;  cp              3    0        PTR const unsigned char 
  3571 ;;  val             2   58[COMRAM] unsigned int 
  3572 ;;  ap              2   54[COMRAM] PTR void [1]
  3573 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3574 ;;  len             2    0        unsigned int 
  3575 ;;  c               1   60[COMRAM] char 
  3576 ;;  prec            1   57[COMRAM] char 
  3577 ;;  flag            1   56[COMRAM] unsigned char 
  3578 ;; Return value:  Size  Location     Type
  3579 ;;                  2   49[COMRAM] int 
  3580 ;; Registers used:
  3581 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3582 ;; Tracked objects:
  3583 ;;		On entry : 0/0
  3584 ;;		On exit  : 0/0
  3585 ;;		Unchanged: 0/0
  3586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3587 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3588 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3589 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3590 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3591 ;;Total ram usage:       12 bytes
  3592 ;; Hardware stack levels used:    1
  3593 ;; Hardware stack levels required when called:    7
  3594 ;; This function calls:
  3595 ;;		___lwdiv
  3596 ;;		___lwmod
  3597 ;;		_putch
  3598 ;; This function is called by:
  3599 ;;		_simulate
  3600 ;;		_main
  3601 ;;		_showInfo
  3602 ;;		_stopMoving
  3603 ;;		_checkV
  3604 ;;		_checkAA
  3605 ;;		_checkC
  3606 ;;		_check9
  3607 ;;		_mainloop
  3608 ;; This function uses a non-reentrant model
  3609 ;;
  3610                           
  3611                           	psect	text9
  3612  00053A                     __ptext9:
  3613                           	opt stack 0
  3614  00053A                     _printf:
  3615                           	opt stack 21
  3616                           
  3617                           ;doprnt.c: 466: va_list ap;
  3618                           ;doprnt.c: 499: signed char c;
  3619                           ;doprnt.c: 506: signed char prec;
  3620                           ;doprnt.c: 508: unsigned char flag;
  3621                           ;doprnt.c: 523: union {
  3622                           ;doprnt.c: 524: unsigned long vd;
  3623                           ;doprnt.c: 525: double integ;
  3624                           ;doprnt.c: 526: } tmpval;
  3625                           ;doprnt.c: 528: unsigned int val;
  3626                           ;doprnt.c: 529: unsigned len;
  3627                           ;doprnt.c: 530: const char * cp;
  3628                           ;doprnt.c: 533: *ap = __va_start();
  3629                           
  3630                           ; BSR set to: 0
  3631                           ;incstack = 0
  3632  00053A  0E34               	movlw	low (?_printf+2)
  3633  00053C  6E37               	movwf	printf@ap,c
  3634  00053E  0E00               	movlw	high (?_printf+2)
  3635  000540  6E38               	movwf	printf@ap+1,c
  3636                           
  3637                           ;doprnt.c: 536: while(c = *f++) {
  3638  000542  D082               	goto	l3293
  3639  000544                     l3245:
  3640                           
  3641                           ;doprnt.c: 538: if(c != '%')
  3642  000544  0E25               	movlw	37
  3643  000546  183D               	xorwf	printf@c,w,c
  3644  000548  B4D8               	btfsc	status,2,c
  3645  00054A  D004               	goto	l3249
  3646                           
  3647                           ;doprnt.c: 540: {
  3648                           ;doprnt.c: 541: (putch(c) );
  3649  00054C  503D               	movf	printf@c,w,c
  3650  00054E  EC1F  F00A         	call	_putch
  3651                           
  3652                           ;doprnt.c: 542: continue;
  3653  000552  D07A               	goto	l3293
  3654  000554                     l3249:
  3655                           
  3656                           ;doprnt.c: 543: }
  3657                           ;doprnt.c: 548: flag = 0;
  3658  000554  0E00               	movlw	0
  3659  000556  6E39               	movwf	printf@flag,c
  3660                           
  3661                           ;doprnt.c: 635: switch(c = *f++) {
  3662  000558  D004               	goto	l3255
  3663  00055A                     l3251:
  3664                           
  3665                           ;doprnt.c: 809: (putch(c) );
  3666  00055A  503D               	movf	printf@c,w,c
  3667  00055C  EC1F  F00A         	call	_putch
  3668                           
  3669                           ;doprnt.c: 810: continue;
  3670  000560  D073               	goto	l3293
  3671  000562                     l3255:
  3672  000562  C032  FFF6         	movff	printf@f,tblptrl
  3673  000566  C033  FFF7         	movff	printf@f+1,tblptrh
  3674  00056A  4A32               	infsnz	printf@f,f,c
  3675  00056C  2A33               	incf	printf@f+1,f,c
  3676  00056E                     	if	0	;tblptru may be non-zero
  3677  00056E                     	endif
  3678  00056E                     	if	0	;tblptru may be non-zero
  3679  00056E                     	endif
  3680  00056E  0008               	tblrd		*
  3681  000570  CFF5 F03D          	movff	tablat,printf@c
  3682  000574  503D               	movf	printf@c,w,c
  3683                           
  3684                           ; Switch size 1, requested type "space"
  3685                           ; Number of cases is 3, Range of values is 0 to 105
  3686                           ; switch strategies available:
  3687                           ; Name         Instructions Cycles
  3688                           ; simple_byte           10     6 (average)
  3689                           ;	Chosen strategy is simple_byte
  3690  000576  0A00               	xorlw	0	; case 0
  3691  000578  B4D8               	btfsc	status,2,c
  3692  00057A  0012               	return	
  3693  00057C  0A64               	xorlw	100	; case 100
  3694  00057E  B4D8               	btfsc	status,2,c
  3695  000580  D003               	goto	l3257
  3696  000582  0A0D               	xorlw	13	; case 105
  3697  000584  A4D8               	btfss	status,2,c
  3698  000586  D7E9               	goto	l3251
  3699  000588                     l3257:
  3700                           
  3701                           ;doprnt.c: 1253: {
  3702                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3703  000588  C037  FFD9         	movff	printf@ap,fsr2l
  3704  00058C  C038  FFDA         	movff	printf@ap+1,fsr2h
  3705  000590  CFDE F03B          	movff	postinc2,printf@val
  3706  000594  CFDD F03C          	movff	postdec2,printf@val+1
  3707  000598  0E02               	movlw	2
  3708  00059A  2637               	addwf	printf@ap,f,c
  3709  00059C  0E00               	movlw	0
  3710  00059E  2238               	addwfc	printf@ap+1,f,c
  3711                           
  3712                           ;doprnt.c: 1261: if((int)val < 0) {
  3713  0005A0  AE3C               	btfss	printf@val+1,7,c
  3714  0005A2  D006               	goto	l3267
  3715                           
  3716                           ;doprnt.c: 1262: flag |= 0x03;
  3717  0005A4  0E03               	movlw	3
  3718  0005A6  1239               	iorwf	printf@flag,f,c
  3719                           
  3720                           ;doprnt.c: 1263: val = -val;
  3721  0005A8  6C3B               	negf	printf@val,c
  3722  0005AA  1E3C               	comf	printf@val+1,f,c
  3723  0005AC  B0D8               	btfsc	status,0,c
  3724  0005AE  2A3C               	incf	printf@val+1,f,c
  3725  0005B0                     l3267:
  3726                           
  3727                           ;doprnt.c: 1264: }
  3728                           ;doprnt.c: 1266: }
  3729                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3730  0005B0  0E01               	movlw	1
  3731  0005B2  6E3D               	movwf	printf@c,c
  3732  0005B4                     l3269:
  3733  0005B4  0E05               	movlw	5
  3734  0005B6  183D               	xorwf	printf@c,w,c
  3735  0005B8  B4D8               	btfsc	status,2,c
  3736  0005BA  D012               	goto	l3281
  3737                           
  3738                           ;doprnt.c: 1306: if(val < dpowers[c])
  3739  0005BC  503D               	movf	printf@c,w,c
  3740  0005BE  0D02               	mullw	2
  3741  0005C0  0E47               	movlw	low _dpowers
  3742  0005C2  24F3               	addwf	prodl,w,c
  3743  0005C4  6EF6               	movwf	tblptrl,c
  3744  0005C6  0EFD               	movlw	high _dpowers
  3745  0005C8  20F4               	addwfc	prodh,w,c
  3746  0005CA  6EF7               	movwf	tblptrh,c
  3747  0005CC                     	if	0	;There are less than 3 active tblptr bytes
  3748  0005CC                     	endif
  3749  0005CC  0009               	tblrd		*+
  3750  0005CE  50F5               	movf	tablat,w,c
  3751  0005D0  5C3B               	subwf	printf@val,w,c
  3752  0005D2  0009               	tblrd		*+
  3753  0005D4  50F5               	movf	tablat,w,c
  3754  0005D6  583C               	subwfb	printf@val+1,w,c
  3755  0005D8  A0D8               	btfss	status,0,c
  3756  0005DA  D002               	goto	l3281
  3757                           
  3758                           ;doprnt.c: 1307: break;
  3759  0005DC  2A3D               	incf	printf@c,f,c
  3760  0005DE  D7EA               	goto	l3269
  3761  0005E0                     l3281:
  3762                           
  3763                           ;doprnt.c: 1422: {
  3764                           ;doprnt.c: 1438: if(flag & 0x03)
  3765  0005E0  C039  F036         	movff	printf@flag,??_printf
  3766  0005E4  0E03               	movlw	3
  3767  0005E6  1636               	andwf	??_printf,f,c
  3768  0005E8  B4D8               	btfsc	status,2,c
  3769  0005EA  D003               	goto	l3285
  3770                           
  3771                           ;doprnt.c: 1439: (putch('-') );
  3772  0005EC  0E2D               	movlw	45
  3773  0005EE  EC1F  F00A         	call	_putch
  3774  0005F2                     l3285:
  3775                           
  3776                           ;doprnt.c: 1469: }
  3777                           ;doprnt.c: 1472: prec = c;
  3778  0005F2  C03D  F03A         	movff	printf@c,printf@prec
  3779                           
  3780                           ;doprnt.c: 1474: while(prec--) {
  3781  0005F6  D024               	goto	l3291
  3782  0005F8                     l3287:
  3783                           
  3784                           ;doprnt.c: 1478: {
  3785                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3786  0005F8  503A               	movf	printf@prec,w,c
  3787  0005FA  0D02               	mullw	2
  3788  0005FC  0E47               	movlw	low _dpowers
  3789  0005FE  24F3               	addwf	prodl,w,c
  3790  000600  6EF6               	movwf	tblptrl,c
  3791  000602  0EFD               	movlw	high _dpowers
  3792  000604  20F4               	addwfc	prodh,w,c
  3793  000606  6EF7               	movwf	tblptrh,c
  3794  000608                     	if	0	;There are less than 3 active tblptr bytes
  3795  000608                     	endif
  3796  000608  0009               	tblrd		*+
  3797  00060A  CFF5 F028          	movff	tablat,___lwdiv@divisor
  3798  00060E  000A               	tblrd		*-
  3799  000610  CFF5 F029          	movff	tablat,___lwdiv@divisor+1
  3800  000614  C03B  F026         	movff	printf@val,___lwdiv@dividend
  3801  000618  C03C  F027         	movff	printf@val+1,___lwdiv@dividend+1
  3802  00061C  EC8F  F008         	call	___lwdiv	;wreg free
  3803  000620  C026  F02D         	movff	?___lwdiv,___lwmod@dividend
  3804  000624  C027  F02E         	movff	?___lwdiv+1,___lwmod@dividend+1
  3805  000628  0E00               	movlw	0
  3806  00062A  6E30               	movwf	___lwmod@divisor+1,c
  3807  00062C  0E0A               	movlw	10
  3808  00062E  6E2F               	movwf	___lwmod@divisor,c
  3809  000630  EC49  F009         	call	___lwmod	;wreg free
  3810  000634  502D               	movf	?___lwmod,w,c
  3811  000636  0F30               	addlw	48
  3812  000638  6E3D               	movwf	printf@c,c
  3813                           
  3814                           ;doprnt.c: 1523: }
  3815                           ;doprnt.c: 1524: (putch(c) );
  3816  00063A  503D               	movf	printf@c,w,c
  3817  00063C  EC1F  F00A         	call	_putch
  3818  000640                     l3291:
  3819  000640  063A               	decf	printf@prec,f,c
  3820  000642  283A               	incf	printf@prec,w,c
  3821  000644  A4D8               	btfss	status,2,c
  3822  000646  D7D8               	goto	l3287
  3823  000648                     l3293:
  3824  000648  C032  FFF6         	movff	printf@f,tblptrl
  3825  00064C  C033  FFF7         	movff	printf@f+1,tblptrh
  3826  000650  4A32               	infsnz	printf@f,f,c
  3827  000652  2A33               	incf	printf@f+1,f,c
  3828  000654                     	if	0	;tblptru may be non-zero
  3829  000654                     	endif
  3830  000654                     	if	0	;tblptru may be non-zero
  3831  000654                     	endif
  3832  000654  0008               	tblrd		*
  3833  000656  CFF5 F03D          	movff	tablat,printf@c
  3834  00065A  503D               	movf	printf@c,w,c
  3835  00065C  B4D8               	btfsc	status,2,c
  3836  00065E  0012               	return	
  3837  000660  D771               	goto	l3245
  3838  000662                     __end_of_printf:
  3839                           	opt stack 0
  3840                           tblptru	equ	0xFF8
  3841                           tblptrh	equ	0xFF7
  3842                           tblptrl	equ	0xFF6
  3843                           tablat	equ	0xFF5
  3844                           prodh	equ	0xFF4
  3845                           prodl	equ	0xFF3
  3846                           intcon	equ	0xFF2
  3847                           intcon3	equ	0xFF0
  3848                           postinc0	equ	0xFEE
  3849                           wreg	equ	0xFE8
  3850                           postdec1	equ	0xFE5
  3851                           plusw1	equ	0xFE3
  3852                           fsr1l	equ	0xFE1
  3853                           postinc2	equ	0xFDE
  3854                           postdec2	equ	0xFDD
  3855                           plusw2	equ	0xFDB
  3856                           fsr2h	equ	0xFDA
  3857                           fsr2l	equ	0xFD9
  3858                           status	equ	0xFD8
  3859                           
  3860 ;; *************** function _putch *****************
  3861 ;; Defined at:
  3862 ;;		line 25 in file "lcd.c"
  3863 ;; Parameters:    Size  Location     Type
  3864 ;;  data            1    wreg     unsigned char 
  3865 ;; Auto vars:     Size  Location     Type
  3866 ;;  data            1   39[COMRAM] unsigned char 
  3867 ;; Return value:  Size  Location     Type
  3868 ;;                  1    wreg      void 
  3869 ;; Registers used:
  3870 ;;		wreg, status,2, status,0, cstack
  3871 ;; Tracked objects:
  3872 ;;		On entry : 0/0
  3873 ;;		On exit  : 0/0
  3874 ;;		Unchanged: 0/0
  3875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3877 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3879 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3880 ;;Total ram usage:        1 bytes
  3881 ;; Hardware stack levels used:    1
  3882 ;; Hardware stack levels required when called:    6
  3883 ;; This function calls:
  3884 ;;		_lcdNibble
  3885 ;; This function is called by:
  3886 ;;		_printf
  3887 ;; This function uses a non-reentrant model
  3888 ;;
  3889                           
  3890                           	psect	text10
  3891  00143E                     __ptext10:
  3892                           	opt stack 0
  3893  00143E                     _putch:
  3894                           	opt stack 21
  3895                           
  3896                           ;incstack = 0
  3897                           ;putch@data stored from wreg
  3898  00143E  6E28               	movwf	putch@data,c
  3899                           
  3900                           ;lcd.c: 26: LATDbits.LATD2 = 1;
  3901  001440  848C               	bsf	3980,2,c	;volatile
  3902                           
  3903                           ;lcd.c: 27: lcdNibble(data);
  3904  001442  5028               	movf	putch@data,w,c
  3905  001444  EC39  F008         	call	_lcdNibble
  3906  001448  0012               	return		;funcret
  3907  00144A                     __end_of_putch:
  3908                           	opt stack 0
  3909                           tblptru	equ	0xFF8
  3910                           tblptrh	equ	0xFF7
  3911                           tblptrl	equ	0xFF6
  3912                           tablat	equ	0xFF5
  3913                           prodh	equ	0xFF4
  3914                           prodl	equ	0xFF3
  3915                           intcon	equ	0xFF2
  3916                           intcon3	equ	0xFF0
  3917                           postinc0	equ	0xFEE
  3918                           wreg	equ	0xFE8
  3919                           postdec1	equ	0xFE5
  3920                           plusw1	equ	0xFE3
  3921                           fsr1l	equ	0xFE1
  3922                           postinc2	equ	0xFDE
  3923                           postdec2	equ	0xFDD
  3924                           plusw2	equ	0xFDB
  3925                           fsr2h	equ	0xFDA
  3926                           fsr2l	equ	0xFD9
  3927                           status	equ	0xFD8
  3928                           
  3929 ;; *************** function ___lwmod *****************
  3930 ;; Defined at:
  3931 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  3932 ;; Parameters:    Size  Location     Type
  3933 ;;  dividend        2   44[COMRAM] unsigned int 
  3934 ;;  divisor         2   46[COMRAM] unsigned int 
  3935 ;; Auto vars:     Size  Location     Type
  3936 ;;  counter         1   48[COMRAM] unsigned char 
  3937 ;; Return value:  Size  Location     Type
  3938 ;;                  2   44[COMRAM] unsigned int 
  3939 ;; Registers used:
  3940 ;;		wreg, status,2, status,0
  3941 ;; Tracked objects:
  3942 ;;		On entry : 0/0
  3943 ;;		On exit  : 0/0
  3944 ;;		Unchanged: 0/0
  3945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3946 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3947 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3949 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3950 ;;Total ram usage:        5 bytes
  3951 ;; Hardware stack levels used:    1
  3952 ;; Hardware stack levels required when called:    5
  3953 ;; This function calls:
  3954 ;;		Nothing
  3955 ;; This function is called by:
  3956 ;;		_printf
  3957 ;; This function uses a non-reentrant model
  3958 ;;
  3959                           
  3960                           	psect	text11
  3961  001292                     __ptext11:
  3962                           	opt stack 0
  3963  001292                     ___lwmod:
  3964                           	opt stack 22
  3965                           
  3966                           ;incstack = 0
  3967  001292  502F               	movf	___lwmod@divisor,w,c
  3968  001294  1030               	iorwf	___lwmod@divisor+1,w,c
  3969  001296  B4D8               	btfsc	status,2,c
  3970  001298  D018               	goto	l732
  3971  00129A  0E01               	movlw	1
  3972  00129C  6E31               	movwf	___lwmod@counter,c
  3973  00129E  D004               	goto	l3231
  3974  0012A0                     l3229:
  3975  0012A0  90D8               	bcf	status,0,c
  3976  0012A2  362F               	rlcf	___lwmod@divisor,f,c
  3977  0012A4  3630               	rlcf	___lwmod@divisor+1,f,c
  3978  0012A6  2A31               	incf	___lwmod@counter,f,c
  3979  0012A8                     l3231:
  3980  0012A8  AE30               	btfss	___lwmod@divisor+1,7,c
  3981  0012AA  D7FA               	goto	l3229
  3982  0012AC                     l3233:
  3983  0012AC  502F               	movf	___lwmod@divisor,w,c
  3984  0012AE  5C2D               	subwf	___lwmod@dividend,w,c
  3985  0012B0  5030               	movf	___lwmod@divisor+1,w,c
  3986  0012B2  582E               	subwfb	___lwmod@dividend+1,w,c
  3987  0012B4  A0D8               	btfss	status,0,c
  3988  0012B6  D004               	goto	l3237
  3989  0012B8  502F               	movf	___lwmod@divisor,w,c
  3990  0012BA  5E2D               	subwf	___lwmod@dividend,f,c
  3991  0012BC  5030               	movf	___lwmod@divisor+1,w,c
  3992  0012BE  5A2E               	subwfb	___lwmod@dividend+1,f,c
  3993  0012C0                     l3237:
  3994  0012C0  90D8               	bcf	status,0,c
  3995  0012C2  3230               	rrcf	___lwmod@divisor+1,f,c
  3996  0012C4  322F               	rrcf	___lwmod@divisor,f,c
  3997  0012C6  2E31               	decfsz	___lwmod@counter,f,c
  3998  0012C8  D7F1               	goto	l3233
  3999  0012CA                     l732:
  4000  0012CA  C02D  F02D         	movff	___lwmod@dividend,?___lwmod
  4001  0012CE  C02E  F02E         	movff	___lwmod@dividend+1,?___lwmod+1
  4002  0012D2  0012               	return		;funcret
  4003  0012D4                     __end_of___lwmod:
  4004                           	opt stack 0
  4005                           tblptru	equ	0xFF8
  4006                           tblptrh	equ	0xFF7
  4007                           tblptrl	equ	0xFF6
  4008                           tablat	equ	0xFF5
  4009                           prodh	equ	0xFF4
  4010                           prodl	equ	0xFF3
  4011                           intcon	equ	0xFF2
  4012                           intcon3	equ	0xFF0
  4013                           postinc0	equ	0xFEE
  4014                           wreg	equ	0xFE8
  4015                           postdec1	equ	0xFE5
  4016                           plusw1	equ	0xFE3
  4017                           fsr1l	equ	0xFE1
  4018                           postinc2	equ	0xFDE
  4019                           postdec2	equ	0xFDD
  4020                           plusw2	equ	0xFDB
  4021                           fsr2h	equ	0xFDA
  4022                           fsr2l	equ	0xFD9
  4023                           status	equ	0xFD8
  4024                           
  4025 ;; *************** function ___lwdiv *****************
  4026 ;; Defined at:
  4027 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  4028 ;; Parameters:    Size  Location     Type
  4029 ;;  dividend        2   37[COMRAM] unsigned int 
  4030 ;;  divisor         2   39[COMRAM] unsigned int 
  4031 ;; Auto vars:     Size  Location     Type
  4032 ;;  quotient        2   42[COMRAM] unsigned int 
  4033 ;;  counter         1   41[COMRAM] unsigned char 
  4034 ;; Return value:  Size  Location     Type
  4035 ;;                  2   37[COMRAM] unsigned int 
  4036 ;; Registers used:
  4037 ;;		wreg, status,2, status,0
  4038 ;; Tracked objects:
  4039 ;;		On entry : 0/0
  4040 ;;		On exit  : 0/0
  4041 ;;		Unchanged: 0/0
  4042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4043 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4044 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4046 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4047 ;;Total ram usage:        7 bytes
  4048 ;; Hardware stack levels used:    1
  4049 ;; Hardware stack levels required when called:    5
  4050 ;; This function calls:
  4051 ;;		Nothing
  4052 ;; This function is called by:
  4053 ;;		_printf
  4054 ;; This function uses a non-reentrant model
  4055 ;;
  4056                           
  4057                           	psect	text12
  4058  00111E                     __ptext12:
  4059                           	opt stack 0
  4060  00111E                     ___lwdiv:
  4061                           	opt stack 22
  4062                           
  4063                           ;incstack = 0
  4064  00111E  0E00               	movlw	0
  4065  001120  6E2C               	movwf	___lwdiv@quotient+1,c
  4066  001122  0E00               	movlw	0
  4067  001124  6E2B               	movwf	___lwdiv@quotient,c
  4068  001126  5028               	movf	___lwdiv@divisor,w,c
  4069  001128  1029               	iorwf	___lwdiv@divisor+1,w,c
  4070  00112A  B4D8               	btfsc	status,2,c
  4071  00112C  D01C               	goto	l722
  4072  00112E  0E01               	movlw	1
  4073  001130  6E2A               	movwf	___lwdiv@counter,c
  4074  001132  D004               	goto	l3211
  4075  001134                     l3209:
  4076  001134  90D8               	bcf	status,0,c
  4077  001136  3628               	rlcf	___lwdiv@divisor,f,c
  4078  001138  3629               	rlcf	___lwdiv@divisor+1,f,c
  4079  00113A  2A2A               	incf	___lwdiv@counter,f,c
  4080  00113C                     l3211:
  4081  00113C  AE29               	btfss	___lwdiv@divisor+1,7,c
  4082  00113E  D7FA               	goto	l3209
  4083  001140                     l3213:
  4084  001140  90D8               	bcf	status,0,c
  4085  001142  362B               	rlcf	___lwdiv@quotient,f,c
  4086  001144  362C               	rlcf	___lwdiv@quotient+1,f,c
  4087  001146  5028               	movf	___lwdiv@divisor,w,c
  4088  001148  5C26               	subwf	___lwdiv@dividend,w,c
  4089  00114A  5029               	movf	___lwdiv@divisor+1,w,c
  4090  00114C  5827               	subwfb	___lwdiv@dividend+1,w,c
  4091  00114E  A0D8               	btfss	status,0,c
  4092  001150  D005               	goto	l3221
  4093  001152  5028               	movf	___lwdiv@divisor,w,c
  4094  001154  5E26               	subwf	___lwdiv@dividend,f,c
  4095  001156  5029               	movf	___lwdiv@divisor+1,w,c
  4096  001158  5A27               	subwfb	___lwdiv@dividend+1,f,c
  4097  00115A  802B               	bsf	___lwdiv@quotient,0,c
  4098  00115C                     l3221:
  4099  00115C  90D8               	bcf	status,0,c
  4100  00115E  3229               	rrcf	___lwdiv@divisor+1,f,c
  4101  001160  3228               	rrcf	___lwdiv@divisor,f,c
  4102  001162  2E2A               	decfsz	___lwdiv@counter,f,c
  4103  001164  D7ED               	goto	l3213
  4104  001166                     l722:
  4105  001166  C02B  F026         	movff	___lwdiv@quotient,?___lwdiv
  4106  00116A  C02C  F027         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4107  00116E  0012               	return		;funcret
  4108  001170                     __end_of___lwdiv:
  4109                           	opt stack 0
  4110                           tblptru	equ	0xFF8
  4111                           tblptrh	equ	0xFF7
  4112                           tblptrl	equ	0xFF6
  4113                           tablat	equ	0xFF5
  4114                           prodh	equ	0xFF4
  4115                           prodl	equ	0xFF3
  4116                           intcon	equ	0xFF2
  4117                           intcon3	equ	0xFF0
  4118                           postinc0	equ	0xFEE
  4119                           wreg	equ	0xFE8
  4120                           postdec1	equ	0xFE5
  4121                           plusw1	equ	0xFE3
  4122                           fsr1l	equ	0xFE1
  4123                           postinc2	equ	0xFDE
  4124                           postdec2	equ	0xFDD
  4125                           plusw2	equ	0xFDB
  4126                           fsr2h	equ	0xFDA
  4127                           fsr2l	equ	0xFD9
  4128                           status	equ	0xFD8
  4129                           
  4130 ;; *************** function ___lcd_newline *****************
  4131 ;; Defined at:
  4132 ;;		line 53 in file "lcd.c"
  4133 ;; Parameters:    Size  Location     Type
  4134 ;;		None
  4135 ;; Auto vars:     Size  Location     Type
  4136 ;;		None
  4137 ;; Return value:  Size  Location     Type
  4138 ;;                  1    wreg      void 
  4139 ;; Registers used:
  4140 ;;		wreg, status,2, status,0, cstack
  4141 ;; Tracked objects:
  4142 ;;		On entry : 0/0
  4143 ;;		On exit  : 0/0
  4144 ;;		Unchanged: 0/0
  4145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4149 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4150 ;;Total ram usage:        0 bytes
  4151 ;; Hardware stack levels used:    1
  4152 ;; Hardware stack levels required when called:    7
  4153 ;; This function calls:
  4154 ;;		_lcdInst
  4155 ;; This function is called by:
  4156 ;;		_main
  4157 ;;		_showInfo
  4158 ;;		_checkV
  4159 ;;		_checkAA
  4160 ;;		_checkC
  4161 ;;		_check9
  4162 ;;		_mainloop
  4163 ;; This function uses a non-reentrant model
  4164 ;;
  4165                           
  4166                           	psect	text13
  4167  001476                     __ptext13:
  4168                           	opt stack 0
  4169  001476                     ___lcd_newline:
  4170                           	opt stack 21
  4171                           
  4172                           ;lcd.c: 54: lcdInst(0b11000000);
  4173                           
  4174                           ;incstack = 0
  4175  001476  0EC0               	movlw	192
  4176  001478  EC25  F00A         	call	_lcdInst
  4177  00147C  0012               	return		;funcret
  4178  00147E                     __end_of___lcd_newline:
  4179                           	opt stack 0
  4180                           tblptru	equ	0xFF8
  4181                           tblptrh	equ	0xFF7
  4182                           tblptrl	equ	0xFF6
  4183                           tablat	equ	0xFF5
  4184                           prodh	equ	0xFF4
  4185                           prodl	equ	0xFF3
  4186                           intcon	equ	0xFF2
  4187                           intcon3	equ	0xFF0
  4188                           postinc0	equ	0xFEE
  4189                           wreg	equ	0xFE8
  4190                           postdec1	equ	0xFE5
  4191                           plusw1	equ	0xFE3
  4192                           fsr1l	equ	0xFE1
  4193                           postinc2	equ	0xFDE
  4194                           postdec2	equ	0xFDD
  4195                           plusw2	equ	0xFDB
  4196                           fsr2h	equ	0xFDA
  4197                           fsr2l	equ	0xFD9
  4198                           status	equ	0xFD8
  4199                           
  4200 ;; *************** function ___ftmul *****************
  4201 ;; Defined at:
  4202 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  4203 ;; Parameters:    Size  Location     Type
  4204 ;;  f1              3   45[COMRAM] float 
  4205 ;;  f2              3   48[COMRAM] float 
  4206 ;; Auto vars:     Size  Location     Type
  4207 ;;  f3_as_produc    3   55[COMRAM] unsigned um
  4208 ;;  sign            1   59[COMRAM] unsigned char 
  4209 ;;  cntr            1   58[COMRAM] unsigned char 
  4210 ;;  exp             1   54[COMRAM] unsigned char 
  4211 ;; Return value:  Size  Location     Type
  4212 ;;                  3   45[COMRAM] float 
  4213 ;; Registers used:
  4214 ;;		wreg, status,2, status,0, cstack
  4215 ;; Tracked objects:
  4216 ;;		On entry : 0/0
  4217 ;;		On exit  : 0/0
  4218 ;;		Unchanged: 0/0
  4219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4220 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4221 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4222 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4223 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4224 ;;Total ram usage:       15 bytes
  4225 ;; Hardware stack levels used:    1
  4226 ;; Hardware stack levels required when called:    6
  4227 ;; This function calls:
  4228 ;;		___ftpack
  4229 ;; This function is called by:
  4230 ;;		_checkV
  4231 ;; This function uses a non-reentrant model
  4232 ;;
  4233                           
  4234                           	psect	text14
  4235  00088E                     __ptext14:
  4236                           	opt stack 0
  4237  00088E                     ___ftmul:
  4238                           	opt stack 21
  4239                           
  4240                           ;incstack = 0
  4241  00088E  C030  F034         	movff	___ftmul@f1+2,??___ftmul
  4242  000892  6A35               	clrf	(??___ftmul+1)& (0+255),c
  4243  000894  6A36               	clrf	(??___ftmul+2)& (0+255),c
  4244  000896  342F               	rlcf	___ftmul@f1+1,w,c
  4245  000898  3634               	rlcf	??___ftmul& (0+255),f,c
  4246  00089A  E301               	bnc	u2321
  4247  00089C  8035               	bsf	(??___ftmul+1)& (0+255),0,c
  4248  00089E                     u2321:
  4249  00089E  5034               	movf	??___ftmul,w,c
  4250  0008A0  6E37               	movwf	___ftmul@exp,c
  4251  0008A2  5037               	movf	___ftmul@exp,w,c
  4252  0008A4  A4D8               	btfss	status,2,c
  4253  0008A6  D007               	goto	l3347
  4254  0008A8  0E00               	movlw	0
  4255  0008AA  6E2E               	movwf	?___ftmul,c
  4256  0008AC  0E00               	movlw	0
  4257  0008AE  6E2F               	movwf	?___ftmul+1,c
  4258  0008B0  0E00               	movlw	0
  4259  0008B2  6E30               	movwf	?___ftmul+2,c
  4260  0008B4  0012               	return	
  4261  0008B6                     l3347:
  4262  0008B6  C033  F034         	movff	___ftmul@f2+2,??___ftmul
  4263  0008BA  6A35               	clrf	(??___ftmul+1)& (0+255),c
  4264  0008BC  6A36               	clrf	(??___ftmul+2)& (0+255),c
  4265  0008BE  3432               	rlcf	___ftmul@f2+1,w,c
  4266  0008C0  3634               	rlcf	??___ftmul& (0+255),f,c
  4267  0008C2  E301               	bnc	u2341
  4268  0008C4  8035               	bsf	(??___ftmul+1)& (0+255),0,c
  4269  0008C6                     u2341:
  4270  0008C6  5034               	movf	??___ftmul,w,c
  4271  0008C8  6E3C               	movwf	___ftmul@sign,c
  4272  0008CA  503C               	movf	___ftmul@sign,w,c
  4273  0008CC  A4D8               	btfss	status,2,c
  4274  0008CE  D007               	goto	l3353
  4275  0008D0  0E00               	movlw	0
  4276  0008D2  6E2E               	movwf	?___ftmul,c
  4277  0008D4  0E00               	movlw	0
  4278  0008D6  6E2F               	movwf	?___ftmul+1,c
  4279  0008D8  0E00               	movlw	0
  4280  0008DA  6E30               	movwf	?___ftmul+2,c
  4281  0008DC  0012               	return	
  4282  0008DE                     l3353:
  4283  0008DE  503C               	movf	___ftmul@sign,w,c
  4284  0008E0  0F7B               	addlw	123
  4285  0008E2  2637               	addwf	___ftmul@exp,f,c
  4286  0008E4  C030  F03C         	movff	___ftmul@f1+2,___ftmul@sign
  4287  0008E8  5033               	movf	___ftmul@f2+2,w,c
  4288  0008EA  1A3C               	xorwf	___ftmul@sign,f,c
  4289  0008EC  0E80               	movlw	128
  4290  0008EE  163C               	andwf	___ftmul@sign,f,c
  4291  0008F0  8E2F               	bsf	___ftmul@f1+1,7,c
  4292  0008F2  8E32               	bsf	___ftmul@f2+1,7,c
  4293  0008F4  0EFF               	movlw	255
  4294  0008F6  1631               	andwf	___ftmul@f2,f,c
  4295  0008F8  0EFF               	movlw	255
  4296  0008FA  1632               	andwf	___ftmul@f2+1,f,c
  4297  0008FC  0E00               	movlw	0
  4298  0008FE  1633               	andwf	___ftmul@f2+2,f,c
  4299  000900  0E00               	movlw	0
  4300  000902  6E38               	movwf	___ftmul@f3_as_product,c
  4301  000904  0E00               	movlw	0
  4302  000906  6E39               	movwf	___ftmul@f3_as_product+1,c
  4303  000908  0E00               	movlw	0
  4304  00090A  6E3A               	movwf	___ftmul@f3_as_product+2,c
  4305  00090C  0E07               	movlw	7
  4306  00090E  6E3B               	movwf	___ftmul@cntr,c
  4307  000910                     l3367:
  4308  000910  A02E               	btfss	___ftmul@f1,0,c
  4309  000912  D006               	goto	l3371
  4310  000914  5031               	movf	___ftmul@f2,w,c
  4311  000916  2638               	addwf	___ftmul@f3_as_product,f,c
  4312  000918  5032               	movf	___ftmul@f2+1,w,c
  4313  00091A  2239               	addwfc	___ftmul@f3_as_product+1,f,c
  4314  00091C  5033               	movf	___ftmul@f2+2,w,c
  4315  00091E  223A               	addwfc	___ftmul@f3_as_product+2,f,c
  4316  000920                     l3371:
  4317  000920  90D8               	bcf	status,0,c
  4318  000922  3230               	rrcf	___ftmul@f1+2,f,c
  4319  000924  322F               	rrcf	___ftmul@f1+1,f,c
  4320  000926  322E               	rrcf	___ftmul@f1,f,c
  4321  000928  90D8               	bcf	status,0,c
  4322  00092A  3631               	rlcf	___ftmul@f2,f,c
  4323  00092C  3632               	rlcf	___ftmul@f2+1,f,c
  4324  00092E  3633               	rlcf	___ftmul@f2+2,f,c
  4325  000930  2E3B               	decfsz	___ftmul@cntr,f,c
  4326  000932  D7EE               	goto	l3367
  4327  000934  0E09               	movlw	9
  4328  000936  6E3B               	movwf	___ftmul@cntr,c
  4329  000938                     l3377:
  4330  000938  A02E               	btfss	___ftmul@f1,0,c
  4331  00093A  D006               	goto	l3381
  4332  00093C  5031               	movf	___ftmul@f2,w,c
  4333  00093E  2638               	addwf	___ftmul@f3_as_product,f,c
  4334  000940  5032               	movf	___ftmul@f2+1,w,c
  4335  000942  2239               	addwfc	___ftmul@f3_as_product+1,f,c
  4336  000944  5033               	movf	___ftmul@f2+2,w,c
  4337  000946  223A               	addwfc	___ftmul@f3_as_product+2,f,c
  4338  000948                     l3381:
  4339  000948  90D8               	bcf	status,0,c
  4340  00094A  3230               	rrcf	___ftmul@f1+2,f,c
  4341  00094C  322F               	rrcf	___ftmul@f1+1,f,c
  4342  00094E  322E               	rrcf	___ftmul@f1,f,c
  4343  000950  90D8               	bcf	status,0,c
  4344  000952  323A               	rrcf	___ftmul@f3_as_product+2,f,c
  4345  000954  3239               	rrcf	___ftmul@f3_as_product+1,f,c
  4346  000956  3238               	rrcf	___ftmul@f3_as_product,f,c
  4347  000958  2E3B               	decfsz	___ftmul@cntr,f,c
  4348  00095A  D7EE               	goto	l3377
  4349  00095C  C038  F026         	movff	___ftmul@f3_as_product,___ftpack@arg
  4350  000960  C039  F027         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4351  000964  C03A  F028         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4352  000968  C037  F029         	movff	___ftmul@exp,___ftpack@exp
  4353  00096C  C03C  F02A         	movff	___ftmul@sign,___ftpack@sign
  4354  000970  EC56  F007         	call	___ftpack	;wreg free
  4355  000974  C026  F02E         	movff	?___ftpack,?___ftmul
  4356  000978  C027  F02F         	movff	?___ftpack+1,?___ftmul+1
  4357  00097C  C028  F030         	movff	?___ftpack+2,?___ftmul+2
  4358  000980  0012               	return	
  4359  000982                     __end_of___ftmul:
  4360                           	opt stack 0
  4361                           tblptru	equ	0xFF8
  4362                           tblptrh	equ	0xFF7
  4363                           tblptrl	equ	0xFF6
  4364                           tablat	equ	0xFF5
  4365                           prodh	equ	0xFF4
  4366                           prodl	equ	0xFF3
  4367                           intcon	equ	0xFF2
  4368                           intcon3	equ	0xFF0
  4369                           postinc0	equ	0xFEE
  4370                           wreg	equ	0xFE8
  4371                           postdec1	equ	0xFE5
  4372                           plusw1	equ	0xFE3
  4373                           fsr1l	equ	0xFE1
  4374                           postinc2	equ	0xFDE
  4375                           postdec2	equ	0xFDD
  4376                           plusw2	equ	0xFDB
  4377                           fsr2h	equ	0xFDA
  4378                           fsr2l	equ	0xFD9
  4379                           status	equ	0xFD8
  4380                           
  4381 ;; *************** function ___ftge *****************
  4382 ;; Defined at:
  4383 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
  4384 ;; Parameters:    Size  Location     Type
  4385 ;;  ff1             3    6[BANK0 ] float 
  4386 ;;  ff2             3    9[BANK0 ] float 
  4387 ;; Auto vars:     Size  Location     Type
  4388 ;;		None
  4389 ;; Return value:  Size  Location     Type
  4390 ;;		None               void
  4391 ;; Registers used:
  4392 ;;		wreg, status,2, status,0
  4393 ;; Tracked objects:
  4394 ;;		On entry : 0/0
  4395 ;;		On exit  : 0/0
  4396 ;;		Unchanged: 0/0
  4397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4398 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4400 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4401 ;;      Totals:         3       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4402 ;;Total ram usage:        9 bytes
  4403 ;; Hardware stack levels used:    1
  4404 ;; Hardware stack levels required when called:    5
  4405 ;; This function calls:
  4406 ;;		Nothing
  4407 ;; This function is called by:
  4408 ;;		_checkV
  4409 ;; This function uses a non-reentrant model
  4410 ;;
  4411                           
  4412                           	psect	text15
  4413  000DF4                     __ptext15:
  4414                           	opt stack 0
  4415  000DF4                     ___ftge:
  4416                           	opt stack 22
  4417                           
  4418                           ;incstack = 0
  4419  000DF4  0100               	movlb	0	; () banked
  4420  000DF6  AF88               	btfss	(___ftge@ff1+2)& (0+255),7,b
  4421  000DF8  D019               	goto	l3405
  4422                           
  4423                           ; BSR set to: 0
  4424  000DFA  C086  F046         	movff	___ftge@ff1,??___ftge
  4425  000DFE  C087  F047         	movff	___ftge@ff1+1,??___ftge+1
  4426  000E02  C088  F048         	movff	___ftge@ff1+2,??___ftge+2
  4427  000E06  1E46               	comf	??___ftge,f,c
  4428  000E08  1E47               	comf	??___ftge+1,f,c
  4429  000E0A  1E48               	comf	??___ftge+2,f,c
  4430  000E0C  2A46               	incf	??___ftge,f,c
  4431  000E0E  0E00               	movlw	0
  4432  000E10  2247               	addwfc	??___ftge+1,f,c
  4433  000E12  2248               	addwfc	??___ftge+2,f,c
  4434  000E14  0E00               	movlw	0
  4435  000E16  2446               	addwf	??___ftge,w,c
  4436  000E18  0100               	movlb	0	; () banked
  4437  000E1A  6F86               	movwf	___ftge@ff1& (0+255),b
  4438  000E1C  0E00               	movlw	0
  4439  000E1E  2047               	addwfc	??___ftge+1,w,c
  4440  000E20  0100               	movlb	0	; () banked
  4441  000E22  6F87               	movwf	(___ftge@ff1+1)& (0+255),b
  4442  000E24  0E80               	movlw	128
  4443  000E26  2048               	addwfc	??___ftge+2,w,c
  4444  000E28  0100               	movlb	0	; () banked
  4445  000E2A  6F88               	movwf	(___ftge@ff1+2)& (0+255),b
  4446  000E2C                     l3405:
  4447                           
  4448                           ; BSR set to: 0
  4449  000E2C  0100               	movlb	0	; () banked
  4450  000E2E  AF8B               	btfss	(___ftge@ff2+2)& (0+255),7,b
  4451  000E30  D019               	goto	l3409
  4452                           
  4453                           ; BSR set to: 0
  4454  000E32  C089  F046         	movff	___ftge@ff2,??___ftge
  4455  000E36  C08A  F047         	movff	___ftge@ff2+1,??___ftge+1
  4456  000E3A  C08B  F048         	movff	___ftge@ff2+2,??___ftge+2
  4457  000E3E  1E46               	comf	??___ftge,f,c
  4458  000E40  1E47               	comf	??___ftge+1,f,c
  4459  000E42  1E48               	comf	??___ftge+2,f,c
  4460  000E44  2A46               	incf	??___ftge,f,c
  4461  000E46  0E00               	movlw	0
  4462  000E48  2247               	addwfc	??___ftge+1,f,c
  4463  000E4A  2248               	addwfc	??___ftge+2,f,c
  4464  000E4C  0E00               	movlw	0
  4465  000E4E  2446               	addwf	??___ftge,w,c
  4466  000E50  0100               	movlb	0	; () banked
  4467  000E52  6F89               	movwf	___ftge@ff2& (0+255),b
  4468  000E54  0E00               	movlw	0
  4469  000E56  2047               	addwfc	??___ftge+1,w,c
  4470  000E58  0100               	movlb	0	; () banked
  4471  000E5A  6F8A               	movwf	(___ftge@ff2+1)& (0+255),b
  4472  000E5C  0E80               	movlw	128
  4473  000E5E  2048               	addwfc	??___ftge+2,w,c
  4474  000E60  0100               	movlb	0	; () banked
  4475  000E62  6F8B               	movwf	(___ftge@ff2+2)& (0+255),b
  4476  000E64                     l3409:
  4477                           
  4478                           ; BSR set to: 0
  4479  000E64  0E00               	movlw	0
  4480  000E66  0100               	movlb	0	; () banked
  4481  000E68  1B86               	xorwf	___ftge@ff1& (0+255),f,b
  4482  000E6A  0E00               	movlw	0
  4483  000E6C  0100               	movlb	0	; () banked
  4484  000E6E  1B87               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  4485  000E70  0E80               	movlw	128
  4486  000E72  0100               	movlb	0	; () banked
  4487  000E74  1B88               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  4488                           
  4489                           ; BSR set to: 0
  4490  000E76  0E00               	movlw	0
  4491  000E78  0100               	movlb	0	; () banked
  4492  000E7A  1B89               	xorwf	___ftge@ff2& (0+255),f,b
  4493  000E7C  0E00               	movlw	0
  4494  000E7E  0100               	movlb	0	; () banked
  4495  000E80  1B8A               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  4496  000E82  0E80               	movlw	128
  4497  000E84  0100               	movlb	0	; () banked
  4498  000E86  1B8B               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  4499  000E88  0100               	movlb	0	; () banked
  4500  000E8A  5189               	movf	___ftge@ff2& (0+255),w,b
  4501  000E8C  0100               	movlb	0	; () banked
  4502  000E8E  5D86               	subwf	___ftge@ff1& (0+255),w,b
  4503  000E90  0100               	movlb	0	; () banked
  4504  000E92  518A               	movf	(___ftge@ff2+1)& (0+255),w,b
  4505  000E94  0100               	movlb	0	; () banked
  4506  000E96  5987               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  4507  000E98  0100               	movlb	0	; () banked
  4508  000E9A  518B               	movf	(___ftge@ff2+2)& (0+255),w,b
  4509  000E9C  0100               	movlb	0	; () banked
  4510  000E9E  5988               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  4511  000EA0  B0D8               	btfsc	status,0,c
  4512  000EA2  D002               	goto	l3415
  4513                           
  4514                           ; BSR set to: 0
  4515  000EA4  90D8               	bcf	status,0,c
  4516  000EA6  0012               	return	
  4517  000EA8                     l3415:
  4518                           
  4519                           ; BSR set to: 0
  4520  000EA8  80D8               	bsf	status,0,c
  4521                           
  4522                           ; BSR set to: 0
  4523  000EAA  0012               	return	
  4524  000EAC                     __end_of___ftge:
  4525                           	opt stack 0
  4526                           tblptru	equ	0xFF8
  4527                           tblptrh	equ	0xFF7
  4528                           tblptrl	equ	0xFF6
  4529                           tablat	equ	0xFF5
  4530                           prodh	equ	0xFF4
  4531                           prodl	equ	0xFF3
  4532                           intcon	equ	0xFF2
  4533                           intcon3	equ	0xFF0
  4534                           postinc0	equ	0xFEE
  4535                           wreg	equ	0xFE8
  4536                           postdec1	equ	0xFE5
  4537                           plusw1	equ	0xFE3
  4538                           fsr1l	equ	0xFE1
  4539                           postinc2	equ	0xFDE
  4540                           postdec2	equ	0xFDD
  4541                           plusw2	equ	0xFDB
  4542                           fsr2h	equ	0xFDA
  4543                           fsr2l	equ	0xFD9
  4544                           status	equ	0xFD8
  4545                           
  4546 ;; *************** function ___ftdiv *****************
  4547 ;; Defined at:
  4548 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdiv.c"
  4549 ;; Parameters:    Size  Location     Type
  4550 ;;  f1              3   60[COMRAM] float 
  4551 ;;  f2              3   63[COMRAM] float 
  4552 ;; Auto vars:     Size  Location     Type
  4553 ;;  f3              3    1[BANK0 ] float 
  4554 ;;  sign            1    5[BANK0 ] unsigned char 
  4555 ;;  exp             1    4[BANK0 ] unsigned char 
  4556 ;;  cntr            1    0[BANK0 ] unsigned char 
  4557 ;; Return value:  Size  Location     Type
  4558 ;;                  3   60[COMRAM] float 
  4559 ;; Registers used:
  4560 ;;		wreg, status,2, status,0, cstack
  4561 ;; Tracked objects:
  4562 ;;		On entry : 0/0
  4563 ;;		On exit  : 0/0
  4564 ;;		Unchanged: 0/0
  4565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4566 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4567 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4568 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4569 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4570 ;;Total ram usage:       15 bytes
  4571 ;; Hardware stack levels used:    1
  4572 ;; Hardware stack levels required when called:    6
  4573 ;; This function calls:
  4574 ;;		___ftpack
  4575 ;; This function is called by:
  4576 ;;		_checkV
  4577 ;; This function uses a non-reentrant model
  4578 ;;
  4579                           
  4580                           	psect	text16
  4581  00078A                     __ptext16:
  4582                           	opt stack 0
  4583  00078A                     ___ftdiv:
  4584                           	opt stack 21
  4585                           
  4586                           ; BSR set to: 0
  4587                           ;incstack = 0
  4588  00078A  C03F  F043         	movff	___ftdiv@f1+2,??___ftdiv
  4589  00078E  6A44               	clrf	(??___ftdiv+1)& (0+255),c
  4590  000790  6A45               	clrf	(??___ftdiv+2)& (0+255),c
  4591  000792  343E               	rlcf	___ftdiv@f1+1,w,c
  4592  000794  3643               	rlcf	??___ftdiv& (0+255),f,c
  4593  000796  E301               	bnc	u2271
  4594  000798  8044               	bsf	(??___ftdiv+1)& (0+255),0,c
  4595  00079A                     u2271:
  4596  00079A  5043               	movf	??___ftdiv,w,c
  4597  00079C  0100               	movlb	0	; () banked
  4598  00079E  6F84               	movwf	___ftdiv@exp& (0+255),b
  4599  0007A0  0100               	movlb	0	; () banked
  4600  0007A2  5184               	movf	___ftdiv@exp& (0+255),w,b
  4601  0007A4  A4D8               	btfss	status,2,c
  4602  0007A6  D007               	goto	l3301
  4603                           
  4604                           ; BSR set to: 0
  4605  0007A8  0E00               	movlw	0
  4606  0007AA  6E3D               	movwf	?___ftdiv,c
  4607  0007AC  0E00               	movlw	0
  4608  0007AE  6E3E               	movwf	?___ftdiv+1,c
  4609  0007B0  0E00               	movlw	0
  4610  0007B2  6E3F               	movwf	?___ftdiv+2,c
  4611                           
  4612                           ; BSR set to: 0
  4613  0007B4  0012               	return	
  4614  0007B6                     l3301:
  4615                           
  4616                           ; BSR set to: 0
  4617  0007B6  C042  F043         	movff	___ftdiv@f2+2,??___ftdiv
  4618  0007BA  6A44               	clrf	(??___ftdiv+1)& (0+255),c
  4619  0007BC  6A45               	clrf	(??___ftdiv+2)& (0+255),c
  4620  0007BE  3441               	rlcf	___ftdiv@f2+1,w,c
  4621  0007C0  3643               	rlcf	??___ftdiv& (0+255),f,c
  4622  0007C2  E301               	bnc	u2291
  4623  0007C4  8044               	bsf	(??___ftdiv+1)& (0+255),0,c
  4624  0007C6                     u2291:
  4625  0007C6  5043               	movf	??___ftdiv,w,c
  4626  0007C8  0100               	movlb	0	; () banked
  4627  0007CA  6F85               	movwf	___ftdiv@sign& (0+255),b
  4628  0007CC  0100               	movlb	0	; () banked
  4629  0007CE  5185               	movf	___ftdiv@sign& (0+255),w,b
  4630  0007D0  A4D8               	btfss	status,2,c
  4631  0007D2  D007               	goto	l3307
  4632                           
  4633                           ; BSR set to: 0
  4634  0007D4  0E00               	movlw	0
  4635  0007D6  6E3D               	movwf	?___ftdiv,c
  4636  0007D8  0E00               	movlw	0
  4637  0007DA  6E3E               	movwf	?___ftdiv+1,c
  4638  0007DC  0E00               	movlw	0
  4639  0007DE  6E3F               	movwf	?___ftdiv+2,c
  4640                           
  4641                           ; BSR set to: 0
  4642  0007E0  0012               	return	
  4643  0007E2                     l3307:
  4644                           
  4645                           ; BSR set to: 0
  4646  0007E2  0E00               	movlw	0
  4647  0007E4  0100               	movlb	0	; () banked
  4648  0007E6  6F81               	movwf	___ftdiv@f3& (0+255),b
  4649  0007E8  0E00               	movlw	0
  4650  0007EA  0100               	movlb	0	; () banked
  4651  0007EC  6F82               	movwf	(___ftdiv@f3+1)& (0+255),b
  4652  0007EE  0E00               	movlw	0
  4653  0007F0  0100               	movlb	0	; () banked
  4654  0007F2  6F83               	movwf	(___ftdiv@f3+2)& (0+255),b
  4655                           
  4656                           ; BSR set to: 0
  4657  0007F4  0100               	movlb	0	; () banked
  4658  0007F6  5185               	movf	___ftdiv@sign& (0+255),w,b
  4659  0007F8  0F89               	addlw	137
  4660  0007FA  0100               	movlb	0	; () banked
  4661  0007FC  5F84               	subwf	___ftdiv@exp& (0+255),f,b
  4662                           
  4663                           ; BSR set to: 0
  4664  0007FE  C03F  F085         	movff	___ftdiv@f1+2,___ftdiv@sign
  4665                           
  4666                           ; BSR set to: 0
  4667  000802  5042               	movf	___ftdiv@f2+2,w,c
  4668  000804  0100               	movlb	0	; () banked
  4669  000806  1B85               	xorwf	___ftdiv@sign& (0+255),f,b
  4670                           
  4671                           ; BSR set to: 0
  4672  000808  0E80               	movlw	128
  4673  00080A  0100               	movlb	0	; () banked
  4674  00080C  1785               	andwf	___ftdiv@sign& (0+255),f,b
  4675                           
  4676                           ; BSR set to: 0
  4677  00080E  8E3E               	bsf	___ftdiv@f1+1,7,c
  4678                           
  4679                           ; BSR set to: 0
  4680  000810  0EFF               	movlw	255
  4681  000812  163D               	andwf	___ftdiv@f1,f,c
  4682  000814  0EFF               	movlw	255
  4683  000816  163E               	andwf	___ftdiv@f1+1,f,c
  4684  000818  0E00               	movlw	0
  4685  00081A  163F               	andwf	___ftdiv@f1+2,f,c
  4686                           
  4687                           ; BSR set to: 0
  4688  00081C  8E41               	bsf	___ftdiv@f2+1,7,c
  4689                           
  4690                           ; BSR set to: 0
  4691  00081E  0EFF               	movlw	255
  4692  000820  1640               	andwf	___ftdiv@f2,f,c
  4693  000822  0EFF               	movlw	255
  4694  000824  1641               	andwf	___ftdiv@f2+1,f,c
  4695  000826  0E00               	movlw	0
  4696  000828  1642               	andwf	___ftdiv@f2+2,f,c
  4697                           
  4698                           ; BSR set to: 0
  4699  00082A  0E18               	movlw	24
  4700  00082C  0100               	movlb	0	; () banked
  4701  00082E  6F80               	movwf	___ftdiv@cntr& (0+255),b
  4702  000830                     l3327:
  4703                           
  4704                           ; BSR set to: 0
  4705  000830  0100               	movlb	0	; () banked
  4706  000832  90D8               	bcf	status,0,c
  4707  000834  3781               	rlcf	___ftdiv@f3& (0+255),f,b
  4708  000836  3782               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  4709  000838  3783               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  4710                           
  4711                           ; BSR set to: 0
  4712  00083A  5040               	movf	___ftdiv@f2,w,c
  4713  00083C  5C3D               	subwf	___ftdiv@f1,w,c
  4714  00083E  5041               	movf	___ftdiv@f2+1,w,c
  4715  000840  583E               	subwfb	___ftdiv@f1+1,w,c
  4716  000842  5042               	movf	___ftdiv@f2+2,w,c
  4717  000844  583F               	subwfb	___ftdiv@f1+2,w,c
  4718  000846  A0D8               	btfss	status,0,c
  4719  000848  D008               	goto	l602
  4720                           
  4721                           ; BSR set to: 0
  4722  00084A  5040               	movf	___ftdiv@f2,w,c
  4723  00084C  5E3D               	subwf	___ftdiv@f1,f,c
  4724  00084E  5041               	movf	___ftdiv@f2+1,w,c
  4725  000850  5A3E               	subwfb	___ftdiv@f1+1,f,c
  4726  000852  5042               	movf	___ftdiv@f2+2,w,c
  4727  000854  5A3F               	subwfb	___ftdiv@f1+2,f,c
  4728                           
  4729                           ; BSR set to: 0
  4730  000856  0100               	movlb	0	; () banked
  4731  000858  8181               	bsf	___ftdiv@f3& (0+255),0,b
  4732  00085A                     l602:
  4733                           
  4734                           ; BSR set to: 0
  4735  00085A  90D8               	bcf	status,0,c
  4736  00085C  363D               	rlcf	___ftdiv@f1,f,c
  4737  00085E  363E               	rlcf	___ftdiv@f1+1,f,c
  4738  000860  363F               	rlcf	___ftdiv@f1+2,f,c
  4739                           
  4740                           ; BSR set to: 0
  4741  000862  0100               	movlb	0	; () banked
  4742  000864  2F80               	decfsz	___ftdiv@cntr& (0+255),f,b
  4743  000866  D7E4               	goto	l3327
  4744                           
  4745                           ; BSR set to: 0
  4746                           
  4747                           ; BSR set to: 0
  4748  000868  C081  F026         	movff	___ftdiv@f3,___ftpack@arg
  4749  00086C  C082  F027         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4750  000870  C083  F028         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4751  000874  C084  F029         	movff	___ftdiv@exp,___ftpack@exp
  4752  000878  C085  F02A         	movff	___ftdiv@sign,___ftpack@sign
  4753  00087C  EC56  F007         	call	___ftpack	;wreg free
  4754  000880  C026  F03D         	movff	?___ftpack,?___ftdiv
  4755  000884  C027  F03E         	movff	?___ftpack+1,?___ftdiv+1
  4756  000888  C028  F03F         	movff	?___ftpack+2,?___ftdiv+2
  4757  00088C  0012               	return	
  4758  00088E                     __end_of___ftdiv:
  4759                           	opt stack 0
  4760                           tblptru	equ	0xFF8
  4761                           tblptrh	equ	0xFF7
  4762                           tblptrl	equ	0xFF6
  4763                           tablat	equ	0xFF5
  4764                           prodh	equ	0xFF4
  4765                           prodl	equ	0xFF3
  4766                           intcon	equ	0xFF2
  4767                           intcon3	equ	0xFF0
  4768                           postinc0	equ	0xFEE
  4769                           wreg	equ	0xFE8
  4770                           postdec1	equ	0xFE5
  4771                           plusw1	equ	0xFE3
  4772                           fsr1l	equ	0xFE1
  4773                           postinc2	equ	0xFDE
  4774                           postdec2	equ	0xFDD
  4775                           plusw2	equ	0xFDB
  4776                           fsr2h	equ	0xFDA
  4777                           fsr2l	equ	0xFD9
  4778                           status	equ	0xFD8
  4779                           
  4780 ;; *************** function ___awtoft *****************
  4781 ;; Defined at:
  4782 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awtoft.c"
  4783 ;; Parameters:    Size  Location     Type
  4784 ;;  c               2   45[COMRAM] int 
  4785 ;; Auto vars:     Size  Location     Type
  4786 ;;  sign            1   48[COMRAM] unsigned char 
  4787 ;; Return value:  Size  Location     Type
  4788 ;;                  3   45[COMRAM] float 
  4789 ;; Registers used:
  4790 ;;		wreg, status,2, status,0, cstack
  4791 ;; Tracked objects:
  4792 ;;		On entry : 0/0
  4793 ;;		On exit  : 0/0
  4794 ;;		Unchanged: 0/0
  4795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4796 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4797 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4799 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4800 ;;Total ram usage:        4 bytes
  4801 ;; Hardware stack levels used:    1
  4802 ;; Hardware stack levels required when called:    6
  4803 ;; This function calls:
  4804 ;;		___ftpack
  4805 ;; This function is called by:
  4806 ;;		_checkV
  4807 ;; This function uses a non-reentrant model
  4808 ;;
  4809                           
  4810                           	psect	text17
  4811  001352                     __ptext17:
  4812                           	opt stack 0
  4813  001352                     ___awtoft:
  4814                           	opt stack 21
  4815                           
  4816                           ;incstack = 0
  4817  001352  0E00               	movlw	0
  4818  001354  6E31               	movwf	___awtoft@sign,c
  4819  001356  AE2F               	btfss	___awtoft@c+1,7,c
  4820  001358  D006               	goto	l3397
  4821  00135A  6C2E               	negf	___awtoft@c,c
  4822  00135C  1E2F               	comf	___awtoft@c+1,f,c
  4823  00135E  B0D8               	btfsc	status,0,c
  4824  001360  2A2F               	incf	___awtoft@c+1,f,c
  4825  001362  0E01               	movlw	1
  4826  001364  6E31               	movwf	___awtoft@sign,c
  4827  001366                     l3397:
  4828  001366  C02E  F026         	movff	___awtoft@c,___ftpack@arg
  4829  00136A  C02F  F027         	movff	___awtoft@c+1,___ftpack@arg+1
  4830  00136E  6A28               	clrf	___ftpack@arg+2,c
  4831  001370  0E8E               	movlw	142
  4832  001372  6E29               	movwf	___ftpack@exp,c
  4833  001374  C031  F02A         	movff	___awtoft@sign,___ftpack@sign
  4834  001378  EC56  F007         	call	___ftpack	;wreg free
  4835  00137C  C026  F02E         	movff	?___ftpack,?___awtoft
  4836  001380  C027  F02F         	movff	?___ftpack+1,?___awtoft+1
  4837  001384  C028  F030         	movff	?___ftpack+2,?___awtoft+2
  4838  001388  0012               	return	
  4839  00138A                     __end_of___awtoft:
  4840                           	opt stack 0
  4841                           tblptru	equ	0xFF8
  4842                           tblptrh	equ	0xFF7
  4843                           tblptrl	equ	0xFF6
  4844                           tablat	equ	0xFF5
  4845                           prodh	equ	0xFF4
  4846                           prodl	equ	0xFF3
  4847                           intcon	equ	0xFF2
  4848                           intcon3	equ	0xFF0
  4849                           postinc0	equ	0xFEE
  4850                           wreg	equ	0xFE8
  4851                           postdec1	equ	0xFE5
  4852                           plusw1	equ	0xFE3
  4853                           fsr1l	equ	0xFE1
  4854                           postinc2	equ	0xFDE
  4855                           postdec2	equ	0xFDD
  4856                           plusw2	equ	0xFDB
  4857                           fsr2h	equ	0xFDA
  4858                           fsr2l	equ	0xFD9
  4859                           status	equ	0xFD8
  4860                           
  4861 ;; *************** function ___ftpack *****************
  4862 ;; Defined at:
  4863 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  4864 ;; Parameters:    Size  Location     Type
  4865 ;;  arg             3   37[COMRAM] unsigned um
  4866 ;;  exp             1   40[COMRAM] unsigned char 
  4867 ;;  sign            1   41[COMRAM] unsigned char 
  4868 ;; Auto vars:     Size  Location     Type
  4869 ;;		None
  4870 ;; Return value:  Size  Location     Type
  4871 ;;                  3   37[COMRAM] float 
  4872 ;; Registers used:
  4873 ;;		wreg, status,2, status,0
  4874 ;; Tracked objects:
  4875 ;;		On entry : 0/0
  4876 ;;		On exit  : 0/0
  4877 ;;		Unchanged: 0/0
  4878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4879 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4881 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4882 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4883 ;;Total ram usage:        8 bytes
  4884 ;; Hardware stack levels used:    1
  4885 ;; Hardware stack levels required when called:    5
  4886 ;; This function calls:
  4887 ;;		Nothing
  4888 ;; This function is called by:
  4889 ;;		___awtoft
  4890 ;;		___ftdiv
  4891 ;;		___ftmul
  4892 ;; This function uses a non-reentrant model
  4893 ;;
  4894                           
  4895                           	psect	text18
  4896  000EAC                     __ptext18:
  4897                           	opt stack 0
  4898  000EAC                     ___ftpack:
  4899                           	opt stack 21
  4900                           
  4901                           ;incstack = 0
  4902  000EAC  5029               	movf	___ftpack@exp,w,c
  4903  000EAE  B4D8               	btfsc	status,2,c
  4904  000EB0  D005               	goto	l3171
  4905  000EB2  5026               	movf	___ftpack@arg,w,c
  4906  000EB4  1027               	iorwf	___ftpack@arg+1,w,c
  4907  000EB6  1028               	iorwf	___ftpack@arg+2,w,c
  4908  000EB8  A4D8               	btfss	status,2,c
  4909  000EBA  D00C               	goto	l3177
  4910  000EBC                     l3171:
  4911  000EBC  0E00               	movlw	0
  4912  000EBE  6E26               	movwf	?___ftpack,c
  4913  000EC0  0E00               	movlw	0
  4914  000EC2  6E27               	movwf	?___ftpack+1,c
  4915  000EC4  0E00               	movlw	0
  4916  000EC6  6E28               	movwf	?___ftpack+2,c
  4917  000EC8  0012               	return	
  4918  000ECA                     l3175:
  4919  000ECA  2A29               	incf	___ftpack@exp,f,c
  4920  000ECC  90D8               	bcf	status,0,c
  4921  000ECE  3228               	rrcf	___ftpack@arg+2,f,c
  4922  000ED0  3227               	rrcf	___ftpack@arg+1,f,c
  4923  000ED2  3226               	rrcf	___ftpack@arg,f,c
  4924  000ED4                     l3177:
  4925  000ED4  0E00               	movlw	0
  4926  000ED6  1426               	andwf	___ftpack@arg,w,c
  4927  000ED8  6E2B               	movwf	??___ftpack& (0+255),c
  4928  000EDA  0E00               	movlw	0
  4929  000EDC  1427               	andwf	___ftpack@arg+1,w,c
  4930  000EDE  6E2C               	movwf	(??___ftpack+1)& (0+255),c
  4931  000EE0  0EFE               	movlw	254
  4932  000EE2  1428               	andwf	___ftpack@arg+2,w,c
  4933  000EE4  6E2D               	movwf	(??___ftpack+2)& (0+255),c
  4934  000EE6  502B               	movf	??___ftpack,w,c
  4935  000EE8  102C               	iorwf	??___ftpack+1,w,c
  4936  000EEA  102D               	iorwf	??___ftpack+2,w,c
  4937  000EEC  B4D8               	btfsc	status,2,c
  4938  000EEE  D00C               	goto	l3183
  4939  000EF0  D7EC               	goto	l3175
  4940  000EF2                     l3179:
  4941  000EF2  2A29               	incf	___ftpack@exp,f,c
  4942  000EF4  0E01               	movlw	1
  4943  000EF6  2626               	addwf	___ftpack@arg,f,c
  4944  000EF8  0E00               	movlw	0
  4945  000EFA  2227               	addwfc	___ftpack@arg+1,f,c
  4946  000EFC  0E00               	movlw	0
  4947  000EFE  2228               	addwfc	___ftpack@arg+2,f,c
  4948  000F00  90D8               	bcf	status,0,c
  4949  000F02  3228               	rrcf	___ftpack@arg+2,f,c
  4950  000F04  3227               	rrcf	___ftpack@arg+1,f,c
  4951  000F06  3226               	rrcf	___ftpack@arg,f,c
  4952  000F08                     l3183:
  4953  000F08  0E00               	movlw	0
  4954  000F0A  1426               	andwf	___ftpack@arg,w,c
  4955  000F0C  6E2B               	movwf	??___ftpack& (0+255),c
  4956  000F0E  0E00               	movlw	0
  4957  000F10  1427               	andwf	___ftpack@arg+1,w,c
  4958  000F12  6E2C               	movwf	(??___ftpack+1)& (0+255),c
  4959  000F14  0EFF               	movlw	255
  4960  000F16  1428               	andwf	___ftpack@arg+2,w,c
  4961  000F18  6E2D               	movwf	(??___ftpack+2)& (0+255),c
  4962  000F1A  502B               	movf	??___ftpack,w,c
  4963  000F1C  102C               	iorwf	??___ftpack+1,w,c
  4964  000F1E  102D               	iorwf	??___ftpack+2,w,c
  4965  000F20  B4D8               	btfsc	status,2,c
  4966  000F22  D006               	goto	l3187
  4967  000F24  D7E6               	goto	l3179
  4968  000F26                     l3185:
  4969  000F26  0629               	decf	___ftpack@exp,f,c
  4970  000F28  90D8               	bcf	status,0,c
  4971  000F2A  3626               	rlcf	___ftpack@arg,f,c
  4972  000F2C  3627               	rlcf	___ftpack@arg+1,f,c
  4973  000F2E  3628               	rlcf	___ftpack@arg+2,f,c
  4974  000F30                     l3187:
  4975  000F30  BE27               	btfsc	___ftpack@arg+1,7,c
  4976  000F32  D003               	goto	l544
  4977  000F34  0E02               	movlw	2
  4978  000F36  6029               	cpfslt	___ftpack@exp,c
  4979  000F38  D7F6               	goto	l3185
  4980  000F3A                     l544:
  4981  000F3A  A029               	btfss	___ftpack@exp,0,c
  4982  000F3C  9E27               	bcf	___ftpack@arg+1,7,c
  4983  000F3E  90D8               	bcf	status,0,c
  4984  000F40  3229               	rrcf	___ftpack@exp,f,c
  4985  000F42  5029               	movf	___ftpack@exp,w,c
  4986  000F44  1228               	iorwf	___ftpack@arg+2,f,c
  4987  000F46  502A               	movf	___ftpack@sign,w,c
  4988  000F48  A4D8               	btfss	status,2,c
  4989  000F4A  8E28               	bsf	___ftpack@arg+2,7,c
  4990  000F4C  C026  F026         	movff	___ftpack@arg,?___ftpack
  4991  000F50  C027  F027         	movff	___ftpack@arg+1,?___ftpack+1
  4992  000F54  C028  F028         	movff	___ftpack@arg+2,?___ftpack+2
  4993  000F58  0012               	return	
  4994  000F5A                     __end_of___ftpack:
  4995                           	opt stack 0
  4996                           tblptru	equ	0xFF8
  4997                           tblptrh	equ	0xFF7
  4998                           tblptrl	equ	0xFF6
  4999                           tablat	equ	0xFF5
  5000                           prodh	equ	0xFF4
  5001                           prodl	equ	0xFF3
  5002                           intcon	equ	0xFF2
  5003                           intcon3	equ	0xFF0
  5004                           postinc0	equ	0xFEE
  5005                           wreg	equ	0xFE8
  5006                           postdec1	equ	0xFE5
  5007                           plusw1	equ	0xFE3
  5008                           fsr1l	equ	0xFE1
  5009                           postinc2	equ	0xFDE
  5010                           postdec2	equ	0xFDD
  5011                           plusw2	equ	0xFDB
  5012                           fsr2h	equ	0xFDA
  5013                           fsr2l	equ	0xFD9
  5014                           status	equ	0xFD8
  5015                           
  5016 ;; *************** function _AD *****************
  5017 ;; Defined at:
  5018 ;;		line 4 in file "sensors.c"
  5019 ;; Parameters:    Size  Location     Type
  5020 ;;  channel         1    wreg     unsigned char 
  5021 ;; Auto vars:     Size  Location     Type
  5022 ;;  channel         1   41[COMRAM] unsigned char 
  5023 ;; Return value:  Size  Location     Type
  5024 ;;                  2   37[COMRAM] int 
  5025 ;; Registers used:
  5026 ;;		wreg, status,2, status,0, cstack
  5027 ;; Tracked objects:
  5028 ;;		On entry : 0/0
  5029 ;;		On exit  : 0/0
  5030 ;;		Unchanged: 0/0
  5031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5032 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5033 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5034 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5035 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5036 ;;Total ram usage:        5 bytes
  5037 ;; Hardware stack levels used:    1
  5038 ;; Hardware stack levels required when called:    5
  5039 ;; This function calls:
  5040 ;;		Nothing
  5041 ;; This function is called by:
  5042 ;;		_checkAA
  5043 ;;		_checkC
  5044 ;;		_check9
  5045 ;; This function uses a non-reentrant model
  5046 ;;
  5047                           
  5048                           	psect	text19
  5049  001316                     __ptext19:
  5050                           	opt stack 0
  5051  001316                     _AD:
  5052                           	opt stack 23
  5053                           
  5054                           ;incstack = 0
  5055                           ;AD@channel stored from wreg
  5056  001316  6E2A               	movwf	AD@channel,c
  5057                           
  5058                           ;sensors.c: 6: ADCON0 = ((channel << 2));
  5059  001318  442A               	rlncf	AD@channel,w,c
  5060  00131A  46E8               	rlncf	wreg,f,c
  5061  00131C  0BFC               	andlw	252
  5062  00131E  6EC2               	movwf	4034,c	;volatile
  5063                           
  5064                           ;sensors.c: 7: ADON = 1;
  5065  001320  80C2               	bsf	4034,0,c	;volatile
  5066                           
  5067                           ;sensors.c: 8: ADCON0bits.GO = 1;
  5068  001322  82C2               	bsf	4034,1,c	;volatile
  5069                           
  5070                           ;sensors.c: 9: while (ADCON0bits.GO_NOT_DONE) {
  5071  001324  D008               	goto	l2421
  5072  001326                     l2419:
  5073                           
  5074                           ;sensors.c: 11: _delay((unsigned long)((10)*(8000000/4000.0)));
  5075  001326  0E1A               	movlw	26
  5076  001328  6E28               	movwf	??_AD& (0+255),c
  5077  00132A  0EF8               	movlw	248
  5078  00132C                     u2797:
  5079  00132C  2EE8               	decfsz	wreg,f,c
  5080  00132E  D7FE               	bra	u2797
  5081  001330  2E28               	decfsz	??_AD& (0+255),f,c
  5082  001332  D7FC               	bra	u2797
  5083  001334  D000               	nop2	
  5084  001336                     l2421:
  5085  001336  B2C2               	btfsc	4034,1,c	;volatile
  5086  001338  D7F6               	goto	l2419
  5087                           
  5088                           ;sensors.c: 12: }
  5089                           ;sensors.c: 13: return (ADRESH << 8) | ADRESL;
  5090  00133A  50C3               	movf	4035,w,c	;volatile
  5091  00133C  CFC4 F028          	movff	4036,??_AD	;volatile
  5092  001340  6A29               	clrf	(??_AD+1)& (0+255),c
  5093  001342  C028  F029         	movff	??_AD,??_AD+1
  5094  001346  6A28               	clrf	??_AD,c
  5095  001348  1028               	iorwf	??_AD,w,c
  5096  00134A  6E26               	movwf	?_AD,c
  5097  00134C  5029               	movf	??_AD+1,w,c
  5098  00134E  6E27               	movwf	?_AD+1,c
  5099  001350  0012               	return	
  5100  001352                     __end_of_AD:
  5101                           	opt stack 0
  5102                           tblptru	equ	0xFF8
  5103                           tblptrh	equ	0xFF7
  5104                           tblptrl	equ	0xFF6
  5105                           tablat	equ	0xFF5
  5106                           prodh	equ	0xFF4
  5107                           prodl	equ	0xFF3
  5108                           intcon	equ	0xFF2
  5109                           intcon3	equ	0xFF0
  5110                           postinc0	equ	0xFEE
  5111                           wreg	equ	0xFE8
  5112                           postdec1	equ	0xFE5
  5113                           plusw1	equ	0xFE3
  5114                           fsr1l	equ	0xFE1
  5115                           postinc2	equ	0xFDE
  5116                           postdec2	equ	0xFDD
  5117                           plusw2	equ	0xFDB
  5118                           fsr2h	equ	0xFDA
  5119                           fsr2l	equ	0xFD9
  5120                           status	equ	0xFD8
  5121                           
  5122 ;; *************** function _CW90 *****************
  5123 ;; Defined at:
  5124 ;;		line 21 in file "motors.c"
  5125 ;; Parameters:    Size  Location     Type
  5126 ;;  port            2   58[COMRAM] PTR int 
  5127 ;;		 -> simulate@portCW(6), 
  5128 ;; Auto vars:     Size  Location     Type
  5129 ;;		None
  5130 ;; Return value:  Size  Location     Type
  5131 ;;                  1    wreg      void 
  5132 ;; Registers used:
  5133 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5134 ;; Tracked objects:
  5135 ;;		On entry : 0/0
  5136 ;;		On exit  : 0/0
  5137 ;;		Unchanged: 0/0
  5138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5139 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5142 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5143 ;;Total ram usage:        2 bytes
  5144 ;; Hardware stack levels used:    1
  5145 ;; Hardware stack levels required when called:    7
  5146 ;; This function calls:
  5147 ;;		_PWMC
  5148 ;; This function is called by:
  5149 ;;		_simulate
  5150 ;; This function uses a non-reentrant model
  5151 ;;
  5152                           
  5153                           	psect	text20
  5154  0013B4                     __ptext20:
  5155                           	opt stack 0
  5156  0013B4                     _CW90:
  5157                           	opt stack 22
  5158                           
  5159                           ;motors.c: 22: PWMC(3000, 64, port);
  5160                           
  5161                           ;incstack = 0
  5162  0013B4  0E0B               	movlw	11
  5163  0013B6  6E2F               	movwf	PWMC@widthus+1,c
  5164  0013B8  0EB8               	movlw	184
  5165  0013BA  6E2E               	movwf	PWMC@widthus,c
  5166  0013BC  0E00               	movlw	0
  5167  0013BE  6E31               	movwf	PWMC@cycles+1,c
  5168  0013C0  0E40               	movlw	64
  5169  0013C2  6E30               	movwf	PWMC@cycles,c
  5170  0013C4  C03B  F032         	movff	CW90@port,PWMC@port
  5171  0013C8  C03C  F033         	movff	CW90@port+1,PWMC@port+1
  5172  0013CC  ECC1  F004         	call	_PWMC	;wreg free
  5173  0013D0  0012               	return		;funcret
  5174  0013D2                     __end_of_CW90:
  5175                           	opt stack 0
  5176                           tblptru	equ	0xFF8
  5177                           tblptrh	equ	0xFF7
  5178                           tblptrl	equ	0xFF6
  5179                           tablat	equ	0xFF5
  5180                           prodh	equ	0xFF4
  5181                           prodl	equ	0xFF3
  5182                           intcon	equ	0xFF2
  5183                           intcon3	equ	0xFF0
  5184                           postinc0	equ	0xFEE
  5185                           wreg	equ	0xFE8
  5186                           postdec1	equ	0xFE5
  5187                           plusw1	equ	0xFE3
  5188                           fsr1l	equ	0xFE1
  5189                           postinc2	equ	0xFDE
  5190                           postdec2	equ	0xFDD
  5191                           plusw2	equ	0xFDB
  5192                           fsr2h	equ	0xFDA
  5193                           fsr2l	equ	0xFD9
  5194                           status	equ	0xFD8
  5195                           
  5196 ;; *************** function _CCW90 *****************
  5197 ;; Defined at:
  5198 ;;		line 25 in file "motors.c"
  5199 ;; Parameters:    Size  Location     Type
  5200 ;;  port            2   58[COMRAM] PTR int 
  5201 ;;		 -> simulate@portCCW(6), 
  5202 ;; Auto vars:     Size  Location     Type
  5203 ;;		None
  5204 ;; Return value:  Size  Location     Type
  5205 ;;                  1    wreg      void 
  5206 ;; Registers used:
  5207 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5208 ;; Tracked objects:
  5209 ;;		On entry : 0/0
  5210 ;;		On exit  : 0/0
  5211 ;;		Unchanged: 0/0
  5212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5213 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5216 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5217 ;;Total ram usage:        2 bytes
  5218 ;; Hardware stack levels used:    1
  5219 ;; Hardware stack levels required when called:    7
  5220 ;; This function calls:
  5221 ;;		_PWMC
  5222 ;; This function is called by:
  5223 ;;		_simulate
  5224 ;; This function uses a non-reentrant model
  5225 ;;
  5226                           
  5227                           	psect	text21
  5228  0013D2                     __ptext21:
  5229                           	opt stack 0
  5230  0013D2                     _CCW90:
  5231                           	opt stack 22
  5232                           
  5233                           ;motors.c: 26: PWMC(400, 450, port);
  5234                           
  5235                           ;incstack = 0
  5236  0013D2  0E01               	movlw	1
  5237  0013D4  6E2F               	movwf	PWMC@widthus+1,c
  5238  0013D6  0E90               	movlw	144
  5239  0013D8  6E2E               	movwf	PWMC@widthus,c
  5240  0013DA  0E01               	movlw	1
  5241  0013DC  6E31               	movwf	PWMC@cycles+1,c
  5242  0013DE  0EC2               	movlw	194
  5243  0013E0  6E30               	movwf	PWMC@cycles,c
  5244  0013E2  C03B  F032         	movff	CCW90@port,PWMC@port
  5245  0013E6  C03C  F033         	movff	CCW90@port+1,PWMC@port+1
  5246  0013EA  ECC1  F004         	call	_PWMC	;wreg free
  5247  0013EE  0012               	return		;funcret
  5248  0013F0                     __end_of_CCW90:
  5249                           	opt stack 0
  5250                           tblptru	equ	0xFF8
  5251                           tblptrh	equ	0xFF7
  5252                           tblptrl	equ	0xFF6
  5253                           tablat	equ	0xFF5
  5254                           prodh	equ	0xFF4
  5255                           prodl	equ	0xFF3
  5256                           intcon	equ	0xFF2
  5257                           intcon3	equ	0xFF0
  5258                           postinc0	equ	0xFEE
  5259                           wreg	equ	0xFE8
  5260                           postdec1	equ	0xFE5
  5261                           plusw1	equ	0xFE3
  5262                           fsr1l	equ	0xFE1
  5263                           postinc2	equ	0xFDE
  5264                           postdec2	equ	0xFDD
  5265                           plusw2	equ	0xFDB
  5266                           fsr2h	equ	0xFDA
  5267                           fsr2l	equ	0xFD9
  5268                           status	equ	0xFD8
  5269                           
  5270 ;; *************** function _PWMC *****************
  5271 ;; Defined at:
  5272 ;;		line 4 in file "motors.c"
  5273 ;; Parameters:    Size  Location     Type
  5274 ;;  widthus         2   45[COMRAM] int 
  5275 ;;  cycles          2   47[COMRAM] int 
  5276 ;;  port            2   49[COMRAM] PTR int 
  5277 ;;		 -> simulate@portCCW(6), simulate@portCW(6), 
  5278 ;; Auto vars:     Size  Location     Type
  5279 ;;  countdown       2   56[COMRAM] int 
  5280 ;; Return value:  Size  Location     Type
  5281 ;;                  1    wreg      void 
  5282 ;; Registers used:
  5283 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5284 ;; Tracked objects:
  5285 ;;		On entry : 0/0
  5286 ;;		On exit  : 0/0
  5287 ;;		Unchanged: 0/0
  5288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5289 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5290 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5291 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5292 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5293 ;;Total ram usage:       13 bytes
  5294 ;; Hardware stack levels used:    1
  5295 ;; Hardware stack levels required when called:    6
  5296 ;; This function calls:
  5297 ;;		___awdiv
  5298 ;; This function is called by:
  5299 ;;		_CW90
  5300 ;;		_CCW90
  5301 ;; This function uses a non-reentrant model
  5302 ;;
  5303                           
  5304                           	psect	text22
  5305  000982                     __ptext22:
  5306                           	opt stack 0
  5307  000982                     _PWMC:
  5308                           	opt stack 22
  5309                           
  5310                           ;motors.c: 5: widthus /= 10;
  5311                           
  5312                           ;incstack = 0
  5313  000982  C02E  F026         	movff	PWMC@widthus,___awdiv@dividend
  5314  000986  C02F  F027         	movff	PWMC@widthus+1,___awdiv@dividend+1
  5315  00098A  0E00               	movlw	0
  5316  00098C  6E29               	movwf	___awdiv@divisor+1,c
  5317  00098E  0E0A               	movlw	10
  5318  000990  6E28               	movwf	___awdiv@divisor,c
  5319  000992  ECF7  F007         	call	___awdiv	;wreg free
  5320  000996  C026  F02E         	movff	?___awdiv,PWMC@widthus
  5321  00099A  C027  F02F         	movff	?___awdiv+1,PWMC@widthus+1
  5322                           
  5323                           ;motors.c: 6: widthus -= 1;
  5324  00099E  062E               	decf	PWMC@widthus,f,c
  5325  0009A0  A0D8               	btfss	status,0,c
  5326  0009A2  062F               	decf	PWMC@widthus+1,f,c
  5327                           
  5328                           ;motors.c: 7: int countdown = widthus;
  5329  0009A4  C02E  F039         	movff	PWMC@widthus,PWMC@countdown
  5330  0009A8  C02F  F03A         	movff	PWMC@widthus+1,PWMC@countdown+1
  5331  0009AC                     l2371:
  5332  0009AC  BE31               	btfsc	PWMC@cycles+1,7,c
  5333  0009AE  0012               	return	
  5334  0009B0  5031               	movf	PWMC@cycles+1,w,c
  5335  0009B2  E103               	bnz	l213
  5336  0009B4  0430               	decf	PWMC@cycles,w,c
  5337  0009B6  A0D8               	btfss	status,0,c
  5338  0009B8  0012               	return	
  5339  0009BA                     l213:
  5340                           
  5341                           ;motors.c: 11: countdown = widthus;
  5342  0009BA  C02E  F039         	movff	PWMC@widthus,PWMC@countdown
  5343  0009BE  C02F  F03A         	movff	PWMC@widthus+1,PWMC@countdown+1
  5344                           
  5345                           ;motors.c: 12: LATC0 = (1 ^ LATC0) & port[0];
  5346  0009C2  0E00               	movlw	0
  5347  0009C4  6E36               	movwf	_PWMC$1136,c
  5348  0009C6  B08B               	btfsc	3979,0,c	;volatile
  5349  0009C8  D00D               	goto	l2383
  5350  0009CA  C032  FFD9         	movff	PWMC@port,fsr2l
  5351  0009CE  C033  FFDA         	movff	PWMC@port+1,fsr2h
  5352  0009D2  CFDE F034          	movff	postinc2,??_PWMC
  5353  0009D6  CFDD F035          	movff	postdec2,??_PWMC+1
  5354  0009DA  3034               	rrcf	??_PWMC,w,c
  5355  0009DC  A0D8               	btfss	status,0,c
  5356  0009DE  D002               	goto	l2383
  5357  0009E0  0E01               	movlw	1
  5358  0009E2  6E36               	movwf	_PWMC$1136,c
  5359  0009E4                     l2383:
  5360  0009E4  B036               	btfsc	_PWMC$1136,0,c
  5361  0009E6  D002               	bra	u1515
  5362  0009E8  908B               	bcf	3979,0,c	;volatile
  5363  0009EA  D001               	bra	u1516
  5364  0009EC                     u1515:
  5365  0009EC  808B               	bsf	3979,0,c	;volatile
  5366  0009EE                     u1516:
  5367                           
  5368                           ;motors.c: 13: LATC1 = (1 ^ LATC1) & port[1];
  5369  0009EE  0E00               	movlw	0
  5370  0009F0  6E37               	movwf	_PWMC$1137,c
  5371  0009F2  B28B               	btfsc	3979,1,c	;volatile
  5372  0009F4  D00F               	goto	l2391
  5373  0009F6  EE20 F002          	lfsr	2,2
  5374  0009FA  5032               	movf	PWMC@port,w,c
  5375  0009FC  26D9               	addwf	fsr2l,f,c
  5376  0009FE  5033               	movf	PWMC@port+1,w,c
  5377  000A00  22DA               	addwfc	fsr2h,f,c
  5378  000A02  CFDE F034          	movff	postinc2,??_PWMC
  5379  000A06  CFDD F035          	movff	postdec2,??_PWMC+1
  5380  000A0A  3034               	rrcf	??_PWMC,w,c
  5381  000A0C  A0D8               	btfss	status,0,c
  5382  000A0E  D002               	goto	l2391
  5383  000A10  0E01               	movlw	1
  5384  000A12  6E37               	movwf	_PWMC$1137,c
  5385  000A14                     l2391:
  5386  000A14  B037               	btfsc	_PWMC$1137,0,c
  5387  000A16  D002               	bra	u1545
  5388  000A18  928B               	bcf	3979,1,c	;volatile
  5389  000A1A  D001               	bra	u1546
  5390  000A1C                     u1545:
  5391  000A1C  828B               	bsf	3979,1,c	;volatile
  5392  000A1E                     u1546:
  5393                           
  5394                           ;motors.c: 14: LATC2 = (1 ^ LATC2) & port[2];
  5395  000A1E  0E00               	movlw	0
  5396  000A20  6E38               	movwf	_PWMC$1138,c
  5397  000A22  B48B               	btfsc	3979,2,c	;volatile
  5398  000A24  D00F               	goto	l2399
  5399  000A26  EE20 F004          	lfsr	2,4
  5400  000A2A  5032               	movf	PWMC@port,w,c
  5401  000A2C  26D9               	addwf	fsr2l,f,c
  5402  000A2E  5033               	movf	PWMC@port+1,w,c
  5403  000A30  22DA               	addwfc	fsr2h,f,c
  5404  000A32  CFDE F034          	movff	postinc2,??_PWMC
  5405  000A36  CFDD F035          	movff	postdec2,??_PWMC+1
  5406  000A3A  3034               	rrcf	??_PWMC,w,c
  5407  000A3C  A0D8               	btfss	status,0,c
  5408  000A3E  D002               	goto	l2399
  5409  000A40  0E01               	movlw	1
  5410  000A42  6E38               	movwf	_PWMC$1138,c
  5411  000A44                     l2399:
  5412  000A44  B038               	btfsc	_PWMC$1138,0,c
  5413  000A46  D002               	bra	u1575
  5414  000A48  948B               	bcf	3979,2,c	;volatile
  5415  000A4A  D001               	bra	u1576
  5416  000A4C                     u1575:
  5417  000A4C  848B               	bsf	3979,2,c	;volatile
  5418  000A4E                     u1576:
  5419  000A4E                     l2401:
  5420  000A4E  BE3A               	btfsc	PWMC@countdown+1,7,c
  5421  000A50  D00D               	goto	l2409
  5422  000A52  503A               	movf	PWMC@countdown+1,w,c
  5423  000A54  E103               	bnz	l2405
  5424  000A56  0439               	decf	PWMC@countdown,w,c
  5425  000A58  A0D8               	btfss	status,0,c
  5426  000A5A  D008               	goto	l2409
  5427  000A5C                     l2405:
  5428                           
  5429                           ;motors.c: 16: _delay((unsigned long)((5)*(8000000/4000000.0)));
  5430  000A5C  0E03               	movlw	3
  5431  000A5E                     u2807:
  5432  000A5E  2EE8               	decfsz	wreg,f,c
  5433  000A60  D7FE               	bra	u2807
  5434  000A62  F000               	nop	
  5435  000A64  0639               	decf	PWMC@countdown,f,c
  5436  000A66  A0D8               	btfss	status,0,c
  5437  000A68  063A               	decf	PWMC@countdown+1,f,c
  5438  000A6A  D7F1               	goto	l2401
  5439  000A6C                     l2409:
  5440  000A6C  0630               	decf	PWMC@cycles,f,c
  5441  000A6E  A0D8               	btfss	status,0,c
  5442  000A70  0631               	decf	PWMC@cycles+1,f,c
  5443  000A72  D79C               	goto	l2371
  5444  000A74                     __end_of_PWMC:
  5445                           	opt stack 0
  5446                           tblptru	equ	0xFF8
  5447                           tblptrh	equ	0xFF7
  5448                           tblptrl	equ	0xFF6
  5449                           tablat	equ	0xFF5
  5450                           prodh	equ	0xFF4
  5451                           prodl	equ	0xFF3
  5452                           intcon	equ	0xFF2
  5453                           intcon3	equ	0xFF0
  5454                           postinc0	equ	0xFEE
  5455                           wreg	equ	0xFE8
  5456                           postdec1	equ	0xFE5
  5457                           plusw1	equ	0xFE3
  5458                           fsr1l	equ	0xFE1
  5459                           postinc2	equ	0xFDE
  5460                           postdec2	equ	0xFDD
  5461                           plusw2	equ	0xFDB
  5462                           fsr2h	equ	0xFDA
  5463                           fsr2l	equ	0xFD9
  5464                           status	equ	0xFD8
  5465                           
  5466 ;; *************** function ___awdiv *****************
  5467 ;; Defined at:
  5468 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  5469 ;; Parameters:    Size  Location     Type
  5470 ;;  dividend        2   37[COMRAM] int 
  5471 ;;  divisor         2   39[COMRAM] int 
  5472 ;; Auto vars:     Size  Location     Type
  5473 ;;  quotient        2   43[COMRAM] int 
  5474 ;;  sign            1   42[COMRAM] unsigned char 
  5475 ;;  counter         1   41[COMRAM] unsigned char 
  5476 ;; Return value:  Size  Location     Type
  5477 ;;                  2   37[COMRAM] int 
  5478 ;; Registers used:
  5479 ;;		wreg, status,2, status,0
  5480 ;; Tracked objects:
  5481 ;;		On entry : 0/0
  5482 ;;		On exit  : 0/0
  5483 ;;		Unchanged: 0/0
  5484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5485 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5486 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5488 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5489 ;;Total ram usage:        8 bytes
  5490 ;; Hardware stack levels used:    1
  5491 ;; Hardware stack levels required when called:    5
  5492 ;; This function calls:
  5493 ;;		Nothing
  5494 ;; This function is called by:
  5495 ;;		_PWMC
  5496 ;; This function uses a non-reentrant model
  5497 ;;
  5498                           
  5499                           	psect	text23
  5500  000FEE                     __ptext23:
  5501                           	opt stack 0
  5502  000FEE                     ___awdiv:
  5503                           	opt stack 22
  5504                           
  5505                           ;incstack = 0
  5506  000FEE  0E00               	movlw	0
  5507  000FF0  6E2B               	movwf	___awdiv@sign,c
  5508  000FF2  AE29               	btfss	___awdiv@divisor+1,7,c
  5509  000FF4  D006               	goto	l2277
  5510  000FF6  6C28               	negf	___awdiv@divisor,c
  5511  000FF8  1E29               	comf	___awdiv@divisor+1,f,c
  5512  000FFA  B0D8               	btfsc	status,0,c
  5513  000FFC  2A29               	incf	___awdiv@divisor+1,f,c
  5514  000FFE  0E01               	movlw	1
  5515  001000  6E2B               	movwf	___awdiv@sign,c
  5516  001002                     l2277:
  5517  001002  AE27               	btfss	___awdiv@dividend+1,7,c
  5518  001004  D006               	goto	l2283
  5519  001006  6C26               	negf	___awdiv@dividend,c
  5520  001008  1E27               	comf	___awdiv@dividend+1,f,c
  5521  00100A  B0D8               	btfsc	status,0,c
  5522  00100C  2A27               	incf	___awdiv@dividend+1,f,c
  5523  00100E  0E01               	movlw	1
  5524  001010  1A2B               	xorwf	___awdiv@sign,f,c
  5525  001012                     l2283:
  5526  001012  0E00               	movlw	0
  5527  001014  6E2D               	movwf	___awdiv@quotient+1,c
  5528  001016  0E00               	movlw	0
  5529  001018  6E2C               	movwf	___awdiv@quotient,c
  5530  00101A  5028               	movf	___awdiv@divisor,w,c
  5531  00101C  1029               	iorwf	___awdiv@divisor+1,w,c
  5532  00101E  B4D8               	btfsc	status,2,c
  5533  001020  D01C               	goto	l2305
  5534  001022  0E01               	movlw	1
  5535  001024  6E2A               	movwf	___awdiv@counter,c
  5536  001026  D004               	goto	l2291
  5537  001028                     l2289:
  5538  001028  90D8               	bcf	status,0,c
  5539  00102A  3628               	rlcf	___awdiv@divisor,f,c
  5540  00102C  3629               	rlcf	___awdiv@divisor+1,f,c
  5541  00102E  2A2A               	incf	___awdiv@counter,f,c
  5542  001030                     l2291:
  5543  001030  AE29               	btfss	___awdiv@divisor+1,7,c
  5544  001032  D7FA               	goto	l2289
  5545  001034                     l2293:
  5546  001034  90D8               	bcf	status,0,c
  5547  001036  362C               	rlcf	___awdiv@quotient,f,c
  5548  001038  362D               	rlcf	___awdiv@quotient+1,f,c
  5549  00103A  5028               	movf	___awdiv@divisor,w,c
  5550  00103C  5C26               	subwf	___awdiv@dividend,w,c
  5551  00103E  5029               	movf	___awdiv@divisor+1,w,c
  5552  001040  5827               	subwfb	___awdiv@dividend+1,w,c
  5553  001042  A0D8               	btfss	status,0,c
  5554  001044  D005               	goto	l2301
  5555  001046  5028               	movf	___awdiv@divisor,w,c
  5556  001048  5E26               	subwf	___awdiv@dividend,f,c
  5557  00104A  5029               	movf	___awdiv@divisor+1,w,c
  5558  00104C  5A27               	subwfb	___awdiv@dividend+1,f,c
  5559  00104E  802C               	bsf	___awdiv@quotient,0,c
  5560  001050                     l2301:
  5561  001050  90D8               	bcf	status,0,c
  5562  001052  3229               	rrcf	___awdiv@divisor+1,f,c
  5563  001054  3228               	rrcf	___awdiv@divisor,f,c
  5564  001056  2E2A               	decfsz	___awdiv@counter,f,c
  5565  001058  D7ED               	goto	l2293
  5566  00105A                     l2305:
  5567  00105A  502B               	movf	___awdiv@sign,w,c
  5568  00105C  B4D8               	btfsc	status,2,c
  5569  00105E  D004               	goto	l2309
  5570  001060  6C2C               	negf	___awdiv@quotient,c
  5571  001062  1E2D               	comf	___awdiv@quotient+1,f,c
  5572  001064  B0D8               	btfsc	status,0,c
  5573  001066  2A2D               	incf	___awdiv@quotient+1,f,c
  5574  001068                     l2309:
  5575  001068  C02C  F026         	movff	___awdiv@quotient,?___awdiv
  5576  00106C  C02D  F027         	movff	___awdiv@quotient+1,?___awdiv+1
  5577  001070  0012               	return	
  5578  001072                     __end_of___awdiv:
  5579                           	opt stack 0
  5580                           tblptru	equ	0xFF8
  5581                           tblptrh	equ	0xFF7
  5582                           tblptrl	equ	0xFF6
  5583                           tablat	equ	0xFF5
  5584                           prodh	equ	0xFF4
  5585                           prodl	equ	0xFF3
  5586                           intcon	equ	0xFF2
  5587                           intcon3	equ	0xFF0
  5588                           postinc0	equ	0xFEE
  5589                           wreg	equ	0xFE8
  5590                           postdec1	equ	0xFE5
  5591                           plusw1	equ	0xFE3
  5592                           fsr1l	equ	0xFE1
  5593                           postinc2	equ	0xFDE
  5594                           postdec2	equ	0xFDD
  5595                           plusw2	equ	0xFDB
  5596                           fsr2h	equ	0xFDA
  5597                           fsr2l	equ	0xFD9
  5598                           status	equ	0xFD8
  5599                           
  5600 ;; *************** function _initialize *****************
  5601 ;; Defined at:
  5602 ;;		line 18 in file "main.c"
  5603 ;; Parameters:    Size  Location     Type
  5604 ;;		None
  5605 ;; Auto vars:     Size  Location     Type
  5606 ;;		None
  5607 ;; Return value:  Size  Location     Type
  5608 ;;                  1    wreg      void 
  5609 ;; Registers used:
  5610 ;;		wreg, status,2, status,0, cstack
  5611 ;; Tracked objects:
  5612 ;;		On entry : 0/0
  5613 ;;		On exit  : 0/0
  5614 ;;		Unchanged: 0/0
  5615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5620 ;;Total ram usage:        0 bytes
  5621 ;; Hardware stack levels used:    1
  5622 ;; Hardware stack levels required when called:    8
  5623 ;; This function calls:
  5624 ;;		_initLCD
  5625 ;;		_lcdInst
  5626 ;; This function is called by:
  5627 ;;		_main
  5628 ;; This function uses a non-reentrant model
  5629 ;;
  5630                           
  5631                           	psect	text24
  5632  00124E                     __ptext24:
  5633                           	opt stack 0
  5634  00124E                     _initialize:
  5635                           	opt stack 22
  5636                           
  5637                           ;main.c: 19: TRISA = 0xFF;
  5638                           
  5639                           ;incstack = 0
  5640  00124E  6892               	setf	3986,c	;volatile
  5641                           
  5642                           ;main.c: 20: TRISB = 0xFF;
  5643  001250  6893               	setf	3987,c	;volatile
  5644                           
  5645                           ;main.c: 21: TRISC = 0x00;
  5646  001252  0E00               	movlw	0
  5647  001254  6E94               	movwf	3988,c	;volatile
  5648                           
  5649                           ;main.c: 22: TRISD = 0x00;
  5650  001256  0E00               	movlw	0
  5651  001258  6E95               	movwf	3989,c	;volatile
  5652                           
  5653                           ;main.c: 23: TRISE = 0x00;
  5654  00125A  0E00               	movlw	0
  5655  00125C  6E96               	movwf	3990,c	;volatile
  5656                           
  5657                           ;main.c: 25: LATA = 0x00;
  5658  00125E  0E00               	movlw	0
  5659  001260  6E89               	movwf	3977,c	;volatile
  5660                           
  5661                           ;main.c: 26: LATB = 0x00;
  5662  001262  0E00               	movlw	0
  5663  001264  6E8A               	movwf	3978,c	;volatile
  5664                           
  5665                           ;main.c: 27: LATC = 0x00;
  5666  001266  0E00               	movlw	0
  5667  001268  6E8B               	movwf	3979,c	;volatile
  5668                           
  5669                           ;main.c: 28: LATD = 0x00;
  5670  00126A  0E00               	movlw	0
  5671  00126C  6E8C               	movwf	3980,c	;volatile
  5672                           
  5673                           ;main.c: 29: LATE = 0x00;
  5674  00126E  0E00               	movlw	0
  5675  001270  6E8D               	movwf	3981,c	;volatile
  5676                           
  5677                           ;main.c: 32: ADCON0 = 0x00;
  5678  001272  0E00               	movlw	0
  5679  001274  6EC2               	movwf	4034,c	;volatile
  5680                           
  5681                           ;main.c: 33: ADCON1 = 0x0C;
  5682  001276  0E0C               	movlw	12
  5683  001278  6EC1               	movwf	4033,c	;volatile
  5684                           
  5685                           ;main.c: 34: CVRCON = 0x00;
  5686  00127A  0E00               	movlw	0
  5687  00127C  6EB5               	movwf	4021,c	;volatile
  5688                           
  5689                           ;main.c: 35: ADFM = 1;
  5690  00127E  8EC0               	bsf	4032,7,c	;volatile
  5691                           
  5692                           ;main.c: 37: initLCD();
  5693  001280  EC04  F009         	call	_initLCD	;wreg free
  5694                           
  5695                           ;main.c: 38: lcdInst(0x01);;
  5696  001284  0E01               	movlw	1
  5697  001286  EC25  F00A         	call	_lcdInst
  5698                           
  5699                           ;main.c: 39: lcdInst(0b10000000);;
  5700  00128A  0E80               	movlw	128
  5701  00128C  EC25  F00A         	call	_lcdInst
  5702  001290  0012               	return		;funcret
  5703  001292                     __end_of_initialize:
  5704                           	opt stack 0
  5705                           tblptru	equ	0xFF8
  5706                           tblptrh	equ	0xFF7
  5707                           tblptrl	equ	0xFF6
  5708                           tablat	equ	0xFF5
  5709                           prodh	equ	0xFF4
  5710                           prodl	equ	0xFF3
  5711                           intcon	equ	0xFF2
  5712                           intcon3	equ	0xFF0
  5713                           postinc0	equ	0xFEE
  5714                           wreg	equ	0xFE8
  5715                           postdec1	equ	0xFE5
  5716                           plusw1	equ	0xFE3
  5717                           fsr1l	equ	0xFE1
  5718                           postinc2	equ	0xFDE
  5719                           postdec2	equ	0xFDD
  5720                           plusw2	equ	0xFDB
  5721                           fsr2h	equ	0xFDA
  5722                           fsr2l	equ	0xFD9
  5723                           status	equ	0xFD8
  5724                           
  5725 ;; *************** function _initLCD *****************
  5726 ;; Defined at:
  5727 ;;		line 9 in file "lcd.c"
  5728 ;; Parameters:    Size  Location     Type
  5729 ;;		None
  5730 ;; Auto vars:     Size  Location     Type
  5731 ;;		None
  5732 ;; Return value:  Size  Location     Type
  5733 ;;                  1    wreg      void 
  5734 ;; Registers used:
  5735 ;;		wreg, status,2, status,0, cstack
  5736 ;; Tracked objects:
  5737 ;;		On entry : 0/0
  5738 ;;		On exit  : 0/0
  5739 ;;		Unchanged: 0/0
  5740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5741 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5743 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5744 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5745 ;;Total ram usage:        1 bytes
  5746 ;; Hardware stack levels used:    1
  5747 ;; Hardware stack levels required when called:    7
  5748 ;; This function calls:
  5749 ;;		_lcdInst
  5750 ;; This function is called by:
  5751 ;;		_initialize
  5752 ;; This function uses a non-reentrant model
  5753 ;;
  5754                           
  5755                           	psect	text25
  5756  001208                     __ptext25:
  5757                           	opt stack 0
  5758  001208                     _initLCD:
  5759                           	opt stack 22
  5760                           
  5761                           ;lcd.c: 10: _delay((unsigned long)((15)*(8000000/4000.0)));
  5762                           
  5763                           ;incstack = 0
  5764  001208  0E27               	movlw	39
  5765  00120A  6E29               	movwf	??_initLCD& (0+255),c
  5766  00120C  0EF5               	movlw	245
  5767  00120E                     u2817:
  5768  00120E  2EE8               	decfsz	wreg,f,c
  5769  001210  D7FE               	bra	u2817
  5770  001212  2E29               	decfsz	??_initLCD& (0+255),f,c
  5771  001214  D7FC               	bra	u2817
  5772  001216  F000               	nop	
  5773                           
  5774                           ;lcd.c: 11: lcdInst(0b00110011);
  5775  001218  0E33               	movlw	51
  5776  00121A  EC25  F00A         	call	_lcdInst
  5777                           
  5778                           ;lcd.c: 12: lcdInst(0b00110010);
  5779  00121E  0E32               	movlw	50
  5780  001220  EC25  F00A         	call	_lcdInst
  5781                           
  5782                           ;lcd.c: 13: lcdInst(0b00101000);
  5783  001224  0E28               	movlw	40
  5784  001226  EC25  F00A         	call	_lcdInst
  5785                           
  5786                           ;lcd.c: 14: lcdInst(0b00001111);
  5787  00122A  0E0F               	movlw	15
  5788  00122C  EC25  F00A         	call	_lcdInst
  5789                           
  5790                           ;lcd.c: 15: lcdInst(0b00000110);
  5791  001230  0E06               	movlw	6
  5792  001232  EC25  F00A         	call	_lcdInst
  5793                           
  5794                           ;lcd.c: 16: lcdInst(0b00000001);
  5795  001236  0E01               	movlw	1
  5796  001238  EC25  F00A         	call	_lcdInst
  5797                           
  5798                           ;lcd.c: 17: _delay((unsigned long)((15)*(8000000/4000.0)));
  5799  00123C  0E27               	movlw	39
  5800  00123E  6E29               	movwf	??_initLCD& (0+255),c
  5801  001240  0EF5               	movlw	245
  5802  001242                     u2827:
  5803  001242  2EE8               	decfsz	wreg,f,c
  5804  001244  D7FE               	bra	u2827
  5805  001246  2E29               	decfsz	??_initLCD& (0+255),f,c
  5806  001248  D7FC               	bra	u2827
  5807  00124A  F000               	nop	
  5808  00124C  0012               	return		;funcret
  5809  00124E                     __end_of_initLCD:
  5810                           	opt stack 0
  5811                           tblptru	equ	0xFF8
  5812                           tblptrh	equ	0xFF7
  5813                           tblptrl	equ	0xFF6
  5814                           tablat	equ	0xFF5
  5815                           prodh	equ	0xFF4
  5816                           prodl	equ	0xFF3
  5817                           intcon	equ	0xFF2
  5818                           intcon3	equ	0xFF0
  5819                           postinc0	equ	0xFEE
  5820                           wreg	equ	0xFE8
  5821                           postdec1	equ	0xFE5
  5822                           plusw1	equ	0xFE3
  5823                           fsr1l	equ	0xFE1
  5824                           postinc2	equ	0xFDE
  5825                           postdec2	equ	0xFDD
  5826                           plusw2	equ	0xFDB
  5827                           fsr2h	equ	0xFDA
  5828                           fsr2l	equ	0xFD9
  5829                           status	equ	0xFD8
  5830                           
  5831 ;; *************** function _lcdInst *****************
  5832 ;; Defined at:
  5833 ;;		line 20 in file "lcd.c"
  5834 ;; Parameters:    Size  Location     Type
  5835 ;;  data            1    wreg     unsigned char 
  5836 ;; Auto vars:     Size  Location     Type
  5837 ;;  data            1   39[COMRAM] unsigned char 
  5838 ;; Return value:  Size  Location     Type
  5839 ;;                  1    wreg      void 
  5840 ;; Registers used:
  5841 ;;		wreg, status,2, status,0, cstack
  5842 ;; Tracked objects:
  5843 ;;		On entry : 0/0
  5844 ;;		On exit  : 0/0
  5845 ;;		Unchanged: 0/0
  5846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5848 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5850 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5851 ;;Total ram usage:        1 bytes
  5852 ;; Hardware stack levels used:    1
  5853 ;; Hardware stack levels required when called:    6
  5854 ;; This function calls:
  5855 ;;		_lcdNibble
  5856 ;; This function is called by:
  5857 ;;		_initialize
  5858 ;;		_simulate
  5859 ;;		_initLCD
  5860 ;;		___lcd_newline
  5861 ;;		_showInfo
  5862 ;;		_stopMoving
  5863 ;;		_checkAA
  5864 ;;		_checkC
  5865 ;;		_check9
  5866 ;; This function uses a non-reentrant model
  5867 ;;
  5868                           
  5869                           	psect	text26
  5870  00144A                     __ptext26:
  5871                           	opt stack 0
  5872  00144A                     _lcdInst:
  5873                           	opt stack 22
  5874                           
  5875                           ;incstack = 0
  5876                           ;lcdInst@data stored from wreg
  5877  00144A  6E28               	movwf	lcdInst@data,c
  5878                           
  5879                           ;lcd.c: 21: LATDbits.LATD2 = 0;
  5880  00144C  948C               	bcf	3980,2,c	;volatile
  5881                           
  5882                           ;lcd.c: 22: lcdNibble(data);
  5883  00144E  5028               	movf	lcdInst@data,w,c
  5884  001450  EC39  F008         	call	_lcdNibble
  5885  001454  0012               	return		;funcret
  5886  001456                     __end_of_lcdInst:
  5887                           	opt stack 0
  5888                           tblptru	equ	0xFF8
  5889                           tblptrh	equ	0xFF7
  5890                           tblptrl	equ	0xFF6
  5891                           tablat	equ	0xFF5
  5892                           prodh	equ	0xFF4
  5893                           prodl	equ	0xFF3
  5894                           intcon	equ	0xFF2
  5895                           intcon3	equ	0xFF0
  5896                           postinc0	equ	0xFEE
  5897                           wreg	equ	0xFE8
  5898                           postdec1	equ	0xFE5
  5899                           plusw1	equ	0xFE3
  5900                           fsr1l	equ	0xFE1
  5901                           postinc2	equ	0xFDE
  5902                           postdec2	equ	0xFDD
  5903                           plusw2	equ	0xFDB
  5904                           fsr2h	equ	0xFDA
  5905                           fsr2l	equ	0xFD9
  5906                           status	equ	0xFD8
  5907                           
  5908 ;; *************** function _lcdNibble *****************
  5909 ;; Defined at:
  5910 ;;		line 30 in file "lcd.c"
  5911 ;; Parameters:    Size  Location     Type
  5912 ;;  data            1    wreg     unsigned char 
  5913 ;; Auto vars:     Size  Location     Type
  5914 ;;  data            1   38[COMRAM] unsigned char 
  5915 ;;  temp            1   37[COMRAM] unsigned char 
  5916 ;; Return value:  Size  Location     Type
  5917 ;;                  1    wreg      void 
  5918 ;; Registers used:
  5919 ;;		wreg, status,2, status,0
  5920 ;; Tracked objects:
  5921 ;;		On entry : 0/0
  5922 ;;		On exit  : 0/0
  5923 ;;		Unchanged: 0/0
  5924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5926 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5928 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5929 ;;Total ram usage:        2 bytes
  5930 ;; Hardware stack levels used:    1
  5931 ;; Hardware stack levels required when called:    5
  5932 ;; This function calls:
  5933 ;;		Nothing
  5934 ;; This function is called by:
  5935 ;;		_lcdInst
  5936 ;;		_putch
  5937 ;; This function uses a non-reentrant model
  5938 ;;
  5939                           
  5940                           	psect	text27
  5941  001072                     __ptext27:
  5942                           	opt stack 0
  5943  001072                     _lcdNibble:
  5944                           	opt stack 21
  5945                           
  5946                           ;incstack = 0
  5947                           ;lcdNibble@data stored from wreg
  5948  001072  6E27               	movwf	lcdNibble@data,c
  5949                           
  5950                           ;lcd.c: 32: char temp = data & 0xF0;
  5951  001074  5027               	movf	lcdNibble@data,w,c
  5952  001076  0BF0               	andlw	240
  5953  001078  6E26               	movwf	lcdNibble@temp,c
  5954                           
  5955                           ;lcd.c: 33: LATD = LATD & 0x0F;
  5956  00107A  508C               	movf	3980,w,c	;volatile
  5957  00107C  0B0F               	andlw	15
  5958  00107E  6E8C               	movwf	3980,c	;volatile
  5959                           
  5960                           ;lcd.c: 34: LATD = temp | LATD;
  5961  001080  5026               	movf	lcdNibble@temp,w,c
  5962  001082  108C               	iorwf	3980,w,c	;volatile
  5963  001084  6E8C               	movwf	3980,c	;volatile
  5964                           
  5965                           ;lcd.c: 36: LATDbits.LATD3 = 0;
  5966  001086  968C               	bcf	3980,3,c	;volatile
  5967                           
  5968                           ;lcd.c: 37: _delay((unsigned long)((25)*(8000000/4000000.0)));
  5969  001088  0E10               	movlw	16
  5970  00108A                     u2837:
  5971  00108A  2EE8               	decfsz	wreg,f,c
  5972  00108C  D7FE               	bra	u2837
  5973  00108E  D000               	nop2	
  5974                           
  5975                           ;lcd.c: 38: LATDbits.LATD3 = 1;
  5976  001090  868C               	bsf	3980,3,c	;volatile
  5977                           
  5978                           ;lcd.c: 39: _delay((unsigned long)((25)*(8000000/4000000.0)));
  5979  001092  0E10               	movlw	16
  5980  001094                     u2847:
  5981  001094  2EE8               	decfsz	wreg,f,c
  5982  001096  D7FE               	bra	u2847
  5983  001098  D000               	nop2	
  5984                           
  5985                           ;lcd.c: 41: data = data << 4;
  5986  00109A  3827               	swapf	lcdNibble@data,w,c
  5987  00109C  0BF0               	andlw	240
  5988  00109E  6E27               	movwf	lcdNibble@data,c
  5989                           
  5990                           ;lcd.c: 43: temp = data & 0xF0;
  5991  0010A0  5027               	movf	lcdNibble@data,w,c
  5992  0010A2  0BF0               	andlw	240
  5993  0010A4  6E26               	movwf	lcdNibble@temp,c
  5994                           
  5995                           ;lcd.c: 44: LATD = LATD & 0x0F;
  5996  0010A6  508C               	movf	3980,w,c	;volatile
  5997  0010A8  0B0F               	andlw	15
  5998  0010AA  6E8C               	movwf	3980,c	;volatile
  5999                           
  6000                           ;lcd.c: 45: LATD = temp | LATD;
  6001  0010AC  5026               	movf	lcdNibble@temp,w,c
  6002  0010AE  108C               	iorwf	3980,w,c	;volatile
  6003  0010B0  6E8C               	movwf	3980,c	;volatile
  6004                           
  6005                           ;lcd.c: 47: LATDbits.LATD3 = 0;
  6006  0010B2  968C               	bcf	3980,3,c	;volatile
  6007                           
  6008                           ;lcd.c: 48: _delay((unsigned long)((25)*(8000000/4000000.0)));
  6009  0010B4  0E10               	movlw	16
  6010  0010B6                     u2857:
  6011  0010B6  2EE8               	decfsz	wreg,f,c
  6012  0010B8  D7FE               	bra	u2857
  6013  0010BA  D000               	nop2	
  6014                           
  6015                           ;lcd.c: 49: LATDbits.LATD3 = 1;
  6016  0010BC  868C               	bsf	3980,3,c	;volatile
  6017                           
  6018                           ;lcd.c: 50: _delay((unsigned long)((25)*(8000000/4000000.0)));
  6019  0010BE  0E10               	movlw	16
  6020  0010C0                     u2867:
  6021  0010C0  2EE8               	decfsz	wreg,f,c
  6022  0010C2  D7FE               	bra	u2867
  6023  0010C4  D000               	nop2	
  6024  0010C6  0012               	return		;funcret
  6025  0010C8                     __end_of_lcdNibble:
  6026                           	opt stack 0
  6027                           tblptru	equ	0xFF8
  6028                           tblptrh	equ	0xFF7
  6029                           tblptrl	equ	0xFF6
  6030                           tablat	equ	0xFF5
  6031                           prodh	equ	0xFF4
  6032                           prodl	equ	0xFF3
  6033                           intcon	equ	0xFF2
  6034                           intcon3	equ	0xFF0
  6035                           postinc0	equ	0xFEE
  6036                           wreg	equ	0xFE8
  6037                           postdec1	equ	0xFE5
  6038                           plusw1	equ	0xFE3
  6039                           fsr1l	equ	0xFE1
  6040                           postinc2	equ	0xFDE
  6041                           postdec2	equ	0xFDD
  6042                           plusw2	equ	0xFDB
  6043                           fsr2h	equ	0xFDA
  6044                           fsr2l	equ	0xFD9
  6045                           status	equ	0xFD8
  6046                           
  6047 ;; *************** function _keypressed *****************
  6048 ;; Defined at:
  6049 ;;		line 17 in file "modules.c"
  6050 ;; Parameters:    Size  Location     Type
  6051 ;;		None
  6052 ;; Auto vars:     Size  Location     Type
  6053 ;;  keypress        1   36[COMRAM] unsigned char 
  6054 ;; Return value:  Size  Location     Type
  6055 ;;                  1    wreg      void 
  6056 ;; Registers used:
  6057 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6058 ;; Tracked objects:
  6059 ;;		On entry : 0/0
  6060 ;;		On exit  : 0/0
  6061 ;;		Unchanged: 0/0
  6062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6064 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6065 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6066 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6067 ;;Total ram usage:       15 bytes
  6068 ;; Hardware stack levels used:    1
  6069 ;; Hardware stack levels required when called:    4
  6070 ;; This function calls:
  6071 ;;		i2_printf
  6072 ;;		i2_stopMoving
  6073 ;; This function is called by:
  6074 ;;		Interrupt level 2
  6075 ;; This function uses a non-reentrant model
  6076 ;;
  6077                           
  6078                           	psect	intcode
  6079  000008                     __pintcode:
  6080                           	opt stack 0
  6081  000008                     _keypressed:
  6082                           	opt stack 20
  6083                           
  6084                           ;incstack = 0
  6085  000008  825A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6086  00000A  EDAD  F007         	call	int_func,f	;refresh shadow registers
  6087                           tblptru	equ	0xFF8
  6088                           tblptrh	equ	0xFF7
  6089                           tblptrl	equ	0xFF6
  6090                           tablat	equ	0xFF5
  6091                           prodh	equ	0xFF4
  6092                           prodl	equ	0xFF3
  6093                           intcon	equ	0xFF2
  6094                           intcon3	equ	0xFF0
  6095                           postinc0	equ	0xFEE
  6096                           wreg	equ	0xFE8
  6097                           postdec1	equ	0xFE5
  6098                           plusw1	equ	0xFE3
  6099                           fsr1l	equ	0xFE1
  6100                           postinc2	equ	0xFDE
  6101                           postdec2	equ	0xFDD
  6102                           plusw2	equ	0xFDB
  6103                           fsr2h	equ	0xFDA
  6104                           fsr2l	equ	0xFD9
  6105                           status	equ	0xFD8
  6106                           
  6107                           	psect	intcode_body
  6108  000F5A                     __pintcode_body:
  6109                           	opt stack 20
  6110  000F5A                     int_func:
  6111                           	opt stack 20
  6112  000F5A  0006               	pop		; remove dummy address from shadow register refresh
  6113  000F5C  CFFA F017          	movff	pclath,??_keypressed
  6114  000F60  CFFB F018          	movff	pclatu,??_keypressed+1
  6115  000F64  CFE9 F019          	movff	fsr0l,??_keypressed+2
  6116  000F68  CFEA F01A          	movff	fsr0h,??_keypressed+3
  6117  000F6C  CFE1 F01B          	movff	fsr1l,??_keypressed+4
  6118  000F70  CFE2 F01C          	movff	fsr1h,??_keypressed+5
  6119  000F74  CFD9 F01D          	movff	fsr2l,??_keypressed+6
  6120  000F78  CFDA F01E          	movff	fsr2h,??_keypressed+7
  6121  000F7C  CFF3 F01F          	movff	prodl,??_keypressed+8
  6122  000F80  CFF4 F020          	movff	prodh,??_keypressed+9
  6123  000F84  CFF6 F021          	movff	tblptrl,??_keypressed+10
  6124  000F88  CFF7 F022          	movff	tblptrh,??_keypressed+11
  6125  000F8C  CFF8 F023          	movff	tblptru,??_keypressed+12
  6126  000F90  CFF5 F024          	movff	tablat,??_keypressed+13
  6127                           
  6128                           ;modules.c: 20: if (INT1IF)
  6129  000F94  A0F0               	btfss	intcon3,0,c	;volatile
  6130  000F96  D00D               	goto	i2l175
  6131                           
  6132                           ;modules.c: 21: {
  6133                           ;modules.c: 23: unsigned char keypress = (PORTB & 0xF0) >> 4;
  6134  000F98  3881               	swapf	3969,w,c	;volatile
  6135  000F9A  0B0F               	andlw	15
  6136  000F9C  0B0F               	andlw	15
  6137  000F9E  6E25               	movwf	keypressed@keypress,c
  6138                           
  6139                           ;modules.c: 24: INT1IF = 0;
  6140  000FA0  90F0               	bcf	intcon3,0,c	;volatile
  6141                           
  6142                           ;modules.c: 25: printf("Emergency          ");
  6143  000FA2  0E28               	movlw	low STR_11
  6144  000FA4  6E0D               	movwf	i2printf@f,c
  6145  000FA6  0EFF               	movlw	high STR_11
  6146  000FA8  6E0E               	movwf	i2printf@f+1,c
  6147  000FAA  EC31  F003         	call	i2_printf	;wreg free
  6148                           
  6149                           ;modules.c: 26: stopMoving();
  6150  000FAE  EC12  F00A         	call	i2_stopMoving	;wreg free
  6151  000FB2                     i2l175:
  6152  000FB2  C024  FFF5         	movff	??_keypressed+13,tablat
  6153  000FB6  C023  FFF8         	movff	??_keypressed+12,tblptru
  6154  000FBA  C022  FFF7         	movff	??_keypressed+11,tblptrh
  6155  000FBE  C021  FFF6         	movff	??_keypressed+10,tblptrl
  6156  000FC2  C020  FFF4         	movff	??_keypressed+9,prodh
  6157  000FC6  C01F  FFF3         	movff	??_keypressed+8,prodl
  6158  000FCA  C01E  FFDA         	movff	??_keypressed+7,fsr2h
  6159  000FCE  C01D  FFD9         	movff	??_keypressed+6,fsr2l
  6160  000FD2  C01C  FFE2         	movff	??_keypressed+5,fsr1h
  6161  000FD6  C01B  FFE1         	movff	??_keypressed+4,fsr1l
  6162  000FDA  C01A  FFEA         	movff	??_keypressed+3,fsr0h
  6163  000FDE  C019  FFE9         	movff	??_keypressed+2,fsr0l
  6164  000FE2  C018  FFFB         	movff	??_keypressed+1,pclatu
  6165  000FE6  C017  FFFA         	movff	??_keypressed,pclath
  6166  000FEA  925A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6167  000FEC  0011               	retfie		f
  6168  000FEE                     __end_of_keypressed:
  6169                           	opt stack 0
  6170                           pclatu	equ	0xFFB
  6171                           pclath	equ	0xFFA
  6172                           tblptru	equ	0xFF8
  6173                           tblptrh	equ	0xFF7
  6174                           tblptrl	equ	0xFF6
  6175                           tablat	equ	0xFF5
  6176                           prodh	equ	0xFF4
  6177                           prodl	equ	0xFF3
  6178                           intcon	equ	0xFF2
  6179                           intcon3	equ	0xFF0
  6180                           postinc0	equ	0xFEE
  6181                           fsr0h	equ	0xFEA
  6182                           fsr0l	equ	0xFE9
  6183                           wreg	equ	0xFE8
  6184                           postdec1	equ	0xFE5
  6185                           plusw1	equ	0xFE3
  6186                           fsr1h	equ	0xFE2
  6187                           fsr1l	equ	0xFE1
  6188                           postinc2	equ	0xFDE
  6189                           postdec2	equ	0xFDD
  6190                           plusw2	equ	0xFDB
  6191                           fsr2h	equ	0xFDA
  6192                           fsr2l	equ	0xFD9
  6193                           status	equ	0xFD8
  6194                           
  6195 ;; *************** function i2_stopMoving *****************
  6196 ;; Defined at:
  6197 ;;		line 29 in file "motors.c"
  6198 ;; Parameters:    Size  Location     Type
  6199 ;;		None
  6200 ;; Auto vars:     Size  Location     Type
  6201 ;;		None
  6202 ;; Return value:  Size  Location     Type
  6203 ;;                  1    wreg      void 
  6204 ;; Registers used:
  6205 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6206 ;; Tracked objects:
  6207 ;;		On entry : 0/0
  6208 ;;		On exit  : 0/0
  6209 ;;		Unchanged: 0/0
  6210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6214 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6215 ;;Total ram usage:        0 bytes
  6216 ;; Hardware stack levels used:    1
  6217 ;; Hardware stack levels required when called:    3
  6218 ;; This function calls:
  6219 ;;		i2_lcdInst
  6220 ;;		i2_printf
  6221 ;; This function is called by:
  6222 ;;		_keypressed
  6223 ;; This function uses a non-reentrant model
  6224 ;;
  6225                           
  6226                           	psect	text29
  6227  001424                     __ptext29:
  6228                           	opt stack 0
  6229  001424                     i2_stopMoving:
  6230                           	opt stack 20
  6231                           
  6232                           ;motors.c: 30: (INTCONbits.GIE = 0);
  6233                           
  6234                           ;incstack = 0
  6235  001424  9EF2               	bcf	intcon,7,c	;volatile
  6236                           
  6237                           ;motors.c: 31: lcdInst(0b10000000);;
  6238  001426  0E80               	movlw	128
  6239  001428  EC31  F00A         	call	i2_lcdInst
  6240                           
  6241                           ;motors.c: 32: LATC = 0;
  6242  00142C  0E00               	movlw	0
  6243  00142E  6E8B               	movwf	3979,c	;volatile
  6244                           
  6245                           ;motors.c: 33: printf("Stopped          ");
  6246  001430  0E77               	movlw	low STR_27
  6247  001432  6E0D               	movwf	i2printf@f,c
  6248  001434  0EFF               	movlw	high STR_27
  6249  001436  6E0E               	movwf	i2printf@f+1,c
  6250  001438  EC31  F003         	call	i2_printf	;wreg free
  6251  00143C                     i2l226:
  6252  00143C  D7FF               	goto	i2l226
  6253  00143E                     __end_ofi2_stopMoving:
  6254                           	opt stack 0
  6255                           pclatu	equ	0xFFB
  6256                           pclath	equ	0xFFA
  6257                           tblptru	equ	0xFF8
  6258                           tblptrh	equ	0xFF7
  6259                           tblptrl	equ	0xFF6
  6260                           tablat	equ	0xFF5
  6261                           prodh	equ	0xFF4
  6262                           prodl	equ	0xFF3
  6263                           intcon	equ	0xFF2
  6264                           intcon3	equ	0xFF0
  6265                           postinc0	equ	0xFEE
  6266                           fsr0h	equ	0xFEA
  6267                           fsr0l	equ	0xFE9
  6268                           wreg	equ	0xFE8
  6269                           postdec1	equ	0xFE5
  6270                           plusw1	equ	0xFE3
  6271                           fsr1h	equ	0xFE2
  6272                           fsr1l	equ	0xFE1
  6273                           postinc2	equ	0xFDE
  6274                           postdec2	equ	0xFDD
  6275                           plusw2	equ	0xFDB
  6276                           fsr2h	equ	0xFDA
  6277                           fsr2l	equ	0xFD9
  6278                           status	equ	0xFD8
  6279                           
  6280 ;; *************** function i2_printf *****************
  6281 ;; Defined at:
  6282 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  6283 ;; Parameters:    Size  Location     Type
  6284 ;;  f               2   12[COMRAM] PTR const unsigned char 
  6285 ;;		 -> STR_40(16), STR_39(23), STR_38(21), STR_37(14), 
  6286 ;;		 -> STR_36(15), STR_35(22), STR_34(20), STR_33(13), 
  6287 ;;		 -> STR_32(16), STR_31(23), STR_30(21), STR_29(14), 
  6288 ;;		 -> STR_28(16), STR_27(18), STR_26(13), STR_25(21), 
  6289 ;;		 -> STR_24(13), STR_23(21), STR_22(13), STR_21(20), 
  6290 ;;		 -> STR_20(13), STR_19(21), STR_18(23), STR_17(24), 
  6291 ;;		 -> STR_16(21), STR_15(24), STR_14(24), STR_13(25), 
  6292 ;;		 -> STR_12(27), STR_11(20), STR_10(22), STR_9(19), 
  6293 ;;		 -> STR_8(21), STR_7(20), STR_6(21), STR_5(20), 
  6294 ;;		 -> STR_4(22), STR_3(21), STR_2(24), STR_1(21), 
  6295 ;; Auto vars:     Size  Location     Type
  6296 ;;  printf          4    0        struct .
  6297 ;;  printf          3    0        PTR const unsigned char 
  6298 ;;  printf          2   19[COMRAM] unsigned int 
  6299 ;;  printf          2   15[COMRAM] PTR void [1]
  6300 ;;		 -> ?i2_printf(2), ?_printf(2), 
  6301 ;;  printf          2    0        unsigned int 
  6302 ;;  printf          1   21[COMRAM] char 
  6303 ;;  printf          1   18[COMRAM] char 
  6304 ;;  printf          1   17[COMRAM] unsigned char 
  6305 ;; Return value:  Size  Location     Type
  6306 ;;                  2   12[COMRAM] int 
  6307 ;; Registers used:
  6308 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6309 ;; Tracked objects:
  6310 ;;		On entry : 0/0
  6311 ;;		On exit  : 0/0
  6312 ;;		Unchanged: 0/0
  6313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6314 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6315 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6316 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6317 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6318 ;;Total ram usage:       10 bytes
  6319 ;; Hardware stack levels used:    1
  6320 ;; Hardware stack levels required when called:    2
  6321 ;; This function calls:
  6322 ;;		i2___lwdiv
  6323 ;;		i2___lwmod
  6324 ;;		i2_putch
  6325 ;; This function is called by:
  6326 ;;		_keypressed
  6327 ;;		i2_stopMoving
  6328 ;; This function uses a non-reentrant model
  6329 ;;
  6330                           
  6331                           	psect	text30
  6332  000662                     __ptext30:
  6333                           	opt stack 0
  6334  000662                     i2_printf:
  6335                           	opt stack 20
  6336                           
  6337                           ;doprnt.c: 466: va_list ap;
  6338                           ;doprnt.c: 499: signed char c;
  6339                           ;doprnt.c: 506: signed char prec;
  6340                           ;doprnt.c: 508: unsigned char flag;
  6341                           ;doprnt.c: 523: union {
  6342                           ;doprnt.c: 524: unsigned long vd;
  6343                           ;doprnt.c: 525: double integ;
  6344                           ;doprnt.c: 526: } tmpval;
  6345                           ;doprnt.c: 528: unsigned int val;
  6346                           ;doprnt.c: 529: unsigned len;
  6347                           ;doprnt.c: 530: const char * cp;
  6348                           ;doprnt.c: 533: *ap = __va_start();
  6349                           
  6350                           ;incstack = 0
  6351  000662  0E0F               	movlw	low (?i2_printf+2)
  6352  000664  6E10               	movwf	i2printf@ap,c
  6353  000666  0E00               	movlw	high (?i2_printf+2)
  6354  000668  6E11               	movwf	i2printf@ap+1,c
  6355                           
  6356                           ;doprnt.c: 536: while(c = *f++) {
  6357  00066A  D082               	goto	i2l2775
  6358  00066C                     i2l2727:
  6359                           
  6360                           ;doprnt.c: 538: if(c != '%')
  6361  00066C  0E25               	movlw	37
  6362  00066E  1816               	xorwf	i2printf@c,w,c
  6363  000670  B4D8               	btfsc	status,2,c
  6364  000672  D004               	goto	i2l2731
  6365                           
  6366                           ;doprnt.c: 540: {
  6367                           ;doprnt.c: 541: (putch(c) );
  6368  000674  5016               	movf	i2printf@c,w,c
  6369  000676  EC2B  F00A         	call	i2_putch
  6370                           
  6371                           ;doprnt.c: 542: continue;
  6372  00067A  D07A               	goto	i2l2775
  6373  00067C                     i2l2731:
  6374                           
  6375                           ;doprnt.c: 543: }
  6376                           ;doprnt.c: 548: flag = 0;
  6377  00067C  0E00               	movlw	0
  6378  00067E  6E12               	movwf	i2printf@flag,c
  6379                           
  6380                           ;doprnt.c: 635: switch(c = *f++) {
  6381  000680  D004               	goto	i2l2737
  6382  000682                     i2l2733:
  6383                           
  6384                           ;doprnt.c: 809: (putch(c) );
  6385  000682  5016               	movf	i2printf@c,w,c
  6386  000684  EC2B  F00A         	call	i2_putch
  6387                           
  6388                           ;doprnt.c: 810: continue;
  6389  000688  D073               	goto	i2l2775
  6390  00068A                     i2l2737:
  6391  00068A  C00D  FFF6         	movff	i2printf@f,tblptrl
  6392  00068E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6393  000692  4A0D               	infsnz	i2printf@f,f,c
  6394  000694  2A0E               	incf	i2printf@f+1,f,c
  6395  000696                     	if	0	;tblptru may be non-zero
  6396  000696                     	endif
  6397  000696                     	if	0	;tblptru may be non-zero
  6398  000696                     	endif
  6399  000696  0008               	tblrd		*
  6400  000698  CFF5 F016          	movff	tablat,i2printf@c
  6401  00069C  5016               	movf	i2printf@c,w,c
  6402                           
  6403                           ; Switch size 1, requested type "space"
  6404                           ; Number of cases is 3, Range of values is 0 to 105
  6405                           ; switch strategies available:
  6406                           ; Name         Instructions Cycles
  6407                           ; simple_byte           10     6 (average)
  6408                           ;	Chosen strategy is simple_byte
  6409  00069E  0A00               	xorlw	0	; case 0
  6410  0006A0  B4D8               	btfsc	status,2,c
  6411  0006A2  0012               	return	
  6412  0006A4  0A64               	xorlw	100	; case 100
  6413  0006A6  B4D8               	btfsc	status,2,c
  6414  0006A8  D003               	goto	i2l2739
  6415  0006AA  0A0D               	xorlw	13	; case 105
  6416  0006AC  A4D8               	btfss	status,2,c
  6417  0006AE  D7E9               	goto	i2l2733
  6418  0006B0                     i2l2739:
  6419                           
  6420                           ;doprnt.c: 1253: {
  6421                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6422  0006B0  C010  FFD9         	movff	i2printf@ap,fsr2l
  6423  0006B4  C011  FFDA         	movff	i2printf@ap+1,fsr2h
  6424  0006B8  CFDE F014          	movff	postinc2,i2printf@val
  6425  0006BC  CFDD F015          	movff	postdec2,i2printf@val+1
  6426  0006C0  0E02               	movlw	2
  6427  0006C2  2610               	addwf	i2printf@ap,f,c
  6428  0006C4  0E00               	movlw	0
  6429  0006C6  2211               	addwfc	i2printf@ap+1,f,c
  6430                           
  6431                           ;doprnt.c: 1261: if((int)val < 0) {
  6432  0006C8  AE15               	btfss	i2printf@val+1,7,c
  6433  0006CA  D006               	goto	i2l2749
  6434                           
  6435                           ;doprnt.c: 1262: flag |= 0x03;
  6436  0006CC  0E03               	movlw	3
  6437  0006CE  1212               	iorwf	i2printf@flag,f,c
  6438                           
  6439                           ;doprnt.c: 1263: val = -val;
  6440  0006D0  6C14               	negf	i2printf@val,c
  6441  0006D2  1E15               	comf	i2printf@val+1,f,c
  6442  0006D4  B0D8               	btfsc	status,0,c
  6443  0006D6  2A15               	incf	i2printf@val+1,f,c
  6444  0006D8                     i2l2749:
  6445                           
  6446                           ;doprnt.c: 1264: }
  6447                           ;doprnt.c: 1266: }
  6448                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6449  0006D8  0E01               	movlw	1
  6450  0006DA  6E16               	movwf	i2printf@c,c
  6451  0006DC                     i2l2751:
  6452  0006DC  0E05               	movlw	5
  6453  0006DE  1816               	xorwf	i2printf@c,w,c
  6454  0006E0  B4D8               	btfsc	status,2,c
  6455  0006E2  D012               	goto	i2l2763
  6456                           
  6457                           ;doprnt.c: 1306: if(val < dpowers[c])
  6458  0006E4  5016               	movf	i2printf@c,w,c
  6459  0006E6  0D02               	mullw	2
  6460  0006E8  0E47               	movlw	low _dpowers
  6461  0006EA  24F3               	addwf	prodl,w,c
  6462  0006EC  6EF6               	movwf	tblptrl,c
  6463  0006EE  0EFD               	movlw	high _dpowers
  6464  0006F0  20F4               	addwfc	prodh,w,c
  6465  0006F2  6EF7               	movwf	tblptrh,c
  6466  0006F4                     	if	0	;There are less than 3 active tblptr bytes
  6467  0006F4                     	endif
  6468  0006F4  0009               	tblrd		*+
  6469  0006F6  50F5               	movf	tablat,w,c
  6470  0006F8  5C14               	subwf	i2printf@val,w,c
  6471  0006FA  0009               	tblrd		*+
  6472  0006FC  50F5               	movf	tablat,w,c
  6473  0006FE  5815               	subwfb	i2printf@val+1,w,c
  6474  000700  A0D8               	btfss	status,0,c
  6475  000702  D002               	goto	i2l2763
  6476                           
  6477                           ;doprnt.c: 1307: break;
  6478  000704  2A16               	incf	i2printf@c,f,c
  6479  000706  D7EA               	goto	i2l2751
  6480  000708                     i2l2763:
  6481                           
  6482                           ;doprnt.c: 1422: {
  6483                           ;doprnt.c: 1438: if(flag & 0x03)
  6484  000708  C012  F00F         	movff	i2printf@flag,??i2_printf
  6485  00070C  0E03               	movlw	3
  6486  00070E  160F               	andwf	??i2_printf,f,c
  6487  000710  B4D8               	btfsc	status,2,c
  6488  000712  D003               	goto	i2l2767
  6489                           
  6490                           ;doprnt.c: 1439: (putch('-') );
  6491  000714  0E2D               	movlw	45
  6492  000716  EC2B  F00A         	call	i2_putch
  6493  00071A                     i2l2767:
  6494                           
  6495                           ;doprnt.c: 1469: }
  6496                           ;doprnt.c: 1472: prec = c;
  6497  00071A  C016  F013         	movff	i2printf@c,i2printf@prec
  6498                           
  6499                           ;doprnt.c: 1474: while(prec--) {
  6500  00071E  D024               	goto	i2l2773
  6501  000720                     i2l2769:
  6502                           
  6503                           ;doprnt.c: 1478: {
  6504                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6505  000720  5013               	movf	i2printf@prec,w,c
  6506  000722  0D02               	mullw	2
  6507  000724  0E47               	movlw	low _dpowers
  6508  000726  24F3               	addwf	prodl,w,c
  6509  000728  6EF6               	movwf	tblptrl,c
  6510  00072A  0EFD               	movlw	high _dpowers
  6511  00072C  20F4               	addwfc	prodh,w,c
  6512  00072E  6EF7               	movwf	tblptrh,c
  6513  000730                     	if	0	;There are less than 3 active tblptr bytes
  6514  000730                     	endif
  6515  000730  0009               	tblrd		*+
  6516  000732  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  6517  000736  000A               	tblrd		*-
  6518  000738  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  6519  00073C  C014  F001         	movff	i2printf@val,i2___lwdiv@dividend
  6520  000740  C015  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  6521  000744  ECB8  F008         	call	i2___lwdiv	;wreg free
  6522  000748  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  6523  00074C  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  6524  000750  0E00               	movlw	0
  6525  000752  6E0B               	movwf	i2___lwmod@divisor+1,c
  6526  000754  0E0A               	movlw	10
  6527  000756  6E0A               	movwf	i2___lwmod@divisor,c
  6528  000758  EC6A  F009         	call	i2___lwmod	;wreg free
  6529  00075C  5008               	movf	?i2___lwmod,w,c
  6530  00075E  0F30               	addlw	48
  6531  000760  6E16               	movwf	i2printf@c,c
  6532                           
  6533                           ;doprnt.c: 1523: }
  6534                           ;doprnt.c: 1524: (putch(c) );
  6535  000762  5016               	movf	i2printf@c,w,c
  6536  000764  EC2B  F00A         	call	i2_putch
  6537  000768                     i2l2773:
  6538  000768  0613               	decf	i2printf@prec,f,c
  6539  00076A  2813               	incf	i2printf@prec,w,c
  6540  00076C  A4D8               	btfss	status,2,c
  6541  00076E  D7D8               	goto	i2l2769
  6542  000770                     i2l2775:
  6543  000770  C00D  FFF6         	movff	i2printf@f,tblptrl
  6544  000774  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  6545  000778  4A0D               	infsnz	i2printf@f,f,c
  6546  00077A  2A0E               	incf	i2printf@f+1,f,c
  6547  00077C                     	if	0	;tblptru may be non-zero
  6548  00077C                     	endif
  6549  00077C                     	if	0	;tblptru may be non-zero
  6550  00077C                     	endif
  6551  00077C  0008               	tblrd		*
  6552  00077E  CFF5 F016          	movff	tablat,i2printf@c
  6553  000782  5016               	movf	i2printf@c,w,c
  6554  000784  B4D8               	btfsc	status,2,c
  6555  000786  0012               	return	
  6556  000788  D771               	goto	i2l2727
  6557  00078A                     __end_ofi2_printf:
  6558                           	opt stack 0
  6559                           pclatu	equ	0xFFB
  6560                           pclath	equ	0xFFA
  6561                           tblptru	equ	0xFF8
  6562                           tblptrh	equ	0xFF7
  6563                           tblptrl	equ	0xFF6
  6564                           tablat	equ	0xFF5
  6565                           prodh	equ	0xFF4
  6566                           prodl	equ	0xFF3
  6567                           intcon	equ	0xFF2
  6568                           intcon3	equ	0xFF0
  6569                           postinc0	equ	0xFEE
  6570                           fsr0h	equ	0xFEA
  6571                           fsr0l	equ	0xFE9
  6572                           wreg	equ	0xFE8
  6573                           postdec1	equ	0xFE5
  6574                           plusw1	equ	0xFE3
  6575                           fsr1h	equ	0xFE2
  6576                           fsr1l	equ	0xFE1
  6577                           postinc2	equ	0xFDE
  6578                           postdec2	equ	0xFDD
  6579                           plusw2	equ	0xFDB
  6580                           fsr2h	equ	0xFDA
  6581                           fsr2l	equ	0xFD9
  6582                           status	equ	0xFD8
  6583                           
  6584 ;; *************** function i2_putch *****************
  6585 ;; Defined at:
  6586 ;;		line 25 in file "lcd.c"
  6587 ;; Parameters:    Size  Location     Type
  6588 ;;  data            1    wreg     unsigned char 
  6589 ;; Auto vars:     Size  Location     Type
  6590 ;;  data            1    2[COMRAM] unsigned char 
  6591 ;; Return value:  Size  Location     Type
  6592 ;;                  1    wreg      void 
  6593 ;; Registers used:
  6594 ;;		wreg, status,2, status,0, cstack
  6595 ;; Tracked objects:
  6596 ;;		On entry : 0/0
  6597 ;;		On exit  : 0/0
  6598 ;;		Unchanged: 0/0
  6599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6601 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6603 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6604 ;;Total ram usage:        1 bytes
  6605 ;; Hardware stack levels used:    1
  6606 ;; Hardware stack levels required when called:    1
  6607 ;; This function calls:
  6608 ;;		i2_lcdNibble
  6609 ;; This function is called by:
  6610 ;;		i2_printf
  6611 ;; This function uses a non-reentrant model
  6612 ;;
  6613                           
  6614                           	psect	text31
  6615  001456                     __ptext31:
  6616                           	opt stack 0
  6617  001456                     i2_putch:
  6618                           	opt stack 20
  6619                           
  6620                           ;incstack = 0
  6621                           ;i2putch@data stored from wreg
  6622  001456  6E03               	movwf	i2putch@data,c
  6623                           
  6624                           ;lcd.c: 26: LATDbits.LATD2 = 1;
  6625  001458  848C               	bsf	3980,2,c	;volatile
  6626                           
  6627                           ;lcd.c: 27: lcdNibble(data);
  6628  00145A  5003               	movf	i2putch@data,w,c
  6629  00145C  EC64  F008         	call	i2_lcdNibble
  6630  001460  0012               	return		;funcret
  6631  001462                     __end_ofi2_putch:
  6632                           	opt stack 0
  6633                           pclatu	equ	0xFFB
  6634                           pclath	equ	0xFFA
  6635                           tblptru	equ	0xFF8
  6636                           tblptrh	equ	0xFF7
  6637                           tblptrl	equ	0xFF6
  6638                           tablat	equ	0xFF5
  6639                           prodh	equ	0xFF4
  6640                           prodl	equ	0xFF3
  6641                           intcon	equ	0xFF2
  6642                           intcon3	equ	0xFF0
  6643                           postinc0	equ	0xFEE
  6644                           fsr0h	equ	0xFEA
  6645                           fsr0l	equ	0xFE9
  6646                           wreg	equ	0xFE8
  6647                           postdec1	equ	0xFE5
  6648                           plusw1	equ	0xFE3
  6649                           fsr1h	equ	0xFE2
  6650                           fsr1l	equ	0xFE1
  6651                           postinc2	equ	0xFDE
  6652                           postdec2	equ	0xFDD
  6653                           plusw2	equ	0xFDB
  6654                           fsr2h	equ	0xFDA
  6655                           fsr2l	equ	0xFD9
  6656                           status	equ	0xFD8
  6657                           
  6658 ;; *************** function i2___lwmod *****************
  6659 ;; Defined at:
  6660 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  6661 ;; Parameters:    Size  Location     Type
  6662 ;;  dividend        2    7[COMRAM] unsigned int 
  6663 ;;  divisor         2    9[COMRAM] unsigned int 
  6664 ;; Auto vars:     Size  Location     Type
  6665 ;;  __lwmod         1   11[COMRAM] unsigned char 
  6666 ;; Return value:  Size  Location     Type
  6667 ;;                  2    7[COMRAM] unsigned int 
  6668 ;; Registers used:
  6669 ;;		wreg, status,2, status,0
  6670 ;; Tracked objects:
  6671 ;;		On entry : 0/0
  6672 ;;		On exit  : 0/0
  6673 ;;		Unchanged: 0/0
  6674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6675 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6676 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6678 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6679 ;;Total ram usage:        5 bytes
  6680 ;; Hardware stack levels used:    1
  6681 ;; This function calls:
  6682 ;;		Nothing
  6683 ;; This function is called by:
  6684 ;;		i2_printf
  6685 ;; This function uses a non-reentrant model
  6686 ;;
  6687                           
  6688                           	psect	text32
  6689  0012D4                     __ptext32:
  6690                           	opt stack 0
  6691  0012D4                     i2___lwmod:
  6692                           	opt stack 21
  6693                           
  6694                           ;incstack = 0
  6695  0012D4  500A               	movf	i2___lwmod@divisor,w,c
  6696  0012D6  100B               	iorwf	i2___lwmod@divisor+1,w,c
  6697  0012D8  B4D8               	btfsc	status,2,c
  6698  0012DA  D018               	goto	i2l732
  6699  0012DC  0E01               	movlw	1
  6700  0012DE  6E0C               	movwf	i2___lwmod@counter,c
  6701  0012E0  D004               	goto	i2l2489
  6702  0012E2                     i2l2487:
  6703  0012E2  90D8               	bcf	status,0,c
  6704  0012E4  360A               	rlcf	i2___lwmod@divisor,f,c
  6705  0012E6  360B               	rlcf	i2___lwmod@divisor+1,f,c
  6706  0012E8  2A0C               	incf	i2___lwmod@counter,f,c
  6707  0012EA                     i2l2489:
  6708  0012EA  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  6709  0012EC  D7FA               	goto	i2l2487
  6710  0012EE                     i2l2491:
  6711  0012EE  500A               	movf	i2___lwmod@divisor,w,c
  6712  0012F0  5C08               	subwf	i2___lwmod@dividend,w,c
  6713  0012F2  500B               	movf	i2___lwmod@divisor+1,w,c
  6714  0012F4  5809               	subwfb	i2___lwmod@dividend+1,w,c
  6715  0012F6  A0D8               	btfss	status,0,c
  6716  0012F8  D004               	goto	i2l2495
  6717  0012FA  500A               	movf	i2___lwmod@divisor,w,c
  6718  0012FC  5E08               	subwf	i2___lwmod@dividend,f,c
  6719  0012FE  500B               	movf	i2___lwmod@divisor+1,w,c
  6720  001300  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  6721  001302                     i2l2495:
  6722  001302  90D8               	bcf	status,0,c
  6723  001304  320B               	rrcf	i2___lwmod@divisor+1,f,c
  6724  001306  320A               	rrcf	i2___lwmod@divisor,f,c
  6725  001308  2E0C               	decfsz	i2___lwmod@counter,f,c
  6726  00130A  D7F1               	goto	i2l2491
  6727  00130C                     i2l732:
  6728  00130C  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  6729  001310  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  6730  001314  0012               	return		;funcret
  6731  001316                     __end_ofi2___lwmod:
  6732                           	opt stack 0
  6733                           pclatu	equ	0xFFB
  6734                           pclath	equ	0xFFA
  6735                           tblptru	equ	0xFF8
  6736                           tblptrh	equ	0xFF7
  6737                           tblptrl	equ	0xFF6
  6738                           tablat	equ	0xFF5
  6739                           prodh	equ	0xFF4
  6740                           prodl	equ	0xFF3
  6741                           intcon	equ	0xFF2
  6742                           intcon3	equ	0xFF0
  6743                           postinc0	equ	0xFEE
  6744                           fsr0h	equ	0xFEA
  6745                           fsr0l	equ	0xFE9
  6746                           wreg	equ	0xFE8
  6747                           postdec1	equ	0xFE5
  6748                           plusw1	equ	0xFE3
  6749                           fsr1h	equ	0xFE2
  6750                           fsr1l	equ	0xFE1
  6751                           postinc2	equ	0xFDE
  6752                           postdec2	equ	0xFDD
  6753                           plusw2	equ	0xFDB
  6754                           fsr2h	equ	0xFDA
  6755                           fsr2l	equ	0xFD9
  6756                           status	equ	0xFD8
  6757                           
  6758 ;; *************** function i2___lwdiv *****************
  6759 ;; Defined at:
  6760 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  6761 ;; Parameters:    Size  Location     Type
  6762 ;;  dividend        2    0[COMRAM] unsigned int 
  6763 ;;  divisor         2    2[COMRAM] unsigned int 
  6764 ;; Auto vars:     Size  Location     Type
  6765 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  6766 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  6767 ;; Return value:  Size  Location     Type
  6768 ;;                  2    0[COMRAM] unsigned int 
  6769 ;; Registers used:
  6770 ;;		wreg, status,2, status,0
  6771 ;; Tracked objects:
  6772 ;;		On entry : 0/0
  6773 ;;		On exit  : 0/0
  6774 ;;		Unchanged: 0/0
  6775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6776 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6777 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6779 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6780 ;;Total ram usage:        7 bytes
  6781 ;; Hardware stack levels used:    1
  6782 ;; This function calls:
  6783 ;;		Nothing
  6784 ;; This function is called by:
  6785 ;;		i2_printf
  6786 ;; This function uses a non-reentrant model
  6787 ;;
  6788                           
  6789                           	psect	text33
  6790  001170                     __ptext33:
  6791                           	opt stack 0
  6792  001170                     i2___lwdiv:
  6793                           	opt stack 21
  6794                           
  6795                           ;incstack = 0
  6796  001170  0E00               	movlw	0
  6797  001172  6E06               	movwf	i2___lwdiv@quotient+1,c
  6798  001174  0E00               	movlw	0
  6799  001176  6E05               	movwf	i2___lwdiv@quotient,c
  6800  001178  5003               	movf	i2___lwdiv@divisor,w,c
  6801  00117A  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  6802  00117C  B4D8               	btfsc	status,2,c
  6803  00117E  D01C               	goto	i2l722
  6804  001180  0E01               	movlw	1
  6805  001182  6E07               	movwf	i2___lwdiv@counter,c
  6806  001184  D004               	goto	i2l2469
  6807  001186                     i2l2467:
  6808  001186  90D8               	bcf	status,0,c
  6809  001188  3603               	rlcf	i2___lwdiv@divisor,f,c
  6810  00118A  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  6811  00118C  2A07               	incf	i2___lwdiv@counter,f,c
  6812  00118E                     i2l2469:
  6813  00118E  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  6814  001190  D7FA               	goto	i2l2467
  6815  001192                     i2l2471:
  6816  001192  90D8               	bcf	status,0,c
  6817  001194  3605               	rlcf	i2___lwdiv@quotient,f,c
  6818  001196  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  6819  001198  5003               	movf	i2___lwdiv@divisor,w,c
  6820  00119A  5C01               	subwf	i2___lwdiv@dividend,w,c
  6821  00119C  5004               	movf	i2___lwdiv@divisor+1,w,c
  6822  00119E  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  6823  0011A0  A0D8               	btfss	status,0,c
  6824  0011A2  D005               	goto	i2l2479
  6825  0011A4  5003               	movf	i2___lwdiv@divisor,w,c
  6826  0011A6  5E01               	subwf	i2___lwdiv@dividend,f,c
  6827  0011A8  5004               	movf	i2___lwdiv@divisor+1,w,c
  6828  0011AA  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  6829  0011AC  8005               	bsf	i2___lwdiv@quotient,0,c
  6830  0011AE                     i2l2479:
  6831  0011AE  90D8               	bcf	status,0,c
  6832  0011B0  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  6833  0011B2  3203               	rrcf	i2___lwdiv@divisor,f,c
  6834  0011B4  2E07               	decfsz	i2___lwdiv@counter,f,c
  6835  0011B6  D7ED               	goto	i2l2471
  6836  0011B8                     i2l722:
  6837  0011B8  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  6838  0011BC  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  6839  0011C0  0012               	return		;funcret
  6840  0011C2                     __end_ofi2___lwdiv:
  6841                           	opt stack 0
  6842                           pclatu	equ	0xFFB
  6843                           pclath	equ	0xFFA
  6844                           tblptru	equ	0xFF8
  6845                           tblptrh	equ	0xFF7
  6846                           tblptrl	equ	0xFF6
  6847                           tablat	equ	0xFF5
  6848                           prodh	equ	0xFF4
  6849                           prodl	equ	0xFF3
  6850                           intcon	equ	0xFF2
  6851                           intcon3	equ	0xFF0
  6852                           postinc0	equ	0xFEE
  6853                           fsr0h	equ	0xFEA
  6854                           fsr0l	equ	0xFE9
  6855                           wreg	equ	0xFE8
  6856                           postdec1	equ	0xFE5
  6857                           plusw1	equ	0xFE3
  6858                           fsr1h	equ	0xFE2
  6859                           fsr1l	equ	0xFE1
  6860                           postinc2	equ	0xFDE
  6861                           postdec2	equ	0xFDD
  6862                           plusw2	equ	0xFDB
  6863                           fsr2h	equ	0xFDA
  6864                           fsr2l	equ	0xFD9
  6865                           status	equ	0xFD8
  6866                           
  6867 ;; *************** function i2_lcdInst *****************
  6868 ;; Defined at:
  6869 ;;		line 20 in file "lcd.c"
  6870 ;; Parameters:    Size  Location     Type
  6871 ;;  data            1    wreg     unsigned char 
  6872 ;; Auto vars:     Size  Location     Type
  6873 ;;  data            1    2[COMRAM] unsigned char 
  6874 ;; Return value:  Size  Location     Type
  6875 ;;                  1    wreg      void 
  6876 ;; Registers used:
  6877 ;;		wreg, status,2, status,0, cstack
  6878 ;; Tracked objects:
  6879 ;;		On entry : 0/0
  6880 ;;		On exit  : 0/0
  6881 ;;		Unchanged: 0/0
  6882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6884 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6886 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6887 ;;Total ram usage:        1 bytes
  6888 ;; Hardware stack levels used:    1
  6889 ;; Hardware stack levels required when called:    1
  6890 ;; This function calls:
  6891 ;;		i2_lcdNibble
  6892 ;; This function is called by:
  6893 ;;		i2_stopMoving
  6894 ;; This function uses a non-reentrant model
  6895 ;;
  6896                           
  6897                           	psect	text34
  6898  001462                     __ptext34:
  6899                           	opt stack 0
  6900  001462                     i2_lcdInst:
  6901                           	opt stack 21
  6902                           
  6903                           ;incstack = 0
  6904                           ;i2lcdInst@data stored from wreg
  6905  001462  6E03               	movwf	i2lcdInst@data,c
  6906                           
  6907                           ;lcd.c: 21: LATDbits.LATD2 = 0;
  6908  001464  948C               	bcf	3980,2,c	;volatile
  6909                           
  6910                           ;lcd.c: 22: lcdNibble(data);
  6911  001466  5003               	movf	i2lcdInst@data,w,c
  6912  001468  EC64  F008         	call	i2_lcdNibble
  6913  00146C  0012               	return		;funcret
  6914  00146E                     __end_ofi2_lcdInst:
  6915                           	opt stack 0
  6916                           pclatu	equ	0xFFB
  6917                           pclath	equ	0xFFA
  6918                           tblptru	equ	0xFF8
  6919                           tblptrh	equ	0xFF7
  6920                           tblptrl	equ	0xFF6
  6921                           tablat	equ	0xFF5
  6922                           prodh	equ	0xFF4
  6923                           prodl	equ	0xFF3
  6924                           intcon	equ	0xFF2
  6925                           intcon3	equ	0xFF0
  6926                           postinc0	equ	0xFEE
  6927                           fsr0h	equ	0xFEA
  6928                           fsr0l	equ	0xFE9
  6929                           wreg	equ	0xFE8
  6930                           postdec1	equ	0xFE5
  6931                           plusw1	equ	0xFE3
  6932                           fsr1h	equ	0xFE2
  6933                           fsr1l	equ	0xFE1
  6934                           postinc2	equ	0xFDE
  6935                           postdec2	equ	0xFDD
  6936                           plusw2	equ	0xFDB
  6937                           fsr2h	equ	0xFDA
  6938                           fsr2l	equ	0xFD9
  6939                           status	equ	0xFD8
  6940                           
  6941 ;; *************** function i2_lcdNibble *****************
  6942 ;; Defined at:
  6943 ;;		line 30 in file "lcd.c"
  6944 ;; Parameters:    Size  Location     Type
  6945 ;;  data            1    wreg     unsigned char 
  6946 ;; Auto vars:     Size  Location     Type
  6947 ;;  data            1    1[COMRAM] unsigned char 
  6948 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  6949 ;; Return value:  Size  Location     Type
  6950 ;;                  1    wreg      void 
  6951 ;; Registers used:
  6952 ;;		wreg, status,2, status,0
  6953 ;; Tracked objects:
  6954 ;;		On entry : 0/0
  6955 ;;		On exit  : 0/0
  6956 ;;		Unchanged: 0/0
  6957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6959 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6961 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6962 ;;Total ram usage:        2 bytes
  6963 ;; Hardware stack levels used:    1
  6964 ;; This function calls:
  6965 ;;		Nothing
  6966 ;; This function is called by:
  6967 ;;		i2_lcdInst
  6968 ;;		i2_putch
  6969 ;; This function uses a non-reentrant model
  6970 ;;
  6971                           
  6972                           	psect	text35
  6973  0010C8                     __ptext35:
  6974                           	opt stack 0
  6975  0010C8                     i2_lcdNibble:
  6976                           	opt stack 20
  6977                           
  6978                           ;incstack = 0
  6979                           ;i2lcdNibble@data stored from wreg
  6980  0010C8  6E02               	movwf	i2lcdNibble@data,c
  6981                           
  6982                           ;lcd.c: 32: char temp = data & 0xF0;
  6983  0010CA  5002               	movf	i2lcdNibble@data,w,c
  6984  0010CC  0BF0               	andlw	240
  6985  0010CE  6E01               	movwf	i2lcdNibble@temp,c
  6986                           
  6987                           ;lcd.c: 33: LATD = LATD & 0x0F;
  6988  0010D0  508C               	movf	3980,w,c	;volatile
  6989  0010D2  0B0F               	andlw	15
  6990  0010D4  6E8C               	movwf	3980,c	;volatile
  6991                           
  6992                           ;lcd.c: 34: LATD = temp | LATD;
  6993  0010D6  5001               	movf	i2lcdNibble@temp,w,c
  6994  0010D8  108C               	iorwf	3980,w,c	;volatile
  6995  0010DA  6E8C               	movwf	3980,c	;volatile
  6996                           
  6997                           ;lcd.c: 36: LATDbits.LATD3 = 0;
  6998  0010DC  968C               	bcf	3980,3,c	;volatile
  6999                           
  7000                           ;lcd.c: 37: _delay((unsigned long)((25)*(8000000/4000000.0)));
  7001  0010DE  0E10               	movlw	16
  7002  0010E0                     i2u287_47:
  7003  0010E0  2EE8               	decfsz	wreg,f,c
  7004  0010E2  D7FE               	bra	i2u287_47
  7005  0010E4  D000               	nop2	
  7006                           
  7007                           ;lcd.c: 38: LATDbits.LATD3 = 1;
  7008  0010E6  868C               	bsf	3980,3,c	;volatile
  7009                           
  7010                           ;lcd.c: 39: _delay((unsigned long)((25)*(8000000/4000000.0)));
  7011  0010E8  0E10               	movlw	16
  7012  0010EA                     i2u288_47:
  7013  0010EA  2EE8               	decfsz	wreg,f,c
  7014  0010EC  D7FE               	bra	i2u288_47
  7015  0010EE  D000               	nop2	
  7016                           
  7017                           ;lcd.c: 41: data = data << 4;
  7018  0010F0  3802               	swapf	i2lcdNibble@data,w,c
  7019  0010F2  0BF0               	andlw	240
  7020  0010F4  6E02               	movwf	i2lcdNibble@data,c
  7021                           
  7022                           ;lcd.c: 43: temp = data & 0xF0;
  7023  0010F6  5002               	movf	i2lcdNibble@data,w,c
  7024  0010F8  0BF0               	andlw	240
  7025  0010FA  6E01               	movwf	i2lcdNibble@temp,c
  7026                           
  7027                           ;lcd.c: 44: LATD = LATD & 0x0F;
  7028  0010FC  508C               	movf	3980,w,c	;volatile
  7029  0010FE  0B0F               	andlw	15
  7030  001100  6E8C               	movwf	3980,c	;volatile
  7031                           
  7032                           ;lcd.c: 45: LATD = temp | LATD;
  7033  001102  5001               	movf	i2lcdNibble@temp,w,c
  7034  001104  108C               	iorwf	3980,w,c	;volatile
  7035  001106  6E8C               	movwf	3980,c	;volatile
  7036                           
  7037                           ;lcd.c: 47: LATDbits.LATD3 = 0;
  7038  001108  968C               	bcf	3980,3,c	;volatile
  7039                           
  7040                           ;lcd.c: 48: _delay((unsigned long)((25)*(8000000/4000000.0)));
  7041  00110A  0E10               	movlw	16
  7042  00110C                     i2u289_47:
  7043  00110C  2EE8               	decfsz	wreg,f,c
  7044  00110E  D7FE               	bra	i2u289_47
  7045  001110  D000               	nop2	
  7046                           
  7047                           ;lcd.c: 49: LATDbits.LATD3 = 1;
  7048  001112  868C               	bsf	3980,3,c	;volatile
  7049                           
  7050                           ;lcd.c: 50: _delay((unsigned long)((25)*(8000000/4000000.0)));
  7051  001114  0E10               	movlw	16
  7052  001116                     i2u290_47:
  7053  001116  2EE8               	decfsz	wreg,f,c
  7054  001118  D7FE               	bra	i2u290_47
  7055  00111A  D000               	nop2	
  7056  00111C  0012               	return		;funcret
  7057  00111E                     __end_ofi2_lcdNibble:
  7058                           	opt stack 0
  7059                           pclatu	equ	0xFFB
  7060                           pclath	equ	0xFFA
  7061                           tblptru	equ	0xFF8
  7062                           tblptrh	equ	0xFF7
  7063                           tblptrl	equ	0xFF6
  7064                           tablat	equ	0xFF5
  7065                           prodh	equ	0xFF4
  7066                           prodl	equ	0xFF3
  7067                           intcon	equ	0xFF2
  7068                           intcon3	equ	0xFF0
  7069                           postinc0	equ	0xFEE
  7070                           fsr0h	equ	0xFEA
  7071                           fsr0l	equ	0xFE9
  7072                           wreg	equ	0xFE8
  7073                           postdec1	equ	0xFE5
  7074                           plusw1	equ	0xFE3
  7075                           fsr1h	equ	0xFE2
  7076                           fsr1l	equ	0xFE1
  7077                           postinc2	equ	0xFDE
  7078                           postdec2	equ	0xFDD
  7079                           plusw2	equ	0xFDB
  7080                           fsr2h	equ	0xFDA
  7081                           fsr2l	equ	0xFD9
  7082                           status	equ	0xFD8
  7083                           pclatu	equ	0xFFB
  7084                           pclath	equ	0xFFA
  7085                           tblptru	equ	0xFF8
  7086                           tblptrh	equ	0xFF7
  7087                           tblptrl	equ	0xFF6
  7088                           tablat	equ	0xFF5
  7089                           prodh	equ	0xFF4
  7090                           prodl	equ	0xFF3
  7091                           intcon	equ	0xFF2
  7092                           intcon3	equ	0xFF0
  7093                           postinc0	equ	0xFEE
  7094                           fsr0h	equ	0xFEA
  7095                           fsr0l	equ	0xFE9
  7096                           wreg	equ	0xFE8
  7097                           postdec1	equ	0xFE5
  7098                           plusw1	equ	0xFE3
  7099                           fsr1h	equ	0xFE2
  7100                           fsr1l	equ	0xFE1
  7101                           postinc2	equ	0xFDE
  7102                           postdec2	equ	0xFDD
  7103                           plusw2	equ	0xFDB
  7104                           fsr2h	equ	0xFDA
  7105                           fsr2l	equ	0xFD9
  7106                           status	equ	0xFD8
  7107                           
  7108                           	psect	rparam
  7109  0000                     pclatu	equ	0xFFB
  7110                           pclath	equ	0xFFA
  7111                           tblptru	equ	0xFF8
  7112                           tblptrh	equ	0xFF7
  7113                           tblptrl	equ	0xFF6
  7114                           tablat	equ	0xFF5
  7115                           prodh	equ	0xFF4
  7116                           prodl	equ	0xFF3
  7117                           intcon	equ	0xFF2
  7118                           intcon3	equ	0xFF0
  7119                           postinc0	equ	0xFEE
  7120                           fsr0h	equ	0xFEA
  7121                           fsr0l	equ	0xFE9
  7122                           wreg	equ	0xFE8
  7123                           postdec1	equ	0xFE5
  7124                           plusw1	equ	0xFE3
  7125                           fsr1h	equ	0xFE2
  7126                           fsr1l	equ	0xFE1
  7127                           postinc2	equ	0xFDE
  7128                           postdec2	equ	0xFDD
  7129                           plusw2	equ	0xFDB
  7130                           fsr2h	equ	0xFDA
  7131                           fsr2l	equ	0xFD9
  7132                           status	equ	0xFD8
  7133                           
  7134                           	psect	temp
  7135  00005A                     btemp:
  7136                           	opt stack 0
  7137  00005A                     	ds	1
  7138  0000                     int$flags	set	btemp
  7139                           pclatu	equ	0xFFB
  7140                           pclath	equ	0xFFA
  7141                           tblptru	equ	0xFF8
  7142                           tblptrh	equ	0xFF7
  7143                           tblptrl	equ	0xFF6
  7144                           tablat	equ	0xFF5
  7145                           prodh	equ	0xFF4
  7146                           prodl	equ	0xFF3
  7147                           intcon	equ	0xFF2
  7148                           intcon3	equ	0xFF0
  7149                           postinc0	equ	0xFEE
  7150                           fsr0h	equ	0xFEA
  7151                           fsr0l	equ	0xFE9
  7152                           wreg	equ	0xFE8
  7153                           postdec1	equ	0xFE5
  7154                           plusw1	equ	0xFE3
  7155                           fsr1h	equ	0xFE2
  7156                           fsr1l	equ	0xFE1
  7157                           postinc2	equ	0xFDE
  7158                           postdec2	equ	0xFDD
  7159                           plusw2	equ	0xFDB
  7160                           fsr2h	equ	0xFDA
  7161                           fsr2l	equ	0xFD9
  7162                           status	equ	0xFD8


Data Sizes:
    Strings     685
    Constant    10
    Data        8
    BSS         28
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     73      89
    BANK0           128     59      79
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_40(CODE[16]), STR_39(CODE[23]), STR_38(CODE[21]), STR_37(CODE[14]), 
		 -> STR_36(CODE[15]), STR_35(CODE[22]), STR_34(CODE[20]), STR_33(CODE[13]), 
		 -> STR_32(CODE[16]), STR_31(CODE[23]), STR_30(CODE[21]), STR_29(CODE[14]), 
		 -> STR_28(CODE[16]), STR_27(CODE[18]), STR_26(CODE[13]), STR_25(CODE[21]), 
		 -> STR_24(CODE[13]), STR_23(CODE[21]), STR_22(CODE[13]), STR_21(CODE[20]), 
		 -> STR_20(CODE[13]), STR_19(CODE[21]), STR_18(CODE[23]), STR_17(CODE[24]), 
		 -> STR_16(CODE[21]), STR_15(CODE[24]), STR_14(CODE[24]), STR_13(CODE[25]), 
		 -> STR_12(CODE[27]), STR_11(CODE[20]), STR_10(CODE[22]), STR_9(CODE[19]), 
		 -> STR_8(CODE[21]), STR_7(CODE[20]), STR_6(CODE[21]), STR_5(CODE[20]), 
		 -> STR_4(CODE[22]), STR_3(CODE[21]), STR_2(CODE[24]), STR_1(CODE[21]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(COMRAM[2]), 

    check9@sorted	PTR int  size(2) Largest target is 8
		 -> simulate@sorted(BANK0[8]), mainloop@sorted(COMRAM[8]), 

    checkC@sorted	PTR int  size(2) Largest target is 8
		 -> simulate@sorted(BANK0[8]), mainloop@sorted(COMRAM[8]), 

    checkAA@sorted	PTR int  size(2) Largest target is 8
		 -> testADC@sorted(COMRAM[8]), simulate@sorted(BANK0[8]), mainloop@sorted(COMRAM[8]), 

    CCW90@port	PTR int  size(2) Largest target is 6
		 -> simulate@portCCW(BANK0[6]), 

    CW90@port	PTR int  size(2) Largest target is 6
		 -> simulate@portCW(BANK0[6]), 

    PWMC@port	PTR int  size(2) Largest target is 6
		 -> simulate@portCCW(BANK0[6]), simulate@portCW(BANK0[6]), 

    showInfo@sorted	PTR unsigned int  size(2) Largest target is 8
		 -> simulate@sorted(BANK0[8]), mainloop@sorted(COMRAM[8]), 


Critical Paths under _main in COMRAM

    _simulate->_showInfo
    _stopMoving->_printf
    _showInfo->_printf
    _checkC->_checkV
    _checkAA->_checkV
    _check9->_checkV
    _checkV->___ftge
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    ___lcd_newline->_lcdInst
    ___ftmul->___ftpack
    ___ftge->___ftdiv
    ___ftdiv->___ftmul
    ___awtoft->___ftpack
    _CW90->_PWMC
    _CCW90->_PWMC
    _PWMC->___awdiv
    _initialize->_initLCD
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _keypressed in COMRAM

    _keypressed->i2_printf
    i2_stopMoving->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    _main->_simulate
    _simulate->_check9
    _simulate->_checkAA
    _simulate->_checkC
    _checkC->_checkV
    _checkAA->_checkV
    _check9->_checkV
    _checkV->___ftge
    ___ftge->___ftdiv

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     0      5   84956
                                             54 BANK0      5     0      5
                      ___lcd_newline
                         _initialize
                             _printf
                           _simulate
 ---------------------------------------------------------------------------------
 (1) _simulate                                            34    34      0   79756
                                             20 BANK0     34    34      0
                              _CCW90
                               _CW90
                      _captureKeypad
                             _check9
                            _checkAA
                             _checkC
                            _lcdInst
                             _printf
                           _showInfo
                         _stopMoving
 ---------------------------------------------------------------------------------
 (2) _stopMoving                                           0     0      0    4810
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _showInfo                                            14    10      4    5663
                                             61 COMRAM    12     8      4
                                              0 BANK0      2     2      0
                      ___lcd_newline
                      _captureKeypad
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _captureKeypad                                        3     1      2      34
                                             37 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _checkC                                               2     0      2   19925
                                             18 BANK0      2     0      2
                                 _AD
                      ___lcd_newline
                             _checkV
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _checkAA                                              2     0      2   20002
                                             18 BANK0      2     0      2
                                 _AD
                      ___lcd_newline
                             _checkV
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _check9                                               2     0      2   19925
                                             18 BANK0      2     0      2
                                 _AD
                      ___lcd_newline
                             _checkV
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _checkV                                               7     2      5   14682
                                             72 COMRAM     1     1      0
                                             12 BANK0      6     1      5
                                 _AD (ARG)
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                      ___lcd_newline
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              21    17      4    4615
                                             49 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     195
                                             39 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     386
                                             44 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     395
                                             37 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___lcd_newline                                        0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    3160
                                             45 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     352
                                             69 COMRAM     3     3      0
                                              6 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3092
                                             60 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    2614
                                             45 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2404
                                             37 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _AD                                                   5     3      2      22
                                             37 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (2) _CW90                                                 2     0      2    1757
                                             58 COMRAM     2     0      2
                               _PWMC
 ---------------------------------------------------------------------------------
 (2) _CCW90                                                2     0      2    1757
                                             58 COMRAM     2     0      2
                               _PWMC
 ---------------------------------------------------------------------------------
 (3) _PWMC                                                40    34      6    1671
                                             45 COMRAM    13     7      6
                            ___awdiv
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     428
                                             37 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0     390
                            _initLCD
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     195
                                             40 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     195
                                             39 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNibble                                            2     2      0     164
                                             37 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _keypressed                                          15    15      0    2176
                                             22 COMRAM    15    15      0
                           i2_printf
                       i2_stopMoving
 ---------------------------------------------------------------------------------
 (8) i2_stopMoving                                         0     0      0    1155
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            19    17      2    1020
                                             12 COMRAM    10     8      2
                          i2___lwdiv
                          i2___lwmod
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (9) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___lcd_newline
     _lcdInst
       _lcdNibble
   _initialize
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNibble
   _simulate
     _CCW90
       _PWMC
         ___awdiv
     _CW90
       _PWMC
         ___awdiv
     _captureKeypad
     _check9
       _AD
       ___lcd_newline
         _lcdInst
           _lcdNibble
       _checkV
         _AD (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftmul (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
         ___lcd_newline (ARG)
           _lcdInst
             _lcdNibble
         _printf (ARG)
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
             _lcdNibble
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
     _checkAA
       _AD
       ___lcd_newline
         _lcdInst
           _lcdNibble
       _checkV
         _AD (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftmul (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
         ___lcd_newline (ARG)
           _lcdInst
             _lcdNibble
         _printf (ARG)
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
             _lcdNibble
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
     _checkC
       _AD
       ___lcd_newline
         _lcdInst
           _lcdNibble
       _checkV
         _AD (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftmul (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
         ___lcd_newline (ARG)
           _lcdInst
             _lcdNibble
         _printf (ARG)
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
             _lcdNibble
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _lcdNibble
     _showInfo
       ___lcd_newline
         _lcdInst
           _lcdNibble
       _captureKeypad
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
     _stopMoving
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble

 _keypressed (ROOT)
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2_putch
       i2_lcdNibble
   i2_stopMoving
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2_putch
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     3B      4F       5       61.7%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     49      59       1       70.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A8      34        0.0%
DATA                 0      0      A8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Feb 24 17:16:41 2017

                     _AD 1316             ___awdiv@sign 002B       i2___lwdiv@dividend 0001  
            __CFG_BORV$3 000000             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
           __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000              __CFG_OSC$HS 000000  
                    ?_AD 0026                      l213 09BA                      l226 1408  
                    l261 0DEC                      l165 140A                      l168 1416  
                    l602 085A                      l187 04F8                      l544 0F3A  
                    l722 1166                      l732 12CA             __CFG_CPB$OFF 000000  
           __CFG_CPD$OFF 000000                      wreg 000FE8            ___lcd_newline 1476  
                   ??_AD 0028             __CFG_LVP$OFF 000000             ___ftdiv@cntr 0080  
           ___ftdiv@sign 0085             __CFG_WDT$OFF 000000                     l2301 1050  
                   l2305 105A                     l2401 0A4E                     l3211 113C  
                   l2309 1068                     l2405 0A5C                     l2421 1336  
                   l3301 07B6                     l3221 115C                     l3213 1140  
                   l4021 0D0E                     l3231 12A8                     l4023 0C1E  
                   l4015 0B3A                     l2409 0A6C                     l3209 1134  
                   l3233 12AC                     l4025 0C30                     l4017 0B4C  
                   l2291 1030                     l2283 1012                     l2371 09AC  
                   l2419 1326                     l3171 0EBC                     l3307 07E2  
                   l3251 055A                     l4019 0CFC                     l2293 1034  
                   l2277 1002                     l3405 0E2C                     l3237 12C0  
                   l3229 12A0                     l3245 0544                     l3501 0CC6  
                   l2391 0A14                     l2383 09E4                     l3183 0F08  
                   l3175 0ECA                     l3327 0830                     l3415 0EA8  
                   l3255 0562                     l2289 1028                     l3185 0F26  
                   l3177 0ED4                     l3409 0E64                     l3353 08DE  
                   l3281 05E0                     l3257 0588                     l3249 0554  
                   l3433 0D42                     l3187 0F30                     l3179 0EF2  
                   l3371 0920                     l3347 08B6                     l3291 0640  
                   l3267 05B0                     l3381 0948                     l3285 05F2  
                   l3269 05B4                     l3293 0648                     l3445 0D7A  
                   l3437 0D58                     l3429 0D38                     l3533 0AE4  
                   l3525 0AB8                     l3517 0A8C                     l2399 0A44  
                   l3367 0910                     l3287 05F8                     l3439 0D6E  
                   l3631 041C                     l3377 0938                     l3561 0B70  
                   l3481 0C7A                     l3473 0C54                     l3545 0B04  
                   l3625 0390                     l3617 0356                     l3721 00C2  
                   l3713 009A                     l3705 0078                     l3539 0AF8  
                   l3643 0488                     l3619 0364                     l3397 1366  
                   l3637 0450                     l3741 0144                     l3725 00DA  
                   l3717 00B8                     l3709 0082                     l3583 0BDC  
                   l3495 0CBA                     l3751 0172                     l3577 0BC8  
                   l3569 0B9C                     l3489 0CA6                     l3649 04C0  
                   l3657 04FC                     l3809 02D8                     l3771 01DA  
                   l3755 017C                     l3747 0166                     l3589 0BE8  
                   l3765 01B8                     l3783 0208                     l3775 01E6  
                   l3759 0194                     l3795 024E                     l3779 01F0  
                   l3699 0056                     l3789 022C                     _ADFM 007E07  
                   _ADON 007E10                     _CW90 13B4                     STR_1 FEC0  
                   STR_2 FDCD                     STR_3 FED5                     STR_4 FE56  
                   STR_5 FF50                     STR_6 FEFF                     STR_7 FF3C  
                   STR_8 FEEA                     STR_9 FF64                     _LATA 000F89  
                   _LATB 000F8A                     _LATC 000F8B                     _LATD 000F8C  
                   u2321 089E                     _LATE 000F8D                     u1515 09EC  
                   u1516 09EE                     u2341 08C6                     u2271 079A  
                   u1545 0A1C                     u1546 0A1E                     u2291 07C6  
                   u2531 0106                     u2541 0118                     u1575 0A4C  
                   u1576 0A4E                     u2481 0038                     u2650 02CE  
                   u2807 0A5E                     u2727 008A                     u2817 120E  
                   u2737 00CA                     u2827 1242                     u2747 0184  
                   u2837 108A                     u2757 01F8                     u2847 1094  
                   u2767 0266                     u2857 10B6                     u2777 031E  
                   u2867 10C0                     u2787 0D48                     u2797 132C  
                   _PWMC 0982            checkAA@sorted 0092                     _main 138A  
           ___ftpack@arg 0026             ___ftpack@exp 0029                     fsr0h 000FEA  
                   fsr1h 000FE2       i2___lwdiv@quotient 0005                     fsr2h 000FDA  
                   fsr0l 000FE9                     fsr1l 000FE1                     fsr2l 000FD9  
                   btemp 005A                     prodh 000FF4                     prodl 000FF3  
                   start 000E            __CFG_IESO$OFF 000000             simulate@stop 0096  
        __end_ofi2_putch 1462            __CFG_MCLRE$ON 000000             ___ftmul@cntr 003B  
           ___param_bank 000000             ___ftmul@sign 003C              i2_lcdNibble 10C8  
                  ?_CW90 003B                    ?_PWMC 002E                    ?_main 00B6  
                  _CCW90 13D2          __end_of___awdiv 1072                    STR_10 FE40  
                  STR_11 FF28                    STR_20 FFF1                    STR_12 FD51  
                  STR_21 FF14                    STR_13 FD6C                    STR_30 FDE7  
                  STR_22 FFF1                    STR_14 FDB5                    STR_23 FE96  
                  STR_31 FDE5                    STR_15 FD85                    STR_24 FFF1  
                  STR_40 FF99                    STR_32 FF89                    STR_16 FEAB  
                  STR_33 FFE4                    STR_25 FE6C                    STR_17 FD9D  
                  STR_34 FE2C                    STR_26 FFF1                    STR_18 FE13  
                  STR_27 FF77                    STR_19 FE81                    STR_35 FE2A  
                  STR_36 FFB9                    STR_28 FFA9                    STR_37 FFD6  
                  STR_29 FFC8                    STR_38 FDFE                    STR_39 FDFC  
        __end_of___ftdiv 088E          __end_of___ftmul 0982          ___awdiv@divisor 0028  
                  _LATC0 007C58                    _LATC1 007C59                    _LATC2 007C5A  
                  _LATC3 007C5B          __end_of___lwdiv 1170          __end_of___lwmod 12D4  
                  i2l226 143C                    i2l175 0FB2                    i2l722 11B8  
                  i2l732 130C          ___awdiv@counter 002A     __end_ofi2_stopMoving 143E  
        __end_of_checkAA 0D1A                    _PORTB 000F81                    _TRISA 000F92  
                  _TRISB 000F93                    _TRISC 000F94                    _TRISD 000F95  
                  _TRISE 000F96            __CFG_PWRT$OFF 000000           ?___lcd_newline 0001  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            simulate@F3080 00BB  
          simulate@F3091 00C3            __CFG_WRT2$OFF 000000            simulate@F3089 00C9  
          __CFG_WRT3$OFF 000000          __end_of_lcdInst 1456           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000          __end_of_initLCD 124E           __CFG_EBTRB$OFF 000000  
          ___awtoft@sign 0031          __end_of_dpowers FD51            ___ftpack@sign 002A  
                  _putch 143E            simulate@i_182 00AB            simulate@i_192 00AD  
          simulate@i_189 00AC                    pclath 000FFA                    tablat 000FF5  
                  plusw1 000FE3                    plusw2 000FDB                    status 000FD8  
         __CFG_PBADEN$ON 000000         __end_ofi2_printf 078A       __size_ofi2___lwdiv 0052  
           __end_of_CW90 13D2       __size_ofi2___lwmod 0042             __end_of_PWMC 0A74  
        __initialization 11C2       __size_ofi2_lcdInst 000C             __end_of_main 13B4  
             i2printf@ap 0010                   ??_CW90 003D                   ??_PWMC 0034  
                 ??_main 004A                   ?_CCW90 003B            __activetblptr 000002  
              CCW90@port 003B                   _ADCON0 000FC2                   _ADCON1 000FC1  
                 _ADRESH 000FC4                   _ADRESL 000FC3         ___awdiv@dividend 0026  
        i2lcdNibble@data 0002         __end_of___awtoft 138A                   ?_putch 0001  
       __end_of___ftpack 0F5A          i2lcdNibble@temp 0001                   _INT1IE 007F83  
                 _INT1IF 007F80                   _CVRCON 000FB5                   i2l2471 1192  
                 i2l2467 1186                   i2l2491 12EE                   i2l2731 067C  
                 i2l2469 118E                   i2l2733 0682                   i2l2479 11AE  
                 i2l2495 1302                   i2l2487 12E2                   i2l2751 06DC  
                 i2l2727 066C                   i2l2489 12EA                   i2l2737 068A  
                 i2l2763 0708                   i2l2739 06B0                   i2l2773 0768  
                 i2l2749 06D8                   i2l2767 071A                   i2l2775 0770  
                 i2l2769 0720                ??i2_putch 0003                AD@channel 002A  
          checkV@voltage 008C           __CFG_XINST$OFF 000000    __end_of_captureKeypad 1424  
                 ___ftge 0DF4                   _check9 0B58                   _checkC 0A74  
              ??___awdiv 002A                   _checkV 0D1A           __CFG_STVREN$ON 000000  
              ??___ftdiv 0043                ??___ftmul 0034                ??___lwdiv 002A  
              ??___lwmod 0031                ??_checkAA 004A                   clear_0 11E8  
                 clear_1 11F4         ___awdiv@quotient 002C                ??_lcdInst 0028  
                 _printf 053A          ??___lcd_newline 0029    ___ftmul@f3_as_product 0038  
              ??_initLCD 0029             __pdataCOMRAM 0052         __end_of_showInfo 053A  
      __end_ofi2___lwdiv 11C2             __mediumconst FD46        __end_ofi2___lwmod 1316  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
       __end_of_simulate 0300        __end_ofi2_lcdInst 146E           simulate@portCW 0098  
         simulate@sorted 00AE               __accesstop 0080  __end_of__initialization 11FA  
             ___ftge@ff1 0086               ___ftge@ff2 0089            __end_of_CCW90 13F0  
          ___rparam_used 000001               ___ftdiv@f1 003D               ___ftdiv@f2 0040  
             ___ftdiv@f3 0081               ___awtoft@c 002E               ___ftmul@f1 002E  
             ___ftmul@f2 0031       i2___lwmod@dividend 0008           __pcstackCOMRAM 0001  
  __size_ofi2_stopMoving 001A            __end_of_putch 144A              i2printf@val 0014  
             __end_of_AD 1352                  ??_CCW90 003D       __size_of_lcdNibble 0056  
            i2putch@data 0003                ?i2_printf 000D                  ??_putch 0028  
             __pbssBANK0 00BB             i2_stopMoving 1424                  ?___ftge 0086  
           ?i2_lcdNibble 0001                  ?_check9 0092                  ?_checkC 0092  
                ?_checkV 008C                ?___awtoft 002E                ?___ftpack 0026  
                ?_printf 0032               ??i2_printf 000F                  i2_putch 1456  
      __end_of_lcdNibble 10C8                  __Hparam 0000                  __Lparam 0000  
              ?_showInfo 003E          __size_of___ftge 00B8                ?_simulate 0001  
                ___awdiv 0FEE                  ___ftdiv 078A                  ___ftmul 088E  
        __size_of_check9 00E4          __size_of_checkC 00E4          __size_of_checkV 00DA  
                ___lwdiv 111E                  ___lwmod 1292                  _checkAA 0C3C  
                __pcinit 11C2               ??___awtoft 0031               ??___ftpack 002B  
                __ramtop 1000               _initialize 124E                  _lcdInst 144A  
                __ptext0 138A                  __ptext1 0012                  __ptext2 13F0  
                __ptext3 0300                  __ptext4 140A                  __ptext5 0A74  
                __ptext6 0C3C                  __ptext7 0B58                  __ptext8 0D1A  
                __ptext9 053A          __size_of_printf 0128                  _initLCD 1208  
                checkV@i 0091                  _dpowers FD47               _keypressed 0008  
         __pintcode_body 0F5A     end_of_initialization 11FA            __Lmediumconst FD46  
                int_func 0F5A                _PWMC$1136 0036                _PWMC$1137 0037  
              _PWMC$1138 0038               ??_showInfo 0042                  printf@c 003D  
                printf@f 0032                  postdec1 000FE5                  postdec2 000FDD  
             ??_simulate 0094                  postinc0 000FEE                  postinc2 000FDE  
              _PORTBbits 000F81              PWMC@widthus 002E          simulate@portCCW 009E  
      i2___lwdiv@divisor 0003                i2___lwdiv 1170                i2___lwmod 12D4  
      i2___lwdiv@counter 0007                i2_lcdInst 1462              ___ftdiv@exp 0084  
             _stopMoving 13F0             check9@sorted 0092              ___ftmul@exp 0037  
         __end_of___ftge 0EAC           __end_of_check9 0C3C           __end_of_checkC 0B58  
         __end_of_checkV 0DF4     __size_ofi2_lcdNibble 0056            __pidataCOMRAM 146E  
          mainloop@F3072 004A              ?_initialize 0001            i2lcdInst@data 0003  
           checkC@sorted 0092           __end_of_printf 0662             i2printf@flag 0012  
  __end_of___lcd_newline 147E             i2printf@prec 0013      start_initialization 11C2  
            ?_keypressed 0001                i2printf@c 0016                i2printf@f 000D  
 __size_of_captureKeypad 001A               ?i2___lwdiv 0001               ?i2___lwmod 0008  
      __size_ofi2_printf 0128               ?i2_lcdInst 0001                 CW90@port 003B  
               ??___ftge 0046                 ??_check9 004A                 ??_checkC 004A  
               ??_checkV 0049         __CFG_LPT1OSC$OFF 000000                 ??_printf 0036  
      __size_of___awtoft 0038        __size_of___ftpack 00AE              __pbssCOMRAM 004A  
          __pcstackBANK0 0080        i2___lwmod@divisor 000A        i2___lwmod@counter 000C  
               ?i2_putch 0001      __size_of_initialize 0044              ?_stopMoving 0001  
       ___lwdiv@dividend 0026        __CFG_CCP2MX$PORTC 000000            _captureKeypad 140A  
    __size_of_keypressed 0FE6                __pintcode 0008            __pmediumconst FD46  
              _lcdNibble 1072                 ?___awdiv 0026                 ?___ftdiv 003D  
               ?___ftmul 002E                 ?___lwdiv 0026                 ?___lwmod 002D  
      __size_of_showInfo 023A                 ?_checkAA 0092        __size_of_simulate 02EE  
               ?_lcdInst 0001                 PWMC@port 0032           __size_of_CCW90 001E  
               ?_initLCD 0001                checkV@max 008E         ___lwdiv@quotient 002B  
            ??i2___lwdiv 0005              ??i2___lwmod 000C           __size_of_putch 000C  
            __size_of_AD 003C              ??i2_lcdInst 0003                 _LATDbits 000F8C  
               i2u290_47 1116           ?_captureKeypad 0026                 i2u287_47 10E0  
               i2u288_47 10EA                 i2u289_47 110C         __CFG_WDTPS$32768 000000  
             PWMC@cycles 0030               ?_lcdNibble 0001               _ADCON0bits 000FC2  
          lcdNibble@data 0027               printf@flag 0039             testADC@F3099 0052  
          lcdNibble@temp 0026               printf@prec 003A               simulate@AA 00A4  
    __size_of_stopMoving 001A               simulate@V9 00A8                 i2_printf 0662  
  captureKeypad@keypress 0028                copy_data0 11D6         __size_ofi2_putch 000C  
     keypressed@keypress 0025           showInfo@sorted 0040                 __Hrparam 0000  
               __Lrparam 0000       __CFG_BOREN$SBORDIS 000000         __size_of___awdiv 0084  
       __size_of___ftdiv 0104         __size_of___ftmul 00F4         __size_of___lwdiv 0052  
       __size_of___lwmod 0042             ??_initialize 002A                 ___awtoft 1352  
               ___ftpack 0EAC         __size_of_checkAA 00DE         __size_of_lcdInst 000C  
       __size_of_initLCD 0046             ??_keypressed 0017          ___lwdiv@divisor 0028  
        ___lwdiv@counter 002A                 __ptext10 143E                 __ptext11 1292  
               __ptext20 13B4                 __ptext12 111E                 __ptext21 13D2  
               __ptext13 1476                 __ptext30 0662                 __ptext22 0982  
               __ptext14 088E                 __ptext31 1456                 __ptext23 0FEE  
               __ptext15 0DF4                 __ptext32 12D4                 __ptext24 124E  
               __ptext16 078A                 __ptext33 1170                 __ptext25 1208  
               __ptext17 1352                 __ptext34 1462                 __ptext26 144A  
               __ptext18 0EAC                 __ptext35 10C8                 __ptext27 1072  
               __ptext19 1316                 __ptext29 1424            __size_of_CW90 001E  
          __size_of_PWMC 00F2            __size_of_main 002A       __end_of_initialize 1292  
        ??_captureKeypad 0028            ?i2_stopMoving 0001                 _showInfo 0300  
          ??i2_lcdNibble 0001              ??_lcdNibble 0026                 _simulate 0012  
     __end_of_keypressed 0FEE                 int$flags 005A                 main@argc 00B6  
               main@argv 00B8                printf@val 003B                simulate@C 00A6  
              simulate@i 00AA                putch@data 0028               _INTCONbits 000FF2  
          PWMC@countdown 0039                 intlevel2 0000         ___lwmod@dividend 002D  
         ??i2_stopMoving 0017             ??_stopMoving 003E   __size_of___lcd_newline 0008  
               printf@ap 0037              lcdInst@data 0028             showInfo@time 003E  
           showInfo@type 0080      __end_ofi2_lcdNibble 111E          ___lwmod@divisor 002F  
        ___lwmod@counter 0031       __end_of_stopMoving 140A  

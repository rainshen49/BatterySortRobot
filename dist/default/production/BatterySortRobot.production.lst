

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Mar  6 21:40:21 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    49                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1
    67                           	psect	text55,global,reloc=2,class=CODE,delta=1
    68                           	psect	text56,global,reloc=2,class=CODE,delta=1
    69                           	psect	text57,global,reloc=2,class=CODE,delta=1
    70                           	psect	text58,global,reloc=2,class=CODE,delta=1
    71                           	psect	text59,global,reloc=2,class=CODE,delta=1
    72                           	psect	text60,global,reloc=2,class=CODE,delta=1
    73                           	psect	text61,global,reloc=2,class=CODE,delta=1
    74                           	psect	text62,global,reloc=2,class=CODE,delta=1
    75                           	psect	text63,global,reloc=2,class=CODE,delta=1
    76                           	psect	text64,global,reloc=2,class=CODE,delta=1
    77                           	psect	text65,global,reloc=2,class=CODE,delta=1
    78                           	psect	text66,global,reloc=2,class=CODE,delta=1
    79                           	psect	text67,global,reloc=2,class=CODE,delta=1
    80                           	psect	text68,global,reloc=2,class=CODE,delta=1
    81                           	psect	text69,global,reloc=2,class=CODE,delta=1
    82                           	psect	text70,global,reloc=2,class=CODE,delta=1
    83                           	psect	text71,global,reloc=2,class=CODE,delta=1
    84                           	psect	text72,global,reloc=2,class=CODE,delta=1
    85                           	psect	text73,global,reloc=2,class=CODE,delta=1
    86                           	psect	text74,global,reloc=2,class=CODE,delta=1
    87                           	psect	text75,global,reloc=2,class=CODE,delta=1
    88                           	psect	text76,global,reloc=2,class=CODE,delta=1
    89                           	psect	text77,global,reloc=2,class=CODE,delta=1
    90                           	psect	text78,global,reloc=2,class=CODE,delta=1
    91                           	psect	text79,global,reloc=2,class=CODE,delta=1
    92                           	psect	text80,global,reloc=2,class=CODE,delta=1
    93                           	psect	text81,global,reloc=2,class=CODE,delta=1
    94                           	psect	text82,global,reloc=2,class=CODE,delta=1
    95                           	psect	text83,global,reloc=2,class=CODE,delta=1
    96                           	psect	text84,global,reloc=2,class=CODE,delta=1
    97                           	psect	text85,global,reloc=2,class=CODE,delta=1
    98                           	psect	text86,global,reloc=2,class=CODE,delta=1
    99                           	psect	text87,global,reloc=2,class=CODE,delta=1
   100                           	psect	text88,global,reloc=2,class=CODE,delta=1
   101                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   102                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   103                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   104  0000                     
   105                           ; Version 1.41
   106                           ; Generated 25/01/2017 GMT
   107                           ; 
   108                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   109                           ; All rights reserved.
   110                           ; 
   111                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   112                           ; 
   113                           ; Redistribution and use in source and binary forms, with or without modification, are
   114                           ; permitted provided that the following conditions are met:
   115                           ; 
   116                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   117                           ;        conditions and the following disclaimer.
   118                           ; 
   119                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   120                           ;        of conditions and the following disclaimer in the documentation and/or other
   121                           ;        materials provided with the distribution.
   122                           ; 
   123                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   124                           ;        software without specific prior written permission.
   125                           ; 
   126                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   127                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   128                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   129                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   130                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   131                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   132                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   133                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   134                           ; 
   135                           ; 
   136                           ; Code-generator required, PIC18F4620 Definitions
   137                           ; 
   138                           ; SFR Addresses
   139  0000                     
   140                           	psect	mediumconst
   141  00FBE0                     __pmediumconst:
   142                           	opt stack 0
   143  00FBE0  00                 	db	0
   144  00FBE1                     _dpowers:
   145                           	opt stack 0
   146  00FBE1  0001               	dw	1
   147  00FBE3  0000               	dw	0
   148  00FBE5  000A               	dw	10
   149  00FBE7  0000               	dw	0
   150  00FBE9  0064               	dw	100
   151  00FBEB  0000               	dw	0
   152  00FBED  03E8               	dw	1000
   153  00FBEF  0000               	dw	0
   154  00FBF1  2710               	dw	10000
   155  00FBF3  0000               	dw	0
   156  00FBF5  86A0               	dw	34464
   157  00FBF7  0001               	dw	1
   158  00FBF9  4240               	dw	16960
   159  00FBFB  000F               	dw	15
   160  00FBFD  9680               	dw	38528
   161  00FBFF  0098               	dw	152
   162  00FC01  E100               	dw	57600
   163  00FC03  05F5               	dw	1525
   164  00FC05  CA00               	dw	51712
   165  00FC07  3B9A               	dw	15258
   166  00FC09                     __end_of_dpowers:
   167                           	opt stack 0
   168  00FC09                     __powers_:
   169                           	opt stack 0
   170  00FC09  00                 	db	0
   171  00FC0A  80                 	db	128
   172  00FC0B  3F                 	db	63
   173  00FC0C  00                 	db	0
   174  00FC0D  20                 	db	32
   175  00FC0E  41                 	db	65
   176  00FC0F  00                 	db	0
   177  00FC10  C8                 	db	200
   178  00FC11  42                 	db	66
   179  00FC12  00                 	db	0
   180  00FC13  7A                 	db	122
   181  00FC14  44                 	db	68
   182  00FC15  40                 	db	64
   183  00FC16  1C                 	db	28
   184  00FC17  46                 	db	70
   185  00FC18  50                 	db	80
   186  00FC19  C3                 	db	195
   187  00FC1A  47                 	db	71
   188  00FC1B  24                 	db	36
   189  00FC1C  74                 	db	116
   190  00FC1D  49                 	db	73
   191  00FC1E  97                 	db	151
   192  00FC1F  18                 	db	24
   193  00FC20  4B                 	db	75
   194  00FC21  BC                 	db	188
   195  00FC22  BE                 	db	190
   196  00FC23  4C                 	db	76
   197  00FC24  6B                 	db	107
   198  00FC25  6E                 	db	110
   199  00FC26  4E                 	db	78
   200  00FC27  03                 	db	3
   201  00FC28  15                 	db	21
   202  00FC29  50                 	db	80
   203  00FC2A  79                 	db	121
   204  00FC2B  AD                 	db	173
   205  00FC2C  60                 	db	96
   206  00FC2D  F3                 	db	243
   207  00FC2E  49                 	db	73
   208  00FC2F  71                 	db	113
   209  00FC30                     __end_of__powers_:
   210                           	opt stack 0
   211  00FC30                     __npowers_:
   212                           	opt stack 0
   213  00FC30  00                 	db	0
   214  00FC31  80                 	db	128
   215  00FC32  3F                 	db	63
   216  00FC33  CD                 	db	205
   217  00FC34  CC                 	db	204
   218  00FC35  3D                 	db	61
   219  00FC36  D7                 	db	215
   220  00FC37  23                 	db	35
   221  00FC38  3C                 	db	60
   222  00FC39  12                 	db	18
   223  00FC3A  83                 	db	131
   224  00FC3B  3A                 	db	58
   225  00FC3C  B7                 	db	183
   226  00FC3D  D1                 	db	209
   227  00FC3E  38                 	db	56
   228  00FC3F  C6                 	db	198
   229  00FC40  27                 	db	39
   230  00FC41  37                 	db	55
   231  00FC42  38                 	db	56
   232  00FC43  86                 	db	134
   233  00FC44  35                 	db	53
   234  00FC45  C0                 	db	192
   235  00FC46  D6                 	db	214
   236  00FC47  33                 	db	51
   237  00FC48  CC                 	db	204
   238  00FC49  2B                 	db	43
   239  00FC4A  32                 	db	50
   240  00FC4B  70                 	db	112
   241  00FC4C  89                 	db	137
   242  00FC4D  30                 	db	48
   243  00FC4E  E7                 	db	231
   244  00FC4F  DB                 	db	219
   245  00FC50  2E                 	db	46
   246  00FC51  E5                 	db	229
   247  00FC52  3C                 	db	60
   248  00FC53  1E                 	db	30
   249  00FC54  42                 	db	66
   250  00FC55  A2                 	db	162
   251  00FC56  0D                 	db	13
   252  00FC57                     __end_of__npowers_:
   253                           	opt stack 0
   254  00FC57                     _hexpowers:
   255                           	opt stack 0
   256  00FC57  0001               	dw	1
   257  00FC59  0000               	dw	0
   258  00FC5B  0010               	dw	16
   259  00FC5D  0000               	dw	0
   260  00FC5F  0100               	dw	256
   261  00FC61  0000               	dw	0
   262  00FC63  1000               	dw	4096
   263  00FC65  0000               	dw	0
   264  00FC67  0000               	dw	0
   265  00FC69  0001               	dw	1
   266  00FC6B  0000               	dw	0
   267  00FC6D  0010               	dw	16
   268  00FC6F  0000               	dw	0
   269  00FC71  0100               	dw	256
   270  00FC73  0000               	dw	0
   271  00FC75  1000               	dw	4096
   272  00FC77                     __end_of_hexpowers:
   273                           	opt stack 0
   274  0000                     _PIR2bits	set	4001
   275  0000                     _EECON2	set	4007
   276  0000                     _EEDATA	set	4008
   277  0000                     _EECON1bits	set	4006
   278  0000                     _EEADR	set	4009
   279  0000                     _EEADRH	set	4010
   280  0000                     _SSPBUF	set	4041
   281  0000                     _SSPADD	set	4040
   282  0000                     _SSPCON2	set	4037
   283  0000                     _SSPCON1	set	4038
   284  0000                     _SSPSTAT	set	4039
   285  0000                     _ADRESL	set	4035
   286  0000                     _ADRESH	set	4036
   287  0000                     _ADCON0bits	set	4034
   288  0000                     _LATDbits	set	3980
   289  0000                     _PORTBbits	set	3969
   290  0000                     _PORTB	set	3969
   291  0000                     _INTCONbits	set	4082
   292  0000                     _CVRCON	set	4021
   293  0000                     _ADCON1	set	4033
   294  0000                     _ADCON0	set	4034
   295  0000                     _LATE	set	3981
   296  0000                     _LATD	set	3980
   297  0000                     _LATC	set	3979
   298  0000                     _LATB	set	3978
   299  0000                     _LATA	set	3977
   300  0000                     _TRISE	set	3990
   301  0000                     _TRISD	set	3989
   302  0000                     _TRISC	set	3988
   303  0000                     _TRISB	set	3987
   304  0000                     _TRISA	set	3986
   305  0000                     _ACKEN	set	32300
   306  0000                     _ACKDT	set	32301
   307  0000                     _RCEN	set	32299
   308  0000                     _PEN	set	32298
   309  0000                     _SEN	set	32296
   310  0000                     _TRISC4	set	31908
   311  0000                     _TRISC3	set	31907
   312  0000                     _ADON	set	32272
   313  0000                     _INT1IE	set	32643
   314  0000                     _INT1IF	set	32640
   315  0000                     _LATC5	set	31837
   316  0000                     _ADFM	set	32263
   317  0000                     _LATC2	set	31834
   318  0000                     _LATC1	set	31833
   319  0000                     _LATC0	set	31832
   320  00FC77                     STR_15:
   321                           
   322                           ; BSR set to: 0
   323  00FC77  53                 	db	83	;'S'
   324  00FC78  6F                 	db	111	;'o'
   325  00FC79  72                 	db	114	;'r'
   326  00FC7A  74                 	db	116	;'t'
   327  00FC7B  69                 	db	105	;'i'
   328  00FC7C  6E                 	db	110	;'n'
   329  00FC7D  67                 	db	103	;'g'
   330  00FC7E  20                 	db	32
   331  00FC7F  43                 	db	67	;'C'
   332  00FC80  6F                 	db	111	;'o'
   333  00FC81  6D                 	db	109	;'m'
   334  00FC82  70                 	db	112	;'p'
   335  00FC83  6C                 	db	108	;'l'
   336  00FC84  65                 	db	101	;'e'
   337  00FC85  74                 	db	116	;'t'
   338  00FC86  65                 	db	101	;'e'
   339  00FC87  20                 	db	32
   340  00FC88  20                 	db	32
   341  00FC89  20                 	db	32
   342  00FC8A  20                 	db	32
   343  00FC8B  20                 	db	32
   344  00FC8C  20                 	db	32
   345  00FC8D  20                 	db	32
   346  00FC8E  20                 	db	32
   347  00FC8F  20                 	db	32
   348  00FC90  20                 	db	32
   349  00FC91  00                 	db	0
   350  00FC92                     STR_19:
   351                           
   352                           ; BSR set to: 0
   353  00FC92  50                 	db	80	;'P'
   354  00FC93  72                 	db	114	;'r'
   355  00FC94  65                 	db	101	;'e'
   356  00FC95  73                 	db	115	;'s'
   357  00FC96  73                 	db	115	;'s'
   358  00FC97  20                 	db	32
   359  00FC98  61                 	db	97	;'a'
   360  00FC99  20                 	db	32
   361  00FC9A  6E                 	db	110	;'n'
   362  00FC9B  75                 	db	117	;'u'
   363  00FC9C  6D                 	db	109	;'m'
   364  00FC9D  62                 	db	98	;'b'
   365  00FC9E  65                 	db	101	;'e'
   366  00FC9F  72                 	db	114	;'r'
   367  00FCA0  20                 	db	32
   368  00FCA1  20                 	db	32
   369  00FCA2  20                 	db	32
   370  00FCA3  20                 	db	32
   371  00FCA4  20                 	db	32
   372  00FCA5  20                 	db	32
   373  00FCA6  20                 	db	32
   374  00FCA7  20                 	db	32
   375  00FCA8  20                 	db	32
   376  00FCA9  20                 	db	32
   377  00FCAA  00                 	db	0
   378  00FCAB                     STR_21:
   379                           
   380                           ; BSR set to: 0
   381  00FCAB  54                 	db	84	;'T'
   382  00FCAC  69                 	db	105	;'i'
   383  00FCAD  6D                 	db	109	;'m'
   384  00FCAE  65                 	db	101	;'e'
   385  00FCAF  20                 	db	32
   386  00FCB0  45                 	db	69	;'E'
   387  00FCB1  6C                 	db	108	;'l'
   388  00FCB2  61                 	db	97	;'a'
   389  00FCB3  70                 	db	112	;'p'
   390  00FCB4  73                 	db	115	;'s'
   391  00FCB5  65                 	db	101	;'e'
   392  00FCB6  64                 	db	100	;'d'
   393  00FCB7  3A                 	db	58	;':'
   394  00FCB8  20                 	db	32
   395  00FCB9  20                 	db	32
   396  00FCBA  20                 	db	32
   397  00FCBB  20                 	db	32
   398  00FCBC  20                 	db	32
   399  00FCBD  20                 	db	32
   400  00FCBE  20                 	db	32
   401  00FCBF  20                 	db	32
   402  00FCC0  20                 	db	32
   403  00FCC1  20                 	db	32
   404  00FCC2  00                 	db	0
   405  00FCC3                     STR_23:
   406                           
   407                           ; BSR set to: 0
   408  00FCC3  54                 	db	84	;'T'
   409  00FCC4  6F                 	db	111	;'o'
   410  00FCC5  74                 	db	116	;'t'
   411  00FCC6  61                 	db	97	;'a'
   412  00FCC7  6C                 	db	108	;'l'
   413  00FCC8  20                 	db	32
   414  00FCC9  53                 	db	83	;'S'
   415  00FCCA  6F                 	db	111	;'o'
   416  00FCCB  72                 	db	114	;'r'
   417  00FCCC  74                 	db	116	;'t'
   418  00FCCD  65                 	db	101	;'e'
   419  00FCCE  64                 	db	100	;'d'
   420  00FCCF  3A                 	db	58	;':'
   421  00FCD0  20                 	db	32
   422  00FCD1  20                 	db	32
   423  00FCD2  20                 	db	32
   424  00FCD3  20                 	db	32
   425  00FCD4  20                 	db	32
   426  00FCD5  20                 	db	32
   427  00FCD6  20                 	db	32
   428  00FCD7  20                 	db	32
   429  00FCD8  20                 	db	32
   430  00FCD9  20                 	db	32
   431  00FCDA  00                 	db	0
   432  00FCDB                     STR_20:
   433                           
   434                           ; BSR set to: 0
   435  00FCDB  46                 	db	70	;'F'
   436  00FCDC  6F                 	db	111	;'o'
   437  00FCDD  72                 	db	114	;'r'
   438  00FCDE  20                 	db	32
   439  00FCDF  6D                 	db	109	;'m'
   440  00FCE0  6F                 	db	111	;'o'
   441  00FCE1  72                 	db	114	;'r'
   442  00FCE2  65                 	db	101	;'e'
   443  00FCE3  20                 	db	32
   444  00FCE4  69                 	db	105	;'i'
   445  00FCE5  6E                 	db	110	;'n'
   446  00FCE6  66                 	db	102	;'f'
   447  00FCE7  6F                 	db	111	;'o'
   448  00FCE8  20                 	db	32
   449  00FCE9  20                 	db	32
   450  00FCEA  20                 	db	32
   451  00FCEB  20                 	db	32
   452  00FCEC  20                 	db	32
   453  00FCED  20                 	db	32
   454  00FCEE  20                 	db	32
   455  00FCEF  20                 	db	32
   456  00FCF0  20                 	db	32
   457  00FCF1  20                 	db	32
   458  00FCF2  00                 	db	0
   459  00FCF3                     STR_2:
   460                           
   461                           ; BSR set to: 0
   462  00FCF3  53                 	db	83	;'S'
   463  00FCF4  69                 	db	105	;'i'
   464  00FCF5  6D                 	db	109	;'m'
   465  00FCF6  75                 	db	117	;'u'
   466  00FCF7  6C                 	db	108	;'l'
   467  00FCF8  61                 	db	97	;'a'
   468  00FCF9  74                 	db	116	;'t'
   469  00FCFA  69                 	db	105	;'i'
   470  00FCFB  6E                 	db	110	;'n'
   471  00FCFC  67                 	db	103	;'g'
   472  00FCFD  2E                 	db	46
   473  00FCFE  2E                 	db	46
   474  00FCFF  2E                 	db	46
   475  00FD00  20                 	db	32
   476  00FD01  20                 	db	32
   477  00FD02  20                 	db	32
   478  00FD03  20                 	db	32
   479  00FD04  20                 	db	32
   480  00FD05  20                 	db	32
   481  00FD06  20                 	db	32
   482  00FD07  20                 	db	32
   483  00FD08  20                 	db	32
   484  00FD09  20                 	db	32
   485  00FD0A  00                 	db	0
   486  00FD0B                     STR_16:
   487                           
   488                           ; BSR set to: 0
   489  00FD0B  25                 	db	37
   490  00FD0C  30                 	db	48	;'0'
   491  00FD0D  32                 	db	50	;'2'
   492  00FD0E  78                 	db	120	;'x'
   493  00FD0F  2F                 	db	47
   494  00FD10  25                 	db	37
   495  00FD11  30                 	db	48	;'0'
   496  00FD12  32                 	db	50	;'2'
   497  00FD13  78                 	db	120	;'x'
   498  00FD14  2F                 	db	47
   499  00FD15  25                 	db	37
   500  00FD16  30                 	db	48	;'0'
   501  00FD17  32                 	db	50	;'2'
   502  00FD18  78                 	db	120	;'x'
   503  00FD19  20                 	db	32
   504  00FD1A  20                 	db	32
   505  00FD1B  20                 	db	32
   506  00FD1C  20                 	db	32
   507  00FD1D  20                 	db	32
   508  00FD1E  20                 	db	32
   509  00FD1F  20                 	db	32
   510  00FD20  20                 	db	32
   511  00FD21  20                 	db	32
   512  00FD22  00                 	db	0
   513  00FD23                     STR_17:
   514                           
   515                           ; BSR set to: 0
   516  00FD23  25                 	db	37
   517  00FD24  30                 	db	48	;'0'
   518  00FD25  32                 	db	50	;'2'
   519  00FD26  78                 	db	120	;'x'
   520  00FD27  3A                 	db	58	;':'
   521  00FD28  25                 	db	37
   522  00FD29  30                 	db	48	;'0'
   523  00FD2A  32                 	db	50	;'2'
   524  00FD2B  78                 	db	120	;'x'
   525  00FD2C  3A                 	db	58	;':'
   526  00FD2D  25                 	db	37
   527  00FD2E  30                 	db	48	;'0'
   528  00FD2F  32                 	db	50	;'2'
   529  00FD30  78                 	db	120	;'x'
   530  00FD31  20                 	db	32
   531  00FD32  20                 	db	32
   532  00FD33  20                 	db	32
   533  00FD34  20                 	db	32
   534  00FD35  20                 	db	32
   535  00FD36  20                 	db	32
   536  00FD37  20                 	db	32
   537  00FD38  20                 	db	32
   538  00FD39  20                 	db	32
   539  00FD3A  00                 	db	0
   540  00FD3B                     STR_40:
   541                           
   542                           ; BSR set to: 0
   543  00FD3B  75                 	db	117	;'u'
   544  00FD3C  6E                 	db	110	;'n'
   545  00FD3D  63                 	db	99	;'c'
   546  00FD3E  68                 	db	104	;'h'
   547  00FD3F  61                 	db	97	;'a'
   548  00FD40  72                 	db	114	;'r'
   549  00FD41  67                 	db	103	;'g'
   550  00FD42  65                 	db	101	;'e'
   551  00FD43  64                 	db	100	;'d'
   552  00FD44  20                 	db	32
   553  00FD45  41                 	db	65	;'A'
   554  00FD46  41                 	db	65	;'A'
   555  00FD47  20                 	db	32
   556  00FD48  20                 	db	32
   557  00FD49  20                 	db	32
   558  00FD4A  20                 	db	32
   559  00FD4B  20                 	db	32
   560  00FD4C  20                 	db	32
   561  00FD4D  20                 	db	32
   562  00FD4E  20                 	db	32
   563  00FD4F  20                 	db	32
   564  00FD50  20                 	db	32
   565  00FD51  00                 	db	0
   566  00FD52                     STR_48:
   567                           
   568                           ; BSR set to: 0
   569  00FD52  75                 	db	117	;'u'
   570  00FD53  6E                 	db	110	;'n'
   571  00FD54  63                 	db	99	;'c'
   572  00FD55  68                 	db	104	;'h'
   573  00FD56  61                 	db	97	;'a'
   574  00FD57  72                 	db	114	;'r'
   575  00FD58  67                 	db	103	;'g'
   576  00FD59  65                 	db	101	;'e'
   577  00FD5A  64                 	db	100	;'d'
   578  00FD5B  20                 	db	32
   579  00FD5C  39                 	db	57	;'9'
   580  00FD5D  56                 	db	86	;'V'
   581  00FD5E  20                 	db	32
   582  00FD5F  20                 	db	32
   583  00FD60  20                 	db	32
   584  00FD61  20                 	db	32
   585  00FD62  20                 	db	32
   586  00FD63  20                 	db	32
   587  00FD64  20                 	db	32
   588  00FD65  20                 	db	32
   589  00FD66  20                 	db	32
   590  00FD67  20                 	db	32
   591  00FD68  00                 	db	0
   592  00FD69                     STR_24:
   593                           
   594                           ; BSR set to: 0
   595  00FD69  25                 	db	37
   596  00FD6A  75                 	db	117	;'u'
   597  00FD6B  20                 	db	32
   598  00FD6C  62                 	db	98	;'b'
   599  00FD6D  61                 	db	97	;'a'
   600  00FD6E  74                 	db	116	;'t'
   601  00FD6F  74                 	db	116	;'t'
   602  00FD70  65                 	db	101	;'e'
   603  00FD71  72                 	db	114	;'r'
   604  00FD72  69                 	db	105	;'i'
   605  00FD73  65                 	db	101	;'e'
   606  00FD74  73                 	db	115	;'s'
   607  00FD75  20                 	db	32
   608  00FD76  20                 	db	32
   609  00FD77  20                 	db	32
   610  00FD78  20                 	db	32
   611  00FD79  20                 	db	32
   612  00FD7A  20                 	db	32
   613  00FD7B  20                 	db	32
   614  00FD7C  20                 	db	32
   615  00FD7D  20                 	db	32
   616  00FD7E  20                 	db	32
   617  00FD7F  00                 	db	0
   618  00FD80                     STR_44:
   619                           
   620                           ; BSR set to: 0
   621  00FD80  75                 	db	117	;'u'
   622  00FD81  6E                 	db	110	;'n'
   623  00FD82  63                 	db	99	;'c'
   624  00FD83  68                 	db	104	;'h'
   625  00FD84  61                 	db	97	;'a'
   626  00FD85  72                 	db	114	;'r'
   627  00FD86  67                 	db	103	;'g'
   628  00FD87  65                 	db	101	;'e'
   629  00FD88  64                 	db	100	;'d'
   630  00FD89  20                 	db	32
   631  00FD8A  43                 	db	67	;'C'
   632  00FD8B  20                 	db	32
   633  00FD8C  20                 	db	32
   634  00FD8D  20                 	db	32
   635  00FD8E  20                 	db	32
   636  00FD8F  20                 	db	32
   637  00FD90  20                 	db	32
   638  00FD91  20                 	db	32
   639  00FD92  20                 	db	32
   640  00FD93  20                 	db	32
   641  00FD94  20                 	db	32
   642  00FD95  00                 	db	0
   643  00FD96                     STR_5:
   644                           
   645                           ; BSR set to: 0
   646  00FD96  41                 	db	65	;'A'
   647  00FD97  41                 	db	65	;'A'
   648  00FD98  53                 	db	83	;'S'
   649  00FD99  65                 	db	101	;'e'
   650  00FD9A  72                 	db	114	;'r'
   651  00FD9B  76                 	db	118	;'v'
   652  00FD9C  6F                 	db	111	;'o'
   653  00FD9D  53                 	db	83	;'S'
   654  00FD9E  74                 	db	116	;'t'
   655  00FD9F  61                 	db	97	;'a'
   656  00FDA0  79                 	db	121	;'y'
   657  00FDA1  73                 	db	115	;'s'
   658  00FDA2  20                 	db	32
   659  00FDA3  20                 	db	32
   660  00FDA4  20                 	db	32
   661  00FDA5  20                 	db	32
   662  00FDA6  20                 	db	32
   663  00FDA7  20                 	db	32
   664  00FDA8  20                 	db	32
   665  00FDA9  20                 	db	32
   666  00FDAA  20                 	db	32
   667  00FDAB  00                 	db	0
   668  00FDAC                     STR_4:
   669                           
   670                           ; BSR set to: 0
   671  00FDAC  41                 	db	65	;'A'
   672  00FDAD  41                 	db	65	;'A'
   673  00FDAE  53                 	db	83	;'S'
   674  00FDAF  65                 	db	101	;'e'
   675  00FDB0  72                 	db	114	;'r'
   676  00FDB1  76                 	db	118	;'v'
   677  00FDB2  6F                 	db	111	;'o'
   678  00FDB3  52                 	db	82	;'R'
   679  00FDB4  69                 	db	105	;'i'
   680  00FDB5  67                 	db	103	;'g'
   681  00FDB6  68                 	db	104	;'h'
   682  00FDB7  74                 	db	116	;'t'
   683  00FDB8  20                 	db	32
   684  00FDB9  20                 	db	32
   685  00FDBA  20                 	db	32
   686  00FDBB  20                 	db	32
   687  00FDBC  20                 	db	32
   688  00FDBD  20                 	db	32
   689  00FDBE  20                 	db	32
   690  00FDBF  20                 	db	32
   691  00FDC0  20                 	db	32
   692  00FDC1  00                 	db	0
   693  00FDC2                     STR_31:
   694                           
   695                           ; BSR set to: 0
   696  00FDC2  55                 	db	85	;'U'
   697  00FDC3  6E                 	db	110	;'n'
   698  00FDC4  63                 	db	99	;'c'
   699  00FDC5  68                 	db	104	;'h'
   700  00FDC6  61                 	db	97	;'a'
   701  00FDC7  72                 	db	114	;'r'
   702  00FDC8  67                 	db	103	;'g'
   703  00FDC9  65                 	db	101	;'e'
   704  00FDCA  64                 	db	100	;'d'
   705  00FDCB  3A                 	db	58	;':'
   706  00FDCC  20                 	db	32
   707  00FDCD  20                 	db	32
   708  00FDCE  20                 	db	32
   709  00FDCF  20                 	db	32
   710  00FDD0  20                 	db	32
   711  00FDD1  20                 	db	32
   712  00FDD2  20                 	db	32
   713  00FDD3  20                 	db	32
   714  00FDD4  20                 	db	32
   715  00FDD5  20                 	db	32
   716  00FDD6  00                 	db	0
   717  00FDD7                     STR_25:
   718                           
   719                           ; BSR set to: 0
   720  00FDD7  41                 	db	65	;'A'
   721  00FDD8  41                 	db	65	;'A'
   722  00FDD9  20                 	db	32
   723  00FDDA  53                 	db	83	;'S'
   724  00FDDB  6F                 	db	111	;'o'
   725  00FDDC  72                 	db	114	;'r'
   726  00FDDD  74                 	db	116	;'t'
   727  00FDDE  65                 	db	101	;'e'
   728  00FDDF  64                 	db	100	;'d'
   729  00FDE0  3A                 	db	58	;':'
   730  00FDE1  20                 	db	32
   731  00FDE2  20                 	db	32
   732  00FDE3  20                 	db	32
   733  00FDE4  20                 	db	32
   734  00FDE5  20                 	db	32
   735  00FDE6  20                 	db	32
   736  00FDE7  20                 	db	32
   737  00FDE8  20                 	db	32
   738  00FDE9  20                 	db	32
   739  00FDEA  20                 	db	32
   740  00FDEB  00                 	db	0
   741  00FDEC                     STR_29:
   742                           
   743                           ; BSR set to: 0
   744  00FDEC  39                 	db	57	;'9'
   745  00FDED  56                 	db	86	;'V'
   746  00FDEE  20                 	db	32
   747  00FDEF  53                 	db	83	;'S'
   748  00FDF0  6F                 	db	111	;'o'
   749  00FDF1  72                 	db	114	;'r'
   750  00FDF2  74                 	db	116	;'t'
   751  00FDF3  65                 	db	101	;'e'
   752  00FDF4  64                 	db	100	;'d'
   753  00FDF5  3A                 	db	58	;':'
   754  00FDF6  20                 	db	32
   755  00FDF7  20                 	db	32
   756  00FDF8  20                 	db	32
   757  00FDF9  20                 	db	32
   758  00FDFA  20                 	db	32
   759  00FDFB  20                 	db	32
   760  00FDFC  20                 	db	32
   761  00FDFD  20                 	db	32
   762  00FDFE  20                 	db	32
   763  00FDFF  20                 	db	32
   764  00FE00  00                 	db	0
   765  00FE01                     STR_22:
   766                           
   767                           ; BSR set to: 0
   768  00FE01  25                 	db	37
   769  00FE02  75                 	db	117	;'u'
   770  00FE03  20                 	db	32
   771  00FE04  73                 	db	115	;'s'
   772  00FE05  65                 	db	101	;'e'
   773  00FE06  63                 	db	99	;'c'
   774  00FE07  6F                 	db	111	;'o'
   775  00FE08  6E                 	db	110	;'n'
   776  00FE09  64                 	db	100	;'d'
   777  00FE0A  73                 	db	115	;'s'
   778  00FE0B  20                 	db	32
   779  00FE0C  20                 	db	32
   780  00FE0D  20                 	db	32
   781  00FE0E  20                 	db	32
   782  00FE0F  20                 	db	32
   783  00FE10  20                 	db	32
   784  00FE11  20                 	db	32
   785  00FE12  20                 	db	32
   786  00FE13  20                 	db	32
   787  00FE14  20                 	db	32
   788  00FE15  00                 	db	0
   789  00FE16                     STR_11:
   790                           
   791                           ; BSR set to: 0
   792  00FE16  39                 	db	57	;'9'
   793  00FE17  53                 	db	83	;'S'
   794  00FE18  65                 	db	101	;'e'
   795  00FE19  72                 	db	114	;'r'
   796  00FE1A  76                 	db	118	;'v'
   797  00FE1B  6F                 	db	111	;'o'
   798  00FE1C  53                 	db	83	;'S'
   799  00FE1D  74                 	db	116	;'t'
   800  00FE1E  61                 	db	97	;'a'
   801  00FE1F  79                 	db	121	;'y'
   802  00FE20  73                 	db	115	;'s'
   803  00FE21  20                 	db	32
   804  00FE22  20                 	db	32
   805  00FE23  20                 	db	32
   806  00FE24  20                 	db	32
   807  00FE25  20                 	db	32
   808  00FE26  20                 	db	32
   809  00FE27  20                 	db	32
   810  00FE28  20                 	db	32
   811  00FE29  20                 	db	32
   812  00FE2A  00                 	db	0
   813  00FE2B                     STR_8:
   814                           
   815                           ; BSR set to: 0
   816  00FE2B  43                 	db	67	;'C'
   817  00FE2C  53                 	db	83	;'S'
   818  00FE2D  65                 	db	101	;'e'
   819  00FE2E  72                 	db	114	;'r'
   820  00FE2F  76                 	db	118	;'v'
   821  00FE30  6F                 	db	111	;'o'
   822  00FE31  53                 	db	83	;'S'
   823  00FE32  74                 	db	116	;'t'
   824  00FE33  61                 	db	97	;'a'
   825  00FE34  79                 	db	121	;'y'
   826  00FE35  73                 	db	115	;'s'
   827  00FE36  20                 	db	32
   828  00FE37  20                 	db	32
   829  00FE38  20                 	db	32
   830  00FE39  20                 	db	32
   831  00FE3A  20                 	db	32
   832  00FE3B  20                 	db	32
   833  00FE3C  20                 	db	32
   834  00FE3D  20                 	db	32
   835  00FE3E  20                 	db	32
   836  00FE3F  00                 	db	0
   837  00FE40                     STR_3:
   838                           
   839                           ; BSR set to: 0
   840  00FE40  41                 	db	65	;'A'
   841  00FE41  41                 	db	65	;'A'
   842  00FE42  53                 	db	83	;'S'
   843  00FE43  65                 	db	101	;'e'
   844  00FE44  72                 	db	114	;'r'
   845  00FE45  76                 	db	118	;'v'
   846  00FE46  6F                 	db	111	;'o'
   847  00FE47  4C                 	db	76	;'L'
   848  00FE48  65                 	db	101	;'e'
   849  00FE49  66                 	db	102	;'f'
   850  00FE4A  74                 	db	116	;'t'
   851  00FE4B  20                 	db	32
   852  00FE4C  20                 	db	32
   853  00FE4D  20                 	db	32
   854  00FE4E  20                 	db	32
   855  00FE4F  20                 	db	32
   856  00FE50  20                 	db	32
   857  00FE51  20                 	db	32
   858  00FE52  20                 	db	32
   859  00FE53  20                 	db	32
   860  00FE54  00                 	db	0
   861  00FE55                     STR_10:
   862                           
   863                           ; BSR set to: 0
   864  00FE55  39                 	db	57	;'9'
   865  00FE56  53                 	db	83	;'S'
   866  00FE57  65                 	db	101	;'e'
   867  00FE58  72                 	db	114	;'r'
   868  00FE59  76                 	db	118	;'v'
   869  00FE5A  6F                 	db	111	;'o'
   870  00FE5B  52                 	db	82	;'R'
   871  00FE5C  69                 	db	105	;'i'
   872  00FE5D  67                 	db	103	;'g'
   873  00FE5E  68                 	db	104	;'h'
   874  00FE5F  74                 	db	116	;'t'
   875  00FE60  20                 	db	32
   876  00FE61  20                 	db	32
   877  00FE62  20                 	db	32
   878  00FE63  20                 	db	32
   879  00FE64  20                 	db	32
   880  00FE65  20                 	db	32
   881  00FE66  20                 	db	32
   882  00FE67  20                 	db	32
   883  00FE68  20                 	db	32
   884  00FE69  00                 	db	0
   885  00FE6A                     STR_7:
   886                           
   887                           ; BSR set to: 0
   888  00FE6A  43                 	db	67	;'C'
   889  00FE6B  53                 	db	83	;'S'
   890  00FE6C  65                 	db	101	;'e'
   891  00FE6D  72                 	db	114	;'r'
   892  00FE6E  76                 	db	118	;'v'
   893  00FE6F  6F                 	db	111	;'o'
   894  00FE70  52                 	db	82	;'R'
   895  00FE71  69                 	db	105	;'i'
   896  00FE72  67                 	db	103	;'g'
   897  00FE73  68                 	db	104	;'h'
   898  00FE74  74                 	db	116	;'t'
   899  00FE75  20                 	db	32
   900  00FE76  20                 	db	32
   901  00FE77  20                 	db	32
   902  00FE78  20                 	db	32
   903  00FE79  20                 	db	32
   904  00FE7A  20                 	db	32
   905  00FE7B  20                 	db	32
   906  00FE7C  20                 	db	32
   907  00FE7D  20                 	db	32
   908  00FE7E  00                 	db	0
   909  00FE7F                     STR_13:
   910                           
   911                           ; BSR set to: 0
   912  00FE7F  6E                 	db	110	;'n'
   913  00FE80  6F                 	db	111	;'o'
   914  00FE81  77                 	db	119	;'w'
   915  00FE82  20                 	db	32
   916  00FE83  25                 	db	37
   917  00FE84  30                 	db	48	;'0'
   918  00FE85  32                 	db	50	;'2'
   919  00FE86  78                 	db	120	;'x'
   920  00FE87  3A                 	db	58	;':'
   921  00FE88  25                 	db	37
   922  00FE89  30                 	db	48	;'0'
   923  00FE8A  32                 	db	50	;'2'
   924  00FE8B  78                 	db	120	;'x'
   925  00FE8C  20                 	db	32
   926  00FE8D  20                 	db	32
   927  00FE8E  20                 	db	32
   928  00FE8F  20                 	db	32
   929  00FE90  20                 	db	32
   930  00FE91  20                 	db	32
   931  00FE92  20                 	db	32
   932  00FE93  00                 	db	0
   933  00FE94                     STR_12:
   934                           
   935                           ; BSR set to: 0
   936  00FE94  73                 	db	115	;'s'
   937  00FE95  74                 	db	116	;'t'
   938  00FE96  61                 	db	97	;'a'
   939  00FE97  72                 	db	114	;'r'
   940  00FE98  74                 	db	116	;'t'
   941  00FE99  20                 	db	32
   942  00FE9A  25                 	db	37
   943  00FE9B  30                 	db	48	;'0'
   944  00FE9C  32                 	db	50	;'2'
   945  00FE9D  78                 	db	120	;'x'
   946  00FE9E  3A                 	db	58	;':'
   947  00FE9F  25                 	db	37
   948  00FEA0  30                 	db	48	;'0'
   949  00FEA1  32                 	db	50	;'2'
   950  00FEA2  78                 	db	120	;'x'
   951  00FEA3  20                 	db	32
   952  00FEA4  20                 	db	32
   953  00FEA5  20                 	db	32
   954  00FEA6  20                 	db	32
   955  00FEA7  20                 	db	32
   956  00FEA8  00                 	db	0
   957  00FEA9                     STR_35:
   958                           
   959                           ; BSR set to: 0
   960  00FEA9  45                 	db	69	;'E'
   961  00FEAA  6D                 	db	109	;'m'
   962  00FEAB  65                 	db	101	;'e'
   963  00FEAC  72                 	db	114	;'r'
   964  00FEAD  67                 	db	103	;'g'
   965  00FEAE  65                 	db	101	;'e'
   966  00FEAF  6E                 	db	110	;'n'
   967  00FEB0  63                 	db	99	;'c'
   968  00FEB1  79                 	db	121	;'y'
   969  00FEB2  20                 	db	32
   970  00FEB3  20                 	db	32
   971  00FEB4  20                 	db	32
   972  00FEB5  20                 	db	32
   973  00FEB6  20                 	db	32
   974  00FEB7  20                 	db	32
   975  00FEB8  20                 	db	32
   976  00FEB9  20                 	db	32
   977  00FEBA  20                 	db	32
   978  00FEBB  20                 	db	32
   979  00FEBC  00                 	db	0
   980  00FEBD                     STR_34:
   981                           
   982                           ; BSR set to: 0
   983  00FEBD  6D                 	db	109	;'m'
   984  00FEBE  6F                 	db	111	;'o'
   985  00FEBF  76                 	db	118	;'v'
   986  00FEC0  65                 	db	101	;'e'
   987  00FEC1  20                 	db	32
   988  00FEC2  63                 	db	99	;'c'
   989  00FEC3  63                 	db	99	;'c'
   990  00FEC4  6C                 	db	108	;'l'
   991  00FEC5  6F                 	db	111	;'o'
   992  00FEC6  63                 	db	99	;'c'
   993  00FEC7  6B                 	db	107	;'k'
   994  00FEC8  77                 	db	119	;'w'
   995  00FEC9  69                 	db	105	;'i'
   996  00FECA  73                 	db	115	;'s'
   997  00FECB  65                 	db	101	;'e'
   998  00FECC  20                 	db	32
   999  00FECD  20                 	db	32
  1000  00FECE  20                 	db	32
  1001  00FECF  20                 	db	32
  1002  00FED0  00                 	db	0
  1003  00FED1                     STR_27:
  1004                           
  1005                           ; BSR set to: 0
  1006  00FED1  43                 	db	67	;'C'
  1007  00FED2  20                 	db	32
  1008  00FED3  53                 	db	83	;'S'
  1009  00FED4  6F                 	db	111	;'o'
  1010  00FED5  72                 	db	114	;'r'
  1011  00FED6  74                 	db	116	;'t'
  1012  00FED7  65                 	db	101	;'e'
  1013  00FED8  64                 	db	100	;'d'
  1014  00FED9  3A                 	db	58	;':'
  1015  00FEDA  20                 	db	32
  1016  00FEDB  20                 	db	32
  1017  00FEDC  20                 	db	32
  1018  00FEDD  20                 	db	32
  1019  00FEDE  20                 	db	32
  1020  00FEDF  20                 	db	32
  1021  00FEE0  20                 	db	32
  1022  00FEE1  20                 	db	32
  1023  00FEE2  20                 	db	32
  1024  00FEE3  20                 	db	32
  1025  00FEE4  00                 	db	0
  1026  00FEE5                     STR_9:
  1027                           
  1028                           ; BSR set to: 0
  1029  00FEE5  39                 	db	57	;'9'
  1030  00FEE6  53                 	db	83	;'S'
  1031  00FEE7  65                 	db	101	;'e'
  1032  00FEE8  72                 	db	114	;'r'
  1033  00FEE9  76                 	db	118	;'v'
  1034  00FEEA  6F                 	db	111	;'o'
  1035  00FEEB  4C                 	db	76	;'L'
  1036  00FEEC  65                 	db	101	;'e'
  1037  00FEED  66                 	db	102	;'f'
  1038  00FEEE  74                 	db	116	;'t'
  1039  00FEEF  20                 	db	32
  1040  00FEF0  20                 	db	32
  1041  00FEF1  20                 	db	32
  1042  00FEF2  20                 	db	32
  1043  00FEF3  20                 	db	32
  1044  00FEF4  20                 	db	32
  1045  00FEF5  20                 	db	32
  1046  00FEF6  20                 	db	32
  1047  00FEF7  20                 	db	32
  1048  00FEF8  00                 	db	0
  1049  00FEF9                     STR_6:
  1050                           
  1051                           ; BSR set to: 0
  1052  00FEF9  43                 	db	67	;'C'
  1053  00FEFA  53                 	db	83	;'S'
  1054  00FEFB  65                 	db	101	;'e'
  1055  00FEFC  72                 	db	114	;'r'
  1056  00FEFD  76                 	db	118	;'v'
  1057  00FEFE  6F                 	db	111	;'o'
  1058  00FEFF  4C                 	db	76	;'L'
  1059  00FF00  65                 	db	101	;'e'
  1060  00FF01  66                 	db	102	;'f'
  1061  00FF02  74                 	db	116	;'t'
  1062  00FF03  20                 	db	32
  1063  00FF04  20                 	db	32
  1064  00FF05  20                 	db	32
  1065  00FF06  20                 	db	32
  1066  00FF07  20                 	db	32
  1067  00FF08  20                 	db	32
  1068  00FF09  20                 	db	32
  1069  00FF0A  20                 	db	32
  1070  00FF0B  20                 	db	32
  1071  00FF0C  00                 	db	0
  1072  00FF0D                     STR_18:
  1073                           
  1074                           ; BSR set to: 0
  1075  00FF0D  57                 	db	87	;'W'
  1076  00FF0E  65                 	db	101	;'e'
  1077  00FF0F  6C                 	db	108	;'l'
  1078  00FF10  63                 	db	99	;'c'
  1079  00FF11  6F                 	db	111	;'o'
  1080  00FF12  6D                 	db	109	;'m'
  1081  00FF13  65                 	db	101	;'e'
  1082  00FF14  21                 	db	33
  1083  00FF15  20                 	db	32
  1084  00FF16  20                 	db	32
  1085  00FF17  20                 	db	32
  1086  00FF18  20                 	db	32
  1087  00FF19  20                 	db	32
  1088  00FF1A  20                 	db	32
  1089  00FF1B  20                 	db	32
  1090  00FF1C  20                 	db	32
  1091  00FF1D  20                 	db	32
  1092  00FF1E  20                 	db	32
  1093  00FF1F  00                 	db	0
  1094  00FF20                     STR_37:
  1095                           
  1096                           ; BSR set to: 0
  1097  00FF20  25                 	db	37
  1098  00FF21  66                 	db	102	;'f'
  1099  00FF22  30                 	db	48	;'0'
  1100  00FF23  32                 	db	50	;'2'
  1101  00FF24  20                 	db	32
  1102  00FF25  72                 	db	114	;'r'
  1103  00FF26  65                 	db	101	;'e'
  1104  00FF27  63                 	db	99	;'c'
  1105  00FF28  65                 	db	101	;'e'
  1106  00FF29  69                 	db	105	;'i'
  1107  00FF2A  76                 	db	118	;'v'
  1108  00FF2B  65                 	db	101	;'e'
  1109  00FF2C  64                 	db	100	;'d'
  1110  00FF2D  20                 	db	32
  1111  00FF2E  20                 	db	32
  1112  00FF2F  20                 	db	32
  1113  00FF30  20                 	db	32
  1114  00FF31  00                 	db	0
  1115  00FF32                     STR_36:
  1116                           
  1117                           ; BSR set to: 0
  1118  00FF32  53                 	db	83	;'S'
  1119  00FF33  74                 	db	116	;'t'
  1120  00FF34  6F                 	db	111	;'o'
  1121  00FF35  70                 	db	112	;'p'
  1122  00FF36  70                 	db	112	;'p'
  1123  00FF37  65                 	db	101	;'e'
  1124  00FF38  64                 	db	100	;'d'
  1125  00FF39  20                 	db	32
  1126  00FF3A  20                 	db	32
  1127  00FF3B  20                 	db	32
  1128  00FF3C  20                 	db	32
  1129  00FF3D  20                 	db	32
  1130  00FF3E  20                 	db	32
  1131  00FF3F  20                 	db	32
  1132  00FF40  20                 	db	32
  1133  00FF41  20                 	db	32
  1134  00FF42  20                 	db	32
  1135  00FF43  00                 	db	0
  1136  00FF44                     STR_52:
  1137                           
  1138                           ; BSR set to: 0
  1139  00FF44  30                 	db	48	;'0'
  1140  00FF45  31                 	db	49	;'1'
  1141  00FF46  32                 	db	50	;'2'
  1142  00FF47  33                 	db	51	;'3'
  1143  00FF48  34                 	db	52	;'4'
  1144  00FF49  35                 	db	53	;'5'
  1145  00FF4A  36                 	db	54	;'6'
  1146  00FF4B  37                 	db	55	;'7'
  1147  00FF4C  38                 	db	56	;'8'
  1148  00FF4D  39                 	db	57	;'9'
  1149  00FF4E  61                 	db	97	;'a'
  1150  00FF4F  62                 	db	98	;'b'
  1151  00FF50  63                 	db	99	;'c'
  1152  00FF51  64                 	db	100	;'d'
  1153  00FF52  65                 	db	101	;'e'
  1154  00FF53  66                 	db	102	;'f'
  1155  00FF54  00                 	db	0
  1156  00FF55                     STR_33:
  1157                           
  1158                           ; BSR set to: 0
  1159  00FF55  6D                 	db	109	;'m'
  1160  00FF56  6F                 	db	111	;'o'
  1161  00FF57  76                 	db	118	;'v'
  1162  00FF58  65                 	db	101	;'e'
  1163  00FF59  20                 	db	32
  1164  00FF5A  63                 	db	99	;'c'
  1165  00FF5B  6C                 	db	108	;'l'
  1166  00FF5C  6F                 	db	111	;'o'
  1167  00FF5D  63                 	db	99	;'c'
  1168  00FF5E  6B                 	db	107	;'k'
  1169  00FF5F  77                 	db	119	;'w'
  1170  00FF60  69                 	db	105	;'i'
  1171  00FF61  73                 	db	115	;'s'
  1172  00FF62  65                 	db	101	;'e'
  1173  00FF63  20                 	db	32
  1174  00FF64  20                 	db	32
  1175  00FF65  00                 	db	0
  1176  00FF66                     STR_14:
  1177                           
  1178                           ; BSR set to: 0
  1179  00FF66  50                 	db	80	;'P'
  1180  00FF67  65                 	db	101	;'e'
  1181  00FF68  72                 	db	114	;'r'
  1182  00FF69  69                 	db	105	;'i'
  1183  00FF6A  6F                 	db	111	;'o'
  1184  00FF6B  64                 	db	100	;'d'
  1185  00FF6C  3A                 	db	58	;':'
  1186  00FF6D  20                 	db	32
  1187  00FF6E  25                 	db	37
  1188  00FF6F  75                 	db	117	;'u'
  1189  00FF70  20                 	db	32
  1190  00FF71  20                 	db	32
  1191  00FF72  20                 	db	32
  1192  00FF73  20                 	db	32
  1193  00FF74  20                 	db	32
  1194  00FF75  20                 	db	32
  1195  00FF76  00                 	db	0
  1196  00FF77                     STR_41:
  1197                           
  1198                           ; BSR set to: 0
  1199  00FF77  6E                 	db	110	;'n'
  1200  00FF78  6F                 	db	111	;'o'
  1201  00FF79  20                 	db	32
  1202  00FF7A  41                 	db	65	;'A'
  1203  00FF7B  41                 	db	65	;'A'
  1204  00FF7C  20                 	db	32
  1205  00FF7D  20                 	db	32
  1206  00FF7E  20                 	db	32
  1207  00FF7F  20                 	db	32
  1208  00FF80  20                 	db	32
  1209  00FF81  20                 	db	32
  1210  00FF82  20                 	db	32
  1211  00FF83  20                 	db	32
  1212  00FF84  20                 	db	32
  1213  00FF85  20                 	db	32
  1214  00FF86  00                 	db	0
  1215  00FF87                     STR_49:
  1216                           
  1217                           ; BSR set to: 0
  1218  00FF87  6E                 	db	110	;'n'
  1219  00FF88  6F                 	db	111	;'o'
  1220  00FF89  20                 	db	32
  1221  00FF8A  39                 	db	57	;'9'
  1222  00FF8B  56                 	db	86	;'V'
  1223  00FF8C  20                 	db	32
  1224  00FF8D  20                 	db	32
  1225  00FF8E  20                 	db	32
  1226  00FF8F  20                 	db	32
  1227  00FF90  20                 	db	32
  1228  00FF91  20                 	db	32
  1229  00FF92  20                 	db	32
  1230  00FF93  20                 	db	32
  1231  00FF94  20                 	db	32
  1232  00FF95  20                 	db	32
  1233  00FF96  00                 	db	0
  1234  00FF97                     STR_26:
  1235                           
  1236                           ; BSR set to: 0
  1237  00FF97  25                 	db	37
  1238  00FF98  75                 	db	117	;'u'
  1239  00FF99  20                 	db	32
  1240  00FF9A  20                 	db	32
  1241  00FF9B  20                 	db	32
  1242  00FF9C  20                 	db	32
  1243  00FF9D  20                 	db	32
  1244  00FF9E  20                 	db	32
  1245  00FF9F  20                 	db	32
  1246  00FFA0  20                 	db	32
  1247  00FFA1  20                 	db	32
  1248  00FFA2  20                 	db	32
  1249  00FFA3  20                 	db	32
  1250  00FFA4  20                 	db	32
  1251  00FFA5  20                 	db	32
  1252  00FFA6  00                 	db	0
  1253  00FFA7                     STR_45:
  1254                           
  1255                           ; BSR set to: 0
  1256  00FFA7  6E                 	db	110	;'n'
  1257  00FFA8  6F                 	db	111	;'o'
  1258  00FFA9  20                 	db	32
  1259  00FFAA  43                 	db	67	;'C'
  1260  00FFAB  20                 	db	32
  1261  00FFAC  20                 	db	32
  1262  00FFAD  20                 	db	32
  1263  00FFAE  20                 	db	32
  1264  00FFAF  20                 	db	32
  1265  00FFB0  20                 	db	32
  1266  00FFB1  20                 	db	32
  1267  00FFB2  20                 	db	32
  1268  00FFB3  20                 	db	32
  1269  00FFB4  20                 	db	32
  1270  00FFB5  00                 	db	0
  1271  00FFB6                     STR_38:
  1272                           
  1273                           ; BSR set to: 0
  1274  00FFB6  41                 	db	65	;'A'
  1275  00FFB7  41                 	db	65	;'A'
  1276  00FFB8  3A                 	db	58	;':'
  1277  00FFB9  20                 	db	32
  1278  00FFBA  20                 	db	32
  1279  00FFBB  20                 	db	32
  1280  00FFBC  20                 	db	32
  1281  00FFBD  20                 	db	32
  1282  00FFBE  20                 	db	32
  1283  00FFBF  20                 	db	32
  1284  00FFC0  20                 	db	32
  1285  00FFC1  20                 	db	32
  1286  00FFC2  20                 	db	32
  1287  00FFC3  00                 	db	0
  1288  00FFC4                     STR_46:
  1289                           
  1290                           ; BSR set to: 0
  1291  00FFC4  39                 	db	57	;'9'
  1292  00FFC5  56                 	db	86	;'V'
  1293  00FFC6  3A                 	db	58	;':'
  1294  00FFC7  20                 	db	32
  1295  00FFC8  20                 	db	32
  1296  00FFC9  20                 	db	32
  1297  00FFCA  20                 	db	32
  1298  00FFCB  20                 	db	32
  1299  00FFCC  20                 	db	32
  1300  00FFCD  20                 	db	32
  1301  00FFCE  20                 	db	32
  1302  00FFCF  20                 	db	32
  1303  00FFD0  20                 	db	32
  1304  00FFD1  00                 	db	0
  1305  00FFD2                     STR_42:
  1306                           
  1307                           ; BSR set to: 0
  1308  00FFD2  43                 	db	67	;'C'
  1309  00FFD3  3A                 	db	58	;':'
  1310  00FFD4  20                 	db	32
  1311  00FFD5  20                 	db	32
  1312  00FFD6  20                 	db	32
  1313  00FFD7  20                 	db	32
  1314  00FFD8  20                 	db	32
  1315  00FFD9  20                 	db	32
  1316  00FFDA  20                 	db	32
  1317  00FFDB  20                 	db	32
  1318  00FFDC  20                 	db	32
  1319  00FFDD  20                 	db	32
  1320  00FFDE  00                 	db	0
  1321  00FFDF                     STR_51:
  1322                           
  1323                           ; BSR set to: 0
  1324  00FFDF  72                 	db	114	;'r'
  1325  00FFE0  75                 	db	117	;'u'
  1326  00FFE1  6E                 	db	110	;'n'
  1327  00FFE2  73                 	db	115	;'s'
  1328  00FFE3  20                 	db	32
  1329  00FFE4  62                 	db	98	;'b'
  1330  00FFE5  65                 	db	101	;'e'
  1331  00FFE6  66                 	db	102	;'f'
  1332  00FFE7  6F                 	db	111	;'o'
  1333  00FFE8  72                 	db	114	;'r'
  1334  00FFE9  65                 	db	101	;'e'
  1335  00FFEA  00                 	db	0
  1336  00FFEB                     STR_50:
  1337                           
  1338                           ; BSR set to: 0
  1339  00FFEB  73                 	db	115	;'s'
  1340  00FFEC  68                 	db	104	;'h'
  1341  00FFED  6F                 	db	111	;'o'
  1342  00FFEE  77                 	db	119	;'w'
  1343  00FFEF  69                 	db	105	;'i'
  1344  00FFF0  6E                 	db	110	;'n'
  1345  00FFF1  67                 	db	103	;'g'
  1346  00FFF2  20                 	db	32
  1347  00FFF3  25                 	db	37
  1348  00FFF4  75                 	db	117	;'u'
  1349  00FFF5  00                 	db	0
  1350  00FFF6                     
  1351                           ; BSR set to: 0
  1352  00FFF6  4D                 	db	77	;'M'
  1353  00FFF7  61                 	db	97	;'a'
  1354  00FFF8  69                 	db	105	;'i'
  1355  00FFF9  6E                 	db	110	;'n'
  1356  00FFFA  6C                 	db	108	;'l'
  1357  00FFFB  6F                 	db	111	;'o'
  1358  00FFFC  6F                 	db	111	;'o'
  1359  00FFFD  70                 	db	112	;'p'
  1360  00FFFE  00                 	db	0
  1361  0000                     
  1362                           ; #config settings
  1363  00FFFF  00                 	db	0	; dummy byte at the end
  1364  0000                     
  1365                           	psect	cinit
  1366  005088                     __pcinit:
  1367                           	opt stack 0
  1368  005088                     start_initialization:
  1369                           	opt stack 0
  1370  005088                     __initialization:
  1371                           	opt stack 0
  1372                           
  1373                           ; Clear objects allocated to BANK0 (42 bytes)
  1374  005088  EE00  F0B6         	lfsr	0,__pbssBANK0
  1375  00508C  0E2A               	movlw	42
  1376  00508E                     clear_0:
  1377  00508E  6AEE               	clrf	postinc0,c
  1378  005090  06E8               	decf	wreg,f,c
  1379  005092  E1FD               	bnz	clear_0
  1380  005094                     end_of_initialization:
  1381                           	opt stack 0
  1382  005094                     __end_of__initialization:
  1383                           	opt stack 0
  1384  005094  907F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1385  005096  927F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1386  005098  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1387  00509A  6EF8               	movwf	tblptru,c
  1388  00509C  0100               	movlb	0
  1389  00509E  EF57  F026         	goto	_main	;jump to C main() function
  1390                           tblptru	equ	0xFF8
  1391                           postinc0	equ	0xFEE
  1392                           wreg	equ	0xFE8
  1393                           
  1394                           	psect	bssBANK0
  1395  0000B6                     __pbssBANK0:
  1396                           	opt stack 0
  1397  0000B6                     simulate@F3115:
  1398                           	opt stack 0
  1399  0000B6                     	ds	6
  1400  0000BC                     simulate@F3113:
  1401                           	opt stack 0
  1402  0000BC                     	ds	6
  1403  0000C2                     PermLog@F3084:
  1404                           	opt stack 0
  1405  0000C2                     	ds	4
  1406  0000C6                     testADC@F3120:
  1407                           	opt stack 0
  1408  0000C6                     	ds	4
  1409  0000CA                     simulate@F3106:
  1410                           	opt stack 0
  1411  0000CA                     	ds	4
  1412  0000CE                     simulate@F3104:
  1413                           	opt stack 0
  1414  0000CE                     	ds	4
  1415  0000D2                     simulate@F3102:
  1416                           	opt stack 0
  1417  0000D2                     	ds	4
  1418  0000D6                     _mode:
  1419                           	opt stack 0
  1420  0000D6                     	ds	2
  1421  0000D8                     _Latest:
  1422                           	opt stack 0
  1423  0000D8                     	ds	1
  1424  0000D9                     _time:
  1425                           	opt stack 0
  1426  0000D9                     	ds	7
  1427                           tblptru	equ	0xFF8
  1428                           postinc0	equ	0xFEE
  1429                           wreg	equ	0xFE8
  1430                           
  1431                           	psect	cstackBANK1
  1432  000100                     __pcstackBANK1:
  1433                           	opt stack 0
  1434  000100                     ??_isdigit:
  1435  000100                     ??_I2C_Master_Wait:
  1436  000100                     ?___awmod:
  1437                           	opt stack 0
  1438  000100                     ?___ftpack:
  1439                           	opt stack 0
  1440  000100                     ?___ftneg:
  1441                           	opt stack 0
  1442  000100                     ?__tdiv_to_l_:
  1443                           	opt stack 0
  1444  000100                     ?__div_to_l_:
  1445                           	opt stack 0
  1446  000100                     ?___lldiv:
  1447                           	opt stack 0
  1448  000100                     lcdNibble@temp:
  1449                           	opt stack 0
  1450  000100                     ReadEE@address:
  1451                           	opt stack 0
  1452  000100                     ___awmod@dividend:
  1453                           	opt stack 0
  1454  000100                     __div_to_l_@f1:
  1455                           	opt stack 0
  1456  000100                     ___ftpack@arg:
  1457                           	opt stack 0
  1458  000100                     __tdiv_to_l_@f1:
  1459                           	opt stack 0
  1460  000100                     ___ftge@ff1:
  1461                           	opt stack 0
  1462  000100                     ___ftneg@f1:
  1463                           	opt stack 0
  1464  000100                     ___lldiv@dividend:
  1465                           	opt stack 0
  1466                           
  1467                           ; 4 bytes @ 0x0
  1468  000100                     	ds	1
  1469  000101                     lcdNibble@data:
  1470                           	opt stack 0
  1471  000101                     I2C_Master_Read@a:
  1472                           	opt stack 0
  1473  000101                     _isdigit$1089:
  1474                           	opt stack 0
  1475  000101                     I2C_Master_Write@d:
  1476                           	opt stack 0
  1477                           
  1478                           ; 2 bytes @ 0x1
  1479  000101                     	ds	1
  1480  000102                     lcdInst@data:
  1481                           	opt stack 0
  1482  000102                     putch@data:
  1483                           	opt stack 0
  1484  000102                     I2C_Master_Read@temp:
  1485                           	opt stack 0
  1486  000102                     isdigit@c:
  1487                           	opt stack 0
  1488  000102                     ___awmod@divisor:
  1489                           	opt stack 0
  1490                           
  1491                           ; 2 bytes @ 0x2
  1492  000102                     	ds	1
  1493  000103                     ??_initLCD:
  1494  000103                     ___ftpack@exp:
  1495                           	opt stack 0
  1496  000103                     getTime@time:
  1497                           	opt stack 0
  1498  000103                     __div_to_l_@f2:
  1499                           	opt stack 0
  1500  000103                     __tdiv_to_l_@f2:
  1501                           	opt stack 0
  1502  000103                     ___ftge@ff2:
  1503                           	opt stack 0
  1504                           
  1505                           ; 3 bytes @ 0x3
  1506  000103                     	ds	1
  1507  000104                     ___awmod@counter:
  1508                           	opt stack 0
  1509  000104                     ___ftpack@sign:
  1510                           	opt stack 0
  1511  000104                     ___lldiv@divisor:
  1512                           	opt stack 0
  1513                           
  1514                           ; 4 bytes @ 0x4
  1515  000104                     	ds	1
  1516  000105                     ??___ftpack:
  1517  000105                     getTime@i:
  1518                           	opt stack 0
  1519  000105                     ___awmod@sign:
  1520                           	opt stack 0
  1521                           
  1522                           ; 1 bytes @ 0x5
  1523  000105                     	ds	1
  1524  000106                     ??__tdiv_to_l_:
  1525  000106                     ??___ftge:
  1526  000106                     ?___awdiv:
  1527                           	opt stack 0
  1528  000106                     ___awdiv@dividend:
  1529                           	opt stack 0
  1530  000106                     __div_to_l_@quot:
  1531                           	opt stack 0
  1532                           
  1533                           ; 4 bytes @ 0x6
  1534  000106                     	ds	2
  1535  000108                     ?___lltoft:
  1536                           	opt stack 0
  1537  000108                     ___awdiv@divisor:
  1538                           	opt stack 0
  1539  000108                     ___lldiv@quotient:
  1540                           	opt stack 0
  1541  000108                     ___lltoft@c:
  1542                           	opt stack 0
  1543                           
  1544                           ; 4 bytes @ 0x8
  1545  000108                     	ds	1
  1546  000109                     __tdiv_to_l_@quot:
  1547                           	opt stack 0
  1548                           
  1549                           ; 4 bytes @ 0x9
  1550  000109                     	ds	1
  1551  00010A                     ___awdiv@counter:
  1552                           	opt stack 0
  1553  00010A                     __div_to_l_@cntr:
  1554                           	opt stack 0
  1555                           
  1556                           ; 1 bytes @ 0xA
  1557  00010A                     	ds	1
  1558  00010B                     ___awdiv@sign:
  1559                           	opt stack 0
  1560  00010B                     __div_to_l_@exp1:
  1561                           	opt stack 0
  1562                           
  1563                           ; 1 bytes @ 0xB
  1564  00010B                     	ds	1
  1565  00010C                     ??___lltoft:
  1566  00010C                     ___lldiv@counter:
  1567                           	opt stack 0
  1568  00010C                     ___awdiv@quotient:
  1569                           	opt stack 0
  1570                           
  1571                           ; 2 bytes @ 0xC
  1572  00010C                     	ds	1
  1573  00010D                     ?___llmod:
  1574                           	opt stack 0
  1575  00010D                     __tdiv_to_l_@cntr:
  1576                           	opt stack 0
  1577  00010D                     I2C_Master_Init@c:
  1578                           	opt stack 0
  1579  00010D                     ___llmod@dividend:
  1580                           	opt stack 0
  1581                           
  1582                           ; 4 bytes @ 0xD
  1583  00010D                     	ds	1
  1584  00010E                     ?___wmul:
  1585                           	opt stack 0
  1586  00010E                     __tdiv_to_l_@exp1:
  1587                           	opt stack 0
  1588  00010E                     ___wmul@multiplier:
  1589                           	opt stack 0
  1590                           
  1591                           ; 2 bytes @ 0xE
  1592  00010E                     	ds	2
  1593  000110                     ___lltoft@exp:
  1594                           	opt stack 0
  1595  000110                     ___wmul@multiplicand:
  1596                           	opt stack 0
  1597                           
  1598                           ; 2 bytes @ 0x10
  1599  000110                     	ds	1
  1600  000111                     ??_I2C_Master_Init:
  1601  000111                     ___llmod@divisor:
  1602                           	opt stack 0
  1603                           
  1604                           ; 4 bytes @ 0x11
  1605  000111                     	ds	1
  1606  000112                     ___wmul@product:
  1607                           	opt stack 0
  1608                           
  1609                           ; 2 bytes @ 0x12
  1610  000112                     	ds	2
  1611  000114                     ?___ftmul:
  1612                           	opt stack 0
  1613  000114                     ___ftmul@f1:
  1614                           	opt stack 0
  1615                           
  1616                           ; 3 bytes @ 0x14
  1617  000114                     	ds	1
  1618  000115                     ??_initialize:
  1619  000115                     ___llmod@counter:
  1620                           	opt stack 0
  1621                           
  1622                           ; 1 bytes @ 0x15
  1623  000115                     	ds	2
  1624  000117                     ___ftmul@f2:
  1625                           	opt stack 0
  1626                           
  1627                           ; 3 bytes @ 0x17
  1628  000117                     	ds	3
  1629  00011A                     ??___ftmul:
  1630                           
  1631                           ; 1 bytes @ 0x1A
  1632  00011A                     	ds	3
  1633  00011D                     ___ftmul@exp:
  1634                           	opt stack 0
  1635                           
  1636                           ; 1 bytes @ 0x1D
  1637  00011D                     	ds	1
  1638  00011E                     ___ftmul@f3_as_product:
  1639                           	opt stack 0
  1640                           
  1641                           ; 3 bytes @ 0x1E
  1642  00011E                     	ds	3
  1643  000121                     ___ftmul@cntr:
  1644                           	opt stack 0
  1645                           
  1646                           ; 1 bytes @ 0x21
  1647  000121                     	ds	1
  1648  000122                     ___ftmul@sign:
  1649                           	opt stack 0
  1650                           
  1651                           ; 1 bytes @ 0x22
  1652  000122                     	ds	1
  1653  000123                     ?_fround:
  1654                           	opt stack 0
  1655  000123                     ?_scale:
  1656                           	opt stack 0
  1657                           
  1658                           ; 3 bytes @ 0x23
  1659  000123                     	ds	3
  1660  000126                     _fround$1448:
  1661                           	opt stack 0
  1662  000126                     _scale$1449:
  1663                           	opt stack 0
  1664                           
  1665                           ; 3 bytes @ 0x26
  1666  000126                     	ds	3
  1667  000129                     scale@scl:
  1668                           	opt stack 0
  1669  000129                     _fround$1447:
  1670                           	opt stack 0
  1671                           
  1672                           ; 3 bytes @ 0x29
  1673  000129                     	ds	1
  1674  00012A                     ?___fttol:
  1675                           	opt stack 0
  1676  00012A                     ___fttol@f1:
  1677                           	opt stack 0
  1678                           
  1679                           ; 3 bytes @ 0x2A
  1680  00012A                     	ds	2
  1681  00012C                     fround@prec:
  1682                           	opt stack 0
  1683                           
  1684                           ; 1 bytes @ 0x2C
  1685  00012C                     	ds	1
  1686  00012D                     ?___ftadd:
  1687                           	opt stack 0
  1688  00012D                     ___ftadd@f1:
  1689                           	opt stack 0
  1690                           
  1691                           ; 3 bytes @ 0x2D
  1692  00012D                     	ds	1
  1693  00012E                     ??___fttol:
  1694                           
  1695                           ; 1 bytes @ 0x2E
  1696  00012E                     	ds	2
  1697  000130                     ___ftadd@f2:
  1698                           	opt stack 0
  1699                           
  1700                           ; 3 bytes @ 0x30
  1701  000130                     	ds	3
  1702  000133                     ??___ftadd:
  1703  000133                     ___fttol@sign1:
  1704                           	opt stack 0
  1705                           
  1706                           ; 1 bytes @ 0x33
  1707  000133                     	ds	1
  1708  000134                     ___fttol@lval:
  1709                           	opt stack 0
  1710                           
  1711                           ; 4 bytes @ 0x34
  1712  000134                     	ds	2
  1713  000136                     ___ftadd@sign:
  1714                           	opt stack 0
  1715                           
  1716                           ; 1 bytes @ 0x36
  1717  000136                     	ds	1
  1718  000137                     ___ftadd@exp2:
  1719                           	opt stack 0
  1720                           
  1721                           ; 1 bytes @ 0x37
  1722  000137                     	ds	1
  1723  000138                     ___ftadd@exp1:
  1724                           	opt stack 0
  1725  000138                     ___fttol@exp1:
  1726                           	opt stack 0
  1727                           
  1728                           ; 1 bytes @ 0x38
  1729  000138                     	ds	1
  1730  000139                     ?___ftsub:
  1731                           	opt stack 0
  1732  000139                     ___ftsub@f1:
  1733                           	opt stack 0
  1734                           
  1735                           ; 3 bytes @ 0x39
  1736  000139                     	ds	3
  1737  00013C                     ___ftsub@f2:
  1738                           	opt stack 0
  1739                           
  1740                           ; 3 bytes @ 0x3C
  1741  00013C                     	ds	3
  1742  00013F                     ?_printf:
  1743                           	opt stack 0
  1744  00013F                     printf@f:
  1745                           	opt stack 0
  1746                           
  1747                           ; 2 bytes @ 0x3F
  1748  00013F                     	ds	8
  1749  000147                     ??_printf:
  1750                           
  1751                           ; 1 bytes @ 0x47
  1752  000147                     	ds	6
  1753  00014D                     _printf$1450:
  1754                           	opt stack 0
  1755                           
  1756                           ; 3 bytes @ 0x4D
  1757  00014D                     	ds	3
  1758  000150                     printf@idx:
  1759                           	opt stack 0
  1760                           
  1761                           ; 1 bytes @ 0x50
  1762  000150                     	ds	1
  1763  000151                     printf@cp:
  1764                           	opt stack 0
  1765                           
  1766                           ; 2 bytes @ 0x51
  1767  000151                     	ds	2
  1768  000153                     printf@ap:
  1769                           	opt stack 0
  1770                           
  1771                           ; 2 bytes @ 0x53
  1772  000153                     	ds	2
  1773  000155                     printf@len:
  1774                           	opt stack 0
  1775                           
  1776                           ; 2 bytes @ 0x55
  1777  000155                     	ds	2
  1778  000157                     printf@val:
  1779                           	opt stack 0
  1780                           
  1781                           ; 4 bytes @ 0x57
  1782  000157                     	ds	4
  1783  00015B                     printf@prec:
  1784                           	opt stack 0
  1785                           
  1786                           ; 2 bytes @ 0x5B
  1787  00015B                     	ds	2
  1788  00015D                     printf@tmpval:
  1789                           	opt stack 0
  1790                           
  1791                           ; 4 bytes @ 0x5D
  1792  00015D                     	ds	4
  1793  000161                     printf@exp:
  1794                           	opt stack 0
  1795                           
  1796                           ; 2 bytes @ 0x61
  1797  000161                     	ds	2
  1798  000163                     printf@flag:
  1799                           	opt stack 0
  1800                           
  1801                           ; 2 bytes @ 0x63
  1802  000163                     	ds	2
  1803  000165                     printf@fval:
  1804                           	opt stack 0
  1805                           
  1806                           ; 3 bytes @ 0x65
  1807  000165                     	ds	3
  1808  000168                     printf@width:
  1809                           	opt stack 0
  1810                           
  1811                           ; 2 bytes @ 0x68
  1812  000168                     	ds	2
  1813  00016A                     printf@c:
  1814                           	opt stack 0
  1815                           
  1816                           ; 1 bytes @ 0x6A
  1817  00016A                     	ds	1
  1818  00016B                     ??_showRTC:
  1819                           
  1820                           ; 1 bytes @ 0x6B
  1821  00016B                     	ds	2
  1822  00016D                     
  1823                           ; 2 bytes @ 0x6D
  1824  00016D                     	ds	2
  1825  00016F                     
  1826                           ; 3 bytes @ 0x6F
  1827  00016F                     	ds	3
  1828  000172                     ??_main:
  1829                           
  1830                           ; 1 bytes @ 0x72
  1831  000172                     	ds	2
  1832                           tblptru	equ	0xFF8
  1833                           postinc0	equ	0xFEE
  1834                           wreg	equ	0xFE8
  1835                           
  1836                           	psect	cstackBANK0
  1837  000080                     __pcstackBANK0:
  1838                           	opt stack 0
  1839  000080                     ??_PermLog:
  1840  000080                     ??_simulate:
  1841                           
  1842                           ; 1 bytes @ 0x0
  1843  000080                     	ds	2
  1844  000082                     _simulate$1664:
  1845                           	opt stack 0
  1846  000082                     PermLog@sorted:
  1847                           	opt stack 0
  1848                           
  1849                           ; 4 bytes @ 0x2
  1850  000082                     	ds	2
  1851  000084                     simulate@portCW:
  1852                           	opt stack 0
  1853                           
  1854                           ; 6 bytes @ 0x4
  1855  000084                     	ds	2
  1856  000086                     PermLog@backruns:
  1857                           	opt stack 0
  1858                           
  1859                           ; 1 bytes @ 0x6
  1860  000086                     	ds	1
  1861  000087                     PermLog@time:
  1862                           	opt stack 0
  1863                           
  1864                           ; 2 bytes @ 0x7
  1865  000087                     	ds	3
  1866  00008A                     simulate@portCCW:
  1867                           	opt stack 0
  1868                           
  1869                           ; 6 bytes @ 0xA
  1870  00008A                     	ds	6
  1871  000090                     simulate@stop:
  1872                           	opt stack 0
  1873                           
  1874                           ; 2 bytes @ 0x10
  1875  000090                     	ds	2
  1876  000092                     simulate@AA:
  1877                           	opt stack 0
  1878                           
  1879                           ; 2 bytes @ 0x12
  1880  000092                     	ds	2
  1881  000094                     simulate@C:
  1882                           	opt stack 0
  1883                           
  1884                           ; 2 bytes @ 0x14
  1885  000094                     	ds	2
  1886  000096                     simulate@V9:
  1887                           	opt stack 0
  1888                           
  1889                           ; 2 bytes @ 0x16
  1890  000096                     	ds	2
  1891  000098                     simulate@now:
  1892                           	opt stack 0
  1893                           
  1894                           ; 4 bytes @ 0x18
  1895  000098                     	ds	4
  1896  00009C                     simulate@start:
  1897                           	opt stack 0
  1898                           
  1899                           ; 4 bytes @ 0x1C
  1900  00009C                     	ds	4
  1901  0000A0                     simulate@sorted:
  1902                           	opt stack 0
  1903                           
  1904                           ; 4 bytes @ 0x20
  1905  0000A0                     	ds	4
  1906  0000A4                     simulate@period:
  1907                           	opt stack 0
  1908                           
  1909                           ; 2 bytes @ 0x24
  1910  0000A4                     	ds	2
  1911  0000A6                     ??_keypressed:
  1912                           
  1913                           ; 1 bytes @ 0x26
  1914  0000A6                     	ds	16
  1915                           tblptru	equ	0xFF8
  1916                           postinc0	equ	0xFEE
  1917                           wreg	equ	0xFE8
  1918                           
  1919                           	psect	cstackCOMRAM
  1920  000001                     __pcstackCOMRAM:
  1921                           	opt stack 0
  1922  000001                     ??i2_I2C_Master_Wait:
  1923  000001                     ??i2_isdigit:
  1924  000001                     ?_captureKeypad:
  1925                           	opt stack 0
  1926  000001                     ?_AD:
  1927                           	opt stack 0
  1928  000001                     ?i2___awmod:
  1929                           	opt stack 0
  1930  000001                     ?i2___ftpack:
  1931                           	opt stack 0
  1932  000001                     ?i2___ftneg:
  1933                           	opt stack 0
  1934  000001                     ?i2__div_to_l_:
  1935                           	opt stack 0
  1936  000001                     ?i2__tdiv_to_l_:
  1937                           	opt stack 0
  1938  000001                     ?i2___lldiv:
  1939                           	opt stack 0
  1940  000001                     back@runs:
  1941                           	opt stack 0
  1942  000001                     i2lcdNibble@temp:
  1943                           	opt stack 0
  1944  000001                     WriteEE@address:
  1945                           	opt stack 0
  1946  000001                     i2ReadEE@address:
  1947                           	opt stack 0
  1948  000001                     i2___awmod@dividend:
  1949                           	opt stack 0
  1950  000001                     i2__div_to_l_@f1:
  1951                           	opt stack 0
  1952  000001                     i2___ftpack@arg:
  1953                           	opt stack 0
  1954  000001                     i2__tdiv_to_l_@f1:
  1955                           	opt stack 0
  1956  000001                     i2___ftneg@f1:
  1957                           	opt stack 0
  1958  000001                     i2___lldiv@dividend:
  1959                           	opt stack 0
  1960                           
  1961                           ; 4 bytes @ 0x0
  1962  000001                     	ds	1
  1963  000002                     back@result:
  1964                           	opt stack 0
  1965  000002                     i2lcdNibble@data:
  1966                           	opt stack 0
  1967  000002                     i2I2C_Master_Read@a:
  1968                           	opt stack 0
  1969  000002                     i2_isdigit$1089:
  1970                           	opt stack 0
  1971  000002                     i2I2C_Master_Write@d:
  1972                           	opt stack 0
  1973                           
  1974                           ; 2 bytes @ 0x1
  1975  000002                     	ds	1
  1976  000003                     ??_AD:
  1977  000003                     captureKeypad@keypress:
  1978                           	opt stack 0
  1979  000003                     WriteEE@data:
  1980                           	opt stack 0
  1981  000003                     i2lcdInst@data:
  1982                           	opt stack 0
  1983  000003                     i2putch@data:
  1984                           	opt stack 0
  1985  000003                     i2I2C_Master_Read@temp:
  1986                           	opt stack 0
  1987  000003                     i2isdigit@c:
  1988                           	opt stack 0
  1989  000003                     ReadRun@sorted:
  1990                           	opt stack 0
  1991  000003                     i2___awmod@divisor:
  1992                           	opt stack 0
  1993                           
  1994                           ; 2 bytes @ 0x2
  1995  000003                     	ds	1
  1996  000004                     i2___ftpack@exp:
  1997                           	opt stack 0
  1998  000004                     i2getTime@time:
  1999                           	opt stack 0
  2000  000004                     i2__div_to_l_@f2:
  2001                           	opt stack 0
  2002  000004                     i2__tdiv_to_l_@f2:
  2003                           	opt stack 0
  2004                           
  2005                           ; 3 bytes @ 0x3
  2006  000004                     	ds	1
  2007  000005                     AD@channel:
  2008                           	opt stack 0
  2009  000005                     i2___awmod@counter:
  2010                           	opt stack 0
  2011  000005                     i2___ftpack@sign:
  2012                           	opt stack 0
  2013  000005                     ReadRun@time:
  2014                           	opt stack 0
  2015  000005                     i2___lldiv@divisor:
  2016                           	opt stack 0
  2017                           
  2018                           ; 4 bytes @ 0x4
  2019  000005                     	ds	1
  2020  000006                     ??i2___ftpack:
  2021  000006                     i2getTime@i:
  2022                           	opt stack 0
  2023  000006                     i2___awmod@sign:
  2024                           	opt stack 0
  2025                           
  2026                           ; 1 bytes @ 0x5
  2027  000006                     	ds	1
  2028  000007                     ??_ReadRun:
  2029  000007                     ??i2__tdiv_to_l_:
  2030  000007                     ?i2___awdiv:
  2031                           	opt stack 0
  2032  000007                     i2___awdiv@dividend:
  2033                           	opt stack 0
  2034  000007                     i2__div_to_l_@quot:
  2035                           	opt stack 0
  2036                           
  2037                           ; 4 bytes @ 0x6
  2038  000007                     	ds	2
  2039  000009                     ?___awtoft:
  2040                           	opt stack 0
  2041  000009                     ?i2___lltoft:
  2042                           	opt stack 0
  2043  000009                     ___awtoft@c:
  2044                           	opt stack 0
  2045  000009                     i2___awdiv@divisor:
  2046                           	opt stack 0
  2047  000009                     i2___lldiv@quotient:
  2048                           	opt stack 0
  2049  000009                     i2___lltoft@c:
  2050                           	opt stack 0
  2051                           
  2052                           ; 4 bytes @ 0x8
  2053  000009                     	ds	1
  2054  00000A                     i2__tdiv_to_l_@quot:
  2055                           	opt stack 0
  2056                           
  2057                           ; 4 bytes @ 0x9
  2058  00000A                     	ds	1
  2059  00000B                     ReadRun@backruns:
  2060                           	opt stack 0
  2061  00000B                     i2___awdiv@counter:
  2062                           	opt stack 0
  2063  00000B                     i2__div_to_l_@cntr:
  2064                           	opt stack 0
  2065                           
  2066                           ; 1 bytes @ 0xA
  2067  00000B                     	ds	1
  2068  00000C                     ___awtoft@sign:
  2069                           	opt stack 0
  2070  00000C                     i2___awdiv@sign:
  2071                           	opt stack 0
  2072  00000C                     i2__div_to_l_@exp1:
  2073                           	opt stack 0
  2074  00000C                     ReadRun@add:
  2075                           	opt stack 0
  2076                           
  2077                           ; 2 bytes @ 0xB
  2078  00000C                     	ds	1
  2079  00000D                     ??i2___lltoft:
  2080  00000D                     ?___ftdiv:
  2081                           	opt stack 0
  2082  00000D                     i2___lldiv@counter:
  2083                           	opt stack 0
  2084  00000D                     i2___awdiv@quotient:
  2085                           	opt stack 0
  2086  00000D                     ___ftdiv@f1:
  2087                           	opt stack 0
  2088                           
  2089                           ; 3 bytes @ 0xC
  2090  00000D                     	ds	1
  2091  00000E                     ?i2___llmod:
  2092                           	opt stack 0
  2093  00000E                     i2__tdiv_to_l_@cntr:
  2094                           	opt stack 0
  2095  00000E                     i2___llmod@dividend:
  2096                           	opt stack 0
  2097                           
  2098                           ; 4 bytes @ 0xD
  2099  00000E                     	ds	1
  2100  00000F                     ?i2___wmul:
  2101                           	opt stack 0
  2102  00000F                     i2__tdiv_to_l_@exp1:
  2103                           	opt stack 0
  2104  00000F                     PWMC@widthus:
  2105                           	opt stack 0
  2106  00000F                     i2___wmul@multiplier:
  2107                           	opt stack 0
  2108                           
  2109                           ; 2 bytes @ 0xE
  2110  00000F                     	ds	1
  2111  000010                     ___ftdiv@f2:
  2112                           	opt stack 0
  2113                           
  2114                           ; 3 bytes @ 0xF
  2115  000010                     	ds	1
  2116  000011                     i2___lltoft@exp:
  2117                           	opt stack 0
  2118  000011                     PWMC@cycles:
  2119                           	opt stack 0
  2120  000011                     i2___wmul@multiplicand:
  2121                           	opt stack 0
  2122                           
  2123                           ; 2 bytes @ 0x10
  2124  000011                     	ds	1
  2125  000012                     i2___llmod@divisor:
  2126                           	opt stack 0
  2127                           
  2128                           ; 4 bytes @ 0x11
  2129  000012                     	ds	1
  2130  000013                     ??___ftdiv:
  2131  000013                     PWMC@port:
  2132                           	opt stack 0
  2133  000013                     i2___wmul@product:
  2134                           	opt stack 0
  2135                           
  2136                           ; 2 bytes @ 0x12
  2137  000013                     	ds	2
  2138  000015                     ??_PWMC:
  2139  000015                     ?_HexDecToDec2:
  2140                           	opt stack 0
  2141  000015                     HexDecToDec2@hex:
  2142                           	opt stack 0
  2143  000015                     WriteRun@sorted:
  2144                           	opt stack 0
  2145                           
  2146                           ; 2 bytes @ 0x14
  2147  000015                     	ds	1
  2148  000016                     ___ftdiv@cntr:
  2149                           	opt stack 0
  2150  000016                     i2___llmod@counter:
  2151                           	opt stack 0
  2152                           
  2153                           ; 1 bytes @ 0x15
  2154  000016                     	ds	1
  2155  000017                     ??_HexDecToDec2:
  2156  000017                     _PWMC$1442:
  2157                           	opt stack 0
  2158  000017                     WriteRun@time:
  2159                           	opt stack 0
  2160  000017                     ___ftdiv@f3:
  2161                           	opt stack 0
  2162                           
  2163                           ; 3 bytes @ 0x16
  2164  000017                     	ds	1
  2165  000018                     _PWMC$1443:
  2166                           	opt stack 0
  2167                           
  2168                           ; 1 bytes @ 0x17
  2169  000018                     	ds	1
  2170  000019                     ??_WriteRun:
  2171  000019                     _PWMC$1444:
  2172                           	opt stack 0
  2173                           
  2174                           ; 1 bytes @ 0x18
  2175  000019                     	ds	1
  2176  00001A                     ___ftdiv@exp:
  2177                           	opt stack 0
  2178  00001A                     HexDecToDec2@tenth:
  2179                           	opt stack 0
  2180  00001A                     PWMC@countdown:
  2181                           	opt stack 0
  2182                           
  2183                           ; 2 bytes @ 0x19
  2184  00001A                     	ds	1
  2185  00001B                     ___ftdiv@sign:
  2186                           	opt stack 0
  2187  00001B                     WriteRun@add:
  2188                           	opt stack 0
  2189                           
  2190                           ; 2 bytes @ 0x1A
  2191  00001B                     	ds	1
  2192  00001C                     ?i2___ftmul:
  2193                           	opt stack 0
  2194  00001C                     HexDecToDec2@digit:
  2195                           	opt stack 0
  2196  00001C                     i2___ftmul@f1:
  2197                           	opt stack 0
  2198                           
  2199                           ; 3 bytes @ 0x1B
  2200  00001C                     	ds	3
  2201  00001F                     i2___ftmul@f2:
  2202                           	opt stack 0
  2203                           
  2204                           ; 3 bytes @ 0x1E
  2205  00001F                     	ds	3
  2206  000022                     ??i2___ftmul:
  2207                           
  2208                           ; 1 bytes @ 0x21
  2209  000022                     	ds	3
  2210  000025                     i2___ftmul@exp:
  2211                           	opt stack 0
  2212                           
  2213                           ; 1 bytes @ 0x24
  2214  000025                     	ds	1
  2215  000026                     i2___ftmul@f3_as_product:
  2216                           	opt stack 0
  2217                           
  2218                           ; 3 bytes @ 0x25
  2219  000026                     	ds	3
  2220  000029                     i2___ftmul@cntr:
  2221                           	opt stack 0
  2222                           
  2223                           ; 1 bytes @ 0x28
  2224  000029                     	ds	1
  2225  00002A                     i2___ftmul@sign:
  2226                           	opt stack 0
  2227                           
  2228                           ; 1 bytes @ 0x29
  2229  00002A                     	ds	1
  2230  00002B                     ?i2_fround:
  2231                           	opt stack 0
  2232  00002B                     ?i2_scale:
  2233                           	opt stack 0
  2234  00002B                     ?i2___fttol:
  2235                           	opt stack 0
  2236  00002B                     i2___ftge@ff1:
  2237                           	opt stack 0
  2238  00002B                     i2___fttol@f1:
  2239                           	opt stack 0
  2240                           
  2241                           ; 3 bytes @ 0x2A
  2242  00002B                     	ds	3
  2243  00002E                     i2___ftge@ff2:
  2244                           	opt stack 0
  2245  00002E                     i2_fround$1667:
  2246                           	opt stack 0
  2247  00002E                     i2_scale$1668:
  2248                           	opt stack 0
  2249                           
  2250                           ; 3 bytes @ 0x2D
  2251  00002E                     	ds	1
  2252  00002F                     ??i2___fttol:
  2253                           
  2254                           ; 1 bytes @ 0x2E
  2255  00002F                     	ds	2
  2256  000031                     ??i2___ftge:
  2257  000031                     i2scale@scl:
  2258                           	opt stack 0
  2259  000031                     i2_fround$1666:
  2260                           	opt stack 0
  2261                           
  2262                           ; 3 bytes @ 0x30
  2263  000031                     	ds	3
  2264  000034                     i2fround@prec:
  2265                           	opt stack 0
  2266  000034                     i2___fttol@sign1:
  2267                           	opt stack 0
  2268                           
  2269                           ; 1 bytes @ 0x33
  2270  000034                     	ds	1
  2271  000035                     ?i2___ftadd:
  2272                           	opt stack 0
  2273  000035                     i2___ftadd@f1:
  2274                           	opt stack 0
  2275  000035                     i2___fttol@lval:
  2276                           	opt stack 0
  2277                           
  2278                           ; 4 bytes @ 0x34
  2279  000035                     	ds	3
  2280  000038                     i2___ftadd@f2:
  2281                           	opt stack 0
  2282                           
  2283                           ; 3 bytes @ 0x37
  2284  000038                     	ds	1
  2285  000039                     i2___fttol@exp1:
  2286                           	opt stack 0
  2287                           
  2288                           ; 1 bytes @ 0x38
  2289  000039                     	ds	2
  2290  00003B                     ??i2___ftadd:
  2291                           
  2292                           ; 1 bytes @ 0x3A
  2293  00003B                     	ds	3
  2294  00003E                     i2___ftadd@sign:
  2295                           	opt stack 0
  2296                           
  2297                           ; 1 bytes @ 0x3D
  2298  00003E                     	ds	1
  2299  00003F                     i2___ftadd@exp2:
  2300                           	opt stack 0
  2301                           
  2302                           ; 1 bytes @ 0x3E
  2303  00003F                     	ds	1
  2304  000040                     i2___ftadd@exp1:
  2305                           	opt stack 0
  2306                           
  2307                           ; 1 bytes @ 0x3F
  2308  000040                     	ds	1
  2309  000041                     ?i2___ftsub:
  2310                           	opt stack 0
  2311  000041                     i2___ftsub@f1:
  2312                           	opt stack 0
  2313                           
  2314                           ; 3 bytes @ 0x40
  2315  000041                     	ds	3
  2316  000044                     i2___ftsub@f2:
  2317                           	opt stack 0
  2318                           
  2319                           ; 3 bytes @ 0x43
  2320  000044                     	ds	3
  2321  000047                     ?i2_printf:
  2322                           	opt stack 0
  2323  000047                     i2printf@f:
  2324                           	opt stack 0
  2325                           
  2326                           ; 2 bytes @ 0x46
  2327  000047                     	ds	6
  2328  00004D                     ??i2_printf:
  2329                           
  2330                           ; 1 bytes @ 0x4C
  2331  00004D                     	ds	6
  2332  000053                     i2_printf$1669:
  2333                           	opt stack 0
  2334                           
  2335                           ; 3 bytes @ 0x52
  2336  000053                     	ds	3
  2337  000056                     i2printf@cp:
  2338                           	opt stack 0
  2339                           
  2340                           ; 2 bytes @ 0x55
  2341  000056                     	ds	2
  2342  000058                     i2printf@idx:
  2343                           	opt stack 0
  2344                           
  2345                           ; 1 bytes @ 0x57
  2346  000058                     	ds	1
  2347  000059                     i2printf@ap:
  2348                           	opt stack 0
  2349                           
  2350                           ; 2 bytes @ 0x58
  2351  000059                     	ds	2
  2352  00005B                     i2printf@len:
  2353                           	opt stack 0
  2354                           
  2355                           ; 2 bytes @ 0x5A
  2356  00005B                     	ds	2
  2357  00005D                     i2printf@val:
  2358                           	opt stack 0
  2359                           
  2360                           ; 4 bytes @ 0x5C
  2361  00005D                     	ds	4
  2362  000061                     i2printf@prec:
  2363                           	opt stack 0
  2364                           
  2365                           ; 2 bytes @ 0x60
  2366  000061                     	ds	2
  2367  000063                     i2printf@tmpval:
  2368                           	opt stack 0
  2369                           
  2370                           ; 4 bytes @ 0x62
  2371  000063                     	ds	4
  2372  000067                     i2printf@exp:
  2373                           	opt stack 0
  2374                           
  2375                           ; 2 bytes @ 0x66
  2376  000067                     	ds	2
  2377  000069                     i2printf@flag:
  2378                           	opt stack 0
  2379                           
  2380                           ; 2 bytes @ 0x68
  2381  000069                     	ds	2
  2382  00006B                     i2printf@fval:
  2383                           	opt stack 0
  2384                           
  2385                           ; 3 bytes @ 0x6A
  2386  00006B                     	ds	3
  2387  00006E                     i2printf@width:
  2388                           	opt stack 0
  2389                           
  2390                           ; 2 bytes @ 0x6D
  2391  00006E                     	ds	2
  2392  000070                     i2printf@c:
  2393                           	opt stack 0
  2394                           
  2395                           ; 1 bytes @ 0x6F
  2396  000070                     	ds	1
  2397  000071                     ?_checkV:
  2398                           	opt stack 0
  2399  000071                     showInfo@time:
  2400                           	opt stack 0
  2401  000071                     CW90@port:
  2402                           	opt stack 0
  2403  000071                     CCW90@port:
  2404                           	opt stack 0
  2405  000071                     _stopMoving$556:
  2406                           	opt stack 0
  2407  000071                     checkV@voltage:
  2408                           	opt stack 0
  2409                           
  2410                           ; 2 bytes @ 0x70
  2411  000071                     	ds	2
  2412  000073                     stopMoving@em:
  2413                           	opt stack 0
  2414  000073                     showInfo@sorted:
  2415                           	opt stack 0
  2416  000073                     checkV@max:
  2417                           	opt stack 0
  2418                           
  2419                           ; 3 bytes @ 0x72
  2420  000073                     	ds	2
  2421  000075                     ??_showInfo:
  2422                           
  2423                           ; 1 bytes @ 0x74
  2424  000075                     	ds	1
  2425  000076                     _checkV$1665:
  2426                           	opt stack 0
  2427                           
  2428                           ; 3 bytes @ 0x75
  2429  000076                     	ds	3
  2430  000079                     ?_checkAA:
  2431                           	opt stack 0
  2432  000079                     ?_checkC:
  2433                           	opt stack 0
  2434  000079                     ?_check9:
  2435                           	opt stack 0
  2436  000079                     checkAA@sorted:
  2437                           	opt stack 0
  2438  000079                     checkC@sorted:
  2439                           	opt stack 0
  2440  000079                     check9@sorted:
  2441                           	opt stack 0
  2442                           
  2443                           ; 2 bytes @ 0x78
  2444  000079                     	ds	1
  2445  00007A                     showInfo@type:
  2446                           	opt stack 0
  2447                           
  2448                           ; 2 bytes @ 0x79
  2449  00007A                     	ds	1
  2450  00007B                     
  2451                           ; 1 bytes @ 0x7A
  2452  00007B                     	ds	1
  2453  00007C                     showInfo@stop:
  2454                           	opt stack 0
  2455                           
  2456                           ; 2 bytes @ 0x7B
  2457  00007C                     	ds	2
  2458  00007E                     keypressed@keypress:
  2459                           	opt stack 0
  2460                           
  2461                           ; 1 bytes @ 0x7D
  2462  00007E                     	ds	1
  2463                           tblptru	equ	0xFF8
  2464                           postinc0	equ	0xFEE
  2465                           wreg	equ	0xFE8
  2466                           
  2467 ;;
  2468 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2469 ;;
  2470 ;; *************** function _main *****************
  2471 ;; Defined at:
  2472 ;;		line 203 in file "main.c"
  2473 ;; Parameters:    Size  Location     Type
  2474 ;;  argc            2  109[BANK1 ] int 
  2475 ;;  argv            3  111[BANK1 ] PTR PTR unsigned char 
  2476 ;; Auto vars:     Size  Location     Type
  2477 ;;		None
  2478 ;; Return value:  Size  Location     Type
  2479 ;;                  2  109[BANK1 ] int 
  2480 ;; Registers used:
  2481 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2482 ;; Tracked objects:
  2483 ;;		On entry : 0/0
  2484 ;;		On exit  : 0/0
  2485 ;;		Unchanged: 0/0
  2486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2487 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2489 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2490 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2491 ;;Total ram usage:        7 bytes
  2492 ;; Hardware stack levels required when called:   13
  2493 ;; This function calls:
  2494 ;;		_initialize
  2495 ;;		_line0
  2496 ;;		_printf
  2497 ;;		_showRTC
  2498 ;; This function is called by:
  2499 ;;		Startup code after reset
  2500 ;; This function uses a non-reentrant model
  2501 ;;
  2502                           
  2503                           	psect	text0
  2504  004CAE                     __ptext0:
  2505                           	opt stack 0
  2506  004CAE                     _main:
  2507                           	opt stack 18
  2508                           
  2509                           ;main.c: 204: initialize();
  2510                           
  2511                           ; BSR set to: 0
  2512                           ;incstack = 0
  2513  004CAE  EC92  F024         	call	_initialize	;wreg free
  2514                           
  2515                           ;main.c: 206: line0();
  2516  004CB2  ECA5  F028         	call	_line0	;wreg free
  2517                           
  2518                           ;main.c: 207: printf("Welcome!          ");
  2519  004CB6  0E0D               	movlw	low STR_18
  2520  004CB8  0101               	movlb	1	; () banked
  2521  004CBA  6F3F               	movwf	printf@f& (0+255),b
  2522  004CBC  0EFF               	movlw	high STR_18
  2523  004CBE  0101               	movlb	1	; () banked
  2524  004CC0  6F40               	movwf	(printf@f+1)& (0+255),b
  2525  004CC2  EC09  F000         	call	_printf	;wreg free
  2526                           
  2527                           ;main.c: 208: _delay((unsigned long)((1000)*(8000000/4000.0)));
  2528  004CC6  0E0B               	movlw	11
  2529  004CC8  0101               	movlb	1	; () banked
  2530  004CCA  6F73               	movwf	(??_main+1)& (0+255),b
  2531  004CCC  0E26               	movlw	38
  2532  004CCE  0101               	movlb	1	; () banked
  2533  004CD0  6F72               	movwf	??_main& (0+255),b
  2534  004CD2  0E5D               	movlw	93
  2535  004CD4                     u8497:
  2536  004CD4  2EE8               	decfsz	wreg,f,c
  2537  004CD6  D7FE               	bra	u8497
  2538  004CD8  2F72               	decfsz	??_main& (0+255),f,b
  2539  004CDA  D7FC               	bra	u8497
  2540  004CDC  2F73               	decfsz	(??_main+1)& (0+255),f,b
  2541  004CDE  D7FA               	bra	u8497
  2542  004CE0  D000               	nop2	
  2543                           
  2544                           ;main.c: 209: INT1IE = 1;
  2545  004CE2  86F0               	bsf	intcon3,3,c	;volatile
  2546                           
  2547                           ;main.c: 210: (INTCONbits.GIE = 1);
  2548  004CE4  8EF2               	bsf	intcon,7,c	;volatile
  2549                           
  2550                           ;main.c: 211: mode = 0;
  2551  004CE6  0E00               	movlw	0
  2552  004CE8  0100               	movlb	0	; () banked
  2553  004CEA  6FD7               	movwf	(_mode+1)& (0+255),b
  2554  004CEC  0E00               	movlw	0
  2555  004CEE  6FD6               	movwf	_mode& (0+255),b
  2556  004CF0                     l7889:
  2557  004CF0  EC4D  F023         	call	_showRTC	;wreg free
  2558  004CF4  D7FD               	goto	l7889
  2559  004CF6  00FF               	reset		;# 
  2560  004CF8                     __end_of_main:
  2561                           	opt stack 0
  2562                           tblptru	equ	0xFF8
  2563                           intcon	equ	0xFF2
  2564                           intcon3	equ	0xFF0
  2565                           postinc0	equ	0xFEE
  2566                           wreg	equ	0xFE8
  2567                           
  2568 ;; *************** function _showRTC *****************
  2569 ;; Defined at:
  2570 ;;		line 149 in file "main.c"
  2571 ;; Parameters:    Size  Location     Type
  2572 ;;		None
  2573 ;; Auto vars:     Size  Location     Type
  2574 ;;		None
  2575 ;; Return value:  Size  Location     Type
  2576 ;;                  1    wreg      void 
  2577 ;; Registers used:
  2578 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2579 ;; Tracked objects:
  2580 ;;		On entry : 0/0
  2581 ;;		On exit  : 0/0
  2582 ;;		Unchanged: 0/0
  2583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2586 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2587 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2588 ;;Total ram usage:        2 bytes
  2589 ;; Hardware stack levels used:    1
  2590 ;; Hardware stack levels required when called:   12
  2591 ;; This function calls:
  2592 ;;		_getTime
  2593 ;;		_line0
  2594 ;;		_line1
  2595 ;;		_printf
  2596 ;; This function is called by:
  2597 ;;		_main
  2598 ;; This function uses a non-reentrant model
  2599 ;;
  2600                           
  2601                           	psect	text1
  2602  00469A                     __ptext1:
  2603                           	opt stack 0
  2604  00469A                     _showRTC:
  2605                           	opt stack 18
  2606                           
  2607                           ;main.c: 150: getTime(time);
  2608                           
  2609                           ;incstack = 0
  2610  00469A  0ED9               	movlw	low _time
  2611  00469C  0101               	movlb	1	; () banked
  2612  00469E  6F03               	movwf	getTime@time& (0+255),b
  2613  0046A0  0E00               	movlw	high _time
  2614  0046A2  0101               	movlb	1	; () banked
  2615  0046A4  6F04               	movwf	(getTime@time+1)& (0+255),b
  2616  0046A6  EC08  F023         	call	_getTime	;wreg free
  2617                           
  2618                           ;main.c: 151: line0();
  2619  0046AA  ECA5  F028         	call	_line0	;wreg free
  2620                           
  2621                           ;main.c: 152: printf("%02x/%02x/%02x         ", time[6], time[5], time[4]);
  2622  0046AE  0E0B               	movlw	low STR_16
  2623  0046B0  0101               	movlb	1	; () banked
  2624  0046B2  6F3F               	movwf	printf@f& (0+255),b
  2625  0046B4  0EFD               	movlw	high STR_16
  2626  0046B6  0101               	movlb	1	; () banked
  2627  0046B8  6F40               	movwf	(printf@f+1)& (0+255),b
  2628  0046BA  C0DF  F141         	movff	_time+6,?_printf+2
  2629  0046BE  0101               	movlb	1	; () banked
  2630  0046C0  6B42               	clrf	(?_printf+3)& (0+255),b
  2631  0046C2  C0DE  F143         	movff	_time+5,?_printf+4
  2632  0046C6  0101               	movlb	1	; () banked
  2633  0046C8  6B44               	clrf	(?_printf+5)& (0+255),b
  2634  0046CA  C0DD  F145         	movff	_time+4,?_printf+6
  2635  0046CE  0101               	movlb	1	; () banked
  2636  0046D0  6B46               	clrf	(?_printf+7)& (0+255),b
  2637  0046D2  EC09  F000         	call	_printf	;wreg free
  2638                           
  2639                           ;main.c: 153: line1();
  2640  0046D6  ECA1  F028         	call	_line1	;wreg free
  2641                           
  2642                           ;main.c: 154: printf("%02x:%02x:%02x         ", time[2], time[1], time[0]);
  2643  0046DA  0E23               	movlw	low STR_17
  2644  0046DC  0101               	movlb	1	; () banked
  2645  0046DE  6F3F               	movwf	printf@f& (0+255),b
  2646  0046E0  0EFD               	movlw	high STR_17
  2647  0046E2  0101               	movlb	1	; () banked
  2648  0046E4  6F40               	movwf	(printf@f+1)& (0+255),b
  2649  0046E6  C0DB  F141         	movff	_time+2,?_printf+2
  2650  0046EA  0101               	movlb	1	; () banked
  2651  0046EC  6B42               	clrf	(?_printf+3)& (0+255),b
  2652  0046EE  C0DA  F143         	movff	_time+1,?_printf+4
  2653  0046F2  0101               	movlb	1	; () banked
  2654  0046F4  6B44               	clrf	(?_printf+5)& (0+255),b
  2655  0046F6  C0D9  F145         	movff	_time,?_printf+6
  2656  0046FA  0101               	movlb	1	; () banked
  2657  0046FC  6B46               	clrf	(?_printf+7)& (0+255),b
  2658  0046FE  EC09  F000         	call	_printf	;wreg free
  2659                           
  2660                           ;main.c: 155: _delay((unsigned long)((250)*(8000000/4000.0)));
  2661  004702  0E03               	movlw	3
  2662  004704  0101               	movlb	1	; () banked
  2663  004706  6F6C               	movwf	(??_showRTC+1)& (0+255),b
  2664  004708  0E8A               	movlw	138
  2665  00470A  0101               	movlb	1	; () banked
  2666  00470C  6F6B               	movwf	??_showRTC& (0+255),b
  2667  00470E  0E55               	movlw	85
  2668  004710                     u8507:
  2669  004710  2EE8               	decfsz	wreg,f,c
  2670  004712  D7FE               	bra	u8507
  2671  004714  2F6B               	decfsz	??_showRTC& (0+255),f,b
  2672  004716  D7FC               	bra	u8507
  2673  004718  2F6C               	decfsz	(??_showRTC+1)& (0+255),f,b
  2674  00471A  D7FA               	bra	u8507
  2675  00471C  D000               	nop2	
  2676  00471E  0012               	return		;funcret
  2677  004720                     __end_of_showRTC:
  2678                           	opt stack 0
  2679                           tblptru	equ	0xFF8
  2680                           intcon	equ	0xFF2
  2681                           intcon3	equ	0xFF0
  2682                           postinc0	equ	0xFEE
  2683                           wreg	equ	0xFE8
  2684                           
  2685 ;; *************** function _printf *****************
  2686 ;; Defined at:
  2687 ;;		line 464 in file "/opt/microchip/xc8/v1.41/sources/common/doprnt.c"
  2688 ;; Parameters:    Size  Location     Type
  2689 ;;  f               2   63[BANK1 ] PTR const unsigned char 
  2690 ;;		 -> STR_51(12), STR_50(11), STR_49(16), STR_48(23), 
  2691 ;;		 -> STR_47(21), STR_46(14), STR_45(15), STR_44(22), 
  2692 ;;		 -> STR_43(20), STR_42(13), STR_41(16), STR_40(23), 
  2693 ;;		 -> STR_39(21), STR_38(14), STR_37(18), STR_36(18), 
  2694 ;;		 -> STR_35(20), STR_34(20), STR_33(17), STR_32(16), 
  2695 ;;		 -> STR_31(21), STR_30(16), STR_29(21), STR_28(16), 
  2696 ;;		 -> STR_27(20), STR_26(16), STR_25(21), STR_24(23), 
  2697 ;;		 -> STR_23(24), STR_22(21), STR_21(24), STR_20(24), 
  2698 ;;		 -> STR_19(25), STR_18(19), STR_17(24), STR_16(24), 
  2699 ;;		 -> STR_15(27), STR_14(17), STR_13(21), STR_12(21), 
  2700 ;;		 -> STR_11(21), STR_10(21), STR_9(20), STR_8(21), 
  2701 ;;		 -> STR_7(21), STR_6(20), STR_5(22), STR_4(22), 
  2702 ;;		 -> STR_3(21), STR_2(24), STR_1(9), 
  2703 ;; Auto vars:     Size  Location     Type
  2704 ;;  idx             1   80[BANK1 ] unsigned char 
  2705 ;;  tmpval          4   93[BANK1 ] struct .
  2706 ;;  val             4   87[BANK1 ] unsigned long 
  2707 ;;  fval            3  101[BANK1 ] unsigned long 
  2708 ;;  width           2  104[BANK1 ] int 
  2709 ;;  flag            2   99[BANK1 ] unsigned short 
  2710 ;;  exp             2   97[BANK1 ] int 
  2711 ;;  prec            2   91[BANK1 ] int 
  2712 ;;  len             2   85[BANK1 ] unsigned int 
  2713 ;;  ap              2   83[BANK1 ] PTR void [1]
  2714 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2715 ;;  cp              2   81[BANK1 ] PTR const unsigned char 
  2716 ;;		 -> printf@c(1), 
  2717 ;;  c               1  106[BANK1 ] char 
  2718 ;;  d               1    0        unsigned char 
  2719 ;; Return value:  Size  Location     Type
  2720 ;;                  2   63[BANK1 ] int 
  2721 ;; Registers used:
  2722 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2723 ;; Tracked objects:
  2724 ;;		On entry : 0/0
  2725 ;;		On exit  : 0/0
  2726 ;;		Unchanged: 0/0
  2727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2728 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2729 ;;      Locals:         0       0      30       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2730 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2731 ;;      Totals:         0       0      44       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2732 ;;Total ram usage:       44 bytes
  2733 ;; Hardware stack levels used:    1
  2734 ;; Hardware stack levels required when called:   11
  2735 ;; This function calls:
  2736 ;;		___awdiv
  2737 ;;		___ftadd
  2738 ;;		___ftge
  2739 ;;		___ftmul
  2740 ;;		___ftneg
  2741 ;;		___ftsub
  2742 ;;		___fttol
  2743 ;;		___lldiv
  2744 ;;		___llmod
  2745 ;;		___lltoft
  2746 ;;		___wmul
  2747 ;;		__div_to_l_
  2748 ;;		__tdiv_to_l_
  2749 ;;		_fround
  2750 ;;		_isdigit
  2751 ;;		_putch
  2752 ;;		_scale
  2753 ;; This function is called by:
  2754 ;;		_showRTC
  2755 ;;		_main
  2756 ;;		_mainloop
  2757 ;; This function uses a non-reentrant model
  2758 ;;
  2759                           
  2760                           	psect	text2
  2761  000012                     __ptext2:
  2762                           	opt stack 0
  2763  000012                     _printf:
  2764                           	opt stack 18
  2765                           
  2766                           ;doprnt.c: 466: va_list ap;
  2767                           ;doprnt.c: 499: signed char c;
  2768                           ;doprnt.c: 501: int width;
  2769                           ;doprnt.c: 504: int prec;
  2770                           ;doprnt.c: 508: unsigned short flag;
  2771                           ;doprnt.c: 515: char d;
  2772                           ;doprnt.c: 516: double fval;
  2773                           ;doprnt.c: 517: int exp;
  2774                           ;doprnt.c: 523: union {
  2775                           ;doprnt.c: 524: unsigned long vd;
  2776                           ;doprnt.c: 525: double integ;
  2777                           ;doprnt.c: 526: } tmpval;
  2778                           ;doprnt.c: 528: unsigned long val;
  2779                           ;doprnt.c: 529: unsigned len;
  2780                           ;doprnt.c: 530: const char * cp;
  2781                           ;doprnt.c: 533: *ap = __va_start();
  2782                           
  2783                           ;incstack = 0
  2784  000012  0E41               	movlw	low (?_printf+2)
  2785  000014  0101               	movlb	1	; () banked
  2786  000016  6F53               	movwf	printf@ap& (0+255),b
  2787  000018  0E01               	movlw	high (?_printf+2)
  2788  00001A  0101               	movlb	1	; () banked
  2789  00001C  6F54               	movwf	(printf@ap+1)& (0+255),b
  2790                           
  2791                           ;doprnt.c: 536: while(c = *f++) {
  2792  00001E  EFF9  F005         	goto	l7817
  2793  000022                     l7519:
  2794                           
  2795                           ; BSR set to: 1
  2796                           ;doprnt.c: 538: if(c != '%')
  2797  000022  0E25               	movlw	37
  2798  000024  0101               	movlb	1	; () banked
  2799  000026  196A               	xorwf	printf@c& (0+255),w,b
  2800  000028  B4D8               	btfsc	status,2,c
  2801  00002A  D006               	goto	l7523
  2802                           
  2803                           ; BSR set to: 1
  2804                           ;doprnt.c: 540: {
  2805                           ;doprnt.c: 541: (putch(c) );
  2806  00002C  0101               	movlb	1	; () banked
  2807  00002E  516A               	movf	printf@c& (0+255),w,b
  2808  000030  EC7B  F028         	call	_putch
  2809                           
  2810                           ;doprnt.c: 542: continue;
  2811  000034  EFF9  F005         	goto	l7817
  2812  000038                     l7523:
  2813                           
  2814                           ;doprnt.c: 543: }
  2815                           ;doprnt.c: 546: width = 0;
  2816  000038  0E00               	movlw	0
  2817  00003A  0101               	movlb	1	; () banked
  2818  00003C  6F69               	movwf	(printf@width+1)& (0+255),b
  2819  00003E  0E00               	movlw	0
  2820  000040  6F68               	movwf	printf@width& (0+255),b
  2821                           
  2822                           ;doprnt.c: 548: flag = 0;
  2823  000042  0E00               	movlw	0
  2824  000044  0101               	movlb	1	; () banked
  2825  000046  6F64               	movwf	(printf@flag+1)& (0+255),b
  2826  000048  0E00               	movlw	0
  2827  00004A  6F63               	movwf	printf@flag& (0+255),b
  2828                           
  2829                           ; BSR set to: 1
  2830                           ;doprnt.c: 551: switch(*f) {
  2831                           
  2832                           ;doprnt.c: 550: for(;;) {
  2833  00004C  D005               	goto	l7529
  2834  00004E                     l7525:
  2835                           
  2836                           ;doprnt.c: 580: flag |= 0x04;
  2837  00004E  0101               	movlb	1	; () banked
  2838  000050  8563               	bsf	printf@flag& (0+255),2,b
  2839                           
  2840                           ;doprnt.c: 581: f++;
  2841  000052  0101               	movlb	1	; () banked
  2842  000054  4B3F               	infsnz	printf@f& (0+255),f,b
  2843  000056  2B40               	incf	(printf@f+1)& (0+255),f,b
  2844  000058                     l7529:
  2845  000058  C13F  FFF6         	movff	printf@f,tblptrl
  2846  00005C  C140  FFF7         	movff	printf@f+1,tblptrh
  2847  000060                     	if	0	;tblptru may be non-zero
  2848  000060                     	endif
  2849  000060                     	if	0	;tblptru may be non-zero
  2850  000060                     	endif
  2851  000060  0008               	tblrd		*
  2852  000062  50F5               	movf	tablat,w,c
  2853                           
  2854                           ; Switch size 1, requested type "space"
  2855                           ; Number of cases is 1, Range of values is 48 to 48
  2856                           ; switch strategies available:
  2857                           ; Name         Instructions Cycles
  2858                           ; simple_byte            4     3 (average)
  2859                           ;	Chosen strategy is simple_byte
  2860  000064  0A30               	xorlw	48	; case 48
  2861  000066  B4D8               	btfsc	status,2,c
  2862  000068  D7F2               	goto	l7525
  2863                           
  2864                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2865                           
  2866                           ;doprnt.c: 586: }
  2867                           
  2868                           ;doprnt.c: 585: break;
  2869  00006A  C13F  FFF6         	movff	printf@f,tblptrl
  2870  00006E  C140  FFF7         	movff	printf@f+1,tblptrh
  2871  000072                     	if	0	;tblptru may be non-zero
  2872  000072                     	endif
  2873  000072                     	if	0	;tblptru may be non-zero
  2874  000072                     	endif
  2875  000072  0008               	tblrd		*
  2876  000074  50F5               	movf	tablat,w,c
  2877  000076  EC92  F027         	call	_isdigit
  2878  00007A  A0D8               	btfss	status,0,c
  2879  00007C  D096               	goto	l7571
  2880                           
  2881                           ;doprnt.c: 598: width = 0;
  2882  00007E  0E00               	movlw	0
  2883  000080  0101               	movlb	1	; () banked
  2884  000082  6F69               	movwf	(printf@width+1)& (0+255),b
  2885  000084  0E00               	movlw	0
  2886  000086  6F68               	movwf	printf@width& (0+255),b
  2887  000088                     l7535:
  2888                           
  2889                           ;doprnt.c: 600: width *= 10;
  2890  000088  C168  F10E         	movff	printf@width,___wmul@multiplier
  2891  00008C  C169  F10F         	movff	printf@width+1,___wmul@multiplier+1
  2892  000090  0E00               	movlw	0
  2893  000092  0101               	movlb	1	; () banked
  2894  000094  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2895  000096  0E0A               	movlw	10
  2896  000098  6F10               	movwf	___wmul@multiplicand& (0+255),b
  2897  00009A  ECFF  F026         	call	___wmul	;wreg free
  2898  00009E  C10E  F168         	movff	?___wmul,printf@width
  2899  0000A2  C10F  F169         	movff	?___wmul+1,printf@width+1
  2900                           
  2901                           ;doprnt.c: 601: width += *f++ - '0';
  2902  0000A6  0ED0               	movlw	208
  2903  0000A8  0101               	movlb	1	; () banked
  2904  0000AA  6F47               	movwf	??_printf& (0+255),b
  2905  0000AC  0EFF               	movlw	255
  2906  0000AE  0101               	movlb	1	; () banked
  2907  0000B0  6F48               	movwf	(??_printf+1)& (0+255),b
  2908  0000B2  C13F  FFF6         	movff	printf@f,tblptrl
  2909  0000B6  C140  FFF7         	movff	printf@f+1,tblptrh
  2910  0000BA                     	if	0	;tblptru may be non-zero
  2911  0000BA                     	endif
  2912  0000BA                     	if	0	;tblptru may be non-zero
  2913  0000BA                     	endif
  2914  0000BA  0008               	tblrd		*
  2915  0000BC  50F5               	movf	tablat,w,c
  2916  0000BE  0101               	movlb	1	; () banked
  2917  0000C0  6F49               	movwf	(??_printf+2)& (0+255),b
  2918  0000C2  6B4A               	clrf	(??_printf+3)& (0+255),b
  2919  0000C4  0101               	movlb	1	; () banked
  2920  0000C6  5147               	movf	??_printf& (0+255),w,b
  2921  0000C8  0101               	movlb	1	; () banked
  2922  0000CA  2749               	addwf	(??_printf+2)& (0+255),f,b
  2923  0000CC  0101               	movlb	1	; () banked
  2924  0000CE  5148               	movf	(??_printf+1)& (0+255),w,b
  2925  0000D0  0101               	movlb	1	; () banked
  2926  0000D2  234A               	addwfc	(??_printf+3)& (0+255),f,b
  2927  0000D4  0101               	movlb	1	; () banked
  2928  0000D6  5149               	movf	(??_printf+2)& (0+255),w,b
  2929  0000D8  0101               	movlb	1	; () banked
  2930  0000DA  2768               	addwf	printf@width& (0+255),f,b
  2931  0000DC  0101               	movlb	1	; () banked
  2932  0000DE  514A               	movf	(??_printf+3)& (0+255),w,b
  2933  0000E0  0101               	movlb	1	; () banked
  2934  0000E2  2369               	addwfc	(printf@width+1)& (0+255),f,b
  2935                           
  2936                           ; BSR set to: 1
  2937  0000E4  0101               	movlb	1	; () banked
  2938  0000E6  4B3F               	infsnz	printf@f& (0+255),f,b
  2939  0000E8  2B40               	incf	(printf@f+1)& (0+255),f,b
  2940                           
  2941                           ; BSR set to: 1
  2942                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2943  0000EA  C13F  FFF6         	movff	printf@f,tblptrl
  2944  0000EE  C140  FFF7         	movff	printf@f+1,tblptrh
  2945  0000F2                     	if	0	;tblptru may be non-zero
  2946  0000F2                     	endif
  2947  0000F2                     	if	0	;tblptru may be non-zero
  2948  0000F2                     	endif
  2949  0000F2  0008               	tblrd		*
  2950  0000F4  50F5               	movf	tablat,w,c
  2951  0000F6  EC92  F027         	call	_isdigit
  2952  0000FA  A0D8               	btfss	status,0,c
  2953  0000FC  D056               	goto	l7571
  2954  0000FE  D7C4               	goto	l7535
  2955  000100                     l7543:
  2956                           
  2957                           ;doprnt.c: 663: flag |= 0x400;
  2958  000100  0101               	movlb	1	; () banked
  2959  000102  8564               	bsf	(printf@flag+1)& (0+255),2,b
  2960                           
  2961                           ;doprnt.c: 664: break;
  2962  000104  D06B               	goto	l7573
  2963  000106                     l7545:
  2964                           
  2965                           ; BSR set to: 1
  2966                           ;doprnt.c: 721: flag |= 0x80;
  2967  000106  0101               	movlb	1	; () banked
  2968  000108  8F63               	bsf	printf@flag& (0+255),7,b
  2969                           
  2970                           ;doprnt.c: 723: break;
  2971  00010A  D068               	goto	l7573
  2972  00010C                     l7547:
  2973                           
  2974                           ; BSR set to: 1
  2975                           ;doprnt.c: 757: if(width > len)
  2976  00010C  0101               	movlb	1	; () banked
  2977  00010E  5168               	movf	printf@width& (0+255),w,b
  2978  000110  0101               	movlb	1	; () banked
  2979  000112  5D55               	subwf	printf@len& (0+255),w,b
  2980  000114  0101               	movlb	1	; () banked
  2981  000116  5169               	movf	(printf@width+1)& (0+255),w,b
  2982  000118  0101               	movlb	1	; () banked
  2983  00011A  5956               	subwfb	(printf@len+1)& (0+255),w,b
  2984  00011C  B0D8               	btfsc	status,0,c
  2985  00011E  D009               	goto	l7551
  2986                           
  2987                           ; BSR set to: 1
  2988                           ;doprnt.c: 758: width -= len;
  2989  000120  0101               	movlb	1	; () banked
  2990  000122  5155               	movf	printf@len& (0+255),w,b
  2991  000124  0101               	movlb	1	; () banked
  2992  000126  5F68               	subwf	printf@width& (0+255),f,b
  2993  000128  0101               	movlb	1	; () banked
  2994  00012A  5156               	movf	(printf@len+1)& (0+255),w,b
  2995  00012C  0101               	movlb	1	; () banked
  2996  00012E  5B69               	subwfb	(printf@width+1)& (0+255),f,b
  2997  000130  D009               	goto	l7555
  2998  000132                     l7551:
  2999                           
  3000                           ; BSR set to: 1
  3001                           ;doprnt.c: 759: else
  3002                           ;doprnt.c: 760: width = 0;
  3003  000132  0E00               	movlw	0
  3004  000134  0101               	movlb	1	; () banked
  3005  000136  6F69               	movwf	(printf@width+1)& (0+255),b
  3006  000138  0E00               	movlw	0
  3007  00013A  6F68               	movwf	printf@width& (0+255),b
  3008                           
  3009                           ; BSR set to: 1
  3010                           ;doprnt.c: 764: while(width--)
  3011  00013C  D003               	goto	l7555
  3012  00013E                     l7553:
  3013                           
  3014                           ; BSR set to: 1
  3015                           ;doprnt.c: 765: (putch(' ') );
  3016  00013E  0E20               	movlw	32
  3017  000140  EC7B  F028         	call	_putch
  3018  000144                     l7555:
  3019  000144  0101               	movlb	1	; () banked
  3020  000146  0768               	decf	printf@width& (0+255),f,b
  3021  000148  A0D8               	btfss	status,0,c
  3022  00014A  0769               	decf	(printf@width+1)& (0+255),f,b
  3023  00014C  0101               	movlb	1	; () banked
  3024  00014E  2968               	incf	printf@width& (0+255),w,b
  3025  000150  E1F6               	bnz	l7553
  3026  000152  0101               	movlb	1	; () banked
  3027  000154  2969               	incf	(printf@width+1)& (0+255),w,b
  3028  000156  B4D8               	btfsc	status,2,c
  3029  000158  D00B               	goto	l7561
  3030  00015A  D7F1               	goto	l7553
  3031  00015C                     l7557:
  3032                           
  3033                           ; BSR set to: 1
  3034                           ;doprnt.c: 768: (putch(*cp++) );
  3035  00015C  C151  FFD9         	movff	printf@cp,fsr2l
  3036  000160  C152  FFDA         	movff	printf@cp+1,fsr2h
  3037  000164  50DF               	movf	indf2,w,c
  3038  000166  EC7B  F028         	call	_putch
  3039  00016A  0101               	movlb	1	; () banked
  3040  00016C  4B51               	infsnz	printf@cp& (0+255),f,b
  3041  00016E  2B52               	incf	(printf@cp+1)& (0+255),f,b
  3042  000170                     l7561:
  3043                           
  3044                           ; BSR set to: 1
  3045  000170  0101               	movlb	1	; () banked
  3046  000172  0755               	decf	printf@len& (0+255),f,b
  3047  000174  A0D8               	btfss	status,0,c
  3048  000176  0756               	decf	(printf@len+1)& (0+255),f,b
  3049  000178  0101               	movlb	1	; () banked
  3050  00017A  2955               	incf	printf@len& (0+255),w,b
  3051  00017C  E1EF               	bnz	l7557
  3052  00017E  0101               	movlb	1	; () banked
  3053  000180  2956               	incf	(printf@len+1)& (0+255),w,b
  3054  000182  B4D8               	btfsc	status,2,c
  3055  000184  EFF9  F005         	goto	l7817
  3056  000188  D7E9               	goto	l7557
  3057  00018A                     l7563:
  3058                           
  3059                           ; BSR set to: 1
  3060                           ;doprnt.c: 805: cp = (char *)&c;
  3061  00018A  0E6A               	movlw	low printf@c
  3062  00018C  0101               	movlb	1	; () banked
  3063  00018E  6F51               	movwf	printf@cp& (0+255),b
  3064  000190  0E01               	movlw	high printf@c
  3065  000192  0101               	movlb	1	; () banked
  3066  000194  6F52               	movwf	(printf@cp+1)& (0+255),b
  3067                           
  3068                           ; BSR set to: 1
  3069                           ;doprnt.c: 806: len = 1;
  3070  000196  0E00               	movlw	0
  3071  000198  0101               	movlb	1	; () banked
  3072  00019A  6F56               	movwf	(printf@len+1)& (0+255),b
  3073  00019C  0E01               	movlw	1
  3074  00019E  6F55               	movwf	printf@len& (0+255),b
  3075                           
  3076                           ;doprnt.c: 807: goto dostring;
  3077  0001A0  D7B5               	goto	l7547
  3078  0001A2                     l7567:
  3079                           
  3080                           ; BSR set to: 1
  3081                           ;doprnt.c: 818: flag |= 0xC0;
  3082  0001A2  0EC0               	movlw	192
  3083  0001A4  0101               	movlb	1	; () banked
  3084  0001A6  1363               	iorwf	printf@flag& (0+255),f,b
  3085                           
  3086                           ; BSR set to: 1
  3087                           ;doprnt.c: 822: }
  3088                           
  3089                           ;doprnt.c: 819: break;
  3090  0001A8  D019               	goto	l7573
  3091  0001AA                     l7571:
  3092  0001AA  C13F  FFF6         	movff	printf@f,tblptrl
  3093  0001AE  C140  FFF7         	movff	printf@f+1,tblptrh
  3094  0001B2  0101               	movlb	1	; () banked
  3095  0001B4  4B3F               	infsnz	printf@f& (0+255),f,b
  3096  0001B6  2B40               	incf	(printf@f+1)& (0+255),f,b
  3097  0001B8                     	if	0	;tblptru may be non-zero
  3098  0001B8                     	endif
  3099  0001B8                     	if	0	;tblptru may be non-zero
  3100  0001B8                     	endif
  3101  0001B8  0008               	tblrd		*
  3102  0001BA  CFF5 F16A          	movff	tablat,printf@c
  3103  0001BE  0101               	movlb	1	; () banked
  3104  0001C0  516A               	movf	printf@c& (0+255),w,b
  3105                           
  3106                           ; Switch size 1, requested type "space"
  3107                           ; Number of cases is 4, Range of values is 0 to 120
  3108                           ; switch strategies available:
  3109                           ; Name         Instructions Cycles
  3110                           ; simple_byte           13     7 (average)
  3111                           ;	Chosen strategy is simple_byte
  3112  0001C2  0A00               	xorlw	0	; case 0
  3113  0001C4  B4D8               	btfsc	status,2,c
  3114  0001C6  0012               	return	
  3115  0001C8  0A66               	xorlw	102	; case 102
  3116  0001CA  B4D8               	btfsc	status,2,c
  3117  0001CC  D799               	goto	l7543
  3118  0001CE  0A13               	xorlw	19	; case 117
  3119  0001D0  B4D8               	btfsc	status,2,c
  3120  0001D2  D7E7               	goto	l7567
  3121  0001D4  0A0D               	xorlw	13	; case 120
  3122  0001D6  B4D8               	btfsc	status,2,c
  3123  0001D8  D796               	goto	l7545
  3124  0001DA  D7D7               	goto	l7563
  3125  0001DC                     l7573:
  3126                           
  3127                           ; BSR set to: 1
  3128                           ;doprnt.c: 825: if(flag & (0x700)) {
  3129  0001DC  0E07               	movlw	7
  3130  0001DE  0101               	movlb	1	; () banked
  3131  0001E0  1564               	andwf	(printf@flag+1)& (0+255),w,b
  3132  0001E2  B4D8               	btfsc	status,2,c
  3133  0001E4  D37A               	goto	l7731
  3134                           
  3135                           ; BSR set to: 1
  3136                           ;doprnt.c: 829: prec = 6;
  3137  0001E6  0E00               	movlw	0
  3138  0001E8  0101               	movlb	1	; () banked
  3139  0001EA  6F5C               	movwf	(printf@prec+1)& (0+255),b
  3140  0001EC  0E06               	movlw	6
  3141  0001EE  6F5B               	movwf	printf@prec& (0+255),b
  3142                           
  3143                           ; BSR set to: 1
  3144                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  3145  0001F0  C153  FFD9         	movff	printf@ap,fsr2l
  3146  0001F4  C154  FFDA         	movff	printf@ap+1,fsr2h
  3147  0001F8  CFDE F165          	movff	postinc2,printf@fval
  3148  0001FC  CFDE F166          	movff	postinc2,printf@fval+1
  3149  000200  CFDD F167          	movff	postdec2,printf@fval+2
  3150                           
  3151                           ; BSR set to: 1
  3152  000204  0E03               	movlw	3
  3153  000206  0101               	movlb	1	; () banked
  3154  000208  2753               	addwf	printf@ap& (0+255),f,b
  3155  00020A  0E00               	movlw	0
  3156  00020C  2354               	addwfc	(printf@ap+1)& (0+255),f,b
  3157                           
  3158                           ; BSR set to: 1
  3159                           ;doprnt.c: 831: if(fval < 0.0) {
  3160  00020E  0101               	movlb	1	; () banked
  3161  000210  AF67               	btfss	(printf@fval+2)& (0+255),7,b
  3162  000212  D011               	goto	l7587
  3163                           
  3164                           ; BSR set to: 1
  3165                           ;doprnt.c: 832: fval = -fval;
  3166  000214  C165  F100         	movff	printf@fval,___ftneg@f1
  3167  000218  C166  F101         	movff	printf@fval+1,___ftneg@f1+1
  3168  00021C  C167  F102         	movff	printf@fval+2,___ftneg@f1+2
  3169  000220  EC35  F027         	call	___ftneg	;wreg free
  3170  000224  C100  F165         	movff	?___ftneg,printf@fval
  3171  000228  C101  F166         	movff	?___ftneg+1,printf@fval+1
  3172  00022C  C102  F167         	movff	?___ftneg+2,printf@fval+2
  3173                           
  3174                           ;doprnt.c: 833: flag |= 0x03;
  3175  000230  0E03               	movlw	3
  3176  000232  0101               	movlb	1	; () banked
  3177  000234  1363               	iorwf	printf@flag& (0+255),f,b
  3178  000236                     l7587:
  3179                           
  3180                           ; BSR set to: 1
  3181                           ;doprnt.c: 834: }
  3182                           ;doprnt.c: 835: exp = 0;
  3183  000236  0E00               	movlw	0
  3184  000238  0101               	movlb	1	; () banked
  3185  00023A  6F62               	movwf	(printf@exp+1)& (0+255),b
  3186  00023C  0E00               	movlw	0
  3187  00023E  6F61               	movwf	printf@exp& (0+255),b
  3188                           
  3189                           ; BSR set to: 1
  3190                           ;doprnt.c: 836: if( fval!=0) {
  3191  000240  0101               	movlb	1	; () banked
  3192  000242  5165               	movf	printf@fval& (0+255),w,b
  3193  000244  0101               	movlb	1	; () banked
  3194  000246  1166               	iorwf	(printf@fval+1)& (0+255),w,b
  3195  000248  0101               	movlb	1	; () banked
  3196  00024A  1167               	iorwf	(printf@fval+2)& (0+255),w,b
  3197  00024C  B4D8               	btfsc	status,2,c
  3198  00024E  D09B               	goto	l7615
  3199                           
  3200                           ; BSR set to: 1
  3201                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  3202  000250  0E82               	movlw	130
  3203  000252  0101               	movlb	1	; () banked
  3204  000254  6F47               	movwf	??_printf& (0+255),b
  3205  000256  0EFF               	movlw	255
  3206  000258  0101               	movlb	1	; () banked
  3207  00025A  6F48               	movwf	(??_printf+1)& (0+255),b
  3208  00025C  C165  F149         	movff	printf@fval,??_printf+2
  3209  000260  C166  F14A         	movff	printf@fval+1,??_printf+3
  3210  000264  C167  F14B         	movff	printf@fval+2,??_printf+4
  3211  000268  C168  F14C         	movff	printf@fval+3,??_printf+5
  3212  00026C  0E10               	movlw	16
  3213  00026E  D006               	goto	u8030
  3214  000270                     u8035:
  3215  000270  0101               	movlb	1	; () banked
  3216  000272  90D8               	bcf	status,0,c
  3217  000274  334C               	rrcf	(??_printf+5)& (0+255),f,b
  3218  000276  334B               	rrcf	(??_printf+4)& (0+255),f,b
  3219  000278  334A               	rrcf	(??_printf+3)& (0+255),f,b
  3220  00027A  3349               	rrcf	(??_printf+2)& (0+255),f,b
  3221  00027C                     u8030:
  3222  00027C  2EE8               	decfsz	wreg,f,c
  3223  00027E  D7F8               	goto	u8035
  3224  000280  0101               	movlb	1	; () banked
  3225  000282  5149               	movf	(??_printf+2)& (0+255),w,b
  3226  000284  0101               	movlb	1	; () banked
  3227  000286  2547               	addwf	??_printf& (0+255),w,b
  3228  000288  0101               	movlb	1	; () banked
  3229  00028A  6F61               	movwf	printf@exp& (0+255),b
  3230  00028C  0E00               	movlw	0
  3231  00028E  0101               	movlb	1	; () banked
  3232  000290  2148               	addwfc	(??_printf+1)& (0+255),w,b
  3233  000292  0101               	movlb	1	; () banked
  3234  000294  6F62               	movwf	(printf@exp+1)& (0+255),b
  3235                           
  3236                           ; BSR set to: 1
  3237                           ;doprnt.c: 838: exp--;
  3238  000296  0101               	movlb	1	; () banked
  3239  000298  0761               	decf	printf@exp& (0+255),f,b
  3240  00029A  A0D8               	btfss	status,0,c
  3241  00029C  0762               	decf	(printf@exp+1)& (0+255),f,b
  3242                           
  3243                           ; BSR set to: 1
  3244                           ;doprnt.c: 839: exp *= 3;
  3245  00029E  C161  F10E         	movff	printf@exp,___wmul@multiplier
  3246  0002A2  C162  F10F         	movff	printf@exp+1,___wmul@multiplier+1
  3247  0002A6  0E00               	movlw	0
  3248  0002A8  0101               	movlb	1	; () banked
  3249  0002AA  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3250  0002AC  0E03               	movlw	3
  3251  0002AE  6F10               	movwf	___wmul@multiplicand& (0+255),b
  3252  0002B0  ECFF  F026         	call	___wmul	;wreg free
  3253  0002B4  C10E  F161         	movff	?___wmul,printf@exp
  3254  0002B8  C10F  F162         	movff	?___wmul+1,printf@exp+1
  3255                           
  3256                           ;doprnt.c: 840: exp /= 10;
  3257  0002BC  C161  F106         	movff	printf@exp,___awdiv@dividend
  3258  0002C0  C162  F107         	movff	printf@exp+1,___awdiv@dividend+1
  3259  0002C4  0E00               	movlw	0
  3260  0002C6  0101               	movlb	1	; () banked
  3261  0002C8  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  3262  0002CA  0E0A               	movlw	10
  3263  0002CC  6F08               	movwf	___awdiv@divisor& (0+255),b
  3264  0002CE  EC0E  F021         	call	___awdiv	;wreg free
  3265  0002D2  C106  F161         	movff	?___awdiv,printf@exp
  3266  0002D6  C107  F162         	movff	?___awdiv+1,printf@exp+1
  3267                           
  3268                           ;doprnt.c: 841: if(exp < 0)
  3269  0002DA  0101               	movlb	1	; () banked
  3270  0002DC  AF62               	btfss	(printf@exp+1)& (0+255),7,b
  3271  0002DE  D004               	goto	l7603
  3272                           
  3273                           ; BSR set to: 1
  3274                           ;doprnt.c: 842: exp--;
  3275  0002E0  0101               	movlb	1	; () banked
  3276  0002E2  0761               	decf	printf@exp& (0+255),f,b
  3277  0002E4  A0D8               	btfss	status,0,c
  3278  0002E6  0762               	decf	(printf@exp+1)& (0+255),f,b
  3279  0002E8                     l7603:
  3280                           
  3281                           ; BSR set to: 1
  3282                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  3283  0002E8  0101               	movlb	1	; () banked
  3284  0002EA  5161               	movf	printf@exp& (0+255),w,b
  3285  0002EC  0800               	sublw	0
  3286  0002EE  ECFB  F00A         	call	_scale
  3287  0002F2  C123  F15D         	movff	?_scale,printf@tmpval
  3288  0002F6  C124  F15E         	movff	?_scale+1,printf@tmpval+1
  3289  0002FA  C125  F15F         	movff	?_scale+2,printf@tmpval+2
  3290                           
  3291                           ;doprnt.c: 847: tmpval.integ *= fval;
  3292  0002FE  C15D  F114         	movff	printf@tmpval,___ftmul@f1
  3293  000302  C15E  F115         	movff	printf@tmpval+1,___ftmul@f1+1
  3294  000306  C15F  F116         	movff	printf@tmpval+2,___ftmul@f1+2
  3295  00030A  C165  F117         	movff	printf@fval,___ftmul@f2
  3296  00030E  C166  F118         	movff	printf@fval+1,___ftmul@f2+1
  3297  000312  C167  F119         	movff	printf@fval+2,___ftmul@f2+2
  3298  000316  EC07  F019         	call	___ftmul	;wreg free
  3299  00031A  C114  F15D         	movff	?___ftmul,printf@tmpval
  3300  00031E  C115  F15E         	movff	?___ftmul+1,printf@tmpval+1
  3301  000322  C116  F15F         	movff	?___ftmul+2,printf@tmpval+2
  3302                           
  3303                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  3304  000326  C15D  F100         	movff	printf@tmpval,___ftge@ff1
  3305  00032A  C15E  F101         	movff	printf@tmpval+1,___ftge@ff1+1
  3306  00032E  C15F  F102         	movff	printf@tmpval+2,___ftge@ff1+2
  3307  000332  0E00               	movlw	0
  3308  000334  0101               	movlb	1	; () banked
  3309  000336  6F03               	movwf	___ftge@ff2& (0+255),b
  3310  000338  0E80               	movlw	128
  3311  00033A  0101               	movlb	1	; () banked
  3312  00033C  6F04               	movwf	(___ftge@ff2+1)& (0+255),b
  3313  00033E  0E3F               	movlw	63
  3314  000340  0101               	movlb	1	; () banked
  3315  000342  6F05               	movwf	(___ftge@ff2+2)& (0+255),b
  3316  000344  EC47  F020         	call	___ftge	;wreg free
  3317  000348  0101               	movlb	1	; () banked
  3318  00034A  B0D8               	btfsc	status,0,c
  3319  00034C  D005               	goto	l7611
  3320                           
  3321                           ; BSR set to: 1
  3322                           ;doprnt.c: 849: exp--;
  3323  00034E  0101               	movlb	1	; () banked
  3324  000350  0761               	decf	printf@exp& (0+255),f,b
  3325  000352  A0D8               	btfss	status,0,c
  3326  000354  0762               	decf	(printf@exp+1)& (0+255),f,b
  3327  000356  D017               	goto	l7615
  3328  000358                     l7611:
  3329                           
  3330                           ; BSR set to: 1
  3331                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  3332  000358  C15D  F100         	movff	printf@tmpval,___ftge@ff1
  3333  00035C  C15E  F101         	movff	printf@tmpval+1,___ftge@ff1+1
  3334  000360  C15F  F102         	movff	printf@tmpval+2,___ftge@ff1+2
  3335  000364  0E00               	movlw	0
  3336  000366  0101               	movlb	1	; () banked
  3337  000368  6F03               	movwf	___ftge@ff2& (0+255),b
  3338  00036A  0E20               	movlw	32
  3339  00036C  0101               	movlb	1	; () banked
  3340  00036E  6F04               	movwf	(___ftge@ff2+1)& (0+255),b
  3341  000370  0E41               	movlw	65
  3342  000372  0101               	movlb	1	; () banked
  3343  000374  6F05               	movwf	(___ftge@ff2+2)& (0+255),b
  3344  000376  EC47  F020         	call	___ftge	;wreg free
  3345  00037A  0101               	movlb	1	; () banked
  3346  00037C  A0D8               	btfss	status,0,c
  3347  00037E  D003               	goto	l7615
  3348                           
  3349                           ; BSR set to: 1
  3350                           ;doprnt.c: 851: exp++;
  3351  000380  0101               	movlb	1	; () banked
  3352  000382  4B61               	infsnz	printf@exp& (0+255),f,b
  3353  000384  2B62               	incf	(printf@exp+1)& (0+255),f,b
  3354  000386                     l7615:
  3355                           
  3356                           ; BSR set to: 1
  3357                           ;doprnt.c: 852: }
  3358                           ;doprnt.c: 1112: if(prec <= 12)
  3359  000386  0101               	movlb	1	; () banked
  3360  000388  BF5C               	btfsc	(printf@prec+1)& (0+255),7,b
  3361  00038A  D008               	goto	l7617
  3362  00038C  0101               	movlb	1	; () banked
  3363  00038E  515C               	movf	(printf@prec+1)& (0+255),w,b
  3364  000390  E11D               	bnz	l7619
  3365  000392  0E0D               	movlw	13
  3366  000394  0101               	movlb	1	; () banked
  3367  000396  5D5B               	subwf	printf@prec& (0+255),w,b
  3368  000398  B0D8               	btfsc	status,0,c
  3369  00039A  D018               	goto	l7619
  3370  00039C                     l7617:
  3371                           
  3372                           ; BSR set to: 1
  3373                           ;doprnt.c: 1113: fval += fround(prec);
  3374  00039C  C165  F12D         	movff	printf@fval,___ftadd@f1
  3375  0003A0  C166  F12E         	movff	printf@fval+1,___ftadd@f1+1
  3376  0003A4  C167  F12F         	movff	printf@fval+2,___ftadd@f1+2
  3377  0003A8  0101               	movlb	1	; () banked
  3378  0003AA  515B               	movf	printf@prec& (0+255),w,b
  3379  0003AC  EC36  F011         	call	_fround
  3380  0003B0  C123  F130         	movff	?_fround,___ftadd@f2
  3381  0003B4  C124  F131         	movff	?_fround+1,___ftadd@f2+1
  3382  0003B8  C125  F132         	movff	?_fround+2,___ftadd@f2+2
  3383  0003BC  EC8C  F012         	call	___ftadd	;wreg free
  3384  0003C0  C12D  F165         	movff	?___ftadd,printf@fval
  3385  0003C4  C12E  F166         	movff	?___ftadd+1,printf@fval+1
  3386  0003C8  C12F  F167         	movff	?___ftadd+2,printf@fval+2
  3387  0003CC                     l7619:
  3388                           
  3389                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  3390  0003CC  0101               	movlb	1	; () banked
  3391  0003CE  BF62               	btfsc	(printf@exp+1)& (0+255),7,b
  3392  0003D0  D008               	goto	l7621
  3393  0003D2  0101               	movlb	1	; () banked
  3394  0003D4  5162               	movf	(printf@exp+1)& (0+255),w,b
  3395  0003D6  E12A               	bnz	l7627
  3396  0003D8  0E0A               	movlw	10
  3397  0003DA  0101               	movlb	1	; () banked
  3398  0003DC  5D61               	subwf	printf@exp& (0+255),w,b
  3399  0003DE  B0D8               	btfsc	status,0,c
  3400  0003E0  D025               	goto	l7627
  3401  0003E2                     l7621:
  3402                           
  3403                           ; BSR set to: 1
  3404  0003E2  0101               	movlb	1	; () banked
  3405  0003E4  5165               	movf	printf@fval& (0+255),w,b
  3406  0003E6  0101               	movlb	1	; () banked
  3407  0003E8  1166               	iorwf	(printf@fval+1)& (0+255),w,b
  3408  0003EA  0101               	movlb	1	; () banked
  3409  0003EC  1167               	iorwf	(printf@fval+2)& (0+255),w,b
  3410  0003EE  B4D8               	btfsc	status,2,c
  3411  0003F0  D063               	goto	l7641
  3412                           
  3413                           ; BSR set to: 1
  3414  0003F2  C165  F12A         	movff	printf@fval,___fttol@f1
  3415  0003F6  C166  F12B         	movff	printf@fval+1,___fttol@f1+1
  3416  0003FA  C167  F12C         	movff	printf@fval+2,___fttol@f1+2
  3417  0003FE  ECB6  F019         	call	___fttol	;wreg free
  3418  000402  0101               	movlb	1	; () banked
  3419  000404  512A               	movf	?___fttol& (0+255),w,b
  3420  000406  0101               	movlb	1	; () banked
  3421  000408  112B               	iorwf	(?___fttol+1)& (0+255),w,b
  3422  00040A  0101               	movlb	1	; () banked
  3423  00040C  112C               	iorwf	(?___fttol+2)& (0+255),w,b
  3424  00040E  0101               	movlb	1	; () banked
  3425  000410  112D               	iorwf	(?___fttol+3)& (0+255),w,b
  3426  000412  A4D8               	btfss	status,2,c
  3427  000414  D051               	goto	l7641
  3428                           
  3429                           ; BSR set to: 1
  3430  000416  0101               	movlb	1	; () banked
  3431  000418  BF62               	btfsc	(printf@exp+1)& (0+255),7,b
  3432  00041A  D04E               	goto	l7641
  3433  00041C  0101               	movlb	1	; () banked
  3434  00041E  5162               	movf	(printf@exp+1)& (0+255),w,b
  3435  000420  E105               	bnz	l7627
  3436  000422  0E02               	movlw	2
  3437  000424  0101               	movlb	1	; () banked
  3438  000426  5D61               	subwf	printf@exp& (0+255),w,b
  3439  000428  A0D8               	btfss	status,0,c
  3440  00042A  D046               	goto	l7641
  3441  00042C                     l7627:
  3442                           
  3443                           ; BSR set to: 1
  3444                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  3445  00042C  C15D  F100         	movff	printf@tmpval,___ftge@ff1
  3446  000430  C15E  F101         	movff	printf@tmpval+1,___ftge@ff1+1
  3447  000434  C15F  F102         	movff	printf@tmpval+2,___ftge@ff1+2
  3448  000438  0E70               	movlw	112
  3449  00043A  0101               	movlb	1	; () banked
  3450  00043C  6F03               	movwf	___ftge@ff2& (0+255),b
  3451  00043E  0E89               	movlw	137
  3452  000440  0101               	movlb	1	; () banked
  3453  000442  6F04               	movwf	(___ftge@ff2+1)& (0+255),b
  3454  000444  0E40               	movlw	64
  3455  000446  0101               	movlb	1	; () banked
  3456  000448  6F05               	movwf	(___ftge@ff2+2)& (0+255),b
  3457  00044A  EC47  F020         	call	___ftge	;wreg free
  3458  00044E  0101               	movlb	1	; () banked
  3459  000450  B0D8               	btfsc	status,0,c
  3460  000452  D003               	goto	l7631
  3461                           
  3462                           ; BSR set to: 1
  3463                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  3464  000454  0101               	movlb	1	; () banked
  3465  000456  0EF7               	movlw	247
  3466  000458  D002               	goto	L1
  3467  00045A                     l7631:
  3468                           
  3469                           ; BSR set to: 1
  3470                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  3471  00045A  0101               	movlb	1	; () banked
  3472  00045C  0EF8               	movlw	248
  3473  00045E                     L1:
  3474  00045E  2761               	addwf	printf@exp& (0+255),f,b
  3475  000460  0EFF               	movlw	255
  3476  000462  2362               	addwfc	(printf@exp+1)& (0+255),f,b
  3477                           
  3478                           ; BSR set to: 1
  3479                           ;doprnt.c: 1124: }
  3480                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  3481                           
  3482                           ; BSR set to: 1
  3483  000464  0101               	movlb	1	; () banked
  3484  000466  5161               	movf	printf@exp& (0+255),w,b
  3485  000468  ECFB  F00A         	call	_scale
  3486  00046C  C123  F15D         	movff	?_scale,printf@tmpval
  3487  000470  C124  F15E         	movff	?_scale+1,printf@tmpval+1
  3488  000474  C125  F15F         	movff	?_scale+2,printf@tmpval+2
  3489                           
  3490                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  3491  000478  C165  F100         	movff	printf@fval,__tdiv_to_l_@f1
  3492  00047C  C166  F101         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  3493  000480  C167  F102         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  3494  000484  C15D  F103         	movff	printf@tmpval,__tdiv_to_l_@f2
  3495  000488  C15E  F104         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  3496  00048C  C15F  F105         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  3497  000490  ECC3  F016         	call	__tdiv_to_l_	;wreg free
  3498  000494  C100  F157         	movff	?__tdiv_to_l_,printf@val
  3499  000498  C101  F158         	movff	?__tdiv_to_l_+1,printf@val+1
  3500  00049C  C102  F159         	movff	?__tdiv_to_l_+2,printf@val+2
  3501  0004A0  C103  F15A         	movff	?__tdiv_to_l_+3,printf@val+3
  3502                           
  3503                           ;doprnt.c: 1129: fval = 0.0;
  3504  0004A4  0E00               	movlw	0
  3505  0004A6  0101               	movlb	1	; () banked
  3506  0004A8  6F65               	movwf	printf@fval& (0+255),b
  3507  0004AA  0E00               	movlw	0
  3508  0004AC  0101               	movlb	1	; () banked
  3509  0004AE  6F66               	movwf	(printf@fval+1)& (0+255),b
  3510  0004B0  0E00               	movlw	0
  3511  0004B2  0101               	movlb	1	; () banked
  3512  0004B4  6F67               	movwf	(printf@fval+2)& (0+255),b
  3513                           
  3514                           ;doprnt.c: 1130: } else {
  3515  0004B6  D033               	goto	l7645
  3516  0004B8                     l7641:
  3517                           
  3518                           ; BSR set to: 1
  3519                           ;doprnt.c: 1131: val = (unsigned long)fval;
  3520  0004B8  C165  F12A         	movff	printf@fval,___fttol@f1
  3521  0004BC  C166  F12B         	movff	printf@fval+1,___fttol@f1+1
  3522  0004C0  C167  F12C         	movff	printf@fval+2,___fttol@f1+2
  3523  0004C4  ECB6  F019         	call	___fttol	;wreg free
  3524  0004C8  C12A  F157         	movff	?___fttol,printf@val
  3525  0004CC  C12B  F158         	movff	?___fttol+1,printf@val+1
  3526  0004D0  C12C  F159         	movff	?___fttol+2,printf@val+2
  3527  0004D4  C12D  F15A         	movff	?___fttol+3,printf@val+3
  3528                           
  3529                           ;doprnt.c: 1132: fval -= (double)val;
  3530  0004D8  C165  F139         	movff	printf@fval,___ftsub@f1
  3531  0004DC  C166  F13A         	movff	printf@fval+1,___ftsub@f1+1
  3532  0004E0  C167  F13B         	movff	printf@fval+2,___ftsub@f1+2
  3533  0004E4  C157  F108         	movff	printf@val,___lltoft@c
  3534  0004E8  C158  F109         	movff	printf@val+1,___lltoft@c+1
  3535  0004EC  C159  F10A         	movff	printf@val+2,___lltoft@c+2
  3536  0004F0  C15A  F10B         	movff	printf@val+3,___lltoft@c+3
  3537  0004F4  EC54  F024         	call	___lltoft	;wreg free
  3538  0004F8  C108  F13C         	movff	?___lltoft,___ftsub@f2
  3539  0004FC  C109  F13D         	movff	?___lltoft+1,___ftsub@f2+1
  3540  000500  C10A  F13E         	movff	?___lltoft+2,___ftsub@f2+2
  3541  000504  EC31  F026         	call	___ftsub	;wreg free
  3542  000508  C139  F165         	movff	?___ftsub,printf@fval
  3543  00050C  C13A  F166         	movff	?___ftsub+1,printf@fval+1
  3544  000510  C13B  F167         	movff	?___ftsub+2,printf@fval+2
  3545                           
  3546                           ;doprnt.c: 1133: exp = 0;
  3547  000514  0E00               	movlw	0
  3548  000516  0101               	movlb	1	; () banked
  3549  000518  6F62               	movwf	(printf@exp+1)& (0+255),b
  3550  00051A  0E00               	movlw	0
  3551  00051C  6F61               	movwf	printf@exp& (0+255),b
  3552  00051E                     l7645:
  3553                           
  3554                           ; BSR set to: 1
  3555                           ;doprnt.c: 1134: }
  3556                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  3557  00051E  0E01               	movlw	1
  3558  000520  0101               	movlb	1	; () banked
  3559  000522  6F6A               	movwf	printf@c& (0+255),b
  3560  000524                     l7647:
  3561                           
  3562                           ; BSR set to: 1
  3563  000524  0E0A               	movlw	10
  3564  000526  0101               	movlb	1	; () banked
  3565  000528  196A               	xorwf	printf@c& (0+255),w,b
  3566  00052A  B4D8               	btfsc	status,2,c
  3567  00052C  D01E               	goto	l7659
  3568                           
  3569                           ; BSR set to: 1
  3570                           ;doprnt.c: 1137: if(val < dpowers[c])
  3571                           
  3572                           ; BSR set to: 1
  3573                           
  3574                           ; BSR set to: 1
  3575  00052E  0101               	movlb	1	; () banked
  3576  000530  516A               	movf	printf@c& (0+255),w,b
  3577  000532  0D04               	mullw	4
  3578  000534  0EE1               	movlw	low _dpowers
  3579  000536  24F3               	addwf	prodl,w,c
  3580  000538  6EF6               	movwf	tblptrl,c
  3581  00053A  0EFB               	movlw	high _dpowers
  3582  00053C  20F4               	addwfc	prodh,w,c
  3583  00053E  6EF7               	movwf	tblptrh,c
  3584  000540                     	if	0	;There are less than 3 active tblptr bytes
  3585  000540                     	endif
  3586  000540  0009               	tblrd		*+
  3587  000542  50F5               	movf	tablat,w,c
  3588  000544  0101               	movlb	1	; () banked
  3589  000546  5D57               	subwf	printf@val& (0+255),w,b
  3590  000548  0009               	tblrd		*+
  3591  00054A  50F5               	movf	tablat,w,c
  3592  00054C  0101               	movlb	1	; () banked
  3593  00054E  5958               	subwfb	(printf@val+1)& (0+255),w,b
  3594  000550  0009               	tblrd		*+
  3595  000552  50F5               	movf	tablat,w,c
  3596  000554  0101               	movlb	1	; () banked
  3597  000556  5959               	subwfb	(printf@val+2)& (0+255),w,b
  3598  000558  0009               	tblrd		*+
  3599  00055A  50F5               	movf	tablat,w,c
  3600  00055C  0101               	movlb	1	; () banked
  3601  00055E  595A               	subwfb	(printf@val+3)& (0+255),w,b
  3602  000560  A0D8               	btfss	status,0,c
  3603  000562  D003               	goto	l7659
  3604                           
  3605                           ; BSR set to: 1
  3606                           
  3607                           ; BSR set to: 1
  3608                           
  3609                           ; BSR set to: 1
  3610                           ;doprnt.c: 1138: break;
  3611  000564  0101               	movlb	1	; () banked
  3612  000566  2B6A               	incf	printf@c& (0+255),f,b
  3613  000568  D7DD               	goto	l7647
  3614  00056A                     l7659:
  3615                           
  3616                           ; BSR set to: 1
  3617                           ;doprnt.c: 1142: width -= prec + c + exp;
  3618  00056A  C16A  F147         	movff	printf@c,??_printf
  3619  00056E  0101               	movlb	1	; () banked
  3620  000570  6B48               	clrf	(??_printf+1)& (0+255),b
  3621  000572  BF47               	btfsc	??_printf& (0+255),7,b
  3622  000574  0748               	decf	(??_printf+1)& (0+255),f,b
  3623  000576  0101               	movlb	1	; () banked
  3624  000578  515B               	movf	printf@prec& (0+255),w,b
  3625  00057A  0101               	movlb	1	; () banked
  3626  00057C  2747               	addwf	??_printf& (0+255),f,b
  3627  00057E  0101               	movlb	1	; () banked
  3628  000580  515C               	movf	(printf@prec+1)& (0+255),w,b
  3629  000582  0101               	movlb	1	; () banked
  3630  000584  2348               	addwfc	(??_printf+1)& (0+255),f,b
  3631  000586  0101               	movlb	1	; () banked
  3632  000588  5161               	movf	printf@exp& (0+255),w,b
  3633  00058A  0101               	movlb	1	; () banked
  3634  00058C  2747               	addwf	??_printf& (0+255),f,b
  3635  00058E  0101               	movlb	1	; () banked
  3636  000590  5162               	movf	(printf@exp+1)& (0+255),w,b
  3637  000592  0101               	movlb	1	; () banked
  3638  000594  2348               	addwfc	(??_printf+1)& (0+255),f,b
  3639  000596  0101               	movlb	1	; () banked
  3640  000598  5147               	movf	??_printf& (0+255),w,b
  3641  00059A  0101               	movlb	1	; () banked
  3642  00059C  5F68               	subwf	printf@width& (0+255),f,b
  3643  00059E  0101               	movlb	1	; () banked
  3644  0005A0  5148               	movf	(??_printf+1)& (0+255),w,b
  3645  0005A2  0101               	movlb	1	; () banked
  3646  0005A4  5B69               	subwfb	(printf@width+1)& (0+255),f,b
  3647                           
  3648                           ;doprnt.c: 1143: if(
  3649                           ;doprnt.c: 1147: prec)
  3650  0005A6  0101               	movlb	1	; () banked
  3651  0005A8  515B               	movf	printf@prec& (0+255),w,b
  3652  0005AA  0101               	movlb	1	; () banked
  3653  0005AC  115C               	iorwf	(printf@prec+1)& (0+255),w,b
  3654  0005AE  B4D8               	btfsc	status,2,c
  3655  0005B0  D004               	goto	l7663
  3656                           
  3657                           ; BSR set to: 1
  3658                           ;doprnt.c: 1148: width--;
  3659  0005B2  0101               	movlb	1	; () banked
  3660  0005B4  0768               	decf	printf@width& (0+255),f,b
  3661  0005B6  A0D8               	btfss	status,0,c
  3662  0005B8  0769               	decf	(printf@width+1)& (0+255),f,b
  3663  0005BA                     l7663:
  3664                           
  3665                           ; BSR set to: 1
  3666                           ;doprnt.c: 1149: if(flag & 0x03)
  3667  0005BA  0E03               	movlw	3
  3668  0005BC  0101               	movlb	1	; () banked
  3669  0005BE  1563               	andwf	printf@flag& (0+255),w,b
  3670  0005C0  0101               	movlb	1	; () banked
  3671  0005C2  6F47               	movwf	??_printf& (0+255),b
  3672  0005C4  0E00               	movlw	0
  3673  0005C6  0101               	movlb	1	; () banked
  3674  0005C8  1564               	andwf	(printf@flag+1)& (0+255),w,b
  3675  0005CA  0101               	movlb	1	; () banked
  3676  0005CC  6F48               	movwf	(??_printf+1)& (0+255),b
  3677  0005CE  0101               	movlb	1	; () banked
  3678  0005D0  5147               	movf	??_printf& (0+255),w,b
  3679  0005D2  0101               	movlb	1	; () banked
  3680  0005D4  1148               	iorwf	(??_printf+1)& (0+255),w,b
  3681  0005D6  B4D8               	btfsc	status,2,c
  3682  0005D8  D004               	goto	l7667
  3683                           
  3684                           ; BSR set to: 1
  3685                           ;doprnt.c: 1150: width--;
  3686  0005DA  0101               	movlb	1	; () banked
  3687  0005DC  0768               	decf	printf@width& (0+255),f,b
  3688  0005DE  A0D8               	btfss	status,0,c
  3689  0005E0  0769               	decf	(printf@width+1)& (0+255),f,b
  3690  0005E2                     l7667:
  3691                           
  3692                           ; BSR set to: 1
  3693                           ;doprnt.c: 1153: if(flag & 0x04) {
  3694  0005E2  0101               	movlb	1	; () banked
  3695  0005E4  A563               	btfss	printf@flag& (0+255),2,b
  3696  0005E6  D02D               	goto	l7683
  3697                           
  3698                           ; BSR set to: 1
  3699                           ;doprnt.c: 1157: if(flag & 0x03)
  3700  0005E8  0E03               	movlw	3
  3701  0005EA  0101               	movlb	1	; () banked
  3702  0005EC  1563               	andwf	printf@flag& (0+255),w,b
  3703  0005EE  0101               	movlb	1	; () banked
  3704  0005F0  6F47               	movwf	??_printf& (0+255),b
  3705  0005F2  0E00               	movlw	0
  3706  0005F4  0101               	movlb	1	; () banked
  3707  0005F6  1564               	andwf	(printf@flag+1)& (0+255),w,b
  3708  0005F8  0101               	movlb	1	; () banked
  3709  0005FA  6F48               	movwf	(??_printf+1)& (0+255),b
  3710  0005FC  0101               	movlb	1	; () banked
  3711  0005FE  5147               	movf	??_printf& (0+255),w,b
  3712  000600  0101               	movlb	1	; () banked
  3713  000602  1148               	iorwf	(??_printf+1)& (0+255),w,b
  3714  000604  B4D8               	btfsc	status,2,c
  3715  000606  D00B               	goto	l7677
  3716                           
  3717                           ; BSR set to: 1
  3718                           ;doprnt.c: 1159: (putch('-') );
  3719  000608  0E2D               	movlw	45
  3720  00060A  EC7B  F028         	call	_putch
  3721                           
  3722                           ;doprnt.c: 1168: while(width > 0) {
  3723  00060E  D007               	goto	l7677
  3724  000610                     l7673:
  3725                           
  3726                           ;doprnt.c: 1169: (putch('0') );
  3727  000610  0E30               	movlw	48
  3728  000612  EC7B  F028         	call	_putch
  3729                           
  3730                           ;doprnt.c: 1170: width--;
  3731  000616  0101               	movlb	1	; () banked
  3732  000618  0768               	decf	printf@width& (0+255),f,b
  3733  00061A  A0D8               	btfss	status,0,c
  3734  00061C  0769               	decf	(printf@width+1)& (0+255),f,b
  3735  00061E                     l7677:
  3736  00061E  0101               	movlb	1	; () banked
  3737  000620  BF69               	btfsc	(printf@width+1)& (0+255),7,b
  3738  000622  D074               	goto	l7695
  3739  000624  0101               	movlb	1	; () banked
  3740  000626  5169               	movf	(printf@width+1)& (0+255),w,b
  3741  000628  E1F3               	bnz	l7673
  3742  00062A  0101               	movlb	1	; () banked
  3743  00062C  0568               	decf	printf@width& (0+255),w,b
  3744  00062E  A0D8               	btfss	status,0,c
  3745  000630  D06D               	goto	l7695
  3746  000632  D7EE               	goto	l7673
  3747  000634                     l7679:
  3748                           
  3749                           ; BSR set to: 1
  3750                           ;doprnt.c: 1181: (putch(' ') );
  3751  000634  0E20               	movlw	32
  3752  000636  EC7B  F028         	call	_putch
  3753                           
  3754                           ;doprnt.c: 1182: width--;
  3755  00063A  0101               	movlb	1	; () banked
  3756  00063C  0768               	decf	printf@width& (0+255),f,b
  3757  00063E  A0D8               	btfss	status,0,c
  3758  000640  0769               	decf	(printf@width+1)& (0+255),f,b
  3759  000642                     l7683:
  3760                           
  3761                           ; BSR set to: 1
  3762  000642  0101               	movlb	1	; () banked
  3763  000644  BF69               	btfsc	(printf@width+1)& (0+255),7,b
  3764  000646  D007               	goto	l7685
  3765  000648  0101               	movlb	1	; () banked
  3766  00064A  5169               	movf	(printf@width+1)& (0+255),w,b
  3767  00064C  E1F3               	bnz	l7679
  3768  00064E  0101               	movlb	1	; () banked
  3769  000650  0568               	decf	printf@width& (0+255),w,b
  3770  000652  B0D8               	btfsc	status,0,c
  3771  000654  D7EF               	goto	l7679
  3772  000656                     l7685:
  3773                           
  3774                           ; BSR set to: 1
  3775                           ;doprnt.c: 1183: }
  3776                           ;doprnt.c: 1188: if(flag & 0x03)
  3777  000656  0E03               	movlw	3
  3778  000658  0101               	movlb	1	; () banked
  3779  00065A  1563               	andwf	printf@flag& (0+255),w,b
  3780  00065C  0101               	movlb	1	; () banked
  3781  00065E  6F47               	movwf	??_printf& (0+255),b
  3782  000660  0E00               	movlw	0
  3783  000662  0101               	movlb	1	; () banked
  3784  000664  1564               	andwf	(printf@flag+1)& (0+255),w,b
  3785  000666  0101               	movlb	1	; () banked
  3786  000668  6F48               	movwf	(??_printf+1)& (0+255),b
  3787  00066A  0101               	movlb	1	; () banked
  3788  00066C  5147               	movf	??_printf& (0+255),w,b
  3789  00066E  0101               	movlb	1	; () banked
  3790  000670  1148               	iorwf	(??_printf+1)& (0+255),w,b
  3791  000672  B4D8               	btfsc	status,2,c
  3792  000674  D04B               	goto	l7695
  3793                           
  3794                           ; BSR set to: 1
  3795                           ;doprnt.c: 1190: (putch('-') );
  3796  000676  0E2D               	movlw	45
  3797  000678  EC7B  F028         	call	_putch
  3798                           
  3799                           ;doprnt.c: 1195: }
  3800                           ;doprnt.c: 1196: while(c--) {
  3801  00067C  D047               	goto	l7695
  3802  00067E                     l7689:
  3803                           
  3804                           ;doprnt.c: 1200: {
  3805                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  3806  00067E  C157  F100         	movff	printf@val,___lldiv@dividend
  3807  000682  C158  F101         	movff	printf@val+1,___lldiv@dividend+1
  3808  000686  C159  F102         	movff	printf@val+2,___lldiv@dividend+2
  3809  00068A  C15A  F103         	movff	printf@val+3,___lldiv@dividend+3
  3810  00068E  0101               	movlb	1	; () banked
  3811  000690  516A               	movf	printf@c& (0+255),w,b
  3812  000692  0D04               	mullw	4
  3813  000694  0EE1               	movlw	low _dpowers
  3814  000696  24F3               	addwf	prodl,w,c
  3815  000698  6EF6               	movwf	tblptrl,c
  3816  00069A  0EFB               	movlw	high _dpowers
  3817  00069C  20F4               	addwfc	prodh,w,c
  3818  00069E  6EF7               	movwf	tblptrh,c
  3819  0006A0                     	if	0	;There are less than 3 active tblptr bytes
  3820  0006A0                     	endif
  3821  0006A0  0009               	tblrd		*+
  3822  0006A2  CFF5 F104          	movff	tablat,___lldiv@divisor
  3823  0006A6  0009               	tblrd		*+
  3824  0006A8  CFF5 F105          	movff	tablat,___lldiv@divisor+1
  3825  0006AC  0009               	tblrd		*+
  3826  0006AE  CFF5 F106          	movff	tablat,___lldiv@divisor+2
  3827  0006B2  000A               	tblrd		*-
  3828  0006B4  CFF5 F107          	movff	tablat,___lldiv@divisor+3
  3829  0006B8  EC6D  F021         	call	___lldiv	;wreg free
  3830  0006BC  C100  F15D         	movff	?___lldiv,printf@tmpval
  3831  0006C0  C101  F15E         	movff	?___lldiv+1,printf@tmpval+1
  3832  0006C4  C102  F15F         	movff	?___lldiv+2,printf@tmpval+2
  3833  0006C8  C103  F160         	movff	?___lldiv+3,printf@tmpval+3
  3834                           
  3835                           ;doprnt.c: 1202: tmpval.vd %= 10;
  3836  0006CC  C15D  F10D         	movff	printf@tmpval,___llmod@dividend
  3837  0006D0  C15E  F10E         	movff	printf@tmpval+1,___llmod@dividend+1
  3838  0006D4  C15F  F10F         	movff	printf@tmpval+2,___llmod@dividend+2
  3839  0006D8  C160  F110         	movff	printf@tmpval+3,___llmod@dividend+3
  3840  0006DC  0E0A               	movlw	10
  3841  0006DE  0101               	movlb	1	; () banked
  3842  0006E0  6F11               	movwf	___llmod@divisor& (0+255),b
  3843  0006E2  0E00               	movlw	0
  3844  0006E4  6F12               	movwf	(___llmod@divisor+1)& (0+255),b
  3845  0006E6  0E00               	movlw	0
  3846  0006E8  6F13               	movwf	(___llmod@divisor+2)& (0+255),b
  3847  0006EA  0E00               	movlw	0
  3848  0006EC  6F14               	movwf	(___llmod@divisor+3)& (0+255),b
  3849  0006EE  EC73  F022         	call	___llmod	;wreg free
  3850  0006F2  C10D  F15D         	movff	?___llmod,printf@tmpval
  3851  0006F6  C10E  F15E         	movff	?___llmod+1,printf@tmpval+1
  3852  0006FA  C10F  F15F         	movff	?___llmod+2,printf@tmpval+2
  3853  0006FE  C110  F160         	movff	?___llmod+3,printf@tmpval+3
  3854                           
  3855                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  3856  000702  0101               	movlb	1	; () banked
  3857  000704  515D               	movf	printf@tmpval& (0+255),w,b
  3858  000706  0F30               	addlw	48
  3859  000708  EC7B  F028         	call	_putch
  3860  00070C                     l7695:
  3861  00070C  0101               	movlb	1	; () banked
  3862  00070E  076A               	decf	printf@c& (0+255),f,b
  3863  000710  0101               	movlb	1	; () banked
  3864  000712  296A               	incf	printf@c& (0+255),w,b
  3865  000714  B4D8               	btfsc	status,2,c
  3866  000716  D008               	goto	l7701
  3867  000718  D7B2               	goto	l7689
  3868  00071A                     l7697:
  3869                           
  3870                           ; BSR set to: 1
  3871                           ;doprnt.c: 1208: (putch('0') );
  3872  00071A  0E30               	movlw	48
  3873  00071C  EC7B  F028         	call	_putch
  3874                           
  3875                           ;doprnt.c: 1209: exp--;
  3876  000720  0101               	movlb	1	; () banked
  3877  000722  0761               	decf	printf@exp& (0+255),f,b
  3878  000724  A0D8               	btfss	status,0,c
  3879  000726  0762               	decf	(printf@exp+1)& (0+255),f,b
  3880  000728                     l7701:
  3881                           
  3882                           ; BSR set to: 1
  3883  000728  0101               	movlb	1	; () banked
  3884  00072A  BF62               	btfsc	(printf@exp+1)& (0+255),7,b
  3885  00072C  D007               	goto	l7703
  3886  00072E  0101               	movlb	1	; () banked
  3887  000730  5162               	movf	(printf@exp+1)& (0+255),w,b
  3888  000732  E1F3               	bnz	l7697
  3889  000734  0101               	movlb	1	; () banked
  3890  000736  0561               	decf	printf@exp& (0+255),w,b
  3891  000738  B0D8               	btfsc	status,0,c
  3892  00073A  D7EF               	goto	l7697
  3893  00073C                     l7703:
  3894                           
  3895                           ; BSR set to: 1
  3896                           ;doprnt.c: 1210: }
  3897                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3898  00073C  0101               	movlb	1	; () banked
  3899  00073E  BF5C               	btfsc	(printf@prec+1)& (0+255),7,b
  3900  000740  D00C               	goto	l552
  3901  000742  0101               	movlb	1	; () banked
  3902  000744  515C               	movf	(printf@prec+1)& (0+255),w,b
  3903  000746  E105               	bnz	u8250
  3904  000748  0E09               	movlw	9
  3905  00074A  0101               	movlb	1	; () banked
  3906  00074C  5D5B               	subwf	printf@prec& (0+255),w,b
  3907  00074E  A0D8               	btfss	status,0,c
  3908  000750  D004               	goto	l552
  3909  000752                     u8250:
  3910                           
  3911                           ; BSR set to: 1
  3912                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3913  000752  0E08               	movlw	8
  3914  000754  0101               	movlb	1	; () banked
  3915  000756  6F6A               	movwf	printf@c& (0+255),b
  3916  000758  D002               	goto	l7707
  3917  00075A                     l552:
  3918                           
  3919                           ; BSR set to: 1
  3920                           ;doprnt.c: 1213: else
  3921                           ;doprnt.c: 1214: c = prec;
  3922  00075A  C15B  F16A         	movff	printf@prec,printf@c
  3923  00075E                     l7707:
  3924                           
  3925                           ; BSR set to: 1
  3926                           ;doprnt.c: 1215: prec -= c;
  3927  00075E  0101               	movlb	1	; () banked
  3928  000760  516A               	movf	printf@c& (0+255),w,b
  3929  000762  0101               	movlb	1	; () banked
  3930  000764  5F5B               	subwf	printf@prec& (0+255),f,b
  3931  000766  0E00               	movlw	0
  3932  000768  0101               	movlb	1	; () banked
  3933  00076A  BF6A               	btfsc	printf@c& (0+255),7,b
  3934  00076C  0EFF               	movlw	255
  3935  00076E  0101               	movlb	1	; () banked
  3936  000770  5B5C               	subwfb	(printf@prec+1)& (0+255),f,b
  3937                           
  3938                           ; BSR set to: 1
  3939                           ;doprnt.c: 1219: if(c)
  3940  000772  0101               	movlb	1	; () banked
  3941  000774  516A               	movf	printf@c& (0+255),w,b
  3942  000776  0101               	movlb	1	; () banked
  3943  000778  B4D8               	btfsc	status,2,c
  3944  00077A  D003               	goto	l7713
  3945                           
  3946                           ; BSR set to: 1
  3947                           ;doprnt.c: 1221: (putch('.') );
  3948  00077C  0E2E               	movlw	46
  3949  00077E  EC7B  F028         	call	_putch
  3950  000782                     l7713:
  3951                           
  3952                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3953  000782  0101               	movlb	1	; () banked
  3954  000784  516A               	movf	printf@c& (0+255),w,b
  3955  000786  ECFB  F00A         	call	_scale
  3956  00078A  C123  F14D         	movff	?_scale,_printf$1450
  3957  00078E  C124  F14E         	movff	?_scale+1,_printf$1450+1
  3958  000792  C125  F14F         	movff	?_scale+2,_printf$1450+2
  3959                           
  3960                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3961  000796  C165  F117         	movff	printf@fval,___ftmul@f2
  3962  00079A  C166  F118         	movff	printf@fval+1,___ftmul@f2+1
  3963  00079E  C167  F119         	movff	printf@fval+2,___ftmul@f2+2
  3964  0007A2  C14D  F114         	movff	_printf$1450,___ftmul@f1
  3965  0007A6  C14E  F115         	movff	_printf$1450+1,___ftmul@f1+1
  3966  0007AA  C14F  F116         	movff	_printf$1450+2,___ftmul@f1+2
  3967  0007AE  EC07  F019         	call	___ftmul	;wreg free
  3968  0007B2  C114  F12A         	movff	?___ftmul,___fttol@f1
  3969  0007B6  C115  F12B         	movff	?___ftmul+1,___fttol@f1+1
  3970  0007BA  C116  F12C         	movff	?___ftmul+2,___fttol@f1+2
  3971  0007BE  ECB6  F019         	call	___fttol	;wreg free
  3972  0007C2  C12A  F157         	movff	?___fttol,printf@val
  3973  0007C6  C12B  F158         	movff	?___fttol+1,printf@val+1
  3974  0007CA  C12C  F159         	movff	?___fttol+2,printf@val+2
  3975  0007CE  C12D  F15A         	movff	?___fttol+3,printf@val+3
  3976                           
  3977                           ;doprnt.c: 1228: while(c--) {
  3978  0007D2  D06E               	goto	l7723
  3979  0007D4                     l7717:
  3980                           
  3981                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3982  0007D4  C157  F100         	movff	printf@val,___lldiv@dividend
  3983  0007D8  C158  F101         	movff	printf@val+1,___lldiv@dividend+1
  3984  0007DC  C159  F102         	movff	printf@val+2,___lldiv@dividend+2
  3985  0007E0  C15A  F103         	movff	printf@val+3,___lldiv@dividend+3
  3986  0007E4  0101               	movlb	1	; () banked
  3987  0007E6  516A               	movf	printf@c& (0+255),w,b
  3988  0007E8  0D04               	mullw	4
  3989  0007EA  0EE1               	movlw	low _dpowers
  3990  0007EC  24F3               	addwf	prodl,w,c
  3991  0007EE  6EF6               	movwf	tblptrl,c
  3992  0007F0  0EFB               	movlw	high _dpowers
  3993  0007F2  20F4               	addwfc	prodh,w,c
  3994  0007F4  6EF7               	movwf	tblptrh,c
  3995  0007F6                     	if	0	;There are less than 3 active tblptr bytes
  3996  0007F6                     	endif
  3997  0007F6  0009               	tblrd		*+
  3998  0007F8  CFF5 F104          	movff	tablat,___lldiv@divisor
  3999  0007FC  0009               	tblrd		*+
  4000  0007FE  CFF5 F105          	movff	tablat,___lldiv@divisor+1
  4001  000802  0009               	tblrd		*+
  4002  000804  CFF5 F106          	movff	tablat,___lldiv@divisor+2
  4003  000808  000A               	tblrd		*-
  4004  00080A  CFF5 F107          	movff	tablat,___lldiv@divisor+3
  4005  00080E  EC6D  F021         	call	___lldiv	;wreg free
  4006  000812  C100  F15D         	movff	?___lldiv,printf@tmpval
  4007  000816  C101  F15E         	movff	?___lldiv+1,printf@tmpval+1
  4008  00081A  C102  F15F         	movff	?___lldiv+2,printf@tmpval+2
  4009  00081E  C103  F160         	movff	?___lldiv+3,printf@tmpval+3
  4010                           
  4011                           ;doprnt.c: 1230: tmpval.vd %= 10;
  4012  000822  C15D  F10D         	movff	printf@tmpval,___llmod@dividend
  4013  000826  C15E  F10E         	movff	printf@tmpval+1,___llmod@dividend+1
  4014  00082A  C15F  F10F         	movff	printf@tmpval+2,___llmod@dividend+2
  4015  00082E  C160  F110         	movff	printf@tmpval+3,___llmod@dividend+3
  4016  000832  0E0A               	movlw	10
  4017  000834  0101               	movlb	1	; () banked
  4018  000836  6F11               	movwf	___llmod@divisor& (0+255),b
  4019  000838  0E00               	movlw	0
  4020  00083A  6F12               	movwf	(___llmod@divisor+1)& (0+255),b
  4021  00083C  0E00               	movlw	0
  4022  00083E  6F13               	movwf	(___llmod@divisor+2)& (0+255),b
  4023  000840  0E00               	movlw	0
  4024  000842  6F14               	movwf	(___llmod@divisor+3)& (0+255),b
  4025  000844  EC73  F022         	call	___llmod	;wreg free
  4026  000848  C10D  F15D         	movff	?___llmod,printf@tmpval
  4027  00084C  C10E  F15E         	movff	?___llmod+1,printf@tmpval+1
  4028  000850  C10F  F15F         	movff	?___llmod+2,printf@tmpval+2
  4029  000854  C110  F160         	movff	?___llmod+3,printf@tmpval+3
  4030                           
  4031                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  4032  000858  0101               	movlb	1	; () banked
  4033  00085A  515D               	movf	printf@tmpval& (0+255),w,b
  4034  00085C  0F30               	addlw	48
  4035  00085E  EC7B  F028         	call	_putch
  4036                           
  4037                           ;doprnt.c: 1232: val %= dpowers[c];
  4038  000862  C157  F10D         	movff	printf@val,___llmod@dividend
  4039  000866  C158  F10E         	movff	printf@val+1,___llmod@dividend+1
  4040  00086A  C159  F10F         	movff	printf@val+2,___llmod@dividend+2
  4041  00086E  C15A  F110         	movff	printf@val+3,___llmod@dividend+3
  4042  000872  0101               	movlb	1	; () banked
  4043  000874  516A               	movf	printf@c& (0+255),w,b
  4044  000876  0D04               	mullw	4
  4045  000878  0EE1               	movlw	low _dpowers
  4046  00087A  24F3               	addwf	prodl,w,c
  4047  00087C  6EF6               	movwf	tblptrl,c
  4048  00087E  0EFB               	movlw	high _dpowers
  4049  000880  20F4               	addwfc	prodh,w,c
  4050  000882  6EF7               	movwf	tblptrh,c
  4051  000884                     	if	0	;There are less than 3 active tblptr bytes
  4052  000884                     	endif
  4053  000884  0009               	tblrd		*+
  4054  000886  CFF5 F111          	movff	tablat,___llmod@divisor
  4055  00088A  0009               	tblrd		*+
  4056  00088C  CFF5 F112          	movff	tablat,___llmod@divisor+1
  4057  000890  0009               	tblrd		*+
  4058  000892  CFF5 F113          	movff	tablat,___llmod@divisor+2
  4059  000896  000A               	tblrd		*-
  4060  000898  CFF5 F114          	movff	tablat,___llmod@divisor+3
  4061  00089C  EC73  F022         	call	___llmod	;wreg free
  4062  0008A0  C10D  F157         	movff	?___llmod,printf@val
  4063  0008A4  C10E  F158         	movff	?___llmod+1,printf@val+1
  4064  0008A8  C10F  F159         	movff	?___llmod+2,printf@val+2
  4065  0008AC  C110  F15A         	movff	?___llmod+3,printf@val+3
  4066  0008B0                     l7723:
  4067  0008B0  0101               	movlb	1	; () banked
  4068  0008B2  076A               	decf	printf@c& (0+255),f,b
  4069  0008B4  0101               	movlb	1	; () banked
  4070  0008B6  296A               	incf	printf@c& (0+255),w,b
  4071  0008B8  B4D8               	btfsc	status,2,c
  4072  0008BA  D008               	goto	l7729
  4073  0008BC  D78B               	goto	l7717
  4074  0008BE                     l7725:
  4075                           
  4076                           ; BSR set to: 1
  4077                           ;doprnt.c: 1236: (putch('0') );
  4078  0008BE  0E30               	movlw	48
  4079  0008C0  EC7B  F028         	call	_putch
  4080                           
  4081                           ;doprnt.c: 1237: prec--;
  4082  0008C4  0101               	movlb	1	; () banked
  4083  0008C6  075B               	decf	printf@prec& (0+255),f,b
  4084  0008C8  A0D8               	btfss	status,0,c
  4085  0008CA  075C               	decf	(printf@prec+1)& (0+255),f,b
  4086  0008CC                     l7729:
  4087                           
  4088                           ; BSR set to: 1
  4089  0008CC  0101               	movlb	1	; () banked
  4090  0008CE  515B               	movf	printf@prec& (0+255),w,b
  4091  0008D0  0101               	movlb	1	; () banked
  4092  0008D2  115C               	iorwf	(printf@prec+1)& (0+255),w,b
  4093  0008D4  B4D8               	btfsc	status,2,c
  4094  0008D6  D18D               	goto	l7817
  4095  0008D8  D7F2               	goto	l7725
  4096  0008DA                     l7731:
  4097                           
  4098                           ; BSR set to: 1
  4099                           ;doprnt.c: 1246: }
  4100                           ;doprnt.c: 1273: {
  4101                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4102  0008DA  C153  FFD9         	movff	printf@ap,fsr2l
  4103  0008DE  C154  FFDA         	movff	printf@ap+1,fsr2h
  4104  0008E2  CFDE F147          	movff	postinc2,??_printf
  4105  0008E6  CFDD F148          	movff	postdec2,??_printf+1
  4106  0008EA  C147  F157         	movff	??_printf,printf@val
  4107  0008EE  C148  F158         	movff	??_printf+1,printf@val+1
  4108  0008F2  0101               	movlb	1	; () banked
  4109  0008F4  6B59               	clrf	(printf@val+2)& (0+255),b
  4110  0008F6  6B5A               	clrf	(printf@val+3)& (0+255),b
  4111                           
  4112                           ; BSR set to: 1
  4113  0008F8  0E02               	movlw	2
  4114  0008FA  0101               	movlb	1	; () banked
  4115  0008FC  2753               	addwf	printf@ap& (0+255),f,b
  4116  0008FE  0E00               	movlw	0
  4117  000900  2354               	addwfc	(printf@ap+1)& (0+255),f,b
  4118                           
  4119                           ;doprnt.c: 1287: }
  4120                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  4121  000902  D04C               	goto	l7765
  4122  000904                     l7735:
  4123                           
  4124                           ; BSR set to: 1
  4125                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4126  000904  0E01               	movlw	1
  4127  000906  0101               	movlb	1	; () banked
  4128  000908  6F6A               	movwf	printf@c& (0+255),b
  4129  00090A                     l7737:
  4130                           
  4131                           ; BSR set to: 1
  4132  00090A  0E0A               	movlw	10
  4133  00090C  0101               	movlb	1	; () banked
  4134  00090E  196A               	xorwf	printf@c& (0+255),w,b
  4135  000910  B4D8               	btfsc	status,2,c
  4136  000912  D04D               	goto	l7767
  4137                           
  4138                           ; BSR set to: 1
  4139                           ;doprnt.c: 1306: if(val < dpowers[c])
  4140                           
  4141                           ; BSR set to: 1
  4142                           
  4143                           ; BSR set to: 1
  4144  000914  0101               	movlb	1	; () banked
  4145  000916  516A               	movf	printf@c& (0+255),w,b
  4146  000918  0D04               	mullw	4
  4147  00091A  0EE1               	movlw	low _dpowers
  4148  00091C  24F3               	addwf	prodl,w,c
  4149  00091E  6EF6               	movwf	tblptrl,c
  4150  000920  0EFB               	movlw	high _dpowers
  4151  000922  20F4               	addwfc	prodh,w,c
  4152  000924  6EF7               	movwf	tblptrh,c
  4153  000926                     	if	0	;There are less than 3 active tblptr bytes
  4154  000926                     	endif
  4155  000926  0009               	tblrd		*+
  4156  000928  50F5               	movf	tablat,w,c
  4157  00092A  0101               	movlb	1	; () banked
  4158  00092C  5D57               	subwf	printf@val& (0+255),w,b
  4159  00092E  0009               	tblrd		*+
  4160  000930  50F5               	movf	tablat,w,c
  4161  000932  0101               	movlb	1	; () banked
  4162  000934  5958               	subwfb	(printf@val+1)& (0+255),w,b
  4163  000936  0009               	tblrd		*+
  4164  000938  50F5               	movf	tablat,w,c
  4165  00093A  0101               	movlb	1	; () banked
  4166  00093C  5959               	subwfb	(printf@val+2)& (0+255),w,b
  4167  00093E  0009               	tblrd		*+
  4168  000940  50F5               	movf	tablat,w,c
  4169  000942  0101               	movlb	1	; () banked
  4170  000944  595A               	subwfb	(printf@val+3)& (0+255),w,b
  4171  000946  A0D8               	btfss	status,0,c
  4172  000948  D032               	goto	l7767
  4173                           
  4174                           ; BSR set to: 1
  4175                           
  4176                           ; BSR set to: 1
  4177                           
  4178                           ; BSR set to: 1
  4179                           ;doprnt.c: 1307: break;
  4180  00094A  0101               	movlb	1	; () banked
  4181  00094C  2B6A               	incf	printf@c& (0+255),f,b
  4182  00094E  D7DD               	goto	l7737
  4183  000950                     l7749:
  4184                           
  4185                           ; BSR set to: 1
  4186                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4187  000950  0E01               	movlw	1
  4188  000952  0101               	movlb	1	; () banked
  4189  000954  6F6A               	movwf	printf@c& (0+255),b
  4190  000956                     l7751:
  4191                           
  4192                           ; BSR set to: 1
  4193  000956  0E08               	movlw	8
  4194  000958  0101               	movlb	1	; () banked
  4195  00095A  196A               	xorwf	printf@c& (0+255),w,b
  4196  00095C  B4D8               	btfsc	status,2,c
  4197  00095E  D027               	goto	l7767
  4198                           
  4199                           ; BSR set to: 1
  4200                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4201                           
  4202                           ; BSR set to: 1
  4203                           
  4204                           ; BSR set to: 1
  4205  000960  0101               	movlb	1	; () banked
  4206  000962  516A               	movf	printf@c& (0+255),w,b
  4207  000964  0D04               	mullw	4
  4208  000966  0E57               	movlw	low _hexpowers
  4209  000968  24F3               	addwf	prodl,w,c
  4210  00096A  6EF6               	movwf	tblptrl,c
  4211  00096C  0EFC               	movlw	high _hexpowers
  4212  00096E  20F4               	addwfc	prodh,w,c
  4213  000970  6EF7               	movwf	tblptrh,c
  4214  000972                     	if	0	;There are less than 3 active tblptr bytes
  4215  000972                     	endif
  4216  000972  0009               	tblrd		*+
  4217  000974  50F5               	movf	tablat,w,c
  4218  000976  0101               	movlb	1	; () banked
  4219  000978  5D57               	subwf	printf@val& (0+255),w,b
  4220  00097A  0009               	tblrd		*+
  4221  00097C  50F5               	movf	tablat,w,c
  4222  00097E  0101               	movlb	1	; () banked
  4223  000980  5958               	subwfb	(printf@val+1)& (0+255),w,b
  4224  000982  0009               	tblrd		*+
  4225  000984  50F5               	movf	tablat,w,c
  4226  000986  0101               	movlb	1	; () banked
  4227  000988  5959               	subwfb	(printf@val+2)& (0+255),w,b
  4228  00098A  0009               	tblrd		*+
  4229  00098C  50F5               	movf	tablat,w,c
  4230  00098E  0101               	movlb	1	; () banked
  4231  000990  595A               	subwfb	(printf@val+3)& (0+255),w,b
  4232  000992  A0D8               	btfss	status,0,c
  4233  000994  D00C               	goto	l7767
  4234                           
  4235                           ; BSR set to: 1
  4236                           
  4237                           ; BSR set to: 1
  4238                           
  4239                           ; BSR set to: 1
  4240                           ;doprnt.c: 1318: break;
  4241  000996  0101               	movlb	1	; () banked
  4242  000998  2B6A               	incf	printf@c& (0+255),f,b
  4243  00099A  D7DD               	goto	l7751
  4244  00099C                     l7765:
  4245                           
  4246                           ; BSR set to: 1
  4247  00099C  0101               	movlb	1	; () banked
  4248  00099E  5163               	movf	printf@flag& (0+255),w,b
  4249  0009A0  0BC0               	andlw	192
  4250                           
  4251                           ; Switch size 1, requested type "space"
  4252                           ; Number of cases is 2, Range of values is 128 to 192
  4253                           ; switch strategies available:
  4254                           ; Name         Instructions Cycles
  4255                           ; simple_byte            7     4 (average)
  4256                           ;	Chosen strategy is simple_byte
  4257  0009A2  0A80               	xorlw	128	; case 128
  4258  0009A4  B4D8               	btfsc	status,2,c
  4259  0009A6  D7D4               	goto	l7749
  4260  0009A8  0A40               	xorlw	64	; case 192
  4261  0009AA  B4D8               	btfsc	status,2,c
  4262  0009AC  D7AB               	goto	l7735
  4263  0009AE                     l7767:
  4264                           
  4265                           ; BSR set to: 1
  4266                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4267  0009AE  0101               	movlb	1	; () banked
  4268  0009B0  5168               	movf	printf@width& (0+255),w,b
  4269  0009B2  0101               	movlb	1	; () banked
  4270  0009B4  1169               	iorwf	(printf@width+1)& (0+255),w,b
  4271  0009B6  B4D8               	btfsc	status,2,c
  4272  0009B8  D014               	goto	l7773
  4273                           
  4274                           ; BSR set to: 1
  4275  0009BA  0E03               	movlw	3
  4276  0009BC  0101               	movlb	1	; () banked
  4277  0009BE  1563               	andwf	printf@flag& (0+255),w,b
  4278  0009C0  0101               	movlb	1	; () banked
  4279  0009C2  6F47               	movwf	??_printf& (0+255),b
  4280  0009C4  0E00               	movlw	0
  4281  0009C6  0101               	movlb	1	; () banked
  4282  0009C8  1564               	andwf	(printf@flag+1)& (0+255),w,b
  4283  0009CA  0101               	movlb	1	; () banked
  4284  0009CC  6F48               	movwf	(??_printf+1)& (0+255),b
  4285  0009CE  0101               	movlb	1	; () banked
  4286  0009D0  5147               	movf	??_printf& (0+255),w,b
  4287  0009D2  0101               	movlb	1	; () banked
  4288  0009D4  1148               	iorwf	(??_printf+1)& (0+255),w,b
  4289  0009D6  B4D8               	btfsc	status,2,c
  4290  0009D8  D004               	goto	l7773
  4291                           
  4292                           ; BSR set to: 1
  4293                           ;doprnt.c: 1346: width--;
  4294  0009DA  0101               	movlb	1	; () banked
  4295  0009DC  0768               	decf	printf@width& (0+255),f,b
  4296  0009DE  A0D8               	btfss	status,0,c
  4297  0009E0  0769               	decf	(printf@width+1)& (0+255),f,b
  4298  0009E2                     l7773:
  4299                           
  4300                           ; BSR set to: 1
  4301                           ;doprnt.c: 1381: if(width > c)
  4302  0009E2  0E80               	movlw	128
  4303  0009E4  0101               	movlb	1	; () banked
  4304  0009E6  BF6A               	btfsc	printf@c& (0+255),7,b
  4305  0009E8  0E7F               	movlw	127
  4306  0009EA  0101               	movlb	1	; () banked
  4307  0009EC  6F47               	movwf	??_printf& (0+255),b
  4308  0009EE  0101               	movlb	1	; () banked
  4309  0009F0  5168               	movf	printf@width& (0+255),w,b
  4310  0009F2  0101               	movlb	1	; () banked
  4311  0009F4  5D6A               	subwf	printf@c& (0+255),w,b
  4312  0009F6  0101               	movlb	1	; () banked
  4313  0009F8  5169               	movf	(printf@width+1)& (0+255),w,b
  4314  0009FA  0A80               	xorlw	128
  4315  0009FC  0101               	movlb	1	; () banked
  4316  0009FE  5947               	subwfb	??_printf& (0+255),w,b
  4317  000A00  B0D8               	btfsc	status,0,c
  4318  000A02  D00B               	goto	l7777
  4319                           
  4320                           ; BSR set to: 1
  4321                           ;doprnt.c: 1382: width -= c;
  4322  000A04  0101               	movlb	1	; () banked
  4323  000A06  516A               	movf	printf@c& (0+255),w,b
  4324  000A08  0101               	movlb	1	; () banked
  4325  000A0A  5F68               	subwf	printf@width& (0+255),f,b
  4326  000A0C  0E00               	movlw	0
  4327  000A0E  0101               	movlb	1	; () banked
  4328  000A10  BF6A               	btfsc	printf@c& (0+255),7,b
  4329  000A12  0EFF               	movlw	255
  4330  000A14  0101               	movlb	1	; () banked
  4331  000A16  5B69               	subwfb	(printf@width+1)& (0+255),f,b
  4332  000A18  D005               	goto	l7779
  4333  000A1A                     l7777:
  4334                           
  4335                           ; BSR set to: 1
  4336                           ;doprnt.c: 1383: else
  4337                           ;doprnt.c: 1384: width = 0;
  4338  000A1A  0E00               	movlw	0
  4339  000A1C  0101               	movlb	1	; () banked
  4340  000A1E  6F69               	movwf	(printf@width+1)& (0+255),b
  4341  000A20  0E00               	movlw	0
  4342  000A22  6F68               	movwf	printf@width& (0+255),b
  4343  000A24                     l7779:
  4344                           
  4345                           ; BSR set to: 1
  4346                           ;doprnt.c: 1387: if(flag & 0x04) {
  4347  000A24  0101               	movlb	1	; () banked
  4348  000A26  A563               	btfss	printf@flag& (0+255),2,b
  4349  000A28  D021               	goto	l7791
  4350                           
  4351                           ; BSR set to: 1
  4352                           ;doprnt.c: 1392: if(flag & 0x03)
  4353  000A2A  0E03               	movlw	3
  4354  000A2C  0101               	movlb	1	; () banked
  4355  000A2E  1563               	andwf	printf@flag& (0+255),w,b
  4356  000A30  0101               	movlb	1	; () banked
  4357  000A32  6F47               	movwf	??_printf& (0+255),b
  4358  000A34  0E00               	movlw	0
  4359  000A36  0101               	movlb	1	; () banked
  4360  000A38  1564               	andwf	(printf@flag+1)& (0+255),w,b
  4361  000A3A  0101               	movlb	1	; () banked
  4362  000A3C  6F48               	movwf	(??_printf+1)& (0+255),b
  4363  000A3E  0101               	movlb	1	; () banked
  4364  000A40  5147               	movf	??_printf& (0+255),w,b
  4365  000A42  0101               	movlb	1	; () banked
  4366  000A44  1148               	iorwf	(??_printf+1)& (0+255),w,b
  4367  000A46  B4D8               	btfsc	status,2,c
  4368  000A48  D003               	goto	l7785
  4369                           
  4370                           ; BSR set to: 1
  4371                           ;doprnt.c: 1393: (putch('-') );
  4372  000A4A  0E2D               	movlw	45
  4373  000A4C  EC7B  F028         	call	_putch
  4374  000A50                     l7785:
  4375                           
  4376                           ;doprnt.c: 1415: if(width)
  4377  000A50  0101               	movlb	1	; () banked
  4378  000A52  5168               	movf	printf@width& (0+255),w,b
  4379  000A54  0101               	movlb	1	; () banked
  4380  000A56  1169               	iorwf	(printf@width+1)& (0+255),w,b
  4381  000A58  B4D8               	btfsc	status,2,c
  4382  000A5A  D02E               	goto	l7801
  4383                           
  4384                           ; BSR set to: 1
  4385                           ;doprnt.c: 1417: (putch('0') );
  4386                           
  4387                           ; BSR set to: 1
  4388                           
  4389                           ;doprnt.c: 1416: do
  4390  000A5C  0E30               	movlw	48
  4391  000A5E  EC7B  F028         	call	_putch
  4392                           
  4393                           ;doprnt.c: 1418: while(--width);
  4394  000A62  0101               	movlb	1	; () banked
  4395  000A64  0768               	decf	printf@width& (0+255),f,b
  4396  000A66  A0D8               	btfss	status,0,c
  4397  000A68  0769               	decf	(printf@width+1)& (0+255),f,b
  4398  000A6A  D7F2               	goto	l7785
  4399  000A6C                     l7791:
  4400                           
  4401                           ; BSR set to: 1
  4402                           ;doprnt.c: 1422: {
  4403                           ;doprnt.c: 1424: if(width
  4404                           ;doprnt.c: 1428: )
  4405  000A6C  0101               	movlb	1	; () banked
  4406  000A6E  5168               	movf	printf@width& (0+255),w,b
  4407  000A70  0101               	movlb	1	; () banked
  4408  000A72  1169               	iorwf	(printf@width+1)& (0+255),w,b
  4409  000A74  B4D8               	btfsc	status,2,c
  4410  000A76  D00D               	goto	l7797
  4411  000A78                     l7793:
  4412                           
  4413                           ; BSR set to: 1
  4414                           ;doprnt.c: 1430: (putch(' ') );
  4415  000A78  0E20               	movlw	32
  4416  000A7A  EC7B  F028         	call	_putch
  4417                           
  4418                           ;doprnt.c: 1431: while(--width);
  4419  000A7E  0101               	movlb	1	; () banked
  4420  000A80  0768               	decf	printf@width& (0+255),f,b
  4421  000A82  A0D8               	btfss	status,0,c
  4422  000A84  0769               	decf	(printf@width+1)& (0+255),f,b
  4423  000A86  0101               	movlb	1	; () banked
  4424  000A88  5168               	movf	printf@width& (0+255),w,b
  4425  000A8A  0101               	movlb	1	; () banked
  4426  000A8C  1169               	iorwf	(printf@width+1)& (0+255),w,b
  4427  000A8E  A4D8               	btfss	status,2,c
  4428  000A90  D7F3               	goto	l7793
  4429  000A92                     l7797:
  4430                           
  4431                           ; BSR set to: 1
  4432                           ;doprnt.c: 1438: if(flag & 0x03)
  4433  000A92  0E03               	movlw	3
  4434  000A94  0101               	movlb	1	; () banked
  4435  000A96  1563               	andwf	printf@flag& (0+255),w,b
  4436  000A98  0101               	movlb	1	; () banked
  4437  000A9A  6F47               	movwf	??_printf& (0+255),b
  4438  000A9C  0E00               	movlw	0
  4439  000A9E  0101               	movlb	1	; () banked
  4440  000AA0  1564               	andwf	(printf@flag+1)& (0+255),w,b
  4441  000AA2  0101               	movlb	1	; () banked
  4442  000AA4  6F48               	movwf	(??_printf+1)& (0+255),b
  4443  000AA6  0101               	movlb	1	; () banked
  4444  000AA8  5147               	movf	??_printf& (0+255),w,b
  4445  000AAA  0101               	movlb	1	; () banked
  4446  000AAC  1148               	iorwf	(??_printf+1)& (0+255),w,b
  4447  000AAE  B4D8               	btfsc	status,2,c
  4448  000AB0  D003               	goto	l7801
  4449                           
  4450                           ; BSR set to: 1
  4451                           ;doprnt.c: 1439: (putch('-') );
  4452  000AB2  0E2D               	movlw	45
  4453  000AB4  EC7B  F028         	call	_putch
  4454  000AB8                     l7801:
  4455                           
  4456                           ;doprnt.c: 1469: }
  4457                           ;doprnt.c: 1472: prec = c;
  4458  000AB8  0101               	movlb	1	; () banked
  4459  000ABA  516A               	movf	printf@c& (0+255),w,b
  4460  000ABC  0101               	movlb	1	; () banked
  4461  000ABE  6F5B               	movwf	printf@prec& (0+255),b
  4462  000AC0  6B5C               	clrf	(printf@prec+1)& (0+255),b
  4463  000AC2  BF5B               	btfsc	printf@prec& (0+255),7,b
  4464  000AC4  075C               	decf	(printf@prec+1)& (0+255),f,b
  4465                           
  4466                           ;doprnt.c: 1474: while(prec--) {
  4467  000AC6  D08A               	goto	l7815
  4468  000AC8                     l7803:
  4469                           
  4470                           ; BSR set to: 1
  4471                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4472  000AC8  C15B  F147         	movff	printf@prec,??_printf
  4473  000ACC  C15C  F148         	movff	printf@prec+1,??_printf+1
  4474  000AD0  0101               	movlb	1	; () banked
  4475  000AD2  90D8               	bcf	status,0,c
  4476  000AD4  3747               	rlcf	??_printf& (0+255),f,b
  4477  000AD6  3748               	rlcf	(??_printf+1)& (0+255),f,b
  4478  000AD8  0101               	movlb	1	; () banked
  4479  000ADA  90D8               	bcf	status,0,c
  4480  000ADC  3747               	rlcf	??_printf& (0+255),f,b
  4481  000ADE  3748               	rlcf	(??_printf+1)& (0+255),f,b
  4482  000AE0  0EE1               	movlw	low _dpowers
  4483  000AE2  0101               	movlb	1	; () banked
  4484  000AE4  2547               	addwf	??_printf& (0+255),w,b
  4485  000AE6  6EF6               	movwf	tblptrl,c
  4486  000AE8  0EFB               	movlw	high _dpowers
  4487  000AEA  2148               	addwfc	(??_printf+1)& (0+255),w,b
  4488  000AEC  6EF7               	movwf	tblptrh,c
  4489  000AEE                     	if	0	;There are less than 3 active tblptr bytes
  4490  000AEE                     	endif
  4491  000AEE  0009               	tblrd		*+
  4492  000AF0  CFF5 F104          	movff	tablat,___lldiv@divisor
  4493  000AF4  0009               	tblrd		*+
  4494  000AF6  CFF5 F105          	movff	tablat,___lldiv@divisor+1
  4495  000AFA  0009               	tblrd		*+
  4496  000AFC  CFF5 F106          	movff	tablat,___lldiv@divisor+2
  4497  000B00  000A               	tblrd		*-
  4498  000B02  CFF5 F107          	movff	tablat,___lldiv@divisor+3
  4499  000B06  C157  F100         	movff	printf@val,___lldiv@dividend
  4500  000B0A  C158  F101         	movff	printf@val+1,___lldiv@dividend+1
  4501  000B0E  C159  F102         	movff	printf@val+2,___lldiv@dividend+2
  4502  000B12  C15A  F103         	movff	printf@val+3,___lldiv@dividend+3
  4503  000B16  EC6D  F021         	call	___lldiv	;wreg free
  4504  000B1A  C100  F10D         	movff	?___lldiv,___llmod@dividend
  4505  000B1E  C101  F10E         	movff	?___lldiv+1,___llmod@dividend+1
  4506  000B22  C102  F10F         	movff	?___lldiv+2,___llmod@dividend+2
  4507  000B26  C103  F110         	movff	?___lldiv+3,___llmod@dividend+3
  4508  000B2A  0E0A               	movlw	10
  4509  000B2C  0101               	movlb	1	; () banked
  4510  000B2E  6F11               	movwf	___llmod@divisor& (0+255),b
  4511  000B30  0E00               	movlw	0
  4512  000B32  6F12               	movwf	(___llmod@divisor+1)& (0+255),b
  4513  000B34  0E00               	movlw	0
  4514  000B36  6F13               	movwf	(___llmod@divisor+2)& (0+255),b
  4515  000B38  0E00               	movlw	0
  4516  000B3A  6F14               	movwf	(___llmod@divisor+3)& (0+255),b
  4517  000B3C  EC73  F022         	call	___llmod	;wreg free
  4518  000B40  0101               	movlb	1	; () banked
  4519  000B42  510D               	movf	?___llmod& (0+255),w,b
  4520  000B44  0F30               	addlw	48
  4521  000B46  0101               	movlb	1	; () banked
  4522  000B48  6F6A               	movwf	printf@c& (0+255),b
  4523                           
  4524                           ;doprnt.c: 1491: break;
  4525  000B4A  D044               	goto	l7813
  4526  000B4C                     l7805:
  4527                           
  4528                           ; BSR set to: 1
  4529                           ;doprnt.c: 1499: {
  4530                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4531  000B4C  C157  F100         	movff	printf@val,___lldiv@dividend
  4532  000B50  C158  F101         	movff	printf@val+1,___lldiv@dividend+1
  4533  000B54  C159  F102         	movff	printf@val+2,___lldiv@dividend+2
  4534  000B58  C15A  F103         	movff	printf@val+3,___lldiv@dividend+3
  4535  000B5C  C15B  F147         	movff	printf@prec,??_printf
  4536  000B60  C15C  F148         	movff	printf@prec+1,??_printf+1
  4537  000B64  0101               	movlb	1	; () banked
  4538  000B66  90D8               	bcf	status,0,c
  4539  000B68  3747               	rlcf	??_printf& (0+255),f,b
  4540  000B6A  3748               	rlcf	(??_printf+1)& (0+255),f,b
  4541  000B6C  0101               	movlb	1	; () banked
  4542  000B6E  90D8               	bcf	status,0,c
  4543  000B70  3747               	rlcf	??_printf& (0+255),f,b
  4544  000B72  3748               	rlcf	(??_printf+1)& (0+255),f,b
  4545  000B74  0E57               	movlw	low _hexpowers
  4546  000B76  0101               	movlb	1	; () banked
  4547  000B78  2547               	addwf	??_printf& (0+255),w,b
  4548  000B7A  6EF6               	movwf	tblptrl,c
  4549  000B7C  0EFC               	movlw	high _hexpowers
  4550  000B7E  2148               	addwfc	(??_printf+1)& (0+255),w,b
  4551  000B80  6EF7               	movwf	tblptrh,c
  4552  000B82                     	if	0	;There are less than 3 active tblptr bytes
  4553  000B82                     	endif
  4554  000B82  0009               	tblrd		*+
  4555  000B84  CFF5 F104          	movff	tablat,___lldiv@divisor
  4556  000B88  0009               	tblrd		*+
  4557  000B8A  CFF5 F105          	movff	tablat,___lldiv@divisor+1
  4558  000B8E  0009               	tblrd		*+
  4559  000B90  CFF5 F106          	movff	tablat,___lldiv@divisor+2
  4560  000B94  000A               	tblrd		*-
  4561  000B96  CFF5 F107          	movff	tablat,___lldiv@divisor+3
  4562  000B9A  EC6D  F021         	call	___lldiv	;wreg free
  4563  000B9E  0101               	movlb	1	; () banked
  4564  000BA0  5100               	movf	?___lldiv& (0+255),w,b
  4565  000BA2  0B0F               	andlw	15
  4566  000BA4  0101               	movlb	1	; () banked
  4567  000BA6  6F50               	movwf	printf@idx& (0+255),b
  4568                           
  4569                           ; BSR set to: 1
  4570                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4571  000BA8  0101               	movlb	1	; () banked
  4572  000BAA  5150               	movf	printf@idx& (0+255),w,b
  4573  000BAC  0D01               	mullw	1
  4574  000BAE  0E44               	movlw	low STR_52
  4575  000BB0  24F3               	addwf	prodl,w,c
  4576  000BB2  6EF6               	movwf	tblptrl,c
  4577  000BB4  0EFF               	movlw	high STR_52
  4578  000BB6  20F4               	addwfc	prodh,w,c
  4579  000BB8  6EF7               	movwf	tblptrh,c
  4580  000BBA                     	if	0	;There are less than 3 active tblptr bytes
  4581  000BBA                     	endif
  4582  000BBA  0008               	tblrd		*
  4583  000BBC  CFF5 F16A          	movff	tablat,printf@c
  4584                           
  4585                           ; BSR set to: 1
  4586                           ;doprnt.c: 1523: }
  4587                           
  4588                           ;doprnt.c: 1508: }
  4589                           ;doprnt.c: 1510: break;
  4590  000BC0  D009               	goto	l7813
  4591  000BC2                     l7811:
  4592                           
  4593                           ; BSR set to: 1
  4594  000BC2  0101               	movlb	1	; () banked
  4595  000BC4  5163               	movf	printf@flag& (0+255),w,b
  4596  000BC6  0BC0               	andlw	192
  4597                           
  4598                           ; Switch size 1, requested type "space"
  4599                           ; Number of cases is 2, Range of values is 128 to 192
  4600                           ; switch strategies available:
  4601                           ; Name         Instructions Cycles
  4602                           ; simple_byte            7     4 (average)
  4603                           ;	Chosen strategy is simple_byte
  4604  000BC8  0A80               	xorlw	128	; case 128
  4605  000BCA  B4D8               	btfsc	status,2,c
  4606  000BCC  D7BF               	goto	l7805
  4607  000BCE  0A40               	xorlw	64	; case 192
  4608  000BD0  B4D8               	btfsc	status,2,c
  4609  000BD2  D77A               	goto	l7803
  4610  000BD4                     l7813:
  4611                           
  4612                           ; BSR set to: 1
  4613                           ;doprnt.c: 1524: (putch(c) );
  4614  000BD4  0101               	movlb	1	; () banked
  4615  000BD6  516A               	movf	printf@c& (0+255),w,b
  4616  000BD8  EC7B  F028         	call	_putch
  4617  000BDC                     l7815:
  4618  000BDC  0101               	movlb	1	; () banked
  4619  000BDE  075B               	decf	printf@prec& (0+255),f,b
  4620  000BE0  A0D8               	btfss	status,0,c
  4621  000BE2  075C               	decf	(printf@prec+1)& (0+255),f,b
  4622  000BE4  0101               	movlb	1	; () banked
  4623  000BE6  295B               	incf	printf@prec& (0+255),w,b
  4624  000BE8  E1EC               	bnz	l7811
  4625  000BEA  0101               	movlb	1	; () banked
  4626  000BEC  295C               	incf	(printf@prec+1)& (0+255),w,b
  4627  000BEE  A4D8               	btfss	status,2,c
  4628  000BF0  D7E8               	goto	l7811
  4629  000BF2                     l7817:
  4630  000BF2  C13F  FFF6         	movff	printf@f,tblptrl
  4631  000BF6  C140  FFF7         	movff	printf@f+1,tblptrh
  4632  000BFA  0101               	movlb	1	; () banked
  4633  000BFC  4B3F               	infsnz	printf@f& (0+255),f,b
  4634  000BFE  2B40               	incf	(printf@f+1)& (0+255),f,b
  4635  000C00                     	if	0	;tblptru may be non-zero
  4636  000C00                     	endif
  4637  000C00                     	if	0	;tblptru may be non-zero
  4638  000C00                     	endif
  4639  000C00  0008               	tblrd		*
  4640  000C02  CFF5 F16A          	movff	tablat,printf@c
  4641  000C06  0101               	movlb	1	; () banked
  4642  000C08  516A               	movf	printf@c& (0+255),w,b
  4643  000C0A  B4D8               	btfsc	status,2,c
  4644  000C0C  0012               	return	
  4645  000C0E  EF11  F000         	goto	l7519
  4646  000C12                     __end_of_printf:
  4647                           	opt stack 0
  4648                           tblptru	equ	0xFF8
  4649                           tblptrh	equ	0xFF7
  4650                           tblptrl	equ	0xFF6
  4651                           tablat	equ	0xFF5
  4652                           prodh	equ	0xFF4
  4653                           prodl	equ	0xFF3
  4654                           intcon	equ	0xFF2
  4655                           intcon3	equ	0xFF0
  4656                           postinc0	equ	0xFEE
  4657                           wreg	equ	0xFE8
  4658                           indf2	equ	0xFDF
  4659                           postinc2	equ	0xFDE
  4660                           postdec2	equ	0xFDD
  4661                           fsr2h	equ	0xFDA
  4662                           fsr2l	equ	0xFD9
  4663                           status	equ	0xFD8
  4664                           
  4665 ;; *************** function _scale *****************
  4666 ;; Defined at:
  4667 ;;		line 425 in file "/opt/microchip/xc8/v1.41/sources/common/doprnt.c"
  4668 ;; Parameters:    Size  Location     Type
  4669 ;;  scl             1    wreg     char 
  4670 ;; Auto vars:     Size  Location     Type
  4671 ;;  scl             1   41[BANK1 ] char 
  4672 ;; Return value:  Size  Location     Type
  4673 ;;                  3   35[BANK1 ] char 
  4674 ;; Registers used:
  4675 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4676 ;; Tracked objects:
  4677 ;;		On entry : 0/0
  4678 ;;		On exit  : 0/0
  4679 ;;		Unchanged: 0/0
  4680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4681 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4682 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4684 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4685 ;;Total ram usage:        7 bytes
  4686 ;; Hardware stack levels used:    1
  4687 ;; Hardware stack levels required when called:   10
  4688 ;; This function calls:
  4689 ;;		___awdiv
  4690 ;;		___awmod
  4691 ;;		___ftmul
  4692 ;;		___wmul
  4693 ;; This function is called by:
  4694 ;;		_printf
  4695 ;; This function uses a non-reentrant model
  4696 ;;
  4697                           
  4698                           	psect	text3
  4699  0015F6                     __ptext3:
  4700                           	opt stack 0
  4701  0015F6                     _scale:
  4702                           	opt stack 18
  4703                           
  4704                           ;incstack = 0
  4705                           ;scale@scl stored from wreg
  4706  0015F6  0101               	movlb	1	; () banked
  4707  0015F8  6F29               	movwf	scale@scl& (0+255),b
  4708                           
  4709                           ;doprnt.c: 428: if(scl < 0) {
  4710  0015FA  0101               	movlb	1	; () banked
  4711  0015FC  AF29               	btfss	scale@scl& (0+255),7,b
  4712  0015FE  D12A               	goto	l7263
  4713                           
  4714                           ; BSR set to: 1
  4715                           ;doprnt.c: 429: scl = -scl;
  4716  001600  0101               	movlb	1	; () banked
  4717  001602  6D29               	negf	scale@scl& (0+255),b
  4718                           
  4719                           ;doprnt.c: 430: if(scl>=110)
  4720  001604  0101               	movlb	1	; () banked
  4721  001606  5129               	movf	scale@scl& (0+255),w,b
  4722  001608  0A80               	xorlw	128
  4723  00160A  0F12               	addlw	-238
  4724  00160C  A0D8               	btfss	status,0,c
  4725  00160E  D0AC               	goto	l7253
  4726                           
  4727                           ; BSR set to: 1
  4728                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4729  001610  0E00               	movlw	0
  4730  001612  0101               	movlb	1	; () banked
  4731  001614  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4732  001616  0E03               	movlw	3
  4733  001618  6F10               	movwf	___wmul@multiplicand& (0+255),b
  4734  00161A  0E00               	movlw	0
  4735  00161C  0101               	movlb	1	; () banked
  4736  00161E  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  4737  001620  0E0A               	movlw	10
  4738  001622  6F08               	movwf	___awdiv@divisor& (0+255),b
  4739  001624  0E00               	movlw	0
  4740  001626  0101               	movlb	1	; () banked
  4741  001628  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  4742  00162A  0E64               	movlw	100
  4743  00162C  6F02               	movwf	___awmod@divisor& (0+255),b
  4744  00162E  0101               	movlb	1	; () banked
  4745  001630  5129               	movf	scale@scl& (0+255),w,b
  4746  001632  0101               	movlb	1	; () banked
  4747  001634  6F00               	movwf	___awmod@dividend& (0+255),b
  4748  001636  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  4749  001638  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  4750  00163A  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  4751  00163C  EC22  F022         	call	___awmod	;wreg free
  4752  001640  C100  F106         	movff	?___awmod,___awdiv@dividend
  4753  001644  C101  F107         	movff	?___awmod+1,___awdiv@dividend+1
  4754  001648  EC0E  F021         	call	___awdiv	;wreg free
  4755  00164C  0E09               	movlw	9
  4756  00164E  0101               	movlb	1	; () banked
  4757  001650  2506               	addwf	?___awdiv& (0+255),w,b
  4758  001652  0101               	movlb	1	; () banked
  4759  001654  6F0E               	movwf	___wmul@multiplier& (0+255),b
  4760  001656  0E00               	movlw	0
  4761  001658  0101               	movlb	1	; () banked
  4762  00165A  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  4763  00165C  0101               	movlb	1	; () banked
  4764  00165E  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4765  001660  ECFF  F026         	call	___wmul	;wreg free
  4766  001664  0E30               	movlw	low __npowers_
  4767  001666  0101               	movlb	1	; () banked
  4768  001668  250E               	addwf	?___wmul& (0+255),w,b
  4769  00166A  6EF6               	movwf	tblptrl,c
  4770  00166C  0EFC               	movlw	high __npowers_
  4771  00166E  0101               	movlb	1	; () banked
  4772  001670  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  4773  001672  6EF7               	movwf	tblptrh,c
  4774  001674                     	if	0	;There are less than 3 active tblptr bytes
  4775  001674                     	endif
  4776  001674  0009               	tblrd		*+
  4777  001676  CFF5 F117          	movff	tablat,___ftmul@f2
  4778  00167A  0009               	tblrd		*+
  4779  00167C  CFF5 F118          	movff	tablat,___ftmul@f2+1
  4780  001680  000A               	tblrd		*-
  4781  001682  CFF5 F119          	movff	tablat,___ftmul@f2+2
  4782  001686  0E00               	movlw	0
  4783  001688  0101               	movlb	1	; () banked
  4784  00168A  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  4785  00168C  0E64               	movlw	100
  4786  00168E  6F08               	movwf	___awdiv@divisor& (0+255),b
  4787  001690  0101               	movlb	1	; () banked
  4788  001692  5129               	movf	scale@scl& (0+255),w,b
  4789  001694  0101               	movlb	1	; () banked
  4790  001696  6F06               	movwf	___awdiv@dividend& (0+255),b
  4791  001698  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  4792  00169A  BF06               	btfsc	___awdiv@dividend& (0+255),7,b
  4793  00169C  0707               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4794  00169E  EC0E  F021         	call	___awdiv	;wreg free
  4795  0016A2  0E12               	movlw	18
  4796  0016A4  0101               	movlb	1	; () banked
  4797  0016A6  2506               	addwf	?___awdiv& (0+255),w,b
  4798  0016A8  0101               	movlb	1	; () banked
  4799  0016AA  6F0E               	movwf	___wmul@multiplier& (0+255),b
  4800  0016AC  0E00               	movlw	0
  4801  0016AE  0101               	movlb	1	; () banked
  4802  0016B0  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  4803  0016B2  0101               	movlb	1	; () banked
  4804  0016B4  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4805  0016B6  0E00               	movlw	0
  4806  0016B8  0101               	movlb	1	; () banked
  4807  0016BA  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4808  0016BC  0E03               	movlw	3
  4809  0016BE  6F10               	movwf	___wmul@multiplicand& (0+255),b
  4810  0016C0  ECFF  F026         	call	___wmul	;wreg free
  4811  0016C4  0E30               	movlw	low __npowers_
  4812  0016C6  0101               	movlb	1	; () banked
  4813  0016C8  250E               	addwf	?___wmul& (0+255),w,b
  4814  0016CA  6EF6               	movwf	tblptrl,c
  4815  0016CC  0EFC               	movlw	high __npowers_
  4816  0016CE  0101               	movlb	1	; () banked
  4817  0016D0  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  4818  0016D2  6EF7               	movwf	tblptrh,c
  4819  0016D4                     	if	0	;There are less than 3 active tblptr bytes
  4820  0016D4                     	endif
  4821  0016D4  0009               	tblrd		*+
  4822  0016D6  CFF5 F114          	movff	tablat,___ftmul@f1
  4823  0016DA  0009               	tblrd		*+
  4824  0016DC  CFF5 F115          	movff	tablat,___ftmul@f1+1
  4825  0016E0  000A               	tblrd		*-
  4826  0016E2  CFF5 F116          	movff	tablat,___ftmul@f1+2
  4827  0016E6  EC07  F019         	call	___ftmul	;wreg free
  4828  0016EA  C114  F126         	movff	?___ftmul,_scale$1449
  4829  0016EE  C115  F127         	movff	?___ftmul+1,_scale$1449+1
  4830  0016F2  C116  F128         	movff	?___ftmul+2,_scale$1449+2
  4831                           
  4832                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4833  0016F6  C126  F114         	movff	_scale$1449,___ftmul@f1
  4834  0016FA  C127  F115         	movff	_scale$1449+1,___ftmul@f1+1
  4835  0016FE  C128  F116         	movff	_scale$1449+2,___ftmul@f1+2
  4836  001702  0E00               	movlw	0
  4837  001704  0101               	movlb	1	; () banked
  4838  001706  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4839  001708  0E03               	movlw	3
  4840  00170A  6F10               	movwf	___wmul@multiplicand& (0+255),b
  4841  00170C  0E00               	movlw	0
  4842  00170E  0101               	movlb	1	; () banked
  4843  001710  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  4844  001712  0E0A               	movlw	10
  4845  001714  6F02               	movwf	___awmod@divisor& (0+255),b
  4846  001716  0101               	movlb	1	; () banked
  4847  001718  5129               	movf	scale@scl& (0+255),w,b
  4848  00171A  0101               	movlb	1	; () banked
  4849  00171C  6F00               	movwf	___awmod@dividend& (0+255),b
  4850  00171E  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  4851  001720  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  4852  001722  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  4853  001724  EC22  F022         	call	___awmod	;wreg free
  4854  001728  C100  F10E         	movff	?___awmod,___wmul@multiplier
  4855  00172C  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  4856  001730  ECFF  F026         	call	___wmul	;wreg free
  4857  001734  0E30               	movlw	low __npowers_
  4858  001736  0101               	movlb	1	; () banked
  4859  001738  250E               	addwf	?___wmul& (0+255),w,b
  4860  00173A  6EF6               	movwf	tblptrl,c
  4861  00173C  0EFC               	movlw	high __npowers_
  4862  00173E  0101               	movlb	1	; () banked
  4863  001740  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  4864  001742  6EF7               	movwf	tblptrh,c
  4865  001744                     	if	0	;There are less than 3 active tblptr bytes
  4866  001744                     	endif
  4867  001744  0009               	tblrd		*+
  4868  001746  CFF5 F117          	movff	tablat,___ftmul@f2
  4869  00174A  0009               	tblrd		*+
  4870  00174C  CFF5 F118          	movff	tablat,___ftmul@f2+1
  4871  001750  000A               	tblrd		*-
  4872  001752  CFF5 F119          	movff	tablat,___ftmul@f2+2
  4873  001756  EC07  F019         	call	___ftmul	;wreg free
  4874  00175A  C114  F123         	movff	?___ftmul,?_scale
  4875  00175E  C115  F124         	movff	?___ftmul+1,?_scale+1
  4876  001762  C116  F125         	movff	?___ftmul+2,?_scale+2
  4877  001766  0012               	return	
  4878  001768                     l7253:
  4879                           
  4880                           ;doprnt.c: 432: else if(scl > 10)
  4881  001768  0101               	movlb	1	; () banked
  4882  00176A  5129               	movf	scale@scl& (0+255),w,b
  4883  00176C  0A80               	xorlw	128
  4884  00176E  0F75               	addlw	-139
  4885  001770  A0D8               	btfss	status,0,c
  4886  001772  D05D               	goto	l7259
  4887                           
  4888                           ; BSR set to: 1
  4889                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4890  001774  0E00               	movlw	0
  4891  001776  0101               	movlb	1	; () banked
  4892  001778  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  4893  00177A  0E0A               	movlw	10
  4894  00177C  6F08               	movwf	___awdiv@divisor& (0+255),b
  4895  00177E  0101               	movlb	1	; () banked
  4896  001780  5129               	movf	scale@scl& (0+255),w,b
  4897  001782  0101               	movlb	1	; () banked
  4898  001784  6F06               	movwf	___awdiv@dividend& (0+255),b
  4899  001786  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  4900  001788  BF06               	btfsc	___awdiv@dividend& (0+255),7,b
  4901  00178A  0707               	decf	(___awdiv@dividend+1)& (0+255),f,b
  4902  00178C  EC0E  F021         	call	___awdiv	;wreg free
  4903  001790  0E09               	movlw	9
  4904  001792  0101               	movlb	1	; () banked
  4905  001794  2506               	addwf	?___awdiv& (0+255),w,b
  4906  001796  0101               	movlb	1	; () banked
  4907  001798  6F0E               	movwf	___wmul@multiplier& (0+255),b
  4908  00179A  0E00               	movlw	0
  4909  00179C  0101               	movlb	1	; () banked
  4910  00179E  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  4911  0017A0  0101               	movlb	1	; () banked
  4912  0017A2  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  4913  0017A4  0E00               	movlw	0
  4914  0017A6  0101               	movlb	1	; () banked
  4915  0017A8  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4916  0017AA  0E03               	movlw	3
  4917  0017AC  6F10               	movwf	___wmul@multiplicand& (0+255),b
  4918  0017AE  ECFF  F026         	call	___wmul	;wreg free
  4919  0017B2  0E30               	movlw	low __npowers_
  4920  0017B4  0101               	movlb	1	; () banked
  4921  0017B6  250E               	addwf	?___wmul& (0+255),w,b
  4922  0017B8  6EF6               	movwf	tblptrl,c
  4923  0017BA  0EFC               	movlw	high __npowers_
  4924  0017BC  0101               	movlb	1	; () banked
  4925  0017BE  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  4926  0017C0  6EF7               	movwf	tblptrh,c
  4927  0017C2                     	if	0	;There are less than 3 active tblptr bytes
  4928  0017C2                     	endif
  4929  0017C2  0009               	tblrd		*+
  4930  0017C4  CFF5 F114          	movff	tablat,___ftmul@f1
  4931  0017C8  0009               	tblrd		*+
  4932  0017CA  CFF5 F115          	movff	tablat,___ftmul@f1+1
  4933  0017CE  000A               	tblrd		*-
  4934  0017D0  CFF5 F116          	movff	tablat,___ftmul@f1+2
  4935  0017D4  0E00               	movlw	0
  4936  0017D6  0101               	movlb	1	; () banked
  4937  0017D8  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4938  0017DA  0E03               	movlw	3
  4939  0017DC  6F10               	movwf	___wmul@multiplicand& (0+255),b
  4940  0017DE  0E00               	movlw	0
  4941  0017E0  0101               	movlb	1	; () banked
  4942  0017E2  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  4943  0017E4  0E0A               	movlw	10
  4944  0017E6  6F02               	movwf	___awmod@divisor& (0+255),b
  4945  0017E8  0101               	movlb	1	; () banked
  4946  0017EA  5129               	movf	scale@scl& (0+255),w,b
  4947  0017EC  0101               	movlb	1	; () banked
  4948  0017EE  6F00               	movwf	___awmod@dividend& (0+255),b
  4949  0017F0  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  4950  0017F2  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  4951  0017F4  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  4952  0017F6  EC22  F022         	call	___awmod	;wreg free
  4953  0017FA  C100  F10E         	movff	?___awmod,___wmul@multiplier
  4954  0017FE  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  4955  001802  ECFF  F026         	call	___wmul	;wreg free
  4956  001806  0E30               	movlw	low __npowers_
  4957  001808  0101               	movlb	1	; () banked
  4958  00180A  250E               	addwf	?___wmul& (0+255),w,b
  4959  00180C  6EF6               	movwf	tblptrl,c
  4960  00180E  0EFC               	movlw	high __npowers_
  4961  001810  0101               	movlb	1	; () banked
  4962  001812  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  4963  001814  6EF7               	movwf	tblptrh,c
  4964  001816                     	if	0	;There are less than 3 active tblptr bytes
  4965  001816                     	endif
  4966  001816  0009               	tblrd		*+
  4967  001818  CFF5 F117          	movff	tablat,___ftmul@f2
  4968  00181C  0009               	tblrd		*+
  4969  00181E  CFF5 F118          	movff	tablat,___ftmul@f2+1
  4970  001822  000A               	tblrd		*-
  4971  001824  CFF5 F119          	movff	tablat,___ftmul@f2+2
  4972  001828  EC07  F019         	call	___ftmul	;wreg free
  4973  00182C  D796               	goto	L2
  4974  00182E                     l7259:
  4975                           
  4976                           ;doprnt.c: 434: return _npowers_[scl];
  4977  00182E  0101               	movlb	1	; () banked
  4978  001830  5129               	movf	scale@scl& (0+255),w,b
  4979  001832  0D03               	mullw	3
  4980  001834  0E30               	movlw	low __npowers_
  4981  001836  24F3               	addwf	prodl,w,c
  4982  001838  6EF6               	movwf	tblptrl,c
  4983  00183A  0EFC               	movlw	high __npowers_
  4984  00183C  20F4               	addwfc	prodh,w,c
  4985  00183E  6EF7               	movwf	tblptrh,c
  4986  001840                     	if	0	;There are less than 3 active tblptr bytes
  4987  001840                     	endif
  4988  001840  0009               	tblrd		*+
  4989  001842  CFF5 F123          	movff	tablat,?_scale
  4990  001846  0009               	tblrd		*+
  4991  001848  CFF5 F124          	movff	tablat,?_scale+1
  4992  00184C  000A               	tblrd		*-
  4993  00184E  CFF5 F125          	movff	tablat,?_scale+2
  4994                           
  4995                           ; BSR set to: 1
  4996  001852  0012               	return	
  4997  001854                     l7263:
  4998                           
  4999                           ; BSR set to: 1
  5000                           ;doprnt.c: 435: }
  5001                           ;doprnt.c: 436: if(scl>=110)
  5002  001854  0101               	movlb	1	; () banked
  5003  001856  5129               	movf	scale@scl& (0+255),w,b
  5004  001858  0A80               	xorlw	128
  5005  00185A  0F12               	addlw	-238
  5006  00185C  A0D8               	btfss	status,0,c
  5007  00185E  D0AC               	goto	l7271
  5008                           
  5009                           ; BSR set to: 1
  5010                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5011  001860  0E00               	movlw	0
  5012  001862  0101               	movlb	1	; () banked
  5013  001864  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5014  001866  0E03               	movlw	3
  5015  001868  6F10               	movwf	___wmul@multiplicand& (0+255),b
  5016  00186A  0E00               	movlw	0
  5017  00186C  0101               	movlb	1	; () banked
  5018  00186E  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  5019  001870  0E0A               	movlw	10
  5020  001872  6F08               	movwf	___awdiv@divisor& (0+255),b
  5021  001874  0E00               	movlw	0
  5022  001876  0101               	movlb	1	; () banked
  5023  001878  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  5024  00187A  0E64               	movlw	100
  5025  00187C  6F02               	movwf	___awmod@divisor& (0+255),b
  5026  00187E  0101               	movlb	1	; () banked
  5027  001880  5129               	movf	scale@scl& (0+255),w,b
  5028  001882  0101               	movlb	1	; () banked
  5029  001884  6F00               	movwf	___awmod@dividend& (0+255),b
  5030  001886  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  5031  001888  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  5032  00188A  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  5033  00188C  EC22  F022         	call	___awmod	;wreg free
  5034  001890  C100  F106         	movff	?___awmod,___awdiv@dividend
  5035  001894  C101  F107         	movff	?___awmod+1,___awdiv@dividend+1
  5036  001898  EC0E  F021         	call	___awdiv	;wreg free
  5037  00189C  0E09               	movlw	9
  5038  00189E  0101               	movlb	1	; () banked
  5039  0018A0  2506               	addwf	?___awdiv& (0+255),w,b
  5040  0018A2  0101               	movlb	1	; () banked
  5041  0018A4  6F0E               	movwf	___wmul@multiplier& (0+255),b
  5042  0018A6  0E00               	movlw	0
  5043  0018A8  0101               	movlb	1	; () banked
  5044  0018AA  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  5045  0018AC  0101               	movlb	1	; () banked
  5046  0018AE  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5047  0018B0  ECFF  F026         	call	___wmul	;wreg free
  5048  0018B4  0E09               	movlw	low __powers_
  5049  0018B6  0101               	movlb	1	; () banked
  5050  0018B8  250E               	addwf	?___wmul& (0+255),w,b
  5051  0018BA  6EF6               	movwf	tblptrl,c
  5052  0018BC  0EFC               	movlw	high __powers_
  5053  0018BE  0101               	movlb	1	; () banked
  5054  0018C0  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  5055  0018C2  6EF7               	movwf	tblptrh,c
  5056  0018C4                     	if	0	;There are less than 3 active tblptr bytes
  5057  0018C4                     	endif
  5058  0018C4  0009               	tblrd		*+
  5059  0018C6  CFF5 F117          	movff	tablat,___ftmul@f2
  5060  0018CA  0009               	tblrd		*+
  5061  0018CC  CFF5 F118          	movff	tablat,___ftmul@f2+1
  5062  0018D0  000A               	tblrd		*-
  5063  0018D2  CFF5 F119          	movff	tablat,___ftmul@f2+2
  5064  0018D6  0E00               	movlw	0
  5065  0018D8  0101               	movlb	1	; () banked
  5066  0018DA  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  5067  0018DC  0E64               	movlw	100
  5068  0018DE  6F08               	movwf	___awdiv@divisor& (0+255),b
  5069  0018E0  0101               	movlb	1	; () banked
  5070  0018E2  5129               	movf	scale@scl& (0+255),w,b
  5071  0018E4  0101               	movlb	1	; () banked
  5072  0018E6  6F06               	movwf	___awdiv@dividend& (0+255),b
  5073  0018E8  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  5074  0018EA  BF06               	btfsc	___awdiv@dividend& (0+255),7,b
  5075  0018EC  0707               	decf	(___awdiv@dividend+1)& (0+255),f,b
  5076  0018EE  EC0E  F021         	call	___awdiv	;wreg free
  5077  0018F2  0E12               	movlw	18
  5078  0018F4  0101               	movlb	1	; () banked
  5079  0018F6  2506               	addwf	?___awdiv& (0+255),w,b
  5080  0018F8  0101               	movlb	1	; () banked
  5081  0018FA  6F0E               	movwf	___wmul@multiplier& (0+255),b
  5082  0018FC  0E00               	movlw	0
  5083  0018FE  0101               	movlb	1	; () banked
  5084  001900  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  5085  001902  0101               	movlb	1	; () banked
  5086  001904  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5087  001906  0E00               	movlw	0
  5088  001908  0101               	movlb	1	; () banked
  5089  00190A  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5090  00190C  0E03               	movlw	3
  5091  00190E  6F10               	movwf	___wmul@multiplicand& (0+255),b
  5092  001910  ECFF  F026         	call	___wmul	;wreg free
  5093  001914  0E09               	movlw	low __powers_
  5094  001916  0101               	movlb	1	; () banked
  5095  001918  250E               	addwf	?___wmul& (0+255),w,b
  5096  00191A  6EF6               	movwf	tblptrl,c
  5097  00191C  0EFC               	movlw	high __powers_
  5098  00191E  0101               	movlb	1	; () banked
  5099  001920  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  5100  001922  6EF7               	movwf	tblptrh,c
  5101  001924                     	if	0	;There are less than 3 active tblptr bytes
  5102  001924                     	endif
  5103  001924  0009               	tblrd		*+
  5104  001926  CFF5 F114          	movff	tablat,___ftmul@f1
  5105  00192A  0009               	tblrd		*+
  5106  00192C  CFF5 F115          	movff	tablat,___ftmul@f1+1
  5107  001930  000A               	tblrd		*-
  5108  001932  CFF5 F116          	movff	tablat,___ftmul@f1+2
  5109  001936  EC07  F019         	call	___ftmul	;wreg free
  5110  00193A  C114  F126         	movff	?___ftmul,_scale$1449
  5111  00193E  C115  F127         	movff	?___ftmul+1,_scale$1449+1
  5112  001942  C116  F128         	movff	?___ftmul+2,_scale$1449+2
  5113                           
  5114                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  5115  001946  C126  F114         	movff	_scale$1449,___ftmul@f1
  5116  00194A  C127  F115         	movff	_scale$1449+1,___ftmul@f1+1
  5117  00194E  C128  F116         	movff	_scale$1449+2,___ftmul@f1+2
  5118  001952  0E00               	movlw	0
  5119  001954  0101               	movlb	1	; () banked
  5120  001956  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5121  001958  0E03               	movlw	3
  5122  00195A  6F10               	movwf	___wmul@multiplicand& (0+255),b
  5123  00195C  0E00               	movlw	0
  5124  00195E  0101               	movlb	1	; () banked
  5125  001960  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  5126  001962  0E0A               	movlw	10
  5127  001964  6F02               	movwf	___awmod@divisor& (0+255),b
  5128  001966  0101               	movlb	1	; () banked
  5129  001968  5129               	movf	scale@scl& (0+255),w,b
  5130  00196A  0101               	movlb	1	; () banked
  5131  00196C  6F00               	movwf	___awmod@dividend& (0+255),b
  5132  00196E  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  5133  001970  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  5134  001972  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  5135  001974  EC22  F022         	call	___awmod	;wreg free
  5136  001978  C100  F10E         	movff	?___awmod,___wmul@multiplier
  5137  00197C  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  5138  001980  ECFF  F026         	call	___wmul	;wreg free
  5139  001984  0E09               	movlw	low __powers_
  5140  001986  0101               	movlb	1	; () banked
  5141  001988  250E               	addwf	?___wmul& (0+255),w,b
  5142  00198A  6EF6               	movwf	tblptrl,c
  5143  00198C  0EFC               	movlw	high __powers_
  5144  00198E  0101               	movlb	1	; () banked
  5145  001990  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  5146  001992  6EF7               	movwf	tblptrh,c
  5147  001994                     	if	0	;There are less than 3 active tblptr bytes
  5148  001994                     	endif
  5149  001994  0009               	tblrd		*+
  5150  001996  CFF5 F117          	movff	tablat,___ftmul@f2
  5151  00199A  0009               	tblrd		*+
  5152  00199C  CFF5 F118          	movff	tablat,___ftmul@f2+1
  5153  0019A0  000A               	tblrd		*-
  5154  0019A2  CFF5 F119          	movff	tablat,___ftmul@f2+2
  5155  0019A6  EC07  F019         	call	___ftmul	;wreg free
  5156  0019AA  C114  F123         	movff	?___ftmul,?_scale
  5157  0019AE  C115  F124         	movff	?___ftmul+1,?_scale+1
  5158  0019B2  C116  F125         	movff	?___ftmul+2,?_scale+2
  5159  0019B6  0012               	return	
  5160  0019B8                     l7271:
  5161                           
  5162                           ;doprnt.c: 438: else if(scl > 10)
  5163  0019B8  0101               	movlb	1	; () banked
  5164  0019BA  5129               	movf	scale@scl& (0+255),w,b
  5165  0019BC  0A80               	xorlw	128
  5166  0019BE  0F75               	addlw	-139
  5167  0019C0  A0D8               	btfss	status,0,c
  5168  0019C2  D05D               	goto	l7277
  5169                           
  5170                           ; BSR set to: 1
  5171                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  5172  0019C4  0E00               	movlw	0
  5173  0019C6  0101               	movlb	1	; () banked
  5174  0019C8  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  5175  0019CA  0E0A               	movlw	10
  5176  0019CC  6F08               	movwf	___awdiv@divisor& (0+255),b
  5177  0019CE  0101               	movlb	1	; () banked
  5178  0019D0  5129               	movf	scale@scl& (0+255),w,b
  5179  0019D2  0101               	movlb	1	; () banked
  5180  0019D4  6F06               	movwf	___awdiv@dividend& (0+255),b
  5181  0019D6  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  5182  0019D8  BF06               	btfsc	___awdiv@dividend& (0+255),7,b
  5183  0019DA  0707               	decf	(___awdiv@dividend+1)& (0+255),f,b
  5184  0019DC  EC0E  F021         	call	___awdiv	;wreg free
  5185  0019E0  0E09               	movlw	9
  5186  0019E2  0101               	movlb	1	; () banked
  5187  0019E4  2506               	addwf	?___awdiv& (0+255),w,b
  5188  0019E6  0101               	movlb	1	; () banked
  5189  0019E8  6F0E               	movwf	___wmul@multiplier& (0+255),b
  5190  0019EA  0E00               	movlw	0
  5191  0019EC  0101               	movlb	1	; () banked
  5192  0019EE  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  5193  0019F0  0101               	movlb	1	; () banked
  5194  0019F2  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5195  0019F4  0E00               	movlw	0
  5196  0019F6  0101               	movlb	1	; () banked
  5197  0019F8  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5198  0019FA  0E03               	movlw	3
  5199  0019FC  6F10               	movwf	___wmul@multiplicand& (0+255),b
  5200  0019FE  ECFF  F026         	call	___wmul	;wreg free
  5201  001A02  0E09               	movlw	low __powers_
  5202  001A04  0101               	movlb	1	; () banked
  5203  001A06  250E               	addwf	?___wmul& (0+255),w,b
  5204  001A08  6EF6               	movwf	tblptrl,c
  5205  001A0A  0EFC               	movlw	high __powers_
  5206  001A0C  0101               	movlb	1	; () banked
  5207  001A0E  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  5208  001A10  6EF7               	movwf	tblptrh,c
  5209  001A12                     	if	0	;There are less than 3 active tblptr bytes
  5210  001A12                     	endif
  5211  001A12  0009               	tblrd		*+
  5212  001A14  CFF5 F114          	movff	tablat,___ftmul@f1
  5213  001A18  0009               	tblrd		*+
  5214  001A1A  CFF5 F115          	movff	tablat,___ftmul@f1+1
  5215  001A1E  000A               	tblrd		*-
  5216  001A20  CFF5 F116          	movff	tablat,___ftmul@f1+2
  5217  001A24  0E00               	movlw	0
  5218  001A26  0101               	movlb	1	; () banked
  5219  001A28  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5220  001A2A  0E03               	movlw	3
  5221  001A2C  6F10               	movwf	___wmul@multiplicand& (0+255),b
  5222  001A2E  0E00               	movlw	0
  5223  001A30  0101               	movlb	1	; () banked
  5224  001A32  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  5225  001A34  0E0A               	movlw	10
  5226  001A36  6F02               	movwf	___awmod@divisor& (0+255),b
  5227  001A38  0101               	movlb	1	; () banked
  5228  001A3A  5129               	movf	scale@scl& (0+255),w,b
  5229  001A3C  0101               	movlb	1	; () banked
  5230  001A3E  6F00               	movwf	___awmod@dividend& (0+255),b
  5231  001A40  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  5232  001A42  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  5233  001A44  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  5234  001A46  EC22  F022         	call	___awmod	;wreg free
  5235  001A4A  C100  F10E         	movff	?___awmod,___wmul@multiplier
  5236  001A4E  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  5237  001A52  ECFF  F026         	call	___wmul	;wreg free
  5238  001A56  0E09               	movlw	low __powers_
  5239  001A58  0101               	movlb	1	; () banked
  5240  001A5A  250E               	addwf	?___wmul& (0+255),w,b
  5241  001A5C  6EF6               	movwf	tblptrl,c
  5242  001A5E  0EFC               	movlw	high __powers_
  5243  001A60  0101               	movlb	1	; () banked
  5244  001A62  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  5245  001A64  6EF7               	movwf	tblptrh,c
  5246  001A66                     	if	0	;There are less than 3 active tblptr bytes
  5247  001A66                     	endif
  5248  001A66  0009               	tblrd		*+
  5249  001A68  CFF5 F117          	movff	tablat,___ftmul@f2
  5250  001A6C  0009               	tblrd		*+
  5251  001A6E  CFF5 F118          	movff	tablat,___ftmul@f2+1
  5252  001A72  000A               	tblrd		*-
  5253  001A74  CFF5 F119          	movff	tablat,___ftmul@f2+2
  5254  001A78  EC07  F019         	call	___ftmul	;wreg free
  5255  001A7C  D796               	goto	L3
  5256  001A7E                     l7277:
  5257                           
  5258                           ;doprnt.c: 440: return _powers_[scl];
  5259  001A7E  0101               	movlb	1	; () banked
  5260  001A80  5129               	movf	scale@scl& (0+255),w,b
  5261  001A82  0D03               	mullw	3
  5262  001A84  0E09               	movlw	low __powers_
  5263  001A86  24F3               	addwf	prodl,w,c
  5264  001A88  6EF6               	movwf	tblptrl,c
  5265  001A8A  0EFC               	movlw	high __powers_
  5266  001A8C  20F4               	addwfc	prodh,w,c
  5267  001A8E  6EF7               	movwf	tblptrh,c
  5268  001A90                     	if	0	;There are less than 3 active tblptr bytes
  5269  001A90                     	endif
  5270  001A90  0009               	tblrd		*+
  5271  001A92  CFF5 F123          	movff	tablat,?_scale
  5272  001A96  0009               	tblrd		*+
  5273  001A98  CFF5 F124          	movff	tablat,?_scale+1
  5274  001A9C  000A               	tblrd		*-
  5275  001A9E  CFF5 F125          	movff	tablat,?_scale+2
  5276  001AA2  0012               	return	
  5277  001AA4                     __end_of_scale:
  5278                           	opt stack 0
  5279                           tblptru	equ	0xFF8
  5280                           tblptrh	equ	0xFF7
  5281                           tblptrl	equ	0xFF6
  5282                           tablat	equ	0xFF5
  5283                           prodh	equ	0xFF4
  5284                           prodl	equ	0xFF3
  5285                           intcon	equ	0xFF2
  5286                           intcon3	equ	0xFF0
  5287                           postinc0	equ	0xFEE
  5288                           wreg	equ	0xFE8
  5289                           indf2	equ	0xFDF
  5290                           postinc2	equ	0xFDE
  5291                           postdec2	equ	0xFDD
  5292                           fsr2h	equ	0xFDA
  5293                           fsr2l	equ	0xFD9
  5294                           status	equ	0xFD8
  5295                           
  5296 ;; *************** function _putch *****************
  5297 ;; Defined at:
  5298 ;;		line 25 in file "lcd.c"
  5299 ;; Parameters:    Size  Location     Type
  5300 ;;  data            1    wreg     unsigned char 
  5301 ;; Auto vars:     Size  Location     Type
  5302 ;;  data            1    2[BANK1 ] unsigned char 
  5303 ;; Return value:  Size  Location     Type
  5304 ;;                  1    wreg      void 
  5305 ;; Registers used:
  5306 ;;		wreg, status,2, status,0, cstack
  5307 ;; Tracked objects:
  5308 ;;		On entry : 0/0
  5309 ;;		On exit  : 0/0
  5310 ;;		Unchanged: 0/0
  5311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5313 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5315 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5316 ;;Total ram usage:        1 bytes
  5317 ;; Hardware stack levels used:    1
  5318 ;; Hardware stack levels required when called:    9
  5319 ;; This function calls:
  5320 ;;		_lcdNibble
  5321 ;; This function is called by:
  5322 ;;		_printf
  5323 ;; This function uses a non-reentrant model
  5324 ;;
  5325                           
  5326                           	psect	text4
  5327  0050F6                     __ptext4:
  5328                           	opt stack 0
  5329  0050F6                     _putch:
  5330                           	opt stack 19
  5331                           
  5332                           ;incstack = 0
  5333                           ;putch@data stored from wreg
  5334  0050F6  0101               	movlb	1	; () banked
  5335  0050F8  6F02               	movwf	putch@data& (0+255),b
  5336                           
  5337                           ;lcd.c: 26: LATDbits.LATD2 = 1;
  5338  0050FA  848C               	bsf	3980,2,c	;volatile
  5339                           
  5340                           ;lcd.c: 27: lcdNibble(data);
  5341  0050FC  0101               	movlb	1	; () banked
  5342  0050FE  5102               	movf	putch@data& (0+255),w,b
  5343  005100  EC41  F025         	call	_lcdNibble
  5344  005104  0012               	return		;funcret
  5345  005106                     __end_of_putch:
  5346                           	opt stack 0
  5347                           tblptru	equ	0xFF8
  5348                           tblptrh	equ	0xFF7
  5349                           tblptrl	equ	0xFF6
  5350                           tablat	equ	0xFF5
  5351                           prodh	equ	0xFF4
  5352                           prodl	equ	0xFF3
  5353                           intcon	equ	0xFF2
  5354                           intcon3	equ	0xFF0
  5355                           postinc0	equ	0xFEE
  5356                           wreg	equ	0xFE8
  5357                           indf2	equ	0xFDF
  5358                           postinc2	equ	0xFDE
  5359                           postdec2	equ	0xFDD
  5360                           fsr2h	equ	0xFDA
  5361                           fsr2l	equ	0xFD9
  5362                           status	equ	0xFD8
  5363                           
  5364 ;; *************** function _isdigit *****************
  5365 ;; Defined at:
  5366 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/isdigit.c"
  5367 ;; Parameters:    Size  Location     Type
  5368 ;;  c               1    wreg     unsigned char 
  5369 ;; Auto vars:     Size  Location     Type
  5370 ;;  c               1    2[BANK1 ] unsigned char 
  5371 ;; Return value:  Size  Location     Type
  5372 ;;		None               void
  5373 ;; Registers used:
  5374 ;;		wreg, status,2, status,0
  5375 ;; Tracked objects:
  5376 ;;		On entry : 0/0
  5377 ;;		On exit  : 0/0
  5378 ;;		Unchanged: 0/0
  5379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5381 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5382 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5383 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5384 ;;Total ram usage:        3 bytes
  5385 ;; Hardware stack levels used:    1
  5386 ;; Hardware stack levels required when called:    8
  5387 ;; This function calls:
  5388 ;;		Nothing
  5389 ;; This function is called by:
  5390 ;;		_printf
  5391 ;; This function uses a non-reentrant model
  5392 ;;
  5393                           
  5394                           	psect	text5
  5395  004F24                     __ptext5:
  5396                           	opt stack 0
  5397  004F24                     _isdigit:
  5398                           	opt stack 20
  5399                           
  5400                           ;incstack = 0
  5401                           ;isdigit@c stored from wreg
  5402  004F24  0101               	movlb	1	; () banked
  5403  004F26  6F02               	movwf	isdigit@c& (0+255),b
  5404  004F28  0E00               	movlw	0
  5405  004F2A  0101               	movlb	1	; () banked
  5406  004F2C  6F01               	movwf	_isdigit$1089& (0+255),b
  5407                           
  5408                           ; BSR set to: 1
  5409  004F2E  0E3A               	movlw	58
  5410  004F30  0101               	movlb	1	; () banked
  5411  004F32  6102               	cpfslt	isdigit@c& (0+255),b
  5412  004F34  D007               	goto	l7289
  5413                           
  5414                           ; BSR set to: 1
  5415  004F36  0E2F               	movlw	47
  5416  004F38  0101               	movlb	1	; () banked
  5417  004F3A  6502               	cpfsgt	isdigit@c& (0+255),b
  5418  004F3C  D003               	goto	l7289
  5419                           
  5420                           ; BSR set to: 1
  5421  004F3E  0E01               	movlw	1
  5422  004F40  0101               	movlb	1	; () banked
  5423  004F42  6F01               	movwf	_isdigit$1089& (0+255),b
  5424  004F44                     l7289:
  5425                           
  5426                           ; BSR set to: 1
  5427  004F44  C101  F100         	movff	_isdigit$1089,??_isdigit
  5428  004F48  0101               	movlb	1	; () banked
  5429  004F4A  3100               	rrcf	??_isdigit& (0+255),w,b
  5430  004F4C  0012               	return	
  5431  004F4E                     __end_of_isdigit:
  5432                           	opt stack 0
  5433                           tblptru	equ	0xFF8
  5434                           tblptrh	equ	0xFF7
  5435                           tblptrl	equ	0xFF6
  5436                           tablat	equ	0xFF5
  5437                           prodh	equ	0xFF4
  5438                           prodl	equ	0xFF3
  5439                           intcon	equ	0xFF2
  5440                           intcon3	equ	0xFF0
  5441                           postinc0	equ	0xFEE
  5442                           wreg	equ	0xFE8
  5443                           indf2	equ	0xFDF
  5444                           postinc2	equ	0xFDE
  5445                           postdec2	equ	0xFDD
  5446                           fsr2h	equ	0xFDA
  5447                           fsr2l	equ	0xFD9
  5448                           status	equ	0xFD8
  5449                           
  5450 ;; *************** function _fround *****************
  5451 ;; Defined at:
  5452 ;;		line 409 in file "/opt/microchip/xc8/v1.41/sources/common/doprnt.c"
  5453 ;; Parameters:    Size  Location     Type
  5454 ;;  prec            1    wreg     unsigned char 
  5455 ;; Auto vars:     Size  Location     Type
  5456 ;;  prec            1   44[BANK1 ] unsigned char 
  5457 ;; Return value:  Size  Location     Type
  5458 ;;                  3   35[BANK1 ] unsigned char 
  5459 ;; Registers used:
  5460 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5461 ;; Tracked objects:
  5462 ;;		On entry : 0/0
  5463 ;;		On exit  : 0/0
  5464 ;;		Unchanged: 0/0
  5465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5466 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5467 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5469 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5470 ;;Total ram usage:       10 bytes
  5471 ;; Hardware stack levels used:    1
  5472 ;; Hardware stack levels required when called:   10
  5473 ;; This function calls:
  5474 ;;		___awdiv
  5475 ;;		___awmod
  5476 ;;		___ftmul
  5477 ;;		___wmul
  5478 ;; This function is called by:
  5479 ;;		_printf
  5480 ;; This function uses a non-reentrant model
  5481 ;;
  5482                           
  5483                           	psect	text6
  5484  00226C                     __ptext6:
  5485                           	opt stack 0
  5486  00226C                     _fround:
  5487                           	opt stack 18
  5488                           
  5489                           ; BSR set to: 1
  5490                           ;incstack = 0
  5491                           ;fround@prec stored from wreg
  5492  00226C  0101               	movlb	1	; () banked
  5493  00226E  6F2C               	movwf	fround@prec& (0+255),b
  5494                           
  5495                           ;doprnt.c: 413: if(prec>=110)
  5496  002270  0E6D               	movlw	109
  5497  002272  0101               	movlb	1	; () banked
  5498  002274  652C               	cpfsgt	fround@prec& (0+255),b
  5499  002276  D0BA               	goto	l7231
  5500                           
  5501                           ; BSR set to: 1
  5502                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5503  002278  0E00               	movlw	0
  5504  00227A  0101               	movlb	1	; () banked
  5505  00227C  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5506  00227E  0E03               	movlw	3
  5507  002280  6F10               	movwf	___wmul@multiplicand& (0+255),b
  5508  002282  0E00               	movlw	0
  5509  002284  0101               	movlb	1	; () banked
  5510  002286  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  5511  002288  0E0A               	movlw	10
  5512  00228A  6F08               	movwf	___awdiv@divisor& (0+255),b
  5513  00228C  0E00               	movlw	0
  5514  00228E  0101               	movlb	1	; () banked
  5515  002290  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  5516  002292  0E64               	movlw	100
  5517  002294  6F02               	movwf	___awmod@divisor& (0+255),b
  5518  002296  C12C  F100         	movff	fround@prec,___awmod@dividend
  5519  00229A  0101               	movlb	1	; () banked
  5520  00229C  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  5521  00229E  EC22  F022         	call	___awmod	;wreg free
  5522  0022A2  C100  F106         	movff	?___awmod,___awdiv@dividend
  5523  0022A6  C101  F107         	movff	?___awmod+1,___awdiv@dividend+1
  5524  0022AA  EC0E  F021         	call	___awdiv	;wreg free
  5525  0022AE  0E09               	movlw	9
  5526  0022B0  0101               	movlb	1	; () banked
  5527  0022B2  2506               	addwf	?___awdiv& (0+255),w,b
  5528  0022B4  0101               	movlb	1	; () banked
  5529  0022B6  6F0E               	movwf	___wmul@multiplier& (0+255),b
  5530  0022B8  0E00               	movlw	0
  5531  0022BA  0101               	movlb	1	; () banked
  5532  0022BC  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  5533  0022BE  0101               	movlb	1	; () banked
  5534  0022C0  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5535  0022C2  ECFF  F026         	call	___wmul	;wreg free
  5536  0022C6  0E30               	movlw	low __npowers_
  5537  0022C8  0101               	movlb	1	; () banked
  5538  0022CA  250E               	addwf	?___wmul& (0+255),w,b
  5539  0022CC  6EF6               	movwf	tblptrl,c
  5540  0022CE  0EFC               	movlw	high __npowers_
  5541  0022D0  0101               	movlb	1	; () banked
  5542  0022D2  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  5543  0022D4  6EF7               	movwf	tblptrh,c
  5544  0022D6                     	if	0	;There are less than 3 active tblptr bytes
  5545  0022D6                     	endif
  5546  0022D6  0009               	tblrd		*+
  5547  0022D8  CFF5 F117          	movff	tablat,___ftmul@f2
  5548  0022DC  0009               	tblrd		*+
  5549  0022DE  CFF5 F118          	movff	tablat,___ftmul@f2+1
  5550  0022E2  000A               	tblrd		*-
  5551  0022E4  CFF5 F119          	movff	tablat,___ftmul@f2+2
  5552  0022E8  0E00               	movlw	0
  5553  0022EA  0101               	movlb	1	; () banked
  5554  0022EC  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  5555  0022EE  0E64               	movlw	100
  5556  0022F0  6F08               	movwf	___awdiv@divisor& (0+255),b
  5557  0022F2  C12C  F106         	movff	fround@prec,___awdiv@dividend
  5558  0022F6  0101               	movlb	1	; () banked
  5559  0022F8  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  5560  0022FA  EC0E  F021         	call	___awdiv	;wreg free
  5561  0022FE  0E12               	movlw	18
  5562  002300  0101               	movlb	1	; () banked
  5563  002302  2506               	addwf	?___awdiv& (0+255),w,b
  5564  002304  0101               	movlb	1	; () banked
  5565  002306  6F0E               	movwf	___wmul@multiplier& (0+255),b
  5566  002308  0E00               	movlw	0
  5567  00230A  0101               	movlb	1	; () banked
  5568  00230C  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  5569  00230E  0101               	movlb	1	; () banked
  5570  002310  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5571  002312  0E00               	movlw	0
  5572  002314  0101               	movlb	1	; () banked
  5573  002316  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5574  002318  0E03               	movlw	3
  5575  00231A  6F10               	movwf	___wmul@multiplicand& (0+255),b
  5576  00231C  ECFF  F026         	call	___wmul	;wreg free
  5577  002320  0E30               	movlw	low __npowers_
  5578  002322  0101               	movlb	1	; () banked
  5579  002324  250E               	addwf	?___wmul& (0+255),w,b
  5580  002326  6EF6               	movwf	tblptrl,c
  5581  002328  0EFC               	movlw	high __npowers_
  5582  00232A  0101               	movlb	1	; () banked
  5583  00232C  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  5584  00232E  6EF7               	movwf	tblptrh,c
  5585  002330                     	if	0	;There are less than 3 active tblptr bytes
  5586  002330                     	endif
  5587  002330  0009               	tblrd		*+
  5588  002332  CFF5 F114          	movff	tablat,___ftmul@f1
  5589  002336  0009               	tblrd		*+
  5590  002338  CFF5 F115          	movff	tablat,___ftmul@f1+1
  5591  00233C  000A               	tblrd		*-
  5592  00233E  CFF5 F116          	movff	tablat,___ftmul@f1+2
  5593  002342  EC07  F019         	call	___ftmul	;wreg free
  5594  002346  C114  F129         	movff	?___ftmul,_fround$1447
  5595  00234A  C115  F12A         	movff	?___ftmul+1,_fround$1447+1
  5596  00234E  C116  F12B         	movff	?___ftmul+2,_fround$1447+2
  5597                           
  5598                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5599  002352  0E00               	movlw	0
  5600  002354  0101               	movlb	1	; () banked
  5601  002356  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5602  002358  0E03               	movlw	3
  5603  00235A  6F10               	movwf	___wmul@multiplicand& (0+255),b
  5604  00235C  0E00               	movlw	0
  5605  00235E  0101               	movlb	1	; () banked
  5606  002360  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  5607  002362  0E0A               	movlw	10
  5608  002364  6F02               	movwf	___awmod@divisor& (0+255),b
  5609  002366  C12C  F100         	movff	fround@prec,___awmod@dividend
  5610  00236A  0101               	movlb	1	; () banked
  5611  00236C  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  5612  00236E  EC22  F022         	call	___awmod	;wreg free
  5613  002372  C100  F10E         	movff	?___awmod,___wmul@multiplier
  5614  002376  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  5615  00237A  ECFF  F026         	call	___wmul	;wreg free
  5616  00237E  0E30               	movlw	low __npowers_
  5617  002380  0101               	movlb	1	; () banked
  5618  002382  250E               	addwf	?___wmul& (0+255),w,b
  5619  002384  6EF6               	movwf	tblptrl,c
  5620  002386  0EFC               	movlw	high __npowers_
  5621  002388  0101               	movlb	1	; () banked
  5622  00238A  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  5623  00238C  6EF7               	movwf	tblptrh,c
  5624  00238E                     	if	0	;There are less than 3 active tblptr bytes
  5625  00238E                     	endif
  5626  00238E  0009               	tblrd		*+
  5627  002390  CFF5 F117          	movff	tablat,___ftmul@f2
  5628  002394  0009               	tblrd		*+
  5629  002396  CFF5 F118          	movff	tablat,___ftmul@f2+1
  5630  00239A  000A               	tblrd		*-
  5631  00239C  CFF5 F119          	movff	tablat,___ftmul@f2+2
  5632  0023A0  C129  F114         	movff	_fround$1447,___ftmul@f1
  5633  0023A4  C12A  F115         	movff	_fround$1447+1,___ftmul@f1+1
  5634  0023A8  C12B  F116         	movff	_fround$1447+2,___ftmul@f1+2
  5635  0023AC  EC07  F019         	call	___ftmul	;wreg free
  5636  0023B0  C114  F126         	movff	?___ftmul,_fround$1448
  5637  0023B4  C115  F127         	movff	?___ftmul+1,_fround$1448+1
  5638  0023B8  C116  F128         	movff	?___ftmul+2,_fround$1448+2
  5639                           
  5640                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  5641  0023BC  C126  F114         	movff	_fround$1448,___ftmul@f1
  5642  0023C0  C127  F115         	movff	_fround$1448+1,___ftmul@f1+1
  5643  0023C4  C128  F116         	movff	_fround$1448+2,___ftmul@f1+2
  5644  0023C8  0E00               	movlw	0
  5645  0023CA  0101               	movlb	1	; () banked
  5646  0023CC  6F17               	movwf	___ftmul@f2& (0+255),b
  5647  0023CE  0E00               	movlw	0
  5648  0023D0  0101               	movlb	1	; () banked
  5649  0023D2  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
  5650  0023D4  0E3F               	movlw	63
  5651  0023D6  0101               	movlb	1	; () banked
  5652  0023D8  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
  5653  0023DA  EC07  F019         	call	___ftmul	;wreg free
  5654  0023DE  C114  F123         	movff	?___ftmul,?_fround
  5655  0023E2  C115  F124         	movff	?___ftmul+1,?_fround+1
  5656  0023E6  C116  F125         	movff	?___ftmul+2,?_fround+2
  5657  0023EA  0012               	return	
  5658  0023EC                     l7231:
  5659                           
  5660                           ;doprnt.c: 415: else if(prec > 10)
  5661  0023EC  0E0A               	movlw	10
  5662  0023EE  0101               	movlb	1	; () banked
  5663  0023F0  652C               	cpfsgt	fround@prec& (0+255),b
  5664  0023F2  D06E               	goto	l7239
  5665                           
  5666                           ; BSR set to: 1
  5667                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5668  0023F4  0E00               	movlw	0
  5669  0023F6  0101               	movlb	1	; () banked
  5670  0023F8  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5671  0023FA  0E03               	movlw	3
  5672  0023FC  6F10               	movwf	___wmul@multiplicand& (0+255),b
  5673  0023FE  0E00               	movlw	0
  5674  002400  0101               	movlb	1	; () banked
  5675  002402  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  5676  002404  0E0A               	movlw	10
  5677  002406  6F02               	movwf	___awmod@divisor& (0+255),b
  5678  002408  C12C  F100         	movff	fround@prec,___awmod@dividend
  5679  00240C  0101               	movlb	1	; () banked
  5680  00240E  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  5681  002410  EC22  F022         	call	___awmod	;wreg free
  5682  002414  C100  F10E         	movff	?___awmod,___wmul@multiplier
  5683  002418  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  5684  00241C  ECFF  F026         	call	___wmul	;wreg free
  5685  002420  0E30               	movlw	low __npowers_
  5686  002422  0101               	movlb	1	; () banked
  5687  002424  250E               	addwf	?___wmul& (0+255),w,b
  5688  002426  6EF6               	movwf	tblptrl,c
  5689  002428  0EFC               	movlw	high __npowers_
  5690  00242A  0101               	movlb	1	; () banked
  5691  00242C  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  5692  00242E  6EF7               	movwf	tblptrh,c
  5693  002430                     	if	0	;There are less than 3 active tblptr bytes
  5694  002430                     	endif
  5695  002430  0009               	tblrd		*+
  5696  002432  CFF5 F117          	movff	tablat,___ftmul@f2
  5697  002436  0009               	tblrd		*+
  5698  002438  CFF5 F118          	movff	tablat,___ftmul@f2+1
  5699  00243C  000A               	tblrd		*-
  5700  00243E  CFF5 F119          	movff	tablat,___ftmul@f2+2
  5701  002442  0E00               	movlw	0
  5702  002444  0101               	movlb	1	; () banked
  5703  002446  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  5704  002448  0E0A               	movlw	10
  5705  00244A  6F08               	movwf	___awdiv@divisor& (0+255),b
  5706  00244C  C12C  F106         	movff	fround@prec,___awdiv@dividend
  5707  002450  0101               	movlb	1	; () banked
  5708  002452  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  5709  002454  EC0E  F021         	call	___awdiv	;wreg free
  5710  002458  0E09               	movlw	9
  5711  00245A  0101               	movlb	1	; () banked
  5712  00245C  2506               	addwf	?___awdiv& (0+255),w,b
  5713  00245E  0101               	movlb	1	; () banked
  5714  002460  6F0E               	movwf	___wmul@multiplier& (0+255),b
  5715  002462  0E00               	movlw	0
  5716  002464  0101               	movlb	1	; () banked
  5717  002466  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  5718  002468  0101               	movlb	1	; () banked
  5719  00246A  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  5720  00246C  0E00               	movlw	0
  5721  00246E  0101               	movlb	1	; () banked
  5722  002470  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5723  002472  0E03               	movlw	3
  5724  002474  6F10               	movwf	___wmul@multiplicand& (0+255),b
  5725  002476  ECFF  F026         	call	___wmul	;wreg free
  5726  00247A  0E30               	movlw	low __npowers_
  5727  00247C  0101               	movlb	1	; () banked
  5728  00247E  250E               	addwf	?___wmul& (0+255),w,b
  5729  002480  6EF6               	movwf	tblptrl,c
  5730  002482  0EFC               	movlw	high __npowers_
  5731  002484  0101               	movlb	1	; () banked
  5732  002486  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  5733  002488  6EF7               	movwf	tblptrh,c
  5734  00248A                     	if	0	;There are less than 3 active tblptr bytes
  5735  00248A                     	endif
  5736  00248A  0009               	tblrd		*+
  5737  00248C  CFF5 F114          	movff	tablat,___ftmul@f1
  5738  002490  0009               	tblrd		*+
  5739  002492  CFF5 F115          	movff	tablat,___ftmul@f1+1
  5740  002496  000A               	tblrd		*-
  5741  002498  CFF5 F116          	movff	tablat,___ftmul@f1+2
  5742  00249C  EC07  F019         	call	___ftmul	;wreg free
  5743  0024A0  C114  F129         	movff	?___ftmul,_fround$1447
  5744  0024A4  C115  F12A         	movff	?___ftmul+1,_fround$1447+1
  5745  0024A8  C116  F12B         	movff	?___ftmul+2,_fround$1447+2
  5746                           
  5747                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  5748  0024AC  C129  F114         	movff	_fround$1447,___ftmul@f1
  5749  0024B0  C12A  F115         	movff	_fround$1447+1,___ftmul@f1+1
  5750  0024B4  C12B  F116         	movff	_fround$1447+2,___ftmul@f1+2
  5751  0024B8  0E00               	movlw	0
  5752  0024BA  0101               	movlb	1	; () banked
  5753  0024BC  6F17               	movwf	___ftmul@f2& (0+255),b
  5754  0024BE  0E00               	movlw	0
  5755  0024C0  0101               	movlb	1	; () banked
  5756  0024C2  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
  5757  0024C4  0E3F               	movlw	63
  5758  0024C6  0101               	movlb	1	; () banked
  5759  0024C8  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
  5760  0024CA  EC07  F019         	call	___ftmul	;wreg free
  5761  0024CE  D787               	goto	L4
  5762  0024D0                     l7239:
  5763                           
  5764                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  5765  0024D0  0101               	movlb	1	; () banked
  5766  0024D2  512C               	movf	fround@prec& (0+255),w,b
  5767  0024D4  0D03               	mullw	3
  5768  0024D6  0E30               	movlw	low __npowers_
  5769  0024D8  24F3               	addwf	prodl,w,c
  5770  0024DA  6EF6               	movwf	tblptrl,c
  5771  0024DC  0EFC               	movlw	high __npowers_
  5772  0024DE  20F4               	addwfc	prodh,w,c
  5773  0024E0  6EF7               	movwf	tblptrh,c
  5774  0024E2                     	if	0	;There are less than 3 active tblptr bytes
  5775  0024E2                     	endif
  5776  0024E2  0009               	tblrd		*+
  5777  0024E4  CFF5 F114          	movff	tablat,___ftmul@f1
  5778  0024E8  0009               	tblrd		*+
  5779  0024EA  CFF5 F115          	movff	tablat,___ftmul@f1+1
  5780  0024EE  000A               	tblrd		*-
  5781  0024F0  CFF5 F116          	movff	tablat,___ftmul@f1+2
  5782  0024F4  0E00               	movlw	0
  5783  0024F6  0101               	movlb	1	; () banked
  5784  0024F8  6F17               	movwf	___ftmul@f2& (0+255),b
  5785  0024FA  0E00               	movlw	0
  5786  0024FC  0101               	movlb	1	; () banked
  5787  0024FE  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
  5788  002500  0E3F               	movlw	63
  5789  002502  0101               	movlb	1	; () banked
  5790  002504  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
  5791  002506  EC07  F019         	call	___ftmul	;wreg free
  5792  00250A  C114  F123         	movff	?___ftmul,?_fround
  5793  00250E  C115  F124         	movff	?___ftmul+1,?_fround+1
  5794  002512  C116  F125         	movff	?___ftmul+2,?_fround+2
  5795  002516  0012               	return	
  5796  002518                     __end_of_fround:
  5797                           	opt stack 0
  5798                           tblptru	equ	0xFF8
  5799                           tblptrh	equ	0xFF7
  5800                           tblptrl	equ	0xFF6
  5801                           tablat	equ	0xFF5
  5802                           prodh	equ	0xFF4
  5803                           prodl	equ	0xFF3
  5804                           intcon	equ	0xFF2
  5805                           intcon3	equ	0xFF0
  5806                           postinc0	equ	0xFEE
  5807                           wreg	equ	0xFE8
  5808                           indf2	equ	0xFDF
  5809                           postinc2	equ	0xFDE
  5810                           postdec2	equ	0xFDD
  5811                           fsr2h	equ	0xFDA
  5812                           fsr2l	equ	0xFD9
  5813                           status	equ	0xFD8
  5814                           
  5815 ;; *************** function ___wmul *****************
  5816 ;; Defined at:
  5817 ;;		line 15 in file "/opt/microchip/xc8/v1.41/sources/common/Umul16.c"
  5818 ;; Parameters:    Size  Location     Type
  5819 ;;  multiplier      2   14[BANK1 ] unsigned int 
  5820 ;;  multiplicand    2   16[BANK1 ] unsigned int 
  5821 ;; Auto vars:     Size  Location     Type
  5822 ;;  product         2   18[BANK1 ] unsigned int 
  5823 ;; Return value:  Size  Location     Type
  5824 ;;                  2   14[BANK1 ] unsigned int 
  5825 ;; Registers used:
  5826 ;;		wreg, status,2, status,0, prodl, prodh
  5827 ;; Tracked objects:
  5828 ;;		On entry : 0/0
  5829 ;;		On exit  : 0/0
  5830 ;;		Unchanged: 0/0
  5831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5832 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5833 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5835 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5836 ;;Total ram usage:        6 bytes
  5837 ;; Hardware stack levels used:    1
  5838 ;; Hardware stack levels required when called:    8
  5839 ;; This function calls:
  5840 ;;		Nothing
  5841 ;; This function is called by:
  5842 ;;		_fround
  5843 ;;		_scale
  5844 ;;		_printf
  5845 ;; This function uses a non-reentrant model
  5846 ;;
  5847                           
  5848                           	psect	text7
  5849  004DFE                     __ptext7:
  5850                           	opt stack 0
  5851  004DFE                     ___wmul:
  5852                           	opt stack 19
  5853                           
  5854                           ;incstack = 0
  5855  004DFE  0101               	movlb	1	; () banked
  5856  004E00  510E               	movf	___wmul@multiplier& (0+255),w,b
  5857  004E02  0101               	movlb	1	; () banked
  5858  004E04  0310               	mulwf	___wmul@multiplicand& (0+255),b
  5859  004E06  CFF3 F112          	movff	prodl,___wmul@product
  5860  004E0A  CFF4 F113          	movff	prodh,___wmul@product+1
  5861  004E0E  0101               	movlb	1	; () banked
  5862  004E10  510E               	movf	___wmul@multiplier& (0+255),w,b
  5863  004E12  0101               	movlb	1	; () banked
  5864  004E14  0311               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  5865  004E16  50F3               	movf	prodl,w,c
  5866  004E18  0101               	movlb	1	; () banked
  5867  004E1A  2713               	addwf	(___wmul@product+1)& (0+255),f,b
  5868  004E1C  0101               	movlb	1	; () banked
  5869  004E1E  510F               	movf	(___wmul@multiplier+1)& (0+255),w,b
  5870  004E20  0101               	movlb	1	; () banked
  5871  004E22  0310               	mulwf	___wmul@multiplicand& (0+255),b
  5872  004E24  50F3               	movf	prodl,w,c
  5873  004E26  0101               	movlb	1	; () banked
  5874  004E28  2713               	addwf	(___wmul@product+1)& (0+255),f,b
  5875                           
  5876                           ; BSR set to: 1
  5877  004E2A  C112  F10E         	movff	___wmul@product,?___wmul
  5878  004E2E  C113  F10F         	movff	___wmul@product+1,?___wmul+1
  5879  004E32  0012               	return	
  5880  004E34                     __end_of___wmul:
  5881                           	opt stack 0
  5882                           tblptru	equ	0xFF8
  5883                           tblptrh	equ	0xFF7
  5884                           tblptrl	equ	0xFF6
  5885                           tablat	equ	0xFF5
  5886                           prodh	equ	0xFF4
  5887                           prodl	equ	0xFF3
  5888                           intcon	equ	0xFF2
  5889                           intcon3	equ	0xFF0
  5890                           postinc0	equ	0xFEE
  5891                           wreg	equ	0xFE8
  5892                           indf2	equ	0xFDF
  5893                           postinc2	equ	0xFDE
  5894                           postdec2	equ	0xFDD
  5895                           fsr2h	equ	0xFDA
  5896                           fsr2l	equ	0xFD9
  5897                           status	equ	0xFD8
  5898                           
  5899 ;; *************** function ___ftmul *****************
  5900 ;; Defined at:
  5901 ;;		line 62 in file "/opt/microchip/xc8/v1.41/sources/common/ftmul.c"
  5902 ;; Parameters:    Size  Location     Type
  5903 ;;  f1              3   20[BANK1 ] float 
  5904 ;;  f2              3   23[BANK1 ] float 
  5905 ;; Auto vars:     Size  Location     Type
  5906 ;;  f3_as_produc    3   30[BANK1 ] unsigned um
  5907 ;;  sign            1   34[BANK1 ] unsigned char 
  5908 ;;  cntr            1   33[BANK1 ] unsigned char 
  5909 ;;  exp             1   29[BANK1 ] unsigned char 
  5910 ;; Return value:  Size  Location     Type
  5911 ;;                  3   20[BANK1 ] float 
  5912 ;; Registers used:
  5913 ;;		wreg, status,2, status,0, cstack
  5914 ;; Tracked objects:
  5915 ;;		On entry : 0/0
  5916 ;;		On exit  : 0/0
  5917 ;;		Unchanged: 0/0
  5918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5919 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5920 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5921 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5922 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5923 ;;Total ram usage:       15 bytes
  5924 ;; Hardware stack levels used:    1
  5925 ;; Hardware stack levels required when called:    9
  5926 ;; This function calls:
  5927 ;;		___ftpack
  5928 ;; This function is called by:
  5929 ;;		_fround
  5930 ;;		_scale
  5931 ;;		_printf
  5932 ;; This function uses a non-reentrant model
  5933 ;;
  5934                           
  5935                           	psect	text8
  5936  00320E                     __ptext8:
  5937                           	opt stack 0
  5938  00320E                     ___ftmul:
  5939                           	opt stack 18
  5940                           
  5941                           ; BSR set to: 1
  5942                           ;incstack = 0
  5943  00320E  C116  F11A         	movff	___ftmul@f1+2,??___ftmul
  5944  003212  0101               	movlb	1	; () banked
  5945  003214  6B1B               	clrf	(??___ftmul+1)& (0+255),b
  5946  003216  6B1C               	clrf	(??___ftmul+2)& (0+255),b
  5947  003218  0101               	movlb	1	; () banked
  5948  00321A  3515               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  5949  00321C  0101               	movlb	1	; () banked
  5950  00321E  371A               	rlcf	??___ftmul& (0+255),f,b
  5951  003220  E301               	bnc	u7341
  5952  003222  811B               	bsf	(??___ftmul+1)& (0+255),0,b
  5953  003224                     u7341:
  5954  003224  0101               	movlb	1	; () banked
  5955  003226  511A               	movf	??___ftmul& (0+255),w,b
  5956  003228  0101               	movlb	1	; () banked
  5957  00322A  6F1D               	movwf	___ftmul@exp& (0+255),b
  5958  00322C  0101               	movlb	1	; () banked
  5959  00322E  511D               	movf	___ftmul@exp& (0+255),w,b
  5960  003230  A4D8               	btfss	status,2,c
  5961  003232  D00A               	goto	l7051
  5962                           
  5963                           ; BSR set to: 1
  5964  003234  0E00               	movlw	0
  5965  003236  0101               	movlb	1	; () banked
  5966  003238  6F14               	movwf	?___ftmul& (0+255),b
  5967  00323A  0E00               	movlw	0
  5968  00323C  0101               	movlb	1	; () banked
  5969  00323E  6F15               	movwf	(?___ftmul+1)& (0+255),b
  5970  003240  0E00               	movlw	0
  5971  003242  0101               	movlb	1	; () banked
  5972  003244  6F16               	movwf	(?___ftmul+2)& (0+255),b
  5973                           
  5974                           ; BSR set to: 1
  5975  003246  0012               	return	
  5976  003248                     l7051:
  5977                           
  5978                           ; BSR set to: 1
  5979  003248  C119  F11A         	movff	___ftmul@f2+2,??___ftmul
  5980  00324C  0101               	movlb	1	; () banked
  5981  00324E  6B1B               	clrf	(??___ftmul+1)& (0+255),b
  5982  003250  6B1C               	clrf	(??___ftmul+2)& (0+255),b
  5983  003252  0101               	movlb	1	; () banked
  5984  003254  3518               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  5985  003256  0101               	movlb	1	; () banked
  5986  003258  371A               	rlcf	??___ftmul& (0+255),f,b
  5987  00325A  E301               	bnc	u7361
  5988  00325C  811B               	bsf	(??___ftmul+1)& (0+255),0,b
  5989  00325E                     u7361:
  5990  00325E  0101               	movlb	1	; () banked
  5991  003260  511A               	movf	??___ftmul& (0+255),w,b
  5992  003262  0101               	movlb	1	; () banked
  5993  003264  6F22               	movwf	___ftmul@sign& (0+255),b
  5994  003266  0101               	movlb	1	; () banked
  5995  003268  5122               	movf	___ftmul@sign& (0+255),w,b
  5996  00326A  A4D8               	btfss	status,2,c
  5997  00326C  D00A               	goto	l7057
  5998                           
  5999                           ; BSR set to: 1
  6000  00326E  0E00               	movlw	0
  6001  003270  0101               	movlb	1	; () banked
  6002  003272  6F14               	movwf	?___ftmul& (0+255),b
  6003  003274  0E00               	movlw	0
  6004  003276  0101               	movlb	1	; () banked
  6005  003278  6F15               	movwf	(?___ftmul+1)& (0+255),b
  6006  00327A  0E00               	movlw	0
  6007  00327C  0101               	movlb	1	; () banked
  6008  00327E  6F16               	movwf	(?___ftmul+2)& (0+255),b
  6009                           
  6010                           ; BSR set to: 1
  6011  003280  0012               	return	
  6012  003282                     l7057:
  6013                           
  6014                           ; BSR set to: 1
  6015  003282  0101               	movlb	1	; () banked
  6016  003284  5122               	movf	___ftmul@sign& (0+255),w,b
  6017  003286  0F7B               	addlw	123
  6018  003288  0101               	movlb	1	; () banked
  6019  00328A  271D               	addwf	___ftmul@exp& (0+255),f,b
  6020                           
  6021                           ; BSR set to: 1
  6022  00328C  C116  F122         	movff	___ftmul@f1+2,___ftmul@sign
  6023  003290  0101               	movlb	1	; () banked
  6024  003292  5119               	movf	(___ftmul@f2+2)& (0+255),w,b
  6025  003294  0101               	movlb	1	; () banked
  6026  003296  1B22               	xorwf	___ftmul@sign& (0+255),f,b
  6027  003298  0E80               	movlw	128
  6028  00329A  0101               	movlb	1	; () banked
  6029  00329C  1722               	andwf	___ftmul@sign& (0+255),f,b
  6030                           
  6031                           ; BSR set to: 1
  6032  00329E  0101               	movlb	1	; () banked
  6033  0032A0  8F15               	bsf	(___ftmul@f1+1)& (0+255),7,b
  6034                           
  6035                           ; BSR set to: 1
  6036  0032A2  0101               	movlb	1	; () banked
  6037  0032A4  8F18               	bsf	(___ftmul@f2+1)& (0+255),7,b
  6038                           
  6039                           ; BSR set to: 1
  6040  0032A6  0EFF               	movlw	255
  6041  0032A8  0101               	movlb	1	; () banked
  6042  0032AA  1717               	andwf	___ftmul@f2& (0+255),f,b
  6043  0032AC  0EFF               	movlw	255
  6044  0032AE  0101               	movlb	1	; () banked
  6045  0032B0  1718               	andwf	(___ftmul@f2+1)& (0+255),f,b
  6046  0032B2  0E00               	movlw	0
  6047  0032B4  0101               	movlb	1	; () banked
  6048  0032B6  1719               	andwf	(___ftmul@f2+2)& (0+255),f,b
  6049                           
  6050                           ; BSR set to: 1
  6051  0032B8  0E00               	movlw	0
  6052  0032BA  0101               	movlb	1	; () banked
  6053  0032BC  6F1E               	movwf	___ftmul@f3_as_product& (0+255),b
  6054  0032BE  0E00               	movlw	0
  6055  0032C0  0101               	movlb	1	; () banked
  6056  0032C2  6F1F               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  6057  0032C4  0E00               	movlw	0
  6058  0032C6  0101               	movlb	1	; () banked
  6059  0032C8  6F20               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  6060                           
  6061                           ; BSR set to: 1
  6062  0032CA  0E07               	movlw	7
  6063  0032CC  0101               	movlb	1	; () banked
  6064  0032CE  6F21               	movwf	___ftmul@cntr& (0+255),b
  6065  0032D0                     l7071:
  6066                           
  6067                           ; BSR set to: 1
  6068  0032D0  0101               	movlb	1	; () banked
  6069  0032D2  A114               	btfss	___ftmul@f1& (0+255),0,b
  6070  0032D4  D00C               	goto	l7075
  6071                           
  6072                           ; BSR set to: 1
  6073  0032D6  0101               	movlb	1	; () banked
  6074  0032D8  5117               	movf	___ftmul@f2& (0+255),w,b
  6075  0032DA  0101               	movlb	1	; () banked
  6076  0032DC  271E               	addwf	___ftmul@f3_as_product& (0+255),f,b
  6077  0032DE  0101               	movlb	1	; () banked
  6078  0032E0  5118               	movf	(___ftmul@f2+1)& (0+255),w,b
  6079  0032E2  0101               	movlb	1	; () banked
  6080  0032E4  231F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  6081  0032E6  0101               	movlb	1	; () banked
  6082  0032E8  5119               	movf	(___ftmul@f2+2)& (0+255),w,b
  6083  0032EA  0101               	movlb	1	; () banked
  6084  0032EC  2320               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  6085  0032EE                     l7075:
  6086                           
  6087                           ; BSR set to: 1
  6088  0032EE  0101               	movlb	1	; () banked
  6089  0032F0  90D8               	bcf	status,0,c
  6090  0032F2  3316               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  6091  0032F4  3315               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  6092  0032F6  3314               	rrcf	___ftmul@f1& (0+255),f,b
  6093  0032F8  0101               	movlb	1	; () banked
  6094  0032FA  90D8               	bcf	status,0,c
  6095  0032FC  3717               	rlcf	___ftmul@f2& (0+255),f,b
  6096  0032FE  3718               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  6097  003300  3719               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  6098                           
  6099                           ; BSR set to: 1
  6100  003302  0101               	movlb	1	; () banked
  6101  003304  2F21               	decfsz	___ftmul@cntr& (0+255),f,b
  6102  003306  D7E4               	goto	l7071
  6103                           
  6104                           ; BSR set to: 1
  6105                           
  6106                           ; BSR set to: 1
  6107  003308  0E09               	movlw	9
  6108  00330A  0101               	movlb	1	; () banked
  6109  00330C  6F21               	movwf	___ftmul@cntr& (0+255),b
  6110  00330E                     l7081:
  6111                           
  6112                           ; BSR set to: 1
  6113  00330E  0101               	movlb	1	; () banked
  6114  003310  A114               	btfss	___ftmul@f1& (0+255),0,b
  6115  003312  D00C               	goto	l7085
  6116                           
  6117                           ; BSR set to: 1
  6118  003314  0101               	movlb	1	; () banked
  6119  003316  5117               	movf	___ftmul@f2& (0+255),w,b
  6120  003318  0101               	movlb	1	; () banked
  6121  00331A  271E               	addwf	___ftmul@f3_as_product& (0+255),f,b
  6122  00331C  0101               	movlb	1	; () banked
  6123  00331E  5118               	movf	(___ftmul@f2+1)& (0+255),w,b
  6124  003320  0101               	movlb	1	; () banked
  6125  003322  231F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  6126  003324  0101               	movlb	1	; () banked
  6127  003326  5119               	movf	(___ftmul@f2+2)& (0+255),w,b
  6128  003328  0101               	movlb	1	; () banked
  6129  00332A  2320               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  6130  00332C                     l7085:
  6131                           
  6132                           ; BSR set to: 1
  6133  00332C  0101               	movlb	1	; () banked
  6134  00332E  90D8               	bcf	status,0,c
  6135  003330  3316               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  6136  003332  3315               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  6137  003334  3314               	rrcf	___ftmul@f1& (0+255),f,b
  6138  003336  0101               	movlb	1	; () banked
  6139  003338  90D8               	bcf	status,0,c
  6140  00333A  3320               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  6141  00333C  331F               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  6142  00333E  331E               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  6143                           
  6144                           ; BSR set to: 1
  6145  003340  0101               	movlb	1	; () banked
  6146  003342  2F21               	decfsz	___ftmul@cntr& (0+255),f,b
  6147  003344  D7E4               	goto	l7081
  6148                           
  6149                           ; BSR set to: 1
  6150                           
  6151                           ; BSR set to: 1
  6152  003346  C11E  F100         	movff	___ftmul@f3_as_product,___ftpack@arg
  6153  00334A  C11F  F101         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6154  00334E  C120  F102         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6155  003352  C11D  F103         	movff	___ftmul@exp,___ftpack@exp
  6156  003356  C122  F104         	movff	___ftmul@sign,___ftpack@sign
  6157  00335A  EC1E  F01C         	call	___ftpack	;wreg free
  6158  00335E  C100  F114         	movff	?___ftpack,?___ftmul
  6159  003362  C101  F115         	movff	?___ftpack+1,?___ftmul+1
  6160  003366  C102  F116         	movff	?___ftpack+2,?___ftmul+2
  6161  00336A  0012               	return	
  6162  00336C                     __end_of___ftmul:
  6163                           	opt stack 0
  6164                           tblptru	equ	0xFF8
  6165                           tblptrh	equ	0xFF7
  6166                           tblptrl	equ	0xFF6
  6167                           tablat	equ	0xFF5
  6168                           prodh	equ	0xFF4
  6169                           prodl	equ	0xFF3
  6170                           intcon	equ	0xFF2
  6171                           intcon3	equ	0xFF0
  6172                           postinc0	equ	0xFEE
  6173                           wreg	equ	0xFE8
  6174                           indf2	equ	0xFDF
  6175                           postinc2	equ	0xFDE
  6176                           postdec2	equ	0xFDD
  6177                           fsr2h	equ	0xFDA
  6178                           fsr2l	equ	0xFD9
  6179                           status	equ	0xFD8
  6180                           
  6181 ;; *************** function ___awmod *****************
  6182 ;; Defined at:
  6183 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/awmod.c"
  6184 ;; Parameters:    Size  Location     Type
  6185 ;;  dividend        2    0[BANK1 ] int 
  6186 ;;  divisor         2    2[BANK1 ] int 
  6187 ;; Auto vars:     Size  Location     Type
  6188 ;;  sign            1    5[BANK1 ] unsigned char 
  6189 ;;  counter         1    4[BANK1 ] unsigned char 
  6190 ;; Return value:  Size  Location     Type
  6191 ;;                  2    0[BANK1 ] int 
  6192 ;; Registers used:
  6193 ;;		wreg, status,2, status,0
  6194 ;; Tracked objects:
  6195 ;;		On entry : 0/0
  6196 ;;		On exit  : 0/0
  6197 ;;		Unchanged: 0/0
  6198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6199 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6200 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6202 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6203 ;;Total ram usage:        6 bytes
  6204 ;; Hardware stack levels used:    1
  6205 ;; Hardware stack levels required when called:    8
  6206 ;; This function calls:
  6207 ;;		Nothing
  6208 ;; This function is called by:
  6209 ;;		_fround
  6210 ;;		_scale
  6211 ;; This function uses a non-reentrant model
  6212 ;;
  6213                           
  6214                           	psect	text9
  6215  004444                     __ptext9:
  6216                           	opt stack 0
  6217  004444                     ___awmod:
  6218                           	opt stack 19
  6219                           
  6220                           ;incstack = 0
  6221  004444  0E00               	movlw	0
  6222  004446  0101               	movlb	1	; () banked
  6223  004448  6F05               	movwf	___awmod@sign& (0+255),b
  6224                           
  6225                           ; BSR set to: 1
  6226  00444A  0101               	movlb	1	; () banked
  6227  00444C  AF01               	btfss	(___awmod@dividend+1)& (0+255),7,b
  6228  00444E  D008               	goto	l7145
  6229                           
  6230                           ; BSR set to: 1
  6231  004450  0101               	movlb	1	; () banked
  6232  004452  6D00               	negf	___awmod@dividend& (0+255),b
  6233  004454  1F01               	comf	(___awmod@dividend+1)& (0+255),f,b
  6234  004456  B0D8               	btfsc	status,0,c
  6235  004458  2B01               	incf	(___awmod@dividend+1)& (0+255),f,b
  6236                           
  6237                           ; BSR set to: 1
  6238  00445A  0E01               	movlw	1
  6239  00445C  0101               	movlb	1	; () banked
  6240  00445E  6F05               	movwf	___awmod@sign& (0+255),b
  6241  004460                     l7145:
  6242                           
  6243                           ; BSR set to: 1
  6244  004460  0101               	movlb	1	; () banked
  6245  004462  AF03               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6246  004464  D005               	goto	l7149
  6247                           
  6248                           ; BSR set to: 1
  6249  004466  0101               	movlb	1	; () banked
  6250  004468  6D02               	negf	___awmod@divisor& (0+255),b
  6251  00446A  1F03               	comf	(___awmod@divisor+1)& (0+255),f,b
  6252  00446C  B0D8               	btfsc	status,0,c
  6253  00446E  2B03               	incf	(___awmod@divisor+1)& (0+255),f,b
  6254  004470                     l7149:
  6255                           
  6256                           ; BSR set to: 1
  6257  004470  0101               	movlb	1	; () banked
  6258  004472  5102               	movf	___awmod@divisor& (0+255),w,b
  6259  004474  0101               	movlb	1	; () banked
  6260  004476  1103               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  6261  004478  B4D8               	btfsc	status,2,c
  6262  00447A  D026               	goto	l7165
  6263                           
  6264                           ; BSR set to: 1
  6265  00447C  0E01               	movlw	1
  6266  00447E  0101               	movlb	1	; () banked
  6267  004480  6F04               	movwf	___awmod@counter& (0+255),b
  6268  004482  D006               	goto	l7155
  6269  004484                     l7153:
  6270                           
  6271                           ; BSR set to: 1
  6272  004484  0101               	movlb	1	; () banked
  6273  004486  90D8               	bcf	status,0,c
  6274  004488  3702               	rlcf	___awmod@divisor& (0+255),f,b
  6275  00448A  3703               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  6276  00448C  0101               	movlb	1	; () banked
  6277  00448E  2B04               	incf	___awmod@counter& (0+255),f,b
  6278  004490                     l7155:
  6279                           
  6280                           ; BSR set to: 1
  6281  004490  0101               	movlb	1	; () banked
  6282  004492  AF03               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6283  004494  D7F7               	goto	l7153
  6284  004496                     l7157:
  6285                           
  6286                           ; BSR set to: 1
  6287  004496  0101               	movlb	1	; () banked
  6288  004498  5102               	movf	___awmod@divisor& (0+255),w,b
  6289  00449A  0101               	movlb	1	; () banked
  6290  00449C  5D00               	subwf	___awmod@dividend& (0+255),w,b
  6291  00449E  0101               	movlb	1	; () banked
  6292  0044A0  5103               	movf	(___awmod@divisor+1)& (0+255),w,b
  6293  0044A2  0101               	movlb	1	; () banked
  6294  0044A4  5901               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  6295  0044A6  A0D8               	btfss	status,0,c
  6296  0044A8  D008               	goto	l7161
  6297                           
  6298                           ; BSR set to: 1
  6299  0044AA  0101               	movlb	1	; () banked
  6300  0044AC  5102               	movf	___awmod@divisor& (0+255),w,b
  6301  0044AE  0101               	movlb	1	; () banked
  6302  0044B0  5F00               	subwf	___awmod@dividend& (0+255),f,b
  6303  0044B2  0101               	movlb	1	; () banked
  6304  0044B4  5103               	movf	(___awmod@divisor+1)& (0+255),w,b
  6305  0044B6  0101               	movlb	1	; () banked
  6306  0044B8  5B01               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  6307  0044BA                     l7161:
  6308                           
  6309                           ; BSR set to: 1
  6310  0044BA  0101               	movlb	1	; () banked
  6311  0044BC  90D8               	bcf	status,0,c
  6312  0044BE  3303               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  6313  0044C0  3302               	rrcf	___awmod@divisor& (0+255),f,b
  6314                           
  6315                           ; BSR set to: 1
  6316  0044C2  0101               	movlb	1	; () banked
  6317  0044C4  2F04               	decfsz	___awmod@counter& (0+255),f,b
  6318  0044C6  D7E7               	goto	l7157
  6319  0044C8                     l7165:
  6320                           
  6321                           ; BSR set to: 1
  6322  0044C8  0101               	movlb	1	; () banked
  6323  0044CA  5105               	movf	___awmod@sign& (0+255),w,b
  6324  0044CC  0101               	movlb	1	; () banked
  6325  0044CE  B4D8               	btfsc	status,2,c
  6326  0044D0  D005               	goto	l7169
  6327                           
  6328                           ; BSR set to: 1
  6329  0044D2  0101               	movlb	1	; () banked
  6330  0044D4  6D00               	negf	___awmod@dividend& (0+255),b
  6331  0044D6  1F01               	comf	(___awmod@dividend+1)& (0+255),f,b
  6332  0044D8  B0D8               	btfsc	status,0,c
  6333  0044DA  2B01               	incf	(___awmod@dividend+1)& (0+255),f,b
  6334  0044DC                     l7169:
  6335                           
  6336                           ; BSR set to: 1
  6337  0044DC  C100  F100         	movff	___awmod@dividend,?___awmod
  6338  0044E0  C101  F101         	movff	___awmod@dividend+1,?___awmod+1
  6339  0044E4  0012               	return	
  6340  0044E6                     __end_of___awmod:
  6341                           	opt stack 0
  6342                           tblptru	equ	0xFF8
  6343                           tblptrh	equ	0xFF7
  6344                           tblptrl	equ	0xFF6
  6345                           tablat	equ	0xFF5
  6346                           prodh	equ	0xFF4
  6347                           prodl	equ	0xFF3
  6348                           intcon	equ	0xFF2
  6349                           intcon3	equ	0xFF0
  6350                           postinc0	equ	0xFEE
  6351                           wreg	equ	0xFE8
  6352                           indf2	equ	0xFDF
  6353                           postinc2	equ	0xFDE
  6354                           postdec2	equ	0xFDD
  6355                           fsr2h	equ	0xFDA
  6356                           fsr2l	equ	0xFD9
  6357                           status	equ	0xFD8
  6358                           
  6359 ;; *************** function ___awdiv *****************
  6360 ;; Defined at:
  6361 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/awdiv.c"
  6362 ;; Parameters:    Size  Location     Type
  6363 ;;  dividend        2    6[BANK1 ] int 
  6364 ;;  divisor         2    8[BANK1 ] int 
  6365 ;; Auto vars:     Size  Location     Type
  6366 ;;  quotient        2   12[BANK1 ] int 
  6367 ;;  sign            1   11[BANK1 ] unsigned char 
  6368 ;;  counter         1   10[BANK1 ] unsigned char 
  6369 ;; Return value:  Size  Location     Type
  6370 ;;                  2    6[BANK1 ] int 
  6371 ;; Registers used:
  6372 ;;		wreg, status,2, status,0
  6373 ;; Tracked objects:
  6374 ;;		On entry : 0/0
  6375 ;;		On exit  : 0/0
  6376 ;;		Unchanged: 0/0
  6377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6378 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6379 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6381 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6382 ;;Total ram usage:        8 bytes
  6383 ;; Hardware stack levels used:    1
  6384 ;; Hardware stack levels required when called:    8
  6385 ;; This function calls:
  6386 ;;		Nothing
  6387 ;; This function is called by:
  6388 ;;		_fround
  6389 ;;		_scale
  6390 ;;		_printf
  6391 ;; This function uses a non-reentrant model
  6392 ;;
  6393                           
  6394                           	psect	text10
  6395  00421C                     __ptext10:
  6396                           	opt stack 0
  6397  00421C                     ___awdiv:
  6398                           	opt stack 19
  6399                           
  6400                           ; BSR set to: 1
  6401                           ;incstack = 0
  6402  00421C  0E00               	movlw	0
  6403  00421E  0101               	movlb	1	; () banked
  6404  004220  6F0B               	movwf	___awdiv@sign& (0+255),b
  6405                           
  6406                           ; BSR set to: 1
  6407  004222  0101               	movlb	1	; () banked
  6408  004224  AF09               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6409  004226  D008               	goto	l7101
  6410                           
  6411                           ; BSR set to: 1
  6412  004228  0101               	movlb	1	; () banked
  6413  00422A  6D08               	negf	___awdiv@divisor& (0+255),b
  6414  00422C  1F09               	comf	(___awdiv@divisor+1)& (0+255),f,b
  6415  00422E  B0D8               	btfsc	status,0,c
  6416  004230  2B09               	incf	(___awdiv@divisor+1)& (0+255),f,b
  6417                           
  6418                           ; BSR set to: 1
  6419  004232  0E01               	movlw	1
  6420  004234  0101               	movlb	1	; () banked
  6421  004236  6F0B               	movwf	___awdiv@sign& (0+255),b
  6422  004238                     l7101:
  6423                           
  6424                           ; BSR set to: 1
  6425  004238  0101               	movlb	1	; () banked
  6426  00423A  AF07               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  6427  00423C  D008               	goto	l7107
  6428                           
  6429                           ; BSR set to: 1
  6430  00423E  0101               	movlb	1	; () banked
  6431  004240  6D06               	negf	___awdiv@dividend& (0+255),b
  6432  004242  1F07               	comf	(___awdiv@dividend+1)& (0+255),f,b
  6433  004244  B0D8               	btfsc	status,0,c
  6434  004246  2B07               	incf	(___awdiv@dividend+1)& (0+255),f,b
  6435                           
  6436                           ; BSR set to: 1
  6437  004248  0E01               	movlw	1
  6438  00424A  0101               	movlb	1	; () banked
  6439  00424C  1B0B               	xorwf	___awdiv@sign& (0+255),f,b
  6440  00424E                     l7107:
  6441                           
  6442                           ; BSR set to: 1
  6443  00424E  0E00               	movlw	0
  6444  004250  0101               	movlb	1	; () banked
  6445  004252  6F0D               	movwf	(___awdiv@quotient+1)& (0+255),b
  6446  004254  0E00               	movlw	0
  6447  004256  6F0C               	movwf	___awdiv@quotient& (0+255),b
  6448                           
  6449                           ; BSR set to: 1
  6450  004258  0101               	movlb	1	; () banked
  6451  00425A  5108               	movf	___awdiv@divisor& (0+255),w,b
  6452  00425C  0101               	movlb	1	; () banked
  6453  00425E  1109               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  6454  004260  B4D8               	btfsc	status,2,c
  6455  004262  D02C               	goto	l7129
  6456                           
  6457                           ; BSR set to: 1
  6458  004264  0E01               	movlw	1
  6459  004266  0101               	movlb	1	; () banked
  6460  004268  6F0A               	movwf	___awdiv@counter& (0+255),b
  6461  00426A  D006               	goto	l7115
  6462  00426C                     l7113:
  6463                           
  6464                           ; BSR set to: 1
  6465  00426C  0101               	movlb	1	; () banked
  6466  00426E  90D8               	bcf	status,0,c
  6467  004270  3708               	rlcf	___awdiv@divisor& (0+255),f,b
  6468  004272  3709               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  6469  004274  0101               	movlb	1	; () banked
  6470  004276  2B0A               	incf	___awdiv@counter& (0+255),f,b
  6471  004278                     l7115:
  6472                           
  6473                           ; BSR set to: 1
  6474  004278  0101               	movlb	1	; () banked
  6475  00427A  AF09               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6476  00427C  D7F7               	goto	l7113
  6477  00427E                     l7117:
  6478                           
  6479                           ; BSR set to: 1
  6480  00427E  0101               	movlb	1	; () banked
  6481  004280  90D8               	bcf	status,0,c
  6482  004282  370C               	rlcf	___awdiv@quotient& (0+255),f,b
  6483  004284  370D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  6484                           
  6485                           ; BSR set to: 1
  6486  004286  0101               	movlb	1	; () banked
  6487  004288  5108               	movf	___awdiv@divisor& (0+255),w,b
  6488  00428A  0101               	movlb	1	; () banked
  6489  00428C  5D06               	subwf	___awdiv@dividend& (0+255),w,b
  6490  00428E  0101               	movlb	1	; () banked
  6491  004290  5109               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6492  004292  0101               	movlb	1	; () banked
  6493  004294  5907               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  6494  004296  A0D8               	btfss	status,0,c
  6495  004298  D00A               	goto	l7125
  6496                           
  6497                           ; BSR set to: 1
  6498  00429A  0101               	movlb	1	; () banked
  6499  00429C  5108               	movf	___awdiv@divisor& (0+255),w,b
  6500  00429E  0101               	movlb	1	; () banked
  6501  0042A0  5F06               	subwf	___awdiv@dividend& (0+255),f,b
  6502  0042A2  0101               	movlb	1	; () banked
  6503  0042A4  5109               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6504  0042A6  0101               	movlb	1	; () banked
  6505  0042A8  5B07               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  6506                           
  6507                           ; BSR set to: 1
  6508  0042AA  0101               	movlb	1	; () banked
  6509  0042AC  810C               	bsf	___awdiv@quotient& (0+255),0,b
  6510  0042AE                     l7125:
  6511                           
  6512                           ; BSR set to: 1
  6513  0042AE  0101               	movlb	1	; () banked
  6514  0042B0  90D8               	bcf	status,0,c
  6515  0042B2  3309               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  6516  0042B4  3308               	rrcf	___awdiv@divisor& (0+255),f,b
  6517                           
  6518                           ; BSR set to: 1
  6519  0042B6  0101               	movlb	1	; () banked
  6520  0042B8  2F0A               	decfsz	___awdiv@counter& (0+255),f,b
  6521  0042BA  D7E1               	goto	l7117
  6522  0042BC                     l7129:
  6523                           
  6524                           ; BSR set to: 1
  6525  0042BC  0101               	movlb	1	; () banked
  6526  0042BE  510B               	movf	___awdiv@sign& (0+255),w,b
  6527  0042C0  0101               	movlb	1	; () banked
  6528  0042C2  B4D8               	btfsc	status,2,c
  6529  0042C4  D005               	goto	l7133
  6530                           
  6531                           ; BSR set to: 1
  6532  0042C6  0101               	movlb	1	; () banked
  6533  0042C8  6D0C               	negf	___awdiv@quotient& (0+255),b
  6534  0042CA  1F0D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  6535  0042CC  B0D8               	btfsc	status,0,c
  6536  0042CE  2B0D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  6537  0042D0                     l7133:
  6538                           
  6539                           ; BSR set to: 1
  6540  0042D0  C10C  F106         	movff	___awdiv@quotient,?___awdiv
  6541  0042D4  C10D  F107         	movff	___awdiv@quotient+1,?___awdiv+1
  6542  0042D8  0012               	return	
  6543  0042DA                     __end_of___awdiv:
  6544                           	opt stack 0
  6545                           tblptru	equ	0xFF8
  6546                           tblptrh	equ	0xFF7
  6547                           tblptrl	equ	0xFF6
  6548                           tablat	equ	0xFF5
  6549                           prodh	equ	0xFF4
  6550                           prodl	equ	0xFF3
  6551                           intcon	equ	0xFF2
  6552                           intcon3	equ	0xFF0
  6553                           postinc0	equ	0xFEE
  6554                           wreg	equ	0xFE8
  6555                           indf2	equ	0xFDF
  6556                           postinc2	equ	0xFDE
  6557                           postdec2	equ	0xFDD
  6558                           fsr2h	equ	0xFDA
  6559                           fsr2l	equ	0xFD9
  6560                           status	equ	0xFD8
  6561                           
  6562 ;; *************** function __tdiv_to_l_ *****************
  6563 ;; Defined at:
  6564 ;;		line 60 in file "/opt/microchip/xc8/v1.41/sources/common/ftdivl.c"
  6565 ;; Parameters:    Size  Location     Type
  6566 ;;  f1              3    0[BANK1 ] float 
  6567 ;;  f2              3    3[BANK1 ] float 
  6568 ;; Auto vars:     Size  Location     Type
  6569 ;;  quot            4    9[BANK1 ] unsigned long 
  6570 ;;  exp1            1   14[BANK1 ] unsigned char 
  6571 ;;  cntr            1   13[BANK1 ] unsigned char 
  6572 ;; Return value:  Size  Location     Type
  6573 ;;                  4    0[BANK1 ] unsigned long 
  6574 ;; Registers used:
  6575 ;;		wreg, status,2, status,0
  6576 ;; Tracked objects:
  6577 ;;		On entry : 0/0
  6578 ;;		On exit  : 0/0
  6579 ;;		Unchanged: 0/0
  6580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6581 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6582 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6583 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6584 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6585 ;;Total ram usage:       15 bytes
  6586 ;; Hardware stack levels used:    1
  6587 ;; Hardware stack levels required when called:    8
  6588 ;; This function calls:
  6589 ;;		Nothing
  6590 ;; This function is called by:
  6591 ;;		_printf
  6592 ;; This function uses a non-reentrant model
  6593 ;;
  6594                           
  6595                           	psect	text11
  6596  002D86                     __ptext11:
  6597                           	opt stack 0
  6598  002D86                     __tdiv_to_l_:
  6599                           	opt stack 20
  6600                           
  6601                           ; BSR set to: 1
  6602                           ;incstack = 0
  6603  002D86  C102  F106         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  6604  002D8A  0101               	movlb	1	; () banked
  6605  002D8C  6B07               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  6606  002D8E  6B08               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  6607  002D90  0101               	movlb	1	; () banked
  6608  002D92  3501               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
  6609  002D94  0101               	movlb	1	; () banked
  6610  002D96  3706               	rlcf	??__tdiv_to_l_& (0+255),f,b
  6611  002D98  E301               	bnc	u7641
  6612  002D9A  8107               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  6613  002D9C                     u7641:
  6614  002D9C  0101               	movlb	1	; () banked
  6615  002D9E  5106               	movf	??__tdiv_to_l_& (0+255),w,b
  6616  002DA0  0101               	movlb	1	; () banked
  6617  002DA2  6F0E               	movwf	__tdiv_to_l_@exp1& (0+255),b
  6618  002DA4  0101               	movlb	1	; () banked
  6619  002DA6  510E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  6620  002DA8  A4D8               	btfss	status,2,c
  6621  002DAA  D00A               	goto	l7299
  6622                           
  6623                           ; BSR set to: 1
  6624  002DAC  0E00               	movlw	0
  6625  002DAE  0101               	movlb	1	; () banked
  6626  002DB0  6F00               	movwf	?__tdiv_to_l_& (0+255),b
  6627  002DB2  0E00               	movlw	0
  6628  002DB4  6F01               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  6629  002DB6  0E00               	movlw	0
  6630  002DB8  6F02               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  6631  002DBA  0E00               	movlw	0
  6632  002DBC  6F03               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  6633                           
  6634                           ; BSR set to: 1
  6635  002DBE  0012               	return	
  6636  002DC0                     l7299:
  6637                           
  6638                           ; BSR set to: 1
  6639  002DC0  C105  F106         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  6640  002DC4  0101               	movlb	1	; () banked
  6641  002DC6  6B07               	clrf	(??__tdiv_to_l_+1)& (0+255),b
  6642  002DC8  6B08               	clrf	(??__tdiv_to_l_+2)& (0+255),b
  6643  002DCA  0101               	movlb	1	; () banked
  6644  002DCC  3504               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  6645  002DCE  0101               	movlb	1	; () banked
  6646  002DD0  3706               	rlcf	??__tdiv_to_l_& (0+255),f,b
  6647  002DD2  E301               	bnc	u7661
  6648  002DD4  8107               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
  6649  002DD6                     u7661:
  6650  002DD6  0101               	movlb	1	; () banked
  6651  002DD8  5106               	movf	??__tdiv_to_l_& (0+255),w,b
  6652  002DDA  0101               	movlb	1	; () banked
  6653  002DDC  6F0D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  6654  002DDE  0101               	movlb	1	; () banked
  6655  002DE0  510D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  6656  002DE2  A4D8               	btfss	status,2,c
  6657  002DE4  D00A               	goto	l7305
  6658                           
  6659                           ; BSR set to: 1
  6660  002DE6  0E00               	movlw	0
  6661  002DE8  0101               	movlb	1	; () banked
  6662  002DEA  6F00               	movwf	?__tdiv_to_l_& (0+255),b
  6663  002DEC  0E00               	movlw	0
  6664  002DEE  6F01               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  6665  002DF0  0E00               	movlw	0
  6666  002DF2  6F02               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  6667  002DF4  0E00               	movlw	0
  6668  002DF6  6F03               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  6669                           
  6670                           ; BSR set to: 1
  6671  002DF8  0012               	return	
  6672  002DFA                     l7305:
  6673                           
  6674                           ; BSR set to: 1
  6675  002DFA  0101               	movlb	1	; () banked
  6676  002DFC  8F01               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
  6677                           
  6678                           ; BSR set to: 1
  6679  002DFE  0EFF               	movlw	255
  6680  002E00  0101               	movlb	1	; () banked
  6681  002E02  1700               	andwf	__tdiv_to_l_@f1& (0+255),f,b
  6682  002E04  0EFF               	movlw	255
  6683  002E06  0101               	movlb	1	; () banked
  6684  002E08  1701               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  6685  002E0A  0E00               	movlw	0
  6686  002E0C  0101               	movlb	1	; () banked
  6687  002E0E  1702               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  6688  002E10  0101               	movlb	1	; () banked
  6689  002E12  8F04               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
  6690                           
  6691                           ; BSR set to: 1
  6692  002E14  0EFF               	movlw	255
  6693  002E16  0101               	movlb	1	; () banked
  6694  002E18  1703               	andwf	__tdiv_to_l_@f2& (0+255),f,b
  6695  002E1A  0EFF               	movlw	255
  6696  002E1C  0101               	movlb	1	; () banked
  6697  002E1E  1704               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
  6698  002E20  0E00               	movlw	0
  6699  002E22  0101               	movlb	1	; () banked
  6700  002E24  1705               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
  6701                           
  6702                           ; BSR set to: 1
  6703  002E26  0E00               	movlw	0
  6704  002E28  0101               	movlb	1	; () banked
  6705  002E2A  6F09               	movwf	__tdiv_to_l_@quot& (0+255),b
  6706  002E2C  0E00               	movlw	0
  6707  002E2E  6F0A               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
  6708  002E30  0E00               	movlw	0
  6709  002E32  6F0B               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
  6710  002E34  0E00               	movlw	0
  6711  002E36  6F0C               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
  6712                           
  6713                           ; BSR set to: 1
  6714  002E38  0E7F               	movlw	127
  6715  002E3A  0101               	movlb	1	; () banked
  6716  002E3C  5F0E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  6717                           
  6718                           ; BSR set to: 1
  6719  002E3E  0101               	movlb	1	; () banked
  6720  002E40  510D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
  6721  002E42  0F98               	addlw	152
  6722  002E44  0101               	movlb	1	; () banked
  6723  002E46  5F0E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
  6724                           
  6725                           ; BSR set to: 1
  6726  002E48  0E18               	movlw	24
  6727  002E4A  0101               	movlb	1	; () banked
  6728  002E4C  6F0D               	movwf	__tdiv_to_l_@cntr& (0+255),b
  6729  002E4E                     l899:
  6730                           
  6731                           ; BSR set to: 1
  6732  002E4E  0101               	movlb	1	; () banked
  6733  002E50  90D8               	bcf	status,0,c
  6734  002E52  3709               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  6735  002E54  370A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  6736  002E56  370B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  6737  002E58  370C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  6738                           
  6739                           ; BSR set to: 1
  6740  002E5A  0101               	movlb	1	; () banked
  6741  002E5C  5103               	movf	__tdiv_to_l_@f2& (0+255),w,b
  6742  002E5E  0101               	movlb	1	; () banked
  6743  002E60  5D00               	subwf	__tdiv_to_l_@f1& (0+255),w,b
  6744  002E62  0101               	movlb	1	; () banked
  6745  002E64  5104               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  6746  002E66  0101               	movlb	1	; () banked
  6747  002E68  5901               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
  6748  002E6A  0101               	movlb	1	; () banked
  6749  002E6C  5105               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  6750  002E6E  0101               	movlb	1	; () banked
  6751  002E70  5902               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
  6752  002E72  A0D8               	btfss	status,0,c
  6753  002E74  D00E               	goto	l900
  6754                           
  6755                           ; BSR set to: 1
  6756  002E76  0101               	movlb	1	; () banked
  6757  002E78  5103               	movf	__tdiv_to_l_@f2& (0+255),w,b
  6758  002E7A  0101               	movlb	1	; () banked
  6759  002E7C  5F00               	subwf	__tdiv_to_l_@f1& (0+255),f,b
  6760  002E7E  0101               	movlb	1	; () banked
  6761  002E80  5104               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
  6762  002E82  0101               	movlb	1	; () banked
  6763  002E84  5B01               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
  6764  002E86  0101               	movlb	1	; () banked
  6765  002E88  5105               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
  6766  002E8A  0101               	movlb	1	; () banked
  6767  002E8C  5B02               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
  6768                           
  6769                           ; BSR set to: 1
  6770  002E8E  0101               	movlb	1	; () banked
  6771  002E90  8109               	bsf	__tdiv_to_l_@quot& (0+255),0,b
  6772  002E92                     l900:
  6773                           
  6774                           ; BSR set to: 1
  6775  002E92  0101               	movlb	1	; () banked
  6776  002E94  90D8               	bcf	status,0,c
  6777  002E96  3700               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
  6778  002E98  3701               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
  6779  002E9A  3702               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
  6780                           
  6781                           ; BSR set to: 1
  6782  002E9C  0101               	movlb	1	; () banked
  6783  002E9E  2F0D               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
  6784  002EA0  D7D6               	goto	l899
  6785                           
  6786                           ; BSR set to: 1
  6787                           
  6788                           ; BSR set to: 1
  6789  002EA2  0101               	movlb	1	; () banked
  6790  002EA4  AF0E               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
  6791  002EA6  D01A               	goto	l7339
  6792                           
  6793                           ; BSR set to: 1
  6794  002EA8  0101               	movlb	1	; () banked
  6795  002EAA  510E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  6796  002EAC  0A80               	xorlw	128
  6797  002EAE  0F97               	addlw	151
  6798  002EB0  B0D8               	btfsc	status,0,c
  6799  002EB2  D00A               	goto	l7335
  6800                           
  6801                           ; BSR set to: 1
  6802  002EB4  0E00               	movlw	0
  6803  002EB6  0101               	movlb	1	; () banked
  6804  002EB8  6F00               	movwf	?__tdiv_to_l_& (0+255),b
  6805  002EBA  0E00               	movlw	0
  6806  002EBC  6F01               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  6807  002EBE  0E00               	movlw	0
  6808  002EC0  6F02               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  6809  002EC2  0E00               	movlw	0
  6810  002EC4  6F03               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  6811                           
  6812                           ; BSR set to: 1
  6813  002EC6  0012               	return	
  6814  002EC8                     l7335:
  6815                           
  6816                           ; BSR set to: 1
  6817  002EC8  0101               	movlb	1	; () banked
  6818  002ECA  90D8               	bcf	status,0,c
  6819  002ECC  330C               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  6820  002ECE  330B               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  6821  002ED0  330A               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  6822  002ED2  3309               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
  6823                           
  6824                           ; BSR set to: 1
  6825  002ED4  0101               	movlb	1	; () banked
  6826  002ED6  3F0E               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
  6827  002ED8  D7F7               	goto	l7335
  6828                           
  6829                           ; BSR set to: 1
  6830  002EDA  D01B               	goto	l906
  6831  002EDC                     l7339:
  6832                           
  6833                           ; BSR set to: 1
  6834  002EDC  0E17               	movlw	23
  6835  002EDE  0101               	movlb	1	; () banked
  6836  002EE0  650E               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
  6837  002EE2  D012               	goto	l7347
  6838                           
  6839                           ; BSR set to: 1
  6840  002EE4  0E00               	movlw	0
  6841  002EE6  0101               	movlb	1	; () banked
  6842  002EE8  6F00               	movwf	?__tdiv_to_l_& (0+255),b
  6843  002EEA  0E00               	movlw	0
  6844  002EEC  6F01               	movwf	(?__tdiv_to_l_+1)& (0+255),b
  6845  002EEE  0E00               	movlw	0
  6846  002EF0  6F02               	movwf	(?__tdiv_to_l_+2)& (0+255),b
  6847  002EF2  0E00               	movlw	0
  6848  002EF4  6F03               	movwf	(?__tdiv_to_l_+3)& (0+255),b
  6849                           
  6850                           ; BSR set to: 1
  6851  002EF6  0012               	return	
  6852  002EF8                     l7345:
  6853                           
  6854                           ; BSR set to: 1
  6855  002EF8  0101               	movlb	1	; () banked
  6856  002EFA  90D8               	bcf	status,0,c
  6857  002EFC  3709               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
  6858  002EFE  370A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
  6859  002F00  370B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
  6860  002F02  370C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
  6861  002F04  0101               	movlb	1	; () banked
  6862  002F06  070E               	decf	__tdiv_to_l_@exp1& (0+255),f,b
  6863  002F08                     l7347:
  6864                           
  6865                           ; BSR set to: 1
  6866  002F08  0101               	movlb	1	; () banked
  6867  002F0A  510E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
  6868  002F0C  0101               	movlb	1	; () banked
  6869  002F0E  A4D8               	btfss	status,2,c
  6870  002F10  D7F3               	goto	l7345
  6871  002F12                     l906:
  6872                           
  6873                           ; BSR set to: 1
  6874  002F12  C109  F100         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  6875  002F16  C10A  F101         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  6876  002F1A  C10B  F102         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  6877  002F1E  C10C  F103         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  6878                           
  6879                           ; BSR set to: 1
  6880  002F22  0012               	return		;funcret
  6881  002F24                     __end_of__tdiv_to_l_:
  6882                           	opt stack 0
  6883                           tblptru	equ	0xFF8
  6884                           tblptrh	equ	0xFF7
  6885                           tblptrl	equ	0xFF6
  6886                           tablat	equ	0xFF5
  6887                           prodh	equ	0xFF4
  6888                           prodl	equ	0xFF3
  6889                           intcon	equ	0xFF2
  6890                           intcon3	equ	0xFF0
  6891                           postinc0	equ	0xFEE
  6892                           wreg	equ	0xFE8
  6893                           indf2	equ	0xFDF
  6894                           postinc2	equ	0xFDE
  6895                           postdec2	equ	0xFDD
  6896                           fsr2h	equ	0xFDA
  6897                           fsr2l	equ	0xFD9
  6898                           status	equ	0xFD8
  6899                           
  6900 ;; *************** function __div_to_l_ *****************
  6901 ;; Defined at:
  6902 ;;		line 60 in file "/opt/microchip/xc8/v1.41/sources/common/fldivl.c"
  6903 ;; Parameters:    Size  Location     Type
  6904 ;;  f1              3    0[BANK1 ] unsigned long 
  6905 ;;  f2              3    3[BANK1 ] unsigned long 
  6906 ;; Auto vars:     Size  Location     Type
  6907 ;;  quot            4    6[BANK1 ] unsigned long 
  6908 ;;  exp1            1   11[BANK1 ] unsigned char 
  6909 ;;  cntr            1   10[BANK1 ] unsigned char 
  6910 ;; Return value:  Size  Location     Type
  6911 ;;                  4    0[BANK1 ] unsigned long 
  6912 ;; Registers used:
  6913 ;;		wreg, status,2, status,0
  6914 ;; Tracked objects:
  6915 ;;		On entry : 0/0
  6916 ;;		On exit  : 0/0
  6917 ;;		Unchanged: 0/0
  6918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6919 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6920 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6922 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6923 ;;Total ram usage:       12 bytes
  6924 ;; Hardware stack levels used:    1
  6925 ;; Hardware stack levels required when called:    8
  6926 ;; This function calls:
  6927 ;;		Nothing
  6928 ;; This function is called by:
  6929 ;;		_printf
  6930 ;; This function uses a non-reentrant model
  6931 ;;
  6932                           
  6933                           	psect	text12
  6934  002F24                     __ptext12:
  6935                           	opt stack 0
  6936  002F24                     __div_to_l_:
  6937                           	opt stack 20
  6938                           
  6939                           ; BSR set to: 1
  6940                           ;incstack = 0
  6941  002F24  0101               	movlb	1	; () banked
  6942  002F26  3502               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
  6943  002F28  3503               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
  6944  002F2A  0101               	movlb	1	; () banked
  6945  002F2C  6F0B               	movwf	__div_to_l_@exp1& (0+255),b
  6946  002F2E  0101               	movlb	1	; () banked
  6947  002F30  510B               	movf	__div_to_l_@exp1& (0+255),w,b
  6948  002F32  A4D8               	btfss	status,2,c
  6949  002F34  D00A               	goto	l7355
  6950                           
  6951                           ; BSR set to: 1
  6952  002F36  0E00               	movlw	0
  6953  002F38  0101               	movlb	1	; () banked
  6954  002F3A  6F00               	movwf	?__div_to_l_& (0+255),b
  6955  002F3C  0E00               	movlw	0
  6956  002F3E  6F01               	movwf	(?__div_to_l_+1)& (0+255),b
  6957  002F40  0E00               	movlw	0
  6958  002F42  6F02               	movwf	(?__div_to_l_+2)& (0+255),b
  6959  002F44  0E00               	movlw	0
  6960  002F46  6F03               	movwf	(?__div_to_l_+3)& (0+255),b
  6961                           
  6962                           ; BSR set to: 1
  6963  002F48  0012               	return	
  6964  002F4A                     l7355:
  6965                           
  6966                           ; BSR set to: 1
  6967  002F4A  0101               	movlb	1	; () banked
  6968  002F4C  3505               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
  6969  002F4E  3506               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
  6970  002F50  0101               	movlb	1	; () banked
  6971  002F52  6F0A               	movwf	__div_to_l_@cntr& (0+255),b
  6972  002F54  0101               	movlb	1	; () banked
  6973  002F56  510A               	movf	__div_to_l_@cntr& (0+255),w,b
  6974  002F58  A4D8               	btfss	status,2,c
  6975  002F5A  D00A               	goto	l7361
  6976                           
  6977                           ; BSR set to: 1
  6978  002F5C  0E00               	movlw	0
  6979  002F5E  0101               	movlb	1	; () banked
  6980  002F60  6F00               	movwf	?__div_to_l_& (0+255),b
  6981  002F62  0E00               	movlw	0
  6982  002F64  6F01               	movwf	(?__div_to_l_+1)& (0+255),b
  6983  002F66  0E00               	movlw	0
  6984  002F68  6F02               	movwf	(?__div_to_l_+2)& (0+255),b
  6985  002F6A  0E00               	movlw	0
  6986  002F6C  6F03               	movwf	(?__div_to_l_+3)& (0+255),b
  6987                           
  6988                           ; BSR set to: 1
  6989  002F6E  0012               	return	
  6990  002F70                     l7361:
  6991                           
  6992                           ; BSR set to: 1
  6993  002F70  0101               	movlb	1	; () banked
  6994  002F72  8F02               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
  6995                           
  6996                           ; BSR set to: 1
  6997  002F74  0EFF               	movlw	255
  6998  002F76  0101               	movlb	1	; () banked
  6999  002F78  1700               	andwf	__div_to_l_@f1& (0+255),f,b
  7000  002F7A  0EFF               	movlw	255
  7001  002F7C  1701               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
  7002  002F7E  0EFF               	movlw	255
  7003  002F80  1702               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
  7004  002F82  0E00               	movlw	0
  7005  002F84  1703               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
  7006                           
  7007                           ; BSR set to: 1
  7008  002F86  0101               	movlb	1	; () banked
  7009  002F88  8F05               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
  7010  002F8A  0EFF               	movlw	255
  7011  002F8C  0101               	movlb	1	; () banked
  7012  002F8E  1703               	andwf	__div_to_l_@f2& (0+255),f,b
  7013  002F90  0EFF               	movlw	255
  7014  002F92  1704               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
  7015  002F94  0EFF               	movlw	255
  7016  002F96  1705               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
  7017  002F98  0E00               	movlw	0
  7018  002F9A  1706               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
  7019                           
  7020                           ; BSR set to: 1
  7021  002F9C  0E00               	movlw	0
  7022  002F9E  0101               	movlb	1	; () banked
  7023  002FA0  6F06               	movwf	__div_to_l_@quot& (0+255),b
  7024  002FA2  0E00               	movlw	0
  7025  002FA4  6F07               	movwf	(__div_to_l_@quot+1)& (0+255),b
  7026  002FA6  0E00               	movlw	0
  7027  002FA8  6F08               	movwf	(__div_to_l_@quot+2)& (0+255),b
  7028  002FAA  0E00               	movlw	0
  7029  002FAC  6F09               	movwf	(__div_to_l_@quot+3)& (0+255),b
  7030                           
  7031                           ; BSR set to: 1
  7032  002FAE  0E7F               	movlw	127
  7033  002FB0  0101               	movlb	1	; () banked
  7034  002FB2  5F0B               	subwf	__div_to_l_@exp1& (0+255),f,b
  7035                           
  7036                           ; BSR set to: 1
  7037  002FB4  0101               	movlb	1	; () banked
  7038  002FB6  510A               	movf	__div_to_l_@cntr& (0+255),w,b
  7039  002FB8  0FA0               	addlw	160
  7040  002FBA  0101               	movlb	1	; () banked
  7041  002FBC  5F0B               	subwf	__div_to_l_@exp1& (0+255),f,b
  7042                           
  7043                           ; BSR set to: 1
  7044  002FBE  0E20               	movlw	32
  7045  002FC0  0101               	movlb	1	; () banked
  7046  002FC2  6F0A               	movwf	__div_to_l_@cntr& (0+255),b
  7047  002FC4                     l7375:
  7048                           
  7049                           ; BSR set to: 1
  7050  002FC4  0101               	movlb	1	; () banked
  7051  002FC6  90D8               	bcf	status,0,c
  7052  002FC8  3706               	rlcf	__div_to_l_@quot& (0+255),f,b
  7053  002FCA  3707               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  7054  002FCC  3708               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  7055  002FCE  3709               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  7056                           
  7057                           ; BSR set to: 1
  7058  002FD0  0101               	movlb	1	; () banked
  7059  002FD2  5103               	movf	__div_to_l_@f2& (0+255),w,b
  7060  002FD4  0101               	movlb	1	; () banked
  7061  002FD6  5D00               	subwf	__div_to_l_@f1& (0+255),w,b
  7062  002FD8  0101               	movlb	1	; () banked
  7063  002FDA  5104               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  7064  002FDC  0101               	movlb	1	; () banked
  7065  002FDE  5901               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
  7066  002FE0  0101               	movlb	1	; () banked
  7067  002FE2  5105               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  7068  002FE4  0101               	movlb	1	; () banked
  7069  002FE6  5902               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
  7070  002FE8  0101               	movlb	1	; () banked
  7071  002FEA  5106               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  7072  002FEC  0101               	movlb	1	; () banked
  7073  002FEE  5903               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
  7074  002FF0  A0D8               	btfss	status,0,c
  7075  002FF2  D012               	goto	l7383
  7076                           
  7077                           ; BSR set to: 1
  7078  002FF4  0101               	movlb	1	; () banked
  7079  002FF6  5103               	movf	__div_to_l_@f2& (0+255),w,b
  7080  002FF8  0101               	movlb	1	; () banked
  7081  002FFA  5F00               	subwf	__div_to_l_@f1& (0+255),f,b
  7082  002FFC  0101               	movlb	1	; () banked
  7083  002FFE  5104               	movf	(__div_to_l_@f2+1)& (0+255),w,b
  7084  003000  0101               	movlb	1	; () banked
  7085  003002  5B01               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
  7086  003004  0101               	movlb	1	; () banked
  7087  003006  5105               	movf	(__div_to_l_@f2+2)& (0+255),w,b
  7088  003008  0101               	movlb	1	; () banked
  7089  00300A  5B02               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
  7090  00300C  0101               	movlb	1	; () banked
  7091  00300E  5106               	movf	(__div_to_l_@f2+3)& (0+255),w,b
  7092  003010  0101               	movlb	1	; () banked
  7093  003012  5B03               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
  7094                           
  7095                           ; BSR set to: 1
  7096  003014  0101               	movlb	1	; () banked
  7097  003016  8106               	bsf	__div_to_l_@quot& (0+255),0,b
  7098  003018                     l7383:
  7099                           
  7100                           ; BSR set to: 1
  7101  003018  0101               	movlb	1	; () banked
  7102  00301A  90D8               	bcf	status,0,c
  7103  00301C  3700               	rlcf	__div_to_l_@f1& (0+255),f,b
  7104  00301E  3701               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
  7105  003020  3702               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
  7106  003022  3703               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
  7107                           
  7108                           ; BSR set to: 1
  7109  003024  0101               	movlb	1	; () banked
  7110  003026  2F0A               	decfsz	__div_to_l_@cntr& (0+255),f,b
  7111  003028  D7CD               	goto	l7375
  7112                           
  7113                           ; BSR set to: 1
  7114                           
  7115                           ; BSR set to: 1
  7116  00302A  0101               	movlb	1	; () banked
  7117  00302C  AF0B               	btfss	__div_to_l_@exp1& (0+255),7,b
  7118  00302E  D01A               	goto	l7399
  7119                           
  7120                           ; BSR set to: 1
  7121  003030  0101               	movlb	1	; () banked
  7122  003032  510B               	movf	__div_to_l_@exp1& (0+255),w,b
  7123  003034  0A80               	xorlw	128
  7124  003036  0F9F               	addlw	159
  7125  003038  B0D8               	btfsc	status,0,c
  7126  00303A  D00A               	goto	l7395
  7127                           
  7128                           ; BSR set to: 1
  7129  00303C  0E00               	movlw	0
  7130  00303E  0101               	movlb	1	; () banked
  7131  003040  6F00               	movwf	?__div_to_l_& (0+255),b
  7132  003042  0E00               	movlw	0
  7133  003044  6F01               	movwf	(?__div_to_l_+1)& (0+255),b
  7134  003046  0E00               	movlw	0
  7135  003048  6F02               	movwf	(?__div_to_l_+2)& (0+255),b
  7136  00304A  0E00               	movlw	0
  7137  00304C  6F03               	movwf	(?__div_to_l_+3)& (0+255),b
  7138                           
  7139                           ; BSR set to: 1
  7140  00304E  0012               	return	
  7141  003050                     l7395:
  7142                           
  7143                           ; BSR set to: 1
  7144  003050  0101               	movlb	1	; () banked
  7145  003052  90D8               	bcf	status,0,c
  7146  003054  3309               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
  7147  003056  3308               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
  7148  003058  3307               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
  7149  00305A  3306               	rrcf	__div_to_l_@quot& (0+255),f,b
  7150                           
  7151                           ; BSR set to: 1
  7152  00305C  0101               	movlb	1	; () banked
  7153  00305E  3F0B               	incfsz	__div_to_l_@exp1& (0+255),f,b
  7154  003060  D7F7               	goto	l7395
  7155                           
  7156                           ; BSR set to: 1
  7157  003062  D01B               	goto	l802
  7158  003064                     l7399:
  7159                           
  7160                           ; BSR set to: 1
  7161  003064  0E1F               	movlw	31
  7162  003066  0101               	movlb	1	; () banked
  7163  003068  650B               	cpfsgt	__div_to_l_@exp1& (0+255),b
  7164  00306A  D012               	goto	l7407
  7165                           
  7166                           ; BSR set to: 1
  7167  00306C  0E00               	movlw	0
  7168  00306E  0101               	movlb	1	; () banked
  7169  003070  6F00               	movwf	?__div_to_l_& (0+255),b
  7170  003072  0E00               	movlw	0
  7171  003074  6F01               	movwf	(?__div_to_l_+1)& (0+255),b
  7172  003076  0E00               	movlw	0
  7173  003078  6F02               	movwf	(?__div_to_l_+2)& (0+255),b
  7174  00307A  0E00               	movlw	0
  7175  00307C  6F03               	movwf	(?__div_to_l_+3)& (0+255),b
  7176                           
  7177                           ; BSR set to: 1
  7178  00307E  0012               	return	
  7179  003080                     l7405:
  7180                           
  7181                           ; BSR set to: 1
  7182  003080  0101               	movlb	1	; () banked
  7183  003082  90D8               	bcf	status,0,c
  7184  003084  3706               	rlcf	__div_to_l_@quot& (0+255),f,b
  7185  003086  3707               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
  7186  003088  3708               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
  7187  00308A  3709               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
  7188  00308C  0101               	movlb	1	; () banked
  7189  00308E  070B               	decf	__div_to_l_@exp1& (0+255),f,b
  7190  003090                     l7407:
  7191                           
  7192                           ; BSR set to: 1
  7193  003090  0101               	movlb	1	; () banked
  7194  003092  510B               	movf	__div_to_l_@exp1& (0+255),w,b
  7195  003094  0101               	movlb	1	; () banked
  7196  003096  A4D8               	btfss	status,2,c
  7197  003098  D7F3               	goto	l7405
  7198  00309A                     l802:
  7199                           
  7200                           ; BSR set to: 1
  7201  00309A  C106  F100         	movff	__div_to_l_@quot,?__div_to_l_
  7202  00309E  C107  F101         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  7203  0030A2  C108  F102         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  7204  0030A6  C109  F103         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  7205                           
  7206                           ; BSR set to: 1
  7207  0030AA  0012               	return		;funcret
  7208  0030AC                     __end_of__div_to_l_:
  7209                           	opt stack 0
  7210                           tblptru	equ	0xFF8
  7211                           tblptrh	equ	0xFF7
  7212                           tblptrl	equ	0xFF6
  7213                           tablat	equ	0xFF5
  7214                           prodh	equ	0xFF4
  7215                           prodl	equ	0xFF3
  7216                           intcon	equ	0xFF2
  7217                           intcon3	equ	0xFF0
  7218                           postinc0	equ	0xFEE
  7219                           wreg	equ	0xFE8
  7220                           indf2	equ	0xFDF
  7221                           postinc2	equ	0xFDE
  7222                           postdec2	equ	0xFDD
  7223                           fsr2h	equ	0xFDA
  7224                           fsr2l	equ	0xFD9
  7225                           status	equ	0xFD8
  7226                           
  7227 ;; *************** function ___lltoft *****************
  7228 ;; Defined at:
  7229 ;;		line 35 in file "/opt/microchip/xc8/v1.41/sources/common/lltoft.c"
  7230 ;; Parameters:    Size  Location     Type
  7231 ;;  c               4    8[BANK1 ] unsigned long 
  7232 ;; Auto vars:     Size  Location     Type
  7233 ;;  exp             1   16[BANK1 ] unsigned char 
  7234 ;; Return value:  Size  Location     Type
  7235 ;;                  3    8[BANK1 ] float 
  7236 ;; Registers used:
  7237 ;;		wreg, status,2, status,0, cstack
  7238 ;; Tracked objects:
  7239 ;;		On entry : 0/0
  7240 ;;		On exit  : 0/0
  7241 ;;		Unchanged: 0/0
  7242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7243 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7244 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7245 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7246 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7247 ;;Total ram usage:        9 bytes
  7248 ;; Hardware stack levels used:    1
  7249 ;; Hardware stack levels required when called:    9
  7250 ;; This function calls:
  7251 ;;		___ftpack
  7252 ;; This function is called by:
  7253 ;;		_printf
  7254 ;; This function uses a non-reentrant model
  7255 ;;
  7256                           
  7257                           	psect	text13
  7258  0048A8                     __ptext13:
  7259                           	opt stack 0
  7260  0048A8                     ___lltoft:
  7261                           	opt stack 19
  7262                           
  7263                           ; BSR set to: 1
  7264                           ;incstack = 0
  7265  0048A8  0E8E               	movlw	142
  7266  0048AA  0101               	movlb	1	; () banked
  7267  0048AC  6F10               	movwf	___lltoft@exp& (0+255),b
  7268  0048AE  D008               	goto	l7481
  7269  0048B0                     l7479:
  7270                           
  7271                           ; BSR set to: 1
  7272  0048B0  0101               	movlb	1	; () banked
  7273  0048B2  90D8               	bcf	status,0,c
  7274  0048B4  330B               	rrcf	(___lltoft@c+3)& (0+255),f,b
  7275  0048B6  330A               	rrcf	(___lltoft@c+2)& (0+255),f,b
  7276  0048B8  3309               	rrcf	(___lltoft@c+1)& (0+255),f,b
  7277  0048BA  3308               	rrcf	___lltoft@c& (0+255),f,b
  7278  0048BC  0101               	movlb	1	; () banked
  7279  0048BE  2B10               	incf	___lltoft@exp& (0+255),f,b
  7280  0048C0                     l7481:
  7281                           
  7282                           ; BSR set to: 1
  7283  0048C0  0E00               	movlw	0
  7284  0048C2  0101               	movlb	1	; () banked
  7285  0048C4  1508               	andwf	___lltoft@c& (0+255),w,b
  7286  0048C6  0101               	movlb	1	; () banked
  7287  0048C8  6F0C               	movwf	??___lltoft& (0+255),b
  7288  0048CA  0E00               	movlw	0
  7289  0048CC  0101               	movlb	1	; () banked
  7290  0048CE  1509               	andwf	(___lltoft@c+1)& (0+255),w,b
  7291  0048D0  0101               	movlb	1	; () banked
  7292  0048D2  6F0D               	movwf	(??___lltoft+1)& (0+255),b
  7293  0048D4  0E00               	movlw	0
  7294  0048D6  0101               	movlb	1	; () banked
  7295  0048D8  150A               	andwf	(___lltoft@c+2)& (0+255),w,b
  7296  0048DA  0101               	movlb	1	; () banked
  7297  0048DC  6F0E               	movwf	(??___lltoft+2)& (0+255),b
  7298  0048DE  0EFF               	movlw	255
  7299  0048E0  0101               	movlb	1	; () banked
  7300  0048E2  150B               	andwf	(___lltoft@c+3)& (0+255),w,b
  7301  0048E4  0101               	movlb	1	; () banked
  7302  0048E6  6F0F               	movwf	(??___lltoft+3)& (0+255),b
  7303  0048E8  0101               	movlb	1	; () banked
  7304  0048EA  510C               	movf	??___lltoft& (0+255),w,b
  7305  0048EC  0101               	movlb	1	; () banked
  7306  0048EE  110D               	iorwf	(??___lltoft+1)& (0+255),w,b
  7307  0048F0  0101               	movlb	1	; () banked
  7308  0048F2  110E               	iorwf	(??___lltoft+2)& (0+255),w,b
  7309  0048F4  0101               	movlb	1	; () banked
  7310  0048F6  110F               	iorwf	(??___lltoft+3)& (0+255),w,b
  7311  0048F8  A4D8               	btfss	status,2,c
  7312  0048FA  D7DA               	goto	l7479
  7313                           
  7314                           ; BSR set to: 1
  7315                           
  7316                           ; BSR set to: 1
  7317  0048FC  C108  F100         	movff	___lltoft@c,___ftpack@arg
  7318  004900  C109  F101         	movff	___lltoft@c+1,___ftpack@arg+1
  7319  004904  C10A  F102         	movff	___lltoft@c+2,___ftpack@arg+2
  7320  004908  C110  F103         	movff	___lltoft@exp,___ftpack@exp
  7321  00490C  0E00               	movlw	0
  7322  00490E  0101               	movlb	1	; () banked
  7323  004910  6F04               	movwf	___ftpack@sign& (0+255),b
  7324  004912  EC1E  F01C         	call	___ftpack	;wreg free
  7325  004916  C100  F108         	movff	?___ftpack,?___lltoft
  7326  00491A  C101  F109         	movff	?___ftpack+1,?___lltoft+1
  7327  00491E  C102  F10A         	movff	?___ftpack+2,?___lltoft+2
  7328  004922  0012               	return	
  7329  004924                     __end_of___lltoft:
  7330                           	opt stack 0
  7331                           tblptru	equ	0xFF8
  7332                           tblptrh	equ	0xFF7
  7333                           tblptrl	equ	0xFF6
  7334                           tablat	equ	0xFF5
  7335                           prodh	equ	0xFF4
  7336                           prodl	equ	0xFF3
  7337                           intcon	equ	0xFF2
  7338                           intcon3	equ	0xFF0
  7339                           postinc0	equ	0xFEE
  7340                           wreg	equ	0xFE8
  7341                           indf2	equ	0xFDF
  7342                           postinc2	equ	0xFDE
  7343                           postdec2	equ	0xFDD
  7344                           fsr2h	equ	0xFDA
  7345                           fsr2l	equ	0xFD9
  7346                           status	equ	0xFD8
  7347                           
  7348 ;; *************** function ___llmod *****************
  7349 ;; Defined at:
  7350 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/llmod.c"
  7351 ;; Parameters:    Size  Location     Type
  7352 ;;  dividend        4   13[BANK1 ] unsigned long 
  7353 ;;  divisor         4   17[BANK1 ] unsigned long 
  7354 ;; Auto vars:     Size  Location     Type
  7355 ;;  counter         1   21[BANK1 ] unsigned char 
  7356 ;; Return value:  Size  Location     Type
  7357 ;;                  4   13[BANK1 ] unsigned long 
  7358 ;; Registers used:
  7359 ;;		wreg, status,2, status,0
  7360 ;; Tracked objects:
  7361 ;;		On entry : 0/0
  7362 ;;		On exit  : 0/0
  7363 ;;		Unchanged: 0/0
  7364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7365 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7366 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7368 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7369 ;;Total ram usage:        9 bytes
  7370 ;; Hardware stack levels used:    1
  7371 ;; Hardware stack levels required when called:    8
  7372 ;; This function calls:
  7373 ;;		Nothing
  7374 ;; This function is called by:
  7375 ;;		_printf
  7376 ;; This function uses a non-reentrant model
  7377 ;;
  7378                           
  7379                           	psect	text14
  7380  0044E6                     __ptext14:
  7381                           	opt stack 0
  7382  0044E6                     ___llmod:
  7383                           	opt stack 20
  7384                           
  7385                           ;incstack = 0
  7386  0044E6  0101               	movlb	1	; () banked
  7387  0044E8  5111               	movf	___llmod@divisor& (0+255),w,b
  7388  0044EA  0101               	movlb	1	; () banked
  7389  0044EC  1112               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  7390  0044EE  0101               	movlb	1	; () banked
  7391  0044F0  1113               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  7392  0044F2  0101               	movlb	1	; () banked
  7393  0044F4  1114               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  7394  0044F6  B4D8               	btfsc	status,2,c
  7395  0044F8  D03A               	goto	l991
  7396                           
  7397                           ; BSR set to: 1
  7398  0044FA  0E01               	movlw	1
  7399  0044FC  0101               	movlb	1	; () banked
  7400  0044FE  6F15               	movwf	___llmod@counter& (0+255),b
  7401  004500  D008               	goto	l7467
  7402  004502                     l7465:
  7403                           
  7404                           ; BSR set to: 1
  7405  004502  0101               	movlb	1	; () banked
  7406  004504  90D8               	bcf	status,0,c
  7407  004506  3711               	rlcf	___llmod@divisor& (0+255),f,b
  7408  004508  3712               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  7409  00450A  3713               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  7410  00450C  3714               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  7411  00450E  0101               	movlb	1	; () banked
  7412  004510  2B15               	incf	___llmod@counter& (0+255),f,b
  7413  004512                     l7467:
  7414                           
  7415                           ; BSR set to: 1
  7416  004512  0101               	movlb	1	; () banked
  7417  004514  AF14               	btfss	(___llmod@divisor+3)& (0+255),7,b
  7418  004516  D7F5               	goto	l7465
  7419  004518                     l7469:
  7420                           
  7421                           ; BSR set to: 1
  7422  004518  0101               	movlb	1	; () banked
  7423  00451A  5111               	movf	___llmod@divisor& (0+255),w,b
  7424  00451C  0101               	movlb	1	; () banked
  7425  00451E  5D0D               	subwf	___llmod@dividend& (0+255),w,b
  7426  004520  0101               	movlb	1	; () banked
  7427  004522  5112               	movf	(___llmod@divisor+1)& (0+255),w,b
  7428  004524  0101               	movlb	1	; () banked
  7429  004526  590E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  7430  004528  0101               	movlb	1	; () banked
  7431  00452A  5113               	movf	(___llmod@divisor+2)& (0+255),w,b
  7432  00452C  0101               	movlb	1	; () banked
  7433  00452E  590F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  7434  004530  0101               	movlb	1	; () banked
  7435  004532  5114               	movf	(___llmod@divisor+3)& (0+255),w,b
  7436  004534  0101               	movlb	1	; () banked
  7437  004536  5910               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  7438  004538  A0D8               	btfss	status,0,c
  7439  00453A  D010               	goto	l7473
  7440                           
  7441                           ; BSR set to: 1
  7442  00453C  0101               	movlb	1	; () banked
  7443  00453E  5111               	movf	___llmod@divisor& (0+255),w,b
  7444  004540  0101               	movlb	1	; () banked
  7445  004542  5F0D               	subwf	___llmod@dividend& (0+255),f,b
  7446  004544  0101               	movlb	1	; () banked
  7447  004546  5112               	movf	(___llmod@divisor+1)& (0+255),w,b
  7448  004548  0101               	movlb	1	; () banked
  7449  00454A  5B0E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  7450  00454C  0101               	movlb	1	; () banked
  7451  00454E  5113               	movf	(___llmod@divisor+2)& (0+255),w,b
  7452  004550  0101               	movlb	1	; () banked
  7453  004552  5B0F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  7454  004554  0101               	movlb	1	; () banked
  7455  004556  5114               	movf	(___llmod@divisor+3)& (0+255),w,b
  7456  004558  0101               	movlb	1	; () banked
  7457  00455A  5B10               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  7458  00455C                     l7473:
  7459                           
  7460                           ; BSR set to: 1
  7461  00455C  0101               	movlb	1	; () banked
  7462  00455E  90D8               	bcf	status,0,c
  7463  004560  3314               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  7464  004562  3313               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  7465  004564  3312               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  7466  004566  3311               	rrcf	___llmod@divisor& (0+255),f,b
  7467                           
  7468                           ; BSR set to: 1
  7469  004568  0101               	movlb	1	; () banked
  7470  00456A  2F15               	decfsz	___llmod@counter& (0+255),f,b
  7471  00456C  D7D5               	goto	l7469
  7472  00456E                     l991:
  7473                           
  7474                           ; BSR set to: 1
  7475  00456E  C10D  F10D         	movff	___llmod@dividend,?___llmod
  7476  004572  C10E  F10E         	movff	___llmod@dividend+1,?___llmod+1
  7477  004576  C10F  F10F         	movff	___llmod@dividend+2,?___llmod+2
  7478  00457A  C110  F110         	movff	___llmod@dividend+3,?___llmod+3
  7479                           
  7480                           ; BSR set to: 1
  7481  00457E  0012               	return		;funcret
  7482  004580                     __end_of___llmod:
  7483                           	opt stack 0
  7484                           tblptru	equ	0xFF8
  7485                           tblptrh	equ	0xFF7
  7486                           tblptrl	equ	0xFF6
  7487                           tablat	equ	0xFF5
  7488                           prodh	equ	0xFF4
  7489                           prodl	equ	0xFF3
  7490                           intcon	equ	0xFF2
  7491                           intcon3	equ	0xFF0
  7492                           postinc0	equ	0xFEE
  7493                           wreg	equ	0xFE8
  7494                           indf2	equ	0xFDF
  7495                           postinc2	equ	0xFDE
  7496                           postdec2	equ	0xFDD
  7497                           fsr2h	equ	0xFDA
  7498                           fsr2l	equ	0xFD9
  7499                           status	equ	0xFD8
  7500                           
  7501 ;; *************** function ___fttol *****************
  7502 ;; Defined at:
  7503 ;;		line 44 in file "/opt/microchip/xc8/v1.41/sources/common/fttol.c"
  7504 ;; Parameters:    Size  Location     Type
  7505 ;;  f1              3   42[BANK1 ] float 
  7506 ;; Auto vars:     Size  Location     Type
  7507 ;;  lval            4   52[BANK1 ] unsigned long 
  7508 ;;  exp1            1   56[BANK1 ] unsigned char 
  7509 ;;  sign1           1   51[BANK1 ] unsigned char 
  7510 ;; Return value:  Size  Location     Type
  7511 ;;                  4   42[BANK1 ] long 
  7512 ;; Registers used:
  7513 ;;		wreg, status,2, status,0
  7514 ;; Tracked objects:
  7515 ;;		On entry : 0/0
  7516 ;;		On exit  : 0/0
  7517 ;;		Unchanged: 0/0
  7518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7519 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7520 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7521 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7522 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7523 ;;Total ram usage:       15 bytes
  7524 ;; Hardware stack levels used:    1
  7525 ;; Hardware stack levels required when called:    8
  7526 ;; This function calls:
  7527 ;;		Nothing
  7528 ;; This function is called by:
  7529 ;;		_printf
  7530 ;; This function uses a non-reentrant model
  7531 ;;
  7532                           
  7533                           	psect	text15
  7534  00336C                     __ptext15:
  7535                           	opt stack 0
  7536  00336C                     ___fttol:
  7537                           	opt stack 20
  7538                           
  7539                           ; BSR set to: 1
  7540                           ;incstack = 0
  7541  00336C  C12C  F12E         	movff	___fttol@f1+2,??___fttol
  7542  003370  0101               	movlb	1	; () banked
  7543  003372  6B2F               	clrf	(??___fttol+1)& (0+255),b
  7544  003374  6B30               	clrf	(??___fttol+2)& (0+255),b
  7545  003376  0101               	movlb	1	; () banked
  7546  003378  352B               	rlcf	(___fttol@f1+1)& (0+255),w,b
  7547  00337A  0101               	movlb	1	; () banked
  7548  00337C  372E               	rlcf	??___fttol& (0+255),f,b
  7549  00337E  E301               	bnc	u6071
  7550  003380  812F               	bsf	(??___fttol+1)& (0+255),0,b
  7551  003382                     u6071:
  7552  003382  0101               	movlb	1	; () banked
  7553  003384  512E               	movf	??___fttol& (0+255),w,b
  7554  003386  0101               	movlb	1	; () banked
  7555  003388  6F38               	movwf	___fttol@exp1& (0+255),b
  7556  00338A  0101               	movlb	1	; () banked
  7557  00338C  5138               	movf	___fttol@exp1& (0+255),w,b
  7558  00338E  A4D8               	btfss	status,2,c
  7559  003390  D00A               	goto	l5711
  7560                           
  7561                           ; BSR set to: 1
  7562  003392  0E00               	movlw	0
  7563  003394  0101               	movlb	1	; () banked
  7564  003396  6F2A               	movwf	?___fttol& (0+255),b
  7565  003398  0E00               	movlw	0
  7566  00339A  6F2B               	movwf	(?___fttol+1)& (0+255),b
  7567  00339C  0E00               	movlw	0
  7568  00339E  6F2C               	movwf	(?___fttol+2)& (0+255),b
  7569  0033A0  0E00               	movlw	0
  7570  0033A2  6F2D               	movwf	(?___fttol+3)& (0+255),b
  7571                           
  7572                           ; BSR set to: 1
  7573  0033A4  0012               	return	
  7574  0033A6                     l5711:
  7575                           
  7576                           ; BSR set to: 1
  7577  0033A6  0E17               	movlw	23
  7578  0033A8  0101               	movlb	1	; () banked
  7579  0033AA  6F2E               	movwf	??___fttol& (0+255),b
  7580  0033AC  C12A  F12F         	movff	___fttol@f1,??___fttol+1
  7581  0033B0  C12B  F130         	movff	___fttol@f1+1,??___fttol+2
  7582  0033B4  C12C  F131         	movff	___fttol@f1+2,??___fttol+3
  7583  0033B8  0101               	movlb	1	; () banked
  7584  0033BA  292E               	incf	??___fttol& (0+255),w,b
  7585  0033BC  0101               	movlb	1	; () banked
  7586  0033BE  6F32               	movwf	(??___fttol+4)& (0+255),b
  7587  0033C0  D005               	goto	u6090
  7588  0033C2                     u6095:
  7589  0033C2  0101               	movlb	1	; () banked
  7590  0033C4  90D8               	bcf	status,0,c
  7591  0033C6  3331               	rrcf	(??___fttol+3)& (0+255),f,b
  7592  0033C8  3330               	rrcf	(??___fttol+2)& (0+255),f,b
  7593  0033CA  332F               	rrcf	(??___fttol+1)& (0+255),f,b
  7594  0033CC                     u6090:
  7595  0033CC  0101               	movlb	1	; () banked
  7596  0033CE  2F32               	decfsz	(??___fttol+4)& (0+255),f,b
  7597  0033D0  D7F8               	goto	u6095
  7598  0033D2  0101               	movlb	1	; () banked
  7599  0033D4  512F               	movf	(??___fttol+1)& (0+255),w,b
  7600  0033D6  0101               	movlb	1	; () banked
  7601  0033D8  6F33               	movwf	___fttol@sign1& (0+255),b
  7602                           
  7603                           ; BSR set to: 1
  7604  0033DA  0101               	movlb	1	; () banked
  7605  0033DC  8F2B               	bsf	(___fttol@f1+1)& (0+255),7,b
  7606                           
  7607                           ; BSR set to: 1
  7608  0033DE  0EFF               	movlw	255
  7609  0033E0  0101               	movlb	1	; () banked
  7610  0033E2  172A               	andwf	___fttol@f1& (0+255),f,b
  7611  0033E4  0EFF               	movlw	255
  7612  0033E6  0101               	movlb	1	; () banked
  7613  0033E8  172B               	andwf	(___fttol@f1+1)& (0+255),f,b
  7614  0033EA  0E00               	movlw	0
  7615  0033EC  0101               	movlb	1	; () banked
  7616  0033EE  172C               	andwf	(___fttol@f1+2)& (0+255),f,b
  7617                           
  7618                           ; BSR set to: 1
  7619  0033F0  0101               	movlb	1	; () banked
  7620  0033F2  512A               	movf	___fttol@f1& (0+255),w,b
  7621  0033F4  0101               	movlb	1	; () banked
  7622  0033F6  6F34               	movwf	___fttol@lval& (0+255),b
  7623  0033F8  0101               	movlb	1	; () banked
  7624  0033FA  512B               	movf	(___fttol@f1+1)& (0+255),w,b
  7625  0033FC  0101               	movlb	1	; () banked
  7626  0033FE  6F35               	movwf	(___fttol@lval+1)& (0+255),b
  7627  003400  0101               	movlb	1	; () banked
  7628  003402  512C               	movf	(___fttol@f1+2)& (0+255),w,b
  7629  003404  0101               	movlb	1	; () banked
  7630  003406  6F36               	movwf	(___fttol@lval+2)& (0+255),b
  7631  003408  0101               	movlb	1	; () banked
  7632  00340A  6B37               	clrf	(___fttol@lval+3)& (0+255),b
  7633                           
  7634                           ; BSR set to: 1
  7635  00340C  0E8E               	movlw	142
  7636  00340E  0101               	movlb	1	; () banked
  7637  003410  5F38               	subwf	___fttol@exp1& (0+255),f,b
  7638                           
  7639                           ; BSR set to: 1
  7640  003412  0101               	movlb	1	; () banked
  7641  003414  AF38               	btfss	___fttol@exp1& (0+255),7,b
  7642  003416  D01A               	goto	l5733
  7643                           
  7644                           ; BSR set to: 1
  7645  003418  0101               	movlb	1	; () banked
  7646  00341A  5138               	movf	___fttol@exp1& (0+255),w,b
  7647  00341C  0A80               	xorlw	128
  7648  00341E  0F8F               	addlw	143
  7649  003420  B0D8               	btfsc	status,0,c
  7650  003422  D00A               	goto	l5729
  7651                           
  7652                           ; BSR set to: 1
  7653  003424  0E00               	movlw	0
  7654  003426  0101               	movlb	1	; () banked
  7655  003428  6F2A               	movwf	?___fttol& (0+255),b
  7656  00342A  0E00               	movlw	0
  7657  00342C  6F2B               	movwf	(?___fttol+1)& (0+255),b
  7658  00342E  0E00               	movlw	0
  7659  003430  6F2C               	movwf	(?___fttol+2)& (0+255),b
  7660  003432  0E00               	movlw	0
  7661  003434  6F2D               	movwf	(?___fttol+3)& (0+255),b
  7662                           
  7663                           ; BSR set to: 1
  7664  003436  0012               	return	
  7665  003438                     l5729:
  7666                           
  7667                           ; BSR set to: 1
  7668  003438  0101               	movlb	1	; () banked
  7669  00343A  90D8               	bcf	status,0,c
  7670  00343C  3337               	rrcf	(___fttol@lval+3)& (0+255),f,b
  7671  00343E  3336               	rrcf	(___fttol@lval+2)& (0+255),f,b
  7672  003440  3335               	rrcf	(___fttol@lval+1)& (0+255),f,b
  7673  003442  3334               	rrcf	___fttol@lval& (0+255),f,b
  7674                           
  7675                           ; BSR set to: 1
  7676  003444  0101               	movlb	1	; () banked
  7677  003446  3F38               	incfsz	___fttol@exp1& (0+255),f,b
  7678  003448  D7F7               	goto	l5729
  7679                           
  7680                           ; BSR set to: 1
  7681  00344A  D01B               	goto	l5743
  7682  00344C                     l5733:
  7683                           
  7684                           ; BSR set to: 1
  7685  00344C  0E17               	movlw	23
  7686  00344E  0101               	movlb	1	; () banked
  7687  003450  6538               	cpfsgt	___fttol@exp1& (0+255),b
  7688  003452  D012               	goto	l5741
  7689                           
  7690                           ; BSR set to: 1
  7691  003454  0E00               	movlw	0
  7692  003456  0101               	movlb	1	; () banked
  7693  003458  6F2A               	movwf	?___fttol& (0+255),b
  7694  00345A  0E00               	movlw	0
  7695  00345C  6F2B               	movwf	(?___fttol+1)& (0+255),b
  7696  00345E  0E00               	movlw	0
  7697  003460  6F2C               	movwf	(?___fttol+2)& (0+255),b
  7698  003462  0E00               	movlw	0
  7699  003464  6F2D               	movwf	(?___fttol+3)& (0+255),b
  7700                           
  7701                           ; BSR set to: 1
  7702  003466  0012               	return	
  7703  003468                     l5739:
  7704                           
  7705                           ; BSR set to: 1
  7706  003468  0101               	movlb	1	; () banked
  7707  00346A  90D8               	bcf	status,0,c
  7708  00346C  3734               	rlcf	___fttol@lval& (0+255),f,b
  7709  00346E  3735               	rlcf	(___fttol@lval+1)& (0+255),f,b
  7710  003470  3736               	rlcf	(___fttol@lval+2)& (0+255),f,b
  7711  003472  3737               	rlcf	(___fttol@lval+3)& (0+255),f,b
  7712  003474  0101               	movlb	1	; () banked
  7713  003476  0738               	decf	___fttol@exp1& (0+255),f,b
  7714  003478                     l5741:
  7715                           
  7716                           ; BSR set to: 1
  7717  003478  0101               	movlb	1	; () banked
  7718  00347A  5138               	movf	___fttol@exp1& (0+255),w,b
  7719  00347C  0101               	movlb	1	; () banked
  7720  00347E  A4D8               	btfss	status,2,c
  7721  003480  D7F3               	goto	l5739
  7722  003482                     l5743:
  7723                           
  7724                           ; BSR set to: 1
  7725  003482  0101               	movlb	1	; () banked
  7726  003484  5133               	movf	___fttol@sign1& (0+255),w,b
  7727  003486  0101               	movlb	1	; () banked
  7728  003488  B4D8               	btfsc	status,2,c
  7729  00348A  D009               	goto	l5747
  7730                           
  7731                           ; BSR set to: 1
  7732  00348C  0101               	movlb	1	; () banked
  7733  00348E  1F37               	comf	(___fttol@lval+3)& (0+255),f,b
  7734  003490  1F36               	comf	(___fttol@lval+2)& (0+255),f,b
  7735  003492  1F35               	comf	(___fttol@lval+1)& (0+255),f,b
  7736  003494  6D34               	negf	___fttol@lval& (0+255),b
  7737  003496  0E00               	movlw	0
  7738  003498  2335               	addwfc	(___fttol@lval+1)& (0+255),f,b
  7739  00349A  2336               	addwfc	(___fttol@lval+2)& (0+255),f,b
  7740  00349C  2337               	addwfc	(___fttol@lval+3)& (0+255),f,b
  7741  00349E                     l5747:
  7742                           
  7743                           ; BSR set to: 1
  7744  00349E  C134  F12A         	movff	___fttol@lval,?___fttol
  7745  0034A2  C135  F12B         	movff	___fttol@lval+1,?___fttol+1
  7746  0034A6  C136  F12C         	movff	___fttol@lval+2,?___fttol+2
  7747  0034AA  C137  F12D         	movff	___fttol@lval+3,?___fttol+3
  7748  0034AE  0012               	return	
  7749  0034B0                     __end_of___fttol:
  7750                           	opt stack 0
  7751                           tblptru	equ	0xFF8
  7752                           tblptrh	equ	0xFF7
  7753                           tblptrl	equ	0xFF6
  7754                           tablat	equ	0xFF5
  7755                           prodh	equ	0xFF4
  7756                           prodl	equ	0xFF3
  7757                           intcon	equ	0xFF2
  7758                           intcon3	equ	0xFF0
  7759                           postinc0	equ	0xFEE
  7760                           wreg	equ	0xFE8
  7761                           indf2	equ	0xFDF
  7762                           postinc2	equ	0xFDE
  7763                           postdec2	equ	0xFDD
  7764                           fsr2h	equ	0xFDA
  7765                           fsr2l	equ	0xFD9
  7766                           status	equ	0xFD8
  7767                           
  7768 ;; *************** function ___ftsub *****************
  7769 ;; Defined at:
  7770 ;;		line 20 in file "/opt/microchip/xc8/v1.41/sources/common/ftsub.c"
  7771 ;; Parameters:    Size  Location     Type
  7772 ;;  f1              3   57[BANK1 ] float 
  7773 ;;  f2              3   60[BANK1 ] float 
  7774 ;; Auto vars:     Size  Location     Type
  7775 ;;		None
  7776 ;; Return value:  Size  Location     Type
  7777 ;;                  3   57[BANK1 ] float 
  7778 ;; Registers used:
  7779 ;;		wreg, status,2, status,0, cstack
  7780 ;; Tracked objects:
  7781 ;;		On entry : 0/0
  7782 ;;		On exit  : 0/0
  7783 ;;		Unchanged: 0/0
  7784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7785 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7788 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7789 ;;Total ram usage:        6 bytes
  7790 ;; Hardware stack levels used:    1
  7791 ;; Hardware stack levels required when called:   10
  7792 ;; This function calls:
  7793 ;;		___ftadd
  7794 ;; This function is called by:
  7795 ;;		_printf
  7796 ;; This function uses a non-reentrant model
  7797 ;;
  7798                           
  7799                           	psect	text16
  7800  004C62                     __ptext16:
  7801                           	opt stack 0
  7802  004C62                     ___ftsub:
  7803                           	opt stack 18
  7804                           
  7805                           ; BSR set to: 1
  7806                           ;incstack = 0
  7807  004C62  0101               	movlb	1	; () banked
  7808  004C64  513C               	movf	___ftsub@f2& (0+255),w,b
  7809  004C66  0101               	movlb	1	; () banked
  7810  004C68  113D               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  7811  004C6A  0101               	movlb	1	; () banked
  7812  004C6C  113E               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  7813  004C6E  B4D8               	btfsc	status,2,c
  7814  004C70  D009               	goto	l7413
  7815                           
  7816                           ; BSR set to: 1
  7817  004C72  0E00               	movlw	0
  7818  004C74  0101               	movlb	1	; () banked
  7819  004C76  1B3C               	xorwf	___ftsub@f2& (0+255),f,b
  7820  004C78  0E00               	movlw	0
  7821  004C7A  0101               	movlb	1	; () banked
  7822  004C7C  1B3D               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  7823  004C7E  0E80               	movlw	128
  7824  004C80  0101               	movlb	1	; () banked
  7825  004C82  1B3E               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  7826  004C84                     l7413:
  7827                           
  7828                           ; BSR set to: 1
  7829  004C84  C139  F12D         	movff	___ftsub@f1,___ftadd@f1
  7830  004C88  C13A  F12E         	movff	___ftsub@f1+1,___ftadd@f1+1
  7831  004C8C  C13B  F12F         	movff	___ftsub@f1+2,___ftadd@f1+2
  7832  004C90  C13C  F130         	movff	___ftsub@f2,___ftadd@f2
  7833  004C94  C13D  F131         	movff	___ftsub@f2+1,___ftadd@f2+1
  7834  004C98  C13E  F132         	movff	___ftsub@f2+2,___ftadd@f2+2
  7835  004C9C  EC8C  F012         	call	___ftadd	;wreg free
  7836  004CA0  C12D  F139         	movff	?___ftadd,?___ftsub
  7837  004CA4  C12E  F13A         	movff	?___ftadd+1,?___ftsub+1
  7838  004CA8  C12F  F13B         	movff	?___ftadd+2,?___ftsub+2
  7839  004CAC  0012               	return	
  7840  004CAE                     __end_of___ftsub:
  7841                           	opt stack 0
  7842                           tblptru	equ	0xFF8
  7843                           tblptrh	equ	0xFF7
  7844                           tblptrl	equ	0xFF6
  7845                           tablat	equ	0xFF5
  7846                           prodh	equ	0xFF4
  7847                           prodl	equ	0xFF3
  7848                           intcon	equ	0xFF2
  7849                           intcon3	equ	0xFF0
  7850                           postinc0	equ	0xFEE
  7851                           wreg	equ	0xFE8
  7852                           indf2	equ	0xFDF
  7853                           postinc2	equ	0xFDE
  7854                           postdec2	equ	0xFDD
  7855                           fsr2h	equ	0xFDA
  7856                           fsr2l	equ	0xFD9
  7857                           status	equ	0xFD8
  7858                           
  7859 ;; *************** function ___ftadd *****************
  7860 ;; Defined at:
  7861 ;;		line 86 in file "/opt/microchip/xc8/v1.41/sources/common/ftadd.c"
  7862 ;; Parameters:    Size  Location     Type
  7863 ;;  f1              3   45[BANK1 ] float 
  7864 ;;  f2              3   48[BANK1 ] float 
  7865 ;; Auto vars:     Size  Location     Type
  7866 ;;  exp1            1   56[BANK1 ] unsigned char 
  7867 ;;  exp2            1   55[BANK1 ] unsigned char 
  7868 ;;  sign            1   54[BANK1 ] unsigned char 
  7869 ;; Return value:  Size  Location     Type
  7870 ;;                  3   45[BANK1 ] float 
  7871 ;; Registers used:
  7872 ;;		wreg, status,2, status,0, cstack
  7873 ;; Tracked objects:
  7874 ;;		On entry : 0/0
  7875 ;;		On exit  : 0/0
  7876 ;;		Unchanged: 0/0
  7877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7878 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7879 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7880 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7881 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7882 ;;Total ram usage:       12 bytes
  7883 ;; Hardware stack levels used:    1
  7884 ;; Hardware stack levels required when called:    9
  7885 ;; This function calls:
  7886 ;;		___ftpack
  7887 ;; This function is called by:
  7888 ;;		_printf
  7889 ;;		___ftsub
  7890 ;; This function uses a non-reentrant model
  7891 ;;
  7892                           
  7893                           	psect	text17
  7894  002518                     __ptext17:
  7895                           	opt stack 0
  7896  002518                     ___ftadd:
  7897                           	opt stack 18
  7898                           
  7899                           ;incstack = 0
  7900  002518  C12F  F133         	movff	___ftadd@f1+2,??___ftadd
  7901  00251C  0101               	movlb	1	; () banked
  7902  00251E  6B34               	clrf	(??___ftadd+1)& (0+255),b
  7903  002520  6B35               	clrf	(??___ftadd+2)& (0+255),b
  7904  002522  0101               	movlb	1	; () banked
  7905  002524  352E               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  7906  002526  0101               	movlb	1	; () banked
  7907  002528  3733               	rlcf	??___ftadd& (0+255),f,b
  7908  00252A  E301               	bnc	u7131
  7909  00252C  8134               	bsf	(??___ftadd+1)& (0+255),0,b
  7910  00252E                     u7131:
  7911  00252E  0101               	movlb	1	; () banked
  7912  002530  5133               	movf	??___ftadd& (0+255),w,b
  7913  002532  0101               	movlb	1	; () banked
  7914  002534  6F38               	movwf	___ftadd@exp1& (0+255),b
  7915  002536  C132  F133         	movff	___ftadd@f2+2,??___ftadd
  7916  00253A  0101               	movlb	1	; () banked
  7917  00253C  6B34               	clrf	(??___ftadd+1)& (0+255),b
  7918  00253E  6B35               	clrf	(??___ftadd+2)& (0+255),b
  7919  002540  0101               	movlb	1	; () banked
  7920  002542  3531               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  7921  002544  0101               	movlb	1	; () banked
  7922  002546  3733               	rlcf	??___ftadd& (0+255),f,b
  7923  002548  E301               	bnc	u7141
  7924  00254A  8134               	bsf	(??___ftadd+1)& (0+255),0,b
  7925  00254C                     u7141:
  7926  00254C  0101               	movlb	1	; () banked
  7927  00254E  5133               	movf	??___ftadd& (0+255),w,b
  7928  002550  0101               	movlb	1	; () banked
  7929  002552  6F37               	movwf	___ftadd@exp2& (0+255),b
  7930                           
  7931                           ; BSR set to: 1
  7932  002554  0101               	movlb	1	; () banked
  7933  002556  5138               	movf	___ftadd@exp1& (0+255),w,b
  7934  002558  0101               	movlb	1	; () banked
  7935  00255A  B4D8               	btfsc	status,2,c
  7936  00255C  D011               	goto	l857
  7937                           
  7938                           ; BSR set to: 1
  7939  00255E  0101               	movlb	1	; () banked
  7940  002560  5137               	movf	___ftadd@exp2& (0+255),w,b
  7941  002562  0101               	movlb	1	; () banked
  7942  002564  5D38               	subwf	___ftadd@exp1& (0+255),w,b
  7943  002566  B0D8               	btfsc	status,0,c
  7944  002568  D012               	goto	l6983
  7945                           
  7946                           ; BSR set to: 1
  7947  00256A  0101               	movlb	1	; () banked
  7948  00256C  5138               	movf	___ftadd@exp1& (0+255),w,b
  7949  00256E  0800               	sublw	0
  7950  002570  0101               	movlb	1	; () banked
  7951  002572  2537               	addwf	___ftadd@exp2& (0+255),w,b
  7952  002574  0101               	movlb	1	; () banked
  7953  002576  6F33               	movwf	??___ftadd& (0+255),b
  7954  002578  0E18               	movlw	24
  7955  00257A  0101               	movlb	1	; () banked
  7956  00257C  6533               	cpfsgt	??___ftadd& (0+255),b
  7957  00257E  D007               	goto	l6983
  7958  002580                     l857:
  7959                           
  7960                           ; BSR set to: 1
  7961  002580  C130  F12D         	movff	___ftadd@f2,?___ftadd
  7962  002584  C131  F12E         	movff	___ftadd@f2+1,?___ftadd+1
  7963  002588  C132  F12F         	movff	___ftadd@f2+2,?___ftadd+2
  7964  00258C  0012               	return	
  7965  00258E                     l6983:
  7966                           
  7967                           ; BSR set to: 1
  7968  00258E  0101               	movlb	1	; () banked
  7969  002590  5137               	movf	___ftadd@exp2& (0+255),w,b
  7970  002592  0101               	movlb	1	; () banked
  7971  002594  B4D8               	btfsc	status,2,c
  7972  002596  D011               	goto	l861
  7973                           
  7974                           ; BSR set to: 1
  7975  002598  0101               	movlb	1	; () banked
  7976  00259A  5138               	movf	___ftadd@exp1& (0+255),w,b
  7977  00259C  0101               	movlb	1	; () banked
  7978  00259E  5D37               	subwf	___ftadd@exp2& (0+255),w,b
  7979  0025A0  B0D8               	btfsc	status,0,c
  7980  0025A2  D012               	goto	l6989
  7981                           
  7982                           ; BSR set to: 1
  7983  0025A4  0101               	movlb	1	; () banked
  7984  0025A6  5137               	movf	___ftadd@exp2& (0+255),w,b
  7985  0025A8  0800               	sublw	0
  7986  0025AA  0101               	movlb	1	; () banked
  7987  0025AC  2538               	addwf	___ftadd@exp1& (0+255),w,b
  7988  0025AE  0101               	movlb	1	; () banked
  7989  0025B0  6F33               	movwf	??___ftadd& (0+255),b
  7990  0025B2  0E18               	movlw	24
  7991  0025B4  0101               	movlb	1	; () banked
  7992  0025B6  6533               	cpfsgt	??___ftadd& (0+255),b
  7993  0025B8  D007               	goto	l6989
  7994  0025BA                     l861:
  7995                           
  7996                           ; BSR set to: 1
  7997  0025BA  C12D  F12D         	movff	___ftadd@f1,?___ftadd
  7998  0025BE  C12E  F12E         	movff	___ftadd@f1+1,?___ftadd+1
  7999  0025C2  C12F  F12F         	movff	___ftadd@f1+2,?___ftadd+2
  8000  0025C6  0012               	return	
  8001  0025C8                     l6989:
  8002                           
  8003                           ; BSR set to: 1
  8004  0025C8  0E06               	movlw	6
  8005  0025CA  0101               	movlb	1	; () banked
  8006  0025CC  6F36               	movwf	___ftadd@sign& (0+255),b
  8007                           
  8008                           ; BSR set to: 1
  8009  0025CE  0101               	movlb	1	; () banked
  8010  0025D0  AF2F               	btfss	(___ftadd@f1+2)& (0+255),7,b
  8011  0025D2  D002               	goto	l6995
  8012                           
  8013                           ; BSR set to: 1
  8014  0025D4  0101               	movlb	1	; () banked
  8015  0025D6  8F36               	bsf	___ftadd@sign& (0+255),7,b
  8016  0025D8                     l6995:
  8017                           
  8018                           ; BSR set to: 1
  8019  0025D8  0101               	movlb	1	; () banked
  8020  0025DA  AF32               	btfss	(___ftadd@f2+2)& (0+255),7,b
  8021  0025DC  D002               	goto	l863
  8022                           
  8023                           ; BSR set to: 1
  8024  0025DE  0101               	movlb	1	; () banked
  8025  0025E0  8D36               	bsf	___ftadd@sign& (0+255),6,b
  8026  0025E2                     l863:
  8027                           
  8028                           ; BSR set to: 1
  8029  0025E2  0101               	movlb	1	; () banked
  8030  0025E4  8F2E               	bsf	(___ftadd@f1+1)& (0+255),7,b
  8031                           
  8032                           ; BSR set to: 1
  8033  0025E6  0EFF               	movlw	255
  8034  0025E8  0101               	movlb	1	; () banked
  8035  0025EA  172D               	andwf	___ftadd@f1& (0+255),f,b
  8036  0025EC  0EFF               	movlw	255
  8037  0025EE  0101               	movlb	1	; () banked
  8038  0025F0  172E               	andwf	(___ftadd@f1+1)& (0+255),f,b
  8039  0025F2  0E00               	movlw	0
  8040  0025F4  0101               	movlb	1	; () banked
  8041  0025F6  172F               	andwf	(___ftadd@f1+2)& (0+255),f,b
  8042  0025F8  0101               	movlb	1	; () banked
  8043  0025FA  8F31               	bsf	(___ftadd@f2+1)& (0+255),7,b
  8044                           
  8045                           ; BSR set to: 1
  8046  0025FC  0EFF               	movlw	255
  8047  0025FE  0101               	movlb	1	; () banked
  8048  002600  1730               	andwf	___ftadd@f2& (0+255),f,b
  8049  002602  0EFF               	movlw	255
  8050  002604  0101               	movlb	1	; () banked
  8051  002606  1731               	andwf	(___ftadd@f2+1)& (0+255),f,b
  8052  002608  0E00               	movlw	0
  8053  00260A  0101               	movlb	1	; () banked
  8054  00260C  1732               	andwf	(___ftadd@f2+2)& (0+255),f,b
  8055                           
  8056                           ; BSR set to: 1
  8057  00260E  0101               	movlb	1	; () banked
  8058  002610  5137               	movf	___ftadd@exp2& (0+255),w,b
  8059  002612  0101               	movlb	1	; () banked
  8060  002614  5D38               	subwf	___ftadd@exp1& (0+255),w,b
  8061  002616  B0D8               	btfsc	status,0,c
  8062  002618  D025               	goto	l7015
  8063  00261A                     l7005:
  8064                           
  8065                           ; BSR set to: 1
  8066  00261A  0101               	movlb	1	; () banked
  8067  00261C  90D8               	bcf	status,0,c
  8068  00261E  3730               	rlcf	___ftadd@f2& (0+255),f,b
  8069  002620  3731               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  8070  002622  3732               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  8071  002624  0101               	movlb	1	; () banked
  8072  002626  0737               	decf	___ftadd@exp2& (0+255),f,b
  8073                           
  8074                           ; BSR set to: 1
  8075  002628  0101               	movlb	1	; () banked
  8076  00262A  5138               	movf	___ftadd@exp1& (0+255),w,b
  8077  00262C  0101               	movlb	1	; () banked
  8078  00262E  1937               	xorwf	___ftadd@exp2& (0+255),w,b
  8079  002630  B4D8               	btfsc	status,2,c
  8080  002632  D011               	goto	l7013
  8081                           
  8082                           ; BSR set to: 1
  8083  002634  0101               	movlb	1	; () banked
  8084  002636  0736               	decf	___ftadd@sign& (0+255),f,b
  8085  002638  C136  F133         	movff	___ftadd@sign,??___ftadd
  8086  00263C  0E07               	movlw	7
  8087  00263E  0101               	movlb	1	; () banked
  8088  002640  1733               	andwf	??___ftadd& (0+255),f,b
  8089  002642  B4D8               	btfsc	status,2,c
  8090  002644  D008               	goto	l7013
  8091  002646  D7E9               	goto	l7005
  8092  002648                     l7011:
  8093                           
  8094                           ; BSR set to: 1
  8095  002648  0101               	movlb	1	; () banked
  8096  00264A  90D8               	bcf	status,0,c
  8097  00264C  332F               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  8098  00264E  332E               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  8099  002650  332D               	rrcf	___ftadd@f1& (0+255),f,b
  8100  002652  0101               	movlb	1	; () banked
  8101  002654  2B38               	incf	___ftadd@exp1& (0+255),f,b
  8102  002656                     l7013:
  8103                           
  8104                           ; BSR set to: 1
  8105  002656  0101               	movlb	1	; () banked
  8106  002658  5137               	movf	___ftadd@exp2& (0+255),w,b
  8107  00265A  0101               	movlb	1	; () banked
  8108  00265C  1938               	xorwf	___ftadd@exp1& (0+255),w,b
  8109  00265E  B4D8               	btfsc	status,2,c
  8110  002660  D02B               	goto	l872
  8111  002662  D7F2               	goto	l7011
  8112  002664                     l7015:
  8113                           
  8114                           ; BSR set to: 1
  8115  002664  0101               	movlb	1	; () banked
  8116  002666  5138               	movf	___ftadd@exp1& (0+255),w,b
  8117  002668  0101               	movlb	1	; () banked
  8118  00266A  5D37               	subwf	___ftadd@exp2& (0+255),w,b
  8119  00266C  B0D8               	btfsc	status,0,c
  8120  00266E  D024               	goto	l872
  8121  002670                     l7017:
  8122                           
  8123                           ; BSR set to: 1
  8124  002670  0101               	movlb	1	; () banked
  8125  002672  90D8               	bcf	status,0,c
  8126  002674  372D               	rlcf	___ftadd@f1& (0+255),f,b
  8127  002676  372E               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  8128  002678  372F               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  8129  00267A  0101               	movlb	1	; () banked
  8130  00267C  0738               	decf	___ftadd@exp1& (0+255),f,b
  8131                           
  8132                           ; BSR set to: 1
  8133  00267E  0101               	movlb	1	; () banked
  8134  002680  5138               	movf	___ftadd@exp1& (0+255),w,b
  8135  002682  0101               	movlb	1	; () banked
  8136  002684  1937               	xorwf	___ftadd@exp2& (0+255),w,b
  8137  002686  B4D8               	btfsc	status,2,c
  8138  002688  D011               	goto	l7025
  8139                           
  8140                           ; BSR set to: 1
  8141  00268A  0101               	movlb	1	; () banked
  8142  00268C  0736               	decf	___ftadd@sign& (0+255),f,b
  8143  00268E  C136  F133         	movff	___ftadd@sign,??___ftadd
  8144  002692  0E07               	movlw	7
  8145  002694  0101               	movlb	1	; () banked
  8146  002696  1733               	andwf	??___ftadd& (0+255),f,b
  8147  002698  B4D8               	btfsc	status,2,c
  8148  00269A  D008               	goto	l7025
  8149  00269C  D7E9               	goto	l7017
  8150  00269E                     l7023:
  8151                           
  8152                           ; BSR set to: 1
  8153  00269E  0101               	movlb	1	; () banked
  8154  0026A0  90D8               	bcf	status,0,c
  8155  0026A2  3332               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  8156  0026A4  3331               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  8157  0026A6  3330               	rrcf	___ftadd@f2& (0+255),f,b
  8158  0026A8  0101               	movlb	1	; () banked
  8159  0026AA  2B37               	incf	___ftadd@exp2& (0+255),f,b
  8160  0026AC                     l7025:
  8161                           
  8162                           ; BSR set to: 1
  8163  0026AC  0101               	movlb	1	; () banked
  8164  0026AE  5137               	movf	___ftadd@exp2& (0+255),w,b
  8165  0026B0  0101               	movlb	1	; () banked
  8166  0026B2  1938               	xorwf	___ftadd@exp1& (0+255),w,b
  8167  0026B4  A4D8               	btfss	status,2,c
  8168  0026B6  D7F3               	goto	l7023
  8169  0026B8                     l872:
  8170                           
  8171                           ; BSR set to: 1
  8172  0026B8  0101               	movlb	1	; () banked
  8173  0026BA  AF36               	btfss	___ftadd@sign& (0+255),7,b
  8174  0026BC  D012               	goto	l881
  8175                           
  8176                           ; BSR set to: 1
  8177  0026BE  0EFF               	movlw	255
  8178  0026C0  0101               	movlb	1	; () banked
  8179  0026C2  1B2D               	xorwf	___ftadd@f1& (0+255),f,b
  8180  0026C4  0EFF               	movlw	255
  8181  0026C6  0101               	movlb	1	; () banked
  8182  0026C8  1B2E               	xorwf	(___ftadd@f1+1)& (0+255),f,b
  8183  0026CA  0EFF               	movlw	255
  8184  0026CC  0101               	movlb	1	; () banked
  8185  0026CE  1B2F               	xorwf	(___ftadd@f1+2)& (0+255),f,b
  8186  0026D0  0E01               	movlw	1
  8187  0026D2  0101               	movlb	1	; () banked
  8188  0026D4  272D               	addwf	___ftadd@f1& (0+255),f,b
  8189  0026D6  0E00               	movlw	0
  8190  0026D8  0101               	movlb	1	; () banked
  8191  0026DA  232E               	addwfc	(___ftadd@f1+1)& (0+255),f,b
  8192  0026DC  0E00               	movlw	0
  8193  0026DE  0101               	movlb	1	; () banked
  8194  0026E0  232F               	addwfc	(___ftadd@f1+2)& (0+255),f,b
  8195  0026E2                     l881:
  8196                           
  8197                           ; BSR set to: 1
  8198  0026E2  0101               	movlb	1	; () banked
  8199  0026E4  AD36               	btfss	___ftadd@sign& (0+255),6,b
  8200  0026E6  D012               	goto	l7031
  8201                           
  8202                           ; BSR set to: 1
  8203  0026E8  0EFF               	movlw	255
  8204  0026EA  0101               	movlb	1	; () banked
  8205  0026EC  1B30               	xorwf	___ftadd@f2& (0+255),f,b
  8206  0026EE  0EFF               	movlw	255
  8207  0026F0  0101               	movlb	1	; () banked
  8208  0026F2  1B31               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8209  0026F4  0EFF               	movlw	255
  8210  0026F6  0101               	movlb	1	; () banked
  8211  0026F8  1B32               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8212  0026FA  0E01               	movlw	1
  8213  0026FC  0101               	movlb	1	; () banked
  8214  0026FE  2730               	addwf	___ftadd@f2& (0+255),f,b
  8215  002700  0E00               	movlw	0
  8216  002702  0101               	movlb	1	; () banked
  8217  002704  2331               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8218  002706  0E00               	movlw	0
  8219  002708  0101               	movlb	1	; () banked
  8220  00270A  2332               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8221  00270C                     l7031:
  8222                           
  8223                           ; BSR set to: 1
  8224  00270C  0E00               	movlw	0
  8225  00270E  0101               	movlb	1	; () banked
  8226  002710  6F36               	movwf	___ftadd@sign& (0+255),b
  8227                           
  8228                           ; BSR set to: 1
  8229  002712  0101               	movlb	1	; () banked
  8230  002714  512D               	movf	___ftadd@f1& (0+255),w,b
  8231  002716  0101               	movlb	1	; () banked
  8232  002718  2730               	addwf	___ftadd@f2& (0+255),f,b
  8233  00271A  0101               	movlb	1	; () banked
  8234  00271C  512E               	movf	(___ftadd@f1+1)& (0+255),w,b
  8235  00271E  0101               	movlb	1	; () banked
  8236  002720  2331               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8237  002722  0101               	movlb	1	; () banked
  8238  002724  512F               	movf	(___ftadd@f1+2)& (0+255),w,b
  8239  002726  0101               	movlb	1	; () banked
  8240  002728  2332               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8241                           
  8242                           ; BSR set to: 1
  8243  00272A  0101               	movlb	1	; () banked
  8244  00272C  AF32               	btfss	(___ftadd@f2+2)& (0+255),7,b
  8245  00272E  D015               	goto	l7041
  8246                           
  8247                           ; BSR set to: 1
  8248  002730  0EFF               	movlw	255
  8249  002732  0101               	movlb	1	; () banked
  8250  002734  1B30               	xorwf	___ftadd@f2& (0+255),f,b
  8251  002736  0EFF               	movlw	255
  8252  002738  0101               	movlb	1	; () banked
  8253  00273A  1B31               	xorwf	(___ftadd@f2+1)& (0+255),f,b
  8254  00273C  0EFF               	movlw	255
  8255  00273E  0101               	movlb	1	; () banked
  8256  002740  1B32               	xorwf	(___ftadd@f2+2)& (0+255),f,b
  8257  002742  0E01               	movlw	1
  8258  002744  0101               	movlb	1	; () banked
  8259  002746  2730               	addwf	___ftadd@f2& (0+255),f,b
  8260  002748  0E00               	movlw	0
  8261  00274A  0101               	movlb	1	; () banked
  8262  00274C  2331               	addwfc	(___ftadd@f2+1)& (0+255),f,b
  8263  00274E  0E00               	movlw	0
  8264  002750  0101               	movlb	1	; () banked
  8265  002752  2332               	addwfc	(___ftadd@f2+2)& (0+255),f,b
  8266                           
  8267                           ; BSR set to: 1
  8268  002754  0E01               	movlw	1
  8269  002756  0101               	movlb	1	; () banked
  8270  002758  6F36               	movwf	___ftadd@sign& (0+255),b
  8271  00275A                     l7041:
  8272                           
  8273                           ; BSR set to: 1
  8274  00275A  C130  F100         	movff	___ftadd@f2,___ftpack@arg
  8275  00275E  C131  F101         	movff	___ftadd@f2+1,___ftpack@arg+1
  8276  002762  C132  F102         	movff	___ftadd@f2+2,___ftpack@arg+2
  8277  002766  C138  F103         	movff	___ftadd@exp1,___ftpack@exp
  8278  00276A  C136  F104         	movff	___ftadd@sign,___ftpack@sign
  8279  00276E  EC1E  F01C         	call	___ftpack	;wreg free
  8280  002772  C100  F12D         	movff	?___ftpack,?___ftadd
  8281  002776  C101  F12E         	movff	?___ftpack+1,?___ftadd+1
  8282  00277A  C102  F12F         	movff	?___ftpack+2,?___ftadd+2
  8283  00277E  0012               	return	
  8284  002780                     __end_of___ftadd:
  8285                           	opt stack 0
  8286                           tblptru	equ	0xFF8
  8287                           tblptrh	equ	0xFF7
  8288                           tblptrl	equ	0xFF6
  8289                           tablat	equ	0xFF5
  8290                           prodh	equ	0xFF4
  8291                           prodl	equ	0xFF3
  8292                           intcon	equ	0xFF2
  8293                           intcon3	equ	0xFF0
  8294                           postinc0	equ	0xFEE
  8295                           wreg	equ	0xFE8
  8296                           indf2	equ	0xFDF
  8297                           postinc2	equ	0xFDE
  8298                           postdec2	equ	0xFDD
  8299                           fsr2h	equ	0xFDA
  8300                           fsr2l	equ	0xFD9
  8301                           status	equ	0xFD8
  8302                           
  8303 ;; *************** function ___ftpack *****************
  8304 ;; Defined at:
  8305 ;;		line 62 in file "/opt/microchip/xc8/v1.41/sources/common/float.c"
  8306 ;; Parameters:    Size  Location     Type
  8307 ;;  arg             3    0[BANK1 ] unsigned um
  8308 ;;  exp             1    3[BANK1 ] unsigned char 
  8309 ;;  sign            1    4[BANK1 ] unsigned char 
  8310 ;; Auto vars:     Size  Location     Type
  8311 ;;		None
  8312 ;; Return value:  Size  Location     Type
  8313 ;;                  3    0[BANK1 ] float 
  8314 ;; Registers used:
  8315 ;;		wreg, status,2, status,0
  8316 ;; Tracked objects:
  8317 ;;		On entry : 0/0
  8318 ;;		On exit  : 0/0
  8319 ;;		Unchanged: 0/0
  8320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8321 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8323 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8324 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8325 ;;Total ram usage:        8 bytes
  8326 ;; Hardware stack levels used:    1
  8327 ;; Hardware stack levels required when called:    8
  8328 ;; This function calls:
  8329 ;;		Nothing
  8330 ;; This function is called by:
  8331 ;;		___ftadd
  8332 ;;		___ftmul
  8333 ;;		___lltoft
  8334 ;; This function uses a non-reentrant model
  8335 ;;
  8336                           
  8337                           	psect	text18
  8338  00383C                     __ptext18:
  8339                           	opt stack 0
  8340  00383C                     ___ftpack:
  8341                           	opt stack 18
  8342                           
  8343                           ;incstack = 0
  8344  00383C  0101               	movlb	1	; () banked
  8345  00383E  5103               	movf	___ftpack@exp& (0+255),w,b
  8346  003840  0101               	movlb	1	; () banked
  8347  003842  B4D8               	btfsc	status,2,c
  8348  003844  D008               	goto	l6915
  8349                           
  8350                           ; BSR set to: 1
  8351  003846  0101               	movlb	1	; () banked
  8352  003848  5100               	movf	___ftpack@arg& (0+255),w,b
  8353  00384A  0101               	movlb	1	; () banked
  8354  00384C  1101               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  8355  00384E  0101               	movlb	1	; () banked
  8356  003850  1102               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  8357  003852  A4D8               	btfss	status,2,c
  8358  003854  D011               	goto	l6921
  8359  003856                     l6915:
  8360                           
  8361                           ; BSR set to: 1
  8362  003856  0E00               	movlw	0
  8363  003858  0101               	movlb	1	; () banked
  8364  00385A  6F00               	movwf	?___ftpack& (0+255),b
  8365  00385C  0E00               	movlw	0
  8366  00385E  0101               	movlb	1	; () banked
  8367  003860  6F01               	movwf	(?___ftpack+1)& (0+255),b
  8368  003862  0E00               	movlw	0
  8369  003864  0101               	movlb	1	; () banked
  8370  003866  6F02               	movwf	(?___ftpack+2)& (0+255),b
  8371                           
  8372                           ; BSR set to: 1
  8373  003868  0012               	return	
  8374  00386A                     l6919:
  8375                           
  8376                           ; BSR set to: 1
  8377  00386A  0101               	movlb	1	; () banked
  8378  00386C  2B03               	incf	___ftpack@exp& (0+255),f,b
  8379  00386E  0101               	movlb	1	; () banked
  8380  003870  90D8               	bcf	status,0,c
  8381  003872  3302               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  8382  003874  3301               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  8383  003876  3300               	rrcf	___ftpack@arg& (0+255),f,b
  8384  003878                     l6921:
  8385                           
  8386                           ; BSR set to: 1
  8387  003878  0E00               	movlw	0
  8388  00387A  0101               	movlb	1	; () banked
  8389  00387C  1500               	andwf	___ftpack@arg& (0+255),w,b
  8390  00387E  0101               	movlb	1	; () banked
  8391  003880  6F05               	movwf	??___ftpack& (0+255),b
  8392  003882  0E00               	movlw	0
  8393  003884  0101               	movlb	1	; () banked
  8394  003886  1501               	andwf	(___ftpack@arg+1)& (0+255),w,b
  8395  003888  0101               	movlb	1	; () banked
  8396  00388A  6F06               	movwf	(??___ftpack+1)& (0+255),b
  8397  00388C  0EFE               	movlw	254
  8398  00388E  0101               	movlb	1	; () banked
  8399  003890  1502               	andwf	(___ftpack@arg+2)& (0+255),w,b
  8400  003892  0101               	movlb	1	; () banked
  8401  003894  6F07               	movwf	(??___ftpack+2)& (0+255),b
  8402  003896  0101               	movlb	1	; () banked
  8403  003898  5105               	movf	??___ftpack& (0+255),w,b
  8404  00389A  0101               	movlb	1	; () banked
  8405  00389C  1106               	iorwf	(??___ftpack+1)& (0+255),w,b
  8406  00389E  0101               	movlb	1	; () banked
  8407  0038A0  1107               	iorwf	(??___ftpack+2)& (0+255),w,b
  8408  0038A2  B4D8               	btfsc	status,2,c
  8409  0038A4  D011               	goto	l6927
  8410  0038A6  D7E1               	goto	l6919
  8411  0038A8                     l6923:
  8412                           
  8413                           ; BSR set to: 1
  8414  0038A8  0101               	movlb	1	; () banked
  8415  0038AA  2B03               	incf	___ftpack@exp& (0+255),f,b
  8416                           
  8417                           ; BSR set to: 1
  8418  0038AC  0E01               	movlw	1
  8419  0038AE  0101               	movlb	1	; () banked
  8420  0038B0  2700               	addwf	___ftpack@arg& (0+255),f,b
  8421  0038B2  0E00               	movlw	0
  8422  0038B4  0101               	movlb	1	; () banked
  8423  0038B6  2301               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  8424  0038B8  0E00               	movlw	0
  8425  0038BA  0101               	movlb	1	; () banked
  8426  0038BC  2302               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  8427  0038BE  0101               	movlb	1	; () banked
  8428  0038C0  90D8               	bcf	status,0,c
  8429  0038C2  3302               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  8430  0038C4  3301               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  8431  0038C6  3300               	rrcf	___ftpack@arg& (0+255),f,b
  8432  0038C8                     l6927:
  8433                           
  8434                           ; BSR set to: 1
  8435  0038C8  0E00               	movlw	0
  8436  0038CA  0101               	movlb	1	; () banked
  8437  0038CC  1500               	andwf	___ftpack@arg& (0+255),w,b
  8438  0038CE  0101               	movlb	1	; () banked
  8439  0038D0  6F05               	movwf	??___ftpack& (0+255),b
  8440  0038D2  0E00               	movlw	0
  8441  0038D4  0101               	movlb	1	; () banked
  8442  0038D6  1501               	andwf	(___ftpack@arg+1)& (0+255),w,b
  8443  0038D8  0101               	movlb	1	; () banked
  8444  0038DA  6F06               	movwf	(??___ftpack+1)& (0+255),b
  8445  0038DC  0EFF               	movlw	255
  8446  0038DE  0101               	movlb	1	; () banked
  8447  0038E0  1502               	andwf	(___ftpack@arg+2)& (0+255),w,b
  8448  0038E2  0101               	movlb	1	; () banked
  8449  0038E4  6F07               	movwf	(??___ftpack+2)& (0+255),b
  8450  0038E6  0101               	movlb	1	; () banked
  8451  0038E8  5105               	movf	??___ftpack& (0+255),w,b
  8452  0038EA  0101               	movlb	1	; () banked
  8453  0038EC  1106               	iorwf	(??___ftpack+1)& (0+255),w,b
  8454  0038EE  0101               	movlb	1	; () banked
  8455  0038F0  1107               	iorwf	(??___ftpack+2)& (0+255),w,b
  8456  0038F2  B4D8               	btfsc	status,2,c
  8457  0038F4  D008               	goto	l6931
  8458  0038F6  D7D8               	goto	l6923
  8459  0038F8                     l6929:
  8460                           
  8461                           ; BSR set to: 1
  8462  0038F8  0101               	movlb	1	; () banked
  8463  0038FA  0703               	decf	___ftpack@exp& (0+255),f,b
  8464  0038FC  0101               	movlb	1	; () banked
  8465  0038FE  90D8               	bcf	status,0,c
  8466  003900  3700               	rlcf	___ftpack@arg& (0+255),f,b
  8467  003902  3701               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  8468  003904  3702               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  8469  003906                     l6931:
  8470                           
  8471                           ; BSR set to: 1
  8472  003906  0101               	movlb	1	; () banked
  8473  003908  BF01               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  8474  00390A  D004               	goto	l834
  8475                           
  8476                           ; BSR set to: 1
  8477  00390C  0E02               	movlw	2
  8478  00390E  0101               	movlb	1	; () banked
  8479  003910  6103               	cpfslt	___ftpack@exp& (0+255),b
  8480  003912  D7F2               	goto	l6929
  8481  003914                     l834:
  8482                           
  8483                           ; BSR set to: 1
  8484  003914  0101               	movlb	1	; () banked
  8485  003916  B103               	btfsc	___ftpack@exp& (0+255),0,b
  8486  003918  D002               	goto	l6937
  8487                           
  8488                           ; BSR set to: 1
  8489  00391A  0101               	movlb	1	; () banked
  8490  00391C  9F01               	bcf	(___ftpack@arg+1)& (0+255),7,b
  8491  00391E                     l6937:
  8492                           
  8493                           ; BSR set to: 1
  8494  00391E  0101               	movlb	1	; () banked
  8495  003920  90D8               	bcf	status,0,c
  8496  003922  3303               	rrcf	___ftpack@exp& (0+255),f,b
  8497  003924  0101               	movlb	1	; () banked
  8498  003926  5103               	movf	___ftpack@exp& (0+255),w,b
  8499  003928  0101               	movlb	1	; () banked
  8500  00392A  1302               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  8501                           
  8502                           ; BSR set to: 1
  8503  00392C  0101               	movlb	1	; () banked
  8504  00392E  5104               	movf	___ftpack@sign& (0+255),w,b
  8505  003930  0101               	movlb	1	; () banked
  8506  003932  B4D8               	btfsc	status,2,c
  8507  003934  D002               	goto	l6943
  8508                           
  8509                           ; BSR set to: 1
  8510  003936  0101               	movlb	1	; () banked
  8511  003938  8F02               	bsf	(___ftpack@arg+2)& (0+255),7,b
  8512  00393A                     l6943:
  8513                           
  8514                           ; BSR set to: 1
  8515  00393A  C100  F100         	movff	___ftpack@arg,?___ftpack
  8516  00393E  C101  F101         	movff	___ftpack@arg+1,?___ftpack+1
  8517  003942  C102  F102         	movff	___ftpack@arg+2,?___ftpack+2
  8518  003946  0012               	return	
  8519  003948                     __end_of___ftpack:
  8520                           	opt stack 0
  8521                           tblptru	equ	0xFF8
  8522                           tblptrh	equ	0xFF7
  8523                           tblptrl	equ	0xFF6
  8524                           tablat	equ	0xFF5
  8525                           prodh	equ	0xFF4
  8526                           prodl	equ	0xFF3
  8527                           intcon	equ	0xFF2
  8528                           intcon3	equ	0xFF0
  8529                           postinc0	equ	0xFEE
  8530                           wreg	equ	0xFE8
  8531                           indf2	equ	0xFDF
  8532                           postinc2	equ	0xFDE
  8533                           postdec2	equ	0xFDD
  8534                           fsr2h	equ	0xFDA
  8535                           fsr2l	equ	0xFD9
  8536                           status	equ	0xFD8
  8537                           
  8538 ;; *************** function ___ftneg *****************
  8539 ;; Defined at:
  8540 ;;		line 15 in file "/opt/microchip/xc8/v1.41/sources/common/ftneg.c"
  8541 ;; Parameters:    Size  Location     Type
  8542 ;;  f1              3    0[BANK1 ] float 
  8543 ;; Auto vars:     Size  Location     Type
  8544 ;;		None
  8545 ;; Return value:  Size  Location     Type
  8546 ;;                  3    0[BANK1 ] float 
  8547 ;; Registers used:
  8548 ;;		wreg, status,2, status,0
  8549 ;; Tracked objects:
  8550 ;;		On entry : 0/0
  8551 ;;		On exit  : 0/0
  8552 ;;		Unchanged: 0/0
  8553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8554 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8557 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8558 ;;Total ram usage:        3 bytes
  8559 ;; Hardware stack levels used:    1
  8560 ;; Hardware stack levels required when called:    8
  8561 ;; This function calls:
  8562 ;;		Nothing
  8563 ;; This function is called by:
  8564 ;;		_printf
  8565 ;; This function uses a non-reentrant model
  8566 ;;
  8567                           
  8568                           	psect	text19
  8569  004E6A                     __ptext19:
  8570                           	opt stack 0
  8571  004E6A                     ___ftneg:
  8572                           	opt stack 20
  8573                           
  8574                           ; BSR set to: 1
  8575                           ;incstack = 0
  8576  004E6A  0101               	movlb	1	; () banked
  8577  004E6C  5100               	movf	___ftneg@f1& (0+255),w,b
  8578  004E6E  0101               	movlb	1	; () banked
  8579  004E70  1101               	iorwf	(___ftneg@f1+1)& (0+255),w,b
  8580  004E72  0101               	movlb	1	; () banked
  8581  004E74  1102               	iorwf	(___ftneg@f1+2)& (0+255),w,b
  8582  004E76  B4D8               	btfsc	status,2,c
  8583  004E78  D009               	goto	l931
  8584                           
  8585                           ; BSR set to: 1
  8586  004E7A  0E00               	movlw	0
  8587  004E7C  0101               	movlb	1	; () banked
  8588  004E7E  1B00               	xorwf	___ftneg@f1& (0+255),f,b
  8589  004E80  0E00               	movlw	0
  8590  004E82  0101               	movlb	1	; () banked
  8591  004E84  1B01               	xorwf	(___ftneg@f1+1)& (0+255),f,b
  8592  004E86  0E80               	movlw	128
  8593  004E88  0101               	movlb	1	; () banked
  8594  004E8A  1B02               	xorwf	(___ftneg@f1+2)& (0+255),f,b
  8595  004E8C                     l931:
  8596                           
  8597                           ; BSR set to: 1
  8598  004E8C  C100  F100         	movff	___ftneg@f1,?___ftneg
  8599  004E90  C101  F101         	movff	___ftneg@f1+1,?___ftneg+1
  8600  004E94  C102  F102         	movff	___ftneg@f1+2,?___ftneg+2
  8601                           
  8602                           ; BSR set to: 1
  8603  004E98  0012               	return		;funcret
  8604  004E9A                     __end_of___ftneg:
  8605                           	opt stack 0
  8606                           tblptru	equ	0xFF8
  8607                           tblptrh	equ	0xFF7
  8608                           tblptrl	equ	0xFF6
  8609                           tablat	equ	0xFF5
  8610                           prodh	equ	0xFF4
  8611                           prodl	equ	0xFF3
  8612                           intcon	equ	0xFF2
  8613                           intcon3	equ	0xFF0
  8614                           postinc0	equ	0xFEE
  8615                           wreg	equ	0xFE8
  8616                           indf2	equ	0xFDF
  8617                           postinc2	equ	0xFDE
  8618                           postdec2	equ	0xFDD
  8619                           fsr2h	equ	0xFDA
  8620                           fsr2l	equ	0xFD9
  8621                           status	equ	0xFD8
  8622                           
  8623 ;; *************** function ___ftge *****************
  8624 ;; Defined at:
  8625 ;;		line 4 in file "/opt/microchip/xc8/v1.41/sources/common/ftge.c"
  8626 ;; Parameters:    Size  Location     Type
  8627 ;;  ff1             3    0[BANK1 ] float 
  8628 ;;  ff2             3    3[BANK1 ] float 
  8629 ;; Auto vars:     Size  Location     Type
  8630 ;;		None
  8631 ;; Return value:  Size  Location     Type
  8632 ;;		None               void
  8633 ;; Registers used:
  8634 ;;		wreg, status,2, status,0
  8635 ;; Tracked objects:
  8636 ;;		On entry : 0/0
  8637 ;;		On exit  : 0/0
  8638 ;;		Unchanged: 0/0
  8639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8640 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8642 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8643 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8644 ;;Total ram usage:        9 bytes
  8645 ;; Hardware stack levels used:    1
  8646 ;; Hardware stack levels required when called:    8
  8647 ;; This function calls:
  8648 ;;		Nothing
  8649 ;; This function is called by:
  8650 ;;		_printf
  8651 ;; This function uses a non-reentrant model
  8652 ;;
  8653                           
  8654                           	psect	text20
  8655  00408E                     __ptext20:
  8656                           	opt stack 0
  8657  00408E                     ___ftge:
  8658                           	opt stack 20
  8659                           
  8660                           ; BSR set to: 1
  8661                           ;incstack = 0
  8662  00408E  0101               	movlb	1	; () banked
  8663  004090  AF02               	btfss	(___ftge@ff1+2)& (0+255),7,b
  8664  004092  D01D               	goto	l7421
  8665                           
  8666                           ; BSR set to: 1
  8667  004094  C100  F106         	movff	___ftge@ff1,??___ftge
  8668  004098  C101  F107         	movff	___ftge@ff1+1,??___ftge+1
  8669  00409C  C102  F108         	movff	___ftge@ff1+2,??___ftge+2
  8670  0040A0  0101               	movlb	1	; () banked
  8671  0040A2  1F06               	comf	??___ftge& (0+255),f,b
  8672  0040A4  1F07               	comf	(??___ftge+1)& (0+255),f,b
  8673  0040A6  1F08               	comf	(??___ftge+2)& (0+255),f,b
  8674  0040A8  2B06               	incf	??___ftge& (0+255),f,b
  8675  0040AA  0E00               	movlw	0
  8676  0040AC  2307               	addwfc	(??___ftge+1)& (0+255),f,b
  8677  0040AE  2308               	addwfc	(??___ftge+2)& (0+255),f,b
  8678  0040B0  0E00               	movlw	0
  8679  0040B2  0101               	movlb	1	; () banked
  8680  0040B4  2506               	addwf	??___ftge& (0+255),w,b
  8681  0040B6  0101               	movlb	1	; () banked
  8682  0040B8  6F00               	movwf	___ftge@ff1& (0+255),b
  8683  0040BA  0E00               	movlw	0
  8684  0040BC  0101               	movlb	1	; () banked
  8685  0040BE  2107               	addwfc	(??___ftge+1)& (0+255),w,b
  8686  0040C0  0101               	movlb	1	; () banked
  8687  0040C2  6F01               	movwf	(___ftge@ff1+1)& (0+255),b
  8688  0040C4  0E80               	movlw	128
  8689  0040C6  0101               	movlb	1	; () banked
  8690  0040C8  2108               	addwfc	(??___ftge+2)& (0+255),w,b
  8691  0040CA  0101               	movlb	1	; () banked
  8692  0040CC  6F02               	movwf	(___ftge@ff1+2)& (0+255),b
  8693  0040CE                     l7421:
  8694                           
  8695                           ; BSR set to: 1
  8696  0040CE  0101               	movlb	1	; () banked
  8697  0040D0  AF05               	btfss	(___ftge@ff2+2)& (0+255),7,b
  8698  0040D2  D01D               	goto	l7425
  8699                           
  8700                           ; BSR set to: 1
  8701  0040D4  C103  F106         	movff	___ftge@ff2,??___ftge
  8702  0040D8  C104  F107         	movff	___ftge@ff2+1,??___ftge+1
  8703  0040DC  C105  F108         	movff	___ftge@ff2+2,??___ftge+2
  8704  0040E0  0101               	movlb	1	; () banked
  8705  0040E2  1F06               	comf	??___ftge& (0+255),f,b
  8706  0040E4  1F07               	comf	(??___ftge+1)& (0+255),f,b
  8707  0040E6  1F08               	comf	(??___ftge+2)& (0+255),f,b
  8708  0040E8  2B06               	incf	??___ftge& (0+255),f,b
  8709  0040EA  0E00               	movlw	0
  8710  0040EC  2307               	addwfc	(??___ftge+1)& (0+255),f,b
  8711  0040EE  2308               	addwfc	(??___ftge+2)& (0+255),f,b
  8712  0040F0  0E00               	movlw	0
  8713  0040F2  0101               	movlb	1	; () banked
  8714  0040F4  2506               	addwf	??___ftge& (0+255),w,b
  8715  0040F6  0101               	movlb	1	; () banked
  8716  0040F8  6F03               	movwf	___ftge@ff2& (0+255),b
  8717  0040FA  0E00               	movlw	0
  8718  0040FC  0101               	movlb	1	; () banked
  8719  0040FE  2107               	addwfc	(??___ftge+1)& (0+255),w,b
  8720  004100  0101               	movlb	1	; () banked
  8721  004102  6F04               	movwf	(___ftge@ff2+1)& (0+255),b
  8722  004104  0E80               	movlw	128
  8723  004106  0101               	movlb	1	; () banked
  8724  004108  2108               	addwfc	(??___ftge+2)& (0+255),w,b
  8725  00410A  0101               	movlb	1	; () banked
  8726  00410C  6F05               	movwf	(___ftge@ff2+2)& (0+255),b
  8727  00410E                     l7425:
  8728                           
  8729                           ; BSR set to: 1
  8730  00410E  0E00               	movlw	0
  8731  004110  0101               	movlb	1	; () banked
  8732  004112  1B00               	xorwf	___ftge@ff1& (0+255),f,b
  8733  004114  0E00               	movlw	0
  8734  004116  0101               	movlb	1	; () banked
  8735  004118  1B01               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  8736  00411A  0E80               	movlw	128
  8737  00411C  0101               	movlb	1	; () banked
  8738  00411E  1B02               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  8739                           
  8740                           ; BSR set to: 1
  8741  004120  0E00               	movlw	0
  8742  004122  0101               	movlb	1	; () banked
  8743  004124  1B03               	xorwf	___ftge@ff2& (0+255),f,b
  8744  004126  0E00               	movlw	0
  8745  004128  0101               	movlb	1	; () banked
  8746  00412A  1B04               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  8747  00412C  0E80               	movlw	128
  8748  00412E  0101               	movlb	1	; () banked
  8749  004130  1B05               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  8750  004132  0101               	movlb	1	; () banked
  8751  004134  5103               	movf	___ftge@ff2& (0+255),w,b
  8752  004136  0101               	movlb	1	; () banked
  8753  004138  5D00               	subwf	___ftge@ff1& (0+255),w,b
  8754  00413A  0101               	movlb	1	; () banked
  8755  00413C  5104               	movf	(___ftge@ff2+1)& (0+255),w,b
  8756  00413E  0101               	movlb	1	; () banked
  8757  004140  5901               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  8758  004142  0101               	movlb	1	; () banked
  8759  004144  5105               	movf	(___ftge@ff2+2)& (0+255),w,b
  8760  004146  0101               	movlb	1	; () banked
  8761  004148  5902               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  8762  00414A  B0D8               	btfsc	status,0,c
  8763  00414C  D002               	goto	l7431
  8764                           
  8765                           ; BSR set to: 1
  8766  00414E  90D8               	bcf	status,0,c
  8767  004150  0012               	return	
  8768  004152                     l7431:
  8769                           
  8770                           ; BSR set to: 1
  8771  004152  80D8               	bsf	status,0,c
  8772                           
  8773                           ; BSR set to: 1
  8774  004154  0012               	return	
  8775  004156                     __end_of___ftge:
  8776                           	opt stack 0
  8777                           tblptru	equ	0xFF8
  8778                           tblptrh	equ	0xFF7
  8779                           tblptrl	equ	0xFF6
  8780                           tablat	equ	0xFF5
  8781                           prodh	equ	0xFF4
  8782                           prodl	equ	0xFF3
  8783                           intcon	equ	0xFF2
  8784                           intcon3	equ	0xFF0
  8785                           postinc0	equ	0xFEE
  8786                           wreg	equ	0xFE8
  8787                           indf2	equ	0xFDF
  8788                           postinc2	equ	0xFDE
  8789                           postdec2	equ	0xFDD
  8790                           fsr2h	equ	0xFDA
  8791                           fsr2l	equ	0xFD9
  8792                           status	equ	0xFD8
  8793                           
  8794 ;; *************** function _line1 *****************
  8795 ;; Defined at:
  8796 ;;		line 58 in file "lcd.c"
  8797 ;; Parameters:    Size  Location     Type
  8798 ;;		None
  8799 ;; Auto vars:     Size  Location     Type
  8800 ;;		None
  8801 ;; Return value:  Size  Location     Type
  8802 ;;                  1    wreg      void 
  8803 ;; Registers used:
  8804 ;;		wreg, status,2, status,0, cstack
  8805 ;; Tracked objects:
  8806 ;;		On entry : 0/0
  8807 ;;		On exit  : 0/0
  8808 ;;		Unchanged: 0/0
  8809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8813 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8814 ;;Total ram usage:        0 bytes
  8815 ;; Hardware stack levels used:    1
  8816 ;; Hardware stack levels required when called:   10
  8817 ;; This function calls:
  8818 ;;		_lcdInst
  8819 ;; This function is called by:
  8820 ;;		_showRTC
  8821 ;; This function uses a non-reentrant model
  8822 ;;
  8823                           
  8824                           	psect	text21
  8825  005142                     __ptext21:
  8826                           	opt stack 0
  8827  005142                     _line1:
  8828                           	opt stack 19
  8829                           
  8830                           ;lcd.c: 59: lcdInst(0b11000000);
  8831                           
  8832                           ; BSR set to: 1
  8833                           ;incstack = 0
  8834  005142  0EC0               	movlw	192
  8835  005144  EC83  F028         	call	_lcdInst
  8836  005148  0012               	return		;funcret
  8837  00514A                     __end_of_line1:
  8838                           	opt stack 0
  8839                           tblptru	equ	0xFF8
  8840                           tblptrh	equ	0xFF7
  8841                           tblptrl	equ	0xFF6
  8842                           tablat	equ	0xFF5
  8843                           prodh	equ	0xFF4
  8844                           prodl	equ	0xFF3
  8845                           intcon	equ	0xFF2
  8846                           intcon3	equ	0xFF0
  8847                           postinc0	equ	0xFEE
  8848                           wreg	equ	0xFE8
  8849                           indf2	equ	0xFDF
  8850                           postinc2	equ	0xFDE
  8851                           postdec2	equ	0xFDD
  8852                           fsr2h	equ	0xFDA
  8853                           fsr2l	equ	0xFD9
  8854                           status	equ	0xFD8
  8855                           
  8856 ;; *************** function _line0 *****************
  8857 ;; Defined at:
  8858 ;;		line 54 in file "lcd.c"
  8859 ;; Parameters:    Size  Location     Type
  8860 ;;		None
  8861 ;; Auto vars:     Size  Location     Type
  8862 ;;		None
  8863 ;; Return value:  Size  Location     Type
  8864 ;;                  1    wreg      void 
  8865 ;; Registers used:
  8866 ;;		wreg, status,2, status,0, cstack
  8867 ;; Tracked objects:
  8868 ;;		On entry : 0/0
  8869 ;;		On exit  : 0/0
  8870 ;;		Unchanged: 0/0
  8871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8875 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8876 ;;Total ram usage:        0 bytes
  8877 ;; Hardware stack levels used:    1
  8878 ;; Hardware stack levels required when called:   10
  8879 ;; This function calls:
  8880 ;;		_lcdInst
  8881 ;; This function is called by:
  8882 ;;		_showRTC
  8883 ;;		_main
  8884 ;;		_mainloop
  8885 ;; This function uses a non-reentrant model
  8886 ;;
  8887                           
  8888                           	psect	text22
  8889  00514A                     __ptext22:
  8890                           	opt stack 0
  8891  00514A                     _line0:
  8892                           	opt stack 19
  8893                           
  8894                           ;lcd.c: 55: lcdInst(0b10000000);
  8895                           
  8896                           ;incstack = 0
  8897  00514A  0E80               	movlw	128
  8898  00514C  EC83  F028         	call	_lcdInst
  8899  005150  0012               	return		;funcret
  8900  005152                     __end_of_line0:
  8901                           	opt stack 0
  8902                           tblptru	equ	0xFF8
  8903                           tblptrh	equ	0xFF7
  8904                           tblptrl	equ	0xFF6
  8905                           tablat	equ	0xFF5
  8906                           prodh	equ	0xFF4
  8907                           prodl	equ	0xFF3
  8908                           intcon	equ	0xFF2
  8909                           intcon3	equ	0xFF0
  8910                           postinc0	equ	0xFEE
  8911                           wreg	equ	0xFE8
  8912                           indf2	equ	0xFDF
  8913                           postinc2	equ	0xFDE
  8914                           postdec2	equ	0xFDD
  8915                           fsr2h	equ	0xFDA
  8916                           fsr2l	equ	0xFD9
  8917                           status	equ	0xFD8
  8918                           
  8919 ;; *************** function _getTime *****************
  8920 ;; Defined at:
  8921 ;;		line 77 in file "modules.c"
  8922 ;; Parameters:    Size  Location     Type
  8923 ;;  time            2    3[BANK1 ] PTR unsigned char 
  8924 ;;		 -> time(7), 
  8925 ;; Auto vars:     Size  Location     Type
  8926 ;;  i               1    5[BANK1 ] unsigned char 
  8927 ;; Return value:  Size  Location     Type
  8928 ;;                  1    wreg      void 
  8929 ;; Registers used:
  8930 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8931 ;; Tracked objects:
  8932 ;;		On entry : 0/0
  8933 ;;		On exit  : 0/0
  8934 ;;		Unchanged: 0/0
  8935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8936 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8937 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8939 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8940 ;;Total ram usage:        3 bytes
  8941 ;; Hardware stack levels used:    1
  8942 ;; Hardware stack levels required when called:   10
  8943 ;; This function calls:
  8944 ;;		_I2C_Master_Read
  8945 ;;		_I2C_Master_Start
  8946 ;;		_I2C_Master_Stop
  8947 ;;		_I2C_Master_Write
  8948 ;; This function is called by:
  8949 ;;		_showRTC
  8950 ;; This function uses a non-reentrant model
  8951 ;;
  8952                           
  8953                           	psect	text23
  8954  004610                     __ptext23:
  8955                           	opt stack 0
  8956  004610                     _getTime:
  8957                           	opt stack 19
  8958                           
  8959                           ;modules.c: 78: (INTCONbits.GIE = 0);
  8960                           
  8961                           ;incstack = 0
  8962  004610  9EF2               	bcf	intcon,7,c	;volatile
  8963                           
  8964                           ;modules.c: 82: I2C_Master_Start();
  8965  004612  ECAD  F028         	call	_I2C_Master_Start	;wreg free
  8966                           
  8967                           ;modules.c: 83: I2C_Master_Write(0b11010000);
  8968  004616  0E00               	movlw	0
  8969  004618  0101               	movlb	1	; () banked
  8970  00461A  6F02               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8971  00461C  0ED0               	movlw	208
  8972  00461E  6F01               	movwf	I2C_Master_Write@d& (0+255),b
  8973  004620  EC97  F028         	call	_I2C_Master_Write	;wreg free
  8974                           
  8975                           ;modules.c: 84: I2C_Master_Write(0x00);
  8976  004624  0E00               	movlw	0
  8977  004626  0101               	movlb	1	; () banked
  8978  004628  6F02               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8979  00462A  0E00               	movlw	0
  8980  00462C  6F01               	movwf	I2C_Master_Write@d& (0+255),b
  8981  00462E  EC97  F028         	call	_I2C_Master_Write	;wreg free
  8982                           
  8983                           ;modules.c: 85: I2C_Master_Stop();
  8984  004632  ECA9  F028         	call	_I2C_Master_Stop	;wreg free
  8985                           
  8986                           ;modules.c: 88: I2C_Master_Start();
  8987  004636  ECAD  F028         	call	_I2C_Master_Start	;wreg free
  8988                           
  8989                           ;modules.c: 89: I2C_Master_Write(0b11010001);
  8990  00463A  0E00               	movlw	0
  8991  00463C  0101               	movlb	1	; () banked
  8992  00463E  6F02               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8993  004640  0ED1               	movlw	209
  8994  004642  6F01               	movwf	I2C_Master_Write@d& (0+255),b
  8995  004644  EC97  F028         	call	_I2C_Master_Write	;wreg free
  8996                           
  8997                           ;modules.c: 90: for (unsigned char i = 0; i < 0x06; i++) {
  8998  004648  0E00               	movlw	0
  8999  00464A  0101               	movlb	1	; () banked
  9000  00464C  6F05               	movwf	getTime@i& (0+255),b
  9001  00464E                     l7827:
  9002                           
  9003                           ; BSR set to: 1
  9004  00464E  0E05               	movlw	5
  9005  004650  0101               	movlb	1	; () banked
  9006  004652  6505               	cpfsgt	getTime@i& (0+255),b
  9007  004654  D001               	goto	l7831
  9008  004656  D012               	goto	l7837
  9009  004658                     l7831:
  9010                           
  9011                           ; BSR set to: 1
  9012                           ;modules.c: 91: time[i] = I2C_Master_Read(1);
  9013  004658  0101               	movlb	1	; () banked
  9014  00465A  5105               	movf	getTime@i& (0+255),w,b
  9015  00465C  0D01               	mullw	1
  9016  00465E  50F3               	movf	prodl,w,c
  9017  004660  0101               	movlb	1	; () banked
  9018  004662  2503               	addwf	getTime@time& (0+255),w,b
  9019  004664  6ED9               	movwf	fsr2l,c
  9020  004666  50F4               	movf	prodh,w,c
  9021  004668  0101               	movlb	1	; () banked
  9022  00466A  2104               	addwfc	(getTime@time+1)& (0+255),w,b
  9023  00466C  6EDA               	movwf	fsr2h,c
  9024  00466E  0E01               	movlw	1
  9025  004670  EC4D  F027         	call	_I2C_Master_Read
  9026  004674  6EDF               	movwf	indf2,c
  9027  004676  0101               	movlb	1	; () banked
  9028  004678  2B05               	incf	getTime@i& (0+255),f,b
  9029  00467A  D7E9               	goto	l7827
  9030  00467C                     l7837:
  9031                           
  9032                           ; BSR set to: 1
  9033                           ;modules.c: 92: }
  9034                           ;modules.c: 93: time[6] = I2C_Master_Read(0);
  9035  00467C  0101               	movlb	1	; () banked
  9036  00467E  EE20 F006          	lfsr	2,6
  9037  004682  5103               	movf	getTime@time& (0+255),w,b
  9038  004684  26D9               	addwf	fsr2l,f,c
  9039  004686  5104               	movf	(getTime@time+1)& (0+255),w,b
  9040  004688  22DA               	addwfc	fsr2h,f,c
  9041  00468A  0E00               	movlw	0
  9042  00468C  EC4D  F027         	call	_I2C_Master_Read
  9043  004690  6EDF               	movwf	indf2,c
  9044                           
  9045                           ;modules.c: 94: I2C_Master_Stop();
  9046  004692  ECA9  F028         	call	_I2C_Master_Stop	;wreg free
  9047                           
  9048                           ;modules.c: 95: (INTCONbits.GIE = 1);
  9049  004696  8EF2               	bsf	intcon,7,c	;volatile
  9050  004698  0012               	return		;funcret
  9051  00469A                     __end_of_getTime:
  9052                           	opt stack 0
  9053                           tblptru	equ	0xFF8
  9054                           tblptrh	equ	0xFF7
  9055                           tblptrl	equ	0xFF6
  9056                           tablat	equ	0xFF5
  9057                           prodh	equ	0xFF4
  9058                           prodl	equ	0xFF3
  9059                           intcon	equ	0xFF2
  9060                           intcon3	equ	0xFF0
  9061                           postinc0	equ	0xFEE
  9062                           wreg	equ	0xFE8
  9063                           indf2	equ	0xFDF
  9064                           postinc2	equ	0xFDE
  9065                           postdec2	equ	0xFDD
  9066                           fsr2h	equ	0xFDA
  9067                           fsr2l	equ	0xFD9
  9068                           status	equ	0xFD8
  9069                           
  9070 ;; *************** function _I2C_Master_Write *****************
  9071 ;; Defined at:
  9072 ;;		line 42 in file "I2C.c"
  9073 ;; Parameters:    Size  Location     Type
  9074 ;;  d               2    1[BANK1 ] unsigned int 
  9075 ;; Auto vars:     Size  Location     Type
  9076 ;;		None
  9077 ;; Return value:  Size  Location     Type
  9078 ;;                  1    wreg      void 
  9079 ;; Registers used:
  9080 ;;		wreg, status,2, status,0, cstack
  9081 ;; Tracked objects:
  9082 ;;		On entry : 0/0
  9083 ;;		On exit  : 0/0
  9084 ;;		Unchanged: 0/0
  9085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9086 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9089 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9090 ;;Total ram usage:        2 bytes
  9091 ;; Hardware stack levels used:    1
  9092 ;; Hardware stack levels required when called:    9
  9093 ;; This function calls:
  9094 ;;		_I2C_Master_Wait
  9095 ;; This function is called by:
  9096 ;;		_getTime
  9097 ;; This function uses a non-reentrant model
  9098 ;;
  9099                           
  9100                           	psect	text24
  9101  00512E                     __ptext24:
  9102                           	opt stack 0
  9103  00512E                     _I2C_Master_Write:
  9104                           	opt stack 19
  9105                           
  9106                           ;I2C.c: 43: I2C_Master_Wait();
  9107                           
  9108                           ;incstack = 0
  9109  00512E  EC68  F028         	call	_I2C_Master_Wait	;wreg free
  9110                           
  9111                           ;I2C.c: 44: SSPBUF = d;
  9112  005132  C101  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  9113  005136  0012               	return		;funcret
  9114  005138                     __end_of_I2C_Master_Write:
  9115                           	opt stack 0
  9116                           tblptru	equ	0xFF8
  9117                           tblptrh	equ	0xFF7
  9118                           tblptrl	equ	0xFF6
  9119                           tablat	equ	0xFF5
  9120                           prodh	equ	0xFF4
  9121                           prodl	equ	0xFF3
  9122                           intcon	equ	0xFF2
  9123                           intcon3	equ	0xFF0
  9124                           postinc0	equ	0xFEE
  9125                           wreg	equ	0xFE8
  9126                           indf2	equ	0xFDF
  9127                           postinc2	equ	0xFDE
  9128                           postdec2	equ	0xFDD
  9129                           fsr2h	equ	0xFDA
  9130                           fsr2l	equ	0xFD9
  9131                           status	equ	0xFD8
  9132                           
  9133 ;; *************** function _I2C_Master_Stop *****************
  9134 ;; Defined at:
  9135 ;;		line 37 in file "I2C.c"
  9136 ;; Parameters:    Size  Location     Type
  9137 ;;		None
  9138 ;; Auto vars:     Size  Location     Type
  9139 ;;		None
  9140 ;; Return value:  Size  Location     Type
  9141 ;;                  1    wreg      void 
  9142 ;; Registers used:
  9143 ;;		wreg, status,2, status,0, cstack
  9144 ;; Tracked objects:
  9145 ;;		On entry : 0/0
  9146 ;;		On exit  : 0/0
  9147 ;;		Unchanged: 0/0
  9148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9153 ;;Total ram usage:        0 bytes
  9154 ;; Hardware stack levels used:    1
  9155 ;; Hardware stack levels required when called:    9
  9156 ;; This function calls:
  9157 ;;		_I2C_Master_Wait
  9158 ;; This function is called by:
  9159 ;;		_getTime
  9160 ;; This function uses a non-reentrant model
  9161 ;;
  9162                           
  9163                           	psect	text25
  9164  005152                     __ptext25:
  9165                           	opt stack 0
  9166  005152                     _I2C_Master_Stop:
  9167                           	opt stack 19
  9168                           
  9169                           ;I2C.c: 38: I2C_Master_Wait();
  9170                           
  9171                           ;incstack = 0
  9172  005152  EC68  F028         	call	_I2C_Master_Wait	;wreg free
  9173                           
  9174                           ;I2C.c: 39: PEN = 1;
  9175  005156  84C5               	bsf	4037,2,c	;volatile
  9176  005158  0012               	return		;funcret
  9177  00515A                     __end_of_I2C_Master_Stop:
  9178                           	opt stack 0
  9179                           tblptru	equ	0xFF8
  9180                           tblptrh	equ	0xFF7
  9181                           tblptrl	equ	0xFF6
  9182                           tablat	equ	0xFF5
  9183                           prodh	equ	0xFF4
  9184                           prodl	equ	0xFF3
  9185                           intcon	equ	0xFF2
  9186                           intcon3	equ	0xFF0
  9187                           postinc0	equ	0xFEE
  9188                           wreg	equ	0xFE8
  9189                           indf2	equ	0xFDF
  9190                           postinc2	equ	0xFDE
  9191                           postdec2	equ	0xFDD
  9192                           fsr2h	equ	0xFDA
  9193                           fsr2l	equ	0xFD9
  9194                           status	equ	0xFD8
  9195                           
  9196 ;; *************** function _I2C_Master_Start *****************
  9197 ;; Defined at:
  9198 ;;		line 27 in file "I2C.c"
  9199 ;; Parameters:    Size  Location     Type
  9200 ;;		None
  9201 ;; Auto vars:     Size  Location     Type
  9202 ;;		None
  9203 ;; Return value:  Size  Location     Type
  9204 ;;                  1    wreg      void 
  9205 ;; Registers used:
  9206 ;;		wreg, status,2, status,0, cstack
  9207 ;; Tracked objects:
  9208 ;;		On entry : 0/0
  9209 ;;		On exit  : 0/0
  9210 ;;		Unchanged: 0/0
  9211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9215 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9216 ;;Total ram usage:        0 bytes
  9217 ;; Hardware stack levels used:    1
  9218 ;; Hardware stack levels required when called:    9
  9219 ;; This function calls:
  9220 ;;		_I2C_Master_Wait
  9221 ;; This function is called by:
  9222 ;;		_getTime
  9223 ;; This function uses a non-reentrant model
  9224 ;;
  9225                           
  9226                           	psect	text26
  9227  00515A                     __ptext26:
  9228                           	opt stack 0
  9229  00515A                     _I2C_Master_Start:
  9230                           	opt stack 19
  9231                           
  9232                           ;I2C.c: 28: I2C_Master_Wait();
  9233                           
  9234                           ;incstack = 0
  9235  00515A  EC68  F028         	call	_I2C_Master_Wait	;wreg free
  9236                           
  9237                           ;I2C.c: 29: SEN = 1;
  9238  00515E  80C5               	bsf	4037,0,c	;volatile
  9239  005160  0012               	return		;funcret
  9240  005162                     __end_of_I2C_Master_Start:
  9241                           	opt stack 0
  9242                           tblptru	equ	0xFF8
  9243                           tblptrh	equ	0xFF7
  9244                           tblptrl	equ	0xFF6
  9245                           tablat	equ	0xFF5
  9246                           prodh	equ	0xFF4
  9247                           prodl	equ	0xFF3
  9248                           intcon	equ	0xFF2
  9249                           intcon3	equ	0xFF0
  9250                           postinc0	equ	0xFEE
  9251                           wreg	equ	0xFE8
  9252                           indf2	equ	0xFDF
  9253                           postinc2	equ	0xFDE
  9254                           postdec2	equ	0xFDD
  9255                           fsr2h	equ	0xFDA
  9256                           fsr2l	equ	0xFD9
  9257                           status	equ	0xFD8
  9258                           
  9259 ;; *************** function _I2C_Master_Read *****************
  9260 ;; Defined at:
  9261 ;;		line 47 in file "I2C.c"
  9262 ;; Parameters:    Size  Location     Type
  9263 ;;  a               1    wreg     unsigned char 
  9264 ;; Auto vars:     Size  Location     Type
  9265 ;;  a               1    1[BANK1 ] unsigned char 
  9266 ;;  temp            1    2[BANK1 ] unsigned char 
  9267 ;; Return value:  Size  Location     Type
  9268 ;;                  1    wreg      unsigned char 
  9269 ;; Registers used:
  9270 ;;		wreg, status,2, status,0, cstack
  9271 ;; Tracked objects:
  9272 ;;		On entry : 0/0
  9273 ;;		On exit  : 0/0
  9274 ;;		Unchanged: 0/0
  9275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9277 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9279 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9280 ;;Total ram usage:        2 bytes
  9281 ;; Hardware stack levels used:    1
  9282 ;; Hardware stack levels required when called:    9
  9283 ;; This function calls:
  9284 ;;		_I2C_Master_Wait
  9285 ;; This function is called by:
  9286 ;;		_getTime
  9287 ;; This function uses a non-reentrant model
  9288 ;;
  9289                           
  9290                           	psect	text27
  9291  004E9A                     __ptext27:
  9292                           	opt stack 0
  9293  004E9A                     _I2C_Master_Read:
  9294                           	opt stack 19
  9295                           
  9296                           ;incstack = 0
  9297                           ;I2C_Master_Read@a stored from wreg
  9298  004E9A  0101               	movlb	1	; () banked
  9299  004E9C  6F01               	movwf	I2C_Master_Read@a& (0+255),b
  9300                           
  9301                           ;I2C.c: 48: unsigned char temp;
  9302                           ;I2C.c: 49: I2C_Master_Wait();
  9303  004E9E  EC68  F028         	call	_I2C_Master_Wait	;wreg free
  9304                           
  9305                           ;I2C.c: 50: RCEN = 1;
  9306  004EA2  86C5               	bsf	4037,3,c	;volatile
  9307                           
  9308                           ;I2C.c: 51: I2C_Master_Wait();
  9309  004EA4  EC68  F028         	call	_I2C_Master_Wait	;wreg free
  9310                           
  9311                           ;I2C.c: 52: temp = SSPBUF;
  9312  004EA8  CFC9 F102          	movff	4041,I2C_Master_Read@temp	;volatile
  9313                           
  9314                           ;I2C.c: 53: I2C_Master_Wait();
  9315  004EAC  EC68  F028         	call	_I2C_Master_Wait	;wreg free
  9316                           
  9317                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
  9318  004EB0  0101               	movlb	1	; () banked
  9319  004EB2  5101               	movf	I2C_Master_Read@a& (0+255),w,b
  9320  004EB4  0101               	movlb	1	; () banked
  9321  004EB6  A4D8               	btfss	status,2,c
  9322  004EB8  D002               	goto	u7520
  9323  004EBA  8AC5               	bsf	4037,5,c	;volatile
  9324  004EBC  D001               	goto	l7201
  9325  004EBE                     u7520:
  9326  004EBE  9AC5               	bcf	4037,5,c	;volatile
  9327  004EC0                     l7201:
  9328                           
  9329                           ;I2C.c: 55: ACKEN = 1;
  9330  004EC0  88C5               	bsf	4037,4,c	;volatile
  9331                           
  9332                           ;I2C.c: 56: return temp;
  9333  004EC2  0101               	movlb	1	; () banked
  9334  004EC4  5102               	movf	I2C_Master_Read@temp& (0+255),w,b
  9335  004EC6  0012               	return	
  9336  004EC8                     __end_of_I2C_Master_Read:
  9337                           	opt stack 0
  9338                           tblptru	equ	0xFF8
  9339                           tblptrh	equ	0xFF7
  9340                           tblptrl	equ	0xFF6
  9341                           tablat	equ	0xFF5
  9342                           prodh	equ	0xFF4
  9343                           prodl	equ	0xFF3
  9344                           intcon	equ	0xFF2
  9345                           intcon3	equ	0xFF0
  9346                           postinc0	equ	0xFEE
  9347                           wreg	equ	0xFE8
  9348                           indf2	equ	0xFDF
  9349                           postinc2	equ	0xFDE
  9350                           postdec2	equ	0xFDD
  9351                           fsr2h	equ	0xFDA
  9352                           fsr2l	equ	0xFD9
  9353                           status	equ	0xFD8
  9354                           
  9355 ;; *************** function _I2C_Master_Wait *****************
  9356 ;; Defined at:
  9357 ;;		line 23 in file "I2C.c"
  9358 ;; Parameters:    Size  Location     Type
  9359 ;;		None
  9360 ;; Auto vars:     Size  Location     Type
  9361 ;;		None
  9362 ;; Return value:  Size  Location     Type
  9363 ;;                  1    wreg      void 
  9364 ;; Registers used:
  9365 ;;		wreg, status,2, status,0
  9366 ;; Tracked objects:
  9367 ;;		On entry : 0/0
  9368 ;;		On exit  : 0/0
  9369 ;;		Unchanged: 0/0
  9370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9373 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9374 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9375 ;;Total ram usage:        1 bytes
  9376 ;; Hardware stack levels used:    1
  9377 ;; Hardware stack levels required when called:    8
  9378 ;; This function calls:
  9379 ;;		Nothing
  9380 ;; This function is called by:
  9381 ;;		_I2C_Master_Start
  9382 ;;		_I2C_Master_Stop
  9383 ;;		_I2C_Master_Write
  9384 ;;		_I2C_Master_Read
  9385 ;; This function uses a non-reentrant model
  9386 ;;
  9387                           
  9388                           	psect	text28
  9389  0050D0                     __ptext28:
  9390                           	opt stack 0
  9391  0050D0                     _I2C_Master_Wait:
  9392                           	opt stack 19
  9393  0050D0                     l372:
  9394  0050D0  B4C7               	btfsc	4039,2,c	;volatile
  9395  0050D2  D7FE               	goto	l372
  9396  0050D4  CFC5 F100          	movff	4037,??_I2C_Master_Wait	;volatile
  9397  0050D8  0E1F               	movlw	31
  9398  0050DA  0101               	movlb	1	; () banked
  9399  0050DC  1700               	andwf	??_I2C_Master_Wait& (0+255),f,b
  9400  0050DE  B4D8               	btfsc	status,2,c
  9401  0050E0  0012               	return	
  9402  0050E2  D7F6               	goto	l372
  9403  0050E4                     __end_of_I2C_Master_Wait:
  9404                           	opt stack 0
  9405                           tblptru	equ	0xFF8
  9406                           tblptrh	equ	0xFF7
  9407                           tblptrl	equ	0xFF6
  9408                           tablat	equ	0xFF5
  9409                           prodh	equ	0xFF4
  9410                           prodl	equ	0xFF3
  9411                           intcon	equ	0xFF2
  9412                           intcon3	equ	0xFF0
  9413                           postinc0	equ	0xFEE
  9414                           wreg	equ	0xFE8
  9415                           indf2	equ	0xFDF
  9416                           postinc2	equ	0xFDE
  9417                           postdec2	equ	0xFDD
  9418                           fsr2h	equ	0xFDA
  9419                           fsr2l	equ	0xFD9
  9420                           status	equ	0xFD8
  9421                           
  9422 ;; *************** function _initialize *****************
  9423 ;; Defined at:
  9424 ;;		line 18 in file "main.c"
  9425 ;; Parameters:    Size  Location     Type
  9426 ;;		None
  9427 ;; Auto vars:     Size  Location     Type
  9428 ;;		None
  9429 ;; Return value:  Size  Location     Type
  9430 ;;                  1    wreg      void 
  9431 ;; Registers used:
  9432 ;;		wreg, status,2, status,0, cstack
  9433 ;; Tracked objects:
  9434 ;;		On entry : 0/0
  9435 ;;		On exit  : 0/0
  9436 ;;		Unchanged: 0/0
  9437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9440 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9441 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9442 ;;Total ram usage:        2 bytes
  9443 ;; Hardware stack levels used:    1
  9444 ;; Hardware stack levels required when called:   11
  9445 ;; This function calls:
  9446 ;;		_I2C_Master_Init
  9447 ;;		_initLCD
  9448 ;;		_initLatest
  9449 ;;		_lcdInst
  9450 ;; This function is called by:
  9451 ;;		_main
  9452 ;; This function uses a non-reentrant model
  9453 ;;
  9454                           
  9455                           	psect	text29
  9456  004924                     __ptext29:
  9457                           	opt stack 0
  9458  004924                     _initialize:
  9459                           	opt stack 19
  9460                           
  9461                           ;main.c: 19: TRISA = 0xFF;
  9462                           
  9463                           ; BSR set to: 1
  9464                           ;incstack = 0
  9465  004924  6892               	setf	3986,c	;volatile
  9466                           
  9467                           ;main.c: 20: TRISB = 0xFF;
  9468  004926  6893               	setf	3987,c	;volatile
  9469                           
  9470                           ;main.c: 21: TRISC = 0x00;
  9471  004928  0E00               	movlw	0
  9472  00492A  6E94               	movwf	3988,c	;volatile
  9473                           
  9474                           ;main.c: 22: TRISD = 0x00;
  9475  00492C  0E00               	movlw	0
  9476  00492E  6E95               	movwf	3989,c	;volatile
  9477                           
  9478                           ;main.c: 23: TRISE = 0x00;
  9479  004930  0E00               	movlw	0
  9480  004932  6E96               	movwf	3990,c	;volatile
  9481                           
  9482                           ;main.c: 25: LATA = 0x00;
  9483  004934  0E00               	movlw	0
  9484  004936  6E89               	movwf	3977,c	;volatile
  9485                           
  9486                           ;main.c: 26: LATB = 0x00;
  9487  004938  0E00               	movlw	0
  9488  00493A  6E8A               	movwf	3978,c	;volatile
  9489                           
  9490                           ;main.c: 27: LATC = 0x00;
  9491  00493C  0E00               	movlw	0
  9492  00493E  6E8B               	movwf	3979,c	;volatile
  9493                           
  9494                           ;main.c: 28: LATD = 0x00;
  9495  004940  0E00               	movlw	0
  9496  004942  6E8C               	movwf	3980,c	;volatile
  9497                           
  9498                           ;main.c: 29: LATE = 0x00;
  9499  004944  0E00               	movlw	0
  9500  004946  6E8D               	movwf	3981,c	;volatile
  9501                           
  9502                           ;main.c: 32: ADCON0 = 0x00;
  9503  004948  0E00               	movlw	0
  9504  00494A  6EC2               	movwf	4034,c	;volatile
  9505                           
  9506                           ;main.c: 33: ADCON1 = 0x0C;
  9507  00494C  0E0C               	movlw	12
  9508  00494E  6EC1               	movwf	4033,c	;volatile
  9509                           
  9510                           ;main.c: 34: CVRCON = 0x00;
  9511  004950  0E00               	movlw	0
  9512  004952  6EB5               	movwf	4021,c	;volatile
  9513                           
  9514                           ;main.c: 35: ADFM = 1;
  9515  004954  8EC0               	bsf	4032,7,c	;volatile
  9516                           
  9517                           ;main.c: 37: initLCD();
  9518  004956  ECA0  F026         	call	_initLCD	;wreg free
  9519                           
  9520                           ;main.c: 38: lcdInst(0x01);;
  9521  00495A  0E01               	movlw	1
  9522  00495C  EC83  F028         	call	_lcdInst
  9523                           
  9524                           ;main.c: 39: lcdInst(0b10000000);;
  9525  004960  0E80               	movlw	128
  9526  004962  EC83  F028         	call	_lcdInst
  9527                           
  9528                           ;main.c: 40: I2C_Master_Init(10000);
  9529  004966  0E10               	movlw	16
  9530  004968  0101               	movlb	1	; () banked
  9531  00496A  6F0D               	movwf	I2C_Master_Init@c& (0+255),b
  9532  00496C  0E27               	movlw	39
  9533  00496E  6F0E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  9534  004970  0E00               	movlw	0
  9535  004972  6F0F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  9536  004974  0E00               	movlw	0
  9537  004976  6F10               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  9538  004978  ECA8  F025         	call	_I2C_Master_Init	;wreg free
  9539                           
  9540                           ;main.c: 41: initLatest();
  9541  00497C  EC07  F028         	call	_initLatest	;wreg free
  9542                           
  9543                           ;main.c: 42: _delay((unsigned long)((200)*(8000000/4000.0)));
  9544  004980  0E03               	movlw	3
  9545  004982  0101               	movlb	1	; () banked
  9546  004984  6F16               	movwf	(??_initialize+1)& (0+255),b
  9547  004986  0E08               	movlw	8
  9548  004988  0101               	movlb	1	; () banked
  9549  00498A  6F15               	movwf	??_initialize& (0+255),b
  9550  00498C  0E77               	movlw	119
  9551  00498E                     u8517:
  9552  00498E  2EE8               	decfsz	wreg,f,c
  9553  004990  D7FE               	bra	u8517
  9554  004992  2F15               	decfsz	??_initialize& (0+255),f,b
  9555  004994  D7FC               	bra	u8517
  9556  004996  2F16               	decfsz	(??_initialize+1)& (0+255),f,b
  9557  004998  D7FA               	bra	u8517
  9558  00499A  0012               	return		;funcret
  9559  00499C                     __end_of_initialize:
  9560                           	opt stack 0
  9561                           tblptru	equ	0xFF8
  9562                           tblptrh	equ	0xFF7
  9563                           tblptrl	equ	0xFF6
  9564                           tablat	equ	0xFF5
  9565                           prodh	equ	0xFF4
  9566                           prodl	equ	0xFF3
  9567                           intcon	equ	0xFF2
  9568                           intcon3	equ	0xFF0
  9569                           postinc0	equ	0xFEE
  9570                           wreg	equ	0xFE8
  9571                           indf2	equ	0xFDF
  9572                           postinc2	equ	0xFDE
  9573                           postdec2	equ	0xFDD
  9574                           fsr2h	equ	0xFDA
  9575                           fsr2l	equ	0xFD9
  9576                           status	equ	0xFD8
  9577                           
  9578 ;; *************** function _initLatest *****************
  9579 ;; Defined at:
  9580 ;;		line 9 in file "eeprom.c"
  9581 ;; Parameters:    Size  Location     Type
  9582 ;;		None
  9583 ;; Auto vars:     Size  Location     Type
  9584 ;;		None
  9585 ;; Return value:  Size  Location     Type
  9586 ;;                  1    wreg      void 
  9587 ;; Registers used:
  9588 ;;		wreg, status,2, status,0, cstack
  9589 ;; Tracked objects:
  9590 ;;		On entry : 0/0
  9591 ;;		On exit  : 0/0
  9592 ;;		Unchanged: 0/0
  9593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9597 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9598 ;;Total ram usage:        0 bytes
  9599 ;; Hardware stack levels used:    1
  9600 ;; Hardware stack levels required when called:    9
  9601 ;; This function calls:
  9602 ;;		_ReadEE
  9603 ;; This function is called by:
  9604 ;;		_initialize
  9605 ;; This function uses a non-reentrant model
  9606 ;;
  9607                           
  9608                           	psect	text30
  9609  00500E                     __ptext30:
  9610                           	opt stack 0
  9611  00500E                     _initLatest:
  9612                           	opt stack 20
  9613                           
  9614                           ;eeprom.c: 10: Latest = ReadEE(160);
  9615                           
  9616                           ;incstack = 0
  9617  00500E  0E00               	movlw	0
  9618  005010  0101               	movlb	1	; () banked
  9619  005012  6F01               	movwf	(ReadEE@address+1)& (0+255),b
  9620  005014  0EA0               	movlw	160
  9621  005016  6F00               	movwf	ReadEE@address& (0+255),b
  9622  005018  EC51  F028         	call	_ReadEE	;wreg free
  9623  00501C  0100               	movlb	0	; () banked
  9624  00501E  6FD8               	movwf	_Latest& (0+255),b
  9625                           
  9626                           ; BSR set to: 0
  9627                           ;eeprom.c: 11: if (Latest > 3) {
  9628  005020  0E03               	movlw	3
  9629  005022  0100               	movlb	0	; () banked
  9630  005024  65D8               	cpfsgt	_Latest& (0+255),b
  9631  005026  0012               	return	
  9632                           
  9633                           ; BSR set to: 0
  9634                           ;eeprom.c: 12: Latest = 0;
  9635  005028  0E00               	movlw	0
  9636  00502A  0100               	movlb	0	; () banked
  9637  00502C  6FD8               	movwf	_Latest& (0+255),b
  9638  00502E  0012               	return	
  9639  005030                     __end_of_initLatest:
  9640                           	opt stack 0
  9641                           tblptru	equ	0xFF8
  9642                           tblptrh	equ	0xFF7
  9643                           tblptrl	equ	0xFF6
  9644                           tablat	equ	0xFF5
  9645                           prodh	equ	0xFF4
  9646                           prodl	equ	0xFF3
  9647                           intcon	equ	0xFF2
  9648                           intcon3	equ	0xFF0
  9649                           postinc0	equ	0xFEE
  9650                           wreg	equ	0xFE8
  9651                           indf2	equ	0xFDF
  9652                           postinc2	equ	0xFDE
  9653                           postdec2	equ	0xFDD
  9654                           fsr2h	equ	0xFDA
  9655                           fsr2l	equ	0xFD9
  9656                           status	equ	0xFD8
  9657                           
  9658 ;; *************** function _ReadEE *****************
  9659 ;; Defined at:
  9660 ;;		line 16 in file "eeprom.c"
  9661 ;; Parameters:    Size  Location     Type
  9662 ;;  address         2    0[BANK1 ] unsigned int 
  9663 ;; Auto vars:     Size  Location     Type
  9664 ;;		None
  9665 ;; Return value:  Size  Location     Type
  9666 ;;                  1    wreg      unsigned char 
  9667 ;; Registers used:
  9668 ;;		wreg, status,2
  9669 ;; Tracked objects:
  9670 ;;		On entry : 0/0
  9671 ;;		On exit  : 0/0
  9672 ;;		Unchanged: 0/0
  9673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9674 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9677 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9678 ;;Total ram usage:        2 bytes
  9679 ;; Hardware stack levels used:    1
  9680 ;; Hardware stack levels required when called:    8
  9681 ;; This function calls:
  9682 ;;		Nothing
  9683 ;; This function is called by:
  9684 ;;		_initLatest
  9685 ;; This function uses a non-reentrant model
  9686 ;;
  9687                           
  9688                           	psect	text31
  9689  0050A2                     __ptext31:
  9690                           	opt stack 0
  9691  0050A2                     _ReadEE:
  9692                           	opt stack 20
  9693                           
  9694                           ;eeprom.c: 19: EEADRH = (unsigned char) (address >> 8);
  9695                           
  9696                           ; BSR set to: 0
  9697                           ;incstack = 0
  9698  0050A2  0101               	movlb	1	; () banked
  9699  0050A4  5101               	movf	(ReadEE@address+1)& (0+255),w,b
  9700  0050A6  6EAA               	movwf	4010,c	;volatile
  9701                           
  9702                           ; BSR set to: 1
  9703                           ;eeprom.c: 20: EEADR = (unsigned char) address;
  9704  0050A8  C100  FFA9         	movff	ReadEE@address,4009	;volatile
  9705                           
  9706                           ; BSR set to: 1
  9707                           ;eeprom.c: 22: EECON1bits.EEPGD = 0;
  9708  0050AC  9EA6               	bcf	4006,7,c	;volatile
  9709                           
  9710                           ; BSR set to: 1
  9711                           ;eeprom.c: 23: EECON1bits.CFGS = 0;
  9712  0050AE  9CA6               	bcf	4006,6,c	;volatile
  9713                           
  9714                           ; BSR set to: 1
  9715                           ;eeprom.c: 24: EECON1bits.RD = 1;
  9716  0050B0  80A6               	bsf	4006,0,c	;volatile
  9717  0050B2                     l420:
  9718  0050B2  B0A6               	btfsc	4006,0,c	;volatile
  9719  0050B4  D7FE               	goto	l420
  9720                           
  9721                           ;eeprom.c: 30: return EEDATA;
  9722  0050B6  50A8               	movf	4008,w,c	;volatile
  9723  0050B8  0012               	return	
  9724  0050BA                     __end_of_ReadEE:
  9725                           	opt stack 0
  9726                           tblptru	equ	0xFF8
  9727                           tblptrh	equ	0xFF7
  9728                           tblptrl	equ	0xFF6
  9729                           tablat	equ	0xFF5
  9730                           prodh	equ	0xFF4
  9731                           prodl	equ	0xFF3
  9732                           intcon	equ	0xFF2
  9733                           intcon3	equ	0xFF0
  9734                           postinc0	equ	0xFEE
  9735                           wreg	equ	0xFE8
  9736                           indf2	equ	0xFDF
  9737                           postinc2	equ	0xFDE
  9738                           postdec2	equ	0xFDD
  9739                           fsr2h	equ	0xFDA
  9740                           fsr2l	equ	0xFD9
  9741                           status	equ	0xFD8
  9742                           
  9743 ;; *************** function _initLCD *****************
  9744 ;; Defined at:
  9745 ;;		line 9 in file "lcd.c"
  9746 ;; Parameters:    Size  Location     Type
  9747 ;;		None
  9748 ;; Auto vars:     Size  Location     Type
  9749 ;;		None
  9750 ;; Return value:  Size  Location     Type
  9751 ;;                  1    wreg      void 
  9752 ;; Registers used:
  9753 ;;		wreg, status,2, status,0, cstack
  9754 ;; Tracked objects:
  9755 ;;		On entry : 0/0
  9756 ;;		On exit  : 0/0
  9757 ;;		Unchanged: 0/0
  9758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9761 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9762 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9763 ;;Total ram usage:        1 bytes
  9764 ;; Hardware stack levels used:    1
  9765 ;; Hardware stack levels required when called:   10
  9766 ;; This function calls:
  9767 ;;		_lcdInst
  9768 ;; This function is called by:
  9769 ;;		_initialize
  9770 ;; This function uses a non-reentrant model
  9771 ;;
  9772                           
  9773                           	psect	text32
  9774  004D40                     __ptext32:
  9775                           	opt stack 0
  9776  004D40                     _initLCD:
  9777                           	opt stack 19
  9778                           
  9779                           ;lcd.c: 10: _delay((unsigned long)((15)*(8000000/4000.0)));
  9780                           
  9781                           ;incstack = 0
  9782  004D40  0E27               	movlw	39
  9783  004D42  0101               	movlb	1	; () banked
  9784  004D44  6F03               	movwf	??_initLCD& (0+255),b
  9785  004D46  0EF5               	movlw	245
  9786  004D48                     u8527:
  9787  004D48  2EE8               	decfsz	wreg,f,c
  9788  004D4A  D7FE               	bra	u8527
  9789  004D4C  2F03               	decfsz	??_initLCD& (0+255),f,b
  9790  004D4E  D7FC               	bra	u8527
  9791                           
  9792                           ;lcd.c: 11: lcdInst(0b00110011);
  9793  004D50  0E33               	movlw	51
  9794  004D52  EC83  F028         	call	_lcdInst
  9795                           
  9796                           ;lcd.c: 12: lcdInst(0b00110010);
  9797  004D56  0E32               	movlw	50
  9798  004D58  EC83  F028         	call	_lcdInst
  9799                           
  9800                           ;lcd.c: 13: lcdInst(0b00101000);
  9801  004D5C  0E28               	movlw	40
  9802  004D5E  EC83  F028         	call	_lcdInst
  9803                           
  9804                           ;lcd.c: 14: lcdInst(0b00001111);
  9805  004D62  0E0F               	movlw	15
  9806  004D64  EC83  F028         	call	_lcdInst
  9807                           
  9808                           ;lcd.c: 15: lcdInst(0b00000110);
  9809  004D68  0E06               	movlw	6
  9810  004D6A  EC83  F028         	call	_lcdInst
  9811                           
  9812                           ;lcd.c: 16: lcdInst(0b00000001);
  9813  004D6E  0E01               	movlw	1
  9814  004D70  EC83  F028         	call	_lcdInst
  9815                           
  9816                           ;lcd.c: 17: _delay((unsigned long)((15)*(8000000/4000.0)));
  9817  004D74  0E27               	movlw	39
  9818  004D76  0101               	movlb	1	; () banked
  9819  004D78  6F03               	movwf	??_initLCD& (0+255),b
  9820  004D7A  0EF5               	movlw	245
  9821  004D7C                     u8537:
  9822  004D7C  2EE8               	decfsz	wreg,f,c
  9823  004D7E  D7FE               	bra	u8537
  9824  004D80  2F03               	decfsz	??_initLCD& (0+255),f,b
  9825  004D82  D7FC               	bra	u8537
  9826  004D84  0012               	return		;funcret
  9827  004D86                     __end_of_initLCD:
  9828                           	opt stack 0
  9829                           tblptru	equ	0xFF8
  9830                           tblptrh	equ	0xFF7
  9831                           tblptrl	equ	0xFF6
  9832                           tablat	equ	0xFF5
  9833                           prodh	equ	0xFF4
  9834                           prodl	equ	0xFF3
  9835                           intcon	equ	0xFF2
  9836                           intcon3	equ	0xFF0
  9837                           postinc0	equ	0xFEE
  9838                           wreg	equ	0xFE8
  9839                           indf2	equ	0xFDF
  9840                           postinc2	equ	0xFDE
  9841                           postdec2	equ	0xFDD
  9842                           fsr2h	equ	0xFDA
  9843                           fsr2l	equ	0xFD9
  9844                           status	equ	0xFD8
  9845                           
  9846 ;; *************** function _lcdInst *****************
  9847 ;; Defined at:
  9848 ;;		line 20 in file "lcd.c"
  9849 ;; Parameters:    Size  Location     Type
  9850 ;;  data            1    wreg     unsigned char 
  9851 ;; Auto vars:     Size  Location     Type
  9852 ;;  data            1    2[BANK1 ] unsigned char 
  9853 ;; Return value:  Size  Location     Type
  9854 ;;                  1    wreg      void 
  9855 ;; Registers used:
  9856 ;;		wreg, status,2, status,0, cstack
  9857 ;; Tracked objects:
  9858 ;;		On entry : 0/0
  9859 ;;		On exit  : 0/0
  9860 ;;		Unchanged: 0/0
  9861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9863 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9865 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9866 ;;Total ram usage:        1 bytes
  9867 ;; Hardware stack levels used:    1
  9868 ;; Hardware stack levels required when called:    9
  9869 ;; This function calls:
  9870 ;;		_lcdNibble
  9871 ;; This function is called by:
  9872 ;;		_initialize
  9873 ;;		_initLCD
  9874 ;;		_line0
  9875 ;;		_line1
  9876 ;; This function uses a non-reentrant model
  9877 ;;
  9878                           
  9879                           	psect	text33
  9880  005106                     __ptext33:
  9881                           	opt stack 0
  9882  005106                     _lcdInst:
  9883                           	opt stack 19
  9884                           
  9885                           ;incstack = 0
  9886                           ;lcdInst@data stored from wreg
  9887  005106  0101               	movlb	1	; () banked
  9888  005108  6F02               	movwf	lcdInst@data& (0+255),b
  9889                           
  9890                           ;lcd.c: 21: LATDbits.LATD2 = 0;
  9891  00510A  948C               	bcf	3980,2,c	;volatile
  9892                           
  9893                           ;lcd.c: 22: lcdNibble(data);
  9894  00510C  0101               	movlb	1	; () banked
  9895  00510E  5102               	movf	lcdInst@data& (0+255),w,b
  9896  005110  EC41  F025         	call	_lcdNibble
  9897  005114  0012               	return		;funcret
  9898  005116                     __end_of_lcdInst:
  9899                           	opt stack 0
  9900                           tblptru	equ	0xFF8
  9901                           tblptrh	equ	0xFF7
  9902                           tblptrl	equ	0xFF6
  9903                           tablat	equ	0xFF5
  9904                           prodh	equ	0xFF4
  9905                           prodl	equ	0xFF3
  9906                           intcon	equ	0xFF2
  9907                           intcon3	equ	0xFF0
  9908                           postinc0	equ	0xFEE
  9909                           wreg	equ	0xFE8
  9910                           indf2	equ	0xFDF
  9911                           postinc2	equ	0xFDE
  9912                           postdec2	equ	0xFDD
  9913                           fsr2h	equ	0xFDA
  9914                           fsr2l	equ	0xFD9
  9915                           status	equ	0xFD8
  9916                           
  9917 ;; *************** function _lcdNibble *****************
  9918 ;; Defined at:
  9919 ;;		line 30 in file "lcd.c"
  9920 ;; Parameters:    Size  Location     Type
  9921 ;;  data            1    wreg     unsigned char 
  9922 ;; Auto vars:     Size  Location     Type
  9923 ;;  data            1    1[BANK1 ] unsigned char 
  9924 ;;  temp            1    0[BANK1 ] unsigned char 
  9925 ;; Return value:  Size  Location     Type
  9926 ;;                  1    wreg      void 
  9927 ;; Registers used:
  9928 ;;		wreg, status,2, status,0
  9929 ;; Tracked objects:
  9930 ;;		On entry : 0/0
  9931 ;;		On exit  : 0/0
  9932 ;;		Unchanged: 0/0
  9933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9935 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9937 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9938 ;;Total ram usage:        2 bytes
  9939 ;; Hardware stack levels used:    1
  9940 ;; Hardware stack levels required when called:    8
  9941 ;; This function calls:
  9942 ;;		Nothing
  9943 ;; This function is called by:
  9944 ;;		_lcdInst
  9945 ;;		_putch
  9946 ;; This function uses a non-reentrant model
  9947 ;;
  9948                           
  9949                           	psect	text34
  9950  004A82                     __ptext34:
  9951                           	opt stack 0
  9952  004A82                     _lcdNibble:
  9953                           	opt stack 19
  9954                           
  9955                           ;incstack = 0
  9956                           ;lcdNibble@data stored from wreg
  9957  004A82  0101               	movlb	1	; () banked
  9958  004A84  6F01               	movwf	lcdNibble@data& (0+255),b
  9959                           
  9960                           ;lcd.c: 32: char temp = data & 0xF0;
  9961  004A86  0101               	movlb	1	; () banked
  9962  004A88  5101               	movf	lcdNibble@data& (0+255),w,b
  9963  004A8A  0BF0               	andlw	240
  9964  004A8C  0101               	movlb	1	; () banked
  9965  004A8E  6F00               	movwf	lcdNibble@temp& (0+255),b
  9966                           
  9967                           ;lcd.c: 33: LATD = LATD & 0x0F;
  9968  004A90  508C               	movf	3980,w,c	;volatile
  9969  004A92  0B0F               	andlw	15
  9970  004A94  6E8C               	movwf	3980,c	;volatile
  9971                           
  9972                           ;lcd.c: 34: LATD = temp | LATD;
  9973  004A96  0101               	movlb	1	; () banked
  9974  004A98  5100               	movf	lcdNibble@temp& (0+255),w,b
  9975  004A9A  108C               	iorwf	3980,w,c	;volatile
  9976  004A9C  6E8C               	movwf	3980,c	;volatile
  9977                           
  9978                           ; BSR set to: 1
  9979                           ;lcd.c: 36: LATDbits.LATD3 = 0;
  9980  004A9E  968C               	bcf	3980,3,c	;volatile
  9981                           
  9982                           ; BSR set to: 1
  9983                           ;lcd.c: 37: _delay((unsigned long)((25)*(8000000/4000000.0)));
  9984  004AA0  0E10               	movlw	16
  9985  004AA2                     u8547:
  9986  004AA2  2EE8               	decfsz	wreg,f,c
  9987  004AA4  D7FE               	bra	u8547
  9988  004AA6  D000               	nop2	
  9989                           
  9990                           ;lcd.c: 38: LATDbits.LATD3 = 1;
  9991  004AA8  868C               	bsf	3980,3,c	;volatile
  9992                           
  9993                           ;lcd.c: 39: _delay((unsigned long)((25)*(8000000/4000000.0)));
  9994  004AAA  0E10               	movlw	16
  9995  004AAC                     u8557:
  9996  004AAC  2EE8               	decfsz	wreg,f,c
  9997  004AAE  D7FE               	bra	u8557
  9998  004AB0  D000               	nop2	
  9999                           
 10000                           ;lcd.c: 41: data = data << 4;
 10001  004AB2  0101               	movlb	1	; () banked
 10002  004AB4  3901               	swapf	lcdNibble@data& (0+255),w,b
 10003  004AB6  0BF0               	andlw	240
 10004  004AB8  0101               	movlb	1	; () banked
 10005  004ABA  6F01               	movwf	lcdNibble@data& (0+255),b
 10006                           
 10007                           ;lcd.c: 43: temp = data & 0xF0;
 10008  004ABC  0101               	movlb	1	; () banked
 10009  004ABE  5101               	movf	lcdNibble@data& (0+255),w,b
 10010  004AC0  0BF0               	andlw	240
 10011  004AC2  0101               	movlb	1	; () banked
 10012  004AC4  6F00               	movwf	lcdNibble@temp& (0+255),b
 10013                           
 10014                           ;lcd.c: 44: LATD = LATD & 0x0F;
 10015  004AC6  508C               	movf	3980,w,c	;volatile
 10016  004AC8  0B0F               	andlw	15
 10017  004ACA  6E8C               	movwf	3980,c	;volatile
 10018                           
 10019                           ;lcd.c: 45: LATD = temp | LATD;
 10020  004ACC  0101               	movlb	1	; () banked
 10021  004ACE  5100               	movf	lcdNibble@temp& (0+255),w,b
 10022  004AD0  108C               	iorwf	3980,w,c	;volatile
 10023  004AD2  6E8C               	movwf	3980,c	;volatile
 10024                           
 10025                           ; BSR set to: 1
 10026                           ;lcd.c: 47: LATDbits.LATD3 = 0;
 10027  004AD4  968C               	bcf	3980,3,c	;volatile
 10028                           
 10029                           ; BSR set to: 1
 10030                           ;lcd.c: 48: _delay((unsigned long)((25)*(8000000/4000000.0)));
 10031  004AD6  0E10               	movlw	16
 10032  004AD8                     u8567:
 10033  004AD8  2EE8               	decfsz	wreg,f,c
 10034  004ADA  D7FE               	bra	u8567
 10035  004ADC  D000               	nop2	
 10036                           
 10037                           ;lcd.c: 49: LATDbits.LATD3 = 1;
 10038  004ADE  868C               	bsf	3980,3,c	;volatile
 10039                           
 10040                           ;lcd.c: 50: _delay((unsigned long)((25)*(8000000/4000000.0)));
 10041  004AE0  0E10               	movlw	16
 10042  004AE2                     u8577:
 10043  004AE2  2EE8               	decfsz	wreg,f,c
 10044  004AE4  D7FE               	bra	u8577
 10045  004AE6  D000               	nop2	
 10046  004AE8  0012               	return		;funcret
 10047  004AEA                     __end_of_lcdNibble:
 10048                           	opt stack 0
 10049                           tblptru	equ	0xFF8
 10050                           tblptrh	equ	0xFF7
 10051                           tblptrl	equ	0xFF6
 10052                           tablat	equ	0xFF5
 10053                           prodh	equ	0xFF4
 10054                           prodl	equ	0xFF3
 10055                           intcon	equ	0xFF2
 10056                           intcon3	equ	0xFF0
 10057                           postinc0	equ	0xFEE
 10058                           wreg	equ	0xFE8
 10059                           indf2	equ	0xFDF
 10060                           postinc2	equ	0xFDE
 10061                           postdec2	equ	0xFDD
 10062                           fsr2h	equ	0xFDA
 10063                           fsr2l	equ	0xFD9
 10064                           status	equ	0xFD8
 10065                           
 10066 ;; *************** function _I2C_Master_Init *****************
 10067 ;; Defined at:
 10068 ;;		line 13 in file "I2C.c"
 10069 ;; Parameters:    Size  Location     Type
 10070 ;;  c               4   13[BANK1 ] const unsigned long 
 10071 ;; Auto vars:     Size  Location     Type
 10072 ;;		None
 10073 ;; Return value:  Size  Location     Type
 10074 ;;                  1    wreg      void 
 10075 ;; Registers used:
 10076 ;;		wreg, status,2, status,0, cstack
 10077 ;; Tracked objects:
 10078 ;;		On entry : 0/0
 10079 ;;		On exit  : 0/0
 10080 ;;		Unchanged: 0/0
 10081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10082 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10084 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10085 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10086 ;;Total ram usage:        8 bytes
 10087 ;; Hardware stack levels used:    1
 10088 ;; Hardware stack levels required when called:    9
 10089 ;; This function calls:
 10090 ;;		___lldiv
 10091 ;; This function is called by:
 10092 ;;		_initialize
 10093 ;; This function uses a non-reentrant model
 10094 ;;
 10095                           
 10096                           	psect	text35
 10097  004B50                     __ptext35:
 10098                           	opt stack 0
 10099  004B50                     _I2C_Master_Init:
 10100                           	opt stack 20
 10101                           
 10102                           ;I2C.c: 15: SSPSTAT = 0b00000000;
 10103                           
 10104                           ;incstack = 0
 10105  004B50  0E00               	movlw	0
 10106  004B52  6EC7               	movwf	4039,c	;volatile
 10107                           
 10108                           ;I2C.c: 16: SSPCON1 = 0b00101000;
 10109  004B54  0E28               	movlw	40
 10110  004B56  6EC6               	movwf	4038,c	;volatile
 10111                           
 10112                           ;I2C.c: 17: SSPCON2 = 0b00000000;
 10113  004B58  0E00               	movlw	0
 10114  004B5A  6EC5               	movwf	4037,c	;volatile
 10115                           
 10116                           ;I2C.c: 18: SSPADD = (8000000 / (4 * c)) - 1;
 10117  004B5C  0E00               	movlw	0
 10118  004B5E  0101               	movlb	1	; () banked
 10119  004B60  6F00               	movwf	___lldiv@dividend& (0+255),b
 10120  004B62  0E12               	movlw	18
 10121  004B64  6F01               	movwf	(___lldiv@dividend+1)& (0+255),b
 10122  004B66  0E7A               	movlw	122
 10123  004B68  6F02               	movwf	(___lldiv@dividend+2)& (0+255),b
 10124  004B6A  0E00               	movlw	0
 10125  004B6C  6F03               	movwf	(___lldiv@dividend+3)& (0+255),b
 10126  004B6E  C10D  F111         	movff	I2C_Master_Init@c,??_I2C_Master_Init
 10127  004B72  C10E  F112         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
 10128  004B76  C10F  F113         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
 10129  004B7A  C110  F114         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
 10130  004B7E  0E02               	movlw	2
 10131  004B80                     u7925:
 10132  004B80  90D8               	bcf	status,0,c
 10133  004B82  0101               	movlb	1	; () banked
 10134  004B84  3711               	rlcf	??_I2C_Master_Init& (0+255),f,b
 10135  004B86  3712               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
 10136  004B88  3713               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
 10137  004B8A  3714               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
 10138  004B8C  2EE8               	decfsz	wreg,f,c
 10139  004B8E  D7F8               	goto	u7925
 10140  004B90  C111  F104         	movff	??_I2C_Master_Init,___lldiv@divisor
 10141  004B94  C112  F105         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 10142  004B98  C113  F106         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 10143  004B9C  C114  F107         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 10144  004BA0  EC6D  F021         	call	___lldiv	;wreg free
 10145  004BA4  0101               	movlb	1	; () banked
 10146  004BA6  0500               	decf	?___lldiv& (0+255),w,b
 10147  004BA8  6EC8               	movwf	4040,c	;volatile
 10148                           
 10149                           ; BSR set to: 1
 10150                           ;I2C.c: 19: TRISC3 = 1;
 10151  004BAA  8694               	bsf	3988,3,c	;volatile
 10152                           
 10153                           ; BSR set to: 1
 10154                           ;I2C.c: 20: TRISC4 = 1;
 10155  004BAC  8894               	bsf	3988,4,c	;volatile
 10156                           
 10157                           ; BSR set to: 1
 10158  004BAE  0012               	return		;funcret
 10159  004BB0                     __end_of_I2C_Master_Init:
 10160                           	opt stack 0
 10161                           tblptru	equ	0xFF8
 10162                           tblptrh	equ	0xFF7
 10163                           tblptrl	equ	0xFF6
 10164                           tablat	equ	0xFF5
 10165                           prodh	equ	0xFF4
 10166                           prodl	equ	0xFF3
 10167                           intcon	equ	0xFF2
 10168                           intcon3	equ	0xFF0
 10169                           postinc0	equ	0xFEE
 10170                           wreg	equ	0xFE8
 10171                           indf2	equ	0xFDF
 10172                           postinc2	equ	0xFDE
 10173                           postdec2	equ	0xFDD
 10174                           fsr2h	equ	0xFDA
 10175                           fsr2l	equ	0xFD9
 10176                           status	equ	0xFD8
 10177                           
 10178 ;; *************** function ___lldiv *****************
 10179 ;; Defined at:
 10180 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/lldiv.c"
 10181 ;; Parameters:    Size  Location     Type
 10182 ;;  dividend        4    0[BANK1 ] unsigned long 
 10183 ;;  divisor         4    4[BANK1 ] unsigned long 
 10184 ;; Auto vars:     Size  Location     Type
 10185 ;;  quotient        4    8[BANK1 ] unsigned long 
 10186 ;;  counter         1   12[BANK1 ] unsigned char 
 10187 ;; Return value:  Size  Location     Type
 10188 ;;                  4    0[BANK1 ] unsigned long 
 10189 ;; Registers used:
 10190 ;;		wreg, status,2, status,0
 10191 ;; Tracked objects:
 10192 ;;		On entry : 0/0
 10193 ;;		On exit  : 0/0
 10194 ;;		Unchanged: 0/0
 10195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10196 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10197 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10199 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10200 ;;Total ram usage:       13 bytes
 10201 ;; Hardware stack levels used:    1
 10202 ;; Hardware stack levels required when called:    8
 10203 ;; This function calls:
 10204 ;;		Nothing
 10205 ;; This function is called by:
 10206 ;;		_I2C_Master_Init
 10207 ;;		_printf
 10208 ;; This function uses a non-reentrant model
 10209 ;;
 10210                           
 10211                           	psect	text36
 10212  0042DA                     __ptext36:
 10213                           	opt stack 0
 10214  0042DA                     ___lldiv:
 10215                           	opt stack 20
 10216                           
 10217                           ; BSR set to: 1
 10218                           ;incstack = 0
 10219  0042DA  0E00               	movlw	0
 10220  0042DC  0101               	movlb	1	; () banked
 10221  0042DE  6F08               	movwf	___lldiv@quotient& (0+255),b
 10222  0042E0  0E00               	movlw	0
 10223  0042E2  6F09               	movwf	(___lldiv@quotient+1)& (0+255),b
 10224  0042E4  0E00               	movlw	0
 10225  0042E6  6F0A               	movwf	(___lldiv@quotient+2)& (0+255),b
 10226  0042E8  0E00               	movlw	0
 10227  0042EA  6F0B               	movwf	(___lldiv@quotient+3)& (0+255),b
 10228                           
 10229                           ; BSR set to: 1
 10230  0042EC  0101               	movlb	1	; () banked
 10231  0042EE  5104               	movf	___lldiv@divisor& (0+255),w,b
 10232  0042F0  0101               	movlb	1	; () banked
 10233  0042F2  1105               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 10234  0042F4  0101               	movlb	1	; () banked
 10235  0042F6  1106               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 10236  0042F8  0101               	movlb	1	; () banked
 10237  0042FA  1107               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 10238  0042FC  B4D8               	btfsc	status,2,c
 10239  0042FE  D042               	goto	l981
 10240                           
 10241                           ; BSR set to: 1
 10242  004300  0E01               	movlw	1
 10243  004302  0101               	movlb	1	; () banked
 10244  004304  6F0C               	movwf	___lldiv@counter& (0+255),b
 10245  004306  D008               	goto	l7447
 10246  004308                     l7445:
 10247                           
 10248                           ; BSR set to: 1
 10249  004308  0101               	movlb	1	; () banked
 10250  00430A  90D8               	bcf	status,0,c
 10251  00430C  3704               	rlcf	___lldiv@divisor& (0+255),f,b
 10252  00430E  3705               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 10253  004310  3706               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 10254  004312  3707               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 10255  004314  0101               	movlb	1	; () banked
 10256  004316  2B0C               	incf	___lldiv@counter& (0+255),f,b
 10257  004318                     l7447:
 10258                           
 10259                           ; BSR set to: 1
 10260  004318  0101               	movlb	1	; () banked
 10261  00431A  AF07               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 10262  00431C  D7F5               	goto	l7445
 10263  00431E                     l7449:
 10264                           
 10265                           ; BSR set to: 1
 10266  00431E  0101               	movlb	1	; () banked
 10267  004320  90D8               	bcf	status,0,c
 10268  004322  3708               	rlcf	___lldiv@quotient& (0+255),f,b
 10269  004324  3709               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 10270  004326  370A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 10271  004328  370B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 10272                           
 10273                           ; BSR set to: 1
 10274  00432A  0101               	movlb	1	; () banked
 10275  00432C  5104               	movf	___lldiv@divisor& (0+255),w,b
 10276  00432E  0101               	movlb	1	; () banked
 10277  004330  5D00               	subwf	___lldiv@dividend& (0+255),w,b
 10278  004332  0101               	movlb	1	; () banked
 10279  004334  5105               	movf	(___lldiv@divisor+1)& (0+255),w,b
 10280  004336  0101               	movlb	1	; () banked
 10281  004338  5901               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 10282  00433A  0101               	movlb	1	; () banked
 10283  00433C  5106               	movf	(___lldiv@divisor+2)& (0+255),w,b
 10284  00433E  0101               	movlb	1	; () banked
 10285  004340  5902               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 10286  004342  0101               	movlb	1	; () banked
 10287  004344  5107               	movf	(___lldiv@divisor+3)& (0+255),w,b
 10288  004346  0101               	movlb	1	; () banked
 10289  004348  5903               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 10290  00434A  A0D8               	btfss	status,0,c
 10291  00434C  D012               	goto	l7457
 10292                           
 10293                           ; BSR set to: 1
 10294  00434E  0101               	movlb	1	; () banked
 10295  004350  5104               	movf	___lldiv@divisor& (0+255),w,b
 10296  004352  0101               	movlb	1	; () banked
 10297  004354  5F00               	subwf	___lldiv@dividend& (0+255),f,b
 10298  004356  0101               	movlb	1	; () banked
 10299  004358  5105               	movf	(___lldiv@divisor+1)& (0+255),w,b
 10300  00435A  0101               	movlb	1	; () banked
 10301  00435C  5B01               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 10302  00435E  0101               	movlb	1	; () banked
 10303  004360  5106               	movf	(___lldiv@divisor+2)& (0+255),w,b
 10304  004362  0101               	movlb	1	; () banked
 10305  004364  5B02               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 10306  004366  0101               	movlb	1	; () banked
 10307  004368  5107               	movf	(___lldiv@divisor+3)& (0+255),w,b
 10308  00436A  0101               	movlb	1	; () banked
 10309  00436C  5B03               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 10310                           
 10311                           ; BSR set to: 1
 10312  00436E  0101               	movlb	1	; () banked
 10313  004370  8108               	bsf	___lldiv@quotient& (0+255),0,b
 10314  004372                     l7457:
 10315                           
 10316                           ; BSR set to: 1
 10317  004372  0101               	movlb	1	; () banked
 10318  004374  90D8               	bcf	status,0,c
 10319  004376  3307               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 10320  004378  3306               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 10321  00437A  3305               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 10322  00437C  3304               	rrcf	___lldiv@divisor& (0+255),f,b
 10323                           
 10324                           ; BSR set to: 1
 10325  00437E  0101               	movlb	1	; () banked
 10326  004380  2F0C               	decfsz	___lldiv@counter& (0+255),f,b
 10327  004382  D7CD               	goto	l7449
 10328  004384                     l981:
 10329                           
 10330                           ; BSR set to: 1
 10331  004384  C108  F100         	movff	___lldiv@quotient,?___lldiv
 10332  004388  C109  F101         	movff	___lldiv@quotient+1,?___lldiv+1
 10333  00438C  C10A  F102         	movff	___lldiv@quotient+2,?___lldiv+2
 10334  004390  C10B  F103         	movff	___lldiv@quotient+3,?___lldiv+3
 10335                           
 10336                           ; BSR set to: 1
 10337  004394  0012               	return		;funcret
 10338  004396                     __end_of___lldiv:
 10339                           	opt stack 0
 10340                           tblptru	equ	0xFF8
 10341                           tblptrh	equ	0xFF7
 10342                           tblptrl	equ	0xFF6
 10343                           tablat	equ	0xFF5
 10344                           prodh	equ	0xFF4
 10345                           prodl	equ	0xFF3
 10346                           intcon	equ	0xFF2
 10347                           intcon3	equ	0xFF0
 10348                           postinc0	equ	0xFEE
 10349                           wreg	equ	0xFE8
 10350                           indf2	equ	0xFDF
 10351                           postinc2	equ	0xFDE
 10352                           postdec2	equ	0xFDD
 10353                           fsr2h	equ	0xFDA
 10354                           fsr2l	equ	0xFD9
 10355                           status	equ	0xFD8
 10356                           
 10357 ;; *************** function _keypressed *****************
 10358 ;; Defined at:
 10359 ;;		line 168 in file "main.c"
 10360 ;; Parameters:    Size  Location     Type
 10361 ;;		None
 10362 ;; Auto vars:     Size  Location     Type
 10363 ;;  keypress        1  125[COMRAM] unsigned char 
 10364 ;; Return value:  Size  Location     Type
 10365 ;;                  1    wreg      void 
 10366 ;; Registers used:
 10367 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10368 ;; Tracked objects:
 10369 ;;		On entry : 0/0
 10370 ;;		On exit  : 0/0
 10371 ;;		Unchanged: 0/0
 10372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10374 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10375 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10376 ;;      Totals:         1      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10377 ;;Total ram usage:       17 bytes
 10378 ;; Hardware stack levels used:    1
 10379 ;; Hardware stack levels required when called:    7
 10380 ;; This function calls:
 10381 ;;		_PermLog
 10382 ;;		_simulate
 10383 ;;		_stopMoving
 10384 ;; This function is called by:
 10385 ;;		Interrupt level 2
 10386 ;; This function uses a non-reentrant model
 10387 ;;
 10388                           
 10389                           	psect	intcode
 10390  000008                     __pintcode:
 10391                           	opt stack 0
 10392  000008                     _keypressed:
 10393                           	opt stack 18
 10394                           
 10395                           ; BSR set to: 1
 10396                           ;incstack = 0
 10397  000008  827F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10398  00000A  ED21  F01D         	call	int_func,f	;refresh shadow registers
 10399                           tblptru	equ	0xFF8
 10400                           tblptrh	equ	0xFF7
 10401                           tblptrl	equ	0xFF6
 10402                           tablat	equ	0xFF5
 10403                           prodh	equ	0xFF4
 10404                           prodl	equ	0xFF3
 10405                           intcon	equ	0xFF2
 10406                           intcon3	equ	0xFF0
 10407                           postinc0	equ	0xFEE
 10408                           wreg	equ	0xFE8
 10409                           indf2	equ	0xFDF
 10410                           postinc2	equ	0xFDE
 10411                           postdec2	equ	0xFDD
 10412                           fsr2h	equ	0xFDA
 10413                           fsr2l	equ	0xFD9
 10414                           status	equ	0xFD8
 10415                           
 10416                           	psect	intcode_body
 10417  003A42                     __pintcode_body:
 10418                           	opt stack 18
 10419  003A42                     int_func:
 10420                           	opt stack 18
 10421  003A42  0006               	pop		; remove dummy address from shadow register refresh
 10422  003A44  CFFA F0A8          	movff	pclath,??_keypressed+2
 10423  003A48  CFFB F0A9          	movff	pclatu,??_keypressed+3
 10424  003A4C  CFE9 F0AA          	movff	fsr0l,??_keypressed+4
 10425  003A50  CFEA F0AB          	movff	fsr0h,??_keypressed+5
 10426  003A54  CFE1 F0AC          	movff	fsr1l,??_keypressed+6
 10427  003A58  CFE2 F0AD          	movff	fsr1h,??_keypressed+7
 10428  003A5C  CFD9 F0AE          	movff	fsr2l,??_keypressed+8
 10429  003A60  CFDA F0AF          	movff	fsr2h,??_keypressed+9
 10430  003A64  CFF3 F0B0          	movff	prodl,??_keypressed+10
 10431  003A68  CFF4 F0B1          	movff	prodh,??_keypressed+11
 10432  003A6C  CFF6 F0B2          	movff	tblptrl,??_keypressed+12
 10433  003A70  CFF7 F0B3          	movff	tblptrh,??_keypressed+13
 10434  003A74  CFF8 F0B4          	movff	tblptru,??_keypressed+14
 10435  003A78  CFF5 F0B5          	movff	tablat,??_keypressed+15
 10436                           
 10437                           ;main.c: 174: (INTCONbits.GIE = 0);
 10438  003A7C  9EF2               	bcf	intcon,7,c	;volatile
 10439                           
 10440                           ;main.c: 175: if (INT1IF) {
 10441  003A7E  A0F0               	btfss	intcon3,0,c	;volatile
 10442  003A80  D03D               	goto	i2l144
 10443                           
 10444                           ;main.c: 176: unsigned char keypress = (PORTB & 0xF0) >> 4;
 10445  003A82  3881               	swapf	3969,w,c	;volatile
 10446  003A84  0B0F               	andlw	15
 10447  003A86  0B0F               	andlw	15
 10448  003A88  6E7E               	movwf	keypressed@keypress,c
 10449                           
 10450                           ;main.c: 177: INT1IF = 0;
 10451  003A8A  90F0               	bcf	intcon3,0,c	;volatile
 10452  003A8C                     i2l145:
 10453  003A8C  A281               	btfss	3969,1,c	;volatile
 10454  003A8E  D025               	goto	i2l6727
 10455  003A90  D7FD               	goto	i2l145
 10456  003A92                     i2l6705:
 10457                           
 10458                           ;main.c: 181: if (keypress < 4) {
 10459  003A92  0E04               	movlw	4
 10460  003A94  607E               	cpfslt	keypressed@keypress,c
 10461  003A96  D00E               	goto	i2l6713
 10462                           
 10463                           ;main.c: 182: mode = 2;
 10464  003A98  0E00               	movlw	0
 10465  003A9A  0100               	movlb	0	; () banked
 10466  003A9C  6FD7               	movwf	(_mode+1)& (0+255),b
 10467  003A9E  0E02               	movlw	2
 10468  003AA0  6FD6               	movwf	_mode& (0+255),b
 10469                           
 10470                           ; BSR set to: 0
 10471                           ;main.c: 183: PermLog(keypress);
 10472  003AA2  507E               	movf	keypressed@keypress,w,c
 10473  003AA4  ECD2  F023         	call	_PermLog
 10474                           
 10475                           ;main.c: 184: mode = 0;
 10476  003AA8  0E00               	movlw	0
 10477  003AAA  0100               	movlb	0	; () banked
 10478  003AAC  6FD7               	movwf	(_mode+1)& (0+255),b
 10479  003AAE  0E00               	movlw	0
 10480  003AB0  6FD6               	movwf	_mode& (0+255),b
 10481                           
 10482                           ;main.c: 185: } else {
 10483  003AB2  D024               	goto	i2l144
 10484  003AB4                     i2l6713:
 10485                           
 10486                           ;main.c: 186: mode = 1;
 10487  003AB4  0E00               	movlw	0
 10488  003AB6  0100               	movlb	0	; () banked
 10489  003AB8  6FD7               	movwf	(_mode+1)& (0+255),b
 10490  003ABA  0E01               	movlw	1
 10491  003ABC  6FD6               	movwf	_mode& (0+255),b
 10492                           
 10493                           ; BSR set to: 0
 10494                           ;main.c: 187: (INTCONbits.GIE = 1);
 10495  003ABE  8EF2               	bsf	intcon,7,c	;volatile
 10496                           
 10497                           ; BSR set to: 0
 10498                           ;main.c: 188: simulate();
 10499  003AC0  EC4A  F00F         	call	_simulate	;wreg free
 10500                           
 10501                           ;main.c: 189: (INTCONbits.GIE = 0);
 10502  003AC4  9EF2               	bcf	intcon,7,c	;volatile
 10503                           
 10504                           ;main.c: 190: }
 10505                           ;main.c: 191: break;
 10506  003AC6  D01A               	goto	i2l144
 10507  003AC8                     i2l6721:
 10508                           
 10509                           ;main.c: 193: mode = 3;
 10510  003AC8  0E00               	movlw	0
 10511  003ACA  0100               	movlb	0	; () banked
 10512  003ACC  6FD7               	movwf	(_mode+1)& (0+255),b
 10513  003ACE  0E03               	movlw	3
 10514  003AD0  6FD6               	movwf	_mode& (0+255),b
 10515                           
 10516                           ; BSR set to: 0
 10517                           ;main.c: 194: stopMoving(1);
 10518  003AD2  0E01               	movlw	1
 10519  003AD4  EC1A  F027         	call	_stopMoving
 10520                           
 10521                           ;main.c: 198: }
 10522                           
 10523                           ;main.c: 197: break;
 10524                           
 10525                           ;main.c: 196: default:
 10526                           
 10527                           ;main.c: 195: break;
 10528  003AD8  D011               	goto	i2l144
 10529  003ADA                     i2l6727:
 10530  003ADA  C0D6  F0A6         	movff	_mode,??_keypressed
 10531  003ADE  C0D7  F0A7         	movff	_mode+1,??_keypressed+1
 10532                           
 10533                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10534                           ; Switch size 1, requested type "space"
 10535                           ; Number of cases is 1, Range of values is 0 to 0
 10536                           ; switch strategies available:
 10537                           ; Name         Instructions Cycles
 10538                           ; simple_byte            4     3 (average)
 10539                           ;	Chosen strategy is simple_byte
 10540  003AE2  0100               	movlb	0	; () banked
 10541  003AE4  51A7               	movf	(??_keypressed+1)& (0+255),w,b
 10542  003AE6  0A00               	xorlw	0	; case 0
 10543  003AE8  A4D8               	btfss	status,2,c
 10544  003AEA  D008               	goto	i2l144
 10545                           
 10546                           ; BSR set to: 0
 10547                           ; Switch size 1, requested type "space"
 10548                           ; Number of cases is 2, Range of values is 0 to 1
 10549                           ; switch strategies available:
 10550                           ; Name         Instructions Cycles
 10551                           ; simple_byte            7     4 (average)
 10552                           ;	Chosen strategy is simple_byte
 10553  003AEC  0100               	movlb	0	; () banked
 10554  003AEE  51A6               	movf	??_keypressed& (0+255),w,b
 10555  003AF0  0A00               	xorlw	0	; case 0
 10556  003AF2  B4D8               	btfsc	status,2,c
 10557  003AF4  D7CE               	goto	i2l6705
 10558  003AF6  0A01               	xorlw	1	; case 1
 10559  003AF8  B4D8               	btfsc	status,2,c
 10560  003AFA  D7E6               	goto	i2l6721
 10561  003AFC                     i2l144:
 10562                           
 10563                           ;main.c: 199: }
 10564                           ;main.c: 200: (INTCONbits.GIE = 1);
 10565  003AFC  8EF2               	bsf	intcon,7,c	;volatile
 10566  003AFE  C0B5  FFF5         	movff	??_keypressed+15,tablat
 10567  003B02  C0B4  FFF8         	movff	??_keypressed+14,tblptru
 10568  003B06  C0B3  FFF7         	movff	??_keypressed+13,tblptrh
 10569  003B0A  C0B2  FFF6         	movff	??_keypressed+12,tblptrl
 10570  003B0E  C0B1  FFF4         	movff	??_keypressed+11,prodh
 10571  003B12  C0B0  FFF3         	movff	??_keypressed+10,prodl
 10572  003B16  C0AF  FFDA         	movff	??_keypressed+9,fsr2h
 10573  003B1A  C0AE  FFD9         	movff	??_keypressed+8,fsr2l
 10574  003B1E  C0AD  FFE2         	movff	??_keypressed+7,fsr1h
 10575  003B22  C0AC  FFE1         	movff	??_keypressed+6,fsr1l
 10576  003B26  C0AB  FFEA         	movff	??_keypressed+5,fsr0h
 10577  003B2A  C0AA  FFE9         	movff	??_keypressed+4,fsr0l
 10578  003B2E  C0A9  FFFB         	movff	??_keypressed+3,pclatu
 10579  003B32  C0A8  FFFA         	movff	??_keypressed+2,pclath
 10580  003B36  927F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10581  003B38  0011               	retfie		f
 10582  003B3A                     __end_of_keypressed:
 10583                           	opt stack 0
 10584                           pclatu	equ	0xFFB
 10585                           pclath	equ	0xFFA
 10586                           tblptru	equ	0xFF8
 10587                           tblptrh	equ	0xFF7
 10588                           tblptrl	equ	0xFF6
 10589                           tablat	equ	0xFF5
 10590                           prodh	equ	0xFF4
 10591                           prodl	equ	0xFF3
 10592                           intcon	equ	0xFF2
 10593                           intcon3	equ	0xFF0
 10594                           postinc0	equ	0xFEE
 10595                           fsr0h	equ	0xFEA
 10596                           fsr0l	equ	0xFE9
 10597                           wreg	equ	0xFE8
 10598                           fsr1h	equ	0xFE2
 10599                           fsr1l	equ	0xFE1
 10600                           indf2	equ	0xFDF
 10601                           postinc2	equ	0xFDE
 10602                           postdec2	equ	0xFDD
 10603                           fsr2h	equ	0xFDA
 10604                           fsr2l	equ	0xFD9
 10605                           status	equ	0xFD8
 10606                           
 10607 ;; *************** function _simulate *****************
 10608 ;; Defined at:
 10609 ;;		line 50 in file "main.c"
 10610 ;; Parameters:    Size  Location     Type
 10611 ;;		None
 10612 ;; Auto vars:     Size  Location     Type
 10613 ;;  portCCW         6   10[BANK0 ] int [3]
 10614 ;;  portCW          6    4[BANK0 ] int [3]
 10615 ;;  sorted          4   32[BANK0 ] unsigned char [4]
 10616 ;;  start           4   28[BANK0 ] unsigned int [2]
 10617 ;;  now             4   24[BANK0 ] unsigned int [2]
 10618 ;;  period          2   36[BANK0 ] unsigned int 
 10619 ;;  V9              2   22[BANK0 ] int 
 10620 ;;  C               2   20[BANK0 ] int 
 10621 ;;  AA              2   18[BANK0 ] int 
 10622 ;;  stop            2   16[BANK0 ] int 
 10623 ;; Return value:  Size  Location     Type
 10624 ;;                  1    wreg      void 
 10625 ;; Registers used:
 10626 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10627 ;; Tracked objects:
 10628 ;;		On entry : 0/0
 10629 ;;		On exit  : 0/0
 10630 ;;		Unchanged: 0/0
 10631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10633 ;;      Locals:         0      36       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10634 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10635 ;;      Totals:         0      38       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10636 ;;Total ram usage:       38 bytes
 10637 ;; Hardware stack levels used:    1
 10638 ;; Hardware stack levels required when called:    6
 10639 ;; This function calls:
 10640 ;;		_CCW90
 10641 ;;		_CW90
 10642 ;;		_HexDecToDec2
 10643 ;;		_WriteRun
 10644 ;;		_check9
 10645 ;;		_checkAA
 10646 ;;		_checkC
 10647 ;;		_showInfo
 10648 ;;		_stopMoving
 10649 ;;		i2___wmul
 10650 ;;		i2_getTime
 10651 ;;		i2_line0
 10652 ;;		i2_line1
 10653 ;;		i2_printf
 10654 ;; This function is called by:
 10655 ;;		_keypressed
 10656 ;; This function uses a non-reentrant model
 10657 ;;
 10658                           
 10659                           	psect	text38
 10660  001E94                     __ptext38:
 10661                           	opt stack 0
 10662  001E94                     _simulate:
 10663                           	opt stack 18
 10664                           
 10665                           ;main.c: 51: unsigned int now[] = {0, 0}, start[] = {0, 0};
 10666                           
 10667                           ;incstack = 0
 10668  001E94  C0D2  F098         	movff	simulate@F3102,simulate@now
 10669  001E98  C0D3  F099         	movff	simulate@F3102+1,simulate@now+1
 10670  001E9C  C0D4  F09A         	movff	simulate@F3102+2,simulate@now+2
 10671  001EA0  C0D5  F09B         	movff	simulate@F3102+3,simulate@now+3
 10672  001EA4  C0CE  F09C         	movff	simulate@F3104,simulate@start
 10673  001EA8  C0CF  F09D         	movff	simulate@F3104+1,simulate@start+1
 10674  001EAC  C0D0  F09E         	movff	simulate@F3104+2,simulate@start+2
 10675  001EB0  C0D1  F09F         	movff	simulate@F3104+3,simulate@start+3
 10676                           
 10677                           ;main.c: 52: unsigned char sorted[] = {0, 0, 0, 0};
 10678  001EB4  C0CA  F0A0         	movff	simulate@F3106,simulate@sorted
 10679  001EB8  C0CB  F0A1         	movff	simulate@F3106+1,simulate@sorted+1
 10680  001EBC  C0CC  F0A2         	movff	simulate@F3106+2,simulate@sorted+2
 10681  001EC0  C0CD  F0A3         	movff	simulate@F3106+3,simulate@sorted+3
 10682                           
 10683                           ;main.c: 53: unsigned int period = 0;
 10684  001EC4  0E00               	movlw	0
 10685  001EC6  0100               	movlb	0	; () banked
 10686  001EC8  6FA5               	movwf	(simulate@period+1)& (0+255),b
 10687  001ECA  0E00               	movlw	0
 10688  001ECC  6FA4               	movwf	simulate@period& (0+255),b
 10689                           
 10690                           ;main.c: 54: int stop = 0;
 10691  001ECE  0E00               	movlw	0
 10692  001ED0  0100               	movlb	0	; () banked
 10693  001ED2  6F91               	movwf	(simulate@stop+1)& (0+255),b
 10694  001ED4  0E00               	movlw	0
 10695  001ED6  6F90               	movwf	simulate@stop& (0+255),b
 10696                           
 10697                           ; BSR set to: 0
 10698                           ;main.c: 55: int AA, C, V9;
 10699                           ;main.c: 56: line0();
 10700  001ED8  ECBD  F028         	call	i2_line0	;wreg free
 10701                           
 10702                           ;main.c: 57: printf("Simulating...          ");
 10703  001EDC  0EF3               	movlw	low STR_2
 10704  001EDE  6E47               	movwf	i2printf@f,c
 10705  001EE0  0EFC               	movlw	high STR_2
 10706  001EE2  6E48               	movwf	i2printf@f+1,c
 10707  001EE4  EC09  F006         	call	i2_printf	;wreg free
 10708                           
 10709                           ;main.c: 58: start[0] = time[0];
 10710  001EE8  C0D9  F09C         	movff	_time,simulate@start
 10711  001EEC  0100               	movlb	0	; () banked
 10712  001EEE  6B9D               	clrf	(simulate@start+1)& (0+255),b
 10713                           
 10714                           ; BSR set to: 0
 10715                           ;main.c: 59: start[1] = time[1];
 10716  001EF0  C0DA  F09E         	movff	_time+1,simulate@start+2
 10717  001EF4  0100               	movlb	0	; () banked
 10718  001EF6  6B9F               	clrf	(simulate@start+3)& (0+255),b
 10719                           
 10720                           ; BSR set to: 0
 10721                           ;main.c: 60: LATC5 = 1;
 10722  001EF8  8A8B               	bsf	3979,5,c	;volatile
 10723                           
 10724                           ;main.c: 61: while (!stop) {
 10725  001EFA  D188               	goto	i2l6647
 10726  001EFC                     i2l6541:
 10727                           
 10728                           ; BSR set to: 0
 10729                           ;main.c: 63: AA = checkAA(sorted);
 10730  001EFC  0EA0               	movlw	low simulate@sorted
 10731  001EFE  6E79               	movwf	checkAA@sorted,c
 10732  001F00  0E00               	movlw	high simulate@sorted
 10733  001F02  6E7A               	movwf	checkAA@sorted+1,c
 10734  001F04  ECAB  F020         	call	_checkAA	;wreg free
 10735  001F08  C079  F092         	movff	?_checkAA,simulate@AA
 10736  001F0C  C07A  F093         	movff	?_checkAA+1,simulate@AA+1
 10737                           
 10738                           ;main.c: 65: C = checkC(sorted);
 10739  001F10  0EA0               	movlw	low simulate@sorted
 10740  001F12  6E79               	movwf	checkC@sorted,c
 10741  001F14  0E00               	movlw	high simulate@sorted
 10742  001F16  6E7A               	movwf	checkC@sorted+1,c
 10743  001F18  EC7D  F01F         	call	_checkC	;wreg free
 10744  001F1C  C079  F094         	movff	?_checkC,simulate@C
 10745  001F20  C07A  F095         	movff	?_checkC+1,simulate@C+1
 10746                           
 10747                           ;main.c: 67: V9 = check9(sorted);
 10748  001F24  0EA0               	movlw	low simulate@sorted
 10749  001F26  6E79               	movwf	check9@sorted,c
 10750  001F28  0E00               	movlw	high simulate@sorted
 10751  001F2A  6E7A               	movwf	check9@sorted+1,c
 10752  001F2C  ECE2  F01F         	call	_check9	;wreg free
 10753  001F30  C079  F096         	movff	?_check9,simulate@V9
 10754  001F34  C07A  F097         	movff	?_check9+1,simulate@V9+1
 10755                           
 10756                           ;main.c: 70: int portCW[] = {0, 0, 0};
 10757  001F38  EE20  F0BC         	lfsr	2,simulate@F3113
 10758  001F3C  EE10  F084         	lfsr	1,simulate@portCW
 10759  001F40  0E05               	movlw	5
 10760  001F42                     i2u689_41:
 10761  001F42  CFDB FFE3          	movff	plusw2,plusw1
 10762  001F46  06E8               	decf	wreg,f,c
 10763  001F48  E2FC               	bc	i2u689_41
 10764                           
 10765                           ;main.c: 71: int portCCW[] = {0, 0, 0};
 10766  001F4A  EE20  F0B6         	lfsr	2,simulate@F3115
 10767  001F4E  EE10  F08A         	lfsr	1,simulate@portCCW
 10768  001F52  0E05               	movlw	5
 10769  001F54                     i2u690_41:
 10770  001F54  CFDB FFE3          	movff	plusw2,plusw1
 10771  001F58  06E8               	decf	wreg,f,c
 10772  001F5A  E2FC               	bc	i2u690_41
 10773                           
 10774                           ;main.c: 73: if (!AA) {
 10775  001F5C  0100               	movlb	0	; () banked
 10776  001F5E  5192               	movf	simulate@AA& (0+255),w,b
 10777  001F60  0100               	movlb	0	; () banked
 10778  001F62  1193               	iorwf	(simulate@AA+1)& (0+255),w,b
 10779  001F64  A4D8               	btfss	status,2,c
 10780  001F66  D00E               	goto	i2l6555
 10781                           
 10782                           ; BSR set to: 0
 10783                           ;main.c: 74: portCCW[0] = 1;
 10784  001F68  0E00               	movlw	0
 10785  001F6A  0100               	movlb	0	; () banked
 10786  001F6C  6F8B               	movwf	(simulate@portCCW+1)& (0+255),b
 10787  001F6E  0E01               	movlw	1
 10788  001F70  6F8A               	movwf	simulate@portCCW& (0+255),b
 10789                           
 10790                           ; BSR set to: 0
 10791                           ;main.c: 75: line0();
 10792  001F72  ECBD  F028         	call	i2_line0	;wreg free
 10793                           
 10794                           ;main.c: 76: printf("AAServoLeft         ");
 10795  001F76  0E40               	movlw	low STR_3
 10796  001F78  6E47               	movwf	i2printf@f,c
 10797  001F7A  0EFE               	movlw	high STR_3
 10798  001F7C  6E48               	movwf	i2printf@f+1,c
 10799  001F7E  EC09  F006         	call	i2_printf	;wreg free
 10800                           
 10801                           ;main.c: 77: } else if (AA == 1) {
 10802  001F82  D01C               	goto	i2l6567
 10803  001F84                     i2l6555:
 10804  001F84  0100               	movlb	0	; () banked
 10805  001F86  0592               	decf	simulate@AA& (0+255),w,b
 10806  001F88  0100               	movlb	0	; () banked
 10807  001F8A  1193               	iorwf	(simulate@AA+1)& (0+255),w,b
 10808  001F8C  A4D8               	btfss	status,2,c
 10809  001F8E  D00E               	goto	i2l6563
 10810                           
 10811                           ; BSR set to: 0
 10812                           ;main.c: 78: portCW[0] = 1;
 10813  001F90  0E00               	movlw	0
 10814  001F92  0100               	movlb	0	; () banked
 10815  001F94  6F85               	movwf	(simulate@portCW+1)& (0+255),b
 10816  001F96  0E01               	movlw	1
 10817  001F98  6F84               	movwf	simulate@portCW& (0+255),b
 10818                           
 10819                           ; BSR set to: 0
 10820                           ;main.c: 79: line0();
 10821  001F9A  ECBD  F028         	call	i2_line0	;wreg free
 10822                           
 10823                           ;main.c: 80: printf("AAServoRight         ");
 10824  001F9E  0EAC               	movlw	low STR_4
 10825  001FA0  6E47               	movwf	i2printf@f,c
 10826  001FA2  0EFD               	movlw	high STR_4
 10827  001FA4  6E48               	movwf	i2printf@f+1,c
 10828  001FA6  EC09  F006         	call	i2_printf	;wreg free
 10829                           
 10830                           ;main.c: 81: } else {
 10831  001FAA  D008               	goto	i2l6567
 10832  001FAC                     i2l6563:
 10833                           
 10834                           ;main.c: 82: line0();
 10835  001FAC  ECBD  F028         	call	i2_line0	;wreg free
 10836                           
 10837                           ;main.c: 83: printf("AAServoStays         ");
 10838  001FB0  0E96               	movlw	low STR_5
 10839  001FB2  6E47               	movwf	i2printf@f,c
 10840  001FB4  0EFD               	movlw	high STR_5
 10841  001FB6  6E48               	movwf	i2printf@f+1,c
 10842  001FB8  EC09  F006         	call	i2_printf	;wreg free
 10843  001FBC                     i2l6567:
 10844                           
 10845                           ;main.c: 84: }
 10846                           ;main.c: 87: if (!C) {
 10847  001FBC  0100               	movlb	0	; () banked
 10848  001FBE  5194               	movf	simulate@C& (0+255),w,b
 10849  001FC0  0100               	movlb	0	; () banked
 10850  001FC2  1195               	iorwf	(simulate@C+1)& (0+255),w,b
 10851  001FC4  A4D8               	btfss	status,2,c
 10852  001FC6  D00E               	goto	i2l6575
 10853                           
 10854                           ; BSR set to: 0
 10855                           ;main.c: 88: portCCW[1] = 1;
 10856  001FC8  0E00               	movlw	0
 10857  001FCA  0100               	movlb	0	; () banked
 10858  001FCC  6F8D               	movwf	(simulate@portCCW+3)& (0+255),b
 10859  001FCE  0E01               	movlw	1
 10860  001FD0  6F8C               	movwf	(simulate@portCCW+2)& (0+255),b
 10861                           
 10862                           ; BSR set to: 0
 10863                           ;main.c: 89: line1();
 10864  001FD2  ECB9  F028         	call	i2_line1	;wreg free
 10865                           
 10866                           ;main.c: 90: printf("CServoLeft         ");
 10867  001FD6  0EF9               	movlw	low STR_6
 10868  001FD8  6E47               	movwf	i2printf@f,c
 10869  001FDA  0EFE               	movlw	high STR_6
 10870  001FDC  6E48               	movwf	i2printf@f+1,c
 10871  001FDE  EC09  F006         	call	i2_printf	;wreg free
 10872                           
 10873                           ;main.c: 91: } else if (C == 1) {
 10874  001FE2  D01C               	goto	i2l6587
 10875  001FE4                     i2l6575:
 10876  001FE4  0100               	movlb	0	; () banked
 10877  001FE6  0594               	decf	simulate@C& (0+255),w,b
 10878  001FE8  0100               	movlb	0	; () banked
 10879  001FEA  1195               	iorwf	(simulate@C+1)& (0+255),w,b
 10880  001FEC  A4D8               	btfss	status,2,c
 10881  001FEE  D00E               	goto	i2l6583
 10882                           
 10883                           ; BSR set to: 0
 10884                           ;main.c: 92: portCW[1] = 1;
 10885  001FF0  0E00               	movlw	0
 10886  001FF2  0100               	movlb	0	; () banked
 10887  001FF4  6F87               	movwf	(simulate@portCW+3)& (0+255),b
 10888  001FF6  0E01               	movlw	1
 10889  001FF8  6F86               	movwf	(simulate@portCW+2)& (0+255),b
 10890                           
 10891                           ; BSR set to: 0
 10892                           ;main.c: 93: line1();
 10893  001FFA  ECB9  F028         	call	i2_line1	;wreg free
 10894                           
 10895                           ;main.c: 94: printf("CServoRight         ");
 10896  001FFE  0E6A               	movlw	low STR_7
 10897  002000  6E47               	movwf	i2printf@f,c
 10898  002002  0EFE               	movlw	high STR_7
 10899  002004  6E48               	movwf	i2printf@f+1,c
 10900  002006  EC09  F006         	call	i2_printf	;wreg free
 10901                           
 10902                           ;main.c: 95: } else {
 10903  00200A  D008               	goto	i2l6587
 10904  00200C                     i2l6583:
 10905                           
 10906                           ;main.c: 96: line1();
 10907  00200C  ECB9  F028         	call	i2_line1	;wreg free
 10908                           
 10909                           ;main.c: 97: printf("CServoStays         ");
 10910  002010  0E2B               	movlw	low STR_8
 10911  002012  6E47               	movwf	i2printf@f,c
 10912  002014  0EFE               	movlw	high STR_8
 10913  002016  6E48               	movwf	i2printf@f+1,c
 10914  002018  EC09  F006         	call	i2_printf	;wreg free
 10915  00201C                     i2l6587:
 10916                           
 10917                           ;main.c: 98: }
 10918                           ;main.c: 101: if (!V9) {
 10919  00201C  0100               	movlb	0	; () banked
 10920  00201E  5196               	movf	simulate@V9& (0+255),w,b
 10921  002020  0100               	movlb	0	; () banked
 10922  002022  1197               	iorwf	(simulate@V9+1)& (0+255),w,b
 10923  002024  A4D8               	btfss	status,2,c
 10924  002026  D00E               	goto	i2l6595
 10925                           
 10926                           ; BSR set to: 0
 10927                           ;main.c: 102: portCCW[2] = 1;
 10928  002028  0E00               	movlw	0
 10929  00202A  0100               	movlb	0	; () banked
 10930  00202C  6F8F               	movwf	(simulate@portCCW+5)& (0+255),b
 10931  00202E  0E01               	movlw	1
 10932  002030  6F8E               	movwf	(simulate@portCCW+4)& (0+255),b
 10933                           
 10934                           ; BSR set to: 0
 10935                           ;main.c: 103: line0();
 10936  002032  ECBD  F028         	call	i2_line0	;wreg free
 10937                           
 10938                           ;main.c: 104: printf("9ServoLeft         ");
 10939  002036  0EE5               	movlw	low STR_9
 10940  002038  6E47               	movwf	i2printf@f,c
 10941  00203A  0EFE               	movlw	high STR_9
 10942  00203C  6E48               	movwf	i2printf@f+1,c
 10943  00203E  EC09  F006         	call	i2_printf	;wreg free
 10944                           
 10945                           ;main.c: 105: } else if (V9 == 1) {
 10946  002042  D01C               	goto	i2l6607
 10947  002044                     i2l6595:
 10948  002044  0100               	movlb	0	; () banked
 10949  002046  0596               	decf	simulate@V9& (0+255),w,b
 10950  002048  0100               	movlb	0	; () banked
 10951  00204A  1197               	iorwf	(simulate@V9+1)& (0+255),w,b
 10952  00204C  A4D8               	btfss	status,2,c
 10953  00204E  D00E               	goto	i2l6603
 10954                           
 10955                           ; BSR set to: 0
 10956                           ;main.c: 106: portCW[2] = 1;
 10957  002050  0E00               	movlw	0
 10958  002052  0100               	movlb	0	; () banked
 10959  002054  6F89               	movwf	(simulate@portCW+5)& (0+255),b
 10960  002056  0E01               	movlw	1
 10961  002058  6F88               	movwf	(simulate@portCW+4)& (0+255),b
 10962                           
 10963                           ; BSR set to: 0
 10964                           ;main.c: 107: line0();
 10965  00205A  ECBD  F028         	call	i2_line0	;wreg free
 10966                           
 10967                           ;main.c: 108: printf("9ServoRight         ");
 10968  00205E  0E55               	movlw	low STR_10
 10969  002060  6E47               	movwf	i2printf@f,c
 10970  002062  0EFE               	movlw	high STR_10
 10971  002064  6E48               	movwf	i2printf@f+1,c
 10972  002066  EC09  F006         	call	i2_printf	;wreg free
 10973                           
 10974                           ;main.c: 109: } else {
 10975  00206A  D008               	goto	i2l6607
 10976  00206C                     i2l6603:
 10977                           
 10978                           ;main.c: 110: line0();
 10979  00206C  ECBD  F028         	call	i2_line0	;wreg free
 10980                           
 10981                           ;main.c: 111: printf("9ServoStays         ");
 10982  002070  0E16               	movlw	low STR_11
 10983  002072  6E47               	movwf	i2printf@f,c
 10984  002074  0EFE               	movlw	high STR_11
 10985  002076  6E48               	movwf	i2printf@f+1,c
 10986  002078  EC09  F006         	call	i2_printf	;wreg free
 10987  00207C                     i2l6607:
 10988                           
 10989                           ;main.c: 112: }
 10990                           ;main.c: 115: CCW90(portCCW);
 10991  00207C  0E8A               	movlw	low simulate@portCCW
 10992  00207E  6E71               	movwf	CCW90@port,c
 10993  002080  0E00               	movlw	high simulate@portCCW
 10994  002082  6E72               	movwf	CCW90@port+1,c
 10995  002084  EC7B  F027         	call	_CCW90	;wreg free
 10996                           
 10997                           ;main.c: 116: CW90(portCW);
 10998  002088  0E84               	movlw	low simulate@portCW
 10999  00208A  6E71               	movwf	CW90@port,c
 11000  00208C  0E00               	movlw	high simulate@portCW
 11001  00208E  6E72               	movwf	CW90@port+1,c
 11002  002090  EC64  F027         	call	_CW90	;wreg free
 11003                           
 11004                           ;main.c: 117: LATC0 = 0;
 11005  002094  908B               	bcf	3979,0,c	;volatile
 11006                           
 11007                           ;main.c: 118: LATC1 = 0;
 11008  002096  928B               	bcf	3979,1,c	;volatile
 11009                           
 11010                           ;main.c: 119: LATC2 = 0;
 11011  002098  948B               	bcf	3979,2,c	;volatile
 11012                           
 11013                           ;main.c: 122: if (sorted[0] + sorted[1] + sorted[2] + sorted[3] >= 10) {
 11014  00209A  0100               	movlb	0	; () banked
 11015  00209C  51A1               	movf	(simulate@sorted+1)& (0+255),w,b
 11016  00209E  C0A0  F080         	movff	simulate@sorted,??_simulate
 11017  0020A2  0100               	movlb	0	; () banked
 11018  0020A4  6B81               	clrf	(??_simulate+1)& (0+255),b
 11019  0020A6  0100               	movlb	0	; () banked
 11020  0020A8  2780               	addwf	??_simulate& (0+255),f,b
 11021  0020AA  0E00               	movlw	0
 11022  0020AC  2381               	addwfc	(??_simulate+1)& (0+255),f,b
 11023  0020AE  0100               	movlb	0	; () banked
 11024  0020B0  51A2               	movf	(simulate@sorted+2)& (0+255),w,b
 11025  0020B2  0100               	movlb	0	; () banked
 11026  0020B4  2780               	addwf	??_simulate& (0+255),f,b
 11027  0020B6  0E00               	movlw	0
 11028  0020B8  2381               	addwfc	(??_simulate+1)& (0+255),f,b
 11029  0020BA  0100               	movlb	0	; () banked
 11030  0020BC  51A3               	movf	(simulate@sorted+3)& (0+255),w,b
 11031  0020BE  0100               	movlb	0	; () banked
 11032  0020C0  2780               	addwf	??_simulate& (0+255),f,b
 11033  0020C2  0E00               	movlw	0
 11034  0020C4  2381               	addwfc	(??_simulate+1)& (0+255),f,b
 11035  0020C6  0100               	movlb	0	; () banked
 11036  0020C8  BF81               	btfsc	(??_simulate+1)& (0+255),7,b
 11037  0020CA  D00D               	goto	i2l6621
 11038  0020CC  0100               	movlb	0	; () banked
 11039  0020CE  5181               	movf	(??_simulate+1)& (0+255),w,b
 11040  0020D0  E105               	bnz	i2u697_40
 11041  0020D2  0E0A               	movlw	10
 11042  0020D4  0100               	movlb	0	; () banked
 11043  0020D6  5D80               	subwf	??_simulate& (0+255),w,b
 11044  0020D8  A0D8               	btfss	status,0,c
 11045  0020DA  D005               	goto	i2l6621
 11046  0020DC                     i2u697_40:
 11047                           
 11048                           ; BSR set to: 0
 11049                           ;main.c: 123: stop = 1;
 11050  0020DC  0E00               	movlw	0
 11051  0020DE  0100               	movlb	0	; () banked
 11052  0020E0  6F91               	movwf	(simulate@stop+1)& (0+255),b
 11053  0020E2  0E01               	movlw	1
 11054  0020E4  6F90               	movwf	simulate@stop& (0+255),b
 11055  0020E6                     i2l6621:
 11056                           
 11057                           ; BSR set to: 0
 11058                           ;main.c: 124: }
 11059                           ;main.c: 125: getTime(time);
 11060  0020E6  0ED9               	movlw	low _time
 11061  0020E8  6E04               	movwf	i2getTime@time,c
 11062  0020EA  0E00               	movlw	high _time
 11063  0020EC  6E05               	movwf	i2getTime@time+1,c
 11064  0020EE  ECCE  F024         	call	i2_getTime	;wreg free
 11065                           
 11066                           ;main.c: 126: now[0] = time[0];
 11067  0020F2  C0D9  F098         	movff	_time,simulate@now
 11068  0020F6  0100               	movlb	0	; () banked
 11069  0020F8  6B99               	clrf	(simulate@now+1)& (0+255),b
 11070                           
 11071                           ; BSR set to: 0
 11072                           ;main.c: 127: now[1] = time[1];
 11073  0020FA  C0DA  F09A         	movff	_time+1,simulate@now+2
 11074  0020FE  0100               	movlb	0	; () banked
 11075  002100  6B9B               	clrf	(simulate@now+3)& (0+255),b
 11076                           
 11077                           ; BSR set to: 0
 11078                           ;main.c: 128: line0();
 11079  002102  ECBD  F028         	call	i2_line0	;wreg free
 11080                           
 11081                           ;main.c: 129: printf("start %02x:%02x     ", start[1], start[0]);
 11082  002106  0E94               	movlw	low STR_12
 11083  002108  6E47               	movwf	i2printf@f,c
 11084  00210A  0EFE               	movlw	high STR_12
 11085  00210C  6E48               	movwf	i2printf@f+1,c
 11086  00210E  C09E  F049         	movff	simulate@start+2,?i2_printf+2
 11087  002112  C09F  F04A         	movff	simulate@start+3,?i2_printf+3
 11088  002116  C09C  F04B         	movff	simulate@start,?i2_printf+4
 11089  00211A  C09D  F04C         	movff	simulate@start+1,?i2_printf+5
 11090  00211E  EC09  F006         	call	i2_printf	;wreg free
 11091                           
 11092                           ;main.c: 130: line1();
 11093  002122  ECB9  F028         	call	i2_line1	;wreg free
 11094                           
 11095                           ;main.c: 131: printf("now %02x:%02x       ", now[1], now[0]);
 11096  002126  0E7F               	movlw	low STR_13
 11097  002128  6E47               	movwf	i2printf@f,c
 11098  00212A  0EFE               	movlw	high STR_13
 11099  00212C  6E48               	movwf	i2printf@f+1,c
 11100  00212E  C09A  F049         	movff	simulate@now+2,?i2_printf+2
 11101  002132  C09B  F04A         	movff	simulate@now+3,?i2_printf+3
 11102  002136  C098  F04B         	movff	simulate@now,?i2_printf+4
 11103  00213A  C099  F04C         	movff	simulate@now+1,?i2_printf+5
 11104  00213E  EC09  F006         	call	i2_printf	;wreg free
 11105                           
 11106                           ;main.c: 132: period = (HexDecToDec2(now[1]) - HexDecToDec2(start[1]))*60 + HexDecToDec2
      +                          (now[0]) - HexDecToDec2(start[0]);
 11107  002142  C09A  F015         	movff	simulate@now+2,HexDecToDec2@hex
 11108  002146  C09B  F016         	movff	simulate@now+3,HexDecToDec2@hex+1
 11109  00214A  EC7C  F026         	call	_HexDecToDec2	;wreg free
 11110  00214E  C015  F080         	movff	?_HexDecToDec2,??_simulate
 11111  002152  C016  F081         	movff	?_HexDecToDec2+1,??_simulate+1
 11112  002156  C09E  F015         	movff	simulate@start+2,HexDecToDec2@hex
 11113  00215A  C09F  F016         	movff	simulate@start+3,HexDecToDec2@hex+1
 11114  00215E  EC7C  F026         	call	_HexDecToDec2	;wreg free
 11115  002162  1E15               	comf	?_HexDecToDec2,f,c
 11116  002164  1E16               	comf	?_HexDecToDec2+1,f,c
 11117  002166  4A15               	infsnz	?_HexDecToDec2,f,c
 11118  002168  2A16               	incf	?_HexDecToDec2+1,f,c
 11119  00216A  5015               	movf	?_HexDecToDec2,w,c
 11120  00216C  0100               	movlb	0	; () banked
 11121  00216E  2580               	addwf	??_simulate& (0+255),w,b
 11122  002170  0100               	movlb	0	; () banked
 11123  002172  6F82               	movwf	_simulate$1664& (0+255),b
 11124  002174  5016               	movf	?_HexDecToDec2+1,w,c
 11125  002176  0100               	movlb	0	; () banked
 11126  002178  2181               	addwfc	(??_simulate+1)& (0+255),w,b
 11127  00217A  0100               	movlb	0	; () banked
 11128  00217C  6F83               	movwf	(_simulate$1664+1)& (0+255),b
 11129                           
 11130                           ; BSR set to: 0
 11131                           ;main.c: 132: period = (HexDecToDec2(now[1]) - HexDecToDec2(start[1]))*60 + HexDecToDec2
      +                          (now[0]) - HexDecToDec2(start[0]);
 11132  00217E  C082  F00F         	movff	_simulate$1664,i2___wmul@multiplier
 11133  002182  C083  F010         	movff	_simulate$1664+1,i2___wmul@multiplier+1
 11134  002186  0E00               	movlw	0
 11135  002188  6E12               	movwf	i2___wmul@multiplicand+1,c
 11136  00218A  0E3C               	movlw	60
 11137  00218C  6E11               	movwf	i2___wmul@multiplicand,c
 11138  00218E  ECE2  F027         	call	i2___wmul	;wreg free
 11139  002192  C00F  F080         	movff	?i2___wmul,??_simulate
 11140  002196  C010  F081         	movff	?i2___wmul+1,??_simulate+1
 11141  00219A  C098  F015         	movff	simulate@now,HexDecToDec2@hex
 11142  00219E  C099  F016         	movff	simulate@now+1,HexDecToDec2@hex+1
 11143  0021A2  EC7C  F026         	call	_HexDecToDec2	;wreg free
 11144  0021A6  5015               	movf	?_HexDecToDec2,w,c
 11145  0021A8  0100               	movlb	0	; () banked
 11146  0021AA  2780               	addwf	??_simulate& (0+255),f,b
 11147  0021AC  5016               	movf	?_HexDecToDec2+1,w,c
 11148  0021AE  0100               	movlb	0	; () banked
 11149  0021B0  2381               	addwfc	(??_simulate+1)& (0+255),f,b
 11150  0021B2  C09C  F015         	movff	simulate@start,HexDecToDec2@hex
 11151  0021B6  C09D  F016         	movff	simulate@start+1,HexDecToDec2@hex+1
 11152  0021BA  EC7C  F026         	call	_HexDecToDec2	;wreg free
 11153  0021BE  1E15               	comf	?_HexDecToDec2,f,c
 11154  0021C0  1E16               	comf	?_HexDecToDec2+1,f,c
 11155  0021C2  4A15               	infsnz	?_HexDecToDec2,f,c
 11156  0021C4  2A16               	incf	?_HexDecToDec2+1,f,c
 11157  0021C6  5015               	movf	?_HexDecToDec2,w,c
 11158  0021C8  0100               	movlb	0	; () banked
 11159  0021CA  2580               	addwf	??_simulate& (0+255),w,b
 11160  0021CC  0100               	movlb	0	; () banked
 11161  0021CE  6FA4               	movwf	simulate@period& (0+255),b
 11162  0021D0  5016               	movf	?_HexDecToDec2+1,w,c
 11163  0021D2  0100               	movlb	0	; () banked
 11164  0021D4  2181               	addwfc	(??_simulate+1)& (0+255),w,b
 11165  0021D6  0100               	movlb	0	; () banked
 11166  0021D8  6FA5               	movwf	(simulate@period+1)& (0+255),b
 11167                           
 11168                           ; BSR set to: 0
 11169                           ;main.c: 133: line1();
 11170  0021DA  ECB9  F028         	call	i2_line1	;wreg free
 11171                           
 11172                           ;main.c: 134: printf("Period: %u      ", period);
 11173  0021DE  0E66               	movlw	low STR_14
 11174  0021E0  6E47               	movwf	i2printf@f,c
 11175  0021E2  0EFF               	movlw	high STR_14
 11176  0021E4  6E48               	movwf	i2printf@f+1,c
 11177  0021E6  C0A4  F049         	movff	simulate@period,?i2_printf+2
 11178  0021EA  C0A5  F04A         	movff	simulate@period+1,?i2_printf+3
 11179  0021EE  EC09  F006         	call	i2_printf	;wreg free
 11180                           
 11181                           ;main.c: 135: if (period > 20) {
 11182  0021F2  0100               	movlb	0	; () banked
 11183  0021F4  51A5               	movf	(simulate@period+1)& (0+255),w,b
 11184  0021F6  E105               	bnz	i2u698_40
 11185  0021F8  0E15               	movlw	21
 11186  0021FA  0100               	movlb	0	; () banked
 11187  0021FC  5DA4               	subwf	simulate@period& (0+255),w,b
 11188  0021FE  A0D8               	btfss	status,0,c
 11189  002200  D005               	goto	i2l6647
 11190  002202                     i2u698_40:
 11191                           
 11192                           ; BSR set to: 0
 11193                           ;main.c: 136: stop = 1;
 11194  002202  0E00               	movlw	0
 11195  002204  0100               	movlb	0	; () banked
 11196  002206  6F91               	movwf	(simulate@stop+1)& (0+255),b
 11197  002208  0E01               	movlw	1
 11198  00220A  6F90               	movwf	simulate@stop& (0+255),b
 11199  00220C                     i2l6647:
 11200                           
 11201                           ; BSR set to: 0
 11202  00220C  0100               	movlb	0	; () banked
 11203  00220E  5190               	movf	simulate@stop& (0+255),w,b
 11204  002210  0100               	movlb	0	; () banked
 11205  002212  1191               	iorwf	(simulate@stop+1)& (0+255),w,b
 11206  002214  B4D8               	btfsc	status,2,c
 11207  002216  D672               	goto	i2l6541
 11208                           
 11209                           ; BSR set to: 0
 11210                           ;main.c: 137: }
 11211                           ;main.c: 138: }
 11212                           ;main.c: 140: mode = 2;
 11213                           
 11214                           ; BSR set to: 0
 11215  002218  0E00               	movlw	0
 11216  00221A  0100               	movlb	0	; () banked
 11217  00221C  6FD7               	movwf	(_mode+1)& (0+255),b
 11218  00221E  0E02               	movlw	2
 11219  002220  6FD6               	movwf	_mode& (0+255),b
 11220                           
 11221                           ; BSR set to: 0
 11222                           ;main.c: 141: stopMoving(0);
 11223  002222  0E00               	movlw	0
 11224  002224  EC1A  F027         	call	_stopMoving
 11225                           
 11226                           ;main.c: 142: line1();
 11227  002228  ECB9  F028         	call	i2_line1	;wreg free
 11228                           
 11229                           ;main.c: 143: printf("Sorting Complete          ");
 11230  00222C  0E77               	movlw	low STR_15
 11231  00222E  6E47               	movwf	i2printf@f,c
 11232  002230  0EFC               	movlw	high STR_15
 11233  002232  6E48               	movwf	i2printf@f+1,c
 11234  002234  EC09  F006         	call	i2_printf	;wreg free
 11235                           
 11236                           ;main.c: 144: showInfo(period, sorted);
 11237  002238  C0A4  F071         	movff	simulate@period,showInfo@time
 11238  00223C  C0A5  F072         	movff	simulate@period+1,showInfo@time+1
 11239  002240  0EA0               	movlw	low simulate@sorted
 11240  002242  6E73               	movwf	showInfo@sorted,c
 11241  002244  0E00               	movlw	high simulate@sorted
 11242  002246  6E74               	movwf	showInfo@sorted+1,c
 11243  002248  ECE3  F014         	call	_showInfo	;wreg free
 11244                           
 11245                           ;main.c: 145: WriteRun(sorted, period);
 11246  00224C  0EA0               	movlw	low simulate@sorted
 11247  00224E  6E15               	movwf	WriteRun@sorted,c
 11248  002250  0E00               	movlw	high simulate@sorted
 11249  002252  6E16               	movwf	WriteRun@sorted+1,c
 11250  002254  C0A4  F017         	movff	simulate@period,WriteRun@time
 11251  002258  C0A5  F018         	movff	simulate@period+1,WriteRun@time+1
 11252  00225C  EC56  F018         	call	_WriteRun	;wreg free
 11253                           
 11254                           ;main.c: 146: mode = 0;
 11255  002260  0E00               	movlw	0
 11256  002262  0100               	movlb	0	; () banked
 11257  002264  6FD7               	movwf	(_mode+1)& (0+255),b
 11258  002266  0E00               	movlw	0
 11259  002268  6FD6               	movwf	_mode& (0+255),b
 11260                           
 11261                           ; BSR set to: 0
 11262  00226A  0012               	return		;funcret
 11263  00226C                     __end_of_simulate:
 11264                           	opt stack 0
 11265                           pclatu	equ	0xFFB
 11266                           pclath	equ	0xFFA
 11267                           tblptru	equ	0xFF8
 11268                           tblptrh	equ	0xFF7
 11269                           tblptrl	equ	0xFF6
 11270                           tablat	equ	0xFF5
 11271                           prodh	equ	0xFF4
 11272                           prodl	equ	0xFF3
 11273                           intcon	equ	0xFF2
 11274                           intcon3	equ	0xFF0
 11275                           postinc0	equ	0xFEE
 11276                           fsr0h	equ	0xFEA
 11277                           fsr0l	equ	0xFE9
 11278                           wreg	equ	0xFE8
 11279                           plusw1	equ	0xFE3
 11280                           fsr1h	equ	0xFE2
 11281                           fsr1l	equ	0xFE1
 11282                           indf2	equ	0xFDF
 11283                           postinc2	equ	0xFDE
 11284                           postdec2	equ	0xFDD
 11285                           plusw2	equ	0xFDB
 11286                           fsr2h	equ	0xFDA
 11287                           fsr2l	equ	0xFD9
 11288                           status	equ	0xFD8
 11289                           
 11290 ;; *************** function i2_getTime *****************
 11291 ;; Defined at:
 11292 ;;		line 77 in file "modules.c"
 11293 ;; Parameters:    Size  Location     Type
 11294 ;;  time            2    3[COMRAM] PTR unsigned char 
 11295 ;;		 -> time(7), 
 11296 ;; Auto vars:     Size  Location     Type
 11297 ;;  getTime         1    5[COMRAM] unsigned char 
 11298 ;; Return value:  Size  Location     Type
 11299 ;;                  1    wreg      void 
 11300 ;; Registers used:
 11301 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11302 ;; Tracked objects:
 11303 ;;		On entry : 0/0
 11304 ;;		On exit  : 0/0
 11305 ;;		Unchanged: 0/0
 11306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11307 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11308 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11310 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11311 ;;Total ram usage:        3 bytes
 11312 ;; Hardware stack levels used:    1
 11313 ;; Hardware stack levels required when called:    2
 11314 ;; This function calls:
 11315 ;;		i2_I2C_Master_Read
 11316 ;;		i2_I2C_Master_Start
 11317 ;;		i2_I2C_Master_Stop
 11318 ;;		i2_I2C_Master_Write
 11319 ;; This function is called by:
 11320 ;;		_simulate
 11321 ;; This function uses a non-reentrant model
 11322 ;;
 11323                           
 11324                           	psect	text39
 11325  00499C                     __ptext39:
 11326                           	opt stack 0
 11327  00499C                     i2_getTime:
 11328                           	opt stack 21
 11329                           
 11330                           ;modules.c: 78: (INTCONbits.GIE = 0);
 11331                           
 11332                           ; BSR set to: 0
 11333                           ;incstack = 0
 11334  00499C  9EF2               	bcf	intcon,7,c	;volatile
 11335                           
 11336                           ;modules.c: 82: I2C_Master_Start();
 11337  00499E  ECB5  F028         	call	i2_I2C_Master_Start	;wreg free
 11338                           
 11339                           ;modules.c: 83: I2C_Master_Write(0b11010000);
 11340  0049A2  0E00               	movlw	0
 11341  0049A4  6E03               	movwf	i2I2C_Master_Write@d+1,c
 11342  0049A6  0ED0               	movlw	208
 11343  0049A8  6E02               	movwf	i2I2C_Master_Write@d,c
 11344  0049AA  EC9C  F028         	call	i2_I2C_Master_Write	;wreg free
 11345                           
 11346                           ;modules.c: 84: I2C_Master_Write(0x00);
 11347  0049AE  0E00               	movlw	0
 11348  0049B0  6E03               	movwf	i2I2C_Master_Write@d+1,c
 11349  0049B2  0E00               	movlw	0
 11350  0049B4  6E02               	movwf	i2I2C_Master_Write@d,c
 11351  0049B6  EC9C  F028         	call	i2_I2C_Master_Write	;wreg free
 11352                           
 11353                           ;modules.c: 85: I2C_Master_Stop();
 11354  0049BA  ECB1  F028         	call	i2_I2C_Master_Stop	;wreg free
 11355                           
 11356                           ;modules.c: 88: I2C_Master_Start();
 11357  0049BE  ECB5  F028         	call	i2_I2C_Master_Start	;wreg free
 11358                           
 11359                           ;modules.c: 89: I2C_Master_Write(0b11010001);
 11360  0049C2  0E00               	movlw	0
 11361  0049C4  6E03               	movwf	i2I2C_Master_Write@d+1,c
 11362  0049C6  0ED1               	movlw	209
 11363  0049C8  6E02               	movwf	i2I2C_Master_Write@d,c
 11364  0049CA  EC9C  F028         	call	i2_I2C_Master_Write	;wreg free
 11365                           
 11366                           ;modules.c: 90: for (unsigned char i = 0; i < 0x06; i++) {
 11367  0049CE  0E00               	movlw	0
 11368  0049D0  6E06               	movwf	i2getTime@i,c
 11369  0049D2                     i2l6493:
 11370  0049D2  0E05               	movlw	5
 11371  0049D4  6406               	cpfsgt	i2getTime@i,c
 11372  0049D6  D001               	goto	i2l6497
 11373  0049D8  D00E               	goto	i2l6503
 11374  0049DA                     i2l6497:
 11375                           
 11376                           ;modules.c: 91: time[i] = I2C_Master_Read(1);
 11377  0049DA  5006               	movf	i2getTime@i,w,c
 11378  0049DC  0D01               	mullw	1
 11379  0049DE  50F3               	movf	prodl,w,c
 11380  0049E0  2404               	addwf	i2getTime@time,w,c
 11381  0049E2  6ED9               	movwf	fsr2l,c
 11382  0049E4  50F4               	movf	prodh,w,c
 11383  0049E6  2005               	addwfc	i2getTime@time+1,w,c
 11384  0049E8  6EDA               	movwf	fsr2h,c
 11385  0049EA  0E01               	movlw	1
 11386  0049EC  ECBC  F027         	call	i2_I2C_Master_Read
 11387  0049F0  6EDF               	movwf	indf2,c
 11388  0049F2  2A06               	incf	i2getTime@i,f,c
 11389  0049F4  D7EE               	goto	i2l6493
 11390  0049F6                     i2l6503:
 11391                           
 11392                           ;modules.c: 92: }
 11393                           ;modules.c: 93: time[6] = I2C_Master_Read(0);
 11394  0049F6  EE20 F006          	lfsr	2,6
 11395  0049FA  5004               	movf	i2getTime@time,w,c
 11396  0049FC  26D9               	addwf	fsr2l,f,c
 11397  0049FE  5005               	movf	i2getTime@time+1,w,c
 11398  004A00  22DA               	addwfc	fsr2h,f,c
 11399  004A02  0E00               	movlw	0
 11400  004A04  ECBC  F027         	call	i2_I2C_Master_Read
 11401  004A08  6EDF               	movwf	indf2,c
 11402                           
 11403                           ;modules.c: 94: I2C_Master_Stop();
 11404  004A0A  ECB1  F028         	call	i2_I2C_Master_Stop	;wreg free
 11405                           
 11406                           ;modules.c: 95: (INTCONbits.GIE = 1);
 11407  004A0E  8EF2               	bsf	intcon,7,c	;volatile
 11408  004A10  0012               	return		;funcret
 11409  004A12                     __end_ofi2_getTime:
 11410                           	opt stack 0
 11411                           pclatu	equ	0xFFB
 11412                           pclath	equ	0xFFA
 11413                           tblptru	equ	0xFF8
 11414                           tblptrh	equ	0xFF7
 11415                           tblptrl	equ	0xFF6
 11416                           tablat	equ	0xFF5
 11417                           prodh	equ	0xFF4
 11418                           prodl	equ	0xFF3
 11419                           intcon	equ	0xFF2
 11420                           intcon3	equ	0xFF0
 11421                           postinc0	equ	0xFEE
 11422                           fsr0h	equ	0xFEA
 11423                           fsr0l	equ	0xFE9
 11424                           wreg	equ	0xFE8
 11425                           plusw1	equ	0xFE3
 11426                           fsr1h	equ	0xFE2
 11427                           fsr1l	equ	0xFE1
 11428                           indf2	equ	0xFDF
 11429                           postinc2	equ	0xFDE
 11430                           postdec2	equ	0xFDD
 11431                           plusw2	equ	0xFDB
 11432                           fsr2h	equ	0xFDA
 11433                           fsr2l	equ	0xFD9
 11434                           status	equ	0xFD8
 11435                           
 11436 ;; *************** function i2_I2C_Master_Write *****************
 11437 ;; Defined at:
 11438 ;;		line 42 in file "I2C.c"
 11439 ;; Parameters:    Size  Location     Type
 11440 ;;  d               2    1[COMRAM] unsigned int 
 11441 ;; Auto vars:     Size  Location     Type
 11442 ;;		None
 11443 ;; Return value:  Size  Location     Type
 11444 ;;                  1    wreg      void 
 11445 ;; Registers used:
 11446 ;;		wreg, status,2, status,0, cstack
 11447 ;; Tracked objects:
 11448 ;;		On entry : 0/0
 11449 ;;		On exit  : 0/0
 11450 ;;		Unchanged: 0/0
 11451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11452 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11455 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11456 ;;Total ram usage:        2 bytes
 11457 ;; Hardware stack levels used:    1
 11458 ;; Hardware stack levels required when called:    1
 11459 ;; This function calls:
 11460 ;;		i2_I2C_Master_Wait
 11461 ;; This function is called by:
 11462 ;;		i2_getTime
 11463 ;; This function uses a non-reentrant model
 11464 ;;
 11465                           
 11466                           	psect	text40
 11467  005138                     __ptext40:
 11468                           	opt stack 0
 11469  005138                     i2_I2C_Master_Write:
 11470                           	opt stack 21
 11471                           
 11472                           ;I2C.c: 43: I2C_Master_Wait();
 11473                           
 11474                           ;incstack = 0
 11475  005138  EC72  F028         	call	i2_I2C_Master_Wait	;wreg free
 11476                           
 11477                           ;I2C.c: 44: SSPBUF = d;
 11478  00513C  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 11479  005140  0012               	return		;funcret
 11480  005142                     __end_ofi2_I2C_Master_Write:
 11481                           	opt stack 0
 11482                           pclatu	equ	0xFFB
 11483                           pclath	equ	0xFFA
 11484                           tblptru	equ	0xFF8
 11485                           tblptrh	equ	0xFF7
 11486                           tblptrl	equ	0xFF6
 11487                           tablat	equ	0xFF5
 11488                           prodh	equ	0xFF4
 11489                           prodl	equ	0xFF3
 11490                           intcon	equ	0xFF2
 11491                           intcon3	equ	0xFF0
 11492                           postinc0	equ	0xFEE
 11493                           fsr0h	equ	0xFEA
 11494                           fsr0l	equ	0xFE9
 11495                           wreg	equ	0xFE8
 11496                           plusw1	equ	0xFE3
 11497                           fsr1h	equ	0xFE2
 11498                           fsr1l	equ	0xFE1
 11499                           indf2	equ	0xFDF
 11500                           postinc2	equ	0xFDE
 11501                           postdec2	equ	0xFDD
 11502                           plusw2	equ	0xFDB
 11503                           fsr2h	equ	0xFDA
 11504                           fsr2l	equ	0xFD9
 11505                           status	equ	0xFD8
 11506                           
 11507 ;; *************** function i2_I2C_Master_Stop *****************
 11508 ;; Defined at:
 11509 ;;		line 37 in file "I2C.c"
 11510 ;; Parameters:    Size  Location     Type
 11511 ;;		None
 11512 ;; Auto vars:     Size  Location     Type
 11513 ;;		None
 11514 ;; Return value:  Size  Location     Type
 11515 ;;                  1    wreg      void 
 11516 ;; Registers used:
 11517 ;;		wreg, status,2, status,0, cstack
 11518 ;; Tracked objects:
 11519 ;;		On entry : 0/0
 11520 ;;		On exit  : 0/0
 11521 ;;		Unchanged: 0/0
 11522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11526 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11527 ;;Total ram usage:        0 bytes
 11528 ;; Hardware stack levels used:    1
 11529 ;; Hardware stack levels required when called:    1
 11530 ;; This function calls:
 11531 ;;		i2_I2C_Master_Wait
 11532 ;; This function is called by:
 11533 ;;		i2_getTime
 11534 ;; This function uses a non-reentrant model
 11535 ;;
 11536                           
 11537                           	psect	text41
 11538  005162                     __ptext41:
 11539                           	opt stack 0
 11540  005162                     i2_I2C_Master_Stop:
 11541                           	opt stack 21
 11542                           
 11543                           ;I2C.c: 38: I2C_Master_Wait();
 11544                           
 11545                           ;incstack = 0
 11546  005162  EC72  F028         	call	i2_I2C_Master_Wait	;wreg free
 11547                           
 11548                           ;I2C.c: 39: PEN = 1;
 11549  005166  84C5               	bsf	4037,2,c	;volatile
 11550  005168  0012               	return		;funcret
 11551  00516A                     __end_ofi2_I2C_Master_Stop:
 11552                           	opt stack 0
 11553                           pclatu	equ	0xFFB
 11554                           pclath	equ	0xFFA
 11555                           tblptru	equ	0xFF8
 11556                           tblptrh	equ	0xFF7
 11557                           tblptrl	equ	0xFF6
 11558                           tablat	equ	0xFF5
 11559                           prodh	equ	0xFF4
 11560                           prodl	equ	0xFF3
 11561                           intcon	equ	0xFF2
 11562                           intcon3	equ	0xFF0
 11563                           postinc0	equ	0xFEE
 11564                           fsr0h	equ	0xFEA
 11565                           fsr0l	equ	0xFE9
 11566                           wreg	equ	0xFE8
 11567                           plusw1	equ	0xFE3
 11568                           fsr1h	equ	0xFE2
 11569                           fsr1l	equ	0xFE1
 11570                           indf2	equ	0xFDF
 11571                           postinc2	equ	0xFDE
 11572                           postdec2	equ	0xFDD
 11573                           plusw2	equ	0xFDB
 11574                           fsr2h	equ	0xFDA
 11575                           fsr2l	equ	0xFD9
 11576                           status	equ	0xFD8
 11577                           
 11578 ;; *************** function i2_I2C_Master_Start *****************
 11579 ;; Defined at:
 11580 ;;		line 27 in file "I2C.c"
 11581 ;; Parameters:    Size  Location     Type
 11582 ;;		None
 11583 ;; Auto vars:     Size  Location     Type
 11584 ;;		None
 11585 ;; Return value:  Size  Location     Type
 11586 ;;                  1    wreg      void 
 11587 ;; Registers used:
 11588 ;;		wreg, status,2, status,0, cstack
 11589 ;; Tracked objects:
 11590 ;;		On entry : 0/0
 11591 ;;		On exit  : 0/0
 11592 ;;		Unchanged: 0/0
 11593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11597 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11598 ;;Total ram usage:        0 bytes
 11599 ;; Hardware stack levels used:    1
 11600 ;; Hardware stack levels required when called:    1
 11601 ;; This function calls:
 11602 ;;		i2_I2C_Master_Wait
 11603 ;; This function is called by:
 11604 ;;		i2_getTime
 11605 ;; This function uses a non-reentrant model
 11606 ;;
 11607                           
 11608                           	psect	text42
 11609  00516A                     __ptext42:
 11610                           	opt stack 0
 11611  00516A                     i2_I2C_Master_Start:
 11612                           	opt stack 21
 11613                           
 11614                           ;I2C.c: 28: I2C_Master_Wait();
 11615                           
 11616                           ;incstack = 0
 11617  00516A  EC72  F028         	call	i2_I2C_Master_Wait	;wreg free
 11618                           
 11619                           ;I2C.c: 29: SEN = 1;
 11620  00516E  80C5               	bsf	4037,0,c	;volatile
 11621  005170  0012               	return		;funcret
 11622  005172                     __end_ofi2_I2C_Master_Start:
 11623                           	opt stack 0
 11624                           pclatu	equ	0xFFB
 11625                           pclath	equ	0xFFA
 11626                           tblptru	equ	0xFF8
 11627                           tblptrh	equ	0xFF7
 11628                           tblptrl	equ	0xFF6
 11629                           tablat	equ	0xFF5
 11630                           prodh	equ	0xFF4
 11631                           prodl	equ	0xFF3
 11632                           intcon	equ	0xFF2
 11633                           intcon3	equ	0xFF0
 11634                           postinc0	equ	0xFEE
 11635                           fsr0h	equ	0xFEA
 11636                           fsr0l	equ	0xFE9
 11637                           wreg	equ	0xFE8
 11638                           plusw1	equ	0xFE3
 11639                           fsr1h	equ	0xFE2
 11640                           fsr1l	equ	0xFE1
 11641                           indf2	equ	0xFDF
 11642                           postinc2	equ	0xFDE
 11643                           postdec2	equ	0xFDD
 11644                           plusw2	equ	0xFDB
 11645                           fsr2h	equ	0xFDA
 11646                           fsr2l	equ	0xFD9
 11647                           status	equ	0xFD8
 11648                           
 11649 ;; *************** function i2_I2C_Master_Read *****************
 11650 ;; Defined at:
 11651 ;;		line 47 in file "I2C.c"
 11652 ;; Parameters:    Size  Location     Type
 11653 ;;  a               1    wreg     unsigned char 
 11654 ;; Auto vars:     Size  Location     Type
 11655 ;;  a               1    1[COMRAM] unsigned char 
 11656 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 11657 ;; Return value:  Size  Location     Type
 11658 ;;                  1    wreg      unsigned char 
 11659 ;; Registers used:
 11660 ;;		wreg, status,2, status,0, cstack
 11661 ;; Tracked objects:
 11662 ;;		On entry : 0/0
 11663 ;;		On exit  : 0/0
 11664 ;;		Unchanged: 0/0
 11665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11667 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11669 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11670 ;;Total ram usage:        2 bytes
 11671 ;; Hardware stack levels used:    1
 11672 ;; Hardware stack levels required when called:    1
 11673 ;; This function calls:
 11674 ;;		i2_I2C_Master_Wait
 11675 ;; This function is called by:
 11676 ;;		i2_getTime
 11677 ;; This function uses a non-reentrant model
 11678 ;;
 11679                           
 11680                           	psect	text43
 11681  004F78                     __ptext43:
 11682                           	opt stack 0
 11683  004F78                     i2_I2C_Master_Read:
 11684                           	opt stack 21
 11685                           
 11686                           ;incstack = 0
 11687                           ;i2I2C_Master_Read@a stored from wreg
 11688  004F78  6E02               	movwf	i2I2C_Master_Read@a,c
 11689                           
 11690                           ;I2C.c: 48: unsigned char temp;
 11691                           ;I2C.c: 49: I2C_Master_Wait();
 11692  004F7A  EC72  F028         	call	i2_I2C_Master_Wait	;wreg free
 11693                           
 11694                           ;I2C.c: 50: RCEN = 1;
 11695  004F7E  86C5               	bsf	4037,3,c	;volatile
 11696                           
 11697                           ;I2C.c: 51: I2C_Master_Wait();
 11698  004F80  EC72  F028         	call	i2_I2C_Master_Wait	;wreg free
 11699                           
 11700                           ;I2C.c: 52: temp = SSPBUF;
 11701  004F84  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 11702                           
 11703                           ;I2C.c: 53: I2C_Master_Wait();
 11704  004F88  EC72  F028         	call	i2_I2C_Master_Wait	;wreg free
 11705                           
 11706                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
 11707  004F8C  5002               	movf	i2I2C_Master_Read@a,w,c
 11708  004F8E  A4D8               	btfss	status,2,c
 11709  004F90  D002               	goto	i2u622_40
 11710  004F92  8AC5               	bsf	4037,5,c	;volatile
 11711  004F94  D001               	goto	i2l5821
 11712  004F96                     i2u622_40:
 11713  004F96  9AC5               	bcf	4037,5,c	;volatile
 11714  004F98                     i2l5821:
 11715                           
 11716                           ;I2C.c: 55: ACKEN = 1;
 11717  004F98  88C5               	bsf	4037,4,c	;volatile
 11718                           
 11719                           ;I2C.c: 56: return temp;
 11720  004F9A  5003               	movf	i2I2C_Master_Read@temp,w,c
 11721  004F9C  0012               	return	
 11722  004F9E                     __end_ofi2_I2C_Master_Read:
 11723                           	opt stack 0
 11724                           pclatu	equ	0xFFB
 11725                           pclath	equ	0xFFA
 11726                           tblptru	equ	0xFF8
 11727                           tblptrh	equ	0xFF7
 11728                           tblptrl	equ	0xFF6
 11729                           tablat	equ	0xFF5
 11730                           prodh	equ	0xFF4
 11731                           prodl	equ	0xFF3
 11732                           intcon	equ	0xFF2
 11733                           intcon3	equ	0xFF0
 11734                           postinc0	equ	0xFEE
 11735                           fsr0h	equ	0xFEA
 11736                           fsr0l	equ	0xFE9
 11737                           wreg	equ	0xFE8
 11738                           plusw1	equ	0xFE3
 11739                           fsr1h	equ	0xFE2
 11740                           fsr1l	equ	0xFE1
 11741                           indf2	equ	0xFDF
 11742                           postinc2	equ	0xFDE
 11743                           postdec2	equ	0xFDD
 11744                           plusw2	equ	0xFDB
 11745                           fsr2h	equ	0xFDA
 11746                           fsr2l	equ	0xFD9
 11747                           status	equ	0xFD8
 11748                           
 11749 ;; *************** function i2_I2C_Master_Wait *****************
 11750 ;; Defined at:
 11751 ;;		line 23 in file "I2C.c"
 11752 ;; Parameters:    Size  Location     Type
 11753 ;;		None
 11754 ;; Auto vars:     Size  Location     Type
 11755 ;;		None
 11756 ;; Return value:  Size  Location     Type
 11757 ;;                  1    wreg      void 
 11758 ;; Registers used:
 11759 ;;		wreg, status,2, status,0
 11760 ;; Tracked objects:
 11761 ;;		On entry : 0/0
 11762 ;;		On exit  : 0/0
 11763 ;;		Unchanged: 0/0
 11764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11767 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11768 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11769 ;;Total ram usage:        1 bytes
 11770 ;; Hardware stack levels used:    1
 11771 ;; This function calls:
 11772 ;;		Nothing
 11773 ;; This function is called by:
 11774 ;;		i2_I2C_Master_Start
 11775 ;;		i2_I2C_Master_Stop
 11776 ;;		i2_I2C_Master_Write
 11777 ;;		i2_I2C_Master_Read
 11778 ;; This function uses a non-reentrant model
 11779 ;;
 11780                           
 11781                           	psect	text44
 11782  0050E4                     __ptext44:
 11783                           	opt stack 0
 11784  0050E4                     i2_I2C_Master_Wait:
 11785                           	opt stack 21
 11786  0050E4                     i2l372:
 11787  0050E4  B4C7               	btfsc	4039,2,c	;volatile
 11788  0050E6  D7FE               	goto	i2l372
 11789  0050E8  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 11790  0050EC  0E1F               	movlw	31
 11791  0050EE  1601               	andwf	??i2_I2C_Master_Wait,f,c
 11792  0050F0  B4D8               	btfsc	status,2,c
 11793  0050F2  0012               	return	
 11794  0050F4  D7F7               	goto	i2l372
 11795  0050F6                     __end_ofi2_I2C_Master_Wait:
 11796                           	opt stack 0
 11797                           pclatu	equ	0xFFB
 11798                           pclath	equ	0xFFA
 11799                           tblptru	equ	0xFF8
 11800                           tblptrh	equ	0xFF7
 11801                           tblptrl	equ	0xFF6
 11802                           tablat	equ	0xFF5
 11803                           prodh	equ	0xFF4
 11804                           prodl	equ	0xFF3
 11805                           intcon	equ	0xFF2
 11806                           intcon3	equ	0xFF0
 11807                           postinc0	equ	0xFEE
 11808                           fsr0h	equ	0xFEA
 11809                           fsr0l	equ	0xFE9
 11810                           wreg	equ	0xFE8
 11811                           plusw1	equ	0xFE3
 11812                           fsr1h	equ	0xFE2
 11813                           fsr1l	equ	0xFE1
 11814                           indf2	equ	0xFDF
 11815                           postinc2	equ	0xFDE
 11816                           postdec2	equ	0xFDD
 11817                           plusw2	equ	0xFDB
 11818                           fsr2h	equ	0xFDA
 11819                           fsr2l	equ	0xFD9
 11820                           status	equ	0xFD8
 11821                           
 11822 ;; *************** function _stopMoving *****************
 11823 ;; Defined at:
 11824 ;;		line 29 in file "motors.c"
 11825 ;; Parameters:    Size  Location     Type
 11826 ;;  em              1    wreg     unsigned char 
 11827 ;; Auto vars:     Size  Location     Type
 11828 ;;  em              1  114[COMRAM] unsigned char 
 11829 ;; Return value:  Size  Location     Type
 11830 ;;                  1    wreg      void 
 11831 ;; Registers used:
 11832 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11833 ;; Tracked objects:
 11834 ;;		On entry : 0/0
 11835 ;;		On exit  : 0/0
 11836 ;;		Unchanged: 0/0
 11837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11839 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11841 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11842 ;;Total ram usage:        3 bytes
 11843 ;; Hardware stack levels used:    1
 11844 ;; Hardware stack levels required when called:    4
 11845 ;; This function calls:
 11846 ;;		i2_line0
 11847 ;;		i2_printf
 11848 ;; This function is called by:
 11849 ;;		_simulate
 11850 ;;		_keypressed
 11851 ;; This function uses a non-reentrant model
 11852 ;;
 11853                           
 11854                           	psect	text45
 11855  004E34                     __ptext45:
 11856                           	opt stack 0
 11857  004E34                     _stopMoving:
 11858                           	opt stack 20
 11859                           
 11860                           ;incstack = 0
 11861                           ;stopMoving@em stored from wreg
 11862  004E34  6E73               	movwf	stopMoving@em,c
 11863                           
 11864                           ;motors.c: 30: (INTCONbits.GIE = 0);
 11865  004E36  9EF2               	bcf	intcon,7,c	;volatile
 11866                           
 11867                           ;motors.c: 31: LATC = 0;
 11868  004E38  0E00               	movlw	0
 11869  004E3A  6E8B               	movwf	3979,c	;volatile
 11870                           
 11871                           ;motors.c: 32: line0();printf(em ? "Emergency          " : "Stopped          ");
 11872  004E3C  ECBD  F028         	call	i2_line0	;wreg free
 11873  004E40  5073               	movf	stopMoving@em,w,c
 11874  004E42  A4D8               	btfss	status,2,c
 11875  004E44  D004               	goto	i2l6369
 11876  004E46  0E32               	movlw	low STR_36
 11877  004E48  6E71               	movwf	_stopMoving$556,c
 11878  004E4A  0EFF               	movlw	high STR_36
 11879  004E4C  D003               	goto	L5
 11880  004E4E                     i2l6369:
 11881  004E4E  0EA9               	movlw	low STR_35
 11882  004E50  6E71               	movwf	_stopMoving$556,c
 11883  004E52  0EFE               	movlw	high STR_35
 11884  004E54                     L5:
 11885  004E54  6E72               	movwf	_stopMoving$556+1,c
 11886  004E56  C071  F047         	movff	_stopMoving$556,i2printf@f
 11887  004E5A  C072  F048         	movff	_stopMoving$556+1,i2printf@f+1
 11888  004E5E  EC09  F006         	call	i2_printf	;wreg free
 11889                           
 11890                           ;motors.c: 33: if (em)
 11891  004E62  5073               	movf	stopMoving@em,w,c
 11892  004E64  B4D8               	btfsc	status,2,c
 11893  004E66  0012               	return	
 11894  004E68                     i2l283:
 11895  004E68  D7FF               	goto	i2l283
 11896  004E6A                     __end_of_stopMoving:
 11897                           	opt stack 0
 11898                           pclatu	equ	0xFFB
 11899                           pclath	equ	0xFFA
 11900                           tblptru	equ	0xFF8
 11901                           tblptrh	equ	0xFF7
 11902                           tblptrl	equ	0xFF6
 11903                           tablat	equ	0xFF5
 11904                           prodh	equ	0xFF4
 11905                           prodl	equ	0xFF3
 11906                           intcon	equ	0xFF2
 11907                           intcon3	equ	0xFF0
 11908                           postinc0	equ	0xFEE
 11909                           fsr0h	equ	0xFEA
 11910                           fsr0l	equ	0xFE9
 11911                           wreg	equ	0xFE8
 11912                           plusw1	equ	0xFE3
 11913                           fsr1h	equ	0xFE2
 11914                           fsr1l	equ	0xFE1
 11915                           indf2	equ	0xFDF
 11916                           postinc2	equ	0xFDE
 11917                           postdec2	equ	0xFDD
 11918                           plusw2	equ	0xFDB
 11919                           fsr2h	equ	0xFDA
 11920                           fsr2l	equ	0xFD9
 11921                           status	equ	0xFD8
 11922                           
 11923 ;; *************** function _checkC *****************
 11924 ;; Defined at:
 11925 ;;		line 50 in file "sensors.c"
 11926 ;; Parameters:    Size  Location     Type
 11927 ;;  sorted          2  120[COMRAM] PTR unsigned char 
 11928 ;;		 -> simulate@sorted(4), 
 11929 ;; Auto vars:     Size  Location     Type
 11930 ;;		None
 11931 ;; Return value:  Size  Location     Type
 11932 ;;                  2  120[COMRAM] int 
 11933 ;; Registers used:
 11934 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11935 ;; Tracked objects:
 11936 ;;		On entry : 0/0
 11937 ;;		On exit  : 0/0
 11938 ;;		Unchanged: 0/0
 11939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11940 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11943 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11944 ;;Total ram usage:        2 bytes
 11945 ;; Hardware stack levels used:    1
 11946 ;; Hardware stack levels required when called:    5
 11947 ;; This function calls:
 11948 ;;		_AD
 11949 ;;		_checkV
 11950 ;;		i2_line0
 11951 ;;		i2_printf
 11952 ;; This function is called by:
 11953 ;;		_simulate
 11954 ;; This function uses a non-reentrant model
 11955 ;;
 11956                           
 11957                           	psect	text46
 11958  003EFA                     __ptext46:
 11959                           	opt stack 0
 11960  003EFA                     _checkC:
 11961                           	opt stack 18
 11962                           
 11963                           ;sensors.c: 52: line0();
 11964                           
 11965                           ;incstack = 0
 11966  003EFA  ECBD  F028         	call	i2_line0	;wreg free
 11967                           
 11968                           ;sensors.c: 53: printf("C:          ");
 11969  003EFE  0ED2               	movlw	low STR_42
 11970  003F00  6E47               	movwf	i2printf@f,c
 11971  003F02  0EFF               	movlw	high STR_42
 11972  003F04  6E48               	movwf	i2printf@f+1,c
 11973  003F06  EC09  F006         	call	i2_printf	;wreg free
 11974                           
 11975                           ;sensors.c: 54: switch (checkV(AD(1), 1.5)) {
 11976  003F0A  D038               	goto	i2l6259
 11977  003F0C                     i2l6225:
 11978                           
 11979                           ;sensors.c: 56: line0();
 11980  003F0C  ECBD  F028         	call	i2_line0	;wreg free
 11981                           
 11982                           ;sensors.c: 57: printf("charged C          ");
 11983  003F10  0E82               	movlw	low (STR_44+2)
 11984  003F12  6E47               	movwf	i2printf@f,c
 11985  003F14  0EFD               	movlw	high (STR_44+2)
 11986  003F16  6E48               	movwf	i2printf@f+1,c
 11987  003F18  EC09  F006         	call	i2_printf	;wreg free
 11988                           
 11989                           ;sensors.c: 58: sorted[1]++;
 11990  003F1C  EE20 F001          	lfsr	2,1
 11991  003F20  5079               	movf	checkC@sorted,w,c
 11992  003F22  26D9               	addwf	fsr2l,f,c
 11993  003F24  507A               	movf	checkC@sorted+1,w,c
 11994  003F26  22DA               	addwfc	fsr2h,f,c
 11995  003F28  2ADF               	incf	indf2,f,c
 11996                           
 11997                           ;sensors.c: 59: return 1;
 11998  003F2A  0E00               	movlw	0
 11999  003F2C  6E7A               	movwf	?_checkC+1,c
 12000  003F2E  0E01               	movlw	1
 12001  003F30  6E79               	movwf	?_checkC,c
 12002  003F32  0012               	return	
 12003  003F34                     i2l6235:
 12004                           
 12005                           ;sensors.c: 61: line0();
 12006  003F34  ECBD  F028         	call	i2_line0	;wreg free
 12007                           
 12008                           ;sensors.c: 62: printf("uncharged C          ");
 12009  003F38  0E80               	movlw	low STR_44
 12010  003F3A  6E47               	movwf	i2printf@f,c
 12011  003F3C  0EFD               	movlw	high STR_44
 12012  003F3E  6E48               	movwf	i2printf@f+1,c
 12013  003F40  EC09  F006         	call	i2_printf	;wreg free
 12014                           
 12015                           ;sensors.c: 63: sorted[3]++;
 12016  003F44  EE20 F003          	lfsr	2,3
 12017  003F48  5079               	movf	checkC@sorted,w,c
 12018  003F4A  26D9               	addwf	fsr2l,f,c
 12019  003F4C  507A               	movf	checkC@sorted+1,w,c
 12020  003F4E  22DA               	addwfc	fsr2h,f,c
 12021  003F50  2ADF               	incf	indf2,f,c
 12022                           
 12023                           ;sensors.c: 64: return 0;
 12024  003F52  0E00               	movlw	0
 12025  003F54  6E7A               	movwf	?_checkC+1,c
 12026  003F56  0E00               	movlw	0
 12027  003F58  6E79               	movwf	?_checkC,c
 12028  003F5A  0012               	return	
 12029  003F5C                     i2l6245:
 12030                           
 12031                           ;sensors.c: 66: line0();
 12032  003F5C  ECBD  F028         	call	i2_line0	;wreg free
 12033                           
 12034                           ;sensors.c: 67: printf("no C          ");
 12035  003F60  0EA7               	movlw	low STR_45
 12036  003F62  6E47               	movwf	i2printf@f,c
 12037  003F64  0EFF               	movlw	high STR_45
 12038  003F66  6E48               	movwf	i2printf@f+1,c
 12039  003F68  EC09  F006         	call	i2_printf	;wreg free
 12040                           
 12041                           ;sensors.c: 68: return -1;
 12042  003F6C  6879               	setf	?_checkC,c
 12043  003F6E  687A               	setf	?_checkC+1,c
 12044  003F70  0012               	return	
 12045  003F72                     i2l6253:
 12046                           
 12047                           ;sensors.c: 70: return 0;
 12048  003F72  0E00               	movlw	0
 12049  003F74  6E7A               	movwf	?_checkC+1,c
 12050  003F76  0E00               	movlw	0
 12051  003F78  6E79               	movwf	?_checkC,c
 12052                           
 12053                           ;sensors.c: 71: }
 12054  003F7A  0012               	return	
 12055  003F7C                     i2l6259:
 12056  003F7C  0E01               	movlw	1
 12057  003F7E  ECA7  F027         	call	_AD
 12058  003F82  C001  F071         	movff	?_AD,checkV@voltage
 12059  003F86  C002  F072         	movff	?_AD+1,checkV@voltage+1
 12060  003F8A  0E00               	movlw	0
 12061  003F8C  6E73               	movwf	checkV@max,c
 12062  003F8E  0EC0               	movlw	192
 12063  003F90  6E74               	movwf	checkV@max+1,c
 12064  003F92  0E3F               	movlw	63
 12065  003F94  6E75               	movwf	checkV@max+2,c
 12066  003F96  ECA4  F01C         	call	_checkV	;wreg free
 12067                           
 12068                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 12069                           ; Switch size 1, requested type "space"
 12070                           ; Number of cases is 2, Range of values is 0 to 255
 12071                           ; switch strategies available:
 12072                           ; Name         Instructions Cycles
 12073                           ; simple_byte            7     4 (average)
 12074                           ;	Chosen strategy is simple_byte
 12075  003F9A  5072               	movf	?_checkV+1,w,c
 12076  003F9C  0A00               	xorlw	0	; case 0
 12077  003F9E  B4D8               	btfsc	status,2,c
 12078  003FA0  D004               	goto	i2l8053
 12079  003FA2  0AFF               	xorlw	255	; case 255
 12080  003FA4  B4D8               	btfsc	status,2,c
 12081  003FA6  D009               	goto	i2l8055
 12082  003FA8  D7E4               	goto	i2l6253
 12083  003FAA                     i2l8053:
 12084                           
 12085                           ; Switch size 1, requested type "space"
 12086                           ; Number of cases is 2, Range of values is 0 to 1
 12087                           ; switch strategies available:
 12088                           ; Name         Instructions Cycles
 12089                           ; simple_byte            7     4 (average)
 12090                           ;	Chosen strategy is simple_byte
 12091  003FAA  5071               	movf	?_checkV,w,c
 12092  003FAC  0A00               	xorlw	0	; case 0
 12093  003FAE  B4D8               	btfsc	status,2,c
 12094  003FB0  D7D5               	goto	i2l6245
 12095  003FB2  0A01               	xorlw	1	; case 1
 12096  003FB4  B4D8               	btfsc	status,2,c
 12097  003FB6  D7AA               	goto	i2l6225
 12098  003FB8  D7DC               	goto	i2l6253
 12099  003FBA                     i2l8055:
 12100                           
 12101                           ; Switch size 1, requested type "space"
 12102                           ; Number of cases is 1, Range of values is 255 to 255
 12103                           ; switch strategies available:
 12104                           ; Name         Instructions Cycles
 12105                           ; simple_byte            4     3 (average)
 12106                           ;	Chosen strategy is simple_byte
 12107  003FBA  5071               	movf	?_checkV,w,c
 12108  003FBC  0AFF               	xorlw	255	; case 255
 12109  003FBE  B4D8               	btfsc	status,2,c
 12110  003FC0  D7B9               	goto	i2l6235
 12111  003FC2  D7D7               	goto	i2l6253
 12112  003FC4                     __end_of_checkC:
 12113                           	opt stack 0
 12114                           pclatu	equ	0xFFB
 12115                           pclath	equ	0xFFA
 12116                           tblptru	equ	0xFF8
 12117                           tblptrh	equ	0xFF7
 12118                           tblptrl	equ	0xFF6
 12119                           tablat	equ	0xFF5
 12120                           prodh	equ	0xFF4
 12121                           prodl	equ	0xFF3
 12122                           intcon	equ	0xFF2
 12123                           intcon3	equ	0xFF0
 12124                           postinc0	equ	0xFEE
 12125                           fsr0h	equ	0xFEA
 12126                           fsr0l	equ	0xFE9
 12127                           wreg	equ	0xFE8
 12128                           plusw1	equ	0xFE3
 12129                           fsr1h	equ	0xFE2
 12130                           fsr1l	equ	0xFE1
 12131                           indf2	equ	0xFDF
 12132                           postinc2	equ	0xFDE
 12133                           postdec2	equ	0xFDD
 12134                           plusw2	equ	0xFDB
 12135                           fsr2h	equ	0xFDA
 12136                           fsr2l	equ	0xFD9
 12137                           status	equ	0xFD8
 12138                           
 12139 ;; *************** function _checkAA *****************
 12140 ;; Defined at:
 12141 ;;		line 26 in file "sensors.c"
 12142 ;; Parameters:    Size  Location     Type
 12143 ;;  sorted          2  120[COMRAM] PTR unsigned char 
 12144 ;;		 -> testADC@sorted(4), simulate@sorted(4), 
 12145 ;; Auto vars:     Size  Location     Type
 12146 ;;		None
 12147 ;; Return value:  Size  Location     Type
 12148 ;;                  2  120[COMRAM] int 
 12149 ;; Registers used:
 12150 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12151 ;; Tracked objects:
 12152 ;;		On entry : 0/0
 12153 ;;		On exit  : 0/0
 12154 ;;		Unchanged: 0/0
 12155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12156 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12159 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12160 ;;Total ram usage:        2 bytes
 12161 ;; Hardware stack levels used:    1
 12162 ;; Hardware stack levels required when called:    5
 12163 ;; This function calls:
 12164 ;;		_AD
 12165 ;;		_checkV
 12166 ;;		i2_line0
 12167 ;;		i2_printf
 12168 ;; This function is called by:
 12169 ;;		_simulate
 12170 ;;		_testADC
 12171 ;; This function uses a non-reentrant model
 12172 ;;
 12173                           
 12174                           	psect	text47
 12175  004156                     __ptext47:
 12176                           	opt stack 0
 12177  004156                     _checkAA:
 12178                           	opt stack 18
 12179                           
 12180                           ;sensors.c: 28: line0();
 12181                           
 12182                           ;incstack = 0
 12183  004156  ECBD  F028         	call	i2_line0	;wreg free
 12184                           
 12185                           ;sensors.c: 29: printf("AA:          ");
 12186  00415A  0EB6               	movlw	low STR_38
 12187  00415C  6E47               	movwf	i2printf@f,c
 12188  00415E  0EFF               	movlw	high STR_38
 12189  004160  6E48               	movwf	i2printf@f+1,c
 12190  004162  EC09  F006         	call	i2_printf	;wreg free
 12191                           
 12192                           ;sensors.c: 30: switch (checkV(AD(0), 1.5)) {
 12193  004166  D036               	goto	i2l6211
 12194  004168                     i2l6177:
 12195                           
 12196                           ;sensors.c: 32: line0();
 12197  004168  ECBD  F028         	call	i2_line0	;wreg free
 12198                           
 12199                           ;sensors.c: 33: printf("charged AA          ");
 12200  00416C  0E3D               	movlw	low (STR_40+2)
 12201  00416E  6E47               	movwf	i2printf@f,c
 12202  004170  0EFD               	movlw	high (STR_40+2)
 12203  004172  6E48               	movwf	i2printf@f+1,c
 12204  004174  EC09  F006         	call	i2_printf	;wreg free
 12205                           
 12206                           ;sensors.c: 34: sorted[0]++;
 12207  004178  C079  FFD9         	movff	checkAA@sorted,fsr2l
 12208  00417C  C07A  FFDA         	movff	checkAA@sorted+1,fsr2h
 12209  004180  2ADF               	incf	indf2,f,c
 12210                           
 12211                           ;sensors.c: 35: return 1;
 12212  004182  0E00               	movlw	0
 12213  004184  6E7A               	movwf	?_checkAA+1,c
 12214  004186  0E01               	movlw	1
 12215  004188  6E79               	movwf	?_checkAA,c
 12216  00418A  0012               	return	
 12217  00418C                     i2l6187:
 12218                           
 12219                           ;sensors.c: 37: line0();
 12220  00418C  ECBD  F028         	call	i2_line0	;wreg free
 12221                           
 12222                           ;sensors.c: 38: printf("uncharged AA          ");
 12223  004190  0E3B               	movlw	low STR_40
 12224  004192  6E47               	movwf	i2printf@f,c
 12225  004194  0EFD               	movlw	high STR_40
 12226  004196  6E48               	movwf	i2printf@f+1,c
 12227  004198  EC09  F006         	call	i2_printf	;wreg free
 12228                           
 12229                           ;sensors.c: 39: sorted[3]++;
 12230  00419C  EE20 F003          	lfsr	2,3
 12231  0041A0  5079               	movf	checkAA@sorted,w,c
 12232  0041A2  26D9               	addwf	fsr2l,f,c
 12233  0041A4  507A               	movf	checkAA@sorted+1,w,c
 12234  0041A6  22DA               	addwfc	fsr2h,f,c
 12235  0041A8  2ADF               	incf	indf2,f,c
 12236                           
 12237                           ;sensors.c: 40: return 0;
 12238  0041AA  0E00               	movlw	0
 12239  0041AC  6E7A               	movwf	?_checkAA+1,c
 12240  0041AE  0E00               	movlw	0
 12241  0041B0  6E79               	movwf	?_checkAA,c
 12242  0041B2  0012               	return	
 12243  0041B4                     i2l6197:
 12244                           
 12245                           ;sensors.c: 42: line0();
 12246  0041B4  ECBD  F028         	call	i2_line0	;wreg free
 12247                           
 12248                           ;sensors.c: 43: printf("no AA          ");
 12249  0041B8  0E77               	movlw	low STR_41
 12250  0041BA  6E47               	movwf	i2printf@f,c
 12251  0041BC  0EFF               	movlw	high STR_41
 12252  0041BE  6E48               	movwf	i2printf@f+1,c
 12253  0041C0  EC09  F006         	call	i2_printf	;wreg free
 12254                           
 12255                           ;sensors.c: 44: return -1;
 12256  0041C4  6879               	setf	?_checkAA,c
 12257  0041C6  687A               	setf	?_checkAA+1,c
 12258  0041C8  0012               	return	
 12259  0041CA                     i2l6205:
 12260                           
 12261                           ;sensors.c: 46: return 0;
 12262  0041CA  0E00               	movlw	0
 12263  0041CC  6E7A               	movwf	?_checkAA+1,c
 12264  0041CE  0E00               	movlw	0
 12265  0041D0  6E79               	movwf	?_checkAA,c
 12266                           
 12267                           ;sensors.c: 47: }
 12268  0041D2  0012               	return	
 12269  0041D4                     i2l6211:
 12270  0041D4  0E00               	movlw	0
 12271  0041D6  ECA7  F027         	call	_AD
 12272  0041DA  C001  F071         	movff	?_AD,checkV@voltage
 12273  0041DE  C002  F072         	movff	?_AD+1,checkV@voltage+1
 12274  0041E2  0E00               	movlw	0
 12275  0041E4  6E73               	movwf	checkV@max,c
 12276  0041E6  0EC0               	movlw	192
 12277  0041E8  6E74               	movwf	checkV@max+1,c
 12278  0041EA  0E3F               	movlw	63
 12279  0041EC  6E75               	movwf	checkV@max+2,c
 12280  0041EE  ECA4  F01C         	call	_checkV	;wreg free
 12281                           
 12282                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 12283                           ; Switch size 1, requested type "space"
 12284                           ; Number of cases is 2, Range of values is 0 to 255
 12285                           ; switch strategies available:
 12286                           ; Name         Instructions Cycles
 12287                           ; simple_byte            7     4 (average)
 12288                           ;	Chosen strategy is simple_byte
 12289  0041F2  5072               	movf	?_checkV+1,w,c
 12290  0041F4  0A00               	xorlw	0	; case 0
 12291  0041F6  B4D8               	btfsc	status,2,c
 12292  0041F8  D004               	goto	i2l8057
 12293  0041FA  0AFF               	xorlw	255	; case 255
 12294  0041FC  B4D8               	btfsc	status,2,c
 12295  0041FE  D009               	goto	i2l8059
 12296  004200  D7E4               	goto	i2l6205
 12297  004202                     i2l8057:
 12298                           
 12299                           ; Switch size 1, requested type "space"
 12300                           ; Number of cases is 2, Range of values is 0 to 1
 12301                           ; switch strategies available:
 12302                           ; Name         Instructions Cycles
 12303                           ; simple_byte            7     4 (average)
 12304                           ;	Chosen strategy is simple_byte
 12305  004202  5071               	movf	?_checkV,w,c
 12306  004204  0A00               	xorlw	0	; case 0
 12307  004206  B4D8               	btfsc	status,2,c
 12308  004208  D7D5               	goto	i2l6197
 12309  00420A  0A01               	xorlw	1	; case 1
 12310  00420C  B4D8               	btfsc	status,2,c
 12311  00420E  D7AC               	goto	i2l6177
 12312  004210  D7DC               	goto	i2l6205
 12313  004212                     i2l8059:
 12314                           
 12315                           ; Switch size 1, requested type "space"
 12316                           ; Number of cases is 1, Range of values is 255 to 255
 12317                           ; switch strategies available:
 12318                           ; Name         Instructions Cycles
 12319                           ; simple_byte            4     3 (average)
 12320                           ;	Chosen strategy is simple_byte
 12321  004212  5071               	movf	?_checkV,w,c
 12322  004214  0AFF               	xorlw	255	; case 255
 12323  004216  B4D8               	btfsc	status,2,c
 12324  004218  D7B9               	goto	i2l6187
 12325  00421A  D7D7               	goto	i2l6205
 12326  00421C                     __end_of_checkAA:
 12327                           	opt stack 0
 12328                           pclatu	equ	0xFFB
 12329                           pclath	equ	0xFFA
 12330                           tblptru	equ	0xFF8
 12331                           tblptrh	equ	0xFF7
 12332                           tblptrl	equ	0xFF6
 12333                           tablat	equ	0xFF5
 12334                           prodh	equ	0xFF4
 12335                           prodl	equ	0xFF3
 12336                           intcon	equ	0xFF2
 12337                           intcon3	equ	0xFF0
 12338                           postinc0	equ	0xFEE
 12339                           fsr0h	equ	0xFEA
 12340                           fsr0l	equ	0xFE9
 12341                           wreg	equ	0xFE8
 12342                           plusw1	equ	0xFE3
 12343                           fsr1h	equ	0xFE2
 12344                           fsr1l	equ	0xFE1
 12345                           indf2	equ	0xFDF
 12346                           postinc2	equ	0xFDE
 12347                           postdec2	equ	0xFDD
 12348                           plusw2	equ	0xFDB
 12349                           fsr2h	equ	0xFDA
 12350                           fsr2l	equ	0xFD9
 12351                           status	equ	0xFD8
 12352                           
 12353 ;; *************** function _check9 *****************
 12354 ;; Defined at:
 12355 ;;		line 74 in file "sensors.c"
 12356 ;; Parameters:    Size  Location     Type
 12357 ;;  sorted          2  120[COMRAM] PTR unsigned char 
 12358 ;;		 -> simulate@sorted(4), 
 12359 ;; Auto vars:     Size  Location     Type
 12360 ;;		None
 12361 ;; Return value:  Size  Location     Type
 12362 ;;                  2  120[COMRAM] int 
 12363 ;; Registers used:
 12364 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12365 ;; Tracked objects:
 12366 ;;		On entry : 0/0
 12367 ;;		On exit  : 0/0
 12368 ;;		Unchanged: 0/0
 12369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12370 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12373 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12374 ;;Total ram usage:        2 bytes
 12375 ;; Hardware stack levels used:    1
 12376 ;; Hardware stack levels required when called:    5
 12377 ;; This function calls:
 12378 ;;		_AD
 12379 ;;		_checkV
 12380 ;;		i2_line0
 12381 ;;		i2_printf
 12382 ;; This function is called by:
 12383 ;;		_simulate
 12384 ;; This function uses a non-reentrant model
 12385 ;;
 12386                           
 12387                           	psect	text48
 12388  003FC4                     __ptext48:
 12389                           	opt stack 0
 12390  003FC4                     _check9:
 12391                           	opt stack 18
 12392                           
 12393                           ;sensors.c: 76: line0();
 12394                           
 12395                           ;incstack = 0
 12396  003FC4  ECBD  F028         	call	i2_line0	;wreg free
 12397                           
 12398                           ;sensors.c: 77: printf("9V:          ");
 12399  003FC8  0EC4               	movlw	low STR_46
 12400  003FCA  6E47               	movwf	i2printf@f,c
 12401  003FCC  0EFF               	movlw	high STR_46
 12402  003FCE  6E48               	movwf	i2printf@f+1,c
 12403  003FD0  EC09  F006         	call	i2_printf	;wreg free
 12404                           
 12405                           ;sensors.c: 78: switch (checkV(AD(2), 4)) {
 12406  003FD4  D038               	goto	i2l6307
 12407  003FD6                     i2l6273:
 12408                           
 12409                           ;sensors.c: 80: line0();
 12410  003FD6  ECBD  F028         	call	i2_line0	;wreg free
 12411                           
 12412                           ;sensors.c: 81: printf("charged 9V          ");
 12413  003FDA  0E54               	movlw	low (STR_48+2)
 12414  003FDC  6E47               	movwf	i2printf@f,c
 12415  003FDE  0EFD               	movlw	high (STR_48+2)
 12416  003FE0  6E48               	movwf	i2printf@f+1,c
 12417  003FE2  EC09  F006         	call	i2_printf	;wreg free
 12418                           
 12419                           ;sensors.c: 82: sorted[2]++;
 12420  003FE6  EE20 F002          	lfsr	2,2
 12421  003FEA  5079               	movf	check9@sorted,w,c
 12422  003FEC  26D9               	addwf	fsr2l,f,c
 12423  003FEE  507A               	movf	check9@sorted+1,w,c
 12424  003FF0  22DA               	addwfc	fsr2h,f,c
 12425  003FF2  2ADF               	incf	indf2,f,c
 12426                           
 12427                           ;sensors.c: 83: return 1;
 12428  003FF4  0E00               	movlw	0
 12429  003FF6  6E7A               	movwf	?_check9+1,c
 12430  003FF8  0E01               	movlw	1
 12431  003FFA  6E79               	movwf	?_check9,c
 12432  003FFC  0012               	return	
 12433  003FFE                     i2l6283:
 12434                           
 12435                           ;sensors.c: 85: line0();
 12436  003FFE  ECBD  F028         	call	i2_line0	;wreg free
 12437                           
 12438                           ;sensors.c: 86: printf("uncharged 9V          ");
 12439  004002  0E52               	movlw	low STR_48
 12440  004004  6E47               	movwf	i2printf@f,c
 12441  004006  0EFD               	movlw	high STR_48
 12442  004008  6E48               	movwf	i2printf@f+1,c
 12443  00400A  EC09  F006         	call	i2_printf	;wreg free
 12444                           
 12445                           ;sensors.c: 87: sorted[3]++;
 12446  00400E  EE20 F003          	lfsr	2,3
 12447  004012  5079               	movf	check9@sorted,w,c
 12448  004014  26D9               	addwf	fsr2l,f,c
 12449  004016  507A               	movf	check9@sorted+1,w,c
 12450  004018  22DA               	addwfc	fsr2h,f,c
 12451  00401A  2ADF               	incf	indf2,f,c
 12452                           
 12453                           ;sensors.c: 88: return 0;
 12454  00401C  0E00               	movlw	0
 12455  00401E  6E7A               	movwf	?_check9+1,c
 12456  004020  0E00               	movlw	0
 12457  004022  6E79               	movwf	?_check9,c
 12458  004024  0012               	return	
 12459  004026                     i2l6293:
 12460                           
 12461                           ;sensors.c: 90: line0();
 12462  004026  ECBD  F028         	call	i2_line0	;wreg free
 12463                           
 12464                           ;sensors.c: 91: printf("no 9V          ");
 12465  00402A  0E87               	movlw	low STR_49
 12466  00402C  6E47               	movwf	i2printf@f,c
 12467  00402E  0EFF               	movlw	high STR_49
 12468  004030  6E48               	movwf	i2printf@f+1,c
 12469  004032  EC09  F006         	call	i2_printf	;wreg free
 12470                           
 12471                           ;sensors.c: 92: return -1;
 12472  004036  6879               	setf	?_check9,c
 12473  004038  687A               	setf	?_check9+1,c
 12474  00403A  0012               	return	
 12475  00403C                     i2l6301:
 12476                           
 12477                           ;sensors.c: 94: return 0;
 12478  00403C  0E00               	movlw	0
 12479  00403E  6E7A               	movwf	?_check9+1,c
 12480  004040  0E00               	movlw	0
 12481  004042  6E79               	movwf	?_check9,c
 12482                           
 12483                           ;sensors.c: 95: }
 12484  004044  0012               	return	
 12485  004046                     i2l6307:
 12486  004046  0E02               	movlw	2
 12487  004048  ECA7  F027         	call	_AD
 12488  00404C  C001  F071         	movff	?_AD,checkV@voltage
 12489  004050  C002  F072         	movff	?_AD+1,checkV@voltage+1
 12490  004054  0E00               	movlw	0
 12491  004056  6E73               	movwf	checkV@max,c
 12492  004058  0E80               	movlw	128
 12493  00405A  6E74               	movwf	checkV@max+1,c
 12494  00405C  0E40               	movlw	64
 12495  00405E  6E75               	movwf	checkV@max+2,c
 12496  004060  ECA4  F01C         	call	_checkV	;wreg free
 12497                           
 12498                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
 12499                           ; Switch size 1, requested type "space"
 12500                           ; Number of cases is 2, Range of values is 0 to 255
 12501                           ; switch strategies available:
 12502                           ; Name         Instructions Cycles
 12503                           ; simple_byte            7     4 (average)
 12504                           ;	Chosen strategy is simple_byte
 12505  004064  5072               	movf	?_checkV+1,w,c
 12506  004066  0A00               	xorlw	0	; case 0
 12507  004068  B4D8               	btfsc	status,2,c
 12508  00406A  D004               	goto	i2l8061
 12509  00406C  0AFF               	xorlw	255	; case 255
 12510  00406E  B4D8               	btfsc	status,2,c
 12511  004070  D009               	goto	i2l8063
 12512  004072  D7E4               	goto	i2l6301
 12513  004074                     i2l8061:
 12514                           
 12515                           ; Switch size 1, requested type "space"
 12516                           ; Number of cases is 2, Range of values is 0 to 1
 12517                           ; switch strategies available:
 12518                           ; Name         Instructions Cycles
 12519                           ; simple_byte            7     4 (average)
 12520                           ;	Chosen strategy is simple_byte
 12521  004074  5071               	movf	?_checkV,w,c
 12522  004076  0A00               	xorlw	0	; case 0
 12523  004078  B4D8               	btfsc	status,2,c
 12524  00407A  D7D5               	goto	i2l6293
 12525  00407C  0A01               	xorlw	1	; case 1
 12526  00407E  B4D8               	btfsc	status,2,c
 12527  004080  D7AA               	goto	i2l6273
 12528  004082  D7DC               	goto	i2l6301
 12529  004084                     i2l8063:
 12530                           
 12531                           ; Switch size 1, requested type "space"
 12532                           ; Number of cases is 1, Range of values is 255 to 255
 12533                           ; switch strategies available:
 12534                           ; Name         Instructions Cycles
 12535                           ; simple_byte            4     3 (average)
 12536                           ;	Chosen strategy is simple_byte
 12537  004084  5071               	movf	?_checkV,w,c
 12538  004086  0AFF               	xorlw	255	; case 255
 12539  004088  B4D8               	btfsc	status,2,c
 12540  00408A  D7B9               	goto	i2l6283
 12541  00408C  D7D7               	goto	i2l6301
 12542  00408E                     __end_of_check9:
 12543                           	opt stack 0
 12544                           pclatu	equ	0xFFB
 12545                           pclath	equ	0xFFA
 12546                           tblptru	equ	0xFF8
 12547                           tblptrh	equ	0xFF7
 12548                           tblptrl	equ	0xFF6
 12549                           tablat	equ	0xFF5
 12550                           prodh	equ	0xFF4
 12551                           prodl	equ	0xFF3
 12552                           intcon	equ	0xFF2
 12553                           intcon3	equ	0xFF0
 12554                           postinc0	equ	0xFEE
 12555                           fsr0h	equ	0xFEA
 12556                           fsr0l	equ	0xFE9
 12557                           wreg	equ	0xFE8
 12558                           plusw1	equ	0xFE3
 12559                           fsr1h	equ	0xFE2
 12560                           fsr1l	equ	0xFE1
 12561                           indf2	equ	0xFDF
 12562                           postinc2	equ	0xFDE
 12563                           postdec2	equ	0xFDD
 12564                           plusw2	equ	0xFDB
 12565                           fsr2h	equ	0xFDA
 12566                           fsr2l	equ	0xFD9
 12567                           status	equ	0xFD8
 12568                           
 12569 ;; *************** function _checkV *****************
 12570 ;; Defined at:
 12571 ;;		line 13 in file "sensors.c"
 12572 ;; Parameters:    Size  Location     Type
 12573 ;;  voltage         2  112[COMRAM] int 
 12574 ;;  max             3  114[COMRAM] float 
 12575 ;; Auto vars:     Size  Location     Type
 12576 ;;		None
 12577 ;; Return value:  Size  Location     Type
 12578 ;;                  2  112[COMRAM] int 
 12579 ;; Registers used:
 12580 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12581 ;; Tracked objects:
 12582 ;;		On entry : 0/0
 12583 ;;		On exit  : 0/0
 12584 ;;		Unchanged: 0/0
 12585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12586 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12587 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12589 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12590 ;;Total ram usage:        8 bytes
 12591 ;; Hardware stack levels used:    1
 12592 ;; Hardware stack levels required when called:    4
 12593 ;; This function calls:
 12594 ;;		___awtoft
 12595 ;;		___ftdiv
 12596 ;;		i2___ftge
 12597 ;;		i2___ftmul
 12598 ;;		i2_line1
 12599 ;;		i2_printf
 12600 ;; This function is called by:
 12601 ;;		_checkAA
 12602 ;;		_checkC
 12603 ;;		_check9
 12604 ;; This function uses a non-reentrant model
 12605 ;;
 12606                           
 12607                           	psect	text49
 12608  003948                     __ptext49:
 12609                           	opt stack 0
 12610  003948                     _checkV:
 12611                           	opt stack 18
 12612                           
 12613                           ;sensors.c: 15: line1();
 12614                           
 12615                           ;incstack = 0
 12616  003948  ECB9  F028         	call	i2_line1	;wreg free
 12617                           
 12618                           ;sensors.c: 16: printf("%f02 received    ", (float) voltage / 1024 * 4.1);
 12619  00394C  0E00               	movlw	0
 12620  00394E  6E10               	movwf	___ftdiv@f2,c
 12621  003950  0E80               	movlw	128
 12622  003952  6E11               	movwf	___ftdiv@f2+1,c
 12623  003954  0E44               	movlw	68
 12624  003956  6E12               	movwf	___ftdiv@f2+2,c
 12625  003958  C071  F009         	movff	checkV@voltage,___awtoft@c
 12626  00395C  C072  F00A         	movff	checkV@voltage+1,___awtoft@c+1
 12627  003960  ECE3  F026         	call	___awtoft	;wreg free
 12628  003964  C009  F00D         	movff	?___awtoft,___ftdiv@f1
 12629  003968  C00A  F00E         	movff	?___awtoft+1,___ftdiv@f1+1
 12630  00396C  C00B  F00F         	movff	?___awtoft+2,___ftdiv@f1+2
 12631  003970  EC0A  F01F         	call	___ftdiv	;wreg free
 12632  003974  C00D  F01C         	movff	?___ftdiv,i2___ftmul@f1
 12633  003978  C00E  F01D         	movff	?___ftdiv+1,i2___ftmul@f1+1
 12634  00397C  C00F  F01E         	movff	?___ftdiv+2,i2___ftmul@f1+2
 12635  003980  0E33               	movlw	51
 12636  003982  6E1F               	movwf	i2___ftmul@f2,c
 12637  003984  0E83               	movlw	131
 12638  003986  6E20               	movwf	i2___ftmul@f2+1,c
 12639  003988  0E40               	movlw	64
 12640  00398A  6E21               	movwf	i2___ftmul@f2+2,c
 12641  00398C  EC9D  F01D         	call	i2___ftmul	;wreg free
 12642  003990  C01C  F076         	movff	?i2___ftmul,_checkV$1665
 12643  003994  C01D  F077         	movff	?i2___ftmul+1,_checkV$1665+1
 12644  003998  C01E  F078         	movff	?i2___ftmul+2,_checkV$1665+2
 12645                           
 12646                           ;sensors.c: 16: printf("%f02 received    ", (float) voltage / 1024 * 4.1);
 12647  00399C  0E20               	movlw	low STR_37
 12648  00399E  6E47               	movwf	i2printf@f,c
 12649  0039A0  0EFF               	movlw	high STR_37
 12650  0039A2  6E48               	movwf	i2printf@f+1,c
 12651  0039A4  C076  F049         	movff	_checkV$1665,?i2_printf+2
 12652  0039A8  C077  F04A         	movff	_checkV$1665+1,?i2_printf+3
 12653  0039AC  C078  F04B         	movff	_checkV$1665+2,?i2_printf+4
 12654  0039B0  EC09  F006         	call	i2_printf	;wreg free
 12655                           
 12656                           ;sensors.c: 17: if (voltage < 50) {
 12657  0039B4  BE72               	btfsc	checkV@voltage+1,7,c
 12658  0039B6  D006               	goto	i2l5437
 12659  0039B8  5072               	movf	checkV@voltage+1,w,c
 12660  0039BA  E109               	bnz	i2l5443
 12661  0039BC  0E32               	movlw	50
 12662  0039BE  5C71               	subwf	checkV@voltage,w,c
 12663  0039C0  B0D8               	btfsc	status,0,c
 12664  0039C2  D005               	goto	i2l5443
 12665  0039C4                     i2l5437:
 12666                           
 12667                           ;sensors.c: 18: return 0;
 12668  0039C4  0E00               	movlw	0
 12669  0039C6  6E72               	movwf	?_checkV+1,c
 12670  0039C8  0E00               	movlw	0
 12671  0039CA  6E71               	movwf	?_checkV,c
 12672                           
 12673                           ;sensors.c: 19: } else if (voltage > 0.85 * 1023 * max / 4.1) {
 12674  0039CC  0012               	return	
 12675  0039CE                     i2l5443:
 12676  0039CE  0E33               	movlw	51
 12677  0039D0  6E10               	movwf	___ftdiv@f2,c
 12678  0039D2  0E83               	movlw	131
 12679  0039D4  6E11               	movwf	___ftdiv@f2+1,c
 12680  0039D6  0E40               	movlw	64
 12681  0039D8  6E12               	movwf	___ftdiv@f2+2,c
 12682  0039DA  0E63               	movlw	99
 12683  0039DC  6E1F               	movwf	i2___ftmul@f2,c
 12684  0039DE  0E59               	movlw	89
 12685  0039E0  6E20               	movwf	i2___ftmul@f2+1,c
 12686  0039E2  0E44               	movlw	68
 12687  0039E4  6E21               	movwf	i2___ftmul@f2+2,c
 12688  0039E6  C073  F01C         	movff	checkV@max,i2___ftmul@f1
 12689  0039EA  C074  F01D         	movff	checkV@max+1,i2___ftmul@f1+1
 12690  0039EE  C075  F01E         	movff	checkV@max+2,i2___ftmul@f1+2
 12691  0039F2  EC9D  F01D         	call	i2___ftmul	;wreg free
 12692  0039F6  C01C  F00D         	movff	?i2___ftmul,___ftdiv@f1
 12693  0039FA  C01D  F00E         	movff	?i2___ftmul+1,___ftdiv@f1+1
 12694  0039FE  C01E  F00F         	movff	?i2___ftmul+2,___ftdiv@f1+2
 12695  003A02  EC0A  F01F         	call	___ftdiv	;wreg free
 12696  003A06  C00D  F02B         	movff	?___ftdiv,i2___ftge@ff1
 12697  003A0A  C00E  F02C         	movff	?___ftdiv+1,i2___ftge@ff1+1
 12698  003A0E  C00F  F02D         	movff	?___ftdiv+2,i2___ftge@ff1+2
 12699  003A12  C071  F009         	movff	checkV@voltage,___awtoft@c
 12700  003A16  C072  F00A         	movff	checkV@voltage+1,___awtoft@c+1
 12701  003A1A  ECE3  F026         	call	___awtoft	;wreg free
 12702  003A1E  C009  F02E         	movff	?___awtoft,i2___ftge@ff2
 12703  003A22  C00A  F02F         	movff	?___awtoft+1,i2___ftge@ff2+1
 12704  003A26  C00B  F030         	movff	?___awtoft+2,i2___ftge@ff2+2
 12705  003A2A  ECC0  F022         	call	i2___ftge	;wreg free
 12706  003A2E  B0D8               	btfsc	status,0,c
 12707  003A30  D005               	goto	i2l314
 12708                           
 12709                           ;sensors.c: 20: return 1;
 12710  003A32  0E00               	movlw	0
 12711  003A34  6E72               	movwf	?_checkV+1,c
 12712  003A36  0E01               	movlw	1
 12713  003A38  6E71               	movwf	?_checkV,c
 12714                           
 12715                           ;sensors.c: 21: } else {
 12716  003A3A  0012               	return	
 12717  003A3C                     i2l314:
 12718                           
 12719                           ;sensors.c: 22: return -1;
 12720  003A3C  6871               	setf	?_checkV,c
 12721  003A3E  6872               	setf	?_checkV+1,c
 12722  003A40  0012               	return	
 12723  003A42                     __end_of_checkV:
 12724                           	opt stack 0
 12725                           pclatu	equ	0xFFB
 12726                           pclath	equ	0xFFA
 12727                           tblptru	equ	0xFF8
 12728                           tblptrh	equ	0xFF7
 12729                           tblptrl	equ	0xFF6
 12730                           tablat	equ	0xFF5
 12731                           prodh	equ	0xFF4
 12732                           prodl	equ	0xFF3
 12733                           intcon	equ	0xFF2
 12734                           intcon3	equ	0xFF0
 12735                           postinc0	equ	0xFEE
 12736                           fsr0h	equ	0xFEA
 12737                           fsr0l	equ	0xFE9
 12738                           wreg	equ	0xFE8
 12739                           plusw1	equ	0xFE3
 12740                           fsr1h	equ	0xFE2
 12741                           fsr1l	equ	0xFE1
 12742                           indf2	equ	0xFDF
 12743                           postinc2	equ	0xFDE
 12744                           postdec2	equ	0xFDD
 12745                           plusw2	equ	0xFDB
 12746                           fsr2h	equ	0xFDA
 12747                           fsr2l	equ	0xFD9
 12748                           status	equ	0xFD8
 12749                           
 12750 ;; *************** function ___ftdiv *****************
 12751 ;; Defined at:
 12752 ;;		line 54 in file "/opt/microchip/xc8/v1.41/sources/common/ftdiv.c"
 12753 ;; Parameters:    Size  Location     Type
 12754 ;;  f1              3   12[COMRAM] float 
 12755 ;;  f2              3   15[COMRAM] float 
 12756 ;; Auto vars:     Size  Location     Type
 12757 ;;  f3              3   22[COMRAM] float 
 12758 ;;  sign            1   26[COMRAM] unsigned char 
 12759 ;;  exp             1   25[COMRAM] unsigned char 
 12760 ;;  cntr            1   21[COMRAM] unsigned char 
 12761 ;; Return value:  Size  Location     Type
 12762 ;;                  3   12[COMRAM] float 
 12763 ;; Registers used:
 12764 ;;		wreg, status,2, status,0, cstack
 12765 ;; Tracked objects:
 12766 ;;		On entry : 0/0
 12767 ;;		On exit  : 0/0
 12768 ;;		Unchanged: 0/0
 12769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12770 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12771 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12772 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12773 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12774 ;;Total ram usage:       15 bytes
 12775 ;; Hardware stack levels used:    1
 12776 ;; Hardware stack levels required when called:    1
 12777 ;; This function calls:
 12778 ;;		i2___ftpack
 12779 ;; This function is called by:
 12780 ;;		_checkV
 12781 ;; This function uses a non-reentrant model
 12782 ;;
 12783                           
 12784                           	psect	text50
 12785  003E14                     __ptext50:
 12786                           	opt stack 0
 12787  003E14                     ___ftdiv:
 12788                           	opt stack 20
 12789                           
 12790                           ;incstack = 0
 12791  003E14  C00F  F013         	movff	___ftdiv@f1+2,??___ftdiv
 12792  003E18  6A14               	clrf	(??___ftdiv+1)& (0+255),c
 12793  003E1A  6A15               	clrf	(??___ftdiv+2)& (0+255),c
 12794  003E1C  340E               	rlcf	___ftdiv@f1+1,w,c
 12795  003E1E  3613               	rlcf	??___ftdiv& (0+255),f,c
 12796  003E20  E301               	bnc	u475_41
 12797  003E22  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
 12798  003E24                     u475_41:
 12799  003E24  5013               	movf	??___ftdiv,w,c
 12800  003E26  6E1A               	movwf	___ftdiv@exp,c
 12801  003E28  501A               	movf	___ftdiv@exp,w,c
 12802  003E2A  A4D8               	btfss	status,2,c
 12803  003E2C  D007               	goto	i2l4847
 12804  003E2E  0E00               	movlw	0
 12805  003E30  6E0D               	movwf	?___ftdiv,c
 12806  003E32  0E00               	movlw	0
 12807  003E34  6E0E               	movwf	?___ftdiv+1,c
 12808  003E36  0E00               	movlw	0
 12809  003E38  6E0F               	movwf	?___ftdiv+2,c
 12810  003E3A  0012               	return	
 12811  003E3C                     i2l4847:
 12812  003E3C  C012  F013         	movff	___ftdiv@f2+2,??___ftdiv
 12813  003E40  6A14               	clrf	(??___ftdiv+1)& (0+255),c
 12814  003E42  6A15               	clrf	(??___ftdiv+2)& (0+255),c
 12815  003E44  3411               	rlcf	___ftdiv@f2+1,w,c
 12816  003E46  3613               	rlcf	??___ftdiv& (0+255),f,c
 12817  003E48  E301               	bnc	u477_41
 12818  003E4A  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
 12819  003E4C                     u477_41:
 12820  003E4C  5013               	movf	??___ftdiv,w,c
 12821  003E4E  6E1B               	movwf	___ftdiv@sign,c
 12822  003E50  501B               	movf	___ftdiv@sign,w,c
 12823  003E52  A4D8               	btfss	status,2,c
 12824  003E54  D007               	goto	i2l4853
 12825  003E56  0E00               	movlw	0
 12826  003E58  6E0D               	movwf	?___ftdiv,c
 12827  003E5A  0E00               	movlw	0
 12828  003E5C  6E0E               	movwf	?___ftdiv+1,c
 12829  003E5E  0E00               	movlw	0
 12830  003E60  6E0F               	movwf	?___ftdiv+2,c
 12831  003E62  0012               	return	
 12832  003E64                     i2l4853:
 12833  003E64  0E00               	movlw	0
 12834  003E66  6E17               	movwf	___ftdiv@f3,c
 12835  003E68  0E00               	movlw	0
 12836  003E6A  6E18               	movwf	___ftdiv@f3+1,c
 12837  003E6C  0E00               	movlw	0
 12838  003E6E  6E19               	movwf	___ftdiv@f3+2,c
 12839  003E70  501B               	movf	___ftdiv@sign,w,c
 12840  003E72  0F89               	addlw	137
 12841  003E74  5E1A               	subwf	___ftdiv@exp,f,c
 12842  003E76  C00F  F01B         	movff	___ftdiv@f1+2,___ftdiv@sign
 12843  003E7A  5012               	movf	___ftdiv@f2+2,w,c
 12844  003E7C  1A1B               	xorwf	___ftdiv@sign,f,c
 12845  003E7E  0E80               	movlw	128
 12846  003E80  161B               	andwf	___ftdiv@sign,f,c
 12847  003E82  8E0E               	bsf	___ftdiv@f1+1,7,c
 12848  003E84  0EFF               	movlw	255
 12849  003E86  160D               	andwf	___ftdiv@f1,f,c
 12850  003E88  0EFF               	movlw	255
 12851  003E8A  160E               	andwf	___ftdiv@f1+1,f,c
 12852  003E8C  0E00               	movlw	0
 12853  003E8E  160F               	andwf	___ftdiv@f1+2,f,c
 12854  003E90  8E11               	bsf	___ftdiv@f2+1,7,c
 12855  003E92  0EFF               	movlw	255
 12856  003E94  1610               	andwf	___ftdiv@f2,f,c
 12857  003E96  0EFF               	movlw	255
 12858  003E98  1611               	andwf	___ftdiv@f2+1,f,c
 12859  003E9A  0E00               	movlw	0
 12860  003E9C  1612               	andwf	___ftdiv@f2+2,f,c
 12861  003E9E  0E18               	movlw	24
 12862  003EA0  6E16               	movwf	___ftdiv@cntr,c
 12863  003EA2                     i2l4873:
 12864  003EA2  90D8               	bcf	status,0,c
 12865  003EA4  3617               	rlcf	___ftdiv@f3,f,c
 12866  003EA6  3618               	rlcf	___ftdiv@f3+1,f,c
 12867  003EA8  3619               	rlcf	___ftdiv@f3+2,f,c
 12868  003EAA  5010               	movf	___ftdiv@f2,w,c
 12869  003EAC  5C0D               	subwf	___ftdiv@f1,w,c
 12870  003EAE  5011               	movf	___ftdiv@f2+1,w,c
 12871  003EB0  580E               	subwfb	___ftdiv@f1+1,w,c
 12872  003EB2  5012               	movf	___ftdiv@f2+2,w,c
 12873  003EB4  580F               	subwfb	___ftdiv@f1+2,w,c
 12874  003EB6  A0D8               	btfss	status,0,c
 12875  003EB8  D007               	goto	i2l892
 12876  003EBA  5010               	movf	___ftdiv@f2,w,c
 12877  003EBC  5E0D               	subwf	___ftdiv@f1,f,c
 12878  003EBE  5011               	movf	___ftdiv@f2+1,w,c
 12879  003EC0  5A0E               	subwfb	___ftdiv@f1+1,f,c
 12880  003EC2  5012               	movf	___ftdiv@f2+2,w,c
 12881  003EC4  5A0F               	subwfb	___ftdiv@f1+2,f,c
 12882  003EC6  8017               	bsf	___ftdiv@f3,0,c
 12883  003EC8                     i2l892:
 12884  003EC8  90D8               	bcf	status,0,c
 12885  003ECA  360D               	rlcf	___ftdiv@f1,f,c
 12886  003ECC  360E               	rlcf	___ftdiv@f1+1,f,c
 12887  003ECE  360F               	rlcf	___ftdiv@f1+2,f,c
 12888  003ED0  2E16               	decfsz	___ftdiv@cntr,f,c
 12889  003ED2  D7E7               	goto	i2l4873
 12890  003ED4  C017  F001         	movff	___ftdiv@f3,i2___ftpack@arg
 12891  003ED8  C018  F002         	movff	___ftdiv@f3+1,i2___ftpack@arg+1
 12892  003EDC  C019  F003         	movff	___ftdiv@f3+2,i2___ftpack@arg+2
 12893  003EE0  C01A  F004         	movff	___ftdiv@exp,i2___ftpack@exp
 12894  003EE4  C01B  F005         	movff	___ftdiv@sign,i2___ftpack@sign
 12895  003EE8  ECCB  F021         	call	i2___ftpack	;wreg free
 12896  003EEC  C001  F00D         	movff	?i2___ftpack,?___ftdiv
 12897  003EF0  C002  F00E         	movff	?i2___ftpack+1,?___ftdiv+1
 12898  003EF4  C003  F00F         	movff	?i2___ftpack+2,?___ftdiv+2
 12899  003EF8  0012               	return	
 12900  003EFA                     __end_of___ftdiv:
 12901                           	opt stack 0
 12902                           pclatu	equ	0xFFB
 12903                           pclath	equ	0xFFA
 12904                           tblptru	equ	0xFF8
 12905                           tblptrh	equ	0xFF7
 12906                           tblptrl	equ	0xFF6
 12907                           tablat	equ	0xFF5
 12908                           prodh	equ	0xFF4
 12909                           prodl	equ	0xFF3
 12910                           intcon	equ	0xFF2
 12911                           intcon3	equ	0xFF0
 12912                           postinc0	equ	0xFEE
 12913                           fsr0h	equ	0xFEA
 12914                           fsr0l	equ	0xFE9
 12915                           wreg	equ	0xFE8
 12916                           plusw1	equ	0xFE3
 12917                           fsr1h	equ	0xFE2
 12918                           fsr1l	equ	0xFE1
 12919                           indf2	equ	0xFDF
 12920                           postinc2	equ	0xFDE
 12921                           postdec2	equ	0xFDD
 12922                           plusw2	equ	0xFDB
 12923                           fsr2h	equ	0xFDA
 12924                           fsr2l	equ	0xFD9
 12925                           status	equ	0xFD8
 12926                           
 12927 ;; *************** function ___awtoft *****************
 12928 ;; Defined at:
 12929 ;;		line 32 in file "/opt/microchip/xc8/v1.41/sources/common/awtoft.c"
 12930 ;; Parameters:    Size  Location     Type
 12931 ;;  c               2    8[COMRAM] int 
 12932 ;; Auto vars:     Size  Location     Type
 12933 ;;  sign            1   11[COMRAM] unsigned char 
 12934 ;; Return value:  Size  Location     Type
 12935 ;;                  3    8[COMRAM] float 
 12936 ;; Registers used:
 12937 ;;		wreg, status,2, status,0, cstack
 12938 ;; Tracked objects:
 12939 ;;		On entry : 0/0
 12940 ;;		On exit  : 0/0
 12941 ;;		Unchanged: 0/0
 12942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12943 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12944 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12946 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12947 ;;Total ram usage:        4 bytes
 12948 ;; Hardware stack levels used:    1
 12949 ;; Hardware stack levels required when called:    1
 12950 ;; This function calls:
 12951 ;;		i2___ftpack
 12952 ;; This function is called by:
 12953 ;;		_checkV
 12954 ;; This function uses a non-reentrant model
 12955 ;;
 12956                           
 12957                           	psect	text51
 12958  004DC6                     __ptext51:
 12959                           	opt stack 0
 12960  004DC6                     ___awtoft:
 12961                           	opt stack 20
 12962                           
 12963                           ;incstack = 0
 12964  004DC6  0E00               	movlw	0
 12965  004DC8  6E0C               	movwf	___awtoft@sign,c
 12966  004DCA  AE0A               	btfss	___awtoft@c+1,7,c
 12967  004DCC  D006               	goto	i2l5023
 12968  004DCE  6C09               	negf	___awtoft@c,c
 12969  004DD0  1E0A               	comf	___awtoft@c+1,f,c
 12970  004DD2  B0D8               	btfsc	status,0,c
 12971  004DD4  2A0A               	incf	___awtoft@c+1,f,c
 12972  004DD6  0E01               	movlw	1
 12973  004DD8  6E0C               	movwf	___awtoft@sign,c
 12974  004DDA                     i2l5023:
 12975  004DDA  C009  F001         	movff	___awtoft@c,i2___ftpack@arg
 12976  004DDE  C00A  F002         	movff	___awtoft@c+1,i2___ftpack@arg+1
 12977  004DE2  6A03               	clrf	i2___ftpack@arg+2,c
 12978  004DE4  0E8E               	movlw	142
 12979  004DE6  6E04               	movwf	i2___ftpack@exp,c
 12980  004DE8  C00C  F005         	movff	___awtoft@sign,i2___ftpack@sign
 12981  004DEC  ECCB  F021         	call	i2___ftpack	;wreg free
 12982  004DF0  C001  F009         	movff	?i2___ftpack,?___awtoft
 12983  004DF4  C002  F00A         	movff	?i2___ftpack+1,?___awtoft+1
 12984  004DF8  C003  F00B         	movff	?i2___ftpack+2,?___awtoft+2
 12985  004DFC  0012               	return	
 12986  004DFE                     __end_of___awtoft:
 12987                           	opt stack 0
 12988                           pclatu	equ	0xFFB
 12989                           pclath	equ	0xFFA
 12990                           tblptru	equ	0xFF8
 12991                           tblptrh	equ	0xFF7
 12992                           tblptrl	equ	0xFF6
 12993                           tablat	equ	0xFF5
 12994                           prodh	equ	0xFF4
 12995                           prodl	equ	0xFF3
 12996                           intcon	equ	0xFF2
 12997                           intcon3	equ	0xFF0
 12998                           postinc0	equ	0xFEE
 12999                           fsr0h	equ	0xFEA
 13000                           fsr0l	equ	0xFE9
 13001                           wreg	equ	0xFE8
 13002                           plusw1	equ	0xFE3
 13003                           fsr1h	equ	0xFE2
 13004                           fsr1l	equ	0xFE1
 13005                           indf2	equ	0xFDF
 13006                           postinc2	equ	0xFDE
 13007                           postdec2	equ	0xFDD
 13008                           plusw2	equ	0xFDB
 13009                           fsr2h	equ	0xFDA
 13010                           fsr2l	equ	0xFD9
 13011                           status	equ	0xFD8
 13012                           
 13013 ;; *************** function _AD *****************
 13014 ;; Defined at:
 13015 ;;		line 4 in file "sensors.c"
 13016 ;; Parameters:    Size  Location     Type
 13017 ;;  channel         1    wreg     unsigned char 
 13018 ;; Auto vars:     Size  Location     Type
 13019 ;;  channel         1    4[COMRAM] unsigned char 
 13020 ;; Return value:  Size  Location     Type
 13021 ;;                  2    0[COMRAM] int 
 13022 ;; Registers used:
 13023 ;;		wreg, status,2, status,0
 13024 ;; Tracked objects:
 13025 ;;		On entry : 0/0
 13026 ;;		On exit  : 0/0
 13027 ;;		Unchanged: 0/0
 13028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13029 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13030 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13031 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13032 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13033 ;;Total ram usage:        5 bytes
 13034 ;; Hardware stack levels used:    1
 13035 ;; This function calls:
 13036 ;;		Nothing
 13037 ;; This function is called by:
 13038 ;;		_checkAA
 13039 ;;		_checkC
 13040 ;;		_check9
 13041 ;; This function uses a non-reentrant model
 13042 ;;
 13043                           
 13044                           	psect	text52
 13045  004F4E                     __ptext52:
 13046                           	opt stack 0
 13047  004F4E                     _AD:
 13048                           	opt stack 22
 13049                           
 13050                           ;incstack = 0
 13051                           ;AD@channel stored from wreg
 13052  004F4E  6E05               	movwf	AD@channel,c
 13053                           
 13054                           ;sensors.c: 6: ADCON0 = ((channel << 2));
 13055  004F50  4405               	rlncf	AD@channel,w,c
 13056  004F52  46E8               	rlncf	wreg,f,c
 13057  004F54  0BFC               	andlw	252
 13058  004F56  6EC2               	movwf	4034,c	;volatile
 13059                           
 13060                           ;sensors.c: 7: ADON = 1;
 13061  004F58  80C2               	bsf	4034,0,c	;volatile
 13062                           
 13063                           ;sensors.c: 8: ADCON0bits.GO = 1;
 13064  004F5A  82C2               	bsf	4034,1,c	;volatile
 13065  004F5C                     i2l305:
 13066  004F5C  B2C2               	btfsc	4034,1,c	;volatile
 13067  004F5E  D7FE               	goto	i2l305
 13068                           
 13069                           ;sensors.c: 10: return (ADRESH << 8) | ADRESL;
 13070  004F60  50C3               	movf	4035,w,c	;volatile
 13071  004F62  CFC4 F003          	movff	4036,??_AD	;volatile
 13072  004F66  6A04               	clrf	(??_AD+1)& (0+255),c
 13073  004F68  C003  F004         	movff	??_AD,??_AD+1
 13074  004F6C  6A03               	clrf	??_AD,c
 13075  004F6E  1003               	iorwf	??_AD,w,c
 13076  004F70  6E01               	movwf	?_AD,c
 13077  004F72  5004               	movf	??_AD+1,w,c
 13078  004F74  6E02               	movwf	?_AD+1,c
 13079  004F76  0012               	return	
 13080  004F78                     __end_of_AD:
 13081                           	opt stack 0
 13082                           pclatu	equ	0xFFB
 13083                           pclath	equ	0xFFA
 13084                           tblptru	equ	0xFF8
 13085                           tblptrh	equ	0xFF7
 13086                           tblptrl	equ	0xFF6
 13087                           tablat	equ	0xFF5
 13088                           prodh	equ	0xFF4
 13089                           prodl	equ	0xFF3
 13090                           intcon	equ	0xFF2
 13091                           intcon3	equ	0xFF0
 13092                           postinc0	equ	0xFEE
 13093                           fsr0h	equ	0xFEA
 13094                           fsr0l	equ	0xFE9
 13095                           wreg	equ	0xFE8
 13096                           plusw1	equ	0xFE3
 13097                           fsr1h	equ	0xFE2
 13098                           fsr1l	equ	0xFE1
 13099                           indf2	equ	0xFDF
 13100                           postinc2	equ	0xFDE
 13101                           postdec2	equ	0xFDD
 13102                           plusw2	equ	0xFDB
 13103                           fsr2h	equ	0xFDA
 13104                           fsr2l	equ	0xFD9
 13105                           status	equ	0xFD8
 13106                           
 13107 ;; *************** function _WriteRun *****************
 13108 ;; Defined at:
 13109 ;;		line 75 in file "eeprom.c"
 13110 ;; Parameters:    Size  Location     Type
 13111 ;;  sorted          2   20[COMRAM] PTR unsigned char 
 13112 ;;		 -> simulate@sorted(4), 
 13113 ;;  time            2   22[COMRAM] unsigned int 
 13114 ;; Auto vars:     Size  Location     Type
 13115 ;;  add             2   26[COMRAM] unsigned int 
 13116 ;; Return value:  Size  Location     Type
 13117 ;;                  1    wreg      void 
 13118 ;; Registers used:
 13119 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13120 ;; Tracked objects:
 13121 ;;		On entry : 0/0
 13122 ;;		On exit  : 0/0
 13123 ;;		Unchanged: 0/0
 13124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13125 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13126 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13127 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13128 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13129 ;;Total ram usage:        8 bytes
 13130 ;; Hardware stack levels used:    1
 13131 ;; Hardware stack levels required when called:    1
 13132 ;; This function calls:
 13133 ;;		_WriteEE
 13134 ;;		i2___wmul
 13135 ;; This function is called by:
 13136 ;;		_simulate
 13137 ;; This function uses a non-reentrant model
 13138 ;;
 13139                           
 13140                           	psect	text53
 13141  0030AC                     __ptext53:
 13142                           	opt stack 0
 13143  0030AC                     _WriteRun:
 13144                           	opt stack 22
 13145                           
 13146                           ;eeprom.c: 76: unsigned int add = ++Latest;
 13147                           
 13148                           ;incstack = 0
 13149  0030AC  0100               	movlb	0	; () banked
 13150  0030AE  2BD8               	incf	_Latest& (0+255),f,b
 13151  0030B0  C0D8  F01B         	movff	_Latest,WriteRun@add
 13152  0030B4  6A1C               	clrf	WriteRun@add+1,c
 13153                           
 13154                           ; BSR set to: 0
 13155                           ;eeprom.c: 77: if (add > 3) {
 13156  0030B6  501C               	movf	WriteRun@add+1,w,c
 13157  0030B8  E104               	bnz	i2u686_40
 13158  0030BA  0E04               	movlw	4
 13159  0030BC  5C1B               	subwf	WriteRun@add,w,c
 13160  0030BE  A0D8               	btfss	status,0,c
 13161  0030C0  D006               	goto	i2l6441
 13162  0030C2                     i2u686_40:
 13163                           
 13164                           ; BSR set to: 0
 13165                           ;eeprom.c: 78: add -= 4;
 13166  0030C2  0E04               	movlw	4
 13167  0030C4  5E1B               	subwf	WriteRun@add,f,c
 13168  0030C6  0E00               	movlw	0
 13169  0030C8  5A1C               	subwfb	WriteRun@add+1,f,c
 13170                           
 13171                           ; BSR set to: 0
 13172                           ;eeprom.c: 79: Latest = add;
 13173  0030CA  C01B  F0D8         	movff	WriteRun@add,_Latest
 13174  0030CE                     i2l6441:
 13175                           
 13176                           ; BSR set to: 0
 13177                           ;eeprom.c: 80: }
 13178                           ;eeprom.c: 81: add *= 5;
 13179  0030CE  C01B  F00F         	movff	WriteRun@add,i2___wmul@multiplier
 13180  0030D2  C01C  F010         	movff	WriteRun@add+1,i2___wmul@multiplier+1
 13181  0030D6  0E00               	movlw	0
 13182  0030D8  6E12               	movwf	i2___wmul@multiplicand+1,c
 13183  0030DA  0E05               	movlw	5
 13184  0030DC  6E11               	movwf	i2___wmul@multiplicand,c
 13185  0030DE  ECE2  F027         	call	i2___wmul	;wreg free
 13186  0030E2  C00F  F01B         	movff	?i2___wmul,WriteRun@add
 13187  0030E6  C010  F01C         	movff	?i2___wmul+1,WriteRun@add+1
 13188                           
 13189                           ;eeprom.c: 82: WriteEE(add++ *8, time);
 13190  0030EA  C01B  F019         	movff	WriteRun@add,??_WriteRun
 13191  0030EE  C01C  F01A         	movff	WriteRun@add+1,??_WriteRun+1
 13192  0030F2  90D8               	bcf	status,0,c
 13193  0030F4  3619               	rlcf	??_WriteRun,f,c
 13194  0030F6  361A               	rlcf	??_WriteRun+1,f,c
 13195  0030F8  90D8               	bcf	status,0,c
 13196  0030FA  3619               	rlcf	??_WriteRun,f,c
 13197  0030FC  361A               	rlcf	??_WriteRun+1,f,c
 13198  0030FE  90D8               	bcf	status,0,c
 13199  003100  3619               	rlcf	??_WriteRun,f,c
 13200  003102  361A               	rlcf	??_WriteRun+1,f,c
 13201  003104  C019  F001         	movff	??_WriteRun,WriteEE@address
 13202  003108  C01A  F002         	movff	??_WriteRun+1,WriteEE@address+1
 13203  00310C  C017  F003         	movff	WriteRun@time,WriteEE@data
 13204  003110  ECCF  F027         	call	_WriteEE	;wreg free
 13205  003114  4A1B               	infsnz	WriteRun@add,f,c
 13206  003116  2A1C               	incf	WriteRun@add+1,f,c
 13207                           
 13208                           ;eeprom.c: 83: WriteEE(add++ *8, sorted[0]);
 13209  003118  C01B  F019         	movff	WriteRun@add,??_WriteRun
 13210  00311C  C01C  F01A         	movff	WriteRun@add+1,??_WriteRun+1
 13211  003120  90D8               	bcf	status,0,c
 13212  003122  3619               	rlcf	??_WriteRun,f,c
 13213  003124  361A               	rlcf	??_WriteRun+1,f,c
 13214  003126  90D8               	bcf	status,0,c
 13215  003128  3619               	rlcf	??_WriteRun,f,c
 13216  00312A  361A               	rlcf	??_WriteRun+1,f,c
 13217  00312C  90D8               	bcf	status,0,c
 13218  00312E  3619               	rlcf	??_WriteRun,f,c
 13219  003130  361A               	rlcf	??_WriteRun+1,f,c
 13220  003132  C019  F001         	movff	??_WriteRun,WriteEE@address
 13221  003136  C01A  F002         	movff	??_WriteRun+1,WriteEE@address+1
 13222  00313A  C015  FFD9         	movff	WriteRun@sorted,fsr2l
 13223  00313E  C016  FFDA         	movff	WriteRun@sorted+1,fsr2h
 13224  003142  50DF               	movf	indf2,w,c
 13225  003144  6E03               	movwf	WriteEE@data,c
 13226  003146  ECCF  F027         	call	_WriteEE	;wreg free
 13227  00314A  4A1B               	infsnz	WriteRun@add,f,c
 13228  00314C  2A1C               	incf	WriteRun@add+1,f,c
 13229                           
 13230                           ;eeprom.c: 84: WriteEE(add++ *8, sorted[1]);
 13231  00314E  C01B  F019         	movff	WriteRun@add,??_WriteRun
 13232  003152  C01C  F01A         	movff	WriteRun@add+1,??_WriteRun+1
 13233  003156  90D8               	bcf	status,0,c
 13234  003158  3619               	rlcf	??_WriteRun,f,c
 13235  00315A  361A               	rlcf	??_WriteRun+1,f,c
 13236  00315C  90D8               	bcf	status,0,c
 13237  00315E  3619               	rlcf	??_WriteRun,f,c
 13238  003160  361A               	rlcf	??_WriteRun+1,f,c
 13239  003162  90D8               	bcf	status,0,c
 13240  003164  3619               	rlcf	??_WriteRun,f,c
 13241  003166  361A               	rlcf	??_WriteRun+1,f,c
 13242  003168  C019  F001         	movff	??_WriteRun,WriteEE@address
 13243  00316C  C01A  F002         	movff	??_WriteRun+1,WriteEE@address+1
 13244  003170  EE20 F001          	lfsr	2,1
 13245  003174  5015               	movf	WriteRun@sorted,w,c
 13246  003176  26D9               	addwf	fsr2l,f,c
 13247  003178  5016               	movf	WriteRun@sorted+1,w,c
 13248  00317A  22DA               	addwfc	fsr2h,f,c
 13249  00317C  50DF               	movf	indf2,w,c
 13250  00317E  6E03               	movwf	WriteEE@data,c
 13251  003180  ECCF  F027         	call	_WriteEE	;wreg free
 13252  003184  4A1B               	infsnz	WriteRun@add,f,c
 13253  003186  2A1C               	incf	WriteRun@add+1,f,c
 13254                           
 13255                           ;eeprom.c: 85: WriteEE(add++ *8, sorted[2]);
 13256  003188  C01B  F019         	movff	WriteRun@add,??_WriteRun
 13257  00318C  C01C  F01A         	movff	WriteRun@add+1,??_WriteRun+1
 13258  003190  90D8               	bcf	status,0,c
 13259  003192  3619               	rlcf	??_WriteRun,f,c
 13260  003194  361A               	rlcf	??_WriteRun+1,f,c
 13261  003196  90D8               	bcf	status,0,c
 13262  003198  3619               	rlcf	??_WriteRun,f,c
 13263  00319A  361A               	rlcf	??_WriteRun+1,f,c
 13264  00319C  90D8               	bcf	status,0,c
 13265  00319E  3619               	rlcf	??_WriteRun,f,c
 13266  0031A0  361A               	rlcf	??_WriteRun+1,f,c
 13267  0031A2  C019  F001         	movff	??_WriteRun,WriteEE@address
 13268  0031A6  C01A  F002         	movff	??_WriteRun+1,WriteEE@address+1
 13269  0031AA  EE20 F002          	lfsr	2,2
 13270  0031AE  5015               	movf	WriteRun@sorted,w,c
 13271  0031B0  26D9               	addwf	fsr2l,f,c
 13272  0031B2  5016               	movf	WriteRun@sorted+1,w,c
 13273  0031B4  22DA               	addwfc	fsr2h,f,c
 13274  0031B6  50DF               	movf	indf2,w,c
 13275  0031B8  6E03               	movwf	WriteEE@data,c
 13276  0031BA  ECCF  F027         	call	_WriteEE	;wreg free
 13277  0031BE  4A1B               	infsnz	WriteRun@add,f,c
 13278  0031C0  2A1C               	incf	WriteRun@add+1,f,c
 13279                           
 13280                           ;eeprom.c: 86: WriteEE(add++ *8, sorted[3]);
 13281  0031C2  C01B  F019         	movff	WriteRun@add,??_WriteRun
 13282  0031C6  C01C  F01A         	movff	WriteRun@add+1,??_WriteRun+1
 13283  0031CA  90D8               	bcf	status,0,c
 13284  0031CC  3619               	rlcf	??_WriteRun,f,c
 13285  0031CE  361A               	rlcf	??_WriteRun+1,f,c
 13286  0031D0  90D8               	bcf	status,0,c
 13287  0031D2  3619               	rlcf	??_WriteRun,f,c
 13288  0031D4  361A               	rlcf	??_WriteRun+1,f,c
 13289  0031D6  90D8               	bcf	status,0,c
 13290  0031D8  3619               	rlcf	??_WriteRun,f,c
 13291  0031DA  361A               	rlcf	??_WriteRun+1,f,c
 13292  0031DC  C019  F001         	movff	??_WriteRun,WriteEE@address
 13293  0031E0  C01A  F002         	movff	??_WriteRun+1,WriteEE@address+1
 13294  0031E4  EE20 F003          	lfsr	2,3
 13295  0031E8  5015               	movf	WriteRun@sorted,w,c
 13296  0031EA  26D9               	addwf	fsr2l,f,c
 13297  0031EC  5016               	movf	WriteRun@sorted+1,w,c
 13298  0031EE  22DA               	addwfc	fsr2h,f,c
 13299  0031F0  50DF               	movf	indf2,w,c
 13300  0031F2  6E03               	movwf	WriteEE@data,c
 13301  0031F4  ECCF  F027         	call	_WriteEE	;wreg free
 13302  0031F8  4A1B               	infsnz	WriteRun@add,f,c
 13303  0031FA  2A1C               	incf	WriteRun@add+1,f,c
 13304                           
 13305                           ;eeprom.c: 87: WriteEE(160, Latest);
 13306  0031FC  0E00               	movlw	0
 13307  0031FE  6E02               	movwf	WriteEE@address+1,c
 13308  003200  0EA0               	movlw	160
 13309  003202  6E01               	movwf	WriteEE@address,c
 13310  003204  C0D8  F003         	movff	_Latest,WriteEE@data
 13311  003208  ECCF  F027         	call	_WriteEE	;wreg free
 13312  00320C  0012               	return		;funcret
 13313  00320E                     __end_of_WriteRun:
 13314                           	opt stack 0
 13315                           pclatu	equ	0xFFB
 13316                           pclath	equ	0xFFA
 13317                           tblptru	equ	0xFF8
 13318                           tblptrh	equ	0xFF7
 13319                           tblptrl	equ	0xFF6
 13320                           tablat	equ	0xFF5
 13321                           prodh	equ	0xFF4
 13322                           prodl	equ	0xFF3
 13323                           intcon	equ	0xFF2
 13324                           intcon3	equ	0xFF0
 13325                           postinc0	equ	0xFEE
 13326                           fsr0h	equ	0xFEA
 13327                           fsr0l	equ	0xFE9
 13328                           wreg	equ	0xFE8
 13329                           plusw1	equ	0xFE3
 13330                           fsr1h	equ	0xFE2
 13331                           fsr1l	equ	0xFE1
 13332                           indf2	equ	0xFDF
 13333                           postinc2	equ	0xFDE
 13334                           postdec2	equ	0xFDD
 13335                           plusw2	equ	0xFDB
 13336                           fsr2h	equ	0xFDA
 13337                           fsr2l	equ	0xFD9
 13338                           status	equ	0xFD8
 13339                           
 13340 ;; *************** function _WriteEE *****************
 13341 ;; Defined at:
 13342 ;;		line 34 in file "eeprom.c"
 13343 ;; Parameters:    Size  Location     Type
 13344 ;;  address         2    0[COMRAM] unsigned int 
 13345 ;;  data            1    2[COMRAM] unsigned char 
 13346 ;; Auto vars:     Size  Location     Type
 13347 ;;		None
 13348 ;; Return value:  Size  Location     Type
 13349 ;;                  1    wreg      void 
 13350 ;; Registers used:
 13351 ;;		wreg, status,2
 13352 ;; Tracked objects:
 13353 ;;		On entry : 0/0
 13354 ;;		On exit  : 0/0
 13355 ;;		Unchanged: 0/0
 13356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13357 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13360 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13361 ;;Total ram usage:        3 bytes
 13362 ;; Hardware stack levels used:    1
 13363 ;; This function calls:
 13364 ;;		Nothing
 13365 ;; This function is called by:
 13366 ;;		_WriteRun
 13367 ;; This function uses a non-reentrant model
 13368 ;;
 13369                           
 13370                           	psect	text54
 13371  004F9E                     __ptext54:
 13372                           	opt stack 0
 13373  004F9E                     _WriteEE:
 13374                           	opt stack 22
 13375                           
 13376                           ;eeprom.c: 36: EEADRH = (unsigned char) (address >> 8);
 13377                           
 13378                           ;incstack = 0
 13379  004F9E  5002               	movf	WriteEE@address+1,w,c
 13380  004FA0  6EAA               	movwf	4010,c	;volatile
 13381                           
 13382                           ;eeprom.c: 37: EEADR = (unsigned char) address;
 13383  004FA2  C001  FFA9         	movff	WriteEE@address,4009	;volatile
 13384                           
 13385                           ;eeprom.c: 39: EEDATA = data;
 13386  004FA6  C003  FFA8         	movff	WriteEE@data,4008	;volatile
 13387                           
 13388                           ;eeprom.c: 40: EECON1bits.EEPGD = 0;
 13389  004FAA  9EA6               	bcf	4006,7,c	;volatile
 13390                           
 13391                           ;eeprom.c: 41: EECON1bits.CFGS = 0;
 13392  004FAC  9CA6               	bcf	4006,6,c	;volatile
 13393                           
 13394                           ;eeprom.c: 42: EECON1bits.WREN = 1;
 13395  004FAE  84A6               	bsf	4006,2,c	;volatile
 13396                           
 13397                           ;eeprom.c: 46: EECON2 = 0x55;
 13398  004FB0  0E55               	movlw	85
 13399  004FB2  6EA7               	movwf	4007,c	;volatile
 13400                           
 13401                           ;eeprom.c: 47: EECON2 = 0xAA;
 13402  004FB4  0EAA               	movlw	170
 13403  004FB6  6EA7               	movwf	4007,c	;volatile
 13404                           
 13405                           ;eeprom.c: 48: EECON1bits.WR = 1;
 13406  004FB8  82A6               	bsf	4006,1,c	;volatile
 13407  004FBA                     i2l426:
 13408  004FBA  A8A1               	btfss	4001,4,c	;volatile
 13409  004FBC  D7FE               	goto	i2l426
 13410                           
 13411                           ;eeprom.c: 53: PIR2bits.EEIF = 0;
 13412  004FBE  98A1               	bcf	4001,4,c	;volatile
 13413                           
 13414                           ;eeprom.c: 54: EECON1bits.WREN = 0;
 13415  004FC0  94A6               	bcf	4006,2,c	;volatile
 13416  004FC2  0012               	return		;funcret
 13417  004FC4                     __end_of_WriteEE:
 13418                           	opt stack 0
 13419                           pclatu	equ	0xFFB
 13420                           pclath	equ	0xFFA
 13421                           tblptru	equ	0xFF8
 13422                           tblptrh	equ	0xFF7
 13423                           tblptrl	equ	0xFF6
 13424                           tablat	equ	0xFF5
 13425                           prodh	equ	0xFF4
 13426                           prodl	equ	0xFF3
 13427                           intcon	equ	0xFF2
 13428                           intcon3	equ	0xFF0
 13429                           postinc0	equ	0xFEE
 13430                           fsr0h	equ	0xFEA
 13431                           fsr0l	equ	0xFE9
 13432                           wreg	equ	0xFE8
 13433                           plusw1	equ	0xFE3
 13434                           fsr1h	equ	0xFE2
 13435                           fsr1l	equ	0xFE1
 13436                           indf2	equ	0xFDF
 13437                           postinc2	equ	0xFDE
 13438                           postdec2	equ	0xFDD
 13439                           plusw2	equ	0xFDB
 13440                           fsr2h	equ	0xFDA
 13441                           fsr2l	equ	0xFD9
 13442                           status	equ	0xFD8
 13443                           
 13444 ;; *************** function _HexDecToDec2 *****************
 13445 ;; Defined at:
 13446 ;;		line 6 in file "modules.c"
 13447 ;; Parameters:    Size  Location     Type
 13448 ;;  hex             2   20[COMRAM] unsigned int 
 13449 ;; Auto vars:     Size  Location     Type
 13450 ;;  digit           2   27[COMRAM] unsigned int 
 13451 ;;  tenth           2   25[COMRAM] unsigned int 
 13452 ;; Return value:  Size  Location     Type
 13453 ;;                  2   20[COMRAM] unsigned int 
 13454 ;; Registers used:
 13455 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 13456 ;; Tracked objects:
 13457 ;;		On entry : 0/0
 13458 ;;		On exit  : 0/0
 13459 ;;		Unchanged: 0/0
 13460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13461 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13462 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13463 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13464 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13465 ;;Total ram usage:        9 bytes
 13466 ;; Hardware stack levels used:    1
 13467 ;; Hardware stack levels required when called:    1
 13468 ;; This function calls:
 13469 ;;		i2___wmul
 13470 ;; This function is called by:
 13471 ;;		_simulate
 13472 ;; This function uses a non-reentrant model
 13473 ;;
 13474                           
 13475                           	psect	text55
 13476  004CF8                     __ptext55:
 13477                           	opt stack 0
 13478  004CF8                     _HexDecToDec2:
 13479                           	opt stack 22
 13480                           
 13481                           ;modules.c: 8: unsigned tenth = hex / 16;
 13482                           
 13483                           ;incstack = 0
 13484  004CF8  C015  F017         	movff	HexDecToDec2@hex,??_HexDecToDec2
 13485  004CFC  C016  F018         	movff	HexDecToDec2@hex+1,??_HexDecToDec2+1
 13486  004D00  0E04               	movlw	4
 13487  004D02  6E19               	movwf	(??_HexDecToDec2+2)& (0+255),c
 13488  004D04                     i2u682_45:
 13489  004D04  90D8               	bcf	status,0,c
 13490  004D06  3218               	rrcf	??_HexDecToDec2+1,f,c
 13491  004D08  3217               	rrcf	??_HexDecToDec2,f,c
 13492  004D0A  2E19               	decfsz	(??_HexDecToDec2+2)& (0+255),f,c
 13493  004D0C  D7FB               	goto	i2u682_45
 13494  004D0E  C017  F01A         	movff	??_HexDecToDec2,HexDecToDec2@tenth
 13495  004D12  C018  F01B         	movff	??_HexDecToDec2+1,HexDecToDec2@tenth+1
 13496                           
 13497                           ;modules.c: 9: unsigned digit = hex % 16;
 13498  004D16  0E0F               	movlw	15
 13499  004D18  1415               	andwf	HexDecToDec2@hex,w,c
 13500  004D1A  6E1C               	movwf	HexDecToDec2@digit,c
 13501  004D1C  6A1D               	clrf	HexDecToDec2@digit+1,c
 13502                           
 13503                           ;modules.c: 10: return tenth * 10 + digit;
 13504  004D1E  C01A  F00F         	movff	HexDecToDec2@tenth,i2___wmul@multiplier
 13505  004D22  C01B  F010         	movff	HexDecToDec2@tenth+1,i2___wmul@multiplier+1
 13506  004D26  0E00               	movlw	0
 13507  004D28  6E12               	movwf	i2___wmul@multiplicand+1,c
 13508  004D2A  0E0A               	movlw	10
 13509  004D2C  6E11               	movwf	i2___wmul@multiplicand,c
 13510  004D2E  ECE2  F027         	call	i2___wmul	;wreg free
 13511  004D32  501C               	movf	HexDecToDec2@digit,w,c
 13512  004D34  240F               	addwf	?i2___wmul,w,c
 13513  004D36  6E15               	movwf	?_HexDecToDec2,c
 13514  004D38  501D               	movf	HexDecToDec2@digit+1,w,c
 13515  004D3A  2010               	addwfc	?i2___wmul+1,w,c
 13516  004D3C  6E16               	movwf	?_HexDecToDec2+1,c
 13517  004D3E  0012               	return	
 13518  004D40                     __end_of_HexDecToDec2:
 13519                           	opt stack 0
 13520                           pclatu	equ	0xFFB
 13521                           pclath	equ	0xFFA
 13522                           tblptru	equ	0xFF8
 13523                           tblptrh	equ	0xFF7
 13524                           tblptrl	equ	0xFF6
 13525                           tablat	equ	0xFF5
 13526                           prodh	equ	0xFF4
 13527                           prodl	equ	0xFF3
 13528                           intcon	equ	0xFF2
 13529                           intcon3	equ	0xFF0
 13530                           postinc0	equ	0xFEE
 13531                           fsr0h	equ	0xFEA
 13532                           fsr0l	equ	0xFE9
 13533                           wreg	equ	0xFE8
 13534                           plusw1	equ	0xFE3
 13535                           fsr1h	equ	0xFE2
 13536                           fsr1l	equ	0xFE1
 13537                           indf2	equ	0xFDF
 13538                           postinc2	equ	0xFDE
 13539                           postdec2	equ	0xFDD
 13540                           plusw2	equ	0xFDB
 13541                           fsr2h	equ	0xFDA
 13542                           fsr2l	equ	0xFD9
 13543                           status	equ	0xFD8
 13544                           
 13545 ;; *************** function _CW90 *****************
 13546 ;; Defined at:
 13547 ;;		line 19 in file "motors.c"
 13548 ;; Parameters:    Size  Location     Type
 13549 ;;  port            2  112[COMRAM] PTR int 
 13550 ;;		 -> simulate@portCW(6), 
 13551 ;; Auto vars:     Size  Location     Type
 13552 ;;		None
 13553 ;; Return value:  Size  Location     Type
 13554 ;;                  1    wreg      void 
 13555 ;; Registers used:
 13556 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13557 ;; Tracked objects:
 13558 ;;		On entry : 0/0
 13559 ;;		On exit  : 0/0
 13560 ;;		Unchanged: 0/0
 13561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13562 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13565 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13566 ;;Total ram usage:        2 bytes
 13567 ;; Hardware stack levels used:    1
 13568 ;; Hardware stack levels required when called:    4
 13569 ;; This function calls:
 13570 ;;		_PWMC
 13571 ;;		i2_line0
 13572 ;;		i2_printf
 13573 ;; This function is called by:
 13574 ;;		_simulate
 13575 ;; This function uses a non-reentrant model
 13576 ;;
 13577                           
 13578                           	psect	text56
 13579  004EC8                     __ptext56:
 13580                           	opt stack 0
 13581  004EC8                     _CW90:
 13582                           	opt stack 19
 13583                           
 13584                           ;motors.c: 20: line0();printf("move clockwise  ");
 13585                           
 13586                           ;incstack = 0
 13587  004EC8  ECBD  F028         	call	i2_line0	;wreg free
 13588  004ECC  0E55               	movlw	low STR_33
 13589  004ECE  6E47               	movwf	i2printf@f,c
 13590  004ED0  0EFF               	movlw	high STR_33
 13591  004ED2  6E48               	movwf	i2printf@f+1,c
 13592  004ED4  EC09  F006         	call	i2_printf	;wreg free
 13593                           
 13594                           ;motors.c: 21: PWMC(3000, 96, port);
 13595  004ED8  0E0B               	movlw	11
 13596  004EDA  6E10               	movwf	PWMC@widthus+1,c
 13597  004EDC  0EB8               	movlw	184
 13598  004EDE  6E0F               	movwf	PWMC@widthus,c
 13599  004EE0  0E00               	movlw	0
 13600  004EE2  6E12               	movwf	PWMC@cycles+1,c
 13601  004EE4  0E60               	movlw	96
 13602  004EE6  6E11               	movwf	PWMC@cycles,c
 13603  004EE8  C071  F013         	movff	CW90@port,PWMC@port
 13604  004EEC  C072  F014         	movff	CW90@port+1,PWMC@port+1
 13605  004EF0  EC91  F01E         	call	_PWMC	;wreg free
 13606  004EF4  0012               	return		;funcret
 13607  004EF6                     __end_of_CW90:
 13608                           	opt stack 0
 13609                           pclatu	equ	0xFFB
 13610                           pclath	equ	0xFFA
 13611                           tblptru	equ	0xFF8
 13612                           tblptrh	equ	0xFF7
 13613                           tblptrl	equ	0xFF6
 13614                           tablat	equ	0xFF5
 13615                           prodh	equ	0xFF4
 13616                           prodl	equ	0xFF3
 13617                           intcon	equ	0xFF2
 13618                           intcon3	equ	0xFF0
 13619                           postinc0	equ	0xFEE
 13620                           fsr0h	equ	0xFEA
 13621                           fsr0l	equ	0xFE9
 13622                           wreg	equ	0xFE8
 13623                           plusw1	equ	0xFE3
 13624                           fsr1h	equ	0xFE2
 13625                           fsr1l	equ	0xFE1
 13626                           indf2	equ	0xFDF
 13627                           postinc2	equ	0xFDE
 13628                           postdec2	equ	0xFDD
 13629                           plusw2	equ	0xFDB
 13630                           fsr2h	equ	0xFDA
 13631                           fsr2l	equ	0xFD9
 13632                           status	equ	0xFD8
 13633                           
 13634 ;; *************** function _CCW90 *****************
 13635 ;; Defined at:
 13636 ;;		line 24 in file "motors.c"
 13637 ;; Parameters:    Size  Location     Type
 13638 ;;  port            2  112[COMRAM] PTR int 
 13639 ;;		 -> simulate@portCCW(6), 
 13640 ;; Auto vars:     Size  Location     Type
 13641 ;;		None
 13642 ;; Return value:  Size  Location     Type
 13643 ;;                  1    wreg      void 
 13644 ;; Registers used:
 13645 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13646 ;; Tracked objects:
 13647 ;;		On entry : 0/0
 13648 ;;		On exit  : 0/0
 13649 ;;		Unchanged: 0/0
 13650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13651 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13654 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13655 ;;Total ram usage:        2 bytes
 13656 ;; Hardware stack levels used:    1
 13657 ;; Hardware stack levels required when called:    4
 13658 ;; This function calls:
 13659 ;;		_PWMC
 13660 ;;		i2_line1
 13661 ;;		i2_printf
 13662 ;; This function is called by:
 13663 ;;		_simulate
 13664 ;; This function uses a non-reentrant model
 13665 ;;
 13666                           
 13667                           	psect	text57
 13668  004EF6                     __ptext57:
 13669                           	opt stack 0
 13670  004EF6                     _CCW90:
 13671                           	opt stack 19
 13672                           
 13673                           ;motors.c: 25: line1();printf("move cclockwise    ");
 13674                           
 13675                           ;incstack = 0
 13676  004EF6  ECB9  F028         	call	i2_line1	;wreg free
 13677  004EFA  0EBD               	movlw	low STR_34
 13678  004EFC  6E47               	movwf	i2printf@f,c
 13679  004EFE  0EFE               	movlw	high STR_34
 13680  004F00  6E48               	movwf	i2printf@f+1,c
 13681  004F02  EC09  F006         	call	i2_printf	;wreg free
 13682                           
 13683                           ;motors.c: 26: PWMC(400, 700, port);
 13684  004F06  0E01               	movlw	1
 13685  004F08  6E10               	movwf	PWMC@widthus+1,c
 13686  004F0A  0E90               	movlw	144
 13687  004F0C  6E0F               	movwf	PWMC@widthus,c
 13688  004F0E  0E02               	movlw	2
 13689  004F10  6E12               	movwf	PWMC@cycles+1,c
 13690  004F12  0EBC               	movlw	188
 13691  004F14  6E11               	movwf	PWMC@cycles,c
 13692  004F16  C071  F013         	movff	CCW90@port,PWMC@port
 13693  004F1A  C072  F014         	movff	CCW90@port+1,PWMC@port+1
 13694  004F1E  EC91  F01E         	call	_PWMC	;wreg free
 13695  004F22  0012               	return		;funcret
 13696  004F24                     __end_of_CCW90:
 13697                           	opt stack 0
 13698                           pclatu	equ	0xFFB
 13699                           pclath	equ	0xFFA
 13700                           tblptru	equ	0xFF8
 13701                           tblptrh	equ	0xFF7
 13702                           tblptrl	equ	0xFF6
 13703                           tablat	equ	0xFF5
 13704                           prodh	equ	0xFF4
 13705                           prodl	equ	0xFF3
 13706                           intcon	equ	0xFF2
 13707                           intcon3	equ	0xFF0
 13708                           postinc0	equ	0xFEE
 13709                           fsr0h	equ	0xFEA
 13710                           fsr0l	equ	0xFE9
 13711                           wreg	equ	0xFE8
 13712                           plusw1	equ	0xFE3
 13713                           fsr1h	equ	0xFE2
 13714                           fsr1l	equ	0xFE1
 13715                           indf2	equ	0xFDF
 13716                           postinc2	equ	0xFDE
 13717                           postdec2	equ	0xFDD
 13718                           plusw2	equ	0xFDB
 13719                           fsr2h	equ	0xFDA
 13720                           fsr2l	equ	0xFD9
 13721                           status	equ	0xFD8
 13722                           
 13723 ;; *************** function _PWMC *****************
 13724 ;; Defined at:
 13725 ;;		line 4 in file "motors.c"
 13726 ;; Parameters:    Size  Location     Type
 13727 ;;  widthus         2   14[COMRAM] int 
 13728 ;;  cycles          2   16[COMRAM] int 
 13729 ;;  port            2   18[COMRAM] PTR int 
 13730 ;;		 -> simulate@portCCW(6), simulate@portCW(6), 
 13731 ;; Auto vars:     Size  Location     Type
 13732 ;;  countdown       2   25[COMRAM] int 
 13733 ;; Return value:  Size  Location     Type
 13734 ;;                  1    wreg      void 
 13735 ;; Registers used:
 13736 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13737 ;; Tracked objects:
 13738 ;;		On entry : 0/0
 13739 ;;		On exit  : 0/0
 13740 ;;		Unchanged: 0/0
 13741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13742 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13743 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13744 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13745 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13746 ;;Total ram usage:       13 bytes
 13747 ;; Hardware stack levels used:    1
 13748 ;; Hardware stack levels required when called:    1
 13749 ;; This function calls:
 13750 ;;		i2___awdiv
 13751 ;; This function is called by:
 13752 ;;		_CW90
 13753 ;;		_CCW90
 13754 ;; This function uses a non-reentrant model
 13755 ;;
 13756                           
 13757                           	psect	text58
 13758  003D22                     __ptext58:
 13759                           	opt stack 0
 13760  003D22                     _PWMC:
 13761                           	opt stack 21
 13762                           
 13763                           ;motors.c: 5: widthus /= 10;
 13764                           
 13765                           ;incstack = 0
 13766  003D22  C00F  F007         	movff	PWMC@widthus,i2___awdiv@dividend
 13767  003D26  C010  F008         	movff	PWMC@widthus+1,i2___awdiv@dividend+1
 13768  003D2A  0E00               	movlw	0
 13769  003D2C  6E0A               	movwf	i2___awdiv@divisor+1,c
 13770  003D2E  0E0A               	movlw	10
 13771  003D30  6E09               	movwf	i2___awdiv@divisor,c
 13772  003D32  EC90  F023         	call	i2___awdiv	;wreg free
 13773  003D36  C007  F00F         	movff	?i2___awdiv,PWMC@widthus
 13774  003D3A  C008  F010         	movff	?i2___awdiv+1,PWMC@widthus+1
 13775                           
 13776                           ;motors.c: 6: widthus -= 1;
 13777  003D3E  060F               	decf	PWMC@widthus,f,c
 13778  003D40  A0D8               	btfss	status,0,c
 13779  003D42  0610               	decf	PWMC@widthus+1,f,c
 13780                           
 13781                           ;motors.c: 7: int countdown = widthus;
 13782  003D44  C00F  F01A         	movff	PWMC@widthus,PWMC@countdown
 13783  003D48  C010  F01B         	movff	PWMC@widthus+1,PWMC@countdown+1
 13784  003D4C                     i2l5379:
 13785  003D4C  BE12               	btfsc	PWMC@cycles+1,7,c
 13786  003D4E  0012               	return	
 13787  003D50  5012               	movf	PWMC@cycles+1,w,c
 13788  003D52  E103               	bnz	i2l265
 13789  003D54  0411               	decf	PWMC@cycles,w,c
 13790  003D56  A0D8               	btfss	status,0,c
 13791  003D58  0012               	return	
 13792  003D5A                     i2l265:
 13793                           
 13794                           ;motors.c: 9: countdown = widthus;
 13795  003D5A  C00F  F01A         	movff	PWMC@widthus,PWMC@countdown
 13796  003D5E  C010  F01B         	movff	PWMC@widthus+1,PWMC@countdown+1
 13797                           
 13798                           ;motors.c: 10: LATC0 = (1 ^ LATC0) & port[0];
 13799  003D62  0E00               	movlw	0
 13800  003D64  6E17               	movwf	_PWMC$1442,c
 13801  003D66  B08B               	btfsc	3979,0,c	;volatile
 13802  003D68  D00D               	goto	i2l5391
 13803  003D6A  C013  FFD9         	movff	PWMC@port,fsr2l
 13804  003D6E  C014  FFDA         	movff	PWMC@port+1,fsr2h
 13805  003D72  CFDE F015          	movff	postinc2,??_PWMC
 13806  003D76  CFDD F016          	movff	postdec2,??_PWMC+1
 13807  003D7A  3015               	rrcf	??_PWMC,w,c
 13808  003D7C  A0D8               	btfss	status,0,c
 13809  003D7E  D002               	goto	i2l5391
 13810  003D80  0E01               	movlw	1
 13811  003D82  6E17               	movwf	_PWMC$1442,c
 13812  003D84                     i2l5391:
 13813  003D84  B017               	btfsc	_PWMC$1442,0,c
 13814  003D86  D002               	bra	i2u561_45
 13815  003D88  908B               	bcf	3979,0,c	;volatile
 13816  003D8A  D001               	bra	i2u561_46
 13817  003D8C                     i2u561_45:
 13818  003D8C  808B               	bsf	3979,0,c	;volatile
 13819  003D8E                     i2u561_46:
 13820                           
 13821                           ;motors.c: 11: LATC1 = (1 ^ LATC1) & port[1];
 13822  003D8E  0E00               	movlw	0
 13823  003D90  6E18               	movwf	_PWMC$1443,c
 13824  003D92  B28B               	btfsc	3979,1,c	;volatile
 13825  003D94  D00F               	goto	i2l5399
 13826  003D96  EE20 F002          	lfsr	2,2
 13827  003D9A  5013               	movf	PWMC@port,w,c
 13828  003D9C  26D9               	addwf	fsr2l,f,c
 13829  003D9E  5014               	movf	PWMC@port+1,w,c
 13830  003DA0  22DA               	addwfc	fsr2h,f,c
 13831  003DA2  CFDE F015          	movff	postinc2,??_PWMC
 13832  003DA6  CFDD F016          	movff	postdec2,??_PWMC+1
 13833  003DAA  3015               	rrcf	??_PWMC,w,c
 13834  003DAC  A0D8               	btfss	status,0,c
 13835  003DAE  D002               	goto	i2l5399
 13836  003DB0  0E01               	movlw	1
 13837  003DB2  6E18               	movwf	_PWMC$1443,c
 13838  003DB4                     i2l5399:
 13839  003DB4  B018               	btfsc	_PWMC$1443,0,c
 13840  003DB6  D002               	bra	i2u564_45
 13841  003DB8  928B               	bcf	3979,1,c	;volatile
 13842  003DBA  D001               	bra	i2u564_46
 13843  003DBC                     i2u564_45:
 13844  003DBC  828B               	bsf	3979,1,c	;volatile
 13845  003DBE                     i2u564_46:
 13846                           
 13847                           ;motors.c: 12: LATC2 = (1 ^ LATC2) & port[2];
 13848  003DBE  0E00               	movlw	0
 13849  003DC0  6E19               	movwf	_PWMC$1444,c
 13850  003DC2  B48B               	btfsc	3979,2,c	;volatile
 13851  003DC4  D00F               	goto	i2l5407
 13852  003DC6  EE20 F004          	lfsr	2,4
 13853  003DCA  5013               	movf	PWMC@port,w,c
 13854  003DCC  26D9               	addwf	fsr2l,f,c
 13855  003DCE  5014               	movf	PWMC@port+1,w,c
 13856  003DD0  22DA               	addwfc	fsr2h,f,c
 13857  003DD2  CFDE F015          	movff	postinc2,??_PWMC
 13858  003DD6  CFDD F016          	movff	postdec2,??_PWMC+1
 13859  003DDA  3015               	rrcf	??_PWMC,w,c
 13860  003DDC  A0D8               	btfss	status,0,c
 13861  003DDE  D002               	goto	i2l5407
 13862  003DE0  0E01               	movlw	1
 13863  003DE2  6E19               	movwf	_PWMC$1444,c
 13864  003DE4                     i2l5407:
 13865  003DE4  B019               	btfsc	_PWMC$1444,0,c
 13866  003DE6  D002               	bra	i2u567_45
 13867  003DE8  948B               	bcf	3979,2,c	;volatile
 13868  003DEA  D001               	bra	i2u567_46
 13869  003DEC                     i2u567_45:
 13870  003DEC  848B               	bsf	3979,2,c	;volatile
 13871  003DEE                     i2u567_46:
 13872  003DEE                     i2l5409:
 13873  003DEE  BE1B               	btfsc	PWMC@countdown+1,7,c
 13874  003DF0  D00D               	goto	i2l5417
 13875  003DF2  501B               	movf	PWMC@countdown+1,w,c
 13876  003DF4  E103               	bnz	i2l5413
 13877  003DF6  041A               	decf	PWMC@countdown,w,c
 13878  003DF8  A0D8               	btfss	status,0,c
 13879  003DFA  D008               	goto	i2l5417
 13880  003DFC                     i2l5413:
 13881                           
 13882                           ;motors.c: 14: _delay((unsigned long)((5)*(8000000/4000000.0)));
 13883  003DFC  0E03               	movlw	3
 13884  003DFE                     i2u858_47:
 13885  003DFE  2EE8               	decfsz	wreg,f,c
 13886  003E00  D7FE               	bra	i2u858_47
 13887  003E02  F000               	nop	
 13888  003E04  061A               	decf	PWMC@countdown,f,c
 13889  003E06  A0D8               	btfss	status,0,c
 13890  003E08  061B               	decf	PWMC@countdown+1,f,c
 13891  003E0A  D7F1               	goto	i2l5409
 13892  003E0C                     i2l5417:
 13893  003E0C  0611               	decf	PWMC@cycles,f,c
 13894  003E0E  A0D8               	btfss	status,0,c
 13895  003E10  0612               	decf	PWMC@cycles+1,f,c
 13896  003E12  D79C               	goto	i2l5379
 13897  003E14                     __end_of_PWMC:
 13898                           	opt stack 0
 13899                           pclatu	equ	0xFFB
 13900                           pclath	equ	0xFFA
 13901                           tblptru	equ	0xFF8
 13902                           tblptrh	equ	0xFF7
 13903                           tblptrl	equ	0xFF6
 13904                           tablat	equ	0xFF5
 13905                           prodh	equ	0xFF4
 13906                           prodl	equ	0xFF3
 13907                           intcon	equ	0xFF2
 13908                           intcon3	equ	0xFF0
 13909                           postinc0	equ	0xFEE
 13910                           fsr0h	equ	0xFEA
 13911                           fsr0l	equ	0xFE9
 13912                           wreg	equ	0xFE8
 13913                           plusw1	equ	0xFE3
 13914                           fsr1h	equ	0xFE2
 13915                           fsr1l	equ	0xFE1
 13916                           indf2	equ	0xFDF
 13917                           postinc2	equ	0xFDE
 13918                           postdec2	equ	0xFDD
 13919                           plusw2	equ	0xFDB
 13920                           fsr2h	equ	0xFDA
 13921                           fsr2l	equ	0xFD9
 13922                           status	equ	0xFD8
 13923                           
 13924 ;; *************** function _PermLog *****************
 13925 ;; Defined at:
 13926 ;;		line 90 in file "eeprom.c"
 13927 ;; Parameters:    Size  Location     Type
 13928 ;;  backruns        1    wreg     unsigned char 
 13929 ;; Auto vars:     Size  Location     Type
 13930 ;;  backruns        1    6[BANK0 ] unsigned char 
 13931 ;;  sorted          4    2[BANK0 ] unsigned char [4]
 13932 ;;  time            2    7[BANK0 ] unsigned int 
 13933 ;; Return value:  Size  Location     Type
 13934 ;;                  1    wreg      void 
 13935 ;; Registers used:
 13936 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13937 ;; Tracked objects:
 13938 ;;		On entry : 0/0
 13939 ;;		On exit  : 0/0
 13940 ;;		Unchanged: 0/0
 13941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13943 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13944 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13945 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13946 ;;Total ram usage:        9 bytes
 13947 ;; Hardware stack levels used:    1
 13948 ;; Hardware stack levels required when called:    5
 13949 ;; This function calls:
 13950 ;;		_ReadRun
 13951 ;;		_showInfo
 13952 ;;		i2_line0
 13953 ;;		i2_line1
 13954 ;;		i2_printf
 13955 ;; This function is called by:
 13956 ;;		_keypressed
 13957 ;; This function uses a non-reentrant model
 13958 ;;
 13959                           
 13960                           	psect	text59
 13961  0047A4                     __ptext59:
 13962                           	opt stack 0
 13963  0047A4                     _PermLog:
 13964                           	opt stack 19
 13965                           
 13966                           ;incstack = 0
 13967                           ;PermLog@backruns stored from wreg
 13968  0047A4  0100               	movlb	0	; () banked
 13969  0047A6  6F86               	movwf	PermLog@backruns& (0+255),b
 13970                           
 13971                           ;eeprom.c: 91: unsigned int time;
 13972                           ;eeprom.c: 92: unsigned char sorted[] = {0, 0, 0, 0};
 13973  0047A8  C0C2  F082         	movff	PermLog@F3084,PermLog@sorted
 13974  0047AC  C0C3  F083         	movff	PermLog@F3084+1,PermLog@sorted+1
 13975  0047B0  C0C4  F084         	movff	PermLog@F3084+2,PermLog@sorted+2
 13976  0047B4  C0C5  F085         	movff	PermLog@F3084+3,PermLog@sorted+3
 13977                           
 13978                           ;eeprom.c: 93: ReadRun(backruns, sorted, &time);
 13979  0047B8  0E82               	movlw	low PermLog@sorted
 13980  0047BA  6E03               	movwf	ReadRun@sorted,c
 13981  0047BC  0E00               	movlw	high PermLog@sorted
 13982  0047BE  6E04               	movwf	ReadRun@sorted+1,c
 13983  0047C0  0E87               	movlw	low PermLog@time
 13984  0047C2  6E05               	movwf	ReadRun@time,c
 13985  0047C4  0E00               	movlw	high PermLog@time
 13986  0047C6  6E06               	movwf	ReadRun@time+1,c
 13987  0047C8  0100               	movlb	0	; () banked
 13988  0047CA  5186               	movf	PermLog@backruns& (0+255),w,b
 13989  0047CC  ECF1  F01A         	call	_ReadRun
 13990                           
 13991                           ;eeprom.c: 94: line0();
 13992  0047D0  ECBD  F028         	call	i2_line0	;wreg free
 13993                           
 13994                           ;eeprom.c: 95: printf("showing %u", backruns);
 13995  0047D4  0EEB               	movlw	low STR_50
 13996  0047D6  6E47               	movwf	i2printf@f,c
 13997  0047D8  0EFF               	movlw	high STR_50
 13998  0047DA  6E48               	movwf	i2printf@f+1,c
 13999  0047DC  C086  F049         	movff	PermLog@backruns,?i2_printf+2
 14000  0047E0  6A4A               	clrf	?i2_printf+3,c
 14001  0047E2  EC09  F006         	call	i2_printf	;wreg free
 14002                           
 14003                           ;eeprom.c: 96: line1();
 14004  0047E6  ECB9  F028         	call	i2_line1	;wreg free
 14005                           
 14006                           ;eeprom.c: 97: printf("runs before");
 14007  0047EA  0EDF               	movlw	low STR_51
 14008  0047EC  6E47               	movwf	i2printf@f,c
 14009  0047EE  0EFF               	movlw	high STR_51
 14010  0047F0  6E48               	movwf	i2printf@f+1,c
 14011  0047F2  EC09  F006         	call	i2_printf	;wreg free
 14012                           
 14013                           ;eeprom.c: 98: _delay((unsigned long)((700)*(8000000/4000.0)));
 14014  0047F6  0E08               	movlw	8
 14015  0047F8  0100               	movlb	0	; () banked
 14016  0047FA  6F81               	movwf	(??_PermLog+1)& (0+255),b
 14017  0047FC  0E1B               	movlw	27
 14018  0047FE  0100               	movlb	0	; () banked
 14019  004800  6F80               	movwf	??_PermLog& (0+255),b
 14020  004802  0E27               	movlw	39
 14021  004804                     i2u859_47:
 14022  004804  2EE8               	decfsz	wreg,f,c
 14023  004806  D7FE               	bra	i2u859_47
 14024  004808  2F80               	decfsz	??_PermLog& (0+255),f,b
 14025  00480A  D7FC               	bra	i2u859_47
 14026  00480C  2F81               	decfsz	(??_PermLog+1)& (0+255),f,b
 14027  00480E  D7FA               	bra	i2u859_47
 14028                           
 14029                           ;eeprom.c: 99: showInfo(time, sorted);
 14030  004810  C087  F071         	movff	PermLog@time,showInfo@time
 14031  004814  C088  F072         	movff	PermLog@time+1,showInfo@time+1
 14032  004818  0E82               	movlw	low PermLog@sorted
 14033  00481A  6E73               	movwf	showInfo@sorted,c
 14034  00481C  0E00               	movlw	high PermLog@sorted
 14035  00481E  6E74               	movwf	showInfo@sorted+1,c
 14036  004820  ECE3  F014         	call	_showInfo	;wreg free
 14037  004824  0012               	return		;funcret
 14038  004826                     __end_of_PermLog:
 14039                           	opt stack 0
 14040                           pclatu	equ	0xFFB
 14041                           pclath	equ	0xFFA
 14042                           tblptru	equ	0xFF8
 14043                           tblptrh	equ	0xFF7
 14044                           tblptrl	equ	0xFF6
 14045                           tablat	equ	0xFF5
 14046                           prodh	equ	0xFF4
 14047                           prodl	equ	0xFF3
 14048                           intcon	equ	0xFF2
 14049                           intcon3	equ	0xFF0
 14050                           postinc0	equ	0xFEE
 14051                           fsr0h	equ	0xFEA
 14052                           fsr0l	equ	0xFE9
 14053                           wreg	equ	0xFE8
 14054                           plusw1	equ	0xFE3
 14055                           fsr1h	equ	0xFE2
 14056                           fsr1l	equ	0xFE1
 14057                           indf2	equ	0xFDF
 14058                           postinc2	equ	0xFDE
 14059                           postdec2	equ	0xFDD
 14060                           plusw2	equ	0xFDB
 14061                           fsr2h	equ	0xFDA
 14062                           fsr2l	equ	0xFD9
 14063                           status	equ	0xFD8
 14064                           
 14065 ;; *************** function _showInfo *****************
 14066 ;; Defined at:
 14067 ;;		line 23 in file "modules.c"
 14068 ;; Parameters:    Size  Location     Type
 14069 ;;  time            2  112[COMRAM] unsigned int 
 14070 ;;  sorted          2  114[COMRAM] PTR unsigned char 
 14071 ;;		 -> PermLog@sorted(4), simulate@sorted(4), 
 14072 ;; Auto vars:     Size  Location     Type
 14073 ;;  stop            2  123[COMRAM] int 
 14074 ;;  type            2  121[COMRAM] int 
 14075 ;; Return value:  Size  Location     Type
 14076 ;;                  1    wreg      void 
 14077 ;; Registers used:
 14078 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14079 ;; Tracked objects:
 14080 ;;		On entry : 0/0
 14081 ;;		On exit  : 0/0
 14082 ;;		Unchanged: 0/0
 14083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14084 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14085 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14086 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14087 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14088 ;;Total ram usage:       13 bytes
 14089 ;; Hardware stack levels used:    1
 14090 ;; Hardware stack levels required when called:    4
 14091 ;; This function calls:
 14092 ;;		_captureKeypad
 14093 ;;		i2_line0
 14094 ;;		i2_line1
 14095 ;;		i2_printf
 14096 ;; This function is called by:
 14097 ;;		_simulate
 14098 ;;		_PermLog
 14099 ;; This function uses a non-reentrant model
 14100 ;;
 14101                           
 14102                           	psect	text60
 14103  0029C6                     __ptext60:
 14104                           	opt stack 0
 14105  0029C6                     _showInfo:
 14106                           	opt stack 19
 14107                           
 14108                           ;modules.c: 24: line0();
 14109                           
 14110                           ;incstack = 0
 14111  0029C6  ECBD  F028         	call	i2_line0	;wreg free
 14112                           
 14113                           ;modules.c: 25: printf("Press a number          ");
 14114  0029CA  0E92               	movlw	low STR_19
 14115  0029CC  6E47               	movwf	i2printf@f,c
 14116  0029CE  0EFC               	movlw	high STR_19
 14117  0029D0  6E48               	movwf	i2printf@f+1,c
 14118  0029D2  EC09  F006         	call	i2_printf	;wreg free
 14119                           
 14120                           ;modules.c: 26: line1();
 14121  0029D6  ECB9  F028         	call	i2_line1	;wreg free
 14122                           
 14123                           ;modules.c: 27: printf("For more info          ");
 14124  0029DA  0EDB               	movlw	low STR_20
 14125  0029DC  6E47               	movwf	i2printf@f,c
 14126  0029DE  0EFC               	movlw	high STR_20
 14127  0029E0  6E48               	movwf	i2printf@f+1,c
 14128  0029E2  EC09  F006         	call	i2_printf	;wreg free
 14129                           
 14130                           ;modules.c: 28: int type = 0;
 14131  0029E6  0E00               	movlw	0
 14132  0029E8  6E7B               	movwf	showInfo@type+1,c
 14133  0029EA  0E00               	movlw	0
 14134  0029EC  6E7A               	movwf	showInfo@type,c
 14135                           
 14136                           ;modules.c: 29: int stop = 0;
 14137  0029EE  0E00               	movlw	0
 14138  0029F0  6E7D               	movwf	showInfo@stop+1,c
 14139  0029F2  0E00               	movlw	0
 14140  0029F4  D0CC               	goto	L6
 14141  0029F6                     i2l6385:
 14142                           
 14143                           ;modules.c: 31: type = captureKeypad();
 14144  0029F6  EC27  F028         	call	_captureKeypad	;wreg free
 14145  0029FA  C001  F07A         	movff	?_captureKeypad,showInfo@type
 14146  0029FE  C002  F07B         	movff	?_captureKeypad+1,showInfo@type+1
 14147                           
 14148                           ;modules.c: 32: switch (type) {
 14149  002A02  D0C7               	goto	i2l6425
 14150  002A04                     i2l6387:
 14151                           
 14152                           ;modules.c: 34: line0();
 14153  002A04  ECBD  F028         	call	i2_line0	;wreg free
 14154                           
 14155                           ;modules.c: 35: printf("Time Elapsed:          ");
 14156  002A08  0EAB               	movlw	low STR_21
 14157  002A0A  6E47               	movwf	i2printf@f,c
 14158  002A0C  0EFC               	movlw	high STR_21
 14159  002A0E  6E48               	movwf	i2printf@f+1,c
 14160  002A10  EC09  F006         	call	i2_printf	;wreg free
 14161                           
 14162                           ;modules.c: 36: line1();
 14163  002A14  ECB9  F028         	call	i2_line1	;wreg free
 14164                           
 14165                           ;modules.c: 37: printf("%u seconds          ", time);
 14166  002A18  0E01               	movlw	low STR_22
 14167  002A1A  6E47               	movwf	i2printf@f,c
 14168  002A1C  0EFE               	movlw	high STR_22
 14169  002A1E  6E48               	movwf	i2printf@f+1,c
 14170  002A20  C071  F049         	movff	showInfo@time,?i2_printf+2
 14171  002A24  C072  F04A         	movff	showInfo@time+1,?i2_printf+3
 14172  002A28  EC09  F006         	call	i2_printf	;wreg free
 14173                           
 14174                           ;modules.c: 38: break;
 14175  002A2C  D0D1               	goto	i2l6427
 14176  002A2E                     i2l6393:
 14177                           
 14178                           ;modules.c: 40: line0();
 14179  002A2E  ECBD  F028         	call	i2_line0	;wreg free
 14180                           
 14181                           ;modules.c: 41: printf("Total Sorted:          ");
 14182  002A32  0EC3               	movlw	low STR_23
 14183  002A34  6E47               	movwf	i2printf@f,c
 14184  002A36  0EFC               	movlw	high STR_23
 14185  002A38  6E48               	movwf	i2printf@f+1,c
 14186  002A3A  EC09  F006         	call	i2_printf	;wreg free
 14187                           
 14188                           ;modules.c: 42: line1();
 14189  002A3E  ECB9  F028         	call	i2_line1	;wreg free
 14190                           
 14191                           ;modules.c: 43: printf("%u batteries          ", sorted[0] + sorted[1] + sorted[2] + sor
      +                          ted[3]);
 14192  002A42  0E69               	movlw	low STR_24
 14193  002A44  6E47               	movwf	i2printf@f,c
 14194  002A46  0EFD               	movlw	high STR_24
 14195  002A48  6E48               	movwf	i2printf@f+1,c
 14196  002A4A  EE20 F003          	lfsr	2,3
 14197  002A4E  5073               	movf	showInfo@sorted,w,c
 14198  002A50  26D9               	addwf	fsr2l,f,c
 14199  002A52  5074               	movf	showInfo@sorted+1,w,c
 14200  002A54  22DA               	addwfc	fsr2h,f,c
 14201  002A56  50DF               	movf	indf2,w,c
 14202  002A58  6E75               	movwf	??_showInfo& (0+255),c
 14203  002A5A  C073  FFD9         	movff	showInfo@sorted,fsr2l
 14204  002A5E  C074  FFDA         	movff	showInfo@sorted+1,fsr2h
 14205  002A62  50DF               	movf	indf2,w,c
 14206  002A64  6E76               	movwf	(??_showInfo+1)& (0+255),c
 14207  002A66  6A77               	clrf	(??_showInfo+2)& (0+255),c
 14208  002A68  EE20 F001          	lfsr	2,1
 14209  002A6C  5073               	movf	showInfo@sorted,w,c
 14210  002A6E  26D9               	addwf	fsr2l,f,c
 14211  002A70  5074               	movf	showInfo@sorted+1,w,c
 14212  002A72  22DA               	addwfc	fsr2h,f,c
 14213  002A74  50DF               	movf	indf2,w,c
 14214  002A76  6E78               	movwf	(??_showInfo+3)& (0+255),c
 14215  002A78  5078               	movf	??_showInfo+3,w,c
 14216  002A7A  2676               	addwf	??_showInfo+1,f,c
 14217  002A7C  0E00               	movlw	0
 14218  002A7E  2277               	addwfc	??_showInfo+2,f,c
 14219  002A80  EE20 F002          	lfsr	2,2
 14220  002A84  5073               	movf	showInfo@sorted,w,c
 14221  002A86  26D9               	addwf	fsr2l,f,c
 14222  002A88  5074               	movf	showInfo@sorted+1,w,c
 14223  002A8A  22DA               	addwfc	fsr2h,f,c
 14224  002A8C  50DF               	movf	indf2,w,c
 14225  002A8E  6E79               	movwf	(??_showInfo+4)& (0+255),c
 14226  002A90  5079               	movf	??_showInfo+4,w,c
 14227  002A92  2676               	addwf	??_showInfo+1,f,c
 14228  002A94  0E00               	movlw	0
 14229  002A96  2277               	addwfc	??_showInfo+2,f,c
 14230  002A98  5075               	movf	??_showInfo,w,c
 14231  002A9A  2476               	addwf	??_showInfo+1,w,c
 14232  002A9C  6E49               	movwf	?i2_printf+2,c
 14233  002A9E  0E00               	movlw	0
 14234  002AA0  2077               	addwfc	??_showInfo+2,w,c
 14235  002AA2  6E4A               	movwf	?i2_printf+3,c
 14236  002AA4  EC09  F006         	call	i2_printf	;wreg free
 14237                           
 14238                           ;modules.c: 44: break;
 14239  002AA8  D093               	goto	i2l6427
 14240  002AAA                     i2l6399:
 14241                           
 14242                           ;modules.c: 46: line0();
 14243  002AAA  ECBD  F028         	call	i2_line0	;wreg free
 14244                           
 14245                           ;modules.c: 47: printf("AA Sorted:          ");
 14246  002AAE  0ED7               	movlw	low STR_25
 14247  002AB0  6E47               	movwf	i2printf@f,c
 14248  002AB2  0EFD               	movlw	high STR_25
 14249  002AB4  6E48               	movwf	i2printf@f+1,c
 14250  002AB6  EC09  F006         	call	i2_printf	;wreg free
 14251                           
 14252                           ;modules.c: 48: line1();
 14253  002ABA  ECB9  F028         	call	i2_line1	;wreg free
 14254                           
 14255                           ;modules.c: 49: printf("%u             ", sorted[0]);
 14256  002ABE  0E97               	movlw	low STR_26
 14257  002AC0  6E47               	movwf	i2printf@f,c
 14258  002AC2  0EFF               	movlw	high STR_26
 14259  002AC4  6E48               	movwf	i2printf@f+1,c
 14260  002AC6  C073  FFD9         	movff	showInfo@sorted,fsr2l
 14261  002ACA  C074  FFDA         	movff	showInfo@sorted+1,fsr2h
 14262  002ACE  50DF               	movf	indf2,w,c
 14263  002AD0  6E75               	movwf	??_showInfo& (0+255),c
 14264  002AD2  5075               	movf	??_showInfo,w,c
 14265  002AD4  6E49               	movwf	?i2_printf+2,c
 14266  002AD6  6A4A               	clrf	?i2_printf+3,c
 14267  002AD8  EC09  F006         	call	i2_printf	;wreg free
 14268                           
 14269                           ;modules.c: 50: break;
 14270  002ADC  D079               	goto	i2l6427
 14271  002ADE                     i2l6405:
 14272                           
 14273                           ;modules.c: 52: line0();
 14274  002ADE  ECBD  F028         	call	i2_line0	;wreg free
 14275                           
 14276                           ;modules.c: 53: printf("C Sorted:          ");
 14277  002AE2  0ED1               	movlw	low STR_27
 14278  002AE4  6E47               	movwf	i2printf@f,c
 14279  002AE6  0EFE               	movlw	high STR_27
 14280  002AE8  6E48               	movwf	i2printf@f+1,c
 14281  002AEA  EC09  F006         	call	i2_printf	;wreg free
 14282                           
 14283                           ;modules.c: 54: line1();
 14284  002AEE  ECB9  F028         	call	i2_line1	;wreg free
 14285                           
 14286                           ;modules.c: 55: printf("%u             ", sorted[1]);
 14287  002AF2  0E97               	movlw	low STR_26
 14288  002AF4  6E47               	movwf	i2printf@f,c
 14289  002AF6  0EFF               	movlw	high STR_26
 14290  002AF8  6E48               	movwf	i2printf@f+1,c
 14291  002AFA  EE20 F001          	lfsr	2,1
 14292  002AFE  5073               	movf	showInfo@sorted,w,c
 14293  002B00  26D9               	addwf	fsr2l,f,c
 14294  002B02  5074               	movf	showInfo@sorted+1,w,c
 14295  002B04  22DA               	addwfc	fsr2h,f,c
 14296  002B06  50DF               	movf	indf2,w,c
 14297  002B08  6E75               	movwf	??_showInfo& (0+255),c
 14298  002B0A  5075               	movf	??_showInfo,w,c
 14299  002B0C  6E49               	movwf	?i2_printf+2,c
 14300  002B0E  6A4A               	clrf	?i2_printf+3,c
 14301  002B10  EC09  F006         	call	i2_printf	;wreg free
 14302                           
 14303                           ;modules.c: 56: break;
 14304  002B14  D05D               	goto	i2l6427
 14305  002B16                     i2l6411:
 14306                           
 14307                           ;modules.c: 58: line0();
 14308  002B16  ECBD  F028         	call	i2_line0	;wreg free
 14309                           
 14310                           ;modules.c: 59: printf("9V Sorted:          ");
 14311  002B1A  0EEC               	movlw	low STR_29
 14312  002B1C  6E47               	movwf	i2printf@f,c
 14313  002B1E  0EFD               	movlw	high STR_29
 14314  002B20  6E48               	movwf	i2printf@f+1,c
 14315  002B22  EC09  F006         	call	i2_printf	;wreg free
 14316                           
 14317                           ;modules.c: 60: line1();
 14318  002B26  ECB9  F028         	call	i2_line1	;wreg free
 14319                           
 14320                           ;modules.c: 61: printf("%u             ", sorted[2]);
 14321  002B2A  0E97               	movlw	low STR_26
 14322  002B2C  6E47               	movwf	i2printf@f,c
 14323  002B2E  0EFF               	movlw	high STR_26
 14324  002B30  6E48               	movwf	i2printf@f+1,c
 14325  002B32  EE20 F002          	lfsr	2,2
 14326  002B36  5073               	movf	showInfo@sorted,w,c
 14327  002B38  26D9               	addwf	fsr2l,f,c
 14328  002B3A  5074               	movf	showInfo@sorted+1,w,c
 14329  002B3C  22DA               	addwfc	fsr2h,f,c
 14330  002B3E  50DF               	movf	indf2,w,c
 14331  002B40  6E75               	movwf	??_showInfo& (0+255),c
 14332  002B42  5075               	movf	??_showInfo,w,c
 14333  002B44  6E49               	movwf	?i2_printf+2,c
 14334  002B46  6A4A               	clrf	?i2_printf+3,c
 14335  002B48  EC09  F006         	call	i2_printf	;wreg free
 14336                           
 14337                           ;modules.c: 62: break;
 14338  002B4C  D041               	goto	i2l6427
 14339  002B4E                     i2l6417:
 14340                           
 14341                           ;modules.c: 64: line0();
 14342  002B4E  ECBD  F028         	call	i2_line0	;wreg free
 14343                           
 14344                           ;modules.c: 65: printf("Uncharged:          ");
 14345  002B52  0EC2               	movlw	low STR_31
 14346  002B54  6E47               	movwf	i2printf@f,c
 14347  002B56  0EFD               	movlw	high STR_31
 14348  002B58  6E48               	movwf	i2printf@f+1,c
 14349  002B5A  EC09  F006         	call	i2_printf	;wreg free
 14350                           
 14351                           ;modules.c: 66: line1();
 14352  002B5E  ECB9  F028         	call	i2_line1	;wreg free
 14353                           
 14354                           ;modules.c: 67: printf("%u             ", sorted[3]);
 14355  002B62  0E97               	movlw	low STR_26
 14356  002B64  6E47               	movwf	i2printf@f,c
 14357  002B66  0EFF               	movlw	high STR_26
 14358  002B68  6E48               	movwf	i2printf@f+1,c
 14359  002B6A  EE20 F003          	lfsr	2,3
 14360  002B6E  5073               	movf	showInfo@sorted,w,c
 14361  002B70  26D9               	addwf	fsr2l,f,c
 14362  002B72  5074               	movf	showInfo@sorted+1,w,c
 14363  002B74  22DA               	addwfc	fsr2h,f,c
 14364  002B76  50DF               	movf	indf2,w,c
 14365  002B78  6E75               	movwf	??_showInfo& (0+255),c
 14366  002B7A  5075               	movf	??_showInfo,w,c
 14367  002B7C  6E49               	movwf	?i2_printf+2,c
 14368  002B7E  6A4A               	clrf	?i2_printf+3,c
 14369  002B80  EC09  F006         	call	i2_printf	;wreg free
 14370                           
 14371                           ;modules.c: 68: break;
 14372  002B84  D025               	goto	i2l6427
 14373  002B86                     i2l236:
 14374  002B86  00FF               	reset		;# 
 14375  002B88                     i2l6423:
 14376                           
 14377                           ;modules.c: 72: stop = 1;
 14378  002B88  0E00               	movlw	0
 14379  002B8A  6E7D               	movwf	showInfo@stop+1,c
 14380  002B8C  0E01               	movlw	1
 14381  002B8E                     L6:
 14382  002B8E  6E7C               	movwf	showInfo@stop,c
 14383                           
 14384                           ;modules.c: 73: }
 14385  002B90  D01F               	goto	i2l6427
 14386  002B92                     i2l6425:
 14387  002B92  C07A  F075         	movff	showInfo@type,??_showInfo
 14388  002B96  C07B  F076         	movff	showInfo@type+1,??_showInfo+1
 14389                           
 14390                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14391                           ; Switch size 1, requested type "space"
 14392                           ; Number of cases is 1, Range of values is 0 to 0
 14393                           ; switch strategies available:
 14394                           ; Name         Instructions Cycles
 14395                           ; simple_byte            4     3 (average)
 14396                           ;	Chosen strategy is simple_byte
 14397  002B9A  5076               	movf	??_showInfo+1,w,c
 14398  002B9C  0A00               	xorlw	0	; case 0
 14399  002B9E  A4D8               	btfss	status,2,c
 14400  002BA0  D7F3               	goto	i2l6423
 14401                           
 14402                           ; Switch size 1, requested type "space"
 14403                           ; Number of cases is 7, Range of values is 0 to 15
 14404                           ; switch strategies available:
 14405                           ; Name         Instructions Cycles
 14406                           ; simple_byte           22    12 (average)
 14407                           ;	Chosen strategy is simple_byte
 14408  002BA2  5075               	movf	??_showInfo,w,c
 14409  002BA4  0A00               	xorlw	0	; case 0
 14410  002BA6  B4D8               	btfsc	status,2,c
 14411  002BA8  D72D               	goto	i2l6387
 14412  002BAA  0A01               	xorlw	1	; case 1
 14413  002BAC  B4D8               	btfsc	status,2,c
 14414  002BAE  D73F               	goto	i2l6393
 14415  002BB0  0A03               	xorlw	3	; case 2
 14416  002BB2  B4D8               	btfsc	status,2,c
 14417  002BB4  D77A               	goto	i2l6399
 14418  002BB6  0A01               	xorlw	1	; case 3
 14419  002BB8  B4D8               	btfsc	status,2,c
 14420  002BBA  D791               	goto	i2l6405
 14421  002BBC  0A07               	xorlw	7	; case 4
 14422  002BBE  B4D8               	btfsc	status,2,c
 14423  002BC0  D7AA               	goto	i2l6411
 14424  002BC2  0A01               	xorlw	1	; case 5
 14425  002BC4  B4D8               	btfsc	status,2,c
 14426  002BC6  D7C3               	goto	i2l6417
 14427  002BC8  0A0A               	xorlw	10	; case 15
 14428  002BCA  B4D8               	btfsc	status,2,c
 14429  002BCC  D7DC               	goto	i2l236
 14430  002BCE  D7DC               	goto	i2l6423
 14431  002BD0                     i2l6427:
 14432  002BD0  507C               	movf	showInfo@stop,w,c
 14433  002BD2  107D               	iorwf	showInfo@stop+1,w,c
 14434  002BD4  A4D8               	btfss	status,2,c
 14435  002BD6  0012               	return	
 14436  002BD8  D70E               	goto	i2l6385
 14437  002BDA                     __end_of_showInfo:
 14438                           	opt stack 0
 14439                           pclatu	equ	0xFFB
 14440                           pclath	equ	0xFFA
 14441                           tblptru	equ	0xFF8
 14442                           tblptrh	equ	0xFF7
 14443                           tblptrl	equ	0xFF6
 14444                           tablat	equ	0xFF5
 14445                           prodh	equ	0xFF4
 14446                           prodl	equ	0xFF3
 14447                           intcon	equ	0xFF2
 14448                           intcon3	equ	0xFF0
 14449                           postinc0	equ	0xFEE
 14450                           fsr0h	equ	0xFEA
 14451                           fsr0l	equ	0xFE9
 14452                           wreg	equ	0xFE8
 14453                           plusw1	equ	0xFE3
 14454                           fsr1h	equ	0xFE2
 14455                           fsr1l	equ	0xFE1
 14456                           indf2	equ	0xFDF
 14457                           postinc2	equ	0xFDE
 14458                           postdec2	equ	0xFDD
 14459                           plusw2	equ	0xFDB
 14460                           fsr2h	equ	0xFDA
 14461                           fsr2l	equ	0xFD9
 14462                           status	equ	0xFD8
 14463                           
 14464 ;; *************** function i2_printf *****************
 14465 ;; Defined at:
 14466 ;;		line 464 in file "/opt/microchip/xc8/v1.41/sources/common/doprnt.c"
 14467 ;; Parameters:    Size  Location     Type
 14468 ;;  f               2   70[COMRAM] PTR const unsigned char 
 14469 ;;		 -> STR_51(12), STR_50(11), STR_49(16), STR_48(23), 
 14470 ;;		 -> STR_47(21), STR_46(14), STR_45(15), STR_44(22), 
 14471 ;;		 -> STR_43(20), STR_42(13), STR_41(16), STR_40(23), 
 14472 ;;		 -> STR_39(21), STR_38(14), STR_37(18), STR_36(18), 
 14473 ;;		 -> STR_35(20), STR_34(20), STR_33(17), STR_32(16), 
 14474 ;;		 -> STR_31(21), STR_30(16), STR_29(21), STR_28(16), 
 14475 ;;		 -> STR_27(20), STR_26(16), STR_25(21), STR_24(23), 
 14476 ;;		 -> STR_23(24), STR_22(21), STR_21(24), STR_20(24), 
 14477 ;;		 -> STR_19(25), STR_18(19), STR_17(24), STR_16(24), 
 14478 ;;		 -> STR_15(27), STR_14(17), STR_13(21), STR_12(21), 
 14479 ;;		 -> STR_11(21), STR_10(21), STR_9(20), STR_8(21), 
 14480 ;;		 -> STR_7(21), STR_6(20), STR_5(22), STR_4(22), 
 14481 ;;		 -> STR_3(21), STR_2(24), STR_1(9), 
 14482 ;; Auto vars:     Size  Location     Type
 14483 ;;  printf          4   98[COMRAM] struct .
 14484 ;;  printf          4   92[COMRAM] unsigned long 
 14485 ;;  printf          3  106[COMRAM] unsigned long 
 14486 ;;  printf          2  109[COMRAM] int 
 14487 ;;  printf          2  104[COMRAM] unsigned short 
 14488 ;;  printf          2  102[COMRAM] int 
 14489 ;;  printf          2   96[COMRAM] int 
 14490 ;;  printf          2   90[COMRAM] unsigned int 
 14491 ;;  printf          2   88[COMRAM] PTR void [1]
 14492 ;;		 -> ?i2_printf(2), ?_printf(2), 
 14493 ;;  printf          2   85[COMRAM] PTR const unsigned char 
 14494 ;;		 -> printf@c(1), 
 14495 ;;  printf          1  111[COMRAM] char 
 14496 ;;  printf          1   87[COMRAM] unsigned char 
 14497 ;;  printf          1    0        unsigned char 
 14498 ;; Return value:  Size  Location     Type
 14499 ;;                  2   70[COMRAM] int 
 14500 ;; Registers used:
 14501 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14502 ;; Tracked objects:
 14503 ;;		On entry : 0/0
 14504 ;;		On exit  : 0/0
 14505 ;;		Unchanged: 0/0
 14506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14507 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14508 ;;      Locals:        30       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14509 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14510 ;;      Totals:        42       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14511 ;;Total ram usage:       42 bytes
 14512 ;; Hardware stack levels used:    1
 14513 ;; Hardware stack levels required when called:    3
 14514 ;; This function calls:
 14515 ;;		i2___awdiv
 14516 ;;		i2___ftadd
 14517 ;;		i2___ftge
 14518 ;;		i2___ftmul
 14519 ;;		i2___ftneg
 14520 ;;		i2___ftsub
 14521 ;;		i2___fttol
 14522 ;;		i2___lldiv
 14523 ;;		i2___llmod
 14524 ;;		i2___lltoft
 14525 ;;		i2___wmul
 14526 ;;		i2__div_to_l_
 14527 ;;		i2__tdiv_to_l_
 14528 ;;		i2_fround
 14529 ;;		i2_isdigit
 14530 ;;		i2_putch
 14531 ;;		i2_scale
 14532 ;; This function is called by:
 14533 ;;		_simulate
 14534 ;;		_showInfo
 14535 ;;		_CW90
 14536 ;;		_CCW90
 14537 ;;		_stopMoving
 14538 ;;		_checkV
 14539 ;;		_checkAA
 14540 ;;		_checkC
 14541 ;;		_check9
 14542 ;;		_PermLog
 14543 ;; This function uses a non-reentrant model
 14544 ;;
 14545                           
 14546                           	psect	text61
 14547  000C12                     __ptext61:
 14548                           	opt stack 0
 14549  000C12                     i2_printf:
 14550                           	opt stack 20
 14551                           
 14552                           ;doprnt.c: 466: va_list ap;
 14553                           ;doprnt.c: 499: signed char c;
 14554                           ;doprnt.c: 501: int width;
 14555                           ;doprnt.c: 504: int prec;
 14556                           ;doprnt.c: 508: unsigned short flag;
 14557                           ;doprnt.c: 515: char d;
 14558                           ;doprnt.c: 516: double fval;
 14559                           ;doprnt.c: 517: int exp;
 14560                           ;doprnt.c: 523: union {
 14561                           ;doprnt.c: 524: unsigned long vd;
 14562                           ;doprnt.c: 525: double integ;
 14563                           ;doprnt.c: 526: } tmpval;
 14564                           ;doprnt.c: 528: unsigned long val;
 14565                           ;doprnt.c: 529: unsigned len;
 14566                           ;doprnt.c: 530: const char * cp;
 14567                           ;doprnt.c: 533: *ap = __va_start();
 14568                           
 14569                           ;incstack = 0
 14570  000C12  0E49               	movlw	low (?i2_printf+2)
 14571  000C14  6E59               	movwf	i2printf@ap,c
 14572  000C16  0E00               	movlw	high (?i2_printf+2)
 14573  000C18  6E5A               	movwf	i2printf@ap+1,c
 14574                           
 14575                           ;doprnt.c: 536: while(c = *f++) {
 14576  000C1A  EFED  F00A         	goto	i2l5333
 14577  000C1E                     i2l5035:
 14578                           
 14579                           ;doprnt.c: 538: if(c != '%')
 14580  000C1E  0E25               	movlw	37
 14581  000C20  1870               	xorwf	i2printf@c,w,c
 14582  000C22  B4D8               	btfsc	status,2,c
 14583  000C24  D005               	goto	i2l5039
 14584                           
 14585                           ;doprnt.c: 540: {
 14586                           ;doprnt.c: 541: (putch(c) );
 14587  000C26  5070               	movf	i2printf@c,w,c
 14588  000C28  EC8B  F028         	call	i2_putch
 14589                           
 14590                           ;doprnt.c: 542: continue;
 14591  000C2C  EFED  F00A         	goto	i2l5333
 14592  000C30                     i2l5039:
 14593                           
 14594                           ;doprnt.c: 543: }
 14595                           ;doprnt.c: 546: width = 0;
 14596  000C30  0E00               	movlw	0
 14597  000C32  6E6F               	movwf	i2printf@width+1,c
 14598  000C34  0E00               	movlw	0
 14599  000C36  6E6E               	movwf	i2printf@width,c
 14600                           
 14601                           ;doprnt.c: 548: flag = 0;
 14602  000C38  0E00               	movlw	0
 14603  000C3A  6E6A               	movwf	i2printf@flag+1,c
 14604  000C3C  0E00               	movlw	0
 14605  000C3E  6E69               	movwf	i2printf@flag,c
 14606                           
 14607                           ;doprnt.c: 551: switch(*f) {
 14608                           
 14609                           ;doprnt.c: 550: for(;;) {
 14610  000C40  D003               	goto	i2l5045
 14611  000C42                     i2l5041:
 14612                           
 14613                           ;doprnt.c: 580: flag |= 0x04;
 14614  000C42  8469               	bsf	i2printf@flag,2,c
 14615                           
 14616                           ;doprnt.c: 581: f++;
 14617  000C44  4A47               	infsnz	i2printf@f,f,c
 14618  000C46  2A48               	incf	i2printf@f+1,f,c
 14619  000C48                     i2l5045:
 14620  000C48  C047  FFF6         	movff	i2printf@f,tblptrl
 14621  000C4C  C048  FFF7         	movff	i2printf@f+1,tblptrh
 14622  000C50                     	if	0	;tblptru may be non-zero
 14623  000C50                     	endif
 14624  000C50                     	if	0	;tblptru may be non-zero
 14625  000C50                     	endif
 14626  000C50  0008               	tblrd		*
 14627  000C52  50F5               	movf	tablat,w,c
 14628                           
 14629                           ; Switch size 1, requested type "space"
 14630                           ; Number of cases is 1, Range of values is 48 to 48
 14631                           ; switch strategies available:
 14632                           ; Name         Instructions Cycles
 14633                           ; simple_byte            4     3 (average)
 14634                           ;	Chosen strategy is simple_byte
 14635  000C54  0A30               	xorlw	48	; case 48
 14636  000C56  B4D8               	btfsc	status,2,c
 14637  000C58  D7F4               	goto	i2l5041
 14638                           
 14639                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 14640                           
 14641                           ;doprnt.c: 586: }
 14642                           
 14643                           ;doprnt.c: 585: break;
 14644  000C5A  C047  FFF6         	movff	i2printf@f,tblptrl
 14645  000C5E  C048  FFF7         	movff	i2printf@f+1,tblptrh
 14646  000C62                     	if	0	;tblptru may be non-zero
 14647  000C62                     	endif
 14648  000C62                     	if	0	;tblptru may be non-zero
 14649  000C62                     	endif
 14650  000C62  0008               	tblrd		*
 14651  000C64  50F5               	movf	tablat,w,c
 14652  000C66  EC18  F028         	call	i2_isdigit
 14653  000C6A  A0D8               	btfss	status,0,c
 14654  000C6C  D072               	goto	i2l5087
 14655                           
 14656                           ;doprnt.c: 598: width = 0;
 14657  000C6E  0E00               	movlw	0
 14658  000C70  6E6F               	movwf	i2printf@width+1,c
 14659  000C72  0E00               	movlw	0
 14660  000C74  6E6E               	movwf	i2printf@width,c
 14661  000C76                     i2l5051:
 14662                           
 14663                           ;doprnt.c: 600: width *= 10;
 14664  000C76  C06E  F00F         	movff	i2printf@width,i2___wmul@multiplier
 14665  000C7A  C06F  F010         	movff	i2printf@width+1,i2___wmul@multiplier+1
 14666  000C7E  0E00               	movlw	0
 14667  000C80  6E12               	movwf	i2___wmul@multiplicand+1,c
 14668  000C82  0E0A               	movlw	10
 14669  000C84  6E11               	movwf	i2___wmul@multiplicand,c
 14670  000C86  ECE2  F027         	call	i2___wmul	;wreg free
 14671  000C8A  C00F  F06E         	movff	?i2___wmul,i2printf@width
 14672  000C8E  C010  F06F         	movff	?i2___wmul+1,i2printf@width+1
 14673                           
 14674                           ;doprnt.c: 601: width += *f++ - '0';
 14675  000C92  0ED0               	movlw	208
 14676  000C94  6E4D               	movwf	??i2_printf& (0+255),c
 14677  000C96  0EFF               	movlw	255
 14678  000C98  6E4E               	movwf	(??i2_printf+1)& (0+255),c
 14679  000C9A  C047  FFF6         	movff	i2printf@f,tblptrl
 14680  000C9E  C048  FFF7         	movff	i2printf@f+1,tblptrh
 14681  000CA2                     	if	0	;tblptru may be non-zero
 14682  000CA2                     	endif
 14683  000CA2                     	if	0	;tblptru may be non-zero
 14684  000CA2                     	endif
 14685  000CA2  0008               	tblrd		*
 14686  000CA4  50F5               	movf	tablat,w,c
 14687  000CA6  6E4F               	movwf	(??i2_printf+2)& (0+255),c
 14688  000CA8  6A50               	clrf	(??i2_printf+3)& (0+255),c
 14689  000CAA  504D               	movf	??i2_printf,w,c
 14690  000CAC  264F               	addwf	??i2_printf+2,f,c
 14691  000CAE  504E               	movf	??i2_printf+1,w,c
 14692  000CB0  2250               	addwfc	??i2_printf+3,f,c
 14693  000CB2  504F               	movf	??i2_printf+2,w,c
 14694  000CB4  266E               	addwf	i2printf@width,f,c
 14695  000CB6  5050               	movf	??i2_printf+3,w,c
 14696  000CB8  226F               	addwfc	i2printf@width+1,f,c
 14697  000CBA  4A47               	infsnz	i2printf@f,f,c
 14698  000CBC  2A48               	incf	i2printf@f+1,f,c
 14699                           
 14700                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 14701  000CBE  C047  FFF6         	movff	i2printf@f,tblptrl
 14702  000CC2  C048  FFF7         	movff	i2printf@f+1,tblptrh
 14703  000CC6                     	if	0	;tblptru may be non-zero
 14704  000CC6                     	endif
 14705  000CC6                     	if	0	;tblptru may be non-zero
 14706  000CC6                     	endif
 14707  000CC6  0008               	tblrd		*
 14708  000CC8  50F5               	movf	tablat,w,c
 14709  000CCA  EC18  F028         	call	i2_isdigit
 14710  000CCE  A0D8               	btfss	status,0,c
 14711  000CD0  D040               	goto	i2l5087
 14712  000CD2  D7D1               	goto	i2l5051
 14713  000CD4                     i2l5059:
 14714                           
 14715                           ;doprnt.c: 663: flag |= 0x400;
 14716  000CD4  846A               	bsf	i2printf@flag+1,2,c
 14717                           
 14718                           ;doprnt.c: 664: break;
 14719  000CD6  D054               	goto	i2l5089
 14720  000CD8                     i2l5061:
 14721                           
 14722                           ;doprnt.c: 721: flag |= 0x80;
 14723  000CD8  8E69               	bsf	i2printf@flag,7,c
 14724                           
 14725                           ;doprnt.c: 723: break;
 14726  000CDA  D052               	goto	i2l5089
 14727  000CDC                     i2l5063:
 14728                           
 14729                           ;doprnt.c: 757: if(width > len)
 14730  000CDC  506E               	movf	i2printf@width,w,c
 14731  000CDE  5C5B               	subwf	i2printf@len,w,c
 14732  000CE0  506F               	movf	i2printf@width+1,w,c
 14733  000CE2  585C               	subwfb	i2printf@len+1,w,c
 14734  000CE4  B0D8               	btfsc	status,0,c
 14735  000CE6  D005               	goto	i2l5067
 14736                           
 14737                           ;doprnt.c: 758: width -= len;
 14738  000CE8  505B               	movf	i2printf@len,w,c
 14739  000CEA  5E6E               	subwf	i2printf@width,f,c
 14740  000CEC  505C               	movf	i2printf@len+1,w,c
 14741  000CEE  5A6F               	subwfb	i2printf@width+1,f,c
 14742  000CF0  D008               	goto	i2l5071
 14743  000CF2                     i2l5067:
 14744                           
 14745                           ;doprnt.c: 759: else
 14746                           ;doprnt.c: 760: width = 0;
 14747  000CF2  0E00               	movlw	0
 14748  000CF4  6E6F               	movwf	i2printf@width+1,c
 14749  000CF6  0E00               	movlw	0
 14750  000CF8  6E6E               	movwf	i2printf@width,c
 14751                           
 14752                           ;doprnt.c: 764: while(width--)
 14753  000CFA  D003               	goto	i2l5071
 14754  000CFC                     i2l5069:
 14755                           
 14756                           ;doprnt.c: 765: (putch(' ') );
 14757  000CFC  0E20               	movlw	32
 14758  000CFE  EC8B  F028         	call	i2_putch
 14759  000D02                     i2l5071:
 14760  000D02  066E               	decf	i2printf@width,f,c
 14761  000D04  A0D8               	btfss	status,0,c
 14762  000D06  066F               	decf	i2printf@width+1,f,c
 14763  000D08  286E               	incf	i2printf@width,w,c
 14764  000D0A  E1F8               	bnz	i2l5069
 14765  000D0C  286F               	incf	i2printf@width+1,w,c
 14766  000D0E  B4D8               	btfsc	status,2,c
 14767  000D10  D00A               	goto	i2l5077
 14768  000D12  D7F4               	goto	i2l5069
 14769  000D14                     i2l5073:
 14770                           
 14771                           ;doprnt.c: 768: (putch(*cp++) );
 14772  000D14  C056  FFD9         	movff	i2printf@cp,fsr2l
 14773  000D18  C057  FFDA         	movff	i2printf@cp+1,fsr2h
 14774  000D1C  50DF               	movf	indf2,w,c
 14775  000D1E  EC8B  F028         	call	i2_putch
 14776  000D22  4A56               	infsnz	i2printf@cp,f,c
 14777  000D24  2A57               	incf	i2printf@cp+1,f,c
 14778  000D26                     i2l5077:
 14779  000D26  065B               	decf	i2printf@len,f,c
 14780  000D28  A0D8               	btfss	status,0,c
 14781  000D2A  065C               	decf	i2printf@len+1,f,c
 14782  000D2C  285B               	incf	i2printf@len,w,c
 14783  000D2E  E1F2               	bnz	i2l5073
 14784  000D30  285C               	incf	i2printf@len+1,w,c
 14785  000D32  B4D8               	btfsc	status,2,c
 14786  000D34  EFED  F00A         	goto	i2l5333
 14787  000D38  D7ED               	goto	i2l5073
 14788  000D3A                     i2l5079:
 14789                           
 14790                           ;doprnt.c: 805: cp = (char *)&c;
 14791  000D3A  0E70               	movlw	low i2printf@c
 14792  000D3C  6E56               	movwf	i2printf@cp,c
 14793  000D3E  0E00               	movlw	high i2printf@c
 14794  000D40  6E57               	movwf	i2printf@cp+1,c
 14795                           
 14796                           ;doprnt.c: 806: len = 1;
 14797  000D42  0E00               	movlw	0
 14798  000D44  6E5C               	movwf	i2printf@len+1,c
 14799  000D46  0E01               	movlw	1
 14800  000D48  6E5B               	movwf	i2printf@len,c
 14801                           
 14802                           ;doprnt.c: 807: goto dostring;
 14803  000D4A  D7C8               	goto	i2l5063
 14804  000D4C                     i2l5083:
 14805                           
 14806                           ;doprnt.c: 818: flag |= 0xC0;
 14807  000D4C  0EC0               	movlw	192
 14808  000D4E  1269               	iorwf	i2printf@flag,f,c
 14809                           
 14810                           ;doprnt.c: 822: }
 14811                           
 14812                           ;doprnt.c: 819: break;
 14813  000D50  D017               	goto	i2l5089
 14814  000D52                     i2l5087:
 14815  000D52  C047  FFF6         	movff	i2printf@f,tblptrl
 14816  000D56  C048  FFF7         	movff	i2printf@f+1,tblptrh
 14817  000D5A  4A47               	infsnz	i2printf@f,f,c
 14818  000D5C  2A48               	incf	i2printf@f+1,f,c
 14819  000D5E                     	if	0	;tblptru may be non-zero
 14820  000D5E                     	endif
 14821  000D5E                     	if	0	;tblptru may be non-zero
 14822  000D5E                     	endif
 14823  000D5E  0008               	tblrd		*
 14824  000D60  CFF5 F070          	movff	tablat,i2printf@c
 14825  000D64  5070               	movf	i2printf@c,w,c
 14826                           
 14827                           ; Switch size 1, requested type "space"
 14828                           ; Number of cases is 4, Range of values is 0 to 120
 14829                           ; switch strategies available:
 14830                           ; Name         Instructions Cycles
 14831                           ; simple_byte           13     7 (average)
 14832                           ;	Chosen strategy is simple_byte
 14833  000D66  0A00               	xorlw	0	; case 0
 14834  000D68  B4D8               	btfsc	status,2,c
 14835  000D6A  0012               	return	
 14836  000D6C  0A66               	xorlw	102	; case 102
 14837  000D6E  B4D8               	btfsc	status,2,c
 14838  000D70  D7B1               	goto	i2l5059
 14839  000D72  0A13               	xorlw	19	; case 117
 14840  000D74  B4D8               	btfsc	status,2,c
 14841  000D76  D7EA               	goto	i2l5083
 14842  000D78  0A0D               	xorlw	13	; case 120
 14843  000D7A  B4D8               	btfsc	status,2,c
 14844  000D7C  D7AD               	goto	i2l5061
 14845  000D7E  D7DD               	goto	i2l5079
 14846  000D80                     i2l5089:
 14847                           
 14848                           ;doprnt.c: 825: if(flag & (0x700)) {
 14849  000D80  0E07               	movlw	7
 14850  000D82  146A               	andwf	i2printf@flag+1,w,c
 14851  000D84  B4D8               	btfsc	status,2,c
 14852  000D86  D2EC               	goto	i2l5247
 14853                           
 14854                           ;doprnt.c: 829: prec = 6;
 14855  000D88  0E00               	movlw	0
 14856  000D8A  6E62               	movwf	i2printf@prec+1,c
 14857  000D8C  0E06               	movlw	6
 14858  000D8E  6E61               	movwf	i2printf@prec,c
 14859                           
 14860                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
 14861  000D90  C059  FFD9         	movff	i2printf@ap,fsr2l
 14862  000D94  C05A  FFDA         	movff	i2printf@ap+1,fsr2h
 14863  000D98  CFDE F06B          	movff	postinc2,i2printf@fval
 14864  000D9C  CFDE F06C          	movff	postinc2,i2printf@fval+1
 14865  000DA0  CFDD F06D          	movff	postdec2,i2printf@fval+2
 14866  000DA4  0E03               	movlw	3
 14867  000DA6  2659               	addwf	i2printf@ap,f,c
 14868  000DA8  0E00               	movlw	0
 14869  000DAA  225A               	addwfc	i2printf@ap+1,f,c
 14870                           
 14871                           ;doprnt.c: 831: if(fval < 0.0) {
 14872  000DAC  AE6D               	btfss	i2printf@fval+2,7,c
 14873  000DAE  D010               	goto	i2l5103
 14874                           
 14875                           ;doprnt.c: 832: fval = -fval;
 14876  000DB0  C06B  F001         	movff	i2printf@fval,i2___ftneg@f1
 14877  000DB4  C06C  F002         	movff	i2printf@fval+1,i2___ftneg@f1+1
 14878  000DB8  C06D  F003         	movff	i2printf@fval+2,i2___ftneg@f1+2
 14879  000DBC  ECF5  F027         	call	i2___ftneg	;wreg free
 14880  000DC0  C001  F06B         	movff	?i2___ftneg,i2printf@fval
 14881  000DC4  C002  F06C         	movff	?i2___ftneg+1,i2printf@fval+1
 14882  000DC8  C003  F06D         	movff	?i2___ftneg+2,i2printf@fval+2
 14883                           
 14884                           ;doprnt.c: 833: flag |= 0x03;
 14885  000DCC  0E03               	movlw	3
 14886  000DCE  1269               	iorwf	i2printf@flag,f,c
 14887  000DD0                     i2l5103:
 14888                           
 14889                           ;doprnt.c: 834: }
 14890                           ;doprnt.c: 835: exp = 0;
 14891  000DD0  0E00               	movlw	0
 14892  000DD2  6E68               	movwf	i2printf@exp+1,c
 14893  000DD4  0E00               	movlw	0
 14894  000DD6  6E67               	movwf	i2printf@exp,c
 14895                           
 14896                           ;doprnt.c: 836: if( fval!=0) {
 14897  000DD8  506B               	movf	i2printf@fval,w,c
 14898  000DDA  106C               	iorwf	i2printf@fval+1,w,c
 14899  000DDC  106D               	iorwf	i2printf@fval+2,w,c
 14900  000DDE  B4D8               	btfsc	status,2,c
 14901  000DE0  D083               	goto	i2l5131
 14902                           
 14903                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
 14904  000DE2  0E82               	movlw	130
 14905  000DE4  6E4D               	movwf	??i2_printf& (0+255),c
 14906  000DE6  0EFF               	movlw	255
 14907  000DE8  6E4E               	movwf	(??i2_printf+1)& (0+255),c
 14908  000DEA  C06B  F04F         	movff	i2printf@fval,??i2_printf+2
 14909  000DEE  C06C  F050         	movff	i2printf@fval+1,??i2_printf+3
 14910  000DF2  C06D  F051         	movff	i2printf@fval+2,??i2_printf+4
 14911  000DF6  C06E  F052         	movff	i2printf@fval+3,??i2_printf+5
 14912  000DFA  0E10               	movlw	16
 14913  000DFC  D005               	goto	i2u510_40
 14914  000DFE                     i2u510_45:
 14915  000DFE  90D8               	bcf	status,0,c
 14916  000E00  3252               	rrcf	??i2_printf+5,f,c
 14917  000E02  3251               	rrcf	??i2_printf+4,f,c
 14918  000E04  3250               	rrcf	??i2_printf+3,f,c
 14919  000E06  324F               	rrcf	??i2_printf+2,f,c
 14920  000E08                     i2u510_40:
 14921  000E08  2EE8               	decfsz	wreg,f,c
 14922  000E0A  D7F9               	goto	i2u510_45
 14923  000E0C  504F               	movf	??i2_printf+2,w,c
 14924  000E0E  244D               	addwf	??i2_printf,w,c
 14925  000E10  6E67               	movwf	i2printf@exp,c
 14926  000E12  0E00               	movlw	0
 14927  000E14  204E               	addwfc	??i2_printf+1,w,c
 14928  000E16  6E68               	movwf	i2printf@exp+1,c
 14929                           
 14930                           ;doprnt.c: 838: exp--;
 14931  000E18  0667               	decf	i2printf@exp,f,c
 14932  000E1A  A0D8               	btfss	status,0,c
 14933  000E1C  0668               	decf	i2printf@exp+1,f,c
 14934                           
 14935                           ;doprnt.c: 839: exp *= 3;
 14936  000E1E  C067  F00F         	movff	i2printf@exp,i2___wmul@multiplier
 14937  000E22  C068  F010         	movff	i2printf@exp+1,i2___wmul@multiplier+1
 14938  000E26  0E00               	movlw	0
 14939  000E28  6E12               	movwf	i2___wmul@multiplicand+1,c
 14940  000E2A  0E03               	movlw	3
 14941  000E2C  6E11               	movwf	i2___wmul@multiplicand,c
 14942  000E2E  ECE2  F027         	call	i2___wmul	;wreg free
 14943  000E32  C00F  F067         	movff	?i2___wmul,i2printf@exp
 14944  000E36  C010  F068         	movff	?i2___wmul+1,i2printf@exp+1
 14945                           
 14946                           ;doprnt.c: 840: exp /= 10;
 14947  000E3A  C067  F007         	movff	i2printf@exp,i2___awdiv@dividend
 14948  000E3E  C068  F008         	movff	i2printf@exp+1,i2___awdiv@dividend+1
 14949  000E42  0E00               	movlw	0
 14950  000E44  6E0A               	movwf	i2___awdiv@divisor+1,c
 14951  000E46  0E0A               	movlw	10
 14952  000E48  6E09               	movwf	i2___awdiv@divisor,c
 14953  000E4A  EC90  F023         	call	i2___awdiv	;wreg free
 14954  000E4E  C007  F067         	movff	?i2___awdiv,i2printf@exp
 14955  000E52  C008  F068         	movff	?i2___awdiv+1,i2printf@exp+1
 14956                           
 14957                           ;doprnt.c: 841: if(exp < 0)
 14958  000E56  AE68               	btfss	i2printf@exp+1,7,c
 14959  000E58  D003               	goto	i2l5119
 14960                           
 14961                           ;doprnt.c: 842: exp--;
 14962  000E5A  0667               	decf	i2printf@exp,f,c
 14963  000E5C  A0D8               	btfss	status,0,c
 14964  000E5E  0668               	decf	i2printf@exp+1,f,c
 14965  000E60                     i2l5119:
 14966                           
 14967                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
 14968  000E60  5067               	movf	i2printf@exp,w,c
 14969  000E62  0800               	sublw	0
 14970  000E64  EC52  F00D         	call	i2_scale
 14971  000E68  C02B  F063         	movff	?i2_scale,i2printf@tmpval
 14972  000E6C  C02C  F064         	movff	?i2_scale+1,i2printf@tmpval+1
 14973  000E70  C02D  F065         	movff	?i2_scale+2,i2printf@tmpval+2
 14974                           
 14975                           ;doprnt.c: 847: tmpval.integ *= fval;
 14976  000E74  C063  F01C         	movff	i2printf@tmpval,i2___ftmul@f1
 14977  000E78  C064  F01D         	movff	i2printf@tmpval+1,i2___ftmul@f1+1
 14978  000E7C  C065  F01E         	movff	i2printf@tmpval+2,i2___ftmul@f1+2
 14979  000E80  C06B  F01F         	movff	i2printf@fval,i2___ftmul@f2
 14980  000E84  C06C  F020         	movff	i2printf@fval+1,i2___ftmul@f2+1
 14981  000E88  C06D  F021         	movff	i2printf@fval+2,i2___ftmul@f2+2
 14982  000E8C  EC9D  F01D         	call	i2___ftmul	;wreg free
 14983  000E90  C01C  F063         	movff	?i2___ftmul,i2printf@tmpval
 14984  000E94  C01D  F064         	movff	?i2___ftmul+1,i2printf@tmpval+1
 14985  000E98  C01E  F065         	movff	?i2___ftmul+2,i2printf@tmpval+2
 14986                           
 14987                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
 14988  000E9C  C063  F02B         	movff	i2printf@tmpval,i2___ftge@ff1
 14989  000EA0  C064  F02C         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 14990  000EA4  C065  F02D         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 14991  000EA8  0E00               	movlw	0
 14992  000EAA  6E2E               	movwf	i2___ftge@ff2,c
 14993  000EAC  0E80               	movlw	128
 14994  000EAE  6E2F               	movwf	i2___ftge@ff2+1,c
 14995  000EB0  0E3F               	movlw	63
 14996  000EB2  6E30               	movwf	i2___ftge@ff2+2,c
 14997  000EB4  ECC0  F022         	call	i2___ftge	;wreg free
 14998  000EB8  B0D8               	btfsc	status,0,c
 14999  000EBA  D004               	goto	i2l5127
 15000                           
 15001                           ;doprnt.c: 849: exp--;
 15002  000EBC  0667               	decf	i2printf@exp,f,c
 15003  000EBE  A0D8               	btfss	status,0,c
 15004  000EC0  0668               	decf	i2printf@exp+1,f,c
 15005  000EC2  D012               	goto	i2l5131
 15006  000EC4                     i2l5127:
 15007                           
 15008                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
 15009  000EC4  C063  F02B         	movff	i2printf@tmpval,i2___ftge@ff1
 15010  000EC8  C064  F02C         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 15011  000ECC  C065  F02D         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 15012  000ED0  0E00               	movlw	0
 15013  000ED2  6E2E               	movwf	i2___ftge@ff2,c
 15014  000ED4  0E20               	movlw	32
 15015  000ED6  6E2F               	movwf	i2___ftge@ff2+1,c
 15016  000ED8  0E41               	movlw	65
 15017  000EDA  6E30               	movwf	i2___ftge@ff2+2,c
 15018  000EDC  ECC0  F022         	call	i2___ftge	;wreg free
 15019  000EE0  A0D8               	btfss	status,0,c
 15020  000EE2  D002               	goto	i2l5131
 15021                           
 15022                           ;doprnt.c: 851: exp++;
 15023  000EE4  4A67               	infsnz	i2printf@exp,f,c
 15024  000EE6  2A68               	incf	i2printf@exp+1,f,c
 15025  000EE8                     i2l5131:
 15026                           
 15027                           ;doprnt.c: 852: }
 15028                           ;doprnt.c: 1112: if(prec <= 12)
 15029  000EE8  BE62               	btfsc	i2printf@prec+1,7,c
 15030  000EEA  D006               	goto	i2l5133
 15031  000EEC  5062               	movf	i2printf@prec+1,w,c
 15032  000EEE  E11B               	bnz	i2l5135
 15033  000EF0  0E0D               	movlw	13
 15034  000EF2  5C61               	subwf	i2printf@prec,w,c
 15035  000EF4  B0D8               	btfsc	status,0,c
 15036  000EF6  D017               	goto	i2l5135
 15037  000EF8                     i2l5133:
 15038                           
 15039                           ;doprnt.c: 1113: fval += fround(prec);
 15040  000EF8  C06B  F035         	movff	i2printf@fval,i2___ftadd@f1
 15041  000EFC  C06C  F036         	movff	i2printf@fval+1,i2___ftadd@f1+1
 15042  000F00  C06D  F037         	movff	i2printf@fval+2,i2___ftadd@f1+2
 15043  000F04  5061               	movf	i2printf@prec,w,c
 15044  000F06  ECC0  F013         	call	i2_fround
 15045  000F0A  C02B  F038         	movff	?i2_fround,i2___ftadd@f2
 15046  000F0E  C02C  F039         	movff	?i2_fround+1,i2___ftadd@f2+1
 15047  000F12  C02D  F03A         	movff	?i2_fround+2,i2___ftadd@f2+2
 15048  000F16  ECED  F015         	call	i2___ftadd	;wreg free
 15049  000F1A  C035  F06B         	movff	?i2___ftadd,i2printf@fval
 15050  000F1E  C036  F06C         	movff	?i2___ftadd+1,i2printf@fval+1
 15051  000F22  C037  F06D         	movff	?i2___ftadd+2,i2printf@fval+2
 15052  000F26                     i2l5135:
 15053                           
 15054                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
 15055  000F26  BE68               	btfsc	i2printf@exp+1,7,c
 15056  000F28  D006               	goto	i2l5137
 15057  000F2A  5068               	movf	i2printf@exp+1,w,c
 15058  000F2C  E11E               	bnz	i2l5143
 15059  000F2E  0E0A               	movlw	10
 15060  000F30  5C67               	subwf	i2printf@exp,w,c
 15061  000F32  B0D8               	btfsc	status,0,c
 15062  000F34  D01A               	goto	i2l5143
 15063  000F36                     i2l5137:
 15064  000F36  506B               	movf	i2printf@fval,w,c
 15065  000F38  106C               	iorwf	i2printf@fval+1,w,c
 15066  000F3A  106D               	iorwf	i2printf@fval+2,w,c
 15067  000F3C  B4D8               	btfsc	status,2,c
 15068  000F3E  D051               	goto	i2l5157
 15069  000F40  C06B  F02B         	movff	i2printf@fval,i2___fttol@f1
 15070  000F44  C06C  F02C         	movff	i2printf@fval+1,i2___fttol@f1+1
 15071  000F48  C06D  F02D         	movff	i2printf@fval+2,i2___fttol@f1+2
 15072  000F4C  EC17  F01E         	call	i2___fttol	;wreg free
 15073  000F50  502B               	movf	?i2___fttol,w,c
 15074  000F52  102C               	iorwf	?i2___fttol+1,w,c
 15075  000F54  102D               	iorwf	?i2___fttol+2,w,c
 15076  000F56  102E               	iorwf	?i2___fttol+3,w,c
 15077  000F58  B4D8               	btfsc	status,2,c
 15078  000F5A  BE68               	btfsc	i2printf@exp+1,7,c
 15079  000F5C  D042               	goto	i2l5157
 15080  000F5E  5068               	movf	i2printf@exp+1,w,c
 15081  000F60  E104               	bnz	i2l5143
 15082  000F62  0E02               	movlw	2
 15083  000F64  5C67               	subwf	i2printf@exp,w,c
 15084  000F66  A0D8               	btfss	status,0,c
 15085  000F68  D03C               	goto	i2l5157
 15086  000F6A                     i2l5143:
 15087                           
 15088                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
 15089  000F6A  C063  F02B         	movff	i2printf@tmpval,i2___ftge@ff1
 15090  000F6E  C064  F02C         	movff	i2printf@tmpval+1,i2___ftge@ff1+1
 15091  000F72  C065  F02D         	movff	i2printf@tmpval+2,i2___ftge@ff1+2
 15092  000F76  0E70               	movlw	112
 15093  000F78  6E2E               	movwf	i2___ftge@ff2,c
 15094  000F7A  0E89               	movlw	137
 15095  000F7C  6E2F               	movwf	i2___ftge@ff2+1,c
 15096  000F7E  0E40               	movlw	64
 15097  000F80  6E30               	movwf	i2___ftge@ff2+2,c
 15098  000F82  ECC0  F022         	call	i2___ftge	;wreg free
 15099  000F86  B0D8               	btfsc	status,0,c
 15100  000F88  D002               	goto	i2l5147
 15101                           
 15102                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
 15103  000F8A  0EF7               	movlw	247
 15104  000F8C  D001               	goto	L7
 15105  000F8E                     i2l5147:
 15106                           
 15107                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
 15108  000F8E  0EF8               	movlw	248
 15109  000F90                     L7:
 15110  000F90  2667               	addwf	i2printf@exp,f,c
 15111  000F92  0EFF               	movlw	255
 15112  000F94  2268               	addwfc	i2printf@exp+1,f,c
 15113                           
 15114                           ;doprnt.c: 1124: }
 15115                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
 15116  000F96  5067               	movf	i2printf@exp,w,c
 15117  000F98  EC52  F00D         	call	i2_scale
 15118  000F9C  C02B  F063         	movff	?i2_scale,i2printf@tmpval
 15119  000FA0  C02C  F064         	movff	?i2_scale+1,i2printf@tmpval+1
 15120  000FA4  C02D  F065         	movff	?i2_scale+2,i2printf@tmpval+2
 15121                           
 15122                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
 15123  000FA8  C06B  F001         	movff	i2printf@fval,i2__tdiv_to_l_@f1
 15124  000FAC  C06C  F002         	movff	i2printf@fval+1,i2__tdiv_to_l_@f1+1
 15125  000FB0  C06D  F003         	movff	i2printf@fval+2,i2__tdiv_to_l_@f1+2
 15126  000FB4  C063  F004         	movff	i2printf@tmpval,i2__tdiv_to_l_@f2
 15127  000FB8  C064  F005         	movff	i2printf@tmpval+1,i2__tdiv_to_l_@f2+1
 15128  000FBC  C065  F006         	movff	i2printf@tmpval+2,i2__tdiv_to_l_@f2+2
 15129  000FC0  EC58  F01A         	call	i2__tdiv_to_l_	;wreg free
 15130  000FC4  C001  F05D         	movff	?i2__tdiv_to_l_,i2printf@val
 15131  000FC8  C002  F05E         	movff	?i2__tdiv_to_l_+1,i2printf@val+1
 15132  000FCC  C003  F05F         	movff	?i2__tdiv_to_l_+2,i2printf@val+2
 15133  000FD0  C004  F060         	movff	?i2__tdiv_to_l_+3,i2printf@val+3
 15134                           
 15135                           ;doprnt.c: 1129: fval = 0.0;
 15136  000FD4  0E00               	movlw	0
 15137  000FD6  6E6B               	movwf	i2printf@fval,c
 15138  000FD8  0E00               	movlw	0
 15139  000FDA  6E6C               	movwf	i2printf@fval+1,c
 15140  000FDC  0E00               	movlw	0
 15141  000FDE  6E6D               	movwf	i2printf@fval+2,c
 15142                           
 15143                           ;doprnt.c: 1130: } else {
 15144  000FE0  D032               	goto	i2l5161
 15145  000FE2                     i2l5157:
 15146                           
 15147                           ;doprnt.c: 1131: val = (unsigned long)fval;
 15148  000FE2  C06B  F02B         	movff	i2printf@fval,i2___fttol@f1
 15149  000FE6  C06C  F02C         	movff	i2printf@fval+1,i2___fttol@f1+1
 15150  000FEA  C06D  F02D         	movff	i2printf@fval+2,i2___fttol@f1+2
 15151  000FEE  EC17  F01E         	call	i2___fttol	;wreg free
 15152  000FF2  C02B  F05D         	movff	?i2___fttol,i2printf@val
 15153  000FF6  C02C  F05E         	movff	?i2___fttol+1,i2printf@val+1
 15154  000FFA  C02D  F05F         	movff	?i2___fttol+2,i2printf@val+2
 15155  000FFE  C02E  F060         	movff	?i2___fttol+3,i2printf@val+3
 15156                           
 15157                           ;doprnt.c: 1132: fval -= (double)val;
 15158  001002  C06B  F041         	movff	i2printf@fval,i2___ftsub@f1
 15159  001006  C06C  F042         	movff	i2printf@fval+1,i2___ftsub@f1+1
 15160  00100A  C06D  F043         	movff	i2printf@fval+2,i2___ftsub@f1+2
 15161  00100E  C05D  F009         	movff	i2printf@val,i2___lltoft@c
 15162  001012  C05E  F00A         	movff	i2printf@val+1,i2___lltoft@c+1
 15163  001016  C05F  F00B         	movff	i2printf@val+2,i2___lltoft@c+2
 15164  00101A  C060  F00C         	movff	i2printf@val+3,i2___lltoft@c+3
 15165  00101E  ECD8  F025         	call	i2___lltoft	;wreg free
 15166  001022  C009  F044         	movff	?i2___lltoft,i2___ftsub@f2
 15167  001026  C00A  F045         	movff	?i2___lltoft+1,i2___ftsub@f2+1
 15168  00102A  C00B  F046         	movff	?i2___lltoft+2,i2___ftsub@f2+2
 15169  00102E  ECC3  F026         	call	i2___ftsub	;wreg free
 15170  001032  C041  F06B         	movff	?i2___ftsub,i2printf@fval
 15171  001036  C042  F06C         	movff	?i2___ftsub+1,i2printf@fval+1
 15172  00103A  C043  F06D         	movff	?i2___ftsub+2,i2printf@fval+2
 15173                           
 15174                           ;doprnt.c: 1133: exp = 0;
 15175  00103E  0E00               	movlw	0
 15176  001040  6E68               	movwf	i2printf@exp+1,c
 15177  001042  0E00               	movlw	0
 15178  001044  6E67               	movwf	i2printf@exp,c
 15179  001046                     i2l5161:
 15180                           
 15181                           ;doprnt.c: 1134: }
 15182                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
 15183  001046  0E01               	movlw	1
 15184  001048  6E70               	movwf	i2printf@c,c
 15185  00104A                     i2l5163:
 15186  00104A  0E0A               	movlw	10
 15187  00104C  1870               	xorwf	i2printf@c,w,c
 15188  00104E  B4D8               	btfsc	status,2,c
 15189  001050  D018               	goto	i2l5175
 15190                           
 15191                           ;doprnt.c: 1137: if(val < dpowers[c])
 15192  001052  5070               	movf	i2printf@c,w,c
 15193  001054  0D04               	mullw	4
 15194  001056  0EE1               	movlw	low _dpowers
 15195  001058  24F3               	addwf	prodl,w,c
 15196  00105A  6EF6               	movwf	tblptrl,c
 15197  00105C  0EFB               	movlw	high _dpowers
 15198  00105E  20F4               	addwfc	prodh,w,c
 15199  001060  6EF7               	movwf	tblptrh,c
 15200  001062                     	if	0	;There are less than 3 active tblptr bytes
 15201  001062                     	endif
 15202  001062  0009               	tblrd		*+
 15203  001064  50F5               	movf	tablat,w,c
 15204  001066  5C5D               	subwf	i2printf@val,w,c
 15205  001068  0009               	tblrd		*+
 15206  00106A  50F5               	movf	tablat,w,c
 15207  00106C  585E               	subwfb	i2printf@val+1,w,c
 15208  00106E  0009               	tblrd		*+
 15209  001070  50F5               	movf	tablat,w,c
 15210  001072  585F               	subwfb	i2printf@val+2,w,c
 15211  001074  0009               	tblrd		*+
 15212  001076  50F5               	movf	tablat,w,c
 15213  001078  5860               	subwfb	i2printf@val+3,w,c
 15214  00107A  A0D8               	btfss	status,0,c
 15215  00107C  D002               	goto	i2l5175
 15216                           
 15217                           ;doprnt.c: 1138: break;
 15218  00107E  2A70               	incf	i2printf@c,f,c
 15219  001080  D7E4               	goto	i2l5163
 15220  001082                     i2l5175:
 15221                           
 15222                           ;doprnt.c: 1142: width -= prec + c + exp;
 15223  001082  C070  F04D         	movff	i2printf@c,??i2_printf
 15224  001086  6A4E               	clrf	(??i2_printf+1)& (0+255),c
 15225  001088  BE4D               	btfsc	??i2_printf& (0+255),7,c
 15226  00108A  064E               	decf	(??i2_printf+1)& (0+255),f,c
 15227  00108C  5061               	movf	i2printf@prec,w,c
 15228  00108E  264D               	addwf	??i2_printf,f,c
 15229  001090  5062               	movf	i2printf@prec+1,w,c
 15230  001092  224E               	addwfc	??i2_printf+1,f,c
 15231  001094  5067               	movf	i2printf@exp,w,c
 15232  001096  264D               	addwf	??i2_printf,f,c
 15233  001098  5068               	movf	i2printf@exp+1,w,c
 15234  00109A  224E               	addwfc	??i2_printf+1,f,c
 15235  00109C  504D               	movf	??i2_printf,w,c
 15236  00109E  5E6E               	subwf	i2printf@width,f,c
 15237  0010A0  504E               	movf	??i2_printf+1,w,c
 15238  0010A2  5A6F               	subwfb	i2printf@width+1,f,c
 15239                           
 15240                           ;doprnt.c: 1143: if(
 15241                           ;doprnt.c: 1147: prec)
 15242  0010A4  5061               	movf	i2printf@prec,w,c
 15243  0010A6  1062               	iorwf	i2printf@prec+1,w,c
 15244  0010A8  B4D8               	btfsc	status,2,c
 15245  0010AA  D003               	goto	i2l5179
 15246                           
 15247                           ;doprnt.c: 1148: width--;
 15248  0010AC  066E               	decf	i2printf@width,f,c
 15249  0010AE  A0D8               	btfss	status,0,c
 15250  0010B0  066F               	decf	i2printf@width+1,f,c
 15251  0010B2                     i2l5179:
 15252                           
 15253                           ;doprnt.c: 1149: if(flag & 0x03)
 15254  0010B2  0E03               	movlw	3
 15255  0010B4  1469               	andwf	i2printf@flag,w,c
 15256  0010B6  6E4D               	movwf	??i2_printf& (0+255),c
 15257  0010B8  0E00               	movlw	0
 15258  0010BA  146A               	andwf	i2printf@flag+1,w,c
 15259  0010BC  6E4E               	movwf	(??i2_printf+1)& (0+255),c
 15260  0010BE  504D               	movf	??i2_printf,w,c
 15261  0010C0  104E               	iorwf	??i2_printf+1,w,c
 15262  0010C2  B4D8               	btfsc	status,2,c
 15263  0010C4  D003               	goto	i2l5183
 15264                           
 15265                           ;doprnt.c: 1150: width--;
 15266  0010C6  066E               	decf	i2printf@width,f,c
 15267  0010C8  A0D8               	btfss	status,0,c
 15268  0010CA  066F               	decf	i2printf@width+1,f,c
 15269  0010CC                     i2l5183:
 15270                           
 15271                           ;doprnt.c: 1153: if(flag & 0x04) {
 15272  0010CC  A469               	btfss	i2printf@flag,2,c
 15273  0010CE  D022               	goto	i2l5199
 15274                           
 15275                           ;doprnt.c: 1157: if(flag & 0x03)
 15276  0010D0  0E03               	movlw	3
 15277  0010D2  1469               	andwf	i2printf@flag,w,c
 15278  0010D4  6E4D               	movwf	??i2_printf& (0+255),c
 15279  0010D6  0E00               	movlw	0
 15280  0010D8  146A               	andwf	i2printf@flag+1,w,c
 15281  0010DA  6E4E               	movwf	(??i2_printf+1)& (0+255),c
 15282  0010DC  504D               	movf	??i2_printf,w,c
 15283  0010DE  104E               	iorwf	??i2_printf+1,w,c
 15284  0010E0  B4D8               	btfsc	status,2,c
 15285  0010E2  D00A               	goto	i2l5193
 15286                           
 15287                           ;doprnt.c: 1159: (putch('-') );
 15288  0010E4  0E2D               	movlw	45
 15289  0010E6  EC8B  F028         	call	i2_putch
 15290                           
 15291                           ;doprnt.c: 1168: while(width > 0) {
 15292  0010EA  D006               	goto	i2l5193
 15293  0010EC                     i2l5189:
 15294                           
 15295                           ;doprnt.c: 1169: (putch('0') );
 15296  0010EC  0E30               	movlw	48
 15297  0010EE  EC8B  F028         	call	i2_putch
 15298                           
 15299                           ;doprnt.c: 1170: width--;
 15300  0010F2  066E               	decf	i2printf@width,f,c
 15301  0010F4  A0D8               	btfss	status,0,c
 15302  0010F6  066F               	decf	i2printf@width+1,f,c
 15303  0010F8                     i2l5193:
 15304  0010F8  BE6F               	btfsc	i2printf@width+1,7,c
 15305  0010FA  D065               	goto	i2l5211
 15306  0010FC  506F               	movf	i2printf@width+1,w,c
 15307  0010FE  E1F6               	bnz	i2l5189
 15308  001100  046E               	decf	i2printf@width,w,c
 15309  001102  A0D8               	btfss	status,0,c
 15310  001104  D060               	goto	i2l5211
 15311  001106  D7F2               	goto	i2l5189
 15312  001108                     i2l5195:
 15313                           
 15314                           ;doprnt.c: 1181: (putch(' ') );
 15315  001108  0E20               	movlw	32
 15316  00110A  EC8B  F028         	call	i2_putch
 15317                           
 15318                           ;doprnt.c: 1182: width--;
 15319  00110E  066E               	decf	i2printf@width,f,c
 15320  001110  A0D8               	btfss	status,0,c
 15321  001112  066F               	decf	i2printf@width+1,f,c
 15322  001114                     i2l5199:
 15323  001114  BE6F               	btfsc	i2printf@width+1,7,c
 15324  001116  D005               	goto	i2l5201
 15325  001118  506F               	movf	i2printf@width+1,w,c
 15326  00111A  E1F6               	bnz	i2l5195
 15327  00111C  046E               	decf	i2printf@width,w,c
 15328  00111E  B0D8               	btfsc	status,0,c
 15329  001120  D7F3               	goto	i2l5195
 15330  001122                     i2l5201:
 15331                           
 15332                           ;doprnt.c: 1183: }
 15333                           ;doprnt.c: 1188: if(flag & 0x03)
 15334  001122  0E03               	movlw	3
 15335  001124  1469               	andwf	i2printf@flag,w,c
 15336  001126  6E4D               	movwf	??i2_printf& (0+255),c
 15337  001128  0E00               	movlw	0
 15338  00112A  146A               	andwf	i2printf@flag+1,w,c
 15339  00112C  6E4E               	movwf	(??i2_printf+1)& (0+255),c
 15340  00112E  504D               	movf	??i2_printf,w,c
 15341  001130  104E               	iorwf	??i2_printf+1,w,c
 15342  001132  B4D8               	btfsc	status,2,c
 15343  001134  D048               	goto	i2l5211
 15344                           
 15345                           ;doprnt.c: 1190: (putch('-') );
 15346  001136  0E2D               	movlw	45
 15347  001138  EC8B  F028         	call	i2_putch
 15348                           
 15349                           ;doprnt.c: 1195: }
 15350                           ;doprnt.c: 1196: while(c--) {
 15351  00113C  D044               	goto	i2l5211
 15352  00113E                     i2l5205:
 15353                           
 15354                           ;doprnt.c: 1200: {
 15355                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
 15356  00113E  C05D  F001         	movff	i2printf@val,i2___lldiv@dividend
 15357  001142  C05E  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 15358  001146  C05F  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 15359  00114A  C060  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 15360  00114E  5070               	movf	i2printf@c,w,c
 15361  001150  0D04               	mullw	4
 15362  001152  0EE1               	movlw	low _dpowers
 15363  001154  24F3               	addwf	prodl,w,c
 15364  001156  6EF6               	movwf	tblptrl,c
 15365  001158  0EFB               	movlw	high _dpowers
 15366  00115A  20F4               	addwfc	prodh,w,c
 15367  00115C  6EF7               	movwf	tblptrh,c
 15368  00115E                     	if	0	;There are less than 3 active tblptr bytes
 15369  00115E                     	endif
 15370  00115E  0009               	tblrd		*+
 15371  001160  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 15372  001164  0009               	tblrd		*+
 15373  001166  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 15374  00116A  0009               	tblrd		*+
 15375  00116C  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 15376  001170  000A               	tblrd		*-
 15377  001172  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 15378  001176  EC13  F024         	call	i2___lldiv	;wreg free
 15379  00117A  C001  F063         	movff	?i2___lldiv,i2printf@tmpval
 15380  00117E  C002  F064         	movff	?i2___lldiv+1,i2printf@tmpval+1
 15381  001182  C003  F065         	movff	?i2___lldiv+2,i2printf@tmpval+2
 15382  001186  C004  F066         	movff	?i2___lldiv+3,i2printf@tmpval+3
 15383                           
 15384                           ;doprnt.c: 1202: tmpval.vd %= 10;
 15385  00118A  C063  F00E         	movff	i2printf@tmpval,i2___llmod@dividend
 15386  00118E  C064  F00F         	movff	i2printf@tmpval+1,i2___llmod@dividend+1
 15387  001192  C065  F010         	movff	i2printf@tmpval+2,i2___llmod@dividend+2
 15388  001196  C066  F011         	movff	i2printf@tmpval+3,i2___llmod@dividend+3
 15389  00119A  0E0A               	movlw	10
 15390  00119C  6E12               	movwf	i2___llmod@divisor,c
 15391  00119E  0E00               	movlw	0
 15392  0011A0  6E13               	movwf	i2___llmod@divisor+1,c
 15393  0011A2  0E00               	movlw	0
 15394  0011A4  6E14               	movwf	i2___llmod@divisor+2,c
 15395  0011A6  0E00               	movlw	0
 15396  0011A8  6E15               	movwf	i2___llmod@divisor+3,c
 15397  0011AA  EC75  F025         	call	i2___llmod	;wreg free
 15398  0011AE  C00E  F063         	movff	?i2___llmod,i2printf@tmpval
 15399  0011B2  C00F  F064         	movff	?i2___llmod+1,i2printf@tmpval+1
 15400  0011B6  C010  F065         	movff	?i2___llmod+2,i2printf@tmpval+2
 15401  0011BA  C011  F066         	movff	?i2___llmod+3,i2printf@tmpval+3
 15402                           
 15403                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
 15404  0011BE  5063               	movf	i2printf@tmpval,w,c
 15405  0011C0  0F30               	addlw	48
 15406  0011C2  EC8B  F028         	call	i2_putch
 15407  0011C6                     i2l5211:
 15408  0011C6  0670               	decf	i2printf@c,f,c
 15409  0011C8  2870               	incf	i2printf@c,w,c
 15410  0011CA  B4D8               	btfsc	status,2,c
 15411  0011CC  D007               	goto	i2l5217
 15412  0011CE  D7B7               	goto	i2l5205
 15413  0011D0                     i2l5213:
 15414                           
 15415                           ;doprnt.c: 1208: (putch('0') );
 15416  0011D0  0E30               	movlw	48
 15417  0011D2  EC8B  F028         	call	i2_putch
 15418                           
 15419                           ;doprnt.c: 1209: exp--;
 15420  0011D6  0667               	decf	i2printf@exp,f,c
 15421  0011D8  A0D8               	btfss	status,0,c
 15422  0011DA  0668               	decf	i2printf@exp+1,f,c
 15423  0011DC                     i2l5217:
 15424  0011DC  BE68               	btfsc	i2printf@exp+1,7,c
 15425  0011DE  D005               	goto	i2l5219
 15426  0011E0  5068               	movf	i2printf@exp+1,w,c
 15427  0011E2  E1F6               	bnz	i2l5213
 15428  0011E4  0467               	decf	i2printf@exp,w,c
 15429  0011E6  B0D8               	btfsc	status,0,c
 15430  0011E8  D7F3               	goto	i2l5213
 15431  0011EA                     i2l5219:
 15432                           
 15433                           ;doprnt.c: 1210: }
 15434                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 15435  0011EA  BE62               	btfsc	i2printf@prec+1,7,c
 15436  0011EC  D009               	goto	i2l552
 15437  0011EE  5062               	movf	i2printf@prec+1,w,c
 15438  0011F0  E104               	bnz	i2u532_40
 15439  0011F2  0E09               	movlw	9
 15440  0011F4  5C61               	subwf	i2printf@prec,w,c
 15441  0011F6  A0D8               	btfss	status,0,c
 15442  0011F8  D003               	goto	i2l552
 15443  0011FA                     i2u532_40:
 15444                           
 15445                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
 15446  0011FA  0E08               	movlw	8
 15447  0011FC  6E70               	movwf	i2printf@c,c
 15448  0011FE  D002               	goto	i2l5223
 15449  001200                     i2l552:
 15450                           
 15451                           ;doprnt.c: 1213: else
 15452                           ;doprnt.c: 1214: c = prec;
 15453  001200  C061  F070         	movff	i2printf@prec,i2printf@c
 15454  001204                     i2l5223:
 15455                           
 15456                           ;doprnt.c: 1215: prec -= c;
 15457  001204  5070               	movf	i2printf@c,w,c
 15458  001206  5E61               	subwf	i2printf@prec,f,c
 15459  001208  0E00               	movlw	0
 15460  00120A  BE70               	btfsc	i2printf@c,7,c
 15461  00120C  0EFF               	movlw	255
 15462  00120E  5A62               	subwfb	i2printf@prec+1,f,c
 15463                           
 15464                           ;doprnt.c: 1219: if(c)
 15465  001210  5070               	movf	i2printf@c,w,c
 15466  001212  B4D8               	btfsc	status,2,c
 15467  001214  D003               	goto	i2l5229
 15468                           
 15469                           ;doprnt.c: 1221: (putch('.') );
 15470  001216  0E2E               	movlw	46
 15471  001218  EC8B  F028         	call	i2_putch
 15472  00121C                     i2l5229:
 15473                           
 15474                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 15475  00121C  5070               	movf	i2printf@c,w,c
 15476  00121E  EC52  F00D         	call	i2_scale
 15477  001222  C02B  F053         	movff	?i2_scale,i2_printf$1669
 15478  001226  C02C  F054         	movff	?i2_scale+1,i2_printf$1669+1
 15479  00122A  C02D  F055         	movff	?i2_scale+2,i2_printf$1669+2
 15480                           
 15481                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 15482  00122E  C06B  F01F         	movff	i2printf@fval,i2___ftmul@f2
 15483  001232  C06C  F020         	movff	i2printf@fval+1,i2___ftmul@f2+1
 15484  001236  C06D  F021         	movff	i2printf@fval+2,i2___ftmul@f2+2
 15485  00123A  C053  F01C         	movff	i2_printf$1669,i2___ftmul@f1
 15486  00123E  C054  F01D         	movff	i2_printf$1669+1,i2___ftmul@f1+1
 15487  001242  C055  F01E         	movff	i2_printf$1669+2,i2___ftmul@f1+2
 15488  001246  EC9D  F01D         	call	i2___ftmul	;wreg free
 15489  00124A  C01C  F02B         	movff	?i2___ftmul,i2___fttol@f1
 15490  00124E  C01D  F02C         	movff	?i2___ftmul+1,i2___fttol@f1+1
 15491  001252  C01E  F02D         	movff	?i2___ftmul+2,i2___fttol@f1+2
 15492  001256  EC17  F01E         	call	i2___fttol	;wreg free
 15493  00125A  C02B  F05D         	movff	?i2___fttol,i2printf@val
 15494  00125E  C02C  F05E         	movff	?i2___fttol+1,i2printf@val+1
 15495  001262  C02D  F05F         	movff	?i2___fttol+2,i2printf@val+2
 15496  001266  C02E  F060         	movff	?i2___fttol+3,i2printf@val+3
 15497                           
 15498                           ;doprnt.c: 1228: while(c--) {
 15499  00126A  D06A               	goto	i2l5239
 15500  00126C                     i2l5233:
 15501                           
 15502                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
 15503  00126C  C05D  F001         	movff	i2printf@val,i2___lldiv@dividend
 15504  001270  C05E  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 15505  001274  C05F  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 15506  001278  C060  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 15507  00127C  5070               	movf	i2printf@c,w,c
 15508  00127E  0D04               	mullw	4
 15509  001280  0EE1               	movlw	low _dpowers
 15510  001282  24F3               	addwf	prodl,w,c
 15511  001284  6EF6               	movwf	tblptrl,c
 15512  001286  0EFB               	movlw	high _dpowers
 15513  001288  20F4               	addwfc	prodh,w,c
 15514  00128A  6EF7               	movwf	tblptrh,c
 15515  00128C                     	if	0	;There are less than 3 active tblptr bytes
 15516  00128C                     	endif
 15517  00128C  0009               	tblrd		*+
 15518  00128E  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 15519  001292  0009               	tblrd		*+
 15520  001294  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 15521  001298  0009               	tblrd		*+
 15522  00129A  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 15523  00129E  000A               	tblrd		*-
 15524  0012A0  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 15525  0012A4  EC13  F024         	call	i2___lldiv	;wreg free
 15526  0012A8  C001  F063         	movff	?i2___lldiv,i2printf@tmpval
 15527  0012AC  C002  F064         	movff	?i2___lldiv+1,i2printf@tmpval+1
 15528  0012B0  C003  F065         	movff	?i2___lldiv+2,i2printf@tmpval+2
 15529  0012B4  C004  F066         	movff	?i2___lldiv+3,i2printf@tmpval+3
 15530                           
 15531                           ;doprnt.c: 1230: tmpval.vd %= 10;
 15532  0012B8  C063  F00E         	movff	i2printf@tmpval,i2___llmod@dividend
 15533  0012BC  C064  F00F         	movff	i2printf@tmpval+1,i2___llmod@dividend+1
 15534  0012C0  C065  F010         	movff	i2printf@tmpval+2,i2___llmod@dividend+2
 15535  0012C4  C066  F011         	movff	i2printf@tmpval+3,i2___llmod@dividend+3
 15536  0012C8  0E0A               	movlw	10
 15537  0012CA  6E12               	movwf	i2___llmod@divisor,c
 15538  0012CC  0E00               	movlw	0
 15539  0012CE  6E13               	movwf	i2___llmod@divisor+1,c
 15540  0012D0  0E00               	movlw	0
 15541  0012D2  6E14               	movwf	i2___llmod@divisor+2,c
 15542  0012D4  0E00               	movlw	0
 15543  0012D6  6E15               	movwf	i2___llmod@divisor+3,c
 15544  0012D8  EC75  F025         	call	i2___llmod	;wreg free
 15545  0012DC  C00E  F063         	movff	?i2___llmod,i2printf@tmpval
 15546  0012E0  C00F  F064         	movff	?i2___llmod+1,i2printf@tmpval+1
 15547  0012E4  C010  F065         	movff	?i2___llmod+2,i2printf@tmpval+2
 15548  0012E8  C011  F066         	movff	?i2___llmod+3,i2printf@tmpval+3
 15549                           
 15550                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
 15551  0012EC  5063               	movf	i2printf@tmpval,w,c
 15552  0012EE  0F30               	addlw	48
 15553  0012F0  EC8B  F028         	call	i2_putch
 15554                           
 15555                           ;doprnt.c: 1232: val %= dpowers[c];
 15556  0012F4  C05D  F00E         	movff	i2printf@val,i2___llmod@dividend
 15557  0012F8  C05E  F00F         	movff	i2printf@val+1,i2___llmod@dividend+1
 15558  0012FC  C05F  F010         	movff	i2printf@val+2,i2___llmod@dividend+2
 15559  001300  C060  F011         	movff	i2printf@val+3,i2___llmod@dividend+3
 15560  001304  5070               	movf	i2printf@c,w,c
 15561  001306  0D04               	mullw	4
 15562  001308  0EE1               	movlw	low _dpowers
 15563  00130A  24F3               	addwf	prodl,w,c
 15564  00130C  6EF6               	movwf	tblptrl,c
 15565  00130E  0EFB               	movlw	high _dpowers
 15566  001310  20F4               	addwfc	prodh,w,c
 15567  001312  6EF7               	movwf	tblptrh,c
 15568  001314                     	if	0	;There are less than 3 active tblptr bytes
 15569  001314                     	endif
 15570  001314  0009               	tblrd		*+
 15571  001316  CFF5 F012          	movff	tablat,i2___llmod@divisor
 15572  00131A  0009               	tblrd		*+
 15573  00131C  CFF5 F013          	movff	tablat,i2___llmod@divisor+1
 15574  001320  0009               	tblrd		*+
 15575  001322  CFF5 F014          	movff	tablat,i2___llmod@divisor+2
 15576  001326  000A               	tblrd		*-
 15577  001328  CFF5 F015          	movff	tablat,i2___llmod@divisor+3
 15578  00132C  EC75  F025         	call	i2___llmod	;wreg free
 15579  001330  C00E  F05D         	movff	?i2___llmod,i2printf@val
 15580  001334  C00F  F05E         	movff	?i2___llmod+1,i2printf@val+1
 15581  001338  C010  F05F         	movff	?i2___llmod+2,i2printf@val+2
 15582  00133C  C011  F060         	movff	?i2___llmod+3,i2printf@val+3
 15583  001340                     i2l5239:
 15584  001340  0670               	decf	i2printf@c,f,c
 15585  001342  2870               	incf	i2printf@c,w,c
 15586  001344  B4D8               	btfsc	status,2,c
 15587  001346  D007               	goto	i2l5245
 15588  001348  D791               	goto	i2l5233
 15589  00134A                     i2l5241:
 15590                           
 15591                           ;doprnt.c: 1236: (putch('0') );
 15592  00134A  0E30               	movlw	48
 15593  00134C  EC8B  F028         	call	i2_putch
 15594                           
 15595                           ;doprnt.c: 1237: prec--;
 15596  001350  0661               	decf	i2printf@prec,f,c
 15597  001352  A0D8               	btfss	status,0,c
 15598  001354  0662               	decf	i2printf@prec+1,f,c
 15599  001356                     i2l5245:
 15600  001356  5061               	movf	i2printf@prec,w,c
 15601  001358  1062               	iorwf	i2printf@prec+1,w,c
 15602  00135A  B4D8               	btfsc	status,2,c
 15603  00135C  D13E               	goto	i2l5333
 15604  00135E  D7F5               	goto	i2l5241
 15605  001360                     i2l5247:
 15606                           
 15607                           ;doprnt.c: 1246: }
 15608                           ;doprnt.c: 1273: {
 15609                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 15610  001360  C059  FFD9         	movff	i2printf@ap,fsr2l
 15611  001364  C05A  FFDA         	movff	i2printf@ap+1,fsr2h
 15612  001368  CFDE F04D          	movff	postinc2,??i2_printf
 15613  00136C  CFDD F04E          	movff	postdec2,??i2_printf+1
 15614  001370  C04D  F05D         	movff	??i2_printf,i2printf@val
 15615  001374  C04E  F05E         	movff	??i2_printf+1,i2printf@val+1
 15616  001378  6A5F               	clrf	i2printf@val+2,c
 15617  00137A  6A60               	clrf	i2printf@val+3,c
 15618  00137C  0E02               	movlw	2
 15619  00137E  2659               	addwf	i2printf@ap,f,c
 15620  001380  0E00               	movlw	0
 15621  001382  225A               	addwfc	i2printf@ap+1,f,c
 15622                           
 15623                           ;doprnt.c: 1287: }
 15624                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
 15625  001384  D03C               	goto	i2l5281
 15626  001386                     i2l5251:
 15627                           
 15628                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 15629  001386  0E01               	movlw	1
 15630  001388  6E70               	movwf	i2printf@c,c
 15631  00138A                     i2l5253:
 15632  00138A  0E0A               	movlw	10
 15633  00138C  1870               	xorwf	i2printf@c,w,c
 15634  00138E  B4D8               	btfsc	status,2,c
 15635  001390  D03E               	goto	i2l5283
 15636                           
 15637                           ;doprnt.c: 1306: if(val < dpowers[c])
 15638  001392  5070               	movf	i2printf@c,w,c
 15639  001394  0D04               	mullw	4
 15640  001396  0EE1               	movlw	low _dpowers
 15641  001398  24F3               	addwf	prodl,w,c
 15642  00139A  6EF6               	movwf	tblptrl,c
 15643  00139C  0EFB               	movlw	high _dpowers
 15644  00139E  20F4               	addwfc	prodh,w,c
 15645  0013A0  6EF7               	movwf	tblptrh,c
 15646  0013A2                     	if	0	;There are less than 3 active tblptr bytes
 15647  0013A2                     	endif
 15648  0013A2  0009               	tblrd		*+
 15649  0013A4  50F5               	movf	tablat,w,c
 15650  0013A6  5C5D               	subwf	i2printf@val,w,c
 15651  0013A8  0009               	tblrd		*+
 15652  0013AA  50F5               	movf	tablat,w,c
 15653  0013AC  585E               	subwfb	i2printf@val+1,w,c
 15654  0013AE  0009               	tblrd		*+
 15655  0013B0  50F5               	movf	tablat,w,c
 15656  0013B2  585F               	subwfb	i2printf@val+2,w,c
 15657  0013B4  0009               	tblrd		*+
 15658  0013B6  50F5               	movf	tablat,w,c
 15659  0013B8  5860               	subwfb	i2printf@val+3,w,c
 15660  0013BA  A0D8               	btfss	status,0,c
 15661  0013BC  D028               	goto	i2l5283
 15662                           
 15663                           ;doprnt.c: 1307: break;
 15664  0013BE  2A70               	incf	i2printf@c,f,c
 15665  0013C0  D7E4               	goto	i2l5253
 15666  0013C2                     i2l5265:
 15667                           
 15668                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 15669  0013C2  0E01               	movlw	1
 15670  0013C4  6E70               	movwf	i2printf@c,c
 15671  0013C6                     i2l5267:
 15672  0013C6  0E08               	movlw	8
 15673  0013C8  1870               	xorwf	i2printf@c,w,c
 15674  0013CA  B4D8               	btfsc	status,2,c
 15675  0013CC  D020               	goto	i2l5283
 15676                           
 15677                           ;doprnt.c: 1317: if(val < hexpowers[c])
 15678  0013CE  5070               	movf	i2printf@c,w,c
 15679  0013D0  0D04               	mullw	4
 15680  0013D2  0E57               	movlw	low _hexpowers
 15681  0013D4  24F3               	addwf	prodl,w,c
 15682  0013D6  6EF6               	movwf	tblptrl,c
 15683  0013D8  0EFC               	movlw	high _hexpowers
 15684  0013DA  20F4               	addwfc	prodh,w,c
 15685  0013DC  6EF7               	movwf	tblptrh,c
 15686  0013DE                     	if	0	;There are less than 3 active tblptr bytes
 15687  0013DE                     	endif
 15688  0013DE  0009               	tblrd		*+
 15689  0013E0  50F5               	movf	tablat,w,c
 15690  0013E2  5C5D               	subwf	i2printf@val,w,c
 15691  0013E4  0009               	tblrd		*+
 15692  0013E6  50F5               	movf	tablat,w,c
 15693  0013E8  585E               	subwfb	i2printf@val+1,w,c
 15694  0013EA  0009               	tblrd		*+
 15695  0013EC  50F5               	movf	tablat,w,c
 15696  0013EE  585F               	subwfb	i2printf@val+2,w,c
 15697  0013F0  0009               	tblrd		*+
 15698  0013F2  50F5               	movf	tablat,w,c
 15699  0013F4  5860               	subwfb	i2printf@val+3,w,c
 15700  0013F6  A0D8               	btfss	status,0,c
 15701  0013F8  D00A               	goto	i2l5283
 15702                           
 15703                           ;doprnt.c: 1318: break;
 15704  0013FA  2A70               	incf	i2printf@c,f,c
 15705  0013FC  D7E4               	goto	i2l5267
 15706  0013FE                     i2l5281:
 15707  0013FE  5069               	movf	i2printf@flag,w,c
 15708  001400  0BC0               	andlw	192
 15709                           
 15710                           ; Switch size 1, requested type "space"
 15711                           ; Number of cases is 2, Range of values is 128 to 192
 15712                           ; switch strategies available:
 15713                           ; Name         Instructions Cycles
 15714                           ; simple_byte            7     4 (average)
 15715                           ;	Chosen strategy is simple_byte
 15716  001402  0A80               	xorlw	128	; case 128
 15717  001404  B4D8               	btfsc	status,2,c
 15718  001406  D7DD               	goto	i2l5265
 15719  001408  0A40               	xorlw	64	; case 192
 15720  00140A  B4D8               	btfsc	status,2,c
 15721  00140C  D7BC               	goto	i2l5251
 15722  00140E                     i2l5283:
 15723                           
 15724                           ;doprnt.c: 1345: if(width && flag & 0x03)
 15725  00140E  506E               	movf	i2printf@width,w,c
 15726  001410  106F               	iorwf	i2printf@width+1,w,c
 15727  001412  B4D8               	btfsc	status,2,c
 15728  001414  D00D               	goto	i2l5289
 15729  001416  0E03               	movlw	3
 15730  001418  1469               	andwf	i2printf@flag,w,c
 15731  00141A  6E4D               	movwf	??i2_printf& (0+255),c
 15732  00141C  0E00               	movlw	0
 15733  00141E  146A               	andwf	i2printf@flag+1,w,c
 15734  001420  6E4E               	movwf	(??i2_printf+1)& (0+255),c
 15735  001422  504D               	movf	??i2_printf,w,c
 15736  001424  104E               	iorwf	??i2_printf+1,w,c
 15737  001426  B4D8               	btfsc	status,2,c
 15738  001428  D003               	goto	i2l5289
 15739                           
 15740                           ;doprnt.c: 1346: width--;
 15741  00142A  066E               	decf	i2printf@width,f,c
 15742  00142C  A0D8               	btfss	status,0,c
 15743  00142E  066F               	decf	i2printf@width+1,f,c
 15744  001430                     i2l5289:
 15745                           
 15746                           ;doprnt.c: 1381: if(width > c)
 15747  001430  0E80               	movlw	128
 15748  001432  BE70               	btfsc	i2printf@c,7,c
 15749  001434  0E7F               	movlw	127
 15750  001436  6E4D               	movwf	??i2_printf& (0+255),c
 15751  001438  506E               	movf	i2printf@width,w,c
 15752  00143A  5C70               	subwf	i2printf@c,w,c
 15753  00143C  506F               	movf	i2printf@width+1,w,c
 15754  00143E  0A80               	xorlw	128
 15755  001440  584D               	subwfb	??i2_printf& (0+255),w,c
 15756  001442  B0D8               	btfsc	status,0,c
 15757  001444  D007               	goto	i2l5293
 15758                           
 15759                           ;doprnt.c: 1382: width -= c;
 15760  001446  5070               	movf	i2printf@c,w,c
 15761  001448  5E6E               	subwf	i2printf@width,f,c
 15762  00144A  0E00               	movlw	0
 15763  00144C  BE70               	btfsc	i2printf@c,7,c
 15764  00144E  0EFF               	movlw	255
 15765  001450  5A6F               	subwfb	i2printf@width+1,f,c
 15766  001452  D004               	goto	i2l5295
 15767  001454                     i2l5293:
 15768                           
 15769                           ;doprnt.c: 1383: else
 15770                           ;doprnt.c: 1384: width = 0;
 15771  001454  0E00               	movlw	0
 15772  001456  6E6F               	movwf	i2printf@width+1,c
 15773  001458  0E00               	movlw	0
 15774  00145A  6E6E               	movwf	i2printf@width,c
 15775  00145C                     i2l5295:
 15776                           
 15777                           ;doprnt.c: 1387: if(flag & 0x04) {
 15778  00145C  A469               	btfss	i2printf@flag,2,c
 15779  00145E  D018               	goto	i2l5307
 15780                           
 15781                           ;doprnt.c: 1392: if(flag & 0x03)
 15782  001460  0E03               	movlw	3
 15783  001462  1469               	andwf	i2printf@flag,w,c
 15784  001464  6E4D               	movwf	??i2_printf& (0+255),c
 15785  001466  0E00               	movlw	0
 15786  001468  146A               	andwf	i2printf@flag+1,w,c
 15787  00146A  6E4E               	movwf	(??i2_printf+1)& (0+255),c
 15788  00146C  504D               	movf	??i2_printf,w,c
 15789  00146E  104E               	iorwf	??i2_printf+1,w,c
 15790  001470  B4D8               	btfsc	status,2,c
 15791  001472  D003               	goto	i2l5301
 15792                           
 15793                           ;doprnt.c: 1393: (putch('-') );
 15794  001474  0E2D               	movlw	45
 15795  001476  EC8B  F028         	call	i2_putch
 15796  00147A                     i2l5301:
 15797                           
 15798                           ;doprnt.c: 1415: if(width)
 15799  00147A  506E               	movf	i2printf@width,w,c
 15800  00147C  106F               	iorwf	i2printf@width+1,w,c
 15801  00147E  B4D8               	btfsc	status,2,c
 15802  001480  D022               	goto	i2l5317
 15803                           
 15804                           ;doprnt.c: 1417: (putch('0') );
 15805                           
 15806                           ;doprnt.c: 1416: do
 15807  001482  0E30               	movlw	48
 15808  001484  EC8B  F028         	call	i2_putch
 15809                           
 15810                           ;doprnt.c: 1418: while(--width);
 15811  001488  066E               	decf	i2printf@width,f,c
 15812  00148A  A0D8               	btfss	status,0,c
 15813  00148C  066F               	decf	i2printf@width+1,f,c
 15814  00148E  D7F5               	goto	i2l5301
 15815  001490                     i2l5307:
 15816                           
 15817                           ;doprnt.c: 1422: {
 15818                           ;doprnt.c: 1424: if(width
 15819                           ;doprnt.c: 1428: )
 15820  001490  506E               	movf	i2printf@width,w,c
 15821  001492  106F               	iorwf	i2printf@width+1,w,c
 15822  001494  B4D8               	btfsc	status,2,c
 15823  001496  D00A               	goto	i2l5313
 15824  001498                     i2l5309:
 15825                           
 15826                           ;doprnt.c: 1430: (putch(' ') );
 15827  001498  0E20               	movlw	32
 15828  00149A  EC8B  F028         	call	i2_putch
 15829                           
 15830                           ;doprnt.c: 1431: while(--width);
 15831  00149E  066E               	decf	i2printf@width,f,c
 15832  0014A0  A0D8               	btfss	status,0,c
 15833  0014A2  066F               	decf	i2printf@width+1,f,c
 15834  0014A4  506E               	movf	i2printf@width,w,c
 15835  0014A6  106F               	iorwf	i2printf@width+1,w,c
 15836  0014A8  A4D8               	btfss	status,2,c
 15837  0014AA  D7F6               	goto	i2l5309
 15838  0014AC                     i2l5313:
 15839                           
 15840                           ;doprnt.c: 1438: if(flag & 0x03)
 15841  0014AC  0E03               	movlw	3
 15842  0014AE  1469               	andwf	i2printf@flag,w,c
 15843  0014B0  6E4D               	movwf	??i2_printf& (0+255),c
 15844  0014B2  0E00               	movlw	0
 15845  0014B4  146A               	andwf	i2printf@flag+1,w,c
 15846  0014B6  6E4E               	movwf	(??i2_printf+1)& (0+255),c
 15847  0014B8  504D               	movf	??i2_printf,w,c
 15848  0014BA  104E               	iorwf	??i2_printf+1,w,c
 15849  0014BC  B4D8               	btfsc	status,2,c
 15850  0014BE  D003               	goto	i2l5317
 15851                           
 15852                           ;doprnt.c: 1439: (putch('-') );
 15853  0014C0  0E2D               	movlw	45
 15854  0014C2  EC8B  F028         	call	i2_putch
 15855  0014C6                     i2l5317:
 15856                           
 15857                           ;doprnt.c: 1469: }
 15858                           ;doprnt.c: 1472: prec = c;
 15859  0014C6  5070               	movf	i2printf@c,w,c
 15860  0014C8  6E61               	movwf	i2printf@prec,c
 15861  0014CA  6A62               	clrf	i2printf@prec+1,c
 15862  0014CC  BE61               	btfsc	i2printf@prec,7,c
 15863  0014CE  0662               	decf	i2printf@prec+1,f,c
 15864                           
 15865                           ;doprnt.c: 1474: while(prec--) {
 15866  0014D0  D07C               	goto	i2l5331
 15867  0014D2                     i2l5319:
 15868                           
 15869                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 15870  0014D2  C061  F04D         	movff	i2printf@prec,??i2_printf
 15871  0014D6  C062  F04E         	movff	i2printf@prec+1,??i2_printf+1
 15872  0014DA  90D8               	bcf	status,0,c
 15873  0014DC  364D               	rlcf	??i2_printf,f,c
 15874  0014DE  364E               	rlcf	??i2_printf+1,f,c
 15875  0014E0  90D8               	bcf	status,0,c
 15876  0014E2  364D               	rlcf	??i2_printf,f,c
 15877  0014E4  364E               	rlcf	??i2_printf+1,f,c
 15878  0014E6  0EE1               	movlw	low _dpowers
 15879  0014E8  244D               	addwf	??i2_printf,w,c
 15880  0014EA  6EF6               	movwf	tblptrl,c
 15881  0014EC  0EFB               	movlw	high _dpowers
 15882  0014EE  204E               	addwfc	??i2_printf+1,w,c
 15883  0014F0  6EF7               	movwf	tblptrh,c
 15884  0014F2                     	if	0	;There are less than 3 active tblptr bytes
 15885  0014F2                     	endif
 15886  0014F2  0009               	tblrd		*+
 15887  0014F4  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 15888  0014F8  0009               	tblrd		*+
 15889  0014FA  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 15890  0014FE  0009               	tblrd		*+
 15891  001500  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 15892  001504  000A               	tblrd		*-
 15893  001506  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 15894  00150A  C05D  F001         	movff	i2printf@val,i2___lldiv@dividend
 15895  00150E  C05E  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 15896  001512  C05F  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 15897  001516  C060  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 15898  00151A  EC13  F024         	call	i2___lldiv	;wreg free
 15899  00151E  C001  F00E         	movff	?i2___lldiv,i2___llmod@dividend
 15900  001522  C002  F00F         	movff	?i2___lldiv+1,i2___llmod@dividend+1
 15901  001526  C003  F010         	movff	?i2___lldiv+2,i2___llmod@dividend+2
 15902  00152A  C004  F011         	movff	?i2___lldiv+3,i2___llmod@dividend+3
 15903  00152E  0E0A               	movlw	10
 15904  001530  6E12               	movwf	i2___llmod@divisor,c
 15905  001532  0E00               	movlw	0
 15906  001534  6E13               	movwf	i2___llmod@divisor+1,c
 15907  001536  0E00               	movlw	0
 15908  001538  6E14               	movwf	i2___llmod@divisor+2,c
 15909  00153A  0E00               	movlw	0
 15910  00153C  6E15               	movwf	i2___llmod@divisor+3,c
 15911  00153E  EC75  F025         	call	i2___llmod	;wreg free
 15912  001542  500E               	movf	?i2___llmod,w,c
 15913  001544  0F30               	addlw	48
 15914  001546  6E70               	movwf	i2printf@c,c
 15915                           
 15916                           ;doprnt.c: 1491: break;
 15917  001548  D03D               	goto	i2l5329
 15918  00154A                     i2l5321:
 15919                           
 15920                           ;doprnt.c: 1499: {
 15921                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 15922  00154A  C05D  F001         	movff	i2printf@val,i2___lldiv@dividend
 15923  00154E  C05E  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
 15924  001552  C05F  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
 15925  001556  C060  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
 15926  00155A  C061  F04D         	movff	i2printf@prec,??i2_printf
 15927  00155E  C062  F04E         	movff	i2printf@prec+1,??i2_printf+1
 15928  001562  90D8               	bcf	status,0,c
 15929  001564  364D               	rlcf	??i2_printf,f,c
 15930  001566  364E               	rlcf	??i2_printf+1,f,c
 15931  001568  90D8               	bcf	status,0,c
 15932  00156A  364D               	rlcf	??i2_printf,f,c
 15933  00156C  364E               	rlcf	??i2_printf+1,f,c
 15934  00156E  0E57               	movlw	low _hexpowers
 15935  001570  244D               	addwf	??i2_printf,w,c
 15936  001572  6EF6               	movwf	tblptrl,c
 15937  001574  0EFC               	movlw	high _hexpowers
 15938  001576  204E               	addwfc	??i2_printf+1,w,c
 15939  001578  6EF7               	movwf	tblptrh,c
 15940  00157A                     	if	0	;There are less than 3 active tblptr bytes
 15941  00157A                     	endif
 15942  00157A  0009               	tblrd		*+
 15943  00157C  CFF5 F005          	movff	tablat,i2___lldiv@divisor
 15944  001580  0009               	tblrd		*+
 15945  001582  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
 15946  001586  0009               	tblrd		*+
 15947  001588  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
 15948  00158C  000A               	tblrd		*-
 15949  00158E  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
 15950  001592  EC13  F024         	call	i2___lldiv	;wreg free
 15951  001596  5001               	movf	?i2___lldiv,w,c
 15952  001598  0B0F               	andlw	15
 15953  00159A  6E58               	movwf	i2printf@idx,c
 15954                           
 15955                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 15956  00159C  5058               	movf	i2printf@idx,w,c
 15957  00159E  0D01               	mullw	1
 15958  0015A0  0E44               	movlw	low STR_52
 15959  0015A2  24F3               	addwf	prodl,w,c
 15960  0015A4  6EF6               	movwf	tblptrl,c
 15961  0015A6  0EFF               	movlw	high STR_52
 15962  0015A8  20F4               	addwfc	prodh,w,c
 15963  0015AA  6EF7               	movwf	tblptrh,c
 15964  0015AC                     	if	0	;There are less than 3 active tblptr bytes
 15965  0015AC                     	endif
 15966  0015AC  0008               	tblrd		*
 15967  0015AE  CFF5 F070          	movff	tablat,i2printf@c
 15968                           
 15969                           ;doprnt.c: 1523: }
 15970                           
 15971                           ;doprnt.c: 1508: }
 15972                           ;doprnt.c: 1510: break;
 15973  0015B2  D008               	goto	i2l5329
 15974  0015B4                     i2l5327:
 15975  0015B4  5069               	movf	i2printf@flag,w,c
 15976  0015B6  0BC0               	andlw	192
 15977                           
 15978                           ; Switch size 1, requested type "space"
 15979                           ; Number of cases is 2, Range of values is 128 to 192
 15980                           ; switch strategies available:
 15981                           ; Name         Instructions Cycles
 15982                           ; simple_byte            7     4 (average)
 15983                           ;	Chosen strategy is simple_byte
 15984  0015B8  0A80               	xorlw	128	; case 128
 15985  0015BA  B4D8               	btfsc	status,2,c
 15986  0015BC  D7C6               	goto	i2l5321
 15987  0015BE  0A40               	xorlw	64	; case 192
 15988  0015C0  B4D8               	btfsc	status,2,c
 15989  0015C2  D787               	goto	i2l5319
 15990  0015C4                     i2l5329:
 15991                           
 15992                           ;doprnt.c: 1524: (putch(c) );
 15993  0015C4  5070               	movf	i2printf@c,w,c
 15994  0015C6  EC8B  F028         	call	i2_putch
 15995  0015CA                     i2l5331:
 15996  0015CA  0661               	decf	i2printf@prec,f,c
 15997  0015CC  A0D8               	btfss	status,0,c
 15998  0015CE  0662               	decf	i2printf@prec+1,f,c
 15999  0015D0  2861               	incf	i2printf@prec,w,c
 16000  0015D2  E1F0               	bnz	i2l5327
 16001  0015D4  2862               	incf	i2printf@prec+1,w,c
 16002  0015D6  A4D8               	btfss	status,2,c
 16003  0015D8  D7ED               	goto	i2l5327
 16004  0015DA                     i2l5333:
 16005  0015DA  C047  FFF6         	movff	i2printf@f,tblptrl
 16006  0015DE  C048  FFF7         	movff	i2printf@f+1,tblptrh
 16007  0015E2  4A47               	infsnz	i2printf@f,f,c
 16008  0015E4  2A48               	incf	i2printf@f+1,f,c
 16009  0015E6                     	if	0	;tblptru may be non-zero
 16010  0015E6                     	endif
 16011  0015E6                     	if	0	;tblptru may be non-zero
 16012  0015E6                     	endif
 16013  0015E6  0008               	tblrd		*
 16014  0015E8  CFF5 F070          	movff	tablat,i2printf@c
 16015  0015EC  5070               	movf	i2printf@c,w,c
 16016  0015EE  B4D8               	btfsc	status,2,c
 16017  0015F0  0012               	return	
 16018  0015F2  EF0F  F006         	goto	i2l5035
 16019  0015F6                     __end_ofi2_printf:
 16020                           	opt stack 0
 16021                           pclatu	equ	0xFFB
 16022                           pclath	equ	0xFFA
 16023                           tblptru	equ	0xFF8
 16024                           tblptrh	equ	0xFF7
 16025                           tblptrl	equ	0xFF6
 16026                           tablat	equ	0xFF5
 16027                           prodh	equ	0xFF4
 16028                           prodl	equ	0xFF3
 16029                           intcon	equ	0xFF2
 16030                           intcon3	equ	0xFF0
 16031                           postinc0	equ	0xFEE
 16032                           fsr0h	equ	0xFEA
 16033                           fsr0l	equ	0xFE9
 16034                           wreg	equ	0xFE8
 16035                           plusw1	equ	0xFE3
 16036                           fsr1h	equ	0xFE2
 16037                           fsr1l	equ	0xFE1
 16038                           indf2	equ	0xFDF
 16039                           postinc2	equ	0xFDE
 16040                           postdec2	equ	0xFDD
 16041                           plusw2	equ	0xFDB
 16042                           fsr2h	equ	0xFDA
 16043                           fsr2l	equ	0xFD9
 16044                           status	equ	0xFD8
 16045                           
 16046 ;; *************** function i2_scale *****************
 16047 ;; Defined at:
 16048 ;;		line 425 in file "/opt/microchip/xc8/v1.41/sources/common/doprnt.c"
 16049 ;; Parameters:    Size  Location     Type
 16050 ;;  scl             1    wreg     char 
 16051 ;; Auto vars:     Size  Location     Type
 16052 ;;  scl             1   48[COMRAM] char 
 16053 ;; Return value:  Size  Location     Type
 16054 ;;                  3   42[COMRAM] char 
 16055 ;; Registers used:
 16056 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16057 ;; Tracked objects:
 16058 ;;		On entry : 0/0
 16059 ;;		On exit  : 0/0
 16060 ;;		Unchanged: 0/0
 16061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16062 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16063 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16065 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16066 ;;Total ram usage:        7 bytes
 16067 ;; Hardware stack levels used:    1
 16068 ;; Hardware stack levels required when called:    2
 16069 ;; This function calls:
 16070 ;;		i2___awdiv
 16071 ;;		i2___awmod
 16072 ;;		i2___ftmul
 16073 ;;		i2___wmul
 16074 ;; This function is called by:
 16075 ;;		i2_printf
 16076 ;; This function uses a non-reentrant model
 16077 ;;
 16078                           
 16079                           	psect	text62
 16080  001AA4                     __ptext62:
 16081                           	opt stack 0
 16082  001AA4                     i2_scale:
 16083                           	opt stack 20
 16084                           
 16085                           ;incstack = 0
 16086                           ;i2scale@scl stored from wreg
 16087  001AA4  6E31               	movwf	i2scale@scl,c
 16088                           
 16089                           ;doprnt.c: 428: if(scl < 0) {
 16090  001AA6  AE31               	btfss	i2scale@scl,7,c
 16091  001AA8  D0FB               	goto	i2l4473
 16092                           
 16093                           ;doprnt.c: 429: scl = -scl;
 16094  001AAA  6C31               	negf	i2scale@scl,c
 16095                           
 16096                           ;doprnt.c: 430: if(scl>=110)
 16097  001AAC  5031               	movf	i2scale@scl,w,c
 16098  001AAE  0A80               	xorlw	128
 16099  001AB0  0F12               	addlw	-238
 16100  001AB2  A0D8               	btfss	status,0,c
 16101  001AB4  D091               	goto	i2l4463
 16102                           
 16103                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 16104  001AB6  0E00               	movlw	0
 16105  001AB8  6E12               	movwf	i2___wmul@multiplicand+1,c
 16106  001ABA  0E03               	movlw	3
 16107  001ABC  6E11               	movwf	i2___wmul@multiplicand,c
 16108  001ABE  0E00               	movlw	0
 16109  001AC0  6E0A               	movwf	i2___awdiv@divisor+1,c
 16110  001AC2  0E0A               	movlw	10
 16111  001AC4  6E09               	movwf	i2___awdiv@divisor,c
 16112  001AC6  0E00               	movlw	0
 16113  001AC8  6E04               	movwf	i2___awmod@divisor+1,c
 16114  001ACA  0E64               	movlw	100
 16115  001ACC  6E03               	movwf	i2___awmod@divisor,c
 16116  001ACE  5031               	movf	i2scale@scl,w,c
 16117  001AD0  6E01               	movwf	i2___awmod@dividend,c
 16118  001AD2  6A02               	clrf	i2___awmod@dividend+1,c
 16119  001AD4  BE01               	btfsc	i2___awmod@dividend,7,c
 16120  001AD6  0602               	decf	i2___awmod@dividend+1,f,c
 16121  001AD8  EC09  F025         	call	i2___awmod	;wreg free
 16122  001ADC  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 16123  001AE0  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 16124  001AE4  EC90  F023         	call	i2___awdiv	;wreg free
 16125  001AE8  0E09               	movlw	9
 16126  001AEA  2407               	addwf	?i2___awdiv,w,c
 16127  001AEC  6E0F               	movwf	i2___wmul@multiplier,c
 16128  001AEE  0E00               	movlw	0
 16129  001AF0  2008               	addwfc	?i2___awdiv+1,w,c
 16130  001AF2  6E10               	movwf	i2___wmul@multiplier+1,c
 16131  001AF4  ECE2  F027         	call	i2___wmul	;wreg free
 16132  001AF8  0E30               	movlw	low __npowers_
 16133  001AFA  240F               	addwf	?i2___wmul,w,c
 16134  001AFC  6EF6               	movwf	tblptrl,c
 16135  001AFE  0EFC               	movlw	high __npowers_
 16136  001B00  2010               	addwfc	?i2___wmul+1,w,c
 16137  001B02  6EF7               	movwf	tblptrh,c
 16138  001B04                     	if	0	;There are less than 3 active tblptr bytes
 16139  001B04                     	endif
 16140  001B04  0009               	tblrd		*+
 16141  001B06  CFF5 F01F          	movff	tablat,i2___ftmul@f2
 16142  001B0A  0009               	tblrd		*+
 16143  001B0C  CFF5 F020          	movff	tablat,i2___ftmul@f2+1
 16144  001B10  000A               	tblrd		*-
 16145  001B12  CFF5 F021          	movff	tablat,i2___ftmul@f2+2
 16146  001B16  0E00               	movlw	0
 16147  001B18  6E0A               	movwf	i2___awdiv@divisor+1,c
 16148  001B1A  0E64               	movlw	100
 16149  001B1C  6E09               	movwf	i2___awdiv@divisor,c
 16150  001B1E  5031               	movf	i2scale@scl,w,c
 16151  001B20  6E07               	movwf	i2___awdiv@dividend,c
 16152  001B22  6A08               	clrf	i2___awdiv@dividend+1,c
 16153  001B24  BE07               	btfsc	i2___awdiv@dividend,7,c
 16154  001B26  0608               	decf	i2___awdiv@dividend+1,f,c
 16155  001B28  EC90  F023         	call	i2___awdiv	;wreg free
 16156  001B2C  0E12               	movlw	18
 16157  001B2E  2407               	addwf	?i2___awdiv,w,c
 16158  001B30  6E0F               	movwf	i2___wmul@multiplier,c
 16159  001B32  0E00               	movlw	0
 16160  001B34  2008               	addwfc	?i2___awdiv+1,w,c
 16161  001B36  6E10               	movwf	i2___wmul@multiplier+1,c
 16162  001B38  0E00               	movlw	0
 16163  001B3A  6E12               	movwf	i2___wmul@multiplicand+1,c
 16164  001B3C  0E03               	movlw	3
 16165  001B3E  6E11               	movwf	i2___wmul@multiplicand,c
 16166  001B40  ECE2  F027         	call	i2___wmul	;wreg free
 16167  001B44  0E30               	movlw	low __npowers_
 16168  001B46  240F               	addwf	?i2___wmul,w,c
 16169  001B48  6EF6               	movwf	tblptrl,c
 16170  001B4A  0EFC               	movlw	high __npowers_
 16171  001B4C  2010               	addwfc	?i2___wmul+1,w,c
 16172  001B4E  6EF7               	movwf	tblptrh,c
 16173  001B50                     	if	0	;There are less than 3 active tblptr bytes
 16174  001B50                     	endif
 16175  001B50  0009               	tblrd		*+
 16176  001B52  CFF5 F01C          	movff	tablat,i2___ftmul@f1
 16177  001B56  0009               	tblrd		*+
 16178  001B58  CFF5 F01D          	movff	tablat,i2___ftmul@f1+1
 16179  001B5C  000A               	tblrd		*-
 16180  001B5E  CFF5 F01E          	movff	tablat,i2___ftmul@f1+2
 16181  001B62  EC9D  F01D         	call	i2___ftmul	;wreg free
 16182  001B66  C01C  F02E         	movff	?i2___ftmul,i2_scale$1668
 16183  001B6A  C01D  F02F         	movff	?i2___ftmul+1,i2_scale$1668+1
 16184  001B6E  C01E  F030         	movff	?i2___ftmul+2,i2_scale$1668+2
 16185                           
 16186                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 16187  001B72  C02E  F01C         	movff	i2_scale$1668,i2___ftmul@f1
 16188  001B76  C02F  F01D         	movff	i2_scale$1668+1,i2___ftmul@f1+1
 16189  001B7A  C030  F01E         	movff	i2_scale$1668+2,i2___ftmul@f1+2
 16190  001B7E  0E00               	movlw	0
 16191  001B80  6E12               	movwf	i2___wmul@multiplicand+1,c
 16192  001B82  0E03               	movlw	3
 16193  001B84  6E11               	movwf	i2___wmul@multiplicand,c
 16194  001B86  0E00               	movlw	0
 16195  001B88  6E04               	movwf	i2___awmod@divisor+1,c
 16196  001B8A  0E0A               	movlw	10
 16197  001B8C  6E03               	movwf	i2___awmod@divisor,c
 16198  001B8E  5031               	movf	i2scale@scl,w,c
 16199  001B90  6E01               	movwf	i2___awmod@dividend,c
 16200  001B92  6A02               	clrf	i2___awmod@dividend+1,c
 16201  001B94  BE01               	btfsc	i2___awmod@dividend,7,c
 16202  001B96  0602               	decf	i2___awmod@dividend+1,f,c
 16203  001B98  EC09  F025         	call	i2___awmod	;wreg free
 16204  001B9C  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 16205  001BA0  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 16206  001BA4  ECE2  F027         	call	i2___wmul	;wreg free
 16207  001BA8  0E30               	movlw	low __npowers_
 16208  001BAA  240F               	addwf	?i2___wmul,w,c
 16209  001BAC  6EF6               	movwf	tblptrl,c
 16210  001BAE  0EFC               	movlw	high __npowers_
 16211  001BB0  2010               	addwfc	?i2___wmul+1,w,c
 16212  001BB2  6EF7               	movwf	tblptrh,c
 16213  001BB4                     	if	0	;There are less than 3 active tblptr bytes
 16214  001BB4                     	endif
 16215  001BB4  0009               	tblrd		*+
 16216  001BB6  CFF5 F01F          	movff	tablat,i2___ftmul@f2
 16217  001BBA  0009               	tblrd		*+
 16218  001BBC  CFF5 F020          	movff	tablat,i2___ftmul@f2+1
 16219  001BC0  000A               	tblrd		*-
 16220  001BC2  CFF5 F021          	movff	tablat,i2___ftmul@f2+2
 16221  001BC6  EC9D  F01D         	call	i2___ftmul	;wreg free
 16222  001BCA  C01C  F02B         	movff	?i2___ftmul,?i2_scale
 16223  001BCE  C01D  F02C         	movff	?i2___ftmul+1,?i2_scale+1
 16224  001BD2  C01E  F02D         	movff	?i2___ftmul+2,?i2_scale+2
 16225  001BD6  0012               	return	
 16226  001BD8                     i2l4463:
 16227                           
 16228                           ;doprnt.c: 432: else if(scl > 10)
 16229  001BD8  5031               	movf	i2scale@scl,w,c
 16230  001BDA  0A80               	xorlw	128
 16231  001BDC  0F75               	addlw	-139
 16232  001BDE  A0D8               	btfss	status,0,c
 16233  001BE0  D04D               	goto	i2l4469
 16234                           
 16235                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 16236  001BE2  0E00               	movlw	0
 16237  001BE4  6E0A               	movwf	i2___awdiv@divisor+1,c
 16238  001BE6  0E0A               	movlw	10
 16239  001BE8  6E09               	movwf	i2___awdiv@divisor,c
 16240  001BEA  5031               	movf	i2scale@scl,w,c
 16241  001BEC  6E07               	movwf	i2___awdiv@dividend,c
 16242  001BEE  6A08               	clrf	i2___awdiv@dividend+1,c
 16243  001BF0  BE07               	btfsc	i2___awdiv@dividend,7,c
 16244  001BF2  0608               	decf	i2___awdiv@dividend+1,f,c
 16245  001BF4  EC90  F023         	call	i2___awdiv	;wreg free
 16246  001BF8  0E09               	movlw	9
 16247  001BFA  2407               	addwf	?i2___awdiv,w,c
 16248  001BFC  6E0F               	movwf	i2___wmul@multiplier,c
 16249  001BFE  0E00               	movlw	0
 16250  001C00  2008               	addwfc	?i2___awdiv+1,w,c
 16251  001C02  6E10               	movwf	i2___wmul@multiplier+1,c
 16252  001C04  0E00               	movlw	0
 16253  001C06  6E12               	movwf	i2___wmul@multiplicand+1,c
 16254  001C08  0E03               	movlw	3
 16255  001C0A  6E11               	movwf	i2___wmul@multiplicand,c
 16256  001C0C  ECE2  F027         	call	i2___wmul	;wreg free
 16257  001C10  0E30               	movlw	low __npowers_
 16258  001C12  240F               	addwf	?i2___wmul,w,c
 16259  001C14  6EF6               	movwf	tblptrl,c
 16260  001C16  0EFC               	movlw	high __npowers_
 16261  001C18  2010               	addwfc	?i2___wmul+1,w,c
 16262  001C1A  6EF7               	movwf	tblptrh,c
 16263  001C1C                     	if	0	;There are less than 3 active tblptr bytes
 16264  001C1C                     	endif
 16265  001C1C  0009               	tblrd		*+
 16266  001C1E  CFF5 F01C          	movff	tablat,i2___ftmul@f1
 16267  001C22  0009               	tblrd		*+
 16268  001C24  CFF5 F01D          	movff	tablat,i2___ftmul@f1+1
 16269  001C28  000A               	tblrd		*-
 16270  001C2A  CFF5 F01E          	movff	tablat,i2___ftmul@f1+2
 16271  001C2E  0E00               	movlw	0
 16272  001C30  6E12               	movwf	i2___wmul@multiplicand+1,c
 16273  001C32  0E03               	movlw	3
 16274  001C34  6E11               	movwf	i2___wmul@multiplicand,c
 16275  001C36  0E00               	movlw	0
 16276  001C38  6E04               	movwf	i2___awmod@divisor+1,c
 16277  001C3A  0E0A               	movlw	10
 16278  001C3C  6E03               	movwf	i2___awmod@divisor,c
 16279  001C3E  5031               	movf	i2scale@scl,w,c
 16280  001C40  6E01               	movwf	i2___awmod@dividend,c
 16281  001C42  6A02               	clrf	i2___awmod@dividend+1,c
 16282  001C44  BE01               	btfsc	i2___awmod@dividend,7,c
 16283  001C46  0602               	decf	i2___awmod@dividend+1,f,c
 16284  001C48  EC09  F025         	call	i2___awmod	;wreg free
 16285  001C4C  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 16286  001C50  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 16287  001C54  ECE2  F027         	call	i2___wmul	;wreg free
 16288  001C58  0E30               	movlw	low __npowers_
 16289  001C5A  240F               	addwf	?i2___wmul,w,c
 16290  001C5C  6EF6               	movwf	tblptrl,c
 16291  001C5E  0EFC               	movlw	high __npowers_
 16292  001C60  2010               	addwfc	?i2___wmul+1,w,c
 16293  001C62  6EF7               	movwf	tblptrh,c
 16294  001C64                     	if	0	;There are less than 3 active tblptr bytes
 16295  001C64                     	endif
 16296  001C64  0009               	tblrd		*+
 16297  001C66  CFF5 F01F          	movff	tablat,i2___ftmul@f2
 16298  001C6A  0009               	tblrd		*+
 16299  001C6C  CFF5 F020          	movff	tablat,i2___ftmul@f2+1
 16300  001C70  000A               	tblrd		*-
 16301  001C72  CFF5 F021          	movff	tablat,i2___ftmul@f2+2
 16302  001C76  EC9D  F01D         	call	i2___ftmul	;wreg free
 16303  001C7A  D7A7               	goto	L8
 16304  001C7C                     i2l4469:
 16305                           
 16306                           ;doprnt.c: 434: return _npowers_[scl];
 16307  001C7C  5031               	movf	i2scale@scl,w,c
 16308  001C7E  0D03               	mullw	3
 16309  001C80  0E30               	movlw	low __npowers_
 16310  001C82  24F3               	addwf	prodl,w,c
 16311  001C84  6EF6               	movwf	tblptrl,c
 16312  001C86  0EFC               	movlw	high __npowers_
 16313  001C88  20F4               	addwfc	prodh,w,c
 16314  001C8A  6EF7               	movwf	tblptrh,c
 16315  001C8C                     	if	0	;There are less than 3 active tblptr bytes
 16316  001C8C                     	endif
 16317  001C8C  0009               	tblrd		*+
 16318  001C8E  CFF5 F02B          	movff	tablat,?i2_scale
 16319  001C92  0009               	tblrd		*+
 16320  001C94  CFF5 F02C          	movff	tablat,?i2_scale+1
 16321  001C98  000A               	tblrd		*-
 16322  001C9A  CFF5 F02D          	movff	tablat,?i2_scale+2
 16323  001C9E  0012               	return	
 16324  001CA0                     i2l4473:
 16325                           
 16326                           ;doprnt.c: 435: }
 16327                           ;doprnt.c: 436: if(scl>=110)
 16328  001CA0  5031               	movf	i2scale@scl,w,c
 16329  001CA2  0A80               	xorlw	128
 16330  001CA4  0F12               	addlw	-238
 16331  001CA6  A0D8               	btfss	status,0,c
 16332  001CA8  D091               	goto	i2l4481
 16333                           
 16334                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 16335  001CAA  0E00               	movlw	0
 16336  001CAC  6E12               	movwf	i2___wmul@multiplicand+1,c
 16337  001CAE  0E03               	movlw	3
 16338  001CB0  6E11               	movwf	i2___wmul@multiplicand,c
 16339  001CB2  0E00               	movlw	0
 16340  001CB4  6E0A               	movwf	i2___awdiv@divisor+1,c
 16341  001CB6  0E0A               	movlw	10
 16342  001CB8  6E09               	movwf	i2___awdiv@divisor,c
 16343  001CBA  0E00               	movlw	0
 16344  001CBC  6E04               	movwf	i2___awmod@divisor+1,c
 16345  001CBE  0E64               	movlw	100
 16346  001CC0  6E03               	movwf	i2___awmod@divisor,c
 16347  001CC2  5031               	movf	i2scale@scl,w,c
 16348  001CC4  6E01               	movwf	i2___awmod@dividend,c
 16349  001CC6  6A02               	clrf	i2___awmod@dividend+1,c
 16350  001CC8  BE01               	btfsc	i2___awmod@dividend,7,c
 16351  001CCA  0602               	decf	i2___awmod@dividend+1,f,c
 16352  001CCC  EC09  F025         	call	i2___awmod	;wreg free
 16353  001CD0  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 16354  001CD4  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 16355  001CD8  EC90  F023         	call	i2___awdiv	;wreg free
 16356  001CDC  0E09               	movlw	9
 16357  001CDE  2407               	addwf	?i2___awdiv,w,c
 16358  001CE0  6E0F               	movwf	i2___wmul@multiplier,c
 16359  001CE2  0E00               	movlw	0
 16360  001CE4  2008               	addwfc	?i2___awdiv+1,w,c
 16361  001CE6  6E10               	movwf	i2___wmul@multiplier+1,c
 16362  001CE8  ECE2  F027         	call	i2___wmul	;wreg free
 16363  001CEC  0E09               	movlw	low __powers_
 16364  001CEE  240F               	addwf	?i2___wmul,w,c
 16365  001CF0  6EF6               	movwf	tblptrl,c
 16366  001CF2  0EFC               	movlw	high __powers_
 16367  001CF4  2010               	addwfc	?i2___wmul+1,w,c
 16368  001CF6  6EF7               	movwf	tblptrh,c
 16369  001CF8                     	if	0	;There are less than 3 active tblptr bytes
 16370  001CF8                     	endif
 16371  001CF8  0009               	tblrd		*+
 16372  001CFA  CFF5 F01F          	movff	tablat,i2___ftmul@f2
 16373  001CFE  0009               	tblrd		*+
 16374  001D00  CFF5 F020          	movff	tablat,i2___ftmul@f2+1
 16375  001D04  000A               	tblrd		*-
 16376  001D06  CFF5 F021          	movff	tablat,i2___ftmul@f2+2
 16377  001D0A  0E00               	movlw	0
 16378  001D0C  6E0A               	movwf	i2___awdiv@divisor+1,c
 16379  001D0E  0E64               	movlw	100
 16380  001D10  6E09               	movwf	i2___awdiv@divisor,c
 16381  001D12  5031               	movf	i2scale@scl,w,c
 16382  001D14  6E07               	movwf	i2___awdiv@dividend,c
 16383  001D16  6A08               	clrf	i2___awdiv@dividend+1,c
 16384  001D18  BE07               	btfsc	i2___awdiv@dividend,7,c
 16385  001D1A  0608               	decf	i2___awdiv@dividend+1,f,c
 16386  001D1C  EC90  F023         	call	i2___awdiv	;wreg free
 16387  001D20  0E12               	movlw	18
 16388  001D22  2407               	addwf	?i2___awdiv,w,c
 16389  001D24  6E0F               	movwf	i2___wmul@multiplier,c
 16390  001D26  0E00               	movlw	0
 16391  001D28  2008               	addwfc	?i2___awdiv+1,w,c
 16392  001D2A  6E10               	movwf	i2___wmul@multiplier+1,c
 16393  001D2C  0E00               	movlw	0
 16394  001D2E  6E12               	movwf	i2___wmul@multiplicand+1,c
 16395  001D30  0E03               	movlw	3
 16396  001D32  6E11               	movwf	i2___wmul@multiplicand,c
 16397  001D34  ECE2  F027         	call	i2___wmul	;wreg free
 16398  001D38  0E09               	movlw	low __powers_
 16399  001D3A  240F               	addwf	?i2___wmul,w,c
 16400  001D3C  6EF6               	movwf	tblptrl,c
 16401  001D3E  0EFC               	movlw	high __powers_
 16402  001D40  2010               	addwfc	?i2___wmul+1,w,c
 16403  001D42  6EF7               	movwf	tblptrh,c
 16404  001D44                     	if	0	;There are less than 3 active tblptr bytes
 16405  001D44                     	endif
 16406  001D44  0009               	tblrd		*+
 16407  001D46  CFF5 F01C          	movff	tablat,i2___ftmul@f1
 16408  001D4A  0009               	tblrd		*+
 16409  001D4C  CFF5 F01D          	movff	tablat,i2___ftmul@f1+1
 16410  001D50  000A               	tblrd		*-
 16411  001D52  CFF5 F01E          	movff	tablat,i2___ftmul@f1+2
 16412  001D56  EC9D  F01D         	call	i2___ftmul	;wreg free
 16413  001D5A  C01C  F02E         	movff	?i2___ftmul,i2_scale$1668
 16414  001D5E  C01D  F02F         	movff	?i2___ftmul+1,i2_scale$1668+1
 16415  001D62  C01E  F030         	movff	?i2___ftmul+2,i2_scale$1668+2
 16416                           
 16417                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 16418  001D66  C02E  F01C         	movff	i2_scale$1668,i2___ftmul@f1
 16419  001D6A  C02F  F01D         	movff	i2_scale$1668+1,i2___ftmul@f1+1
 16420  001D6E  C030  F01E         	movff	i2_scale$1668+2,i2___ftmul@f1+2
 16421  001D72  0E00               	movlw	0
 16422  001D74  6E12               	movwf	i2___wmul@multiplicand+1,c
 16423  001D76  0E03               	movlw	3
 16424  001D78  6E11               	movwf	i2___wmul@multiplicand,c
 16425  001D7A  0E00               	movlw	0
 16426  001D7C  6E04               	movwf	i2___awmod@divisor+1,c
 16427  001D7E  0E0A               	movlw	10
 16428  001D80  6E03               	movwf	i2___awmod@divisor,c
 16429  001D82  5031               	movf	i2scale@scl,w,c
 16430  001D84  6E01               	movwf	i2___awmod@dividend,c
 16431  001D86  6A02               	clrf	i2___awmod@dividend+1,c
 16432  001D88  BE01               	btfsc	i2___awmod@dividend,7,c
 16433  001D8A  0602               	decf	i2___awmod@dividend+1,f,c
 16434  001D8C  EC09  F025         	call	i2___awmod	;wreg free
 16435  001D90  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 16436  001D94  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 16437  001D98  ECE2  F027         	call	i2___wmul	;wreg free
 16438  001D9C  0E09               	movlw	low __powers_
 16439  001D9E  240F               	addwf	?i2___wmul,w,c
 16440  001DA0  6EF6               	movwf	tblptrl,c
 16441  001DA2  0EFC               	movlw	high __powers_
 16442  001DA4  2010               	addwfc	?i2___wmul+1,w,c
 16443  001DA6  6EF7               	movwf	tblptrh,c
 16444  001DA8                     	if	0	;There are less than 3 active tblptr bytes
 16445  001DA8                     	endif
 16446  001DA8  0009               	tblrd		*+
 16447  001DAA  CFF5 F01F          	movff	tablat,i2___ftmul@f2
 16448  001DAE  0009               	tblrd		*+
 16449  001DB0  CFF5 F020          	movff	tablat,i2___ftmul@f2+1
 16450  001DB4  000A               	tblrd		*-
 16451  001DB6  CFF5 F021          	movff	tablat,i2___ftmul@f2+2
 16452  001DBA  EC9D  F01D         	call	i2___ftmul	;wreg free
 16453  001DBE  C01C  F02B         	movff	?i2___ftmul,?i2_scale
 16454  001DC2  C01D  F02C         	movff	?i2___ftmul+1,?i2_scale+1
 16455  001DC6  C01E  F02D         	movff	?i2___ftmul+2,?i2_scale+2
 16456  001DCA  0012               	return	
 16457  001DCC                     i2l4481:
 16458                           
 16459                           ;doprnt.c: 438: else if(scl > 10)
 16460  001DCC  5031               	movf	i2scale@scl,w,c
 16461  001DCE  0A80               	xorlw	128
 16462  001DD0  0F75               	addlw	-139
 16463  001DD2  A0D8               	btfss	status,0,c
 16464  001DD4  D04D               	goto	i2l4487
 16465                           
 16466                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 16467  001DD6  0E00               	movlw	0
 16468  001DD8  6E0A               	movwf	i2___awdiv@divisor+1,c
 16469  001DDA  0E0A               	movlw	10
 16470  001DDC  6E09               	movwf	i2___awdiv@divisor,c
 16471  001DDE  5031               	movf	i2scale@scl,w,c
 16472  001DE0  6E07               	movwf	i2___awdiv@dividend,c
 16473  001DE2  6A08               	clrf	i2___awdiv@dividend+1,c
 16474  001DE4  BE07               	btfsc	i2___awdiv@dividend,7,c
 16475  001DE6  0608               	decf	i2___awdiv@dividend+1,f,c
 16476  001DE8  EC90  F023         	call	i2___awdiv	;wreg free
 16477  001DEC  0E09               	movlw	9
 16478  001DEE  2407               	addwf	?i2___awdiv,w,c
 16479  001DF0  6E0F               	movwf	i2___wmul@multiplier,c
 16480  001DF2  0E00               	movlw	0
 16481  001DF4  2008               	addwfc	?i2___awdiv+1,w,c
 16482  001DF6  6E10               	movwf	i2___wmul@multiplier+1,c
 16483  001DF8  0E00               	movlw	0
 16484  001DFA  6E12               	movwf	i2___wmul@multiplicand+1,c
 16485  001DFC  0E03               	movlw	3
 16486  001DFE  6E11               	movwf	i2___wmul@multiplicand,c
 16487  001E00  ECE2  F027         	call	i2___wmul	;wreg free
 16488  001E04  0E09               	movlw	low __powers_
 16489  001E06  240F               	addwf	?i2___wmul,w,c
 16490  001E08  6EF6               	movwf	tblptrl,c
 16491  001E0A  0EFC               	movlw	high __powers_
 16492  001E0C  2010               	addwfc	?i2___wmul+1,w,c
 16493  001E0E  6EF7               	movwf	tblptrh,c
 16494  001E10                     	if	0	;There are less than 3 active tblptr bytes
 16495  001E10                     	endif
 16496  001E10  0009               	tblrd		*+
 16497  001E12  CFF5 F01C          	movff	tablat,i2___ftmul@f1
 16498  001E16  0009               	tblrd		*+
 16499  001E18  CFF5 F01D          	movff	tablat,i2___ftmul@f1+1
 16500  001E1C  000A               	tblrd		*-
 16501  001E1E  CFF5 F01E          	movff	tablat,i2___ftmul@f1+2
 16502  001E22  0E00               	movlw	0
 16503  001E24  6E12               	movwf	i2___wmul@multiplicand+1,c
 16504  001E26  0E03               	movlw	3
 16505  001E28  6E11               	movwf	i2___wmul@multiplicand,c
 16506  001E2A  0E00               	movlw	0
 16507  001E2C  6E04               	movwf	i2___awmod@divisor+1,c
 16508  001E2E  0E0A               	movlw	10
 16509  001E30  6E03               	movwf	i2___awmod@divisor,c
 16510  001E32  5031               	movf	i2scale@scl,w,c
 16511  001E34  6E01               	movwf	i2___awmod@dividend,c
 16512  001E36  6A02               	clrf	i2___awmod@dividend+1,c
 16513  001E38  BE01               	btfsc	i2___awmod@dividend,7,c
 16514  001E3A  0602               	decf	i2___awmod@dividend+1,f,c
 16515  001E3C  EC09  F025         	call	i2___awmod	;wreg free
 16516  001E40  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 16517  001E44  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 16518  001E48  ECE2  F027         	call	i2___wmul	;wreg free
 16519  001E4C  0E09               	movlw	low __powers_
 16520  001E4E  240F               	addwf	?i2___wmul,w,c
 16521  001E50  6EF6               	movwf	tblptrl,c
 16522  001E52  0EFC               	movlw	high __powers_
 16523  001E54  2010               	addwfc	?i2___wmul+1,w,c
 16524  001E56  6EF7               	movwf	tblptrh,c
 16525  001E58                     	if	0	;There are less than 3 active tblptr bytes
 16526  001E58                     	endif
 16527  001E58  0009               	tblrd		*+
 16528  001E5A  CFF5 F01F          	movff	tablat,i2___ftmul@f2
 16529  001E5E  0009               	tblrd		*+
 16530  001E60  CFF5 F020          	movff	tablat,i2___ftmul@f2+1
 16531  001E64  000A               	tblrd		*-
 16532  001E66  CFF5 F021          	movff	tablat,i2___ftmul@f2+2
 16533  001E6A  EC9D  F01D         	call	i2___ftmul	;wreg free
 16534  001E6E  D7A7               	goto	L9
 16535  001E70                     i2l4487:
 16536                           
 16537                           ;doprnt.c: 440: return _powers_[scl];
 16538  001E70  5031               	movf	i2scale@scl,w,c
 16539  001E72  0D03               	mullw	3
 16540  001E74  0E09               	movlw	low __powers_
 16541  001E76  24F3               	addwf	prodl,w,c
 16542  001E78  6EF6               	movwf	tblptrl,c
 16543  001E7A  0EFC               	movlw	high __powers_
 16544  001E7C  20F4               	addwfc	prodh,w,c
 16545  001E7E  6EF7               	movwf	tblptrh,c
 16546  001E80                     	if	0	;There are less than 3 active tblptr bytes
 16547  001E80                     	endif
 16548  001E80  0009               	tblrd		*+
 16549  001E82  CFF5 F02B          	movff	tablat,?i2_scale
 16550  001E86  0009               	tblrd		*+
 16551  001E88  CFF5 F02C          	movff	tablat,?i2_scale+1
 16552  001E8C  000A               	tblrd		*-
 16553  001E8E  CFF5 F02D          	movff	tablat,?i2_scale+2
 16554  001E92  0012               	return	
 16555  001E94                     __end_ofi2_scale:
 16556                           	opt stack 0
 16557                           pclatu	equ	0xFFB
 16558                           pclath	equ	0xFFA
 16559                           tblptru	equ	0xFF8
 16560                           tblptrh	equ	0xFF7
 16561                           tblptrl	equ	0xFF6
 16562                           tablat	equ	0xFF5
 16563                           prodh	equ	0xFF4
 16564                           prodl	equ	0xFF3
 16565                           intcon	equ	0xFF2
 16566                           intcon3	equ	0xFF0
 16567                           postinc0	equ	0xFEE
 16568                           fsr0h	equ	0xFEA
 16569                           fsr0l	equ	0xFE9
 16570                           wreg	equ	0xFE8
 16571                           plusw1	equ	0xFE3
 16572                           fsr1h	equ	0xFE2
 16573                           fsr1l	equ	0xFE1
 16574                           indf2	equ	0xFDF
 16575                           postinc2	equ	0xFDE
 16576                           postdec2	equ	0xFDD
 16577                           plusw2	equ	0xFDB
 16578                           fsr2h	equ	0xFDA
 16579                           fsr2l	equ	0xFD9
 16580                           status	equ	0xFD8
 16581                           
 16582 ;; *************** function i2_putch *****************
 16583 ;; Defined at:
 16584 ;;		line 25 in file "lcd.c"
 16585 ;; Parameters:    Size  Location     Type
 16586 ;;  data            1    wreg     unsigned char 
 16587 ;; Auto vars:     Size  Location     Type
 16588 ;;  data            1    2[COMRAM] unsigned char 
 16589 ;; Return value:  Size  Location     Type
 16590 ;;                  1    wreg      void 
 16591 ;; Registers used:
 16592 ;;		wreg, status,2, status,0, cstack
 16593 ;; Tracked objects:
 16594 ;;		On entry : 0/0
 16595 ;;		On exit  : 0/0
 16596 ;;		Unchanged: 0/0
 16597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16599 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16601 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16602 ;;Total ram usage:        1 bytes
 16603 ;; Hardware stack levels used:    1
 16604 ;; Hardware stack levels required when called:    1
 16605 ;; This function calls:
 16606 ;;		i2_lcdNibble
 16607 ;; This function is called by:
 16608 ;;		i2_printf
 16609 ;; This function uses a non-reentrant model
 16610 ;;
 16611                           
 16612                           	psect	text63
 16613  005116                     __ptext63:
 16614                           	opt stack 0
 16615  005116                     i2_putch:
 16616                           	opt stack 21
 16617                           
 16618                           ;incstack = 0
 16619                           ;i2putch@data stored from wreg
 16620  005116  6E03               	movwf	i2putch@data,c
 16621                           
 16622                           ;lcd.c: 26: LATDbits.LATD2 = 1;
 16623  005118  848C               	bsf	3980,2,c	;volatile
 16624                           
 16625                           ;lcd.c: 27: lcdNibble(data);
 16626  00511A  5003               	movf	i2putch@data,w,c
 16627  00511C  EC06  F026         	call	i2_lcdNibble
 16628  005120  0012               	return		;funcret
 16629  005122                     __end_ofi2_putch:
 16630                           	opt stack 0
 16631                           pclatu	equ	0xFFB
 16632                           pclath	equ	0xFFA
 16633                           tblptru	equ	0xFF8
 16634                           tblptrh	equ	0xFF7
 16635                           tblptrl	equ	0xFF6
 16636                           tablat	equ	0xFF5
 16637                           prodh	equ	0xFF4
 16638                           prodl	equ	0xFF3
 16639                           intcon	equ	0xFF2
 16640                           intcon3	equ	0xFF0
 16641                           postinc0	equ	0xFEE
 16642                           fsr0h	equ	0xFEA
 16643                           fsr0l	equ	0xFE9
 16644                           wreg	equ	0xFE8
 16645                           plusw1	equ	0xFE3
 16646                           fsr1h	equ	0xFE2
 16647                           fsr1l	equ	0xFE1
 16648                           indf2	equ	0xFDF
 16649                           postinc2	equ	0xFDE
 16650                           postdec2	equ	0xFDD
 16651                           plusw2	equ	0xFDB
 16652                           fsr2h	equ	0xFDA
 16653                           fsr2l	equ	0xFD9
 16654                           status	equ	0xFD8
 16655                           
 16656 ;; *************** function i2_isdigit *****************
 16657 ;; Defined at:
 16658 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/isdigit.c"
 16659 ;; Parameters:    Size  Location     Type
 16660 ;;  c               1    wreg     unsigned char 
 16661 ;; Auto vars:     Size  Location     Type
 16662 ;;  c               1    2[COMRAM] unsigned char 
 16663 ;; Return value:  Size  Location     Type
 16664 ;;		None               void
 16665 ;; Registers used:
 16666 ;;		wreg, status,2, status,0
 16667 ;; Tracked objects:
 16668 ;;		On entry : 0/0
 16669 ;;		On exit  : 0/0
 16670 ;;		Unchanged: 0/0
 16671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16673 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16674 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16675 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16676 ;;Total ram usage:        3 bytes
 16677 ;; Hardware stack levels used:    1
 16678 ;; This function calls:
 16679 ;;		Nothing
 16680 ;; This function is called by:
 16681 ;;		i2_printf
 16682 ;; This function uses a non-reentrant model
 16683 ;;
 16684                           
 16685                           	psect	text64
 16686  005030                     __ptext64:
 16687                           	opt stack 0
 16688  005030                     i2_isdigit:
 16689                           	opt stack 22
 16690                           
 16691                           ;incstack = 0
 16692                           ;i2isdigit@c stored from wreg
 16693  005030  6E03               	movwf	i2isdigit@c,c
 16694  005032  0E00               	movlw	0
 16695  005034  6E02               	movwf	i2_isdigit$1089,c
 16696  005036  0E3A               	movlw	58
 16697  005038  6003               	cpfslt	i2isdigit@c,c
 16698  00503A  D005               	goto	i2l4691
 16699  00503C  0E2F               	movlw	47
 16700  00503E  6403               	cpfsgt	i2isdigit@c,c
 16701  005040  D002               	goto	i2l4691
 16702  005042  0E01               	movlw	1
 16703  005044  6E02               	movwf	i2_isdigit$1089,c
 16704  005046                     i2l4691:
 16705  005046  C002  F001         	movff	i2_isdigit$1089,??i2_isdigit
 16706  00504A  3001               	rrcf	??i2_isdigit,w,c
 16707  00504C  0012               	return	
 16708  00504E                     __end_ofi2_isdigit:
 16709                           	opt stack 0
 16710                           pclatu	equ	0xFFB
 16711                           pclath	equ	0xFFA
 16712                           tblptru	equ	0xFF8
 16713                           tblptrh	equ	0xFF7
 16714                           tblptrl	equ	0xFF6
 16715                           tablat	equ	0xFF5
 16716                           prodh	equ	0xFF4
 16717                           prodl	equ	0xFF3
 16718                           intcon	equ	0xFF2
 16719                           intcon3	equ	0xFF0
 16720                           postinc0	equ	0xFEE
 16721                           fsr0h	equ	0xFEA
 16722                           fsr0l	equ	0xFE9
 16723                           wreg	equ	0xFE8
 16724                           plusw1	equ	0xFE3
 16725                           fsr1h	equ	0xFE2
 16726                           fsr1l	equ	0xFE1
 16727                           indf2	equ	0xFDF
 16728                           postinc2	equ	0xFDE
 16729                           postdec2	equ	0xFDD
 16730                           plusw2	equ	0xFDB
 16731                           fsr2h	equ	0xFDA
 16732                           fsr2l	equ	0xFD9
 16733                           status	equ	0xFD8
 16734                           
 16735 ;; *************** function i2_fround *****************
 16736 ;; Defined at:
 16737 ;;		line 409 in file "/opt/microchip/xc8/v1.41/sources/common/doprnt.c"
 16738 ;; Parameters:    Size  Location     Type
 16739 ;;  prec            1    wreg     unsigned char 
 16740 ;; Auto vars:     Size  Location     Type
 16741 ;;  prec            1   51[COMRAM] unsigned char 
 16742 ;; Return value:  Size  Location     Type
 16743 ;;                  3   42[COMRAM] unsigned char 
 16744 ;; Registers used:
 16745 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16746 ;; Tracked objects:
 16747 ;;		On entry : 0/0
 16748 ;;		On exit  : 0/0
 16749 ;;		Unchanged: 0/0
 16750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16751 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16752 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16754 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16755 ;;Total ram usage:       10 bytes
 16756 ;; Hardware stack levels used:    1
 16757 ;; Hardware stack levels required when called:    2
 16758 ;; This function calls:
 16759 ;;		i2___awdiv
 16760 ;;		i2___awmod
 16761 ;;		i2___ftmul
 16762 ;;		i2___wmul
 16763 ;; This function is called by:
 16764 ;;		i2_printf
 16765 ;; This function uses a non-reentrant model
 16766 ;;
 16767                           
 16768                           	psect	text65
 16769  002780                     __ptext65:
 16770                           	opt stack 0
 16771  002780                     i2_fround:
 16772                           	opt stack 20
 16773                           
 16774                           ;incstack = 0
 16775                           ;i2fround@prec stored from wreg
 16776  002780  6E34               	movwf	i2fround@prec,c
 16777                           
 16778                           ;doprnt.c: 413: if(prec>=110)
 16779  002782  0E6D               	movlw	109
 16780  002784  6434               	cpfsgt	i2fround@prec,c
 16781  002786  D09F               	goto	i2l4441
 16782                           
 16783                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 16784  002788  0E00               	movlw	0
 16785  00278A  6E12               	movwf	i2___wmul@multiplicand+1,c
 16786  00278C  0E03               	movlw	3
 16787  00278E  6E11               	movwf	i2___wmul@multiplicand,c
 16788  002790  0E00               	movlw	0
 16789  002792  6E0A               	movwf	i2___awdiv@divisor+1,c
 16790  002794  0E0A               	movlw	10
 16791  002796  6E09               	movwf	i2___awdiv@divisor,c
 16792  002798  0E00               	movlw	0
 16793  00279A  6E04               	movwf	i2___awmod@divisor+1,c
 16794  00279C  0E64               	movlw	100
 16795  00279E  6E03               	movwf	i2___awmod@divisor,c
 16796  0027A0  C034  F001         	movff	i2fround@prec,i2___awmod@dividend
 16797  0027A4  6A02               	clrf	i2___awmod@dividend+1,c
 16798  0027A6  EC09  F025         	call	i2___awmod	;wreg free
 16799  0027AA  C001  F007         	movff	?i2___awmod,i2___awdiv@dividend
 16800  0027AE  C002  F008         	movff	?i2___awmod+1,i2___awdiv@dividend+1
 16801  0027B2  EC90  F023         	call	i2___awdiv	;wreg free
 16802  0027B6  0E09               	movlw	9
 16803  0027B8  2407               	addwf	?i2___awdiv,w,c
 16804  0027BA  6E0F               	movwf	i2___wmul@multiplier,c
 16805  0027BC  0E00               	movlw	0
 16806  0027BE  2008               	addwfc	?i2___awdiv+1,w,c
 16807  0027C0  6E10               	movwf	i2___wmul@multiplier+1,c
 16808  0027C2  ECE2  F027         	call	i2___wmul	;wreg free
 16809  0027C6  0E30               	movlw	low __npowers_
 16810  0027C8  240F               	addwf	?i2___wmul,w,c
 16811  0027CA  6EF6               	movwf	tblptrl,c
 16812  0027CC  0EFC               	movlw	high __npowers_
 16813  0027CE  2010               	addwfc	?i2___wmul+1,w,c
 16814  0027D0  6EF7               	movwf	tblptrh,c
 16815  0027D2                     	if	0	;There are less than 3 active tblptr bytes
 16816  0027D2                     	endif
 16817  0027D2  0009               	tblrd		*+
 16818  0027D4  CFF5 F01F          	movff	tablat,i2___ftmul@f2
 16819  0027D8  0009               	tblrd		*+
 16820  0027DA  CFF5 F020          	movff	tablat,i2___ftmul@f2+1
 16821  0027DE  000A               	tblrd		*-
 16822  0027E0  CFF5 F021          	movff	tablat,i2___ftmul@f2+2
 16823  0027E4  0E00               	movlw	0
 16824  0027E6  6E0A               	movwf	i2___awdiv@divisor+1,c
 16825  0027E8  0E64               	movlw	100
 16826  0027EA  6E09               	movwf	i2___awdiv@divisor,c
 16827  0027EC  C034  F007         	movff	i2fround@prec,i2___awdiv@dividend
 16828  0027F0  6A08               	clrf	i2___awdiv@dividend+1,c
 16829  0027F2  EC90  F023         	call	i2___awdiv	;wreg free
 16830  0027F6  0E12               	movlw	18
 16831  0027F8  2407               	addwf	?i2___awdiv,w,c
 16832  0027FA  6E0F               	movwf	i2___wmul@multiplier,c
 16833  0027FC  0E00               	movlw	0
 16834  0027FE  2008               	addwfc	?i2___awdiv+1,w,c
 16835  002800  6E10               	movwf	i2___wmul@multiplier+1,c
 16836  002802  0E00               	movlw	0
 16837  002804  6E12               	movwf	i2___wmul@multiplicand+1,c
 16838  002806  0E03               	movlw	3
 16839  002808  6E11               	movwf	i2___wmul@multiplicand,c
 16840  00280A  ECE2  F027         	call	i2___wmul	;wreg free
 16841  00280E  0E30               	movlw	low __npowers_
 16842  002810  240F               	addwf	?i2___wmul,w,c
 16843  002812  6EF6               	movwf	tblptrl,c
 16844  002814  0EFC               	movlw	high __npowers_
 16845  002816  2010               	addwfc	?i2___wmul+1,w,c
 16846  002818  6EF7               	movwf	tblptrh,c
 16847  00281A                     	if	0	;There are less than 3 active tblptr bytes
 16848  00281A                     	endif
 16849  00281A  0009               	tblrd		*+
 16850  00281C  CFF5 F01C          	movff	tablat,i2___ftmul@f1
 16851  002820  0009               	tblrd		*+
 16852  002822  CFF5 F01D          	movff	tablat,i2___ftmul@f1+1
 16853  002826  000A               	tblrd		*-
 16854  002828  CFF5 F01E          	movff	tablat,i2___ftmul@f1+2
 16855  00282C  EC9D  F01D         	call	i2___ftmul	;wreg free
 16856  002830  C01C  F031         	movff	?i2___ftmul,i2_fround$1666
 16857  002834  C01D  F032         	movff	?i2___ftmul+1,i2_fround$1666+1
 16858  002838  C01E  F033         	movff	?i2___ftmul+2,i2_fround$1666+2
 16859                           
 16860                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 16861  00283C  0E00               	movlw	0
 16862  00283E  6E12               	movwf	i2___wmul@multiplicand+1,c
 16863  002840  0E03               	movlw	3
 16864  002842  6E11               	movwf	i2___wmul@multiplicand,c
 16865  002844  0E00               	movlw	0
 16866  002846  6E04               	movwf	i2___awmod@divisor+1,c
 16867  002848  0E0A               	movlw	10
 16868  00284A  6E03               	movwf	i2___awmod@divisor,c
 16869  00284C  C034  F001         	movff	i2fround@prec,i2___awmod@dividend
 16870  002850  6A02               	clrf	i2___awmod@dividend+1,c
 16871  002852  EC09  F025         	call	i2___awmod	;wreg free
 16872  002856  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 16873  00285A  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 16874  00285E  ECE2  F027         	call	i2___wmul	;wreg free
 16875  002862  0E30               	movlw	low __npowers_
 16876  002864  240F               	addwf	?i2___wmul,w,c
 16877  002866  6EF6               	movwf	tblptrl,c
 16878  002868  0EFC               	movlw	high __npowers_
 16879  00286A  2010               	addwfc	?i2___wmul+1,w,c
 16880  00286C  6EF7               	movwf	tblptrh,c
 16881  00286E                     	if	0	;There are less than 3 active tblptr bytes
 16882  00286E                     	endif
 16883  00286E  0009               	tblrd		*+
 16884  002870  CFF5 F01F          	movff	tablat,i2___ftmul@f2
 16885  002874  0009               	tblrd		*+
 16886  002876  CFF5 F020          	movff	tablat,i2___ftmul@f2+1
 16887  00287A  000A               	tblrd		*-
 16888  00287C  CFF5 F021          	movff	tablat,i2___ftmul@f2+2
 16889  002880  C031  F01C         	movff	i2_fround$1666,i2___ftmul@f1
 16890  002884  C032  F01D         	movff	i2_fround$1666+1,i2___ftmul@f1+1
 16891  002888  C033  F01E         	movff	i2_fround$1666+2,i2___ftmul@f1+2
 16892  00288C  EC9D  F01D         	call	i2___ftmul	;wreg free
 16893  002890  C01C  F02E         	movff	?i2___ftmul,i2_fround$1667
 16894  002894  C01D  F02F         	movff	?i2___ftmul+1,i2_fround$1667+1
 16895  002898  C01E  F030         	movff	?i2___ftmul+2,i2_fround$1667+2
 16896                           
 16897                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 16898  00289C  C02E  F01C         	movff	i2_fround$1667,i2___ftmul@f1
 16899  0028A0  C02F  F01D         	movff	i2_fround$1667+1,i2___ftmul@f1+1
 16900  0028A4  C030  F01E         	movff	i2_fround$1667+2,i2___ftmul@f1+2
 16901  0028A8  0E00               	movlw	0
 16902  0028AA  6E1F               	movwf	i2___ftmul@f2,c
 16903  0028AC  0E00               	movlw	0
 16904  0028AE  6E20               	movwf	i2___ftmul@f2+1,c
 16905  0028B0  0E3F               	movlw	63
 16906  0028B2  6E21               	movwf	i2___ftmul@f2+2,c
 16907  0028B4  EC9D  F01D         	call	i2___ftmul	;wreg free
 16908  0028B8  C01C  F02B         	movff	?i2___ftmul,?i2_fround
 16909  0028BC  C01D  F02C         	movff	?i2___ftmul+1,?i2_fround+1
 16910  0028C0  C01E  F02D         	movff	?i2___ftmul+2,?i2_fround+2
 16911  0028C4  0012               	return	
 16912  0028C6                     i2l4441:
 16913                           
 16914                           ;doprnt.c: 415: else if(prec > 10)
 16915  0028C6  0E0A               	movlw	10
 16916  0028C8  6434               	cpfsgt	i2fround@prec,c
 16917  0028CA  D05D               	goto	i2l4449
 16918                           
 16919                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 16920  0028CC  0E00               	movlw	0
 16921  0028CE  6E12               	movwf	i2___wmul@multiplicand+1,c
 16922  0028D0  0E03               	movlw	3
 16923  0028D2  6E11               	movwf	i2___wmul@multiplicand,c
 16924  0028D4  0E00               	movlw	0
 16925  0028D6  6E04               	movwf	i2___awmod@divisor+1,c
 16926  0028D8  0E0A               	movlw	10
 16927  0028DA  6E03               	movwf	i2___awmod@divisor,c
 16928  0028DC  C034  F001         	movff	i2fround@prec,i2___awmod@dividend
 16929  0028E0  6A02               	clrf	i2___awmod@dividend+1,c
 16930  0028E2  EC09  F025         	call	i2___awmod	;wreg free
 16931  0028E6  C001  F00F         	movff	?i2___awmod,i2___wmul@multiplier
 16932  0028EA  C002  F010         	movff	?i2___awmod+1,i2___wmul@multiplier+1
 16933  0028EE  ECE2  F027         	call	i2___wmul	;wreg free
 16934  0028F2  0E30               	movlw	low __npowers_
 16935  0028F4  240F               	addwf	?i2___wmul,w,c
 16936  0028F6  6EF6               	movwf	tblptrl,c
 16937  0028F8  0EFC               	movlw	high __npowers_
 16938  0028FA  2010               	addwfc	?i2___wmul+1,w,c
 16939  0028FC  6EF7               	movwf	tblptrh,c
 16940  0028FE                     	if	0	;There are less than 3 active tblptr bytes
 16941  0028FE                     	endif
 16942  0028FE  0009               	tblrd		*+
 16943  002900  CFF5 F01F          	movff	tablat,i2___ftmul@f2
 16944  002904  0009               	tblrd		*+
 16945  002906  CFF5 F020          	movff	tablat,i2___ftmul@f2+1
 16946  00290A  000A               	tblrd		*-
 16947  00290C  CFF5 F021          	movff	tablat,i2___ftmul@f2+2
 16948  002910  0E00               	movlw	0
 16949  002912  6E0A               	movwf	i2___awdiv@divisor+1,c
 16950  002914  0E0A               	movlw	10
 16951  002916  6E09               	movwf	i2___awdiv@divisor,c
 16952  002918  C034  F007         	movff	i2fround@prec,i2___awdiv@dividend
 16953  00291C  6A08               	clrf	i2___awdiv@dividend+1,c
 16954  00291E  EC90  F023         	call	i2___awdiv	;wreg free
 16955  002922  0E09               	movlw	9
 16956  002924  2407               	addwf	?i2___awdiv,w,c
 16957  002926  6E0F               	movwf	i2___wmul@multiplier,c
 16958  002928  0E00               	movlw	0
 16959  00292A  2008               	addwfc	?i2___awdiv+1,w,c
 16960  00292C  6E10               	movwf	i2___wmul@multiplier+1,c
 16961  00292E  0E00               	movlw	0
 16962  002930  6E12               	movwf	i2___wmul@multiplicand+1,c
 16963  002932  0E03               	movlw	3
 16964  002934  6E11               	movwf	i2___wmul@multiplicand,c
 16965  002936  ECE2  F027         	call	i2___wmul	;wreg free
 16966  00293A  0E30               	movlw	low __npowers_
 16967  00293C  240F               	addwf	?i2___wmul,w,c
 16968  00293E  6EF6               	movwf	tblptrl,c
 16969  002940  0EFC               	movlw	high __npowers_
 16970  002942  2010               	addwfc	?i2___wmul+1,w,c
 16971  002944  6EF7               	movwf	tblptrh,c
 16972  002946                     	if	0	;There are less than 3 active tblptr bytes
 16973  002946                     	endif
 16974  002946  0009               	tblrd		*+
 16975  002948  CFF5 F01C          	movff	tablat,i2___ftmul@f1
 16976  00294C  0009               	tblrd		*+
 16977  00294E  CFF5 F01D          	movff	tablat,i2___ftmul@f1+1
 16978  002952  000A               	tblrd		*-
 16979  002954  CFF5 F01E          	movff	tablat,i2___ftmul@f1+2
 16980  002958  EC9D  F01D         	call	i2___ftmul	;wreg free
 16981  00295C  C01C  F031         	movff	?i2___ftmul,i2_fround$1666
 16982  002960  C01D  F032         	movff	?i2___ftmul+1,i2_fround$1666+1
 16983  002964  C01E  F033         	movff	?i2___ftmul+2,i2_fround$1666+2
 16984                           
 16985                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 16986  002968  C031  F01C         	movff	i2_fround$1666,i2___ftmul@f1
 16987  00296C  C032  F01D         	movff	i2_fround$1666+1,i2___ftmul@f1+1
 16988  002970  C033  F01E         	movff	i2_fround$1666+2,i2___ftmul@f1+2
 16989  002974  0E00               	movlw	0
 16990  002976  6E1F               	movwf	i2___ftmul@f2,c
 16991  002978  0E00               	movlw	0
 16992  00297A  6E20               	movwf	i2___ftmul@f2+1,c
 16993  00297C  0E3F               	movlw	63
 16994  00297E  6E21               	movwf	i2___ftmul@f2+2,c
 16995  002980  EC9D  F01D         	call	i2___ftmul	;wreg free
 16996  002984  D799               	goto	L10
 16997  002986                     i2l4449:
 16998                           
 16999                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 17000  002986  5034               	movf	i2fround@prec,w,c
 17001  002988  0D03               	mullw	3
 17002  00298A  0E30               	movlw	low __npowers_
 17003  00298C  24F3               	addwf	prodl,w,c
 17004  00298E  6EF6               	movwf	tblptrl,c
 17005  002990  0EFC               	movlw	high __npowers_
 17006  002992  20F4               	addwfc	prodh,w,c
 17007  002994  6EF7               	movwf	tblptrh,c
 17008  002996                     	if	0	;There are less than 3 active tblptr bytes
 17009  002996                     	endif
 17010  002996  0009               	tblrd		*+
 17011  002998  CFF5 F01C          	movff	tablat,i2___ftmul@f1
 17012  00299C  0009               	tblrd		*+
 17013  00299E  CFF5 F01D          	movff	tablat,i2___ftmul@f1+1
 17014  0029A2  000A               	tblrd		*-
 17015  0029A4  CFF5 F01E          	movff	tablat,i2___ftmul@f1+2
 17016  0029A8  0E00               	movlw	0
 17017  0029AA  6E1F               	movwf	i2___ftmul@f2,c
 17018  0029AC  0E00               	movlw	0
 17019  0029AE  6E20               	movwf	i2___ftmul@f2+1,c
 17020  0029B0  0E3F               	movlw	63
 17021  0029B2  6E21               	movwf	i2___ftmul@f2+2,c
 17022  0029B4  EC9D  F01D         	call	i2___ftmul	;wreg free
 17023  0029B8  C01C  F02B         	movff	?i2___ftmul,?i2_fround
 17024  0029BC  C01D  F02C         	movff	?i2___ftmul+1,?i2_fround+1
 17025  0029C0  C01E  F02D         	movff	?i2___ftmul+2,?i2_fround+2
 17026  0029C4  0012               	return	
 17027  0029C6                     __end_ofi2_fround:
 17028                           	opt stack 0
 17029                           pclatu	equ	0xFFB
 17030                           pclath	equ	0xFFA
 17031                           tblptru	equ	0xFF8
 17032                           tblptrh	equ	0xFF7
 17033                           tblptrl	equ	0xFF6
 17034                           tablat	equ	0xFF5
 17035                           prodh	equ	0xFF4
 17036                           prodl	equ	0xFF3
 17037                           intcon	equ	0xFF2
 17038                           intcon3	equ	0xFF0
 17039                           postinc0	equ	0xFEE
 17040                           fsr0h	equ	0xFEA
 17041                           fsr0l	equ	0xFE9
 17042                           wreg	equ	0xFE8
 17043                           plusw1	equ	0xFE3
 17044                           fsr1h	equ	0xFE2
 17045                           fsr1l	equ	0xFE1
 17046                           indf2	equ	0xFDF
 17047                           postinc2	equ	0xFDE
 17048                           postdec2	equ	0xFDD
 17049                           plusw2	equ	0xFDB
 17050                           fsr2h	equ	0xFDA
 17051                           fsr2l	equ	0xFD9
 17052                           status	equ	0xFD8
 17053                           
 17054 ;; *************** function i2___wmul *****************
 17055 ;; Defined at:
 17056 ;;		line 15 in file "/opt/microchip/xc8/v1.41/sources/common/Umul16.c"
 17057 ;; Parameters:    Size  Location     Type
 17058 ;;  multiplier      2   14[COMRAM] unsigned int 
 17059 ;;  multiplicand    2   16[COMRAM] unsigned int 
 17060 ;; Auto vars:     Size  Location     Type
 17061 ;;  __wmul          2   18[COMRAM] unsigned int 
 17062 ;; Return value:  Size  Location     Type
 17063 ;;                  2   14[COMRAM] unsigned int 
 17064 ;; Registers used:
 17065 ;;		wreg, status,2, status,0, prodl, prodh
 17066 ;; Tracked objects:
 17067 ;;		On entry : 0/0
 17068 ;;		On exit  : 0/0
 17069 ;;		Unchanged: 0/0
 17070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17071 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17072 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17074 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17075 ;;Total ram usage:        6 bytes
 17076 ;; Hardware stack levels used:    1
 17077 ;; This function calls:
 17078 ;;		Nothing
 17079 ;; This function is called by:
 17080 ;;		_simulate
 17081 ;;		_HexDecToDec2
 17082 ;;		_WriteRun
 17083 ;;		i2_fround
 17084 ;;		i2_scale
 17085 ;;		i2_printf
 17086 ;; This function uses a non-reentrant model
 17087 ;;
 17088                           
 17089                           	psect	text66
 17090  004FC4                     __ptext66:
 17091                           	opt stack 0
 17092  004FC4                     i2___wmul:
 17093                           	opt stack 21
 17094                           
 17095                           ;incstack = 0
 17096  004FC4  500F               	movf	i2___wmul@multiplier,w,c
 17097  004FC6  0211               	mulwf	i2___wmul@multiplicand,c
 17098  004FC8  CFF3 F013          	movff	prodl,i2___wmul@product
 17099  004FCC  CFF4 F014          	movff	prodh,i2___wmul@product+1
 17100  004FD0  500F               	movf	i2___wmul@multiplier,w,c
 17101  004FD2  0212               	mulwf	i2___wmul@multiplicand+1,c
 17102  004FD4  50F3               	movf	prodl,w,c
 17103  004FD6  2614               	addwf	i2___wmul@product+1,f,c
 17104  004FD8  5010               	movf	i2___wmul@multiplier+1,w,c
 17105  004FDA  0211               	mulwf	i2___wmul@multiplicand,c
 17106  004FDC  50F3               	movf	prodl,w,c
 17107  004FDE  2614               	addwf	i2___wmul@product+1,f,c
 17108  004FE0  C013  F00F         	movff	i2___wmul@product,?i2___wmul
 17109  004FE4  C014  F010         	movff	i2___wmul@product+1,?i2___wmul+1
 17110  004FE8  0012               	return	
 17111  004FEA                     __end_ofi2___wmul:
 17112                           	opt stack 0
 17113                           pclatu	equ	0xFFB
 17114                           pclath	equ	0xFFA
 17115                           tblptru	equ	0xFF8
 17116                           tblptrh	equ	0xFF7
 17117                           tblptrl	equ	0xFF6
 17118                           tablat	equ	0xFF5
 17119                           prodh	equ	0xFF4
 17120                           prodl	equ	0xFF3
 17121                           intcon	equ	0xFF2
 17122                           intcon3	equ	0xFF0
 17123                           postinc0	equ	0xFEE
 17124                           fsr0h	equ	0xFEA
 17125                           fsr0l	equ	0xFE9
 17126                           wreg	equ	0xFE8
 17127                           plusw1	equ	0xFE3
 17128                           fsr1h	equ	0xFE2
 17129                           fsr1l	equ	0xFE1
 17130                           indf2	equ	0xFDF
 17131                           postinc2	equ	0xFDE
 17132                           postdec2	equ	0xFDD
 17133                           plusw2	equ	0xFDB
 17134                           fsr2h	equ	0xFDA
 17135                           fsr2l	equ	0xFD9
 17136                           status	equ	0xFD8
 17137                           
 17138 ;; *************** function i2___ftmul *****************
 17139 ;; Defined at:
 17140 ;;		line 62 in file "/opt/microchip/xc8/v1.41/sources/common/ftmul.c"
 17141 ;; Parameters:    Size  Location     Type
 17142 ;;  f1              3   27[COMRAM] float 
 17143 ;;  f2              3   30[COMRAM] float 
 17144 ;; Auto vars:     Size  Location     Type
 17145 ;;  __ftmul         3   37[COMRAM] unsigned um
 17146 ;;  __ftmul         1   41[COMRAM] unsigned char 
 17147 ;;  __ftmul         1   40[COMRAM] unsigned char 
 17148 ;;  __ftmul         1   36[COMRAM] unsigned char 
 17149 ;; Return value:  Size  Location     Type
 17150 ;;                  3   27[COMRAM] float 
 17151 ;; Registers used:
 17152 ;;		wreg, status,2, status,0, cstack
 17153 ;; Tracked objects:
 17154 ;;		On entry : 0/0
 17155 ;;		On exit  : 0/0
 17156 ;;		Unchanged: 0/0
 17157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17158 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17159 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17160 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17161 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17162 ;;Total ram usage:       15 bytes
 17163 ;; Hardware stack levels used:    1
 17164 ;; Hardware stack levels required when called:    1
 17165 ;; This function calls:
 17166 ;;		i2___ftpack
 17167 ;; This function is called by:
 17168 ;;		_checkV
 17169 ;;		i2_fround
 17170 ;;		i2_scale
 17171 ;;		i2_printf
 17172 ;; This function uses a non-reentrant model
 17173 ;;
 17174                           
 17175                           	psect	text67
 17176  003B3A                     __ptext67:
 17177                           	opt stack 0
 17178  003B3A                     i2___ftmul:
 17179                           	opt stack 20
 17180                           
 17181                           ;incstack = 0
 17182  003B3A  C01E  F022         	movff	i2___ftmul@f1+2,??i2___ftmul
 17183  003B3E  6A23               	clrf	(??i2___ftmul+1)& (0+255),c
 17184  003B40  6A24               	clrf	(??i2___ftmul+2)& (0+255),c
 17185  003B42  341D               	rlcf	i2___ftmul@f1+1,w,c
 17186  003B44  3622               	rlcf	??i2___ftmul& (0+255),f,c
 17187  003B46  E301               	bnc	u393_41
 17188  003B48  8023               	bsf	(??i2___ftmul+1)& (0+255),0,c
 17189  003B4A                     u393_41:
 17190  003B4A  5022               	movf	??i2___ftmul,w,c
 17191  003B4C  6E25               	movwf	i2___ftmul@exp,c
 17192  003B4E  5025               	movf	i2___ftmul@exp,w,c
 17193  003B50  A4D8               	btfss	status,2,c
 17194  003B52  D007               	goto	i2l4345
 17195  003B54  0E00               	movlw	0
 17196  003B56  6E1C               	movwf	?i2___ftmul,c
 17197  003B58  0E00               	movlw	0
 17198  003B5A  6E1D               	movwf	?i2___ftmul+1,c
 17199  003B5C  0E00               	movlw	0
 17200  003B5E  6E1E               	movwf	?i2___ftmul+2,c
 17201  003B60  0012               	return	
 17202  003B62                     i2l4345:
 17203  003B62  C021  F022         	movff	i2___ftmul@f2+2,??i2___ftmul
 17204  003B66  6A23               	clrf	(??i2___ftmul+1)& (0+255),c
 17205  003B68  6A24               	clrf	(??i2___ftmul+2)& (0+255),c
 17206  003B6A  3420               	rlcf	i2___ftmul@f2+1,w,c
 17207  003B6C  3622               	rlcf	??i2___ftmul& (0+255),f,c
 17208  003B6E  E301               	bnc	u395_41
 17209  003B70  8023               	bsf	(??i2___ftmul+1)& (0+255),0,c
 17210  003B72                     u395_41:
 17211  003B72  5022               	movf	??i2___ftmul,w,c
 17212  003B74  6E2A               	movwf	i2___ftmul@sign,c
 17213  003B76  502A               	movf	i2___ftmul@sign,w,c
 17214  003B78  A4D8               	btfss	status,2,c
 17215  003B7A  D007               	goto	i2l4351
 17216  003B7C  0E00               	movlw	0
 17217  003B7E  6E1C               	movwf	?i2___ftmul,c
 17218  003B80  0E00               	movlw	0
 17219  003B82  6E1D               	movwf	?i2___ftmul+1,c
 17220  003B84  0E00               	movlw	0
 17221  003B86  6E1E               	movwf	?i2___ftmul+2,c
 17222  003B88  0012               	return	
 17223  003B8A                     i2l4351:
 17224  003B8A  502A               	movf	i2___ftmul@sign,w,c
 17225  003B8C  0F7B               	addlw	123
 17226  003B8E  2625               	addwf	i2___ftmul@exp,f,c
 17227  003B90  C01E  F02A         	movff	i2___ftmul@f1+2,i2___ftmul@sign
 17228  003B94  5021               	movf	i2___ftmul@f2+2,w,c
 17229  003B96  1A2A               	xorwf	i2___ftmul@sign,f,c
 17230  003B98  0E80               	movlw	128
 17231  003B9A  162A               	andwf	i2___ftmul@sign,f,c
 17232  003B9C  8E1D               	bsf	i2___ftmul@f1+1,7,c
 17233  003B9E  8E20               	bsf	i2___ftmul@f2+1,7,c
 17234  003BA0  0EFF               	movlw	255
 17235  003BA2  161F               	andwf	i2___ftmul@f2,f,c
 17236  003BA4  0EFF               	movlw	255
 17237  003BA6  1620               	andwf	i2___ftmul@f2+1,f,c
 17238  003BA8  0E00               	movlw	0
 17239  003BAA  1621               	andwf	i2___ftmul@f2+2,f,c
 17240  003BAC  0E00               	movlw	0
 17241  003BAE  6E26               	movwf	i2___ftmul@f3_as_product,c
 17242  003BB0  0E00               	movlw	0
 17243  003BB2  6E27               	movwf	i2___ftmul@f3_as_product+1,c
 17244  003BB4  0E00               	movlw	0
 17245  003BB6  6E28               	movwf	i2___ftmul@f3_as_product+2,c
 17246  003BB8  0E07               	movlw	7
 17247  003BBA  6E29               	movwf	i2___ftmul@cntr,c
 17248  003BBC                     i2l4365:
 17249  003BBC  A01C               	btfss	i2___ftmul@f1,0,c
 17250  003BBE  D006               	goto	i2l4369
 17251  003BC0  501F               	movf	i2___ftmul@f2,w,c
 17252  003BC2  2626               	addwf	i2___ftmul@f3_as_product,f,c
 17253  003BC4  5020               	movf	i2___ftmul@f2+1,w,c
 17254  003BC6  2227               	addwfc	i2___ftmul@f3_as_product+1,f,c
 17255  003BC8  5021               	movf	i2___ftmul@f2+2,w,c
 17256  003BCA  2228               	addwfc	i2___ftmul@f3_as_product+2,f,c
 17257  003BCC                     i2l4369:
 17258  003BCC  90D8               	bcf	status,0,c
 17259  003BCE  321E               	rrcf	i2___ftmul@f1+2,f,c
 17260  003BD0  321D               	rrcf	i2___ftmul@f1+1,f,c
 17261  003BD2  321C               	rrcf	i2___ftmul@f1,f,c
 17262  003BD4  90D8               	bcf	status,0,c
 17263  003BD6  361F               	rlcf	i2___ftmul@f2,f,c
 17264  003BD8  3620               	rlcf	i2___ftmul@f2+1,f,c
 17265  003BDA  3621               	rlcf	i2___ftmul@f2+2,f,c
 17266  003BDC  2E29               	decfsz	i2___ftmul@cntr,f,c
 17267  003BDE  D7EE               	goto	i2l4365
 17268  003BE0  0E09               	movlw	9
 17269  003BE2  6E29               	movwf	i2___ftmul@cntr,c
 17270  003BE4                     i2l4375:
 17271  003BE4  A01C               	btfss	i2___ftmul@f1,0,c
 17272  003BE6  D006               	goto	i2l4379
 17273  003BE8  501F               	movf	i2___ftmul@f2,w,c
 17274  003BEA  2626               	addwf	i2___ftmul@f3_as_product,f,c
 17275  003BEC  5020               	movf	i2___ftmul@f2+1,w,c
 17276  003BEE  2227               	addwfc	i2___ftmul@f3_as_product+1,f,c
 17277  003BF0  5021               	movf	i2___ftmul@f2+2,w,c
 17278  003BF2  2228               	addwfc	i2___ftmul@f3_as_product+2,f,c
 17279  003BF4                     i2l4379:
 17280  003BF4  90D8               	bcf	status,0,c
 17281  003BF6  321E               	rrcf	i2___ftmul@f1+2,f,c
 17282  003BF8  321D               	rrcf	i2___ftmul@f1+1,f,c
 17283  003BFA  321C               	rrcf	i2___ftmul@f1,f,c
 17284  003BFC  90D8               	bcf	status,0,c
 17285  003BFE  3228               	rrcf	i2___ftmul@f3_as_product+2,f,c
 17286  003C00  3227               	rrcf	i2___ftmul@f3_as_product+1,f,c
 17287  003C02  3226               	rrcf	i2___ftmul@f3_as_product,f,c
 17288  003C04  2E29               	decfsz	i2___ftmul@cntr,f,c
 17289  003C06  D7EE               	goto	i2l4375
 17290  003C08  C026  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
 17291  003C0C  C027  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
 17292  003C10  C028  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
 17293  003C14  C025  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
 17294  003C18  C02A  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
 17295  003C1C  ECCB  F021         	call	i2___ftpack	;wreg free
 17296  003C20  C001  F01C         	movff	?i2___ftpack,?i2___ftmul
 17297  003C24  C002  F01D         	movff	?i2___ftpack+1,?i2___ftmul+1
 17298  003C28  C003  F01E         	movff	?i2___ftpack+2,?i2___ftmul+2
 17299  003C2C  0012               	return	
 17300  003C2E                     __end_ofi2___ftmul:
 17301                           	opt stack 0
 17302                           pclatu	equ	0xFFB
 17303                           pclath	equ	0xFFA
 17304                           tblptru	equ	0xFF8
 17305                           tblptrh	equ	0xFF7
 17306                           tblptrl	equ	0xFF6
 17307                           tablat	equ	0xFF5
 17308                           prodh	equ	0xFF4
 17309                           prodl	equ	0xFF3
 17310                           intcon	equ	0xFF2
 17311                           intcon3	equ	0xFF0
 17312                           postinc0	equ	0xFEE
 17313                           fsr0h	equ	0xFEA
 17314                           fsr0l	equ	0xFE9
 17315                           wreg	equ	0xFE8
 17316                           plusw1	equ	0xFE3
 17317                           fsr1h	equ	0xFE2
 17318                           fsr1l	equ	0xFE1
 17319                           indf2	equ	0xFDF
 17320                           postinc2	equ	0xFDE
 17321                           postdec2	equ	0xFDD
 17322                           plusw2	equ	0xFDB
 17323                           fsr2h	equ	0xFDA
 17324                           fsr2l	equ	0xFD9
 17325                           status	equ	0xFD8
 17326                           
 17327 ;; *************** function i2___awmod *****************
 17328 ;; Defined at:
 17329 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/awmod.c"
 17330 ;; Parameters:    Size  Location     Type
 17331 ;;  dividend        2    0[COMRAM] int 
 17332 ;;  divisor         2    2[COMRAM] int 
 17333 ;; Auto vars:     Size  Location     Type
 17334 ;;  __awmod         1    5[COMRAM] unsigned char 
 17335 ;;  __awmod         1    4[COMRAM] unsigned char 
 17336 ;; Return value:  Size  Location     Type
 17337 ;;                  2    0[COMRAM] int 
 17338 ;; Registers used:
 17339 ;;		wreg, status,2, status,0
 17340 ;; Tracked objects:
 17341 ;;		On entry : 0/0
 17342 ;;		On exit  : 0/0
 17343 ;;		Unchanged: 0/0
 17344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17345 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17346 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17348 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17349 ;;Total ram usage:        6 bytes
 17350 ;; Hardware stack levels used:    1
 17351 ;; This function calls:
 17352 ;;		Nothing
 17353 ;; This function is called by:
 17354 ;;		i2_fround
 17355 ;;		i2_scale
 17356 ;; This function uses a non-reentrant model
 17357 ;;
 17358                           
 17359                           	psect	text68
 17360  004A12                     __ptext68:
 17361                           	opt stack 0
 17362  004A12                     i2___awmod:
 17363                           	opt stack 21
 17364                           
 17365                           ;incstack = 0
 17366  004A12  0E00               	movlw	0
 17367  004A14  6E06               	movwf	i2___awmod@sign,c
 17368  004A16  AE02               	btfss	i2___awmod@dividend+1,7,c
 17369  004A18  D006               	goto	i2l4241
 17370  004A1A  6C01               	negf	i2___awmod@dividend,c
 17371  004A1C  1E02               	comf	i2___awmod@dividend+1,f,c
 17372  004A1E  B0D8               	btfsc	status,0,c
 17373  004A20  2A02               	incf	i2___awmod@dividend+1,f,c
 17374  004A22  0E01               	movlw	1
 17375  004A24  6E06               	movwf	i2___awmod@sign,c
 17376  004A26                     i2l4241:
 17377  004A26  AE04               	btfss	i2___awmod@divisor+1,7,c
 17378  004A28  D004               	goto	i2l4245
 17379  004A2A  6C03               	negf	i2___awmod@divisor,c
 17380  004A2C  1E04               	comf	i2___awmod@divisor+1,f,c
 17381  004A2E  B0D8               	btfsc	status,0,c
 17382  004A30  2A04               	incf	i2___awmod@divisor+1,f,c
 17383  004A32                     i2l4245:
 17384  004A32  5003               	movf	i2___awmod@divisor,w,c
 17385  004A34  1004               	iorwf	i2___awmod@divisor+1,w,c
 17386  004A36  B4D8               	btfsc	status,2,c
 17387  004A38  D018               	goto	i2l4261
 17388  004A3A  0E01               	movlw	1
 17389  004A3C  6E05               	movwf	i2___awmod@counter,c
 17390  004A3E  D004               	goto	i2l4251
 17391  004A40                     i2l4249:
 17392  004A40  90D8               	bcf	status,0,c
 17393  004A42  3603               	rlcf	i2___awmod@divisor,f,c
 17394  004A44  3604               	rlcf	i2___awmod@divisor+1,f,c
 17395  004A46  2A05               	incf	i2___awmod@counter,f,c
 17396  004A48                     i2l4251:
 17397  004A48  AE04               	btfss	i2___awmod@divisor+1,7,c
 17398  004A4A  D7FA               	goto	i2l4249
 17399  004A4C                     i2l4253:
 17400  004A4C  5003               	movf	i2___awmod@divisor,w,c
 17401  004A4E  5C01               	subwf	i2___awmod@dividend,w,c
 17402  004A50  5004               	movf	i2___awmod@divisor+1,w,c
 17403  004A52  5802               	subwfb	i2___awmod@dividend+1,w,c
 17404  004A54  A0D8               	btfss	status,0,c
 17405  004A56  D004               	goto	i2l4257
 17406  004A58  5003               	movf	i2___awmod@divisor,w,c
 17407  004A5A  5E01               	subwf	i2___awmod@dividend,f,c
 17408  004A5C  5004               	movf	i2___awmod@divisor+1,w,c
 17409  004A5E  5A02               	subwfb	i2___awmod@dividend+1,f,c
 17410  004A60                     i2l4257:
 17411  004A60  90D8               	bcf	status,0,c
 17412  004A62  3204               	rrcf	i2___awmod@divisor+1,f,c
 17413  004A64  3203               	rrcf	i2___awmod@divisor,f,c
 17414  004A66  2E05               	decfsz	i2___awmod@counter,f,c
 17415  004A68  D7F1               	goto	i2l4253
 17416  004A6A                     i2l4261:
 17417  004A6A  5006               	movf	i2___awmod@sign,w,c
 17418  004A6C  B4D8               	btfsc	status,2,c
 17419  004A6E  D004               	goto	i2l4265
 17420  004A70  6C01               	negf	i2___awmod@dividend,c
 17421  004A72  1E02               	comf	i2___awmod@dividend+1,f,c
 17422  004A74  B0D8               	btfsc	status,0,c
 17423  004A76  2A02               	incf	i2___awmod@dividend+1,f,c
 17424  004A78                     i2l4265:
 17425  004A78  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 17426  004A7C  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 17427  004A80  0012               	return	
 17428  004A82                     __end_ofi2___awmod:
 17429                           	opt stack 0
 17430                           pclatu	equ	0xFFB
 17431                           pclath	equ	0xFFA
 17432                           tblptru	equ	0xFF8
 17433                           tblptrh	equ	0xFF7
 17434                           tblptrl	equ	0xFF6
 17435                           tablat	equ	0xFF5
 17436                           prodh	equ	0xFF4
 17437                           prodl	equ	0xFF3
 17438                           intcon	equ	0xFF2
 17439                           intcon3	equ	0xFF0
 17440                           postinc0	equ	0xFEE
 17441                           fsr0h	equ	0xFEA
 17442                           fsr0l	equ	0xFE9
 17443                           wreg	equ	0xFE8
 17444                           plusw1	equ	0xFE3
 17445                           fsr1h	equ	0xFE2
 17446                           fsr1l	equ	0xFE1
 17447                           indf2	equ	0xFDF
 17448                           postinc2	equ	0xFDE
 17449                           postdec2	equ	0xFDD
 17450                           plusw2	equ	0xFDB
 17451                           fsr2h	equ	0xFDA
 17452                           fsr2l	equ	0xFD9
 17453                           status	equ	0xFD8
 17454                           
 17455 ;; *************** function i2___awdiv *****************
 17456 ;; Defined at:
 17457 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/awdiv.c"
 17458 ;; Parameters:    Size  Location     Type
 17459 ;;  dividend        2    6[COMRAM] int 
 17460 ;;  divisor         2    8[COMRAM] int 
 17461 ;; Auto vars:     Size  Location     Type
 17462 ;;  __awdiv         2   12[COMRAM] int 
 17463 ;;  __awdiv         1   11[COMRAM] unsigned char 
 17464 ;;  __awdiv         1   10[COMRAM] unsigned char 
 17465 ;; Return value:  Size  Location     Type
 17466 ;;                  2    6[COMRAM] int 
 17467 ;; Registers used:
 17468 ;;		wreg, status,2, status,0
 17469 ;; Tracked objects:
 17470 ;;		On entry : 0/0
 17471 ;;		On exit  : 0/0
 17472 ;;		Unchanged: 0/0
 17473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17474 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17475 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17477 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17478 ;;Total ram usage:        8 bytes
 17479 ;; Hardware stack levels used:    1
 17480 ;; This function calls:
 17481 ;;		Nothing
 17482 ;; This function is called by:
 17483 ;;		_PWMC
 17484 ;;		i2_fround
 17485 ;;		i2_scale
 17486 ;;		i2_printf
 17487 ;; This function uses a non-reentrant model
 17488 ;;
 17489                           
 17490                           	psect	text69
 17491  004720                     __ptext69:
 17492                           	opt stack 0
 17493  004720                     i2___awdiv:
 17494                           	opt stack 21
 17495                           
 17496                           ;incstack = 0
 17497  004720  0E00               	movlw	0
 17498  004722  6E0C               	movwf	i2___awdiv@sign,c
 17499  004724  AE0A               	btfss	i2___awdiv@divisor+1,7,c
 17500  004726  D006               	goto	i2l4197
 17501  004728  6C09               	negf	i2___awdiv@divisor,c
 17502  00472A  1E0A               	comf	i2___awdiv@divisor+1,f,c
 17503  00472C  B0D8               	btfsc	status,0,c
 17504  00472E  2A0A               	incf	i2___awdiv@divisor+1,f,c
 17505  004730  0E01               	movlw	1
 17506  004732  6E0C               	movwf	i2___awdiv@sign,c
 17507  004734                     i2l4197:
 17508  004734  AE08               	btfss	i2___awdiv@dividend+1,7,c
 17509  004736  D006               	goto	i2l4203
 17510  004738  6C07               	negf	i2___awdiv@dividend,c
 17511  00473A  1E08               	comf	i2___awdiv@dividend+1,f,c
 17512  00473C  B0D8               	btfsc	status,0,c
 17513  00473E  2A08               	incf	i2___awdiv@dividend+1,f,c
 17514  004740  0E01               	movlw	1
 17515  004742  1A0C               	xorwf	i2___awdiv@sign,f,c
 17516  004744                     i2l4203:
 17517  004744  0E00               	movlw	0
 17518  004746  6E0E               	movwf	i2___awdiv@quotient+1,c
 17519  004748  0E00               	movlw	0
 17520  00474A  6E0D               	movwf	i2___awdiv@quotient,c
 17521  00474C  5009               	movf	i2___awdiv@divisor,w,c
 17522  00474E  100A               	iorwf	i2___awdiv@divisor+1,w,c
 17523  004750  B4D8               	btfsc	status,2,c
 17524  004752  D01C               	goto	i2l4225
 17525  004754  0E01               	movlw	1
 17526  004756  6E0B               	movwf	i2___awdiv@counter,c
 17527  004758  D004               	goto	i2l4211
 17528  00475A                     i2l4209:
 17529  00475A  90D8               	bcf	status,0,c
 17530  00475C  3609               	rlcf	i2___awdiv@divisor,f,c
 17531  00475E  360A               	rlcf	i2___awdiv@divisor+1,f,c
 17532  004760  2A0B               	incf	i2___awdiv@counter,f,c
 17533  004762                     i2l4211:
 17534  004762  AE0A               	btfss	i2___awdiv@divisor+1,7,c
 17535  004764  D7FA               	goto	i2l4209
 17536  004766                     i2l4213:
 17537  004766  90D8               	bcf	status,0,c
 17538  004768  360D               	rlcf	i2___awdiv@quotient,f,c
 17539  00476A  360E               	rlcf	i2___awdiv@quotient+1,f,c
 17540  00476C  5009               	movf	i2___awdiv@divisor,w,c
 17541  00476E  5C07               	subwf	i2___awdiv@dividend,w,c
 17542  004770  500A               	movf	i2___awdiv@divisor+1,w,c
 17543  004772  5808               	subwfb	i2___awdiv@dividend+1,w,c
 17544  004774  A0D8               	btfss	status,0,c
 17545  004776  D005               	goto	i2l4221
 17546  004778  5009               	movf	i2___awdiv@divisor,w,c
 17547  00477A  5E07               	subwf	i2___awdiv@dividend,f,c
 17548  00477C  500A               	movf	i2___awdiv@divisor+1,w,c
 17549  00477E  5A08               	subwfb	i2___awdiv@dividend+1,f,c
 17550  004780  800D               	bsf	i2___awdiv@quotient,0,c
 17551  004782                     i2l4221:
 17552  004782  90D8               	bcf	status,0,c
 17553  004784  320A               	rrcf	i2___awdiv@divisor+1,f,c
 17554  004786  3209               	rrcf	i2___awdiv@divisor,f,c
 17555  004788  2E0B               	decfsz	i2___awdiv@counter,f,c
 17556  00478A  D7ED               	goto	i2l4213
 17557  00478C                     i2l4225:
 17558  00478C  500C               	movf	i2___awdiv@sign,w,c
 17559  00478E  B4D8               	btfsc	status,2,c
 17560  004790  D004               	goto	i2l4229
 17561  004792  6C0D               	negf	i2___awdiv@quotient,c
 17562  004794  1E0E               	comf	i2___awdiv@quotient+1,f,c
 17563  004796  B0D8               	btfsc	status,0,c
 17564  004798  2A0E               	incf	i2___awdiv@quotient+1,f,c
 17565  00479A                     i2l4229:
 17566  00479A  C00D  F007         	movff	i2___awdiv@quotient,?i2___awdiv
 17567  00479E  C00E  F008         	movff	i2___awdiv@quotient+1,?i2___awdiv+1
 17568  0047A2  0012               	return	
 17569  0047A4                     __end_ofi2___awdiv:
 17570                           	opt stack 0
 17571                           pclatu	equ	0xFFB
 17572                           pclath	equ	0xFFA
 17573                           tblptru	equ	0xFF8
 17574                           tblptrh	equ	0xFF7
 17575                           tblptrl	equ	0xFF6
 17576                           tablat	equ	0xFF5
 17577                           prodh	equ	0xFF4
 17578                           prodl	equ	0xFF3
 17579                           intcon	equ	0xFF2
 17580                           intcon3	equ	0xFF0
 17581                           postinc0	equ	0xFEE
 17582                           fsr0h	equ	0xFEA
 17583                           fsr0l	equ	0xFE9
 17584                           wreg	equ	0xFE8
 17585                           plusw1	equ	0xFE3
 17586                           fsr1h	equ	0xFE2
 17587                           fsr1l	equ	0xFE1
 17588                           indf2	equ	0xFDF
 17589                           postinc2	equ	0xFDE
 17590                           postdec2	equ	0xFDD
 17591                           plusw2	equ	0xFDB
 17592                           fsr2h	equ	0xFDA
 17593                           fsr2l	equ	0xFD9
 17594                           status	equ	0xFD8
 17595                           
 17596 ;; *************** function i2__tdiv_to_l_ *****************
 17597 ;; Defined at:
 17598 ;;		line 60 in file "/opt/microchip/xc8/v1.41/sources/common/ftdivl.c"
 17599 ;; Parameters:    Size  Location     Type
 17600 ;;  f1              3    0[COMRAM] float 
 17601 ;;  f2              3    3[COMRAM] float 
 17602 ;; Auto vars:     Size  Location     Type
 17603 ;;  _tdiv_to_l_     4    9[COMRAM] unsigned long 
 17604 ;;  _tdiv_to_l_     1   14[COMRAM] unsigned char 
 17605 ;;  _tdiv_to_l_     1   13[COMRAM] unsigned char 
 17606 ;; Return value:  Size  Location     Type
 17607 ;;                  4    0[COMRAM] unsigned long 
 17608 ;; Registers used:
 17609 ;;		wreg, status,2, status,0
 17610 ;; Tracked objects:
 17611 ;;		On entry : 0/0
 17612 ;;		On exit  : 0/0
 17613 ;;		Unchanged: 0/0
 17614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17615 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17616 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17617 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17618 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17619 ;;Total ram usage:       15 bytes
 17620 ;; Hardware stack levels used:    1
 17621 ;; This function calls:
 17622 ;;		Nothing
 17623 ;; This function is called by:
 17624 ;;		i2_printf
 17625 ;; This function uses a non-reentrant model
 17626 ;;
 17627                           
 17628                           	psect	text70
 17629  0034B0                     __ptext70:
 17630                           	opt stack 0
 17631  0034B0                     i2__tdiv_to_l_:
 17632                           	opt stack 22
 17633                           
 17634                           ;incstack = 0
 17635  0034B0  C003  F007         	movff	i2__tdiv_to_l_@f1+2,??i2__tdiv_to_l_
 17636  0034B4  6A08               	clrf	(??i2__tdiv_to_l_+1)& (0+255),c
 17637  0034B6  6A09               	clrf	(??i2__tdiv_to_l_+2)& (0+255),c
 17638  0034B8  3402               	rlcf	i2__tdiv_to_l_@f1+1,w,c
 17639  0034BA  3607               	rlcf	??i2__tdiv_to_l_& (0+255),f,c
 17640  0034BC  E301               	bnc	u421_41
 17641  0034BE  8008               	bsf	(??i2__tdiv_to_l_+1)& (0+255),0,c
 17642  0034C0                     u421_41:
 17643  0034C0  5007               	movf	??i2__tdiv_to_l_,w,c
 17644  0034C2  6E0F               	movwf	i2__tdiv_to_l_@exp1,c
 17645  0034C4  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 17646  0034C6  A4D8               	btfss	status,2,c
 17647  0034C8  D009               	goto	i2l4557
 17648  0034CA  0E00               	movlw	0
 17649  0034CC  6E01               	movwf	?i2__tdiv_to_l_,c
 17650  0034CE  0E00               	movlw	0
 17651  0034D0  6E02               	movwf	?i2__tdiv_to_l_+1,c
 17652  0034D2  0E00               	movlw	0
 17653  0034D4  6E03               	movwf	?i2__tdiv_to_l_+2,c
 17654  0034D6  0E00               	movlw	0
 17655  0034D8  6E04               	movwf	?i2__tdiv_to_l_+3,c
 17656  0034DA  0012               	return	
 17657  0034DC                     i2l4557:
 17658  0034DC  C006  F007         	movff	i2__tdiv_to_l_@f2+2,??i2__tdiv_to_l_
 17659  0034E0  6A08               	clrf	(??i2__tdiv_to_l_+1)& (0+255),c
 17660  0034E2  6A09               	clrf	(??i2__tdiv_to_l_+2)& (0+255),c
 17661  0034E4  3405               	rlcf	i2__tdiv_to_l_@f2+1,w,c
 17662  0034E6  3607               	rlcf	??i2__tdiv_to_l_& (0+255),f,c
 17663  0034E8  E301               	bnc	u423_41
 17664  0034EA  8008               	bsf	(??i2__tdiv_to_l_+1)& (0+255),0,c
 17665  0034EC                     u423_41:
 17666  0034EC  5007               	movf	??i2__tdiv_to_l_,w,c
 17667  0034EE  6E0E               	movwf	i2__tdiv_to_l_@cntr,c
 17668  0034F0  500E               	movf	i2__tdiv_to_l_@cntr,w,c
 17669  0034F2  A4D8               	btfss	status,2,c
 17670  0034F4  D009               	goto	i2l4563
 17671  0034F6  0E00               	movlw	0
 17672  0034F8  6E01               	movwf	?i2__tdiv_to_l_,c
 17673  0034FA  0E00               	movlw	0
 17674  0034FC  6E02               	movwf	?i2__tdiv_to_l_+1,c
 17675  0034FE  0E00               	movlw	0
 17676  003500  6E03               	movwf	?i2__tdiv_to_l_+2,c
 17677  003502  0E00               	movlw	0
 17678  003504  6E04               	movwf	?i2__tdiv_to_l_+3,c
 17679  003506  0012               	return	
 17680  003508                     i2l4563:
 17681  003508  8E02               	bsf	i2__tdiv_to_l_@f1+1,7,c
 17682  00350A  0EFF               	movlw	255
 17683  00350C  1601               	andwf	i2__tdiv_to_l_@f1,f,c
 17684  00350E  0EFF               	movlw	255
 17685  003510  1602               	andwf	i2__tdiv_to_l_@f1+1,f,c
 17686  003512  0E00               	movlw	0
 17687  003514  1603               	andwf	i2__tdiv_to_l_@f1+2,f,c
 17688  003516  8E05               	bsf	i2__tdiv_to_l_@f2+1,7,c
 17689  003518  0EFF               	movlw	255
 17690  00351A  1604               	andwf	i2__tdiv_to_l_@f2,f,c
 17691  00351C  0EFF               	movlw	255
 17692  00351E  1605               	andwf	i2__tdiv_to_l_@f2+1,f,c
 17693  003520  0E00               	movlw	0
 17694  003522  1606               	andwf	i2__tdiv_to_l_@f2+2,f,c
 17695  003524  0E00               	movlw	0
 17696  003526  6E0A               	movwf	i2__tdiv_to_l_@quot,c
 17697  003528  0E00               	movlw	0
 17698  00352A  6E0B               	movwf	i2__tdiv_to_l_@quot+1,c
 17699  00352C  0E00               	movlw	0
 17700  00352E  6E0C               	movwf	i2__tdiv_to_l_@quot+2,c
 17701  003530  0E00               	movlw	0
 17702  003532  6E0D               	movwf	i2__tdiv_to_l_@quot+3,c
 17703  003534  0E7F               	movlw	127
 17704  003536  5E0F               	subwf	i2__tdiv_to_l_@exp1,f,c
 17705  003538  500E               	movf	i2__tdiv_to_l_@cntr,w,c
 17706  00353A  0F98               	addlw	152
 17707  00353C  5E0F               	subwf	i2__tdiv_to_l_@exp1,f,c
 17708  00353E  0E18               	movlw	24
 17709  003540  6E0E               	movwf	i2__tdiv_to_l_@cntr,c
 17710  003542                     i2l899:
 17711  003542  90D8               	bcf	status,0,c
 17712  003544  360A               	rlcf	i2__tdiv_to_l_@quot,f,c
 17713  003546  360B               	rlcf	i2__tdiv_to_l_@quot+1,f,c
 17714  003548  360C               	rlcf	i2__tdiv_to_l_@quot+2,f,c
 17715  00354A  360D               	rlcf	i2__tdiv_to_l_@quot+3,f,c
 17716  00354C  5004               	movf	i2__tdiv_to_l_@f2,w,c
 17717  00354E  5C01               	subwf	i2__tdiv_to_l_@f1,w,c
 17718  003550  5005               	movf	i2__tdiv_to_l_@f2+1,w,c
 17719  003552  5802               	subwfb	i2__tdiv_to_l_@f1+1,w,c
 17720  003554  5006               	movf	i2__tdiv_to_l_@f2+2,w,c
 17721  003556  5803               	subwfb	i2__tdiv_to_l_@f1+2,w,c
 17722  003558  A0D8               	btfss	status,0,c
 17723  00355A  D007               	goto	i2l900
 17724  00355C  5004               	movf	i2__tdiv_to_l_@f2,w,c
 17725  00355E  5E01               	subwf	i2__tdiv_to_l_@f1,f,c
 17726  003560  5005               	movf	i2__tdiv_to_l_@f2+1,w,c
 17727  003562  5A02               	subwfb	i2__tdiv_to_l_@f1+1,f,c
 17728  003564  5006               	movf	i2__tdiv_to_l_@f2+2,w,c
 17729  003566  5A03               	subwfb	i2__tdiv_to_l_@f1+2,f,c
 17730  003568  800A               	bsf	i2__tdiv_to_l_@quot,0,c
 17731  00356A                     i2l900:
 17732  00356A  90D8               	bcf	status,0,c
 17733  00356C  3601               	rlcf	i2__tdiv_to_l_@f1,f,c
 17734  00356E  3602               	rlcf	i2__tdiv_to_l_@f1+1,f,c
 17735  003570  3603               	rlcf	i2__tdiv_to_l_@f1+2,f,c
 17736  003572  2E0E               	decfsz	i2__tdiv_to_l_@cntr,f,c
 17737  003574  D7E6               	goto	i2l899
 17738  003576  AE0F               	btfss	i2__tdiv_to_l_@exp1,7,c
 17739  003578  D016               	goto	i2l4597
 17740  00357A  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 17741  00357C  0A80               	xorlw	128
 17742  00357E  0F97               	addlw	151
 17743  003580  B0D8               	btfsc	status,0,c
 17744  003582  D009               	goto	i2l4593
 17745  003584  0E00               	movlw	0
 17746  003586  6E01               	movwf	?i2__tdiv_to_l_,c
 17747  003588  0E00               	movlw	0
 17748  00358A  6E02               	movwf	?i2__tdiv_to_l_+1,c
 17749  00358C  0E00               	movlw	0
 17750  00358E  6E03               	movwf	?i2__tdiv_to_l_+2,c
 17751  003590  0E00               	movlw	0
 17752  003592  6E04               	movwf	?i2__tdiv_to_l_+3,c
 17753  003594  0012               	return	
 17754  003596                     i2l4593:
 17755  003596  90D8               	bcf	status,0,c
 17756  003598  320D               	rrcf	i2__tdiv_to_l_@quot+3,f,c
 17757  00359A  320C               	rrcf	i2__tdiv_to_l_@quot+2,f,c
 17758  00359C  320B               	rrcf	i2__tdiv_to_l_@quot+1,f,c
 17759  00359E  320A               	rrcf	i2__tdiv_to_l_@quot,f,c
 17760  0035A0  3E0F               	incfsz	i2__tdiv_to_l_@exp1,f,c
 17761  0035A2  D7F9               	goto	i2l4593
 17762  0035A4  D015               	goto	i2l906
 17763  0035A6                     i2l4597:
 17764  0035A6  0E17               	movlw	23
 17765  0035A8  640F               	cpfsgt	i2__tdiv_to_l_@exp1,c
 17766  0035AA  D00F               	goto	i2l4605
 17767  0035AC  0E00               	movlw	0
 17768  0035AE  6E01               	movwf	?i2__tdiv_to_l_,c
 17769  0035B0  0E00               	movlw	0
 17770  0035B2  6E02               	movwf	?i2__tdiv_to_l_+1,c
 17771  0035B4  0E00               	movlw	0
 17772  0035B6  6E03               	movwf	?i2__tdiv_to_l_+2,c
 17773  0035B8  0E00               	movlw	0
 17774  0035BA  6E04               	movwf	?i2__tdiv_to_l_+3,c
 17775  0035BC  0012               	return	
 17776  0035BE                     i2l4603:
 17777  0035BE  90D8               	bcf	status,0,c
 17778  0035C0  360A               	rlcf	i2__tdiv_to_l_@quot,f,c
 17779  0035C2  360B               	rlcf	i2__tdiv_to_l_@quot+1,f,c
 17780  0035C4  360C               	rlcf	i2__tdiv_to_l_@quot+2,f,c
 17781  0035C6  360D               	rlcf	i2__tdiv_to_l_@quot+3,f,c
 17782  0035C8  060F               	decf	i2__tdiv_to_l_@exp1,f,c
 17783  0035CA                     i2l4605:
 17784  0035CA  500F               	movf	i2__tdiv_to_l_@exp1,w,c
 17785  0035CC  A4D8               	btfss	status,2,c
 17786  0035CE  D7F7               	goto	i2l4603
 17787  0035D0                     i2l906:
 17788  0035D0  C00A  F001         	movff	i2__tdiv_to_l_@quot,?i2__tdiv_to_l_
 17789  0035D4  C00B  F002         	movff	i2__tdiv_to_l_@quot+1,?i2__tdiv_to_l_+1
 17790  0035D8  C00C  F003         	movff	i2__tdiv_to_l_@quot+2,?i2__tdiv_to_l_+2
 17791  0035DC  C00D  F004         	movff	i2__tdiv_to_l_@quot+3,?i2__tdiv_to_l_+3
 17792  0035E0  0012               	return		;funcret
 17793  0035E2                     __end_ofi2__tdiv_to_l_:
 17794                           	opt stack 0
 17795                           pclatu	equ	0xFFB
 17796                           pclath	equ	0xFFA
 17797                           tblptru	equ	0xFF8
 17798                           tblptrh	equ	0xFF7
 17799                           tblptrl	equ	0xFF6
 17800                           tablat	equ	0xFF5
 17801                           prodh	equ	0xFF4
 17802                           prodl	equ	0xFF3
 17803                           intcon	equ	0xFF2
 17804                           intcon3	equ	0xFF0
 17805                           postinc0	equ	0xFEE
 17806                           fsr0h	equ	0xFEA
 17807                           fsr0l	equ	0xFE9
 17808                           wreg	equ	0xFE8
 17809                           plusw1	equ	0xFE3
 17810                           fsr1h	equ	0xFE2
 17811                           fsr1l	equ	0xFE1
 17812                           indf2	equ	0xFDF
 17813                           postinc2	equ	0xFDE
 17814                           postdec2	equ	0xFDD
 17815                           plusw2	equ	0xFDB
 17816                           fsr2h	equ	0xFDA
 17817                           fsr2l	equ	0xFD9
 17818                           status	equ	0xFD8
 17819                           
 17820 ;; *************** function i2__div_to_l_ *****************
 17821 ;; Defined at:
 17822 ;;		line 60 in file "/opt/microchip/xc8/v1.41/sources/common/fldivl.c"
 17823 ;; Parameters:    Size  Location     Type
 17824 ;;  f1              3    0[COMRAM] unsigned long 
 17825 ;;  f2              3    3[COMRAM] unsigned long 
 17826 ;; Auto vars:     Size  Location     Type
 17827 ;;  _div_to_l_      4    6[COMRAM] unsigned long 
 17828 ;;  _div_to_l_      1   11[COMRAM] unsigned char 
 17829 ;;  _div_to_l_      1   10[COMRAM] unsigned char 
 17830 ;; Return value:  Size  Location     Type
 17831 ;;                  4    0[COMRAM] unsigned long 
 17832 ;; Registers used:
 17833 ;;		wreg, status,2, status,0
 17834 ;; Tracked objects:
 17835 ;;		On entry : 0/0
 17836 ;;		On exit  : 0/0
 17837 ;;		Unchanged: 0/0
 17838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17839 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17840 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17842 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17843 ;;Total ram usage:       12 bytes
 17844 ;; Hardware stack levels used:    1
 17845 ;; This function calls:
 17846 ;;		Nothing
 17847 ;; This function is called by:
 17848 ;;		i2_printf
 17849 ;; This function uses a non-reentrant model
 17850 ;;
 17851                           
 17852                           	psect	text71
 17853  003714                     __ptext71:
 17854                           	opt stack 0
 17855  003714                     i2__div_to_l_:
 17856                           	opt stack 22
 17857                           
 17858                           ;incstack = 0
 17859  003714  3403               	rlcf	i2__div_to_l_@f1+2,w,c
 17860  003716  3404               	rlcf	i2__div_to_l_@f1+3,w,c
 17861  003718  6E0C               	movwf	i2__div_to_l_@exp1,c
 17862  00371A  500C               	movf	i2__div_to_l_@exp1,w,c
 17863  00371C  A4D8               	btfss	status,2,c
 17864  00371E  D009               	goto	i2l4497
 17865  003720  0E00               	movlw	0
 17866  003722  6E01               	movwf	?i2__div_to_l_,c
 17867  003724  0E00               	movlw	0
 17868  003726  6E02               	movwf	?i2__div_to_l_+1,c
 17869  003728  0E00               	movlw	0
 17870  00372A  6E03               	movwf	?i2__div_to_l_+2,c
 17871  00372C  0E00               	movlw	0
 17872  00372E  6E04               	movwf	?i2__div_to_l_+3,c
 17873  003730  0012               	return	
 17874  003732                     i2l4497:
 17875  003732  3406               	rlcf	i2__div_to_l_@f2+2,w,c
 17876  003734  3407               	rlcf	i2__div_to_l_@f2+3,w,c
 17877  003736  6E0B               	movwf	i2__div_to_l_@cntr,c
 17878  003738  500B               	movf	i2__div_to_l_@cntr,w,c
 17879  00373A  A4D8               	btfss	status,2,c
 17880  00373C  D009               	goto	i2l4503
 17881  00373E  0E00               	movlw	0
 17882  003740  6E01               	movwf	?i2__div_to_l_,c
 17883  003742  0E00               	movlw	0
 17884  003744  6E02               	movwf	?i2__div_to_l_+1,c
 17885  003746  0E00               	movlw	0
 17886  003748  6E03               	movwf	?i2__div_to_l_+2,c
 17887  00374A  0E00               	movlw	0
 17888  00374C  6E04               	movwf	?i2__div_to_l_+3,c
 17889  00374E  0012               	return	
 17890  003750                     i2l4503:
 17891  003750  8E03               	bsf	i2__div_to_l_@f1+2,7,c
 17892  003752  0EFF               	movlw	255
 17893  003754  1601               	andwf	i2__div_to_l_@f1,f,c
 17894  003756  0EFF               	movlw	255
 17895  003758  1602               	andwf	i2__div_to_l_@f1+1,f,c
 17896  00375A  0EFF               	movlw	255
 17897  00375C  1603               	andwf	i2__div_to_l_@f1+2,f,c
 17898  00375E  0E00               	movlw	0
 17899  003760  1604               	andwf	i2__div_to_l_@f1+3,f,c
 17900  003762  8E06               	bsf	i2__div_to_l_@f2+2,7,c
 17901  003764  0EFF               	movlw	255
 17902  003766  1604               	andwf	i2__div_to_l_@f2,f,c
 17903  003768  0EFF               	movlw	255
 17904  00376A  1605               	andwf	i2__div_to_l_@f2+1,f,c
 17905  00376C  0EFF               	movlw	255
 17906  00376E  1606               	andwf	i2__div_to_l_@f2+2,f,c
 17907  003770  0E00               	movlw	0
 17908  003772  1607               	andwf	i2__div_to_l_@f2+3,f,c
 17909  003774  0E00               	movlw	0
 17910  003776  6E07               	movwf	i2__div_to_l_@quot,c
 17911  003778  0E00               	movlw	0
 17912  00377A  6E08               	movwf	i2__div_to_l_@quot+1,c
 17913  00377C  0E00               	movlw	0
 17914  00377E  6E09               	movwf	i2__div_to_l_@quot+2,c
 17915  003780  0E00               	movlw	0
 17916  003782  6E0A               	movwf	i2__div_to_l_@quot+3,c
 17917  003784  0E7F               	movlw	127
 17918  003786  5E0C               	subwf	i2__div_to_l_@exp1,f,c
 17919  003788  500B               	movf	i2__div_to_l_@cntr,w,c
 17920  00378A  0FA0               	addlw	160
 17921  00378C  5E0C               	subwf	i2__div_to_l_@exp1,f,c
 17922  00378E  0E20               	movlw	32
 17923  003790  6E0B               	movwf	i2__div_to_l_@cntr,c
 17924  003792                     i2l4517:
 17925  003792  90D8               	bcf	status,0,c
 17926  003794  3607               	rlcf	i2__div_to_l_@quot,f,c
 17927  003796  3608               	rlcf	i2__div_to_l_@quot+1,f,c
 17928  003798  3609               	rlcf	i2__div_to_l_@quot+2,f,c
 17929  00379A  360A               	rlcf	i2__div_to_l_@quot+3,f,c
 17930  00379C  5004               	movf	i2__div_to_l_@f2,w,c
 17931  00379E  5C01               	subwf	i2__div_to_l_@f1,w,c
 17932  0037A0  5005               	movf	i2__div_to_l_@f2+1,w,c
 17933  0037A2  5802               	subwfb	i2__div_to_l_@f1+1,w,c
 17934  0037A4  5006               	movf	i2__div_to_l_@f2+2,w,c
 17935  0037A6  5803               	subwfb	i2__div_to_l_@f1+2,w,c
 17936  0037A8  5007               	movf	i2__div_to_l_@f2+3,w,c
 17937  0037AA  5804               	subwfb	i2__div_to_l_@f1+3,w,c
 17938  0037AC  A0D8               	btfss	status,0,c
 17939  0037AE  D009               	goto	i2l4525
 17940  0037B0  5004               	movf	i2__div_to_l_@f2,w,c
 17941  0037B2  5E01               	subwf	i2__div_to_l_@f1,f,c
 17942  0037B4  5005               	movf	i2__div_to_l_@f2+1,w,c
 17943  0037B6  5A02               	subwfb	i2__div_to_l_@f1+1,f,c
 17944  0037B8  5006               	movf	i2__div_to_l_@f2+2,w,c
 17945  0037BA  5A03               	subwfb	i2__div_to_l_@f1+2,f,c
 17946  0037BC  5007               	movf	i2__div_to_l_@f2+3,w,c
 17947  0037BE  5A04               	subwfb	i2__div_to_l_@f1+3,f,c
 17948  0037C0  8007               	bsf	i2__div_to_l_@quot,0,c
 17949  0037C2                     i2l4525:
 17950  0037C2  90D8               	bcf	status,0,c
 17951  0037C4  3601               	rlcf	i2__div_to_l_@f1,f,c
 17952  0037C6  3602               	rlcf	i2__div_to_l_@f1+1,f,c
 17953  0037C8  3603               	rlcf	i2__div_to_l_@f1+2,f,c
 17954  0037CA  3604               	rlcf	i2__div_to_l_@f1+3,f,c
 17955  0037CC  2E0B               	decfsz	i2__div_to_l_@cntr,f,c
 17956  0037CE  D7E1               	goto	i2l4517
 17957  0037D0  AE0C               	btfss	i2__div_to_l_@exp1,7,c
 17958  0037D2  D016               	goto	i2l4541
 17959  0037D4  500C               	movf	i2__div_to_l_@exp1,w,c
 17960  0037D6  0A80               	xorlw	128
 17961  0037D8  0F9F               	addlw	159
 17962  0037DA  B0D8               	btfsc	status,0,c
 17963  0037DC  D009               	goto	i2l4537
 17964  0037DE  0E00               	movlw	0
 17965  0037E0  6E01               	movwf	?i2__div_to_l_,c
 17966  0037E2  0E00               	movlw	0
 17967  0037E4  6E02               	movwf	?i2__div_to_l_+1,c
 17968  0037E6  0E00               	movlw	0
 17969  0037E8  6E03               	movwf	?i2__div_to_l_+2,c
 17970  0037EA  0E00               	movlw	0
 17971  0037EC  6E04               	movwf	?i2__div_to_l_+3,c
 17972  0037EE  0012               	return	
 17973  0037F0                     i2l4537:
 17974  0037F0  90D8               	bcf	status,0,c
 17975  0037F2  320A               	rrcf	i2__div_to_l_@quot+3,f,c
 17976  0037F4  3209               	rrcf	i2__div_to_l_@quot+2,f,c
 17977  0037F6  3208               	rrcf	i2__div_to_l_@quot+1,f,c
 17978  0037F8  3207               	rrcf	i2__div_to_l_@quot,f,c
 17979  0037FA  3E0C               	incfsz	i2__div_to_l_@exp1,f,c
 17980  0037FC  D7F9               	goto	i2l4537
 17981  0037FE  D015               	goto	i2l802
 17982  003800                     i2l4541:
 17983  003800  0E1F               	movlw	31
 17984  003802  640C               	cpfsgt	i2__div_to_l_@exp1,c
 17985  003804  D00F               	goto	i2l4549
 17986  003806  0E00               	movlw	0
 17987  003808  6E01               	movwf	?i2__div_to_l_,c
 17988  00380A  0E00               	movlw	0
 17989  00380C  6E02               	movwf	?i2__div_to_l_+1,c
 17990  00380E  0E00               	movlw	0
 17991  003810  6E03               	movwf	?i2__div_to_l_+2,c
 17992  003812  0E00               	movlw	0
 17993  003814  6E04               	movwf	?i2__div_to_l_+3,c
 17994  003816  0012               	return	
 17995  003818                     i2l4547:
 17996  003818  90D8               	bcf	status,0,c
 17997  00381A  3607               	rlcf	i2__div_to_l_@quot,f,c
 17998  00381C  3608               	rlcf	i2__div_to_l_@quot+1,f,c
 17999  00381E  3609               	rlcf	i2__div_to_l_@quot+2,f,c
 18000  003820  360A               	rlcf	i2__div_to_l_@quot+3,f,c
 18001  003822  060C               	decf	i2__div_to_l_@exp1,f,c
 18002  003824                     i2l4549:
 18003  003824  500C               	movf	i2__div_to_l_@exp1,w,c
 18004  003826  A4D8               	btfss	status,2,c
 18005  003828  D7F7               	goto	i2l4547
 18006  00382A                     i2l802:
 18007  00382A  C007  F001         	movff	i2__div_to_l_@quot,?i2__div_to_l_
 18008  00382E  C008  F002         	movff	i2__div_to_l_@quot+1,?i2__div_to_l_+1
 18009  003832  C009  F003         	movff	i2__div_to_l_@quot+2,?i2__div_to_l_+2
 18010  003836  C00A  F004         	movff	i2__div_to_l_@quot+3,?i2__div_to_l_+3
 18011  00383A  0012               	return		;funcret
 18012  00383C                     __end_ofi2__div_to_l_:
 18013                           	opt stack 0
 18014                           pclatu	equ	0xFFB
 18015                           pclath	equ	0xFFA
 18016                           tblptru	equ	0xFF8
 18017                           tblptrh	equ	0xFF7
 18018                           tblptrl	equ	0xFF6
 18019                           tablat	equ	0xFF5
 18020                           prodh	equ	0xFF4
 18021                           prodl	equ	0xFF3
 18022                           intcon	equ	0xFF2
 18023                           intcon3	equ	0xFF0
 18024                           postinc0	equ	0xFEE
 18025                           fsr0h	equ	0xFEA
 18026                           fsr0l	equ	0xFE9
 18027                           wreg	equ	0xFE8
 18028                           plusw1	equ	0xFE3
 18029                           fsr1h	equ	0xFE2
 18030                           fsr1l	equ	0xFE1
 18031                           indf2	equ	0xFDF
 18032                           postinc2	equ	0xFDE
 18033                           postdec2	equ	0xFDD
 18034                           plusw2	equ	0xFDB
 18035                           fsr2h	equ	0xFDA
 18036                           fsr2l	equ	0xFD9
 18037                           status	equ	0xFD8
 18038                           
 18039 ;; *************** function i2___lltoft *****************
 18040 ;; Defined at:
 18041 ;;		line 35 in file "/opt/microchip/xc8/v1.41/sources/common/lltoft.c"
 18042 ;; Parameters:    Size  Location     Type
 18043 ;;  c               4    8[COMRAM] unsigned long 
 18044 ;; Auto vars:     Size  Location     Type
 18045 ;;  __lltoft        1   16[COMRAM] unsigned char 
 18046 ;; Return value:  Size  Location     Type
 18047 ;;                  3    8[COMRAM] float 
 18048 ;; Registers used:
 18049 ;;		wreg, status,2, status,0, cstack
 18050 ;; Tracked objects:
 18051 ;;		On entry : 0/0
 18052 ;;		On exit  : 0/0
 18053 ;;		Unchanged: 0/0
 18054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18055 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18056 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18057 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18058 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18059 ;;Total ram usage:        9 bytes
 18060 ;; Hardware stack levels used:    1
 18061 ;; Hardware stack levels required when called:    1
 18062 ;; This function calls:
 18063 ;;		i2___ftpack
 18064 ;; This function is called by:
 18065 ;;		i2_printf
 18066 ;; This function uses a non-reentrant model
 18067 ;;
 18068                           
 18069                           	psect	text72
 18070  004BB0                     __ptext72:
 18071                           	opt stack 0
 18072  004BB0                     i2___lltoft:
 18073                           	opt stack 21
 18074                           
 18075                           ;incstack = 0
 18076  004BB0  0E8E               	movlw	142
 18077  004BB2  6E11               	movwf	i2___lltoft@exp,c
 18078  004BB4  D006               	goto	i2l4737
 18079  004BB6                     i2l4735:
 18080  004BB6  90D8               	bcf	status,0,c
 18081  004BB8  320C               	rrcf	i2___lltoft@c+3,f,c
 18082  004BBA  320B               	rrcf	i2___lltoft@c+2,f,c
 18083  004BBC  320A               	rrcf	i2___lltoft@c+1,f,c
 18084  004BBE  3209               	rrcf	i2___lltoft@c,f,c
 18085  004BC0  2A11               	incf	i2___lltoft@exp,f,c
 18086  004BC2                     i2l4737:
 18087  004BC2  0E00               	movlw	0
 18088  004BC4  1409               	andwf	i2___lltoft@c,w,c
 18089  004BC6  6E0D               	movwf	??i2___lltoft& (0+255),c
 18090  004BC8  0E00               	movlw	0
 18091  004BCA  140A               	andwf	i2___lltoft@c+1,w,c
 18092  004BCC  6E0E               	movwf	(??i2___lltoft+1)& (0+255),c
 18093  004BCE  0E00               	movlw	0
 18094  004BD0  140B               	andwf	i2___lltoft@c+2,w,c
 18095  004BD2  6E0F               	movwf	(??i2___lltoft+2)& (0+255),c
 18096  004BD4  0EFF               	movlw	255
 18097  004BD6  140C               	andwf	i2___lltoft@c+3,w,c
 18098  004BD8  6E10               	movwf	(??i2___lltoft+3)& (0+255),c
 18099  004BDA  500D               	movf	??i2___lltoft,w,c
 18100  004BDC  100E               	iorwf	??i2___lltoft+1,w,c
 18101  004BDE  100F               	iorwf	??i2___lltoft+2,w,c
 18102  004BE0  1010               	iorwf	??i2___lltoft+3,w,c
 18103  004BE2  A4D8               	btfss	status,2,c
 18104  004BE4  D7E8               	goto	i2l4735
 18105  004BE6  C009  F001         	movff	i2___lltoft@c,i2___ftpack@arg
 18106  004BEA  C00A  F002         	movff	i2___lltoft@c+1,i2___ftpack@arg+1
 18107  004BEE  C00B  F003         	movff	i2___lltoft@c+2,i2___ftpack@arg+2
 18108  004BF2  C011  F004         	movff	i2___lltoft@exp,i2___ftpack@exp
 18109  004BF6  0E00               	movlw	0
 18110  004BF8  6E05               	movwf	i2___ftpack@sign,c
 18111  004BFA  ECCB  F021         	call	i2___ftpack	;wreg free
 18112  004BFE  C001  F009         	movff	?i2___ftpack,?i2___lltoft
 18113  004C02  C002  F00A         	movff	?i2___ftpack+1,?i2___lltoft+1
 18114  004C06  C003  F00B         	movff	?i2___ftpack+2,?i2___lltoft+2
 18115  004C0A  0012               	return	
 18116  004C0C                     __end_ofi2___lltoft:
 18117                           	opt stack 0
 18118                           pclatu	equ	0xFFB
 18119                           pclath	equ	0xFFA
 18120                           tblptru	equ	0xFF8
 18121                           tblptrh	equ	0xFF7
 18122                           tblptrl	equ	0xFF6
 18123                           tablat	equ	0xFF5
 18124                           prodh	equ	0xFF4
 18125                           prodl	equ	0xFF3
 18126                           intcon	equ	0xFF2
 18127                           intcon3	equ	0xFF0
 18128                           postinc0	equ	0xFEE
 18129                           fsr0h	equ	0xFEA
 18130                           fsr0l	equ	0xFE9
 18131                           wreg	equ	0xFE8
 18132                           plusw1	equ	0xFE3
 18133                           fsr1h	equ	0xFE2
 18134                           fsr1l	equ	0xFE1
 18135                           indf2	equ	0xFDF
 18136                           postinc2	equ	0xFDE
 18137                           postdec2	equ	0xFDD
 18138                           plusw2	equ	0xFDB
 18139                           fsr2h	equ	0xFDA
 18140                           fsr2l	equ	0xFD9
 18141                           status	equ	0xFD8
 18142                           
 18143 ;; *************** function i2___llmod *****************
 18144 ;; Defined at:
 18145 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/llmod.c"
 18146 ;; Parameters:    Size  Location     Type
 18147 ;;  dividend        4   13[COMRAM] unsigned long 
 18148 ;;  divisor         4   17[COMRAM] unsigned long 
 18149 ;; Auto vars:     Size  Location     Type
 18150 ;;  __llmod         1   21[COMRAM] unsigned char 
 18151 ;; Return value:  Size  Location     Type
 18152 ;;                  4   13[COMRAM] unsigned long 
 18153 ;; Registers used:
 18154 ;;		wreg, status,2, status,0
 18155 ;; Tracked objects:
 18156 ;;		On entry : 0/0
 18157 ;;		On exit  : 0/0
 18158 ;;		Unchanged: 0/0
 18159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18160 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18161 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18163 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18164 ;;Total ram usage:        9 bytes
 18165 ;; Hardware stack levels used:    1
 18166 ;; This function calls:
 18167 ;;		Nothing
 18168 ;; This function is called by:
 18169 ;;		i2_printf
 18170 ;; This function uses a non-reentrant model
 18171 ;;
 18172                           
 18173                           	psect	text73
 18174  004AEA                     __ptext73:
 18175                           	opt stack 0
 18176  004AEA                     i2___llmod:
 18177                           	opt stack 22
 18178                           
 18179                           ;incstack = 0
 18180  004AEA  5012               	movf	i2___llmod@divisor,w,c
 18181  004AEC  1013               	iorwf	i2___llmod@divisor+1,w,c
 18182  004AEE  1014               	iorwf	i2___llmod@divisor+2,w,c
 18183  004AF0  1015               	iorwf	i2___llmod@divisor+3,w,c
 18184  004AF2  B4D8               	btfsc	status,2,c
 18185  004AF4  D024               	goto	i2l991
 18186  004AF6  0E01               	movlw	1
 18187  004AF8  6E16               	movwf	i2___llmod@counter,c
 18188  004AFA  D006               	goto	i2l4723
 18189  004AFC                     i2l4721:
 18190  004AFC  90D8               	bcf	status,0,c
 18191  004AFE  3612               	rlcf	i2___llmod@divisor,f,c
 18192  004B00  3613               	rlcf	i2___llmod@divisor+1,f,c
 18193  004B02  3614               	rlcf	i2___llmod@divisor+2,f,c
 18194  004B04  3615               	rlcf	i2___llmod@divisor+3,f,c
 18195  004B06  2A16               	incf	i2___llmod@counter,f,c
 18196  004B08                     i2l4723:
 18197  004B08  AE15               	btfss	i2___llmod@divisor+3,7,c
 18198  004B0A  D7F8               	goto	i2l4721
 18199  004B0C                     i2l4725:
 18200  004B0C  5012               	movf	i2___llmod@divisor,w,c
 18201  004B0E  5C0E               	subwf	i2___llmod@dividend,w,c
 18202  004B10  5013               	movf	i2___llmod@divisor+1,w,c
 18203  004B12  580F               	subwfb	i2___llmod@dividend+1,w,c
 18204  004B14  5014               	movf	i2___llmod@divisor+2,w,c
 18205  004B16  5810               	subwfb	i2___llmod@dividend+2,w,c
 18206  004B18  5015               	movf	i2___llmod@divisor+3,w,c
 18207  004B1A  5811               	subwfb	i2___llmod@dividend+3,w,c
 18208  004B1C  A0D8               	btfss	status,0,c
 18209  004B1E  D008               	goto	i2l4729
 18210  004B20  5012               	movf	i2___llmod@divisor,w,c
 18211  004B22  5E0E               	subwf	i2___llmod@dividend,f,c
 18212  004B24  5013               	movf	i2___llmod@divisor+1,w,c
 18213  004B26  5A0F               	subwfb	i2___llmod@dividend+1,f,c
 18214  004B28  5014               	movf	i2___llmod@divisor+2,w,c
 18215  004B2A  5A10               	subwfb	i2___llmod@dividend+2,f,c
 18216  004B2C  5015               	movf	i2___llmod@divisor+3,w,c
 18217  004B2E  5A11               	subwfb	i2___llmod@dividend+3,f,c
 18218  004B30                     i2l4729:
 18219  004B30  90D8               	bcf	status,0,c
 18220  004B32  3215               	rrcf	i2___llmod@divisor+3,f,c
 18221  004B34  3214               	rrcf	i2___llmod@divisor+2,f,c
 18222  004B36  3213               	rrcf	i2___llmod@divisor+1,f,c
 18223  004B38  3212               	rrcf	i2___llmod@divisor,f,c
 18224  004B3A  2E16               	decfsz	i2___llmod@counter,f,c
 18225  004B3C  D7E7               	goto	i2l4725
 18226  004B3E                     i2l991:
 18227  004B3E  C00E  F00E         	movff	i2___llmod@dividend,?i2___llmod
 18228  004B42  C00F  F00F         	movff	i2___llmod@dividend+1,?i2___llmod+1
 18229  004B46  C010  F010         	movff	i2___llmod@dividend+2,?i2___llmod+2
 18230  004B4A  C011  F011         	movff	i2___llmod@dividend+3,?i2___llmod+3
 18231  004B4E  0012               	return		;funcret
 18232  004B50                     __end_ofi2___llmod:
 18233                           	opt stack 0
 18234                           pclatu	equ	0xFFB
 18235                           pclath	equ	0xFFA
 18236                           tblptru	equ	0xFF8
 18237                           tblptrh	equ	0xFF7
 18238                           tblptrl	equ	0xFF6
 18239                           tablat	equ	0xFF5
 18240                           prodh	equ	0xFF4
 18241                           prodl	equ	0xFF3
 18242                           intcon	equ	0xFF2
 18243                           intcon3	equ	0xFF0
 18244                           postinc0	equ	0xFEE
 18245                           fsr0h	equ	0xFEA
 18246                           fsr0l	equ	0xFE9
 18247                           wreg	equ	0xFE8
 18248                           plusw1	equ	0xFE3
 18249                           fsr1h	equ	0xFE2
 18250                           fsr1l	equ	0xFE1
 18251                           indf2	equ	0xFDF
 18252                           postinc2	equ	0xFDE
 18253                           postdec2	equ	0xFDD
 18254                           plusw2	equ	0xFDB
 18255                           fsr2h	equ	0xFDA
 18256                           fsr2l	equ	0xFD9
 18257                           status	equ	0xFD8
 18258                           
 18259 ;; *************** function i2___lldiv *****************
 18260 ;; Defined at:
 18261 ;;		line 8 in file "/opt/microchip/xc8/v1.41/sources/common/lldiv.c"
 18262 ;; Parameters:    Size  Location     Type
 18263 ;;  dividend        4    0[COMRAM] unsigned long 
 18264 ;;  divisor         4    4[COMRAM] unsigned long 
 18265 ;; Auto vars:     Size  Location     Type
 18266 ;;  __lldiv         4    8[COMRAM] unsigned long 
 18267 ;;  __lldiv         1   12[COMRAM] unsigned char 
 18268 ;; Return value:  Size  Location     Type
 18269 ;;                  4    0[COMRAM] unsigned long 
 18270 ;; Registers used:
 18271 ;;		wreg, status,2, status,0
 18272 ;; Tracked objects:
 18273 ;;		On entry : 0/0
 18274 ;;		On exit  : 0/0
 18275 ;;		Unchanged: 0/0
 18276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18277 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18278 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18280 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18281 ;;Total ram usage:       13 bytes
 18282 ;; Hardware stack levels used:    1
 18283 ;; This function calls:
 18284 ;;		Nothing
 18285 ;; This function is called by:
 18286 ;;		i2_printf
 18287 ;; This function uses a non-reentrant model
 18288 ;;
 18289                           
 18290                           	psect	text74
 18291  004826                     __ptext74:
 18292                           	opt stack 0
 18293  004826                     i2___lldiv:
 18294                           	opt stack 22
 18295                           
 18296                           ;incstack = 0
 18297  004826  0E00               	movlw	0
 18298  004828  6E09               	movwf	i2___lldiv@quotient,c
 18299  00482A  0E00               	movlw	0
 18300  00482C  6E0A               	movwf	i2___lldiv@quotient+1,c
 18301  00482E  0E00               	movlw	0
 18302  004830  6E0B               	movwf	i2___lldiv@quotient+2,c
 18303  004832  0E00               	movlw	0
 18304  004834  6E0C               	movwf	i2___lldiv@quotient+3,c
 18305  004836  5005               	movf	i2___lldiv@divisor,w,c
 18306  004838  1006               	iorwf	i2___lldiv@divisor+1,w,c
 18307  00483A  1007               	iorwf	i2___lldiv@divisor+2,w,c
 18308  00483C  1008               	iorwf	i2___lldiv@divisor+3,w,c
 18309  00483E  B4D8               	btfsc	status,2,c
 18310  004840  D02A               	goto	i2l981
 18311  004842  0E01               	movlw	1
 18312  004844  6E0D               	movwf	i2___lldiv@counter,c
 18313  004846  D006               	goto	i2l4703
 18314  004848                     i2l4701:
 18315  004848  90D8               	bcf	status,0,c
 18316  00484A  3605               	rlcf	i2___lldiv@divisor,f,c
 18317  00484C  3606               	rlcf	i2___lldiv@divisor+1,f,c
 18318  00484E  3607               	rlcf	i2___lldiv@divisor+2,f,c
 18319  004850  3608               	rlcf	i2___lldiv@divisor+3,f,c
 18320  004852  2A0D               	incf	i2___lldiv@counter,f,c
 18321  004854                     i2l4703:
 18322  004854  AE08               	btfss	i2___lldiv@divisor+3,7,c
 18323  004856  D7F8               	goto	i2l4701
 18324  004858                     i2l4705:
 18325  004858  90D8               	bcf	status,0,c
 18326  00485A  3609               	rlcf	i2___lldiv@quotient,f,c
 18327  00485C  360A               	rlcf	i2___lldiv@quotient+1,f,c
 18328  00485E  360B               	rlcf	i2___lldiv@quotient+2,f,c
 18329  004860  360C               	rlcf	i2___lldiv@quotient+3,f,c
 18330  004862  5005               	movf	i2___lldiv@divisor,w,c
 18331  004864  5C01               	subwf	i2___lldiv@dividend,w,c
 18332  004866  5006               	movf	i2___lldiv@divisor+1,w,c
 18333  004868  5802               	subwfb	i2___lldiv@dividend+1,w,c
 18334  00486A  5007               	movf	i2___lldiv@divisor+2,w,c
 18335  00486C  5803               	subwfb	i2___lldiv@dividend+2,w,c
 18336  00486E  5008               	movf	i2___lldiv@divisor+3,w,c
 18337  004870  5804               	subwfb	i2___lldiv@dividend+3,w,c
 18338  004872  A0D8               	btfss	status,0,c
 18339  004874  D009               	goto	i2l4713
 18340  004876  5005               	movf	i2___lldiv@divisor,w,c
 18341  004878  5E01               	subwf	i2___lldiv@dividend,f,c
 18342  00487A  5006               	movf	i2___lldiv@divisor+1,w,c
 18343  00487C  5A02               	subwfb	i2___lldiv@dividend+1,f,c
 18344  00487E  5007               	movf	i2___lldiv@divisor+2,w,c
 18345  004880  5A03               	subwfb	i2___lldiv@dividend+2,f,c
 18346  004882  5008               	movf	i2___lldiv@divisor+3,w,c
 18347  004884  5A04               	subwfb	i2___lldiv@dividend+3,f,c
 18348  004886  8009               	bsf	i2___lldiv@quotient,0,c
 18349  004888                     i2l4713:
 18350  004888  90D8               	bcf	status,0,c
 18351  00488A  3208               	rrcf	i2___lldiv@divisor+3,f,c
 18352  00488C  3207               	rrcf	i2___lldiv@divisor+2,f,c
 18353  00488E  3206               	rrcf	i2___lldiv@divisor+1,f,c
 18354  004890  3205               	rrcf	i2___lldiv@divisor,f,c
 18355  004892  2E0D               	decfsz	i2___lldiv@counter,f,c
 18356  004894  D7E1               	goto	i2l4705
 18357  004896                     i2l981:
 18358  004896  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
 18359  00489A  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
 18360  00489E  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
 18361  0048A2  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
 18362  0048A6  0012               	return		;funcret
 18363  0048A8                     __end_ofi2___lldiv:
 18364                           	opt stack 0
 18365                           pclatu	equ	0xFFB
 18366                           pclath	equ	0xFFA
 18367                           tblptru	equ	0xFF8
 18368                           tblptrh	equ	0xFF7
 18369                           tblptrl	equ	0xFF6
 18370                           tablat	equ	0xFF5
 18371                           prodh	equ	0xFF4
 18372                           prodl	equ	0xFF3
 18373                           intcon	equ	0xFF2
 18374                           intcon3	equ	0xFF0
 18375                           postinc0	equ	0xFEE
 18376                           fsr0h	equ	0xFEA
 18377                           fsr0l	equ	0xFE9
 18378                           wreg	equ	0xFE8
 18379                           plusw1	equ	0xFE3
 18380                           fsr1h	equ	0xFE2
 18381                           fsr1l	equ	0xFE1
 18382                           indf2	equ	0xFDF
 18383                           postinc2	equ	0xFDE
 18384                           postdec2	equ	0xFDD
 18385                           plusw2	equ	0xFDB
 18386                           fsr2h	equ	0xFDA
 18387                           fsr2l	equ	0xFD9
 18388                           status	equ	0xFD8
 18389                           
 18390 ;; *************** function i2___fttol *****************
 18391 ;; Defined at:
 18392 ;;		line 44 in file "/opt/microchip/xc8/v1.41/sources/common/fttol.c"
 18393 ;; Parameters:    Size  Location     Type
 18394 ;;  f1              3   42[COMRAM] float 
 18395 ;; Auto vars:     Size  Location     Type
 18396 ;;  __fttol         4   52[COMRAM] unsigned long 
 18397 ;;  __fttol         1   56[COMRAM] unsigned char 
 18398 ;;  __fttol         1   51[COMRAM] unsigned char 
 18399 ;; Return value:  Size  Location     Type
 18400 ;;                  4   42[COMRAM] long 
 18401 ;; Registers used:
 18402 ;;		wreg, status,2, status,0
 18403 ;; Tracked objects:
 18404 ;;		On entry : 0/0
 18405 ;;		On exit  : 0/0
 18406 ;;		Unchanged: 0/0
 18407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18408 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18409 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18410 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18411 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18412 ;;Total ram usage:       15 bytes
 18413 ;; Hardware stack levels used:    1
 18414 ;; This function calls:
 18415 ;;		Nothing
 18416 ;; This function is called by:
 18417 ;;		i2_printf
 18418 ;; This function uses a non-reentrant model
 18419 ;;
 18420                           
 18421                           	psect	text75
 18422  003C2E                     __ptext75:
 18423                           	opt stack 0
 18424  003C2E                     i2___fttol:
 18425                           	opt stack 22
 18426                           
 18427                           ;incstack = 0
 18428  003C2E  C02D  F02F         	movff	i2___fttol@f1+2,??i2___fttol
 18429  003C32  6A30               	clrf	(??i2___fttol+1)& (0+255),c
 18430  003C34  6A31               	clrf	(??i2___fttol+2)& (0+255),c
 18431  003C36  342C               	rlcf	i2___fttol@f1+1,w,c
 18432  003C38  362F               	rlcf	??i2___fttol& (0+255),f,c
 18433  003C3A  E301               	bnc	u435_41
 18434  003C3C  8030               	bsf	(??i2___fttol+1)& (0+255),0,c
 18435  003C3E                     u435_41:
 18436  003C3E  502F               	movf	??i2___fttol,w,c
 18437  003C40  6E39               	movwf	i2___fttol@exp1,c
 18438  003C42  5039               	movf	i2___fttol@exp1,w,c
 18439  003C44  A4D8               	btfss	status,2,c
 18440  003C46  D009               	goto	i2l4643
 18441  003C48  0E00               	movlw	0
 18442  003C4A  6E2B               	movwf	?i2___fttol,c
 18443  003C4C  0E00               	movlw	0
 18444  003C4E  6E2C               	movwf	?i2___fttol+1,c
 18445  003C50  0E00               	movlw	0
 18446  003C52  6E2D               	movwf	?i2___fttol+2,c
 18447  003C54  0E00               	movlw	0
 18448  003C56  6E2E               	movwf	?i2___fttol+3,c
 18449  003C58  0012               	return	
 18450  003C5A                     i2l4643:
 18451  003C5A  0E17               	movlw	23
 18452  003C5C  6E2F               	movwf	??i2___fttol& (0+255),c
 18453  003C5E  C02B  F030         	movff	i2___fttol@f1,??i2___fttol+1
 18454  003C62  C02C  F031         	movff	i2___fttol@f1+1,??i2___fttol+2
 18455  003C66  C02D  F032         	movff	i2___fttol@f1+2,??i2___fttol+3
 18456  003C6A  282F               	incf	??i2___fttol,w,c
 18457  003C6C  6E33               	movwf	(??i2___fttol+4)& (0+255),c
 18458  003C6E  D004               	goto	i2u437_40
 18459  003C70                     i2u437_45:
 18460  003C70  90D8               	bcf	status,0,c
 18461  003C72  3232               	rrcf	??i2___fttol+3,f,c
 18462  003C74  3231               	rrcf	??i2___fttol+2,f,c
 18463  003C76  3230               	rrcf	??i2___fttol+1,f,c
 18464  003C78                     i2u437_40:
 18465  003C78  2E33               	decfsz	(??i2___fttol+4)& (0+255),f,c
 18466  003C7A  D7FA               	goto	i2u437_45
 18467  003C7C  5030               	movf	??i2___fttol+1,w,c
 18468  003C7E  6E34               	movwf	i2___fttol@sign1,c
 18469  003C80  8E2C               	bsf	i2___fttol@f1+1,7,c
 18470  003C82  0EFF               	movlw	255
 18471  003C84  162B               	andwf	i2___fttol@f1,f,c
 18472  003C86  0EFF               	movlw	255
 18473  003C88  162C               	andwf	i2___fttol@f1+1,f,c
 18474  003C8A  0E00               	movlw	0
 18475  003C8C  162D               	andwf	i2___fttol@f1+2,f,c
 18476  003C8E  502B               	movf	i2___fttol@f1,w,c
 18477  003C90  6E35               	movwf	i2___fttol@lval,c
 18478  003C92  502C               	movf	i2___fttol@f1+1,w,c
 18479  003C94  6E36               	movwf	i2___fttol@lval+1,c
 18480  003C96  502D               	movf	i2___fttol@f1+2,w,c
 18481  003C98  6E37               	movwf	i2___fttol@lval+2,c
 18482  003C9A  6A38               	clrf	i2___fttol@lval+3,c
 18483  003C9C  0E8E               	movlw	142
 18484  003C9E  5E39               	subwf	i2___fttol@exp1,f,c
 18485  003CA0  AE39               	btfss	i2___fttol@exp1,7,c
 18486  003CA2  D016               	goto	i2l4665
 18487  003CA4  5039               	movf	i2___fttol@exp1,w,c
 18488  003CA6  0A80               	xorlw	128
 18489  003CA8  0F8F               	addlw	143
 18490  003CAA  B0D8               	btfsc	status,0,c
 18491  003CAC  D009               	goto	i2l4661
 18492  003CAE  0E00               	movlw	0
 18493  003CB0  6E2B               	movwf	?i2___fttol,c
 18494  003CB2  0E00               	movlw	0
 18495  003CB4  6E2C               	movwf	?i2___fttol+1,c
 18496  003CB6  0E00               	movlw	0
 18497  003CB8  6E2D               	movwf	?i2___fttol+2,c
 18498  003CBA  0E00               	movlw	0
 18499  003CBC  6E2E               	movwf	?i2___fttol+3,c
 18500  003CBE  0012               	return	
 18501  003CC0                     i2l4661:
 18502  003CC0  90D8               	bcf	status,0,c
 18503  003CC2  3238               	rrcf	i2___fttol@lval+3,f,c
 18504  003CC4  3237               	rrcf	i2___fttol@lval+2,f,c
 18505  003CC6  3236               	rrcf	i2___fttol@lval+1,f,c
 18506  003CC8  3235               	rrcf	i2___fttol@lval,f,c
 18507  003CCA  3E39               	incfsz	i2___fttol@exp1,f,c
 18508  003CCC  D7F9               	goto	i2l4661
 18509  003CCE  D015               	goto	i2l4675
 18510  003CD0                     i2l4665:
 18511  003CD0  0E17               	movlw	23
 18512  003CD2  6439               	cpfsgt	i2___fttol@exp1,c
 18513  003CD4  D00F               	goto	i2l4673
 18514  003CD6  0E00               	movlw	0
 18515  003CD8  6E2B               	movwf	?i2___fttol,c
 18516  003CDA  0E00               	movlw	0
 18517  003CDC  6E2C               	movwf	?i2___fttol+1,c
 18518  003CDE  0E00               	movlw	0
 18519  003CE0  6E2D               	movwf	?i2___fttol+2,c
 18520  003CE2  0E00               	movlw	0
 18521  003CE4  6E2E               	movwf	?i2___fttol+3,c
 18522  003CE6  0012               	return	
 18523  003CE8                     i2l4671:
 18524  003CE8  90D8               	bcf	status,0,c
 18525  003CEA  3635               	rlcf	i2___fttol@lval,f,c
 18526  003CEC  3636               	rlcf	i2___fttol@lval+1,f,c
 18527  003CEE  3637               	rlcf	i2___fttol@lval+2,f,c
 18528  003CF0  3638               	rlcf	i2___fttol@lval+3,f,c
 18529  003CF2  0639               	decf	i2___fttol@exp1,f,c
 18530  003CF4                     i2l4673:
 18531  003CF4  5039               	movf	i2___fttol@exp1,w,c
 18532  003CF6  A4D8               	btfss	status,2,c
 18533  003CF8  D7F7               	goto	i2l4671
 18534  003CFA                     i2l4675:
 18535  003CFA  5034               	movf	i2___fttol@sign1,w,c
 18536  003CFC  B4D8               	btfsc	status,2,c
 18537  003CFE  D008               	goto	i2l4679
 18538  003D00  1E38               	comf	i2___fttol@lval+3,f,c
 18539  003D02  1E37               	comf	i2___fttol@lval+2,f,c
 18540  003D04  1E36               	comf	i2___fttol@lval+1,f,c
 18541  003D06  6C35               	negf	i2___fttol@lval,c
 18542  003D08  0E00               	movlw	0
 18543  003D0A  2236               	addwfc	i2___fttol@lval+1,f,c
 18544  003D0C  2237               	addwfc	i2___fttol@lval+2,f,c
 18545  003D0E  2238               	addwfc	i2___fttol@lval+3,f,c
 18546  003D10                     i2l4679:
 18547  003D10  C035  F02B         	movff	i2___fttol@lval,?i2___fttol
 18548  003D14  C036  F02C         	movff	i2___fttol@lval+1,?i2___fttol+1
 18549  003D18  C037  F02D         	movff	i2___fttol@lval+2,?i2___fttol+2
 18550  003D1C  C038  F02E         	movff	i2___fttol@lval+3,?i2___fttol+3
 18551  003D20  0012               	return	
 18552  003D22                     __end_ofi2___fttol:
 18553                           	opt stack 0
 18554                           pclatu	equ	0xFFB
 18555                           pclath	equ	0xFFA
 18556                           tblptru	equ	0xFF8
 18557                           tblptrh	equ	0xFF7
 18558                           tblptrl	equ	0xFF6
 18559                           tablat	equ	0xFF5
 18560                           prodh	equ	0xFF4
 18561                           prodl	equ	0xFF3
 18562                           intcon	equ	0xFF2
 18563                           intcon3	equ	0xFF0
 18564                           postinc0	equ	0xFEE
 18565                           fsr0h	equ	0xFEA
 18566                           fsr0l	equ	0xFE9
 18567                           wreg	equ	0xFE8
 18568                           plusw1	equ	0xFE3
 18569                           fsr1h	equ	0xFE2
 18570                           fsr1l	equ	0xFE1
 18571                           indf2	equ	0xFDF
 18572                           postinc2	equ	0xFDE
 18573                           postdec2	equ	0xFDD
 18574                           plusw2	equ	0xFDB
 18575                           fsr2h	equ	0xFDA
 18576                           fsr2l	equ	0xFD9
 18577                           status	equ	0xFD8
 18578                           
 18579 ;; *************** function i2___ftsub *****************
 18580 ;; Defined at:
 18581 ;;		line 20 in file "/opt/microchip/xc8/v1.41/sources/common/ftsub.c"
 18582 ;; Parameters:    Size  Location     Type
 18583 ;;  f1              3   64[COMRAM] float 
 18584 ;;  f2              3   67[COMRAM] float 
 18585 ;; Auto vars:     Size  Location     Type
 18586 ;;		None
 18587 ;; Return value:  Size  Location     Type
 18588 ;;                  3   64[COMRAM] float 
 18589 ;; Registers used:
 18590 ;;		wreg, status,2, status,0, cstack
 18591 ;; Tracked objects:
 18592 ;;		On entry : 0/0
 18593 ;;		On exit  : 0/0
 18594 ;;		Unchanged: 0/0
 18595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18596 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18599 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18600 ;;Total ram usage:        6 bytes
 18601 ;; Hardware stack levels used:    1
 18602 ;; Hardware stack levels required when called:    2
 18603 ;; This function calls:
 18604 ;;		i2___ftadd
 18605 ;; This function is called by:
 18606 ;;		i2_printf
 18607 ;; This function uses a non-reentrant model
 18608 ;;
 18609                           
 18610                           	psect	text76
 18611  004D86                     __ptext76:
 18612                           	opt stack 0
 18613  004D86                     i2___ftsub:
 18614                           	opt stack 20
 18615                           
 18616                           ;incstack = 0
 18617  004D86  5044               	movf	i2___ftsub@f2,w,c
 18618  004D88  1045               	iorwf	i2___ftsub@f2+1,w,c
 18619  004D8A  1046               	iorwf	i2___ftsub@f2+2,w,c
 18620  004D8C  B4D8               	btfsc	status,2,c
 18621  004D8E  D006               	goto	i2l4633
 18622  004D90  0E00               	movlw	0
 18623  004D92  1A44               	xorwf	i2___ftsub@f2,f,c
 18624  004D94  0E00               	movlw	0
 18625  004D96  1A45               	xorwf	i2___ftsub@f2+1,f,c
 18626  004D98  0E80               	movlw	128
 18627  004D9A  1A46               	xorwf	i2___ftsub@f2+2,f,c
 18628  004D9C                     i2l4633:
 18629  004D9C  C041  F035         	movff	i2___ftsub@f1,i2___ftadd@f1
 18630  004DA0  C042  F036         	movff	i2___ftsub@f1+1,i2___ftadd@f1+1
 18631  004DA4  C043  F037         	movff	i2___ftsub@f1+2,i2___ftadd@f1+2
 18632  004DA8  C044  F038         	movff	i2___ftsub@f2,i2___ftadd@f2
 18633  004DAC  C045  F039         	movff	i2___ftsub@f2+1,i2___ftadd@f2+1
 18634  004DB0  C046  F03A         	movff	i2___ftsub@f2+2,i2___ftadd@f2+2
 18635  004DB4  ECED  F015         	call	i2___ftadd	;wreg free
 18636  004DB8  C035  F041         	movff	?i2___ftadd,?i2___ftsub
 18637  004DBC  C036  F042         	movff	?i2___ftadd+1,?i2___ftsub+1
 18638  004DC0  C037  F043         	movff	?i2___ftadd+2,?i2___ftsub+2
 18639  004DC4  0012               	return	
 18640  004DC6                     __end_ofi2___ftsub:
 18641                           	opt stack 0
 18642                           pclatu	equ	0xFFB
 18643                           pclath	equ	0xFFA
 18644                           tblptru	equ	0xFF8
 18645                           tblptrh	equ	0xFF7
 18646                           tblptrl	equ	0xFF6
 18647                           tablat	equ	0xFF5
 18648                           prodh	equ	0xFF4
 18649                           prodl	equ	0xFF3
 18650                           intcon	equ	0xFF2
 18651                           intcon3	equ	0xFF0
 18652                           postinc0	equ	0xFEE
 18653                           fsr0h	equ	0xFEA
 18654                           fsr0l	equ	0xFE9
 18655                           wreg	equ	0xFE8
 18656                           plusw1	equ	0xFE3
 18657                           fsr1h	equ	0xFE2
 18658                           fsr1l	equ	0xFE1
 18659                           indf2	equ	0xFDF
 18660                           postinc2	equ	0xFDE
 18661                           postdec2	equ	0xFDD
 18662                           plusw2	equ	0xFDB
 18663                           fsr2h	equ	0xFDA
 18664                           fsr2l	equ	0xFD9
 18665                           status	equ	0xFD8
 18666                           
 18667 ;; *************** function i2___ftadd *****************
 18668 ;; Defined at:
 18669 ;;		line 86 in file "/opt/microchip/xc8/v1.41/sources/common/ftadd.c"
 18670 ;; Parameters:    Size  Location     Type
 18671 ;;  f1              3   52[COMRAM] float 
 18672 ;;  f2              3   55[COMRAM] float 
 18673 ;; Auto vars:     Size  Location     Type
 18674 ;;  __ftadd         1   63[COMRAM] unsigned char 
 18675 ;;  __ftadd         1   62[COMRAM] unsigned char 
 18676 ;;  __ftadd         1   61[COMRAM] unsigned char 
 18677 ;; Return value:  Size  Location     Type
 18678 ;;                  3   52[COMRAM] float 
 18679 ;; Registers used:
 18680 ;;		wreg, status,2, status,0, cstack
 18681 ;; Tracked objects:
 18682 ;;		On entry : 0/0
 18683 ;;		On exit  : 0/0
 18684 ;;		Unchanged: 0/0
 18685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18686 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18687 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18688 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18689 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18690 ;;Total ram usage:       12 bytes
 18691 ;; Hardware stack levels used:    1
 18692 ;; Hardware stack levels required when called:    1
 18693 ;; This function calls:
 18694 ;;		i2___ftpack
 18695 ;; This function is called by:
 18696 ;;		i2_printf
 18697 ;;		i2___ftsub
 18698 ;; This function uses a non-reentrant model
 18699 ;;
 18700                           
 18701                           	psect	text77
 18702  002BDA                     __ptext77:
 18703                           	opt stack 0
 18704  002BDA                     i2___ftadd:
 18705                           	opt stack 20
 18706                           
 18707                           ;incstack = 0
 18708  002BDA  C037  F03B         	movff	i2___ftadd@f1+2,??i2___ftadd
 18709  002BDE  6A3C               	clrf	(??i2___ftadd+1)& (0+255),c
 18710  002BE0  6A3D               	clrf	(??i2___ftadd+2)& (0+255),c
 18711  002BE2  3436               	rlcf	i2___ftadd@f1+1,w,c
 18712  002BE4  363B               	rlcf	??i2___ftadd& (0+255),f,c
 18713  002BE6  E301               	bnc	u372_41
 18714  002BE8  803C               	bsf	(??i2___ftadd+1)& (0+255),0,c
 18715  002BEA                     u372_41:
 18716  002BEA  503B               	movf	??i2___ftadd,w,c
 18717  002BEC  6E40               	movwf	i2___ftadd@exp1,c
 18718  002BEE  C03A  F03B         	movff	i2___ftadd@f2+2,??i2___ftadd
 18719  002BF2  6A3C               	clrf	(??i2___ftadd+1)& (0+255),c
 18720  002BF4  6A3D               	clrf	(??i2___ftadd+2)& (0+255),c
 18721  002BF6  3439               	rlcf	i2___ftadd@f2+1,w,c
 18722  002BF8  363B               	rlcf	??i2___ftadd& (0+255),f,c
 18723  002BFA  E301               	bnc	u373_41
 18724  002BFC  803C               	bsf	(??i2___ftadd+1)& (0+255),0,c
 18725  002BFE                     u373_41:
 18726  002BFE  503B               	movf	??i2___ftadd,w,c
 18727  002C00  6E3F               	movwf	i2___ftadd@exp2,c
 18728  002C02  5040               	movf	i2___ftadd@exp1,w,c
 18729  002C04  B4D8               	btfsc	status,2,c
 18730  002C06  D00B               	goto	i2l857
 18731  002C08  503F               	movf	i2___ftadd@exp2,w,c
 18732  002C0A  5C40               	subwf	i2___ftadd@exp1,w,c
 18733  002C0C  B0D8               	btfsc	status,0,c
 18734  002C0E  D00E               	goto	i2l4277
 18735  002C10  5040               	movf	i2___ftadd@exp1,w,c
 18736  002C12  0800               	sublw	0
 18737  002C14  243F               	addwf	i2___ftadd@exp2,w,c
 18738  002C16  6E3B               	movwf	??i2___ftadd& (0+255),c
 18739  002C18  0E18               	movlw	24
 18740  002C1A  643B               	cpfsgt	??i2___ftadd,c
 18741  002C1C  D007               	goto	i2l4277
 18742  002C1E                     i2l857:
 18743  002C1E  C038  F035         	movff	i2___ftadd@f2,?i2___ftadd
 18744  002C22  C039  F036         	movff	i2___ftadd@f2+1,?i2___ftadd+1
 18745  002C26  C03A  F037         	movff	i2___ftadd@f2+2,?i2___ftadd+2
 18746  002C2A  0012               	return	
 18747  002C2C                     i2l4277:
 18748  002C2C  503F               	movf	i2___ftadd@exp2,w,c
 18749  002C2E  B4D8               	btfsc	status,2,c
 18750  002C30  D00B               	goto	i2l861
 18751  002C32  5040               	movf	i2___ftadd@exp1,w,c
 18752  002C34  5C3F               	subwf	i2___ftadd@exp2,w,c
 18753  002C36  B0D8               	btfsc	status,0,c
 18754  002C38  D00E               	goto	i2l4283
 18755  002C3A  503F               	movf	i2___ftadd@exp2,w,c
 18756  002C3C  0800               	sublw	0
 18757  002C3E  2440               	addwf	i2___ftadd@exp1,w,c
 18758  002C40  6E3B               	movwf	??i2___ftadd& (0+255),c
 18759  002C42  0E18               	movlw	24
 18760  002C44  643B               	cpfsgt	??i2___ftadd,c
 18761  002C46  D007               	goto	i2l4283
 18762  002C48                     i2l861:
 18763  002C48  C035  F035         	movff	i2___ftadd@f1,?i2___ftadd
 18764  002C4C  C036  F036         	movff	i2___ftadd@f1+1,?i2___ftadd+1
 18765  002C50  C037  F037         	movff	i2___ftadd@f1+2,?i2___ftadd+2
 18766  002C54  0012               	return	
 18767  002C56                     i2l4283:
 18768  002C56  0E06               	movlw	6
 18769  002C58  6E3E               	movwf	i2___ftadd@sign,c
 18770  002C5A  BE37               	btfsc	i2___ftadd@f1+2,7,c
 18771  002C5C  8E3E               	bsf	i2___ftadd@sign,7,c
 18772  002C5E  BE3A               	btfsc	i2___ftadd@f2+2,7,c
 18773  002C60  8C3E               	bsf	i2___ftadd@sign,6,c
 18774  002C62  8E36               	bsf	i2___ftadd@f1+1,7,c
 18775  002C64  0EFF               	movlw	255
 18776  002C66  1635               	andwf	i2___ftadd@f1,f,c
 18777  002C68  0EFF               	movlw	255
 18778  002C6A  1636               	andwf	i2___ftadd@f1+1,f,c
 18779  002C6C  0E00               	movlw	0
 18780  002C6E  1637               	andwf	i2___ftadd@f1+2,f,c
 18781  002C70  8E39               	bsf	i2___ftadd@f2+1,7,c
 18782  002C72  0EFF               	movlw	255
 18783  002C74  1638               	andwf	i2___ftadd@f2,f,c
 18784  002C76  0EFF               	movlw	255
 18785  002C78  1639               	andwf	i2___ftadd@f2+1,f,c
 18786  002C7A  0E00               	movlw	0
 18787  002C7C  163A               	andwf	i2___ftadd@f2+2,f,c
 18788  002C7E  503F               	movf	i2___ftadd@exp2,w,c
 18789  002C80  5C40               	subwf	i2___ftadd@exp1,w,c
 18790  002C82  B0D8               	btfsc	status,0,c
 18791  002C84  D01B               	goto	i2l4309
 18792  002C86                     i2l4299:
 18793  002C86  90D8               	bcf	status,0,c
 18794  002C88  3638               	rlcf	i2___ftadd@f2,f,c
 18795  002C8A  3639               	rlcf	i2___ftadd@f2+1,f,c
 18796  002C8C  363A               	rlcf	i2___ftadd@f2+2,f,c
 18797  002C8E  063F               	decf	i2___ftadd@exp2,f,c
 18798  002C90  5040               	movf	i2___ftadd@exp1,w,c
 18799  002C92  183F               	xorwf	i2___ftadd@exp2,w,c
 18800  002C94  B4D8               	btfsc	status,2,c
 18801  002C96  D00D               	goto	i2l4307
 18802  002C98  063E               	decf	i2___ftadd@sign,f,c
 18803  002C9A  C03E  F03B         	movff	i2___ftadd@sign,??i2___ftadd
 18804  002C9E  0E07               	movlw	7
 18805  002CA0  163B               	andwf	??i2___ftadd,f,c
 18806  002CA2  B4D8               	btfsc	status,2,c
 18807  002CA4  D006               	goto	i2l4307
 18808  002CA6  D7EF               	goto	i2l4299
 18809  002CA8                     i2l4305:
 18810  002CA8  90D8               	bcf	status,0,c
 18811  002CAA  3237               	rrcf	i2___ftadd@f1+2,f,c
 18812  002CAC  3236               	rrcf	i2___ftadd@f1+1,f,c
 18813  002CAE  3235               	rrcf	i2___ftadd@f1,f,c
 18814  002CB0  2A40               	incf	i2___ftadd@exp1,f,c
 18815  002CB2                     i2l4307:
 18816  002CB2  503F               	movf	i2___ftadd@exp2,w,c
 18817  002CB4  1840               	xorwf	i2___ftadd@exp1,w,c
 18818  002CB6  B4D8               	btfsc	status,2,c
 18819  002CB8  D01F               	goto	i2l872
 18820  002CBA  D7F6               	goto	i2l4305
 18821  002CBC                     i2l4309:
 18822  002CBC  5040               	movf	i2___ftadd@exp1,w,c
 18823  002CBE  5C3F               	subwf	i2___ftadd@exp2,w,c
 18824  002CC0  B0D8               	btfsc	status,0,c
 18825  002CC2  D01A               	goto	i2l872
 18826  002CC4                     i2l4311:
 18827  002CC4  90D8               	bcf	status,0,c
 18828  002CC6  3635               	rlcf	i2___ftadd@f1,f,c
 18829  002CC8  3636               	rlcf	i2___ftadd@f1+1,f,c
 18830  002CCA  3637               	rlcf	i2___ftadd@f1+2,f,c
 18831  002CCC  0640               	decf	i2___ftadd@exp1,f,c
 18832  002CCE  5040               	movf	i2___ftadd@exp1,w,c
 18833  002CD0  183F               	xorwf	i2___ftadd@exp2,w,c
 18834  002CD2  B4D8               	btfsc	status,2,c
 18835  002CD4  D00D               	goto	i2l4319
 18836  002CD6  063E               	decf	i2___ftadd@sign,f,c
 18837  002CD8  C03E  F03B         	movff	i2___ftadd@sign,??i2___ftadd
 18838  002CDC  0E07               	movlw	7
 18839  002CDE  163B               	andwf	??i2___ftadd,f,c
 18840  002CE0  B4D8               	btfsc	status,2,c
 18841  002CE2  D006               	goto	i2l4319
 18842  002CE4  D7EF               	goto	i2l4311
 18843  002CE6                     i2l4317:
 18844  002CE6  90D8               	bcf	status,0,c
 18845  002CE8  323A               	rrcf	i2___ftadd@f2+2,f,c
 18846  002CEA  3239               	rrcf	i2___ftadd@f2+1,f,c
 18847  002CEC  3238               	rrcf	i2___ftadd@f2,f,c
 18848  002CEE  2A3F               	incf	i2___ftadd@exp2,f,c
 18849  002CF0                     i2l4319:
 18850  002CF0  503F               	movf	i2___ftadd@exp2,w,c
 18851  002CF2  1840               	xorwf	i2___ftadd@exp1,w,c
 18852  002CF4  A4D8               	btfss	status,2,c
 18853  002CF6  D7F7               	goto	i2l4317
 18854  002CF8                     i2l872:
 18855  002CF8  AE3E               	btfss	i2___ftadd@sign,7,c
 18856  002CFA  D00C               	goto	i2l881
 18857  002CFC  0EFF               	movlw	255
 18858  002CFE  1A35               	xorwf	i2___ftadd@f1,f,c
 18859  002D00  0EFF               	movlw	255
 18860  002D02  1A36               	xorwf	i2___ftadd@f1+1,f,c
 18861  002D04  0EFF               	movlw	255
 18862  002D06  1A37               	xorwf	i2___ftadd@f1+2,f,c
 18863  002D08  0E01               	movlw	1
 18864  002D0A  2635               	addwf	i2___ftadd@f1,f,c
 18865  002D0C  0E00               	movlw	0
 18866  002D0E  2236               	addwfc	i2___ftadd@f1+1,f,c
 18867  002D10  0E00               	movlw	0
 18868  002D12  2237               	addwfc	i2___ftadd@f1+2,f,c
 18869  002D14                     i2l881:
 18870  002D14  AC3E               	btfss	i2___ftadd@sign,6,c
 18871  002D16  D00C               	goto	i2l4325
 18872  002D18  0EFF               	movlw	255
 18873  002D1A  1A38               	xorwf	i2___ftadd@f2,f,c
 18874  002D1C  0EFF               	movlw	255
 18875  002D1E  1A39               	xorwf	i2___ftadd@f2+1,f,c
 18876  002D20  0EFF               	movlw	255
 18877  002D22  1A3A               	xorwf	i2___ftadd@f2+2,f,c
 18878  002D24  0E01               	movlw	1
 18879  002D26  2638               	addwf	i2___ftadd@f2,f,c
 18880  002D28  0E00               	movlw	0
 18881  002D2A  2239               	addwfc	i2___ftadd@f2+1,f,c
 18882  002D2C  0E00               	movlw	0
 18883  002D2E  223A               	addwfc	i2___ftadd@f2+2,f,c
 18884  002D30                     i2l4325:
 18885  002D30  0E00               	movlw	0
 18886  002D32  6E3E               	movwf	i2___ftadd@sign,c
 18887  002D34  5035               	movf	i2___ftadd@f1,w,c
 18888  002D36  2638               	addwf	i2___ftadd@f2,f,c
 18889  002D38  5036               	movf	i2___ftadd@f1+1,w,c
 18890  002D3A  2239               	addwfc	i2___ftadd@f2+1,f,c
 18891  002D3C  5037               	movf	i2___ftadd@f1+2,w,c
 18892  002D3E  223A               	addwfc	i2___ftadd@f2+2,f,c
 18893  002D40  AE3A               	btfss	i2___ftadd@f2+2,7,c
 18894  002D42  D00E               	goto	i2l4335
 18895  002D44  0EFF               	movlw	255
 18896  002D46  1A38               	xorwf	i2___ftadd@f2,f,c
 18897  002D48  0EFF               	movlw	255
 18898  002D4A  1A39               	xorwf	i2___ftadd@f2+1,f,c
 18899  002D4C  0EFF               	movlw	255
 18900  002D4E  1A3A               	xorwf	i2___ftadd@f2+2,f,c
 18901  002D50  0E01               	movlw	1
 18902  002D52  2638               	addwf	i2___ftadd@f2,f,c
 18903  002D54  0E00               	movlw	0
 18904  002D56  2239               	addwfc	i2___ftadd@f2+1,f,c
 18905  002D58  0E00               	movlw	0
 18906  002D5A  223A               	addwfc	i2___ftadd@f2+2,f,c
 18907  002D5C  0E01               	movlw	1
 18908  002D5E  6E3E               	movwf	i2___ftadd@sign,c
 18909  002D60                     i2l4335:
 18910  002D60  C038  F001         	movff	i2___ftadd@f2,i2___ftpack@arg
 18911  002D64  C039  F002         	movff	i2___ftadd@f2+1,i2___ftpack@arg+1
 18912  002D68  C03A  F003         	movff	i2___ftadd@f2+2,i2___ftpack@arg+2
 18913  002D6C  C040  F004         	movff	i2___ftadd@exp1,i2___ftpack@exp
 18914  002D70  C03E  F005         	movff	i2___ftadd@sign,i2___ftpack@sign
 18915  002D74  ECCB  F021         	call	i2___ftpack	;wreg free
 18916  002D78  C001  F035         	movff	?i2___ftpack,?i2___ftadd
 18917  002D7C  C002  F036         	movff	?i2___ftpack+1,?i2___ftadd+1
 18918  002D80  C003  F037         	movff	?i2___ftpack+2,?i2___ftadd+2
 18919  002D84  0012               	return	
 18920  002D86                     __end_ofi2___ftadd:
 18921                           	opt stack 0
 18922                           pclatu	equ	0xFFB
 18923                           pclath	equ	0xFFA
 18924                           tblptru	equ	0xFF8
 18925                           tblptrh	equ	0xFF7
 18926                           tblptrl	equ	0xFF6
 18927                           tablat	equ	0xFF5
 18928                           prodh	equ	0xFF4
 18929                           prodl	equ	0xFF3
 18930                           intcon	equ	0xFF2
 18931                           intcon3	equ	0xFF0
 18932                           postinc0	equ	0xFEE
 18933                           fsr0h	equ	0xFEA
 18934                           fsr0l	equ	0xFE9
 18935                           wreg	equ	0xFE8
 18936                           plusw1	equ	0xFE3
 18937                           fsr1h	equ	0xFE2
 18938                           fsr1l	equ	0xFE1
 18939                           indf2	equ	0xFDF
 18940                           postinc2	equ	0xFDE
 18941                           postdec2	equ	0xFDD
 18942                           plusw2	equ	0xFDB
 18943                           fsr2h	equ	0xFDA
 18944                           fsr2l	equ	0xFD9
 18945                           status	equ	0xFD8
 18946                           
 18947 ;; *************** function i2___ftpack *****************
 18948 ;; Defined at:
 18949 ;;		line 62 in file "/opt/microchip/xc8/v1.41/sources/common/float.c"
 18950 ;; Parameters:    Size  Location     Type
 18951 ;;  arg             3    0[COMRAM] unsigned um
 18952 ;;  exp             1    3[COMRAM] unsigned char 
 18953 ;;  sign            1    4[COMRAM] unsigned char 
 18954 ;; Auto vars:     Size  Location     Type
 18955 ;;		None
 18956 ;; Return value:  Size  Location     Type
 18957 ;;                  3    0[COMRAM] float 
 18958 ;; Registers used:
 18959 ;;		wreg, status,2, status,0
 18960 ;; Tracked objects:
 18961 ;;		On entry : 0/0
 18962 ;;		On exit  : 0/0
 18963 ;;		Unchanged: 0/0
 18964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18965 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18967 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18968 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18969 ;;Total ram usage:        8 bytes
 18970 ;; Hardware stack levels used:    1
 18971 ;; This function calls:
 18972 ;;		Nothing
 18973 ;; This function is called by:
 18974 ;;		___awtoft
 18975 ;;		___ftdiv
 18976 ;;		i2___ftadd
 18977 ;;		i2___ftmul
 18978 ;;		i2___lltoft
 18979 ;; This function uses a non-reentrant model
 18980 ;;
 18981                           
 18982                           	psect	text78
 18983  004396                     __ptext78:
 18984                           	opt stack 0
 18985  004396                     i2___ftpack:
 18986                           	opt stack 20
 18987                           
 18988                           ;incstack = 0
 18989  004396  5004               	movf	i2___ftpack@exp,w,c
 18990  004398  B4D8               	btfsc	status,2,c
 18991  00439A  D005               	goto	i2l4133
 18992  00439C  5001               	movf	i2___ftpack@arg,w,c
 18993  00439E  1002               	iorwf	i2___ftpack@arg+1,w,c
 18994  0043A0  1003               	iorwf	i2___ftpack@arg+2,w,c
 18995  0043A2  A4D8               	btfss	status,2,c
 18996  0043A4  D00C               	goto	i2l4139
 18997  0043A6                     i2l4133:
 18998  0043A6  0E00               	movlw	0
 18999  0043A8  6E01               	movwf	?i2___ftpack,c
 19000  0043AA  0E00               	movlw	0
 19001  0043AC  6E02               	movwf	?i2___ftpack+1,c
 19002  0043AE  0E00               	movlw	0
 19003  0043B0  6E03               	movwf	?i2___ftpack+2,c
 19004  0043B2  0012               	return	
 19005  0043B4                     i2l4137:
 19006  0043B4  2A04               	incf	i2___ftpack@exp,f,c
 19007  0043B6  90D8               	bcf	status,0,c
 19008  0043B8  3203               	rrcf	i2___ftpack@arg+2,f,c
 19009  0043BA  3202               	rrcf	i2___ftpack@arg+1,f,c
 19010  0043BC  3201               	rrcf	i2___ftpack@arg,f,c
 19011  0043BE                     i2l4139:
 19012  0043BE  0E00               	movlw	0
 19013  0043C0  1401               	andwf	i2___ftpack@arg,w,c
 19014  0043C2  6E06               	movwf	??i2___ftpack& (0+255),c
 19015  0043C4  0E00               	movlw	0
 19016  0043C6  1402               	andwf	i2___ftpack@arg+1,w,c
 19017  0043C8  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 19018  0043CA  0EFE               	movlw	254
 19019  0043CC  1403               	andwf	i2___ftpack@arg+2,w,c
 19020  0043CE  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 19021  0043D0  5006               	movf	??i2___ftpack,w,c
 19022  0043D2  1007               	iorwf	??i2___ftpack+1,w,c
 19023  0043D4  1008               	iorwf	??i2___ftpack+2,w,c
 19024  0043D6  B4D8               	btfsc	status,2,c
 19025  0043D8  D00C               	goto	i2l4145
 19026  0043DA  D7EC               	goto	i2l4137
 19027  0043DC                     i2l4141:
 19028  0043DC  2A04               	incf	i2___ftpack@exp,f,c
 19029  0043DE  0E01               	movlw	1
 19030  0043E0  2601               	addwf	i2___ftpack@arg,f,c
 19031  0043E2  0E00               	movlw	0
 19032  0043E4  2202               	addwfc	i2___ftpack@arg+1,f,c
 19033  0043E6  0E00               	movlw	0
 19034  0043E8  2203               	addwfc	i2___ftpack@arg+2,f,c
 19035  0043EA  90D8               	bcf	status,0,c
 19036  0043EC  3203               	rrcf	i2___ftpack@arg+2,f,c
 19037  0043EE  3202               	rrcf	i2___ftpack@arg+1,f,c
 19038  0043F0  3201               	rrcf	i2___ftpack@arg,f,c
 19039  0043F2                     i2l4145:
 19040  0043F2  0E00               	movlw	0
 19041  0043F4  1401               	andwf	i2___ftpack@arg,w,c
 19042  0043F6  6E06               	movwf	??i2___ftpack& (0+255),c
 19043  0043F8  0E00               	movlw	0
 19044  0043FA  1402               	andwf	i2___ftpack@arg+1,w,c
 19045  0043FC  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 19046  0043FE  0EFF               	movlw	255
 19047  004400  1403               	andwf	i2___ftpack@arg+2,w,c
 19048  004402  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 19049  004404  5006               	movf	??i2___ftpack,w,c
 19050  004406  1007               	iorwf	??i2___ftpack+1,w,c
 19051  004408  1008               	iorwf	??i2___ftpack+2,w,c
 19052  00440A  B4D8               	btfsc	status,2,c
 19053  00440C  D006               	goto	i2l4149
 19054  00440E  D7E6               	goto	i2l4141
 19055  004410                     i2l4147:
 19056  004410  0604               	decf	i2___ftpack@exp,f,c
 19057  004412  90D8               	bcf	status,0,c
 19058  004414  3601               	rlcf	i2___ftpack@arg,f,c
 19059  004416  3602               	rlcf	i2___ftpack@arg+1,f,c
 19060  004418  3603               	rlcf	i2___ftpack@arg+2,f,c
 19061  00441A                     i2l4149:
 19062  00441A  BE02               	btfsc	i2___ftpack@arg+1,7,c
 19063  00441C  D003               	goto	i2l834
 19064  00441E  0E02               	movlw	2
 19065  004420  6004               	cpfslt	i2___ftpack@exp,c
 19066  004422  D7F6               	goto	i2l4147
 19067  004424                     i2l834:
 19068  004424  A004               	btfss	i2___ftpack@exp,0,c
 19069  004426  9E02               	bcf	i2___ftpack@arg+1,7,c
 19070  004428  90D8               	bcf	status,0,c
 19071  00442A  3204               	rrcf	i2___ftpack@exp,f,c
 19072  00442C  5004               	movf	i2___ftpack@exp,w,c
 19073  00442E  1203               	iorwf	i2___ftpack@arg+2,f,c
 19074  004430  5005               	movf	i2___ftpack@sign,w,c
 19075  004432  A4D8               	btfss	status,2,c
 19076  004434  8E03               	bsf	i2___ftpack@arg+2,7,c
 19077  004436  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 19078  00443A  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 19079  00443E  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 19080  004442  0012               	return	
 19081  004444                     __end_ofi2___ftpack:
 19082                           	opt stack 0
 19083                           pclatu	equ	0xFFB
 19084                           pclath	equ	0xFFA
 19085                           tblptru	equ	0xFF8
 19086                           tblptrh	equ	0xFF7
 19087                           tblptrl	equ	0xFF6
 19088                           tablat	equ	0xFF5
 19089                           prodh	equ	0xFF4
 19090                           prodl	equ	0xFF3
 19091                           intcon	equ	0xFF2
 19092                           intcon3	equ	0xFF0
 19093                           postinc0	equ	0xFEE
 19094                           fsr0h	equ	0xFEA
 19095                           fsr0l	equ	0xFE9
 19096                           wreg	equ	0xFE8
 19097                           plusw1	equ	0xFE3
 19098                           fsr1h	equ	0xFE2
 19099                           fsr1l	equ	0xFE1
 19100                           indf2	equ	0xFDF
 19101                           postinc2	equ	0xFDE
 19102                           postdec2	equ	0xFDD
 19103                           plusw2	equ	0xFDB
 19104                           fsr2h	equ	0xFDA
 19105                           fsr2l	equ	0xFD9
 19106                           status	equ	0xFD8
 19107                           
 19108 ;; *************** function i2___ftneg *****************
 19109 ;; Defined at:
 19110 ;;		line 15 in file "/opt/microchip/xc8/v1.41/sources/common/ftneg.c"
 19111 ;; Parameters:    Size  Location     Type
 19112 ;;  f1              3    0[COMRAM] float 
 19113 ;; Auto vars:     Size  Location     Type
 19114 ;;		None
 19115 ;; Return value:  Size  Location     Type
 19116 ;;                  3    0[COMRAM] float 
 19117 ;; Registers used:
 19118 ;;		wreg, status,2, status,0
 19119 ;; Tracked objects:
 19120 ;;		On entry : 0/0
 19121 ;;		On exit  : 0/0
 19122 ;;		Unchanged: 0/0
 19123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19124 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19127 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19128 ;;Total ram usage:        3 bytes
 19129 ;; Hardware stack levels used:    1
 19130 ;; This function calls:
 19131 ;;		Nothing
 19132 ;; This function is called by:
 19133 ;;		i2_printf
 19134 ;; This function uses a non-reentrant model
 19135 ;;
 19136                           
 19137                           	psect	text79
 19138  004FEA                     __ptext79:
 19139                           	opt stack 0
 19140  004FEA                     i2___ftneg:
 19141                           	opt stack 22
 19142                           
 19143                           ;incstack = 0
 19144  004FEA  5001               	movf	i2___ftneg@f1,w,c
 19145  004FEC  1002               	iorwf	i2___ftneg@f1+1,w,c
 19146  004FEE  1003               	iorwf	i2___ftneg@f1+2,w,c
 19147  004FF0  B4D8               	btfsc	status,2,c
 19148  004FF2  D006               	goto	i2l931
 19149  004FF4  0E00               	movlw	0
 19150  004FF6  1A01               	xorwf	i2___ftneg@f1,f,c
 19151  004FF8  0E00               	movlw	0
 19152  004FFA  1A02               	xorwf	i2___ftneg@f1+1,f,c
 19153  004FFC  0E80               	movlw	128
 19154  004FFE  1A03               	xorwf	i2___ftneg@f1+2,f,c
 19155  005000                     i2l931:
 19156  005000  C001  F001         	movff	i2___ftneg@f1,?i2___ftneg
 19157  005004  C002  F002         	movff	i2___ftneg@f1+1,?i2___ftneg+1
 19158  005008  C003  F003         	movff	i2___ftneg@f1+2,?i2___ftneg+2
 19159  00500C  0012               	return		;funcret
 19160  00500E                     __end_ofi2___ftneg:
 19161                           	opt stack 0
 19162                           pclatu	equ	0xFFB
 19163                           pclath	equ	0xFFA
 19164                           tblptru	equ	0xFF8
 19165                           tblptrh	equ	0xFF7
 19166                           tblptrl	equ	0xFF6
 19167                           tablat	equ	0xFF5
 19168                           prodh	equ	0xFF4
 19169                           prodl	equ	0xFF3
 19170                           intcon	equ	0xFF2
 19171                           intcon3	equ	0xFF0
 19172                           postinc0	equ	0xFEE
 19173                           fsr0h	equ	0xFEA
 19174                           fsr0l	equ	0xFE9
 19175                           wreg	equ	0xFE8
 19176                           plusw1	equ	0xFE3
 19177                           fsr1h	equ	0xFE2
 19178                           fsr1l	equ	0xFE1
 19179                           indf2	equ	0xFDF
 19180                           postinc2	equ	0xFDE
 19181                           postdec2	equ	0xFDD
 19182                           plusw2	equ	0xFDB
 19183                           fsr2h	equ	0xFDA
 19184                           fsr2l	equ	0xFD9
 19185                           status	equ	0xFD8
 19186                           
 19187 ;; *************** function i2___ftge *****************
 19188 ;; Defined at:
 19189 ;;		line 4 in file "/opt/microchip/xc8/v1.41/sources/common/ftge.c"
 19190 ;; Parameters:    Size  Location     Type
 19191 ;;  ff1             3   42[COMRAM] float 
 19192 ;;  ff2             3   45[COMRAM] float 
 19193 ;; Auto vars:     Size  Location     Type
 19194 ;;		None
 19195 ;; Return value:  Size  Location     Type
 19196 ;;		None               void
 19197 ;; Registers used:
 19198 ;;		wreg, status,2, status,0
 19199 ;; Tracked objects:
 19200 ;;		On entry : 0/0
 19201 ;;		On exit  : 0/0
 19202 ;;		Unchanged: 0/0
 19203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19204 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19206 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19207 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19208 ;;Total ram usage:        9 bytes
 19209 ;; Hardware stack levels used:    1
 19210 ;; This function calls:
 19211 ;;		Nothing
 19212 ;; This function is called by:
 19213 ;;		_checkV
 19214 ;;		i2_printf
 19215 ;; This function uses a non-reentrant model
 19216 ;;
 19217                           
 19218                           	psect	text80
 19219  004580                     __ptext80:
 19220                           	opt stack 0
 19221  004580                     i2___ftge:
 19222                           	opt stack 22
 19223                           
 19224                           ;incstack = 0
 19225  004580  AE2D               	btfss	i2___ftge@ff1+2,7,c
 19226  004582  D016               	goto	i2l4611
 19227  004584  C02B  F031         	movff	i2___ftge@ff1,??i2___ftge
 19228  004588  C02C  F032         	movff	i2___ftge@ff1+1,??i2___ftge+1
 19229  00458C  C02D  F033         	movff	i2___ftge@ff1+2,??i2___ftge+2
 19230  004590  1E31               	comf	??i2___ftge,f,c
 19231  004592  1E32               	comf	??i2___ftge+1,f,c
 19232  004594  1E33               	comf	??i2___ftge+2,f,c
 19233  004596  2A31               	incf	??i2___ftge,f,c
 19234  004598  0E00               	movlw	0
 19235  00459A  2232               	addwfc	??i2___ftge+1,f,c
 19236  00459C  2233               	addwfc	??i2___ftge+2,f,c
 19237  00459E  0E00               	movlw	0
 19238  0045A0  2431               	addwf	??i2___ftge,w,c
 19239  0045A2  6E2B               	movwf	i2___ftge@ff1,c
 19240  0045A4  0E00               	movlw	0
 19241  0045A6  2032               	addwfc	??i2___ftge+1,w,c
 19242  0045A8  6E2C               	movwf	i2___ftge@ff1+1,c
 19243  0045AA  0E80               	movlw	128
 19244  0045AC  2033               	addwfc	??i2___ftge+2,w,c
 19245  0045AE  6E2D               	movwf	i2___ftge@ff1+2,c
 19246  0045B0                     i2l4611:
 19247  0045B0  AE30               	btfss	i2___ftge@ff2+2,7,c
 19248  0045B2  D016               	goto	i2l4615
 19249  0045B4  C02E  F031         	movff	i2___ftge@ff2,??i2___ftge
 19250  0045B8  C02F  F032         	movff	i2___ftge@ff2+1,??i2___ftge+1
 19251  0045BC  C030  F033         	movff	i2___ftge@ff2+2,??i2___ftge+2
 19252  0045C0  1E31               	comf	??i2___ftge,f,c
 19253  0045C2  1E32               	comf	??i2___ftge+1,f,c
 19254  0045C4  1E33               	comf	??i2___ftge+2,f,c
 19255  0045C6  2A31               	incf	??i2___ftge,f,c
 19256  0045C8  0E00               	movlw	0
 19257  0045CA  2232               	addwfc	??i2___ftge+1,f,c
 19258  0045CC  2233               	addwfc	??i2___ftge+2,f,c
 19259  0045CE  0E00               	movlw	0
 19260  0045D0  2431               	addwf	??i2___ftge,w,c
 19261  0045D2  6E2E               	movwf	i2___ftge@ff2,c
 19262  0045D4  0E00               	movlw	0
 19263  0045D6  2032               	addwfc	??i2___ftge+1,w,c
 19264  0045D8  6E2F               	movwf	i2___ftge@ff2+1,c
 19265  0045DA  0E80               	movlw	128
 19266  0045DC  2033               	addwfc	??i2___ftge+2,w,c
 19267  0045DE  6E30               	movwf	i2___ftge@ff2+2,c
 19268  0045E0                     i2l4615:
 19269  0045E0  0E00               	movlw	0
 19270  0045E2  1A2B               	xorwf	i2___ftge@ff1,f,c
 19271  0045E4  0E00               	movlw	0
 19272  0045E6  1A2C               	xorwf	i2___ftge@ff1+1,f,c
 19273  0045E8  0E80               	movlw	128
 19274  0045EA  1A2D               	xorwf	i2___ftge@ff1+2,f,c
 19275  0045EC  0E00               	movlw	0
 19276  0045EE  1A2E               	xorwf	i2___ftge@ff2,f,c
 19277  0045F0  0E00               	movlw	0
 19278  0045F2  1A2F               	xorwf	i2___ftge@ff2+1,f,c
 19279  0045F4  0E80               	movlw	128
 19280  0045F6  1A30               	xorwf	i2___ftge@ff2+2,f,c
 19281  0045F8  502E               	movf	i2___ftge@ff2,w,c
 19282  0045FA  5C2B               	subwf	i2___ftge@ff1,w,c
 19283  0045FC  502F               	movf	i2___ftge@ff2+1,w,c
 19284  0045FE  582C               	subwfb	i2___ftge@ff1+1,w,c
 19285  004600  5030               	movf	i2___ftge@ff2+2,w,c
 19286  004602  582D               	subwfb	i2___ftge@ff1+2,w,c
 19287  004604  B0D8               	btfsc	status,0,c
 19288  004606  D002               	goto	i2l4621
 19289  004608  90D8               	bcf	status,0,c
 19290  00460A  0012               	return	
 19291  00460C                     i2l4621:
 19292  00460C  80D8               	bsf	status,0,c
 19293  00460E  0012               	return	
 19294  004610                     __end_ofi2___ftge:
 19295                           	opt stack 0
 19296                           pclatu	equ	0xFFB
 19297                           pclath	equ	0xFFA
 19298                           tblptru	equ	0xFF8
 19299                           tblptrh	equ	0xFF7
 19300                           tblptrl	equ	0xFF6
 19301                           tablat	equ	0xFF5
 19302                           prodh	equ	0xFF4
 19303                           prodl	equ	0xFF3
 19304                           intcon	equ	0xFF2
 19305                           intcon3	equ	0xFF0
 19306                           postinc0	equ	0xFEE
 19307                           fsr0h	equ	0xFEA
 19308                           fsr0l	equ	0xFE9
 19309                           wreg	equ	0xFE8
 19310                           plusw1	equ	0xFE3
 19311                           fsr1h	equ	0xFE2
 19312                           fsr1l	equ	0xFE1
 19313                           indf2	equ	0xFDF
 19314                           postinc2	equ	0xFDE
 19315                           postdec2	equ	0xFDD
 19316                           plusw2	equ	0xFDB
 19317                           fsr2h	equ	0xFDA
 19318                           fsr2l	equ	0xFD9
 19319                           status	equ	0xFD8
 19320                           
 19321 ;; *************** function i2_line1 *****************
 19322 ;; Defined at:
 19323 ;;		line 58 in file "lcd.c"
 19324 ;; Parameters:    Size  Location     Type
 19325 ;;		None
 19326 ;; Auto vars:     Size  Location     Type
 19327 ;;		None
 19328 ;; Return value:  Size  Location     Type
 19329 ;;                  1    wreg      void 
 19330 ;; Registers used:
 19331 ;;		wreg, status,2, status,0, cstack
 19332 ;; Tracked objects:
 19333 ;;		On entry : 0/0
 19334 ;;		On exit  : 0/0
 19335 ;;		Unchanged: 0/0
 19336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19340 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19341 ;;Total ram usage:        0 bytes
 19342 ;; Hardware stack levels used:    1
 19343 ;; Hardware stack levels required when called:    2
 19344 ;; This function calls:
 19345 ;;		i2_lcdInst
 19346 ;; This function is called by:
 19347 ;;		_simulate
 19348 ;;		_showInfo
 19349 ;;		_CCW90
 19350 ;;		_checkV
 19351 ;;		_PermLog
 19352 ;; This function uses a non-reentrant model
 19353 ;;
 19354                           
 19355                           	psect	text81
 19356  005172                     __ptext81:
 19357                           	opt stack 0
 19358  005172                     i2_line1:
 19359                           	opt stack 21
 19360                           
 19361                           ;lcd.c: 59: lcdInst(0b11000000);
 19362                           
 19363                           ;incstack = 0
 19364  005172  0EC0               	movlw	192
 19365  005174  EC91  F028         	call	i2_lcdInst
 19366  005178  0012               	return		;funcret
 19367  00517A                     __end_ofi2_line1:
 19368                           	opt stack 0
 19369                           pclatu	equ	0xFFB
 19370                           pclath	equ	0xFFA
 19371                           tblptru	equ	0xFF8
 19372                           tblptrh	equ	0xFF7
 19373                           tblptrl	equ	0xFF6
 19374                           tablat	equ	0xFF5
 19375                           prodh	equ	0xFF4
 19376                           prodl	equ	0xFF3
 19377                           intcon	equ	0xFF2
 19378                           intcon3	equ	0xFF0
 19379                           postinc0	equ	0xFEE
 19380                           fsr0h	equ	0xFEA
 19381                           fsr0l	equ	0xFE9
 19382                           wreg	equ	0xFE8
 19383                           plusw1	equ	0xFE3
 19384                           fsr1h	equ	0xFE2
 19385                           fsr1l	equ	0xFE1
 19386                           indf2	equ	0xFDF
 19387                           postinc2	equ	0xFDE
 19388                           postdec2	equ	0xFDD
 19389                           plusw2	equ	0xFDB
 19390                           fsr2h	equ	0xFDA
 19391                           fsr2l	equ	0xFD9
 19392                           status	equ	0xFD8
 19393                           
 19394 ;; *************** function i2_line0 *****************
 19395 ;; Defined at:
 19396 ;;		line 54 in file "lcd.c"
 19397 ;; Parameters:    Size  Location     Type
 19398 ;;		None
 19399 ;; Auto vars:     Size  Location     Type
 19400 ;;		None
 19401 ;; Return value:  Size  Location     Type
 19402 ;;                  1    wreg      void 
 19403 ;; Registers used:
 19404 ;;		wreg, status,2, status,0, cstack
 19405 ;; Tracked objects:
 19406 ;;		On entry : 0/0
 19407 ;;		On exit  : 0/0
 19408 ;;		Unchanged: 0/0
 19409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19413 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19414 ;;Total ram usage:        0 bytes
 19415 ;; Hardware stack levels used:    1
 19416 ;; Hardware stack levels required when called:    2
 19417 ;; This function calls:
 19418 ;;		i2_lcdInst
 19419 ;; This function is called by:
 19420 ;;		_simulate
 19421 ;;		_showInfo
 19422 ;;		_CW90
 19423 ;;		_stopMoving
 19424 ;;		_checkAA
 19425 ;;		_checkC
 19426 ;;		_check9
 19427 ;;		_PermLog
 19428 ;; This function uses a non-reentrant model
 19429 ;;
 19430                           
 19431                           	psect	text82
 19432  00517A                     __ptext82:
 19433                           	opt stack 0
 19434  00517A                     i2_line0:
 19435                           	opt stack 21
 19436                           
 19437                           ;lcd.c: 55: lcdInst(0b10000000);
 19438                           
 19439                           ;incstack = 0
 19440  00517A  0E80               	movlw	128
 19441  00517C  EC91  F028         	call	i2_lcdInst
 19442  005180  0012               	return		;funcret
 19443  005182                     __end_ofi2_line0:
 19444                           	opt stack 0
 19445                           pclatu	equ	0xFFB
 19446                           pclath	equ	0xFFA
 19447                           tblptru	equ	0xFF8
 19448                           tblptrh	equ	0xFF7
 19449                           tblptrl	equ	0xFF6
 19450                           tablat	equ	0xFF5
 19451                           prodh	equ	0xFF4
 19452                           prodl	equ	0xFF3
 19453                           intcon	equ	0xFF2
 19454                           intcon3	equ	0xFF0
 19455                           postinc0	equ	0xFEE
 19456                           fsr0h	equ	0xFEA
 19457                           fsr0l	equ	0xFE9
 19458                           wreg	equ	0xFE8
 19459                           plusw1	equ	0xFE3
 19460                           fsr1h	equ	0xFE2
 19461                           fsr1l	equ	0xFE1
 19462                           indf2	equ	0xFDF
 19463                           postinc2	equ	0xFDE
 19464                           postdec2	equ	0xFDD
 19465                           plusw2	equ	0xFDB
 19466                           fsr2h	equ	0xFDA
 19467                           fsr2l	equ	0xFD9
 19468                           status	equ	0xFD8
 19469                           
 19470 ;; *************** function i2_lcdInst *****************
 19471 ;; Defined at:
 19472 ;;		line 20 in file "lcd.c"
 19473 ;; Parameters:    Size  Location     Type
 19474 ;;  data            1    wreg     unsigned char 
 19475 ;; Auto vars:     Size  Location     Type
 19476 ;;  data            1    2[COMRAM] unsigned char 
 19477 ;; Return value:  Size  Location     Type
 19478 ;;                  1    wreg      void 
 19479 ;; Registers used:
 19480 ;;		wreg, status,2, status,0, cstack
 19481 ;; Tracked objects:
 19482 ;;		On entry : 0/0
 19483 ;;		On exit  : 0/0
 19484 ;;		Unchanged: 0/0
 19485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19487 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19489 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19490 ;;Total ram usage:        1 bytes
 19491 ;; Hardware stack levels used:    1
 19492 ;; Hardware stack levels required when called:    1
 19493 ;; This function calls:
 19494 ;;		i2_lcdNibble
 19495 ;; This function is called by:
 19496 ;;		i2_line0
 19497 ;;		i2_line1
 19498 ;; This function uses a non-reentrant model
 19499 ;;
 19500                           
 19501                           	psect	text83
 19502  005122                     __ptext83:
 19503                           	opt stack 0
 19504  005122                     i2_lcdInst:
 19505                           	opt stack 21
 19506                           
 19507                           ;incstack = 0
 19508                           ;i2lcdInst@data stored from wreg
 19509  005122  6E03               	movwf	i2lcdInst@data,c
 19510                           
 19511                           ;lcd.c: 21: LATDbits.LATD2 = 0;
 19512  005124  948C               	bcf	3980,2,c	;volatile
 19513                           
 19514                           ;lcd.c: 22: lcdNibble(data);
 19515  005126  5003               	movf	i2lcdInst@data,w,c
 19516  005128  EC06  F026         	call	i2_lcdNibble
 19517  00512C  0012               	return		;funcret
 19518  00512E                     __end_ofi2_lcdInst:
 19519                           	opt stack 0
 19520                           pclatu	equ	0xFFB
 19521                           pclath	equ	0xFFA
 19522                           tblptru	equ	0xFF8
 19523                           tblptrh	equ	0xFF7
 19524                           tblptrl	equ	0xFF6
 19525                           tablat	equ	0xFF5
 19526                           prodh	equ	0xFF4
 19527                           prodl	equ	0xFF3
 19528                           intcon	equ	0xFF2
 19529                           intcon3	equ	0xFF0
 19530                           postinc0	equ	0xFEE
 19531                           fsr0h	equ	0xFEA
 19532                           fsr0l	equ	0xFE9
 19533                           wreg	equ	0xFE8
 19534                           plusw1	equ	0xFE3
 19535                           fsr1h	equ	0xFE2
 19536                           fsr1l	equ	0xFE1
 19537                           indf2	equ	0xFDF
 19538                           postinc2	equ	0xFDE
 19539                           postdec2	equ	0xFDD
 19540                           plusw2	equ	0xFDB
 19541                           fsr2h	equ	0xFDA
 19542                           fsr2l	equ	0xFD9
 19543                           status	equ	0xFD8
 19544                           
 19545 ;; *************** function i2_lcdNibble *****************
 19546 ;; Defined at:
 19547 ;;		line 30 in file "lcd.c"
 19548 ;; Parameters:    Size  Location     Type
 19549 ;;  data            1    wreg     unsigned char 
 19550 ;; Auto vars:     Size  Location     Type
 19551 ;;  data            1    1[COMRAM] unsigned char 
 19552 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 19553 ;; Return value:  Size  Location     Type
 19554 ;;                  1    wreg      void 
 19555 ;; Registers used:
 19556 ;;		wreg, status,2, status,0
 19557 ;; Tracked objects:
 19558 ;;		On entry : 0/0
 19559 ;;		On exit  : 0/0
 19560 ;;		Unchanged: 0/0
 19561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19563 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19565 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19566 ;;Total ram usage:        2 bytes
 19567 ;; Hardware stack levels used:    1
 19568 ;; This function calls:
 19569 ;;		Nothing
 19570 ;; This function is called by:
 19571 ;;		i2_lcdInst
 19572 ;;		i2_putch
 19573 ;; This function uses a non-reentrant model
 19574 ;;
 19575                           
 19576                           	psect	text84
 19577  004C0C                     __ptext84:
 19578                           	opt stack 0
 19579  004C0C                     i2_lcdNibble:
 19580                           	opt stack 21
 19581                           
 19582                           ;incstack = 0
 19583                           ;i2lcdNibble@data stored from wreg
 19584  004C0C  6E02               	movwf	i2lcdNibble@data,c
 19585                           
 19586                           ;lcd.c: 32: char temp = data & 0xF0;
 19587  004C0E  5002               	movf	i2lcdNibble@data,w,c
 19588  004C10  0BF0               	andlw	240
 19589  004C12  6E01               	movwf	i2lcdNibble@temp,c
 19590                           
 19591                           ;lcd.c: 33: LATD = LATD & 0x0F;
 19592  004C14  508C               	movf	3980,w,c	;volatile
 19593  004C16  0B0F               	andlw	15
 19594  004C18  6E8C               	movwf	3980,c	;volatile
 19595                           
 19596                           ;lcd.c: 34: LATD = temp | LATD;
 19597  004C1A  5001               	movf	i2lcdNibble@temp,w,c
 19598  004C1C  108C               	iorwf	3980,w,c	;volatile
 19599  004C1E  6E8C               	movwf	3980,c	;volatile
 19600                           
 19601                           ;lcd.c: 36: LATDbits.LATD3 = 0;
 19602  004C20  968C               	bcf	3980,3,c	;volatile
 19603                           
 19604                           ;lcd.c: 37: _delay((unsigned long)((25)*(8000000/4000000.0)));
 19605  004C22  0E10               	movlw	16
 19606  004C24                     i2u860_47:
 19607  004C24  2EE8               	decfsz	wreg,f,c
 19608  004C26  D7FE               	bra	i2u860_47
 19609  004C28  D000               	nop2	
 19610                           
 19611                           ;lcd.c: 38: LATDbits.LATD3 = 1;
 19612  004C2A  868C               	bsf	3980,3,c	;volatile
 19613                           
 19614                           ;lcd.c: 39: _delay((unsigned long)((25)*(8000000/4000000.0)));
 19615  004C2C  0E10               	movlw	16
 19616  004C2E                     i2u861_47:
 19617  004C2E  2EE8               	decfsz	wreg,f,c
 19618  004C30  D7FE               	bra	i2u861_47
 19619  004C32  D000               	nop2	
 19620                           
 19621                           ;lcd.c: 41: data = data << 4;
 19622  004C34  3802               	swapf	i2lcdNibble@data,w,c
 19623  004C36  0BF0               	andlw	240
 19624  004C38  6E02               	movwf	i2lcdNibble@data,c
 19625                           
 19626                           ;lcd.c: 43: temp = data & 0xF0;
 19627  004C3A  5002               	movf	i2lcdNibble@data,w,c
 19628  004C3C  0BF0               	andlw	240
 19629  004C3E  6E01               	movwf	i2lcdNibble@temp,c
 19630                           
 19631                           ;lcd.c: 44: LATD = LATD & 0x0F;
 19632  004C40  508C               	movf	3980,w,c	;volatile
 19633  004C42  0B0F               	andlw	15
 19634  004C44  6E8C               	movwf	3980,c	;volatile
 19635                           
 19636                           ;lcd.c: 45: LATD = temp | LATD;
 19637  004C46  5001               	movf	i2lcdNibble@temp,w,c
 19638  004C48  108C               	iorwf	3980,w,c	;volatile
 19639  004C4A  6E8C               	movwf	3980,c	;volatile
 19640                           
 19641                           ;lcd.c: 47: LATDbits.LATD3 = 0;
 19642  004C4C  968C               	bcf	3980,3,c	;volatile
 19643                           
 19644                           ;lcd.c: 48: _delay((unsigned long)((25)*(8000000/4000000.0)));
 19645  004C4E  0E10               	movlw	16
 19646  004C50                     i2u862_47:
 19647  004C50  2EE8               	decfsz	wreg,f,c
 19648  004C52  D7FE               	bra	i2u862_47
 19649  004C54  D000               	nop2	
 19650                           
 19651                           ;lcd.c: 49: LATDbits.LATD3 = 1;
 19652  004C56  868C               	bsf	3980,3,c	;volatile
 19653                           
 19654                           ;lcd.c: 50: _delay((unsigned long)((25)*(8000000/4000000.0)));
 19655  004C58  0E10               	movlw	16
 19656  004C5A                     i2u863_47:
 19657  004C5A  2EE8               	decfsz	wreg,f,c
 19658  004C5C  D7FE               	bra	i2u863_47
 19659  004C5E  D000               	nop2	
 19660  004C60  0012               	return		;funcret
 19661  004C62                     __end_ofi2_lcdNibble:
 19662                           	opt stack 0
 19663                           pclatu	equ	0xFFB
 19664                           pclath	equ	0xFFA
 19665                           tblptru	equ	0xFF8
 19666                           tblptrh	equ	0xFF7
 19667                           tblptrl	equ	0xFF6
 19668                           tablat	equ	0xFF5
 19669                           prodh	equ	0xFF4
 19670                           prodl	equ	0xFF3
 19671                           intcon	equ	0xFF2
 19672                           intcon3	equ	0xFF0
 19673                           postinc0	equ	0xFEE
 19674                           fsr0h	equ	0xFEA
 19675                           fsr0l	equ	0xFE9
 19676                           wreg	equ	0xFE8
 19677                           plusw1	equ	0xFE3
 19678                           fsr1h	equ	0xFE2
 19679                           fsr1l	equ	0xFE1
 19680                           indf2	equ	0xFDF
 19681                           postinc2	equ	0xFDE
 19682                           postdec2	equ	0xFDD
 19683                           plusw2	equ	0xFDB
 19684                           fsr2h	equ	0xFDA
 19685                           fsr2l	equ	0xFD9
 19686                           status	equ	0xFD8
 19687                           
 19688 ;; *************** function _captureKeypad *****************
 19689 ;; Defined at:
 19690 ;;		line 13 in file "modules.c"
 19691 ;; Parameters:    Size  Location     Type
 19692 ;;		None
 19693 ;; Auto vars:     Size  Location     Type
 19694 ;;  keypress        1    2[COMRAM] unsigned char 
 19695 ;; Return value:  Size  Location     Type
 19696 ;;                  2    0[COMRAM] unsigned int 
 19697 ;; Registers used:
 19698 ;;		wreg, status,2, status,0
 19699 ;; Tracked objects:
 19700 ;;		On entry : 0/0
 19701 ;;		On exit  : 0/0
 19702 ;;		Unchanged: 0/0
 19703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19704 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19705 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19707 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19708 ;;Total ram usage:        3 bytes
 19709 ;; Hardware stack levels used:    1
 19710 ;; This function calls:
 19711 ;;		Nothing
 19712 ;; This function is called by:
 19713 ;;		_showInfo
 19714 ;; This function uses a non-reentrant model
 19715 ;;
 19716                           
 19717                           	psect	text85
 19718  00504E                     __ptext85:
 19719                           	opt stack 0
 19720  00504E                     _captureKeypad:
 19721                           	opt stack 22
 19722                           
 19723                           ;modules.c: 14: (INTCONbits.GIE = 0);
 19724                           
 19725                           ;incstack = 0
 19726  00504E  9EF2               	bcf	intcon,7,c	;volatile
 19727  005050                     i2l217:
 19728  005050  A281               	btfss	3969,1,c	;volatile
 19729  005052  D7FE               	goto	i2l217
 19730                           
 19731                           ;modules.c: 16: unsigned char keypress = (PORTB & 0xF0) >> 4;
 19732  005054  3881               	swapf	3969,w,c	;volatile
 19733  005056  0B0F               	andlw	15
 19734  005058  0B0F               	andlw	15
 19735  00505A  6E03               	movwf	captureKeypad@keypress,c
 19736  00505C                     i2l220:
 19737  00505C  B281               	btfsc	3969,1,c	;volatile
 19738  00505E  D7FE               	goto	i2l220
 19739                           
 19740                           ;modules.c: 18: INT1IF = 0;
 19741  005060  90F0               	bcf	intcon3,0,c	;volatile
 19742                           
 19743                           ;modules.c: 19: (INTCONbits.GIE = 1);
 19744  005062  8EF2               	bsf	intcon,7,c	;volatile
 19745                           
 19746                           ;modules.c: 20: return keypress;
 19747  005064  C003  F001         	movff	captureKeypad@keypress,?_captureKeypad
 19748  005068  6A02               	clrf	?_captureKeypad+1,c
 19749  00506A  0012               	return		;funcret
 19750  00506C                     __end_of_captureKeypad:
 19751                           	opt stack 0
 19752                           pclatu	equ	0xFFB
 19753                           pclath	equ	0xFFA
 19754                           tblptru	equ	0xFF8
 19755                           tblptrh	equ	0xFF7
 19756                           tblptrl	equ	0xFF6
 19757                           tablat	equ	0xFF5
 19758                           prodh	equ	0xFF4
 19759                           prodl	equ	0xFF3
 19760                           intcon	equ	0xFF2
 19761                           intcon3	equ	0xFF0
 19762                           postinc0	equ	0xFEE
 19763                           fsr0h	equ	0xFEA
 19764                           fsr0l	equ	0xFE9
 19765                           wreg	equ	0xFE8
 19766                           plusw1	equ	0xFE3
 19767                           fsr1h	equ	0xFE2
 19768                           fsr1l	equ	0xFE1
 19769                           indf2	equ	0xFDF
 19770                           postinc2	equ	0xFDE
 19771                           postdec2	equ	0xFDD
 19772                           plusw2	equ	0xFDB
 19773                           fsr2h	equ	0xFDA
 19774                           fsr2l	equ	0xFD9
 19775                           status	equ	0xFD8
 19776                           
 19777 ;; *************** function _ReadRun *****************
 19778 ;; Defined at:
 19779 ;;		line 66 in file "eeprom.c"
 19780 ;; Parameters:    Size  Location     Type
 19781 ;;  backruns        1    wreg     unsigned char 
 19782 ;;  sorted          2    2[COMRAM] PTR unsigned char 
 19783 ;;		 -> PermLog@sorted(4), 
 19784 ;;  time            2    4[COMRAM] PTR unsigned int 
 19785 ;;		 -> PermLog@time(2), 
 19786 ;; Auto vars:     Size  Location     Type
 19787 ;;  backruns        1   10[COMRAM] unsigned char 
 19788 ;;  add             2   11[COMRAM] unsigned int 
 19789 ;; Return value:  Size  Location     Type
 19790 ;;                  1    wreg      void 
 19791 ;; Registers used:
 19792 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19793 ;; Tracked objects:
 19794 ;;		On entry : 0/0
 19795 ;;		On exit  : 0/0
 19796 ;;		Unchanged: 0/0
 19797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19798 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19799 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19800 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19801 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19802 ;;Total ram usage:       11 bytes
 19803 ;; Hardware stack levels used:    1
 19804 ;; Hardware stack levels required when called:    1
 19805 ;; This function calls:
 19806 ;;		_back
 19807 ;;		i2_ReadEE
 19808 ;; This function is called by:
 19809 ;;		_PermLog
 19810 ;; This function uses a non-reentrant model
 19811 ;;
 19812                           
 19813                           	psect	text86
 19814  0035E2                     __ptext86:
 19815                           	opt stack 0
 19816  0035E2                     _ReadRun:
 19817                           	opt stack 22
 19818                           
 19819                           ;incstack = 0
 19820                           ;ReadRun@backruns stored from wreg
 19821  0035E2  6E0B               	movwf	ReadRun@backruns,c
 19822                           
 19823                           ;eeprom.c: 67: unsigned int add = back(backruns) * 5;
 19824  0035E4  500B               	movf	ReadRun@backruns,w,c
 19825  0035E6  EC36  F028         	call	_back
 19826  0035EA  6E07               	movwf	??_ReadRun& (0+255),c
 19827  0035EC  5007               	movf	??_ReadRun,w,c
 19828  0035EE  0D05               	mullw	5
 19829  0035F0  CFF3 F00C          	movff	prodl,ReadRun@add
 19830  0035F4  CFF4 F00D          	movff	prodh,ReadRun@add+1
 19831                           
 19832                           ;eeprom.c: 68: *time = ReadEE(add++ *8);
 19833  0035F8  C00C  F007         	movff	ReadRun@add,??_ReadRun
 19834  0035FC  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 19835  003600  90D8               	bcf	status,0,c
 19836  003602  3607               	rlcf	??_ReadRun,f,c
 19837  003604  3608               	rlcf	??_ReadRun+1,f,c
 19838  003606  90D8               	bcf	status,0,c
 19839  003608  3607               	rlcf	??_ReadRun,f,c
 19840  00360A  3608               	rlcf	??_ReadRun+1,f,c
 19841  00360C  90D8               	bcf	status,0,c
 19842  00360E  3607               	rlcf	??_ReadRun,f,c
 19843  003610  3608               	rlcf	??_ReadRun+1,f,c
 19844  003612  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 19845  003616  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 19846  00361A  EC5D  F028         	call	i2_ReadEE	;wreg free
 19847  00361E  6E09               	movwf	(??_ReadRun+2)& (0+255),c
 19848  003620  6A0A               	clrf	(??_ReadRun+3)& (0+255),c
 19849  003622  C005  FFD9         	movff	ReadRun@time,fsr2l
 19850  003626  C006  FFDA         	movff	ReadRun@time+1,fsr2h
 19851  00362A  C009  FFDE         	movff	??_ReadRun+2,postinc2
 19852  00362E  C00A  FFDD         	movff	??_ReadRun+3,postdec2
 19853  003632  4A0C               	infsnz	ReadRun@add,f,c
 19854  003634  2A0D               	incf	ReadRun@add+1,f,c
 19855                           
 19856                           ;eeprom.c: 69: sorted[0] = ReadEE(add++ *8);
 19857  003636  C00C  F007         	movff	ReadRun@add,??_ReadRun
 19858  00363A  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 19859  00363E  90D8               	bcf	status,0,c
 19860  003640  3607               	rlcf	??_ReadRun,f,c
 19861  003642  3608               	rlcf	??_ReadRun+1,f,c
 19862  003644  90D8               	bcf	status,0,c
 19863  003646  3607               	rlcf	??_ReadRun,f,c
 19864  003648  3608               	rlcf	??_ReadRun+1,f,c
 19865  00364A  90D8               	bcf	status,0,c
 19866  00364C  3607               	rlcf	??_ReadRun,f,c
 19867  00364E  3608               	rlcf	??_ReadRun+1,f,c
 19868  003650  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 19869  003654  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 19870  003658  EC5D  F028         	call	i2_ReadEE	;wreg free
 19871  00365C  C003  FFD9         	movff	ReadRun@sorted,fsr2l
 19872  003660  C004  FFDA         	movff	ReadRun@sorted+1,fsr2h
 19873  003664  6EDF               	movwf	indf2,c
 19874  003666  4A0C               	infsnz	ReadRun@add,f,c
 19875  003668  2A0D               	incf	ReadRun@add+1,f,c
 19876                           
 19877                           ;eeprom.c: 70: sorted[1] = ReadEE(add++ *8);
 19878  00366A  EE20 F001          	lfsr	2,1
 19879  00366E  5003               	movf	ReadRun@sorted,w,c
 19880  003670  26D9               	addwf	fsr2l,f,c
 19881  003672  5004               	movf	ReadRun@sorted+1,w,c
 19882  003674  22DA               	addwfc	fsr2h,f,c
 19883  003676  C00C  F007         	movff	ReadRun@add,??_ReadRun
 19884  00367A  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 19885  00367E  90D8               	bcf	status,0,c
 19886  003680  3607               	rlcf	??_ReadRun,f,c
 19887  003682  3608               	rlcf	??_ReadRun+1,f,c
 19888  003684  90D8               	bcf	status,0,c
 19889  003686  3607               	rlcf	??_ReadRun,f,c
 19890  003688  3608               	rlcf	??_ReadRun+1,f,c
 19891  00368A  90D8               	bcf	status,0,c
 19892  00368C  3607               	rlcf	??_ReadRun,f,c
 19893  00368E  3608               	rlcf	??_ReadRun+1,f,c
 19894  003690  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 19895  003694  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 19896  003698  EC5D  F028         	call	i2_ReadEE	;wreg free
 19897  00369C  6EDF               	movwf	indf2,c
 19898  00369E  4A0C               	infsnz	ReadRun@add,f,c
 19899  0036A0  2A0D               	incf	ReadRun@add+1,f,c
 19900                           
 19901                           ;eeprom.c: 71: sorted[2] = ReadEE(add++ *8);
 19902  0036A2  EE20 F002          	lfsr	2,2
 19903  0036A6  5003               	movf	ReadRun@sorted,w,c
 19904  0036A8  26D9               	addwf	fsr2l,f,c
 19905  0036AA  5004               	movf	ReadRun@sorted+1,w,c
 19906  0036AC  22DA               	addwfc	fsr2h,f,c
 19907  0036AE  C00C  F007         	movff	ReadRun@add,??_ReadRun
 19908  0036B2  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 19909  0036B6  90D8               	bcf	status,0,c
 19910  0036B8  3607               	rlcf	??_ReadRun,f,c
 19911  0036BA  3608               	rlcf	??_ReadRun+1,f,c
 19912  0036BC  90D8               	bcf	status,0,c
 19913  0036BE  3607               	rlcf	??_ReadRun,f,c
 19914  0036C0  3608               	rlcf	??_ReadRun+1,f,c
 19915  0036C2  90D8               	bcf	status,0,c
 19916  0036C4  3607               	rlcf	??_ReadRun,f,c
 19917  0036C6  3608               	rlcf	??_ReadRun+1,f,c
 19918  0036C8  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 19919  0036CC  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 19920  0036D0  EC5D  F028         	call	i2_ReadEE	;wreg free
 19921  0036D4  6EDF               	movwf	indf2,c
 19922  0036D6  4A0C               	infsnz	ReadRun@add,f,c
 19923  0036D8  2A0D               	incf	ReadRun@add+1,f,c
 19924                           
 19925                           ;eeprom.c: 72: sorted[3] = ReadEE(add++ *8);
 19926  0036DA  EE20 F003          	lfsr	2,3
 19927  0036DE  5003               	movf	ReadRun@sorted,w,c
 19928  0036E0  26D9               	addwf	fsr2l,f,c
 19929  0036E2  5004               	movf	ReadRun@sorted+1,w,c
 19930  0036E4  22DA               	addwfc	fsr2h,f,c
 19931  0036E6  C00C  F007         	movff	ReadRun@add,??_ReadRun
 19932  0036EA  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 19933  0036EE  90D8               	bcf	status,0,c
 19934  0036F0  3607               	rlcf	??_ReadRun,f,c
 19935  0036F2  3608               	rlcf	??_ReadRun+1,f,c
 19936  0036F4  90D8               	bcf	status,0,c
 19937  0036F6  3607               	rlcf	??_ReadRun,f,c
 19938  0036F8  3608               	rlcf	??_ReadRun+1,f,c
 19939  0036FA  90D8               	bcf	status,0,c
 19940  0036FC  3607               	rlcf	??_ReadRun,f,c
 19941  0036FE  3608               	rlcf	??_ReadRun+1,f,c
 19942  003700  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 19943  003704  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 19944  003708  EC5D  F028         	call	i2_ReadEE	;wreg free
 19945  00370C  6EDF               	movwf	indf2,c
 19946  00370E  4A0C               	infsnz	ReadRun@add,f,c
 19947  003710  2A0D               	incf	ReadRun@add+1,f,c
 19948  003712  0012               	return		;funcret
 19949  003714                     __end_of_ReadRun:
 19950                           	opt stack 0
 19951                           pclatu	equ	0xFFB
 19952                           pclath	equ	0xFFA
 19953                           tblptru	equ	0xFF8
 19954                           tblptrh	equ	0xFF7
 19955                           tblptrl	equ	0xFF6
 19956                           tablat	equ	0xFF5
 19957                           prodh	equ	0xFF4
 19958                           prodl	equ	0xFF3
 19959                           intcon	equ	0xFF2
 19960                           intcon3	equ	0xFF0
 19961                           postinc0	equ	0xFEE
 19962                           fsr0h	equ	0xFEA
 19963                           fsr0l	equ	0xFE9
 19964                           wreg	equ	0xFE8
 19965                           plusw1	equ	0xFE3
 19966                           fsr1h	equ	0xFE2
 19967                           fsr1l	equ	0xFE1
 19968                           indf2	equ	0xFDF
 19969                           postinc2	equ	0xFDE
 19970                           postdec2	equ	0xFDD
 19971                           plusw2	equ	0xFDB
 19972                           fsr2h	equ	0xFDA
 19973                           fsr2l	equ	0xFD9
 19974                           status	equ	0xFD8
 19975                           
 19976 ;; *************** function i2_ReadEE *****************
 19977 ;; Defined at:
 19978 ;;		line 16 in file "eeprom.c"
 19979 ;; Parameters:    Size  Location     Type
 19980 ;;  address         2    0[COMRAM] unsigned int 
 19981 ;; Auto vars:     Size  Location     Type
 19982 ;;		None
 19983 ;; Return value:  Size  Location     Type
 19984 ;;                  1    wreg      unsigned char 
 19985 ;; Registers used:
 19986 ;;		wreg, status,2
 19987 ;; Tracked objects:
 19988 ;;		On entry : 0/0
 19989 ;;		On exit  : 0/0
 19990 ;;		Unchanged: 0/0
 19991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19992 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19995 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19996 ;;Total ram usage:        2 bytes
 19997 ;; Hardware stack levels used:    1
 19998 ;; This function calls:
 19999 ;;		Nothing
 20000 ;; This function is called by:
 20001 ;;		_ReadRun
 20002 ;; This function uses a non-reentrant model
 20003 ;;
 20004                           
 20005                           	psect	text87
 20006  0050BA                     __ptext87:
 20007                           	opt stack 0
 20008  0050BA                     i2_ReadEE:
 20009                           	opt stack 22
 20010                           
 20011                           ;eeprom.c: 19: EEADRH = (unsigned char) (address >> 8);
 20012                           
 20013                           ;incstack = 0
 20014  0050BA  5002               	movf	i2ReadEE@address+1,w,c
 20015  0050BC  6EAA               	movwf	4010,c	;volatile
 20016                           
 20017                           ;eeprom.c: 20: EEADR = (unsigned char) address;
 20018  0050BE  C001  FFA9         	movff	i2ReadEE@address,4009	;volatile
 20019                           
 20020                           ;eeprom.c: 22: EECON1bits.EEPGD = 0;
 20021  0050C2  9EA6               	bcf	4006,7,c	;volatile
 20022                           
 20023                           ;eeprom.c: 23: EECON1bits.CFGS = 0;
 20024  0050C4  9CA6               	bcf	4006,6,c	;volatile
 20025                           
 20026                           ;eeprom.c: 24: EECON1bits.RD = 1;
 20027  0050C6  80A6               	bsf	4006,0,c	;volatile
 20028  0050C8                     i2l420:
 20029  0050C8  B0A6               	btfsc	4006,0,c	;volatile
 20030  0050CA  D7FE               	goto	i2l420
 20031                           
 20032                           ;eeprom.c: 30: return EEDATA;
 20033  0050CC  50A8               	movf	4008,w,c	;volatile
 20034  0050CE  0012               	return	
 20035  0050D0                     __end_ofi2_ReadEE:
 20036                           	opt stack 0
 20037                           pclatu	equ	0xFFB
 20038                           pclath	equ	0xFFA
 20039                           tblptru	equ	0xFF8
 20040                           tblptrh	equ	0xFF7
 20041                           tblptrl	equ	0xFF6
 20042                           tablat	equ	0xFF5
 20043                           prodh	equ	0xFF4
 20044                           prodl	equ	0xFF3
 20045                           intcon	equ	0xFF2
 20046                           intcon3	equ	0xFF0
 20047                           postinc0	equ	0xFEE
 20048                           fsr0h	equ	0xFEA
 20049                           fsr0l	equ	0xFE9
 20050                           wreg	equ	0xFE8
 20051                           plusw1	equ	0xFE3
 20052                           fsr1h	equ	0xFE2
 20053                           fsr1l	equ	0xFE1
 20054                           indf2	equ	0xFDF
 20055                           postinc2	equ	0xFDE
 20056                           postdec2	equ	0xFDD
 20057                           plusw2	equ	0xFDB
 20058                           fsr2h	equ	0xFDA
 20059                           fsr2l	equ	0xFD9
 20060                           status	equ	0xFD8
 20061                           
 20062 ;; *************** function _back *****************
 20063 ;; Defined at:
 20064 ;;		line 57 in file "eeprom.c"
 20065 ;; Parameters:    Size  Location     Type
 20066 ;;  runs            1    wreg     unsigned char 
 20067 ;; Auto vars:     Size  Location     Type
 20068 ;;  runs            1    0[COMRAM] unsigned char 
 20069 ;;  result          1    1[COMRAM] unsigned char 
 20070 ;; Return value:  Size  Location     Type
 20071 ;;                  1    wreg      unsigned char 
 20072 ;; Registers used:
 20073 ;;		wreg, status,2, status,0
 20074 ;; Tracked objects:
 20075 ;;		On entry : 0/0
 20076 ;;		On exit  : 0/0
 20077 ;;		Unchanged: 0/0
 20078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20080 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20082 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20083 ;;Total ram usage:        2 bytes
 20084 ;; Hardware stack levels used:    1
 20085 ;; This function calls:
 20086 ;;		Nothing
 20087 ;; This function is called by:
 20088 ;;		_ReadRun
 20089 ;; This function uses a non-reentrant model
 20090 ;;
 20091                           
 20092                           	psect	text88
 20093  00506C                     __ptext88:
 20094                           	opt stack 0
 20095  00506C                     _back:
 20096                           	opt stack 22
 20097                           
 20098                           ;incstack = 0
 20099                           ;back@runs stored from wreg
 20100  00506C  6E01               	movwf	back@runs,c
 20101                           
 20102                           ;eeprom.c: 59: unsigned char result = Latest + 4 - runs;
 20103  00506E  5001               	movf	back@runs,w,c
 20104  005070  0800               	sublw	0
 20105  005072  0100               	movlb	0	; () banked
 20106  005074  25D8               	addwf	_Latest& (0+255),w,b
 20107  005076  0F04               	addlw	4
 20108  005078  6E02               	movwf	back@result,c
 20109                           
 20110                           ;eeprom.c: 60: if (result > 4) {
 20111  00507A  0E04               	movlw	4
 20112  00507C  6402               	cpfsgt	back@result,c
 20113  00507E  D002               	goto	i2l5483
 20114                           
 20115                           ; BSR set to: 0
 20116                           ;eeprom.c: 61: result -= 4;
 20117  005080  0E04               	movlw	4
 20118  005082  5E02               	subwf	back@result,f,c
 20119  005084                     i2l5483:
 20120                           
 20121                           ; BSR set to: 0
 20122                           ;eeprom.c: 62: }
 20123                           ;eeprom.c: 63: return result;
 20124  005084  5002               	movf	back@result,w,c
 20125  005086  0012               	return	
 20126  005088                     __end_of_back:
 20127                           	opt stack 0
 20128                           pclatu	equ	0xFFB
 20129                           pclath	equ	0xFFA
 20130                           tblptru	equ	0xFF8
 20131                           tblptrh	equ	0xFF7
 20132                           tblptrl	equ	0xFF6
 20133                           tablat	equ	0xFF5
 20134                           prodh	equ	0xFF4
 20135                           prodl	equ	0xFF3
 20136                           intcon	equ	0xFF2
 20137                           intcon3	equ	0xFF0
 20138                           postinc0	equ	0xFEE
 20139                           fsr0h	equ	0xFEA
 20140                           fsr0l	equ	0xFE9
 20141                           wreg	equ	0xFE8
 20142                           plusw1	equ	0xFE3
 20143                           fsr1h	equ	0xFE2
 20144                           fsr1l	equ	0xFE1
 20145                           indf2	equ	0xFDF
 20146                           postinc2	equ	0xFDE
 20147                           postdec2	equ	0xFDD
 20148                           plusw2	equ	0xFDB
 20149                           fsr2h	equ	0xFDA
 20150                           fsr2l	equ	0xFD9
 20151                           status	equ	0xFD8
 20152                           pclatu	equ	0xFFB
 20153                           pclath	equ	0xFFA
 20154                           tblptru	equ	0xFF8
 20155                           tblptrh	equ	0xFF7
 20156                           tblptrl	equ	0xFF6
 20157                           tablat	equ	0xFF5
 20158                           prodh	equ	0xFF4
 20159                           prodl	equ	0xFF3
 20160                           intcon	equ	0xFF2
 20161                           intcon3	equ	0xFF0
 20162                           postinc0	equ	0xFEE
 20163                           fsr0h	equ	0xFEA
 20164                           fsr0l	equ	0xFE9
 20165                           wreg	equ	0xFE8
 20166                           plusw1	equ	0xFE3
 20167                           fsr1h	equ	0xFE2
 20168                           fsr1l	equ	0xFE1
 20169                           indf2	equ	0xFDF
 20170                           postinc2	equ	0xFDE
 20171                           postdec2	equ	0xFDD
 20172                           plusw2	equ	0xFDB
 20173                           fsr2h	equ	0xFDA
 20174                           fsr2l	equ	0xFD9
 20175                           status	equ	0xFD8
 20176                           
 20177                           	psect	rparam
 20178  0000                     pclatu	equ	0xFFB
 20179                           pclath	equ	0xFFA
 20180                           tblptru	equ	0xFF8
 20181                           tblptrh	equ	0xFF7
 20182                           tblptrl	equ	0xFF6
 20183                           tablat	equ	0xFF5
 20184                           prodh	equ	0xFF4
 20185                           prodl	equ	0xFF3
 20186                           intcon	equ	0xFF2
 20187                           intcon3	equ	0xFF0
 20188                           postinc0	equ	0xFEE
 20189                           fsr0h	equ	0xFEA
 20190                           fsr0l	equ	0xFE9
 20191                           wreg	equ	0xFE8
 20192                           plusw1	equ	0xFE3
 20193                           fsr1h	equ	0xFE2
 20194                           fsr1l	equ	0xFE1
 20195                           indf2	equ	0xFDF
 20196                           postinc2	equ	0xFDE
 20197                           postdec2	equ	0xFDD
 20198                           plusw2	equ	0xFDB
 20199                           fsr2h	equ	0xFDA
 20200                           fsr2l	equ	0xFD9
 20201                           status	equ	0xFD8
 20202                           
 20203                           	psect	temp
 20204  00007F                     btemp:
 20205                           	opt stack 0
 20206  00007F                     	ds	1
 20207  0000                     int$flags	set	btemp
 20208                           pclatu	equ	0xFFB
 20209                           pclath	equ	0xFFA
 20210                           tblptru	equ	0xFF8
 20211                           tblptrh	equ	0xFF7
 20212                           tblptrl	equ	0xFF6
 20213                           tablat	equ	0xFF5
 20214                           prodh	equ	0xFF4
 20215                           prodl	equ	0xFF3
 20216                           intcon	equ	0xFF2
 20217                           intcon3	equ	0xFF0
 20218                           postinc0	equ	0xFEE
 20219                           fsr0h	equ	0xFEA
 20220                           fsr0l	equ	0xFE9
 20221                           wreg	equ	0xFE8
 20222                           plusw1	equ	0xFE3
 20223                           fsr1h	equ	0xFE2
 20224                           fsr1l	equ	0xFE1
 20225                           indf2	equ	0xFDF
 20226                           postinc2	equ	0xFDE
 20227                           postdec2	equ	0xFDD
 20228                           plusw2	equ	0xFDB
 20229                           fsr2h	equ	0xFDA
 20230                           fsr2l	equ	0xFD9
 20231                           status	equ	0xFD8


Data Sizes:
    Strings     904
    Constant    150
    Data        0
    BSS         42
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    126     126
    BANK0           128     54      96
    BANK1           256    116     116
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK1[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_51(CODE[12]), STR_50(CODE[11]), STR_49(CODE[16]), STR_48(CODE[23]), 
		 -> STR_47(CODE[21]), STR_46(CODE[14]), STR_45(CODE[15]), STR_44(CODE[22]), 
		 -> STR_43(CODE[20]), STR_42(CODE[13]), STR_41(CODE[16]), STR_40(CODE[23]), 
		 -> STR_39(CODE[21]), STR_38(CODE[14]), STR_37(CODE[18]), STR_36(CODE[18]), 
		 -> STR_35(CODE[20]), STR_34(CODE[20]), STR_33(CODE[17]), STR_32(CODE[16]), 
		 -> STR_31(CODE[21]), STR_30(CODE[16]), STR_29(CODE[21]), STR_28(CODE[16]), 
		 -> STR_27(CODE[20]), STR_26(CODE[16]), STR_25(CODE[21]), STR_24(CODE[23]), 
		 -> STR_23(CODE[24]), STR_22(CODE[21]), STR_21(CODE[24]), STR_20(CODE[24]), 
		 -> STR_19(CODE[25]), STR_18(CODE[19]), STR_17(CODE[24]), STR_16(CODE[24]), 
		 -> STR_15(CODE[27]), STR_14(CODE[17]), STR_13(CODE[21]), STR_12(CODE[21]), 
		 -> STR_11(CODE[21]), STR_10(CODE[21]), STR_9(CODE[20]), STR_8(CODE[21]), 
		 -> STR_7(CODE[21]), STR_6(CODE[20]), STR_5(CODE[22]), STR_4(CODE[22]), 
		 -> STR_3(CODE[21]), STR_2(CODE[24]), STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK1[2]), 

    WriteRun@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(BANK0[4]), 

    ReadRun@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> PermLog@sorted(BANK0[4]), 

    ReadRun@time	PTR unsigned int  size(2) Largest target is 2
		 -> PermLog@time(BANK0[2]), 

    check9@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(BANK0[4]), 

    checkC@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(BANK0[4]), 

    checkAA@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> testADC@sorted(COMRAM[4]), simulate@sorted(BANK0[4]), 

    stopMoving$556	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_36(CODE[18]), STR_35(CODE[20]), 

    CCW90@port	PTR int  size(2) Largest target is 6
		 -> simulate@portCCW(BANK0[6]), 

    CW90@port	PTR int  size(2) Largest target is 6
		 -> simulate@portCW(BANK0[6]), 

    PWMC@port	PTR int  size(2) Largest target is 6
		 -> simulate@portCCW(BANK0[6]), simulate@portCW(BANK0[6]), 

    getTime@time	PTR unsigned char  size(2) Largest target is 7
		 -> time(BANK0[7]), 

    showInfo@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> PermLog@sorted(BANK0[4]), simulate@sorted(BANK0[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _keypressed in COMRAM

    _simulate->_showInfo
    i2_getTime->i2_I2C_Master_Read
    i2_getTime->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    _stopMoving->i2_printf
    _checkC->_checkV
    _checkAA->_checkV
    _check9->_checkV
    _checkV->i2_printf
    ___ftdiv->___awtoft
    ___awtoft->i2___ftpack
    _WriteRun->i2___wmul
    _HexDecToDec2->i2___wmul
    _CW90->i2_printf
    _CCW90->i2_printf
    _PWMC->i2___awdiv
    _PermLog->_showInfo
    _showInfo->i2_printf
    i2_printf->i2___ftsub
    i2_scale->i2___ftmul
    i2_putch->i2_lcdNibble
    i2_fround->i2___ftmul
    i2___wmul->i2___awdiv
    i2___ftmul->___ftdiv
    i2___awdiv->i2___awmod
    i2___lltoft->i2___ftpack
    i2___llmod->i2___lldiv
    i2___fttol->i2___ftmul
    i2___ftsub->i2___ftadd
    i2___ftadd->i2_fround
    i2___ftge->i2___ftmul
    i2_line1->i2_lcdInst
    i2_line0->i2_lcdInst
    i2_lcdInst->i2_lcdNibble
    _ReadRun->_back
    _ReadRun->i2_ReadEE

Critical Paths under _main in BANK0

    None.

Critical Paths under _keypressed in BANK0

    _keypressed->_simulate

Critical Paths under _main in BANK1

    _main->_showRTC
    _showRTC->_printf
    _printf->___ftsub
    _scale->___ftmul
    _putch->_lcdNibble
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _line1->_lcdInst
    _line0->_lcdInst
    _getTime->_I2C_Master_Read
    _getTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _initialize->_I2C_Master_Init
    _initLatest->_ReadEE
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     2      5  118458
                                            109 BANK1      7     2      5
                         _initialize
                              _line0
                             _printf
                            _showRTC
 ---------------------------------------------------------------------------------
 (1) _showRTC                                              2     2      0   58701
                                            107 BANK1      2     2      0
                            _getTime
                              _line0
                              _line1
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              45    37      8   57704
                                             63 BANK1     44    36      8
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   12933
                                             35 BANK1      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     195
                                              2 BANK1      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   12654
                                             35 BANK1     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3108
                                             14 BANK1      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    5240
                                             20 BANK1     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1819
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    2069
                                              6 BANK1      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     608
                                              0 BANK1     15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     878
                                              0 BANK1     12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2493
                                              8 BANK1      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     848
                                             13 BANK1      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     444
                                             42 BANK1     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4325
                                             57 BANK1      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    3961
                                             45 BANK1     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2314
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     142
                                              0 BANK1      3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     744
                                              0 BANK1      9     3      6
 ---------------------------------------------------------------------------------
 (2) _line1                                                0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _line0                                                0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _getTime                                              3     1      2     607
                                              3 BANK1      3     1      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2     262
                                              1 BANK1      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      65
                                              1 BANK1      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _initialize                                           2     2      0    1858
                                             21 BANK1      2     2      0
                    _I2C_Master_Init
                            _initLCD
                         _initLatest
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _initLatest                                           0     0      0     349
                             _ReadEE
 ---------------------------------------------------------------------------------
 (3) _ReadEE                                               2     0      2     349
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     195
                                              3 BANK1      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     195
                                              2 BANK1      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     164
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4    1119
                                             13 BANK1      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1011
                                              0 BANK1     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _keypressed                                          17    17      0  366830
                                            125 COMRAM     1     1      0
                                             38 BANK0     16    16      0
                            _PermLog
                           _simulate
                         _stopMoving
 ---------------------------------------------------------------------------------
 (7) _simulate                                            38    38      0  292526
                                              0 BANK0     38    38      0
                              _CCW90
                               _CW90
                       _HexDecToDec2
                           _WriteRun
                             _check9
                            _checkAA
                             _checkC
                           _showInfo
                         _stopMoving
                           i2___wmul
                          i2_getTime
                            i2_line0
                            i2_line1
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) i2_getTime                                            3     1      2     283
                                              3 COMRAM     3     1      2
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Master_Write                                   2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (10) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _stopMoving                                           3     3      0   24277
                                            112 COMRAM     3     3      0
                            i2_line0
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) _checkC                                               2     0      2   53265
                                            120 COMRAM     2     0      2
                                 _AD
                             _checkV
                            i2_line0
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) _checkAA                                              2     0      2   53329
                                            120 COMRAM     2     0      2
                                 _AD
                             _checkV
                            i2_line0
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) _check9                                               2     0      2   53265
                                            120 COMRAM     2     0      2
                                 _AD
                             _checkV
                            i2_line0
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _checkV                                               8     3      5   28926
                                            112 COMRAM     8     3      5
                                 _AD (ARG)
                           ___awtoft
                            ___ftdiv
                           i2___ftge
                          i2___ftmul
                            i2_line1
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) ___ftdiv                                            15     9      6    1259
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                         i2___ftpack
                         i2___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (10) ___awtoft                                            4     1      3     840
                                              8 COMRAM     4     1      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (9) _AD                                                   5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (8) _WriteRun                                             8     4      4    2453
                                             20 COMRAM     8     4      4
                            _WriteEE
                           i2___wmul
 ---------------------------------------------------------------------------------
 (9) _WriteEE                                              3     0      3     834
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (8) _HexDecToDec2                                         9     7      2    1543
                                             20 COMRAM     9     7      2
                           i2___wmul
 ---------------------------------------------------------------------------------
 (8) _CW90                                                 2     0      2   26410
                                            112 COMRAM     2     0      2
                               _PWMC
                            i2_line0
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) _CCW90                                                2     0      2   26410
                                            112 COMRAM     2     0      2
                               _PWMC
                            i2_line1
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _PWMC                                                40    34      6    2115
                                             14 COMRAM    13     7      6
                          i2___awdiv
 ---------------------------------------------------------------------------------
 (7) _PermLog                                              9     9      0   49982
                                              0 BANK0      9     9      0
                            _ReadRun
                           _showInfo
                            i2_line0
                            i2_line1
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) _showInfo                                            13     9      4   24869
                                            112 COMRAM    13     9      4
                      _captureKeypad
                            i2_line0
                            i2_line1
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) i2_printf                                            43    37      6   24074
                                             70 COMRAM    42    36      6
                          i2___awdiv
                          i2___ftadd
                           i2___ftge
                          i2___ftmul
                          i2___ftneg
                          i2___ftsub
                          i2___fttol
                          i2___lldiv
                          i2___llmod
                         i2___lltoft
                           i2___wmul
                       i2__div_to_l_
                      i2__tdiv_to_l_
                           i2_fround
                          i2_isdigit
                            i2_putch
                            i2_scale
 ---------------------------------------------------------------------------------
 (9) i2_scale                                             13    10      3    5101
                                             42 COMRAM     7     4      3
                          i2___awdiv
                          i2___awmod
                          i2___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (9) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (9) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (9) i2_fround                                            16    13      3    4903
                                             42 COMRAM    10     7      3
                          i2___awdiv
                          i2___awmod
                          i2___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4    1197
                                             14 COMRAM     6     2      4
                          i2___awdiv (ARG)
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___ftmul                                          15     9      6    1779
                                             27 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                          i2___awdiv (ARG)
                          i2___awmod (ARG)
                         i2___ftpack
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___awmod                                           6     2      4     764
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___awdiv                                           8     4      4     872
                                              6 COMRAM     8     4      4
                          i2___awmod (ARG)
 ---------------------------------------------------------------------------------
 (9) i2__tdiv_to_l_                                       15     9      6     355
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (9) i2__div_to_l_                                        12     6      6     481
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (9) i2___lltoft                                           9     5      4     716
                                              8 COMRAM     9     5      4
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (9) i2___llmod                                            9     1      8     367
                                             13 COMRAM     9     1      8
                          i2___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (9) i2___lldiv                                           13     5      8     370
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (9) i2___fttol                                           15    11      4     330
                                             42 COMRAM    15    11      4
                          i2___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) i2___ftsub                                            6     0      6    1684
                                             64 COMRAM     6     0      6
                          i2___ftadd
                         i2___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___ftadd                                          12     6      6    1565
                                             52 COMRAM    12     6      6
                         i2___ftpack
                           i2_fround (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___ftpack                                          8     3      5     621
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (9) i2___ftneg                                            3     0      3      71
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) i2___ftge                                             9     3      6     344
                                             42 COMRAM     9     3      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                          i2___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (8) i2_line1                                              0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (8) i2_line0                                              0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (9) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (9) _captureKeypad                                        3     1      2      23
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (8) _ReadRun                                             11     7      4     618
                                              2 COMRAM    11     7      4
                               _back
                           i2_ReadEE
 ---------------------------------------------------------------------------------
 (9) i2_ReadEE                                             2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (9) _back                                                 2     2      0      68
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialize
     _I2C_Master_Init
       ___lldiv
     _initLCD
       _lcdInst
         _lcdNibble
     _initLatest
       _ReadEE
     _lcdInst
       _lcdNibble
   _line0
     _lcdInst
       _lcdNibble
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _putch
       _lcdNibble
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _showRTC
     _getTime
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _line0
       _lcdInst
         _lcdNibble
     _line1
       _lcdInst
         _lcdNibble
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _isdigit
       _putch
         _lcdNibble
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)

 _keypressed (ROOT)
   _PermLog
     _ReadRun
       _back
       i2_ReadEE
     _showInfo
       _captureKeypad
       i2_line0
         i2_lcdInst
           i2_lcdNibble
       i2_line1
         i2_lcdInst
           i2_lcdNibble
       i2_printf
         i2___awdiv
           i2___awmod (ARG)
         i2___ftadd
           i2___ftpack
           i2_fround (ARG)
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftge
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftmul
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___ftneg
         i2___ftsub
           i2___ftadd
             i2___ftpack
             i2_fround (ARG)
               i2___awdiv
                 i2___awmod (ARG)
               i2___awmod
               i2___ftmul
                 ___awtoft (ARG)
                   i2___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     i2___ftpack
                   i2___ftpack (ARG)
                   i2___ftpack (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
               i2___wmul
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___lltoft (ARG)
             i2___ftpack
         i2___fttol
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___lldiv
         i2___llmod
           i2___lldiv (ARG)
         i2___lltoft
           i2___ftpack
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
         i2__div_to_l_
         i2__tdiv_to_l_
         i2_fround
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2_isdigit
         i2_putch
           i2_lcdNibble
         i2_scale
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
     i2_line0
       i2_lcdInst
         i2_lcdNibble
     i2_line1
       i2_lcdInst
         i2_lcdNibble
     i2_printf
       i2___awdiv
         i2___awmod (ARG)
       i2___ftadd
         i2___ftpack
         i2_fround (ARG)
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___ftge
         ___awtoft (ARG)
           i2___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
           i2___ftpack (ARG)
         i2___ftmul (ARG)
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___ftmul
         ___awtoft (ARG)
           i2___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
           i2___ftpack (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___ftneg
       i2___ftsub
         i2___ftadd
           i2___ftpack
           i2_fround (ARG)
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___lltoft (ARG)
           i2___ftpack
       i2___fttol
         i2___ftmul (ARG)
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___lldiv
       i2___llmod
         i2___lldiv (ARG)
       i2___lltoft
         i2___ftpack
       i2___wmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
       i2__div_to_l_
       i2__tdiv_to_l_
       i2_fround
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
         i2___ftmul
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2_isdigit
       i2_putch
         i2_lcdNibble
       i2_scale
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
         i2___ftmul
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
   _simulate
     _CCW90
       _PWMC
         i2___awdiv
           i2___awmod (ARG)
       i2_line1
         i2_lcdInst
           i2_lcdNibble
       i2_printf
         i2___awdiv
           i2___awmod (ARG)
         i2___ftadd
           i2___ftpack
           i2_fround (ARG)
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftge
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftmul
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___ftneg
         i2___ftsub
           i2___ftadd
             i2___ftpack
             i2_fround (ARG)
               i2___awdiv
                 i2___awmod (ARG)
               i2___awmod
               i2___ftmul
                 ___awtoft (ARG)
                   i2___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     i2___ftpack
                   i2___ftpack (ARG)
                   i2___ftpack (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
               i2___wmul
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___lltoft (ARG)
             i2___ftpack
         i2___fttol
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___lldiv
         i2___llmod
           i2___lldiv (ARG)
         i2___lltoft
           i2___ftpack
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
         i2__div_to_l_
         i2__tdiv_to_l_
         i2_fround
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2_isdigit
         i2_putch
           i2_lcdNibble
         i2_scale
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
     _CW90
       _PWMC
         i2___awdiv
           i2___awmod (ARG)
       i2_line0
         i2_lcdInst
           i2_lcdNibble
       i2_printf
         i2___awdiv
           i2___awmod (ARG)
         i2___ftadd
           i2___ftpack
           i2_fround (ARG)
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftge
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftmul
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___ftneg
         i2___ftsub
           i2___ftadd
             i2___ftpack
             i2_fround (ARG)
               i2___awdiv
                 i2___awmod (ARG)
               i2___awmod
               i2___ftmul
                 ___awtoft (ARG)
                   i2___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     i2___ftpack
                   i2___ftpack (ARG)
                   i2___ftpack (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
               i2___wmul
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___lltoft (ARG)
             i2___ftpack
         i2___fttol
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___lldiv
         i2___llmod
           i2___lldiv (ARG)
         i2___lltoft
           i2___ftpack
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
         i2__div_to_l_
         i2__tdiv_to_l_
         i2_fround
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2_isdigit
         i2_putch
           i2_lcdNibble
         i2_scale
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
     _HexDecToDec2
       i2___wmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
     _WriteRun
       _WriteEE
       i2___wmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
     _check9
       _AD
       _checkV
         _AD (ARG)
         ___awtoft (ARG)
           i2___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
           i2___ftpack (ARG)
         i2___ftge (ARG)
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftmul (ARG)
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2_line1 (ARG)
           i2_lcdInst
             i2_lcdNibble
         i2_printf (ARG)
           i2___awdiv
             i2___awmod (ARG)
           i2___ftadd
             i2___ftpack
             i2_fround (ARG)
               i2___awdiv
                 i2___awmod (ARG)
               i2___awmod
               i2___ftmul
                 ___awtoft (ARG)
                   i2___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     i2___ftpack
                   i2___ftpack (ARG)
                   i2___ftpack (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
               i2___wmul
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___ftge
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___ftmul (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___ftneg
           i2___ftsub
             i2___ftadd
               i2___ftpack
               i2_fround (ARG)
                 i2___awdiv
                   i2___awmod (ARG)
                 i2___awmod
                 i2___ftmul
                   ___awtoft (ARG)
                     i2___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       i2___ftpack
                     i2___ftpack (ARG)
                     i2___ftpack (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
                   i2___ftpack (ARG)
                   i2___wmul (ARG)
                     i2___awdiv (ARG)
                       i2___awmod (ARG)
                     i2___awmod (ARG)
                 i2___wmul
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
             i2___lltoft (ARG)
               i2___ftpack
           i2___fttol
             i2___ftmul (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___lldiv
           i2___llmod
             i2___lldiv (ARG)
           i2___lltoft
             i2___ftpack
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
           i2__div_to_l_
           i2__tdiv_to_l_
           i2_fround
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2_isdigit
           i2_putch
             i2_lcdNibble
           i2_scale
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
       i2_line0
         i2_lcdInst
           i2_lcdNibble
       i2_printf
         i2___awdiv
           i2___awmod (ARG)
         i2___ftadd
           i2___ftpack
           i2_fround (ARG)
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftge
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftmul
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___ftneg
         i2___ftsub
           i2___ftadd
             i2___ftpack
             i2_fround (ARG)
               i2___awdiv
                 i2___awmod (ARG)
               i2___awmod
               i2___ftmul
                 ___awtoft (ARG)
                   i2___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     i2___ftpack
                   i2___ftpack (ARG)
                   i2___ftpack (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
               i2___wmul
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___lltoft (ARG)
             i2___ftpack
         i2___fttol
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___lldiv
         i2___llmod
           i2___lldiv (ARG)
         i2___lltoft
           i2___ftpack
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
         i2__div_to_l_
         i2__tdiv_to_l_
         i2_fround
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2_isdigit
         i2_putch
           i2_lcdNibble
         i2_scale
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
     _checkAA
       _AD
       _checkV
         _AD (ARG)
         ___awtoft (ARG)
           i2___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
           i2___ftpack (ARG)
         i2___ftge (ARG)
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftmul (ARG)
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2_line1 (ARG)
           i2_lcdInst
             i2_lcdNibble
         i2_printf (ARG)
           i2___awdiv
             i2___awmod (ARG)
           i2___ftadd
             i2___ftpack
             i2_fround (ARG)
               i2___awdiv
                 i2___awmod (ARG)
               i2___awmod
               i2___ftmul
                 ___awtoft (ARG)
                   i2___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     i2___ftpack
                   i2___ftpack (ARG)
                   i2___ftpack (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
               i2___wmul
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___ftge
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___ftmul (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___ftneg
           i2___ftsub
             i2___ftadd
               i2___ftpack
               i2_fround (ARG)
                 i2___awdiv
                   i2___awmod (ARG)
                 i2___awmod
                 i2___ftmul
                   ___awtoft (ARG)
                     i2___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       i2___ftpack
                     i2___ftpack (ARG)
                     i2___ftpack (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
                   i2___ftpack (ARG)
                   i2___wmul (ARG)
                     i2___awdiv (ARG)
                       i2___awmod (ARG)
                     i2___awmod (ARG)
                 i2___wmul
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
             i2___lltoft (ARG)
               i2___ftpack
           i2___fttol
             i2___ftmul (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___lldiv
           i2___llmod
             i2___lldiv (ARG)
           i2___lltoft
             i2___ftpack
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
           i2__div_to_l_
           i2__tdiv_to_l_
           i2_fround
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2_isdigit
           i2_putch
             i2_lcdNibble
           i2_scale
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
       i2_line0
         i2_lcdInst
           i2_lcdNibble
       i2_printf
         i2___awdiv
           i2___awmod (ARG)
         i2___ftadd
           i2___ftpack
           i2_fround (ARG)
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftge
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftmul
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___ftneg
         i2___ftsub
           i2___ftadd
             i2___ftpack
             i2_fround (ARG)
               i2___awdiv
                 i2___awmod (ARG)
               i2___awmod
               i2___ftmul
                 ___awtoft (ARG)
                   i2___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     i2___ftpack
                   i2___ftpack (ARG)
                   i2___ftpack (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
               i2___wmul
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___lltoft (ARG)
             i2___ftpack
         i2___fttol
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___lldiv
         i2___llmod
           i2___lldiv (ARG)
         i2___lltoft
           i2___ftpack
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
         i2__div_to_l_
         i2__tdiv_to_l_
         i2_fround
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2_isdigit
         i2_putch
           i2_lcdNibble
         i2_scale
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
     _checkC
       _AD
       _checkV
         _AD (ARG)
         ___awtoft (ARG)
           i2___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
           i2___ftpack (ARG)
         i2___ftge (ARG)
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftmul (ARG)
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2_line1 (ARG)
           i2_lcdInst
             i2_lcdNibble
         i2_printf (ARG)
           i2___awdiv
             i2___awmod (ARG)
           i2___ftadd
             i2___ftpack
             i2_fround (ARG)
               i2___awdiv
                 i2___awmod (ARG)
               i2___awmod
               i2___ftmul
                 ___awtoft (ARG)
                   i2___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     i2___ftpack
                   i2___ftpack (ARG)
                   i2___ftpack (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
               i2___wmul
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___ftge
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___ftmul (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___ftneg
           i2___ftsub
             i2___ftadd
               i2___ftpack
               i2_fround (ARG)
                 i2___awdiv
                   i2___awmod (ARG)
                 i2___awmod
                 i2___ftmul
                   ___awtoft (ARG)
                     i2___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       i2___ftpack
                     i2___ftpack (ARG)
                     i2___ftpack (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
                   i2___ftpack (ARG)
                   i2___wmul (ARG)
                     i2___awdiv (ARG)
                       i2___awmod (ARG)
                     i2___awmod (ARG)
                 i2___wmul
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
             i2___lltoft (ARG)
               i2___ftpack
           i2___fttol
             i2___ftmul (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___lldiv
           i2___llmod
             i2___lldiv (ARG)
           i2___lltoft
             i2___ftpack
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
           i2__div_to_l_
           i2__tdiv_to_l_
           i2_fround
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2_isdigit
           i2_putch
             i2_lcdNibble
           i2_scale
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
       i2_line0
         i2_lcdInst
           i2_lcdNibble
       i2_printf
         i2___awdiv
           i2___awmod (ARG)
         i2___ftadd
           i2___ftpack
           i2_fround (ARG)
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftge
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftmul
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___ftneg
         i2___ftsub
           i2___ftadd
             i2___ftpack
             i2_fround (ARG)
               i2___awdiv
                 i2___awmod (ARG)
               i2___awmod
               i2___ftmul
                 ___awtoft (ARG)
                   i2___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     i2___ftpack
                   i2___ftpack (ARG)
                   i2___ftpack (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
               i2___wmul
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___lltoft (ARG)
             i2___ftpack
         i2___fttol
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___lldiv
         i2___llmod
           i2___lldiv (ARG)
         i2___lltoft
           i2___ftpack
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
         i2__div_to_l_
         i2__tdiv_to_l_
         i2_fround
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2_isdigit
         i2_putch
           i2_lcdNibble
         i2_scale
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
     _showInfo
       _captureKeypad
       i2_line0
         i2_lcdInst
           i2_lcdNibble
       i2_line1
         i2_lcdInst
           i2_lcdNibble
       i2_printf
         i2___awdiv
           i2___awmod (ARG)
         i2___ftadd
           i2___ftpack
           i2_fround (ARG)
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftge
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftmul
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___ftneg
         i2___ftsub
           i2___ftadd
             i2___ftpack
             i2_fround (ARG)
               i2___awdiv
                 i2___awmod (ARG)
               i2___awmod
               i2___ftmul
                 ___awtoft (ARG)
                   i2___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     i2___ftpack
                   i2___ftpack (ARG)
                   i2___ftpack (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
               i2___wmul
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___lltoft (ARG)
             i2___ftpack
         i2___fttol
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___lldiv
         i2___llmod
           i2___lldiv (ARG)
         i2___lltoft
           i2___ftpack
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
         i2__div_to_l_
         i2__tdiv_to_l_
         i2_fround
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2_isdigit
         i2_putch
           i2_lcdNibble
         i2_scale
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
     _stopMoving
       i2_line0
         i2_lcdInst
           i2_lcdNibble
       i2_printf
         i2___awdiv
           i2___awmod (ARG)
         i2___ftadd
           i2___ftpack
           i2_fround (ARG)
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftge
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___ftmul
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___ftneg
         i2___ftsub
           i2___ftadd
             i2___ftpack
             i2_fround (ARG)
               i2___awdiv
                 i2___awmod (ARG)
               i2___awmod
               i2___ftmul
                 ___awtoft (ARG)
                   i2___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     i2___ftpack
                   i2___ftpack (ARG)
                   i2___ftpack (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
                 i2___ftpack (ARG)
                 i2___wmul (ARG)
                   i2___awdiv (ARG)
                     i2___awmod (ARG)
                   i2___awmod (ARG)
               i2___wmul
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
           i2___lltoft (ARG)
             i2___ftpack
         i2___fttol
           i2___ftmul (ARG)
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___lldiv
         i2___llmod
           i2___lldiv (ARG)
         i2___lltoft
           i2___ftpack
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
         i2__div_to_l_
         i2__tdiv_to_l_
         i2_fround
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2_isdigit
         i2_putch
           i2_lcdNibble
         i2_scale
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
     i2___wmul
       i2___awdiv (ARG)
         i2___awmod (ARG)
       i2___awmod (ARG)
     i2_getTime
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_line0
       i2_lcdInst
         i2_lcdNibble
     i2_line1
       i2_lcdInst
         i2_lcdNibble
     i2_printf
       i2___awdiv
         i2___awmod (ARG)
       i2___ftadd
         i2___ftpack
         i2_fround (ARG)
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___ftge
         ___awtoft (ARG)
           i2___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
           i2___ftpack (ARG)
         i2___ftmul (ARG)
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___ftmul
         ___awtoft (ARG)
           i2___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
           i2___ftpack (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___ftneg
       i2___ftsub
         i2___ftadd
           i2___ftpack
           i2_fround (ARG)
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___lltoft (ARG)
           i2___ftpack
       i2___fttol
         i2___ftmul (ARG)
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___lldiv
       i2___llmod
         i2___lldiv (ARG)
       i2___lltoft
         i2___ftpack
       i2___wmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
       i2__div_to_l_
       i2__tdiv_to_l_
       i2_fround
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
         i2___ftmul
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2_isdigit
       i2_putch
         i2_lcdNibble
       i2_scale
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
         i2___ftmul
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
   _stopMoving
     i2_line0
       i2_lcdInst
         i2_lcdNibble
     i2_printf
       i2___awdiv
         i2___awmod (ARG)
       i2___ftadd
         i2___ftpack
         i2_fround (ARG)
           i2___awdiv
             i2___awmod (ARG)
           i2___awmod
           i2___ftmul
             ___awtoft (ARG)
               i2___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 i2___ftpack
               i2___ftpack (ARG)
               i2___ftpack (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
             i2___ftpack (ARG)
             i2___wmul (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
           i2___wmul
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___ftge
         ___awtoft (ARG)
           i2___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
           i2___ftpack (ARG)
         i2___ftmul (ARG)
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___ftmul
         ___awtoft (ARG)
           i2___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
           i2___ftpack (ARG)
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
         i2___ftpack (ARG)
         i2___wmul (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2___ftneg
       i2___ftsub
         i2___ftadd
           i2___ftpack
           i2_fround (ARG)
             i2___awdiv
               i2___awmod (ARG)
             i2___awmod
             i2___ftmul
               ___awtoft (ARG)
                 i2___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   i2___ftpack
                 i2___ftpack (ARG)
                 i2___ftpack (ARG)
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
               i2___ftpack (ARG)
               i2___wmul (ARG)
                 i2___awdiv (ARG)
                   i2___awmod (ARG)
                 i2___awmod (ARG)
             i2___wmul
               i2___awdiv (ARG)
                 i2___awmod (ARG)
               i2___awmod (ARG)
         i2___lltoft (ARG)
           i2___ftpack
       i2___fttol
         i2___ftmul (ARG)
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
       i2___lldiv
       i2___llmod
         i2___lldiv (ARG)
       i2___lltoft
         i2___ftpack
       i2___wmul
         i2___awdiv (ARG)
           i2___awmod (ARG)
         i2___awmod (ARG)
       i2__div_to_l_
       i2__tdiv_to_l_
       i2_fround
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
         i2___ftmul
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
       i2_isdigit
       i2_putch
         i2_lcdNibble
       i2_scale
         i2___awdiv
           i2___awmod (ARG)
         i2___awmod
         i2___ftmul
           ___awtoft (ARG)
             i2___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
             i2___ftpack (ARG)
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)
           i2___ftpack (ARG)
           i2___wmul (ARG)
             i2___awdiv (ARG)
               i2___awmod (ARG)
             i2___awmod (ARG)
         i2___wmul
           i2___awdiv (ARG)
             i2___awmod (ARG)
           i2___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     74      74       7       45.3%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     36      60       5       75.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     7E      7E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     152      34        0.0%
DATA                 0      0     152       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Mar  6 21:40:21 2017

         i2_I2C_Master_Start 516A           i2_I2C_Master_Write 5138                           _AD 4F4E  
               ___awdiv@sign 010B          ___wmul@multiplicand 0110                  __CFG_BORV$3 000000  
                 i2___ftpack 4396                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                  __CFG_OSC$HS 000000  
               ___ftadd@exp1 0138                 ___ftadd@exp2 0137                   i2___lltoft 4BB0  
                        ?_AD 0001                 ___ftadd@sign 0136                          l420 50B2  
                        l372 50D0                          l552 075A                          l802 309A  
                        l900 2E92                          l834 3914                          l906 2F12  
                        l931 4E8C                          l861 25BA                          l863 25E2  
                        l872 26B8                          l881 26E2                          l857 2580  
                        l981 4384                          l991 456E                          l899 2E4E  
               __CFG_CPB$OFF 000000                          _PEN 007E2A                 __CFG_CPD$OFF 000000  
                        _SEN 007E28          ?i2_I2C_Master_Start 0001          ?i2_I2C_Master_Write 0002  
               ___awmod@sign 0105                          wreg 000FE8                         ??_AD 0003  
               __CFG_LVP$OFF 000000                 ___ftdiv@cntr 0016                 ___ftdiv@sign 001B  
               __CFG_WDT$OFF 000000                         l7011 2648                         l7013 2656  
                       l7005 261A                         l7101 4238                         l7031 270C  
                       l7023 269E                         l7015 2664                         l7201 4EC0  
                       l7041 275A                         l7025 26AC                         l7017 2670  
                       l7113 426C                         l7115 4278                         l7107 424E  
                       l7051 3248                         l7133 42D0                         l7125 42AE  
                       l7117 427E                         l5711 33A6                         l7071 32D0  
                       l7231 23EC                         l7305 2DFA                         l7129 42BC  
                       l7161 44BA                         l7153 4484                         l7145 4460  
                       l7081 330E                         l7057 3282                         l7155 4490  
                       l7075 32EE                         l7421 40CE                         l7413 4C84  
                       l5741 3478                         l5733 344C                         l7405 3080  
                       l7157 4496                         l7165 44C8                         l7149 4470  
                       l7085 332C                         l7253 1768                         l7431 4152  
                       l5743 3482                         l7407 3090                         l7335 2EC8  
                       l7239 24D0                         l7271 19B8                         l7263 1854  
                       l7425 410E                         l5729 3438                         l7361 2F70  
                       l7345 2EF8                         l7169 44DC                         _ADFM 007E07  
                       l5747 349E                         l5739 3468                         l7355 2F4A  
                       l7347 2F08                         l7339 2EDC                         l7259 182E  
                       l7611 0358                         l7603 02E8                         l7523 0038  
                       l7445 4308                         l7277 1A7E                         l7701 0728  
                       l7621 03E2                         l7525 004E                         l7447 4318  
                       l7383 3018                         l7375 2FC4                         l7703 073C  
                       l7631 045A                         l7615 0386                         l7551 0132  
                       l7543 0100                         l7535 0088                         l7519 0022  
                       l7457 4372                         l7449 431E                         l6921 3878  
                       l7473 455C                         l7465 4502                         l7481 48C0  
                       l7289 4F44                         l7801 0AB8                         l7713 0782  
                       l7641 04B8                         l7617 039C                         l7561 0170  
                       l7553 013E                         l7545 0106                         l7529 0058  
                       l6931 3906                         l6923 38A8                         l6915 3856  
                       l7467 4512                         l7395 3050                         l7299 2DC0  
                       l7803 0AC8                         l7811 0BC2                         l7723 08B0  
                       l7707 075E                         l7627 042C                         l7619 03CC  
                       l7731 08DA                         l7563 018A                         l7555 0144  
                       l7547 010C                         l7571 01AA                         l7469 4518  
                       l7805 0B4C                         l7813 0BD4                         l7725 08BE  
                       l7717 07D4                         l7645 051E                         l7557 015C  
                       l7573 01DC                         l7831 4658                         l6943 393A  
                       l6927 38C8                         l6919 386A                         l7479 48B0  
                       l7399 3064                         l7815 0BDC                         l7751 0956  
                       l7735 0904                         l7663 05BA                         l7647 0524  
                       l7567 01A2                         l6937 391E                         l6929 38F8  
                       l7737 090A                         l7729 08CC                         l7673 0610  
                       l7817 0BF2                         l7827 464E                         l7683 0642  
                       l7667 05E2                         l7659 056A                         l7587 0236  
                       _ADON 007E10                         l7837 467C                         l7773 09E2  
                       l7749 0950                         l7765 099C                         l7685 0656  
                       l7677 061E                         l6983 258E                         l7791 0A6C  
                       l7767 09AE                         l7679 0634                         l7695 070C  
                       l7793 0A78                         l7785 0A50                         l7777 0A1A  
                       l7697 071A                         l7689 067E                         l6995 25D8  
                       l7779 0A24                         l6989 25C8                         l7797 0A92  
                       l7889 4CF0        __size_ofi2__div_to_l_ 0128                         _CW90 4EC8  
                       STR_1 FFF6                         STR_2 FCF3                         STR_3 FE40  
                       STR_4 FDAC                         STR_5 FD96                         STR_6 FEF9  
                       STR_7 FE6A                         STR_8 FE2B                         STR_9 FEE5  
                       _LATA 000F89                         _LATB 000F8A                         _LATC 000F8B  
                       _LATD 000F8C                         _LATE 000F8D                 printf@tmpval 015D  
                       u6071 3382                         u6090 33CC                         u7131 252E  
                       _RCEN 007E2B                         u7141 254C                         u8030 027C  
                       u6095 33C2                         u8035 0270                         u7341 3224  
                       u7520 4EBE                         u7361 325E                         u8250 0752  
                       u7641 2D9C                         u8507 4710                         u8517 498E  
                       u7661 2DD6                         u8527 4D48                         u8537 4D7C  
                       u8547 4AA2                         u7925 4B80                         u8557 4AAC  
                       u8567 4AD8                         u8577 4AE2                         u8497 4CD4  
                       _PWMC 3D22                checkAA@sorted 0079                         _back 506C  
                       _main 4CAE                 ___ftpack@arg 0100                         _mode 00D6  
               ___ftpack@exp 0103                         _time 00D9                         fsr0h 000FEA  
                       fsr1h 000FE2                         fsr2h 000FDA                         fsr0l 000FE9  
                       indf2 000FDF                         fsr1l 000FE1                         fsr2l 000FD9  
                       btemp 007F                 i2___ftadd@f1 0035                 i2___ftadd@f2 0038  
       ??i2_I2C_Master_Start 0002                 i2___ftge@ff1 002B                 i2___ftge@ff2 002E  
       ??i2_I2C_Master_Write 0004                         prodh 000FF4                         prodl 000FF3  
            ReadRun@backruns 000B                         start 000E              __end_ofi2_line0 5182  
            __end_ofi2_line1 517A                __CFG_IESO$OFF 000000         __end_of_HexDecToDec2 4D40  
               simulate@stop 0090              __end_ofi2_scale 1E94                 i2___ftneg@f1 0001  
                 ReadRun@add 000C              __end_ofi2_putch 5122                __CFG_MCLRE$ON 000000  
               ___ftmul@cntr 0121                 i2___ftmul@f1 001C                 i2___ftmul@f2 001F  
               ___param_bank 000000                 ___ftmul@sign 0122                 i2___ftsub@f1 0041  
               i2___ftsub@f2 0044                 i2___fttol@f1 002B                   i2getTime@i 0006  
                i2_lcdNibble 4C0C              __end_of_ReadRun 3714                 ___fttol@exp1 0138  
            __end_of_PermLog 4826                 i2___lltoft@c 0009                 ___fttol@lval 0134  
                      ?_CW90 0071             ?_I2C_Master_Init 010D             ?_I2C_Master_Read 0001  
                      ?_PWMC 000F             ?_I2C_Master_Wait 0001             ?_I2C_Master_Stop 0001  
                      ?_back 0001                        ?_main 016D                        _ACKEN 007E2C  
                      _ACKDT 007E2D                        _CCW90 4EF6              __end_of___awdiv 42DA  
                      _EEADR 000FA9              __end_of___ftadd 2780                        STR_10 FE55  
                      STR_11 FE16                        STR_12 FE94                        STR_20 FCDB  
                      STR_13 FE7F                        STR_21 FCAB                        STR_30 FF97  
                      STR_14 FF66                        STR_22 FE01                        STR_31 FDC2  
                      STR_23 FCC3                        STR_15 FC77                        STR_32 FF97  
                      STR_24 FD69                        STR_40 FD3B                        STR_16 FD0B  
                      STR_41 FF77                        STR_33 FF55                        STR_25 FDD7  
                      STR_17 FD23                        STR_50 FFEB                        STR_42 FFD2  
                      STR_26 FF97                        STR_18 FF0D                        STR_34 FEBD  
                      STR_43 FD82                        STR_51 FFDF                        STR_27 FED1  
                      STR_35 FEA9                        STR_19 FC92                        STR_28 FF97  
                      STR_52 FF44                        STR_36 FF32                        STR_44 FD80  
            __end_of___awmod 44E6                        STR_45 FFA7                        STR_37 FF20  
                      STR_29 FDEC                        STR_46 FFC4                        STR_38 FFB6  
                      STR_39 FD3D                        STR_47 FD54                        STR_48 FD52  
                      STR_49 FF87              __end_of___ftdiv 3EFA              __end_of___ftneg 4E9A  
            __end_of_WriteEE 4FC4              __end_of___lldiv 4396              __end_of___ftmul 336C  
            ___awdiv@divisor 0108              __end_of___llmod 4580              __end_of___ftsub 4CAE  
            __end_of___fttol 34B0                        _LATC0 007C58                        _LATC1 007C59  
                      _LATC2 007C5A                        _LATC5 007C5D                        i2l220 505C  
                      i2l144 3AFC                        i2l217 5050                        i2l305 4F5C  
                      i2l145 3A8C                        i2l314 3A3C                        i2l420 50C8  
                      i2l236 2B86                        i2l265 3D5A                        i2l426 4FBA  
                      i2l283 4E68                        i2l372 50E4                        i2l552 1200  
                      i2l802 382A                        i2l900 356A                        i2l834 4424  
                      i2l906 35D0                        i2l931 5000                        i2l861 2C48  
                      i2l872 2CF8                        i2l881 2D14                        i2l857 2C1E  
                      i2l892 3EC8              ___awdiv@counter 010A                        i2l981 4896  
                      i2l991 4B3E                        i2l899 3542              __end_of_checkAA 421C  
                      _PORTB 000F81                 i2__div_to_l_ 3714                        _TRISA 000F92  
                      _TRISB 000F93                        _TRISC 000F94                        _TRISD 000F95  
                      _TRISE 000F96                __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000  
              __CFG_WRT1$OFF 000000                simulate@F3102 00D2                simulate@F3104 00CE  
              simulate@F3113 00BC                simulate@F3106 00CA                simulate@F3115 00B6  
              __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000                 ___lltoft@exp 0110  
            __end_of_lcdInst 5116               __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000  
            __end_of_getTime 469A               __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000  
             __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000  
              __CFG_WRTD$OFF 000000              __end_of_initLCD 4D86               __CFG_EBTRB$OFF 000000  
                 i2isdigit@c 0003                ___awtoft@sign 000C              __end_of_dpowers FC09  
           __end_ofi2_ReadEE 50D0                        _line0 514A                        _line1 5142  
                 i2scale@scl 0031                        _scale 15F6              __end_of_isdigit 4F4E  
              ___ftpack@sign 0104                        _putch 50F6                        pclath 000FFA  
            __end_of_showRTC 4720                        tablat 000FF5             __end_ofi2___ftge 4610  
           __end_ofi2___wmul 4FEA                        plusw1 000FE3                        plusw2 000FDB  
                      status 000FD8                simulate@start 009C             __end_ofi2_fround 29C6  
         __size_ofi2___awdiv 0084           __size_ofi2___ftadd 01AC           __size_ofi2___awmod 0070  
             __CFG_PBADEN$ON 000000                i2printf@width 006E           __size_ofi2___ftneg 0024  
         __size_ofi2___lldiv 0082           __size_ofi2___ftmul 00F4           __size_ofi2___llmod 0066  
         __size_ofi2___ftsub 0040           __size_ofi2___fttol 00F4             __end_ofi2_printf 15F6  
               __end_of_CW90 4EF6                  ReadRun@time 0005                 __end_of_PWMC 3E14  
            __initialization 5088            i2___lldiv@divisor 0005                 __end_of_back 5088  
         __size_ofi2_lcdInst 000C                 __end_of_main 4CF8           __size_ofi2_getTime 0076  
          i2___lldiv@counter 000D                i2___ftmul@exp 0025                   i2printf@ap 0059  
                 i2printf@cp 0056                ReadEE@address 0100                       ??_CW90 0073  
         __size_ofi2_isdigit 001E                       ??_PWMC 0015                  ?i2___ftpack 0001  
                     ??_back 0001                  ?i2___lltoft 0009                       ??_main 0172  
              ___fttol@sign1 0133                       ?_CCW90 0071                __activetblptr 000002  
       __size_of__tdiv_to_l_ 019E            ?_I2C_Master_Start 0001            ?_I2C_Master_Write 0101  
                  CCW90@port 0071           ??_I2C_Master_Start 0101                       _ADCON0 000FC2  
                     _ADCON1 000FC1           ??_I2C_Master_Write 0103                       ?_line0 0001  
                     ?_line1 0001             ___llmod@dividend 010D                       ?_scale 0123  
                     _ADRESH 000FC4                       _EEADRH 000FAA                       _ADRESL 000FC3  
                     _EEDATA 000FA8                       _EECON2 000FA7             ___awdiv@dividend 0106  
            i2lcdNibble@data 0002             __end_of___awtoft 4DFE                       ?_putch 0001  
           __end_of___ftpack 3948              i2lcdNibble@temp 0001             __end_of___lltoft 4924  
                     _INT1IE 007F83                       _INT1IF 007F80             __end_of_WriteRun 320E  
                     _CVRCON 000FB5                       i2l4211 4762                       i2l4203 4744  
                     i2l4141 43DC                       i2l4133 43A6                       i2l4221 4782  
                     i2l4213 4766                       i2l4311 2CC4                       i2l5103 0DD0  
                     i2l5023 4DDA                       i2l4145 43F2                       i2l4137 43B4  
                     i2l4305 2CA8                       i2l4209 475A                       i2l4225 478C  
                     i2l4241 4A26                       i2l5201 1122                       i2l5041 0C42  
                     i2l4147 4410                       i2l4139 43BE                       i2l4307 2CB2  
                     i2l4251 4A48                       i2l5211 11C6                       i2l5131 0EE8  
                     i2l5051 0C76                       i2l5035 0C1E                       i2l4149 441A  
                     i2l4325 2D30                       i2l4317 2CE6                       i2l4309 2CBC  
                     i2l4229 479A                       i2l4253 4A4C                       i2l4261 4A6A  
                     i2l4245 4A32                       i2l5301 147A                       i2l5213 11D0  
                     i2l5205 113E                       i2l5133 0EF8                       i2l5061 0CD8  
                     i2l5045 0C48                       i2l4335 2D60                       i2l4319 2CF0  
                     i2l4503 3750                       i2l4351 3B8A                       i2l5223 1204  
                     i2l5143 0F6A                       i2l5135 0F26                       i2l5127 0EC4  
                     i2l5119 0E60                       i2l5071 0D02                       i2l5063 0CDC  
                     i2l5039 0C30                       i2l4265 4A78                       i2l4257 4A60  
                     i2l4249 4A40                       i2l4345 3B62                       i2l4441 28C6  
                     i2l5321 154A                       i2l5313 14AC                       i2l5241 134A  
                     i2l5233 126C                       i2l5217 11DC                       i2l5161 1046  
                     i2l5137 0F36                       i2l5073 0D14                       i2l4611 45B0  
                     i2l4283 2C56                       i2l4603 35BE                       i2l5331 15CA  
                     i2l5307 1490                       i2l5251 1386                       i2l5219 11EA  
                     i2l5163 104A                       i2l5147 0F8E                       i2l5083 0D4C  
                     i2l5067 0CF2                       i2l5059 0CD4                       i2l6211 41D4  
                     i2l4621 460C                       i2l4277 2C2C                       i2l4701 4848  
                     i2l4541 3800                       i2l4525 37C2                       i2l4517 3792  
                     i2l4605 35CA                       i2l4197 4734                       i2l4365 3BBC  
                     i2l5309 1498                       i2l5317 14C6                       i2l5253 138A  
                     i2l5245 1356                       i2l5229 121C                       i2l5157 0FE2  
                     i2l5077 0D26                       i2l5069 0CFC                       i2l5333 15DA  
                     i2l5413 3DFC                       i2l6301 403C                       i2l6205 41CA  
                  ??i2_line0 0004                    ??i2_line1 0004                       i2l4615 45E0  
                     i2l4703 4854                       i2l4375 3BE4                       i2l4463 1BD8  
                     i2l5319 14D2                       i2l5327 15B4                       i2l5239 1340  
                     i2l5183 10CC                       i2l5175 1082                       i2l5247 1360  
                     i2l5079 0D3A                       i2l5087 0D52                       i2l5407 3DE4  
                     i2l4633 4D9C                       i2l4713 4888                       i2l4705 4858  
                     i2l4721 4AFC                       i2l4537 37F0                       i2l4369 3BCC  
                     i2l4449 2986                       i2l4481 1DCC                       i2l4473 1CA0  
                     i2l5329 15C4                       i2l5265 13C2                       i2l5281 13FE  
                     i2l5193 10F8                       i2l5089 0D80                       i2l5417 3E0C  
                     i2l5409 3DEE                       i2l6225 3F0C                       i2l4299 2C86  
                     i2l4643 3C5A                       i2l4723 4B08                       i2l4547 3818  
                     i2l4563 3508                       i2l4379 3BF4                       i2l5267 13C6  
                     i2l5283 140E                       i2l5195 1108                       i2l5179 10B2  
                     i2l6411 2B16                       i2l5443 39CE                       i2l6307 4046  
                     i2l6235 3F34                       i2l4661 3CC0                       i2l4725 4B0C  
                     i2l4549 3824                       i2l4557 34DC                       i2l4469 1C7C  
                     i2l5293 1454                       i2l5189 10EC                       i2l6405 2ADE  
                     i2l5437 39C4                       i2l6253 3F72                       i2l6245 3F5C  
                     i2l4671 3CE8                       i2l4735 4BB6                       i2l4487 1E70  
                     i2l5295 145C                       i2l5199 1114                       i2l6423 2B88  
                     i2l5391 3D84                       i2l6503 49F6                       i2l4673 3CF4  
                     i2l4665 3CD0                       i2l4729 4B30                       i2l4737 4BC2  
                     i2l4497 3732                       i2l4593 3596                       i2l5289 1430  
                     i2l6417 2B4E                       i2l6425 2B92                       i2l6441 30CE  
                     i2l6273 3FD6                       i2l6177 4168                       i2l5483 5084  
                     i2l4675 3CFA                       i2l4691 5046                       i2l6427 2BD0  
                     i2l5379 3D4C                       i2l6283 3FFE                       i2l6187 418C  
                     i2l6259 3F7C                       i2l6603 206C                       i2l4597 35A6  
                     i2l4853 3E64                       i2l8061 4074                       i2l6293 4026  
                     i2l6197 41B4                       i2l8053 3FAA                       i2l5821 4F98  
                     i2l6621 20E6                       i2l6541 1EFC                       i2l4679 3D10  
                     i2l5399 3DB4                       i2l4847 3E3C                       i2l8063 4084  
                     i2l8055 3FBA                       i2l6607 207C                       i2l6393 2A2E  
                     i2l6385 29F6                       i2l4873 3EA2                       i2l8057 4202  
                     i2l6369 4E4E                       i2l6721 3AC8                       i2l6713 3AB4  
                     i2l6705 3A92                       i2l6387 2A04                       i2l8059 4212  
                     i2l6563 1FAC                       i2l6555 1F84                       i2l6493 49D2  
                     i2l6399 2AAA                       i2l6583 200C                       i2l6575 1FE4  
                     i2l6567 1FBC                       i2l6647 220C                       i2l6727 3ADA  
                     i2l6497 49DA                       i2l6595 2044                       i2l6587 201C  
                     u421_41 34C0                       u423_41 34EC                    ??i2_scale 002E  
                     u435_41 3C3E                       u372_41 2BEA                       u373_41 2BFE  
                     u393_41 3B4A                       u395_41 3B72                       u475_41 3E24  
                     u477_41 3E4C                    ??i2_putch 0003                       _SSPADD 000FC8  
                     _TRISC3 007CA3                       _TRISC4 007CA4                       _SSPBUF 000FC9  
                  AD@channel 0005                checkV@voltage 0071       __size_ofi2__tdiv_to_l_ 0132  
                  ??_ReadRun 0007                       _ReadEE 50A2                    ??_PermLog 0080  
                     _Latest 00D8               __CFG_XINST$OFF 000000        __end_of_captureKeypad 506C  
               i2_scale$1668 002E             __end_of__powers_ FC30                       ___ftge 408E  
                     ___wmul 4DFE                       _check9 3FC4                       _checkC 3EFA  
                  ??___awdiv 010A                       _checkV 3948                    ??___ftadd 0133  
             __CFG_STVREN$ON 000000                    ??___awmod 0104                    ??___ftdiv 0013  
                  ??___ftneg 0103                    ??_WriteEE 0004                    ??___lldiv 0108  
                  ??___ftmul 011A                    ??___llmod 0115                    ??___ftsub 013F  
                  ??___fttol 012E                    ??_checkAA 007B                       _fround 226C  
                     clear_0 508E             ___awdiv@quotient 010C              ___awmod@divisor 0102  
            ___awmod@counter 0104                    ??_lcdInst 0102                       _printf 0012  
                  ??_getTime 0105               i2___awdiv@sign 000C        ___ftmul@f3_as_product 011E  
                PermLog@time 0087                    ??_initLCD 0103                    ??_isdigit 0100  
          __end_ofi2___awdiv 47A4            __end_ofi2___ftadd 2D86            __end_ofi2___awmod 4A82  
             i2___ftadd@exp1 0040               i2___ftadd@exp2 003F            __end_ofi2___ftneg 500E  
          __end_ofi2___lldiv 48A8            __end_ofi2___ftmul 3C2E             __end_of_showInfo 2BDA  
          __end_ofi2___llmod 4B50            __end_ofi2___ftsub 4DC6            __end_ofi2___fttol 3D22  
             i2___ftadd@sign 003E                 __mediumconst FBE0                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8             __end_of_simulate 226C  
                  ??_showRTC 016B               i2___awmod@sign 0006            __end_ofi2_lcdInst 512E  
          __end_ofi2_getTime 4A12               simulate@period 00A4               simulate@portCW 0084  
      __size_of_HexDecToDec2 0048            __end_ofi2_isdigit 504E               simulate@sorted 00A0  
                 __accesstop 0080      __end_of__initialization 5094                   ___ftadd@f1 012D  
                 ___ftadd@f2 0130          __size_ofi2___ftpack 00AE               i2printf@tmpval 0063  
                 ___ftge@ff1 0100                   ___ftge@ff2 0103                __end_of_CCW90 4F24  
        __size_ofi2___lltoft 005C                ___rparam_used 000001                   ___ftdiv@f1 000D  
                 ___ftdiv@f2 0010                   ___ftdiv@f3 0017                   ___ftneg@f1 0100  
                 ___awtoft@c 0009               i2___ftpack@arg 0001           i2__tdiv_to_l_@exp1 000F  
          i2___llmod@divisor 0012               i2___ftpack@exp 0004           i2__tdiv_to_l_@cntr 000E  
          i2___llmod@counter 0016           i2__tdiv_to_l_@quot 000A                   ___ftmul@f1 0114  
                 ___ftmul@f2 0117                   ___ftsub@f1 0139                   ___ftsub@f2 013C  
                 ___fttol@f1 012A               __pcstackCOMRAM 0001           i2___lldiv@dividend 0001  
                 ___lltoft@c 0108                __end_of_line0 5152                __end_of_line1 514A  
             i2___ftmul@cntr 0029                __end_of_scale 1AA4               i2___ftmul@sign 002A  
                  ?i2_ReadEE 0001                __end_of_putch 5106                  i2printf@idx 0058  
                i2printf@len 005B                  i2printf@exp 0067                  i2printf@val 005D  
                 __end_of_AD 4F78               i2___fttol@exp1 0039               i2___fttol@lval 0035  
                    ??_CCW90 0073                    ?i2___ftge 002B                    ?i2___wmul 000F  
              i2__tdiv_to_l_ 34B0           __size_of_lcdNibble 0068                   __div_to_l_ 2F24  
                i2putch@data 0003                 _HexDecToDec2 4CF8                    ?i2_fround 002B  
          HexDecToDec2@digit 001C                    ?i2_printf 0047            HexDecToDec2@tenth 001A  
                    ??_line0 0103                      ??_line1 0103              __div_to_l_@exp1 010B  
            __div_to_l_@cntr 010A                      ??_scale 0126               i2___lltoft@exp 0011  
            __div_to_l_@quot 0106                      ??_putch 0102           i2___lldiv@quotient 0009  
                 back@result 0002                   __pbssBANK0 00B6             i2__tdiv_to_l_@f1 0001  
           i2__tdiv_to_l_@f2 0004                __div_to_l_@f1 0100                __div_to_l_@f2 0103  
                    ?_ReadEE 0100                 stopMoving@em 0073                      ?___ftge 0100  
               WriteRun@time 0017                 ?i2_lcdNibble 0001                      ?___wmul 010E  
                    ?_check9 0079                      ?_checkC 0079                      ?_checkV 0071  
                 ??i2_ReadEE 0003                      ?_fround 0123                    ?___awtoft 0009  
                  ?___ftpack 0100                      ?_printf 013F                    ?___lltoft 0108  
                  ?_WriteRun 0015               ?i2__tdiv_to_l_ 0001                   ??i2___ftge 0031  
                 ??i2___wmul 0013               WriteRun@sorted 0015                   ??i2_fround 002E  
                 ??i2_printf 004D                      _SSPCON1 000FC6                      _SSPCON2 000FC5  
                    _SSPSTAT 000FC7                      i2_line0 517A                      i2_line1 5172  
                    i2_scale 1AA4                      i2_putch 5116               _stopMoving$556 0071  
__size_ofi2_I2C_Master_Start 0008            __end_of_lcdNibble 4AEA                      _ReadRun 35E2  
__size_ofi2_I2C_Master_Write 000A                      _PermLog 47A4            __end_of__npowers_ FC57  
                    __Hparam 0000                   _scale$1449 0126              __size_of_ReadEE 0018  
                    __Lparam 0000                   _initLatest 500E                    ?_showInfo 0071  
            __size_of___ftge 00C8                    ?_simulate 0001                      ___awdiv 421C  
                    ___ftadd 2518                      ___awmod 4444                      ___ftdiv 3E14  
                    ___ftneg 4E6A                      _WriteEE 4F9E                      ___lldiv 42DA  
            __size_of___wmul 0036                      ___ftmul 320E              __size_of_check9 00CA  
                    ___llmod 44E6                      ___ftsub 4C62                      ___fttol 336C  
            __size_of_checkC 00CA              __size_of_checkV 00FA                      _checkAA 4156  
                    __pcinit 5088                 ??i2___ftpack 0006                   ??___awtoft 000C  
                 ??___ftpack 0105              __size_of_fround 02AC      i2___ftmul@f3_as_product 0026  
                    __ramtop 1000                   _initialize 4924                 ??i2___lltoft 000D  
                    _lcdInst 5106                   ??___lltoft 010C                   ??_WriteRun 0019  
                    __ptext0 4CAE                      __ptext1 469A                      __ptext2 0012  
                    __ptext3 15F6                      _getTime 4610                      __ptext4 50F6  
                    __ptext5 4F24                      __ptext6 226C                      __ptext7 4DFE  
                    __ptext8 320E                      __ptext9 4444              __size_of_printf 0C00  
               PermLog@F3084 00C2                i2_fround$1666 0031                i2_fround$1667 002E  
                    _initLCD 4D40            __end_of_hexpowers FC77                  ?__div_to_l_ 0100  
                    _dpowers FBE1                 i2fround@prec 0034                      _isdigit 4F24  
           ___awmod@dividend 0100                   _keypressed 0008     __size_of_I2C_Master_Init 0060  
   __size_of_I2C_Master_Read 002E                      _showRTC 469A     __size_of_I2C_Master_Wait 0014  
   __size_of_I2C_Master_Stop 0008               __pintcode_body 3A42         end_of_initialization 5094  
              __Lmediumconst FBE0                      int_func 3A42          i2___wmul@multiplier 000F  
         __end_ofi2___ftpack 4444    __size_of_I2C_Master_Start 0008           __end_ofi2___lltoft 4C0C  
  __size_of_I2C_Master_Write 000A              ___lldiv@divisor 0104              ___lldiv@counter 010C  
                  _PWMC$1442 0017                    _PWMC$1443 0018                    _PWMC$1444 0019  
                 ??_showInfo 0075                      printf@c 016A                      printf@f 013F  
           I2C_Master_Init@c 010D             I2C_Master_Read@a 0101                      postdec2 000FDD  
                 ??_simulate 0080                      postinc0 000FEE                      postinc2 000FDE  
             __tdiv_to_l_@f1 0100               __tdiv_to_l_@f2 0103              ??i2__tdiv_to_l_ 0007  
              ??__tdiv_to_l_ 0106                    _PORTBbits 000F81                  PWMC@widthus 000F  
            simulate@portCCW 008A            i2_I2C_Master_Read 4F78            i2_I2C_Master_Wait 50E4  
          i2_I2C_Master_Stop 5162                    i2___awdiv 4720                    i2___ftadd 2BDA  
                  i2___awmod 4A12                    i2___ftneg 4FEA                    i2___lldiv 4826  
                  i2___ftmul 3B3A                    i2___llmod 4AEA                    i2___ftsub 4D86  
                  i2___fttol 3C2E           ?i2_I2C_Master_Read 0001           ?i2_I2C_Master_Wait 0001  
         ?i2_I2C_Master_Stop 0001                    i2_lcdInst 5122                    i2_getTime 499C  
                ___ftdiv@exp 001A                  printf@width 0168              PermLog@backruns 0086  
         i2___llmod@dividend 000E           i2___awdiv@dividend 0007                   _stopMoving 4E34  
        ??i2_I2C_Master_Read 0002              i2___ftpack@sign 0005                    i2_isdigit 5030  
        ??i2_I2C_Master_Wait 0001          ??i2_I2C_Master_Stop 0002          __size_of__div_to_l_ 0188  
              ReadRun@sorted 0003                  simulate@now 0098                 check9@sorted 0079  
                ___ftmul@exp 011D               __end_of_ReadEE 50BA                  ?_initLatest 0001  
             __end_of___ftge 4156               __end_of___wmul 4E34               __end_of_check9 408E  
             __end_of_checkC 3FC4               __end_of_checkV 3A42         __size_ofi2_lcdNibble 0056  
                ?_initialize 0001                i2lcdInst@data 0003                 checkC@sorted 0079  
             __end_of_fround 2518            __size_ofi2_ReadEE 0016             i2___wmul@product 0013  
             __end_of_printf 0C12                i2_printf$1669 0053                 i2printf@flag 0069  
            i2ReadEE@address 0001    __end_ofi2_I2C_Master_Read 4F9E                 i2printf@fval 006B  
  __end_ofi2_I2C_Master_Wait 50F6                 i2printf@prec 0061          start_initialization 5088  
  __end_ofi2_I2C_Master_Stop 516A            __size_ofi2___ftge 0090                  ?_keypressed 0001  
         i2___awdiv@quotient 000D            __size_ofi2___wmul 0026          __end_of__tdiv_to_l_ 2F24  
                  i2printf@c 0070                    i2printf@f 0047       __size_of_captureKeypad 001E  
      i2I2C_Master_Read@temp 0003              i2___fttol@sign1 0034            __size_ofi2_fround 0246  
                 ?i2___awdiv 0007                   ?i2___ftadd 0035                   ?i2___awmod 0001  
                 ?i2___ftneg 0001                   ?i2___lldiv 0001                   ?i2___ftmul 001C  
                 ?i2___llmod 000E                   ?i2___ftsub 0041                   ?i2___fttol 002B  
              i2getTime@time 0004            __size_ofi2_printf 09E4            ??_I2C_Master_Init 0111  
          ??_I2C_Master_Read 0101            ??_I2C_Master_Wait 0100                   ?i2_lcdInst 0001  
          ??_I2C_Master_Stop 0101                   ?i2_getTime 0004              ___llmod@divisor 0111  
            ___llmod@counter 0115                  _checkV$1665 0076                   ?i2_isdigit 0001  
                   ??_ReadEE 0102                     CW90@port 0071                     ??___ftge 0106  
                   ??___wmul 0112                     ??_check9 007B                     ??_checkC 007B  
                   ??_checkV 0076             __CFG_LPT1OSC$OFF 000000                     ??_fround 0126  
                   ??_printf 0147                  WriteEE@data 0003                   fround@prec 012C  
              ?i2__div_to_l_ 0001            __size_of___awtoft 0038            __size_of___ftpack 010C  
          __size_of___lltoft 007C            __size_of_WriteRun 0162                __pcstackBANK0 0080  
              __pcstackBANK1 0100                 _isdigit$1089 0101          __size_of_initLatest 0022  
                   ?i2_line0 0001                     ?i2_line1 0001                     ?i2_scale 002B  
                   ?i2_putch 0001          __size_of_initialize 0078                  ?_stopMoving 0001  
           _I2C_Master_Start 515A                     ?_ReadRun 0003          i2I2C_Master_Write@d 0002  
           _I2C_Master_Write 512E                     ?_PermLog 0001            __CFG_CCP2MX$PORTC 000000  
                WriteRun@add 001B                _captureKeypad 504E          __size_of_keypressed 3B32  
                  __pintcode 0008                __pmediumconst FBE0                    _lcdNibble 4A82  
                   ?___awdiv 0106                     ?___ftadd 012D                     ?___awmod 0100  
                   ?___ftdiv 000D                     ?___ftneg 0100                     ?_WriteEE 0001  
                   ?___lldiv 0100                     ?___ftmul 0114                     ?___llmod 010D  
                   ?___ftsub 0139                    __npowers_ FC30                     ?___fttol 012A  
          __size_of_showInfo 0214                     ?_checkAA 0079            __size_of_simulate 03D8  
                   ?_lcdInst 0001                  __tdiv_to_l_ 2D86                     ?_getTime 0103  
                   PWMC@port 0013               ??i2__div_to_l_ 0007               __size_of_CCW90 002E  
               ??__div_to_l_ 0106                     ?_initLCD 0001                     ?_isdigit 0001  
 __size_ofi2_I2C_Master_Read 0026   __size_ofi2_I2C_Master_Wait 0012   __size_ofi2_I2C_Master_Stop 0008  
                  checkV@max 0073                     ?_showRTC 0001                    _hexpowers FC57  
                ??i2___awdiv 000B                  ??i2___ftadd 003B               __size_of_line0 0008  
             __size_of_line1 0008                  ??i2___awmod 0005                  ??i2___ftneg 0004  
                ??i2___lldiv 0009                  ??i2___ftmul 0022               __size_of_scale 04AE  
                ??i2___llmod 0016                  ??i2___ftsub 0047                  ??i2___fttol 002F  
             __size_of_putch 0010                  __size_of_AD 002A   __end_ofi2_I2C_Master_Start 5172  
 __end_ofi2_I2C_Master_Write 5142                  ??i2_lcdInst 0003                  ??i2_getTime 0006  
             ___wmul@product 0112                     _LATDbits 000F8C                  ??i2_isdigit 0001  
                   i2u510_40 0E08                     i2u510_45 0DFE           __end_of__div_to_l_ 30AC  
             ?_captureKeypad 0001                     _PIR2bits 000FA1                     i2u532_40 11FA  
                   i2u437_40 3C78                     i2u437_45 3C70                     i2u622_40 4F96  
                   i2u561_45 3D8C                     i2u561_46 3D8E                     i2u564_45 3DBC  
                   i2u564_46 3DBE                     i2u567_45 3DEC                     i2u567_46 3DEE  
                   i2u690_41 1F54                     i2u682_45 4D04                     i2u860_47 4C24  
                   i2u861_47 4C2E                     i2u686_40 30C2                     i2u862_47 4C50  
                   i2u863_47 4C5A                     i2u697_40 20DC                     i2u689_41 1F42  
                   i2u698_40 2202                     i2u858_47 3DFE                     i2u859_47 4804  
           __CFG_WDTPS$32768 000000                   PWMC@cycles 0011                   ?_lcdNibble 0001  
            i2__div_to_l_@f1 0001              i2__div_to_l_@f2 0004                     i2_ReadEE 50BA  
                 _ADCON0bits 000FC2            ___wmul@multiplier 010E                     i2___ftge 4580  
                   i2___wmul 4FC4                lcdNibble@data 0101                 testADC@F3120 00C6  
                 printf@flag 0163                lcdNibble@temp 0100                   printf@fval 0165  
                 printf@prec 015B                   simulate@AA 0092          __size_of_stopMoving 0036  
                 simulate@V9 0096            i2___awdiv@divisor 0009                     i2_fround 2780  
          i2___awdiv@counter 000B                     i2_printf 0C12        captureKeypad@keypress 0003  
        I2C_Master_Read@temp 0102           i2___awmod@dividend 0001             __size_ofi2_line0 0008  
           __size_ofi2_line1 0008             __size_ofi2_scale 03F0             __size_ofi2_putch 000C  
                 _EECON1bits 000FA6           keypressed@keypress 007E               showInfo@sorted 0073  
                   __Hrparam 0000             __size_of_ReadRun 0132                     __Lrparam 0000  
           __size_of_PermLog 0082                 ??_initLatest 0102           __CFG_BOREN$SBORDIS 000000  
           __size_of___awdiv 00BE             __size_of___ftadd 0268             __size_of___awmod 00A2  
           __size_of___ftdiv 00E6             __size_of___ftneg 0030        i2___wmul@multiplicand 0011  
           __size_of_WriteEE 0026             __size_of___lldiv 00BC             __size_of___ftmul 015E  
           __size_of___llmod 009A             __size_of___ftsub 004C             __size_of___fttol 0144  
               ??_initialize 0115                     ___awtoft 4DC6                     ___ftpack 383C  
           __size_of_checkAA 00C6                  _fround$1447 0129                  _fround$1448 0126  
                   ___lltoft 48A8        __end_ofi2__tdiv_to_l_ 35E2                     _WriteRun 30AC  
         i2I2C_Master_Read@a 0002             __size_of_lcdInst 0010             __size_of_getTime 008A  
            HexDecToDec2@hex 0015              _I2C_Master_Init 4B50              _I2C_Master_Read 4E9A  
           __size_of_initLCD 0046                     back@runs 0001                ?_HexDecToDec2 0015  
            _I2C_Master_Wait 50D0              _I2C_Master_Stop 5152                 ??_keypressed 00A6  
           __size_of_isdigit 002A                     __ptext10 421C                     __ptext11 2D86  
                   __ptext20 408E                     __ptext12 2F24                     __ptext21 5142  
                   __ptext13 48A8                     __ptext30 500E                     __ptext22 514A  
                   __ptext14 44E6                     __ptext31 50A2                     __ptext23 4610  
                   __ptext15 336C                     __ptext40 5138                     __ptext32 4D40  
                   __ptext24 512E                     __ptext16 4C62                     __ptext41 5162  
                   __ptext33 5106                     __ptext25 5152                     __ptext17 2518  
                   __ptext50 3E14                     __ptext42 516A                     __ptext34 4A82  
                   __ptext26 515A                     __ptext18 383C                     __ptext51 4DC6  
                   __ptext43 4F78                     __ptext35 4B50                     __ptext27 4E9A  
                   __ptext19 4E6A                     __ptext60 29C6                     __ptext52 4F4E  
                   __ptext44 50E4                     __ptext36 42DA                     __ptext28 50D0  
                   __ptext61 0C12                     __ptext53 30AC                     __ptext45 4E34  
                   __ptext29 4924                     __ptext70 34B0                     __ptext62 1AA4  
                   __ptext54 4F9E                     __ptext46 3EFA                     __ptext38 1E94  
                   __ptext71 3714                     __ptext63 5116                     __ptext55 4CF8  
                   __ptext47 4156                     __ptext39 499C                     __ptext80 4580  
                   __ptext72 4BB0                     __ptext64 5030                     __ptext56 4EC8  
                   __ptext48 3FC4                     __ptext81 5172                     __ptext73 4AEA  
                   __ptext65 2780                     __ptext57 4EF6                     __ptext49 3948  
                   __ptext82 517A                     __ptext74 4826                     __ptext66 4FC4  
                   __ptext58 3D22                     __ptext83 5122                     __ptext75 3C2E  
                   __ptext67 3B3A                     __ptext59 47A4                     __ptext84 4C0C  
                   __ptext76 4D86                     __ptext68 4A12                     __ptext85 504E  
                   __ptext77 2BDA                     __ptext69 4720                     __ptext86 35E2  
                   __ptext78 4396                     __ptext87 50BA                     __ptext79 4FEA  
                   __ptext88 506C             __size_of_showRTC 0086                     __powers_ FC09  
         __end_of_initLatest 5030                __size_of_CW90 002E                __size_of_PWMC 00F2  
             i2_isdigit$1089 0002                __size_of_back 001C                __size_of_main 004A  
       __end_ofi2__div_to_l_ 383C           __end_of_initialize 499C              ??_captureKeypad 0003  
                   _showInfo 29C6                ??i2_lcdNibble 0001                  ??_lcdNibble 0100  
                   getTime@i 0105                     _simulate 1E94           __end_of_keypressed 3B3A  
                   int$flags 007F                    printf@idx 0150                    printf@len 0155  
                   main@argc 016D                    printf@exp 0161                     main@argv 016F  
                  printf@val 0157                    simulate@C 0094            i2___awmod@divisor 0003  
             ??_HexDecToDec2 0017                    putch@data 0102            i2___awmod@counter 0005  
   __end_of_I2C_Master_Start 5162     __end_of_I2C_Master_Write 5138                   _INTCONbits 000FF2  
              PermLog@sorted 0082                PWMC@countdown 001A                     isdigit@c 0102  
              _simulate$1664 0082                     scale@scl 0129                     intlevel2 0000  
           __tdiv_to_l_@exp1 010E             __tdiv_to_l_@cntr 010D             __tdiv_to_l_@quot 0109  
           ___lldiv@dividend 0100                 ??_stopMoving 0071                     printf@ap 0153  
                   printf@cp 0151      __end_of_I2C_Master_Init 4BB0      __end_of_I2C_Master_Read 4EC8  
    __end_of_I2C_Master_Wait 50E4      __end_of_I2C_Master_Stop 515A                  lcdInst@data 0102  
               showInfo@time 0071                 showInfo@stop 007C                 showInfo@type 007A  
               ?__tdiv_to_l_ 0100                  _printf$1450 014D          __end_ofi2_lcdNibble 4C62  
           ___lldiv@quotient 0108            I2C_Master_Write@d 0101           __end_of_stopMoving 4E6A  
             WriteEE@address 0001                  getTime@time 0103            i2__div_to_l_@exp1 000C  
          i2__div_to_l_@cntr 000B            i2__div_to_l_@quot 0007  



Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Thu Feb 23 01:08:54 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    46                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    55                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    56                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    57  0000                     
    58                           ; Version 1.41
    59                           ; Generated 25/01/2017 GMT
    60                           ; 
    61                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    62                           ; All rights reserved.
    63                           ; 
    64                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    65                           ; 
    66                           ; Redistribution and use in source and binary forms, with or without modification, are
    67                           ; permitted provided that the following conditions are met:
    68                           ; 
    69                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    70                           ;        conditions and the following disclaimer.
    71                           ; 
    72                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    73                           ;        of conditions and the following disclaimer in the documentation and/or other
    74                           ;        materials provided with the distribution.
    75                           ; 
    76                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    77                           ;        software without specific prior written permission.
    78                           ; 
    79                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    80                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    81                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    82                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    83                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    84                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    85                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    86                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    87                           ; 
    88                           ; 
    89                           ; Code-generator required, PIC18F4620 Definitions
    90                           ; 
    91                           ; SFR Addresses
    92  0000                     
    93                           	psect	mediumconst
    94  00FE5E                     __pmediumconst:
    95                           	opt stack 0
    96  00FE5E  00                 	db	0
    97  00FE5F                     _dpowers:
    98                           	opt stack 0
    99  00FE5F  0001               	dw	1
   100  00FE61  000A               	dw	10
   101  00FE63  0064               	dw	100
   102  00FE65  03E8               	dw	1000
   103  00FE67  2710               	dw	10000
   104  00FE69                     __end_of_dpowers:
   105                           	opt stack 0
   106  0000                     _ADRESL	set	4035
   107  0000                     _ADRESH	set	4036
   108  0000                     _ADCON0bits	set	4034
   109  0000                     _PORTC	set	3970
   110  0000                     _CCPR2L	set	4027
   111  0000                     _CCPR1L	set	4030
   112  0000                     _TRISCbits	set	3988
   113  0000                     _PR2	set	4043
   114  0000                     _PORTB	set	3969
   115  0000                     _PORTBbits	set	3969
   116  0000                     _LATDbits	set	3980
   117  0000                     _INTCONbits	set	4082
   118  0000                     _CVRCON	set	4021
   119  0000                     _ADCON1	set	4033
   120  0000                     _ADCON0	set	4034
   121  0000                     _LATE	set	3981
   122  0000                     _LATD	set	3980
   123  0000                     _LATC	set	3979
   124  0000                     _LATB	set	3978
   125  0000                     _LATA	set	3977
   126  0000                     _TRISE	set	3990
   127  0000                     _TRISD	set	3989
   128  0000                     _TRISC	set	3988
   129  0000                     _TRISB	set	3987
   130  0000                     _TRISA	set	3986
   131  0000                     _ADON	set	32272
   132  0000                     _LATC3	set	31835
   133  0000                     _LATC2	set	31834
   134  0000                     _LATC1	set	31833
   135  0000                     _LATC0	set	31832
   136  0000                     _CCP2M0	set	32208
   137  0000                     _CCP2M1	set	32209
   138  0000                     _CCP2M2	set	32210
   139  0000                     _CCP2M3	set	32211
   140  0000                     _CCP2Y	set	32212
   141  0000                     _CCP2X	set	32213
   142  0000                     _CCP1Y	set	32236
   143  0000                     _CCP1X	set	32237
   144  0000                     _TMR2ON	set	32338
   145  0000                     _CCP1M0	set	32232
   146  0000                     _CCP1M1	set	32233
   147  0000                     _CCP1M2	set	32234
   148  0000                     _CCP1M3	set	32235
   149  0000                     _P1M0	set	32238
   150  0000                     _P1M1	set	32239
   151  0000                     _INT1IF	set	32640
   152  0000                     _INT1IE	set	32643
   153  0000                     _ADFM	set	32263
   154  00FE69                     STR_33:
   155  00FE69  75                 	db	117	;'u'
   156  00FE6A  6E                 	db	110	;'n'
   157  00FE6B  63                 	db	99	;'c'
   158  00FE6C  68                 	db	104	;'h'
   159  00FE6D  61                 	db	97	;'a'
   160  00FE6E  72                 	db	114	;'r'
   161  00FE6F  67                 	db	103	;'g'
   162  00FE70  65                 	db	101	;'e'
   163  00FE71  64                 	db	100	;'d'
   164  00FE72  20                 	db	32
   165  00FE73  41                 	db	65	;'A'
   166  00FE74  41                 	db	65	;'A'
   167  00FE75  20                 	db	32
   168  00FE76  20                 	db	32
   169  00FE77  20                 	db	32
   170  00FE78  20                 	db	32
   171  00FE79  20                 	db	32
   172  00FE7A  00                 	db	0
   173  00FE7B                     STR_5:
   174  00FE7B  53                 	db	83	;'S'
   175  00FE7C  6F                 	db	111	;'o'
   176  00FE7D  72                 	db	114	;'r'
   177  00FE7E  74                 	db	116	;'t'
   178  00FE7F  69                 	db	105	;'i'
   179  00FE80  6E                 	db	110	;'n'
   180  00FE81  67                 	db	103	;'g'
   181  00FE82  20                 	db	32
   182  00FE83  43                 	db	67	;'C'
   183  00FE84  6F                 	db	111	;'o'
   184  00FE85  6D                 	db	109	;'m'
   185  00FE86  70                 	db	112	;'p'
   186  00FE87  6C                 	db	108	;'l'
   187  00FE88  65                 	db	101	;'e'
   188  00FE89  74                 	db	116	;'t'
   189  00FE8A  65                 	db	101	;'e'
   190  00FE8B  00                 	db	0
   191  00FE8C                     STR_42:
   192  00FE8C  75                 	db	117	;'u'
   193  00FE8D  6E                 	db	110	;'n'
   194  00FE8E  63                 	db	99	;'c'
   195  00FE8F  68                 	db	104	;'h'
   196  00FE90  61                 	db	97	;'a'
   197  00FE91  72                 	db	114	;'r'
   198  00FE92  67                 	db	103	;'g'
   199  00FE93  65                 	db	101	;'e'
   200  00FE94  64                 	db	100	;'d'
   201  00FE95  20                 	db	32
   202  00FE96  43                 	db	67	;'C'
   203  00FE97  20                 	db	32
   204  00FE98  20                 	db	32
   205  00FE99  20                 	db	32
   206  00FE9A  20                 	db	32
   207  00FE9B  00                 	db	0
   208  00FE9C                     STR_30:
   209  00FE9C  25                 	db	37
   210  00FE9D  64                 	db	100	;'d'
   211  00FE9E  20                 	db	32
   212  00FE9F  72                 	db	114	;'r'
   213  00FEA0  65                 	db	101	;'e'
   214  00FEA1  63                 	db	99	;'c'
   215  00FEA2  65                 	db	101	;'e'
   216  00FEA3  69                 	db	105	;'i'
   217  00FEA4  76                 	db	118	;'v'
   218  00FEA5  65                 	db	101	;'e'
   219  00FEA6  64                 	db	100	;'d'
   220  00FEA7  20                 	db	32
   221  00FEA8  20                 	db	32
   222  00FEA9  20                 	db	32
   223  00FEAA  20                 	db	32
   224  00FEAB  00                 	db	0
   225  00FEAC                     STR_39:
   226  00FEAC  75                 	db	117	;'u'
   227  00FEAD  6E                 	db	110	;'n'
   228  00FEAE  63                 	db	99	;'c'
   229  00FEAF  68                 	db	104	;'h'
   230  00FEB0  61                 	db	97	;'a'
   231  00FEB1  72                 	db	114	;'r'
   232  00FEB2  67                 	db	103	;'g'
   233  00FEB3  65                 	db	101	;'e'
   234  00FEB4  64                 	db	100	;'d'
   235  00FEB5  20                 	db	32
   236  00FEB6  39                 	db	57	;'9'
   237  00FEB7  56                 	db	86	;'V'
   238  00FEB8  20                 	db	32
   239  00FEB9  20                 	db	32
   240  00FEBA  20                 	db	32
   241  00FEBB  00                 	db	0
   242  00FEBC                     STR_20:
   243  00FEBC  52                 	db	82	;'R'
   244  00FEBD  6F                 	db	111	;'o'
   245  00FEBE  74                 	db	116	;'t'
   246  00FEBF  61                 	db	97	;'a'
   247  00FEC0  74                 	db	116	;'t'
   248  00FEC1  69                 	db	105	;'i'
   249  00FEC2  6E                 	db	110	;'n'
   250  00FEC3  67                 	db	103	;'g'
   251  00FEC4  20                 	db	32
   252  00FEC5  58                 	db	88	;'X'
   253  00FEC6  73                 	db	115	;'s'
   254  00FEC7  20                 	db	32
   255  00FEC8  20                 	db	32
   256  00FEC9  20                 	db	32
   257  00FECA  20                 	db	32
   258  00FECB  00                 	db	0
   259  00FECC                     STR_26:
   260  00FECC  73                 	db	115	;'s'
   261  00FECD  6D                 	db	109	;'m'
   262  00FECE  61                 	db	97	;'a'
   263  00FECF  6C                 	db	108	;'l'
   264  00FED0  6C                 	db	108	;'l'
   265  00FED1  4E                 	db	78	;'N'
   266  00FED2  6F                 	db	111	;'o'
   267  00FED3  73                 	db	115	;'s'
   268  00FED4  65                 	db	101	;'e'
   269  00FED5  20                 	db	32
   270  00FED6  74                 	db	116	;'t'
   271  00FED7  6F                 	db	111	;'o'
   272  00FED8  20                 	db	32
   273  00FED9  20                 	db	32
   274  00FEDA  20                 	db	32
   275  00FEDB  00                 	db	0
   276  00FEDC                     STR_32:
   277  00FEDC  63                 	db	99	;'c'
   278  00FEDD  68                 	db	104	;'h'
   279  00FEDE  61                 	db	97	;'a'
   280  00FEDF  72                 	db	114	;'r'
   281  00FEE0  67                 	db	103	;'g'
   282  00FEE1  65                 	db	101	;'e'
   283  00FEE2  64                 	db	100	;'d'
   284  00FEE3  20                 	db	32
   285  00FEE4  41                 	db	65	;'A'
   286  00FEE5  41                 	db	65	;'A'
   287  00FEE6  20                 	db	32
   288  00FEE7  20                 	db	32
   289  00FEE8  20                 	db	32
   290  00FEE9  20                 	db	32
   291  00FEEA  00                 	db	0
   292  00FEEB                     STR_21:
   293  00FEEB  62                 	db	98	;'b'
   294  00FEEC  69                 	db	105	;'i'
   295  00FEED  67                 	db	103	;'g'
   296  00FEEE  4E                 	db	78	;'N'
   297  00FEEF  6F                 	db	111	;'o'
   298  00FEF0  73                 	db	115	;'s'
   299  00FEF1  65                 	db	101	;'e'
   300  00FEF2  20                 	db	32
   301  00FEF3  74                 	db	116	;'t'
   302  00FEF4  6F                 	db	111	;'o'
   303  00FEF5  20                 	db	32
   304  00FEF6  20                 	db	32
   305  00FEF7  20                 	db	32
   306  00FEF8  20                 	db	32
   307  00FEF9  00                 	db	0
   308  00FEFA                     STR_6:
   309  00FEFA  50                 	db	80	;'P'
   310  00FEFB  72                 	db	114	;'r'
   311  00FEFC  65                 	db	101	;'e'
   312  00FEFD  73                 	db	115	;'s'
   313  00FEFE  73                 	db	115	;'s'
   314  00FEFF  20                 	db	32
   315  00FF00  61                 	db	97	;'a'
   316  00FF01  20                 	db	32
   317  00FF02  6E                 	db	110	;'n'
   318  00FF03  75                 	db	117	;'u'
   319  00FF04  6D                 	db	109	;'m'
   320  00FF05  62                 	db	98	;'b'
   321  00FF06  65                 	db	101	;'e'
   322  00FF07  72                 	db	114	;'r'
   323  00FF08  00                 	db	0
   324  00FF09                     STR_37:
   325  00FF09  63                 	db	99	;'c'
   326  00FF0A  68                 	db	104	;'h'
   327  00FF0B  61                 	db	97	;'a'
   328  00FF0C  6E                 	db	110	;'n'
   329  00FF0D  6E                 	db	110	;'n'
   330  00FF0E  65                 	db	101	;'e'
   331  00FF0F  6C                 	db	108	;'l'
   332  00FF10  20                 	db	32
   333  00FF11  25                 	db	37
   334  00FF12  64                 	db	100	;'d'
   335  00FF13  20                 	db	32
   336  00FF14  20                 	db	32
   337  00FF15  20                 	db	32
   338  00FF16  00                 	db	0
   339  00FF17                     STR_22:
   340  00FF17  75                 	db	117	;'u'
   341  00FF18  6E                 	db	110	;'n'
   342  00FF19  63                 	db	99	;'c'
   343  00FF1A  68                 	db	104	;'h'
   344  00FF1B  61                 	db	97	;'a'
   345  00FF1C  72                 	db	114	;'r'
   346  00FF1D  67                 	db	103	;'g'
   347  00FF1E  65                 	db	101	;'e'
   348  00FF1F  64                 	db	100	;'d'
   349  00FF20  20                 	db	32
   350  00FF21  20                 	db	32
   351  00FF22  20                 	db	32
   352  00FF23  20                 	db	32
   353  00FF24  00                 	db	0
   354  00FF25                     STR_8:
   355  00FF25  54                 	db	84	;'T'
   356  00FF26  69                 	db	105	;'i'
   357  00FF27  6D                 	db	109	;'m'
   358  00FF28  65                 	db	101	;'e'
   359  00FF29  20                 	db	32
   360  00FF2A  45                 	db	69	;'E'
   361  00FF2B  6C                 	db	108	;'l'
   362  00FF2C  61                 	db	97	;'a'
   363  00FF2D  70                 	db	112	;'p'
   364  00FF2E  73                 	db	115	;'s'
   365  00FF2F  65                 	db	101	;'e'
   366  00FF30  64                 	db	100	;'d'
   367  00FF31  3A                 	db	58	;':'
   368  00FF32  00                 	db	0
   369  00FF33                     STR_10:
   370  00FF33  54                 	db	84	;'T'
   371  00FF34  6F                 	db	111	;'o'
   372  00FF35  74                 	db	116	;'t'
   373  00FF36  61                 	db	97	;'a'
   374  00FF37  6C                 	db	108	;'l'
   375  00FF38  20                 	db	32
   376  00FF39  53                 	db	83	;'S'
   377  00FF3A  6F                 	db	111	;'o'
   378  00FF3B  72                 	db	114	;'r'
   379  00FF3C  74                 	db	116	;'t'
   380  00FF3D  65                 	db	101	;'e'
   381  00FF3E  64                 	db	100	;'d'
   382  00FF3F  3A                 	db	58	;':'
   383  00FF40  00                 	db	0
   384  00FF41                     STR_7:
   385  00FF41  46                 	db	70	;'F'
   386  00FF42  6F                 	db	111	;'o'
   387  00FF43  72                 	db	114	;'r'
   388  00FF44  20                 	db	32
   389  00FF45  6D                 	db	109	;'m'
   390  00FF46  6F                 	db	111	;'o'
   391  00FF47  72                 	db	114	;'r'
   392  00FF48  65                 	db	101	;'e'
   393  00FF49  20                 	db	32
   394  00FF4A  69                 	db	105	;'i'
   395  00FF4B  6E                 	db	110	;'n'
   396  00FF4C  66                 	db	102	;'f'
   397  00FF4D  6F                 	db	111	;'o'
   398  00FF4E  00                 	db	0
   399  00FF4F                     STR_38:
   400  00FF4F  63                 	db	99	;'c'
   401  00FF50  68                 	db	104	;'h'
   402  00FF51  61                 	db	97	;'a'
   403  00FF52  72                 	db	114	;'r'
   404  00FF53  67                 	db	103	;'g'
   405  00FF54  65                 	db	101	;'e'
   406  00FF55  64                 	db	100	;'d'
   407  00FF56  20                 	db	32
   408  00FF57  39                 	db	57	;'9'
   409  00FF58  56                 	db	86	;'V'
   410  00FF59  20                 	db	32
   411  00FF5A  20                 	db	32
   412  00FF5B  00                 	db	0
   413  00FF5C                     STR_11:
   414  00FF5C  25                 	db	37
   415  00FF5D  64                 	db	100	;'d'
   416  00FF5E  20                 	db	32
   417  00FF5F  62                 	db	98	;'b'
   418  00FF60  61                 	db	97	;'a'
   419  00FF61  74                 	db	116	;'t'
   420  00FF62  74                 	db	116	;'t'
   421  00FF63  65                 	db	101	;'e'
   422  00FF64  72                 	db	114	;'r'
   423  00FF65  69                 	db	105	;'i'
   424  00FF66  65                 	db	101	;'e'
   425  00FF67  73                 	db	115	;'s'
   426  00FF68  00                 	db	0
   427  00FF69                     STR_29:
   428  00FF69  53                 	db	83	;'S'
   429  00FF6A  74                 	db	116	;'t'
   430  00FF6B  6F                 	db	111	;'o'
   431  00FF6C  70                 	db	112	;'p'
   432  00FF6D  70                 	db	112	;'p'
   433  00FF6E  65                 	db	101	;'e'
   434  00FF6F  64                 	db	100	;'d'
   435  00FF70  20                 	db	32
   436  00FF71  20                 	db	32
   437  00FF72  20                 	db	32
   438  00FF73  20                 	db	32
   439  00FF74  00                 	db	0
   440  00FF75                     STR_3:
   441  00FF75  57                 	db	87	;'W'
   442  00FF76  65                 	db	101	;'e'
   443  00FF77  6C                 	db	108	;'l'
   444  00FF78  63                 	db	99	;'c'
   445  00FF79  6F                 	db	111	;'o'
   446  00FF7A  6D                 	db	109	;'m'
   447  00FF7B  65                 	db	101	;'e'
   448  00FF7C  21                 	db	33
   449  00FF7D  20                 	db	32
   450  00FF7E  20                 	db	32
   451  00FF7F  20                 	db	32
   452  00FF80  00                 	db	0
   453  00FF81                     STR_4:
   454  00FF81  50                 	db	80	;'P'
   455  00FF82  72                 	db	114	;'r'
   456  00FF83  65                 	db	101	;'e'
   457  00FF84  73                 	db	115	;'s'
   458  00FF85  73                 	db	115	;'s'
   459  00FF86  20                 	db	32
   460  00FF87  53                 	db	83	;'S'
   461  00FF88  74                 	db	116	;'t'
   462  00FF89  61                 	db	97	;'a'
   463  00FF8A  72                 	db	114	;'r'
   464  00FF8B  74                 	db	116	;'t'
   465  00FF8C  00                 	db	0
   466  00FF8D                     STR_34:
   467  00FF8D  6E                 	db	110	;'n'
   468  00FF8E  6F                 	db	111	;'o'
   469  00FF8F  20                 	db	32
   470  00FF90  41                 	db	65	;'A'
   471  00FF91  41                 	db	65	;'A'
   472  00FF92  20                 	db	32
   473  00FF93  20                 	db	32
   474  00FF94  20                 	db	32
   475  00FF95  20                 	db	32
   476  00FF96  20                 	db	32
   477  00FF97  00                 	db	0
   478  00FF98                     STR_18:
   479  00FF98  55                 	db	85	;'U'
   480  00FF99  6E                 	db	110	;'n'
   481  00FF9A  63                 	db	99	;'c'
   482  00FF9B  68                 	db	104	;'h'
   483  00FF9C  61                 	db	97	;'a'
   484  00FF9D  72                 	db	114	;'r'
   485  00FF9E  67                 	db	103	;'g'
   486  00FF9F  65                 	db	101	;'e'
   487  00FFA0  64                 	db	100	;'d'
   488  00FFA1  3A                 	db	58	;':'
   489  00FFA2  00                 	db	0
   490  00FFA3                     STR_12:
   491  00FFA3  41                 	db	65	;'A'
   492  00FFA4  41                 	db	65	;'A'
   493  00FFA5  20                 	db	32
   494  00FFA6  53                 	db	83	;'S'
   495  00FFA7  6F                 	db	111	;'o'
   496  00FFA8  72                 	db	114	;'r'
   497  00FFA9  74                 	db	116	;'t'
   498  00FFAA  65                 	db	101	;'e'
   499  00FFAB  64                 	db	100	;'d'
   500  00FFAC  3A                 	db	58	;':'
   501  00FFAD  00                 	db	0
   502  00FFAE                     STR_16:
   503  00FFAE  39                 	db	57	;'9'
   504  00FFAF  56                 	db	86	;'V'
   505  00FFB0  20                 	db	32
   506  00FFB1  53                 	db	83	;'S'
   507  00FFB2  6F                 	db	111	;'o'
   508  00FFB3  72                 	db	114	;'r'
   509  00FFB4  74                 	db	116	;'t'
   510  00FFB5  65                 	db	101	;'e'
   511  00FFB6  64                 	db	100	;'d'
   512  00FFB7  3A                 	db	58	;':'
   513  00FFB8  00                 	db	0
   514  00FFB9                     STR_9:
   515  00FFB9  25                 	db	37
   516  00FFBA  64                 	db	100	;'d'
   517  00FFBB  20                 	db	32
   518  00FFBC  73                 	db	115	;'s'
   519  00FFBD  65                 	db	101	;'e'
   520  00FFBE  63                 	db	99	;'c'
   521  00FFBF  6F                 	db	111	;'o'
   522  00FFC0  6E                 	db	110	;'n'
   523  00FFC1  64                 	db	100	;'d'
   524  00FFC2  73                 	db	115	;'s'
   525  00FFC3  00                 	db	0
   526  00FFC4                     STR_1:
   527  00FFC4  53                 	db	83	;'S'
   528  00FFC5  6F                 	db	111	;'o'
   529  00FFC6  72                 	db	114	;'r'
   530  00FFC7  74                 	db	116	;'t'
   531  00FFC8  69                 	db	105	;'i'
   532  00FFC9  6E                 	db	110	;'n'
   533  00FFCA  67                 	db	103	;'g'
   534  00FFCB  2E                 	db	46
   535  00FFCC  2E                 	db	46
   536  00FFCD  2E                 	db	46
   537  00FFCE  00                 	db	0
   538  00FFCF                     STR_14:
   539  00FFCF  43                 	db	67	;'C'
   540  00FFD0  20                 	db	32
   541  00FFD1  53                 	db	83	;'S'
   542  00FFD2  6F                 	db	111	;'o'
   543  00FFD3  72                 	db	114	;'r'
   544  00FFD4  74                 	db	116	;'t'
   545  00FFD5  65                 	db	101	;'e'
   546  00FFD6  64                 	db	100	;'d'
   547  00FFD7  3A                 	db	58	;':'
   548  00FFD8  00                 	db	0
   549  00FFD9                     STR_31:
   550  00FFD9  41                 	db	65	;'A'
   551  00FFDA  41                 	db	65	;'A'
   552  00FFDB  3A                 	db	58	;':'
   553  00FFDC  20                 	db	32
   554  00FFDD  20                 	db	32
   555  00FFDE  20                 	db	32
   556  00FFDF  20                 	db	32
   557  00FFE0  20                 	db	32
   558  00FFE1  00                 	db	0
   559  00FFE2                     STR_40:
   560  00FFE2  6E                 	db	110	;'n'
   561  00FFE3  6F                 	db	111	;'o'
   562  00FFE4  20                 	db	32
   563  00FFE5  39                 	db	57	;'9'
   564  00FFE6  20                 	db	32
   565  00FFE7  20                 	db	32
   566  00FFE8  20                 	db	32
   567  00FFE9  20                 	db	32
   568  00FFEA  00                 	db	0
   569  00FFEB                     STR_24:
   570  00FFEB  39                 	db	57	;'9'
   571  00FFEC  56                 	db	86	;'V'
   572  00FFED  20                 	db	32
   573  00FFEE  20                 	db	32
   574  00FFEF  20                 	db	32
   575  00FFF0  20                 	db	32
   576  00FFF1  00                 	db	0
   577  00FFF2                     STR_35:
   578  00FFF2  56                 	db	86	;'V'
   579  00FFF3  33                 	db	51	;'3'
   580  00FFF4  00                 	db	0
   581  00FFF5                     STR_36:
   582  00FFF5  39                 	db	57	;'9'
   583  00FFF6  3A                 	db	58	;':'
   584  00FFF7  00                 	db	0
   585  00FFF8                     STR_27:
   586  00FFF8  41                 	db	65	;'A'
   587  00FFF9  41                 	db	65	;'A'
   588  00FFFA  00                 	db	0
   589  00FFFB                     STR_13:
   590  00FFFB  25                 	db	37
   591  00FFFC  64                 	db	100	;'d'
   592  00FFFD  00                 	db	0
   593  0000                     
   594                           ; #config settings
   595  00FFFE  00                 	db	0	; dummy byte at the end
   596  0000                     
   597                           	psect	cinit
   598  001826                     __pcinit:
   599                           	opt stack 0
   600  001826                     start_initialization:
   601                           	opt stack 0
   602  001826                     __initialization:
   603                           	opt stack 0
   604                           
   605                           ; Clear objects allocated to BANK0 (8 bytes)
   606  001826  EE00  F0C1         	lfsr	0,__pbssBANK0
   607  00182A  0E08               	movlw	8
   608  00182C                     clear_0:
   609  00182C  6AEE               	clrf	postinc0,c
   610  00182E  06E8               	decf	wreg,f,c
   611  001830  E1FD               	bnz	clear_0
   612                           
   613                           ; Clear objects allocated to COMRAM (8 bytes)
   614  001832  EE00  F052         	lfsr	0,__pbssCOMRAM
   615  001836  0E08               	movlw	8
   616  001838                     clear_1:
   617  001838  6AEE               	clrf	postinc0,c
   618  00183A  06E8               	decf	wreg,f,c
   619  00183C  E1FD               	bnz	clear_1
   620  00183E                     end_of_initialization:
   621                           	opt stack 0
   622  00183E                     __end_of__initialization:
   623                           	opt stack 0
   624  00183E  905A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   625  001840  925A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   626  001842  0E00               	movlw	low (__Lmediumconst shr (0+16))
   627  001844  6EF8               	movwf	tblptru,c
   628  001846  0100               	movlb	0
   629  001848  EF93  F004         	goto	_main	;jump to C main() function
   630                           tblptru	equ	0xFF8
   631                           postinc0	equ	0xFEE
   632                           wreg	equ	0xFE8
   633                           
   634                           	psect	bssCOMRAM
   635  000052                     __pbssCOMRAM:
   636                           	opt stack 0
   637  000052                     mainloop@F3207:
   638                           	opt stack 0
   639  000052                     	ds	8
   640                           tblptru	equ	0xFF8
   641                           postinc0	equ	0xFEE
   642                           wreg	equ	0xFE8
   643                           
   644                           	psect	bssBANK0
   645  0000C1                     __pbssBANK0:
   646                           	opt stack 0
   647  0000C1                     simulate@F3216:
   648                           	opt stack 0
   649  0000C1                     	ds	8
   650                           tblptru	equ	0xFF8
   651                           postinc0	equ	0xFEE
   652                           wreg	equ	0xFE8
   653                           
   654                           	psect	cstackBANK0
   655  000080                     __pcstackBANK0:
   656                           	opt stack 0
   657  000080                     ?___fttol:
   658                           	opt stack 0
   659  000080                     ___ftge@ff1:
   660                           	opt stack 0
   661  000080                     ___fttol@f1:
   662                           	opt stack 0
   663                           
   664                           ; 3 bytes @ 0x0
   665  000080                     	ds	3
   666  000083                     ___ftge@ff2:
   667                           	opt stack 0
   668                           
   669                           ; 3 bytes @ 0x3
   670  000083                     	ds	1
   671  000084                     ??___fttol:
   672                           
   673                           ; 1 bytes @ 0x4
   674  000084                     	ds	2
   675  000086                     ?_checkV:
   676                           	opt stack 0
   677  000086                     checkV@voltage:
   678                           	opt stack 0
   679                           
   680                           ; 2 bytes @ 0x6
   681  000086                     	ds	2
   682  000088                     checkV@max:
   683                           	opt stack 0
   684                           
   685                           ; 3 bytes @ 0x8
   686  000088                     	ds	1
   687  000089                     ___fttol@sign1:
   688                           	opt stack 0
   689                           
   690                           ; 1 bytes @ 0x9
   691  000089                     	ds	1
   692  00008A                     ___fttol@lval:
   693                           	opt stack 0
   694                           
   695                           ; 4 bytes @ 0xA
   696  00008A                     	ds	1
   697  00008B                     ??_checkV:
   698                           
   699                           ; 1 bytes @ 0xB
   700  00008B                     	ds	1
   701  00008C                     checkV@i:
   702                           	opt stack 0
   703                           
   704                           ; 1 bytes @ 0xC
   705  00008C                     	ds	1
   706  00008D                     ?_checkAA:
   707                           	opt stack 0
   708  00008D                     ?_checkC9V:
   709                           	opt stack 0
   710  00008D                     checkAA@sorted:
   711                           	opt stack 0
   712  00008D                     checkC9V@sorted:
   713                           	opt stack 0
   714                           
   715                           ; 2 bytes @ 0xD
   716  00008D                     	ds	1
   717  00008E                     ___fttol@exp1:
   718                           	opt stack 0
   719                           
   720                           ; 1 bytes @ 0xE
   721  00008E                     	ds	1
   722  00008F                     ??_checkAA:
   723  00008F                     ??_checkC9V:
   724  00008F                     set_PWM1_duty@duty:
   725                           	opt stack 0
   726                           
   727                           ; 2 bytes @ 0xF
   728  00008F                     	ds	2
   729  000091                     set_PWM1_duty@Max_Duty:
   730                           	opt stack 0
   731  000091                     _checkC9V$645:
   732                           	opt stack 0
   733                           
   734                           ; 2 bytes @ 0x11
   735  000091                     	ds	2
   736  000093                     runPWM1@duty:
   737                           	opt stack 0
   738  000093                     checkC9V@i:
   739                           	opt stack 0
   740                           
   741                           ; 2 bytes @ 0x13
   742  000093                     	ds	2
   743  000095                     runPWM1@freq:
   744                           	opt stack 0
   745                           
   746                           ; 4 bytes @ 0x15
   747  000095                     	ds	4
   748  000099                     runPWM1@max_duty:
   749                           	opt stack 0
   750                           
   751                           ; 2 bytes @ 0x19
   752  000099                     	ds	2
   753  00009B                     ??_moveXMotors:
   754                           
   755                           ; 1 bytes @ 0x1B
   756  00009B                     	ds	2
   757  00009D                     simulate@bigNose:
   758                           	opt stack 0
   759                           
   760                           ; 2 bytes @ 0x1D
   761  00009D                     	ds	2
   762  00009F                     simulate@smallNose:
   763                           	opt stack 0
   764                           
   765                           ; 2 bytes @ 0x1F
   766  00009F                     	ds	2
   767  0000A1                     ??_simulate:
   768                           
   769                           ; 1 bytes @ 0x21
   770  0000A1                     	ds	2
   771  0000A3                     simulate@startTime:
   772                           	opt stack 0
   773                           
   774                           ; 2 bytes @ 0x23
   775  0000A3                     	ds	2
   776  0000A5                     simulate@stop:
   777                           	opt stack 0
   778                           
   779                           ; 2 bytes @ 0x25
   780  0000A5                     	ds	2
   781  0000A7                     simulate@AA:
   782                           	opt stack 0
   783                           
   784                           ; 2 bytes @ 0x27
   785  0000A7                     	ds	2
   786  0000A9                     simulate@C9:
   787                           	opt stack 0
   788                           
   789                           ; 2 bytes @ 0x29
   790  0000A9                     	ds	2
   791  0000AB                     simulate@sorted:
   792                           	opt stack 0
   793                           
   794                           ; 8 bytes @ 0x2B
   795  0000AB                     	ds	8
   796  0000B3                     
   797                           ; 2 bytes @ 0x33
   798  0000B3                     	ds	2
   799  0000B5                     
   800                           ; 3 bytes @ 0x35
   801  0000B5                     	ds	3
   802  0000B8                     ??_main:
   803                           
   804                           ; 1 bytes @ 0x38
   805  0000B8                     	ds	1
   806  0000B9                     main@i:
   807                           	opt stack 0
   808                           
   809                           ; 1 bytes @ 0x39
   810  0000B9                     	ds	1
   811  0000BA                     main@i_184:
   812                           	opt stack 0
   813                           
   814                           ; 1 bytes @ 0x3A
   815  0000BA                     	ds	1
   816  0000BB                     main@i_187:
   817                           	opt stack 0
   818                           
   819                           ; 1 bytes @ 0x3B
   820  0000BB                     	ds	1
   821  0000BC                     main@i_188:
   822                           	opt stack 0
   823                           
   824                           ; 1 bytes @ 0x3C
   825  0000BC                     	ds	1
   826  0000BD                     main@bigNose:
   827                           	opt stack 0
   828                           
   829                           ; 2 bytes @ 0x3D
   830  0000BD                     	ds	2
   831  0000BF                     main@smallNose:
   832                           	opt stack 0
   833                           
   834                           ; 2 bytes @ 0x3F
   835  0000BF                     	ds	2
   836                           tblptru	equ	0xFF8
   837                           postinc0	equ	0xFEE
   838                           wreg	equ	0xFE8
   839                           
   840                           	psect	cstackCOMRAM
   841  000001                     __pcstackCOMRAM:
   842                           	opt stack 0
   843  000001                     ?i2___lwdiv:
   844                           	opt stack 0
   845  000001                     i2lcdNibble@temp:
   846                           	opt stack 0
   847  000001                     i2___lwdiv@dividend:
   848                           	opt stack 0
   849                           
   850                           ; 2 bytes @ 0x0
   851  000001                     	ds	1
   852  000002                     i2lcdNibble@data:
   853                           	opt stack 0
   854                           
   855                           ; 1 bytes @ 0x1
   856  000002                     	ds	1
   857  000003                     i2lcdInst@data:
   858                           	opt stack 0
   859  000003                     i2putch@data:
   860                           	opt stack 0
   861  000003                     i2___lwdiv@divisor:
   862                           	opt stack 0
   863                           
   864                           ; 2 bytes @ 0x2
   865  000003                     	ds	2
   866  000005                     i2___lwdiv@quotient:
   867                           	opt stack 0
   868                           
   869                           ; 2 bytes @ 0x4
   870  000005                     	ds	2
   871  000007                     i2___lwdiv@counter:
   872                           	opt stack 0
   873                           
   874                           ; 1 bytes @ 0x6
   875  000007                     	ds	1
   876  000008                     ?i2___lwmod:
   877                           	opt stack 0
   878  000008                     i2___lwmod@dividend:
   879                           	opt stack 0
   880                           
   881                           ; 2 bytes @ 0x7
   882  000008                     	ds	2
   883  00000A                     i2___lwmod@divisor:
   884                           	opt stack 0
   885                           
   886                           ; 2 bytes @ 0x9
   887  00000A                     	ds	2
   888  00000C                     i2___lwmod@counter:
   889                           	opt stack 0
   890                           
   891                           ; 1 bytes @ 0xB
   892  00000C                     	ds	1
   893  00000D                     ?i2_printf:
   894                           	opt stack 0
   895  00000D                     i2printf@f:
   896                           	opt stack 0
   897                           
   898                           ; 2 bytes @ 0xC
   899  00000D                     	ds	2
   900  00000F                     ??i2_printf:
   901                           
   902                           ; 1 bytes @ 0xE
   903  00000F                     	ds	1
   904  000010                     i2printf@ap:
   905                           	opt stack 0
   906                           
   907                           ; 2 bytes @ 0xF
   908  000010                     	ds	2
   909  000012                     i2printf@flag:
   910                           	opt stack 0
   911                           
   912                           ; 1 bytes @ 0x11
   913  000012                     	ds	1
   914  000013                     i2printf@prec:
   915                           	opt stack 0
   916                           
   917                           ; 1 bytes @ 0x12
   918  000013                     	ds	1
   919  000014                     i2printf@val:
   920                           	opt stack 0
   921                           
   922                           ; 2 bytes @ 0x13
   923  000014                     	ds	2
   924  000016                     i2printf@c:
   925                           	opt stack 0
   926                           
   927                           ; 1 bytes @ 0x15
   928  000016                     	ds	1
   929  000017                     ??_keypressed:
   930  000017                     
   931                           ; 1 bytes @ 0x16
   932  000017                     	ds	14
   933  000025                     keypressed@keypress:
   934                           	opt stack 0
   935                           
   936                           ; 1 bytes @ 0x24
   937  000025                     	ds	1
   938  000026                     ?_getTime:
   939                           	opt stack 0
   940  000026                     ?_captureKeypad:
   941                           	opt stack 0
   942  000026                     ?_AD:
   943                           	opt stack 0
   944  000026                     ?___lwdiv:
   945                           	opt stack 0
   946  000026                     ?___ftpack:
   947                           	opt stack 0
   948  000026                     ?___aldiv:
   949                           	opt stack 0
   950  000026                     lcdNibble@temp:
   951                           	opt stack 0
   952  000026                     ___lwdiv@dividend:
   953                           	opt stack 0
   954  000026                     ___ftpack@arg:
   955                           	opt stack 0
   956  000026                     ___aldiv@dividend:
   957                           	opt stack 0
   958                           
   959                           ; 4 bytes @ 0x25
   960  000026                     	ds	1
   961  000027                     lcdNibble@data:
   962                           	opt stack 0
   963                           
   964                           ; 1 bytes @ 0x26
   965  000027                     	ds	1
   966  000028                     ??_AD:
   967  000028                     lcdInst@data:
   968                           	opt stack 0
   969  000028                     putch@data:
   970                           	opt stack 0
   971  000028                     captureKeypad@keypress:
   972                           	opt stack 0
   973  000028                     getTime@time:
   974                           	opt stack 0
   975  000028                     ___lwdiv@divisor:
   976                           	opt stack 0
   977                           
   978                           ; 2 bytes @ 0x27
   979  000028                     	ds	1
   980  000029                     ??_initLCD:
   981  000029                     ___ftpack@exp:
   982                           	opt stack 0
   983                           
   984                           ; 1 bytes @ 0x28
   985  000029                     	ds	1
   986  00002A                     AD@channel:
   987                           	opt stack 0
   988  00002A                     ___ftpack@sign:
   989                           	opt stack 0
   990  00002A                     ___lwdiv@counter:
   991                           	opt stack 0
   992  00002A                     ___aldiv@divisor:
   993                           	opt stack 0
   994                           
   995                           ; 4 bytes @ 0x29
   996  00002A                     	ds	1
   997  00002B                     ??___ftpack:
   998  00002B                     ___lwdiv@quotient:
   999                           	opt stack 0
  1000                           
  1001                           ; 2 bytes @ 0x2A
  1002  00002B                     	ds	2
  1003  00002D                     ?___lwmod:
  1004                           	opt stack 0
  1005  00002D                     ___lwmod@dividend:
  1006                           	opt stack 0
  1007                           
  1008                           ; 2 bytes @ 0x2C
  1009  00002D                     	ds	1
  1010  00002E                     ?___awtoft:
  1011                           	opt stack 0
  1012  00002E                     ?___lwtoft:
  1013                           	opt stack 0
  1014  00002E                     ___aldiv@counter:
  1015                           	opt stack 0
  1016  00002E                     ___awtoft@c:
  1017                           	opt stack 0
  1018  00002E                     ___lwtoft@c:
  1019                           	opt stack 0
  1020                           
  1021                           ; 2 bytes @ 0x2D
  1022  00002E                     	ds	1
  1023  00002F                     ___aldiv@sign:
  1024                           	opt stack 0
  1025  00002F                     ___lwmod@divisor:
  1026                           	opt stack 0
  1027                           
  1028                           ; 2 bytes @ 0x2E
  1029  00002F                     	ds	1
  1030  000030                     ___aldiv@quotient:
  1031                           	opt stack 0
  1032                           
  1033                           ; 4 bytes @ 0x2F
  1034  000030                     	ds	1
  1035  000031                     ?___ftdiv:
  1036                           	opt stack 0
  1037  000031                     ___awtoft@sign:
  1038                           	opt stack 0
  1039  000031                     ___lwmod@counter:
  1040                           	opt stack 0
  1041  000031                     ___ftdiv@f1:
  1042                           	opt stack 0
  1043                           
  1044                           ; 3 bytes @ 0x30
  1045  000031                     	ds	1
  1046  000032                     ?_printf:
  1047                           	opt stack 0
  1048  000032                     printf@f:
  1049                           	opt stack 0
  1050                           
  1051                           ; 2 bytes @ 0x31
  1052  000032                     	ds	2
  1053  000034                     ?_set_PWM_freq:
  1054                           	opt stack 0
  1055  000034                     ___ftdiv@f2:
  1056                           	opt stack 0
  1057  000034                     set_PWM_freq@fre:
  1058                           	opt stack 0
  1059                           
  1060                           ; 4 bytes @ 0x33
  1061  000034                     	ds	2
  1062  000036                     ??_printf:
  1063                           
  1064                           ; 1 bytes @ 0x35
  1065  000036                     	ds	1
  1066  000037                     ??___ftdiv:
  1067  000037                     printf@ap:
  1068                           	opt stack 0
  1069                           
  1070                           ; 2 bytes @ 0x36
  1071  000037                     	ds	1
  1072  000038                     ??_set_PWM_freq:
  1073                           
  1074                           ; 1 bytes @ 0x37
  1075  000038                     	ds	1
  1076  000039                     printf@flag:
  1077                           	opt stack 0
  1078                           
  1079                           ; 1 bytes @ 0x38
  1080  000039                     	ds	1
  1081  00003A                     printf@prec:
  1082                           	opt stack 0
  1083  00003A                     ___ftdiv@cntr:
  1084                           	opt stack 0
  1085                           
  1086                           ; 1 bytes @ 0x39
  1087  00003A                     	ds	1
  1088  00003B                     printf@val:
  1089                           	opt stack 0
  1090  00003B                     ___ftdiv@f3:
  1091                           	opt stack 0
  1092                           
  1093                           ; 3 bytes @ 0x3A
  1094  00003B                     	ds	2
  1095  00003D                     printf@c:
  1096                           	opt stack 0
  1097                           
  1098                           ; 1 bytes @ 0x3C
  1099  00003D                     	ds	1
  1100  00003E                     ___ftdiv@exp:
  1101                           	opt stack 0
  1102  00003E                     showInfo@time:
  1103                           	opt stack 0
  1104  00003E                     moveBigNose@prev:
  1105                           	opt stack 0
  1106  00003E                     moveSmallNose@prev:
  1107                           	opt stack 0
  1108                           
  1109                           ; 2 bytes @ 0x3D
  1110  00003E                     	ds	1
  1111  00003F                     ___ftdiv@sign:
  1112                           	opt stack 0
  1113                           
  1114                           ; 1 bytes @ 0x3E
  1115  00003F                     	ds	1
  1116  000040                     ?___ftmul:
  1117                           	opt stack 0
  1118  000040                     showInfo@sorted:
  1119                           	opt stack 0
  1120  000040                     moveBigNose@next:
  1121                           	opt stack 0
  1122  000040                     moveSmallNose@next:
  1123                           	opt stack 0
  1124  000040                     ___ftmul@f1:
  1125                           	opt stack 0
  1126                           
  1127                           ; 3 bytes @ 0x3F
  1128  000040                     	ds	2
  1129  000042                     ??_moveSmallNose:
  1130  000042                     ??_moveBigNose:
  1131  000042                     ??_showInfo:
  1132                           
  1133                           ; 1 bytes @ 0x41
  1134  000042                     	ds	1
  1135  000043                     ___ftmul@f2:
  1136                           	opt stack 0
  1137                           
  1138                           ; 3 bytes @ 0x42
  1139  000043                     	ds	3
  1140  000046                     ??___ftmul:
  1141                           
  1142                           ; 1 bytes @ 0x45
  1143  000046                     	ds	3
  1144  000049                     ___ftmul@exp:
  1145                           	opt stack 0
  1146                           
  1147                           ; 1 bytes @ 0x48
  1148  000049                     	ds	1
  1149  00004A                     showInfo@type:
  1150                           	opt stack 0
  1151  00004A                     ___ftmul@f3_as_product:
  1152                           	opt stack 0
  1153                           
  1154                           ; 3 bytes @ 0x49
  1155  00004A                     	ds	3
  1156  00004D                     ___ftmul@cntr:
  1157                           	opt stack 0
  1158                           
  1159                           ; 1 bytes @ 0x4C
  1160  00004D                     	ds	1
  1161  00004E                     ___ftmul@sign:
  1162                           	opt stack 0
  1163                           
  1164                           ; 1 bytes @ 0x4D
  1165  00004E                     	ds	1
  1166  00004F                     ??_set_PWM1_duty:
  1167  00004F                     ??___ftge:
  1168                           
  1169                           ; 1 bytes @ 0x4E
  1170  00004F                     	ds	2
  1171  000051                     
  1172                           ; 1 bytes @ 0x50
  1173  000051                     	ds	1
  1174                           tblptru	equ	0xFF8
  1175                           postinc0	equ	0xFEE
  1176                           wreg	equ	0xFE8
  1177                           
  1178 ;;
  1179 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1180 ;;
  1181 ;; *************** function _main *****************
  1182 ;; Defined at:
  1183 ;;		line 142 in file "main.c"
  1184 ;; Parameters:    Size  Location     Type
  1185 ;;  argc            2   51[BANK0 ] int 
  1186 ;;  argv            3   53[BANK0 ] PTR PTR unsigned char 
  1187 ;; Auto vars:     Size  Location     Type
  1188 ;;  i               1   60[BANK0 ] unsigned char 
  1189 ;;  i               1   59[BANK0 ] unsigned char 
  1190 ;;  i               1   58[BANK0 ] unsigned char 
  1191 ;;  i               1   57[BANK0 ] unsigned char 
  1192 ;;  smallNose       2   63[BANK0 ] int 
  1193 ;;  bigNose         2   61[BANK0 ] int 
  1194 ;; Return value:  Size  Location     Type
  1195 ;;                  2   51[BANK0 ] int 
  1196 ;; Registers used:
  1197 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1198 ;; Tracked objects:
  1199 ;;		On entry : 0/0
  1200 ;;		On exit  : 0/0
  1201 ;;		Unchanged: 0/0
  1202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1203 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1204 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1205 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1206 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1207 ;;Total ram usage:       14 bytes
  1208 ;; Hardware stack levels required when called:   11
  1209 ;; This function calls:
  1210 ;;		_captureKeypad
  1211 ;;		_initialize
  1212 ;;		_lcdInst
  1213 ;;		_moveBigNose
  1214 ;;		_moveSmallNose
  1215 ;;		_printf
  1216 ;;		_simulate
  1217 ;; This function is called by:
  1218 ;;		Startup code after reset
  1219 ;; This function uses a non-reentrant model
  1220 ;;
  1221                           
  1222                           	psect	text0
  1223  000926                     __ptext0:
  1224                           	opt stack 0
  1225  000926                     _main:
  1226                           	opt stack 20
  1227                           
  1228                           ;main.c: 143: initialize();
  1229                           
  1230                           ;incstack = 0
  1231  000926  EC9F  F00B         	call	_initialize	;wreg free
  1232                           
  1233                           ;main.c: 145: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(8000000/4000.0)));};
  1234  00092A  0E00               	movlw	0
  1235  00092C  0100               	movlb	0	; () banked
  1236  00092E  6FB9               	movwf	main@i& (0+255),b
  1237  000930                     l4355:
  1238                           
  1239                           ; BSR set to: 0
  1240  000930  0E09               	movlw	9
  1241  000932  0100               	movlb	0	; () banked
  1242  000934  65B9               	cpfsgt	main@i& (0+255),b
  1243  000936  D001               	goto	l4359
  1244  000938  D00C               	goto	l4363
  1245  00093A                     l4359:
  1246                           
  1247                           ; BSR set to: 0
  1248  00093A  0EFF               	movlw	255
  1249  00093C  0100               	movlb	0	; () banked
  1250  00093E  6FB8               	movwf	??_main& (0+255),b
  1251  000940  0E8A               	movlw	138
  1252  000942                     u3127:
  1253  000942  2EE8               	decfsz	wreg,f,c
  1254  000944  D7FE               	bra	u3127
  1255  000946  2FB8               	decfsz	??_main& (0+255),f,b
  1256  000948  D7FC               	bra	u3127
  1257  00094A  F000               	nop	
  1258  00094C  0100               	movlb	0	; () banked
  1259  00094E  2BB9               	incf	main@i& (0+255),f,b
  1260  000950  D7EF               	goto	l4355
  1261  000952                     l4363:
  1262                           
  1263                           ; BSR set to: 0
  1264                           ;main.c: 146: printf((unsigned char *) "Welcome!   ");
  1265  000952  0E75               	movlw	low STR_3
  1266  000954  6E32               	movwf	printf@f,c
  1267  000956  0EFF               	movlw	high STR_3
  1268  000958  6E33               	movwf	printf@f+1,c
  1269  00095A  EC2A  F005         	call	_printf	;wreg free
  1270                           
  1271                           ;main.c: 147: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(8000000/4000.0)));};
  1272  00095E  0E00               	movlw	0
  1273  000960  0100               	movlb	0	; () banked
  1274  000962  6FBA               	movwf	main@i_184& (0+255),b
  1275  000964                     l4367:
  1276                           
  1277                           ; BSR set to: 0
  1278  000964  0E09               	movlw	9
  1279  000966  0100               	movlb	0	; () banked
  1280  000968  65BA               	cpfsgt	main@i_184& (0+255),b
  1281  00096A  D001               	goto	l4371
  1282  00096C  D00C               	goto	l4375
  1283  00096E                     l4371:
  1284                           
  1285                           ; BSR set to: 0
  1286  00096E  0EFF               	movlw	255
  1287  000970  0100               	movlb	0	; () banked
  1288  000972  6FB8               	movwf	??_main& (0+255),b
  1289  000974  0E8A               	movlw	138
  1290  000976                     u3137:
  1291  000976  2EE8               	decfsz	wreg,f,c
  1292  000978  D7FE               	bra	u3137
  1293  00097A  2FB8               	decfsz	??_main& (0+255),f,b
  1294  00097C  D7FC               	bra	u3137
  1295  00097E  F000               	nop	
  1296  000980  0100               	movlb	0	; () banked
  1297  000982  2BBA               	incf	main@i_184& (0+255),f,b
  1298  000984  D7EF               	goto	l4367
  1299  000986                     l4375:
  1300                           
  1301                           ; BSR set to: 0
  1302                           ;main.c: 150: int bigNose = 0, smallNose = 0;
  1303  000986  0E00               	movlw	0
  1304  000988  0100               	movlb	0	; () banked
  1305  00098A  6FBE               	movwf	(main@bigNose+1)& (0+255),b
  1306  00098C  0E00               	movlw	0
  1307  00098E  6FBD               	movwf	main@bigNose& (0+255),b
  1308  000990  0E00               	movlw	0
  1309  000992  0100               	movlb	0	; () banked
  1310  000994  6FC0               	movwf	(main@smallNose+1)& (0+255),b
  1311  000996  0E00               	movlw	0
  1312  000998  6FBF               	movwf	main@smallNose& (0+255),b
  1313                           
  1314                           ; BSR set to: 0
  1315                           ;main.c: 151: moveBigNose(&bigNose, 0);
  1316  00099A  0EBD               	movlw	low main@bigNose
  1317  00099C  6E3E               	movwf	moveBigNose@prev,c
  1318  00099E  0E00               	movlw	high main@bigNose
  1319  0009A0  6E3F               	movwf	moveBigNose@prev+1,c
  1320  0009A2  0E00               	movlw	0
  1321  0009A4  6E41               	movwf	moveBigNose@next+1,c
  1322  0009A6  0E00               	movlw	0
  1323  0009A8  6E40               	movwf	moveBigNose@next,c
  1324  0009AA  ECAE  F007         	call	_moveBigNose	;wreg free
  1325                           
  1326                           ;main.c: 152: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(8000000/4000.0)));};
  1327  0009AE  0E00               	movlw	0
  1328  0009B0  0100               	movlb	0	; () banked
  1329  0009B2  6FBB               	movwf	main@i_187& (0+255),b
  1330  0009B4                     l4381:
  1331                           
  1332                           ; BSR set to: 0
  1333  0009B4  0E09               	movlw	9
  1334  0009B6  0100               	movlb	0	; () banked
  1335  0009B8  65BB               	cpfsgt	main@i_187& (0+255),b
  1336  0009BA  D001               	goto	l4385
  1337  0009BC  D00C               	goto	l4389
  1338  0009BE                     l4385:
  1339                           
  1340                           ; BSR set to: 0
  1341  0009BE  0EFF               	movlw	255
  1342  0009C0  0100               	movlb	0	; () banked
  1343  0009C2  6FB8               	movwf	??_main& (0+255),b
  1344  0009C4  0E8A               	movlw	138
  1345  0009C6                     u3147:
  1346  0009C6  2EE8               	decfsz	wreg,f,c
  1347  0009C8  D7FE               	bra	u3147
  1348  0009CA  2FB8               	decfsz	??_main& (0+255),f,b
  1349  0009CC  D7FC               	bra	u3147
  1350  0009CE  F000               	nop	
  1351  0009D0  0100               	movlb	0	; () banked
  1352  0009D2  2BBB               	incf	main@i_187& (0+255),f,b
  1353  0009D4  D7EF               	goto	l4381
  1354  0009D6                     l4389:
  1355                           
  1356                           ; BSR set to: 0
  1357                           ;main.c: 153: moveSmallNose(&smallNose, 0);
  1358  0009D6  0EBF               	movlw	low main@smallNose
  1359  0009D8  6E3E               	movwf	moveSmallNose@prev,c
  1360  0009DA  0E00               	movlw	high main@smallNose
  1361  0009DC  6E3F               	movwf	moveSmallNose@prev+1,c
  1362  0009DE  0E00               	movlw	0
  1363  0009E0  6E41               	movwf	moveSmallNose@next+1,c
  1364  0009E2  0E00               	movlw	0
  1365  0009E4  6E40               	movwf	moveSmallNose@next,c
  1366  0009E6  EC88  F009         	call	_moveSmallNose	;wreg free
  1367                           
  1368                           ;main.c: 154: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(8000000/4000.0)));};
  1369  0009EA  0E00               	movlw	0
  1370  0009EC  0100               	movlb	0	; () banked
  1371  0009EE  6FBC               	movwf	main@i_188& (0+255),b
  1372  0009F0                     l4393:
  1373                           
  1374                           ; BSR set to: 0
  1375  0009F0  0E09               	movlw	9
  1376  0009F2  0100               	movlb	0	; () banked
  1377  0009F4  65BC               	cpfsgt	main@i_188& (0+255),b
  1378  0009F6  D001               	goto	l4397
  1379  0009F8  D00C               	goto	l4401
  1380  0009FA                     l4397:
  1381                           
  1382                           ; BSR set to: 0
  1383  0009FA  0EFF               	movlw	255
  1384  0009FC  0100               	movlb	0	; () banked
  1385  0009FE  6FB8               	movwf	??_main& (0+255),b
  1386  000A00  0E8A               	movlw	138
  1387  000A02                     u3157:
  1388  000A02  2EE8               	decfsz	wreg,f,c
  1389  000A04  D7FE               	bra	u3157
  1390  000A06  2FB8               	decfsz	??_main& (0+255),f,b
  1391  000A08  D7FC               	bra	u3157
  1392  000A0A  F000               	nop	
  1393  000A0C  0100               	movlb	0	; () banked
  1394  000A0E  2BBC               	incf	main@i_188& (0+255),f,b
  1395  000A10  D7EF               	goto	l4393
  1396  000A12                     l4401:
  1397                           
  1398                           ; BSR set to: 0
  1399                           ;main.c: 155: lcdInst(0b11000000);;
  1400  000A12  0EC0               	movlw	192
  1401  000A14  EC72  F00C         	call	_lcdInst
  1402                           
  1403                           ;main.c: 156: printf("Press Start");
  1404  000A18  0E81               	movlw	low STR_4
  1405  000A1A  6E32               	movwf	printf@f,c
  1406  000A1C  0EFF               	movlw	high STR_4
  1407  000A1E  6E33               	movwf	printf@f+1,c
  1408  000A20  EC2A  F005         	call	_printf	;wreg free
  1409  000A24                     l4405:
  1410  000A24  EC38  F00C         	call	_captureKeypad	;wreg free
  1411  000A28  0E0F               	movlw	15
  1412  000A2A  1826               	xorwf	?_captureKeypad,w,c
  1413  000A2C  1027               	iorwf	?_captureKeypad+1,w,c
  1414  000A2E  A4D8               	btfss	status,2,c
  1415  000A30  D7F9               	goto	l4405
  1416                           
  1417                           ;main.c: 160: simulate(&bigNose, &smallNose);
  1418  000A32  0EBD               	movlw	low main@bigNose
  1419  000A34  0100               	movlb	0	; () banked
  1420  000A36  6F9D               	movwf	simulate@bigNose& (0+255),b
  1421  000A38  0E00               	movlw	high main@bigNose
  1422  000A3A  0100               	movlb	0	; () banked
  1423  000A3C  6F9E               	movwf	(simulate@bigNose+1)& (0+255),b
  1424  000A3E  0EBF               	movlw	low main@smallNose
  1425  000A40  0100               	movlb	0	; () banked
  1426  000A42  6F9F               	movwf	simulate@smallNose& (0+255),b
  1427  000A44  0E00               	movlw	high main@smallNose
  1428  000A46  0100               	movlb	0	; () banked
  1429  000A48  6FA0               	movwf	(simulate@smallNose+1)& (0+255),b
  1430  000A4A  EC98  F002         	call	_simulate	;wreg free
  1431  000A4E  00FF               	reset		;# 
  1432  000A50  EF07  F000         	goto	start
  1433  000A54                     __end_of_main:
  1434                           	opt stack 0
  1435                           tblptru	equ	0xFF8
  1436                           postinc0	equ	0xFEE
  1437                           wreg	equ	0xFE8
  1438                           status	equ	0xFD8
  1439                           
  1440 ;; *************** function _simulate *****************
  1441 ;; Defined at:
  1442 ;;		line 71 in file "main.c"
  1443 ;; Parameters:    Size  Location     Type
  1444 ;;  bigNose         2   29[BANK0 ] PTR int 
  1445 ;;		 -> main@bigNose(2), 
  1446 ;;  smallNose       2   31[BANK0 ] PTR int 
  1447 ;;		 -> main@smallNose(2), 
  1448 ;; Auto vars:     Size  Location     Type
  1449 ;;  sorted          8   43[BANK0 ] int [4]
  1450 ;;  C9              2   41[BANK0 ] int 
  1451 ;;  AA              2   39[BANK0 ] int 
  1452 ;;  stop            2   37[BANK0 ] int 
  1453 ;;  startTime       2   35[BANK0 ] int 
  1454 ;; Return value:  Size  Location     Type
  1455 ;;                  1    wreg      void 
  1456 ;; Registers used:
  1457 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1458 ;; Tracked objects:
  1459 ;;		On entry : 0/0
  1460 ;;		On exit  : 0/0
  1461 ;;		Unchanged: 0/0
  1462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1463 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1464 ;;      Locals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1465 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1466 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1467 ;;Total ram usage:       22 bytes
  1468 ;; Hardware stack levels used:    1
  1469 ;; Hardware stack levels required when called:   10
  1470 ;; This function calls:
  1471 ;;		_captureKeypad
  1472 ;;		_checkAA
  1473 ;;		_checkC9V
  1474 ;;		_getTime
  1475 ;;		_lcdInst
  1476 ;;		_moveBigNose
  1477 ;;		_moveSmallNose
  1478 ;;		_moveXMotors
  1479 ;;		_printf
  1480 ;;		_showInfo
  1481 ;;		_stopMoving
  1482 ;; This function is called by:
  1483 ;;		_main
  1484 ;; This function uses a non-reentrant model
  1485 ;;
  1486                           
  1487                           	psect	text1
  1488  000530                     __ptext1:
  1489                           	opt stack 0
  1490  000530                     _simulate:
  1491                           	opt stack 20
  1492                           
  1493                           ;main.c: 111: lcdInst(0b11000000);;
  1494                           
  1495                           ;incstack = 0
  1496  000530  0EC0               	movlw	192
  1497  000532  EC72  F00C         	call	_lcdInst
  1498                           
  1499                           ;main.c: 112: printf("Sorting...");
  1500  000536  0EC4               	movlw	low STR_1
  1501  000538  6E32               	movwf	printf@f,c
  1502  00053A  0EFF               	movlw	high STR_1
  1503  00053C  6E33               	movwf	printf@f+1,c
  1504  00053E  EC2A  F005         	call	_printf	;wreg free
  1505                           
  1506                           ;main.c: 113: int stop = 0;
  1507  000542  0E00               	movlw	0
  1508  000544  0100               	movlb	0	; () banked
  1509  000546  6FA6               	movwf	(simulate@stop+1)& (0+255),b
  1510  000548  0E00               	movlw	0
  1511  00054A  6FA5               	movwf	simulate@stop& (0+255),b
  1512                           
  1513                           ; BSR set to: 0
  1514                           ;main.c: 114: int sorted[] = {0, 0, 0, 0};
  1515  00054C  EE20  F0C1         	lfsr	2,simulate@F3216
  1516  000550  EE10  F0AB         	lfsr	1,simulate@sorted
  1517  000554  0E07               	movlw	7
  1518  000556                     u2891:
  1519  000556  CFDB FFE3          	movff	plusw2,plusw1
  1520  00055A  06E8               	decf	wreg,f,c
  1521  00055C  E2FC               	bc	u2891
  1522                           
  1523                           ; BSR set to: 0
  1524                           ;main.c: 115: int startTime = getTime();
  1525  00055E  EC5B  F00C         	call	_getTime	;wreg free
  1526  000562  C026  F0A3         	movff	?_getTime,simulate@startTime
  1527  000566  C027  F0A4         	movff	?_getTime+1,simulate@startTime+1
  1528                           
  1529                           ;main.c: 116: int AA = 0;
  1530  00056A  0E00               	movlw	0
  1531  00056C  0100               	movlb	0	; () banked
  1532  00056E  6FA8               	movwf	(simulate@AA+1)& (0+255),b
  1533  000570  0E00               	movlw	0
  1534  000572  6FA7               	movwf	simulate@AA& (0+255),b
  1535                           
  1536                           ; BSR set to: 0
  1537                           ;main.c: 117: int C9 = 0;
  1538  000574  0E00               	movlw	0
  1539  000576  0100               	movlb	0	; () banked
  1540  000578  6FAA               	movwf	(simulate@C9+1)& (0+255),b
  1541  00057A  0E00               	movlw	0
  1542  00057C  6FA9               	movwf	simulate@C9& (0+255),b
  1543                           
  1544                           ; BSR set to: 0
  1545                           ;main.c: 118: INT1IE = 1;
  1546  00057E  86F0               	bsf	intcon3,3,c	;volatile
  1547                           
  1548                           ;main.c: 120: while (!stop) {
  1549  000580  D07A               	goto	l4287
  1550  000582                     l4259:
  1551                           
  1552                           ; BSR set to: 0
  1553                           ;main.c: 121: captureKeypad();
  1554  000582  EC38  F00C         	call	_captureKeypad	;wreg free
  1555                           
  1556                           ;main.c: 122: moveSmallNose(smallNose, AA);
  1557  000586  C09F  F03E         	movff	simulate@smallNose,moveSmallNose@prev
  1558  00058A  C0A0  F03F         	movff	simulate@smallNose+1,moveSmallNose@prev+1
  1559  00058E  C0A7  F040         	movff	simulate@AA,moveSmallNose@next
  1560  000592  C0A8  F041         	movff	simulate@AA+1,moveSmallNose@next+1
  1561  000596  EC88  F009         	call	_moveSmallNose	;wreg free
  1562                           
  1563                           ;main.c: 123: moveBigNose(bigNose, C9);
  1564  00059A  C09D  F03E         	movff	simulate@bigNose,moveBigNose@prev
  1565  00059E  C09E  F03F         	movff	simulate@bigNose+1,moveBigNose@prev+1
  1566  0005A2  C0A9  F040         	movff	simulate@C9,moveBigNose@next
  1567  0005A6  C0AA  F041         	movff	simulate@C9+1,moveBigNose@next+1
  1568  0005AA  ECAE  F007         	call	_moveBigNose	;wreg free
  1569                           
  1570                           ;main.c: 124: moveXMotors();
  1571  0005AE  EC13  F00B         	call	_moveXMotors	;wreg free
  1572                           
  1573                           ;main.c: 127: AA = checkAA(sorted);
  1574  0005B2  0EAB               	movlw	low simulate@sorted
  1575  0005B4  0100               	movlb	0	; () banked
  1576  0005B6  6F8D               	movwf	checkAA@sorted& (0+255),b
  1577  0005B8  0E00               	movlw	high simulate@sorted
  1578  0005BA  0100               	movlb	0	; () banked
  1579  0005BC  6F8E               	movwf	(checkAA@sorted+1)& (0+255),b
  1580  0005BE  EC4E  F003         	call	_checkAA	;wreg free
  1581  0005C2  C08D  F0A7         	movff	?_checkAA,simulate@AA
  1582  0005C6  C08E  F0A8         	movff	?_checkAA+1,simulate@AA+1
  1583                           
  1584                           ;main.c: 128: AA = (AA == -1) ? *smallNose : AA;
  1585  0005CA  0100               	movlb	0	; () banked
  1586  0005CC  29A7               	incf	simulate@AA& (0+255),w,b
  1587  0005CE  E10C               	bnz	l4275
  1588  0005D0  0100               	movlb	0	; () banked
  1589  0005D2  29A8               	incf	(simulate@AA+1)& (0+255),w,b
  1590  0005D4  A4D8               	btfss	status,2,c
  1591  0005D6  D008               	goto	l4275
  1592                           
  1593                           ; BSR set to: 0
  1594                           
  1595                           ; BSR set to: 0
  1596                           
  1597                           ; BSR set to: 0
  1598  0005D8  C09F  FFD9         	movff	simulate@smallNose,fsr2l
  1599  0005DC  C0A0  FFDA         	movff	simulate@smallNose+1,fsr2h
  1600  0005E0  CFDE F0A7          	movff	postinc2,simulate@AA
  1601  0005E4  CFDD F0A8          	movff	postdec2,simulate@AA+1
  1602  0005E8                     l4275:
  1603                           
  1604                           ; BSR set to: 0
  1605                           ;main.c: 129: C9 = checkC9V(sorted);
  1606  0005E8  0EAB               	movlw	low simulate@sorted
  1607  0005EA  0100               	movlb	0	; () banked
  1608  0005EC  6F8D               	movwf	checkC9V@sorted& (0+255),b
  1609  0005EE  0E00               	movlw	high simulate@sorted
  1610  0005F0  0100               	movlb	0	; () banked
  1611  0005F2  6F8E               	movwf	(checkC9V@sorted+1)& (0+255),b
  1612  0005F4  EC09  F000         	call	_checkC9V	;wreg free
  1613  0005F8  C08D  F0A9         	movff	?_checkC9V,simulate@C9
  1614  0005FC  C08E  F0AA         	movff	?_checkC9V+1,simulate@C9+1
  1615                           
  1616                           ;main.c: 130: C9 = (C9 == -1) ? *bigNose : C9;
  1617  000600  0100               	movlb	0	; () banked
  1618  000602  29A9               	incf	simulate@C9& (0+255),w,b
  1619  000604  E10C               	bnz	l4283
  1620  000606  0100               	movlb	0	; () banked
  1621  000608  29AA               	incf	(simulate@C9+1)& (0+255),w,b
  1622  00060A  A4D8               	btfss	status,2,c
  1623  00060C  D008               	goto	l4283
  1624                           
  1625                           ; BSR set to: 0
  1626                           
  1627                           ; BSR set to: 0
  1628                           
  1629                           ; BSR set to: 0
  1630  00060E  C09D  FFD9         	movff	simulate@bigNose,fsr2l
  1631  000612  C09E  FFDA         	movff	simulate@bigNose+1,fsr2h
  1632  000616  CFDE F0A9          	movff	postinc2,simulate@C9
  1633  00061A  CFDD F0AA          	movff	postdec2,simulate@C9+1
  1634  00061E                     l4283:
  1635                           
  1636                           ; BSR set to: 0
  1637                           ;main.c: 131: if (sorted[0] + sorted[1] + sorted[2] + sorted[3] >= 5) {
  1638  00061E  0100               	movlb	0	; () banked
  1639  000620  51AF               	movf	(simulate@sorted+4)& (0+255),w,b
  1640  000622  0100               	movlb	0	; () banked
  1641  000624  25AD               	addwf	(simulate@sorted+2)& (0+255),w,b
  1642  000626  0100               	movlb	0	; () banked
  1643  000628  6FA1               	movwf	??_simulate& (0+255),b
  1644  00062A  0100               	movlb	0	; () banked
  1645  00062C  51B0               	movf	(simulate@sorted+5)& (0+255),w,b
  1646  00062E  0100               	movlb	0	; () banked
  1647  000630  21AE               	addwfc	(simulate@sorted+3)& (0+255),w,b
  1648  000632  0100               	movlb	0	; () banked
  1649  000634  6FA2               	movwf	(??_simulate+1)& (0+255),b
  1650  000636  0100               	movlb	0	; () banked
  1651  000638  51B1               	movf	(simulate@sorted+6)& (0+255),w,b
  1652  00063A  0100               	movlb	0	; () banked
  1653  00063C  27A1               	addwf	??_simulate& (0+255),f,b
  1654  00063E  0100               	movlb	0	; () banked
  1655  000640  51B2               	movf	(simulate@sorted+7)& (0+255),w,b
  1656  000642  0100               	movlb	0	; () banked
  1657  000644  23A2               	addwfc	(??_simulate+1)& (0+255),f,b
  1658  000646  0100               	movlb	0	; () banked
  1659  000648  51AB               	movf	simulate@sorted& (0+255),w,b
  1660  00064A  0100               	movlb	0	; () banked
  1661  00064C  27A1               	addwf	??_simulate& (0+255),f,b
  1662  00064E  0100               	movlb	0	; () banked
  1663  000650  51AC               	movf	(simulate@sorted+1)& (0+255),w,b
  1664  000652  0100               	movlb	0	; () banked
  1665  000654  23A2               	addwfc	(??_simulate+1)& (0+255),f,b
  1666  000656  0100               	movlb	0	; () banked
  1667  000658  BFA2               	btfsc	(??_simulate+1)& (0+255),7,b
  1668  00065A  D00D               	goto	l4287
  1669  00065C  0100               	movlb	0	; () banked
  1670  00065E  51A2               	movf	(??_simulate+1)& (0+255),w,b
  1671  000660  E105               	bnz	u2920
  1672  000662  0E05               	movlw	5
  1673  000664  0100               	movlb	0	; () banked
  1674  000666  5DA1               	subwf	??_simulate& (0+255),w,b
  1675  000668  A0D8               	btfss	status,0,c
  1676  00066A  D005               	goto	l4287
  1677  00066C                     u2920:
  1678                           
  1679                           ; BSR set to: 0
  1680                           ;main.c: 132: stop = 1;
  1681  00066C  0E00               	movlw	0
  1682  00066E  0100               	movlb	0	; () banked
  1683  000670  6FA6               	movwf	(simulate@stop+1)& (0+255),b
  1684  000672  0E01               	movlw	1
  1685  000674  6FA5               	movwf	simulate@stop& (0+255),b
  1686  000676                     l4287:
  1687                           
  1688                           ; BSR set to: 0
  1689  000676  0100               	movlb	0	; () banked
  1690  000678  51A5               	movf	simulate@stop& (0+255),w,b
  1691  00067A  0100               	movlb	0	; () banked
  1692  00067C  11A6               	iorwf	(simulate@stop+1)& (0+255),w,b
  1693  00067E  B4D8               	btfsc	status,2,c
  1694  000680  D780               	goto	l4259
  1695                           
  1696                           ; BSR set to: 0
  1697                           ;main.c: 133: }
  1698                           ;main.c: 134: }
  1699                           ;main.c: 137: showInfo(179, sorted);
  1700                           
  1701                           ; BSR set to: 0
  1702  000682  0E00               	movlw	0
  1703  000684  6E3F               	movwf	showInfo@time+1,c
  1704  000686  0EB3               	movlw	179
  1705  000688  6E3E               	movwf	showInfo@time,c
  1706  00068A  0EAB               	movlw	low simulate@sorted
  1707  00068C  6E40               	movwf	showInfo@sorted,c
  1708  00068E  0E00               	movlw	high simulate@sorted
  1709  000690  6E41               	movwf	showInfo@sorted+1,c
  1710  000692  EC78  F001         	call	_showInfo	;wreg free
  1711                           
  1712                           ;main.c: 138: stopMoving();
  1713  000696  EC45  F00C         	call	_stopMoving	;wreg free
  1714  00069A  0012               	return	
  1715  00069C                     __end_of_simulate:
  1716                           	opt stack 0
  1717                           tblptru	equ	0xFF8
  1718                           intcon3	equ	0xFF0
  1719                           postinc0	equ	0xFEE
  1720                           wreg	equ	0xFE8
  1721                           plusw1	equ	0xFE3
  1722                           postinc2	equ	0xFDE
  1723                           postdec2	equ	0xFDD
  1724                           plusw2	equ	0xFDB
  1725                           fsr2h	equ	0xFDA
  1726                           fsr2l	equ	0xFD9
  1727                           status	equ	0xFD8
  1728                           
  1729 ;; *************** function _stopMoving *****************
  1730 ;; Defined at:
  1731 ;;		line 217 in file "motors.c"
  1732 ;; Parameters:    Size  Location     Type
  1733 ;;		None
  1734 ;; Auto vars:     Size  Location     Type
  1735 ;;		None
  1736 ;; Return value:  Size  Location     Type
  1737 ;;                  1    wreg      void 
  1738 ;; Registers used:
  1739 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1740 ;; Tracked objects:
  1741 ;;		On entry : 0/0
  1742 ;;		On exit  : 0/0
  1743 ;;		Unchanged: 0/0
  1744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1748 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1749 ;;Total ram usage:        0 bytes
  1750 ;; Hardware stack levels used:    1
  1751 ;; Hardware stack levels required when called:    8
  1752 ;; This function calls:
  1753 ;;		_lcdInst
  1754 ;;		_printf
  1755 ;; This function is called by:
  1756 ;;		_simulate
  1757 ;;		_mainloop
  1758 ;; This function uses a non-reentrant model
  1759 ;;
  1760                           
  1761                           	psect	text2
  1762  00188A                     __ptext2:
  1763                           	opt stack 0
  1764  00188A                     _stopMoving:
  1765                           	opt stack 21
  1766                           
  1767                           ;motors.c: 218: (INTCONbits.GIE = 0);
  1768                           
  1769                           ;incstack = 0
  1770  00188A  9EF2               	bcf	intcon,7,c	;volatile
  1771                           
  1772                           ;motors.c: 219: lcdInst(0b10000000);;
  1773  00188C  0E80               	movlw	128
  1774  00188E  EC72  F00C         	call	_lcdInst
  1775                           
  1776                           ;motors.c: 220: printf("Stopped    ");
  1777  001892  0E69               	movlw	low STR_29
  1778  001894  6E32               	movwf	printf@f,c
  1779  001896  0EFF               	movlw	high STR_29
  1780  001898  6E33               	movwf	printf@f+1,c
  1781  00189A  EC2A  F005         	call	_printf	;wreg free
  1782  00189E                     l311:
  1783  00189E  D7FF               	goto	l311
  1784  0018A0                     __end_of_stopMoving:
  1785                           	opt stack 0
  1786                           tblptru	equ	0xFF8
  1787                           intcon	equ	0xFF2
  1788                           intcon3	equ	0xFF0
  1789                           postinc0	equ	0xFEE
  1790                           wreg	equ	0xFE8
  1791                           plusw1	equ	0xFE3
  1792                           postinc2	equ	0xFDE
  1793                           postdec2	equ	0xFDD
  1794                           plusw2	equ	0xFDB
  1795                           fsr2h	equ	0xFDA
  1796                           fsr2l	equ	0xFD9
  1797                           status	equ	0xFD8
  1798                           
  1799 ;; *************** function _showInfo *****************
  1800 ;; Defined at:
  1801 ;;		line 23 in file "modules.c"
  1802 ;; Parameters:    Size  Location     Type
  1803 ;;  time            2   61[COMRAM] unsigned int 
  1804 ;;  sorted          2   63[COMRAM] PTR unsigned int 
  1805 ;;		 -> simulate@sorted(8), mainloop@sorted(8), 
  1806 ;; Auto vars:     Size  Location     Type
  1807 ;;  type            2   73[COMRAM] int 
  1808 ;; Return value:  Size  Location     Type
  1809 ;;                  1    wreg      void 
  1810 ;; Registers used:
  1811 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1812 ;; Tracked objects:
  1813 ;;		On entry : 0/0
  1814 ;;		On exit  : 0/0
  1815 ;;		Unchanged: 0/0
  1816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1817 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1818 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1819 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1820 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1821 ;;Total ram usage:       14 bytes
  1822 ;; Hardware stack levels used:    1
  1823 ;; Hardware stack levels required when called:    8
  1824 ;; This function calls:
  1825 ;;		_captureKeypad
  1826 ;;		_lcdInst
  1827 ;;		_printf
  1828 ;; This function is called by:
  1829 ;;		_simulate
  1830 ;;		_mainloop
  1831 ;; This function uses a non-reentrant model
  1832 ;;
  1833                           
  1834                           	psect	text3
  1835  0002F0                     __ptext3:
  1836                           	opt stack 0
  1837  0002F0                     _showInfo:
  1838                           	opt stack 21
  1839                           
  1840                           ;modules.c: 24: (INTCONbits.GIE = 0);
  1841                           
  1842                           ;incstack = 0
  1843  0002F0  9EF2               	bcf	intcon,7,c	;volatile
  1844                           
  1845                           ;modules.c: 25: lcdInst(0b10000000);;
  1846  0002F2  0E80               	movlw	128
  1847  0002F4  EC72  F00C         	call	_lcdInst
  1848                           
  1849                           ;modules.c: 26: printf("Sorting Complete");
  1850  0002F8  0E7B               	movlw	low STR_5
  1851  0002FA  6E32               	movwf	printf@f,c
  1852  0002FC  0EFE               	movlw	high STR_5
  1853  0002FE  6E33               	movwf	printf@f+1,c
  1854  000300  EC2A  F005         	call	_printf	;wreg free
  1855                           
  1856                           ;modules.c: 27: _delay((unsigned long)((1000)*(8000000/4000.0)));
  1857  000304  0E0B               	movlw	11
  1858  000306  6E43               	movwf	(??_showInfo+1)& (0+255),c
  1859  000308  0E26               	movlw	38
  1860  00030A  6E42               	movwf	??_showInfo& (0+255),c
  1861  00030C  0E5E               	movlw	94
  1862  00030E                     u3167:
  1863  00030E  2EE8               	decfsz	wreg,f,c
  1864  000310  D7FE               	bra	u3167
  1865  000312  2E42               	decfsz	??_showInfo& (0+255),f,c
  1866  000314  D7FC               	bra	u3167
  1867  000316  2E43               	decfsz	(??_showInfo+1)& (0+255),f,c
  1868  000318  D7FA               	bra	u3167
  1869                           
  1870                           ;modules.c: 28: lcdInst(0b10000000);;
  1871  00031A  0E80               	movlw	128
  1872  00031C  EC72  F00C         	call	_lcdInst
  1873                           
  1874                           ;modules.c: 29: printf("Press a number");
  1875  000320  0EFA               	movlw	low STR_6
  1876  000322  6E32               	movwf	printf@f,c
  1877  000324  0EFE               	movlw	high STR_6
  1878  000326  6E33               	movwf	printf@f+1,c
  1879  000328  EC2A  F005         	call	_printf	;wreg free
  1880                           
  1881                           ;modules.c: 30: lcdInst(0b11000000);;
  1882  00032C  0EC0               	movlw	192
  1883  00032E  EC72  F00C         	call	_lcdInst
  1884                           
  1885                           ;modules.c: 31: printf("For more info");
  1886  000332  0E41               	movlw	low STR_7
  1887  000334  6E32               	movwf	printf@f,c
  1888  000336  0EFF               	movlw	high STR_7
  1889  000338  6E33               	movwf	printf@f+1,c
  1890  00033A  EC2A  F005         	call	_printf	;wreg free
  1891                           
  1892                           ;modules.c: 32: int type = 0;
  1893  00033E  0E00               	movlw	0
  1894  000340  6E4B               	movwf	showInfo@type+1,c
  1895  000342  0E00               	movlw	0
  1896  000344  6E4A               	movwf	showInfo@type,c
  1897  000346                     l4181:
  1898                           
  1899                           ;modules.c: 34: type = captureKeypad();
  1900  000346  EC38  F00C         	call	_captureKeypad	;wreg free
  1901  00034A  C026  F04A         	movff	?_captureKeypad,showInfo@type
  1902  00034E  C027  F04B         	movff	?_captureKeypad+1,showInfo@type+1
  1903                           
  1904                           ;modules.c: 35: switch (type) {
  1905  000352  D0CF               	goto	l4221
  1906  000354                     l4183:
  1907                           
  1908                           ;modules.c: 37: lcdInst(0b10000000);;
  1909  000354  0E80               	movlw	128
  1910  000356  EC72  F00C         	call	_lcdInst
  1911                           
  1912                           ;modules.c: 38: printf("Time Elapsed:");
  1913  00035A  0E25               	movlw	low STR_8
  1914  00035C  6E32               	movwf	printf@f,c
  1915  00035E  0EFF               	movlw	high STR_8
  1916  000360  6E33               	movwf	printf@f+1,c
  1917  000362  EC2A  F005         	call	_printf	;wreg free
  1918                           
  1919                           ;modules.c: 39: lcdInst(0b11000000);;
  1920  000366  0EC0               	movlw	192
  1921  000368  EC72  F00C         	call	_lcdInst
  1922                           
  1923                           ;modules.c: 40: printf("%d seconds", time);
  1924  00036C  0EB9               	movlw	low STR_9
  1925  00036E  6E32               	movwf	printf@f,c
  1926  000370  0EFF               	movlw	high STR_9
  1927  000372  6E33               	movwf	printf@f+1,c
  1928  000374  C03E  F034         	movff	showInfo@time,?_printf+2
  1929  000378  C03F  F035         	movff	showInfo@time+1,?_printf+3
  1930  00037C  EC2A  F005         	call	_printf	;wreg free
  1931                           
  1932                           ;modules.c: 41: break;
  1933  000380  D7E2               	goto	l4181
  1934  000382                     l4189:
  1935                           
  1936                           ;modules.c: 43: lcdInst(0b10000000);;
  1937  000382  0E80               	movlw	128
  1938  000384  EC72  F00C         	call	_lcdInst
  1939                           
  1940                           ;modules.c: 44: printf("Total Sorted:");
  1941  000388  0E33               	movlw	low STR_10
  1942  00038A  6E32               	movwf	printf@f,c
  1943  00038C  0EFF               	movlw	high STR_10
  1944  00038E  6E33               	movwf	printf@f+1,c
  1945  000390  EC2A  F005         	call	_printf	;wreg free
  1946                           
  1947                           ;modules.c: 45: printf("%d batteries", sorted[0] + sorted[1] + sorted[2] + sorted[3]);
  1948  000394  0E5C               	movlw	low STR_11
  1949  000396  6E32               	movwf	printf@f,c
  1950  000398  0EFF               	movlw	high STR_11
  1951  00039A  6E33               	movwf	printf@f+1,c
  1952  00039C  EE20 F006          	lfsr	2,6
  1953  0003A0  5040               	movf	showInfo@sorted,w,c
  1954  0003A2  26D9               	addwf	fsr2l,f,c
  1955  0003A4  5041               	movf	showInfo@sorted+1,w,c
  1956  0003A6  22DA               	addwfc	fsr2h,f,c
  1957  0003A8  CFDE F042          	movff	postinc2,??_showInfo
  1958  0003AC  CFDD F043          	movff	postdec2,??_showInfo+1
  1959  0003B0  EE20 F004          	lfsr	2,4
  1960  0003B4  5040               	movf	showInfo@sorted,w,c
  1961  0003B6  26D9               	addwf	fsr2l,f,c
  1962  0003B8  5041               	movf	showInfo@sorted+1,w,c
  1963  0003BA  22DA               	addwfc	fsr2h,f,c
  1964  0003BC  CFDE F044          	movff	postinc2,??_showInfo+2
  1965  0003C0  CFDD F045          	movff	postdec2,??_showInfo+3
  1966  0003C4  EE20 F002          	lfsr	2,2
  1967  0003C8  5040               	movf	showInfo@sorted,w,c
  1968  0003CA  26D9               	addwf	fsr2l,f,c
  1969  0003CC  5041               	movf	showInfo@sorted+1,w,c
  1970  0003CE  22DA               	addwfc	fsr2h,f,c
  1971  0003D0  CFDE F046          	movff	postinc2,??_showInfo+4
  1972  0003D4  CFDD F047          	movff	postdec2,??_showInfo+5
  1973  0003D8  C040  FFD9         	movff	showInfo@sorted,fsr2l
  1974  0003DC  C041  FFDA         	movff	showInfo@sorted+1,fsr2h
  1975  0003E0  CFDE F048          	movff	postinc2,??_showInfo+6
  1976  0003E4  CFDD F049          	movff	postdec2,??_showInfo+7
  1977  0003E8  5046               	movf	??_showInfo+4,w,c
  1978  0003EA  2648               	addwf	??_showInfo+6,f,c
  1979  0003EC  5047               	movf	??_showInfo+5,w,c
  1980  0003EE  2249               	addwfc	??_showInfo+7,f,c
  1981  0003F0  5044               	movf	??_showInfo+2,w,c
  1982  0003F2  2648               	addwf	??_showInfo+6,f,c
  1983  0003F4  5045               	movf	??_showInfo+3,w,c
  1984  0003F6  2249               	addwfc	??_showInfo+7,f,c
  1985  0003F8  5042               	movf	??_showInfo,w,c
  1986  0003FA  2448               	addwf	??_showInfo+6,w,c
  1987  0003FC  6E34               	movwf	?_printf+2,c
  1988  0003FE  5043               	movf	??_showInfo+1,w,c
  1989  000400  2049               	addwfc	??_showInfo+7,w,c
  1990  000402  6E35               	movwf	?_printf+3,c
  1991  000404  EC2A  F005         	call	_printf	;wreg free
  1992                           
  1993                           ;modules.c: 46: break;
  1994  000408  D79E               	goto	l4181
  1995  00040A                     l4195:
  1996                           
  1997                           ;modules.c: 48: lcdInst(0b10000000);;
  1998  00040A  0E80               	movlw	128
  1999  00040C  EC72  F00C         	call	_lcdInst
  2000                           
  2001                           ;modules.c: 49: printf("AA Sorted:");
  2002  000410  0EA3               	movlw	low STR_12
  2003  000412  6E32               	movwf	printf@f,c
  2004  000414  0EFF               	movlw	high STR_12
  2005  000416  6E33               	movwf	printf@f+1,c
  2006  000418  EC2A  F005         	call	_printf	;wreg free
  2007                           
  2008                           ;modules.c: 50: lcdInst(0b11000000);;
  2009  00041C  0EC0               	movlw	192
  2010  00041E  EC72  F00C         	call	_lcdInst
  2011                           
  2012                           ;modules.c: 51: printf("%d", sorted[0]);
  2013  000422  0EFB               	movlw	low STR_13
  2014  000424  6E32               	movwf	printf@f,c
  2015  000426  0EFF               	movlw	high STR_13
  2016  000428  6E33               	movwf	printf@f+1,c
  2017  00042A  C040  FFD9         	movff	showInfo@sorted,fsr2l
  2018  00042E  C041  FFDA         	movff	showInfo@sorted+1,fsr2h
  2019  000432  CFDE F034          	movff	postinc2,?_printf+2
  2020  000436  CFDD F035          	movff	postdec2,?_printf+3
  2021  00043A  EC2A  F005         	call	_printf	;wreg free
  2022                           
  2023                           ;modules.c: 52: break;
  2024  00043E  D783               	goto	l4181
  2025  000440                     l4201:
  2026                           
  2027                           ;modules.c: 54: lcdInst(0b10000000);;
  2028  000440  0E80               	movlw	128
  2029  000442  EC72  F00C         	call	_lcdInst
  2030                           
  2031                           ;modules.c: 55: printf("C Sorted:");
  2032  000446  0ECF               	movlw	low STR_14
  2033  000448  6E32               	movwf	printf@f,c
  2034  00044A  0EFF               	movlw	high STR_14
  2035  00044C  6E33               	movwf	printf@f+1,c
  2036  00044E  EC2A  F005         	call	_printf	;wreg free
  2037                           
  2038                           ;modules.c: 56: lcdInst(0b11000000);;
  2039  000452  0EC0               	movlw	192
  2040  000454  EC72  F00C         	call	_lcdInst
  2041                           
  2042                           ;modules.c: 57: printf("%d", sorted[1]);
  2043  000458  0EFB               	movlw	low STR_13
  2044  00045A  6E32               	movwf	printf@f,c
  2045  00045C  0EFF               	movlw	high STR_13
  2046  00045E  6E33               	movwf	printf@f+1,c
  2047  000460  EE20 F002          	lfsr	2,2
  2048  000464  5040               	movf	showInfo@sorted,w,c
  2049  000466  26D9               	addwf	fsr2l,f,c
  2050  000468  5041               	movf	showInfo@sorted+1,w,c
  2051  00046A  22DA               	addwfc	fsr2h,f,c
  2052  00046C  CFDE F034          	movff	postinc2,?_printf+2
  2053  000470  CFDD F035          	movff	postdec2,?_printf+3
  2054  000474  EC2A  F005         	call	_printf	;wreg free
  2055                           
  2056                           ;modules.c: 58: break;
  2057  000478  D766               	goto	l4181
  2058  00047A                     l4207:
  2059                           
  2060                           ;modules.c: 60: lcdInst(0b10000000);;
  2061  00047A  0E80               	movlw	128
  2062  00047C  EC72  F00C         	call	_lcdInst
  2063                           
  2064                           ;modules.c: 61: printf("9V Sorted:");
  2065  000480  0EAE               	movlw	low STR_16
  2066  000482  6E32               	movwf	printf@f,c
  2067  000484  0EFF               	movlw	high STR_16
  2068  000486  6E33               	movwf	printf@f+1,c
  2069  000488  EC2A  F005         	call	_printf	;wreg free
  2070                           
  2071                           ;modules.c: 62: lcdInst(0b11000000);;
  2072  00048C  0EC0               	movlw	192
  2073  00048E  EC72  F00C         	call	_lcdInst
  2074                           
  2075                           ;modules.c: 63: printf("%d", sorted[2]);
  2076  000492  0EFB               	movlw	low STR_13
  2077  000494  6E32               	movwf	printf@f,c
  2078  000496  0EFF               	movlw	high STR_13
  2079  000498  6E33               	movwf	printf@f+1,c
  2080  00049A  EE20 F004          	lfsr	2,4
  2081  00049E  5040               	movf	showInfo@sorted,w,c
  2082  0004A0  26D9               	addwf	fsr2l,f,c
  2083  0004A2  5041               	movf	showInfo@sorted+1,w,c
  2084  0004A4  22DA               	addwfc	fsr2h,f,c
  2085  0004A6  CFDE F034          	movff	postinc2,?_printf+2
  2086  0004AA  CFDD F035          	movff	postdec2,?_printf+3
  2087  0004AE  EC2A  F005         	call	_printf	;wreg free
  2088                           
  2089                           ;modules.c: 64: break;
  2090  0004B2  D749               	goto	l4181
  2091  0004B4                     l4213:
  2092                           
  2093                           ;modules.c: 66: lcdInst(0b10000000);;
  2094  0004B4  0E80               	movlw	128
  2095  0004B6  EC72  F00C         	call	_lcdInst
  2096                           
  2097                           ;modules.c: 67: printf("Uncharged:");
  2098  0004BA  0E98               	movlw	low STR_18
  2099  0004BC  6E32               	movwf	printf@f,c
  2100  0004BE  0EFF               	movlw	high STR_18
  2101  0004C0  6E33               	movwf	printf@f+1,c
  2102  0004C2  EC2A  F005         	call	_printf	;wreg free
  2103                           
  2104                           ;modules.c: 68: lcdInst(0b11000000);;
  2105  0004C6  0EC0               	movlw	192
  2106  0004C8  EC72  F00C         	call	_lcdInst
  2107                           
  2108                           ;modules.c: 69: printf("%d", sorted[3]);
  2109  0004CC  0EFB               	movlw	low STR_13
  2110  0004CE  6E32               	movwf	printf@f,c
  2111  0004D0  0EFF               	movlw	high STR_13
  2112  0004D2  6E33               	movwf	printf@f+1,c
  2113  0004D4  EE20 F006          	lfsr	2,6
  2114  0004D8  5040               	movf	showInfo@sorted,w,c
  2115  0004DA  26D9               	addwf	fsr2l,f,c
  2116  0004DC  5041               	movf	showInfo@sorted+1,w,c
  2117  0004DE  22DA               	addwfc	fsr2h,f,c
  2118  0004E0  CFDE F034          	movff	postinc2,?_printf+2
  2119  0004E4  CFDD F035          	movff	postdec2,?_printf+3
  2120  0004E8  EC2A  F005         	call	_printf	;wreg free
  2121                           
  2122                           ;modules.c: 70: break;
  2123  0004EC  D72C               	goto	l4181
  2124  0004EE                     l173:
  2125  0004EE  00FF               	reset		;# 
  2126                           
  2127                           ;modules.c: 76: }
  2128                           
  2129                           ;modules.c: 75: break;
  2130                           
  2131                           ;modules.c: 74: default:
  2132  0004F0  D72A               	goto	l4181
  2133  0004F2                     l4221:
  2134  0004F2  C04A  F042         	movff	showInfo@type,??_showInfo
  2135  0004F6  C04B  F043         	movff	showInfo@type+1,??_showInfo+1
  2136                           
  2137                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2138                           ; Switch size 1, requested type "space"
  2139                           ; Number of cases is 1, Range of values is 0 to 0
  2140                           ; switch strategies available:
  2141                           ; Name         Instructions Cycles
  2142                           ; simple_byte            4     3 (average)
  2143                           ;	Chosen strategy is simple_byte
  2144  0004FA  5043               	movf	??_showInfo+1,w,c
  2145  0004FC  0A00               	xorlw	0	; case 0
  2146  0004FE  A4D8               	btfss	status,2,c
  2147  000500  D722               	goto	l4181
  2148                           
  2149                           ; Switch size 1, requested type "space"
  2150                           ; Number of cases is 7, Range of values is 0 to 15
  2151                           ; switch strategies available:
  2152                           ; Name         Instructions Cycles
  2153                           ; simple_byte           22    12 (average)
  2154                           ;	Chosen strategy is simple_byte
  2155  000502  5042               	movf	??_showInfo,w,c
  2156  000504  0A00               	xorlw	0	; case 0
  2157  000506  B4D8               	btfsc	status,2,c
  2158  000508  D725               	goto	l4183
  2159  00050A  0A01               	xorlw	1	; case 1
  2160  00050C  B4D8               	btfsc	status,2,c
  2161  00050E  D739               	goto	l4189
  2162  000510  0A03               	xorlw	3	; case 2
  2163  000512  B4D8               	btfsc	status,2,c
  2164  000514  D77A               	goto	l4195
  2165  000516  0A01               	xorlw	1	; case 3
  2166  000518  B4D8               	btfsc	status,2,c
  2167  00051A  D792               	goto	l4201
  2168  00051C  0A07               	xorlw	7	; case 4
  2169  00051E  B4D8               	btfsc	status,2,c
  2170  000520  D7AC               	goto	l4207
  2171  000522  0A01               	xorlw	1	; case 5
  2172  000524  B4D8               	btfsc	status,2,c
  2173  000526  D7C6               	goto	l4213
  2174  000528  0A0A               	xorlw	10	; case 15
  2175  00052A  B4D8               	btfsc	status,2,c
  2176  00052C  D7E0               	goto	l173
  2177  00052E  D70B               	goto	l4181
  2178  000530                     __end_of_showInfo:
  2179                           	opt stack 0
  2180                           tblptru	equ	0xFF8
  2181                           intcon	equ	0xFF2
  2182                           intcon3	equ	0xFF0
  2183                           postinc0	equ	0xFEE
  2184                           wreg	equ	0xFE8
  2185                           plusw1	equ	0xFE3
  2186                           postinc2	equ	0xFDE
  2187                           postdec2	equ	0xFDD
  2188                           plusw2	equ	0xFDB
  2189                           fsr2h	equ	0xFDA
  2190                           fsr2l	equ	0xFD9
  2191                           status	equ	0xFD8
  2192                           
  2193 ;; *************** function _captureKeypad *****************
  2194 ;; Defined at:
  2195 ;;		line 3 in file "modules.c"
  2196 ;; Parameters:    Size  Location     Type
  2197 ;;		None
  2198 ;; Auto vars:     Size  Location     Type
  2199 ;;  keypress        1   39[COMRAM] unsigned char 
  2200 ;; Return value:  Size  Location     Type
  2201 ;;                  2   37[COMRAM] unsigned int 
  2202 ;; Registers used:
  2203 ;;		wreg, status,2, status,0
  2204 ;; Tracked objects:
  2205 ;;		On entry : 0/0
  2206 ;;		On exit  : 0/0
  2207 ;;		Unchanged: 0/0
  2208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2209 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2210 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2212 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2213 ;;Total ram usage:        3 bytes
  2214 ;; Hardware stack levels used:    1
  2215 ;; Hardware stack levels required when called:    5
  2216 ;; This function calls:
  2217 ;;		Nothing
  2218 ;; This function is called by:
  2219 ;;		_simulate
  2220 ;;		_main
  2221 ;;		_showInfo
  2222 ;; This function uses a non-reentrant model
  2223 ;;
  2224                           
  2225                           	psect	text4
  2226  001870                     __ptext4:
  2227                           	opt stack 0
  2228  001870                     _captureKeypad:
  2229                           	opt stack 23
  2230  001870                     l151:
  2231  001870  A281               	btfss	3969,1,c	;volatile
  2232  001872  D7FE               	goto	l151
  2233                           
  2234                           ;modules.c: 5: unsigned char keypress = (PORTB & 0xF0) >> 4;
  2235  001874  3881               	swapf	3969,w,c	;volatile
  2236  001876  0B0F               	andlw	15
  2237  001878  0B0F               	andlw	15
  2238  00187A  6E28               	movwf	captureKeypad@keypress,c
  2239  00187C                     l154:
  2240  00187C  B281               	btfsc	3969,1,c	;volatile
  2241  00187E  D7FE               	goto	l154
  2242                           
  2243                           ;modules.c: 7: INT1IF = 0;
  2244  001880  90F0               	bcf	intcon3,0,c	;volatile
  2245                           
  2246                           ;modules.c: 9: return keypress;
  2247  001882  C028  F026         	movff	captureKeypad@keypress,?_captureKeypad
  2248  001886  6A27               	clrf	?_captureKeypad+1,c
  2249  001888  0012               	return		;funcret
  2250  00188A                     __end_of_captureKeypad:
  2251                           	opt stack 0
  2252                           tblptru	equ	0xFF8
  2253                           intcon	equ	0xFF2
  2254                           intcon3	equ	0xFF0
  2255                           postinc0	equ	0xFEE
  2256                           wreg	equ	0xFE8
  2257                           plusw1	equ	0xFE3
  2258                           postinc2	equ	0xFDE
  2259                           postdec2	equ	0xFDD
  2260                           plusw2	equ	0xFDB
  2261                           fsr2h	equ	0xFDA
  2262                           fsr2l	equ	0xFD9
  2263                           status	equ	0xFD8
  2264                           
  2265 ;; *************** function _moveXMotors *****************
  2266 ;; Defined at:
  2267 ;;		line 150 in file "motors.c"
  2268 ;; Parameters:    Size  Location     Type
  2269 ;;		None
  2270 ;; Auto vars:     Size  Location     Type
  2271 ;;		None
  2272 ;; Return value:  Size  Location     Type
  2273 ;;                  1    wreg      void 
  2274 ;; Registers used:
  2275 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2276 ;; Tracked objects:
  2277 ;;		On entry : 0/0
  2278 ;;		On exit  : 0/0
  2279 ;;		Unchanged: 0/0
  2280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2283 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2284 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2285 ;;Total ram usage:        2 bytes
  2286 ;; Hardware stack levels used:    1
  2287 ;; Hardware stack levels required when called:    9
  2288 ;; This function calls:
  2289 ;;		_PWM1_Stop
  2290 ;;		_printf
  2291 ;;		_runPWM1
  2292 ;; This function is called by:
  2293 ;;		_simulate
  2294 ;;		_mainloop
  2295 ;; This function uses a non-reentrant model
  2296 ;;
  2297                           
  2298                           	psect	text5
  2299  001626                     __ptext5:
  2300                           	opt stack 0
  2301  001626                     _moveXMotors:
  2302                           	opt stack 20
  2303                           
  2304                           ;motors.c: 152: printf("Rotating Xs    ");
  2305                           
  2306                           ;incstack = 0
  2307  001626  0EBC               	movlw	low STR_20
  2308  001628  6E32               	movwf	printf@f,c
  2309  00162A  0EFE               	movlw	high STR_20
  2310  00162C  6E33               	movwf	printf@f+1,c
  2311  00162E  EC2A  F005         	call	_printf	;wreg free
  2312                           
  2313                           ;motors.c: 153: runPWM1(256, 3100);
  2314  001632  0E01               	movlw	1
  2315  001634  0100               	movlb	0	; () banked
  2316  001636  6F94               	movwf	(runPWM1@duty+1)& (0+255),b
  2317  001638  0E00               	movlw	0
  2318  00163A  6F93               	movwf	runPWM1@duty& (0+255),b
  2319  00163C  0E1C               	movlw	28
  2320  00163E  0100               	movlb	0	; () banked
  2321  001640  6F95               	movwf	runPWM1@freq& (0+255),b
  2322  001642  0E0C               	movlw	12
  2323  001644  6F96               	movwf	(runPWM1@freq+1)& (0+255),b
  2324  001646  0E00               	movlw	0
  2325  001648  6F97               	movwf	(runPWM1@freq+2)& (0+255),b
  2326  00164A  0E00               	movlw	0
  2327  00164C  6F98               	movwf	(runPWM1@freq+3)& (0+255),b
  2328  00164E  ECF8  F00B         	call	_runPWM1	;wreg free
  2329                           
  2330                           ;motors.c: 154: _delay((unsigned long)((1000)*(8000000/4000.0)));
  2331  001652  0E0B               	movlw	11
  2332  001654  0100               	movlb	0	; () banked
  2333  001656  6F9C               	movwf	(??_moveXMotors+1)& (0+255),b
  2334  001658  0E26               	movlw	38
  2335  00165A  0100               	movlb	0	; () banked
  2336  00165C  6F9B               	movwf	??_moveXMotors& (0+255),b
  2337  00165E  0E5D               	movlw	93
  2338  001660                     u3177:
  2339  001660  2EE8               	decfsz	wreg,f,c
  2340  001662  D7FE               	bra	u3177
  2341  001664  2F9B               	decfsz	??_moveXMotors& (0+255),f,b
  2342  001666  D7FC               	bra	u3177
  2343  001668  2F9C               	decfsz	(??_moveXMotors+1)& (0+255),f,b
  2344  00166A  D7FA               	bra	u3177
  2345  00166C  D000               	nop2	
  2346                           
  2347                           ;motors.c: 155: PWM1_Stop();
  2348  00166E  EC84  F00C         	call	_PWM1_Stop	;wreg free
  2349  001672  0012               	return		;funcret
  2350  001674                     __end_of_moveXMotors:
  2351                           	opt stack 0
  2352                           tblptru	equ	0xFF8
  2353                           intcon	equ	0xFF2
  2354                           intcon3	equ	0xFF0
  2355                           postinc0	equ	0xFEE
  2356                           wreg	equ	0xFE8
  2357                           plusw1	equ	0xFE3
  2358                           postinc2	equ	0xFDE
  2359                           postdec2	equ	0xFDD
  2360                           plusw2	equ	0xFDB
  2361                           fsr2h	equ	0xFDA
  2362                           fsr2l	equ	0xFD9
  2363                           status	equ	0xFD8
  2364                           
  2365 ;; *************** function _runPWM1 *****************
  2366 ;; Defined at:
  2367 ;;		line 102 in file "motors.c"
  2368 ;; Parameters:    Size  Location     Type
  2369 ;;  duty            2   19[BANK0 ] unsigned int 
  2370 ;;  freq            4   21[BANK0 ] long 
  2371 ;; Auto vars:     Size  Location     Type
  2372 ;;  max_duty        2   25[BANK0 ] int 
  2373 ;; Return value:  Size  Location     Type
  2374 ;;                  1    wreg      void 
  2375 ;; Registers used:
  2376 ;;		wreg, status,2, status,0, cstack
  2377 ;; Tracked objects:
  2378 ;;		On entry : 0/0
  2379 ;;		On exit  : 0/0
  2380 ;;		Unchanged: 0/0
  2381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2382 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2383 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2385 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2386 ;;Total ram usage:        8 bytes
  2387 ;; Hardware stack levels used:    1
  2388 ;; Hardware stack levels required when called:    8
  2389 ;; This function calls:
  2390 ;;		_PWM1_Start
  2391 ;;		_set_PWM1_duty
  2392 ;;		_set_PWM_freq
  2393 ;; This function is called by:
  2394 ;;		_moveXMotors
  2395 ;; This function uses a non-reentrant model
  2396 ;;
  2397                           
  2398                           	psect	text6
  2399  0017F0                     __ptext6:
  2400                           	opt stack 0
  2401  0017F0                     _runPWM1:
  2402                           	opt stack 20
  2403                           
  2404                           ;motors.c: 103: PWM1_Start();
  2405                           
  2406                           ;incstack = 0
  2407  0017F0  EC64  F00C         	call	_PWM1_Start	;wreg free
  2408                           
  2409                           ;motors.c: 104: int max_duty = set_PWM_freq(freq);
  2410  0017F4  C095  F034         	movff	runPWM1@freq,set_PWM_freq@fre
  2411  0017F8  C096  F035         	movff	runPWM1@freq+1,set_PWM_freq@fre+1
  2412  0017FC  C097  F036         	movff	runPWM1@freq+2,set_PWM_freq@fre+2
  2413  001800  C098  F037         	movff	runPWM1@freq+3,set_PWM_freq@fre+3
  2414  001804  EC35  F009         	call	_set_PWM_freq	;wreg free
  2415  001808  C034  F099         	movff	?_set_PWM_freq,runPWM1@max_duty
  2416  00180C  C035  F09A         	movff	?_set_PWM_freq+1,runPWM1@max_duty+1
  2417                           
  2418                           ;motors.c: 105: set_PWM1_duty(duty, max_duty);
  2419  001810  C093  F08F         	movff	runPWM1@duty,set_PWM1_duty@duty
  2420  001814  C094  F090         	movff	runPWM1@duty+1,set_PWM1_duty@duty+1
  2421  001818  C099  F091         	movff	runPWM1@max_duty,set_PWM1_duty@Max_Duty
  2422  00181C  C09A  F092         	movff	runPWM1@max_duty+1,set_PWM1_duty@Max_Duty+1
  2423  001820  ECD7  F009         	call	_set_PWM1_duty	;wreg free
  2424  001824  0012               	return		;funcret
  2425  001826                     __end_of_runPWM1:
  2426                           	opt stack 0
  2427                           tblptru	equ	0xFF8
  2428                           intcon	equ	0xFF2
  2429                           intcon3	equ	0xFF0
  2430                           postinc0	equ	0xFEE
  2431                           wreg	equ	0xFE8
  2432                           plusw1	equ	0xFE3
  2433                           postinc2	equ	0xFDE
  2434                           postdec2	equ	0xFDD
  2435                           plusw2	equ	0xFDB
  2436                           fsr2h	equ	0xFDA
  2437                           fsr2l	equ	0xFD9
  2438                           status	equ	0xFD8
  2439                           
  2440 ;; *************** function _set_PWM_freq *****************
  2441 ;; Defined at:
  2442 ;;		line 5 in file "motors.c"
  2443 ;; Parameters:    Size  Location     Type
  2444 ;;  fre             4   51[COMRAM] long 
  2445 ;; Auto vars:     Size  Location     Type
  2446 ;;		None
  2447 ;; Return value:  Size  Location     Type
  2448 ;;                  2   51[COMRAM] int 
  2449 ;; Registers used:
  2450 ;;		wreg, status,2, status,0, cstack
  2451 ;; Tracked objects:
  2452 ;;		On entry : 0/0
  2453 ;;		On exit  : 0/0
  2454 ;;		Unchanged: 0/0
  2455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2456 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2458 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2459 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2460 ;;Total ram usage:        8 bytes
  2461 ;; Hardware stack levels used:    1
  2462 ;; Hardware stack levels required when called:    6
  2463 ;; This function calls:
  2464 ;;		___aldiv
  2465 ;; This function is called by:
  2466 ;;		_runPWM1
  2467 ;;		_runPWM2
  2468 ;; This function uses a non-reentrant model
  2469 ;;
  2470                           
  2471                           	psect	text7
  2472  00126A                     __ptext7:
  2473                           	opt stack 0
  2474  00126A                     _set_PWM_freq:
  2475                           	opt stack 21
  2476                           
  2477                           ;motors.c: 7: PR2 = (8000000 / (fre * 4 * 16)) - 1;
  2478                           
  2479                           ;incstack = 0
  2480  00126A  0E00               	movlw	0
  2481  00126C  6E26               	movwf	___aldiv@dividend,c
  2482  00126E  0E12               	movlw	18
  2483  001270  6E27               	movwf	___aldiv@dividend+1,c
  2484  001272  0E7A               	movlw	122
  2485  001274  6E28               	movwf	___aldiv@dividend+2,c
  2486  001276  0E00               	movlw	0
  2487  001278  6E29               	movwf	___aldiv@dividend+3,c
  2488  00127A  C034  F038         	movff	set_PWM_freq@fre,??_set_PWM_freq
  2489  00127E  C035  F039         	movff	set_PWM_freq@fre+1,??_set_PWM_freq+1
  2490  001282  C036  F03A         	movff	set_PWM_freq@fre+2,??_set_PWM_freq+2
  2491  001286  C037  F03B         	movff	set_PWM_freq@fre+3,??_set_PWM_freq+3
  2492  00128A  0E02               	movlw	2
  2493  00128C                     u1635:
  2494  00128C  90D8               	bcf	status,0,c
  2495  00128E  3638               	rlcf	??_set_PWM_freq,f,c
  2496  001290  3639               	rlcf	??_set_PWM_freq+1,f,c
  2497  001292  363A               	rlcf	??_set_PWM_freq+2,f,c
  2498  001294  363B               	rlcf	??_set_PWM_freq+3,f,c
  2499  001296  2EE8               	decfsz	wreg,f,c
  2500  001298  D7F9               	goto	u1635
  2501  00129A  0E04               	movlw	4
  2502  00129C                     u1645:
  2503  00129C  90D8               	bcf	status,0,c
  2504  00129E  3638               	rlcf	??_set_PWM_freq,f,c
  2505  0012A0  3639               	rlcf	??_set_PWM_freq+1,f,c
  2506  0012A2  363A               	rlcf	??_set_PWM_freq+2,f,c
  2507  0012A4  363B               	rlcf	??_set_PWM_freq+3,f,c
  2508  0012A6  2EE8               	decfsz	wreg,f,c
  2509  0012A8  D7F9               	goto	u1645
  2510  0012AA  C038  F02A         	movff	??_set_PWM_freq,___aldiv@divisor
  2511  0012AE  C039  F02B         	movff	??_set_PWM_freq+1,___aldiv@divisor+1
  2512  0012B2  C03A  F02C         	movff	??_set_PWM_freq+2,___aldiv@divisor+2
  2513  0012B6  C03B  F02D         	movff	??_set_PWM_freq+3,___aldiv@divisor+3
  2514  0012BA  EC1C  F008         	call	___aldiv	;wreg free
  2515  0012BE  0426               	decf	?___aldiv,w,c
  2516  0012C0  6ECB               	movwf	4043,c	;volatile
  2517                           
  2518                           ;motors.c: 9: return (8000000 / (fre * 16));
  2519  0012C2  0E00               	movlw	0
  2520  0012C4  6E26               	movwf	___aldiv@dividend,c
  2521  0012C6  0E12               	movlw	18
  2522  0012C8  6E27               	movwf	___aldiv@dividend+1,c
  2523  0012CA  0E7A               	movlw	122
  2524  0012CC  6E28               	movwf	___aldiv@dividend+2,c
  2525  0012CE  0E00               	movlw	0
  2526  0012D0  6E29               	movwf	___aldiv@dividend+3,c
  2527  0012D2  C034  F038         	movff	set_PWM_freq@fre,??_set_PWM_freq
  2528  0012D6  C035  F039         	movff	set_PWM_freq@fre+1,??_set_PWM_freq+1
  2529  0012DA  C036  F03A         	movff	set_PWM_freq@fre+2,??_set_PWM_freq+2
  2530  0012DE  C037  F03B         	movff	set_PWM_freq@fre+3,??_set_PWM_freq+3
  2531  0012E2  0E04               	movlw	4
  2532  0012E4                     u1655:
  2533  0012E4  90D8               	bcf	status,0,c
  2534  0012E6  3638               	rlcf	??_set_PWM_freq,f,c
  2535  0012E8  3639               	rlcf	??_set_PWM_freq+1,f,c
  2536  0012EA  363A               	rlcf	??_set_PWM_freq+2,f,c
  2537  0012EC  363B               	rlcf	??_set_PWM_freq+3,f,c
  2538  0012EE  2EE8               	decfsz	wreg,f,c
  2539  0012F0  D7F9               	goto	u1655
  2540  0012F2  C038  F02A         	movff	??_set_PWM_freq,___aldiv@divisor
  2541  0012F6  C039  F02B         	movff	??_set_PWM_freq+1,___aldiv@divisor+1
  2542  0012FA  C03A  F02C         	movff	??_set_PWM_freq+2,___aldiv@divisor+2
  2543  0012FE  C03B  F02D         	movff	??_set_PWM_freq+3,___aldiv@divisor+3
  2544  001302  EC1C  F008         	call	___aldiv	;wreg free
  2545  001306  C026  F034         	movff	?___aldiv,?_set_PWM_freq
  2546  00130A  C027  F035         	movff	?___aldiv+1,?_set_PWM_freq+1
  2547  00130E  0012               	return	
  2548  001310                     __end_of_set_PWM_freq:
  2549                           	opt stack 0
  2550                           tblptru	equ	0xFF8
  2551                           intcon	equ	0xFF2
  2552                           intcon3	equ	0xFF0
  2553                           postinc0	equ	0xFEE
  2554                           wreg	equ	0xFE8
  2555                           plusw1	equ	0xFE3
  2556                           postinc2	equ	0xFDE
  2557                           postdec2	equ	0xFDD
  2558                           plusw2	equ	0xFDB
  2559                           fsr2h	equ	0xFDA
  2560                           fsr2l	equ	0xFD9
  2561                           status	equ	0xFD8
  2562                           
  2563 ;; *************** function ___aldiv *****************
  2564 ;; Defined at:
  2565 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\aldiv.c"
  2566 ;; Parameters:    Size  Location     Type
  2567 ;;  dividend        4   37[COMRAM] long 
  2568 ;;  divisor         4   41[COMRAM] long 
  2569 ;; Auto vars:     Size  Location     Type
  2570 ;;  quotient        4   47[COMRAM] long 
  2571 ;;  sign            1   46[COMRAM] unsigned char 
  2572 ;;  counter         1   45[COMRAM] unsigned char 
  2573 ;; Return value:  Size  Location     Type
  2574 ;;                  4   37[COMRAM] long 
  2575 ;; Registers used:
  2576 ;;		wreg, status,2, status,0
  2577 ;; Tracked objects:
  2578 ;;		On entry : 0/0
  2579 ;;		On exit  : 0/0
  2580 ;;		Unchanged: 0/0
  2581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2582 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2583 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2585 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2586 ;;Total ram usage:       14 bytes
  2587 ;; Hardware stack levels used:    1
  2588 ;; Hardware stack levels required when called:    5
  2589 ;; This function calls:
  2590 ;;		Nothing
  2591 ;; This function is called by:
  2592 ;;		_set_PWM_freq
  2593 ;; This function uses a non-reentrant model
  2594 ;;
  2595                           
  2596                           	psect	text8
  2597  001038                     __ptext8:
  2598                           	opt stack 0
  2599  001038                     ___aldiv:
  2600                           	opt stack 21
  2601                           
  2602                           ;incstack = 0
  2603  001038  0E00               	movlw	0
  2604  00103A  6E2F               	movwf	___aldiv@sign,c
  2605  00103C  AE2D               	btfss	___aldiv@divisor+3,7,c
  2606  00103E  D00A               	goto	l2365
  2607  001040  1E2D               	comf	___aldiv@divisor+3,f,c
  2608  001042  1E2C               	comf	___aldiv@divisor+2,f,c
  2609  001044  1E2B               	comf	___aldiv@divisor+1,f,c
  2610  001046  6C2A               	negf	___aldiv@divisor,c
  2611  001048  0E00               	movlw	0
  2612  00104A  222B               	addwfc	___aldiv@divisor+1,f,c
  2613  00104C  222C               	addwfc	___aldiv@divisor+2,f,c
  2614  00104E  222D               	addwfc	___aldiv@divisor+3,f,c
  2615  001050  0E01               	movlw	1
  2616  001052  6E2F               	movwf	___aldiv@sign,c
  2617  001054                     l2365:
  2618  001054  AE29               	btfss	___aldiv@dividend+3,7,c
  2619  001056  D00A               	goto	l2371
  2620  001058  1E29               	comf	___aldiv@dividend+3,f,c
  2621  00105A  1E28               	comf	___aldiv@dividend+2,f,c
  2622  00105C  1E27               	comf	___aldiv@dividend+1,f,c
  2623  00105E  6C26               	negf	___aldiv@dividend,c
  2624  001060  0E00               	movlw	0
  2625  001062  2227               	addwfc	___aldiv@dividend+1,f,c
  2626  001064  2228               	addwfc	___aldiv@dividend+2,f,c
  2627  001066  2229               	addwfc	___aldiv@dividend+3,f,c
  2628  001068  0E01               	movlw	1
  2629  00106A  1A2F               	xorwf	___aldiv@sign,f,c
  2630  00106C                     l2371:
  2631  00106C  0E00               	movlw	0
  2632  00106E  6E30               	movwf	___aldiv@quotient,c
  2633  001070  0E00               	movlw	0
  2634  001072  6E31               	movwf	___aldiv@quotient+1,c
  2635  001074  0E00               	movlw	0
  2636  001076  6E32               	movwf	___aldiv@quotient+2,c
  2637  001078  0E00               	movlw	0
  2638  00107A  6E33               	movwf	___aldiv@quotient+3,c
  2639  00107C  502A               	movf	___aldiv@divisor,w,c
  2640  00107E  102B               	iorwf	___aldiv@divisor+1,w,c
  2641  001080  102C               	iorwf	___aldiv@divisor+2,w,c
  2642  001082  102D               	iorwf	___aldiv@divisor+3,w,c
  2643  001084  B4D8               	btfsc	status,2,c
  2644  001086  D02A               	goto	l2393
  2645  001088  0E01               	movlw	1
  2646  00108A  6E2E               	movwf	___aldiv@counter,c
  2647  00108C  D006               	goto	l2379
  2648  00108E                     l2377:
  2649  00108E  90D8               	bcf	status,0,c
  2650  001090  362A               	rlcf	___aldiv@divisor,f,c
  2651  001092  362B               	rlcf	___aldiv@divisor+1,f,c
  2652  001094  362C               	rlcf	___aldiv@divisor+2,f,c
  2653  001096  362D               	rlcf	___aldiv@divisor+3,f,c
  2654  001098  2A2E               	incf	___aldiv@counter,f,c
  2655  00109A                     l2379:
  2656  00109A  AE2D               	btfss	___aldiv@divisor+3,7,c
  2657  00109C  D7F8               	goto	l2377
  2658  00109E                     l2381:
  2659  00109E  90D8               	bcf	status,0,c
  2660  0010A0  3630               	rlcf	___aldiv@quotient,f,c
  2661  0010A2  3631               	rlcf	___aldiv@quotient+1,f,c
  2662  0010A4  3632               	rlcf	___aldiv@quotient+2,f,c
  2663  0010A6  3633               	rlcf	___aldiv@quotient+3,f,c
  2664  0010A8  502A               	movf	___aldiv@divisor,w,c
  2665  0010AA  5C26               	subwf	___aldiv@dividend,w,c
  2666  0010AC  502B               	movf	___aldiv@divisor+1,w,c
  2667  0010AE  5827               	subwfb	___aldiv@dividend+1,w,c
  2668  0010B0  502C               	movf	___aldiv@divisor+2,w,c
  2669  0010B2  5828               	subwfb	___aldiv@dividend+2,w,c
  2670  0010B4  502D               	movf	___aldiv@divisor+3,w,c
  2671  0010B6  5829               	subwfb	___aldiv@dividend+3,w,c
  2672  0010B8  A0D8               	btfss	status,0,c
  2673  0010BA  D009               	goto	l2389
  2674  0010BC  502A               	movf	___aldiv@divisor,w,c
  2675  0010BE  5E26               	subwf	___aldiv@dividend,f,c
  2676  0010C0  502B               	movf	___aldiv@divisor+1,w,c
  2677  0010C2  5A27               	subwfb	___aldiv@dividend+1,f,c
  2678  0010C4  502C               	movf	___aldiv@divisor+2,w,c
  2679  0010C6  5A28               	subwfb	___aldiv@dividend+2,f,c
  2680  0010C8  502D               	movf	___aldiv@divisor+3,w,c
  2681  0010CA  5A29               	subwfb	___aldiv@dividend+3,f,c
  2682  0010CC  8030               	bsf	___aldiv@quotient,0,c
  2683  0010CE                     l2389:
  2684  0010CE  90D8               	bcf	status,0,c
  2685  0010D0  322D               	rrcf	___aldiv@divisor+3,f,c
  2686  0010D2  322C               	rrcf	___aldiv@divisor+2,f,c
  2687  0010D4  322B               	rrcf	___aldiv@divisor+1,f,c
  2688  0010D6  322A               	rrcf	___aldiv@divisor,f,c
  2689  0010D8  2E2E               	decfsz	___aldiv@counter,f,c
  2690  0010DA  D7E1               	goto	l2381
  2691  0010DC                     l2393:
  2692  0010DC  502F               	movf	___aldiv@sign,w,c
  2693  0010DE  B4D8               	btfsc	status,2,c
  2694  0010E0  D008               	goto	l2397
  2695  0010E2  1E33               	comf	___aldiv@quotient+3,f,c
  2696  0010E4  1E32               	comf	___aldiv@quotient+2,f,c
  2697  0010E6  1E31               	comf	___aldiv@quotient+1,f,c
  2698  0010E8  6C30               	negf	___aldiv@quotient,c
  2699  0010EA  0E00               	movlw	0
  2700  0010EC  2231               	addwfc	___aldiv@quotient+1,f,c
  2701  0010EE  2232               	addwfc	___aldiv@quotient+2,f,c
  2702  0010F0  2233               	addwfc	___aldiv@quotient+3,f,c
  2703  0010F2                     l2397:
  2704  0010F2  C030  F026         	movff	___aldiv@quotient,?___aldiv
  2705  0010F6  C031  F027         	movff	___aldiv@quotient+1,?___aldiv+1
  2706  0010FA  C032  F028         	movff	___aldiv@quotient+2,?___aldiv+2
  2707  0010FE  C033  F029         	movff	___aldiv@quotient+3,?___aldiv+3
  2708  001102  0012               	return	
  2709  001104                     __end_of___aldiv:
  2710                           	opt stack 0
  2711                           tblptru	equ	0xFF8
  2712                           intcon	equ	0xFF2
  2713                           intcon3	equ	0xFF0
  2714                           postinc0	equ	0xFEE
  2715                           wreg	equ	0xFE8
  2716                           plusw1	equ	0xFE3
  2717                           postinc2	equ	0xFDE
  2718                           postdec2	equ	0xFDD
  2719                           plusw2	equ	0xFDB
  2720                           fsr2h	equ	0xFDA
  2721                           fsr2l	equ	0xFD9
  2722                           status	equ	0xFD8
  2723                           
  2724 ;; *************** function _set_PWM1_duty *****************
  2725 ;; Defined at:
  2726 ;;		line 66 in file "motors.c"
  2727 ;; Parameters:    Size  Location     Type
  2728 ;;  duty            2   15[BANK0 ] unsigned int 
  2729 ;;  Max_Duty        2   17[BANK0 ] int 
  2730 ;; Auto vars:     Size  Location     Type
  2731 ;;		None
  2732 ;; Return value:  Size  Location     Type
  2733 ;;                  1    wreg      void 
  2734 ;; Registers used:
  2735 ;;		wreg, status,2, status,0, cstack
  2736 ;; Tracked objects:
  2737 ;;		On entry : 0/0
  2738 ;;		On exit  : 0/0
  2739 ;;		Unchanged: 0/0
  2740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2741 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2742 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2743 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2744 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2745 ;;Total ram usage:        6 bytes
  2746 ;; Hardware stack levels used:    1
  2747 ;; Hardware stack levels required when called:    7
  2748 ;; This function calls:
  2749 ;;		___awtoft
  2750 ;;		___ftdiv
  2751 ;;		___ftmul
  2752 ;;		___fttol
  2753 ;;		___lwtoft
  2754 ;; This function is called by:
  2755 ;;		_runPWM1
  2756 ;; This function uses a non-reentrant model
  2757 ;;
  2758                           
  2759                           	psect	text9
  2760  0013AE                     __ptext9:
  2761                           	opt stack 0
  2762  0013AE                     _set_PWM1_duty:
  2763                           	opt stack 20
  2764                           
  2765                           ;motors.c: 67: if (duty < 1024) {
  2766                           
  2767                           ;incstack = 0
  2768  0013AE  0E04               	movlw	4
  2769  0013B0  0100               	movlb	0	; () banked
  2770  0013B2  5D90               	subwf	(set_PWM1_duty@duty+1)& (0+255),w,b
  2771  0013B4  B0D8               	btfsc	status,0,c
  2772  0013B6  0012               	return	
  2773                           
  2774                           ; BSR set to: 0
  2775                           ;motors.c: 69: duty = ((float) duty / 1023) * Max_Duty;
  2776  0013B8  C091  F02E         	movff	set_PWM1_duty@Max_Duty,___awtoft@c
  2777  0013BC  C092  F02F         	movff	set_PWM1_duty@Max_Duty+1,___awtoft@c+1
  2778  0013C0  ECDC  F00B         	call	___awtoft	;wreg free
  2779  0013C4  C02E  F043         	movff	?___awtoft,___ftmul@f2
  2780  0013C8  C02F  F044         	movff	?___awtoft+1,___ftmul@f2+1
  2781  0013CC  C030  F045         	movff	?___awtoft+2,___ftmul@f2+2
  2782  0013D0  0EC0               	movlw	192
  2783  0013D2  6E34               	movwf	___ftdiv@f2,c
  2784  0013D4  0E7F               	movlw	127
  2785  0013D6  6E35               	movwf	___ftdiv@f2+1,c
  2786  0013D8  0E44               	movlw	68
  2787  0013DA  6E36               	movwf	___ftdiv@f2+2,c
  2788  0013DC  C08F  F02E         	movff	set_PWM1_duty@duty,___lwtoft@c
  2789  0013E0  C090  F02F         	movff	set_PWM1_duty@duty+1,___lwtoft@c+1
  2790  0013E4  EC26  F00C         	call	___lwtoft	;wreg free
  2791  0013E8  C02E  F031         	movff	?___lwtoft,___ftdiv@f1
  2792  0013EC  C02F  F032         	movff	?___lwtoft+1,___ftdiv@f1+1
  2793  0013F0  C030  F033         	movff	?___lwtoft+2,___ftdiv@f1+2
  2794  0013F4  ECCC  F006         	call	___ftdiv	;wreg free
  2795  0013F8  C031  F040         	movff	?___ftdiv,___ftmul@f1
  2796  0013FC  C032  F041         	movff	?___ftdiv+1,___ftmul@f1+1
  2797  001400  C033  F042         	movff	?___ftdiv+2,___ftmul@f1+2
  2798  001404  EC52  F006         	call	___ftmul	;wreg free
  2799  001408  C040  F080         	movff	?___ftmul,___fttol@f1
  2800  00140C  C041  F081         	movff	?___ftmul+1,___fttol@f1+1
  2801  001410  C042  F082         	movff	?___ftmul+2,___fttol@f1+2
  2802  001414  ECF1  F003         	call	___fttol	;wreg free
  2803  001418  C080  F08F         	movff	?___fttol,set_PWM1_duty@duty
  2804  00141C  C081  F090         	movff	?___fttol+1,set_PWM1_duty@duty+1
  2805                           
  2806                           ;motors.c: 70: CCP1X = duty & 2;
  2807  001420  9ABD               	bcf	4029,5,c	;volatile
  2808                           
  2809                           ;motors.c: 71: CCP1Y = duty & 1;
  2810  001422  0100               	movlb	0	; () banked
  2811  001424  A18F               	btfss	set_PWM1_duty@duty& (0+255),0,b
  2812  001426  D002               	goto	u2700
  2813  001428  88BD               	bsf	4029,4,c	;volatile
  2814  00142A  D001               	goto	l3859
  2815  00142C                     u2700:
  2816  00142C  98BD               	bcf	4029,4,c	;volatile
  2817  00142E                     l3859:
  2818                           
  2819                           ;motors.c: 72: CCPR1L = duty >> 2;
  2820  00142E  C08F  F04F         	movff	set_PWM1_duty@duty,??_set_PWM1_duty
  2821  001432  C090  F050         	movff	set_PWM1_duty@duty+1,??_set_PWM1_duty+1
  2822  001436  90D8               	bcf	status,0,c
  2823  001438  3250               	rrcf	??_set_PWM1_duty+1,f,c
  2824  00143A  324F               	rrcf	??_set_PWM1_duty,f,c
  2825  00143C  90D8               	bcf	status,0,c
  2826  00143E  3250               	rrcf	??_set_PWM1_duty+1,f,c
  2827  001440  324F               	rrcf	??_set_PWM1_duty,f,c
  2828  001442  504F               	movf	??_set_PWM1_duty,w,c
  2829  001444  6EBE               	movwf	4030,c	;volatile
  2830  001446  0012               	return	
  2831  001448                     __end_of_set_PWM1_duty:
  2832                           	opt stack 0
  2833                           tblptru	equ	0xFF8
  2834                           intcon	equ	0xFF2
  2835                           intcon3	equ	0xFF0
  2836                           postinc0	equ	0xFEE
  2837                           wreg	equ	0xFE8
  2838                           plusw1	equ	0xFE3
  2839                           postinc2	equ	0xFDE
  2840                           postdec2	equ	0xFDD
  2841                           plusw2	equ	0xFDB
  2842                           fsr2h	equ	0xFDA
  2843                           fsr2l	equ	0xFD9
  2844                           status	equ	0xFD8
  2845                           
  2846 ;; *************** function ___lwtoft *****************
  2847 ;; Defined at:
  2848 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwtoft.c"
  2849 ;; Parameters:    Size  Location     Type
  2850 ;;  c               2   45[COMRAM] unsigned int 
  2851 ;; Auto vars:     Size  Location     Type
  2852 ;;		None
  2853 ;; Return value:  Size  Location     Type
  2854 ;;                  3   45[COMRAM] float 
  2855 ;; Registers used:
  2856 ;;		wreg, status,2, status,0, cstack
  2857 ;; Tracked objects:
  2858 ;;		On entry : 0/0
  2859 ;;		On exit  : 0/0
  2860 ;;		Unchanged: 0/0
  2861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2862 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2865 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2866 ;;Total ram usage:        3 bytes
  2867 ;; Hardware stack levels used:    1
  2868 ;; Hardware stack levels required when called:    6
  2869 ;; This function calls:
  2870 ;;		___ftpack
  2871 ;; This function is called by:
  2872 ;;		_set_PWM1_duty
  2873 ;;		_set_PWM2_duty
  2874 ;; This function uses a non-reentrant model
  2875 ;;
  2876                           
  2877                           	psect	text10
  2878  00184C                     __ptext10:
  2879                           	opt stack 0
  2880  00184C                     ___lwtoft:
  2881                           	opt stack 20
  2882                           
  2883                           ;incstack = 0
  2884  00184C  C02E  F026         	movff	___lwtoft@c,___ftpack@arg
  2885  001850  C02F  F027         	movff	___lwtoft@c+1,___ftpack@arg+1
  2886  001854  6A28               	clrf	___ftpack@arg+2,c
  2887  001856  0E8E               	movlw	142
  2888  001858  6E29               	movwf	___ftpack@exp,c
  2889  00185A  0E00               	movlw	0
  2890  00185C  6E2A               	movwf	___ftpack@sign,c
  2891  00185E  ECDE  F008         	call	___ftpack	;wreg free
  2892  001862  C026  F02E         	movff	?___ftpack,?___lwtoft
  2893  001866  C027  F02F         	movff	?___ftpack+1,?___lwtoft+1
  2894  00186A  C028  F030         	movff	?___ftpack+2,?___lwtoft+2
  2895  00186E  0012               	return	
  2896  001870                     __end_of___lwtoft:
  2897                           	opt stack 0
  2898                           tblptru	equ	0xFF8
  2899                           intcon	equ	0xFF2
  2900                           intcon3	equ	0xFF0
  2901                           postinc0	equ	0xFEE
  2902                           wreg	equ	0xFE8
  2903                           plusw1	equ	0xFE3
  2904                           postinc2	equ	0xFDE
  2905                           postdec2	equ	0xFDD
  2906                           plusw2	equ	0xFDB
  2907                           fsr2h	equ	0xFDA
  2908                           fsr2l	equ	0xFD9
  2909                           status	equ	0xFD8
  2910                           
  2911 ;; *************** function ___fttol *****************
  2912 ;; Defined at:
  2913 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
  2914 ;; Parameters:    Size  Location     Type
  2915 ;;  f1              3    0[BANK0 ] float 
  2916 ;; Auto vars:     Size  Location     Type
  2917 ;;  lval            4   10[BANK0 ] unsigned long 
  2918 ;;  exp1            1   14[BANK0 ] unsigned char 
  2919 ;;  sign1           1    9[BANK0 ] unsigned char 
  2920 ;; Return value:  Size  Location     Type
  2921 ;;                  4    0[BANK0 ] long 
  2922 ;; Registers used:
  2923 ;;		wreg, status,2, status,0
  2924 ;; Tracked objects:
  2925 ;;		On entry : 0/0
  2926 ;;		On exit  : 0/0
  2927 ;;		Unchanged: 0/0
  2928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2929 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2930 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2931 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2932 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2933 ;;Total ram usage:       15 bytes
  2934 ;; Hardware stack levels used:    1
  2935 ;; Hardware stack levels required when called:    5
  2936 ;; This function calls:
  2937 ;;		Nothing
  2938 ;; This function is called by:
  2939 ;;		_set_PWM1_duty
  2940 ;;		_set_PWM2_duty
  2941 ;; This function uses a non-reentrant model
  2942 ;;
  2943                           
  2944                           	psect	text11
  2945  0007E2                     __ptext11:
  2946                           	opt stack 0
  2947  0007E2                     ___fttol:
  2948                           	opt stack 21
  2949                           
  2950                           ;incstack = 0
  2951  0007E2  C082  F084         	movff	___fttol@f1+2,??___fttol
  2952  0007E6  0100               	movlb	0	; () banked
  2953  0007E8  6B85               	clrf	(??___fttol+1)& (0+255),b
  2954  0007EA  6B86               	clrf	(??___fttol+2)& (0+255),b
  2955  0007EC  0100               	movlb	0	; () banked
  2956  0007EE  3581               	rlcf	(___fttol@f1+1)& (0+255),w,b
  2957  0007F0  0100               	movlb	0	; () banked
  2958  0007F2  3784               	rlcf	??___fttol& (0+255),f,b
  2959  0007F4  E301               	bnc	u2471
  2960  0007F6  8185               	bsf	(??___fttol+1)& (0+255),0,b
  2961  0007F8                     u2471:
  2962  0007F8  0100               	movlb	0	; () banked
  2963  0007FA  5184               	movf	??___fttol& (0+255),w,b
  2964  0007FC  0100               	movlb	0	; () banked
  2965  0007FE  6F8E               	movwf	___fttol@exp1& (0+255),b
  2966  000800  0100               	movlb	0	; () banked
  2967  000802  518E               	movf	___fttol@exp1& (0+255),w,b
  2968  000804  A4D8               	btfss	status,2,c
  2969  000806  D00A               	goto	l3713
  2970                           
  2971                           ; BSR set to: 0
  2972  000808  0E00               	movlw	0
  2973  00080A  0100               	movlb	0	; () banked
  2974  00080C  6F80               	movwf	?___fttol& (0+255),b
  2975  00080E  0E00               	movlw	0
  2976  000810  6F81               	movwf	(?___fttol+1)& (0+255),b
  2977  000812  0E00               	movlw	0
  2978  000814  6F82               	movwf	(?___fttol+2)& (0+255),b
  2979  000816  0E00               	movlw	0
  2980  000818  6F83               	movwf	(?___fttol+3)& (0+255),b
  2981                           
  2982                           ; BSR set to: 0
  2983  00081A  0012               	return	
  2984  00081C                     l3713:
  2985                           
  2986                           ; BSR set to: 0
  2987  00081C  0E17               	movlw	23
  2988  00081E  0100               	movlb	0	; () banked
  2989  000820  6F84               	movwf	??___fttol& (0+255),b
  2990  000822  C080  F085         	movff	___fttol@f1,??___fttol+1
  2991  000826  C081  F086         	movff	___fttol@f1+1,??___fttol+2
  2992  00082A  C082  F087         	movff	___fttol@f1+2,??___fttol+3
  2993  00082E  0100               	movlb	0	; () banked
  2994  000830  2984               	incf	??___fttol& (0+255),w,b
  2995  000832  0100               	movlb	0	; () banked
  2996  000834  6F88               	movwf	(??___fttol+4)& (0+255),b
  2997  000836  D005               	goto	u2490
  2998  000838                     u2495:
  2999  000838  0100               	movlb	0	; () banked
  3000  00083A  90D8               	bcf	status,0,c
  3001  00083C  3387               	rrcf	(??___fttol+3)& (0+255),f,b
  3002  00083E  3386               	rrcf	(??___fttol+2)& (0+255),f,b
  3003  000840  3385               	rrcf	(??___fttol+1)& (0+255),f,b
  3004  000842                     u2490:
  3005  000842  0100               	movlb	0	; () banked
  3006  000844  2F88               	decfsz	(??___fttol+4)& (0+255),f,b
  3007  000846  D7F8               	goto	u2495
  3008  000848  0100               	movlb	0	; () banked
  3009  00084A  5185               	movf	(??___fttol+1)& (0+255),w,b
  3010  00084C  0100               	movlb	0	; () banked
  3011  00084E  6F89               	movwf	___fttol@sign1& (0+255),b
  3012                           
  3013                           ; BSR set to: 0
  3014  000850  0100               	movlb	0	; () banked
  3015  000852  8F81               	bsf	(___fttol@f1+1)& (0+255),7,b
  3016                           
  3017                           ; BSR set to: 0
  3018  000854  0EFF               	movlw	255
  3019  000856  0100               	movlb	0	; () banked
  3020  000858  1780               	andwf	___fttol@f1& (0+255),f,b
  3021  00085A  0EFF               	movlw	255
  3022  00085C  0100               	movlb	0	; () banked
  3023  00085E  1781               	andwf	(___fttol@f1+1)& (0+255),f,b
  3024  000860  0E00               	movlw	0
  3025  000862  0100               	movlb	0	; () banked
  3026  000864  1782               	andwf	(___fttol@f1+2)& (0+255),f,b
  3027                           
  3028                           ; BSR set to: 0
  3029  000866  0100               	movlb	0	; () banked
  3030  000868  5180               	movf	___fttol@f1& (0+255),w,b
  3031  00086A  0100               	movlb	0	; () banked
  3032  00086C  6F8A               	movwf	___fttol@lval& (0+255),b
  3033  00086E  0100               	movlb	0	; () banked
  3034  000870  5181               	movf	(___fttol@f1+1)& (0+255),w,b
  3035  000872  0100               	movlb	0	; () banked
  3036  000874  6F8B               	movwf	(___fttol@lval+1)& (0+255),b
  3037  000876  0100               	movlb	0	; () banked
  3038  000878  5182               	movf	(___fttol@f1+2)& (0+255),w,b
  3039  00087A  0100               	movlb	0	; () banked
  3040  00087C  6F8C               	movwf	(___fttol@lval+2)& (0+255),b
  3041  00087E  0100               	movlb	0	; () banked
  3042  000880  6B8D               	clrf	(___fttol@lval+3)& (0+255),b
  3043                           
  3044                           ; BSR set to: 0
  3045  000882  0E8E               	movlw	142
  3046  000884  0100               	movlb	0	; () banked
  3047  000886  5F8E               	subwf	___fttol@exp1& (0+255),f,b
  3048                           
  3049                           ; BSR set to: 0
  3050  000888  0100               	movlb	0	; () banked
  3051  00088A  AF8E               	btfss	___fttol@exp1& (0+255),7,b
  3052  00088C  D01A               	goto	l3735
  3053                           
  3054                           ; BSR set to: 0
  3055  00088E  0100               	movlb	0	; () banked
  3056  000890  518E               	movf	___fttol@exp1& (0+255),w,b
  3057  000892  0A80               	xorlw	128
  3058  000894  0F8F               	addlw	143
  3059  000896  B0D8               	btfsc	status,0,c
  3060  000898  D00A               	goto	l3731
  3061                           
  3062                           ; BSR set to: 0
  3063  00089A  0E00               	movlw	0
  3064  00089C  0100               	movlb	0	; () banked
  3065  00089E  6F80               	movwf	?___fttol& (0+255),b
  3066  0008A0  0E00               	movlw	0
  3067  0008A2  6F81               	movwf	(?___fttol+1)& (0+255),b
  3068  0008A4  0E00               	movlw	0
  3069  0008A6  6F82               	movwf	(?___fttol+2)& (0+255),b
  3070  0008A8  0E00               	movlw	0
  3071  0008AA  6F83               	movwf	(?___fttol+3)& (0+255),b
  3072                           
  3073                           ; BSR set to: 0
  3074  0008AC  0012               	return	
  3075  0008AE                     l3731:
  3076                           
  3077                           ; BSR set to: 0
  3078  0008AE  0100               	movlb	0	; () banked
  3079  0008B0  90D8               	bcf	status,0,c
  3080  0008B2  338D               	rrcf	(___fttol@lval+3)& (0+255),f,b
  3081  0008B4  338C               	rrcf	(___fttol@lval+2)& (0+255),f,b
  3082  0008B6  338B               	rrcf	(___fttol@lval+1)& (0+255),f,b
  3083  0008B8  338A               	rrcf	___fttol@lval& (0+255),f,b
  3084                           
  3085                           ; BSR set to: 0
  3086  0008BA  0100               	movlb	0	; () banked
  3087  0008BC  3F8E               	incfsz	___fttol@exp1& (0+255),f,b
  3088  0008BE  D7F7               	goto	l3731
  3089                           
  3090                           ; BSR set to: 0
  3091  0008C0  D01B               	goto	l3745
  3092  0008C2                     l3735:
  3093                           
  3094                           ; BSR set to: 0
  3095  0008C2  0E17               	movlw	23
  3096  0008C4  0100               	movlb	0	; () banked
  3097  0008C6  658E               	cpfsgt	___fttol@exp1& (0+255),b
  3098  0008C8  D012               	goto	l3743
  3099                           
  3100                           ; BSR set to: 0
  3101  0008CA  0E00               	movlw	0
  3102  0008CC  0100               	movlb	0	; () banked
  3103  0008CE  6F80               	movwf	?___fttol& (0+255),b
  3104  0008D0  0E00               	movlw	0
  3105  0008D2  6F81               	movwf	(?___fttol+1)& (0+255),b
  3106  0008D4  0E00               	movlw	0
  3107  0008D6  6F82               	movwf	(?___fttol+2)& (0+255),b
  3108  0008D8  0E00               	movlw	0
  3109  0008DA  6F83               	movwf	(?___fttol+3)& (0+255),b
  3110                           
  3111                           ; BSR set to: 0
  3112  0008DC  0012               	return	
  3113  0008DE                     l3741:
  3114                           
  3115                           ; BSR set to: 0
  3116  0008DE  0100               	movlb	0	; () banked
  3117  0008E0  90D8               	bcf	status,0,c
  3118  0008E2  378A               	rlcf	___fttol@lval& (0+255),f,b
  3119  0008E4  378B               	rlcf	(___fttol@lval+1)& (0+255),f,b
  3120  0008E6  378C               	rlcf	(___fttol@lval+2)& (0+255),f,b
  3121  0008E8  378D               	rlcf	(___fttol@lval+3)& (0+255),f,b
  3122  0008EA  0100               	movlb	0	; () banked
  3123  0008EC  078E               	decf	___fttol@exp1& (0+255),f,b
  3124  0008EE                     l3743:
  3125                           
  3126                           ; BSR set to: 0
  3127  0008EE  0100               	movlb	0	; () banked
  3128  0008F0  518E               	movf	___fttol@exp1& (0+255),w,b
  3129  0008F2  0100               	movlb	0	; () banked
  3130  0008F4  A4D8               	btfss	status,2,c
  3131  0008F6  D7F3               	goto	l3741
  3132  0008F8                     l3745:
  3133                           
  3134                           ; BSR set to: 0
  3135  0008F8  0100               	movlb	0	; () banked
  3136  0008FA  5189               	movf	___fttol@sign1& (0+255),w,b
  3137  0008FC  0100               	movlb	0	; () banked
  3138  0008FE  B4D8               	btfsc	status,2,c
  3139  000900  D009               	goto	l3749
  3140                           
  3141                           ; BSR set to: 0
  3142  000902  0100               	movlb	0	; () banked
  3143  000904  1F8D               	comf	(___fttol@lval+3)& (0+255),f,b
  3144  000906  1F8C               	comf	(___fttol@lval+2)& (0+255),f,b
  3145  000908  1F8B               	comf	(___fttol@lval+1)& (0+255),f,b
  3146  00090A  6D8A               	negf	___fttol@lval& (0+255),b
  3147  00090C  0E00               	movlw	0
  3148  00090E  238B               	addwfc	(___fttol@lval+1)& (0+255),f,b
  3149  000910  238C               	addwfc	(___fttol@lval+2)& (0+255),f,b
  3150  000912  238D               	addwfc	(___fttol@lval+3)& (0+255),f,b
  3151  000914                     l3749:
  3152                           
  3153                           ; BSR set to: 0
  3154  000914  C08A  F080         	movff	___fttol@lval,?___fttol
  3155  000918  C08B  F081         	movff	___fttol@lval+1,?___fttol+1
  3156  00091C  C08C  F082         	movff	___fttol@lval+2,?___fttol+2
  3157  000920  C08D  F083         	movff	___fttol@lval+3,?___fttol+3
  3158  000924  0012               	return	
  3159  000926                     __end_of___fttol:
  3160                           	opt stack 0
  3161                           tblptru	equ	0xFF8
  3162                           intcon	equ	0xFF2
  3163                           intcon3	equ	0xFF0
  3164                           postinc0	equ	0xFEE
  3165                           wreg	equ	0xFE8
  3166                           plusw1	equ	0xFE3
  3167                           postinc2	equ	0xFDE
  3168                           postdec2	equ	0xFDD
  3169                           plusw2	equ	0xFDB
  3170                           fsr2h	equ	0xFDA
  3171                           fsr2l	equ	0xFD9
  3172                           status	equ	0xFD8
  3173                           
  3174 ;; *************** function _PWM1_Start *****************
  3175 ;; Defined at:
  3176 ;;		line 12 in file "motors.c"
  3177 ;; Parameters:    Size  Location     Type
  3178 ;;		None
  3179 ;; Auto vars:     Size  Location     Type
  3180 ;;		None
  3181 ;; Return value:  Size  Location     Type
  3182 ;;                  1    wreg      void 
  3183 ;; Registers used:
  3184 ;;		None
  3185 ;; Tracked objects:
  3186 ;;		On entry : 0/0
  3187 ;;		On exit  : 0/0
  3188 ;;		Unchanged: 0/0
  3189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3193 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3194 ;;Total ram usage:        0 bytes
  3195 ;; Hardware stack levels used:    1
  3196 ;; Hardware stack levels required when called:    5
  3197 ;; This function calls:
  3198 ;;		Nothing
  3199 ;; This function is called by:
  3200 ;;		_runPWM1
  3201 ;; This function uses a non-reentrant model
  3202 ;;
  3203                           
  3204                           	psect	text12
  3205  0018C8                     __ptext12:
  3206                           	opt stack 0
  3207  0018C8                     _PWM1_Start:
  3208                           	opt stack 22
  3209                           
  3210                           ;motors.c: 15: P1M1 = 0;
  3211                           
  3212                           ; BSR set to: 0
  3213                           ;incstack = 0
  3214  0018C8  9EBD               	bcf	4029,7,c	;volatile
  3215                           
  3216                           ;motors.c: 16: P1M0 = 0;
  3217  0018CA  9CBD               	bcf	4029,6,c	;volatile
  3218                           
  3219                           ;motors.c: 17: CCP1M3 = 1;
  3220  0018CC  86BD               	bsf	4029,3,c	;volatile
  3221                           
  3222                           ;motors.c: 18: CCP1M2 = 1;
  3223  0018CE  84BD               	bsf	4029,2,c	;volatile
  3224                           
  3225                           ;motors.c: 19: CCP1M1 = 0;
  3226  0018D0  92BD               	bcf	4029,1,c	;volatile
  3227                           
  3228                           ;motors.c: 20: CCP1M0 = 0;
  3229  0018D2  90BD               	bcf	4029,0,c	;volatile
  3230                           
  3231                           ;motors.c: 35: TMR2ON = 1;
  3232  0018D4  84CA               	bsf	4042,2,c	;volatile
  3233  0018D6  0012               	return		;funcret
  3234  0018D8                     __end_of_PWM1_Start:
  3235                           	opt stack 0
  3236                           tblptru	equ	0xFF8
  3237                           intcon	equ	0xFF2
  3238                           intcon3	equ	0xFF0
  3239                           postinc0	equ	0xFEE
  3240                           wreg	equ	0xFE8
  3241                           plusw1	equ	0xFE3
  3242                           postinc2	equ	0xFDE
  3243                           postdec2	equ	0xFDD
  3244                           plusw2	equ	0xFDB
  3245                           fsr2h	equ	0xFDA
  3246                           fsr2l	equ	0xFD9
  3247                           status	equ	0xFD8
  3248                           
  3249 ;; *************** function _PWM1_Stop *****************
  3250 ;; Defined at:
  3251 ;;		line 86 in file "motors.c"
  3252 ;; Parameters:    Size  Location     Type
  3253 ;;		None
  3254 ;; Auto vars:     Size  Location     Type
  3255 ;;		None
  3256 ;; Return value:  Size  Location     Type
  3257 ;;                  1    wreg      void 
  3258 ;; Registers used:
  3259 ;;		None
  3260 ;; Tracked objects:
  3261 ;;		On entry : 0/0
  3262 ;;		On exit  : 0/0
  3263 ;;		Unchanged: 0/0
  3264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3268 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3269 ;;Total ram usage:        0 bytes
  3270 ;; Hardware stack levels used:    1
  3271 ;; Hardware stack levels required when called:    5
  3272 ;; This function calls:
  3273 ;;		Nothing
  3274 ;; This function is called by:
  3275 ;;		_moveXMotors
  3276 ;; This function uses a non-reentrant model
  3277 ;;
  3278                           
  3279                           	psect	text13
  3280  001908                     __ptext13:
  3281                           	opt stack 0
  3282  001908                     _PWM1_Stop:
  3283                           	opt stack 23
  3284                           
  3285                           ;motors.c: 88: CCP1M3 = 0;
  3286                           
  3287                           ;incstack = 0
  3288  001908  96BD               	bcf	4029,3,c	;volatile
  3289                           
  3290                           ;motors.c: 89: CCP1M2 = 0;
  3291  00190A  94BD               	bcf	4029,2,c	;volatile
  3292                           
  3293                           ;motors.c: 90: CCP1M1 = 0;
  3294  00190C  92BD               	bcf	4029,1,c	;volatile
  3295                           
  3296                           ;motors.c: 91: CCP1M0 = 0;
  3297  00190E  90BD               	bcf	4029,0,c	;volatile
  3298  001910  0012               	return		;funcret
  3299  001912                     __end_of_PWM1_Stop:
  3300                           	opt stack 0
  3301                           tblptru	equ	0xFF8
  3302                           intcon	equ	0xFF2
  3303                           intcon3	equ	0xFF0
  3304                           postinc0	equ	0xFEE
  3305                           wreg	equ	0xFE8
  3306                           plusw1	equ	0xFE3
  3307                           postinc2	equ	0xFDE
  3308                           postdec2	equ	0xFDD
  3309                           plusw2	equ	0xFDB
  3310                           fsr2h	equ	0xFDA
  3311                           fsr2l	equ	0xFD9
  3312                           status	equ	0xFD8
  3313                           
  3314 ;; *************** function _moveSmallNose *****************
  3315 ;; Defined at:
  3316 ;;		line 191 in file "motors.c"
  3317 ;; Parameters:    Size  Location     Type
  3318 ;;  prev            2   61[COMRAM] PTR int 
  3319 ;;		 -> main@smallNose(2), 
  3320 ;;  next            2   63[COMRAM] int 
  3321 ;; Auto vars:     Size  Location     Type
  3322 ;;		None
  3323 ;; Return value:  Size  Location     Type
  3324 ;;                  1    wreg      void 
  3325 ;; Registers used:
  3326 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3327 ;; Tracked objects:
  3328 ;;		On entry : 0/0
  3329 ;;		On exit  : 0/0
  3330 ;;		Unchanged: 0/0
  3331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3332 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3334 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3335 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3336 ;;Total ram usage:        7 bytes
  3337 ;; Hardware stack levels used:    1
  3338 ;; Hardware stack levels required when called:    8
  3339 ;; This function calls:
  3340 ;;		_lcdInst
  3341 ;;		_printf
  3342 ;; This function is called by:
  3343 ;;		_simulate
  3344 ;;		_main
  3345 ;;		_mainloop
  3346 ;; This function uses a non-reentrant model
  3347 ;;
  3348                           
  3349                           	psect	text14
  3350  001310                     __ptext14:
  3351                           	opt stack 0
  3352  001310                     _moveSmallNose:
  3353                           	opt stack 21
  3354                           
  3355                           ;motors.c: 195: lcdInst(0b10000000);;
  3356                           
  3357                           ;incstack = 0
  3358  001310  0E80               	movlw	128
  3359  001312  EC72  F00C         	call	_lcdInst
  3360                           
  3361                           ;motors.c: 196: printf("smallNose to   ");
  3362  001316  0ECC               	movlw	low STR_26
  3363  001318  6E32               	movwf	printf@f,c
  3364  00131A  0EFE               	movlw	high STR_26
  3365  00131C  6E33               	movwf	printf@f+1,c
  3366  00131E  EC2A  F005         	call	_printf	;wreg free
  3367                           
  3368                           ;motors.c: 197: lcdInst(0b11000000);;
  3369  001322  0EC0               	movlw	192
  3370  001324  EC72  F00C         	call	_lcdInst
  3371                           
  3372                           ;motors.c: 198: if (next) {
  3373  001328  5040               	movf	moveSmallNose@next,w,c
  3374  00132A  1041               	iorwf	moveSmallNose@next+1,w,c
  3375  00132C  B4D8               	btfsc	status,2,c
  3376  00132E  D007               	goto	l3939
  3377                           
  3378                           ;motors.c: 199: printf("AA");
  3379  001330  0EF8               	movlw	low STR_27
  3380  001332  6E32               	movwf	printf@f,c
  3381  001334  0EFF               	movlw	high STR_27
  3382  001336  6E33               	movwf	printf@f+1,c
  3383  001338  EC2A  F005         	call	_printf	;wreg free
  3384                           
  3385                           ;motors.c: 200: } else {
  3386  00133C  D006               	goto	l3941
  3387  00133E                     l3939:
  3388                           
  3389                           ;motors.c: 201: printf("uncharged    ");
  3390  00133E  0E17               	movlw	low STR_22
  3391  001340  6E32               	movwf	printf@f,c
  3392  001342  0EFF               	movlw	high STR_22
  3393  001344  6E33               	movwf	printf@f+1,c
  3394  001346  EC2A  F005         	call	_printf	;wreg free
  3395  00134A                     l3941:
  3396                           
  3397                           ;motors.c: 202: }
  3398                           ;motors.c: 205: if (*prev == next)return;
  3399  00134A  C03E  FFD9         	movff	moveSmallNose@prev,fsr2l
  3400  00134E  C03F  FFDA         	movff	moveSmallNose@prev+1,fsr2h
  3401  001352  5040               	movf	moveSmallNose@next,w,c
  3402  001354  18DE               	xorwf	postinc2,w,c
  3403  001356  E109               	bnz	l3947
  3404  001358  5041               	movf	moveSmallNose@next+1,w,c
  3405  00135A  18DE               	xorwf	postinc2,w,c
  3406  00135C  B4D8               	btfsc	status,2,c
  3407  00135E  0012               	return	
  3408  001360  D004               	goto	l3947
  3409  001362                     l3945:
  3410                           
  3411                           ;motors.c: 208: *prev++;
  3412  001362  0E02               	movlw	2
  3413  001364  263E               	addwf	moveSmallNose@prev,f,c
  3414  001366  0E00               	movlw	0
  3415  001368  223F               	addwfc	moveSmallNose@prev+1,f,c
  3416  00136A                     l3947:
  3417  00136A  C03E  FFD9         	movff	moveSmallNose@prev,fsr2l
  3418  00136E  C03F  FFDA         	movff	moveSmallNose@prev+1,fsr2h
  3419  001372  5040               	movf	moveSmallNose@next,w,c
  3420  001374  5CDE               	subwf	postinc2,w,c
  3421  001376  50DE               	movf	postinc2,w,c
  3422  001378  0A80               	xorlw	128
  3423  00137A  6E44               	movwf	(??_moveSmallNose+2)& (0+255),c
  3424  00137C  5041               	movf	moveSmallNose@next+1,w,c
  3425  00137E  0A80               	xorlw	128
  3426  001380  5844               	subwfb	(??_moveSmallNose+2)& (0+255),w,c
  3427  001382  B0D8               	btfsc	status,0,c
  3428  001384  D005               	goto	l3951
  3429  001386  D7ED               	goto	l3945
  3430  001388                     l3949:
  3431                           
  3432                           ;motors.c: 213: *prev--;
  3433  001388  0E02               	movlw	2
  3434  00138A  5E3E               	subwf	moveSmallNose@prev,f,c
  3435  00138C  0E00               	movlw	0
  3436  00138E  5A3F               	subwfb	moveSmallNose@prev+1,f,c
  3437  001390                     l3951:
  3438  001390  C03E  FFD9         	movff	moveSmallNose@prev,fsr2l
  3439  001394  C03F  FFDA         	movff	moveSmallNose@prev+1,fsr2h
  3440  001398  50DE               	movf	postinc2,w,c
  3441  00139A  5C40               	subwf	moveSmallNose@next,w,c
  3442  00139C  5041               	movf	moveSmallNose@next+1,w,c
  3443  00139E  0A80               	xorlw	128
  3444  0013A0  6E44               	movwf	(??_moveSmallNose+2)& (0+255),c
  3445  0013A2  50DE               	movf	postinc2,w,c
  3446  0013A4  0A80               	xorlw	128
  3447  0013A6  5844               	subwfb	(??_moveSmallNose+2)& (0+255),w,c
  3448  0013A8  B0D8               	btfsc	status,0,c
  3449  0013AA  0012               	return	
  3450  0013AC  D7ED               	goto	l3949
  3451  0013AE                     __end_of_moveSmallNose:
  3452                           	opt stack 0
  3453                           tblptru	equ	0xFF8
  3454                           intcon	equ	0xFF2
  3455                           intcon3	equ	0xFF0
  3456                           postinc0	equ	0xFEE
  3457                           wreg	equ	0xFE8
  3458                           plusw1	equ	0xFE3
  3459                           postinc2	equ	0xFDE
  3460                           postdec2	equ	0xFDD
  3461                           plusw2	equ	0xFDB
  3462                           fsr2h	equ	0xFDA
  3463                           fsr2l	equ	0xFD9
  3464                           status	equ	0xFD8
  3465                           
  3466 ;; *************** function _moveBigNose *****************
  3467 ;; Defined at:
  3468 ;;		line 158 in file "motors.c"
  3469 ;; Parameters:    Size  Location     Type
  3470 ;;  prev            2   61[COMRAM] PTR int 
  3471 ;;		 -> main@bigNose(2), 
  3472 ;;  next            2   63[COMRAM] int 
  3473 ;; Auto vars:     Size  Location     Type
  3474 ;;		None
  3475 ;; Return value:  Size  Location     Type
  3476 ;;                  1    wreg      void 
  3477 ;; Registers used:
  3478 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3479 ;; Tracked objects:
  3480 ;;		On entry : 0/0
  3481 ;;		On exit  : 0/0
  3482 ;;		Unchanged: 0/0
  3483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3484 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3486 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3487 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3488 ;;Total ram usage:        7 bytes
  3489 ;; Hardware stack levels used:    1
  3490 ;; Hardware stack levels required when called:    8
  3491 ;; This function calls:
  3492 ;;		_lcdInst
  3493 ;;		_printf
  3494 ;; This function is called by:
  3495 ;;		_simulate
  3496 ;;		_main
  3497 ;;		_mainloop
  3498 ;; This function uses a non-reentrant model
  3499 ;;
  3500                           
  3501                           	psect	text15
  3502  000F5C                     __ptext15:
  3503                           	opt stack 0
  3504  000F5C                     _moveBigNose:
  3505                           	opt stack 21
  3506                           
  3507                           ;motors.c: 162: lcdInst(0b10000000);;
  3508                           
  3509                           ;incstack = 0
  3510  000F5C  0E80               	movlw	128
  3511  000F5E  EC72  F00C         	call	_lcdInst
  3512                           
  3513                           ;motors.c: 163: printf("bigNose to    ");
  3514  000F62  0EEB               	movlw	low STR_21
  3515  000F64  6E32               	movwf	printf@f,c
  3516  000F66  0EFE               	movlw	high STR_21
  3517  000F68  6E33               	movwf	printf@f+1,c
  3518  000F6A  EC2A  F005         	call	_printf	;wreg free
  3519                           
  3520                           ;motors.c: 164: lcdInst(0b11000000);;
  3521  000F6E  0EC0               	movlw	192
  3522  000F70  EC72  F00C         	call	_lcdInst
  3523                           
  3524                           ;motors.c: 165: switch(next){
  3525  000F74  D01C               	goto	l3967
  3526  000F76                     l3959:
  3527                           
  3528                           ;motors.c: 167: printf("uncharged    ");
  3529  000F76  0E17               	movlw	low STR_22
  3530  000F78  6E32               	movwf	printf@f,c
  3531  000F7A  0EFF               	movlw	high STR_22
  3532  000F7C  6E33               	movwf	printf@f+1,c
  3533  000F7E  EC2A  F005         	call	_printf	;wreg free
  3534                           
  3535                           ;motors.c: 168: break;
  3536  000F82  D028               	goto	l3969
  3537  000F84                     l3961:
  3538                           
  3539                           ;motors.c: 170: printf("C    ");
  3540  000F84  0E96               	movlw	low (STR_42+10)
  3541  000F86  6E32               	movwf	printf@f,c
  3542  000F88  0EFE               	movlw	high (STR_42+10)
  3543  000F8A  6E33               	movwf	printf@f+1,c
  3544  000F8C  EC2A  F005         	call	_printf	;wreg free
  3545                           
  3546                           ;motors.c: 171: break;
  3547  000F90  D021               	goto	l3969
  3548  000F92                     l3963:
  3549                           
  3550                           ;motors.c: 173: printf("9V    ");
  3551  000F92  0EEB               	movlw	low STR_24
  3552  000F94  6E32               	movwf	printf@f,c
  3553  000F96  0EFF               	movlw	high STR_24
  3554  000F98  6E33               	movwf	printf@f+1,c
  3555  000F9A  EC2A  F005         	call	_printf	;wreg free
  3556                           
  3557                           ;motors.c: 174: break;
  3558  000F9E  D01A               	goto	l3969
  3559  000FA0                     l3965:
  3560                           
  3561                           ;motors.c: 176: printf("uncharged    ");
  3562  000FA0  0E17               	movlw	low STR_22
  3563  000FA2  6E32               	movwf	printf@f,c
  3564  000FA4  0EFF               	movlw	high STR_22
  3565  000FA6  6E33               	movwf	printf@f+1,c
  3566  000FA8  EC2A  F005         	call	_printf	;wreg free
  3567                           
  3568                           ;motors.c: 177: }
  3569  000FAC  D013               	goto	l3969
  3570  000FAE                     l3967:
  3571  000FAE  C040  F042         	movff	moveBigNose@next,??_moveBigNose
  3572  000FB2  C041  F043         	movff	moveBigNose@next+1,??_moveBigNose+1
  3573                           
  3574                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3575                           ; Switch size 1, requested type "space"
  3576                           ; Number of cases is 1, Range of values is 0 to 0
  3577                           ; switch strategies available:
  3578                           ; Name         Instructions Cycles
  3579                           ; simple_byte            4     3 (average)
  3580                           ;	Chosen strategy is simple_byte
  3581  000FB6  5043               	movf	??_moveBigNose+1,w,c
  3582  000FB8  0A00               	xorlw	0	; case 0
  3583  000FBA  A4D8               	btfss	status,2,c
  3584  000FBC  D7F1               	goto	l3965
  3585                           
  3586                           ; Switch size 1, requested type "space"
  3587                           ; Number of cases is 3, Range of values is 0 to 2
  3588                           ; switch strategies available:
  3589                           ; Name         Instructions Cycles
  3590                           ; simple_byte           10     6 (average)
  3591                           ;	Chosen strategy is simple_byte
  3592  000FBE  5042               	movf	??_moveBigNose,w,c
  3593  000FC0  0A00               	xorlw	0	; case 0
  3594  000FC2  B4D8               	btfsc	status,2,c
  3595  000FC4  D7D8               	goto	l3959
  3596  000FC6  0A01               	xorlw	1	; case 1
  3597  000FC8  B4D8               	btfsc	status,2,c
  3598  000FCA  D7DC               	goto	l3961
  3599  000FCC  0A03               	xorlw	3	; case 2
  3600  000FCE  B4D8               	btfsc	status,2,c
  3601  000FD0  D7E0               	goto	l3963
  3602  000FD2  D7E6               	goto	l3965
  3603  000FD4                     l3969:
  3604                           
  3605                           ;motors.c: 179: if (*prev == next)return;
  3606  000FD4  C03E  FFD9         	movff	moveBigNose@prev,fsr2l
  3607  000FD8  C03F  FFDA         	movff	moveBigNose@prev+1,fsr2h
  3608  000FDC  5040               	movf	moveBigNose@next,w,c
  3609  000FDE  18DE               	xorwf	postinc2,w,c
  3610  000FE0  E109               	bnz	l3975
  3611  000FE2  5041               	movf	moveBigNose@next+1,w,c
  3612  000FE4  18DE               	xorwf	postinc2,w,c
  3613  000FE6  B4D8               	btfsc	status,2,c
  3614  000FE8  0012               	return	
  3615  000FEA  D004               	goto	l3975
  3616  000FEC                     l3973:
  3617                           
  3618                           ;motors.c: 182: *prev++;
  3619  000FEC  0E02               	movlw	2
  3620  000FEE  263E               	addwf	moveBigNose@prev,f,c
  3621  000FF0  0E00               	movlw	0
  3622  000FF2  223F               	addwfc	moveBigNose@prev+1,f,c
  3623  000FF4                     l3975:
  3624  000FF4  C03E  FFD9         	movff	moveBigNose@prev,fsr2l
  3625  000FF8  C03F  FFDA         	movff	moveBigNose@prev+1,fsr2h
  3626  000FFC  5040               	movf	moveBigNose@next,w,c
  3627  000FFE  5CDE               	subwf	postinc2,w,c
  3628  001000  50DE               	movf	postinc2,w,c
  3629  001002  0A80               	xorlw	128
  3630  001004  6E44               	movwf	(??_moveBigNose+2)& (0+255),c
  3631  001006  5041               	movf	moveBigNose@next+1,w,c
  3632  001008  0A80               	xorlw	128
  3633  00100A  5844               	subwfb	(??_moveBigNose+2)& (0+255),w,c
  3634  00100C  B0D8               	btfsc	status,0,c
  3635  00100E  D005               	goto	l3979
  3636  001010  D7ED               	goto	l3973
  3637  001012                     l3977:
  3638                           
  3639                           ;motors.c: 187: *prev--;
  3640  001012  0E02               	movlw	2
  3641  001014  5E3E               	subwf	moveBigNose@prev,f,c
  3642  001016  0E00               	movlw	0
  3643  001018  5A3F               	subwfb	moveBigNose@prev+1,f,c
  3644  00101A                     l3979:
  3645  00101A  C03E  FFD9         	movff	moveBigNose@prev,fsr2l
  3646  00101E  C03F  FFDA         	movff	moveBigNose@prev+1,fsr2h
  3647  001022  50DE               	movf	postinc2,w,c
  3648  001024  5C40               	subwf	moveBigNose@next,w,c
  3649  001026  5041               	movf	moveBigNose@next+1,w,c
  3650  001028  0A80               	xorlw	128
  3651  00102A  6E44               	movwf	(??_moveBigNose+2)& (0+255),c
  3652  00102C  50DE               	movf	postinc2,w,c
  3653  00102E  0A80               	xorlw	128
  3654  001030  5844               	subwfb	(??_moveBigNose+2)& (0+255),w,c
  3655  001032  B0D8               	btfsc	status,0,c
  3656  001034  0012               	return	
  3657  001036  D7ED               	goto	l3977
  3658  001038                     __end_of_moveBigNose:
  3659                           	opt stack 0
  3660                           tblptru	equ	0xFF8
  3661                           intcon	equ	0xFF2
  3662                           intcon3	equ	0xFF0
  3663                           postinc0	equ	0xFEE
  3664                           wreg	equ	0xFE8
  3665                           plusw1	equ	0xFE3
  3666                           postinc2	equ	0xFDE
  3667                           postdec2	equ	0xFDD
  3668                           plusw2	equ	0xFDB
  3669                           fsr2h	equ	0xFDA
  3670                           fsr2l	equ	0xFD9
  3671                           status	equ	0xFD8
  3672                           
  3673 ;; *************** function _getTime *****************
  3674 ;; Defined at:
  3675 ;;		line 81 in file "modules.c"
  3676 ;; Parameters:    Size  Location     Type
  3677 ;;		None
  3678 ;; Auto vars:     Size  Location     Type
  3679 ;;  time            2   39[COMRAM] int 
  3680 ;; Return value:  Size  Location     Type
  3681 ;;                  2   37[COMRAM] int 
  3682 ;; Registers used:
  3683 ;;		wreg, status,2
  3684 ;; Tracked objects:
  3685 ;;		On entry : 0/0
  3686 ;;		On exit  : 0/0
  3687 ;;		Unchanged: 0/0
  3688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3689 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3690 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3692 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3693 ;;Total ram usage:        4 bytes
  3694 ;; Hardware stack levels used:    1
  3695 ;; Hardware stack levels required when called:    5
  3696 ;; This function calls:
  3697 ;;		Nothing
  3698 ;; This function is called by:
  3699 ;;		_simulate
  3700 ;;		_mainloop
  3701 ;; This function uses a non-reentrant model
  3702 ;;
  3703                           
  3704                           	psect	text16
  3705  0018B6                     __ptext16:
  3706                           	opt stack 0
  3707  0018B6                     _getTime:
  3708                           	opt stack 24
  3709                           
  3710                           ;modules.c: 83: int time = 0;
  3711                           
  3712                           ;incstack = 0
  3713  0018B6  0E00               	movlw	0
  3714  0018B8  6E29               	movwf	getTime@time+1,c
  3715  0018BA  0E00               	movlw	0
  3716  0018BC  6E28               	movwf	getTime@time,c
  3717                           
  3718                           ;modules.c: 85: return time;
  3719  0018BE  C028  F026         	movff	getTime@time,?_getTime
  3720  0018C2  C029  F027         	movff	getTime@time+1,?_getTime+1
  3721  0018C6  0012               	return	
  3722  0018C8                     __end_of_getTime:
  3723                           	opt stack 0
  3724                           tblptru	equ	0xFF8
  3725                           intcon	equ	0xFF2
  3726                           intcon3	equ	0xFF0
  3727                           postinc0	equ	0xFEE
  3728                           wreg	equ	0xFE8
  3729                           plusw1	equ	0xFE3
  3730                           postinc2	equ	0xFDE
  3731                           postdec2	equ	0xFDD
  3732                           plusw2	equ	0xFDB
  3733                           fsr2h	equ	0xFDA
  3734                           fsr2l	equ	0xFD9
  3735                           status	equ	0xFD8
  3736                           
  3737 ;; *************** function _checkC9V *****************
  3738 ;; Defined at:
  3739 ;;		line 58 in file "sensors.c"
  3740 ;; Parameters:    Size  Location     Type
  3741 ;;  sorted          2   13[BANK0 ] PTR int 
  3742 ;;		 -> simulate@sorted(8), mainloop@sorted(8), 
  3743 ;; Auto vars:     Size  Location     Type
  3744 ;;  i               2   19[BANK0 ] int 
  3745 ;; Return value:  Size  Location     Type
  3746 ;;                  2   13[BANK0 ] int 
  3747 ;; Registers used:
  3748 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3749 ;; Tracked objects:
  3750 ;;		On entry : 0/0
  3751 ;;		On exit  : 0/0
  3752 ;;		Unchanged: 0/0
  3753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3754 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3755 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3756 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3757 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3758 ;;Total ram usage:        8 bytes
  3759 ;; Hardware stack levels used:    1
  3760 ;; Hardware stack levels required when called:    9
  3761 ;; This function calls:
  3762 ;;		_AD
  3763 ;;		_checkV
  3764 ;;		_lcdInst
  3765 ;;		_printf
  3766 ;; This function is called by:
  3767 ;;		_simulate
  3768 ;;		_mainloop
  3769 ;; This function uses a non-reentrant model
  3770 ;;
  3771                           
  3772                           	psect	text17
  3773  000012                     __ptext17:
  3774                           	opt stack 0
  3775  000012                     _checkC9V:
  3776                           	opt stack 20
  3777                           
  3778                           ;sensors.c: 61: LATE = 0b1000;
  3779                           
  3780                           ;incstack = 0
  3781  000012  0E08               	movlw	8
  3782  000014  6E8D               	movwf	3981,c	;volatile
  3783                           
  3784                           ;sensors.c: 62: lcdInst(0b10000000);;
  3785  000016  0E80               	movlw	128
  3786  000018  EC72  F00C         	call	_lcdInst
  3787                           
  3788                           ;sensors.c: 63: printf("V3");
  3789  00001C  0EF2               	movlw	low STR_35
  3790  00001E  6E32               	movwf	printf@f,c
  3791  000020  0EFF               	movlw	high STR_35
  3792  000022  6E33               	movwf	printf@f+1,c
  3793  000024  EC2A  F005         	call	_printf	;wreg free
  3794                           
  3795                           ;sensors.c: 64: switch (checkV(AD(3), 1.5)) {
  3796  000028  D139               	goto	l4145
  3797  00002A                     l4055:
  3798                           
  3799                           ;sensors.c: 66: lcdInst(0b10000000);;
  3800  00002A  0E80               	movlw	128
  3801  00002C  EC72  F00C         	call	_lcdInst
  3802                           
  3803                           ;sensors.c: 67: printf("9:");
  3804  000030  0EF5               	movlw	low STR_36
  3805  000032  6E32               	movwf	printf@f,c
  3806  000034  0EFF               	movlw	high STR_36
  3807  000036  6E33               	movwf	printf@f+1,c
  3808  000038  EC2A  F005         	call	_printf	;wreg free
  3809                           
  3810                           ;sensors.c: 68: _delay((unsigned long)((1000)*(8000000/4000.0)));
  3811  00003C  0E0B               	movlw	11
  3812  00003E  0100               	movlb	0	; () banked
  3813  000040  6F90               	movwf	(??_checkC9V+1)& (0+255),b
  3814  000042  0E26               	movlw	38
  3815  000044  0100               	movlb	0	; () banked
  3816  000046  6F8F               	movwf	??_checkC9V& (0+255),b
  3817  000048  0E5D               	movlw	93
  3818  00004A                     u3187:
  3819  00004A  2EE8               	decfsz	wreg,f,c
  3820  00004C  D7FE               	bra	u3187
  3821  00004E  2F8F               	decfsz	??_checkC9V& (0+255),f,b
  3822  000050  D7FC               	bra	u3187
  3823  000052  2F90               	decfsz	(??_checkC9V+1)& (0+255),f,b
  3824  000054  D7FA               	bra	u3187
  3825  000056  D000               	nop2	
  3826                           
  3827                           ;sensors.c: 70: int i = 1;
  3828  000058  0E00               	movlw	0
  3829  00005A  0100               	movlb	0	; () banked
  3830  00005C  6F94               	movwf	(checkC9V@i+1)& (0+255),b
  3831  00005E  0E01               	movlw	1
  3832  000060  6F93               	movwf	checkC9V@i& (0+255),b
  3833                           
  3834                           ; BSR set to: 0
  3835  000062  0100               	movlb	0	; () banked
  3836  000064  BF94               	btfsc	(checkC9V@i+1)& (0+255),7,b
  3837  000066  D00A               	goto	l4067
  3838  000068  0100               	movlb	0	; () banked
  3839  00006A  5194               	movf	(checkC9V@i+1)& (0+255),w,b
  3840  00006C  E106               	bnz	u2860
  3841  00006E  0E03               	movlw	3
  3842  000070  0100               	movlb	0	; () banked
  3843  000072  5D93               	subwf	checkC9V@i& (0+255),w,b
  3844  000074  B0D8               	btfsc	status,0,c
  3845  000076  D0BC               	goto	l362
  3846  000078  D001               	goto	l4067
  3847  00007A                     u2860:
  3848                           
  3849                           ; BSR set to: 0
  3850  00007A  D0BA               	goto	l362
  3851  00007C                     l4067:
  3852                           
  3853                           ; BSR set to: 0
  3854                           ;sensors.c: 73: lcdInst(0b11000000);;
  3855  00007C  0EC0               	movlw	192
  3856  00007E  EC72  F00C         	call	_lcdInst
  3857                           
  3858                           ;sensors.c: 74: printf("channel %d   ", i);
  3859  000082  0E09               	movlw	low STR_37
  3860  000084  6E32               	movwf	printf@f,c
  3861  000086  0EFF               	movlw	high STR_37
  3862  000088  6E33               	movwf	printf@f+1,c
  3863  00008A  C093  F034         	movff	checkC9V@i,?_printf+2
  3864  00008E  C094  F035         	movff	checkC9V@i+1,?_printf+3
  3865  000092  EC2A  F005         	call	_printf	;wreg free
  3866                           
  3867                           ;sensors.c: 75: lcdInst(0b10000000);;
  3868  000096  0E80               	movlw	128
  3869  000098  EC72  F00C         	call	_lcdInst
  3870                           
  3871                           ;sensors.c: 76: _delay((unsigned long)((900)*(8000000/4000.0)));
  3872  00009C  0E0A               	movlw	10
  3873  00009E  0100               	movlb	0	; () banked
  3874  0000A0  6F90               	movwf	(??_checkC9V+1)& (0+255),b
  3875  0000A2  0E22               	movlw	34
  3876  0000A4  0100               	movlb	0	; () banked
  3877  0000A6  6F8F               	movwf	??_checkC9V& (0+255),b
  3878  0000A8  0EA1               	movlw	161
  3879  0000AA                     u3197:
  3880  0000AA  2EE8               	decfsz	wreg,f,c
  3881  0000AC  D7FE               	bra	u3197
  3882  0000AE  2F8F               	decfsz	??_checkC9V& (0+255),f,b
  3883  0000B0  D7FC               	bra	u3197
  3884  0000B2  2F90               	decfsz	(??_checkC9V+1)& (0+255),f,b
  3885  0000B4  D7FA               	bra	u3197
  3886                           
  3887                           ;sensors.c: 77: LATE = i == 1 ? 0 : 0b0110;
  3888  0000B6  0100               	movlb	0	; () banked
  3889  0000B8  0593               	decf	checkC9V@i& (0+255),w,b
  3890  0000BA  0100               	movlb	0	; () banked
  3891  0000BC  1194               	iorwf	(checkC9V@i+1)& (0+255),w,b
  3892  0000BE  B4D8               	btfsc	status,2,c
  3893  0000C0  D005               	goto	l4079
  3894                           
  3895                           ; BSR set to: 0
  3896  0000C2  0E00               	movlw	0
  3897  0000C4  0100               	movlb	0	; () banked
  3898  0000C6  6F92               	movwf	(_checkC9V$645+1)& (0+255),b
  3899  0000C8  0E06               	movlw	6
  3900  0000CA  D004               	goto	L1
  3901  0000CC                     l4079:
  3902                           
  3903                           ; BSR set to: 0
  3904  0000CC  0E00               	movlw	0
  3905  0000CE  0100               	movlb	0	; () banked
  3906  0000D0  6F92               	movwf	(_checkC9V$645+1)& (0+255),b
  3907  0000D2  0E00               	movlw	0
  3908  0000D4                     L1:
  3909  0000D4  6F91               	movwf	_checkC9V$645& (0+255),b
  3910                           
  3911                           ; BSR set to: 0
  3912                           
  3913                           ; BSR set to: 0
  3914  0000D6  C091  FF8D         	movff	_checkC9V$645,3981	;volatile
  3915                           
  3916                           ;sensors.c: 78: switch (checkV(AD(i), 3.6)) {
  3917  0000DA  D058               	goto	l4113
  3918  0000DC                     l4083:
  3919                           
  3920                           ; BSR set to: 0
  3921                           ;sensors.c: 80: lcdInst(0b10000000);;
  3922  0000DC  0E80               	movlw	128
  3923  0000DE  EC72  F00C         	call	_lcdInst
  3924                           
  3925                           ;sensors.c: 81: printf("charged 9V  ");
  3926  0000E2  0E4F               	movlw	low STR_38
  3927  0000E4  6E32               	movwf	printf@f,c
  3928  0000E6  0EFF               	movlw	high STR_38
  3929  0000E8  6E33               	movwf	printf@f+1,c
  3930  0000EA  EC2A  F005         	call	_printf	;wreg free
  3931                           
  3932                           ;sensors.c: 82: _delay((unsigned long)((1000)*(8000000/4000.0)));
  3933  0000EE  0E0B               	movlw	11
  3934  0000F0  0100               	movlb	0	; () banked
  3935  0000F2  6F90               	movwf	(??_checkC9V+1)& (0+255),b
  3936  0000F4  0E26               	movlw	38
  3937  0000F6  0100               	movlb	0	; () banked
  3938  0000F8  6F8F               	movwf	??_checkC9V& (0+255),b
  3939  0000FA  0E5D               	movlw	93
  3940  0000FC                     u3207:
  3941  0000FC  2EE8               	decfsz	wreg,f,c
  3942  0000FE  D7FE               	bra	u3207
  3943  000100  2F8F               	decfsz	??_checkC9V& (0+255),f,b
  3944  000102  D7FC               	bra	u3207
  3945  000104  2F90               	decfsz	(??_checkC9V+1)& (0+255),f,b
  3946  000106  D7FA               	bra	u3207
  3947  000108  D000               	nop2	
  3948                           
  3949                           ;sensors.c: 83: sorted[2]++;
  3950  00010A  0100               	movlb	0	; () banked
  3951  00010C  EE20 F004          	lfsr	2,4
  3952  000110  518D               	movf	checkC9V@sorted& (0+255),w,b
  3953  000112  26D9               	addwf	fsr2l,f,c
  3954  000114  518E               	movf	(checkC9V@sorted+1)& (0+255),w,b
  3955  000116  22DA               	addwfc	fsr2h,f,c
  3956  000118  2ADE               	incf	postinc2,f,c
  3957  00011A  0E00               	movlw	0
  3958  00011C  22DD               	addwfc	postdec2,f,c
  3959                           
  3960                           ; BSR set to: 0
  3961                           ;sensors.c: 84: return 2;
  3962  00011E  0E00               	movlw	0
  3963  000120  0100               	movlb	0	; () banked
  3964  000122  6F8E               	movwf	(?_checkC9V+1)& (0+255),b
  3965  000124  0E02               	movlw	2
  3966  000126  6F8D               	movwf	?_checkC9V& (0+255),b
  3967                           
  3968                           ; BSR set to: 0
  3969  000128  0012               	return	
  3970  00012A                     l4095:
  3971                           
  3972                           ; BSR set to: 0
  3973                           ;sensors.c: 86: lcdInst(0b11000000);;
  3974  00012A  0EC0               	movlw	192
  3975  00012C  EC72  F00C         	call	_lcdInst
  3976                           
  3977                           ;sensors.c: 87: printf("uncharged 9V   ");
  3978  000130  0EAC               	movlw	low STR_39
  3979  000132  6E32               	movwf	printf@f,c
  3980  000134  0EFE               	movlw	high STR_39
  3981  000136  6E33               	movwf	printf@f+1,c
  3982  000138  EC2A  F005         	call	_printf	;wreg free
  3983                           
  3984                           ;sensors.c: 88: _delay((unsigned long)((1000)*(8000000/4000.0)));
  3985  00013C  0E0B               	movlw	11
  3986  00013E  0100               	movlb	0	; () banked
  3987  000140  6F90               	movwf	(??_checkC9V+1)& (0+255),b
  3988  000142  0E26               	movlw	38
  3989  000144  0100               	movlb	0	; () banked
  3990  000146  6F8F               	movwf	??_checkC9V& (0+255),b
  3991  000148  0E5D               	movlw	93
  3992  00014A                     u3217:
  3993  00014A  2EE8               	decfsz	wreg,f,c
  3994  00014C  D7FE               	bra	u3217
  3995  00014E  2F8F               	decfsz	??_checkC9V& (0+255),f,b
  3996  000150  D7FC               	bra	u3217
  3997  000152  2F90               	decfsz	(??_checkC9V+1)& (0+255),f,b
  3998  000154  D7FA               	bra	u3217
  3999  000156  D000               	nop2	
  4000                           
  4001                           ;sensors.c: 89: sorted[3]++;
  4002  000158  0100               	movlb	0	; () banked
  4003  00015A  EE20 F006          	lfsr	2,6
  4004  00015E  518D               	movf	checkC9V@sorted& (0+255),w,b
  4005  000160  26D9               	addwf	fsr2l,f,c
  4006  000162  518E               	movf	(checkC9V@sorted+1)& (0+255),w,b
  4007  000164  22DA               	addwfc	fsr2h,f,c
  4008  000166  2ADE               	incf	postinc2,f,c
  4009  000168  0E00               	movlw	0
  4010  00016A  22DD               	addwfc	postdec2,f,c
  4011                           
  4012                           ; BSR set to: 0
  4013                           ;sensors.c: 90: return 0;
  4014  00016C  0E00               	movlw	0
  4015  00016E  0100               	movlb	0	; () banked
  4016  000170  6F8E               	movwf	(?_checkC9V+1)& (0+255),b
  4017  000172  0E00               	movlw	0
  4018  000174  6F8D               	movwf	?_checkC9V& (0+255),b
  4019                           
  4020                           ; BSR set to: 0
  4021  000176  0012               	return	
  4022  000178                     l4107:
  4023                           
  4024                           ; BSR set to: 0
  4025                           ;sensors.c: 92: lcdInst(0b10000000);;
  4026  000178  0E80               	movlw	128
  4027  00017A  EC72  F00C         	call	_lcdInst
  4028                           
  4029                           ;sensors.c: 93: printf("no 9    ");
  4030  00017E  0EE2               	movlw	low STR_40
  4031  000180  6E32               	movwf	printf@f,c
  4032  000182  0EFF               	movlw	high STR_40
  4033  000184  6E33               	movwf	printf@f+1,c
  4034  000186  EC2A  F005         	call	_printf	;wreg free
  4035                           
  4036                           ;sensors.c: 95: }
  4037                           
  4038                           ;sensors.c: 94: continue;
  4039  00018A  D028               	goto	l4115
  4040  00018C                     l4113:
  4041  00018C  0100               	movlb	0	; () banked
  4042  00018E  5193               	movf	checkC9V@i& (0+255),w,b
  4043  000190  ECBE  F00B         	call	_AD
  4044  000194  C026  F086         	movff	?_AD,checkV@voltage
  4045  000198  C027  F087         	movff	?_AD+1,checkV@voltage+1
  4046  00019C  0E66               	movlw	102
  4047  00019E  0100               	movlb	0	; () banked
  4048  0001A0  6F88               	movwf	checkV@max& (0+255),b
  4049  0001A2  0E66               	movlw	102
  4050  0001A4  0100               	movlb	0	; () banked
  4051  0001A6  6F89               	movwf	(checkV@max+1)& (0+255),b
  4052  0001A8  0E40               	movlw	64
  4053  0001AA  0100               	movlb	0	; () banked
  4054  0001AC  6F8A               	movwf	(checkV@max+2)& (0+255),b
  4055  0001AE  EC3F  F007         	call	_checkV	;wreg free
  4056                           
  4057                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  4058                           ; Switch size 1, requested type "space"
  4059                           ; Number of cases is 2, Range of values is 0 to 255
  4060                           ; switch strategies available:
  4061                           ; Name         Instructions Cycles
  4062                           ; simple_byte            7     4 (average)
  4063                           ;	Chosen strategy is simple_byte
  4064  0001B2  0100               	movlb	0	; () banked
  4065  0001B4  5187               	movf	(?_checkV+1)& (0+255),w,b
  4066  0001B6  0A00               	xorlw	0	; case 0
  4067  0001B8  B4D8               	btfsc	status,2,c
  4068  0001BA  D004               	goto	l4579
  4069  0001BC  0AFF               	xorlw	255	; case 255
  4070  0001BE  B4D8               	btfsc	status,2,c
  4071  0001C0  D007               	goto	l4581
  4072  0001C2  D7DA               	goto	l4107
  4073  0001C4                     l4579:
  4074                           
  4075                           ; BSR set to: 0
  4076                           ; Switch size 1, requested type "space"
  4077                           ; Number of cases is 1, Range of values is 1 to 1
  4078                           ; switch strategies available:
  4079                           ; Name         Instructions Cycles
  4080                           ; simple_byte            4     3 (average)
  4081                           ;	Chosen strategy is simple_byte
  4082  0001C4  0100               	movlb	0	; () banked
  4083  0001C6  5186               	movf	?_checkV& (0+255),w,b
  4084  0001C8  0A01               	xorlw	1	; case 1
  4085  0001CA  B4D8               	btfsc	status,2,c
  4086  0001CC  D787               	goto	l4083
  4087  0001CE  D7D4               	goto	l4107
  4088  0001D0                     l4581:
  4089                           
  4090                           ; BSR set to: 0
  4091                           ; Switch size 1, requested type "space"
  4092                           ; Number of cases is 1, Range of values is 255 to 255
  4093                           ; switch strategies available:
  4094                           ; Name         Instructions Cycles
  4095                           ; simple_byte            4     3 (average)
  4096                           ;	Chosen strategy is simple_byte
  4097  0001D0  0100               	movlb	0	; () banked
  4098  0001D2  5186               	movf	?_checkV& (0+255),w,b
  4099  0001D4  0AFF               	xorlw	255	; case 255
  4100  0001D6  B4D8               	btfsc	status,2,c
  4101  0001D8  D7A8               	goto	l4095
  4102  0001DA  D7CE               	goto	l4107
  4103  0001DC                     l4115:
  4104  0001DC  0100               	movlb	0	; () banked
  4105  0001DE  4B93               	infsnz	checkC9V@i& (0+255),f,b
  4106  0001E0  2B94               	incf	(checkC9V@i+1)& (0+255),f,b
  4107                           
  4108                           ; BSR set to: 0
  4109  0001E2  0100               	movlb	0	; () banked
  4110  0001E4  BF94               	btfsc	(checkC9V@i+1)& (0+255),7,b
  4111  0001E6  D74A               	goto	l4067
  4112  0001E8  0100               	movlb	0	; () banked
  4113  0001EA  5194               	movf	(checkC9V@i+1)& (0+255),w,b
  4114  0001EC  E101               	bnz	u2880
  4115  0001EE  D73F               	goto	L2
  4116  0001F0                     u2880:
  4117  0001F0                     l362:
  4118                           
  4119                           ; BSR set to: 0
  4120                           ;sensors.c: 96: }
  4121                           ;sensors.c: 97: return -1;
  4122  0001F0  0100               	movlb	0	; () banked
  4123  0001F2  698D               	setf	?_checkC9V& (0+255),b
  4124  0001F4  698E               	setf	(?_checkC9V+1)& (0+255),b
  4125  0001F6  0012               	return	
  4126  0001F8                     l4119:
  4127                           
  4128                           ; BSR set to: 0
  4129                           ;sensors.c: 100: lcdInst(0b10000000);;
  4130  0001F8  0E80               	movlw	128
  4131  0001FA  EC72  F00C         	call	_lcdInst
  4132                           
  4133                           ;sensors.c: 101: printf("charged C    ");
  4134  0001FE  0E8E               	movlw	low (STR_42+2)
  4135  000200  6E32               	movwf	printf@f,c
  4136  000202  0EFE               	movlw	high (STR_42+2)
  4137  000204  6E33               	movwf	printf@f+1,c
  4138  000206  EC2A  F005         	call	_printf	;wreg free
  4139                           
  4140                           ;sensors.c: 102: _delay((unsigned long)((1000)*(8000000/4000.0)));
  4141  00020A  0E0B               	movlw	11
  4142  00020C  0100               	movlb	0	; () banked
  4143  00020E  6F90               	movwf	(??_checkC9V+1)& (0+255),b
  4144  000210  0E26               	movlw	38
  4145  000212  0100               	movlb	0	; () banked
  4146  000214  6F8F               	movwf	??_checkC9V& (0+255),b
  4147  000216  0E5D               	movlw	93
  4148  000218                     u3227:
  4149  000218  2EE8               	decfsz	wreg,f,c
  4150  00021A  D7FE               	bra	u3227
  4151  00021C  2F8F               	decfsz	??_checkC9V& (0+255),f,b
  4152  00021E  D7FC               	bra	u3227
  4153  000220  2F90               	decfsz	(??_checkC9V+1)& (0+255),f,b
  4154  000222  D7FA               	bra	u3227
  4155  000224  D000               	nop2	
  4156                           
  4157                           ;sensors.c: 103: sorted[1]++;
  4158  000226  0100               	movlb	0	; () banked
  4159  000228  EE20 F002          	lfsr	2,2
  4160  00022C  518D               	movf	checkC9V@sorted& (0+255),w,b
  4161  00022E  26D9               	addwf	fsr2l,f,c
  4162  000230  518E               	movf	(checkC9V@sorted+1)& (0+255),w,b
  4163  000232  22DA               	addwfc	fsr2h,f,c
  4164  000234  2ADE               	incf	postinc2,f,c
  4165  000236  0E00               	movlw	0
  4166  000238  22DD               	addwfc	postdec2,f,c
  4167                           
  4168                           ; BSR set to: 0
  4169                           ;sensors.c: 104: return 1;
  4170  00023A  0E00               	movlw	0
  4171  00023C  0100               	movlb	0	; () banked
  4172  00023E  6F8E               	movwf	(?_checkC9V+1)& (0+255),b
  4173  000240  0E01               	movlw	1
  4174  000242  6F8D               	movwf	?_checkC9V& (0+255),b
  4175                           
  4176                           ; BSR set to: 0
  4177  000244  0012               	return	
  4178  000246                     l4131:
  4179                           
  4180                           ; BSR set to: 0
  4181                           ;sensors.c: 106: lcdInst(0b11000000);;
  4182  000246  0EC0               	movlw	192
  4183  000248  EC72  F00C         	call	_lcdInst
  4184                           
  4185                           ;sensors.c: 107: printf("uncharged C    ");
  4186  00024C  0E8C               	movlw	low STR_42
  4187  00024E  6E32               	movwf	printf@f,c
  4188  000250  0EFE               	movlw	high STR_42
  4189  000252  6E33               	movwf	printf@f+1,c
  4190  000254  EC2A  F005         	call	_printf	;wreg free
  4191                           
  4192                           ;sensors.c: 108: _delay((unsigned long)((1000)*(8000000/4000.0)));
  4193  000258  0E0B               	movlw	11
  4194  00025A  0100               	movlb	0	; () banked
  4195  00025C  6F90               	movwf	(??_checkC9V+1)& (0+255),b
  4196  00025E  0E26               	movlw	38
  4197  000260  0100               	movlb	0	; () banked
  4198  000262  6F8F               	movwf	??_checkC9V& (0+255),b
  4199  000264  0E5D               	movlw	93
  4200  000266                     u3237:
  4201  000266  2EE8               	decfsz	wreg,f,c
  4202  000268  D7FE               	bra	u3237
  4203  00026A  2F8F               	decfsz	??_checkC9V& (0+255),f,b
  4204  00026C  D7FC               	bra	u3237
  4205  00026E  2F90               	decfsz	(??_checkC9V+1)& (0+255),f,b
  4206  000270  D7FA               	bra	u3237
  4207  000272  D000               	nop2	
  4208                           
  4209                           ;sensors.c: 109: sorted[3]++;
  4210  000274  0100               	movlb	0	; () banked
  4211  000276  EE20 F006          	lfsr	2,6
  4212  00027A  518D               	movf	checkC9V@sorted& (0+255),w,b
  4213  00027C  26D9               	addwf	fsr2l,f,c
  4214  00027E  518E               	movf	(checkC9V@sorted+1)& (0+255),w,b
  4215  000280  22DA               	addwfc	fsr2h,f,c
  4216  000282  2ADE               	incf	postinc2,f,c
  4217  000284  0E00               	movlw	0
  4218  000286  22DD               	addwfc	postdec2,f,c
  4219                           
  4220                           ; BSR set to: 0
  4221                           ;sensors.c: 110: return 0;
  4222  000288  0E00               	movlw	0
  4223  00028A  0100               	movlb	0	; () banked
  4224  00028C  6F8E               	movwf	(?_checkC9V+1)& (0+255),b
  4225  00028E  0E00               	movlw	0
  4226  000290  6F8D               	movwf	?_checkC9V& (0+255),b
  4227                           
  4228                           ; BSR set to: 0
  4229  000292  0012               	return	
  4230  000294                     l376:
  4231                           
  4232                           ; BSR set to: 0
  4233                           ;sensors.c: 112: return -1;
  4234  000294  0100               	movlb	0	; () banked
  4235  000296  698D               	setf	?_checkC9V& (0+255),b
  4236  000298  698E               	setf	(?_checkC9V+1)& (0+255),b
  4237                           
  4238                           ; BSR set to: 0
  4239                           ;sensors.c: 113: }
  4240  00029A  0012               	return	
  4241  00029C                     l4145:
  4242  00029C  0E03               	movlw	3
  4243  00029E  ECBE  F00B         	call	_AD
  4244  0002A2  C026  F086         	movff	?_AD,checkV@voltage
  4245  0002A6  C027  F087         	movff	?_AD+1,checkV@voltage+1
  4246  0002AA  0E00               	movlw	0
  4247  0002AC  0100               	movlb	0	; () banked
  4248  0002AE  6F88               	movwf	checkV@max& (0+255),b
  4249  0002B0  0EC0               	movlw	192
  4250  0002B2  0100               	movlb	0	; () banked
  4251  0002B4  6F89               	movwf	(checkV@max+1)& (0+255),b
  4252  0002B6  0E3F               	movlw	63
  4253  0002B8  0100               	movlb	0	; () banked
  4254  0002BA  6F8A               	movwf	(checkV@max+2)& (0+255),b
  4255  0002BC  EC3F  F007         	call	_checkV	;wreg free
  4256                           
  4257                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  4258                           ; Switch size 1, requested type "space"
  4259                           ; Number of cases is 2, Range of values is 0 to 255
  4260                           ; switch strategies available:
  4261                           ; Name         Instructions Cycles
  4262                           ; simple_byte            7     4 (average)
  4263                           ;	Chosen strategy is simple_byte
  4264  0002C0  0100               	movlb	0	; () banked
  4265  0002C2  5187               	movf	(?_checkV+1)& (0+255),w,b
  4266  0002C4  0A00               	xorlw	0	; case 0
  4267  0002C6  B4D8               	btfsc	status,2,c
  4268  0002C8  D004               	goto	l4583
  4269  0002CA  0AFF               	xorlw	255	; case 255
  4270  0002CC  B4D8               	btfsc	status,2,c
  4271  0002CE  D00A               	goto	l4585
  4272  0002D0  D7E1               	goto	l376
  4273  0002D2                     l4583:
  4274                           
  4275                           ; BSR set to: 0
  4276                           ; Switch size 1, requested type "space"
  4277                           ; Number of cases is 2, Range of values is 0 to 1
  4278                           ; switch strategies available:
  4279                           ; Name         Instructions Cycles
  4280                           ; simple_byte            7     4 (average)
  4281                           ;	Chosen strategy is simple_byte
  4282  0002D2  0100               	movlb	0	; () banked
  4283  0002D4  5186               	movf	?_checkV& (0+255),w,b
  4284  0002D6  0A00               	xorlw	0	; case 0
  4285  0002D8  B4D8               	btfsc	status,2,c
  4286  0002DA  D6A7               	goto	l4055
  4287  0002DC  0A01               	xorlw	1	; case 1
  4288  0002DE  B4D8               	btfsc	status,2,c
  4289  0002E0  D78B               	goto	l4119
  4290  0002E2  D7D8               	goto	l376
  4291  0002E4                     l4585:
  4292                           
  4293                           ; BSR set to: 0
  4294                           ; Switch size 1, requested type "space"
  4295                           ; Number of cases is 1, Range of values is 255 to 255
  4296                           ; switch strategies available:
  4297                           ; Name         Instructions Cycles
  4298                           ; simple_byte            4     3 (average)
  4299                           ;	Chosen strategy is simple_byte
  4300  0002E4  0100               	movlb	0	; () banked
  4301  0002E6  5186               	movf	?_checkV& (0+255),w,b
  4302  0002E8  0AFF               	xorlw	255	; case 255
  4303  0002EA  B4D8               	btfsc	status,2,c
  4304  0002EC  D7AC               	goto	l4131
  4305  0002EE  D7D2               	goto	l376
  4306  0002F0                     __end_of_checkC9V:
  4307                           	opt stack 0
  4308                           tblptru	equ	0xFF8
  4309                           intcon	equ	0xFF2
  4310                           intcon3	equ	0xFF0
  4311                           postinc0	equ	0xFEE
  4312                           wreg	equ	0xFE8
  4313                           plusw1	equ	0xFE3
  4314                           postinc2	equ	0xFDE
  4315                           postdec2	equ	0xFDD
  4316                           plusw2	equ	0xFDB
  4317                           fsr2h	equ	0xFDA
  4318                           fsr2l	equ	0xFD9
  4319                           status	equ	0xFD8
  4320                           
  4321 ;; *************** function _checkAA *****************
  4322 ;; Defined at:
  4323 ;;		line 30 in file "sensors.c"
  4324 ;; Parameters:    Size  Location     Type
  4325 ;;  sorted          2   13[BANK0 ] PTR int 
  4326 ;;		 -> simulate@sorted(8), mainloop@sorted(8), 
  4327 ;; Auto vars:     Size  Location     Type
  4328 ;;		None
  4329 ;; Return value:  Size  Location     Type
  4330 ;;                  2   13[BANK0 ] int 
  4331 ;; Registers used:
  4332 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4333 ;; Tracked objects:
  4334 ;;		On entry : 0/0
  4335 ;;		On exit  : 0/0
  4336 ;;		Unchanged: 0/0
  4337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4338 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4340 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4341 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4342 ;;Total ram usage:        4 bytes
  4343 ;; Hardware stack levels used:    1
  4344 ;; Hardware stack levels required when called:    9
  4345 ;; This function calls:
  4346 ;;		_AD
  4347 ;;		_checkV
  4348 ;;		_lcdInst
  4349 ;;		_printf
  4350 ;; This function is called by:
  4351 ;;		_simulate
  4352 ;;		_mainloop
  4353 ;; This function uses a non-reentrant model
  4354 ;;
  4355                           
  4356                           	psect	text18
  4357  00069C                     __ptext18:
  4358                           	opt stack 0
  4359  00069C                     _checkAA:
  4360                           	opt stack 20
  4361                           
  4362                           ;sensors.c: 32: lcdInst(0b10000000);;
  4363                           
  4364                           ; BSR set to: 0
  4365                           ;incstack = 0
  4366  00069C  0E80               	movlw	128
  4367  00069E  EC72  F00C         	call	_lcdInst
  4368                           
  4369                           ;sensors.c: 33: printf("AA:     ");
  4370  0006A2  0ED9               	movlw	low STR_31
  4371  0006A4  6E32               	movwf	printf@f,c
  4372  0006A6  0EFF               	movlw	high STR_31
  4373  0006A8  6E33               	movwf	printf@f+1,c
  4374  0006AA  EC2A  F005         	call	_printf	;wreg free
  4375                           
  4376                           ;sensors.c: 34: lcdInst(0b11000000);;
  4377  0006AE  0EC0               	movlw	192
  4378  0006B0  EC72  F00C         	call	_lcdInst
  4379                           
  4380                           ;sensors.c: 35: _delay((unsigned long)((1000)*(8000000/4000.0)));
  4381  0006B4  0E0B               	movlw	11
  4382  0006B6  0100               	movlb	0	; () banked
  4383  0006B8  6F90               	movwf	(??_checkAA+1)& (0+255),b
  4384  0006BA  0E26               	movlw	38
  4385  0006BC  0100               	movlb	0	; () banked
  4386  0006BE  6F8F               	movwf	??_checkAA& (0+255),b
  4387  0006C0  0E5D               	movlw	93
  4388  0006C2                     u3247:
  4389  0006C2  2EE8               	decfsz	wreg,f,c
  4390  0006C4  D7FE               	bra	u3247
  4391  0006C6  2F8F               	decfsz	??_checkAA& (0+255),f,b
  4392  0006C8  D7FC               	bra	u3247
  4393  0006CA  2F90               	decfsz	(??_checkAA+1)& (0+255),f,b
  4394  0006CC  D7FA               	bra	u3247
  4395  0006CE  D000               	nop2	
  4396                           
  4397                           ;sensors.c: 36: switch (checkV(AD(0), 1.5)) {
  4398  0006D0  D05E               	goto	l4039
  4399  0006D2                     l4001:
  4400                           
  4401                           ;sensors.c: 38: lcdInst(0b10000000);;
  4402  0006D2  0E80               	movlw	128
  4403  0006D4  EC72  F00C         	call	_lcdInst
  4404                           
  4405                           ;sensors.c: 39: printf("charged AA    ");
  4406  0006D8  0EDC               	movlw	low STR_32
  4407  0006DA  6E32               	movwf	printf@f,c
  4408  0006DC  0EFE               	movlw	high STR_32
  4409  0006DE  6E33               	movwf	printf@f+1,c
  4410  0006E0  EC2A  F005         	call	_printf	;wreg free
  4411                           
  4412                           ;sensors.c: 40: _delay((unsigned long)((1000)*(8000000/4000.0)));
  4413  0006E4  0E0B               	movlw	11
  4414  0006E6  0100               	movlb	0	; () banked
  4415  0006E8  6F90               	movwf	(??_checkAA+1)& (0+255),b
  4416  0006EA  0E26               	movlw	38
  4417  0006EC  0100               	movlb	0	; () banked
  4418  0006EE  6F8F               	movwf	??_checkAA& (0+255),b
  4419  0006F0  0E5D               	movlw	93
  4420  0006F2                     u3257:
  4421  0006F2  2EE8               	decfsz	wreg,f,c
  4422  0006F4  D7FE               	bra	u3257
  4423  0006F6  2F8F               	decfsz	??_checkAA& (0+255),f,b
  4424  0006F8  D7FC               	bra	u3257
  4425  0006FA  2F90               	decfsz	(??_checkAA+1)& (0+255),f,b
  4426  0006FC  D7FA               	bra	u3257
  4427  0006FE  D000               	nop2	
  4428                           
  4429                           ;sensors.c: 41: sorted[0]++;
  4430  000700  C08D  FFD9         	movff	checkAA@sorted,fsr2l
  4431  000704  C08E  FFDA         	movff	checkAA@sorted+1,fsr2h
  4432  000708  2ADE               	incf	postinc2,f,c
  4433  00070A  0E00               	movlw	0
  4434  00070C  22DD               	addwfc	postdec2,f,c
  4435                           
  4436                           ;sensors.c: 42: return 1;
  4437  00070E  0E00               	movlw	0
  4438  000710  0100               	movlb	0	; () banked
  4439  000712  6F8E               	movwf	(?_checkAA+1)& (0+255),b
  4440  000714  0E01               	movlw	1
  4441  000716  6F8D               	movwf	?_checkAA& (0+255),b
  4442                           
  4443                           ; BSR set to: 0
  4444  000718  0012               	return	
  4445  00071A                     l4013:
  4446                           
  4447                           ; BSR set to: 0
  4448                           ;sensors.c: 44: lcdInst(0b11000000);;
  4449  00071A  0EC0               	movlw	192
  4450  00071C  EC72  F00C         	call	_lcdInst
  4451                           
  4452                           ;sensors.c: 45: printf("uncharged AA     ");
  4453  000720  0E69               	movlw	low STR_33
  4454  000722  6E32               	movwf	printf@f,c
  4455  000724  0EFE               	movlw	high STR_33
  4456  000726  6E33               	movwf	printf@f+1,c
  4457  000728  EC2A  F005         	call	_printf	;wreg free
  4458                           
  4459                           ;sensors.c: 46: _delay((unsigned long)((1000)*(8000000/4000.0)));
  4460  00072C  0E0B               	movlw	11
  4461  00072E  0100               	movlb	0	; () banked
  4462  000730  6F90               	movwf	(??_checkAA+1)& (0+255),b
  4463  000732  0E26               	movlw	38
  4464  000734  0100               	movlb	0	; () banked
  4465  000736  6F8F               	movwf	??_checkAA& (0+255),b
  4466  000738  0E5D               	movlw	93
  4467  00073A                     u3267:
  4468  00073A  2EE8               	decfsz	wreg,f,c
  4469  00073C  D7FE               	bra	u3267
  4470  00073E  2F8F               	decfsz	??_checkAA& (0+255),f,b
  4471  000740  D7FC               	bra	u3267
  4472  000742  2F90               	decfsz	(??_checkAA+1)& (0+255),f,b
  4473  000744  D7FA               	bra	u3267
  4474  000746  D000               	nop2	
  4475                           
  4476                           ;sensors.c: 47: sorted[3]++;
  4477  000748  0100               	movlb	0	; () banked
  4478  00074A  EE20 F006          	lfsr	2,6
  4479  00074E  518D               	movf	checkAA@sorted& (0+255),w,b
  4480  000750  26D9               	addwf	fsr2l,f,c
  4481  000752  518E               	movf	(checkAA@sorted+1)& (0+255),w,b
  4482  000754  22DA               	addwfc	fsr2h,f,c
  4483  000756  2ADE               	incf	postinc2,f,c
  4484  000758  0E00               	movlw	0
  4485  00075A  22DD               	addwfc	postdec2,f,c
  4486                           
  4487                           ; BSR set to: 0
  4488                           ;sensors.c: 48: return 0;
  4489  00075C  0E00               	movlw	0
  4490  00075E  0100               	movlb	0	; () banked
  4491  000760  6F8E               	movwf	(?_checkAA+1)& (0+255),b
  4492  000762  0E00               	movlw	0
  4493  000764  6F8D               	movwf	?_checkAA& (0+255),b
  4494                           
  4495                           ; BSR set to: 0
  4496  000766  0012               	return	
  4497  000768                     l4025:
  4498                           
  4499                           ; BSR set to: 0
  4500                           ;sensors.c: 50: lcdInst(0b10000000);;
  4501  000768  0E80               	movlw	128
  4502  00076A  EC72  F00C         	call	_lcdInst
  4503                           
  4504                           ;sensors.c: 51: printf("no AA     ");
  4505  00076E  0E8D               	movlw	low STR_34
  4506  000770  6E32               	movwf	printf@f,c
  4507  000772  0EFF               	movlw	high STR_34
  4508  000774  6E33               	movwf	printf@f+1,c
  4509  000776  EC2A  F005         	call	_printf	;wreg free
  4510                           
  4511                           ;sensors.c: 52: return -1;
  4512  00077A  0100               	movlb	0	; () banked
  4513  00077C  698D               	setf	?_checkAA& (0+255),b
  4514  00077E  698E               	setf	(?_checkAA+1)& (0+255),b
  4515                           
  4516                           ; BSR set to: 0
  4517  000780  0012               	return	
  4518  000782                     l4033:
  4519                           
  4520                           ; BSR set to: 0
  4521                           ;sensors.c: 54: return 0;
  4522  000782  0E00               	movlw	0
  4523  000784  0100               	movlb	0	; () banked
  4524  000786  6F8E               	movwf	(?_checkAA+1)& (0+255),b
  4525  000788  0E00               	movlw	0
  4526  00078A  6F8D               	movwf	?_checkAA& (0+255),b
  4527                           
  4528                           ; BSR set to: 0
  4529                           ;sensors.c: 55: }
  4530                           
  4531                           ; BSR set to: 0
  4532  00078C  0012               	return	
  4533  00078E                     l4039:
  4534  00078E  0E00               	movlw	0
  4535  000790  ECBE  F00B         	call	_AD
  4536  000794  C026  F086         	movff	?_AD,checkV@voltage
  4537  000798  C027  F087         	movff	?_AD+1,checkV@voltage+1
  4538  00079C  0E00               	movlw	0
  4539  00079E  0100               	movlb	0	; () banked
  4540  0007A0  6F88               	movwf	checkV@max& (0+255),b
  4541  0007A2  0EC0               	movlw	192
  4542  0007A4  0100               	movlb	0	; () banked
  4543  0007A6  6F89               	movwf	(checkV@max+1)& (0+255),b
  4544  0007A8  0E3F               	movlw	63
  4545  0007AA  0100               	movlb	0	; () banked
  4546  0007AC  6F8A               	movwf	(checkV@max+2)& (0+255),b
  4547  0007AE  EC3F  F007         	call	_checkV	;wreg free
  4548                           
  4549                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  4550                           ; Switch size 1, requested type "space"
  4551                           ; Number of cases is 2, Range of values is 0 to 255
  4552                           ; switch strategies available:
  4553                           ; Name         Instructions Cycles
  4554                           ; simple_byte            7     4 (average)
  4555                           ;	Chosen strategy is simple_byte
  4556  0007B2  0100               	movlb	0	; () banked
  4557  0007B4  5187               	movf	(?_checkV+1)& (0+255),w,b
  4558  0007B6  0A00               	xorlw	0	; case 0
  4559  0007B8  B4D8               	btfsc	status,2,c
  4560  0007BA  D004               	goto	l4587
  4561  0007BC  0AFF               	xorlw	255	; case 255
  4562  0007BE  B4D8               	btfsc	status,2,c
  4563  0007C0  D00A               	goto	l4589
  4564  0007C2  D7DF               	goto	l4033
  4565  0007C4                     l4587:
  4566                           
  4567                           ; BSR set to: 0
  4568                           ; Switch size 1, requested type "space"
  4569                           ; Number of cases is 2, Range of values is 0 to 1
  4570                           ; switch strategies available:
  4571                           ; Name         Instructions Cycles
  4572                           ; simple_byte            7     4 (average)
  4573                           ;	Chosen strategy is simple_byte
  4574  0007C4  0100               	movlb	0	; () banked
  4575  0007C6  5186               	movf	?_checkV& (0+255),w,b
  4576  0007C8  0A00               	xorlw	0	; case 0
  4577  0007CA  B4D8               	btfsc	status,2,c
  4578  0007CC  D7CD               	goto	l4025
  4579  0007CE  0A01               	xorlw	1	; case 1
  4580  0007D0  B4D8               	btfsc	status,2,c
  4581  0007D2  D77F               	goto	l4001
  4582  0007D4  D7D6               	goto	l4033
  4583  0007D6                     l4589:
  4584                           
  4585                           ; BSR set to: 0
  4586                           ; Switch size 1, requested type "space"
  4587                           ; Number of cases is 1, Range of values is 255 to 255
  4588                           ; switch strategies available:
  4589                           ; Name         Instructions Cycles
  4590                           ; simple_byte            4     3 (average)
  4591                           ;	Chosen strategy is simple_byte
  4592  0007D6  0100               	movlb	0	; () banked
  4593  0007D8  5186               	movf	?_checkV& (0+255),w,b
  4594  0007DA  0AFF               	xorlw	255	; case 255
  4595  0007DC  B4D8               	btfsc	status,2,c
  4596  0007DE  D79D               	goto	l4013
  4597  0007E0  D7D0               	goto	l4033
  4598  0007E2                     __end_of_checkAA:
  4599                           	opt stack 0
  4600                           tblptru	equ	0xFF8
  4601                           intcon	equ	0xFF2
  4602                           intcon3	equ	0xFF0
  4603                           postinc0	equ	0xFEE
  4604                           wreg	equ	0xFE8
  4605                           plusw1	equ	0xFE3
  4606                           postinc2	equ	0xFDE
  4607                           postdec2	equ	0xFDD
  4608                           plusw2	equ	0xFDB
  4609                           fsr2h	equ	0xFDA
  4610                           fsr2l	equ	0xFD9
  4611                           status	equ	0xFD8
  4612                           
  4613 ;; *************** function _checkV *****************
  4614 ;; Defined at:
  4615 ;;		line 15 in file "sensors.c"
  4616 ;; Parameters:    Size  Location     Type
  4617 ;;  voltage         2    6[BANK0 ] int 
  4618 ;;  max             3    8[BANK0 ] float 
  4619 ;; Auto vars:     Size  Location     Type
  4620 ;;  i               1   12[BANK0 ] unsigned char 
  4621 ;; Return value:  Size  Location     Type
  4622 ;;                  2    6[BANK0 ] int 
  4623 ;; Registers used:
  4624 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4625 ;; Tracked objects:
  4626 ;;		On entry : 0/0
  4627 ;;		On exit  : 0/0
  4628 ;;		Unchanged: 0/0
  4629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4630 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4631 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4632 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4633 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4634 ;;Total ram usage:        7 bytes
  4635 ;; Hardware stack levels used:    1
  4636 ;; Hardware stack levels required when called:    8
  4637 ;; This function calls:
  4638 ;;		___awtoft
  4639 ;;		___ftdiv
  4640 ;;		___ftge
  4641 ;;		___ftmul
  4642 ;;		_lcdInst
  4643 ;;		_printf
  4644 ;; This function is called by:
  4645 ;;		_checkAA
  4646 ;;		_checkC9V
  4647 ;; This function uses a non-reentrant model
  4648 ;;
  4649                           
  4650                           	psect	text19
  4651  000E7E                     __ptext19:
  4652                           	opt stack 0
  4653  000E7E                     _checkV:
  4654                           	opt stack 20
  4655                           
  4656                           ;sensors.c: 17: lcdInst(0b11000000);;
  4657                           
  4658                           ; BSR set to: 0
  4659                           ;incstack = 0
  4660  000E7E  0EC0               	movlw	192
  4661  000E80  EC72  F00C         	call	_lcdInst
  4662                           
  4663                           ;sensors.c: 18: printf("%d received    ", voltage);
  4664  000E84  0E9C               	movlw	low STR_30
  4665  000E86  6E32               	movwf	printf@f,c
  4666  000E88  0EFE               	movlw	high STR_30
  4667  000E8A  6E33               	movwf	printf@f+1,c
  4668  000E8C  C086  F034         	movff	checkV@voltage,?_printf+2
  4669  000E90  C087  F035         	movff	checkV@voltage+1,?_printf+3
  4670  000E94  EC2A  F005         	call	_printf	;wreg free
  4671                           
  4672                           ;sensors.c: 19: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(8000000/4000.0)));};
  4673  000E98  0E00               	movlw	0
  4674  000E9A  0100               	movlb	0	; () banked
  4675  000E9C  6F8C               	movwf	checkV@i& (0+255),b
  4676  000E9E                     l3891:
  4677                           
  4678                           ; BSR set to: 0
  4679  000E9E  0E09               	movlw	9
  4680  000EA0  0100               	movlb	0	; () banked
  4681  000EA2  658C               	cpfsgt	checkV@i& (0+255),b
  4682  000EA4  D001               	goto	l3895
  4683  000EA6  D00C               	goto	l3899
  4684  000EA8                     l3895:
  4685                           
  4686                           ; BSR set to: 0
  4687  000EA8  0EFF               	movlw	255
  4688  000EAA  0100               	movlb	0	; () banked
  4689  000EAC  6F8B               	movwf	??_checkV& (0+255),b
  4690  000EAE  0E8A               	movlw	138
  4691  000EB0                     u3277:
  4692  000EB0  2EE8               	decfsz	wreg,f,c
  4693  000EB2  D7FE               	bra	u3277
  4694  000EB4  2F8B               	decfsz	??_checkV& (0+255),f,b
  4695  000EB6  D7FC               	bra	u3277
  4696  000EB8  F000               	nop	
  4697  000EBA  0100               	movlb	0	; () banked
  4698  000EBC  2B8C               	incf	checkV@i& (0+255),f,b
  4699  000EBE  D7EF               	goto	l3891
  4700  000EC0                     l3899:
  4701                           
  4702                           ; BSR set to: 0
  4703                           ;sensors.c: 20: if (voltage > 1023 * 4 / 5) {
  4704  000EC0  0100               	movlb	0	; () banked
  4705  000EC2  BF87               	btfsc	(checkV@voltage+1)& (0+255),7,b
  4706  000EC4  D00E               	goto	l3907
  4707  000EC6  0E33               	movlw	51
  4708  000EC8  0100               	movlb	0	; () banked
  4709  000ECA  5D86               	subwf	checkV@voltage& (0+255),w,b
  4710  000ECC  0E03               	movlw	3
  4711  000ECE  0100               	movlb	0	; () banked
  4712  000ED0  5987               	subwfb	(checkV@voltage+1)& (0+255),w,b
  4713  000ED2  A0D8               	btfss	status,0,c
  4714  000ED4  D006               	goto	l3907
  4715                           
  4716                           ; BSR set to: 0
  4717                           ;sensors.c: 21: return 0;
  4718  000ED6  0E00               	movlw	0
  4719  000ED8  0100               	movlb	0	; () banked
  4720  000EDA  6F87               	movwf	(?_checkV+1)& (0+255),b
  4721  000EDC  0E00               	movlw	0
  4722  000EDE  6F86               	movwf	?_checkV& (0+255),b
  4723                           
  4724                           ; BSR set to: 0
  4725                           ;sensors.c: 22: } else if (voltage > 0.85 * 1023 * max / 5) {
  4726                           
  4727                           ; BSR set to: 0
  4728  000EE0  0012               	return	
  4729  000EE2                     l3907:
  4730                           
  4731                           ; BSR set to: 0
  4732  000EE2  0E00               	movlw	0
  4733  000EE4  6E34               	movwf	___ftdiv@f2,c
  4734  000EE6  0EA0               	movlw	160
  4735  000EE8  6E35               	movwf	___ftdiv@f2+1,c
  4736  000EEA  0E40               	movlw	64
  4737  000EEC  6E36               	movwf	___ftdiv@f2+2,c
  4738  000EEE  0E63               	movlw	99
  4739  000EF0  6E43               	movwf	___ftmul@f2,c
  4740  000EF2  0E59               	movlw	89
  4741  000EF4  6E44               	movwf	___ftmul@f2+1,c
  4742  000EF6  0E44               	movlw	68
  4743  000EF8  6E45               	movwf	___ftmul@f2+2,c
  4744  000EFA  C088  F040         	movff	checkV@max,___ftmul@f1
  4745  000EFE  C089  F041         	movff	checkV@max+1,___ftmul@f1+1
  4746  000F02  C08A  F042         	movff	checkV@max+2,___ftmul@f1+2
  4747  000F06  EC52  F006         	call	___ftmul	;wreg free
  4748  000F0A  C040  F031         	movff	?___ftmul,___ftdiv@f1
  4749  000F0E  C041  F032         	movff	?___ftmul+1,___ftdiv@f1+1
  4750  000F12  C042  F033         	movff	?___ftmul+2,___ftdiv@f1+2
  4751  000F16  ECCC  F006         	call	___ftdiv	;wreg free
  4752  000F1A  C031  F080         	movff	?___ftdiv,___ftge@ff1
  4753  000F1E  C032  F081         	movff	?___ftdiv+1,___ftge@ff1+1
  4754  000F22  C033  F082         	movff	?___ftdiv+2,___ftge@ff1+2
  4755  000F26  C086  F02E         	movff	checkV@voltage,___awtoft@c
  4756  000F2A  C087  F02F         	movff	checkV@voltage+1,___awtoft@c+1
  4757  000F2E  ECDC  F00B         	call	___awtoft	;wreg free
  4758  000F32  C02E  F083         	movff	?___awtoft,___ftge@ff2
  4759  000F36  C02F  F084         	movff	?___awtoft+1,___ftge@ff2+1
  4760  000F3A  C030  F085         	movff	?___awtoft+2,___ftge@ff2+2
  4761  000F3E  EC82  F008         	call	___ftge	;wreg free
  4762  000F42  0100               	movlb	0	; () banked
  4763  000F44  B0D8               	btfsc	status,0,c
  4764  000F46  D006               	goto	l346
  4765                           
  4766                           ; BSR set to: 0
  4767                           ;sensors.c: 23: return 1;
  4768  000F48  0E00               	movlw	0
  4769  000F4A  0100               	movlb	0	; () banked
  4770  000F4C  6F87               	movwf	(?_checkV+1)& (0+255),b
  4771  000F4E  0E01               	movlw	1
  4772  000F50  6F86               	movwf	?_checkV& (0+255),b
  4773                           
  4774                           ; BSR set to: 0
  4775                           ;sensors.c: 24: } else {
  4776                           
  4777                           ; BSR set to: 0
  4778  000F52  0012               	return	
  4779  000F54                     l346:
  4780                           
  4781                           ; BSR set to: 0
  4782                           ;sensors.c: 26: return -1;
  4783  000F54  0100               	movlb	0	; () banked
  4784  000F56  6986               	setf	?_checkV& (0+255),b
  4785  000F58  6987               	setf	(?_checkV+1)& (0+255),b
  4786                           
  4787                           ; BSR set to: 0
  4788  000F5A  0012               	return	
  4789  000F5C                     __end_of_checkV:
  4790                           	opt stack 0
  4791                           tblptru	equ	0xFF8
  4792                           intcon	equ	0xFF2
  4793                           intcon3	equ	0xFF0
  4794                           postinc0	equ	0xFEE
  4795                           wreg	equ	0xFE8
  4796                           plusw1	equ	0xFE3
  4797                           postinc2	equ	0xFDE
  4798                           postdec2	equ	0xFDD
  4799                           plusw2	equ	0xFDB
  4800                           fsr2h	equ	0xFDA
  4801                           fsr2l	equ	0xFD9
  4802                           status	equ	0xFD8
  4803                           
  4804 ;; *************** function _printf *****************
  4805 ;; Defined at:
  4806 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  4807 ;; Parameters:    Size  Location     Type
  4808 ;;  f               2   49[COMRAM] PTR const unsigned char 
  4809 ;;		 -> STR_42(16), STR_41(14), STR_40(9), STR_39(16), 
  4810 ;;		 -> STR_38(13), STR_37(14), STR_36(3), STR_35(3), 
  4811 ;;		 -> STR_34(11), STR_33(18), STR_32(15), STR_31(9), 
  4812 ;;		 -> STR_30(16), STR_29(12), STR_28(14), STR_27(3), 
  4813 ;;		 -> STR_26(16), STR_25(14), STR_24(7), STR_23(6), 
  4814 ;;		 -> STR_22(14), STR_21(15), STR_20(16), STR_19(3), 
  4815 ;;		 -> STR_18(11), STR_17(3), STR_16(11), STR_15(3), 
  4816 ;;		 -> STR_14(10), STR_13(3), STR_12(11), STR_11(13), 
  4817 ;;		 -> STR_10(14), STR_9(11), STR_8(14), STR_7(14), 
  4818 ;;		 -> STR_6(15), STR_5(17), STR_4(12), STR_3(12), 
  4819 ;;		 -> STR_2(11), STR_1(11), 
  4820 ;; Auto vars:     Size  Location     Type
  4821 ;;  tmpval          4    0        struct .
  4822 ;;  cp              3    0        PTR const unsigned char 
  4823 ;;  val             2   58[COMRAM] unsigned int 
  4824 ;;  ap              2   54[COMRAM] PTR void [1]
  4825 ;;		 -> ?i2_printf(2), ?_printf(2), 
  4826 ;;  len             2    0        unsigned int 
  4827 ;;  c               1   60[COMRAM] char 
  4828 ;;  prec            1   57[COMRAM] char 
  4829 ;;  flag            1   56[COMRAM] unsigned char 
  4830 ;; Return value:  Size  Location     Type
  4831 ;;                  2   49[COMRAM] int 
  4832 ;; Registers used:
  4833 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4834 ;; Tracked objects:
  4835 ;;		On entry : 0/0
  4836 ;;		On exit  : 0/0
  4837 ;;		Unchanged: 0/0
  4838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4839 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4840 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4841 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4842 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4843 ;;Total ram usage:       12 bytes
  4844 ;; Hardware stack levels used:    1
  4845 ;; Hardware stack levels required when called:    7
  4846 ;; This function calls:
  4847 ;;		___lwdiv
  4848 ;;		___lwmod
  4849 ;;		_putch
  4850 ;; This function is called by:
  4851 ;;		_simulate
  4852 ;;		_main
  4853 ;;		_showInfo
  4854 ;;		_moveXMotors
  4855 ;;		_moveBigNose
  4856 ;;		_moveSmallNose
  4857 ;;		_stopMoving
  4858 ;;		_checkV
  4859 ;;		_checkAA
  4860 ;;		_checkC9V
  4861 ;;		_mainloop
  4862 ;; This function uses a non-reentrant model
  4863 ;;
  4864                           
  4865                           	psect	text20
  4866  000A54                     __ptext20:
  4867                           	opt stack 0
  4868  000A54                     _printf:
  4869                           	opt stack 21
  4870                           
  4871                           ;doprnt.c: 466: va_list ap;
  4872                           ;doprnt.c: 499: signed char c;
  4873                           ;doprnt.c: 506: signed char prec;
  4874                           ;doprnt.c: 508: unsigned char flag;
  4875                           ;doprnt.c: 523: union {
  4876                           ;doprnt.c: 524: unsigned long vd;
  4877                           ;doprnt.c: 525: double integ;
  4878                           ;doprnt.c: 526: } tmpval;
  4879                           ;doprnt.c: 528: unsigned int val;
  4880                           ;doprnt.c: 529: unsigned len;
  4881                           ;doprnt.c: 530: const char * cp;
  4882                           ;doprnt.c: 533: *ap = __va_start();
  4883                           
  4884                           ; BSR set to: 0
  4885                           ;incstack = 0
  4886  000A54  0E34               	movlw	low (?_printf+2)
  4887  000A56  6E37               	movwf	printf@ap,c
  4888  000A58  0E00               	movlw	high (?_printf+2)
  4889  000A5A  6E38               	movwf	printf@ap+1,c
  4890                           
  4891                           ;doprnt.c: 536: while(c = *f++) {
  4892  000A5C  D082               	goto	l3849
  4893  000A5E                     l3801:
  4894                           
  4895                           ;doprnt.c: 538: if(c != '%')
  4896  000A5E  0E25               	movlw	37
  4897  000A60  183D               	xorwf	printf@c,w,c
  4898  000A62  B4D8               	btfsc	status,2,c
  4899  000A64  D004               	goto	l3805
  4900                           
  4901                           ;doprnt.c: 540: {
  4902                           ;doprnt.c: 541: (putch(c) );
  4903  000A66  503D               	movf	printf@c,w,c
  4904  000A68  EC6C  F00C         	call	_putch
  4905                           
  4906                           ;doprnt.c: 542: continue;
  4907  000A6C  D07A               	goto	l3849
  4908  000A6E                     l3805:
  4909                           
  4910                           ;doprnt.c: 543: }
  4911                           ;doprnt.c: 548: flag = 0;
  4912  000A6E  0E00               	movlw	0
  4913  000A70  6E39               	movwf	printf@flag,c
  4914                           
  4915                           ;doprnt.c: 635: switch(c = *f++) {
  4916  000A72  D004               	goto	l3811
  4917  000A74                     l3807:
  4918                           
  4919                           ;doprnt.c: 809: (putch(c) );
  4920  000A74  503D               	movf	printf@c,w,c
  4921  000A76  EC6C  F00C         	call	_putch
  4922                           
  4923                           ;doprnt.c: 810: continue;
  4924  000A7A  D073               	goto	l3849
  4925  000A7C                     l3811:
  4926  000A7C  C032  FFF6         	movff	printf@f,tblptrl
  4927  000A80  C033  FFF7         	movff	printf@f+1,tblptrh
  4928  000A84  4A32               	infsnz	printf@f,f,c
  4929  000A86  2A33               	incf	printf@f+1,f,c
  4930  000A88                     	if	0	;tblptru may be non-zero
  4931  000A88                     	endif
  4932  000A88                     	if	0	;tblptru may be non-zero
  4933  000A88                     	endif
  4934  000A88  0008               	tblrd		*
  4935  000A8A  CFF5 F03D          	movff	tablat,printf@c
  4936  000A8E  503D               	movf	printf@c,w,c
  4937                           
  4938                           ; Switch size 1, requested type "space"
  4939                           ; Number of cases is 3, Range of values is 0 to 105
  4940                           ; switch strategies available:
  4941                           ; Name         Instructions Cycles
  4942                           ; simple_byte           10     6 (average)
  4943                           ;	Chosen strategy is simple_byte
  4944  000A90  0A00               	xorlw	0	; case 0
  4945  000A92  B4D8               	btfsc	status,2,c
  4946  000A94  0012               	return	
  4947  000A96  0A64               	xorlw	100	; case 100
  4948  000A98  B4D8               	btfsc	status,2,c
  4949  000A9A  D003               	goto	l3813
  4950  000A9C  0A0D               	xorlw	13	; case 105
  4951  000A9E  A4D8               	btfss	status,2,c
  4952  000AA0  D7E9               	goto	l3807
  4953  000AA2                     l3813:
  4954                           
  4955                           ;doprnt.c: 1253: {
  4956                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4957  000AA2  C037  FFD9         	movff	printf@ap,fsr2l
  4958  000AA6  C038  FFDA         	movff	printf@ap+1,fsr2h
  4959  000AAA  CFDE F03B          	movff	postinc2,printf@val
  4960  000AAE  CFDD F03C          	movff	postdec2,printf@val+1
  4961  000AB2  0E02               	movlw	2
  4962  000AB4  2637               	addwf	printf@ap,f,c
  4963  000AB6  0E00               	movlw	0
  4964  000AB8  2238               	addwfc	printf@ap+1,f,c
  4965                           
  4966                           ;doprnt.c: 1261: if((int)val < 0) {
  4967  000ABA  AE3C               	btfss	printf@val+1,7,c
  4968  000ABC  D006               	goto	l3823
  4969                           
  4970                           ;doprnt.c: 1262: flag |= 0x03;
  4971  000ABE  0E03               	movlw	3
  4972  000AC0  1239               	iorwf	printf@flag,f,c
  4973                           
  4974                           ;doprnt.c: 1263: val = -val;
  4975  000AC2  6C3B               	negf	printf@val,c
  4976  000AC4  1E3C               	comf	printf@val+1,f,c
  4977  000AC6  B0D8               	btfsc	status,0,c
  4978  000AC8  2A3C               	incf	printf@val+1,f,c
  4979  000ACA                     l3823:
  4980                           
  4981                           ;doprnt.c: 1264: }
  4982                           ;doprnt.c: 1266: }
  4983                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4984  000ACA  0E01               	movlw	1
  4985  000ACC  6E3D               	movwf	printf@c,c
  4986  000ACE                     l3825:
  4987  000ACE  0E05               	movlw	5
  4988  000AD0  183D               	xorwf	printf@c,w,c
  4989  000AD2  B4D8               	btfsc	status,2,c
  4990  000AD4  D012               	goto	l3837
  4991                           
  4992                           ;doprnt.c: 1306: if(val < dpowers[c])
  4993  000AD6  503D               	movf	printf@c,w,c
  4994  000AD8  0D02               	mullw	2
  4995  000ADA  0E5F               	movlw	low _dpowers
  4996  000ADC  24F3               	addwf	prodl,w,c
  4997  000ADE  6EF6               	movwf	tblptrl,c
  4998  000AE0  0EFE               	movlw	high _dpowers
  4999  000AE2  20F4               	addwfc	prodh,w,c
  5000  000AE4  6EF7               	movwf	tblptrh,c
  5001  000AE6                     	if	0	;There are less than 3 active tblptr bytes
  5002  000AE6                     	endif
  5003  000AE6  0009               	tblrd		*+
  5004  000AE8  50F5               	movf	tablat,w,c
  5005  000AEA  5C3B               	subwf	printf@val,w,c
  5006  000AEC  0009               	tblrd		*+
  5007  000AEE  50F5               	movf	tablat,w,c
  5008  000AF0  583C               	subwfb	printf@val+1,w,c
  5009  000AF2  A0D8               	btfss	status,0,c
  5010  000AF4  D002               	goto	l3837
  5011                           
  5012                           ;doprnt.c: 1307: break;
  5013  000AF6  2A3D               	incf	printf@c,f,c
  5014  000AF8  D7EA               	goto	l3825
  5015  000AFA                     l3837:
  5016                           
  5017                           ;doprnt.c: 1422: {
  5018                           ;doprnt.c: 1438: if(flag & 0x03)
  5019  000AFA  C039  F036         	movff	printf@flag,??_printf
  5020  000AFE  0E03               	movlw	3
  5021  000B00  1636               	andwf	??_printf,f,c
  5022  000B02  B4D8               	btfsc	status,2,c
  5023  000B04  D003               	goto	l3841
  5024                           
  5025                           ;doprnt.c: 1439: (putch('-') );
  5026  000B06  0E2D               	movlw	45
  5027  000B08  EC6C  F00C         	call	_putch
  5028  000B0C                     l3841:
  5029                           
  5030                           ;doprnt.c: 1469: }
  5031                           ;doprnt.c: 1472: prec = c;
  5032  000B0C  C03D  F03A         	movff	printf@c,printf@prec
  5033                           
  5034                           ;doprnt.c: 1474: while(prec--) {
  5035  000B10  D024               	goto	l3847
  5036  000B12                     l3843:
  5037                           
  5038                           ;doprnt.c: 1478: {
  5039                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5040  000B12  503A               	movf	printf@prec,w,c
  5041  000B14  0D02               	mullw	2
  5042  000B16  0E5F               	movlw	low _dpowers
  5043  000B18  24F3               	addwf	prodl,w,c
  5044  000B1A  6EF6               	movwf	tblptrl,c
  5045  000B1C  0EFE               	movlw	high _dpowers
  5046  000B1E  20F4               	addwfc	prodh,w,c
  5047  000B20  6EF7               	movwf	tblptrh,c
  5048  000B22                     	if	0	;There are less than 3 active tblptr bytes
  5049  000B22                     	endif
  5050  000B22  0009               	tblrd		*+
  5051  000B24  CFF5 F028          	movff	tablat,___lwdiv@divisor
  5052  000B28  000A               	tblrd		*-
  5053  000B2A  CFF5 F029          	movff	tablat,___lwdiv@divisor+1
  5054  000B2E  C03B  F026         	movff	printf@val,___lwdiv@dividend
  5055  000B32  C03C  F027         	movff	printf@val+1,___lwdiv@dividend+1
  5056  000B36  ECC1  F00A         	call	___lwdiv	;wreg free
  5057  000B3A  C026  F02D         	movff	?___lwdiv,___lwmod@dividend
  5058  000B3E  C027  F02E         	movff	?___lwdiv+1,___lwmod@dividend+1
  5059  000B42  0E00               	movlw	0
  5060  000B44  6E30               	movwf	___lwmod@divisor+1,c
  5061  000B46  0E0A               	movlw	10
  5062  000B48  6E2F               	movwf	___lwmod@divisor,c
  5063  000B4A  EC5D  F00B         	call	___lwmod	;wreg free
  5064  000B4E  502D               	movf	?___lwmod,w,c
  5065  000B50  0F30               	addlw	48
  5066  000B52  6E3D               	movwf	printf@c,c
  5067                           
  5068                           ;doprnt.c: 1523: }
  5069                           ;doprnt.c: 1524: (putch(c) );
  5070  000B54  503D               	movf	printf@c,w,c
  5071  000B56  EC6C  F00C         	call	_putch
  5072  000B5A                     l3847:
  5073  000B5A  063A               	decf	printf@prec,f,c
  5074  000B5C  283A               	incf	printf@prec,w,c
  5075  000B5E  A4D8               	btfss	status,2,c
  5076  000B60  D7D8               	goto	l3843
  5077  000B62                     l3849:
  5078  000B62  C032  FFF6         	movff	printf@f,tblptrl
  5079  000B66  C033  FFF7         	movff	printf@f+1,tblptrh
  5080  000B6A  4A32               	infsnz	printf@f,f,c
  5081  000B6C  2A33               	incf	printf@f+1,f,c
  5082  000B6E                     	if	0	;tblptru may be non-zero
  5083  000B6E                     	endif
  5084  000B6E                     	if	0	;tblptru may be non-zero
  5085  000B6E                     	endif
  5086  000B6E  0008               	tblrd		*
  5087  000B70  CFF5 F03D          	movff	tablat,printf@c
  5088  000B74  503D               	movf	printf@c,w,c
  5089  000B76  B4D8               	btfsc	status,2,c
  5090  000B78  0012               	return	
  5091  000B7A  D771               	goto	l3801
  5092  000B7C                     __end_of_printf:
  5093                           	opt stack 0
  5094                           tblptru	equ	0xFF8
  5095                           tblptrh	equ	0xFF7
  5096                           tblptrl	equ	0xFF6
  5097                           tablat	equ	0xFF5
  5098                           prodh	equ	0xFF4
  5099                           prodl	equ	0xFF3
  5100                           intcon	equ	0xFF2
  5101                           intcon3	equ	0xFF0
  5102                           postinc0	equ	0xFEE
  5103                           wreg	equ	0xFE8
  5104                           plusw1	equ	0xFE3
  5105                           postinc2	equ	0xFDE
  5106                           postdec2	equ	0xFDD
  5107                           plusw2	equ	0xFDB
  5108                           fsr2h	equ	0xFDA
  5109                           fsr2l	equ	0xFD9
  5110                           status	equ	0xFD8
  5111                           
  5112 ;; *************** function _putch *****************
  5113 ;; Defined at:
  5114 ;;		line 26 in file "lcd.c"
  5115 ;; Parameters:    Size  Location     Type
  5116 ;;  data            1    wreg     unsigned char 
  5117 ;; Auto vars:     Size  Location     Type
  5118 ;;  data            1   39[COMRAM] unsigned char 
  5119 ;; Return value:  Size  Location     Type
  5120 ;;                  1    wreg      void 
  5121 ;; Registers used:
  5122 ;;		wreg, status,2, status,0, cstack
  5123 ;; Tracked objects:
  5124 ;;		On entry : 0/0
  5125 ;;		On exit  : 0/0
  5126 ;;		Unchanged: 0/0
  5127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5129 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5131 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5132 ;;Total ram usage:        1 bytes
  5133 ;; Hardware stack levels used:    1
  5134 ;; Hardware stack levels required when called:    6
  5135 ;; This function calls:
  5136 ;;		_lcdNibble
  5137 ;; This function is called by:
  5138 ;;		_printf
  5139 ;; This function uses a non-reentrant model
  5140 ;;
  5141                           
  5142                           	psect	text21
  5143  0018D8                     __ptext21:
  5144                           	opt stack 0
  5145  0018D8                     _putch:
  5146                           	opt stack 21
  5147                           
  5148                           ;incstack = 0
  5149                           ;putch@data stored from wreg
  5150  0018D8  6E28               	movwf	putch@data,c
  5151                           
  5152                           ;lcd.c: 27: LATDbits.LATD2 = 1;
  5153  0018DA  848C               	bsf	3980,2,c	;volatile
  5154                           
  5155                           ;lcd.c: 28: lcdNibble(data);
  5156  0018DC  5028               	movf	putch@data,w,c
  5157  0018DE  EC6B  F00A         	call	_lcdNibble
  5158  0018E2  0012               	return		;funcret
  5159  0018E4                     __end_of_putch:
  5160                           	opt stack 0
  5161                           tblptru	equ	0xFF8
  5162                           tblptrh	equ	0xFF7
  5163                           tblptrl	equ	0xFF6
  5164                           tablat	equ	0xFF5
  5165                           prodh	equ	0xFF4
  5166                           prodl	equ	0xFF3
  5167                           intcon	equ	0xFF2
  5168                           intcon3	equ	0xFF0
  5169                           postinc0	equ	0xFEE
  5170                           wreg	equ	0xFE8
  5171                           plusw1	equ	0xFE3
  5172                           postinc2	equ	0xFDE
  5173                           postdec2	equ	0xFDD
  5174                           plusw2	equ	0xFDB
  5175                           fsr2h	equ	0xFDA
  5176                           fsr2l	equ	0xFD9
  5177                           status	equ	0xFD8
  5178                           
  5179 ;; *************** function ___lwmod *****************
  5180 ;; Defined at:
  5181 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  5182 ;; Parameters:    Size  Location     Type
  5183 ;;  dividend        2   44[COMRAM] unsigned int 
  5184 ;;  divisor         2   46[COMRAM] unsigned int 
  5185 ;; Auto vars:     Size  Location     Type
  5186 ;;  counter         1   48[COMRAM] unsigned char 
  5187 ;; Return value:  Size  Location     Type
  5188 ;;                  2   44[COMRAM] unsigned int 
  5189 ;; Registers used:
  5190 ;;		wreg, status,2, status,0
  5191 ;; Tracked objects:
  5192 ;;		On entry : 0/0
  5193 ;;		On exit  : 0/0
  5194 ;;		Unchanged: 0/0
  5195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5196 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5197 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5199 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5200 ;;Total ram usage:        5 bytes
  5201 ;; Hardware stack levels used:    1
  5202 ;; Hardware stack levels required when called:    5
  5203 ;; This function calls:
  5204 ;;		Nothing
  5205 ;; This function is called by:
  5206 ;;		_printf
  5207 ;; This function uses a non-reentrant model
  5208 ;;
  5209                           
  5210                           	psect	text22
  5211  0016BA                     __ptext22:
  5212                           	opt stack 0
  5213  0016BA                     ___lwmod:
  5214                           	opt stack 22
  5215                           
  5216                           ;incstack = 0
  5217  0016BA  502F               	movf	___lwmod@divisor,w,c
  5218  0016BC  1030               	iorwf	___lwmod@divisor+1,w,c
  5219  0016BE  B4D8               	btfsc	status,2,c
  5220  0016C0  D018               	goto	l820
  5221  0016C2  0E01               	movlw	1
  5222  0016C4  6E31               	movwf	___lwmod@counter,c
  5223  0016C6  D004               	goto	l3781
  5224  0016C8                     l3779:
  5225  0016C8  90D8               	bcf	status,0,c
  5226  0016CA  362F               	rlcf	___lwmod@divisor,f,c
  5227  0016CC  3630               	rlcf	___lwmod@divisor+1,f,c
  5228  0016CE  2A31               	incf	___lwmod@counter,f,c
  5229  0016D0                     l3781:
  5230  0016D0  AE30               	btfss	___lwmod@divisor+1,7,c
  5231  0016D2  D7FA               	goto	l3779
  5232  0016D4                     l3783:
  5233  0016D4  502F               	movf	___lwmod@divisor,w,c
  5234  0016D6  5C2D               	subwf	___lwmod@dividend,w,c
  5235  0016D8  5030               	movf	___lwmod@divisor+1,w,c
  5236  0016DA  582E               	subwfb	___lwmod@dividend+1,w,c
  5237  0016DC  A0D8               	btfss	status,0,c
  5238  0016DE  D004               	goto	l3787
  5239  0016E0  502F               	movf	___lwmod@divisor,w,c
  5240  0016E2  5E2D               	subwf	___lwmod@dividend,f,c
  5241  0016E4  5030               	movf	___lwmod@divisor+1,w,c
  5242  0016E6  5A2E               	subwfb	___lwmod@dividend+1,f,c
  5243  0016E8                     l3787:
  5244  0016E8  90D8               	bcf	status,0,c
  5245  0016EA  3230               	rrcf	___lwmod@divisor+1,f,c
  5246  0016EC  322F               	rrcf	___lwmod@divisor,f,c
  5247  0016EE  2E31               	decfsz	___lwmod@counter,f,c
  5248  0016F0  D7F1               	goto	l3783
  5249  0016F2                     l820:
  5250  0016F2  C02D  F02D         	movff	___lwmod@dividend,?___lwmod
  5251  0016F6  C02E  F02E         	movff	___lwmod@dividend+1,?___lwmod+1
  5252  0016FA  0012               	return		;funcret
  5253  0016FC                     __end_of___lwmod:
  5254                           	opt stack 0
  5255                           tblptru	equ	0xFF8
  5256                           tblptrh	equ	0xFF7
  5257                           tblptrl	equ	0xFF6
  5258                           tablat	equ	0xFF5
  5259                           prodh	equ	0xFF4
  5260                           prodl	equ	0xFF3
  5261                           intcon	equ	0xFF2
  5262                           intcon3	equ	0xFF0
  5263                           postinc0	equ	0xFEE
  5264                           wreg	equ	0xFE8
  5265                           plusw1	equ	0xFE3
  5266                           postinc2	equ	0xFDE
  5267                           postdec2	equ	0xFDD
  5268                           plusw2	equ	0xFDB
  5269                           fsr2h	equ	0xFDA
  5270                           fsr2l	equ	0xFD9
  5271                           status	equ	0xFD8
  5272                           
  5273 ;; *************** function ___lwdiv *****************
  5274 ;; Defined at:
  5275 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  5276 ;; Parameters:    Size  Location     Type
  5277 ;;  dividend        2   37[COMRAM] unsigned int 
  5278 ;;  divisor         2   39[COMRAM] unsigned int 
  5279 ;; Auto vars:     Size  Location     Type
  5280 ;;  quotient        2   42[COMRAM] unsigned int 
  5281 ;;  counter         1   41[COMRAM] unsigned char 
  5282 ;; Return value:  Size  Location     Type
  5283 ;;                  2   37[COMRAM] unsigned int 
  5284 ;; Registers used:
  5285 ;;		wreg, status,2, status,0
  5286 ;; Tracked objects:
  5287 ;;		On entry : 0/0
  5288 ;;		On exit  : 0/0
  5289 ;;		Unchanged: 0/0
  5290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5291 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5292 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5294 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5295 ;;Total ram usage:        7 bytes
  5296 ;; Hardware stack levels used:    1
  5297 ;; Hardware stack levels required when called:    5
  5298 ;; This function calls:
  5299 ;;		Nothing
  5300 ;; This function is called by:
  5301 ;;		_printf
  5302 ;; This function uses a non-reentrant model
  5303 ;;
  5304                           
  5305                           	psect	text23
  5306  001582                     __ptext23:
  5307                           	opt stack 0
  5308  001582                     ___lwdiv:
  5309                           	opt stack 22
  5310                           
  5311                           ;incstack = 0
  5312  001582  0E00               	movlw	0
  5313  001584  6E2C               	movwf	___lwdiv@quotient+1,c
  5314  001586  0E00               	movlw	0
  5315  001588  6E2B               	movwf	___lwdiv@quotient,c
  5316  00158A  5028               	movf	___lwdiv@divisor,w,c
  5317  00158C  1029               	iorwf	___lwdiv@divisor+1,w,c
  5318  00158E  B4D8               	btfsc	status,2,c
  5319  001590  D01C               	goto	l810
  5320  001592  0E01               	movlw	1
  5321  001594  6E2A               	movwf	___lwdiv@counter,c
  5322  001596  D004               	goto	l3761
  5323  001598                     l3759:
  5324  001598  90D8               	bcf	status,0,c
  5325  00159A  3628               	rlcf	___lwdiv@divisor,f,c
  5326  00159C  3629               	rlcf	___lwdiv@divisor+1,f,c
  5327  00159E  2A2A               	incf	___lwdiv@counter,f,c
  5328  0015A0                     l3761:
  5329  0015A0  AE29               	btfss	___lwdiv@divisor+1,7,c
  5330  0015A2  D7FA               	goto	l3759
  5331  0015A4                     l3763:
  5332  0015A4  90D8               	bcf	status,0,c
  5333  0015A6  362B               	rlcf	___lwdiv@quotient,f,c
  5334  0015A8  362C               	rlcf	___lwdiv@quotient+1,f,c
  5335  0015AA  5028               	movf	___lwdiv@divisor,w,c
  5336  0015AC  5C26               	subwf	___lwdiv@dividend,w,c
  5337  0015AE  5029               	movf	___lwdiv@divisor+1,w,c
  5338  0015B0  5827               	subwfb	___lwdiv@dividend+1,w,c
  5339  0015B2  A0D8               	btfss	status,0,c
  5340  0015B4  D005               	goto	l3771
  5341  0015B6  5028               	movf	___lwdiv@divisor,w,c
  5342  0015B8  5E26               	subwf	___lwdiv@dividend,f,c
  5343  0015BA  5029               	movf	___lwdiv@divisor+1,w,c
  5344  0015BC  5A27               	subwfb	___lwdiv@dividend+1,f,c
  5345  0015BE  802B               	bsf	___lwdiv@quotient,0,c
  5346  0015C0                     l3771:
  5347  0015C0  90D8               	bcf	status,0,c
  5348  0015C2  3229               	rrcf	___lwdiv@divisor+1,f,c
  5349  0015C4  3228               	rrcf	___lwdiv@divisor,f,c
  5350  0015C6  2E2A               	decfsz	___lwdiv@counter,f,c
  5351  0015C8  D7ED               	goto	l3763
  5352  0015CA                     l810:
  5353  0015CA  C02B  F026         	movff	___lwdiv@quotient,?___lwdiv
  5354  0015CE  C02C  F027         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5355  0015D2  0012               	return		;funcret
  5356  0015D4                     __end_of___lwdiv:
  5357                           	opt stack 0
  5358                           tblptru	equ	0xFF8
  5359                           tblptrh	equ	0xFF7
  5360                           tblptrl	equ	0xFF6
  5361                           tablat	equ	0xFF5
  5362                           prodh	equ	0xFF4
  5363                           prodl	equ	0xFF3
  5364                           intcon	equ	0xFF2
  5365                           intcon3	equ	0xFF0
  5366                           postinc0	equ	0xFEE
  5367                           wreg	equ	0xFE8
  5368                           plusw1	equ	0xFE3
  5369                           postinc2	equ	0xFDE
  5370                           postdec2	equ	0xFDD
  5371                           plusw2	equ	0xFDB
  5372                           fsr2h	equ	0xFDA
  5373                           fsr2l	equ	0xFD9
  5374                           status	equ	0xFD8
  5375                           
  5376 ;; *************** function ___ftmul *****************
  5377 ;; Defined at:
  5378 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  5379 ;; Parameters:    Size  Location     Type
  5380 ;;  f1              3   63[COMRAM] float 
  5381 ;;  f2              3   66[COMRAM] float 
  5382 ;; Auto vars:     Size  Location     Type
  5383 ;;  f3_as_produc    3   73[COMRAM] unsigned um
  5384 ;;  sign            1   77[COMRAM] unsigned char 
  5385 ;;  cntr            1   76[COMRAM] unsigned char 
  5386 ;;  exp             1   72[COMRAM] unsigned char 
  5387 ;; Return value:  Size  Location     Type
  5388 ;;                  3   63[COMRAM] float 
  5389 ;; Registers used:
  5390 ;;		wreg, status,2, status,0, cstack
  5391 ;; Tracked objects:
  5392 ;;		On entry : 0/0
  5393 ;;		On exit  : 0/0
  5394 ;;		Unchanged: 0/0
  5395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5396 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5397 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5398 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5399 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5400 ;;Total ram usage:       15 bytes
  5401 ;; Hardware stack levels used:    1
  5402 ;; Hardware stack levels required when called:    6
  5403 ;; This function calls:
  5404 ;;		___ftpack
  5405 ;; This function is called by:
  5406 ;;		_set_PWM1_duty
  5407 ;;		_checkV
  5408 ;;		_set_PWM2_duty
  5409 ;; This function uses a non-reentrant model
  5410 ;;
  5411                           
  5412                           	psect	text24
  5413  000CA4                     __ptext24:
  5414                           	opt stack 0
  5415  000CA4                     ___ftmul:
  5416                           	opt stack 20
  5417                           
  5418                           ;incstack = 0
  5419  000CA4  C042  F046         	movff	___ftmul@f1+2,??___ftmul
  5420  000CA8  6A47               	clrf	(??___ftmul+1)& (0+255),c
  5421  000CAA  6A48               	clrf	(??___ftmul+2)& (0+255),c
  5422  000CAC  3441               	rlcf	___ftmul@f1+1,w,c
  5423  000CAE  3646               	rlcf	??___ftmul& (0+255),f,c
  5424  000CB0  E301               	bnc	u2401
  5425  000CB2  8047               	bsf	(??___ftmul+1)& (0+255),0,c
  5426  000CB4                     u2401:
  5427  000CB4  5046               	movf	??___ftmul,w,c
  5428  000CB6  6E49               	movwf	___ftmul@exp,c
  5429  000CB8  5049               	movf	___ftmul@exp,w,c
  5430  000CBA  A4D8               	btfss	status,2,c
  5431  000CBC  D007               	goto	l3653
  5432  000CBE  0E00               	movlw	0
  5433  000CC0  6E40               	movwf	?___ftmul,c
  5434  000CC2  0E00               	movlw	0
  5435  000CC4  6E41               	movwf	?___ftmul+1,c
  5436  000CC6  0E00               	movlw	0
  5437  000CC8  6E42               	movwf	?___ftmul+2,c
  5438  000CCA  0012               	return	
  5439  000CCC                     l3653:
  5440  000CCC  C045  F046         	movff	___ftmul@f2+2,??___ftmul
  5441  000CD0  6A47               	clrf	(??___ftmul+1)& (0+255),c
  5442  000CD2  6A48               	clrf	(??___ftmul+2)& (0+255),c
  5443  000CD4  3444               	rlcf	___ftmul@f2+1,w,c
  5444  000CD6  3646               	rlcf	??___ftmul& (0+255),f,c
  5445  000CD8  E301               	bnc	u2421
  5446  000CDA  8047               	bsf	(??___ftmul+1)& (0+255),0,c
  5447  000CDC                     u2421:
  5448  000CDC  5046               	movf	??___ftmul,w,c
  5449  000CDE  6E4E               	movwf	___ftmul@sign,c
  5450  000CE0  504E               	movf	___ftmul@sign,w,c
  5451  000CE2  A4D8               	btfss	status,2,c
  5452  000CE4  D007               	goto	l3659
  5453  000CE6  0E00               	movlw	0
  5454  000CE8  6E40               	movwf	?___ftmul,c
  5455  000CEA  0E00               	movlw	0
  5456  000CEC  6E41               	movwf	?___ftmul+1,c
  5457  000CEE  0E00               	movlw	0
  5458  000CF0  6E42               	movwf	?___ftmul+2,c
  5459  000CF2  0012               	return	
  5460  000CF4                     l3659:
  5461  000CF4  504E               	movf	___ftmul@sign,w,c
  5462  000CF6  0F7B               	addlw	123
  5463  000CF8  2649               	addwf	___ftmul@exp,f,c
  5464  000CFA  C042  F04E         	movff	___ftmul@f1+2,___ftmul@sign
  5465  000CFE  5045               	movf	___ftmul@f2+2,w,c
  5466  000D00  1A4E               	xorwf	___ftmul@sign,f,c
  5467  000D02  0E80               	movlw	128
  5468  000D04  164E               	andwf	___ftmul@sign,f,c
  5469  000D06  8E41               	bsf	___ftmul@f1+1,7,c
  5470  000D08  8E44               	bsf	___ftmul@f2+1,7,c
  5471  000D0A  0EFF               	movlw	255
  5472  000D0C  1643               	andwf	___ftmul@f2,f,c
  5473  000D0E  0EFF               	movlw	255
  5474  000D10  1644               	andwf	___ftmul@f2+1,f,c
  5475  000D12  0E00               	movlw	0
  5476  000D14  1645               	andwf	___ftmul@f2+2,f,c
  5477  000D16  0E00               	movlw	0
  5478  000D18  6E4A               	movwf	___ftmul@f3_as_product,c
  5479  000D1A  0E00               	movlw	0
  5480  000D1C  6E4B               	movwf	___ftmul@f3_as_product+1,c
  5481  000D1E  0E00               	movlw	0
  5482  000D20  6E4C               	movwf	___ftmul@f3_as_product+2,c
  5483  000D22  0E07               	movlw	7
  5484  000D24  6E4D               	movwf	___ftmul@cntr,c
  5485  000D26                     l3673:
  5486  000D26  A040               	btfss	___ftmul@f1,0,c
  5487  000D28  D006               	goto	l3677
  5488  000D2A  5043               	movf	___ftmul@f2,w,c
  5489  000D2C  264A               	addwf	___ftmul@f3_as_product,f,c
  5490  000D2E  5044               	movf	___ftmul@f2+1,w,c
  5491  000D30  224B               	addwfc	___ftmul@f3_as_product+1,f,c
  5492  000D32  5045               	movf	___ftmul@f2+2,w,c
  5493  000D34  224C               	addwfc	___ftmul@f3_as_product+2,f,c
  5494  000D36                     l3677:
  5495  000D36  90D8               	bcf	status,0,c
  5496  000D38  3242               	rrcf	___ftmul@f1+2,f,c
  5497  000D3A  3241               	rrcf	___ftmul@f1+1,f,c
  5498  000D3C  3240               	rrcf	___ftmul@f1,f,c
  5499  000D3E  90D8               	bcf	status,0,c
  5500  000D40  3643               	rlcf	___ftmul@f2,f,c
  5501  000D42  3644               	rlcf	___ftmul@f2+1,f,c
  5502  000D44  3645               	rlcf	___ftmul@f2+2,f,c
  5503  000D46  2E4D               	decfsz	___ftmul@cntr,f,c
  5504  000D48  D7EE               	goto	l3673
  5505  000D4A  0E09               	movlw	9
  5506  000D4C  6E4D               	movwf	___ftmul@cntr,c
  5507  000D4E                     l3683:
  5508  000D4E  A040               	btfss	___ftmul@f1,0,c
  5509  000D50  D006               	goto	l3687
  5510  000D52  5043               	movf	___ftmul@f2,w,c
  5511  000D54  264A               	addwf	___ftmul@f3_as_product,f,c
  5512  000D56  5044               	movf	___ftmul@f2+1,w,c
  5513  000D58  224B               	addwfc	___ftmul@f3_as_product+1,f,c
  5514  000D5A  5045               	movf	___ftmul@f2+2,w,c
  5515  000D5C  224C               	addwfc	___ftmul@f3_as_product+2,f,c
  5516  000D5E                     l3687:
  5517  000D5E  90D8               	bcf	status,0,c
  5518  000D60  3242               	rrcf	___ftmul@f1+2,f,c
  5519  000D62  3241               	rrcf	___ftmul@f1+1,f,c
  5520  000D64  3240               	rrcf	___ftmul@f1,f,c
  5521  000D66  90D8               	bcf	status,0,c
  5522  000D68  324C               	rrcf	___ftmul@f3_as_product+2,f,c
  5523  000D6A  324B               	rrcf	___ftmul@f3_as_product+1,f,c
  5524  000D6C  324A               	rrcf	___ftmul@f3_as_product,f,c
  5525  000D6E  2E4D               	decfsz	___ftmul@cntr,f,c
  5526  000D70  D7EE               	goto	l3683
  5527  000D72  C04A  F026         	movff	___ftmul@f3_as_product,___ftpack@arg
  5528  000D76  C04B  F027         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5529  000D7A  C04C  F028         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5530  000D7E  C049  F029         	movff	___ftmul@exp,___ftpack@exp
  5531  000D82  C04E  F02A         	movff	___ftmul@sign,___ftpack@sign
  5532  000D86  ECDE  F008         	call	___ftpack	;wreg free
  5533  000D8A  C026  F040         	movff	?___ftpack,?___ftmul
  5534  000D8E  C027  F041         	movff	?___ftpack+1,?___ftmul+1
  5535  000D92  C028  F042         	movff	?___ftpack+2,?___ftmul+2
  5536  000D96  0012               	return	
  5537  000D98                     __end_of___ftmul:
  5538                           	opt stack 0
  5539                           tblptru	equ	0xFF8
  5540                           tblptrh	equ	0xFF7
  5541                           tblptrl	equ	0xFF6
  5542                           tablat	equ	0xFF5
  5543                           prodh	equ	0xFF4
  5544                           prodl	equ	0xFF3
  5545                           intcon	equ	0xFF2
  5546                           intcon3	equ	0xFF0
  5547                           postinc0	equ	0xFEE
  5548                           wreg	equ	0xFE8
  5549                           plusw1	equ	0xFE3
  5550                           postinc2	equ	0xFDE
  5551                           postdec2	equ	0xFDD
  5552                           plusw2	equ	0xFDB
  5553                           fsr2h	equ	0xFDA
  5554                           fsr2l	equ	0xFD9
  5555                           status	equ	0xFD8
  5556                           
  5557 ;; *************** function ___ftge *****************
  5558 ;; Defined at:
  5559 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
  5560 ;; Parameters:    Size  Location     Type
  5561 ;;  ff1             3    0[BANK0 ] float 
  5562 ;;  ff2             3    3[BANK0 ] float 
  5563 ;; Auto vars:     Size  Location     Type
  5564 ;;		None
  5565 ;; Return value:  Size  Location     Type
  5566 ;;		None               void
  5567 ;; Registers used:
  5568 ;;		wreg, status,2, status,0
  5569 ;; Tracked objects:
  5570 ;;		On entry : 0/0
  5571 ;;		On exit  : 0/0
  5572 ;;		Unchanged: 0/0
  5573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5574 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5576 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5577 ;;      Totals:         3       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5578 ;;Total ram usage:        9 bytes
  5579 ;; Hardware stack levels used:    1
  5580 ;; Hardware stack levels required when called:    5
  5581 ;; This function calls:
  5582 ;;		Nothing
  5583 ;; This function is called by:
  5584 ;;		_checkV
  5585 ;; This function uses a non-reentrant model
  5586 ;;
  5587                           
  5588                           	psect	text25
  5589  001104                     __ptext25:
  5590                           	opt stack 0
  5591  001104                     ___ftge:
  5592                           	opt stack 22
  5593                           
  5594                           ;incstack = 0
  5595  001104  0100               	movlb	0	; () banked
  5596  001106  AF82               	btfss	(___ftge@ff1+2)& (0+255),7,b
  5597  001108  D019               	goto	l3865
  5598                           
  5599                           ; BSR set to: 0
  5600  00110A  C080  F04F         	movff	___ftge@ff1,??___ftge
  5601  00110E  C081  F050         	movff	___ftge@ff1+1,??___ftge+1
  5602  001112  C082  F051         	movff	___ftge@ff1+2,??___ftge+2
  5603  001116  1E4F               	comf	??___ftge,f,c
  5604  001118  1E50               	comf	??___ftge+1,f,c
  5605  00111A  1E51               	comf	??___ftge+2,f,c
  5606  00111C  2A4F               	incf	??___ftge,f,c
  5607  00111E  0E00               	movlw	0
  5608  001120  2250               	addwfc	??___ftge+1,f,c
  5609  001122  2251               	addwfc	??___ftge+2,f,c
  5610  001124  0E00               	movlw	0
  5611  001126  244F               	addwf	??___ftge,w,c
  5612  001128  0100               	movlb	0	; () banked
  5613  00112A  6F80               	movwf	___ftge@ff1& (0+255),b
  5614  00112C  0E00               	movlw	0
  5615  00112E  2050               	addwfc	??___ftge+1,w,c
  5616  001130  0100               	movlb	0	; () banked
  5617  001132  6F81               	movwf	(___ftge@ff1+1)& (0+255),b
  5618  001134  0E80               	movlw	128
  5619  001136  2051               	addwfc	??___ftge+2,w,c
  5620  001138  0100               	movlb	0	; () banked
  5621  00113A  6F82               	movwf	(___ftge@ff1+2)& (0+255),b
  5622  00113C                     l3865:
  5623                           
  5624                           ; BSR set to: 0
  5625  00113C  0100               	movlb	0	; () banked
  5626  00113E  AF85               	btfss	(___ftge@ff2+2)& (0+255),7,b
  5627  001140  D019               	goto	l3869
  5628                           
  5629                           ; BSR set to: 0
  5630  001142  C083  F04F         	movff	___ftge@ff2,??___ftge
  5631  001146  C084  F050         	movff	___ftge@ff2+1,??___ftge+1
  5632  00114A  C085  F051         	movff	___ftge@ff2+2,??___ftge+2
  5633  00114E  1E4F               	comf	??___ftge,f,c
  5634  001150  1E50               	comf	??___ftge+1,f,c
  5635  001152  1E51               	comf	??___ftge+2,f,c
  5636  001154  2A4F               	incf	??___ftge,f,c
  5637  001156  0E00               	movlw	0
  5638  001158  2250               	addwfc	??___ftge+1,f,c
  5639  00115A  2251               	addwfc	??___ftge+2,f,c
  5640  00115C  0E00               	movlw	0
  5641  00115E  244F               	addwf	??___ftge,w,c
  5642  001160  0100               	movlb	0	; () banked
  5643  001162  6F83               	movwf	___ftge@ff2& (0+255),b
  5644  001164  0E00               	movlw	0
  5645  001166  2050               	addwfc	??___ftge+1,w,c
  5646  001168  0100               	movlb	0	; () banked
  5647  00116A  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  5648  00116C  0E80               	movlw	128
  5649  00116E  2051               	addwfc	??___ftge+2,w,c
  5650  001170  0100               	movlb	0	; () banked
  5651  001172  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  5652  001174                     l3869:
  5653                           
  5654                           ; BSR set to: 0
  5655  001174  0E00               	movlw	0
  5656  001176  0100               	movlb	0	; () banked
  5657  001178  1B80               	xorwf	___ftge@ff1& (0+255),f,b
  5658  00117A  0E00               	movlw	0
  5659  00117C  0100               	movlb	0	; () banked
  5660  00117E  1B81               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  5661  001180  0E80               	movlw	128
  5662  001182  0100               	movlb	0	; () banked
  5663  001184  1B82               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  5664                           
  5665                           ; BSR set to: 0
  5666  001186  0E00               	movlw	0
  5667  001188  0100               	movlb	0	; () banked
  5668  00118A  1B83               	xorwf	___ftge@ff2& (0+255),f,b
  5669  00118C  0E00               	movlw	0
  5670  00118E  0100               	movlb	0	; () banked
  5671  001190  1B84               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  5672  001192  0E80               	movlw	128
  5673  001194  0100               	movlb	0	; () banked
  5674  001196  1B85               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  5675  001198  0100               	movlb	0	; () banked
  5676  00119A  5183               	movf	___ftge@ff2& (0+255),w,b
  5677  00119C  0100               	movlb	0	; () banked
  5678  00119E  5D80               	subwf	___ftge@ff1& (0+255),w,b
  5679  0011A0  0100               	movlb	0	; () banked
  5680  0011A2  5184               	movf	(___ftge@ff2+1)& (0+255),w,b
  5681  0011A4  0100               	movlb	0	; () banked
  5682  0011A6  5981               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  5683  0011A8  0100               	movlb	0	; () banked
  5684  0011AA  5185               	movf	(___ftge@ff2+2)& (0+255),w,b
  5685  0011AC  0100               	movlb	0	; () banked
  5686  0011AE  5982               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  5687  0011B0  B0D8               	btfsc	status,0,c
  5688  0011B2  D002               	goto	l3875
  5689                           
  5690                           ; BSR set to: 0
  5691  0011B4  90D8               	bcf	status,0,c
  5692  0011B6  0012               	return	
  5693  0011B8                     l3875:
  5694                           
  5695                           ; BSR set to: 0
  5696  0011B8  80D8               	bsf	status,0,c
  5697                           
  5698                           ; BSR set to: 0
  5699  0011BA  0012               	return	
  5700  0011BC                     __end_of___ftge:
  5701                           	opt stack 0
  5702                           tblptru	equ	0xFF8
  5703                           tblptrh	equ	0xFF7
  5704                           tblptrl	equ	0xFF6
  5705                           tablat	equ	0xFF5
  5706                           prodh	equ	0xFF4
  5707                           prodl	equ	0xFF3
  5708                           intcon	equ	0xFF2
  5709                           intcon3	equ	0xFF0
  5710                           postinc0	equ	0xFEE
  5711                           wreg	equ	0xFE8
  5712                           plusw1	equ	0xFE3
  5713                           postinc2	equ	0xFDE
  5714                           postdec2	equ	0xFDD
  5715                           plusw2	equ	0xFDB
  5716                           fsr2h	equ	0xFDA
  5717                           fsr2l	equ	0xFD9
  5718                           status	equ	0xFD8
  5719                           
  5720 ;; *************** function ___ftdiv *****************
  5721 ;; Defined at:
  5722 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdiv.c"
  5723 ;; Parameters:    Size  Location     Type
  5724 ;;  f1              3   48[COMRAM] float 
  5725 ;;  f2              3   51[COMRAM] float 
  5726 ;; Auto vars:     Size  Location     Type
  5727 ;;  f3              3   58[COMRAM] float 
  5728 ;;  sign            1   62[COMRAM] unsigned char 
  5729 ;;  exp             1   61[COMRAM] unsigned char 
  5730 ;;  cntr            1   57[COMRAM] unsigned char 
  5731 ;; Return value:  Size  Location     Type
  5732 ;;                  3   48[COMRAM] float 
  5733 ;; Registers used:
  5734 ;;		wreg, status,2, status,0, cstack
  5735 ;; Tracked objects:
  5736 ;;		On entry : 0/0
  5737 ;;		On exit  : 0/0
  5738 ;;		Unchanged: 0/0
  5739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5740 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5741 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5742 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5743 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5744 ;;Total ram usage:       15 bytes
  5745 ;; Hardware stack levels used:    1
  5746 ;; Hardware stack levels required when called:    6
  5747 ;; This function calls:
  5748 ;;		___ftpack
  5749 ;; This function is called by:
  5750 ;;		_set_PWM1_duty
  5751 ;;		_checkV
  5752 ;;		_set_PWM2_duty
  5753 ;; This function uses a non-reentrant model
  5754 ;;
  5755                           
  5756                           	psect	text26
  5757  000D98                     __ptext26:
  5758                           	opt stack 0
  5759  000D98                     ___ftdiv:
  5760                           	opt stack 20
  5761                           
  5762                           ; BSR set to: 0
  5763                           ;incstack = 0
  5764  000D98  C033  F037         	movff	___ftdiv@f1+2,??___ftdiv
  5765  000D9C  6A38               	clrf	(??___ftdiv+1)& (0+255),c
  5766  000D9E  6A39               	clrf	(??___ftdiv+2)& (0+255),c
  5767  000DA0  3432               	rlcf	___ftdiv@f1+1,w,c
  5768  000DA2  3637               	rlcf	??___ftdiv& (0+255),f,c
  5769  000DA4  E301               	bnc	u2351
  5770  000DA6  8038               	bsf	(??___ftdiv+1)& (0+255),0,c
  5771  000DA8                     u2351:
  5772  000DA8  5037               	movf	??___ftdiv,w,c
  5773  000DAA  6E3E               	movwf	___ftdiv@exp,c
  5774  000DAC  503E               	movf	___ftdiv@exp,w,c
  5775  000DAE  A4D8               	btfss	status,2,c
  5776  000DB0  D007               	goto	l3607
  5777  000DB2  0E00               	movlw	0
  5778  000DB4  6E31               	movwf	?___ftdiv,c
  5779  000DB6  0E00               	movlw	0
  5780  000DB8  6E32               	movwf	?___ftdiv+1,c
  5781  000DBA  0E00               	movlw	0
  5782  000DBC  6E33               	movwf	?___ftdiv+2,c
  5783  000DBE  0012               	return	
  5784  000DC0                     l3607:
  5785  000DC0  C036  F037         	movff	___ftdiv@f2+2,??___ftdiv
  5786  000DC4  6A38               	clrf	(??___ftdiv+1)& (0+255),c
  5787  000DC6  6A39               	clrf	(??___ftdiv+2)& (0+255),c
  5788  000DC8  3435               	rlcf	___ftdiv@f2+1,w,c
  5789  000DCA  3637               	rlcf	??___ftdiv& (0+255),f,c
  5790  000DCC  E301               	bnc	u2371
  5791  000DCE  8038               	bsf	(??___ftdiv+1)& (0+255),0,c
  5792  000DD0                     u2371:
  5793  000DD0  5037               	movf	??___ftdiv,w,c
  5794  000DD2  6E3F               	movwf	___ftdiv@sign,c
  5795  000DD4  503F               	movf	___ftdiv@sign,w,c
  5796  000DD6  A4D8               	btfss	status,2,c
  5797  000DD8  D007               	goto	l3613
  5798  000DDA  0E00               	movlw	0
  5799  000DDC  6E31               	movwf	?___ftdiv,c
  5800  000DDE  0E00               	movlw	0
  5801  000DE0  6E32               	movwf	?___ftdiv+1,c
  5802  000DE2  0E00               	movlw	0
  5803  000DE4  6E33               	movwf	?___ftdiv+2,c
  5804  000DE6  0012               	return	
  5805  000DE8                     l3613:
  5806  000DE8  0E00               	movlw	0
  5807  000DEA  6E3B               	movwf	___ftdiv@f3,c
  5808  000DEC  0E00               	movlw	0
  5809  000DEE  6E3C               	movwf	___ftdiv@f3+1,c
  5810  000DF0  0E00               	movlw	0
  5811  000DF2  6E3D               	movwf	___ftdiv@f3+2,c
  5812  000DF4  503F               	movf	___ftdiv@sign,w,c
  5813  000DF6  0F89               	addlw	137
  5814  000DF8  5E3E               	subwf	___ftdiv@exp,f,c
  5815  000DFA  C033  F03F         	movff	___ftdiv@f1+2,___ftdiv@sign
  5816  000DFE  5036               	movf	___ftdiv@f2+2,w,c
  5817  000E00  1A3F               	xorwf	___ftdiv@sign,f,c
  5818  000E02  0E80               	movlw	128
  5819  000E04  163F               	andwf	___ftdiv@sign,f,c
  5820  000E06  8E32               	bsf	___ftdiv@f1+1,7,c
  5821  000E08  0EFF               	movlw	255
  5822  000E0A  1631               	andwf	___ftdiv@f1,f,c
  5823  000E0C  0EFF               	movlw	255
  5824  000E0E  1632               	andwf	___ftdiv@f1+1,f,c
  5825  000E10  0E00               	movlw	0
  5826  000E12  1633               	andwf	___ftdiv@f1+2,f,c
  5827  000E14  8E35               	bsf	___ftdiv@f2+1,7,c
  5828  000E16  0EFF               	movlw	255
  5829  000E18  1634               	andwf	___ftdiv@f2,f,c
  5830  000E1A  0EFF               	movlw	255
  5831  000E1C  1635               	andwf	___ftdiv@f2+1,f,c
  5832  000E1E  0E00               	movlw	0
  5833  000E20  1636               	andwf	___ftdiv@f2+2,f,c
  5834  000E22  0E18               	movlw	24
  5835  000E24  6E3A               	movwf	___ftdiv@cntr,c
  5836  000E26                     l3633:
  5837  000E26  90D8               	bcf	status,0,c
  5838  000E28  363B               	rlcf	___ftdiv@f3,f,c
  5839  000E2A  363C               	rlcf	___ftdiv@f3+1,f,c
  5840  000E2C  363D               	rlcf	___ftdiv@f3+2,f,c
  5841  000E2E  5034               	movf	___ftdiv@f2,w,c
  5842  000E30  5C31               	subwf	___ftdiv@f1,w,c
  5843  000E32  5035               	movf	___ftdiv@f2+1,w,c
  5844  000E34  5832               	subwfb	___ftdiv@f1+1,w,c
  5845  000E36  5036               	movf	___ftdiv@f2+2,w,c
  5846  000E38  5833               	subwfb	___ftdiv@f1+2,w,c
  5847  000E3A  A0D8               	btfss	status,0,c
  5848  000E3C  D007               	goto	l690
  5849  000E3E  5034               	movf	___ftdiv@f2,w,c
  5850  000E40  5E31               	subwf	___ftdiv@f1,f,c
  5851  000E42  5035               	movf	___ftdiv@f2+1,w,c
  5852  000E44  5A32               	subwfb	___ftdiv@f1+1,f,c
  5853  000E46  5036               	movf	___ftdiv@f2+2,w,c
  5854  000E48  5A33               	subwfb	___ftdiv@f1+2,f,c
  5855  000E4A  803B               	bsf	___ftdiv@f3,0,c
  5856  000E4C                     l690:
  5857  000E4C  90D8               	bcf	status,0,c
  5858  000E4E  3631               	rlcf	___ftdiv@f1,f,c
  5859  000E50  3632               	rlcf	___ftdiv@f1+1,f,c
  5860  000E52  3633               	rlcf	___ftdiv@f1+2,f,c
  5861  000E54  2E3A               	decfsz	___ftdiv@cntr,f,c
  5862  000E56  D7E7               	goto	l3633
  5863  000E58  C03B  F026         	movff	___ftdiv@f3,___ftpack@arg
  5864  000E5C  C03C  F027         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5865  000E60  C03D  F028         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5866  000E64  C03E  F029         	movff	___ftdiv@exp,___ftpack@exp
  5867  000E68  C03F  F02A         	movff	___ftdiv@sign,___ftpack@sign
  5868  000E6C  ECDE  F008         	call	___ftpack	;wreg free
  5869  000E70  C026  F031         	movff	?___ftpack,?___ftdiv
  5870  000E74  C027  F032         	movff	?___ftpack+1,?___ftdiv+1
  5871  000E78  C028  F033         	movff	?___ftpack+2,?___ftdiv+2
  5872  000E7C  0012               	return	
  5873  000E7E                     __end_of___ftdiv:
  5874                           	opt stack 0
  5875                           tblptru	equ	0xFF8
  5876                           tblptrh	equ	0xFF7
  5877                           tblptrl	equ	0xFF6
  5878                           tablat	equ	0xFF5
  5879                           prodh	equ	0xFF4
  5880                           prodl	equ	0xFF3
  5881                           intcon	equ	0xFF2
  5882                           intcon3	equ	0xFF0
  5883                           postinc0	equ	0xFEE
  5884                           wreg	equ	0xFE8
  5885                           plusw1	equ	0xFE3
  5886                           postinc2	equ	0xFDE
  5887                           postdec2	equ	0xFDD
  5888                           plusw2	equ	0xFDB
  5889                           fsr2h	equ	0xFDA
  5890                           fsr2l	equ	0xFD9
  5891                           status	equ	0xFD8
  5892                           
  5893 ;; *************** function ___awtoft *****************
  5894 ;; Defined at:
  5895 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awtoft.c"
  5896 ;; Parameters:    Size  Location     Type
  5897 ;;  c               2   45[COMRAM] int 
  5898 ;; Auto vars:     Size  Location     Type
  5899 ;;  sign            1   48[COMRAM] unsigned char 
  5900 ;; Return value:  Size  Location     Type
  5901 ;;                  3   45[COMRAM] float 
  5902 ;; Registers used:
  5903 ;;		wreg, status,2, status,0, cstack
  5904 ;; Tracked objects:
  5905 ;;		On entry : 0/0
  5906 ;;		On exit  : 0/0
  5907 ;;		Unchanged: 0/0
  5908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5909 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5910 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5912 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5913 ;;Total ram usage:        4 bytes
  5914 ;; Hardware stack levels used:    1
  5915 ;; Hardware stack levels required when called:    6
  5916 ;; This function calls:
  5917 ;;		___ftpack
  5918 ;; This function is called by:
  5919 ;;		_set_PWM1_duty
  5920 ;;		_checkV
  5921 ;;		_set_PWM2_duty
  5922 ;; This function uses a non-reentrant model
  5923 ;;
  5924                           
  5925                           	psect	text27
  5926  0017B8                     __ptext27:
  5927                           	opt stack 0
  5928  0017B8                     ___awtoft:
  5929                           	opt stack 20
  5930                           
  5931                           ;incstack = 0
  5932  0017B8  0E00               	movlw	0
  5933  0017BA  6E31               	movwf	___awtoft@sign,c
  5934  0017BC  AE2F               	btfss	___awtoft@c+1,7,c
  5935  0017BE  D006               	goto	l3703
  5936  0017C0  6C2E               	negf	___awtoft@c,c
  5937  0017C2  1E2F               	comf	___awtoft@c+1,f,c
  5938  0017C4  B0D8               	btfsc	status,0,c
  5939  0017C6  2A2F               	incf	___awtoft@c+1,f,c
  5940  0017C8  0E01               	movlw	1
  5941  0017CA  6E31               	movwf	___awtoft@sign,c
  5942  0017CC                     l3703:
  5943  0017CC  C02E  F026         	movff	___awtoft@c,___ftpack@arg
  5944  0017D0  C02F  F027         	movff	___awtoft@c+1,___ftpack@arg+1
  5945  0017D4  6A28               	clrf	___ftpack@arg+2,c
  5946  0017D6  0E8E               	movlw	142
  5947  0017D8  6E29               	movwf	___ftpack@exp,c
  5948  0017DA  C031  F02A         	movff	___awtoft@sign,___ftpack@sign
  5949  0017DE  ECDE  F008         	call	___ftpack	;wreg free
  5950  0017E2  C026  F02E         	movff	?___ftpack,?___awtoft
  5951  0017E6  C027  F02F         	movff	?___ftpack+1,?___awtoft+1
  5952  0017EA  C028  F030         	movff	?___ftpack+2,?___awtoft+2
  5953  0017EE  0012               	return	
  5954  0017F0                     __end_of___awtoft:
  5955                           	opt stack 0
  5956                           tblptru	equ	0xFF8
  5957                           tblptrh	equ	0xFF7
  5958                           tblptrl	equ	0xFF6
  5959                           tablat	equ	0xFF5
  5960                           prodh	equ	0xFF4
  5961                           prodl	equ	0xFF3
  5962                           intcon	equ	0xFF2
  5963                           intcon3	equ	0xFF0
  5964                           postinc0	equ	0xFEE
  5965                           wreg	equ	0xFE8
  5966                           plusw1	equ	0xFE3
  5967                           postinc2	equ	0xFDE
  5968                           postdec2	equ	0xFDD
  5969                           plusw2	equ	0xFDB
  5970                           fsr2h	equ	0xFDA
  5971                           fsr2l	equ	0xFD9
  5972                           status	equ	0xFD8
  5973                           
  5974 ;; *************** function ___ftpack *****************
  5975 ;; Defined at:
  5976 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  5977 ;; Parameters:    Size  Location     Type
  5978 ;;  arg             3   37[COMRAM] unsigned um
  5979 ;;  exp             1   40[COMRAM] unsigned char 
  5980 ;;  sign            1   41[COMRAM] unsigned char 
  5981 ;; Auto vars:     Size  Location     Type
  5982 ;;		None
  5983 ;; Return value:  Size  Location     Type
  5984 ;;                  3   37[COMRAM] float 
  5985 ;; Registers used:
  5986 ;;		wreg, status,2, status,0
  5987 ;; Tracked objects:
  5988 ;;		On entry : 0/0
  5989 ;;		On exit  : 0/0
  5990 ;;		Unchanged: 0/0
  5991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5992 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5994 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5995 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5996 ;;Total ram usage:        8 bytes
  5997 ;; Hardware stack levels used:    1
  5998 ;; Hardware stack levels required when called:    5
  5999 ;; This function calls:
  6000 ;;		Nothing
  6001 ;; This function is called by:
  6002 ;;		___awtoft
  6003 ;;		___ftdiv
  6004 ;;		___ftmul
  6005 ;;		___lwtoft
  6006 ;; This function uses a non-reentrant model
  6007 ;;
  6008                           
  6009                           	psect	text28
  6010  0011BC                     __ptext28:
  6011                           	opt stack 0
  6012  0011BC                     ___ftpack:
  6013                           	opt stack 20
  6014                           
  6015                           ;incstack = 0
  6016  0011BC  5029               	movf	___ftpack@exp,w,c
  6017  0011BE  B4D8               	btfsc	status,2,c
  6018  0011C0  D005               	goto	l3565
  6019  0011C2  5026               	movf	___ftpack@arg,w,c
  6020  0011C4  1027               	iorwf	___ftpack@arg+1,w,c
  6021  0011C6  1028               	iorwf	___ftpack@arg+2,w,c
  6022  0011C8  A4D8               	btfss	status,2,c
  6023  0011CA  D00C               	goto	l3571
  6024  0011CC                     l3565:
  6025  0011CC  0E00               	movlw	0
  6026  0011CE  6E26               	movwf	?___ftpack,c
  6027  0011D0  0E00               	movlw	0
  6028  0011D2  6E27               	movwf	?___ftpack+1,c
  6029  0011D4  0E00               	movlw	0
  6030  0011D6  6E28               	movwf	?___ftpack+2,c
  6031  0011D8  0012               	return	
  6032  0011DA                     l3569:
  6033  0011DA  2A29               	incf	___ftpack@exp,f,c
  6034  0011DC  90D8               	bcf	status,0,c
  6035  0011DE  3228               	rrcf	___ftpack@arg+2,f,c
  6036  0011E0  3227               	rrcf	___ftpack@arg+1,f,c
  6037  0011E2  3226               	rrcf	___ftpack@arg,f,c
  6038  0011E4                     l3571:
  6039  0011E4  0E00               	movlw	0
  6040  0011E6  1426               	andwf	___ftpack@arg,w,c
  6041  0011E8  6E2B               	movwf	??___ftpack& (0+255),c
  6042  0011EA  0E00               	movlw	0
  6043  0011EC  1427               	andwf	___ftpack@arg+1,w,c
  6044  0011EE  6E2C               	movwf	(??___ftpack+1)& (0+255),c
  6045  0011F0  0EFE               	movlw	254
  6046  0011F2  1428               	andwf	___ftpack@arg+2,w,c
  6047  0011F4  6E2D               	movwf	(??___ftpack+2)& (0+255),c
  6048  0011F6  502B               	movf	??___ftpack,w,c
  6049  0011F8  102C               	iorwf	??___ftpack+1,w,c
  6050  0011FA  102D               	iorwf	??___ftpack+2,w,c
  6051  0011FC  B4D8               	btfsc	status,2,c
  6052  0011FE  D00C               	goto	l3577
  6053  001200  D7EC               	goto	l3569
  6054  001202                     l3573:
  6055  001202  2A29               	incf	___ftpack@exp,f,c
  6056  001204  0E01               	movlw	1
  6057  001206  2626               	addwf	___ftpack@arg,f,c
  6058  001208  0E00               	movlw	0
  6059  00120A  2227               	addwfc	___ftpack@arg+1,f,c
  6060  00120C  0E00               	movlw	0
  6061  00120E  2228               	addwfc	___ftpack@arg+2,f,c
  6062  001210  90D8               	bcf	status,0,c
  6063  001212  3228               	rrcf	___ftpack@arg+2,f,c
  6064  001214  3227               	rrcf	___ftpack@arg+1,f,c
  6065  001216  3226               	rrcf	___ftpack@arg,f,c
  6066  001218                     l3577:
  6067  001218  0E00               	movlw	0
  6068  00121A  1426               	andwf	___ftpack@arg,w,c
  6069  00121C  6E2B               	movwf	??___ftpack& (0+255),c
  6070  00121E  0E00               	movlw	0
  6071  001220  1427               	andwf	___ftpack@arg+1,w,c
  6072  001222  6E2C               	movwf	(??___ftpack+1)& (0+255),c
  6073  001224  0EFF               	movlw	255
  6074  001226  1428               	andwf	___ftpack@arg+2,w,c
  6075  001228  6E2D               	movwf	(??___ftpack+2)& (0+255),c
  6076  00122A  502B               	movf	??___ftpack,w,c
  6077  00122C  102C               	iorwf	??___ftpack+1,w,c
  6078  00122E  102D               	iorwf	??___ftpack+2,w,c
  6079  001230  B4D8               	btfsc	status,2,c
  6080  001232  D006               	goto	l3581
  6081  001234  D7E6               	goto	l3573
  6082  001236                     l3579:
  6083  001236  0629               	decf	___ftpack@exp,f,c
  6084  001238  90D8               	bcf	status,0,c
  6085  00123A  3626               	rlcf	___ftpack@arg,f,c
  6086  00123C  3627               	rlcf	___ftpack@arg+1,f,c
  6087  00123E  3628               	rlcf	___ftpack@arg+2,f,c
  6088  001240                     l3581:
  6089  001240  BE27               	btfsc	___ftpack@arg+1,7,c
  6090  001242  D003               	goto	l632
  6091  001244  0E02               	movlw	2
  6092  001246  6029               	cpfslt	___ftpack@exp,c
  6093  001248  D7F6               	goto	l3579
  6094  00124A                     l632:
  6095  00124A  A029               	btfss	___ftpack@exp,0,c
  6096  00124C  9E27               	bcf	___ftpack@arg+1,7,c
  6097  00124E  90D8               	bcf	status,0,c
  6098  001250  3229               	rrcf	___ftpack@exp,f,c
  6099  001252  5029               	movf	___ftpack@exp,w,c
  6100  001254  1228               	iorwf	___ftpack@arg+2,f,c
  6101  001256  502A               	movf	___ftpack@sign,w,c
  6102  001258  A4D8               	btfss	status,2,c
  6103  00125A  8E28               	bsf	___ftpack@arg+2,7,c
  6104  00125C  C026  F026         	movff	___ftpack@arg,?___ftpack
  6105  001260  C027  F027         	movff	___ftpack@arg+1,?___ftpack+1
  6106  001264  C028  F028         	movff	___ftpack@arg+2,?___ftpack+2
  6107  001268  0012               	return	
  6108  00126A                     __end_of___ftpack:
  6109                           	opt stack 0
  6110                           tblptru	equ	0xFF8
  6111                           tblptrh	equ	0xFF7
  6112                           tblptrl	equ	0xFF6
  6113                           tablat	equ	0xFF5
  6114                           prodh	equ	0xFF4
  6115                           prodl	equ	0xFF3
  6116                           intcon	equ	0xFF2
  6117                           intcon3	equ	0xFF0
  6118                           postinc0	equ	0xFEE
  6119                           wreg	equ	0xFE8
  6120                           plusw1	equ	0xFE3
  6121                           postinc2	equ	0xFDE
  6122                           postdec2	equ	0xFDD
  6123                           plusw2	equ	0xFDB
  6124                           fsr2h	equ	0xFDA
  6125                           fsr2l	equ	0xFD9
  6126                           status	equ	0xFD8
  6127                           
  6128 ;; *************** function _AD *****************
  6129 ;; Defined at:
  6130 ;;		line 3 in file "sensors.c"
  6131 ;; Parameters:    Size  Location     Type
  6132 ;;  channel         1    wreg     unsigned char 
  6133 ;; Auto vars:     Size  Location     Type
  6134 ;;  channel         1   41[COMRAM] unsigned char 
  6135 ;; Return value:  Size  Location     Type
  6136 ;;                  2   37[COMRAM] int 
  6137 ;; Registers used:
  6138 ;;		wreg, status,2, status,0, cstack
  6139 ;; Tracked objects:
  6140 ;;		On entry : 0/0
  6141 ;;		On exit  : 0/0
  6142 ;;		Unchanged: 0/0
  6143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6144 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6145 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6146 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6147 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6148 ;;Total ram usage:        5 bytes
  6149 ;; Hardware stack levels used:    1
  6150 ;; Hardware stack levels required when called:    5
  6151 ;; This function calls:
  6152 ;;		Nothing
  6153 ;; This function is called by:
  6154 ;;		_checkAA
  6155 ;;		_checkC9V
  6156 ;; This function uses a non-reentrant model
  6157 ;;
  6158                           
  6159                           	psect	text29
  6160  00177C                     __ptext29:
  6161                           	opt stack 0
  6162  00177C                     _AD:
  6163                           	opt stack 23
  6164                           
  6165                           ;incstack = 0
  6166                           ;AD@channel stored from wreg
  6167  00177C  6E2A               	movwf	AD@channel,c
  6168                           
  6169                           ;sensors.c: 5: ADCON0 = ((channel << 2));
  6170  00177E  442A               	rlncf	AD@channel,w,c
  6171  001780  46E8               	rlncf	wreg,f,c
  6172  001782  0BFC               	andlw	252
  6173  001784  6EC2               	movwf	4034,c	;volatile
  6174                           
  6175                           ;sensors.c: 6: ADON = 1;
  6176  001786  80C2               	bsf	4034,0,c	;volatile
  6177                           
  6178                           ;sensors.c: 7: ADCON0bits.GO = 1;
  6179  001788  82C2               	bsf	4034,1,c	;volatile
  6180                           
  6181                           ;sensors.c: 8: while (ADCON0bits.GO_NOT_DONE) {
  6182  00178A  D008               	goto	l2723
  6183  00178C                     l2721:
  6184                           
  6185                           ;sensors.c: 10: _delay((unsigned long)((10)*(8000000/4000.0)));
  6186  00178C  0E1A               	movlw	26
  6187  00178E  6E28               	movwf	??_AD& (0+255),c
  6188  001790  0EF8               	movlw	248
  6189  001792                     u3287:
  6190  001792  2EE8               	decfsz	wreg,f,c
  6191  001794  D7FE               	bra	u3287
  6192  001796  2E28               	decfsz	??_AD& (0+255),f,c
  6193  001798  D7FC               	bra	u3287
  6194  00179A  D000               	nop2	
  6195  00179C                     l2723:
  6196  00179C  B2C2               	btfsc	4034,1,c	;volatile
  6197  00179E  D7F6               	goto	l2721
  6198                           
  6199                           ;sensors.c: 11: }
  6200                           ;sensors.c: 12: return (ADRESH << 8) | ADRESL;
  6201  0017A0  50C3               	movf	4035,w,c	;volatile
  6202  0017A2  CFC4 F028          	movff	4036,??_AD	;volatile
  6203  0017A6  6A29               	clrf	(??_AD+1)& (0+255),c
  6204  0017A8  C028  F029         	movff	??_AD,??_AD+1
  6205  0017AC  6A28               	clrf	??_AD,c
  6206  0017AE  1028               	iorwf	??_AD,w,c
  6207  0017B0  6E26               	movwf	?_AD,c
  6208  0017B2  5029               	movf	??_AD+1,w,c
  6209  0017B4  6E27               	movwf	?_AD+1,c
  6210  0017B6  0012               	return	
  6211  0017B8                     __end_of_AD:
  6212                           	opt stack 0
  6213                           tblptru	equ	0xFF8
  6214                           tblptrh	equ	0xFF7
  6215                           tblptrl	equ	0xFF6
  6216                           tablat	equ	0xFF5
  6217                           prodh	equ	0xFF4
  6218                           prodl	equ	0xFF3
  6219                           intcon	equ	0xFF2
  6220                           intcon3	equ	0xFF0
  6221                           postinc0	equ	0xFEE
  6222                           wreg	equ	0xFE8
  6223                           plusw1	equ	0xFE3
  6224                           postinc2	equ	0xFDE
  6225                           postdec2	equ	0xFDD
  6226                           plusw2	equ	0xFDB
  6227                           fsr2h	equ	0xFDA
  6228                           fsr2l	equ	0xFD9
  6229                           status	equ	0xFD8
  6230                           
  6231 ;; *************** function _initialize *****************
  6232 ;; Defined at:
  6233 ;;		line 14 in file "main.c"
  6234 ;; Parameters:    Size  Location     Type
  6235 ;;		None
  6236 ;; Auto vars:     Size  Location     Type
  6237 ;;		None
  6238 ;; Return value:  Size  Location     Type
  6239 ;;                  1    wreg      void 
  6240 ;; Registers used:
  6241 ;;		wreg, status,2, status,0, cstack
  6242 ;; Tracked objects:
  6243 ;;		On entry : 0/0
  6244 ;;		On exit  : 0/0
  6245 ;;		Unchanged: 0/0
  6246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6250 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6251 ;;Total ram usage:        0 bytes
  6252 ;; Hardware stack levels used:    1
  6253 ;; Hardware stack levels required when called:    8
  6254 ;; This function calls:
  6255 ;;		_initLCD
  6256 ;;		_lcdInst
  6257 ;; This function is called by:
  6258 ;;		_main
  6259 ;; This function uses a non-reentrant model
  6260 ;;
  6261                           
  6262                           	psect	text30
  6263  00173E                     __ptext30:
  6264                           	opt stack 0
  6265  00173E                     _initialize:
  6266                           	opt stack 22
  6267                           
  6268                           ;main.c: 15: TRISA = 0xFF;
  6269                           
  6270                           ;incstack = 0
  6271  00173E  6892               	setf	3986,c	;volatile
  6272                           
  6273                           ;main.c: 16: TRISB = 0xFF;
  6274  001740  6893               	setf	3987,c	;volatile
  6275                           
  6276                           ;main.c: 17: TRISC = 0x00;
  6277  001742  0E00               	movlw	0
  6278  001744  6E94               	movwf	3988,c	;volatile
  6279                           
  6280                           ;main.c: 18: TRISD = 0x00;
  6281  001746  0E00               	movlw	0
  6282  001748  6E95               	movwf	3989,c	;volatile
  6283                           
  6284                           ;main.c: 19: TRISE = 0x00;
  6285  00174A  0E00               	movlw	0
  6286  00174C  6E96               	movwf	3990,c	;volatile
  6287                           
  6288                           ;main.c: 21: LATA = 0x00;
  6289  00174E  0E00               	movlw	0
  6290  001750  6E89               	movwf	3977,c	;volatile
  6291                           
  6292                           ;main.c: 22: LATB = 0x00;
  6293  001752  0E00               	movlw	0
  6294  001754  6E8A               	movwf	3978,c	;volatile
  6295                           
  6296                           ;main.c: 23: LATC = 0x00;
  6297  001756  0E00               	movlw	0
  6298  001758  6E8B               	movwf	3979,c	;volatile
  6299                           
  6300                           ;main.c: 24: LATD = 0x00;
  6301  00175A  0E00               	movlw	0
  6302  00175C  6E8C               	movwf	3980,c	;volatile
  6303                           
  6304                           ;main.c: 25: LATE = 0x00;
  6305  00175E  0E00               	movlw	0
  6306  001760  6E8D               	movwf	3981,c	;volatile
  6307                           
  6308                           ;main.c: 28: ADCON0 = 0x00;
  6309  001762  0E00               	movlw	0
  6310  001764  6EC2               	movwf	4034,c	;volatile
  6311                           
  6312                           ;main.c: 29: ADCON1 = 0x0B;
  6313  001766  0E0B               	movlw	11
  6314  001768  6EC1               	movwf	4033,c	;volatile
  6315                           
  6316                           ;main.c: 30: CVRCON = 0x00;
  6317  00176A  0E00               	movlw	0
  6318  00176C  6EB5               	movwf	4021,c	;volatile
  6319                           
  6320                           ;main.c: 31: ADFM = 1;
  6321  00176E  8EC0               	bsf	4032,7,c	;volatile
  6322                           
  6323                           ;main.c: 33: initLCD();
  6324  001770  EC3A  F00B         	call	_initLCD	;wreg free
  6325                           
  6326                           ;main.c: 34: lcdInst(0x01);;
  6327  001774  0E01               	movlw	1
  6328  001776  EC72  F00C         	call	_lcdInst
  6329  00177A  0012               	return		;funcret
  6330  00177C                     __end_of_initialize:
  6331                           	opt stack 0
  6332                           tblptru	equ	0xFF8
  6333                           tblptrh	equ	0xFF7
  6334                           tblptrl	equ	0xFF6
  6335                           tablat	equ	0xFF5
  6336                           prodh	equ	0xFF4
  6337                           prodl	equ	0xFF3
  6338                           intcon	equ	0xFF2
  6339                           intcon3	equ	0xFF0
  6340                           postinc0	equ	0xFEE
  6341                           wreg	equ	0xFE8
  6342                           plusw1	equ	0xFE3
  6343                           postinc2	equ	0xFDE
  6344                           postdec2	equ	0xFDD
  6345                           plusw2	equ	0xFDB
  6346                           fsr2h	equ	0xFDA
  6347                           fsr2l	equ	0xFD9
  6348                           status	equ	0xFD8
  6349                           
  6350 ;; *************** function _initLCD *****************
  6351 ;; Defined at:
  6352 ;;		line 10 in file "lcd.c"
  6353 ;; Parameters:    Size  Location     Type
  6354 ;;		None
  6355 ;; Auto vars:     Size  Location     Type
  6356 ;;		None
  6357 ;; Return value:  Size  Location     Type
  6358 ;;                  1    wreg      void 
  6359 ;; Registers used:
  6360 ;;		wreg, status,2, status,0, cstack
  6361 ;; Tracked objects:
  6362 ;;		On entry : 0/0
  6363 ;;		On exit  : 0/0
  6364 ;;		Unchanged: 0/0
  6365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6368 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6369 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6370 ;;Total ram usage:        1 bytes
  6371 ;; Hardware stack levels used:    1
  6372 ;; Hardware stack levels required when called:    7
  6373 ;; This function calls:
  6374 ;;		_lcdInst
  6375 ;; This function is called by:
  6376 ;;		_initialize
  6377 ;; This function uses a non-reentrant model
  6378 ;;
  6379                           
  6380                           	psect	text31
  6381  001674                     __ptext31:
  6382                           	opt stack 0
  6383  001674                     _initLCD:
  6384                           	opt stack 22
  6385                           
  6386                           ;lcd.c: 11: _delay((unsigned long)((15)*(8000000/4000.0)));
  6387                           
  6388                           ;incstack = 0
  6389  001674  0E27               	movlw	39
  6390  001676  6E29               	movwf	??_initLCD& (0+255),c
  6391  001678  0EF5               	movlw	245
  6392  00167A                     u3297:
  6393  00167A  2EE8               	decfsz	wreg,f,c
  6394  00167C  D7FE               	bra	u3297
  6395  00167E  2E29               	decfsz	??_initLCD& (0+255),f,c
  6396  001680  D7FC               	bra	u3297
  6397  001682  F000               	nop	
  6398                           
  6399                           ;lcd.c: 12: lcdInst(0b00110011);
  6400  001684  0E33               	movlw	51
  6401  001686  EC72  F00C         	call	_lcdInst
  6402                           
  6403                           ;lcd.c: 13: lcdInst(0b00110010);
  6404  00168A  0E32               	movlw	50
  6405  00168C  EC72  F00C         	call	_lcdInst
  6406                           
  6407                           ;lcd.c: 14: lcdInst(0b00101000);
  6408  001690  0E28               	movlw	40
  6409  001692  EC72  F00C         	call	_lcdInst
  6410                           
  6411                           ;lcd.c: 15: lcdInst(0b00001111);
  6412  001696  0E0F               	movlw	15
  6413  001698  EC72  F00C         	call	_lcdInst
  6414                           
  6415                           ;lcd.c: 16: lcdInst(0b00000110);
  6416  00169C  0E06               	movlw	6
  6417  00169E  EC72  F00C         	call	_lcdInst
  6418                           
  6419                           ;lcd.c: 17: lcdInst(0b00000001);
  6420  0016A2  0E01               	movlw	1
  6421  0016A4  EC72  F00C         	call	_lcdInst
  6422                           
  6423                           ;lcd.c: 18: _delay((unsigned long)((15)*(8000000/4000.0)));
  6424  0016A8  0E27               	movlw	39
  6425  0016AA  6E29               	movwf	??_initLCD& (0+255),c
  6426  0016AC  0EF5               	movlw	245
  6427  0016AE                     u3307:
  6428  0016AE  2EE8               	decfsz	wreg,f,c
  6429  0016B0  D7FE               	bra	u3307
  6430  0016B2  2E29               	decfsz	??_initLCD& (0+255),f,c
  6431  0016B4  D7FC               	bra	u3307
  6432  0016B6  F000               	nop	
  6433  0016B8  0012               	return		;funcret
  6434  0016BA                     __end_of_initLCD:
  6435                           	opt stack 0
  6436                           tblptru	equ	0xFF8
  6437                           tblptrh	equ	0xFF7
  6438                           tblptrl	equ	0xFF6
  6439                           tablat	equ	0xFF5
  6440                           prodh	equ	0xFF4
  6441                           prodl	equ	0xFF3
  6442                           intcon	equ	0xFF2
  6443                           intcon3	equ	0xFF0
  6444                           postinc0	equ	0xFEE
  6445                           wreg	equ	0xFE8
  6446                           plusw1	equ	0xFE3
  6447                           postinc2	equ	0xFDE
  6448                           postdec2	equ	0xFDD
  6449                           plusw2	equ	0xFDB
  6450                           fsr2h	equ	0xFDA
  6451                           fsr2l	equ	0xFD9
  6452                           status	equ	0xFD8
  6453                           
  6454 ;; *************** function _lcdInst *****************
  6455 ;; Defined at:
  6456 ;;		line 21 in file "lcd.c"
  6457 ;; Parameters:    Size  Location     Type
  6458 ;;  data            1    wreg     unsigned char 
  6459 ;; Auto vars:     Size  Location     Type
  6460 ;;  data            1   39[COMRAM] unsigned char 
  6461 ;; Return value:  Size  Location     Type
  6462 ;;                  1    wreg      void 
  6463 ;; Registers used:
  6464 ;;		wreg, status,2, status,0, cstack
  6465 ;; Tracked objects:
  6466 ;;		On entry : 0/0
  6467 ;;		On exit  : 0/0
  6468 ;;		Unchanged: 0/0
  6469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6471 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6473 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6474 ;;Total ram usage:        1 bytes
  6475 ;; Hardware stack levels used:    1
  6476 ;; Hardware stack levels required when called:    6
  6477 ;; This function calls:
  6478 ;;		_lcdNibble
  6479 ;; This function is called by:
  6480 ;;		_initialize
  6481 ;;		_simulate
  6482 ;;		_main
  6483 ;;		_initLCD
  6484 ;;		_showInfo
  6485 ;;		_moveBigNose
  6486 ;;		_moveSmallNose
  6487 ;;		_stopMoving
  6488 ;;		_checkV
  6489 ;;		_checkAA
  6490 ;;		_checkC9V
  6491 ;;		_mainloop
  6492 ;; This function uses a non-reentrant model
  6493 ;;
  6494                           
  6495                           	psect	text32
  6496  0018E4                     __ptext32:
  6497                           	opt stack 0
  6498  0018E4                     _lcdInst:
  6499                           	opt stack 22
  6500                           
  6501                           ;incstack = 0
  6502                           ;lcdInst@data stored from wreg
  6503  0018E4  6E28               	movwf	lcdInst@data,c
  6504                           
  6505                           ;lcd.c: 22: LATDbits.LATD2 = 0;
  6506  0018E6  948C               	bcf	3980,2,c	;volatile
  6507                           
  6508                           ;lcd.c: 23: lcdNibble(data);
  6509  0018E8  5028               	movf	lcdInst@data,w,c
  6510  0018EA  EC6B  F00A         	call	_lcdNibble
  6511  0018EE  0012               	return		;funcret
  6512  0018F0                     __end_of_lcdInst:
  6513                           	opt stack 0
  6514                           tblptru	equ	0xFF8
  6515                           tblptrh	equ	0xFF7
  6516                           tblptrl	equ	0xFF6
  6517                           tablat	equ	0xFF5
  6518                           prodh	equ	0xFF4
  6519                           prodl	equ	0xFF3
  6520                           intcon	equ	0xFF2
  6521                           intcon3	equ	0xFF0
  6522                           postinc0	equ	0xFEE
  6523                           wreg	equ	0xFE8
  6524                           plusw1	equ	0xFE3
  6525                           postinc2	equ	0xFDE
  6526                           postdec2	equ	0xFDD
  6527                           plusw2	equ	0xFDB
  6528                           fsr2h	equ	0xFDA
  6529                           fsr2l	equ	0xFD9
  6530                           status	equ	0xFD8
  6531                           
  6532 ;; *************** function _lcdNibble *****************
  6533 ;; Defined at:
  6534 ;;		line 31 in file "lcd.c"
  6535 ;; Parameters:    Size  Location     Type
  6536 ;;  data            1    wreg     unsigned char 
  6537 ;; Auto vars:     Size  Location     Type
  6538 ;;  data            1   38[COMRAM] unsigned char 
  6539 ;;  temp            1   37[COMRAM] unsigned char 
  6540 ;; Return value:  Size  Location     Type
  6541 ;;                  1    wreg      void 
  6542 ;; Registers used:
  6543 ;;		wreg, status,2, status,0
  6544 ;; Tracked objects:
  6545 ;;		On entry : 0/0
  6546 ;;		On exit  : 0/0
  6547 ;;		Unchanged: 0/0
  6548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6550 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6552 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6553 ;;Total ram usage:        2 bytes
  6554 ;; Hardware stack levels used:    1
  6555 ;; Hardware stack levels required when called:    5
  6556 ;; This function calls:
  6557 ;;		Nothing
  6558 ;; This function is called by:
  6559 ;;		_lcdInst
  6560 ;;		_putch
  6561 ;; This function uses a non-reentrant model
  6562 ;;
  6563                           
  6564                           	psect	text33
  6565  0014D6                     __ptext33:
  6566                           	opt stack 0
  6567  0014D6                     _lcdNibble:
  6568                           	opt stack 21
  6569                           
  6570                           ;incstack = 0
  6571                           ;lcdNibble@data stored from wreg
  6572  0014D6  6E27               	movwf	lcdNibble@data,c
  6573                           
  6574                           ;lcd.c: 33: char temp = data & 0xF0;
  6575  0014D8  5027               	movf	lcdNibble@data,w,c
  6576  0014DA  0BF0               	andlw	240
  6577  0014DC  6E26               	movwf	lcdNibble@temp,c
  6578                           
  6579                           ;lcd.c: 34: LATD = LATD & 0x0F;
  6580  0014DE  508C               	movf	3980,w,c	;volatile
  6581  0014E0  0B0F               	andlw	15
  6582  0014E2  6E8C               	movwf	3980,c	;volatile
  6583                           
  6584                           ;lcd.c: 35: LATD = temp | LATD;
  6585  0014E4  5026               	movf	lcdNibble@temp,w,c
  6586  0014E6  108C               	iorwf	3980,w,c	;volatile
  6587  0014E8  6E8C               	movwf	3980,c	;volatile
  6588                           
  6589                           ;lcd.c: 37: LATDbits.LATD3 = 0;
  6590  0014EA  968C               	bcf	3980,3,c	;volatile
  6591                           
  6592                           ;lcd.c: 38: _delay((unsigned long)((25)*(8000000/4000000.0)));
  6593  0014EC  0E10               	movlw	16
  6594  0014EE                     u3317:
  6595  0014EE  2EE8               	decfsz	wreg,f,c
  6596  0014F0  D7FE               	bra	u3317
  6597  0014F2  D000               	nop2	
  6598                           
  6599                           ;lcd.c: 39: LATDbits.LATD3 = 1;
  6600  0014F4  868C               	bsf	3980,3,c	;volatile
  6601                           
  6602                           ;lcd.c: 40: _delay((unsigned long)((25)*(8000000/4000000.0)));
  6603  0014F6  0E10               	movlw	16
  6604  0014F8                     u3327:
  6605  0014F8  2EE8               	decfsz	wreg,f,c
  6606  0014FA  D7FE               	bra	u3327
  6607  0014FC  D000               	nop2	
  6608                           
  6609                           ;lcd.c: 42: data = data << 4;
  6610  0014FE  3827               	swapf	lcdNibble@data,w,c
  6611  001500  0BF0               	andlw	240
  6612  001502  6E27               	movwf	lcdNibble@data,c
  6613                           
  6614                           ;lcd.c: 44: temp = data & 0xF0;
  6615  001504  5027               	movf	lcdNibble@data,w,c
  6616  001506  0BF0               	andlw	240
  6617  001508  6E26               	movwf	lcdNibble@temp,c
  6618                           
  6619                           ;lcd.c: 45: LATD = LATD & 0x0F;
  6620  00150A  508C               	movf	3980,w,c	;volatile
  6621  00150C  0B0F               	andlw	15
  6622  00150E  6E8C               	movwf	3980,c	;volatile
  6623                           
  6624                           ;lcd.c: 46: LATD = temp | LATD;
  6625  001510  5026               	movf	lcdNibble@temp,w,c
  6626  001512  108C               	iorwf	3980,w,c	;volatile
  6627  001514  6E8C               	movwf	3980,c	;volatile
  6628                           
  6629                           ;lcd.c: 48: LATDbits.LATD3 = 0;
  6630  001516  968C               	bcf	3980,3,c	;volatile
  6631                           
  6632                           ;lcd.c: 49: _delay((unsigned long)((25)*(8000000/4000000.0)));
  6633  001518  0E10               	movlw	16
  6634  00151A                     u3337:
  6635  00151A  2EE8               	decfsz	wreg,f,c
  6636  00151C  D7FE               	bra	u3337
  6637  00151E  D000               	nop2	
  6638                           
  6639                           ;lcd.c: 50: LATDbits.LATD3 = 1;
  6640  001520  868C               	bsf	3980,3,c	;volatile
  6641                           
  6642                           ;lcd.c: 51: _delay((unsigned long)((25)*(8000000/4000000.0)));
  6643  001522  0E10               	movlw	16
  6644  001524                     u3347:
  6645  001524  2EE8               	decfsz	wreg,f,c
  6646  001526  D7FE               	bra	u3347
  6647  001528  D000               	nop2	
  6648  00152A  0012               	return		;funcret
  6649  00152C                     __end_of_lcdNibble:
  6650                           	opt stack 0
  6651                           tblptru	equ	0xFF8
  6652                           tblptrh	equ	0xFF7
  6653                           tblptrl	equ	0xFF6
  6654                           tablat	equ	0xFF5
  6655                           prodh	equ	0xFF4
  6656                           prodl	equ	0xFF3
  6657                           intcon	equ	0xFF2
  6658                           intcon3	equ	0xFF0
  6659                           postinc0	equ	0xFEE
  6660                           wreg	equ	0xFE8
  6661                           plusw1	equ	0xFE3
  6662                           postinc2	equ	0xFDE
  6663                           postdec2	equ	0xFDD
  6664                           plusw2	equ	0xFDB
  6665                           fsr2h	equ	0xFDA
  6666                           fsr2l	equ	0xFD9
  6667                           status	equ	0xFD8
  6668                           
  6669 ;; *************** function _keypressed *****************
  6670 ;; Defined at:
  6671 ;;		line 12 in file "modules.c"
  6672 ;; Parameters:    Size  Location     Type
  6673 ;;		None
  6674 ;; Auto vars:     Size  Location     Type
  6675 ;;  keypress        1   36[COMRAM] unsigned char 
  6676 ;; Return value:  Size  Location     Type
  6677 ;;                  1    wreg      void 
  6678 ;; Registers used:
  6679 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6680 ;; Tracked objects:
  6681 ;;		On entry : 0/0
  6682 ;;		On exit  : 0/0
  6683 ;;		Unchanged: 0/0
  6684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6686 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6687 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6688 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6689 ;;Total ram usage:       15 bytes
  6690 ;; Hardware stack levels used:    1
  6691 ;; Hardware stack levels required when called:    4
  6692 ;; This function calls:
  6693 ;;		i2_lcdInst
  6694 ;;		i2_stopMoving
  6695 ;; This function is called by:
  6696 ;;		Interrupt level 2
  6697 ;; This function uses a non-reentrant model
  6698 ;;
  6699                           
  6700                           	psect	intcode
  6701  000008                     __pintcode:
  6702                           	opt stack 0
  6703  000008                     _keypressed:
  6704                           	opt stack 20
  6705                           
  6706                           ;incstack = 0
  6707  000008  825A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6708  00000A  ED24  F00A         	call	int_func,f	;refresh shadow registers
  6709                           tblptru	equ	0xFF8
  6710                           tblptrh	equ	0xFF7
  6711                           tblptrl	equ	0xFF6
  6712                           tablat	equ	0xFF5
  6713                           prodh	equ	0xFF4
  6714                           prodl	equ	0xFF3
  6715                           intcon	equ	0xFF2
  6716                           intcon3	equ	0xFF0
  6717                           postinc0	equ	0xFEE
  6718                           wreg	equ	0xFE8
  6719                           plusw1	equ	0xFE3
  6720                           postinc2	equ	0xFDE
  6721                           postdec2	equ	0xFDD
  6722                           plusw2	equ	0xFDB
  6723                           fsr2h	equ	0xFDA
  6724                           fsr2l	equ	0xFD9
  6725                           status	equ	0xFD8
  6726                           
  6727                           	psect	intcode_body
  6728  001448                     __pintcode_body:
  6729                           	opt stack 20
  6730  001448                     int_func:
  6731                           	opt stack 20
  6732  001448  0006               	pop		; remove dummy address from shadow register refresh
  6733  00144A  CFFA F017          	movff	pclath,??_keypressed
  6734  00144E  CFFB F018          	movff	pclatu,??_keypressed+1
  6735  001452  CFE9 F019          	movff	fsr0l,??_keypressed+2
  6736  001456  CFEA F01A          	movff	fsr0h,??_keypressed+3
  6737  00145A  CFE1 F01B          	movff	fsr1l,??_keypressed+4
  6738  00145E  CFE2 F01C          	movff	fsr1h,??_keypressed+5
  6739  001462  CFD9 F01D          	movff	fsr2l,??_keypressed+6
  6740  001466  CFDA F01E          	movff	fsr2h,??_keypressed+7
  6741  00146A  CFF3 F01F          	movff	prodl,??_keypressed+8
  6742  00146E  CFF4 F020          	movff	prodh,??_keypressed+9
  6743  001472  CFF6 F021          	movff	tblptrl,??_keypressed+10
  6744  001476  CFF7 F022          	movff	tblptrh,??_keypressed+11
  6745  00147A  CFF8 F023          	movff	tblptru,??_keypressed+12
  6746  00147E  CFF5 F024          	movff	tablat,??_keypressed+13
  6747                           
  6748                           ;modules.c: 14: if (INT1IF) {
  6749  001482  A0F0               	btfss	intcon3,0,c	;volatile
  6750  001484  D00A               	goto	i2l161
  6751                           
  6752                           ;modules.c: 16: unsigned char keypress = (PORTB & 0xF0) >> 4;
  6753  001486  3881               	swapf	3969,w,c	;volatile
  6754  001488  0B0F               	andlw	15
  6755  00148A  0B0F               	andlw	15
  6756  00148C  6E25               	movwf	keypressed@keypress,c
  6757                           
  6758                           ;modules.c: 17: INT1IF = 0;
  6759  00148E  90F0               	bcf	intcon3,0,c	;volatile
  6760                           
  6761                           ;modules.c: 18: lcdInst(0b11000000);;
  6762  001490  0EC0               	movlw	192
  6763  001492  EC7E  F00C         	call	i2_lcdInst
  6764                           
  6765                           ;modules.c: 19: stopMoving();
  6766  001496  EC50  F00C         	call	i2_stopMoving	;wreg free
  6767  00149A                     i2l161:
  6768  00149A  C024  FFF5         	movff	??_keypressed+13,tablat
  6769  00149E  C023  FFF8         	movff	??_keypressed+12,tblptru
  6770  0014A2  C022  FFF7         	movff	??_keypressed+11,tblptrh
  6771  0014A6  C021  FFF6         	movff	??_keypressed+10,tblptrl
  6772  0014AA  C020  FFF4         	movff	??_keypressed+9,prodh
  6773  0014AE  C01F  FFF3         	movff	??_keypressed+8,prodl
  6774  0014B2  C01E  FFDA         	movff	??_keypressed+7,fsr2h
  6775  0014B6  C01D  FFD9         	movff	??_keypressed+6,fsr2l
  6776  0014BA  C01C  FFE2         	movff	??_keypressed+5,fsr1h
  6777  0014BE  C01B  FFE1         	movff	??_keypressed+4,fsr1l
  6778  0014C2  C01A  FFEA         	movff	??_keypressed+3,fsr0h
  6779  0014C6  C019  FFE9         	movff	??_keypressed+2,fsr0l
  6780  0014CA  C018  FFFB         	movff	??_keypressed+1,pclatu
  6781  0014CE  C017  FFFA         	movff	??_keypressed,pclath
  6782  0014D2  925A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6783  0014D4  0011               	retfie		f
  6784  0014D6                     __end_of_keypressed:
  6785                           	opt stack 0
  6786                           pclatu	equ	0xFFB
  6787                           pclath	equ	0xFFA
  6788                           tblptru	equ	0xFF8
  6789                           tblptrh	equ	0xFF7
  6790                           tblptrl	equ	0xFF6
  6791                           tablat	equ	0xFF5
  6792                           prodh	equ	0xFF4
  6793                           prodl	equ	0xFF3
  6794                           intcon	equ	0xFF2
  6795                           intcon3	equ	0xFF0
  6796                           postinc0	equ	0xFEE
  6797                           fsr0h	equ	0xFEA
  6798                           fsr0l	equ	0xFE9
  6799                           wreg	equ	0xFE8
  6800                           plusw1	equ	0xFE3
  6801                           fsr1h	equ	0xFE2
  6802                           fsr1l	equ	0xFE1
  6803                           postinc2	equ	0xFDE
  6804                           postdec2	equ	0xFDD
  6805                           plusw2	equ	0xFDB
  6806                           fsr2h	equ	0xFDA
  6807                           fsr2l	equ	0xFD9
  6808                           status	equ	0xFD8
  6809                           
  6810 ;; *************** function i2_stopMoving *****************
  6811 ;; Defined at:
  6812 ;;		line 217 in file "motors.c"
  6813 ;; Parameters:    Size  Location     Type
  6814 ;;		None
  6815 ;; Auto vars:     Size  Location     Type
  6816 ;;		None
  6817 ;; Return value:  Size  Location     Type
  6818 ;;                  1    wreg      void 
  6819 ;; Registers used:
  6820 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6821 ;; Tracked objects:
  6822 ;;		On entry : 0/0
  6823 ;;		On exit  : 0/0
  6824 ;;		Unchanged: 0/0
  6825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6829 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6830 ;;Total ram usage:        0 bytes
  6831 ;; Hardware stack levels used:    1
  6832 ;; Hardware stack levels required when called:    3
  6833 ;; This function calls:
  6834 ;;		i2_lcdInst
  6835 ;;		i2_printf
  6836 ;; This function is called by:
  6837 ;;		_keypressed
  6838 ;; This function uses a non-reentrant model
  6839 ;;
  6840                           
  6841                           	psect	text35
  6842  0018A0                     __ptext35:
  6843                           	opt stack 0
  6844  0018A0                     i2_stopMoving:
  6845                           	opt stack 20
  6846                           
  6847                           ;motors.c: 218: (INTCONbits.GIE = 0);
  6848                           
  6849                           ;incstack = 0
  6850  0018A0  9EF2               	bcf	intcon,7,c	;volatile
  6851                           
  6852                           ;motors.c: 219: lcdInst(0b10000000);;
  6853  0018A2  0E80               	movlw	128
  6854  0018A4  EC7E  F00C         	call	i2_lcdInst
  6855                           
  6856                           ;motors.c: 220: printf("Stopped    ");
  6857  0018A8  0E69               	movlw	low STR_29
  6858  0018AA  6E0D               	movwf	i2printf@f,c
  6859  0018AC  0EFF               	movlw	high STR_29
  6860  0018AE  6E0E               	movwf	i2printf@f+1,c
  6861  0018B0  ECBE  F005         	call	i2_printf	;wreg free
  6862  0018B4                     i2l311:
  6863  0018B4  D7FF               	goto	i2l311
  6864  0018B6                     __end_ofi2_stopMoving:
  6865                           	opt stack 0
  6866                           pclatu	equ	0xFFB
  6867                           pclath	equ	0xFFA
  6868                           tblptru	equ	0xFF8
  6869                           tblptrh	equ	0xFF7
  6870                           tblptrl	equ	0xFF6
  6871                           tablat	equ	0xFF5
  6872                           prodh	equ	0xFF4
  6873                           prodl	equ	0xFF3
  6874                           intcon	equ	0xFF2
  6875                           intcon3	equ	0xFF0
  6876                           postinc0	equ	0xFEE
  6877                           fsr0h	equ	0xFEA
  6878                           fsr0l	equ	0xFE9
  6879                           wreg	equ	0xFE8
  6880                           plusw1	equ	0xFE3
  6881                           fsr1h	equ	0xFE2
  6882                           fsr1l	equ	0xFE1
  6883                           postinc2	equ	0xFDE
  6884                           postdec2	equ	0xFDD
  6885                           plusw2	equ	0xFDB
  6886                           fsr2h	equ	0xFDA
  6887                           fsr2l	equ	0xFD9
  6888                           status	equ	0xFD8
  6889                           
  6890 ;; *************** function i2_printf *****************
  6891 ;; Defined at:
  6892 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  6893 ;; Parameters:    Size  Location     Type
  6894 ;;  f               2   12[COMRAM] PTR const unsigned char 
  6895 ;;		 -> STR_42(16), STR_41(14), STR_40(9), STR_39(16), 
  6896 ;;		 -> STR_38(13), STR_37(14), STR_36(3), STR_35(3), 
  6897 ;;		 -> STR_34(11), STR_33(18), STR_32(15), STR_31(9), 
  6898 ;;		 -> STR_30(16), STR_29(12), STR_28(14), STR_27(3), 
  6899 ;;		 -> STR_26(16), STR_25(14), STR_24(7), STR_23(6), 
  6900 ;;		 -> STR_22(14), STR_21(15), STR_20(16), STR_19(3), 
  6901 ;;		 -> STR_18(11), STR_17(3), STR_16(11), STR_15(3), 
  6902 ;;		 -> STR_14(10), STR_13(3), STR_12(11), STR_11(13), 
  6903 ;;		 -> STR_10(14), STR_9(11), STR_8(14), STR_7(14), 
  6904 ;;		 -> STR_6(15), STR_5(17), STR_4(12), STR_3(12), 
  6905 ;;		 -> STR_2(11), STR_1(11), 
  6906 ;; Auto vars:     Size  Location     Type
  6907 ;;  printf          4    0        struct .
  6908 ;;  printf          3    0        PTR const unsigned char 
  6909 ;;  printf          2   19[COMRAM] unsigned int 
  6910 ;;  printf          2   15[COMRAM] PTR void [1]
  6911 ;;		 -> ?i2_printf(2), ?_printf(2), 
  6912 ;;  printf          2    0        unsigned int 
  6913 ;;  printf          1   21[COMRAM] char 
  6914 ;;  printf          1   18[COMRAM] char 
  6915 ;;  printf          1   17[COMRAM] unsigned char 
  6916 ;; Return value:  Size  Location     Type
  6917 ;;                  2   12[COMRAM] int 
  6918 ;; Registers used:
  6919 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6920 ;; Tracked objects:
  6921 ;;		On entry : 0/0
  6922 ;;		On exit  : 0/0
  6923 ;;		Unchanged: 0/0
  6924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6925 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6926 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6927 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6928 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6929 ;;Total ram usage:       10 bytes
  6930 ;; Hardware stack levels used:    1
  6931 ;; Hardware stack levels required when called:    2
  6932 ;; This function calls:
  6933 ;;		i2___lwdiv
  6934 ;;		i2___lwmod
  6935 ;;		i2_putch
  6936 ;; This function is called by:
  6937 ;;		i2_stopMoving
  6938 ;; This function uses a non-reentrant model
  6939 ;;
  6940                           
  6941                           	psect	text36
  6942  000B7C                     __ptext36:
  6943                           	opt stack 0
  6944  000B7C                     i2_printf:
  6945                           	opt stack 20
  6946                           
  6947                           ;doprnt.c: 466: va_list ap;
  6948                           ;doprnt.c: 499: signed char c;
  6949                           ;doprnt.c: 506: signed char prec;
  6950                           ;doprnt.c: 508: unsigned char flag;
  6951                           ;doprnt.c: 523: union {
  6952                           ;doprnt.c: 524: unsigned long vd;
  6953                           ;doprnt.c: 525: double integ;
  6954                           ;doprnt.c: 526: } tmpval;
  6955                           ;doprnt.c: 528: unsigned int val;
  6956                           ;doprnt.c: 529: unsigned len;
  6957                           ;doprnt.c: 530: const char * cp;
  6958                           ;doprnt.c: 533: *ap = __va_start();
  6959                           
  6960                           ;incstack = 0
  6961  000B7C  0E0F               	movlw	low (?i2_printf+2)
  6962  000B7E  6E10               	movwf	i2printf@ap,c
  6963  000B80  0E00               	movlw	high (?i2_printf+2)
  6964  000B82  6E11               	movwf	i2printf@ap+1,c
  6965                           
  6966                           ;doprnt.c: 536: while(c = *f++) {
  6967  000B84  D082               	goto	i2l3179
  6968  000B86                     i2l3131:
  6969                           
  6970                           ;doprnt.c: 538: if(c != '%')
  6971  000B86  0E25               	movlw	37
  6972  000B88  1816               	xorwf	i2printf@c,w,c
  6973  000B8A  B4D8               	btfsc	status,2,c
  6974  000B8C  D004               	goto	i2l3135
  6975                           
  6976                           ;doprnt.c: 540: {
  6977                           ;doprnt.c: 541: (putch(c) );
  6978  000B8E  5016               	movf	i2printf@c,w,c
  6979  000B90  EC78  F00C         	call	i2_putch
  6980                           
  6981                           ;doprnt.c: 542: continue;
  6982  000B94  D07A               	goto	i2l3179
  6983  000B96                     i2l3135:
  6984                           
  6985                           ;doprnt.c: 543: }
  6986                           ;doprnt.c: 548: flag = 0;
  6987  000B96  0E00               	movlw	0
  6988  000B98  6E12               	movwf	i2printf@flag,c
  6989                           
  6990                           ;doprnt.c: 635: switch(c = *f++) {
  6991  000B9A  D004               	goto	i2l3141
  6992  000B9C                     i2l3137:
  6993                           
  6994                           ;doprnt.c: 809: (putch(c) );
  6995  000B9C  5016               	movf	i2printf@c,w,c
  6996  000B9E  EC78  F00C         	call	i2_putch
  6997                           
  6998                           ;doprnt.c: 810: continue;
  6999  000BA2  D073               	goto	i2l3179
  7000  000BA4                     i2l3141:
  7001  000BA4  C00D  FFF6         	movff	i2printf@f,tblptrl
  7002  000BA8  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7003  000BAC  4A0D               	infsnz	i2printf@f,f,c
  7004  000BAE  2A0E               	incf	i2printf@f+1,f,c
  7005  000BB0                     	if	0	;tblptru may be non-zero
  7006  000BB0                     	endif
  7007  000BB0                     	if	0	;tblptru may be non-zero
  7008  000BB0                     	endif
  7009  000BB0  0008               	tblrd		*
  7010  000BB2  CFF5 F016          	movff	tablat,i2printf@c
  7011  000BB6  5016               	movf	i2printf@c,w,c
  7012                           
  7013                           ; Switch size 1, requested type "space"
  7014                           ; Number of cases is 3, Range of values is 0 to 105
  7015                           ; switch strategies available:
  7016                           ; Name         Instructions Cycles
  7017                           ; simple_byte           10     6 (average)
  7018                           ;	Chosen strategy is simple_byte
  7019  000BB8  0A00               	xorlw	0	; case 0
  7020  000BBA  B4D8               	btfsc	status,2,c
  7021  000BBC  0012               	return	
  7022  000BBE  0A64               	xorlw	100	; case 100
  7023  000BC0  B4D8               	btfsc	status,2,c
  7024  000BC2  D003               	goto	i2l3143
  7025  000BC4  0A0D               	xorlw	13	; case 105
  7026  000BC6  A4D8               	btfss	status,2,c
  7027  000BC8  D7E9               	goto	i2l3137
  7028  000BCA                     i2l3143:
  7029                           
  7030                           ;doprnt.c: 1253: {
  7031                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7032  000BCA  C010  FFD9         	movff	i2printf@ap,fsr2l
  7033  000BCE  C011  FFDA         	movff	i2printf@ap+1,fsr2h
  7034  000BD2  CFDE F014          	movff	postinc2,i2printf@val
  7035  000BD6  CFDD F015          	movff	postdec2,i2printf@val+1
  7036  000BDA  0E02               	movlw	2
  7037  000BDC  2610               	addwf	i2printf@ap,f,c
  7038  000BDE  0E00               	movlw	0
  7039  000BE0  2211               	addwfc	i2printf@ap+1,f,c
  7040                           
  7041                           ;doprnt.c: 1261: if((int)val < 0) {
  7042  000BE2  AE15               	btfss	i2printf@val+1,7,c
  7043  000BE4  D006               	goto	i2l3153
  7044                           
  7045                           ;doprnt.c: 1262: flag |= 0x03;
  7046  000BE6  0E03               	movlw	3
  7047  000BE8  1212               	iorwf	i2printf@flag,f,c
  7048                           
  7049                           ;doprnt.c: 1263: val = -val;
  7050  000BEA  6C14               	negf	i2printf@val,c
  7051  000BEC  1E15               	comf	i2printf@val+1,f,c
  7052  000BEE  B0D8               	btfsc	status,0,c
  7053  000BF0  2A15               	incf	i2printf@val+1,f,c
  7054  000BF2                     i2l3153:
  7055                           
  7056                           ;doprnt.c: 1264: }
  7057                           ;doprnt.c: 1266: }
  7058                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7059  000BF2  0E01               	movlw	1
  7060  000BF4  6E16               	movwf	i2printf@c,c
  7061  000BF6                     i2l3155:
  7062  000BF6  0E05               	movlw	5
  7063  000BF8  1816               	xorwf	i2printf@c,w,c
  7064  000BFA  B4D8               	btfsc	status,2,c
  7065  000BFC  D012               	goto	i2l3167
  7066                           
  7067                           ;doprnt.c: 1306: if(val < dpowers[c])
  7068  000BFE  5016               	movf	i2printf@c,w,c
  7069  000C00  0D02               	mullw	2
  7070  000C02  0E5F               	movlw	low _dpowers
  7071  000C04  24F3               	addwf	prodl,w,c
  7072  000C06  6EF6               	movwf	tblptrl,c
  7073  000C08  0EFE               	movlw	high _dpowers
  7074  000C0A  20F4               	addwfc	prodh,w,c
  7075  000C0C  6EF7               	movwf	tblptrh,c
  7076  000C0E                     	if	0	;There are less than 3 active tblptr bytes
  7077  000C0E                     	endif
  7078  000C0E  0009               	tblrd		*+
  7079  000C10  50F5               	movf	tablat,w,c
  7080  000C12  5C14               	subwf	i2printf@val,w,c
  7081  000C14  0009               	tblrd		*+
  7082  000C16  50F5               	movf	tablat,w,c
  7083  000C18  5815               	subwfb	i2printf@val+1,w,c
  7084  000C1A  A0D8               	btfss	status,0,c
  7085  000C1C  D002               	goto	i2l3167
  7086                           
  7087                           ;doprnt.c: 1307: break;
  7088  000C1E  2A16               	incf	i2printf@c,f,c
  7089  000C20  D7EA               	goto	i2l3155
  7090  000C22                     i2l3167:
  7091                           
  7092                           ;doprnt.c: 1422: {
  7093                           ;doprnt.c: 1438: if(flag & 0x03)
  7094  000C22  C012  F00F         	movff	i2printf@flag,??i2_printf
  7095  000C26  0E03               	movlw	3
  7096  000C28  160F               	andwf	??i2_printf,f,c
  7097  000C2A  B4D8               	btfsc	status,2,c
  7098  000C2C  D003               	goto	i2l3171
  7099                           
  7100                           ;doprnt.c: 1439: (putch('-') );
  7101  000C2E  0E2D               	movlw	45
  7102  000C30  EC78  F00C         	call	i2_putch
  7103  000C34                     i2l3171:
  7104                           
  7105                           ;doprnt.c: 1469: }
  7106                           ;doprnt.c: 1472: prec = c;
  7107  000C34  C016  F013         	movff	i2printf@c,i2printf@prec
  7108                           
  7109                           ;doprnt.c: 1474: while(prec--) {
  7110  000C38  D024               	goto	i2l3177
  7111  000C3A                     i2l3173:
  7112                           
  7113                           ;doprnt.c: 1478: {
  7114                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7115  000C3A  5013               	movf	i2printf@prec,w,c
  7116  000C3C  0D02               	mullw	2
  7117  000C3E  0E5F               	movlw	low _dpowers
  7118  000C40  24F3               	addwf	prodl,w,c
  7119  000C42  6EF6               	movwf	tblptrl,c
  7120  000C44  0EFE               	movlw	high _dpowers
  7121  000C46  20F4               	addwfc	prodh,w,c
  7122  000C48  6EF7               	movwf	tblptrh,c
  7123  000C4A                     	if	0	;There are less than 3 active tblptr bytes
  7124  000C4A                     	endif
  7125  000C4A  0009               	tblrd		*+
  7126  000C4C  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  7127  000C50  000A               	tblrd		*-
  7128  000C52  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  7129  000C56  C014  F001         	movff	i2printf@val,i2___lwdiv@dividend
  7130  000C5A  C015  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  7131  000C5E  ECEA  F00A         	call	i2___lwdiv	;wreg free
  7132  000C62  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  7133  000C66  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  7134  000C6A  0E00               	movlw	0
  7135  000C6C  6E0B               	movwf	i2___lwmod@divisor+1,c
  7136  000C6E  0E0A               	movlw	10
  7137  000C70  6E0A               	movwf	i2___lwmod@divisor,c
  7138  000C72  EC7E  F00B         	call	i2___lwmod	;wreg free
  7139  000C76  5008               	movf	?i2___lwmod,w,c
  7140  000C78  0F30               	addlw	48
  7141  000C7A  6E16               	movwf	i2printf@c,c
  7142                           
  7143                           ;doprnt.c: 1523: }
  7144                           ;doprnt.c: 1524: (putch(c) );
  7145  000C7C  5016               	movf	i2printf@c,w,c
  7146  000C7E  EC78  F00C         	call	i2_putch
  7147  000C82                     i2l3177:
  7148  000C82  0613               	decf	i2printf@prec,f,c
  7149  000C84  2813               	incf	i2printf@prec,w,c
  7150  000C86  A4D8               	btfss	status,2,c
  7151  000C88  D7D8               	goto	i2l3173
  7152  000C8A                     i2l3179:
  7153  000C8A  C00D  FFF6         	movff	i2printf@f,tblptrl
  7154  000C8E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  7155  000C92  4A0D               	infsnz	i2printf@f,f,c
  7156  000C94  2A0E               	incf	i2printf@f+1,f,c
  7157  000C96                     	if	0	;tblptru may be non-zero
  7158  000C96                     	endif
  7159  000C96                     	if	0	;tblptru may be non-zero
  7160  000C96                     	endif
  7161  000C96  0008               	tblrd		*
  7162  000C98  CFF5 F016          	movff	tablat,i2printf@c
  7163  000C9C  5016               	movf	i2printf@c,w,c
  7164  000C9E  B4D8               	btfsc	status,2,c
  7165  000CA0  0012               	return	
  7166  000CA2  D771               	goto	i2l3131
  7167  000CA4                     __end_ofi2_printf:
  7168                           	opt stack 0
  7169                           pclatu	equ	0xFFB
  7170                           pclath	equ	0xFFA
  7171                           tblptru	equ	0xFF8
  7172                           tblptrh	equ	0xFF7
  7173                           tblptrl	equ	0xFF6
  7174                           tablat	equ	0xFF5
  7175                           prodh	equ	0xFF4
  7176                           prodl	equ	0xFF3
  7177                           intcon	equ	0xFF2
  7178                           intcon3	equ	0xFF0
  7179                           postinc0	equ	0xFEE
  7180                           fsr0h	equ	0xFEA
  7181                           fsr0l	equ	0xFE9
  7182                           wreg	equ	0xFE8
  7183                           plusw1	equ	0xFE3
  7184                           fsr1h	equ	0xFE2
  7185                           fsr1l	equ	0xFE1
  7186                           postinc2	equ	0xFDE
  7187                           postdec2	equ	0xFDD
  7188                           plusw2	equ	0xFDB
  7189                           fsr2h	equ	0xFDA
  7190                           fsr2l	equ	0xFD9
  7191                           status	equ	0xFD8
  7192                           
  7193 ;; *************** function i2_putch *****************
  7194 ;; Defined at:
  7195 ;;		line 26 in file "lcd.c"
  7196 ;; Parameters:    Size  Location     Type
  7197 ;;  data            1    wreg     unsigned char 
  7198 ;; Auto vars:     Size  Location     Type
  7199 ;;  data            1    2[COMRAM] unsigned char 
  7200 ;; Return value:  Size  Location     Type
  7201 ;;                  1    wreg      void 
  7202 ;; Registers used:
  7203 ;;		wreg, status,2, status,0, cstack
  7204 ;; Tracked objects:
  7205 ;;		On entry : 0/0
  7206 ;;		On exit  : 0/0
  7207 ;;		Unchanged: 0/0
  7208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7210 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7212 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7213 ;;Total ram usage:        1 bytes
  7214 ;; Hardware stack levels used:    1
  7215 ;; Hardware stack levels required when called:    1
  7216 ;; This function calls:
  7217 ;;		i2_lcdNibble
  7218 ;; This function is called by:
  7219 ;;		i2_printf
  7220 ;; This function uses a non-reentrant model
  7221 ;;
  7222                           
  7223                           	psect	text37
  7224  0018F0                     __ptext37:
  7225                           	opt stack 0
  7226  0018F0                     i2_putch:
  7227                           	opt stack 20
  7228                           
  7229                           ;incstack = 0
  7230                           ;i2putch@data stored from wreg
  7231  0018F0  6E03               	movwf	i2putch@data,c
  7232                           
  7233                           ;lcd.c: 27: LATDbits.LATD2 = 1;
  7234  0018F2  848C               	bsf	3980,2,c	;volatile
  7235                           
  7236                           ;lcd.c: 28: lcdNibble(data);
  7237  0018F4  5003               	movf	i2putch@data,w,c
  7238  0018F6  EC96  F00A         	call	i2_lcdNibble
  7239  0018FA  0012               	return		;funcret
  7240  0018FC                     __end_ofi2_putch:
  7241                           	opt stack 0
  7242                           pclatu	equ	0xFFB
  7243                           pclath	equ	0xFFA
  7244                           tblptru	equ	0xFF8
  7245                           tblptrh	equ	0xFF7
  7246                           tblptrl	equ	0xFF6
  7247                           tablat	equ	0xFF5
  7248                           prodh	equ	0xFF4
  7249                           prodl	equ	0xFF3
  7250                           intcon	equ	0xFF2
  7251                           intcon3	equ	0xFF0
  7252                           postinc0	equ	0xFEE
  7253                           fsr0h	equ	0xFEA
  7254                           fsr0l	equ	0xFE9
  7255                           wreg	equ	0xFE8
  7256                           plusw1	equ	0xFE3
  7257                           fsr1h	equ	0xFE2
  7258                           fsr1l	equ	0xFE1
  7259                           postinc2	equ	0xFDE
  7260                           postdec2	equ	0xFDD
  7261                           plusw2	equ	0xFDB
  7262                           fsr2h	equ	0xFDA
  7263                           fsr2l	equ	0xFD9
  7264                           status	equ	0xFD8
  7265                           
  7266 ;; *************** function i2___lwmod *****************
  7267 ;; Defined at:
  7268 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  7269 ;; Parameters:    Size  Location     Type
  7270 ;;  dividend        2    7[COMRAM] unsigned int 
  7271 ;;  divisor         2    9[COMRAM] unsigned int 
  7272 ;; Auto vars:     Size  Location     Type
  7273 ;;  __lwmod         1   11[COMRAM] unsigned char 
  7274 ;; Return value:  Size  Location     Type
  7275 ;;                  2    7[COMRAM] unsigned int 
  7276 ;; Registers used:
  7277 ;;		wreg, status,2, status,0
  7278 ;; Tracked objects:
  7279 ;;		On entry : 0/0
  7280 ;;		On exit  : 0/0
  7281 ;;		Unchanged: 0/0
  7282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7283 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7284 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7286 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7287 ;;Total ram usage:        5 bytes
  7288 ;; Hardware stack levels used:    1
  7289 ;; This function calls:
  7290 ;;		Nothing
  7291 ;; This function is called by:
  7292 ;;		i2_printf
  7293 ;; This function uses a non-reentrant model
  7294 ;;
  7295                           
  7296                           	psect	text38
  7297  0016FC                     __ptext38:
  7298                           	opt stack 0
  7299  0016FC                     i2___lwmod:
  7300                           	opt stack 21
  7301                           
  7302                           ;incstack = 0
  7303  0016FC  500A               	movf	i2___lwmod@divisor,w,c
  7304  0016FE  100B               	iorwf	i2___lwmod@divisor+1,w,c
  7305  001700  B4D8               	btfsc	status,2,c
  7306  001702  D018               	goto	i2l820
  7307  001704  0E01               	movlw	1
  7308  001706  6E0C               	movwf	i2___lwmod@counter,c
  7309  001708  D004               	goto	i2l2791
  7310  00170A                     i2l2789:
  7311  00170A  90D8               	bcf	status,0,c
  7312  00170C  360A               	rlcf	i2___lwmod@divisor,f,c
  7313  00170E  360B               	rlcf	i2___lwmod@divisor+1,f,c
  7314  001710  2A0C               	incf	i2___lwmod@counter,f,c
  7315  001712                     i2l2791:
  7316  001712  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  7317  001714  D7FA               	goto	i2l2789
  7318  001716                     i2l2793:
  7319  001716  500A               	movf	i2___lwmod@divisor,w,c
  7320  001718  5C08               	subwf	i2___lwmod@dividend,w,c
  7321  00171A  500B               	movf	i2___lwmod@divisor+1,w,c
  7322  00171C  5809               	subwfb	i2___lwmod@dividend+1,w,c
  7323  00171E  A0D8               	btfss	status,0,c
  7324  001720  D004               	goto	i2l2797
  7325  001722  500A               	movf	i2___lwmod@divisor,w,c
  7326  001724  5E08               	subwf	i2___lwmod@dividend,f,c
  7327  001726  500B               	movf	i2___lwmod@divisor+1,w,c
  7328  001728  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  7329  00172A                     i2l2797:
  7330  00172A  90D8               	bcf	status,0,c
  7331  00172C  320B               	rrcf	i2___lwmod@divisor+1,f,c
  7332  00172E  320A               	rrcf	i2___lwmod@divisor,f,c
  7333  001730  2E0C               	decfsz	i2___lwmod@counter,f,c
  7334  001732  D7F1               	goto	i2l2793
  7335  001734                     i2l820:
  7336  001734  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  7337  001738  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  7338  00173C  0012               	return		;funcret
  7339  00173E                     __end_ofi2___lwmod:
  7340                           	opt stack 0
  7341                           pclatu	equ	0xFFB
  7342                           pclath	equ	0xFFA
  7343                           tblptru	equ	0xFF8
  7344                           tblptrh	equ	0xFF7
  7345                           tblptrl	equ	0xFF6
  7346                           tablat	equ	0xFF5
  7347                           prodh	equ	0xFF4
  7348                           prodl	equ	0xFF3
  7349                           intcon	equ	0xFF2
  7350                           intcon3	equ	0xFF0
  7351                           postinc0	equ	0xFEE
  7352                           fsr0h	equ	0xFEA
  7353                           fsr0l	equ	0xFE9
  7354                           wreg	equ	0xFE8
  7355                           plusw1	equ	0xFE3
  7356                           fsr1h	equ	0xFE2
  7357                           fsr1l	equ	0xFE1
  7358                           postinc2	equ	0xFDE
  7359                           postdec2	equ	0xFDD
  7360                           plusw2	equ	0xFDB
  7361                           fsr2h	equ	0xFDA
  7362                           fsr2l	equ	0xFD9
  7363                           status	equ	0xFD8
  7364                           
  7365 ;; *************** function i2___lwdiv *****************
  7366 ;; Defined at:
  7367 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  7368 ;; Parameters:    Size  Location     Type
  7369 ;;  dividend        2    0[COMRAM] unsigned int 
  7370 ;;  divisor         2    2[COMRAM] unsigned int 
  7371 ;; Auto vars:     Size  Location     Type
  7372 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  7373 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  7374 ;; Return value:  Size  Location     Type
  7375 ;;                  2    0[COMRAM] unsigned int 
  7376 ;; Registers used:
  7377 ;;		wreg, status,2, status,0
  7378 ;; Tracked objects:
  7379 ;;		On entry : 0/0
  7380 ;;		On exit  : 0/0
  7381 ;;		Unchanged: 0/0
  7382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7383 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7384 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7386 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7387 ;;Total ram usage:        7 bytes
  7388 ;; Hardware stack levels used:    1
  7389 ;; This function calls:
  7390 ;;		Nothing
  7391 ;; This function is called by:
  7392 ;;		i2_printf
  7393 ;; This function uses a non-reentrant model
  7394 ;;
  7395                           
  7396                           	psect	text39
  7397  0015D4                     __ptext39:
  7398                           	opt stack 0
  7399  0015D4                     i2___lwdiv:
  7400                           	opt stack 21
  7401                           
  7402                           ;incstack = 0
  7403  0015D4  0E00               	movlw	0
  7404  0015D6  6E06               	movwf	i2___lwdiv@quotient+1,c
  7405  0015D8  0E00               	movlw	0
  7406  0015DA  6E05               	movwf	i2___lwdiv@quotient,c
  7407  0015DC  5003               	movf	i2___lwdiv@divisor,w,c
  7408  0015DE  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  7409  0015E0  B4D8               	btfsc	status,2,c
  7410  0015E2  D01C               	goto	i2l810
  7411  0015E4  0E01               	movlw	1
  7412  0015E6  6E07               	movwf	i2___lwdiv@counter,c
  7413  0015E8  D004               	goto	i2l2771
  7414  0015EA                     i2l2769:
  7415  0015EA  90D8               	bcf	status,0,c
  7416  0015EC  3603               	rlcf	i2___lwdiv@divisor,f,c
  7417  0015EE  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  7418  0015F0  2A07               	incf	i2___lwdiv@counter,f,c
  7419  0015F2                     i2l2771:
  7420  0015F2  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  7421  0015F4  D7FA               	goto	i2l2769
  7422  0015F6                     i2l2773:
  7423  0015F6  90D8               	bcf	status,0,c
  7424  0015F8  3605               	rlcf	i2___lwdiv@quotient,f,c
  7425  0015FA  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  7426  0015FC  5003               	movf	i2___lwdiv@divisor,w,c
  7427  0015FE  5C01               	subwf	i2___lwdiv@dividend,w,c
  7428  001600  5004               	movf	i2___lwdiv@divisor+1,w,c
  7429  001602  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  7430  001604  A0D8               	btfss	status,0,c
  7431  001606  D005               	goto	i2l2781
  7432  001608  5003               	movf	i2___lwdiv@divisor,w,c
  7433  00160A  5E01               	subwf	i2___lwdiv@dividend,f,c
  7434  00160C  5004               	movf	i2___lwdiv@divisor+1,w,c
  7435  00160E  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  7436  001610  8005               	bsf	i2___lwdiv@quotient,0,c
  7437  001612                     i2l2781:
  7438  001612  90D8               	bcf	status,0,c
  7439  001614  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  7440  001616  3203               	rrcf	i2___lwdiv@divisor,f,c
  7441  001618  2E07               	decfsz	i2___lwdiv@counter,f,c
  7442  00161A  D7ED               	goto	i2l2773
  7443  00161C                     i2l810:
  7444  00161C  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  7445  001620  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  7446  001624  0012               	return		;funcret
  7447  001626                     __end_ofi2___lwdiv:
  7448                           	opt stack 0
  7449                           pclatu	equ	0xFFB
  7450                           pclath	equ	0xFFA
  7451                           tblptru	equ	0xFF8
  7452                           tblptrh	equ	0xFF7
  7453                           tblptrl	equ	0xFF6
  7454                           tablat	equ	0xFF5
  7455                           prodh	equ	0xFF4
  7456                           prodl	equ	0xFF3
  7457                           intcon	equ	0xFF2
  7458                           intcon3	equ	0xFF0
  7459                           postinc0	equ	0xFEE
  7460                           fsr0h	equ	0xFEA
  7461                           fsr0l	equ	0xFE9
  7462                           wreg	equ	0xFE8
  7463                           plusw1	equ	0xFE3
  7464                           fsr1h	equ	0xFE2
  7465                           fsr1l	equ	0xFE1
  7466                           postinc2	equ	0xFDE
  7467                           postdec2	equ	0xFDD
  7468                           plusw2	equ	0xFDB
  7469                           fsr2h	equ	0xFDA
  7470                           fsr2l	equ	0xFD9
  7471                           status	equ	0xFD8
  7472                           
  7473 ;; *************** function i2_lcdInst *****************
  7474 ;; Defined at:
  7475 ;;		line 21 in file "lcd.c"
  7476 ;; Parameters:    Size  Location     Type
  7477 ;;  data            1    wreg     unsigned char 
  7478 ;; Auto vars:     Size  Location     Type
  7479 ;;  data            1    2[COMRAM] unsigned char 
  7480 ;; Return value:  Size  Location     Type
  7481 ;;                  1    wreg      void 
  7482 ;; Registers used:
  7483 ;;		wreg, status,2, status,0, cstack
  7484 ;; Tracked objects:
  7485 ;;		On entry : 0/0
  7486 ;;		On exit  : 0/0
  7487 ;;		Unchanged: 0/0
  7488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7490 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7492 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7493 ;;Total ram usage:        1 bytes
  7494 ;; Hardware stack levels used:    1
  7495 ;; Hardware stack levels required when called:    1
  7496 ;; This function calls:
  7497 ;;		i2_lcdNibble
  7498 ;; This function is called by:
  7499 ;;		_keypressed
  7500 ;;		i2_stopMoving
  7501 ;; This function uses a non-reentrant model
  7502 ;;
  7503                           
  7504                           	psect	text40
  7505  0018FC                     __ptext40:
  7506                           	opt stack 0
  7507  0018FC                     i2_lcdInst:
  7508                           	opt stack 21
  7509                           
  7510                           ;incstack = 0
  7511                           ;i2lcdInst@data stored from wreg
  7512  0018FC  6E03               	movwf	i2lcdInst@data,c
  7513                           
  7514                           ;lcd.c: 22: LATDbits.LATD2 = 0;
  7515  0018FE  948C               	bcf	3980,2,c	;volatile
  7516                           
  7517                           ;lcd.c: 23: lcdNibble(data);
  7518  001900  5003               	movf	i2lcdInst@data,w,c
  7519  001902  EC96  F00A         	call	i2_lcdNibble
  7520  001906  0012               	return		;funcret
  7521  001908                     __end_ofi2_lcdInst:
  7522                           	opt stack 0
  7523                           pclatu	equ	0xFFB
  7524                           pclath	equ	0xFFA
  7525                           tblptru	equ	0xFF8
  7526                           tblptrh	equ	0xFF7
  7527                           tblptrl	equ	0xFF6
  7528                           tablat	equ	0xFF5
  7529                           prodh	equ	0xFF4
  7530                           prodl	equ	0xFF3
  7531                           intcon	equ	0xFF2
  7532                           intcon3	equ	0xFF0
  7533                           postinc0	equ	0xFEE
  7534                           fsr0h	equ	0xFEA
  7535                           fsr0l	equ	0xFE9
  7536                           wreg	equ	0xFE8
  7537                           plusw1	equ	0xFE3
  7538                           fsr1h	equ	0xFE2
  7539                           fsr1l	equ	0xFE1
  7540                           postinc2	equ	0xFDE
  7541                           postdec2	equ	0xFDD
  7542                           plusw2	equ	0xFDB
  7543                           fsr2h	equ	0xFDA
  7544                           fsr2l	equ	0xFD9
  7545                           status	equ	0xFD8
  7546                           
  7547 ;; *************** function i2_lcdNibble *****************
  7548 ;; Defined at:
  7549 ;;		line 31 in file "lcd.c"
  7550 ;; Parameters:    Size  Location     Type
  7551 ;;  data            1    wreg     unsigned char 
  7552 ;; Auto vars:     Size  Location     Type
  7553 ;;  data            1    1[COMRAM] unsigned char 
  7554 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  7555 ;; Return value:  Size  Location     Type
  7556 ;;                  1    wreg      void 
  7557 ;; Registers used:
  7558 ;;		wreg, status,2, status,0
  7559 ;; Tracked objects:
  7560 ;;		On entry : 0/0
  7561 ;;		On exit  : 0/0
  7562 ;;		Unchanged: 0/0
  7563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7565 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7567 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7568 ;;Total ram usage:        2 bytes
  7569 ;; Hardware stack levels used:    1
  7570 ;; This function calls:
  7571 ;;		Nothing
  7572 ;; This function is called by:
  7573 ;;		i2_lcdInst
  7574 ;;		i2_putch
  7575 ;; This function uses a non-reentrant model
  7576 ;;
  7577                           
  7578                           	psect	text41
  7579  00152C                     __ptext41:
  7580                           	opt stack 0
  7581  00152C                     i2_lcdNibble:
  7582                           	opt stack 20
  7583                           
  7584                           ;incstack = 0
  7585                           ;i2lcdNibble@data stored from wreg
  7586  00152C  6E02               	movwf	i2lcdNibble@data,c
  7587                           
  7588                           ;lcd.c: 33: char temp = data & 0xF0;
  7589  00152E  5002               	movf	i2lcdNibble@data,w,c
  7590  001530  0BF0               	andlw	240
  7591  001532  6E01               	movwf	i2lcdNibble@temp,c
  7592                           
  7593                           ;lcd.c: 34: LATD = LATD & 0x0F;
  7594  001534  508C               	movf	3980,w,c	;volatile
  7595  001536  0B0F               	andlw	15
  7596  001538  6E8C               	movwf	3980,c	;volatile
  7597                           
  7598                           ;lcd.c: 35: LATD = temp | LATD;
  7599  00153A  5001               	movf	i2lcdNibble@temp,w,c
  7600  00153C  108C               	iorwf	3980,w,c	;volatile
  7601  00153E  6E8C               	movwf	3980,c	;volatile
  7602                           
  7603                           ;lcd.c: 37: LATDbits.LATD3 = 0;
  7604  001540  968C               	bcf	3980,3,c	;volatile
  7605                           
  7606                           ;lcd.c: 38: _delay((unsigned long)((25)*(8000000/4000000.0)));
  7607  001542  0E10               	movlw	16
  7608  001544                     i2u335_47:
  7609  001544  2EE8               	decfsz	wreg,f,c
  7610  001546  D7FE               	bra	i2u335_47
  7611  001548  D000               	nop2	
  7612                           
  7613                           ;lcd.c: 39: LATDbits.LATD3 = 1;
  7614  00154A  868C               	bsf	3980,3,c	;volatile
  7615                           
  7616                           ;lcd.c: 40: _delay((unsigned long)((25)*(8000000/4000000.0)));
  7617  00154C  0E10               	movlw	16
  7618  00154E                     i2u336_47:
  7619  00154E  2EE8               	decfsz	wreg,f,c
  7620  001550  D7FE               	bra	i2u336_47
  7621  001552  D000               	nop2	
  7622                           
  7623                           ;lcd.c: 42: data = data << 4;
  7624  001554  3802               	swapf	i2lcdNibble@data,w,c
  7625  001556  0BF0               	andlw	240
  7626  001558  6E02               	movwf	i2lcdNibble@data,c
  7627                           
  7628                           ;lcd.c: 44: temp = data & 0xF0;
  7629  00155A  5002               	movf	i2lcdNibble@data,w,c
  7630  00155C  0BF0               	andlw	240
  7631  00155E  6E01               	movwf	i2lcdNibble@temp,c
  7632                           
  7633                           ;lcd.c: 45: LATD = LATD & 0x0F;
  7634  001560  508C               	movf	3980,w,c	;volatile
  7635  001562  0B0F               	andlw	15
  7636  001564  6E8C               	movwf	3980,c	;volatile
  7637                           
  7638                           ;lcd.c: 46: LATD = temp | LATD;
  7639  001566  5001               	movf	i2lcdNibble@temp,w,c
  7640  001568  108C               	iorwf	3980,w,c	;volatile
  7641  00156A  6E8C               	movwf	3980,c	;volatile
  7642                           
  7643                           ;lcd.c: 48: LATDbits.LATD3 = 0;
  7644  00156C  968C               	bcf	3980,3,c	;volatile
  7645                           
  7646                           ;lcd.c: 49: _delay((unsigned long)((25)*(8000000/4000000.0)));
  7647  00156E  0E10               	movlw	16
  7648  001570                     i2u337_47:
  7649  001570  2EE8               	decfsz	wreg,f,c
  7650  001572  D7FE               	bra	i2u337_47
  7651  001574  D000               	nop2	
  7652                           
  7653                           ;lcd.c: 50: LATDbits.LATD3 = 1;
  7654  001576  868C               	bsf	3980,3,c	;volatile
  7655                           
  7656                           ;lcd.c: 51: _delay((unsigned long)((25)*(8000000/4000000.0)));
  7657  001578  0E10               	movlw	16
  7658  00157A                     i2u338_47:
  7659  00157A  2EE8               	decfsz	wreg,f,c
  7660  00157C  D7FE               	bra	i2u338_47
  7661  00157E  D000               	nop2	
  7662  001580  0012               	return		;funcret
  7663  001582                     __end_ofi2_lcdNibble:
  7664                           	opt stack 0
  7665                           pclatu	equ	0xFFB
  7666                           pclath	equ	0xFFA
  7667                           tblptru	equ	0xFF8
  7668                           tblptrh	equ	0xFF7
  7669                           tblptrl	equ	0xFF6
  7670                           tablat	equ	0xFF5
  7671                           prodh	equ	0xFF4
  7672                           prodl	equ	0xFF3
  7673                           intcon	equ	0xFF2
  7674                           intcon3	equ	0xFF0
  7675                           postinc0	equ	0xFEE
  7676                           fsr0h	equ	0xFEA
  7677                           fsr0l	equ	0xFE9
  7678                           wreg	equ	0xFE8
  7679                           plusw1	equ	0xFE3
  7680                           fsr1h	equ	0xFE2
  7681                           fsr1l	equ	0xFE1
  7682                           postinc2	equ	0xFDE
  7683                           postdec2	equ	0xFDD
  7684                           plusw2	equ	0xFDB
  7685                           fsr2h	equ	0xFDA
  7686                           fsr2l	equ	0xFD9
  7687                           status	equ	0xFD8
  7688                           pclatu	equ	0xFFB
  7689                           pclath	equ	0xFFA
  7690                           tblptru	equ	0xFF8
  7691                           tblptrh	equ	0xFF7
  7692                           tblptrl	equ	0xFF6
  7693                           tablat	equ	0xFF5
  7694                           prodh	equ	0xFF4
  7695                           prodl	equ	0xFF3
  7696                           intcon	equ	0xFF2
  7697                           intcon3	equ	0xFF0
  7698                           postinc0	equ	0xFEE
  7699                           fsr0h	equ	0xFEA
  7700                           fsr0l	equ	0xFE9
  7701                           wreg	equ	0xFE8
  7702                           plusw1	equ	0xFE3
  7703                           fsr1h	equ	0xFE2
  7704                           fsr1l	equ	0xFE1
  7705                           postinc2	equ	0xFDE
  7706                           postdec2	equ	0xFDD
  7707                           plusw2	equ	0xFDB
  7708                           fsr2h	equ	0xFDA
  7709                           fsr2l	equ	0xFD9
  7710                           status	equ	0xFD8
  7711                           
  7712                           	psect	rparam
  7713  0000                     pclatu	equ	0xFFB
  7714                           pclath	equ	0xFFA
  7715                           tblptru	equ	0xFF8
  7716                           tblptrh	equ	0xFF7
  7717                           tblptrl	equ	0xFF6
  7718                           tablat	equ	0xFF5
  7719                           prodh	equ	0xFF4
  7720                           prodl	equ	0xFF3
  7721                           intcon	equ	0xFF2
  7722                           intcon3	equ	0xFF0
  7723                           postinc0	equ	0xFEE
  7724                           fsr0h	equ	0xFEA
  7725                           fsr0l	equ	0xFE9
  7726                           wreg	equ	0xFE8
  7727                           plusw1	equ	0xFE3
  7728                           fsr1h	equ	0xFE2
  7729                           fsr1l	equ	0xFE1
  7730                           postinc2	equ	0xFDE
  7731                           postdec2	equ	0xFDD
  7732                           plusw2	equ	0xFDB
  7733                           fsr2h	equ	0xFDA
  7734                           fsr2l	equ	0xFD9
  7735                           status	equ	0xFD8
  7736                           
  7737                           	psect	temp
  7738  00005A                     btemp:
  7739                           	opt stack 0
  7740  00005A                     	ds	1
  7741  0000                     int$flags	set	btemp
  7742                           pclatu	equ	0xFFB
  7743                           pclath	equ	0xFFA
  7744                           tblptru	equ	0xFF8
  7745                           tblptrh	equ	0xFF7
  7746                           tblptrl	equ	0xFF6
  7747                           tablat	equ	0xFF5
  7748                           prodh	equ	0xFF4
  7749                           prodl	equ	0xFF3
  7750                           intcon	equ	0xFF2
  7751                           intcon3	equ	0xFF0
  7752                           postinc0	equ	0xFEE
  7753                           fsr0h	equ	0xFEA
  7754                           fsr0l	equ	0xFE9
  7755                           wreg	equ	0xFE8
  7756                           plusw1	equ	0xFE3
  7757                           fsr1h	equ	0xFE2
  7758                           fsr1l	equ	0xFE1
  7759                           postinc2	equ	0xFDE
  7760                           postdec2	equ	0xFDD
  7761                           plusw2	equ	0xFDB
  7762                           fsr2h	equ	0xFDA
  7763                           fsr2l	equ	0xFD9
  7764                           status	equ	0xFD8


Data Sizes:
    Strings     405
    Constant    10
    Data        0
    BSS         16
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     81      89
    BANK0           128     65      73
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_42(CODE[16]), STR_41(CODE[14]), STR_40(CODE[9]), STR_39(CODE[16]), 
		 -> STR_38(CODE[13]), STR_37(CODE[14]), STR_36(CODE[3]), STR_35(CODE[3]), 
		 -> STR_34(CODE[11]), STR_33(CODE[18]), STR_32(CODE[15]), STR_31(CODE[9]), 
		 -> STR_30(CODE[16]), STR_29(CODE[12]), STR_28(CODE[14]), STR_27(CODE[3]), 
		 -> STR_26(CODE[16]), STR_25(CODE[14]), STR_24(CODE[7]), STR_23(CODE[6]), 
		 -> STR_22(CODE[14]), STR_21(CODE[15]), STR_20(CODE[16]), STR_19(CODE[3]), 
		 -> STR_18(CODE[11]), STR_17(CODE[3]), STR_16(CODE[11]), STR_15(CODE[3]), 
		 -> STR_14(CODE[10]), STR_13(CODE[3]), STR_12(CODE[11]), STR_11(CODE[13]), 
		 -> STR_10(CODE[14]), STR_9(CODE[11]), STR_8(CODE[14]), STR_7(CODE[14]), 
		 -> STR_6(CODE[15]), STR_5(CODE[17]), STR_4(CODE[12]), STR_3(CODE[12]), 
		 -> STR_2(CODE[11]), STR_1(CODE[11]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(COMRAM[2]), 

    checkC9V@sorted	PTR int  size(2) Largest target is 8
		 -> simulate@sorted(BANK0[8]), mainloop@sorted(COMRAM[8]), 

    checkAA@sorted	PTR int  size(2) Largest target is 8
		 -> simulate@sorted(BANK0[8]), mainloop@sorted(COMRAM[8]), 

    moveSmallNose@prev	PTR int  size(2) Largest target is 2
		 -> main@smallNose(BANK0[2]), 

    moveBigNose@prev	PTR int  size(2) Largest target is 2
		 -> main@bigNose(BANK0[2]), 

    showInfo@sorted	PTR unsigned int  size(2) Largest target is 8
		 -> simulate@sorted(BANK0[8]), mainloop@sorted(COMRAM[8]), 

    simulate@bigNose	PTR int  size(2) Largest target is 2
		 -> main@bigNose(BANK0[2]), 

    simulate@smallNose	PTR int  size(2) Largest target is 2
		 -> main@smallNose(BANK0[2]), 


Critical Paths under _main in COMRAM

    _stopMoving->_printf
    _showInfo->_printf
    _runPWM1->_set_PWM1_duty
    _set_PWM_freq->___aldiv
    _set_PWM1_duty->___ftmul
    ___lwtoft->___ftpack
    ___fttol->___ftmul
    _moveSmallNose->_printf
    _moveBigNose->_printf
    _checkV->___ftge
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    ___ftmul->___ftdiv
    ___ftge->___ftmul
    ___ftdiv->___lwtoft
    ___awtoft->___ftpack
    _initialize->_initLCD
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _keypressed in COMRAM

    i2_stopMoving->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    _main->_simulate
    _simulate->_moveXMotors
    _moveXMotors->_runPWM1
    _runPWM1->_set_PWM1_duty
    _set_PWM1_duty->___fttol
    _checkC9V->_checkV
    _checkAA->_checkV
    _checkV->___ftge

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                14     9      5  106473
                                             51 BANK0     14     9      5
                      _captureKeypad
                         _initialize
                            _lcdInst
                        _moveBigNose
                      _moveSmallNose
                             _printf
                           _simulate
 ---------------------------------------------------------------------------------
 (1) _simulate                                            22    18      4   89267
                                             29 BANK0     22    18      4
                      _captureKeypad
                            _checkAA
                           _checkC9V
                            _getTime
                            _lcdInst
                        _moveBigNose
                      _moveSmallNose
                        _moveXMotors
                             _printf
                           _showInfo
                         _stopMoving
 ---------------------------------------------------------------------------------
 (2) _stopMoving                                           0     0      0    4999
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _showInfo                                            14    10      4    5646
                                             61 COMRAM    14    10      4
                      _captureKeypad
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _captureKeypad                                        3     1      2      23
                                             37 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _moveXMotors                                          2     2      0   19084
                                             27 BANK0      2     2      0
                          _PWM1_Stop
                             _printf
                            _runPWM1
 ---------------------------------------------------------------------------------
 (3) _runPWM1                                              8     2      6   14280
                                             19 BANK0      8     2      6
                         _PWM1_Start
                      _set_PWM1_duty
                       _set_PWM_freq
 ---------------------------------------------------------------------------------
 (4) _set_PWM_freq                                         8     4      4     728
                                             51 COMRAM     8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (5) ___aldiv                                             14     6      8     556
                                             37 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (4) _set_PWM1_duty                                        6     2      4   13302
                                             78 COMRAM     2     2      0
                                             15 BANK0      4     0      4
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (5) ___lwtoft                                             3     0      3    2649
                                             45 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             15    11      4     525
                                              0 BANK0     15    11      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) _PWM1_Start                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _PWM1_Stop                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _moveSmallNose                                        7     3      4    5684
                                             61 COMRAM     7     3      4
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _moveBigNose                                          7     3      4    5684
                                             61 COMRAM     7     3      4
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _getTime                                              4     2      2      23
                                             37 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _checkC9V                                             8     6      2   21318
                                             13 BANK0      8     6      2
                                 _AD
                             _checkV
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _checkAA                                              4     2      2   21058
                                             13 BANK0      4     2      2
                                 _AD
                             _checkV
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _checkV                                               7     2      5   15821
                                              6 BANK0      7     2      5
                                 _AD (ARG)
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              21    17      4    4804
                                             49 COMRAM    12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     195
                                             39 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     386
                                             44 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     395
                                             37 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    3528
                                             63 COMRAM    15     9      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     352
                                             78 COMRAM     3     3      0
                                              0 BANK0      6     0      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftdiv                                             15     9      6    3460
                                             48 COMRAM    15     9      6
                           ___ftpack
                           ___ftpack (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awtoft                                             4     1      3    2828
                                             45 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    2464
                                             37 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) _AD                                                   5     3      2      22
                                             37 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0     390
                            _initLCD
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     195
                                             40 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     195
                                             39 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNibble                                            2     2      0     164
                                             37 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _keypressed                                          15    15      0    1265
                                             22 COMRAM    15    15      0
                          i2_lcdInst
                       i2_stopMoving
 ---------------------------------------------------------------------------------
 (8) i2_stopMoving                                         0     0      0    1129
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            19    17      2     994
                                             12 COMRAM    10     8      2
                          i2___lwdiv
                          i2___lwmod
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     214
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (9) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _captureKeypad
   _initialize
     _initLCD
       _lcdInst
         _lcdNibble
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _moveBigNose
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _lcdNibble
   _moveSmallNose
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _lcdNibble
   _simulate
     _captureKeypad
     _checkAA
       _AD
       _checkV
         _AD (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _lcdInst (ARG)
           _lcdNibble
         _printf (ARG)
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
             _lcdNibble
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
     _checkC9V
       _AD
       _checkV
         _AD (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         _lcdInst (ARG)
           _lcdNibble
         _printf (ARG)
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _putch
             _lcdNibble
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
     _getTime
     _lcdInst
       _lcdNibble
     _moveBigNose
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
     _moveSmallNose
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
     _moveXMotors
       _PWM1_Stop
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
       _runPWM1
         _PWM1_Start
         _set_PWM1_duty
           ___awtoft
             ___ftpack
           ___ftdiv
             ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___ftpack
                 ___ftpack (ARG)
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lwtoft
             ___ftpack
         _set_PWM_freq
           ___aldiv
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _lcdNibble
     _showInfo
       _captureKeypad
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble
     _stopMoving
       _lcdInst
         _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _lcdNibble

 _keypressed (ROOT)
   i2_lcdInst
     i2_lcdNibble
   i2_stopMoving
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2_putch
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     41      49       5       57.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     51      59       1       70.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A2      34        0.0%
DATA                 0      0      A2       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Feb 23 01:08:54 2017

                     _AD 177C       i2___lwdiv@dividend 0001              __CFG_BORV$3 000000  
           __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000  
           __CFG_CP3$OFF 000000              __CFG_OSC$HS 000000                      ?_AD 0026  
                    l151 1870                      l311 189E                      l154 187C  
                    l173 04EE                      l346 0F54                      l362 01F0  
                    l632 124A                      l376 0294                      l810 15CA  
                    l820 16F2                      l690 0E4C             __CFG_CPB$OFF 000000  
                    _PR2 000FCB             __CFG_CPD$OFF 000000        set_PWM1_duty@duty 008F  
                    wreg 000FE8              main@bigNose 00BD                     ??_AD 0028  
           __CFG_LVP$OFF 000000             ___ftdiv@cntr 003A             ___ftdiv@sign 003F  
           __CFG_WDT$OFF 000000                     l4001 06D2                     l4013 071A  
                   l4033 0782                     l4025 0768                     l4113 018C  
                   l4201 0440                     l4131 0246                     l4115 01DC  
                   l4107 0178                     l2371 106C                     l2381 109E  
                   l2365 1054                     l4213 04B4                     l4221 04F2  
                   l4039 078E                     l4119 01F8                     l4055 002A  
                   l4207 047A                     l2721 178C                     l4145 029C  
                   l2377 108E                     l2393 10DC                     l4401 0A12  
                   l2723 179C                     l4083 00DC                     l4067 007C  
                   l2379 109A                     l3613 0DE8                     l2397 10F2  
                   l2389 10CE                     l4181 0346                     l4405 0A24  
                   l3703 17CC                     l3607 0DC0                     l4095 012A  
                   l4079 00CC                     l4183 0354                     l3633 0E26  
                   l3801 0A5E                     l3713 081C                     l3571 11E4  
                   l3811 0A7C                     l3731 08AE                     l4195 040A  
                   l4283 061E                     l4275 05E8                     l4259 0582  
                   l4371 096E                     l4363 0952                     l4355 0930  
                   l3581 1240                     l3573 1202                     l3565 11CC  
                   l3653 0CCC                     l3813 0AA2                     l3805 0A6E  
                   l3741 08DE                     l4189 0382                     l4381 09B4  
                   l3823 0ACA                     l3807 0A74                     l3743 08EE  
                   l3735 08C2                     l4287 0676                     l4375 0986  
                   l4367 0964                     l4359 093A                     l3577 1218  
                   l3569 11DA                     l3673 0D26                     l3761 15A0  
                   l3841 0B0C                     l3825 0ACE                     l3745 08F8  
                   l4393 09F0                     l4385 09BE                     l3579 1236  
                   l3683 0D4E                     l3659 0CF4                     l3771 15C0  
                   l3763 15A4                     l3843 0B12                     l3907 0EE2  
                   l3677 0D36                     l3781 16D0                     l3837 0AFA  
                   l4581 01D0                     l3941 134A                     l3749 0914  
                   l4397 09FA                     l4389 09D6                     l3687 0D5E  
                   l3759 1598                     l3783 16D4                     l3847 0B5A  
                   l4583 02D2                     l3951 1390                     l3865 113C  
                   l3849 0B62                     l4585 02E4                     l3961 0F84  
                   l3945 1362                     l3875 11B8                     l3787 16E8  
                   l3779 16C8                     l3891 0E9E                     l4587 07C4  
                   l4579 01C4                     l3963 0F92                     l3947 136A  
                   l3939 133E                     l3859 142E                     l3869 1174  
                   l4589 07D6                     l3973 0FEC                     l3965 0FA0  
                   l3949 1388                     l3895 0EA8                     l3975 0FF4  
                   l3959 0F76                     l3967 0FAE                     l3977 1012  
                   l3969 0FD4                     _ADFM 007E07                     l3899 0EC0  
                   l3979 101A                     _ADON 007E10                     _P1M0 007DEE  
                   _P1M1 007DEF                     STR_1 FFC4                     STR_2 FFC4  
                   STR_3 FF75                     STR_4 FF81                     STR_5 FE7B  
                   STR_6 FEFA                     STR_7 FF41                     STR_8 FF25  
                   STR_9 FFB9                     _LATA 000F89                     _LATB 000F8A  
                   _LATC 000F8B                     _LATD 000F8C                     u2401 0CB4  
                   _LATE 000F8D                     u2421 0CDC                     u2351 0DA8  
                   u3207 00FC                     u3127 0942                     u3217 014A  
                   u3137 0976                     u3307 16AE                     u2371 0DD0  
                   u3227 0218                     u1635 128C                     u3147 09C6  
                   u2700 142C                     u3317 14EE                     u3237 0266  
                   u1645 129C                     u3157 0A02                     u3327 14F8  
                   u3247 06C2                     u2471 07F8                     u1655 12E4  
                   u3167 030E                     u3337 151A                     u3257 06F2  
                   u3177 1660                     u2490 0842                     u3347 1524  
                   u3267 073A                     u3187 004A                     u3277 0EB0  
                   u3197 00AA                     u3287 1792                     u2495 0838  
                   u2920 066C                     u3297 167A                     u2860 007A  
                   u2880 01F0                     u2891 0556            checkAA@sorted 008D  
  __end_of_set_PWM1_duty 1448                     _main 0926             ___ftpack@arg 0026  
           ___ftpack@exp 0029                     fsr0h 000FEA                     fsr1h 000FE2  
     i2___lwdiv@quotient 0005                     fsr2h 000FDA                     fsr0l 000FE9  
                   fsr1l 000FE1                     fsr2l 000FD9                     btemp 005A  
                   prodh 000FF4                     prodl 000FF3                     start 000E  
          __CFG_IESO$OFF 000000             simulate@stop 00A5          __end_ofi2_putch 18FC  
          __CFG_MCLRE$ON 000000             ___ftmul@cntr 004D             ___param_bank 000000  
           ___ftmul@sign 004E              i2_lcdNibble 152C             ___fttol@exp1 008E  
         checkC9V@sorted 008D             ___fttol@lval 008A          __end_of___aldiv 1104  
                  ?_main 00B3                    _CCP1X 007DED                    _CCP1Y 007DEC  
                  _CCP2X 007DD5                    _CCP2Y 007DD4                    STR_10 FF33  
                  STR_11 FF5C                    STR_12 FFA3                    STR_20 FEBC  
                  STR_13 FFFB                    STR_21 FEEB                    STR_14 FFCF  
                  STR_22 FF17                    STR_30 FE9C                    STR_23 FE96  
                  STR_15 FFFB                    STR_31 FFD9                    STR_24 FFEB  
                  STR_40 FFE2                    STR_16 FFAE                    STR_32 FEDC  
                  STR_41 FE8E                    STR_25 FF17                    STR_17 FFFB  
                  STR_33 FE69                    STR_18 FF98                    STR_34 FF8D  
                  STR_26 FECC                    STR_42 FE8C                    STR_19 FFFB  
                  STR_27 FFF8                    STR_35 FFF2                    STR_28 FF17  
                  STR_36 FFF5                    STR_29 FF69                    STR_37 FF09  
                  STR_38 FF4F                    STR_39 FEAC          __end_of___ftdiv 0E7E  
        __end_of___ftmul 0D98          __end_of___fttol 0926                    _LATC0 007C58  
                  _LATC1 007C59                    _LATC2 007C5A                    _LATC3 007C5B  
        __end_of___lwdiv 15D4          __end_of___lwmod 16FC                    i2l311 18B4  
                  i2l161 149A                    i2l810 161C                    i2l820 1734  
   __end_ofi2_stopMoving 18B6          __end_of_checkAA 07E2                    _PORTB 000F81  
                  _PORTC 000F82                    _TRISA 000F92                    _TRISB 000F93  
                  _TRISC 000F94                    _TRISD 000F95                    _TRISE 000F96  
          __CFG_PWRT$OFF 000000            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          simulate@F3216 00C1            __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000  
        __end_of_lcdInst 18F0           __CFG_EBTR0$OFF 000000           __CFG_FCMEN$OFF 000000  
        __end_of_getTime 18C8           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000              ?_PWM1_Start 0001          __end_of_initLCD 16BA  
         __CFG_EBTRB$OFF 000000            ___awtoft@sign 0031       __size_of_PWM1_Stop 000A  
        __end_of_dpowers FE69            ___ftpack@sign 002A                    _putch 18D8  
                  main@i 00B9                    pclath 000FFA                    tablat 000FF5  
        __end_of_runPWM1 1826                    plusw1 000FE3                    plusw2 000FDB  
                  status 000FD8           __CFG_PBADEN$ON 000000         __end_ofi2_printf 0CA4  
     __size_ofi2___lwdiv 0052       __size_ofi2___lwmod 0042        moveSmallNose@next 0040  
      moveSmallNose@prev 003E          __initialization 1826       __size_ofi2_lcdInst 000C  
           __end_of_main 0A54          runPWM1@max_duty 0099               i2printf@ap 0010  
                 ??_main 00B8            ___fttol@sign1 0089            __activetblptr 000002  
           ?_moveBigNose 003E                   _ADCON0 000FC2                   _ADCON1 000FC1  
                 _CCP1M0 007DE8                   _CCP1M1 007DE9                   _CCP1M2 007DEA  
                 _CCP1M3 007DEB                   _CCP2M0 007DD0                   _CCP2M1 007DD1  
                 _CCP2M2 007DD2                   _CCP2M3 007DD3             ?_moveXMotors 0001  
                 _ADRESH 000FC4                   _ADRESL 000FC3                   _CCPR1L 000FBE  
                 _CCPR2L 000FBB          i2lcdNibble@data 0002         __end_of___awtoft 17F0  
                 ?_putch 0001         __end_of___ftpack 126A          i2lcdNibble@temp 0001  
                 _INT1IE 007F83                   _INT1IF 007F80                   _CVRCON 000FB5  
  __end_of_moveSmallNose 13AE                   i2l3131 0B86                   i2l3141 0BA4  
                 i2l3143 0BCA                   i2l3135 0B96                   i2l3153 0BF2  
                 i2l3137 0B9C                   i2l3171 0C34                   i2l3155 0BF6  
                 i2l3173 0C3A                   i2l3167 0C22                   i2l3177 0C82  
                 i2l3179 0C8A                   i2l2771 15F2                   i2l2781 1612  
                 i2l2773 15F6                   i2l2791 1712                   i2l2769 15EA  
                 i2l2793 1716                   i2l2797 172A                   i2l2789 170A  
           _checkC9V$645 0091         __end_of___lwtoft 1870                ??i2_putch 0003  
       __end_of_checkC9V 02F0                   _TMR2ON 007E52                AD@channel 002A  
          checkV@voltage 0086           __CFG_XINST$OFF 000000    __end_of_captureKeypad 188A  
                 ___ftge 1104                ??___aldiv 002E        __end_of_PWM1_Stop 1912  
                 _checkV 0E7E           __CFG_STVREN$ON 000000      __size_of_PWM1_Start 0010  
              ??___ftdiv 0037                ??___ftmul 0046                ??___fttol 0084  
              ??___lwdiv 002A                ??___lwmod 0031                ??_checkAA 008F  
                 clear_0 182C                   clear_1 1838            main@smallNose 00BF  
              ??_lcdInst 0028                   _printf 0A54                ??_getTime 0028  
  ___ftmul@f3_as_product 004A                ??_initLCD 0029         __end_of_showInfo 0530  
      __end_ofi2___lwdiv 1626             __mediumconst FE5E        __end_ofi2___lwmod 173E  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
       __end_of_simulate 069C                ??_runPWM1 0051        __end_ofi2_lcdInst 1908  
         simulate@sorted 00AB               __accesstop 0080  __end_of__initialization 183E  
             ___ftge@ff1 0080               ___ftge@ff2 0083            ___rparam_used 000001  
             ___ftdiv@f1 0031               ___ftdiv@f2 0034               ___ftdiv@f3 003B  
             ___awtoft@c 002E               ___ftmul@f1 0040               ___ftmul@f2 0043  
             ___fttol@f1 0080       i2___lwmod@dividend 0008           __pcstackCOMRAM 0001  
  __size_ofi2_stopMoving 0016            __end_of_putch 18E4              i2printf@val 0014  
             __end_of_AD 17B8               ___lwtoft@c 002E       __size_of_lcdNibble 0056  
            i2putch@data 0003                ?i2_printf 000D            ?_set_PWM_freq 0034  
                ??_putch 0028               __pbssBANK0 00C1             i2_stopMoving 18A0  
                ?___ftge 0080             ?i2_lcdNibble 0001                  ?_checkV 0086  
  set_PWM1_duty@Max_Duty 0091                ?___awtoft 002E                ?___ftpack 0026  
                ?_printf 0032                ?___lwtoft 002E                ?_checkC9V 008D  
   __size_of_moveBigNose 00DC               ??i2_printf 000F             ??_PWM1_Start 0026  
         ??_set_PWM_freq 0038     __size_of_moveXMotors 004E                  i2_putch 18F0  
      __end_of_lcdNibble 152C                  __Hparam 0000                  __Lparam 0000  
              ?_showInfo 003E                  ___aldiv 1038          __size_of___ftge 00B8  
              ?_simulate 009D                  ___ftdiv 0D98                  ___ftmul 0CA4  
                ___fttol 07E2          __size_of_checkV 00DE                  ___lwdiv 1582  
                ___lwmod 16BA       __end_of_PWM1_Start 18D8                  _checkAA 069C  
                __pcinit 1826               ??___awtoft 0031               ??___ftpack 002B  
                __ramtop 1000               _initialize 173E                  _lcdInst 18E4  
                __ptext0 0926                  __ptext1 0530                  __ptext2 188A  
                __ptext3 02F0                  _getTime 18B6                  __ptext4 1870  
                __ptext5 1626                  __ptext6 17F0                  __ptext7 126A  
                __ptext8 1038                  __ptext9 13AE          __size_of_printf 0128  
             ??___lwtoft 0031                  _initLCD 1674   __size_of_set_PWM1_duty 009A  
             ??_checkC9V 008F                  checkV@i 008C                  _dpowers FE5F  
       ___aldiv@dividend 0026               _keypressed 0008                  _runPWM1 17F0  
         __pintcode_body 1448     end_of_initialization 183E              runPWM1@freq 0095  
            runPWM1@duty 0093            __Lmediumconst FE5E                  int_func 1448  
        set_PWM_freq@fre 0034          simulate@bigNose 009D               ??_showInfo 0042  
                printf@c 003D                  printf@f 0032         ___aldiv@quotient 0030  
                postdec2 000FDD               ??_simulate 00A1                  postinc0 000FEE  
                postinc2 000FDE                _PWM1_Stop 1908                _PORTBbits 000F81  
              _TRISCbits 000F94        i2___lwdiv@divisor 0003                i2___lwdiv 15D4  
              i2___lwmod 16FC        i2___lwdiv@counter 0007                i2_lcdInst 18FC  
            ___ftdiv@exp 003E            _set_PWM1_duty 13AE               _stopMoving 188A  
            ___ftmul@exp 0049     __end_of_set_PWM_freq 1310           __end_of___ftge 11BC  
         __end_of_checkV 0F5C     __size_ofi2_lcdNibble 0056            mainloop@F3207 0052  
            ?_initialize 0001               ?_PWM1_Stop 0001            i2lcdInst@data 0003  
 __size_of_moveSmallNose 009E           __end_of_printf 0B7C             i2printf@flag 0012  
           i2printf@prec 0013      start_initialization 1826              ?_keypressed 0001  
              i2printf@c 0016                i2printf@f 000D   __size_of_captureKeypad 001A  
             ?i2___lwdiv 0001               ?i2___lwmod 0008        __size_ofi2_printf 0128  
             ?i2_lcdInst 0001           ?_set_PWM1_duty 008F          moveBigNose@next 0040  
        moveBigNose@prev 003E                 ??___ftge 004F                 ??_checkV 008B  
       __CFG_LPT1OSC$OFF 000000                 ??_printf 0036        __size_of___awtoft 0038  
      __size_of___ftpack 00AE              __pbssCOMRAM 0052        __size_of___lwtoft 0024  
          __pcstackBANK0 0080        __size_of_checkC9V 02DE        i2___lwmod@divisor 000A  
      i2___lwmod@counter 000C            _moveSmallNose 1310                 ?i2_putch 0001  
    __size_of_initialize 003E              ?_stopMoving 0001         ___lwdiv@dividend 0026  
      __CFG_CCP2MX$PORTC 000000            _captureKeypad 1870      __size_of_keypressed 14CE  
              __pintcode 0008            __pmediumconst FE5E                _lcdNibble 14D6  
               ?___aldiv 0026                 ?___ftdiv 0031                 ?___ftmul 0040  
               ?___fttol 0080                 ?___lwdiv 0026                 ?___lwmod 002D  
      __size_of_showInfo 0240                 ?_checkAA 008D        __size_of_simulate 016C  
            ??_PWM1_Stop 0026                 ?_lcdInst 0001                 ?_getTime 0026  
          ??_moveBigNose 0042                checkC9V@i 0093                 ?_initLCD 0001  
              checkV@max 0088                 ?_runPWM1 0093            ??_moveXMotors 009B  
       ___lwdiv@quotient 002B              ??i2___lwdiv 0005              ??i2___lwmod 000C  
         __size_of_putch 000C          ??_set_PWM1_duty 004F              __size_of_AD 003C  
         ?_moveSmallNose 003E          ___aldiv@divisor 002A              ??i2_lcdInst 0003  
        ___aldiv@counter 002E                 _LATDbits 000F8C    __size_of_set_PWM_freq 00A6  
               i2u335_47 1544                 i2u336_47 154E                 i2u337_47 1570  
               i2u338_47 157A           ?_captureKeypad 0026         __CFG_WDTPS$32768 000000  
             ?_lcdNibble 0001               _ADCON0bits 000FC2                main@i_184 00BA  
              main@i_187 00BB                main@i_188 00BC            lcdNibble@data 0027  
             printf@flag 0039            lcdNibble@temp 0026               printf@prec 003A  
             simulate@C9 00A9               simulate@AA 00A7      __size_of_stopMoving 0016  
               i2_printf 0B7C    captureKeypad@keypress 0028      __end_of_moveBigNose 1038  
           _set_PWM_freq 126A      __end_of_moveXMotors 1674         __size_ofi2_putch 000C  
     keypressed@keypress 0025           showInfo@sorted 0040                 __Hrparam 0000  
               __Lrparam 0000       __CFG_BOREN$SBORDIS 000000         __size_of___aldiv 00CC  
       __size_of___ftdiv 00E6         __size_of___ftmul 00F4         __size_of___fttol 0144  
       __size_of___lwdiv 0052         __size_of___lwmod 0042             ??_initialize 002A  
               ___awtoft 17B8                 ___ftpack 11BC         __size_of_checkAA 0146  
               ___lwtoft 184C         __size_of_lcdInst 000C         __size_of_getTime 0012  
               _checkC9V 0012         __size_of_initLCD 0046             ??_keypressed 0017  
        ___lwdiv@divisor 0028          ___lwdiv@counter 002A                 __ptext10 184C  
               __ptext11 07E2                 __ptext20 0A54                 __ptext12 18C8  
               __ptext21 18D8                 __ptext13 1908                 __ptext30 173E  
               __ptext22 16BA                 __ptext14 1310                 __ptext31 1674  
               __ptext23 1582                 __ptext15 0F5C                 __ptext40 18FC  
               __ptext32 18E4                 __ptext24 0CA4                 __ptext16 18B6  
               __ptext41 152C                 __ptext33 14D6                 __ptext25 1104  
               __ptext17 0012                 __ptext26 0D98                 __ptext18 069C  
               __ptext35 18A0                 __ptext27 17B8                 __ptext19 0E7E  
               __ptext36 0B7C                 __ptext28 11BC                 __ptext37 18F0  
               __ptext29 177C                 __ptext38 16FC                 __ptext39 15D4  
       __size_of_runPWM1 0036          ??_moveSmallNose 0042            __size_of_main 012E  
     __end_of_initialize 177C          ??_captureKeypad 0028            ?i2_stopMoving 0001  
               _showInfo 02F0            ??i2_lcdNibble 0001              ??_lcdNibble 0026  
               _simulate 0530       __end_of_keypressed 14D6                 int$flags 005A  
               main@argc 00B3                 main@argv 00B5                printf@val 003B  
            _moveBigNose 0F5C                putch@data 0028               _INTCONbits 000FF2  
            _moveXMotors 1626                 intlevel2 0000         ___lwmod@dividend 002D  
         ??i2_stopMoving 0017             ??_stopMoving 003E                 printf@ap 0037  
            lcdInst@data 0028             showInfo@time 003E             showInfo@type 004A  
    __end_ofi2_lcdNibble 1582          ___lwmod@divisor 002F        simulate@smallNose 009F  
        ___lwmod@counter 0031             ___aldiv@sign 002F       __end_of_stopMoving 18A0  
             _PWM1_Start 18C8              getTime@time 0028        simulate@startTime 00A3  

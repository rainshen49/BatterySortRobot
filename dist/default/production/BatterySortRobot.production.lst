

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Feb 27 16:21:34 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    35                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1
    67                           	psect	text55,global,reloc=2,class=CODE,delta=1
    68                           	psect	text56,global,reloc=2,class=CODE,delta=1
    69                           	psect	text57,global,reloc=2,class=CODE,delta=1
    70                           	psect	text58,global,reloc=2,class=CODE,delta=1
    71                           	psect	text59,global,reloc=2,class=CODE,delta=1
    72                           	psect	text60,global,reloc=2,class=CODE,delta=1
    73                           	psect	text61,global,reloc=2,class=CODE,delta=1
    74                           	psect	text62,global,reloc=2,class=CODE,delta=1
    75                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    76                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    77                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    78  0000                     
    79                           ; Version 1.41
    80                           ; Generated 25/01/2017 GMT
    81                           ; 
    82                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution.
    96                           ; 
    97                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    98                           ;        software without specific prior written permission.
    99                           ; 
   100                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   101                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   102                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   103                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   104                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   105                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   106                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   107                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   108                           ; 
   109                           ; 
   110                           ; Code-generator required, PIC18F4620 Definitions
   111                           ; 
   112                           ; SFR Addresses
   113  0000                     
   114                           	psect	mediumconst
   115  00FC6C                     __pmediumconst:
   116                           	opt stack 0
   117  00FC6C  00                 	db	0
   118  00FC6D                     _dpowers:
   119                           	opt stack 0
   120  00FC6D  0001               	dw	1
   121  00FC6F  000A               	dw	10
   122  00FC71  0064               	dw	100
   123  00FC73  03E8               	dw	1000
   124  00FC75  2710               	dw	10000
   125  00FC77                     __end_of_dpowers:
   126                           	opt stack 0
   127  00FC77                     _hexpowers:
   128                           	opt stack 0
   129  00FC77  0001               	dw	1
   130  00FC79  0010               	dw	16
   131  00FC7B  0100               	dw	256
   132  00FC7D  1000               	dw	4096
   133  00FC7F                     __end_of_hexpowers:
   134                           	opt stack 0
   135  0000                     _PIR2bits	set	4001
   136  0000                     _EECON2	set	4007
   137  0000                     _EEDATA	set	4008
   138  0000                     _EECON1bits	set	4006
   139  0000                     _EEADR	set	4009
   140  0000                     _EEADRH	set	4010
   141  0000                     _SSPBUF	set	4041
   142  0000                     _SSPADD	set	4040
   143  0000                     _SSPCON2	set	4037
   144  0000                     _SSPCON1	set	4038
   145  0000                     _SSPSTAT	set	4039
   146  0000                     _ADRESL	set	4035
   147  0000                     _ADRESH	set	4036
   148  0000                     _ADCON0bits	set	4034
   149  0000                     _LATDbits	set	3980
   150  0000                     _PORTBbits	set	3969
   151  0000                     _PORTB	set	3969
   152  0000                     _INTCONbits	set	4082
   153  0000                     _CVRCON	set	4021
   154  0000                     _ADCON1	set	4033
   155  0000                     _ADCON0	set	4034
   156  0000                     _LATE	set	3981
   157  0000                     _LATD	set	3980
   158  0000                     _LATC	set	3979
   159  0000                     _LATB	set	3978
   160  0000                     _LATA	set	3977
   161  0000                     _TRISE	set	3990
   162  0000                     _TRISD	set	3989
   163  0000                     _TRISC	set	3988
   164  0000                     _TRISB	set	3987
   165  0000                     _TRISA	set	3986
   166  0000                     _ACKEN	set	32300
   167  0000                     _ACKDT	set	32301
   168  0000                     _RCEN	set	32299
   169  0000                     _PEN	set	32298
   170  0000                     _SEN	set	32296
   171  0000                     _TRISC4	set	31908
   172  0000                     _TRISC3	set	31907
   173  0000                     _ADON	set	32272
   174  0000                     _INT1IF	set	32640
   175  0000                     _INT1IE	set	32643
   176  0000                     _LATC5	set	31837
   177  0000                     _ADFM	set	32263
   178  0000                     _LATC2	set	31834
   179  0000                     _LATC1	set	31833
   180  0000                     _LATC0	set	31832
   181  00FC7F                     STR_15:
   182                           
   183                           ; BSR set to: 0
   184  00FC7F  53                 	db	83	;'S'
   185  00FC80  6F                 	db	111	;'o'
   186  00FC81  72                 	db	114	;'r'
   187  00FC82  74                 	db	116	;'t'
   188  00FC83  69                 	db	105	;'i'
   189  00FC84  6E                 	db	110	;'n'
   190  00FC85  67                 	db	103	;'g'
   191  00FC86  20                 	db	32
   192  00FC87  43                 	db	67	;'C'
   193  00FC88  6F                 	db	111	;'o'
   194  00FC89  6D                 	db	109	;'m'
   195  00FC8A  70                 	db	112	;'p'
   196  00FC8B  6C                 	db	108	;'l'
   197  00FC8C  65                 	db	101	;'e'
   198  00FC8D  74                 	db	116	;'t'
   199  00FC8E  65                 	db	101	;'e'
   200  00FC8F  20                 	db	32
   201  00FC90  20                 	db	32
   202  00FC91  20                 	db	32
   203  00FC92  20                 	db	32
   204  00FC93  20                 	db	32
   205  00FC94  20                 	db	32
   206  00FC95  20                 	db	32
   207  00FC96  20                 	db	32
   208  00FC97  20                 	db	32
   209  00FC98  20                 	db	32
   210  00FC99  00                 	db	0
   211  00FC9A                     STR_19:
   212                           
   213                           ; BSR set to: 0
   214  00FC9A  50                 	db	80	;'P'
   215  00FC9B  72                 	db	114	;'r'
   216  00FC9C  65                 	db	101	;'e'
   217  00FC9D  73                 	db	115	;'s'
   218  00FC9E  73                 	db	115	;'s'
   219  00FC9F  20                 	db	32
   220  00FCA0  61                 	db	97	;'a'
   221  00FCA1  20                 	db	32
   222  00FCA2  6E                 	db	110	;'n'
   223  00FCA3  75                 	db	117	;'u'
   224  00FCA4  6D                 	db	109	;'m'
   225  00FCA5  62                 	db	98	;'b'
   226  00FCA6  65                 	db	101	;'e'
   227  00FCA7  72                 	db	114	;'r'
   228  00FCA8  20                 	db	32
   229  00FCA9  20                 	db	32
   230  00FCAA  20                 	db	32
   231  00FCAB  20                 	db	32
   232  00FCAC  20                 	db	32
   233  00FCAD  20                 	db	32
   234  00FCAE  20                 	db	32
   235  00FCAF  20                 	db	32
   236  00FCB0  20                 	db	32
   237  00FCB1  20                 	db	32
   238  00FCB2  00                 	db	0
   239  00FCB3                     STR_21:
   240                           
   241                           ; BSR set to: 0
   242  00FCB3  54                 	db	84	;'T'
   243  00FCB4  69                 	db	105	;'i'
   244  00FCB5  6D                 	db	109	;'m'
   245  00FCB6  65                 	db	101	;'e'
   246  00FCB7  20                 	db	32
   247  00FCB8  45                 	db	69	;'E'
   248  00FCB9  6C                 	db	108	;'l'
   249  00FCBA  61                 	db	97	;'a'
   250  00FCBB  70                 	db	112	;'p'
   251  00FCBC  73                 	db	115	;'s'
   252  00FCBD  65                 	db	101	;'e'
   253  00FCBE  64                 	db	100	;'d'
   254  00FCBF  3A                 	db	58	;':'
   255  00FCC0  20                 	db	32
   256  00FCC1  20                 	db	32
   257  00FCC2  20                 	db	32
   258  00FCC3  20                 	db	32
   259  00FCC4  20                 	db	32
   260  00FCC5  20                 	db	32
   261  00FCC6  20                 	db	32
   262  00FCC7  20                 	db	32
   263  00FCC8  20                 	db	32
   264  00FCC9  20                 	db	32
   265  00FCCA  00                 	db	0
   266  00FCCB                     STR_23:
   267                           
   268                           ; BSR set to: 0
   269  00FCCB  54                 	db	84	;'T'
   270  00FCCC  6F                 	db	111	;'o'
   271  00FCCD  74                 	db	116	;'t'
   272  00FCCE  61                 	db	97	;'a'
   273  00FCCF  6C                 	db	108	;'l'
   274  00FCD0  20                 	db	32
   275  00FCD1  53                 	db	83	;'S'
   276  00FCD2  6F                 	db	111	;'o'
   277  00FCD3  72                 	db	114	;'r'
   278  00FCD4  74                 	db	116	;'t'
   279  00FCD5  65                 	db	101	;'e'
   280  00FCD6  64                 	db	100	;'d'
   281  00FCD7  3A                 	db	58	;':'
   282  00FCD8  20                 	db	32
   283  00FCD9  20                 	db	32
   284  00FCDA  20                 	db	32
   285  00FCDB  20                 	db	32
   286  00FCDC  20                 	db	32
   287  00FCDD  20                 	db	32
   288  00FCDE  20                 	db	32
   289  00FCDF  20                 	db	32
   290  00FCE0  20                 	db	32
   291  00FCE1  20                 	db	32
   292  00FCE2  00                 	db	0
   293  00FCE3                     STR_20:
   294                           
   295                           ; BSR set to: 0
   296  00FCE3  46                 	db	70	;'F'
   297  00FCE4  6F                 	db	111	;'o'
   298  00FCE5  72                 	db	114	;'r'
   299  00FCE6  20                 	db	32
   300  00FCE7  6D                 	db	109	;'m'
   301  00FCE8  6F                 	db	111	;'o'
   302  00FCE9  72                 	db	114	;'r'
   303  00FCEA  65                 	db	101	;'e'
   304  00FCEB  20                 	db	32
   305  00FCEC  69                 	db	105	;'i'
   306  00FCED  6E                 	db	110	;'n'
   307  00FCEE  66                 	db	102	;'f'
   308  00FCEF  6F                 	db	111	;'o'
   309  00FCF0  20                 	db	32
   310  00FCF1  20                 	db	32
   311  00FCF2  20                 	db	32
   312  00FCF3  20                 	db	32
   313  00FCF4  20                 	db	32
   314  00FCF5  20                 	db	32
   315  00FCF6  20                 	db	32
   316  00FCF7  20                 	db	32
   317  00FCF8  20                 	db	32
   318  00FCF9  20                 	db	32
   319  00FCFA  00                 	db	0
   320  00FCFB                     STR_2:
   321                           
   322                           ; BSR set to: 0
   323  00FCFB  53                 	db	83	;'S'
   324  00FCFC  69                 	db	105	;'i'
   325  00FCFD  6D                 	db	109	;'m'
   326  00FCFE  75                 	db	117	;'u'
   327  00FCFF  6C                 	db	108	;'l'
   328  00FD00  61                 	db	97	;'a'
   329  00FD01  74                 	db	116	;'t'
   330  00FD02  69                 	db	105	;'i'
   331  00FD03  6E                 	db	110	;'n'
   332  00FD04  67                 	db	103	;'g'
   333  00FD05  2E                 	db	46
   334  00FD06  2E                 	db	46
   335  00FD07  2E                 	db	46
   336  00FD08  20                 	db	32
   337  00FD09  20                 	db	32
   338  00FD0A  20                 	db	32
   339  00FD0B  20                 	db	32
   340  00FD0C  20                 	db	32
   341  00FD0D  20                 	db	32
   342  00FD0E  20                 	db	32
   343  00FD0F  20                 	db	32
   344  00FD10  20                 	db	32
   345  00FD11  20                 	db	32
   346  00FD12  00                 	db	0
   347  00FD13                     STR_16:
   348                           
   349                           ; BSR set to: 0
   350  00FD13  25                 	db	37
   351  00FD14  30                 	db	48	;'0'
   352  00FD15  32                 	db	50	;'2'
   353  00FD16  78                 	db	120	;'x'
   354  00FD17  2F                 	db	47
   355  00FD18  25                 	db	37
   356  00FD19  30                 	db	48	;'0'
   357  00FD1A  32                 	db	50	;'2'
   358  00FD1B  78                 	db	120	;'x'
   359  00FD1C  2F                 	db	47
   360  00FD1D  25                 	db	37
   361  00FD1E  30                 	db	48	;'0'
   362  00FD1F  32                 	db	50	;'2'
   363  00FD20  78                 	db	120	;'x'
   364  00FD21  20                 	db	32
   365  00FD22  20                 	db	32
   366  00FD23  20                 	db	32
   367  00FD24  20                 	db	32
   368  00FD25  20                 	db	32
   369  00FD26  20                 	db	32
   370  00FD27  20                 	db	32
   371  00FD28  20                 	db	32
   372  00FD29  20                 	db	32
   373  00FD2A  00                 	db	0
   374  00FD2B                     STR_17:
   375                           
   376                           ; BSR set to: 0
   377  00FD2B  25                 	db	37
   378  00FD2C  30                 	db	48	;'0'
   379  00FD2D  32                 	db	50	;'2'
   380  00FD2E  78                 	db	120	;'x'
   381  00FD2F  3A                 	db	58	;':'
   382  00FD30  25                 	db	37
   383  00FD31  30                 	db	48	;'0'
   384  00FD32  32                 	db	50	;'2'
   385  00FD33  78                 	db	120	;'x'
   386  00FD34  3A                 	db	58	;':'
   387  00FD35  25                 	db	37
   388  00FD36  30                 	db	48	;'0'
   389  00FD37  32                 	db	50	;'2'
   390  00FD38  78                 	db	120	;'x'
   391  00FD39  20                 	db	32
   392  00FD3A  20                 	db	32
   393  00FD3B  20                 	db	32
   394  00FD3C  20                 	db	32
   395  00FD3D  20                 	db	32
   396  00FD3E  20                 	db	32
   397  00FD3F  20                 	db	32
   398  00FD40  20                 	db	32
   399  00FD41  20                 	db	32
   400  00FD42  00                 	db	0
   401  00FD43                     STR_40:
   402                           
   403                           ; BSR set to: 0
   404  00FD43  75                 	db	117	;'u'
   405  00FD44  6E                 	db	110	;'n'
   406  00FD45  63                 	db	99	;'c'
   407  00FD46  68                 	db	104	;'h'
   408  00FD47  61                 	db	97	;'a'
   409  00FD48  72                 	db	114	;'r'
   410  00FD49  67                 	db	103	;'g'
   411  00FD4A  65                 	db	101	;'e'
   412  00FD4B  64                 	db	100	;'d'
   413  00FD4C  20                 	db	32
   414  00FD4D  41                 	db	65	;'A'
   415  00FD4E  41                 	db	65	;'A'
   416  00FD4F  20                 	db	32
   417  00FD50  20                 	db	32
   418  00FD51  20                 	db	32
   419  00FD52  20                 	db	32
   420  00FD53  20                 	db	32
   421  00FD54  20                 	db	32
   422  00FD55  20                 	db	32
   423  00FD56  20                 	db	32
   424  00FD57  20                 	db	32
   425  00FD58  20                 	db	32
   426  00FD59  00                 	db	0
   427  00FD5A                     STR_48:
   428                           
   429                           ; BSR set to: 0
   430  00FD5A  75                 	db	117	;'u'
   431  00FD5B  6E                 	db	110	;'n'
   432  00FD5C  63                 	db	99	;'c'
   433  00FD5D  68                 	db	104	;'h'
   434  00FD5E  61                 	db	97	;'a'
   435  00FD5F  72                 	db	114	;'r'
   436  00FD60  67                 	db	103	;'g'
   437  00FD61  65                 	db	101	;'e'
   438  00FD62  64                 	db	100	;'d'
   439  00FD63  20                 	db	32
   440  00FD64  39                 	db	57	;'9'
   441  00FD65  56                 	db	86	;'V'
   442  00FD66  20                 	db	32
   443  00FD67  20                 	db	32
   444  00FD68  20                 	db	32
   445  00FD69  20                 	db	32
   446  00FD6A  20                 	db	32
   447  00FD6B  20                 	db	32
   448  00FD6C  20                 	db	32
   449  00FD6D  20                 	db	32
   450  00FD6E  20                 	db	32
   451  00FD6F  20                 	db	32
   452  00FD70  00                 	db	0
   453  00FD71                     STR_24:
   454                           
   455                           ; BSR set to: 0
   456  00FD71  25                 	db	37
   457  00FD72  64                 	db	100	;'d'
   458  00FD73  20                 	db	32
   459  00FD74  62                 	db	98	;'b'
   460  00FD75  61                 	db	97	;'a'
   461  00FD76  74                 	db	116	;'t'
   462  00FD77  74                 	db	116	;'t'
   463  00FD78  65                 	db	101	;'e'
   464  00FD79  72                 	db	114	;'r'
   465  00FD7A  69                 	db	105	;'i'
   466  00FD7B  65                 	db	101	;'e'
   467  00FD7C  73                 	db	115	;'s'
   468  00FD7D  20                 	db	32
   469  00FD7E  20                 	db	32
   470  00FD7F  20                 	db	32
   471  00FD80  20                 	db	32
   472  00FD81  20                 	db	32
   473  00FD82  20                 	db	32
   474  00FD83  20                 	db	32
   475  00FD84  20                 	db	32
   476  00FD85  20                 	db	32
   477  00FD86  20                 	db	32
   478  00FD87  00                 	db	0
   479  00FD88                     STR_44:
   480                           
   481                           ; BSR set to: 0
   482  00FD88  75                 	db	117	;'u'
   483  00FD89  6E                 	db	110	;'n'
   484  00FD8A  63                 	db	99	;'c'
   485  00FD8B  68                 	db	104	;'h'
   486  00FD8C  61                 	db	97	;'a'
   487  00FD8D  72                 	db	114	;'r'
   488  00FD8E  67                 	db	103	;'g'
   489  00FD8F  65                 	db	101	;'e'
   490  00FD90  64                 	db	100	;'d'
   491  00FD91  20                 	db	32
   492  00FD92  43                 	db	67	;'C'
   493  00FD93  20                 	db	32
   494  00FD94  20                 	db	32
   495  00FD95  20                 	db	32
   496  00FD96  20                 	db	32
   497  00FD97  20                 	db	32
   498  00FD98  20                 	db	32
   499  00FD99  20                 	db	32
   500  00FD9A  20                 	db	32
   501  00FD9B  20                 	db	32
   502  00FD9C  20                 	db	32
   503  00FD9D  00                 	db	0
   504  00FD9E                     STR_5:
   505                           
   506                           ; BSR set to: 0
   507  00FD9E  41                 	db	65	;'A'
   508  00FD9F  41                 	db	65	;'A'
   509  00FDA0  53                 	db	83	;'S'
   510  00FDA1  65                 	db	101	;'e'
   511  00FDA2  72                 	db	114	;'r'
   512  00FDA3  76                 	db	118	;'v'
   513  00FDA4  6F                 	db	111	;'o'
   514  00FDA5  53                 	db	83	;'S'
   515  00FDA6  74                 	db	116	;'t'
   516  00FDA7  61                 	db	97	;'a'
   517  00FDA8  79                 	db	121	;'y'
   518  00FDA9  73                 	db	115	;'s'
   519  00FDAA  20                 	db	32
   520  00FDAB  20                 	db	32
   521  00FDAC  20                 	db	32
   522  00FDAD  20                 	db	32
   523  00FDAE  20                 	db	32
   524  00FDAF  20                 	db	32
   525  00FDB0  20                 	db	32
   526  00FDB1  20                 	db	32
   527  00FDB2  20                 	db	32
   528  00FDB3  00                 	db	0
   529  00FDB4                     STR_4:
   530                           
   531                           ; BSR set to: 0
   532  00FDB4  41                 	db	65	;'A'
   533  00FDB5  41                 	db	65	;'A'
   534  00FDB6  53                 	db	83	;'S'
   535  00FDB7  65                 	db	101	;'e'
   536  00FDB8  72                 	db	114	;'r'
   537  00FDB9  76                 	db	118	;'v'
   538  00FDBA  6F                 	db	111	;'o'
   539  00FDBB  52                 	db	82	;'R'
   540  00FDBC  69                 	db	105	;'i'
   541  00FDBD  67                 	db	103	;'g'
   542  00FDBE  68                 	db	104	;'h'
   543  00FDBF  74                 	db	116	;'t'
   544  00FDC0  20                 	db	32
   545  00FDC1  20                 	db	32
   546  00FDC2  20                 	db	32
   547  00FDC3  20                 	db	32
   548  00FDC4  20                 	db	32
   549  00FDC5  20                 	db	32
   550  00FDC6  20                 	db	32
   551  00FDC7  20                 	db	32
   552  00FDC8  20                 	db	32
   553  00FDC9  00                 	db	0
   554  00FDCA                     STR_31:
   555                           
   556                           ; BSR set to: 0
   557  00FDCA  55                 	db	85	;'U'
   558  00FDCB  6E                 	db	110	;'n'
   559  00FDCC  63                 	db	99	;'c'
   560  00FDCD  68                 	db	104	;'h'
   561  00FDCE  61                 	db	97	;'a'
   562  00FDCF  72                 	db	114	;'r'
   563  00FDD0  67                 	db	103	;'g'
   564  00FDD1  65                 	db	101	;'e'
   565  00FDD2  64                 	db	100	;'d'
   566  00FDD3  3A                 	db	58	;':'
   567  00FDD4  20                 	db	32
   568  00FDD5  20                 	db	32
   569  00FDD6  20                 	db	32
   570  00FDD7  20                 	db	32
   571  00FDD8  20                 	db	32
   572  00FDD9  20                 	db	32
   573  00FDDA  20                 	db	32
   574  00FDDB  20                 	db	32
   575  00FDDC  20                 	db	32
   576  00FDDD  20                 	db	32
   577  00FDDE  00                 	db	0
   578  00FDDF                     STR_25:
   579                           
   580                           ; BSR set to: 0
   581  00FDDF  41                 	db	65	;'A'
   582  00FDE0  41                 	db	65	;'A'
   583  00FDE1  20                 	db	32
   584  00FDE2  53                 	db	83	;'S'
   585  00FDE3  6F                 	db	111	;'o'
   586  00FDE4  72                 	db	114	;'r'
   587  00FDE5  74                 	db	116	;'t'
   588  00FDE6  65                 	db	101	;'e'
   589  00FDE7  64                 	db	100	;'d'
   590  00FDE8  3A                 	db	58	;':'
   591  00FDE9  20                 	db	32
   592  00FDEA  20                 	db	32
   593  00FDEB  20                 	db	32
   594  00FDEC  20                 	db	32
   595  00FDED  20                 	db	32
   596  00FDEE  20                 	db	32
   597  00FDEF  20                 	db	32
   598  00FDF0  20                 	db	32
   599  00FDF1  20                 	db	32
   600  00FDF2  20                 	db	32
   601  00FDF3  00                 	db	0
   602  00FDF4                     STR_29:
   603                           
   604                           ; BSR set to: 0
   605  00FDF4  39                 	db	57	;'9'
   606  00FDF5  56                 	db	86	;'V'
   607  00FDF6  20                 	db	32
   608  00FDF7  53                 	db	83	;'S'
   609  00FDF8  6F                 	db	111	;'o'
   610  00FDF9  72                 	db	114	;'r'
   611  00FDFA  74                 	db	116	;'t'
   612  00FDFB  65                 	db	101	;'e'
   613  00FDFC  64                 	db	100	;'d'
   614  00FDFD  3A                 	db	58	;':'
   615  00FDFE  20                 	db	32
   616  00FDFF  20                 	db	32
   617  00FE00  20                 	db	32
   618  00FE01  20                 	db	32
   619  00FE02  20                 	db	32
   620  00FE03  20                 	db	32
   621  00FE04  20                 	db	32
   622  00FE05  20                 	db	32
   623  00FE06  20                 	db	32
   624  00FE07  20                 	db	32
   625  00FE08  00                 	db	0
   626  00FE09                     STR_22:
   627                           
   628                           ; BSR set to: 0
   629  00FE09  25                 	db	37
   630  00FE0A  75                 	db	117	;'u'
   631  00FE0B  20                 	db	32
   632  00FE0C  73                 	db	115	;'s'
   633  00FE0D  65                 	db	101	;'e'
   634  00FE0E  63                 	db	99	;'c'
   635  00FE0F  6F                 	db	111	;'o'
   636  00FE10  6E                 	db	110	;'n'
   637  00FE11  64                 	db	100	;'d'
   638  00FE12  73                 	db	115	;'s'
   639  00FE13  20                 	db	32
   640  00FE14  20                 	db	32
   641  00FE15  20                 	db	32
   642  00FE16  20                 	db	32
   643  00FE17  20                 	db	32
   644  00FE18  20                 	db	32
   645  00FE19  20                 	db	32
   646  00FE1A  20                 	db	32
   647  00FE1B  20                 	db	32
   648  00FE1C  20                 	db	32
   649  00FE1D  00                 	db	0
   650  00FE1E                     
   651                           ; BSR set to: 0
   652  00FE1E  53                 	db	83	;'S'
   653  00FE1F  6F                 	db	111	;'o'
   654  00FE20  72                 	db	114	;'r'
   655  00FE21  74                 	db	116	;'t'
   656  00FE22  69                 	db	105	;'i'
   657  00FE23  6E                 	db	110	;'n'
   658  00FE24  67                 	db	103	;'g'
   659  00FE25  2E                 	db	46
   660  00FE26  2E                 	db	46
   661  00FE27  2E                 	db	46
   662  00FE28  20                 	db	32
   663  00FE29  20                 	db	32
   664  00FE2A  20                 	db	32
   665  00FE2B  20                 	db	32
   666  00FE2C  20                 	db	32
   667  00FE2D  20                 	db	32
   668  00FE2E  20                 	db	32
   669  00FE2F  20                 	db	32
   670  00FE30  20                 	db	32
   671  00FE31  20                 	db	32
   672  00FE32  00                 	db	0
   673  00FE33                     STR_11:
   674                           
   675                           ; BSR set to: 0
   676  00FE33  39                 	db	57	;'9'
   677  00FE34  53                 	db	83	;'S'
   678  00FE35  65                 	db	101	;'e'
   679  00FE36  72                 	db	114	;'r'
   680  00FE37  76                 	db	118	;'v'
   681  00FE38  6F                 	db	111	;'o'
   682  00FE39  53                 	db	83	;'S'
   683  00FE3A  74                 	db	116	;'t'
   684  00FE3B  61                 	db	97	;'a'
   685  00FE3C  79                 	db	121	;'y'
   686  00FE3D  73                 	db	115	;'s'
   687  00FE3E  20                 	db	32
   688  00FE3F  20                 	db	32
   689  00FE40  20                 	db	32
   690  00FE41  20                 	db	32
   691  00FE42  20                 	db	32
   692  00FE43  20                 	db	32
   693  00FE44  20                 	db	32
   694  00FE45  20                 	db	32
   695  00FE46  20                 	db	32
   696  00FE47  00                 	db	0
   697  00FE48                     STR_8:
   698                           
   699                           ; BSR set to: 0
   700  00FE48  43                 	db	67	;'C'
   701  00FE49  53                 	db	83	;'S'
   702  00FE4A  65                 	db	101	;'e'
   703  00FE4B  72                 	db	114	;'r'
   704  00FE4C  76                 	db	118	;'v'
   705  00FE4D  6F                 	db	111	;'o'
   706  00FE4E  53                 	db	83	;'S'
   707  00FE4F  74                 	db	116	;'t'
   708  00FE50  61                 	db	97	;'a'
   709  00FE51  79                 	db	121	;'y'
   710  00FE52  73                 	db	115	;'s'
   711  00FE53  20                 	db	32
   712  00FE54  20                 	db	32
   713  00FE55  20                 	db	32
   714  00FE56  20                 	db	32
   715  00FE57  20                 	db	32
   716  00FE58  20                 	db	32
   717  00FE59  20                 	db	32
   718  00FE5A  20                 	db	32
   719  00FE5B  20                 	db	32
   720  00FE5C  00                 	db	0
   721  00FE5D                     STR_3:
   722                           
   723                           ; BSR set to: 0
   724  00FE5D  41                 	db	65	;'A'
   725  00FE5E  41                 	db	65	;'A'
   726  00FE5F  53                 	db	83	;'S'
   727  00FE60  65                 	db	101	;'e'
   728  00FE61  72                 	db	114	;'r'
   729  00FE62  76                 	db	118	;'v'
   730  00FE63  6F                 	db	111	;'o'
   731  00FE64  4C                 	db	76	;'L'
   732  00FE65  65                 	db	101	;'e'
   733  00FE66  66                 	db	102	;'f'
   734  00FE67  74                 	db	116	;'t'
   735  00FE68  20                 	db	32
   736  00FE69  20                 	db	32
   737  00FE6A  20                 	db	32
   738  00FE6B  20                 	db	32
   739  00FE6C  20                 	db	32
   740  00FE6D  20                 	db	32
   741  00FE6E  20                 	db	32
   742  00FE6F  20                 	db	32
   743  00FE70  20                 	db	32
   744  00FE71  00                 	db	0
   745  00FE72                     STR_10:
   746                           
   747                           ; BSR set to: 0
   748  00FE72  39                 	db	57	;'9'
   749  00FE73  53                 	db	83	;'S'
   750  00FE74  65                 	db	101	;'e'
   751  00FE75  72                 	db	114	;'r'
   752  00FE76  76                 	db	118	;'v'
   753  00FE77  6F                 	db	111	;'o'
   754  00FE78  52                 	db	82	;'R'
   755  00FE79  69                 	db	105	;'i'
   756  00FE7A  67                 	db	103	;'g'
   757  00FE7B  68                 	db	104	;'h'
   758  00FE7C  74                 	db	116	;'t'
   759  00FE7D  20                 	db	32
   760  00FE7E  20                 	db	32
   761  00FE7F  20                 	db	32
   762  00FE80  20                 	db	32
   763  00FE81  20                 	db	32
   764  00FE82  20                 	db	32
   765  00FE83  20                 	db	32
   766  00FE84  20                 	db	32
   767  00FE85  20                 	db	32
   768  00FE86  00                 	db	0
   769  00FE87                     STR_7:
   770                           
   771                           ; BSR set to: 0
   772  00FE87  43                 	db	67	;'C'
   773  00FE88  53                 	db	83	;'S'
   774  00FE89  65                 	db	101	;'e'
   775  00FE8A  72                 	db	114	;'r'
   776  00FE8B  76                 	db	118	;'v'
   777  00FE8C  6F                 	db	111	;'o'
   778  00FE8D  52                 	db	82	;'R'
   779  00FE8E  69                 	db	105	;'i'
   780  00FE8F  67                 	db	103	;'g'
   781  00FE90  68                 	db	104	;'h'
   782  00FE91  74                 	db	116	;'t'
   783  00FE92  20                 	db	32
   784  00FE93  20                 	db	32
   785  00FE94  20                 	db	32
   786  00FE95  20                 	db	32
   787  00FE96  20                 	db	32
   788  00FE97  20                 	db	32
   789  00FE98  20                 	db	32
   790  00FE99  20                 	db	32
   791  00FE9A  20                 	db	32
   792  00FE9B  00                 	db	0
   793  00FE9C                     STR_35:
   794                           
   795                           ; BSR set to: 0
   796  00FE9C  45                 	db	69	;'E'
   797  00FE9D  6D                 	db	109	;'m'
   798  00FE9E  65                 	db	101	;'e'
   799  00FE9F  72                 	db	114	;'r'
   800  00FEA0  67                 	db	103	;'g'
   801  00FEA1  65                 	db	101	;'e'
   802  00FEA2  6E                 	db	110	;'n'
   803  00FEA3  63                 	db	99	;'c'
   804  00FEA4  79                 	db	121	;'y'
   805  00FEA5  20                 	db	32
   806  00FEA6  20                 	db	32
   807  00FEA7  20                 	db	32
   808  00FEA8  20                 	db	32
   809  00FEA9  20                 	db	32
   810  00FEAA  20                 	db	32
   811  00FEAB  20                 	db	32
   812  00FEAC  20                 	db	32
   813  00FEAD  20                 	db	32
   814  00FEAE  20                 	db	32
   815  00FEAF  00                 	db	0
   816  00FEB0                     STR_27:
   817                           
   818                           ; BSR set to: 0
   819  00FEB0  43                 	db	67	;'C'
   820  00FEB1  20                 	db	32
   821  00FEB2  53                 	db	83	;'S'
   822  00FEB3  6F                 	db	111	;'o'
   823  00FEB4  72                 	db	114	;'r'
   824  00FEB5  74                 	db	116	;'t'
   825  00FEB6  65                 	db	101	;'e'
   826  00FEB7  64                 	db	100	;'d'
   827  00FEB8  3A                 	db	58	;':'
   828  00FEB9  20                 	db	32
   829  00FEBA  20                 	db	32
   830  00FEBB  20                 	db	32
   831  00FEBC  20                 	db	32
   832  00FEBD  20                 	db	32
   833  00FEBE  20                 	db	32
   834  00FEBF  20                 	db	32
   835  00FEC0  20                 	db	32
   836  00FEC1  20                 	db	32
   837  00FEC2  20                 	db	32
   838  00FEC3  00                 	db	0
   839  00FEC4                     STR_9:
   840                           
   841                           ; BSR set to: 0
   842  00FEC4  39                 	db	57	;'9'
   843  00FEC5  53                 	db	83	;'S'
   844  00FEC6  65                 	db	101	;'e'
   845  00FEC7  72                 	db	114	;'r'
   846  00FEC8  76                 	db	118	;'v'
   847  00FEC9  6F                 	db	111	;'o'
   848  00FECA  4C                 	db	76	;'L'
   849  00FECB  65                 	db	101	;'e'
   850  00FECC  66                 	db	102	;'f'
   851  00FECD  74                 	db	116	;'t'
   852  00FECE  20                 	db	32
   853  00FECF  20                 	db	32
   854  00FED0  20                 	db	32
   855  00FED1  20                 	db	32
   856  00FED2  20                 	db	32
   857  00FED3  20                 	db	32
   858  00FED4  20                 	db	32
   859  00FED5  20                 	db	32
   860  00FED6  20                 	db	32
   861  00FED7  00                 	db	0
   862  00FED8                     STR_6:
   863                           
   864                           ; BSR set to: 0
   865  00FED8  43                 	db	67	;'C'
   866  00FED9  53                 	db	83	;'S'
   867  00FEDA  65                 	db	101	;'e'
   868  00FEDB  72                 	db	114	;'r'
   869  00FEDC  76                 	db	118	;'v'
   870  00FEDD  6F                 	db	111	;'o'
   871  00FEDE  4C                 	db	76	;'L'
   872  00FEDF  65                 	db	101	;'e'
   873  00FEE0  66                 	db	102	;'f'
   874  00FEE1  74                 	db	116	;'t'
   875  00FEE2  20                 	db	32
   876  00FEE3  20                 	db	32
   877  00FEE4  20                 	db	32
   878  00FEE5  20                 	db	32
   879  00FEE6  20                 	db	32
   880  00FEE7  20                 	db	32
   881  00FEE8  20                 	db	32
   882  00FEE9  20                 	db	32
   883  00FEEA  20                 	db	32
   884  00FEEB  00                 	db	0
   885  00FEEC                     STR_12:
   886                           
   887                           ; BSR set to: 0
   888  00FEEC  73                 	db	115	;'s'
   889  00FEED  74                 	db	116	;'t'
   890  00FEEE  61                 	db	97	;'a'
   891  00FEEF  72                 	db	114	;'r'
   892  00FEF0  74                 	db	116	;'t'
   893  00FEF1  20                 	db	32
   894  00FEF2  25                 	db	37
   895  00FEF3  30                 	db	48	;'0'
   896  00FEF4  32                 	db	50	;'2'
   897  00FEF5  78                 	db	120	;'x'
   898  00FEF6  3A                 	db	58	;':'
   899  00FEF7  25                 	db	37
   900  00FEF8  30                 	db	48	;'0'
   901  00FEF9  32                 	db	50	;'2'
   902  00FEFA  78                 	db	120	;'x'
   903  00FEFB  20                 	db	32
   904  00FEFC  20                 	db	32
   905  00FEFD  20                 	db	32
   906  00FEFE  20                 	db	32
   907  00FEFF  00                 	db	0
   908  00FF00                     STR_18:
   909                           
   910                           ; BSR set to: 0
   911  00FF00  57                 	db	87	;'W'
   912  00FF01  65                 	db	101	;'e'
   913  00FF02  6C                 	db	108	;'l'
   914  00FF03  63                 	db	99	;'c'
   915  00FF04  6F                 	db	111	;'o'
   916  00FF05  6D                 	db	109	;'m'
   917  00FF06  65                 	db	101	;'e'
   918  00FF07  21                 	db	33
   919  00FF08  20                 	db	32
   920  00FF09  20                 	db	32
   921  00FF0A  20                 	db	32
   922  00FF0B  20                 	db	32
   923  00FF0C  20                 	db	32
   924  00FF0D  20                 	db	32
   925  00FF0E  20                 	db	32
   926  00FF0F  20                 	db	32
   927  00FF10  20                 	db	32
   928  00FF11  20                 	db	32
   929  00FF12  00                 	db	0
   930  00FF13                     STR_13:
   931                           
   932                           ; BSR set to: 0
   933  00FF13  6E                 	db	110	;'n'
   934  00FF14  6F                 	db	111	;'o'
   935  00FF15  77                 	db	119	;'w'
   936  00FF16  20                 	db	32
   937  00FF17  25                 	db	37
   938  00FF18  30                 	db	48	;'0'
   939  00FF19  32                 	db	50	;'2'
   940  00FF1A  78                 	db	120	;'x'
   941  00FF1B  3A                 	db	58	;':'
   942  00FF1C  25                 	db	37
   943  00FF1D  30                 	db	48	;'0'
   944  00FF1E  32                 	db	50	;'2'
   945  00FF1F  78                 	db	120	;'x'
   946  00FF20  20                 	db	32
   947  00FF21  20                 	db	32
   948  00FF22  20                 	db	32
   949  00FF23  20                 	db	32
   950  00FF24  20                 	db	32
   951  00FF25  00                 	db	0
   952  00FF26                     STR_36:
   953                           
   954                           ; BSR set to: 0
   955  00FF26  53                 	db	83	;'S'
   956  00FF27  74                 	db	116	;'t'
   957  00FF28  6F                 	db	111	;'o'
   958  00FF29  70                 	db	112	;'p'
   959  00FF2A  70                 	db	112	;'p'
   960  00FF2B  65                 	db	101	;'e'
   961  00FF2C  64                 	db	100	;'d'
   962  00FF2D  20                 	db	32
   963  00FF2E  20                 	db	32
   964  00FF2F  20                 	db	32
   965  00FF30  20                 	db	32
   966  00FF31  20                 	db	32
   967  00FF32  20                 	db	32
   968  00FF33  20                 	db	32
   969  00FF34  20                 	db	32
   970  00FF35  20                 	db	32
   971  00FF36  20                 	db	32
   972  00FF37  00                 	db	0
   973  00FF38                     STR_52:
   974                           
   975                           ; BSR set to: 0
   976  00FF38  30                 	db	48	;'0'
   977  00FF39  31                 	db	49	;'1'
   978  00FF3A  32                 	db	50	;'2'
   979  00FF3B  33                 	db	51	;'3'
   980  00FF3C  34                 	db	52	;'4'
   981  00FF3D  35                 	db	53	;'5'
   982  00FF3E  36                 	db	54	;'6'
   983  00FF3F  37                 	db	55	;'7'
   984  00FF40  38                 	db	56	;'8'
   985  00FF41  39                 	db	57	;'9'
   986  00FF42  61                 	db	97	;'a'
   987  00FF43  62                 	db	98	;'b'
   988  00FF44  63                 	db	99	;'c'
   989  00FF45  64                 	db	100	;'d'
   990  00FF46  65                 	db	101	;'e'
   991  00FF47  66                 	db	102	;'f'
   992  00FF48  00                 	db	0
   993  00FF49                     STR_41:
   994                           
   995                           ; BSR set to: 0
   996  00FF49  6E                 	db	110	;'n'
   997  00FF4A  6F                 	db	111	;'o'
   998  00FF4B  20                 	db	32
   999  00FF4C  41                 	db	65	;'A'
  1000  00FF4D  41                 	db	65	;'A'
  1001  00FF4E  20                 	db	32
  1002  00FF4F  20                 	db	32
  1003  00FF50  20                 	db	32
  1004  00FF51  20                 	db	32
  1005  00FF52  20                 	db	32
  1006  00FF53  20                 	db	32
  1007  00FF54  20                 	db	32
  1008  00FF55  20                 	db	32
  1009  00FF56  20                 	db	32
  1010  00FF57  20                 	db	32
  1011  00FF58  00                 	db	0
  1012  00FF59                     STR_49:
  1013                           
  1014                           ; BSR set to: 0
  1015  00FF59  6E                 	db	110	;'n'
  1016  00FF5A  6F                 	db	111	;'o'
  1017  00FF5B  20                 	db	32
  1018  00FF5C  39                 	db	57	;'9'
  1019  00FF5D  56                 	db	86	;'V'
  1020  00FF5E  20                 	db	32
  1021  00FF5F  20                 	db	32
  1022  00FF60  20                 	db	32
  1023  00FF61  20                 	db	32
  1024  00FF62  20                 	db	32
  1025  00FF63  20                 	db	32
  1026  00FF64  20                 	db	32
  1027  00FF65  20                 	db	32
  1028  00FF66  20                 	db	32
  1029  00FF67  20                 	db	32
  1030  00FF68  00                 	db	0
  1031  00FF69                     STR_37:
  1032                           
  1033                           ; BSR set to: 0
  1034  00FF69  25                 	db	37
  1035  00FF6A  64                 	db	100	;'d'
  1036  00FF6B  20                 	db	32
  1037  00FF6C  72                 	db	114	;'r'
  1038  00FF6D  65                 	db	101	;'e'
  1039  00FF6E  63                 	db	99	;'c'
  1040  00FF6F  65                 	db	101	;'e'
  1041  00FF70  69                 	db	105	;'i'
  1042  00FF71  76                 	db	118	;'v'
  1043  00FF72  65                 	db	101	;'e'
  1044  00FF73  64                 	db	100	;'d'
  1045  00FF74  20                 	db	32
  1046  00FF75  20                 	db	32
  1047  00FF76  20                 	db	32
  1048  00FF77  20                 	db	32
  1049  00FF78  00                 	db	0
  1050  00FF79                     STR_34:
  1051                           
  1052                           ; BSR set to: 0
  1053  00FF79  63                 	db	99	;'c'
  1054  00FF7A  2D                 	db	45
  1055  00FF7B  63                 	db	99	;'c'
  1056  00FF7C  6C                 	db	108	;'l'
  1057  00FF7D  6F                 	db	111	;'o'
  1058  00FF7E  63                 	db	99	;'c'
  1059  00FF7F  6B                 	db	107	;'k'
  1060  00FF80  77                 	db	119	;'w'
  1061  00FF81  69                 	db	105	;'i'
  1062  00FF82  73                 	db	115	;'s'
  1063  00FF83  65                 	db	101	;'e'
  1064  00FF84  20                 	db	32
  1065  00FF85  20                 	db	32
  1066  00FF86  20                 	db	32
  1067  00FF87  20                 	db	32
  1068  00FF88  00                 	db	0
  1069  00FF89                     STR_26:
  1070                           
  1071                           ; BSR set to: 0
  1072  00FF89  25                 	db	37
  1073  00FF8A  64                 	db	100	;'d'
  1074  00FF8B  20                 	db	32
  1075  00FF8C  20                 	db	32
  1076  00FF8D  20                 	db	32
  1077  00FF8E  20                 	db	32
  1078  00FF8F  20                 	db	32
  1079  00FF90  20                 	db	32
  1080  00FF91  20                 	db	32
  1081  00FF92  20                 	db	32
  1082  00FF93  20                 	db	32
  1083  00FF94  20                 	db	32
  1084  00FF95  20                 	db	32
  1085  00FF96  20                 	db	32
  1086  00FF97  20                 	db	32
  1087  00FF98  00                 	db	0
  1088  00FF99                     STR_45:
  1089                           
  1090                           ; BSR set to: 0
  1091  00FF99  6E                 	db	110	;'n'
  1092  00FF9A  6F                 	db	111	;'o'
  1093  00FF9B  20                 	db	32
  1094  00FF9C  43                 	db	67	;'C'
  1095  00FF9D  20                 	db	32
  1096  00FF9E  20                 	db	32
  1097  00FF9F  20                 	db	32
  1098  00FFA0  20                 	db	32
  1099  00FFA1  20                 	db	32
  1100  00FFA2  20                 	db	32
  1101  00FFA3  20                 	db	32
  1102  00FFA4  20                 	db	32
  1103  00FFA5  20                 	db	32
  1104  00FFA6  20                 	db	32
  1105  00FFA7  00                 	db	0
  1106  00FFA8                     STR_38:
  1107                           
  1108                           ; BSR set to: 0
  1109  00FFA8  41                 	db	65	;'A'
  1110  00FFA9  41                 	db	65	;'A'
  1111  00FFAA  3A                 	db	58	;':'
  1112  00FFAB  20                 	db	32
  1113  00FFAC  20                 	db	32
  1114  00FFAD  20                 	db	32
  1115  00FFAE  20                 	db	32
  1116  00FFAF  20                 	db	32
  1117  00FFB0  20                 	db	32
  1118  00FFB1  20                 	db	32
  1119  00FFB2  20                 	db	32
  1120  00FFB3  20                 	db	32
  1121  00FFB4  20                 	db	32
  1122  00FFB5  00                 	db	0
  1123  00FFB6                     STR_46:
  1124                           
  1125                           ; BSR set to: 0
  1126  00FFB6  39                 	db	57	;'9'
  1127  00FFB7  56                 	db	86	;'V'
  1128  00FFB8  3A                 	db	58	;':'
  1129  00FFB9  20                 	db	32
  1130  00FFBA  20                 	db	32
  1131  00FFBB  20                 	db	32
  1132  00FFBC  20                 	db	32
  1133  00FFBD  20                 	db	32
  1134  00FFBE  20                 	db	32
  1135  00FFBF  20                 	db	32
  1136  00FFC0  20                 	db	32
  1137  00FFC1  20                 	db	32
  1138  00FFC2  20                 	db	32
  1139  00FFC3  00                 	db	0
  1140  00FFC4                     STR_42:
  1141                           
  1142                           ; BSR set to: 0
  1143  00FFC4  43                 	db	67	;'C'
  1144  00FFC5  3A                 	db	58	;':'
  1145  00FFC6  20                 	db	32
  1146  00FFC7  20                 	db	32
  1147  00FFC8  20                 	db	32
  1148  00FFC9  20                 	db	32
  1149  00FFCA  20                 	db	32
  1150  00FFCB  20                 	db	32
  1151  00FFCC  20                 	db	32
  1152  00FFCD  20                 	db	32
  1153  00FFCE  20                 	db	32
  1154  00FFCF  20                 	db	32
  1155  00FFD0  00                 	db	0
  1156  00FFD1                     STR_51:
  1157                           
  1158                           ; BSR set to: 0
  1159  00FFD1  72                 	db	114	;'r'
  1160  00FFD2  75                 	db	117	;'u'
  1161  00FFD3  6E                 	db	110	;'n'
  1162  00FFD4  73                 	db	115	;'s'
  1163  00FFD5  20                 	db	32
  1164  00FFD6  62                 	db	98	;'b'
  1165  00FFD7  65                 	db	101	;'e'
  1166  00FFD8  66                 	db	102	;'f'
  1167  00FFD9  6F                 	db	111	;'o'
  1168  00FFDA  72                 	db	114	;'r'
  1169  00FFDB  65                 	db	101	;'e'
  1170  00FFDC  00                 	db	0
  1171  00FFDD                     STR_33:
  1172                           
  1173                           ; BSR set to: 0
  1174  00FFDD  63                 	db	99	;'c'
  1175  00FFDE  6C                 	db	108	;'l'
  1176  00FFDF  6F                 	db	111	;'o'
  1177  00FFE0  63                 	db	99	;'c'
  1178  00FFE1  6B                 	db	107	;'k'
  1179  00FFE2  77                 	db	119	;'w'
  1180  00FFE3  69                 	db	105	;'i'
  1181  00FFE4  73                 	db	115	;'s'
  1182  00FFE5  65                 	db	101	;'e'
  1183  00FFE6  20                 	db	32
  1184  00FFE7  20                 	db	32
  1185  00FFE8  00                 	db	0
  1186  00FFE9                     STR_50:
  1187                           
  1188                           ; BSR set to: 0
  1189  00FFE9  73                 	db	115	;'s'
  1190  00FFEA  68                 	db	104	;'h'
  1191  00FFEB  6F                 	db	111	;'o'
  1192  00FFEC  77                 	db	119	;'w'
  1193  00FFED  69                 	db	105	;'i'
  1194  00FFEE  6E                 	db	110	;'n'
  1195  00FFEF  67                 	db	103	;'g'
  1196  00FFF0  20                 	db	32
  1197  00FFF1  25                 	db	37
  1198  00FFF2  75                 	db	117	;'u'
  1199  00FFF3  00                 	db	0
  1200  00FFF4                     STR_14:
  1201                           
  1202                           ; BSR set to: 0
  1203  00FFF4  50                 	db	80	;'P'
  1204  00FFF5  65                 	db	101	;'e'
  1205  00FFF6  72                 	db	114	;'r'
  1206  00FFF7  69                 	db	105	;'i'
  1207  00FFF8  6F                 	db	111	;'o'
  1208  00FFF9  64                 	db	100	;'d'
  1209  00FFFA  3A                 	db	58	;':'
  1210  00FFFB  20                 	db	32
  1211  00FFFC  25                 	db	37
  1212  00FFFD  75                 	db	117	;'u'
  1213  00FFFE  00                 	db	0
  1214  0000                     
  1215                           ; #config settings
  1216  00FFFF  00                 	db	0	; dummy byte at the end
  1217  0000                     
  1218                           	psect	cinit
  1219  002152                     __pcinit:
  1220                           	opt stack 0
  1221  002152                     start_initialization:
  1222                           	opt stack 0
  1223  002152                     __initialization:
  1224                           	opt stack 0
  1225                           
  1226                           ; Clear objects allocated to BANK0 (29 bytes)
  1227  002152  EE00  F0AF         	lfsr	0,__pbssBANK0
  1228  002156  0E1D               	movlw	29
  1229  002158                     clear_0:
  1230  002158  6AEE               	clrf	postinc0,c
  1231  00215A  06E8               	decf	wreg,f,c
  1232  00215C  E1FD               	bnz	clear_0
  1233                           
  1234                           ; Clear objects allocated to COMRAM (13 bytes)
  1235  00215E  EE00  F070         	lfsr	0,__pbssCOMRAM
  1236  002162  0E0D               	movlw	13
  1237  002164                     clear_1:
  1238  002164  6AEE               	clrf	postinc0,c
  1239  002166  06E8               	decf	wreg,f,c
  1240  002168  E1FD               	bnz	clear_1
  1241  00216A                     end_of_initialization:
  1242                           	opt stack 0
  1243  00216A                     __end_of__initialization:
  1244                           	opt stack 0
  1245  00216A  907D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1246  00216C  927D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1247  00216E  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1248  002170  6EF8               	movwf	tblptru,c
  1249  002172  0100               	movlb	0
  1250  002174  EFB8  F00F         	goto	_main	;jump to C main() function
  1251                           tblptru	equ	0xFF8
  1252                           postinc0	equ	0xFEE
  1253                           wreg	equ	0xFE8
  1254                           
  1255                           	psect	bssCOMRAM
  1256  000070                     __pbssCOMRAM:
  1257                           	opt stack 0
  1258  000070                     simulate@F3107:
  1259                           	opt stack 0
  1260  000070                     	ds	4
  1261  000074                     _mode:
  1262                           	opt stack 0
  1263  000074                     	ds	2
  1264  000076                     _time:
  1265                           	opt stack 0
  1266  000076                     	ds	7
  1267                           tblptru	equ	0xFF8
  1268                           postinc0	equ	0xFEE
  1269                           wreg	equ	0xFE8
  1270                           
  1271                           	psect	bssBANK0
  1272  0000AF                     __pbssBANK0:
  1273                           	opt stack 0
  1274  0000AF                     simulate@F3123:
  1275                           	opt stack 0
  1276  0000AF                     	ds	6
  1277  0000B5                     simulate@F3121:
  1278                           	opt stack 0
  1279  0000B5                     	ds	6
  1280  0000BB                     PermLog@F3081:
  1281                           	opt stack 0
  1282  0000BB                     	ds	4
  1283  0000BF                     simulate@F3111:
  1284                           	opt stack 0
  1285  0000BF                     	ds	4
  1286  0000C3                     simulate@F3109:
  1287                           	opt stack 0
  1288  0000C3                     	ds	4
  1289  0000C7                     mainloop@F3100:
  1290                           	opt stack 0
  1291  0000C7                     	ds	4
  1292  0000CB                     _Latest:
  1293                           	opt stack 0
  1294  0000CB                     	ds	1
  1295                           tblptru	equ	0xFF8
  1296                           postinc0	equ	0xFEE
  1297                           wreg	equ	0xFE8
  1298                           
  1299                           	psect	cstackBANK0
  1300  000080                     __pcstackBANK0:
  1301                           	opt stack 0
  1302  000080                     ??_isdigit:
  1303  000080                     ??_I2C_Master_Wait:
  1304  000080                     ?___wmul:
  1305                           	opt stack 0
  1306  000080                     ?___lwdiv:
  1307                           	opt stack 0
  1308  000080                     ?___lldiv:
  1309                           	opt stack 0
  1310  000080                     lcdNibble@temp:
  1311                           	opt stack 0
  1312  000080                     ReadEE@address:
  1313                           	opt stack 0
  1314  000080                     ___wmul@multiplier:
  1315                           	opt stack 0
  1316  000080                     ___lwdiv@dividend:
  1317                           	opt stack 0
  1318  000080                     ___lldiv@dividend:
  1319                           	opt stack 0
  1320                           
  1321                           ; 4 bytes @ 0x0
  1322  000080                     	ds	1
  1323  000081                     lcdNibble@data:
  1324                           	opt stack 0
  1325  000081                     I2C_Master_Read@a:
  1326                           	opt stack 0
  1327  000081                     _isdigit$1048:
  1328                           	opt stack 0
  1329  000081                     I2C_Master_Write@d:
  1330                           	opt stack 0
  1331                           
  1332                           ; 2 bytes @ 0x1
  1333  000081                     	ds	1
  1334  000082                     lcdInst@data:
  1335                           	opt stack 0
  1336  000082                     putch@data:
  1337                           	opt stack 0
  1338  000082                     I2C_Master_Read@temp:
  1339                           	opt stack 0
  1340  000082                     isdigit@c:
  1341                           	opt stack 0
  1342  000082                     ___wmul@multiplicand:
  1343                           	opt stack 0
  1344  000082                     ___lwdiv@divisor:
  1345                           	opt stack 0
  1346                           
  1347                           ; 2 bytes @ 0x2
  1348  000082                     	ds	1
  1349  000083                     ??_initLCD:
  1350  000083                     getTime@time:
  1351                           	opt stack 0
  1352                           
  1353                           ; 2 bytes @ 0x3
  1354  000083                     	ds	1
  1355  000084                     ___wmul@product:
  1356                           	opt stack 0
  1357  000084                     ___lwdiv@quotient:
  1358                           	opt stack 0
  1359  000084                     ___lldiv@divisor:
  1360                           	opt stack 0
  1361                           
  1362                           ; 4 bytes @ 0x4
  1363  000084                     	ds	1
  1364  000085                     getTime@i:
  1365                           	opt stack 0
  1366                           
  1367                           ; 1 bytes @ 0x5
  1368  000085                     	ds	1
  1369  000086                     ___lwdiv@counter:
  1370                           	opt stack 0
  1371                           
  1372                           ; 1 bytes @ 0x6
  1373  000086                     	ds	1
  1374  000087                     ?___lwmod:
  1375                           	opt stack 0
  1376  000087                     ___lwmod@dividend:
  1377                           	opt stack 0
  1378                           
  1379                           ; 2 bytes @ 0x7
  1380  000087                     	ds	1
  1381  000088                     ___lldiv@quotient:
  1382                           	opt stack 0
  1383                           
  1384                           ; 4 bytes @ 0x8
  1385  000088                     	ds	1
  1386  000089                     ___lwmod@divisor:
  1387                           	opt stack 0
  1388                           
  1389                           ; 2 bytes @ 0x9
  1390  000089                     	ds	2
  1391  00008B                     ___lwmod@counter:
  1392                           	opt stack 0
  1393                           
  1394                           ; 1 bytes @ 0xB
  1395  00008B                     	ds	1
  1396  00008C                     ?_printf:
  1397                           	opt stack 0
  1398  00008C                     ___lldiv@counter:
  1399                           	opt stack 0
  1400  00008C                     printf@f:
  1401                           	opt stack 0
  1402                           
  1403                           ; 2 bytes @ 0xC
  1404  00008C                     	ds	1
  1405  00008D                     I2C_Master_Init@c:
  1406                           	opt stack 0
  1407                           
  1408                           ; 4 bytes @ 0xD
  1409  00008D                     	ds	4
  1410  000091                     ??_I2C_Master_Init:
  1411                           
  1412                           ; 1 bytes @ 0x11
  1413  000091                     	ds	3
  1414  000094                     ??_printf:
  1415                           
  1416                           ; 1 bytes @ 0x14
  1417  000094                     	ds	1
  1418  000095                     ??_initialize:
  1419                           
  1420                           ; 1 bytes @ 0x15
  1421  000095                     	ds	3
  1422  000098                     printf@cp:
  1423                           	opt stack 0
  1424                           
  1425                           ; 2 bytes @ 0x18
  1426  000098                     	ds	2
  1427  00009A                     printf@idx:
  1428                           	opt stack 0
  1429                           
  1430                           ; 1 bytes @ 0x1A
  1431  00009A                     	ds	1
  1432  00009B                     printf@ap:
  1433                           	opt stack 0
  1434                           
  1435                           ; 2 bytes @ 0x1B
  1436  00009B                     	ds	2
  1437  00009D                     printf@len:
  1438                           	opt stack 0
  1439                           
  1440                           ; 2 bytes @ 0x1D
  1441  00009D                     	ds	2
  1442  00009F                     printf@prec:
  1443                           	opt stack 0
  1444                           
  1445                           ; 1 bytes @ 0x1F
  1446  00009F                     	ds	1
  1447  0000A0                     printf@val:
  1448                           	opt stack 0
  1449                           
  1450                           ; 2 bytes @ 0x20
  1451  0000A0                     	ds	2
  1452  0000A2                     printf@flag:
  1453                           	opt stack 0
  1454                           
  1455                           ; 1 bytes @ 0x22
  1456  0000A2                     	ds	1
  1457  0000A3                     printf@width:
  1458                           	opt stack 0
  1459                           
  1460                           ; 2 bytes @ 0x23
  1461  0000A3                     	ds	2
  1462  0000A5                     printf@c:
  1463                           	opt stack 0
  1464                           
  1465                           ; 1 bytes @ 0x25
  1466  0000A5                     	ds	1
  1467  0000A6                     ??_showRTC:
  1468                           
  1469                           ; 1 bytes @ 0x26
  1470  0000A6                     	ds	2
  1471  0000A8                     
  1472                           ; 2 bytes @ 0x28
  1473  0000A8                     	ds	2
  1474  0000AA                     
  1475                           ; 3 bytes @ 0x2A
  1476  0000AA                     	ds	3
  1477  0000AD                     ??_main:
  1478                           
  1479                           ; 1 bytes @ 0x2D
  1480  0000AD                     	ds	2
  1481                           tblptru	equ	0xFF8
  1482                           postinc0	equ	0xFEE
  1483                           wreg	equ	0xFE8
  1484                           
  1485                           	psect	cstackCOMRAM
  1486  000001                     __pcstackCOMRAM:
  1487                           	opt stack 0
  1488  000001                     ??i2_I2C_Master_Wait:
  1489  000001                     ??i2_isdigit:
  1490  000001                     ?_captureKeypad:
  1491                           	opt stack 0
  1492  000001                     ?_AD:
  1493                           	opt stack 0
  1494  000001                     ?___awdiv:
  1495                           	opt stack 0
  1496  000001                     ?i2___wmul:
  1497                           	opt stack 0
  1498  000001                     ?i2___lwdiv:
  1499                           	opt stack 0
  1500  000001                     ?___ftpack:
  1501                           	opt stack 0
  1502  000001                     back@runs:
  1503                           	opt stack 0
  1504  000001                     i2lcdNibble@temp:
  1505                           	opt stack 0
  1506  000001                     WriteEE@address:
  1507                           	opt stack 0
  1508  000001                     ___awdiv@dividend:
  1509                           	opt stack 0
  1510  000001                     i2ReadEE@address:
  1511                           	opt stack 0
  1512  000001                     i2___wmul@multiplier:
  1513                           	opt stack 0
  1514  000001                     i2___lwdiv@dividend:
  1515                           	opt stack 0
  1516  000001                     ___ftpack@arg:
  1517                           	opt stack 0
  1518                           
  1519                           ; 3 bytes @ 0x0
  1520  000001                     	ds	1
  1521  000002                     back@result:
  1522                           	opt stack 0
  1523  000002                     i2lcdNibble@data:
  1524                           	opt stack 0
  1525  000002                     i2I2C_Master_Read@a:
  1526                           	opt stack 0
  1527  000002                     i2_isdigit$1048:
  1528                           	opt stack 0
  1529  000002                     i2I2C_Master_Write@d:
  1530                           	opt stack 0
  1531                           
  1532                           ; 2 bytes @ 0x1
  1533  000002                     	ds	1
  1534  000003                     ??_AD:
  1535  000003                     captureKeypad@keypress:
  1536                           	opt stack 0
  1537  000003                     WriteEE@data:
  1538                           	opt stack 0
  1539  000003                     i2lcdInst@data:
  1540                           	opt stack 0
  1541  000003                     i2putch@data:
  1542                           	opt stack 0
  1543  000003                     i2I2C_Master_Read@temp:
  1544                           	opt stack 0
  1545  000003                     i2isdigit@c:
  1546                           	opt stack 0
  1547  000003                     ReadRun@sorted:
  1548                           	opt stack 0
  1549  000003                     ___awdiv@divisor:
  1550                           	opt stack 0
  1551  000003                     i2___wmul@multiplicand:
  1552                           	opt stack 0
  1553  000003                     i2___lwdiv@divisor:
  1554                           	opt stack 0
  1555                           
  1556                           ; 2 bytes @ 0x2
  1557  000003                     	ds	1
  1558  000004                     ___ftpack@exp:
  1559                           	opt stack 0
  1560  000004                     i2getTime@time:
  1561                           	opt stack 0
  1562                           
  1563                           ; 2 bytes @ 0x3
  1564  000004                     	ds	1
  1565  000005                     AD@channel:
  1566                           	opt stack 0
  1567  000005                     ___awdiv@counter:
  1568                           	opt stack 0
  1569  000005                     ___ftpack@sign:
  1570                           	opt stack 0
  1571  000005                     ReadRun@time:
  1572                           	opt stack 0
  1573  000005                     i2___wmul@product:
  1574                           	opt stack 0
  1575  000005                     i2___lwdiv@quotient:
  1576                           	opt stack 0
  1577                           
  1578                           ; 2 bytes @ 0x4
  1579  000005                     	ds	1
  1580  000006                     ??___ftpack:
  1581  000006                     ___awdiv@sign:
  1582                           	opt stack 0
  1583  000006                     i2getTime@i:
  1584                           	opt stack 0
  1585                           
  1586                           ; 1 bytes @ 0x5
  1587  000006                     	ds	1
  1588  000007                     ??_ReadRun:
  1589  000007                     i2___lwdiv@counter:
  1590                           	opt stack 0
  1591  000007                     WriteRun@sorted:
  1592                           	opt stack 0
  1593  000007                     ___awdiv@quotient:
  1594                           	opt stack 0
  1595                           
  1596                           ; 2 bytes @ 0x6
  1597  000007                     	ds	1
  1598  000008                     ?i2___lwmod:
  1599                           	opt stack 0
  1600  000008                     i2___lwmod@dividend:
  1601                           	opt stack 0
  1602                           
  1603                           ; 2 bytes @ 0x7
  1604  000008                     	ds	1
  1605  000009                     ?___ftmul:
  1606                           	opt stack 0
  1607  000009                     ?___awtoft:
  1608                           	opt stack 0
  1609  000009                     PWMC@widthus:
  1610                           	opt stack 0
  1611  000009                     WriteRun@time:
  1612                           	opt stack 0
  1613  000009                     ___awtoft@c:
  1614                           	opt stack 0
  1615  000009                     ___ftmul@f1:
  1616                           	opt stack 0
  1617                           
  1618                           ; 3 bytes @ 0x8
  1619  000009                     	ds	1
  1620  00000A                     i2___lwmod@divisor:
  1621                           	opt stack 0
  1622                           
  1623                           ; 2 bytes @ 0x9
  1624  00000A                     	ds	1
  1625  00000B                     ??_WriteRun:
  1626  00000B                     ReadRun@backruns:
  1627                           	opt stack 0
  1628  00000B                     PWMC@cycles:
  1629                           	opt stack 0
  1630                           
  1631                           ; 2 bytes @ 0xA
  1632  00000B                     	ds	1
  1633  00000C                     ___awtoft@sign:
  1634                           	opt stack 0
  1635  00000C                     i2___lwmod@counter:
  1636                           	opt stack 0
  1637  00000C                     ReadRun@add:
  1638                           	opt stack 0
  1639  00000C                     ___ftmul@f2:
  1640                           	opt stack 0
  1641                           
  1642                           ; 3 bytes @ 0xB
  1643  00000C                     	ds	1
  1644  00000D                     ?i2_printf:
  1645                           	opt stack 0
  1646  00000D                     PWMC@port:
  1647                           	opt stack 0
  1648  00000D                     WriteRun@add:
  1649                           	opt stack 0
  1650  00000D                     i2printf@f:
  1651                           	opt stack 0
  1652                           
  1653                           ; 2 bytes @ 0xC
  1654  00000D                     	ds	2
  1655  00000F                     ??___ftmul:
  1656  00000F                     ??_PWMC:
  1657                           
  1658                           ; 1 bytes @ 0xE
  1659  00000F                     	ds	2
  1660  000011                     _PWMC$1389:
  1661                           	opt stack 0
  1662                           
  1663                           ; 1 bytes @ 0x10
  1664  000011                     	ds	1
  1665  000012                     ___ftmul@exp:
  1666                           	opt stack 0
  1667  000012                     _PWMC$1390:
  1668                           	opt stack 0
  1669                           
  1670                           ; 1 bytes @ 0x11
  1671  000012                     	ds	1
  1672  000013                     ??i2_printf:
  1673  000013                     _PWMC$1391:
  1674                           	opt stack 0
  1675  000013                     ___ftmul@f3_as_product:
  1676                           	opt stack 0
  1677                           
  1678                           ; 3 bytes @ 0x12
  1679  000013                     	ds	1
  1680  000014                     PWMC@countdown:
  1681                           	opt stack 0
  1682                           
  1683                           ; 2 bytes @ 0x13
  1684  000014                     	ds	2
  1685  000016                     ___ftmul@cntr:
  1686                           	opt stack 0
  1687                           
  1688                           ; 1 bytes @ 0x15
  1689  000016                     	ds	1
  1690  000017                     ___ftmul@sign:
  1691                           	opt stack 0
  1692  000017                     i2printf@cp:
  1693                           	opt stack 0
  1694                           
  1695                           ; 2 bytes @ 0x16
  1696  000017                     	ds	1
  1697  000018                     ?___ftdiv:
  1698                           	opt stack 0
  1699  000018                     ___ftdiv@f1:
  1700                           	opt stack 0
  1701                           
  1702                           ; 3 bytes @ 0x17
  1703  000018                     	ds	1
  1704  000019                     i2printf@idx:
  1705                           	opt stack 0
  1706                           
  1707                           ; 1 bytes @ 0x18
  1708  000019                     	ds	1
  1709  00001A                     i2printf@ap:
  1710                           	opt stack 0
  1711                           
  1712                           ; 2 bytes @ 0x19
  1713  00001A                     	ds	1
  1714  00001B                     ___ftdiv@f2:
  1715                           	opt stack 0
  1716                           
  1717                           ; 3 bytes @ 0x1A
  1718  00001B                     	ds	1
  1719  00001C                     i2printf@len:
  1720                           	opt stack 0
  1721                           
  1722                           ; 2 bytes @ 0x1B
  1723  00001C                     	ds	2
  1724  00001E                     ??___ftdiv:
  1725  00001E                     i2printf@prec:
  1726                           	opt stack 0
  1727                           
  1728                           ; 1 bytes @ 0x1D
  1729  00001E                     	ds	1
  1730  00001F                     i2printf@val:
  1731                           	opt stack 0
  1732                           
  1733                           ; 2 bytes @ 0x1E
  1734  00001F                     	ds	2
  1735  000021                     ___ftdiv@cntr:
  1736                           	opt stack 0
  1737  000021                     i2printf@flag:
  1738                           	opt stack 0
  1739                           
  1740                           ; 1 bytes @ 0x20
  1741  000021                     	ds	1
  1742  000022                     i2printf@width:
  1743                           	opt stack 0
  1744  000022                     ___ftdiv@f3:
  1745                           	opt stack 0
  1746                           
  1747                           ; 3 bytes @ 0x21
  1748  000022                     	ds	2
  1749  000024                     i2printf@c:
  1750                           	opt stack 0
  1751                           
  1752                           ; 1 bytes @ 0x23
  1753  000024                     	ds	1
  1754  000025                     ??_stopMoving:
  1755  000025                     ___ftdiv@exp:
  1756                           	opt stack 0
  1757  000025                     showInfo@time:
  1758                           	opt stack 0
  1759  000025                     CW90@port:
  1760                           	opt stack 0
  1761  000025                     CCW90@port:
  1762                           	opt stack 0
  1763                           
  1764                           ; 2 bytes @ 0x24
  1765  000025                     	ds	1
  1766  000026                     ___ftdiv@sign:
  1767                           	opt stack 0
  1768  000026                     _stopMoving$546:
  1769                           	opt stack 0
  1770                           
  1771                           ; 2 bytes @ 0x25
  1772  000026                     	ds	1
  1773  000027                     showInfo@sorted:
  1774                           	opt stack 0
  1775  000027                     ___ftge@ff1:
  1776                           	opt stack 0
  1777                           
  1778                           ; 3 bytes @ 0x26
  1779  000027                     	ds	1
  1780  000028                     stopMoving@em:
  1781                           	opt stack 0
  1782                           
  1783                           ; 1 bytes @ 0x27
  1784  000028                     	ds	1
  1785  000029                     ??_showInfo:
  1786  000029                     stopMoving@i:
  1787                           	opt stack 0
  1788                           
  1789                           ; 1 bytes @ 0x28
  1790  000029                     	ds	1
  1791  00002A                     ___ftge@ff2:
  1792                           	opt stack 0
  1793                           
  1794                           ; 3 bytes @ 0x29
  1795  00002A                     	ds	3
  1796  00002D                     ??___ftge:
  1797                           
  1798                           ; 1 bytes @ 0x2C
  1799  00002D                     	ds	1
  1800  00002E                     showInfo@type:
  1801                           	opt stack 0
  1802                           
  1803                           ; 2 bytes @ 0x2D
  1804  00002E                     	ds	2
  1805  000030                     ?_checkV:
  1806                           	opt stack 0
  1807  000030                     showInfo@stop:
  1808                           	opt stack 0
  1809  000030                     checkV@voltage:
  1810                           	opt stack 0
  1811                           
  1812                           ; 2 bytes @ 0x2F
  1813  000030                     	ds	2
  1814  000032                     ??_PermLog:
  1815  000032                     checkV@max:
  1816                           	opt stack 0
  1817                           
  1818                           ; 3 bytes @ 0x31
  1819  000032                     	ds	2
  1820  000034                     PermLog@sorted:
  1821                           	opt stack 0
  1822                           
  1823                           ; 4 bytes @ 0x33
  1824  000034                     	ds	1
  1825  000035                     ??_checkV:
  1826                           
  1827                           ; 1 bytes @ 0x34
  1828  000035                     	ds	1
  1829  000036                     checkV@i:
  1830                           	opt stack 0
  1831                           
  1832                           ; 1 bytes @ 0x35
  1833  000036                     	ds	1
  1834  000037                     ?_checkAA:
  1835                           	opt stack 0
  1836  000037                     ?_checkC:
  1837                           	opt stack 0
  1838  000037                     ?_check9:
  1839                           	opt stack 0
  1840  000037                     checkAA@sorted:
  1841                           	opt stack 0
  1842  000037                     checkC@sorted:
  1843                           	opt stack 0
  1844  000037                     check9@sorted:
  1845                           	opt stack 0
  1846                           
  1847                           ; 2 bytes @ 0x36
  1848  000037                     	ds	1
  1849  000038                     PermLog@backruns:
  1850                           	opt stack 0
  1851                           
  1852                           ; 1 bytes @ 0x37
  1853  000038                     	ds	1
  1854  000039                     ??_simulate:
  1855  000039                     PermLog@time:
  1856                           	opt stack 0
  1857                           
  1858                           ; 2 bytes @ 0x38
  1859  000039                     	ds	4
  1860  00003D                     simulate@portCW:
  1861                           	opt stack 0
  1862                           
  1863                           ; 6 bytes @ 0x3C
  1864  00003D                     	ds	6
  1865  000043                     simulate@portCCW:
  1866                           	opt stack 0
  1867                           
  1868                           ; 6 bytes @ 0x42
  1869  000043                     	ds	6
  1870  000049                     simulate@stop:
  1871                           	opt stack 0
  1872                           
  1873                           ; 2 bytes @ 0x48
  1874  000049                     	ds	2
  1875  00004B                     simulate@AA:
  1876                           	opt stack 0
  1877                           
  1878                           ; 2 bytes @ 0x4A
  1879  00004B                     	ds	2
  1880  00004D                     simulate@C:
  1881                           	opt stack 0
  1882                           
  1883                           ; 2 bytes @ 0x4C
  1884  00004D                     	ds	2
  1885  00004F                     simulate@V9:
  1886                           	opt stack 0
  1887                           
  1888                           ; 2 bytes @ 0x4E
  1889  00004F                     	ds	2
  1890  000051                     simulate@now:
  1891                           	opt stack 0
  1892                           
  1893                           ; 4 bytes @ 0x50
  1894  000051                     	ds	4
  1895  000055                     simulate@start:
  1896                           	opt stack 0
  1897                           
  1898                           ; 4 bytes @ 0x54
  1899  000055                     	ds	4
  1900  000059                     simulate@sorted:
  1901                           	opt stack 0
  1902                           
  1903                           ; 4 bytes @ 0x58
  1904  000059                     	ds	4
  1905  00005D                     simulate@period:
  1906                           	opt stack 0
  1907                           
  1908                           ; 2 bytes @ 0x5C
  1909  00005D                     	ds	2
  1910  00005F                     ??_keypressed:
  1911                           
  1912                           ; 1 bytes @ 0x5E
  1913  00005F                     	ds	16
  1914  00006F                     keypressed@keypress:
  1915                           	opt stack 0
  1916                           
  1917                           ; 1 bytes @ 0x6E
  1918  00006F                     	ds	1
  1919                           tblptru	equ	0xFF8
  1920                           postinc0	equ	0xFEE
  1921                           wreg	equ	0xFE8
  1922                           
  1923 ;;
  1924 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1925 ;;
  1926 ;; *************** function _main *****************
  1927 ;; Defined at:
  1928 ;;		line 228 in file "main.c"
  1929 ;; Parameters:    Size  Location     Type
  1930 ;;  argc            2   40[BANK0 ] int 
  1931 ;;  argv            3   42[BANK0 ] PTR PTR unsigned char 
  1932 ;; Auto vars:     Size  Location     Type
  1933 ;;		None
  1934 ;; Return value:  Size  Location     Type
  1935 ;;                  2   40[BANK0 ] int 
  1936 ;; Registers used:
  1937 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1938 ;; Tracked objects:
  1939 ;;		On entry : 0/0
  1940 ;;		On exit  : 0/0
  1941 ;;		Unchanged: 0/0
  1942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1943 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1945 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1946 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1947 ;;Total ram usage:        7 bytes
  1948 ;; Hardware stack levels required when called:   11
  1949 ;; This function calls:
  1950 ;;		_initialize
  1951 ;;		_printf
  1952 ;;		_showRTC
  1953 ;; This function is called by:
  1954 ;;		Startup code after reset
  1955 ;; This function uses a non-reentrant model
  1956 ;;
  1957                           
  1958                           	psect	text0
  1959  001F70                     __ptext0:
  1960                           	opt stack 0
  1961  001F70                     _main:
  1962                           	opt stack 20
  1963                           
  1964                           ;main.c: 229: initialize();
  1965                           
  1966                           ; BSR set to: 0
  1967                           ;incstack = 0
  1968  001F70  EC09  F00E         	call	_initialize	;wreg free
  1969                           
  1970                           ;main.c: 231: printf((unsigned char *) "Welcome!          ");
  1971  001F74  0E00               	movlw	low STR_18
  1972  001F76  0100               	movlb	0	; () banked
  1973  001F78  6F8C               	movwf	printf@f& (0+255),b
  1974  001F7A  0EFF               	movlw	high STR_18
  1975  001F7C  0100               	movlb	0	; () banked
  1976  001F7E  6F8D               	movwf	(printf@f+1)& (0+255),b
  1977  001F80  EC09  F000         	call	_printf	;wreg free
  1978                           
  1979                           ;main.c: 232: _delay((unsigned long)((700)*(8000000/4000.0)));
  1980  001F84  0E08               	movlw	8
  1981  001F86  0100               	movlb	0	; () banked
  1982  001F88  6FAE               	movwf	(??_main+1)& (0+255),b
  1983  001F8A  0E1B               	movlw	27
  1984  001F8C  0100               	movlb	0	; () banked
  1985  001F8E  6FAD               	movwf	??_main& (0+255),b
  1986  001F90  0E27               	movlw	39
  1987  001F92                     u3217:
  1988  001F92  2EE8               	decfsz	wreg,f,c
  1989  001F94  D7FE               	bra	u3217
  1990  001F96  2FAD               	decfsz	??_main& (0+255),f,b
  1991  001F98  D7FC               	bra	u3217
  1992  001F9A  2FAE               	decfsz	(??_main+1)& (0+255),f,b
  1993  001F9C  D7FA               	bra	u3217
  1994                           
  1995                           ;main.c: 233: INT1IE = 1;
  1996  001F9E  86F0               	bsf	intcon3,3,c	;volatile
  1997                           
  1998                           ;main.c: 234: (INTCONbits.GIE = 1);
  1999  001FA0  8EF2               	bsf	intcon,7,c	;volatile
  2000                           
  2001                           ;main.c: 235: mode = 0;
  2002  001FA2  0E00               	movlw	0
  2003  001FA4  6E75               	movwf	_mode+1,c
  2004  001FA6  0E00               	movlw	0
  2005  001FA8  6E74               	movwf	_mode,c
  2006  001FAA                     l4416:
  2007  001FAA  EC0A  F00D         	call	_showRTC	;wreg free
  2008  001FAE  D7FD               	goto	l4416
  2009  001FB0  00FF               	reset		;# 
  2010  001FB2                     __end_of_main:
  2011                           	opt stack 0
  2012                           tblptru	equ	0xFF8
  2013                           intcon	equ	0xFF2
  2014                           intcon3	equ	0xFF0
  2015                           postinc0	equ	0xFEE
  2016                           wreg	equ	0xFE8
  2017                           
  2018 ;; *************** function _showRTC *****************
  2019 ;; Defined at:
  2020 ;;		line 218 in file "main.c"
  2021 ;; Parameters:    Size  Location     Type
  2022 ;;		None
  2023 ;; Auto vars:     Size  Location     Type
  2024 ;;		None
  2025 ;; Return value:  Size  Location     Type
  2026 ;;                  1    wreg      void 
  2027 ;; Registers used:
  2028 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2029 ;; Tracked objects:
  2030 ;;		On entry : 0/0
  2031 ;;		On exit  : 0/0
  2032 ;;		Unchanged: 0/0
  2033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2036 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2037 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2038 ;;Total ram usage:        2 bytes
  2039 ;; Hardware stack levels used:    1
  2040 ;; Hardware stack levels required when called:   10
  2041 ;; This function calls:
  2042 ;;		___lcd_newline
  2043 ;;		_getTime
  2044 ;;		_lcdInst
  2045 ;;		_printf
  2046 ;; This function is called by:
  2047 ;;		_main
  2048 ;; This function uses a non-reentrant model
  2049 ;;
  2050                           
  2051                           	psect	text1
  2052  001A14                     __ptext1:
  2053                           	opt stack 0
  2054  001A14                     _showRTC:
  2055                           	opt stack 20
  2056                           
  2057                           ;main.c: 220: getTime(time);
  2058                           
  2059                           ;incstack = 0
  2060  001A14  0E76               	movlw	low _time
  2061  001A16  0100               	movlb	0	; () banked
  2062  001A18  6F83               	movwf	getTime@time& (0+255),b
  2063  001A1A  0E00               	movlw	high _time
  2064  001A1C  0100               	movlb	0	; () banked
  2065  001A1E  6F84               	movwf	(getTime@time+1)& (0+255),b
  2066  001A20  ECC5  F00C         	call	_getTime	;wreg free
  2067                           
  2068                           ;main.c: 221: lcdInst(0b10000000);;
  2069  001A24  0E80               	movlw	128
  2070  001A26  EC64  F011         	call	_lcdInst
  2071                           
  2072                           ;main.c: 222: printf("%02x/%02x/%02x         ", time[6], time[5], time[4]);
  2073  001A2A  0E13               	movlw	low STR_16
  2074  001A2C  0100               	movlb	0	; () banked
  2075  001A2E  6F8C               	movwf	printf@f& (0+255),b
  2076  001A30  0EFD               	movlw	high STR_16
  2077  001A32  0100               	movlb	0	; () banked
  2078  001A34  6F8D               	movwf	(printf@f+1)& (0+255),b
  2079  001A36  C07C  F08E         	movff	_time+6,?_printf+2
  2080  001A3A  0100               	movlb	0	; () banked
  2081  001A3C  6B8F               	clrf	(?_printf+3)& (0+255),b
  2082  001A3E  C07B  F090         	movff	_time+5,?_printf+4
  2083  001A42  0100               	movlb	0	; () banked
  2084  001A44  6B91               	clrf	(?_printf+5)& (0+255),b
  2085  001A46  C07A  F092         	movff	_time+4,?_printf+6
  2086  001A4A  0100               	movlb	0	; () banked
  2087  001A4C  6B93               	clrf	(?_printf+7)& (0+255),b
  2088  001A4E  EC09  F000         	call	_printf	;wreg free
  2089                           
  2090                           ;main.c: 223: __lcd_newline();
  2091  001A52  EC8A  F011         	call	___lcd_newline	;wreg free
  2092                           
  2093                           ;main.c: 224: printf("%02x:%02x:%02x         ", time[2], time[1], time[0]);
  2094  001A56  0E2B               	movlw	low STR_17
  2095  001A58  0100               	movlb	0	; () banked
  2096  001A5A  6F8C               	movwf	printf@f& (0+255),b
  2097  001A5C  0EFD               	movlw	high STR_17
  2098  001A5E  0100               	movlb	0	; () banked
  2099  001A60  6F8D               	movwf	(printf@f+1)& (0+255),b
  2100  001A62  C078  F08E         	movff	_time+2,?_printf+2
  2101  001A66  0100               	movlb	0	; () banked
  2102  001A68  6B8F               	clrf	(?_printf+3)& (0+255),b
  2103  001A6A  C077  F090         	movff	_time+1,?_printf+4
  2104  001A6E  0100               	movlb	0	; () banked
  2105  001A70  6B91               	clrf	(?_printf+5)& (0+255),b
  2106  001A72  C076  F092         	movff	_time,?_printf+6
  2107  001A76  0100               	movlb	0	; () banked
  2108  001A78  6B93               	clrf	(?_printf+7)& (0+255),b
  2109  001A7A  EC09  F000         	call	_printf	;wreg free
  2110                           
  2111                           ;main.c: 225: _delay((unsigned long)((700)*(8000000/4000.0)));
  2112  001A7E  0E08               	movlw	8
  2113  001A80  0100               	movlb	0	; () banked
  2114  001A82  6FA7               	movwf	(??_showRTC+1)& (0+255),b
  2115  001A84  0E1B               	movlw	27
  2116  001A86  0100               	movlb	0	; () banked
  2117  001A88  6FA6               	movwf	??_showRTC& (0+255),b
  2118  001A8A  0E27               	movlw	39
  2119  001A8C                     u3227:
  2120  001A8C  2EE8               	decfsz	wreg,f,c
  2121  001A8E  D7FE               	bra	u3227
  2122  001A90  2FA6               	decfsz	??_showRTC& (0+255),f,b
  2123  001A92  D7FC               	bra	u3227
  2124  001A94  2FA7               	decfsz	(??_showRTC+1)& (0+255),f,b
  2125  001A96  D7FA               	bra	u3227
  2126  001A98  0012               	return		;funcret
  2127  001A9A                     __end_of_showRTC:
  2128                           	opt stack 0
  2129                           tblptru	equ	0xFF8
  2130                           intcon	equ	0xFF2
  2131                           intcon3	equ	0xFF0
  2132                           postinc0	equ	0xFEE
  2133                           wreg	equ	0xFE8
  2134                           
  2135 ;; *************** function _printf *****************
  2136 ;; Defined at:
  2137 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  2138 ;; Parameters:    Size  Location     Type
  2139 ;;  f               2   12[BANK0 ] PTR const unsigned char 
  2140 ;;		 -> STR_51(12), STR_50(11), STR_49(16), STR_48(23), 
  2141 ;;		 -> STR_47(21), STR_46(14), STR_45(15), STR_44(22), 
  2142 ;;		 -> STR_43(20), STR_42(13), STR_41(16), STR_40(23), 
  2143 ;;		 -> STR_39(21), STR_38(14), STR_37(16), STR_36(18), 
  2144 ;;		 -> STR_35(20), STR_34(16), STR_33(12), STR_32(16), 
  2145 ;;		 -> STR_31(21), STR_30(16), STR_29(21), STR_28(16), 
  2146 ;;		 -> STR_27(20), STR_26(16), STR_25(21), STR_24(23), 
  2147 ;;		 -> STR_23(24), STR_22(21), STR_21(24), STR_20(24), 
  2148 ;;		 -> STR_19(25), STR_18(19), STR_17(24), STR_16(24), 
  2149 ;;		 -> STR_15(27), STR_14(11), STR_13(19), STR_12(20), 
  2150 ;;		 -> STR_11(21), STR_10(21), STR_9(20), STR_8(21), 
  2151 ;;		 -> STR_7(21), STR_6(20), STR_5(22), STR_4(22), 
  2152 ;;		 -> STR_3(21), STR_2(24), STR_1(21), 
  2153 ;; Auto vars:     Size  Location     Type
  2154 ;;  idx             1   26[BANK0 ] unsigned char 
  2155 ;;  tmpval          4    0        struct .
  2156 ;;  width           2   35[BANK0 ] int 
  2157 ;;  val             2   32[BANK0 ] unsigned int 
  2158 ;;  len             2   29[BANK0 ] unsigned int 
  2159 ;;  ap              2   27[BANK0 ] PTR void [1]
  2160 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2161 ;;  cp              2   24[BANK0 ] PTR const unsigned char 
  2162 ;;		 -> printf@c(1), 
  2163 ;;  c               1   37[BANK0 ] char 
  2164 ;;  flag            1   34[BANK0 ] unsigned char 
  2165 ;;  prec            1   31[BANK0 ] char 
  2166 ;; Return value:  Size  Location     Type
  2167 ;;                  2   12[BANK0 ] int 
  2168 ;; Registers used:
  2169 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2170 ;; Tracked objects:
  2171 ;;		On entry : 0/0
  2172 ;;		On exit  : 0/0
  2173 ;;		Unchanged: 0/0
  2174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2175 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2176 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2177 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2178 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2179 ;;Total ram usage:       26 bytes
  2180 ;; Hardware stack levels used:    1
  2181 ;; Hardware stack levels required when called:    9
  2182 ;; This function calls:
  2183 ;;		___lwdiv
  2184 ;;		___lwmod
  2185 ;;		___wmul
  2186 ;;		_isdigit
  2187 ;;		_putch
  2188 ;; This function is called by:
  2189 ;;		_showRTC
  2190 ;;		_main
  2191 ;;		_mainloop
  2192 ;; This function uses a non-reentrant model
  2193 ;;
  2194                           
  2195                           	psect	text2
  2196  000012                     __ptext2:
  2197                           	opt stack 0
  2198  000012                     _printf:
  2199                           	opt stack 20
  2200                           
  2201                           ;doprnt.c: 466: va_list ap;
  2202                           ;doprnt.c: 499: signed char c;
  2203                           ;doprnt.c: 501: int width;
  2204                           ;doprnt.c: 506: signed char prec;
  2205                           ;doprnt.c: 508: unsigned char flag;
  2206                           ;doprnt.c: 523: union {
  2207                           ;doprnt.c: 524: unsigned long vd;
  2208                           ;doprnt.c: 525: double integ;
  2209                           ;doprnt.c: 526: } tmpval;
  2210                           ;doprnt.c: 528: unsigned int val;
  2211                           ;doprnt.c: 529: unsigned len;
  2212                           ;doprnt.c: 530: const char * cp;
  2213                           ;doprnt.c: 533: *ap = __va_start();
  2214                           
  2215                           ;incstack = 0
  2216  000012  0E8E               	movlw	low (?_printf+2)
  2217  000014  0100               	movlb	0	; () banked
  2218  000016  6F9B               	movwf	printf@ap& (0+255),b
  2219  000018  0E00               	movlw	high (?_printf+2)
  2220  00001A  0100               	movlb	0	; () banked
  2221  00001C  6F9C               	movwf	(printf@ap+1)& (0+255),b
  2222                           
  2223                           ;doprnt.c: 536: while(c = *f++) {
  2224  00001E  D21F               	goto	l3846
  2225  000020                     l3696:
  2226                           
  2227                           ; BSR set to: 0
  2228                           ;doprnt.c: 538: if(c != '%')
  2229  000020  0E25               	movlw	37
  2230  000022  0100               	movlb	0	; () banked
  2231  000024  19A5               	xorwf	printf@c& (0+255),w,b
  2232  000026  B4D8               	btfsc	status,2,c
  2233  000028  D005               	goto	l3700
  2234                           
  2235                           ; BSR set to: 0
  2236                           ;doprnt.c: 540: {
  2237                           ;doprnt.c: 541: (putch(c) );
  2238  00002A  0100               	movlb	0	; () banked
  2239  00002C  51A5               	movf	printf@c& (0+255),w,b
  2240  00002E  EC5C  F011         	call	_putch
  2241                           
  2242                           ;doprnt.c: 542: continue;
  2243  000032  D215               	goto	l3846
  2244  000034                     l3700:
  2245                           
  2246                           ;doprnt.c: 543: }
  2247                           ;doprnt.c: 546: width = 0;
  2248  000034  0E00               	movlw	0
  2249  000036  0100               	movlb	0	; () banked
  2250  000038  6FA4               	movwf	(printf@width+1)& (0+255),b
  2251  00003A  0E00               	movlw	0
  2252  00003C  6FA3               	movwf	printf@width& (0+255),b
  2253                           
  2254                           ;doprnt.c: 548: flag = 0;
  2255  00003E  0E00               	movlw	0
  2256  000040  0100               	movlb	0	; () banked
  2257  000042  6FA2               	movwf	printf@flag& (0+255),b
  2258                           
  2259                           ; BSR set to: 0
  2260                           ;doprnt.c: 551: switch(*f) {
  2261                           
  2262                           ;doprnt.c: 550: for(;;) {
  2263  000044  D005               	goto	l3706
  2264  000046                     l3702:
  2265                           
  2266                           ;doprnt.c: 580: flag |= 0x04;
  2267  000046  0100               	movlb	0	; () banked
  2268  000048  85A2               	bsf	printf@flag& (0+255),2,b
  2269                           
  2270                           ;doprnt.c: 581: f++;
  2271  00004A  0100               	movlb	0	; () banked
  2272  00004C  4B8C               	infsnz	printf@f& (0+255),f,b
  2273  00004E  2B8D               	incf	(printf@f+1)& (0+255),f,b
  2274  000050                     l3706:
  2275  000050  C08C  FFF6         	movff	printf@f,tblptrl
  2276  000054  C08D  FFF7         	movff	printf@f+1,tblptrh
  2277  000058                     	if	0	;tblptru may be non-zero
  2278  000058                     	endif
  2279  000058                     	if	0	;tblptru may be non-zero
  2280  000058                     	endif
  2281  000058  0008               	tblrd		*
  2282  00005A  50F5               	movf	tablat,w,c
  2283                           
  2284                           ; Switch size 1, requested type "space"
  2285                           ; Number of cases is 1, Range of values is 48 to 48
  2286                           ; switch strategies available:
  2287                           ; Name         Instructions Cycles
  2288                           ; simple_byte            4     3 (average)
  2289                           ;	Chosen strategy is simple_byte
  2290  00005C  0A30               	xorlw	48	; case 48
  2291  00005E  B4D8               	btfsc	status,2,c
  2292  000060  D7F2               	goto	l3702
  2293                           
  2294                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2295                           
  2296                           ;doprnt.c: 586: }
  2297                           
  2298                           ;doprnt.c: 585: break;
  2299  000062  C08C  FFF6         	movff	printf@f,tblptrl
  2300  000066  C08D  FFF7         	movff	printf@f+1,tblptrh
  2301  00006A                     	if	0	;tblptru may be non-zero
  2302  00006A                     	endif
  2303  00006A                     	if	0	;tblptru may be non-zero
  2304  00006A                     	endif
  2305  00006A  0008               	tblrd		*
  2306  00006C  50F5               	movf	tablat,w,c
  2307  00006E  EC94  F010         	call	_isdigit
  2308  000072  A0D8               	btfss	status,0,c
  2309  000074  D092               	goto	l3746
  2310                           
  2311                           ;doprnt.c: 598: width = 0;
  2312  000076  0E00               	movlw	0
  2313  000078  0100               	movlb	0	; () banked
  2314  00007A  6FA4               	movwf	(printf@width+1)& (0+255),b
  2315  00007C  0E00               	movlw	0
  2316  00007E  6FA3               	movwf	printf@width& (0+255),b
  2317  000080                     l3712:
  2318                           
  2319                           ;doprnt.c: 600: width *= 10;
  2320  000080  C0A3  F080         	movff	printf@width,___wmul@multiplier
  2321  000084  C0A4  F081         	movff	printf@width+1,___wmul@multiplier+1
  2322  000088  0E00               	movlw	0
  2323  00008A  0100               	movlb	0	; () banked
  2324  00008C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  2325  00008E  0E0A               	movlw	10
  2326  000090  6F82               	movwf	___wmul@multiplicand& (0+255),b
  2327  000092  EC34  F010         	call	___wmul	;wreg free
  2328  000096  C080  F0A3         	movff	?___wmul,printf@width
  2329  00009A  C081  F0A4         	movff	?___wmul+1,printf@width+1
  2330                           
  2331                           ;doprnt.c: 601: width += *f++ - '0';
  2332  00009E  0ED0               	movlw	208
  2333  0000A0  0100               	movlb	0	; () banked
  2334  0000A2  6F94               	movwf	??_printf& (0+255),b
  2335  0000A4  0EFF               	movlw	255
  2336  0000A6  0100               	movlb	0	; () banked
  2337  0000A8  6F95               	movwf	(??_printf+1)& (0+255),b
  2338  0000AA  C08C  FFF6         	movff	printf@f,tblptrl
  2339  0000AE  C08D  FFF7         	movff	printf@f+1,tblptrh
  2340  0000B2                     	if	0	;tblptru may be non-zero
  2341  0000B2                     	endif
  2342  0000B2                     	if	0	;tblptru may be non-zero
  2343  0000B2                     	endif
  2344  0000B2  0008               	tblrd		*
  2345  0000B4  50F5               	movf	tablat,w,c
  2346  0000B6  0100               	movlb	0	; () banked
  2347  0000B8  6F96               	movwf	(??_printf+2)& (0+255),b
  2348  0000BA  6B97               	clrf	(??_printf+3)& (0+255),b
  2349  0000BC  0100               	movlb	0	; () banked
  2350  0000BE  5194               	movf	??_printf& (0+255),w,b
  2351  0000C0  0100               	movlb	0	; () banked
  2352  0000C2  2796               	addwf	(??_printf+2)& (0+255),f,b
  2353  0000C4  0100               	movlb	0	; () banked
  2354  0000C6  5195               	movf	(??_printf+1)& (0+255),w,b
  2355  0000C8  0100               	movlb	0	; () banked
  2356  0000CA  2397               	addwfc	(??_printf+3)& (0+255),f,b
  2357  0000CC  0100               	movlb	0	; () banked
  2358  0000CE  5196               	movf	(??_printf+2)& (0+255),w,b
  2359  0000D0  0100               	movlb	0	; () banked
  2360  0000D2  27A3               	addwf	printf@width& (0+255),f,b
  2361  0000D4  0100               	movlb	0	; () banked
  2362  0000D6  5197               	movf	(??_printf+3)& (0+255),w,b
  2363  0000D8  0100               	movlb	0	; () banked
  2364  0000DA  23A4               	addwfc	(printf@width+1)& (0+255),f,b
  2365                           
  2366                           ; BSR set to: 0
  2367  0000DC  0100               	movlb	0	; () banked
  2368  0000DE  4B8C               	infsnz	printf@f& (0+255),f,b
  2369  0000E0  2B8D               	incf	(printf@f+1)& (0+255),f,b
  2370                           
  2371                           ; BSR set to: 0
  2372                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2373  0000E2  C08C  FFF6         	movff	printf@f,tblptrl
  2374  0000E6  C08D  FFF7         	movff	printf@f+1,tblptrh
  2375  0000EA                     	if	0	;tblptru may be non-zero
  2376  0000EA                     	endif
  2377  0000EA                     	if	0	;tblptru may be non-zero
  2378  0000EA                     	endif
  2379  0000EA  0008               	tblrd		*
  2380  0000EC  50F5               	movf	tablat,w,c
  2381  0000EE  EC94  F010         	call	_isdigit
  2382  0000F2  A0D8               	btfss	status,0,c
  2383  0000F4  D052               	goto	l3746
  2384  0000F6  D7C4               	goto	l3712
  2385  0000F8                     l3720:
  2386                           
  2387                           ;doprnt.c: 721: flag |= 0x80;
  2388  0000F8  0100               	movlb	0	; () banked
  2389  0000FA  8FA2               	bsf	printf@flag& (0+255),7,b
  2390                           
  2391                           ;doprnt.c: 723: break;
  2392  0000FC  D06A               	goto	l3748
  2393  0000FE                     l3722:
  2394                           
  2395                           ; BSR set to: 0
  2396                           ;doprnt.c: 757: if(width > len)
  2397  0000FE  0100               	movlb	0	; () banked
  2398  000100  51A3               	movf	printf@width& (0+255),w,b
  2399  000102  0100               	movlb	0	; () banked
  2400  000104  5D9D               	subwf	printf@len& (0+255),w,b
  2401  000106  0100               	movlb	0	; () banked
  2402  000108  51A4               	movf	(printf@width+1)& (0+255),w,b
  2403  00010A  0100               	movlb	0	; () banked
  2404  00010C  599E               	subwfb	(printf@len+1)& (0+255),w,b
  2405  00010E  B0D8               	btfsc	status,0,c
  2406  000110  D009               	goto	l3726
  2407                           
  2408                           ; BSR set to: 0
  2409                           ;doprnt.c: 758: width -= len;
  2410  000112  0100               	movlb	0	; () banked
  2411  000114  519D               	movf	printf@len& (0+255),w,b
  2412  000116  0100               	movlb	0	; () banked
  2413  000118  5FA3               	subwf	printf@width& (0+255),f,b
  2414  00011A  0100               	movlb	0	; () banked
  2415  00011C  519E               	movf	(printf@len+1)& (0+255),w,b
  2416  00011E  0100               	movlb	0	; () banked
  2417  000120  5BA4               	subwfb	(printf@width+1)& (0+255),f,b
  2418  000122  D009               	goto	l3730
  2419  000124                     l3726:
  2420                           
  2421                           ; BSR set to: 0
  2422                           ;doprnt.c: 759: else
  2423                           ;doprnt.c: 760: width = 0;
  2424  000124  0E00               	movlw	0
  2425  000126  0100               	movlb	0	; () banked
  2426  000128  6FA4               	movwf	(printf@width+1)& (0+255),b
  2427  00012A  0E00               	movlw	0
  2428  00012C  6FA3               	movwf	printf@width& (0+255),b
  2429                           
  2430                           ; BSR set to: 0
  2431                           ;doprnt.c: 764: while(width--)
  2432  00012E  D003               	goto	l3730
  2433  000130                     l3728:
  2434                           
  2435                           ; BSR set to: 0
  2436                           ;doprnt.c: 765: (putch(' ') );
  2437  000130  0E20               	movlw	32
  2438  000132  EC5C  F011         	call	_putch
  2439  000136                     l3730:
  2440  000136  0100               	movlb	0	; () banked
  2441  000138  07A3               	decf	printf@width& (0+255),f,b
  2442  00013A  A0D8               	btfss	status,0,c
  2443  00013C  07A4               	decf	(printf@width+1)& (0+255),f,b
  2444  00013E  0100               	movlb	0	; () banked
  2445  000140  29A3               	incf	printf@width& (0+255),w,b
  2446  000142  E1F6               	bnz	l3728
  2447  000144  0100               	movlb	0	; () banked
  2448  000146  29A4               	incf	(printf@width+1)& (0+255),w,b
  2449  000148  B4D8               	btfsc	status,2,c
  2450  00014A  D00B               	goto	l3736
  2451  00014C  D7F1               	goto	l3728
  2452  00014E                     l3732:
  2453                           
  2454                           ; BSR set to: 0
  2455                           ;doprnt.c: 768: (putch(*cp++) );
  2456  00014E  C098  FFD9         	movff	printf@cp,fsr2l
  2457  000152  C099  FFDA         	movff	printf@cp+1,fsr2h
  2458  000156  50DF               	movf	indf2,w,c
  2459  000158  EC5C  F011         	call	_putch
  2460  00015C  0100               	movlb	0	; () banked
  2461  00015E  4B98               	infsnz	printf@cp& (0+255),f,b
  2462  000160  2B99               	incf	(printf@cp+1)& (0+255),f,b
  2463  000162                     l3736:
  2464                           
  2465                           ; BSR set to: 0
  2466  000162  0100               	movlb	0	; () banked
  2467  000164  079D               	decf	printf@len& (0+255),f,b
  2468  000166  A0D8               	btfss	status,0,c
  2469  000168  079E               	decf	(printf@len+1)& (0+255),f,b
  2470  00016A  0100               	movlb	0	; () banked
  2471  00016C  299D               	incf	printf@len& (0+255),w,b
  2472  00016E  E1EF               	bnz	l3732
  2473  000170  0100               	movlb	0	; () banked
  2474  000172  299E               	incf	(printf@len+1)& (0+255),w,b
  2475  000174  B4D8               	btfsc	status,2,c
  2476  000176  D173               	goto	l3846
  2477  000178  D7EA               	goto	l3732
  2478  00017A                     l3738:
  2479                           
  2480                           ; BSR set to: 0
  2481                           ;doprnt.c: 805: cp = (char *)&c;
  2482  00017A  0EA5               	movlw	low printf@c
  2483  00017C  0100               	movlb	0	; () banked
  2484  00017E  6F98               	movwf	printf@cp& (0+255),b
  2485  000180  0E00               	movlw	high printf@c
  2486  000182  0100               	movlb	0	; () banked
  2487  000184  6F99               	movwf	(printf@cp+1)& (0+255),b
  2488                           
  2489                           ; BSR set to: 0
  2490                           ;doprnt.c: 806: len = 1;
  2491  000186  0E00               	movlw	0
  2492  000188  0100               	movlb	0	; () banked
  2493  00018A  6F9E               	movwf	(printf@len+1)& (0+255),b
  2494  00018C  0E01               	movlw	1
  2495  00018E  6F9D               	movwf	printf@len& (0+255),b
  2496                           
  2497                           ;doprnt.c: 807: goto dostring;
  2498  000190  D7B6               	goto	l3722
  2499  000192                     l3742:
  2500                           
  2501                           ; BSR set to: 0
  2502                           ;doprnt.c: 818: flag |= 0xC0;
  2503  000192  0EC0               	movlw	192
  2504  000194  0100               	movlb	0	; () banked
  2505  000196  13A2               	iorwf	printf@flag& (0+255),f,b
  2506                           
  2507                           ; BSR set to: 0
  2508                           ;doprnt.c: 822: }
  2509                           
  2510                           ;doprnt.c: 819: break;
  2511  000198  D01C               	goto	l3748
  2512  00019A                     l3746:
  2513  00019A  C08C  FFF6         	movff	printf@f,tblptrl
  2514  00019E  C08D  FFF7         	movff	printf@f+1,tblptrh
  2515  0001A2  0100               	movlb	0	; () banked
  2516  0001A4  4B8C               	infsnz	printf@f& (0+255),f,b
  2517  0001A6  2B8D               	incf	(printf@f+1)& (0+255),f,b
  2518  0001A8                     	if	0	;tblptru may be non-zero
  2519  0001A8                     	endif
  2520  0001A8                     	if	0	;tblptru may be non-zero
  2521  0001A8                     	endif
  2522  0001A8  0008               	tblrd		*
  2523  0001AA  CFF5 F0A5          	movff	tablat,printf@c
  2524  0001AE  0100               	movlb	0	; () banked
  2525  0001B0  51A5               	movf	printf@c& (0+255),w,b
  2526                           
  2527                           ; Switch size 1, requested type "space"
  2528                           ; Number of cases is 5, Range of values is 0 to 120
  2529                           ; switch strategies available:
  2530                           ; Name         Instructions Cycles
  2531                           ; simple_byte           16     9 (average)
  2532                           ;	Chosen strategy is simple_byte
  2533  0001B2  0A00               	xorlw	0	; case 0
  2534  0001B4  B4D8               	btfsc	status,2,c
  2535  0001B6  0012               	return	
  2536  0001B8  0A64               	xorlw	100	; case 100
  2537  0001BA  B4D8               	btfsc	status,2,c
  2538  0001BC  D00A               	goto	l3748
  2539  0001BE  0A0D               	xorlw	13	; case 105
  2540  0001C0  B4D8               	btfsc	status,2,c
  2541  0001C2  D007               	goto	l3748
  2542  0001C4  0A1C               	xorlw	28	; case 117
  2543  0001C6  B4D8               	btfsc	status,2,c
  2544  0001C8  D7E4               	goto	l3742
  2545  0001CA  0A0D               	xorlw	13	; case 120
  2546  0001CC  B4D8               	btfsc	status,2,c
  2547  0001CE  D794               	goto	l3720
  2548  0001D0  D7D4               	goto	l3738
  2549  0001D2                     l3748:
  2550                           
  2551                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  2552  0001D2  C0A2  F094         	movff	printf@flag,??_printf
  2553  0001D6  0EC0               	movlw	192
  2554  0001D8  0100               	movlb	0	; () banked
  2555  0001DA  1794               	andwf	??_printf& (0+255),f,b
  2556  0001DC  A4D8               	btfss	status,2,c
  2557  0001DE  D019               	goto	l3760
  2558                           
  2559                           ; BSR set to: 0
  2560                           ;doprnt.c: 1253: {
  2561                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2562  0001E0  C09B  FFD9         	movff	printf@ap,fsr2l
  2563  0001E4  C09C  FFDA         	movff	printf@ap+1,fsr2h
  2564  0001E8  CFDE F0A0          	movff	postinc2,printf@val
  2565  0001EC  CFDD F0A1          	movff	postdec2,printf@val+1
  2566                           
  2567                           ; BSR set to: 0
  2568  0001F0  0E02               	movlw	2
  2569  0001F2  0100               	movlb	0	; () banked
  2570  0001F4  279B               	addwf	printf@ap& (0+255),f,b
  2571  0001F6  0E00               	movlw	0
  2572  0001F8  239C               	addwfc	(printf@ap+1)& (0+255),f,b
  2573                           
  2574                           ; BSR set to: 0
  2575                           ;doprnt.c: 1261: if((int)val < 0) {
  2576  0001FA  0100               	movlb	0	; () banked
  2577  0001FC  AFA1               	btfss	(printf@val+1)& (0+255),7,b
  2578  0001FE  D053               	goto	l3794
  2579                           
  2580                           ; BSR set to: 0
  2581                           ;doprnt.c: 1262: flag |= 0x03;
  2582  000200  0E03               	movlw	3
  2583  000202  0100               	movlb	0	; () banked
  2584  000204  13A2               	iorwf	printf@flag& (0+255),f,b
  2585                           
  2586                           ; BSR set to: 0
  2587                           ;doprnt.c: 1263: val = -val;
  2588  000206  0100               	movlb	0	; () banked
  2589  000208  6DA0               	negf	printf@val& (0+255),b
  2590  00020A  1FA1               	comf	(printf@val+1)& (0+255),f,b
  2591  00020C  B0D8               	btfsc	status,0,c
  2592  00020E  2BA1               	incf	(printf@val+1)& (0+255),f,b
  2593                           
  2594                           ; BSR set to: 0
  2595                           ;doprnt.c: 1264: }
  2596                           ;doprnt.c: 1266: }
  2597  000210  D04A               	goto	l3794
  2598  000212                     l3760:
  2599                           
  2600                           ; BSR set to: 0
  2601                           ;doprnt.c: 1268: else
  2602                           ;doprnt.c: 1273: {
  2603                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2604  000212  C09B  FFD9         	movff	printf@ap,fsr2l
  2605  000216  C09C  FFDA         	movff	printf@ap+1,fsr2h
  2606  00021A  CFDE F0A0          	movff	postinc2,printf@val
  2607  00021E  CFDD F0A1          	movff	postdec2,printf@val+1
  2608                           
  2609                           ; BSR set to: 0
  2610  000222  0E02               	movlw	2
  2611  000224  0100               	movlb	0	; () banked
  2612  000226  279B               	addwf	printf@ap& (0+255),f,b
  2613  000228  0E00               	movlw	0
  2614  00022A  239C               	addwfc	(printf@ap+1)& (0+255),f,b
  2615                           
  2616                           ; BSR set to: 0
  2617                           ;doprnt.c: 1287: }
  2618                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  2619  00022C  D03C               	goto	l3794
  2620  00022E                     l3764:
  2621                           
  2622                           ; BSR set to: 0
  2623                           ;doprnt.c: 1302: case 0xC0:
  2624                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2625  00022E  0E01               	movlw	1
  2626  000230  0100               	movlb	0	; () banked
  2627  000232  6FA5               	movwf	printf@c& (0+255),b
  2628  000234                     l3766:
  2629                           
  2630                           ; BSR set to: 0
  2631  000234  0E05               	movlw	5
  2632  000236  0100               	movlb	0	; () banked
  2633  000238  19A5               	xorwf	printf@c& (0+255),w,b
  2634  00023A  B4D8               	btfsc	status,2,c
  2635  00023C  D040               	goto	l3796
  2636                           
  2637                           ; BSR set to: 0
  2638                           ;doprnt.c: 1306: if(val < dpowers[c])
  2639                           
  2640                           ; BSR set to: 0
  2641                           
  2642                           ; BSR set to: 0
  2643  00023E  0100               	movlb	0	; () banked
  2644  000240  51A5               	movf	printf@c& (0+255),w,b
  2645  000242  0D02               	mullw	2
  2646  000244  0E6D               	movlw	low _dpowers
  2647  000246  24F3               	addwf	prodl,w,c
  2648  000248  6EF6               	movwf	tblptrl,c
  2649  00024A  0EFC               	movlw	high _dpowers
  2650  00024C  20F4               	addwfc	prodh,w,c
  2651  00024E  6EF7               	movwf	tblptrh,c
  2652  000250                     	if	0	;There are less than 3 active tblptr bytes
  2653  000250                     	endif
  2654  000250  0009               	tblrd		*+
  2655  000252  50F5               	movf	tablat,w,c
  2656  000254  0100               	movlb	0	; () banked
  2657  000256  5DA0               	subwf	printf@val& (0+255),w,b
  2658  000258  0009               	tblrd		*+
  2659  00025A  50F5               	movf	tablat,w,c
  2660  00025C  0100               	movlb	0	; () banked
  2661  00025E  59A1               	subwfb	(printf@val+1)& (0+255),w,b
  2662  000260  A0D8               	btfss	status,0,c
  2663  000262  D02D               	goto	l3796
  2664                           
  2665                           ; BSR set to: 0
  2666                           
  2667                           ; BSR set to: 0
  2668                           
  2669                           ; BSR set to: 0
  2670                           ;doprnt.c: 1307: break;
  2671  000264  0100               	movlb	0	; () banked
  2672  000266  2BA5               	incf	printf@c& (0+255),f,b
  2673  000268  D7E5               	goto	l3766
  2674  00026A                     l3778:
  2675                           
  2676                           ; BSR set to: 0
  2677                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2678  00026A  0E01               	movlw	1
  2679  00026C  0100               	movlb	0	; () banked
  2680  00026E  6FA5               	movwf	printf@c& (0+255),b
  2681  000270                     l3780:
  2682                           
  2683                           ; BSR set to: 0
  2684  000270  0E04               	movlw	4
  2685  000272  0100               	movlb	0	; () banked
  2686  000274  19A5               	xorwf	printf@c& (0+255),w,b
  2687  000276  B4D8               	btfsc	status,2,c
  2688  000278  D022               	goto	l3796
  2689                           
  2690                           ; BSR set to: 0
  2691                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2692                           
  2693                           ; BSR set to: 0
  2694                           
  2695                           ; BSR set to: 0
  2696  00027A  0100               	movlb	0	; () banked
  2697  00027C  51A5               	movf	printf@c& (0+255),w,b
  2698  00027E  0D02               	mullw	2
  2699  000280  0E77               	movlw	low _hexpowers
  2700  000282  24F3               	addwf	prodl,w,c
  2701  000284  6EF6               	movwf	tblptrl,c
  2702  000286  0EFC               	movlw	high _hexpowers
  2703  000288  20F4               	addwfc	prodh,w,c
  2704  00028A  6EF7               	movwf	tblptrh,c
  2705  00028C                     	if	0	;There are less than 3 active tblptr bytes
  2706  00028C                     	endif
  2707  00028C  0009               	tblrd		*+
  2708  00028E  50F5               	movf	tablat,w,c
  2709  000290  0100               	movlb	0	; () banked
  2710  000292  5DA0               	subwf	printf@val& (0+255),w,b
  2711  000294  0009               	tblrd		*+
  2712  000296  50F5               	movf	tablat,w,c
  2713  000298  0100               	movlb	0	; () banked
  2714  00029A  59A1               	subwfb	(printf@val+1)& (0+255),w,b
  2715  00029C  A0D8               	btfss	status,0,c
  2716  00029E  D00F               	goto	l3796
  2717                           
  2718                           ; BSR set to: 0
  2719                           
  2720                           ; BSR set to: 0
  2721                           
  2722                           ; BSR set to: 0
  2723                           ;doprnt.c: 1318: break;
  2724  0002A0  0100               	movlb	0	; () banked
  2725  0002A2  2BA5               	incf	printf@c& (0+255),f,b
  2726  0002A4  D7E5               	goto	l3780
  2727  0002A6                     l3794:
  2728                           
  2729                           ; BSR set to: 0
  2730  0002A6  0100               	movlb	0	; () banked
  2731  0002A8  51A2               	movf	printf@flag& (0+255),w,b
  2732  0002AA  0BC0               	andlw	192
  2733                           
  2734                           ; Switch size 1, requested type "space"
  2735                           ; Number of cases is 3, Range of values is 0 to 192
  2736                           ; switch strategies available:
  2737                           ; Name         Instructions Cycles
  2738                           ; simple_byte           10     6 (average)
  2739                           ;	Chosen strategy is simple_byte
  2740  0002AC  0A00               	xorlw	0	; case 0
  2741  0002AE  B4D8               	btfsc	status,2,c
  2742  0002B0  D7BE               	goto	l3764
  2743  0002B2  0A80               	xorlw	128	; case 128
  2744  0002B4  B4D8               	btfsc	status,2,c
  2745  0002B6  D7D9               	goto	l3778
  2746  0002B8  0A40               	xorlw	64	; case 192
  2747  0002BA  B4D8               	btfsc	status,2,c
  2748  0002BC  D7B8               	goto	l3764
  2749  0002BE                     l3796:
  2750                           
  2751                           ; BSR set to: 0
  2752                           ;doprnt.c: 1345: if(width && flag & 0x03)
  2753  0002BE  0100               	movlb	0	; () banked
  2754  0002C0  51A3               	movf	printf@width& (0+255),w,b
  2755  0002C2  0100               	movlb	0	; () banked
  2756  0002C4  11A4               	iorwf	(printf@width+1)& (0+255),w,b
  2757  0002C6  B4D8               	btfsc	status,2,c
  2758  0002C8  D00B               	goto	l3802
  2759                           
  2760                           ; BSR set to: 0
  2761  0002CA  C0A2  F094         	movff	printf@flag,??_printf
  2762  0002CE  0E03               	movlw	3
  2763  0002D0  0100               	movlb	0	; () banked
  2764  0002D2  1794               	andwf	??_printf& (0+255),f,b
  2765  0002D4  B4D8               	btfsc	status,2,c
  2766  0002D6  D004               	goto	l3802
  2767                           
  2768                           ; BSR set to: 0
  2769                           ;doprnt.c: 1346: width--;
  2770  0002D8  0100               	movlb	0	; () banked
  2771  0002DA  07A3               	decf	printf@width& (0+255),f,b
  2772  0002DC  A0D8               	btfss	status,0,c
  2773  0002DE  07A4               	decf	(printf@width+1)& (0+255),f,b
  2774  0002E0                     l3802:
  2775                           
  2776                           ; BSR set to: 0
  2777                           ;doprnt.c: 1381: if(width > c)
  2778  0002E0  0E80               	movlw	128
  2779  0002E2  0100               	movlb	0	; () banked
  2780  0002E4  BFA5               	btfsc	printf@c& (0+255),7,b
  2781  0002E6  0E7F               	movlw	127
  2782  0002E8  0100               	movlb	0	; () banked
  2783  0002EA  6F94               	movwf	??_printf& (0+255),b
  2784  0002EC  0100               	movlb	0	; () banked
  2785  0002EE  51A3               	movf	printf@width& (0+255),w,b
  2786  0002F0  0100               	movlb	0	; () banked
  2787  0002F2  5DA5               	subwf	printf@c& (0+255),w,b
  2788  0002F4  0100               	movlb	0	; () banked
  2789  0002F6  51A4               	movf	(printf@width+1)& (0+255),w,b
  2790  0002F8  0A80               	xorlw	128
  2791  0002FA  0100               	movlb	0	; () banked
  2792  0002FC  5994               	subwfb	??_printf& (0+255),w,b
  2793  0002FE  B0D8               	btfsc	status,0,c
  2794  000300  D00B               	goto	l3806
  2795                           
  2796                           ; BSR set to: 0
  2797                           ;doprnt.c: 1382: width -= c;
  2798  000302  0100               	movlb	0	; () banked
  2799  000304  51A5               	movf	printf@c& (0+255),w,b
  2800  000306  0100               	movlb	0	; () banked
  2801  000308  5FA3               	subwf	printf@width& (0+255),f,b
  2802  00030A  0E00               	movlw	0
  2803  00030C  0100               	movlb	0	; () banked
  2804  00030E  BFA5               	btfsc	printf@c& (0+255),7,b
  2805  000310  0EFF               	movlw	255
  2806  000312  0100               	movlb	0	; () banked
  2807  000314  5BA4               	subwfb	(printf@width+1)& (0+255),f,b
  2808  000316  D005               	goto	l3808
  2809  000318                     l3806:
  2810                           
  2811                           ; BSR set to: 0
  2812                           ;doprnt.c: 1383: else
  2813                           ;doprnt.c: 1384: width = 0;
  2814  000318  0E00               	movlw	0
  2815  00031A  0100               	movlb	0	; () banked
  2816  00031C  6FA4               	movwf	(printf@width+1)& (0+255),b
  2817  00031E  0E00               	movlw	0
  2818  000320  6FA3               	movwf	printf@width& (0+255),b
  2819  000322                     l3808:
  2820                           
  2821                           ; BSR set to: 0
  2822                           ;doprnt.c: 1387: if(flag & 0x04) {
  2823  000322  0100               	movlb	0	; () banked
  2824  000324  A5A2               	btfss	printf@flag& (0+255),2,b
  2825  000326  D018               	goto	l3820
  2826                           
  2827                           ; BSR set to: 0
  2828                           ;doprnt.c: 1392: if(flag & 0x03)
  2829  000328  C0A2  F094         	movff	printf@flag,??_printf
  2830  00032C  0E03               	movlw	3
  2831  00032E  0100               	movlb	0	; () banked
  2832  000330  1794               	andwf	??_printf& (0+255),f,b
  2833  000332  B4D8               	btfsc	status,2,c
  2834  000334  D003               	goto	l3814
  2835                           
  2836                           ; BSR set to: 0
  2837                           ;doprnt.c: 1393: (putch('-') );
  2838  000336  0E2D               	movlw	45
  2839  000338  EC5C  F011         	call	_putch
  2840  00033C                     l3814:
  2841                           
  2842                           ;doprnt.c: 1415: if(width)
  2843  00033C  0100               	movlb	0	; () banked
  2844  00033E  51A3               	movf	printf@width& (0+255),w,b
  2845  000340  0100               	movlb	0	; () banked
  2846  000342  11A4               	iorwf	(printf@width+1)& (0+255),w,b
  2847  000344  B4D8               	btfsc	status,2,c
  2848  000346  D025               	goto	l3830
  2849                           
  2850                           ; BSR set to: 0
  2851                           ;doprnt.c: 1417: (putch('0') );
  2852                           
  2853                           ; BSR set to: 0
  2854                           
  2855                           ;doprnt.c: 1416: do
  2856  000348  0E30               	movlw	48
  2857  00034A  EC5C  F011         	call	_putch
  2858                           
  2859                           ;doprnt.c: 1418: while(--width);
  2860  00034E  0100               	movlb	0	; () banked
  2861  000350  07A3               	decf	printf@width& (0+255),f,b
  2862  000352  A0D8               	btfss	status,0,c
  2863  000354  07A4               	decf	(printf@width+1)& (0+255),f,b
  2864  000356  D7F2               	goto	l3814
  2865  000358                     l3820:
  2866                           
  2867                           ; BSR set to: 0
  2868                           ;doprnt.c: 1422: {
  2869                           ;doprnt.c: 1424: if(width
  2870                           ;doprnt.c: 1428: )
  2871  000358  0100               	movlb	0	; () banked
  2872  00035A  51A3               	movf	printf@width& (0+255),w,b
  2873  00035C  0100               	movlb	0	; () banked
  2874  00035E  11A4               	iorwf	(printf@width+1)& (0+255),w,b
  2875  000360  B4D8               	btfsc	status,2,c
  2876  000362  D00D               	goto	l3826
  2877  000364                     l3822:
  2878                           
  2879                           ; BSR set to: 0
  2880                           ;doprnt.c: 1430: (putch(' ') );
  2881  000364  0E20               	movlw	32
  2882  000366  EC5C  F011         	call	_putch
  2883                           
  2884                           ;doprnt.c: 1431: while(--width);
  2885  00036A  0100               	movlb	0	; () banked
  2886  00036C  07A3               	decf	printf@width& (0+255),f,b
  2887  00036E  A0D8               	btfss	status,0,c
  2888  000370  07A4               	decf	(printf@width+1)& (0+255),f,b
  2889  000372  0100               	movlb	0	; () banked
  2890  000374  51A3               	movf	printf@width& (0+255),w,b
  2891  000376  0100               	movlb	0	; () banked
  2892  000378  11A4               	iorwf	(printf@width+1)& (0+255),w,b
  2893  00037A  A4D8               	btfss	status,2,c
  2894  00037C  D7F3               	goto	l3822
  2895  00037E                     l3826:
  2896                           
  2897                           ; BSR set to: 0
  2898                           ;doprnt.c: 1438: if(flag & 0x03)
  2899  00037E  C0A2  F094         	movff	printf@flag,??_printf
  2900  000382  0E03               	movlw	3
  2901  000384  0100               	movlb	0	; () banked
  2902  000386  1794               	andwf	??_printf& (0+255),f,b
  2903  000388  B4D8               	btfsc	status,2,c
  2904  00038A  D003               	goto	l3830
  2905                           
  2906                           ; BSR set to: 0
  2907                           ;doprnt.c: 1439: (putch('-') );
  2908  00038C  0E2D               	movlw	45
  2909  00038E  EC5C  F011         	call	_putch
  2910  000392                     l3830:
  2911                           
  2912                           ;doprnt.c: 1469: }
  2913                           ;doprnt.c: 1472: prec = c;
  2914  000392  C0A5  F09F         	movff	printf@c,printf@prec
  2915                           
  2916                           ;doprnt.c: 1474: while(prec--) {
  2917  000396  D05D               	goto	l3844
  2918  000398                     l3832:
  2919                           
  2920                           ;doprnt.c: 1486: case 0xC0:
  2921                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2922  000398  0100               	movlb	0	; () banked
  2923  00039A  519F               	movf	printf@prec& (0+255),w,b
  2924  00039C  0D02               	mullw	2
  2925  00039E  0E6D               	movlw	low _dpowers
  2926  0003A0  24F3               	addwf	prodl,w,c
  2927  0003A2  6EF6               	movwf	tblptrl,c
  2928  0003A4  0EFC               	movlw	high _dpowers
  2929  0003A6  20F4               	addwfc	prodh,w,c
  2930  0003A8  6EF7               	movwf	tblptrh,c
  2931  0003AA                     	if	0	;There are less than 3 active tblptr bytes
  2932  0003AA                     	endif
  2933  0003AA  0009               	tblrd		*+
  2934  0003AC  CFF5 F082          	movff	tablat,___lwdiv@divisor
  2935  0003B0  000A               	tblrd		*-
  2936  0003B2  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  2937  0003B6  C0A0  F080         	movff	printf@val,___lwdiv@dividend
  2938  0003BA  C0A1  F081         	movff	printf@val+1,___lwdiv@dividend+1
  2939  0003BE  ECCD  F00D         	call	___lwdiv	;wreg free
  2940  0003C2  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  2941  0003C6  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  2942  0003CA  0E00               	movlw	0
  2943  0003CC  0100               	movlb	0	; () banked
  2944  0003CE  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  2945  0003D0  0E0A               	movlw	10
  2946  0003D2  6F89               	movwf	___lwmod@divisor& (0+255),b
  2947  0003D4  ECB4  F00E         	call	___lwmod	;wreg free
  2948  0003D8  0100               	movlb	0	; () banked
  2949  0003DA  5187               	movf	?___lwmod& (0+255),w,b
  2950  0003DC  0F30               	addlw	48
  2951  0003DE  0100               	movlb	0	; () banked
  2952  0003E0  6FA5               	movwf	printf@c& (0+255),b
  2953                           
  2954                           ;doprnt.c: 1491: break;
  2955  0003E2  D033               	goto	l3842
  2956  0003E4                     l3834:
  2957                           
  2958                           ; BSR set to: 0
  2959                           ;doprnt.c: 1499: {
  2960                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2961  0003E4  C0A0  F080         	movff	printf@val,___lwdiv@dividend
  2962  0003E8  C0A1  F081         	movff	printf@val+1,___lwdiv@dividend+1
  2963  0003EC  0100               	movlb	0	; () banked
  2964  0003EE  519F               	movf	printf@prec& (0+255),w,b
  2965  0003F0  0D02               	mullw	2
  2966  0003F2  0E77               	movlw	low _hexpowers
  2967  0003F4  24F3               	addwf	prodl,w,c
  2968  0003F6  6EF6               	movwf	tblptrl,c
  2969  0003F8  0EFC               	movlw	high _hexpowers
  2970  0003FA  20F4               	addwfc	prodh,w,c
  2971  0003FC  6EF7               	movwf	tblptrh,c
  2972  0003FE                     	if	0	;There are less than 3 active tblptr bytes
  2973  0003FE                     	endif
  2974  0003FE  0009               	tblrd		*+
  2975  000400  CFF5 F082          	movff	tablat,___lwdiv@divisor
  2976  000404  000A               	tblrd		*-
  2977  000406  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  2978  00040A  ECCD  F00D         	call	___lwdiv	;wreg free
  2979  00040E  0100               	movlb	0	; () banked
  2980  000410  5180               	movf	?___lwdiv& (0+255),w,b
  2981  000412  0B0F               	andlw	15
  2982  000414  0100               	movlb	0	; () banked
  2983  000416  6F9A               	movwf	printf@idx& (0+255),b
  2984                           
  2985                           ; BSR set to: 0
  2986                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2987  000418  0100               	movlb	0	; () banked
  2988  00041A  519A               	movf	printf@idx& (0+255),w,b
  2989  00041C  0D01               	mullw	1
  2990  00041E  0E38               	movlw	low STR_52
  2991  000420  24F3               	addwf	prodl,w,c
  2992  000422  6EF6               	movwf	tblptrl,c
  2993  000424  0EFF               	movlw	high STR_52
  2994  000426  20F4               	addwfc	prodh,w,c
  2995  000428  6EF7               	movwf	tblptrh,c
  2996  00042A                     	if	0	;There are less than 3 active tblptr bytes
  2997  00042A                     	endif
  2998  00042A  0008               	tblrd		*
  2999  00042C  CFF5 F0A5          	movff	tablat,printf@c
  3000                           
  3001                           ; BSR set to: 0
  3002                           ;doprnt.c: 1523: }
  3003                           
  3004                           ;doprnt.c: 1508: }
  3005                           ;doprnt.c: 1510: break;
  3006  000430  D00C               	goto	l3842
  3007  000432                     l3840:
  3008  000432  0100               	movlb	0	; () banked
  3009  000434  51A2               	movf	printf@flag& (0+255),w,b
  3010  000436  0BC0               	andlw	192
  3011                           
  3012                           ; Switch size 1, requested type "space"
  3013                           ; Number of cases is 3, Range of values is 0 to 192
  3014                           ; switch strategies available:
  3015                           ; Name         Instructions Cycles
  3016                           ; simple_byte           10     6 (average)
  3017                           ;	Chosen strategy is simple_byte
  3018  000438  0A00               	xorlw	0	; case 0
  3019  00043A  B4D8               	btfsc	status,2,c
  3020  00043C  D7AD               	goto	l3832
  3021  00043E  0A80               	xorlw	128	; case 128
  3022  000440  B4D8               	btfsc	status,2,c
  3023  000442  D7D0               	goto	l3834
  3024  000444  0A40               	xorlw	64	; case 192
  3025  000446  B4D8               	btfsc	status,2,c
  3026  000448  D7A7               	goto	l3832
  3027  00044A                     l3842:
  3028                           
  3029                           ; BSR set to: 0
  3030                           ;doprnt.c: 1524: (putch(c) );
  3031  00044A  0100               	movlb	0	; () banked
  3032  00044C  51A5               	movf	printf@c& (0+255),w,b
  3033  00044E  EC5C  F011         	call	_putch
  3034  000452                     l3844:
  3035  000452  0100               	movlb	0	; () banked
  3036  000454  079F               	decf	printf@prec& (0+255),f,b
  3037  000456  0100               	movlb	0	; () banked
  3038  000458  299F               	incf	printf@prec& (0+255),w,b
  3039  00045A  A4D8               	btfss	status,2,c
  3040  00045C  D7EA               	goto	l3840
  3041  00045E                     l3846:
  3042  00045E  C08C  FFF6         	movff	printf@f,tblptrl
  3043  000462  C08D  FFF7         	movff	printf@f+1,tblptrh
  3044  000466  0100               	movlb	0	; () banked
  3045  000468  4B8C               	infsnz	printf@f& (0+255),f,b
  3046  00046A  2B8D               	incf	(printf@f+1)& (0+255),f,b
  3047  00046C                     	if	0	;tblptru may be non-zero
  3048  00046C                     	endif
  3049  00046C                     	if	0	;tblptru may be non-zero
  3050  00046C                     	endif
  3051  00046C  0008               	tblrd		*
  3052  00046E  CFF5 F0A5          	movff	tablat,printf@c
  3053  000472  0100               	movlb	0	; () banked
  3054  000474  51A5               	movf	printf@c& (0+255),w,b
  3055  000476  B4D8               	btfsc	status,2,c
  3056  000478  0012               	return	
  3057  00047A  D5D2               	goto	l3696
  3058  00047C                     __end_of_printf:
  3059                           	opt stack 0
  3060                           tblptru	equ	0xFF8
  3061                           tblptrh	equ	0xFF7
  3062                           tblptrl	equ	0xFF6
  3063                           tablat	equ	0xFF5
  3064                           prodh	equ	0xFF4
  3065                           prodl	equ	0xFF3
  3066                           intcon	equ	0xFF2
  3067                           intcon3	equ	0xFF0
  3068                           postinc0	equ	0xFEE
  3069                           wreg	equ	0xFE8
  3070                           indf2	equ	0xFDF
  3071                           postinc2	equ	0xFDE
  3072                           postdec2	equ	0xFDD
  3073                           fsr2h	equ	0xFDA
  3074                           fsr2l	equ	0xFD9
  3075                           status	equ	0xFD8
  3076                           
  3077 ;; *************** function _putch *****************
  3078 ;; Defined at:
  3079 ;;		line 25 in file "lcd.c"
  3080 ;; Parameters:    Size  Location     Type
  3081 ;;  data            1    wreg     unsigned char 
  3082 ;; Auto vars:     Size  Location     Type
  3083 ;;  data            1    2[BANK0 ] unsigned char 
  3084 ;; Return value:  Size  Location     Type
  3085 ;;                  1    wreg      void 
  3086 ;; Registers used:
  3087 ;;		wreg, status,2, status,0, cstack
  3088 ;; Tracked objects:
  3089 ;;		On entry : 0/0
  3090 ;;		On exit  : 0/0
  3091 ;;		Unchanged: 0/0
  3092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3094 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3096 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3097 ;;Total ram usage:        1 bytes
  3098 ;; Hardware stack levels used:    1
  3099 ;; Hardware stack levels required when called:    8
  3100 ;; This function calls:
  3101 ;;		_lcdNibble
  3102 ;; This function is called by:
  3103 ;;		_printf
  3104 ;; This function uses a non-reentrant model
  3105 ;;
  3106                           
  3107                           	psect	text3
  3108  0022B8                     __ptext3:
  3109                           	opt stack 0
  3110  0022B8                     _putch:
  3111                           	opt stack 20
  3112                           
  3113                           ;incstack = 0
  3114                           ;putch@data stored from wreg
  3115  0022B8  0100               	movlb	0	; () banked
  3116  0022BA  6F82               	movwf	putch@data& (0+255),b
  3117                           
  3118                           ;lcd.c: 26: LATDbits.LATD2 = 1;
  3119  0022BC  848C               	bsf	3980,2,c	;volatile
  3120                           
  3121                           ;lcd.c: 27: lcdNibble(data);
  3122  0022BE  0100               	movlb	0	; () banked
  3123  0022C0  5182               	movf	putch@data& (0+255),w,b
  3124  0022C2  EC80  F00E         	call	_lcdNibble
  3125  0022C6  0012               	return		;funcret
  3126  0022C8                     __end_of_putch:
  3127                           	opt stack 0
  3128                           tblptru	equ	0xFF8
  3129                           tblptrh	equ	0xFF7
  3130                           tblptrl	equ	0xFF6
  3131                           tablat	equ	0xFF5
  3132                           prodh	equ	0xFF4
  3133                           prodl	equ	0xFF3
  3134                           intcon	equ	0xFF2
  3135                           intcon3	equ	0xFF0
  3136                           postinc0	equ	0xFEE
  3137                           wreg	equ	0xFE8
  3138                           indf2	equ	0xFDF
  3139                           postinc2	equ	0xFDE
  3140                           postdec2	equ	0xFDD
  3141                           fsr2h	equ	0xFDA
  3142                           fsr2l	equ	0xFD9
  3143                           status	equ	0xFD8
  3144                           
  3145 ;; *************** function _isdigit *****************
  3146 ;; Defined at:
  3147 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  3148 ;; Parameters:    Size  Location     Type
  3149 ;;  c               1    wreg     unsigned char 
  3150 ;; Auto vars:     Size  Location     Type
  3151 ;;  c               1    2[BANK0 ] unsigned char 
  3152 ;; Return value:  Size  Location     Type
  3153 ;;		None               void
  3154 ;; Registers used:
  3155 ;;		wreg, status,2, status,0
  3156 ;; Tracked objects:
  3157 ;;		On entry : 0/0
  3158 ;;		On exit  : 0/0
  3159 ;;		Unchanged: 0/0
  3160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3162 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3163 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3164 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3165 ;;Total ram usage:        3 bytes
  3166 ;; Hardware stack levels used:    1
  3167 ;; Hardware stack levels required when called:    7
  3168 ;; This function calls:
  3169 ;;		Nothing
  3170 ;; This function is called by:
  3171 ;;		_printf
  3172 ;; This function uses a non-reentrant model
  3173 ;;
  3174                           
  3175                           	psect	text4
  3176  002128                     __ptext4:
  3177                           	opt stack 0
  3178  002128                     _isdigit:
  3179                           	opt stack 21
  3180                           
  3181                           ;incstack = 0
  3182                           ;isdigit@c stored from wreg
  3183  002128  0100               	movlb	0	; () banked
  3184  00212A  6F82               	movwf	isdigit@c& (0+255),b
  3185  00212C  0E00               	movlw	0
  3186  00212E  0100               	movlb	0	; () banked
  3187  002130  6F81               	movwf	_isdigit$1048& (0+255),b
  3188                           
  3189                           ; BSR set to: 0
  3190  002132  0E3A               	movlw	58
  3191  002134  0100               	movlb	0	; () banked
  3192  002136  6182               	cpfslt	isdigit@c& (0+255),b
  3193  002138  D007               	goto	l3554
  3194                           
  3195                           ; BSR set to: 0
  3196  00213A  0E2F               	movlw	47
  3197  00213C  0100               	movlb	0	; () banked
  3198  00213E  6582               	cpfsgt	isdigit@c& (0+255),b
  3199  002140  D003               	goto	l3554
  3200                           
  3201                           ; BSR set to: 0
  3202  002142  0E01               	movlw	1
  3203  002144  0100               	movlb	0	; () banked
  3204  002146  6F81               	movwf	_isdigit$1048& (0+255),b
  3205  002148                     l3554:
  3206                           
  3207                           ; BSR set to: 0
  3208  002148  C081  F080         	movff	_isdigit$1048,??_isdigit
  3209  00214C  0100               	movlb	0	; () banked
  3210  00214E  3180               	rrcf	??_isdigit& (0+255),w,b
  3211  002150  0012               	return	
  3212  002152                     __end_of_isdigit:
  3213                           	opt stack 0
  3214                           tblptru	equ	0xFF8
  3215                           tblptrh	equ	0xFF7
  3216                           tblptrl	equ	0xFF6
  3217                           tablat	equ	0xFF5
  3218                           prodh	equ	0xFF4
  3219                           prodl	equ	0xFF3
  3220                           intcon	equ	0xFF2
  3221                           intcon3	equ	0xFF0
  3222                           postinc0	equ	0xFEE
  3223                           wreg	equ	0xFE8
  3224                           indf2	equ	0xFDF
  3225                           postinc2	equ	0xFDE
  3226                           postdec2	equ	0xFDD
  3227                           fsr2h	equ	0xFDA
  3228                           fsr2l	equ	0xFD9
  3229                           status	equ	0xFD8
  3230                           
  3231 ;; *************** function ___wmul *****************
  3232 ;; Defined at:
  3233 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  3234 ;; Parameters:    Size  Location     Type
  3235 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3236 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3237 ;; Auto vars:     Size  Location     Type
  3238 ;;  product         2    4[BANK0 ] unsigned int 
  3239 ;; Return value:  Size  Location     Type
  3240 ;;                  2    0[BANK0 ] unsigned int 
  3241 ;; Registers used:
  3242 ;;		wreg, status,2, status,0, prodl, prodh
  3243 ;; Tracked objects:
  3244 ;;		On entry : 0/0
  3245 ;;		On exit  : 0/0
  3246 ;;		Unchanged: 0/0
  3247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3248 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3249 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3251 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3252 ;;Total ram usage:        6 bytes
  3253 ;; Hardware stack levels used:    1
  3254 ;; Hardware stack levels required when called:    7
  3255 ;; This function calls:
  3256 ;;		Nothing
  3257 ;; This function is called by:
  3258 ;;		_printf
  3259 ;; This function uses a non-reentrant model
  3260 ;;
  3261                           
  3262                           	psect	text5
  3263  002068                     __ptext5:
  3264                           	opt stack 0
  3265  002068                     ___wmul:
  3266                           	opt stack 21
  3267                           
  3268                           ; BSR set to: 0
  3269                           ;incstack = 0
  3270  002068  0100               	movlb	0	; () banked
  3271  00206A  5180               	movf	___wmul@multiplier& (0+255),w,b
  3272  00206C  0100               	movlb	0	; () banked
  3273  00206E  0382               	mulwf	___wmul@multiplicand& (0+255),b
  3274  002070  CFF3 F084          	movff	prodl,___wmul@product
  3275  002074  CFF4 F085          	movff	prodh,___wmul@product+1
  3276  002078  0100               	movlb	0	; () banked
  3277  00207A  5180               	movf	___wmul@multiplier& (0+255),w,b
  3278  00207C  0100               	movlb	0	; () banked
  3279  00207E  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  3280  002080  50F3               	movf	prodl,w,c
  3281  002082  0100               	movlb	0	; () banked
  3282  002084  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  3283  002086  0100               	movlb	0	; () banked
  3284  002088  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  3285  00208A  0100               	movlb	0	; () banked
  3286  00208C  0382               	mulwf	___wmul@multiplicand& (0+255),b
  3287  00208E  50F3               	movf	prodl,w,c
  3288  002090  0100               	movlb	0	; () banked
  3289  002092  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  3290                           
  3291                           ; BSR set to: 0
  3292  002094  C084  F080         	movff	___wmul@product,?___wmul
  3293  002098  C085  F081         	movff	___wmul@product+1,?___wmul+1
  3294  00209C  0012               	return	
  3295  00209E                     __end_of___wmul:
  3296                           	opt stack 0
  3297                           tblptru	equ	0xFF8
  3298                           tblptrh	equ	0xFF7
  3299                           tblptrl	equ	0xFF6
  3300                           tablat	equ	0xFF5
  3301                           prodh	equ	0xFF4
  3302                           prodl	equ	0xFF3
  3303                           intcon	equ	0xFF2
  3304                           intcon3	equ	0xFF0
  3305                           postinc0	equ	0xFEE
  3306                           wreg	equ	0xFE8
  3307                           indf2	equ	0xFDF
  3308                           postinc2	equ	0xFDE
  3309                           postdec2	equ	0xFDD
  3310                           fsr2h	equ	0xFDA
  3311                           fsr2l	equ	0xFD9
  3312                           status	equ	0xFD8
  3313                           
  3314 ;; *************** function ___lwmod *****************
  3315 ;; Defined at:
  3316 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  3317 ;; Parameters:    Size  Location     Type
  3318 ;;  dividend        2    7[BANK0 ] unsigned int 
  3319 ;;  divisor         2    9[BANK0 ] unsigned int 
  3320 ;; Auto vars:     Size  Location     Type
  3321 ;;  counter         1   11[BANK0 ] unsigned char 
  3322 ;; Return value:  Size  Location     Type
  3323 ;;                  2    7[BANK0 ] unsigned int 
  3324 ;; Registers used:
  3325 ;;		wreg, status,2, status,0
  3326 ;; Tracked objects:
  3327 ;;		On entry : 0/0
  3328 ;;		On exit  : 0/0
  3329 ;;		Unchanged: 0/0
  3330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3331 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3332 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3334 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3335 ;;Total ram usage:        5 bytes
  3336 ;; Hardware stack levels used:    1
  3337 ;; Hardware stack levels required when called:    7
  3338 ;; This function calls:
  3339 ;;		Nothing
  3340 ;; This function is called by:
  3341 ;;		_printf
  3342 ;; This function uses a non-reentrant model
  3343 ;;
  3344                           
  3345                           	psect	text6
  3346  001D68                     __ptext6:
  3347                           	opt stack 0
  3348  001D68                     ___lwmod:
  3349                           	opt stack 21
  3350                           
  3351                           ; BSR set to: 0
  3352                           ;incstack = 0
  3353  001D68  0100               	movlb	0	; () banked
  3354  001D6A  5189               	movf	___lwmod@divisor& (0+255),w,b
  3355  001D6C  0100               	movlb	0	; () banked
  3356  001D6E  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  3357  001D70  B4D8               	btfsc	status,2,c
  3358  001D72  D026               	goto	l935
  3359                           
  3360                           ; BSR set to: 0
  3361  001D74  0E01               	movlw	1
  3362  001D76  0100               	movlb	0	; () banked
  3363  001D78  6F8B               	movwf	___lwmod@counter& (0+255),b
  3364  001D7A  D006               	goto	l3614
  3365  001D7C                     l3612:
  3366                           
  3367                           ; BSR set to: 0
  3368  001D7C  0100               	movlb	0	; () banked
  3369  001D7E  90D8               	bcf	status,0,c
  3370  001D80  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  3371  001D82  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  3372  001D84  0100               	movlb	0	; () banked
  3373  001D86  2B8B               	incf	___lwmod@counter& (0+255),f,b
  3374  001D88                     l3614:
  3375                           
  3376                           ; BSR set to: 0
  3377  001D88  0100               	movlb	0	; () banked
  3378  001D8A  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  3379  001D8C  D7F7               	goto	l3612
  3380  001D8E                     l3616:
  3381                           
  3382                           ; BSR set to: 0
  3383  001D8E  0100               	movlb	0	; () banked
  3384  001D90  5189               	movf	___lwmod@divisor& (0+255),w,b
  3385  001D92  0100               	movlb	0	; () banked
  3386  001D94  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  3387  001D96  0100               	movlb	0	; () banked
  3388  001D98  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3389  001D9A  0100               	movlb	0	; () banked
  3390  001D9C  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  3391  001D9E  A0D8               	btfss	status,0,c
  3392  001DA0  D008               	goto	l3620
  3393                           
  3394                           ; BSR set to: 0
  3395  001DA2  0100               	movlb	0	; () banked
  3396  001DA4  5189               	movf	___lwmod@divisor& (0+255),w,b
  3397  001DA6  0100               	movlb	0	; () banked
  3398  001DA8  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  3399  001DAA  0100               	movlb	0	; () banked
  3400  001DAC  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  3401  001DAE  0100               	movlb	0	; () banked
  3402  001DB0  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  3403  001DB2                     l3620:
  3404                           
  3405                           ; BSR set to: 0
  3406  001DB2  0100               	movlb	0	; () banked
  3407  001DB4  90D8               	bcf	status,0,c
  3408  001DB6  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  3409  001DB8  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  3410                           
  3411                           ; BSR set to: 0
  3412  001DBA  0100               	movlb	0	; () banked
  3413  001DBC  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  3414  001DBE  D7E7               	goto	l3616
  3415  001DC0                     l935:
  3416                           
  3417                           ; BSR set to: 0
  3418  001DC0  C087  F087         	movff	___lwmod@dividend,?___lwmod
  3419  001DC4  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  3420                           
  3421                           ; BSR set to: 0
  3422  001DC8  0012               	return		;funcret
  3423  001DCA                     __end_of___lwmod:
  3424                           	opt stack 0
  3425                           tblptru	equ	0xFF8
  3426                           tblptrh	equ	0xFF7
  3427                           tblptrl	equ	0xFF6
  3428                           tablat	equ	0xFF5
  3429                           prodh	equ	0xFF4
  3430                           prodl	equ	0xFF3
  3431                           intcon	equ	0xFF2
  3432                           intcon3	equ	0xFF0
  3433                           postinc0	equ	0xFEE
  3434                           wreg	equ	0xFE8
  3435                           indf2	equ	0xFDF
  3436                           postinc2	equ	0xFDE
  3437                           postdec2	equ	0xFDD
  3438                           fsr2h	equ	0xFDA
  3439                           fsr2l	equ	0xFD9
  3440                           status	equ	0xFD8
  3441                           
  3442 ;; *************** function ___lwdiv *****************
  3443 ;; Defined at:
  3444 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  3445 ;; Parameters:    Size  Location     Type
  3446 ;;  dividend        2    0[BANK0 ] unsigned int 
  3447 ;;  divisor         2    2[BANK0 ] unsigned int 
  3448 ;; Auto vars:     Size  Location     Type
  3449 ;;  quotient        2    4[BANK0 ] unsigned int 
  3450 ;;  counter         1    6[BANK0 ] unsigned char 
  3451 ;; Return value:  Size  Location     Type
  3452 ;;                  2    0[BANK0 ] unsigned int 
  3453 ;; Registers used:
  3454 ;;		wreg, status,2, status,0
  3455 ;; Tracked objects:
  3456 ;;		On entry : 0/0
  3457 ;;		On exit  : 0/0
  3458 ;;		Unchanged: 0/0
  3459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3460 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3461 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3463 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3464 ;;Total ram usage:        7 bytes
  3465 ;; Hardware stack levels used:    1
  3466 ;; Hardware stack levels required when called:    7
  3467 ;; This function calls:
  3468 ;;		Nothing
  3469 ;; This function is called by:
  3470 ;;		_printf
  3471 ;; This function uses a non-reentrant model
  3472 ;;
  3473                           
  3474                           	psect	text7
  3475  001B9A                     __ptext7:
  3476                           	opt stack 0
  3477  001B9A                     ___lwdiv:
  3478                           	opt stack 21
  3479                           
  3480                           ; BSR set to: 0
  3481                           ;incstack = 0
  3482  001B9A  0E00               	movlw	0
  3483  001B9C  0100               	movlb	0	; () banked
  3484  001B9E  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
  3485  001BA0  0E00               	movlw	0
  3486  001BA2  6F84               	movwf	___lwdiv@quotient& (0+255),b
  3487                           
  3488                           ; BSR set to: 0
  3489  001BA4  0100               	movlb	0	; () banked
  3490  001BA6  5182               	movf	___lwdiv@divisor& (0+255),w,b
  3491  001BA8  0100               	movlb	0	; () banked
  3492  001BAA  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  3493  001BAC  B4D8               	btfsc	status,2,c
  3494  001BAE  D02C               	goto	l925
  3495                           
  3496                           ; BSR set to: 0
  3497  001BB0  0E01               	movlw	1
  3498  001BB2  0100               	movlb	0	; () banked
  3499  001BB4  6F86               	movwf	___lwdiv@counter& (0+255),b
  3500  001BB6  D006               	goto	l3594
  3501  001BB8                     l3592:
  3502                           
  3503                           ; BSR set to: 0
  3504  001BB8  0100               	movlb	0	; () banked
  3505  001BBA  90D8               	bcf	status,0,c
  3506  001BBC  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  3507  001BBE  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  3508  001BC0  0100               	movlb	0	; () banked
  3509  001BC2  2B86               	incf	___lwdiv@counter& (0+255),f,b
  3510  001BC4                     l3594:
  3511                           
  3512                           ; BSR set to: 0
  3513  001BC4  0100               	movlb	0	; () banked
  3514  001BC6  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  3515  001BC8  D7F7               	goto	l3592
  3516  001BCA                     l3596:
  3517                           
  3518                           ; BSR set to: 0
  3519  001BCA  0100               	movlb	0	; () banked
  3520  001BCC  90D8               	bcf	status,0,c
  3521  001BCE  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
  3522  001BD0  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  3523                           
  3524                           ; BSR set to: 0
  3525  001BD2  0100               	movlb	0	; () banked
  3526  001BD4  5182               	movf	___lwdiv@divisor& (0+255),w,b
  3527  001BD6  0100               	movlb	0	; () banked
  3528  001BD8  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  3529  001BDA  0100               	movlb	0	; () banked
  3530  001BDC  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3531  001BDE  0100               	movlb	0	; () banked
  3532  001BE0  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  3533  001BE2  A0D8               	btfss	status,0,c
  3534  001BE4  D00A               	goto	l3604
  3535                           
  3536                           ; BSR set to: 0
  3537  001BE6  0100               	movlb	0	; () banked
  3538  001BE8  5182               	movf	___lwdiv@divisor& (0+255),w,b
  3539  001BEA  0100               	movlb	0	; () banked
  3540  001BEC  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  3541  001BEE  0100               	movlb	0	; () banked
  3542  001BF0  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  3543  001BF2  0100               	movlb	0	; () banked
  3544  001BF4  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  3545                           
  3546                           ; BSR set to: 0
  3547  001BF6  0100               	movlb	0	; () banked
  3548  001BF8  8184               	bsf	___lwdiv@quotient& (0+255),0,b
  3549  001BFA                     l3604:
  3550                           
  3551                           ; BSR set to: 0
  3552  001BFA  0100               	movlb	0	; () banked
  3553  001BFC  90D8               	bcf	status,0,c
  3554  001BFE  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  3555  001C00  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  3556                           
  3557                           ; BSR set to: 0
  3558  001C02  0100               	movlb	0	; () banked
  3559  001C04  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
  3560  001C06  D7E1               	goto	l3596
  3561  001C08                     l925:
  3562                           
  3563                           ; BSR set to: 0
  3564  001C08  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
  3565  001C0C  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3566                           
  3567                           ; BSR set to: 0
  3568  001C10  0012               	return		;funcret
  3569  001C12                     __end_of___lwdiv:
  3570                           	opt stack 0
  3571                           tblptru	equ	0xFF8
  3572                           tblptrh	equ	0xFF7
  3573                           tblptrl	equ	0xFF6
  3574                           tablat	equ	0xFF5
  3575                           prodh	equ	0xFF4
  3576                           prodl	equ	0xFF3
  3577                           intcon	equ	0xFF2
  3578                           intcon3	equ	0xFF0
  3579                           postinc0	equ	0xFEE
  3580                           wreg	equ	0xFE8
  3581                           indf2	equ	0xFDF
  3582                           postinc2	equ	0xFDE
  3583                           postdec2	equ	0xFDD
  3584                           fsr2h	equ	0xFDA
  3585                           fsr2l	equ	0xFD9
  3586                           status	equ	0xFD8
  3587                           
  3588 ;; *************** function _getTime *****************
  3589 ;; Defined at:
  3590 ;;		line 72 in file "modules.c"
  3591 ;; Parameters:    Size  Location     Type
  3592 ;;  time            2    3[BANK0 ] PTR unsigned char 
  3593 ;;		 -> time(7), 
  3594 ;; Auto vars:     Size  Location     Type
  3595 ;;  i               1    5[BANK0 ] unsigned char 
  3596 ;; Return value:  Size  Location     Type
  3597 ;;                  1    wreg      void 
  3598 ;; Registers used:
  3599 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3600 ;; Tracked objects:
  3601 ;;		On entry : 0/0
  3602 ;;		On exit  : 0/0
  3603 ;;		Unchanged: 0/0
  3604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3605 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3606 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3608 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3609 ;;Total ram usage:        3 bytes
  3610 ;; Hardware stack levels used:    1
  3611 ;; Hardware stack levels required when called:    9
  3612 ;; This function calls:
  3613 ;;		_I2C_Master_Read
  3614 ;;		_I2C_Master_Start
  3615 ;;		_I2C_Master_Stop
  3616 ;;		_I2C_Master_Write
  3617 ;; This function is called by:
  3618 ;;		_showRTC
  3619 ;; This function uses a non-reentrant model
  3620 ;;
  3621                           
  3622                           	psect	text8
  3623  00198A                     __ptext8:
  3624                           	opt stack 0
  3625  00198A                     _getTime:
  3626                           	opt stack 20
  3627                           
  3628                           ;modules.c: 73: (INTCONbits.GIE = 0);
  3629                           
  3630                           ; BSR set to: 0
  3631                           ;incstack = 0
  3632  00198A  9EF2               	bcf	intcon,7,c	;volatile
  3633                           
  3634                           ;modules.c: 77: I2C_Master_Start();
  3635  00198C  EC86  F011         	call	_I2C_Master_Start	;wreg free
  3636                           
  3637                           ;modules.c: 78: I2C_Master_Write(0b11010000);
  3638  001990  0E00               	movlw	0
  3639  001992  0100               	movlb	0	; () banked
  3640  001994  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3641  001996  0ED0               	movlw	208
  3642  001998  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3643  00199A  EC78  F011         	call	_I2C_Master_Write	;wreg free
  3644                           
  3645                           ;modules.c: 79: I2C_Master_Write(0x00);
  3646  00199E  0E00               	movlw	0
  3647  0019A0  0100               	movlb	0	; () banked
  3648  0019A2  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3649  0019A4  0E00               	movlw	0
  3650  0019A6  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3651  0019A8  EC78  F011         	call	_I2C_Master_Write	;wreg free
  3652                           
  3653                           ;modules.c: 80: I2C_Master_Stop();
  3654  0019AC  EC82  F011         	call	_I2C_Master_Stop	;wreg free
  3655                           
  3656                           ;modules.c: 83: I2C_Master_Start();
  3657  0019B0  EC86  F011         	call	_I2C_Master_Start	;wreg free
  3658                           
  3659                           ;modules.c: 84: I2C_Master_Write(0b11010001);
  3660  0019B4  0E00               	movlw	0
  3661  0019B6  0100               	movlb	0	; () banked
  3662  0019B8  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  3663  0019BA  0ED1               	movlw	209
  3664  0019BC  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  3665  0019BE  EC78  F011         	call	_I2C_Master_Write	;wreg free
  3666                           
  3667                           ;modules.c: 85: for (unsigned char i = 0; i < 0x06; i++) {
  3668  0019C2  0E00               	movlw	0
  3669  0019C4  0100               	movlb	0	; () banked
  3670  0019C6  6F85               	movwf	getTime@i& (0+255),b
  3671  0019C8                     l4024:
  3672                           
  3673                           ; BSR set to: 0
  3674  0019C8  0E05               	movlw	5
  3675  0019CA  0100               	movlb	0	; () banked
  3676  0019CC  6585               	cpfsgt	getTime@i& (0+255),b
  3677  0019CE  D001               	goto	l4028
  3678  0019D0  D012               	goto	l4034
  3679  0019D2                     l4028:
  3680                           
  3681                           ; BSR set to: 0
  3682                           ;modules.c: 86: time[i] = I2C_Master_Read(1);
  3683  0019D2  0100               	movlb	0	; () banked
  3684  0019D4  5185               	movf	getTime@i& (0+255),w,b
  3685  0019D6  0D01               	mullw	1
  3686  0019D8  50F3               	movf	prodl,w,c
  3687  0019DA  0100               	movlb	0	; () banked
  3688  0019DC  2583               	addwf	getTime@time& (0+255),w,b
  3689  0019DE  6ED9               	movwf	fsr2l,c
  3690  0019E0  50F4               	movf	prodh,w,c
  3691  0019E2  0100               	movlb	0	; () banked
  3692  0019E4  2184               	addwfc	(getTime@time+1)& (0+255),w,b
  3693  0019E6  6EDA               	movwf	fsr2h,c
  3694  0019E8  0E01               	movlw	1
  3695  0019EA  EC4F  F010         	call	_I2C_Master_Read
  3696  0019EE  6EDF               	movwf	indf2,c
  3697  0019F0  0100               	movlb	0	; () banked
  3698  0019F2  2B85               	incf	getTime@i& (0+255),f,b
  3699  0019F4  D7E9               	goto	l4024
  3700  0019F6                     l4034:
  3701                           
  3702                           ; BSR set to: 0
  3703                           ;modules.c: 87: }
  3704                           ;modules.c: 88: time[6] = I2C_Master_Read(0);
  3705  0019F6  0100               	movlb	0	; () banked
  3706  0019F8  EE20 F006          	lfsr	2,6
  3707  0019FC  5183               	movf	getTime@time& (0+255),w,b
  3708  0019FE  26D9               	addwf	fsr2l,f,c
  3709  001A00  5184               	movf	(getTime@time+1)& (0+255),w,b
  3710  001A02  22DA               	addwfc	fsr2h,f,c
  3711  001A04  0E00               	movlw	0
  3712  001A06  EC4F  F010         	call	_I2C_Master_Read
  3713  001A0A  6EDF               	movwf	indf2,c
  3714                           
  3715                           ;modules.c: 89: I2C_Master_Stop();
  3716  001A0C  EC82  F011         	call	_I2C_Master_Stop	;wreg free
  3717                           
  3718                           ;modules.c: 90: (INTCONbits.GIE = 1);
  3719  001A10  8EF2               	bsf	intcon,7,c	;volatile
  3720  001A12  0012               	return		;funcret
  3721  001A14                     __end_of_getTime:
  3722                           	opt stack 0
  3723                           tblptru	equ	0xFF8
  3724                           tblptrh	equ	0xFF7
  3725                           tblptrl	equ	0xFF6
  3726                           tablat	equ	0xFF5
  3727                           prodh	equ	0xFF4
  3728                           prodl	equ	0xFF3
  3729                           intcon	equ	0xFF2
  3730                           intcon3	equ	0xFF0
  3731                           postinc0	equ	0xFEE
  3732                           wreg	equ	0xFE8
  3733                           indf2	equ	0xFDF
  3734                           postinc2	equ	0xFDE
  3735                           postdec2	equ	0xFDD
  3736                           fsr2h	equ	0xFDA
  3737                           fsr2l	equ	0xFD9
  3738                           status	equ	0xFD8
  3739                           
  3740 ;; *************** function _I2C_Master_Write *****************
  3741 ;; Defined at:
  3742 ;;		line 42 in file "I2C.c"
  3743 ;; Parameters:    Size  Location     Type
  3744 ;;  d               2    1[BANK0 ] unsigned int 
  3745 ;; Auto vars:     Size  Location     Type
  3746 ;;		None
  3747 ;; Return value:  Size  Location     Type
  3748 ;;                  1    wreg      void 
  3749 ;; Registers used:
  3750 ;;		wreg, status,2, status,0, cstack
  3751 ;; Tracked objects:
  3752 ;;		On entry : 0/0
  3753 ;;		On exit  : 0/0
  3754 ;;		Unchanged: 0/0
  3755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3756 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3759 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3760 ;;Total ram usage:        2 bytes
  3761 ;; Hardware stack levels used:    1
  3762 ;; Hardware stack levels required when called:    8
  3763 ;; This function calls:
  3764 ;;		_I2C_Master_Wait
  3765 ;; This function is called by:
  3766 ;;		_getTime
  3767 ;; This function uses a non-reentrant model
  3768 ;;
  3769                           
  3770                           	psect	text9
  3771  0022F0                     __ptext9:
  3772                           	opt stack 0
  3773  0022F0                     _I2C_Master_Write:
  3774                           	opt stack 20
  3775                           
  3776                           ;I2C.c: 43: I2C_Master_Wait();
  3777                           
  3778                           ;incstack = 0
  3779  0022F0  EC49  F011         	call	_I2C_Master_Wait	;wreg free
  3780                           
  3781                           ;I2C.c: 44: SSPBUF = d;
  3782  0022F4  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  3783  0022F8  0012               	return		;funcret
  3784  0022FA                     __end_of_I2C_Master_Write:
  3785                           	opt stack 0
  3786                           tblptru	equ	0xFF8
  3787                           tblptrh	equ	0xFF7
  3788                           tblptrl	equ	0xFF6
  3789                           tablat	equ	0xFF5
  3790                           prodh	equ	0xFF4
  3791                           prodl	equ	0xFF3
  3792                           intcon	equ	0xFF2
  3793                           intcon3	equ	0xFF0
  3794                           postinc0	equ	0xFEE
  3795                           wreg	equ	0xFE8
  3796                           indf2	equ	0xFDF
  3797                           postinc2	equ	0xFDE
  3798                           postdec2	equ	0xFDD
  3799                           fsr2h	equ	0xFDA
  3800                           fsr2l	equ	0xFD9
  3801                           status	equ	0xFD8
  3802                           
  3803 ;; *************** function _I2C_Master_Stop *****************
  3804 ;; Defined at:
  3805 ;;		line 37 in file "I2C.c"
  3806 ;; Parameters:    Size  Location     Type
  3807 ;;		None
  3808 ;; Auto vars:     Size  Location     Type
  3809 ;;		None
  3810 ;; Return value:  Size  Location     Type
  3811 ;;                  1    wreg      void 
  3812 ;; Registers used:
  3813 ;;		wreg, status,2, status,0, cstack
  3814 ;; Tracked objects:
  3815 ;;		On entry : 0/0
  3816 ;;		On exit  : 0/0
  3817 ;;		Unchanged: 0/0
  3818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3822 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3823 ;;Total ram usage:        0 bytes
  3824 ;; Hardware stack levels used:    1
  3825 ;; Hardware stack levels required when called:    8
  3826 ;; This function calls:
  3827 ;;		_I2C_Master_Wait
  3828 ;; This function is called by:
  3829 ;;		_getTime
  3830 ;; This function uses a non-reentrant model
  3831 ;;
  3832                           
  3833                           	psect	text10
  3834  002304                     __ptext10:
  3835                           	opt stack 0
  3836  002304                     _I2C_Master_Stop:
  3837                           	opt stack 20
  3838                           
  3839                           ;I2C.c: 38: I2C_Master_Wait();
  3840                           
  3841                           ;incstack = 0
  3842  002304  EC49  F011         	call	_I2C_Master_Wait	;wreg free
  3843                           
  3844                           ;I2C.c: 39: PEN = 1;
  3845  002308  84C5               	bsf	4037,2,c	;volatile
  3846  00230A  0012               	return		;funcret
  3847  00230C                     __end_of_I2C_Master_Stop:
  3848                           	opt stack 0
  3849                           tblptru	equ	0xFF8
  3850                           tblptrh	equ	0xFF7
  3851                           tblptrl	equ	0xFF6
  3852                           tablat	equ	0xFF5
  3853                           prodh	equ	0xFF4
  3854                           prodl	equ	0xFF3
  3855                           intcon	equ	0xFF2
  3856                           intcon3	equ	0xFF0
  3857                           postinc0	equ	0xFEE
  3858                           wreg	equ	0xFE8
  3859                           indf2	equ	0xFDF
  3860                           postinc2	equ	0xFDE
  3861                           postdec2	equ	0xFDD
  3862                           fsr2h	equ	0xFDA
  3863                           fsr2l	equ	0xFD9
  3864                           status	equ	0xFD8
  3865                           
  3866 ;; *************** function _I2C_Master_Start *****************
  3867 ;; Defined at:
  3868 ;;		line 27 in file "I2C.c"
  3869 ;; Parameters:    Size  Location     Type
  3870 ;;		None
  3871 ;; Auto vars:     Size  Location     Type
  3872 ;;		None
  3873 ;; Return value:  Size  Location     Type
  3874 ;;                  1    wreg      void 
  3875 ;; Registers used:
  3876 ;;		wreg, status,2, status,0, cstack
  3877 ;; Tracked objects:
  3878 ;;		On entry : 0/0
  3879 ;;		On exit  : 0/0
  3880 ;;		Unchanged: 0/0
  3881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3885 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3886 ;;Total ram usage:        0 bytes
  3887 ;; Hardware stack levels used:    1
  3888 ;; Hardware stack levels required when called:    8
  3889 ;; This function calls:
  3890 ;;		_I2C_Master_Wait
  3891 ;; This function is called by:
  3892 ;;		_getTime
  3893 ;; This function uses a non-reentrant model
  3894 ;;
  3895                           
  3896                           	psect	text11
  3897  00230C                     __ptext11:
  3898                           	opt stack 0
  3899  00230C                     _I2C_Master_Start:
  3900                           	opt stack 20
  3901                           
  3902                           ;I2C.c: 28: I2C_Master_Wait();
  3903                           
  3904                           ;incstack = 0
  3905  00230C  EC49  F011         	call	_I2C_Master_Wait	;wreg free
  3906                           
  3907                           ;I2C.c: 29: SEN = 1;
  3908  002310  80C5               	bsf	4037,0,c	;volatile
  3909  002312  0012               	return		;funcret
  3910  002314                     __end_of_I2C_Master_Start:
  3911                           	opt stack 0
  3912                           tblptru	equ	0xFF8
  3913                           tblptrh	equ	0xFF7
  3914                           tblptrl	equ	0xFF6
  3915                           tablat	equ	0xFF5
  3916                           prodh	equ	0xFF4
  3917                           prodl	equ	0xFF3
  3918                           intcon	equ	0xFF2
  3919                           intcon3	equ	0xFF0
  3920                           postinc0	equ	0xFEE
  3921                           wreg	equ	0xFE8
  3922                           indf2	equ	0xFDF
  3923                           postinc2	equ	0xFDE
  3924                           postdec2	equ	0xFDD
  3925                           fsr2h	equ	0xFDA
  3926                           fsr2l	equ	0xFD9
  3927                           status	equ	0xFD8
  3928                           
  3929 ;; *************** function _I2C_Master_Read *****************
  3930 ;; Defined at:
  3931 ;;		line 47 in file "I2C.c"
  3932 ;; Parameters:    Size  Location     Type
  3933 ;;  a               1    wreg     unsigned char 
  3934 ;; Auto vars:     Size  Location     Type
  3935 ;;  a               1    1[BANK0 ] unsigned char 
  3936 ;;  temp            1    2[BANK0 ] unsigned char 
  3937 ;; Return value:  Size  Location     Type
  3938 ;;                  1    wreg      unsigned char 
  3939 ;; Registers used:
  3940 ;;		wreg, status,2, status,0, cstack
  3941 ;; Tracked objects:
  3942 ;;		On entry : 0/0
  3943 ;;		On exit  : 0/0
  3944 ;;		Unchanged: 0/0
  3945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3947 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3949 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3950 ;;Total ram usage:        2 bytes
  3951 ;; Hardware stack levels used:    1
  3952 ;; Hardware stack levels required when called:    8
  3953 ;; This function calls:
  3954 ;;		_I2C_Master_Wait
  3955 ;; This function is called by:
  3956 ;;		_getTime
  3957 ;; This function uses a non-reentrant model
  3958 ;;
  3959                           
  3960                           	psect	text12
  3961  00209E                     __ptext12:
  3962                           	opt stack 0
  3963  00209E                     _I2C_Master_Read:
  3964                           	opt stack 20
  3965                           
  3966                           ;incstack = 0
  3967                           ;I2C_Master_Read@a stored from wreg
  3968  00209E  0100               	movlb	0	; () banked
  3969  0020A0  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  3970                           
  3971                           ;I2C.c: 48: unsigned char temp;
  3972                           ;I2C.c: 49: I2C_Master_Wait();
  3973  0020A2  EC49  F011         	call	_I2C_Master_Wait	;wreg free
  3974                           
  3975                           ;I2C.c: 50: RCEN = 1;
  3976  0020A6  86C5               	bsf	4037,3,c	;volatile
  3977                           
  3978                           ;I2C.c: 51: I2C_Master_Wait();
  3979  0020A8  EC49  F011         	call	_I2C_Master_Wait	;wreg free
  3980                           
  3981                           ;I2C.c: 52: temp = SSPBUF;
  3982  0020AC  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  3983                           
  3984                           ;I2C.c: 53: I2C_Master_Wait();
  3985  0020B0  EC49  F011         	call	_I2C_Master_Wait	;wreg free
  3986                           
  3987                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
  3988  0020B4  0100               	movlb	0	; () banked
  3989  0020B6  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  3990  0020B8  0100               	movlb	0	; () banked
  3991  0020BA  A4D8               	btfss	status,2,c
  3992  0020BC  D002               	goto	u2300
  3993  0020BE  8AC5               	bsf	4037,5,c	;volatile
  3994  0020C0  D001               	goto	l3412
  3995  0020C2                     u2300:
  3996  0020C2  9AC5               	bcf	4037,5,c	;volatile
  3997  0020C4                     l3412:
  3998                           
  3999                           ;I2C.c: 55: ACKEN = 1;
  4000  0020C4  88C5               	bsf	4037,4,c	;volatile
  4001                           
  4002                           ;I2C.c: 56: return temp;
  4003  0020C6  0100               	movlb	0	; () banked
  4004  0020C8  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  4005  0020CA  0012               	return	
  4006  0020CC                     __end_of_I2C_Master_Read:
  4007                           	opt stack 0
  4008                           tblptru	equ	0xFF8
  4009                           tblptrh	equ	0xFF7
  4010                           tblptrl	equ	0xFF6
  4011                           tablat	equ	0xFF5
  4012                           prodh	equ	0xFF4
  4013                           prodl	equ	0xFF3
  4014                           intcon	equ	0xFF2
  4015                           intcon3	equ	0xFF0
  4016                           postinc0	equ	0xFEE
  4017                           wreg	equ	0xFE8
  4018                           indf2	equ	0xFDF
  4019                           postinc2	equ	0xFDE
  4020                           postdec2	equ	0xFDD
  4021                           fsr2h	equ	0xFDA
  4022                           fsr2l	equ	0xFD9
  4023                           status	equ	0xFD8
  4024                           
  4025 ;; *************** function _I2C_Master_Wait *****************
  4026 ;; Defined at:
  4027 ;;		line 23 in file "I2C.c"
  4028 ;; Parameters:    Size  Location     Type
  4029 ;;		None
  4030 ;; Auto vars:     Size  Location     Type
  4031 ;;		None
  4032 ;; Return value:  Size  Location     Type
  4033 ;;                  1    wreg      void 
  4034 ;; Registers used:
  4035 ;;		wreg, status,2, status,0
  4036 ;; Tracked objects:
  4037 ;;		On entry : 0/0
  4038 ;;		On exit  : 0/0
  4039 ;;		Unchanged: 0/0
  4040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4043 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4044 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4045 ;;Total ram usage:        1 bytes
  4046 ;; Hardware stack levels used:    1
  4047 ;; Hardware stack levels required when called:    7
  4048 ;; This function calls:
  4049 ;;		Nothing
  4050 ;; This function is called by:
  4051 ;;		_I2C_Master_Start
  4052 ;;		_I2C_Master_Stop
  4053 ;;		_I2C_Master_Write
  4054 ;;		_I2C_Master_Read
  4055 ;; This function uses a non-reentrant model
  4056 ;;
  4057                           
  4058                           	psect	text13
  4059  002292                     __ptext13:
  4060                           	opt stack 0
  4061  002292                     _I2C_Master_Wait:
  4062                           	opt stack 20
  4063  002292                     l363:
  4064  002292  B4C7               	btfsc	4039,2,c	;volatile
  4065  002294  D7FE               	goto	l363
  4066  002296  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  4067  00229A  0E1F               	movlw	31
  4068  00229C  0100               	movlb	0	; () banked
  4069  00229E  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  4070  0022A0  B4D8               	btfsc	status,2,c
  4071  0022A2  0012               	return	
  4072  0022A4  D7F6               	goto	l363
  4073  0022A6                     __end_of_I2C_Master_Wait:
  4074                           	opt stack 0
  4075                           tblptru	equ	0xFF8
  4076                           tblptrh	equ	0xFF7
  4077                           tblptrl	equ	0xFF6
  4078                           tablat	equ	0xFF5
  4079                           prodh	equ	0xFF4
  4080                           prodl	equ	0xFF3
  4081                           intcon	equ	0xFF2
  4082                           intcon3	equ	0xFF0
  4083                           postinc0	equ	0xFEE
  4084                           wreg	equ	0xFE8
  4085                           indf2	equ	0xFDF
  4086                           postinc2	equ	0xFDE
  4087                           postdec2	equ	0xFDD
  4088                           fsr2h	equ	0xFDA
  4089                           fsr2l	equ	0xFD9
  4090                           status	equ	0xFD8
  4091                           
  4092 ;; *************** function ___lcd_newline *****************
  4093 ;; Defined at:
  4094 ;;		line 53 in file "lcd.c"
  4095 ;; Parameters:    Size  Location     Type
  4096 ;;		None
  4097 ;; Auto vars:     Size  Location     Type
  4098 ;;		None
  4099 ;; Return value:  Size  Location     Type
  4100 ;;                  1    wreg      void 
  4101 ;; Registers used:
  4102 ;;		wreg, status,2, status,0, cstack
  4103 ;; Tracked objects:
  4104 ;;		On entry : 0/0
  4105 ;;		On exit  : 0/0
  4106 ;;		Unchanged: 0/0
  4107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4112 ;;Total ram usage:        0 bytes
  4113 ;; Hardware stack levels used:    1
  4114 ;; Hardware stack levels required when called:    9
  4115 ;; This function calls:
  4116 ;;		_lcdInst
  4117 ;; This function is called by:
  4118 ;;		_showRTC
  4119 ;;		_mainloop
  4120 ;; This function uses a non-reentrant model
  4121 ;;
  4122                           
  4123                           	psect	text14
  4124  002314                     __ptext14:
  4125                           	opt stack 0
  4126  002314                     ___lcd_newline:
  4127                           	opt stack 20
  4128                           
  4129                           ;lcd.c: 54: lcdInst(0b11000000);
  4130                           
  4131                           ; BSR set to: 0
  4132                           ;incstack = 0
  4133  002314  0EC0               	movlw	192
  4134  002316  EC64  F011         	call	_lcdInst
  4135  00231A  0012               	return		;funcret
  4136  00231C                     __end_of___lcd_newline:
  4137                           	opt stack 0
  4138                           tblptru	equ	0xFF8
  4139                           tblptrh	equ	0xFF7
  4140                           tblptrl	equ	0xFF6
  4141                           tablat	equ	0xFF5
  4142                           prodh	equ	0xFF4
  4143                           prodl	equ	0xFF3
  4144                           intcon	equ	0xFF2
  4145                           intcon3	equ	0xFF0
  4146                           postinc0	equ	0xFEE
  4147                           wreg	equ	0xFE8
  4148                           indf2	equ	0xFDF
  4149                           postinc2	equ	0xFDE
  4150                           postdec2	equ	0xFDD
  4151                           fsr2h	equ	0xFDA
  4152                           fsr2l	equ	0xFD9
  4153                           status	equ	0xFD8
  4154                           
  4155 ;; *************** function _initialize *****************
  4156 ;; Defined at:
  4157 ;;		line 18 in file "main.c"
  4158 ;; Parameters:    Size  Location     Type
  4159 ;;		None
  4160 ;; Auto vars:     Size  Location     Type
  4161 ;;		None
  4162 ;; Return value:  Size  Location     Type
  4163 ;;                  1    wreg      void 
  4164 ;; Registers used:
  4165 ;;		wreg, status,2, status,0, cstack
  4166 ;; Tracked objects:
  4167 ;;		On entry : 0/0
  4168 ;;		On exit  : 0/0
  4169 ;;		Unchanged: 0/0
  4170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4173 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4174 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4175 ;;Total ram usage:        2 bytes
  4176 ;; Hardware stack levels used:    1
  4177 ;; Hardware stack levels required when called:   10
  4178 ;; This function calls:
  4179 ;;		_I2C_Master_Init
  4180 ;;		_initLCD
  4181 ;;		_initLatest
  4182 ;;		_lcdInst
  4183 ;; This function is called by:
  4184 ;;		_main
  4185 ;; This function uses a non-reentrant model
  4186 ;;
  4187                           
  4188                           	psect	text15
  4189  001C12                     __ptext15:
  4190                           	opt stack 0
  4191  001C12                     _initialize:
  4192                           	opt stack 20
  4193                           
  4194                           ;main.c: 19: TRISA = 0xFF;
  4195                           
  4196                           ;incstack = 0
  4197  001C12  6892               	setf	3986,c	;volatile
  4198                           
  4199                           ;main.c: 20: TRISB = 0xFF;
  4200  001C14  6893               	setf	3987,c	;volatile
  4201                           
  4202                           ;main.c: 21: TRISC = 0x00;
  4203  001C16  0E00               	movlw	0
  4204  001C18  6E94               	movwf	3988,c	;volatile
  4205                           
  4206                           ;main.c: 22: TRISD = 0x00;
  4207  001C1A  0E00               	movlw	0
  4208  001C1C  6E95               	movwf	3989,c	;volatile
  4209                           
  4210                           ;main.c: 23: TRISE = 0x00;
  4211  001C1E  0E00               	movlw	0
  4212  001C20  6E96               	movwf	3990,c	;volatile
  4213                           
  4214                           ;main.c: 25: LATA = 0x00;
  4215  001C22  0E00               	movlw	0
  4216  001C24  6E89               	movwf	3977,c	;volatile
  4217                           
  4218                           ;main.c: 26: LATB = 0x00;
  4219  001C26  0E00               	movlw	0
  4220  001C28  6E8A               	movwf	3978,c	;volatile
  4221                           
  4222                           ;main.c: 27: LATC = 0x00;
  4223  001C2A  0E00               	movlw	0
  4224  001C2C  6E8B               	movwf	3979,c	;volatile
  4225                           
  4226                           ;main.c: 28: LATD = 0x00;
  4227  001C2E  0E00               	movlw	0
  4228  001C30  6E8C               	movwf	3980,c	;volatile
  4229                           
  4230                           ;main.c: 29: LATE = 0x00;
  4231  001C32  0E00               	movlw	0
  4232  001C34  6E8D               	movwf	3981,c	;volatile
  4233                           
  4234                           ;main.c: 32: ADCON0 = 0x00;
  4235  001C36  0E00               	movlw	0
  4236  001C38  6EC2               	movwf	4034,c	;volatile
  4237                           
  4238                           ;main.c: 33: ADCON1 = 0x0C;
  4239  001C3A  0E0C               	movlw	12
  4240  001C3C  6EC1               	movwf	4033,c	;volatile
  4241                           
  4242                           ;main.c: 34: CVRCON = 0x00;
  4243  001C3E  0E00               	movlw	0
  4244  001C40  6EB5               	movwf	4021,c	;volatile
  4245                           
  4246                           ;main.c: 35: ADFM = 1;
  4247  001C42  8EC0               	bsf	4032,7,c	;volatile
  4248                           
  4249                           ;main.c: 37: initLCD();
  4250  001C44  EC95  F00F         	call	_initLCD	;wreg free
  4251                           
  4252                           ;main.c: 38: lcdInst(0x01);;
  4253  001C48  0E01               	movlw	1
  4254  001C4A  EC64  F011         	call	_lcdInst
  4255                           
  4256                           ;main.c: 39: lcdInst(0b10000000);;
  4257  001C4E  0E80               	movlw	128
  4258  001C50  EC64  F011         	call	_lcdInst
  4259                           
  4260                           ;main.c: 40: I2C_Master_Init(10000);
  4261  001C54  0E10               	movlw	16
  4262  001C56  0100               	movlb	0	; () banked
  4263  001C58  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  4264  001C5A  0E27               	movlw	39
  4265  001C5C  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  4266  001C5E  0E00               	movlw	0
  4267  001C60  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  4268  001C62  0E00               	movlw	0
  4269  001C64  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  4270  001C66  ECE5  F00E         	call	_I2C_Master_Init	;wreg free
  4271                           
  4272                           ;main.c: 41: initLatest();
  4273  001C6A  ECF5  F010         	call	_initLatest	;wreg free
  4274                           
  4275                           ;main.c: 42: _delay((unsigned long)((200)*(8000000/4000.0)));
  4276  001C6E  0E03               	movlw	3
  4277  001C70  0100               	movlb	0	; () banked
  4278  001C72  6F96               	movwf	(??_initialize+1)& (0+255),b
  4279  001C74  0E08               	movlw	8
  4280  001C76  0100               	movlb	0	; () banked
  4281  001C78  6F95               	movwf	??_initialize& (0+255),b
  4282  001C7A  0E77               	movlw	119
  4283  001C7C                     u3237:
  4284  001C7C  2EE8               	decfsz	wreg,f,c
  4285  001C7E  D7FE               	bra	u3237
  4286  001C80  2F95               	decfsz	??_initialize& (0+255),f,b
  4287  001C82  D7FC               	bra	u3237
  4288  001C84  2F96               	decfsz	(??_initialize+1)& (0+255),f,b
  4289  001C86  D7FA               	bra	u3237
  4290  001C88  0012               	return		;funcret
  4291  001C8A                     __end_of_initialize:
  4292                           	opt stack 0
  4293                           tblptru	equ	0xFF8
  4294                           tblptrh	equ	0xFF7
  4295                           tblptrl	equ	0xFF6
  4296                           tablat	equ	0xFF5
  4297                           prodh	equ	0xFF4
  4298                           prodl	equ	0xFF3
  4299                           intcon	equ	0xFF2
  4300                           intcon3	equ	0xFF0
  4301                           postinc0	equ	0xFEE
  4302                           wreg	equ	0xFE8
  4303                           indf2	equ	0xFDF
  4304                           postinc2	equ	0xFDE
  4305                           postdec2	equ	0xFDD
  4306                           fsr2h	equ	0xFDA
  4307                           fsr2l	equ	0xFD9
  4308                           status	equ	0xFD8
  4309                           
  4310 ;; *************** function _initLatest *****************
  4311 ;; Defined at:
  4312 ;;		line 9 in file "eeprom.c"
  4313 ;; Parameters:    Size  Location     Type
  4314 ;;		None
  4315 ;; Auto vars:     Size  Location     Type
  4316 ;;		None
  4317 ;; Return value:  Size  Location     Type
  4318 ;;                  1    wreg      void 
  4319 ;; Registers used:
  4320 ;;		wreg, status,2, status,0, cstack
  4321 ;; Tracked objects:
  4322 ;;		On entry : 0/0
  4323 ;;		On exit  : 0/0
  4324 ;;		Unchanged: 0/0
  4325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4329 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4330 ;;Total ram usage:        0 bytes
  4331 ;; Hardware stack levels used:    1
  4332 ;; Hardware stack levels required when called:    8
  4333 ;; This function calls:
  4334 ;;		_ReadEE
  4335 ;; This function is called by:
  4336 ;;		_initialize
  4337 ;; This function uses a non-reentrant model
  4338 ;;
  4339                           
  4340                           	psect	text16
  4341  0021EA                     __ptext16:
  4342                           	opt stack 0
  4343  0021EA                     _initLatest:
  4344                           	opt stack 21
  4345                           
  4346                           ;eeprom.c: 10: Latest = ReadEE(160);
  4347                           
  4348                           ;incstack = 0
  4349  0021EA  0E00               	movlw	0
  4350  0021EC  0100               	movlb	0	; () banked
  4351  0021EE  6F81               	movwf	(ReadEE@address+1)& (0+255),b
  4352  0021F0  0EA0               	movlw	160
  4353  0021F2  6F80               	movwf	ReadEE@address& (0+255),b
  4354  0021F4  EC32  F011         	call	_ReadEE	;wreg free
  4355  0021F8  0100               	movlb	0	; () banked
  4356  0021FA  6FCB               	movwf	_Latest& (0+255),b
  4357                           
  4358                           ; BSR set to: 0
  4359                           ;eeprom.c: 11: if (Latest > 3) {
  4360  0021FC  0E03               	movlw	3
  4361  0021FE  0100               	movlb	0	; () banked
  4362  002200  65CB               	cpfsgt	_Latest& (0+255),b
  4363  002202  0012               	return	
  4364                           
  4365                           ; BSR set to: 0
  4366                           ;eeprom.c: 12: Latest = 0;
  4367  002204  0E00               	movlw	0
  4368  002206  0100               	movlb	0	; () banked
  4369  002208  6FCB               	movwf	_Latest& (0+255),b
  4370  00220A  0012               	return	
  4371  00220C                     __end_of_initLatest:
  4372                           	opt stack 0
  4373                           tblptru	equ	0xFF8
  4374                           tblptrh	equ	0xFF7
  4375                           tblptrl	equ	0xFF6
  4376                           tablat	equ	0xFF5
  4377                           prodh	equ	0xFF4
  4378                           prodl	equ	0xFF3
  4379                           intcon	equ	0xFF2
  4380                           intcon3	equ	0xFF0
  4381                           postinc0	equ	0xFEE
  4382                           wreg	equ	0xFE8
  4383                           indf2	equ	0xFDF
  4384                           postinc2	equ	0xFDE
  4385                           postdec2	equ	0xFDD
  4386                           fsr2h	equ	0xFDA
  4387                           fsr2l	equ	0xFD9
  4388                           status	equ	0xFD8
  4389                           
  4390 ;; *************** function _ReadEE *****************
  4391 ;; Defined at:
  4392 ;;		line 16 in file "eeprom.c"
  4393 ;; Parameters:    Size  Location     Type
  4394 ;;  address         2    0[BANK0 ] unsigned int 
  4395 ;; Auto vars:     Size  Location     Type
  4396 ;;		None
  4397 ;; Return value:  Size  Location     Type
  4398 ;;                  1    wreg      unsigned char 
  4399 ;; Registers used:
  4400 ;;		wreg, status,2
  4401 ;; Tracked objects:
  4402 ;;		On entry : 0/0
  4403 ;;		On exit  : 0/0
  4404 ;;		Unchanged: 0/0
  4405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4406 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4409 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4410 ;;Total ram usage:        2 bytes
  4411 ;; Hardware stack levels used:    1
  4412 ;; Hardware stack levels required when called:    7
  4413 ;; This function calls:
  4414 ;;		Nothing
  4415 ;; This function is called by:
  4416 ;;		_initLatest
  4417 ;; This function uses a non-reentrant model
  4418 ;;
  4419                           
  4420                           	psect	text17
  4421  002264                     __ptext17:
  4422                           	opt stack 0
  4423  002264                     _ReadEE:
  4424                           	opt stack 21
  4425                           
  4426                           ;eeprom.c: 19: EEADRH = (unsigned char) (address >> 8);
  4427                           
  4428                           ; BSR set to: 0
  4429                           ;incstack = 0
  4430  002264  0100               	movlb	0	; () banked
  4431  002266  5181               	movf	(ReadEE@address+1)& (0+255),w,b
  4432  002268  6EAA               	movwf	4010,c	;volatile
  4433                           
  4434                           ; BSR set to: 0
  4435                           ;eeprom.c: 20: EEADR = (unsigned char) address;
  4436  00226A  C080  FFA9         	movff	ReadEE@address,4009	;volatile
  4437                           
  4438                           ; BSR set to: 0
  4439                           ;eeprom.c: 22: EECON1bits.EEPGD = 0;
  4440  00226E  9EA6               	bcf	4006,7,c	;volatile
  4441                           
  4442                           ; BSR set to: 0
  4443                           ;eeprom.c: 23: EECON1bits.CFGS = 0;
  4444  002270  9CA6               	bcf	4006,6,c	;volatile
  4445                           
  4446                           ; BSR set to: 0
  4447                           ;eeprom.c: 24: EECON1bits.RD = 1;
  4448  002272  80A6               	bsf	4006,0,c	;volatile
  4449  002274                     l411:
  4450  002274  B0A6               	btfsc	4006,0,c	;volatile
  4451  002276  D7FE               	goto	l411
  4452                           
  4453                           ;eeprom.c: 30: return EEDATA;
  4454  002278  50A8               	movf	4008,w,c	;volatile
  4455  00227A  0012               	return	
  4456  00227C                     __end_of_ReadEE:
  4457                           	opt stack 0
  4458                           tblptru	equ	0xFF8
  4459                           tblptrh	equ	0xFF7
  4460                           tblptrl	equ	0xFF6
  4461                           tablat	equ	0xFF5
  4462                           prodh	equ	0xFF4
  4463                           prodl	equ	0xFF3
  4464                           intcon	equ	0xFF2
  4465                           intcon3	equ	0xFF0
  4466                           postinc0	equ	0xFEE
  4467                           wreg	equ	0xFE8
  4468                           indf2	equ	0xFDF
  4469                           postinc2	equ	0xFDE
  4470                           postdec2	equ	0xFDD
  4471                           fsr2h	equ	0xFDA
  4472                           fsr2l	equ	0xFD9
  4473                           status	equ	0xFD8
  4474                           
  4475 ;; *************** function _initLCD *****************
  4476 ;; Defined at:
  4477 ;;		line 9 in file "lcd.c"
  4478 ;; Parameters:    Size  Location     Type
  4479 ;;		None
  4480 ;; Auto vars:     Size  Location     Type
  4481 ;;		None
  4482 ;; Return value:  Size  Location     Type
  4483 ;;                  1    wreg      void 
  4484 ;; Registers used:
  4485 ;;		wreg, status,2, status,0, cstack
  4486 ;; Tracked objects:
  4487 ;;		On entry : 0/0
  4488 ;;		On exit  : 0/0
  4489 ;;		Unchanged: 0/0
  4490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4493 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4494 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4495 ;;Total ram usage:        1 bytes
  4496 ;; Hardware stack levels used:    1
  4497 ;; Hardware stack levels required when called:    9
  4498 ;; This function calls:
  4499 ;;		_lcdInst
  4500 ;; This function is called by:
  4501 ;;		_initialize
  4502 ;; This function uses a non-reentrant model
  4503 ;;
  4504                           
  4505                           	psect	text18
  4506  001F2A                     __ptext18:
  4507                           	opt stack 0
  4508  001F2A                     _initLCD:
  4509                           	opt stack 20
  4510                           
  4511                           ;lcd.c: 10: _delay((unsigned long)((15)*(8000000/4000.0)));
  4512                           
  4513                           ;incstack = 0
  4514  001F2A  0E27               	movlw	39
  4515  001F2C  0100               	movlb	0	; () banked
  4516  001F2E  6F83               	movwf	??_initLCD& (0+255),b
  4517  001F30  0EF5               	movlw	245
  4518  001F32                     u3247:
  4519  001F32  2EE8               	decfsz	wreg,f,c
  4520  001F34  D7FE               	bra	u3247
  4521  001F36  2F83               	decfsz	??_initLCD& (0+255),f,b
  4522  001F38  D7FC               	bra	u3247
  4523                           
  4524                           ;lcd.c: 11: lcdInst(0b00110011);
  4525  001F3A  0E33               	movlw	51
  4526  001F3C  EC64  F011         	call	_lcdInst
  4527                           
  4528                           ;lcd.c: 12: lcdInst(0b00110010);
  4529  001F40  0E32               	movlw	50
  4530  001F42  EC64  F011         	call	_lcdInst
  4531                           
  4532                           ;lcd.c: 13: lcdInst(0b00101000);
  4533  001F46  0E28               	movlw	40
  4534  001F48  EC64  F011         	call	_lcdInst
  4535                           
  4536                           ;lcd.c: 14: lcdInst(0b00001111);
  4537  001F4C  0E0F               	movlw	15
  4538  001F4E  EC64  F011         	call	_lcdInst
  4539                           
  4540                           ;lcd.c: 15: lcdInst(0b00000110);
  4541  001F52  0E06               	movlw	6
  4542  001F54  EC64  F011         	call	_lcdInst
  4543                           
  4544                           ;lcd.c: 16: lcdInst(0b00000001);
  4545  001F58  0E01               	movlw	1
  4546  001F5A  EC64  F011         	call	_lcdInst
  4547                           
  4548                           ;lcd.c: 17: _delay((unsigned long)((15)*(8000000/4000.0)));
  4549  001F5E  0E27               	movlw	39
  4550  001F60  0100               	movlb	0	; () banked
  4551  001F62  6F83               	movwf	??_initLCD& (0+255),b
  4552  001F64  0EF5               	movlw	245
  4553  001F66                     u3257:
  4554  001F66  2EE8               	decfsz	wreg,f,c
  4555  001F68  D7FE               	bra	u3257
  4556  001F6A  2F83               	decfsz	??_initLCD& (0+255),f,b
  4557  001F6C  D7FC               	bra	u3257
  4558  001F6E  0012               	return		;funcret
  4559  001F70                     __end_of_initLCD:
  4560                           	opt stack 0
  4561                           tblptru	equ	0xFF8
  4562                           tblptrh	equ	0xFF7
  4563                           tblptrl	equ	0xFF6
  4564                           tablat	equ	0xFF5
  4565                           prodh	equ	0xFF4
  4566                           prodl	equ	0xFF3
  4567                           intcon	equ	0xFF2
  4568                           intcon3	equ	0xFF0
  4569                           postinc0	equ	0xFEE
  4570                           wreg	equ	0xFE8
  4571                           indf2	equ	0xFDF
  4572                           postinc2	equ	0xFDE
  4573                           postdec2	equ	0xFDD
  4574                           fsr2h	equ	0xFDA
  4575                           fsr2l	equ	0xFD9
  4576                           status	equ	0xFD8
  4577                           
  4578 ;; *************** function _lcdInst *****************
  4579 ;; Defined at:
  4580 ;;		line 20 in file "lcd.c"
  4581 ;; Parameters:    Size  Location     Type
  4582 ;;  data            1    wreg     unsigned char 
  4583 ;; Auto vars:     Size  Location     Type
  4584 ;;  data            1    2[BANK0 ] unsigned char 
  4585 ;; Return value:  Size  Location     Type
  4586 ;;                  1    wreg      void 
  4587 ;; Registers used:
  4588 ;;		wreg, status,2, status,0, cstack
  4589 ;; Tracked objects:
  4590 ;;		On entry : 0/0
  4591 ;;		On exit  : 0/0
  4592 ;;		Unchanged: 0/0
  4593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4595 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4597 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4598 ;;Total ram usage:        1 bytes
  4599 ;; Hardware stack levels used:    1
  4600 ;; Hardware stack levels required when called:    8
  4601 ;; This function calls:
  4602 ;;		_lcdNibble
  4603 ;; This function is called by:
  4604 ;;		_initialize
  4605 ;;		_showRTC
  4606 ;;		_initLCD
  4607 ;;		___lcd_newline
  4608 ;; This function uses a non-reentrant model
  4609 ;;
  4610                           
  4611                           	psect	text19
  4612  0022C8                     __ptext19:
  4613                           	opt stack 0
  4614  0022C8                     _lcdInst:
  4615                           	opt stack 21
  4616                           
  4617                           ;incstack = 0
  4618                           ;lcdInst@data stored from wreg
  4619  0022C8  0100               	movlb	0	; () banked
  4620  0022CA  6F82               	movwf	lcdInst@data& (0+255),b
  4621                           
  4622                           ;lcd.c: 21: LATDbits.LATD2 = 0;
  4623  0022CC  948C               	bcf	3980,2,c	;volatile
  4624                           
  4625                           ;lcd.c: 22: lcdNibble(data);
  4626  0022CE  0100               	movlb	0	; () banked
  4627  0022D0  5182               	movf	lcdInst@data& (0+255),w,b
  4628  0022D2  EC80  F00E         	call	_lcdNibble
  4629  0022D6  0012               	return		;funcret
  4630  0022D8                     __end_of_lcdInst:
  4631                           	opt stack 0
  4632                           tblptru	equ	0xFF8
  4633                           tblptrh	equ	0xFF7
  4634                           tblptrl	equ	0xFF6
  4635                           tablat	equ	0xFF5
  4636                           prodh	equ	0xFF4
  4637                           prodl	equ	0xFF3
  4638                           intcon	equ	0xFF2
  4639                           intcon3	equ	0xFF0
  4640                           postinc0	equ	0xFEE
  4641                           wreg	equ	0xFE8
  4642                           indf2	equ	0xFDF
  4643                           postinc2	equ	0xFDE
  4644                           postdec2	equ	0xFDD
  4645                           fsr2h	equ	0xFDA
  4646                           fsr2l	equ	0xFD9
  4647                           status	equ	0xFD8
  4648                           
  4649 ;; *************** function _lcdNibble *****************
  4650 ;; Defined at:
  4651 ;;		line 30 in file "lcd.c"
  4652 ;; Parameters:    Size  Location     Type
  4653 ;;  data            1    wreg     unsigned char 
  4654 ;; Auto vars:     Size  Location     Type
  4655 ;;  data            1    1[BANK0 ] unsigned char 
  4656 ;;  temp            1    0[BANK0 ] unsigned char 
  4657 ;; Return value:  Size  Location     Type
  4658 ;;                  1    wreg      void 
  4659 ;; Registers used:
  4660 ;;		wreg, status,2, status,0
  4661 ;; Tracked objects:
  4662 ;;		On entry : 0/0
  4663 ;;		On exit  : 0/0
  4664 ;;		Unchanged: 0/0
  4665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4667 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4669 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4670 ;;Total ram usage:        2 bytes
  4671 ;; Hardware stack levels used:    1
  4672 ;; Hardware stack levels required when called:    7
  4673 ;; This function calls:
  4674 ;;		Nothing
  4675 ;; This function is called by:
  4676 ;;		_lcdInst
  4677 ;;		_putch
  4678 ;; This function uses a non-reentrant model
  4679 ;;
  4680                           
  4681                           	psect	text20
  4682  001D00                     __ptext20:
  4683                           	opt stack 0
  4684  001D00                     _lcdNibble:
  4685                           	opt stack 20
  4686                           
  4687                           ;incstack = 0
  4688                           ;lcdNibble@data stored from wreg
  4689  001D00  0100               	movlb	0	; () banked
  4690  001D02  6F81               	movwf	lcdNibble@data& (0+255),b
  4691                           
  4692                           ;lcd.c: 32: char temp = data & 0xF0;
  4693  001D04  0100               	movlb	0	; () banked
  4694  001D06  5181               	movf	lcdNibble@data& (0+255),w,b
  4695  001D08  0BF0               	andlw	240
  4696  001D0A  0100               	movlb	0	; () banked
  4697  001D0C  6F80               	movwf	lcdNibble@temp& (0+255),b
  4698                           
  4699                           ;lcd.c: 33: LATD = LATD & 0x0F;
  4700  001D0E  508C               	movf	3980,w,c	;volatile
  4701  001D10  0B0F               	andlw	15
  4702  001D12  6E8C               	movwf	3980,c	;volatile
  4703                           
  4704                           ;lcd.c: 34: LATD = temp | LATD;
  4705  001D14  0100               	movlb	0	; () banked
  4706  001D16  5180               	movf	lcdNibble@temp& (0+255),w,b
  4707  001D18  108C               	iorwf	3980,w,c	;volatile
  4708  001D1A  6E8C               	movwf	3980,c	;volatile
  4709                           
  4710                           ; BSR set to: 0
  4711                           ;lcd.c: 36: LATDbits.LATD3 = 0;
  4712  001D1C  968C               	bcf	3980,3,c	;volatile
  4713                           
  4714                           ; BSR set to: 0
  4715                           ;lcd.c: 37: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4716  001D1E  0E10               	movlw	16
  4717  001D20                     u3267:
  4718  001D20  2EE8               	decfsz	wreg,f,c
  4719  001D22  D7FE               	bra	u3267
  4720  001D24  D000               	nop2	
  4721                           
  4722                           ;lcd.c: 38: LATDbits.LATD3 = 1;
  4723  001D26  868C               	bsf	3980,3,c	;volatile
  4724                           
  4725                           ;lcd.c: 39: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4726  001D28  0E10               	movlw	16
  4727  001D2A                     u3277:
  4728  001D2A  2EE8               	decfsz	wreg,f,c
  4729  001D2C  D7FE               	bra	u3277
  4730  001D2E  D000               	nop2	
  4731                           
  4732                           ;lcd.c: 41: data = data << 4;
  4733  001D30  0100               	movlb	0	; () banked
  4734  001D32  3981               	swapf	lcdNibble@data& (0+255),w,b
  4735  001D34  0BF0               	andlw	240
  4736  001D36  0100               	movlb	0	; () banked
  4737  001D38  6F81               	movwf	lcdNibble@data& (0+255),b
  4738                           
  4739                           ;lcd.c: 43: temp = data & 0xF0;
  4740  001D3A  0100               	movlb	0	; () banked
  4741  001D3C  5181               	movf	lcdNibble@data& (0+255),w,b
  4742  001D3E  0BF0               	andlw	240
  4743  001D40  0100               	movlb	0	; () banked
  4744  001D42  6F80               	movwf	lcdNibble@temp& (0+255),b
  4745                           
  4746                           ;lcd.c: 44: LATD = LATD & 0x0F;
  4747  001D44  508C               	movf	3980,w,c	;volatile
  4748  001D46  0B0F               	andlw	15
  4749  001D48  6E8C               	movwf	3980,c	;volatile
  4750                           
  4751                           ;lcd.c: 45: LATD = temp | LATD;
  4752  001D4A  0100               	movlb	0	; () banked
  4753  001D4C  5180               	movf	lcdNibble@temp& (0+255),w,b
  4754  001D4E  108C               	iorwf	3980,w,c	;volatile
  4755  001D50  6E8C               	movwf	3980,c	;volatile
  4756                           
  4757                           ; BSR set to: 0
  4758                           ;lcd.c: 47: LATDbits.LATD3 = 0;
  4759  001D52  968C               	bcf	3980,3,c	;volatile
  4760                           
  4761                           ; BSR set to: 0
  4762                           ;lcd.c: 48: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4763  001D54  0E10               	movlw	16
  4764  001D56                     u3287:
  4765  001D56  2EE8               	decfsz	wreg,f,c
  4766  001D58  D7FE               	bra	u3287
  4767  001D5A  D000               	nop2	
  4768                           
  4769                           ;lcd.c: 49: LATDbits.LATD3 = 1;
  4770  001D5C  868C               	bsf	3980,3,c	;volatile
  4771                           
  4772                           ;lcd.c: 50: _delay((unsigned long)((25)*(8000000/4000000.0)));
  4773  001D5E  0E10               	movlw	16
  4774  001D60                     u3297:
  4775  001D60  2EE8               	decfsz	wreg,f,c
  4776  001D62  D7FE               	bra	u3297
  4777  001D64  D000               	nop2	
  4778  001D66  0012               	return		;funcret
  4779  001D68                     __end_of_lcdNibble:
  4780                           	opt stack 0
  4781                           tblptru	equ	0xFF8
  4782                           tblptrh	equ	0xFF7
  4783                           tblptrl	equ	0xFF6
  4784                           tablat	equ	0xFF5
  4785                           prodh	equ	0xFF4
  4786                           prodl	equ	0xFF3
  4787                           intcon	equ	0xFF2
  4788                           intcon3	equ	0xFF0
  4789                           postinc0	equ	0xFEE
  4790                           wreg	equ	0xFE8
  4791                           indf2	equ	0xFDF
  4792                           postinc2	equ	0xFDE
  4793                           postdec2	equ	0xFDD
  4794                           fsr2h	equ	0xFDA
  4795                           fsr2l	equ	0xFD9
  4796                           status	equ	0xFD8
  4797                           
  4798 ;; *************** function _I2C_Master_Init *****************
  4799 ;; Defined at:
  4800 ;;		line 13 in file "I2C.c"
  4801 ;; Parameters:    Size  Location     Type
  4802 ;;  c               4   13[BANK0 ] const unsigned long 
  4803 ;; Auto vars:     Size  Location     Type
  4804 ;;		None
  4805 ;; Return value:  Size  Location     Type
  4806 ;;                  1    wreg      void 
  4807 ;; Registers used:
  4808 ;;		wreg, status,2, status,0, cstack
  4809 ;; Tracked objects:
  4810 ;;		On entry : 0/0
  4811 ;;		On exit  : 0/0
  4812 ;;		Unchanged: 0/0
  4813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4814 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4816 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4817 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4818 ;;Total ram usage:        8 bytes
  4819 ;; Hardware stack levels used:    1
  4820 ;; Hardware stack levels required when called:    8
  4821 ;; This function calls:
  4822 ;;		___lldiv
  4823 ;; This function is called by:
  4824 ;;		_initialize
  4825 ;; This function uses a non-reentrant model
  4826 ;;
  4827                           
  4828                           	psect	text21
  4829  001DCA                     __ptext21:
  4830                           	opt stack 0
  4831  001DCA                     _I2C_Master_Init:
  4832                           	opt stack 21
  4833                           
  4834                           ;I2C.c: 15: SSPSTAT = 0b00000000;
  4835                           
  4836                           ;incstack = 0
  4837  001DCA  0E00               	movlw	0
  4838  001DCC  6EC7               	movwf	4039,c	;volatile
  4839                           
  4840                           ;I2C.c: 16: SSPCON1 = 0b00101000;
  4841  001DCE  0E28               	movlw	40
  4842  001DD0  6EC6               	movwf	4038,c	;volatile
  4843                           
  4844                           ;I2C.c: 17: SSPCON2 = 0b00000000;
  4845  001DD2  0E00               	movlw	0
  4846  001DD4  6EC5               	movwf	4037,c	;volatile
  4847                           
  4848                           ;I2C.c: 18: SSPADD = (8000000 / (4 * c)) - 1;
  4849  001DD6  0E00               	movlw	0
  4850  001DD8  0100               	movlb	0	; () banked
  4851  001DDA  6F80               	movwf	___lldiv@dividend& (0+255),b
  4852  001DDC  0E12               	movlw	18
  4853  001DDE  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  4854  001DE0  0E7A               	movlw	122
  4855  001DE2  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  4856  001DE4  0E00               	movlw	0
  4857  001DE6  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  4858  001DE8  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  4859  001DEC  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  4860  001DF0  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  4861  001DF4  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  4862  001DF8  0E02               	movlw	2
  4863  001DFA                     u2675:
  4864  001DFA  90D8               	bcf	status,0,c
  4865  001DFC  0100               	movlb	0	; () banked
  4866  001DFE  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  4867  001E00  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  4868  001E02  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  4869  001E04  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  4870  001E06  2EE8               	decfsz	wreg,f,c
  4871  001E08  D7F8               	goto	u2675
  4872  001E0A  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  4873  001E0E  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  4874  001E12  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  4875  001E16  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  4876  001E1A  ECC8  F00B         	call	___lldiv	;wreg free
  4877  001E1E  0100               	movlb	0	; () banked
  4878  001E20  0580               	decf	?___lldiv& (0+255),w,b
  4879  001E22  6EC8               	movwf	4040,c	;volatile
  4880                           
  4881                           ; BSR set to: 0
  4882                           ;I2C.c: 19: TRISC3 = 1;
  4883  001E24  8694               	bsf	3988,3,c	;volatile
  4884                           
  4885                           ; BSR set to: 0
  4886                           ;I2C.c: 20: TRISC4 = 1;
  4887  001E26  8894               	bsf	3988,4,c	;volatile
  4888                           
  4889                           ; BSR set to: 0
  4890  001E28  0012               	return		;funcret
  4891  001E2A                     __end_of_I2C_Master_Init:
  4892                           	opt stack 0
  4893                           tblptru	equ	0xFF8
  4894                           tblptrh	equ	0xFF7
  4895                           tblptrl	equ	0xFF6
  4896                           tablat	equ	0xFF5
  4897                           prodh	equ	0xFF4
  4898                           prodl	equ	0xFF3
  4899                           intcon	equ	0xFF2
  4900                           intcon3	equ	0xFF0
  4901                           postinc0	equ	0xFEE
  4902                           wreg	equ	0xFE8
  4903                           indf2	equ	0xFDF
  4904                           postinc2	equ	0xFDE
  4905                           postdec2	equ	0xFDD
  4906                           fsr2h	equ	0xFDA
  4907                           fsr2l	equ	0xFD9
  4908                           status	equ	0xFD8
  4909                           
  4910 ;; *************** function ___lldiv *****************
  4911 ;; Defined at:
  4912 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  4913 ;; Parameters:    Size  Location     Type
  4914 ;;  dividend        4    0[BANK0 ] unsigned long 
  4915 ;;  divisor         4    4[BANK0 ] unsigned long 
  4916 ;; Auto vars:     Size  Location     Type
  4917 ;;  quotient        4    8[BANK0 ] unsigned long 
  4918 ;;  counter         1   12[BANK0 ] unsigned char 
  4919 ;; Return value:  Size  Location     Type
  4920 ;;                  4    0[BANK0 ] unsigned long 
  4921 ;; Registers used:
  4922 ;;		wreg, status,2, status,0
  4923 ;; Tracked objects:
  4924 ;;		On entry : 0/0
  4925 ;;		On exit  : 0/0
  4926 ;;		Unchanged: 0/0
  4927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4928 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4929 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4931 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4932 ;;Total ram usage:       13 bytes
  4933 ;; Hardware stack levels used:    1
  4934 ;; Hardware stack levels required when called:    7
  4935 ;; This function calls:
  4936 ;;		Nothing
  4937 ;; This function is called by:
  4938 ;;		_I2C_Master_Init
  4939 ;; This function uses a non-reentrant model
  4940 ;;
  4941                           
  4942                           	psect	text22
  4943  001790                     __ptext22:
  4944                           	opt stack 0
  4945  001790                     ___lldiv:
  4946                           	opt stack 21
  4947                           
  4948                           ; BSR set to: 0
  4949                           ;incstack = 0
  4950  001790  0E00               	movlw	0
  4951  001792  0100               	movlb	0	; () banked
  4952  001794  6F88               	movwf	___lldiv@quotient& (0+255),b
  4953  001796  0E00               	movlw	0
  4954  001798  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  4955  00179A  0E00               	movlw	0
  4956  00179C  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  4957  00179E  0E00               	movlw	0
  4958  0017A0  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  4959                           
  4960                           ; BSR set to: 0
  4961  0017A2  0100               	movlb	0	; () banked
  4962  0017A4  5184               	movf	___lldiv@divisor& (0+255),w,b
  4963  0017A6  0100               	movlb	0	; () banked
  4964  0017A8  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  4965  0017AA  0100               	movlb	0	; () banked
  4966  0017AC  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  4967  0017AE  0100               	movlb	0	; () banked
  4968  0017B0  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  4969  0017B2  B4D8               	btfsc	status,2,c
  4970  0017B4  D042               	goto	l872
  4971                           
  4972                           ; BSR set to: 0
  4973  0017B6  0E01               	movlw	1
  4974  0017B8  0100               	movlb	0	; () banked
  4975  0017BA  6F8C               	movwf	___lldiv@counter& (0+255),b
  4976  0017BC  D008               	goto	l3572
  4977  0017BE                     l3570:
  4978                           
  4979                           ; BSR set to: 0
  4980  0017BE  0100               	movlb	0	; () banked
  4981  0017C0  90D8               	bcf	status,0,c
  4982  0017C2  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  4983  0017C4  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  4984  0017C6  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  4985  0017C8  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  4986  0017CA  0100               	movlb	0	; () banked
  4987  0017CC  2B8C               	incf	___lldiv@counter& (0+255),f,b
  4988  0017CE                     l3572:
  4989                           
  4990                           ; BSR set to: 0
  4991  0017CE  0100               	movlb	0	; () banked
  4992  0017D0  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  4993  0017D2  D7F5               	goto	l3570
  4994  0017D4                     l3574:
  4995                           
  4996                           ; BSR set to: 0
  4997  0017D4  0100               	movlb	0	; () banked
  4998  0017D6  90D8               	bcf	status,0,c
  4999  0017D8  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  5000  0017DA  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  5001  0017DC  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  5002  0017DE  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  5003                           
  5004                           ; BSR set to: 0
  5005  0017E0  0100               	movlb	0	; () banked
  5006  0017E2  5184               	movf	___lldiv@divisor& (0+255),w,b
  5007  0017E4  0100               	movlb	0	; () banked
  5008  0017E6  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  5009  0017E8  0100               	movlb	0	; () banked
  5010  0017EA  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5011  0017EC  0100               	movlb	0	; () banked
  5012  0017EE  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  5013  0017F0  0100               	movlb	0	; () banked
  5014  0017F2  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5015  0017F4  0100               	movlb	0	; () banked
  5016  0017F6  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  5017  0017F8  0100               	movlb	0	; () banked
  5018  0017FA  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5019  0017FC  0100               	movlb	0	; () banked
  5020  0017FE  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  5021  001800  A0D8               	btfss	status,0,c
  5022  001802  D012               	goto	l3582
  5023                           
  5024                           ; BSR set to: 0
  5025  001804  0100               	movlb	0	; () banked
  5026  001806  5184               	movf	___lldiv@divisor& (0+255),w,b
  5027  001808  0100               	movlb	0	; () banked
  5028  00180A  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  5029  00180C  0100               	movlb	0	; () banked
  5030  00180E  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  5031  001810  0100               	movlb	0	; () banked
  5032  001812  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  5033  001814  0100               	movlb	0	; () banked
  5034  001816  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  5035  001818  0100               	movlb	0	; () banked
  5036  00181A  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  5037  00181C  0100               	movlb	0	; () banked
  5038  00181E  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  5039  001820  0100               	movlb	0	; () banked
  5040  001822  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  5041                           
  5042                           ; BSR set to: 0
  5043  001824  0100               	movlb	0	; () banked
  5044  001826  8188               	bsf	___lldiv@quotient& (0+255),0,b
  5045  001828                     l3582:
  5046                           
  5047                           ; BSR set to: 0
  5048  001828  0100               	movlb	0	; () banked
  5049  00182A  90D8               	bcf	status,0,c
  5050  00182C  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  5051  00182E  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  5052  001830  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  5053  001832  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  5054                           
  5055                           ; BSR set to: 0
  5056  001834  0100               	movlb	0	; () banked
  5057  001836  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  5058  001838  D7CD               	goto	l3574
  5059  00183A                     l872:
  5060                           
  5061                           ; BSR set to: 0
  5062  00183A  C088  F080         	movff	___lldiv@quotient,?___lldiv
  5063  00183E  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  5064  001842  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  5065  001846  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  5066                           
  5067                           ; BSR set to: 0
  5068  00184A  0012               	return		;funcret
  5069  00184C                     __end_of___lldiv:
  5070                           	opt stack 0
  5071                           tblptru	equ	0xFF8
  5072                           tblptrh	equ	0xFF7
  5073                           tblptrl	equ	0xFF6
  5074                           tablat	equ	0xFF5
  5075                           prodh	equ	0xFF4
  5076                           prodl	equ	0xFF3
  5077                           intcon	equ	0xFF2
  5078                           intcon3	equ	0xFF0
  5079                           postinc0	equ	0xFEE
  5080                           wreg	equ	0xFE8
  5081                           indf2	equ	0xFDF
  5082                           postinc2	equ	0xFDE
  5083                           postdec2	equ	0xFDD
  5084                           fsr2h	equ	0xFDA
  5085                           fsr2l	equ	0xFD9
  5086                           status	equ	0xFD8
  5087                           
  5088 ;; *************** function _keypressed *****************
  5089 ;; Defined at:
  5090 ;;		line 247 in file "main.c"
  5091 ;; Parameters:    Size  Location     Type
  5092 ;;		None
  5093 ;; Auto vars:     Size  Location     Type
  5094 ;;  keypress        1  110[COMRAM] unsigned char 
  5095 ;; Return value:  Size  Location     Type
  5096 ;;                  1    wreg      void 
  5097 ;; Registers used:
  5098 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5099 ;; Tracked objects:
  5100 ;;		On entry : 0/0
  5101 ;;		On exit  : 0/0
  5102 ;;		Unchanged: 0/0
  5103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5105 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5106 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5107 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5108 ;;Total ram usage:       17 bytes
  5109 ;; Hardware stack levels used:    1
  5110 ;; Hardware stack levels required when called:    6
  5111 ;; This function calls:
  5112 ;;		_PermLog
  5113 ;;		_simulate
  5114 ;;		_stopMoving
  5115 ;; This function is called by:
  5116 ;;		Interrupt level 2
  5117 ;; This function uses a non-reentrant model
  5118 ;;
  5119                           
  5120                           	psect	intcode
  5121  000008                     __pintcode:
  5122                           	opt stack 0
  5123  000008                     _keypressed:
  5124                           	opt stack 20
  5125                           
  5126                           ; BSR set to: 0
  5127                           ;incstack = 0
  5128  000008  827D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5129  00000A  ED58  F009         	call	int_func,f	;refresh shadow registers
  5130                           tblptru	equ	0xFF8
  5131                           tblptrh	equ	0xFF7
  5132                           tblptrl	equ	0xFF6
  5133                           tablat	equ	0xFF5
  5134                           prodh	equ	0xFF4
  5135                           prodl	equ	0xFF3
  5136                           intcon	equ	0xFF2
  5137                           intcon3	equ	0xFF0
  5138                           postinc0	equ	0xFEE
  5139                           wreg	equ	0xFE8
  5140                           indf2	equ	0xFDF
  5141                           postinc2	equ	0xFDE
  5142                           postdec2	equ	0xFDD
  5143                           fsr2h	equ	0xFDA
  5144                           fsr2l	equ	0xFD9
  5145                           status	equ	0xFD8
  5146                           
  5147                           	psect	intcode_body
  5148  0012B0                     __pintcode_body:
  5149                           	opt stack 20
  5150  0012B0                     int_func:
  5151                           	opt stack 20
  5152  0012B0  0006               	pop		; remove dummy address from shadow register refresh
  5153  0012B2  CFFA F061          	movff	pclath,??_keypressed+2
  5154  0012B6  CFFB F062          	movff	pclatu,??_keypressed+3
  5155  0012BA  CFE9 F063          	movff	fsr0l,??_keypressed+4
  5156  0012BE  CFEA F064          	movff	fsr0h,??_keypressed+5
  5157  0012C2  CFE1 F065          	movff	fsr1l,??_keypressed+6
  5158  0012C6  CFE2 F066          	movff	fsr1h,??_keypressed+7
  5159  0012CA  CFD9 F067          	movff	fsr2l,??_keypressed+8
  5160  0012CE  CFDA F068          	movff	fsr2h,??_keypressed+9
  5161  0012D2  CFF3 F069          	movff	prodl,??_keypressed+10
  5162  0012D6  CFF4 F06A          	movff	prodh,??_keypressed+11
  5163  0012DA  CFF6 F06B          	movff	tblptrl,??_keypressed+12
  5164  0012DE  CFF7 F06C          	movff	tblptrh,??_keypressed+13
  5165  0012E2  CFF8 F06D          	movff	tblptru,??_keypressed+14
  5166  0012E6  CFF5 F06E          	movff	tablat,??_keypressed+15
  5167                           
  5168                           ;main.c: 254: (INTCONbits.GIE = 0);
  5169  0012EA  9EF2               	bcf	intcon,7,c	;volatile
  5170                           
  5171                           ;main.c: 255: if (INT1IF) {
  5172  0012EC  A0F0               	btfss	intcon3,0,c	;volatile
  5173  0012EE  D037               	goto	i2l141
  5174                           
  5175                           ;main.c: 256: unsigned char keypress = (PORTB & 0xF0) >> 4;
  5176  0012F0  3881               	swapf	3969,w,c	;volatile
  5177  0012F2  0B0F               	andlw	15
  5178  0012F4  0B0F               	andlw	15
  5179  0012F6  6E6F               	movwf	keypressed@keypress,c
  5180                           
  5181                           ;main.c: 257: INT1IF = 0;
  5182  0012F8  90F0               	bcf	intcon3,0,c	;volatile
  5183  0012FA                     i2l142:
  5184  0012FA  A281               	btfss	3969,1,c	;volatile
  5185  0012FC  D021               	goto	i2l4446
  5186  0012FE  D7FD               	goto	i2l142
  5187  001300                     i2l4424:
  5188                           
  5189                           ;main.c: 261: if (keypress < 4) {
  5190  001300  0E04               	movlw	4
  5191  001302  606F               	cpfslt	keypressed@keypress,c
  5192  001304  D00C               	goto	i2l4432
  5193                           
  5194                           ;main.c: 262: mode = 2;
  5195  001306  0E00               	movlw	0
  5196  001308  6E75               	movwf	_mode+1,c
  5197  00130A  0E02               	movlw	2
  5198  00130C  6E74               	movwf	_mode,c
  5199                           
  5200                           ;main.c: 263: PermLog(keypress);
  5201  00130E  506F               	movf	keypressed@keypress,w,c
  5202  001310  EC8F  F00D         	call	_PermLog
  5203                           
  5204                           ;main.c: 264: mode = 0;
  5205  001314  0E00               	movlw	0
  5206  001316  6E75               	movwf	_mode+1,c
  5207  001318  0E00               	movlw	0
  5208  00131A  6E74               	movwf	_mode,c
  5209                           
  5210                           ;main.c: 265: } else {
  5211  00131C  D020               	goto	i2l141
  5212  00131E                     i2l4432:
  5213                           
  5214                           ;main.c: 266: mode = 1;
  5215  00131E  0E00               	movlw	0
  5216  001320  6E75               	movwf	_mode+1,c
  5217  001322  0E01               	movlw	1
  5218  001324  6E74               	movwf	_mode,c
  5219                           
  5220                           ;main.c: 267: (INTCONbits.GIE = 1);
  5221  001326  8EF2               	bsf	intcon,7,c	;volatile
  5222                           
  5223                           ;main.c: 268: simulate();
  5224  001328  EC3E  F002         	call	_simulate	;wreg free
  5225                           
  5226                           ;main.c: 269: (INTCONbits.GIE = 0);
  5227  00132C  9EF2               	bcf	intcon,7,c	;volatile
  5228                           
  5229                           ;main.c: 270: }
  5230                           ;main.c: 271: break;
  5231  00132E  D017               	goto	i2l141
  5232  001330                     i2l4440:
  5233                           
  5234                           ;main.c: 273: mode = 3;
  5235  001330  0E00               	movlw	0
  5236  001332  6E75               	movwf	_mode+1,c
  5237  001334  0E03               	movlw	3
  5238  001336  6E74               	movwf	_mode,c
  5239                           
  5240                           ;main.c: 274: stopMoving(1);
  5241  001338  0E01               	movlw	1
  5242  00133A  EC15  F00F         	call	_stopMoving
  5243                           
  5244                           ;main.c: 278: }
  5245                           
  5246                           ;main.c: 277: break;
  5247                           
  5248                           ;main.c: 276: default:
  5249                           
  5250                           ;main.c: 275: break;
  5251  00133E  D00F               	goto	i2l141
  5252  001340                     i2l4446:
  5253  001340  C074  F05F         	movff	_mode,??_keypressed
  5254  001344  C075  F060         	movff	_mode+1,??_keypressed+1
  5255                           
  5256                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5257                           ; Switch size 1, requested type "space"
  5258                           ; Number of cases is 1, Range of values is 0 to 0
  5259                           ; switch strategies available:
  5260                           ; Name         Instructions Cycles
  5261                           ; simple_byte            4     3 (average)
  5262                           ;	Chosen strategy is simple_byte
  5263  001348  5060               	movf	??_keypressed+1,w,c
  5264  00134A  0A00               	xorlw	0	; case 0
  5265  00134C  A4D8               	btfss	status,2,c
  5266  00134E  D007               	goto	i2l141
  5267                           
  5268                           ; Switch size 1, requested type "space"
  5269                           ; Number of cases is 2, Range of values is 0 to 1
  5270                           ; switch strategies available:
  5271                           ; Name         Instructions Cycles
  5272                           ; simple_byte            7     4 (average)
  5273                           ;	Chosen strategy is simple_byte
  5274  001350  505F               	movf	??_keypressed,w,c
  5275  001352  0A00               	xorlw	0	; case 0
  5276  001354  B4D8               	btfsc	status,2,c
  5277  001356  D7D4               	goto	i2l4424
  5278  001358  0A01               	xorlw	1	; case 1
  5279  00135A  B4D8               	btfsc	status,2,c
  5280  00135C  D7E9               	goto	i2l4440
  5281  00135E                     i2l141:
  5282                           
  5283                           ;main.c: 279: }
  5284                           ;main.c: 280: (INTCONbits.GIE = 1);
  5285  00135E  8EF2               	bsf	intcon,7,c	;volatile
  5286  001360  C06E  FFF5         	movff	??_keypressed+15,tablat
  5287  001364  C06D  FFF8         	movff	??_keypressed+14,tblptru
  5288  001368  C06C  FFF7         	movff	??_keypressed+13,tblptrh
  5289  00136C  C06B  FFF6         	movff	??_keypressed+12,tblptrl
  5290  001370  C06A  FFF4         	movff	??_keypressed+11,prodh
  5291  001374  C069  FFF3         	movff	??_keypressed+10,prodl
  5292  001378  C068  FFDA         	movff	??_keypressed+9,fsr2h
  5293  00137C  C067  FFD9         	movff	??_keypressed+8,fsr2l
  5294  001380  C066  FFE2         	movff	??_keypressed+7,fsr1h
  5295  001384  C065  FFE1         	movff	??_keypressed+6,fsr1l
  5296  001388  C064  FFEA         	movff	??_keypressed+5,fsr0h
  5297  00138C  C063  FFE9         	movff	??_keypressed+4,fsr0l
  5298  001390  C062  FFFB         	movff	??_keypressed+3,pclatu
  5299  001394  C061  FFFA         	movff	??_keypressed+2,pclath
  5300  001398  927D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5301  00139A  0011               	retfie		f
  5302  00139C                     __end_of_keypressed:
  5303                           	opt stack 0
  5304                           pclatu	equ	0xFFB
  5305                           pclath	equ	0xFFA
  5306                           tblptru	equ	0xFF8
  5307                           tblptrh	equ	0xFF7
  5308                           tblptrl	equ	0xFF6
  5309                           tablat	equ	0xFF5
  5310                           prodh	equ	0xFF4
  5311                           prodl	equ	0xFF3
  5312                           intcon	equ	0xFF2
  5313                           intcon3	equ	0xFF0
  5314                           postinc0	equ	0xFEE
  5315                           fsr0h	equ	0xFEA
  5316                           fsr0l	equ	0xFE9
  5317                           wreg	equ	0xFE8
  5318                           fsr1h	equ	0xFE2
  5319                           fsr1l	equ	0xFE1
  5320                           indf2	equ	0xFDF
  5321                           postinc2	equ	0xFDE
  5322                           postdec2	equ	0xFDD
  5323                           fsr2h	equ	0xFDA
  5324                           fsr2l	equ	0xFD9
  5325                           status	equ	0xFD8
  5326                           
  5327 ;; *************** function _simulate *****************
  5328 ;; Defined at:
  5329 ;;		line 83 in file "main.c"
  5330 ;; Parameters:    Size  Location     Type
  5331 ;;		None
  5332 ;; Auto vars:     Size  Location     Type
  5333 ;;  portCCW         6   66[COMRAM] int [3]
  5334 ;;  portCW          6   60[COMRAM] int [3]
  5335 ;;  sorted          4   88[COMRAM] unsigned char [4]
  5336 ;;  start           4   84[COMRAM] unsigned int [2]
  5337 ;;  now             4   80[COMRAM] unsigned int [2]
  5338 ;;  period          2   92[COMRAM] unsigned int 
  5339 ;;  V9              2   78[COMRAM] int 
  5340 ;;  C               2   76[COMRAM] int 
  5341 ;;  AA              2   74[COMRAM] int 
  5342 ;;  stop            2   72[COMRAM] int 
  5343 ;; Return value:  Size  Location     Type
  5344 ;;                  1    wreg      void 
  5345 ;; Registers used:
  5346 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5347 ;; Tracked objects:
  5348 ;;		On entry : 0/0
  5349 ;;		On exit  : 0/0
  5350 ;;		Unchanged: 0/0
  5351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5353 ;;      Locals:        34       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5354 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5355 ;;      Totals:        38       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5356 ;;Total ram usage:       38 bytes
  5357 ;; Hardware stack levels used:    1
  5358 ;; Hardware stack levels required when called:    5
  5359 ;; This function calls:
  5360 ;;		_CCW90
  5361 ;;		_CW90
  5362 ;;		_WriteRun
  5363 ;;		_check9
  5364 ;;		_checkAA
  5365 ;;		_checkC
  5366 ;;		_showInfo
  5367 ;;		_stopMoving
  5368 ;;		i2___lcd_newline
  5369 ;;		i2___wmul
  5370 ;;		i2_getTime
  5371 ;;		i2_lcdInst
  5372 ;;		i2_printf
  5373 ;; This function is called by:
  5374 ;;		_keypressed
  5375 ;; This function uses a non-reentrant model
  5376 ;;
  5377                           
  5378                           	psect	text24
  5379  00047C                     __ptext24:
  5380                           	opt stack 0
  5381  00047C                     _simulate:
  5382                           	opt stack 20
  5383                           
  5384                           ;main.c: 84: unsigned int now[] = {0, 0}, start[] = {0, 0};
  5385                           
  5386                           ;incstack = 0
  5387  00047C  C070  F051         	movff	simulate@F3107,simulate@now
  5388  000480  C071  F052         	movff	simulate@F3107+1,simulate@now+1
  5389  000484  C072  F053         	movff	simulate@F3107+2,simulate@now+2
  5390  000488  C073  F054         	movff	simulate@F3107+3,simulate@now+3
  5391  00048C  C0C3  F055         	movff	simulate@F3109,simulate@start
  5392  000490  C0C4  F056         	movff	simulate@F3109+1,simulate@start+1
  5393  000494  C0C5  F057         	movff	simulate@F3109+2,simulate@start+2
  5394  000498  C0C6  F058         	movff	simulate@F3109+3,simulate@start+3
  5395                           
  5396                           ;main.c: 85: unsigned char sorted[] = {0, 0, 0, 0};
  5397  00049C  C0BF  F059         	movff	simulate@F3111,simulate@sorted
  5398  0004A0  C0C0  F05A         	movff	simulate@F3111+1,simulate@sorted+1
  5399  0004A4  C0C1  F05B         	movff	simulate@F3111+2,simulate@sorted+2
  5400  0004A8  C0C2  F05C         	movff	simulate@F3111+3,simulate@sorted+3
  5401                           
  5402                           ;main.c: 86: unsigned int period = 0;
  5403  0004AC  0E00               	movlw	0
  5404  0004AE  6E5E               	movwf	simulate@period+1,c
  5405  0004B0  0E00               	movlw	0
  5406  0004B2  6E5D               	movwf	simulate@period,c
  5407                           
  5408                           ;main.c: 87: start[0] = time[0];
  5409  0004B4  C076  F055         	movff	_time,simulate@start
  5410  0004B8  6A56               	clrf	simulate@start+1,c
  5411                           
  5412                           ;main.c: 88: start[1] = time[1];
  5413  0004BA  C077  F057         	movff	_time+1,simulate@start+2
  5414  0004BE  6A58               	clrf	simulate@start+3,c
  5415                           
  5416                           ;main.c: 89: lcdInst(0b10000000);;
  5417  0004C0  0E80               	movlw	128
  5418  0004C2  EC72  F011         	call	i2_lcdInst
  5419                           
  5420                           ;main.c: 90: printf("Simulating...          ");
  5421  0004C6  0EFB               	movlw	low STR_2
  5422  0004C8  6E0D               	movwf	i2printf@f,c
  5423  0004CA  0EFC               	movlw	high STR_2
  5424  0004CC  6E0E               	movwf	i2printf@f+1,c
  5425  0004CE  EC3D  F004         	call	i2_printf	;wreg free
  5426                           
  5427                           ;main.c: 91: _delay((unsigned long)((700)*(8000000/4000.0)));
  5428  0004D2  0E08               	movlw	8
  5429  0004D4  6E3A               	movwf	(??_simulate+1)& (0+255),c
  5430  0004D6  0E1B               	movlw	27
  5431  0004D8  6E39               	movwf	??_simulate& (0+255),c
  5432  0004DA  0E27               	movlw	39
  5433  0004DC                     i2u330_47:
  5434  0004DC  2EE8               	decfsz	wreg,f,c
  5435  0004DE  D7FE               	bra	i2u330_47
  5436  0004E0  2E39               	decfsz	??_simulate& (0+255),f,c
  5437  0004E2  D7FC               	bra	i2u330_47
  5438  0004E4  2E3A               	decfsz	(??_simulate+1)& (0+255),f,c
  5439  0004E6  D7FA               	bra	i2u330_47
  5440  0004E8  F000               	nop	
  5441                           
  5442                           ;main.c: 92: int stop = 0;
  5443  0004EA  0E00               	movlw	0
  5444  0004EC  6E4A               	movwf	simulate@stop+1,c
  5445  0004EE  0E00               	movlw	0
  5446  0004F0  6E49               	movwf	simulate@stop,c
  5447                           
  5448                           ;main.c: 93: int AA = -1, C = -1, V9 = -1;
  5449  0004F2  684B               	setf	simulate@AA,c
  5450  0004F4  684C               	setf	simulate@AA+1,c
  5451  0004F6  684D               	setf	simulate@C,c
  5452  0004F8  684E               	setf	simulate@C+1,c
  5453  0004FA  684F               	setf	simulate@V9,c
  5454  0004FC  6850               	setf	simulate@V9+1,c
  5455                           
  5456                           ;main.c: 94: LATC5 = 1;
  5457  0004FE  8A8B               	bsf	3979,5,c	;volatile
  5458                           
  5459                           ;main.c: 95: while (!stop) {
  5460  000500  D183               	goto	i2l4320
  5461  000502                     i2l4216:
  5462                           
  5463                           ;main.c: 97: AA = checkAA(sorted);
  5464  000502  0E59               	movlw	low simulate@sorted
  5465  000504  6E37               	movwf	checkAA@sorted,c
  5466  000506  0E00               	movlw	high simulate@sorted
  5467  000508  6E38               	movwf	checkAA@sorted+1,c
  5468  00050A  EC68  F00B         	call	_checkAA	;wreg free
  5469  00050E  C037  F04B         	movff	?_checkAA,simulate@AA
  5470  000512  C038  F04C         	movff	?_checkAA+1,simulate@AA+1
  5471                           
  5472                           ;main.c: 99: _delay((unsigned long)((700)*(8000000/4000.0)));
  5473  000516  0E08               	movlw	8
  5474  000518  6E3A               	movwf	(??_simulate+1)& (0+255),c
  5475  00051A  0E1B               	movlw	27
  5476  00051C  6E39               	movwf	??_simulate& (0+255),c
  5477  00051E  0E27               	movlw	39
  5478  000520                     i2u331_47:
  5479  000520  2EE8               	decfsz	wreg,f,c
  5480  000522  D7FE               	bra	i2u331_47
  5481  000524  2E39               	decfsz	??_simulate& (0+255),f,c
  5482  000526  D7FC               	bra	i2u331_47
  5483  000528  2E3A               	decfsz	(??_simulate+1)& (0+255),f,c
  5484  00052A  D7FA               	bra	i2u331_47
  5485  00052C  F000               	nop	
  5486                           
  5487                           ;main.c: 100: C = checkC(sorted);
  5488  00052E  0E59               	movlw	low simulate@sorted
  5489  000530  6E37               	movwf	checkC@sorted,c
  5490  000532  0E00               	movlw	high simulate@sorted
  5491  000534  6E38               	movwf	checkC@sorted+1,c
  5492  000536  ECA4  F00A         	call	_checkC	;wreg free
  5493  00053A  C037  F04D         	movff	?_checkC,simulate@C
  5494  00053E  C038  F04E         	movff	?_checkC+1,simulate@C+1
  5495                           
  5496                           ;main.c: 102: _delay((unsigned long)((700)*(8000000/4000.0)));
  5497  000542  0E08               	movlw	8
  5498  000544  6E3A               	movwf	(??_simulate+1)& (0+255),c
  5499  000546  0E1B               	movlw	27
  5500  000548  6E39               	movwf	??_simulate& (0+255),c
  5501  00054A  0E27               	movlw	39
  5502  00054C                     i2u332_47:
  5503  00054C  2EE8               	decfsz	wreg,f,c
  5504  00054E  D7FE               	bra	i2u332_47
  5505  000550  2E39               	decfsz	??_simulate& (0+255),f,c
  5506  000552  D7FC               	bra	i2u332_47
  5507  000554  2E3A               	decfsz	(??_simulate+1)& (0+255),f,c
  5508  000556  D7FA               	bra	i2u332_47
  5509  000558  F000               	nop	
  5510                           
  5511                           ;main.c: 104: V9 = check9(sorted);
  5512  00055A  0E59               	movlw	low simulate@sorted
  5513  00055C  6E37               	movwf	check9@sorted,c
  5514  00055E  0E00               	movlw	high simulate@sorted
  5515  000560  6E38               	movwf	check9@sorted+1,c
  5516  000562  EC06  F00B         	call	_check9	;wreg free
  5517  000566  C037  F04F         	movff	?_check9,simulate@V9
  5518  00056A  C038  F050         	movff	?_check9+1,simulate@V9+1
  5519                           
  5520                           ;main.c: 105: lcdInst(0b10000000);;
  5521  00056E  0E80               	movlw	128
  5522  000570  EC72  F011         	call	i2_lcdInst
  5523                           
  5524                           ;main.c: 108: int portCW[] = {0, 0, 0};
  5525  000574  EE20  F0B5         	lfsr	2,simulate@F3121
  5526  000578  EE10  F03D         	lfsr	1,simulate@portCW
  5527  00057C  0E05               	movlw	5
  5528  00057E                     i2u305_41:
  5529  00057E  CFDB FFE3          	movff	plusw2,plusw1
  5530  000582  06E8               	decf	wreg,f,c
  5531  000584  E2FC               	bc	i2u305_41
  5532                           
  5533                           ;main.c: 109: int portCCW[] = {0, 0, 0};
  5534  000586  EE20  F0AF         	lfsr	2,simulate@F3123
  5535  00058A  EE10  F043         	lfsr	1,simulate@portCCW
  5536  00058E  0E05               	movlw	5
  5537  000590                     i2u306_41:
  5538  000590  CFDB FFE3          	movff	plusw2,plusw1
  5539  000594  06E8               	decf	wreg,f,c
  5540  000596  E2FC               	bc	i2u306_41
  5541                           
  5542                           ;main.c: 111: if (!AA) {
  5543  000598  504B               	movf	simulate@AA,w,c
  5544  00059A  104C               	iorwf	simulate@AA+1,w,c
  5545  00059C  A4D8               	btfss	status,2,c
  5546  00059E  D00B               	goto	i2l4236
  5547                           
  5548                           ;main.c: 112: portCCW[0] = 1;
  5549  0005A0  0E00               	movlw	0
  5550  0005A2  6E44               	movwf	simulate@portCCW+1,c
  5551  0005A4  0E01               	movlw	1
  5552  0005A6  6E43               	movwf	simulate@portCCW,c
  5553                           
  5554                           ;main.c: 113: printf("AAServoLeft         ");
  5555  0005A8  0E5D               	movlw	low STR_3
  5556  0005AA  6E0D               	movwf	i2printf@f,c
  5557  0005AC  0EFE               	movlw	high STR_3
  5558  0005AE  6E0E               	movwf	i2printf@f+1,c
  5559  0005B0  EC3D  F004         	call	i2_printf	;wreg free
  5560                           
  5561                           ;main.c: 114: } else if (AA == 1) {
  5562  0005B4  D015               	goto	i2l4244
  5563  0005B6                     i2l4236:
  5564  0005B6  044B               	decf	simulate@AA,w,c
  5565  0005B8  104C               	iorwf	simulate@AA+1,w,c
  5566  0005BA  A4D8               	btfss	status,2,c
  5567  0005BC  D00B               	goto	i2l4242
  5568                           
  5569                           ;main.c: 115: portCW[0] = 1;
  5570  0005BE  0E00               	movlw	0
  5571  0005C0  6E3E               	movwf	simulate@portCW+1,c
  5572  0005C2  0E01               	movlw	1
  5573  0005C4  6E3D               	movwf	simulate@portCW,c
  5574                           
  5575                           ;main.c: 116: printf("AAServoRight         ");
  5576  0005C6  0EB4               	movlw	low STR_4
  5577  0005C8  6E0D               	movwf	i2printf@f,c
  5578  0005CA  0EFD               	movlw	high STR_4
  5579  0005CC  6E0E               	movwf	i2printf@f+1,c
  5580  0005CE  EC3D  F004         	call	i2_printf	;wreg free
  5581                           
  5582                           ;main.c: 117: } else {
  5583  0005D2  D006               	goto	i2l4244
  5584  0005D4                     i2l4242:
  5585                           
  5586                           ;main.c: 118: printf("AAServoStays         ");
  5587  0005D4  0E9E               	movlw	low STR_5
  5588  0005D6  6E0D               	movwf	i2printf@f,c
  5589  0005D8  0EFD               	movlw	high STR_5
  5590  0005DA  6E0E               	movwf	i2printf@f+1,c
  5591  0005DC  EC3D  F004         	call	i2_printf	;wreg free
  5592  0005E0                     i2l4244:
  5593                           
  5594                           ;main.c: 119: }
  5595                           ;main.c: 121: lcdInst(0b10000000);;
  5596  0005E0  0E80               	movlw	128
  5597  0005E2  EC72  F011         	call	i2_lcdInst
  5598                           
  5599                           ;main.c: 122: _delay((unsigned long)((700)*(8000000/4000.0)));
  5600  0005E6  0E08               	movlw	8
  5601  0005E8  6E3A               	movwf	(??_simulate+1)& (0+255),c
  5602  0005EA  0E1B               	movlw	27
  5603  0005EC  6E39               	movwf	??_simulate& (0+255),c
  5604  0005EE  0E27               	movlw	39
  5605  0005F0                     i2u333_47:
  5606  0005F0  2EE8               	decfsz	wreg,f,c
  5607  0005F2  D7FE               	bra	i2u333_47
  5608  0005F4  2E39               	decfsz	??_simulate& (0+255),f,c
  5609  0005F6  D7FC               	bra	i2u333_47
  5610  0005F8  2E3A               	decfsz	(??_simulate+1)& (0+255),f,c
  5611  0005FA  D7FA               	bra	i2u333_47
  5612  0005FC  F000               	nop	
  5613                           
  5614                           ;main.c: 124: if (!C) {
  5615  0005FE  504D               	movf	simulate@C,w,c
  5616  000600  104E               	iorwf	simulate@C+1,w,c
  5617  000602  A4D8               	btfss	status,2,c
  5618  000604  D00B               	goto	i2l4254
  5619                           
  5620                           ;main.c: 125: portCCW[1] = 1;
  5621  000606  0E00               	movlw	0
  5622  000608  6E46               	movwf	simulate@portCCW+3,c
  5623  00060A  0E01               	movlw	1
  5624  00060C  6E45               	movwf	simulate@portCCW+2,c
  5625                           
  5626                           ;main.c: 126: printf("CServoLeft         ");
  5627  00060E  0ED8               	movlw	low STR_6
  5628  000610  6E0D               	movwf	i2printf@f,c
  5629  000612  0EFE               	movlw	high STR_6
  5630  000614  6E0E               	movwf	i2printf@f+1,c
  5631  000616  EC3D  F004         	call	i2_printf	;wreg free
  5632                           
  5633                           ;main.c: 127: } else if (C == 1) {
  5634  00061A  D015               	goto	i2l4262
  5635  00061C                     i2l4254:
  5636  00061C  044D               	decf	simulate@C,w,c
  5637  00061E  104E               	iorwf	simulate@C+1,w,c
  5638  000620  A4D8               	btfss	status,2,c
  5639  000622  D00B               	goto	i2l4260
  5640                           
  5641                           ;main.c: 128: portCW[1] = 1;
  5642  000624  0E00               	movlw	0
  5643  000626  6E40               	movwf	simulate@portCW+3,c
  5644  000628  0E01               	movlw	1
  5645  00062A  6E3F               	movwf	simulate@portCW+2,c
  5646                           
  5647                           ;main.c: 129: printf("CServoRight         ");
  5648  00062C  0E87               	movlw	low STR_7
  5649  00062E  6E0D               	movwf	i2printf@f,c
  5650  000630  0EFE               	movlw	high STR_7
  5651  000632  6E0E               	movwf	i2printf@f+1,c
  5652  000634  EC3D  F004         	call	i2_printf	;wreg free
  5653                           
  5654                           ;main.c: 130: } else {
  5655  000638  D006               	goto	i2l4262
  5656  00063A                     i2l4260:
  5657                           
  5658                           ;main.c: 131: printf("CServoStays         ");
  5659  00063A  0E48               	movlw	low STR_8
  5660  00063C  6E0D               	movwf	i2printf@f,c
  5661  00063E  0EFE               	movlw	high STR_8
  5662  000640  6E0E               	movwf	i2printf@f+1,c
  5663  000642  EC3D  F004         	call	i2_printf	;wreg free
  5664  000646                     i2l4262:
  5665                           
  5666                           ;main.c: 132: }
  5667                           ;main.c: 134: lcdInst(0b10000000);;
  5668  000646  0E80               	movlw	128
  5669  000648  EC72  F011         	call	i2_lcdInst
  5670                           
  5671                           ;main.c: 135: _delay((unsigned long)((700)*(8000000/4000.0)));
  5672  00064C  0E08               	movlw	8
  5673  00064E  6E3A               	movwf	(??_simulate+1)& (0+255),c
  5674  000650  0E1B               	movlw	27
  5675  000652  6E39               	movwf	??_simulate& (0+255),c
  5676  000654  0E27               	movlw	39
  5677  000656                     i2u334_47:
  5678  000656  2EE8               	decfsz	wreg,f,c
  5679  000658  D7FE               	bra	i2u334_47
  5680  00065A  2E39               	decfsz	??_simulate& (0+255),f,c
  5681  00065C  D7FC               	bra	i2u334_47
  5682  00065E  2E3A               	decfsz	(??_simulate+1)& (0+255),f,c
  5683  000660  D7FA               	bra	i2u334_47
  5684  000662  F000               	nop	
  5685                           
  5686                           ;main.c: 137: if (!V9) {
  5687  000664  504F               	movf	simulate@V9,w,c
  5688  000666  1050               	iorwf	simulate@V9+1,w,c
  5689  000668  A4D8               	btfss	status,2,c
  5690  00066A  D00B               	goto	i2l4272
  5691                           
  5692                           ;main.c: 138: portCCW[2] = 1;
  5693  00066C  0E00               	movlw	0
  5694  00066E  6E48               	movwf	simulate@portCCW+5,c
  5695  000670  0E01               	movlw	1
  5696  000672  6E47               	movwf	simulate@portCCW+4,c
  5697                           
  5698                           ;main.c: 139: printf("9ServoLeft         ");
  5699  000674  0EC4               	movlw	low STR_9
  5700  000676  6E0D               	movwf	i2printf@f,c
  5701  000678  0EFE               	movlw	high STR_9
  5702  00067A  6E0E               	movwf	i2printf@f+1,c
  5703  00067C  EC3D  F004         	call	i2_printf	;wreg free
  5704                           
  5705                           ;main.c: 140: } else if (V9 == 1) {
  5706  000680  D015               	goto	i2l123
  5707  000682                     i2l4272:
  5708  000682  044F               	decf	simulate@V9,w,c
  5709  000684  1050               	iorwf	simulate@V9+1,w,c
  5710  000686  A4D8               	btfss	status,2,c
  5711  000688  D00B               	goto	i2l4278
  5712                           
  5713                           ;main.c: 141: portCW[2] = 1;
  5714  00068A  0E00               	movlw	0
  5715  00068C  6E42               	movwf	simulate@portCW+5,c
  5716  00068E  0E01               	movlw	1
  5717  000690  6E41               	movwf	simulate@portCW+4,c
  5718                           
  5719                           ;main.c: 142: printf("9ServoRight         ");
  5720  000692  0E72               	movlw	low STR_10
  5721  000694  6E0D               	movwf	i2printf@f,c
  5722  000696  0EFE               	movlw	high STR_10
  5723  000698  6E0E               	movwf	i2printf@f+1,c
  5724  00069A  EC3D  F004         	call	i2_printf	;wreg free
  5725                           
  5726                           ;main.c: 143: } else {
  5727  00069E  D006               	goto	i2l123
  5728  0006A0                     i2l4278:
  5729                           
  5730                           ;main.c: 144: printf("9ServoStays         ");
  5731  0006A0  0E33               	movlw	low STR_11
  5732  0006A2  6E0D               	movwf	i2printf@f,c
  5733  0006A4  0EFE               	movlw	high STR_11
  5734  0006A6  6E0E               	movwf	i2printf@f+1,c
  5735  0006A8  EC3D  F004         	call	i2_printf	;wreg free
  5736  0006AC                     i2l123:
  5737                           
  5738                           ;main.c: 145: }
  5739                           ;main.c: 148: CCW90(portCCW);
  5740  0006AC  0E43               	movlw	low simulate@portCCW
  5741  0006AE  6E25               	movwf	CCW90@port,c
  5742  0006B0  0E00               	movlw	high simulate@portCCW
  5743  0006B2  6E26               	movwf	CCW90@port+1,c
  5744  0006B4  EC7D  F010         	call	_CCW90	;wreg free
  5745                           
  5746                           ;main.c: 149: _delay((unsigned long)((700)*(8000000/4000.0)));
  5747  0006B8  0E08               	movlw	8
  5748  0006BA  6E3A               	movwf	(??_simulate+1)& (0+255),c
  5749  0006BC  0E1B               	movlw	27
  5750  0006BE  6E39               	movwf	??_simulate& (0+255),c
  5751  0006C0  0E27               	movlw	39
  5752  0006C2                     i2u335_47:
  5753  0006C2  2EE8               	decfsz	wreg,f,c
  5754  0006C4  D7FE               	bra	i2u335_47
  5755  0006C6  2E39               	decfsz	??_simulate& (0+255),f,c
  5756  0006C8  D7FC               	bra	i2u335_47
  5757  0006CA  2E3A               	decfsz	(??_simulate+1)& (0+255),f,c
  5758  0006CC  D7FA               	bra	i2u335_47
  5759  0006CE  F000               	nop	
  5760                           
  5761                           ;main.c: 150: CW90(portCW);
  5762  0006D0  0E3D               	movlw	low simulate@portCW
  5763  0006D2  6E25               	movwf	CW90@port,c
  5764  0006D4  0E00               	movlw	high simulate@portCW
  5765  0006D6  6E26               	movwf	CW90@port+1,c
  5766  0006D8  EC66  F010         	call	_CW90	;wreg free
  5767                           
  5768                           ;main.c: 151: LATC0 = 0;
  5769  0006DC  908B               	bcf	3979,0,c	;volatile
  5770                           
  5771                           ;main.c: 152: LATC1 = 0;
  5772  0006DE  928B               	bcf	3979,1,c	;volatile
  5773                           
  5774                           ;main.c: 153: LATC2 = 0;
  5775  0006E0  948B               	bcf	3979,2,c	;volatile
  5776                           
  5777                           ;main.c: 156: if (sorted[0] + sorted[1] + sorted[2] + sorted[3] >= 5) {
  5778  0006E2  505A               	movf	simulate@sorted+1,w,c
  5779  0006E4  C059  F039         	movff	simulate@sorted,??_simulate
  5780  0006E8  6A3A               	clrf	(??_simulate+1)& (0+255),c
  5781  0006EA  2639               	addwf	??_simulate,f,c
  5782  0006EC  0E00               	movlw	0
  5783  0006EE  223A               	addwfc	??_simulate+1,f,c
  5784  0006F0  505B               	movf	simulate@sorted+2,w,c
  5785  0006F2  2639               	addwf	??_simulate,f,c
  5786  0006F4  0E00               	movlw	0
  5787  0006F6  223A               	addwfc	??_simulate+1,f,c
  5788  0006F8  505C               	movf	simulate@sorted+3,w,c
  5789  0006FA  2639               	addwf	??_simulate,f,c
  5790  0006FC  0E00               	movlw	0
  5791  0006FE  223A               	addwfc	??_simulate+1,f,c
  5792  000700  BE3A               	btfsc	??_simulate+1,7,c
  5793  000702  D00A               	goto	i2l4294
  5794  000704  503A               	movf	??_simulate+1,w,c
  5795  000706  E104               	bnz	i2u313_40
  5796  000708  0E05               	movlw	5
  5797  00070A  5C39               	subwf	??_simulate,w,c
  5798  00070C  A0D8               	btfss	status,0,c
  5799  00070E  D004               	goto	i2l4294
  5800  000710                     i2u313_40:
  5801                           
  5802                           ;main.c: 157: stop = 1;
  5803  000710  0E00               	movlw	0
  5804  000712  6E4A               	movwf	simulate@stop+1,c
  5805  000714  0E01               	movlw	1
  5806  000716  6E49               	movwf	simulate@stop,c
  5807  000718                     i2l4294:
  5808                           
  5809                           ;main.c: 158: }
  5810                           ;main.c: 159: getTime(time);
  5811  000718  0E76               	movlw	low _time
  5812  00071A  6E04               	movwf	i2getTime@time,c
  5813  00071C  0E00               	movlw	high _time
  5814  00071E  6E05               	movwf	i2getTime@time+1,c
  5815  000720  EC45  F00E         	call	i2_getTime	;wreg free
  5816                           
  5817                           ;main.c: 160: now[0] = time[0];
  5818  000724  C076  F051         	movff	_time,simulate@now
  5819  000728  6A52               	clrf	simulate@now+1,c
  5820                           
  5821                           ;main.c: 161: now[1] = time[1];
  5822  00072A  C077  F053         	movff	_time+1,simulate@now+2
  5823  00072E  6A54               	clrf	simulate@now+3,c
  5824                           
  5825                           ;main.c: 162: lcdInst(0b10000000);;
  5826  000730  0E80               	movlw	128
  5827  000732  EC72  F011         	call	i2_lcdInst
  5828                           
  5829                           ;main.c: 163: printf("start %02x:%02x    ", start[1], start[0]);
  5830  000736  0EEC               	movlw	low STR_12
  5831  000738  6E0D               	movwf	i2printf@f,c
  5832  00073A  0EFE               	movlw	high STR_12
  5833  00073C  6E0E               	movwf	i2printf@f+1,c
  5834  00073E  C057  F00F         	movff	simulate@start+2,?i2_printf+2
  5835  000742  C058  F010         	movff	simulate@start+3,?i2_printf+3
  5836  000746  C055  F011         	movff	simulate@start,?i2_printf+4
  5837  00074A  C056  F012         	movff	simulate@start+1,?i2_printf+5
  5838  00074E  EC3D  F004         	call	i2_printf	;wreg free
  5839                           
  5840                           ;main.c: 164: __lcd_newline();
  5841  000752  EC96  F011         	call	i2___lcd_newline	;wreg free
  5842                           
  5843                           ;main.c: 165: printf("now %02x:%02x     ", now[1], now[0]);
  5844  000756  0E13               	movlw	low STR_13
  5845  000758  6E0D               	movwf	i2printf@f,c
  5846  00075A  0EFF               	movlw	high STR_13
  5847  00075C  6E0E               	movwf	i2printf@f+1,c
  5848  00075E  C053  F00F         	movff	simulate@now+2,?i2_printf+2
  5849  000762  C054  F010         	movff	simulate@now+3,?i2_printf+3
  5850  000766  C051  F011         	movff	simulate@now,?i2_printf+4
  5851  00076A  C052  F012         	movff	simulate@now+1,?i2_printf+5
  5852  00076E  EC3D  F004         	call	i2_printf	;wreg free
  5853                           
  5854                           ;main.c: 166: _delay((unsigned long)((700)*(8000000/4000.0)));
  5855  000772  0E08               	movlw	8
  5856  000774  6E3A               	movwf	(??_simulate+1)& (0+255),c
  5857  000776  0E1B               	movlw	27
  5858  000778  6E39               	movwf	??_simulate& (0+255),c
  5859  00077A  0E27               	movlw	39
  5860  00077C                     i2u336_47:
  5861  00077C  2EE8               	decfsz	wreg,f,c
  5862  00077E  D7FE               	bra	i2u336_47
  5863  000780  2E39               	decfsz	??_simulate& (0+255),f,c
  5864  000782  D7FC               	bra	i2u336_47
  5865  000784  2E3A               	decfsz	(??_simulate+1)& (0+255),f,c
  5866  000786  D7FA               	bra	i2u336_47
  5867  000788  F000               	nop	
  5868                           
  5869                           ;main.c: 168: period = (now[1] - start[1])*60 + now[0] - start[0];
  5870  00078A  C055  F039         	movff	simulate@start,??_simulate
  5871  00078E  C056  F03A         	movff	simulate@start+1,??_simulate+1
  5872  000792  1E39               	comf	??_simulate,f,c
  5873  000794  1E3A               	comf	??_simulate+1,f,c
  5874  000796  4A39               	infsnz	??_simulate,f,c
  5875  000798  2A3A               	incf	??_simulate+1,f,c
  5876  00079A  EE20  F057         	lfsr	2,simulate@start+2
  5877  00079E  CFDE F03B          	movff	postinc2,??_simulate+2
  5878  0007A2  CFDD F03C          	movff	postdec2,??_simulate+3
  5879  0007A6  1E3B               	comf	??_simulate+2,f,c
  5880  0007A8  1E3C               	comf	??_simulate+3,f,c
  5881  0007AA  4A3B               	infsnz	??_simulate+2,f,c
  5882  0007AC  2A3C               	incf	??_simulate+3,f,c
  5883  0007AE  5053               	movf	simulate@now+2,w,c
  5884  0007B0  243B               	addwf	??_simulate+2,w,c
  5885  0007B2  6E01               	movwf	i2___wmul@multiplier,c
  5886  0007B4  5054               	movf	simulate@now+3,w,c
  5887  0007B6  203C               	addwfc	??_simulate+3,w,c
  5888  0007B8  6E02               	movwf	i2___wmul@multiplier+1,c
  5889  0007BA  0E00               	movlw	0
  5890  0007BC  6E04               	movwf	i2___wmul@multiplicand+1,c
  5891  0007BE  0E3C               	movlw	60
  5892  0007C0  6E03               	movwf	i2___wmul@multiplicand,c
  5893  0007C2  ECE2  F010         	call	i2___wmul	;wreg free
  5894  0007C6  5039               	movf	??_simulate,w,c
  5895  0007C8  2601               	addwf	?i2___wmul,f,c
  5896  0007CA  503A               	movf	??_simulate+1,w,c
  5897  0007CC  2202               	addwfc	?i2___wmul+1,f,c
  5898  0007CE  5051               	movf	simulate@now,w,c
  5899  0007D0  2401               	addwf	?i2___wmul,w,c
  5900  0007D2  6E5D               	movwf	simulate@period,c
  5901  0007D4  5052               	movf	simulate@now+1,w,c
  5902  0007D6  2002               	addwfc	?i2___wmul+1,w,c
  5903  0007D8  6E5E               	movwf	simulate@period+1,c
  5904                           
  5905                           ;main.c: 169: lcdInst(0b10000000);;
  5906  0007DA  0E80               	movlw	128
  5907  0007DC  EC72  F011         	call	i2_lcdInst
  5908                           
  5909                           ;main.c: 170: printf("Period: %u", period);
  5910  0007E0  0EF4               	movlw	low STR_14
  5911  0007E2  6E0D               	movwf	i2printf@f,c
  5912  0007E4  0EFF               	movlw	high STR_14
  5913  0007E6  6E0E               	movwf	i2printf@f+1,c
  5914  0007E8  C05D  F00F         	movff	simulate@period,?i2_printf+2
  5915  0007EC  C05E  F010         	movff	simulate@period+1,?i2_printf+3
  5916  0007F0  EC3D  F004         	call	i2_printf	;wreg free
  5917                           
  5918                           ;main.c: 171: if (period > 60) {
  5919  0007F4  505E               	movf	simulate@period+1,w,c
  5920  0007F6  E104               	bnz	i2u314_40
  5921  0007F8  0E3D               	movlw	61
  5922  0007FA  5C5D               	subwf	simulate@period,w,c
  5923  0007FC  A0D8               	btfss	status,0,c
  5924  0007FE  D004               	goto	i2l4320
  5925  000800                     i2u314_40:
  5926                           
  5927                           ;main.c: 172: stop = 1;
  5928  000800  0E00               	movlw	0
  5929  000802  6E4A               	movwf	simulate@stop+1,c
  5930  000804  0E01               	movlw	1
  5931  000806  6E49               	movwf	simulate@stop,c
  5932  000808                     i2l4320:
  5933  000808  5049               	movf	simulate@stop,w,c
  5934  00080A  104A               	iorwf	simulate@stop+1,w,c
  5935  00080C  B4D8               	btfsc	status,2,c
  5936  00080E  D679               	goto	i2l4216
  5937                           
  5938                           ;main.c: 173: }
  5939                           ;main.c: 174: }
  5940                           ;main.c: 176: mode = 2;
  5941  000810  0E00               	movlw	0
  5942  000812  6E75               	movwf	_mode+1,c
  5943  000814  0E02               	movlw	2
  5944  000816  6E74               	movwf	_mode,c
  5945                           
  5946                           ;main.c: 177: stopMoving(0);
  5947  000818  0E00               	movlw	0
  5948  00081A  EC15  F00F         	call	_stopMoving
  5949                           
  5950                           ;main.c: 178: lcdInst(0b10000000);;
  5951  00081E  0E80               	movlw	128
  5952  000820  EC72  F011         	call	i2_lcdInst
  5953                           
  5954                           ;main.c: 179: printf("Sorting Complete          ");
  5955  000824  0E7F               	movlw	low STR_15
  5956  000826  6E0D               	movwf	i2printf@f,c
  5957  000828  0EFC               	movlw	high STR_15
  5958  00082A  6E0E               	movwf	i2printf@f+1,c
  5959  00082C  EC3D  F004         	call	i2_printf	;wreg free
  5960                           
  5961                           ;main.c: 180: _delay((unsigned long)((700)*(8000000/4000.0)));
  5962  000830  0E08               	movlw	8
  5963  000832  6E3A               	movwf	(??_simulate+1)& (0+255),c
  5964  000834  0E1B               	movlw	27
  5965  000836  6E39               	movwf	??_simulate& (0+255),c
  5966  000838  0E27               	movlw	39
  5967  00083A                     i2u337_47:
  5968  00083A  2EE8               	decfsz	wreg,f,c
  5969  00083C  D7FE               	bra	i2u337_47
  5970  00083E  2E39               	decfsz	??_simulate& (0+255),f,c
  5971  000840  D7FC               	bra	i2u337_47
  5972  000842  2E3A               	decfsz	(??_simulate+1)& (0+255),f,c
  5973  000844  D7FA               	bra	i2u337_47
  5974  000846  F000               	nop	
  5975                           
  5976                           ;main.c: 181: showInfo(period, sorted);
  5977  000848  C05D  F025         	movff	simulate@period,showInfo@time
  5978  00084C  C05E  F026         	movff	simulate@period+1,showInfo@time+1
  5979  000850  0E59               	movlw	low simulate@sorted
  5980  000852  6E27               	movwf	showInfo@sorted,c
  5981  000854  0E00               	movlw	high simulate@sorted
  5982  000856  6E28               	movwf	showInfo@sorted+1,c
  5983  000858  EC0A  F006         	call	_showInfo	;wreg free
  5984                           
  5985                           ;main.c: 182: WriteRun(sorted, period);
  5986  00085C  0E59               	movlw	low simulate@sorted
  5987  00085E  6E07               	movwf	WriteRun@sorted,c
  5988  000860  0E00               	movlw	high simulate@sorted
  5989  000862  6E08               	movwf	WriteRun@sorted+1,c
  5990  000864  C05D  F009         	movff	simulate@period,WriteRun@time
  5991  000868  C05E  F00A         	movff	simulate@period+1,WriteRun@time+1
  5992  00086C  EC1B  F007         	call	_WriteRun	;wreg free
  5993                           
  5994                           ;main.c: 183: mode = 0;
  5995  000870  0E00               	movlw	0
  5996  000872  6E75               	movwf	_mode+1,c
  5997  000874  0E00               	movlw	0
  5998  000876  6E74               	movwf	_mode,c
  5999  000878  0012               	return		;funcret
  6000  00087A                     __end_of_simulate:
  6001                           	opt stack 0
  6002                           pclatu	equ	0xFFB
  6003                           pclath	equ	0xFFA
  6004                           tblptru	equ	0xFF8
  6005                           tblptrh	equ	0xFF7
  6006                           tblptrl	equ	0xFF6
  6007                           tablat	equ	0xFF5
  6008                           prodh	equ	0xFF4
  6009                           prodl	equ	0xFF3
  6010                           intcon	equ	0xFF2
  6011                           intcon3	equ	0xFF0
  6012                           postinc0	equ	0xFEE
  6013                           fsr0h	equ	0xFEA
  6014                           fsr0l	equ	0xFE9
  6015                           wreg	equ	0xFE8
  6016                           plusw1	equ	0xFE3
  6017                           fsr1h	equ	0xFE2
  6018                           fsr1l	equ	0xFE1
  6019                           indf2	equ	0xFDF
  6020                           postinc2	equ	0xFDE
  6021                           postdec2	equ	0xFDD
  6022                           plusw2	equ	0xFDB
  6023                           fsr2h	equ	0xFDA
  6024                           fsr2l	equ	0xFD9
  6025                           status	equ	0xFD8
  6026                           
  6027 ;; *************** function i2_getTime *****************
  6028 ;; Defined at:
  6029 ;;		line 72 in file "modules.c"
  6030 ;; Parameters:    Size  Location     Type
  6031 ;;  time            2    3[COMRAM] PTR unsigned char 
  6032 ;;		 -> time(7), 
  6033 ;; Auto vars:     Size  Location     Type
  6034 ;;  getTime         1    5[COMRAM] unsigned char 
  6035 ;; Return value:  Size  Location     Type
  6036 ;;                  1    wreg      void 
  6037 ;; Registers used:
  6038 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6039 ;; Tracked objects:
  6040 ;;		On entry : 0/0
  6041 ;;		On exit  : 0/0
  6042 ;;		Unchanged: 0/0
  6043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6044 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6045 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6047 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6048 ;;Total ram usage:        3 bytes
  6049 ;; Hardware stack levels used:    1
  6050 ;; Hardware stack levels required when called:    2
  6051 ;; This function calls:
  6052 ;;		i2_I2C_Master_Read
  6053 ;;		i2_I2C_Master_Start
  6054 ;;		i2_I2C_Master_Stop
  6055 ;;		i2_I2C_Master_Write
  6056 ;; This function is called by:
  6057 ;;		_simulate
  6058 ;; This function uses a non-reentrant model
  6059 ;;
  6060                           
  6061                           	psect	text25
  6062  001C8A                     __ptext25:
  6063                           	opt stack 0
  6064  001C8A                     i2_getTime:
  6065                           	opt stack 22
  6066                           
  6067                           ;modules.c: 73: (INTCONbits.GIE = 0);
  6068                           
  6069                           ;incstack = 0
  6070  001C8A  9EF2               	bcf	intcon,7,c	;volatile
  6071                           
  6072                           ;modules.c: 77: I2C_Master_Start();
  6073  001C8C  EC92  F011         	call	i2_I2C_Master_Start	;wreg free
  6074                           
  6075                           ;modules.c: 78: I2C_Master_Write(0b11010000);
  6076  001C90  0E00               	movlw	0
  6077  001C92  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6078  001C94  0ED0               	movlw	208
  6079  001C96  6E02               	movwf	i2I2C_Master_Write@d,c
  6080  001C98  EC7D  F011         	call	i2_I2C_Master_Write	;wreg free
  6081                           
  6082                           ;modules.c: 79: I2C_Master_Write(0x00);
  6083  001C9C  0E00               	movlw	0
  6084  001C9E  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6085  001CA0  0E00               	movlw	0
  6086  001CA2  6E02               	movwf	i2I2C_Master_Write@d,c
  6087  001CA4  EC7D  F011         	call	i2_I2C_Master_Write	;wreg free
  6088                           
  6089                           ;modules.c: 80: I2C_Master_Stop();
  6090  001CA8  EC8E  F011         	call	i2_I2C_Master_Stop	;wreg free
  6091                           
  6092                           ;modules.c: 83: I2C_Master_Start();
  6093  001CAC  EC92  F011         	call	i2_I2C_Master_Start	;wreg free
  6094                           
  6095                           ;modules.c: 84: I2C_Master_Write(0b11010001);
  6096  001CB0  0E00               	movlw	0
  6097  001CB2  6E03               	movwf	i2I2C_Master_Write@d+1,c
  6098  001CB4  0ED1               	movlw	209
  6099  001CB6  6E02               	movwf	i2I2C_Master_Write@d,c
  6100  001CB8  EC7D  F011         	call	i2_I2C_Master_Write	;wreg free
  6101                           
  6102                           ;modules.c: 85: for (unsigned char i = 0; i < 0x06; i++) {
  6103  001CBC  0E00               	movlw	0
  6104  001CBE  6E06               	movwf	i2getTime@i,c
  6105  001CC0                     i2l4158:
  6106  001CC0  0E05               	movlw	5
  6107  001CC2  6406               	cpfsgt	i2getTime@i,c
  6108  001CC4  D001               	goto	i2l4162
  6109  001CC6  D00E               	goto	i2l4168
  6110  001CC8                     i2l4162:
  6111                           
  6112                           ;modules.c: 86: time[i] = I2C_Master_Read(1);
  6113  001CC8  5006               	movf	i2getTime@i,w,c
  6114  001CCA  0D01               	mullw	1
  6115  001CCC  50F3               	movf	prodl,w,c
  6116  001CCE  2404               	addwf	i2getTime@time,w,c
  6117  001CD0  6ED9               	movwf	fsr2l,c
  6118  001CD2  50F4               	movf	prodh,w,c
  6119  001CD4  2005               	addwfc	i2getTime@time+1,w,c
  6120  001CD6  6EDA               	movwf	fsr2h,c
  6121  001CD8  0E01               	movlw	1
  6122  001CDA  ECBC  F010         	call	i2_I2C_Master_Read
  6123  001CDE  6EDF               	movwf	indf2,c
  6124  001CE0  2A06               	incf	i2getTime@i,f,c
  6125  001CE2  D7EE               	goto	i2l4158
  6126  001CE4                     i2l4168:
  6127                           
  6128                           ;modules.c: 87: }
  6129                           ;modules.c: 88: time[6] = I2C_Master_Read(0);
  6130  001CE4  EE20 F006          	lfsr	2,6
  6131  001CE8  5004               	movf	i2getTime@time,w,c
  6132  001CEA  26D9               	addwf	fsr2l,f,c
  6133  001CEC  5005               	movf	i2getTime@time+1,w,c
  6134  001CEE  22DA               	addwfc	fsr2h,f,c
  6135  001CF0  0E00               	movlw	0
  6136  001CF2  ECBC  F010         	call	i2_I2C_Master_Read
  6137  001CF6  6EDF               	movwf	indf2,c
  6138                           
  6139                           ;modules.c: 89: I2C_Master_Stop();
  6140  001CF8  EC8E  F011         	call	i2_I2C_Master_Stop	;wreg free
  6141                           
  6142                           ;modules.c: 90: (INTCONbits.GIE = 1);
  6143  001CFC  8EF2               	bsf	intcon,7,c	;volatile
  6144  001CFE  0012               	return		;funcret
  6145  001D00                     __end_ofi2_getTime:
  6146                           	opt stack 0
  6147                           pclatu	equ	0xFFB
  6148                           pclath	equ	0xFFA
  6149                           tblptru	equ	0xFF8
  6150                           tblptrh	equ	0xFF7
  6151                           tblptrl	equ	0xFF6
  6152                           tablat	equ	0xFF5
  6153                           prodh	equ	0xFF4
  6154                           prodl	equ	0xFF3
  6155                           intcon	equ	0xFF2
  6156                           intcon3	equ	0xFF0
  6157                           postinc0	equ	0xFEE
  6158                           fsr0h	equ	0xFEA
  6159                           fsr0l	equ	0xFE9
  6160                           wreg	equ	0xFE8
  6161                           plusw1	equ	0xFE3
  6162                           fsr1h	equ	0xFE2
  6163                           fsr1l	equ	0xFE1
  6164                           indf2	equ	0xFDF
  6165                           postinc2	equ	0xFDE
  6166                           postdec2	equ	0xFDD
  6167                           plusw2	equ	0xFDB
  6168                           fsr2h	equ	0xFDA
  6169                           fsr2l	equ	0xFD9
  6170                           status	equ	0xFD8
  6171                           
  6172 ;; *************** function i2_I2C_Master_Write *****************
  6173 ;; Defined at:
  6174 ;;		line 42 in file "I2C.c"
  6175 ;; Parameters:    Size  Location     Type
  6176 ;;  d               2    1[COMRAM] unsigned int 
  6177 ;; Auto vars:     Size  Location     Type
  6178 ;;		None
  6179 ;; Return value:  Size  Location     Type
  6180 ;;                  1    wreg      void 
  6181 ;; Registers used:
  6182 ;;		wreg, status,2, status,0, cstack
  6183 ;; Tracked objects:
  6184 ;;		On entry : 0/0
  6185 ;;		On exit  : 0/0
  6186 ;;		Unchanged: 0/0
  6187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6188 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6191 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6192 ;;Total ram usage:        2 bytes
  6193 ;; Hardware stack levels used:    1
  6194 ;; Hardware stack levels required when called:    1
  6195 ;; This function calls:
  6196 ;;		i2_I2C_Master_Wait
  6197 ;; This function is called by:
  6198 ;;		i2_getTime
  6199 ;; This function uses a non-reentrant model
  6200 ;;
  6201                           
  6202                           	psect	text26
  6203  0022FA                     __ptext26:
  6204                           	opt stack 0
  6205  0022FA                     i2_I2C_Master_Write:
  6206                           	opt stack 22
  6207                           
  6208                           ;I2C.c: 43: I2C_Master_Wait();
  6209                           
  6210                           ;incstack = 0
  6211  0022FA  EC53  F011         	call	i2_I2C_Master_Wait	;wreg free
  6212                           
  6213                           ;I2C.c: 44: SSPBUF = d;
  6214  0022FE  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
  6215  002302  0012               	return		;funcret
  6216  002304                     __end_ofi2_I2C_Master_Write:
  6217                           	opt stack 0
  6218                           pclatu	equ	0xFFB
  6219                           pclath	equ	0xFFA
  6220                           tblptru	equ	0xFF8
  6221                           tblptrh	equ	0xFF7
  6222                           tblptrl	equ	0xFF6
  6223                           tablat	equ	0xFF5
  6224                           prodh	equ	0xFF4
  6225                           prodl	equ	0xFF3
  6226                           intcon	equ	0xFF2
  6227                           intcon3	equ	0xFF0
  6228                           postinc0	equ	0xFEE
  6229                           fsr0h	equ	0xFEA
  6230                           fsr0l	equ	0xFE9
  6231                           wreg	equ	0xFE8
  6232                           plusw1	equ	0xFE3
  6233                           fsr1h	equ	0xFE2
  6234                           fsr1l	equ	0xFE1
  6235                           indf2	equ	0xFDF
  6236                           postinc2	equ	0xFDE
  6237                           postdec2	equ	0xFDD
  6238                           plusw2	equ	0xFDB
  6239                           fsr2h	equ	0xFDA
  6240                           fsr2l	equ	0xFD9
  6241                           status	equ	0xFD8
  6242                           
  6243 ;; *************** function i2_I2C_Master_Stop *****************
  6244 ;; Defined at:
  6245 ;;		line 37 in file "I2C.c"
  6246 ;; Parameters:    Size  Location     Type
  6247 ;;		None
  6248 ;; Auto vars:     Size  Location     Type
  6249 ;;		None
  6250 ;; Return value:  Size  Location     Type
  6251 ;;                  1    wreg      void 
  6252 ;; Registers used:
  6253 ;;		wreg, status,2, status,0, cstack
  6254 ;; Tracked objects:
  6255 ;;		On entry : 0/0
  6256 ;;		On exit  : 0/0
  6257 ;;		Unchanged: 0/0
  6258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6262 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6263 ;;Total ram usage:        0 bytes
  6264 ;; Hardware stack levels used:    1
  6265 ;; Hardware stack levels required when called:    1
  6266 ;; This function calls:
  6267 ;;		i2_I2C_Master_Wait
  6268 ;; This function is called by:
  6269 ;;		i2_getTime
  6270 ;; This function uses a non-reentrant model
  6271 ;;
  6272                           
  6273                           	psect	text27
  6274  00231C                     __ptext27:
  6275                           	opt stack 0
  6276  00231C                     i2_I2C_Master_Stop:
  6277                           	opt stack 22
  6278                           
  6279                           ;I2C.c: 38: I2C_Master_Wait();
  6280                           
  6281                           ;incstack = 0
  6282  00231C  EC53  F011         	call	i2_I2C_Master_Wait	;wreg free
  6283                           
  6284                           ;I2C.c: 39: PEN = 1;
  6285  002320  84C5               	bsf	4037,2,c	;volatile
  6286  002322  0012               	return		;funcret
  6287  002324                     __end_ofi2_I2C_Master_Stop:
  6288                           	opt stack 0
  6289                           pclatu	equ	0xFFB
  6290                           pclath	equ	0xFFA
  6291                           tblptru	equ	0xFF8
  6292                           tblptrh	equ	0xFF7
  6293                           tblptrl	equ	0xFF6
  6294                           tablat	equ	0xFF5
  6295                           prodh	equ	0xFF4
  6296                           prodl	equ	0xFF3
  6297                           intcon	equ	0xFF2
  6298                           intcon3	equ	0xFF0
  6299                           postinc0	equ	0xFEE
  6300                           fsr0h	equ	0xFEA
  6301                           fsr0l	equ	0xFE9
  6302                           wreg	equ	0xFE8
  6303                           plusw1	equ	0xFE3
  6304                           fsr1h	equ	0xFE2
  6305                           fsr1l	equ	0xFE1
  6306                           indf2	equ	0xFDF
  6307                           postinc2	equ	0xFDE
  6308                           postdec2	equ	0xFDD
  6309                           plusw2	equ	0xFDB
  6310                           fsr2h	equ	0xFDA
  6311                           fsr2l	equ	0xFD9
  6312                           status	equ	0xFD8
  6313                           
  6314 ;; *************** function i2_I2C_Master_Start *****************
  6315 ;; Defined at:
  6316 ;;		line 27 in file "I2C.c"
  6317 ;; Parameters:    Size  Location     Type
  6318 ;;		None
  6319 ;; Auto vars:     Size  Location     Type
  6320 ;;		None
  6321 ;; Return value:  Size  Location     Type
  6322 ;;                  1    wreg      void 
  6323 ;; Registers used:
  6324 ;;		wreg, status,2, status,0, cstack
  6325 ;; Tracked objects:
  6326 ;;		On entry : 0/0
  6327 ;;		On exit  : 0/0
  6328 ;;		Unchanged: 0/0
  6329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6333 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6334 ;;Total ram usage:        0 bytes
  6335 ;; Hardware stack levels used:    1
  6336 ;; Hardware stack levels required when called:    1
  6337 ;; This function calls:
  6338 ;;		i2_I2C_Master_Wait
  6339 ;; This function is called by:
  6340 ;;		i2_getTime
  6341 ;; This function uses a non-reentrant model
  6342 ;;
  6343                           
  6344                           	psect	text28
  6345  002324                     __ptext28:
  6346                           	opt stack 0
  6347  002324                     i2_I2C_Master_Start:
  6348                           	opt stack 22
  6349                           
  6350                           ;I2C.c: 28: I2C_Master_Wait();
  6351                           
  6352                           ;incstack = 0
  6353  002324  EC53  F011         	call	i2_I2C_Master_Wait	;wreg free
  6354                           
  6355                           ;I2C.c: 29: SEN = 1;
  6356  002328  80C5               	bsf	4037,0,c	;volatile
  6357  00232A  0012               	return		;funcret
  6358  00232C                     __end_ofi2_I2C_Master_Start:
  6359                           	opt stack 0
  6360                           pclatu	equ	0xFFB
  6361                           pclath	equ	0xFFA
  6362                           tblptru	equ	0xFF8
  6363                           tblptrh	equ	0xFF7
  6364                           tblptrl	equ	0xFF6
  6365                           tablat	equ	0xFF5
  6366                           prodh	equ	0xFF4
  6367                           prodl	equ	0xFF3
  6368                           intcon	equ	0xFF2
  6369                           intcon3	equ	0xFF0
  6370                           postinc0	equ	0xFEE
  6371                           fsr0h	equ	0xFEA
  6372                           fsr0l	equ	0xFE9
  6373                           wreg	equ	0xFE8
  6374                           plusw1	equ	0xFE3
  6375                           fsr1h	equ	0xFE2
  6376                           fsr1l	equ	0xFE1
  6377                           indf2	equ	0xFDF
  6378                           postinc2	equ	0xFDE
  6379                           postdec2	equ	0xFDD
  6380                           plusw2	equ	0xFDB
  6381                           fsr2h	equ	0xFDA
  6382                           fsr2l	equ	0xFD9
  6383                           status	equ	0xFD8
  6384                           
  6385 ;; *************** function i2_I2C_Master_Read *****************
  6386 ;; Defined at:
  6387 ;;		line 47 in file "I2C.c"
  6388 ;; Parameters:    Size  Location     Type
  6389 ;;  a               1    wreg     unsigned char 
  6390 ;; Auto vars:     Size  Location     Type
  6391 ;;  a               1    1[COMRAM] unsigned char 
  6392 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
  6393 ;; Return value:  Size  Location     Type
  6394 ;;                  1    wreg      unsigned char 
  6395 ;; Registers used:
  6396 ;;		wreg, status,2, status,0, cstack
  6397 ;; Tracked objects:
  6398 ;;		On entry : 0/0
  6399 ;;		On exit  : 0/0
  6400 ;;		Unchanged: 0/0
  6401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6403 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6405 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6406 ;;Total ram usage:        2 bytes
  6407 ;; Hardware stack levels used:    1
  6408 ;; Hardware stack levels required when called:    1
  6409 ;; This function calls:
  6410 ;;		i2_I2C_Master_Wait
  6411 ;; This function is called by:
  6412 ;;		i2_getTime
  6413 ;; This function uses a non-reentrant model
  6414 ;;
  6415                           
  6416                           	psect	text29
  6417  002178                     __ptext29:
  6418                           	opt stack 0
  6419  002178                     i2_I2C_Master_Read:
  6420                           	opt stack 22
  6421                           
  6422                           ;incstack = 0
  6423                           ;i2I2C_Master_Read@a stored from wreg
  6424  002178  6E02               	movwf	i2I2C_Master_Read@a,c
  6425                           
  6426                           ;I2C.c: 48: unsigned char temp;
  6427                           ;I2C.c: 49: I2C_Master_Wait();
  6428  00217A  EC53  F011         	call	i2_I2C_Master_Wait	;wreg free
  6429                           
  6430                           ;I2C.c: 50: RCEN = 1;
  6431  00217E  86C5               	bsf	4037,3,c	;volatile
  6432                           
  6433                           ;I2C.c: 51: I2C_Master_Wait();
  6434  002180  EC53  F011         	call	i2_I2C_Master_Wait	;wreg free
  6435                           
  6436                           ;I2C.c: 52: temp = SSPBUF;
  6437  002184  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
  6438                           
  6439                           ;I2C.c: 53: I2C_Master_Wait();
  6440  002188  EC53  F011         	call	i2_I2C_Master_Wait	;wreg free
  6441                           
  6442                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
  6443  00218C  5002               	movf	i2I2C_Master_Read@a,w,c
  6444  00218E  A4D8               	btfss	status,2,c
  6445  002190  D002               	goto	i2u264_40
  6446  002192  8AC5               	bsf	4037,5,c	;volatile
  6447  002194  D001               	goto	i2l3644
  6448  002196                     i2u264_40:
  6449  002196  9AC5               	bcf	4037,5,c	;volatile
  6450  002198                     i2l3644:
  6451                           
  6452                           ;I2C.c: 55: ACKEN = 1;
  6453  002198  88C5               	bsf	4037,4,c	;volatile
  6454                           
  6455                           ;I2C.c: 56: return temp;
  6456  00219A  5003               	movf	i2I2C_Master_Read@temp,w,c
  6457  00219C  0012               	return	
  6458  00219E                     __end_ofi2_I2C_Master_Read:
  6459                           	opt stack 0
  6460                           pclatu	equ	0xFFB
  6461                           pclath	equ	0xFFA
  6462                           tblptru	equ	0xFF8
  6463                           tblptrh	equ	0xFF7
  6464                           tblptrl	equ	0xFF6
  6465                           tablat	equ	0xFF5
  6466                           prodh	equ	0xFF4
  6467                           prodl	equ	0xFF3
  6468                           intcon	equ	0xFF2
  6469                           intcon3	equ	0xFF0
  6470                           postinc0	equ	0xFEE
  6471                           fsr0h	equ	0xFEA
  6472                           fsr0l	equ	0xFE9
  6473                           wreg	equ	0xFE8
  6474                           plusw1	equ	0xFE3
  6475                           fsr1h	equ	0xFE2
  6476                           fsr1l	equ	0xFE1
  6477                           indf2	equ	0xFDF
  6478                           postinc2	equ	0xFDE
  6479                           postdec2	equ	0xFDD
  6480                           plusw2	equ	0xFDB
  6481                           fsr2h	equ	0xFDA
  6482                           fsr2l	equ	0xFD9
  6483                           status	equ	0xFD8
  6484                           
  6485 ;; *************** function i2_I2C_Master_Wait *****************
  6486 ;; Defined at:
  6487 ;;		line 23 in file "I2C.c"
  6488 ;; Parameters:    Size  Location     Type
  6489 ;;		None
  6490 ;; Auto vars:     Size  Location     Type
  6491 ;;		None
  6492 ;; Return value:  Size  Location     Type
  6493 ;;                  1    wreg      void 
  6494 ;; Registers used:
  6495 ;;		wreg, status,2, status,0
  6496 ;; Tracked objects:
  6497 ;;		On entry : 0/0
  6498 ;;		On exit  : 0/0
  6499 ;;		Unchanged: 0/0
  6500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6503 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6504 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6505 ;;Total ram usage:        1 bytes
  6506 ;; Hardware stack levels used:    1
  6507 ;; This function calls:
  6508 ;;		Nothing
  6509 ;; This function is called by:
  6510 ;;		i2_I2C_Master_Start
  6511 ;;		i2_I2C_Master_Stop
  6512 ;;		i2_I2C_Master_Write
  6513 ;;		i2_I2C_Master_Read
  6514 ;; This function uses a non-reentrant model
  6515 ;;
  6516                           
  6517                           	psect	text30
  6518  0022A6                     __ptext30:
  6519                           	opt stack 0
  6520  0022A6                     i2_I2C_Master_Wait:
  6521                           	opt stack 22
  6522  0022A6                     i2l363:
  6523  0022A6  B4C7               	btfsc	4039,2,c	;volatile
  6524  0022A8  D7FE               	goto	i2l363
  6525  0022AA  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
  6526  0022AE  0E1F               	movlw	31
  6527  0022B0  1601               	andwf	??i2_I2C_Master_Wait,f,c
  6528  0022B2  B4D8               	btfsc	status,2,c
  6529  0022B4  0012               	return	
  6530  0022B6  D7F7               	goto	i2l363
  6531  0022B8                     __end_ofi2_I2C_Master_Wait:
  6532                           	opt stack 0
  6533                           pclatu	equ	0xFFB
  6534                           pclath	equ	0xFFA
  6535                           tblptru	equ	0xFF8
  6536                           tblptrh	equ	0xFF7
  6537                           tblptrl	equ	0xFF6
  6538                           tablat	equ	0xFF5
  6539                           prodh	equ	0xFF4
  6540                           prodl	equ	0xFF3
  6541                           intcon	equ	0xFF2
  6542                           intcon3	equ	0xFF0
  6543                           postinc0	equ	0xFEE
  6544                           fsr0h	equ	0xFEA
  6545                           fsr0l	equ	0xFE9
  6546                           wreg	equ	0xFE8
  6547                           plusw1	equ	0xFE3
  6548                           fsr1h	equ	0xFE2
  6549                           fsr1l	equ	0xFE1
  6550                           indf2	equ	0xFDF
  6551                           postinc2	equ	0xFDE
  6552                           postdec2	equ	0xFDD
  6553                           plusw2	equ	0xFDB
  6554                           fsr2h	equ	0xFDA
  6555                           fsr2l	equ	0xFD9
  6556                           status	equ	0xFD8
  6557                           
  6558 ;; *************** function _stopMoving *****************
  6559 ;; Defined at:
  6560 ;;		line 33 in file "motors.c"
  6561 ;; Parameters:    Size  Location     Type
  6562 ;;  em              1    wreg     unsigned char 
  6563 ;; Auto vars:     Size  Location     Type
  6564 ;;  em              1   39[COMRAM] unsigned char 
  6565 ;;  i               1   40[COMRAM] unsigned char 
  6566 ;; Return value:  Size  Location     Type
  6567 ;;                  1    wreg      void 
  6568 ;; Registers used:
  6569 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6570 ;; Tracked objects:
  6571 ;;		On entry : 0/0
  6572 ;;		On exit  : 0/0
  6573 ;;		Unchanged: 0/0
  6574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6576 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6577 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6578 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6579 ;;Total ram usage:        5 bytes
  6580 ;; Hardware stack levels used:    1
  6581 ;; Hardware stack levels required when called:    3
  6582 ;; This function calls:
  6583 ;;		i2_lcdInst
  6584 ;;		i2_printf
  6585 ;; This function is called by:
  6586 ;;		_simulate
  6587 ;;		_keypressed
  6588 ;;		_mainloop
  6589 ;; This function uses a non-reentrant model
  6590 ;;
  6591                           
  6592                           	psect	text31
  6593  001E2A                     __ptext31:
  6594                           	opt stack 0
  6595  001E2A                     _stopMoving:
  6596                           	opt stack 22
  6597                           
  6598                           ;incstack = 0
  6599                           ;stopMoving@em stored from wreg
  6600  001E2A  6E28               	movwf	stopMoving@em,c
  6601                           
  6602                           ;motors.c: 34: (INTCONbits.GIE = 0);
  6603  001E2C  9EF2               	bcf	intcon,7,c	;volatile
  6604                           
  6605                           ;motors.c: 35: lcdInst(0b10000000);;
  6606  001E2E  0E80               	movlw	128
  6607  001E30  EC72  F011         	call	i2_lcdInst
  6608                           
  6609                           ;motors.c: 36: LATC = 0;
  6610  001E34  0E00               	movlw	0
  6611  001E36  6E8B               	movwf	3979,c	;volatile
  6612                           
  6613                           ;motors.c: 37: printf(em ? "Emergency          " : "Stopped          ");
  6614  001E38  5028               	movf	stopMoving@em,w,c
  6615  001E3A  A4D8               	btfss	status,2,c
  6616  001E3C  D004               	goto	i2l3990
  6617  001E3E  0E26               	movlw	low STR_36
  6618  001E40  6E26               	movwf	_stopMoving$546,c
  6619  001E42  0EFF               	movlw	high STR_36
  6620  001E44  D003               	goto	L1
  6621  001E46                     i2l3990:
  6622  001E46  0E9C               	movlw	low STR_35
  6623  001E48  6E26               	movwf	_stopMoving$546,c
  6624  001E4A  0EFE               	movlw	high STR_35
  6625  001E4C                     L1:
  6626  001E4C  6E27               	movwf	_stopMoving$546+1,c
  6627  001E4E  C026  F00D         	movff	_stopMoving$546,i2printf@f
  6628  001E52  C027  F00E         	movff	_stopMoving$546+1,i2printf@f+1
  6629  001E56  EC3D  F004         	call	i2_printf	;wreg free
  6630                           
  6631                           ;motors.c: 38: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(8000000/4000.0)));};
  6632  001E5A  0E00               	movlw	0
  6633  001E5C  6E29               	movwf	stopMoving@i,c
  6634  001E5E                     i2l3996:
  6635  001E5E  0E09               	movlw	9
  6636  001E60  6429               	cpfsgt	stopMoving@i,c
  6637  001E62  D001               	goto	i2l4000
  6638  001E64  D00A               	goto	i2l4004
  6639  001E66                     i2l4000:
  6640  001E66  0EFF               	movlw	255
  6641  001E68  6E25               	movwf	??_stopMoving& (0+255),c
  6642  001E6A  0E8A               	movlw	138
  6643  001E6C                     i2u338_47:
  6644  001E6C  2EE8               	decfsz	wreg,f,c
  6645  001E6E  D7FE               	bra	i2u338_47
  6646  001E70  2E25               	decfsz	??_stopMoving& (0+255),f,c
  6647  001E72  D7FC               	bra	i2u338_47
  6648  001E74  D000               	nop2	
  6649  001E76  2A29               	incf	stopMoving@i,f,c
  6650  001E78  D7F2               	goto	i2l3996
  6651  001E7A                     i2l4004:
  6652                           
  6653                           ;motors.c: 39: if (em)
  6654  001E7A  5028               	movf	stopMoving@em,w,c
  6655  001E7C  B4D8               	btfsc	status,2,c
  6656  001E7E  0012               	return	
  6657  001E80                     i2l270:
  6658  001E80  D7FF               	goto	i2l270
  6659  001E82                     __end_of_stopMoving:
  6660                           	opt stack 0
  6661                           pclatu	equ	0xFFB
  6662                           pclath	equ	0xFFA
  6663                           tblptru	equ	0xFF8
  6664                           tblptrh	equ	0xFF7
  6665                           tblptrl	equ	0xFF6
  6666                           tablat	equ	0xFF5
  6667                           prodh	equ	0xFF4
  6668                           prodl	equ	0xFF3
  6669                           intcon	equ	0xFF2
  6670                           intcon3	equ	0xFF0
  6671                           postinc0	equ	0xFEE
  6672                           fsr0h	equ	0xFEA
  6673                           fsr0l	equ	0xFE9
  6674                           wreg	equ	0xFE8
  6675                           plusw1	equ	0xFE3
  6676                           fsr1h	equ	0xFE2
  6677                           fsr1l	equ	0xFE1
  6678                           indf2	equ	0xFDF
  6679                           postinc2	equ	0xFDE
  6680                           postdec2	equ	0xFDD
  6681                           plusw2	equ	0xFDB
  6682                           fsr2h	equ	0xFDA
  6683                           fsr2l	equ	0xFD9
  6684                           status	equ	0xFD8
  6685                           
  6686 ;; *************** function _checkC *****************
  6687 ;; Defined at:
  6688 ;;		line 51 in file "sensors.c"
  6689 ;; Parameters:    Size  Location     Type
  6690 ;;  sorted          2   54[COMRAM] PTR unsigned char 
  6691 ;;		 -> simulate@sorted(4), mainloop@sorted(4), 
  6692 ;; Auto vars:     Size  Location     Type
  6693 ;;		None
  6694 ;; Return value:  Size  Location     Type
  6695 ;;                  2   54[COMRAM] int 
  6696 ;; Registers used:
  6697 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6698 ;; Tracked objects:
  6699 ;;		On entry : 0/0
  6700 ;;		On exit  : 0/0
  6701 ;;		Unchanged: 0/0
  6702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6703 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6706 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6707 ;;Total ram usage:        2 bytes
  6708 ;; Hardware stack levels used:    1
  6709 ;; Hardware stack levels required when called:    4
  6710 ;; This function calls:
  6711 ;;		_AD
  6712 ;;		_checkV
  6713 ;;		i2___lcd_newline
  6714 ;;		i2_lcdInst
  6715 ;;		i2_printf
  6716 ;; This function is called by:
  6717 ;;		_simulate
  6718 ;;		_mainloop
  6719 ;; This function uses a non-reentrant model
  6720 ;;
  6721                           
  6722                           	psect	text32
  6723  001548                     __ptext32:
  6724                           	opt stack 0
  6725  001548                     _checkC:
  6726                           	opt stack 20
  6727                           
  6728                           ;sensors.c: 53: lcdInst(0b10000000);;
  6729                           
  6730                           ;incstack = 0
  6731  001548  0E80               	movlw	128
  6732  00154A  EC72  F011         	call	i2_lcdInst
  6733                           
  6734                           ;sensors.c: 54: printf("C:          ");
  6735  00154E  0EC4               	movlw	low STR_42
  6736  001550  6E0D               	movwf	i2printf@f,c
  6737  001552  0EFF               	movlw	high STR_42
  6738  001554  6E0E               	movwf	i2printf@f+1,c
  6739  001556  EC3D  F004         	call	i2_printf	;wreg free
  6740                           
  6741                           ;sensors.c: 55: __lcd_newline();
  6742  00155A  EC96  F011         	call	i2___lcd_newline	;wreg free
  6743                           
  6744                           ;sensors.c: 56: switch (checkV(AD(1), 1.5)) {
  6745  00155E  D032               	goto	i2l3926
  6746  001560                     i2l3898:
  6747                           
  6748                           ;sensors.c: 58: printf("charged C          ");
  6749  001560  0E8A               	movlw	low (STR_44+2)
  6750  001562  6E0D               	movwf	i2printf@f,c
  6751  001564  0EFD               	movlw	high (STR_44+2)
  6752  001566  6E0E               	movwf	i2printf@f+1,c
  6753  001568  EC3D  F004         	call	i2_printf	;wreg free
  6754                           
  6755                           ;sensors.c: 59: sorted[1]++;
  6756  00156C  EE20 F001          	lfsr	2,1
  6757  001570  5037               	movf	checkC@sorted,w,c
  6758  001572  26D9               	addwf	fsr2l,f,c
  6759  001574  5038               	movf	checkC@sorted+1,w,c
  6760  001576  22DA               	addwfc	fsr2h,f,c
  6761  001578  2ADF               	incf	indf2,f,c
  6762                           
  6763                           ;sensors.c: 60: return 1;
  6764  00157A  0E00               	movlw	0
  6765  00157C  6E38               	movwf	?_checkC+1,c
  6766  00157E  0E01               	movlw	1
  6767  001580  6E37               	movwf	?_checkC,c
  6768  001582  0012               	return	
  6769  001584                     i2l3906:
  6770                           
  6771                           ;sensors.c: 62: printf("uncharged C          ");
  6772  001584  0E88               	movlw	low STR_44
  6773  001586  6E0D               	movwf	i2printf@f,c
  6774  001588  0EFD               	movlw	high STR_44
  6775  00158A  6E0E               	movwf	i2printf@f+1,c
  6776  00158C  EC3D  F004         	call	i2_printf	;wreg free
  6777                           
  6778                           ;sensors.c: 63: sorted[3]++;
  6779  001590  EE20 F003          	lfsr	2,3
  6780  001594  5037               	movf	checkC@sorted,w,c
  6781  001596  26D9               	addwf	fsr2l,f,c
  6782  001598  5038               	movf	checkC@sorted+1,w,c
  6783  00159A  22DA               	addwfc	fsr2h,f,c
  6784  00159C  2ADF               	incf	indf2,f,c
  6785                           
  6786                           ;sensors.c: 64: return 0;
  6787  00159E  0E00               	movlw	0
  6788  0015A0  6E38               	movwf	?_checkC+1,c
  6789  0015A2  0E00               	movlw	0
  6790  0015A4  6E37               	movwf	?_checkC,c
  6791  0015A6  0012               	return	
  6792  0015A8                     i2l3914:
  6793                           
  6794                           ;sensors.c: 66: printf("no C          ");
  6795  0015A8  0E99               	movlw	low STR_45
  6796  0015AA  6E0D               	movwf	i2printf@f,c
  6797  0015AC  0EFF               	movlw	high STR_45
  6798  0015AE  6E0E               	movwf	i2printf@f+1,c
  6799  0015B0  EC3D  F004         	call	i2_printf	;wreg free
  6800                           
  6801                           ;sensors.c: 67: return -1;
  6802  0015B4  6837               	setf	?_checkC,c
  6803  0015B6  6838               	setf	?_checkC+1,c
  6804  0015B8  0012               	return	
  6805  0015BA                     i2l3920:
  6806                           
  6807                           ;sensors.c: 69: return 0;
  6808  0015BA  0E00               	movlw	0
  6809  0015BC  6E38               	movwf	?_checkC+1,c
  6810  0015BE  0E00               	movlw	0
  6811  0015C0  6E37               	movwf	?_checkC,c
  6812                           
  6813                           ;sensors.c: 70: }
  6814  0015C2  0012               	return	
  6815  0015C4                     i2l3926:
  6816  0015C4  0E01               	movlw	1
  6817  0015C6  ECFA  F00F         	call	_AD
  6818  0015CA  C001  F030         	movff	?_AD,checkV@voltage
  6819  0015CE  C002  F031         	movff	?_AD+1,checkV@voltage+1
  6820  0015D2  0E00               	movlw	0
  6821  0015D4  6E32               	movwf	checkV@max,c
  6822  0015D6  0EC0               	movlw	192
  6823  0015D8  6E33               	movwf	checkV@max+1,c
  6824  0015DA  0E3F               	movlw	63
  6825  0015DC  6E34               	movwf	checkV@max+2,c
  6826  0015DE  EC41  F00A         	call	_checkV	;wreg free
  6827                           
  6828                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  6829                           ; Switch size 1, requested type "space"
  6830                           ; Number of cases is 2, Range of values is 0 to 255
  6831                           ; switch strategies available:
  6832                           ; Name         Instructions Cycles
  6833                           ; simple_byte            7     4 (average)
  6834                           ;	Chosen strategy is simple_byte
  6835  0015E2  5031               	movf	?_checkV+1,w,c
  6836  0015E4  0A00               	xorlw	0	; case 0
  6837  0015E6  B4D8               	btfsc	status,2,c
  6838  0015E8  D004               	goto	i2l4614
  6839  0015EA  0AFF               	xorlw	255	; case 255
  6840  0015EC  B4D8               	btfsc	status,2,c
  6841  0015EE  D009               	goto	i2l4616
  6842  0015F0  D7E4               	goto	i2l3920
  6843  0015F2                     i2l4614:
  6844                           
  6845                           ; Switch size 1, requested type "space"
  6846                           ; Number of cases is 2, Range of values is 0 to 1
  6847                           ; switch strategies available:
  6848                           ; Name         Instructions Cycles
  6849                           ; simple_byte            7     4 (average)
  6850                           ;	Chosen strategy is simple_byte
  6851  0015F2  5030               	movf	?_checkV,w,c
  6852  0015F4  0A00               	xorlw	0	; case 0
  6853  0015F6  B4D8               	btfsc	status,2,c
  6854  0015F8  D7D7               	goto	i2l3914
  6855  0015FA  0A01               	xorlw	1	; case 1
  6856  0015FC  B4D8               	btfsc	status,2,c
  6857  0015FE  D7B0               	goto	i2l3898
  6858  001600  D7DC               	goto	i2l3920
  6859  001602                     i2l4616:
  6860                           
  6861                           ; Switch size 1, requested type "space"
  6862                           ; Number of cases is 1, Range of values is 255 to 255
  6863                           ; switch strategies available:
  6864                           ; Name         Instructions Cycles
  6865                           ; simple_byte            4     3 (average)
  6866                           ;	Chosen strategy is simple_byte
  6867  001602  5030               	movf	?_checkV,w,c
  6868  001604  0AFF               	xorlw	255	; case 255
  6869  001606  B4D8               	btfsc	status,2,c
  6870  001608  D7BD               	goto	i2l3906
  6871  00160A  D7D7               	goto	i2l3920
  6872  00160C                     __end_of_checkC:
  6873                           	opt stack 0
  6874                           pclatu	equ	0xFFB
  6875                           pclath	equ	0xFFA
  6876                           tblptru	equ	0xFF8
  6877                           tblptrh	equ	0xFF7
  6878                           tblptrl	equ	0xFF6
  6879                           tablat	equ	0xFF5
  6880                           prodh	equ	0xFF4
  6881                           prodl	equ	0xFF3
  6882                           intcon	equ	0xFF2
  6883                           intcon3	equ	0xFF0
  6884                           postinc0	equ	0xFEE
  6885                           fsr0h	equ	0xFEA
  6886                           fsr0l	equ	0xFE9
  6887                           wreg	equ	0xFE8
  6888                           plusw1	equ	0xFE3
  6889                           fsr1h	equ	0xFE2
  6890                           fsr1l	equ	0xFE1
  6891                           indf2	equ	0xFDF
  6892                           postinc2	equ	0xFDE
  6893                           postdec2	equ	0xFDD
  6894                           plusw2	equ	0xFDB
  6895                           fsr2h	equ	0xFDA
  6896                           fsr2l	equ	0xFD9
  6897                           status	equ	0xFD8
  6898                           
  6899 ;; *************** function _checkAA *****************
  6900 ;; Defined at:
  6901 ;;		line 29 in file "sensors.c"
  6902 ;; Parameters:    Size  Location     Type
  6903 ;;  sorted          2   54[COMRAM] PTR unsigned char 
  6904 ;;		 -> simulate@sorted(4), mainloop@sorted(4), 
  6905 ;; Auto vars:     Size  Location     Type
  6906 ;;		None
  6907 ;; Return value:  Size  Location     Type
  6908 ;;                  2   54[COMRAM] int 
  6909 ;; Registers used:
  6910 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6911 ;; Tracked objects:
  6912 ;;		On entry : 0/0
  6913 ;;		On exit  : 0/0
  6914 ;;		Unchanged: 0/0
  6915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6916 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6919 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6920 ;;Total ram usage:        2 bytes
  6921 ;; Hardware stack levels used:    1
  6922 ;; Hardware stack levels required when called:    4
  6923 ;; This function calls:
  6924 ;;		_AD
  6925 ;;		_checkV
  6926 ;;		i2___lcd_newline
  6927 ;;		i2_lcdInst
  6928 ;;		i2_printf
  6929 ;; This function is called by:
  6930 ;;		_simulate
  6931 ;;		_mainloop
  6932 ;; This function uses a non-reentrant model
  6933 ;;
  6934                           
  6935                           	psect	text33
  6936  0016D0                     __ptext33:
  6937                           	opt stack 0
  6938  0016D0                     _checkAA:
  6939                           	opt stack 20
  6940                           
  6941                           ;sensors.c: 31: lcdInst(0b10000000);;
  6942                           
  6943                           ;incstack = 0
  6944  0016D0  0E80               	movlw	128
  6945  0016D2  EC72  F011         	call	i2_lcdInst
  6946                           
  6947                           ;sensors.c: 32: printf("AA:          ");
  6948  0016D6  0EA8               	movlw	low STR_38
  6949  0016D8  6E0D               	movwf	i2printf@f,c
  6950  0016DA  0EFF               	movlw	high STR_38
  6951  0016DC  6E0E               	movwf	i2printf@f+1,c
  6952  0016DE  EC3D  F004         	call	i2_printf	;wreg free
  6953                           
  6954                           ;sensors.c: 33: __lcd_newline();
  6955  0016E2  EC96  F011         	call	i2___lcd_newline	;wreg free
  6956                           
  6957                           ;sensors.c: 34: switch (checkV(AD(0), 1.5)) {
  6958  0016E6  D030               	goto	i2l3882
  6959  0016E8                     i2l3854:
  6960                           
  6961                           ;sensors.c: 36: printf("charged AA          ");
  6962  0016E8  0E45               	movlw	low (STR_40+2)
  6963  0016EA  6E0D               	movwf	i2printf@f,c
  6964  0016EC  0EFD               	movlw	high (STR_40+2)
  6965  0016EE  6E0E               	movwf	i2printf@f+1,c
  6966  0016F0  EC3D  F004         	call	i2_printf	;wreg free
  6967                           
  6968                           ;sensors.c: 37: sorted[0]++;
  6969  0016F4  C037  FFD9         	movff	checkAA@sorted,fsr2l
  6970  0016F8  C038  FFDA         	movff	checkAA@sorted+1,fsr2h
  6971  0016FC  2ADF               	incf	indf2,f,c
  6972                           
  6973                           ;sensors.c: 38: return 1;
  6974  0016FE  0E00               	movlw	0
  6975  001700  6E38               	movwf	?_checkAA+1,c
  6976  001702  0E01               	movlw	1
  6977  001704  6E37               	movwf	?_checkAA,c
  6978  001706  0012               	return	
  6979  001708                     i2l3862:
  6980                           
  6981                           ;sensors.c: 40: printf("uncharged AA          ");
  6982  001708  0E43               	movlw	low STR_40
  6983  00170A  6E0D               	movwf	i2printf@f,c
  6984  00170C  0EFD               	movlw	high STR_40
  6985  00170E  6E0E               	movwf	i2printf@f+1,c
  6986  001710  EC3D  F004         	call	i2_printf	;wreg free
  6987                           
  6988                           ;sensors.c: 41: sorted[3]++;
  6989  001714  EE20 F003          	lfsr	2,3
  6990  001718  5037               	movf	checkAA@sorted,w,c
  6991  00171A  26D9               	addwf	fsr2l,f,c
  6992  00171C  5038               	movf	checkAA@sorted+1,w,c
  6993  00171E  22DA               	addwfc	fsr2h,f,c
  6994  001720  2ADF               	incf	indf2,f,c
  6995                           
  6996                           ;sensors.c: 42: return 0;
  6997  001722  0E00               	movlw	0
  6998  001724  6E38               	movwf	?_checkAA+1,c
  6999  001726  0E00               	movlw	0
  7000  001728  6E37               	movwf	?_checkAA,c
  7001  00172A  0012               	return	
  7002  00172C                     i2l3870:
  7003                           
  7004                           ;sensors.c: 44: printf("no AA          ");
  7005  00172C  0E49               	movlw	low STR_41
  7006  00172E  6E0D               	movwf	i2printf@f,c
  7007  001730  0EFF               	movlw	high STR_41
  7008  001732  6E0E               	movwf	i2printf@f+1,c
  7009  001734  EC3D  F004         	call	i2_printf	;wreg free
  7010                           
  7011                           ;sensors.c: 45: return -1;
  7012  001738  6837               	setf	?_checkAA,c
  7013  00173A  6838               	setf	?_checkAA+1,c
  7014  00173C  0012               	return	
  7015  00173E                     i2l3876:
  7016                           
  7017                           ;sensors.c: 47: return 0;
  7018  00173E  0E00               	movlw	0
  7019  001740  6E38               	movwf	?_checkAA+1,c
  7020  001742  0E00               	movlw	0
  7021  001744  6E37               	movwf	?_checkAA,c
  7022                           
  7023                           ;sensors.c: 48: }
  7024  001746  0012               	return	
  7025  001748                     i2l3882:
  7026  001748  0E00               	movlw	0
  7027  00174A  ECFA  F00F         	call	_AD
  7028  00174E  C001  F030         	movff	?_AD,checkV@voltage
  7029  001752  C002  F031         	movff	?_AD+1,checkV@voltage+1
  7030  001756  0E00               	movlw	0
  7031  001758  6E32               	movwf	checkV@max,c
  7032  00175A  0EC0               	movlw	192
  7033  00175C  6E33               	movwf	checkV@max+1,c
  7034  00175E  0E3F               	movlw	63
  7035  001760  6E34               	movwf	checkV@max+2,c
  7036  001762  EC41  F00A         	call	_checkV	;wreg free
  7037                           
  7038                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  7039                           ; Switch size 1, requested type "space"
  7040                           ; Number of cases is 2, Range of values is 0 to 255
  7041                           ; switch strategies available:
  7042                           ; Name         Instructions Cycles
  7043                           ; simple_byte            7     4 (average)
  7044                           ;	Chosen strategy is simple_byte
  7045  001766  5031               	movf	?_checkV+1,w,c
  7046  001768  0A00               	xorlw	0	; case 0
  7047  00176A  B4D8               	btfsc	status,2,c
  7048  00176C  D004               	goto	i2l4618
  7049  00176E  0AFF               	xorlw	255	; case 255
  7050  001770  B4D8               	btfsc	status,2,c
  7051  001772  D009               	goto	i2l4620
  7052  001774  D7E4               	goto	i2l3876
  7053  001776                     i2l4618:
  7054                           
  7055                           ; Switch size 1, requested type "space"
  7056                           ; Number of cases is 2, Range of values is 0 to 1
  7057                           ; switch strategies available:
  7058                           ; Name         Instructions Cycles
  7059                           ; simple_byte            7     4 (average)
  7060                           ;	Chosen strategy is simple_byte
  7061  001776  5030               	movf	?_checkV,w,c
  7062  001778  0A00               	xorlw	0	; case 0
  7063  00177A  B4D8               	btfsc	status,2,c
  7064  00177C  D7D7               	goto	i2l3870
  7065  00177E  0A01               	xorlw	1	; case 1
  7066  001780  B4D8               	btfsc	status,2,c
  7067  001782  D7B2               	goto	i2l3854
  7068  001784  D7DC               	goto	i2l3876
  7069  001786                     i2l4620:
  7070                           
  7071                           ; Switch size 1, requested type "space"
  7072                           ; Number of cases is 1, Range of values is 255 to 255
  7073                           ; switch strategies available:
  7074                           ; Name         Instructions Cycles
  7075                           ; simple_byte            4     3 (average)
  7076                           ;	Chosen strategy is simple_byte
  7077  001786  5030               	movf	?_checkV,w,c
  7078  001788  0AFF               	xorlw	255	; case 255
  7079  00178A  B4D8               	btfsc	status,2,c
  7080  00178C  D7BD               	goto	i2l3862
  7081  00178E  D7D7               	goto	i2l3876
  7082  001790                     __end_of_checkAA:
  7083                           	opt stack 0
  7084                           pclatu	equ	0xFFB
  7085                           pclath	equ	0xFFA
  7086                           tblptru	equ	0xFF8
  7087                           tblptrh	equ	0xFF7
  7088                           tblptrl	equ	0xFF6
  7089                           tablat	equ	0xFF5
  7090                           prodh	equ	0xFF4
  7091                           prodl	equ	0xFF3
  7092                           intcon	equ	0xFF2
  7093                           intcon3	equ	0xFF0
  7094                           postinc0	equ	0xFEE
  7095                           fsr0h	equ	0xFEA
  7096                           fsr0l	equ	0xFE9
  7097                           wreg	equ	0xFE8
  7098                           plusw1	equ	0xFE3
  7099                           fsr1h	equ	0xFE2
  7100                           fsr1l	equ	0xFE1
  7101                           indf2	equ	0xFDF
  7102                           postinc2	equ	0xFDE
  7103                           postdec2	equ	0xFDD
  7104                           plusw2	equ	0xFDB
  7105                           fsr2h	equ	0xFDA
  7106                           fsr2l	equ	0xFD9
  7107                           status	equ	0xFD8
  7108                           
  7109 ;; *************** function _check9 *****************
  7110 ;; Defined at:
  7111 ;;		line 73 in file "sensors.c"
  7112 ;; Parameters:    Size  Location     Type
  7113 ;;  sorted          2   54[COMRAM] PTR unsigned char 
  7114 ;;		 -> simulate@sorted(4), mainloop@sorted(4), 
  7115 ;; Auto vars:     Size  Location     Type
  7116 ;;		None
  7117 ;; Return value:  Size  Location     Type
  7118 ;;                  2   54[COMRAM] int 
  7119 ;; Registers used:
  7120 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7121 ;; Tracked objects:
  7122 ;;		On entry : 0/0
  7123 ;;		On exit  : 0/0
  7124 ;;		Unchanged: 0/0
  7125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7126 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7129 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7130 ;;Total ram usage:        2 bytes
  7131 ;; Hardware stack levels used:    1
  7132 ;; Hardware stack levels required when called:    4
  7133 ;; This function calls:
  7134 ;;		_AD
  7135 ;;		_checkV
  7136 ;;		i2___lcd_newline
  7137 ;;		i2_lcdInst
  7138 ;;		i2_printf
  7139 ;; This function is called by:
  7140 ;;		_simulate
  7141 ;;		_mainloop
  7142 ;; This function uses a non-reentrant model
  7143 ;;
  7144                           
  7145                           	psect	text34
  7146  00160C                     __ptext34:
  7147                           	opt stack 0
  7148  00160C                     _check9:
  7149                           	opt stack 20
  7150                           
  7151                           ;sensors.c: 75: lcdInst(0b10000000);;
  7152                           
  7153                           ;incstack = 0
  7154  00160C  0E80               	movlw	128
  7155  00160E  EC72  F011         	call	i2_lcdInst
  7156                           
  7157                           ;sensors.c: 76: printf("9V:          ");
  7158  001612  0EB6               	movlw	low STR_46
  7159  001614  6E0D               	movwf	i2printf@f,c
  7160  001616  0EFF               	movlw	high STR_46
  7161  001618  6E0E               	movwf	i2printf@f+1,c
  7162  00161A  EC3D  F004         	call	i2_printf	;wreg free
  7163                           
  7164                           ;sensors.c: 77: __lcd_newline();
  7165  00161E  EC96  F011         	call	i2___lcd_newline	;wreg free
  7166                           
  7167                           ;sensors.c: 78: switch (checkV(AD(2), 4)) {
  7168  001622  D032               	goto	i2l3970
  7169  001624                     i2l3942:
  7170                           
  7171                           ;sensors.c: 80: printf("charged 9V          ");
  7172  001624  0E5C               	movlw	low (STR_48+2)
  7173  001626  6E0D               	movwf	i2printf@f,c
  7174  001628  0EFD               	movlw	high (STR_48+2)
  7175  00162A  6E0E               	movwf	i2printf@f+1,c
  7176  00162C  EC3D  F004         	call	i2_printf	;wreg free
  7177                           
  7178                           ;sensors.c: 81: sorted[2]++;
  7179  001630  EE20 F002          	lfsr	2,2
  7180  001634  5037               	movf	check9@sorted,w,c
  7181  001636  26D9               	addwf	fsr2l,f,c
  7182  001638  5038               	movf	check9@sorted+1,w,c
  7183  00163A  22DA               	addwfc	fsr2h,f,c
  7184  00163C  2ADF               	incf	indf2,f,c
  7185                           
  7186                           ;sensors.c: 82: return 1;
  7187  00163E  0E00               	movlw	0
  7188  001640  6E38               	movwf	?_check9+1,c
  7189  001642  0E01               	movlw	1
  7190  001644  6E37               	movwf	?_check9,c
  7191  001646  0012               	return	
  7192  001648                     i2l3950:
  7193                           
  7194                           ;sensors.c: 84: printf("uncharged 9V          ");
  7195  001648  0E5A               	movlw	low STR_48
  7196  00164A  6E0D               	movwf	i2printf@f,c
  7197  00164C  0EFD               	movlw	high STR_48
  7198  00164E  6E0E               	movwf	i2printf@f+1,c
  7199  001650  EC3D  F004         	call	i2_printf	;wreg free
  7200                           
  7201                           ;sensors.c: 85: sorted[3]++;
  7202  001654  EE20 F003          	lfsr	2,3
  7203  001658  5037               	movf	check9@sorted,w,c
  7204  00165A  26D9               	addwf	fsr2l,f,c
  7205  00165C  5038               	movf	check9@sorted+1,w,c
  7206  00165E  22DA               	addwfc	fsr2h,f,c
  7207  001660  2ADF               	incf	indf2,f,c
  7208                           
  7209                           ;sensors.c: 86: return 0;
  7210  001662  0E00               	movlw	0
  7211  001664  6E38               	movwf	?_check9+1,c
  7212  001666  0E00               	movlw	0
  7213  001668  6E37               	movwf	?_check9,c
  7214  00166A  0012               	return	
  7215  00166C                     i2l3958:
  7216                           
  7217                           ;sensors.c: 88: printf("no 9V          ");
  7218  00166C  0E59               	movlw	low STR_49
  7219  00166E  6E0D               	movwf	i2printf@f,c
  7220  001670  0EFF               	movlw	high STR_49
  7221  001672  6E0E               	movwf	i2printf@f+1,c
  7222  001674  EC3D  F004         	call	i2_printf	;wreg free
  7223                           
  7224                           ;sensors.c: 89: return -1;
  7225  001678  6837               	setf	?_check9,c
  7226  00167A  6838               	setf	?_check9+1,c
  7227  00167C  0012               	return	
  7228  00167E                     i2l3964:
  7229                           
  7230                           ;sensors.c: 91: return 0;
  7231  00167E  0E00               	movlw	0
  7232  001680  6E38               	movwf	?_check9+1,c
  7233  001682  0E00               	movlw	0
  7234  001684  6E37               	movwf	?_check9,c
  7235                           
  7236                           ;sensors.c: 92: }
  7237  001686  0012               	return	
  7238  001688                     i2l3970:
  7239  001688  0E02               	movlw	2
  7240  00168A  ECFA  F00F         	call	_AD
  7241  00168E  C001  F030         	movff	?_AD,checkV@voltage
  7242  001692  C002  F031         	movff	?_AD+1,checkV@voltage+1
  7243  001696  0E00               	movlw	0
  7244  001698  6E32               	movwf	checkV@max,c
  7245  00169A  0E80               	movlw	128
  7246  00169C  6E33               	movwf	checkV@max+1,c
  7247  00169E  0E40               	movlw	64
  7248  0016A0  6E34               	movwf	checkV@max+2,c
  7249  0016A2  EC41  F00A         	call	_checkV	;wreg free
  7250                           
  7251                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  7252                           ; Switch size 1, requested type "space"
  7253                           ; Number of cases is 2, Range of values is 0 to 255
  7254                           ; switch strategies available:
  7255                           ; Name         Instructions Cycles
  7256                           ; simple_byte            7     4 (average)
  7257                           ;	Chosen strategy is simple_byte
  7258  0016A6  5031               	movf	?_checkV+1,w,c
  7259  0016A8  0A00               	xorlw	0	; case 0
  7260  0016AA  B4D8               	btfsc	status,2,c
  7261  0016AC  D004               	goto	i2l4622
  7262  0016AE  0AFF               	xorlw	255	; case 255
  7263  0016B0  B4D8               	btfsc	status,2,c
  7264  0016B2  D009               	goto	i2l4624
  7265  0016B4  D7E4               	goto	i2l3964
  7266  0016B6                     i2l4622:
  7267                           
  7268                           ; Switch size 1, requested type "space"
  7269                           ; Number of cases is 2, Range of values is 0 to 1
  7270                           ; switch strategies available:
  7271                           ; Name         Instructions Cycles
  7272                           ; simple_byte            7     4 (average)
  7273                           ;	Chosen strategy is simple_byte
  7274  0016B6  5030               	movf	?_checkV,w,c
  7275  0016B8  0A00               	xorlw	0	; case 0
  7276  0016BA  B4D8               	btfsc	status,2,c
  7277  0016BC  D7D7               	goto	i2l3958
  7278  0016BE  0A01               	xorlw	1	; case 1
  7279  0016C0  B4D8               	btfsc	status,2,c
  7280  0016C2  D7B0               	goto	i2l3942
  7281  0016C4  D7DC               	goto	i2l3964
  7282  0016C6                     i2l4624:
  7283                           
  7284                           ; Switch size 1, requested type "space"
  7285                           ; Number of cases is 1, Range of values is 255 to 255
  7286                           ; switch strategies available:
  7287                           ; Name         Instructions Cycles
  7288                           ; simple_byte            4     3 (average)
  7289                           ;	Chosen strategy is simple_byte
  7290  0016C6  5030               	movf	?_checkV,w,c
  7291  0016C8  0AFF               	xorlw	255	; case 255
  7292  0016CA  B4D8               	btfsc	status,2,c
  7293  0016CC  D7BD               	goto	i2l3950
  7294  0016CE  D7D7               	goto	i2l3964
  7295  0016D0                     __end_of_check9:
  7296                           	opt stack 0
  7297                           pclatu	equ	0xFFB
  7298                           pclath	equ	0xFFA
  7299                           tblptru	equ	0xFF8
  7300                           tblptrh	equ	0xFF7
  7301                           tblptrl	equ	0xFF6
  7302                           tablat	equ	0xFF5
  7303                           prodh	equ	0xFF4
  7304                           prodl	equ	0xFF3
  7305                           intcon	equ	0xFF2
  7306                           intcon3	equ	0xFF0
  7307                           postinc0	equ	0xFEE
  7308                           fsr0h	equ	0xFEA
  7309                           fsr0l	equ	0xFE9
  7310                           wreg	equ	0xFE8
  7311                           plusw1	equ	0xFE3
  7312                           fsr1h	equ	0xFE2
  7313                           fsr1l	equ	0xFE1
  7314                           indf2	equ	0xFDF
  7315                           postinc2	equ	0xFDE
  7316                           postdec2	equ	0xFDD
  7317                           plusw2	equ	0xFDB
  7318                           fsr2h	equ	0xFDA
  7319                           fsr2l	equ	0xFD9
  7320                           status	equ	0xFD8
  7321                           
  7322 ;; *************** function _checkV *****************
  7323 ;; Defined at:
  7324 ;;		line 15 in file "sensors.c"
  7325 ;; Parameters:    Size  Location     Type
  7326 ;;  voltage         2   47[COMRAM] int 
  7327 ;;  max             3   49[COMRAM] float 
  7328 ;; Auto vars:     Size  Location     Type
  7329 ;;  i               1   53[COMRAM] unsigned char 
  7330 ;; Return value:  Size  Location     Type
  7331 ;;                  2   47[COMRAM] int 
  7332 ;; Registers used:
  7333 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7334 ;; Tracked objects:
  7335 ;;		On entry : 0/0
  7336 ;;		On exit  : 0/0
  7337 ;;		Unchanged: 0/0
  7338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7339 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7340 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7341 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7342 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7343 ;;Total ram usage:        7 bytes
  7344 ;; Hardware stack levels used:    1
  7345 ;; Hardware stack levels required when called:    3
  7346 ;; This function calls:
  7347 ;;		___awtoft
  7348 ;;		___ftdiv
  7349 ;;		___ftge
  7350 ;;		___ftmul
  7351 ;;		i2___lcd_newline
  7352 ;;		i2_printf
  7353 ;; This function is called by:
  7354 ;;		_checkAA
  7355 ;;		_checkC
  7356 ;;		_check9
  7357 ;; This function uses a non-reentrant model
  7358 ;;
  7359                           
  7360                           	psect	text35
  7361  001482                     __ptext35:
  7362                           	opt stack 0
  7363  001482                     _checkV:
  7364                           	opt stack 20
  7365                           
  7366                           ;sensors.c: 17: printf("%d received    ", voltage);
  7367                           
  7368                           ;incstack = 0
  7369  001482  0E69               	movlw	low STR_37
  7370  001484  6E0D               	movwf	i2printf@f,c
  7371  001486  0EFF               	movlw	high STR_37
  7372  001488  6E0E               	movwf	i2printf@f+1,c
  7373  00148A  C030  F00F         	movff	checkV@voltage,?i2_printf+2
  7374  00148E  C031  F010         	movff	checkV@voltage+1,?i2_printf+3
  7375  001492  EC3D  F004         	call	i2_printf	;wreg free
  7376                           
  7377                           ;sensors.c: 18: __lcd_newline();
  7378  001496  EC96  F011         	call	i2___lcd_newline	;wreg free
  7379                           
  7380                           ;sensors.c: 19: for(char i=0;i<10;i++){_delay((unsigned long)((98)*(8000000/4000.0)));};
  7381  00149A  0E00               	movlw	0
  7382  00149C  6E36               	movwf	checkV@i,c
  7383  00149E                     i2l3486:
  7384  00149E  0E09               	movlw	9
  7385  0014A0  6436               	cpfsgt	checkV@i,c
  7386  0014A2  D001               	goto	i2l3490
  7387  0014A4  D00A               	goto	i2l3494
  7388  0014A6                     i2l3490:
  7389  0014A6  0EFF               	movlw	255
  7390  0014A8  6E35               	movwf	??_checkV& (0+255),c
  7391  0014AA  0E8A               	movlw	138
  7392  0014AC                     i2u339_47:
  7393  0014AC  2EE8               	decfsz	wreg,f,c
  7394  0014AE  D7FE               	bra	i2u339_47
  7395  0014B0  2E35               	decfsz	??_checkV& (0+255),f,c
  7396  0014B2  D7FC               	bra	i2u339_47
  7397  0014B4  D000               	nop2	
  7398  0014B6  2A36               	incf	checkV@i,f,c
  7399  0014B8  D7F2               	goto	i2l3486
  7400  0014BA                     i2l3494:
  7401                           
  7402                           ;sensors.c: 20: if (voltage < 50) {
  7403  0014BA  BE31               	btfsc	checkV@voltage+1,7,c
  7404  0014BC  D006               	goto	i2l3496
  7405  0014BE  5031               	movf	checkV@voltage+1,w,c
  7406  0014C0  E109               	bnz	i2l3502
  7407  0014C2  0E32               	movlw	50
  7408  0014C4  5C30               	subwf	checkV@voltage,w,c
  7409  0014C6  B0D8               	btfsc	status,0,c
  7410  0014C8  D005               	goto	i2l3502
  7411  0014CA                     i2l3496:
  7412                           
  7413                           ;sensors.c: 21: return 0;
  7414  0014CA  0E00               	movlw	0
  7415  0014CC  6E31               	movwf	?_checkV+1,c
  7416  0014CE  0E00               	movlw	0
  7417  0014D0  6E30               	movwf	?_checkV,c
  7418                           
  7419                           ;sensors.c: 22: } else if (voltage > 0.85 * 1023 * max / 5) {
  7420  0014D2  0012               	return	
  7421  0014D4                     i2l3502:
  7422  0014D4  0E00               	movlw	0
  7423  0014D6  6E1B               	movwf	___ftdiv@f2,c
  7424  0014D8  0EA0               	movlw	160
  7425  0014DA  6E1C               	movwf	___ftdiv@f2+1,c
  7426  0014DC  0E40               	movlw	64
  7427  0014DE  6E1D               	movwf	___ftdiv@f2+2,c
  7428  0014E0  0E63               	movlw	99
  7429  0014E2  6E0C               	movwf	___ftmul@f2,c
  7430  0014E4  0E59               	movlw	89
  7431  0014E6  6E0D               	movwf	___ftmul@f2+1,c
  7432  0014E8  0E44               	movlw	68
  7433  0014EA  6E0E               	movwf	___ftmul@f2+2,c
  7434  0014EC  C032  F009         	movff	checkV@max,___ftmul@f1
  7435  0014F0  C033  F00A         	movff	checkV@max+1,___ftmul@f1+1
  7436  0014F4  C034  F00B         	movff	checkV@max+2,___ftmul@f1+2
  7437  0014F8  EC65  F008         	call	___ftmul	;wreg free
  7438  0014FC  C009  F018         	movff	?___ftmul,___ftdiv@f1
  7439  001500  C00A  F019         	movff	?___ftmul+1,___ftdiv@f1+1
  7440  001504  C00B  F01A         	movff	?___ftmul+2,___ftdiv@f1+2
  7441  001508  ECCE  F009         	call	___ftdiv	;wreg free
  7442  00150C  C018  F027         	movff	?___ftdiv,___ftge@ff1
  7443  001510  C019  F028         	movff	?___ftdiv+1,___ftge@ff1+1
  7444  001514  C01A  F029         	movff	?___ftdiv+2,___ftge@ff1+2
  7445  001518  C030  F009         	movff	checkV@voltage,___awtoft@c
  7446  00151C  C031  F00A         	movff	checkV@voltage+1,___awtoft@c+1
  7447  001520  EC18  F010         	call	___awtoft	;wreg free
  7448  001524  C009  F02A         	movff	?___awtoft,___ftge@ff2
  7449  001528  C00A  F02B         	movff	?___awtoft+1,___ftge@ff2+1
  7450  00152C  C00B  F02C         	movff	?___awtoft+2,___ftge@ff2+2
  7451  001530  EC7D  F00C         	call	___ftge	;wreg free
  7452  001534  B0D8               	btfsc	status,0,c
  7453  001536  D005               	goto	i2l305
  7454                           
  7455                           ;sensors.c: 23: return 1;
  7456  001538  0E00               	movlw	0
  7457  00153A  6E31               	movwf	?_checkV+1,c
  7458  00153C  0E01               	movlw	1
  7459  00153E  6E30               	movwf	?_checkV,c
  7460                           
  7461                           ;sensors.c: 24: } else {
  7462  001540  0012               	return	
  7463  001542                     i2l305:
  7464                           
  7465                           ;sensors.c: 25: return -1;
  7466  001542  6830               	setf	?_checkV,c
  7467  001544  6831               	setf	?_checkV+1,c
  7468  001546  0012               	return	
  7469  001548                     __end_of_checkV:
  7470                           	opt stack 0
  7471                           pclatu	equ	0xFFB
  7472                           pclath	equ	0xFFA
  7473                           tblptru	equ	0xFF8
  7474                           tblptrh	equ	0xFF7
  7475                           tblptrl	equ	0xFF6
  7476                           tablat	equ	0xFF5
  7477                           prodh	equ	0xFF4
  7478                           prodl	equ	0xFF3
  7479                           intcon	equ	0xFF2
  7480                           intcon3	equ	0xFF0
  7481                           postinc0	equ	0xFEE
  7482                           fsr0h	equ	0xFEA
  7483                           fsr0l	equ	0xFE9
  7484                           wreg	equ	0xFE8
  7485                           plusw1	equ	0xFE3
  7486                           fsr1h	equ	0xFE2
  7487                           fsr1l	equ	0xFE1
  7488                           indf2	equ	0xFDF
  7489                           postinc2	equ	0xFDE
  7490                           postdec2	equ	0xFDD
  7491                           plusw2	equ	0xFDB
  7492                           fsr2h	equ	0xFDA
  7493                           fsr2l	equ	0xFD9
  7494                           status	equ	0xFD8
  7495                           
  7496 ;; *************** function ___ftmul *****************
  7497 ;; Defined at:
  7498 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  7499 ;; Parameters:    Size  Location     Type
  7500 ;;  f1              3    8[COMRAM] float 
  7501 ;;  f2              3   11[COMRAM] float 
  7502 ;; Auto vars:     Size  Location     Type
  7503 ;;  f3_as_produc    3   18[COMRAM] unsigned um
  7504 ;;  sign            1   22[COMRAM] unsigned char 
  7505 ;;  cntr            1   21[COMRAM] unsigned char 
  7506 ;;  exp             1   17[COMRAM] unsigned char 
  7507 ;; Return value:  Size  Location     Type
  7508 ;;                  3    8[COMRAM] float 
  7509 ;; Registers used:
  7510 ;;		wreg, status,2, status,0, cstack
  7511 ;; Tracked objects:
  7512 ;;		On entry : 0/0
  7513 ;;		On exit  : 0/0
  7514 ;;		Unchanged: 0/0
  7515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7516 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7517 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7518 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7519 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7520 ;;Total ram usage:       15 bytes
  7521 ;; Hardware stack levels used:    1
  7522 ;; Hardware stack levels required when called:    1
  7523 ;; This function calls:
  7524 ;;		___ftpack
  7525 ;; This function is called by:
  7526 ;;		_checkV
  7527 ;; This function uses a non-reentrant model
  7528 ;;
  7529                           
  7530                           	psect	text36
  7531  0010CA                     __ptext36:
  7532                           	opt stack 0
  7533  0010CA                     ___ftmul:
  7534                           	opt stack 21
  7535                           
  7536                           ;incstack = 0
  7537  0010CA  C00B  F00F         	movff	___ftmul@f1+2,??___ftmul
  7538  0010CE  6A10               	clrf	(??___ftmul+1)& (0+255),c
  7539  0010D0  6A11               	clrf	(??___ftmul+2)& (0+255),c
  7540  0010D2  340A               	rlcf	___ftmul@f1+1,w,c
  7541  0010D4  360F               	rlcf	??___ftmul& (0+255),f,c
  7542  0010D6  E301               	bnc	u184_41
  7543  0010D8  8010               	bsf	(??___ftmul+1)& (0+255),0,c
  7544  0010DA                     u184_41:
  7545  0010DA  500F               	movf	??___ftmul,w,c
  7546  0010DC  6E12               	movwf	___ftmul@exp,c
  7547  0010DE  5012               	movf	___ftmul@exp,w,c
  7548  0010E0  A4D8               	btfss	status,2,c
  7549  0010E2  D007               	goto	i2l3104
  7550  0010E4  0E00               	movlw	0
  7551  0010E6  6E09               	movwf	?___ftmul,c
  7552  0010E8  0E00               	movlw	0
  7553  0010EA  6E0A               	movwf	?___ftmul+1,c
  7554  0010EC  0E00               	movlw	0
  7555  0010EE  6E0B               	movwf	?___ftmul+2,c
  7556  0010F0  0012               	return	
  7557  0010F2                     i2l3104:
  7558  0010F2  C00E  F00F         	movff	___ftmul@f2+2,??___ftmul
  7559  0010F6  6A10               	clrf	(??___ftmul+1)& (0+255),c
  7560  0010F8  6A11               	clrf	(??___ftmul+2)& (0+255),c
  7561  0010FA  340D               	rlcf	___ftmul@f2+1,w,c
  7562  0010FC  360F               	rlcf	??___ftmul& (0+255),f,c
  7563  0010FE  E301               	bnc	u186_41
  7564  001100  8010               	bsf	(??___ftmul+1)& (0+255),0,c
  7565  001102                     u186_41:
  7566  001102  500F               	movf	??___ftmul,w,c
  7567  001104  6E17               	movwf	___ftmul@sign,c
  7568  001106  5017               	movf	___ftmul@sign,w,c
  7569  001108  A4D8               	btfss	status,2,c
  7570  00110A  D007               	goto	i2l3110
  7571  00110C  0E00               	movlw	0
  7572  00110E  6E09               	movwf	?___ftmul,c
  7573  001110  0E00               	movlw	0
  7574  001112  6E0A               	movwf	?___ftmul+1,c
  7575  001114  0E00               	movlw	0
  7576  001116  6E0B               	movwf	?___ftmul+2,c
  7577  001118  0012               	return	
  7578  00111A                     i2l3110:
  7579  00111A  5017               	movf	___ftmul@sign,w,c
  7580  00111C  0F7B               	addlw	123
  7581  00111E  2612               	addwf	___ftmul@exp,f,c
  7582  001120  C00B  F017         	movff	___ftmul@f1+2,___ftmul@sign
  7583  001124  500E               	movf	___ftmul@f2+2,w,c
  7584  001126  1A17               	xorwf	___ftmul@sign,f,c
  7585  001128  0E80               	movlw	128
  7586  00112A  1617               	andwf	___ftmul@sign,f,c
  7587  00112C  8E0A               	bsf	___ftmul@f1+1,7,c
  7588  00112E  8E0D               	bsf	___ftmul@f2+1,7,c
  7589  001130  0EFF               	movlw	255
  7590  001132  160C               	andwf	___ftmul@f2,f,c
  7591  001134  0EFF               	movlw	255
  7592  001136  160D               	andwf	___ftmul@f2+1,f,c
  7593  001138  0E00               	movlw	0
  7594  00113A  160E               	andwf	___ftmul@f2+2,f,c
  7595  00113C  0E00               	movlw	0
  7596  00113E  6E13               	movwf	___ftmul@f3_as_product,c
  7597  001140  0E00               	movlw	0
  7598  001142  6E14               	movwf	___ftmul@f3_as_product+1,c
  7599  001144  0E00               	movlw	0
  7600  001146  6E15               	movwf	___ftmul@f3_as_product+2,c
  7601  001148  0E07               	movlw	7
  7602  00114A  6E16               	movwf	___ftmul@cntr,c
  7603  00114C                     i2l3124:
  7604  00114C  A009               	btfss	___ftmul@f1,0,c
  7605  00114E  D006               	goto	i2l3128
  7606  001150  500C               	movf	___ftmul@f2,w,c
  7607  001152  2613               	addwf	___ftmul@f3_as_product,f,c
  7608  001154  500D               	movf	___ftmul@f2+1,w,c
  7609  001156  2214               	addwfc	___ftmul@f3_as_product+1,f,c
  7610  001158  500E               	movf	___ftmul@f2+2,w,c
  7611  00115A  2215               	addwfc	___ftmul@f3_as_product+2,f,c
  7612  00115C                     i2l3128:
  7613  00115C  90D8               	bcf	status,0,c
  7614  00115E  320B               	rrcf	___ftmul@f1+2,f,c
  7615  001160  320A               	rrcf	___ftmul@f1+1,f,c
  7616  001162  3209               	rrcf	___ftmul@f1,f,c
  7617  001164  90D8               	bcf	status,0,c
  7618  001166  360C               	rlcf	___ftmul@f2,f,c
  7619  001168  360D               	rlcf	___ftmul@f2+1,f,c
  7620  00116A  360E               	rlcf	___ftmul@f2+2,f,c
  7621  00116C  2E16               	decfsz	___ftmul@cntr,f,c
  7622  00116E  D7EE               	goto	i2l3124
  7623  001170  0E09               	movlw	9
  7624  001172  6E16               	movwf	___ftmul@cntr,c
  7625  001174                     i2l3134:
  7626  001174  A009               	btfss	___ftmul@f1,0,c
  7627  001176  D006               	goto	i2l3138
  7628  001178  500C               	movf	___ftmul@f2,w,c
  7629  00117A  2613               	addwf	___ftmul@f3_as_product,f,c
  7630  00117C  500D               	movf	___ftmul@f2+1,w,c
  7631  00117E  2214               	addwfc	___ftmul@f3_as_product+1,f,c
  7632  001180  500E               	movf	___ftmul@f2+2,w,c
  7633  001182  2215               	addwfc	___ftmul@f3_as_product+2,f,c
  7634  001184                     i2l3138:
  7635  001184  90D8               	bcf	status,0,c
  7636  001186  320B               	rrcf	___ftmul@f1+2,f,c
  7637  001188  320A               	rrcf	___ftmul@f1+1,f,c
  7638  00118A  3209               	rrcf	___ftmul@f1,f,c
  7639  00118C  90D8               	bcf	status,0,c
  7640  00118E  3215               	rrcf	___ftmul@f3_as_product+2,f,c
  7641  001190  3214               	rrcf	___ftmul@f3_as_product+1,f,c
  7642  001192  3213               	rrcf	___ftmul@f3_as_product,f,c
  7643  001194  2E16               	decfsz	___ftmul@cntr,f,c
  7644  001196  D7EE               	goto	i2l3134
  7645  001198  C013  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  7646  00119C  C014  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  7647  0011A0  C015  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  7648  0011A4  C012  F004         	movff	___ftmul@exp,___ftpack@exp
  7649  0011A8  C017  F005         	movff	___ftmul@sign,___ftpack@sign
  7650  0011AC  EC26  F00C         	call	___ftpack	;wreg free
  7651  0011B0  C001  F009         	movff	?___ftpack,?___ftmul
  7652  0011B4  C002  F00A         	movff	?___ftpack+1,?___ftmul+1
  7653  0011B8  C003  F00B         	movff	?___ftpack+2,?___ftmul+2
  7654  0011BC  0012               	return	
  7655  0011BE                     __end_of___ftmul:
  7656                           	opt stack 0
  7657                           pclatu	equ	0xFFB
  7658                           pclath	equ	0xFFA
  7659                           tblptru	equ	0xFF8
  7660                           tblptrh	equ	0xFF7
  7661                           tblptrl	equ	0xFF6
  7662                           tablat	equ	0xFF5
  7663                           prodh	equ	0xFF4
  7664                           prodl	equ	0xFF3
  7665                           intcon	equ	0xFF2
  7666                           intcon3	equ	0xFF0
  7667                           postinc0	equ	0xFEE
  7668                           fsr0h	equ	0xFEA
  7669                           fsr0l	equ	0xFE9
  7670                           wreg	equ	0xFE8
  7671                           plusw1	equ	0xFE3
  7672                           fsr1h	equ	0xFE2
  7673                           fsr1l	equ	0xFE1
  7674                           indf2	equ	0xFDF
  7675                           postinc2	equ	0xFDE
  7676                           postdec2	equ	0xFDD
  7677                           plusw2	equ	0xFDB
  7678                           fsr2h	equ	0xFDA
  7679                           fsr2l	equ	0xFD9
  7680                           status	equ	0xFD8
  7681                           
  7682 ;; *************** function ___ftge *****************
  7683 ;; Defined at:
  7684 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
  7685 ;; Parameters:    Size  Location     Type
  7686 ;;  ff1             3   38[COMRAM] float 
  7687 ;;  ff2             3   41[COMRAM] float 
  7688 ;; Auto vars:     Size  Location     Type
  7689 ;;		None
  7690 ;; Return value:  Size  Location     Type
  7691 ;;		None               void
  7692 ;; Registers used:
  7693 ;;		wreg, status,2, status,0
  7694 ;; Tracked objects:
  7695 ;;		On entry : 0/0
  7696 ;;		On exit  : 0/0
  7697 ;;		Unchanged: 0/0
  7698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7699 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7701 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7702 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7703 ;;Total ram usage:        9 bytes
  7704 ;; Hardware stack levels used:    1
  7705 ;; This function calls:
  7706 ;;		Nothing
  7707 ;; This function is called by:
  7708 ;;		_checkV
  7709 ;; This function uses a non-reentrant model
  7710 ;;
  7711                           
  7712                           	psect	text37
  7713  0018FA                     __ptext37:
  7714                           	opt stack 0
  7715  0018FA                     ___ftge:
  7716                           	opt stack 22
  7717                           
  7718                           ;incstack = 0
  7719  0018FA  AE29               	btfss	___ftge@ff1+2,7,c
  7720  0018FC  D016               	goto	i2l3206
  7721  0018FE  C027  F02D         	movff	___ftge@ff1,??___ftge
  7722  001902  C028  F02E         	movff	___ftge@ff1+1,??___ftge+1
  7723  001906  C029  F02F         	movff	___ftge@ff1+2,??___ftge+2
  7724  00190A  1E2D               	comf	??___ftge,f,c
  7725  00190C  1E2E               	comf	??___ftge+1,f,c
  7726  00190E  1E2F               	comf	??___ftge+2,f,c
  7727  001910  2A2D               	incf	??___ftge,f,c
  7728  001912  0E00               	movlw	0
  7729  001914  222E               	addwfc	??___ftge+1,f,c
  7730  001916  222F               	addwfc	??___ftge+2,f,c
  7731  001918  0E00               	movlw	0
  7732  00191A  242D               	addwf	??___ftge,w,c
  7733  00191C  6E27               	movwf	___ftge@ff1,c
  7734  00191E  0E00               	movlw	0
  7735  001920  202E               	addwfc	??___ftge+1,w,c
  7736  001922  6E28               	movwf	___ftge@ff1+1,c
  7737  001924  0E80               	movlw	128
  7738  001926  202F               	addwfc	??___ftge+2,w,c
  7739  001928  6E29               	movwf	___ftge@ff1+2,c
  7740  00192A                     i2l3206:
  7741  00192A  AE2C               	btfss	___ftge@ff2+2,7,c
  7742  00192C  D016               	goto	i2l3210
  7743  00192E  C02A  F02D         	movff	___ftge@ff2,??___ftge
  7744  001932  C02B  F02E         	movff	___ftge@ff2+1,??___ftge+1
  7745  001936  C02C  F02F         	movff	___ftge@ff2+2,??___ftge+2
  7746  00193A  1E2D               	comf	??___ftge,f,c
  7747  00193C  1E2E               	comf	??___ftge+1,f,c
  7748  00193E  1E2F               	comf	??___ftge+2,f,c
  7749  001940  2A2D               	incf	??___ftge,f,c
  7750  001942  0E00               	movlw	0
  7751  001944  222E               	addwfc	??___ftge+1,f,c
  7752  001946  222F               	addwfc	??___ftge+2,f,c
  7753  001948  0E00               	movlw	0
  7754  00194A  242D               	addwf	??___ftge,w,c
  7755  00194C  6E2A               	movwf	___ftge@ff2,c
  7756  00194E  0E00               	movlw	0
  7757  001950  202E               	addwfc	??___ftge+1,w,c
  7758  001952  6E2B               	movwf	___ftge@ff2+1,c
  7759  001954  0E80               	movlw	128
  7760  001956  202F               	addwfc	??___ftge+2,w,c
  7761  001958  6E2C               	movwf	___ftge@ff2+2,c
  7762  00195A                     i2l3210:
  7763  00195A  0E00               	movlw	0
  7764  00195C  1A27               	xorwf	___ftge@ff1,f,c
  7765  00195E  0E00               	movlw	0
  7766  001960  1A28               	xorwf	___ftge@ff1+1,f,c
  7767  001962  0E80               	movlw	128
  7768  001964  1A29               	xorwf	___ftge@ff1+2,f,c
  7769  001966  0E00               	movlw	0
  7770  001968  1A2A               	xorwf	___ftge@ff2,f,c
  7771  00196A  0E00               	movlw	0
  7772  00196C  1A2B               	xorwf	___ftge@ff2+1,f,c
  7773  00196E  0E80               	movlw	128
  7774  001970  1A2C               	xorwf	___ftge@ff2+2,f,c
  7775  001972  502A               	movf	___ftge@ff2,w,c
  7776  001974  5C27               	subwf	___ftge@ff1,w,c
  7777  001976  502B               	movf	___ftge@ff2+1,w,c
  7778  001978  5828               	subwfb	___ftge@ff1+1,w,c
  7779  00197A  502C               	movf	___ftge@ff2+2,w,c
  7780  00197C  5829               	subwfb	___ftge@ff1+2,w,c
  7781  00197E  B0D8               	btfsc	status,0,c
  7782  001980  D002               	goto	i2l3216
  7783  001982  90D8               	bcf	status,0,c
  7784  001984  0012               	return	
  7785  001986                     i2l3216:
  7786  001986  80D8               	bsf	status,0,c
  7787  001988  0012               	return	
  7788  00198A                     __end_of___ftge:
  7789                           	opt stack 0
  7790                           pclatu	equ	0xFFB
  7791                           pclath	equ	0xFFA
  7792                           tblptru	equ	0xFF8
  7793                           tblptrh	equ	0xFF7
  7794                           tblptrl	equ	0xFF6
  7795                           tablat	equ	0xFF5
  7796                           prodh	equ	0xFF4
  7797                           prodl	equ	0xFF3
  7798                           intcon	equ	0xFF2
  7799                           intcon3	equ	0xFF0
  7800                           postinc0	equ	0xFEE
  7801                           fsr0h	equ	0xFEA
  7802                           fsr0l	equ	0xFE9
  7803                           wreg	equ	0xFE8
  7804                           plusw1	equ	0xFE3
  7805                           fsr1h	equ	0xFE2
  7806                           fsr1l	equ	0xFE1
  7807                           indf2	equ	0xFDF
  7808                           postinc2	equ	0xFDE
  7809                           postdec2	equ	0xFDD
  7810                           plusw2	equ	0xFDB
  7811                           fsr2h	equ	0xFDA
  7812                           fsr2l	equ	0xFD9
  7813                           status	equ	0xFD8
  7814                           
  7815 ;; *************** function ___ftdiv *****************
  7816 ;; Defined at:
  7817 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdiv.c"
  7818 ;; Parameters:    Size  Location     Type
  7819 ;;  f1              3   23[COMRAM] float 
  7820 ;;  f2              3   26[COMRAM] float 
  7821 ;; Auto vars:     Size  Location     Type
  7822 ;;  f3              3   33[COMRAM] float 
  7823 ;;  sign            1   37[COMRAM] unsigned char 
  7824 ;;  exp             1   36[COMRAM] unsigned char 
  7825 ;;  cntr            1   32[COMRAM] unsigned char 
  7826 ;; Return value:  Size  Location     Type
  7827 ;;                  3   23[COMRAM] float 
  7828 ;; Registers used:
  7829 ;;		wreg, status,2, status,0, cstack
  7830 ;; Tracked objects:
  7831 ;;		On entry : 0/0
  7832 ;;		On exit  : 0/0
  7833 ;;		Unchanged: 0/0
  7834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7835 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7836 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7837 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7838 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7839 ;;Total ram usage:       15 bytes
  7840 ;; Hardware stack levels used:    1
  7841 ;; Hardware stack levels required when called:    1
  7842 ;; This function calls:
  7843 ;;		___ftpack
  7844 ;; This function is called by:
  7845 ;;		_checkV
  7846 ;; This function uses a non-reentrant model
  7847 ;;
  7848                           
  7849                           	psect	text38
  7850  00139C                     __ptext38:
  7851                           	opt stack 0
  7852  00139C                     ___ftdiv:
  7853                           	opt stack 21
  7854                           
  7855                           ;incstack = 0
  7856  00139C  C01A  F01E         	movff	___ftdiv@f1+2,??___ftdiv
  7857  0013A0  6A1F               	clrf	(??___ftdiv+1)& (0+255),c
  7858  0013A2  6A20               	clrf	(??___ftdiv+2)& (0+255),c
  7859  0013A4  3419               	rlcf	___ftdiv@f1+1,w,c
  7860  0013A6  361E               	rlcf	??___ftdiv& (0+255),f,c
  7861  0013A8  E301               	bnc	u179_41
  7862  0013AA  801F               	bsf	(??___ftdiv+1)& (0+255),0,c
  7863  0013AC                     u179_41:
  7864  0013AC  501E               	movf	??___ftdiv,w,c
  7865  0013AE  6E25               	movwf	___ftdiv@exp,c
  7866  0013B0  5025               	movf	___ftdiv@exp,w,c
  7867  0013B2  A4D8               	btfss	status,2,c
  7868  0013B4  D007               	goto	i2l3058
  7869  0013B6  0E00               	movlw	0
  7870  0013B8  6E18               	movwf	?___ftdiv,c
  7871  0013BA  0E00               	movlw	0
  7872  0013BC  6E19               	movwf	?___ftdiv+1,c
  7873  0013BE  0E00               	movlw	0
  7874  0013C0  6E1A               	movwf	?___ftdiv+2,c
  7875  0013C2  0012               	return	
  7876  0013C4                     i2l3058:
  7877  0013C4  C01D  F01E         	movff	___ftdiv@f2+2,??___ftdiv
  7878  0013C8  6A1F               	clrf	(??___ftdiv+1)& (0+255),c
  7879  0013CA  6A20               	clrf	(??___ftdiv+2)& (0+255),c
  7880  0013CC  341C               	rlcf	___ftdiv@f2+1,w,c
  7881  0013CE  361E               	rlcf	??___ftdiv& (0+255),f,c
  7882  0013D0  E301               	bnc	u181_41
  7883  0013D2  801F               	bsf	(??___ftdiv+1)& (0+255),0,c
  7884  0013D4                     u181_41:
  7885  0013D4  501E               	movf	??___ftdiv,w,c
  7886  0013D6  6E26               	movwf	___ftdiv@sign,c
  7887  0013D8  5026               	movf	___ftdiv@sign,w,c
  7888  0013DA  A4D8               	btfss	status,2,c
  7889  0013DC  D007               	goto	i2l3064
  7890  0013DE  0E00               	movlw	0
  7891  0013E0  6E18               	movwf	?___ftdiv,c
  7892  0013E2  0E00               	movlw	0
  7893  0013E4  6E19               	movwf	?___ftdiv+1,c
  7894  0013E6  0E00               	movlw	0
  7895  0013E8  6E1A               	movwf	?___ftdiv+2,c
  7896  0013EA  0012               	return	
  7897  0013EC                     i2l3064:
  7898  0013EC  0E00               	movlw	0
  7899  0013EE  6E22               	movwf	___ftdiv@f3,c
  7900  0013F0  0E00               	movlw	0
  7901  0013F2  6E23               	movwf	___ftdiv@f3+1,c
  7902  0013F4  0E00               	movlw	0
  7903  0013F6  6E24               	movwf	___ftdiv@f3+2,c
  7904  0013F8  5026               	movf	___ftdiv@sign,w,c
  7905  0013FA  0F89               	addlw	137
  7906  0013FC  5E25               	subwf	___ftdiv@exp,f,c
  7907  0013FE  C01A  F026         	movff	___ftdiv@f1+2,___ftdiv@sign
  7908  001402  501D               	movf	___ftdiv@f2+2,w,c
  7909  001404  1A26               	xorwf	___ftdiv@sign,f,c
  7910  001406  0E80               	movlw	128
  7911  001408  1626               	andwf	___ftdiv@sign,f,c
  7912  00140A  8E19               	bsf	___ftdiv@f1+1,7,c
  7913  00140C  0EFF               	movlw	255
  7914  00140E  1618               	andwf	___ftdiv@f1,f,c
  7915  001410  0EFF               	movlw	255
  7916  001412  1619               	andwf	___ftdiv@f1+1,f,c
  7917  001414  0E00               	movlw	0
  7918  001416  161A               	andwf	___ftdiv@f1+2,f,c
  7919  001418  8E1C               	bsf	___ftdiv@f2+1,7,c
  7920  00141A  0EFF               	movlw	255
  7921  00141C  161B               	andwf	___ftdiv@f2,f,c
  7922  00141E  0EFF               	movlw	255
  7923  001420  161C               	andwf	___ftdiv@f2+1,f,c
  7924  001422  0E00               	movlw	0
  7925  001424  161D               	andwf	___ftdiv@f2+2,f,c
  7926  001426  0E18               	movlw	24
  7927  001428  6E21               	movwf	___ftdiv@cntr,c
  7928  00142A                     i2l3084:
  7929  00142A  90D8               	bcf	status,0,c
  7930  00142C  3622               	rlcf	___ftdiv@f3,f,c
  7931  00142E  3623               	rlcf	___ftdiv@f3+1,f,c
  7932  001430  3624               	rlcf	___ftdiv@f3+2,f,c
  7933  001432  501B               	movf	___ftdiv@f2,w,c
  7934  001434  5C18               	subwf	___ftdiv@f1,w,c
  7935  001436  501C               	movf	___ftdiv@f2+1,w,c
  7936  001438  5819               	subwfb	___ftdiv@f1+1,w,c
  7937  00143A  501D               	movf	___ftdiv@f2+2,w,c
  7938  00143C  581A               	subwfb	___ftdiv@f1+2,w,c
  7939  00143E  A0D8               	btfss	status,0,c
  7940  001440  D007               	goto	i2l800
  7941  001442  501B               	movf	___ftdiv@f2,w,c
  7942  001444  5E18               	subwf	___ftdiv@f1,f,c
  7943  001446  501C               	movf	___ftdiv@f2+1,w,c
  7944  001448  5A19               	subwfb	___ftdiv@f1+1,f,c
  7945  00144A  501D               	movf	___ftdiv@f2+2,w,c
  7946  00144C  5A1A               	subwfb	___ftdiv@f1+2,f,c
  7947  00144E  8022               	bsf	___ftdiv@f3,0,c
  7948  001450                     i2l800:
  7949  001450  90D8               	bcf	status,0,c
  7950  001452  3618               	rlcf	___ftdiv@f1,f,c
  7951  001454  3619               	rlcf	___ftdiv@f1+1,f,c
  7952  001456  361A               	rlcf	___ftdiv@f1+2,f,c
  7953  001458  2E21               	decfsz	___ftdiv@cntr,f,c
  7954  00145A  D7E7               	goto	i2l3084
  7955  00145C  C022  F001         	movff	___ftdiv@f3,___ftpack@arg
  7956  001460  C023  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  7957  001464  C024  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  7958  001468  C025  F004         	movff	___ftdiv@exp,___ftpack@exp
  7959  00146C  C026  F005         	movff	___ftdiv@sign,___ftpack@sign
  7960  001470  EC26  F00C         	call	___ftpack	;wreg free
  7961  001474  C001  F018         	movff	?___ftpack,?___ftdiv
  7962  001478  C002  F019         	movff	?___ftpack+1,?___ftdiv+1
  7963  00147C  C003  F01A         	movff	?___ftpack+2,?___ftdiv+2
  7964  001480  0012               	return	
  7965  001482                     __end_of___ftdiv:
  7966                           	opt stack 0
  7967                           pclatu	equ	0xFFB
  7968                           pclath	equ	0xFFA
  7969                           tblptru	equ	0xFF8
  7970                           tblptrh	equ	0xFF7
  7971                           tblptrl	equ	0xFF6
  7972                           tablat	equ	0xFF5
  7973                           prodh	equ	0xFF4
  7974                           prodl	equ	0xFF3
  7975                           intcon	equ	0xFF2
  7976                           intcon3	equ	0xFF0
  7977                           postinc0	equ	0xFEE
  7978                           fsr0h	equ	0xFEA
  7979                           fsr0l	equ	0xFE9
  7980                           wreg	equ	0xFE8
  7981                           plusw1	equ	0xFE3
  7982                           fsr1h	equ	0xFE2
  7983                           fsr1l	equ	0xFE1
  7984                           indf2	equ	0xFDF
  7985                           postinc2	equ	0xFDE
  7986                           postdec2	equ	0xFDD
  7987                           plusw2	equ	0xFDB
  7988                           fsr2h	equ	0xFDA
  7989                           fsr2l	equ	0xFD9
  7990                           status	equ	0xFD8
  7991                           
  7992 ;; *************** function ___awtoft *****************
  7993 ;; Defined at:
  7994 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awtoft.c"
  7995 ;; Parameters:    Size  Location     Type
  7996 ;;  c               2    8[COMRAM] int 
  7997 ;; Auto vars:     Size  Location     Type
  7998 ;;  sign            1   11[COMRAM] unsigned char 
  7999 ;; Return value:  Size  Location     Type
  8000 ;;                  3    8[COMRAM] float 
  8001 ;; Registers used:
  8002 ;;		wreg, status,2, status,0, cstack
  8003 ;; Tracked objects:
  8004 ;;		On entry : 0/0
  8005 ;;		On exit  : 0/0
  8006 ;;		Unchanged: 0/0
  8007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8008 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8009 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8011 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8012 ;;Total ram usage:        4 bytes
  8013 ;; Hardware stack levels used:    1
  8014 ;; Hardware stack levels required when called:    1
  8015 ;; This function calls:
  8016 ;;		___ftpack
  8017 ;; This function is called by:
  8018 ;;		_checkV
  8019 ;; This function uses a non-reentrant model
  8020 ;;
  8021                           
  8022                           	psect	text39
  8023  002030                     __ptext39:
  8024                           	opt stack 0
  8025  002030                     ___awtoft:
  8026                           	opt stack 21
  8027                           
  8028                           ;incstack = 0
  8029  002030  0E00               	movlw	0
  8030  002032  6E0C               	movwf	___awtoft@sign,c
  8031  002034  AE0A               	btfss	___awtoft@c+1,7,c
  8032  002036  D006               	goto	i2l3198
  8033  002038  6C09               	negf	___awtoft@c,c
  8034  00203A  1E0A               	comf	___awtoft@c+1,f,c
  8035  00203C  B0D8               	btfsc	status,0,c
  8036  00203E  2A0A               	incf	___awtoft@c+1,f,c
  8037  002040  0E01               	movlw	1
  8038  002042  6E0C               	movwf	___awtoft@sign,c
  8039  002044                     i2l3198:
  8040  002044  C009  F001         	movff	___awtoft@c,___ftpack@arg
  8041  002048  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  8042  00204C  6A03               	clrf	___ftpack@arg+2,c
  8043  00204E  0E8E               	movlw	142
  8044  002050  6E04               	movwf	___ftpack@exp,c
  8045  002052  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  8046  002056  EC26  F00C         	call	___ftpack	;wreg free
  8047  00205A  C001  F009         	movff	?___ftpack,?___awtoft
  8048  00205E  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  8049  002062  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  8050  002066  0012               	return	
  8051  002068                     __end_of___awtoft:
  8052                           	opt stack 0
  8053                           pclatu	equ	0xFFB
  8054                           pclath	equ	0xFFA
  8055                           tblptru	equ	0xFF8
  8056                           tblptrh	equ	0xFF7
  8057                           tblptrl	equ	0xFF6
  8058                           tablat	equ	0xFF5
  8059                           prodh	equ	0xFF4
  8060                           prodl	equ	0xFF3
  8061                           intcon	equ	0xFF2
  8062                           intcon3	equ	0xFF0
  8063                           postinc0	equ	0xFEE
  8064                           fsr0h	equ	0xFEA
  8065                           fsr0l	equ	0xFE9
  8066                           wreg	equ	0xFE8
  8067                           plusw1	equ	0xFE3
  8068                           fsr1h	equ	0xFE2
  8069                           fsr1l	equ	0xFE1
  8070                           indf2	equ	0xFDF
  8071                           postinc2	equ	0xFDE
  8072                           postdec2	equ	0xFDD
  8073                           plusw2	equ	0xFDB
  8074                           fsr2h	equ	0xFDA
  8075                           fsr2l	equ	0xFD9
  8076                           status	equ	0xFD8
  8077                           
  8078 ;; *************** function ___ftpack *****************
  8079 ;; Defined at:
  8080 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  8081 ;; Parameters:    Size  Location     Type
  8082 ;;  arg             3    0[COMRAM] unsigned um
  8083 ;;  exp             1    3[COMRAM] unsigned char 
  8084 ;;  sign            1    4[COMRAM] unsigned char 
  8085 ;; Auto vars:     Size  Location     Type
  8086 ;;		None
  8087 ;; Return value:  Size  Location     Type
  8088 ;;                  3    0[COMRAM] float 
  8089 ;; Registers used:
  8090 ;;		wreg, status,2, status,0
  8091 ;; Tracked objects:
  8092 ;;		On entry : 0/0
  8093 ;;		On exit  : 0/0
  8094 ;;		Unchanged: 0/0
  8095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8096 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8098 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8099 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8100 ;;Total ram usage:        8 bytes
  8101 ;; Hardware stack levels used:    1
  8102 ;; This function calls:
  8103 ;;		Nothing
  8104 ;; This function is called by:
  8105 ;;		___awtoft
  8106 ;;		___ftdiv
  8107 ;;		___ftmul
  8108 ;; This function uses a non-reentrant model
  8109 ;;
  8110                           
  8111                           	psect	text40
  8112  00184C                     __ptext40:
  8113                           	opt stack 0
  8114  00184C                     ___ftpack:
  8115                           	opt stack 21
  8116                           
  8117                           ;incstack = 0
  8118  00184C  5004               	movf	___ftpack@exp,w,c
  8119  00184E  B4D8               	btfsc	status,2,c
  8120  001850  D005               	goto	i2l2934
  8121  001852  5001               	movf	___ftpack@arg,w,c
  8122  001854  1002               	iorwf	___ftpack@arg+1,w,c
  8123  001856  1003               	iorwf	___ftpack@arg+2,w,c
  8124  001858  A4D8               	btfss	status,2,c
  8125  00185A  D00C               	goto	i2l2940
  8126  00185C                     i2l2934:
  8127  00185C  0E00               	movlw	0
  8128  00185E  6E01               	movwf	?___ftpack,c
  8129  001860  0E00               	movlw	0
  8130  001862  6E02               	movwf	?___ftpack+1,c
  8131  001864  0E00               	movlw	0
  8132  001866  6E03               	movwf	?___ftpack+2,c
  8133  001868  0012               	return	
  8134  00186A                     i2l2938:
  8135  00186A  2A04               	incf	___ftpack@exp,f,c
  8136  00186C  90D8               	bcf	status,0,c
  8137  00186E  3203               	rrcf	___ftpack@arg+2,f,c
  8138  001870  3202               	rrcf	___ftpack@arg+1,f,c
  8139  001872  3201               	rrcf	___ftpack@arg,f,c
  8140  001874                     i2l2940:
  8141  001874  0E00               	movlw	0
  8142  001876  1401               	andwf	___ftpack@arg,w,c
  8143  001878  6E06               	movwf	??___ftpack& (0+255),c
  8144  00187A  0E00               	movlw	0
  8145  00187C  1402               	andwf	___ftpack@arg+1,w,c
  8146  00187E  6E07               	movwf	(??___ftpack+1)& (0+255),c
  8147  001880  0EFE               	movlw	254
  8148  001882  1403               	andwf	___ftpack@arg+2,w,c
  8149  001884  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8150  001886  5006               	movf	??___ftpack,w,c
  8151  001888  1007               	iorwf	??___ftpack+1,w,c
  8152  00188A  1008               	iorwf	??___ftpack+2,w,c
  8153  00188C  B4D8               	btfsc	status,2,c
  8154  00188E  D00C               	goto	i2l2946
  8155  001890  D7EC               	goto	i2l2938
  8156  001892                     i2l2942:
  8157  001892  2A04               	incf	___ftpack@exp,f,c
  8158  001894  0E01               	movlw	1
  8159  001896  2601               	addwf	___ftpack@arg,f,c
  8160  001898  0E00               	movlw	0
  8161  00189A  2202               	addwfc	___ftpack@arg+1,f,c
  8162  00189C  0E00               	movlw	0
  8163  00189E  2203               	addwfc	___ftpack@arg+2,f,c
  8164  0018A0  90D8               	bcf	status,0,c
  8165  0018A2  3203               	rrcf	___ftpack@arg+2,f,c
  8166  0018A4  3202               	rrcf	___ftpack@arg+1,f,c
  8167  0018A6  3201               	rrcf	___ftpack@arg,f,c
  8168  0018A8                     i2l2946:
  8169  0018A8  0E00               	movlw	0
  8170  0018AA  1401               	andwf	___ftpack@arg,w,c
  8171  0018AC  6E06               	movwf	??___ftpack& (0+255),c
  8172  0018AE  0E00               	movlw	0
  8173  0018B0  1402               	andwf	___ftpack@arg+1,w,c
  8174  0018B2  6E07               	movwf	(??___ftpack+1)& (0+255),c
  8175  0018B4  0EFF               	movlw	255
  8176  0018B6  1403               	andwf	___ftpack@arg+2,w,c
  8177  0018B8  6E08               	movwf	(??___ftpack+2)& (0+255),c
  8178  0018BA  5006               	movf	??___ftpack,w,c
  8179  0018BC  1007               	iorwf	??___ftpack+1,w,c
  8180  0018BE  1008               	iorwf	??___ftpack+2,w,c
  8181  0018C0  B4D8               	btfsc	status,2,c
  8182  0018C2  D006               	goto	i2l2950
  8183  0018C4  D7E6               	goto	i2l2942
  8184  0018C6                     i2l2948:
  8185  0018C6  0604               	decf	___ftpack@exp,f,c
  8186  0018C8  90D8               	bcf	status,0,c
  8187  0018CA  3601               	rlcf	___ftpack@arg,f,c
  8188  0018CC  3602               	rlcf	___ftpack@arg+1,f,c
  8189  0018CE  3603               	rlcf	___ftpack@arg+2,f,c
  8190  0018D0                     i2l2950:
  8191  0018D0  BE02               	btfsc	___ftpack@arg+1,7,c
  8192  0018D2  D003               	goto	i2l742
  8193  0018D4  0E02               	movlw	2
  8194  0018D6  6004               	cpfslt	___ftpack@exp,c
  8195  0018D8  D7F6               	goto	i2l2948
  8196  0018DA                     i2l742:
  8197  0018DA  A004               	btfss	___ftpack@exp,0,c
  8198  0018DC  9E02               	bcf	___ftpack@arg+1,7,c
  8199  0018DE  90D8               	bcf	status,0,c
  8200  0018E0  3204               	rrcf	___ftpack@exp,f,c
  8201  0018E2  5004               	movf	___ftpack@exp,w,c
  8202  0018E4  1203               	iorwf	___ftpack@arg+2,f,c
  8203  0018E6  5005               	movf	___ftpack@sign,w,c
  8204  0018E8  A4D8               	btfss	status,2,c
  8205  0018EA  8E03               	bsf	___ftpack@arg+2,7,c
  8206  0018EC  C001  F001         	movff	___ftpack@arg,?___ftpack
  8207  0018F0  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  8208  0018F4  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  8209  0018F8  0012               	return	
  8210  0018FA                     __end_of___ftpack:
  8211                           	opt stack 0
  8212                           pclatu	equ	0xFFB
  8213                           pclath	equ	0xFFA
  8214                           tblptru	equ	0xFF8
  8215                           tblptrh	equ	0xFF7
  8216                           tblptrl	equ	0xFF6
  8217                           tablat	equ	0xFF5
  8218                           prodh	equ	0xFF4
  8219                           prodl	equ	0xFF3
  8220                           intcon	equ	0xFF2
  8221                           intcon3	equ	0xFF0
  8222                           postinc0	equ	0xFEE
  8223                           fsr0h	equ	0xFEA
  8224                           fsr0l	equ	0xFE9
  8225                           wreg	equ	0xFE8
  8226                           plusw1	equ	0xFE3
  8227                           fsr1h	equ	0xFE2
  8228                           fsr1l	equ	0xFE1
  8229                           indf2	equ	0xFDF
  8230                           postinc2	equ	0xFDE
  8231                           postdec2	equ	0xFDD
  8232                           plusw2	equ	0xFDB
  8233                           fsr2h	equ	0xFDA
  8234                           fsr2l	equ	0xFD9
  8235                           status	equ	0xFD8
  8236                           
  8237 ;; *************** function _AD *****************
  8238 ;; Defined at:
  8239 ;;		line 4 in file "sensors.c"
  8240 ;; Parameters:    Size  Location     Type
  8241 ;;  channel         1    wreg     unsigned char 
  8242 ;; Auto vars:     Size  Location     Type
  8243 ;;  channel         1    4[COMRAM] unsigned char 
  8244 ;; Return value:  Size  Location     Type
  8245 ;;                  2    0[COMRAM] int 
  8246 ;; Registers used:
  8247 ;;		wreg, status,2, status,0, cstack
  8248 ;; Tracked objects:
  8249 ;;		On entry : 0/0
  8250 ;;		On exit  : 0/0
  8251 ;;		Unchanged: 0/0
  8252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8253 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8254 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8255 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8256 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8257 ;;Total ram usage:        5 bytes
  8258 ;; Hardware stack levels used:    1
  8259 ;; This function calls:
  8260 ;;		Nothing
  8261 ;; This function is called by:
  8262 ;;		_checkAA
  8263 ;;		_checkC
  8264 ;;		_check9
  8265 ;; This function uses a non-reentrant model
  8266 ;;
  8267                           
  8268                           	psect	text41
  8269  001FF4                     __ptext41:
  8270                           	opt stack 0
  8271  001FF4                     _AD:
  8272                           	opt stack 23
  8273                           
  8274                           ;incstack = 0
  8275                           ;AD@channel stored from wreg
  8276  001FF4  6E05               	movwf	AD@channel,c
  8277                           
  8278                           ;sensors.c: 6: ADCON0 = ((channel << 2));
  8279  001FF6  4405               	rlncf	AD@channel,w,c
  8280  001FF8  46E8               	rlncf	wreg,f,c
  8281  001FFA  0BFC               	andlw	252
  8282  001FFC  6EC2               	movwf	4034,c	;volatile
  8283                           
  8284                           ;sensors.c: 7: ADON = 1;
  8285  001FFE  80C2               	bsf	4034,0,c	;volatile
  8286                           
  8287                           ;sensors.c: 8: ADCON0bits.GO = 1;
  8288  002000  82C2               	bsf	4034,1,c	;volatile
  8289                           
  8290                           ;sensors.c: 9: while (ADCON0bits.GO_NOT_DONE) {
  8291  002002  D008               	goto	i2l3474
  8292  002004                     i2l3472:
  8293                           
  8294                           ;sensors.c: 10: _delay((unsigned long)((10)*(8000000/4000.0)));
  8295  002004  0E1A               	movlw	26
  8296  002006  6E03               	movwf	??_AD& (0+255),c
  8297  002008  0EF8               	movlw	248
  8298  00200A                     i2u340_47:
  8299  00200A  2EE8               	decfsz	wreg,f,c
  8300  00200C  D7FE               	bra	i2u340_47
  8301  00200E  2E03               	decfsz	??_AD& (0+255),f,c
  8302  002010  D7FC               	bra	i2u340_47
  8303  002012  D000               	nop2	
  8304  002014                     i2l3474:
  8305  002014  B2C2               	btfsc	4034,1,c	;volatile
  8306  002016  D7F6               	goto	i2l3472
  8307                           
  8308                           ;sensors.c: 11: }
  8309                           ;sensors.c: 12: return (ADRESH << 8) | ADRESL;
  8310  002018  50C3               	movf	4035,w,c	;volatile
  8311  00201A  CFC4 F003          	movff	4036,??_AD	;volatile
  8312  00201E  6A04               	clrf	(??_AD+1)& (0+255),c
  8313  002020  C003  F004         	movff	??_AD,??_AD+1
  8314  002024  6A03               	clrf	??_AD,c
  8315  002026  1003               	iorwf	??_AD,w,c
  8316  002028  6E01               	movwf	?_AD,c
  8317  00202A  5004               	movf	??_AD+1,w,c
  8318  00202C  6E02               	movwf	?_AD+1,c
  8319  00202E  0012               	return	
  8320  002030                     __end_of_AD:
  8321                           	opt stack 0
  8322                           pclatu	equ	0xFFB
  8323                           pclath	equ	0xFFA
  8324                           tblptru	equ	0xFF8
  8325                           tblptrh	equ	0xFF7
  8326                           tblptrl	equ	0xFF6
  8327                           tablat	equ	0xFF5
  8328                           prodh	equ	0xFF4
  8329                           prodl	equ	0xFF3
  8330                           intcon	equ	0xFF2
  8331                           intcon3	equ	0xFF0
  8332                           postinc0	equ	0xFEE
  8333                           fsr0h	equ	0xFEA
  8334                           fsr0l	equ	0xFE9
  8335                           wreg	equ	0xFE8
  8336                           plusw1	equ	0xFE3
  8337                           fsr1h	equ	0xFE2
  8338                           fsr1l	equ	0xFE1
  8339                           indf2	equ	0xFDF
  8340                           postinc2	equ	0xFDE
  8341                           postdec2	equ	0xFDD
  8342                           plusw2	equ	0xFDB
  8343                           fsr2h	equ	0xFDA
  8344                           fsr2l	equ	0xFD9
  8345                           status	equ	0xFD8
  8346                           
  8347 ;; *************** function _WriteRun *****************
  8348 ;; Defined at:
  8349 ;;		line 77 in file "eeprom.c"
  8350 ;; Parameters:    Size  Location     Type
  8351 ;;  sorted          2    6[COMRAM] PTR unsigned char 
  8352 ;;		 -> simulate@sorted(4), 
  8353 ;;  time            2    8[COMRAM] unsigned int 
  8354 ;; Auto vars:     Size  Location     Type
  8355 ;;  add             2   12[COMRAM] unsigned int 
  8356 ;; Return value:  Size  Location     Type
  8357 ;;                  1    wreg      void 
  8358 ;; Registers used:
  8359 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8360 ;; Tracked objects:
  8361 ;;		On entry : 0/0
  8362 ;;		On exit  : 0/0
  8363 ;;		Unchanged: 0/0
  8364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8365 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8366 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8367 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8368 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8369 ;;Total ram usage:        8 bytes
  8370 ;; Hardware stack levels used:    1
  8371 ;; Hardware stack levels required when called:    1
  8372 ;; This function calls:
  8373 ;;		_WriteEE
  8374 ;;		i2___wmul
  8375 ;; This function is called by:
  8376 ;;		_simulate
  8377 ;; This function uses a non-reentrant model
  8378 ;;
  8379                           
  8380                           	psect	text42
  8381  000E36                     __ptext42:
  8382                           	opt stack 0
  8383  000E36                     _WriteRun:
  8384                           	opt stack 23
  8385                           
  8386                           ;eeprom.c: 78: unsigned int add = ++Latest;
  8387                           
  8388                           ;incstack = 0
  8389  000E36  0100               	movlb	0	; () banked
  8390  000E38  2BCB               	incf	_Latest& (0+255),f,b
  8391  000E3A  C0CB  F00D         	movff	_Latest,WriteRun@add
  8392  000E3E  6A0E               	clrf	WriteRun@add+1,c
  8393                           
  8394                           ; BSR set to: 0
  8395                           ;eeprom.c: 79: if (add > 3) {
  8396  000E40  500E               	movf	WriteRun@add+1,w,c
  8397  000E42  E104               	bnz	i2u302_40
  8398  000E44  0E04               	movlw	4
  8399  000E46  5C0D               	subwf	WriteRun@add,w,c
  8400  000E48  A0D8               	btfss	status,0,c
  8401  000E4A  D006               	goto	i2l4106
  8402  000E4C                     i2u302_40:
  8403                           
  8404                           ; BSR set to: 0
  8405                           ;eeprom.c: 80: add -= 4;
  8406  000E4C  0E04               	movlw	4
  8407  000E4E  5E0D               	subwf	WriteRun@add,f,c
  8408  000E50  0E00               	movlw	0
  8409  000E52  5A0E               	subwfb	WriteRun@add+1,f,c
  8410                           
  8411                           ; BSR set to: 0
  8412                           ;eeprom.c: 81: Latest = add;
  8413  000E54  C00D  F0CB         	movff	WriteRun@add,_Latest
  8414  000E58                     i2l4106:
  8415                           
  8416                           ; BSR set to: 0
  8417                           ;eeprom.c: 82: }
  8418                           ;eeprom.c: 83: add *= 5;
  8419  000E58  C00D  F001         	movff	WriteRun@add,i2___wmul@multiplier
  8420  000E5C  C00E  F002         	movff	WriteRun@add+1,i2___wmul@multiplier+1
  8421  000E60  0E00               	movlw	0
  8422  000E62  6E04               	movwf	i2___wmul@multiplicand+1,c
  8423  000E64  0E05               	movlw	5
  8424  000E66  6E03               	movwf	i2___wmul@multiplicand,c
  8425  000E68  ECE2  F010         	call	i2___wmul	;wreg free
  8426  000E6C  C001  F00D         	movff	?i2___wmul,WriteRun@add
  8427  000E70  C002  F00E         	movff	?i2___wmul+1,WriteRun@add+1
  8428                           
  8429                           ;eeprom.c: 84: WriteEE(add++ *8, time);
  8430  000E74  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  8431  000E78  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  8432  000E7C  90D8               	bcf	status,0,c
  8433  000E7E  360B               	rlcf	??_WriteRun,f,c
  8434  000E80  360C               	rlcf	??_WriteRun+1,f,c
  8435  000E82  90D8               	bcf	status,0,c
  8436  000E84  360B               	rlcf	??_WriteRun,f,c
  8437  000E86  360C               	rlcf	??_WriteRun+1,f,c
  8438  000E88  90D8               	bcf	status,0,c
  8439  000E8A  360B               	rlcf	??_WriteRun,f,c
  8440  000E8C  360C               	rlcf	??_WriteRun+1,f,c
  8441  000E8E  C00B  F001         	movff	??_WriteRun,WriteEE@address
  8442  000E92  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  8443  000E96  C009  F003         	movff	WriteRun@time,WriteEE@data
  8444  000E9A  ECCF  F010         	call	_WriteEE	;wreg free
  8445  000E9E  4A0D               	infsnz	WriteRun@add,f,c
  8446  000EA0  2A0E               	incf	WriteRun@add+1,f,c
  8447                           
  8448                           ;eeprom.c: 85: WriteEE(add++ *8, sorted[0]);
  8449  000EA2  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  8450  000EA6  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  8451  000EAA  90D8               	bcf	status,0,c
  8452  000EAC  360B               	rlcf	??_WriteRun,f,c
  8453  000EAE  360C               	rlcf	??_WriteRun+1,f,c
  8454  000EB0  90D8               	bcf	status,0,c
  8455  000EB2  360B               	rlcf	??_WriteRun,f,c
  8456  000EB4  360C               	rlcf	??_WriteRun+1,f,c
  8457  000EB6  90D8               	bcf	status,0,c
  8458  000EB8  360B               	rlcf	??_WriteRun,f,c
  8459  000EBA  360C               	rlcf	??_WriteRun+1,f,c
  8460  000EBC  C00B  F001         	movff	??_WriteRun,WriteEE@address
  8461  000EC0  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  8462  000EC4  C007  FFD9         	movff	WriteRun@sorted,fsr2l
  8463  000EC8  C008  FFDA         	movff	WriteRun@sorted+1,fsr2h
  8464  000ECC  50DF               	movf	indf2,w,c
  8465  000ECE  6E03               	movwf	WriteEE@data,c
  8466  000ED0  ECCF  F010         	call	_WriteEE	;wreg free
  8467  000ED4  4A0D               	infsnz	WriteRun@add,f,c
  8468  000ED6  2A0E               	incf	WriteRun@add+1,f,c
  8469                           
  8470                           ;eeprom.c: 86: WriteEE(add++ *8, sorted[1]);
  8471  000ED8  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  8472  000EDC  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  8473  000EE0  90D8               	bcf	status,0,c
  8474  000EE2  360B               	rlcf	??_WriteRun,f,c
  8475  000EE4  360C               	rlcf	??_WriteRun+1,f,c
  8476  000EE6  90D8               	bcf	status,0,c
  8477  000EE8  360B               	rlcf	??_WriteRun,f,c
  8478  000EEA  360C               	rlcf	??_WriteRun+1,f,c
  8479  000EEC  90D8               	bcf	status,0,c
  8480  000EEE  360B               	rlcf	??_WriteRun,f,c
  8481  000EF0  360C               	rlcf	??_WriteRun+1,f,c
  8482  000EF2  C00B  F001         	movff	??_WriteRun,WriteEE@address
  8483  000EF6  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  8484  000EFA  EE20 F001          	lfsr	2,1
  8485  000EFE  5007               	movf	WriteRun@sorted,w,c
  8486  000F00  26D9               	addwf	fsr2l,f,c
  8487  000F02  5008               	movf	WriteRun@sorted+1,w,c
  8488  000F04  22DA               	addwfc	fsr2h,f,c
  8489  000F06  50DF               	movf	indf2,w,c
  8490  000F08  6E03               	movwf	WriteEE@data,c
  8491  000F0A  ECCF  F010         	call	_WriteEE	;wreg free
  8492  000F0E  4A0D               	infsnz	WriteRun@add,f,c
  8493  000F10  2A0E               	incf	WriteRun@add+1,f,c
  8494                           
  8495                           ;eeprom.c: 87: WriteEE(add++ *8, sorted[2]);
  8496  000F12  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  8497  000F16  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  8498  000F1A  90D8               	bcf	status,0,c
  8499  000F1C  360B               	rlcf	??_WriteRun,f,c
  8500  000F1E  360C               	rlcf	??_WriteRun+1,f,c
  8501  000F20  90D8               	bcf	status,0,c
  8502  000F22  360B               	rlcf	??_WriteRun,f,c
  8503  000F24  360C               	rlcf	??_WriteRun+1,f,c
  8504  000F26  90D8               	bcf	status,0,c
  8505  000F28  360B               	rlcf	??_WriteRun,f,c
  8506  000F2A  360C               	rlcf	??_WriteRun+1,f,c
  8507  000F2C  C00B  F001         	movff	??_WriteRun,WriteEE@address
  8508  000F30  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  8509  000F34  EE20 F002          	lfsr	2,2
  8510  000F38  5007               	movf	WriteRun@sorted,w,c
  8511  000F3A  26D9               	addwf	fsr2l,f,c
  8512  000F3C  5008               	movf	WriteRun@sorted+1,w,c
  8513  000F3E  22DA               	addwfc	fsr2h,f,c
  8514  000F40  50DF               	movf	indf2,w,c
  8515  000F42  6E03               	movwf	WriteEE@data,c
  8516  000F44  ECCF  F010         	call	_WriteEE	;wreg free
  8517  000F48  4A0D               	infsnz	WriteRun@add,f,c
  8518  000F4A  2A0E               	incf	WriteRun@add+1,f,c
  8519                           
  8520                           ;eeprom.c: 88: WriteEE(add++ *8, sorted[3]);
  8521  000F4C  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  8522  000F50  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  8523  000F54  90D8               	bcf	status,0,c
  8524  000F56  360B               	rlcf	??_WriteRun,f,c
  8525  000F58  360C               	rlcf	??_WriteRun+1,f,c
  8526  000F5A  90D8               	bcf	status,0,c
  8527  000F5C  360B               	rlcf	??_WriteRun,f,c
  8528  000F5E  360C               	rlcf	??_WriteRun+1,f,c
  8529  000F60  90D8               	bcf	status,0,c
  8530  000F62  360B               	rlcf	??_WriteRun,f,c
  8531  000F64  360C               	rlcf	??_WriteRun+1,f,c
  8532  000F66  C00B  F001         	movff	??_WriteRun,WriteEE@address
  8533  000F6A  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  8534  000F6E  EE20 F003          	lfsr	2,3
  8535  000F72  5007               	movf	WriteRun@sorted,w,c
  8536  000F74  26D9               	addwf	fsr2l,f,c
  8537  000F76  5008               	movf	WriteRun@sorted+1,w,c
  8538  000F78  22DA               	addwfc	fsr2h,f,c
  8539  000F7A  50DF               	movf	indf2,w,c
  8540  000F7C  6E03               	movwf	WriteEE@data,c
  8541  000F7E  ECCF  F010         	call	_WriteEE	;wreg free
  8542  000F82  4A0D               	infsnz	WriteRun@add,f,c
  8543  000F84  2A0E               	incf	WriteRun@add+1,f,c
  8544                           
  8545                           ;eeprom.c: 89: WriteEE(160, Latest);
  8546  000F86  0E00               	movlw	0
  8547  000F88  6E02               	movwf	WriteEE@address+1,c
  8548  000F8A  0EA0               	movlw	160
  8549  000F8C  6E01               	movwf	WriteEE@address,c
  8550  000F8E  C0CB  F003         	movff	_Latest,WriteEE@data
  8551  000F92  ECCF  F010         	call	_WriteEE	;wreg free
  8552  000F96  0012               	return		;funcret
  8553  000F98                     __end_of_WriteRun:
  8554                           	opt stack 0
  8555                           pclatu	equ	0xFFB
  8556                           pclath	equ	0xFFA
  8557                           tblptru	equ	0xFF8
  8558                           tblptrh	equ	0xFF7
  8559                           tblptrl	equ	0xFF6
  8560                           tablat	equ	0xFF5
  8561                           prodh	equ	0xFF4
  8562                           prodl	equ	0xFF3
  8563                           intcon	equ	0xFF2
  8564                           intcon3	equ	0xFF0
  8565                           postinc0	equ	0xFEE
  8566                           fsr0h	equ	0xFEA
  8567                           fsr0l	equ	0xFE9
  8568                           wreg	equ	0xFE8
  8569                           plusw1	equ	0xFE3
  8570                           fsr1h	equ	0xFE2
  8571                           fsr1l	equ	0xFE1
  8572                           indf2	equ	0xFDF
  8573                           postinc2	equ	0xFDE
  8574                           postdec2	equ	0xFDD
  8575                           plusw2	equ	0xFDB
  8576                           fsr2h	equ	0xFDA
  8577                           fsr2l	equ	0xFD9
  8578                           status	equ	0xFD8
  8579                           
  8580 ;; *************** function _WriteEE *****************
  8581 ;; Defined at:
  8582 ;;		line 34 in file "eeprom.c"
  8583 ;; Parameters:    Size  Location     Type
  8584 ;;  address         2    0[COMRAM] unsigned int 
  8585 ;;  data            1    2[COMRAM] unsigned char 
  8586 ;; Auto vars:     Size  Location     Type
  8587 ;;		None
  8588 ;; Return value:  Size  Location     Type
  8589 ;;                  1    wreg      void 
  8590 ;; Registers used:
  8591 ;;		wreg, status,2
  8592 ;; Tracked objects:
  8593 ;;		On entry : 0/0
  8594 ;;		On exit  : 0/0
  8595 ;;		Unchanged: 0/0
  8596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8597 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8600 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8601 ;;Total ram usage:        3 bytes
  8602 ;; Hardware stack levels used:    1
  8603 ;; This function calls:
  8604 ;;		Nothing
  8605 ;; This function is called by:
  8606 ;;		_WriteRun
  8607 ;; This function uses a non-reentrant model
  8608 ;;
  8609                           
  8610                           	psect	text43
  8611  00219E                     __ptext43:
  8612                           	opt stack 0
  8613  00219E                     _WriteEE:
  8614                           	opt stack 23
  8615                           
  8616                           ;eeprom.c: 36: EEADRH = (unsigned char) (address >> 8);
  8617                           
  8618                           ;incstack = 0
  8619  00219E  5002               	movf	WriteEE@address+1,w,c
  8620  0021A0  6EAA               	movwf	4010,c	;volatile
  8621                           
  8622                           ;eeprom.c: 37: EEADR = (unsigned char) address;
  8623  0021A2  C001  FFA9         	movff	WriteEE@address,4009	;volatile
  8624                           
  8625                           ;eeprom.c: 39: EEDATA = data;
  8626  0021A6  C003  FFA8         	movff	WriteEE@data,4008	;volatile
  8627                           
  8628                           ;eeprom.c: 40: EECON1bits.EEPGD = 0;
  8629  0021AA  9EA6               	bcf	4006,7,c	;volatile
  8630                           
  8631                           ;eeprom.c: 41: EECON1bits.CFGS = 0;
  8632  0021AC  9CA6               	bcf	4006,6,c	;volatile
  8633                           
  8634                           ;eeprom.c: 42: EECON1bits.WREN = 1;
  8635  0021AE  84A6               	bsf	4006,2,c	;volatile
  8636                           
  8637                           ;eeprom.c: 46: EECON2 = 0x55;
  8638  0021B0  0E55               	movlw	85
  8639  0021B2  6EA7               	movwf	4007,c	;volatile
  8640                           
  8641                           ;eeprom.c: 47: EECON2 = 0xAA;
  8642  0021B4  0EAA               	movlw	170
  8643  0021B6  6EA7               	movwf	4007,c	;volatile
  8644                           
  8645                           ;eeprom.c: 48: EECON1bits.WR = 1;
  8646  0021B8  82A6               	bsf	4006,1,c	;volatile
  8647  0021BA                     i2l417:
  8648  0021BA  A8A1               	btfss	4001,4,c	;volatile
  8649  0021BC  D7FE               	goto	i2l417
  8650                           
  8651                           ;eeprom.c: 53: }
  8652                           ;eeprom.c: 55: PIR2bits.EEIF = 0;
  8653  0021BE  98A1               	bcf	4001,4,c	;volatile
  8654                           
  8655                           ;eeprom.c: 56: EECON1bits.WREN = 0;
  8656  0021C0  94A6               	bcf	4006,2,c	;volatile
  8657  0021C2  0012               	return		;funcret
  8658  0021C4                     __end_of_WriteEE:
  8659                           	opt stack 0
  8660                           pclatu	equ	0xFFB
  8661                           pclath	equ	0xFFA
  8662                           tblptru	equ	0xFF8
  8663                           tblptrh	equ	0xFF7
  8664                           tblptrl	equ	0xFF6
  8665                           tablat	equ	0xFF5
  8666                           prodh	equ	0xFF4
  8667                           prodl	equ	0xFF3
  8668                           intcon	equ	0xFF2
  8669                           intcon3	equ	0xFF0
  8670                           postinc0	equ	0xFEE
  8671                           fsr0h	equ	0xFEA
  8672                           fsr0l	equ	0xFE9
  8673                           wreg	equ	0xFE8
  8674                           plusw1	equ	0xFE3
  8675                           fsr1h	equ	0xFE2
  8676                           fsr1l	equ	0xFE1
  8677                           indf2	equ	0xFDF
  8678                           postinc2	equ	0xFDE
  8679                           postdec2	equ	0xFDD
  8680                           plusw2	equ	0xFDB
  8681                           fsr2h	equ	0xFDA
  8682                           fsr2l	equ	0xFD9
  8683                           status	equ	0xFD8
  8684                           
  8685 ;; *************** function _CW90 *****************
  8686 ;; Defined at:
  8687 ;;		line 21 in file "motors.c"
  8688 ;; Parameters:    Size  Location     Type
  8689 ;;  port            2   36[COMRAM] PTR int 
  8690 ;;		 -> simulate@portCW(6), 
  8691 ;; Auto vars:     Size  Location     Type
  8692 ;;		None
  8693 ;; Return value:  Size  Location     Type
  8694 ;;                  1    wreg      void 
  8695 ;; Registers used:
  8696 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8697 ;; Tracked objects:
  8698 ;;		On entry : 0/0
  8699 ;;		On exit  : 0/0
  8700 ;;		Unchanged: 0/0
  8701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8702 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8705 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8706 ;;Total ram usage:        2 bytes
  8707 ;; Hardware stack levels used:    1
  8708 ;; Hardware stack levels required when called:    3
  8709 ;; This function calls:
  8710 ;;		_PWMC
  8711 ;;		i2___lcd_newline
  8712 ;;		i2_printf
  8713 ;; This function is called by:
  8714 ;;		_simulate
  8715 ;; This function uses a non-reentrant model
  8716 ;;
  8717                           
  8718                           	psect	text44
  8719  0020CC                     __ptext44:
  8720                           	opt stack 0
  8721  0020CC                     _CW90:
  8722                           	opt stack 21
  8723                           
  8724                           ;motors.c: 22: __lcd_newline();
  8725                           
  8726                           ;incstack = 0
  8727  0020CC  EC96  F011         	call	i2___lcd_newline	;wreg free
  8728                           
  8729                           ;motors.c: 23: printf("clockwise  ");
  8730  0020D0  0EDD               	movlw	low STR_33
  8731  0020D2  6E0D               	movwf	i2printf@f,c
  8732  0020D4  0EFF               	movlw	high STR_33
  8733  0020D6  6E0E               	movwf	i2printf@f+1,c
  8734  0020D8  EC3D  F004         	call	i2_printf	;wreg free
  8735                           
  8736                           ;motors.c: 24: PWMC(3000, 96, port);
  8737  0020DC  0E0B               	movlw	11
  8738  0020DE  6E0A               	movwf	PWMC@widthus+1,c
  8739  0020E0  0EB8               	movlw	184
  8740  0020E2  6E09               	movwf	PWMC@widthus,c
  8741  0020E4  0E00               	movlw	0
  8742  0020E6  6E0C               	movwf	PWMC@cycles+1,c
  8743  0020E8  0E60               	movlw	96
  8744  0020EA  6E0B               	movwf	PWMC@cycles,c
  8745  0020EC  C025  F00D         	movff	CW90@port,PWMC@port
  8746  0020F0  C026  F00E         	movff	CW90@port+1,PWMC@port+1
  8747  0020F4  ECDF  F008         	call	_PWMC	;wreg free
  8748  0020F8  0012               	return		;funcret
  8749  0020FA                     __end_of_CW90:
  8750                           	opt stack 0
  8751                           pclatu	equ	0xFFB
  8752                           pclath	equ	0xFFA
  8753                           tblptru	equ	0xFF8
  8754                           tblptrh	equ	0xFF7
  8755                           tblptrl	equ	0xFF6
  8756                           tablat	equ	0xFF5
  8757                           prodh	equ	0xFF4
  8758                           prodl	equ	0xFF3
  8759                           intcon	equ	0xFF2
  8760                           intcon3	equ	0xFF0
  8761                           postinc0	equ	0xFEE
  8762                           fsr0h	equ	0xFEA
  8763                           fsr0l	equ	0xFE9
  8764                           wreg	equ	0xFE8
  8765                           plusw1	equ	0xFE3
  8766                           fsr1h	equ	0xFE2
  8767                           fsr1l	equ	0xFE1
  8768                           indf2	equ	0xFDF
  8769                           postinc2	equ	0xFDE
  8770                           postdec2	equ	0xFDD
  8771                           plusw2	equ	0xFDB
  8772                           fsr2h	equ	0xFDA
  8773                           fsr2l	equ	0xFD9
  8774                           status	equ	0xFD8
  8775                           
  8776 ;; *************** function _CCW90 *****************
  8777 ;; Defined at:
  8778 ;;		line 27 in file "motors.c"
  8779 ;; Parameters:    Size  Location     Type
  8780 ;;  port            2   36[COMRAM] PTR int 
  8781 ;;		 -> simulate@portCCW(6), 
  8782 ;; Auto vars:     Size  Location     Type
  8783 ;;		None
  8784 ;; Return value:  Size  Location     Type
  8785 ;;                  1    wreg      void 
  8786 ;; Registers used:
  8787 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8788 ;; Tracked objects:
  8789 ;;		On entry : 0/0
  8790 ;;		On exit  : 0/0
  8791 ;;		Unchanged: 0/0
  8792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8793 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8796 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8797 ;;Total ram usage:        2 bytes
  8798 ;; Hardware stack levels used:    1
  8799 ;; Hardware stack levels required when called:    3
  8800 ;; This function calls:
  8801 ;;		_PWMC
  8802 ;;		i2___lcd_newline
  8803 ;;		i2_printf
  8804 ;; This function is called by:
  8805 ;;		_simulate
  8806 ;; This function uses a non-reentrant model
  8807 ;;
  8808                           
  8809                           	psect	text45
  8810  0020FA                     __ptext45:
  8811                           	opt stack 0
  8812  0020FA                     _CCW90:
  8813                           	opt stack 21
  8814                           
  8815                           ;motors.c: 28: __lcd_newline();
  8816                           
  8817                           ;incstack = 0
  8818  0020FA  EC96  F011         	call	i2___lcd_newline	;wreg free
  8819                           
  8820                           ;motors.c: 29: printf("c-clockwise    ");
  8821  0020FE  0E79               	movlw	low STR_34
  8822  002100  6E0D               	movwf	i2printf@f,c
  8823  002102  0EFF               	movlw	high STR_34
  8824  002104  6E0E               	movwf	i2printf@f+1,c
  8825  002106  EC3D  F004         	call	i2_printf	;wreg free
  8826                           
  8827                           ;motors.c: 30: PWMC(400, 700, port);
  8828  00210A  0E01               	movlw	1
  8829  00210C  6E0A               	movwf	PWMC@widthus+1,c
  8830  00210E  0E90               	movlw	144
  8831  002110  6E09               	movwf	PWMC@widthus,c
  8832  002112  0E02               	movlw	2
  8833  002114  6E0C               	movwf	PWMC@cycles+1,c
  8834  002116  0EBC               	movlw	188
  8835  002118  6E0B               	movwf	PWMC@cycles,c
  8836  00211A  C025  F00D         	movff	CCW90@port,PWMC@port
  8837  00211E  C026  F00E         	movff	CCW90@port+1,PWMC@port+1
  8838  002122  ECDF  F008         	call	_PWMC	;wreg free
  8839  002126  0012               	return		;funcret
  8840  002128                     __end_of_CCW90:
  8841                           	opt stack 0
  8842                           pclatu	equ	0xFFB
  8843                           pclath	equ	0xFFA
  8844                           tblptru	equ	0xFF8
  8845                           tblptrh	equ	0xFF7
  8846                           tblptrl	equ	0xFF6
  8847                           tablat	equ	0xFF5
  8848                           prodh	equ	0xFF4
  8849                           prodl	equ	0xFF3
  8850                           intcon	equ	0xFF2
  8851                           intcon3	equ	0xFF0
  8852                           postinc0	equ	0xFEE
  8853                           fsr0h	equ	0xFEA
  8854                           fsr0l	equ	0xFE9
  8855                           wreg	equ	0xFE8
  8856                           plusw1	equ	0xFE3
  8857                           fsr1h	equ	0xFE2
  8858                           fsr1l	equ	0xFE1
  8859                           indf2	equ	0xFDF
  8860                           postinc2	equ	0xFDE
  8861                           postdec2	equ	0xFDD
  8862                           plusw2	equ	0xFDB
  8863                           fsr2h	equ	0xFDA
  8864                           fsr2l	equ	0xFD9
  8865                           status	equ	0xFD8
  8866                           
  8867 ;; *************** function _PWMC *****************
  8868 ;; Defined at:
  8869 ;;		line 4 in file "motors.c"
  8870 ;; Parameters:    Size  Location     Type
  8871 ;;  widthus         2    8[COMRAM] int 
  8872 ;;  cycles          2   10[COMRAM] int 
  8873 ;;  port            2   12[COMRAM] PTR int 
  8874 ;;		 -> simulate@portCCW(6), simulate@portCW(6), 
  8875 ;; Auto vars:     Size  Location     Type
  8876 ;;  countdown       2   19[COMRAM] int 
  8877 ;; Return value:  Size  Location     Type
  8878 ;;                  1    wreg      void 
  8879 ;; Registers used:
  8880 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8881 ;; Tracked objects:
  8882 ;;		On entry : 0/0
  8883 ;;		On exit  : 0/0
  8884 ;;		Unchanged: 0/0
  8885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8886 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8887 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8888 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8889 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8890 ;;Total ram usage:       13 bytes
  8891 ;; Hardware stack levels used:    1
  8892 ;; Hardware stack levels required when called:    1
  8893 ;; This function calls:
  8894 ;;		___awdiv
  8895 ;; This function is called by:
  8896 ;;		_CW90
  8897 ;;		_CCW90
  8898 ;; This function uses a non-reentrant model
  8899 ;;
  8900                           
  8901                           	psect	text46
  8902  0011BE                     __ptext46:
  8903                           	opt stack 0
  8904  0011BE                     _PWMC:
  8905                           	opt stack 22
  8906                           
  8907                           ;motors.c: 5: widthus /= 10;
  8908                           
  8909                           ;incstack = 0
  8910  0011BE  C009  F001         	movff	PWMC@widthus,___awdiv@dividend
  8911  0011C2  C00A  F002         	movff	PWMC@widthus+1,___awdiv@dividend+1
  8912  0011C6  0E00               	movlw	0
  8913  0011C8  6E04               	movwf	___awdiv@divisor+1,c
  8914  0011CA  0E0A               	movlw	10
  8915  0011CC  6E03               	movwf	___awdiv@divisor,c
  8916  0011CE  EC4D  F00D         	call	___awdiv	;wreg free
  8917  0011D2  C001  F009         	movff	?___awdiv,PWMC@widthus
  8918  0011D6  C002  F00A         	movff	?___awdiv+1,PWMC@widthus+1
  8919                           
  8920                           ;motors.c: 6: widthus -= 1;
  8921  0011DA  0609               	decf	PWMC@widthus,f,c
  8922  0011DC  A0D8               	btfss	status,0,c
  8923  0011DE  060A               	decf	PWMC@widthus+1,f,c
  8924                           
  8925                           ;motors.c: 7: int countdown = widthus;
  8926  0011E0  C009  F014         	movff	PWMC@widthus,PWMC@countdown
  8927  0011E4  C00A  F015         	movff	PWMC@widthus+1,PWMC@countdown+1
  8928  0011E8                     i2l3424:
  8929  0011E8  BE0C               	btfsc	PWMC@cycles+1,7,c
  8930  0011EA  0012               	return	
  8931  0011EC  500C               	movf	PWMC@cycles+1,w,c
  8932  0011EE  E103               	bnz	i2l250
  8933  0011F0  040B               	decf	PWMC@cycles,w,c
  8934  0011F2  A0D8               	btfss	status,0,c
  8935  0011F4  0012               	return	
  8936  0011F6                     i2l250:
  8937                           
  8938                           ;motors.c: 11: countdown = widthus;
  8939  0011F6  C009  F014         	movff	PWMC@widthus,PWMC@countdown
  8940  0011FA  C00A  F015         	movff	PWMC@widthus+1,PWMC@countdown+1
  8941                           
  8942                           ;motors.c: 12: LATC0 = (1 ^ LATC0) & port[0];
  8943  0011FE  0E00               	movlw	0
  8944  001200  6E11               	movwf	_PWMC$1389,c
  8945  001202  B08B               	btfsc	3979,0,c	;volatile
  8946  001204  D00D               	goto	i2l3436
  8947  001206  C00D  FFD9         	movff	PWMC@port,fsr2l
  8948  00120A  C00E  FFDA         	movff	PWMC@port+1,fsr2h
  8949  00120E  CFDE F00F          	movff	postinc2,??_PWMC
  8950  001212  CFDD F010          	movff	postdec2,??_PWMC+1
  8951  001216  300F               	rrcf	??_PWMC,w,c
  8952  001218  A0D8               	btfss	status,0,c
  8953  00121A  D002               	goto	i2l3436
  8954  00121C  0E01               	movlw	1
  8955  00121E  6E11               	movwf	_PWMC$1389,c
  8956  001220                     i2l3436:
  8957  001220  B011               	btfsc	_PWMC$1389,0,c
  8958  001222  D002               	bra	i2u235_45
  8959  001224  908B               	bcf	3979,0,c	;volatile
  8960  001226  D001               	bra	i2u235_46
  8961  001228                     i2u235_45:
  8962  001228  808B               	bsf	3979,0,c	;volatile
  8963  00122A                     i2u235_46:
  8964                           
  8965                           ;motors.c: 13: LATC1 = (1 ^ LATC1) & port[1];
  8966  00122A  0E00               	movlw	0
  8967  00122C  6E12               	movwf	_PWMC$1390,c
  8968  00122E  B28B               	btfsc	3979,1,c	;volatile
  8969  001230  D00F               	goto	i2l3444
  8970  001232  EE20 F002          	lfsr	2,2
  8971  001236  500D               	movf	PWMC@port,w,c
  8972  001238  26D9               	addwf	fsr2l,f,c
  8973  00123A  500E               	movf	PWMC@port+1,w,c
  8974  00123C  22DA               	addwfc	fsr2h,f,c
  8975  00123E  CFDE F00F          	movff	postinc2,??_PWMC
  8976  001242  CFDD F010          	movff	postdec2,??_PWMC+1
  8977  001246  300F               	rrcf	??_PWMC,w,c
  8978  001248  A0D8               	btfss	status,0,c
  8979  00124A  D002               	goto	i2l3444
  8980  00124C  0E01               	movlw	1
  8981  00124E  6E12               	movwf	_PWMC$1390,c
  8982  001250                     i2l3444:
  8983  001250  B012               	btfsc	_PWMC$1390,0,c
  8984  001252  D002               	bra	i2u238_45
  8985  001254  928B               	bcf	3979,1,c	;volatile
  8986  001256  D001               	bra	i2u238_46
  8987  001258                     i2u238_45:
  8988  001258  828B               	bsf	3979,1,c	;volatile
  8989  00125A                     i2u238_46:
  8990                           
  8991                           ;motors.c: 14: LATC2 = (1 ^ LATC2) & port[2];
  8992  00125A  0E00               	movlw	0
  8993  00125C  6E13               	movwf	_PWMC$1391,c
  8994  00125E  B48B               	btfsc	3979,2,c	;volatile
  8995  001260  D00F               	goto	i2l3452
  8996  001262  EE20 F004          	lfsr	2,4
  8997  001266  500D               	movf	PWMC@port,w,c
  8998  001268  26D9               	addwf	fsr2l,f,c
  8999  00126A  500E               	movf	PWMC@port+1,w,c
  9000  00126C  22DA               	addwfc	fsr2h,f,c
  9001  00126E  CFDE F00F          	movff	postinc2,??_PWMC
  9002  001272  CFDD F010          	movff	postdec2,??_PWMC+1
  9003  001276  300F               	rrcf	??_PWMC,w,c
  9004  001278  A0D8               	btfss	status,0,c
  9005  00127A  D002               	goto	i2l3452
  9006  00127C  0E01               	movlw	1
  9007  00127E  6E13               	movwf	_PWMC$1391,c
  9008  001280                     i2l3452:
  9009  001280  B013               	btfsc	_PWMC$1391,0,c
  9010  001282  D002               	bra	i2u241_45
  9011  001284  948B               	bcf	3979,2,c	;volatile
  9012  001286  D001               	bra	i2u241_46
  9013  001288                     i2u241_45:
  9014  001288  848B               	bsf	3979,2,c	;volatile
  9015  00128A                     i2u241_46:
  9016  00128A                     i2l3454:
  9017  00128A  BE15               	btfsc	PWMC@countdown+1,7,c
  9018  00128C  D00D               	goto	i2l3462
  9019  00128E  5015               	movf	PWMC@countdown+1,w,c
  9020  001290  E103               	bnz	i2l3458
  9021  001292  0414               	decf	PWMC@countdown,w,c
  9022  001294  A0D8               	btfss	status,0,c
  9023  001296  D008               	goto	i2l3462
  9024  001298                     i2l3458:
  9025                           
  9026                           ;motors.c: 16: _delay((unsigned long)((5)*(8000000/4000000.0)));
  9027  001298  0E03               	movlw	3
  9028  00129A                     i2u341_47:
  9029  00129A  2EE8               	decfsz	wreg,f,c
  9030  00129C  D7FE               	bra	i2u341_47
  9031  00129E  F000               	nop	
  9032  0012A0  0614               	decf	PWMC@countdown,f,c
  9033  0012A2  A0D8               	btfss	status,0,c
  9034  0012A4  0615               	decf	PWMC@countdown+1,f,c
  9035  0012A6  D7F1               	goto	i2l3454
  9036  0012A8                     i2l3462:
  9037  0012A8  060B               	decf	PWMC@cycles,f,c
  9038  0012AA  A0D8               	btfss	status,0,c
  9039  0012AC  060C               	decf	PWMC@cycles+1,f,c
  9040  0012AE  D79C               	goto	i2l3424
  9041  0012B0                     __end_of_PWMC:
  9042                           	opt stack 0
  9043                           pclatu	equ	0xFFB
  9044                           pclath	equ	0xFFA
  9045                           tblptru	equ	0xFF8
  9046                           tblptrh	equ	0xFF7
  9047                           tblptrl	equ	0xFF6
  9048                           tablat	equ	0xFF5
  9049                           prodh	equ	0xFF4
  9050                           prodl	equ	0xFF3
  9051                           intcon	equ	0xFF2
  9052                           intcon3	equ	0xFF0
  9053                           postinc0	equ	0xFEE
  9054                           fsr0h	equ	0xFEA
  9055                           fsr0l	equ	0xFE9
  9056                           wreg	equ	0xFE8
  9057                           plusw1	equ	0xFE3
  9058                           fsr1h	equ	0xFE2
  9059                           fsr1l	equ	0xFE1
  9060                           indf2	equ	0xFDF
  9061                           postinc2	equ	0xFDE
  9062                           postdec2	equ	0xFDD
  9063                           plusw2	equ	0xFDB
  9064                           fsr2h	equ	0xFDA
  9065                           fsr2l	equ	0xFD9
  9066                           status	equ	0xFD8
  9067                           
  9068 ;; *************** function ___awdiv *****************
  9069 ;; Defined at:
  9070 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  9071 ;; Parameters:    Size  Location     Type
  9072 ;;  dividend        2    0[COMRAM] int 
  9073 ;;  divisor         2    2[COMRAM] int 
  9074 ;; Auto vars:     Size  Location     Type
  9075 ;;  quotient        2    6[COMRAM] int 
  9076 ;;  sign            1    5[COMRAM] unsigned char 
  9077 ;;  counter         1    4[COMRAM] unsigned char 
  9078 ;; Return value:  Size  Location     Type
  9079 ;;                  2    0[COMRAM] int 
  9080 ;; Registers used:
  9081 ;;		wreg, status,2, status,0
  9082 ;; Tracked objects:
  9083 ;;		On entry : 0/0
  9084 ;;		On exit  : 0/0
  9085 ;;		Unchanged: 0/0
  9086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9087 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9088 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9090 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9091 ;;Total ram usage:        8 bytes
  9092 ;; Hardware stack levels used:    1
  9093 ;; This function calls:
  9094 ;;		Nothing
  9095 ;; This function is called by:
  9096 ;;		_PWMC
  9097 ;; This function uses a non-reentrant model
  9098 ;;
  9099                           
  9100                           	psect	text47
  9101  001A9A                     __ptext47:
  9102                           	opt stack 0
  9103  001A9A                     ___awdiv:
  9104                           	opt stack 22
  9105                           
  9106                           ;incstack = 0
  9107  001A9A  0E00               	movlw	0
  9108  001A9C  6E06               	movwf	___awdiv@sign,c
  9109  001A9E  AE04               	btfss	___awdiv@divisor+1,7,c
  9110  001AA0  D006               	goto	i2l3154
  9111  001AA2  6C03               	negf	___awdiv@divisor,c
  9112  001AA4  1E04               	comf	___awdiv@divisor+1,f,c
  9113  001AA6  B0D8               	btfsc	status,0,c
  9114  001AA8  2A04               	incf	___awdiv@divisor+1,f,c
  9115  001AAA  0E01               	movlw	1
  9116  001AAC  6E06               	movwf	___awdiv@sign,c
  9117  001AAE                     i2l3154:
  9118  001AAE  AE02               	btfss	___awdiv@dividend+1,7,c
  9119  001AB0  D006               	goto	i2l3160
  9120  001AB2  6C01               	negf	___awdiv@dividend,c
  9121  001AB4  1E02               	comf	___awdiv@dividend+1,f,c
  9122  001AB6  B0D8               	btfsc	status,0,c
  9123  001AB8  2A02               	incf	___awdiv@dividend+1,f,c
  9124  001ABA  0E01               	movlw	1
  9125  001ABC  1A06               	xorwf	___awdiv@sign,f,c
  9126  001ABE                     i2l3160:
  9127  001ABE  0E00               	movlw	0
  9128  001AC0  6E08               	movwf	___awdiv@quotient+1,c
  9129  001AC2  0E00               	movlw	0
  9130  001AC4  6E07               	movwf	___awdiv@quotient,c
  9131  001AC6  5003               	movf	___awdiv@divisor,w,c
  9132  001AC8  1004               	iorwf	___awdiv@divisor+1,w,c
  9133  001ACA  B4D8               	btfsc	status,2,c
  9134  001ACC  D01C               	goto	i2l3182
  9135  001ACE  0E01               	movlw	1
  9136  001AD0  6E05               	movwf	___awdiv@counter,c
  9137  001AD2  D004               	goto	i2l3168
  9138  001AD4                     i2l3166:
  9139  001AD4  90D8               	bcf	status,0,c
  9140  001AD6  3603               	rlcf	___awdiv@divisor,f,c
  9141  001AD8  3604               	rlcf	___awdiv@divisor+1,f,c
  9142  001ADA  2A05               	incf	___awdiv@counter,f,c
  9143  001ADC                     i2l3168:
  9144  001ADC  AE04               	btfss	___awdiv@divisor+1,7,c
  9145  001ADE  D7FA               	goto	i2l3166
  9146  001AE0                     i2l3170:
  9147  001AE0  90D8               	bcf	status,0,c
  9148  001AE2  3607               	rlcf	___awdiv@quotient,f,c
  9149  001AE4  3608               	rlcf	___awdiv@quotient+1,f,c
  9150  001AE6  5003               	movf	___awdiv@divisor,w,c
  9151  001AE8  5C01               	subwf	___awdiv@dividend,w,c
  9152  001AEA  5004               	movf	___awdiv@divisor+1,w,c
  9153  001AEC  5802               	subwfb	___awdiv@dividend+1,w,c
  9154  001AEE  A0D8               	btfss	status,0,c
  9155  001AF0  D005               	goto	i2l3178
  9156  001AF2  5003               	movf	___awdiv@divisor,w,c
  9157  001AF4  5E01               	subwf	___awdiv@dividend,f,c
  9158  001AF6  5004               	movf	___awdiv@divisor+1,w,c
  9159  001AF8  5A02               	subwfb	___awdiv@dividend+1,f,c
  9160  001AFA  8007               	bsf	___awdiv@quotient,0,c
  9161  001AFC                     i2l3178:
  9162  001AFC  90D8               	bcf	status,0,c
  9163  001AFE  3204               	rrcf	___awdiv@divisor+1,f,c
  9164  001B00  3203               	rrcf	___awdiv@divisor,f,c
  9165  001B02  2E05               	decfsz	___awdiv@counter,f,c
  9166  001B04  D7ED               	goto	i2l3170
  9167  001B06                     i2l3182:
  9168  001B06  5006               	movf	___awdiv@sign,w,c
  9169  001B08  B4D8               	btfsc	status,2,c
  9170  001B0A  D004               	goto	i2l3186
  9171  001B0C  6C07               	negf	___awdiv@quotient,c
  9172  001B0E  1E08               	comf	___awdiv@quotient+1,f,c
  9173  001B10  B0D8               	btfsc	status,0,c
  9174  001B12  2A08               	incf	___awdiv@quotient+1,f,c
  9175  001B14                     i2l3186:
  9176  001B14  C007  F001         	movff	___awdiv@quotient,?___awdiv
  9177  001B18  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  9178  001B1C  0012               	return	
  9179  001B1E                     __end_of___awdiv:
  9180                           	opt stack 0
  9181                           pclatu	equ	0xFFB
  9182                           pclath	equ	0xFFA
  9183                           tblptru	equ	0xFF8
  9184                           tblptrh	equ	0xFF7
  9185                           tblptrl	equ	0xFF6
  9186                           tablat	equ	0xFF5
  9187                           prodh	equ	0xFF4
  9188                           prodl	equ	0xFF3
  9189                           intcon	equ	0xFF2
  9190                           intcon3	equ	0xFF0
  9191                           postinc0	equ	0xFEE
  9192                           fsr0h	equ	0xFEA
  9193                           fsr0l	equ	0xFE9
  9194                           wreg	equ	0xFE8
  9195                           plusw1	equ	0xFE3
  9196                           fsr1h	equ	0xFE2
  9197                           fsr1l	equ	0xFE1
  9198                           indf2	equ	0xFDF
  9199                           postinc2	equ	0xFDE
  9200                           postdec2	equ	0xFDD
  9201                           plusw2	equ	0xFDB
  9202                           fsr2h	equ	0xFDA
  9203                           fsr2l	equ	0xFD9
  9204                           status	equ	0xFD8
  9205                           
  9206 ;; *************** function _PermLog *****************
  9207 ;; Defined at:
  9208 ;;		line 92 in file "eeprom.c"
  9209 ;; Parameters:    Size  Location     Type
  9210 ;;  backruns        1    wreg     unsigned char 
  9211 ;; Auto vars:     Size  Location     Type
  9212 ;;  backruns        1   55[COMRAM] unsigned char 
  9213 ;;  sorted          4   51[COMRAM] unsigned char [4]
  9214 ;;  time            2   56[COMRAM] unsigned int 
  9215 ;; Return value:  Size  Location     Type
  9216 ;;                  1    wreg      void 
  9217 ;; Registers used:
  9218 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9219 ;; Tracked objects:
  9220 ;;		On entry : 0/0
  9221 ;;		On exit  : 0/0
  9222 ;;		Unchanged: 0/0
  9223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9225 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9226 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9227 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9228 ;;Total ram usage:        9 bytes
  9229 ;; Hardware stack levels used:    1
  9230 ;; Hardware stack levels required when called:    4
  9231 ;; This function calls:
  9232 ;;		_ReadRun
  9233 ;;		_showInfo
  9234 ;;		i2___lcd_newline
  9235 ;;		i2_lcdInst
  9236 ;;		i2_printf
  9237 ;; This function is called by:
  9238 ;;		_keypressed
  9239 ;; This function uses a non-reentrant model
  9240 ;;
  9241                           
  9242                           	psect	text48
  9243  001B1E                     __ptext48:
  9244                           	opt stack 0
  9245  001B1E                     _PermLog:
  9246                           	opt stack 21
  9247                           
  9248                           ;incstack = 0
  9249                           ;PermLog@backruns stored from wreg
  9250  001B1E  6E38               	movwf	PermLog@backruns,c
  9251                           
  9252                           ;eeprom.c: 93: unsigned int time;
  9253                           ;eeprom.c: 94: unsigned char sorted[] = {0, 0, 0, 0};
  9254  001B20  C0BB  F034         	movff	PermLog@F3081,PermLog@sorted
  9255  001B24  C0BC  F035         	movff	PermLog@F3081+1,PermLog@sorted+1
  9256  001B28  C0BD  F036         	movff	PermLog@F3081+2,PermLog@sorted+2
  9257  001B2C  C0BE  F037         	movff	PermLog@F3081+3,PermLog@sorted+3
  9258                           
  9259                           ;eeprom.c: 95: ReadRun(backruns, sorted, &time);
  9260  001B30  0E34               	movlw	low PermLog@sorted
  9261  001B32  6E03               	movwf	ReadRun@sorted,c
  9262  001B34  0E00               	movlw	high PermLog@sorted
  9263  001B36  6E04               	movwf	ReadRun@sorted+1,c
  9264  001B38  0E39               	movlw	low PermLog@time
  9265  001B3A  6E05               	movwf	ReadRun@time,c
  9266  001B3C  0E00               	movlw	high PermLog@time
  9267  001B3E  6E06               	movwf	ReadRun@time+1,c
  9268  001B40  5038               	movf	PermLog@backruns,w,c
  9269  001B42  ECCC  F007         	call	_ReadRun
  9270                           
  9271                           ;eeprom.c: 96: lcdInst(0b10000000);;
  9272  001B46  0E80               	movlw	128
  9273  001B48  EC72  F011         	call	i2_lcdInst
  9274                           
  9275                           ;eeprom.c: 97: printf("showing %u", backruns);
  9276  001B4C  0EE9               	movlw	low STR_50
  9277  001B4E  6E0D               	movwf	i2printf@f,c
  9278  001B50  0EFF               	movlw	high STR_50
  9279  001B52  6E0E               	movwf	i2printf@f+1,c
  9280  001B54  C038  F00F         	movff	PermLog@backruns,?i2_printf+2
  9281  001B58  6A10               	clrf	?i2_printf+3,c
  9282  001B5A  EC3D  F004         	call	i2_printf	;wreg free
  9283                           
  9284                           ;eeprom.c: 98: __lcd_newline();
  9285  001B5E  EC96  F011         	call	i2___lcd_newline	;wreg free
  9286                           
  9287                           ;eeprom.c: 99: printf("runs before");
  9288  001B62  0ED1               	movlw	low STR_51
  9289  001B64  6E0D               	movwf	i2printf@f,c
  9290  001B66  0EFF               	movlw	high STR_51
  9291  001B68  6E0E               	movwf	i2printf@f+1,c
  9292  001B6A  EC3D  F004         	call	i2_printf	;wreg free
  9293                           
  9294                           ;eeprom.c: 100: _delay((unsigned long)((1000)*(8000000/4000.0)));
  9295  001B6E  0E0B               	movlw	11
  9296  001B70  6E33               	movwf	(??_PermLog+1)& (0+255),c
  9297  001B72  0E26               	movlw	38
  9298  001B74  6E32               	movwf	??_PermLog& (0+255),c
  9299  001B76  0E5E               	movlw	94
  9300  001B78                     i2u342_47:
  9301  001B78  2EE8               	decfsz	wreg,f,c
  9302  001B7A  D7FE               	bra	i2u342_47
  9303  001B7C  2E32               	decfsz	??_PermLog& (0+255),f,c
  9304  001B7E  D7FC               	bra	i2u342_47
  9305  001B80  2E33               	decfsz	(??_PermLog+1)& (0+255),f,c
  9306  001B82  D7FA               	bra	i2u342_47
  9307                           
  9308                           ;eeprom.c: 101: showInfo(time, sorted);
  9309  001B84  C039  F025         	movff	PermLog@time,showInfo@time
  9310  001B88  C03A  F026         	movff	PermLog@time+1,showInfo@time+1
  9311  001B8C  0E34               	movlw	low PermLog@sorted
  9312  001B8E  6E27               	movwf	showInfo@sorted,c
  9313  001B90  0E00               	movlw	high PermLog@sorted
  9314  001B92  6E28               	movwf	showInfo@sorted+1,c
  9315  001B94  EC0A  F006         	call	_showInfo	;wreg free
  9316  001B98  0012               	return		;funcret
  9317  001B9A                     __end_of_PermLog:
  9318                           	opt stack 0
  9319                           pclatu	equ	0xFFB
  9320                           pclath	equ	0xFFA
  9321                           tblptru	equ	0xFF8
  9322                           tblptrh	equ	0xFF7
  9323                           tblptrl	equ	0xFF6
  9324                           tablat	equ	0xFF5
  9325                           prodh	equ	0xFF4
  9326                           prodl	equ	0xFF3
  9327                           intcon	equ	0xFF2
  9328                           intcon3	equ	0xFF0
  9329                           postinc0	equ	0xFEE
  9330                           fsr0h	equ	0xFEA
  9331                           fsr0l	equ	0xFE9
  9332                           wreg	equ	0xFE8
  9333                           plusw1	equ	0xFE3
  9334                           fsr1h	equ	0xFE2
  9335                           fsr1l	equ	0xFE1
  9336                           indf2	equ	0xFDF
  9337                           postinc2	equ	0xFDE
  9338                           postdec2	equ	0xFDD
  9339                           plusw2	equ	0xFDB
  9340                           fsr2h	equ	0xFDA
  9341                           fsr2l	equ	0xFD9
  9342                           status	equ	0xFD8
  9343                           
  9344 ;; *************** function _showInfo *****************
  9345 ;; Defined at:
  9346 ;;		line 18 in file "modules.c"
  9347 ;; Parameters:    Size  Location     Type
  9348 ;;  time            2   36[COMRAM] unsigned int 
  9349 ;;  sorted          2   38[COMRAM] PTR unsigned char 
  9350 ;;		 -> PermLog@sorted(4), simulate@sorted(4), 
  9351 ;; Auto vars:     Size  Location     Type
  9352 ;;  stop            2   47[COMRAM] int 
  9353 ;;  type            2   45[COMRAM] int 
  9354 ;; Return value:  Size  Location     Type
  9355 ;;                  1    wreg      void 
  9356 ;; Registers used:
  9357 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9358 ;; Tracked objects:
  9359 ;;		On entry : 0/0
  9360 ;;		On exit  : 0/0
  9361 ;;		Unchanged: 0/0
  9362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9363 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9364 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9365 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9366 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9367 ;;Total ram usage:       13 bytes
  9368 ;; Hardware stack levels used:    1
  9369 ;; Hardware stack levels required when called:    3
  9370 ;; This function calls:
  9371 ;;		_captureKeypad
  9372 ;;		i2___lcd_newline
  9373 ;;		i2_lcdInst
  9374 ;;		i2_printf
  9375 ;; This function is called by:
  9376 ;;		_simulate
  9377 ;;		_PermLog
  9378 ;; This function uses a non-reentrant model
  9379 ;;
  9380                           
  9381                           	psect	text49
  9382  000C14                     __ptext49:
  9383                           	opt stack 0
  9384  000C14                     _showInfo:
  9385                           	opt stack 21
  9386                           
  9387                           ;modules.c: 19: lcdInst(0b10000000);;
  9388                           
  9389                           ;incstack = 0
  9390  000C14  0E80               	movlw	128
  9391  000C16  EC72  F011         	call	i2_lcdInst
  9392                           
  9393                           ;modules.c: 20: printf("Press a number          ");
  9394  000C1A  0E9A               	movlw	low STR_19
  9395  000C1C  6E0D               	movwf	i2printf@f,c
  9396  000C1E  0EFC               	movlw	high STR_19
  9397  000C20  6E0E               	movwf	i2printf@f+1,c
  9398  000C22  EC3D  F004         	call	i2_printf	;wreg free
  9399                           
  9400                           ;modules.c: 21: __lcd_newline();
  9401  000C26  EC96  F011         	call	i2___lcd_newline	;wreg free
  9402                           
  9403                           ;modules.c: 22: printf("For more info          ");
  9404  000C2A  0EE3               	movlw	low STR_20
  9405  000C2C  6E0D               	movwf	i2printf@f,c
  9406  000C2E  0EFC               	movlw	high STR_20
  9407  000C30  6E0E               	movwf	i2printf@f+1,c
  9408  000C32  EC3D  F004         	call	i2_printf	;wreg free
  9409                           
  9410                           ;modules.c: 23: int type = 0;
  9411  000C36  0E00               	movlw	0
  9412  000C38  6E2F               	movwf	showInfo@type+1,c
  9413  000C3A  0E00               	movlw	0
  9414  000C3C  6E2E               	movwf	showInfo@type,c
  9415                           
  9416                           ;modules.c: 24: int stop = 0;
  9417  000C3E  0E00               	movlw	0
  9418  000C40  6E31               	movwf	showInfo@stop+1,c
  9419  000C42  0E00               	movlw	0
  9420  000C44  D0D2               	goto	L2
  9421  000C46                     i2l4050:
  9422                           
  9423                           ;modules.c: 26: type = captureKeypad();
  9424  000C46  EC15  F011         	call	_captureKeypad	;wreg free
  9425  000C4A  C001  F02E         	movff	?_captureKeypad,showInfo@type
  9426  000C4E  C002  F02F         	movff	?_captureKeypad+1,showInfo@type+1
  9427                           
  9428                           ;modules.c: 27: switch (type) {
  9429  000C52  D0CD               	goto	i2l4090
  9430  000C54                     i2l4052:
  9431                           
  9432                           ;modules.c: 29: lcdInst(0b10000000);;
  9433  000C54  0E80               	movlw	128
  9434  000C56  EC72  F011         	call	i2_lcdInst
  9435                           
  9436                           ;modules.c: 30: printf("Time Elapsed:          ");
  9437  000C5A  0EB3               	movlw	low STR_21
  9438  000C5C  6E0D               	movwf	i2printf@f,c
  9439  000C5E  0EFC               	movlw	high STR_21
  9440  000C60  6E0E               	movwf	i2printf@f+1,c
  9441  000C62  EC3D  F004         	call	i2_printf	;wreg free
  9442                           
  9443                           ;modules.c: 31: __lcd_newline();
  9444  000C66  EC96  F011         	call	i2___lcd_newline	;wreg free
  9445                           
  9446                           ;modules.c: 32: printf("%u seconds          ", time);
  9447  000C6A  0E09               	movlw	low STR_22
  9448  000C6C  6E0D               	movwf	i2printf@f,c
  9449  000C6E  0EFE               	movlw	high STR_22
  9450  000C70  6E0E               	movwf	i2printf@f+1,c
  9451  000C72  C025  F00F         	movff	showInfo@time,?i2_printf+2
  9452  000C76  C026  F010         	movff	showInfo@time+1,?i2_printf+3
  9453  000C7A  EC3D  F004         	call	i2_printf	;wreg free
  9454                           
  9455                           ;modules.c: 33: break;
  9456  000C7E  D0D6               	goto	i2l4092
  9457  000C80                     i2l4058:
  9458                           
  9459                           ;modules.c: 35: lcdInst(0b10000000);;
  9460  000C80  0E80               	movlw	128
  9461  000C82  EC72  F011         	call	i2_lcdInst
  9462                           
  9463                           ;modules.c: 36: printf("Total Sorted:          ");
  9464  000C86  0ECB               	movlw	low STR_23
  9465  000C88  6E0D               	movwf	i2printf@f,c
  9466  000C8A  0EFC               	movlw	high STR_23
  9467  000C8C  6E0E               	movwf	i2printf@f+1,c
  9468  000C8E  EC3D  F004         	call	i2_printf	;wreg free
  9469                           
  9470                           ;modules.c: 37: __lcd_newline();
  9471  000C92  EC96  F011         	call	i2___lcd_newline	;wreg free
  9472                           
  9473                           ;modules.c: 38: printf("%d batteries          ", sorted[0] + sorted[1] + sorted[2] + sor
      +                          ted[3]);
  9474  000C96  0E71               	movlw	low STR_24
  9475  000C98  6E0D               	movwf	i2printf@f,c
  9476  000C9A  0EFD               	movlw	high STR_24
  9477  000C9C  6E0E               	movwf	i2printf@f+1,c
  9478  000C9E  EE20 F003          	lfsr	2,3
  9479  000CA2  5027               	movf	showInfo@sorted,w,c
  9480  000CA4  26D9               	addwf	fsr2l,f,c
  9481  000CA6  5028               	movf	showInfo@sorted+1,w,c
  9482  000CA8  22DA               	addwfc	fsr2h,f,c
  9483  000CAA  50DF               	movf	indf2,w,c
  9484  000CAC  6E29               	movwf	??_showInfo& (0+255),c
  9485  000CAE  C027  FFD9         	movff	showInfo@sorted,fsr2l
  9486  000CB2  C028  FFDA         	movff	showInfo@sorted+1,fsr2h
  9487  000CB6  50DF               	movf	indf2,w,c
  9488  000CB8  6E2A               	movwf	(??_showInfo+1)& (0+255),c
  9489  000CBA  6A2B               	clrf	(??_showInfo+2)& (0+255),c
  9490  000CBC  EE20 F001          	lfsr	2,1
  9491  000CC0  5027               	movf	showInfo@sorted,w,c
  9492  000CC2  26D9               	addwf	fsr2l,f,c
  9493  000CC4  5028               	movf	showInfo@sorted+1,w,c
  9494  000CC6  22DA               	addwfc	fsr2h,f,c
  9495  000CC8  50DF               	movf	indf2,w,c
  9496  000CCA  6E2C               	movwf	(??_showInfo+3)& (0+255),c
  9497  000CCC  502C               	movf	??_showInfo+3,w,c
  9498  000CCE  262A               	addwf	??_showInfo+1,f,c
  9499  000CD0  0E00               	movlw	0
  9500  000CD2  222B               	addwfc	??_showInfo+2,f,c
  9501  000CD4  EE20 F002          	lfsr	2,2
  9502  000CD8  5027               	movf	showInfo@sorted,w,c
  9503  000CDA  26D9               	addwf	fsr2l,f,c
  9504  000CDC  5028               	movf	showInfo@sorted+1,w,c
  9505  000CDE  22DA               	addwfc	fsr2h,f,c
  9506  000CE0  50DF               	movf	indf2,w,c
  9507  000CE2  6E2D               	movwf	(??_showInfo+4)& (0+255),c
  9508  000CE4  502D               	movf	??_showInfo+4,w,c
  9509  000CE6  262A               	addwf	??_showInfo+1,f,c
  9510  000CE8  0E00               	movlw	0
  9511  000CEA  222B               	addwfc	??_showInfo+2,f,c
  9512  000CEC  5029               	movf	??_showInfo,w,c
  9513  000CEE  242A               	addwf	??_showInfo+1,w,c
  9514  000CF0  6E0F               	movwf	?i2_printf+2,c
  9515  000CF2  0E00               	movlw	0
  9516  000CF4  202B               	addwfc	??_showInfo+2,w,c
  9517  000CF6  6E10               	movwf	?i2_printf+3,c
  9518  000CF8  EC3D  F004         	call	i2_printf	;wreg free
  9519                           
  9520                           ;modules.c: 39: break;
  9521  000CFC  D097               	goto	i2l4092
  9522  000CFE                     i2l4064:
  9523                           
  9524                           ;modules.c: 41: lcdInst(0b10000000);;
  9525  000CFE  0E80               	movlw	128
  9526  000D00  EC72  F011         	call	i2_lcdInst
  9527                           
  9528                           ;modules.c: 42: printf("AA Sorted:          ");
  9529  000D04  0EDF               	movlw	low STR_25
  9530  000D06  6E0D               	movwf	i2printf@f,c
  9531  000D08  0EFD               	movlw	high STR_25
  9532  000D0A  6E0E               	movwf	i2printf@f+1,c
  9533  000D0C  EC3D  F004         	call	i2_printf	;wreg free
  9534                           
  9535                           ;modules.c: 43: __lcd_newline();
  9536  000D10  EC96  F011         	call	i2___lcd_newline	;wreg free
  9537                           
  9538                           ;modules.c: 44: printf("%d             ", sorted[0]);
  9539  000D14  0E89               	movlw	low STR_26
  9540  000D16  6E0D               	movwf	i2printf@f,c
  9541  000D18  0EFF               	movlw	high STR_26
  9542  000D1A  6E0E               	movwf	i2printf@f+1,c
  9543  000D1C  C027  FFD9         	movff	showInfo@sorted,fsr2l
  9544  000D20  C028  FFDA         	movff	showInfo@sorted+1,fsr2h
  9545  000D24  50DF               	movf	indf2,w,c
  9546  000D26  6E29               	movwf	??_showInfo& (0+255),c
  9547  000D28  5029               	movf	??_showInfo,w,c
  9548  000D2A  6E0F               	movwf	?i2_printf+2,c
  9549  000D2C  6A10               	clrf	?i2_printf+3,c
  9550  000D2E  EC3D  F004         	call	i2_printf	;wreg free
  9551                           
  9552                           ;modules.c: 45: break;
  9553  000D32  D07C               	goto	i2l4092
  9554  000D34                     i2l4070:
  9555                           
  9556                           ;modules.c: 47: lcdInst(0b10000000);;
  9557  000D34  0E80               	movlw	128
  9558  000D36  EC72  F011         	call	i2_lcdInst
  9559                           
  9560                           ;modules.c: 48: printf("C Sorted:          ");
  9561  000D3A  0EB0               	movlw	low STR_27
  9562  000D3C  6E0D               	movwf	i2printf@f,c
  9563  000D3E  0EFE               	movlw	high STR_27
  9564  000D40  6E0E               	movwf	i2printf@f+1,c
  9565  000D42  EC3D  F004         	call	i2_printf	;wreg free
  9566                           
  9567                           ;modules.c: 49: __lcd_newline();
  9568  000D46  EC96  F011         	call	i2___lcd_newline	;wreg free
  9569                           
  9570                           ;modules.c: 50: printf("%d             ", sorted[1]);
  9571  000D4A  0E89               	movlw	low STR_26
  9572  000D4C  6E0D               	movwf	i2printf@f,c
  9573  000D4E  0EFF               	movlw	high STR_26
  9574  000D50  6E0E               	movwf	i2printf@f+1,c
  9575  000D52  EE20 F001          	lfsr	2,1
  9576  000D56  5027               	movf	showInfo@sorted,w,c
  9577  000D58  26D9               	addwf	fsr2l,f,c
  9578  000D5A  5028               	movf	showInfo@sorted+1,w,c
  9579  000D5C  22DA               	addwfc	fsr2h,f,c
  9580  000D5E  50DF               	movf	indf2,w,c
  9581  000D60  6E29               	movwf	??_showInfo& (0+255),c
  9582  000D62  5029               	movf	??_showInfo,w,c
  9583  000D64  6E0F               	movwf	?i2_printf+2,c
  9584  000D66  6A10               	clrf	?i2_printf+3,c
  9585  000D68  EC3D  F004         	call	i2_printf	;wreg free
  9586                           
  9587                           ;modules.c: 51: break;
  9588  000D6C  D05F               	goto	i2l4092
  9589  000D6E                     i2l4076:
  9590                           
  9591                           ;modules.c: 53: lcdInst(0b10000000);;
  9592  000D6E  0E80               	movlw	128
  9593  000D70  EC72  F011         	call	i2_lcdInst
  9594                           
  9595                           ;modules.c: 54: printf("9V Sorted:          ");
  9596  000D74  0EF4               	movlw	low STR_29
  9597  000D76  6E0D               	movwf	i2printf@f,c
  9598  000D78  0EFD               	movlw	high STR_29
  9599  000D7A  6E0E               	movwf	i2printf@f+1,c
  9600  000D7C  EC3D  F004         	call	i2_printf	;wreg free
  9601                           
  9602                           ;modules.c: 55: __lcd_newline();
  9603  000D80  EC96  F011         	call	i2___lcd_newline	;wreg free
  9604                           
  9605                           ;modules.c: 56: printf("%d             ", sorted[2]);
  9606  000D84  0E89               	movlw	low STR_26
  9607  000D86  6E0D               	movwf	i2printf@f,c
  9608  000D88  0EFF               	movlw	high STR_26
  9609  000D8A  6E0E               	movwf	i2printf@f+1,c
  9610  000D8C  EE20 F002          	lfsr	2,2
  9611  000D90  5027               	movf	showInfo@sorted,w,c
  9612  000D92  26D9               	addwf	fsr2l,f,c
  9613  000D94  5028               	movf	showInfo@sorted+1,w,c
  9614  000D96  22DA               	addwfc	fsr2h,f,c
  9615  000D98  50DF               	movf	indf2,w,c
  9616  000D9A  6E29               	movwf	??_showInfo& (0+255),c
  9617  000D9C  5029               	movf	??_showInfo,w,c
  9618  000D9E  6E0F               	movwf	?i2_printf+2,c
  9619  000DA0  6A10               	clrf	?i2_printf+3,c
  9620  000DA2  EC3D  F004         	call	i2_printf	;wreg free
  9621                           
  9622                           ;modules.c: 57: break;
  9623  000DA6  D042               	goto	i2l4092
  9624  000DA8                     i2l4082:
  9625                           
  9626                           ;modules.c: 59: lcdInst(0b10000000);;
  9627  000DA8  0E80               	movlw	128
  9628  000DAA  EC72  F011         	call	i2_lcdInst
  9629                           
  9630                           ;modules.c: 60: printf("Uncharged:          ");
  9631  000DAE  0ECA               	movlw	low STR_31
  9632  000DB0  6E0D               	movwf	i2printf@f,c
  9633  000DB2  0EFD               	movlw	high STR_31
  9634  000DB4  6E0E               	movwf	i2printf@f+1,c
  9635  000DB6  EC3D  F004         	call	i2_printf	;wreg free
  9636                           
  9637                           ;modules.c: 61: __lcd_newline();
  9638  000DBA  EC96  F011         	call	i2___lcd_newline	;wreg free
  9639                           
  9640                           ;modules.c: 62: printf("%d             ", sorted[3]);
  9641  000DBE  0E89               	movlw	low STR_26
  9642  000DC0  6E0D               	movwf	i2printf@f,c
  9643  000DC2  0EFF               	movlw	high STR_26
  9644  000DC4  6E0E               	movwf	i2printf@f+1,c
  9645  000DC6  EE20 F003          	lfsr	2,3
  9646  000DCA  5027               	movf	showInfo@sorted,w,c
  9647  000DCC  26D9               	addwf	fsr2l,f,c
  9648  000DCE  5028               	movf	showInfo@sorted+1,w,c
  9649  000DD0  22DA               	addwfc	fsr2h,f,c
  9650  000DD2  50DF               	movf	indf2,w,c
  9651  000DD4  6E29               	movwf	??_showInfo& (0+255),c
  9652  000DD6  5029               	movf	??_showInfo,w,c
  9653  000DD8  6E0F               	movwf	?i2_printf+2,c
  9654  000DDA  6A10               	clrf	?i2_printf+3,c
  9655  000DDC  EC3D  F004         	call	i2_printf	;wreg free
  9656                           
  9657                           ;modules.c: 63: break;
  9658  000DE0  D025               	goto	i2l4092
  9659  000DE2                     i2l221:
  9660  000DE2  00FF               	reset		;# 
  9661  000DE4                     i2l4088:
  9662                           
  9663                           ;modules.c: 67: stop = 1;
  9664  000DE4  0E00               	movlw	0
  9665  000DE6  6E31               	movwf	showInfo@stop+1,c
  9666  000DE8  0E01               	movlw	1
  9667  000DEA                     L2:
  9668  000DEA  6E30               	movwf	showInfo@stop,c
  9669                           
  9670                           ;modules.c: 68: }
  9671  000DEC  D01F               	goto	i2l4092
  9672  000DEE                     i2l4090:
  9673  000DEE  C02E  F029         	movff	showInfo@type,??_showInfo
  9674  000DF2  C02F  F02A         	movff	showInfo@type+1,??_showInfo+1
  9675                           
  9676                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9677                           ; Switch size 1, requested type "space"
  9678                           ; Number of cases is 1, Range of values is 0 to 0
  9679                           ; switch strategies available:
  9680                           ; Name         Instructions Cycles
  9681                           ; simple_byte            4     3 (average)
  9682                           ;	Chosen strategy is simple_byte
  9683  000DF6  502A               	movf	??_showInfo+1,w,c
  9684  000DF8  0A00               	xorlw	0	; case 0
  9685  000DFA  A4D8               	btfss	status,2,c
  9686  000DFC  D7F3               	goto	i2l4088
  9687                           
  9688                           ; Switch size 1, requested type "space"
  9689                           ; Number of cases is 7, Range of values is 0 to 15
  9690                           ; switch strategies available:
  9691                           ; Name         Instructions Cycles
  9692                           ; simple_byte           22    12 (average)
  9693                           ;	Chosen strategy is simple_byte
  9694  000DFE  5029               	movf	??_showInfo,w,c
  9695  000E00  0A00               	xorlw	0	; case 0
  9696  000E02  B4D8               	btfsc	status,2,c
  9697  000E04  D727               	goto	i2l4052
  9698  000E06  0A01               	xorlw	1	; case 1
  9699  000E08  B4D8               	btfsc	status,2,c
  9700  000E0A  D73A               	goto	i2l4058
  9701  000E0C  0A03               	xorlw	3	; case 2
  9702  000E0E  B4D8               	btfsc	status,2,c
  9703  000E10  D776               	goto	i2l4064
  9704  000E12  0A01               	xorlw	1	; case 3
  9705  000E14  B4D8               	btfsc	status,2,c
  9706  000E16  D78E               	goto	i2l4070
  9707  000E18  0A07               	xorlw	7	; case 4
  9708  000E1A  B4D8               	btfsc	status,2,c
  9709  000E1C  D7A8               	goto	i2l4076
  9710  000E1E  0A01               	xorlw	1	; case 5
  9711  000E20  B4D8               	btfsc	status,2,c
  9712  000E22  D7C2               	goto	i2l4082
  9713  000E24  0A0A               	xorlw	10	; case 15
  9714  000E26  B4D8               	btfsc	status,2,c
  9715  000E28  D7DC               	goto	i2l221
  9716  000E2A  D7DC               	goto	i2l4088
  9717  000E2C                     i2l4092:
  9718  000E2C  5030               	movf	showInfo@stop,w,c
  9719  000E2E  1031               	iorwf	showInfo@stop+1,w,c
  9720  000E30  A4D8               	btfss	status,2,c
  9721  000E32  0012               	return	
  9722  000E34  D708               	goto	i2l4050
  9723  000E36                     __end_of_showInfo:
  9724                           	opt stack 0
  9725                           pclatu	equ	0xFFB
  9726                           pclath	equ	0xFFA
  9727                           tblptru	equ	0xFF8
  9728                           tblptrh	equ	0xFF7
  9729                           tblptrl	equ	0xFF6
  9730                           tablat	equ	0xFF5
  9731                           prodh	equ	0xFF4
  9732                           prodl	equ	0xFF3
  9733                           intcon	equ	0xFF2
  9734                           intcon3	equ	0xFF0
  9735                           postinc0	equ	0xFEE
  9736                           fsr0h	equ	0xFEA
  9737                           fsr0l	equ	0xFE9
  9738                           wreg	equ	0xFE8
  9739                           plusw1	equ	0xFE3
  9740                           fsr1h	equ	0xFE2
  9741                           fsr1l	equ	0xFE1
  9742                           indf2	equ	0xFDF
  9743                           postinc2	equ	0xFDE
  9744                           postdec2	equ	0xFDD
  9745                           plusw2	equ	0xFDB
  9746                           fsr2h	equ	0xFDA
  9747                           fsr2l	equ	0xFD9
  9748                           status	equ	0xFD8
  9749                           
  9750 ;; *************** function i2_printf *****************
  9751 ;; Defined at:
  9752 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  9753 ;; Parameters:    Size  Location     Type
  9754 ;;  f               2   12[COMRAM] PTR const unsigned char 
  9755 ;;		 -> STR_51(12), STR_50(11), STR_49(16), STR_48(23), 
  9756 ;;		 -> STR_47(21), STR_46(14), STR_45(15), STR_44(22), 
  9757 ;;		 -> STR_43(20), STR_42(13), STR_41(16), STR_40(23), 
  9758 ;;		 -> STR_39(21), STR_38(14), STR_37(16), STR_36(18), 
  9759 ;;		 -> STR_35(20), STR_34(16), STR_33(12), STR_32(16), 
  9760 ;;		 -> STR_31(21), STR_30(16), STR_29(21), STR_28(16), 
  9761 ;;		 -> STR_27(20), STR_26(16), STR_25(21), STR_24(23), 
  9762 ;;		 -> STR_23(24), STR_22(21), STR_21(24), STR_20(24), 
  9763 ;;		 -> STR_19(25), STR_18(19), STR_17(24), STR_16(24), 
  9764 ;;		 -> STR_15(27), STR_14(11), STR_13(19), STR_12(20), 
  9765 ;;		 -> STR_11(21), STR_10(21), STR_9(20), STR_8(21), 
  9766 ;;		 -> STR_7(21), STR_6(20), STR_5(22), STR_4(22), 
  9767 ;;		 -> STR_3(21), STR_2(24), STR_1(21), 
  9768 ;; Auto vars:     Size  Location     Type
  9769 ;;  printf          4    0        struct .
  9770 ;;  printf          2   33[COMRAM] int 
  9771 ;;  printf          2   30[COMRAM] unsigned int 
  9772 ;;  printf          2   27[COMRAM] unsigned int 
  9773 ;;  printf          2   25[COMRAM] PTR void [1]
  9774 ;;		 -> ?i2_printf(2), ?_printf(2), 
  9775 ;;  printf          2   22[COMRAM] PTR const unsigned char 
  9776 ;;		 -> printf@c(1), 
  9777 ;;  printf          1   35[COMRAM] char 
  9778 ;;  printf          1   32[COMRAM] unsigned char 
  9779 ;;  printf          1   29[COMRAM] char 
  9780 ;;  printf          1   24[COMRAM] unsigned char 
  9781 ;; Return value:  Size  Location     Type
  9782 ;;                  2   12[COMRAM] int 
  9783 ;; Registers used:
  9784 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9785 ;; Tracked objects:
  9786 ;;		On entry : 0/0
  9787 ;;		On exit  : 0/0
  9788 ;;		Unchanged: 0/0
  9789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9790 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9791 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9792 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9793 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9794 ;;Total ram usage:       24 bytes
  9795 ;; Hardware stack levels used:    1
  9796 ;; Hardware stack levels required when called:    2
  9797 ;; This function calls:
  9798 ;;		i2___lwdiv
  9799 ;;		i2___lwmod
  9800 ;;		i2___wmul
  9801 ;;		i2_isdigit
  9802 ;;		i2_putch
  9803 ;; This function is called by:
  9804 ;;		_simulate
  9805 ;;		_showInfo
  9806 ;;		_CW90
  9807 ;;		_CCW90
  9808 ;;		_stopMoving
  9809 ;;		_checkV
  9810 ;;		_checkAA
  9811 ;;		_checkC
  9812 ;;		_check9
  9813 ;;		_PermLog
  9814 ;; This function uses a non-reentrant model
  9815 ;;
  9816                           
  9817                           	psect	text50
  9818  00087A                     __ptext50:
  9819                           	opt stack 0
  9820  00087A                     i2_printf:
  9821                           	opt stack 22
  9822                           
  9823                           ;doprnt.c: 466: va_list ap;
  9824                           ;doprnt.c: 499: signed char c;
  9825                           ;doprnt.c: 501: int width;
  9826                           ;doprnt.c: 506: signed char prec;
  9827                           ;doprnt.c: 508: unsigned char flag;
  9828                           ;doprnt.c: 523: union {
  9829                           ;doprnt.c: 524: unsigned long vd;
  9830                           ;doprnt.c: 525: double integ;
  9831                           ;doprnt.c: 526: } tmpval;
  9832                           ;doprnt.c: 528: unsigned int val;
  9833                           ;doprnt.c: 529: unsigned len;
  9834                           ;doprnt.c: 530: const char * cp;
  9835                           ;doprnt.c: 533: *ap = __va_start();
  9836                           
  9837                           ;incstack = 0
  9838  00087A  0E0F               	movlw	low (?i2_printf+2)
  9839  00087C  6E1A               	movwf	i2printf@ap,c
  9840  00087E  0E00               	movlw	high (?i2_printf+2)
  9841  000880  6E1B               	movwf	i2printf@ap+1,c
  9842                           
  9843                           ;doprnt.c: 536: while(c = *f++) {
  9844  000882  D1BB               	goto	i2l3378
  9845  000884                     i2l3228:
  9846                           
  9847                           ;doprnt.c: 538: if(c != '%')
  9848  000884  0E25               	movlw	37
  9849  000886  1824               	xorwf	i2printf@c,w,c
  9850  000888  B4D8               	btfsc	status,2,c
  9851  00088A  D004               	goto	i2l3232
  9852                           
  9853                           ;doprnt.c: 540: {
  9854                           ;doprnt.c: 541: (putch(c) );
  9855  00088C  5024               	movf	i2printf@c,w,c
  9856  00088E  EC6C  F011         	call	i2_putch
  9857                           
  9858                           ;doprnt.c: 542: continue;
  9859  000892  D1B3               	goto	i2l3378
  9860  000894                     i2l3232:
  9861                           
  9862                           ;doprnt.c: 543: }
  9863                           ;doprnt.c: 546: width = 0;
  9864  000894  0E00               	movlw	0
  9865  000896  6E23               	movwf	i2printf@width+1,c
  9866  000898  0E00               	movlw	0
  9867  00089A  6E22               	movwf	i2printf@width,c
  9868                           
  9869                           ;doprnt.c: 548: flag = 0;
  9870  00089C  0E00               	movlw	0
  9871  00089E  6E21               	movwf	i2printf@flag,c
  9872                           
  9873                           ;doprnt.c: 551: switch(*f) {
  9874                           
  9875                           ;doprnt.c: 550: for(;;) {
  9876  0008A0  D003               	goto	i2l3238
  9877  0008A2                     i2l3234:
  9878                           
  9879                           ;doprnt.c: 580: flag |= 0x04;
  9880  0008A2  8421               	bsf	i2printf@flag,2,c
  9881                           
  9882                           ;doprnt.c: 581: f++;
  9883  0008A4  4A0D               	infsnz	i2printf@f,f,c
  9884  0008A6  2A0E               	incf	i2printf@f+1,f,c
  9885  0008A8                     i2l3238:
  9886  0008A8  C00D  FFF6         	movff	i2printf@f,tblptrl
  9887  0008AC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9888  0008B0                     	if	0	;tblptru may be non-zero
  9889  0008B0                     	endif
  9890  0008B0                     	if	0	;tblptru may be non-zero
  9891  0008B0                     	endif
  9892  0008B0  0008               	tblrd		*
  9893  0008B2  50F5               	movf	tablat,w,c
  9894                           
  9895                           ; Switch size 1, requested type "space"
  9896                           ; Number of cases is 1, Range of values is 48 to 48
  9897                           ; switch strategies available:
  9898                           ; Name         Instructions Cycles
  9899                           ; simple_byte            4     3 (average)
  9900                           ;	Chosen strategy is simple_byte
  9901  0008B4  0A30               	xorlw	48	; case 48
  9902  0008B6  B4D8               	btfsc	status,2,c
  9903  0008B8  D7F4               	goto	i2l3234
  9904                           
  9905                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  9906                           
  9907                           ;doprnt.c: 586: }
  9908                           
  9909                           ;doprnt.c: 585: break;
  9910  0008BA  C00D  FFF6         	movff	i2printf@f,tblptrl
  9911  0008BE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9912  0008C2                     	if	0	;tblptru may be non-zero
  9913  0008C2                     	endif
  9914  0008C2                     	if	0	;tblptru may be non-zero
  9915  0008C2                     	endif
  9916  0008C2  0008               	tblrd		*
  9917  0008C4  50F5               	movf	tablat,w,c
  9918  0008C6  EC06  F011         	call	i2_isdigit
  9919  0008CA  A0D8               	btfss	status,0,c
  9920  0008CC  D06F               	goto	i2l3278
  9921                           
  9922                           ;doprnt.c: 598: width = 0;
  9923  0008CE  0E00               	movlw	0
  9924  0008D0  6E23               	movwf	i2printf@width+1,c
  9925  0008D2  0E00               	movlw	0
  9926  0008D4  6E22               	movwf	i2printf@width,c
  9927  0008D6                     i2l3244:
  9928                           
  9929                           ;doprnt.c: 600: width *= 10;
  9930  0008D6  C022  F001         	movff	i2printf@width,i2___wmul@multiplier
  9931  0008DA  C023  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  9932  0008DE  0E00               	movlw	0
  9933  0008E0  6E04               	movwf	i2___wmul@multiplicand+1,c
  9934  0008E2  0E0A               	movlw	10
  9935  0008E4  6E03               	movwf	i2___wmul@multiplicand,c
  9936  0008E6  ECE2  F010         	call	i2___wmul	;wreg free
  9937  0008EA  C001  F022         	movff	?i2___wmul,i2printf@width
  9938  0008EE  C002  F023         	movff	?i2___wmul+1,i2printf@width+1
  9939                           
  9940                           ;doprnt.c: 601: width += *f++ - '0';
  9941  0008F2  0ED0               	movlw	208
  9942  0008F4  6E13               	movwf	??i2_printf& (0+255),c
  9943  0008F6  0EFF               	movlw	255
  9944  0008F8  6E14               	movwf	(??i2_printf+1)& (0+255),c
  9945  0008FA  C00D  FFF6         	movff	i2printf@f,tblptrl
  9946  0008FE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9947  000902                     	if	0	;tblptru may be non-zero
  9948  000902                     	endif
  9949  000902                     	if	0	;tblptru may be non-zero
  9950  000902                     	endif
  9951  000902  0008               	tblrd		*
  9952  000904  50F5               	movf	tablat,w,c
  9953  000906  6E15               	movwf	(??i2_printf+2)& (0+255),c
  9954  000908  6A16               	clrf	(??i2_printf+3)& (0+255),c
  9955  00090A  5013               	movf	??i2_printf,w,c
  9956  00090C  2615               	addwf	??i2_printf+2,f,c
  9957  00090E  5014               	movf	??i2_printf+1,w,c
  9958  000910  2216               	addwfc	??i2_printf+3,f,c
  9959  000912  5015               	movf	??i2_printf+2,w,c
  9960  000914  2622               	addwf	i2printf@width,f,c
  9961  000916  5016               	movf	??i2_printf+3,w,c
  9962  000918  2223               	addwfc	i2printf@width+1,f,c
  9963  00091A  4A0D               	infsnz	i2printf@f,f,c
  9964  00091C  2A0E               	incf	i2printf@f+1,f,c
  9965                           
  9966                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  9967  00091E  C00D  FFF6         	movff	i2printf@f,tblptrl
  9968  000922  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9969  000926                     	if	0	;tblptru may be non-zero
  9970  000926                     	endif
  9971  000926                     	if	0	;tblptru may be non-zero
  9972  000926                     	endif
  9973  000926  0008               	tblrd		*
  9974  000928  50F5               	movf	tablat,w,c
  9975  00092A  EC06  F011         	call	i2_isdigit
  9976  00092E  A0D8               	btfss	status,0,c
  9977  000930  D03D               	goto	i2l3278
  9978  000932  D7D1               	goto	i2l3244
  9979  000934                     i2l3252:
  9980                           
  9981                           ;doprnt.c: 721: flag |= 0x80;
  9982  000934  8E21               	bsf	i2printf@flag,7,c
  9983                           
  9984                           ;doprnt.c: 723: break;
  9985  000936  D054               	goto	i2l3280
  9986  000938                     i2l3254:
  9987                           
  9988                           ;doprnt.c: 757: if(width > len)
  9989  000938  5022               	movf	i2printf@width,w,c
  9990  00093A  5C1C               	subwf	i2printf@len,w,c
  9991  00093C  5023               	movf	i2printf@width+1,w,c
  9992  00093E  581D               	subwfb	i2printf@len+1,w,c
  9993  000940  B0D8               	btfsc	status,0,c
  9994  000942  D005               	goto	i2l3258
  9995                           
  9996                           ;doprnt.c: 758: width -= len;
  9997  000944  501C               	movf	i2printf@len,w,c
  9998  000946  5E22               	subwf	i2printf@width,f,c
  9999  000948  501D               	movf	i2printf@len+1,w,c
 10000  00094A  5A23               	subwfb	i2printf@width+1,f,c
 10001  00094C  D008               	goto	i2l3262
 10002  00094E                     i2l3258:
 10003                           
 10004                           ;doprnt.c: 759: else
 10005                           ;doprnt.c: 760: width = 0;
 10006  00094E  0E00               	movlw	0
 10007  000950  6E23               	movwf	i2printf@width+1,c
 10008  000952  0E00               	movlw	0
 10009  000954  6E22               	movwf	i2printf@width,c
 10010                           
 10011                           ;doprnt.c: 764: while(width--)
 10012  000956  D003               	goto	i2l3262
 10013  000958                     i2l3260:
 10014                           
 10015                           ;doprnt.c: 765: (putch(' ') );
 10016  000958  0E20               	movlw	32
 10017  00095A  EC6C  F011         	call	i2_putch
 10018  00095E                     i2l3262:
 10019  00095E  0622               	decf	i2printf@width,f,c
 10020  000960  A0D8               	btfss	status,0,c
 10021  000962  0623               	decf	i2printf@width+1,f,c
 10022  000964  2822               	incf	i2printf@width,w,c
 10023  000966  E1F8               	bnz	i2l3260
 10024  000968  2823               	incf	i2printf@width+1,w,c
 10025  00096A  B4D8               	btfsc	status,2,c
 10026  00096C  D00A               	goto	i2l3268
 10027  00096E  D7F4               	goto	i2l3260
 10028  000970                     i2l3264:
 10029                           
 10030                           ;doprnt.c: 768: (putch(*cp++) );
 10031  000970  C017  FFD9         	movff	i2printf@cp,fsr2l
 10032  000974  C018  FFDA         	movff	i2printf@cp+1,fsr2h
 10033  000978  50DF               	movf	indf2,w,c
 10034  00097A  EC6C  F011         	call	i2_putch
 10035  00097E  4A17               	infsnz	i2printf@cp,f,c
 10036  000980  2A18               	incf	i2printf@cp+1,f,c
 10037  000982                     i2l3268:
 10038  000982  061C               	decf	i2printf@len,f,c
 10039  000984  A0D8               	btfss	status,0,c
 10040  000986  061D               	decf	i2printf@len+1,f,c
 10041  000988  281C               	incf	i2printf@len,w,c
 10042  00098A  E1F2               	bnz	i2l3264
 10043  00098C  281D               	incf	i2printf@len+1,w,c
 10044  00098E  B4D8               	btfsc	status,2,c
 10045  000990  D134               	goto	i2l3378
 10046  000992  D7EE               	goto	i2l3264
 10047  000994                     i2l3270:
 10048                           
 10049                           ;doprnt.c: 805: cp = (char *)&c;
 10050  000994  0E24               	movlw	low i2printf@c
 10051  000996  6E17               	movwf	i2printf@cp,c
 10052  000998  0E00               	movlw	high i2printf@c
 10053  00099A  6E18               	movwf	i2printf@cp+1,c
 10054                           
 10055                           ;doprnt.c: 806: len = 1;
 10056  00099C  0E00               	movlw	0
 10057  00099E  6E1D               	movwf	i2printf@len+1,c
 10058  0009A0  0E01               	movlw	1
 10059  0009A2  6E1C               	movwf	i2printf@len,c
 10060                           
 10061                           ;doprnt.c: 807: goto dostring;
 10062  0009A4  D7C9               	goto	i2l3254
 10063  0009A6                     i2l3274:
 10064                           
 10065                           ;doprnt.c: 818: flag |= 0xC0;
 10066  0009A6  0EC0               	movlw	192
 10067  0009A8  1221               	iorwf	i2printf@flag,f,c
 10068                           
 10069                           ;doprnt.c: 822: }
 10070                           
 10071                           ;doprnt.c: 819: break;
 10072  0009AA  D01A               	goto	i2l3280
 10073  0009AC                     i2l3278:
 10074  0009AC  C00D  FFF6         	movff	i2printf@f,tblptrl
 10075  0009B0  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 10076  0009B4  4A0D               	infsnz	i2printf@f,f,c
 10077  0009B6  2A0E               	incf	i2printf@f+1,f,c
 10078  0009B8                     	if	0	;tblptru may be non-zero
 10079  0009B8                     	endif
 10080  0009B8                     	if	0	;tblptru may be non-zero
 10081  0009B8                     	endif
 10082  0009B8  0008               	tblrd		*
 10083  0009BA  CFF5 F024          	movff	tablat,i2printf@c
 10084  0009BE  5024               	movf	i2printf@c,w,c
 10085                           
 10086                           ; Switch size 1, requested type "space"
 10087                           ; Number of cases is 5, Range of values is 0 to 120
 10088                           ; switch strategies available:
 10089                           ; Name         Instructions Cycles
 10090                           ; simple_byte           16     9 (average)
 10091                           ;	Chosen strategy is simple_byte
 10092  0009C0  0A00               	xorlw	0	; case 0
 10093  0009C2  B4D8               	btfsc	status,2,c
 10094  0009C4  0012               	return	
 10095  0009C6  0A64               	xorlw	100	; case 100
 10096  0009C8  B4D8               	btfsc	status,2,c
 10097  0009CA  D00A               	goto	i2l3280
 10098  0009CC  0A0D               	xorlw	13	; case 105
 10099  0009CE  B4D8               	btfsc	status,2,c
 10100  0009D0  D007               	goto	i2l3280
 10101  0009D2  0A1C               	xorlw	28	; case 117
 10102  0009D4  B4D8               	btfsc	status,2,c
 10103  0009D6  D7E7               	goto	i2l3274
 10104  0009D8  0A0D               	xorlw	13	; case 120
 10105  0009DA  B4D8               	btfsc	status,2,c
 10106  0009DC  D7AB               	goto	i2l3252
 10107  0009DE  D7DA               	goto	i2l3270
 10108  0009E0                     i2l3280:
 10109                           
 10110                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
 10111  0009E0  C021  F013         	movff	i2printf@flag,??i2_printf
 10112  0009E4  0EC0               	movlw	192
 10113  0009E6  1613               	andwf	??i2_printf,f,c
 10114  0009E8  A4D8               	btfss	status,2,c
 10115  0009EA  D015               	goto	i2l3292
 10116                           
 10117                           ;doprnt.c: 1253: {
 10118                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 10119  0009EC  C01A  FFD9         	movff	i2printf@ap,fsr2l
 10120  0009F0  C01B  FFDA         	movff	i2printf@ap+1,fsr2h
 10121  0009F4  CFDE F01F          	movff	postinc2,i2printf@val
 10122  0009F8  CFDD F020          	movff	postdec2,i2printf@val+1
 10123  0009FC  0E02               	movlw	2
 10124  0009FE  261A               	addwf	i2printf@ap,f,c
 10125  000A00  0E00               	movlw	0
 10126  000A02  221B               	addwfc	i2printf@ap+1,f,c
 10127                           
 10128                           ;doprnt.c: 1261: if((int)val < 0) {
 10129  000A04  AE20               	btfss	i2printf@val+1,7,c
 10130  000A06  D044               	goto	i2l3326
 10131                           
 10132                           ;doprnt.c: 1262: flag |= 0x03;
 10133  000A08  0E03               	movlw	3
 10134  000A0A  1221               	iorwf	i2printf@flag,f,c
 10135                           
 10136                           ;doprnt.c: 1263: val = -val;
 10137  000A0C  6C1F               	negf	i2printf@val,c
 10138  000A0E  1E20               	comf	i2printf@val+1,f,c
 10139  000A10  B0D8               	btfsc	status,0,c
 10140  000A12  2A20               	incf	i2printf@val+1,f,c
 10141                           
 10142                           ;doprnt.c: 1264: }
 10143                           ;doprnt.c: 1266: }
 10144  000A14  D03D               	goto	i2l3326
 10145  000A16                     i2l3292:
 10146                           
 10147                           ;doprnt.c: 1268: else
 10148                           ;doprnt.c: 1273: {
 10149                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 10150  000A16  C01A  FFD9         	movff	i2printf@ap,fsr2l
 10151  000A1A  C01B  FFDA         	movff	i2printf@ap+1,fsr2h
 10152  000A1E  CFDE F01F          	movff	postinc2,i2printf@val
 10153  000A22  CFDD F020          	movff	postdec2,i2printf@val+1
 10154  000A26  0E02               	movlw	2
 10155  000A28  261A               	addwf	i2printf@ap,f,c
 10156  000A2A  0E00               	movlw	0
 10157  000A2C  221B               	addwfc	i2printf@ap+1,f,c
 10158                           
 10159                           ;doprnt.c: 1287: }
 10160                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
 10161  000A2E  D030               	goto	i2l3326
 10162  000A30                     i2l3296:
 10163                           
 10164                           ;doprnt.c: 1302: case 0xC0:
 10165                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 10166  000A30  0E01               	movlw	1
 10167  000A32  6E24               	movwf	i2printf@c,c
 10168  000A34                     i2l3298:
 10169  000A34  0E05               	movlw	5
 10170  000A36  1824               	xorwf	i2printf@c,w,c
 10171  000A38  B4D8               	btfsc	status,2,c
 10172  000A3A  D035               	goto	i2l3328
 10173                           
 10174                           ;doprnt.c: 1306: if(val < dpowers[c])
 10175  000A3C  5024               	movf	i2printf@c,w,c
 10176  000A3E  0D02               	mullw	2
 10177  000A40  0E6D               	movlw	low _dpowers
 10178  000A42  24F3               	addwf	prodl,w,c
 10179  000A44  6EF6               	movwf	tblptrl,c
 10180  000A46  0EFC               	movlw	high _dpowers
 10181  000A48  20F4               	addwfc	prodh,w,c
 10182  000A4A  6EF7               	movwf	tblptrh,c
 10183  000A4C                     	if	0	;There are less than 3 active tblptr bytes
 10184  000A4C                     	endif
 10185  000A4C  0009               	tblrd		*+
 10186  000A4E  50F5               	movf	tablat,w,c
 10187  000A50  5C1F               	subwf	i2printf@val,w,c
 10188  000A52  0009               	tblrd		*+
 10189  000A54  50F5               	movf	tablat,w,c
 10190  000A56  5820               	subwfb	i2printf@val+1,w,c
 10191  000A58  A0D8               	btfss	status,0,c
 10192  000A5A  D025               	goto	i2l3328
 10193                           
 10194                           ;doprnt.c: 1307: break;
 10195  000A5C  2A24               	incf	i2printf@c,f,c
 10196  000A5E  D7EA               	goto	i2l3298
 10197  000A60                     i2l3310:
 10198                           
 10199                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 10200  000A60  0E01               	movlw	1
 10201  000A62  6E24               	movwf	i2printf@c,c
 10202  000A64                     i2l3312:
 10203  000A64  0E04               	movlw	4
 10204  000A66  1824               	xorwf	i2printf@c,w,c
 10205  000A68  B4D8               	btfsc	status,2,c
 10206  000A6A  D01D               	goto	i2l3328
 10207                           
 10208                           ;doprnt.c: 1317: if(val < hexpowers[c])
 10209  000A6C  5024               	movf	i2printf@c,w,c
 10210  000A6E  0D02               	mullw	2
 10211  000A70  0E77               	movlw	low _hexpowers
 10212  000A72  24F3               	addwf	prodl,w,c
 10213  000A74  6EF6               	movwf	tblptrl,c
 10214  000A76  0EFC               	movlw	high _hexpowers
 10215  000A78  20F4               	addwfc	prodh,w,c
 10216  000A7A  6EF7               	movwf	tblptrh,c
 10217  000A7C                     	if	0	;There are less than 3 active tblptr bytes
 10218  000A7C                     	endif
 10219  000A7C  0009               	tblrd		*+
 10220  000A7E  50F5               	movf	tablat,w,c
 10221  000A80  5C1F               	subwf	i2printf@val,w,c
 10222  000A82  0009               	tblrd		*+
 10223  000A84  50F5               	movf	tablat,w,c
 10224  000A86  5820               	subwfb	i2printf@val+1,w,c
 10225  000A88  A0D8               	btfss	status,0,c
 10226  000A8A  D00D               	goto	i2l3328
 10227                           
 10228                           ;doprnt.c: 1318: break;
 10229  000A8C  2A24               	incf	i2printf@c,f,c
 10230  000A8E  D7EA               	goto	i2l3312
 10231  000A90                     i2l3326:
 10232  000A90  5021               	movf	i2printf@flag,w,c
 10233  000A92  0BC0               	andlw	192
 10234                           
 10235                           ; Switch size 1, requested type "space"
 10236                           ; Number of cases is 3, Range of values is 0 to 192
 10237                           ; switch strategies available:
 10238                           ; Name         Instructions Cycles
 10239                           ; simple_byte           10     6 (average)
 10240                           ;	Chosen strategy is simple_byte
 10241  000A94  0A00               	xorlw	0	; case 0
 10242  000A96  B4D8               	btfsc	status,2,c
 10243  000A98  D7CB               	goto	i2l3296
 10244  000A9A  0A80               	xorlw	128	; case 128
 10245  000A9C  B4D8               	btfsc	status,2,c
 10246  000A9E  D7E0               	goto	i2l3310
 10247  000AA0  0A40               	xorlw	64	; case 192
 10248  000AA2  B4D8               	btfsc	status,2,c
 10249  000AA4  D7C5               	goto	i2l3296
 10250  000AA6                     i2l3328:
 10251                           
 10252                           ;doprnt.c: 1345: if(width && flag & 0x03)
 10253  000AA6  5022               	movf	i2printf@width,w,c
 10254  000AA8  1023               	iorwf	i2printf@width+1,w,c
 10255  000AAA  B4D8               	btfsc	status,2,c
 10256  000AAC  D009               	goto	i2l3334
 10257  000AAE  C021  F013         	movff	i2printf@flag,??i2_printf
 10258  000AB2  0E03               	movlw	3
 10259  000AB4  1613               	andwf	??i2_printf,f,c
 10260  000AB6  B4D8               	btfsc	status,2,c
 10261  000AB8  D003               	goto	i2l3334
 10262                           
 10263                           ;doprnt.c: 1346: width--;
 10264  000ABA  0622               	decf	i2printf@width,f,c
 10265  000ABC  A0D8               	btfss	status,0,c
 10266  000ABE  0623               	decf	i2printf@width+1,f,c
 10267  000AC0                     i2l3334:
 10268                           
 10269                           ;doprnt.c: 1381: if(width > c)
 10270  000AC0  0E80               	movlw	128
 10271  000AC2  BE24               	btfsc	i2printf@c,7,c
 10272  000AC4  0E7F               	movlw	127
 10273  000AC6  6E13               	movwf	??i2_printf& (0+255),c
 10274  000AC8  5022               	movf	i2printf@width,w,c
 10275  000ACA  5C24               	subwf	i2printf@c,w,c
 10276  000ACC  5023               	movf	i2printf@width+1,w,c
 10277  000ACE  0A80               	xorlw	128
 10278  000AD0  5813               	subwfb	??i2_printf& (0+255),w,c
 10279  000AD2  B0D8               	btfsc	status,0,c
 10280  000AD4  D007               	goto	i2l3338
 10281                           
 10282                           ;doprnt.c: 1382: width -= c;
 10283  000AD6  5024               	movf	i2printf@c,w,c
 10284  000AD8  5E22               	subwf	i2printf@width,f,c
 10285  000ADA  0E00               	movlw	0
 10286  000ADC  BE24               	btfsc	i2printf@c,7,c
 10287  000ADE  0EFF               	movlw	255
 10288  000AE0  5A23               	subwfb	i2printf@width+1,f,c
 10289  000AE2  D004               	goto	i2l3340
 10290  000AE4                     i2l3338:
 10291                           
 10292                           ;doprnt.c: 1383: else
 10293                           ;doprnt.c: 1384: width = 0;
 10294  000AE4  0E00               	movlw	0
 10295  000AE6  6E23               	movwf	i2printf@width+1,c
 10296  000AE8  0E00               	movlw	0
 10297  000AEA  6E22               	movwf	i2printf@width,c
 10298  000AEC                     i2l3340:
 10299                           
 10300                           ;doprnt.c: 1387: if(flag & 0x04) {
 10301  000AEC  A421               	btfss	i2printf@flag,2,c
 10302  000AEE  D014               	goto	i2l3352
 10303                           
 10304                           ;doprnt.c: 1392: if(flag & 0x03)
 10305  000AF0  C021  F013         	movff	i2printf@flag,??i2_printf
 10306  000AF4  0E03               	movlw	3
 10307  000AF6  1613               	andwf	??i2_printf,f,c
 10308  000AF8  B4D8               	btfsc	status,2,c
 10309  000AFA  D003               	goto	i2l3346
 10310                           
 10311                           ;doprnt.c: 1393: (putch('-') );
 10312  000AFC  0E2D               	movlw	45
 10313  000AFE  EC6C  F011         	call	i2_putch
 10314  000B02                     i2l3346:
 10315                           
 10316                           ;doprnt.c: 1415: if(width)
 10317  000B02  5022               	movf	i2printf@width,w,c
 10318  000B04  1023               	iorwf	i2printf@width+1,w,c
 10319  000B06  B4D8               	btfsc	status,2,c
 10320  000B08  D01E               	goto	i2l3362
 10321                           
 10322                           ;doprnt.c: 1417: (putch('0') );
 10323                           
 10324                           ;doprnt.c: 1416: do
 10325  000B0A  0E30               	movlw	48
 10326  000B0C  EC6C  F011         	call	i2_putch
 10327                           
 10328                           ;doprnt.c: 1418: while(--width);
 10329  000B10  0622               	decf	i2printf@width,f,c
 10330  000B12  A0D8               	btfss	status,0,c
 10331  000B14  0623               	decf	i2printf@width+1,f,c
 10332  000B16  D7F5               	goto	i2l3346
 10333  000B18                     i2l3352:
 10334                           
 10335                           ;doprnt.c: 1422: {
 10336                           ;doprnt.c: 1424: if(width
 10337                           ;doprnt.c: 1428: )
 10338  000B18  5022               	movf	i2printf@width,w,c
 10339  000B1A  1023               	iorwf	i2printf@width+1,w,c
 10340  000B1C  B4D8               	btfsc	status,2,c
 10341  000B1E  D00A               	goto	i2l3358
 10342  000B20                     i2l3354:
 10343                           
 10344                           ;doprnt.c: 1430: (putch(' ') );
 10345  000B20  0E20               	movlw	32
 10346  000B22  EC6C  F011         	call	i2_putch
 10347                           
 10348                           ;doprnt.c: 1431: while(--width);
 10349  000B26  0622               	decf	i2printf@width,f,c
 10350  000B28  A0D8               	btfss	status,0,c
 10351  000B2A  0623               	decf	i2printf@width+1,f,c
 10352  000B2C  5022               	movf	i2printf@width,w,c
 10353  000B2E  1023               	iorwf	i2printf@width+1,w,c
 10354  000B30  A4D8               	btfss	status,2,c
 10355  000B32  D7F6               	goto	i2l3354
 10356  000B34                     i2l3358:
 10357                           
 10358                           ;doprnt.c: 1438: if(flag & 0x03)
 10359  000B34  C021  F013         	movff	i2printf@flag,??i2_printf
 10360  000B38  0E03               	movlw	3
 10361  000B3A  1613               	andwf	??i2_printf,f,c
 10362  000B3C  B4D8               	btfsc	status,2,c
 10363  000B3E  D003               	goto	i2l3362
 10364                           
 10365                           ;doprnt.c: 1439: (putch('-') );
 10366  000B40  0E2D               	movlw	45
 10367  000B42  EC6C  F011         	call	i2_putch
 10368  000B46                     i2l3362:
 10369                           
 10370                           ;doprnt.c: 1469: }
 10371                           ;doprnt.c: 1472: prec = c;
 10372  000B46  C024  F01E         	movff	i2printf@c,i2printf@prec
 10373                           
 10374                           ;doprnt.c: 1474: while(prec--) {
 10375  000B4A  D053               	goto	i2l3376
 10376  000B4C                     i2l3364:
 10377                           
 10378                           ;doprnt.c: 1486: case 0xC0:
 10379                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10380  000B4C  501E               	movf	i2printf@prec,w,c
 10381  000B4E  0D02               	mullw	2
 10382  000B50  0E6D               	movlw	low _dpowers
 10383  000B52  24F3               	addwf	prodl,w,c
 10384  000B54  6EF6               	movwf	tblptrl,c
 10385  000B56  0EFC               	movlw	high _dpowers
 10386  000B58  20F4               	addwfc	prodh,w,c
 10387  000B5A  6EF7               	movwf	tblptrh,c
 10388  000B5C                     	if	0	;There are less than 3 active tblptr bytes
 10389  000B5C                     	endif
 10390  000B5C  0009               	tblrd		*+
 10391  000B5E  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 10392  000B62  000A               	tblrd		*-
 10393  000B64  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 10394  000B68  C01F  F001         	movff	i2printf@val,i2___lwdiv@dividend
 10395  000B6C  C020  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 10396  000B70  EC6C  F00F         	call	i2___lwdiv	;wreg free
 10397  000B74  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 10398  000B78  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 10399  000B7C  0E00               	movlw	0
 10400  000B7E  6E0B               	movwf	i2___lwmod@divisor+1,c
 10401  000B80  0E0A               	movlw	10
 10402  000B82  6E0A               	movwf	i2___lwmod@divisor,c
 10403  000B84  ECD9  F00F         	call	i2___lwmod	;wreg free
 10404  000B88  5008               	movf	?i2___lwmod,w,c
 10405  000B8A  0F30               	addlw	48
 10406  000B8C  6E24               	movwf	i2printf@c,c
 10407                           
 10408                           ;doprnt.c: 1491: break;
 10409  000B8E  D02E               	goto	i2l3374
 10410  000B90                     i2l3366:
 10411                           
 10412                           ;doprnt.c: 1499: {
 10413                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 10414  000B90  C01F  F001         	movff	i2printf@val,i2___lwdiv@dividend
 10415  000B94  C020  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 10416  000B98  501E               	movf	i2printf@prec,w,c
 10417  000B9A  0D02               	mullw	2
 10418  000B9C  0E77               	movlw	low _hexpowers
 10419  000B9E  24F3               	addwf	prodl,w,c
 10420  000BA0  6EF6               	movwf	tblptrl,c
 10421  000BA2  0EFC               	movlw	high _hexpowers
 10422  000BA4  20F4               	addwfc	prodh,w,c
 10423  000BA6  6EF7               	movwf	tblptrh,c
 10424  000BA8                     	if	0	;There are less than 3 active tblptr bytes
 10425  000BA8                     	endif
 10426  000BA8  0009               	tblrd		*+
 10427  000BAA  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 10428  000BAE  000A               	tblrd		*-
 10429  000BB0  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 10430  000BB4  EC6C  F00F         	call	i2___lwdiv	;wreg free
 10431  000BB8  5001               	movf	?i2___lwdiv,w,c
 10432  000BBA  0B0F               	andlw	15
 10433  000BBC  6E19               	movwf	i2printf@idx,c
 10434                           
 10435                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 10436  000BBE  5019               	movf	i2printf@idx,w,c
 10437  000BC0  0D01               	mullw	1
 10438  000BC2  0E38               	movlw	low STR_52
 10439  000BC4  24F3               	addwf	prodl,w,c
 10440  000BC6  6EF6               	movwf	tblptrl,c
 10441  000BC8  0EFF               	movlw	high STR_52
 10442  000BCA  20F4               	addwfc	prodh,w,c
 10443  000BCC  6EF7               	movwf	tblptrh,c
 10444  000BCE                     	if	0	;There are less than 3 active tblptr bytes
 10445  000BCE                     	endif
 10446  000BCE  0008               	tblrd		*
 10447  000BD0  CFF5 F024          	movff	tablat,i2printf@c
 10448                           
 10449                           ;doprnt.c: 1523: }
 10450                           
 10451                           ;doprnt.c: 1508: }
 10452                           ;doprnt.c: 1510: break;
 10453  000BD4  D00B               	goto	i2l3374
 10454  000BD6                     i2l3372:
 10455  000BD6  5021               	movf	i2printf@flag,w,c
 10456  000BD8  0BC0               	andlw	192
 10457                           
 10458                           ; Switch size 1, requested type "space"
 10459                           ; Number of cases is 3, Range of values is 0 to 192
 10460                           ; switch strategies available:
 10461                           ; Name         Instructions Cycles
 10462                           ; simple_byte           10     6 (average)
 10463                           ;	Chosen strategy is simple_byte
 10464  000BDA  0A00               	xorlw	0	; case 0
 10465  000BDC  B4D8               	btfsc	status,2,c
 10466  000BDE  D7B6               	goto	i2l3364
 10467  000BE0  0A80               	xorlw	128	; case 128
 10468  000BE2  B4D8               	btfsc	status,2,c
 10469  000BE4  D7D5               	goto	i2l3366
 10470  000BE6  0A40               	xorlw	64	; case 192
 10471  000BE8  B4D8               	btfsc	status,2,c
 10472  000BEA  D7B0               	goto	i2l3364
 10473  000BEC                     i2l3374:
 10474                           
 10475                           ;doprnt.c: 1524: (putch(c) );
 10476  000BEC  5024               	movf	i2printf@c,w,c
 10477  000BEE  EC6C  F011         	call	i2_putch
 10478  000BF2                     i2l3376:
 10479  000BF2  061E               	decf	i2printf@prec,f,c
 10480  000BF4  281E               	incf	i2printf@prec,w,c
 10481  000BF6  A4D8               	btfss	status,2,c
 10482  000BF8  D7EE               	goto	i2l3372
 10483  000BFA                     i2l3378:
 10484  000BFA  C00D  FFF6         	movff	i2printf@f,tblptrl
 10485  000BFE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 10486  000C02  4A0D               	infsnz	i2printf@f,f,c
 10487  000C04  2A0E               	incf	i2printf@f+1,f,c
 10488  000C06                     	if	0	;tblptru may be non-zero
 10489  000C06                     	endif
 10490  000C06                     	if	0	;tblptru may be non-zero
 10491  000C06                     	endif
 10492  000C06  0008               	tblrd		*
 10493  000C08  CFF5 F024          	movff	tablat,i2printf@c
 10494  000C0C  5024               	movf	i2printf@c,w,c
 10495  000C0E  B4D8               	btfsc	status,2,c
 10496  000C10  0012               	return	
 10497  000C12  D638               	goto	i2l3228
 10498  000C14                     __end_ofi2_printf:
 10499                           	opt stack 0
 10500                           pclatu	equ	0xFFB
 10501                           pclath	equ	0xFFA
 10502                           tblptru	equ	0xFF8
 10503                           tblptrh	equ	0xFF7
 10504                           tblptrl	equ	0xFF6
 10505                           tablat	equ	0xFF5
 10506                           prodh	equ	0xFF4
 10507                           prodl	equ	0xFF3
 10508                           intcon	equ	0xFF2
 10509                           intcon3	equ	0xFF0
 10510                           postinc0	equ	0xFEE
 10511                           fsr0h	equ	0xFEA
 10512                           fsr0l	equ	0xFE9
 10513                           wreg	equ	0xFE8
 10514                           plusw1	equ	0xFE3
 10515                           fsr1h	equ	0xFE2
 10516                           fsr1l	equ	0xFE1
 10517                           indf2	equ	0xFDF
 10518                           postinc2	equ	0xFDE
 10519                           postdec2	equ	0xFDD
 10520                           plusw2	equ	0xFDB
 10521                           fsr2h	equ	0xFDA
 10522                           fsr2l	equ	0xFD9
 10523                           status	equ	0xFD8
 10524                           
 10525 ;; *************** function i2_putch *****************
 10526 ;; Defined at:
 10527 ;;		line 25 in file "lcd.c"
 10528 ;; Parameters:    Size  Location     Type
 10529 ;;  data            1    wreg     unsigned char 
 10530 ;; Auto vars:     Size  Location     Type
 10531 ;;  data            1    2[COMRAM] unsigned char 
 10532 ;; Return value:  Size  Location     Type
 10533 ;;                  1    wreg      void 
 10534 ;; Registers used:
 10535 ;;		wreg, status,2, status,0, cstack
 10536 ;; Tracked objects:
 10537 ;;		On entry : 0/0
 10538 ;;		On exit  : 0/0
 10539 ;;		Unchanged: 0/0
 10540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10542 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10544 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10545 ;;Total ram usage:        1 bytes
 10546 ;; Hardware stack levels used:    1
 10547 ;; Hardware stack levels required when called:    1
 10548 ;; This function calls:
 10549 ;;		i2_lcdNibble
 10550 ;; This function is called by:
 10551 ;;		i2_printf
 10552 ;; This function uses a non-reentrant model
 10553 ;;
 10554                           
 10555                           	psect	text51
 10556  0022D8                     __ptext51:
 10557                           	opt stack 0
 10558  0022D8                     i2_putch:
 10559                           	opt stack 22
 10560                           
 10561                           ;incstack = 0
 10562                           ;i2putch@data stored from wreg
 10563  0022D8  6E03               	movwf	i2putch@data,c
 10564                           
 10565                           ;lcd.c: 26: LATDbits.LATD2 = 1;
 10566  0022DA  848C               	bsf	3980,2,c	;volatile
 10567                           
 10568                           ;lcd.c: 27: lcdNibble(data);
 10569  0022DC  5003               	movf	i2putch@data,w,c
 10570  0022DE  EC41  F00F         	call	i2_lcdNibble
 10571  0022E2  0012               	return		;funcret
 10572  0022E4                     __end_ofi2_putch:
 10573                           	opt stack 0
 10574                           pclatu	equ	0xFFB
 10575                           pclath	equ	0xFFA
 10576                           tblptru	equ	0xFF8
 10577                           tblptrh	equ	0xFF7
 10578                           tblptrl	equ	0xFF6
 10579                           tablat	equ	0xFF5
 10580                           prodh	equ	0xFF4
 10581                           prodl	equ	0xFF3
 10582                           intcon	equ	0xFF2
 10583                           intcon3	equ	0xFF0
 10584                           postinc0	equ	0xFEE
 10585                           fsr0h	equ	0xFEA
 10586                           fsr0l	equ	0xFE9
 10587                           wreg	equ	0xFE8
 10588                           plusw1	equ	0xFE3
 10589                           fsr1h	equ	0xFE2
 10590                           fsr1l	equ	0xFE1
 10591                           indf2	equ	0xFDF
 10592                           postinc2	equ	0xFDE
 10593                           postdec2	equ	0xFDD
 10594                           plusw2	equ	0xFDB
 10595                           fsr2h	equ	0xFDA
 10596                           fsr2l	equ	0xFD9
 10597                           status	equ	0xFD8
 10598                           
 10599 ;; *************** function i2_isdigit *****************
 10600 ;; Defined at:
 10601 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
 10602 ;; Parameters:    Size  Location     Type
 10603 ;;  c               1    wreg     unsigned char 
 10604 ;; Auto vars:     Size  Location     Type
 10605 ;;  c               1    2[COMRAM] unsigned char 
 10606 ;; Return value:  Size  Location     Type
 10607 ;;		None               void
 10608 ;; Registers used:
 10609 ;;		wreg, status,2, status,0
 10610 ;; Tracked objects:
 10611 ;;		On entry : 0/0
 10612 ;;		On exit  : 0/0
 10613 ;;		Unchanged: 0/0
 10614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10616 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10617 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10618 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10619 ;;Total ram usage:        3 bytes
 10620 ;; Hardware stack levels used:    1
 10621 ;; This function calls:
 10622 ;;		Nothing
 10623 ;; This function is called by:
 10624 ;;		i2_printf
 10625 ;; This function uses a non-reentrant model
 10626 ;;
 10627                           
 10628                           	psect	text52
 10629  00220C                     __ptext52:
 10630                           	opt stack 0
 10631  00220C                     i2_isdigit:
 10632                           	opt stack 23
 10633                           
 10634                           ;incstack = 0
 10635                           ;i2isdigit@c stored from wreg
 10636  00220C  6E03               	movwf	i2isdigit@c,c
 10637  00220E  0E00               	movlw	0
 10638  002210  6E02               	movwf	i2_isdigit$1048,c
 10639  002212  0E3A               	movlw	58
 10640  002214  6003               	cpfslt	i2isdigit@c,c
 10641  002216  D005               	goto	i2l2988
 10642  002218  0E2F               	movlw	47
 10643  00221A  6403               	cpfsgt	i2isdigit@c,c
 10644  00221C  D002               	goto	i2l2988
 10645  00221E  0E01               	movlw	1
 10646  002220  6E02               	movwf	i2_isdigit$1048,c
 10647  002222                     i2l2988:
 10648  002222  C002  F001         	movff	i2_isdigit$1048,??i2_isdigit
 10649  002226  3001               	rrcf	??i2_isdigit,w,c
 10650  002228  0012               	return	
 10651  00222A                     __end_ofi2_isdigit:
 10652                           	opt stack 0
 10653                           pclatu	equ	0xFFB
 10654                           pclath	equ	0xFFA
 10655                           tblptru	equ	0xFF8
 10656                           tblptrh	equ	0xFF7
 10657                           tblptrl	equ	0xFF6
 10658                           tablat	equ	0xFF5
 10659                           prodh	equ	0xFF4
 10660                           prodl	equ	0xFF3
 10661                           intcon	equ	0xFF2
 10662                           intcon3	equ	0xFF0
 10663                           postinc0	equ	0xFEE
 10664                           fsr0h	equ	0xFEA
 10665                           fsr0l	equ	0xFE9
 10666                           wreg	equ	0xFE8
 10667                           plusw1	equ	0xFE3
 10668                           fsr1h	equ	0xFE2
 10669                           fsr1l	equ	0xFE1
 10670                           indf2	equ	0xFDF
 10671                           postinc2	equ	0xFDE
 10672                           postdec2	equ	0xFDD
 10673                           plusw2	equ	0xFDB
 10674                           fsr2h	equ	0xFDA
 10675                           fsr2l	equ	0xFD9
 10676                           status	equ	0xFD8
 10677                           
 10678 ;; *************** function i2___wmul *****************
 10679 ;; Defined at:
 10680 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
 10681 ;; Parameters:    Size  Location     Type
 10682 ;;  multiplier      2    0[COMRAM] unsigned int 
 10683 ;;  multiplicand    2    2[COMRAM] unsigned int 
 10684 ;; Auto vars:     Size  Location     Type
 10685 ;;  __wmul          2    4[COMRAM] unsigned int 
 10686 ;; Return value:  Size  Location     Type
 10687 ;;                  2    0[COMRAM] unsigned int 
 10688 ;; Registers used:
 10689 ;;		wreg, status,2, status,0, prodl, prodh
 10690 ;; Tracked objects:
 10691 ;;		On entry : 0/0
 10692 ;;		On exit  : 0/0
 10693 ;;		Unchanged: 0/0
 10694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10695 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10696 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10698 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10699 ;;Total ram usage:        6 bytes
 10700 ;; Hardware stack levels used:    1
 10701 ;; This function calls:
 10702 ;;		Nothing
 10703 ;; This function is called by:
 10704 ;;		_simulate
 10705 ;;		_WriteRun
 10706 ;;		i2_printf
 10707 ;; This function uses a non-reentrant model
 10708 ;;
 10709                           
 10710                           	psect	text53
 10711  0021C4                     __ptext53:
 10712                           	opt stack 0
 10713  0021C4                     i2___wmul:
 10714                           	opt stack 23
 10715                           
 10716                           ;incstack = 0
 10717  0021C4  5001               	movf	i2___wmul@multiplier,w,c
 10718  0021C6  0203               	mulwf	i2___wmul@multiplicand,c
 10719  0021C8  CFF3 F005          	movff	prodl,i2___wmul@product
 10720  0021CC  CFF4 F006          	movff	prodh,i2___wmul@product+1
 10721  0021D0  5001               	movf	i2___wmul@multiplier,w,c
 10722  0021D2  0204               	mulwf	i2___wmul@multiplicand+1,c
 10723  0021D4  50F3               	movf	prodl,w,c
 10724  0021D6  2606               	addwf	i2___wmul@product+1,f,c
 10725  0021D8  5002               	movf	i2___wmul@multiplier+1,w,c
 10726  0021DA  0203               	mulwf	i2___wmul@multiplicand,c
 10727  0021DC  50F3               	movf	prodl,w,c
 10728  0021DE  2606               	addwf	i2___wmul@product+1,f,c
 10729  0021E0  C005  F001         	movff	i2___wmul@product,?i2___wmul
 10730  0021E4  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 10731  0021E8  0012               	return	
 10732  0021EA                     __end_ofi2___wmul:
 10733                           	opt stack 0
 10734                           pclatu	equ	0xFFB
 10735                           pclath	equ	0xFFA
 10736                           tblptru	equ	0xFF8
 10737                           tblptrh	equ	0xFF7
 10738                           tblptrl	equ	0xFF6
 10739                           tablat	equ	0xFF5
 10740                           prodh	equ	0xFF4
 10741                           prodl	equ	0xFF3
 10742                           intcon	equ	0xFF2
 10743                           intcon3	equ	0xFF0
 10744                           postinc0	equ	0xFEE
 10745                           fsr0h	equ	0xFEA
 10746                           fsr0l	equ	0xFE9
 10747                           wreg	equ	0xFE8
 10748                           plusw1	equ	0xFE3
 10749                           fsr1h	equ	0xFE2
 10750                           fsr1l	equ	0xFE1
 10751                           indf2	equ	0xFDF
 10752                           postinc2	equ	0xFDE
 10753                           postdec2	equ	0xFDD
 10754                           plusw2	equ	0xFDB
 10755                           fsr2h	equ	0xFDA
 10756                           fsr2l	equ	0xFD9
 10757                           status	equ	0xFD8
 10758                           
 10759 ;; *************** function i2___lwmod *****************
 10760 ;; Defined at:
 10761 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
 10762 ;; Parameters:    Size  Location     Type
 10763 ;;  dividend        2    7[COMRAM] unsigned int 
 10764 ;;  divisor         2    9[COMRAM] unsigned int 
 10765 ;; Auto vars:     Size  Location     Type
 10766 ;;  __lwmod         1   11[COMRAM] unsigned char 
 10767 ;; Return value:  Size  Location     Type
 10768 ;;                  2    7[COMRAM] unsigned int 
 10769 ;; Registers used:
 10770 ;;		wreg, status,2, status,0
 10771 ;; Tracked objects:
 10772 ;;		On entry : 0/0
 10773 ;;		On exit  : 0/0
 10774 ;;		Unchanged: 0/0
 10775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10776 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10777 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10779 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10780 ;;Total ram usage:        5 bytes
 10781 ;; Hardware stack levels used:    1
 10782 ;; This function calls:
 10783 ;;		Nothing
 10784 ;; This function is called by:
 10785 ;;		i2_printf
 10786 ;; This function uses a non-reentrant model
 10787 ;;
 10788                           
 10789                           	psect	text54
 10790  001FB2                     __ptext54:
 10791                           	opt stack 0
 10792  001FB2                     i2___lwmod:
 10793                           	opt stack 23
 10794                           
 10795                           ;incstack = 0
 10796  001FB2  500A               	movf	i2___lwmod@divisor,w,c
 10797  001FB4  100B               	iorwf	i2___lwmod@divisor+1,w,c
 10798  001FB6  B4D8               	btfsc	status,2,c
 10799  001FB8  D018               	goto	i2l935
 10800  001FBA  0E01               	movlw	1
 10801  001FBC  6E0C               	movwf	i2___lwmod@counter,c
 10802  001FBE  D004               	goto	i2l3020
 10803  001FC0                     i2l3018:
 10804  001FC0  90D8               	bcf	status,0,c
 10805  001FC2  360A               	rlcf	i2___lwmod@divisor,f,c
 10806  001FC4  360B               	rlcf	i2___lwmod@divisor+1,f,c
 10807  001FC6  2A0C               	incf	i2___lwmod@counter,f,c
 10808  001FC8                     i2l3020:
 10809  001FC8  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 10810  001FCA  D7FA               	goto	i2l3018
 10811  001FCC                     i2l3022:
 10812  001FCC  500A               	movf	i2___lwmod@divisor,w,c
 10813  001FCE  5C08               	subwf	i2___lwmod@dividend,w,c
 10814  001FD0  500B               	movf	i2___lwmod@divisor+1,w,c
 10815  001FD2  5809               	subwfb	i2___lwmod@dividend+1,w,c
 10816  001FD4  A0D8               	btfss	status,0,c
 10817  001FD6  D004               	goto	i2l3026
 10818  001FD8  500A               	movf	i2___lwmod@divisor,w,c
 10819  001FDA  5E08               	subwf	i2___lwmod@dividend,f,c
 10820  001FDC  500B               	movf	i2___lwmod@divisor+1,w,c
 10821  001FDE  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 10822  001FE0                     i2l3026:
 10823  001FE0  90D8               	bcf	status,0,c
 10824  001FE2  320B               	rrcf	i2___lwmod@divisor+1,f,c
 10825  001FE4  320A               	rrcf	i2___lwmod@divisor,f,c
 10826  001FE6  2E0C               	decfsz	i2___lwmod@counter,f,c
 10827  001FE8  D7F1               	goto	i2l3022
 10828  001FEA                     i2l935:
 10829  001FEA  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 10830  001FEE  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 10831  001FF2  0012               	return		;funcret
 10832  001FF4                     __end_ofi2___lwmod:
 10833                           	opt stack 0
 10834                           pclatu	equ	0xFFB
 10835                           pclath	equ	0xFFA
 10836                           tblptru	equ	0xFF8
 10837                           tblptrh	equ	0xFF7
 10838                           tblptrl	equ	0xFF6
 10839                           tablat	equ	0xFF5
 10840                           prodh	equ	0xFF4
 10841                           prodl	equ	0xFF3
 10842                           intcon	equ	0xFF2
 10843                           intcon3	equ	0xFF0
 10844                           postinc0	equ	0xFEE
 10845                           fsr0h	equ	0xFEA
 10846                           fsr0l	equ	0xFE9
 10847                           wreg	equ	0xFE8
 10848                           plusw1	equ	0xFE3
 10849                           fsr1h	equ	0xFE2
 10850                           fsr1l	equ	0xFE1
 10851                           indf2	equ	0xFDF
 10852                           postinc2	equ	0xFDE
 10853                           postdec2	equ	0xFDD
 10854                           plusw2	equ	0xFDB
 10855                           fsr2h	equ	0xFDA
 10856                           fsr2l	equ	0xFD9
 10857                           status	equ	0xFD8
 10858                           
 10859 ;; *************** function i2___lwdiv *****************
 10860 ;; Defined at:
 10861 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
 10862 ;; Parameters:    Size  Location     Type
 10863 ;;  dividend        2    0[COMRAM] unsigned int 
 10864 ;;  divisor         2    2[COMRAM] unsigned int 
 10865 ;; Auto vars:     Size  Location     Type
 10866 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 10867 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 10868 ;; Return value:  Size  Location     Type
 10869 ;;                  2    0[COMRAM] unsigned int 
 10870 ;; Registers used:
 10871 ;;		wreg, status,2, status,0
 10872 ;; Tracked objects:
 10873 ;;		On entry : 0/0
 10874 ;;		On exit  : 0/0
 10875 ;;		Unchanged: 0/0
 10876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10877 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10878 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10880 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10881 ;;Total ram usage:        7 bytes
 10882 ;; Hardware stack levels used:    1
 10883 ;; This function calls:
 10884 ;;		Nothing
 10885 ;; This function is called by:
 10886 ;;		i2_printf
 10887 ;; This function uses a non-reentrant model
 10888 ;;
 10889                           
 10890                           	psect	text55
 10891  001ED8                     __ptext55:
 10892                           	opt stack 0
 10893  001ED8                     i2___lwdiv:
 10894                           	opt stack 23
 10895                           
 10896                           ;incstack = 0
 10897  001ED8  0E00               	movlw	0
 10898  001EDA  6E06               	movwf	i2___lwdiv@quotient+1,c
 10899  001EDC  0E00               	movlw	0
 10900  001EDE  6E05               	movwf	i2___lwdiv@quotient,c
 10901  001EE0  5003               	movf	i2___lwdiv@divisor,w,c
 10902  001EE2  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 10903  001EE4  B4D8               	btfsc	status,2,c
 10904  001EE6  D01C               	goto	i2l925
 10905  001EE8  0E01               	movlw	1
 10906  001EEA  6E07               	movwf	i2___lwdiv@counter,c
 10907  001EEC  D004               	goto	i2l3000
 10908  001EEE                     i2l2998:
 10909  001EEE  90D8               	bcf	status,0,c
 10910  001EF0  3603               	rlcf	i2___lwdiv@divisor,f,c
 10911  001EF2  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 10912  001EF4  2A07               	incf	i2___lwdiv@counter,f,c
 10913  001EF6                     i2l3000:
 10914  001EF6  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 10915  001EF8  D7FA               	goto	i2l2998
 10916  001EFA                     i2l3002:
 10917  001EFA  90D8               	bcf	status,0,c
 10918  001EFC  3605               	rlcf	i2___lwdiv@quotient,f,c
 10919  001EFE  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 10920  001F00  5003               	movf	i2___lwdiv@divisor,w,c
 10921  001F02  5C01               	subwf	i2___lwdiv@dividend,w,c
 10922  001F04  5004               	movf	i2___lwdiv@divisor+1,w,c
 10923  001F06  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 10924  001F08  A0D8               	btfss	status,0,c
 10925  001F0A  D005               	goto	i2l3010
 10926  001F0C  5003               	movf	i2___lwdiv@divisor,w,c
 10927  001F0E  5E01               	subwf	i2___lwdiv@dividend,f,c
 10928  001F10  5004               	movf	i2___lwdiv@divisor+1,w,c
 10929  001F12  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 10930  001F14  8005               	bsf	i2___lwdiv@quotient,0,c
 10931  001F16                     i2l3010:
 10932  001F16  90D8               	bcf	status,0,c
 10933  001F18  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 10934  001F1A  3203               	rrcf	i2___lwdiv@divisor,f,c
 10935  001F1C  2E07               	decfsz	i2___lwdiv@counter,f,c
 10936  001F1E  D7ED               	goto	i2l3002
 10937  001F20                     i2l925:
 10938  001F20  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 10939  001F24  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 10940  001F28  0012               	return		;funcret
 10941  001F2A                     __end_ofi2___lwdiv:
 10942                           	opt stack 0
 10943                           pclatu	equ	0xFFB
 10944                           pclath	equ	0xFFA
 10945                           tblptru	equ	0xFF8
 10946                           tblptrh	equ	0xFF7
 10947                           tblptrl	equ	0xFF6
 10948                           tablat	equ	0xFF5
 10949                           prodh	equ	0xFF4
 10950                           prodl	equ	0xFF3
 10951                           intcon	equ	0xFF2
 10952                           intcon3	equ	0xFF0
 10953                           postinc0	equ	0xFEE
 10954                           fsr0h	equ	0xFEA
 10955                           fsr0l	equ	0xFE9
 10956                           wreg	equ	0xFE8
 10957                           plusw1	equ	0xFE3
 10958                           fsr1h	equ	0xFE2
 10959                           fsr1l	equ	0xFE1
 10960                           indf2	equ	0xFDF
 10961                           postinc2	equ	0xFDE
 10962                           postdec2	equ	0xFDD
 10963                           plusw2	equ	0xFDB
 10964                           fsr2h	equ	0xFDA
 10965                           fsr2l	equ	0xFD9
 10966                           status	equ	0xFD8
 10967                           
 10968 ;; *************** function i2___lcd_newline *****************
 10969 ;; Defined at:
 10970 ;;		line 53 in file "lcd.c"
 10971 ;; Parameters:    Size  Location     Type
 10972 ;;		None
 10973 ;; Auto vars:     Size  Location     Type
 10974 ;;		None
 10975 ;; Return value:  Size  Location     Type
 10976 ;;                  1    wreg      void 
 10977 ;; Registers used:
 10978 ;;		wreg, status,2, status,0, cstack
 10979 ;; Tracked objects:
 10980 ;;		On entry : 0/0
 10981 ;;		On exit  : 0/0
 10982 ;;		Unchanged: 0/0
 10983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10987 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10988 ;;Total ram usage:        0 bytes
 10989 ;; Hardware stack levels used:    1
 10990 ;; Hardware stack levels required when called:    2
 10991 ;; This function calls:
 10992 ;;		i2_lcdInst
 10993 ;; This function is called by:
 10994 ;;		_simulate
 10995 ;;		_showInfo
 10996 ;;		_CW90
 10997 ;;		_CCW90
 10998 ;;		_checkV
 10999 ;;		_checkAA
 11000 ;;		_checkC
 11001 ;;		_check9
 11002 ;;		_PermLog
 11003 ;; This function uses a non-reentrant model
 11004 ;;
 11005                           
 11006                           	psect	text56
 11007  00232C                     __ptext56:
 11008                           	opt stack 0
 11009  00232C                     i2___lcd_newline:
 11010                           	opt stack 22
 11011                           
 11012                           ;lcd.c: 54: lcdInst(0b11000000);
 11013                           
 11014                           ;incstack = 0
 11015  00232C  0EC0               	movlw	192
 11016  00232E  EC72  F011         	call	i2_lcdInst
 11017  002332  0012               	return		;funcret
 11018  002334                     __end_ofi2___lcd_newline:
 11019                           	opt stack 0
 11020                           pclatu	equ	0xFFB
 11021                           pclath	equ	0xFFA
 11022                           tblptru	equ	0xFF8
 11023                           tblptrh	equ	0xFF7
 11024                           tblptrl	equ	0xFF6
 11025                           tablat	equ	0xFF5
 11026                           prodh	equ	0xFF4
 11027                           prodl	equ	0xFF3
 11028                           intcon	equ	0xFF2
 11029                           intcon3	equ	0xFF0
 11030                           postinc0	equ	0xFEE
 11031                           fsr0h	equ	0xFEA
 11032                           fsr0l	equ	0xFE9
 11033                           wreg	equ	0xFE8
 11034                           plusw1	equ	0xFE3
 11035                           fsr1h	equ	0xFE2
 11036                           fsr1l	equ	0xFE1
 11037                           indf2	equ	0xFDF
 11038                           postinc2	equ	0xFDE
 11039                           postdec2	equ	0xFDD
 11040                           plusw2	equ	0xFDB
 11041                           fsr2h	equ	0xFDA
 11042                           fsr2l	equ	0xFD9
 11043                           status	equ	0xFD8
 11044                           
 11045 ;; *************** function i2_lcdInst *****************
 11046 ;; Defined at:
 11047 ;;		line 20 in file "lcd.c"
 11048 ;; Parameters:    Size  Location     Type
 11049 ;;  data            1    wreg     unsigned char 
 11050 ;; Auto vars:     Size  Location     Type
 11051 ;;  data            1    2[COMRAM] unsigned char 
 11052 ;; Return value:  Size  Location     Type
 11053 ;;                  1    wreg      void 
 11054 ;; Registers used:
 11055 ;;		wreg, status,2, status,0, cstack
 11056 ;; Tracked objects:
 11057 ;;		On entry : 0/0
 11058 ;;		On exit  : 0/0
 11059 ;;		Unchanged: 0/0
 11060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11062 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11063 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11064 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11065 ;;Total ram usage:        1 bytes
 11066 ;; Hardware stack levels used:    1
 11067 ;; Hardware stack levels required when called:    1
 11068 ;; This function calls:
 11069 ;;		i2_lcdNibble
 11070 ;; This function is called by:
 11071 ;;		_simulate
 11072 ;;		_showInfo
 11073 ;;		_stopMoving
 11074 ;;		_checkAA
 11075 ;;		_checkC
 11076 ;;		_check9
 11077 ;;		_PermLog
 11078 ;;		i2___lcd_newline
 11079 ;; This function uses a non-reentrant model
 11080 ;;
 11081                           
 11082                           	psect	text57
 11083  0022E4                     __ptext57:
 11084                           	opt stack 0
 11085  0022E4                     i2_lcdInst:
 11086                           	opt stack 23
 11087                           
 11088                           ;incstack = 0
 11089                           ;i2lcdInst@data stored from wreg
 11090  0022E4  6E03               	movwf	i2lcdInst@data,c
 11091                           
 11092                           ;lcd.c: 21: LATDbits.LATD2 = 0;
 11093  0022E6  948C               	bcf	3980,2,c	;volatile
 11094                           
 11095                           ;lcd.c: 22: lcdNibble(data);
 11096  0022E8  5003               	movf	i2lcdInst@data,w,c
 11097  0022EA  EC41  F00F         	call	i2_lcdNibble
 11098  0022EE  0012               	return		;funcret
 11099  0022F0                     __end_ofi2_lcdInst:
 11100                           	opt stack 0
 11101                           pclatu	equ	0xFFB
 11102                           pclath	equ	0xFFA
 11103                           tblptru	equ	0xFF8
 11104                           tblptrh	equ	0xFF7
 11105                           tblptrl	equ	0xFF6
 11106                           tablat	equ	0xFF5
 11107                           prodh	equ	0xFF4
 11108                           prodl	equ	0xFF3
 11109                           intcon	equ	0xFF2
 11110                           intcon3	equ	0xFF0
 11111                           postinc0	equ	0xFEE
 11112                           fsr0h	equ	0xFEA
 11113                           fsr0l	equ	0xFE9
 11114                           wreg	equ	0xFE8
 11115                           plusw1	equ	0xFE3
 11116                           fsr1h	equ	0xFE2
 11117                           fsr1l	equ	0xFE1
 11118                           indf2	equ	0xFDF
 11119                           postinc2	equ	0xFDE
 11120                           postdec2	equ	0xFDD
 11121                           plusw2	equ	0xFDB
 11122                           fsr2h	equ	0xFDA
 11123                           fsr2l	equ	0xFD9
 11124                           status	equ	0xFD8
 11125                           
 11126 ;; *************** function i2_lcdNibble *****************
 11127 ;; Defined at:
 11128 ;;		line 30 in file "lcd.c"
 11129 ;; Parameters:    Size  Location     Type
 11130 ;;  data            1    wreg     unsigned char 
 11131 ;; Auto vars:     Size  Location     Type
 11132 ;;  data            1    1[COMRAM] unsigned char 
 11133 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 11134 ;; Return value:  Size  Location     Type
 11135 ;;                  1    wreg      void 
 11136 ;; Registers used:
 11137 ;;		wreg, status,2, status,0
 11138 ;; Tracked objects:
 11139 ;;		On entry : 0/0
 11140 ;;		On exit  : 0/0
 11141 ;;		Unchanged: 0/0
 11142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11144 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11146 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11147 ;;Total ram usage:        2 bytes
 11148 ;; Hardware stack levels used:    1
 11149 ;; This function calls:
 11150 ;;		Nothing
 11151 ;; This function is called by:
 11152 ;;		i2_lcdInst
 11153 ;;		i2_putch
 11154 ;; This function uses a non-reentrant model
 11155 ;;
 11156                           
 11157                           	psect	text58
 11158  001E82                     __ptext58:
 11159                           	opt stack 0
 11160  001E82                     i2_lcdNibble:
 11161                           	opt stack 22
 11162                           
 11163                           ;incstack = 0
 11164                           ;i2lcdNibble@data stored from wreg
 11165  001E82  6E02               	movwf	i2lcdNibble@data,c
 11166                           
 11167                           ;lcd.c: 32: char temp = data & 0xF0;
 11168  001E84  5002               	movf	i2lcdNibble@data,w,c
 11169  001E86  0BF0               	andlw	240
 11170  001E88  6E01               	movwf	i2lcdNibble@temp,c
 11171                           
 11172                           ;lcd.c: 33: LATD = LATD & 0x0F;
 11173  001E8A  508C               	movf	3980,w,c	;volatile
 11174  001E8C  0B0F               	andlw	15
 11175  001E8E  6E8C               	movwf	3980,c	;volatile
 11176                           
 11177                           ;lcd.c: 34: LATD = temp | LATD;
 11178  001E90  5001               	movf	i2lcdNibble@temp,w,c
 11179  001E92  108C               	iorwf	3980,w,c	;volatile
 11180  001E94  6E8C               	movwf	3980,c	;volatile
 11181                           
 11182                           ;lcd.c: 36: LATDbits.LATD3 = 0;
 11183  001E96  968C               	bcf	3980,3,c	;volatile
 11184                           
 11185                           ;lcd.c: 37: _delay((unsigned long)((25)*(8000000/4000000.0)));
 11186  001E98  0E10               	movlw	16
 11187  001E9A                     i2u343_47:
 11188  001E9A  2EE8               	decfsz	wreg,f,c
 11189  001E9C  D7FE               	bra	i2u343_47
 11190  001E9E  D000               	nop2	
 11191                           
 11192                           ;lcd.c: 38: LATDbits.LATD3 = 1;
 11193  001EA0  868C               	bsf	3980,3,c	;volatile
 11194                           
 11195                           ;lcd.c: 39: _delay((unsigned long)((25)*(8000000/4000000.0)));
 11196  001EA2  0E10               	movlw	16
 11197  001EA4                     i2u344_47:
 11198  001EA4  2EE8               	decfsz	wreg,f,c
 11199  001EA6  D7FE               	bra	i2u344_47
 11200  001EA8  D000               	nop2	
 11201                           
 11202                           ;lcd.c: 41: data = data << 4;
 11203  001EAA  3802               	swapf	i2lcdNibble@data,w,c
 11204  001EAC  0BF0               	andlw	240
 11205  001EAE  6E02               	movwf	i2lcdNibble@data,c
 11206                           
 11207                           ;lcd.c: 43: temp = data & 0xF0;
 11208  001EB0  5002               	movf	i2lcdNibble@data,w,c
 11209  001EB2  0BF0               	andlw	240
 11210  001EB4  6E01               	movwf	i2lcdNibble@temp,c
 11211                           
 11212                           ;lcd.c: 44: LATD = LATD & 0x0F;
 11213  001EB6  508C               	movf	3980,w,c	;volatile
 11214  001EB8  0B0F               	andlw	15
 11215  001EBA  6E8C               	movwf	3980,c	;volatile
 11216                           
 11217                           ;lcd.c: 45: LATD = temp | LATD;
 11218  001EBC  5001               	movf	i2lcdNibble@temp,w,c
 11219  001EBE  108C               	iorwf	3980,w,c	;volatile
 11220  001EC0  6E8C               	movwf	3980,c	;volatile
 11221                           
 11222                           ;lcd.c: 47: LATDbits.LATD3 = 0;
 11223  001EC2  968C               	bcf	3980,3,c	;volatile
 11224                           
 11225                           ;lcd.c: 48: _delay((unsigned long)((25)*(8000000/4000000.0)));
 11226  001EC4  0E10               	movlw	16
 11227  001EC6                     i2u345_47:
 11228  001EC6  2EE8               	decfsz	wreg,f,c
 11229  001EC8  D7FE               	bra	i2u345_47
 11230  001ECA  D000               	nop2	
 11231                           
 11232                           ;lcd.c: 49: LATDbits.LATD3 = 1;
 11233  001ECC  868C               	bsf	3980,3,c	;volatile
 11234                           
 11235                           ;lcd.c: 50: _delay((unsigned long)((25)*(8000000/4000000.0)));
 11236  001ECE  0E10               	movlw	16
 11237  001ED0                     i2u346_47:
 11238  001ED0  2EE8               	decfsz	wreg,f,c
 11239  001ED2  D7FE               	bra	i2u346_47
 11240  001ED4  D000               	nop2	
 11241  001ED6  0012               	return		;funcret
 11242  001ED8                     __end_ofi2_lcdNibble:
 11243                           	opt stack 0
 11244                           pclatu	equ	0xFFB
 11245                           pclath	equ	0xFFA
 11246                           tblptru	equ	0xFF8
 11247                           tblptrh	equ	0xFF7
 11248                           tblptrl	equ	0xFF6
 11249                           tablat	equ	0xFF5
 11250                           prodh	equ	0xFF4
 11251                           prodl	equ	0xFF3
 11252                           intcon	equ	0xFF2
 11253                           intcon3	equ	0xFF0
 11254                           postinc0	equ	0xFEE
 11255                           fsr0h	equ	0xFEA
 11256                           fsr0l	equ	0xFE9
 11257                           wreg	equ	0xFE8
 11258                           plusw1	equ	0xFE3
 11259                           fsr1h	equ	0xFE2
 11260                           fsr1l	equ	0xFE1
 11261                           indf2	equ	0xFDF
 11262                           postinc2	equ	0xFDE
 11263                           postdec2	equ	0xFDD
 11264                           plusw2	equ	0xFDB
 11265                           fsr2h	equ	0xFDA
 11266                           fsr2l	equ	0xFD9
 11267                           status	equ	0xFD8
 11268                           
 11269 ;; *************** function _captureKeypad *****************
 11270 ;; Defined at:
 11271 ;;		line 6 in file "modules.c"
 11272 ;; Parameters:    Size  Location     Type
 11273 ;;		None
 11274 ;; Auto vars:     Size  Location     Type
 11275 ;;  keypress        1    2[COMRAM] unsigned char 
 11276 ;; Return value:  Size  Location     Type
 11277 ;;                  2    0[COMRAM] unsigned int 
 11278 ;; Registers used:
 11279 ;;		wreg, status,2, status,0
 11280 ;; Tracked objects:
 11281 ;;		On entry : 0/0
 11282 ;;		On exit  : 0/0
 11283 ;;		Unchanged: 0/0
 11284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11285 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11286 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11288 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11289 ;;Total ram usage:        3 bytes
 11290 ;; Hardware stack levels used:    1
 11291 ;; This function calls:
 11292 ;;		Nothing
 11293 ;; This function is called by:
 11294 ;;		_showInfo
 11295 ;; This function uses a non-reentrant model
 11296 ;;
 11297                           
 11298                           	psect	text59
 11299  00222A                     __ptext59:
 11300                           	opt stack 0
 11301  00222A                     _captureKeypad:
 11302                           	opt stack 23
 11303                           
 11304                           ;modules.c: 7: (INTCONbits.GIE = 0);
 11305                           
 11306                           ;incstack = 0
 11307  00222A  9EF2               	bcf	intcon,7,c	;volatile
 11308  00222C                     i2l202:
 11309  00222C  A281               	btfss	3969,1,c	;volatile
 11310  00222E  D7FE               	goto	i2l202
 11311                           
 11312                           ;modules.c: 10: unsigned char keypress = (PORTB & 0xF0) >> 4;
 11313  002230  3881               	swapf	3969,w,c	;volatile
 11314  002232  0B0F               	andlw	15
 11315  002234  0B0F               	andlw	15
 11316  002236  6E03               	movwf	captureKeypad@keypress,c
 11317  002238                     i2l205:
 11318  002238  B281               	btfsc	3969,1,c	;volatile
 11319  00223A  D7FE               	goto	i2l205
 11320                           
 11321                           ;modules.c: 13: INT1IF = 0;
 11322  00223C  90F0               	bcf	intcon3,0,c	;volatile
 11323                           
 11324                           ;modules.c: 14: (INTCONbits.GIE = 1);
 11325  00223E  8EF2               	bsf	intcon,7,c	;volatile
 11326                           
 11327                           ;modules.c: 15: return keypress;
 11328  002240  C003  F001         	movff	captureKeypad@keypress,?_captureKeypad
 11329  002244  6A02               	clrf	?_captureKeypad+1,c
 11330  002246  0012               	return		;funcret
 11331  002248                     __end_of_captureKeypad:
 11332                           	opt stack 0
 11333                           pclatu	equ	0xFFB
 11334                           pclath	equ	0xFFA
 11335                           tblptru	equ	0xFF8
 11336                           tblptrh	equ	0xFF7
 11337                           tblptrl	equ	0xFF6
 11338                           tablat	equ	0xFF5
 11339                           prodh	equ	0xFF4
 11340                           prodl	equ	0xFF3
 11341                           intcon	equ	0xFF2
 11342                           intcon3	equ	0xFF0
 11343                           postinc0	equ	0xFEE
 11344                           fsr0h	equ	0xFEA
 11345                           fsr0l	equ	0xFE9
 11346                           wreg	equ	0xFE8
 11347                           plusw1	equ	0xFE3
 11348                           fsr1h	equ	0xFE2
 11349                           fsr1l	equ	0xFE1
 11350                           indf2	equ	0xFDF
 11351                           postinc2	equ	0xFDE
 11352                           postdec2	equ	0xFDD
 11353                           plusw2	equ	0xFDB
 11354                           fsr2h	equ	0xFDA
 11355                           fsr2l	equ	0xFD9
 11356                           status	equ	0xFD8
 11357                           
 11358 ;; *************** function _ReadRun *****************
 11359 ;; Defined at:
 11360 ;;		line 68 in file "eeprom.c"
 11361 ;; Parameters:    Size  Location     Type
 11362 ;;  backruns        1    wreg     unsigned char 
 11363 ;;  sorted          2    2[COMRAM] PTR unsigned char 
 11364 ;;		 -> PermLog@sorted(4), 
 11365 ;;  time            2    4[COMRAM] PTR unsigned int 
 11366 ;;		 -> PermLog@time(2), 
 11367 ;; Auto vars:     Size  Location     Type
 11368 ;;  backruns        1   10[COMRAM] unsigned char 
 11369 ;;  add             2   11[COMRAM] unsigned int 
 11370 ;; Return value:  Size  Location     Type
 11371 ;;                  1    wreg      void 
 11372 ;; Registers used:
 11373 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11374 ;; Tracked objects:
 11375 ;;		On entry : 0/0
 11376 ;;		On exit  : 0/0
 11377 ;;		Unchanged: 0/0
 11378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11379 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11380 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11381 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11382 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11383 ;;Total ram usage:       11 bytes
 11384 ;; Hardware stack levels used:    1
 11385 ;; Hardware stack levels required when called:    1
 11386 ;; This function calls:
 11387 ;;		_back
 11388 ;;		i2_ReadEE
 11389 ;; This function is called by:
 11390 ;;		_PermLog
 11391 ;; This function uses a non-reentrant model
 11392 ;;
 11393                           
 11394                           	psect	text60
 11395  000F98                     __ptext60:
 11396                           	opt stack 0
 11397  000F98                     _ReadRun:
 11398                           	opt stack 23
 11399                           
 11400                           ;incstack = 0
 11401                           ;ReadRun@backruns stored from wreg
 11402  000F98  6E0B               	movwf	ReadRun@backruns,c
 11403                           
 11404                           ;eeprom.c: 69: unsigned int add = back(backruns) * 5;
 11405  000F9A  500B               	movf	ReadRun@backruns,w,c
 11406  000F9C  EC24  F011         	call	_back
 11407  000FA0  6E07               	movwf	??_ReadRun& (0+255),c
 11408  000FA2  5007               	movf	??_ReadRun,w,c
 11409  000FA4  0D05               	mullw	5
 11410  000FA6  CFF3 F00C          	movff	prodl,ReadRun@add
 11411  000FAA  CFF4 F00D          	movff	prodh,ReadRun@add+1
 11412                           
 11413                           ;eeprom.c: 70: *time = ReadEE(add++ *8);
 11414  000FAE  C00C  F007         	movff	ReadRun@add,??_ReadRun
 11415  000FB2  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 11416  000FB6  90D8               	bcf	status,0,c
 11417  000FB8  3607               	rlcf	??_ReadRun,f,c
 11418  000FBA  3608               	rlcf	??_ReadRun+1,f,c
 11419  000FBC  90D8               	bcf	status,0,c
 11420  000FBE  3607               	rlcf	??_ReadRun,f,c
 11421  000FC0  3608               	rlcf	??_ReadRun+1,f,c
 11422  000FC2  90D8               	bcf	status,0,c
 11423  000FC4  3607               	rlcf	??_ReadRun,f,c
 11424  000FC6  3608               	rlcf	??_ReadRun+1,f,c
 11425  000FC8  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 11426  000FCC  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 11427  000FD0  EC3E  F011         	call	i2_ReadEE	;wreg free
 11428  000FD4  6E09               	movwf	(??_ReadRun+2)& (0+255),c
 11429  000FD6  6A0A               	clrf	(??_ReadRun+3)& (0+255),c
 11430  000FD8  C005  FFD9         	movff	ReadRun@time,fsr2l
 11431  000FDC  C006  FFDA         	movff	ReadRun@time+1,fsr2h
 11432  000FE0  C009  FFDE         	movff	??_ReadRun+2,postinc2
 11433  000FE4  C00A  FFDD         	movff	??_ReadRun+3,postdec2
 11434  000FE8  4A0C               	infsnz	ReadRun@add,f,c
 11435  000FEA  2A0D               	incf	ReadRun@add+1,f,c
 11436                           
 11437                           ;eeprom.c: 71: sorted[0] = ReadEE(add++ *8);
 11438  000FEC  C00C  F007         	movff	ReadRun@add,??_ReadRun
 11439  000FF0  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 11440  000FF4  90D8               	bcf	status,0,c
 11441  000FF6  3607               	rlcf	??_ReadRun,f,c
 11442  000FF8  3608               	rlcf	??_ReadRun+1,f,c
 11443  000FFA  90D8               	bcf	status,0,c
 11444  000FFC  3607               	rlcf	??_ReadRun,f,c
 11445  000FFE  3608               	rlcf	??_ReadRun+1,f,c
 11446  001000  90D8               	bcf	status,0,c
 11447  001002  3607               	rlcf	??_ReadRun,f,c
 11448  001004  3608               	rlcf	??_ReadRun+1,f,c
 11449  001006  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 11450  00100A  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 11451  00100E  EC3E  F011         	call	i2_ReadEE	;wreg free
 11452  001012  C003  FFD9         	movff	ReadRun@sorted,fsr2l
 11453  001016  C004  FFDA         	movff	ReadRun@sorted+1,fsr2h
 11454  00101A  6EDF               	movwf	indf2,c
 11455  00101C  4A0C               	infsnz	ReadRun@add,f,c
 11456  00101E  2A0D               	incf	ReadRun@add+1,f,c
 11457                           
 11458                           ;eeprom.c: 72: sorted[1] = ReadEE(add++ *8);
 11459  001020  EE20 F001          	lfsr	2,1
 11460  001024  5003               	movf	ReadRun@sorted,w,c
 11461  001026  26D9               	addwf	fsr2l,f,c
 11462  001028  5004               	movf	ReadRun@sorted+1,w,c
 11463  00102A  22DA               	addwfc	fsr2h,f,c
 11464  00102C  C00C  F007         	movff	ReadRun@add,??_ReadRun
 11465  001030  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 11466  001034  90D8               	bcf	status,0,c
 11467  001036  3607               	rlcf	??_ReadRun,f,c
 11468  001038  3608               	rlcf	??_ReadRun+1,f,c
 11469  00103A  90D8               	bcf	status,0,c
 11470  00103C  3607               	rlcf	??_ReadRun,f,c
 11471  00103E  3608               	rlcf	??_ReadRun+1,f,c
 11472  001040  90D8               	bcf	status,0,c
 11473  001042  3607               	rlcf	??_ReadRun,f,c
 11474  001044  3608               	rlcf	??_ReadRun+1,f,c
 11475  001046  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 11476  00104A  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 11477  00104E  EC3E  F011         	call	i2_ReadEE	;wreg free
 11478  001052  6EDF               	movwf	indf2,c
 11479  001054  4A0C               	infsnz	ReadRun@add,f,c
 11480  001056  2A0D               	incf	ReadRun@add+1,f,c
 11481                           
 11482                           ;eeprom.c: 73: sorted[2] = ReadEE(add++ *8);
 11483  001058  EE20 F002          	lfsr	2,2
 11484  00105C  5003               	movf	ReadRun@sorted,w,c
 11485  00105E  26D9               	addwf	fsr2l,f,c
 11486  001060  5004               	movf	ReadRun@sorted+1,w,c
 11487  001062  22DA               	addwfc	fsr2h,f,c
 11488  001064  C00C  F007         	movff	ReadRun@add,??_ReadRun
 11489  001068  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 11490  00106C  90D8               	bcf	status,0,c
 11491  00106E  3607               	rlcf	??_ReadRun,f,c
 11492  001070  3608               	rlcf	??_ReadRun+1,f,c
 11493  001072  90D8               	bcf	status,0,c
 11494  001074  3607               	rlcf	??_ReadRun,f,c
 11495  001076  3608               	rlcf	??_ReadRun+1,f,c
 11496  001078  90D8               	bcf	status,0,c
 11497  00107A  3607               	rlcf	??_ReadRun,f,c
 11498  00107C  3608               	rlcf	??_ReadRun+1,f,c
 11499  00107E  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 11500  001082  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 11501  001086  EC3E  F011         	call	i2_ReadEE	;wreg free
 11502  00108A  6EDF               	movwf	indf2,c
 11503  00108C  4A0C               	infsnz	ReadRun@add,f,c
 11504  00108E  2A0D               	incf	ReadRun@add+1,f,c
 11505                           
 11506                           ;eeprom.c: 74: sorted[3] = ReadEE(add++ *8);
 11507  001090  EE20 F003          	lfsr	2,3
 11508  001094  5003               	movf	ReadRun@sorted,w,c
 11509  001096  26D9               	addwf	fsr2l,f,c
 11510  001098  5004               	movf	ReadRun@sorted+1,w,c
 11511  00109A  22DA               	addwfc	fsr2h,f,c
 11512  00109C  C00C  F007         	movff	ReadRun@add,??_ReadRun
 11513  0010A0  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 11514  0010A4  90D8               	bcf	status,0,c
 11515  0010A6  3607               	rlcf	??_ReadRun,f,c
 11516  0010A8  3608               	rlcf	??_ReadRun+1,f,c
 11517  0010AA  90D8               	bcf	status,0,c
 11518  0010AC  3607               	rlcf	??_ReadRun,f,c
 11519  0010AE  3608               	rlcf	??_ReadRun+1,f,c
 11520  0010B0  90D8               	bcf	status,0,c
 11521  0010B2  3607               	rlcf	??_ReadRun,f,c
 11522  0010B4  3608               	rlcf	??_ReadRun+1,f,c
 11523  0010B6  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 11524  0010BA  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 11525  0010BE  EC3E  F011         	call	i2_ReadEE	;wreg free
 11526  0010C2  6EDF               	movwf	indf2,c
 11527  0010C4  4A0C               	infsnz	ReadRun@add,f,c
 11528  0010C6  2A0D               	incf	ReadRun@add+1,f,c
 11529  0010C8  0012               	return		;funcret
 11530  0010CA                     __end_of_ReadRun:
 11531                           	opt stack 0
 11532                           pclatu	equ	0xFFB
 11533                           pclath	equ	0xFFA
 11534                           tblptru	equ	0xFF8
 11535                           tblptrh	equ	0xFF7
 11536                           tblptrl	equ	0xFF6
 11537                           tablat	equ	0xFF5
 11538                           prodh	equ	0xFF4
 11539                           prodl	equ	0xFF3
 11540                           intcon	equ	0xFF2
 11541                           intcon3	equ	0xFF0
 11542                           postinc0	equ	0xFEE
 11543                           fsr0h	equ	0xFEA
 11544                           fsr0l	equ	0xFE9
 11545                           wreg	equ	0xFE8
 11546                           plusw1	equ	0xFE3
 11547                           fsr1h	equ	0xFE2
 11548                           fsr1l	equ	0xFE1
 11549                           indf2	equ	0xFDF
 11550                           postinc2	equ	0xFDE
 11551                           postdec2	equ	0xFDD
 11552                           plusw2	equ	0xFDB
 11553                           fsr2h	equ	0xFDA
 11554                           fsr2l	equ	0xFD9
 11555                           status	equ	0xFD8
 11556                           
 11557 ;; *************** function i2_ReadEE *****************
 11558 ;; Defined at:
 11559 ;;		line 16 in file "eeprom.c"
 11560 ;; Parameters:    Size  Location     Type
 11561 ;;  address         2    0[COMRAM] unsigned int 
 11562 ;; Auto vars:     Size  Location     Type
 11563 ;;		None
 11564 ;; Return value:  Size  Location     Type
 11565 ;;                  1    wreg      unsigned char 
 11566 ;; Registers used:
 11567 ;;		wreg, status,2
 11568 ;; Tracked objects:
 11569 ;;		On entry : 0/0
 11570 ;;		On exit  : 0/0
 11571 ;;		Unchanged: 0/0
 11572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11573 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11574 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11576 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11577 ;;Total ram usage:        2 bytes
 11578 ;; Hardware stack levels used:    1
 11579 ;; This function calls:
 11580 ;;		Nothing
 11581 ;; This function is called by:
 11582 ;;		_ReadRun
 11583 ;; This function uses a non-reentrant model
 11584 ;;
 11585                           
 11586                           	psect	text61
 11587  00227C                     __ptext61:
 11588                           	opt stack 0
 11589  00227C                     i2_ReadEE:
 11590                           	opt stack 23
 11591                           
 11592                           ;eeprom.c: 19: EEADRH = (unsigned char) (address >> 8);
 11593                           
 11594                           ;incstack = 0
 11595  00227C  5002               	movf	i2ReadEE@address+1,w,c
 11596  00227E  6EAA               	movwf	4010,c	;volatile
 11597                           
 11598                           ;eeprom.c: 20: EEADR = (unsigned char) address;
 11599  002280  C001  FFA9         	movff	i2ReadEE@address,4009	;volatile
 11600                           
 11601                           ;eeprom.c: 22: EECON1bits.EEPGD = 0;
 11602  002284  9EA6               	bcf	4006,7,c	;volatile
 11603                           
 11604                           ;eeprom.c: 23: EECON1bits.CFGS = 0;
 11605  002286  9CA6               	bcf	4006,6,c	;volatile
 11606                           
 11607                           ;eeprom.c: 24: EECON1bits.RD = 1;
 11608  002288  80A6               	bsf	4006,0,c	;volatile
 11609  00228A                     i2l411:
 11610  00228A  B0A6               	btfsc	4006,0,c	;volatile
 11611  00228C  D7FE               	goto	i2l411
 11612                           
 11613                           ;eeprom.c: 30: return EEDATA;
 11614  00228E  50A8               	movf	4008,w,c	;volatile
 11615  002290  0012               	return	
 11616  002292                     __end_ofi2_ReadEE:
 11617                           	opt stack 0
 11618                           pclatu	equ	0xFFB
 11619                           pclath	equ	0xFFA
 11620                           tblptru	equ	0xFF8
 11621                           tblptrh	equ	0xFF7
 11622                           tblptrl	equ	0xFF6
 11623                           tablat	equ	0xFF5
 11624                           prodh	equ	0xFF4
 11625                           prodl	equ	0xFF3
 11626                           intcon	equ	0xFF2
 11627                           intcon3	equ	0xFF0
 11628                           postinc0	equ	0xFEE
 11629                           fsr0h	equ	0xFEA
 11630                           fsr0l	equ	0xFE9
 11631                           wreg	equ	0xFE8
 11632                           plusw1	equ	0xFE3
 11633                           fsr1h	equ	0xFE2
 11634                           fsr1l	equ	0xFE1
 11635                           indf2	equ	0xFDF
 11636                           postinc2	equ	0xFDE
 11637                           postdec2	equ	0xFDD
 11638                           plusw2	equ	0xFDB
 11639                           fsr2h	equ	0xFDA
 11640                           fsr2l	equ	0xFD9
 11641                           status	equ	0xFD8
 11642                           
 11643 ;; *************** function _back *****************
 11644 ;; Defined at:
 11645 ;;		line 59 in file "eeprom.c"
 11646 ;; Parameters:    Size  Location     Type
 11647 ;;  runs            1    wreg     unsigned char 
 11648 ;; Auto vars:     Size  Location     Type
 11649 ;;  runs            1    0[COMRAM] unsigned char 
 11650 ;;  result          1    1[COMRAM] unsigned char 
 11651 ;; Return value:  Size  Location     Type
 11652 ;;                  1    wreg      unsigned char 
 11653 ;; Registers used:
 11654 ;;		wreg, status,2, status,0
 11655 ;; Tracked objects:
 11656 ;;		On entry : 0/0
 11657 ;;		On exit  : 0/0
 11658 ;;		Unchanged: 0/0
 11659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11661 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11663 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11664 ;;Total ram usage:        2 bytes
 11665 ;; Hardware stack levels used:    1
 11666 ;; This function calls:
 11667 ;;		Nothing
 11668 ;; This function is called by:
 11669 ;;		_ReadRun
 11670 ;; This function uses a non-reentrant model
 11671 ;;
 11672                           
 11673                           	psect	text62
 11674  002248                     __ptext62:
 11675                           	opt stack 0
 11676  002248                     _back:
 11677                           	opt stack 23
 11678                           
 11679                           ;incstack = 0
 11680                           ;back@runs stored from wreg
 11681  002248  6E01               	movwf	back@runs,c
 11682                           
 11683                           ;eeprom.c: 61: unsigned char result = Latest + 4 - runs;
 11684  00224A  5001               	movf	back@runs,w,c
 11685  00224C  0800               	sublw	0
 11686  00224E  0100               	movlb	0	; () banked
 11687  002250  25CB               	addwf	_Latest& (0+255),w,b
 11688  002252  0F04               	addlw	4
 11689  002254  6E02               	movwf	back@result,c
 11690                           
 11691                           ;eeprom.c: 62: if (result > 4) {
 11692  002256  0E04               	movlw	4
 11693  002258  6402               	cpfsgt	back@result,c
 11694  00225A  D002               	goto	i2l3542
 11695                           
 11696                           ; BSR set to: 0
 11697                           ;eeprom.c: 63: result -= 4;
 11698  00225C  0E04               	movlw	4
 11699  00225E  5E02               	subwf	back@result,f,c
 11700  002260                     i2l3542:
 11701                           
 11702                           ; BSR set to: 0
 11703                           ;eeprom.c: 64: }
 11704                           ;eeprom.c: 65: return result;
 11705  002260  5002               	movf	back@result,w,c
 11706  002262  0012               	return	
 11707  002264                     __end_of_back:
 11708                           	opt stack 0
 11709                           pclatu	equ	0xFFB
 11710                           pclath	equ	0xFFA
 11711                           tblptru	equ	0xFF8
 11712                           tblptrh	equ	0xFF7
 11713                           tblptrl	equ	0xFF6
 11714                           tablat	equ	0xFF5
 11715                           prodh	equ	0xFF4
 11716                           prodl	equ	0xFF3
 11717                           intcon	equ	0xFF2
 11718                           intcon3	equ	0xFF0
 11719                           postinc0	equ	0xFEE
 11720                           fsr0h	equ	0xFEA
 11721                           fsr0l	equ	0xFE9
 11722                           wreg	equ	0xFE8
 11723                           plusw1	equ	0xFE3
 11724                           fsr1h	equ	0xFE2
 11725                           fsr1l	equ	0xFE1
 11726                           indf2	equ	0xFDF
 11727                           postinc2	equ	0xFDE
 11728                           postdec2	equ	0xFDD
 11729                           plusw2	equ	0xFDB
 11730                           fsr2h	equ	0xFDA
 11731                           fsr2l	equ	0xFD9
 11732                           status	equ	0xFD8
 11733                           pclatu	equ	0xFFB
 11734                           pclath	equ	0xFFA
 11735                           tblptru	equ	0xFF8
 11736                           tblptrh	equ	0xFF7
 11737                           tblptrl	equ	0xFF6
 11738                           tablat	equ	0xFF5
 11739                           prodh	equ	0xFF4
 11740                           prodl	equ	0xFF3
 11741                           intcon	equ	0xFF2
 11742                           intcon3	equ	0xFF0
 11743                           postinc0	equ	0xFEE
 11744                           fsr0h	equ	0xFEA
 11745                           fsr0l	equ	0xFE9
 11746                           wreg	equ	0xFE8
 11747                           plusw1	equ	0xFE3
 11748                           fsr1h	equ	0xFE2
 11749                           fsr1l	equ	0xFE1
 11750                           indf2	equ	0xFDF
 11751                           postinc2	equ	0xFDE
 11752                           postdec2	equ	0xFDD
 11753                           plusw2	equ	0xFDB
 11754                           fsr2h	equ	0xFDA
 11755                           fsr2l	equ	0xFD9
 11756                           status	equ	0xFD8
 11757                           
 11758                           	psect	rparam
 11759  0000                     pclatu	equ	0xFFB
 11760                           pclath	equ	0xFFA
 11761                           tblptru	equ	0xFF8
 11762                           tblptrh	equ	0xFF7
 11763                           tblptrl	equ	0xFF6
 11764                           tablat	equ	0xFF5
 11765                           prodh	equ	0xFF4
 11766                           prodl	equ	0xFF3
 11767                           intcon	equ	0xFF2
 11768                           intcon3	equ	0xFF0
 11769                           postinc0	equ	0xFEE
 11770                           fsr0h	equ	0xFEA
 11771                           fsr0l	equ	0xFE9
 11772                           wreg	equ	0xFE8
 11773                           plusw1	equ	0xFE3
 11774                           fsr1h	equ	0xFE2
 11775                           fsr1l	equ	0xFE1
 11776                           indf2	equ	0xFDF
 11777                           postinc2	equ	0xFDE
 11778                           postdec2	equ	0xFDD
 11779                           plusw2	equ	0xFDB
 11780                           fsr2h	equ	0xFDA
 11781                           fsr2l	equ	0xFD9
 11782                           status	equ	0xFD8
 11783                           
 11784                           	psect	temp
 11785  00007D                     btemp:
 11786                           	opt stack 0
 11787  00007D                     	ds	1
 11788  0000                     int$flags	set	btemp
 11789                           pclatu	equ	0xFFB
 11790                           pclath	equ	0xFFA
 11791                           tblptru	equ	0xFF8
 11792                           tblptrh	equ	0xFF7
 11793                           tblptrl	equ	0xFF6
 11794                           tablat	equ	0xFF5
 11795                           prodh	equ	0xFF4
 11796                           prodl	equ	0xFF3
 11797                           intcon	equ	0xFF2
 11798                           intcon3	equ	0xFF0
 11799                           postinc0	equ	0xFEE
 11800                           fsr0h	equ	0xFEA
 11801                           fsr0l	equ	0xFE9
 11802                           wreg	equ	0xFE8
 11803                           plusw1	equ	0xFE3
 11804                           fsr1h	equ	0xFE2
 11805                           fsr1l	equ	0xFE1
 11806                           indf2	equ	0xFDF
 11807                           postinc2	equ	0xFDE
 11808                           postdec2	equ	0xFDD
 11809                           plusw2	equ	0xFDB
 11810                           fsr2h	equ	0xFDA
 11811                           fsr2l	equ	0xFD9
 11812                           status	equ	0xFD8


Data Sizes:
    Strings     896
    Constant    18
    Data        0
    BSS         42
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    111     124
    BANK0           128     47      76
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_51(CODE[12]), STR_50(CODE[11]), STR_49(CODE[16]), STR_48(CODE[23]), 
		 -> STR_47(CODE[21]), STR_46(CODE[14]), STR_45(CODE[15]), STR_44(CODE[22]), 
		 -> STR_43(CODE[20]), STR_42(CODE[13]), STR_41(CODE[16]), STR_40(CODE[23]), 
		 -> STR_39(CODE[21]), STR_38(CODE[14]), STR_37(CODE[16]), STR_36(CODE[18]), 
		 -> STR_35(CODE[20]), STR_34(CODE[16]), STR_33(CODE[12]), STR_32(CODE[16]), 
		 -> STR_31(CODE[21]), STR_30(CODE[16]), STR_29(CODE[21]), STR_28(CODE[16]), 
		 -> STR_27(CODE[20]), STR_26(CODE[16]), STR_25(CODE[21]), STR_24(CODE[23]), 
		 -> STR_23(CODE[24]), STR_22(CODE[21]), STR_21(CODE[24]), STR_20(CODE[24]), 
		 -> STR_19(CODE[25]), STR_18(CODE[19]), STR_17(CODE[24]), STR_16(CODE[24]), 
		 -> STR_15(CODE[27]), STR_14(CODE[11]), STR_13(CODE[19]), STR_12(CODE[20]), 
		 -> STR_11(CODE[21]), STR_10(CODE[21]), STR_9(CODE[20]), STR_8(CODE[21]), 
		 -> STR_7(CODE[21]), STR_6(CODE[20]), STR_5(CODE[22]), STR_4(CODE[22]), 
		 -> STR_3(CODE[21]), STR_2(CODE[24]), STR_1(CODE[21]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    WriteRun@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(COMRAM[4]), 

    ReadRun@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> PermLog@sorted(COMRAM[4]), 

    ReadRun@time	PTR unsigned int  size(2) Largest target is 2
		 -> PermLog@time(COMRAM[2]), 

    check9@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(COMRAM[4]), mainloop@sorted(COMRAM[4]), 

    checkC@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(COMRAM[4]), mainloop@sorted(COMRAM[4]), 

    checkAA@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(COMRAM[4]), mainloop@sorted(COMRAM[4]), 

    stopMoving$546	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_36(CODE[18]), STR_35(CODE[20]), 

    CCW90@port	PTR int  size(2) Largest target is 6
		 -> simulate@portCCW(COMRAM[6]), 

    CW90@port	PTR int  size(2) Largest target is 6
		 -> simulate@portCW(COMRAM[6]), 

    PWMC@port	PTR int  size(2) Largest target is 6
		 -> simulate@portCCW(COMRAM[6]), simulate@portCW(COMRAM[6]), 

    getTime@time	PTR unsigned char  size(2) Largest target is 7
		 -> time(COMRAM[7]), 

    showInfo@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> PermLog@sorted(COMRAM[4]), simulate@sorted(COMRAM[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _keypressed in COMRAM

    _keypressed->_simulate
    _simulate->_check9
    _simulate->_checkAA
    _simulate->_checkC
    i2_getTime->i2_I2C_Master_Read
    i2_getTime->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    _stopMoving->i2_printf
    _checkC->_checkV
    _checkAA->_checkV
    _check9->_checkV
    _checkV->___ftge
    ___ftmul->___ftpack
    ___ftge->___ftdiv
    ___ftdiv->___ftmul
    ___awtoft->___ftpack
    _WriteRun->i2___wmul
    _CW90->i2_printf
    _CCW90->i2_printf
    _PWMC->___awdiv
    _PermLog->_showInfo
    _showInfo->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2___lcd_newline->i2_lcdInst
    i2_lcdInst->i2_lcdNibble
    _ReadRun->_back
    _ReadRun->i2_ReadEE

Critical Paths under _main in BANK0

    _main->_showRTC
    _showRTC->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _getTime->_I2C_Master_Read
    _getTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    ___lcd_newline->_lcdInst
    _initialize->_I2C_Master_Init
    _initLatest->_ReadEE
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     2      5   10711
                                             40 BANK0      7     2      5
                         _initialize
                             _printf
                            _showRTC
 ---------------------------------------------------------------------------------
 (1) _showRTC                                              2     2      0    5255
                                             38 BANK0      2     2      0
                      ___lcd_newline
                            _getTime
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              30    22      8    4512
                                             12 BANK0     26    18      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     441
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _getTime                                              3     1      2     473
                                              3 BANK0      3     1      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2     214
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lcd_newline                                        0     0      0     135
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _initialize                                           2     2      0     944
                                             21 BANK0      2     2      0
                    _I2C_Master_Init
                            _initLCD
                         _initLatest
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _initLatest                                           0     0      0     298
                             _ReadEE
 ---------------------------------------------------------------------------------
 (3) _ReadEE                                               2     0      2     298
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _keypressed                                          17    17      0   83181
                                             94 COMRAM    17    17      0
                            _PermLog
                           _simulate
                         _stopMoving
 ---------------------------------------------------------------------------------
 (6) _simulate                                            38    38      0   71015
                                             56 COMRAM    38    38      0
                              _CCW90
                               _CW90
                           _WriteRun
                             _check9
                            _checkAA
                             _checkC
                           _showInfo
                         _stopMoving
                    i2___lcd_newline
                           i2___wmul
                          i2_getTime
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) i2_getTime                                            3     1      2     283
                                              3 COMRAM     3     1      2
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Write                                   2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (9) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _stopMoving                                           5     5      0    3595
                                             36 COMRAM     5     5      0
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _checkC                                               2     0      2   15387
                                             54 COMRAM     2     0      2
                                 _AD
                             _checkV
                    i2___lcd_newline
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _checkAA                                              2     0      2   15387
                                             54 COMRAM     2     0      2
                                 _AD
                             _checkV
                    i2___lcd_newline
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _check9                                               2     0      2   15387
                                             54 COMRAM     2     0      2
                                 _AD
                             _checkV
                    i2___lcd_newline
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) _checkV                                               7     2      5   11577
                                             47 COMRAM     7     2      5
                                 _AD (ARG)
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                    i2___lcd_newline
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             15     9      6    2587
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftge                                               9     3      6     264
                                             38 COMRAM     9     3      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             15     9      6    2541
                                             23 COMRAM    15     9      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             4     1      3    2186
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2031
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (8) _AD                                                   5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (7) _WriteRun                                             8     4      4    1569
                                              6 COMRAM     8     4      4
                            _WriteEE
                           i2___wmul
 ---------------------------------------------------------------------------------
 (8) _WriteEE                                              3     0      3     834
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (7) _CW90                                                 2     0      2    5238
                                             36 COMRAM     2     0      2
                               _PWMC
                    i2___lcd_newline
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _CCW90                                                2     0      2    5238
                                             36 COMRAM     2     0      2
                               _PWMC
                    i2___lcd_newline
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) _PWMC                                                40    34      6    1671
                                              8 COMRAM    13     7      6
                            ___awdiv
 ---------------------------------------------------------------------------------
 (9) ___awdiv                                              8     4      4     428
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (6) _PermLog                                              9     9      0    8526
                                             49 COMRAM     9     9      0
                            _ReadRun
                           _showInfo
                    i2___lcd_newline
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) _showInfo                                            13     9      4    4141
                                             36 COMRAM    13     9      4
                      _captureKeypad
                    i2___lcd_newline
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) i2_printf                                            28    22      6    3346
                                             12 COMRAM    24    18      6
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (8) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (8) i2___wmul                                             6     2      4     313
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (8) i2___lwdiv                                            7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (7) i2___lcd_newline                                      0     0      0     135
                          i2_lcdInst
 ---------------------------------------------------------------------------------
 (7) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (9) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _captureKeypad                                        3     1      2      23
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (7) _ReadRun                                             11     7      4     618
                                              2 COMRAM    11     7      4
                               _back
                           i2_ReadEE
 ---------------------------------------------------------------------------------
 (8) i2_ReadEE                                             2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (8) _back                                                 2     2      0      68
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialize
     _I2C_Master_Init
       ___lldiv
     _initLCD
       _lcdInst
         _lcdNibble
     _initLatest
       _ReadEE
     _lcdInst
       _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
   _showRTC
     ___lcd_newline
       _lcdInst
         _lcdNibble
     _getTime
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble

 _keypressed (ROOT)
   _PermLog
     _ReadRun
       _back
       i2_ReadEE
     _showInfo
       _captureKeypad
       i2___lcd_newline
         i2_lcdInst
           i2_lcdNibble
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2___lcd_newline
       i2_lcdInst
         i2_lcdNibble
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _simulate
     _CCW90
       _PWMC
         ___awdiv
       i2___lcd_newline
         i2_lcdInst
           i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _CW90
       _PWMC
         ___awdiv
       i2___lcd_newline
         i2_lcdInst
           i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _WriteRun
       _WriteEE
       i2___wmul
     _check9
       _AD
       _checkV
         _AD (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftmul (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
         i2___lcd_newline (ARG)
           i2_lcdInst
             i2_lcdNibble
         i2_printf (ARG)
           i2___lwdiv
           i2___lwmod
             i2___lwdiv (ARG)
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2___lcd_newline
         i2_lcdInst
           i2_lcdNibble
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _checkAA
       _AD
       _checkV
         _AD (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftmul (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
         i2___lcd_newline (ARG)
           i2_lcdInst
             i2_lcdNibble
         i2_printf (ARG)
           i2___lwdiv
           i2___lwmod
             i2___lwdiv (ARG)
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2___lcd_newline
         i2_lcdInst
           i2_lcdNibble
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _checkC
       _AD
       _checkV
         _AD (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___ftmul (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftge (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___ftmul (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___ftpack
         ___ftmul (ARG)
           ___ftpack
         i2___lcd_newline (ARG)
           i2_lcdInst
             i2_lcdNibble
         i2_printf (ARG)
           i2___lwdiv
           i2___lwmod
             i2___lwdiv (ARG)
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2___lcd_newline
         i2_lcdInst
           i2_lcdNibble
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _showInfo
       _captureKeypad
       i2___lcd_newline
         i2_lcdInst
           i2_lcdNibble
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _stopMoving
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2___lcd_newline
       i2_lcdInst
         i2_lcdNibble
     i2___wmul
     i2_getTime
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _stopMoving
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     2F      4C       5       59.4%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     6F      7C       1       98.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C8      34        0.0%
DATA                 0      0      C8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Feb 27 16:21:34 2017

         i2_I2C_Master_Start 2324           i2_I2C_Master_Write 22FA                           _AD 1FF4  
               ___awdiv@sign 0006          ___wmul@multiplicand 0082           i2___lwdiv@dividend 0001  
                __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                  __CFG_OSC$HS 000000  
                        ?_AD 0001                          l411 2274                          l363 2292  
                        l925 1C08                          l935 1DC0                          l872 183A  
               __CFG_CPB$OFF 000000                          _PEN 007E2A                 __CFG_CPD$OFF 000000  
                        _SEN 007E28          ?i2_I2C_Master_Start 0001          ?i2_I2C_Master_Write 0002  
                        wreg 000FE8                ___lcd_newline 2314                         ??_AD 0003  
               __CFG_LVP$OFF 000000                 ___ftdiv@cntr 0021                 ___ftdiv@sign 0026  
               __CFG_WDT$OFF 000000                         l4024 19C8                         l4034 19F6  
                       l3412 20C4                         l4028 19D2                         l3604 1BFA  
                       l3620 1DB2                         l3612 1D7C                         l3700 0034  
                       l3614 1D88                         l3702 0046                         l3616 1D8E  
                       l3720 00F8                         l3712 0080                         l4416 1FAA  
                       l3570 17BE                         l3554 2148                         l3802 02E0  
                       l3730 0136                         l3722 00FE                         l3706 0050  
                       l3572 17CE                         l3820 0358                         l3732 014E  
                       l3582 1828                         l3574 17D4                         l3822 0364  
                       l3830 0392                         l3814 033C                         l3806 0318  
                       l3742 0192                         l3726 0124                         l3592 1BB8  
                       l3832 0398                         l3840 0432                         l3808 0322  
                       l3760 0212                         l3736 0162                         l3728 0130  
                       l3594 1BC4                         l3834 03E4                         l3842 044A  
                       l3826 037E                         l3738 017A                         l3746 019A  
                       l3596 1BCA                         l3844 0452                         l3780 0270  
                       l3764 022E                         l3748 01D2                         l3766 0234  
                       l3846 045E                         l3696 0020                         l3778 026A  
                       l3794 02A6                         l3796 02BE                         _ADFM 007E07  
                       _ADON 007E10                         _CW90 20CC                         STR_1 FE1E  
                       STR_2 FCFB                         STR_3 FE5D                         STR_4 FDB4  
                       STR_5 FD9E                         STR_6 FED8                         STR_7 FE87  
                       STR_8 FE48                         STR_9 FEC4                         u2300 20C2  
                       _LATA 000F89                         _LATB 000F8A                         _LATC 000F8B  
                       _LATD 000F8C                         _LATE 000F8D                         u3217 1F92  
                       u3227 1A8C                         u3237 1C7C                         u3247 1F32  
                       u3257 1F66                         u3267 1D20                         u3277 1D2A  
                       u3287 1D56                         u3297 1D60                         u2675 1DFA  
                       _RCEN 007E2B                         _PWMC 11BE                checkAA@sorted 0037  
                       _back 2248                         _main 1F70                 ___ftpack@arg 0001  
                       _mode 0074                 ___ftpack@exp 0004                         _time 0076  
                       fsr0h 000FEA                         fsr1h 000FE2           i2___lwdiv@quotient 0005  
                       fsr2h 000FDA                         fsr0l 000FE9                         indf2 000FDF  
                       fsr1l 000FE1                         fsr2l 000FD9                         btemp 007D  
       ??i2_I2C_Master_Start 0002     __size_ofi2___lcd_newline 0008         ??i2_I2C_Master_Write 0004  
                       prodh 000FF4                         prodl 000FF3              ReadRun@backruns 000B  
                       start 000E                __CFG_IESO$OFF 000000                 simulate@stop 0049  
                 ReadRun@add 000C              __end_ofi2_putch 22E4                __CFG_MCLRE$ON 000000  
               ___ftmul@cntr 0016                 ___param_bank 000000                 ___ftmul@sign 0017  
                 i2getTime@i 0006                  i2_lcdNibble 1E82              __end_of_ReadRun 10CA  
            __end_of_PermLog 1B9A                        ?_CW90 0025             ?_I2C_Master_Init 008D  
           ?_I2C_Master_Read 0001                        ?_PWMC 0009             ?_I2C_Master_Wait 0001  
           ?_I2C_Master_Stop 0001                        ?_back 0001                        ?_main 00A8  
                      _ACKEN 007E2C                        _ACKDT 007E2D                        _CCW90 20FA  
            __end_of___awdiv 1B1E                        _EEADR 000FA9                        STR_10 FE72  
                      STR_11 FE33                        STR_12 FEEC                        STR_20 FCE3  
                      STR_13 FF13                        STR_21 FCB3                        STR_30 FF89  
                      STR_14 FFF4                        STR_22 FE09                        STR_31 FDCA  
                      STR_23 FCCB                        STR_15 FC7F                        STR_32 FF89  
                      STR_24 FD71                        STR_40 FD43                        STR_16 FD13  
                      STR_33 FFDD                        STR_41 FF49                        STR_25 FDDF  
                      STR_17 FD2B                        STR_50 FFE9                        STR_42 FFC4  
                      STR_26 FF89                        STR_34 FF79                        STR_18 FF00  
                      STR_43 FD8A                        STR_51 FFD1                        STR_27 FEB0  
                      STR_35 FE9C                        STR_19 FC9A                        STR_28 FF89  
                      STR_52 FF38                        STR_36 FF26                        STR_44 FD88  
                      STR_45 FF99                        STR_37 FF69                        STR_29 FDF4  
                      STR_46 FFB6                        STR_38 FFA8                        STR_39 FD45  
                      STR_47 FD5C                        STR_48 FD5A                        STR_49 FF59  
            __end_of___ftdiv 1482              __end_of_WriteEE 21C4              __end_of___lldiv 184C  
            __end_of___ftmul 11BE              ___awdiv@divisor 0003                        _LATC0 007C58  
                      _LATC1 007C59                        _LATC2 007C5A                        _LATC5 007C5D  
            __end_of___lwdiv 1C12              __end_of___lwmod 1DCA                        i2l202 222C  
                      i2l123 06AC                        i2l205 2238                        i2l221 0DE2  
                      i2l141 135E                        i2l142 12FA                        i2l305 1542  
                      i2l250 11F6                        i2l411 228A                        i2l270 1E80  
                      i2l417 21BA                        i2l363 22A6                        i2l800 1450  
                      i2l742 18DA                        i2l925 1F20                        i2l935 1FEA  
            ___awdiv@counter 0005              __end_of_checkAA 1790                        _PORTB 000F81  
                      _TRISA 000F92                        _TRISB 000F93                        _TRISC 000F94  
                      _TRISD 000F95                        _TRISE 000F96                __CFG_PWRT$OFF 000000  
             ?___lcd_newline 0001                __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000  
              simulate@F3111 00BF                simulate@F3121 00B5                simulate@F3123 00AF  
              simulate@F3107 0070                simulate@F3109 00C3                __CFG_WRT2$OFF 000000  
              __CFG_WRT3$OFF 000000              __end_of_lcdInst 22D8               __CFG_EBTR0$OFF 000000  
             __CFG_FCMEN$OFF 000000              __end_of_getTime 1A14               __CFG_EBTR1$OFF 000000  
             __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000  
              __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000              __end_of_initLCD 1F70  
             __CFG_EBTRB$OFF 000000                   i2isdigit@c 0003                ___awtoft@sign 000C  
            __end_of_dpowers FC77             __end_ofi2_ReadEE 2292              __end_of_isdigit 2152  
              ___ftpack@sign 0005                        _putch 22B8                        pclath 000FFA  
            __end_of_showRTC 1A9A                        tablat 000FF5             __end_ofi2___wmul 21EA  
                      plusw1 000FE3                        plusw2 000FDB                        status 000FD8  
              simulate@start 0055               __CFG_PBADEN$ON 000000                i2printf@width 0022  
           __end_ofi2_printf 0C14           __size_ofi2___lwdiv 0052                 __end_of_CW90 20FA  
         __size_ofi2___lwmod 0042                  ReadRun@time 0005                 __end_of_PWMC 12B0  
            __initialization 2152                 __end_of_back 2264           __size_ofi2_lcdInst 000C  
               __end_of_main 1FB2           __size_ofi2_getTime 0076                   i2printf@ap 001A  
                 i2printf@cp 0017                ReadEE@address 0080                       ??_CW90 0027  
         __size_ofi2_isdigit 001E                       ??_PWMC 000F                       ??_back 0001  
                     ??_main 00AD                       ?_CCW90 0025                __activetblptr 000002  
          ?_I2C_Master_Start 0001            ?_I2C_Master_Write 0081                    CCW90@port 0025  
         ??_I2C_Master_Start 0081                       _ADCON0 000FC2                       _ADCON1 000FC1  
         ??_I2C_Master_Write 0083                       _ADRESH 000FC4                       _EEADRH 000FAA  
                     _ADRESL 000FC3                       _EEDATA 000FA8                       _EECON2 000FA7  
           ___awdiv@dividend 0001              i2lcdNibble@data 0002             __end_of___awtoft 2068  
                     ?_putch 0001             __end_of___ftpack 18FA              i2lcdNibble@temp 0001  
                     _INT1IE 007F83                       _INT1IF 007F80             __end_of_WriteRun 0F98  
                     _CVRCON 000FB5                       i2l3000 1EF6                       i2l3010 1F16  
                     i2l3002 1EFA                       i2l3020 1FC8                       i2l3022 1FCC  
                     i2l3110 111A                       i2l3104 10F2                       i2l4000 1E66  
                     i2l3026 1FE0                       i2l3018 1FC0                       i2l3210 195A  
                     i2l3124 114C                       i2l4004 1E7A                       i2l3310 0A60  
                     i2l3206 192A                       i2l3134 1174                       i2l3312 0A64  
                     i2l3232 0894                       i2l3160 1ABE                       i2l3064 13EC  
                     i2l3216 1986                       i2l3128 115C                       i2l3234 08A2  
                     i2l4050 0C46                       i2l3170 1AE0                       i2l3154 1AAE  
                     i2l4106 0E58                       i2l3058 13C4                       i2l3138 1184  
                     i2l3340 0AEC                       i2l3260 0958                       i2l3252 0934  
                     i2l3244 08D6                       i2l3228 0884                       i2l4052 0C54  
                     i2l3084 142A                       i2l3334 0AC0                       i2l3326 0A90  
                     i2l3270 0994                       i2l3262 095E                       i2l3254 0938  
                     i2l3238 08A8                       i2l4070 0D34                       i2l3166 1AD4  
                     i2l3182 1B06                       i2l3502 14D4                       i2l3352 0B18  
                     i2l3328 0AA6                       i2l3264 0970                       i2l3280 09E0  
                     i2l4064 0CFE                       i2l3168 1ADC                       i2l3424 11E8  
                     i2l4216 0502                       i2l4320 0808                       i2l3354 0B20  
                     i2l3362 0B46                       i2l3346 0B02                       i2l3338 0AE4  
                     i2l3274 09A6                       i2l3258 094E                       i2l4082 0DA8  
                     i2l4058 0C80                       i2l4090 0DEE                       i2l3186 1B14  
                     i2l3178 1AFC                       i2l4162 1CC8                       i2l4242 05D4  
                     i2l3364 0B4C                       i2l3372 0BD6                       i2l3292 0A16  
                     i2l3268 0982                       i2l4076 0D6E                       i2l4092 0E2C  
                     i2l3452 1280                       i2l3444 1250                       i2l3436 1220  
                     i2l4260 063A                       i2l4244 05E0                       i2l4236 05B6  
                     i2l3542 2260                       i2l3366 0B90                       i2l3374 0BEC  
                     i2l3358 0B34                       i2l3278 09AC                       i2l3462 12A8  
                     i2l3454 128A                       i2l3198 2044                       i2l4158 1CC0  
                     i2l4262 0646                       i2l4254 061C                       i2l3376 0BF2  
                     i2l3296 0A30                       i2l4088 0DE4                       i2l3472 2004  
                     i2l4168 1CE4                       i2l4272 0682                       i2l4440 1330  
                     i2l4432 131E                       i2l4424 1300                       i2l3298 0A34  
                     i2l3378 0BFA                       i2l3458 1298                       i2l3474 2014  
                     i2l3490 14A6                       i2l2940 1874                       i2l4620 1786  
                     i2l3644 2198                       i2l2950 18D0                       i2l2942 1892  
                     i2l2934 185C                       i2l3494 14BA                       i2l3486 149E  
                     i2l4622 16B6                       i2l4614 15F2                       i2l4294 0718  
                     i2l4278 06A0                       i2l4446 1340                       i2l3496 14CA  
                     i2l4624 16C6                       i2l4616 1602                       i2l3920 15BA  
                     i2l2946 18A8                       i2l2938 186A                       i2l4618 1776  
                     i2l3914 15A8                       i2l3906 1584                       i2l2948 18C6  
                     i2l3950 1648                       i2l3942 1624                       i2l3870 172C  
                     i2l3862 1708                       i2l3854 16E8                       i2l3926 15C4  
                     i2l3970 1688                       i2l3882 1748                       i2l2988 2222  
                     i2l3964 167E                       i2l3876 173E                       i2l2998 1EEE  
                     i2l3958 166C                       i2l3990 1E46                       i2l3898 1560  
                     i2l3996 1E5E                       u181_41 13D4                       u184_41 10DA  
                     u186_41 1102                       u179_41 13AC                    ??i2_putch 0003  
                     _SSPADD 000FC8                       _TRISC3 007CA3                       _TRISC4 007CA4  
                     _SSPBUF 000FC9                    AD@channel 0005                checkV@voltage 0030  
                  ??_ReadRun 0007                       _ReadEE 2264                    ??_PermLog 0032  
                     _Latest 00CB               __CFG_XINST$OFF 000000        __end_of_captureKeypad 2248  
                     ___ftge 18FA                       ___wmul 2068                       _check9 160C  
                     _checkC 1548                    ??___awdiv 0005                       _checkV 1482  
             __CFG_STVREN$ON 000000                    ??___ftdiv 001E                    ??_WriteEE 0004  
                  ??___lldiv 0088            ??i2___lcd_newline 0004                    ??___ftmul 000F  
                  ??___lwdiv 0084                    ??___lwmod 008B                    ??_checkAA 0039  
                     clear_0 2158                       clear_1 2164             ___awdiv@quotient 0007  
                  ??_lcdInst 0082                       _printf 0012                    ??_getTime 0085  
            ??___lcd_newline 0083        ___ftmul@f3_as_product 0013                  PermLog@time 0039  
                  ??_initLCD 0083                    ??_isdigit 0080             __end_of_showInfo 0E36  
          __end_ofi2___lwdiv 1F2A                 __mediumconst FC6C            __end_ofi2___lwmod 1FF4  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
           __end_of_simulate 087A                    ??_showRTC 00A6            __end_ofi2_lcdInst 22F0  
          __end_ofi2_getTime 1D00               simulate@period 005D               simulate@portCW 003D  
          __end_ofi2_isdigit 222A               simulate@sorted 0059                   __accesstop 0080  
    __end_of__initialization 216A                   ___ftge@ff1 0027                   ___ftge@ff2 002A  
              __end_of_CCW90 2128                ___rparam_used 000001                   ___ftdiv@f1 0018  
                 ___ftdiv@f2 001B                   ___ftdiv@f3 0022                   ___awtoft@c 0009  
                 ___ftmul@f1 0009                   ___ftmul@f2 000C           i2___lwmod@dividend 0008  
             __pcstackCOMRAM 0001                    ?i2_ReadEE 0001                __end_of_putch 22C8  
                i2printf@idx 0019                  i2printf@len 001C                  i2printf@val 001F  
                 __end_of_AD 2030                      ??_CCW90 0027                    ?i2___wmul 0001  
         __size_of_lcdNibble 0068                  i2putch@data 0003                    ?i2_printf 000D  
                    ??_putch 0082                   back@result 0002                   __pbssBANK0 00AF  
                    ?_ReadEE 0080                 stopMoving@em 0028                      ?___ftge 0027  
               WriteRun@time 0009                 ?i2_lcdNibble 0001                      ?___wmul 0080  
                    ?_check9 0037                      ?_checkC 0037                      ?_checkV 0030  
                 ??i2_ReadEE 0003                    ?___awtoft 0009                    ?___ftpack 0001  
                    ?_printf 008C                    ?_WriteRun 0007                   ??i2___wmul 0005  
             WriteRun@sorted 0007                   ??i2_printf 0013                      _SSPCON1 000FC6  
                    _SSPCON2 000FC5                      _SSPSTAT 000FC7                      i2_putch 22D8  
             _stopMoving$546 0026  __size_ofi2_I2C_Master_Start 0008            __end_of_lcdNibble 1D68  
                    _ReadRun 0F98  __size_ofi2_I2C_Master_Write 000A                      _PermLog 1B1E  
                    __Hparam 0000              __size_of_ReadEE 0018                      __Lparam 0000  
                 _initLatest 21EA                    ?_showInfo 0025              __size_of___ftge 0090  
                  ?_simulate 0001                      ___awdiv 1A9A                      ___ftdiv 139C  
                    _WriteEE 219E                      ___lldiv 1790              __size_of___wmul 0036  
                    ___ftmul 10CA              __size_of_check9 00C4              __size_of_checkC 00C4  
            __size_of_checkV 00C6                      ___lwdiv 1B9A                      ___lwmod 1D68  
                    _checkAA 16D0                      __pcinit 2152                   ??___awtoft 000C  
                 ??___ftpack 0006                      __ramtop 1000                   _initialize 1C12  
                    _lcdInst 22C8                   ??_WriteRun 000B                      __ptext0 1F70  
                    __ptext1 1A14                      __ptext2 0012                      __ptext3 22B8  
                    _getTime 198A                      __ptext4 2128                      __ptext5 2068  
                    __ptext6 1D68                      __ptext7 1B9A                      __ptext8 198A  
                    __ptext9 22F0                 PermLog@F3081 00BB              __size_of_printf 046A  
                    _initLCD 1F2A            __end_of_hexpowers FC7F                      checkV@i 0036  
                    _dpowers FC6D                      _isdigit 2128                   _keypressed 0008  
   __size_of_I2C_Master_Init 0060     __size_of_I2C_Master_Read 002E                      _showRTC 1A14  
   __size_of_I2C_Master_Wait 0014     __size_of_I2C_Master_Stop 0008               __pintcode_body 12B0  
       end_of_initialization 216A              i2___lcd_newline 232C                __Lmediumconst FC6C  
                    int_func 12B0          i2___wmul@multiplier 0001    __size_of_I2C_Master_Start 0008  
  __size_of_I2C_Master_Write 000A              ___lldiv@divisor 0084              ___lldiv@counter 008C  
                  _PWMC$1390 0012                    _PWMC$1391 0013                    _PWMC$1389 0011  
                 ??_showInfo 0029                      printf@c 00A5                      printf@f 008C  
           I2C_Master_Init@c 008D             I2C_Master_Read@a 0081                      postdec2 000FDD  
                 ??_simulate 0039                      postinc0 000FEE                      postinc2 000FDE  
                  _PORTBbits 000F81                  PWMC@widthus 0009              simulate@portCCW 0043  
          i2_I2C_Master_Read 2178            i2_I2C_Master_Wait 22A6            i2_I2C_Master_Stop 231C  
          i2___lwdiv@divisor 0003                    i2___lwdiv 1ED8                    i2___lwmod 1FB2  
          i2___lwdiv@counter 0007           ?i2_I2C_Master_Read 0001           ?i2_I2C_Master_Wait 0001  
         ?i2_I2C_Master_Stop 0001                    i2_lcdInst 22E4                    i2_getTime 1C8A  
                ___ftdiv@exp 0025                  printf@width 00A3              PermLog@backruns 0038  
                 _stopMoving 1E2A          ??i2_I2C_Master_Read 0002                    i2_isdigit 220C  
        ??i2_I2C_Master_Wait 0001          ??i2_I2C_Master_Stop 0002                ReadRun@sorted 0003  
                simulate@now 0051                 check9@sorted 0037                  ___ftmul@exp 0012  
             __end_of_ReadEE 227C                  ?_initLatest 0001               __end_of___ftge 198A  
             __end_of___wmul 209E               __end_of_check9 16D0               __end_of_checkC 160C  
             __end_of_checkV 1548         __size_ofi2_lcdNibble 0056                mainloop@F3100 00C7  
                ?_initialize 0001                i2lcdInst@data 0003                 checkC@sorted 0037  
          __size_ofi2_ReadEE 0016             i2___wmul@product 0005               __end_of_printf 047C  
               i2printf@flag 0021              i2ReadEE@address 0001    __end_ofi2_I2C_Master_Read 219E  
  __end_ofi2_I2C_Master_Wait 22B8        __end_of___lcd_newline 231C                 i2printf@prec 001E  
        start_initialization 2152    __end_ofi2_I2C_Master_Stop 2324                  ?_keypressed 0001  
          __size_ofi2___wmul 0026      __end_ofi2___lcd_newline 2334                    i2printf@c 0024  
                  i2printf@f 000D       __size_of_captureKeypad 001E        i2I2C_Master_Read@temp 0003  
              i2getTime@time 0004                   ?i2___lwdiv 0001                   ?i2___lwmod 0008  
          __size_ofi2_printf 039A            ??_I2C_Master_Init 0091            ??_I2C_Master_Read 0081  
          ??_I2C_Master_Wait 0080                   ?i2_lcdInst 0001            ??_I2C_Master_Stop 0081  
                 ?i2_getTime 0004                   ?i2_isdigit 0001                     ??_ReadEE 0082  
                   CW90@port 0025                     ??___ftge 002D                     ??___wmul 0084  
                   ??_check9 0039                     ??_checkC 0039                     ??_checkV 0035  
           __CFG_LPT1OSC$OFF 000000                     ??_printf 0094                  WriteEE@data 0003  
          __size_of___awtoft 0038            __size_of___ftpack 00AE            __size_of_WriteRun 0162  
                __pbssCOMRAM 0070                __pcstackBANK0 0080            i2___lwmod@divisor 000A  
          i2___lwmod@counter 000C                 _isdigit$1048 0081          __size_of_initLatest 0022  
                   ?i2_putch 0001          __size_of_initialize 0078                  ?_stopMoving 0001  
           _I2C_Master_Start 230C                     ?_ReadRun 0003          i2I2C_Master_Write@d 0002  
           _I2C_Master_Write 22F0                     ?_PermLog 0001             ___lwdiv@dividend 0080  
          __CFG_CCP2MX$PORTC 000000                  WriteRun@add 000D                  stopMoving@i 0029  
              _captureKeypad 222A          __size_of_keypressed 1394                    __pintcode 0008  
              __pmediumconst FC6C                    _lcdNibble 1D00                     ?___awdiv 0001  
                   ?___ftdiv 0018                     ?_WriteEE 0001                     ?___lldiv 0080  
                   ?___ftmul 0009                     ?___lwdiv 0080                     ?___lwmod 0087  
          __size_of_showInfo 0222                     ?_checkAA 0037            __size_of_simulate 03FE  
                   ?_lcdInst 0001                     ?_getTime 0083                     PWMC@port 000D  
             __size_of_CCW90 002E                     ?_initLCD 0001                     ?_isdigit 0001  
 __size_ofi2_I2C_Master_Read 0026   __size_ofi2_I2C_Master_Wait 0012   __size_ofi2_I2C_Master_Stop 0008  
                  checkV@max 0032                     ?_showRTC 0001                    _hexpowers FC77  
           ?i2___lcd_newline 0001             ___lwdiv@quotient 0084                  ??i2___lwdiv 0005  
                ??i2___lwmod 000C               __size_of_putch 0010                  __size_of_AD 003C  
 __end_ofi2_I2C_Master_Start 232C   __end_ofi2_I2C_Master_Write 2304                  ??i2_lcdInst 0003  
                ??i2_getTime 0006               ___wmul@product 0084                     _LATDbits 000F8C  
                ??i2_isdigit 0001                     i2u302_40 0E4C                     i2u313_40 0710  
                   i2u305_41 057E                     i2u241_45 1288                     i2u241_46 128A  
                   i2u314_40 0800                     i2u306_41 0590                     i2u330_47 04DC  
                   i2u235_45 1228                     i2u235_46 122A                     i2u331_47 0520  
                   i2u340_47 200A                     i2u332_47 054C                     i2u341_47 129A  
                   i2u333_47 05F0                     i2u238_45 1258                     i2u238_46 125A  
                   i2u342_47 1B78                     i2u334_47 0656                     i2u343_47 1E9A  
                   i2u335_47 06C2                     i2u264_40 2196                     i2u344_47 1EA4  
                   i2u336_47 077C                     i2u345_47 1EC6                     i2u337_47 083A  
                   i2u346_47 1ED0                     i2u338_47 1E6C               ?_captureKeypad 0001  
                   _PIR2bits 000FA1                     i2u339_47 14AC             __CFG_WDTPS$32768 000000  
                 PWMC@cycles 000B                   ?_lcdNibble 0001                     i2_ReadEE 227C  
                 _ADCON0bits 000FC2            ___wmul@multiplier 0080                     i2___wmul 21C4  
              lcdNibble@data 0081                   printf@flag 00A2                lcdNibble@temp 0080  
                 printf@prec 009F                   simulate@AA 004B          __size_of_stopMoving 0058  
                 simulate@V9 004F                     i2_printf 087A        captureKeypad@keypress 0003  
        I2C_Master_Read@temp 0082             __size_ofi2_putch 000C                   _EECON1bits 000FA6  
         keypressed@keypress 006F               showInfo@sorted 0027                     __Hrparam 0000  
           __size_of_ReadRun 0132                     __Lrparam 0000             __size_of_PermLog 007C  
               ??_initLatest 0082           __CFG_BOREN$SBORDIS 000000             __size_of___awdiv 0084  
           __size_of___ftdiv 00E6        i2___wmul@multiplicand 0003             __size_of_WriteEE 0026  
           __size_of___lldiv 00BC             __size_of___ftmul 00F4             __size_of___lwdiv 0078  
           __size_of___lwmod 0062                 ??_initialize 0095                     ___awtoft 2030  
                   ___ftpack 184C             __size_of_checkAA 00C0                     _WriteRun 0E36  
         i2I2C_Master_Read@a 0002             __size_of_lcdInst 0010             __size_of_getTime 008A  
            _I2C_Master_Init 1DCA              _I2C_Master_Read 209E             __size_of_initLCD 0046  
                   back@runs 0001              _I2C_Master_Wait 2292              _I2C_Master_Stop 2304  
               ??_keypressed 005F             __size_of_isdigit 002A              ___lwdiv@divisor 0082  
            ___lwdiv@counter 0086                     __ptext10 2304                     __ptext11 230C  
                   __ptext20 1D00                     __ptext12 209E                     __ptext21 1DCA  
                   __ptext13 2292                     __ptext30 22A6                     __ptext22 1790  
                   __ptext14 2314                     __ptext31 1E2A                     __ptext15 1C12  
                   __ptext40 184C                     __ptext32 1548                     __ptext24 047C  
                   __ptext16 21EA                     __ptext41 1FF4                     __ptext33 16D0  
                   __ptext25 1C8A                     __ptext17 2264                     __ptext50 087A  
                   __ptext42 0E36                     __ptext34 160C                     __ptext26 22FA  
                   __ptext18 1F2A                     __ptext51 22D8                     __ptext43 219E  
                   __ptext35 1482                     __ptext27 231C                     __ptext19 22C8  
                   __ptext60 0F98                     __ptext52 220C                     __ptext44 20CC  
                   __ptext36 10CA                     __ptext28 2324                     __ptext61 227C  
                   __ptext53 21C4                     __ptext45 20FA                     __ptext37 18FA  
                   __ptext29 2178                     __ptext62 2248                     __ptext54 1FB2  
                   __ptext46 11BE                     __ptext38 139C                     __ptext55 1ED8  
                   __ptext47 1A9A                     __ptext39 2030                     __ptext56 232C  
                   __ptext48 1B1E                     __ptext57 22E4                     __ptext49 0C14  
                   __ptext58 1E82                     __ptext59 222A             __size_of_showRTC 0086  
         __end_of_initLatest 220C                __size_of_CW90 002E                __size_of_PWMC 00F2  
             i2_isdigit$1048 0002                __size_of_back 001C                __size_of_main 0042  
         __end_of_initialize 1C8A              ??_captureKeypad 0003                     _showInfo 0C14  
              ??i2_lcdNibble 0001                  ??_lcdNibble 0080                     getTime@i 0085  
                   _simulate 047C           __end_of_keypressed 139C                     int$flags 007D  
                  printf@idx 009A                    printf@len 009D                     main@argc 00A8  
                   main@argv 00AA                    printf@val 00A0                    simulate@C 004D  
                  putch@data 0082     __end_of_I2C_Master_Start 2314     __end_of_I2C_Master_Write 22FA  
                 _INTCONbits 000FF2                PermLog@sorted 0034                PWMC@countdown 0014  
                   isdigit@c 0082                     intlevel2 0000             ___lwmod@dividend 0087  
           ___lldiv@dividend 0080                 ??_stopMoving 0025       __size_of___lcd_newline 0008  
                   printf@ap 009B                     printf@cp 0098      __end_of_I2C_Master_Init 1E2A  
    __end_of_I2C_Master_Read 20CC      __end_of_I2C_Master_Wait 22A6      __end_of_I2C_Master_Stop 230C  
                lcdInst@data 0082                 showInfo@time 0025                 showInfo@stop 0030  
               showInfo@type 002E          __end_ofi2_lcdNibble 1ED8             ___lldiv@quotient 0088  
          I2C_Master_Write@d 0081              ___lwmod@divisor 0089              ___lwmod@counter 008B  
         __end_of_stopMoving 1E82               WriteEE@address 0001                  getTime@time 0083  

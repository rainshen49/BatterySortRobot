

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Thu Mar 30 22:39:41 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    45                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1
    67                           	psect	text55,global,reloc=2,class=CODE,delta=1
    68                           	psect	text56,global,reloc=2,class=CODE,delta=1
    69                           	psect	text57,global,reloc=2,class=CODE,delta=1
    70                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text59,global,reloc=2,class=CODE,delta=1
    72                           	psect	text60,global,reloc=2,class=CODE,delta=1
    73                           	psect	text61,global,reloc=2,class=CODE,delta=1
    74                           	psect	text62,global,reloc=2,class=CODE,delta=1
    75                           	psect	text63,global,reloc=2,class=CODE,delta=1
    76                           	psect	text64,global,reloc=2,class=CODE,delta=1
    77                           	psect	text65,global,reloc=2,class=CODE,delta=1
    78                           	psect	text66,global,reloc=2,class=CODE,delta=1
    79                           	psect	text67,global,reloc=2,class=CODE,delta=1
    80                           	psect	text68,global,reloc=2,class=CODE,delta=1
    81                           	psect	text69,global,reloc=2,class=CODE,delta=1
    82                           	psect	text70,global,reloc=2,class=CODE,delta=1
    83                           	psect	text71,global,reloc=2,class=CODE,delta=1
    84                           	psect	text72,global,reloc=2,class=CODE,delta=1
    85                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    86                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    87                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    88  0000                     
    89                           ; Version 1.41
    90                           ; Generated 25/01/2017 GMT
    91                           ; 
    92                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    93                           ; All rights reserved.
    94                           ; 
    95                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    96                           ; 
    97                           ; Redistribution and use in source and binary forms, with or without modification, are
    98                           ; permitted provided that the following conditions are met:
    99                           ; 
   100                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   101                           ;        conditions and the following disclaimer.
   102                           ; 
   103                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   104                           ;        of conditions and the following disclaimer in the documentation and/or other
   105                           ;        materials provided with the distribution.
   106                           ; 
   107                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   108                           ;        software without specific prior written permission.
   109                           ; 
   110                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   111                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   112                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   113                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   114                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   115                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   116                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   117                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   118                           ; 
   119                           ; 
   120                           ; Code-generator required, PIC18F4620 Definitions
   121                           ; 
   122                           ; SFR Addresses
   123  0000                     
   124                           	psect	mediumconst
   125  00FDC8                     __pmediumconst:
   126                           	opt stack 0
   127  00FDC8  00                 	db	0
   128  00FDC9                     _dpowers:
   129                           	opt stack 0
   130  00FDC9  0001               	dw	1
   131  00FDCB  000A               	dw	10
   132  00FDCD  0064               	dw	100
   133  00FDCF  03E8               	dw	1000
   134  00FDD1  2710               	dw	10000
   135  00FDD3                     __end_of_dpowers:
   136                           	opt stack 0
   137  00FDD3                     _hexpowers:
   138                           	opt stack 0
   139  00FDD3  0001               	dw	1
   140  00FDD5  0010               	dw	16
   141  00FDD7  0100               	dw	256
   142  00FDD9  1000               	dw	4096
   143  00FDDB                     __end_of_hexpowers:
   144                           	opt stack 0
   145  0000                     _PIR2bits	set	4001
   146  0000                     _EECON2	set	4007
   147  0000                     _EEDATA	set	4008
   148  0000                     _EECON1bits	set	4006
   149  0000                     _EEADR	set	4009
   150  0000                     _EEADRH	set	4010
   151  0000                     _SSPBUF	set	4041
   152  0000                     _SSPADD	set	4040
   153  0000                     _SSPCON2	set	4037
   154  0000                     _SSPCON1	set	4038
   155  0000                     _SSPSTAT	set	4039
   156  0000                     _ADRESL	set	4035
   157  0000                     _ADRESH	set	4036
   158  0000                     _ADCON0bits	set	4034
   159  0000                     _LATDbits	set	3980
   160  0000                     _PORTBbits	set	3969
   161  0000                     _PORTB	set	3969
   162  0000                     _INTCONbits	set	4082
   163  0000                     _CVRCON	set	4021
   164  0000                     _ADCON1	set	4033
   165  0000                     _ADCON0	set	4034
   166  0000                     _LATE	set	3981
   167  0000                     _LATD	set	3980
   168  0000                     _LATC	set	3979
   169  0000                     _LATB	set	3978
   170  0000                     _LATA	set	3977
   171  0000                     _TRISE	set	3990
   172  0000                     _TRISD	set	3989
   173  0000                     _TRISC	set	3988
   174  0000                     _TRISB	set	3987
   175  0000                     _TRISA	set	3986
   176  0000                     _ACKEN	set	32300
   177  0000                     _ACKDT	set	32301
   178  0000                     _RCEN	set	32299
   179  0000                     _PEN	set	32298
   180  0000                     _SEN	set	32296
   181  0000                     _TRISC4	set	31908
   182  0000                     _TRISC3	set	31907
   183  0000                     _ADON	set	32272
   184  0000                     _INT1IE	set	32643
   185  0000                     _INT1IF	set	32640
   186  0000                     _INT2IF	set	32641
   187  0000                     _INT2IE	set	32644
   188  0000                     _LATC6	set	31838
   189  0000                     _ADFM	set	32263
   190  0000                     _LATC2	set	31834
   191  0000                     _LATC1	set	31833
   192  0000                     _LATC0	set	31832
   193  00FDDB                     STR_16:
   194                           
   195                           ; BSR set to: 0
   196  00FDDB  53                 	db	83	;'S'
   197  00FDDC  6F                 	db	111	;'o'
   198  00FDDD  72                 	db	114	;'r'
   199  00FDDE  74                 	db	116	;'t'
   200  00FDDF  69                 	db	105	;'i'
   201  00FDE0  6E                 	db	110	;'n'
   202  00FDE1  67                 	db	103	;'g'
   203  00FDE2  20                 	db	32
   204  00FDE3  43                 	db	67	;'C'
   205  00FDE4  6F                 	db	111	;'o'
   206  00FDE5  6D                 	db	109	;'m'
   207  00FDE6  70                 	db	112	;'p'
   208  00FDE7  6C                 	db	108	;'l'
   209  00FDE8  65                 	db	101	;'e'
   210  00FDE9  74                 	db	116	;'t'
   211  00FDEA  65                 	db	101	;'e'
   212  00FDEB  20                 	db	32
   213  00FDEC  20                 	db	32
   214  00FDED  20                 	db	32
   215  00FDEE  20                 	db	32
   216  00FDEF  20                 	db	32
   217  00FDF0  20                 	db	32
   218  00FDF1  20                 	db	32
   219  00FDF2  20                 	db	32
   220  00FDF3  20                 	db	32
   221  00FDF4  20                 	db	32
   222  00FDF5  00                 	db	0
   223  00FDF6                     STR_21:
   224                           
   225                           ; BSR set to: 0
   226  00FDF6  50                 	db	80	;'P'
   227  00FDF7  72                 	db	114	;'r'
   228  00FDF8  65                 	db	101	;'e'
   229  00FDF9  73                 	db	115	;'s'
   230  00FDFA  73                 	db	115	;'s'
   231  00FDFB  20                 	db	32
   232  00FDFC  61                 	db	97	;'a'
   233  00FDFD  20                 	db	32
   234  00FDFE  6E                 	db	110	;'n'
   235  00FDFF  75                 	db	117	;'u'
   236  00FE00  6D                 	db	109	;'m'
   237  00FE01  62                 	db	98	;'b'
   238  00FE02  65                 	db	101	;'e'
   239  00FE03  72                 	db	114	;'r'
   240  00FE04  20                 	db	32
   241  00FE05  20                 	db	32
   242  00FE06  20                 	db	32
   243  00FE07  20                 	db	32
   244  00FE08  20                 	db	32
   245  00FE09  20                 	db	32
   246  00FE0A  20                 	db	32
   247  00FE0B  20                 	db	32
   248  00FE0C  20                 	db	32
   249  00FE0D  20                 	db	32
   250  00FE0E  00                 	db	0
   251  00FE0F                     STR_17:
   252                           
   253                           ; BSR set to: 0
   254  00FE0F  20                 	db	32
   255  00FE10  20                 	db	32
   256  00FE11  20                 	db	32
   257  00FE12  20                 	db	32
   258  00FE13  25                 	db	37
   259  00FE14  30                 	db	48	;'0'
   260  00FE15  32                 	db	50	;'2'
   261  00FE16  78                 	db	120	;'x'
   262  00FE17  2F                 	db	47
   263  00FE18  25                 	db	37
   264  00FE19  30                 	db	48	;'0'
   265  00FE1A  32                 	db	50	;'2'
   266  00FE1B  78                 	db	120	;'x'
   267  00FE1C  2F                 	db	47
   268  00FE1D  25                 	db	37
   269  00FE1E  30                 	db	48	;'0'
   270  00FE1F  32                 	db	50	;'2'
   271  00FE20  78                 	db	120	;'x'
   272  00FE21  20                 	db	32
   273  00FE22  20                 	db	32
   274  00FE23  20                 	db	32
   275  00FE24  20                 	db	32
   276  00FE25  20                 	db	32
   277  00FE26  20                 	db	32
   278  00FE27  00                 	db	0
   279  00FE28                     STR_18:
   280                           
   281                           ; BSR set to: 0
   282  00FE28  20                 	db	32
   283  00FE29  20                 	db	32
   284  00FE2A  20                 	db	32
   285  00FE2B  20                 	db	32
   286  00FE2C  25                 	db	37
   287  00FE2D  30                 	db	48	;'0'
   288  00FE2E  32                 	db	50	;'2'
   289  00FE2F  78                 	db	120	;'x'
   290  00FE30  3A                 	db	58	;':'
   291  00FE31  25                 	db	37
   292  00FE32  30                 	db	48	;'0'
   293  00FE33  32                 	db	50	;'2'
   294  00FE34  78                 	db	120	;'x'
   295  00FE35  3A                 	db	58	;':'
   296  00FE36  25                 	db	37
   297  00FE37  30                 	db	48	;'0'
   298  00FE38  32                 	db	50	;'2'
   299  00FE39  78                 	db	120	;'x'
   300  00FE3A  20                 	db	32
   301  00FE3B  20                 	db	32
   302  00FE3C  20                 	db	32
   303  00FE3D  20                 	db	32
   304  00FE3E  20                 	db	32
   305  00FE3F  20                 	db	32
   306  00FE40  00                 	db	0
   307  00FE41                     STR_23:
   308                           
   309                           ; BSR set to: 0
   310  00FE41  54                 	db	84	;'T'
   311  00FE42  69                 	db	105	;'i'
   312  00FE43  6D                 	db	109	;'m'
   313  00FE44  65                 	db	101	;'e'
   314  00FE45  20                 	db	32
   315  00FE46  45                 	db	69	;'E'
   316  00FE47  6C                 	db	108	;'l'
   317  00FE48  61                 	db	97	;'a'
   318  00FE49  70                 	db	112	;'p'
   319  00FE4A  73                 	db	115	;'s'
   320  00FE4B  65                 	db	101	;'e'
   321  00FE4C  64                 	db	100	;'d'
   322  00FE4D  3A                 	db	58	;':'
   323  00FE4E  20                 	db	32
   324  00FE4F  20                 	db	32
   325  00FE50  20                 	db	32
   326  00FE51  20                 	db	32
   327  00FE52  20                 	db	32
   328  00FE53  20                 	db	32
   329  00FE54  20                 	db	32
   330  00FE55  20                 	db	32
   331  00FE56  20                 	db	32
   332  00FE57  20                 	db	32
   333  00FE58  00                 	db	0
   334  00FE59                     STR_25:
   335                           
   336                           ; BSR set to: 0
   337  00FE59  54                 	db	84	;'T'
   338  00FE5A  6F                 	db	111	;'o'
   339  00FE5B  74                 	db	116	;'t'
   340  00FE5C  61                 	db	97	;'a'
   341  00FE5D  6C                 	db	108	;'l'
   342  00FE5E  20                 	db	32
   343  00FE5F  53                 	db	83	;'S'
   344  00FE60  6F                 	db	111	;'o'
   345  00FE61  72                 	db	114	;'r'
   346  00FE62  74                 	db	116	;'t'
   347  00FE63  65                 	db	101	;'e'
   348  00FE64  64                 	db	100	;'d'
   349  00FE65  3A                 	db	58	;':'
   350  00FE66  20                 	db	32
   351  00FE67  20                 	db	32
   352  00FE68  20                 	db	32
   353  00FE69  20                 	db	32
   354  00FE6A  20                 	db	32
   355  00FE6B  20                 	db	32
   356  00FE6C  20                 	db	32
   357  00FE6D  20                 	db	32
   358  00FE6E  20                 	db	32
   359  00FE6F  20                 	db	32
   360  00FE70  00                 	db	0
   361  00FE71                     STR_22:
   362                           
   363                           ; BSR set to: 0
   364  00FE71  46                 	db	70	;'F'
   365  00FE72  6F                 	db	111	;'o'
   366  00FE73  72                 	db	114	;'r'
   367  00FE74  20                 	db	32
   368  00FE75  6D                 	db	109	;'m'
   369  00FE76  6F                 	db	111	;'o'
   370  00FE77  72                 	db	114	;'r'
   371  00FE78  65                 	db	101	;'e'
   372  00FE79  20                 	db	32
   373  00FE7A  69                 	db	105	;'i'
   374  00FE7B  6E                 	db	110	;'n'
   375  00FE7C  66                 	db	102	;'f'
   376  00FE7D  6F                 	db	111	;'o'
   377  00FE7E  20                 	db	32
   378  00FE7F  20                 	db	32
   379  00FE80  20                 	db	32
   380  00FE81  20                 	db	32
   381  00FE82  20                 	db	32
   382  00FE83  20                 	db	32
   383  00FE84  20                 	db	32
   384  00FE85  20                 	db	32
   385  00FE86  20                 	db	32
   386  00FE87  20                 	db	32
   387  00FE88  00                 	db	0
   388  00FE89                     STR_2:
   389                           
   390                           ; BSR set to: 0
   391  00FE89  53                 	db	83	;'S'
   392  00FE8A  69                 	db	105	;'i'
   393  00FE8B  6D                 	db	109	;'m'
   394  00FE8C  75                 	db	117	;'u'
   395  00FE8D  6C                 	db	108	;'l'
   396  00FE8E  61                 	db	97	;'a'
   397  00FE8F  74                 	db	116	;'t'
   398  00FE90  69                 	db	105	;'i'
   399  00FE91  6E                 	db	110	;'n'
   400  00FE92  67                 	db	103	;'g'
   401  00FE93  2E                 	db	46
   402  00FE94  2E                 	db	46
   403  00FE95  2E                 	db	46
   404  00FE96  20                 	db	32
   405  00FE97  20                 	db	32
   406  00FE98  20                 	db	32
   407  00FE99  20                 	db	32
   408  00FE9A  20                 	db	32
   409  00FE9B  20                 	db	32
   410  00FE9C  20                 	db	32
   411  00FE9D  20                 	db	32
   412  00FE9E  20                 	db	32
   413  00FE9F  20                 	db	32
   414  00FEA0  00                 	db	0
   415  00FEA1                     STR_26:
   416                           
   417                           ; BSR set to: 0
   418  00FEA1  25                 	db	37
   419  00FEA2  75                 	db	117	;'u'
   420  00FEA3  20                 	db	32
   421  00FEA4  62                 	db	98	;'b'
   422  00FEA5  61                 	db	97	;'a'
   423  00FEA6  74                 	db	116	;'t'
   424  00FEA7  74                 	db	116	;'t'
   425  00FEA8  65                 	db	101	;'e'
   426  00FEA9  72                 	db	114	;'r'
   427  00FEAA  69                 	db	105	;'i'
   428  00FEAB  65                 	db	101	;'e'
   429  00FEAC  73                 	db	115	;'s'
   430  00FEAD  20                 	db	32
   431  00FEAE  20                 	db	32
   432  00FEAF  20                 	db	32
   433  00FEB0  20                 	db	32
   434  00FEB1  20                 	db	32
   435  00FEB2  20                 	db	32
   436  00FEB3  20                 	db	32
   437  00FEB4  20                 	db	32
   438  00FEB5  20                 	db	32
   439  00FEB6  20                 	db	32
   440  00FEB7  00                 	db	0
   441  00FEB8                     STR_42:
   442                           
   443                           ; BSR set to: 0
   444  00FEB8  50                 	db	80	;'P'
   445  00FEB9  65                 	db	101	;'e'
   446  00FEBA  72                 	db	114	;'r'
   447  00FEBB  6D                 	db	109	;'m'
   448  00FEBC  61                 	db	97	;'a'
   449  00FEBD  6E                 	db	110	;'n'
   450  00FEBE  65                 	db	101	;'e'
   451  00FEBF  6E                 	db	110	;'n'
   452  00FEC0  74                 	db	116	;'t'
   453  00FEC1  20                 	db	32
   454  00FEC2  6C                 	db	108	;'l'
   455  00FEC3  6F                 	db	111	;'o'
   456  00FEC4  67                 	db	103	;'g'
   457  00FEC5  3A                 	db	58	;':'
   458  00FEC6  20                 	db	32
   459  00FEC7  20                 	db	32
   460  00FEC8  20                 	db	32
   461  00FEC9  20                 	db	32
   462  00FECA  20                 	db	32
   463  00FECB  20                 	db	32
   464  00FECC  20                 	db	32
   465  00FECD  00                 	db	0
   466  00FECE                     STR_33:
   467                           
   468                           ; BSR set to: 0
   469  00FECE  55                 	db	85	;'U'
   470  00FECF  6E                 	db	110	;'n'
   471  00FED0  63                 	db	99	;'c'
   472  00FED1  68                 	db	104	;'h'
   473  00FED2  61                 	db	97	;'a'
   474  00FED3  72                 	db	114	;'r'
   475  00FED4  67                 	db	103	;'g'
   476  00FED5  65                 	db	101	;'e'
   477  00FED6  64                 	db	100	;'d'
   478  00FED7  3A                 	db	58	;':'
   479  00FED8  20                 	db	32
   480  00FED9  20                 	db	32
   481  00FEDA  20                 	db	32
   482  00FEDB  20                 	db	32
   483  00FEDC  20                 	db	32
   484  00FEDD  20                 	db	32
   485  00FEDE  20                 	db	32
   486  00FEDF  20                 	db	32
   487  00FEE0  20                 	db	32
   488  00FEE1  20                 	db	32
   489  00FEE2  00                 	db	0
   490  00FEE3                     STR_27:
   491                           
   492                           ; BSR set to: 0
   493  00FEE3  41                 	db	65	;'A'
   494  00FEE4  41                 	db	65	;'A'
   495  00FEE5  20                 	db	32
   496  00FEE6  53                 	db	83	;'S'
   497  00FEE7  6F                 	db	111	;'o'
   498  00FEE8  72                 	db	114	;'r'
   499  00FEE9  74                 	db	116	;'t'
   500  00FEEA  65                 	db	101	;'e'
   501  00FEEB  64                 	db	100	;'d'
   502  00FEEC  3A                 	db	58	;':'
   503  00FEED  20                 	db	32
   504  00FEEE  20                 	db	32
   505  00FEEF  20                 	db	32
   506  00FEF0  20                 	db	32
   507  00FEF1  20                 	db	32
   508  00FEF2  20                 	db	32
   509  00FEF3  20                 	db	32
   510  00FEF4  20                 	db	32
   511  00FEF5  20                 	db	32
   512  00FEF6  20                 	db	32
   513  00FEF7  00                 	db	0
   514  00FEF8                     STR_31:
   515                           
   516                           ; BSR set to: 0
   517  00FEF8  39                 	db	57	;'9'
   518  00FEF9  56                 	db	86	;'V'
   519  00FEFA  20                 	db	32
   520  00FEFB  53                 	db	83	;'S'
   521  00FEFC  6F                 	db	111	;'o'
   522  00FEFD  72                 	db	114	;'r'
   523  00FEFE  74                 	db	116	;'t'
   524  00FEFF  65                 	db	101	;'e'
   525  00FF00  64                 	db	100	;'d'
   526  00FF01  3A                 	db	58	;':'
   527  00FF02  20                 	db	32
   528  00FF03  20                 	db	32
   529  00FF04  20                 	db	32
   530  00FF05  20                 	db	32
   531  00FF06  20                 	db	32
   532  00FF07  20                 	db	32
   533  00FF08  20                 	db	32
   534  00FF09  20                 	db	32
   535  00FF0A  20                 	db	32
   536  00FF0B  20                 	db	32
   537  00FF0C  00                 	db	0
   538  00FF0D                     STR_24:
   539                           
   540                           ; BSR set to: 0
   541  00FF0D  25                 	db	37
   542  00FF0E  75                 	db	117	;'u'
   543  00FF0F  20                 	db	32
   544  00FF10  73                 	db	115	;'s'
   545  00FF11  65                 	db	101	;'e'
   546  00FF12  63                 	db	99	;'c'
   547  00FF13  6F                 	db	111	;'o'
   548  00FF14  6E                 	db	110	;'n'
   549  00FF15  64                 	db	100	;'d'
   550  00FF16  73                 	db	115	;'s'
   551  00FF17  20                 	db	32
   552  00FF18  20                 	db	32
   553  00FF19  20                 	db	32
   554  00FF1A  20                 	db	32
   555  00FF1B  20                 	db	32
   556  00FF1C  20                 	db	32
   557  00FF1D  20                 	db	32
   558  00FF1E  20                 	db	32
   559  00FF1F  20                 	db	32
   560  00FF20  20                 	db	32
   561  00FF21  00                 	db	0
   562  00FF22                     STR_35:
   563                           
   564                           ; BSR set to: 0
   565  00FF22  45                 	db	69	;'E'
   566  00FF23  6D                 	db	109	;'m'
   567  00FF24  65                 	db	101	;'e'
   568  00FF25  72                 	db	114	;'r'
   569  00FF26  67                 	db	103	;'g'
   570  00FF27  65                 	db	101	;'e'
   571  00FF28  6E                 	db	110	;'n'
   572  00FF29  63                 	db	99	;'c'
   573  00FF2A  79                 	db	121	;'y'
   574  00FF2B  20                 	db	32
   575  00FF2C  20                 	db	32
   576  00FF2D  20                 	db	32
   577  00FF2E  20                 	db	32
   578  00FF2F  20                 	db	32
   579  00FF30  20                 	db	32
   580  00FF31  20                 	db	32
   581  00FF32  20                 	db	32
   582  00FF33  20                 	db	32
   583  00FF34  20                 	db	32
   584  00FF35  00                 	db	0
   585  00FF36                     STR_29:
   586                           
   587                           ; BSR set to: 0
   588  00FF36  43                 	db	67	;'C'
   589  00FF37  20                 	db	32
   590  00FF38  53                 	db	83	;'S'
   591  00FF39  6F                 	db	111	;'o'
   592  00FF3A  72                 	db	114	;'r'
   593  00FF3B  74                 	db	116	;'t'
   594  00FF3C  65                 	db	101	;'e'
   595  00FF3D  64                 	db	100	;'d'
   596  00FF3E  3A                 	db	58	;':'
   597  00FF3F  20                 	db	32
   598  00FF40  20                 	db	32
   599  00FF41  20                 	db	32
   600  00FF42  20                 	db	32
   601  00FF43  20                 	db	32
   602  00FF44  20                 	db	32
   603  00FF45  20                 	db	32
   604  00FF46  20                 	db	32
   605  00FF47  20                 	db	32
   606  00FF48  20                 	db	32
   607  00FF49  00                 	db	0
   608  00FF4A                     STR_20:
   609                           
   610                           ; BSR set to: 0
   611  00FF4A  57                 	db	87	;'W'
   612  00FF4B  65                 	db	101	;'e'
   613  00FF4C  6C                 	db	108	;'l'
   614  00FF4D  63                 	db	99	;'c'
   615  00FF4E  6F                 	db	111	;'o'
   616  00FF4F  6D                 	db	109	;'m'
   617  00FF50  65                 	db	101	;'e'
   618  00FF51  21                 	db	33
   619  00FF52  20                 	db	32
   620  00FF53  20                 	db	32
   621  00FF54  20                 	db	32
   622  00FF55  20                 	db	32
   623  00FF56  20                 	db	32
   624  00FF57  20                 	db	32
   625  00FF58  20                 	db	32
   626  00FF59  20                 	db	32
   627  00FF5A  20                 	db	32
   628  00FF5B  20                 	db	32
   629  00FF5C  00                 	db	0
   630  00FF5D                     STR_43:
   631                           
   632                           ; BSR set to: 0
   633  00FF5D  57                 	db	87	;'W'
   634  00FF5E  68                 	db	104	;'h'
   635  00FF5F  69                 	db	105	;'i'
   636  00FF60  63                 	db	99	;'c'
   637  00FF61  68                 	db	104	;'h'
   638  00FF62  20                 	db	32
   639  00FF63  72                 	db	114	;'r'
   640  00FF64  75                 	db	117	;'u'
   641  00FF65  6E                 	db	110	;'n'
   642  00FF66  3F                 	db	63	;'?'
   643  00FF67  20                 	db	32
   644  00FF68  20                 	db	32
   645  00FF69  20                 	db	32
   646  00FF6A  20                 	db	32
   647  00FF6B  20                 	db	32
   648  00FF6C  20                 	db	32
   649  00FF6D  20                 	db	32
   650  00FF6E  00                 	db	0
   651  00FF6F                     STR_36:
   652                           
   653                           ; BSR set to: 0
   654  00FF6F  53                 	db	83	;'S'
   655  00FF70  74                 	db	116	;'t'
   656  00FF71  6F                 	db	111	;'o'
   657  00FF72  70                 	db	112	;'p'
   658  00FF73  70                 	db	112	;'p'
   659  00FF74  65                 	db	101	;'e'
   660  00FF75  64                 	db	100	;'d'
   661  00FF76  20                 	db	32
   662  00FF77  20                 	db	32
   663  00FF78  20                 	db	32
   664  00FF79  20                 	db	32
   665  00FF7A  20                 	db	32
   666  00FF7B  20                 	db	32
   667  00FF7C  20                 	db	32
   668  00FF7D  20                 	db	32
   669  00FF7E  20                 	db	32
   670  00FF7F  20                 	db	32
   671  00FF80  00                 	db	0
   672  00FF81                     STR_19:
   673                           
   674                           ; BSR set to: 0
   675  00FF81  41                 	db	65	;'A'
   676  00FF82  20                 	db	32
   677  00FF83  25                 	db	37
   678  00FF84  64                 	db	100	;'d'
   679  00FF85  2C                 	db	44
   680  00FF86  43                 	db	67	;'C'
   681  00FF87  20                 	db	32
   682  00FF88  25                 	db	37
   683  00FF89  64                 	db	100	;'d'
   684  00FF8A  2C                 	db	44
   685  00FF8B  39                 	db	57	;'9'
   686  00FF8C  20                 	db	32
   687  00FF8D  25                 	db	37
   688  00FF8E  64                 	db	100	;'d'
   689  00FF8F  20                 	db	32
   690  00FF90  20                 	db	32
   691  00FF91  20                 	db	32
   692  00FF92  00                 	db	0
   693  00FF93                     STR_46:
   694                           
   695                           ; BSR set to: 0
   696  00FF93  30                 	db	48	;'0'
   697  00FF94  31                 	db	49	;'1'
   698  00FF95  32                 	db	50	;'2'
   699  00FF96  33                 	db	51	;'3'
   700  00FF97  34                 	db	52	;'4'
   701  00FF98  35                 	db	53	;'5'
   702  00FF99  36                 	db	54	;'6'
   703  00FF9A  37                 	db	55	;'7'
   704  00FF9B  38                 	db	56	;'8'
   705  00FF9C  39                 	db	57	;'9'
   706  00FF9D  61                 	db	97	;'a'
   707  00FF9E  62                 	db	98	;'b'
   708  00FF9F  63                 	db	99	;'c'
   709  00FFA0  64                 	db	100	;'d'
   710  00FFA1  65                 	db	101	;'e'
   711  00FFA2  66                 	db	102	;'f'
   712  00FFA3  00                 	db	0
   713  00FFA4                     STR_44:
   714                           
   715                           ; BSR set to: 0
   716  00FFA4  73                 	db	115	;'s'
   717  00FFA5  68                 	db	104	;'h'
   718  00FFA6  6F                 	db	111	;'o'
   719  00FFA7  77                 	db	119	;'w'
   720  00FFA8  69                 	db	105	;'i'
   721  00FFA9  6E                 	db	110	;'n'
   722  00FFAA  67                 	db	103	;'g'
   723  00FFAB  20                 	db	32
   724  00FFAC  25                 	db	37
   725  00FFAD  75                 	db	117	;'u'
   726  00FFAE  20                 	db	32
   727  00FFAF  20                 	db	32
   728  00FFB0  20                 	db	32
   729  00FFB1  20                 	db	32
   730  00FFB2  20                 	db	32
   731  00FFB3  20                 	db	32
   732  00FFB4  00                 	db	0
   733  00FFB5                     STR_45:
   734                           
   735                           ; BSR set to: 0
   736  00FFB5  72                 	db	114	;'r'
   737  00FFB6  75                 	db	117	;'u'
   738  00FFB7  6E                 	db	110	;'n'
   739  00FFB8  73                 	db	115	;'s'
   740  00FFB9  20                 	db	32
   741  00FFBA  62                 	db	98	;'b'
   742  00FFBB  65                 	db	101	;'e'
   743  00FFBC  66                 	db	102	;'f'
   744  00FFBD  6F                 	db	111	;'o'
   745  00FFBE  72                 	db	114	;'r'
   746  00FFBF  65                 	db	101	;'e'
   747  00FFC0  20                 	db	32
   748  00FFC1  20                 	db	32
   749  00FFC2  20                 	db	32
   750  00FFC3  20                 	db	32
   751  00FFC4  20                 	db	32
   752  00FFC5  00                 	db	0
   753  00FFC6                     STR_28:
   754                           
   755                           ; BSR set to: 0
   756  00FFC6  25                 	db	37
   757  00FFC7  75                 	db	117	;'u'
   758  00FFC8  20                 	db	32
   759  00FFC9  20                 	db	32
   760  00FFCA  20                 	db	32
   761  00FFCB  20                 	db	32
   762  00FFCC  20                 	db	32
   763  00FFCD  20                 	db	32
   764  00FFCE  20                 	db	32
   765  00FFCF  20                 	db	32
   766  00FFD0  20                 	db	32
   767  00FFD1  20                 	db	32
   768  00FFD2  20                 	db	32
   769  00FFD3  20                 	db	32
   770  00FFD4  20                 	db	32
   771  00FFD5  00                 	db	0
   772  00FFD6                     
   773                           ; BSR set to: 0
   774  00FFD6  4D                 	db	77	;'M'
   775  00FFD7  61                 	db	97	;'a'
   776  00FFD8  69                 	db	105	;'i'
   777  00FFD9  6E                 	db	110	;'n'
   778  00FFDA  6C                 	db	108	;'l'
   779  00FFDB  6F                 	db	111	;'o'
   780  00FFDC  6F                 	db	111	;'o'
   781  00FFDD  70                 	db	112	;'p'
   782  00FFDE  00                 	db	0
   783  00FFDF                     STR_38:
   784                           
   785                           ; BSR set to: 0
   786  00FFDF  20                 	db	32
   787  00FFE0  25                 	db	37
   788  00FFE1  64                 	db	100	;'d'
   789  00FFE2  20                 	db	32
   790  00FFE3  00                 	db	0
   791  00FFE4                     STR_12:
   792                           
   793                           ; BSR set to: 0
   794  00FFE4  20                 	db	32
   795  00FFE5  41                 	db	65	;'A'
   796  00FFE6  41                 	db	65	;'A'
   797  00FFE7  3A                 	db	58	;':'
   798  00FFE8  00                 	db	0
   799  00FFE9                     STR_37:
   800                           
   801                           ; BSR set to: 0
   802  00FFE9  2D                 	db	45
   803  00FFEA  31                 	db	49	;'1'
   804  00FFEB  20                 	db	32
   805  00FFEC  00                 	db	0
   806  00FFED                     STR_8:
   807                           
   808                           ; BSR set to: 0
   809  00FFED  20                 	db	32
   810  00FFEE  43                 	db	67	;'C'
   811  00FFEF  3A                 	db	58	;':'
   812  00FFF0  00                 	db	0
   813  00FFF1                     STR_4:
   814                           
   815                           ; BSR set to: 0
   816  00FFF1  39                 	db	57	;'9'
   817  00FFF2  56                 	db	86	;'V'
   818  00FFF3  3A                 	db	58	;':'
   819  00FFF4  00                 	db	0
   820  00FFF5                     STR_6:
   821                           
   822                           ; BSR set to: 0
   823  00FFF5  20                 	db	32
   824  00FFF6  2B                 	db	43
   825  00FFF7  00                 	db	0
   826  00FFF8                     STR_5:
   827                           
   828                           ; BSR set to: 0
   829  00FFF8  20                 	db	32
   830  00FFF9  2D                 	db	45
   831  00FFFA  00                 	db	0
   832  00FFFB                     STR_7:
   833                           
   834                           ; BSR set to: 0
   835  00FFFB  20                 	db	32
   836  00FFFC  30                 	db	48	;'0'
   837  00FFFD  00                 	db	0
   838  0000                     
   839                           ; #config settings
   840  00FFFE  00                 	db	0	; dummy byte at the end
   841  0000                     
   842                           	psect	cinit
   843  0026F2                     __pcinit:
   844                           	opt stack 0
   845  0026F2                     start_initialization:
   846                           	opt stack 0
   847  0026F2                     __initialization:
   848                           	opt stack 0
   849                           
   850                           ; Clear objects allocated to BANK0 (31 bytes)
   851  0026F2  EE00  F0BD         	lfsr	0,__pbssBANK0
   852  0026F6  0E1F               	movlw	31
   853  0026F8                     clear_0:
   854  0026F8  6AEE               	clrf	postinc0,c
   855  0026FA  06E8               	decf	wreg,f,c
   856  0026FC  E1FD               	bnz	clear_0
   857                           
   858                           ; Clear objects allocated to COMRAM (17 bytes)
   859  0026FE  EE00  F06D         	lfsr	0,__pbssCOMRAM
   860  002702  0E11               	movlw	17
   861  002704                     clear_1:
   862  002704  6AEE               	clrf	postinc0,c
   863  002706  06E8               	decf	wreg,f,c
   864  002708  E1FD               	bnz	clear_1
   865  00270A                     end_of_initialization:
   866                           	opt stack 0
   867  00270A                     __end_of__initialization:
   868                           	opt stack 0
   869  00270A  907E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   870  00270C  927E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   871  00270E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   872  002710  6EF8               	movwf	tblptru,c
   873  002712  0100               	movlb	0
   874  002714  EF36  F012         	goto	_main	;jump to C main() function
   875                           tblptru	equ	0xFF8
   876                           postinc0	equ	0xFEE
   877                           wreg	equ	0xFE8
   878                           
   879                           	psect	bssCOMRAM
   880  00006D                     __pbssCOMRAM:
   881                           	opt stack 0
   882  00006D                     simulate@F3095:
   883                           	opt stack 0
   884  00006D                     	ds	4
   885  000071                     simulate@F3093:
   886                           	opt stack 0
   887  000071                     	ds	4
   888  000075                     _mode:
   889                           	opt stack 0
   890  000075                     	ds	2
   891  000077                     _time:
   892                           	opt stack 0
   893  000077                     	ds	7
   894                           tblptru	equ	0xFF8
   895                           postinc0	equ	0xFEE
   896                           wreg	equ	0xFE8
   897                           
   898                           	psect	bssBANK0
   899  0000BD                     __pbssBANK0:
   900                           	opt stack 0
   901  0000BD                     intrpt@F3114:
   902                           	opt stack 0
   903  0000BD                     	ds	6
   904  0000C3                     simulate@F3106:
   905                           	opt stack 0
   906  0000C3                     	ds	6
   907  0000C9                     simulate@F3104:
   908                           	opt stack 0
   909  0000C9                     	ds	6
   910  0000CF                     PermLog@F3082:
   911                           	opt stack 0
   912  0000CF                     	ds	4
   913  0000D3                     testAD@F3118:
   914                           	opt stack 0
   915  0000D3                     	ds	4
   916  0000D7                     simulate@F3097:
   917                           	opt stack 0
   918  0000D7                     	ds	4
   919  0000DB                     _Latest:
   920                           	opt stack 0
   921  0000DB                     	ds	1
   922                           tblptru	equ	0xFF8
   923                           postinc0	equ	0xFEE
   924                           wreg	equ	0xFE8
   925                           
   926                           	psect	cstackBANK0
   927  000080                     __pcstackBANK0:
   928                           	opt stack 0
   929  000080                     ??_isdigit:
   930  000080                     ??_I2C_Master_Wait:
   931  000080                     ?_AD:
   932                           	opt stack 0
   933  000080                     ?___wmul:
   934                           	opt stack 0
   935  000080                     ?___lwdiv:
   936                           	opt stack 0
   937  000080                     ?___ftpack:
   938                           	opt stack 0
   939  000080                     ?___lldiv:
   940                           	opt stack 0
   941  000080                     lcdNibble@temp:
   942                           	opt stack 0
   943  000080                     ReadEE@address:
   944                           	opt stack 0
   945  000080                     ___wmul@multiplier:
   946                           	opt stack 0
   947  000080                     ___lwdiv@dividend:
   948                           	opt stack 0
   949  000080                     ___ftpack@arg:
   950                           	opt stack 0
   951  000080                     ___lldiv@dividend:
   952                           	opt stack 0
   953                           
   954                           ; 4 bytes @ 0x0
   955  000080                     	ds	1
   956  000081                     lcdNibble@data:
   957                           	opt stack 0
   958  000081                     I2C_Master_Read@a:
   959                           	opt stack 0
   960  000081                     _isdigit$1050:
   961                           	opt stack 0
   962  000081                     I2C_Master_Write@d:
   963                           	opt stack 0
   964                           
   965                           ; 2 bytes @ 0x1
   966  000081                     	ds	1
   967  000082                     ??_AD:
   968  000082                     lcdInst@data:
   969                           	opt stack 0
   970  000082                     putch@data:
   971                           	opt stack 0
   972  000082                     I2C_Master_Read@temp:
   973                           	opt stack 0
   974  000082                     isdigit@c:
   975                           	opt stack 0
   976  000082                     ___wmul@multiplicand:
   977                           	opt stack 0
   978  000082                     ___lwdiv@divisor:
   979                           	opt stack 0
   980                           
   981                           ; 2 bytes @ 0x2
   982  000082                     	ds	1
   983  000083                     ??_initLCD:
   984  000083                     ___ftpack@exp:
   985                           	opt stack 0
   986  000083                     getTime@time:
   987                           	opt stack 0
   988                           
   989                           ; 2 bytes @ 0x3
   990  000083                     	ds	1
   991  000084                     AD@channel:
   992                           	opt stack 0
   993  000084                     ___ftpack@sign:
   994                           	opt stack 0
   995  000084                     ___wmul@product:
   996                           	opt stack 0
   997  000084                     ___lwdiv@quotient:
   998                           	opt stack 0
   999  000084                     ___lldiv@divisor:
  1000                           	opt stack 0
  1001                           
  1002                           ; 4 bytes @ 0x4
  1003  000084                     	ds	1
  1004  000085                     ??___ftpack:
  1005  000085                     getTime@i:
  1006                           	opt stack 0
  1007                           
  1008                           ; 1 bytes @ 0x5
  1009  000085                     	ds	1
  1010  000086                     ___lwdiv@counter:
  1011                           	opt stack 0
  1012                           
  1013                           ; 1 bytes @ 0x6
  1014  000086                     	ds	1
  1015  000087                     ?___lwmod:
  1016                           	opt stack 0
  1017  000087                     ___lwmod@dividend:
  1018                           	opt stack 0
  1019                           
  1020                           ; 2 bytes @ 0x7
  1021  000087                     	ds	1
  1022  000088                     ?___awtoft:
  1023                           	opt stack 0
  1024  000088                     ___awtoft@c:
  1025                           	opt stack 0
  1026  000088                     ___lldiv@quotient:
  1027                           	opt stack 0
  1028                           
  1029                           ; 4 bytes @ 0x8
  1030  000088                     	ds	1
  1031  000089                     ___lwmod@divisor:
  1032                           	opt stack 0
  1033                           
  1034                           ; 2 bytes @ 0x9
  1035  000089                     	ds	2
  1036  00008B                     ___awtoft@sign:
  1037                           	opt stack 0
  1038  00008B                     ___lwmod@counter:
  1039                           	opt stack 0
  1040                           
  1041                           ; 1 bytes @ 0xB
  1042  00008B                     	ds	1
  1043  00008C                     ?_printf:
  1044                           	opt stack 0
  1045  00008C                     ?___ftmul:
  1046                           	opt stack 0
  1047  00008C                     ___lldiv@counter:
  1048                           	opt stack 0
  1049  00008C                     printf@f:
  1050                           	opt stack 0
  1051  00008C                     ___ftmul@f1:
  1052                           	opt stack 0
  1053                           
  1054                           ; 3 bytes @ 0xC
  1055  00008C                     	ds	1
  1056  00008D                     I2C_Master_Init@c:
  1057                           	opt stack 0
  1058                           
  1059                           ; 4 bytes @ 0xD
  1060  00008D                     	ds	2
  1061  00008F                     ___ftmul@f2:
  1062                           	opt stack 0
  1063                           
  1064                           ; 3 bytes @ 0xF
  1065  00008F                     	ds	2
  1066  000091                     ??_I2C_Master_Init:
  1067                           
  1068                           ; 1 bytes @ 0x11
  1069  000091                     	ds	1
  1070  000092                     ??___ftmul:
  1071                           
  1072                           ; 1 bytes @ 0x12
  1073  000092                     	ds	2
  1074  000094                     ??_printf:
  1075                           
  1076                           ; 1 bytes @ 0x14
  1077  000094                     	ds	1
  1078  000095                     ___ftmul@exp:
  1079                           	opt stack 0
  1080                           
  1081                           ; 1 bytes @ 0x15
  1082  000095                     	ds	1
  1083  000096                     ___ftmul@f3_as_product:
  1084                           	opt stack 0
  1085                           
  1086                           ; 3 bytes @ 0x16
  1087  000096                     	ds	2
  1088  000098                     printf@cp:
  1089                           	opt stack 0
  1090                           
  1091                           ; 2 bytes @ 0x18
  1092  000098                     	ds	1
  1093  000099                     ___ftmul@cntr:
  1094                           	opt stack 0
  1095                           
  1096                           ; 1 bytes @ 0x19
  1097  000099                     	ds	1
  1098  00009A                     printf@idx:
  1099                           	opt stack 0
  1100  00009A                     ___ftmul@sign:
  1101                           	opt stack 0
  1102                           
  1103                           ; 1 bytes @ 0x1A
  1104  00009A                     	ds	1
  1105  00009B                     printf@ap:
  1106                           	opt stack 0
  1107  00009B                     ___ftge@ff1:
  1108                           	opt stack 0
  1109                           
  1110                           ; 3 bytes @ 0x1B
  1111  00009B                     	ds	2
  1112  00009D                     printf@len:
  1113                           	opt stack 0
  1114                           
  1115                           ; 2 bytes @ 0x1D
  1116  00009D                     	ds	1
  1117  00009E                     ___ftge@ff2:
  1118                           	opt stack 0
  1119                           
  1120                           ; 3 bytes @ 0x1E
  1121  00009E                     	ds	1
  1122  00009F                     printf@prec:
  1123                           	opt stack 0
  1124                           
  1125                           ; 1 bytes @ 0x1F
  1126  00009F                     	ds	1
  1127  0000A0                     printf@val:
  1128                           	opt stack 0
  1129                           
  1130                           ; 2 bytes @ 0x20
  1131  0000A0                     	ds	1
  1132  0000A1                     ??___ftge:
  1133                           
  1134                           ; 1 bytes @ 0x21
  1135  0000A1                     	ds	1
  1136  0000A2                     printf@flag:
  1137                           	opt stack 0
  1138                           
  1139                           ; 1 bytes @ 0x22
  1140  0000A2                     	ds	1
  1141  0000A3                     printf@width:
  1142                           	opt stack 0
  1143                           
  1144                           ; 2 bytes @ 0x23
  1145  0000A3                     	ds	1
  1146  0000A4                     ?_checkV:
  1147                           	opt stack 0
  1148  0000A4                     checkV@threshhold:
  1149                           	opt stack 0
  1150                           
  1151                           ; 2 bytes @ 0x24
  1152  0000A4                     	ds	1
  1153  0000A5                     printf@c:
  1154                           	opt stack 0
  1155                           
  1156                           ; 1 bytes @ 0x25
  1157  0000A5                     	ds	1
  1158  0000A6                     ??_showRTC:
  1159  0000A6                     checkV@channel:
  1160                           	opt stack 0
  1161  0000A6                     printV@charged:
  1162                           	opt stack 0
  1163                           
  1164                           ; 2 bytes @ 0x26
  1165  0000A6                     	ds	1
  1166  0000A7                     checkV@voltage:
  1167                           	opt stack 0
  1168                           
  1169                           ; 2 bytes @ 0x27
  1170  0000A7                     	ds	1
  1171  0000A8                     
  1172                           ; 1 bytes @ 0x28
  1173  0000A8                     	ds	1
  1174  0000A9                     ?_check9:
  1175                           	opt stack 0
  1176  0000A9                     ?_checkC:
  1177                           	opt stack 0
  1178  0000A9                     ?_checkAA:
  1179                           	opt stack 0
  1180  0000A9                     checkAA@sorted:
  1181                           	opt stack 0
  1182  0000A9                     checkC@sorted:
  1183                           	opt stack 0
  1184  0000A9                     check9@sorted:
  1185                           	opt stack 0
  1186                           
  1187                           ; 2 bytes @ 0x29
  1188  0000A9                     	ds	2
  1189  0000AB                     ??_check9:
  1190  0000AB                     ??_checkC:
  1191  0000AB                     ??_checkAA:
  1192                           
  1193                           ; 1 bytes @ 0x2B
  1194  0000AB                     	ds	2
  1195  0000AD                     checkAA@V:
  1196                           	opt stack 0
  1197  0000AD                     checkC@V:
  1198                           	opt stack 0
  1199  0000AD                     check9@V:
  1200                           	opt stack 0
  1201                           
  1202                           ; 2 bytes @ 0x2D
  1203  0000AD                     	ds	2
  1204  0000AF                     ??_testAD:
  1205                           
  1206                           ; 1 bytes @ 0x2F
  1207  0000AF                     	ds	2
  1208  0000B1                     _testAD$1395:
  1209                           	opt stack 0
  1210                           
  1211                           ; 2 bytes @ 0x31
  1212  0000B1                     	ds	2
  1213  0000B3                     _testAD$1396:
  1214                           	opt stack 0
  1215                           
  1216                           ; 2 bytes @ 0x33
  1217  0000B3                     	ds	2
  1218  0000B5                     _testAD$1397:
  1219                           	opt stack 0
  1220                           
  1221                           ; 2 bytes @ 0x35
  1222  0000B5                     	ds	2
  1223  0000B7                     testAD@sorted:
  1224                           	opt stack 0
  1225                           
  1226                           ; 4 bytes @ 0x37
  1227  0000B7                     	ds	4
  1228  0000BB                     ??_main:
  1229                           
  1230                           ; 1 bytes @ 0x3B
  1231  0000BB                     	ds	2
  1232                           tblptru	equ	0xFF8
  1233                           postinc0	equ	0xFEE
  1234                           wreg	equ	0xFE8
  1235                           
  1236                           	psect	cstackCOMRAM
  1237  000001                     __pcstackCOMRAM:
  1238                           	opt stack 0
  1239  000001                     ??i2_I2C_Master_Wait:
  1240  000001                     ??i2_isdigit:
  1241  000001                     ?_captureKeypad:
  1242                           	opt stack 0
  1243  000001                     ?___awdiv:
  1244                           	opt stack 0
  1245  000001                     ?i2_AD:
  1246                           	opt stack 0
  1247  000001                     ?i2___wmul:
  1248                           	opt stack 0
  1249  000001                     ?i2___lwdiv:
  1250                           	opt stack 0
  1251  000001                     ?i2___ftpack:
  1252                           	opt stack 0
  1253  000001                     back@runs:
  1254                           	opt stack 0
  1255  000001                     i2lcdNibble@temp:
  1256                           	opt stack 0
  1257  000001                     WriteEE@address:
  1258                           	opt stack 0
  1259  000001                     ___awdiv@dividend:
  1260                           	opt stack 0
  1261  000001                     i2ReadEE@address:
  1262                           	opt stack 0
  1263  000001                     i2___wmul@multiplier:
  1264                           	opt stack 0
  1265  000001                     i2___lwdiv@dividend:
  1266                           	opt stack 0
  1267  000001                     i2___ftpack@arg:
  1268                           	opt stack 0
  1269                           
  1270                           ; 3 bytes @ 0x0
  1271  000001                     	ds	1
  1272  000002                     back@result:
  1273                           	opt stack 0
  1274  000002                     i2lcdNibble@data:
  1275                           	opt stack 0
  1276  000002                     i2I2C_Master_Read@a:
  1277                           	opt stack 0
  1278  000002                     i2_isdigit$1050:
  1279                           	opt stack 0
  1280  000002                     i2I2C_Master_Write@d:
  1281                           	opt stack 0
  1282                           
  1283                           ; 2 bytes @ 0x1
  1284  000002                     	ds	1
  1285  000003                     ??i2_AD:
  1286  000003                     captureKeypad@keypress:
  1287                           	opt stack 0
  1288  000003                     WriteEE@data:
  1289                           	opt stack 0
  1290  000003                     i2lcdInst@data:
  1291                           	opt stack 0
  1292  000003                     i2putch@data:
  1293                           	opt stack 0
  1294  000003                     i2I2C_Master_Read@temp:
  1295                           	opt stack 0
  1296  000003                     i2isdigit@c:
  1297                           	opt stack 0
  1298  000003                     ReadRun@sorted:
  1299                           	opt stack 0
  1300  000003                     ___awdiv@divisor:
  1301                           	opt stack 0
  1302  000003                     i2___wmul@multiplicand:
  1303                           	opt stack 0
  1304  000003                     i2___lwdiv@divisor:
  1305                           	opt stack 0
  1306                           
  1307                           ; 2 bytes @ 0x2
  1308  000003                     	ds	1
  1309  000004                     i2___ftpack@exp:
  1310                           	opt stack 0
  1311  000004                     i2getTime@time:
  1312                           	opt stack 0
  1313                           
  1314                           ; 2 bytes @ 0x3
  1315  000004                     	ds	1
  1316  000005                     ___awdiv@counter:
  1317                           	opt stack 0
  1318  000005                     i2AD@channel:
  1319                           	opt stack 0
  1320  000005                     i2___ftpack@sign:
  1321                           	opt stack 0
  1322  000005                     ReadRun@time:
  1323                           	opt stack 0
  1324  000005                     i2___wmul@product:
  1325                           	opt stack 0
  1326  000005                     i2___lwdiv@quotient:
  1327                           	opt stack 0
  1328                           
  1329                           ; 2 bytes @ 0x4
  1330  000005                     	ds	1
  1331  000006                     ??i2___ftpack:
  1332  000006                     ___awdiv@sign:
  1333                           	opt stack 0
  1334  000006                     i2getTime@i:
  1335                           	opt stack 0
  1336                           
  1337                           ; 1 bytes @ 0x5
  1338  000006                     	ds	1
  1339  000007                     ??_ReadRun:
  1340  000007                     ?_HexDecToDec2:
  1341                           	opt stack 0
  1342  000007                     i2___lwdiv@counter:
  1343                           	opt stack 0
  1344  000007                     HexDecToDec2@hex:
  1345                           	opt stack 0
  1346  000007                     WriteRun@sorted:
  1347                           	opt stack 0
  1348  000007                     ___awdiv@quotient:
  1349                           	opt stack 0
  1350                           
  1351                           ; 2 bytes @ 0x6
  1352  000007                     	ds	1
  1353  000008                     ?i2___lwmod:
  1354                           	opt stack 0
  1355  000008                     i2___lwmod@dividend:
  1356                           	opt stack 0
  1357                           
  1358                           ; 2 bytes @ 0x7
  1359  000008                     	ds	1
  1360  000009                     ??_HexDecToDec2:
  1361  000009                     ?i2___awtoft:
  1362                           	opt stack 0
  1363  000009                     PWMC@widthus:
  1364                           	opt stack 0
  1365  000009                     WriteRun@time:
  1366                           	opt stack 0
  1367  000009                     i2___awtoft@c:
  1368                           	opt stack 0
  1369                           
  1370                           ; 2 bytes @ 0x8
  1371  000009                     	ds	1
  1372  00000A                     i2___lwmod@divisor:
  1373                           	opt stack 0
  1374                           
  1375                           ; 2 bytes @ 0x9
  1376  00000A                     	ds	1
  1377  00000B                     ??_WriteRun:
  1378  00000B                     ReadRun@backruns:
  1379                           	opt stack 0
  1380  00000B                     PWMC@cycles:
  1381                           	opt stack 0
  1382                           
  1383                           ; 2 bytes @ 0xA
  1384  00000B                     	ds	1
  1385  00000C                     i2___awtoft@sign:
  1386                           	opt stack 0
  1387  00000C                     i2___lwmod@counter:
  1388                           	opt stack 0
  1389  00000C                     HexDecToDec2@tenth:
  1390                           	opt stack 0
  1391  00000C                     ReadRun@add:
  1392                           	opt stack 0
  1393                           
  1394                           ; 2 bytes @ 0xB
  1395  00000C                     	ds	1
  1396  00000D                     ?i2_printf:
  1397                           	opt stack 0
  1398  00000D                     ?i2___ftmul:
  1399                           	opt stack 0
  1400  00000D                     PWMC@port:
  1401                           	opt stack 0
  1402  00000D                     WriteRun@add:
  1403                           	opt stack 0
  1404  00000D                     i2printf@f:
  1405                           	opt stack 0
  1406  00000D                     i2___ftmul@f1:
  1407                           	opt stack 0
  1408                           
  1409                           ; 3 bytes @ 0xC
  1410  00000D                     	ds	1
  1411  00000E                     HexDecToDec2@digit:
  1412                           	opt stack 0
  1413                           
  1414                           ; 2 bytes @ 0xD
  1415  00000E                     	ds	1
  1416  00000F                     ??_PWMC:
  1417                           
  1418                           ; 1 bytes @ 0xE
  1419  00000F                     	ds	1
  1420  000010                     i2___ftmul@f2:
  1421                           	opt stack 0
  1422                           
  1423                           ; 3 bytes @ 0xF
  1424  000010                     	ds	1
  1425  000011                     ??i2_printf:
  1426  000011                     _PWMC$1391:
  1427                           	opt stack 0
  1428                           
  1429                           ; 1 bytes @ 0x10
  1430  000011                     	ds	1
  1431  000012                     _PWMC$1392:
  1432                           	opt stack 0
  1433                           
  1434                           ; 1 bytes @ 0x11
  1435  000012                     	ds	1
  1436  000013                     ??i2___ftmul:
  1437  000013                     _PWMC$1393:
  1438                           	opt stack 0
  1439                           
  1440                           ; 1 bytes @ 0x12
  1441  000013                     	ds	1
  1442  000014                     PWMC@countdown:
  1443                           	opt stack 0
  1444                           
  1445                           ; 2 bytes @ 0x13
  1446  000014                     	ds	1
  1447  000015                     i2printf@cp:
  1448                           	opt stack 0
  1449                           
  1450                           ; 2 bytes @ 0x14
  1451  000015                     	ds	1
  1452  000016                     i2___ftmul@exp:
  1453                           	opt stack 0
  1454  000016                     CW90@port:
  1455                           	opt stack 0
  1456  000016                     CCW90@port:
  1457                           	opt stack 0
  1458                           
  1459                           ; 2 bytes @ 0x15
  1460  000016                     	ds	1
  1461  000017                     i2printf@idx:
  1462                           	opt stack 0
  1463  000017                     i2___ftmul@f3_as_product:
  1464                           	opt stack 0
  1465                           
  1466                           ; 3 bytes @ 0x16
  1467  000017                     	ds	1
  1468  000018                     ??_CCW90:
  1469  000018                     ??_CW90:
  1470  000018                     i2printf@ap:
  1471                           	opt stack 0
  1472                           
  1473                           ; 2 bytes @ 0x17
  1474  000018                     	ds	2
  1475  00001A                     i2___ftmul@cntr:
  1476                           	opt stack 0
  1477  00001A                     i2printf@len:
  1478                           	opt stack 0
  1479                           
  1480                           ; 2 bytes @ 0x19
  1481  00001A                     	ds	1
  1482  00001B                     i2___ftmul@sign:
  1483                           	opt stack 0
  1484                           
  1485                           ; 1 bytes @ 0x1A
  1486  00001B                     	ds	1
  1487  00001C                     i2printf@prec:
  1488                           	opt stack 0
  1489  00001C                     i2___ftge@ff1:
  1490                           	opt stack 0
  1491                           
  1492                           ; 3 bytes @ 0x1B
  1493  00001C                     	ds	1
  1494  00001D                     i2printf@val:
  1495                           	opt stack 0
  1496                           
  1497                           ; 2 bytes @ 0x1C
  1498  00001D                     	ds	2
  1499  00001F                     i2printf@flag:
  1500                           	opt stack 0
  1501  00001F                     i2___ftge@ff2:
  1502                           	opt stack 0
  1503                           
  1504                           ; 3 bytes @ 0x1E
  1505  00001F                     	ds	1
  1506  000020                     i2printf@width:
  1507                           	opt stack 0
  1508                           
  1509                           ; 2 bytes @ 0x1F
  1510  000020                     	ds	2
  1511  000022                     ??i2___ftge:
  1512  000022                     i2printf@c:
  1513                           	opt stack 0
  1514                           
  1515                           ; 1 bytes @ 0x21
  1516  000022                     	ds	1
  1517  000023                     showInfo@time:
  1518                           	opt stack 0
  1519  000023                     _stopMoving$552:
  1520                           	opt stack 0
  1521  000023                     i2printV@charged:
  1522                           	opt stack 0
  1523                           
  1524                           ; 2 bytes @ 0x22
  1525  000023                     	ds	2
  1526  000025                     ?i2_checkV:
  1527                           	opt stack 0
  1528  000025                     stopMoving@em:
  1529                           	opt stack 0
  1530  000025                     showInfo@sorted:
  1531                           	opt stack 0
  1532  000025                     i2checkV@threshhold:
  1533                           	opt stack 0
  1534                           
  1535                           ; 2 bytes @ 0x24
  1536  000025                     	ds	2
  1537  000027                     ??_showInfo:
  1538  000027                     i2checkV@channel:
  1539                           	opt stack 0
  1540                           
  1541                           ; 1 bytes @ 0x26
  1542  000027                     	ds	1
  1543  000028                     i2checkV@voltage:
  1544                           	opt stack 0
  1545                           
  1546                           ; 2 bytes @ 0x27
  1547  000028                     	ds	2
  1548  00002A                     ?i2_checkAA:
  1549                           	opt stack 0
  1550  00002A                     ?i2_checkC:
  1551                           	opt stack 0
  1552  00002A                     ?i2_check9:
  1553                           	opt stack 0
  1554  00002A                     i2checkAA@sorted:
  1555                           	opt stack 0
  1556  00002A                     i2checkC@sorted:
  1557                           	opt stack 0
  1558  00002A                     i2check9@sorted:
  1559                           	opt stack 0
  1560                           
  1561                           ; 2 bytes @ 0x29
  1562  00002A                     	ds	2
  1563  00002C                     ??i2_checkAA:
  1564  00002C                     ??i2_checkC:
  1565  00002C                     ??i2_check9:
  1566  00002C                     showInfo@type:
  1567                           	opt stack 0
  1568                           
  1569                           ; 2 bytes @ 0x2B
  1570  00002C                     	ds	2
  1571  00002E                     showInfo@stop:
  1572                           	opt stack 0
  1573  00002E                     i2checkAA@V:
  1574                           	opt stack 0
  1575  00002E                     i2checkC@V:
  1576                           	opt stack 0
  1577  00002E                     i2check9@V:
  1578                           	opt stack 0
  1579                           
  1580                           ; 2 bytes @ 0x2D
  1581  00002E                     	ds	2
  1582  000030                     ??_PermLog:
  1583  000030                     ??_simulate:
  1584                           
  1585                           ; 1 bytes @ 0x2F
  1586  000030                     	ds	2
  1587  000032                     simulate@stop:
  1588                           	opt stack 0
  1589  000032                     PermLog@sorted:
  1590                           	opt stack 0
  1591                           
  1592                           ; 4 bytes @ 0x31
  1593  000032                     	ds	2
  1594  000034                     _simulate$1556:
  1595                           	opt stack 0
  1596                           
  1597                           ; 2 bytes @ 0x33
  1598  000034                     	ds	2
  1599  000036                     PermLog@goback:
  1600                           	opt stack 0
  1601  000036                     simulate@portCW:
  1602                           	opt stack 0
  1603                           
  1604                           ; 6 bytes @ 0x35
  1605  000036                     	ds	1
  1606  000037                     PermLog@time:
  1607                           	opt stack 0
  1608                           
  1609                           ; 2 bytes @ 0x36
  1610  000037                     	ds	2
  1611  000039                     PermLog@backruns:
  1612                           	opt stack 0
  1613                           
  1614                           ; 1 bytes @ 0x38
  1615  000039                     	ds	3
  1616  00003C                     simulate@portCCW:
  1617                           	opt stack 0
  1618                           
  1619                           ; 6 bytes @ 0x3B
  1620  00003C                     	ds	6
  1621  000042                     simulate@now:
  1622                           	opt stack 0
  1623                           
  1624                           ; 4 bytes @ 0x41
  1625  000042                     	ds	4
  1626  000046                     simulate@start:
  1627                           	opt stack 0
  1628                           
  1629                           ; 4 bytes @ 0x45
  1630  000046                     	ds	4
  1631  00004A                     simulate@AA:
  1632                           	opt stack 0
  1633                           
  1634                           ; 2 bytes @ 0x49
  1635  00004A                     	ds	2
  1636  00004C                     simulate@C:
  1637                           	opt stack 0
  1638                           
  1639                           ; 2 bytes @ 0x4B
  1640  00004C                     	ds	2
  1641  00004E                     simulate@V9:
  1642                           	opt stack 0
  1643                           
  1644                           ; 2 bytes @ 0x4D
  1645  00004E                     	ds	2
  1646  000050                     simulate@period:
  1647                           	opt stack 0
  1648                           
  1649                           ; 2 bytes @ 0x4F
  1650  000050                     	ds	2
  1651  000052                     simulate@sorted:
  1652                           	opt stack 0
  1653                           
  1654                           ; 4 bytes @ 0x51
  1655  000052                     	ds	4
  1656  000056                     ??_intrpt:
  1657                           
  1658                           ; 1 bytes @ 0x55
  1659  000056                     	ds	16
  1660  000066                     intrpt@keypress:
  1661                           	opt stack 0
  1662                           
  1663                           ; 1 bytes @ 0x65
  1664  000066                     	ds	1
  1665  000067                     intrpt@portCW:
  1666                           	opt stack 0
  1667                           
  1668                           ; 6 bytes @ 0x66
  1669  000067                     	ds	6
  1670                           tblptru	equ	0xFF8
  1671                           postinc0	equ	0xFEE
  1672                           wreg	equ	0xFE8
  1673                           
  1674 ;;
  1675 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1676 ;;
  1677 ;; *************** function _main *****************
  1678 ;; Defined at:
  1679 ;;		line 252 in file "main.c"
  1680 ;; Parameters:    Size  Location     Type
  1681 ;;		None
  1682 ;; Auto vars:     Size  Location     Type
  1683 ;;		None
  1684 ;; Return value:  Size  Location     Type
  1685 ;;                  2  167[None  ] int 
  1686 ;; Registers used:
  1687 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1688 ;; Tracked objects:
  1689 ;;		On entry : 0/0
  1690 ;;		On exit  : 0/0
  1691 ;;		Unchanged: 0/0
  1692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1694 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1695 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1696 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1697 ;;Total ram usage:        2 bytes
  1698 ;; Hardware stack levels required when called:   13
  1699 ;; This function calls:
  1700 ;;		_initialize
  1701 ;;		_lcdInst
  1702 ;;		_printf
  1703 ;;		_showRTC
  1704 ;;		_testAD
  1705 ;; This function is called by:
  1706 ;;		Startup code after reset
  1707 ;; This function uses a non-reentrant model
  1708 ;;
  1709                           
  1710                           	psect	text0
  1711  00246C                     __ptext0:
  1712                           	opt stack 0
  1713  00246C                     _main:
  1714                           	opt stack 18
  1715                           
  1716                           ;main.c: 253: initialize();
  1717                           
  1718                           ; BSR set to: 0
  1719                           ;incstack = 0
  1720  00246C  EC6F  F011         	call	_initialize	;wreg free
  1721                           
  1722                           ;main.c: 255: lcdInst(0b10000000);
  1723  002470  0E80               	movlw	128
  1724  002472  EC34  F014         	call	_lcdInst
  1725                           
  1726                           ;main.c: 256: printf("Welcome!          ");
  1727  002476  0E4A               	movlw	low STR_20
  1728  002478  0100               	movlb	0	; () banked
  1729  00247A  6F8C               	movwf	printf@f& (0+255),b
  1730  00247C  0EFF               	movlw	high STR_20
  1731  00247E  0100               	movlb	0	; () banked
  1732  002480  6F8D               	movwf	(printf@f+1)& (0+255),b
  1733  002482  EC09  F000         	call	_printf	;wreg free
  1734                           
  1735                           ;main.c: 258: _delay((unsigned long)((500)*(8000000/4000.0)));
  1736  002486  0E06               	movlw	6
  1737  002488  0100               	movlb	0	; () banked
  1738  00248A  6FBC               	movwf	(??_main+1)& (0+255),b
  1739  00248C  0E13               	movlw	19
  1740  00248E  0100               	movlb	0	; () banked
  1741  002490  6FBB               	movwf	??_main& (0+255),b
  1742  002492  0EAD               	movlw	173
  1743  002494                     u3597:
  1744  002494  2EE8               	decfsz	wreg,f,c
  1745  002496  D7FE               	bra	u3597
  1746  002498  2FBB               	decfsz	??_main& (0+255),f,b
  1747  00249A  D7FC               	bra	u3597
  1748  00249C  2FBC               	decfsz	(??_main+1)& (0+255),f,b
  1749  00249E  D7FA               	bra	u3597
  1750  0024A0  D000               	nop2	
  1751  0024A2                     l4631:
  1752  0024A2  ECD6  F00C         	call	_testAD	;wreg free
  1753  0024A6  D7FD               	goto	l4631
  1754  0024A8                     l4635:
  1755  0024A8  ECB7  F00D         	call	_showRTC	;wreg free
  1756  0024AC  D7FD               	goto	l4635
  1757  0024AE  00FF               	reset		;# 
  1758  0024B0                     __end_of_main:
  1759                           	opt stack 0
  1760                           tblptru	equ	0xFF8
  1761                           postinc0	equ	0xFEE
  1762                           wreg	equ	0xFE8
  1763                           
  1764 ;; *************** function _testAD *****************
  1765 ;; Defined at:
  1766 ;;		line 245 in file "main.c"
  1767 ;; Parameters:    Size  Location     Type
  1768 ;;		None
  1769 ;; Auto vars:     Size  Location     Type
  1770 ;;  sorted          4   55[BANK0 ] unsigned char [4]
  1771 ;; Return value:  Size  Location     Type
  1772 ;;                  1    wreg      void 
  1773 ;; Registers used:
  1774 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1775 ;; Tracked objects:
  1776 ;;		On entry : 0/0
  1777 ;;		On exit  : 0/0
  1778 ;;		Unchanged: 0/0
  1779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1781 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1782 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1783 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1784 ;;Total ram usage:       12 bytes
  1785 ;; Hardware stack levels used:    1
  1786 ;; Hardware stack levels required when called:   12
  1787 ;; This function calls:
  1788 ;;		_check9
  1789 ;;		_checkAA
  1790 ;;		_checkC
  1791 ;;		_lcdInst
  1792 ;;		_printf
  1793 ;; This function is called by:
  1794 ;;		_main
  1795 ;; This function uses a non-reentrant model
  1796 ;;
  1797                           
  1798                           	psect	text1
  1799  0019AC                     __ptext1:
  1800                           	opt stack 0
  1801  0019AC                     _testAD:
  1802                           	opt stack 18
  1803                           
  1804                           ;main.c: 246: unsigned char sorted[] = {0, 0, 0, 0};
  1805                           
  1806                           ;incstack = 0
  1807  0019AC  C0D3  F0B7         	movff	testAD@F3118,testAD@sorted
  1808  0019B0  C0D4  F0B8         	movff	testAD@F3118+1,testAD@sorted+1
  1809  0019B4  C0D5  F0B9         	movff	testAD@F3118+2,testAD@sorted+2
  1810  0019B8  C0D6  F0BA         	movff	testAD@F3118+3,testAD@sorted+3
  1811                           
  1812                           ;main.c: 247: lcdInst(0b10000000);
  1813  0019BC  0E80               	movlw	128
  1814  0019BE  EC34  F014         	call	_lcdInst
  1815                           
  1816                           ;main.c: 248: printf("A %d,C %d,9 %d   ", checkAA(sorted), checkC(sorted), check9(sorted
      +                          ));
  1817  0019C2  0EB7               	movlw	low testAD@sorted
  1818  0019C4  0100               	movlb	0	; () banked
  1819  0019C6  6FA9               	movwf	checkAA@sorted& (0+255),b
  1820  0019C8  0E00               	movlw	high testAD@sorted
  1821  0019CA  0100               	movlb	0	; () banked
  1822  0019CC  6FAA               	movwf	(checkAA@sorted+1)& (0+255),b
  1823  0019CE  EC07  F00F         	call	_checkAA	;wreg free
  1824  0019D2  C0A9  F0B1         	movff	?_checkAA,_testAD$1395
  1825  0019D6  C0AA  F0B2         	movff	?_checkAA+1,_testAD$1395+1
  1826                           
  1827                           ;main.c: 248: printf("A %d,C %d,9 %d   ", checkAA(sorted), checkC(sorted), check9(sorted
      +                          ));
  1828  0019DA  0EB7               	movlw	low testAD@sorted
  1829  0019DC  0100               	movlb	0	; () banked
  1830  0019DE  6FA9               	movwf	checkC@sorted& (0+255),b
  1831  0019E0  0E00               	movlw	high testAD@sorted
  1832  0019E2  0100               	movlb	0	; () banked
  1833  0019E4  6FAA               	movwf	(checkC@sorted+1)& (0+255),b
  1834  0019E6  EC41  F00E         	call	_checkC	;wreg free
  1835  0019EA  C0A9  F0B3         	movff	?_checkC,_testAD$1396
  1836  0019EE  C0AA  F0B4         	movff	?_checkC+1,_testAD$1396+1
  1837                           
  1838                           ;main.c: 248: printf("A %d,C %d,9 %d   ", checkAA(sorted), checkC(sorted), check9(sorted
      +                          ));
  1839  0019F2  0EB7               	movlw	low testAD@sorted
  1840  0019F4  0100               	movlb	0	; () banked
  1841  0019F6  6FA9               	movwf	check9@sorted& (0+255),b
  1842  0019F8  0E00               	movlw	high testAD@sorted
  1843  0019FA  0100               	movlb	0	; () banked
  1844  0019FC  6FAA               	movwf	(check9@sorted+1)& (0+255),b
  1845  0019FE  EC83  F00E         	call	_check9	;wreg free
  1846  001A02  C0A9  F0B5         	movff	?_check9,_testAD$1397
  1847  001A06  C0AA  F0B6         	movff	?_check9+1,_testAD$1397+1
  1848                           
  1849                           ;main.c: 248: printf("A %d,C %d,9 %d   ", checkAA(sorted), checkC(sorted), check9(sorted
      +                          ));
  1850  001A0A  0E81               	movlw	low STR_19
  1851  001A0C  0100               	movlb	0	; () banked
  1852  001A0E  6F8C               	movwf	printf@f& (0+255),b
  1853  001A10  0EFF               	movlw	high STR_19
  1854  001A12  0100               	movlb	0	; () banked
  1855  001A14  6F8D               	movwf	(printf@f+1)& (0+255),b
  1856  001A16  C0B1  F08E         	movff	_testAD$1395,?_printf+2
  1857  001A1A  C0B2  F08F         	movff	_testAD$1395+1,?_printf+3
  1858  001A1E  C0B3  F090         	movff	_testAD$1396,?_printf+4
  1859  001A22  C0B4  F091         	movff	_testAD$1396+1,?_printf+5
  1860  001A26  C0B5  F092         	movff	_testAD$1397,?_printf+6
  1861  001A2A  C0B6  F093         	movff	_testAD$1397+1,?_printf+7
  1862  001A2E  EC09  F000         	call	_printf	;wreg free
  1863                           
  1864                           ;main.c: 249: _delay((unsigned long)((100)*(8000000/4000.0)));
  1865  001A32  0E02               	movlw	2
  1866  001A34  0100               	movlb	0	; () banked
  1867  001A36  6FB0               	movwf	(??_testAD+1)& (0+255),b
  1868  001A38  0E04               	movlw	4
  1869  001A3A  0100               	movlb	0	; () banked
  1870  001A3C  6FAF               	movwf	??_testAD& (0+255),b
  1871  001A3E  0EBA               	movlw	186
  1872  001A40                     u3607:
  1873  001A40  2EE8               	decfsz	wreg,f,c
  1874  001A42  D7FE               	bra	u3607
  1875  001A44  2FAF               	decfsz	??_testAD& (0+255),f,b
  1876  001A46  D7FC               	bra	u3607
  1877  001A48  2FB0               	decfsz	(??_testAD+1)& (0+255),f,b
  1878  001A4A  D7FA               	bra	u3607
  1879  001A4C  F000               	nop	
  1880  001A4E  0012               	return		;funcret
  1881  001A50                     __end_of_testAD:
  1882                           	opt stack 0
  1883                           tblptru	equ	0xFF8
  1884                           postinc0	equ	0xFEE
  1885                           wreg	equ	0xFE8
  1886                           
  1887 ;; *************** function _checkC *****************
  1888 ;; Defined at:
  1889 ;;		line 46 in file "sensors.c"
  1890 ;; Parameters:    Size  Location     Type
  1891 ;;  sorted          2   41[BANK0 ] PTR unsigned char 
  1892 ;;		 -> testAD@sorted(4), simulate@sorted(4), 
  1893 ;; Auto vars:     Size  Location     Type
  1894 ;;  V               2   45[BANK0 ] int 
  1895 ;; Return value:  Size  Location     Type
  1896 ;;                  2   41[BANK0 ] int 
  1897 ;; Registers used:
  1898 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1899 ;; Tracked objects:
  1900 ;;		On entry : 0/0
  1901 ;;		On exit  : 0/0
  1902 ;;		Unchanged: 0/0
  1903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1904 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1905 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1906 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1907 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1908 ;;Total ram usage:        6 bytes
  1909 ;; Hardware stack levels used:    1
  1910 ;; Hardware stack levels required when called:   11
  1911 ;; This function calls:
  1912 ;;		_checkV
  1913 ;;		_printV
  1914 ;;		_printf
  1915 ;; This function is called by:
  1916 ;;		_testAD
  1917 ;; This function uses a non-reentrant model
  1918 ;;
  1919                           
  1920                           	psect	text2
  1921  001C82                     __ptext2:
  1922                           	opt stack 0
  1923  001C82                     _checkC:
  1924                           	opt stack 18
  1925                           
  1926                           ;sensors.c: 49: printf("C:");
  1927                           
  1928                           ;incstack = 0
  1929  001C82  0EEE               	movlw	low (STR_8+1)
  1930  001C84  0100               	movlb	0	; () banked
  1931  001C86  6F8C               	movwf	printf@f& (0+255),b
  1932  001C88  0EFF               	movlw	high (STR_8+1)
  1933  001C8A  0100               	movlb	0	; () banked
  1934  001C8C  6F8D               	movwf	(printf@f+1)& (0+255),b
  1935  001C8E  EC09  F000         	call	_printf	;wreg free
  1936                           
  1937                           ;sensors.c: 50: int V = checkV(0, 1.5 / 5 * 1023);
  1938  001C92  0E01               	movlw	1
  1939  001C94  0100               	movlb	0	; () banked
  1940  001C96  6FA5               	movwf	(checkV@threshhold+1)& (0+255),b
  1941  001C98  0E32               	movlw	50
  1942  001C9A  6FA4               	movwf	checkV@threshhold& (0+255),b
  1943  001C9C  0E00               	movlw	0
  1944  001C9E  EC83  F00C         	call	_checkV
  1945  001CA2  C0A4  F0AD         	movff	?_checkV,checkC@V
  1946  001CA6  C0A5  F0AE         	movff	?_checkV+1,checkC@V+1
  1947                           
  1948                           ;sensors.c: 51: printV(V);
  1949  001CAA  C0AD  F0A6         	movff	checkC@V,printV@charged
  1950  001CAE  C0AE  F0A7         	movff	checkC@V+1,printV@charged+1
  1951  001CB2  EC0B  F013         	call	_printV	;wreg free
  1952                           
  1953                           ;sensors.c: 52: switch (V) {
  1954  001CB6  D011               	goto	l4075
  1955  001CB8                     l4073:
  1956                           
  1957                           ;sensors.c: 54: sorted[1]++;
  1958  001CB8  0100               	movlb	0	; () banked
  1959  001CBA  EE20 F001          	lfsr	2,1
  1960  001CBE  51A9               	movf	checkC@sorted& (0+255),w,b
  1961  001CC0  26D9               	addwf	fsr2l,f,c
  1962  001CC2  51AA               	movf	(checkC@sorted+1)& (0+255),w,b
  1963  001CC4  22DA               	addwfc	fsr2h,f,c
  1964  001CC6  2ADF               	incf	indf2,f,c
  1965  001CC8                     l330:
  1966                           
  1967                           ; BSR set to: 0
  1968                           ;sensors.c: 56: sorted[3]++;
  1969  001CC8  0100               	movlb	0	; () banked
  1970  001CCA  EE20 F003          	lfsr	2,3
  1971  001CCE  51A9               	movf	checkC@sorted& (0+255),w,b
  1972  001CD0  26D9               	addwf	fsr2l,f,c
  1973  001CD2  51AA               	movf	(checkC@sorted+1)& (0+255),w,b
  1974  001CD4  22DA               	addwfc	fsr2h,f,c
  1975  001CD6  2ADF               	incf	indf2,f,c
  1976                           
  1977                           ;sensors.c: 57: }
  1978  001CD8  D011               	goto	l331
  1979  001CDA                     l4075:
  1980  001CDA  C0AD  F0AB         	movff	checkC@V,??_checkC
  1981  001CDE  C0AE  F0AC         	movff	checkC@V+1,??_checkC+1
  1982                           
  1983                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1984                           ; Switch size 1, requested type "space"
  1985                           ; Number of cases is 1, Range of values is 0 to 0
  1986                           ; switch strategies available:
  1987                           ; Name         Instructions Cycles
  1988                           ; simple_byte            4     3 (average)
  1989                           ;	Chosen strategy is simple_byte
  1990  001CE2  0100               	movlb	0	; () banked
  1991  001CE4  51AC               	movf	(??_checkC+1)& (0+255),w,b
  1992  001CE6  0A00               	xorlw	0	; case 0
  1993  001CE8  A4D8               	btfss	status,2,c
  1994  001CEA  D008               	goto	l331
  1995                           
  1996                           ; BSR set to: 0
  1997                           ; Switch size 1, requested type "space"
  1998                           ; Number of cases is 2, Range of values is 0 to 1
  1999                           ; switch strategies available:
  2000                           ; Name         Instructions Cycles
  2001                           ; simple_byte            7     4 (average)
  2002                           ;	Chosen strategy is simple_byte
  2003  001CEC  0100               	movlb	0	; () banked
  2004  001CEE  51AB               	movf	??_checkC& (0+255),w,b
  2005  001CF0  0A00               	xorlw	0	; case 0
  2006  001CF2  B4D8               	btfsc	status,2,c
  2007  001CF4  D7E9               	goto	l330
  2008  001CF6  0A01               	xorlw	1	; case 1
  2009  001CF8  B4D8               	btfsc	status,2,c
  2010  001CFA  D7DE               	goto	l4073
  2011  001CFC                     l331:
  2012                           
  2013                           ; BSR set to: 0
  2014                           ;sensors.c: 58: return V;
  2015  001CFC  C0AD  F0A9         	movff	checkC@V,?_checkC
  2016  001D00  C0AE  F0AA         	movff	checkC@V+1,?_checkC+1
  2017                           
  2018                           ; BSR set to: 0
  2019  001D04  0012               	return		;funcret
  2020  001D06                     __end_of_checkC:
  2021                           	opt stack 0
  2022                           tblptru	equ	0xFF8
  2023                           postinc0	equ	0xFEE
  2024                           wreg	equ	0xFE8
  2025                           indf2	equ	0xFDF
  2026                           fsr2h	equ	0xFDA
  2027                           fsr2l	equ	0xFD9
  2028                           status	equ	0xFD8
  2029                           
  2030 ;; *************** function _checkAA *****************
  2031 ;; Defined at:
  2032 ;;		line 32 in file "sensors.c"
  2033 ;; Parameters:    Size  Location     Type
  2034 ;;  sorted          2   41[BANK0 ] PTR unsigned char 
  2035 ;;		 -> testAD@sorted(4), simulate@sorted(4), 
  2036 ;; Auto vars:     Size  Location     Type
  2037 ;;  V               2   45[BANK0 ] int 
  2038 ;; Return value:  Size  Location     Type
  2039 ;;                  2   41[BANK0 ] int 
  2040 ;; Registers used:
  2041 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2042 ;; Tracked objects:
  2043 ;;		On entry : 0/0
  2044 ;;		On exit  : 0/0
  2045 ;;		Unchanged: 0/0
  2046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2047 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2048 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2049 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2050 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2051 ;;Total ram usage:        6 bytes
  2052 ;; Hardware stack levels used:    1
  2053 ;; Hardware stack levels required when called:   11
  2054 ;; This function calls:
  2055 ;;		_checkV
  2056 ;;		_printV
  2057 ;;		_printf
  2058 ;; This function is called by:
  2059 ;;		_testAD
  2060 ;; This function uses a non-reentrant model
  2061 ;;
  2062                           
  2063                           	psect	text3
  2064  001E0E                     __ptext3:
  2065                           	opt stack 0
  2066  001E0E                     _checkAA:
  2067                           	opt stack 18
  2068                           
  2069                           ;sensors.c: 33: printf("AA:");
  2070                           
  2071                           ; BSR set to: 0
  2072                           ;incstack = 0
  2073  001E0E  0EE5               	movlw	low (STR_12+1)
  2074  001E10  0100               	movlb	0	; () banked
  2075  001E12  6F8C               	movwf	printf@f& (0+255),b
  2076  001E14  0EFF               	movlw	high (STR_12+1)
  2077  001E16  0100               	movlb	0	; () banked
  2078  001E18  6F8D               	movwf	(printf@f+1)& (0+255),b
  2079  001E1A  EC09  F000         	call	_printf	;wreg free
  2080                           
  2081                           ;sensors.c: 35: int V = checkV(2, 1.5 / 5 * 1023);
  2082  001E1E  0E01               	movlw	1
  2083  001E20  0100               	movlb	0	; () banked
  2084  001E22  6FA5               	movwf	(checkV@threshhold+1)& (0+255),b
  2085  001E24  0E32               	movlw	50
  2086  001E26  6FA4               	movwf	checkV@threshhold& (0+255),b
  2087  001E28  0E02               	movlw	2
  2088  001E2A  EC83  F00C         	call	_checkV
  2089  001E2E  C0A4  F0AD         	movff	?_checkV,checkAA@V
  2090  001E32  C0A5  F0AE         	movff	?_checkV+1,checkAA@V+1
  2091                           
  2092                           ;sensors.c: 36: printV(V);
  2093  001E36  C0AD  F0A6         	movff	checkAA@V,printV@charged
  2094  001E3A  C0AE  F0A7         	movff	checkAA@V+1,printV@charged+1
  2095  001E3E  EC0B  F013         	call	_printV	;wreg free
  2096                           
  2097                           ;sensors.c: 37: switch (V) {
  2098  001E42  D00E               	goto	l4091
  2099  001E44                     l4087:
  2100                           
  2101                           ;sensors.c: 39: sorted[0]++;
  2102  001E44  C0A9  FFD9         	movff	checkAA@sorted,fsr2l
  2103  001E48  C0AA  FFDA         	movff	checkAA@sorted+1,fsr2h
  2104  001E4C  2ADF               	incf	indf2,f,c
  2105  001E4E                     l4089:
  2106                           
  2107                           ;sensors.c: 41: sorted[3]++;
  2108  001E4E  0100               	movlb	0	; () banked
  2109  001E50  EE20 F003          	lfsr	2,3
  2110  001E54  51A9               	movf	checkAA@sorted& (0+255),w,b
  2111  001E56  26D9               	addwf	fsr2l,f,c
  2112  001E58  51AA               	movf	(checkAA@sorted+1)& (0+255),w,b
  2113  001E5A  22DA               	addwfc	fsr2h,f,c
  2114  001E5C  2ADF               	incf	indf2,f,c
  2115                           
  2116                           ;sensors.c: 42: }
  2117  001E5E  D011               	goto	l324
  2118  001E60                     l4091:
  2119  001E60  C0AD  F0AB         	movff	checkAA@V,??_checkAA
  2120  001E64  C0AE  F0AC         	movff	checkAA@V+1,??_checkAA+1
  2121                           
  2122                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2123                           ; Switch size 1, requested type "space"
  2124                           ; Number of cases is 1, Range of values is 0 to 0
  2125                           ; switch strategies available:
  2126                           ; Name         Instructions Cycles
  2127                           ; simple_byte            4     3 (average)
  2128                           ;	Chosen strategy is simple_byte
  2129  001E68  0100               	movlb	0	; () banked
  2130  001E6A  51AC               	movf	(??_checkAA+1)& (0+255),w,b
  2131  001E6C  0A00               	xorlw	0	; case 0
  2132  001E6E  A4D8               	btfss	status,2,c
  2133  001E70  D008               	goto	l324
  2134                           
  2135                           ; BSR set to: 0
  2136                           ; Switch size 1, requested type "space"
  2137                           ; Number of cases is 2, Range of values is 0 to 1
  2138                           ; switch strategies available:
  2139                           ; Name         Instructions Cycles
  2140                           ; simple_byte            7     4 (average)
  2141                           ;	Chosen strategy is simple_byte
  2142  001E72  0100               	movlb	0	; () banked
  2143  001E74  51AB               	movf	??_checkAA& (0+255),w,b
  2144  001E76  0A00               	xorlw	0	; case 0
  2145  001E78  B4D8               	btfsc	status,2,c
  2146  001E7A  D7E9               	goto	l4089
  2147  001E7C  0A01               	xorlw	1	; case 1
  2148  001E7E  B4D8               	btfsc	status,2,c
  2149  001E80  D7E1               	goto	l4087
  2150  001E82                     l324:
  2151                           
  2152                           ; BSR set to: 0
  2153                           ;sensors.c: 43: return V;
  2154  001E82  C0AD  F0A9         	movff	checkAA@V,?_checkAA
  2155  001E86  C0AE  F0AA         	movff	checkAA@V+1,?_checkAA+1
  2156                           
  2157                           ; BSR set to: 0
  2158  001E8A  0012               	return		;funcret
  2159  001E8C                     __end_of_checkAA:
  2160                           	opt stack 0
  2161                           tblptru	equ	0xFF8
  2162                           postinc0	equ	0xFEE
  2163                           wreg	equ	0xFE8
  2164                           indf2	equ	0xFDF
  2165                           fsr2h	equ	0xFDA
  2166                           fsr2l	equ	0xFD9
  2167                           status	equ	0xFD8
  2168                           
  2169 ;; *************** function _check9 *****************
  2170 ;; Defined at:
  2171 ;;		line 61 in file "sensors.c"
  2172 ;; Parameters:    Size  Location     Type
  2173 ;;  sorted          2   41[BANK0 ] PTR unsigned char 
  2174 ;;		 -> testAD@sorted(4), simulate@sorted(4), 
  2175 ;; Auto vars:     Size  Location     Type
  2176 ;;  V               2   45[BANK0 ] int 
  2177 ;; Return value:  Size  Location     Type
  2178 ;;                  2   41[BANK0 ] int 
  2179 ;; Registers used:
  2180 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2181 ;; Tracked objects:
  2182 ;;		On entry : 0/0
  2183 ;;		On exit  : 0/0
  2184 ;;		Unchanged: 0/0
  2185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2186 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2187 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2188 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2189 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2190 ;;Total ram usage:        6 bytes
  2191 ;; Hardware stack levels used:    1
  2192 ;; Hardware stack levels required when called:   11
  2193 ;; This function calls:
  2194 ;;		_checkV
  2195 ;;		_printV
  2196 ;;		_printf
  2197 ;; This function is called by:
  2198 ;;		_testAD
  2199 ;; This function uses a non-reentrant model
  2200 ;;
  2201                           
  2202                           	psect	text4
  2203  001D06                     __ptext4:
  2204                           	opt stack 0
  2205  001D06                     _check9:
  2206                           	opt stack 18
  2207                           
  2208                           ;sensors.c: 64: printf("9V:");
  2209                           
  2210                           ; BSR set to: 0
  2211                           ;incstack = 0
  2212  001D06  0EF1               	movlw	low STR_4
  2213  001D08  0100               	movlb	0	; () banked
  2214  001D0A  6F8C               	movwf	printf@f& (0+255),b
  2215  001D0C  0EFF               	movlw	high STR_4
  2216  001D0E  0100               	movlb	0	; () banked
  2217  001D10  6F8D               	movwf	(printf@f+1)& (0+255),b
  2218  001D12  EC09  F000         	call	_printf	;wreg free
  2219                           
  2220                           ;sensors.c: 65: int V = checkV(5, 3.65 / 5 * 1023);
  2221  001D16  0E02               	movlw	2
  2222  001D18  0100               	movlb	0	; () banked
  2223  001D1A  6FA5               	movwf	(checkV@threshhold+1)& (0+255),b
  2224  001D1C  0EEA               	movlw	234
  2225  001D1E  6FA4               	movwf	checkV@threshhold& (0+255),b
  2226  001D20  0E05               	movlw	5
  2227  001D22  EC83  F00C         	call	_checkV
  2228  001D26  C0A4  F0AD         	movff	?_checkV,check9@V
  2229  001D2A  C0A5  F0AE         	movff	?_checkV+1,check9@V+1
  2230                           
  2231                           ;sensors.c: 66: printV(V);
  2232  001D2E  C0AD  F0A6         	movff	check9@V,printV@charged
  2233  001D32  C0AE  F0A7         	movff	check9@V+1,printV@charged+1
  2234  001D36  EC0B  F013         	call	_printV	;wreg free
  2235                           
  2236                           ;sensors.c: 67: switch (V) {
  2237  001D3A  D011               	goto	l4061
  2238  001D3C                     l4059:
  2239                           
  2240                           ;sensors.c: 69: sorted[2]++;
  2241  001D3C  0100               	movlb	0	; () banked
  2242  001D3E  EE20 F002          	lfsr	2,2
  2243  001D42  51A9               	movf	check9@sorted& (0+255),w,b
  2244  001D44  26D9               	addwf	fsr2l,f,c
  2245  001D46  51AA               	movf	(check9@sorted+1)& (0+255),w,b
  2246  001D48  22DA               	addwfc	fsr2h,f,c
  2247  001D4A  2ADF               	incf	indf2,f,c
  2248  001D4C                     l337:
  2249                           
  2250                           ; BSR set to: 0
  2251                           ;sensors.c: 71: sorted[3]++;
  2252  001D4C  0100               	movlb	0	; () banked
  2253  001D4E  EE20 F003          	lfsr	2,3
  2254  001D52  51A9               	movf	check9@sorted& (0+255),w,b
  2255  001D54  26D9               	addwf	fsr2l,f,c
  2256  001D56  51AA               	movf	(check9@sorted+1)& (0+255),w,b
  2257  001D58  22DA               	addwfc	fsr2h,f,c
  2258  001D5A  2ADF               	incf	indf2,f,c
  2259                           
  2260                           ;sensors.c: 72: }
  2261  001D5C  D011               	goto	l338
  2262  001D5E                     l4061:
  2263  001D5E  C0AD  F0AB         	movff	check9@V,??_check9
  2264  001D62  C0AE  F0AC         	movff	check9@V+1,??_check9+1
  2265                           
  2266                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2267                           ; Switch size 1, requested type "space"
  2268                           ; Number of cases is 1, Range of values is 0 to 0
  2269                           ; switch strategies available:
  2270                           ; Name         Instructions Cycles
  2271                           ; simple_byte            4     3 (average)
  2272                           ;	Chosen strategy is simple_byte
  2273  001D66  0100               	movlb	0	; () banked
  2274  001D68  51AC               	movf	(??_check9+1)& (0+255),w,b
  2275  001D6A  0A00               	xorlw	0	; case 0
  2276  001D6C  A4D8               	btfss	status,2,c
  2277  001D6E  D008               	goto	l338
  2278                           
  2279                           ; BSR set to: 0
  2280                           ; Switch size 1, requested type "space"
  2281                           ; Number of cases is 2, Range of values is 0 to 1
  2282                           ; switch strategies available:
  2283                           ; Name         Instructions Cycles
  2284                           ; simple_byte            7     4 (average)
  2285                           ;	Chosen strategy is simple_byte
  2286  001D70  0100               	movlb	0	; () banked
  2287  001D72  51AB               	movf	??_check9& (0+255),w,b
  2288  001D74  0A00               	xorlw	0	; case 0
  2289  001D76  B4D8               	btfsc	status,2,c
  2290  001D78  D7E9               	goto	l337
  2291  001D7A  0A01               	xorlw	1	; case 1
  2292  001D7C  B4D8               	btfsc	status,2,c
  2293  001D7E  D7DE               	goto	l4059
  2294  001D80                     l338:
  2295                           
  2296                           ; BSR set to: 0
  2297                           ;sensors.c: 73: return V;
  2298  001D80  C0AD  F0A9         	movff	check9@V,?_check9
  2299  001D84  C0AE  F0AA         	movff	check9@V+1,?_check9+1
  2300                           
  2301                           ; BSR set to: 0
  2302  001D88  0012               	return		;funcret
  2303  001D8A                     __end_of_check9:
  2304                           	opt stack 0
  2305                           tblptru	equ	0xFF8
  2306                           postinc0	equ	0xFEE
  2307                           wreg	equ	0xFE8
  2308                           indf2	equ	0xFDF
  2309                           fsr2h	equ	0xFDA
  2310                           fsr2l	equ	0xFD9
  2311                           status	equ	0xFD8
  2312                           
  2313 ;; *************** function _printV *****************
  2314 ;; Defined at:
  2315 ;;		line 21 in file "sensors.c"
  2316 ;; Parameters:    Size  Location     Type
  2317 ;;  charged         2   38[BANK0 ] int 
  2318 ;; Auto vars:     Size  Location     Type
  2319 ;;		None
  2320 ;; Return value:  Size  Location     Type
  2321 ;;                  1    wreg      void 
  2322 ;; Registers used:
  2323 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2324 ;; Tracked objects:
  2325 ;;		On entry : 0/0
  2326 ;;		On exit  : 0/0
  2327 ;;		Unchanged: 0/0
  2328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2329 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2332 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2333 ;;Total ram usage:        2 bytes
  2334 ;; Hardware stack levels used:    1
  2335 ;; Hardware stack levels required when called:   10
  2336 ;; This function calls:
  2337 ;;		_printf
  2338 ;; This function is called by:
  2339 ;;		_checkAA
  2340 ;;		_checkC
  2341 ;;		_check9
  2342 ;; This function uses a non-reentrant model
  2343 ;;
  2344                           
  2345                           	psect	text5
  2346  002616                     __ptext5:
  2347                           	opt stack 0
  2348  002616                     _printV:
  2349                           	opt stack 18
  2350                           
  2351                           ;sensors.c: 24: if (charged < 0) {
  2352                           
  2353                           ; BSR set to: 0
  2354                           ;incstack = 0
  2355  002616  0100               	movlb	0	; () banked
  2356  002618  AFA7               	btfss	(printV@charged+1)& (0+255),7,b
  2357  00261A  D009               	goto	l3899
  2358                           
  2359                           ; BSR set to: 0
  2360                           ;sensors.c: 25: printf("-1 ");
  2361  00261C  0EE9               	movlw	low STR_37
  2362  00261E  0100               	movlb	0	; () banked
  2363  002620  6F8C               	movwf	printf@f& (0+255),b
  2364  002622  0EFF               	movlw	high STR_37
  2365  002624  0100               	movlb	0	; () banked
  2366  002626  6F8D               	movwf	(printf@f+1)& (0+255),b
  2367  002628  EC09  F000         	call	_printf	;wreg free
  2368                           
  2369                           ;sensors.c: 26: } else {
  2370  00262C  0012               	return	
  2371  00262E                     l3899:
  2372                           
  2373                           ;sensors.c: 27: printf(" %d ", charged);
  2374  00262E  0EDF               	movlw	low STR_38
  2375  002630  0100               	movlb	0	; () banked
  2376  002632  6F8C               	movwf	printf@f& (0+255),b
  2377  002634  0EFF               	movlw	high STR_38
  2378  002636  0100               	movlb	0	; () banked
  2379  002638  6F8D               	movwf	(printf@f+1)& (0+255),b
  2380  00263A  C0A6  F08E         	movff	printV@charged,?_printf+2
  2381  00263E  C0A7  F08F         	movff	printV@charged+1,?_printf+3
  2382  002642  EC09  F000         	call	_printf	;wreg free
  2383  002646  0012               	return	
  2384  002648                     __end_of_printV:
  2385                           	opt stack 0
  2386                           tblptru	equ	0xFF8
  2387                           postinc0	equ	0xFEE
  2388                           wreg	equ	0xFE8
  2389                           indf2	equ	0xFDF
  2390                           fsr2h	equ	0xFDA
  2391                           fsr2l	equ	0xFD9
  2392                           status	equ	0xFD8
  2393                           
  2394 ;; *************** function _checkV *****************
  2395 ;; Defined at:
  2396 ;;		line 13 in file "sensors.c"
  2397 ;; Parameters:    Size  Location     Type
  2398 ;;  channel         1    wreg     unsigned char 
  2399 ;;  threshhold      2   36[BANK0 ] int 
  2400 ;; Auto vars:     Size  Location     Type
  2401 ;;  channel         1   38[BANK0 ] unsigned char 
  2402 ;;  voltage         2   39[BANK0 ] int 
  2403 ;; Return value:  Size  Location     Type
  2404 ;;                  2   36[BANK0 ] int 
  2405 ;; Registers used:
  2406 ;;		wreg, status,2, status,0, cstack
  2407 ;; Tracked objects:
  2408 ;;		On entry : 0/0
  2409 ;;		On exit  : 0/0
  2410 ;;		Unchanged: 0/0
  2411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2412 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2413 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2415 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2416 ;;Total ram usage:        5 bytes
  2417 ;; Hardware stack levels used:    1
  2418 ;; Hardware stack levels required when called:    9
  2419 ;; This function calls:
  2420 ;;		_AD
  2421 ;;		___awtoft
  2422 ;;		___ftge
  2423 ;;		___ftmul
  2424 ;; This function is called by:
  2425 ;;		_checkAA
  2426 ;;		_checkC
  2427 ;;		_check9
  2428 ;; This function uses a non-reentrant model
  2429 ;;
  2430                           
  2431                           	psect	text6
  2432  001906                     __ptext6:
  2433                           	opt stack 0
  2434  001906                     _checkV:
  2435                           	opt stack 19
  2436                           
  2437                           ;incstack = 0
  2438                           ;checkV@channel stored from wreg
  2439  001906  0100               	movlb	0	; () banked
  2440  001908  6FA6               	movwf	checkV@channel& (0+255),b
  2441                           
  2442                           ;sensors.c: 15: int voltage = AD(channel);
  2443  00190A  0100               	movlb	0	; () banked
  2444  00190C  51A6               	movf	checkV@channel& (0+255),w,b
  2445  00190E  EC9B  F012         	call	_AD
  2446  001912  C080  F0A7         	movff	?_AD,checkV@voltage
  2447  001916  C081  F0A8         	movff	?_AD+1,checkV@voltage+1
  2448                           
  2449                           ;sensors.c: 16: if (voltage < 50) return -1;
  2450  00191A  0100               	movlb	0	; () banked
  2451  00191C  BFA8               	btfsc	(checkV@voltage+1)& (0+255),7,b
  2452  00191E  D008               	goto	l3883
  2453  001920  0100               	movlb	0	; () banked
  2454  001922  51A8               	movf	(checkV@voltage+1)& (0+255),w,b
  2455  001924  E109               	bnz	l3885
  2456  001926  0E32               	movlw	50
  2457  001928  0100               	movlb	0	; () banked
  2458  00192A  5DA7               	subwf	checkV@voltage& (0+255),w,b
  2459  00192C  B0D8               	btfsc	status,0,c
  2460  00192E  D004               	goto	l3885
  2461  001930                     l3883:
  2462                           
  2463                           ; BSR set to: 0
  2464  001930  0100               	movlb	0	; () banked
  2465  001932  69A4               	setf	?_checkV& (0+255),b
  2466  001934  69A5               	setf	(?_checkV+1)& (0+255),b
  2467  001936  0012               	return	
  2468  001938                     l3885:
  2469                           
  2470                           ; BSR set to: 0
  2471                           ;sensors.c: 17: if (voltage > 0.85 * threshhold) return 1;
  2472  001938  0E9A               	movlw	154
  2473  00193A  0100               	movlb	0	; () banked
  2474  00193C  6F8F               	movwf	___ftmul@f2& (0+255),b
  2475  00193E  0E59               	movlw	89
  2476  001940  0100               	movlb	0	; () banked
  2477  001942  6F90               	movwf	(___ftmul@f2+1)& (0+255),b
  2478  001944  0E3F               	movlw	63
  2479  001946  0100               	movlb	0	; () banked
  2480  001948  6F91               	movwf	(___ftmul@f2+2)& (0+255),b
  2481  00194A  C0A4  F088         	movff	checkV@threshhold,___awtoft@c
  2482  00194E  C0A5  F089         	movff	checkV@threshhold+1,___awtoft@c+1
  2483  001952  EC58  F012         	call	___awtoft	;wreg free
  2484  001956  C088  F08C         	movff	?___awtoft,___ftmul@f1
  2485  00195A  C089  F08D         	movff	?___awtoft+1,___ftmul@f1+1
  2486  00195E  C08A  F08E         	movff	?___awtoft+2,___ftmul@f1+2
  2487  001962  EC3D  F008         	call	___ftmul	;wreg free
  2488  001966  C08C  F09B         	movff	?___ftmul,___ftge@ff1
  2489  00196A  C08D  F09C         	movff	?___ftmul+1,___ftge@ff1+1
  2490  00196E  C08E  F09D         	movff	?___ftmul+2,___ftge@ff1+2
  2491  001972  C0A7  F088         	movff	checkV@voltage,___awtoft@c
  2492  001976  C0A8  F089         	movff	checkV@voltage+1,___awtoft@c+1
  2493  00197A  EC58  F012         	call	___awtoft	;wreg free
  2494  00197E  C088  F09E         	movff	?___awtoft,___ftge@ff2
  2495  001982  C089  F09F         	movff	?___awtoft+1,___ftge@ff2+1
  2496  001986  C08A  F0A0         	movff	?___awtoft+2,___ftge@ff2+2
  2497  00198A  EC6A  F00B         	call	___ftge	;wreg free
  2498  00198E  0100               	movlb	0	; () banked
  2499  001990  B0D8               	btfsc	status,0,c
  2500  001992  D006               	goto	l3891
  2501                           
  2502                           ; BSR set to: 0
  2503  001994  0E00               	movlw	0
  2504  001996  0100               	movlb	0	; () banked
  2505  001998  6FA5               	movwf	(?_checkV+1)& (0+255),b
  2506  00199A  0E01               	movlw	1
  2507  00199C  6FA4               	movwf	?_checkV& (0+255),b
  2508                           
  2509                           ; BSR set to: 0
  2510  00199E  0012               	return	
  2511  0019A0                     l3891:
  2512                           
  2513                           ; BSR set to: 0
  2514                           ;sensors.c: 18: return 0;
  2515  0019A0  0E00               	movlw	0
  2516  0019A2  0100               	movlb	0	; () banked
  2517  0019A4  6FA5               	movwf	(?_checkV+1)& (0+255),b
  2518  0019A6  0E00               	movlw	0
  2519  0019A8  6FA4               	movwf	?_checkV& (0+255),b
  2520  0019AA  0012               	return	
  2521  0019AC                     __end_of_checkV:
  2522                           	opt stack 0
  2523                           tblptru	equ	0xFF8
  2524                           postinc0	equ	0xFEE
  2525                           wreg	equ	0xFE8
  2526                           indf2	equ	0xFDF
  2527                           fsr2h	equ	0xFDA
  2528                           fsr2l	equ	0xFD9
  2529                           status	equ	0xFD8
  2530                           
  2531 ;; *************** function ___ftmul *****************
  2532 ;; Defined at:
  2533 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  2534 ;; Parameters:    Size  Location     Type
  2535 ;;  f1              3   12[BANK0 ] float 
  2536 ;;  f2              3   15[BANK0 ] float 
  2537 ;; Auto vars:     Size  Location     Type
  2538 ;;  f3_as_produc    3   22[BANK0 ] unsigned um
  2539 ;;  sign            1   26[BANK0 ] unsigned char 
  2540 ;;  cntr            1   25[BANK0 ] unsigned char 
  2541 ;;  exp             1   21[BANK0 ] unsigned char 
  2542 ;; Return value:  Size  Location     Type
  2543 ;;                  3   12[BANK0 ] float 
  2544 ;; Registers used:
  2545 ;;		wreg, status,2, status,0, cstack
  2546 ;; Tracked objects:
  2547 ;;		On entry : 0/0
  2548 ;;		On exit  : 0/0
  2549 ;;		Unchanged: 0/0
  2550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2551 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2552 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2553 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2554 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2555 ;;Total ram usage:       15 bytes
  2556 ;; Hardware stack levels used:    1
  2557 ;; Hardware stack levels required when called:    8
  2558 ;; This function calls:
  2559 ;;		___ftpack
  2560 ;; This function is called by:
  2561 ;;		_checkV
  2562 ;; This function uses a non-reentrant model
  2563 ;;
  2564                           
  2565                           	psect	text7
  2566  00107A                     __ptext7:
  2567                           	opt stack 0
  2568  00107A                     ___ftmul:
  2569                           	opt stack 19
  2570                           
  2571                           ; BSR set to: 0
  2572                           ;incstack = 0
  2573  00107A  C08E  F092         	movff	___ftmul@f1+2,??___ftmul
  2574  00107E  0100               	movlb	0	; () banked
  2575  001080  6B93               	clrf	(??___ftmul+1)& (0+255),b
  2576  001082  6B94               	clrf	(??___ftmul+2)& (0+255),b
  2577  001084  0100               	movlb	0	; () banked
  2578  001086  358D               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  2579  001088  0100               	movlb	0	; () banked
  2580  00108A  3792               	rlcf	??___ftmul& (0+255),f,b
  2581  00108C  E301               	bnc	u2411
  2582  00108E  8193               	bsf	(??___ftmul+1)& (0+255),0,b
  2583  001090                     u2411:
  2584  001090  0100               	movlb	0	; () banked
  2585  001092  5192               	movf	??___ftmul& (0+255),w,b
  2586  001094  0100               	movlb	0	; () banked
  2587  001096  6F95               	movwf	___ftmul@exp& (0+255),b
  2588  001098  0100               	movlb	0	; () banked
  2589  00109A  5195               	movf	___ftmul@exp& (0+255),w,b
  2590  00109C  A4D8               	btfss	status,2,c
  2591  00109E  D00A               	goto	l3435
  2592                           
  2593                           ; BSR set to: 0
  2594  0010A0  0E00               	movlw	0
  2595  0010A2  0100               	movlb	0	; () banked
  2596  0010A4  6F8C               	movwf	?___ftmul& (0+255),b
  2597  0010A6  0E00               	movlw	0
  2598  0010A8  0100               	movlb	0	; () banked
  2599  0010AA  6F8D               	movwf	(?___ftmul+1)& (0+255),b
  2600  0010AC  0E00               	movlw	0
  2601  0010AE  0100               	movlb	0	; () banked
  2602  0010B0  6F8E               	movwf	(?___ftmul+2)& (0+255),b
  2603                           
  2604                           ; BSR set to: 0
  2605  0010B2  0012               	return	
  2606  0010B4                     l3435:
  2607                           
  2608                           ; BSR set to: 0
  2609  0010B4  C091  F092         	movff	___ftmul@f2+2,??___ftmul
  2610  0010B8  0100               	movlb	0	; () banked
  2611  0010BA  6B93               	clrf	(??___ftmul+1)& (0+255),b
  2612  0010BC  6B94               	clrf	(??___ftmul+2)& (0+255),b
  2613  0010BE  0100               	movlb	0	; () banked
  2614  0010C0  3590               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  2615  0010C2  0100               	movlb	0	; () banked
  2616  0010C4  3792               	rlcf	??___ftmul& (0+255),f,b
  2617  0010C6  E301               	bnc	u2431
  2618  0010C8  8193               	bsf	(??___ftmul+1)& (0+255),0,b
  2619  0010CA                     u2431:
  2620  0010CA  0100               	movlb	0	; () banked
  2621  0010CC  5192               	movf	??___ftmul& (0+255),w,b
  2622  0010CE  0100               	movlb	0	; () banked
  2623  0010D0  6F9A               	movwf	___ftmul@sign& (0+255),b
  2624  0010D2  0100               	movlb	0	; () banked
  2625  0010D4  519A               	movf	___ftmul@sign& (0+255),w,b
  2626  0010D6  A4D8               	btfss	status,2,c
  2627  0010D8  D00A               	goto	l3441
  2628                           
  2629                           ; BSR set to: 0
  2630  0010DA  0E00               	movlw	0
  2631  0010DC  0100               	movlb	0	; () banked
  2632  0010DE  6F8C               	movwf	?___ftmul& (0+255),b
  2633  0010E0  0E00               	movlw	0
  2634  0010E2  0100               	movlb	0	; () banked
  2635  0010E4  6F8D               	movwf	(?___ftmul+1)& (0+255),b
  2636  0010E6  0E00               	movlw	0
  2637  0010E8  0100               	movlb	0	; () banked
  2638  0010EA  6F8E               	movwf	(?___ftmul+2)& (0+255),b
  2639                           
  2640                           ; BSR set to: 0
  2641  0010EC  0012               	return	
  2642  0010EE                     l3441:
  2643                           
  2644                           ; BSR set to: 0
  2645  0010EE  0100               	movlb	0	; () banked
  2646  0010F0  519A               	movf	___ftmul@sign& (0+255),w,b
  2647  0010F2  0F7B               	addlw	123
  2648  0010F4  0100               	movlb	0	; () banked
  2649  0010F6  2795               	addwf	___ftmul@exp& (0+255),f,b
  2650                           
  2651                           ; BSR set to: 0
  2652  0010F8  C08E  F09A         	movff	___ftmul@f1+2,___ftmul@sign
  2653  0010FC  0100               	movlb	0	; () banked
  2654  0010FE  5191               	movf	(___ftmul@f2+2)& (0+255),w,b
  2655  001100  0100               	movlb	0	; () banked
  2656  001102  1B9A               	xorwf	___ftmul@sign& (0+255),f,b
  2657  001104  0E80               	movlw	128
  2658  001106  0100               	movlb	0	; () banked
  2659  001108  179A               	andwf	___ftmul@sign& (0+255),f,b
  2660                           
  2661                           ; BSR set to: 0
  2662  00110A  0100               	movlb	0	; () banked
  2663  00110C  8F8D               	bsf	(___ftmul@f1+1)& (0+255),7,b
  2664                           
  2665                           ; BSR set to: 0
  2666  00110E  0100               	movlb	0	; () banked
  2667  001110  8F90               	bsf	(___ftmul@f2+1)& (0+255),7,b
  2668                           
  2669                           ; BSR set to: 0
  2670  001112  0EFF               	movlw	255
  2671  001114  0100               	movlb	0	; () banked
  2672  001116  178F               	andwf	___ftmul@f2& (0+255),f,b
  2673  001118  0EFF               	movlw	255
  2674  00111A  0100               	movlb	0	; () banked
  2675  00111C  1790               	andwf	(___ftmul@f2+1)& (0+255),f,b
  2676  00111E  0E00               	movlw	0
  2677  001120  0100               	movlb	0	; () banked
  2678  001122  1791               	andwf	(___ftmul@f2+2)& (0+255),f,b
  2679                           
  2680                           ; BSR set to: 0
  2681  001124  0E00               	movlw	0
  2682  001126  0100               	movlb	0	; () banked
  2683  001128  6F96               	movwf	___ftmul@f3_as_product& (0+255),b
  2684  00112A  0E00               	movlw	0
  2685  00112C  0100               	movlb	0	; () banked
  2686  00112E  6F97               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  2687  001130  0E00               	movlw	0
  2688  001132  0100               	movlb	0	; () banked
  2689  001134  6F98               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  2690                           
  2691                           ; BSR set to: 0
  2692  001136  0E07               	movlw	7
  2693  001138  0100               	movlb	0	; () banked
  2694  00113A  6F99               	movwf	___ftmul@cntr& (0+255),b
  2695  00113C                     l3455:
  2696                           
  2697                           ; BSR set to: 0
  2698  00113C  0100               	movlb	0	; () banked
  2699  00113E  A18C               	btfss	___ftmul@f1& (0+255),0,b
  2700  001140  D00C               	goto	l3459
  2701                           
  2702                           ; BSR set to: 0
  2703  001142  0100               	movlb	0	; () banked
  2704  001144  518F               	movf	___ftmul@f2& (0+255),w,b
  2705  001146  0100               	movlb	0	; () banked
  2706  001148  2796               	addwf	___ftmul@f3_as_product& (0+255),f,b
  2707  00114A  0100               	movlb	0	; () banked
  2708  00114C  5190               	movf	(___ftmul@f2+1)& (0+255),w,b
  2709  00114E  0100               	movlb	0	; () banked
  2710  001150  2397               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  2711  001152  0100               	movlb	0	; () banked
  2712  001154  5191               	movf	(___ftmul@f2+2)& (0+255),w,b
  2713  001156  0100               	movlb	0	; () banked
  2714  001158  2398               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  2715  00115A                     l3459:
  2716                           
  2717                           ; BSR set to: 0
  2718  00115A  0100               	movlb	0	; () banked
  2719  00115C  90D8               	bcf	status,0,c
  2720  00115E  338E               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  2721  001160  338D               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  2722  001162  338C               	rrcf	___ftmul@f1& (0+255),f,b
  2723  001164  0100               	movlb	0	; () banked
  2724  001166  90D8               	bcf	status,0,c
  2725  001168  378F               	rlcf	___ftmul@f2& (0+255),f,b
  2726  00116A  3790               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  2727  00116C  3791               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  2728                           
  2729                           ; BSR set to: 0
  2730  00116E  0100               	movlb	0	; () banked
  2731  001170  2F99               	decfsz	___ftmul@cntr& (0+255),f,b
  2732  001172  D7E4               	goto	l3455
  2733                           
  2734                           ; BSR set to: 0
  2735                           
  2736                           ; BSR set to: 0
  2737  001174  0E09               	movlw	9
  2738  001176  0100               	movlb	0	; () banked
  2739  001178  6F99               	movwf	___ftmul@cntr& (0+255),b
  2740  00117A                     l3465:
  2741                           
  2742                           ; BSR set to: 0
  2743  00117A  0100               	movlb	0	; () banked
  2744  00117C  A18C               	btfss	___ftmul@f1& (0+255),0,b
  2745  00117E  D00C               	goto	l3469
  2746                           
  2747                           ; BSR set to: 0
  2748  001180  0100               	movlb	0	; () banked
  2749  001182  518F               	movf	___ftmul@f2& (0+255),w,b
  2750  001184  0100               	movlb	0	; () banked
  2751  001186  2796               	addwf	___ftmul@f3_as_product& (0+255),f,b
  2752  001188  0100               	movlb	0	; () banked
  2753  00118A  5190               	movf	(___ftmul@f2+1)& (0+255),w,b
  2754  00118C  0100               	movlb	0	; () banked
  2755  00118E  2397               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  2756  001190  0100               	movlb	0	; () banked
  2757  001192  5191               	movf	(___ftmul@f2+2)& (0+255),w,b
  2758  001194  0100               	movlb	0	; () banked
  2759  001196  2398               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  2760  001198                     l3469:
  2761                           
  2762                           ; BSR set to: 0
  2763  001198  0100               	movlb	0	; () banked
  2764  00119A  90D8               	bcf	status,0,c
  2765  00119C  338E               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  2766  00119E  338D               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  2767  0011A0  338C               	rrcf	___ftmul@f1& (0+255),f,b
  2768  0011A2  0100               	movlb	0	; () banked
  2769  0011A4  90D8               	bcf	status,0,c
  2770  0011A6  3398               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  2771  0011A8  3397               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  2772  0011AA  3396               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  2773                           
  2774                           ; BSR set to: 0
  2775  0011AC  0100               	movlb	0	; () banked
  2776  0011AE  2F99               	decfsz	___ftmul@cntr& (0+255),f,b
  2777  0011B0  D7E4               	goto	l3465
  2778                           
  2779                           ; BSR set to: 0
  2780                           
  2781                           ; BSR set to: 0
  2782  0011B2  C096  F080         	movff	___ftmul@f3_as_product,___ftpack@arg
  2783  0011B6  C097  F081         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  2784  0011BA  C098  F082         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  2785  0011BE  C095  F083         	movff	___ftmul@exp,___ftpack@exp
  2786  0011C2  C09A  F084         	movff	___ftmul@sign,___ftpack@sign
  2787  0011C6  EC85  F009         	call	___ftpack	;wreg free
  2788  0011CA  C080  F08C         	movff	?___ftpack,?___ftmul
  2789  0011CE  C081  F08D         	movff	?___ftpack+1,?___ftmul+1
  2790  0011D2  C082  F08E         	movff	?___ftpack+2,?___ftmul+2
  2791  0011D6  0012               	return	
  2792  0011D8                     __end_of___ftmul:
  2793                           	opt stack 0
  2794                           tblptru	equ	0xFF8
  2795                           postinc0	equ	0xFEE
  2796                           wreg	equ	0xFE8
  2797                           indf2	equ	0xFDF
  2798                           fsr2h	equ	0xFDA
  2799                           fsr2l	equ	0xFD9
  2800                           status	equ	0xFD8
  2801                           
  2802 ;; *************** function ___ftge *****************
  2803 ;; Defined at:
  2804 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
  2805 ;; Parameters:    Size  Location     Type
  2806 ;;  ff1             3   27[BANK0 ] float 
  2807 ;;  ff2             3   30[BANK0 ] float 
  2808 ;; Auto vars:     Size  Location     Type
  2809 ;;		None
  2810 ;; Return value:  Size  Location     Type
  2811 ;;		None               void
  2812 ;; Registers used:
  2813 ;;		wreg, status,2, status,0
  2814 ;; Tracked objects:
  2815 ;;		On entry : 0/0
  2816 ;;		On exit  : 0/0
  2817 ;;		Unchanged: 0/0
  2818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2819 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2821 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2822 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2823 ;;Total ram usage:        9 bytes
  2824 ;; Hardware stack levels used:    1
  2825 ;; Hardware stack levels required when called:    7
  2826 ;; This function calls:
  2827 ;;		Nothing
  2828 ;; This function is called by:
  2829 ;;		_checkV
  2830 ;; This function uses a non-reentrant model
  2831 ;;
  2832                           
  2833                           	psect	text8
  2834  0016D4                     __ptext8:
  2835                           	opt stack 0
  2836  0016D4                     ___ftge:
  2837                           	opt stack 20
  2838                           
  2839                           ;incstack = 0
  2840  0016D4  0100               	movlb	0	; () banked
  2841  0016D6  AF9D               	btfss	(___ftge@ff1+2)& (0+255),7,b
  2842  0016D8  D01D               	goto	l3537
  2843                           
  2844                           ; BSR set to: 0
  2845  0016DA  C09B  F0A1         	movff	___ftge@ff1,??___ftge
  2846  0016DE  C09C  F0A2         	movff	___ftge@ff1+1,??___ftge+1
  2847  0016E2  C09D  F0A3         	movff	___ftge@ff1+2,??___ftge+2
  2848  0016E6  0100               	movlb	0	; () banked
  2849  0016E8  1FA1               	comf	??___ftge& (0+255),f,b
  2850  0016EA  1FA2               	comf	(??___ftge+1)& (0+255),f,b
  2851  0016EC  1FA3               	comf	(??___ftge+2)& (0+255),f,b
  2852  0016EE  2BA1               	incf	??___ftge& (0+255),f,b
  2853  0016F0  0E00               	movlw	0
  2854  0016F2  23A2               	addwfc	(??___ftge+1)& (0+255),f,b
  2855  0016F4  23A3               	addwfc	(??___ftge+2)& (0+255),f,b
  2856  0016F6  0E00               	movlw	0
  2857  0016F8  0100               	movlb	0	; () banked
  2858  0016FA  25A1               	addwf	??___ftge& (0+255),w,b
  2859  0016FC  0100               	movlb	0	; () banked
  2860  0016FE  6F9B               	movwf	___ftge@ff1& (0+255),b
  2861  001700  0E00               	movlw	0
  2862  001702  0100               	movlb	0	; () banked
  2863  001704  21A2               	addwfc	(??___ftge+1)& (0+255),w,b
  2864  001706  0100               	movlb	0	; () banked
  2865  001708  6F9C               	movwf	(___ftge@ff1+1)& (0+255),b
  2866  00170A  0E80               	movlw	128
  2867  00170C  0100               	movlb	0	; () banked
  2868  00170E  21A3               	addwfc	(??___ftge+2)& (0+255),w,b
  2869  001710  0100               	movlb	0	; () banked
  2870  001712  6F9D               	movwf	(___ftge@ff1+2)& (0+255),b
  2871  001714                     l3537:
  2872                           
  2873                           ; BSR set to: 0
  2874  001714  0100               	movlb	0	; () banked
  2875  001716  AFA0               	btfss	(___ftge@ff2+2)& (0+255),7,b
  2876  001718  D01D               	goto	l3541
  2877                           
  2878                           ; BSR set to: 0
  2879  00171A  C09E  F0A1         	movff	___ftge@ff2,??___ftge
  2880  00171E  C09F  F0A2         	movff	___ftge@ff2+1,??___ftge+1
  2881  001722  C0A0  F0A3         	movff	___ftge@ff2+2,??___ftge+2
  2882  001726  0100               	movlb	0	; () banked
  2883  001728  1FA1               	comf	??___ftge& (0+255),f,b
  2884  00172A  1FA2               	comf	(??___ftge+1)& (0+255),f,b
  2885  00172C  1FA3               	comf	(??___ftge+2)& (0+255),f,b
  2886  00172E  2BA1               	incf	??___ftge& (0+255),f,b
  2887  001730  0E00               	movlw	0
  2888  001732  23A2               	addwfc	(??___ftge+1)& (0+255),f,b
  2889  001734  23A3               	addwfc	(??___ftge+2)& (0+255),f,b
  2890  001736  0E00               	movlw	0
  2891  001738  0100               	movlb	0	; () banked
  2892  00173A  25A1               	addwf	??___ftge& (0+255),w,b
  2893  00173C  0100               	movlb	0	; () banked
  2894  00173E  6F9E               	movwf	___ftge@ff2& (0+255),b
  2895  001740  0E00               	movlw	0
  2896  001742  0100               	movlb	0	; () banked
  2897  001744  21A2               	addwfc	(??___ftge+1)& (0+255),w,b
  2898  001746  0100               	movlb	0	; () banked
  2899  001748  6F9F               	movwf	(___ftge@ff2+1)& (0+255),b
  2900  00174A  0E80               	movlw	128
  2901  00174C  0100               	movlb	0	; () banked
  2902  00174E  21A3               	addwfc	(??___ftge+2)& (0+255),w,b
  2903  001750  0100               	movlb	0	; () banked
  2904  001752  6FA0               	movwf	(___ftge@ff2+2)& (0+255),b
  2905  001754                     l3541:
  2906                           
  2907                           ; BSR set to: 0
  2908  001754  0E00               	movlw	0
  2909  001756  0100               	movlb	0	; () banked
  2910  001758  1B9B               	xorwf	___ftge@ff1& (0+255),f,b
  2911  00175A  0E00               	movlw	0
  2912  00175C  0100               	movlb	0	; () banked
  2913  00175E  1B9C               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  2914  001760  0E80               	movlw	128
  2915  001762  0100               	movlb	0	; () banked
  2916  001764  1B9D               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  2917                           
  2918                           ; BSR set to: 0
  2919  001766  0E00               	movlw	0
  2920  001768  0100               	movlb	0	; () banked
  2921  00176A  1B9E               	xorwf	___ftge@ff2& (0+255),f,b
  2922  00176C  0E00               	movlw	0
  2923  00176E  0100               	movlb	0	; () banked
  2924  001770  1B9F               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  2925  001772  0E80               	movlw	128
  2926  001774  0100               	movlb	0	; () banked
  2927  001776  1BA0               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  2928  001778  0100               	movlb	0	; () banked
  2929  00177A  519E               	movf	___ftge@ff2& (0+255),w,b
  2930  00177C  0100               	movlb	0	; () banked
  2931  00177E  5D9B               	subwf	___ftge@ff1& (0+255),w,b
  2932  001780  0100               	movlb	0	; () banked
  2933  001782  519F               	movf	(___ftge@ff2+1)& (0+255),w,b
  2934  001784  0100               	movlb	0	; () banked
  2935  001786  599C               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  2936  001788  0100               	movlb	0	; () banked
  2937  00178A  51A0               	movf	(___ftge@ff2+2)& (0+255),w,b
  2938  00178C  0100               	movlb	0	; () banked
  2939  00178E  599D               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  2940  001790  B0D8               	btfsc	status,0,c
  2941  001792  D002               	goto	l3547
  2942                           
  2943                           ; BSR set to: 0
  2944  001794  90D8               	bcf	status,0,c
  2945  001796  0012               	return	
  2946  001798                     l3547:
  2947                           
  2948                           ; BSR set to: 0
  2949  001798  80D8               	bsf	status,0,c
  2950                           
  2951                           ; BSR set to: 0
  2952  00179A  0012               	return	
  2953  00179C                     __end_of___ftge:
  2954                           	opt stack 0
  2955                           tblptru	equ	0xFF8
  2956                           postinc0	equ	0xFEE
  2957                           wreg	equ	0xFE8
  2958                           indf2	equ	0xFDF
  2959                           fsr2h	equ	0xFDA
  2960                           fsr2l	equ	0xFD9
  2961                           status	equ	0xFD8
  2962                           
  2963 ;; *************** function ___awtoft *****************
  2964 ;; Defined at:
  2965 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awtoft.c"
  2966 ;; Parameters:    Size  Location     Type
  2967 ;;  c               2    8[BANK0 ] int 
  2968 ;; Auto vars:     Size  Location     Type
  2969 ;;  sign            1   11[BANK0 ] unsigned char 
  2970 ;; Return value:  Size  Location     Type
  2971 ;;                  3    8[BANK0 ] float 
  2972 ;; Registers used:
  2973 ;;		wreg, status,2, status,0, cstack
  2974 ;; Tracked objects:
  2975 ;;		On entry : 0/0
  2976 ;;		On exit  : 0/0
  2977 ;;		Unchanged: 0/0
  2978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2979 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2980 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2982 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2983 ;;Total ram usage:        4 bytes
  2984 ;; Hardware stack levels used:    1
  2985 ;; Hardware stack levels required when called:    8
  2986 ;; This function calls:
  2987 ;;		___ftpack
  2988 ;; This function is called by:
  2989 ;;		_checkV
  2990 ;; This function uses a non-reentrant model
  2991 ;;
  2992                           
  2993                           	psect	text9
  2994  0024B0                     __ptext9:
  2995                           	opt stack 0
  2996  0024B0                     ___awtoft:
  2997                           	opt stack 19
  2998                           
  2999                           ; BSR set to: 0
  3000                           ;incstack = 0
  3001  0024B0  0E00               	movlw	0
  3002  0024B2  0100               	movlb	0	; () banked
  3003  0024B4  6F8B               	movwf	___awtoft@sign& (0+255),b
  3004                           
  3005                           ; BSR set to: 0
  3006  0024B6  0100               	movlb	0	; () banked
  3007  0024B8  AF89               	btfss	(___awtoft@c+1)& (0+255),7,b
  3008  0024BA  D008               	goto	l3529
  3009                           
  3010                           ; BSR set to: 0
  3011  0024BC  0100               	movlb	0	; () banked
  3012  0024BE  6D88               	negf	___awtoft@c& (0+255),b
  3013  0024C0  1F89               	comf	(___awtoft@c+1)& (0+255),f,b
  3014  0024C2  B0D8               	btfsc	status,0,c
  3015  0024C4  2B89               	incf	(___awtoft@c+1)& (0+255),f,b
  3016                           
  3017                           ; BSR set to: 0
  3018  0024C6  0E01               	movlw	1
  3019  0024C8  0100               	movlb	0	; () banked
  3020  0024CA  6F8B               	movwf	___awtoft@sign& (0+255),b
  3021  0024CC                     l3529:
  3022                           
  3023                           ; BSR set to: 0
  3024  0024CC  C088  F080         	movff	___awtoft@c,___ftpack@arg
  3025  0024D0  C089  F081         	movff	___awtoft@c+1,___ftpack@arg+1
  3026  0024D4  0100               	movlb	0	; () banked
  3027  0024D6  6B82               	clrf	(___ftpack@arg+2)& (0+255),b
  3028  0024D8  0E8E               	movlw	142
  3029  0024DA  0100               	movlb	0	; () banked
  3030  0024DC  6F83               	movwf	___ftpack@exp& (0+255),b
  3031  0024DE  C08B  F084         	movff	___awtoft@sign,___ftpack@sign
  3032  0024E2  EC85  F009         	call	___ftpack	;wreg free
  3033  0024E6  C080  F088         	movff	?___ftpack,?___awtoft
  3034  0024EA  C081  F089         	movff	?___ftpack+1,?___awtoft+1
  3035  0024EE  C082  F08A         	movff	?___ftpack+2,?___awtoft+2
  3036  0024F2  0012               	return	
  3037  0024F4                     __end_of___awtoft:
  3038                           	opt stack 0
  3039                           tblptru	equ	0xFF8
  3040                           postinc0	equ	0xFEE
  3041                           wreg	equ	0xFE8
  3042                           indf2	equ	0xFDF
  3043                           fsr2h	equ	0xFDA
  3044                           fsr2l	equ	0xFD9
  3045                           status	equ	0xFD8
  3046                           
  3047 ;; *************** function ___ftpack *****************
  3048 ;; Defined at:
  3049 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  3050 ;; Parameters:    Size  Location     Type
  3051 ;;  arg             3    0[BANK0 ] unsigned um
  3052 ;;  exp             1    3[BANK0 ] unsigned char 
  3053 ;;  sign            1    4[BANK0 ] unsigned char 
  3054 ;; Auto vars:     Size  Location     Type
  3055 ;;		None
  3056 ;; Return value:  Size  Location     Type
  3057 ;;                  3    0[BANK0 ] float 
  3058 ;; Registers used:
  3059 ;;		wreg, status,2, status,0
  3060 ;; Tracked objects:
  3061 ;;		On entry : 0/0
  3062 ;;		On exit  : 0/0
  3063 ;;		Unchanged: 0/0
  3064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3065 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3067 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3068 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3069 ;;Total ram usage:        8 bytes
  3070 ;; Hardware stack levels used:    1
  3071 ;; Hardware stack levels required when called:    7
  3072 ;; This function calls:
  3073 ;;		Nothing
  3074 ;; This function is called by:
  3075 ;;		___awtoft
  3076 ;;		___ftmul
  3077 ;; This function uses a non-reentrant model
  3078 ;;
  3079                           
  3080                           	psect	text10
  3081  00130A                     __ptext10:
  3082                           	opt stack 0
  3083  00130A                     ___ftpack:
  3084                           	opt stack 19
  3085                           
  3086                           ;incstack = 0
  3087  00130A  0100               	movlb	0	; () banked
  3088  00130C  5183               	movf	___ftpack@exp& (0+255),w,b
  3089  00130E  0100               	movlb	0	; () banked
  3090  001310  B4D8               	btfsc	status,2,c
  3091  001312  D008               	goto	l3095
  3092                           
  3093                           ; BSR set to: 0
  3094  001314  0100               	movlb	0	; () banked
  3095  001316  5180               	movf	___ftpack@arg& (0+255),w,b
  3096  001318  0100               	movlb	0	; () banked
  3097  00131A  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  3098  00131C  0100               	movlb	0	; () banked
  3099  00131E  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  3100  001320  A4D8               	btfss	status,2,c
  3101  001322  D011               	goto	l3101
  3102  001324                     l3095:
  3103                           
  3104                           ; BSR set to: 0
  3105  001324  0E00               	movlw	0
  3106  001326  0100               	movlb	0	; () banked
  3107  001328  6F80               	movwf	?___ftpack& (0+255),b
  3108  00132A  0E00               	movlw	0
  3109  00132C  0100               	movlb	0	; () banked
  3110  00132E  6F81               	movwf	(?___ftpack+1)& (0+255),b
  3111  001330  0E00               	movlw	0
  3112  001332  0100               	movlb	0	; () banked
  3113  001334  6F82               	movwf	(?___ftpack+2)& (0+255),b
  3114                           
  3115                           ; BSR set to: 0
  3116  001336  0012               	return	
  3117  001338                     l3099:
  3118                           
  3119                           ; BSR set to: 0
  3120  001338  0100               	movlb	0	; () banked
  3121  00133A  2B83               	incf	___ftpack@exp& (0+255),f,b
  3122  00133C  0100               	movlb	0	; () banked
  3123  00133E  90D8               	bcf	status,0,c
  3124  001340  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  3125  001342  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  3126  001344  3380               	rrcf	___ftpack@arg& (0+255),f,b
  3127  001346                     l3101:
  3128                           
  3129                           ; BSR set to: 0
  3130  001346  0E00               	movlw	0
  3131  001348  0100               	movlb	0	; () banked
  3132  00134A  1580               	andwf	___ftpack@arg& (0+255),w,b
  3133  00134C  0100               	movlb	0	; () banked
  3134  00134E  6F85               	movwf	??___ftpack& (0+255),b
  3135  001350  0E00               	movlw	0
  3136  001352  0100               	movlb	0	; () banked
  3137  001354  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  3138  001356  0100               	movlb	0	; () banked
  3139  001358  6F86               	movwf	(??___ftpack+1)& (0+255),b
  3140  00135A  0EFE               	movlw	254
  3141  00135C  0100               	movlb	0	; () banked
  3142  00135E  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  3143  001360  0100               	movlb	0	; () banked
  3144  001362  6F87               	movwf	(??___ftpack+2)& (0+255),b
  3145  001364  0100               	movlb	0	; () banked
  3146  001366  5185               	movf	??___ftpack& (0+255),w,b
  3147  001368  0100               	movlb	0	; () banked
  3148  00136A  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  3149  00136C  0100               	movlb	0	; () banked
  3150  00136E  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  3151  001370  B4D8               	btfsc	status,2,c
  3152  001372  D011               	goto	l3107
  3153  001374  D7E1               	goto	l3099
  3154  001376                     l3103:
  3155                           
  3156                           ; BSR set to: 0
  3157  001376  0100               	movlb	0	; () banked
  3158  001378  2B83               	incf	___ftpack@exp& (0+255),f,b
  3159                           
  3160                           ; BSR set to: 0
  3161  00137A  0E01               	movlw	1
  3162  00137C  0100               	movlb	0	; () banked
  3163  00137E  2780               	addwf	___ftpack@arg& (0+255),f,b
  3164  001380  0E00               	movlw	0
  3165  001382  0100               	movlb	0	; () banked
  3166  001384  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  3167  001386  0E00               	movlw	0
  3168  001388  0100               	movlb	0	; () banked
  3169  00138A  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  3170  00138C  0100               	movlb	0	; () banked
  3171  00138E  90D8               	bcf	status,0,c
  3172  001390  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  3173  001392  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  3174  001394  3380               	rrcf	___ftpack@arg& (0+255),f,b
  3175  001396                     l3107:
  3176                           
  3177                           ; BSR set to: 0
  3178  001396  0E00               	movlw	0
  3179  001398  0100               	movlb	0	; () banked
  3180  00139A  1580               	andwf	___ftpack@arg& (0+255),w,b
  3181  00139C  0100               	movlb	0	; () banked
  3182  00139E  6F85               	movwf	??___ftpack& (0+255),b
  3183  0013A0  0E00               	movlw	0
  3184  0013A2  0100               	movlb	0	; () banked
  3185  0013A4  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  3186  0013A6  0100               	movlb	0	; () banked
  3187  0013A8  6F86               	movwf	(??___ftpack+1)& (0+255),b
  3188  0013AA  0EFF               	movlw	255
  3189  0013AC  0100               	movlb	0	; () banked
  3190  0013AE  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  3191  0013B0  0100               	movlb	0	; () banked
  3192  0013B2  6F87               	movwf	(??___ftpack+2)& (0+255),b
  3193  0013B4  0100               	movlb	0	; () banked
  3194  0013B6  5185               	movf	??___ftpack& (0+255),w,b
  3195  0013B8  0100               	movlb	0	; () banked
  3196  0013BA  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  3197  0013BC  0100               	movlb	0	; () banked
  3198  0013BE  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  3199  0013C0  B4D8               	btfsc	status,2,c
  3200  0013C2  D008               	goto	l3111
  3201  0013C4  D7D8               	goto	l3103
  3202  0013C6                     l3109:
  3203                           
  3204                           ; BSR set to: 0
  3205  0013C6  0100               	movlb	0	; () banked
  3206  0013C8  0783               	decf	___ftpack@exp& (0+255),f,b
  3207  0013CA  0100               	movlb	0	; () banked
  3208  0013CC  90D8               	bcf	status,0,c
  3209  0013CE  3780               	rlcf	___ftpack@arg& (0+255),f,b
  3210  0013D0  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  3211  0013D2  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  3212  0013D4                     l3111:
  3213                           
  3214                           ; BSR set to: 0
  3215  0013D4  0100               	movlb	0	; () banked
  3216  0013D6  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  3217  0013D8  D004               	goto	l755
  3218                           
  3219                           ; BSR set to: 0
  3220  0013DA  0E02               	movlw	2
  3221  0013DC  0100               	movlb	0	; () banked
  3222  0013DE  6183               	cpfslt	___ftpack@exp& (0+255),b
  3223  0013E0  D7F2               	goto	l3109
  3224  0013E2                     l755:
  3225                           
  3226                           ; BSR set to: 0
  3227  0013E2  0100               	movlb	0	; () banked
  3228  0013E4  B183               	btfsc	___ftpack@exp& (0+255),0,b
  3229  0013E6  D002               	goto	l3117
  3230                           
  3231                           ; BSR set to: 0
  3232  0013E8  0100               	movlb	0	; () banked
  3233  0013EA  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
  3234  0013EC                     l3117:
  3235                           
  3236                           ; BSR set to: 0
  3237  0013EC  0100               	movlb	0	; () banked
  3238  0013EE  90D8               	bcf	status,0,c
  3239  0013F0  3383               	rrcf	___ftpack@exp& (0+255),f,b
  3240  0013F2  0100               	movlb	0	; () banked
  3241  0013F4  5183               	movf	___ftpack@exp& (0+255),w,b
  3242  0013F6  0100               	movlb	0	; () banked
  3243  0013F8  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  3244                           
  3245                           ; BSR set to: 0
  3246  0013FA  0100               	movlb	0	; () banked
  3247  0013FC  5184               	movf	___ftpack@sign& (0+255),w,b
  3248  0013FE  0100               	movlb	0	; () banked
  3249  001400  B4D8               	btfsc	status,2,c
  3250  001402  D002               	goto	l3123
  3251                           
  3252                           ; BSR set to: 0
  3253  001404  0100               	movlb	0	; () banked
  3254  001406  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
  3255  001408                     l3123:
  3256                           
  3257                           ; BSR set to: 0
  3258  001408  C080  F080         	movff	___ftpack@arg,?___ftpack
  3259  00140C  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
  3260  001410  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
  3261  001414  0012               	return	
  3262  001416                     __end_of___ftpack:
  3263                           	opt stack 0
  3264                           tblptru	equ	0xFF8
  3265                           postinc0	equ	0xFEE
  3266                           wreg	equ	0xFE8
  3267                           indf2	equ	0xFDF
  3268                           fsr2h	equ	0xFDA
  3269                           fsr2l	equ	0xFD9
  3270                           status	equ	0xFD8
  3271                           
  3272 ;; *************** function _AD *****************
  3273 ;; Defined at:
  3274 ;;		line 4 in file "sensors.c"
  3275 ;; Parameters:    Size  Location     Type
  3276 ;;  channel         1    wreg     unsigned char 
  3277 ;; Auto vars:     Size  Location     Type
  3278 ;;  channel         1    4[BANK0 ] unsigned char 
  3279 ;; Return value:  Size  Location     Type
  3280 ;;                  2    0[BANK0 ] int 
  3281 ;; Registers used:
  3282 ;;		wreg, status,2, status,0
  3283 ;; Tracked objects:
  3284 ;;		On entry : 0/0
  3285 ;;		On exit  : 0/0
  3286 ;;		Unchanged: 0/0
  3287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3288 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3289 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3290 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3291 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3292 ;;Total ram usage:        5 bytes
  3293 ;; Hardware stack levels used:    1
  3294 ;; Hardware stack levels required when called:    7
  3295 ;; This function calls:
  3296 ;;		Nothing
  3297 ;; This function is called by:
  3298 ;;		_checkV
  3299 ;; This function uses a non-reentrant model
  3300 ;;
  3301                           
  3302                           	psect	text11
  3303  002536                     __ptext11:
  3304                           	opt stack 0
  3305  002536                     _AD:
  3306                           	opt stack 20
  3307                           
  3308                           ; BSR set to: 0
  3309                           ;incstack = 0
  3310                           ;AD@channel stored from wreg
  3311  002536  0100               	movlb	0	; () banked
  3312  002538  6F84               	movwf	AD@channel& (0+255),b
  3313                           
  3314                           ;sensors.c: 6: ADCON0 = ((channel << 2));
  3315  00253A  0100               	movlb	0	; () banked
  3316  00253C  4584               	rlncf	AD@channel& (0+255),w,b
  3317  00253E  46E8               	rlncf	wreg,f,c
  3318  002540  0BFC               	andlw	252
  3319  002542  6EC2               	movwf	4034,c	;volatile
  3320                           
  3321                           ; BSR set to: 0
  3322                           ;sensors.c: 7: ADON = 1;
  3323  002544  80C2               	bsf	4034,0,c	;volatile
  3324                           
  3325                           ; BSR set to: 0
  3326                           ;sensors.c: 8: ADCON0bits.GO = 1;
  3327  002546  82C2               	bsf	4034,1,c	;volatile
  3328  002548                     l305:
  3329  002548  B2C2               	btfsc	4034,1,c	;volatile
  3330  00254A  D7FE               	goto	l305
  3331                           
  3332                           ;sensors.c: 10: return (ADRESH << 8) | ADRESL;
  3333  00254C  50C3               	movf	4035,w,c	;volatile
  3334  00254E  CFC4 F082          	movff	4036,??_AD	;volatile
  3335  002552  0100               	movlb	0	; () banked
  3336  002554  6B83               	clrf	(??_AD+1)& (0+255),b
  3337  002556  C082  F083         	movff	??_AD,??_AD+1
  3338  00255A  0100               	movlb	0	; () banked
  3339  00255C  6B82               	clrf	??_AD& (0+255),b
  3340  00255E  0100               	movlb	0	; () banked
  3341  002560  1182               	iorwf	??_AD& (0+255),w,b
  3342  002562  0100               	movlb	0	; () banked
  3343  002564  6F80               	movwf	?_AD& (0+255),b
  3344  002566  0100               	movlb	0	; () banked
  3345  002568  5183               	movf	(??_AD+1)& (0+255),w,b
  3346  00256A  0100               	movlb	0	; () banked
  3347  00256C  6F81               	movwf	(?_AD+1)& (0+255),b
  3348  00256E  0012               	return	
  3349  002570                     __end_of_AD:
  3350                           	opt stack 0
  3351                           tblptru	equ	0xFF8
  3352                           postinc0	equ	0xFEE
  3353                           wreg	equ	0xFE8
  3354                           indf2	equ	0xFDF
  3355                           fsr2h	equ	0xFDA
  3356                           fsr2l	equ	0xFD9
  3357                           status	equ	0xFD8
  3358                           
  3359 ;; *************** function _showRTC *****************
  3360 ;; Defined at:
  3361 ;;		line 168 in file "main.c"
  3362 ;; Parameters:    Size  Location     Type
  3363 ;;		None
  3364 ;; Auto vars:     Size  Location     Type
  3365 ;;		None
  3366 ;; Return value:  Size  Location     Type
  3367 ;;                  1    wreg      void 
  3368 ;; Registers used:
  3369 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3370 ;; Tracked objects:
  3371 ;;		On entry : 0/0
  3372 ;;		On exit  : 0/0
  3373 ;;		Unchanged: 0/0
  3374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3377 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3378 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3379 ;;Total ram usage:        2 bytes
  3380 ;; Hardware stack levels used:    1
  3381 ;; Hardware stack levels required when called:   10
  3382 ;; This function calls:
  3383 ;;		_getTime
  3384 ;;		_lcdInst
  3385 ;;		_printf
  3386 ;; This function is called by:
  3387 ;;		_main
  3388 ;; This function uses a non-reentrant model
  3389 ;;
  3390                           
  3391                           	psect	text12
  3392  001B6E                     __ptext12:
  3393                           	opt stack 0
  3394  001B6E                     _showRTC:
  3395                           	opt stack 20
  3396                           
  3397                           ;main.c: 169: getTime(time);
  3398                           
  3399                           ; BSR set to: 0
  3400                           ;incstack = 0
  3401  001B6E  0E77               	movlw	low _time
  3402  001B70  0100               	movlb	0	; () banked
  3403  001B72  6F83               	movwf	getTime@time& (0+255),b
  3404  001B74  0E00               	movlw	high _time
  3405  001B76  0100               	movlb	0	; () banked
  3406  001B78  6F84               	movwf	(getTime@time+1)& (0+255),b
  3407  001B7A  ECFC  F00D         	call	_getTime	;wreg free
  3408                           
  3409                           ;main.c: 170: lcdInst(0b10000000);
  3410  001B7E  0E80               	movlw	128
  3411  001B80  EC34  F014         	call	_lcdInst
  3412                           
  3413                           ;main.c: 171: printf("    %02x/%02x/%02x      ", time[6], time[5], time[4]);
  3414  001B84  0E0F               	movlw	low STR_17
  3415  001B86  0100               	movlb	0	; () banked
  3416  001B88  6F8C               	movwf	printf@f& (0+255),b
  3417  001B8A  0EFE               	movlw	high STR_17
  3418  001B8C  0100               	movlb	0	; () banked
  3419  001B8E  6F8D               	movwf	(printf@f+1)& (0+255),b
  3420  001B90  C07D  F08E         	movff	_time+6,?_printf+2
  3421  001B94  0100               	movlb	0	; () banked
  3422  001B96  6B8F               	clrf	(?_printf+3)& (0+255),b
  3423  001B98  C07C  F090         	movff	_time+5,?_printf+4
  3424  001B9C  0100               	movlb	0	; () banked
  3425  001B9E  6B91               	clrf	(?_printf+5)& (0+255),b
  3426  001BA0  C07B  F092         	movff	_time+4,?_printf+6
  3427  001BA4  0100               	movlb	0	; () banked
  3428  001BA6  6B93               	clrf	(?_printf+7)& (0+255),b
  3429  001BA8  EC09  F000         	call	_printf	;wreg free
  3430                           
  3431                           ;main.c: 172: lcdInst(0b11000000);
  3432  001BAC  0EC0               	movlw	192
  3433  001BAE  EC34  F014         	call	_lcdInst
  3434                           
  3435                           ;main.c: 173: printf("    %02x:%02x:%02x      ", time[2], time[1], time[0]);
  3436  001BB2  0E28               	movlw	low STR_18
  3437  001BB4  0100               	movlb	0	; () banked
  3438  001BB6  6F8C               	movwf	printf@f& (0+255),b
  3439  001BB8  0EFE               	movlw	high STR_18
  3440  001BBA  0100               	movlb	0	; () banked
  3441  001BBC  6F8D               	movwf	(printf@f+1)& (0+255),b
  3442  001BBE  C079  F08E         	movff	_time+2,?_printf+2
  3443  001BC2  0100               	movlb	0	; () banked
  3444  001BC4  6B8F               	clrf	(?_printf+3)& (0+255),b
  3445  001BC6  C078  F090         	movff	_time+1,?_printf+4
  3446  001BCA  0100               	movlb	0	; () banked
  3447  001BCC  6B91               	clrf	(?_printf+5)& (0+255),b
  3448  001BCE  C077  F092         	movff	_time,?_printf+6
  3449  001BD2  0100               	movlb	0	; () banked
  3450  001BD4  6B93               	clrf	(?_printf+7)& (0+255),b
  3451  001BD6  EC09  F000         	call	_printf	;wreg free
  3452                           
  3453                           ;main.c: 174: _delay((unsigned long)((250)*(8000000/4000.0)));
  3454  001BDA  0E03               	movlw	3
  3455  001BDC  0100               	movlb	0	; () banked
  3456  001BDE  6FA7               	movwf	(??_showRTC+1)& (0+255),b
  3457  001BE0  0E8A               	movlw	138
  3458  001BE2  0100               	movlb	0	; () banked
  3459  001BE4  6FA6               	movwf	??_showRTC& (0+255),b
  3460  001BE6  0E55               	movlw	85
  3461  001BE8                     u3617:
  3462  001BE8  2EE8               	decfsz	wreg,f,c
  3463  001BEA  D7FE               	bra	u3617
  3464  001BEC  2FA6               	decfsz	??_showRTC& (0+255),f,b
  3465  001BEE  D7FC               	bra	u3617
  3466  001BF0  2FA7               	decfsz	(??_showRTC+1)& (0+255),f,b
  3467  001BF2  D7FA               	bra	u3617
  3468  001BF4  D000               	nop2	
  3469  001BF6  0012               	return		;funcret
  3470  001BF8                     __end_of_showRTC:
  3471                           	opt stack 0
  3472                           tblptru	equ	0xFF8
  3473                           postinc0	equ	0xFEE
  3474                           wreg	equ	0xFE8
  3475                           indf2	equ	0xFDF
  3476                           fsr2h	equ	0xFDA
  3477                           fsr2l	equ	0xFD9
  3478                           status	equ	0xFD8
  3479                           
  3480 ;; *************** function _printf *****************
  3481 ;; Defined at:
  3482 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  3483 ;; Parameters:    Size  Location     Type
  3484 ;;  f               2   12[BANK0 ] PTR const unsigned char 
  3485 ;;		 -> STR_45(17), STR_44(17), STR_43(18), STR_42(22), 
  3486 ;;		 -> STR_41(4), STR_40(3), STR_39(4), STR_38(5), 
  3487 ;;		 -> STR_37(4), STR_36(18), STR_35(20), STR_34(16), 
  3488 ;;		 -> STR_33(21), STR_32(16), STR_31(21), STR_30(16), 
  3489 ;;		 -> STR_29(20), STR_28(16), STR_27(21), STR_26(23), 
  3490 ;;		 -> STR_25(24), STR_24(21), STR_23(24), STR_22(24), 
  3491 ;;		 -> STR_21(25), STR_20(19), STR_19(18), STR_18(25), 
  3492 ;;		 -> STR_17(25), STR_16(27), STR_15(3), STR_14(3), 
  3493 ;;		 -> STR_13(3), STR_12(5), STR_11(3), STR_10(3), 
  3494 ;;		 -> STR_9(3), STR_8(4), STR_7(3), STR_6(3), 
  3495 ;;		 -> STR_5(3), STR_4(4), STR_3(5), STR_2(24), 
  3496 ;;		 -> STR_1(9), 
  3497 ;; Auto vars:     Size  Location     Type
  3498 ;;  idx             1   26[BANK0 ] unsigned char 
  3499 ;;  tmpval          4    0        struct .
  3500 ;;  width           2   35[BANK0 ] int 
  3501 ;;  val             2   32[BANK0 ] unsigned int 
  3502 ;;  len             2   29[BANK0 ] unsigned int 
  3503 ;;  ap              2   27[BANK0 ] PTR void [1]
  3504 ;;		 -> ?i2_printf(2), ?_printf(2), 
  3505 ;;  cp              2   24[BANK0 ] PTR const unsigned char 
  3506 ;;		 -> printf@c(1), 
  3507 ;;  c               1   37[BANK0 ] char 
  3508 ;;  flag            1   34[BANK0 ] unsigned char 
  3509 ;;  prec            1   31[BANK0 ] char 
  3510 ;; Return value:  Size  Location     Type
  3511 ;;                  2   12[BANK0 ] int 
  3512 ;; Registers used:
  3513 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3514 ;; Tracked objects:
  3515 ;;		On entry : 0/0
  3516 ;;		On exit  : 0/0
  3517 ;;		Unchanged: 0/0
  3518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3519 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3520 ;;      Locals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3521 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3522 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3523 ;;Total ram usage:       26 bytes
  3524 ;; Hardware stack levels used:    1
  3525 ;; Hardware stack levels required when called:    9
  3526 ;; This function calls:
  3527 ;;		___lwdiv
  3528 ;;		___lwmod
  3529 ;;		___wmul
  3530 ;;		_isdigit
  3531 ;;		_putch
  3532 ;; This function is called by:
  3533 ;;		_showRTC
  3534 ;;		_testAD
  3535 ;;		_main
  3536 ;;		_printV
  3537 ;;		_checkAA
  3538 ;;		_checkC
  3539 ;;		_check9
  3540 ;;		_mainloop
  3541 ;; This function uses a non-reentrant model
  3542 ;;
  3543                           
  3544                           	psect	text13
  3545  000012                     __ptext13:
  3546                           	opt stack 0
  3547  000012                     _printf:
  3548                           	opt stack 20
  3549                           
  3550                           ;doprnt.c: 466: va_list ap;
  3551                           ;doprnt.c: 499: signed char c;
  3552                           ;doprnt.c: 501: int width;
  3553                           ;doprnt.c: 506: signed char prec;
  3554                           ;doprnt.c: 508: unsigned char flag;
  3555                           ;doprnt.c: 523: union {
  3556                           ;doprnt.c: 524: unsigned long vd;
  3557                           ;doprnt.c: 525: double integ;
  3558                           ;doprnt.c: 526: } tmpval;
  3559                           ;doprnt.c: 528: unsigned int val;
  3560                           ;doprnt.c: 529: unsigned len;
  3561                           ;doprnt.c: 530: const char * cp;
  3562                           ;doprnt.c: 533: *ap = __va_start();
  3563                           
  3564                           ;incstack = 0
  3565  000012  0E8E               	movlw	low (?_printf+2)
  3566  000014  0100               	movlb	0	; () banked
  3567  000016  6F9B               	movwf	printf@ap& (0+255),b
  3568  000018  0E00               	movlw	high (?_printf+2)
  3569  00001A  0100               	movlb	0	; () banked
  3570  00001C  6F9C               	movwf	(printf@ap+1)& (0+255),b
  3571                           
  3572                           ;doprnt.c: 536: while(c = *f++) {
  3573  00001E  D21F               	goto	l3413
  3574  000020                     l3263:
  3575                           
  3576                           ; BSR set to: 0
  3577                           ;doprnt.c: 538: if(c != '%')
  3578  000020  0E25               	movlw	37
  3579  000022  0100               	movlb	0	; () banked
  3580  000024  19A5               	xorwf	printf@c& (0+255),w,b
  3581  000026  B4D8               	btfsc	status,2,c
  3582  000028  D005               	goto	l3267
  3583                           
  3584                           ; BSR set to: 0
  3585                           ;doprnt.c: 540: {
  3586                           ;doprnt.c: 541: (putch(c) );
  3587  00002A  0100               	movlb	0	; () banked
  3588  00002C  51A5               	movf	printf@c& (0+255),w,b
  3589  00002E  EC2C  F014         	call	_putch
  3590                           
  3591                           ;doprnt.c: 542: continue;
  3592  000032  D215               	goto	l3413
  3593  000034                     l3267:
  3594                           
  3595                           ;doprnt.c: 543: }
  3596                           ;doprnt.c: 546: width = 0;
  3597  000034  0E00               	movlw	0
  3598  000036  0100               	movlb	0	; () banked
  3599  000038  6FA4               	movwf	(printf@width+1)& (0+255),b
  3600  00003A  0E00               	movlw	0
  3601  00003C  6FA3               	movwf	printf@width& (0+255),b
  3602                           
  3603                           ;doprnt.c: 548: flag = 0;
  3604  00003E  0E00               	movlw	0
  3605  000040  0100               	movlb	0	; () banked
  3606  000042  6FA2               	movwf	printf@flag& (0+255),b
  3607                           
  3608                           ; BSR set to: 0
  3609                           ;doprnt.c: 551: switch(*f) {
  3610                           
  3611                           ;doprnt.c: 550: for(;;) {
  3612  000044  D005               	goto	l3273
  3613  000046                     l3269:
  3614                           
  3615                           ;doprnt.c: 580: flag |= 0x04;
  3616  000046  0100               	movlb	0	; () banked
  3617  000048  85A2               	bsf	printf@flag& (0+255),2,b
  3618                           
  3619                           ;doprnt.c: 581: f++;
  3620  00004A  0100               	movlb	0	; () banked
  3621  00004C  4B8C               	infsnz	printf@f& (0+255),f,b
  3622  00004E  2B8D               	incf	(printf@f+1)& (0+255),f,b
  3623  000050                     l3273:
  3624  000050  C08C  FFF6         	movff	printf@f,tblptrl
  3625  000054  C08D  FFF7         	movff	printf@f+1,tblptrh
  3626  000058                     	if	0	;tblptru may be non-zero
  3627  000058                     	endif
  3628  000058                     	if	0	;tblptru may be non-zero
  3629  000058                     	endif
  3630  000058  0008               	tblrd		*
  3631  00005A  50F5               	movf	tablat,w,c
  3632                           
  3633                           ; Switch size 1, requested type "space"
  3634                           ; Number of cases is 1, Range of values is 48 to 48
  3635                           ; switch strategies available:
  3636                           ; Name         Instructions Cycles
  3637                           ; simple_byte            4     3 (average)
  3638                           ;	Chosen strategy is simple_byte
  3639  00005C  0A30               	xorlw	48	; case 48
  3640  00005E  B4D8               	btfsc	status,2,c
  3641  000060  D7F2               	goto	l3269
  3642                           
  3643                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  3644                           
  3645                           ;doprnt.c: 586: }
  3646                           
  3647                           ;doprnt.c: 585: break;
  3648  000062  C08C  FFF6         	movff	printf@f,tblptrl
  3649  000066  C08D  FFF7         	movff	printf@f+1,tblptrh
  3650  00006A                     	if	0	;tblptru may be non-zero
  3651  00006A                     	endif
  3652  00006A                     	if	0	;tblptru may be non-zero
  3653  00006A                     	endif
  3654  00006A  0008               	tblrd		*
  3655  00006C  50F5               	movf	tablat,w,c
  3656  00006E  EC3B  F013         	call	_isdigit
  3657  000072  A0D8               	btfss	status,0,c
  3658  000074  D092               	goto	l3313
  3659                           
  3660                           ;doprnt.c: 598: width = 0;
  3661  000076  0E00               	movlw	0
  3662  000078  0100               	movlb	0	; () banked
  3663  00007A  6FA4               	movwf	(printf@width+1)& (0+255),b
  3664  00007C  0E00               	movlw	0
  3665  00007E  6FA3               	movwf	printf@width& (0+255),b
  3666  000080                     l3279:
  3667                           
  3668                           ;doprnt.c: 600: width *= 10;
  3669  000080  C0A3  F080         	movff	printf@width,___wmul@multiplier
  3670  000084  C0A4  F081         	movff	printf@width+1,___wmul@multiplier+1
  3671  000088  0E00               	movlw	0
  3672  00008A  0100               	movlb	0	; () banked
  3673  00008C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3674  00008E  0E0A               	movlw	10
  3675  000090  6F82               	movwf	___wmul@multiplicand& (0+255),b
  3676  000092  ECF0  F012         	call	___wmul	;wreg free
  3677  000096  C080  F0A3         	movff	?___wmul,printf@width
  3678  00009A  C081  F0A4         	movff	?___wmul+1,printf@width+1
  3679                           
  3680                           ;doprnt.c: 601: width += *f++ - '0';
  3681  00009E  0ED0               	movlw	208
  3682  0000A0  0100               	movlb	0	; () banked
  3683  0000A2  6F94               	movwf	??_printf& (0+255),b
  3684  0000A4  0EFF               	movlw	255
  3685  0000A6  0100               	movlb	0	; () banked
  3686  0000A8  6F95               	movwf	(??_printf+1)& (0+255),b
  3687  0000AA  C08C  FFF6         	movff	printf@f,tblptrl
  3688  0000AE  C08D  FFF7         	movff	printf@f+1,tblptrh
  3689  0000B2                     	if	0	;tblptru may be non-zero
  3690  0000B2                     	endif
  3691  0000B2                     	if	0	;tblptru may be non-zero
  3692  0000B2                     	endif
  3693  0000B2  0008               	tblrd		*
  3694  0000B4  50F5               	movf	tablat,w,c
  3695  0000B6  0100               	movlb	0	; () banked
  3696  0000B8  6F96               	movwf	(??_printf+2)& (0+255),b
  3697  0000BA  6B97               	clrf	(??_printf+3)& (0+255),b
  3698  0000BC  0100               	movlb	0	; () banked
  3699  0000BE  5194               	movf	??_printf& (0+255),w,b
  3700  0000C0  0100               	movlb	0	; () banked
  3701  0000C2  2796               	addwf	(??_printf+2)& (0+255),f,b
  3702  0000C4  0100               	movlb	0	; () banked
  3703  0000C6  5195               	movf	(??_printf+1)& (0+255),w,b
  3704  0000C8  0100               	movlb	0	; () banked
  3705  0000CA  2397               	addwfc	(??_printf+3)& (0+255),f,b
  3706  0000CC  0100               	movlb	0	; () banked
  3707  0000CE  5196               	movf	(??_printf+2)& (0+255),w,b
  3708  0000D0  0100               	movlb	0	; () banked
  3709  0000D2  27A3               	addwf	printf@width& (0+255),f,b
  3710  0000D4  0100               	movlb	0	; () banked
  3711  0000D6  5197               	movf	(??_printf+3)& (0+255),w,b
  3712  0000D8  0100               	movlb	0	; () banked
  3713  0000DA  23A4               	addwfc	(printf@width+1)& (0+255),f,b
  3714                           
  3715                           ; BSR set to: 0
  3716  0000DC  0100               	movlb	0	; () banked
  3717  0000DE  4B8C               	infsnz	printf@f& (0+255),f,b
  3718  0000E0  2B8D               	incf	(printf@f+1)& (0+255),f,b
  3719                           
  3720                           ; BSR set to: 0
  3721                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  3722  0000E2  C08C  FFF6         	movff	printf@f,tblptrl
  3723  0000E6  C08D  FFF7         	movff	printf@f+1,tblptrh
  3724  0000EA                     	if	0	;tblptru may be non-zero
  3725  0000EA                     	endif
  3726  0000EA                     	if	0	;tblptru may be non-zero
  3727  0000EA                     	endif
  3728  0000EA  0008               	tblrd		*
  3729  0000EC  50F5               	movf	tablat,w,c
  3730  0000EE  EC3B  F013         	call	_isdigit
  3731  0000F2  A0D8               	btfss	status,0,c
  3732  0000F4  D052               	goto	l3313
  3733  0000F6  D7C4               	goto	l3279
  3734  0000F8                     l3287:
  3735                           
  3736                           ;doprnt.c: 721: flag |= 0x80;
  3737  0000F8  0100               	movlb	0	; () banked
  3738  0000FA  8FA2               	bsf	printf@flag& (0+255),7,b
  3739                           
  3740                           ;doprnt.c: 723: break;
  3741  0000FC  D06A               	goto	l3315
  3742  0000FE                     l3289:
  3743                           
  3744                           ; BSR set to: 0
  3745                           ;doprnt.c: 757: if(width > len)
  3746  0000FE  0100               	movlb	0	; () banked
  3747  000100  51A3               	movf	printf@width& (0+255),w,b
  3748  000102  0100               	movlb	0	; () banked
  3749  000104  5D9D               	subwf	printf@len& (0+255),w,b
  3750  000106  0100               	movlb	0	; () banked
  3751  000108  51A4               	movf	(printf@width+1)& (0+255),w,b
  3752  00010A  0100               	movlb	0	; () banked
  3753  00010C  599E               	subwfb	(printf@len+1)& (0+255),w,b
  3754  00010E  B0D8               	btfsc	status,0,c
  3755  000110  D009               	goto	l3293
  3756                           
  3757                           ; BSR set to: 0
  3758                           ;doprnt.c: 758: width -= len;
  3759  000112  0100               	movlb	0	; () banked
  3760  000114  519D               	movf	printf@len& (0+255),w,b
  3761  000116  0100               	movlb	0	; () banked
  3762  000118  5FA3               	subwf	printf@width& (0+255),f,b
  3763  00011A  0100               	movlb	0	; () banked
  3764  00011C  519E               	movf	(printf@len+1)& (0+255),w,b
  3765  00011E  0100               	movlb	0	; () banked
  3766  000120  5BA4               	subwfb	(printf@width+1)& (0+255),f,b
  3767  000122  D009               	goto	l3297
  3768  000124                     l3293:
  3769                           
  3770                           ; BSR set to: 0
  3771                           ;doprnt.c: 759: else
  3772                           ;doprnt.c: 760: width = 0;
  3773  000124  0E00               	movlw	0
  3774  000126  0100               	movlb	0	; () banked
  3775  000128  6FA4               	movwf	(printf@width+1)& (0+255),b
  3776  00012A  0E00               	movlw	0
  3777  00012C  6FA3               	movwf	printf@width& (0+255),b
  3778                           
  3779                           ; BSR set to: 0
  3780                           ;doprnt.c: 764: while(width--)
  3781  00012E  D003               	goto	l3297
  3782  000130                     l3295:
  3783                           
  3784                           ; BSR set to: 0
  3785                           ;doprnt.c: 765: (putch(' ') );
  3786  000130  0E20               	movlw	32
  3787  000132  EC2C  F014         	call	_putch
  3788  000136                     l3297:
  3789  000136  0100               	movlb	0	; () banked
  3790  000138  07A3               	decf	printf@width& (0+255),f,b
  3791  00013A  A0D8               	btfss	status,0,c
  3792  00013C  07A4               	decf	(printf@width+1)& (0+255),f,b
  3793  00013E  0100               	movlb	0	; () banked
  3794  000140  29A3               	incf	printf@width& (0+255),w,b
  3795  000142  E1F6               	bnz	l3295
  3796  000144  0100               	movlb	0	; () banked
  3797  000146  29A4               	incf	(printf@width+1)& (0+255),w,b
  3798  000148  B4D8               	btfsc	status,2,c
  3799  00014A  D00B               	goto	l3303
  3800  00014C  D7F1               	goto	l3295
  3801  00014E                     l3299:
  3802                           
  3803                           ; BSR set to: 0
  3804                           ;doprnt.c: 768: (putch(*cp++) );
  3805  00014E  C098  FFD9         	movff	printf@cp,fsr2l
  3806  000152  C099  FFDA         	movff	printf@cp+1,fsr2h
  3807  000156  50DF               	movf	indf2,w,c
  3808  000158  EC2C  F014         	call	_putch
  3809  00015C  0100               	movlb	0	; () banked
  3810  00015E  4B98               	infsnz	printf@cp& (0+255),f,b
  3811  000160  2B99               	incf	(printf@cp+1)& (0+255),f,b
  3812  000162                     l3303:
  3813                           
  3814                           ; BSR set to: 0
  3815  000162  0100               	movlb	0	; () banked
  3816  000164  079D               	decf	printf@len& (0+255),f,b
  3817  000166  A0D8               	btfss	status,0,c
  3818  000168  079E               	decf	(printf@len+1)& (0+255),f,b
  3819  00016A  0100               	movlb	0	; () banked
  3820  00016C  299D               	incf	printf@len& (0+255),w,b
  3821  00016E  E1EF               	bnz	l3299
  3822  000170  0100               	movlb	0	; () banked
  3823  000172  299E               	incf	(printf@len+1)& (0+255),w,b
  3824  000174  B4D8               	btfsc	status,2,c
  3825  000176  D173               	goto	l3413
  3826  000178  D7EA               	goto	l3299
  3827  00017A                     l3305:
  3828                           
  3829                           ; BSR set to: 0
  3830                           ;doprnt.c: 805: cp = (char *)&c;
  3831  00017A  0EA5               	movlw	low printf@c
  3832  00017C  0100               	movlb	0	; () banked
  3833  00017E  6F98               	movwf	printf@cp& (0+255),b
  3834  000180  0E00               	movlw	high printf@c
  3835  000182  0100               	movlb	0	; () banked
  3836  000184  6F99               	movwf	(printf@cp+1)& (0+255),b
  3837                           
  3838                           ; BSR set to: 0
  3839                           ;doprnt.c: 806: len = 1;
  3840  000186  0E00               	movlw	0
  3841  000188  0100               	movlb	0	; () banked
  3842  00018A  6F9E               	movwf	(printf@len+1)& (0+255),b
  3843  00018C  0E01               	movlw	1
  3844  00018E  6F9D               	movwf	printf@len& (0+255),b
  3845                           
  3846                           ;doprnt.c: 807: goto dostring;
  3847  000190  D7B6               	goto	l3289
  3848  000192                     l3309:
  3849                           
  3850                           ; BSR set to: 0
  3851                           ;doprnt.c: 818: flag |= 0xC0;
  3852  000192  0EC0               	movlw	192
  3853  000194  0100               	movlb	0	; () banked
  3854  000196  13A2               	iorwf	printf@flag& (0+255),f,b
  3855                           
  3856                           ; BSR set to: 0
  3857                           ;doprnt.c: 822: }
  3858                           
  3859                           ;doprnt.c: 819: break;
  3860  000198  D01C               	goto	l3315
  3861  00019A                     l3313:
  3862  00019A  C08C  FFF6         	movff	printf@f,tblptrl
  3863  00019E  C08D  FFF7         	movff	printf@f+1,tblptrh
  3864  0001A2  0100               	movlb	0	; () banked
  3865  0001A4  4B8C               	infsnz	printf@f& (0+255),f,b
  3866  0001A6  2B8D               	incf	(printf@f+1)& (0+255),f,b
  3867  0001A8                     	if	0	;tblptru may be non-zero
  3868  0001A8                     	endif
  3869  0001A8                     	if	0	;tblptru may be non-zero
  3870  0001A8                     	endif
  3871  0001A8  0008               	tblrd		*
  3872  0001AA  CFF5 F0A5          	movff	tablat,printf@c
  3873  0001AE  0100               	movlb	0	; () banked
  3874  0001B0  51A5               	movf	printf@c& (0+255),w,b
  3875                           
  3876                           ; Switch size 1, requested type "space"
  3877                           ; Number of cases is 5, Range of values is 0 to 120
  3878                           ; switch strategies available:
  3879                           ; Name         Instructions Cycles
  3880                           ; simple_byte           16     9 (average)
  3881                           ;	Chosen strategy is simple_byte
  3882  0001B2  0A00               	xorlw	0	; case 0
  3883  0001B4  B4D8               	btfsc	status,2,c
  3884  0001B6  0012               	return	
  3885  0001B8  0A64               	xorlw	100	; case 100
  3886  0001BA  B4D8               	btfsc	status,2,c
  3887  0001BC  D00A               	goto	l3315
  3888  0001BE  0A0D               	xorlw	13	; case 105
  3889  0001C0  B4D8               	btfsc	status,2,c
  3890  0001C2  D007               	goto	l3315
  3891  0001C4  0A1C               	xorlw	28	; case 117
  3892  0001C6  B4D8               	btfsc	status,2,c
  3893  0001C8  D7E4               	goto	l3309
  3894  0001CA  0A0D               	xorlw	13	; case 120
  3895  0001CC  B4D8               	btfsc	status,2,c
  3896  0001CE  D794               	goto	l3287
  3897  0001D0  D7D4               	goto	l3305
  3898  0001D2                     l3315:
  3899                           
  3900                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  3901  0001D2  C0A2  F094         	movff	printf@flag,??_printf
  3902  0001D6  0EC0               	movlw	192
  3903  0001D8  0100               	movlb	0	; () banked
  3904  0001DA  1794               	andwf	??_printf& (0+255),f,b
  3905  0001DC  A4D8               	btfss	status,2,c
  3906  0001DE  D019               	goto	l3327
  3907                           
  3908                           ; BSR set to: 0
  3909                           ;doprnt.c: 1253: {
  3910                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3911  0001E0  C09B  FFD9         	movff	printf@ap,fsr2l
  3912  0001E4  C09C  FFDA         	movff	printf@ap+1,fsr2h
  3913  0001E8  CFDE F0A0          	movff	postinc2,printf@val
  3914  0001EC  CFDD F0A1          	movff	postdec2,printf@val+1
  3915                           
  3916                           ; BSR set to: 0
  3917  0001F0  0E02               	movlw	2
  3918  0001F2  0100               	movlb	0	; () banked
  3919  0001F4  279B               	addwf	printf@ap& (0+255),f,b
  3920  0001F6  0E00               	movlw	0
  3921  0001F8  239C               	addwfc	(printf@ap+1)& (0+255),f,b
  3922                           
  3923                           ; BSR set to: 0
  3924                           ;doprnt.c: 1261: if((int)val < 0) {
  3925  0001FA  0100               	movlb	0	; () banked
  3926  0001FC  AFA1               	btfss	(printf@val+1)& (0+255),7,b
  3927  0001FE  D053               	goto	l3361
  3928                           
  3929                           ; BSR set to: 0
  3930                           ;doprnt.c: 1262: flag |= 0x03;
  3931  000200  0E03               	movlw	3
  3932  000202  0100               	movlb	0	; () banked
  3933  000204  13A2               	iorwf	printf@flag& (0+255),f,b
  3934                           
  3935                           ; BSR set to: 0
  3936                           ;doprnt.c: 1263: val = -val;
  3937  000206  0100               	movlb	0	; () banked
  3938  000208  6DA0               	negf	printf@val& (0+255),b
  3939  00020A  1FA1               	comf	(printf@val+1)& (0+255),f,b
  3940  00020C  B0D8               	btfsc	status,0,c
  3941  00020E  2BA1               	incf	(printf@val+1)& (0+255),f,b
  3942                           
  3943                           ; BSR set to: 0
  3944                           ;doprnt.c: 1264: }
  3945                           ;doprnt.c: 1266: }
  3946  000210  D04A               	goto	l3361
  3947  000212                     l3327:
  3948                           
  3949                           ; BSR set to: 0
  3950                           ;doprnt.c: 1268: else
  3951                           ;doprnt.c: 1273: {
  3952                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3953  000212  C09B  FFD9         	movff	printf@ap,fsr2l
  3954  000216  C09C  FFDA         	movff	printf@ap+1,fsr2h
  3955  00021A  CFDE F0A0          	movff	postinc2,printf@val
  3956  00021E  CFDD F0A1          	movff	postdec2,printf@val+1
  3957                           
  3958                           ; BSR set to: 0
  3959  000222  0E02               	movlw	2
  3960  000224  0100               	movlb	0	; () banked
  3961  000226  279B               	addwf	printf@ap& (0+255),f,b
  3962  000228  0E00               	movlw	0
  3963  00022A  239C               	addwfc	(printf@ap+1)& (0+255),f,b
  3964                           
  3965                           ; BSR set to: 0
  3966                           ;doprnt.c: 1287: }
  3967                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  3968  00022C  D03C               	goto	l3361
  3969  00022E                     l3331:
  3970                           
  3971                           ; BSR set to: 0
  3972                           ;doprnt.c: 1302: case 0xC0:
  3973                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3974  00022E  0E01               	movlw	1
  3975  000230  0100               	movlb	0	; () banked
  3976  000232  6FA5               	movwf	printf@c& (0+255),b
  3977  000234                     l3333:
  3978                           
  3979                           ; BSR set to: 0
  3980  000234  0E05               	movlw	5
  3981  000236  0100               	movlb	0	; () banked
  3982  000238  19A5               	xorwf	printf@c& (0+255),w,b
  3983  00023A  B4D8               	btfsc	status,2,c
  3984  00023C  D040               	goto	l3363
  3985                           
  3986                           ; BSR set to: 0
  3987                           ;doprnt.c: 1306: if(val < dpowers[c])
  3988                           
  3989                           ; BSR set to: 0
  3990                           
  3991                           ; BSR set to: 0
  3992  00023E  0100               	movlb	0	; () banked
  3993  000240  51A5               	movf	printf@c& (0+255),w,b
  3994  000242  0D02               	mullw	2
  3995  000244  0EC9               	movlw	low _dpowers
  3996  000246  24F3               	addwf	prodl,w,c
  3997  000248  6EF6               	movwf	tblptrl,c
  3998  00024A  0EFD               	movlw	high _dpowers
  3999  00024C  20F4               	addwfc	prodh,w,c
  4000  00024E  6EF7               	movwf	tblptrh,c
  4001  000250                     	if	0	;There are less than 3 active tblptr bytes
  4002  000250                     	endif
  4003  000250  0009               	tblrd		*+
  4004  000252  50F5               	movf	tablat,w,c
  4005  000254  0100               	movlb	0	; () banked
  4006  000256  5DA0               	subwf	printf@val& (0+255),w,b
  4007  000258  0009               	tblrd		*+
  4008  00025A  50F5               	movf	tablat,w,c
  4009  00025C  0100               	movlb	0	; () banked
  4010  00025E  59A1               	subwfb	(printf@val+1)& (0+255),w,b
  4011  000260  A0D8               	btfss	status,0,c
  4012  000262  D02D               	goto	l3363
  4013                           
  4014                           ; BSR set to: 0
  4015                           
  4016                           ; BSR set to: 0
  4017                           
  4018                           ; BSR set to: 0
  4019                           ;doprnt.c: 1307: break;
  4020  000264  0100               	movlb	0	; () banked
  4021  000266  2BA5               	incf	printf@c& (0+255),f,b
  4022  000268  D7E5               	goto	l3333
  4023  00026A                     l3345:
  4024                           
  4025                           ; BSR set to: 0
  4026                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4027  00026A  0E01               	movlw	1
  4028  00026C  0100               	movlb	0	; () banked
  4029  00026E  6FA5               	movwf	printf@c& (0+255),b
  4030  000270                     l3347:
  4031                           
  4032                           ; BSR set to: 0
  4033  000270  0E04               	movlw	4
  4034  000272  0100               	movlb	0	; () banked
  4035  000274  19A5               	xorwf	printf@c& (0+255),w,b
  4036  000276  B4D8               	btfsc	status,2,c
  4037  000278  D022               	goto	l3363
  4038                           
  4039                           ; BSR set to: 0
  4040                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4041                           
  4042                           ; BSR set to: 0
  4043                           
  4044                           ; BSR set to: 0
  4045  00027A  0100               	movlb	0	; () banked
  4046  00027C  51A5               	movf	printf@c& (0+255),w,b
  4047  00027E  0D02               	mullw	2
  4048  000280  0ED3               	movlw	low _hexpowers
  4049  000282  24F3               	addwf	prodl,w,c
  4050  000284  6EF6               	movwf	tblptrl,c
  4051  000286  0EFD               	movlw	high _hexpowers
  4052  000288  20F4               	addwfc	prodh,w,c
  4053  00028A  6EF7               	movwf	tblptrh,c
  4054  00028C                     	if	0	;There are less than 3 active tblptr bytes
  4055  00028C                     	endif
  4056  00028C  0009               	tblrd		*+
  4057  00028E  50F5               	movf	tablat,w,c
  4058  000290  0100               	movlb	0	; () banked
  4059  000292  5DA0               	subwf	printf@val& (0+255),w,b
  4060  000294  0009               	tblrd		*+
  4061  000296  50F5               	movf	tablat,w,c
  4062  000298  0100               	movlb	0	; () banked
  4063  00029A  59A1               	subwfb	(printf@val+1)& (0+255),w,b
  4064  00029C  A0D8               	btfss	status,0,c
  4065  00029E  D00F               	goto	l3363
  4066                           
  4067                           ; BSR set to: 0
  4068                           
  4069                           ; BSR set to: 0
  4070                           
  4071                           ; BSR set to: 0
  4072                           ;doprnt.c: 1318: break;
  4073  0002A0  0100               	movlb	0	; () banked
  4074  0002A2  2BA5               	incf	printf@c& (0+255),f,b
  4075  0002A4  D7E5               	goto	l3347
  4076  0002A6                     l3361:
  4077                           
  4078                           ; BSR set to: 0
  4079  0002A6  0100               	movlb	0	; () banked
  4080  0002A8  51A2               	movf	printf@flag& (0+255),w,b
  4081  0002AA  0BC0               	andlw	192
  4082                           
  4083                           ; Switch size 1, requested type "space"
  4084                           ; Number of cases is 3, Range of values is 0 to 192
  4085                           ; switch strategies available:
  4086                           ; Name         Instructions Cycles
  4087                           ; simple_byte           10     6 (average)
  4088                           ;	Chosen strategy is simple_byte
  4089  0002AC  0A00               	xorlw	0	; case 0
  4090  0002AE  B4D8               	btfsc	status,2,c
  4091  0002B0  D7BE               	goto	l3331
  4092  0002B2  0A80               	xorlw	128	; case 128
  4093  0002B4  B4D8               	btfsc	status,2,c
  4094  0002B6  D7D9               	goto	l3345
  4095  0002B8  0A40               	xorlw	64	; case 192
  4096  0002BA  B4D8               	btfsc	status,2,c
  4097  0002BC  D7B8               	goto	l3331
  4098  0002BE                     l3363:
  4099                           
  4100                           ; BSR set to: 0
  4101                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4102  0002BE  0100               	movlb	0	; () banked
  4103  0002C0  51A3               	movf	printf@width& (0+255),w,b
  4104  0002C2  0100               	movlb	0	; () banked
  4105  0002C4  11A4               	iorwf	(printf@width+1)& (0+255),w,b
  4106  0002C6  B4D8               	btfsc	status,2,c
  4107  0002C8  D00B               	goto	l3369
  4108                           
  4109                           ; BSR set to: 0
  4110  0002CA  C0A2  F094         	movff	printf@flag,??_printf
  4111  0002CE  0E03               	movlw	3
  4112  0002D0  0100               	movlb	0	; () banked
  4113  0002D2  1794               	andwf	??_printf& (0+255),f,b
  4114  0002D4  B4D8               	btfsc	status,2,c
  4115  0002D6  D004               	goto	l3369
  4116                           
  4117                           ; BSR set to: 0
  4118                           ;doprnt.c: 1346: width--;
  4119  0002D8  0100               	movlb	0	; () banked
  4120  0002DA  07A3               	decf	printf@width& (0+255),f,b
  4121  0002DC  A0D8               	btfss	status,0,c
  4122  0002DE  07A4               	decf	(printf@width+1)& (0+255),f,b
  4123  0002E0                     l3369:
  4124                           
  4125                           ; BSR set to: 0
  4126                           ;doprnt.c: 1381: if(width > c)
  4127  0002E0  0E80               	movlw	128
  4128  0002E2  0100               	movlb	0	; () banked
  4129  0002E4  BFA5               	btfsc	printf@c& (0+255),7,b
  4130  0002E6  0E7F               	movlw	127
  4131  0002E8  0100               	movlb	0	; () banked
  4132  0002EA  6F94               	movwf	??_printf& (0+255),b
  4133  0002EC  0100               	movlb	0	; () banked
  4134  0002EE  51A3               	movf	printf@width& (0+255),w,b
  4135  0002F0  0100               	movlb	0	; () banked
  4136  0002F2  5DA5               	subwf	printf@c& (0+255),w,b
  4137  0002F4  0100               	movlb	0	; () banked
  4138  0002F6  51A4               	movf	(printf@width+1)& (0+255),w,b
  4139  0002F8  0A80               	xorlw	128
  4140  0002FA  0100               	movlb	0	; () banked
  4141  0002FC  5994               	subwfb	??_printf& (0+255),w,b
  4142  0002FE  B0D8               	btfsc	status,0,c
  4143  000300  D00B               	goto	l3373
  4144                           
  4145                           ; BSR set to: 0
  4146                           ;doprnt.c: 1382: width -= c;
  4147  000302  0100               	movlb	0	; () banked
  4148  000304  51A5               	movf	printf@c& (0+255),w,b
  4149  000306  0100               	movlb	0	; () banked
  4150  000308  5FA3               	subwf	printf@width& (0+255),f,b
  4151  00030A  0E00               	movlw	0
  4152  00030C  0100               	movlb	0	; () banked
  4153  00030E  BFA5               	btfsc	printf@c& (0+255),7,b
  4154  000310  0EFF               	movlw	255
  4155  000312  0100               	movlb	0	; () banked
  4156  000314  5BA4               	subwfb	(printf@width+1)& (0+255),f,b
  4157  000316  D005               	goto	l3375
  4158  000318                     l3373:
  4159                           
  4160                           ; BSR set to: 0
  4161                           ;doprnt.c: 1383: else
  4162                           ;doprnt.c: 1384: width = 0;
  4163  000318  0E00               	movlw	0
  4164  00031A  0100               	movlb	0	; () banked
  4165  00031C  6FA4               	movwf	(printf@width+1)& (0+255),b
  4166  00031E  0E00               	movlw	0
  4167  000320  6FA3               	movwf	printf@width& (0+255),b
  4168  000322                     l3375:
  4169                           
  4170                           ; BSR set to: 0
  4171                           ;doprnt.c: 1387: if(flag & 0x04) {
  4172  000322  0100               	movlb	0	; () banked
  4173  000324  A5A2               	btfss	printf@flag& (0+255),2,b
  4174  000326  D018               	goto	l3387
  4175                           
  4176                           ; BSR set to: 0
  4177                           ;doprnt.c: 1392: if(flag & 0x03)
  4178  000328  C0A2  F094         	movff	printf@flag,??_printf
  4179  00032C  0E03               	movlw	3
  4180  00032E  0100               	movlb	0	; () banked
  4181  000330  1794               	andwf	??_printf& (0+255),f,b
  4182  000332  B4D8               	btfsc	status,2,c
  4183  000334  D003               	goto	l3381
  4184                           
  4185                           ; BSR set to: 0
  4186                           ;doprnt.c: 1393: (putch('-') );
  4187  000336  0E2D               	movlw	45
  4188  000338  EC2C  F014         	call	_putch
  4189  00033C                     l3381:
  4190                           
  4191                           ;doprnt.c: 1415: if(width)
  4192  00033C  0100               	movlb	0	; () banked
  4193  00033E  51A3               	movf	printf@width& (0+255),w,b
  4194  000340  0100               	movlb	0	; () banked
  4195  000342  11A4               	iorwf	(printf@width+1)& (0+255),w,b
  4196  000344  B4D8               	btfsc	status,2,c
  4197  000346  D025               	goto	l3397
  4198                           
  4199                           ; BSR set to: 0
  4200                           ;doprnt.c: 1417: (putch('0') );
  4201                           
  4202                           ; BSR set to: 0
  4203                           
  4204                           ;doprnt.c: 1416: do
  4205  000348  0E30               	movlw	48
  4206  00034A  EC2C  F014         	call	_putch
  4207                           
  4208                           ;doprnt.c: 1418: while(--width);
  4209  00034E  0100               	movlb	0	; () banked
  4210  000350  07A3               	decf	printf@width& (0+255),f,b
  4211  000352  A0D8               	btfss	status,0,c
  4212  000354  07A4               	decf	(printf@width+1)& (0+255),f,b
  4213  000356  D7F2               	goto	l3381
  4214  000358                     l3387:
  4215                           
  4216                           ; BSR set to: 0
  4217                           ;doprnt.c: 1422: {
  4218                           ;doprnt.c: 1424: if(width
  4219                           ;doprnt.c: 1428: )
  4220  000358  0100               	movlb	0	; () banked
  4221  00035A  51A3               	movf	printf@width& (0+255),w,b
  4222  00035C  0100               	movlb	0	; () banked
  4223  00035E  11A4               	iorwf	(printf@width+1)& (0+255),w,b
  4224  000360  B4D8               	btfsc	status,2,c
  4225  000362  D00D               	goto	l3393
  4226  000364                     l3389:
  4227                           
  4228                           ; BSR set to: 0
  4229                           ;doprnt.c: 1430: (putch(' ') );
  4230  000364  0E20               	movlw	32
  4231  000366  EC2C  F014         	call	_putch
  4232                           
  4233                           ;doprnt.c: 1431: while(--width);
  4234  00036A  0100               	movlb	0	; () banked
  4235  00036C  07A3               	decf	printf@width& (0+255),f,b
  4236  00036E  A0D8               	btfss	status,0,c
  4237  000370  07A4               	decf	(printf@width+1)& (0+255),f,b
  4238  000372  0100               	movlb	0	; () banked
  4239  000374  51A3               	movf	printf@width& (0+255),w,b
  4240  000376  0100               	movlb	0	; () banked
  4241  000378  11A4               	iorwf	(printf@width+1)& (0+255),w,b
  4242  00037A  A4D8               	btfss	status,2,c
  4243  00037C  D7F3               	goto	l3389
  4244  00037E                     l3393:
  4245                           
  4246                           ; BSR set to: 0
  4247                           ;doprnt.c: 1438: if(flag & 0x03)
  4248  00037E  C0A2  F094         	movff	printf@flag,??_printf
  4249  000382  0E03               	movlw	3
  4250  000384  0100               	movlb	0	; () banked
  4251  000386  1794               	andwf	??_printf& (0+255),f,b
  4252  000388  B4D8               	btfsc	status,2,c
  4253  00038A  D003               	goto	l3397
  4254                           
  4255                           ; BSR set to: 0
  4256                           ;doprnt.c: 1439: (putch('-') );
  4257  00038C  0E2D               	movlw	45
  4258  00038E  EC2C  F014         	call	_putch
  4259  000392                     l3397:
  4260                           
  4261                           ;doprnt.c: 1469: }
  4262                           ;doprnt.c: 1472: prec = c;
  4263  000392  C0A5  F09F         	movff	printf@c,printf@prec
  4264                           
  4265                           ;doprnt.c: 1474: while(prec--) {
  4266  000396  D05D               	goto	l3411
  4267  000398                     l3399:
  4268                           
  4269                           ;doprnt.c: 1486: case 0xC0:
  4270                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4271  000398  0100               	movlb	0	; () banked
  4272  00039A  519F               	movf	printf@prec& (0+255),w,b
  4273  00039C  0D02               	mullw	2
  4274  00039E  0EC9               	movlw	low _dpowers
  4275  0003A0  24F3               	addwf	prodl,w,c
  4276  0003A2  6EF6               	movwf	tblptrl,c
  4277  0003A4  0EFD               	movlw	high _dpowers
  4278  0003A6  20F4               	addwfc	prodh,w,c
  4279  0003A8  6EF7               	movwf	tblptrh,c
  4280  0003AA                     	if	0	;There are less than 3 active tblptr bytes
  4281  0003AA                     	endif
  4282  0003AA  0009               	tblrd		*+
  4283  0003AC  CFF5 F082          	movff	tablat,___lwdiv@divisor
  4284  0003B0  000A               	tblrd		*-
  4285  0003B2  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  4286  0003B6  C0A0  F080         	movff	printf@val,___lwdiv@dividend
  4287  0003BA  C0A1  F081         	movff	printf@val+1,___lwdiv@dividend+1
  4288  0003BE  EC46  F00F         	call	___lwdiv	;wreg free
  4289  0003C2  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  4290  0003C6  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  4291  0003CA  0E00               	movlw	0
  4292  0003CC  0100               	movlb	0	; () banked
  4293  0003CE  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  4294  0003D0  0E0A               	movlw	10
  4295  0003D2  6F89               	movwf	___lwmod@divisor& (0+255),b
  4296  0003D4  EC0E  F011         	call	___lwmod	;wreg free
  4297  0003D8  0100               	movlb	0	; () banked
  4298  0003DA  5187               	movf	?___lwmod& (0+255),w,b
  4299  0003DC  0F30               	addlw	48
  4300  0003DE  0100               	movlb	0	; () banked
  4301  0003E0  6FA5               	movwf	printf@c& (0+255),b
  4302                           
  4303                           ;doprnt.c: 1491: break;
  4304  0003E2  D033               	goto	l3409
  4305  0003E4                     l3401:
  4306                           
  4307                           ; BSR set to: 0
  4308                           ;doprnt.c: 1499: {
  4309                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  4310  0003E4  C0A0  F080         	movff	printf@val,___lwdiv@dividend
  4311  0003E8  C0A1  F081         	movff	printf@val+1,___lwdiv@dividend+1
  4312  0003EC  0100               	movlb	0	; () banked
  4313  0003EE  519F               	movf	printf@prec& (0+255),w,b
  4314  0003F0  0D02               	mullw	2
  4315  0003F2  0ED3               	movlw	low _hexpowers
  4316  0003F4  24F3               	addwf	prodl,w,c
  4317  0003F6  6EF6               	movwf	tblptrl,c
  4318  0003F8  0EFD               	movlw	high _hexpowers
  4319  0003FA  20F4               	addwfc	prodh,w,c
  4320  0003FC  6EF7               	movwf	tblptrh,c
  4321  0003FE                     	if	0	;There are less than 3 active tblptr bytes
  4322  0003FE                     	endif
  4323  0003FE  0009               	tblrd		*+
  4324  000400  CFF5 F082          	movff	tablat,___lwdiv@divisor
  4325  000404  000A               	tblrd		*-
  4326  000406  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  4327  00040A  EC46  F00F         	call	___lwdiv	;wreg free
  4328  00040E  0100               	movlb	0	; () banked
  4329  000410  5180               	movf	?___lwdiv& (0+255),w,b
  4330  000412  0B0F               	andlw	15
  4331  000414  0100               	movlb	0	; () banked
  4332  000416  6F9A               	movwf	printf@idx& (0+255),b
  4333                           
  4334                           ; BSR set to: 0
  4335                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  4336  000418  0100               	movlb	0	; () banked
  4337  00041A  519A               	movf	printf@idx& (0+255),w,b
  4338  00041C  0D01               	mullw	1
  4339  00041E  0E93               	movlw	low STR_46
  4340  000420  24F3               	addwf	prodl,w,c
  4341  000422  6EF6               	movwf	tblptrl,c
  4342  000424  0EFF               	movlw	high STR_46
  4343  000426  20F4               	addwfc	prodh,w,c
  4344  000428  6EF7               	movwf	tblptrh,c
  4345  00042A                     	if	0	;There are less than 3 active tblptr bytes
  4346  00042A                     	endif
  4347  00042A  0008               	tblrd		*
  4348  00042C  CFF5 F0A5          	movff	tablat,printf@c
  4349                           
  4350                           ; BSR set to: 0
  4351                           ;doprnt.c: 1523: }
  4352                           
  4353                           ;doprnt.c: 1508: }
  4354                           ;doprnt.c: 1510: break;
  4355  000430  D00C               	goto	l3409
  4356  000432                     l3407:
  4357  000432  0100               	movlb	0	; () banked
  4358  000434  51A2               	movf	printf@flag& (0+255),w,b
  4359  000436  0BC0               	andlw	192
  4360                           
  4361                           ; Switch size 1, requested type "space"
  4362                           ; Number of cases is 3, Range of values is 0 to 192
  4363                           ; switch strategies available:
  4364                           ; Name         Instructions Cycles
  4365                           ; simple_byte           10     6 (average)
  4366                           ;	Chosen strategy is simple_byte
  4367  000438  0A00               	xorlw	0	; case 0
  4368  00043A  B4D8               	btfsc	status,2,c
  4369  00043C  D7AD               	goto	l3399
  4370  00043E  0A80               	xorlw	128	; case 128
  4371  000440  B4D8               	btfsc	status,2,c
  4372  000442  D7D0               	goto	l3401
  4373  000444  0A40               	xorlw	64	; case 192
  4374  000446  B4D8               	btfsc	status,2,c
  4375  000448  D7A7               	goto	l3399
  4376  00044A                     l3409:
  4377                           
  4378                           ; BSR set to: 0
  4379                           ;doprnt.c: 1524: (putch(c) );
  4380  00044A  0100               	movlb	0	; () banked
  4381  00044C  51A5               	movf	printf@c& (0+255),w,b
  4382  00044E  EC2C  F014         	call	_putch
  4383  000452                     l3411:
  4384  000452  0100               	movlb	0	; () banked
  4385  000454  079F               	decf	printf@prec& (0+255),f,b
  4386  000456  0100               	movlb	0	; () banked
  4387  000458  299F               	incf	printf@prec& (0+255),w,b
  4388  00045A  A4D8               	btfss	status,2,c
  4389  00045C  D7EA               	goto	l3407
  4390  00045E                     l3413:
  4391  00045E  C08C  FFF6         	movff	printf@f,tblptrl
  4392  000462  C08D  FFF7         	movff	printf@f+1,tblptrh
  4393  000466  0100               	movlb	0	; () banked
  4394  000468  4B8C               	infsnz	printf@f& (0+255),f,b
  4395  00046A  2B8D               	incf	(printf@f+1)& (0+255),f,b
  4396  00046C                     	if	0	;tblptru may be non-zero
  4397  00046C                     	endif
  4398  00046C                     	if	0	;tblptru may be non-zero
  4399  00046C                     	endif
  4400  00046C  0008               	tblrd		*
  4401  00046E  CFF5 F0A5          	movff	tablat,printf@c
  4402  000472  0100               	movlb	0	; () banked
  4403  000474  51A5               	movf	printf@c& (0+255),w,b
  4404  000476  B4D8               	btfsc	status,2,c
  4405  000478  0012               	return	
  4406  00047A  D5D2               	goto	l3263
  4407  00047C                     __end_of_printf:
  4408                           	opt stack 0
  4409                           tblptru	equ	0xFF8
  4410                           tblptrh	equ	0xFF7
  4411                           tblptrl	equ	0xFF6
  4412                           tablat	equ	0xFF5
  4413                           prodh	equ	0xFF4
  4414                           prodl	equ	0xFF3
  4415                           postinc0	equ	0xFEE
  4416                           wreg	equ	0xFE8
  4417                           indf2	equ	0xFDF
  4418                           postinc2	equ	0xFDE
  4419                           postdec2	equ	0xFDD
  4420                           fsr2h	equ	0xFDA
  4421                           fsr2l	equ	0xFD9
  4422                           status	equ	0xFD8
  4423                           
  4424 ;; *************** function _putch *****************
  4425 ;; Defined at:
  4426 ;;		line 25 in file "lcd.c"
  4427 ;; Parameters:    Size  Location     Type
  4428 ;;  data            1    wreg     unsigned char 
  4429 ;; Auto vars:     Size  Location     Type
  4430 ;;  data            1    2[BANK0 ] unsigned char 
  4431 ;; Return value:  Size  Location     Type
  4432 ;;                  1    wreg      void 
  4433 ;; Registers used:
  4434 ;;		wreg, status,2, status,0, cstack
  4435 ;; Tracked objects:
  4436 ;;		On entry : 0/0
  4437 ;;		On exit  : 0/0
  4438 ;;		Unchanged: 0/0
  4439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4441 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4443 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4444 ;;Total ram usage:        1 bytes
  4445 ;; Hardware stack levels used:    1
  4446 ;; Hardware stack levels required when called:    8
  4447 ;; This function calls:
  4448 ;;		_lcdNibble
  4449 ;; This function is called by:
  4450 ;;		_printf
  4451 ;; This function uses a non-reentrant model
  4452 ;;
  4453                           
  4454                           	psect	text14
  4455  002858                     __ptext14:
  4456                           	opt stack 0
  4457  002858                     _putch:
  4458                           	opt stack 20
  4459                           
  4460                           ;incstack = 0
  4461                           ;putch@data stored from wreg
  4462  002858  0100               	movlb	0	; () banked
  4463  00285A  6F82               	movwf	putch@data& (0+255),b
  4464                           
  4465                           ;lcd.c: 26: LATDbits.LATD2 = 1;
  4466  00285C  848C               	bsf	3980,2,c	;volatile
  4467                           
  4468                           ;lcd.c: 27: lcdNibble(data);
  4469  00285E  0100               	movlb	0	; () banked
  4470  002860  5182               	movf	putch@data& (0+255),w,b
  4471  002862  ECDA  F010         	call	_lcdNibble
  4472  002866  0012               	return		;funcret
  4473  002868                     __end_of_putch:
  4474                           	opt stack 0
  4475                           tblptru	equ	0xFF8
  4476                           tblptrh	equ	0xFF7
  4477                           tblptrl	equ	0xFF6
  4478                           tablat	equ	0xFF5
  4479                           prodh	equ	0xFF4
  4480                           prodl	equ	0xFF3
  4481                           postinc0	equ	0xFEE
  4482                           wreg	equ	0xFE8
  4483                           indf2	equ	0xFDF
  4484                           postinc2	equ	0xFDE
  4485                           postdec2	equ	0xFDD
  4486                           fsr2h	equ	0xFDA
  4487                           fsr2l	equ	0xFD9
  4488                           status	equ	0xFD8
  4489                           
  4490 ;; *************** function _isdigit *****************
  4491 ;; Defined at:
  4492 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  4493 ;; Parameters:    Size  Location     Type
  4494 ;;  c               1    wreg     unsigned char 
  4495 ;; Auto vars:     Size  Location     Type
  4496 ;;  c               1    2[BANK0 ] unsigned char 
  4497 ;; Return value:  Size  Location     Type
  4498 ;;		None               void
  4499 ;; Registers used:
  4500 ;;		wreg, status,2, status,0
  4501 ;; Tracked objects:
  4502 ;;		On entry : 0/0
  4503 ;;		On exit  : 0/0
  4504 ;;		Unchanged: 0/0
  4505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4507 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4508 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4509 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4510 ;;Total ram usage:        3 bytes
  4511 ;; Hardware stack levels used:    1
  4512 ;; Hardware stack levels required when called:    7
  4513 ;; This function calls:
  4514 ;;		Nothing
  4515 ;; This function is called by:
  4516 ;;		_printf
  4517 ;; This function uses a non-reentrant model
  4518 ;;
  4519                           
  4520                           	psect	text15
  4521  002676                     __ptext15:
  4522                           	opt stack 0
  4523  002676                     _isdigit:
  4524                           	opt stack 21
  4525                           
  4526                           ;incstack = 0
  4527                           ;isdigit@c stored from wreg
  4528  002676  0100               	movlb	0	; () banked
  4529  002678  6F82               	movwf	isdigit@c& (0+255),b
  4530  00267A  0E00               	movlw	0
  4531  00267C  0100               	movlb	0	; () banked
  4532  00267E  6F81               	movwf	_isdigit$1050& (0+255),b
  4533                           
  4534                           ; BSR set to: 0
  4535  002680  0E3A               	movlw	58
  4536  002682  0100               	movlb	0	; () banked
  4537  002684  6182               	cpfslt	isdigit@c& (0+255),b
  4538  002686  D007               	goto	l3081
  4539                           
  4540                           ; BSR set to: 0
  4541  002688  0E2F               	movlw	47
  4542  00268A  0100               	movlb	0	; () banked
  4543  00268C  6582               	cpfsgt	isdigit@c& (0+255),b
  4544  00268E  D003               	goto	l3081
  4545                           
  4546                           ; BSR set to: 0
  4547  002690  0E01               	movlw	1
  4548  002692  0100               	movlb	0	; () banked
  4549  002694  6F81               	movwf	_isdigit$1050& (0+255),b
  4550  002696                     l3081:
  4551                           
  4552                           ; BSR set to: 0
  4553  002696  C081  F080         	movff	_isdigit$1050,??_isdigit
  4554  00269A  0100               	movlb	0	; () banked
  4555  00269C  3180               	rrcf	??_isdigit& (0+255),w,b
  4556  00269E  0012               	return	
  4557  0026A0                     __end_of_isdigit:
  4558                           	opt stack 0
  4559                           tblptru	equ	0xFF8
  4560                           tblptrh	equ	0xFF7
  4561                           tblptrl	equ	0xFF6
  4562                           tablat	equ	0xFF5
  4563                           prodh	equ	0xFF4
  4564                           prodl	equ	0xFF3
  4565                           postinc0	equ	0xFEE
  4566                           wreg	equ	0xFE8
  4567                           indf2	equ	0xFDF
  4568                           postinc2	equ	0xFDE
  4569                           postdec2	equ	0xFDD
  4570                           fsr2h	equ	0xFDA
  4571                           fsr2l	equ	0xFD9
  4572                           status	equ	0xFD8
  4573                           
  4574 ;; *************** function ___wmul *****************
  4575 ;; Defined at:
  4576 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  4577 ;; Parameters:    Size  Location     Type
  4578 ;;  multiplier      2    0[BANK0 ] unsigned int 
  4579 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  4580 ;; Auto vars:     Size  Location     Type
  4581 ;;  product         2    4[BANK0 ] unsigned int 
  4582 ;; Return value:  Size  Location     Type
  4583 ;;                  2    0[BANK0 ] unsigned int 
  4584 ;; Registers used:
  4585 ;;		wreg, status,2, status,0, prodl, prodh
  4586 ;; Tracked objects:
  4587 ;;		On entry : 0/0
  4588 ;;		On exit  : 0/0
  4589 ;;		Unchanged: 0/0
  4590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4591 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4592 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4594 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4595 ;;Total ram usage:        6 bytes
  4596 ;; Hardware stack levels used:    1
  4597 ;; Hardware stack levels required when called:    7
  4598 ;; This function calls:
  4599 ;;		Nothing
  4600 ;; This function is called by:
  4601 ;;		_printf
  4602 ;; This function uses a non-reentrant model
  4603 ;;
  4604                           
  4605                           	psect	text16
  4606  0025E0                     __ptext16:
  4607                           	opt stack 0
  4608  0025E0                     ___wmul:
  4609                           	opt stack 21
  4610                           
  4611                           ; BSR set to: 0
  4612                           ;incstack = 0
  4613  0025E0  0100               	movlb	0	; () banked
  4614  0025E2  5180               	movf	___wmul@multiplier& (0+255),w,b
  4615  0025E4  0100               	movlb	0	; () banked
  4616  0025E6  0382               	mulwf	___wmul@multiplicand& (0+255),b
  4617  0025E8  CFF3 F084          	movff	prodl,___wmul@product
  4618  0025EC  CFF4 F085          	movff	prodh,___wmul@product+1
  4619  0025F0  0100               	movlb	0	; () banked
  4620  0025F2  5180               	movf	___wmul@multiplier& (0+255),w,b
  4621  0025F4  0100               	movlb	0	; () banked
  4622  0025F6  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  4623  0025F8  50F3               	movf	prodl,w,c
  4624  0025FA  0100               	movlb	0	; () banked
  4625  0025FC  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  4626  0025FE  0100               	movlb	0	; () banked
  4627  002600  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  4628  002602  0100               	movlb	0	; () banked
  4629  002604  0382               	mulwf	___wmul@multiplicand& (0+255),b
  4630  002606  50F3               	movf	prodl,w,c
  4631  002608  0100               	movlb	0	; () banked
  4632  00260A  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  4633                           
  4634                           ; BSR set to: 0
  4635  00260C  C084  F080         	movff	___wmul@product,?___wmul
  4636  002610  C085  F081         	movff	___wmul@product+1,?___wmul+1
  4637  002614  0012               	return	
  4638  002616                     __end_of___wmul:
  4639                           	opt stack 0
  4640                           tblptru	equ	0xFF8
  4641                           tblptrh	equ	0xFF7
  4642                           tblptrl	equ	0xFF6
  4643                           tablat	equ	0xFF5
  4644                           prodh	equ	0xFF4
  4645                           prodl	equ	0xFF3
  4646                           postinc0	equ	0xFEE
  4647                           wreg	equ	0xFE8
  4648                           indf2	equ	0xFDF
  4649                           postinc2	equ	0xFDE
  4650                           postdec2	equ	0xFDD
  4651                           fsr2h	equ	0xFDA
  4652                           fsr2l	equ	0xFD9
  4653                           status	equ	0xFD8
  4654                           
  4655 ;; *************** function ___lwmod *****************
  4656 ;; Defined at:
  4657 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
  4658 ;; Parameters:    Size  Location     Type
  4659 ;;  dividend        2    7[BANK0 ] unsigned int 
  4660 ;;  divisor         2    9[BANK0 ] unsigned int 
  4661 ;; Auto vars:     Size  Location     Type
  4662 ;;  counter         1   11[BANK0 ] unsigned char 
  4663 ;; Return value:  Size  Location     Type
  4664 ;;                  2    7[BANK0 ] unsigned int 
  4665 ;; Registers used:
  4666 ;;		wreg, status,2, status,0
  4667 ;; Tracked objects:
  4668 ;;		On entry : 0/0
  4669 ;;		On exit  : 0/0
  4670 ;;		Unchanged: 0/0
  4671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4672 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4673 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4675 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4676 ;;Total ram usage:        5 bytes
  4677 ;; Hardware stack levels used:    1
  4678 ;; Hardware stack levels required when called:    7
  4679 ;; This function calls:
  4680 ;;		Nothing
  4681 ;; This function is called by:
  4682 ;;		_printf
  4683 ;; This function uses a non-reentrant model
  4684 ;;
  4685                           
  4686                           	psect	text17
  4687  00221C                     __ptext17:
  4688                           	opt stack 0
  4689  00221C                     ___lwmod:
  4690                           	opt stack 21
  4691                           
  4692                           ; BSR set to: 0
  4693                           ;incstack = 0
  4694  00221C  0100               	movlb	0	; () banked
  4695  00221E  5189               	movf	___lwmod@divisor& (0+255),w,b
  4696  002220  0100               	movlb	0	; () banked
  4697  002222  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  4698  002224  B4D8               	btfsc	status,2,c
  4699  002226  D026               	goto	l948
  4700                           
  4701                           ; BSR set to: 0
  4702  002228  0E01               	movlw	1
  4703  00222A  0100               	movlb	0	; () banked
  4704  00222C  6F8B               	movwf	___lwmod@counter& (0+255),b
  4705  00222E  D006               	goto	l3155
  4706  002230                     l3153:
  4707                           
  4708                           ; BSR set to: 0
  4709  002230  0100               	movlb	0	; () banked
  4710  002232  90D8               	bcf	status,0,c
  4711  002234  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  4712  002236  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  4713  002238  0100               	movlb	0	; () banked
  4714  00223A  2B8B               	incf	___lwmod@counter& (0+255),f,b
  4715  00223C                     l3155:
  4716                           
  4717                           ; BSR set to: 0
  4718  00223C  0100               	movlb	0	; () banked
  4719  00223E  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  4720  002240  D7F7               	goto	l3153
  4721  002242                     l3157:
  4722                           
  4723                           ; BSR set to: 0
  4724  002242  0100               	movlb	0	; () banked
  4725  002244  5189               	movf	___lwmod@divisor& (0+255),w,b
  4726  002246  0100               	movlb	0	; () banked
  4727  002248  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  4728  00224A  0100               	movlb	0	; () banked
  4729  00224C  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4730  00224E  0100               	movlb	0	; () banked
  4731  002250  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  4732  002252  A0D8               	btfss	status,0,c
  4733  002254  D008               	goto	l3161
  4734                           
  4735                           ; BSR set to: 0
  4736  002256  0100               	movlb	0	; () banked
  4737  002258  5189               	movf	___lwmod@divisor& (0+255),w,b
  4738  00225A  0100               	movlb	0	; () banked
  4739  00225C  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  4740  00225E  0100               	movlb	0	; () banked
  4741  002260  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  4742  002262  0100               	movlb	0	; () banked
  4743  002264  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  4744  002266                     l3161:
  4745                           
  4746                           ; BSR set to: 0
  4747  002266  0100               	movlb	0	; () banked
  4748  002268  90D8               	bcf	status,0,c
  4749  00226A  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  4750  00226C  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  4751                           
  4752                           ; BSR set to: 0
  4753  00226E  0100               	movlb	0	; () banked
  4754  002270  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  4755  002272  D7E7               	goto	l3157
  4756  002274                     l948:
  4757                           
  4758                           ; BSR set to: 0
  4759  002274  C087  F087         	movff	___lwmod@dividend,?___lwmod
  4760  002278  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  4761                           
  4762                           ; BSR set to: 0
  4763  00227C  0012               	return		;funcret
  4764  00227E                     __end_of___lwmod:
  4765                           	opt stack 0
  4766                           tblptru	equ	0xFF8
  4767                           tblptrh	equ	0xFF7
  4768                           tblptrl	equ	0xFF6
  4769                           tablat	equ	0xFF5
  4770                           prodh	equ	0xFF4
  4771                           prodl	equ	0xFF3
  4772                           postinc0	equ	0xFEE
  4773                           wreg	equ	0xFE8
  4774                           indf2	equ	0xFDF
  4775                           postinc2	equ	0xFDE
  4776                           postdec2	equ	0xFDD
  4777                           fsr2h	equ	0xFDA
  4778                           fsr2l	equ	0xFD9
  4779                           status	equ	0xFD8
  4780                           
  4781 ;; *************** function ___lwdiv *****************
  4782 ;; Defined at:
  4783 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  4784 ;; Parameters:    Size  Location     Type
  4785 ;;  dividend        2    0[BANK0 ] unsigned int 
  4786 ;;  divisor         2    2[BANK0 ] unsigned int 
  4787 ;; Auto vars:     Size  Location     Type
  4788 ;;  quotient        2    4[BANK0 ] unsigned int 
  4789 ;;  counter         1    6[BANK0 ] unsigned char 
  4790 ;; Return value:  Size  Location     Type
  4791 ;;                  2    0[BANK0 ] unsigned int 
  4792 ;; Registers used:
  4793 ;;		wreg, status,2, status,0
  4794 ;; Tracked objects:
  4795 ;;		On entry : 0/0
  4796 ;;		On exit  : 0/0
  4797 ;;		Unchanged: 0/0
  4798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4799 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4800 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4802 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4803 ;;Total ram usage:        7 bytes
  4804 ;; Hardware stack levels used:    1
  4805 ;; Hardware stack levels required when called:    7
  4806 ;; This function calls:
  4807 ;;		Nothing
  4808 ;; This function is called by:
  4809 ;;		_printf
  4810 ;; This function uses a non-reentrant model
  4811 ;;
  4812                           
  4813                           	psect	text18
  4814  001E8C                     __ptext18:
  4815                           	opt stack 0
  4816  001E8C                     ___lwdiv:
  4817                           	opt stack 21
  4818                           
  4819                           ; BSR set to: 0
  4820                           ;incstack = 0
  4821  001E8C  0E00               	movlw	0
  4822  001E8E  0100               	movlb	0	; () banked
  4823  001E90  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
  4824  001E92  0E00               	movlw	0
  4825  001E94  6F84               	movwf	___lwdiv@quotient& (0+255),b
  4826                           
  4827                           ; BSR set to: 0
  4828  001E96  0100               	movlb	0	; () banked
  4829  001E98  5182               	movf	___lwdiv@divisor& (0+255),w,b
  4830  001E9A  0100               	movlb	0	; () banked
  4831  001E9C  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  4832  001E9E  B4D8               	btfsc	status,2,c
  4833  001EA0  D02C               	goto	l938
  4834                           
  4835                           ; BSR set to: 0
  4836  001EA2  0E01               	movlw	1
  4837  001EA4  0100               	movlb	0	; () banked
  4838  001EA6  6F86               	movwf	___lwdiv@counter& (0+255),b
  4839  001EA8  D006               	goto	l3135
  4840  001EAA                     l3133:
  4841                           
  4842                           ; BSR set to: 0
  4843  001EAA  0100               	movlb	0	; () banked
  4844  001EAC  90D8               	bcf	status,0,c
  4845  001EAE  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  4846  001EB0  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  4847  001EB2  0100               	movlb	0	; () banked
  4848  001EB4  2B86               	incf	___lwdiv@counter& (0+255),f,b
  4849  001EB6                     l3135:
  4850                           
  4851                           ; BSR set to: 0
  4852  001EB6  0100               	movlb	0	; () banked
  4853  001EB8  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  4854  001EBA  D7F7               	goto	l3133
  4855  001EBC                     l3137:
  4856                           
  4857                           ; BSR set to: 0
  4858  001EBC  0100               	movlb	0	; () banked
  4859  001EBE  90D8               	bcf	status,0,c
  4860  001EC0  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
  4861  001EC2  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  4862                           
  4863                           ; BSR set to: 0
  4864  001EC4  0100               	movlb	0	; () banked
  4865  001EC6  5182               	movf	___lwdiv@divisor& (0+255),w,b
  4866  001EC8  0100               	movlb	0	; () banked
  4867  001ECA  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  4868  001ECC  0100               	movlb	0	; () banked
  4869  001ECE  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4870  001ED0  0100               	movlb	0	; () banked
  4871  001ED2  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  4872  001ED4  A0D8               	btfss	status,0,c
  4873  001ED6  D00A               	goto	l3145
  4874                           
  4875                           ; BSR set to: 0
  4876  001ED8  0100               	movlb	0	; () banked
  4877  001EDA  5182               	movf	___lwdiv@divisor& (0+255),w,b
  4878  001EDC  0100               	movlb	0	; () banked
  4879  001EDE  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  4880  001EE0  0100               	movlb	0	; () banked
  4881  001EE2  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  4882  001EE4  0100               	movlb	0	; () banked
  4883  001EE6  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  4884                           
  4885                           ; BSR set to: 0
  4886  001EE8  0100               	movlb	0	; () banked
  4887  001EEA  8184               	bsf	___lwdiv@quotient& (0+255),0,b
  4888  001EEC                     l3145:
  4889                           
  4890                           ; BSR set to: 0
  4891  001EEC  0100               	movlb	0	; () banked
  4892  001EEE  90D8               	bcf	status,0,c
  4893  001EF0  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  4894  001EF2  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  4895                           
  4896                           ; BSR set to: 0
  4897  001EF4  0100               	movlb	0	; () banked
  4898  001EF6  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
  4899  001EF8  D7E1               	goto	l3137
  4900  001EFA                     l938:
  4901                           
  4902                           ; BSR set to: 0
  4903  001EFA  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
  4904  001EFE  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4905                           
  4906                           ; BSR set to: 0
  4907  001F02  0012               	return		;funcret
  4908  001F04                     __end_of___lwdiv:
  4909                           	opt stack 0
  4910                           tblptru	equ	0xFF8
  4911                           tblptrh	equ	0xFF7
  4912                           tblptrl	equ	0xFF6
  4913                           tablat	equ	0xFF5
  4914                           prodh	equ	0xFF4
  4915                           prodl	equ	0xFF3
  4916                           postinc0	equ	0xFEE
  4917                           wreg	equ	0xFE8
  4918                           indf2	equ	0xFDF
  4919                           postinc2	equ	0xFDE
  4920                           postdec2	equ	0xFDD
  4921                           fsr2h	equ	0xFDA
  4922                           fsr2l	equ	0xFD9
  4923                           status	equ	0xFD8
  4924                           
  4925 ;; *************** function _getTime *****************
  4926 ;; Defined at:
  4927 ;;		line 76 in file "modules.c"
  4928 ;; Parameters:    Size  Location     Type
  4929 ;;  time            2    3[BANK0 ] PTR unsigned char 
  4930 ;;		 -> time(7), 
  4931 ;; Auto vars:     Size  Location     Type
  4932 ;;  i               1    5[BANK0 ] unsigned char 
  4933 ;; Return value:  Size  Location     Type
  4934 ;;                  1    wreg      void 
  4935 ;; Registers used:
  4936 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4937 ;; Tracked objects:
  4938 ;;		On entry : 0/0
  4939 ;;		On exit  : 0/0
  4940 ;;		Unchanged: 0/0
  4941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4942 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4943 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4945 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4946 ;;Total ram usage:        3 bytes
  4947 ;; Hardware stack levels used:    1
  4948 ;; Hardware stack levels required when called:    9
  4949 ;; This function calls:
  4950 ;;		_I2C_Master_Read
  4951 ;;		_I2C_Master_Start
  4952 ;;		_I2C_Master_Stop
  4953 ;;		_I2C_Master_Write
  4954 ;; This function is called by:
  4955 ;;		_showRTC
  4956 ;; This function uses a non-reentrant model
  4957 ;;
  4958                           
  4959                           	psect	text19
  4960  001BF8                     __ptext19:
  4961                           	opt stack 0
  4962  001BF8                     _getTime:
  4963                           	opt stack 20
  4964                           
  4965                           ;modules.c: 77: (INTCONbits.GIE = 0);
  4966                           
  4967                           ; BSR set to: 0
  4968                           ;incstack = 0
  4969  001BF8  9EF2               	bcf	intcon,7,c	;volatile
  4970                           
  4971                           ;modules.c: 81: I2C_Master_Start();
  4972  001BFA  EC56  F014         	call	_I2C_Master_Start	;wreg free
  4973                           
  4974                           ;modules.c: 82: I2C_Master_Write(0b11010000);
  4975  001BFE  0E00               	movlw	0
  4976  001C00  0100               	movlb	0	; () banked
  4977  001C02  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  4978  001C04  0ED0               	movlw	208
  4979  001C06  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  4980  001C08  EC48  F014         	call	_I2C_Master_Write	;wreg free
  4981                           
  4982                           ;modules.c: 83: I2C_Master_Write(0x00);
  4983  001C0C  0E00               	movlw	0
  4984  001C0E  0100               	movlb	0	; () banked
  4985  001C10  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  4986  001C12  0E00               	movlw	0
  4987  001C14  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  4988  001C16  EC48  F014         	call	_I2C_Master_Write	;wreg free
  4989                           
  4990                           ;modules.c: 84: I2C_Master_Stop();
  4991  001C1A  EC52  F014         	call	_I2C_Master_Stop	;wreg free
  4992                           
  4993                           ;modules.c: 87: I2C_Master_Start();
  4994  001C1E  EC56  F014         	call	_I2C_Master_Start	;wreg free
  4995                           
  4996                           ;modules.c: 88: I2C_Master_Write(0b11010001);
  4997  001C22  0E00               	movlw	0
  4998  001C24  0100               	movlb	0	; () banked
  4999  001C26  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  5000  001C28  0ED1               	movlw	209
  5001  001C2A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  5002  001C2C  EC48  F014         	call	_I2C_Master_Write	;wreg free
  5003                           
  5004                           ;modules.c: 89: for (unsigned char i = 0; i < 0x06; i++) {
  5005  001C30  0E00               	movlw	0
  5006  001C32  0100               	movlb	0	; () banked
  5007  001C34  6F85               	movwf	getTime@i& (0+255),b
  5008  001C36                     l4115:
  5009                           
  5010                           ; BSR set to: 0
  5011  001C36  0E05               	movlw	5
  5012  001C38  0100               	movlb	0	; () banked
  5013  001C3A  6585               	cpfsgt	getTime@i& (0+255),b
  5014  001C3C  D001               	goto	l4119
  5015  001C3E  D012               	goto	l4125
  5016  001C40                     l4119:
  5017                           
  5018                           ; BSR set to: 0
  5019                           ;modules.c: 90: time[i] = I2C_Master_Read(1);
  5020  001C40  0100               	movlb	0	; () banked
  5021  001C42  5185               	movf	getTime@i& (0+255),w,b
  5022  001C44  0D01               	mullw	1
  5023  001C46  50F3               	movf	prodl,w,c
  5024  001C48  0100               	movlb	0	; () banked
  5025  001C4A  2583               	addwf	getTime@time& (0+255),w,b
  5026  001C4C  6ED9               	movwf	fsr2l,c
  5027  001C4E  50F4               	movf	prodh,w,c
  5028  001C50  0100               	movlb	0	; () banked
  5029  001C52  2184               	addwfc	(getTime@time+1)& (0+255),w,b
  5030  001C54  6EDA               	movwf	fsr2h,c
  5031  001C56  0E01               	movlw	1
  5032  001C58  EC24  F013         	call	_I2C_Master_Read
  5033  001C5C  6EDF               	movwf	indf2,c
  5034  001C5E  0100               	movlb	0	; () banked
  5035  001C60  2B85               	incf	getTime@i& (0+255),f,b
  5036  001C62  D7E9               	goto	l4115
  5037  001C64                     l4125:
  5038                           
  5039                           ; BSR set to: 0
  5040                           ;modules.c: 91: }
  5041                           ;modules.c: 92: time[6] = I2C_Master_Read(0);
  5042  001C64  0100               	movlb	0	; () banked
  5043  001C66  EE20 F006          	lfsr	2,6
  5044  001C6A  5183               	movf	getTime@time& (0+255),w,b
  5045  001C6C  26D9               	addwf	fsr2l,f,c
  5046  001C6E  5184               	movf	(getTime@time+1)& (0+255),w,b
  5047  001C70  22DA               	addwfc	fsr2h,f,c
  5048  001C72  0E00               	movlw	0
  5049  001C74  EC24  F013         	call	_I2C_Master_Read
  5050  001C78  6EDF               	movwf	indf2,c
  5051                           
  5052                           ;modules.c: 93: I2C_Master_Stop();
  5053  001C7A  EC52  F014         	call	_I2C_Master_Stop	;wreg free
  5054                           
  5055                           ;modules.c: 94: (INTCONbits.GIE = 1);
  5056  001C7E  8EF2               	bsf	intcon,7,c	;volatile
  5057  001C80  0012               	return		;funcret
  5058  001C82                     __end_of_getTime:
  5059                           	opt stack 0
  5060                           tblptru	equ	0xFF8
  5061                           tblptrh	equ	0xFF7
  5062                           tblptrl	equ	0xFF6
  5063                           tablat	equ	0xFF5
  5064                           prodh	equ	0xFF4
  5065                           prodl	equ	0xFF3
  5066                           intcon	equ	0xFF2
  5067                           postinc0	equ	0xFEE
  5068                           wreg	equ	0xFE8
  5069                           indf2	equ	0xFDF
  5070                           postinc2	equ	0xFDE
  5071                           postdec2	equ	0xFDD
  5072                           fsr2h	equ	0xFDA
  5073                           fsr2l	equ	0xFD9
  5074                           status	equ	0xFD8
  5075                           
  5076 ;; *************** function _I2C_Master_Write *****************
  5077 ;; Defined at:
  5078 ;;		line 42 in file "I2C.c"
  5079 ;; Parameters:    Size  Location     Type
  5080 ;;  d               2    1[BANK0 ] unsigned int 
  5081 ;; Auto vars:     Size  Location     Type
  5082 ;;		None
  5083 ;; Return value:  Size  Location     Type
  5084 ;;                  1    wreg      void 
  5085 ;; Registers used:
  5086 ;;		wreg, status,2, status,0, cstack
  5087 ;; Tracked objects:
  5088 ;;		On entry : 0/0
  5089 ;;		On exit  : 0/0
  5090 ;;		Unchanged: 0/0
  5091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5092 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5095 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5096 ;;Total ram usage:        2 bytes
  5097 ;; Hardware stack levels used:    1
  5098 ;; Hardware stack levels required when called:    8
  5099 ;; This function calls:
  5100 ;;		_I2C_Master_Wait
  5101 ;; This function is called by:
  5102 ;;		_getTime
  5103 ;; This function uses a non-reentrant model
  5104 ;;
  5105                           
  5106                           	psect	text20
  5107  002890                     __ptext20:
  5108                           	opt stack 0
  5109  002890                     _I2C_Master_Write:
  5110                           	opt stack 20
  5111                           
  5112                           ;I2C.c: 43: I2C_Master_Wait();
  5113                           
  5114                           ;incstack = 0
  5115  002890  EC19  F014         	call	_I2C_Master_Wait	;wreg free
  5116                           
  5117                           ;I2C.c: 44: SSPBUF = d;
  5118  002894  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  5119  002898  0012               	return		;funcret
  5120  00289A                     __end_of_I2C_Master_Write:
  5121                           	opt stack 0
  5122                           tblptru	equ	0xFF8
  5123                           tblptrh	equ	0xFF7
  5124                           tblptrl	equ	0xFF6
  5125                           tablat	equ	0xFF5
  5126                           prodh	equ	0xFF4
  5127                           prodl	equ	0xFF3
  5128                           intcon	equ	0xFF2
  5129                           postinc0	equ	0xFEE
  5130                           wreg	equ	0xFE8
  5131                           indf2	equ	0xFDF
  5132                           postinc2	equ	0xFDE
  5133                           postdec2	equ	0xFDD
  5134                           fsr2h	equ	0xFDA
  5135                           fsr2l	equ	0xFD9
  5136                           status	equ	0xFD8
  5137                           
  5138 ;; *************** function _I2C_Master_Stop *****************
  5139 ;; Defined at:
  5140 ;;		line 37 in file "I2C.c"
  5141 ;; Parameters:    Size  Location     Type
  5142 ;;		None
  5143 ;; Auto vars:     Size  Location     Type
  5144 ;;		None
  5145 ;; Return value:  Size  Location     Type
  5146 ;;                  1    wreg      void 
  5147 ;; Registers used:
  5148 ;;		wreg, status,2, status,0, cstack
  5149 ;; Tracked objects:
  5150 ;;		On entry : 0/0
  5151 ;;		On exit  : 0/0
  5152 ;;		Unchanged: 0/0
  5153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5155 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5156 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5157 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5158 ;;Total ram usage:        0 bytes
  5159 ;; Hardware stack levels used:    1
  5160 ;; Hardware stack levels required when called:    8
  5161 ;; This function calls:
  5162 ;;		_I2C_Master_Wait
  5163 ;; This function is called by:
  5164 ;;		_getTime
  5165 ;; This function uses a non-reentrant model
  5166 ;;
  5167                           
  5168                           	psect	text21
  5169  0028A4                     __ptext21:
  5170                           	opt stack 0
  5171  0028A4                     _I2C_Master_Stop:
  5172                           	opt stack 20
  5173                           
  5174                           ;I2C.c: 38: I2C_Master_Wait();
  5175                           
  5176                           ;incstack = 0
  5177  0028A4  EC19  F014         	call	_I2C_Master_Wait	;wreg free
  5178                           
  5179                           ;I2C.c: 39: PEN = 1;
  5180  0028A8  84C5               	bsf	4037,2,c	;volatile
  5181  0028AA  0012               	return		;funcret
  5182  0028AC                     __end_of_I2C_Master_Stop:
  5183                           	opt stack 0
  5184                           tblptru	equ	0xFF8
  5185                           tblptrh	equ	0xFF7
  5186                           tblptrl	equ	0xFF6
  5187                           tablat	equ	0xFF5
  5188                           prodh	equ	0xFF4
  5189                           prodl	equ	0xFF3
  5190                           intcon	equ	0xFF2
  5191                           postinc0	equ	0xFEE
  5192                           wreg	equ	0xFE8
  5193                           indf2	equ	0xFDF
  5194                           postinc2	equ	0xFDE
  5195                           postdec2	equ	0xFDD
  5196                           fsr2h	equ	0xFDA
  5197                           fsr2l	equ	0xFD9
  5198                           status	equ	0xFD8
  5199                           
  5200 ;; *************** function _I2C_Master_Start *****************
  5201 ;; Defined at:
  5202 ;;		line 27 in file "I2C.c"
  5203 ;; Parameters:    Size  Location     Type
  5204 ;;		None
  5205 ;; Auto vars:     Size  Location     Type
  5206 ;;		None
  5207 ;; Return value:  Size  Location     Type
  5208 ;;                  1    wreg      void 
  5209 ;; Registers used:
  5210 ;;		wreg, status,2, status,0, cstack
  5211 ;; Tracked objects:
  5212 ;;		On entry : 0/0
  5213 ;;		On exit  : 0/0
  5214 ;;		Unchanged: 0/0
  5215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5220 ;;Total ram usage:        0 bytes
  5221 ;; Hardware stack levels used:    1
  5222 ;; Hardware stack levels required when called:    8
  5223 ;; This function calls:
  5224 ;;		_I2C_Master_Wait
  5225 ;; This function is called by:
  5226 ;;		_getTime
  5227 ;; This function uses a non-reentrant model
  5228 ;;
  5229                           
  5230                           	psect	text22
  5231  0028AC                     __ptext22:
  5232                           	opt stack 0
  5233  0028AC                     _I2C_Master_Start:
  5234                           	opt stack 20
  5235                           
  5236                           ;I2C.c: 28: I2C_Master_Wait();
  5237                           
  5238                           ;incstack = 0
  5239  0028AC  EC19  F014         	call	_I2C_Master_Wait	;wreg free
  5240                           
  5241                           ;I2C.c: 29: SEN = 1;
  5242  0028B0  80C5               	bsf	4037,0,c	;volatile
  5243  0028B2  0012               	return		;funcret
  5244  0028B4                     __end_of_I2C_Master_Start:
  5245                           	opt stack 0
  5246                           tblptru	equ	0xFF8
  5247                           tblptrh	equ	0xFF7
  5248                           tblptrl	equ	0xFF6
  5249                           tablat	equ	0xFF5
  5250                           prodh	equ	0xFF4
  5251                           prodl	equ	0xFF3
  5252                           intcon	equ	0xFF2
  5253                           postinc0	equ	0xFEE
  5254                           wreg	equ	0xFE8
  5255                           indf2	equ	0xFDF
  5256                           postinc2	equ	0xFDE
  5257                           postdec2	equ	0xFDD
  5258                           fsr2h	equ	0xFDA
  5259                           fsr2l	equ	0xFD9
  5260                           status	equ	0xFD8
  5261                           
  5262 ;; *************** function _I2C_Master_Read *****************
  5263 ;; Defined at:
  5264 ;;		line 47 in file "I2C.c"
  5265 ;; Parameters:    Size  Location     Type
  5266 ;;  a               1    wreg     unsigned char 
  5267 ;; Auto vars:     Size  Location     Type
  5268 ;;  a               1    1[BANK0 ] unsigned char 
  5269 ;;  temp            1    2[BANK0 ] unsigned char 
  5270 ;; Return value:  Size  Location     Type
  5271 ;;                  1    wreg      unsigned char 
  5272 ;; Registers used:
  5273 ;;		wreg, status,2, status,0, cstack
  5274 ;; Tracked objects:
  5275 ;;		On entry : 0/0
  5276 ;;		On exit  : 0/0
  5277 ;;		Unchanged: 0/0
  5278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5280 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5282 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5283 ;;Total ram usage:        2 bytes
  5284 ;; Hardware stack levels used:    1
  5285 ;; Hardware stack levels required when called:    8
  5286 ;; This function calls:
  5287 ;;		_I2C_Master_Wait
  5288 ;; This function is called by:
  5289 ;;		_getTime
  5290 ;; This function uses a non-reentrant model
  5291 ;;
  5292                           
  5293                           	psect	text23
  5294  002648                     __ptext23:
  5295                           	opt stack 0
  5296  002648                     _I2C_Master_Read:
  5297                           	opt stack 20
  5298                           
  5299                           ;incstack = 0
  5300                           ;I2C_Master_Read@a stored from wreg
  5301  002648  0100               	movlb	0	; () banked
  5302  00264A  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  5303                           
  5304                           ;I2C.c: 48: unsigned char temp;
  5305                           ;I2C.c: 49: I2C_Master_Wait();
  5306  00264C  EC19  F014         	call	_I2C_Master_Wait	;wreg free
  5307                           
  5308                           ;I2C.c: 50: RCEN = 1;
  5309  002650  86C5               	bsf	4037,3,c	;volatile
  5310                           
  5311                           ;I2C.c: 51: I2C_Master_Wait();
  5312  002652  EC19  F014         	call	_I2C_Master_Wait	;wreg free
  5313                           
  5314                           ;I2C.c: 52: temp = SSPBUF;
  5315  002656  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  5316                           
  5317                           ;I2C.c: 53: I2C_Master_Wait();
  5318  00265A  EC19  F014         	call	_I2C_Master_Wait	;wreg free
  5319                           
  5320                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
  5321  00265E  0100               	movlb	0	; () banked
  5322  002660  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  5323  002662  0100               	movlb	0	; () banked
  5324  002664  A4D8               	btfss	status,2,c
  5325  002666  D002               	goto	u3110
  5326  002668  8AC5               	bsf	4037,5,c	;volatile
  5327  00266A  D001               	goto	l3873
  5328  00266C                     u3110:
  5329  00266C  9AC5               	bcf	4037,5,c	;volatile
  5330  00266E                     l3873:
  5331                           
  5332                           ;I2C.c: 55: ACKEN = 1;
  5333  00266E  88C5               	bsf	4037,4,c	;volatile
  5334                           
  5335                           ;I2C.c: 56: return temp;
  5336  002670  0100               	movlb	0	; () banked
  5337  002672  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  5338  002674  0012               	return	
  5339  002676                     __end_of_I2C_Master_Read:
  5340                           	opt stack 0
  5341                           tblptru	equ	0xFF8
  5342                           tblptrh	equ	0xFF7
  5343                           tblptrl	equ	0xFF6
  5344                           tablat	equ	0xFF5
  5345                           prodh	equ	0xFF4
  5346                           prodl	equ	0xFF3
  5347                           intcon	equ	0xFF2
  5348                           postinc0	equ	0xFEE
  5349                           wreg	equ	0xFE8
  5350                           indf2	equ	0xFDF
  5351                           postinc2	equ	0xFDE
  5352                           postdec2	equ	0xFDD
  5353                           fsr2h	equ	0xFDA
  5354                           fsr2l	equ	0xFD9
  5355                           status	equ	0xFD8
  5356                           
  5357 ;; *************** function _I2C_Master_Wait *****************
  5358 ;; Defined at:
  5359 ;;		line 23 in file "I2C.c"
  5360 ;; Parameters:    Size  Location     Type
  5361 ;;		None
  5362 ;; Auto vars:     Size  Location     Type
  5363 ;;		None
  5364 ;; Return value:  Size  Location     Type
  5365 ;;                  1    wreg      void 
  5366 ;; Registers used:
  5367 ;;		wreg, status,2, status,0
  5368 ;; Tracked objects:
  5369 ;;		On entry : 0/0
  5370 ;;		On exit  : 0/0
  5371 ;;		Unchanged: 0/0
  5372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5375 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5376 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5377 ;;Total ram usage:        1 bytes
  5378 ;; Hardware stack levels used:    1
  5379 ;; Hardware stack levels required when called:    7
  5380 ;; This function calls:
  5381 ;;		Nothing
  5382 ;; This function is called by:
  5383 ;;		_I2C_Master_Start
  5384 ;;		_I2C_Master_Stop
  5385 ;;		_I2C_Master_Write
  5386 ;;		_I2C_Master_Read
  5387 ;; This function uses a non-reentrant model
  5388 ;;
  5389                           
  5390                           	psect	text24
  5391  002832                     __ptext24:
  5392                           	opt stack 0
  5393  002832                     _I2C_Master_Wait:
  5394                           	opt stack 20
  5395  002832                     l369:
  5396  002832  B4C7               	btfsc	4039,2,c	;volatile
  5397  002834  D7FE               	goto	l369
  5398  002836  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  5399  00283A  0E1F               	movlw	31
  5400  00283C  0100               	movlb	0	; () banked
  5401  00283E  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  5402  002840  B4D8               	btfsc	status,2,c
  5403  002842  0012               	return	
  5404  002844  D7F6               	goto	l369
  5405  002846                     __end_of_I2C_Master_Wait:
  5406                           	opt stack 0
  5407                           tblptru	equ	0xFF8
  5408                           tblptrh	equ	0xFF7
  5409                           tblptrl	equ	0xFF6
  5410                           tablat	equ	0xFF5
  5411                           prodh	equ	0xFF4
  5412                           prodl	equ	0xFF3
  5413                           intcon	equ	0xFF2
  5414                           postinc0	equ	0xFEE
  5415                           wreg	equ	0xFE8
  5416                           indf2	equ	0xFDF
  5417                           postinc2	equ	0xFDE
  5418                           postdec2	equ	0xFDD
  5419                           fsr2h	equ	0xFDA
  5420                           fsr2l	equ	0xFD9
  5421                           status	equ	0xFD8
  5422                           
  5423 ;; *************** function _initialize *****************
  5424 ;; Defined at:
  5425 ;;		line 23 in file "main.c"
  5426 ;; Parameters:    Size  Location     Type
  5427 ;;		None
  5428 ;; Auto vars:     Size  Location     Type
  5429 ;;		None
  5430 ;; Return value:  Size  Location     Type
  5431 ;;                  1    wreg      void 
  5432 ;; Registers used:
  5433 ;;		wreg, status,2, status,0, cstack
  5434 ;; Tracked objects:
  5435 ;;		On entry : 0/0
  5436 ;;		On exit  : 0/0
  5437 ;;		Unchanged: 0/0
  5438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5442 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5443 ;;Total ram usage:        0 bytes
  5444 ;; Hardware stack levels used:    1
  5445 ;; Hardware stack levels required when called:   10
  5446 ;; This function calls:
  5447 ;;		_I2C_Master_Init
  5448 ;;		_initLCD
  5449 ;;		_initLatest
  5450 ;;		_lcdInst
  5451 ;; This function is called by:
  5452 ;;		_main
  5453 ;; This function uses a non-reentrant model
  5454 ;;
  5455                           
  5456                           	psect	text25
  5457  0022DE                     __ptext25:
  5458                           	opt stack 0
  5459  0022DE                     _initialize:
  5460                           	opt stack 20
  5461                           
  5462                           ;main.c: 24: TRISA = 0xFF;
  5463                           
  5464                           ; BSR set to: 0
  5465                           ;incstack = 0
  5466  0022DE  6892               	setf	3986,c	;volatile
  5467                           
  5468                           ;main.c: 25: TRISB = 0xFF;
  5469  0022E0  6893               	setf	3987,c	;volatile
  5470                           
  5471                           ;main.c: 26: TRISC = 0x00;
  5472  0022E2  0E00               	movlw	0
  5473  0022E4  6E94               	movwf	3988,c	;volatile
  5474                           
  5475                           ;main.c: 27: TRISD = 0x00;
  5476  0022E6  0E00               	movlw	0
  5477  0022E8  6E95               	movwf	3989,c	;volatile
  5478                           
  5479                           ;main.c: 28: TRISE = 0x0F;
  5480  0022EA  0E0F               	movlw	15
  5481  0022EC  6E96               	movwf	3990,c	;volatile
  5482                           
  5483                           ;main.c: 30: initLCD();
  5484  0022EE  EC13  F012         	call	_initLCD	;wreg free
  5485                           
  5486                           ;main.c: 32: LATA = 0x00;
  5487  0022F2  0E00               	movlw	0
  5488  0022F4  6E89               	movwf	3977,c	;volatile
  5489                           
  5490                           ;main.c: 33: LATB = 0x00;
  5491  0022F6  0E00               	movlw	0
  5492  0022F8  6E8A               	movwf	3978,c	;volatile
  5493                           
  5494                           ;main.c: 34: LATC = 0x00;
  5495  0022FA  0E00               	movlw	0
  5496  0022FC  6E8B               	movwf	3979,c	;volatile
  5497                           
  5498                           ;main.c: 35: LATD = 0x00;
  5499  0022FE  0E00               	movlw	0
  5500  002300  6E8C               	movwf	3980,c	;volatile
  5501                           
  5502                           ;main.c: 36: LATE = 0x00;
  5503  002302  0E00               	movlw	0
  5504  002304  6E8D               	movwf	3981,c	;volatile
  5505                           
  5506                           ;main.c: 38: ADCON0 = 0x00;
  5507  002306  0E00               	movlw	0
  5508  002308  6EC2               	movwf	4034,c	;volatile
  5509                           
  5510                           ;main.c: 39: ADCON1 = 0x09;
  5511  00230A  0E09               	movlw	9
  5512  00230C  6EC1               	movwf	4033,c	;volatile
  5513                           
  5514                           ;main.c: 40: CVRCON = 0x00;
  5515  00230E  0E00               	movlw	0
  5516  002310  6EB5               	movwf	4021,c	;volatile
  5517                           
  5518                           ;main.c: 41: ADFM = 1;
  5519  002312  8EC0               	bsf	4032,7,c	;volatile
  5520                           
  5521                           ;main.c: 43: lcdInst(0x01);;
  5522  002314  0E01               	movlw	1
  5523  002316  EC34  F014         	call	_lcdInst
  5524                           
  5525                           ;main.c: 45: I2C_Master_Init(10000);
  5526  00231A  0E10               	movlw	16
  5527  00231C  0100               	movlb	0	; () banked
  5528  00231E  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  5529  002320  0E27               	movlw	39
  5530  002322  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  5531  002324  0E00               	movlw	0
  5532  002326  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  5533  002328  0E00               	movlw	0
  5534  00232A  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  5535  00232C  EC3F  F011         	call	_I2C_Master_Init	;wreg free
  5536                           
  5537                           ;main.c: 48: initLatest();
  5538  002330  ECC5  F013         	call	_initLatest	;wreg free
  5539  002334  0012               	return		;funcret
  5540  002336                     __end_of_initialize:
  5541                           	opt stack 0
  5542                           tblptru	equ	0xFF8
  5543                           tblptrh	equ	0xFF7
  5544                           tblptrl	equ	0xFF6
  5545                           tablat	equ	0xFF5
  5546                           prodh	equ	0xFF4
  5547                           prodl	equ	0xFF3
  5548                           intcon	equ	0xFF2
  5549                           postinc0	equ	0xFEE
  5550                           wreg	equ	0xFE8
  5551                           indf2	equ	0xFDF
  5552                           postinc2	equ	0xFDE
  5553                           postdec2	equ	0xFDD
  5554                           fsr2h	equ	0xFDA
  5555                           fsr2l	equ	0xFD9
  5556                           status	equ	0xFD8
  5557                           
  5558 ;; *************** function _initLatest *****************
  5559 ;; Defined at:
  5560 ;;		line 9 in file "eeprom.c"
  5561 ;; Parameters:    Size  Location     Type
  5562 ;;		None
  5563 ;; Auto vars:     Size  Location     Type
  5564 ;;		None
  5565 ;; Return value:  Size  Location     Type
  5566 ;;                  1    wreg      void 
  5567 ;; Registers used:
  5568 ;;		wreg, status,2, status,0, cstack
  5569 ;; Tracked objects:
  5570 ;;		On entry : 0/0
  5571 ;;		On exit  : 0/0
  5572 ;;		Unchanged: 0/0
  5573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5577 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5578 ;;Total ram usage:        0 bytes
  5579 ;; Hardware stack levels used:    1
  5580 ;; Hardware stack levels required when called:    8
  5581 ;; This function calls:
  5582 ;;		_ReadEE
  5583 ;; This function is called by:
  5584 ;;		_initialize
  5585 ;; This function uses a non-reentrant model
  5586 ;;
  5587                           
  5588                           	psect	text26
  5589  00278A                     __ptext26:
  5590                           	opt stack 0
  5591  00278A                     _initLatest:
  5592                           	opt stack 21
  5593                           
  5594                           ;eeprom.c: 10: Latest = ReadEE(160);
  5595                           
  5596                           ;incstack = 0
  5597  00278A  0E00               	movlw	0
  5598  00278C  0100               	movlb	0	; () banked
  5599  00278E  6F81               	movwf	(ReadEE@address+1)& (0+255),b
  5600  002790  0EA0               	movlw	160
  5601  002792  6F80               	movwf	ReadEE@address& (0+255),b
  5602  002794  EC02  F014         	call	_ReadEE	;wreg free
  5603  002798  0100               	movlb	0	; () banked
  5604  00279A  6FDB               	movwf	_Latest& (0+255),b
  5605                           
  5606                           ; BSR set to: 0
  5607                           ;eeprom.c: 11: if (Latest > 3) {
  5608  00279C  0E03               	movlw	3
  5609  00279E  0100               	movlb	0	; () banked
  5610  0027A0  65DB               	cpfsgt	_Latest& (0+255),b
  5611  0027A2  0012               	return	
  5612                           
  5613                           ; BSR set to: 0
  5614                           ;eeprom.c: 12: Latest = 0;
  5615  0027A4  0E00               	movlw	0
  5616  0027A6  0100               	movlb	0	; () banked
  5617  0027A8  6FDB               	movwf	_Latest& (0+255),b
  5618  0027AA  0012               	return	
  5619  0027AC                     __end_of_initLatest:
  5620                           	opt stack 0
  5621                           tblptru	equ	0xFF8
  5622                           tblptrh	equ	0xFF7
  5623                           tblptrl	equ	0xFF6
  5624                           tablat	equ	0xFF5
  5625                           prodh	equ	0xFF4
  5626                           prodl	equ	0xFF3
  5627                           intcon	equ	0xFF2
  5628                           postinc0	equ	0xFEE
  5629                           wreg	equ	0xFE8
  5630                           indf2	equ	0xFDF
  5631                           postinc2	equ	0xFDE
  5632                           postdec2	equ	0xFDD
  5633                           fsr2h	equ	0xFDA
  5634                           fsr2l	equ	0xFD9
  5635                           status	equ	0xFD8
  5636                           
  5637 ;; *************** function _ReadEE *****************
  5638 ;; Defined at:
  5639 ;;		line 16 in file "eeprom.c"
  5640 ;; Parameters:    Size  Location     Type
  5641 ;;  address         2    0[BANK0 ] unsigned int 
  5642 ;; Auto vars:     Size  Location     Type
  5643 ;;		None
  5644 ;; Return value:  Size  Location     Type
  5645 ;;                  1    wreg      unsigned char 
  5646 ;; Registers used:
  5647 ;;		wreg, status,2
  5648 ;; Tracked objects:
  5649 ;;		On entry : 0/0
  5650 ;;		On exit  : 0/0
  5651 ;;		Unchanged: 0/0
  5652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5653 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5656 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5657 ;;Total ram usage:        2 bytes
  5658 ;; Hardware stack levels used:    1
  5659 ;; Hardware stack levels required when called:    7
  5660 ;; This function calls:
  5661 ;;		Nothing
  5662 ;; This function is called by:
  5663 ;;		_initLatest
  5664 ;; This function uses a non-reentrant model
  5665 ;;
  5666                           
  5667                           	psect	text27
  5668  002804                     __ptext27:
  5669                           	opt stack 0
  5670  002804                     _ReadEE:
  5671                           	opt stack 21
  5672                           
  5673                           ;eeprom.c: 19: EEADRH = (unsigned char) (address >> 8);
  5674                           
  5675                           ; BSR set to: 0
  5676                           ;incstack = 0
  5677  002804  0100               	movlb	0	; () banked
  5678  002806  5181               	movf	(ReadEE@address+1)& (0+255),w,b
  5679  002808  6EAA               	movwf	4010,c	;volatile
  5680                           
  5681                           ; BSR set to: 0
  5682                           ;eeprom.c: 20: EEADR = (unsigned char) address;
  5683  00280A  C080  FFA9         	movff	ReadEE@address,4009	;volatile
  5684                           
  5685                           ; BSR set to: 0
  5686                           ;eeprom.c: 22: EECON1bits.EEPGD = 0;
  5687  00280E  9EA6               	bcf	4006,7,c	;volatile
  5688                           
  5689                           ; BSR set to: 0
  5690                           ;eeprom.c: 23: EECON1bits.CFGS = 0;
  5691  002810  9CA6               	bcf	4006,6,c	;volatile
  5692                           
  5693                           ; BSR set to: 0
  5694                           ;eeprom.c: 24: EECON1bits.RD = 1;
  5695  002812  80A6               	bsf	4006,0,c	;volatile
  5696  002814                     l417:
  5697  002814  B0A6               	btfsc	4006,0,c	;volatile
  5698  002816  D7FE               	goto	l417
  5699                           
  5700                           ;eeprom.c: 30: return EEDATA;
  5701  002818  50A8               	movf	4008,w,c	;volatile
  5702  00281A  0012               	return	
  5703  00281C                     __end_of_ReadEE:
  5704                           	opt stack 0
  5705                           tblptru	equ	0xFF8
  5706                           tblptrh	equ	0xFF7
  5707                           tblptrl	equ	0xFF6
  5708                           tablat	equ	0xFF5
  5709                           prodh	equ	0xFF4
  5710                           prodl	equ	0xFF3
  5711                           intcon	equ	0xFF2
  5712                           postinc0	equ	0xFEE
  5713                           wreg	equ	0xFE8
  5714                           indf2	equ	0xFDF
  5715                           postinc2	equ	0xFDE
  5716                           postdec2	equ	0xFDD
  5717                           fsr2h	equ	0xFDA
  5718                           fsr2l	equ	0xFD9
  5719                           status	equ	0xFD8
  5720                           
  5721 ;; *************** function _initLCD *****************
  5722 ;; Defined at:
  5723 ;;		line 9 in file "lcd.c"
  5724 ;; Parameters:    Size  Location     Type
  5725 ;;		None
  5726 ;; Auto vars:     Size  Location     Type
  5727 ;;		None
  5728 ;; Return value:  Size  Location     Type
  5729 ;;                  1    wreg      void 
  5730 ;; Registers used:
  5731 ;;		wreg, status,2, status,0, cstack
  5732 ;; Tracked objects:
  5733 ;;		On entry : 0/0
  5734 ;;		On exit  : 0/0
  5735 ;;		Unchanged: 0/0
  5736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5739 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5740 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5741 ;;Total ram usage:        1 bytes
  5742 ;; Hardware stack levels used:    1
  5743 ;; Hardware stack levels required when called:    9
  5744 ;; This function calls:
  5745 ;;		_lcdInst
  5746 ;; This function is called by:
  5747 ;;		_initialize
  5748 ;; This function uses a non-reentrant model
  5749 ;;
  5750                           
  5751                           	psect	text28
  5752  002426                     __ptext28:
  5753                           	opt stack 0
  5754  002426                     _initLCD:
  5755                           	opt stack 20
  5756                           
  5757                           ;lcd.c: 10: _delay((unsigned long)((15)*(8000000/4000.0)));
  5758                           
  5759                           ;incstack = 0
  5760  002426  0E27               	movlw	39
  5761  002428  0100               	movlb	0	; () banked
  5762  00242A  6F83               	movwf	??_initLCD& (0+255),b
  5763  00242C  0EF5               	movlw	245
  5764  00242E                     u3627:
  5765  00242E  2EE8               	decfsz	wreg,f,c
  5766  002430  D7FE               	bra	u3627
  5767  002432  2F83               	decfsz	??_initLCD& (0+255),f,b
  5768  002434  D7FC               	bra	u3627
  5769                           
  5770                           ;lcd.c: 11: lcdInst(0b00110011);
  5771  002436  0E33               	movlw	51
  5772  002438  EC34  F014         	call	_lcdInst
  5773                           
  5774                           ;lcd.c: 12: lcdInst(0b00110010);
  5775  00243C  0E32               	movlw	50
  5776  00243E  EC34  F014         	call	_lcdInst
  5777                           
  5778                           ;lcd.c: 13: lcdInst(0b00101000);
  5779  002442  0E28               	movlw	40
  5780  002444  EC34  F014         	call	_lcdInst
  5781                           
  5782                           ;lcd.c: 14: lcdInst(0b00001111);
  5783  002448  0E0F               	movlw	15
  5784  00244A  EC34  F014         	call	_lcdInst
  5785                           
  5786                           ;lcd.c: 15: lcdInst(0b00000110);
  5787  00244E  0E06               	movlw	6
  5788  002450  EC34  F014         	call	_lcdInst
  5789                           
  5790                           ;lcd.c: 16: lcdInst(0b00000001);
  5791  002454  0E01               	movlw	1
  5792  002456  EC34  F014         	call	_lcdInst
  5793                           
  5794                           ;lcd.c: 17: _delay((unsigned long)((15)*(8000000/4000.0)));
  5795  00245A  0E27               	movlw	39
  5796  00245C  0100               	movlb	0	; () banked
  5797  00245E  6F83               	movwf	??_initLCD& (0+255),b
  5798  002460  0EF5               	movlw	245
  5799  002462                     u3637:
  5800  002462  2EE8               	decfsz	wreg,f,c
  5801  002464  D7FE               	bra	u3637
  5802  002466  2F83               	decfsz	??_initLCD& (0+255),f,b
  5803  002468  D7FC               	bra	u3637
  5804  00246A  0012               	return		;funcret
  5805  00246C                     __end_of_initLCD:
  5806                           	opt stack 0
  5807                           tblptru	equ	0xFF8
  5808                           tblptrh	equ	0xFF7
  5809                           tblptrl	equ	0xFF6
  5810                           tablat	equ	0xFF5
  5811                           prodh	equ	0xFF4
  5812                           prodl	equ	0xFF3
  5813                           intcon	equ	0xFF2
  5814                           postinc0	equ	0xFEE
  5815                           wreg	equ	0xFE8
  5816                           indf2	equ	0xFDF
  5817                           postinc2	equ	0xFDE
  5818                           postdec2	equ	0xFDD
  5819                           fsr2h	equ	0xFDA
  5820                           fsr2l	equ	0xFD9
  5821                           status	equ	0xFD8
  5822                           
  5823 ;; *************** function _lcdInst *****************
  5824 ;; Defined at:
  5825 ;;		line 20 in file "lcd.c"
  5826 ;; Parameters:    Size  Location     Type
  5827 ;;  data            1    wreg     unsigned char 
  5828 ;; Auto vars:     Size  Location     Type
  5829 ;;  data            1    2[BANK0 ] unsigned char 
  5830 ;; Return value:  Size  Location     Type
  5831 ;;                  1    wreg      void 
  5832 ;; Registers used:
  5833 ;;		wreg, status,2, status,0, cstack
  5834 ;; Tracked objects:
  5835 ;;		On entry : 0/0
  5836 ;;		On exit  : 0/0
  5837 ;;		Unchanged: 0/0
  5838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5840 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5842 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5843 ;;Total ram usage:        1 bytes
  5844 ;; Hardware stack levels used:    1
  5845 ;; Hardware stack levels required when called:    8
  5846 ;; This function calls:
  5847 ;;		_lcdNibble
  5848 ;; This function is called by:
  5849 ;;		_initialize
  5850 ;;		_showRTC
  5851 ;;		_testAD
  5852 ;;		_main
  5853 ;;		_initLCD
  5854 ;;		_mainloop
  5855 ;; This function uses a non-reentrant model
  5856 ;;
  5857                           
  5858                           	psect	text29
  5859  002868                     __ptext29:
  5860                           	opt stack 0
  5861  002868                     _lcdInst:
  5862                           	opt stack 21
  5863                           
  5864                           ;incstack = 0
  5865                           ;lcdInst@data stored from wreg
  5866  002868  0100               	movlb	0	; () banked
  5867  00286A  6F82               	movwf	lcdInst@data& (0+255),b
  5868                           
  5869                           ;lcd.c: 21: LATDbits.LATD2 = 0;
  5870  00286C  948C               	bcf	3980,2,c	;volatile
  5871                           
  5872                           ;lcd.c: 22: lcdNibble(data);
  5873  00286E  0100               	movlb	0	; () banked
  5874  002870  5182               	movf	lcdInst@data& (0+255),w,b
  5875  002872  ECDA  F010         	call	_lcdNibble
  5876  002876  0012               	return		;funcret
  5877  002878                     __end_of_lcdInst:
  5878                           	opt stack 0
  5879                           tblptru	equ	0xFF8
  5880                           tblptrh	equ	0xFF7
  5881                           tblptrl	equ	0xFF6
  5882                           tablat	equ	0xFF5
  5883                           prodh	equ	0xFF4
  5884                           prodl	equ	0xFF3
  5885                           intcon	equ	0xFF2
  5886                           postinc0	equ	0xFEE
  5887                           wreg	equ	0xFE8
  5888                           indf2	equ	0xFDF
  5889                           postinc2	equ	0xFDE
  5890                           postdec2	equ	0xFDD
  5891                           fsr2h	equ	0xFDA
  5892                           fsr2l	equ	0xFD9
  5893                           status	equ	0xFD8
  5894                           
  5895 ;; *************** function _lcdNibble *****************
  5896 ;; Defined at:
  5897 ;;		line 30 in file "lcd.c"
  5898 ;; Parameters:    Size  Location     Type
  5899 ;;  data            1    wreg     unsigned char 
  5900 ;; Auto vars:     Size  Location     Type
  5901 ;;  data            1    1[BANK0 ] unsigned char 
  5902 ;;  temp            1    0[BANK0 ] unsigned char 
  5903 ;; Return value:  Size  Location     Type
  5904 ;;                  1    wreg      void 
  5905 ;; Registers used:
  5906 ;;		wreg, status,2, status,0
  5907 ;; Tracked objects:
  5908 ;;		On entry : 0/0
  5909 ;;		On exit  : 0/0
  5910 ;;		Unchanged: 0/0
  5911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5913 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5915 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5916 ;;Total ram usage:        2 bytes
  5917 ;; Hardware stack levels used:    1
  5918 ;; Hardware stack levels required when called:    7
  5919 ;; This function calls:
  5920 ;;		Nothing
  5921 ;; This function is called by:
  5922 ;;		_lcdInst
  5923 ;;		_putch
  5924 ;; This function uses a non-reentrant model
  5925 ;;
  5926                           
  5927                           	psect	text30
  5928  0021B4                     __ptext30:
  5929                           	opt stack 0
  5930  0021B4                     _lcdNibble:
  5931                           	opt stack 20
  5932                           
  5933                           ;incstack = 0
  5934                           ;lcdNibble@data stored from wreg
  5935  0021B4  0100               	movlb	0	; () banked
  5936  0021B6  6F81               	movwf	lcdNibble@data& (0+255),b
  5937                           
  5938                           ;lcd.c: 32: char temp = data & 0xF0;
  5939  0021B8  0100               	movlb	0	; () banked
  5940  0021BA  5181               	movf	lcdNibble@data& (0+255),w,b
  5941  0021BC  0BF0               	andlw	240
  5942  0021BE  0100               	movlb	0	; () banked
  5943  0021C0  6F80               	movwf	lcdNibble@temp& (0+255),b
  5944                           
  5945                           ;lcd.c: 33: LATD = LATD & 0x0F;
  5946  0021C2  508C               	movf	3980,w,c	;volatile
  5947  0021C4  0B0F               	andlw	15
  5948  0021C6  6E8C               	movwf	3980,c	;volatile
  5949                           
  5950                           ;lcd.c: 34: LATD = temp | LATD;
  5951  0021C8  0100               	movlb	0	; () banked
  5952  0021CA  5180               	movf	lcdNibble@temp& (0+255),w,b
  5953  0021CC  108C               	iorwf	3980,w,c	;volatile
  5954  0021CE  6E8C               	movwf	3980,c	;volatile
  5955                           
  5956                           ; BSR set to: 0
  5957                           ;lcd.c: 36: LATDbits.LATD3 = 0;
  5958  0021D0  968C               	bcf	3980,3,c	;volatile
  5959                           
  5960                           ; BSR set to: 0
  5961                           ;lcd.c: 37: _delay((unsigned long)((25)*(8000000/4000000.0)));
  5962  0021D2  0E10               	movlw	16
  5963  0021D4                     u3647:
  5964  0021D4  2EE8               	decfsz	wreg,f,c
  5965  0021D6  D7FE               	bra	u3647
  5966  0021D8  D000               	nop2	
  5967                           
  5968                           ;lcd.c: 38: LATDbits.LATD3 = 1;
  5969  0021DA  868C               	bsf	3980,3,c	;volatile
  5970                           
  5971                           ;lcd.c: 39: _delay((unsigned long)((25)*(8000000/4000000.0)));
  5972  0021DC  0E10               	movlw	16
  5973  0021DE                     u3657:
  5974  0021DE  2EE8               	decfsz	wreg,f,c
  5975  0021E0  D7FE               	bra	u3657
  5976  0021E2  D000               	nop2	
  5977                           
  5978                           ;lcd.c: 41: data = data << 4;
  5979  0021E4  0100               	movlb	0	; () banked
  5980  0021E6  3981               	swapf	lcdNibble@data& (0+255),w,b
  5981  0021E8  0BF0               	andlw	240
  5982  0021EA  0100               	movlb	0	; () banked
  5983  0021EC  6F81               	movwf	lcdNibble@data& (0+255),b
  5984                           
  5985                           ;lcd.c: 43: temp = data & 0xF0;
  5986  0021EE  0100               	movlb	0	; () banked
  5987  0021F0  5181               	movf	lcdNibble@data& (0+255),w,b
  5988  0021F2  0BF0               	andlw	240
  5989  0021F4  0100               	movlb	0	; () banked
  5990  0021F6  6F80               	movwf	lcdNibble@temp& (0+255),b
  5991                           
  5992                           ;lcd.c: 44: LATD = LATD & 0x0F;
  5993  0021F8  508C               	movf	3980,w,c	;volatile
  5994  0021FA  0B0F               	andlw	15
  5995  0021FC  6E8C               	movwf	3980,c	;volatile
  5996                           
  5997                           ;lcd.c: 45: LATD = temp | LATD;
  5998  0021FE  0100               	movlb	0	; () banked
  5999  002200  5180               	movf	lcdNibble@temp& (0+255),w,b
  6000  002202  108C               	iorwf	3980,w,c	;volatile
  6001  002204  6E8C               	movwf	3980,c	;volatile
  6002                           
  6003                           ; BSR set to: 0
  6004                           ;lcd.c: 47: LATDbits.LATD3 = 0;
  6005  002206  968C               	bcf	3980,3,c	;volatile
  6006                           
  6007                           ; BSR set to: 0
  6008                           ;lcd.c: 48: _delay((unsigned long)((25)*(8000000/4000000.0)));
  6009  002208  0E10               	movlw	16
  6010  00220A                     u3667:
  6011  00220A  2EE8               	decfsz	wreg,f,c
  6012  00220C  D7FE               	bra	u3667
  6013  00220E  D000               	nop2	
  6014                           
  6015                           ;lcd.c: 49: LATDbits.LATD3 = 1;
  6016  002210  868C               	bsf	3980,3,c	;volatile
  6017                           
  6018                           ;lcd.c: 50: _delay((unsigned long)((25)*(8000000/4000000.0)));
  6019  002212  0E10               	movlw	16
  6020  002214                     u3677:
  6021  002214  2EE8               	decfsz	wreg,f,c
  6022  002216  D7FE               	bra	u3677
  6023  002218  D000               	nop2	
  6024  00221A  0012               	return		;funcret
  6025  00221C                     __end_of_lcdNibble:
  6026                           	opt stack 0
  6027                           tblptru	equ	0xFF8
  6028                           tblptrh	equ	0xFF7
  6029                           tblptrl	equ	0xFF6
  6030                           tablat	equ	0xFF5
  6031                           prodh	equ	0xFF4
  6032                           prodl	equ	0xFF3
  6033                           intcon	equ	0xFF2
  6034                           postinc0	equ	0xFEE
  6035                           wreg	equ	0xFE8
  6036                           indf2	equ	0xFDF
  6037                           postinc2	equ	0xFDE
  6038                           postdec2	equ	0xFDD
  6039                           fsr2h	equ	0xFDA
  6040                           fsr2l	equ	0xFD9
  6041                           status	equ	0xFD8
  6042                           
  6043 ;; *************** function _I2C_Master_Init *****************
  6044 ;; Defined at:
  6045 ;;		line 13 in file "I2C.c"
  6046 ;; Parameters:    Size  Location     Type
  6047 ;;  c               4   13[BANK0 ] const unsigned long 
  6048 ;; Auto vars:     Size  Location     Type
  6049 ;;		None
  6050 ;; Return value:  Size  Location     Type
  6051 ;;                  1    wreg      void 
  6052 ;; Registers used:
  6053 ;;		wreg, status,2, status,0, cstack
  6054 ;; Tracked objects:
  6055 ;;		On entry : 0/0
  6056 ;;		On exit  : 0/0
  6057 ;;		Unchanged: 0/0
  6058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6059 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6061 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6062 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6063 ;;Total ram usage:        8 bytes
  6064 ;; Hardware stack levels used:    1
  6065 ;; Hardware stack levels required when called:    8
  6066 ;; This function calls:
  6067 ;;		___lldiv
  6068 ;; This function is called by:
  6069 ;;		_initialize
  6070 ;; This function uses a non-reentrant model
  6071 ;;
  6072                           
  6073                           	psect	text31
  6074  00227E                     __ptext31:
  6075                           	opt stack 0
  6076  00227E                     _I2C_Master_Init:
  6077                           	opt stack 21
  6078                           
  6079                           ;I2C.c: 15: SSPSTAT = 0b00000000;
  6080                           
  6081                           ;incstack = 0
  6082  00227E  0E00               	movlw	0
  6083  002280  6EC7               	movwf	4039,c	;volatile
  6084                           
  6085                           ;I2C.c: 16: SSPCON1 = 0b00101000;
  6086  002282  0E28               	movlw	40
  6087  002284  6EC6               	movwf	4038,c	;volatile
  6088                           
  6089                           ;I2C.c: 17: SSPCON2 = 0b00000000;
  6090  002286  0E00               	movlw	0
  6091  002288  6EC5               	movwf	4037,c	;volatile
  6092                           
  6093                           ;I2C.c: 18: SSPADD = (8000000 / (4 * c)) - 1;
  6094  00228A  0E00               	movlw	0
  6095  00228C  0100               	movlb	0	; () banked
  6096  00228E  6F80               	movwf	___lldiv@dividend& (0+255),b
  6097  002290  0E12               	movlw	18
  6098  002292  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  6099  002294  0E7A               	movlw	122
  6100  002296  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  6101  002298  0E00               	movlw	0
  6102  00229A  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  6103  00229C  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6104  0022A0  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6105  0022A4  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6106  0022A8  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6107  0022AC  0E02               	movlw	2
  6108  0022AE                     u3285:
  6109  0022AE  90D8               	bcf	status,0,c
  6110  0022B0  0100               	movlb	0	; () banked
  6111  0022B2  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  6112  0022B4  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  6113  0022B6  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  6114  0022B8  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  6115  0022BA  2EE8               	decfsz	wreg,f,c
  6116  0022BC  D7F8               	goto	u3285
  6117  0022BE  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  6118  0022C2  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6119  0022C6  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6120  0022CA  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6121  0022CE  ECCE  F00B         	call	___lldiv	;wreg free
  6122  0022D2  0100               	movlb	0	; () banked
  6123  0022D4  0580               	decf	?___lldiv& (0+255),w,b
  6124  0022D6  6EC8               	movwf	4040,c	;volatile
  6125                           
  6126                           ; BSR set to: 0
  6127                           ;I2C.c: 19: TRISC3 = 1;
  6128  0022D8  8694               	bsf	3988,3,c	;volatile
  6129                           
  6130                           ; BSR set to: 0
  6131                           ;I2C.c: 20: TRISC4 = 1;
  6132  0022DA  8894               	bsf	3988,4,c	;volatile
  6133                           
  6134                           ; BSR set to: 0
  6135  0022DC  0012               	return		;funcret
  6136  0022DE                     __end_of_I2C_Master_Init:
  6137                           	opt stack 0
  6138                           tblptru	equ	0xFF8
  6139                           tblptrh	equ	0xFF7
  6140                           tblptrl	equ	0xFF6
  6141                           tablat	equ	0xFF5
  6142                           prodh	equ	0xFF4
  6143                           prodl	equ	0xFF3
  6144                           intcon	equ	0xFF2
  6145                           postinc0	equ	0xFEE
  6146                           wreg	equ	0xFE8
  6147                           indf2	equ	0xFDF
  6148                           postinc2	equ	0xFDE
  6149                           postdec2	equ	0xFDD
  6150                           fsr2h	equ	0xFDA
  6151                           fsr2l	equ	0xFD9
  6152                           status	equ	0xFD8
  6153                           
  6154 ;; *************** function ___lldiv *****************
  6155 ;; Defined at:
  6156 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
  6157 ;; Parameters:    Size  Location     Type
  6158 ;;  dividend        4    0[BANK0 ] unsigned long 
  6159 ;;  divisor         4    4[BANK0 ] unsigned long 
  6160 ;; Auto vars:     Size  Location     Type
  6161 ;;  quotient        4    8[BANK0 ] unsigned long 
  6162 ;;  counter         1   12[BANK0 ] unsigned char 
  6163 ;; Return value:  Size  Location     Type
  6164 ;;                  4    0[BANK0 ] unsigned long 
  6165 ;; Registers used:
  6166 ;;		wreg, status,2, status,0
  6167 ;; Tracked objects:
  6168 ;;		On entry : 0/0
  6169 ;;		On exit  : 0/0
  6170 ;;		Unchanged: 0/0
  6171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6172 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6173 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6175 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6176 ;;Total ram usage:       13 bytes
  6177 ;; Hardware stack levels used:    1
  6178 ;; Hardware stack levels required when called:    7
  6179 ;; This function calls:
  6180 ;;		Nothing
  6181 ;; This function is called by:
  6182 ;;		_I2C_Master_Init
  6183 ;; This function uses a non-reentrant model
  6184 ;;
  6185                           
  6186                           	psect	text32
  6187  00179C                     __ptext32:
  6188                           	opt stack 0
  6189  00179C                     ___lldiv:
  6190                           	opt stack 21
  6191                           
  6192                           ; BSR set to: 0
  6193                           ;incstack = 0
  6194  00179C  0E00               	movlw	0
  6195  00179E  0100               	movlb	0	; () banked
  6196  0017A0  6F88               	movwf	___lldiv@quotient& (0+255),b
  6197  0017A2  0E00               	movlw	0
  6198  0017A4  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  6199  0017A6  0E00               	movlw	0
  6200  0017A8  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  6201  0017AA  0E00               	movlw	0
  6202  0017AC  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  6203                           
  6204                           ; BSR set to: 0
  6205  0017AE  0100               	movlb	0	; () banked
  6206  0017B0  5184               	movf	___lldiv@divisor& (0+255),w,b
  6207  0017B2  0100               	movlb	0	; () banked
  6208  0017B4  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  6209  0017B6  0100               	movlb	0	; () banked
  6210  0017B8  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  6211  0017BA  0100               	movlb	0	; () banked
  6212  0017BC  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  6213  0017BE  B4D8               	btfsc	status,2,c
  6214  0017C0  D042               	goto	l885
  6215                           
  6216                           ; BSR set to: 0
  6217  0017C2  0E01               	movlw	1
  6218  0017C4  0100               	movlb	0	; () banked
  6219  0017C6  6F8C               	movwf	___lldiv@counter& (0+255),b
  6220  0017C8  D008               	goto	l3945
  6221  0017CA                     l3943:
  6222                           
  6223                           ; BSR set to: 0
  6224  0017CA  0100               	movlb	0	; () banked
  6225  0017CC  90D8               	bcf	status,0,c
  6226  0017CE  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  6227  0017D0  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  6228  0017D2  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  6229  0017D4  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  6230  0017D6  0100               	movlb	0	; () banked
  6231  0017D8  2B8C               	incf	___lldiv@counter& (0+255),f,b
  6232  0017DA                     l3945:
  6233                           
  6234                           ; BSR set to: 0
  6235  0017DA  0100               	movlb	0	; () banked
  6236  0017DC  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  6237  0017DE  D7F5               	goto	l3943
  6238  0017E0                     l3947:
  6239                           
  6240                           ; BSR set to: 0
  6241  0017E0  0100               	movlb	0	; () banked
  6242  0017E2  90D8               	bcf	status,0,c
  6243  0017E4  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  6244  0017E6  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  6245  0017E8  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  6246  0017EA  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  6247                           
  6248                           ; BSR set to: 0
  6249  0017EC  0100               	movlb	0	; () banked
  6250  0017EE  5184               	movf	___lldiv@divisor& (0+255),w,b
  6251  0017F0  0100               	movlb	0	; () banked
  6252  0017F2  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  6253  0017F4  0100               	movlb	0	; () banked
  6254  0017F6  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6255  0017F8  0100               	movlb	0	; () banked
  6256  0017FA  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  6257  0017FC  0100               	movlb	0	; () banked
  6258  0017FE  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6259  001800  0100               	movlb	0	; () banked
  6260  001802  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  6261  001804  0100               	movlb	0	; () banked
  6262  001806  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6263  001808  0100               	movlb	0	; () banked
  6264  00180A  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  6265  00180C  A0D8               	btfss	status,0,c
  6266  00180E  D012               	goto	l3955
  6267                           
  6268                           ; BSR set to: 0
  6269  001810  0100               	movlb	0	; () banked
  6270  001812  5184               	movf	___lldiv@divisor& (0+255),w,b
  6271  001814  0100               	movlb	0	; () banked
  6272  001816  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  6273  001818  0100               	movlb	0	; () banked
  6274  00181A  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  6275  00181C  0100               	movlb	0	; () banked
  6276  00181E  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  6277  001820  0100               	movlb	0	; () banked
  6278  001822  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  6279  001824  0100               	movlb	0	; () banked
  6280  001826  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  6281  001828  0100               	movlb	0	; () banked
  6282  00182A  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  6283  00182C  0100               	movlb	0	; () banked
  6284  00182E  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  6285                           
  6286                           ; BSR set to: 0
  6287  001830  0100               	movlb	0	; () banked
  6288  001832  8188               	bsf	___lldiv@quotient& (0+255),0,b
  6289  001834                     l3955:
  6290                           
  6291                           ; BSR set to: 0
  6292  001834  0100               	movlb	0	; () banked
  6293  001836  90D8               	bcf	status,0,c
  6294  001838  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  6295  00183A  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  6296  00183C  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  6297  00183E  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  6298                           
  6299                           ; BSR set to: 0
  6300  001840  0100               	movlb	0	; () banked
  6301  001842  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  6302  001844  D7CD               	goto	l3947
  6303  001846                     l885:
  6304                           
  6305                           ; BSR set to: 0
  6306  001846  C088  F080         	movff	___lldiv@quotient,?___lldiv
  6307  00184A  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  6308  00184E  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  6309  001852  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  6310                           
  6311                           ; BSR set to: 0
  6312  001856  0012               	return		;funcret
  6313  001858                     __end_of___lldiv:
  6314                           	opt stack 0
  6315                           tblptru	equ	0xFF8
  6316                           tblptrh	equ	0xFF7
  6317                           tblptrl	equ	0xFF6
  6318                           tablat	equ	0xFF5
  6319                           prodh	equ	0xFF4
  6320                           prodl	equ	0xFF3
  6321                           intcon	equ	0xFF2
  6322                           postinc0	equ	0xFEE
  6323                           wreg	equ	0xFE8
  6324                           indf2	equ	0xFDF
  6325                           postinc2	equ	0xFDE
  6326                           postdec2	equ	0xFDD
  6327                           fsr2h	equ	0xFDA
  6328                           fsr2l	equ	0xFD9
  6329                           status	equ	0xFD8
  6330                           
  6331 ;; *************** function _intrpt *****************
  6332 ;; Defined at:
  6333 ;;		line 177 in file "main.c"
  6334 ;; Parameters:    Size  Location     Type
  6335 ;;		None
  6336 ;; Auto vars:     Size  Location     Type
  6337 ;;  portCW          6  102[COMRAM] int [3]
  6338 ;;  keypress        1  101[COMRAM] unsigned char 
  6339 ;; Return value:  Size  Location     Type
  6340 ;;                  1    wreg      void 
  6341 ;; Registers used:
  6342 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6343 ;; Tracked objects:
  6344 ;;		On entry : 0/0
  6345 ;;		On exit  : 0/0
  6346 ;;		Unchanged: 0/0
  6347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6349 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6350 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6351 ;;      Totals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6352 ;;Total ram usage:       23 bytes
  6353 ;; Hardware stack levels used:    1
  6354 ;; Hardware stack levels required when called:    6
  6355 ;; This function calls:
  6356 ;;		_PWMC
  6357 ;;		_PermLog
  6358 ;;		_simulate
  6359 ;;		_stopMoving
  6360 ;; This function is called by:
  6361 ;;		Interrupt level 2
  6362 ;; This function uses a non-reentrant model
  6363 ;;
  6364                           
  6365                           	psect	intcode
  6366  000008                     __pintcode:
  6367                           	opt stack 0
  6368  000008                     _intrpt:
  6369                           	opt stack 18
  6370                           
  6371                           ; BSR set to: 0
  6372                           ;incstack = 0
  6373  000008  827E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6374  00000A  EDB5  F006         	call	int_func,f	;refresh shadow registers
  6375                           tblptru	equ	0xFF8
  6376                           tblptrh	equ	0xFF7
  6377                           tblptrl	equ	0xFF6
  6378                           tablat	equ	0xFF5
  6379                           prodh	equ	0xFF4
  6380                           prodl	equ	0xFF3
  6381                           intcon	equ	0xFF2
  6382                           postinc0	equ	0xFEE
  6383                           wreg	equ	0xFE8
  6384                           indf2	equ	0xFDF
  6385                           postinc2	equ	0xFDE
  6386                           postdec2	equ	0xFDD
  6387                           fsr2h	equ	0xFDA
  6388                           fsr2l	equ	0xFD9
  6389                           status	equ	0xFD8
  6390                           
  6391                           	psect	intcode_body
  6392  000D6A                     __pintcode_body:
  6393                           	opt stack 18
  6394  000D6A                     int_func:
  6395                           	opt stack 18
  6396  000D6A  0006               	pop		; remove dummy address from shadow register refresh
  6397  000D6C  CFFA F058          	movff	pclath,??_intrpt+2
  6398  000D70  CFFB F059          	movff	pclatu,??_intrpt+3
  6399  000D74  CFE9 F05A          	movff	fsr0l,??_intrpt+4
  6400  000D78  CFEA F05B          	movff	fsr0h,??_intrpt+5
  6401  000D7C  CFE1 F05C          	movff	fsr1l,??_intrpt+6
  6402  000D80  CFE2 F05D          	movff	fsr1h,??_intrpt+7
  6403  000D84  CFD9 F05E          	movff	fsr2l,??_intrpt+8
  6404  000D88  CFDA F05F          	movff	fsr2h,??_intrpt+9
  6405  000D8C  CFF3 F060          	movff	prodl,??_intrpt+10
  6406  000D90  CFF4 F061          	movff	prodh,??_intrpt+11
  6407  000D94  CFF6 F062          	movff	tblptrl,??_intrpt+12
  6408  000D98  CFF7 F063          	movff	tblptrh,??_intrpt+13
  6409  000D9C  CFF8 F064          	movff	tblptru,??_intrpt+14
  6410  000DA0  CFF5 F065          	movff	tablat,??_intrpt+15
  6411                           
  6412                           ;main.c: 178: (INTCONbits.GIE = 0);
  6413  000DA4  9EF2               	bcf	intcon,7,c	;volatile
  6414                           
  6415                           ;main.c: 179: if (INT1IF) {
  6416  000DA6  A0F0               	btfss	intcon3,0,c	;volatile
  6417  000DA8  D07E               	goto	i2l134
  6418                           
  6419                           ;main.c: 180: int portCW[] = {0, 0, 0};
  6420  000DAA  EE20  F0BD         	lfsr	2,intrpt@F3114
  6421  000DAE  EE10  F067         	lfsr	1,intrpt@portCW
  6422  000DB2  0E05               	movlw	5
  6423  000DB4                     i2u355_41:
  6424  000DB4  CFDB FFE3          	movff	plusw2,plusw1
  6425  000DB8  06E8               	decf	wreg,f,c
  6426  000DBA  E2FC               	bc	i2u355_41
  6427                           
  6428                           ;main.c: 181: unsigned char keypress = (PORTB & 0xF0) >> 4;
  6429  000DBC  3881               	swapf	3969,w,c	;volatile
  6430  000DBE  0B0F               	andlw	15
  6431  000DC0  0B0F               	andlw	15
  6432  000DC2  6E66               	movwf	intrpt@keypress,c
  6433                           
  6434                           ;main.c: 182: INT1IF = 0;
  6435  000DC4  90F0               	bcf	intcon3,0,c	;volatile
  6436  000DC6                     i2l137:
  6437  000DC6  A281               	btfss	3969,1,c	;volatile
  6438  000DC8  D062               	goto	i2l4605
  6439  000DCA  D7FD               	goto	i2l137
  6440  000DCC                     i2l4573:
  6441                           
  6442                           ;main.c: 188: mode = 2;
  6443  000DCC  0E00               	movlw	0
  6444  000DCE  6E76               	movwf	_mode+1,c
  6445  000DD0  0E02               	movlw	2
  6446  000DD2  6E75               	movwf	_mode,c
  6447                           
  6448                           ;main.c: 189: PermLog();
  6449  000DD4  ECFE  F00A         	call	_PermLog	;wreg free
  6450                           
  6451                           ;main.c: 190: mode = 0;
  6452  000DD8  0E00               	movlw	0
  6453  000DDA  6E76               	movwf	_mode+1,c
  6454  000DDC  0E00               	movlw	0
  6455  000DDE  6E75               	movwf	_mode,c
  6456                           
  6457                           ;main.c: 191: break;
  6458  000DE0  D062               	goto	i2l134
  6459  000DE2                     i2l4579:
  6460                           
  6461                           ;main.c: 193: mode = 1;
  6462  000DE2  0E00               	movlw	0
  6463  000DE4  6E76               	movwf	_mode+1,c
  6464  000DE6  0E01               	movlw	1
  6465  000DE8  6E75               	movwf	_mode,c
  6466                           
  6467                           ;main.c: 194: (INTCONbits.GIE = 1);
  6468  000DEA  8EF2               	bsf	intcon,7,c	;volatile
  6469                           
  6470                           ;main.c: 195: simulate();
  6471  000DEC  EC0B  F004         	call	_simulate	;wreg free
  6472                           
  6473                           ;main.c: 196: (INTCONbits.GIE = 0);
  6474  000DF0  9EF2               	bcf	intcon,7,c	;volatile
  6475                           
  6476                           ;main.c: 197: break;
  6477  000DF2  D059               	goto	i2l134
  6478  000DF4                     i2l4587:
  6479                           
  6480                           ;main.c: 200: portCW[0] = 1;
  6481  000DF4  0E00               	movlw	0
  6482  000DF6  6E68               	movwf	intrpt@portCW+1,c
  6483  000DF8  0E01               	movlw	1
  6484  000DFA  6E67               	movwf	intrpt@portCW,c
  6485                           
  6486                           ;main.c: 201: PWMC(3000, 10, portCW);
  6487  000DFC  0E0B               	movlw	11
  6488  000DFE  6E0A               	movwf	PWMC@widthus+1,c
  6489  000E00  0EB8               	movlw	184
  6490  000E02  6E09               	movwf	PWMC@widthus,c
  6491  000E04  0E00               	movlw	0
  6492  000E06  6E0C               	movwf	PWMC@cycles+1,c
  6493  000E08  0E0A               	movlw	10
  6494  000E0A  6E0B               	movwf	PWMC@cycles,c
  6495  000E0C  0E67               	movlw	low intrpt@portCW
  6496  000E0E  6E0D               	movwf	PWMC@port,c
  6497  000E10  0E00               	movlw	high intrpt@portCW
  6498  000E12  6E0E               	movwf	PWMC@port+1,c
  6499  000E14  EC85  F00A         	call	_PWMC	;wreg free
  6500                           
  6501                           ;main.c: 202: break;
  6502  000E18  D046               	goto	i2l134
  6503  000E1A                     i2l4591:
  6504                           
  6505                           ;main.c: 205: portCW[1] = 1;
  6506  000E1A  0E00               	movlw	0
  6507  000E1C  6E6A               	movwf	intrpt@portCW+3,c
  6508  000E1E  0E01               	movlw	1
  6509  000E20  6E69               	movwf	intrpt@portCW+2,c
  6510                           
  6511                           ;main.c: 206: PWMC(3000, 10, portCW);
  6512  000E22  0E0B               	movlw	11
  6513  000E24  6E0A               	movwf	PWMC@widthus+1,c
  6514  000E26  0EB8               	movlw	184
  6515  000E28  6E09               	movwf	PWMC@widthus,c
  6516  000E2A  0E00               	movlw	0
  6517  000E2C  6E0C               	movwf	PWMC@cycles+1,c
  6518  000E2E  0E0A               	movlw	10
  6519  000E30  6E0B               	movwf	PWMC@cycles,c
  6520  000E32  0E67               	movlw	low intrpt@portCW
  6521  000E34  6E0D               	movwf	PWMC@port,c
  6522  000E36  0E00               	movlw	high intrpt@portCW
  6523  000E38  6E0E               	movwf	PWMC@port+1,c
  6524  000E3A  EC85  F00A         	call	_PWMC	;wreg free
  6525                           
  6526                           ;main.c: 207: break;
  6527  000E3E  D033               	goto	i2l134
  6528  000E40                     i2l4595:
  6529                           
  6530                           ;main.c: 211: portCW[2] = 1;
  6531  000E40  0E00               	movlw	0
  6532  000E42  6E6C               	movwf	intrpt@portCW+5,c
  6533  000E44  0E01               	movlw	1
  6534  000E46  6E6B               	movwf	intrpt@portCW+4,c
  6535                           
  6536                           ;main.c: 212: PWMC(3000, 10, portCW);
  6537  000E48  0E0B               	movlw	11
  6538  000E4A  6E0A               	movwf	PWMC@widthus+1,c
  6539  000E4C  0EB8               	movlw	184
  6540  000E4E  6E09               	movwf	PWMC@widthus,c
  6541  000E50  0E00               	movlw	0
  6542  000E52  6E0C               	movwf	PWMC@cycles+1,c
  6543  000E54  0E0A               	movlw	10
  6544  000E56  6E0B               	movwf	PWMC@cycles,c
  6545  000E58  0E67               	movlw	low intrpt@portCW
  6546  000E5A  6E0D               	movwf	PWMC@port,c
  6547  000E5C  0E00               	movlw	high intrpt@portCW
  6548  000E5E  6E0E               	movwf	PWMC@port+1,c
  6549  000E60  EC85  F00A         	call	_PWMC	;wreg free
  6550                           
  6551                           ;main.c: 213: break;
  6552  000E64  D020               	goto	i2l134
  6553  000E66                     i2l4601:
  6554  000E66  5066               	movf	intrpt@keypress,w,c
  6555                           
  6556                           ; Switch size 1, requested type "space"
  6557                           ; Number of cases is 6, Range of values is 3 to 15
  6558                           ; switch strategies available:
  6559                           ; Name         Instructions Cycles
  6560                           ; simple_byte           19    10 (average)
  6561                           ;	Chosen strategy is simple_byte
  6562  000E68  0A03               	xorlw	3	; case 3
  6563  000E6A  B4D8               	btfsc	status,2,c
  6564  000E6C  D7E9               	goto	i2l4595
  6565  000E6E  0A04               	xorlw	4	; case 7
  6566  000E70  B4D8               	btfsc	status,2,c
  6567  000E72  D7D3               	goto	i2l4591
  6568  000E74  0A0C               	xorlw	12	; case 11
  6569  000E76  B4D8               	btfsc	status,2,c
  6570  000E78  D7BD               	goto	i2l4587
  6571  000E7A  0A07               	xorlw	7	; case 12
  6572  000E7C  B4D8               	btfsc	status,2,c
  6573  000E7E  D02E               	goto	i2l150
  6574  000E80  0A02               	xorlw	2	; case 14
  6575  000E82  B4D8               	btfsc	status,2,c
  6576  000E84  D7A3               	goto	i2l4573
  6577  000E86  0A01               	xorlw	1	; case 15
  6578  000E88  B4D8               	btfsc	status,2,c
  6579  000E8A  D7AB               	goto	i2l4579
  6580                           
  6581                           ;main.c: 220: }
  6582                           
  6583                           ;main.c: 219: break;
  6584                           
  6585                           ;main.c: 218: default:
  6586                           
  6587                           ;main.c: 217: break;
  6588  000E8C  D00C               	goto	i2l134
  6589  000E8E                     i2l4605:
  6590  000E8E  C075  F056         	movff	_mode,??_intrpt
  6591  000E92  C076  F057         	movff	_mode+1,??_intrpt+1
  6592                           
  6593                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6594                           ; Switch size 1, requested type "space"
  6595                           ; Number of cases is 1, Range of values is 0 to 0
  6596                           ; switch strategies available:
  6597                           ; Name         Instructions Cycles
  6598                           ; simple_byte            4     3 (average)
  6599                           ;	Chosen strategy is simple_byte
  6600  000E96  5057               	movf	??_intrpt+1,w,c
  6601  000E98  0A00               	xorlw	0	; case 0
  6602  000E9A  A4D8               	btfss	status,2,c
  6603  000E9C  D004               	goto	i2l134
  6604                           
  6605                           ; Switch size 1, requested type "space"
  6606                           ; Number of cases is 1, Range of values is 0 to 0
  6607                           ; switch strategies available:
  6608                           ; Name         Instructions Cycles
  6609                           ; simple_byte            4     3 (average)
  6610                           ;	Chosen strategy is simple_byte
  6611  000E9E  5056               	movf	??_intrpt,w,c
  6612  000EA0  0A00               	xorlw	0	; case 0
  6613  000EA2  B4D8               	btfsc	status,2,c
  6614  000EA4  D7E0               	goto	i2l4601
  6615  000EA6                     i2l134:
  6616                           
  6617                           ;main.c: 221: }
  6618                           ;main.c: 222: if (INT2IF) {
  6619  000EA6  A2F0               	btfss	intcon3,1,c	;volatile
  6620  000EA8  D018               	goto	i2l153
  6621                           
  6622                           ;main.c: 223: INT2IF = 0;
  6623  000EAA  92F0               	bcf	intcon3,1,c	;volatile
  6624                           
  6625                           ;main.c: 224: switch (mode) {
  6626  000EAC  D008               	goto	i2l4615
  6627  000EAE                     i2l4609:
  6628                           
  6629                           ;main.c: 226: mode = 3;
  6630  000EAE  0E00               	movlw	0
  6631  000EB0  6E76               	movwf	_mode+1,c
  6632  000EB2  0E03               	movlw	3
  6633  000EB4  6E75               	movwf	_mode,c
  6634                           
  6635                           ;main.c: 227: stopMoving(1);
  6636  000EB6  0E01               	movlw	1
  6637  000EB8  ECD4  F012         	call	_stopMoving
  6638                           
  6639                           ;main.c: 231: }
  6640                           
  6641                           ;main.c: 230: break;
  6642                           
  6643                           ;main.c: 229: default:
  6644                           
  6645                           ;main.c: 228: break;
  6646  000EBC  D00C               	goto	i2l158
  6647  000EBE                     i2l4615:
  6648  000EBE  C075  F056         	movff	_mode,??_intrpt
  6649  000EC2  C076  F057         	movff	_mode+1,??_intrpt+1
  6650                           
  6651                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6652                           ; Switch size 1, requested type "space"
  6653                           ; Number of cases is 1, Range of values is 0 to 0
  6654                           ; switch strategies available:
  6655                           ; Name         Instructions Cycles
  6656                           ; simple_byte            4     3 (average)
  6657                           ;	Chosen strategy is simple_byte
  6658  000EC6  5057               	movf	??_intrpt+1,w,c
  6659  000EC8  0A00               	xorlw	0	; case 0
  6660  000ECA  A4D8               	btfss	status,2,c
  6661  000ECC  D004               	goto	i2l158
  6662                           
  6663                           ; Switch size 1, requested type "space"
  6664                           ; Number of cases is 1, Range of values is 1 to 1
  6665                           ; switch strategies available:
  6666                           ; Name         Instructions Cycles
  6667                           ; simple_byte            4     3 (average)
  6668                           ;	Chosen strategy is simple_byte
  6669  000ECE  5056               	movf	??_intrpt,w,c
  6670  000ED0  0A01               	xorlw	1	; case 1
  6671  000ED2  B4D8               	btfsc	status,2,c
  6672  000ED4  D7EC               	goto	i2l4609
  6673  000ED6                     i2l158:
  6674  000ED6  B481               	btfsc	3969,2,c	;volatile
  6675  000ED8  D7FE               	goto	i2l158
  6676  000EDA                     i2l153:
  6677                           
  6678                           ;main.c: 233: }
  6679                           ;main.c: 234: (INTCONbits.GIE = 1);
  6680  000EDA  8EF2               	bsf	intcon,7,c	;volatile
  6681  000EDC                     i2l150:
  6682  000EDC  C065  FFF5         	movff	??_intrpt+15,tablat
  6683  000EE0  C064  FFF8         	movff	??_intrpt+14,tblptru
  6684  000EE4  C063  FFF7         	movff	??_intrpt+13,tblptrh
  6685  000EE8  C062  FFF6         	movff	??_intrpt+12,tblptrl
  6686  000EEC  C061  FFF4         	movff	??_intrpt+11,prodh
  6687  000EF0  C060  FFF3         	movff	??_intrpt+10,prodl
  6688  000EF4  C05F  FFDA         	movff	??_intrpt+9,fsr2h
  6689  000EF8  C05E  FFD9         	movff	??_intrpt+8,fsr2l
  6690  000EFC  C05D  FFE2         	movff	??_intrpt+7,fsr1h
  6691  000F00  C05C  FFE1         	movff	??_intrpt+6,fsr1l
  6692  000F04  C05B  FFEA         	movff	??_intrpt+5,fsr0h
  6693  000F08  C05A  FFE9         	movff	??_intrpt+4,fsr0l
  6694  000F0C  C059  FFFB         	movff	??_intrpt+3,pclatu
  6695  000F10  C058  FFFA         	movff	??_intrpt+2,pclath
  6696  000F14  927E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6697  000F16  0011               	retfie		f
  6698  000F18                     __end_of_intrpt:
  6699                           	opt stack 0
  6700                           pclatu	equ	0xFFB
  6701                           pclath	equ	0xFFA
  6702                           tblptru	equ	0xFF8
  6703                           tblptrh	equ	0xFF7
  6704                           tblptrl	equ	0xFF6
  6705                           tablat	equ	0xFF5
  6706                           prodh	equ	0xFF4
  6707                           prodl	equ	0xFF3
  6708                           intcon	equ	0xFF2
  6709                           intcon3	equ	0xFF0
  6710                           postinc0	equ	0xFEE
  6711                           fsr0h	equ	0xFEA
  6712                           fsr0l	equ	0xFE9
  6713                           wreg	equ	0xFE8
  6714                           plusw1	equ	0xFE3
  6715                           fsr1h	equ	0xFE2
  6716                           fsr1l	equ	0xFE1
  6717                           indf2	equ	0xFDF
  6718                           postinc2	equ	0xFDE
  6719                           postdec2	equ	0xFDD
  6720                           plusw2	equ	0xFDB
  6721                           fsr2h	equ	0xFDA
  6722                           fsr2l	equ	0xFD9
  6723                           status	equ	0xFD8
  6724                           
  6725 ;; *************** function _simulate *****************
  6726 ;; Defined at:
  6727 ;;		line 56 in file "main.c"
  6728 ;; Parameters:    Size  Location     Type
  6729 ;;		None
  6730 ;; Auto vars:     Size  Location     Type
  6731 ;;  portCCW         6   59[COMRAM] int [3]
  6732 ;;  portCW          6   53[COMRAM] int [3]
  6733 ;;  sorted          4   81[COMRAM] unsigned char [4]
  6734 ;;  start           4   69[COMRAM] unsigned int [2]
  6735 ;;  now             4   65[COMRAM] unsigned int [2]
  6736 ;;  period          2   79[COMRAM] unsigned int 
  6737 ;;  V9              2   77[COMRAM] int 
  6738 ;;  C               2   75[COMRAM] int 
  6739 ;;  AA              2   73[COMRAM] int 
  6740 ;;  stop            2   49[COMRAM] int 
  6741 ;; Return value:  Size  Location     Type
  6742 ;;                  1    wreg      void 
  6743 ;; Registers used:
  6744 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6745 ;; Tracked objects:
  6746 ;;		On entry : 0/0
  6747 ;;		On exit  : 0/0
  6748 ;;		Unchanged: 0/0
  6749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6751 ;;      Locals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6752 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6753 ;;      Totals:        38       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6754 ;;Total ram usage:       38 bytes
  6755 ;; Hardware stack levels used:    1
  6756 ;; Hardware stack levels required when called:    5
  6757 ;; This function calls:
  6758 ;;		_CCW90
  6759 ;;		_CW90
  6760 ;;		_HexDecToDec2
  6761 ;;		_WriteRun
  6762 ;;		_captureKeypad
  6763 ;;		_showInfo
  6764 ;;		_stopMoving
  6765 ;;		i2___wmul
  6766 ;;		i2_check9
  6767 ;;		i2_checkAA
  6768 ;;		i2_checkC
  6769 ;;		i2_getTime
  6770 ;;		i2_lcdInst
  6771 ;;		i2_printf
  6772 ;; This function is called by:
  6773 ;;		_intrpt
  6774 ;; This function uses a non-reentrant model
  6775 ;;
  6776                           
  6777                           	psect	text34
  6778  000816                     __ptext34:
  6779                           	opt stack 0
  6780  000816                     _simulate:
  6781                           	opt stack 18
  6782                           
  6783                           ;main.c: 57: unsigned int now[] = {0, 0}, start[] = {0, 0};
  6784                           
  6785                           ;incstack = 0
  6786  000816  C071  F042         	movff	simulate@F3093,simulate@now
  6787  00081A  C072  F043         	movff	simulate@F3093+1,simulate@now+1
  6788  00081E  C073  F044         	movff	simulate@F3093+2,simulate@now+2
  6789  000822  C074  F045         	movff	simulate@F3093+3,simulate@now+3
  6790  000826  C06D  F046         	movff	simulate@F3095,simulate@start
  6791  00082A  C06E  F047         	movff	simulate@F3095+1,simulate@start+1
  6792  00082E  C06F  F048         	movff	simulate@F3095+2,simulate@start+2
  6793  000832  C070  F049         	movff	simulate@F3095+3,simulate@start+3
  6794                           
  6795                           ;main.c: 58: unsigned char sorted[] = {0, 0, 0, 0};
  6796  000836  C0D7  F052         	movff	simulate@F3097,simulate@sorted
  6797  00083A  C0D8  F053         	movff	simulate@F3097+1,simulate@sorted+1
  6798  00083E  C0D9  F054         	movff	simulate@F3097+2,simulate@sorted+2
  6799  000842  C0DA  F055         	movff	simulate@F3097+3,simulate@sorted+3
  6800                           
  6801                           ;main.c: 59: unsigned int period = 0;
  6802  000846  0E00               	movlw	0
  6803  000848  6E51               	movwf	simulate@period+1,c
  6804  00084A  0E00               	movlw	0
  6805  00084C  6E50               	movwf	simulate@period,c
  6806                           
  6807                           ;main.c: 60: int stop = 0;
  6808  00084E  0E00               	movlw	0
  6809  000850  6E33               	movwf	simulate@stop+1,c
  6810  000852  0E00               	movlw	0
  6811  000854  6E32               	movwf	simulate@stop,c
  6812                           
  6813                           ;main.c: 61: int AA, C, V9;
  6814                           ;main.c: 62: lcdInst(0b10000000);
  6815  000856  0E80               	movlw	128
  6816  000858  EC42  F014         	call	i2_lcdInst
  6817                           
  6818                           ;main.c: 63: printf("Simulating...          ");
  6819  00085C  0E89               	movlw	low STR_2
  6820  00085E  6E0D               	movwf	i2printf@f,c
  6821  000860  0EFE               	movlw	high STR_2
  6822  000862  6E0E               	movwf	i2printf@f+1,c
  6823  000864  EC3E  F002         	call	i2_printf	;wreg free
  6824                           
  6825                           ;main.c: 64: start[0] = time[0];
  6826  000868  C077  F046         	movff	_time,simulate@start
  6827  00086C  6A47               	clrf	simulate@start+1,c
  6828                           
  6829                           ;main.c: 65: start[1] = time[1];
  6830  00086E  C078  F048         	movff	_time+1,simulate@start+2
  6831  000872  6A49               	clrf	simulate@start+3,c
  6832                           
  6833                           ;main.c: 66: LATC6 = 1;
  6834  000874  8C8B               	bsf	3979,6,c	;volatile
  6835                           
  6836                           ;main.c: 67: INT2IE = 1;
  6837  000876  88F0               	bsf	intcon3,4,c	;volatile
  6838                           
  6839                           ;main.c: 68: INT2IF = 0;
  6840  000878  92F0               	bcf	intcon3,1,c	;volatile
  6841                           
  6842                           ;main.c: 69: while (!stop) {
  6843  00087A  D129               	goto	i2l4477
  6844  00087C                     i2l4379:
  6845                           
  6846                           ;main.c: 70: lcdInst(0b10000000);
  6847  00087C  0E80               	movlw	128
  6848  00087E  EC42  F014         	call	i2_lcdInst
  6849                           
  6850                           ;main.c: 71: V9 = check9(sorted);
  6851  000882  0E52               	movlw	low simulate@sorted
  6852  000884  6E2A               	movwf	i2check9@sorted,c
  6853  000886  0E00               	movlw	high simulate@sorted
  6854  000888  6E2B               	movwf	i2check9@sorted+1,c
  6855  00088A  ECF8  F00F         	call	i2_check9	;wreg free
  6856  00088E  C02A  F04E         	movff	?i2_check9,simulate@V9
  6857  000892  C02B  F04F         	movff	?i2_check9+1,simulate@V9+1
  6858                           
  6859                           ;main.c: 72: C = checkC(sorted);
  6860  000896  0E52               	movlw	low simulate@sorted
  6861  000898  6E2A               	movwf	i2checkC@sorted,c
  6862  00089A  0E00               	movlw	high simulate@sorted
  6863  00089C  6E2B               	movwf	i2checkC@sorted+1,c
  6864  00089E  ECBD  F00F         	call	i2_checkC	;wreg free
  6865  0008A2  C02A  F04C         	movff	?i2_checkC,simulate@C
  6866  0008A6  C02B  F04D         	movff	?i2_checkC+1,simulate@C+1
  6867                           
  6868                           ;main.c: 73: AA = checkAA(sorted);
  6869  0008AA  0E52               	movlw	low simulate@sorted
  6870  0008AC  6E2A               	movwf	i2checkAA@sorted,c
  6871  0008AE  0E00               	movlw	high simulate@sorted
  6872  0008B0  6E2B               	movwf	i2checkAA@sorted+1,c
  6873  0008B2  EC33  F010         	call	i2_checkAA	;wreg free
  6874  0008B6  C02A  F04A         	movff	?i2_checkAA,simulate@AA
  6875  0008BA  C02B  F04B         	movff	?i2_checkAA+1,simulate@AA+1
  6876                           
  6877                           ;main.c: 74: printf("    ");
  6878  0008BE  0ED1               	movlw	low (STR_28+11)
  6879  0008C0  6E0D               	movwf	i2printf@f,c
  6880  0008C2  0EFF               	movlw	high (STR_28+11)
  6881  0008C4  6E0E               	movwf	i2printf@f+1,c
  6882  0008C6  EC3E  F002         	call	i2_printf	;wreg free
  6883                           
  6884                           ;main.c: 76: int portCW[] = {0, 0, 0};
  6885  0008CA  EE20  F0C9         	lfsr	2,simulate@F3104
  6886  0008CE  EE10  F036         	lfsr	1,simulate@portCW
  6887  0008D2  0E05               	movlw	5
  6888  0008D4                     i2u341_41:
  6889  0008D4  CFDB FFE3          	movff	plusw2,plusw1
  6890  0008D8  06E8               	decf	wreg,f,c
  6891  0008DA  E2FC               	bc	i2u341_41
  6892                           
  6893                           ;main.c: 77: int portCCW[] = {0, 0, 0};
  6894  0008DC  EE20  F0C3         	lfsr	2,simulate@F3106
  6895  0008E0  EE10  F03C         	lfsr	1,simulate@portCCW
  6896  0008E4  0E05               	movlw	5
  6897  0008E6                     i2u342_41:
  6898  0008E6  CFDB FFE3          	movff	plusw2,plusw1
  6899  0008EA  06E8               	decf	wreg,f,c
  6900  0008EC  E2FC               	bc	i2u342_41
  6901                           
  6902                           ;main.c: 80: lcdInst(0b11000000);
  6903  0008EE  0EC0               	movlw	192
  6904  0008F0  EC42  F014         	call	i2_lcdInst
  6905                           
  6906                           ;main.c: 81: printf("9V:");
  6907  0008F4  0EF1               	movlw	low STR_4
  6908  0008F6  6E0D               	movwf	i2printf@f,c
  6909  0008F8  0EFF               	movlw	high STR_4
  6910  0008FA  6E0E               	movwf	i2printf@f+1,c
  6911  0008FC  EC3E  F002         	call	i2_printf	;wreg free
  6912                           
  6913                           ;main.c: 82: if (!V9) {
  6914  000900  504E               	movf	simulate@V9,w,c
  6915  000902  104F               	iorwf	simulate@V9+1,w,c
  6916  000904  A4D8               	btfss	status,2,c
  6917  000906  D00D               	goto	i2l4403
  6918                           
  6919                           ;main.c: 83: portCCW[0] = 1;
  6920  000908  0E00               	movlw	0
  6921  00090A  6E3D               	movwf	simulate@portCCW+1,c
  6922  00090C  0E01               	movlw	1
  6923  00090E  6E3C               	movwf	simulate@portCCW,c
  6924                           
  6925                           ;main.c: 84: printf(" -");
  6926  000910  0EF8               	movlw	low STR_5
  6927  000912  6E0D               	movwf	i2printf@f,c
  6928  000914  0EFF               	movlw	high STR_5
  6929  000916  6E0E               	movwf	i2printf@f+1,c
  6930  000918  EC3E  F002         	call	i2_printf	;wreg free
  6931                           
  6932                           ;main.c: 86: captureKeypad();
  6933  00091C  ECE5  F013         	call	_captureKeypad	;wreg free
  6934                           
  6935                           ;main.c: 88: } else if (V9 == 1) {
  6936  000920  D017               	goto	i2l114
  6937  000922                     i2l4403:
  6938  000922  044E               	decf	simulate@V9,w,c
  6939  000924  104F               	iorwf	simulate@V9+1,w,c
  6940  000926  A4D8               	btfss	status,2,c
  6941  000928  D00D               	goto	i2l4411
  6942                           
  6943                           ;main.c: 89: portCW[0] = 1;
  6944  00092A  0E00               	movlw	0
  6945  00092C  6E37               	movwf	simulate@portCW+1,c
  6946  00092E  0E01               	movlw	1
  6947  000930  6E36               	movwf	simulate@portCW,c
  6948                           
  6949                           ;main.c: 90: printf(" +");
  6950  000932  0EF5               	movlw	low STR_6
  6951  000934  6E0D               	movwf	i2printf@f,c
  6952  000936  0EFF               	movlw	high STR_6
  6953  000938  6E0E               	movwf	i2printf@f+1,c
  6954  00093A  EC3E  F002         	call	i2_printf	;wreg free
  6955                           
  6956                           ;main.c: 92: captureKeypad();
  6957  00093E  ECE5  F013         	call	_captureKeypad	;wreg free
  6958                           
  6959                           ;main.c: 94: } else {
  6960  000942  D006               	goto	i2l114
  6961  000944                     i2l4411:
  6962                           
  6963                           ;main.c: 95: printf(" 0");
  6964  000944  0EFB               	movlw	low STR_7
  6965  000946  6E0D               	movwf	i2printf@f,c
  6966  000948  0EFF               	movlw	high STR_7
  6967  00094A  6E0E               	movwf	i2printf@f+1,c
  6968  00094C  EC3E  F002         	call	i2_printf	;wreg free
  6969  000950                     i2l114:
  6970                           
  6971                           ;main.c: 96: }
  6972                           ;main.c: 98: printf(" C:");
  6973  000950  0EED               	movlw	low STR_8
  6974  000952  6E0D               	movwf	i2printf@f,c
  6975  000954  0EFF               	movlw	high STR_8
  6976  000956  6E0E               	movwf	i2printf@f+1,c
  6977  000958  EC3E  F002         	call	i2_printf	;wreg free
  6978                           
  6979                           ;main.c: 100: if (!C) {
  6980  00095C  504C               	movf	simulate@C,w,c
  6981  00095E  104D               	iorwf	simulate@C+1,w,c
  6982  000960  A4D8               	btfss	status,2,c
  6983  000962  D00D               	goto	i2l4421
  6984                           
  6985                           ;main.c: 101: portCCW[1] = 1;
  6986  000964  0E00               	movlw	0
  6987  000966  6E3F               	movwf	simulate@portCCW+3,c
  6988  000968  0E01               	movlw	1
  6989  00096A  6E3E               	movwf	simulate@portCCW+2,c
  6990                           
  6991                           ;main.c: 102: printf(" -");
  6992  00096C  0EF8               	movlw	low STR_5
  6993  00096E  6E0D               	movwf	i2printf@f,c
  6994  000970  0EFF               	movlw	high STR_5
  6995  000972  6E0E               	movwf	i2printf@f+1,c
  6996  000974  EC3E  F002         	call	i2_printf	;wreg free
  6997                           
  6998                           ;main.c: 104: captureKeypad();
  6999  000978  ECE5  F013         	call	_captureKeypad	;wreg free
  7000                           
  7001                           ;main.c: 106: } else if (C == 1) {
  7002  00097C  D017               	goto	i2l118
  7003  00097E                     i2l4421:
  7004  00097E  044C               	decf	simulate@C,w,c
  7005  000980  104D               	iorwf	simulate@C+1,w,c
  7006  000982  A4D8               	btfss	status,2,c
  7007  000984  D00D               	goto	i2l4429
  7008                           
  7009                           ;main.c: 107: portCW[1] = 1;
  7010  000986  0E00               	movlw	0
  7011  000988  6E39               	movwf	simulate@portCW+3,c
  7012  00098A  0E01               	movlw	1
  7013  00098C  6E38               	movwf	simulate@portCW+2,c
  7014                           
  7015                           ;main.c: 108: printf(" +");
  7016  00098E  0EF5               	movlw	low STR_6
  7017  000990  6E0D               	movwf	i2printf@f,c
  7018  000992  0EFF               	movlw	high STR_6
  7019  000994  6E0E               	movwf	i2printf@f+1,c
  7020  000996  EC3E  F002         	call	i2_printf	;wreg free
  7021                           
  7022                           ;main.c: 110: captureKeypad();
  7023  00099A  ECE5  F013         	call	_captureKeypad	;wreg free
  7024                           
  7025                           ;main.c: 112: } else {
  7026  00099E  D006               	goto	i2l118
  7027  0009A0                     i2l4429:
  7028                           
  7029                           ;main.c: 113: printf(" 0");
  7030  0009A0  0EFB               	movlw	low STR_7
  7031  0009A2  6E0D               	movwf	i2printf@f,c
  7032  0009A4  0EFF               	movlw	high STR_7
  7033  0009A6  6E0E               	movwf	i2printf@f+1,c
  7034  0009A8  EC3E  F002         	call	i2_printf	;wreg free
  7035  0009AC                     i2l118:
  7036                           
  7037                           ;main.c: 114: }
  7038                           ;main.c: 116: printf(" AA:");
  7039  0009AC  0EE4               	movlw	low STR_12
  7040  0009AE  6E0D               	movwf	i2printf@f,c
  7041  0009B0  0EFF               	movlw	high STR_12
  7042  0009B2  6E0E               	movwf	i2printf@f+1,c
  7043  0009B4  EC3E  F002         	call	i2_printf	;wreg free
  7044                           
  7045                           ;main.c: 118: if (!AA) {
  7046  0009B8  504A               	movf	simulate@AA,w,c
  7047  0009BA  104B               	iorwf	simulate@AA+1,w,c
  7048  0009BC  A4D8               	btfss	status,2,c
  7049  0009BE  D00D               	goto	i2l4439
  7050                           
  7051                           ;main.c: 119: portCCW[2] = 1;
  7052  0009C0  0E00               	movlw	0
  7053  0009C2  6E41               	movwf	simulate@portCCW+5,c
  7054  0009C4  0E01               	movlw	1
  7055  0009C6  6E40               	movwf	simulate@portCCW+4,c
  7056                           
  7057                           ;main.c: 120: printf(" -");
  7058  0009C8  0EF8               	movlw	low STR_5
  7059  0009CA  6E0D               	movwf	i2printf@f,c
  7060  0009CC  0EFF               	movlw	high STR_5
  7061  0009CE  6E0E               	movwf	i2printf@f+1,c
  7062  0009D0  EC3E  F002         	call	i2_printf	;wreg free
  7063                           
  7064                           ;main.c: 122: captureKeypad();
  7065  0009D4  ECE5  F013         	call	_captureKeypad	;wreg free
  7066                           
  7067                           ;main.c: 124: } else if (AA == 1) {
  7068  0009D8  D017               	goto	i2l4449
  7069  0009DA                     i2l4439:
  7070  0009DA  044A               	decf	simulate@AA,w,c
  7071  0009DC  104B               	iorwf	simulate@AA+1,w,c
  7072  0009DE  A4D8               	btfss	status,2,c
  7073  0009E0  D00D               	goto	i2l4447
  7074                           
  7075                           ;main.c: 125: portCW[2] = 1;
  7076  0009E2  0E00               	movlw	0
  7077  0009E4  6E3B               	movwf	simulate@portCW+5,c
  7078  0009E6  0E01               	movlw	1
  7079  0009E8  6E3A               	movwf	simulate@portCW+4,c
  7080                           
  7081                           ;main.c: 126: printf(" +");
  7082  0009EA  0EF5               	movlw	low STR_6
  7083  0009EC  6E0D               	movwf	i2printf@f,c
  7084  0009EE  0EFF               	movlw	high STR_6
  7085  0009F0  6E0E               	movwf	i2printf@f+1,c
  7086  0009F2  EC3E  F002         	call	i2_printf	;wreg free
  7087                           
  7088                           ;main.c: 128: captureKeypad();
  7089  0009F6  ECE5  F013         	call	_captureKeypad	;wreg free
  7090                           
  7091                           ;main.c: 130: } else {
  7092  0009FA  D006               	goto	i2l4449
  7093  0009FC                     i2l4447:
  7094                           
  7095                           ;main.c: 131: printf(" 0");
  7096  0009FC  0EFB               	movlw	low STR_7
  7097  0009FE  6E0D               	movwf	i2printf@f,c
  7098  000A00  0EFF               	movlw	high STR_7
  7099  000A02  6E0E               	movwf	i2printf@f+1,c
  7100  000A04  EC3E  F002         	call	i2_printf	;wreg free
  7101  000A08                     i2l4449:
  7102                           
  7103                           ;main.c: 132: }
  7104                           ;main.c: 135: CCW90(portCCW);
  7105  000A08  0E3C               	movlw	low simulate@portCCW
  7106  000A0A  6E16               	movwf	CCW90@port,c
  7107  000A0C  0E00               	movlw	high simulate@portCCW
  7108  000A0E  6E17               	movwf	CCW90@port+1,c
  7109  000A10  ECA3  F010         	call	_CCW90	;wreg free
  7110                           
  7111                           ;main.c: 136: CW90(portCW);
  7112  000A14  0E36               	movlw	low simulate@portCW
  7113  000A16  6E16               	movwf	CW90@port,c
  7114  000A18  0E00               	movlw	high simulate@portCW
  7115  000A1A  6E17               	movwf	CW90@port+1,c
  7116  000A1C  EC6C  F010         	call	_CW90	;wreg free
  7117                           
  7118                           ;main.c: 137: LATC0 = 0;
  7119  000A20  908B               	bcf	3979,0,c	;volatile
  7120                           
  7121                           ;main.c: 138: LATC1 = 0;
  7122  000A22  928B               	bcf	3979,1,c	;volatile
  7123                           
  7124                           ;main.c: 139: LATC2 = 0;
  7125  000A24  948B               	bcf	3979,2,c	;volatile
  7126                           
  7127                           ;main.c: 144: }
  7128                           ;main.c: 145: getTime(time);
  7129  000A26  0E77               	movlw	low _time
  7130  000A28  6E04               	movwf	i2getTime@time,c
  7131  000A2A  0E00               	movlw	high _time
  7132  000A2C  6E05               	movwf	i2getTime@time+1,c
  7133  000A2E  EC82  F00F         	call	i2_getTime	;wreg free
  7134                           
  7135                           ;main.c: 146: now[0] = time[0];
  7136  000A32  C077  F042         	movff	_time,simulate@now
  7137  000A36  6A43               	clrf	simulate@now+1,c
  7138                           
  7139                           ;main.c: 147: now[1] = time[1];
  7140  000A38  C078  F044         	movff	_time+1,simulate@now+2
  7141  000A3C  6A45               	clrf	simulate@now+3,c
  7142                           
  7143                           ;main.c: 148: lcdInst(0b10000000);
  7144  000A3E  0E80               	movlw	128
  7145  000A40  EC42  F014         	call	i2_lcdInst
  7146                           
  7147                           ;main.c: 150: period = (HexDecToDec2(now[1]) - HexDecToDec2(start[1]))*60 + HexDecToDec2
      +                          (now[0]) - HexDecToDec2(start[0]);
  7148  000A44  C044  F007         	movff	simulate@now+2,HexDecToDec2@hex
  7149  000A48  C045  F008         	movff	simulate@now+3,HexDecToDec2@hex+1
  7150  000A4C  ECEF  F011         	call	_HexDecToDec2	;wreg free
  7151  000A50  C007  F030         	movff	?_HexDecToDec2,??_simulate
  7152  000A54  C008  F031         	movff	?_HexDecToDec2+1,??_simulate+1
  7153  000A58  C048  F007         	movff	simulate@start+2,HexDecToDec2@hex
  7154  000A5C  C049  F008         	movff	simulate@start+3,HexDecToDec2@hex+1
  7155  000A60  ECEF  F011         	call	_HexDecToDec2	;wreg free
  7156  000A64  1E07               	comf	?_HexDecToDec2,f,c
  7157  000A66  1E08               	comf	?_HexDecToDec2+1,f,c
  7158  000A68  4A07               	infsnz	?_HexDecToDec2,f,c
  7159  000A6A  2A08               	incf	?_HexDecToDec2+1,f,c
  7160  000A6C  5007               	movf	?_HexDecToDec2,w,c
  7161  000A6E  2430               	addwf	??_simulate,w,c
  7162  000A70  6E34               	movwf	_simulate$1556,c
  7163  000A72  5008               	movf	?_HexDecToDec2+1,w,c
  7164  000A74  2031               	addwfc	??_simulate+1,w,c
  7165  000A76  6E35               	movwf	_simulate$1556+1,c
  7166                           
  7167                           ;main.c: 150: period = (HexDecToDec2(now[1]) - HexDecToDec2(start[1]))*60 + HexDecToDec2
      +                          (now[0]) - HexDecToDec2(start[0]);
  7168  000A78  C034  F001         	movff	_simulate$1556,i2___wmul@multiplier
  7169  000A7C  C035  F002         	movff	_simulate$1556+1,i2___wmul@multiplier+1
  7170  000A80  0E00               	movlw	0
  7171  000A82  6E04               	movwf	i2___wmul@multiplicand+1,c
  7172  000A84  0E3C               	movlw	60
  7173  000A86  6E03               	movwf	i2___wmul@multiplicand,c
  7174  000A88  ECB2  F013         	call	i2___wmul	;wreg free
  7175  000A8C  C001  F030         	movff	?i2___wmul,??_simulate
  7176  000A90  C002  F031         	movff	?i2___wmul+1,??_simulate+1
  7177  000A94  C042  F007         	movff	simulate@now,HexDecToDec2@hex
  7178  000A98  C043  F008         	movff	simulate@now+1,HexDecToDec2@hex+1
  7179  000A9C  ECEF  F011         	call	_HexDecToDec2	;wreg free
  7180  000AA0  5007               	movf	?_HexDecToDec2,w,c
  7181  000AA2  2630               	addwf	??_simulate,f,c
  7182  000AA4  5008               	movf	?_HexDecToDec2+1,w,c
  7183  000AA6  2231               	addwfc	??_simulate+1,f,c
  7184  000AA8  C046  F007         	movff	simulate@start,HexDecToDec2@hex
  7185  000AAC  C047  F008         	movff	simulate@start+1,HexDecToDec2@hex+1
  7186  000AB0  ECEF  F011         	call	_HexDecToDec2	;wreg free
  7187  000AB4  1E07               	comf	?_HexDecToDec2,f,c
  7188  000AB6  1E08               	comf	?_HexDecToDec2+1,f,c
  7189  000AB8  4A07               	infsnz	?_HexDecToDec2,f,c
  7190  000ABA  2A08               	incf	?_HexDecToDec2+1,f,c
  7191  000ABC  5007               	movf	?_HexDecToDec2,w,c
  7192  000ABE  2430               	addwf	??_simulate,w,c
  7193  000AC0  6E50               	movwf	simulate@period,c
  7194  000AC2  5008               	movf	?_HexDecToDec2+1,w,c
  7195  000AC4  2031               	addwfc	??_simulate+1,w,c
  7196  000AC6  6E51               	movwf	simulate@period+1,c
  7197                           
  7198                           ;main.c: 151: lcdInst(0b11000000);
  7199  000AC8  0EC0               	movlw	192
  7200  000ACA  EC42  F014         	call	i2_lcdInst
  7201  000ACE                     i2l4477:
  7202  000ACE  5032               	movf	simulate@stop,w,c
  7203  000AD0  1033               	iorwf	simulate@stop+1,w,c
  7204  000AD2  B4D8               	btfsc	status,2,c
  7205  000AD4  D6D3               	goto	i2l4379
  7206                           
  7207                           ;main.c: 155: }
  7208                           ;main.c: 156: }
  7209                           ;main.c: 157: mode = 2;
  7210  000AD6  0E00               	movlw	0
  7211  000AD8  6E76               	movwf	_mode+1,c
  7212  000ADA  0E02               	movlw	2
  7213  000ADC  6E75               	movwf	_mode,c
  7214                           
  7215                           ;main.c: 158: INT2IE = 0;
  7216  000ADE  98F0               	bcf	intcon3,4,c	;volatile
  7217                           
  7218                           ;main.c: 159: stopMoving(0);
  7219  000AE0  0E00               	movlw	0
  7220  000AE2  ECD4  F012         	call	_stopMoving
  7221                           
  7222                           ;main.c: 160: lcdInst(0b11000000);
  7223  000AE6  0EC0               	movlw	192
  7224  000AE8  EC42  F014         	call	i2_lcdInst
  7225                           
  7226                           ;main.c: 161: printf("Sorting Complete          ");
  7227  000AEC  0EDB               	movlw	low STR_16
  7228  000AEE  6E0D               	movwf	i2printf@f,c
  7229  000AF0  0EFD               	movlw	high STR_16
  7230  000AF2  6E0E               	movwf	i2printf@f+1,c
  7231  000AF4  EC3E  F002         	call	i2_printf	;wreg free
  7232                           
  7233                           ;main.c: 162: WriteRun(sorted, period);
  7234  000AF8  0E52               	movlw	low simulate@sorted
  7235  000AFA  6E07               	movwf	WriteRun@sorted,c
  7236  000AFC  0E00               	movlw	high simulate@sorted
  7237  000AFE  6E08               	movwf	WriteRun@sorted+1,c
  7238  000B00  C050  F009         	movff	simulate@period,WriteRun@time
  7239  000B04  C051  F00A         	movff	simulate@period+1,WriteRun@time+1
  7240  000B08  EC8C  F007         	call	_WriteRun	;wreg free
  7241                           
  7242                           ;main.c: 163: _delay((unsigned long)((700)*(8000000/4000.0)));
  7243  000B0C  0E08               	movlw	8
  7244  000B0E  6E31               	movwf	(??_simulate+1)& (0+255),c
  7245  000B10  0E1B               	movlw	27
  7246  000B12  6E30               	movwf	??_simulate& (0+255),c
  7247  000B14  0E27               	movlw	39
  7248  000B16                     i2u368_47:
  7249  000B16  2EE8               	decfsz	wreg,f,c
  7250  000B18  D7FE               	bra	i2u368_47
  7251  000B1A  2E30               	decfsz	??_simulate& (0+255),f,c
  7252  000B1C  D7FC               	bra	i2u368_47
  7253  000B1E  2E31               	decfsz	(??_simulate+1)& (0+255),f,c
  7254  000B20  D7FA               	bra	i2u368_47
  7255  000B22  F000               	nop	
  7256                           
  7257                           ;main.c: 164: showInfo(period, sorted);
  7258  000B24  C050  F023         	movff	simulate@period,showInfo@time
  7259  000B28  C051  F024         	movff	simulate@period+1,showInfo@time+1
  7260  000B2C  0E52               	movlw	low simulate@sorted
  7261  000B2E  6E25               	movwf	showInfo@sorted,c
  7262  000B30  0E00               	movlw	high simulate@sorted
  7263  000B32  6E26               	movwf	showInfo@sorted+1,c
  7264  000B34  ECA1  F005         	call	_showInfo	;wreg free
  7265                           
  7266                           ;main.c: 165: mode = 0;
  7267  000B38  0E00               	movlw	0
  7268  000B3A  6E76               	movwf	_mode+1,c
  7269  000B3C  0E00               	movlw	0
  7270  000B3E  6E75               	movwf	_mode,c
  7271  000B40  0012               	return		;funcret
  7272  000B42                     __end_of_simulate:
  7273                           	opt stack 0
  7274                           pclatu	equ	0xFFB
  7275                           pclath	equ	0xFFA
  7276                           tblptru	equ	0xFF8
  7277                           tblptrh	equ	0xFF7
  7278                           tblptrl	equ	0xFF6
  7279                           tablat	equ	0xFF5
  7280                           prodh	equ	0xFF4
  7281                           prodl	equ	0xFF3
  7282                           intcon	equ	0xFF2
  7283                           intcon3	equ	0xFF0
  7284                           postinc0	equ	0xFEE
  7285                           fsr0h	equ	0xFEA
  7286                           fsr0l	equ	0xFE9
  7287                           wreg	equ	0xFE8
  7288                           plusw1	equ	0xFE3
  7289                           fsr1h	equ	0xFE2
  7290                           fsr1l	equ	0xFE1
  7291                           indf2	equ	0xFDF
  7292                           postinc2	equ	0xFDE
  7293                           postdec2	equ	0xFDD
  7294                           plusw2	equ	0xFDB
  7295                           fsr2h	equ	0xFDA
  7296                           fsr2l	equ	0xFD9
  7297                           status	equ	0xFD8
  7298                           
  7299 ;; *************** function i2_getTime *****************
  7300 ;; Defined at:
  7301 ;;		line 76 in file "modules.c"
  7302 ;; Parameters:    Size  Location     Type
  7303 ;;  time            2    3[COMRAM] PTR unsigned char 
  7304 ;;		 -> time(7), 
  7305 ;; Auto vars:     Size  Location     Type
  7306 ;;  getTime         1    5[COMRAM] unsigned char 
  7307 ;; Return value:  Size  Location     Type
  7308 ;;                  1    wreg      void 
  7309 ;; Registers used:
  7310 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7311 ;; Tracked objects:
  7312 ;;		On entry : 0/0
  7313 ;;		On exit  : 0/0
  7314 ;;		Unchanged: 0/0
  7315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7316 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7317 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7319 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7320 ;;Total ram usage:        3 bytes
  7321 ;; Hardware stack levels used:    1
  7322 ;; Hardware stack levels required when called:    2
  7323 ;; This function calls:
  7324 ;;		i2_I2C_Master_Read
  7325 ;;		i2_I2C_Master_Start
  7326 ;;		i2_I2C_Master_Stop
  7327 ;;		i2_I2C_Master_Write
  7328 ;; This function is called by:
  7329 ;;		_simulate
  7330 ;; This function uses a non-reentrant model
  7331 ;;
  7332                           
  7333                           	psect	text35
  7334  001F04                     __ptext35:
  7335                           	opt stack 0
  7336  001F04                     i2_getTime:
  7337                           	opt stack 20
  7338                           
  7339                           ;modules.c: 77: (INTCONbits.GIE = 0);
  7340                           
  7341                           ;incstack = 0
  7342  001F04  9EF2               	bcf	intcon,7,c	;volatile
  7343                           
  7344                           ;modules.c: 81: I2C_Master_Start();
  7345  001F06  EC5E  F014         	call	i2_I2C_Master_Start	;wreg free
  7346                           
  7347                           ;modules.c: 82: I2C_Master_Write(0b11010000);
  7348  001F0A  0E00               	movlw	0
  7349  001F0C  6E03               	movwf	i2I2C_Master_Write@d+1,c
  7350  001F0E  0ED0               	movlw	208
  7351  001F10  6E02               	movwf	i2I2C_Master_Write@d,c
  7352  001F12  EC4D  F014         	call	i2_I2C_Master_Write	;wreg free
  7353                           
  7354                           ;modules.c: 83: I2C_Master_Write(0x00);
  7355  001F16  0E00               	movlw	0
  7356  001F18  6E03               	movwf	i2I2C_Master_Write@d+1,c
  7357  001F1A  0E00               	movlw	0
  7358  001F1C  6E02               	movwf	i2I2C_Master_Write@d,c
  7359  001F1E  EC4D  F014         	call	i2_I2C_Master_Write	;wreg free
  7360                           
  7361                           ;modules.c: 84: I2C_Master_Stop();
  7362  001F22  EC5A  F014         	call	i2_I2C_Master_Stop	;wreg free
  7363                           
  7364                           ;modules.c: 87: I2C_Master_Start();
  7365  001F26  EC5E  F014         	call	i2_I2C_Master_Start	;wreg free
  7366                           
  7367                           ;modules.c: 88: I2C_Master_Write(0b11010001);
  7368  001F2A  0E00               	movlw	0
  7369  001F2C  6E03               	movwf	i2I2C_Master_Write@d+1,c
  7370  001F2E  0ED1               	movlw	209
  7371  001F30  6E02               	movwf	i2I2C_Master_Write@d,c
  7372  001F32  EC4D  F014         	call	i2_I2C_Master_Write	;wreg free
  7373                           
  7374                           ;modules.c: 89: for (unsigned char i = 0; i < 0x06; i++) {
  7375  001F36  0E00               	movlw	0
  7376  001F38  6E06               	movwf	i2getTime@i,c
  7377  001F3A                     i2l4271:
  7378  001F3A  0E05               	movlw	5
  7379  001F3C  6406               	cpfsgt	i2getTime@i,c
  7380  001F3E  D001               	goto	i2l4275
  7381  001F40  D00E               	goto	i2l4281
  7382  001F42                     i2l4275:
  7383                           
  7384                           ;modules.c: 90: time[i] = I2C_Master_Read(1);
  7385  001F42  5006               	movf	i2getTime@i,w,c
  7386  001F44  0D01               	mullw	1
  7387  001F46  50F3               	movf	prodl,w,c
  7388  001F48  2404               	addwf	i2getTime@time,w,c
  7389  001F4A  6ED9               	movwf	fsr2l,c
  7390  001F4C  50F4               	movf	prodh,w,c
  7391  001F4E  2005               	addwfc	i2getTime@time+1,w,c
  7392  001F50  6EDA               	movwf	fsr2h,c
  7393  001F52  0E01               	movlw	1
  7394  001F54  EC8C  F013         	call	i2_I2C_Master_Read
  7395  001F58  6EDF               	movwf	indf2,c
  7396  001F5A  2A06               	incf	i2getTime@i,f,c
  7397  001F5C  D7EE               	goto	i2l4271
  7398  001F5E                     i2l4281:
  7399                           
  7400                           ;modules.c: 91: }
  7401                           ;modules.c: 92: time[6] = I2C_Master_Read(0);
  7402  001F5E  EE20 F006          	lfsr	2,6
  7403  001F62  5004               	movf	i2getTime@time,w,c
  7404  001F64  26D9               	addwf	fsr2l,f,c
  7405  001F66  5005               	movf	i2getTime@time+1,w,c
  7406  001F68  22DA               	addwfc	fsr2h,f,c
  7407  001F6A  0E00               	movlw	0
  7408  001F6C  EC8C  F013         	call	i2_I2C_Master_Read
  7409  001F70  6EDF               	movwf	indf2,c
  7410                           
  7411                           ;modules.c: 93: I2C_Master_Stop();
  7412  001F72  EC5A  F014         	call	i2_I2C_Master_Stop	;wreg free
  7413                           
  7414                           ;modules.c: 94: (INTCONbits.GIE = 1);
  7415  001F76  8EF2               	bsf	intcon,7,c	;volatile
  7416  001F78  0012               	return		;funcret
  7417  001F7A                     __end_ofi2_getTime:
  7418                           	opt stack 0
  7419                           pclatu	equ	0xFFB
  7420                           pclath	equ	0xFFA
  7421                           tblptru	equ	0xFF8
  7422                           tblptrh	equ	0xFF7
  7423                           tblptrl	equ	0xFF6
  7424                           tablat	equ	0xFF5
  7425                           prodh	equ	0xFF4
  7426                           prodl	equ	0xFF3
  7427                           intcon	equ	0xFF2
  7428                           intcon3	equ	0xFF0
  7429                           postinc0	equ	0xFEE
  7430                           fsr0h	equ	0xFEA
  7431                           fsr0l	equ	0xFE9
  7432                           wreg	equ	0xFE8
  7433                           plusw1	equ	0xFE3
  7434                           fsr1h	equ	0xFE2
  7435                           fsr1l	equ	0xFE1
  7436                           indf2	equ	0xFDF
  7437                           postinc2	equ	0xFDE
  7438                           postdec2	equ	0xFDD
  7439                           plusw2	equ	0xFDB
  7440                           fsr2h	equ	0xFDA
  7441                           fsr2l	equ	0xFD9
  7442                           status	equ	0xFD8
  7443                           
  7444 ;; *************** function i2_I2C_Master_Write *****************
  7445 ;; Defined at:
  7446 ;;		line 42 in file "I2C.c"
  7447 ;; Parameters:    Size  Location     Type
  7448 ;;  d               2    1[COMRAM] unsigned int 
  7449 ;; Auto vars:     Size  Location     Type
  7450 ;;		None
  7451 ;; Return value:  Size  Location     Type
  7452 ;;                  1    wreg      void 
  7453 ;; Registers used:
  7454 ;;		wreg, status,2, status,0, cstack
  7455 ;; Tracked objects:
  7456 ;;		On entry : 0/0
  7457 ;;		On exit  : 0/0
  7458 ;;		Unchanged: 0/0
  7459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7460 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7463 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7464 ;;Total ram usage:        2 bytes
  7465 ;; Hardware stack levels used:    1
  7466 ;; Hardware stack levels required when called:    1
  7467 ;; This function calls:
  7468 ;;		i2_I2C_Master_Wait
  7469 ;; This function is called by:
  7470 ;;		i2_getTime
  7471 ;; This function uses a non-reentrant model
  7472 ;;
  7473                           
  7474                           	psect	text36
  7475  00289A                     __ptext36:
  7476                           	opt stack 0
  7477  00289A                     i2_I2C_Master_Write:
  7478                           	opt stack 20
  7479                           
  7480                           ;I2C.c: 43: I2C_Master_Wait();
  7481                           
  7482                           ;incstack = 0
  7483  00289A  EC23  F014         	call	i2_I2C_Master_Wait	;wreg free
  7484                           
  7485                           ;I2C.c: 44: SSPBUF = d;
  7486  00289E  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
  7487  0028A2  0012               	return		;funcret
  7488  0028A4                     __end_ofi2_I2C_Master_Write:
  7489                           	opt stack 0
  7490                           pclatu	equ	0xFFB
  7491                           pclath	equ	0xFFA
  7492                           tblptru	equ	0xFF8
  7493                           tblptrh	equ	0xFF7
  7494                           tblptrl	equ	0xFF6
  7495                           tablat	equ	0xFF5
  7496                           prodh	equ	0xFF4
  7497                           prodl	equ	0xFF3
  7498                           intcon	equ	0xFF2
  7499                           intcon3	equ	0xFF0
  7500                           postinc0	equ	0xFEE
  7501                           fsr0h	equ	0xFEA
  7502                           fsr0l	equ	0xFE9
  7503                           wreg	equ	0xFE8
  7504                           plusw1	equ	0xFE3
  7505                           fsr1h	equ	0xFE2
  7506                           fsr1l	equ	0xFE1
  7507                           indf2	equ	0xFDF
  7508                           postinc2	equ	0xFDE
  7509                           postdec2	equ	0xFDD
  7510                           plusw2	equ	0xFDB
  7511                           fsr2h	equ	0xFDA
  7512                           fsr2l	equ	0xFD9
  7513                           status	equ	0xFD8
  7514                           
  7515 ;; *************** function i2_I2C_Master_Stop *****************
  7516 ;; Defined at:
  7517 ;;		line 37 in file "I2C.c"
  7518 ;; Parameters:    Size  Location     Type
  7519 ;;		None
  7520 ;; Auto vars:     Size  Location     Type
  7521 ;;		None
  7522 ;; Return value:  Size  Location     Type
  7523 ;;                  1    wreg      void 
  7524 ;; Registers used:
  7525 ;;		wreg, status,2, status,0, cstack
  7526 ;; Tracked objects:
  7527 ;;		On entry : 0/0
  7528 ;;		On exit  : 0/0
  7529 ;;		Unchanged: 0/0
  7530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7534 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7535 ;;Total ram usage:        0 bytes
  7536 ;; Hardware stack levels used:    1
  7537 ;; Hardware stack levels required when called:    1
  7538 ;; This function calls:
  7539 ;;		i2_I2C_Master_Wait
  7540 ;; This function is called by:
  7541 ;;		i2_getTime
  7542 ;; This function uses a non-reentrant model
  7543 ;;
  7544                           
  7545                           	psect	text37
  7546  0028B4                     __ptext37:
  7547                           	opt stack 0
  7548  0028B4                     i2_I2C_Master_Stop:
  7549                           	opt stack 20
  7550                           
  7551                           ;I2C.c: 38: I2C_Master_Wait();
  7552                           
  7553                           ;incstack = 0
  7554  0028B4  EC23  F014         	call	i2_I2C_Master_Wait	;wreg free
  7555                           
  7556                           ;I2C.c: 39: PEN = 1;
  7557  0028B8  84C5               	bsf	4037,2,c	;volatile
  7558  0028BA  0012               	return		;funcret
  7559  0028BC                     __end_ofi2_I2C_Master_Stop:
  7560                           	opt stack 0
  7561                           pclatu	equ	0xFFB
  7562                           pclath	equ	0xFFA
  7563                           tblptru	equ	0xFF8
  7564                           tblptrh	equ	0xFF7
  7565                           tblptrl	equ	0xFF6
  7566                           tablat	equ	0xFF5
  7567                           prodh	equ	0xFF4
  7568                           prodl	equ	0xFF3
  7569                           intcon	equ	0xFF2
  7570                           intcon3	equ	0xFF0
  7571                           postinc0	equ	0xFEE
  7572                           fsr0h	equ	0xFEA
  7573                           fsr0l	equ	0xFE9
  7574                           wreg	equ	0xFE8
  7575                           plusw1	equ	0xFE3
  7576                           fsr1h	equ	0xFE2
  7577                           fsr1l	equ	0xFE1
  7578                           indf2	equ	0xFDF
  7579                           postinc2	equ	0xFDE
  7580                           postdec2	equ	0xFDD
  7581                           plusw2	equ	0xFDB
  7582                           fsr2h	equ	0xFDA
  7583                           fsr2l	equ	0xFD9
  7584                           status	equ	0xFD8
  7585                           
  7586 ;; *************** function i2_I2C_Master_Start *****************
  7587 ;; Defined at:
  7588 ;;		line 27 in file "I2C.c"
  7589 ;; Parameters:    Size  Location     Type
  7590 ;;		None
  7591 ;; Auto vars:     Size  Location     Type
  7592 ;;		None
  7593 ;; Return value:  Size  Location     Type
  7594 ;;                  1    wreg      void 
  7595 ;; Registers used:
  7596 ;;		wreg, status,2, status,0, cstack
  7597 ;; Tracked objects:
  7598 ;;		On entry : 0/0
  7599 ;;		On exit  : 0/0
  7600 ;;		Unchanged: 0/0
  7601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7605 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7606 ;;Total ram usage:        0 bytes
  7607 ;; Hardware stack levels used:    1
  7608 ;; Hardware stack levels required when called:    1
  7609 ;; This function calls:
  7610 ;;		i2_I2C_Master_Wait
  7611 ;; This function is called by:
  7612 ;;		i2_getTime
  7613 ;; This function uses a non-reentrant model
  7614 ;;
  7615                           
  7616                           	psect	text38
  7617  0028BC                     __ptext38:
  7618                           	opt stack 0
  7619  0028BC                     i2_I2C_Master_Start:
  7620                           	opt stack 20
  7621                           
  7622                           ;I2C.c: 28: I2C_Master_Wait();
  7623                           
  7624                           ;incstack = 0
  7625  0028BC  EC23  F014         	call	i2_I2C_Master_Wait	;wreg free
  7626                           
  7627                           ;I2C.c: 29: SEN = 1;
  7628  0028C0  80C5               	bsf	4037,0,c	;volatile
  7629  0028C2  0012               	return		;funcret
  7630  0028C4                     __end_ofi2_I2C_Master_Start:
  7631                           	opt stack 0
  7632                           pclatu	equ	0xFFB
  7633                           pclath	equ	0xFFA
  7634                           tblptru	equ	0xFF8
  7635                           tblptrh	equ	0xFF7
  7636                           tblptrl	equ	0xFF6
  7637                           tablat	equ	0xFF5
  7638                           prodh	equ	0xFF4
  7639                           prodl	equ	0xFF3
  7640                           intcon	equ	0xFF2
  7641                           intcon3	equ	0xFF0
  7642                           postinc0	equ	0xFEE
  7643                           fsr0h	equ	0xFEA
  7644                           fsr0l	equ	0xFE9
  7645                           wreg	equ	0xFE8
  7646                           plusw1	equ	0xFE3
  7647                           fsr1h	equ	0xFE2
  7648                           fsr1l	equ	0xFE1
  7649                           indf2	equ	0xFDF
  7650                           postinc2	equ	0xFDE
  7651                           postdec2	equ	0xFDD
  7652                           plusw2	equ	0xFDB
  7653                           fsr2h	equ	0xFDA
  7654                           fsr2l	equ	0xFD9
  7655                           status	equ	0xFD8
  7656                           
  7657 ;; *************** function i2_I2C_Master_Read *****************
  7658 ;; Defined at:
  7659 ;;		line 47 in file "I2C.c"
  7660 ;; Parameters:    Size  Location     Type
  7661 ;;  a               1    wreg     unsigned char 
  7662 ;; Auto vars:     Size  Location     Type
  7663 ;;  a               1    1[COMRAM] unsigned char 
  7664 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
  7665 ;; Return value:  Size  Location     Type
  7666 ;;                  1    wreg      unsigned char 
  7667 ;; Registers used:
  7668 ;;		wreg, status,2, status,0, cstack
  7669 ;; Tracked objects:
  7670 ;;		On entry : 0/0
  7671 ;;		On exit  : 0/0
  7672 ;;		Unchanged: 0/0
  7673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7675 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7677 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7678 ;;Total ram usage:        2 bytes
  7679 ;; Hardware stack levels used:    1
  7680 ;; Hardware stack levels required when called:    1
  7681 ;; This function calls:
  7682 ;;		i2_I2C_Master_Wait
  7683 ;; This function is called by:
  7684 ;;		i2_getTime
  7685 ;; This function uses a non-reentrant model
  7686 ;;
  7687                           
  7688                           	psect	text39
  7689  002718                     __ptext39:
  7690                           	opt stack 0
  7691  002718                     i2_I2C_Master_Read:
  7692                           	opt stack 20
  7693                           
  7694                           ;incstack = 0
  7695                           ;i2I2C_Master_Read@a stored from wreg
  7696  002718  6E02               	movwf	i2I2C_Master_Read@a,c
  7697                           
  7698                           ;I2C.c: 48: unsigned char temp;
  7699                           ;I2C.c: 49: I2C_Master_Wait();
  7700  00271A  EC23  F014         	call	i2_I2C_Master_Wait	;wreg free
  7701                           
  7702                           ;I2C.c: 50: RCEN = 1;
  7703  00271E  86C5               	bsf	4037,3,c	;volatile
  7704                           
  7705                           ;I2C.c: 51: I2C_Master_Wait();
  7706  002720  EC23  F014         	call	i2_I2C_Master_Wait	;wreg free
  7707                           
  7708                           ;I2C.c: 52: temp = SSPBUF;
  7709  002724  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
  7710                           
  7711                           ;I2C.c: 53: I2C_Master_Wait();
  7712  002728  EC23  F014         	call	i2_I2C_Master_Wait	;wreg free
  7713                           
  7714                           ;I2C.c: 54: ACKDT = (a) ? 0 : 1;
  7715  00272C  5002               	movf	i2I2C_Master_Read@a,w,c
  7716  00272E  A4D8               	btfss	status,2,c
  7717  002730  D002               	goto	i2u325_40
  7718  002732  8AC5               	bsf	4037,5,c	;volatile
  7719  002734  D001               	goto	i2l4005
  7720  002736                     i2u325_40:
  7721  002736  9AC5               	bcf	4037,5,c	;volatile
  7722  002738                     i2l4005:
  7723                           
  7724                           ;I2C.c: 55: ACKEN = 1;
  7725  002738  88C5               	bsf	4037,4,c	;volatile
  7726                           
  7727                           ;I2C.c: 56: return temp;
  7728  00273A  5003               	movf	i2I2C_Master_Read@temp,w,c
  7729  00273C  0012               	return	
  7730  00273E                     __end_ofi2_I2C_Master_Read:
  7731                           	opt stack 0
  7732                           pclatu	equ	0xFFB
  7733                           pclath	equ	0xFFA
  7734                           tblptru	equ	0xFF8
  7735                           tblptrh	equ	0xFF7
  7736                           tblptrl	equ	0xFF6
  7737                           tablat	equ	0xFF5
  7738                           prodh	equ	0xFF4
  7739                           prodl	equ	0xFF3
  7740                           intcon	equ	0xFF2
  7741                           intcon3	equ	0xFF0
  7742                           postinc0	equ	0xFEE
  7743                           fsr0h	equ	0xFEA
  7744                           fsr0l	equ	0xFE9
  7745                           wreg	equ	0xFE8
  7746                           plusw1	equ	0xFE3
  7747                           fsr1h	equ	0xFE2
  7748                           fsr1l	equ	0xFE1
  7749                           indf2	equ	0xFDF
  7750                           postinc2	equ	0xFDE
  7751                           postdec2	equ	0xFDD
  7752                           plusw2	equ	0xFDB
  7753                           fsr2h	equ	0xFDA
  7754                           fsr2l	equ	0xFD9
  7755                           status	equ	0xFD8
  7756                           
  7757 ;; *************** function i2_I2C_Master_Wait *****************
  7758 ;; Defined at:
  7759 ;;		line 23 in file "I2C.c"
  7760 ;; Parameters:    Size  Location     Type
  7761 ;;		None
  7762 ;; Auto vars:     Size  Location     Type
  7763 ;;		None
  7764 ;; Return value:  Size  Location     Type
  7765 ;;                  1    wreg      void 
  7766 ;; Registers used:
  7767 ;;		wreg, status,2, status,0
  7768 ;; Tracked objects:
  7769 ;;		On entry : 0/0
  7770 ;;		On exit  : 0/0
  7771 ;;		Unchanged: 0/0
  7772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7775 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7776 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7777 ;;Total ram usage:        1 bytes
  7778 ;; Hardware stack levels used:    1
  7779 ;; This function calls:
  7780 ;;		Nothing
  7781 ;; This function is called by:
  7782 ;;		i2_I2C_Master_Start
  7783 ;;		i2_I2C_Master_Stop
  7784 ;;		i2_I2C_Master_Write
  7785 ;;		i2_I2C_Master_Read
  7786 ;; This function uses a non-reentrant model
  7787 ;;
  7788                           
  7789                           	psect	text40
  7790  002846                     __ptext40:
  7791                           	opt stack 0
  7792  002846                     i2_I2C_Master_Wait:
  7793                           	opt stack 20
  7794  002846                     i2l369:
  7795  002846  B4C7               	btfsc	4039,2,c	;volatile
  7796  002848  D7FE               	goto	i2l369
  7797  00284A  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
  7798  00284E  0E1F               	movlw	31
  7799  002850  1601               	andwf	??i2_I2C_Master_Wait,f,c
  7800  002852  B4D8               	btfsc	status,2,c
  7801  002854  0012               	return	
  7802  002856  D7F7               	goto	i2l369
  7803  002858                     __end_ofi2_I2C_Master_Wait:
  7804                           	opt stack 0
  7805                           pclatu	equ	0xFFB
  7806                           pclath	equ	0xFFA
  7807                           tblptru	equ	0xFF8
  7808                           tblptrh	equ	0xFF7
  7809                           tblptrl	equ	0xFF6
  7810                           tablat	equ	0xFF5
  7811                           prodh	equ	0xFF4
  7812                           prodl	equ	0xFF3
  7813                           intcon	equ	0xFF2
  7814                           intcon3	equ	0xFF0
  7815                           postinc0	equ	0xFEE
  7816                           fsr0h	equ	0xFEA
  7817                           fsr0l	equ	0xFE9
  7818                           wreg	equ	0xFE8
  7819                           plusw1	equ	0xFE3
  7820                           fsr1h	equ	0xFE2
  7821                           fsr1l	equ	0xFE1
  7822                           indf2	equ	0xFDF
  7823                           postinc2	equ	0xFDE
  7824                           postdec2	equ	0xFDD
  7825                           plusw2	equ	0xFDB
  7826                           fsr2h	equ	0xFDA
  7827                           fsr2l	equ	0xFD9
  7828                           status	equ	0xFD8
  7829                           
  7830 ;; *************** function i2_checkC *****************
  7831 ;; Defined at:
  7832 ;;		line 46 in file "sensors.c"
  7833 ;; Parameters:    Size  Location     Type
  7834 ;;  sorted          2   41[COMRAM] PTR unsigned char 
  7835 ;;		 -> testAD@sorted(4), simulate@sorted(4), 
  7836 ;; Auto vars:     Size  Location     Type
  7837 ;;  checkC          2   45[COMRAM] int 
  7838 ;; Return value:  Size  Location     Type
  7839 ;;                  2   41[COMRAM] int 
  7840 ;; Registers used:
  7841 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7842 ;; Tracked objects:
  7843 ;;		On entry : 0/0
  7844 ;;		On exit  : 0/0
  7845 ;;		Unchanged: 0/0
  7846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7847 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7848 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7849 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7850 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7851 ;;Total ram usage:        6 bytes
  7852 ;; Hardware stack levels used:    1
  7853 ;; Hardware stack levels required when called:    4
  7854 ;; This function calls:
  7855 ;;		i2_checkV
  7856 ;;		i2_printV
  7857 ;;		i2_printf
  7858 ;; This function is called by:
  7859 ;;		_simulate
  7860 ;; This function uses a non-reentrant model
  7861 ;;
  7862                           
  7863                           	psect	text41
  7864  001F7A                     __ptext41:
  7865                           	opt stack 0
  7866  001F7A                     i2_checkC:
  7867                           	opt stack 18
  7868                           
  7869                           ;sensors.c: 49: printf("C:");
  7870                           
  7871                           ;incstack = 0
  7872  001F7A  0EEE               	movlw	low (STR_8+1)
  7873  001F7C  6E0D               	movwf	i2printf@f,c
  7874  001F7E  0EFF               	movlw	high (STR_8+1)
  7875  001F80  6E0E               	movwf	i2printf@f+1,c
  7876  001F82  EC3E  F002         	call	i2_printf	;wreg free
  7877                           
  7878                           ;sensors.c: 50: int V = checkV(0, 1.5 / 5 * 1023);
  7879  001F86  0E01               	movlw	1
  7880  001F88  6E26               	movwf	i2checkV@threshhold+1,c
  7881  001F8A  0E32               	movlw	50
  7882  001F8C  6E25               	movwf	i2checkV@threshhold,c
  7883  001F8E  0E00               	movlw	0
  7884  001F90  EC70  F00D         	call	i2_checkV
  7885  001F94  C025  F02E         	movff	?i2_checkV,i2checkC@V
  7886  001F98  C026  F02F         	movff	?i2_checkV+1,i2checkC@V+1
  7887                           
  7888                           ;sensors.c: 51: printV(V);
  7889  001F9C  C02E  F023         	movff	i2checkC@V,i2printV@charged
  7890  001FA0  C02F  F024         	movff	i2checkC@V+1,i2printV@charged+1
  7891  001FA4  EC65  F013         	call	i2_printV	;wreg free
  7892                           
  7893                           ;sensors.c: 52: switch (V) {
  7894  001FA8  D00F               	goto	i2l4311
  7895  001FAA                     i2l4309:
  7896                           
  7897                           ;sensors.c: 54: sorted[1]++;
  7898  001FAA  EE20 F001          	lfsr	2,1
  7899  001FAE  502A               	movf	i2checkC@sorted,w,c
  7900  001FB0  26D9               	addwf	fsr2l,f,c
  7901  001FB2  502B               	movf	i2checkC@sorted+1,w,c
  7902  001FB4  22DA               	addwfc	fsr2h,f,c
  7903  001FB6  2ADF               	incf	indf2,f,c
  7904  001FB8                     i2l330:
  7905                           
  7906                           ;sensors.c: 56: sorted[3]++;
  7907  001FB8  EE20 F003          	lfsr	2,3
  7908  001FBC  502A               	movf	i2checkC@sorted,w,c
  7909  001FBE  26D9               	addwf	fsr2l,f,c
  7910  001FC0  502B               	movf	i2checkC@sorted+1,w,c
  7911  001FC2  22DA               	addwfc	fsr2h,f,c
  7912  001FC4  2ADF               	incf	indf2,f,c
  7913                           
  7914                           ;sensors.c: 57: }
  7915  001FC6  D00F               	goto	i2l331
  7916  001FC8                     i2l4311:
  7917  001FC8  C02E  F02C         	movff	i2checkC@V,??i2_checkC
  7918  001FCC  C02F  F02D         	movff	i2checkC@V+1,??i2_checkC+1
  7919                           
  7920                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7921                           ; Switch size 1, requested type "space"
  7922                           ; Number of cases is 1, Range of values is 0 to 0
  7923                           ; switch strategies available:
  7924                           ; Name         Instructions Cycles
  7925                           ; simple_byte            4     3 (average)
  7926                           ;	Chosen strategy is simple_byte
  7927  001FD0  502D               	movf	??i2_checkC+1,w,c
  7928  001FD2  0A00               	xorlw	0	; case 0
  7929  001FD4  A4D8               	btfss	status,2,c
  7930  001FD6  D007               	goto	i2l331
  7931                           
  7932                           ; Switch size 1, requested type "space"
  7933                           ; Number of cases is 2, Range of values is 0 to 1
  7934                           ; switch strategies available:
  7935                           ; Name         Instructions Cycles
  7936                           ; simple_byte            7     4 (average)
  7937                           ;	Chosen strategy is simple_byte
  7938  001FD8  502C               	movf	??i2_checkC,w,c
  7939  001FDA  0A00               	xorlw	0	; case 0
  7940  001FDC  B4D8               	btfsc	status,2,c
  7941  001FDE  D7EC               	goto	i2l330
  7942  001FE0  0A01               	xorlw	1	; case 1
  7943  001FE2  B4D8               	btfsc	status,2,c
  7944  001FE4  D7E2               	goto	i2l4309
  7945  001FE6                     i2l331:
  7946                           
  7947                           ;sensors.c: 58: return V;
  7948  001FE6  C02E  F02A         	movff	i2checkC@V,?i2_checkC
  7949  001FEA  C02F  F02B         	movff	i2checkC@V+1,?i2_checkC+1
  7950  001FEE  0012               	return		;funcret
  7951  001FF0                     __end_ofi2_checkC:
  7952                           	opt stack 0
  7953                           pclatu	equ	0xFFB
  7954                           pclath	equ	0xFFA
  7955                           tblptru	equ	0xFF8
  7956                           tblptrh	equ	0xFF7
  7957                           tblptrl	equ	0xFF6
  7958                           tablat	equ	0xFF5
  7959                           prodh	equ	0xFF4
  7960                           prodl	equ	0xFF3
  7961                           intcon	equ	0xFF2
  7962                           intcon3	equ	0xFF0
  7963                           postinc0	equ	0xFEE
  7964                           fsr0h	equ	0xFEA
  7965                           fsr0l	equ	0xFE9
  7966                           wreg	equ	0xFE8
  7967                           plusw1	equ	0xFE3
  7968                           fsr1h	equ	0xFE2
  7969                           fsr1l	equ	0xFE1
  7970                           indf2	equ	0xFDF
  7971                           postinc2	equ	0xFDE
  7972                           postdec2	equ	0xFDD
  7973                           plusw2	equ	0xFDB
  7974                           fsr2h	equ	0xFDA
  7975                           fsr2l	equ	0xFD9
  7976                           status	equ	0xFD8
  7977                           
  7978 ;; *************** function i2_checkAA *****************
  7979 ;; Defined at:
  7980 ;;		line 32 in file "sensors.c"
  7981 ;; Parameters:    Size  Location     Type
  7982 ;;  sorted          2   41[COMRAM] PTR unsigned char 
  7983 ;;		 -> testAD@sorted(4), simulate@sorted(4), 
  7984 ;; Auto vars:     Size  Location     Type
  7985 ;;  checkAA         2   45[COMRAM] int 
  7986 ;; Return value:  Size  Location     Type
  7987 ;;                  2   41[COMRAM] int 
  7988 ;; Registers used:
  7989 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7990 ;; Tracked objects:
  7991 ;;		On entry : 0/0
  7992 ;;		On exit  : 0/0
  7993 ;;		Unchanged: 0/0
  7994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7995 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7996 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7997 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7998 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7999 ;;Total ram usage:        6 bytes
  8000 ;; Hardware stack levels used:    1
  8001 ;; Hardware stack levels required when called:    4
  8002 ;; This function calls:
  8003 ;;		i2_checkV
  8004 ;;		i2_printV
  8005 ;;		i2_printf
  8006 ;; This function is called by:
  8007 ;;		_simulate
  8008 ;; This function uses a non-reentrant model
  8009 ;;
  8010                           
  8011                           	psect	text42
  8012  002066                     __ptext42:
  8013                           	opt stack 0
  8014  002066                     i2_checkAA:
  8015                           	opt stack 18
  8016                           
  8017                           ;sensors.c: 33: printf("AA:");
  8018                           
  8019                           ;incstack = 0
  8020  002066  0EE5               	movlw	low (STR_12+1)
  8021  002068  6E0D               	movwf	i2printf@f,c
  8022  00206A  0EFF               	movlw	high (STR_12+1)
  8023  00206C  6E0E               	movwf	i2printf@f+1,c
  8024  00206E  EC3E  F002         	call	i2_printf	;wreg free
  8025                           
  8026                           ;sensors.c: 35: int V = checkV(2, 1.5 / 5 * 1023);
  8027  002072  0E01               	movlw	1
  8028  002074  6E26               	movwf	i2checkV@threshhold+1,c
  8029  002076  0E32               	movlw	50
  8030  002078  6E25               	movwf	i2checkV@threshhold,c
  8031  00207A  0E02               	movlw	2
  8032  00207C  EC70  F00D         	call	i2_checkV
  8033  002080  C025  F02E         	movff	?i2_checkV,i2checkAA@V
  8034  002084  C026  F02F         	movff	?i2_checkV+1,i2checkAA@V+1
  8035                           
  8036                           ;sensors.c: 36: printV(V);
  8037  002088  C02E  F023         	movff	i2checkAA@V,i2printV@charged
  8038  00208C  C02F  F024         	movff	i2checkAA@V+1,i2printV@charged+1
  8039  002090  EC65  F013         	call	i2_printV	;wreg free
  8040                           
  8041                           ;sensors.c: 37: switch (V) {
  8042  002094  D00D               	goto	i2l4297
  8043  002096                     i2l4293:
  8044                           
  8045                           ;sensors.c: 39: sorted[0]++;
  8046  002096  C02A  FFD9         	movff	i2checkAA@sorted,fsr2l
  8047  00209A  C02B  FFDA         	movff	i2checkAA@sorted+1,fsr2h
  8048  00209E  2ADF               	incf	indf2,f,c
  8049  0020A0                     i2l4295:
  8050                           
  8051                           ;sensors.c: 41: sorted[3]++;
  8052  0020A0  EE20 F003          	lfsr	2,3
  8053  0020A4  502A               	movf	i2checkAA@sorted,w,c
  8054  0020A6  26D9               	addwf	fsr2l,f,c
  8055  0020A8  502B               	movf	i2checkAA@sorted+1,w,c
  8056  0020AA  22DA               	addwfc	fsr2h,f,c
  8057  0020AC  2ADF               	incf	indf2,f,c
  8058                           
  8059                           ;sensors.c: 42: }
  8060  0020AE  D00F               	goto	i2l324
  8061  0020B0                     i2l4297:
  8062  0020B0  C02E  F02C         	movff	i2checkAA@V,??i2_checkAA
  8063  0020B4  C02F  F02D         	movff	i2checkAA@V+1,??i2_checkAA+1
  8064                           
  8065                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8066                           ; Switch size 1, requested type "space"
  8067                           ; Number of cases is 1, Range of values is 0 to 0
  8068                           ; switch strategies available:
  8069                           ; Name         Instructions Cycles
  8070                           ; simple_byte            4     3 (average)
  8071                           ;	Chosen strategy is simple_byte
  8072  0020B8  502D               	movf	??i2_checkAA+1,w,c
  8073  0020BA  0A00               	xorlw	0	; case 0
  8074  0020BC  A4D8               	btfss	status,2,c
  8075  0020BE  D007               	goto	i2l324
  8076                           
  8077                           ; Switch size 1, requested type "space"
  8078                           ; Number of cases is 2, Range of values is 0 to 1
  8079                           ; switch strategies available:
  8080                           ; Name         Instructions Cycles
  8081                           ; simple_byte            7     4 (average)
  8082                           ;	Chosen strategy is simple_byte
  8083  0020C0  502C               	movf	??i2_checkAA,w,c
  8084  0020C2  0A00               	xorlw	0	; case 0
  8085  0020C4  B4D8               	btfsc	status,2,c
  8086  0020C6  D7EC               	goto	i2l4295
  8087  0020C8  0A01               	xorlw	1	; case 1
  8088  0020CA  B4D8               	btfsc	status,2,c
  8089  0020CC  D7E4               	goto	i2l4293
  8090  0020CE                     i2l324:
  8091                           
  8092                           ;sensors.c: 43: return V;
  8093  0020CE  C02E  F02A         	movff	i2checkAA@V,?i2_checkAA
  8094  0020D2  C02F  F02B         	movff	i2checkAA@V+1,?i2_checkAA+1
  8095  0020D6  0012               	return		;funcret
  8096  0020D8                     __end_ofi2_checkAA:
  8097                           	opt stack 0
  8098                           pclatu	equ	0xFFB
  8099                           pclath	equ	0xFFA
  8100                           tblptru	equ	0xFF8
  8101                           tblptrh	equ	0xFF7
  8102                           tblptrl	equ	0xFF6
  8103                           tablat	equ	0xFF5
  8104                           prodh	equ	0xFF4
  8105                           prodl	equ	0xFF3
  8106                           intcon	equ	0xFF2
  8107                           intcon3	equ	0xFF0
  8108                           postinc0	equ	0xFEE
  8109                           fsr0h	equ	0xFEA
  8110                           fsr0l	equ	0xFE9
  8111                           wreg	equ	0xFE8
  8112                           plusw1	equ	0xFE3
  8113                           fsr1h	equ	0xFE2
  8114                           fsr1l	equ	0xFE1
  8115                           indf2	equ	0xFDF
  8116                           postinc2	equ	0xFDE
  8117                           postdec2	equ	0xFDD
  8118                           plusw2	equ	0xFDB
  8119                           fsr2h	equ	0xFDA
  8120                           fsr2l	equ	0xFD9
  8121                           status	equ	0xFD8
  8122                           
  8123 ;; *************** function i2_check9 *****************
  8124 ;; Defined at:
  8125 ;;		line 61 in file "sensors.c"
  8126 ;; Parameters:    Size  Location     Type
  8127 ;;  sorted          2   41[COMRAM] PTR unsigned char 
  8128 ;;		 -> testAD@sorted(4), simulate@sorted(4), 
  8129 ;; Auto vars:     Size  Location     Type
  8130 ;;  check9          2   45[COMRAM] int 
  8131 ;; Return value:  Size  Location     Type
  8132 ;;                  2   41[COMRAM] int 
  8133 ;; Registers used:
  8134 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8135 ;; Tracked objects:
  8136 ;;		On entry : 0/0
  8137 ;;		On exit  : 0/0
  8138 ;;		Unchanged: 0/0
  8139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8140 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8141 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8142 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8143 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8144 ;;Total ram usage:        6 bytes
  8145 ;; Hardware stack levels used:    1
  8146 ;; Hardware stack levels required when called:    4
  8147 ;; This function calls:
  8148 ;;		i2_checkV
  8149 ;;		i2_printV
  8150 ;;		i2_printf
  8151 ;; This function is called by:
  8152 ;;		_simulate
  8153 ;; This function uses a non-reentrant model
  8154 ;;
  8155                           
  8156                           	psect	text43
  8157  001FF0                     __ptext43:
  8158                           	opt stack 0
  8159  001FF0                     i2_check9:
  8160                           	opt stack 18
  8161                           
  8162                           ;sensors.c: 64: printf("9V:");
  8163                           
  8164                           ;incstack = 0
  8165  001FF0  0EF1               	movlw	low STR_4
  8166  001FF2  6E0D               	movwf	i2printf@f,c
  8167  001FF4  0EFF               	movlw	high STR_4
  8168  001FF6  6E0E               	movwf	i2printf@f+1,c
  8169  001FF8  EC3E  F002         	call	i2_printf	;wreg free
  8170                           
  8171                           ;sensors.c: 65: int V = checkV(5, 3.65 / 5 * 1023);
  8172  001FFC  0E02               	movlw	2
  8173  001FFE  6E26               	movwf	i2checkV@threshhold+1,c
  8174  002000  0EEA               	movlw	234
  8175  002002  6E25               	movwf	i2checkV@threshhold,c
  8176  002004  0E05               	movlw	5
  8177  002006  EC70  F00D         	call	i2_checkV
  8178  00200A  C025  F02E         	movff	?i2_checkV,i2check9@V
  8179  00200E  C026  F02F         	movff	?i2_checkV+1,i2check9@V+1
  8180                           
  8181                           ;sensors.c: 66: printV(V);
  8182  002012  C02E  F023         	movff	i2check9@V,i2printV@charged
  8183  002016  C02F  F024         	movff	i2check9@V+1,i2printV@charged+1
  8184  00201A  EC65  F013         	call	i2_printV	;wreg free
  8185                           
  8186                           ;sensors.c: 67: switch (V) {
  8187  00201E  D00F               	goto	i2l4325
  8188  002020                     i2l4323:
  8189                           
  8190                           ;sensors.c: 69: sorted[2]++;
  8191  002020  EE20 F002          	lfsr	2,2
  8192  002024  502A               	movf	i2check9@sorted,w,c
  8193  002026  26D9               	addwf	fsr2l,f,c
  8194  002028  502B               	movf	i2check9@sorted+1,w,c
  8195  00202A  22DA               	addwfc	fsr2h,f,c
  8196  00202C  2ADF               	incf	indf2,f,c
  8197  00202E                     i2l337:
  8198                           
  8199                           ;sensors.c: 71: sorted[3]++;
  8200  00202E  EE20 F003          	lfsr	2,3
  8201  002032  502A               	movf	i2check9@sorted,w,c
  8202  002034  26D9               	addwf	fsr2l,f,c
  8203  002036  502B               	movf	i2check9@sorted+1,w,c
  8204  002038  22DA               	addwfc	fsr2h,f,c
  8205  00203A  2ADF               	incf	indf2,f,c
  8206                           
  8207                           ;sensors.c: 72: }
  8208  00203C  D00F               	goto	i2l338
  8209  00203E                     i2l4325:
  8210  00203E  C02E  F02C         	movff	i2check9@V,??i2_check9
  8211  002042  C02F  F02D         	movff	i2check9@V+1,??i2_check9+1
  8212                           
  8213                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8214                           ; Switch size 1, requested type "space"
  8215                           ; Number of cases is 1, Range of values is 0 to 0
  8216                           ; switch strategies available:
  8217                           ; Name         Instructions Cycles
  8218                           ; simple_byte            4     3 (average)
  8219                           ;	Chosen strategy is simple_byte
  8220  002046  502D               	movf	??i2_check9+1,w,c
  8221  002048  0A00               	xorlw	0	; case 0
  8222  00204A  A4D8               	btfss	status,2,c
  8223  00204C  D007               	goto	i2l338
  8224                           
  8225                           ; Switch size 1, requested type "space"
  8226                           ; Number of cases is 2, Range of values is 0 to 1
  8227                           ; switch strategies available:
  8228                           ; Name         Instructions Cycles
  8229                           ; simple_byte            7     4 (average)
  8230                           ;	Chosen strategy is simple_byte
  8231  00204E  502C               	movf	??i2_check9,w,c
  8232  002050  0A00               	xorlw	0	; case 0
  8233  002052  B4D8               	btfsc	status,2,c
  8234  002054  D7EC               	goto	i2l337
  8235  002056  0A01               	xorlw	1	; case 1
  8236  002058  B4D8               	btfsc	status,2,c
  8237  00205A  D7E2               	goto	i2l4323
  8238  00205C                     i2l338:
  8239                           
  8240                           ;sensors.c: 73: return V;
  8241  00205C  C02E  F02A         	movff	i2check9@V,?i2_check9
  8242  002060  C02F  F02B         	movff	i2check9@V+1,?i2_check9+1
  8243  002064  0012               	return		;funcret
  8244  002066                     __end_ofi2_check9:
  8245                           	opt stack 0
  8246                           pclatu	equ	0xFFB
  8247                           pclath	equ	0xFFA
  8248                           tblptru	equ	0xFF8
  8249                           tblptrh	equ	0xFF7
  8250                           tblptrl	equ	0xFF6
  8251                           tablat	equ	0xFF5
  8252                           prodh	equ	0xFF4
  8253                           prodl	equ	0xFF3
  8254                           intcon	equ	0xFF2
  8255                           intcon3	equ	0xFF0
  8256                           postinc0	equ	0xFEE
  8257                           fsr0h	equ	0xFEA
  8258                           fsr0l	equ	0xFE9
  8259                           wreg	equ	0xFE8
  8260                           plusw1	equ	0xFE3
  8261                           fsr1h	equ	0xFE2
  8262                           fsr1l	equ	0xFE1
  8263                           indf2	equ	0xFDF
  8264                           postinc2	equ	0xFDE
  8265                           postdec2	equ	0xFDD
  8266                           plusw2	equ	0xFDB
  8267                           fsr2h	equ	0xFDA
  8268                           fsr2l	equ	0xFD9
  8269                           status	equ	0xFD8
  8270                           
  8271 ;; *************** function i2_printV *****************
  8272 ;; Defined at:
  8273 ;;		line 21 in file "sensors.c"
  8274 ;; Parameters:    Size  Location     Type
  8275 ;;  charged         2   34[COMRAM] int 
  8276 ;; Auto vars:     Size  Location     Type
  8277 ;;		None
  8278 ;; Return value:  Size  Location     Type
  8279 ;;                  1    wreg      void 
  8280 ;; Registers used:
  8281 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8282 ;; Tracked objects:
  8283 ;;		On entry : 0/0
  8284 ;;		On exit  : 0/0
  8285 ;;		Unchanged: 0/0
  8286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8287 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8290 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8291 ;;Total ram usage:        2 bytes
  8292 ;; Hardware stack levels used:    1
  8293 ;; Hardware stack levels required when called:    3
  8294 ;; This function calls:
  8295 ;;		i2_printf
  8296 ;; This function is called by:
  8297 ;;		i2_checkAA
  8298 ;;		i2_checkC
  8299 ;;		i2_check9
  8300 ;; This function uses a non-reentrant model
  8301 ;;
  8302                           
  8303                           	psect	text44
  8304  0026CA                     __ptext44:
  8305                           	opt stack 0
  8306  0026CA                     i2_printV:
  8307                           	opt stack 18
  8308                           
  8309                           ;sensors.c: 24: if (charged < 0) {
  8310                           
  8311                           ;incstack = 0
  8312  0026CA  AE24               	btfss	i2printV@charged+1,7,c
  8313  0026CC  D007               	goto	i2l3983
  8314                           
  8315                           ;sensors.c: 25: printf("-1 ");
  8316  0026CE  0EE9               	movlw	low STR_37
  8317  0026D0  6E0D               	movwf	i2printf@f,c
  8318  0026D2  0EFF               	movlw	high STR_37
  8319  0026D4  6E0E               	movwf	i2printf@f+1,c
  8320  0026D6  EC3E  F002         	call	i2_printf	;wreg free
  8321                           
  8322                           ;sensors.c: 26: } else {
  8323  0026DA  0012               	return	
  8324  0026DC                     i2l3983:
  8325                           
  8326                           ;sensors.c: 27: printf(" %d ", charged);
  8327  0026DC  0EDF               	movlw	low STR_38
  8328  0026DE  6E0D               	movwf	i2printf@f,c
  8329  0026E0  0EFF               	movlw	high STR_38
  8330  0026E2  6E0E               	movwf	i2printf@f+1,c
  8331  0026E4  C023  F00F         	movff	i2printV@charged,?i2_printf+2
  8332  0026E8  C024  F010         	movff	i2printV@charged+1,?i2_printf+3
  8333  0026EC  EC3E  F002         	call	i2_printf	;wreg free
  8334  0026F0  0012               	return	
  8335  0026F2                     __end_ofi2_printV:
  8336                           	opt stack 0
  8337                           pclatu	equ	0xFFB
  8338                           pclath	equ	0xFFA
  8339                           tblptru	equ	0xFF8
  8340                           tblptrh	equ	0xFF7
  8341                           tblptrl	equ	0xFF6
  8342                           tablat	equ	0xFF5
  8343                           prodh	equ	0xFF4
  8344                           prodl	equ	0xFF3
  8345                           intcon	equ	0xFF2
  8346                           intcon3	equ	0xFF0
  8347                           postinc0	equ	0xFEE
  8348                           fsr0h	equ	0xFEA
  8349                           fsr0l	equ	0xFE9
  8350                           wreg	equ	0xFE8
  8351                           plusw1	equ	0xFE3
  8352                           fsr1h	equ	0xFE2
  8353                           fsr1l	equ	0xFE1
  8354                           indf2	equ	0xFDF
  8355                           postinc2	equ	0xFDE
  8356                           postdec2	equ	0xFDD
  8357                           plusw2	equ	0xFDB
  8358                           fsr2h	equ	0xFDA
  8359                           fsr2l	equ	0xFD9
  8360                           status	equ	0xFD8
  8361                           
  8362 ;; *************** function i2_checkV *****************
  8363 ;; Defined at:
  8364 ;;		line 13 in file "sensors.c"
  8365 ;; Parameters:    Size  Location     Type
  8366 ;;  channel         1    wreg     unsigned char 
  8367 ;;  threshhold      2   36[COMRAM] int 
  8368 ;; Auto vars:     Size  Location     Type
  8369 ;;  channel         1   38[COMRAM] unsigned char 
  8370 ;;  checkV          2   39[COMRAM] int 
  8371 ;; Return value:  Size  Location     Type
  8372 ;;                  2   36[COMRAM] int 
  8373 ;; Registers used:
  8374 ;;		wreg, status,2, status,0, cstack
  8375 ;; Tracked objects:
  8376 ;;		On entry : 0/0
  8377 ;;		On exit  : 0/0
  8378 ;;		Unchanged: 0/0
  8379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8380 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8381 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8383 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8384 ;;Total ram usage:        5 bytes
  8385 ;; Hardware stack levels used:    1
  8386 ;; Hardware stack levels required when called:    2
  8387 ;; This function calls:
  8388 ;;		i2_AD
  8389 ;;		i2___awtoft
  8390 ;;		i2___ftge
  8391 ;;		i2___ftmul
  8392 ;; This function is called by:
  8393 ;;		i2_checkAA
  8394 ;;		i2_checkC
  8395 ;;		i2_check9
  8396 ;; This function uses a non-reentrant model
  8397 ;;
  8398                           
  8399                           	psect	text45
  8400  001AE0                     __ptext45:
  8401                           	opt stack 0
  8402  001AE0                     i2_checkV:
  8403                           	opt stack 19
  8404                           
  8405                           ;incstack = 0
  8406                           ;i2checkV@channel stored from wreg
  8407  001AE0  6E27               	movwf	i2checkV@channel,c
  8408                           
  8409                           ;sensors.c: 15: int voltage = AD(channel);
  8410  001AE2  5027               	movf	i2checkV@channel,w,c
  8411  001AE4  EC50  F013         	call	i2_AD
  8412  001AE8  C001  F028         	movff	?i2_AD,i2checkV@voltage
  8413  001AEC  C002  F029         	movff	?i2_AD+1,i2checkV@voltage+1
  8414                           
  8415                           ;sensors.c: 16: if (voltage < 50) return -1;
  8416  001AF0  BE29               	btfsc	i2checkV@voltage+1,7,c
  8417  001AF2  D006               	goto	i2l3967
  8418  001AF4  5029               	movf	i2checkV@voltage+1,w,c
  8419  001AF6  E107               	bnz	i2l3969
  8420  001AF8  0E32               	movlw	50
  8421  001AFA  5C28               	subwf	i2checkV@voltage,w,c
  8422  001AFC  B0D8               	btfsc	status,0,c
  8423  001AFE  D003               	goto	i2l3969
  8424  001B00                     i2l3967:
  8425  001B00  6825               	setf	?i2_checkV,c
  8426  001B02  6826               	setf	?i2_checkV+1,c
  8427  001B04  0012               	return	
  8428  001B06                     i2l3969:
  8429                           
  8430                           ;sensors.c: 17: if (voltage > 0.85 * threshhold) return 1;
  8431  001B06  0E9A               	movlw	154
  8432  001B08  6E10               	movwf	i2___ftmul@f2,c
  8433  001B0A  0E59               	movlw	89
  8434  001B0C  6E11               	movwf	i2___ftmul@f2+1,c
  8435  001B0E  0E3F               	movlw	63
  8436  001B10  6E12               	movwf	i2___ftmul@f2+2,c
  8437  001B12  C025  F009         	movff	i2checkV@threshhold,i2___awtoft@c
  8438  001B16  C026  F00A         	movff	i2checkV@threshhold+1,i2___awtoft@c+1
  8439  001B1A  ECB8  F012         	call	i2___awtoft	;wreg free
  8440  001B1E  C009  F00D         	movff	?i2___awtoft,i2___ftmul@f1
  8441  001B22  C00A  F00E         	movff	?i2___awtoft+1,i2___ftmul@f1+1
  8442  001B26  C00B  F00F         	movff	?i2___awtoft+2,i2___ftmul@f1+2
  8443  001B2A  EC0B  F00A         	call	i2___ftmul	;wreg free
  8444  001B2E  C00D  F01C         	movff	?i2___ftmul,i2___ftge@ff1
  8445  001B32  C00E  F01D         	movff	?i2___ftmul+1,i2___ftge@ff1+1
  8446  001B36  C00F  F01E         	movff	?i2___ftmul+2,i2___ftge@ff1+2
  8447  001B3A  C028  F009         	movff	i2checkV@voltage,i2___awtoft@c
  8448  001B3E  C029  F00A         	movff	i2checkV@voltage+1,i2___awtoft@c+1
  8449  001B42  ECB8  F012         	call	i2___awtoft	;wreg free
  8450  001B46  C009  F01F         	movff	?i2___awtoft,i2___ftge@ff2
  8451  001B4A  C00A  F020         	movff	?i2___awtoft+1,i2___ftge@ff2+1
  8452  001B4E  C00B  F021         	movff	?i2___awtoft+2,i2___ftge@ff2+2
  8453  001B52  EC28  F00D         	call	i2___ftge	;wreg free
  8454  001B56  B0D8               	btfsc	status,0,c
  8455  001B58  D005               	goto	i2l3975
  8456  001B5A  0E00               	movlw	0
  8457  001B5C  6E26               	movwf	?i2_checkV+1,c
  8458  001B5E  0E01               	movlw	1
  8459  001B60  6E25               	movwf	?i2_checkV,c
  8460  001B62  0012               	return	
  8461  001B64                     i2l3975:
  8462                           
  8463                           ;sensors.c: 18: return 0;
  8464  001B64  0E00               	movlw	0
  8465  001B66  6E26               	movwf	?i2_checkV+1,c
  8466  001B68  0E00               	movlw	0
  8467  001B6A  6E25               	movwf	?i2_checkV,c
  8468  001B6C  0012               	return	
  8469  001B6E                     __end_ofi2_checkV:
  8470                           	opt stack 0
  8471                           pclatu	equ	0xFFB
  8472                           pclath	equ	0xFFA
  8473                           tblptru	equ	0xFF8
  8474                           tblptrh	equ	0xFF7
  8475                           tblptrl	equ	0xFF6
  8476                           tablat	equ	0xFF5
  8477                           prodh	equ	0xFF4
  8478                           prodl	equ	0xFF3
  8479                           intcon	equ	0xFF2
  8480                           intcon3	equ	0xFF0
  8481                           postinc0	equ	0xFEE
  8482                           fsr0h	equ	0xFEA
  8483                           fsr0l	equ	0xFE9
  8484                           wreg	equ	0xFE8
  8485                           plusw1	equ	0xFE3
  8486                           fsr1h	equ	0xFE2
  8487                           fsr1l	equ	0xFE1
  8488                           indf2	equ	0xFDF
  8489                           postinc2	equ	0xFDE
  8490                           postdec2	equ	0xFDD
  8491                           plusw2	equ	0xFDB
  8492                           fsr2h	equ	0xFDA
  8493                           fsr2l	equ	0xFD9
  8494                           status	equ	0xFD8
  8495                           
  8496 ;; *************** function i2___ftmul *****************
  8497 ;; Defined at:
  8498 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  8499 ;; Parameters:    Size  Location     Type
  8500 ;;  f1              3   12[COMRAM] float 
  8501 ;;  f2              3   15[COMRAM] float 
  8502 ;; Auto vars:     Size  Location     Type
  8503 ;;  __ftmul         3   22[COMRAM] unsigned um
  8504 ;;  __ftmul         1   26[COMRAM] unsigned char 
  8505 ;;  __ftmul         1   25[COMRAM] unsigned char 
  8506 ;;  __ftmul         1   21[COMRAM] unsigned char 
  8507 ;; Return value:  Size  Location     Type
  8508 ;;                  3   12[COMRAM] float 
  8509 ;; Registers used:
  8510 ;;		wreg, status,2, status,0, cstack
  8511 ;; Tracked objects:
  8512 ;;		On entry : 0/0
  8513 ;;		On exit  : 0/0
  8514 ;;		Unchanged: 0/0
  8515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8516 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8517 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8518 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8519 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8520 ;;Total ram usage:       15 bytes
  8521 ;; Hardware stack levels used:    1
  8522 ;; Hardware stack levels required when called:    1
  8523 ;; This function calls:
  8524 ;;		i2___ftpack
  8525 ;; This function is called by:
  8526 ;;		i2_checkV
  8527 ;; This function uses a non-reentrant model
  8528 ;;
  8529                           
  8530                           	psect	text46
  8531  001416                     __ptext46:
  8532                           	opt stack 0
  8533  001416                     i2___ftmul:
  8534                           	opt stack 19
  8535                           
  8536                           ;incstack = 0
  8537  001416  C00F  F013         	movff	i2___ftmul@f1+2,??i2___ftmul
  8538  00141A  6A14               	clrf	(??i2___ftmul+1)& (0+255),c
  8539  00141C  6A15               	clrf	(??i2___ftmul+2)& (0+255),c
  8540  00141E  340E               	rlcf	i2___ftmul@f1+1,w,c
  8541  001420  3613               	rlcf	??i2___ftmul& (0+255),f,c
  8542  001422  E301               	bnc	u290_41
  8543  001424  8014               	bsf	(??i2___ftmul+1)& (0+255),0,c
  8544  001426                     u290_41:
  8545  001426  5013               	movf	??i2___ftmul,w,c
  8546  001428  6E16               	movwf	i2___ftmul@exp,c
  8547  00142A  5016               	movf	i2___ftmul@exp,w,c
  8548  00142C  A4D8               	btfss	status,2,c
  8549  00142E  D007               	goto	i2l3755
  8550  001430  0E00               	movlw	0
  8551  001432  6E0D               	movwf	?i2___ftmul,c
  8552  001434  0E00               	movlw	0
  8553  001436  6E0E               	movwf	?i2___ftmul+1,c
  8554  001438  0E00               	movlw	0
  8555  00143A  6E0F               	movwf	?i2___ftmul+2,c
  8556  00143C  0012               	return	
  8557  00143E                     i2l3755:
  8558  00143E  C012  F013         	movff	i2___ftmul@f2+2,??i2___ftmul
  8559  001442  6A14               	clrf	(??i2___ftmul+1)& (0+255),c
  8560  001444  6A15               	clrf	(??i2___ftmul+2)& (0+255),c
  8561  001446  3411               	rlcf	i2___ftmul@f2+1,w,c
  8562  001448  3613               	rlcf	??i2___ftmul& (0+255),f,c
  8563  00144A  E301               	bnc	u292_41
  8564  00144C  8014               	bsf	(??i2___ftmul+1)& (0+255),0,c
  8565  00144E                     u292_41:
  8566  00144E  5013               	movf	??i2___ftmul,w,c
  8567  001450  6E1B               	movwf	i2___ftmul@sign,c
  8568  001452  501B               	movf	i2___ftmul@sign,w,c
  8569  001454  A4D8               	btfss	status,2,c
  8570  001456  D007               	goto	i2l3761
  8571  001458  0E00               	movlw	0
  8572  00145A  6E0D               	movwf	?i2___ftmul,c
  8573  00145C  0E00               	movlw	0
  8574  00145E  6E0E               	movwf	?i2___ftmul+1,c
  8575  001460  0E00               	movlw	0
  8576  001462  6E0F               	movwf	?i2___ftmul+2,c
  8577  001464  0012               	return	
  8578  001466                     i2l3761:
  8579  001466  501B               	movf	i2___ftmul@sign,w,c
  8580  001468  0F7B               	addlw	123
  8581  00146A  2616               	addwf	i2___ftmul@exp,f,c
  8582  00146C  C00F  F01B         	movff	i2___ftmul@f1+2,i2___ftmul@sign
  8583  001470  5012               	movf	i2___ftmul@f2+2,w,c
  8584  001472  1A1B               	xorwf	i2___ftmul@sign,f,c
  8585  001474  0E80               	movlw	128
  8586  001476  161B               	andwf	i2___ftmul@sign,f,c
  8587  001478  8E0E               	bsf	i2___ftmul@f1+1,7,c
  8588  00147A  8E11               	bsf	i2___ftmul@f2+1,7,c
  8589  00147C  0EFF               	movlw	255
  8590  00147E  1610               	andwf	i2___ftmul@f2,f,c
  8591  001480  0EFF               	movlw	255
  8592  001482  1611               	andwf	i2___ftmul@f2+1,f,c
  8593  001484  0E00               	movlw	0
  8594  001486  1612               	andwf	i2___ftmul@f2+2,f,c
  8595  001488  0E00               	movlw	0
  8596  00148A  6E17               	movwf	i2___ftmul@f3_as_product,c
  8597  00148C  0E00               	movlw	0
  8598  00148E  6E18               	movwf	i2___ftmul@f3_as_product+1,c
  8599  001490  0E00               	movlw	0
  8600  001492  6E19               	movwf	i2___ftmul@f3_as_product+2,c
  8601  001494  0E07               	movlw	7
  8602  001496  6E1A               	movwf	i2___ftmul@cntr,c
  8603  001498                     i2l3775:
  8604  001498  A00D               	btfss	i2___ftmul@f1,0,c
  8605  00149A  D006               	goto	i2l3779
  8606  00149C  5010               	movf	i2___ftmul@f2,w,c
  8607  00149E  2617               	addwf	i2___ftmul@f3_as_product,f,c
  8608  0014A0  5011               	movf	i2___ftmul@f2+1,w,c
  8609  0014A2  2218               	addwfc	i2___ftmul@f3_as_product+1,f,c
  8610  0014A4  5012               	movf	i2___ftmul@f2+2,w,c
  8611  0014A6  2219               	addwfc	i2___ftmul@f3_as_product+2,f,c
  8612  0014A8                     i2l3779:
  8613  0014A8  90D8               	bcf	status,0,c
  8614  0014AA  320F               	rrcf	i2___ftmul@f1+2,f,c
  8615  0014AC  320E               	rrcf	i2___ftmul@f1+1,f,c
  8616  0014AE  320D               	rrcf	i2___ftmul@f1,f,c
  8617  0014B0  90D8               	bcf	status,0,c
  8618  0014B2  3610               	rlcf	i2___ftmul@f2,f,c
  8619  0014B4  3611               	rlcf	i2___ftmul@f2+1,f,c
  8620  0014B6  3612               	rlcf	i2___ftmul@f2+2,f,c
  8621  0014B8  2E1A               	decfsz	i2___ftmul@cntr,f,c
  8622  0014BA  D7EE               	goto	i2l3775
  8623  0014BC  0E09               	movlw	9
  8624  0014BE  6E1A               	movwf	i2___ftmul@cntr,c
  8625  0014C0                     i2l3785:
  8626  0014C0  A00D               	btfss	i2___ftmul@f1,0,c
  8627  0014C2  D006               	goto	i2l3789
  8628  0014C4  5010               	movf	i2___ftmul@f2,w,c
  8629  0014C6  2617               	addwf	i2___ftmul@f3_as_product,f,c
  8630  0014C8  5011               	movf	i2___ftmul@f2+1,w,c
  8631  0014CA  2218               	addwfc	i2___ftmul@f3_as_product+1,f,c
  8632  0014CC  5012               	movf	i2___ftmul@f2+2,w,c
  8633  0014CE  2219               	addwfc	i2___ftmul@f3_as_product+2,f,c
  8634  0014D0                     i2l3789:
  8635  0014D0  90D8               	bcf	status,0,c
  8636  0014D2  320F               	rrcf	i2___ftmul@f1+2,f,c
  8637  0014D4  320E               	rrcf	i2___ftmul@f1+1,f,c
  8638  0014D6  320D               	rrcf	i2___ftmul@f1,f,c
  8639  0014D8  90D8               	bcf	status,0,c
  8640  0014DA  3219               	rrcf	i2___ftmul@f3_as_product+2,f,c
  8641  0014DC  3218               	rrcf	i2___ftmul@f3_as_product+1,f,c
  8642  0014DE  3217               	rrcf	i2___ftmul@f3_as_product,f,c
  8643  0014E0  2E1A               	decfsz	i2___ftmul@cntr,f,c
  8644  0014E2  D7EE               	goto	i2l3785
  8645  0014E4  C017  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
  8646  0014E8  C018  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
  8647  0014EC  C019  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
  8648  0014F0  C016  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
  8649  0014F4  C01B  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
  8650  0014F8  EC2C  F00C         	call	i2___ftpack	;wreg free
  8651  0014FC  C001  F00D         	movff	?i2___ftpack,?i2___ftmul
  8652  001500  C002  F00E         	movff	?i2___ftpack+1,?i2___ftmul+1
  8653  001504  C003  F00F         	movff	?i2___ftpack+2,?i2___ftmul+2
  8654  001508  0012               	return	
  8655  00150A                     __end_ofi2___ftmul:
  8656                           	opt stack 0
  8657                           pclatu	equ	0xFFB
  8658                           pclath	equ	0xFFA
  8659                           tblptru	equ	0xFF8
  8660                           tblptrh	equ	0xFF7
  8661                           tblptrl	equ	0xFF6
  8662                           tablat	equ	0xFF5
  8663                           prodh	equ	0xFF4
  8664                           prodl	equ	0xFF3
  8665                           intcon	equ	0xFF2
  8666                           intcon3	equ	0xFF0
  8667                           postinc0	equ	0xFEE
  8668                           fsr0h	equ	0xFEA
  8669                           fsr0l	equ	0xFE9
  8670                           wreg	equ	0xFE8
  8671                           plusw1	equ	0xFE3
  8672                           fsr1h	equ	0xFE2
  8673                           fsr1l	equ	0xFE1
  8674                           indf2	equ	0xFDF
  8675                           postinc2	equ	0xFDE
  8676                           postdec2	equ	0xFDD
  8677                           plusw2	equ	0xFDB
  8678                           fsr2h	equ	0xFDA
  8679                           fsr2l	equ	0xFD9
  8680                           status	equ	0xFD8
  8681                           
  8682 ;; *************** function i2___ftge *****************
  8683 ;; Defined at:
  8684 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
  8685 ;; Parameters:    Size  Location     Type
  8686 ;;  ff1             3   27[COMRAM] float 
  8687 ;;  ff2             3   30[COMRAM] float 
  8688 ;; Auto vars:     Size  Location     Type
  8689 ;;		None
  8690 ;; Return value:  Size  Location     Type
  8691 ;;		None               void
  8692 ;; Registers used:
  8693 ;;		wreg, status,2, status,0
  8694 ;; Tracked objects:
  8695 ;;		On entry : 0/0
  8696 ;;		On exit  : 0/0
  8697 ;;		Unchanged: 0/0
  8698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8699 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8701 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8702 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8703 ;;Total ram usage:        9 bytes
  8704 ;; Hardware stack levels used:    1
  8705 ;; This function calls:
  8706 ;;		Nothing
  8707 ;; This function is called by:
  8708 ;;		i2_checkV
  8709 ;; This function uses a non-reentrant model
  8710 ;;
  8711                           
  8712                           	psect	text47
  8713  001A50                     __ptext47:
  8714                           	opt stack 0
  8715  001A50                     i2___ftge:
  8716                           	opt stack 20
  8717                           
  8718                           ;incstack = 0
  8719  001A50  AE1E               	btfss	i2___ftge@ff1+2,7,c
  8720  001A52  D016               	goto	i2l3735
  8721  001A54  C01C  F022         	movff	i2___ftge@ff1,??i2___ftge
  8722  001A58  C01D  F023         	movff	i2___ftge@ff1+1,??i2___ftge+1
  8723  001A5C  C01E  F024         	movff	i2___ftge@ff1+2,??i2___ftge+2
  8724  001A60  1E22               	comf	??i2___ftge,f,c
  8725  001A62  1E23               	comf	??i2___ftge+1,f,c
  8726  001A64  1E24               	comf	??i2___ftge+2,f,c
  8727  001A66  2A22               	incf	??i2___ftge,f,c
  8728  001A68  0E00               	movlw	0
  8729  001A6A  2223               	addwfc	??i2___ftge+1,f,c
  8730  001A6C  2224               	addwfc	??i2___ftge+2,f,c
  8731  001A6E  0E00               	movlw	0
  8732  001A70  2422               	addwf	??i2___ftge,w,c
  8733  001A72  6E1C               	movwf	i2___ftge@ff1,c
  8734  001A74  0E00               	movlw	0
  8735  001A76  2023               	addwfc	??i2___ftge+1,w,c
  8736  001A78  6E1D               	movwf	i2___ftge@ff1+1,c
  8737  001A7A  0E80               	movlw	128
  8738  001A7C  2024               	addwfc	??i2___ftge+2,w,c
  8739  001A7E  6E1E               	movwf	i2___ftge@ff1+2,c
  8740  001A80                     i2l3735:
  8741  001A80  AE21               	btfss	i2___ftge@ff2+2,7,c
  8742  001A82  D016               	goto	i2l3739
  8743  001A84  C01F  F022         	movff	i2___ftge@ff2,??i2___ftge
  8744  001A88  C020  F023         	movff	i2___ftge@ff2+1,??i2___ftge+1
  8745  001A8C  C021  F024         	movff	i2___ftge@ff2+2,??i2___ftge+2
  8746  001A90  1E22               	comf	??i2___ftge,f,c
  8747  001A92  1E23               	comf	??i2___ftge+1,f,c
  8748  001A94  1E24               	comf	??i2___ftge+2,f,c
  8749  001A96  2A22               	incf	??i2___ftge,f,c
  8750  001A98  0E00               	movlw	0
  8751  001A9A  2223               	addwfc	??i2___ftge+1,f,c
  8752  001A9C  2224               	addwfc	??i2___ftge+2,f,c
  8753  001A9E  0E00               	movlw	0
  8754  001AA0  2422               	addwf	??i2___ftge,w,c
  8755  001AA2  6E1F               	movwf	i2___ftge@ff2,c
  8756  001AA4  0E00               	movlw	0
  8757  001AA6  2023               	addwfc	??i2___ftge+1,w,c
  8758  001AA8  6E20               	movwf	i2___ftge@ff2+1,c
  8759  001AAA  0E80               	movlw	128
  8760  001AAC  2024               	addwfc	??i2___ftge+2,w,c
  8761  001AAE  6E21               	movwf	i2___ftge@ff2+2,c
  8762  001AB0                     i2l3739:
  8763  001AB0  0E00               	movlw	0
  8764  001AB2  1A1C               	xorwf	i2___ftge@ff1,f,c
  8765  001AB4  0E00               	movlw	0
  8766  001AB6  1A1D               	xorwf	i2___ftge@ff1+1,f,c
  8767  001AB8  0E80               	movlw	128
  8768  001ABA  1A1E               	xorwf	i2___ftge@ff1+2,f,c
  8769  001ABC  0E00               	movlw	0
  8770  001ABE  1A1F               	xorwf	i2___ftge@ff2,f,c
  8771  001AC0  0E00               	movlw	0
  8772  001AC2  1A20               	xorwf	i2___ftge@ff2+1,f,c
  8773  001AC4  0E80               	movlw	128
  8774  001AC6  1A21               	xorwf	i2___ftge@ff2+2,f,c
  8775  001AC8  501F               	movf	i2___ftge@ff2,w,c
  8776  001ACA  5C1C               	subwf	i2___ftge@ff1,w,c
  8777  001ACC  5020               	movf	i2___ftge@ff2+1,w,c
  8778  001ACE  581D               	subwfb	i2___ftge@ff1+1,w,c
  8779  001AD0  5021               	movf	i2___ftge@ff2+2,w,c
  8780  001AD2  581E               	subwfb	i2___ftge@ff1+2,w,c
  8781  001AD4  B0D8               	btfsc	status,0,c
  8782  001AD6  D002               	goto	i2l3745
  8783  001AD8  90D8               	bcf	status,0,c
  8784  001ADA  0012               	return	
  8785  001ADC                     i2l3745:
  8786  001ADC  80D8               	bsf	status,0,c
  8787  001ADE  0012               	return	
  8788  001AE0                     __end_ofi2___ftge:
  8789                           	opt stack 0
  8790                           pclatu	equ	0xFFB
  8791                           pclath	equ	0xFFA
  8792                           tblptru	equ	0xFF8
  8793                           tblptrh	equ	0xFF7
  8794                           tblptrl	equ	0xFF6
  8795                           tablat	equ	0xFF5
  8796                           prodh	equ	0xFF4
  8797                           prodl	equ	0xFF3
  8798                           intcon	equ	0xFF2
  8799                           intcon3	equ	0xFF0
  8800                           postinc0	equ	0xFEE
  8801                           fsr0h	equ	0xFEA
  8802                           fsr0l	equ	0xFE9
  8803                           wreg	equ	0xFE8
  8804                           plusw1	equ	0xFE3
  8805                           fsr1h	equ	0xFE2
  8806                           fsr1l	equ	0xFE1
  8807                           indf2	equ	0xFDF
  8808                           postinc2	equ	0xFDE
  8809                           postdec2	equ	0xFDD
  8810                           plusw2	equ	0xFDB
  8811                           fsr2h	equ	0xFDA
  8812                           fsr2l	equ	0xFD9
  8813                           status	equ	0xFD8
  8814                           
  8815 ;; *************** function i2___awtoft *****************
  8816 ;; Defined at:
  8817 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awtoft.c"
  8818 ;; Parameters:    Size  Location     Type
  8819 ;;  c               2    8[COMRAM] int 
  8820 ;; Auto vars:     Size  Location     Type
  8821 ;;  __awtoft        1   11[COMRAM] unsigned char 
  8822 ;; Return value:  Size  Location     Type
  8823 ;;                  3    8[COMRAM] float 
  8824 ;; Registers used:
  8825 ;;		wreg, status,2, status,0, cstack
  8826 ;; Tracked objects:
  8827 ;;		On entry : 0/0
  8828 ;;		On exit  : 0/0
  8829 ;;		Unchanged: 0/0
  8830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8831 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8832 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8834 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8835 ;;Total ram usage:        4 bytes
  8836 ;; Hardware stack levels used:    1
  8837 ;; Hardware stack levels required when called:    1
  8838 ;; This function calls:
  8839 ;;		i2___ftpack
  8840 ;; This function is called by:
  8841 ;;		i2_checkV
  8842 ;; This function uses a non-reentrant model
  8843 ;;
  8844                           
  8845                           	psect	text48
  8846  002570                     __ptext48:
  8847                           	opt stack 0
  8848  002570                     i2___awtoft:
  8849                           	opt stack 19
  8850                           
  8851                           ;incstack = 0
  8852  002570  0E00               	movlw	0
  8853  002572  6E0C               	movwf	i2___awtoft@sign,c
  8854  002574  AE0A               	btfss	i2___awtoft@c+1,7,c
  8855  002576  D006               	goto	i2l3727
  8856  002578  6C09               	negf	i2___awtoft@c,c
  8857  00257A  1E0A               	comf	i2___awtoft@c+1,f,c
  8858  00257C  B0D8               	btfsc	status,0,c
  8859  00257E  2A0A               	incf	i2___awtoft@c+1,f,c
  8860  002580  0E01               	movlw	1
  8861  002582  6E0C               	movwf	i2___awtoft@sign,c
  8862  002584                     i2l3727:
  8863  002584  C009  F001         	movff	i2___awtoft@c,i2___ftpack@arg
  8864  002588  C00A  F002         	movff	i2___awtoft@c+1,i2___ftpack@arg+1
  8865  00258C  6A03               	clrf	i2___ftpack@arg+2,c
  8866  00258E  0E8E               	movlw	142
  8867  002590  6E04               	movwf	i2___ftpack@exp,c
  8868  002592  C00C  F005         	movff	i2___awtoft@sign,i2___ftpack@sign
  8869  002596  EC2C  F00C         	call	i2___ftpack	;wreg free
  8870  00259A  C001  F009         	movff	?i2___ftpack,?i2___awtoft
  8871  00259E  C002  F00A         	movff	?i2___ftpack+1,?i2___awtoft+1
  8872  0025A2  C003  F00B         	movff	?i2___ftpack+2,?i2___awtoft+2
  8873  0025A6  0012               	return	
  8874  0025A8                     __end_ofi2___awtoft:
  8875                           	opt stack 0
  8876                           pclatu	equ	0xFFB
  8877                           pclath	equ	0xFFA
  8878                           tblptru	equ	0xFF8
  8879                           tblptrh	equ	0xFF7
  8880                           tblptrl	equ	0xFF6
  8881                           tablat	equ	0xFF5
  8882                           prodh	equ	0xFF4
  8883                           prodl	equ	0xFF3
  8884                           intcon	equ	0xFF2
  8885                           intcon3	equ	0xFF0
  8886                           postinc0	equ	0xFEE
  8887                           fsr0h	equ	0xFEA
  8888                           fsr0l	equ	0xFE9
  8889                           wreg	equ	0xFE8
  8890                           plusw1	equ	0xFE3
  8891                           fsr1h	equ	0xFE2
  8892                           fsr1l	equ	0xFE1
  8893                           indf2	equ	0xFDF
  8894                           postinc2	equ	0xFDE
  8895                           postdec2	equ	0xFDD
  8896                           plusw2	equ	0xFDB
  8897                           fsr2h	equ	0xFDA
  8898                           fsr2l	equ	0xFD9
  8899                           status	equ	0xFD8
  8900                           
  8901 ;; *************** function i2___ftpack *****************
  8902 ;; Defined at:
  8903 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  8904 ;; Parameters:    Size  Location     Type
  8905 ;;  arg             3    0[COMRAM] unsigned um
  8906 ;;  exp             1    3[COMRAM] unsigned char 
  8907 ;;  sign            1    4[COMRAM] unsigned char 
  8908 ;; Auto vars:     Size  Location     Type
  8909 ;;		None
  8910 ;; Return value:  Size  Location     Type
  8911 ;;                  3    0[COMRAM] float 
  8912 ;; Registers used:
  8913 ;;		wreg, status,2, status,0
  8914 ;; Tracked objects:
  8915 ;;		On entry : 0/0
  8916 ;;		On exit  : 0/0
  8917 ;;		Unchanged: 0/0
  8918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8919 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8921 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8922 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8923 ;;Total ram usage:        8 bytes
  8924 ;; Hardware stack levels used:    1
  8925 ;; This function calls:
  8926 ;;		Nothing
  8927 ;; This function is called by:
  8928 ;;		i2___awtoft
  8929 ;;		i2___ftmul
  8930 ;; This function uses a non-reentrant model
  8931 ;;
  8932                           
  8933                           	psect	text49
  8934  001858                     __ptext49:
  8935                           	opt stack 0
  8936  001858                     i2___ftpack:
  8937                           	opt stack 19
  8938                           
  8939                           ;incstack = 0
  8940  001858  5004               	movf	i2___ftpack@exp,w,c
  8941  00185A  B4D8               	btfsc	status,2,c
  8942  00185C  D005               	goto	i2l3179
  8943  00185E  5001               	movf	i2___ftpack@arg,w,c
  8944  001860  1002               	iorwf	i2___ftpack@arg+1,w,c
  8945  001862  1003               	iorwf	i2___ftpack@arg+2,w,c
  8946  001864  A4D8               	btfss	status,2,c
  8947  001866  D00C               	goto	i2l3185
  8948  001868                     i2l3179:
  8949  001868  0E00               	movlw	0
  8950  00186A  6E01               	movwf	?i2___ftpack,c
  8951  00186C  0E00               	movlw	0
  8952  00186E  6E02               	movwf	?i2___ftpack+1,c
  8953  001870  0E00               	movlw	0
  8954  001872  6E03               	movwf	?i2___ftpack+2,c
  8955  001874  0012               	return	
  8956  001876                     i2l3183:
  8957  001876  2A04               	incf	i2___ftpack@exp,f,c
  8958  001878  90D8               	bcf	status,0,c
  8959  00187A  3203               	rrcf	i2___ftpack@arg+2,f,c
  8960  00187C  3202               	rrcf	i2___ftpack@arg+1,f,c
  8961  00187E  3201               	rrcf	i2___ftpack@arg,f,c
  8962  001880                     i2l3185:
  8963  001880  0E00               	movlw	0
  8964  001882  1401               	andwf	i2___ftpack@arg,w,c
  8965  001884  6E06               	movwf	??i2___ftpack& (0+255),c
  8966  001886  0E00               	movlw	0
  8967  001888  1402               	andwf	i2___ftpack@arg+1,w,c
  8968  00188A  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
  8969  00188C  0EFE               	movlw	254
  8970  00188E  1403               	andwf	i2___ftpack@arg+2,w,c
  8971  001890  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
  8972  001892  5006               	movf	??i2___ftpack,w,c
  8973  001894  1007               	iorwf	??i2___ftpack+1,w,c
  8974  001896  1008               	iorwf	??i2___ftpack+2,w,c
  8975  001898  B4D8               	btfsc	status,2,c
  8976  00189A  D00C               	goto	i2l3191
  8977  00189C  D7EC               	goto	i2l3183
  8978  00189E                     i2l3187:
  8979  00189E  2A04               	incf	i2___ftpack@exp,f,c
  8980  0018A0  0E01               	movlw	1
  8981  0018A2  2601               	addwf	i2___ftpack@arg,f,c
  8982  0018A4  0E00               	movlw	0
  8983  0018A6  2202               	addwfc	i2___ftpack@arg+1,f,c
  8984  0018A8  0E00               	movlw	0
  8985  0018AA  2203               	addwfc	i2___ftpack@arg+2,f,c
  8986  0018AC  90D8               	bcf	status,0,c
  8987  0018AE  3203               	rrcf	i2___ftpack@arg+2,f,c
  8988  0018B0  3202               	rrcf	i2___ftpack@arg+1,f,c
  8989  0018B2  3201               	rrcf	i2___ftpack@arg,f,c
  8990  0018B4                     i2l3191:
  8991  0018B4  0E00               	movlw	0
  8992  0018B6  1401               	andwf	i2___ftpack@arg,w,c
  8993  0018B8  6E06               	movwf	??i2___ftpack& (0+255),c
  8994  0018BA  0E00               	movlw	0
  8995  0018BC  1402               	andwf	i2___ftpack@arg+1,w,c
  8996  0018BE  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
  8997  0018C0  0EFF               	movlw	255
  8998  0018C2  1403               	andwf	i2___ftpack@arg+2,w,c
  8999  0018C4  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
  9000  0018C6  5006               	movf	??i2___ftpack,w,c
  9001  0018C8  1007               	iorwf	??i2___ftpack+1,w,c
  9002  0018CA  1008               	iorwf	??i2___ftpack+2,w,c
  9003  0018CC  B4D8               	btfsc	status,2,c
  9004  0018CE  D006               	goto	i2l3195
  9005  0018D0  D7E6               	goto	i2l3187
  9006  0018D2                     i2l3193:
  9007  0018D2  0604               	decf	i2___ftpack@exp,f,c
  9008  0018D4  90D8               	bcf	status,0,c
  9009  0018D6  3601               	rlcf	i2___ftpack@arg,f,c
  9010  0018D8  3602               	rlcf	i2___ftpack@arg+1,f,c
  9011  0018DA  3603               	rlcf	i2___ftpack@arg+2,f,c
  9012  0018DC                     i2l3195:
  9013  0018DC  BE02               	btfsc	i2___ftpack@arg+1,7,c
  9014  0018DE  D003               	goto	i2l755
  9015  0018E0  0E02               	movlw	2
  9016  0018E2  6004               	cpfslt	i2___ftpack@exp,c
  9017  0018E4  D7F6               	goto	i2l3193
  9018  0018E6                     i2l755:
  9019  0018E6  A004               	btfss	i2___ftpack@exp,0,c
  9020  0018E8  9E02               	bcf	i2___ftpack@arg+1,7,c
  9021  0018EA  90D8               	bcf	status,0,c
  9022  0018EC  3204               	rrcf	i2___ftpack@exp,f,c
  9023  0018EE  5004               	movf	i2___ftpack@exp,w,c
  9024  0018F0  1203               	iorwf	i2___ftpack@arg+2,f,c
  9025  0018F2  5005               	movf	i2___ftpack@sign,w,c
  9026  0018F4  A4D8               	btfss	status,2,c
  9027  0018F6  8E03               	bsf	i2___ftpack@arg+2,7,c
  9028  0018F8  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
  9029  0018FC  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
  9030  001900  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
  9031  001904  0012               	return	
  9032  001906                     __end_ofi2___ftpack:
  9033                           	opt stack 0
  9034                           pclatu	equ	0xFFB
  9035                           pclath	equ	0xFFA
  9036                           tblptru	equ	0xFF8
  9037                           tblptrh	equ	0xFF7
  9038                           tblptrl	equ	0xFF6
  9039                           tablat	equ	0xFF5
  9040                           prodh	equ	0xFF4
  9041                           prodl	equ	0xFF3
  9042                           intcon	equ	0xFF2
  9043                           intcon3	equ	0xFF0
  9044                           postinc0	equ	0xFEE
  9045                           fsr0h	equ	0xFEA
  9046                           fsr0l	equ	0xFE9
  9047                           wreg	equ	0xFE8
  9048                           plusw1	equ	0xFE3
  9049                           fsr1h	equ	0xFE2
  9050                           fsr1l	equ	0xFE1
  9051                           indf2	equ	0xFDF
  9052                           postinc2	equ	0xFDE
  9053                           postdec2	equ	0xFDD
  9054                           plusw2	equ	0xFDB
  9055                           fsr2h	equ	0xFDA
  9056                           fsr2l	equ	0xFD9
  9057                           status	equ	0xFD8
  9058                           
  9059 ;; *************** function i2_AD *****************
  9060 ;; Defined at:
  9061 ;;		line 4 in file "sensors.c"
  9062 ;; Parameters:    Size  Location     Type
  9063 ;;  channel         1    wreg     unsigned char 
  9064 ;; Auto vars:     Size  Location     Type
  9065 ;;  channel         1    4[COMRAM] unsigned char 
  9066 ;; Return value:  Size  Location     Type
  9067 ;;                  2    0[COMRAM] int 
  9068 ;; Registers used:
  9069 ;;		wreg, status,2, status,0
  9070 ;; Tracked objects:
  9071 ;;		On entry : 0/0
  9072 ;;		On exit  : 0/0
  9073 ;;		Unchanged: 0/0
  9074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9075 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9076 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9077 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9078 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9079 ;;Total ram usage:        5 bytes
  9080 ;; Hardware stack levels used:    1
  9081 ;; This function calls:
  9082 ;;		Nothing
  9083 ;; This function is called by:
  9084 ;;		i2_checkV
  9085 ;; This function uses a non-reentrant model
  9086 ;;
  9087                           
  9088                           	psect	text50
  9089  0026A0                     __ptext50:
  9090                           	opt stack 0
  9091  0026A0                     i2_AD:
  9092                           	opt stack 20
  9093                           
  9094                           ;incstack = 0
  9095                           ;i2AD@channel stored from wreg
  9096  0026A0  6E05               	movwf	i2AD@channel,c
  9097                           
  9098                           ;sensors.c: 6: ADCON0 = ((channel << 2));
  9099  0026A2  4405               	rlncf	i2AD@channel,w,c
  9100  0026A4  46E8               	rlncf	wreg,f,c
  9101  0026A6  0BFC               	andlw	252
  9102  0026A8  6EC2               	movwf	4034,c	;volatile
  9103                           
  9104                           ;sensors.c: 7: ADON = 1;
  9105  0026AA  80C2               	bsf	4034,0,c	;volatile
  9106                           
  9107                           ;sensors.c: 8: ADCON0bits.GO = 1;
  9108  0026AC  82C2               	bsf	4034,1,c	;volatile
  9109  0026AE                     i2l305:
  9110  0026AE  B2C2               	btfsc	4034,1,c	;volatile
  9111  0026B0  D7FE               	goto	i2l305
  9112                           
  9113                           ;sensors.c: 10: return (ADRESH << 8) | ADRESL;
  9114  0026B2  50C3               	movf	4035,w,c	;volatile
  9115  0026B4  CFC4 F003          	movff	4036,??i2_AD	;volatile
  9116  0026B8  6A04               	clrf	(??i2_AD+1)& (0+255),c
  9117  0026BA  C003  F004         	movff	??i2_AD,??i2_AD+1
  9118  0026BE  6A03               	clrf	??i2_AD,c
  9119  0026C0  1003               	iorwf	??i2_AD,w,c
  9120  0026C2  6E01               	movwf	?i2_AD,c
  9121  0026C4  5004               	movf	??i2_AD+1,w,c
  9122  0026C6  6E02               	movwf	?i2_AD+1,c
  9123  0026C8  0012               	return	
  9124  0026CA                     __end_ofi2_AD:
  9125                           	opt stack 0
  9126                           pclatu	equ	0xFFB
  9127                           pclath	equ	0xFFA
  9128                           tblptru	equ	0xFF8
  9129                           tblptrh	equ	0xFF7
  9130                           tblptrl	equ	0xFF6
  9131                           tablat	equ	0xFF5
  9132                           prodh	equ	0xFF4
  9133                           prodl	equ	0xFF3
  9134                           intcon	equ	0xFF2
  9135                           intcon3	equ	0xFF0
  9136                           postinc0	equ	0xFEE
  9137                           fsr0h	equ	0xFEA
  9138                           fsr0l	equ	0xFE9
  9139                           wreg	equ	0xFE8
  9140                           plusw1	equ	0xFE3
  9141                           fsr1h	equ	0xFE2
  9142                           fsr1l	equ	0xFE1
  9143                           indf2	equ	0xFDF
  9144                           postinc2	equ	0xFDE
  9145                           postdec2	equ	0xFDD
  9146                           plusw2	equ	0xFDB
  9147                           fsr2h	equ	0xFDA
  9148                           fsr2l	equ	0xFD9
  9149                           status	equ	0xFD8
  9150                           
  9151 ;; *************** function _stopMoving *****************
  9152 ;; Defined at:
  9153 ;;		line 31 in file "motors.c"
  9154 ;; Parameters:    Size  Location     Type
  9155 ;;  em              1    wreg     unsigned char 
  9156 ;; Auto vars:     Size  Location     Type
  9157 ;;  em              1   36[COMRAM] unsigned char 
  9158 ;; Return value:  Size  Location     Type
  9159 ;;                  1    wreg      void 
  9160 ;; Registers used:
  9161 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9162 ;; Tracked objects:
  9163 ;;		On entry : 0/0
  9164 ;;		On exit  : 0/0
  9165 ;;		Unchanged: 0/0
  9166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9168 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9170 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9171 ;;Total ram usage:        3 bytes
  9172 ;; Hardware stack levels used:    1
  9173 ;; Hardware stack levels required when called:    3
  9174 ;; This function calls:
  9175 ;;		i2_lcdInst
  9176 ;;		i2_printf
  9177 ;; This function is called by:
  9178 ;;		_simulate
  9179 ;;		_intrpt
  9180 ;; This function uses a non-reentrant model
  9181 ;;
  9182                           
  9183                           	psect	text51
  9184  0025A8                     __ptext51:
  9185                           	opt stack 0
  9186  0025A8                     _stopMoving:
  9187                           	opt stack 20
  9188                           
  9189                           ;incstack = 0
  9190                           ;stopMoving@em stored from wreg
  9191  0025A8  6E25               	movwf	stopMoving@em,c
  9192                           
  9193                           ;motors.c: 32: (INTCONbits.GIE = 0);
  9194  0025AA  9EF2               	bcf	intcon,7,c	;volatile
  9195                           
  9196                           ;motors.c: 33: LATC = 0;
  9197  0025AC  0E00               	movlw	0
  9198  0025AE  6E8B               	movwf	3979,c	;volatile
  9199                           
  9200                           ;motors.c: 34: lcdInst(0b10000000);
  9201  0025B0  0E80               	movlw	128
  9202  0025B2  EC42  F014         	call	i2_lcdInst
  9203                           
  9204                           ;motors.c: 35: printf(em ? "Emergency          " : "Stopped          ");
  9205  0025B6  5025               	movf	stopMoving@em,w,c
  9206  0025B8  A4D8               	btfss	status,2,c
  9207  0025BA  D004               	goto	i2l4147
  9208  0025BC  0E6F               	movlw	low STR_36
  9209  0025BE  6E23               	movwf	_stopMoving$552,c
  9210  0025C0  0EFF               	movlw	high STR_36
  9211  0025C2  D003               	goto	L1
  9212  0025C4                     i2l4147:
  9213  0025C4  0E22               	movlw	low STR_35
  9214  0025C6  6E23               	movwf	_stopMoving$552,c
  9215  0025C8  0EFF               	movlw	high STR_35
  9216  0025CA                     L1:
  9217  0025CA  6E24               	movwf	_stopMoving$552+1,c
  9218  0025CC  C023  F00D         	movff	_stopMoving$552,i2printf@f
  9219  0025D0  C024  F00E         	movff	_stopMoving$552+1,i2printf@f+1
  9220  0025D4  EC3E  F002         	call	i2_printf	;wreg free
  9221                           
  9222                           ;motors.c: 36: if (em)
  9223  0025D8  5025               	movf	stopMoving@em,w,c
  9224  0025DA  B4D8               	btfsc	status,2,c
  9225  0025DC  0012               	return	
  9226  0025DE                     i2l287:
  9227  0025DE  D7FF               	goto	i2l287
  9228  0025E0                     __end_of_stopMoving:
  9229                           	opt stack 0
  9230                           pclatu	equ	0xFFB
  9231                           pclath	equ	0xFFA
  9232                           tblptru	equ	0xFF8
  9233                           tblptrh	equ	0xFF7
  9234                           tblptrl	equ	0xFF6
  9235                           tablat	equ	0xFF5
  9236                           prodh	equ	0xFF4
  9237                           prodl	equ	0xFF3
  9238                           intcon	equ	0xFF2
  9239                           intcon3	equ	0xFF0
  9240                           postinc0	equ	0xFEE
  9241                           fsr0h	equ	0xFEA
  9242                           fsr0l	equ	0xFE9
  9243                           wreg	equ	0xFE8
  9244                           plusw1	equ	0xFE3
  9245                           fsr1h	equ	0xFE2
  9246                           fsr1l	equ	0xFE1
  9247                           indf2	equ	0xFDF
  9248                           postinc2	equ	0xFDE
  9249                           postdec2	equ	0xFDD
  9250                           plusw2	equ	0xFDB
  9251                           fsr2h	equ	0xFDA
  9252                           fsr2l	equ	0xFD9
  9253                           status	equ	0xFD8
  9254                           
  9255 ;; *************** function _WriteRun *****************
  9256 ;; Defined at:
  9257 ;;		line 75 in file "eeprom.c"
  9258 ;; Parameters:    Size  Location     Type
  9259 ;;  sorted          2    6[COMRAM] PTR unsigned char 
  9260 ;;		 -> simulate@sorted(4), 
  9261 ;;  time            2    8[COMRAM] unsigned int 
  9262 ;; Auto vars:     Size  Location     Type
  9263 ;;  add             2   12[COMRAM] unsigned int 
  9264 ;; Return value:  Size  Location     Type
  9265 ;;                  1    wreg      void 
  9266 ;; Registers used:
  9267 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9268 ;; Tracked objects:
  9269 ;;		On entry : 0/0
  9270 ;;		On exit  : 0/0
  9271 ;;		Unchanged: 0/0
  9272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9273 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9274 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9275 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9276 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9277 ;;Total ram usage:        8 bytes
  9278 ;; Hardware stack levels used:    1
  9279 ;; Hardware stack levels required when called:    1
  9280 ;; This function calls:
  9281 ;;		_WriteEE
  9282 ;;		i2___wmul
  9283 ;; This function is called by:
  9284 ;;		_simulate
  9285 ;; This function uses a non-reentrant model
  9286 ;;
  9287                           
  9288                           	psect	text52
  9289  000F18                     __ptext52:
  9290                           	opt stack 0
  9291  000F18                     _WriteRun:
  9292                           	opt stack 21
  9293                           
  9294                           ;eeprom.c: 76: unsigned int add = ++Latest;
  9295                           
  9296                           ;incstack = 0
  9297  000F18  0100               	movlb	0	; () banked
  9298  000F1A  2BDB               	incf	_Latest& (0+255),f,b
  9299  000F1C  C0DB  F00D         	movff	_Latest,WriteRun@add
  9300  000F20  6A0E               	clrf	WriteRun@add+1,c
  9301                           
  9302                           ; BSR set to: 0
  9303                           ;eeprom.c: 77: if (add > 3) {
  9304  000F22  500E               	movf	WriteRun@add+1,w,c
  9305  000F24  E104               	bnz	i2u337_40
  9306  000F26  0E04               	movlw	4
  9307  000F28  5C0D               	subwf	WriteRun@add,w,c
  9308  000F2A  A0D8               	btfss	status,0,c
  9309  000F2C  D006               	goto	i2l4161
  9310  000F2E                     i2u337_40:
  9311                           
  9312                           ; BSR set to: 0
  9313                           ;eeprom.c: 78: add -= 4;
  9314  000F2E  0E04               	movlw	4
  9315  000F30  5E0D               	subwf	WriteRun@add,f,c
  9316  000F32  0E00               	movlw	0
  9317  000F34  5A0E               	subwfb	WriteRun@add+1,f,c
  9318                           
  9319                           ; BSR set to: 0
  9320                           ;eeprom.c: 79: Latest = add;
  9321  000F36  C00D  F0DB         	movff	WriteRun@add,_Latest
  9322  000F3A                     i2l4161:
  9323                           
  9324                           ; BSR set to: 0
  9325                           ;eeprom.c: 80: }
  9326                           ;eeprom.c: 81: add *= 5;
  9327  000F3A  C00D  F001         	movff	WriteRun@add,i2___wmul@multiplier
  9328  000F3E  C00E  F002         	movff	WriteRun@add+1,i2___wmul@multiplier+1
  9329  000F42  0E00               	movlw	0
  9330  000F44  6E04               	movwf	i2___wmul@multiplicand+1,c
  9331  000F46  0E05               	movlw	5
  9332  000F48  6E03               	movwf	i2___wmul@multiplicand,c
  9333  000F4A  ECB2  F013         	call	i2___wmul	;wreg free
  9334  000F4E  C001  F00D         	movff	?i2___wmul,WriteRun@add
  9335  000F52  C002  F00E         	movff	?i2___wmul+1,WriteRun@add+1
  9336                           
  9337                           ;eeprom.c: 82: WriteEE(add++ *8, time);
  9338  000F56  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  9339  000F5A  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  9340  000F5E  90D8               	bcf	status,0,c
  9341  000F60  360B               	rlcf	??_WriteRun,f,c
  9342  000F62  360C               	rlcf	??_WriteRun+1,f,c
  9343  000F64  90D8               	bcf	status,0,c
  9344  000F66  360B               	rlcf	??_WriteRun,f,c
  9345  000F68  360C               	rlcf	??_WriteRun+1,f,c
  9346  000F6A  90D8               	bcf	status,0,c
  9347  000F6C  360B               	rlcf	??_WriteRun,f,c
  9348  000F6E  360C               	rlcf	??_WriteRun+1,f,c
  9349  000F70  C00B  F001         	movff	??_WriteRun,WriteEE@address
  9350  000F74  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  9351  000F78  C009  F003         	movff	WriteRun@time,WriteEE@data
  9352  000F7C  EC9F  F013         	call	_WriteEE	;wreg free
  9353  000F80  4A0D               	infsnz	WriteRun@add,f,c
  9354  000F82  2A0E               	incf	WriteRun@add+1,f,c
  9355                           
  9356                           ;eeprom.c: 83: WriteEE(add++ *8, sorted[0]);
  9357  000F84  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  9358  000F88  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  9359  000F8C  90D8               	bcf	status,0,c
  9360  000F8E  360B               	rlcf	??_WriteRun,f,c
  9361  000F90  360C               	rlcf	??_WriteRun+1,f,c
  9362  000F92  90D8               	bcf	status,0,c
  9363  000F94  360B               	rlcf	??_WriteRun,f,c
  9364  000F96  360C               	rlcf	??_WriteRun+1,f,c
  9365  000F98  90D8               	bcf	status,0,c
  9366  000F9A  360B               	rlcf	??_WriteRun,f,c
  9367  000F9C  360C               	rlcf	??_WriteRun+1,f,c
  9368  000F9E  C00B  F001         	movff	??_WriteRun,WriteEE@address
  9369  000FA2  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  9370  000FA6  C007  FFD9         	movff	WriteRun@sorted,fsr2l
  9371  000FAA  C008  FFDA         	movff	WriteRun@sorted+1,fsr2h
  9372  000FAE  50DF               	movf	indf2,w,c
  9373  000FB0  6E03               	movwf	WriteEE@data,c
  9374  000FB2  EC9F  F013         	call	_WriteEE	;wreg free
  9375  000FB6  4A0D               	infsnz	WriteRun@add,f,c
  9376  000FB8  2A0E               	incf	WriteRun@add+1,f,c
  9377                           
  9378                           ;eeprom.c: 84: WriteEE(add++ *8, sorted[1]);
  9379  000FBA  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  9380  000FBE  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  9381  000FC2  90D8               	bcf	status,0,c
  9382  000FC4  360B               	rlcf	??_WriteRun,f,c
  9383  000FC6  360C               	rlcf	??_WriteRun+1,f,c
  9384  000FC8  90D8               	bcf	status,0,c
  9385  000FCA  360B               	rlcf	??_WriteRun,f,c
  9386  000FCC  360C               	rlcf	??_WriteRun+1,f,c
  9387  000FCE  90D8               	bcf	status,0,c
  9388  000FD0  360B               	rlcf	??_WriteRun,f,c
  9389  000FD2  360C               	rlcf	??_WriteRun+1,f,c
  9390  000FD4  C00B  F001         	movff	??_WriteRun,WriteEE@address
  9391  000FD8  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  9392  000FDC  EE20 F001          	lfsr	2,1
  9393  000FE0  5007               	movf	WriteRun@sorted,w,c
  9394  000FE2  26D9               	addwf	fsr2l,f,c
  9395  000FE4  5008               	movf	WriteRun@sorted+1,w,c
  9396  000FE6  22DA               	addwfc	fsr2h,f,c
  9397  000FE8  50DF               	movf	indf2,w,c
  9398  000FEA  6E03               	movwf	WriteEE@data,c
  9399  000FEC  EC9F  F013         	call	_WriteEE	;wreg free
  9400  000FF0  4A0D               	infsnz	WriteRun@add,f,c
  9401  000FF2  2A0E               	incf	WriteRun@add+1,f,c
  9402                           
  9403                           ;eeprom.c: 85: WriteEE(add++ *8, sorted[2]);
  9404  000FF4  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  9405  000FF8  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  9406  000FFC  90D8               	bcf	status,0,c
  9407  000FFE  360B               	rlcf	??_WriteRun,f,c
  9408  001000  360C               	rlcf	??_WriteRun+1,f,c
  9409  001002  90D8               	bcf	status,0,c
  9410  001004  360B               	rlcf	??_WriteRun,f,c
  9411  001006  360C               	rlcf	??_WriteRun+1,f,c
  9412  001008  90D8               	bcf	status,0,c
  9413  00100A  360B               	rlcf	??_WriteRun,f,c
  9414  00100C  360C               	rlcf	??_WriteRun+1,f,c
  9415  00100E  C00B  F001         	movff	??_WriteRun,WriteEE@address
  9416  001012  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  9417  001016  EE20 F002          	lfsr	2,2
  9418  00101A  5007               	movf	WriteRun@sorted,w,c
  9419  00101C  26D9               	addwf	fsr2l,f,c
  9420  00101E  5008               	movf	WriteRun@sorted+1,w,c
  9421  001020  22DA               	addwfc	fsr2h,f,c
  9422  001022  50DF               	movf	indf2,w,c
  9423  001024  6E03               	movwf	WriteEE@data,c
  9424  001026  EC9F  F013         	call	_WriteEE	;wreg free
  9425  00102A  4A0D               	infsnz	WriteRun@add,f,c
  9426  00102C  2A0E               	incf	WriteRun@add+1,f,c
  9427                           
  9428                           ;eeprom.c: 86: WriteEE(add++ *8, sorted[3]);
  9429  00102E  C00D  F00B         	movff	WriteRun@add,??_WriteRun
  9430  001032  C00E  F00C         	movff	WriteRun@add+1,??_WriteRun+1
  9431  001036  90D8               	bcf	status,0,c
  9432  001038  360B               	rlcf	??_WriteRun,f,c
  9433  00103A  360C               	rlcf	??_WriteRun+1,f,c
  9434  00103C  90D8               	bcf	status,0,c
  9435  00103E  360B               	rlcf	??_WriteRun,f,c
  9436  001040  360C               	rlcf	??_WriteRun+1,f,c
  9437  001042  90D8               	bcf	status,0,c
  9438  001044  360B               	rlcf	??_WriteRun,f,c
  9439  001046  360C               	rlcf	??_WriteRun+1,f,c
  9440  001048  C00B  F001         	movff	??_WriteRun,WriteEE@address
  9441  00104C  C00C  F002         	movff	??_WriteRun+1,WriteEE@address+1
  9442  001050  EE20 F003          	lfsr	2,3
  9443  001054  5007               	movf	WriteRun@sorted,w,c
  9444  001056  26D9               	addwf	fsr2l,f,c
  9445  001058  5008               	movf	WriteRun@sorted+1,w,c
  9446  00105A  22DA               	addwfc	fsr2h,f,c
  9447  00105C  50DF               	movf	indf2,w,c
  9448  00105E  6E03               	movwf	WriteEE@data,c
  9449  001060  EC9F  F013         	call	_WriteEE	;wreg free
  9450  001064  4A0D               	infsnz	WriteRun@add,f,c
  9451  001066  2A0E               	incf	WriteRun@add+1,f,c
  9452                           
  9453                           ;eeprom.c: 87: WriteEE(160, Latest);
  9454  001068  0E00               	movlw	0
  9455  00106A  6E02               	movwf	WriteEE@address+1,c
  9456  00106C  0EA0               	movlw	160
  9457  00106E  6E01               	movwf	WriteEE@address,c
  9458  001070  C0DB  F003         	movff	_Latest,WriteEE@data
  9459  001074  EC9F  F013         	call	_WriteEE	;wreg free
  9460  001078  0012               	return		;funcret
  9461  00107A                     __end_of_WriteRun:
  9462                           	opt stack 0
  9463                           pclatu	equ	0xFFB
  9464                           pclath	equ	0xFFA
  9465                           tblptru	equ	0xFF8
  9466                           tblptrh	equ	0xFF7
  9467                           tblptrl	equ	0xFF6
  9468                           tablat	equ	0xFF5
  9469                           prodh	equ	0xFF4
  9470                           prodl	equ	0xFF3
  9471                           intcon	equ	0xFF2
  9472                           intcon3	equ	0xFF0
  9473                           postinc0	equ	0xFEE
  9474                           fsr0h	equ	0xFEA
  9475                           fsr0l	equ	0xFE9
  9476                           wreg	equ	0xFE8
  9477                           plusw1	equ	0xFE3
  9478                           fsr1h	equ	0xFE2
  9479                           fsr1l	equ	0xFE1
  9480                           indf2	equ	0xFDF
  9481                           postinc2	equ	0xFDE
  9482                           postdec2	equ	0xFDD
  9483                           plusw2	equ	0xFDB
  9484                           fsr2h	equ	0xFDA
  9485                           fsr2l	equ	0xFD9
  9486                           status	equ	0xFD8
  9487                           
  9488 ;; *************** function _WriteEE *****************
  9489 ;; Defined at:
  9490 ;;		line 34 in file "eeprom.c"
  9491 ;; Parameters:    Size  Location     Type
  9492 ;;  address         2    0[COMRAM] unsigned int 
  9493 ;;  data            1    2[COMRAM] unsigned char 
  9494 ;; Auto vars:     Size  Location     Type
  9495 ;;		None
  9496 ;; Return value:  Size  Location     Type
  9497 ;;                  1    wreg      void 
  9498 ;; Registers used:
  9499 ;;		wreg, status,2
  9500 ;; Tracked objects:
  9501 ;;		On entry : 0/0
  9502 ;;		On exit  : 0/0
  9503 ;;		Unchanged: 0/0
  9504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9505 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9508 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9509 ;;Total ram usage:        3 bytes
  9510 ;; Hardware stack levels used:    1
  9511 ;; This function calls:
  9512 ;;		Nothing
  9513 ;; This function is called by:
  9514 ;;		_WriteRun
  9515 ;; This function uses a non-reentrant model
  9516 ;;
  9517                           
  9518                           	psect	text53
  9519  00273E                     __ptext53:
  9520                           	opt stack 0
  9521  00273E                     _WriteEE:
  9522                           	opt stack 21
  9523                           
  9524                           ;eeprom.c: 36: EEADRH = (unsigned char) (address >> 8);
  9525                           
  9526                           ;incstack = 0
  9527  00273E  5002               	movf	WriteEE@address+1,w,c
  9528  002740  6EAA               	movwf	4010,c	;volatile
  9529                           
  9530                           ;eeprom.c: 37: EEADR = (unsigned char) address;
  9531  002742  C001  FFA9         	movff	WriteEE@address,4009	;volatile
  9532                           
  9533                           ;eeprom.c: 39: EEDATA = data;
  9534  002746  C003  FFA8         	movff	WriteEE@data,4008	;volatile
  9535                           
  9536                           ;eeprom.c: 40: EECON1bits.EEPGD = 0;
  9537  00274A  9EA6               	bcf	4006,7,c	;volatile
  9538                           
  9539                           ;eeprom.c: 41: EECON1bits.CFGS = 0;
  9540  00274C  9CA6               	bcf	4006,6,c	;volatile
  9541                           
  9542                           ;eeprom.c: 42: EECON1bits.WREN = 1;
  9543  00274E  84A6               	bsf	4006,2,c	;volatile
  9544                           
  9545                           ;eeprom.c: 46: EECON2 = 0x55;
  9546  002750  0E55               	movlw	85
  9547  002752  6EA7               	movwf	4007,c	;volatile
  9548                           
  9549                           ;eeprom.c: 47: EECON2 = 0xAA;
  9550  002754  0EAA               	movlw	170
  9551  002756  6EA7               	movwf	4007,c	;volatile
  9552                           
  9553                           ;eeprom.c: 48: EECON1bits.WR = 1;
  9554  002758  82A6               	bsf	4006,1,c	;volatile
  9555  00275A                     i2l423:
  9556  00275A  A8A1               	btfss	4001,4,c	;volatile
  9557  00275C  D7FE               	goto	i2l423
  9558                           
  9559                           ;eeprom.c: 53: PIR2bits.EEIF = 0;
  9560  00275E  98A1               	bcf	4001,4,c	;volatile
  9561                           
  9562                           ;eeprom.c: 54: EECON1bits.WREN = 0;
  9563  002760  94A6               	bcf	4006,2,c	;volatile
  9564  002762  0012               	return		;funcret
  9565  002764                     __end_of_WriteEE:
  9566                           	opt stack 0
  9567                           pclatu	equ	0xFFB
  9568                           pclath	equ	0xFFA
  9569                           tblptru	equ	0xFF8
  9570                           tblptrh	equ	0xFF7
  9571                           tblptrl	equ	0xFF6
  9572                           tablat	equ	0xFF5
  9573                           prodh	equ	0xFF4
  9574                           prodl	equ	0xFF3
  9575                           intcon	equ	0xFF2
  9576                           intcon3	equ	0xFF0
  9577                           postinc0	equ	0xFEE
  9578                           fsr0h	equ	0xFEA
  9579                           fsr0l	equ	0xFE9
  9580                           wreg	equ	0xFE8
  9581                           plusw1	equ	0xFE3
  9582                           fsr1h	equ	0xFE2
  9583                           fsr1l	equ	0xFE1
  9584                           indf2	equ	0xFDF
  9585                           postinc2	equ	0xFDE
  9586                           postdec2	equ	0xFDD
  9587                           plusw2	equ	0xFDB
  9588                           fsr2h	equ	0xFDA
  9589                           fsr2l	equ	0xFD9
  9590                           status	equ	0xFD8
  9591                           
  9592 ;; *************** function _HexDecToDec2 *****************
  9593 ;; Defined at:
  9594 ;;		line 6 in file "modules.c"
  9595 ;; Parameters:    Size  Location     Type
  9596 ;;  hex             2    6[COMRAM] unsigned int 
  9597 ;; Auto vars:     Size  Location     Type
  9598 ;;  digit           2   13[COMRAM] unsigned int 
  9599 ;;  tenth           2   11[COMRAM] unsigned int 
  9600 ;; Return value:  Size  Location     Type
  9601 ;;                  2    6[COMRAM] unsigned int 
  9602 ;; Registers used:
  9603 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  9604 ;; Tracked objects:
  9605 ;;		On entry : 0/0
  9606 ;;		On exit  : 0/0
  9607 ;;		Unchanged: 0/0
  9608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9609 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9610 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9611 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9612 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9613 ;;Total ram usage:        9 bytes
  9614 ;; Hardware stack levels used:    1
  9615 ;; Hardware stack levels required when called:    1
  9616 ;; This function calls:
  9617 ;;		i2___wmul
  9618 ;; This function is called by:
  9619 ;;		_simulate
  9620 ;; This function uses a non-reentrant model
  9621 ;;
  9622                           
  9623                           	psect	text54
  9624  0023DE                     __ptext54:
  9625                           	opt stack 0
  9626  0023DE                     _HexDecToDec2:
  9627                           	opt stack 21
  9628                           
  9629                           ;modules.c: 8: unsigned tenth = hex / 16;
  9630                           
  9631                           ;incstack = 0
  9632  0023DE  C007  F009         	movff	HexDecToDec2@hex,??_HexDecToDec2
  9633  0023E2  C008  F00A         	movff	HexDecToDec2@hex+1,??_HexDecToDec2+1
  9634  0023E6  0E04               	movlw	4
  9635  0023E8  6E0B               	movwf	(??_HexDecToDec2+2)& (0+255),c
  9636  0023EA                     i2u334_45:
  9637  0023EA  90D8               	bcf	status,0,c
  9638  0023EC  320A               	rrcf	??_HexDecToDec2+1,f,c
  9639  0023EE  3209               	rrcf	??_HexDecToDec2,f,c
  9640  0023F0  2E0B               	decfsz	(??_HexDecToDec2+2)& (0+255),f,c
  9641  0023F2  D7FB               	goto	i2u334_45
  9642  0023F4  C009  F00C         	movff	??_HexDecToDec2,HexDecToDec2@tenth
  9643  0023F8  C00A  F00D         	movff	??_HexDecToDec2+1,HexDecToDec2@tenth+1
  9644                           
  9645                           ;modules.c: 9: unsigned digit = hex % 16;
  9646  0023FC  0E0F               	movlw	15
  9647  0023FE  1407               	andwf	HexDecToDec2@hex,w,c
  9648  002400  6E0E               	movwf	HexDecToDec2@digit,c
  9649  002402  6A0F               	clrf	HexDecToDec2@digit+1,c
  9650                           
  9651                           ;modules.c: 10: return tenth * 10 + digit;
  9652  002404  C00C  F001         	movff	HexDecToDec2@tenth,i2___wmul@multiplier
  9653  002408  C00D  F002         	movff	HexDecToDec2@tenth+1,i2___wmul@multiplier+1
  9654  00240C  0E00               	movlw	0
  9655  00240E  6E04               	movwf	i2___wmul@multiplicand+1,c
  9656  002410  0E0A               	movlw	10
  9657  002412  6E03               	movwf	i2___wmul@multiplicand,c
  9658  002414  ECB2  F013         	call	i2___wmul	;wreg free
  9659  002418  500E               	movf	HexDecToDec2@digit,w,c
  9660  00241A  2401               	addwf	?i2___wmul,w,c
  9661  00241C  6E07               	movwf	?_HexDecToDec2,c
  9662  00241E  500F               	movf	HexDecToDec2@digit+1,w,c
  9663  002420  2002               	addwfc	?i2___wmul+1,w,c
  9664  002422  6E08               	movwf	?_HexDecToDec2+1,c
  9665  002424  0012               	return	
  9666  002426                     __end_of_HexDecToDec2:
  9667                           	opt stack 0
  9668                           pclatu	equ	0xFFB
  9669                           pclath	equ	0xFFA
  9670                           tblptru	equ	0xFF8
  9671                           tblptrh	equ	0xFF7
  9672                           tblptrl	equ	0xFF6
  9673                           tablat	equ	0xFF5
  9674                           prodh	equ	0xFF4
  9675                           prodl	equ	0xFF3
  9676                           intcon	equ	0xFF2
  9677                           intcon3	equ	0xFF0
  9678                           postinc0	equ	0xFEE
  9679                           fsr0h	equ	0xFEA
  9680                           fsr0l	equ	0xFE9
  9681                           wreg	equ	0xFE8
  9682                           plusw1	equ	0xFE3
  9683                           fsr1h	equ	0xFE2
  9684                           fsr1l	equ	0xFE1
  9685                           indf2	equ	0xFDF
  9686                           postinc2	equ	0xFDE
  9687                           postdec2	equ	0xFDD
  9688                           plusw2	equ	0xFDB
  9689                           fsr2h	equ	0xFDA
  9690                           fsr2l	equ	0xFD9
  9691                           status	equ	0xFD8
  9692                           
  9693 ;; *************** function _CW90 *****************
  9694 ;; Defined at:
  9695 ;;		line 19 in file "motors.c"
  9696 ;; Parameters:    Size  Location     Type
  9697 ;;  port            2   21[COMRAM] PTR int 
  9698 ;;		 -> simulate@portCW(6), 
  9699 ;; Auto vars:     Size  Location     Type
  9700 ;;		None
  9701 ;; Return value:  Size  Location     Type
  9702 ;;                  1    wreg      void 
  9703 ;; Registers used:
  9704 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9705 ;; Tracked objects:
  9706 ;;		On entry : 0/0
  9707 ;;		On exit  : 0/0
  9708 ;;		Unchanged: 0/0
  9709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9710 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9712 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9713 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9714 ;;Total ram usage:        8 bytes
  9715 ;; Hardware stack levels used:    1
  9716 ;; Hardware stack levels required when called:    2
  9717 ;; This function calls:
  9718 ;;		_PWMC
  9719 ;; This function is called by:
  9720 ;;		_simulate
  9721 ;; This function uses a non-reentrant model
  9722 ;;
  9723                           
  9724                           	psect	text55
  9725  0020D8                     __ptext55:
  9726                           	opt stack 0
  9727  0020D8                     _CW90:
  9728                           	opt stack 20
  9729                           
  9730                           ;motors.c: 21: if (port[0] + port[1] + port[2] == 0)return;
  9731                           
  9732                           ;incstack = 0
  9733  0020D8  EE20 F004          	lfsr	2,4
  9734  0020DC  5016               	movf	CW90@port,w,c
  9735  0020DE  26D9               	addwf	fsr2l,f,c
  9736  0020E0  5017               	movf	CW90@port+1,w,c
  9737  0020E2  22DA               	addwfc	fsr2h,f,c
  9738  0020E4  CFDE F018          	movff	postinc2,??_CW90
  9739  0020E8  CFDD F019          	movff	postdec2,??_CW90+1
  9740  0020EC  EE20 F002          	lfsr	2,2
  9741  0020F0  5016               	movf	CW90@port,w,c
  9742  0020F2  26D9               	addwf	fsr2l,f,c
  9743  0020F4  5017               	movf	CW90@port+1,w,c
  9744  0020F6  22DA               	addwfc	fsr2h,f,c
  9745  0020F8  CFDE F01A          	movff	postinc2,??_CW90+2
  9746  0020FC  CFDD F01B          	movff	postdec2,??_CW90+3
  9747  002100  C016  FFD9         	movff	CW90@port,fsr2l
  9748  002104  C017  FFDA         	movff	CW90@port+1,fsr2h
  9749  002108  CFDE F01C          	movff	postinc2,??_CW90+4
  9750  00210C  CFDD F01D          	movff	postdec2,??_CW90+5
  9751  002110  501A               	movf	??_CW90+2,w,c
  9752  002112  261C               	addwf	??_CW90+4,f,c
  9753  002114  501B               	movf	??_CW90+3,w,c
  9754  002116  221D               	addwfc	??_CW90+5,f,c
  9755  002118  5018               	movf	??_CW90,w,c
  9756  00211A  261C               	addwf	??_CW90+4,f,c
  9757  00211C  5019               	movf	??_CW90+1,w,c
  9758  00211E  221D               	addwfc	??_CW90+5,f,c
  9759  002120  501C               	movf	??_CW90+4,w,c
  9760  002122  101D               	iorwf	??_CW90+5,w,c
  9761  002124  B4D8               	btfsc	status,2,c
  9762  002126  0012               	return	
  9763                           
  9764                           ;motors.c: 22: PWMC(3000, 96, port);
  9765  002128  0E0B               	movlw	11
  9766  00212A  6E0A               	movwf	PWMC@widthus+1,c
  9767  00212C  0EB8               	movlw	184
  9768  00212E  6E09               	movwf	PWMC@widthus,c
  9769  002130  0E00               	movlw	0
  9770  002132  6E0C               	movwf	PWMC@cycles+1,c
  9771  002134  0E60               	movlw	96
  9772  002136  6E0B               	movwf	PWMC@cycles,c
  9773  002138  C016  F00D         	movff	CW90@port,PWMC@port
  9774  00213C  C017  F00E         	movff	CW90@port+1,PWMC@port+1
  9775  002140  EC85  F00A         	call	_PWMC	;wreg free
  9776  002144  0012               	return		;funcret
  9777  002146                     __end_of_CW90:
  9778                           	opt stack 0
  9779                           pclatu	equ	0xFFB
  9780                           pclath	equ	0xFFA
  9781                           tblptru	equ	0xFF8
  9782                           tblptrh	equ	0xFF7
  9783                           tblptrl	equ	0xFF6
  9784                           tablat	equ	0xFF5
  9785                           prodh	equ	0xFF4
  9786                           prodl	equ	0xFF3
  9787                           intcon	equ	0xFF2
  9788                           intcon3	equ	0xFF0
  9789                           postinc0	equ	0xFEE
  9790                           fsr0h	equ	0xFEA
  9791                           fsr0l	equ	0xFE9
  9792                           wreg	equ	0xFE8
  9793                           plusw1	equ	0xFE3
  9794                           fsr1h	equ	0xFE2
  9795                           fsr1l	equ	0xFE1
  9796                           indf2	equ	0xFDF
  9797                           postinc2	equ	0xFDE
  9798                           postdec2	equ	0xFDD
  9799                           plusw2	equ	0xFDB
  9800                           fsr2h	equ	0xFDA
  9801                           fsr2l	equ	0xFD9
  9802                           status	equ	0xFD8
  9803                           
  9804 ;; *************** function _CCW90 *****************
  9805 ;; Defined at:
  9806 ;;		line 25 in file "motors.c"
  9807 ;; Parameters:    Size  Location     Type
  9808 ;;  port            2   21[COMRAM] PTR int 
  9809 ;;		 -> simulate@portCCW(6), 
  9810 ;; Auto vars:     Size  Location     Type
  9811 ;;		None
  9812 ;; Return value:  Size  Location     Type
  9813 ;;                  1    wreg      void 
  9814 ;; Registers used:
  9815 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9816 ;; Tracked objects:
  9817 ;;		On entry : 0/0
  9818 ;;		On exit  : 0/0
  9819 ;;		Unchanged: 0/0
  9820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9821 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9823 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9824 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9825 ;;Total ram usage:        8 bytes
  9826 ;; Hardware stack levels used:    1
  9827 ;; Hardware stack levels required when called:    2
  9828 ;; This function calls:
  9829 ;;		_PWMC
  9830 ;; This function is called by:
  9831 ;;		_simulate
  9832 ;; This function uses a non-reentrant model
  9833 ;;
  9834                           
  9835                           	psect	text56
  9836  002146                     __ptext56:
  9837                           	opt stack 0
  9838  002146                     _CCW90:
  9839                           	opt stack 20
  9840                           
  9841                           ;motors.c: 27: if (port[0] + port[1] + port[2] == 0)return;
  9842                           
  9843                           ;incstack = 0
  9844  002146  EE20 F004          	lfsr	2,4
  9845  00214A  5016               	movf	CCW90@port,w,c
  9846  00214C  26D9               	addwf	fsr2l,f,c
  9847  00214E  5017               	movf	CCW90@port+1,w,c
  9848  002150  22DA               	addwfc	fsr2h,f,c
  9849  002152  CFDE F018          	movff	postinc2,??_CCW90
  9850  002156  CFDD F019          	movff	postdec2,??_CCW90+1
  9851  00215A  EE20 F002          	lfsr	2,2
  9852  00215E  5016               	movf	CCW90@port,w,c
  9853  002160  26D9               	addwf	fsr2l,f,c
  9854  002162  5017               	movf	CCW90@port+1,w,c
  9855  002164  22DA               	addwfc	fsr2h,f,c
  9856  002166  CFDE F01A          	movff	postinc2,??_CCW90+2
  9857  00216A  CFDD F01B          	movff	postdec2,??_CCW90+3
  9858  00216E  C016  FFD9         	movff	CCW90@port,fsr2l
  9859  002172  C017  FFDA         	movff	CCW90@port+1,fsr2h
  9860  002176  CFDE F01C          	movff	postinc2,??_CCW90+4
  9861  00217A  CFDD F01D          	movff	postdec2,??_CCW90+5
  9862  00217E  501A               	movf	??_CCW90+2,w,c
  9863  002180  261C               	addwf	??_CCW90+4,f,c
  9864  002182  501B               	movf	??_CCW90+3,w,c
  9865  002184  221D               	addwfc	??_CCW90+5,f,c
  9866  002186  5018               	movf	??_CCW90,w,c
  9867  002188  261C               	addwf	??_CCW90+4,f,c
  9868  00218A  5019               	movf	??_CCW90+1,w,c
  9869  00218C  221D               	addwfc	??_CCW90+5,f,c
  9870  00218E  501C               	movf	??_CCW90+4,w,c
  9871  002190  101D               	iorwf	??_CCW90+5,w,c
  9872  002192  B4D8               	btfsc	status,2,c
  9873  002194  0012               	return	
  9874                           
  9875                           ;motors.c: 28: PWMC(300, 1400, port);
  9876  002196  0E01               	movlw	1
  9877  002198  6E0A               	movwf	PWMC@widthus+1,c
  9878  00219A  0E2C               	movlw	44
  9879  00219C  6E09               	movwf	PWMC@widthus,c
  9880  00219E  0E05               	movlw	5
  9881  0021A0  6E0C               	movwf	PWMC@cycles+1,c
  9882  0021A2  0E78               	movlw	120
  9883  0021A4  6E0B               	movwf	PWMC@cycles,c
  9884  0021A6  C016  F00D         	movff	CCW90@port,PWMC@port
  9885  0021AA  C017  F00E         	movff	CCW90@port+1,PWMC@port+1
  9886  0021AE  EC85  F00A         	call	_PWMC	;wreg free
  9887  0021B2  0012               	return		;funcret
  9888  0021B4                     __end_of_CCW90:
  9889                           	opt stack 0
  9890                           pclatu	equ	0xFFB
  9891                           pclath	equ	0xFFA
  9892                           tblptru	equ	0xFF8
  9893                           tblptrh	equ	0xFF7
  9894                           tblptrl	equ	0xFF6
  9895                           tablat	equ	0xFF5
  9896                           prodh	equ	0xFF4
  9897                           prodl	equ	0xFF3
  9898                           intcon	equ	0xFF2
  9899                           intcon3	equ	0xFF0
  9900                           postinc0	equ	0xFEE
  9901                           fsr0h	equ	0xFEA
  9902                           fsr0l	equ	0xFE9
  9903                           wreg	equ	0xFE8
  9904                           plusw1	equ	0xFE3
  9905                           fsr1h	equ	0xFE2
  9906                           fsr1l	equ	0xFE1
  9907                           indf2	equ	0xFDF
  9908                           postinc2	equ	0xFDE
  9909                           postdec2	equ	0xFDD
  9910                           plusw2	equ	0xFDB
  9911                           fsr2h	equ	0xFDA
  9912                           fsr2l	equ	0xFD9
  9913                           status	equ	0xFD8
  9914                           
  9915 ;; *************** function _PWMC *****************
  9916 ;; Defined at:
  9917 ;;		line 4 in file "motors.c"
  9918 ;; Parameters:    Size  Location     Type
  9919 ;;  widthus         2    8[COMRAM] int 
  9920 ;;  cycles          2   10[COMRAM] int 
  9921 ;;  port            2   12[COMRAM] PTR int 
  9922 ;;		 -> intrpt@portCW(6), simulate@portCCW(6), simulate@portCW(6), 
  9923 ;; Auto vars:     Size  Location     Type
  9924 ;;  countdown       2   19[COMRAM] int 
  9925 ;; Return value:  Size  Location     Type
  9926 ;;                  1    wreg      void 
  9927 ;; Registers used:
  9928 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9929 ;; Tracked objects:
  9930 ;;		On entry : 0/0
  9931 ;;		On exit  : 0/0
  9932 ;;		Unchanged: 0/0
  9933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9934 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9935 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9936 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9937 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9938 ;;Total ram usage:       13 bytes
  9939 ;; Hardware stack levels used:    1
  9940 ;; Hardware stack levels required when called:    1
  9941 ;; This function calls:
  9942 ;;		___awdiv
  9943 ;; This function is called by:
  9944 ;;		_intrpt
  9945 ;;		_CW90
  9946 ;;		_CCW90
  9947 ;; This function uses a non-reentrant model
  9948 ;;
  9949                           
  9950                           	psect	text57
  9951  00150A                     __ptext57:
  9952                           	opt stack 0
  9953  00150A                     _PWMC:
  9954                           	opt stack 20
  9955                           
  9956                           ;motors.c: 5: widthus /= 10;
  9957                           
  9958                           ;incstack = 0
  9959  00150A  C009  F001         	movff	PWMC@widthus,___awdiv@dividend
  9960  00150E  C00A  F002         	movff	PWMC@widthus+1,___awdiv@dividend+1
  9961  001512  0E00               	movlw	0
  9962  001514  6E04               	movwf	___awdiv@divisor+1,c
  9963  001516  0E0A               	movlw	10
  9964  001518  6E03               	movwf	___awdiv@divisor,c
  9965  00151A  ECC5  F00E         	call	___awdiv	;wreg free
  9966  00151E  C001  F009         	movff	?___awdiv,PWMC@widthus
  9967  001522  C002  F00A         	movff	?___awdiv+1,PWMC@widthus+1
  9968                           
  9969                           ;motors.c: 6: widthus -= 1;
  9970  001526  0609               	decf	PWMC@widthus,f,c
  9971  001528  A0D8               	btfss	status,0,c
  9972  00152A  060A               	decf	PWMC@widthus+1,f,c
  9973                           
  9974                           ;motors.c: 7: int countdown = widthus;
  9975  00152C  C009  F014         	movff	PWMC@widthus,PWMC@countdown
  9976  001530  C00A  F015         	movff	PWMC@widthus+1,PWMC@countdown+1
  9977  001534                     i2l3811:
  9978  001534  BE0C               	btfsc	PWMC@cycles+1,7,c
  9979  001536  0012               	return	
  9980  001538  500C               	movf	PWMC@cycles+1,w,c
  9981  00153A  E103               	bnz	i2l267
  9982  00153C  040B               	decf	PWMC@cycles,w,c
  9983  00153E  A0D8               	btfss	status,0,c
  9984  001540  0012               	return	
  9985  001542                     i2l267:
  9986                           
  9987                           ;motors.c: 9: countdown = widthus;
  9988  001542  C009  F014         	movff	PWMC@widthus,PWMC@countdown
  9989  001546  C00A  F015         	movff	PWMC@widthus+1,PWMC@countdown+1
  9990                           
  9991                           ;motors.c: 10: LATC0 = (1 ^ LATC0) & port[0];
  9992  00154A  0E00               	movlw	0
  9993  00154C  6E11               	movwf	_PWMC$1391,c
  9994  00154E  B08B               	btfsc	3979,0,c	;volatile
  9995  001550  D00D               	goto	i2l3823
  9996  001552  C00D  FFD9         	movff	PWMC@port,fsr2l
  9997  001556  C00E  FFDA         	movff	PWMC@port+1,fsr2h
  9998  00155A  CFDE F00F          	movff	postinc2,??_PWMC
  9999  00155E  CFDD F010          	movff	postdec2,??_PWMC+1
 10000  001562  300F               	rrcf	??_PWMC,w,c
 10001  001564  A0D8               	btfss	status,0,c
 10002  001566  D002               	goto	i2l3823
 10003  001568  0E01               	movlw	1
 10004  00156A  6E11               	movwf	_PWMC$1391,c
 10005  00156C                     i2l3823:
 10006  00156C  B011               	btfsc	_PWMC$1391,0,c
 10007  00156E  D002               	bra	i2u301_45
 10008  001570  908B               	bcf	3979,0,c	;volatile
 10009  001572  D001               	bra	i2u301_46
 10010  001574                     i2u301_45:
 10011  001574  808B               	bsf	3979,0,c	;volatile
 10012  001576                     i2u301_46:
 10013                           
 10014                           ;motors.c: 11: LATC1 = (1 ^ LATC1) & port[1];
 10015  001576  0E00               	movlw	0
 10016  001578  6E12               	movwf	_PWMC$1392,c
 10017  00157A  B28B               	btfsc	3979,1,c	;volatile
 10018  00157C  D00F               	goto	i2l3831
 10019  00157E  EE20 F002          	lfsr	2,2
 10020  001582  500D               	movf	PWMC@port,w,c
 10021  001584  26D9               	addwf	fsr2l,f,c
 10022  001586  500E               	movf	PWMC@port+1,w,c
 10023  001588  22DA               	addwfc	fsr2h,f,c
 10024  00158A  CFDE F00F          	movff	postinc2,??_PWMC
 10025  00158E  CFDD F010          	movff	postdec2,??_PWMC+1
 10026  001592  300F               	rrcf	??_PWMC,w,c
 10027  001594  A0D8               	btfss	status,0,c
 10028  001596  D002               	goto	i2l3831
 10029  001598  0E01               	movlw	1
 10030  00159A  6E12               	movwf	_PWMC$1392,c
 10031  00159C                     i2l3831:
 10032  00159C  B012               	btfsc	_PWMC$1392,0,c
 10033  00159E  D002               	bra	i2u304_45
 10034  0015A0  928B               	bcf	3979,1,c	;volatile
 10035  0015A2  D001               	bra	i2u304_46
 10036  0015A4                     i2u304_45:
 10037  0015A4  828B               	bsf	3979,1,c	;volatile
 10038  0015A6                     i2u304_46:
 10039                           
 10040                           ;motors.c: 12: LATC2 = (1 ^ LATC2) & port[2];
 10041  0015A6  0E00               	movlw	0
 10042  0015A8  6E13               	movwf	_PWMC$1393,c
 10043  0015AA  B48B               	btfsc	3979,2,c	;volatile
 10044  0015AC  D00F               	goto	i2l3839
 10045  0015AE  EE20 F004          	lfsr	2,4
 10046  0015B2  500D               	movf	PWMC@port,w,c
 10047  0015B4  26D9               	addwf	fsr2l,f,c
 10048  0015B6  500E               	movf	PWMC@port+1,w,c
 10049  0015B8  22DA               	addwfc	fsr2h,f,c
 10050  0015BA  CFDE F00F          	movff	postinc2,??_PWMC
 10051  0015BE  CFDD F010          	movff	postdec2,??_PWMC+1
 10052  0015C2  300F               	rrcf	??_PWMC,w,c
 10053  0015C4  A0D8               	btfss	status,0,c
 10054  0015C6  D002               	goto	i2l3839
 10055  0015C8  0E01               	movlw	1
 10056  0015CA  6E13               	movwf	_PWMC$1393,c
 10057  0015CC                     i2l3839:
 10058  0015CC  B013               	btfsc	_PWMC$1393,0,c
 10059  0015CE  D002               	bra	i2u307_45
 10060  0015D0  948B               	bcf	3979,2,c	;volatile
 10061  0015D2  D001               	bra	i2u307_46
 10062  0015D4                     i2u307_45:
 10063  0015D4  848B               	bsf	3979,2,c	;volatile
 10064  0015D6                     i2u307_46:
 10065  0015D6                     i2l3841:
 10066  0015D6  BE15               	btfsc	PWMC@countdown+1,7,c
 10067  0015D8  D00D               	goto	i2l3849
 10068  0015DA  5015               	movf	PWMC@countdown+1,w,c
 10069  0015DC  E103               	bnz	i2l3845
 10070  0015DE  0414               	decf	PWMC@countdown,w,c
 10071  0015E0  A0D8               	btfss	status,0,c
 10072  0015E2  D008               	goto	i2l3849
 10073  0015E4                     i2l3845:
 10074                           
 10075                           ;motors.c: 14: _delay((unsigned long)((5)*(8000000/4000000.0)));
 10076  0015E4  0E03               	movlw	3
 10077  0015E6                     i2u369_47:
 10078  0015E6  2EE8               	decfsz	wreg,f,c
 10079  0015E8  D7FE               	bra	i2u369_47
 10080  0015EA  F000               	nop	
 10081  0015EC  0614               	decf	PWMC@countdown,f,c
 10082  0015EE  A0D8               	btfss	status,0,c
 10083  0015F0  0615               	decf	PWMC@countdown+1,f,c
 10084  0015F2  D7F1               	goto	i2l3841
 10085  0015F4                     i2l3849:
 10086  0015F4  060B               	decf	PWMC@cycles,f,c
 10087  0015F6  A0D8               	btfss	status,0,c
 10088  0015F8  060C               	decf	PWMC@cycles+1,f,c
 10089  0015FA  D79C               	goto	i2l3811
 10090  0015FC                     __end_of_PWMC:
 10091                           	opt stack 0
 10092                           pclatu	equ	0xFFB
 10093                           pclath	equ	0xFFA
 10094                           tblptru	equ	0xFF8
 10095                           tblptrh	equ	0xFF7
 10096                           tblptrl	equ	0xFF6
 10097                           tablat	equ	0xFF5
 10098                           prodh	equ	0xFF4
 10099                           prodl	equ	0xFF3
 10100                           intcon	equ	0xFF2
 10101                           intcon3	equ	0xFF0
 10102                           postinc0	equ	0xFEE
 10103                           fsr0h	equ	0xFEA
 10104                           fsr0l	equ	0xFE9
 10105                           wreg	equ	0xFE8
 10106                           plusw1	equ	0xFE3
 10107                           fsr1h	equ	0xFE2
 10108                           fsr1l	equ	0xFE1
 10109                           indf2	equ	0xFDF
 10110                           postinc2	equ	0xFDE
 10111                           postdec2	equ	0xFDD
 10112                           plusw2	equ	0xFDB
 10113                           fsr2h	equ	0xFDA
 10114                           fsr2l	equ	0xFD9
 10115                           status	equ	0xFD8
 10116                           
 10117 ;; *************** function ___awdiv *****************
 10118 ;; Defined at:
 10119 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
 10120 ;; Parameters:    Size  Location     Type
 10121 ;;  dividend        2    0[COMRAM] int 
 10122 ;;  divisor         2    2[COMRAM] int 
 10123 ;; Auto vars:     Size  Location     Type
 10124 ;;  quotient        2    6[COMRAM] int 
 10125 ;;  sign            1    5[COMRAM] unsigned char 
 10126 ;;  counter         1    4[COMRAM] unsigned char 
 10127 ;; Return value:  Size  Location     Type
 10128 ;;                  2    0[COMRAM] int 
 10129 ;; Registers used:
 10130 ;;		wreg, status,2, status,0
 10131 ;; Tracked objects:
 10132 ;;		On entry : 0/0
 10133 ;;		On exit  : 0/0
 10134 ;;		Unchanged: 0/0
 10135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10136 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10137 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10139 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10140 ;;Total ram usage:        8 bytes
 10141 ;; Hardware stack levels used:    1
 10142 ;; This function calls:
 10143 ;;		Nothing
 10144 ;; This function is called by:
 10145 ;;		_PWMC
 10146 ;; This function uses a non-reentrant model
 10147 ;;
 10148                           
 10149                           	psect	text58
 10150  001D8A                     __ptext58:
 10151                           	opt stack 0
 10152  001D8A                     ___awdiv:
 10153                           	opt stack 20
 10154                           
 10155                           ;incstack = 0
 10156  001D8A  0E00               	movlw	0
 10157  001D8C  6E06               	movwf	___awdiv@sign,c
 10158  001D8E  AE04               	btfss	___awdiv@divisor+1,7,c
 10159  001D90  D006               	goto	i2l3485
 10160  001D92  6C03               	negf	___awdiv@divisor,c
 10161  001D94  1E04               	comf	___awdiv@divisor+1,f,c
 10162  001D96  B0D8               	btfsc	status,0,c
 10163  001D98  2A04               	incf	___awdiv@divisor+1,f,c
 10164  001D9A  0E01               	movlw	1
 10165  001D9C  6E06               	movwf	___awdiv@sign,c
 10166  001D9E                     i2l3485:
 10167  001D9E  AE02               	btfss	___awdiv@dividend+1,7,c
 10168  001DA0  D006               	goto	i2l3491
 10169  001DA2  6C01               	negf	___awdiv@dividend,c
 10170  001DA4  1E02               	comf	___awdiv@dividend+1,f,c
 10171  001DA6  B0D8               	btfsc	status,0,c
 10172  001DA8  2A02               	incf	___awdiv@dividend+1,f,c
 10173  001DAA  0E01               	movlw	1
 10174  001DAC  1A06               	xorwf	___awdiv@sign,f,c
 10175  001DAE                     i2l3491:
 10176  001DAE  0E00               	movlw	0
 10177  001DB0  6E08               	movwf	___awdiv@quotient+1,c
 10178  001DB2  0E00               	movlw	0
 10179  001DB4  6E07               	movwf	___awdiv@quotient,c
 10180  001DB6  5003               	movf	___awdiv@divisor,w,c
 10181  001DB8  1004               	iorwf	___awdiv@divisor+1,w,c
 10182  001DBA  B4D8               	btfsc	status,2,c
 10183  001DBC  D01C               	goto	i2l3513
 10184  001DBE  0E01               	movlw	1
 10185  001DC0  6E05               	movwf	___awdiv@counter,c
 10186  001DC2  D004               	goto	i2l3499
 10187  001DC4                     i2l3497:
 10188  001DC4  90D8               	bcf	status,0,c
 10189  001DC6  3603               	rlcf	___awdiv@divisor,f,c
 10190  001DC8  3604               	rlcf	___awdiv@divisor+1,f,c
 10191  001DCA  2A05               	incf	___awdiv@counter,f,c
 10192  001DCC                     i2l3499:
 10193  001DCC  AE04               	btfss	___awdiv@divisor+1,7,c
 10194  001DCE  D7FA               	goto	i2l3497
 10195  001DD0                     i2l3501:
 10196  001DD0  90D8               	bcf	status,0,c
 10197  001DD2  3607               	rlcf	___awdiv@quotient,f,c
 10198  001DD4  3608               	rlcf	___awdiv@quotient+1,f,c
 10199  001DD6  5003               	movf	___awdiv@divisor,w,c
 10200  001DD8  5C01               	subwf	___awdiv@dividend,w,c
 10201  001DDA  5004               	movf	___awdiv@divisor+1,w,c
 10202  001DDC  5802               	subwfb	___awdiv@dividend+1,w,c
 10203  001DDE  A0D8               	btfss	status,0,c
 10204  001DE0  D005               	goto	i2l3509
 10205  001DE2  5003               	movf	___awdiv@divisor,w,c
 10206  001DE4  5E01               	subwf	___awdiv@dividend,f,c
 10207  001DE6  5004               	movf	___awdiv@divisor+1,w,c
 10208  001DE8  5A02               	subwfb	___awdiv@dividend+1,f,c
 10209  001DEA  8007               	bsf	___awdiv@quotient,0,c
 10210  001DEC                     i2l3509:
 10211  001DEC  90D8               	bcf	status,0,c
 10212  001DEE  3204               	rrcf	___awdiv@divisor+1,f,c
 10213  001DF0  3203               	rrcf	___awdiv@divisor,f,c
 10214  001DF2  2E05               	decfsz	___awdiv@counter,f,c
 10215  001DF4  D7ED               	goto	i2l3501
 10216  001DF6                     i2l3513:
 10217  001DF6  5006               	movf	___awdiv@sign,w,c
 10218  001DF8  B4D8               	btfsc	status,2,c
 10219  001DFA  D004               	goto	i2l3517
 10220  001DFC  6C07               	negf	___awdiv@quotient,c
 10221  001DFE  1E08               	comf	___awdiv@quotient+1,f,c
 10222  001E00  B0D8               	btfsc	status,0,c
 10223  001E02  2A08               	incf	___awdiv@quotient+1,f,c
 10224  001E04                     i2l3517:
 10225  001E04  C007  F001         	movff	___awdiv@quotient,?___awdiv
 10226  001E08  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
 10227  001E0C  0012               	return	
 10228  001E0E                     __end_of___awdiv:
 10229                           	opt stack 0
 10230                           pclatu	equ	0xFFB
 10231                           pclath	equ	0xFFA
 10232                           tblptru	equ	0xFF8
 10233                           tblptrh	equ	0xFF7
 10234                           tblptrl	equ	0xFF6
 10235                           tablat	equ	0xFF5
 10236                           prodh	equ	0xFF4
 10237                           prodl	equ	0xFF3
 10238                           intcon	equ	0xFF2
 10239                           intcon3	equ	0xFF0
 10240                           postinc0	equ	0xFEE
 10241                           fsr0h	equ	0xFEA
 10242                           fsr0l	equ	0xFE9
 10243                           wreg	equ	0xFE8
 10244                           plusw1	equ	0xFE3
 10245                           fsr1h	equ	0xFE2
 10246                           fsr1l	equ	0xFE1
 10247                           indf2	equ	0xFDF
 10248                           postinc2	equ	0xFDE
 10249                           postdec2	equ	0xFDD
 10250                           plusw2	equ	0xFDB
 10251                           fsr2h	equ	0xFDA
 10252                           fsr2l	equ	0xFD9
 10253                           status	equ	0xFD8
 10254                           
 10255 ;; *************** function _PermLog *****************
 10256 ;; Defined at:
 10257 ;;		line 90 in file "eeprom.c"
 10258 ;; Parameters:    Size  Location     Type
 10259 ;;		None
 10260 ;; Auto vars:     Size  Location     Type
 10261 ;;  sorted          4   49[COMRAM] unsigned char [4]
 10262 ;;  time            2   54[COMRAM] unsigned int 
 10263 ;;  backruns        1   56[COMRAM] unsigned char 
 10264 ;;  goback          1   53[COMRAM] unsigned char 
 10265 ;; Return value:  Size  Location     Type
 10266 ;;                  1    wreg      void 
 10267 ;; Registers used:
 10268 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10269 ;; Tracked objects:
 10270 ;;		On entry : 0/0
 10271 ;;		On exit  : 0/0
 10272 ;;		Unchanged: 0/0
 10273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10275 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10276 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10277 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10278 ;;Total ram usage:       10 bytes
 10279 ;; Hardware stack levels used:    1
 10280 ;; Hardware stack levels required when called:    4
 10281 ;; This function calls:
 10282 ;;		_ReadRun
 10283 ;;		_captureKeypad
 10284 ;;		_showInfo
 10285 ;;		i2_lcdInst
 10286 ;;		i2_printf
 10287 ;; This function is called by:
 10288 ;;		_intrpt
 10289 ;; This function uses a non-reentrant model
 10290 ;;
 10291                           
 10292                           	psect	text59
 10293  0015FC                     __ptext59:
 10294                           	opt stack 0
 10295  0015FC                     _PermLog:
 10296                           	opt stack 19
 10297                           
 10298                           ;eeprom.c: 91: unsigned char goback = 0;
 10299                           
 10300                           ;incstack = 0
 10301  0015FC  0E00               	movlw	0
 10302  0015FE  D065               	goto	L2
 10303  001600                     i2l4511:
 10304                           
 10305                           ;eeprom.c: 93: lcdInst(0b10000000);
 10306  001600  0E80               	movlw	128
 10307  001602  EC42  F014         	call	i2_lcdInst
 10308                           
 10309                           ;eeprom.c: 94: printf("Permanent log:       ");
 10310  001606  0EB8               	movlw	low STR_42
 10311  001608  6E0D               	movwf	i2printf@f,c
 10312  00160A  0EFE               	movlw	high STR_42
 10313  00160C  6E0E               	movwf	i2printf@f+1,c
 10314  00160E  EC3E  F002         	call	i2_printf	;wreg free
 10315                           
 10316                           ;eeprom.c: 95: lcdInst(0b11000000);
 10317  001612  0EC0               	movlw	192
 10318  001614  EC42  F014         	call	i2_lcdInst
 10319                           
 10320                           ;eeprom.c: 96: printf("Which run?       ");
 10321  001618  0E5D               	movlw	low STR_43
 10322  00161A  6E0D               	movwf	i2printf@f,c
 10323  00161C  0EFF               	movlw	high STR_43
 10324  00161E  6E0E               	movwf	i2printf@f+1,c
 10325  001620  EC3E  F002         	call	i2_printf	;wreg free
 10326                           
 10327                           ;eeprom.c: 97: unsigned char backruns = captureKeypad();
 10328  001624  ECE5  F013         	call	_captureKeypad	;wreg free
 10329  001628  5001               	movf	?_captureKeypad,w,c
 10330  00162A  6E39               	movwf	PermLog@backruns,c
 10331                           
 10332                           ;eeprom.c: 98: if (backruns == 3)backruns = 2;
 10333  00162C  0E03               	movlw	3
 10334  00162E  1839               	xorwf	PermLog@backruns,w,c
 10335  001630  A4D8               	btfss	status,2,c
 10336  001632  D002               	goto	i2l4523
 10337  001634  0E02               	movlw	2
 10338  001636  6E39               	movwf	PermLog@backruns,c
 10339  001638                     i2l4523:
 10340                           
 10341                           ;eeprom.c: 99: if (backruns == 4)backruns = 3;
 10342  001638  0E04               	movlw	4
 10343  00163A  1839               	xorwf	PermLog@backruns,w,c
 10344  00163C  A4D8               	btfss	status,2,c
 10345  00163E  D002               	goto	i2l4527
 10346  001640  0E03               	movlw	3
 10347  001642  6E39               	movwf	PermLog@backruns,c
 10348  001644                     i2l4527:
 10349                           
 10350                           ;eeprom.c: 100: if (backruns < 4) {
 10351  001644  0E04               	movlw	4
 10352  001646  6039               	cpfslt	PermLog@backruns,c
 10353  001648  D03F               	goto	i2l4545
 10354                           
 10355                           ;eeprom.c: 101: unsigned int time;
 10356                           ;eeprom.c: 102: unsigned char sorted[] = {0, 0, 0, 0};
 10357  00164A  C0CF  F032         	movff	PermLog@F3082,PermLog@sorted
 10358  00164E  C0D0  F033         	movff	PermLog@F3082+1,PermLog@sorted+1
 10359  001652  C0D1  F034         	movff	PermLog@F3082+2,PermLog@sorted+2
 10360  001656  C0D2  F035         	movff	PermLog@F3082+3,PermLog@sorted+3
 10361                           
 10362                           ;eeprom.c: 103: ReadRun(backruns, sorted, &time);
 10363  00165A  0E32               	movlw	low PermLog@sorted
 10364  00165C  6E03               	movwf	ReadRun@sorted,c
 10365  00165E  0E00               	movlw	high PermLog@sorted
 10366  001660  6E04               	movwf	ReadRun@sorted+1,c
 10367  001662  0E37               	movlw	low PermLog@time
 10368  001664  6E05               	movwf	ReadRun@time,c
 10369  001666  0E00               	movlw	high PermLog@time
 10370  001668  6E06               	movwf	ReadRun@time+1,c
 10371  00166A  5039               	movf	PermLog@backruns,w,c
 10372  00166C  ECEC  F008         	call	_ReadRun
 10373                           
 10374                           ;eeprom.c: 104: lcdInst(0b10000000);
 10375  001670  0E80               	movlw	128
 10376  001672  EC42  F014         	call	i2_lcdInst
 10377                           
 10378                           ;eeprom.c: 105: printf("showing %u      ", backruns);
 10379  001676  0EA4               	movlw	low STR_44
 10380  001678  6E0D               	movwf	i2printf@f,c
 10381  00167A  0EFF               	movlw	high STR_44
 10382  00167C  6E0E               	movwf	i2printf@f+1,c
 10383  00167E  C039  F00F         	movff	PermLog@backruns,?i2_printf+2
 10384  001682  6A10               	clrf	?i2_printf+3,c
 10385  001684  EC3E  F002         	call	i2_printf	;wreg free
 10386                           
 10387                           ;eeprom.c: 106: lcdInst(0b11000000);
 10388  001688  0EC0               	movlw	192
 10389  00168A  EC42  F014         	call	i2_lcdInst
 10390                           
 10391                           ;eeprom.c: 107: printf("runs before     ");
 10392  00168E  0EB5               	movlw	low STR_45
 10393  001690  6E0D               	movwf	i2printf@f,c
 10394  001692  0EFF               	movlw	high STR_45
 10395  001694  6E0E               	movwf	i2printf@f+1,c
 10396  001696  EC3E  F002         	call	i2_printf	;wreg free
 10397                           
 10398                           ;eeprom.c: 108: _delay((unsigned long)((700)*(8000000/4000.0)));
 10399  00169A  0E08               	movlw	8
 10400  00169C  6E31               	movwf	(??_PermLog+1)& (0+255),c
 10401  00169E  0E1B               	movlw	27
 10402  0016A0  6E30               	movwf	??_PermLog& (0+255),c
 10403  0016A2  0E27               	movlw	39
 10404  0016A4                     i2u370_47:
 10405  0016A4  2EE8               	decfsz	wreg,f,c
 10406  0016A6  D7FE               	bra	i2u370_47
 10407  0016A8  2E30               	decfsz	??_PermLog& (0+255),f,c
 10408  0016AA  D7FC               	bra	i2u370_47
 10409  0016AC  2E31               	decfsz	(??_PermLog+1)& (0+255),f,c
 10410  0016AE  D7FA               	bra	i2u370_47
 10411  0016B0  F000               	nop	
 10412                           
 10413                           ;eeprom.c: 109: showInfo(time, sorted);
 10414  0016B2  C037  F023         	movff	PermLog@time,showInfo@time
 10415  0016B6  C038  F024         	movff	PermLog@time+1,showInfo@time+1
 10416  0016BA  0E32               	movlw	low PermLog@sorted
 10417  0016BC  6E25               	movwf	showInfo@sorted,c
 10418  0016BE  0E00               	movlw	high PermLog@sorted
 10419  0016C0  6E26               	movwf	showInfo@sorted+1,c
 10420  0016C2  ECA1  F005         	call	_showInfo	;wreg free
 10421                           
 10422                           ;eeprom.c: 110: } else goback = 1;
 10423  0016C6  D002               	goto	i2l440
 10424  0016C8                     i2l4545:
 10425  0016C8  0E01               	movlw	1
 10426  0016CA                     L2:
 10427  0016CA  6E36               	movwf	PermLog@goback,c
 10428  0016CC                     i2l440:
 10429  0016CC  5036               	movf	PermLog@goback,w,c
 10430  0016CE  A4D8               	btfss	status,2,c
 10431  0016D0  0012               	return	
 10432  0016D2  D796               	goto	i2l4511
 10433  0016D4                     __end_of_PermLog:
 10434                           	opt stack 0
 10435                           pclatu	equ	0xFFB
 10436                           pclath	equ	0xFFA
 10437                           tblptru	equ	0xFF8
 10438                           tblptrh	equ	0xFF7
 10439                           tblptrl	equ	0xFF6
 10440                           tablat	equ	0xFF5
 10441                           prodh	equ	0xFF4
 10442                           prodl	equ	0xFF3
 10443                           intcon	equ	0xFF2
 10444                           intcon3	equ	0xFF0
 10445                           postinc0	equ	0xFEE
 10446                           fsr0h	equ	0xFEA
 10447                           fsr0l	equ	0xFE9
 10448                           wreg	equ	0xFE8
 10449                           plusw1	equ	0xFE3
 10450                           fsr1h	equ	0xFE2
 10451                           fsr1l	equ	0xFE1
 10452                           indf2	equ	0xFDF
 10453                           postinc2	equ	0xFDE
 10454                           postdec2	equ	0xFDD
 10455                           plusw2	equ	0xFDB
 10456                           fsr2h	equ	0xFDA
 10457                           fsr2l	equ	0xFD9
 10458                           status	equ	0xFD8
 10459                           
 10460 ;; *************** function _showInfo *****************
 10461 ;; Defined at:
 10462 ;;		line 23 in file "modules.c"
 10463 ;; Parameters:    Size  Location     Type
 10464 ;;  time            2   34[COMRAM] unsigned int 
 10465 ;;  sorted          2   36[COMRAM] PTR unsigned char 
 10466 ;;		 -> PermLog@sorted(4), simulate@sorted(4), 
 10467 ;; Auto vars:     Size  Location     Type
 10468 ;;  stop            2   45[COMRAM] int 
 10469 ;;  type            2   43[COMRAM] int 
 10470 ;; Return value:  Size  Location     Type
 10471 ;;                  1    wreg      void 
 10472 ;; Registers used:
 10473 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10474 ;; Tracked objects:
 10475 ;;		On entry : 0/0
 10476 ;;		On exit  : 0/0
 10477 ;;		Unchanged: 0/0
 10478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10479 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10480 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10481 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10482 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10483 ;;Total ram usage:       13 bytes
 10484 ;; Hardware stack levels used:    1
 10485 ;; Hardware stack levels required when called:    3
 10486 ;; This function calls:
 10487 ;;		_captureKeypad
 10488 ;;		i2_lcdInst
 10489 ;;		i2_printf
 10490 ;; This function is called by:
 10491 ;;		_simulate
 10492 ;;		_PermLog
 10493 ;; This function uses a non-reentrant model
 10494 ;;
 10495                           
 10496                           	psect	text60
 10497  000B42                     __ptext60:
 10498                           	opt stack 0
 10499  000B42                     _showInfo:
 10500                           	opt stack 19
 10501                           
 10502                           ;modules.c: 24: lcdInst(0b10000000);
 10503                           
 10504                           ;incstack = 0
 10505  000B42  0E80               	movlw	128
 10506  000B44  EC42  F014         	call	i2_lcdInst
 10507                           
 10508                           ;modules.c: 25: printf("Press a number          ");
 10509  000B48  0EF6               	movlw	low STR_21
 10510  000B4A  6E0D               	movwf	i2printf@f,c
 10511  000B4C  0EFD               	movlw	high STR_21
 10512  000B4E  6E0E               	movwf	i2printf@f+1,c
 10513  000B50  EC3E  F002         	call	i2_printf	;wreg free
 10514                           
 10515                           ;modules.c: 26: lcdInst(0b11000000);
 10516  000B54  0EC0               	movlw	192
 10517  000B56  EC42  F014         	call	i2_lcdInst
 10518                           
 10519                           ;modules.c: 27: printf("For more info          ");
 10520  000B5A  0E71               	movlw	low STR_22
 10521  000B5C  6E0D               	movwf	i2printf@f,c
 10522  000B5E  0EFE               	movlw	high STR_22
 10523  000B60  6E0E               	movwf	i2printf@f+1,c
 10524  000B62  EC3E  F002         	call	i2_printf	;wreg free
 10525                           
 10526                           ;modules.c: 28: int type = 0;
 10527  000B66  0E00               	movlw	0
 10528  000B68  6E2D               	movwf	showInfo@type+1,c
 10529  000B6A  0E00               	movlw	0
 10530  000B6C  6E2C               	movwf	showInfo@type,c
 10531                           
 10532                           ;modules.c: 29: int stop = 0;
 10533  000B6E  0E00               	movlw	0
 10534  000B70  6E2F               	movwf	showInfo@stop+1,c
 10535  000B72  0E00               	movlw	0
 10536  000B74  D0D7               	goto	L3
 10537  000B76                     i2l4195:
 10538                           
 10539                           ;modules.c: 31: type = captureKeypad();
 10540  000B76  ECE5  F013         	call	_captureKeypad	;wreg free
 10541  000B7A  C001  F02C         	movff	?_captureKeypad,showInfo@type
 10542  000B7E  C002  F02D         	movff	?_captureKeypad+1,showInfo@type+1
 10543                           
 10544                           ;modules.c: 33: switch (type) {
 10545  000B82  D0D2               	goto	i2l4235
 10546  000B84                     i2l4197:
 10547                           
 10548                           ;modules.c: 35: lcdInst(0b10000000);
 10549  000B84  0E80               	movlw	128
 10550  000B86  EC42  F014         	call	i2_lcdInst
 10551                           
 10552                           ;modules.c: 36: printf("Time Elapsed:          ");
 10553  000B8A  0E41               	movlw	low STR_23
 10554  000B8C  6E0D               	movwf	i2printf@f,c
 10555  000B8E  0EFE               	movlw	high STR_23
 10556  000B90  6E0E               	movwf	i2printf@f+1,c
 10557  000B92  EC3E  F002         	call	i2_printf	;wreg free
 10558                           
 10559                           ;modules.c: 37: lcdInst(0b11000000);
 10560  000B96  0EC0               	movlw	192
 10561  000B98  EC42  F014         	call	i2_lcdInst
 10562                           
 10563                           ;modules.c: 38: printf("%u seconds          ", time);
 10564  000B9C  0E0D               	movlw	low STR_24
 10565  000B9E  6E0D               	movwf	i2printf@f,c
 10566  000BA0  0EFF               	movlw	high STR_24
 10567  000BA2  6E0E               	movwf	i2printf@f+1,c
 10568  000BA4  C023  F00F         	movff	showInfo@time,?i2_printf+2
 10569  000BA8  C024  F010         	movff	showInfo@time+1,?i2_printf+3
 10570  000BAC  EC3E  F002         	call	i2_printf	;wreg free
 10571                           
 10572                           ;modules.c: 39: break;
 10573  000BB0  D0D7               	goto	i2l4237
 10574  000BB2                     i2l4203:
 10575                           
 10576                           ;modules.c: 41: lcdInst(0b10000000);
 10577  000BB2  0E80               	movlw	128
 10578  000BB4  EC42  F014         	call	i2_lcdInst
 10579                           
 10580                           ;modules.c: 42: printf("Total Sorted:          ");
 10581  000BB8  0E59               	movlw	low STR_25
 10582  000BBA  6E0D               	movwf	i2printf@f,c
 10583  000BBC  0EFE               	movlw	high STR_25
 10584  000BBE  6E0E               	movwf	i2printf@f+1,c
 10585  000BC0  EC3E  F002         	call	i2_printf	;wreg free
 10586                           
 10587                           ;modules.c: 43: lcdInst(0b11000000);
 10588  000BC4  0EC0               	movlw	192
 10589  000BC6  EC42  F014         	call	i2_lcdInst
 10590                           
 10591                           ;modules.c: 44: printf("%u batteries          ", sorted[0] + sorted[1] + sorted[2] + sor
      +                          ted[3]);
 10592  000BCA  0EA1               	movlw	low STR_26
 10593  000BCC  6E0D               	movwf	i2printf@f,c
 10594  000BCE  0EFE               	movlw	high STR_26
 10595  000BD0  6E0E               	movwf	i2printf@f+1,c
 10596  000BD2  EE20 F003          	lfsr	2,3
 10597  000BD6  5025               	movf	showInfo@sorted,w,c
 10598  000BD8  26D9               	addwf	fsr2l,f,c
 10599  000BDA  5026               	movf	showInfo@sorted+1,w,c
 10600  000BDC  22DA               	addwfc	fsr2h,f,c
 10601  000BDE  50DF               	movf	indf2,w,c
 10602  000BE0  6E27               	movwf	??_showInfo& (0+255),c
 10603  000BE2  C025  FFD9         	movff	showInfo@sorted,fsr2l
 10604  000BE6  C026  FFDA         	movff	showInfo@sorted+1,fsr2h
 10605  000BEA  50DF               	movf	indf2,w,c
 10606  000BEC  6E28               	movwf	(??_showInfo+1)& (0+255),c
 10607  000BEE  6A29               	clrf	(??_showInfo+2)& (0+255),c
 10608  000BF0  EE20 F001          	lfsr	2,1
 10609  000BF4  5025               	movf	showInfo@sorted,w,c
 10610  000BF6  26D9               	addwf	fsr2l,f,c
 10611  000BF8  5026               	movf	showInfo@sorted+1,w,c
 10612  000BFA  22DA               	addwfc	fsr2h,f,c
 10613  000BFC  50DF               	movf	indf2,w,c
 10614  000BFE  6E2A               	movwf	(??_showInfo+3)& (0+255),c
 10615  000C00  502A               	movf	??_showInfo+3,w,c
 10616  000C02  2628               	addwf	??_showInfo+1,f,c
 10617  000C04  0E00               	movlw	0
 10618  000C06  2229               	addwfc	??_showInfo+2,f,c
 10619  000C08  EE20 F002          	lfsr	2,2
 10620  000C0C  5025               	movf	showInfo@sorted,w,c
 10621  000C0E  26D9               	addwf	fsr2l,f,c
 10622  000C10  5026               	movf	showInfo@sorted+1,w,c
 10623  000C12  22DA               	addwfc	fsr2h,f,c
 10624  000C14  50DF               	movf	indf2,w,c
 10625  000C16  6E2B               	movwf	(??_showInfo+4)& (0+255),c
 10626  000C18  502B               	movf	??_showInfo+4,w,c
 10627  000C1A  2628               	addwf	??_showInfo+1,f,c
 10628  000C1C  0E00               	movlw	0
 10629  000C1E  2229               	addwfc	??_showInfo+2,f,c
 10630  000C20  5027               	movf	??_showInfo,w,c
 10631  000C22  2428               	addwf	??_showInfo+1,w,c
 10632  000C24  6E0F               	movwf	?i2_printf+2,c
 10633  000C26  0E00               	movlw	0
 10634  000C28  2029               	addwfc	??_showInfo+2,w,c
 10635  000C2A  6E10               	movwf	?i2_printf+3,c
 10636  000C2C  EC3E  F002         	call	i2_printf	;wreg free
 10637                           
 10638                           ;modules.c: 45: break;
 10639  000C30  D097               	goto	i2l4237
 10640  000C32                     i2l4209:
 10641                           
 10642                           ;modules.c: 47: lcdInst(0b10000000);
 10643  000C32  0E80               	movlw	128
 10644  000C34  EC42  F014         	call	i2_lcdInst
 10645                           
 10646                           ;modules.c: 48: printf("AA Sorted:          ");
 10647  000C38  0EE3               	movlw	low STR_27
 10648  000C3A  6E0D               	movwf	i2printf@f,c
 10649  000C3C  0EFE               	movlw	high STR_27
 10650  000C3E  6E0E               	movwf	i2printf@f+1,c
 10651  000C40  EC3E  F002         	call	i2_printf	;wreg free
 10652                           
 10653                           ;modules.c: 49: lcdInst(0b11000000);
 10654  000C44  0EC0               	movlw	192
 10655  000C46  EC42  F014         	call	i2_lcdInst
 10656                           
 10657                           ;modules.c: 50: printf("%u             ", sorted[0]);
 10658  000C4A  0EC6               	movlw	low STR_28
 10659  000C4C  6E0D               	movwf	i2printf@f,c
 10660  000C4E  0EFF               	movlw	high STR_28
 10661  000C50  6E0E               	movwf	i2printf@f+1,c
 10662  000C52  C025  FFD9         	movff	showInfo@sorted,fsr2l
 10663  000C56  C026  FFDA         	movff	showInfo@sorted+1,fsr2h
 10664  000C5A  50DF               	movf	indf2,w,c
 10665  000C5C  6E27               	movwf	??_showInfo& (0+255),c
 10666  000C5E  5027               	movf	??_showInfo,w,c
 10667  000C60  6E0F               	movwf	?i2_printf+2,c
 10668  000C62  6A10               	clrf	?i2_printf+3,c
 10669  000C64  EC3E  F002         	call	i2_printf	;wreg free
 10670                           
 10671                           ;modules.c: 51: break;
 10672  000C68  D07B               	goto	i2l4237
 10673  000C6A                     i2l4215:
 10674                           
 10675                           ;modules.c: 53: lcdInst(0b10000000);
 10676  000C6A  0E80               	movlw	128
 10677  000C6C  EC42  F014         	call	i2_lcdInst
 10678                           
 10679                           ;modules.c: 54: printf("C Sorted:          ");
 10680  000C70  0E36               	movlw	low STR_29
 10681  000C72  6E0D               	movwf	i2printf@f,c
 10682  000C74  0EFF               	movlw	high STR_29
 10683  000C76  6E0E               	movwf	i2printf@f+1,c
 10684  000C78  EC3E  F002         	call	i2_printf	;wreg free
 10685                           
 10686                           ;modules.c: 55: lcdInst(0b11000000);
 10687  000C7C  0EC0               	movlw	192
 10688  000C7E  EC42  F014         	call	i2_lcdInst
 10689                           
 10690                           ;modules.c: 56: printf("%u             ", sorted[1]);
 10691  000C82  0EC6               	movlw	low STR_28
 10692  000C84  6E0D               	movwf	i2printf@f,c
 10693  000C86  0EFF               	movlw	high STR_28
 10694  000C88  6E0E               	movwf	i2printf@f+1,c
 10695  000C8A  EE20 F001          	lfsr	2,1
 10696  000C8E  5025               	movf	showInfo@sorted,w,c
 10697  000C90  26D9               	addwf	fsr2l,f,c
 10698  000C92  5026               	movf	showInfo@sorted+1,w,c
 10699  000C94  22DA               	addwfc	fsr2h,f,c
 10700  000C96  50DF               	movf	indf2,w,c
 10701  000C98  6E27               	movwf	??_showInfo& (0+255),c
 10702  000C9A  5027               	movf	??_showInfo,w,c
 10703  000C9C  6E0F               	movwf	?i2_printf+2,c
 10704  000C9E  6A10               	clrf	?i2_printf+3,c
 10705  000CA0  EC3E  F002         	call	i2_printf	;wreg free
 10706                           
 10707                           ;modules.c: 57: break;
 10708  000CA4  D05D               	goto	i2l4237
 10709  000CA6                     i2l4221:
 10710                           
 10711                           ;modules.c: 59: lcdInst(0b10000000);
 10712  000CA6  0E80               	movlw	128
 10713  000CA8  EC42  F014         	call	i2_lcdInst
 10714                           
 10715                           ;modules.c: 60: printf("9V Sorted:          ");
 10716  000CAC  0EF8               	movlw	low STR_31
 10717  000CAE  6E0D               	movwf	i2printf@f,c
 10718  000CB0  0EFE               	movlw	high STR_31
 10719  000CB2  6E0E               	movwf	i2printf@f+1,c
 10720  000CB4  EC3E  F002         	call	i2_printf	;wreg free
 10721                           
 10722                           ;modules.c: 61: lcdInst(0b11000000);
 10723  000CB8  0EC0               	movlw	192
 10724  000CBA  EC42  F014         	call	i2_lcdInst
 10725                           
 10726                           ;modules.c: 62: printf("%u             ", sorted[2]);
 10727  000CBE  0EC6               	movlw	low STR_28
 10728  000CC0  6E0D               	movwf	i2printf@f,c
 10729  000CC2  0EFF               	movlw	high STR_28
 10730  000CC4  6E0E               	movwf	i2printf@f+1,c
 10731  000CC6  EE20 F002          	lfsr	2,2
 10732  000CCA  5025               	movf	showInfo@sorted,w,c
 10733  000CCC  26D9               	addwf	fsr2l,f,c
 10734  000CCE  5026               	movf	showInfo@sorted+1,w,c
 10735  000CD0  22DA               	addwfc	fsr2h,f,c
 10736  000CD2  50DF               	movf	indf2,w,c
 10737  000CD4  6E27               	movwf	??_showInfo& (0+255),c
 10738  000CD6  5027               	movf	??_showInfo,w,c
 10739  000CD8  6E0F               	movwf	?i2_printf+2,c
 10740  000CDA  6A10               	clrf	?i2_printf+3,c
 10741  000CDC  EC3E  F002         	call	i2_printf	;wreg free
 10742                           
 10743                           ;modules.c: 63: break;
 10744  000CE0  D03F               	goto	i2l4237
 10745  000CE2                     i2l4227:
 10746                           
 10747                           ;modules.c: 65: lcdInst(0b10000000);
 10748  000CE2  0E80               	movlw	128
 10749  000CE4  EC42  F014         	call	i2_lcdInst
 10750                           
 10751                           ;modules.c: 66: printf("Uncharged:          ");
 10752  000CE8  0ECE               	movlw	low STR_33
 10753  000CEA  6E0D               	movwf	i2printf@f,c
 10754  000CEC  0EFE               	movlw	high STR_33
 10755  000CEE  6E0E               	movwf	i2printf@f+1,c
 10756  000CF0  EC3E  F002         	call	i2_printf	;wreg free
 10757                           
 10758                           ;modules.c: 67: lcdInst(0b11000000);
 10759  000CF4  0EC0               	movlw	192
 10760  000CF6  EC42  F014         	call	i2_lcdInst
 10761                           
 10762                           ;modules.c: 68: printf("%u             ", sorted[3]);
 10763  000CFA  0EC6               	movlw	low STR_28
 10764  000CFC  6E0D               	movwf	i2printf@f,c
 10765  000CFE  0EFF               	movlw	high STR_28
 10766  000D00  6E0E               	movwf	i2printf@f+1,c
 10767  000D02  EE20 F003          	lfsr	2,3
 10768  000D06  5025               	movf	showInfo@sorted,w,c
 10769  000D08  26D9               	addwf	fsr2l,f,c
 10770  000D0A  5026               	movf	showInfo@sorted+1,w,c
 10771  000D0C  22DA               	addwfc	fsr2h,f,c
 10772  000D0E  50DF               	movf	indf2,w,c
 10773  000D10  6E27               	movwf	??_showInfo& (0+255),c
 10774  000D12  5027               	movf	??_showInfo,w,c
 10775  000D14  6E0F               	movwf	?i2_printf+2,c
 10776  000D16  6A10               	clrf	?i2_printf+3,c
 10777  000D18  EC3E  F002         	call	i2_printf	;wreg free
 10778                           
 10779                           ;modules.c: 69: break;
 10780  000D1C  D021               	goto	i2l4237
 10781  000D1E                     i2l4233:
 10782                           
 10783                           ;modules.c: 71: stop = 1;
 10784  000D1E  0E00               	movlw	0
 10785  000D20  6E2F               	movwf	showInfo@stop+1,c
 10786  000D22  0E01               	movlw	1
 10787  000D24                     L3:
 10788  000D24  6E2E               	movwf	showInfo@stop,c
 10789                           
 10790                           ;modules.c: 72: }
 10791  000D26  D01C               	goto	i2l4237
 10792  000D28                     i2l4235:
 10793  000D28  C02C  F027         	movff	showInfo@type,??_showInfo
 10794  000D2C  C02D  F028         	movff	showInfo@type+1,??_showInfo+1
 10795                           
 10796                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10797                           ; Switch size 1, requested type "space"
 10798                           ; Number of cases is 1, Range of values is 0 to 0
 10799                           ; switch strategies available:
 10800                           ; Name         Instructions Cycles
 10801                           ; simple_byte            4     3 (average)
 10802                           ;	Chosen strategy is simple_byte
 10803  000D30  5028               	movf	??_showInfo+1,w,c
 10804  000D32  0A00               	xorlw	0	; case 0
 10805  000D34  A4D8               	btfss	status,2,c
 10806  000D36  D7F3               	goto	i2l4233
 10807                           
 10808                           ; Switch size 1, requested type "space"
 10809                           ; Number of cases is 6, Range of values is 0 to 6
 10810                           ; switch strategies available:
 10811                           ; Name         Instructions Cycles
 10812                           ; simple_byte           19    10 (average)
 10813                           ;	Chosen strategy is simple_byte
 10814  000D38  5027               	movf	??_showInfo,w,c
 10815  000D3A  0A00               	xorlw	0	; case 0
 10816  000D3C  B4D8               	btfsc	status,2,c
 10817  000D3E  D722               	goto	i2l4197
 10818  000D40  0A01               	xorlw	1	; case 1
 10819  000D42  B4D8               	btfsc	status,2,c
 10820  000D44  D736               	goto	i2l4203
 10821  000D46  0A03               	xorlw	3	; case 2
 10822  000D48  B4D8               	btfsc	status,2,c
 10823  000D4A  D773               	goto	i2l4209
 10824  000D4C  0A06               	xorlw	6	; case 4
 10825  000D4E  B4D8               	btfsc	status,2,c
 10826  000D50  D78C               	goto	i2l4215
 10827  000D52  0A01               	xorlw	1	; case 5
 10828  000D54  B4D8               	btfsc	status,2,c
 10829  000D56  D7A7               	goto	i2l4221
 10830  000D58  0A03               	xorlw	3	; case 6
 10831  000D5A  B4D8               	btfsc	status,2,c
 10832  000D5C  D7C2               	goto	i2l4227
 10833  000D5E  D7DF               	goto	i2l4233
 10834  000D60                     i2l4237:
 10835  000D60  502E               	movf	showInfo@stop,w,c
 10836  000D62  102F               	iorwf	showInfo@stop+1,w,c
 10837  000D64  A4D8               	btfss	status,2,c
 10838  000D66  0012               	return	
 10839  000D68  D706               	goto	i2l4195
 10840  000D6A                     __end_of_showInfo:
 10841                           	opt stack 0
 10842                           pclatu	equ	0xFFB
 10843                           pclath	equ	0xFFA
 10844                           tblptru	equ	0xFF8
 10845                           tblptrh	equ	0xFF7
 10846                           tblptrl	equ	0xFF6
 10847                           tablat	equ	0xFF5
 10848                           prodh	equ	0xFF4
 10849                           prodl	equ	0xFF3
 10850                           intcon	equ	0xFF2
 10851                           intcon3	equ	0xFF0
 10852                           postinc0	equ	0xFEE
 10853                           fsr0h	equ	0xFEA
 10854                           fsr0l	equ	0xFE9
 10855                           wreg	equ	0xFE8
 10856                           plusw1	equ	0xFE3
 10857                           fsr1h	equ	0xFE2
 10858                           fsr1l	equ	0xFE1
 10859                           indf2	equ	0xFDF
 10860                           postinc2	equ	0xFDE
 10861                           postdec2	equ	0xFDD
 10862                           plusw2	equ	0xFDB
 10863                           fsr2h	equ	0xFDA
 10864                           fsr2l	equ	0xFD9
 10865                           status	equ	0xFD8
 10866                           
 10867 ;; *************** function i2_printf *****************
 10868 ;; Defined at:
 10869 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
 10870 ;; Parameters:    Size  Location     Type
 10871 ;;  f               2   12[COMRAM] PTR const unsigned char 
 10872 ;;		 -> STR_45(17), STR_44(17), STR_43(18), STR_42(22), 
 10873 ;;		 -> STR_41(4), STR_40(3), STR_39(4), STR_38(5), 
 10874 ;;		 -> STR_37(4), STR_36(18), STR_35(20), STR_34(16), 
 10875 ;;		 -> STR_33(21), STR_32(16), STR_31(21), STR_30(16), 
 10876 ;;		 -> STR_29(20), STR_28(16), STR_27(21), STR_26(23), 
 10877 ;;		 -> STR_25(24), STR_24(21), STR_23(24), STR_22(24), 
 10878 ;;		 -> STR_21(25), STR_20(19), STR_19(18), STR_18(25), 
 10879 ;;		 -> STR_17(25), STR_16(27), STR_15(3), STR_14(3), 
 10880 ;;		 -> STR_13(3), STR_12(5), STR_11(3), STR_10(3), 
 10881 ;;		 -> STR_9(3), STR_8(4), STR_7(3), STR_6(3), 
 10882 ;;		 -> STR_5(3), STR_4(4), STR_3(5), STR_2(24), 
 10883 ;;		 -> STR_1(9), 
 10884 ;; Auto vars:     Size  Location     Type
 10885 ;;  printf          4    0        struct .
 10886 ;;  printf          2   31[COMRAM] int 
 10887 ;;  printf          2   28[COMRAM] unsigned int 
 10888 ;;  printf          2   25[COMRAM] unsigned int 
 10889 ;;  printf          2   23[COMRAM] PTR void [1]
 10890 ;;		 -> ?i2_printf(2), ?_printf(2), 
 10891 ;;  printf          2   20[COMRAM] PTR const unsigned char 
 10892 ;;		 -> printf@c(1), 
 10893 ;;  printf          1   33[COMRAM] char 
 10894 ;;  printf          1   30[COMRAM] unsigned char 
 10895 ;;  printf          1   27[COMRAM] char 
 10896 ;;  printf          1   22[COMRAM] unsigned char 
 10897 ;; Return value:  Size  Location     Type
 10898 ;;                  2   12[COMRAM] int 
 10899 ;; Registers used:
 10900 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10901 ;; Tracked objects:
 10902 ;;		On entry : 0/0
 10903 ;;		On exit  : 0/0
 10904 ;;		Unchanged: 0/0
 10905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10906 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10907 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10908 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10909 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10910 ;;Total ram usage:       22 bytes
 10911 ;; Hardware stack levels used:    1
 10912 ;; Hardware stack levels required when called:    2
 10913 ;; This function calls:
 10914 ;;		i2___lwdiv
 10915 ;;		i2___lwmod
 10916 ;;		i2___wmul
 10917 ;;		i2_isdigit
 10918 ;;		i2_putch
 10919 ;; This function is called by:
 10920 ;;		_simulate
 10921 ;;		_showInfo
 10922 ;;		_stopMoving
 10923 ;;		_PermLog
 10924 ;;		i2_printV
 10925 ;;		i2_checkAA
 10926 ;;		i2_checkC
 10927 ;;		i2_check9
 10928 ;; This function uses a non-reentrant model
 10929 ;;
 10930                           
 10931                           	psect	text61
 10932  00047C                     __ptext61:
 10933                           	opt stack 0
 10934  00047C                     i2_printf:
 10935                           	opt stack 20
 10936                           
 10937                           ;doprnt.c: 466: va_list ap;
 10938                           ;doprnt.c: 499: signed char c;
 10939                           ;doprnt.c: 501: int width;
 10940                           ;doprnt.c: 506: signed char prec;
 10941                           ;doprnt.c: 508: unsigned char flag;
 10942                           ;doprnt.c: 523: union {
 10943                           ;doprnt.c: 524: unsigned long vd;
 10944                           ;doprnt.c: 525: double integ;
 10945                           ;doprnt.c: 526: } tmpval;
 10946                           ;doprnt.c: 528: unsigned int val;
 10947                           ;doprnt.c: 529: unsigned len;
 10948                           ;doprnt.c: 530: const char * cp;
 10949                           ;doprnt.c: 533: *ap = __va_start();
 10950                           
 10951                           ;incstack = 0
 10952  00047C  0E0F               	movlw	low (?i2_printf+2)
 10953  00047E  6E18               	movwf	i2printf@ap,c
 10954  000480  0E00               	movlw	high (?i2_printf+2)
 10955  000482  6E19               	movwf	i2printf@ap+1,c
 10956                           
 10957                           ;doprnt.c: 536: while(c = *f++) {
 10958  000484  D1BB               	goto	i2l3717
 10959  000486                     i2l3567:
 10960                           
 10961                           ;doprnt.c: 538: if(c != '%')
 10962  000486  0E25               	movlw	37
 10963  000488  1822               	xorwf	i2printf@c,w,c
 10964  00048A  B4D8               	btfsc	status,2,c
 10965  00048C  D004               	goto	i2l3571
 10966                           
 10967                           ;doprnt.c: 540: {
 10968                           ;doprnt.c: 541: (putch(c) );
 10969  00048E  5022               	movf	i2printf@c,w,c
 10970  000490  EC3C  F014         	call	i2_putch
 10971                           
 10972                           ;doprnt.c: 542: continue;
 10973  000494  D1B3               	goto	i2l3717
 10974  000496                     i2l3571:
 10975                           
 10976                           ;doprnt.c: 543: }
 10977                           ;doprnt.c: 546: width = 0;
 10978  000496  0E00               	movlw	0
 10979  000498  6E21               	movwf	i2printf@width+1,c
 10980  00049A  0E00               	movlw	0
 10981  00049C  6E20               	movwf	i2printf@width,c
 10982                           
 10983                           ;doprnt.c: 548: flag = 0;
 10984  00049E  0E00               	movlw	0
 10985  0004A0  6E1F               	movwf	i2printf@flag,c
 10986                           
 10987                           ;doprnt.c: 551: switch(*f) {
 10988                           
 10989                           ;doprnt.c: 550: for(;;) {
 10990  0004A2  D003               	goto	i2l3577
 10991  0004A4                     i2l3573:
 10992                           
 10993                           ;doprnt.c: 580: flag |= 0x04;
 10994  0004A4  841F               	bsf	i2printf@flag,2,c
 10995                           
 10996                           ;doprnt.c: 581: f++;
 10997  0004A6  4A0D               	infsnz	i2printf@f,f,c
 10998  0004A8  2A0E               	incf	i2printf@f+1,f,c
 10999  0004AA                     i2l3577:
 11000  0004AA  C00D  FFF6         	movff	i2printf@f,tblptrl
 11001  0004AE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11002  0004B2                     	if	0	;tblptru may be non-zero
 11003  0004B2                     	endif
 11004  0004B2                     	if	0	;tblptru may be non-zero
 11005  0004B2                     	endif
 11006  0004B2  0008               	tblrd		*
 11007  0004B4  50F5               	movf	tablat,w,c
 11008                           
 11009                           ; Switch size 1, requested type "space"
 11010                           ; Number of cases is 1, Range of values is 48 to 48
 11011                           ; switch strategies available:
 11012                           ; Name         Instructions Cycles
 11013                           ; simple_byte            4     3 (average)
 11014                           ;	Chosen strategy is simple_byte
 11015  0004B6  0A30               	xorlw	48	; case 48
 11016  0004B8  B4D8               	btfsc	status,2,c
 11017  0004BA  D7F4               	goto	i2l3573
 11018                           
 11019                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 11020                           
 11021                           ;doprnt.c: 586: }
 11022                           
 11023                           ;doprnt.c: 585: break;
 11024  0004BC  C00D  FFF6         	movff	i2printf@f,tblptrl
 11025  0004C0  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11026  0004C4                     	if	0	;tblptru may be non-zero
 11027  0004C4                     	endif
 11028  0004C4                     	if	0	;tblptru may be non-zero
 11029  0004C4                     	endif
 11030  0004C4  0008               	tblrd		*
 11031  0004C6  50F5               	movf	tablat,w,c
 11032  0004C8  ECD6  F013         	call	i2_isdigit
 11033  0004CC  A0D8               	btfss	status,0,c
 11034  0004CE  D06F               	goto	i2l3617
 11035                           
 11036                           ;doprnt.c: 598: width = 0;
 11037  0004D0  0E00               	movlw	0
 11038  0004D2  6E21               	movwf	i2printf@width+1,c
 11039  0004D4  0E00               	movlw	0
 11040  0004D6  6E20               	movwf	i2printf@width,c
 11041  0004D8                     i2l3583:
 11042                           
 11043                           ;doprnt.c: 600: width *= 10;
 11044  0004D8  C020  F001         	movff	i2printf@width,i2___wmul@multiplier
 11045  0004DC  C021  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
 11046  0004E0  0E00               	movlw	0
 11047  0004E2  6E04               	movwf	i2___wmul@multiplicand+1,c
 11048  0004E4  0E0A               	movlw	10
 11049  0004E6  6E03               	movwf	i2___wmul@multiplicand,c
 11050  0004E8  ECB2  F013         	call	i2___wmul	;wreg free
 11051  0004EC  C001  F020         	movff	?i2___wmul,i2printf@width
 11052  0004F0  C002  F021         	movff	?i2___wmul+1,i2printf@width+1
 11053                           
 11054                           ;doprnt.c: 601: width += *f++ - '0';
 11055  0004F4  0ED0               	movlw	208
 11056  0004F6  6E11               	movwf	??i2_printf& (0+255),c
 11057  0004F8  0EFF               	movlw	255
 11058  0004FA  6E12               	movwf	(??i2_printf+1)& (0+255),c
 11059  0004FC  C00D  FFF6         	movff	i2printf@f,tblptrl
 11060  000500  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11061  000504                     	if	0	;tblptru may be non-zero
 11062  000504                     	endif
 11063  000504                     	if	0	;tblptru may be non-zero
 11064  000504                     	endif
 11065  000504  0008               	tblrd		*
 11066  000506  50F5               	movf	tablat,w,c
 11067  000508  6E13               	movwf	(??i2_printf+2)& (0+255),c
 11068  00050A  6A14               	clrf	(??i2_printf+3)& (0+255),c
 11069  00050C  5011               	movf	??i2_printf,w,c
 11070  00050E  2613               	addwf	??i2_printf+2,f,c
 11071  000510  5012               	movf	??i2_printf+1,w,c
 11072  000512  2214               	addwfc	??i2_printf+3,f,c
 11073  000514  5013               	movf	??i2_printf+2,w,c
 11074  000516  2620               	addwf	i2printf@width,f,c
 11075  000518  5014               	movf	??i2_printf+3,w,c
 11076  00051A  2221               	addwfc	i2printf@width+1,f,c
 11077  00051C  4A0D               	infsnz	i2printf@f,f,c
 11078  00051E  2A0E               	incf	i2printf@f+1,f,c
 11079                           
 11080                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 11081  000520  C00D  FFF6         	movff	i2printf@f,tblptrl
 11082  000524  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11083  000528                     	if	0	;tblptru may be non-zero
 11084  000528                     	endif
 11085  000528                     	if	0	;tblptru may be non-zero
 11086  000528                     	endif
 11087  000528  0008               	tblrd		*
 11088  00052A  50F5               	movf	tablat,w,c
 11089  00052C  ECD6  F013         	call	i2_isdigit
 11090  000530  A0D8               	btfss	status,0,c
 11091  000532  D03D               	goto	i2l3617
 11092  000534  D7D1               	goto	i2l3583
 11093  000536                     i2l3591:
 11094                           
 11095                           ;doprnt.c: 721: flag |= 0x80;
 11096  000536  8E1F               	bsf	i2printf@flag,7,c
 11097                           
 11098                           ;doprnt.c: 723: break;
 11099  000538  D054               	goto	i2l3619
 11100  00053A                     i2l3593:
 11101                           
 11102                           ;doprnt.c: 757: if(width > len)
 11103  00053A  5020               	movf	i2printf@width,w,c
 11104  00053C  5C1A               	subwf	i2printf@len,w,c
 11105  00053E  5021               	movf	i2printf@width+1,w,c
 11106  000540  581B               	subwfb	i2printf@len+1,w,c
 11107  000542  B0D8               	btfsc	status,0,c
 11108  000544  D005               	goto	i2l3597
 11109                           
 11110                           ;doprnt.c: 758: width -= len;
 11111  000546  501A               	movf	i2printf@len,w,c
 11112  000548  5E20               	subwf	i2printf@width,f,c
 11113  00054A  501B               	movf	i2printf@len+1,w,c
 11114  00054C  5A21               	subwfb	i2printf@width+1,f,c
 11115  00054E  D008               	goto	i2l3601
 11116  000550                     i2l3597:
 11117                           
 11118                           ;doprnt.c: 759: else
 11119                           ;doprnt.c: 760: width = 0;
 11120  000550  0E00               	movlw	0
 11121  000552  6E21               	movwf	i2printf@width+1,c
 11122  000554  0E00               	movlw	0
 11123  000556  6E20               	movwf	i2printf@width,c
 11124                           
 11125                           ;doprnt.c: 764: while(width--)
 11126  000558  D003               	goto	i2l3601
 11127  00055A                     i2l3599:
 11128                           
 11129                           ;doprnt.c: 765: (putch(' ') );
 11130  00055A  0E20               	movlw	32
 11131  00055C  EC3C  F014         	call	i2_putch
 11132  000560                     i2l3601:
 11133  000560  0620               	decf	i2printf@width,f,c
 11134  000562  A0D8               	btfss	status,0,c
 11135  000564  0621               	decf	i2printf@width+1,f,c
 11136  000566  2820               	incf	i2printf@width,w,c
 11137  000568  E1F8               	bnz	i2l3599
 11138  00056A  2821               	incf	i2printf@width+1,w,c
 11139  00056C  B4D8               	btfsc	status,2,c
 11140  00056E  D00A               	goto	i2l3607
 11141  000570  D7F4               	goto	i2l3599
 11142  000572                     i2l3603:
 11143                           
 11144                           ;doprnt.c: 768: (putch(*cp++) );
 11145  000572  C015  FFD9         	movff	i2printf@cp,fsr2l
 11146  000576  C016  FFDA         	movff	i2printf@cp+1,fsr2h
 11147  00057A  50DF               	movf	indf2,w,c
 11148  00057C  EC3C  F014         	call	i2_putch
 11149  000580  4A15               	infsnz	i2printf@cp,f,c
 11150  000582  2A16               	incf	i2printf@cp+1,f,c
 11151  000584                     i2l3607:
 11152  000584  061A               	decf	i2printf@len,f,c
 11153  000586  A0D8               	btfss	status,0,c
 11154  000588  061B               	decf	i2printf@len+1,f,c
 11155  00058A  281A               	incf	i2printf@len,w,c
 11156  00058C  E1F2               	bnz	i2l3603
 11157  00058E  281B               	incf	i2printf@len+1,w,c
 11158  000590  B4D8               	btfsc	status,2,c
 11159  000592  D134               	goto	i2l3717
 11160  000594  D7EE               	goto	i2l3603
 11161  000596                     i2l3609:
 11162                           
 11163                           ;doprnt.c: 805: cp = (char *)&c;
 11164  000596  0E22               	movlw	low i2printf@c
 11165  000598  6E15               	movwf	i2printf@cp,c
 11166  00059A  0E00               	movlw	high i2printf@c
 11167  00059C  6E16               	movwf	i2printf@cp+1,c
 11168                           
 11169                           ;doprnt.c: 806: len = 1;
 11170  00059E  0E00               	movlw	0
 11171  0005A0  6E1B               	movwf	i2printf@len+1,c
 11172  0005A2  0E01               	movlw	1
 11173  0005A4  6E1A               	movwf	i2printf@len,c
 11174                           
 11175                           ;doprnt.c: 807: goto dostring;
 11176  0005A6  D7C9               	goto	i2l3593
 11177  0005A8                     i2l3613:
 11178                           
 11179                           ;doprnt.c: 818: flag |= 0xC0;
 11180  0005A8  0EC0               	movlw	192
 11181  0005AA  121F               	iorwf	i2printf@flag,f,c
 11182                           
 11183                           ;doprnt.c: 822: }
 11184                           
 11185                           ;doprnt.c: 819: break;
 11186  0005AC  D01A               	goto	i2l3619
 11187  0005AE                     i2l3617:
 11188  0005AE  C00D  FFF6         	movff	i2printf@f,tblptrl
 11189  0005B2  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11190  0005B6  4A0D               	infsnz	i2printf@f,f,c
 11191  0005B8  2A0E               	incf	i2printf@f+1,f,c
 11192  0005BA                     	if	0	;tblptru may be non-zero
 11193  0005BA                     	endif
 11194  0005BA                     	if	0	;tblptru may be non-zero
 11195  0005BA                     	endif
 11196  0005BA  0008               	tblrd		*
 11197  0005BC  CFF5 F022          	movff	tablat,i2printf@c
 11198  0005C0  5022               	movf	i2printf@c,w,c
 11199                           
 11200                           ; Switch size 1, requested type "space"
 11201                           ; Number of cases is 5, Range of values is 0 to 120
 11202                           ; switch strategies available:
 11203                           ; Name         Instructions Cycles
 11204                           ; simple_byte           16     9 (average)
 11205                           ;	Chosen strategy is simple_byte
 11206  0005C2  0A00               	xorlw	0	; case 0
 11207  0005C4  B4D8               	btfsc	status,2,c
 11208  0005C6  0012               	return	
 11209  0005C8  0A64               	xorlw	100	; case 100
 11210  0005CA  B4D8               	btfsc	status,2,c
 11211  0005CC  D00A               	goto	i2l3619
 11212  0005CE  0A0D               	xorlw	13	; case 105
 11213  0005D0  B4D8               	btfsc	status,2,c
 11214  0005D2  D007               	goto	i2l3619
 11215  0005D4  0A1C               	xorlw	28	; case 117
 11216  0005D6  B4D8               	btfsc	status,2,c
 11217  0005D8  D7E7               	goto	i2l3613
 11218  0005DA  0A0D               	xorlw	13	; case 120
 11219  0005DC  B4D8               	btfsc	status,2,c
 11220  0005DE  D7AB               	goto	i2l3591
 11221  0005E0  D7DA               	goto	i2l3609
 11222  0005E2                     i2l3619:
 11223                           
 11224                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
 11225  0005E2  C01F  F011         	movff	i2printf@flag,??i2_printf
 11226  0005E6  0EC0               	movlw	192
 11227  0005E8  1611               	andwf	??i2_printf,f,c
 11228  0005EA  A4D8               	btfss	status,2,c
 11229  0005EC  D015               	goto	i2l3631
 11230                           
 11231                           ;doprnt.c: 1253: {
 11232                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 11233  0005EE  C018  FFD9         	movff	i2printf@ap,fsr2l
 11234  0005F2  C019  FFDA         	movff	i2printf@ap+1,fsr2h
 11235  0005F6  CFDE F01D          	movff	postinc2,i2printf@val
 11236  0005FA  CFDD F01E          	movff	postdec2,i2printf@val+1
 11237  0005FE  0E02               	movlw	2
 11238  000600  2618               	addwf	i2printf@ap,f,c
 11239  000602  0E00               	movlw	0
 11240  000604  2219               	addwfc	i2printf@ap+1,f,c
 11241                           
 11242                           ;doprnt.c: 1261: if((int)val < 0) {
 11243  000606  AE1E               	btfss	i2printf@val+1,7,c
 11244  000608  D044               	goto	i2l3665
 11245                           
 11246                           ;doprnt.c: 1262: flag |= 0x03;
 11247  00060A  0E03               	movlw	3
 11248  00060C  121F               	iorwf	i2printf@flag,f,c
 11249                           
 11250                           ;doprnt.c: 1263: val = -val;
 11251  00060E  6C1D               	negf	i2printf@val,c
 11252  000610  1E1E               	comf	i2printf@val+1,f,c
 11253  000612  B0D8               	btfsc	status,0,c
 11254  000614  2A1E               	incf	i2printf@val+1,f,c
 11255                           
 11256                           ;doprnt.c: 1264: }
 11257                           ;doprnt.c: 1266: }
 11258  000616  D03D               	goto	i2l3665
 11259  000618                     i2l3631:
 11260                           
 11261                           ;doprnt.c: 1268: else
 11262                           ;doprnt.c: 1273: {
 11263                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 11264  000618  C018  FFD9         	movff	i2printf@ap,fsr2l
 11265  00061C  C019  FFDA         	movff	i2printf@ap+1,fsr2h
 11266  000620  CFDE F01D          	movff	postinc2,i2printf@val
 11267  000624  CFDD F01E          	movff	postdec2,i2printf@val+1
 11268  000628  0E02               	movlw	2
 11269  00062A  2618               	addwf	i2printf@ap,f,c
 11270  00062C  0E00               	movlw	0
 11271  00062E  2219               	addwfc	i2printf@ap+1,f,c
 11272                           
 11273                           ;doprnt.c: 1287: }
 11274                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
 11275  000630  D030               	goto	i2l3665
 11276  000632                     i2l3635:
 11277                           
 11278                           ;doprnt.c: 1302: case 0xC0:
 11279                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 11280  000632  0E01               	movlw	1
 11281  000634  6E22               	movwf	i2printf@c,c
 11282  000636                     i2l3637:
 11283  000636  0E05               	movlw	5
 11284  000638  1822               	xorwf	i2printf@c,w,c
 11285  00063A  B4D8               	btfsc	status,2,c
 11286  00063C  D035               	goto	i2l3667
 11287                           
 11288                           ;doprnt.c: 1306: if(val < dpowers[c])
 11289  00063E  5022               	movf	i2printf@c,w,c
 11290  000640  0D02               	mullw	2
 11291  000642  0EC9               	movlw	low _dpowers
 11292  000644  24F3               	addwf	prodl,w,c
 11293  000646  6EF6               	movwf	tblptrl,c
 11294  000648  0EFD               	movlw	high _dpowers
 11295  00064A  20F4               	addwfc	prodh,w,c
 11296  00064C  6EF7               	movwf	tblptrh,c
 11297  00064E                     	if	0	;There are less than 3 active tblptr bytes
 11298  00064E                     	endif
 11299  00064E  0009               	tblrd		*+
 11300  000650  50F5               	movf	tablat,w,c
 11301  000652  5C1D               	subwf	i2printf@val,w,c
 11302  000654  0009               	tblrd		*+
 11303  000656  50F5               	movf	tablat,w,c
 11304  000658  581E               	subwfb	i2printf@val+1,w,c
 11305  00065A  A0D8               	btfss	status,0,c
 11306  00065C  D025               	goto	i2l3667
 11307                           
 11308                           ;doprnt.c: 1307: break;
 11309  00065E  2A22               	incf	i2printf@c,f,c
 11310  000660  D7EA               	goto	i2l3637
 11311  000662                     i2l3649:
 11312                           
 11313                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 11314  000662  0E01               	movlw	1
 11315  000664  6E22               	movwf	i2printf@c,c
 11316  000666                     i2l3651:
 11317  000666  0E04               	movlw	4
 11318  000668  1822               	xorwf	i2printf@c,w,c
 11319  00066A  B4D8               	btfsc	status,2,c
 11320  00066C  D01D               	goto	i2l3667
 11321                           
 11322                           ;doprnt.c: 1317: if(val < hexpowers[c])
 11323  00066E  5022               	movf	i2printf@c,w,c
 11324  000670  0D02               	mullw	2
 11325  000672  0ED3               	movlw	low _hexpowers
 11326  000674  24F3               	addwf	prodl,w,c
 11327  000676  6EF6               	movwf	tblptrl,c
 11328  000678  0EFD               	movlw	high _hexpowers
 11329  00067A  20F4               	addwfc	prodh,w,c
 11330  00067C  6EF7               	movwf	tblptrh,c
 11331  00067E                     	if	0	;There are less than 3 active tblptr bytes
 11332  00067E                     	endif
 11333  00067E  0009               	tblrd		*+
 11334  000680  50F5               	movf	tablat,w,c
 11335  000682  5C1D               	subwf	i2printf@val,w,c
 11336  000684  0009               	tblrd		*+
 11337  000686  50F5               	movf	tablat,w,c
 11338  000688  581E               	subwfb	i2printf@val+1,w,c
 11339  00068A  A0D8               	btfss	status,0,c
 11340  00068C  D00D               	goto	i2l3667
 11341                           
 11342                           ;doprnt.c: 1318: break;
 11343  00068E  2A22               	incf	i2printf@c,f,c
 11344  000690  D7EA               	goto	i2l3651
 11345  000692                     i2l3665:
 11346  000692  501F               	movf	i2printf@flag,w,c
 11347  000694  0BC0               	andlw	192
 11348                           
 11349                           ; Switch size 1, requested type "space"
 11350                           ; Number of cases is 3, Range of values is 0 to 192
 11351                           ; switch strategies available:
 11352                           ; Name         Instructions Cycles
 11353                           ; simple_byte           10     6 (average)
 11354                           ;	Chosen strategy is simple_byte
 11355  000696  0A00               	xorlw	0	; case 0
 11356  000698  B4D8               	btfsc	status,2,c
 11357  00069A  D7CB               	goto	i2l3635
 11358  00069C  0A80               	xorlw	128	; case 128
 11359  00069E  B4D8               	btfsc	status,2,c
 11360  0006A0  D7E0               	goto	i2l3649
 11361  0006A2  0A40               	xorlw	64	; case 192
 11362  0006A4  B4D8               	btfsc	status,2,c
 11363  0006A6  D7C5               	goto	i2l3635
 11364  0006A8                     i2l3667:
 11365                           
 11366                           ;doprnt.c: 1345: if(width && flag & 0x03)
 11367  0006A8  5020               	movf	i2printf@width,w,c
 11368  0006AA  1021               	iorwf	i2printf@width+1,w,c
 11369  0006AC  B4D8               	btfsc	status,2,c
 11370  0006AE  D009               	goto	i2l3673
 11371  0006B0  C01F  F011         	movff	i2printf@flag,??i2_printf
 11372  0006B4  0E03               	movlw	3
 11373  0006B6  1611               	andwf	??i2_printf,f,c
 11374  0006B8  B4D8               	btfsc	status,2,c
 11375  0006BA  D003               	goto	i2l3673
 11376                           
 11377                           ;doprnt.c: 1346: width--;
 11378  0006BC  0620               	decf	i2printf@width,f,c
 11379  0006BE  A0D8               	btfss	status,0,c
 11380  0006C0  0621               	decf	i2printf@width+1,f,c
 11381  0006C2                     i2l3673:
 11382                           
 11383                           ;doprnt.c: 1381: if(width > c)
 11384  0006C2  0E80               	movlw	128
 11385  0006C4  BE22               	btfsc	i2printf@c,7,c
 11386  0006C6  0E7F               	movlw	127
 11387  0006C8  6E11               	movwf	??i2_printf& (0+255),c
 11388  0006CA  5020               	movf	i2printf@width,w,c
 11389  0006CC  5C22               	subwf	i2printf@c,w,c
 11390  0006CE  5021               	movf	i2printf@width+1,w,c
 11391  0006D0  0A80               	xorlw	128
 11392  0006D2  5811               	subwfb	??i2_printf& (0+255),w,c
 11393  0006D4  B0D8               	btfsc	status,0,c
 11394  0006D6  D007               	goto	i2l3677
 11395                           
 11396                           ;doprnt.c: 1382: width -= c;
 11397  0006D8  5022               	movf	i2printf@c,w,c
 11398  0006DA  5E20               	subwf	i2printf@width,f,c
 11399  0006DC  0E00               	movlw	0
 11400  0006DE  BE22               	btfsc	i2printf@c,7,c
 11401  0006E0  0EFF               	movlw	255
 11402  0006E2  5A21               	subwfb	i2printf@width+1,f,c
 11403  0006E4  D004               	goto	i2l3679
 11404  0006E6                     i2l3677:
 11405                           
 11406                           ;doprnt.c: 1383: else
 11407                           ;doprnt.c: 1384: width = 0;
 11408  0006E6  0E00               	movlw	0
 11409  0006E8  6E21               	movwf	i2printf@width+1,c
 11410  0006EA  0E00               	movlw	0
 11411  0006EC  6E20               	movwf	i2printf@width,c
 11412  0006EE                     i2l3679:
 11413                           
 11414                           ;doprnt.c: 1387: if(flag & 0x04) {
 11415  0006EE  A41F               	btfss	i2printf@flag,2,c
 11416  0006F0  D014               	goto	i2l3691
 11417                           
 11418                           ;doprnt.c: 1392: if(flag & 0x03)
 11419  0006F2  C01F  F011         	movff	i2printf@flag,??i2_printf
 11420  0006F6  0E03               	movlw	3
 11421  0006F8  1611               	andwf	??i2_printf,f,c
 11422  0006FA  B4D8               	btfsc	status,2,c
 11423  0006FC  D003               	goto	i2l3685
 11424                           
 11425                           ;doprnt.c: 1393: (putch('-') );
 11426  0006FE  0E2D               	movlw	45
 11427  000700  EC3C  F014         	call	i2_putch
 11428  000704                     i2l3685:
 11429                           
 11430                           ;doprnt.c: 1415: if(width)
 11431  000704  5020               	movf	i2printf@width,w,c
 11432  000706  1021               	iorwf	i2printf@width+1,w,c
 11433  000708  B4D8               	btfsc	status,2,c
 11434  00070A  D01E               	goto	i2l3701
 11435                           
 11436                           ;doprnt.c: 1417: (putch('0') );
 11437                           
 11438                           ;doprnt.c: 1416: do
 11439  00070C  0E30               	movlw	48
 11440  00070E  EC3C  F014         	call	i2_putch
 11441                           
 11442                           ;doprnt.c: 1418: while(--width);
 11443  000712  0620               	decf	i2printf@width,f,c
 11444  000714  A0D8               	btfss	status,0,c
 11445  000716  0621               	decf	i2printf@width+1,f,c
 11446  000718  D7F5               	goto	i2l3685
 11447  00071A                     i2l3691:
 11448                           
 11449                           ;doprnt.c: 1422: {
 11450                           ;doprnt.c: 1424: if(width
 11451                           ;doprnt.c: 1428: )
 11452  00071A  5020               	movf	i2printf@width,w,c
 11453  00071C  1021               	iorwf	i2printf@width+1,w,c
 11454  00071E  B4D8               	btfsc	status,2,c
 11455  000720  D00A               	goto	i2l3697
 11456  000722                     i2l3693:
 11457                           
 11458                           ;doprnt.c: 1430: (putch(' ') );
 11459  000722  0E20               	movlw	32
 11460  000724  EC3C  F014         	call	i2_putch
 11461                           
 11462                           ;doprnt.c: 1431: while(--width);
 11463  000728  0620               	decf	i2printf@width,f,c
 11464  00072A  A0D8               	btfss	status,0,c
 11465  00072C  0621               	decf	i2printf@width+1,f,c
 11466  00072E  5020               	movf	i2printf@width,w,c
 11467  000730  1021               	iorwf	i2printf@width+1,w,c
 11468  000732  A4D8               	btfss	status,2,c
 11469  000734  D7F6               	goto	i2l3693
 11470  000736                     i2l3697:
 11471                           
 11472                           ;doprnt.c: 1438: if(flag & 0x03)
 11473  000736  C01F  F011         	movff	i2printf@flag,??i2_printf
 11474  00073A  0E03               	movlw	3
 11475  00073C  1611               	andwf	??i2_printf,f,c
 11476  00073E  B4D8               	btfsc	status,2,c
 11477  000740  D003               	goto	i2l3701
 11478                           
 11479                           ;doprnt.c: 1439: (putch('-') );
 11480  000742  0E2D               	movlw	45
 11481  000744  EC3C  F014         	call	i2_putch
 11482  000748                     i2l3701:
 11483                           
 11484                           ;doprnt.c: 1469: }
 11485                           ;doprnt.c: 1472: prec = c;
 11486  000748  C022  F01C         	movff	i2printf@c,i2printf@prec
 11487                           
 11488                           ;doprnt.c: 1474: while(prec--) {
 11489  00074C  D053               	goto	i2l3715
 11490  00074E                     i2l3703:
 11491                           
 11492                           ;doprnt.c: 1486: case 0xC0:
 11493                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 11494  00074E  501C               	movf	i2printf@prec,w,c
 11495  000750  0D02               	mullw	2
 11496  000752  0EC9               	movlw	low _dpowers
 11497  000754  24F3               	addwf	prodl,w,c
 11498  000756  6EF6               	movwf	tblptrl,c
 11499  000758  0EFD               	movlw	high _dpowers
 11500  00075A  20F4               	addwfc	prodh,w,c
 11501  00075C  6EF7               	movwf	tblptrh,c
 11502  00075E                     	if	0	;There are less than 3 active tblptr bytes
 11503  00075E                     	endif
 11504  00075E  0009               	tblrd		*+
 11505  000760  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 11506  000764  000A               	tblrd		*-
 11507  000766  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 11508  00076A  C01D  F001         	movff	i2printf@val,i2___lwdiv@dividend
 11509  00076E  C01E  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 11510  000772  ECC6  F011         	call	i2___lwdiv	;wreg free
 11511  000776  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 11512  00077A  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 11513  00077E  0E00               	movlw	0
 11514  000780  6E0B               	movwf	i2___lwmod@divisor+1,c
 11515  000782  0E0A               	movlw	10
 11516  000784  6E0A               	movwf	i2___lwmod@divisor,c
 11517  000786  EC7A  F012         	call	i2___lwmod	;wreg free
 11518  00078A  5008               	movf	?i2___lwmod,w,c
 11519  00078C  0F30               	addlw	48
 11520  00078E  6E22               	movwf	i2printf@c,c
 11521                           
 11522                           ;doprnt.c: 1491: break;
 11523  000790  D02E               	goto	i2l3713
 11524  000792                     i2l3705:
 11525                           
 11526                           ;doprnt.c: 1499: {
 11527                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 11528  000792  C01D  F001         	movff	i2printf@val,i2___lwdiv@dividend
 11529  000796  C01E  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
 11530  00079A  501C               	movf	i2printf@prec,w,c
 11531  00079C  0D02               	mullw	2
 11532  00079E  0ED3               	movlw	low _hexpowers
 11533  0007A0  24F3               	addwf	prodl,w,c
 11534  0007A2  6EF6               	movwf	tblptrl,c
 11535  0007A4  0EFD               	movlw	high _hexpowers
 11536  0007A6  20F4               	addwfc	prodh,w,c
 11537  0007A8  6EF7               	movwf	tblptrh,c
 11538  0007AA                     	if	0	;There are less than 3 active tblptr bytes
 11539  0007AA                     	endif
 11540  0007AA  0009               	tblrd		*+
 11541  0007AC  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 11542  0007B0  000A               	tblrd		*-
 11543  0007B2  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 11544  0007B6  ECC6  F011         	call	i2___lwdiv	;wreg free
 11545  0007BA  5001               	movf	?i2___lwdiv,w,c
 11546  0007BC  0B0F               	andlw	15
 11547  0007BE  6E17               	movwf	i2printf@idx,c
 11548                           
 11549                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 11550  0007C0  5017               	movf	i2printf@idx,w,c
 11551  0007C2  0D01               	mullw	1
 11552  0007C4  0E93               	movlw	low STR_46
 11553  0007C6  24F3               	addwf	prodl,w,c
 11554  0007C8  6EF6               	movwf	tblptrl,c
 11555  0007CA  0EFF               	movlw	high STR_46
 11556  0007CC  20F4               	addwfc	prodh,w,c
 11557  0007CE  6EF7               	movwf	tblptrh,c
 11558  0007D0                     	if	0	;There are less than 3 active tblptr bytes
 11559  0007D0                     	endif
 11560  0007D0  0008               	tblrd		*
 11561  0007D2  CFF5 F022          	movff	tablat,i2printf@c
 11562                           
 11563                           ;doprnt.c: 1523: }
 11564                           
 11565                           ;doprnt.c: 1508: }
 11566                           ;doprnt.c: 1510: break;
 11567  0007D6  D00B               	goto	i2l3713
 11568  0007D8                     i2l3711:
 11569  0007D8  501F               	movf	i2printf@flag,w,c
 11570  0007DA  0BC0               	andlw	192
 11571                           
 11572                           ; Switch size 1, requested type "space"
 11573                           ; Number of cases is 3, Range of values is 0 to 192
 11574                           ; switch strategies available:
 11575                           ; Name         Instructions Cycles
 11576                           ; simple_byte           10     6 (average)
 11577                           ;	Chosen strategy is simple_byte
 11578  0007DC  0A00               	xorlw	0	; case 0
 11579  0007DE  B4D8               	btfsc	status,2,c
 11580  0007E0  D7B6               	goto	i2l3703
 11581  0007E2  0A80               	xorlw	128	; case 128
 11582  0007E4  B4D8               	btfsc	status,2,c
 11583  0007E6  D7D5               	goto	i2l3705
 11584  0007E8  0A40               	xorlw	64	; case 192
 11585  0007EA  B4D8               	btfsc	status,2,c
 11586  0007EC  D7B0               	goto	i2l3703
 11587  0007EE                     i2l3713:
 11588                           
 11589                           ;doprnt.c: 1524: (putch(c) );
 11590  0007EE  5022               	movf	i2printf@c,w,c
 11591  0007F0  EC3C  F014         	call	i2_putch
 11592  0007F4                     i2l3715:
 11593  0007F4  061C               	decf	i2printf@prec,f,c
 11594  0007F6  281C               	incf	i2printf@prec,w,c
 11595  0007F8  A4D8               	btfss	status,2,c
 11596  0007FA  D7EE               	goto	i2l3711
 11597  0007FC                     i2l3717:
 11598  0007FC  C00D  FFF6         	movff	i2printf@f,tblptrl
 11599  000800  C00E  FFF7         	movff	i2printf@f+1,tblptrh
 11600  000804  4A0D               	infsnz	i2printf@f,f,c
 11601  000806  2A0E               	incf	i2printf@f+1,f,c
 11602  000808                     	if	0	;tblptru may be non-zero
 11603  000808                     	endif
 11604  000808                     	if	0	;tblptru may be non-zero
 11605  000808                     	endif
 11606  000808  0008               	tblrd		*
 11607  00080A  CFF5 F022          	movff	tablat,i2printf@c
 11608  00080E  5022               	movf	i2printf@c,w,c
 11609  000810  B4D8               	btfsc	status,2,c
 11610  000812  0012               	return	
 11611  000814  D638               	goto	i2l3567
 11612  000816                     __end_ofi2_printf:
 11613                           	opt stack 0
 11614                           pclatu	equ	0xFFB
 11615                           pclath	equ	0xFFA
 11616                           tblptru	equ	0xFF8
 11617                           tblptrh	equ	0xFF7
 11618                           tblptrl	equ	0xFF6
 11619                           tablat	equ	0xFF5
 11620                           prodh	equ	0xFF4
 11621                           prodl	equ	0xFF3
 11622                           intcon	equ	0xFF2
 11623                           intcon3	equ	0xFF0
 11624                           postinc0	equ	0xFEE
 11625                           fsr0h	equ	0xFEA
 11626                           fsr0l	equ	0xFE9
 11627                           wreg	equ	0xFE8
 11628                           plusw1	equ	0xFE3
 11629                           fsr1h	equ	0xFE2
 11630                           fsr1l	equ	0xFE1
 11631                           indf2	equ	0xFDF
 11632                           postinc2	equ	0xFDE
 11633                           postdec2	equ	0xFDD
 11634                           plusw2	equ	0xFDB
 11635                           fsr2h	equ	0xFDA
 11636                           fsr2l	equ	0xFD9
 11637                           status	equ	0xFD8
 11638                           
 11639 ;; *************** function i2_putch *****************
 11640 ;; Defined at:
 11641 ;;		line 25 in file "lcd.c"
 11642 ;; Parameters:    Size  Location     Type
 11643 ;;  data            1    wreg     unsigned char 
 11644 ;; Auto vars:     Size  Location     Type
 11645 ;;  data            1    2[COMRAM] unsigned char 
 11646 ;; Return value:  Size  Location     Type
 11647 ;;                  1    wreg      void 
 11648 ;; Registers used:
 11649 ;;		wreg, status,2, status,0, cstack
 11650 ;; Tracked objects:
 11651 ;;		On entry : 0/0
 11652 ;;		On exit  : 0/0
 11653 ;;		Unchanged: 0/0
 11654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11656 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11658 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11659 ;;Total ram usage:        1 bytes
 11660 ;; Hardware stack levels used:    1
 11661 ;; Hardware stack levels required when called:    1
 11662 ;; This function calls:
 11663 ;;		i2_lcdNibble
 11664 ;; This function is called by:
 11665 ;;		i2_printf
 11666 ;; This function uses a non-reentrant model
 11667 ;;
 11668                           
 11669                           	psect	text62
 11670  002878                     __ptext62:
 11671                           	opt stack 0
 11672  002878                     i2_putch:
 11673                           	opt stack 20
 11674                           
 11675                           ;incstack = 0
 11676                           ;i2putch@data stored from wreg
 11677  002878  6E03               	movwf	i2putch@data,c
 11678                           
 11679                           ;lcd.c: 26: LATDbits.LATD2 = 1;
 11680  00287A  848C               	bsf	3980,2,c	;volatile
 11681                           
 11682                           ;lcd.c: 27: lcdNibble(data);
 11683  00287C  5003               	movf	i2putch@data,w,c
 11684  00287E  EC9B  F011         	call	i2_lcdNibble
 11685  002882  0012               	return		;funcret
 11686  002884                     __end_ofi2_putch:
 11687                           	opt stack 0
 11688                           pclatu	equ	0xFFB
 11689                           pclath	equ	0xFFA
 11690                           tblptru	equ	0xFF8
 11691                           tblptrh	equ	0xFF7
 11692                           tblptrl	equ	0xFF6
 11693                           tablat	equ	0xFF5
 11694                           prodh	equ	0xFF4
 11695                           prodl	equ	0xFF3
 11696                           intcon	equ	0xFF2
 11697                           intcon3	equ	0xFF0
 11698                           postinc0	equ	0xFEE
 11699                           fsr0h	equ	0xFEA
 11700                           fsr0l	equ	0xFE9
 11701                           wreg	equ	0xFE8
 11702                           plusw1	equ	0xFE3
 11703                           fsr1h	equ	0xFE2
 11704                           fsr1l	equ	0xFE1
 11705                           indf2	equ	0xFDF
 11706                           postinc2	equ	0xFDE
 11707                           postdec2	equ	0xFDD
 11708                           plusw2	equ	0xFDB
 11709                           fsr2h	equ	0xFDA
 11710                           fsr2l	equ	0xFD9
 11711                           status	equ	0xFD8
 11712                           
 11713 ;; *************** function i2_isdigit *****************
 11714 ;; Defined at:
 11715 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
 11716 ;; Parameters:    Size  Location     Type
 11717 ;;  c               1    wreg     unsigned char 
 11718 ;; Auto vars:     Size  Location     Type
 11719 ;;  c               1    2[COMRAM] unsigned char 
 11720 ;; Return value:  Size  Location     Type
 11721 ;;		None               void
 11722 ;; Registers used:
 11723 ;;		wreg, status,2, status,0
 11724 ;; Tracked objects:
 11725 ;;		On entry : 0/0
 11726 ;;		On exit  : 0/0
 11727 ;;		Unchanged: 0/0
 11728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11730 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11731 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11732 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11733 ;;Total ram usage:        3 bytes
 11734 ;; Hardware stack levels used:    1
 11735 ;; This function calls:
 11736 ;;		Nothing
 11737 ;; This function is called by:
 11738 ;;		i2_printf
 11739 ;; This function uses a non-reentrant model
 11740 ;;
 11741                           
 11742                           	psect	text63
 11743  0027AC                     __ptext63:
 11744                           	opt stack 0
 11745  0027AC                     i2_isdigit:
 11746                           	opt stack 21
 11747                           
 11748                           ;incstack = 0
 11749                           ;i2isdigit@c stored from wreg
 11750  0027AC  6E03               	movwf	i2isdigit@c,c
 11751  0027AE  0E00               	movlw	0
 11752  0027B0  6E02               	movwf	i2_isdigit$1050,c
 11753  0027B2  0E3A               	movlw	58
 11754  0027B4  6003               	cpfslt	i2isdigit@c,c
 11755  0027B6  D005               	goto	i2l3219
 11756  0027B8  0E2F               	movlw	47
 11757  0027BA  6403               	cpfsgt	i2isdigit@c,c
 11758  0027BC  D002               	goto	i2l3219
 11759  0027BE  0E01               	movlw	1
 11760  0027C0  6E02               	movwf	i2_isdigit$1050,c
 11761  0027C2                     i2l3219:
 11762  0027C2  C002  F001         	movff	i2_isdigit$1050,??i2_isdigit
 11763  0027C6  3001               	rrcf	??i2_isdigit,w,c
 11764  0027C8  0012               	return	
 11765  0027CA                     __end_ofi2_isdigit:
 11766                           	opt stack 0
 11767                           pclatu	equ	0xFFB
 11768                           pclath	equ	0xFFA
 11769                           tblptru	equ	0xFF8
 11770                           tblptrh	equ	0xFF7
 11771                           tblptrl	equ	0xFF6
 11772                           tablat	equ	0xFF5
 11773                           prodh	equ	0xFF4
 11774                           prodl	equ	0xFF3
 11775                           intcon	equ	0xFF2
 11776                           intcon3	equ	0xFF0
 11777                           postinc0	equ	0xFEE
 11778                           fsr0h	equ	0xFEA
 11779                           fsr0l	equ	0xFE9
 11780                           wreg	equ	0xFE8
 11781                           plusw1	equ	0xFE3
 11782                           fsr1h	equ	0xFE2
 11783                           fsr1l	equ	0xFE1
 11784                           indf2	equ	0xFDF
 11785                           postinc2	equ	0xFDE
 11786                           postdec2	equ	0xFDD
 11787                           plusw2	equ	0xFDB
 11788                           fsr2h	equ	0xFDA
 11789                           fsr2l	equ	0xFD9
 11790                           status	equ	0xFD8
 11791                           
 11792 ;; *************** function i2___wmul *****************
 11793 ;; Defined at:
 11794 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
 11795 ;; Parameters:    Size  Location     Type
 11796 ;;  multiplier      2    0[COMRAM] unsigned int 
 11797 ;;  multiplicand    2    2[COMRAM] unsigned int 
 11798 ;; Auto vars:     Size  Location     Type
 11799 ;;  __wmul          2    4[COMRAM] unsigned int 
 11800 ;; Return value:  Size  Location     Type
 11801 ;;                  2    0[COMRAM] unsigned int 
 11802 ;; Registers used:
 11803 ;;		wreg, status,2, status,0, prodl, prodh
 11804 ;; Tracked objects:
 11805 ;;		On entry : 0/0
 11806 ;;		On exit  : 0/0
 11807 ;;		Unchanged: 0/0
 11808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11809 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11810 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11812 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11813 ;;Total ram usage:        6 bytes
 11814 ;; Hardware stack levels used:    1
 11815 ;; This function calls:
 11816 ;;		Nothing
 11817 ;; This function is called by:
 11818 ;;		_simulate
 11819 ;;		_HexDecToDec2
 11820 ;;		_WriteRun
 11821 ;;		i2_printf
 11822 ;; This function uses a non-reentrant model
 11823 ;;
 11824                           
 11825                           	psect	text64
 11826  002764                     __ptext64:
 11827                           	opt stack 0
 11828  002764                     i2___wmul:
 11829                           	opt stack 21
 11830                           
 11831                           ;incstack = 0
 11832  002764  5001               	movf	i2___wmul@multiplier,w,c
 11833  002766  0203               	mulwf	i2___wmul@multiplicand,c
 11834  002768  CFF3 F005          	movff	prodl,i2___wmul@product
 11835  00276C  CFF4 F006          	movff	prodh,i2___wmul@product+1
 11836  002770  5001               	movf	i2___wmul@multiplier,w,c
 11837  002772  0204               	mulwf	i2___wmul@multiplicand+1,c
 11838  002774  50F3               	movf	prodl,w,c
 11839  002776  2606               	addwf	i2___wmul@product+1,f,c
 11840  002778  5002               	movf	i2___wmul@multiplier+1,w,c
 11841  00277A  0203               	mulwf	i2___wmul@multiplicand,c
 11842  00277C  50F3               	movf	prodl,w,c
 11843  00277E  2606               	addwf	i2___wmul@product+1,f,c
 11844  002780  C005  F001         	movff	i2___wmul@product,?i2___wmul
 11845  002784  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 11846  002788  0012               	return	
 11847  00278A                     __end_ofi2___wmul:
 11848                           	opt stack 0
 11849                           pclatu	equ	0xFFB
 11850                           pclath	equ	0xFFA
 11851                           tblptru	equ	0xFF8
 11852                           tblptrh	equ	0xFF7
 11853                           tblptrl	equ	0xFF6
 11854                           tablat	equ	0xFF5
 11855                           prodh	equ	0xFF4
 11856                           prodl	equ	0xFF3
 11857                           intcon	equ	0xFF2
 11858                           intcon3	equ	0xFF0
 11859                           postinc0	equ	0xFEE
 11860                           fsr0h	equ	0xFEA
 11861                           fsr0l	equ	0xFE9
 11862                           wreg	equ	0xFE8
 11863                           plusw1	equ	0xFE3
 11864                           fsr1h	equ	0xFE2
 11865                           fsr1l	equ	0xFE1
 11866                           indf2	equ	0xFDF
 11867                           postinc2	equ	0xFDE
 11868                           postdec2	equ	0xFDD
 11869                           plusw2	equ	0xFDB
 11870                           fsr2h	equ	0xFDA
 11871                           fsr2l	equ	0xFD9
 11872                           status	equ	0xFD8
 11873                           
 11874 ;; *************** function i2___lwmod *****************
 11875 ;; Defined at:
 11876 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwmod.c"
 11877 ;; Parameters:    Size  Location     Type
 11878 ;;  dividend        2    7[COMRAM] unsigned int 
 11879 ;;  divisor         2    9[COMRAM] unsigned int 
 11880 ;; Auto vars:     Size  Location     Type
 11881 ;;  __lwmod         1   11[COMRAM] unsigned char 
 11882 ;; Return value:  Size  Location     Type
 11883 ;;                  2    7[COMRAM] unsigned int 
 11884 ;; Registers used:
 11885 ;;		wreg, status,2, status,0
 11886 ;; Tracked objects:
 11887 ;;		On entry : 0/0
 11888 ;;		On exit  : 0/0
 11889 ;;		Unchanged: 0/0
 11890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11891 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11892 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11894 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11895 ;;Total ram usage:        5 bytes
 11896 ;; Hardware stack levels used:    1
 11897 ;; This function calls:
 11898 ;;		Nothing
 11899 ;; This function is called by:
 11900 ;;		i2_printf
 11901 ;; This function uses a non-reentrant model
 11902 ;;
 11903                           
 11904                           	psect	text65
 11905  0024F4                     __ptext65:
 11906                           	opt stack 0
 11907  0024F4                     i2___lwmod:
 11908                           	opt stack 21
 11909                           
 11910                           ;incstack = 0
 11911  0024F4  500A               	movf	i2___lwmod@divisor,w,c
 11912  0024F6  100B               	iorwf	i2___lwmod@divisor+1,w,c
 11913  0024F8  B4D8               	btfsc	status,2,c
 11914  0024FA  D018               	goto	i2l948
 11915  0024FC  0E01               	movlw	1
 11916  0024FE  6E0C               	movwf	i2___lwmod@counter,c
 11917  002500  D004               	goto	i2l3251
 11918  002502                     i2l3249:
 11919  002502  90D8               	bcf	status,0,c
 11920  002504  360A               	rlcf	i2___lwmod@divisor,f,c
 11921  002506  360B               	rlcf	i2___lwmod@divisor+1,f,c
 11922  002508  2A0C               	incf	i2___lwmod@counter,f,c
 11923  00250A                     i2l3251:
 11924  00250A  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 11925  00250C  D7FA               	goto	i2l3249
 11926  00250E                     i2l3253:
 11927  00250E  500A               	movf	i2___lwmod@divisor,w,c
 11928  002510  5C08               	subwf	i2___lwmod@dividend,w,c
 11929  002512  500B               	movf	i2___lwmod@divisor+1,w,c
 11930  002514  5809               	subwfb	i2___lwmod@dividend+1,w,c
 11931  002516  A0D8               	btfss	status,0,c
 11932  002518  D004               	goto	i2l3257
 11933  00251A  500A               	movf	i2___lwmod@divisor,w,c
 11934  00251C  5E08               	subwf	i2___lwmod@dividend,f,c
 11935  00251E  500B               	movf	i2___lwmod@divisor+1,w,c
 11936  002520  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 11937  002522                     i2l3257:
 11938  002522  90D8               	bcf	status,0,c
 11939  002524  320B               	rrcf	i2___lwmod@divisor+1,f,c
 11940  002526  320A               	rrcf	i2___lwmod@divisor,f,c
 11941  002528  2E0C               	decfsz	i2___lwmod@counter,f,c
 11942  00252A  D7F1               	goto	i2l3253
 11943  00252C                     i2l948:
 11944  00252C  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 11945  002530  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 11946  002534  0012               	return		;funcret
 11947  002536                     __end_ofi2___lwmod:
 11948                           	opt stack 0
 11949                           pclatu	equ	0xFFB
 11950                           pclath	equ	0xFFA
 11951                           tblptru	equ	0xFF8
 11952                           tblptrh	equ	0xFF7
 11953                           tblptrl	equ	0xFF6
 11954                           tablat	equ	0xFF5
 11955                           prodh	equ	0xFF4
 11956                           prodl	equ	0xFF3
 11957                           intcon	equ	0xFF2
 11958                           intcon3	equ	0xFF0
 11959                           postinc0	equ	0xFEE
 11960                           fsr0h	equ	0xFEA
 11961                           fsr0l	equ	0xFE9
 11962                           wreg	equ	0xFE8
 11963                           plusw1	equ	0xFE3
 11964                           fsr1h	equ	0xFE2
 11965                           fsr1l	equ	0xFE1
 11966                           indf2	equ	0xFDF
 11967                           postinc2	equ	0xFDE
 11968                           postdec2	equ	0xFDD
 11969                           plusw2	equ	0xFDB
 11970                           fsr2h	equ	0xFDA
 11971                           fsr2l	equ	0xFD9
 11972                           status	equ	0xFD8
 11973                           
 11974 ;; *************** function i2___lwdiv *****************
 11975 ;; Defined at:
 11976 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
 11977 ;; Parameters:    Size  Location     Type
 11978 ;;  dividend        2    0[COMRAM] unsigned int 
 11979 ;;  divisor         2    2[COMRAM] unsigned int 
 11980 ;; Auto vars:     Size  Location     Type
 11981 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 11982 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 11983 ;; Return value:  Size  Location     Type
 11984 ;;                  2    0[COMRAM] unsigned int 
 11985 ;; Registers used:
 11986 ;;		wreg, status,2, status,0
 11987 ;; Tracked objects:
 11988 ;;		On entry : 0/0
 11989 ;;		On exit  : 0/0
 11990 ;;		Unchanged: 0/0
 11991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11992 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11993 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11995 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11996 ;;Total ram usage:        7 bytes
 11997 ;; Hardware stack levels used:    1
 11998 ;; This function calls:
 11999 ;;		Nothing
 12000 ;; This function is called by:
 12001 ;;		i2_printf
 12002 ;; This function uses a non-reentrant model
 12003 ;;
 12004                           
 12005                           	psect	text66
 12006  00238C                     __ptext66:
 12007                           	opt stack 0
 12008  00238C                     i2___lwdiv:
 12009                           	opt stack 21
 12010                           
 12011                           ;incstack = 0
 12012  00238C  0E00               	movlw	0
 12013  00238E  6E06               	movwf	i2___lwdiv@quotient+1,c
 12014  002390  0E00               	movlw	0
 12015  002392  6E05               	movwf	i2___lwdiv@quotient,c
 12016  002394  5003               	movf	i2___lwdiv@divisor,w,c
 12017  002396  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 12018  002398  B4D8               	btfsc	status,2,c
 12019  00239A  D01C               	goto	i2l938
 12020  00239C  0E01               	movlw	1
 12021  00239E  6E07               	movwf	i2___lwdiv@counter,c
 12022  0023A0  D004               	goto	i2l3231
 12023  0023A2                     i2l3229:
 12024  0023A2  90D8               	bcf	status,0,c
 12025  0023A4  3603               	rlcf	i2___lwdiv@divisor,f,c
 12026  0023A6  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 12027  0023A8  2A07               	incf	i2___lwdiv@counter,f,c
 12028  0023AA                     i2l3231:
 12029  0023AA  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 12030  0023AC  D7FA               	goto	i2l3229
 12031  0023AE                     i2l3233:
 12032  0023AE  90D8               	bcf	status,0,c
 12033  0023B0  3605               	rlcf	i2___lwdiv@quotient,f,c
 12034  0023B2  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 12035  0023B4  5003               	movf	i2___lwdiv@divisor,w,c
 12036  0023B6  5C01               	subwf	i2___lwdiv@dividend,w,c
 12037  0023B8  5004               	movf	i2___lwdiv@divisor+1,w,c
 12038  0023BA  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 12039  0023BC  A0D8               	btfss	status,0,c
 12040  0023BE  D005               	goto	i2l3241
 12041  0023C0  5003               	movf	i2___lwdiv@divisor,w,c
 12042  0023C2  5E01               	subwf	i2___lwdiv@dividend,f,c
 12043  0023C4  5004               	movf	i2___lwdiv@divisor+1,w,c
 12044  0023C6  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 12045  0023C8  8005               	bsf	i2___lwdiv@quotient,0,c
 12046  0023CA                     i2l3241:
 12047  0023CA  90D8               	bcf	status,0,c
 12048  0023CC  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 12049  0023CE  3203               	rrcf	i2___lwdiv@divisor,f,c
 12050  0023D0  2E07               	decfsz	i2___lwdiv@counter,f,c
 12051  0023D2  D7ED               	goto	i2l3233
 12052  0023D4                     i2l938:
 12053  0023D4  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 12054  0023D8  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 12055  0023DC  0012               	return		;funcret
 12056  0023DE                     __end_ofi2___lwdiv:
 12057                           	opt stack 0
 12058                           pclatu	equ	0xFFB
 12059                           pclath	equ	0xFFA
 12060                           tblptru	equ	0xFF8
 12061                           tblptrh	equ	0xFF7
 12062                           tblptrl	equ	0xFF6
 12063                           tablat	equ	0xFF5
 12064                           prodh	equ	0xFF4
 12065                           prodl	equ	0xFF3
 12066                           intcon	equ	0xFF2
 12067                           intcon3	equ	0xFF0
 12068                           postinc0	equ	0xFEE
 12069                           fsr0h	equ	0xFEA
 12070                           fsr0l	equ	0xFE9
 12071                           wreg	equ	0xFE8
 12072                           plusw1	equ	0xFE3
 12073                           fsr1h	equ	0xFE2
 12074                           fsr1l	equ	0xFE1
 12075                           indf2	equ	0xFDF
 12076                           postinc2	equ	0xFDE
 12077                           postdec2	equ	0xFDD
 12078                           plusw2	equ	0xFDB
 12079                           fsr2h	equ	0xFDA
 12080                           fsr2l	equ	0xFD9
 12081                           status	equ	0xFD8
 12082                           
 12083 ;; *************** function i2_lcdInst *****************
 12084 ;; Defined at:
 12085 ;;		line 20 in file "lcd.c"
 12086 ;; Parameters:    Size  Location     Type
 12087 ;;  data            1    wreg     unsigned char 
 12088 ;; Auto vars:     Size  Location     Type
 12089 ;;  data            1    2[COMRAM] unsigned char 
 12090 ;; Return value:  Size  Location     Type
 12091 ;;                  1    wreg      void 
 12092 ;; Registers used:
 12093 ;;		wreg, status,2, status,0, cstack
 12094 ;; Tracked objects:
 12095 ;;		On entry : 0/0
 12096 ;;		On exit  : 0/0
 12097 ;;		Unchanged: 0/0
 12098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12100 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12102 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12103 ;;Total ram usage:        1 bytes
 12104 ;; Hardware stack levels used:    1
 12105 ;; Hardware stack levels required when called:    1
 12106 ;; This function calls:
 12107 ;;		i2_lcdNibble
 12108 ;; This function is called by:
 12109 ;;		_simulate
 12110 ;;		_showInfo
 12111 ;;		_stopMoving
 12112 ;;		_PermLog
 12113 ;; This function uses a non-reentrant model
 12114 ;;
 12115                           
 12116                           	psect	text67
 12117  002884                     __ptext67:
 12118                           	opt stack 0
 12119  002884                     i2_lcdInst:
 12120                           	opt stack 21
 12121                           
 12122                           ;incstack = 0
 12123                           ;i2lcdInst@data stored from wreg
 12124  002884  6E03               	movwf	i2lcdInst@data,c
 12125                           
 12126                           ;lcd.c: 21: LATDbits.LATD2 = 0;
 12127  002886  948C               	bcf	3980,2,c	;volatile
 12128                           
 12129                           ;lcd.c: 22: lcdNibble(data);
 12130  002888  5003               	movf	i2lcdInst@data,w,c
 12131  00288A  EC9B  F011         	call	i2_lcdNibble
 12132  00288E  0012               	return		;funcret
 12133  002890                     __end_ofi2_lcdInst:
 12134                           	opt stack 0
 12135                           pclatu	equ	0xFFB
 12136                           pclath	equ	0xFFA
 12137                           tblptru	equ	0xFF8
 12138                           tblptrh	equ	0xFF7
 12139                           tblptrl	equ	0xFF6
 12140                           tablat	equ	0xFF5
 12141                           prodh	equ	0xFF4
 12142                           prodl	equ	0xFF3
 12143                           intcon	equ	0xFF2
 12144                           intcon3	equ	0xFF0
 12145                           postinc0	equ	0xFEE
 12146                           fsr0h	equ	0xFEA
 12147                           fsr0l	equ	0xFE9
 12148                           wreg	equ	0xFE8
 12149                           plusw1	equ	0xFE3
 12150                           fsr1h	equ	0xFE2
 12151                           fsr1l	equ	0xFE1
 12152                           indf2	equ	0xFDF
 12153                           postinc2	equ	0xFDE
 12154                           postdec2	equ	0xFDD
 12155                           plusw2	equ	0xFDB
 12156                           fsr2h	equ	0xFDA
 12157                           fsr2l	equ	0xFD9
 12158                           status	equ	0xFD8
 12159                           
 12160 ;; *************** function i2_lcdNibble *****************
 12161 ;; Defined at:
 12162 ;;		line 30 in file "lcd.c"
 12163 ;; Parameters:    Size  Location     Type
 12164 ;;  data            1    wreg     unsigned char 
 12165 ;; Auto vars:     Size  Location     Type
 12166 ;;  data            1    1[COMRAM] unsigned char 
 12167 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 12168 ;; Return value:  Size  Location     Type
 12169 ;;                  1    wreg      void 
 12170 ;; Registers used:
 12171 ;;		wreg, status,2, status,0
 12172 ;; Tracked objects:
 12173 ;;		On entry : 0/0
 12174 ;;		On exit  : 0/0
 12175 ;;		Unchanged: 0/0
 12176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12178 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12180 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12181 ;;Total ram usage:        2 bytes
 12182 ;; Hardware stack levels used:    1
 12183 ;; This function calls:
 12184 ;;		Nothing
 12185 ;; This function is called by:
 12186 ;;		i2_lcdInst
 12187 ;;		i2_putch
 12188 ;; This function uses a non-reentrant model
 12189 ;;
 12190                           
 12191                           	psect	text68
 12192  002336                     __ptext68:
 12193                           	opt stack 0
 12194  002336                     i2_lcdNibble:
 12195                           	opt stack 20
 12196                           
 12197                           ;incstack = 0
 12198                           ;i2lcdNibble@data stored from wreg
 12199  002336  6E02               	movwf	i2lcdNibble@data,c
 12200                           
 12201                           ;lcd.c: 32: char temp = data & 0xF0;
 12202  002338  5002               	movf	i2lcdNibble@data,w,c
 12203  00233A  0BF0               	andlw	240
 12204  00233C  6E01               	movwf	i2lcdNibble@temp,c
 12205                           
 12206                           ;lcd.c: 33: LATD = LATD & 0x0F;
 12207  00233E  508C               	movf	3980,w,c	;volatile
 12208  002340  0B0F               	andlw	15
 12209  002342  6E8C               	movwf	3980,c	;volatile
 12210                           
 12211                           ;lcd.c: 34: LATD = temp | LATD;
 12212  002344  5001               	movf	i2lcdNibble@temp,w,c
 12213  002346  108C               	iorwf	3980,w,c	;volatile
 12214  002348  6E8C               	movwf	3980,c	;volatile
 12215                           
 12216                           ;lcd.c: 36: LATDbits.LATD3 = 0;
 12217  00234A  968C               	bcf	3980,3,c	;volatile
 12218                           
 12219                           ;lcd.c: 37: _delay((unsigned long)((25)*(8000000/4000000.0)));
 12220  00234C  0E10               	movlw	16
 12221  00234E                     i2u371_47:
 12222  00234E  2EE8               	decfsz	wreg,f,c
 12223  002350  D7FE               	bra	i2u371_47
 12224  002352  D000               	nop2	
 12225                           
 12226                           ;lcd.c: 38: LATDbits.LATD3 = 1;
 12227  002354  868C               	bsf	3980,3,c	;volatile
 12228                           
 12229                           ;lcd.c: 39: _delay((unsigned long)((25)*(8000000/4000000.0)));
 12230  002356  0E10               	movlw	16
 12231  002358                     i2u372_47:
 12232  002358  2EE8               	decfsz	wreg,f,c
 12233  00235A  D7FE               	bra	i2u372_47
 12234  00235C  D000               	nop2	
 12235                           
 12236                           ;lcd.c: 41: data = data << 4;
 12237  00235E  3802               	swapf	i2lcdNibble@data,w,c
 12238  002360  0BF0               	andlw	240
 12239  002362  6E02               	movwf	i2lcdNibble@data,c
 12240                           
 12241                           ;lcd.c: 43: temp = data & 0xF0;
 12242  002364  5002               	movf	i2lcdNibble@data,w,c
 12243  002366  0BF0               	andlw	240
 12244  002368  6E01               	movwf	i2lcdNibble@temp,c
 12245                           
 12246                           ;lcd.c: 44: LATD = LATD & 0x0F;
 12247  00236A  508C               	movf	3980,w,c	;volatile
 12248  00236C  0B0F               	andlw	15
 12249  00236E  6E8C               	movwf	3980,c	;volatile
 12250                           
 12251                           ;lcd.c: 45: LATD = temp | LATD;
 12252  002370  5001               	movf	i2lcdNibble@temp,w,c
 12253  002372  108C               	iorwf	3980,w,c	;volatile
 12254  002374  6E8C               	movwf	3980,c	;volatile
 12255                           
 12256                           ;lcd.c: 47: LATDbits.LATD3 = 0;
 12257  002376  968C               	bcf	3980,3,c	;volatile
 12258                           
 12259                           ;lcd.c: 48: _delay((unsigned long)((25)*(8000000/4000000.0)));
 12260  002378  0E10               	movlw	16
 12261  00237A                     i2u373_47:
 12262  00237A  2EE8               	decfsz	wreg,f,c
 12263  00237C  D7FE               	bra	i2u373_47
 12264  00237E  D000               	nop2	
 12265                           
 12266                           ;lcd.c: 49: LATDbits.LATD3 = 1;
 12267  002380  868C               	bsf	3980,3,c	;volatile
 12268                           
 12269                           ;lcd.c: 50: _delay((unsigned long)((25)*(8000000/4000000.0)));
 12270  002382  0E10               	movlw	16
 12271  002384                     i2u374_47:
 12272  002384  2EE8               	decfsz	wreg,f,c
 12273  002386  D7FE               	bra	i2u374_47
 12274  002388  D000               	nop2	
 12275  00238A  0012               	return		;funcret
 12276  00238C                     __end_ofi2_lcdNibble:
 12277                           	opt stack 0
 12278                           pclatu	equ	0xFFB
 12279                           pclath	equ	0xFFA
 12280                           tblptru	equ	0xFF8
 12281                           tblptrh	equ	0xFF7
 12282                           tblptrl	equ	0xFF6
 12283                           tablat	equ	0xFF5
 12284                           prodh	equ	0xFF4
 12285                           prodl	equ	0xFF3
 12286                           intcon	equ	0xFF2
 12287                           intcon3	equ	0xFF0
 12288                           postinc0	equ	0xFEE
 12289                           fsr0h	equ	0xFEA
 12290                           fsr0l	equ	0xFE9
 12291                           wreg	equ	0xFE8
 12292                           plusw1	equ	0xFE3
 12293                           fsr1h	equ	0xFE2
 12294                           fsr1l	equ	0xFE1
 12295                           indf2	equ	0xFDF
 12296                           postinc2	equ	0xFDE
 12297                           postdec2	equ	0xFDD
 12298                           plusw2	equ	0xFDB
 12299                           fsr2h	equ	0xFDA
 12300                           fsr2l	equ	0xFD9
 12301                           status	equ	0xFD8
 12302                           
 12303 ;; *************** function _captureKeypad *****************
 12304 ;; Defined at:
 12305 ;;		line 13 in file "modules.c"
 12306 ;; Parameters:    Size  Location     Type
 12307 ;;		None
 12308 ;; Auto vars:     Size  Location     Type
 12309 ;;  keypress        1    2[COMRAM] unsigned char 
 12310 ;; Return value:  Size  Location     Type
 12311 ;;                  2    0[COMRAM] unsigned int 
 12312 ;; Registers used:
 12313 ;;		wreg, status,2, status,0
 12314 ;; Tracked objects:
 12315 ;;		On entry : 0/0
 12316 ;;		On exit  : 0/0
 12317 ;;		Unchanged: 0/0
 12318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12319 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12320 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12322 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12323 ;;Total ram usage:        3 bytes
 12324 ;; Hardware stack levels used:    1
 12325 ;; This function calls:
 12326 ;;		Nothing
 12327 ;; This function is called by:
 12328 ;;		_simulate
 12329 ;;		_showInfo
 12330 ;;		_PermLog
 12331 ;; This function uses a non-reentrant model
 12332 ;;
 12333                           
 12334                           	psect	text69
 12335  0027CA                     __ptext69:
 12336                           	opt stack 0
 12337  0027CA                     _captureKeypad:
 12338                           	opt stack 21
 12339                           
 12340                           ;modules.c: 14: (INTCONbits.GIE = 0);
 12341                           
 12342                           ;incstack = 0
 12343  0027CA  9EF2               	bcf	intcon,7,c	;volatile
 12344  0027CC                     i2l222:
 12345  0027CC  A281               	btfss	3969,1,c	;volatile
 12346  0027CE  D7FE               	goto	i2l222
 12347                           
 12348                           ;modules.c: 16: unsigned char keypress = (PORTB & 0xF0) >> 4;
 12349  0027D0  3881               	swapf	3969,w,c	;volatile
 12350  0027D2  0B0F               	andlw	15
 12351  0027D4  0B0F               	andlw	15
 12352  0027D6  6E03               	movwf	captureKeypad@keypress,c
 12353  0027D8                     i2l225:
 12354  0027D8  B281               	btfsc	3969,1,c	;volatile
 12355  0027DA  D7FE               	goto	i2l225
 12356                           
 12357                           ;modules.c: 18: INT1IF = 0;
 12358  0027DC  90F0               	bcf	intcon3,0,c	;volatile
 12359                           
 12360                           ;modules.c: 19: (INTCONbits.GIE = 1);
 12361  0027DE  8EF2               	bsf	intcon,7,c	;volatile
 12362                           
 12363                           ;modules.c: 20: return keypress;
 12364  0027E0  C003  F001         	movff	captureKeypad@keypress,?_captureKeypad
 12365  0027E4  6A02               	clrf	?_captureKeypad+1,c
 12366  0027E6  0012               	return		;funcret
 12367  0027E8                     __end_of_captureKeypad:
 12368                           	opt stack 0
 12369                           pclatu	equ	0xFFB
 12370                           pclath	equ	0xFFA
 12371                           tblptru	equ	0xFF8
 12372                           tblptrh	equ	0xFF7
 12373                           tblptrl	equ	0xFF6
 12374                           tablat	equ	0xFF5
 12375                           prodh	equ	0xFF4
 12376                           prodl	equ	0xFF3
 12377                           intcon	equ	0xFF2
 12378                           intcon3	equ	0xFF0
 12379                           postinc0	equ	0xFEE
 12380                           fsr0h	equ	0xFEA
 12381                           fsr0l	equ	0xFE9
 12382                           wreg	equ	0xFE8
 12383                           plusw1	equ	0xFE3
 12384                           fsr1h	equ	0xFE2
 12385                           fsr1l	equ	0xFE1
 12386                           indf2	equ	0xFDF
 12387                           postinc2	equ	0xFDE
 12388                           postdec2	equ	0xFDD
 12389                           plusw2	equ	0xFDB
 12390                           fsr2h	equ	0xFDA
 12391                           fsr2l	equ	0xFD9
 12392                           status	equ	0xFD8
 12393                           
 12394 ;; *************** function _ReadRun *****************
 12395 ;; Defined at:
 12396 ;;		line 66 in file "eeprom.c"
 12397 ;; Parameters:    Size  Location     Type
 12398 ;;  backruns        1    wreg     unsigned char 
 12399 ;;  sorted          2    2[COMRAM] PTR unsigned char 
 12400 ;;		 -> PermLog@sorted(4), 
 12401 ;;  time            2    4[COMRAM] PTR unsigned int 
 12402 ;;		 -> PermLog@time(2), 
 12403 ;; Auto vars:     Size  Location     Type
 12404 ;;  backruns        1   10[COMRAM] unsigned char 
 12405 ;;  add             2   11[COMRAM] unsigned int 
 12406 ;; Return value:  Size  Location     Type
 12407 ;;                  1    wreg      void 
 12408 ;; Registers used:
 12409 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12410 ;; Tracked objects:
 12411 ;;		On entry : 0/0
 12412 ;;		On exit  : 0/0
 12413 ;;		Unchanged: 0/0
 12414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12415 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12416 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12417 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12418 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12419 ;;Total ram usage:       11 bytes
 12420 ;; Hardware stack levels used:    1
 12421 ;; Hardware stack levels required when called:    1
 12422 ;; This function calls:
 12423 ;;		_back
 12424 ;;		i2_ReadEE
 12425 ;; This function is called by:
 12426 ;;		_PermLog
 12427 ;; This function uses a non-reentrant model
 12428 ;;
 12429                           
 12430                           	psect	text70
 12431  0011D8                     __ptext70:
 12432                           	opt stack 0
 12433  0011D8                     _ReadRun:
 12434                           	opt stack 21
 12435                           
 12436                           ;incstack = 0
 12437                           ;ReadRun@backruns stored from wreg
 12438  0011D8  6E0B               	movwf	ReadRun@backruns,c
 12439                           
 12440                           ;eeprom.c: 67: unsigned int add = back(backruns) * 5;
 12441  0011DA  500B               	movf	ReadRun@backruns,w,c
 12442  0011DC  ECF4  F013         	call	_back
 12443  0011E0  6E07               	movwf	??_ReadRun& (0+255),c
 12444  0011E2  5007               	movf	??_ReadRun,w,c
 12445  0011E4  0D05               	mullw	5
 12446  0011E6  CFF3 F00C          	movff	prodl,ReadRun@add
 12447  0011EA  CFF4 F00D          	movff	prodh,ReadRun@add+1
 12448                           
 12449                           ;eeprom.c: 68: *time = ReadEE(add++ *8);
 12450  0011EE  C00C  F007         	movff	ReadRun@add,??_ReadRun
 12451  0011F2  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 12452  0011F6  90D8               	bcf	status,0,c
 12453  0011F8  3607               	rlcf	??_ReadRun,f,c
 12454  0011FA  3608               	rlcf	??_ReadRun+1,f,c
 12455  0011FC  90D8               	bcf	status,0,c
 12456  0011FE  3607               	rlcf	??_ReadRun,f,c
 12457  001200  3608               	rlcf	??_ReadRun+1,f,c
 12458  001202  90D8               	bcf	status,0,c
 12459  001204  3607               	rlcf	??_ReadRun,f,c
 12460  001206  3608               	rlcf	??_ReadRun+1,f,c
 12461  001208  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 12462  00120C  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 12463  001210  EC0E  F014         	call	i2_ReadEE	;wreg free
 12464  001214  6E09               	movwf	(??_ReadRun+2)& (0+255),c
 12465  001216  6A0A               	clrf	(??_ReadRun+3)& (0+255),c
 12466  001218  C005  FFD9         	movff	ReadRun@time,fsr2l
 12467  00121C  C006  FFDA         	movff	ReadRun@time+1,fsr2h
 12468  001220  C009  FFDE         	movff	??_ReadRun+2,postinc2
 12469  001224  C00A  FFDD         	movff	??_ReadRun+3,postdec2
 12470  001228  4A0C               	infsnz	ReadRun@add,f,c
 12471  00122A  2A0D               	incf	ReadRun@add+1,f,c
 12472                           
 12473                           ;eeprom.c: 69: sorted[0] = ReadEE(add++ *8);
 12474  00122C  C00C  F007         	movff	ReadRun@add,??_ReadRun
 12475  001230  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 12476  001234  90D8               	bcf	status,0,c
 12477  001236  3607               	rlcf	??_ReadRun,f,c
 12478  001238  3608               	rlcf	??_ReadRun+1,f,c
 12479  00123A  90D8               	bcf	status,0,c
 12480  00123C  3607               	rlcf	??_ReadRun,f,c
 12481  00123E  3608               	rlcf	??_ReadRun+1,f,c
 12482  001240  90D8               	bcf	status,0,c
 12483  001242  3607               	rlcf	??_ReadRun,f,c
 12484  001244  3608               	rlcf	??_ReadRun+1,f,c
 12485  001246  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 12486  00124A  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 12487  00124E  EC0E  F014         	call	i2_ReadEE	;wreg free
 12488  001252  C003  FFD9         	movff	ReadRun@sorted,fsr2l
 12489  001256  C004  FFDA         	movff	ReadRun@sorted+1,fsr2h
 12490  00125A  6EDF               	movwf	indf2,c
 12491  00125C  4A0C               	infsnz	ReadRun@add,f,c
 12492  00125E  2A0D               	incf	ReadRun@add+1,f,c
 12493                           
 12494                           ;eeprom.c: 70: sorted[1] = ReadEE(add++ *8);
 12495  001260  EE20 F001          	lfsr	2,1
 12496  001264  5003               	movf	ReadRun@sorted,w,c
 12497  001266  26D9               	addwf	fsr2l,f,c
 12498  001268  5004               	movf	ReadRun@sorted+1,w,c
 12499  00126A  22DA               	addwfc	fsr2h,f,c
 12500  00126C  C00C  F007         	movff	ReadRun@add,??_ReadRun
 12501  001270  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 12502  001274  90D8               	bcf	status,0,c
 12503  001276  3607               	rlcf	??_ReadRun,f,c
 12504  001278  3608               	rlcf	??_ReadRun+1,f,c
 12505  00127A  90D8               	bcf	status,0,c
 12506  00127C  3607               	rlcf	??_ReadRun,f,c
 12507  00127E  3608               	rlcf	??_ReadRun+1,f,c
 12508  001280  90D8               	bcf	status,0,c
 12509  001282  3607               	rlcf	??_ReadRun,f,c
 12510  001284  3608               	rlcf	??_ReadRun+1,f,c
 12511  001286  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 12512  00128A  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 12513  00128E  EC0E  F014         	call	i2_ReadEE	;wreg free
 12514  001292  6EDF               	movwf	indf2,c
 12515  001294  4A0C               	infsnz	ReadRun@add,f,c
 12516  001296  2A0D               	incf	ReadRun@add+1,f,c
 12517                           
 12518                           ;eeprom.c: 71: sorted[2] = ReadEE(add++ *8);
 12519  001298  EE20 F002          	lfsr	2,2
 12520  00129C  5003               	movf	ReadRun@sorted,w,c
 12521  00129E  26D9               	addwf	fsr2l,f,c
 12522  0012A0  5004               	movf	ReadRun@sorted+1,w,c
 12523  0012A2  22DA               	addwfc	fsr2h,f,c
 12524  0012A4  C00C  F007         	movff	ReadRun@add,??_ReadRun
 12525  0012A8  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 12526  0012AC  90D8               	bcf	status,0,c
 12527  0012AE  3607               	rlcf	??_ReadRun,f,c
 12528  0012B0  3608               	rlcf	??_ReadRun+1,f,c
 12529  0012B2  90D8               	bcf	status,0,c
 12530  0012B4  3607               	rlcf	??_ReadRun,f,c
 12531  0012B6  3608               	rlcf	??_ReadRun+1,f,c
 12532  0012B8  90D8               	bcf	status,0,c
 12533  0012BA  3607               	rlcf	??_ReadRun,f,c
 12534  0012BC  3608               	rlcf	??_ReadRun+1,f,c
 12535  0012BE  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 12536  0012C2  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 12537  0012C6  EC0E  F014         	call	i2_ReadEE	;wreg free
 12538  0012CA  6EDF               	movwf	indf2,c
 12539  0012CC  4A0C               	infsnz	ReadRun@add,f,c
 12540  0012CE  2A0D               	incf	ReadRun@add+1,f,c
 12541                           
 12542                           ;eeprom.c: 72: sorted[3] = ReadEE(add++ *8);
 12543  0012D0  EE20 F003          	lfsr	2,3
 12544  0012D4  5003               	movf	ReadRun@sorted,w,c
 12545  0012D6  26D9               	addwf	fsr2l,f,c
 12546  0012D8  5004               	movf	ReadRun@sorted+1,w,c
 12547  0012DA  22DA               	addwfc	fsr2h,f,c
 12548  0012DC  C00C  F007         	movff	ReadRun@add,??_ReadRun
 12549  0012E0  C00D  F008         	movff	ReadRun@add+1,??_ReadRun+1
 12550  0012E4  90D8               	bcf	status,0,c
 12551  0012E6  3607               	rlcf	??_ReadRun,f,c
 12552  0012E8  3608               	rlcf	??_ReadRun+1,f,c
 12553  0012EA  90D8               	bcf	status,0,c
 12554  0012EC  3607               	rlcf	??_ReadRun,f,c
 12555  0012EE  3608               	rlcf	??_ReadRun+1,f,c
 12556  0012F0  90D8               	bcf	status,0,c
 12557  0012F2  3607               	rlcf	??_ReadRun,f,c
 12558  0012F4  3608               	rlcf	??_ReadRun+1,f,c
 12559  0012F6  C007  F001         	movff	??_ReadRun,i2ReadEE@address
 12560  0012FA  C008  F002         	movff	??_ReadRun+1,i2ReadEE@address+1
 12561  0012FE  EC0E  F014         	call	i2_ReadEE	;wreg free
 12562  001302  6EDF               	movwf	indf2,c
 12563  001304  4A0C               	infsnz	ReadRun@add,f,c
 12564  001306  2A0D               	incf	ReadRun@add+1,f,c
 12565  001308  0012               	return		;funcret
 12566  00130A                     __end_of_ReadRun:
 12567                           	opt stack 0
 12568                           pclatu	equ	0xFFB
 12569                           pclath	equ	0xFFA
 12570                           tblptru	equ	0xFF8
 12571                           tblptrh	equ	0xFF7
 12572                           tblptrl	equ	0xFF6
 12573                           tablat	equ	0xFF5
 12574                           prodh	equ	0xFF4
 12575                           prodl	equ	0xFF3
 12576                           intcon	equ	0xFF2
 12577                           intcon3	equ	0xFF0
 12578                           postinc0	equ	0xFEE
 12579                           fsr0h	equ	0xFEA
 12580                           fsr0l	equ	0xFE9
 12581                           wreg	equ	0xFE8
 12582                           plusw1	equ	0xFE3
 12583                           fsr1h	equ	0xFE2
 12584                           fsr1l	equ	0xFE1
 12585                           indf2	equ	0xFDF
 12586                           postinc2	equ	0xFDE
 12587                           postdec2	equ	0xFDD
 12588                           plusw2	equ	0xFDB
 12589                           fsr2h	equ	0xFDA
 12590                           fsr2l	equ	0xFD9
 12591                           status	equ	0xFD8
 12592                           
 12593 ;; *************** function i2_ReadEE *****************
 12594 ;; Defined at:
 12595 ;;		line 16 in file "eeprom.c"
 12596 ;; Parameters:    Size  Location     Type
 12597 ;;  address         2    0[COMRAM] unsigned int 
 12598 ;; Auto vars:     Size  Location     Type
 12599 ;;		None
 12600 ;; Return value:  Size  Location     Type
 12601 ;;                  1    wreg      unsigned char 
 12602 ;; Registers used:
 12603 ;;		wreg, status,2
 12604 ;; Tracked objects:
 12605 ;;		On entry : 0/0
 12606 ;;		On exit  : 0/0
 12607 ;;		Unchanged: 0/0
 12608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12609 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12612 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12613 ;;Total ram usage:        2 bytes
 12614 ;; Hardware stack levels used:    1
 12615 ;; This function calls:
 12616 ;;		Nothing
 12617 ;; This function is called by:
 12618 ;;		_ReadRun
 12619 ;; This function uses a non-reentrant model
 12620 ;;
 12621                           
 12622                           	psect	text71
 12623  00281C                     __ptext71:
 12624                           	opt stack 0
 12625  00281C                     i2_ReadEE:
 12626                           	opt stack 21
 12627                           
 12628                           ;eeprom.c: 19: EEADRH = (unsigned char) (address >> 8);
 12629                           
 12630                           ;incstack = 0
 12631  00281C  5002               	movf	i2ReadEE@address+1,w,c
 12632  00281E  6EAA               	movwf	4010,c	;volatile
 12633                           
 12634                           ;eeprom.c: 20: EEADR = (unsigned char) address;
 12635  002820  C001  FFA9         	movff	i2ReadEE@address,4009	;volatile
 12636                           
 12637                           ;eeprom.c: 22: EECON1bits.EEPGD = 0;
 12638  002824  9EA6               	bcf	4006,7,c	;volatile
 12639                           
 12640                           ;eeprom.c: 23: EECON1bits.CFGS = 0;
 12641  002826  9CA6               	bcf	4006,6,c	;volatile
 12642                           
 12643                           ;eeprom.c: 24: EECON1bits.RD = 1;
 12644  002828  80A6               	bsf	4006,0,c	;volatile
 12645  00282A                     i2l417:
 12646  00282A  B0A6               	btfsc	4006,0,c	;volatile
 12647  00282C  D7FE               	goto	i2l417
 12648                           
 12649                           ;eeprom.c: 30: return EEDATA;
 12650  00282E  50A8               	movf	4008,w,c	;volatile
 12651  002830  0012               	return	
 12652  002832                     __end_ofi2_ReadEE:
 12653                           	opt stack 0
 12654                           pclatu	equ	0xFFB
 12655                           pclath	equ	0xFFA
 12656                           tblptru	equ	0xFF8
 12657                           tblptrh	equ	0xFF7
 12658                           tblptrl	equ	0xFF6
 12659                           tablat	equ	0xFF5
 12660                           prodh	equ	0xFF4
 12661                           prodl	equ	0xFF3
 12662                           intcon	equ	0xFF2
 12663                           intcon3	equ	0xFF0
 12664                           postinc0	equ	0xFEE
 12665                           fsr0h	equ	0xFEA
 12666                           fsr0l	equ	0xFE9
 12667                           wreg	equ	0xFE8
 12668                           plusw1	equ	0xFE3
 12669                           fsr1h	equ	0xFE2
 12670                           fsr1l	equ	0xFE1
 12671                           indf2	equ	0xFDF
 12672                           postinc2	equ	0xFDE
 12673                           postdec2	equ	0xFDD
 12674                           plusw2	equ	0xFDB
 12675                           fsr2h	equ	0xFDA
 12676                           fsr2l	equ	0xFD9
 12677                           status	equ	0xFD8
 12678                           
 12679 ;; *************** function _back *****************
 12680 ;; Defined at:
 12681 ;;		line 57 in file "eeprom.c"
 12682 ;; Parameters:    Size  Location     Type
 12683 ;;  runs            1    wreg     unsigned char 
 12684 ;; Auto vars:     Size  Location     Type
 12685 ;;  runs            1    0[COMRAM] unsigned char 
 12686 ;;  result          1    1[COMRAM] unsigned char 
 12687 ;; Return value:  Size  Location     Type
 12688 ;;                  1    wreg      unsigned char 
 12689 ;; Registers used:
 12690 ;;		wreg, status,2, status,0
 12691 ;; Tracked objects:
 12692 ;;		On entry : 0/0
 12693 ;;		On exit  : 0/0
 12694 ;;		Unchanged: 0/0
 12695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12697 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12699 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12700 ;;Total ram usage:        2 bytes
 12701 ;; Hardware stack levels used:    1
 12702 ;; This function calls:
 12703 ;;		Nothing
 12704 ;; This function is called by:
 12705 ;;		_ReadRun
 12706 ;; This function uses a non-reentrant model
 12707 ;;
 12708                           
 12709                           	psect	text72
 12710  0027E8                     __ptext72:
 12711                           	opt stack 0
 12712  0027E8                     _back:
 12713                           	opt stack 21
 12714                           
 12715                           ;incstack = 0
 12716                           ;back@runs stored from wreg
 12717  0027E8  6E01               	movwf	back@runs,c
 12718                           
 12719                           ;eeprom.c: 59: unsigned char result = Latest + 4 - runs;
 12720  0027EA  5001               	movf	back@runs,w,c
 12721  0027EC  0800               	sublw	0
 12722  0027EE  0100               	movlb	0	; () banked
 12723  0027F0  25DB               	addwf	_Latest& (0+255),w,b
 12724  0027F2  0F04               	addlw	4
 12725  0027F4  6E02               	movwf	back@result,c
 12726                           
 12727                           ;eeprom.c: 60: if (result > 4) {
 12728  0027F6  0E04               	movlw	4
 12729  0027F8  6402               	cpfsgt	back@result,c
 12730  0027FA  D002               	goto	i2l3933
 12731                           
 12732                           ; BSR set to: 0
 12733                           ;eeprom.c: 61: result -= 4;
 12734  0027FC  0E04               	movlw	4
 12735  0027FE  5E02               	subwf	back@result,f,c
 12736  002800                     i2l3933:
 12737                           
 12738                           ; BSR set to: 0
 12739                           ;eeprom.c: 62: }
 12740                           ;eeprom.c: 63: return result;
 12741  002800  5002               	movf	back@result,w,c
 12742  002802  0012               	return	
 12743  002804                     __end_of_back:
 12744                           	opt stack 0
 12745                           pclatu	equ	0xFFB
 12746                           pclath	equ	0xFFA
 12747                           tblptru	equ	0xFF8
 12748                           tblptrh	equ	0xFF7
 12749                           tblptrl	equ	0xFF6
 12750                           tablat	equ	0xFF5
 12751                           prodh	equ	0xFF4
 12752                           prodl	equ	0xFF3
 12753                           intcon	equ	0xFF2
 12754                           intcon3	equ	0xFF0
 12755                           postinc0	equ	0xFEE
 12756                           fsr0h	equ	0xFEA
 12757                           fsr0l	equ	0xFE9
 12758                           wreg	equ	0xFE8
 12759                           plusw1	equ	0xFE3
 12760                           fsr1h	equ	0xFE2
 12761                           fsr1l	equ	0xFE1
 12762                           indf2	equ	0xFDF
 12763                           postinc2	equ	0xFDE
 12764                           postdec2	equ	0xFDD
 12765                           plusw2	equ	0xFDB
 12766                           fsr2h	equ	0xFDA
 12767                           fsr2l	equ	0xFD9
 12768                           status	equ	0xFD8
 12769                           pclatu	equ	0xFFB
 12770                           pclath	equ	0xFFA
 12771                           tblptru	equ	0xFF8
 12772                           tblptrh	equ	0xFF7
 12773                           tblptrl	equ	0xFF6
 12774                           tablat	equ	0xFF5
 12775                           prodh	equ	0xFF4
 12776                           prodl	equ	0xFF3
 12777                           intcon	equ	0xFF2
 12778                           intcon3	equ	0xFF0
 12779                           postinc0	equ	0xFEE
 12780                           fsr0h	equ	0xFEA
 12781                           fsr0l	equ	0xFE9
 12782                           wreg	equ	0xFE8
 12783                           plusw1	equ	0xFE3
 12784                           fsr1h	equ	0xFE2
 12785                           fsr1l	equ	0xFE1
 12786                           indf2	equ	0xFDF
 12787                           postinc2	equ	0xFDE
 12788                           postdec2	equ	0xFDD
 12789                           plusw2	equ	0xFDB
 12790                           fsr2h	equ	0xFDA
 12791                           fsr2l	equ	0xFD9
 12792                           status	equ	0xFD8
 12793                           
 12794                           	psect	rparam
 12795  0000                     pclatu	equ	0xFFB
 12796                           pclath	equ	0xFFA
 12797                           tblptru	equ	0xFF8
 12798                           tblptrh	equ	0xFF7
 12799                           tblptrl	equ	0xFF6
 12800                           tablat	equ	0xFF5
 12801                           prodh	equ	0xFF4
 12802                           prodl	equ	0xFF3
 12803                           intcon	equ	0xFF2
 12804                           intcon3	equ	0xFF0
 12805                           postinc0	equ	0xFEE
 12806                           fsr0h	equ	0xFEA
 12807                           fsr0l	equ	0xFE9
 12808                           wreg	equ	0xFE8
 12809                           plusw1	equ	0xFE3
 12810                           fsr1h	equ	0xFE2
 12811                           fsr1l	equ	0xFE1
 12812                           indf2	equ	0xFDF
 12813                           postinc2	equ	0xFDE
 12814                           postdec2	equ	0xFDD
 12815                           plusw2	equ	0xFDB
 12816                           fsr2h	equ	0xFDA
 12817                           fsr2l	equ	0xFD9
 12818                           status	equ	0xFD8
 12819                           
 12820                           	psect	temp
 12821  00007E                     btemp:
 12822                           	opt stack 0
 12823  00007E                     	ds	1
 12824  0000                     int$flags	set	btemp
 12825                           pclatu	equ	0xFFB
 12826                           pclath	equ	0xFFA
 12827                           tblptru	equ	0xFF8
 12828                           tblptrh	equ	0xFF7
 12829                           tblptrl	equ	0xFF6
 12830                           tablat	equ	0xFF5
 12831                           prodh	equ	0xFF4
 12832                           prodl	equ	0xFF3
 12833                           intcon	equ	0xFF2
 12834                           intcon3	equ	0xFF0
 12835                           postinc0	equ	0xFEE
 12836                           fsr0h	equ	0xFEA
 12837                           fsr0l	equ	0xFE9
 12838                           wreg	equ	0xFE8
 12839                           plusw1	equ	0xFE3
 12840                           fsr1h	equ	0xFE2
 12841                           fsr1l	equ	0xFE1
 12842                           indf2	equ	0xFDF
 12843                           postinc2	equ	0xFDE
 12844                           postdec2	equ	0xFDD
 12845                           plusw2	equ	0xFDB
 12846                           fsr2h	equ	0xFDA
 12847                           fsr2l	equ	0xFD9
 12848                           status	equ	0xFD8


Data Sizes:
    Strings     547
    Constant    18
    Data        0
    BSS         48
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    108     125
    BANK0           128     61      92
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 27
		 -> STR_45(CODE[17]), STR_44(CODE[17]), STR_43(CODE[18]), STR_42(CODE[22]), 
		 -> STR_41(CODE[4]), STR_40(CODE[3]), STR_39(CODE[4]), STR_38(CODE[5]), 
		 -> STR_37(CODE[4]), STR_36(CODE[18]), STR_35(CODE[20]), STR_34(CODE[16]), 
		 -> STR_33(CODE[21]), STR_32(CODE[16]), STR_31(CODE[21]), STR_30(CODE[16]), 
		 -> STR_29(CODE[20]), STR_28(CODE[16]), STR_27(CODE[21]), STR_26(CODE[23]), 
		 -> STR_25(CODE[24]), STR_24(CODE[21]), STR_23(CODE[24]), STR_22(CODE[24]), 
		 -> STR_21(CODE[25]), STR_20(CODE[19]), STR_19(CODE[18]), STR_18(CODE[25]), 
		 -> STR_17(CODE[25]), STR_16(CODE[27]), STR_15(CODE[3]), STR_14(CODE[3]), 
		 -> STR_13(CODE[3]), STR_12(CODE[5]), STR_11(CODE[3]), STR_10(CODE[3]), 
		 -> STR_9(CODE[3]), STR_8(CODE[4]), STR_7(CODE[3]), STR_6(CODE[3]), 
		 -> STR_5(CODE[3]), STR_4(CODE[4]), STR_3(CODE[5]), STR_2(CODE[24]), 
		 -> STR_1(CODE[9]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    WriteRun@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> simulate@sorted(COMRAM[4]), 

    ReadRun@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> PermLog@sorted(COMRAM[4]), 

    ReadRun@time	PTR unsigned int  size(2) Largest target is 2
		 -> PermLog@time(COMRAM[2]), 

    check9@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> testAD@sorted(BANK0[4]), simulate@sorted(COMRAM[4]), 

    checkC@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> testAD@sorted(BANK0[4]), simulate@sorted(COMRAM[4]), 

    checkAA@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> testAD@sorted(BANK0[4]), simulate@sorted(COMRAM[4]), 

    stopMoving$552	PTR const unsigned char  size(2) Largest target is 20
		 -> STR_36(CODE[18]), STR_35(CODE[20]), 

    CCW90@port	PTR int  size(2) Largest target is 6
		 -> simulate@portCCW(COMRAM[6]), 

    CW90@port	PTR int  size(2) Largest target is 6
		 -> simulate@portCW(COMRAM[6]), 

    PWMC@port	PTR int  size(2) Largest target is 6
		 -> intrpt@portCW(COMRAM[6]), simulate@portCCW(COMRAM[6]), simulate@portCW(COMRAM[6]), 

    getTime@time	PTR unsigned char  size(2) Largest target is 7
		 -> time(COMRAM[7]), 

    showInfo@sorted	PTR unsigned char  size(2) Largest target is 4
		 -> PermLog@sorted(COMRAM[4]), simulate@sorted(COMRAM[4]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _intrpt in COMRAM

    _intrpt->_simulate
    _simulate->_showInfo
    _simulate->i2_check9
    _simulate->i2_checkAA
    _simulate->i2_checkC
    i2_getTime->i2_I2C_Master_Read
    i2_getTime->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    i2_checkC->i2_checkV
    i2_checkAA->i2_checkV
    i2_check9->i2_checkV
    i2_printV->i2_printf
    i2_checkV->i2___ftge
    i2___ftmul->i2___awtoft
    i2___ftge->i2___ftmul
    i2___awtoft->i2___ftpack
    _stopMoving->i2_printf
    _WriteRun->i2___wmul
    _HexDecToDec2->i2___wmul
    _CW90->_PWMC
    _CCW90->_PWMC
    _PWMC->___awdiv
    _PermLog->_showInfo
    _showInfo->i2_printf
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble
    _ReadRun->_back
    _ReadRun->i2_ReadEE

Critical Paths under _main in BANK0

    _main->_testAD
    _testAD->_check9
    _testAD->_checkAA
    _testAD->_checkC
    _checkC->_checkV
    _checkAA->_checkV
    _check9->_checkV
    _printV->_printf
    _checkV->___ftge
    ___ftmul->___awtoft
    ___ftge->___ftmul
    ___awtoft->___ftpack
    _showRTC->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _getTime->_I2C_Master_Read
    _getTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _initialize->_I2C_Master_Init
    _initLatest->_ReadEE
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _intrpt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _intrpt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _intrpt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _intrpt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _intrpt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _intrpt in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _intrpt in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _intrpt in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _intrpt in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _intrpt in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _intrpt in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _intrpt in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _intrpt in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _intrpt in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _intrpt in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _intrpt in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   59951
                                             59 BANK0      2     2      0
                         _initialize
                            _lcdInst
                             _printf
                            _showRTC
                             _testAD
 ---------------------------------------------------------------------------------
 (1) _testAD                                              12    12      0   49232
                                             47 BANK0     12    12      0
                             _check9
                            _checkAA
                             _checkC
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _checkC                                               6     4      2   14807
                                             41 BANK0      6     4      2
                             _checkV
                             _printV
                             _printf
 ---------------------------------------------------------------------------------
 (2) _checkAA                                              6     4      2   14807
                                             41 BANK0      6     4      2
                             _checkV
                             _printV
                             _printf
 ---------------------------------------------------------------------------------
 (2) _check9                                               6     4      2   14807
                                             41 BANK0      6     4      2
                             _checkV
                             _printV
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printV                                               2     0      2    4752
                                             38 BANK0      2     0      2
                             _printf
 ---------------------------------------------------------------------------------
 (3) _checkV                                               5     3      2    5326
                                             36 BANK0      5     3      2
                                 _AD
                           ___awtoft
                             ___ftge
                            ___ftmul
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    2548
                                             12 BANK0     15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     264
                                             27 BANK0      9     3      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    2211
                                              8 BANK0      4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    1992
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _AD                                                   5     3      2      22
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _showRTC                                              2     2      0    5124
                                             38 BANK0      2     2      0
                            _getTime
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              30    22      8    4516
                                             12 BANK0     26    18      8
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     517
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     418
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _getTime                                              3     1      2     473
                                              3 BANK0      3     1      2
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2     214
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0     944
                    _I2C_Master_Init
                            _initLCD
                         _initLatest
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _initLatest                                           0     0      0     298
                             _ReadEE
 ---------------------------------------------------------------------------------
 (3) _ReadEE                                               2     0      2     298
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _intrpt                                              23    23      0   58241
                                             85 COMRAM    23    23      0
                               _PWMC
                            _PermLog
                           _simulate
                         _stopMoving
 ---------------------------------------------------------------------------------
 (8) _simulate                                            38    38      0   44321
                                             47 COMRAM    38    38      0
                              _CCW90
                               _CW90
                       _HexDecToDec2
                           _WriteRun
                      _captureKeypad
                           _showInfo
                         _stopMoving
                           i2___wmul
                           i2_check9
                          i2_checkAA
                           i2_checkC
                          i2_getTime
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_getTime                                            3     1      2     283
                                              3 COMRAM     3     1      2
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (10) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (10) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (10) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (10) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (11) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i2_checkC                                             6     4      2    8363
                                             41 COMRAM     6     4      2
                           i2_checkV
                           i2_printV
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_checkAA                                            6     4      2    8363
                                             41 COMRAM     6     4      2
                           i2_checkV
                           i2_printV
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_check9                                             6     4      2    8363
                                             41 COMRAM     6     4      2
                           i2_checkV
                           i2_printV
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_printV                                            2     0      2    3338
                                             34 COMRAM     2     0      2
                           i2_printf
 ---------------------------------------------------------------------------------
 (10) i2_checkV                                            5     3      2    1672
                                             36 COMRAM     5     3      2
                               i2_AD
                         i2___awtoft
                           i2___ftge
                          i2___ftmul
 ---------------------------------------------------------------------------------
 (11) i2___ftmul                                          15     9      6     765
                                             12 COMRAM    15     9      6
                         i2___awtoft (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (11) i2___ftge                                            9     3      6     188
                                             27 COMRAM     9     3      6
                         i2___awtoft (ARG)
                          i2___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___awtoft                                          4     1      3     530
                                              8 COMRAM     4     1      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (12) i2___ftpack                                          8     3      5     387
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (11) i2_AD                                                5     3      2      22
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (8) _stopMoving                                           3     3      0    3419
                                             34 COMRAM     3     3      0
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _WriteRun                                             8     4      4    1621
                                              6 COMRAM     8     4      4
                            _WriteEE
                           i2___wmul
 ---------------------------------------------------------------------------------
 (10) _WriteEE                                             3     0      3     834
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) _HexDecToDec2                                         9     7      2     711
                                              6 COMRAM     9     7      2
                           i2___wmul
 ---------------------------------------------------------------------------------
 (9) _CW90                                                 8     6      2    2399
                                             21 COMRAM     8     6      2
                               _PWMC
 ---------------------------------------------------------------------------------
 (9) _CCW90                                                8     6      2    2399
                                             21 COMRAM     8     6      2
                               _PWMC
 ---------------------------------------------------------------------------------
 (10) _PWMC                                               40    34      6    2247
                                              8 COMRAM    13     7      6
                            ___awdiv
 ---------------------------------------------------------------------------------
 (11) ___awdiv                                             8     4      4     428
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (8) _PermLog                                             10    10      0    8112
                                             47 COMRAM    10    10      0
                            _ReadRun
                      _captureKeypad
                           _showInfo
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) _showInfo                                            13     9      4    3876
                                             34 COMRAM    13     9      4
                      _captureKeypad
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (9) i2_printf                                            26    22      4    3216
                                             12 COMRAM    22    18      4
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     365
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (9) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (10) _captureKeypad                                       3     1      2      23
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (9) _ReadRun                                             11     7      4     618
                                              2 COMRAM    11     7      4
                               _back
                           i2_ReadEE
 ---------------------------------------------------------------------------------
 (10) i2_ReadEE                                            2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (10) _back                                                2     2      0      68
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initialize
     _I2C_Master_Init
       ___lldiv
     _initLCD
       _lcdInst
         _lcdNibble
     _initLatest
       _ReadEE
     _lcdInst
       _lcdNibble
   _lcdInst
     _lcdNibble
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
     _putch
       _lcdNibble
   _showRTC
     _getTime
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _testAD
     _check9
       _checkV
         _AD
         ___awtoft
           ___ftpack
         ___ftge
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       _printV
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
     _checkAA
       _checkV
         _AD
         ___awtoft
           ___ftpack
         ___ftge
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       _printV
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
     _checkC
       _checkV
         _AD
         ___awtoft
           ___ftpack
         ___ftge
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       _printV
         _printf
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           ___wmul
           _isdigit
           _putch
             _lcdNibble
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         ___wmul
         _isdigit
         _putch
           _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble

 _intrpt (ROOT)
   _PWMC
     ___awdiv
   _PermLog
     _ReadRun
       _back
       i2_ReadEE
     _captureKeypad
     _showInfo
       _captureKeypad
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _simulate
     _CCW90
       _PWMC
         ___awdiv
     _CW90
       _PWMC
         ___awdiv
     _HexDecToDec2
       i2___wmul
     _WriteRun
       _WriteEE
       i2___wmul
     _captureKeypad
     _showInfo
       _captureKeypad
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     _stopMoving
       i2_lcdInst
         i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2___wmul
     i2_check9
       i2_checkV
         i2_AD
         i2___awtoft
           i2___ftpack
         i2___ftge
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftmul (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
         i2___ftmul
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
       i2_printV
         i2_printf
           i2___lwdiv
           i2___lwmod
             i2___lwdiv (ARG)
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_checkAA
       i2_checkV
         i2_AD
         i2___awtoft
           i2___ftpack
         i2___ftge
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftmul (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
         i2___ftmul
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
       i2_printV
         i2_printf
           i2___lwdiv
           i2___lwmod
             i2___lwdiv (ARG)
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_checkC
       i2_checkV
         i2_AD
         i2___awtoft
           i2___ftpack
         i2___ftge
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftmul (ARG)
             i2___awtoft (ARG)
               i2___ftpack
             i2___ftpack (ARG)
         i2___ftmul
           i2___awtoft (ARG)
             i2___ftpack
           i2___ftpack (ARG)
       i2_printV
         i2_printf
           i2___lwdiv
           i2___lwmod
             i2___lwdiv (ARG)
           i2___wmul
           i2_isdigit
           i2_putch
             i2_lcdNibble
       i2_printf
         i2___lwdiv
         i2___lwmod
           i2___lwdiv (ARG)
         i2___wmul
         i2_isdigit
         i2_putch
           i2_lcdNibble
     i2_getTime
       i2_I2C_Master_Read
         i2_I2C_Master_Wait
       i2_I2C_Master_Start
         i2_I2C_Master_Wait
       i2_I2C_Master_Stop
         i2_I2C_Master_Wait
       i2_I2C_Master_Write
         i2_I2C_Master_Wait
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble
   _stopMoving
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2___lwdiv
       i2___lwmod
         i2___lwdiv (ARG)
       i2___wmul
       i2_isdigit
       i2_putch
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     3D      5C       5       71.9%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     6C      7D       1       99.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      D9      34        0.0%
DATA                 0      0      D9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Mar 30 22:39:41 2017

         i2_I2C_Master_Start 28BC           i2_I2C_Master_Write 289A                           _AD 2536  
               ___awdiv@sign 0006          ___wmul@multiplicand 0082           i2___lwdiv@dividend 0001  
                __CFG_BORV$3 000000                   i2___awtoft 2570                   i2___ftpack 1858  
               __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000                 __CFG_CP2$OFF 000000  
               __CFG_CP3$OFF 000000                  __CFG_OSC$HS 000000                          ?_AD 0080  
                        l305 2548                          l330 1CC8                          l331 1CFC  
                        l324 1E82                          l417 2814                          l337 1D4C  
                        l338 1D80                          l369 2832                          l755 13E2  
                        l938 1EFA                          l948 2274                          l885 1846  
               __CFG_CPB$OFF 000000                          _PEN 007E2A                 __CFG_CPD$OFF 000000  
                        _SEN 007E28          ?i2_I2C_Master_Start 0001          ?i2_I2C_Master_Write 0002  
                        wreg 000FE8                         ??_AD 0082                 __CFG_LVP$OFF 000000  
               __CFG_WDT$OFF 000000                         l3101 1346                         l3111 13D4  
                       l3103 1376                         l3123 1408                         l3107 1396  
                       l3133 1EAA                         l3117 13EC                         l3109 13C6  
                       l3135 1EB6                         l3303 0162                         l3145 1EEC  
                       l3137 1EBC                         l3161 2266                         l3153 2230  
                       l3081 2696                         l3401 03E4                         l3305 017A  
                       l3313 019A                         l4115 1C36                         l3155 223C  
                       l3411 0452                         l3331 022E                         l3315 01D2  
                       l4125 1C64                         l3157 2242                         l3333 0234  
                       l3309 0192                         l3413 045E                         l4061 1D5E  
                       l4119 1C40                         l3407 0432                         l3327 0212  
                       l3263 0020                         l3095 1324                         l3409 044A  
                       l3345 026A                         l3361 02A6                         l3273 0050  
                       l3441 10EE                         l4073 1CB8                         l3347 0270  
                       l3363 02BE                         l3267 0034                         l3099 1338  
                       l3435 10B4                         l4059 1D3C                         l4091 1E60  
                       l4075 1CDA                         l3381 033C                         l3373 0318  
                       l3293 0124                         l3269 0046                         l3541 1754  
                       l3375 0322                         l3295 0130                         l3287 00F8  
                       l3279 0080                         l3455 113C                         l4087 1E44  
                       l3393 037E                         l3369 02E0                         l3297 0136  
                       l3289 00FE                         l3529 24CC                         l3537 1714  
                       l3465 117A                         l4089 1E4E                         l3387 0358  
                       l3299 014E                         l3547 1798                         l3459 115A  
                       l3389 0364                         l3397 0392                         l3469 1198  
                       l3399 0398                         l4631 24A2                         l4635 24A8  
                       l3943 17CA                         l3945 17DA                         l3873 266E  
                       l3955 1834                         l3947 17E0                         l3891 19A0  
                       l3883 1930                         l3885 1938                         _ADFM 007E07  
                       l3899 262E                         _ADON 007E10                         _CW90 20D8  
                       STR_1 FFD6                         STR_2 FE89                         STR_3 FFD1  
                       STR_4 FFF1                         STR_5 FFF8                         STR_6 FFF5  
                       STR_7 FFFB                         STR_8 FFED                         STR_9 FFF8  
                       _LATA 000F89                         u3110 266C                         _LATB 000F8A  
                       _LATC 000F8B                         _LATD 000F8C                         _LATE 000F8D  
                       u2411 1090                         u2431 10CA                   i2checkAA@V 002E  
                       u3285 22AE                         u3607 1A40                         u3617 1BE8  
                       u3627 242E                         u3637 2462                         u3647 21D4  
                       u3657 21DE                         i2_AD 26A0                         u3667 220A  
                       _RCEN 007E2B                         u3677 2214                         u3597 2494  
                       _PWMC 150A                checkAA@sorted 00A9                         _back 27E8  
                       _main 246C                 ___ftpack@arg 0080                         _mode 0075  
               ___ftpack@exp 0083                         _time 0077                         fsr0h 000FEA  
                       fsr1h 000FE2           i2___lwdiv@quotient 0005                         fsr2h 000FDA  
                       fsr0l 000FE9                         indf2 000FDF                         fsr1l 000FE1  
                       fsr2l 000FD9                         btemp 007E         ??i2_I2C_Master_Start 0002  
               i2___ftge@ff1 001C                 i2___ftge@ff2 001F         ??i2_I2C_Master_Write 0004  
                       prodh 000FF4                         prodl 000FF3              ReadRun@backruns 000B  
                       start 000E                __CFG_IESO$OFF 000000         __end_of_HexDecToDec2 2426  
               simulate@stop 0032                   ReadRun@add 000C              __end_ofi2_putch 2884  
               i2___awtoft@c 0009                __CFG_MCLRE$ON 000000                 ___ftmul@cntr 0099  
               i2___ftmul@f1 000D                 i2___ftmul@f2 0010                 ___param_bank 000000  
               ___ftmul@sign 009A                   i2getTime@i 0006                  i2_lcdNibble 2336  
            __end_of_ReadRun 130A              __end_of_PermLog 16D4                        ?_CW90 0016  
                      ?i2_AD 0001             ?_I2C_Master_Init 008D             ?_I2C_Master_Read 0001  
                      ?_PWMC 0009             ?_I2C_Master_Wait 0001             ?_I2C_Master_Stop 0001  
                      ?_back 0001                        ?_main 0001                        _ACKEN 007E2C  
                      _ACKDT 007E2D                        _CCW90 2146              __end_of___awdiv 1E0E  
                      _EEADR 000FA9                        STR_10 FFF5                        STR_11 FFFB  
                      STR_12 FFE4                        STR_20 FF4A                        STR_13 FFF8  
                      STR_21 FDF6                        STR_30 FFC6                        STR_14 FFF5  
                      STR_22 FE71                        STR_15 FFFB                        STR_31 FEF8  
                      STR_23 FE41                        STR_32 FFC6                        STR_40 FFEE  
                      STR_24 FF0D                        STR_16 FDDB                        STR_41 FFF1  
                      STR_33 FECE                        STR_25 FE59                        STR_17 FE0F  
                      STR_34 FFC6                        STR_42 FEB8                        STR_26 FEA1  
                      STR_18 FE28                        STR_19 FF81                        STR_43 FF5D  
                      STR_35 FF22                        STR_27 FEE3                        STR_28 FFC6  
                      STR_44 FFA4                        STR_36 FF6F                        STR_37 FFE9  
                      STR_45 FFB5                        STR_29 FF36                        STR_38 FFDF  
                      STR_46 FF93                        STR_39 FFE5              __end_of_WriteEE 2764  
            __end_of___lldiv 1858              __end_of___ftmul 11D8              ___awdiv@divisor 0003  
                      _LATC0 007C58                        _LATC1 007C59                        _LATC2 007C5A  
                      _LATC6 007C5E              __end_of___lwdiv 1F04              __end_of___lwmod 227E  
                      i2l114 0950                        i2l222 27CC                        i2l118 09AC  
                      i2l150 0EDC                        i2l134 0EA6                        i2l225 27D8  
                      i2l305 26AE                        i2l153 0EDA                        i2l137 0DC6  
                      i2l330 1FB8                        i2l331 1FE6                        i2l324 20CE  
                      i2l158 0ED6                        i2l423 275A                        i2l440 16CC  
                      i2l417 282A                        i2l337 202E                        i2l338 205C  
                      i2l267 1542                        i2l287 25DE                        i2l369 2846  
                      i2l755 18E6                        i2l938 23D4                        i2l948 252C  
            ___awdiv@counter 0005              __end_of_checkAA 1E8C                        _PORTB 000F81  
                      _TRISA 000F92                        _TRISB 000F93                        _TRISC 000F94  
                      _TRISD 000F95                        _TRISE 000F96                __CFG_PWRT$OFF 000000  
              __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000                simulate@F3104 00C9  
              simulate@F3106 00C3                __CFG_WRT2$OFF 000000                simulate@F3093 0071  
              simulate@F3095 006D                simulate@F3097 00D7                __CFG_WRT3$OFF 000000  
            __end_of_lcdInst 2878               __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000  
            __end_of_getTime 1C82               __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000  
             __CFG_EBTR3$OFF 000000                __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000  
              __CFG_WRTD$OFF 000000              __end_of_initLCD 246C               __CFG_EBTRB$OFF 000000  
                 i2isdigit@c 0003                ___awtoft@sign 008B              __end_of_dpowers FDD3  
           __end_ofi2_ReadEE 2832              __end_of_isdigit 26A0                ___ftpack@sign 0084  
                      _putch 2858                        pclath 000FFA              __end_of_showRTC 1BF8  
                      tablat 000FF5             __end_ofi2___ftge 1AE0             __end_ofi2___wmul 278A  
           __end_ofi2_check9 2066             __end_ofi2_checkC 1FF0                        plusw1 000FE3  
                      plusw2 000FDB             __end_ofi2_checkV 1B6E                        status 000FD8  
              simulate@start 0046               __CFG_PBADEN$ON 000000                i2printf@width 0020  
         __size_ofi2___ftmul 00F4             __end_ofi2_printV 26F2             __end_ofi2_printf 0816  
         __size_ofi2___lwdiv 0052                 __end_of_CW90 2146           __size_ofi2___lwmod 0042  
               __end_ofi2_AD 26CA                  ReadRun@time 0005           __size_ofi2_checkAA 0072  
               __end_of_PWMC 15FC              __initialization 26F2                 __end_of_back 2804  
         __size_ofi2_lcdInst 000C                 __end_of_main 24B0           __size_ofi2_getTime 0076  
              i2___ftmul@exp 0016                   i2printf@ap 0018                   i2printf@cp 0015  
              ReadEE@address 0080                       ??_CW90 0018                       ??i2_AD 0003  
         __size_ofi2_isdigit 001E                       ??_PWMC 000F                  ?i2___awtoft 0009  
                ?i2___ftpack 0001                       ??_back 0001                       ??_main 00BB  
                     ?_CCW90 0016                __activetblptr 000002                checkV@channel 00A6  
          ?_I2C_Master_Start 0001            ?_I2C_Master_Write 0081                    CCW90@port 0016  
         ??_I2C_Master_Start 0081                       _ADCON0 000FC2                       _ADCON1 000FC1  
         ??_I2C_Master_Write 0083                       _ADRESH 000FC4                       _EEADRH 000FAA  
                     _ADRESL 000FC3                       _EEDATA 000FA8                       _EECON2 000FA7  
           ___awdiv@dividend 0001              i2lcdNibble@data 0002             __end_of___awtoft 24F4  
                     ?_putch 0001             __end_of___ftpack 1416              i2lcdNibble@temp 0001  
                     _INT1IE 007F83                       _INT1IF 007F80             __end_of_WriteRun 107A  
                     _INT2IE 007F84                       _INT2IF 007F81                       _CVRCON 000FB5  
                     i2l4005 2738                       i2l3231 23AA                       i2l3241 23CA  
                     i2l3233 23AE                       i2l3251 250A                       i2l3219 27C2  
                     i2l4203 0BB2                       i2l3229 23A2                       i2l3253 250E  
                     i2l4221 0CA6                       i2l3501 1DD0                       i2l4215 0C6A  
                     i2l3191 18B4                       i2l3183 1876                       i2l4311 1FC8  
                     i2l3257 2522                       i2l3249 2502                       i2l3601 0560  
                     i2l4233 0D1E                       i2l4209 0C32                       i2l3513 1DF6  
                     i2l4161 0F3A                       i2l3193 18D2                       i2l3185 1880  
                     i2l3603 0572                       i2l4227 0CE2                       i2l4235 0D28  
                     i2l4147 25C4                       i2l3195 18DC                       i2l3187 189E  
                     i2l3179 1868                       i2l4323 2020                       i2l4411 0944  
                     i2l4403 0922                       i2l3701 0748                       i2l3613 05A8  
                     i2l4237 0D60                       i2l3517 1E04                       i2l3509 1DEC  
                     i2l4325 203E                       i2l4309 1FAA                       i2l4421 097E  
                     i2l3703 074E                       i2l3711 07D8                       i2l3631 0618  
                     i2l3607 0584                       i2l4511 1600                       i2l4271 1F3A  
                     i2l3705 0792                       i2l3713 07EE                       i2l3609 0596  
                     i2l3617 05AE                       i2l4281 1F5E                       i2l4601 0E66  
                     i2l3715 07F4                       i2l3651 0666                       i2l3635 0632  
                     i2l3619 05E2                       i2l3571 0496                       i2l4195 0B76  
                     i2l4523 1638                       i2l3491 1DAE                       i2l3811 1534  
                     i2l4275 1F42                       i2l3637 0636                       i2l3573 04A4  
                     i2l3717 07FC                       i2l4197 0B84                       i2l3485 1D9E  
                     i2l4293 2096                       i2l4429 09A0                       i2l4605 0E8E  
                     i2l3591 0536                       i2l3583 04D8                       i2l3567 0486  
                     i2l4527 1644                       i2l3831 159C                       i2l3823 156C  
                     i2l3727 2584                       i2l3735 1A80                       i2l4295 20A0  
                     i2l4447 09FC                       i2l4439 09DA                       i2l4615 0EBE  
                     i2l3673 06C2                       i2l3649 0662                       i2l3665 0692  
                     i2l3593 053A                       i2l3577 04AA                       i2l4545 16C8  
                     i2l3497 1DC4                       i2l3841 15D6                       i2l3745 1ADC  
                     i2l3761 1466                       i2l4297 20B0                       i2l4449 0A08  
                     i2l4609 0EAE                       i2l3691 071A                       i2l3667 06A8  
                     i2l3499 1DCC                       i2l3739 1AB0                       i2l3755 143E  
                     i2l4379 087C                       i2l3933 2800                       i2l3693 0722  
                     i2l3685 0704                       i2l3677 06E6                       i2l3597 0550  
                     i2l3845 15E4                       i2l4477 0ACE                       i2l4573 0DCC  
                     i2l3679 06EE                       i2l3599 055A                       i2l3839 15CC  
                     i2l3775 1498                       i2l4591 0E1A                       i2l3697 0736  
                     i2l3849 15F4                       i2l3785 14C0                       i2l3779 14A8  
                     i2l4595 0E40                       i2l4587 0DF4                       i2l4579 0DE2  
                     i2l3789 14D0                       i2l3975 1B64                       i2l3967 1B00  
                     i2l3983 26DC                       i2l3969 1B06                       u290_41 1426  
                     u292_41 144E                    ??i2_putch 0003                       _SSPADD 000FC8  
                     _TRISC3 007CA3                       _TRISC4 007CA4                       _SSPBUF 000FC9  
                  AD@channel 0084                checkV@voltage 00A7                    ??_ReadRun 0007  
                     _ReadEE 2804                    ??_PermLog 0030                       _Latest 00DB  
             __CFG_XINST$OFF 000000        __end_of_captureKeypad 27E8                       ___ftge 16D4  
                     ___wmul 25E0                       _check9 1D06                       _checkC 1C82  
                  ??___awdiv 0005                       _checkV 1906               __CFG_STVREN$ON 000000  
                  ??_WriteEE 0004                    ??___lldiv 0088                    ??___ftmul 0092  
                  ??___lwdiv 0084                    ??___lwmod 008B                    ??_checkAA 00AB  
                     clear_0 26F8                       clear_1 2704             ___awdiv@quotient 0007  
                     _intrpt 0008                       _testAD 19AC                       _printV 2616  
                  ??_lcdInst 0082                       _printf 0012                    ??_getTime 0085  
      ___ftmul@f3_as_product 0096                  PermLog@time 0037                    ??_initLCD 0083  
                  ??_isdigit 0080            __end_ofi2___ftmul 150A             __end_of_showInfo 0D6A  
          __end_ofi2___lwdiv 23DE                 __mediumconst FDC8            __end_ofi2___lwmod 2536  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
           __end_of_simulate 0B42            __end_ofi2_checkAA 20D8                    ??_showRTC 00A6  
          __end_ofi2_lcdInst 2890            __end_ofi2_getTime 1F7A               simulate@period 0050  
             simulate@portCW 0036        __size_of_HexDecToDec2 0048            __end_ofi2_isdigit 27CA  
             simulate@sorted 0052                   __accesstop 0080      __end_of__initialization 270A  
        __size_ofi2___awtoft 0038          __size_ofi2___ftpack 00AE                   ___ftge@ff1 009B  
                 ___ftge@ff2 009E                __end_of_CCW90 21B4                ___rparam_used 000001  
                 ___awtoft@c 0088               i2___ftpack@arg 0001               i2___ftpack@exp 0004  
                 ___ftmul@f1 008C                   ___ftmul@f2 008F           i2___lwmod@dividend 0008  
             __pcstackCOMRAM 0001               i2___ftmul@cntr 001A               i2___ftmul@sign 001B  
                  ?i2_ReadEE 0001                __end_of_putch 2868                  i2printf@idx 0017  
                i2printf@len 001A                  i2printf@val 001D                   __end_of_AD 2570  
                    ??_CCW90 0018                    ?i2___ftge 001C                    ?i2___wmul 0001  
                  ?i2_check9 002A                    ?i2_checkC 002A                    ?i2_checkV 0025  
         __size_of_lcdNibble 0068                  i2putch@data 0003                 _HexDecToDec2 23DE  
          HexDecToDec2@digit 000E                    ?i2_printV 0023                    ?i2_printf 000D  
          HexDecToDec2@tenth 000C                  intrpt@F3114 00BD                      ??_putch 0082  
                 back@result 0002                   __pbssBANK0 00BD                      ?_ReadEE 0080  
               stopMoving@em 0025                      ?___ftge 009B                 WriteRun@time 0009  
               ?i2_lcdNibble 0001                      ?___wmul 0080                      ?_check9 00A9  
                    ?_checkC 00A9                      ?_checkV 00A4                   ??i2_ReadEE 0003  
                    ?_intrpt 0001                    ?___awtoft 0088                    ?___ftpack 0080  
                    ?_testAD 0001                      ?_printV 00A6                      ?_printf 008C  
                  ?_WriteRun 0007                   ??i2___ftge 0022                   ??i2___wmul 0005  
                 ??i2_check9 002C                   ??i2_checkC 002C                   ??i2_checkV 0027  
             WriteRun@sorted 0007                   ??i2_printV 0025                   ??i2_printf 0011  
                    _SSPCON1 000FC6                      _SSPCON2 000FC5                      _SSPSTAT 000FC7  
                testAD@F3118 00D3                      i2_putch 2878               _stopMoving$552 0023  
__size_ofi2_I2C_Master_Start 0008            __end_of_lcdNibble 221C                      _ReadRun 11D8  
__size_ofi2_I2C_Master_Write 000A                      _PermLog 15FC                      __Hparam 0000  
            __size_of_ReadEE 0018                      __Lparam 0000                   _initLatest 278A  
                  ?_showInfo 0023              __size_of___ftge 00C8                    ?_simulate 0001  
                    ___awdiv 1D8A                      _WriteEE 273E                      ___lldiv 179C  
            __size_of___wmul 0036                      ___ftmul 107A              __size_of_check9 0084  
            __size_of_checkC 0084              __size_of_checkV 00A6                      ___lwdiv 1E8C  
                    ___lwmod 221C                      _checkAA 1E0E                      __pcinit 26F2  
               ??i2___awtoft 000C                 ??i2___ftpack 0006                   ??___awtoft 008B  
                 ??___ftpack 0085      i2___ftmul@f3_as_product 0017              i2printV@charged 0023  
                    __ramtop 1000                   _initialize 22DE              __size_of_intrpt 0F10  
                    _lcdInst 2868                   ??_WriteRun 000B              __size_of_testAD 00A4  
                    __ptext0 246C                      __ptext1 19AC                      __ptext2 1C82  
                    __ptext3 1E0E                      _getTime 1BF8                      __ptext4 1D06  
                    __ptext5 2616                      __ptext6 1906                      __ptext7 107A  
                    __ptext8 16D4                      __ptext9 24B0              __size_of_printV 0032  
               PermLog@F3082 00CF              __size_of_printf 046A                      check9@V 00AD  
                    checkC@V 00AD                      _initLCD 2426            __end_of_hexpowers FDDB  
                    _dpowers FDC9                      _isdigit 2676     __size_of_I2C_Master_Init 0060  
   __size_of_I2C_Master_Read 002E                      _showRTC 1B6E     __size_of_I2C_Master_Wait 0014  
   __size_of_I2C_Master_Stop 0008               __pintcode_body 0D6A         end_of_initialization 270A  
              __Lmediumconst FDC8                      int_func 0D6A          i2___wmul@multiplier 0001  
         __end_ofi2___awtoft 25A8           __end_ofi2___ftpack 1906    __size_of_I2C_Master_Start 0008  
  __size_of_I2C_Master_Write 000A              ___lldiv@divisor 0084              ___lldiv@counter 008C  
                  _PWMC$1391 0011                    _PWMC$1392 0012                    _PWMC$1393 0013  
            i2checkAA@sorted 002A                   ??_showInfo 0027                      printf@c 00A5  
                    printf@f 008C             I2C_Master_Init@c 008D             I2C_Master_Read@a 0081  
                    postdec2 000FDD                   ??_simulate 0030                      postinc0 000FEE  
                    postinc2 000FDE             checkV@threshhold 00A4                    _PORTBbits 000F81  
                PWMC@widthus 0009              simulate@portCCW 003C            i2_I2C_Master_Read 2718  
          i2_I2C_Master_Wait 2846            i2_I2C_Master_Stop 28B4            i2___lwdiv@divisor 0003  
                  i2___ftmul 1416                    i2___lwdiv 238C                    i2___lwmod 24F4  
          i2___lwdiv@counter 0007           ?i2_I2C_Master_Read 0001           ?i2_I2C_Master_Wait 0001  
         ?i2_I2C_Master_Stop 0001                    i2_checkAA 2066                    i2_lcdInst 2884  
                  i2_getTime 1F04                  printf@width 00A3                    i2check9@V 002E  
            i2___awtoft@sign 000C              PermLog@backruns 0039                    i2checkC@V 002E  
                 _stopMoving 25A8          ??i2_I2C_Master_Read 0002              i2___ftpack@sign 0005  
                  i2_isdigit 27AC          ??i2_I2C_Master_Wait 0001          ??i2_I2C_Master_Stop 0002  
              ReadRun@sorted 0003                  simulate@now 0042                 check9@sorted 00A9  
                ___ftmul@exp 0095               __end_of_ReadEE 281C                  ?_initLatest 0001  
             __end_of___ftge 179C               __end_of___wmul 2616               __end_of_check9 1D8A  
             __end_of_checkC 1D06               __end_of_checkV 19AC         __size_ofi2_lcdNibble 0056  
                ?_initialize 0001                i2lcdInst@data 0003                 checkC@sorted 00A9  
          __size_ofi2_ReadEE 0016               __end_of_intrpt 0F18               __end_of_testAD 1A50  
           i2___wmul@product 0005               __end_of_printV 2648               __end_of_printf 047C  
               i2printf@flag 001F              i2ReadEE@address 0001    __end_ofi2_I2C_Master_Read 273E  
  __end_ofi2_I2C_Master_Wait 2858                 i2printf@prec 001C          start_initialization 26F2  
  __end_ofi2_I2C_Master_Stop 28BC            __size_ofi2___ftge 0090            __size_ofi2___wmul 0026  
          __size_ofi2_check9 0076            __size_ofi2_checkC 0076            __size_ofi2_checkV 008E  
                  i2printf@c 0022                    i2printf@f 000D       __size_of_captureKeypad 001E  
      i2I2C_Master_Read@temp 0003                   ?i2___ftmul 000D                i2getTime@time 0004  
                 ?i2___lwdiv 0001                   ?i2___lwmod 0008            __size_ofi2_printV 0028  
          __size_ofi2_printf 039A                   ?i2_checkAA 002A              i2checkV@channel 0027  
          ??_I2C_Master_Init 0091            ??_I2C_Master_Read 0081            ??_I2C_Master_Wait 0080  
                 ?i2_lcdInst 0001            ??_I2C_Master_Stop 0081                   ?i2_getTime 0004  
                i2AD@channel 0005                   ?i2_isdigit 0001                     ??_ReadEE 0082  
                   CW90@port 0016                     ??___ftge 00A1                     ??___wmul 0084  
                   ??_check9 00AB                     ??_checkC 00AB                     ??_checkV 00A6  
            i2checkV@voltage 0028             __CFG_LPT1OSC$OFF 000000                     ??_intrpt 0056  
                   ??_testAD 00AF                     ??_printV 00A8                     ??_printf 0094  
                WriteEE@data 0003            __size_of___awtoft 0044            __size_of___ftpack 010C  
          __size_of_WriteRun 0162                  __pbssCOMRAM 006D                __pcstackBANK0 0080  
          i2___lwmod@divisor 000A            i2___lwmod@counter 000C                 _isdigit$1050 0081  
        __size_of_initLatest 0022                     ?i2_putch 0001               intrpt@keypress 0066  
        __size_of_initialize 0058                  ?_stopMoving 0001             _I2C_Master_Start 28AC  
                   ?_ReadRun 0003          i2I2C_Master_Write@d 0002             _I2C_Master_Write 2890  
                   ?_PermLog 0001             ___lwdiv@dividend 0080                 intrpt@portCW 0067  
          __CFG_CCP2MX$PORTC 000000                  WriteRun@add 000D                _captureKeypad 27CA  
                  __pintcode 0008                __pmediumconst FDC8                    _lcdNibble 21B4  
                   ?___awdiv 0001                     ?_WriteEE 0001                     ?___lldiv 0080  
                   ?___ftmul 008C                     ?___lwdiv 0080                     ?___lwmod 0087  
          __size_of_showInfo 0228                     ?_checkAA 00A9            __size_of_simulate 032C  
                   ?_lcdInst 0001                     ?_getTime 0083                     PWMC@port 000D  
             __size_of_CCW90 006E                     ?_initLCD 0001                     ?_isdigit 0001  
 __size_ofi2_I2C_Master_Read 0026   __size_ofi2_I2C_Master_Wait 0012   __size_ofi2_I2C_Master_Stop 0008  
                   ?_showRTC 0001                    _hexpowers FDD3             ___lwdiv@quotient 0084  
                ??i2___ftmul 0013                  ??i2___lwdiv 0005                  ??i2___lwmod 000C  
             __size_of_putch 0010                  __size_of_AD 003A                  ??i2_checkAA 002C  
 __end_ofi2_I2C_Master_Start 28C4   __end_ofi2_I2C_Master_Write 28A4                  ??i2_lcdInst 0003  
                ??i2_getTime 0006               ___wmul@product 0084                     _LATDbits 000F8C  
                ??i2_isdigit 0001                     i2u301_45 1574                     i2u301_46 1576  
                   i2u304_45 15A4                     i2u304_46 15A6                     i2u307_45 15D4  
                   i2u307_46 15D6                     i2u325_40 2736                     i2u341_41 08D4  
                   i2u342_41 08E6                     i2u334_45 23EA                     i2u337_40 0F2E  
                   i2u370_47 16A4                     i2u355_41 0DB4               ?_captureKeypad 0001  
                   _PIR2bits 000FA1                     i2u371_47 234E                     i2u372_47 2358  
                   i2u373_47 237A                     i2u374_47 2384                     i2u368_47 0B16  
                   i2u369_47 15E6             __CFG_WDTPS$32768 000000                   PWMC@cycles 000B  
                 ?_lcdNibble 0001               i2check9@sorted 002A                     i2_ReadEE 281C  
                 _ADCON0bits 000FC2            ___wmul@multiplier 0080                     i2___ftge 1A50  
                   i2___wmul 2764                     i2_check9 1FF0                     i2_checkC 1F7A  
              lcdNibble@data 0081                     i2_checkV 1AE0                   printf@flag 00A2  
              lcdNibble@temp 0080                   printf@prec 009F                   simulate@AA 004A  
        __size_of_stopMoving 0038               i2checkC@sorted 002A                   simulate@V9 004E  
                   i2_printV 26CA                     i2_printf 047C        captureKeypad@keypress 0003  
        I2C_Master_Read@temp 0082             __size_ofi2_putch 000C                   _EECON1bits 000FA6  
             showInfo@sorted 0025                     __Hrparam 0000             __size_of_ReadRun 0132  
                   __Lrparam 0000             __size_of_PermLog 00D8                 ??_initLatest 0082  
         __CFG_BOREN$SBORDIS 000000                 testAD@sorted 00B7             __size_of___awdiv 0084  
      i2___wmul@multiplicand 0003             __size_of_WriteEE 0026             __size_of___lldiv 00BC  
           __size_of___ftmul 015E             __size_of___lwdiv 0078             __size_of___lwmod 0062  
               ??_initialize 0095                     ___awtoft 24B0                     ___ftpack 130A  
           __size_of_checkAA 007E                     _WriteRun 0F18           i2I2C_Master_Read@a 0002  
           __size_of_lcdInst 0010             __size_of_getTime 008A              HexDecToDec2@hex 0007  
         i2checkV@threshhold 0025              _I2C_Master_Init 227E              _I2C_Master_Read 2648  
           __size_of_initLCD 0046                     back@runs 0001                ?_HexDecToDec2 0007  
            _I2C_Master_Wait 2832              _I2C_Master_Stop 28A4             __size_of_isdigit 002A  
            ___lwdiv@divisor 0082              ___lwdiv@counter 0086                     __ptext10 130A  
                   __ptext11 2536                     __ptext20 2890                     __ptext12 1B6E  
                   __ptext21 28A4                     __ptext13 0012                     __ptext30 21B4  
                   __ptext22 28AC                     __ptext14 2858                     __ptext31 227E  
                   __ptext23 2648                     __ptext15 2676                     __ptext40 2846  
                   __ptext32 179C                     __ptext24 2832                     __ptext16 25E0  
                   __ptext41 1F7A                     __ptext25 22DE                     __ptext17 221C  
                   __ptext50 26A0                     __ptext42 2066                     __ptext34 0816  
                   __ptext26 278A                     __ptext18 1E8C                     __ptext51 25A8  
                   __ptext43 1FF0                     __ptext35 1F04                     __ptext27 2804  
                   __ptext19 1BF8                     __ptext60 0B42                     __ptext52 0F18  
                   __ptext44 26CA                     __ptext36 289A                     __ptext28 2426  
                   __ptext61 047C                     __ptext53 273E                     __ptext45 1AE0  
                   __ptext37 28B4                     __ptext29 2868                     __ptext70 11D8  
                   __ptext62 2878                     __ptext54 23DE                     __ptext46 1416  
                   __ptext38 28BC                     __ptext71 281C                     __ptext63 27AC  
                   __ptext55 20D8                     __ptext47 1A50                     __ptext39 2718  
                   __ptext72 27E8                     __ptext64 2764                     __ptext56 2146  
                   __ptext48 2570                     __ptext65 24F4                     __ptext57 150A  
                   __ptext49 1858                     __ptext66 238C                     __ptext58 1D8A  
                   __ptext67 2884                     __ptext59 15FC                     __ptext68 2336  
                   __ptext69 27CA             __size_of_showRTC 008A           __end_of_initLatest 27AC  
                   checkAA@V 00AD                __size_of_CW90 006E                __size_ofi2_AD 002A  
              __size_of_PWMC 00F2               i2_isdigit$1050 0002                __size_of_back 001C  
              __size_of_main 0044           __end_of_initialize 2336              ??_captureKeypad 0003  
                   _showInfo 0B42                ??i2_lcdNibble 0001                  ??_lcdNibble 0080  
                   getTime@i 0085                     _simulate 0816                     int$flags 007E  
                  printf@idx 009A                    printf@len 009D                    printf@val 00A0  
                  simulate@C 004C                PermLog@goback 0036               ??_HexDecToDec2 0009  
                  putch@data 0082     __end_of_I2C_Master_Start 28B4     __end_of_I2C_Master_Write 289A  
                 _INTCONbits 000FF2                PermLog@sorted 0032                  _testAD$1395 00B1  
                _testAD$1396 00B3                  _testAD$1397 00B5                PWMC@countdown 0014  
                   isdigit@c 0082                _simulate$1556 0034                     intlevel2 0000  
           ___lwmod@dividend 0087             ___lldiv@dividend 0080                 ??_stopMoving 0023  
                   printf@ap 009B                     printf@cp 0098      __end_of_I2C_Master_Init 22DE  
    __end_of_I2C_Master_Read 2676      __end_of_I2C_Master_Wait 2846      __end_of_I2C_Master_Stop 28AC  
                lcdInst@data 0082                 showInfo@time 0023                 showInfo@stop 002E  
               showInfo@type 002C          __end_ofi2_lcdNibble 238C             ___lldiv@quotient 0088  
          I2C_Master_Write@d 0081              ___lwmod@divisor 0089              ___lwmod@counter 008B  
         __end_of_stopMoving 25E0               WriteEE@address 0001                  getTime@time 0083  
              printV@charged 00A6  
